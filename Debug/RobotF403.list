
RobotF403.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001dcfc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001108  0801dea0  0801dea0  0002dea0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801efa8  0801efa8  0002efa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801efb0  0801efb0  0002efb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801efb4  0801efb4  0002efb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00001650  20000000  0801efb8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002280  20001650  08020608  00031650  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  200038d0  08020608  000338d0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00031650  2**0
                  CONTENTS, READONLY
 10 .debug_info   00070bb8  00000000  00000000  00031680  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000079ad  00000000  00000000  000a2238  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00020aa6  00000000  00000000  000a9be5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000031d8  00000000  00000000  000ca690  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00003008  00000000  00000000  000cd868  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00016d3c  00000000  00000000  000d0870  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00014c91  00000000  00000000  000e75ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000fb  00000000  00000000  000fc23d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b854  00000000  00000000  000fc338  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20001650 	.word	0x20001650
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801de84 	.word	0x0801de84

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20001654 	.word	0x20001654
 80001dc:	0801de84 	.word	0x0801de84

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f092 0f00 	teq	r2, #0
 800057a:	bf14      	ite	ne
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e720      	b.n	80003d4 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aedc 	beq.w	8000382 <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6c1      	b.n	8000382 <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2uiz>:
 8000bb0:	004a      	lsls	r2, r1, #1
 8000bb2:	d211      	bcs.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bb4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb8:	d211      	bcs.n	8000bde <__aeabi_d2uiz+0x2e>
 8000bba:	d50d      	bpl.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bbc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc4:	d40e      	bmi.n	8000be4 <__aeabi_d2uiz+0x34>
 8000bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d102      	bne.n	8000bea <__aeabi_d2uiz+0x3a>
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	4770      	bx	lr
 8000bea:	f04f 0000 	mov.w	r0, #0
 8000bee:	4770      	bx	lr

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_uldivmod>:
 8000c90:	b953      	cbnz	r3, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c92:	b94a      	cbnz	r2, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c94:	2900      	cmp	r1, #0
 8000c96:	bf08      	it	eq
 8000c98:	2800      	cmpeq	r0, #0
 8000c9a:	bf1c      	itt	ne
 8000c9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca4:	f000 b97a 	b.w	8000f9c <__aeabi_idiv0>
 8000ca8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb0:	f000 f806 	bl	8000cc0 <__udivmoddi4>
 8000cb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cbc:	b004      	add	sp, #16
 8000cbe:	4770      	bx	lr

08000cc0 <__udivmoddi4>:
 8000cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cc4:	468c      	mov	ip, r1
 8000cc6:	460d      	mov	r5, r1
 8000cc8:	4604      	mov	r4, r0
 8000cca:	9e08      	ldr	r6, [sp, #32]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d151      	bne.n	8000d74 <__udivmoddi4+0xb4>
 8000cd0:	428a      	cmp	r2, r1
 8000cd2:	4617      	mov	r7, r2
 8000cd4:	d96d      	bls.n	8000db2 <__udivmoddi4+0xf2>
 8000cd6:	fab2 fe82 	clz	lr, r2
 8000cda:	f1be 0f00 	cmp.w	lr, #0
 8000cde:	d00b      	beq.n	8000cf8 <__udivmoddi4+0x38>
 8000ce0:	f1ce 0c20 	rsb	ip, lr, #32
 8000ce4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000ce8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000cec:	fa02 f70e 	lsl.w	r7, r2, lr
 8000cf0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000cf4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000cf8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000cfc:	0c25      	lsrs	r5, r4, #16
 8000cfe:	fbbc f8fa 	udiv	r8, ip, sl
 8000d02:	fa1f f987 	uxth.w	r9, r7
 8000d06:	fb0a cc18 	mls	ip, sl, r8, ip
 8000d0a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d0e:	fb08 f309 	mul.w	r3, r8, r9
 8000d12:	42ab      	cmp	r3, r5
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x6c>
 8000d16:	19ed      	adds	r5, r5, r7
 8000d18:	f108 32ff 	add.w	r2, r8, #4294967295
 8000d1c:	f080 8123 	bcs.w	8000f66 <__udivmoddi4+0x2a6>
 8000d20:	42ab      	cmp	r3, r5
 8000d22:	f240 8120 	bls.w	8000f66 <__udivmoddi4+0x2a6>
 8000d26:	f1a8 0802 	sub.w	r8, r8, #2
 8000d2a:	443d      	add	r5, r7
 8000d2c:	1aed      	subs	r5, r5, r3
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d34:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d38:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d3c:	fb00 f909 	mul.w	r9, r0, r9
 8000d40:	45a1      	cmp	r9, r4
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x98>
 8000d44:	19e4      	adds	r4, r4, r7
 8000d46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4a:	f080 810a 	bcs.w	8000f62 <__udivmoddi4+0x2a2>
 8000d4e:	45a1      	cmp	r9, r4
 8000d50:	f240 8107 	bls.w	8000f62 <__udivmoddi4+0x2a2>
 8000d54:	3802      	subs	r0, #2
 8000d56:	443c      	add	r4, r7
 8000d58:	eba4 0409 	sub.w	r4, r4, r9
 8000d5c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d60:	2100      	movs	r1, #0
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d061      	beq.n	8000e2a <__udivmoddi4+0x16a>
 8000d66:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	6034      	str	r4, [r6, #0]
 8000d6e:	6073      	str	r3, [r6, #4]
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	428b      	cmp	r3, r1
 8000d76:	d907      	bls.n	8000d88 <__udivmoddi4+0xc8>
 8000d78:	2e00      	cmp	r6, #0
 8000d7a:	d054      	beq.n	8000e26 <__udivmoddi4+0x166>
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d82:	4608      	mov	r0, r1
 8000d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d88:	fab3 f183 	clz	r1, r3
 8000d8c:	2900      	cmp	r1, #0
 8000d8e:	f040 808e 	bne.w	8000eae <__udivmoddi4+0x1ee>
 8000d92:	42ab      	cmp	r3, r5
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xdc>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80fa 	bhi.w	8000f90 <__udivmoddi4+0x2d0>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb65 0503 	sbc.w	r5, r5, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	46ac      	mov	ip, r5
 8000da6:	2e00      	cmp	r6, #0
 8000da8:	d03f      	beq.n	8000e2a <__udivmoddi4+0x16a>
 8000daa:	e886 1010 	stmia.w	r6, {r4, ip}
 8000dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db2:	b912      	cbnz	r2, 8000dba <__udivmoddi4+0xfa>
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000dba:	fab7 fe87 	clz	lr, r7
 8000dbe:	f1be 0f00 	cmp.w	lr, #0
 8000dc2:	d134      	bne.n	8000e2e <__udivmoddi4+0x16e>
 8000dc4:	1beb      	subs	r3, r5, r7
 8000dc6:	0c3a      	lsrs	r2, r7, #16
 8000dc8:	fa1f fc87 	uxth.w	ip, r7
 8000dcc:	2101      	movs	r1, #1
 8000dce:	fbb3 f8f2 	udiv	r8, r3, r2
 8000dd2:	0c25      	lsrs	r5, r4, #16
 8000dd4:	fb02 3318 	mls	r3, r2, r8, r3
 8000dd8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000ddc:	fb0c f308 	mul.w	r3, ip, r8
 8000de0:	42ab      	cmp	r3, r5
 8000de2:	d907      	bls.n	8000df4 <__udivmoddi4+0x134>
 8000de4:	19ed      	adds	r5, r5, r7
 8000de6:	f108 30ff 	add.w	r0, r8, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x132>
 8000dec:	42ab      	cmp	r3, r5
 8000dee:	f200 80d1 	bhi.w	8000f94 <__udivmoddi4+0x2d4>
 8000df2:	4680      	mov	r8, r0
 8000df4:	1aed      	subs	r5, r5, r3
 8000df6:	b2a3      	uxth	r3, r4
 8000df8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000dfc:	fb02 5510 	mls	r5, r2, r0, r5
 8000e00:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000e04:	fb0c fc00 	mul.w	ip, ip, r0
 8000e08:	45a4      	cmp	ip, r4
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x15c>
 8000e0c:	19e4      	adds	r4, r4, r7
 8000e0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x15a>
 8000e14:	45a4      	cmp	ip, r4
 8000e16:	f200 80b8 	bhi.w	8000f8a <__udivmoddi4+0x2ca>
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	eba4 040c 	sub.w	r4, r4, ip
 8000e20:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e24:	e79d      	b.n	8000d62 <__udivmoddi4+0xa2>
 8000e26:	4631      	mov	r1, r6
 8000e28:	4630      	mov	r0, r6
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	f1ce 0420 	rsb	r4, lr, #32
 8000e32:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e36:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e3a:	fa20 f804 	lsr.w	r8, r0, r4
 8000e3e:	0c3a      	lsrs	r2, r7, #16
 8000e40:	fa25 f404 	lsr.w	r4, r5, r4
 8000e44:	ea48 0803 	orr.w	r8, r8, r3
 8000e48:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e4c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e50:	fb02 4411 	mls	r4, r2, r1, r4
 8000e54:	fa1f fc87 	uxth.w	ip, r7
 8000e58:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e5c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e60:	42ab      	cmp	r3, r5
 8000e62:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e66:	d909      	bls.n	8000e7c <__udivmoddi4+0x1bc>
 8000e68:	19ed      	adds	r5, r5, r7
 8000e6a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e6e:	f080 808a 	bcs.w	8000f86 <__udivmoddi4+0x2c6>
 8000e72:	42ab      	cmp	r3, r5
 8000e74:	f240 8087 	bls.w	8000f86 <__udivmoddi4+0x2c6>
 8000e78:	3902      	subs	r1, #2
 8000e7a:	443d      	add	r5, r7
 8000e7c:	1aeb      	subs	r3, r5, r3
 8000e7e:	fa1f f588 	uxth.w	r5, r8
 8000e82:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e86:	fb02 3310 	mls	r3, r2, r0, r3
 8000e8a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e8e:	fb00 f30c 	mul.w	r3, r0, ip
 8000e92:	42ab      	cmp	r3, r5
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x1e6>
 8000e96:	19ed      	adds	r5, r5, r7
 8000e98:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e9c:	d26f      	bcs.n	8000f7e <__udivmoddi4+0x2be>
 8000e9e:	42ab      	cmp	r3, r5
 8000ea0:	d96d      	bls.n	8000f7e <__udivmoddi4+0x2be>
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	443d      	add	r5, r7
 8000ea6:	1aeb      	subs	r3, r5, r3
 8000ea8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eac:	e78f      	b.n	8000dce <__udivmoddi4+0x10e>
 8000eae:	f1c1 0720 	rsb	r7, r1, #32
 8000eb2:	fa22 f807 	lsr.w	r8, r2, r7
 8000eb6:	408b      	lsls	r3, r1
 8000eb8:	fa05 f401 	lsl.w	r4, r5, r1
 8000ebc:	ea48 0303 	orr.w	r3, r8, r3
 8000ec0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000ec4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	ea4e 0e04 	orr.w	lr, lr, r4
 8000ece:	fbb5 f9fc 	udiv	r9, r5, ip
 8000ed2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000ed6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000eda:	fa1f f883 	uxth.w	r8, r3
 8000ede:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000ee2:	fb09 f408 	mul.w	r4, r9, r8
 8000ee6:	42ac      	cmp	r4, r5
 8000ee8:	fa02 f201 	lsl.w	r2, r2, r1
 8000eec:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x244>
 8000ef2:	18ed      	adds	r5, r5, r3
 8000ef4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ef8:	d243      	bcs.n	8000f82 <__udivmoddi4+0x2c2>
 8000efa:	42ac      	cmp	r4, r5
 8000efc:	d941      	bls.n	8000f82 <__udivmoddi4+0x2c2>
 8000efe:	f1a9 0902 	sub.w	r9, r9, #2
 8000f02:	441d      	add	r5, r3
 8000f04:	1b2d      	subs	r5, r5, r4
 8000f06:	fa1f fe8e 	uxth.w	lr, lr
 8000f0a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000f0e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000f12:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000f16:	fb00 f808 	mul.w	r8, r0, r8
 8000f1a:	45a0      	cmp	r8, r4
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x26e>
 8000f1e:	18e4      	adds	r4, r4, r3
 8000f20:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f24:	d229      	bcs.n	8000f7a <__udivmoddi4+0x2ba>
 8000f26:	45a0      	cmp	r8, r4
 8000f28:	d927      	bls.n	8000f7a <__udivmoddi4+0x2ba>
 8000f2a:	3802      	subs	r0, #2
 8000f2c:	441c      	add	r4, r3
 8000f2e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f32:	eba4 0408 	sub.w	r4, r4, r8
 8000f36:	fba0 8902 	umull	r8, r9, r0, r2
 8000f3a:	454c      	cmp	r4, r9
 8000f3c:	46c6      	mov	lr, r8
 8000f3e:	464d      	mov	r5, r9
 8000f40:	d315      	bcc.n	8000f6e <__udivmoddi4+0x2ae>
 8000f42:	d012      	beq.n	8000f6a <__udivmoddi4+0x2aa>
 8000f44:	b156      	cbz	r6, 8000f5c <__udivmoddi4+0x29c>
 8000f46:	ebba 030e 	subs.w	r3, sl, lr
 8000f4a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f4e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f52:	40cb      	lsrs	r3, r1
 8000f54:	431f      	orrs	r7, r3
 8000f56:	40cc      	lsrs	r4, r1
 8000f58:	6037      	str	r7, [r6, #0]
 8000f5a:	6074      	str	r4, [r6, #4]
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f62:	4618      	mov	r0, r3
 8000f64:	e6f8      	b.n	8000d58 <__udivmoddi4+0x98>
 8000f66:	4690      	mov	r8, r2
 8000f68:	e6e0      	b.n	8000d2c <__udivmoddi4+0x6c>
 8000f6a:	45c2      	cmp	sl, r8
 8000f6c:	d2ea      	bcs.n	8000f44 <__udivmoddi4+0x284>
 8000f6e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f72:	eb69 0503 	sbc.w	r5, r9, r3
 8000f76:	3801      	subs	r0, #1
 8000f78:	e7e4      	b.n	8000f44 <__udivmoddi4+0x284>
 8000f7a:	4628      	mov	r0, r5
 8000f7c:	e7d7      	b.n	8000f2e <__udivmoddi4+0x26e>
 8000f7e:	4640      	mov	r0, r8
 8000f80:	e791      	b.n	8000ea6 <__udivmoddi4+0x1e6>
 8000f82:	4681      	mov	r9, r0
 8000f84:	e7be      	b.n	8000f04 <__udivmoddi4+0x244>
 8000f86:	4601      	mov	r1, r0
 8000f88:	e778      	b.n	8000e7c <__udivmoddi4+0x1bc>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	443c      	add	r4, r7
 8000f8e:	e745      	b.n	8000e1c <__udivmoddi4+0x15c>
 8000f90:	4608      	mov	r0, r1
 8000f92:	e708      	b.n	8000da6 <__udivmoddi4+0xe6>
 8000f94:	f1a8 0802 	sub.w	r8, r8, #2
 8000f98:	443d      	add	r5, r7
 8000f9a:	e72b      	b.n	8000df4 <__udivmoddi4+0x134>

08000f9c <__aeabi_idiv0>:
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <HTS221_GetCapabilities>:
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	708b      	strb	r3, [r1, #2]
  Capabilities->Pressure    = 0;
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	7048      	strb	r0, [r1, #1]
  Capabilities->Temperature = 1;
 8000fa8:	700b      	strb	r3, [r1, #0]
  Capabilities->LowPower    = 0;
 8000faa:	70c8      	strb	r0, [r1, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 8000fac:	4b02      	ldr	r3, [pc, #8]	; (8000fb8 <HTS221_GetCapabilities+0x18>)
 8000fae:	604b      	str	r3, [r1, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 8000fb0:	608b      	str	r3, [r1, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60cb      	str	r3, [r1, #12]
  return HTS221_OK;
}
 8000fb6:	4770      	bx	lr
 8000fb8:	41480000 	.word	0x41480000

08000fbc <Linear_Interpolation>:
 * @param  Coeff the coefficient
 * @retval Calculation result
 */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8000fbc:	edd0 6a03 	vldr	s13, [r0, #12]
 8000fc0:	edd0 7a01 	vldr	s15, [r0, #4]
 8000fc4:	ee36 7ae7 	vsub.f32	s14, s13, s15
 8000fc8:	ee27 0a00 	vmul.f32	s0, s14, s0
 8000fcc:	ed90 7a02 	vldr	s14, [r0, #8]
 8000fd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fd4:	ed90 6a00 	vldr	s12, [r0]
 8000fd8:	ee66 6a86 	vmul.f32	s13, s13, s12
 8000fdc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000fe0:	ee70 7a27 	vadd.f32	s15, s0, s15
 8000fe4:	ee37 0a46 	vsub.f32	s0, s14, s12
}
 8000fe8:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8000fec:	4770      	bx	lr

08000fee <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8000fee:	b510      	push	{r4, lr}
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8000ff0:	6884      	ldr	r4, [r0, #8]
 8000ff2:	b12c      	cbz	r4, 8001000 <ReadRegWrap+0x12>
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8000ff4:	6944      	ldr	r4, [r0, #20]
 8000ff6:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8000ffa:	7b00      	ldrb	r0, [r0, #12]
 8000ffc:	47a0      	blx	r4
  }
}
 8000ffe:	bd10      	pop	{r4, pc}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001000:	6944      	ldr	r4, [r0, #20]
 8001002:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001006:	7b00      	ldrb	r0, [r0, #12]
 8001008:	47a0      	blx	r4
 800100a:	bd10      	pop	{r4, pc}

0800100c <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800100c:	b510      	push	{r4, lr}
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 800100e:	6884      	ldr	r4, [r0, #8]
 8001010:	b12c      	cbz	r4, 800101e <WriteRegWrap+0x12>
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001012:	6904      	ldr	r4, [r0, #16]
 8001014:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8001018:	7b00      	ldrb	r0, [r0, #12]
 800101a:	47a0      	blx	r4
  }
}
 800101c:	bd10      	pop	{r4, pc}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800101e:	6904      	ldr	r4, [r0, #16]
 8001020:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001024:	7b00      	ldrb	r0, [r0, #12]
 8001026:	47a0      	blx	r4
 8001028:	bd10      	pop	{r4, pc}

0800102a <HTS221_HUM_Enable>:
  if (pObj->hum_is_enabled == 1U)
 800102a:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800102e:	2b01      	cmp	r3, #1
 8001030:	d012      	beq.n	8001058 <HTS221_HUM_Enable+0x2e>
{
 8001032:	b510      	push	{r4, lr}
 8001034:	4604      	mov	r4, r0
  if (pObj->temp_is_enabled == 0U)
 8001036:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 800103a:	b123      	cbz	r3, 8001046 <HTS221_HUM_Enable+0x1c>
  pObj->hum_is_enabled = 1;
 800103c:	2301      	movs	r3, #1
 800103e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  return HTS221_OK;
 8001042:	2000      	movs	r0, #0
 8001044:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001046:	2101      	movs	r1, #1
 8001048:	301c      	adds	r0, #28
 800104a:	f000 fa74 	bl	8001536 <hts221_power_on_set>
 800104e:	2800      	cmp	r0, #0
 8001050:	d0f4      	beq.n	800103c <HTS221_HUM_Enable+0x12>
      return HTS221_ERROR;
 8001052:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001056:	bd10      	pop	{r4, pc}
    return HTS221_OK;
 8001058:	2000      	movs	r0, #0
 800105a:	4770      	bx	lr

0800105c <HTS221_HUM_Disable>:
  if (pObj->hum_is_enabled == 0U)
 800105c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8001060:	b18b      	cbz	r3, 8001086 <HTS221_HUM_Disable+0x2a>
{
 8001062:	b510      	push	{r4, lr}
 8001064:	4604      	mov	r4, r0
  if (pObj->temp_is_enabled == 0U)
 8001066:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 800106a:	b11b      	cbz	r3, 8001074 <HTS221_HUM_Disable+0x18>
  pObj->hum_is_enabled = 0;
 800106c:	2000      	movs	r0, #0
 800106e:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
  return HTS221_OK;
 8001072:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001074:	2100      	movs	r1, #0
 8001076:	301c      	adds	r0, #28
 8001078:	f000 fa5d 	bl	8001536 <hts221_power_on_set>
 800107c:	2800      	cmp	r0, #0
 800107e:	d0f5      	beq.n	800106c <HTS221_HUM_Disable+0x10>
      return HTS221_ERROR;
 8001080:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001084:	bd10      	pop	{r4, pc}
    return HTS221_OK;
 8001086:	2000      	movs	r0, #0
 8001088:	4770      	bx	lr

0800108a <HTS221_TEMP_Enable>:
  if (pObj->temp_is_enabled == 1U)
 800108a:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 800108e:	2b01      	cmp	r3, #1
 8001090:	d012      	beq.n	80010b8 <HTS221_TEMP_Enable+0x2e>
{
 8001092:	b510      	push	{r4, lr}
 8001094:	4604      	mov	r4, r0
  if (pObj->hum_is_enabled == 0U)
 8001096:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800109a:	b123      	cbz	r3, 80010a6 <HTS221_TEMP_Enable+0x1c>
  pObj->temp_is_enabled = 1;
 800109c:	2301      	movs	r3, #1
 800109e:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  return HTS221_OK;
 80010a2:	2000      	movs	r0, #0
 80010a4:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80010a6:	2101      	movs	r1, #1
 80010a8:	301c      	adds	r0, #28
 80010aa:	f000 fa44 	bl	8001536 <hts221_power_on_set>
 80010ae:	2800      	cmp	r0, #0
 80010b0:	d0f4      	beq.n	800109c <HTS221_TEMP_Enable+0x12>
      return HTS221_ERROR;
 80010b2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80010b6:	bd10      	pop	{r4, pc}
    return HTS221_OK;
 80010b8:	2000      	movs	r0, #0
 80010ba:	4770      	bx	lr

080010bc <HTS221_TEMP_Disable>:
  if (pObj->temp_is_enabled == 0U)
 80010bc:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 80010c0:	b18b      	cbz	r3, 80010e6 <HTS221_TEMP_Disable+0x2a>
{
 80010c2:	b510      	push	{r4, lr}
 80010c4:	4604      	mov	r4, r0
  if (pObj->hum_is_enabled == 0U)
 80010c6:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80010ca:	b11b      	cbz	r3, 80010d4 <HTS221_TEMP_Disable+0x18>
  pObj->temp_is_enabled = 0;
 80010cc:	2000      	movs	r0, #0
 80010ce:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
  return HTS221_OK;
 80010d2:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80010d4:	2100      	movs	r1, #0
 80010d6:	301c      	adds	r0, #28
 80010d8:	f000 fa2d 	bl	8001536 <hts221_power_on_set>
 80010dc:	2800      	cmp	r0, #0
 80010de:	d0f5      	beq.n	80010cc <HTS221_TEMP_Disable+0x10>
      return HTS221_ERROR;
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80010e4:	bd10      	pop	{r4, pc}
    return HTS221_OK;
 80010e6:	2000      	movs	r0, #0
 80010e8:	4770      	bx	lr

080010ea <HTS221_DeInit>:
{
 80010ea:	b510      	push	{r4, lr}
 80010ec:	4604      	mov	r4, r0
  if (pObj->is_initialized == 1U)
 80010ee:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d003      	beq.n	80010fe <HTS221_DeInit+0x14>
  pObj->is_initialized = 0;
 80010f6:	2000      	movs	r0, #0
 80010f8:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
  return HTS221_OK;
 80010fc:	bd10      	pop	{r4, pc}
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 80010fe:	f7ff ffad 	bl	800105c <HTS221_HUM_Disable>
 8001102:	b938      	cbnz	r0, 8001114 <HTS221_DeInit+0x2a>
    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8001104:	4620      	mov	r0, r4
 8001106:	f7ff ffd9 	bl	80010bc <HTS221_TEMP_Disable>
 800110a:	2800      	cmp	r0, #0
 800110c:	d0f3      	beq.n	80010f6 <HTS221_DeInit+0xc>
      return HTS221_ERROR;
 800110e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001112:	bd10      	pop	{r4, pc}
      return HTS221_ERROR;
 8001114:	f04f 30ff 	mov.w	r0, #4294967295
 8001118:	bd10      	pop	{r4, pc}

0800111a <HTS221_SetOutputDataRate>:
{
 800111a:	b508      	push	{r3, lr}
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 800111c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001120:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001128:	d90e      	bls.n	8001148 <HTS221_SetOutputDataRate+0x2e>
 800112a:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
 800112e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001136:	d809      	bhi.n	800114c <HTS221_SetOutputDataRate+0x32>
 8001138:	2102      	movs	r1, #2
  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 800113a:	301c      	adds	r0, #28
 800113c:	f000 f98c 	bl	8001458 <hts221_data_rate_set>
 8001140:	4603      	mov	r3, r0
 8001142:	b928      	cbnz	r0, 8001150 <HTS221_SetOutputDataRate+0x36>
}
 8001144:	4618      	mov	r0, r3
 8001146:	bd08      	pop	{r3, pc}
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8001148:	2101      	movs	r1, #1
 800114a:	e7f6      	b.n	800113a <HTS221_SetOutputDataRate+0x20>
 800114c:	2103      	movs	r1, #3
 800114e:	e7f4      	b.n	800113a <HTS221_SetOutputDataRate+0x20>
    return HTS221_ERROR;
 8001150:	f04f 33ff 	mov.w	r3, #4294967295
 8001154:	e7f6      	b.n	8001144 <HTS221_SetOutputDataRate+0x2a>

08001156 <HTS221_Initialize>:
{
 8001156:	b538      	push	{r3, r4, r5, lr}
 8001158:	4605      	mov	r5, r0
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 800115a:	f100 041c 	add.w	r4, r0, #28
 800115e:	2100      	movs	r1, #0
 8001160:	4620      	mov	r0, r4
 8001162:	f000 f9e8 	bl	8001536 <hts221_power_on_set>
 8001166:	b980      	cbnz	r0, 800118a <HTS221_Initialize+0x34>
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001168:	2101      	movs	r1, #1
 800116a:	4620      	mov	r0, r4
 800116c:	f000 f9b2 	bl	80014d4 <hts221_block_data_update_set>
 8001170:	b970      	cbnz	r0, 8001190 <HTS221_Initialize+0x3a>
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8001172:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001176:	4628      	mov	r0, r5
 8001178:	f7ff ffcf 	bl	800111a <HTS221_SetOutputDataRate>
 800117c:	4603      	mov	r3, r0
 800117e:	b908      	cbnz	r0, 8001184 <HTS221_Initialize+0x2e>
}
 8001180:	4618      	mov	r0, r3
 8001182:	bd38      	pop	{r3, r4, r5, pc}
    return HTS221_ERROR;
 8001184:	f04f 33ff 	mov.w	r3, #4294967295
 8001188:	e7fa      	b.n	8001180 <HTS221_Initialize+0x2a>
    return HTS221_ERROR;
 800118a:	f04f 33ff 	mov.w	r3, #4294967295
 800118e:	e7f7      	b.n	8001180 <HTS221_Initialize+0x2a>
    return HTS221_ERROR;
 8001190:	f04f 33ff 	mov.w	r3, #4294967295
 8001194:	e7f4      	b.n	8001180 <HTS221_Initialize+0x2a>

08001196 <HTS221_Init>:
{
 8001196:	b510      	push	{r4, lr}
 8001198:	4604      	mov	r4, r0
  if (pObj->is_initialized == 0U)
 800119a:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800119e:	b123      	cbz	r3, 80011aa <HTS221_Init+0x14>
  pObj->is_initialized = 1;
 80011a0:	2301      	movs	r3, #1
 80011a2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  return HTS221_OK;
 80011a6:	2000      	movs	r0, #0
 80011a8:	bd10      	pop	{r4, pc}
    if (HTS221_Initialize(pObj) != HTS221_OK)
 80011aa:	f7ff ffd4 	bl	8001156 <HTS221_Initialize>
 80011ae:	2800      	cmp	r0, #0
 80011b0:	d0f6      	beq.n	80011a0 <HTS221_Init+0xa>
      return HTS221_ERROR;
 80011b2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80011b6:	bd10      	pop	{r4, pc}

080011b8 <HTS221_HUM_SetOutputDataRate>:
{
 80011b8:	b508      	push	{r3, lr}
  return HTS221_SetOutputDataRate(pObj, Odr);
 80011ba:	f7ff ffae 	bl	800111a <HTS221_SetOutputDataRate>
}
 80011be:	bd08      	pop	{r3, pc}

080011c0 <HTS221_TEMP_SetOutputDataRate>:
{
 80011c0:	b508      	push	{r3, lr}
  return HTS221_SetOutputDataRate(pObj, Odr);
 80011c2:	f7ff ffaa 	bl	800111a <HTS221_SetOutputDataRate>
}
 80011c6:	bd08      	pop	{r3, pc}

080011c8 <HTS221_ReadID>:
{
 80011c8:	b508      	push	{r3, lr}
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 80011ca:	301c      	adds	r0, #28
 80011cc:	f000 f9ac 	bl	8001528 <hts221_device_id_get>
 80011d0:	4603      	mov	r3, r0
 80011d2:	b908      	cbnz	r0, 80011d8 <HTS221_ReadID+0x10>
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	bd08      	pop	{r3, pc}
    return HTS221_ERROR;
 80011d8:	f04f 33ff 	mov.w	r3, #4294967295
 80011dc:	e7fa      	b.n	80011d4 <HTS221_ReadID+0xc>
	...

080011e0 <HTS221_GetOutputDataRate>:
{
 80011e0:	b510      	push	{r4, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	460c      	mov	r4, r1
  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 80011e6:	f10d 0107 	add.w	r1, sp, #7
 80011ea:	301c      	adds	r0, #28
 80011ec:	f000 f950 	bl	8001490 <hts221_data_rate_get>
 80011f0:	b9b8      	cbnz	r0, 8001222 <HTS221_GetOutputDataRate+0x42>
 80011f2:	4602      	mov	r2, r0
  switch (odr_low_level)
 80011f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80011f8:	2b03      	cmp	r3, #3
 80011fa:	d815      	bhi.n	8001228 <HTS221_GetOutputDataRate+0x48>
 80011fc:	e8df f003 	tbb	[pc, r3]
 8001200:	0e0b0702 	.word	0x0e0b0702
      *Odr = 0.0f;
 8001204:	2300      	movs	r3, #0
 8001206:	6023      	str	r3, [r4, #0]
}
 8001208:	4610      	mov	r0, r2
 800120a:	b002      	add	sp, #8
 800120c:	bd10      	pop	{r4, pc}
      *Odr = 1.0f;
 800120e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001212:	6023      	str	r3, [r4, #0]
      break;
 8001214:	e7f8      	b.n	8001208 <HTS221_GetOutputDataRate+0x28>
      *Odr = 7.0f;
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HTS221_GetOutputDataRate+0x50>)
 8001218:	6023      	str	r3, [r4, #0]
      break;
 800121a:	e7f5      	b.n	8001208 <HTS221_GetOutputDataRate+0x28>
      *Odr = 12.5f;
 800121c:	4b05      	ldr	r3, [pc, #20]	; (8001234 <HTS221_GetOutputDataRate+0x54>)
 800121e:	6023      	str	r3, [r4, #0]
      break;
 8001220:	e7f2      	b.n	8001208 <HTS221_GetOutputDataRate+0x28>
    return HTS221_ERROR;
 8001222:	f04f 32ff 	mov.w	r2, #4294967295
 8001226:	e7ef      	b.n	8001208 <HTS221_GetOutputDataRate+0x28>
      ret = HTS221_ERROR;
 8001228:	f04f 32ff 	mov.w	r2, #4294967295
 800122c:	e7ec      	b.n	8001208 <HTS221_GetOutputDataRate+0x28>
 800122e:	bf00      	nop
 8001230:	40e00000 	.word	0x40e00000
 8001234:	41480000 	.word	0x41480000

08001238 <HTS221_HUM_GetOutputDataRate>:
{
 8001238:	b508      	push	{r3, lr}
  return HTS221_GetOutputDataRate(pObj, Odr);
 800123a:	f7ff ffd1 	bl	80011e0 <HTS221_GetOutputDataRate>
}
 800123e:	bd08      	pop	{r3, pc}

08001240 <HTS221_TEMP_GetOutputDataRate>:
{
 8001240:	b508      	push	{r3, lr}
  return HTS221_GetOutputDataRate(pObj, Odr);
 8001242:	f7ff ffcd 	bl	80011e0 <HTS221_GetOutputDataRate>
}
 8001246:	bd08      	pop	{r3, pc}

08001248 <HTS221_HUM_GetHumidity>:
{
 8001248:	b530      	push	{r4, r5, lr}
 800124a:	b087      	sub	sp, #28
 800124c:	460d      	mov	r5, r1
  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 800124e:	f100 041c 	add.w	r4, r0, #28
 8001252:	a904      	add	r1, sp, #16
 8001254:	4620      	mov	r0, r4
 8001256:	f000 f9ea 	bl	800162e <hts221_hum_adc_point_0_get>
 800125a:	2800      	cmp	r0, #0
 800125c:	d15a      	bne.n	8001314 <HTS221_HUM_GetHumidity+0xcc>
  lin_hum.x0 = (float)coeff.i16bit;
 800125e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8001262:	ee07 3a90 	vmov	s15, r3
 8001266:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800126a:	edcd 7a00 	vstr	s15, [sp]
  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 800126e:	a904      	add	r1, sp, #16
 8001270:	4620      	mov	r0, r4
 8001272:	f000 f97c 	bl	800156e <hts221_hum_rh_point_0_get>
 8001276:	2800      	cmp	r0, #0
 8001278:	d14f      	bne.n	800131a <HTS221_HUM_GetHumidity+0xd2>
  lin_hum.y0 = (float)coeff.u8bit[0];
 800127a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800127e:	ee07 3a90 	vmov	s15, r3
 8001282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001286:	edcd 7a01 	vstr	s15, [sp, #4]
  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 800128a:	a904      	add	r1, sp, #16
 800128c:	4620      	mov	r0, r4
 800128e:	f000 f9d5 	bl	800163c <hts221_hum_adc_point_1_get>
 8001292:	2800      	cmp	r0, #0
 8001294:	d144      	bne.n	8001320 <HTS221_HUM_GetHumidity+0xd8>
  lin_hum.x1 = (float)coeff.i16bit;
 8001296:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 800129a:	ee07 3a90 	vmov	s15, r3
 800129e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012a2:	edcd 7a02 	vstr	s15, [sp, #8]
  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 80012a6:	a904      	add	r1, sp, #16
 80012a8:	4620      	mov	r0, r4
 80012aa:	f000 f96b 	bl	8001584 <hts221_hum_rh_point_1_get>
 80012ae:	bbd0      	cbnz	r0, 8001326 <HTS221_HUM_GetHumidity+0xde>
  lin_hum.y1 = (float)coeff.u8bit[0];
 80012b0:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80012b4:	ee07 3a90 	vmov	s15, r3
 80012b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012bc:	edcd 7a03 	vstr	s15, [sp, #12]
  (void)memset(data_raw_humidity.u8bit, 0x00, sizeof(int16_t));
 80012c0:	2300      	movs	r3, #0
 80012c2:	f8ad 3014 	strh.w	r3, [sp, #20]
  if (hts221_humidity_raw_get(&(pObj->Ctx), data_raw_humidity.u8bit) != HTS221_OK)
 80012c6:	a905      	add	r1, sp, #20
 80012c8:	4620      	mov	r0, r4
 80012ca:	f000 f91f 	bl	800150c <hts221_humidity_raw_get>
 80012ce:	4604      	mov	r4, r0
 80012d0:	bb60      	cbnz	r0, 800132c <HTS221_HUM_GetHumidity+0xe4>
  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 80012d2:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80012d6:	ee00 3a10 	vmov	s0, r3
 80012da:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80012de:	4668      	mov	r0, sp
 80012e0:	f7ff fe6c 	bl	8000fbc <Linear_Interpolation>
 80012e4:	ed85 0a00 	vstr	s0, [r5]
  if (*Value < 0.0f)
 80012e8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80012ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f0:	d40d      	bmi.n	800130e <HTS221_HUM_GetHumidity+0xc6>
  if (*Value > 100.0f)
 80012f2:	ed95 7a00 	vldr	s14, [r5]
 80012f6:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8001334 <HTS221_HUM_GetHumidity+0xec>
 80012fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	dd01      	ble.n	8001308 <HTS221_HUM_GetHumidity+0xc0>
    *Value = 100.0f;
 8001304:	edc5 7a00 	vstr	s15, [r5]
}
 8001308:	4620      	mov	r0, r4
 800130a:	b007      	add	sp, #28
 800130c:	bd30      	pop	{r4, r5, pc}
    *Value = 0.0f;
 800130e:	2300      	movs	r3, #0
 8001310:	602b      	str	r3, [r5, #0]
 8001312:	e7ee      	b.n	80012f2 <HTS221_HUM_GetHumidity+0xaa>
    return HTS221_ERROR;
 8001314:	f04f 34ff 	mov.w	r4, #4294967295
 8001318:	e7f6      	b.n	8001308 <HTS221_HUM_GetHumidity+0xc0>
    return HTS221_ERROR;
 800131a:	f04f 34ff 	mov.w	r4, #4294967295
 800131e:	e7f3      	b.n	8001308 <HTS221_HUM_GetHumidity+0xc0>
    return HTS221_ERROR;
 8001320:	f04f 34ff 	mov.w	r4, #4294967295
 8001324:	e7f0      	b.n	8001308 <HTS221_HUM_GetHumidity+0xc0>
    return HTS221_ERROR;
 8001326:	f04f 34ff 	mov.w	r4, #4294967295
 800132a:	e7ed      	b.n	8001308 <HTS221_HUM_GetHumidity+0xc0>
    return HTS221_ERROR;
 800132c:	f04f 34ff 	mov.w	r4, #4294967295
 8001330:	e7ea      	b.n	8001308 <HTS221_HUM_GetHumidity+0xc0>
 8001332:	bf00      	nop
 8001334:	42c80000 	.word	0x42c80000

08001338 <HTS221_TEMP_GetTemperature>:
{
 8001338:	b530      	push	{r4, r5, lr}
 800133a:	b087      	sub	sp, #28
 800133c:	460d      	mov	r5, r1
  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 800133e:	f100 041c 	add.w	r4, r0, #28
 8001342:	a904      	add	r1, sp, #16
 8001344:	4620      	mov	r0, r4
 8001346:	f000 f980 	bl	800164a <hts221_temp_adc_point_0_get>
 800134a:	2800      	cmp	r0, #0
 800134c:	d146      	bne.n	80013dc <HTS221_TEMP_GetTemperature+0xa4>
  lin_temp.x0 = (float)coeff.i16bit;
 800134e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8001352:	ee07 3a90 	vmov	s15, r3
 8001356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800135a:	edcd 7a00 	vstr	s15, [sp]
  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 800135e:	a904      	add	r1, sp, #16
 8001360:	4620      	mov	r0, r4
 8001362:	f000 f91a 	bl	800159a <hts221_temp_deg_point_0_get>
 8001366:	2800      	cmp	r0, #0
 8001368:	d13b      	bne.n	80013e2 <HTS221_TEMP_GetTemperature+0xaa>
  lin_temp.y0 = (float)coeff.u8bit[0];
 800136a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800136e:	ee07 3a90 	vmov	s15, r3
 8001372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001376:	edcd 7a01 	vstr	s15, [sp, #4]
  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 800137a:	a904      	add	r1, sp, #16
 800137c:	4620      	mov	r0, r4
 800137e:	f000 f96b 	bl	8001658 <hts221_temp_adc_point_1_get>
 8001382:	bb88      	cbnz	r0, 80013e8 <HTS221_TEMP_GetTemperature+0xb0>
  lin_temp.x1 = (float)coeff.i16bit;
 8001384:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8001388:	ee07 3a90 	vmov	s15, r3
 800138c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001390:	edcd 7a02 	vstr	s15, [sp, #8]
  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8001394:	a904      	add	r1, sp, #16
 8001396:	4620      	mov	r0, r4
 8001398:	f000 f924 	bl	80015e4 <hts221_temp_deg_point_1_get>
 800139c:	bb38      	cbnz	r0, 80013ee <HTS221_TEMP_GetTemperature+0xb6>
  lin_temp.y1 = (float)coeff.u8bit[0];
 800139e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80013a2:	ee07 3a90 	vmov	s15, r3
 80013a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013aa:	edcd 7a03 	vstr	s15, [sp, #12]
  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 80013ae:	2300      	movs	r3, #0
 80013b0:	f8ad 3014 	strh.w	r3, [sp, #20]
  if (hts221_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != HTS221_OK)
 80013b4:	a905      	add	r1, sp, #20
 80013b6:	4620      	mov	r0, r4
 80013b8:	f000 f8af 	bl	800151a <hts221_temperature_raw_get>
 80013bc:	4604      	mov	r4, r0
 80013be:	b9c8      	cbnz	r0, 80013f4 <HTS221_TEMP_GetTemperature+0xbc>
  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 80013c0:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80013c4:	ee00 3a10 	vmov	s0, r3
 80013c8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80013cc:	4668      	mov	r0, sp
 80013ce:	f7ff fdf5 	bl	8000fbc <Linear_Interpolation>
 80013d2:	ed85 0a00 	vstr	s0, [r5]
}
 80013d6:	4620      	mov	r0, r4
 80013d8:	b007      	add	sp, #28
 80013da:	bd30      	pop	{r4, r5, pc}
    return HTS221_ERROR;
 80013dc:	f04f 34ff 	mov.w	r4, #4294967295
 80013e0:	e7f9      	b.n	80013d6 <HTS221_TEMP_GetTemperature+0x9e>
    return HTS221_ERROR;
 80013e2:	f04f 34ff 	mov.w	r4, #4294967295
 80013e6:	e7f6      	b.n	80013d6 <HTS221_TEMP_GetTemperature+0x9e>
    return HTS221_ERROR;
 80013e8:	f04f 34ff 	mov.w	r4, #4294967295
 80013ec:	e7f3      	b.n	80013d6 <HTS221_TEMP_GetTemperature+0x9e>
    return HTS221_ERROR;
 80013ee:	f04f 34ff 	mov.w	r4, #4294967295
 80013f2:	e7f0      	b.n	80013d6 <HTS221_TEMP_GetTemperature+0x9e>
    return HTS221_ERROR;
 80013f4:	f04f 34ff 	mov.w	r4, #4294967295
 80013f8:	e7ed      	b.n	80013d6 <HTS221_TEMP_GetTemperature+0x9e>
	...

080013fc <HTS221_RegisterBusIO>:
  if (pObj == NULL)
 80013fc:	b1b8      	cbz	r0, 800142e <HTS221_RegisterBusIO+0x32>
{
 80013fe:	b508      	push	{r3, lr}
 8001400:	4603      	mov	r3, r0
    pObj->IO.Init      = pIO->Init;
 8001402:	680a      	ldr	r2, [r1, #0]
 8001404:	6002      	str	r2, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001406:	6848      	ldr	r0, [r1, #4]
 8001408:	6058      	str	r0, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800140a:	6888      	ldr	r0, [r1, #8]
 800140c:	6098      	str	r0, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800140e:	7b08      	ldrb	r0, [r1, #12]
 8001410:	7318      	strb	r0, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001412:	6908      	ldr	r0, [r1, #16]
 8001414:	6118      	str	r0, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001416:	6948      	ldr	r0, [r1, #20]
 8001418:	6158      	str	r0, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800141a:	6989      	ldr	r1, [r1, #24]
 800141c:	6199      	str	r1, [r3, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 800141e:	4907      	ldr	r1, [pc, #28]	; (800143c <HTS221_RegisterBusIO+0x40>)
 8001420:	6219      	str	r1, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8001422:	4907      	ldr	r1, [pc, #28]	; (8001440 <HTS221_RegisterBusIO+0x44>)
 8001424:	61d9      	str	r1, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8001426:	625b      	str	r3, [r3, #36]	; 0x24
    if (pObj->IO.Init != NULL)
 8001428:	b122      	cbz	r2, 8001434 <HTS221_RegisterBusIO+0x38>
      ret = pObj->IO.Init();
 800142a:	4790      	blx	r2
 800142c:	bd08      	pop	{r3, pc}
    ret = HTS221_ERROR;
 800142e:	f04f 30ff 	mov.w	r0, #4294967295
 8001432:	4770      	bx	lr
      ret = HTS221_ERROR;
 8001434:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001438:	bd08      	pop	{r3, pc}
 800143a:	bf00      	nop
 800143c:	08000fef 	.word	0x08000fef
 8001440:	0800100d 	.word	0x0800100d

08001444 <hts221_read_reg>:
  * @param  uint16_t len: number of consecutive register to read
  *
  */
int32_t hts221_read_reg(hts221_ctx_t *ctx, uint8_t reg, uint8_t *data,
                        uint16_t len)
{
 8001444:	b510      	push	{r4, lr}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001446:	6844      	ldr	r4, [r0, #4]
 8001448:	6880      	ldr	r0, [r0, #8]
 800144a:	47a0      	blx	r4
  return ret;
}
 800144c:	bd10      	pop	{r4, pc}

0800144e <hts221_write_reg>:
  * @param  uint16_t len: number of consecutive register to write
  *
*/
int32_t hts221_write_reg(hts221_ctx_t *ctx, uint8_t reg, uint8_t *data,
                         uint16_t len)
{
 800144e:	b510      	push	{r4, lr}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001450:	6804      	ldr	r4, [r0, #0]
 8001452:	6880      	ldr	r0, [r0, #8]
 8001454:	47a0      	blx	r4
  return ret;
}
 8001456:	bd10      	pop	{r4, pc}

08001458 <hts221_data_rate_set>:
  * @param  hts221_ctx_t *ctx: read / write interface definitions
  * @param  hts221_odr_t: change the values of odr in reg CTRL_REG1
  *
  */
int32_t hts221_data_rate_set(hts221_ctx_t *ctx, hts221_odr_t val)
{
 8001458:	b530      	push	{r4, r5, lr}
 800145a:	b083      	sub	sp, #12
 800145c:	4604      	mov	r4, r0
 800145e:	460d      	mov	r5, r1
  hts221_reg_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
 8001460:	2301      	movs	r3, #1
 8001462:	aa01      	add	r2, sp, #4
 8001464:	2120      	movs	r1, #32
 8001466:	f7ff ffed 	bl	8001444 <hts221_read_reg>

  if (ret == 0)
 800146a:	4603      	mov	r3, r0
 800146c:	b110      	cbz	r0, 8001474 <hts221_data_rate_set+0x1c>
    reg.ctrl_reg1.odr = (uint8_t)val;
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
  }

  return ret;
}
 800146e:	4618      	mov	r0, r3
 8001470:	b003      	add	sp, #12
 8001472:	bd30      	pop	{r4, r5, pc}
    reg.ctrl_reg1.odr = (uint8_t)val;
 8001474:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001478:	f365 0301 	bfi	r3, r5, #0, #2
 800147c:	aa02      	add	r2, sp, #8
 800147e:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
 8001482:	2301      	movs	r3, #1
 8001484:	2120      	movs	r1, #32
 8001486:	4620      	mov	r0, r4
 8001488:	f7ff ffe1 	bl	800144e <hts221_write_reg>
 800148c:	4603      	mov	r3, r0
  return ret;
 800148e:	e7ee      	b.n	800146e <hts221_data_rate_set+0x16>

08001490 <hts221_data_rate_get>:
  * @param  hts221_ctx_t *ctx: read / write interface definitions
  * @param  hts221_odr_t: Get the values of odr in reg CTRL_REG1
  *
  */
int32_t hts221_data_rate_get(hts221_ctx_t *ctx, hts221_odr_t *val)
{
 8001490:	b510      	push	{r4, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	460c      	mov	r4, r1
  hts221_reg_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
 8001496:	2301      	movs	r3, #1
 8001498:	aa01      	add	r2, sp, #4
 800149a:	2120      	movs	r1, #32
 800149c:	f7ff ffd2 	bl	8001444 <hts221_read_reg>

  switch (reg.ctrl_reg1.odr)
 80014a0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80014a4:	f003 0303 	and.w	r3, r3, #3
 80014a8:	2b03      	cmp	r3, #3
 80014aa:	d810      	bhi.n	80014ce <hts221_data_rate_get+0x3e>
 80014ac:	e8df f003 	tbb	[pc, r3]
 80014b0:	0c090602 	.word	0x0c090602
  {
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 80014b4:	2300      	movs	r3, #0
 80014b6:	7023      	strb	r3, [r4, #0]
      *val = HTS221_ODR_ND;
      break;
  }

  return ret;
}
 80014b8:	b002      	add	sp, #8
 80014ba:	bd10      	pop	{r4, pc}
      *val = HTS221_ODR_1Hz;
 80014bc:	2301      	movs	r3, #1
 80014be:	7023      	strb	r3, [r4, #0]
      break;
 80014c0:	e7fa      	b.n	80014b8 <hts221_data_rate_get+0x28>
      *val = HTS221_ODR_7Hz;
 80014c2:	2302      	movs	r3, #2
 80014c4:	7023      	strb	r3, [r4, #0]
      break;
 80014c6:	e7f7      	b.n	80014b8 <hts221_data_rate_get+0x28>
      *val = HTS221_ODR_12Hz5;
 80014c8:	2303      	movs	r3, #3
 80014ca:	7023      	strb	r3, [r4, #0]
      break;
 80014cc:	e7f4      	b.n	80014b8 <hts221_data_rate_get+0x28>
      *val = HTS221_ODR_ND;
 80014ce:	2304      	movs	r3, #4
 80014d0:	7023      	strb	r3, [r4, #0]
  return ret;
 80014d2:	e7f1      	b.n	80014b8 <hts221_data_rate_get+0x28>

080014d4 <hts221_block_data_update_set>:
  * @param  hts221_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t val: change the values of bdu in reg CTRL_REG1
  *
  */
int32_t hts221_block_data_update_set(hts221_ctx_t *ctx, uint8_t val)
{
 80014d4:	b530      	push	{r4, r5, lr}
 80014d6:	b083      	sub	sp, #12
 80014d8:	4604      	mov	r4, r0
 80014da:	460d      	mov	r5, r1
  hts221_reg_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
 80014dc:	2301      	movs	r3, #1
 80014de:	aa01      	add	r2, sp, #4
 80014e0:	2120      	movs	r1, #32
 80014e2:	f7ff ffaf 	bl	8001444 <hts221_read_reg>

  if (ret == 0)
 80014e6:	4603      	mov	r3, r0
 80014e8:	b110      	cbz	r0, 80014f0 <hts221_block_data_update_set+0x1c>
    reg.ctrl_reg1.bdu = val;
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
  }

  return ret;
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	b003      	add	sp, #12
 80014ee:	bd30      	pop	{r4, r5, pc}
    reg.ctrl_reg1.bdu = val;
 80014f0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80014f4:	f365 0382 	bfi	r3, r5, #2, #1
 80014f8:	aa02      	add	r2, sp, #8
 80014fa:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
 80014fe:	2301      	movs	r3, #1
 8001500:	2120      	movs	r1, #32
 8001502:	4620      	mov	r0, r4
 8001504:	f7ff ffa3 	bl	800144e <hts221_write_reg>
 8001508:	4603      	mov	r3, r0
  return ret;
 800150a:	e7ee      	b.n	80014ea <hts221_block_data_update_set+0x16>

0800150c <hts221_humidity_raw_get>:
  * @param  hts221_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t hts221_humidity_raw_get(hts221_ctx_t *ctx, uint8_t *buff)
{
 800150c:	b508      	push	{r3, lr}
  return hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 800150e:	2302      	movs	r3, #2
 8001510:	460a      	mov	r2, r1
 8001512:	2128      	movs	r1, #40	; 0x28
 8001514:	f7ff ff96 	bl	8001444 <hts221_read_reg>
}
 8001518:	bd08      	pop	{r3, pc}

0800151a <hts221_temperature_raw_get>:
  * @param  hts221_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t hts221_temperature_raw_get(hts221_ctx_t *ctx, uint8_t *buff)
{
 800151a:	b508      	push	{r3, lr}
  return hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 800151c:	2302      	movs	r3, #2
 800151e:	460a      	mov	r2, r1
 8001520:	212a      	movs	r1, #42	; 0x2a
 8001522:	f7ff ff8f 	bl	8001444 <hts221_read_reg>
}
 8001526:	bd08      	pop	{r3, pc}

08001528 <hts221_device_id_get>:
  * @param  hts221_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t hts221_device_id_get(hts221_ctx_t *ctx, uint8_t *buff)
{
 8001528:	b508      	push	{r3, lr}
  return hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 800152a:	2301      	movs	r3, #1
 800152c:	460a      	mov	r2, r1
 800152e:	210f      	movs	r1, #15
 8001530:	f7ff ff88 	bl	8001444 <hts221_read_reg>
}
 8001534:	bd08      	pop	{r3, pc}

08001536 <hts221_power_on_set>:
  * @param  hts221_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t val: change the values of pd in reg CTRL_REG1
  *
  */
int32_t hts221_power_on_set(hts221_ctx_t *ctx, uint8_t val)
{
 8001536:	b530      	push	{r4, r5, lr}
 8001538:	b083      	sub	sp, #12
 800153a:	4604      	mov	r4, r0
 800153c:	460d      	mov	r5, r1
  hts221_reg_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
 800153e:	2301      	movs	r3, #1
 8001540:	aa01      	add	r2, sp, #4
 8001542:	2120      	movs	r1, #32
 8001544:	f7ff ff7e 	bl	8001444 <hts221_read_reg>

  if (ret == 0)
 8001548:	4603      	mov	r3, r0
 800154a:	b110      	cbz	r0, 8001552 <hts221_power_on_set+0x1c>
  {
    reg.ctrl_reg1.pd = val;
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
  }
  return ret;
}
 800154c:	4618      	mov	r0, r3
 800154e:	b003      	add	sp, #12
 8001550:	bd30      	pop	{r4, r5, pc}
    reg.ctrl_reg1.pd = val;
 8001552:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001556:	f365 13c7 	bfi	r3, r5, #7, #1
 800155a:	aa02      	add	r2, sp, #8
 800155c:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
 8001560:	2301      	movs	r3, #1
 8001562:	2120      	movs	r1, #32
 8001564:	4620      	mov	r0, r4
 8001566:	f7ff ff72 	bl	800144e <hts221_write_reg>
 800156a:	4603      	mov	r3, r0
  return ret;
 800156c:	e7ee      	b.n	800154c <hts221_power_on_set+0x16>

0800156e <hts221_hum_rh_point_0_get>:
  * @param  hts221_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t hts221_hum_rh_point_0_get(hts221_ctx_t *ctx, uint8_t *buff)
{
 800156e:	b510      	push	{r4, lr}
 8001570:	460c      	mov	r4, r1
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, buff, 1);
 8001572:	2301      	movs	r3, #1
 8001574:	460a      	mov	r2, r1
 8001576:	2130      	movs	r1, #48	; 0x30
 8001578:	f7ff ff64 	bl	8001444 <hts221_read_reg>
  *buff = (uint8_t)(((uint16_t)(*buff) >> 1) & 0x7FFFu);
 800157c:	7823      	ldrb	r3, [r4, #0]
 800157e:	085b      	lsrs	r3, r3, #1
 8001580:	7023      	strb	r3, [r4, #0]

  return ret;
}
 8001582:	bd10      	pop	{r4, pc}

08001584 <hts221_hum_rh_point_1_get>:
  * @param  hts221_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t hts221_hum_rh_point_1_get(hts221_ctx_t *ctx, uint8_t *buff)
{
 8001584:	b510      	push	{r4, lr}
 8001586:	460c      	mov	r4, r1
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, buff, 1);
 8001588:	2301      	movs	r3, #1
 800158a:	460a      	mov	r2, r1
 800158c:	2131      	movs	r1, #49	; 0x31
 800158e:	f7ff ff59 	bl	8001444 <hts221_read_reg>
  *buff = (uint8_t)(((uint16_t)(*buff) >> 1) & 0x7FFFu);
 8001592:	7823      	ldrb	r3, [r4, #0]
 8001594:	085b      	lsrs	r3, r3, #1
 8001596:	7023      	strb	r3, [r4, #0]

  return ret;
}
 8001598:	bd10      	pop	{r4, pc}

0800159a <hts221_temp_deg_point_0_get>:
  * @param  hts221_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t hts221_temp_deg_point_0_get(hts221_ctx_t *ctx, uint8_t *buff)
{
 800159a:	b530      	push	{r4, r5, lr}
 800159c:	b083      	sub	sp, #12
 800159e:	4605      	mov	r5, r0
 80015a0:	460c      	mov	r4, r1
  hts221_reg_t reg;
  int32_t ret;
  axis1bit16_t coeff;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, coeff.u8bit, 1);
 80015a2:	2301      	movs	r3, #1
 80015a4:	466a      	mov	r2, sp
 80015a6:	2132      	movs	r1, #50	; 0x32
 80015a8:	f7ff ff4c 	bl	8001444 <hts221_read_reg>

  if (ret == 0)
 80015ac:	4603      	mov	r3, r0
 80015ae:	b110      	cbz	r0, 80015b6 <hts221_temp_deg_point_0_get+0x1c>
    coeff.i16bit = coeff.i16bit / 8;
    *(buff) = (uint8_t)coeff.i16bit;
  }

  return ret;
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	b003      	add	sp, #12
 80015b4:	bd30      	pop	{r4, r5, pc}
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, &reg.byte, 1);
 80015b6:	2301      	movs	r3, #1
 80015b8:	aa01      	add	r2, sp, #4
 80015ba:	2135      	movs	r1, #53	; 0x35
 80015bc:	4628      	mov	r0, r5
 80015be:	f7ff ff41 	bl	8001444 <hts221_read_reg>
 80015c2:	4603      	mov	r3, r0
    coeff.u8bit[1] = reg.t1_t0_msb.t0_msb;
 80015c4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80015c8:	f3c2 0201 	ubfx	r2, r2, #0, #2
 80015cc:	f88d 2001 	strb.w	r2, [sp, #1]
    coeff.i16bit = coeff.i16bit / 8;
 80015d0:	f9bd 2000 	ldrsh.w	r2, [sp]
 80015d4:	2a00      	cmp	r2, #0
 80015d6:	db03      	blt.n	80015e0 <hts221_temp_deg_point_0_get+0x46>
    *(buff) = (uint8_t)coeff.i16bit;
 80015d8:	f3c2 02c7 	ubfx	r2, r2, #3, #8
 80015dc:	7022      	strb	r2, [r4, #0]
  return ret;
 80015de:	e7e7      	b.n	80015b0 <hts221_temp_deg_point_0_get+0x16>
    coeff.i16bit = coeff.i16bit / 8;
 80015e0:	3207      	adds	r2, #7
 80015e2:	e7f9      	b.n	80015d8 <hts221_temp_deg_point_0_get+0x3e>

080015e4 <hts221_temp_deg_point_1_get>:
  * @param  hts221_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t hts221_temp_deg_point_1_get(hts221_ctx_t *ctx, uint8_t *buff)
{
 80015e4:	b530      	push	{r4, r5, lr}
 80015e6:	b083      	sub	sp, #12
 80015e8:	4605      	mov	r5, r0
 80015ea:	460c      	mov	r4, r1
  hts221_reg_t reg;
  int32_t ret;
  axis1bit16_t coeff;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, coeff.u8bit, 1);
 80015ec:	2301      	movs	r3, #1
 80015ee:	466a      	mov	r2, sp
 80015f0:	2133      	movs	r1, #51	; 0x33
 80015f2:	f7ff ff27 	bl	8001444 <hts221_read_reg>

  if (ret == 0)
 80015f6:	4603      	mov	r3, r0
 80015f8:	b110      	cbz	r0, 8001600 <hts221_temp_deg_point_1_get+0x1c>
    coeff.i16bit = coeff.i16bit / 8;
    *(buff) = (uint8_t)coeff.i16bit;
  }

  return ret;
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	b003      	add	sp, #12
 80015fe:	bd30      	pop	{r4, r5, pc}
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, &reg.byte, 1);
 8001600:	2301      	movs	r3, #1
 8001602:	aa01      	add	r2, sp, #4
 8001604:	2135      	movs	r1, #53	; 0x35
 8001606:	4628      	mov	r0, r5
 8001608:	f7ff ff1c 	bl	8001444 <hts221_read_reg>
 800160c:	4603      	mov	r3, r0
    coeff.u8bit[1] = reg.t1_t0_msb.t1_msb;
 800160e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001612:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8001616:	f88d 2001 	strb.w	r2, [sp, #1]
    coeff.i16bit = coeff.i16bit / 8;
 800161a:	f9bd 2000 	ldrsh.w	r2, [sp]
 800161e:	2a00      	cmp	r2, #0
 8001620:	db03      	blt.n	800162a <hts221_temp_deg_point_1_get+0x46>
    *(buff) = (uint8_t)coeff.i16bit;
 8001622:	f3c2 02c7 	ubfx	r2, r2, #3, #8
 8001626:	7022      	strb	r2, [r4, #0]
  return ret;
 8001628:	e7e7      	b.n	80015fa <hts221_temp_deg_point_1_get+0x16>
    coeff.i16bit = coeff.i16bit / 8;
 800162a:	3207      	adds	r2, #7
 800162c:	e7f9      	b.n	8001622 <hts221_temp_deg_point_1_get+0x3e>

0800162e <hts221_hum_adc_point_0_get>:
  * @param  hts221_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t hts221_hum_adc_point_0_get(hts221_ctx_t *ctx, uint8_t *buff)
{
 800162e:	b508      	push	{r3, lr}
  return hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, buff, 2);
 8001630:	2302      	movs	r3, #2
 8001632:	460a      	mov	r2, r1
 8001634:	2136      	movs	r1, #54	; 0x36
 8001636:	f7ff ff05 	bl	8001444 <hts221_read_reg>
}
 800163a:	bd08      	pop	{r3, pc}

0800163c <hts221_hum_adc_point_1_get>:
  * @param  hts221_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t hts221_hum_adc_point_1_get(hts221_ctx_t *ctx, uint8_t *buff)
{
 800163c:	b508      	push	{r3, lr}
  return hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, buff, 2);
 800163e:	2302      	movs	r3, #2
 8001640:	460a      	mov	r2, r1
 8001642:	213a      	movs	r1, #58	; 0x3a
 8001644:	f7ff fefe 	bl	8001444 <hts221_read_reg>
}
 8001648:	bd08      	pop	{r3, pc}

0800164a <hts221_temp_adc_point_0_get>:
  * @param  hts221_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t hts221_temp_adc_point_0_get(hts221_ctx_t *ctx, uint8_t *buff)
{
 800164a:	b508      	push	{r3, lr}
  return hts221_read_reg(ctx, HTS221_T0_OUT_L, buff, 2);
 800164c:	2302      	movs	r3, #2
 800164e:	460a      	mov	r2, r1
 8001650:	213c      	movs	r1, #60	; 0x3c
 8001652:	f7ff fef7 	bl	8001444 <hts221_read_reg>
}
 8001656:	bd08      	pop	{r3, pc}

08001658 <hts221_temp_adc_point_1_get>:
  * @param  hts221_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t hts221_temp_adc_point_1_get(hts221_ctx_t *ctx, uint8_t *buff)
{
 8001658:	b508      	push	{r3, lr}
  return hts221_read_reg(ctx, HTS221_T1_OUT_L, buff, 2);
 800165a:	2302      	movs	r3, #2
 800165c:	460a      	mov	r2, r1
 800165e:	213e      	movs	r1, #62	; 0x3e
 8001660:	f7ff fef0 	bl	8001444 <hts221_read_reg>
}
 8001664:	bd08      	pop	{r3, pc}
	...

08001668 <L6206_AttachErrorHandler>:
* to the error Hanlder
* @retval None
**********************************************************/
void L6206_AttachErrorHandler(void (*callback)(uint16_t))
{
	errorHandlerCallback = (void (*)(uint16_t))callback;
 8001668:	4b01      	ldr	r3, [pc, #4]	; (8001670 <L6206_AttachErrorHandler+0x8>)
 800166a:	6018      	str	r0, [r3, #0]
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	20002804 	.word	0x20002804

08001674 <L6206_AttachFlagInterrupt>:
* to the Flag Interrupt
* @retval None
**********************************************************/
void L6206_AttachFlagInterrupt(void (*callback)(void))
{
	flagInterruptCallback = (void (*)())callback;
 8001674:	4b01      	ldr	r3, [pc, #4]	; (800167c <L6206_AttachFlagInterrupt+0x8>)
 8001676:	6018      	str	r0, [r3, #0]
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20002808 	.word	0x20002808

08001680 <L6206_GetBridgeInputPwmFreq>:
* @param[in] bridgeId 0 for bridge A, 1 for bridge B
* @retval Freq in Hz
**********************************************************/
uint32_t L6206_GetBridgeInputPwmFreq(uint8_t bridgeId)
{
	return(devicePrm.pwmFreq[(bridgeId << 1)]);
 8001680:	4b02      	ldr	r3, [pc, #8]	; (800168c <L6206_GetBridgeInputPwmFreq+0xc>)
 8001682:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
}
 8001686:	6840      	ldr	r0, [r0, #4]
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	200027dc 	.word	0x200027dc

08001690 <L6206_GetFwVersion>:
* @retval L6206_FW_VERSION
**********************************************************/
uint32_t L6206_GetFwVersion(void)
{
	return(L6206_FW_VERSION);
}
 8001690:	2000      	movs	r0, #0
 8001692:	4770      	bx	lr

08001694 <L6206_ReadId>:
* @retval Id of the l6206 Driver Instance
**********************************************************/
uint16_t L6206_ReadId(void)
{
	return(l6206DriverInstance);
}
 8001694:	4b01      	ldr	r3, [pc, #4]	; (800169c <L6206_ReadId+0x8>)
 8001696:	8818      	ldrh	r0, [r3, #0]
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	20002462 	.word	0x20002462

080016a0 <L6206_SetNbDevices>:
* @retval TRUE if successfull, FALSE if failure, attempt to set a number of
* devices greater than MAX_NUMBER_OF_DEVICES
**********************************************************/
bool L6206_SetNbDevices(uint8_t nbDevices)
{
	if (nbDevices <= MAX_NUMBER_OF_DEVICES) {
 80016a0:	2801      	cmp	r0, #1
 80016a2:	d901      	bls.n	80016a8 <L6206_SetNbDevices+0x8>
		return TRUE;
	}else  {
		return FALSE;
 80016a4:	2000      	movs	r0, #0
	}
}
 80016a6:	4770      	bx	lr
		return TRUE;
 80016a8:	2001      	movs	r0, #1
 80016aa:	4770      	bx	lr

080016ac <L6206_ErrorHandler>:
* @brief Error handler which calls the user callback (if defined)
* @param[in] error Number of the error
* @retval None
**********************************************************/
void L6206_ErrorHandler(uint16_t error)
{
 80016ac:	b508      	push	{r3, lr}
	if (errorHandlerCallback != 0) {
 80016ae:	4b03      	ldr	r3, [pc, #12]	; (80016bc <L6206_ErrorHandler+0x10>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	b10b      	cbz	r3, 80016b8 <L6206_ErrorHandler+0xc>
		(void)errorHandlerCallback(error);
 80016b4:	4798      	blx	r3
	}else  {
		while (1) {
			/* Infinite loop */
		}
	}
}
 80016b6:	bd08      	pop	{r3, pc}
 80016b8:	e7fe      	b.n	80016b8 <L6206_ErrorHandler+0xc>
 80016ba:	bf00      	nop
 80016bc:	20002804 	.word	0x20002804

080016c0 <L6206_GetCurrentSpeed>:
{
 80016c0:	b508      	push	{r3, lr}
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 80016c2:	4b0d      	ldr	r3, [pc, #52]	; (80016f8 <L6206_GetCurrentSpeed+0x38>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	4a0d      	ldr	r2, [pc, #52]	; (80016fc <L6206_GetCurrentSpeed+0x3c>)
 80016c8:	5cd3      	ldrb	r3, [r2, r3]
 80016ca:	4283      	cmp	r3, r0
 80016cc:	d30b      	bcc.n	80016e6 <L6206_GetCurrentSpeed+0x26>
	}else if (devicePrm.motionState[motorId] != INACTIVE) {
 80016ce:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <L6206_GetCurrentSpeed+0x38>)
 80016d0:	4403      	add	r3, r0
 80016d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016d6:	2b08      	cmp	r3, #8
 80016d8:	d00b      	beq.n	80016f2 <L6206_GetCurrentSpeed+0x32>
		speed = devicePrm.speed[motorId];
 80016da:	3008      	adds	r0, #8
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <L6206_GetCurrentSpeed+0x38>)
 80016de:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80016e2:	8880      	ldrh	r0, [r0, #4]
 80016e4:	bd08      	pop	{r3, pc}
		L6206_ErrorHandler(L6206_ERROR_1);
 80016e6:	f248 0001 	movw	r0, #32769	; 0x8001
 80016ea:	f7ff ffdf 	bl	80016ac <L6206_ErrorHandler>
	uint16_t speed = 0;
 80016ee:	2000      	movs	r0, #0
 80016f0:	bd08      	pop	{r3, pc}
 80016f2:	2000      	movs	r0, #0
}
 80016f4:	bd08      	pop	{r3, pc}
 80016f6:	bf00      	nop
 80016f8:	200027dc 	.word	0x200027dc
 80016fc:	0801e084 	.word	0x0801e084

08001700 <L6206_GetDeviceState>:
{
 8001700:	b508      	push	{r3, lr}
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 8001702:	4b08      	ldr	r3, [pc, #32]	; (8001724 <L6206_GetDeviceState+0x24>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	4a08      	ldr	r2, [pc, #32]	; (8001728 <L6206_GetDeviceState+0x28>)
 8001708:	5cd3      	ldrb	r3, [r2, r3]
 800170a:	4283      	cmp	r3, r0
 800170c:	d304      	bcc.n	8001718 <L6206_GetDeviceState+0x18>
		state = devicePrm.motionState[motorId];
 800170e:	4b05      	ldr	r3, [pc, #20]	; (8001724 <L6206_GetDeviceState+0x24>)
 8001710:	4418      	add	r0, r3
 8001712:	f890 0020 	ldrb.w	r0, [r0, #32]
}
 8001716:	bd08      	pop	{r3, pc}
		L6206_ErrorHandler(L6206_ERROR_1);
 8001718:	f248 0001 	movw	r0, #32769	; 0x8001
 800171c:	f7ff ffc6 	bl	80016ac <L6206_ErrorHandler>
	motorState_t state = INACTIVE;
 8001720:	2008      	movs	r0, #8
 8001722:	bd08      	pop	{r3, pc}
 8001724:	200027dc 	.word	0x200027dc
 8001728:	0801e084 	.word	0x0801e084

0800172c <L6206_GetMaxSpeed>:
{
 800172c:	b508      	push	{r3, lr}
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 800172e:	4b09      	ldr	r3, [pc, #36]	; (8001754 <L6206_GetMaxSpeed+0x28>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	4a09      	ldr	r2, [pc, #36]	; (8001758 <L6206_GetMaxSpeed+0x2c>)
 8001734:	5cd3      	ldrb	r3, [r2, r3]
 8001736:	4283      	cmp	r3, r0
 8001738:	d305      	bcc.n	8001746 <L6206_GetMaxSpeed+0x1a>
		speed = devicePrm.speed[motorId];
 800173a:	3008      	adds	r0, #8
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <L6206_GetMaxSpeed+0x28>)
 800173e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8001742:	8880      	ldrh	r0, [r0, #4]
}
 8001744:	bd08      	pop	{r3, pc}
		L6206_ErrorHandler(L6206_ERROR_1);
 8001746:	f248 0001 	movw	r0, #32769	; 0x8001
 800174a:	f7ff ffaf 	bl	80016ac <L6206_ErrorHandler>
	uint16_t speed = 0;
 800174e:	2000      	movs	r0, #0
 8001750:	bd08      	pop	{r3, pc}
 8001752:	bf00      	nop
 8001754:	200027dc 	.word	0x200027dc
 8001758:	0801e084 	.word	0x0801e084

0800175c <L6206_DisableBridge>:
{
 800175c:	b510      	push	{r4, lr}
 800175e:	4604      	mov	r4, r0
	L6206_Board_DisableBridge(bridgeId);
 8001760:	f003 faf2 	bl	8004d48 <L6206_Board_DisableBridge>
	devicePrm.bridgeEnabled[bridgeId] = FALSE;
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <L6206_DisableBridge+0x3c>)
 8001766:	191a      	adds	r2, r3, r4
 8001768:	2100      	movs	r1, #0
 800176a:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
	if (devicePrm.config >= PARALLELING_IN1A_IN2A__IN1B_IN2B__1_BIDIR_MOTOR) {
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b08      	cmp	r3, #8
 8001772:	d907      	bls.n	8001784 <L6206_DisableBridge+0x28>
		if (bridgeId == BRIDGE_A) {
 8001774:	b13c      	cbz	r4, 8001786 <L6206_DisableBridge+0x2a>
			L6206_Board_DisableBridge(BRIDGE_A);
 8001776:	2000      	movs	r0, #0
 8001778:	f003 fae6 	bl	8004d48 <L6206_Board_DisableBridge>
			devicePrm.bridgeEnabled[BRIDGE_A] = FALSE;
 800177c:	2200      	movs	r2, #0
 800177e:	4b06      	ldr	r3, [pc, #24]	; (8001798 <L6206_DisableBridge+0x3c>)
 8001780:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001784:	bd10      	pop	{r4, pc}
			L6206_Board_DisableBridge(BRIDGE_B);
 8001786:	2001      	movs	r0, #1
 8001788:	f003 fade 	bl	8004d48 <L6206_Board_DisableBridge>
			devicePrm.bridgeEnabled[BRIDGE_B] = FALSE;
 800178c:	2200      	movs	r2, #0
 800178e:	4b02      	ldr	r3, [pc, #8]	; (8001798 <L6206_DisableBridge+0x3c>)
 8001790:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8001794:	bd10      	pop	{r4, pc}
 8001796:	bf00      	nop
 8001798:	200027dc 	.word	0x200027dc

0800179c <L6206_EnableBridge>:
{
 800179c:	b510      	push	{r4, lr}
 800179e:	4604      	mov	r4, r0
	devicePrm.bridgeEnabled[bridgeId] = TRUE;
 80017a0:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <L6206_EnableBridge+0x48>)
 80017a2:	181a      	adds	r2, r3, r0
 80017a4:	2101      	movs	r1, #1
 80017a6:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
	if (devicePrm.config >= PARALLELING_IN1A_IN2A__IN1B_IN2B__1_BIDIR_MOTOR) {
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b08      	cmp	r3, #8
 80017ae:	d915      	bls.n	80017dc <L6206_EnableBridge+0x40>
		L6206_Board_EnableBridge(bridgeId, 0);
 80017b0:	2100      	movs	r1, #0
 80017b2:	f003 faed 	bl	8004d90 <L6206_Board_EnableBridge>
		if (bridgeId == BRIDGE_A) {
 80017b6:	b944      	cbnz	r4, 80017ca <L6206_EnableBridge+0x2e>
			L6206_Board_EnableBridge(BRIDGE_B, 1);
 80017b8:	2101      	movs	r1, #1
 80017ba:	4608      	mov	r0, r1
 80017bc:	f003 fae8 	bl	8004d90 <L6206_Board_EnableBridge>
			devicePrm.bridgeEnabled[BRIDGE_B] = TRUE;
 80017c0:	2201      	movs	r2, #1
 80017c2:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <L6206_EnableBridge+0x48>)
 80017c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 80017c8:	bd10      	pop	{r4, pc}
			L6206_Board_EnableBridge(BRIDGE_A, 1);
 80017ca:	2101      	movs	r1, #1
 80017cc:	2000      	movs	r0, #0
 80017ce:	f003 fadf 	bl	8004d90 <L6206_Board_EnableBridge>
			devicePrm.bridgeEnabled[BRIDGE_A] = TRUE;
 80017d2:	2201      	movs	r2, #1
 80017d4:	4b03      	ldr	r3, [pc, #12]	; (80017e4 <L6206_EnableBridge+0x48>)
 80017d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80017da:	bd10      	pop	{r4, pc}
		L6206_Board_EnableBridge(bridgeId, 1);
 80017dc:	2101      	movs	r1, #1
 80017de:	f003 fad7 	bl	8004d90 <L6206_Board_EnableBridge>
 80017e2:	bd10      	pop	{r4, pc}
 80017e4:	200027dc 	.word	0x200027dc

080017e8 <L6206_GetBridgeStatus>:
{
 80017e8:	b508      	push	{r3, lr}
	uint16_t status = L6206_Board_GetFlagPinState(bridgeId);
 80017ea:	f003 fb03 	bl	8004df4 <L6206_Board_GetFlagPinState>
}
 80017ee:	b280      	uxth	r0, r0
 80017f0:	bd08      	pop	{r3, pc}
	...

080017f4 <L6206_FlagInterruptHandler>:
/******************************************************//**
* @brief  Handlers of the flag interrupt which calls the user callback (if defined)
* @retval None
**********************************************************/
void L6206_FlagInterruptHandler(void)
{
 80017f4:	b508      	push	{r3, lr}
	bool status;

	status = L6206_GetBridgeStatus(BRIDGE_A);
 80017f6:	2000      	movs	r0, #0
 80017f8:	f7ff fff6 	bl	80017e8 <L6206_GetBridgeStatus>
 80017fc:	b2c0      	uxtb	r0, r0
	if (status != devicePrm.bridgeEnabled[BRIDGE_A]) {
 80017fe:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <L6206_FlagInterruptHandler+0x3c>)
 8001800:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001804:	4298      	cmp	r0, r3
 8001806:	d002      	beq.n	800180e <L6206_FlagInterruptHandler+0x1a>
		devicePrm.bridgeEnabled[BRIDGE_A] = status;
 8001808:	4b09      	ldr	r3, [pc, #36]	; (8001830 <L6206_FlagInterruptHandler+0x3c>)
 800180a:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
	}

	status = L6206_GetBridgeStatus(BRIDGE_B);
 800180e:	2001      	movs	r0, #1
 8001810:	f7ff ffea 	bl	80017e8 <L6206_GetBridgeStatus>
 8001814:	b2c0      	uxtb	r0, r0
	if (status != devicePrm.bridgeEnabled[BRIDGE_B]) {
 8001816:	4b06      	ldr	r3, [pc, #24]	; (8001830 <L6206_FlagInterruptHandler+0x3c>)
 8001818:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800181c:	4298      	cmp	r0, r3
 800181e:	d002      	beq.n	8001826 <L6206_FlagInterruptHandler+0x32>
		devicePrm.bridgeEnabled[BRIDGE_B] = status;
 8001820:	4b03      	ldr	r3, [pc, #12]	; (8001830 <L6206_FlagInterruptHandler+0x3c>)
 8001822:	f883 0025 	strb.w	r0, [r3, #37]	; 0x25
	}

	if (flagInterruptCallback != 0) {
 8001826:	4b03      	ldr	r3, [pc, #12]	; (8001834 <L6206_FlagInterruptHandler+0x40>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	b103      	cbz	r3, 800182e <L6206_FlagInterruptHandler+0x3a>
		flagInterruptCallback();
 800182c:	4798      	blx	r3
 800182e:	bd08      	pop	{r3, pc}
 8001830:	200027dc 	.word	0x200027dc
 8001834:	20002808 	.word	0x20002808

08001838 <L6206_SetDualFullBridgeConfig>:
{
 8001838:	b510      	push	{r4, lr}
	devicePrm.config = (dualFullBridgeConfig_t)newConfig;
 800183a:	4c34      	ldr	r4, [pc, #208]	; (800190c <L6206_SetDualFullBridgeConfig+0xd4>)
 800183c:	7020      	strb	r0, [r4, #0]
	L6206_Board_PwmDeInit(INPUT_1A);
 800183e:	2000      	movs	r0, #0
 8001840:	f003 fb42 	bl	8004ec8 <L6206_Board_PwmDeInit>
	L6206_Board_PwmDeInit(INPUT_2A);
 8001844:	2001      	movs	r0, #1
 8001846:	f003 fb3f 	bl	8004ec8 <L6206_Board_PwmDeInit>
	L6206_Board_PwmDeInit(INPUT_1B);
 800184a:	2002      	movs	r0, #2
 800184c:	f003 fb3c 	bl	8004ec8 <L6206_Board_PwmDeInit>
	L6206_Board_PwmDeInit(INPUT_2B);
 8001850:	2003      	movs	r0, #3
 8001852:	f003 fb39 	bl	8004ec8 <L6206_Board_PwmDeInit>
	switch (devicePrm.config) {
 8001856:	7823      	ldrb	r3, [r4, #0]
 8001858:	2b0c      	cmp	r3, #12
 800185a:	d855      	bhi.n	8001908 <L6206_SetDualFullBridgeConfig+0xd0>
 800185c:	e8df f003 	tbb	[pc, r3]
 8001860:	07070707 	.word	0x07070707
 8001864:	21211414 	.word	0x21211414
 8001868:	3b3b2e2e 	.word	0x3b3b2e2e
 800186c:	48          	.byte	0x48
 800186d:	00          	.byte	0x00
		L6206_Board_PwmInit(INPUT_1A);
 800186e:	2000      	movs	r0, #0
 8001870:	f003 fb58 	bl	8004f24 <L6206_Board_PwmInit>
		L6206_Board_PwmInit(INPUT_2A);
 8001874:	2001      	movs	r0, #1
 8001876:	f003 fb55 	bl	8004f24 <L6206_Board_PwmInit>
		L6206_Board_PwmInit(INPUT_1B);
 800187a:	2002      	movs	r0, #2
 800187c:	f003 fb52 	bl	8004f24 <L6206_Board_PwmInit>
		L6206_Board_PwmInit(INPUT_2B);
 8001880:	2003      	movs	r0, #3
 8001882:	f003 fb4f 	bl	8004f24 <L6206_Board_PwmInit>
		break;
 8001886:	bd10      	pop	{r4, pc}
		L6206_Board_PwmDeInit(INPUT_2A);
 8001888:	2001      	movs	r0, #1
 800188a:	f003 fb1d 	bl	8004ec8 <L6206_Board_PwmDeInit>
		L6206_Board_PwmInit(INPUT_1A);
 800188e:	2000      	movs	r0, #0
 8001890:	f003 fb48 	bl	8004f24 <L6206_Board_PwmInit>
		L6206_Board_PwmInit(INPUT_1B);
 8001894:	2002      	movs	r0, #2
 8001896:	f003 fb45 	bl	8004f24 <L6206_Board_PwmInit>
		L6206_Board_PwmInit(INPUT_2B);
 800189a:	2003      	movs	r0, #3
 800189c:	f003 fb42 	bl	8004f24 <L6206_Board_PwmInit>
		break;
 80018a0:	bd10      	pop	{r4, pc}
		L6206_Board_PwmDeInit(INPUT_2B);
 80018a2:	2003      	movs	r0, #3
 80018a4:	f003 fb10 	bl	8004ec8 <L6206_Board_PwmDeInit>
		L6206_Board_PwmInit(INPUT_1A);
 80018a8:	2000      	movs	r0, #0
 80018aa:	f003 fb3b 	bl	8004f24 <L6206_Board_PwmInit>
		L6206_Board_PwmInit(INPUT_2A);
 80018ae:	2001      	movs	r0, #1
 80018b0:	f003 fb38 	bl	8004f24 <L6206_Board_PwmInit>
		L6206_Board_PwmInit(INPUT_1B);
 80018b4:	2002      	movs	r0, #2
 80018b6:	f003 fb35 	bl	8004f24 <L6206_Board_PwmInit>
		break;
 80018ba:	bd10      	pop	{r4, pc}
		L6206_Board_PwmDeInit(INPUT_2A);
 80018bc:	2001      	movs	r0, #1
 80018be:	f003 fb03 	bl	8004ec8 <L6206_Board_PwmDeInit>
		L6206_Board_PwmDeInit(INPUT_2B);
 80018c2:	2003      	movs	r0, #3
 80018c4:	f003 fb00 	bl	8004ec8 <L6206_Board_PwmDeInit>
		L6206_Board_PwmInit(INPUT_1A);
 80018c8:	2000      	movs	r0, #0
 80018ca:	f003 fb2b 	bl	8004f24 <L6206_Board_PwmInit>
		L6206_Board_PwmInit(INPUT_1B);
 80018ce:	2002      	movs	r0, #2
 80018d0:	f003 fb28 	bl	8004f24 <L6206_Board_PwmInit>
		break;
 80018d4:	bd10      	pop	{r4, pc}
		L6206_Board_PwmDeInit(INPUT_1B);
 80018d6:	2002      	movs	r0, #2
 80018d8:	f003 faf6 	bl	8004ec8 <L6206_Board_PwmDeInit>
		L6206_Board_PwmDeInit(INPUT_2B);
 80018dc:	2003      	movs	r0, #3
 80018de:	f003 faf3 	bl	8004ec8 <L6206_Board_PwmDeInit>
		L6206_Board_PwmInit(INPUT_1A);
 80018e2:	2000      	movs	r0, #0
 80018e4:	f003 fb1e 	bl	8004f24 <L6206_Board_PwmInit>
		L6206_Board_PwmInit(INPUT_2A);
 80018e8:	2001      	movs	r0, #1
 80018ea:	f003 fb1b 	bl	8004f24 <L6206_Board_PwmInit>
		break;
 80018ee:	bd10      	pop	{r4, pc}
		L6206_Board_PwmDeInit(INPUT_2A);
 80018f0:	2001      	movs	r0, #1
 80018f2:	f003 fae9 	bl	8004ec8 <L6206_Board_PwmDeInit>
		L6206_Board_PwmDeInit(INPUT_1B);
 80018f6:	2002      	movs	r0, #2
 80018f8:	f003 fae6 	bl	8004ec8 <L6206_Board_PwmDeInit>
		L6206_Board_PwmDeInit(INPUT_2B);
 80018fc:	2003      	movs	r0, #3
 80018fe:	f003 fae3 	bl	8004ec8 <L6206_Board_PwmDeInit>
		L6206_Board_PwmInit(INPUT_1A);
 8001902:	2000      	movs	r0, #0
 8001904:	f003 fb0e 	bl	8004f24 <L6206_Board_PwmInit>
 8001908:	bd10      	pop	{r4, pc}
 800190a:	bf00      	nop
 800190c:	200027dc 	.word	0x200027dc

08001910 <L6206_GetMotorHandle>:
}
 8001910:	4800      	ldr	r0, [pc, #0]	; (8001914 <L6206_GetMotorHandle+0x4>)
 8001912:	4770      	bx	lr
 8001914:	200011f8 	.word	0x200011f8

08001918 <L6206_GetBridgeIdUsedByMotorId>:
* @retval bridgeId 0 for bridge A , 1 for bridge B
**********************************************************/
uint8_t L6206_GetBridgeIdUsedByMotorId(uint8_t motorId)
{
	uint8_t bridgeId;
	switch (devicePrm.config) {
 8001918:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <L6206_GetBridgeIdUsedByMotorId+0x30>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b08      	cmp	r3, #8
 800191e:	d80e      	bhi.n	800193e <L6206_GetBridgeIdUsedByMotorId+0x26>
 8001920:	e8df f003 	tbb	[pc, r3]
 8001924:	07070505 	.word	0x07070505
 8001928:	07050505 	.word	0x07050505
 800192c:	05          	.byte	0x05
 800192d:	00          	.byte	0x00
	case PARALLELING_IN1A_IN2A__1_UNDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B:
	case PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__2_UNDIR_MOTOR_BRIDGE_B:
	case PARALLELING_IN1A_IN2A__1_UNDIR_MOTOR_BRIDGE_A__2_UNDIR_MOTOR_BRIDGE_B:
	case PARALLELING_IN1B_IN2B__1_BIDIR_MOTOR_BRIDGE_A__1_UNDIR_MOTOR_BRIDGE_B:
	case PARALLELING_IN1A_IN2A__IN1B_IN2B__1_UNDIR_MOTOR_BRIDGE_A__1_UNDIR_MOTOR_BRIDGE_B:
		if (motorId == 0) {
 800192e:	b940      	cbnz	r0, 8001942 <L6206_GetBridgeIdUsedByMotorId+0x2a>
 8001930:	4770      	bx	lr
		}
		break;
	case PARALLELING_NONE___2_UNDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B:
	case PARALLELING_NONE___2_UNDIR_MOTOR_BRIDGE_A__2_UNDIR_MOTOR_BRIDGE_B:
	case PARALLELING_IN1B_IN2B__2_UNDIR_MOTOR_BRIDGE_A__1_UNDIR_MOTOR_BRIDGE_B:
		if (motorId < 2) {
 8001932:	2801      	cmp	r0, #1
 8001934:	d901      	bls.n	800193a <L6206_GetBridgeIdUsedByMotorId+0x22>
			bridgeId = 0;
		}else  {
			bridgeId = 1;
 8001936:	2001      	movs	r0, #1
	default:
		bridgeId = 0;
		break;
	}
	return(bridgeId);
}
 8001938:	4770      	bx	lr
			bridgeId = 0;
 800193a:	2000      	movs	r0, #0
 800193c:	4770      	bx	lr
		bridgeId = 0;
 800193e:	2000      	movs	r0, #0
 8001940:	4770      	bx	lr
			bridgeId = 1;
 8001942:	2001      	movs	r0, #1
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	200027dc 	.word	0x200027dc

0800194c <L6206_GetMotorIdUsingbridgeInput>:
**********************************************************/
uint8_t L6206_GetMotorIdUsingbridgeInput(uint8_t bridgeInput)
{
	uint8_t motorId;

	switch (devicePrm.config) {
 800194c:	4b1b      	ldr	r3, [pc, #108]	; (80019bc <L6206_GetMotorIdUsingbridgeInput+0x70>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b0a      	cmp	r3, #10
 8001952:	d82c      	bhi.n	80019ae <L6206_GetMotorIdUsingbridgeInput+0x62>
 8001954:	e8df f003 	tbb	[pc, r3]
 8001958:	1a120a06 	.word	0x1a120a06
 800195c:	12060a06 	.word	0x12060a06
 8001960:	2b06      	.short	0x2b06
 8001962:	23          	.byte	0x23
 8001963:	00          	.byte	0x00
	case PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B:
	case PARALLELING_IN1A_IN2A__1_UNDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B:
	case PARALLELING_IN1B_IN2B__1_BIDIR_MOTOR_BRIDGE_A__1_UNDIR_MOTOR_BRIDGE_B:
	case PARALLELING_IN1A_IN2A__IN1B_IN2B__1_UNDIR_MOTOR_BRIDGE_A__1_UNDIR_MOTOR_BRIDGE_B:
		if (bridgeInput >= INPUT_1B) {
 8001964:	2801      	cmp	r0, #1
 8001966:	d924      	bls.n	80019b2 <L6206_GetMotorIdUsingbridgeInput+0x66>
			motorId = 1;
 8001968:	2001      	movs	r0, #1
 800196a:	4770      	bx	lr
			motorId = 0;
		}
		break;
	case PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__2_UNDIR_MOTOR_BRIDGE_B:
	case   PARALLELING_IN1A_IN2A__1_UNDIR_MOTOR_BRIDGE_A__2_UNDIR_MOTOR_BRIDGE_B:
		if (bridgeInput == INPUT_2B) {
 800196c:	2803      	cmp	r0, #3
 800196e:	d022      	beq.n	80019b6 <L6206_GetMotorIdUsingbridgeInput+0x6a>
			motorId = 2;
		}else if (bridgeInput == INPUT_1B) {
 8001970:	2802      	cmp	r0, #2
 8001972:	d001      	beq.n	8001978 <L6206_GetMotorIdUsingbridgeInput+0x2c>
			motorId = 1;
		}else  {
			motorId = 0;
 8001974:	2000      	movs	r0, #0
 8001976:	4770      	bx	lr
			motorId = 1;
 8001978:	2001      	movs	r0, #1
 800197a:	4770      	bx	lr
		}
		break;
	case PARALLELING_NONE___2_UNDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B:
	case PARALLELING_IN1B_IN2B__2_UNDIR_MOTOR_BRIDGE_A__1_UNDIR_MOTOR_BRIDGE_B:
		if (bridgeInput >= INPUT_1B) {
 800197c:	2801      	cmp	r0, #1
 800197e:	d901      	bls.n	8001984 <L6206_GetMotorIdUsingbridgeInput+0x38>
			motorId = 2;
 8001980:	2002      	movs	r0, #2
 8001982:	4770      	bx	lr
		}else if (bridgeInput == INPUT_2A) {
 8001984:	d001      	beq.n	800198a <L6206_GetMotorIdUsingbridgeInput+0x3e>
			motorId = 1;
		}else  {
			motorId = 0;
 8001986:	2000      	movs	r0, #0
 8001988:	4770      	bx	lr
 800198a:	4770      	bx	lr
		}
		break;
	case PARALLELING_NONE___2_UNDIR_MOTOR_BRIDGE_A__2_UNDIR_MOTOR_BRIDGE_B:
		if (bridgeInput == INPUT_2B) {
 800198c:	2803      	cmp	r0, #3
 800198e:	d00b      	beq.n	80019a8 <L6206_GetMotorIdUsingbridgeInput+0x5c>
			motorId = 3;
		}else if (bridgeInput == INPUT_1B) {
 8001990:	2802      	cmp	r0, #2
 8001992:	d009      	beq.n	80019a8 <L6206_GetMotorIdUsingbridgeInput+0x5c>
			motorId = 2;
		}else if (bridgeInput == INPUT_2A) {
 8001994:	2801      	cmp	r0, #1
 8001996:	d001      	beq.n	800199c <L6206_GetMotorIdUsingbridgeInput+0x50>
			motorId = 1;
		}else  {
			motorId = 0;
 8001998:	2000      	movs	r0, #0
 800199a:	4770      	bx	lr
 800199c:	4770      	bx	lr
		}
		break;
	case PARALLELING_IN1A_IN1B__IN2A_IN2B__1_UNDIR_MOTOR_BRIDGE_1A__1_UNDIR_MOTOR_BRIDGE_2A:
		if ((bridgeInput == INPUT_2A) || (bridgeInput == INPUT_2B)) {
 800199e:	2801      	cmp	r0, #1
 80019a0:	d002      	beq.n	80019a8 <L6206_GetMotorIdUsingbridgeInput+0x5c>
 80019a2:	2803      	cmp	r0, #3
 80019a4:	d001      	beq.n	80019aa <L6206_GetMotorIdUsingbridgeInput+0x5e>
			motorId = 1;
		}else  {
			motorId = 0;
 80019a6:	2000      	movs	r0, #0
		motorId = 0;
		break;
	}

	return(motorId);
}
 80019a8:	4770      	bx	lr
			motorId = 1;
 80019aa:	2001      	movs	r0, #1
 80019ac:	4770      	bx	lr
		motorId = 0;
 80019ae:	2000      	movs	r0, #0
 80019b0:	4770      	bx	lr
			motorId = 0;
 80019b2:	2000      	movs	r0, #0
 80019b4:	4770      	bx	lr
			motorId = 2;
 80019b6:	2002      	movs	r0, #2
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	200027dc 	.word	0x200027dc

080019c0 <L6206_GetBridgeInputUsedByMotorId>:
* @retval PWM input 0 for 1A, 1 for 2A, 2 for 1B, 3 for 3B
**********************************************************/
uint8_t L6206_GetBridgeInputUsedByMotorId(uint8_t motorId)
{
	uint8_t bridgeInput;
	switch (devicePrm.config) {
 80019c0:	4b3c      	ldr	r3, [pc, #240]	; (8001ab4 <L6206_GetBridgeInputUsedByMotorId+0xf4>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b0b      	cmp	r3, #11
 80019c6:	d871      	bhi.n	8001aac <L6206_GetBridgeInputUsedByMotorId+0xec>
 80019c8:	e8df f003 	tbb	[pc, r3]
 80019cc:	30241606 	.word	0x30241606
 80019d0:	544a4339 	.word	0x544a4339
 80019d4:	68665e5a 	.word	0x68665e5a
	case PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B:
		if (motorId == 0) {
 80019d8:	b930      	cbnz	r0, 80019e8 <L6206_GetBridgeInputUsedByMotorId+0x28>
			if (devicePrm.direction[0] == FORWARD) {
 80019da:	4b36      	ldr	r3, [pc, #216]	; (8001ab4 <L6206_GetBridgeInputUsedByMotorId+0xf4>)
 80019dc:	7f1b      	ldrb	r3, [r3, #28]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d001      	beq.n	80019e6 <L6206_GetBridgeInputUsedByMotorId+0x26>
				bridgeInput = INPUT_1A;
			}else  {
				bridgeInput = INPUT_2A;
 80019e2:	2001      	movs	r0, #1
 80019e4:	4770      	bx	lr
 80019e6:	4770      	bx	lr
			}
		}else  {
			if (devicePrm.direction[1] == FORWARD) {
 80019e8:	4b32      	ldr	r3, [pc, #200]	; (8001ab4 <L6206_GetBridgeInputUsedByMotorId+0xf4>)
 80019ea:	7f5b      	ldrb	r3, [r3, #29]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d001      	beq.n	80019f4 <L6206_GetBridgeInputUsedByMotorId+0x34>
				bridgeInput = INPUT_1B;
			}else  {
				bridgeInput = INPUT_2B;
 80019f0:	2003      	movs	r0, #3
 80019f2:	4770      	bx	lr
				bridgeInput = INPUT_1B;
 80019f4:	2002      	movs	r0, #2
 80019f6:	4770      	bx	lr
			}
		}
		break;
	case PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__2_UNDIR_MOTOR_BRIDGE_B:
		if (motorId == 0) {
 80019f8:	b930      	cbnz	r0, 8001a08 <L6206_GetBridgeInputUsedByMotorId+0x48>
			if (devicePrm.direction[0] == FORWARD) {
 80019fa:	4b2e      	ldr	r3, [pc, #184]	; (8001ab4 <L6206_GetBridgeInputUsedByMotorId+0xf4>)
 80019fc:	7f1b      	ldrb	r3, [r3, #28]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d001      	beq.n	8001a06 <L6206_GetBridgeInputUsedByMotorId+0x46>
				bridgeInput = INPUT_1A;
			}else  {
				bridgeInput = INPUT_2A;
 8001a02:	2001      	movs	r0, #1
 8001a04:	4770      	bx	lr
 8001a06:	4770      	bx	lr
			}
		}else if (motorId == 1) {
 8001a08:	2801      	cmp	r0, #1
 8001a0a:	d001      	beq.n	8001a10 <L6206_GetBridgeInputUsedByMotorId+0x50>
			bridgeInput = INPUT_1B;
		}else  {
			bridgeInput = INPUT_2B;
 8001a0c:	2003      	movs	r0, #3
 8001a0e:	4770      	bx	lr
			bridgeInput = INPUT_1B;
 8001a10:	2002      	movs	r0, #2
 8001a12:	4770      	bx	lr
		}
		break;
	case PARALLELING_NONE___2_UNDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B:
		if (motorId == 0) {
 8001a14:	2800      	cmp	r0, #0
 8001a16:	d046      	beq.n	8001aa6 <L6206_GetBridgeInputUsedByMotorId+0xe6>
			bridgeInput = INPUT_1A;
		}else if (motorId == 1) {
 8001a18:	2801      	cmp	r0, #1
 8001a1a:	d044      	beq.n	8001aa6 <L6206_GetBridgeInputUsedByMotorId+0xe6>
			bridgeInput = INPUT_2A;
		}else  {
			if (devicePrm.direction[2] == FORWARD) {
 8001a1c:	4b25      	ldr	r3, [pc, #148]	; (8001ab4 <L6206_GetBridgeInputUsedByMotorId+0xf4>)
 8001a1e:	7f9b      	ldrb	r3, [r3, #30]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d001      	beq.n	8001a28 <L6206_GetBridgeInputUsedByMotorId+0x68>
				bridgeInput = INPUT_1B;
			}else  {
				bridgeInput = INPUT_2B;
 8001a24:	2003      	movs	r0, #3
 8001a26:	4770      	bx	lr
				bridgeInput = INPUT_1B;
 8001a28:	2002      	movs	r0, #2
 8001a2a:	4770      	bx	lr
			}
		}
		break;
	case PARALLELING_NONE___2_UNDIR_MOTOR_BRIDGE_A__2_UNDIR_MOTOR_BRIDGE_B:
		if (motorId == 0) {
 8001a2c:	2800      	cmp	r0, #0
 8001a2e:	d03a      	beq.n	8001aa6 <L6206_GetBridgeInputUsedByMotorId+0xe6>
			bridgeInput = INPUT_1A;
		}else if (motorId == 1) {
 8001a30:	2801      	cmp	r0, #1
 8001a32:	d038      	beq.n	8001aa6 <L6206_GetBridgeInputUsedByMotorId+0xe6>
			bridgeInput = INPUT_2A;
		}else if (motorId == 2) {
 8001a34:	2802      	cmp	r0, #2
 8001a36:	d001      	beq.n	8001a3c <L6206_GetBridgeInputUsedByMotorId+0x7c>
			bridgeInput = INPUT_1B;
		}else  {
			bridgeInput = INPUT_2B;
 8001a38:	2003      	movs	r0, #3
 8001a3a:	4770      	bx	lr
 8001a3c:	4770      	bx	lr
		}
		break;
	case PARALLELING_IN1A_IN2A__1_UNDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B:
		if (motorId == 0) {
 8001a3e:	2800      	cmp	r0, #0
 8001a40:	d031      	beq.n	8001aa6 <L6206_GetBridgeInputUsedByMotorId+0xe6>
			bridgeInput = INPUT_1A;
		}else  {
			if (devicePrm.direction[1] == FORWARD) {
 8001a42:	4b1c      	ldr	r3, [pc, #112]	; (8001ab4 <L6206_GetBridgeInputUsedByMotorId+0xf4>)
 8001a44:	7f5b      	ldrb	r3, [r3, #29]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d001      	beq.n	8001a4e <L6206_GetBridgeInputUsedByMotorId+0x8e>
				bridgeInput = INPUT_1B;
			}else  {
				bridgeInput = INPUT_2B;
 8001a4a:	2003      	movs	r0, #3
 8001a4c:	4770      	bx	lr
				bridgeInput = INPUT_1B;
 8001a4e:	2002      	movs	r0, #2
 8001a50:	4770      	bx	lr
			}
		}
		break;
	case PARALLELING_IN1A_IN2A__1_UNDIR_MOTOR_BRIDGE_A__2_UNDIR_MOTOR_BRIDGE_B:
		if (motorId == 0) {
 8001a52:	b340      	cbz	r0, 8001aa6 <L6206_GetBridgeInputUsedByMotorId+0xe6>
			bridgeInput = INPUT_1A;
		}else if (motorId == 1) {
 8001a54:	2801      	cmp	r0, #1
 8001a56:	d001      	beq.n	8001a5c <L6206_GetBridgeInputUsedByMotorId+0x9c>
			bridgeInput = INPUT_1B;
		}else  {
			bridgeInput = INPUT_2B;
 8001a58:	2003      	movs	r0, #3
 8001a5a:	4770      	bx	lr
			bridgeInput = INPUT_1B;
 8001a5c:	2002      	movs	r0, #2
 8001a5e:	4770      	bx	lr
		}
		break;
	case PARALLELING_IN1B_IN2B__1_BIDIR_MOTOR_BRIDGE_A__1_UNDIR_MOTOR_BRIDGE_B:
		if (motorId == 0) {
 8001a60:	b108      	cbz	r0, 8001a66 <L6206_GetBridgeInputUsedByMotorId+0xa6>
				bridgeInput = INPUT_1A;
			}else  {
				bridgeInput = INPUT_2A;
			}
		}else  {
			bridgeInput = INPUT_1B;
 8001a62:	2002      	movs	r0, #2
 8001a64:	4770      	bx	lr
			if (devicePrm.direction[0] == FORWARD) {
 8001a66:	4b13      	ldr	r3, [pc, #76]	; (8001ab4 <L6206_GetBridgeInputUsedByMotorId+0xf4>)
 8001a68:	7f1b      	ldrb	r3, [r3, #28]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d001      	beq.n	8001a72 <L6206_GetBridgeInputUsedByMotorId+0xb2>
				bridgeInput = INPUT_2A;
 8001a6e:	2001      	movs	r0, #1
 8001a70:	4770      	bx	lr
 8001a72:	4770      	bx	lr
		}
		break;
	case PARALLELING_IN1B_IN2B__2_UNDIR_MOTOR_BRIDGE_A__1_UNDIR_MOTOR_BRIDGE_B:
		if (motorId == 0) {
 8001a74:	b1b8      	cbz	r0, 8001aa6 <L6206_GetBridgeInputUsedByMotorId+0xe6>
			bridgeInput = INPUT_1A;
		}else if (motorId == 1) {
 8001a76:	2801      	cmp	r0, #1
 8001a78:	d001      	beq.n	8001a7e <L6206_GetBridgeInputUsedByMotorId+0xbe>
			bridgeInput = INPUT_2A;
		}else  {
			bridgeInput = INPUT_1B;
 8001a7a:	2002      	movs	r0, #2
 8001a7c:	4770      	bx	lr
 8001a7e:	4770      	bx	lr
		}
		break;
	case PARALLELING_IN1A_IN2A__IN1B_IN2B__1_UNDIR_MOTOR_BRIDGE_A__1_UNDIR_MOTOR_BRIDGE_B:
		if (motorId == 0) {
 8001a80:	b108      	cbz	r0, 8001a86 <L6206_GetBridgeInputUsedByMotorId+0xc6>
			bridgeInput = INPUT_1A;
		}else  {
			bridgeInput = INPUT_1B;
 8001a82:	2002      	movs	r0, #2
 8001a84:	4770      	bx	lr
 8001a86:	4770      	bx	lr
		}
		break;
	case PARALLELING_IN1A_IN2A__IN1B_IN2B__1_BIDIR_MOTOR:
		if (devicePrm.direction[0] == FORWARD) {
 8001a88:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <L6206_GetBridgeInputUsedByMotorId+0xf4>)
 8001a8a:	7f1b      	ldrb	r3, [r3, #28]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d001      	beq.n	8001a94 <L6206_GetBridgeInputUsedByMotorId+0xd4>
			bridgeInput = INPUT_1A;
		}else  {
			bridgeInput = INPUT_1B;
 8001a90:	2002      	movs	r0, #2
 8001a92:	4770      	bx	lr
			bridgeInput = INPUT_1A;
 8001a94:	2000      	movs	r0, #0
 8001a96:	4770      	bx	lr
		}
		break;
	case PARALLELING_IN1A_IN1B__IN2A_IN2B__1_UNDIR_MOTOR_BRIDGE_1A__1_UNDIR_MOTOR_BRIDGE_2A:
		if (motorId == 0) {
 8001a98:	b950      	cbnz	r0, 8001ab0 <L6206_GetBridgeInputUsedByMotorId+0xf0>
 8001a9a:	4770      	bx	lr
		}else  {
			bridgeInput = INPUT_2A;
		}
		break;
	case PARALLELING_IN1A_IN1B__IN2A_IN2B__1_BIDIR_MOTOR:
		if (devicePrm.direction[0] == FORWARD) {
 8001a9c:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <L6206_GetBridgeInputUsedByMotorId+0xf4>)
 8001a9e:	7f1b      	ldrb	r3, [r3, #28]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d001      	beq.n	8001aa8 <L6206_GetBridgeInputUsedByMotorId+0xe8>
			bridgeInput = INPUT_1A;
		}else  {
			bridgeInput = INPUT_2A;
 8001aa4:	2001      	movs	r0, #1
	default:
		bridgeInput = INPUT_1A;
		break;
	}
	return(bridgeInput);
}
 8001aa6:	4770      	bx	lr
			bridgeInput = INPUT_1A;
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	4770      	bx	lr
		bridgeInput = INPUT_1A;
 8001aac:	2000      	movs	r0, #0
 8001aae:	4770      	bx	lr
			bridgeInput = INPUT_2A;
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	4770      	bx	lr
 8001ab4:	200027dc 	.word	0x200027dc

08001ab8 <L6206_GetSecondBridgeInputUsedByMotorId>:
* @brief  Get the second PWM input used by a given bidirectionnal motor
* @param motorId from 0 to MAX_NUMBER_OF_BRUSH_DC_MOTORS
* @retval PWM input 0 for 1A, 1 for 2A, 2 for 1B, 3 for 3B
**********************************************************/
uint8_t L6206_GetSecondBridgeInputUsedByMotorId(uint8_t motorId)
{
 8001ab8:	b510      	push	{r4, lr}
	uint8_t bridgeInput = 0xFF;

	switch (devicePrm.config) {
 8001aba:	4b32      	ldr	r3, [pc, #200]	; (8001b84 <L6206_GetSecondBridgeInputUsedByMotorId+0xcc>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b0b      	cmp	r3, #11
 8001ac0:	d859      	bhi.n	8001b76 <L6206_GetSecondBridgeInputUsedByMotorId+0xbe>
 8001ac2:	e8df f003 	tbb	[pc, r3]
 8001ac6:	1706      	.short	0x1706
 8001ac8:	58315822 	.word	0x58315822
 8001acc:	4858583d 	.word	0x4858583d
 8001ad0:	5058      	.short	0x5058
	case PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B:
		if (motorId == 0) {
 8001ad2:	b938      	cbnz	r0, 8001ae4 <L6206_GetSecondBridgeInputUsedByMotorId+0x2c>
			if (devicePrm.direction[0] == FORWARD) {
 8001ad4:	4b2b      	ldr	r3, [pc, #172]	; (8001b84 <L6206_GetSecondBridgeInputUsedByMotorId+0xcc>)
 8001ad6:	7f1b      	ldrb	r3, [r3, #28]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d001      	beq.n	8001ae0 <L6206_GetSecondBridgeInputUsedByMotorId+0x28>
				bridgeInput = INPUT_2A;
			}else  {
				bridgeInput = INPUT_1A;
 8001adc:	4604      	mov	r4, r0
 8001ade:	e017      	b.n	8001b10 <L6206_GetSecondBridgeInputUsedByMotorId+0x58>
				bridgeInput = INPUT_2A;
 8001ae0:	2401      	movs	r4, #1
 8001ae2:	e015      	b.n	8001b10 <L6206_GetSecondBridgeInputUsedByMotorId+0x58>
			}
		}else  {
			if (devicePrm.direction[1] == FORWARD) {
 8001ae4:	4b27      	ldr	r3, [pc, #156]	; (8001b84 <L6206_GetSecondBridgeInputUsedByMotorId+0xcc>)
 8001ae6:	7f5b      	ldrb	r3, [r3, #29]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d001      	beq.n	8001af0 <L6206_GetSecondBridgeInputUsedByMotorId+0x38>
				bridgeInput = INPUT_2B;
			}else  {
				bridgeInput = INPUT_1B;
 8001aec:	2402      	movs	r4, #2
 8001aee:	e00f      	b.n	8001b10 <L6206_GetSecondBridgeInputUsedByMotorId+0x58>
				bridgeInput = INPUT_2B;
 8001af0:	2403      	movs	r4, #3
 8001af2:	e00d      	b.n	8001b10 <L6206_GetSecondBridgeInputUsedByMotorId+0x58>
			}
		}
		break;
	case PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__2_UNDIR_MOTOR_BRIDGE_B:
		if (motorId == 0) {
 8001af4:	b108      	cbz	r0, 8001afa <L6206_GetSecondBridgeInputUsedByMotorId+0x42>
	uint8_t bridgeInput = 0xFF;
 8001af6:	24ff      	movs	r4, #255	; 0xff
 8001af8:	e00a      	b.n	8001b10 <L6206_GetSecondBridgeInputUsedByMotorId+0x58>
			if (devicePrm.direction[0] == FORWARD) {
 8001afa:	4b22      	ldr	r3, [pc, #136]	; (8001b84 <L6206_GetSecondBridgeInputUsedByMotorId+0xcc>)
 8001afc:	7f1b      	ldrb	r3, [r3, #28]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d001      	beq.n	8001b06 <L6206_GetSecondBridgeInputUsedByMotorId+0x4e>
				bridgeInput = INPUT_2A;
			}else  {
				bridgeInput = INPUT_1A;
 8001b02:	4604      	mov	r4, r0
 8001b04:	e004      	b.n	8001b10 <L6206_GetSecondBridgeInputUsedByMotorId+0x58>
				bridgeInput = INPUT_2A;
 8001b06:	2401      	movs	r4, #1
 8001b08:	e002      	b.n	8001b10 <L6206_GetSecondBridgeInputUsedByMotorId+0x58>
			}
		}
		break;
	case PARALLELING_NONE___2_UNDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B:
		if (motorId == 2) {
 8001b0a:	2802      	cmp	r0, #2
 8001b0c:	d004      	beq.n	8001b18 <L6206_GetSecondBridgeInputUsedByMotorId+0x60>
	uint8_t bridgeInput = 0xFF;
 8001b0e:	24ff      	movs	r4, #255	; 0xff
		break;
	default:
		bridgeInput = 0XFF;
		break;
	}
	if (bridgeInput == 0XFF) {
 8001b10:	2cff      	cmp	r4, #255	; 0xff
 8001b12:	d032      	beq.n	8001b7a <L6206_GetSecondBridgeInputUsedByMotorId+0xc2>
		L6206_ErrorHandler(L6206_ERROR_2);
	}

	return(bridgeInput);
}
 8001b14:	4620      	mov	r0, r4
 8001b16:	bd10      	pop	{r4, pc}
			if (devicePrm.direction[2] == FORWARD) {
 8001b18:	4b1a      	ldr	r3, [pc, #104]	; (8001b84 <L6206_GetSecondBridgeInputUsedByMotorId+0xcc>)
 8001b1a:	7f9b      	ldrb	r3, [r3, #30]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d001      	beq.n	8001b24 <L6206_GetSecondBridgeInputUsedByMotorId+0x6c>
				bridgeInput = INPUT_1B;
 8001b20:	4604      	mov	r4, r0
 8001b22:	e7f5      	b.n	8001b10 <L6206_GetSecondBridgeInputUsedByMotorId+0x58>
				bridgeInput = INPUT_2B;
 8001b24:	2403      	movs	r4, #3
 8001b26:	e7f3      	b.n	8001b10 <L6206_GetSecondBridgeInputUsedByMotorId+0x58>
		if (motorId == 1) {
 8001b28:	2801      	cmp	r0, #1
 8001b2a:	d001      	beq.n	8001b30 <L6206_GetSecondBridgeInputUsedByMotorId+0x78>
	uint8_t bridgeInput = 0xFF;
 8001b2c:	24ff      	movs	r4, #255	; 0xff
 8001b2e:	e7ef      	b.n	8001b10 <L6206_GetSecondBridgeInputUsedByMotorId+0x58>
			if (devicePrm.direction[1] == FORWARD) {
 8001b30:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <L6206_GetSecondBridgeInputUsedByMotorId+0xcc>)
 8001b32:	7f5b      	ldrb	r3, [r3, #29]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d001      	beq.n	8001b3c <L6206_GetSecondBridgeInputUsedByMotorId+0x84>
				bridgeInput = INPUT_1B;
 8001b38:	2402      	movs	r4, #2
 8001b3a:	e7e9      	b.n	8001b10 <L6206_GetSecondBridgeInputUsedByMotorId+0x58>
				bridgeInput = INPUT_2B;
 8001b3c:	2403      	movs	r4, #3
 8001b3e:	e7e7      	b.n	8001b10 <L6206_GetSecondBridgeInputUsedByMotorId+0x58>
		if (motorId == 0) {
 8001b40:	b108      	cbz	r0, 8001b46 <L6206_GetSecondBridgeInputUsedByMotorId+0x8e>
	uint8_t bridgeInput = 0xFF;
 8001b42:	24ff      	movs	r4, #255	; 0xff
 8001b44:	e7e4      	b.n	8001b10 <L6206_GetSecondBridgeInputUsedByMotorId+0x58>
			if (devicePrm.direction[0] == FORWARD) {
 8001b46:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <L6206_GetSecondBridgeInputUsedByMotorId+0xcc>)
 8001b48:	7f1b      	ldrb	r3, [r3, #28]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d001      	beq.n	8001b52 <L6206_GetSecondBridgeInputUsedByMotorId+0x9a>
				bridgeInput = INPUT_1A;
 8001b4e:	4604      	mov	r4, r0
 8001b50:	e7de      	b.n	8001b10 <L6206_GetSecondBridgeInputUsedByMotorId+0x58>
				bridgeInput = INPUT_2A;
 8001b52:	2401      	movs	r4, #1
 8001b54:	e7dc      	b.n	8001b10 <L6206_GetSecondBridgeInputUsedByMotorId+0x58>
		if (devicePrm.direction[0] == FORWARD) {
 8001b56:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <L6206_GetSecondBridgeInputUsedByMotorId+0xcc>)
 8001b58:	7f1b      	ldrb	r3, [r3, #28]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d001      	beq.n	8001b62 <L6206_GetSecondBridgeInputUsedByMotorId+0xaa>
			bridgeInput = INPUT_1A;
 8001b5e:	2400      	movs	r4, #0
 8001b60:	e7d6      	b.n	8001b10 <L6206_GetSecondBridgeInputUsedByMotorId+0x58>
			bridgeInput = INPUT_1B;
 8001b62:	2402      	movs	r4, #2
 8001b64:	e7d4      	b.n	8001b10 <L6206_GetSecondBridgeInputUsedByMotorId+0x58>
		if (devicePrm.direction[0] == FORWARD) {
 8001b66:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <L6206_GetSecondBridgeInputUsedByMotorId+0xcc>)
 8001b68:	7f1b      	ldrb	r3, [r3, #28]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d001      	beq.n	8001b72 <L6206_GetSecondBridgeInputUsedByMotorId+0xba>
			bridgeInput = INPUT_1A;
 8001b6e:	2400      	movs	r4, #0
 8001b70:	e7ce      	b.n	8001b10 <L6206_GetSecondBridgeInputUsedByMotorId+0x58>
			bridgeInput = INPUT_2A;
 8001b72:	2401      	movs	r4, #1
 8001b74:	e7cc      	b.n	8001b10 <L6206_GetSecondBridgeInputUsedByMotorId+0x58>
		bridgeInput = 0XFF;
 8001b76:	24ff      	movs	r4, #255	; 0xff
 8001b78:	e7ca      	b.n	8001b10 <L6206_GetSecondBridgeInputUsedByMotorId+0x58>
		L6206_ErrorHandler(L6206_ERROR_2);
 8001b7a:	f248 0002 	movw	r0, #32770	; 0x8002
 8001b7e:	f7ff fd95 	bl	80016ac <L6206_ErrorHandler>
 8001b82:	e7c7      	b.n	8001b14 <L6206_GetSecondBridgeInputUsedByMotorId+0x5c>
 8001b84:	200027dc 	.word	0x200027dc

08001b88 <L6206_IsBidirectionnalMotor>:
* @retval True if motor is bidirectionnal, else false
**********************************************************/
bool L6206_IsBidirectionnalMotor(uint8_t motorId)
{
	bool isBiDir = FALSE;
	switch (devicePrm.config) {
 8001b88:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <L6206_IsBidirectionnalMotor+0x44>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b0b      	cmp	r3, #11
 8001b8e:	d807      	bhi.n	8001ba0 <L6206_IsBidirectionnalMotor+0x18>
 8001b90:	e8df f003 	tbb	[pc, r3]
 8001b94:	060b0813 	.word	0x060b0813
 8001b98:	0608060f 	.word	0x0608060f
 8001b9c:	13061306 	.word	0x13061306
	bool isBiDir = FALSE;
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	4770      	bx	lr
		isBiDir = TRUE;
		break;

	case PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__2_UNDIR_MOTOR_BRIDGE_B:
	case PARALLELING_IN1B_IN2B__1_BIDIR_MOTOR_BRIDGE_A__1_UNDIR_MOTOR_BRIDGE_B:
		if (motorId == 0) {
 8001ba4:	b158      	cbz	r0, 8001bbe <L6206_IsBidirectionnalMotor+0x36>
	bool isBiDir = FALSE;
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	4770      	bx	lr
			isBiDir = TRUE;
		}
		break;
	case PARALLELING_NONE___2_UNDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B:
		if (motorId == 2) {
 8001baa:	2802      	cmp	r0, #2
 8001bac:	d009      	beq.n	8001bc2 <L6206_IsBidirectionnalMotor+0x3a>
	bool isBiDir = FALSE;
 8001bae:	2000      	movs	r0, #0
 8001bb0:	4770      	bx	lr
			isBiDir = TRUE;
		}
		break;
	case PARALLELING_IN1A_IN2A__1_UNDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B:
		if (motorId == 1) {
 8001bb2:	2801      	cmp	r0, #1
 8001bb4:	d007      	beq.n	8001bc6 <L6206_IsBidirectionnalMotor+0x3e>
	bool isBiDir = FALSE;
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	4770      	bx	lr
		isBiDir = TRUE;
 8001bba:	2001      	movs	r0, #1
 8001bbc:	4770      	bx	lr
			isBiDir = TRUE;
 8001bbe:	2001      	movs	r0, #1
 8001bc0:	4770      	bx	lr
			isBiDir = TRUE;
 8001bc2:	2001      	movs	r0, #1
 8001bc4:	4770      	bx	lr
			isBiDir = TRUE;
 8001bc6:	2001      	movs	r0, #1
	default:
		break;
	}

	return(isBiDir);
}
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	200027dc 	.word	0x200027dc

08001bd0 <L6206_HardStop>:
{
 8001bd0:	b538      	push	{r3, r4, r5, lr}
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 8001bd2:	4b14      	ldr	r3, [pc, #80]	; (8001c24 <L6206_HardStop+0x54>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	4a14      	ldr	r2, [pc, #80]	; (8001c28 <L6206_HardStop+0x58>)
 8001bd8:	5cd3      	ldrb	r3, [r2, r3]
 8001bda:	4283      	cmp	r3, r0
 8001bdc:	d316      	bcc.n	8001c0c <L6206_HardStop+0x3c>
 8001bde:	4604      	mov	r4, r0
	}else if (devicePrm.motionState[motorId] != INACTIVE) {
 8001be0:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <L6206_HardStop+0x54>)
 8001be2:	4403      	add	r3, r0
 8001be4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001be8:	2b08      	cmp	r3, #8
 8001bea:	d00e      	beq.n	8001c0a <L6206_HardStop+0x3a>
		bridgeInputFirstPWM = L6206_GetBridgeInputUsedByMotorId(motorId);
 8001bec:	f7ff fee8 	bl	80019c0 <L6206_GetBridgeInputUsedByMotorId>
 8001bf0:	4605      	mov	r5, r0
		if (L6206_IsBidirectionnalMotor(motorId)) {
 8001bf2:	4620      	mov	r0, r4
 8001bf4:	f7ff ffc8 	bl	8001b88 <L6206_IsBidirectionnalMotor>
 8001bf8:	b968      	cbnz	r0, 8001c16 <L6206_HardStop+0x46>
		L6206_Board_PwmStop(bridgeInputFirstPWM);
 8001bfa:	4628      	mov	r0, r5
 8001bfc:	f003 fa26 	bl	800504c <L6206_Board_PwmStop>
		devicePrm.motionState[motorId] = INACTIVE;
 8001c00:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <L6206_HardStop+0x54>)
 8001c02:	441c      	add	r4, r3
 8001c04:	2308      	movs	r3, #8
 8001c06:	f884 3020 	strb.w	r3, [r4, #32]
 8001c0a:	bd38      	pop	{r3, r4, r5, pc}
		L6206_ErrorHandler(L6206_ERROR_1);
 8001c0c:	f248 0001 	movw	r0, #32769	; 0x8001
 8001c10:	f7ff fd4c 	bl	80016ac <L6206_ErrorHandler>
 8001c14:	bd38      	pop	{r3, r4, r5, pc}
			bridgeInputSecondPWM = L6206_GetSecondBridgeInputUsedByMotorId(motorId);
 8001c16:	4620      	mov	r0, r4
 8001c18:	f7ff ff4e 	bl	8001ab8 <L6206_GetSecondBridgeInputUsedByMotorId>
			L6206_Board_PwmStop(bridgeInputSecondPWM);
 8001c1c:	f003 fa16 	bl	800504c <L6206_Board_PwmStop>
 8001c20:	e7eb      	b.n	8001bfa <L6206_HardStop+0x2a>
 8001c22:	bf00      	nop
 8001c24:	200027dc 	.word	0x200027dc
 8001c28:	0801e084 	.word	0x0801e084

08001c2c <L6206_HardHiz>:
{
 8001c2c:	b538      	push	{r3, r4, r5, lr}
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 8001c2e:	4b43      	ldr	r3, [pc, #268]	; (8001d3c <L6206_HardHiz+0x110>)
 8001c30:	781d      	ldrb	r5, [r3, #0]
 8001c32:	4b43      	ldr	r3, [pc, #268]	; (8001d40 <L6206_HardHiz+0x114>)
 8001c34:	5d5b      	ldrb	r3, [r3, r5]
 8001c36:	4283      	cmp	r3, r0
 8001c38:	d311      	bcc.n	8001c5e <L6206_HardHiz+0x32>
 8001c3a:	4604      	mov	r4, r0
		uint8_t bridgeId = L6206_GetBridgeIdUsedByMotorId(motorId);
 8001c3c:	f7ff fe6c 	bl	8001918 <L6206_GetBridgeIdUsedByMotorId>
		if (devicePrm.bridgeEnabled[bridgeId] != FALSE) {
 8001c40:	4b3e      	ldr	r3, [pc, #248]	; (8001d3c <L6206_HardHiz+0x110>)
 8001c42:	4403      	add	r3, r0
 8001c44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c48:	b303      	cbz	r3, 8001c8c <L6206_HardHiz+0x60>
			switch (devicePrm.config) {
 8001c4a:	3d01      	subs	r5, #1
 8001c4c:	2d09      	cmp	r5, #9
 8001c4e:	d85d      	bhi.n	8001d0c <L6206_HardHiz+0xe0>
 8001c50:	e8df f005 	tbb	[pc, r5]
 8001c54:	5c28170a 	.word	0x5c28170a
 8001c58:	5c485c3c 	.word	0x5c485c3c
 8001c5c:	545c      	.short	0x545c
		L6206_ErrorHandler(L6206_ERROR_1);
 8001c5e:	f248 0001 	movw	r0, #32769	; 0x8001
 8001c62:	f7ff fd23 	bl	80016ac <L6206_ErrorHandler>
 8001c66:	bd38      	pop	{r3, r4, r5, pc}
				if ((motorId > 0) && (devicePrm.motionState[1] == STEADY) && (devicePrm.motionState[2] == STEADY)) {
 8001c68:	2c00      	cmp	r4, #0
 8001c6a:	d051      	beq.n	8001d10 <L6206_HardHiz+0xe4>
 8001c6c:	4b33      	ldr	r3, [pc, #204]	; (8001d3c <L6206_HardHiz+0x110>)
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001c74:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c78:	4a32      	ldr	r2, [pc, #200]	; (8001d44 <L6206_HardHiz+0x118>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d04a      	beq.n	8001d14 <L6206_HardHiz+0xe8>
			bool skip = FALSE;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e002      	b.n	8001c88 <L6206_HardHiz+0x5c>
				if ((motorId < 2) && (devicePrm.motionState[0] == STEADY) && (devicePrm.motionState[1] == STEADY)) {
 8001c82:	2c01      	cmp	r4, #1
 8001c84:	d906      	bls.n	8001c94 <L6206_HardHiz+0x68>
			bool skip = FALSE;
 8001c86:	2300      	movs	r3, #0
			if (skip == FALSE) {
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d053      	beq.n	8001d34 <L6206_HardHiz+0x108>
		L6206_HardStop(motorId);
 8001c8c:	4620      	mov	r0, r4
 8001c8e:	f7ff ff9f 	bl	8001bd0 <L6206_HardStop>
 8001c92:	bd38      	pop	{r3, r4, r5, pc}
				if ((motorId < 2) && (devicePrm.motionState[0] == STEADY) && (devicePrm.motionState[1] == STEADY)) {
 8001c94:	4b29      	ldr	r3, [pc, #164]	; (8001d3c <L6206_HardHiz+0x110>)
 8001c96:	8c1a      	ldrh	r2, [r3, #32]
 8001c98:	f240 3303 	movw	r3, #771	; 0x303
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d03b      	beq.n	8001d18 <L6206_HardHiz+0xec>
			bool skip = FALSE;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	e7f1      	b.n	8001c88 <L6206_HardHiz+0x5c>
				if (((motorId < 2) && (devicePrm.motionState[0] == STEADY) && (devicePrm.motionState[1] == STEADY)) ||
 8001ca4:	2c01      	cmp	r4, #1
 8001ca6:	d909      	bls.n	8001cbc <L6206_HardHiz+0x90>
 8001ca8:	2c01      	cmp	r4, #1
 8001caa:	d937      	bls.n	8001d1c <L6206_HardHiz+0xf0>
				    ((motorId > 1) && (devicePrm.motionState[2] == STEADY) && (devicePrm.motionState[3] == STEADY))) {
 8001cac:	4b23      	ldr	r3, [pc, #140]	; (8001d3c <L6206_HardHiz+0x110>)
 8001cae:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8001cb0:	f240 3303 	movw	r3, #771	; 0x303
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d033      	beq.n	8001d20 <L6206_HardHiz+0xf4>
			bool skip = FALSE;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	e7e5      	b.n	8001c88 <L6206_HardHiz+0x5c>
				if (((motorId < 2) && (devicePrm.motionState[0] == STEADY) && (devicePrm.motionState[1] == STEADY)) ||
 8001cbc:	4b1f      	ldr	r3, [pc, #124]	; (8001d3c <L6206_HardHiz+0x110>)
 8001cbe:	8c1a      	ldrh	r2, [r3, #32]
 8001cc0:	f240 3303 	movw	r3, #771	; 0x303
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d1ef      	bne.n	8001ca8 <L6206_HardHiz+0x7c>
					skip = TRUE;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e7dd      	b.n	8001c88 <L6206_HardHiz+0x5c>
				if ((motorId > 0) && (devicePrm.motionState[1] == STEADY) && (devicePrm.motionState[2] == STEADY)) {
 8001ccc:	b354      	cbz	r4, 8001d24 <L6206_HardHiz+0xf8>
 8001cce:	4b1b      	ldr	r3, [pc, #108]	; (8001d3c <L6206_HardHiz+0x110>)
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001cd6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001cda:	4a1a      	ldr	r2, [pc, #104]	; (8001d44 <L6206_HardHiz+0x118>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d023      	beq.n	8001d28 <L6206_HardHiz+0xfc>
			bool skip = FALSE;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	e7d1      	b.n	8001c88 <L6206_HardHiz+0x5c>
				if ((motorId < 2) && (devicePrm.motionState[0] == STEADY) && (devicePrm.motionState[1] == STEADY)) {
 8001ce4:	2c01      	cmp	r4, #1
 8001ce6:	d901      	bls.n	8001cec <L6206_HardHiz+0xc0>
			bool skip = FALSE;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	e7cd      	b.n	8001c88 <L6206_HardHiz+0x5c>
				if ((motorId < 2) && (devicePrm.motionState[0] == STEADY) && (devicePrm.motionState[1] == STEADY)) {
 8001cec:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <L6206_HardHiz+0x110>)
 8001cee:	8c1a      	ldrh	r2, [r3, #32]
 8001cf0:	f240 3303 	movw	r3, #771	; 0x303
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d019      	beq.n	8001d2c <L6206_HardHiz+0x100>
			bool skip = FALSE;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	e7c5      	b.n	8001c88 <L6206_HardHiz+0x5c>
				if ((devicePrm.motionState[0] == STEADY) && (devicePrm.motionState[1] == STEADY)) {
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <L6206_HardHiz+0x110>)
 8001cfe:	8c1a      	ldrh	r2, [r3, #32]
 8001d00:	f240 3303 	movw	r3, #771	; 0x303
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d013      	beq.n	8001d30 <L6206_HardHiz+0x104>
			bool skip = FALSE;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	e7bd      	b.n	8001c88 <L6206_HardHiz+0x5c>
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	e7bb      	b.n	8001c88 <L6206_HardHiz+0x5c>
 8001d10:	2300      	movs	r3, #0
 8001d12:	e7b9      	b.n	8001c88 <L6206_HardHiz+0x5c>
					skip = TRUE;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e7b7      	b.n	8001c88 <L6206_HardHiz+0x5c>
					skip = TRUE;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e7b5      	b.n	8001c88 <L6206_HardHiz+0x5c>
			bool skip = FALSE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	e7b3      	b.n	8001c88 <L6206_HardHiz+0x5c>
					skip = TRUE;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e7b1      	b.n	8001c88 <L6206_HardHiz+0x5c>
			bool skip = FALSE;
 8001d24:	2300      	movs	r3, #0
 8001d26:	e7af      	b.n	8001c88 <L6206_HardHiz+0x5c>
					skip = TRUE;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e7ad      	b.n	8001c88 <L6206_HardHiz+0x5c>
					skip = TRUE;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e7ab      	b.n	8001c88 <L6206_HardHiz+0x5c>
					skip = TRUE;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e7a9      	b.n	8001c88 <L6206_HardHiz+0x5c>
				L6206_DisableBridge(bridgeId);
 8001d34:	f7ff fd12 	bl	800175c <L6206_DisableBridge>
 8001d38:	e7a8      	b.n	8001c8c <L6206_HardHiz+0x60>
 8001d3a:	bf00      	nop
 8001d3c:	200027dc 	.word	0x200027dc
 8001d40:	0801e084 	.word	0x0801e084
 8001d44:	00030300 	.word	0x00030300

08001d48 <L6206_Run>:
{
 8001d48:	b570      	push	{r4, r5, r6, lr}
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 8001d4a:	4b2b      	ldr	r3, [pc, #172]	; (8001df8 <L6206_Run+0xb0>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	4a2b      	ldr	r2, [pc, #172]	; (8001dfc <L6206_Run+0xb4>)
 8001d50:	5cd3      	ldrb	r3, [r2, r3]
 8001d52:	4283      	cmp	r3, r0
 8001d54:	d332      	bcc.n	8001dbc <L6206_Run+0x74>
 8001d56:	4604      	mov	r4, r0
 8001d58:	460d      	mov	r5, r1
	}else if ((devicePrm.motionState[motorId] == INACTIVE) ||
 8001d5a:	4b27      	ldr	r3, [pc, #156]	; (8001df8 <L6206_Run+0xb0>)
 8001d5c:	4403      	add	r3, r0
 8001d5e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001d62:	2a08      	cmp	r2, #8
 8001d64:	d004      	beq.n	8001d70 <L6206_Run+0x28>
		  (devicePrm.direction[motorId] != direction)) {
 8001d66:	4b24      	ldr	r3, [pc, #144]	; (8001df8 <L6206_Run+0xb0>)
 8001d68:	4403      	add	r3, r0
 8001d6a:	7f1b      	ldrb	r3, [r3, #28]
	}else if ((devicePrm.motionState[motorId] == INACTIVE) ||
 8001d6c:	428b      	cmp	r3, r1
 8001d6e:	d024      	beq.n	8001dba <L6206_Run+0x72>
		if (devicePrm.motionState[motorId] != INACTIVE) {
 8001d70:	2a08      	cmp	r2, #8
 8001d72:	d002      	beq.n	8001d7a <L6206_Run+0x32>
			L6206_HardStop(motorId);
 8001d74:	4620      	mov	r0, r4
 8001d76:	f7ff ff2b 	bl	8001bd0 <L6206_HardStop>
		devicePrm.direction[motorId] = direction;
 8001d7a:	4b1f      	ldr	r3, [pc, #124]	; (8001df8 <L6206_Run+0xb0>)
 8001d7c:	4423      	add	r3, r4
 8001d7e:	771d      	strb	r5, [r3, #28]
		devicePrm.motionState[motorId] = STEADY;
 8001d80:	2203      	movs	r2, #3
 8001d82:	f883 2020 	strb.w	r2, [r3, #32]
		bridgeId = L6206_GetBridgeIdUsedByMotorId(motorId);
 8001d86:	4620      	mov	r0, r4
 8001d88:	f7ff fdc6 	bl	8001918 <L6206_GetBridgeIdUsedByMotorId>
 8001d8c:	4606      	mov	r6, r0
		bridgeInput = L6206_GetBridgeInputUsedByMotorId(motorId);
 8001d8e:	4620      	mov	r0, r4
 8001d90:	f7ff fe16 	bl	80019c0 <L6206_GetBridgeInputUsedByMotorId>
 8001d94:	4605      	mov	r5, r0
		L6206_EnableBridge(bridgeId);
 8001d96:	4630      	mov	r0, r6
 8001d98:	f7ff fd00 	bl	800179c <L6206_EnableBridge>
		if (L6206_IsBidirectionnalMotor(motorId)) {
 8001d9c:	4620      	mov	r0, r4
 8001d9e:	f7ff fef3 	bl	8001b88 <L6206_IsBidirectionnalMotor>
 8001da2:	b980      	cbnz	r0, 8001dc6 <L6206_Run+0x7e>
			L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], devicePrm.speed[motorId]);
 8001da4:	4b14      	ldr	r3, [pc, #80]	; (8001df8 <L6206_Run+0xb0>)
 8001da6:	3408      	adds	r4, #8
 8001da8:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 8001dac:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8001db0:	7922      	ldrb	r2, [r4, #4]
 8001db2:	6859      	ldr	r1, [r3, #4]
 8001db4:	4628      	mov	r0, r5
 8001db6:	f003 f8ff 	bl	8004fb8 <L6206_Board_PwmSetFreq>
 8001dba:	bd70      	pop	{r4, r5, r6, pc}
		L6206_ErrorHandler(L6206_ERROR_1);
 8001dbc:	f248 0001 	movw	r0, #32769	; 0x8001
 8001dc0:	f7ff fc74 	bl	80016ac <L6206_ErrorHandler>
 8001dc4:	bd70      	pop	{r4, r5, r6, pc}
			L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], (100 - devicePrm.speed[motorId]));
 8001dc6:	4e0c      	ldr	r6, [pc, #48]	; (8001df8 <L6206_Run+0xb0>)
 8001dc8:	f104 0308 	add.w	r3, r4, #8
 8001dcc:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8001dd0:	889a      	ldrh	r2, [r3, #4]
 8001dd2:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
 8001dd6:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	6859      	ldr	r1, [r3, #4]
 8001dde:	4628      	mov	r0, r5
 8001de0:	f003 f8ea 	bl	8004fb8 <L6206_Board_PwmSetFreq>
			bridgeInput = L6206_GetSecondBridgeInputUsedByMotorId(motorId);
 8001de4:	4620      	mov	r0, r4
 8001de6:	f7ff fe67 	bl	8001ab8 <L6206_GetSecondBridgeInputUsedByMotorId>
			L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], 100);
 8001dea:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 8001dee:	2264      	movs	r2, #100	; 0x64
 8001df0:	6871      	ldr	r1, [r6, #4]
 8001df2:	f003 f8e1 	bl	8004fb8 <L6206_Board_PwmSetFreq>
 8001df6:	bd70      	pop	{r4, r5, r6, pc}
 8001df8:	200027dc 	.word	0x200027dc
 8001dfc:	0801e084 	.word	0x0801e084

08001e00 <L6206_SetMaxSpeed>:
{
 8001e00:	b570      	push	{r4, r5, r6, lr}
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 8001e02:	4b1c      	ldr	r3, [pc, #112]	; (8001e74 <L6206_SetMaxSpeed+0x74>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	4a1c      	ldr	r2, [pc, #112]	; (8001e78 <L6206_SetMaxSpeed+0x78>)
 8001e08:	5cd3      	ldrb	r3, [r2, r3]
 8001e0a:	4283      	cmp	r3, r0
 8001e0c:	d31d      	bcc.n	8001e4a <L6206_SetMaxSpeed+0x4a>
 8001e0e:	4604      	mov	r4, r0
 8001e10:	460d      	mov	r5, r1
		devicePrm.speed[motorId] = newMaxSpeed;
 8001e12:	4b18      	ldr	r3, [pc, #96]	; (8001e74 <L6206_SetMaxSpeed+0x74>)
 8001e14:	f100 0208 	add.w	r2, r0, #8
 8001e18:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8001e1c:	8091      	strh	r1, [r2, #4]
		if (devicePrm.motionState[motorId] != INACTIVE) {
 8001e1e:	4403      	add	r3, r0
 8001e20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e24:	2b08      	cmp	r3, #8
 8001e26:	d022      	beq.n	8001e6e <L6206_SetMaxSpeed+0x6e>
			bridgeInput = L6206_GetBridgeInputUsedByMotorId(motorId);
 8001e28:	f7ff fdca 	bl	80019c0 <L6206_GetBridgeInputUsedByMotorId>
 8001e2c:	4606      	mov	r6, r0
			if (L6206_IsBidirectionnalMotor(motorId)) {
 8001e2e:	4620      	mov	r0, r4
 8001e30:	f7ff feaa 	bl	8001b88 <L6206_IsBidirectionnalMotor>
 8001e34:	b978      	cbnz	r0, 8001e56 <L6206_SetMaxSpeed+0x56>
				L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], devicePrm.speed[motorId]);
 8001e36:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <L6206_SetMaxSpeed+0x74>)
 8001e38:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8001e3c:	b2ea      	uxtb	r2, r5
 8001e3e:	6859      	ldr	r1, [r3, #4]
 8001e40:	4630      	mov	r0, r6
 8001e42:	f003 f8b9 	bl	8004fb8 <L6206_Board_PwmSetFreq>
		cmdExecuted = TRUE;
 8001e46:	2001      	movs	r0, #1
 8001e48:	bd70      	pop	{r4, r5, r6, pc}
		L6206_ErrorHandler(L6206_ERROR_1);
 8001e4a:	f248 0001 	movw	r0, #32769	; 0x8001
 8001e4e:	f7ff fc2d 	bl	80016ac <L6206_ErrorHandler>
	bool cmdExecuted = FALSE;
 8001e52:	2000      	movs	r0, #0
 8001e54:	bd70      	pop	{r4, r5, r6, pc}
				L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], (100 - devicePrm.speed[motorId]));
 8001e56:	f1c5 0264 	rsb	r2, r5, #100	; 0x64
 8001e5a:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <L6206_SetMaxSpeed+0x74>)
 8001e5c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	6859      	ldr	r1, [r3, #4]
 8001e64:	4630      	mov	r0, r6
 8001e66:	f003 f8a7 	bl	8004fb8 <L6206_Board_PwmSetFreq>
		cmdExecuted = TRUE;
 8001e6a:	2001      	movs	r0, #1
 8001e6c:	bd70      	pop	{r4, r5, r6, pc}
 8001e6e:	2001      	movs	r0, #1
}
 8001e70:	bd70      	pop	{r4, r5, r6, pc}
 8001e72:	bf00      	nop
 8001e74:	200027dc 	.word	0x200027dc
 8001e78:	0801e084 	.word	0x0801e084

08001e7c <L6206_SetBridgeInputPwmFreq>:
{
 8001e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e80:	4680      	mov	r8, r0
 8001e82:	460f      	mov	r7, r1
	if (newFreq > L6206_MAX_PWM_FREQ) {
 8001e84:	4b24      	ldr	r3, [pc, #144]	; (8001f18 <L6206_SetBridgeInputPwmFreq+0x9c>)
 8001e86:	4299      	cmp	r1, r3
 8001e88:	d900      	bls.n	8001e8c <L6206_SetBridgeInputPwmFreq+0x10>
		newFreq = L6206_MAX_PWM_FREQ;
 8001e8a:	461f      	mov	r7, r3
	for (loop = 0; loop < 2; loop++) {
 8001e8c:	2500      	movs	r5, #0
 8001e8e:	e013      	b.n	8001eb8 <L6206_SetBridgeInputPwmFreq+0x3c>
					L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], 100);
 8001e90:	4b22      	ldr	r3, [pc, #136]	; (8001f1c <L6206_SetBridgeInputPwmFreq+0xa0>)
 8001e92:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8001e96:	2264      	movs	r2, #100	; 0x64
 8001e98:	6859      	ldr	r1, [r3, #4]
 8001e9a:	4620      	mov	r0, r4
 8001e9c:	f003 f88c 	bl	8004fb8 <L6206_Board_PwmSetFreq>
 8001ea0:	e008      	b.n	8001eb4 <L6206_SetBridgeInputPwmFreq+0x38>
				L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], devicePrm.speed[motorId]);
 8001ea2:	3608      	adds	r6, #8
 8001ea4:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <L6206_SetBridgeInputPwmFreq+0xa0>)
 8001ea6:	eb03 0646 	add.w	r6, r3, r6, lsl #1
 8001eaa:	7932      	ldrb	r2, [r6, #4]
 8001eac:	4639      	mov	r1, r7
 8001eae:	4620      	mov	r0, r4
 8001eb0:	f003 f882 	bl	8004fb8 <L6206_Board_PwmSetFreq>
	for (loop = 0; loop < 2; loop++) {
 8001eb4:	3501      	adds	r5, #1
 8001eb6:	b2ed      	uxtb	r5, r5
 8001eb8:	2d01      	cmp	r5, #1
 8001eba:	d82a      	bhi.n	8001f12 <L6206_SetBridgeInputPwmFreq+0x96>
		uint8_t bridgeInput = (bridgeId << 1) + loop;
 8001ebc:	ea4f 0448 	mov.w	r4, r8, lsl #1
 8001ec0:	b2e4      	uxtb	r4, r4
 8001ec2:	442c      	add	r4, r5
 8001ec4:	b2e4      	uxtb	r4, r4
		devicePrm.pwmFreq[bridgeInput] = newFreq;
 8001ec6:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8001f1c <L6206_SetBridgeInputPwmFreq+0xa0>
 8001eca:	eb09 0384 	add.w	r3, r9, r4, lsl #2
 8001ece:	605f      	str	r7, [r3, #4]
		motorId = L6206_GetMotorIdUsingbridgeInput(bridgeInput);
 8001ed0:	4620      	mov	r0, r4
 8001ed2:	f7ff fd3b 	bl	800194c <L6206_GetMotorIdUsingbridgeInput>
 8001ed6:	4606      	mov	r6, r0
		if (devicePrm.motionState[motorId] != INACTIVE) {
 8001ed8:	4481      	add	r9, r0
 8001eda:	f899 3020 	ldrb.w	r3, [r9, #32]
 8001ede:	2b08      	cmp	r3, #8
 8001ee0:	d0e8      	beq.n	8001eb4 <L6206_SetBridgeInputPwmFreq+0x38>
			if (L6206_IsBidirectionnalMotor(motorId)) {
 8001ee2:	f7ff fe51 	bl	8001b88 <L6206_IsBidirectionnalMotor>
 8001ee6:	2800      	cmp	r0, #0
 8001ee8:	d0db      	beq.n	8001ea2 <L6206_SetBridgeInputPwmFreq+0x26>
				if (bridgeInput != L6206_GetSecondBridgeInputUsedByMotorId(motorId)) {
 8001eea:	4630      	mov	r0, r6
 8001eec:	f7ff fde4 	bl	8001ab8 <L6206_GetSecondBridgeInputUsedByMotorId>
 8001ef0:	4284      	cmp	r4, r0
 8001ef2:	d0cd      	beq.n	8001e90 <L6206_SetBridgeInputPwmFreq+0x14>
					L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], (100 - devicePrm.speed[motorId]));
 8001ef4:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <L6206_SetBridgeInputPwmFreq+0xa0>)
 8001ef6:	3608      	adds	r6, #8
 8001ef8:	eb03 0646 	add.w	r6, r3, r6, lsl #1
 8001efc:	88b2      	ldrh	r2, [r6, #4]
 8001efe:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
 8001f02:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	6859      	ldr	r1, [r3, #4]
 8001f0a:	4620      	mov	r0, r4
 8001f0c:	f003 f854 	bl	8004fb8 <L6206_Board_PwmSetFreq>
 8001f10:	e7d0      	b.n	8001eb4 <L6206_SetBridgeInputPwmFreq+0x38>
}
 8001f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001f16:	bf00      	nop
 8001f18:	000186a0 	.word	0x000186a0
 8001f1c:	200027dc 	.word	0x200027dc

08001f20 <L6206_SetDeviceParamsToPredefinedValues>:
* @brief  Sets the parameters of the device to predefined values
* from l6206_target_config.h
* @retval None
**********************************************************/
void L6206_SetDeviceParamsToPredefinedValues(void)
{
 8001f20:	b510      	push	{r4, lr}
	uint32_t i;

	memset(&devicePrm, 0, sizeof(devicePrm));
 8001f22:	4c14      	ldr	r4, [pc, #80]	; (8001f74 <L6206_SetDeviceParamsToPredefinedValues+0x54>)
 8001f24:	2228      	movs	r2, #40	; 0x28
 8001f26:	2100      	movs	r1, #0
 8001f28:	4620      	mov	r0, r4
 8001f2a:	f019 fb04 	bl	801b536 <memset>

	devicePrm.config = L6206_CONF_PARAM_PARALLE_BRIDGES;

	devicePrm.pwmFreq[INPUT_1A] = L6206_CONF_PARAM_FREQ_PWM1A;
 8001f2e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001f32:	6063      	str	r3, [r4, #4]
	devicePrm.pwmFreq[INPUT_2A] = L6206_CONF_PARAM_FREQ_PWM2A;
 8001f34:	60a3      	str	r3, [r4, #8]
	devicePrm.pwmFreq[INPUT_1B] = L6206_CONF_PARAM_FREQ_PWM1B;
 8001f36:	60e3      	str	r3, [r4, #12]
	devicePrm.pwmFreq[INPUT_2B] = L6206_CONF_PARAM_FREQ_PWM2B;
 8001f38:	6123      	str	r3, [r4, #16]

	for (i = 0; i < MAX_NUMBER_OF_BRUSH_DC_MOTORS; i++) {
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	e00d      	b.n	8001f5a <L6206_SetDeviceParamsToPredefinedValues+0x3a>
		devicePrm.speed[i] = 100;
 8001f3e:	4b0d      	ldr	r3, [pc, #52]	; (8001f74 <L6206_SetDeviceParamsToPredefinedValues+0x54>)
 8001f40:	f102 0108 	add.w	r1, r2, #8
 8001f44:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8001f48:	2064      	movs	r0, #100	; 0x64
 8001f4a:	8088      	strh	r0, [r1, #4]
		devicePrm.direction[i] = FORWARD;
 8001f4c:	4413      	add	r3, r2
 8001f4e:	2101      	movs	r1, #1
 8001f50:	7719      	strb	r1, [r3, #28]
		devicePrm.motionState[i] = INACTIVE;
 8001f52:	2108      	movs	r1, #8
 8001f54:	f883 1020 	strb.w	r1, [r3, #32]
	for (i = 0; i < MAX_NUMBER_OF_BRUSH_DC_MOTORS; i++) {
 8001f58:	3201      	adds	r2, #1
 8001f5a:	2a03      	cmp	r2, #3
 8001f5c:	d9ef      	bls.n	8001f3e <L6206_SetDeviceParamsToPredefinedValues+0x1e>
 8001f5e:	2300      	movs	r3, #0
 8001f60:	e005      	b.n	8001f6e <L6206_SetDeviceParamsToPredefinedValues+0x4e>
	}
	for (i = 0; i < L6206_NB_MAX_BRIDGES; i++) {
		devicePrm.bridgeEnabled[i] = FALSE;
 8001f62:	4a04      	ldr	r2, [pc, #16]	; (8001f74 <L6206_SetDeviceParamsToPredefinedValues+0x54>)
 8001f64:	441a      	add	r2, r3
 8001f66:	2100      	movs	r1, #0
 8001f68:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
	for (i = 0; i < L6206_NB_MAX_BRIDGES; i++) {
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d9f7      	bls.n	8001f62 <L6206_SetDeviceParamsToPredefinedValues+0x42>
	}
}
 8001f72:	bd10      	pop	{r4, pc}
 8001f74:	200027dc 	.word	0x200027dc

08001f78 <L6206_SetDeviceParamsToGivenValues>:
* @param initDevicePrm structure containing values to initialize the device
* parameters
* @retval None
**********************************************************/
void L6206_SetDeviceParamsToGivenValues(L6206_InitTypeDef* initDevicePrm)
{
 8001f78:	b4f0      	push	{r4, r5, r6, r7}
	memcpy(&devicePrm, initDevicePrm, sizeof(devicePrm));
 8001f7a:	4604      	mov	r4, r0
 8001f7c:	4e08      	ldr	r6, [pc, #32]	; (8001fa0 <L6206_SetDeviceParamsToGivenValues+0x28>)
 8001f7e:	f100 0720 	add.w	r7, r0, #32
 8001f82:	4635      	mov	r5, r6
 8001f84:	6820      	ldr	r0, [r4, #0]
 8001f86:	6861      	ldr	r1, [r4, #4]
 8001f88:	68a2      	ldr	r2, [r4, #8]
 8001f8a:	68e3      	ldr	r3, [r4, #12]
 8001f8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f8e:	3410      	adds	r4, #16
 8001f90:	462e      	mov	r6, r5
 8001f92:	42bc      	cmp	r4, r7
 8001f94:	d1f5      	bne.n	8001f82 <L6206_SetDeviceParamsToGivenValues+0xa>
 8001f96:	6820      	ldr	r0, [r4, #0]
 8001f98:	6861      	ldr	r1, [r4, #4]
 8001f9a:	c603      	stmia	r6!, {r0, r1}
}
 8001f9c:	bcf0      	pop	{r4, r5, r6, r7}
 8001f9e:	4770      	bx	lr
 8001fa0:	200027dc 	.word	0x200027dc

08001fa4 <L6206_Init>:
{
 8001fa4:	b510      	push	{r4, lr}
 8001fa6:	4604      	mov	r4, r0
	l6206DriverInstance++;
 8001fa8:	4a08      	ldr	r2, [pc, #32]	; (8001fcc <L6206_Init+0x28>)
 8001faa:	8813      	ldrh	r3, [r2, #0]
 8001fac:	3301      	adds	r3, #1
 8001fae:	8013      	strh	r3, [r2, #0]
	L6206_Board_GpioInit();
 8001fb0:	f002 ff30 	bl	8004e14 <L6206_Board_GpioInit>
	if (init == NULL) {
 8001fb4:	b13c      	cbz	r4, 8001fc6 <L6206_Init+0x22>
		L6206_SetDeviceParamsToGivenValues((L6206_InitTypeDef*)init);
 8001fb6:	4620      	mov	r0, r4
 8001fb8:	f7ff ffde 	bl	8001f78 <L6206_SetDeviceParamsToGivenValues>
	L6206_SetDualFullBridgeConfig(devicePrm.config);
 8001fbc:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <L6206_Init+0x2c>)
 8001fbe:	7818      	ldrb	r0, [r3, #0]
 8001fc0:	f7ff fc3a 	bl	8001838 <L6206_SetDualFullBridgeConfig>
 8001fc4:	bd10      	pop	{r4, pc}
		L6206_SetDeviceParamsToPredefinedValues();
 8001fc6:	f7ff ffab 	bl	8001f20 <L6206_SetDeviceParamsToPredefinedValues>
 8001fca:	e7f7      	b.n	8001fbc <L6206_Init+0x18>
 8001fcc:	20002462 	.word	0x20002462
 8001fd0:	200027dc 	.word	0x200027dc

08001fd4 <LPS22HB_GetCapabilities>:
int32_t LPS22HB_GetCapabilities(LPS22HB_Object_t *pObj, LPS22HB_Capabilities_t *Capabilities)
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	7088      	strb	r0, [r1, #2]
  Capabilities->Pressure    = 1;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	704b      	strb	r3, [r1, #1]
  Capabilities->Temperature = 1;
 8001fdc:	700b      	strb	r3, [r1, #0]
  Capabilities->LowPower    = 0;
 8001fde:	70c8      	strb	r0, [r1, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	604b      	str	r3, [r1, #4]
  Capabilities->TempMaxOdr  = 75.0f;
 8001fe4:	4b01      	ldr	r3, [pc, #4]	; (8001fec <LPS22HB_GetCapabilities+0x18>)
 8001fe6:	608b      	str	r3, [r1, #8]
  Capabilities->PressMaxOdr = 75.0f;
 8001fe8:	60cb      	str	r3, [r1, #12]
  return LPS22HB_OK;
}
 8001fea:	4770      	bx	lr
 8001fec:	42960000 	.word	0x42960000

08001ff0 <LPS22HB_SetOutputDataRate_When_Disabled>:
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Disabled(LPS22HB_Object_t *pObj, float Odr)
{
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8001ff0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001ff4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ffc:	d918      	bls.n	8002030 <LPS22HB_SetOutputDataRate_When_Disabled+0x40>
 8001ffe:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8002002:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800200a:	d913      	bls.n	8002034 <LPS22HB_SetOutputDataRate_When_Disabled+0x44>
 800200c:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 8002010:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002018:	d911      	bls.n	800203e <LPS22HB_SetOutputDataRate_When_Disabled+0x4e>
 800201a:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8002044 <LPS22HB_SetOutputDataRate_When_Disabled+0x54>
 800201e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002026:	d901      	bls.n	800202c <LPS22HB_SetOutputDataRate_When_Disabled+0x3c>
 8002028:	2305      	movs	r3, #5
 800202a:	e004      	b.n	8002036 <LPS22HB_SetOutputDataRate_When_Disabled+0x46>
 800202c:	2304      	movs	r3, #4
 800202e:	e002      	b.n	8002036 <LPS22HB_SetOutputDataRate_When_Disabled+0x46>
 8002030:	2301      	movs	r3, #1
 8002032:	e000      	b.n	8002036 <LPS22HB_SetOutputDataRate_When_Disabled+0x46>
 8002034:	2302      	movs	r3, #2
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 8002036:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
                   : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
                   : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
                   :                  LPS22HB_ODR_75_Hz;

  return LPS22HB_OK;
}
 800203a:	2000      	movs	r0, #0
 800203c:	4770      	bx	lr
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 800203e:	2303      	movs	r3, #3
 8002040:	e7f9      	b.n	8002036 <LPS22HB_SetOutputDataRate_When_Disabled+0x46>
 8002042:	bf00      	nop
 8002044:	42480000 	.word	0x42480000

08002048 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800204c:	4606      	mov	r6, r0
 800204e:	4688      	mov	r8, r1
 8002050:	4691      	mov	r9, r2
 8002052:	461f      	mov	r7, r3
  uint16_t i;
  int32_t ret = LPS22HB_OK;
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8002054:	6883      	ldr	r3, [r0, #8]
 8002056:	b98b      	cbnz	r3, 800207c <ReadRegWrap+0x34>
 8002058:	2300      	movs	r3, #0
 800205a:	461c      	mov	r4, r3
  {
    for (i = 0; i < Length; i++)
 800205c:	42bc      	cmp	r4, r7
 800205e:	d215      	bcs.n	800208c <ReadRegWrap+0x44>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8002060:	6975      	ldr	r5, [r6, #20]
 8002062:	eb04 0108 	add.w	r1, r4, r8
 8002066:	2301      	movs	r3, #1
 8002068:	eb09 0204 	add.w	r2, r9, r4
 800206c:	b289      	uxth	r1, r1
 800206e:	7b30      	ldrb	r0, [r6, #12]
 8002070:	47a8      	blx	r5
      if (ret != LPS22HB_OK)
 8002072:	4603      	mov	r3, r0
 8002074:	b940      	cbnz	r0, 8002088 <ReadRegWrap+0x40>
    for (i = 0; i < Length; i++)
 8002076:	3401      	adds	r4, #1
 8002078:	b2a4      	uxth	r4, r4
 800207a:	e7ef      	b.n	800205c <ReadRegWrap+0x14>

    return ret;
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800207c:	6944      	ldr	r4, [r0, #20]
 800207e:	463b      	mov	r3, r7
 8002080:	7b00      	ldrb	r0, [r0, #12]
 8002082:	47a0      	blx	r4
 8002084:	4603      	mov	r3, r0
 8002086:	e001      	b.n	800208c <ReadRegWrap+0x44>
        return LPS22HB_ERROR;
 8002088:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 800208c:	4618      	mov	r0, r3
 800208e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002092 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002092:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002096:	4605      	mov	r5, r0
 8002098:	4688      	mov	r8, r1
 800209a:	4691      	mov	r9, r2
 800209c:	461f      	mov	r7, r3
  uint16_t i;
  int32_t ret = LPS22HB_OK;
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 800209e:	6883      	ldr	r3, [r0, #8]
 80020a0:	b97b      	cbnz	r3, 80020c2 <WriteRegWrap+0x30>
 80020a2:	2300      	movs	r3, #0
 80020a4:	461c      	mov	r4, r3
  {
    for (i = 0; i < Length; i++)
 80020a6:	42bc      	cmp	r4, r7
 80020a8:	d213      	bcs.n	80020d2 <WriteRegWrap+0x40>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, Reg, &pData[i], 1);
 80020aa:	692e      	ldr	r6, [r5, #16]
 80020ac:	2301      	movs	r3, #1
 80020ae:	eb09 0204 	add.w	r2, r9, r4
 80020b2:	4641      	mov	r1, r8
 80020b4:	7b28      	ldrb	r0, [r5, #12]
 80020b6:	47b0      	blx	r6
      if (ret != LPS22HB_OK)
 80020b8:	4603      	mov	r3, r0
 80020ba:	b940      	cbnz	r0, 80020ce <WriteRegWrap+0x3c>
    for (i = 0; i < Length; i++)
 80020bc:	3401      	adds	r4, #1
 80020be:	b2a4      	uxth	r4, r4
 80020c0:	e7f1      	b.n	80020a6 <WriteRegWrap+0x14>

    return ret;
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80020c2:	6904      	ldr	r4, [r0, #16]
 80020c4:	463b      	mov	r3, r7
 80020c6:	7b00      	ldrb	r0, [r0, #12]
 80020c8:	47a0      	blx	r4
 80020ca:	4603      	mov	r3, r0
 80020cc:	e001      	b.n	80020d2 <WriteRegWrap+0x40>
        return LPS22HB_ERROR;
 80020ce:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080020d8 <LPS22HB_PRESS_Enable>:
  if (pObj->press_is_enabled == 1U)
 80020d8:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d00d      	beq.n	80020fc <LPS22HB_PRESS_Enable+0x24>
{
 80020e0:	b510      	push	{r4, lr}
 80020e2:	4604      	mov	r4, r0
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 80020e4:	f890 102b 	ldrb.w	r1, [r0, #43]	; 0x2b
 80020e8:	301c      	adds	r0, #28
 80020ea:	f000 fa3d 	bl	8002568 <lps22hb_data_rate_set>
 80020ee:	4603      	mov	r3, r0
 80020f0:	b938      	cbnz	r0, 8002102 <LPS22HB_PRESS_Enable+0x2a>
  pObj->press_is_enabled = 1;
 80020f2:	2201      	movs	r2, #1
 80020f4:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	bd10      	pop	{r4, pc}
    return LPS22HB_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	4770      	bx	lr
    return LPS22HB_ERROR;
 8002102:	f04f 33ff 	mov.w	r3, #4294967295
 8002106:	e7f7      	b.n	80020f8 <LPS22HB_PRESS_Enable+0x20>

08002108 <LPS22HB_TEMP_Enable>:
  if (pObj->temp_is_enabled == 1U)
 8002108:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 800210c:	2b01      	cmp	r3, #1
 800210e:	d00d      	beq.n	800212c <LPS22HB_TEMP_Enable+0x24>
{
 8002110:	b510      	push	{r4, lr}
 8002112:	4604      	mov	r4, r0
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8002114:	f890 102b 	ldrb.w	r1, [r0, #43]	; 0x2b
 8002118:	301c      	adds	r0, #28
 800211a:	f000 fa25 	bl	8002568 <lps22hb_data_rate_set>
 800211e:	4603      	mov	r3, r0
 8002120:	b938      	cbnz	r0, 8002132 <LPS22HB_TEMP_Enable+0x2a>
  pObj->temp_is_enabled = 1;
 8002122:	2201      	movs	r2, #1
 8002124:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
}
 8002128:	4618      	mov	r0, r3
 800212a:	bd10      	pop	{r4, pc}
    return LPS22HB_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	4770      	bx	lr
    return LPS22HB_ERROR;
 8002132:	f04f 33ff 	mov.w	r3, #4294967295
 8002136:	e7f7      	b.n	8002128 <LPS22HB_TEMP_Enable+0x20>

08002138 <LPS22HB_Initialize>:
{
 8002138:	b570      	push	{r4, r5, r6, lr}
 800213a:	4605      	mov	r5, r0
  if (lps22hb_low_power_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 800213c:	f100 041c 	add.w	r4, r0, #28
 8002140:	2101      	movs	r1, #1
 8002142:	4620      	mov	r0, r4
 8002144:	f000 fa6a 	bl	800261c <lps22hb_low_power_set>
 8002148:	bb20      	cbnz	r0, 8002194 <LPS22HB_Initialize+0x5c>
  if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 800214a:	2100      	movs	r1, #0
 800214c:	4620      	mov	r0, r4
 800214e:	f000 fa0b 	bl	8002568 <lps22hb_data_rate_set>
 8002152:	bb10      	cbnz	r0, 800219a <LPS22HB_Initialize+0x62>
  if (lps22hb_low_pass_filter_mode_set(&(pObj->Ctx), LPS22HB_LPF_ODR_DIV_9) != LPS22HB_OK)
 8002154:	2102      	movs	r1, #2
 8002156:	4620      	mov	r0, r4
 8002158:	f000 f9ea 	bl	8002530 <lps22hb_low_pass_filter_mode_set>
 800215c:	bb00      	cbnz	r0, 80021a0 <LPS22HB_Initialize+0x68>
  if (lps22hb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 800215e:	2101      	movs	r1, #1
 8002160:	4620      	mov	r0, r4
 8002162:	f000 f9c9 	bl	80024f8 <lps22hb_block_data_update_set>
 8002166:	4606      	mov	r6, r0
 8002168:	b9e8      	cbnz	r0, 80021a6 <LPS22HB_Initialize+0x6e>
  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 800216a:	68ab      	ldr	r3, [r5, #8]
 800216c:	b94b      	cbnz	r3, 8002182 <LPS22HB_Initialize+0x4a>
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_DISABLE) != LPS22HB_OK)
 800216e:	2100      	movs	r1, #0
 8002170:	4620      	mov	r0, r4
 8002172:	f000 fa6f 	bl	8002654 <lps22hb_auto_add_inc_set>
 8002176:	b9c8      	cbnz	r0, 80021ac <LPS22HB_Initialize+0x74>
  pObj->last_odr = LPS22HB_ODR_25_Hz;
 8002178:	2303      	movs	r3, #3
 800217a:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
}
 800217e:	4630      	mov	r0, r6
 8002180:	bd70      	pop	{r4, r5, r6, pc}
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8002182:	2101      	movs	r1, #1
 8002184:	4620      	mov	r0, r4
 8002186:	f000 fa65 	bl	8002654 <lps22hb_auto_add_inc_set>
 800218a:	2800      	cmp	r0, #0
 800218c:	d0f4      	beq.n	8002178 <LPS22HB_Initialize+0x40>
      return LPS22HB_ERROR;
 800218e:	f04f 36ff 	mov.w	r6, #4294967295
 8002192:	e7f4      	b.n	800217e <LPS22HB_Initialize+0x46>
    return LPS22HB_ERROR;
 8002194:	f04f 36ff 	mov.w	r6, #4294967295
 8002198:	e7f1      	b.n	800217e <LPS22HB_Initialize+0x46>
    return LPS22HB_ERROR;
 800219a:	f04f 36ff 	mov.w	r6, #4294967295
 800219e:	e7ee      	b.n	800217e <LPS22HB_Initialize+0x46>
    return LPS22HB_ERROR;
 80021a0:	f04f 36ff 	mov.w	r6, #4294967295
 80021a4:	e7eb      	b.n	800217e <LPS22HB_Initialize+0x46>
    return LPS22HB_ERROR;
 80021a6:	f04f 36ff 	mov.w	r6, #4294967295
 80021aa:	e7e8      	b.n	800217e <LPS22HB_Initialize+0x46>
      return LPS22HB_ERROR;
 80021ac:	f04f 36ff 	mov.w	r6, #4294967295
 80021b0:	e7e5      	b.n	800217e <LPS22HB_Initialize+0x46>

080021b2 <LPS22HB_Init>:
{
 80021b2:	b510      	push	{r4, lr}
 80021b4:	4604      	mov	r4, r0
  if (pObj->is_initialized == 0U)
 80021b6:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 80021ba:	b123      	cbz	r3, 80021c6 <LPS22HB_Init+0x14>
  pObj->is_initialized = 1U;
 80021bc:	2301      	movs	r3, #1
 80021be:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  return LPS22HB_OK;
 80021c2:	2000      	movs	r0, #0
 80021c4:	bd10      	pop	{r4, pc}
    if (LPS22HB_Initialize(pObj) != LPS22HB_OK)
 80021c6:	f7ff ffb7 	bl	8002138 <LPS22HB_Initialize>
 80021ca:	2800      	cmp	r0, #0
 80021cc:	d0f6      	beq.n	80021bc <LPS22HB_Init+0xa>
      return LPS22HB_ERROR;
 80021ce:	f04f 30ff 	mov.w	r0, #4294967295
}
 80021d2:	bd10      	pop	{r4, pc}

080021d4 <LPS22HB_ReadID>:
{
 80021d4:	b508      	push	{r3, lr}
  if (lps22hb_device_id_get(&(pObj->Ctx), Id) != LPS22HB_OK)
 80021d6:	301c      	adds	r0, #28
 80021d8:	f000 fa19 	bl	800260e <lps22hb_device_id_get>
 80021dc:	4603      	mov	r3, r0
 80021de:	b908      	cbnz	r0, 80021e4 <LPS22HB_ReadID+0x10>
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	bd08      	pop	{r3, pc}
    return LPS22HB_ERROR;
 80021e4:	f04f 33ff 	mov.w	r3, #4294967295
 80021e8:	e7fa      	b.n	80021e0 <LPS22HB_ReadID+0xc>

080021ea <LPS22HB_PRESS_Disable>:
{
 80021ea:	b538      	push	{r3, r4, r5, lr}
  if (pObj->press_is_enabled == 0U)
 80021ec:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80021f0:	b1c3      	cbz	r3, 8002224 <LPS22HB_PRESS_Disable+0x3a>
 80021f2:	4604      	mov	r4, r0
  if (pObj->temp_is_enabled == 0U)
 80021f4:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 80021f8:	b11b      	cbz	r3, 8002202 <LPS22HB_PRESS_Disable+0x18>
  pObj->press_is_enabled = 0;
 80021fa:	2000      	movs	r0, #0
 80021fc:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
  return LPS22HB_OK;
 8002200:	bd38      	pop	{r3, r4, r5, pc}
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8002202:	f100 051c 	add.w	r5, r0, #28
 8002206:	f100 012b 	add.w	r1, r0, #43	; 0x2b
 800220a:	4628      	mov	r0, r5
 800220c:	f000 f9c8 	bl	80025a0 <lps22hb_data_rate_get>
 8002210:	b950      	cbnz	r0, 8002228 <LPS22HB_PRESS_Disable+0x3e>
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8002212:	2100      	movs	r1, #0
 8002214:	4628      	mov	r0, r5
 8002216:	f000 f9a7 	bl	8002568 <lps22hb_data_rate_set>
 800221a:	2800      	cmp	r0, #0
 800221c:	d0ed      	beq.n	80021fa <LPS22HB_PRESS_Disable+0x10>
      return LPS22HB_ERROR;
 800221e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002222:	bd38      	pop	{r3, r4, r5, pc}
    return LPS22HB_OK;
 8002224:	2000      	movs	r0, #0
 8002226:	bd38      	pop	{r3, r4, r5, pc}
      return LPS22HB_ERROR;
 8002228:	f04f 30ff 	mov.w	r0, #4294967295
 800222c:	bd38      	pop	{r3, r4, r5, pc}
	...

08002230 <LPS22HB_GetOutputDataRate>:
{
 8002230:	b510      	push	{r4, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	460c      	mov	r4, r1
  if (lps22hb_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HB_OK)
 8002236:	f10d 0107 	add.w	r1, sp, #7
 800223a:	301c      	adds	r0, #28
 800223c:	f000 f9b0 	bl	80025a0 <lps22hb_data_rate_get>
 8002240:	b9f0      	cbnz	r0, 8002280 <LPS22HB_GetOutputDataRate+0x50>
 8002242:	4602      	mov	r2, r0
  switch (odr_low_level)
 8002244:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002248:	2b05      	cmp	r3, #5
 800224a:	d81c      	bhi.n	8002286 <LPS22HB_GetOutputDataRate+0x56>
 800224c:	e8df f003 	tbb	[pc, r3]
 8002250:	0f0c0803 	.word	0x0f0c0803
 8002254:	1512      	.short	0x1512
      *Odr = 0.0f;
 8002256:	2300      	movs	r3, #0
 8002258:	6023      	str	r3, [r4, #0]
}
 800225a:	4610      	mov	r0, r2
 800225c:	b002      	add	sp, #8
 800225e:	bd10      	pop	{r4, pc}
      *Odr = 1.0f;
 8002260:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002264:	6023      	str	r3, [r4, #0]
      break;
 8002266:	e7f8      	b.n	800225a <LPS22HB_GetOutputDataRate+0x2a>
      *Odr = 10.0f;
 8002268:	4b08      	ldr	r3, [pc, #32]	; (800228c <LPS22HB_GetOutputDataRate+0x5c>)
 800226a:	6023      	str	r3, [r4, #0]
      break;
 800226c:	e7f5      	b.n	800225a <LPS22HB_GetOutputDataRate+0x2a>
      *Odr = 25.0f;
 800226e:	4b08      	ldr	r3, [pc, #32]	; (8002290 <LPS22HB_GetOutputDataRate+0x60>)
 8002270:	6023      	str	r3, [r4, #0]
      break;
 8002272:	e7f2      	b.n	800225a <LPS22HB_GetOutputDataRate+0x2a>
      *Odr = 50.0f;
 8002274:	4b07      	ldr	r3, [pc, #28]	; (8002294 <LPS22HB_GetOutputDataRate+0x64>)
 8002276:	6023      	str	r3, [r4, #0]
      break;
 8002278:	e7ef      	b.n	800225a <LPS22HB_GetOutputDataRate+0x2a>
      *Odr = 75.0f;
 800227a:	4b07      	ldr	r3, [pc, #28]	; (8002298 <LPS22HB_GetOutputDataRate+0x68>)
 800227c:	6023      	str	r3, [r4, #0]
      break;
 800227e:	e7ec      	b.n	800225a <LPS22HB_GetOutputDataRate+0x2a>
    return LPS22HB_ERROR;
 8002280:	f04f 32ff 	mov.w	r2, #4294967295
 8002284:	e7e9      	b.n	800225a <LPS22HB_GetOutputDataRate+0x2a>
      ret = LPS22HB_ERROR;
 8002286:	f04f 32ff 	mov.w	r2, #4294967295
 800228a:	e7e6      	b.n	800225a <LPS22HB_GetOutputDataRate+0x2a>
 800228c:	41200000 	.word	0x41200000
 8002290:	41c80000 	.word	0x41c80000
 8002294:	42480000 	.word	0x42480000
 8002298:	42960000 	.word	0x42960000

0800229c <LPS22HB_PRESS_GetOutputDataRate>:
{
 800229c:	b508      	push	{r3, lr}
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 800229e:	f7ff ffc7 	bl	8002230 <LPS22HB_GetOutputDataRate>
}
 80022a2:	bd08      	pop	{r3, pc}

080022a4 <LPS22HB_TEMP_GetOutputDataRate>:
{
 80022a4:	b508      	push	{r3, lr}
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 80022a6:	f7ff ffc3 	bl	8002230 <LPS22HB_GetOutputDataRate>
}
 80022aa:	bd08      	pop	{r3, pc}

080022ac <LPS22HB_SetOutputDataRate_When_Enabled>:
{
 80022ac:	b538      	push	{r3, r4, r5, lr}
 80022ae:	4605      	mov	r5, r0
            : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 80022b0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80022b4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80022b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022bc:	d916      	bls.n	80022ec <LPS22HB_SetOutputDataRate_When_Enabled+0x40>
 80022be:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80022c2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80022c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ca:	d911      	bls.n	80022f0 <LPS22HB_SetOutputDataRate_When_Enabled+0x44>
 80022cc:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 80022d0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80022d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d8:	d91a      	bls.n	8002310 <LPS22HB_SetOutputDataRate_When_Enabled+0x64>
 80022da:	eddf 7a12 	vldr	s15, [pc, #72]	; 8002324 <LPS22HB_SetOutputDataRate_When_Enabled+0x78>
 80022de:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80022e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022e6:	d815      	bhi.n	8002314 <LPS22HB_SetOutputDataRate_When_Enabled+0x68>
 80022e8:	2104      	movs	r1, #4
 80022ea:	e002      	b.n	80022f2 <LPS22HB_SetOutputDataRate_When_Enabled+0x46>
 80022ec:	2101      	movs	r1, #1
 80022ee:	e000      	b.n	80022f2 <LPS22HB_SetOutputDataRate_When_Enabled+0x46>
 80022f0:	2102      	movs	r1, #2
  if (lps22hb_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HB_OK)
 80022f2:	f105 041c 	add.w	r4, r5, #28
 80022f6:	4620      	mov	r0, r4
 80022f8:	f000 f936 	bl	8002568 <lps22hb_data_rate_set>
 80022fc:	b978      	cbnz	r0, 800231e <LPS22HB_SetOutputDataRate_When_Enabled+0x72>
  if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 80022fe:	f105 012b 	add.w	r1, r5, #43	; 0x2b
 8002302:	4620      	mov	r0, r4
 8002304:	f000 f94c 	bl	80025a0 <lps22hb_data_rate_get>
 8002308:	4603      	mov	r3, r0
 800230a:	b928      	cbnz	r0, 8002318 <LPS22HB_SetOutputDataRate_When_Enabled+0x6c>
}
 800230c:	4618      	mov	r0, r3
 800230e:	bd38      	pop	{r3, r4, r5, pc}
            : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8002310:	2103      	movs	r1, #3
 8002312:	e7ee      	b.n	80022f2 <LPS22HB_SetOutputDataRate_When_Enabled+0x46>
 8002314:	2105      	movs	r1, #5
 8002316:	e7ec      	b.n	80022f2 <LPS22HB_SetOutputDataRate_When_Enabled+0x46>
    return LPS22HB_ERROR;
 8002318:	f04f 33ff 	mov.w	r3, #4294967295
 800231c:	e7f6      	b.n	800230c <LPS22HB_SetOutputDataRate_When_Enabled+0x60>
    return LPS22HB_ERROR;
 800231e:	f04f 33ff 	mov.w	r3, #4294967295
 8002322:	e7f3      	b.n	800230c <LPS22HB_SetOutputDataRate_When_Enabled+0x60>
 8002324:	42480000 	.word	0x42480000

08002328 <LPS22HB_PRESS_SetOutputDataRate>:
{
 8002328:	b508      	push	{r3, lr}
  if (pObj->press_is_enabled == 1U)
 800232a:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800232e:	2b01      	cmp	r3, #1
 8002330:	d002      	beq.n	8002338 <LPS22HB_PRESS_SetOutputDataRate+0x10>
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002332:	f7ff fe5d 	bl	8001ff0 <LPS22HB_SetOutputDataRate_When_Disabled>
}
 8002336:	bd08      	pop	{r3, pc}
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 8002338:	f7ff ffb8 	bl	80022ac <LPS22HB_SetOutputDataRate_When_Enabled>
 800233c:	bd08      	pop	{r3, pc}

0800233e <LPS22HB_TEMP_SetOutputDataRate>:
{
 800233e:	b508      	push	{r3, lr}
  if (pObj->temp_is_enabled == 1U)
 8002340:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8002344:	2b01      	cmp	r3, #1
 8002346:	d002      	beq.n	800234e <LPS22HB_TEMP_SetOutputDataRate+0x10>
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002348:	f7ff fe52 	bl	8001ff0 <LPS22HB_SetOutputDataRate_When_Disabled>
}
 800234c:	bd08      	pop	{r3, pc}
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 800234e:	f7ff ffad 	bl	80022ac <LPS22HB_SetOutputDataRate_When_Enabled>
 8002352:	bd08      	pop	{r3, pc}

08002354 <LPS22HB_TEMP_Disable>:
{
 8002354:	b538      	push	{r3, r4, r5, lr}
  if (pObj->temp_is_enabled == 0U)
 8002356:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 800235a:	b1c3      	cbz	r3, 800238e <LPS22HB_TEMP_Disable+0x3a>
 800235c:	4604      	mov	r4, r0
  if (pObj->press_is_enabled == 0U)
 800235e:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8002362:	b11b      	cbz	r3, 800236c <LPS22HB_TEMP_Disable+0x18>
  pObj->temp_is_enabled = 0;
 8002364:	2000      	movs	r0, #0
 8002366:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
  return LPS22HB_OK;
 800236a:	bd38      	pop	{r3, r4, r5, pc}
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 800236c:	f100 051c 	add.w	r5, r0, #28
 8002370:	f100 012b 	add.w	r1, r0, #43	; 0x2b
 8002374:	4628      	mov	r0, r5
 8002376:	f000 f913 	bl	80025a0 <lps22hb_data_rate_get>
 800237a:	b950      	cbnz	r0, 8002392 <LPS22HB_TEMP_Disable+0x3e>
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 800237c:	2100      	movs	r1, #0
 800237e:	4628      	mov	r0, r5
 8002380:	f000 f8f2 	bl	8002568 <lps22hb_data_rate_set>
 8002384:	2800      	cmp	r0, #0
 8002386:	d0ed      	beq.n	8002364 <LPS22HB_TEMP_Disable+0x10>
      return LPS22HB_ERROR;
 8002388:	f04f 30ff 	mov.w	r0, #4294967295
}
 800238c:	bd38      	pop	{r3, r4, r5, pc}
    return LPS22HB_OK;
 800238e:	2000      	movs	r0, #0
 8002390:	bd38      	pop	{r3, r4, r5, pc}
      return LPS22HB_ERROR;
 8002392:	f04f 30ff 	mov.w	r0, #4294967295
 8002396:	bd38      	pop	{r3, r4, r5, pc}

08002398 <LPS22HB_DeInit>:
{
 8002398:	b510      	push	{r4, lr}
 800239a:	4604      	mov	r4, r0
  if (pObj->is_initialized == 1U)
 800239c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d003      	beq.n	80023ac <LPS22HB_DeInit+0x14>
  pObj->is_initialized = 0;
 80023a4:	2000      	movs	r0, #0
 80023a6:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
  return LPS22HB_OK;
 80023aa:	bd10      	pop	{r4, pc}
    if (LPS22HB_PRESS_Disable(pObj) != LPS22HB_OK)
 80023ac:	f7ff ff1d 	bl	80021ea <LPS22HB_PRESS_Disable>
 80023b0:	b938      	cbnz	r0, 80023c2 <LPS22HB_DeInit+0x2a>
    if (LPS22HB_TEMP_Disable(pObj) != LPS22HB_OK)
 80023b2:	4620      	mov	r0, r4
 80023b4:	f7ff ffce 	bl	8002354 <LPS22HB_TEMP_Disable>
 80023b8:	2800      	cmp	r0, #0
 80023ba:	d0f3      	beq.n	80023a4 <LPS22HB_DeInit+0xc>
      return LPS22HB_ERROR;
 80023bc:	f04f 30ff 	mov.w	r0, #4294967295
}
 80023c0:	bd10      	pop	{r4, pc}
      return LPS22HB_ERROR;
 80023c2:	f04f 30ff 	mov.w	r0, #4294967295
 80023c6:	bd10      	pop	{r4, pc}

080023c8 <LPS22HB_PRESS_GetPressure>:
{
 80023c8:	b510      	push	{r4, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	460c      	mov	r4, r1
  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 80023ce:	2300      	movs	r3, #0
 80023d0:	9301      	str	r3, [sp, #4]
  if (lps22hb_pressure_raw_get(&(pObj->Ctx), data_raw_pressure.u8bit) != LPS22HB_OK)
 80023d2:	a901      	add	r1, sp, #4
 80023d4:	301c      	adds	r0, #28
 80023d6:	f000 f90c 	bl	80025f2 <lps22hb_pressure_raw_get>
 80023da:	b968      	cbnz	r0, 80023f8 <LPS22HB_PRESS_GetPressure+0x30>
 80023dc:	4603      	mov	r3, r0
  *Value = LPS22HB_FROM_LSB_TO_hPa((float)(data_raw_pressure.i32bit));
 80023de:	eddd 7a01 	vldr	s15, [sp, #4]
 80023e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023e6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002400 <LPS22HB_PRESS_GetPressure+0x38>
 80023ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023ee:	edc4 7a00 	vstr	s15, [r4]
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	b002      	add	sp, #8
 80023f6:	bd10      	pop	{r4, pc}
    return LPS22HB_ERROR;
 80023f8:	f04f 33ff 	mov.w	r3, #4294967295
 80023fc:	e7f9      	b.n	80023f2 <LPS22HB_PRESS_GetPressure+0x2a>
 80023fe:	bf00      	nop
 8002400:	39800000 	.word	0x39800000

08002404 <LPS22HB_TEMP_GetTemperature>:
{
 8002404:	b510      	push	{r4, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	460c      	mov	r4, r1
  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 800240a:	2300      	movs	r3, #0
 800240c:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (lps22hb_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != LPS22HB_OK)
 8002410:	a901      	add	r1, sp, #4
 8002412:	301c      	adds	r0, #28
 8002414:	f000 f8f4 	bl	8002600 <lps22hb_temperature_raw_get>
 8002418:	b978      	cbnz	r0, 800243a <LPS22HB_TEMP_GetTemperature+0x36>
 800241a:	4603      	mov	r3, r0
  *Value = LPS22HB_FROM_LSB_TO_degC((float)(data_raw_temperature.i16bit));
 800241c:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8002420:	ee07 2a90 	vmov	s15, r2
 8002424:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002428:	eddf 6a05 	vldr	s13, [pc, #20]	; 8002440 <LPS22HB_TEMP_GetTemperature+0x3c>
 800242c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002430:	ed84 7a00 	vstr	s14, [r4]
}
 8002434:	4618      	mov	r0, r3
 8002436:	b002      	add	sp, #8
 8002438:	bd10      	pop	{r4, pc}
    return LPS22HB_ERROR;
 800243a:	f04f 33ff 	mov.w	r3, #4294967295
 800243e:	e7f9      	b.n	8002434 <LPS22HB_TEMP_GetTemperature+0x30>
 8002440:	42c80000 	.word	0x42c80000

08002444 <LPS22HB_Write_Reg>:
{
 8002444:	b510      	push	{r4, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	ac02      	add	r4, sp, #8
 800244a:	f804 2d01 	strb.w	r2, [r4, #-1]!
  if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
 800244e:	2301      	movs	r3, #1
 8002450:	4622      	mov	r2, r4
 8002452:	301c      	adds	r0, #28
 8002454:	f000 f84b 	bl	80024ee <lps22hb_write_reg>
 8002458:	4603      	mov	r3, r0
 800245a:	b910      	cbnz	r0, 8002462 <LPS22HB_Write_Reg+0x1e>
}
 800245c:	4618      	mov	r0, r3
 800245e:	b002      	add	sp, #8
 8002460:	bd10      	pop	{r4, pc}
    return LPS22HB_ERROR;
 8002462:	f04f 33ff 	mov.w	r3, #4294967295
 8002466:	e7f9      	b.n	800245c <LPS22HB_Write_Reg+0x18>

08002468 <LPS22HB_RegisterBusIO>:
  if (pObj == NULL)
 8002468:	2800      	cmp	r0, #0
 800246a:	d02c      	beq.n	80024c6 <LPS22HB_RegisterBusIO+0x5e>
{
 800246c:	b510      	push	{r4, lr}
 800246e:	4604      	mov	r4, r0
    pObj->IO.Init      = pIO->Init;
 8002470:	680a      	ldr	r2, [r1, #0]
 8002472:	6002      	str	r2, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002474:	6848      	ldr	r0, [r1, #4]
 8002476:	6060      	str	r0, [r4, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002478:	6888      	ldr	r0, [r1, #8]
 800247a:	60a0      	str	r0, [r4, #8]
    pObj->IO.Address   = pIO->Address;
 800247c:	7b08      	ldrb	r0, [r1, #12]
 800247e:	7320      	strb	r0, [r4, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002480:	6908      	ldr	r0, [r1, #16]
 8002482:	6120      	str	r0, [r4, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002484:	6948      	ldr	r0, [r1, #20]
 8002486:	6160      	str	r0, [r4, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002488:	6989      	ldr	r1, [r1, #24]
 800248a:	61a1      	str	r1, [r4, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 800248c:	4913      	ldr	r1, [pc, #76]	; (80024dc <LPS22HB_RegisterBusIO+0x74>)
 800248e:	6221      	str	r1, [r4, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8002490:	4913      	ldr	r1, [pc, #76]	; (80024e0 <LPS22HB_RegisterBusIO+0x78>)
 8002492:	61e1      	str	r1, [r4, #28]
    pObj->Ctx.handle   = pObj;
 8002494:	6264      	str	r4, [r4, #36]	; 0x24
    if (pObj->IO.Init == NULL)
 8002496:	b1d2      	cbz	r2, 80024ce <LPS22HB_RegisterBusIO+0x66>
    else if (pObj->IO.Init() != LPS22HB_OK)
 8002498:	4790      	blx	r2
 800249a:	4603      	mov	r3, r0
 800249c:	b9d0      	cbnz	r0, 80024d4 <LPS22HB_RegisterBusIO+0x6c>
      if (pObj->IO.BusType == LPS22HB_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800249e:	68a2      	ldr	r2, [r4, #8]
 80024a0:	2a02      	cmp	r2, #2
 80024a2:	d001      	beq.n	80024a8 <LPS22HB_RegisterBusIO+0x40>
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	bd10      	pop	{r4, pc}
        if (pObj->is_initialized == 0U)
 80024a8:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80024ac:	2a00      	cmp	r2, #0
 80024ae:	d1f9      	bne.n	80024a4 <LPS22HB_RegisterBusIO+0x3c>
          if (LPS22HB_Write_Reg(pObj, LPS22HB_CTRL_REG1, data) != LPS22HB_OK)
 80024b0:	2201      	movs	r2, #1
 80024b2:	2110      	movs	r1, #16
 80024b4:	4620      	mov	r0, r4
 80024b6:	f7ff ffc5 	bl	8002444 <LPS22HB_Write_Reg>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2800      	cmp	r0, #0
 80024be:	d0f1      	beq.n	80024a4 <LPS22HB_RegisterBusIO+0x3c>
            ret = LPS22HB_ERROR;
 80024c0:	f04f 33ff 	mov.w	r3, #4294967295
  return ret;
 80024c4:	e7ee      	b.n	80024a4 <LPS22HB_RegisterBusIO+0x3c>
    ret = LPS22HB_ERROR;
 80024c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	4770      	bx	lr
      ret = LPS22HB_ERROR;
 80024ce:	f04f 33ff 	mov.w	r3, #4294967295
 80024d2:	e7e7      	b.n	80024a4 <LPS22HB_RegisterBusIO+0x3c>
      ret = LPS22HB_ERROR;
 80024d4:	f04f 33ff 	mov.w	r3, #4294967295
 80024d8:	e7e4      	b.n	80024a4 <LPS22HB_RegisterBusIO+0x3c>
 80024da:	bf00      	nop
 80024dc:	08002049 	.word	0x08002049
 80024e0:	08002093 	.word	0x08002093

080024e4 <lps22hb_read_reg>:
  * @param  uint16_t len: number of consecutive register to read
  *
  */
int32_t lps22hb_read_reg(lps22hb_ctx_t *ctx, uint8_t reg, uint8_t *data,
                         uint16_t len)
{
 80024e4:	b510      	push	{r4, lr}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80024e6:	6844      	ldr	r4, [r0, #4]
 80024e8:	6880      	ldr	r0, [r0, #8]
 80024ea:	47a0      	blx	r4
  return ret;
}
 80024ec:	bd10      	pop	{r4, pc}

080024ee <lps22hb_write_reg>:
  * @param  uint16_t len: number of consecutive register to write
  *
*/
int32_t lps22hb_write_reg(lps22hb_ctx_t *ctx, uint8_t reg, uint8_t *data,
                          uint16_t len)
{
 80024ee:	b510      	push	{r4, lr}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80024f0:	6804      	ldr	r4, [r0, #0]
 80024f2:	6880      	ldr	r0, [r0, #8]
 80024f4:	47a0      	blx	r4
  return ret;
}
 80024f6:	bd10      	pop	{r4, pc}

080024f8 <lps22hb_block_data_update_set>:
  * @param  lps22hb_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t val: change the values of bdu in reg CTRL_REG1
  *
  */
int32_t lps22hb_block_data_update_set(lps22hb_ctx_t *ctx, uint8_t val)
{
 80024f8:	b530      	push	{r4, r5, lr}
 80024fa:	b083      	sub	sp, #12
 80024fc:	4604      	mov	r4, r0
 80024fe:	460d      	mov	r5, r1
  lps22hb_reg_t reg;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 8002500:	2301      	movs	r3, #1
 8002502:	aa01      	add	r2, sp, #4
 8002504:	2110      	movs	r1, #16
 8002506:	f7ff ffed 	bl	80024e4 <lps22hb_read_reg>
  if (ret == 0)
 800250a:	4603      	mov	r3, r0
 800250c:	b110      	cbz	r0, 8002514 <lps22hb_block_data_update_set+0x1c>
  {
    reg.ctrl_reg1.bdu = val;
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
  }
  return ret;
}
 800250e:	4618      	mov	r0, r3
 8002510:	b003      	add	sp, #12
 8002512:	bd30      	pop	{r4, r5, pc}
    reg.ctrl_reg1.bdu = val;
 8002514:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002518:	f365 0341 	bfi	r3, r5, #1, #1
 800251c:	aa02      	add	r2, sp, #8
 800251e:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 8002522:	2301      	movs	r3, #1
 8002524:	2110      	movs	r1, #16
 8002526:	4620      	mov	r0, r4
 8002528:	f7ff ffe1 	bl	80024ee <lps22hb_write_reg>
 800252c:	4603      	mov	r3, r0
  return ret;
 800252e:	e7ee      	b.n	800250e <lps22hb_block_data_update_set+0x16>

08002530 <lps22hb_low_pass_filter_mode_set>:
  * @param  lps22hb_lpfp_t: change the values of lpfp in reg CTRL_REG1
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(lps22hb_ctx_t *ctx,
                                         lps22hb_lpfp_t val)
{
 8002530:	b530      	push	{r4, r5, lr}
 8002532:	b083      	sub	sp, #12
 8002534:	4604      	mov	r4, r0
 8002536:	460d      	mov	r5, r1
  lps22hb_reg_t reg;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 8002538:	2301      	movs	r3, #1
 800253a:	aa01      	add	r2, sp, #4
 800253c:	2110      	movs	r1, #16
 800253e:	f7ff ffd1 	bl	80024e4 <lps22hb_read_reg>
  if (ret == 0)
 8002542:	4603      	mov	r3, r0
 8002544:	b110      	cbz	r0, 800254c <lps22hb_low_pass_filter_mode_set+0x1c>
  {
    reg.ctrl_reg1.lpfp = (uint8_t) val;
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
  }
  return ret;
}
 8002546:	4618      	mov	r0, r3
 8002548:	b003      	add	sp, #12
 800254a:	bd30      	pop	{r4, r5, pc}
    reg.ctrl_reg1.lpfp = (uint8_t) val;
 800254c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002550:	f365 0383 	bfi	r3, r5, #2, #2
 8002554:	aa02      	add	r2, sp, #8
 8002556:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 800255a:	2301      	movs	r3, #1
 800255c:	2110      	movs	r1, #16
 800255e:	4620      	mov	r0, r4
 8002560:	f7ff ffc5 	bl	80024ee <lps22hb_write_reg>
 8002564:	4603      	mov	r3, r0
  return ret;
 8002566:	e7ee      	b.n	8002546 <lps22hb_low_pass_filter_mode_set+0x16>

08002568 <lps22hb_data_rate_set>:
  * @param  lps22hb_ctx_t *ctx: read / write interface definitions
  * @param  lps22hb_odr_t: change the values of odr in reg CTRL_REG1
  *
  */
int32_t lps22hb_data_rate_set(lps22hb_ctx_t *ctx, lps22hb_odr_t val)
{
 8002568:	b530      	push	{r4, r5, lr}
 800256a:	b083      	sub	sp, #12
 800256c:	4604      	mov	r4, r0
 800256e:	460d      	mov	r5, r1
  lps22hb_reg_t reg;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 8002570:	2301      	movs	r3, #1
 8002572:	aa01      	add	r2, sp, #4
 8002574:	2110      	movs	r1, #16
 8002576:	f7ff ffb5 	bl	80024e4 <lps22hb_read_reg>
  if (ret == 0)
 800257a:	4603      	mov	r3, r0
 800257c:	b110      	cbz	r0, 8002584 <lps22hb_data_rate_set+0x1c>
  {
    reg.ctrl_reg1.odr = (uint8_t)val;
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
  }
  return ret;
}
 800257e:	4618      	mov	r0, r3
 8002580:	b003      	add	sp, #12
 8002582:	bd30      	pop	{r4, r5, pc}
    reg.ctrl_reg1.odr = (uint8_t)val;
 8002584:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002588:	f365 1306 	bfi	r3, r5, #4, #3
 800258c:	aa02      	add	r2, sp, #8
 800258e:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 8002592:	2301      	movs	r3, #1
 8002594:	2110      	movs	r1, #16
 8002596:	4620      	mov	r0, r4
 8002598:	f7ff ffa9 	bl	80024ee <lps22hb_write_reg>
 800259c:	4603      	mov	r3, r0
  return ret;
 800259e:	e7ee      	b.n	800257e <lps22hb_data_rate_set+0x16>

080025a0 <lps22hb_data_rate_get>:
  * @param  lps22hb_ctx_t *ctx: read / write interface definitions
  * @param  lps22hb_odr_t: Get the values of odr in reg CTRL_REG1
  *
  */
int32_t lps22hb_data_rate_get(lps22hb_ctx_t *ctx, lps22hb_odr_t *val)
{
 80025a0:	b510      	push	{r4, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	460c      	mov	r4, r1
  lps22hb_reg_t reg;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 80025a6:	2301      	movs	r3, #1
 80025a8:	aa01      	add	r2, sp, #4
 80025aa:	2110      	movs	r1, #16
 80025ac:	f7ff ff9a 	bl	80024e4 <lps22hb_read_reg>

  switch (reg.ctrl_reg1.odr)
 80025b0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80025b4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80025b8:	2b05      	cmp	r3, #5
 80025ba:	d817      	bhi.n	80025ec <lps22hb_data_rate_get+0x4c>
 80025bc:	e8df f003 	tbb	[pc, r3]
 80025c0:	0d0a0703 	.word	0x0d0a0703
 80025c4:	1310      	.short	0x1310
  {
    case LPS22HB_POWER_DOWN:
      *val = LPS22HB_POWER_DOWN;
 80025c6:	2300      	movs	r3, #0
 80025c8:	7023      	strb	r3, [r4, #0]
    default:
      *val = LPS22HB_ODR_ND;
      break;
  }
  return ret;
}
 80025ca:	b002      	add	sp, #8
 80025cc:	bd10      	pop	{r4, pc}
      *val = LPS22HB_ODR_1_Hz;
 80025ce:	2301      	movs	r3, #1
 80025d0:	7023      	strb	r3, [r4, #0]
      break;
 80025d2:	e7fa      	b.n	80025ca <lps22hb_data_rate_get+0x2a>
      *val = LPS22HB_ODR_10_Hz;
 80025d4:	2302      	movs	r3, #2
 80025d6:	7023      	strb	r3, [r4, #0]
      break;
 80025d8:	e7f7      	b.n	80025ca <lps22hb_data_rate_get+0x2a>
      *val = LPS22HB_ODR_25_Hz;
 80025da:	2303      	movs	r3, #3
 80025dc:	7023      	strb	r3, [r4, #0]
      break;
 80025de:	e7f4      	b.n	80025ca <lps22hb_data_rate_get+0x2a>
      *val = LPS22HB_ODR_50_Hz;
 80025e0:	2304      	movs	r3, #4
 80025e2:	7023      	strb	r3, [r4, #0]
      break;
 80025e4:	e7f1      	b.n	80025ca <lps22hb_data_rate_get+0x2a>
      *val = LPS22HB_ODR_75_Hz;
 80025e6:	2305      	movs	r3, #5
 80025e8:	7023      	strb	r3, [r4, #0]
      break;
 80025ea:	e7ee      	b.n	80025ca <lps22hb_data_rate_get+0x2a>
      *val = LPS22HB_ODR_ND;
 80025ec:	2306      	movs	r3, #6
 80025ee:	7023      	strb	r3, [r4, #0]
  return ret;
 80025f0:	e7eb      	b.n	80025ca <lps22hb_data_rate_get+0x2a>

080025f2 <lps22hb_pressure_raw_get>:
  * @param  lps22hb_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t lps22hb_pressure_raw_get(lps22hb_ctx_t *ctx, uint8_t *buff)
{
 80025f2:	b508      	push	{r3, lr}
  return lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, buff, 3);
 80025f4:	2303      	movs	r3, #3
 80025f6:	460a      	mov	r2, r1
 80025f8:	2128      	movs	r1, #40	; 0x28
 80025fa:	f7ff ff73 	bl	80024e4 <lps22hb_read_reg>
}
 80025fe:	bd08      	pop	{r3, pc}

08002600 <lps22hb_temperature_raw_get>:
  * @param  lps22hb_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t lps22hb_temperature_raw_get(lps22hb_ctx_t *ctx, uint8_t *buff)
{
 8002600:	b508      	push	{r3, lr}
  return lps22hb_read_reg(ctx, LPS22HB_TEMP_OUT_L, (uint8_t *) buff, 2);
 8002602:	2302      	movs	r3, #2
 8002604:	460a      	mov	r2, r1
 8002606:	212b      	movs	r1, #43	; 0x2b
 8002608:	f7ff ff6c 	bl	80024e4 <lps22hb_read_reg>
}
 800260c:	bd08      	pop	{r3, pc}

0800260e <lps22hb_device_id_get>:
  * @param  lps22hb_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t lps22hb_device_id_get(lps22hb_ctx_t *ctx, uint8_t *buff)
{
 800260e:	b508      	push	{r3, lr}
  return lps22hb_read_reg(ctx, LPS22HB_WHO_AM_I, (uint8_t *) buff, 1);
 8002610:	2301      	movs	r3, #1
 8002612:	460a      	mov	r2, r1
 8002614:	210f      	movs	r1, #15
 8002616:	f7ff ff65 	bl	80024e4 <lps22hb_read_reg>
}
 800261a:	bd08      	pop	{r3, pc}

0800261c <lps22hb_low_power_set>:
  * @param  lps22hb_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t val: change the values of lc_en in reg RES_CONF
  *
  */
int32_t lps22hb_low_power_set(lps22hb_ctx_t *ctx, uint8_t val)
{
 800261c:	b530      	push	{r4, r5, lr}
 800261e:	b083      	sub	sp, #12
 8002620:	4604      	mov	r4, r0
 8002622:	460d      	mov	r5, r1
  lps22hb_reg_t reg;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, &(reg.byte), 1);
 8002624:	2301      	movs	r3, #1
 8002626:	aa01      	add	r2, sp, #4
 8002628:	211a      	movs	r1, #26
 800262a:	f7ff ff5b 	bl	80024e4 <lps22hb_read_reg>
  if (ret == 0)
 800262e:	4603      	mov	r3, r0
 8002630:	b110      	cbz	r0, 8002638 <lps22hb_low_power_set+0x1c>
  {
    reg.res_conf.lc_en = val;
    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, &(reg.byte), 1);
  }
  return ret;
}
 8002632:	4618      	mov	r0, r3
 8002634:	b003      	add	sp, #12
 8002636:	bd30      	pop	{r4, r5, pc}
    reg.res_conf.lc_en = val;
 8002638:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800263c:	f365 0300 	bfi	r3, r5, #0, #1
 8002640:	aa02      	add	r2, sp, #8
 8002642:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, &(reg.byte), 1);
 8002646:	2301      	movs	r3, #1
 8002648:	211a      	movs	r1, #26
 800264a:	4620      	mov	r0, r4
 800264c:	f7ff ff4f 	bl	80024ee <lps22hb_write_reg>
 8002650:	4603      	mov	r3, r0
  return ret;
 8002652:	e7ee      	b.n	8002632 <lps22hb_low_power_set+0x16>

08002654 <lps22hb_auto_add_inc_set>:
  * @param  lps22hb_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t val: change the values of if_add_inc in reg CTRL_REG2
  *
  */
int32_t lps22hb_auto_add_inc_set(lps22hb_ctx_t *ctx, uint8_t val)
{
 8002654:	b530      	push	{r4, r5, lr}
 8002656:	b083      	sub	sp, #12
 8002658:	4604      	mov	r4, r0
 800265a:	460d      	mov	r5, r1
  lps22hb_reg_t reg;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, &(reg.byte), 1);
 800265c:	2301      	movs	r3, #1
 800265e:	aa01      	add	r2, sp, #4
 8002660:	2111      	movs	r1, #17
 8002662:	f7ff ff3f 	bl	80024e4 <lps22hb_read_reg>
  if (ret == 0)
 8002666:	4603      	mov	r3, r0
 8002668:	b110      	cbz	r0, 8002670 <lps22hb_auto_add_inc_set+0x1c>
  {
    reg.ctrl_reg2.if_add_inc = val;
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, &(reg.byte), 1);
  }
  return ret;
}
 800266a:	4618      	mov	r0, r3
 800266c:	b003      	add	sp, #12
 800266e:	bd30      	pop	{r4, r5, pc}
    reg.ctrl_reg2.if_add_inc = val;
 8002670:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002674:	f365 1304 	bfi	r3, r5, #4, #1
 8002678:	aa02      	add	r2, sp, #8
 800267a:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, &(reg.byte), 1);
 800267e:	2301      	movs	r3, #1
 8002680:	2111      	movs	r1, #17
 8002682:	4620      	mov	r0, r4
 8002684:	f7ff ff33 	bl	80024ee <lps22hb_write_reg>
 8002688:	4603      	mov	r3, r0
  return ret;
 800268a:	e7ee      	b.n	800266a <lps22hb_auto_add_inc_set+0x16>

0800268c <LSM303AGR_ACC_GetCapabilities>:
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800268c:	2301      	movs	r3, #1
 800268e:	700b      	strb	r3, [r1, #0]
  Capabilities->Gyro         = 0;
 8002690:	2000      	movs	r0, #0
 8002692:	7048      	strb	r0, [r1, #1]
  Capabilities->Magneto      = 0;
 8002694:	7088      	strb	r0, [r1, #2]
  Capabilities->LowPower     = 0;
 8002696:	70c8      	strb	r0, [r1, #3]
  Capabilities->GyroMaxFS    = 0;
 8002698:	6048      	str	r0, [r1, #4]
  Capabilities->AccMaxFS     = 16;
 800269a:	2310      	movs	r3, #16
 800269c:	608b      	str	r3, [r1, #8]
  Capabilities->MagMaxFS     = 0;
 800269e:	60c8      	str	r0, [r1, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80026a0:	2300      	movs	r3, #0
 80026a2:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 80026a4:	4a01      	ldr	r2, [pc, #4]	; (80026ac <LSM303AGR_ACC_GetCapabilities+0x20>)
 80026a6:	614a      	str	r2, [r1, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80026a8:	618b      	str	r3, [r1, #24]
  return LSM303AGR_OK;
}
 80026aa:	4770      	bx	lr
 80026ac:	43c80000 	.word	0x43c80000

080026b0 <LSM303AGR_MAG_GetCapabilities>:
int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 80026b0:	2000      	movs	r0, #0
 80026b2:	7008      	strb	r0, [r1, #0]
  Capabilities->Gyro         = 0;
 80026b4:	7048      	strb	r0, [r1, #1]
  Capabilities->Magneto      = 1;
 80026b6:	2301      	movs	r3, #1
 80026b8:	708b      	strb	r3, [r1, #2]
  Capabilities->LowPower     = 0;
 80026ba:	70c8      	strb	r0, [r1, #3]
  Capabilities->GyroMaxFS    = 0;
 80026bc:	6048      	str	r0, [r1, #4]
  Capabilities->AccMaxFS     = 0;
 80026be:	6088      	str	r0, [r1, #8]
  Capabilities->MagMaxFS     = 50;
 80026c0:	2332      	movs	r3, #50	; 0x32
 80026c2:	60cb      	str	r3, [r1, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80026c4:	2300      	movs	r3, #0
 80026c6:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 80026c8:	614b      	str	r3, [r1, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 80026ca:	4b01      	ldr	r3, [pc, #4]	; (80026d0 <LSM303AGR_MAG_GetCapabilities+0x20>)
 80026cc:	618b      	str	r3, [r1, #24]
  return LSM303AGR_OK;
}
 80026ce:	4770      	bx	lr
 80026d0:	42c80000 	.word	0x42c80000

080026d4 <LSM303AGR_MAG_GetSensitivity>:
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 80026d4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80026d8:	600b      	str	r3, [r1, #0]

  return LSM303AGR_OK;
}
 80026da:	2000      	movs	r0, #0
 80026dc:	4770      	bx	lr

080026de <LSM303AGR_MAG_GetFullScale>:
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
  *FullScale = 50;
 80026de:	2332      	movs	r3, #50	; 0x32
 80026e0:	600b      	str	r3, [r1, #0]

  return LSM303AGR_OK;
}
 80026e2:	2000      	movs	r0, #0
 80026e4:	4770      	bx	lr

080026e6 <LSM303AGR_MAG_SetFullScale>:
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
  return LSM303AGR_OK;
}
 80026e6:	2000      	movs	r0, #0
 80026e8:	4770      	bx	lr
	...

080026ec <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>:
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 80026ec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80026f0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80026f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f8:	d926      	bls.n	8002748 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x5c>
 80026fa:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80026fe:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002706:	d921      	bls.n	800274c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x60>
 8002708:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 800270c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002714:	d91f      	bls.n	8002756 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x6a>
 8002716:	eddf 7a13 	vldr	s15, [pc, #76]	; 8002764 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x78>
 800271a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800271e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002722:	d91a      	bls.n	800275a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x6e>
 8002724:	eddf 7a10 	vldr	s15, [pc, #64]	; 8002768 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x7c>
 8002728:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800272c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002730:	d915      	bls.n	800275e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x72>
 8002732:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800276c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x80>
 8002736:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800273a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800273e:	d901      	bls.n	8002744 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x58>
 8002740:	2307      	movs	r3, #7
 8002742:	e004      	b.n	800274e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x62>
 8002744:	2306      	movs	r3, #6
 8002746:	e002      	b.n	800274e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x62>
 8002748:	2301      	movs	r3, #1
 800274a:	e000      	b.n	800274e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x62>
 800274c:	2302      	movs	r3, #2
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 800274e:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
                  : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
                  : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
                  :                    LSM303AGR_XL_ODR_400Hz;

  return LSM303AGR_OK;
}
 8002752:	2000      	movs	r0, #0
 8002754:	4770      	bx	lr
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8002756:	2303      	movs	r3, #3
 8002758:	e7f9      	b.n	800274e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x62>
 800275a:	2304      	movs	r3, #4
 800275c:	e7f7      	b.n	800274e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x62>
 800275e:	2305      	movs	r3, #5
 8002760:	e7f5      	b.n	800274e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x62>
 8002762:	bf00      	nop
 8002764:	42480000 	.word	0x42480000
 8002768:	42c80000 	.word	0x42c80000
 800276c:	43480000 	.word	0x43480000

08002770 <ReadAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002770:	b510      	push	{r4, lr}
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8002772:	6884      	ldr	r4, [r0, #8]
 8002774:	b12c      	cbz	r4, 8002782 <ReadAccRegWrap+0x12>
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002776:	6944      	ldr	r4, [r0, #20]
 8002778:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800277c:	7b00      	ldrb	r0, [r0, #12]
 800277e:	47a0      	blx	r4
  }
}
 8002780:	bd10      	pop	{r4, pc}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002782:	6944      	ldr	r4, [r0, #20]
 8002784:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8002788:	7b00      	ldrb	r0, [r0, #12]
 800278a:	47a0      	blx	r4
 800278c:	bd10      	pop	{r4, pc}

0800278e <WriteAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800278e:	b510      	push	{r4, lr}
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8002790:	6884      	ldr	r4, [r0, #8]
 8002792:	b12c      	cbz	r4, 80027a0 <WriteAccRegWrap+0x12>
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002794:	6904      	ldr	r4, [r0, #16]
 8002796:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800279a:	7b00      	ldrb	r0, [r0, #12]
 800279c:	47a0      	blx	r4
  }
}
 800279e:	bd10      	pop	{r4, pc}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80027a0:	6904      	ldr	r4, [r0, #16]
 80027a2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80027a6:	7b00      	ldrb	r0, [r0, #12]
 80027a8:	47a0      	blx	r4
 80027aa:	bd10      	pop	{r4, pc}

080027ac <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80027ac:	b510      	push	{r4, lr}
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80027ae:	6884      	ldr	r4, [r0, #8]
 80027b0:	b12c      	cbz	r4, 80027be <ReadMagRegWrap+0x12>
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80027b2:	6944      	ldr	r4, [r0, #20]
 80027b4:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80027b8:	7b00      	ldrb	r0, [r0, #12]
 80027ba:	47a0      	blx	r4
  }
}
 80027bc:	bd10      	pop	{r4, pc}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80027be:	6944      	ldr	r4, [r0, #20]
 80027c0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80027c4:	7b00      	ldrb	r0, [r0, #12]
 80027c6:	47a0      	blx	r4
 80027c8:	bd10      	pop	{r4, pc}

080027ca <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80027ca:	b510      	push	{r4, lr}
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80027cc:	6884      	ldr	r4, [r0, #8]
 80027ce:	b12c      	cbz	r4, 80027dc <WriteMagRegWrap+0x12>
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80027d0:	6904      	ldr	r4, [r0, #16]
 80027d2:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80027d6:	7b00      	ldrb	r0, [r0, #12]
 80027d8:	47a0      	blx	r4
  }
}
 80027da:	bd10      	pop	{r4, pc}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80027dc:	6904      	ldr	r4, [r0, #16]
 80027de:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80027e2:	7b00      	ldrb	r0, [r0, #12]
 80027e4:	47a0      	blx	r4
 80027e6:	bd10      	pop	{r4, pc}

080027e8 <LSM303AGR_ACC_Enable>:
  if (pObj->acc_is_enabled == 1U)
 80027e8:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d00d      	beq.n	800280c <LSM303AGR_ACC_Enable+0x24>
{
 80027f0:	b510      	push	{r4, lr}
 80027f2:	4604      	mov	r4, r0
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 80027f4:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
 80027f8:	301c      	adds	r0, #28
 80027fa:	f000 fca2 	bl	8003142 <lsm303agr_xl_data_rate_set>
 80027fe:	4603      	mov	r3, r0
 8002800:	b938      	cbnz	r0, 8002812 <LSM303AGR_ACC_Enable+0x2a>
  pObj->acc_is_enabled = 1;
 8002802:	2201      	movs	r2, #1
 8002804:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
}
 8002808:	4618      	mov	r0, r3
 800280a:	bd10      	pop	{r4, pc}
    return LSM303AGR_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	4770      	bx	lr
    return LSM303AGR_ERROR;
 8002812:	f04f 33ff 	mov.w	r3, #4294967295
 8002816:	e7f7      	b.n	8002808 <LSM303AGR_ACC_Enable+0x20>

08002818 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>:
{
 8002818:	b508      	push	{r3, lr}
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 800281a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800281e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002826:	d924      	bls.n	8002872 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x5a>
 8002828:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800282c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002834:	d91f      	bls.n	8002876 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x5e>
 8002836:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 800283a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800283e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002842:	d920      	bls.n	8002886 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x6e>
 8002844:	eddf 7a15 	vldr	s15, [pc, #84]	; 800289c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x84>
 8002848:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800284c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002850:	d91b      	bls.n	800288a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x72>
 8002852:	eddf 7a13 	vldr	s15, [pc, #76]	; 80028a0 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x88>
 8002856:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800285a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800285e:	d916      	bls.n	800288e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x76>
 8002860:	eddf 7a10 	vldr	s15, [pc, #64]	; 80028a4 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x8c>
 8002864:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800286c:	d811      	bhi.n	8002892 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800286e:	2106      	movs	r1, #6
 8002870:	e002      	b.n	8002878 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x60>
 8002872:	2101      	movs	r1, #1
 8002874:	e000      	b.n	8002878 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x60>
 8002876:	2102      	movs	r1, #2
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8002878:	301c      	adds	r0, #28
 800287a:	f000 fc62 	bl	8003142 <lsm303agr_xl_data_rate_set>
 800287e:	4603      	mov	r3, r0
 8002880:	b948      	cbnz	r0, 8002896 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x7e>
}
 8002882:	4618      	mov	r0, r3
 8002884:	bd08      	pop	{r3, pc}
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8002886:	2103      	movs	r1, #3
 8002888:	e7f6      	b.n	8002878 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x60>
 800288a:	2104      	movs	r1, #4
 800288c:	e7f4      	b.n	8002878 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x60>
 800288e:	2105      	movs	r1, #5
 8002890:	e7f2      	b.n	8002878 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x60>
 8002892:	2107      	movs	r1, #7
 8002894:	e7f0      	b.n	8002878 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x60>
    return LSM303AGR_ERROR;
 8002896:	f04f 33ff 	mov.w	r3, #4294967295
 800289a:	e7f2      	b.n	8002882 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x6a>
 800289c:	42480000 	.word	0x42480000
 80028a0:	42c80000 	.word	0x42c80000
 80028a4:	43480000 	.word	0x43480000

080028a8 <LSM303AGR_ACC_SetOutputDataRate>:
{
 80028a8:	b508      	push	{r3, lr}
  if (pObj->acc_is_enabled == 1U)
 80028aa:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d002      	beq.n	80028b8 <LSM303AGR_ACC_SetOutputDataRate+0x10>
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80028b2:	f7ff ff1b 	bl	80026ec <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>
}
 80028b6:	bd08      	pop	{r3, pc}
    return LSM303AGR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 80028b8:	f7ff ffae 	bl	8002818 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>
 80028bc:	bd08      	pop	{r3, pc}

080028be <LSM303AGR_ACC_Init>:
{
 80028be:	b538      	push	{r3, r4, r5, lr}
 80028c0:	4605      	mov	r5, r0
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 80028c2:	f100 041c 	add.w	r4, r0, #28
 80028c6:	2101      	movs	r1, #1
 80028c8:	4620      	mov	r0, r4
 80028ca:	f000 fc86 	bl	80031da <lsm303agr_xl_block_data_update_set>
 80028ce:	b9b8      	cbnz	r0, 8002900 <LSM303AGR_ACC_Init+0x42>
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 80028d0:	2100      	movs	r1, #0
 80028d2:	4620      	mov	r0, r4
 80028d4:	f000 fd1f 	bl	8003316 <lsm303agr_xl_fifo_mode_set>
 80028d8:	b9a8      	cbnz	r0, 8002906 <LSM303AGR_ACC_Init+0x48>
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 80028da:	2305      	movs	r3, #5
 80028dc:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 80028e0:	2100      	movs	r1, #0
 80028e2:	4620      	mov	r0, r4
 80028e4:	f000 fc2d 	bl	8003142 <lsm303agr_xl_data_rate_set>
 80028e8:	b980      	cbnz	r0, 800290c <LSM303AGR_ACC_Init+0x4e>
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 80028ea:	2100      	movs	r1, #0
 80028ec:	4620      	mov	r0, r4
 80028ee:	f000 fc4e 	bl	800318e <lsm303agr_xl_full_scale_set>
 80028f2:	4603      	mov	r3, r0
 80028f4:	b968      	cbnz	r0, 8002912 <LSM303AGR_ACC_Init+0x54>
  pObj->is_initialized = 1;
 80028f6:	2201      	movs	r2, #1
 80028f8:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	bd38      	pop	{r3, r4, r5, pc}
    return LSM303AGR_ERROR;
 8002900:	f04f 33ff 	mov.w	r3, #4294967295
 8002904:	e7fa      	b.n	80028fc <LSM303AGR_ACC_Init+0x3e>
    return LSM303AGR_ERROR;
 8002906:	f04f 33ff 	mov.w	r3, #4294967295
 800290a:	e7f7      	b.n	80028fc <LSM303AGR_ACC_Init+0x3e>
    return LSM303AGR_ERROR;
 800290c:	f04f 33ff 	mov.w	r3, #4294967295
 8002910:	e7f4      	b.n	80028fc <LSM303AGR_ACC_Init+0x3e>
    return LSM303AGR_ERROR;
 8002912:	f04f 33ff 	mov.w	r3, #4294967295
 8002916:	e7f1      	b.n	80028fc <LSM303AGR_ACC_Init+0x3e>

08002918 <LSM303AGR_ACC_SetFullScale>:
{
 8002918:	b508      	push	{r3, lr}
           : (FullScale <= 4) ? LSM303AGR_4g
 800291a:	2902      	cmp	r1, #2
 800291c:	dd05      	ble.n	800292a <LSM303AGR_ACC_SetFullScale+0x12>
 800291e:	2904      	cmp	r1, #4
 8002920:	dd0b      	ble.n	800293a <LSM303AGR_ACC_SetFullScale+0x22>
 8002922:	2908      	cmp	r1, #8
 8002924:	dc0b      	bgt.n	800293e <LSM303AGR_ACC_SetFullScale+0x26>
 8002926:	2102      	movs	r1, #2
 8002928:	e000      	b.n	800292c <LSM303AGR_ACC_SetFullScale+0x14>
 800292a:	2100      	movs	r1, #0
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 800292c:	301c      	adds	r0, #28
 800292e:	f000 fc2e 	bl	800318e <lsm303agr_xl_full_scale_set>
 8002932:	4603      	mov	r3, r0
 8002934:	b928      	cbnz	r0, 8002942 <LSM303AGR_ACC_SetFullScale+0x2a>
}
 8002936:	4618      	mov	r0, r3
 8002938:	bd08      	pop	{r3, pc}
           : (FullScale <= 4) ? LSM303AGR_4g
 800293a:	2101      	movs	r1, #1
 800293c:	e7f6      	b.n	800292c <LSM303AGR_ACC_SetFullScale+0x14>
 800293e:	2103      	movs	r1, #3
 8002940:	e7f4      	b.n	800292c <LSM303AGR_ACC_SetFullScale+0x14>
    return LSM303AGR_ERROR;
 8002942:	f04f 33ff 	mov.w	r3, #4294967295
 8002946:	e7f6      	b.n	8002936 <LSM303AGR_ACC_SetFullScale+0x1e>

08002948 <LSM303AGR_ACC_ReadID>:
{
 8002948:	b508      	push	{r3, lr}
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 800294a:	301c      	adds	r0, #28
 800294c:	f000 fcbe 	bl	80032cc <lsm303agr_xl_device_id_get>
 8002950:	4603      	mov	r3, r0
 8002952:	b908      	cbnz	r0, 8002958 <LSM303AGR_ACC_ReadID+0x10>
}
 8002954:	4618      	mov	r0, r3
 8002956:	bd08      	pop	{r3, pc}
    return LSM303AGR_ERROR;
 8002958:	f04f 33ff 	mov.w	r3, #4294967295
 800295c:	e7fa      	b.n	8002954 <LSM303AGR_ACC_ReadID+0xc>

0800295e <LSM303AGR_ACC_Disable>:
{
 800295e:	b538      	push	{r3, r4, r5, lr}
  if (pObj->acc_is_enabled == 0U)
 8002960:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8002964:	b913      	cbnz	r3, 800296c <LSM303AGR_ACC_Disable+0xe>
    return LSM303AGR_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	bd38      	pop	{r3, r4, r5, pc}
 800296c:	4604      	mov	r4, r0
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 800296e:	f100 051c 	add.w	r5, r0, #28
 8002972:	f100 012a 	add.w	r1, r0, #42	; 0x2a
 8002976:	4628      	mov	r0, r5
 8002978:	f000 fbfa 	bl	8003170 <lsm303agr_xl_data_rate_get>
 800297c:	b948      	cbnz	r0, 8002992 <LSM303AGR_ACC_Disable+0x34>
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 800297e:	2100      	movs	r1, #0
 8002980:	4628      	mov	r0, r5
 8002982:	f000 fbde 	bl	8003142 <lsm303agr_xl_data_rate_set>
 8002986:	4603      	mov	r3, r0
 8002988:	b930      	cbnz	r0, 8002998 <LSM303AGR_ACC_Disable+0x3a>
  pObj->acc_is_enabled = 0;
 800298a:	2200      	movs	r2, #0
 800298c:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  return LSM303AGR_OK;
 8002990:	e7ea      	b.n	8002968 <LSM303AGR_ACC_Disable+0xa>
    return LSM303AGR_ERROR;
 8002992:	f04f 33ff 	mov.w	r3, #4294967295
 8002996:	e7e7      	b.n	8002968 <LSM303AGR_ACC_Disable+0xa>
    return LSM303AGR_ERROR;
 8002998:	f04f 33ff 	mov.w	r3, #4294967295
 800299c:	e7e4      	b.n	8002968 <LSM303AGR_ACC_Disable+0xa>

0800299e <LSM303AGR_ACC_DeInit>:
{
 800299e:	b510      	push	{r4, lr}
 80029a0:	4604      	mov	r4, r0
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 80029a2:	f7ff ffdc 	bl	800295e <LSM303AGR_ACC_Disable>
 80029a6:	b938      	cbnz	r0, 80029b8 <LSM303AGR_ACC_DeInit+0x1a>
 80029a8:	4602      	mov	r2, r0
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 80029aa:	2300      	movs	r3, #0
 80029ac:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  pObj->is_initialized = 0;
 80029b0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
 80029b4:	4610      	mov	r0, r2
 80029b6:	bd10      	pop	{r4, pc}
    return LSM303AGR_ERROR;
 80029b8:	f04f 32ff 	mov.w	r2, #4294967295
 80029bc:	e7fa      	b.n	80029b4 <LSM303AGR_ACC_DeInit+0x16>
	...

080029c0 <LSM303AGR_ACC_GetOutputDataRate>:
{
 80029c0:	b530      	push	{r4, r5, lr}
 80029c2:	b083      	sub	sp, #12
 80029c4:	460d      	mov	r5, r1
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 80029c6:	f100 041c 	add.w	r4, r0, #28
 80029ca:	f10d 0107 	add.w	r1, sp, #7
 80029ce:	4620      	mov	r0, r4
 80029d0:	f000 fb94 	bl	80030fc <lsm303agr_xl_operating_mode_get>
 80029d4:	2800      	cmp	r0, #0
 80029d6:	d15c      	bne.n	8002a92 <LSM303AGR_ACC_GetOutputDataRate+0xd2>
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 80029d8:	f10d 0106 	add.w	r1, sp, #6
 80029dc:	4620      	mov	r0, r4
 80029de:	f000 fbc7 	bl	8003170 <lsm303agr_xl_data_rate_get>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2800      	cmp	r0, #0
 80029e6:	d159      	bne.n	8002a9c <LSM303AGR_ACC_GetOutputDataRate+0xdc>
  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 80029e8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80029ec:	2a02      	cmp	r2, #2
 80029ee:	d00a      	beq.n	8002a06 <LSM303AGR_ACC_GetOutputDataRate+0x46>
    switch (odr_low_level)
 80029f0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80029f4:	2a09      	cmp	r2, #9
 80029f6:	d857      	bhi.n	8002aa8 <LSM303AGR_ACC_GetOutputDataRate+0xe8>
 80029f8:	e8df f002 	tbb	[pc, r2]
 80029fc:	3936322f 	.word	0x3936322f
 8002a00:	45423f3c 	.word	0x45423f3c
 8002a04:	4856      	.short	0x4856
    switch (odr_low_level)
 8002a06:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8002a0a:	2a09      	cmp	r2, #9
 8002a0c:	d849      	bhi.n	8002aa2 <LSM303AGR_ACC_GetOutputDataRate+0xe2>
 8002a0e:	e8df f002 	tbb	[pc, r2]
 8002a12:	0805      	.short	0x0805
 8002a14:	15120f0c 	.word	0x15120f0c
 8002a18:	211e1b18 	.word	0x211e1b18
        *Odr = 0.0f;
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	602a      	str	r2, [r5, #0]
        break;
 8002a20:	e039      	b.n	8002a96 <LSM303AGR_ACC_GetOutputDataRate+0xd6>
        *Odr = 1.0f;
 8002a22:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002a26:	602a      	str	r2, [r5, #0]
        break;
 8002a28:	e035      	b.n	8002a96 <LSM303AGR_ACC_GetOutputDataRate+0xd6>
        *Odr = 10.0f;
 8002a2a:	4a21      	ldr	r2, [pc, #132]	; (8002ab0 <LSM303AGR_ACC_GetOutputDataRate+0xf0>)
 8002a2c:	602a      	str	r2, [r5, #0]
        break;
 8002a2e:	e032      	b.n	8002a96 <LSM303AGR_ACC_GetOutputDataRate+0xd6>
        *Odr = 25.0f;
 8002a30:	4a20      	ldr	r2, [pc, #128]	; (8002ab4 <LSM303AGR_ACC_GetOutputDataRate+0xf4>)
 8002a32:	602a      	str	r2, [r5, #0]
        break;
 8002a34:	e02f      	b.n	8002a96 <LSM303AGR_ACC_GetOutputDataRate+0xd6>
        *Odr = 50.0f;
 8002a36:	4a20      	ldr	r2, [pc, #128]	; (8002ab8 <LSM303AGR_ACC_GetOutputDataRate+0xf8>)
 8002a38:	602a      	str	r2, [r5, #0]
        break;
 8002a3a:	e02c      	b.n	8002a96 <LSM303AGR_ACC_GetOutputDataRate+0xd6>
        *Odr = 100.0f;
 8002a3c:	4a1f      	ldr	r2, [pc, #124]	; (8002abc <LSM303AGR_ACC_GetOutputDataRate+0xfc>)
 8002a3e:	602a      	str	r2, [r5, #0]
        break;
 8002a40:	e029      	b.n	8002a96 <LSM303AGR_ACC_GetOutputDataRate+0xd6>
        *Odr = 200.0f;
 8002a42:	4a1f      	ldr	r2, [pc, #124]	; (8002ac0 <LSM303AGR_ACC_GetOutputDataRate+0x100>)
 8002a44:	602a      	str	r2, [r5, #0]
        break;
 8002a46:	e026      	b.n	8002a96 <LSM303AGR_ACC_GetOutputDataRate+0xd6>
        *Odr = 400.0f;
 8002a48:	4a1e      	ldr	r2, [pc, #120]	; (8002ac4 <LSM303AGR_ACC_GetOutputDataRate+0x104>)
 8002a4a:	602a      	str	r2, [r5, #0]
        break;
 8002a4c:	e023      	b.n	8002a96 <LSM303AGR_ACC_GetOutputDataRate+0xd6>
        *Odr = 1620.0f;
 8002a4e:	4a1e      	ldr	r2, [pc, #120]	; (8002ac8 <LSM303AGR_ACC_GetOutputDataRate+0x108>)
 8002a50:	602a      	str	r2, [r5, #0]
        break;
 8002a52:	e020      	b.n	8002a96 <LSM303AGR_ACC_GetOutputDataRate+0xd6>
        *Odr = 5376.0f;
 8002a54:	4a1d      	ldr	r2, [pc, #116]	; (8002acc <LSM303AGR_ACC_GetOutputDataRate+0x10c>)
 8002a56:	602a      	str	r2, [r5, #0]
        break;
 8002a58:	e01d      	b.n	8002a96 <LSM303AGR_ACC_GetOutputDataRate+0xd6>
        *Odr = 0.0f;
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	602a      	str	r2, [r5, #0]
        break;
 8002a5e:	e01a      	b.n	8002a96 <LSM303AGR_ACC_GetOutputDataRate+0xd6>
        *Odr = 1.0f;
 8002a60:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002a64:	602a      	str	r2, [r5, #0]
        break;
 8002a66:	e016      	b.n	8002a96 <LSM303AGR_ACC_GetOutputDataRate+0xd6>
        *Odr = 10.0f;
 8002a68:	4a11      	ldr	r2, [pc, #68]	; (8002ab0 <LSM303AGR_ACC_GetOutputDataRate+0xf0>)
 8002a6a:	602a      	str	r2, [r5, #0]
        break;
 8002a6c:	e013      	b.n	8002a96 <LSM303AGR_ACC_GetOutputDataRate+0xd6>
        *Odr = 25.0f;
 8002a6e:	4a11      	ldr	r2, [pc, #68]	; (8002ab4 <LSM303AGR_ACC_GetOutputDataRate+0xf4>)
 8002a70:	602a      	str	r2, [r5, #0]
        break;
 8002a72:	e010      	b.n	8002a96 <LSM303AGR_ACC_GetOutputDataRate+0xd6>
        *Odr = 50.0f;
 8002a74:	4a10      	ldr	r2, [pc, #64]	; (8002ab8 <LSM303AGR_ACC_GetOutputDataRate+0xf8>)
 8002a76:	602a      	str	r2, [r5, #0]
        break;
 8002a78:	e00d      	b.n	8002a96 <LSM303AGR_ACC_GetOutputDataRate+0xd6>
        *Odr = 100.0f;
 8002a7a:	4a10      	ldr	r2, [pc, #64]	; (8002abc <LSM303AGR_ACC_GetOutputDataRate+0xfc>)
 8002a7c:	602a      	str	r2, [r5, #0]
        break;
 8002a7e:	e00a      	b.n	8002a96 <LSM303AGR_ACC_GetOutputDataRate+0xd6>
        *Odr = 200.0f;
 8002a80:	4a0f      	ldr	r2, [pc, #60]	; (8002ac0 <LSM303AGR_ACC_GetOutputDataRate+0x100>)
 8002a82:	602a      	str	r2, [r5, #0]
        break;
 8002a84:	e007      	b.n	8002a96 <LSM303AGR_ACC_GetOutputDataRate+0xd6>
        *Odr = 400.0f;
 8002a86:	4a0f      	ldr	r2, [pc, #60]	; (8002ac4 <LSM303AGR_ACC_GetOutputDataRate+0x104>)
 8002a88:	602a      	str	r2, [r5, #0]
        break;
 8002a8a:	e004      	b.n	8002a96 <LSM303AGR_ACC_GetOutputDataRate+0xd6>
        *Odr = 1344.0f;
 8002a8c:	4a10      	ldr	r2, [pc, #64]	; (8002ad0 <LSM303AGR_ACC_GetOutputDataRate+0x110>)
 8002a8e:	602a      	str	r2, [r5, #0]
        break;
 8002a90:	e001      	b.n	8002a96 <LSM303AGR_ACC_GetOutputDataRate+0xd6>
    return LSM303AGR_ERROR;
 8002a92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	b003      	add	sp, #12
 8002a9a:	bd30      	pop	{r4, r5, pc}
    return LSM303AGR_ERROR;
 8002a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa0:	e7f9      	b.n	8002a96 <LSM303AGR_ACC_GetOutputDataRate+0xd6>
        ret = LSM303AGR_ERROR;
 8002aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa6:	e7f6      	b.n	8002a96 <LSM303AGR_ACC_GetOutputDataRate+0xd6>
        ret = LSM303AGR_ERROR;
 8002aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8002aac:	e7f3      	b.n	8002a96 <LSM303AGR_ACC_GetOutputDataRate+0xd6>
 8002aae:	bf00      	nop
 8002ab0:	41200000 	.word	0x41200000
 8002ab4:	41c80000 	.word	0x41c80000
 8002ab8:	42480000 	.word	0x42480000
 8002abc:	42c80000 	.word	0x42c80000
 8002ac0:	43480000 	.word	0x43480000
 8002ac4:	43c80000 	.word	0x43c80000
 8002ac8:	44ca8000 	.word	0x44ca8000
 8002acc:	45a80000 	.word	0x45a80000
 8002ad0:	44a80000 	.word	0x44a80000

08002ad4 <LSM303AGR_ACC_GetSensitivityHR>:
{
 8002ad4:	b510      	push	{r4, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	460c      	mov	r4, r1
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8002ada:	f10d 0107 	add.w	r1, sp, #7
 8002ade:	301c      	adds	r0, #28
 8002ae0:	f000 fb6c 	bl	80031bc <lsm303agr_xl_full_scale_get>
 8002ae4:	b9b0      	cbnz	r0, 8002b14 <LSM303AGR_ACC_GetSensitivityHR+0x40>
 8002ae6:	4602      	mov	r2, r0
  switch (fullscale)
 8002ae8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002aec:	2b03      	cmp	r3, #3
 8002aee:	d814      	bhi.n	8002b1a <LSM303AGR_ACC_GetSensitivityHR+0x46>
 8002af0:	e8df f003 	tbb	[pc, r3]
 8002af4:	0d0a0702 	.word	0x0d0a0702
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 8002af8:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <LSM303AGR_ACC_GetSensitivityHR+0x4c>)
 8002afa:	6023      	str	r3, [r4, #0]
}
 8002afc:	4610      	mov	r0, r2
 8002afe:	b002      	add	sp, #8
 8002b00:	bd10      	pop	{r4, pc}
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 8002b02:	4b08      	ldr	r3, [pc, #32]	; (8002b24 <LSM303AGR_ACC_GetSensitivityHR+0x50>)
 8002b04:	6023      	str	r3, [r4, #0]
      break;
 8002b06:	e7f9      	b.n	8002afc <LSM303AGR_ACC_GetSensitivityHR+0x28>
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 8002b08:	4b07      	ldr	r3, [pc, #28]	; (8002b28 <LSM303AGR_ACC_GetSensitivityHR+0x54>)
 8002b0a:	6023      	str	r3, [r4, #0]
      break;
 8002b0c:	e7f6      	b.n	8002afc <LSM303AGR_ACC_GetSensitivityHR+0x28>
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 8002b0e:	4b07      	ldr	r3, [pc, #28]	; (8002b2c <LSM303AGR_ACC_GetSensitivityHR+0x58>)
 8002b10:	6023      	str	r3, [r4, #0]
      break;
 8002b12:	e7f3      	b.n	8002afc <LSM303AGR_ACC_GetSensitivityHR+0x28>
    return LSM303AGR_ERROR;
 8002b14:	f04f 32ff 	mov.w	r2, #4294967295
 8002b18:	e7f0      	b.n	8002afc <LSM303AGR_ACC_GetSensitivityHR+0x28>
      ret = LSM303AGR_ERROR;
 8002b1a:	f04f 32ff 	mov.w	r2, #4294967295
 8002b1e:	e7ed      	b.n	8002afc <LSM303AGR_ACC_GetSensitivityHR+0x28>
 8002b20:	3f7ae148 	.word	0x3f7ae148
 8002b24:	3ff9999a 	.word	0x3ff9999a
 8002b28:	4079999a 	.word	0x4079999a
 8002b2c:	413b851f 	.word	0x413b851f

08002b30 <LSM303AGR_ACC_GetSensitivityNM>:
{
 8002b30:	b510      	push	{r4, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	460c      	mov	r4, r1
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8002b36:	f10d 0107 	add.w	r1, sp, #7
 8002b3a:	301c      	adds	r0, #28
 8002b3c:	f000 fb3e 	bl	80031bc <lsm303agr_xl_full_scale_get>
 8002b40:	b9b0      	cbnz	r0, 8002b70 <LSM303AGR_ACC_GetSensitivityNM+0x40>
 8002b42:	4602      	mov	r2, r0
  switch (fullscale)
 8002b44:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002b48:	2b03      	cmp	r3, #3
 8002b4a:	d814      	bhi.n	8002b76 <LSM303AGR_ACC_GetSensitivityNM+0x46>
 8002b4c:	e8df f003 	tbb	[pc, r3]
 8002b50:	0d0a0702 	.word	0x0d0a0702
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 8002b54:	4b09      	ldr	r3, [pc, #36]	; (8002b7c <LSM303AGR_ACC_GetSensitivityNM+0x4c>)
 8002b56:	6023      	str	r3, [r4, #0]
}
 8002b58:	4610      	mov	r0, r2
 8002b5a:	b002      	add	sp, #8
 8002b5c:	bd10      	pop	{r4, pc}
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 8002b5e:	4b08      	ldr	r3, [pc, #32]	; (8002b80 <LSM303AGR_ACC_GetSensitivityNM+0x50>)
 8002b60:	6023      	str	r3, [r4, #0]
      break;
 8002b62:	e7f9      	b.n	8002b58 <LSM303AGR_ACC_GetSensitivityNM+0x28>
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 8002b64:	4b07      	ldr	r3, [pc, #28]	; (8002b84 <LSM303AGR_ACC_GetSensitivityNM+0x54>)
 8002b66:	6023      	str	r3, [r4, #0]
      break;
 8002b68:	e7f6      	b.n	8002b58 <LSM303AGR_ACC_GetSensitivityNM+0x28>
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 8002b6a:	4b07      	ldr	r3, [pc, #28]	; (8002b88 <LSM303AGR_ACC_GetSensitivityNM+0x58>)
 8002b6c:	6023      	str	r3, [r4, #0]
      break;
 8002b6e:	e7f3      	b.n	8002b58 <LSM303AGR_ACC_GetSensitivityNM+0x28>
    return LSM303AGR_ERROR;
 8002b70:	f04f 32ff 	mov.w	r2, #4294967295
 8002b74:	e7f0      	b.n	8002b58 <LSM303AGR_ACC_GetSensitivityNM+0x28>
      ret = LSM303AGR_ERROR;
 8002b76:	f04f 32ff 	mov.w	r2, #4294967295
 8002b7a:	e7ed      	b.n	8002b58 <LSM303AGR_ACC_GetSensitivityNM+0x28>
 8002b7c:	4079999a 	.word	0x4079999a
 8002b80:	40fa3d71 	.word	0x40fa3d71
 8002b84:	417a147b 	.word	0x417a147b
 8002b88:	423b999a 	.word	0x423b999a

08002b8c <LSM303AGR_ACC_GetSensitivityLP>:
{
 8002b8c:	b510      	push	{r4, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	460c      	mov	r4, r1
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8002b92:	f10d 0107 	add.w	r1, sp, #7
 8002b96:	301c      	adds	r0, #28
 8002b98:	f000 fb10 	bl	80031bc <lsm303agr_xl_full_scale_get>
 8002b9c:	b9b0      	cbnz	r0, 8002bcc <LSM303AGR_ACC_GetSensitivityLP+0x40>
 8002b9e:	4602      	mov	r2, r0
  switch (fullscale)
 8002ba0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002ba4:	2b03      	cmp	r3, #3
 8002ba6:	d814      	bhi.n	8002bd2 <LSM303AGR_ACC_GetSensitivityLP+0x46>
 8002ba8:	e8df f003 	tbb	[pc, r3]
 8002bac:	0d0a0702 	.word	0x0d0a0702
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 8002bb0:	4b09      	ldr	r3, [pc, #36]	; (8002bd8 <LSM303AGR_ACC_GetSensitivityLP+0x4c>)
 8002bb2:	6023      	str	r3, [r4, #0]
}
 8002bb4:	4610      	mov	r0, r2
 8002bb6:	b002      	add	sp, #8
 8002bb8:	bd10      	pop	{r4, pc}
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 8002bba:	4b08      	ldr	r3, [pc, #32]	; (8002bdc <LSM303AGR_ACC_GetSensitivityLP+0x50>)
 8002bbc:	6023      	str	r3, [r4, #0]
      break;
 8002bbe:	e7f9      	b.n	8002bb4 <LSM303AGR_ACC_GetSensitivityLP+0x28>
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 8002bc0:	4b07      	ldr	r3, [pc, #28]	; (8002be0 <LSM303AGR_ACC_GetSensitivityLP+0x54>)
 8002bc2:	6023      	str	r3, [r4, #0]
      break;
 8002bc4:	e7f6      	b.n	8002bb4 <LSM303AGR_ACC_GetSensitivityLP+0x28>
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 8002bc6:	4b07      	ldr	r3, [pc, #28]	; (8002be4 <LSM303AGR_ACC_GetSensitivityLP+0x58>)
 8002bc8:	6023      	str	r3, [r4, #0]
      break;
 8002bca:	e7f3      	b.n	8002bb4 <LSM303AGR_ACC_GetSensitivityLP+0x28>
    return LSM303AGR_ERROR;
 8002bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd0:	e7f0      	b.n	8002bb4 <LSM303AGR_ACC_GetSensitivityLP+0x28>
      ret = LSM303AGR_ERROR;
 8002bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd6:	e7ed      	b.n	8002bb4 <LSM303AGR_ACC_GetSensitivityLP+0x28>
 8002bd8:	417a147b 	.word	0x417a147b
 8002bdc:	41fa147b 	.word	0x41fa147b
 8002be0:	427a147b 	.word	0x427a147b
 8002be4:	433b947b 	.word	0x433b947b

08002be8 <LSM303AGR_ACC_GetSensitivity>:
{
 8002be8:	b530      	push	{r4, r5, lr}
 8002bea:	b083      	sub	sp, #12
 8002bec:	4604      	mov	r4, r0
 8002bee:	460d      	mov	r5, r1
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8002bf0:	f10d 0107 	add.w	r1, sp, #7
 8002bf4:	301c      	adds	r0, #28
 8002bf6:	f000 fa81 	bl	80030fc <lsm303agr_xl_operating_mode_get>
 8002bfa:	bb48      	cbnz	r0, 8002c50 <LSM303AGR_ACC_GetSensitivity+0x68>
  switch (op_mode)
 8002bfc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d011      	beq.n	8002c28 <LSM303AGR_ACC_GetSensitivity+0x40>
 8002c04:	b133      	cbz	r3, 8002c14 <LSM303AGR_ACC_GetSensitivity+0x2c>
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d018      	beq.n	8002c3c <LSM303AGR_ACC_GetSensitivity+0x54>
      ret = LSM303AGR_ERROR;
 8002c0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	b003      	add	sp, #12
 8002c12:	bd30      	pop	{r4, r5, pc}
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 8002c14:	4629      	mov	r1, r5
 8002c16:	4620      	mov	r0, r4
 8002c18:	f7ff ff5c 	bl	8002ad4 <LSM303AGR_ACC_GetSensitivityHR>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2800      	cmp	r0, #0
 8002c20:	d0f5      	beq.n	8002c0e <LSM303AGR_ACC_GetSensitivity+0x26>
        return LSM303AGR_ERROR;
 8002c22:	f04f 33ff 	mov.w	r3, #4294967295
 8002c26:	e7f2      	b.n	8002c0e <LSM303AGR_ACC_GetSensitivity+0x26>
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 8002c28:	4629      	mov	r1, r5
 8002c2a:	4620      	mov	r0, r4
 8002c2c:	f7ff ff80 	bl	8002b30 <LSM303AGR_ACC_GetSensitivityNM>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2800      	cmp	r0, #0
 8002c34:	d0eb      	beq.n	8002c0e <LSM303AGR_ACC_GetSensitivity+0x26>
        return LSM303AGR_ERROR;
 8002c36:	f04f 33ff 	mov.w	r3, #4294967295
 8002c3a:	e7e8      	b.n	8002c0e <LSM303AGR_ACC_GetSensitivity+0x26>
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 8002c3c:	4629      	mov	r1, r5
 8002c3e:	4620      	mov	r0, r4
 8002c40:	f7ff ffa4 	bl	8002b8c <LSM303AGR_ACC_GetSensitivityLP>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2800      	cmp	r0, #0
 8002c48:	d0e1      	beq.n	8002c0e <LSM303AGR_ACC_GetSensitivity+0x26>
        return LSM303AGR_ERROR;
 8002c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c4e:	e7de      	b.n	8002c0e <LSM303AGR_ACC_GetSensitivity+0x26>
    return LSM303AGR_ERROR;
 8002c50:	f04f 33ff 	mov.w	r3, #4294967295
 8002c54:	e7db      	b.n	8002c0e <LSM303AGR_ACC_GetSensitivity+0x26>

08002c56 <LSM303AGR_ACC_GetFullScale>:
{
 8002c56:	b510      	push	{r4, lr}
 8002c58:	b082      	sub	sp, #8
 8002c5a:	460c      	mov	r4, r1
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 8002c5c:	f10d 0107 	add.w	r1, sp, #7
 8002c60:	301c      	adds	r0, #28
 8002c62:	f000 faab 	bl	80031bc <lsm303agr_xl_full_scale_get>
 8002c66:	b9b0      	cbnz	r0, 8002c96 <LSM303AGR_ACC_GetFullScale+0x40>
 8002c68:	4602      	mov	r2, r0
  switch (fs_low_level)
 8002c6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002c6e:	2b03      	cmp	r3, #3
 8002c70:	d814      	bhi.n	8002c9c <LSM303AGR_ACC_GetFullScale+0x46>
 8002c72:	e8df f003 	tbb	[pc, r3]
 8002c76:	0702      	.short	0x0702
 8002c78:	0d0a      	.short	0x0d0a
      *FullScale =  2;
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	6023      	str	r3, [r4, #0]
}
 8002c7e:	4610      	mov	r0, r2
 8002c80:	b002      	add	sp, #8
 8002c82:	bd10      	pop	{r4, pc}
      *FullScale =  4;
 8002c84:	2304      	movs	r3, #4
 8002c86:	6023      	str	r3, [r4, #0]
      break;
 8002c88:	e7f9      	b.n	8002c7e <LSM303AGR_ACC_GetFullScale+0x28>
      *FullScale =  8;
 8002c8a:	2308      	movs	r3, #8
 8002c8c:	6023      	str	r3, [r4, #0]
      break;
 8002c8e:	e7f6      	b.n	8002c7e <LSM303AGR_ACC_GetFullScale+0x28>
      *FullScale = 16;
 8002c90:	2310      	movs	r3, #16
 8002c92:	6023      	str	r3, [r4, #0]
      break;
 8002c94:	e7f3      	b.n	8002c7e <LSM303AGR_ACC_GetFullScale+0x28>
    return LSM303AGR_ERROR;
 8002c96:	f04f 32ff 	mov.w	r2, #4294967295
 8002c9a:	e7f0      	b.n	8002c7e <LSM303AGR_ACC_GetFullScale+0x28>
      ret = LSM303AGR_ERROR;
 8002c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca0:	e7ed      	b.n	8002c7e <LSM303AGR_ACC_GetFullScale+0x28>

08002ca2 <LSM303AGR_ACC_GetAxesRaw>:
{
 8002ca2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ca4:	b085      	sub	sp, #20
 8002ca6:	460d      	mov	r5, r1
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8002ca8:	f100 071c 	add.w	r7, r0, #28
 8002cac:	f10d 0107 	add.w	r1, sp, #7
 8002cb0:	4638      	mov	r0, r7
 8002cb2:	f000 fa23 	bl	80030fc <lsm303agr_xl_operating_mode_get>
 8002cb6:	bb58      	cbnz	r0, 8002d10 <LSM303AGR_ACC_GetAxesRaw+0x6e>
 8002cb8:	4604      	mov	r4, r0
  switch (op_mode)
 8002cba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d024      	beq.n	8002d0c <LSM303AGR_ACC_GetAxesRaw+0x6a>
 8002cc2:	b12b      	cbz	r3, 8002cd0 <LSM303AGR_ACC_GetAxesRaw+0x2e>
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d01e      	beq.n	8002d06 <LSM303AGR_ACC_GetAxesRaw+0x64>
      ret = LSM303AGR_ERROR;
 8002cc8:	f04f 34ff 	mov.w	r4, #4294967295
  int16_t divisor = 1;
 8002ccc:	2601      	movs	r6, #1
      break;
 8002cce:	e000      	b.n	8002cd2 <LSM303AGR_ACC_GetAxesRaw+0x30>
      divisor = 16;
 8002cd0:	2610      	movs	r6, #16
  if (ret == LSM303AGR_ERROR)
 8002cd2:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002cd6:	d013      	beq.n	8002d00 <LSM303AGR_ACC_GetAxesRaw+0x5e>
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 8002cd8:	a902      	add	r1, sp, #8
 8002cda:	4638      	mov	r0, r7
 8002cdc:	f000 fa94 	bl	8003208 <lsm303agr_acceleration_raw_get>
 8002ce0:	b9c8      	cbnz	r0, 8002d16 <LSM303AGR_ACC_GetAxesRaw+0x74>
  Value->x = (data_raw.i16bit[0] / divisor);
 8002ce2:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8002ce6:	fb93 f3f6 	sdiv	r3, r3, r6
 8002cea:	802b      	strh	r3, [r5, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 8002cec:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8002cf0:	fb93 f3f6 	sdiv	r3, r3, r6
 8002cf4:	806b      	strh	r3, [r5, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 8002cf6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8002cfa:	fb93 f6f6 	sdiv	r6, r3, r6
 8002cfe:	80ae      	strh	r6, [r5, #4]
}
 8002d00:	4620      	mov	r0, r4
 8002d02:	b005      	add	sp, #20
 8002d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
      divisor = 256;
 8002d06:	f44f 7680 	mov.w	r6, #256	; 0x100
      break;
 8002d0a:	e7e2      	b.n	8002cd2 <LSM303AGR_ACC_GetAxesRaw+0x30>
      divisor = 64;
 8002d0c:	2640      	movs	r6, #64	; 0x40
 8002d0e:	e7e0      	b.n	8002cd2 <LSM303AGR_ACC_GetAxesRaw+0x30>
    return LSM303AGR_ERROR;
 8002d10:	f04f 34ff 	mov.w	r4, #4294967295
 8002d14:	e7f4      	b.n	8002d00 <LSM303AGR_ACC_GetAxesRaw+0x5e>
    return LSM303AGR_ERROR;
 8002d16:	f04f 34ff 	mov.w	r4, #4294967295
 8002d1a:	e7f1      	b.n	8002d00 <LSM303AGR_ACC_GetAxesRaw+0x5e>

08002d1c <LSM303AGR_ACC_GetAxes>:
{
 8002d1c:	b530      	push	{r4, r5, lr}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	4605      	mov	r5, r0
 8002d22:	460c      	mov	r4, r1
  float sensitivity = 0.0f;
 8002d24:	2300      	movs	r3, #0
 8002d26:	9301      	str	r3, [sp, #4]
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 8002d28:	a902      	add	r1, sp, #8
 8002d2a:	f7ff ffba 	bl	8002ca2 <LSM303AGR_ACC_GetAxesRaw>
 8002d2e:	bb70      	cbnz	r0, 8002d8e <LSM303AGR_ACC_GetAxes+0x72>
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 8002d30:	a901      	add	r1, sp, #4
 8002d32:	4628      	mov	r0, r5
 8002d34:	f7ff ff58 	bl	8002be8 <LSM303AGR_ACC_GetSensitivity>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	bb58      	cbnz	r0, 8002d94 <LSM303AGR_ACC_GetAxes+0x78>
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8002d3c:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8002d40:	ee07 2a10 	vmov	s14, r2
 8002d44:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002d48:	eddd 7a01 	vldr	s15, [sp, #4]
 8002d4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d50:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8002d54:	ed84 7a00 	vstr	s14, [r4]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8002d58:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8002d5c:	ee07 2a10 	vmov	s14, r2
 8002d60:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002d64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d68:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8002d6c:	ed84 7a01 	vstr	s14, [r4, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8002d70:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8002d74:	ee07 2a10 	vmov	s14, r2
 8002d78:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002d7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d84:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	b005      	add	sp, #20
 8002d8c:	bd30      	pop	{r4, r5, pc}
    return LSM303AGR_ERROR;
 8002d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d92:	e7f9      	b.n	8002d88 <LSM303AGR_ACC_GetAxes+0x6c>
    return LSM303AGR_ERROR;
 8002d94:	f04f 33ff 	mov.w	r3, #4294967295
 8002d98:	e7f6      	b.n	8002d88 <LSM303AGR_ACC_GetAxes+0x6c>

08002d9a <LSM303AGR_MAG_Enable>:
  if (pObj->mag_is_enabled == 1U)
 8002d9a:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d00c      	beq.n	8002dbc <LSM303AGR_MAG_Enable+0x22>
{
 8002da2:	b510      	push	{r4, lr}
 8002da4:	4604      	mov	r4, r0
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 8002da6:	2100      	movs	r1, #0
 8002da8:	301c      	adds	r0, #28
 8002daa:	f000 fa34 	bl	8003216 <lsm303agr_mag_operating_mode_set>
 8002dae:	4603      	mov	r3, r0
 8002db0:	b938      	cbnz	r0, 8002dc2 <LSM303AGR_MAG_Enable+0x28>
  pObj->mag_is_enabled = 1;
 8002db2:	2201      	movs	r2, #1
 8002db4:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	bd10      	pop	{r4, pc}
    return LSM303AGR_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	4770      	bx	lr
    return LSM303AGR_ERROR;
 8002dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc6:	e7f7      	b.n	8002db8 <LSM303AGR_MAG_Enable+0x1e>

08002dc8 <LSM303AGR_MAG_Disable>:
  if (pObj->mag_is_enabled == 0U)
 8002dc8:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8002dcc:	b913      	cbnz	r3, 8002dd4 <LSM303AGR_MAG_Disable+0xc>
    return LSM303AGR_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	4770      	bx	lr
{
 8002dd4:	b510      	push	{r4, lr}
 8002dd6:	4604      	mov	r4, r0
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8002dd8:	2102      	movs	r1, #2
 8002dda:	301c      	adds	r0, #28
 8002ddc:	f000 fa1b 	bl	8003216 <lsm303agr_mag_operating_mode_set>
 8002de0:	4603      	mov	r3, r0
 8002de2:	b920      	cbnz	r0, 8002dee <LSM303AGR_MAG_Disable+0x26>
  pObj->mag_is_enabled = 0;
 8002de4:	2200      	movs	r2, #0
 8002de6:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	bd10      	pop	{r4, pc}
    return LSM303AGR_ERROR;
 8002dee:	f04f 33ff 	mov.w	r3, #4294967295
 8002df2:	e7fa      	b.n	8002dea <LSM303AGR_MAG_Disable+0x22>

08002df4 <LSM303AGR_MAG_DeInit>:
{
 8002df4:	b510      	push	{r4, lr}
 8002df6:	4604      	mov	r4, r0
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 8002df8:	f7ff ffe6 	bl	8002dc8 <LSM303AGR_MAG_Disable>
 8002dfc:	b928      	cbnz	r0, 8002e0a <LSM303AGR_MAG_DeInit+0x16>
 8002dfe:	4603      	mov	r3, r0
  pObj->is_initialized = 0;
 8002e00:	2200      	movs	r2, #0
 8002e02:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	bd10      	pop	{r4, pc}
    return LSM303AGR_ERROR;
 8002e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e0e:	e7fa      	b.n	8002e06 <LSM303AGR_MAG_DeInit+0x12>

08002e10 <LSM303AGR_MAG_SetOutputDataRate>:
{
 8002e10:	b508      	push	{r3, lr}
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 8002e12:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8002e16:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e1e:	d90f      	bls.n	8002e40 <LSM303AGR_MAG_SetOutputDataRate+0x30>
 8002e20:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8002e24:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e2c:	d910      	bls.n	8002e50 <LSM303AGR_MAG_SetOutputDataRate+0x40>
 8002e2e:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8002e60 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8002e32:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e3a:	d80b      	bhi.n	8002e54 <LSM303AGR_MAG_SetOutputDataRate+0x44>
 8002e3c:	2102      	movs	r1, #2
 8002e3e:	e000      	b.n	8002e42 <LSM303AGR_MAG_SetOutputDataRate+0x32>
 8002e40:	2100      	movs	r1, #0
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8002e42:	301c      	adds	r0, #28
 8002e44:	f000 f9fe 	bl	8003244 <lsm303agr_mag_data_rate_set>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	b928      	cbnz	r0, 8002e58 <LSM303AGR_MAG_SetOutputDataRate+0x48>
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	bd08      	pop	{r3, pc}
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 8002e50:	2101      	movs	r1, #1
 8002e52:	e7f6      	b.n	8002e42 <LSM303AGR_MAG_SetOutputDataRate+0x32>
 8002e54:	2103      	movs	r1, #3
 8002e56:	e7f4      	b.n	8002e42 <LSM303AGR_MAG_SetOutputDataRate+0x32>
    return LSM303AGR_ERROR;
 8002e58:	f04f 33ff 	mov.w	r3, #4294967295
 8002e5c:	e7f6      	b.n	8002e4c <LSM303AGR_MAG_SetOutputDataRate+0x3c>
 8002e5e:	bf00      	nop
 8002e60:	42480000 	.word	0x42480000

08002e64 <LSM303AGR_MAG_Init>:
{
 8002e64:	b538      	push	{r3, r4, r5, lr}
 8002e66:	4605      	mov	r5, r0
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8002e68:	f100 041c 	add.w	r4, r0, #28
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	4620      	mov	r0, r4
 8002e70:	f000 fa0e 	bl	8003290 <lsm303agr_mag_block_data_update_set>
 8002e74:	b9a0      	cbnz	r0, 8002ea0 <LSM303AGR_MAG_Init+0x3c>
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8002e76:	2102      	movs	r1, #2
 8002e78:	4620      	mov	r0, r4
 8002e7a:	f000 f9cc 	bl	8003216 <lsm303agr_mag_operating_mode_set>
 8002e7e:	b990      	cbnz	r0, 8002ea6 <LSM303AGR_MAG_Init+0x42>
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 8002e80:	2103      	movs	r1, #3
 8002e82:	4620      	mov	r0, r4
 8002e84:	f000 f9de 	bl	8003244 <lsm303agr_mag_data_rate_set>
 8002e88:	b980      	cbnz	r0, 8002eac <LSM303AGR_MAG_Init+0x48>
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	4620      	mov	r0, r4
 8002e8e:	f000 fa2b 	bl	80032e8 <lsm303agr_mag_self_test_set>
 8002e92:	4603      	mov	r3, r0
 8002e94:	b968      	cbnz	r0, 8002eb2 <LSM303AGR_MAG_Init+0x4e>
  pObj->is_initialized = 1;
 8002e96:	2201      	movs	r2, #1
 8002e98:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	bd38      	pop	{r3, r4, r5, pc}
    return LSM303AGR_ERROR;
 8002ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea4:	e7fa      	b.n	8002e9c <LSM303AGR_MAG_Init+0x38>
    return LSM303AGR_ERROR;
 8002ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eaa:	e7f7      	b.n	8002e9c <LSM303AGR_MAG_Init+0x38>
    return LSM303AGR_ERROR;
 8002eac:	f04f 33ff 	mov.w	r3, #4294967295
 8002eb0:	e7f4      	b.n	8002e9c <LSM303AGR_MAG_Init+0x38>
    return LSM303AGR_ERROR;
 8002eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8002eb6:	e7f1      	b.n	8002e9c <LSM303AGR_MAG_Init+0x38>

08002eb8 <LSM303AGR_MAG_ReadID>:
{
 8002eb8:	b508      	push	{r3, lr}
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8002eba:	301c      	adds	r0, #28
 8002ebc:	f000 fa0d 	bl	80032da <lsm303agr_mag_device_id_get>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	b908      	cbnz	r0, 8002ec8 <LSM303AGR_MAG_ReadID+0x10>
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	bd08      	pop	{r3, pc}
    return LSM303AGR_ERROR;
 8002ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ecc:	e7fa      	b.n	8002ec4 <LSM303AGR_MAG_ReadID+0xc>
	...

08002ed0 <LSM303AGR_MAG_GetOutputDataRate>:
{
 8002ed0:	b510      	push	{r4, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	460c      	mov	r4, r1
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8002ed6:	f10d 0107 	add.w	r1, sp, #7
 8002eda:	301c      	adds	r0, #28
 8002edc:	f000 f9c9 	bl	8003272 <lsm303agr_mag_data_rate_get>
 8002ee0:	b9b0      	cbnz	r0, 8002f10 <LSM303AGR_MAG_GetOutputDataRate+0x40>
 8002ee2:	4602      	mov	r2, r0
  switch (odr_low_level)
 8002ee4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002ee8:	2b03      	cmp	r3, #3
 8002eea:	d814      	bhi.n	8002f16 <LSM303AGR_MAG_GetOutputDataRate+0x46>
 8002eec:	e8df f003 	tbb	[pc, r3]
 8002ef0:	0d0a0702 	.word	0x0d0a0702
      *Odr = 10.0f;
 8002ef4:	4b09      	ldr	r3, [pc, #36]	; (8002f1c <LSM303AGR_MAG_GetOutputDataRate+0x4c>)
 8002ef6:	6023      	str	r3, [r4, #0]
}
 8002ef8:	4610      	mov	r0, r2
 8002efa:	b002      	add	sp, #8
 8002efc:	bd10      	pop	{r4, pc}
      *Odr = 20.0f;
 8002efe:	4b08      	ldr	r3, [pc, #32]	; (8002f20 <LSM303AGR_MAG_GetOutputDataRate+0x50>)
 8002f00:	6023      	str	r3, [r4, #0]
      break;
 8002f02:	e7f9      	b.n	8002ef8 <LSM303AGR_MAG_GetOutputDataRate+0x28>
      *Odr = 50.0f;
 8002f04:	4b07      	ldr	r3, [pc, #28]	; (8002f24 <LSM303AGR_MAG_GetOutputDataRate+0x54>)
 8002f06:	6023      	str	r3, [r4, #0]
      break;
 8002f08:	e7f6      	b.n	8002ef8 <LSM303AGR_MAG_GetOutputDataRate+0x28>
      *Odr = 100.0f;
 8002f0a:	4b07      	ldr	r3, [pc, #28]	; (8002f28 <LSM303AGR_MAG_GetOutputDataRate+0x58>)
 8002f0c:	6023      	str	r3, [r4, #0]
      break;
 8002f0e:	e7f3      	b.n	8002ef8 <LSM303AGR_MAG_GetOutputDataRate+0x28>
    return LSM303AGR_ERROR;
 8002f10:	f04f 32ff 	mov.w	r2, #4294967295
 8002f14:	e7f0      	b.n	8002ef8 <LSM303AGR_MAG_GetOutputDataRate+0x28>
      ret = LSM303AGR_ERROR;
 8002f16:	f04f 32ff 	mov.w	r2, #4294967295
 8002f1a:	e7ed      	b.n	8002ef8 <LSM303AGR_MAG_GetOutputDataRate+0x28>
 8002f1c:	41200000 	.word	0x41200000
 8002f20:	41a00000 	.word	0x41a00000
 8002f24:	42480000 	.word	0x42480000
 8002f28:	42c80000 	.word	0x42c80000

08002f2c <LSM303AGR_MAG_GetAxesRaw>:
{
 8002f2c:	b510      	push	{r4, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	460c      	mov	r4, r1
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 8002f32:	4669      	mov	r1, sp
 8002f34:	301c      	adds	r0, #28
 8002f36:	f000 f9c2 	bl	80032be <lsm303agr_magnetic_raw_get>
 8002f3a:	b960      	cbnz	r0, 8002f56 <LSM303AGR_MAG_GetAxesRaw+0x2a>
 8002f3c:	4603      	mov	r3, r0
  Value->x = data_raw.i16bit[0];
 8002f3e:	f9bd 2000 	ldrsh.w	r2, [sp]
 8002f42:	8022      	strh	r2, [r4, #0]
  Value->y = data_raw.i16bit[1];
 8002f44:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 8002f48:	8062      	strh	r2, [r4, #2]
  Value->z = data_raw.i16bit[2];
 8002f4a:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8002f4e:	80a2      	strh	r2, [r4, #4]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	b002      	add	sp, #8
 8002f54:	bd10      	pop	{r4, pc}
    return LSM303AGR_ERROR;
 8002f56:	f04f 33ff 	mov.w	r3, #4294967295
 8002f5a:	e7f9      	b.n	8002f50 <LSM303AGR_MAG_GetAxesRaw+0x24>

08002f5c <LSM303AGR_MAG_GetAxes>:
{
 8002f5c:	b570      	push	{r4, r5, r6, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	4606      	mov	r6, r0
 8002f62:	460c      	mov	r4, r1
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 8002f64:	a902      	add	r1, sp, #8
 8002f66:	301c      	adds	r0, #28
 8002f68:	f000 f9a9 	bl	80032be <lsm303agr_magnetic_raw_get>
 8002f6c:	bb68      	cbnz	r0, 8002fca <LSM303AGR_MAG_GetAxes+0x6e>
 8002f6e:	4605      	mov	r5, r0
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 8002f70:	a901      	add	r1, sp, #4
 8002f72:	4630      	mov	r0, r6
 8002f74:	f7ff fbae 	bl	80026d4 <LSM303AGR_MAG_GetSensitivity>
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002f78:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8002f7c:	ee07 3a10 	vmov	s14, r3
 8002f80:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002f84:	eddd 7a01 	vldr	s15, [sp, #4]
 8002f88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f8c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8002f90:	ed84 7a00 	vstr	s14, [r4]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002f94:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8002f98:	ee07 3a10 	vmov	s14, r3
 8002f9c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002fa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fa4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8002fa8:	ed84 7a01 	vstr	s14, [r4, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002fac:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8002fb0:	ee07 3a10 	vmov	s14, r3
 8002fb4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002fb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fc0:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8002fc4:	4628      	mov	r0, r5
 8002fc6:	b004      	add	sp, #16
 8002fc8:	bd70      	pop	{r4, r5, r6, pc}
    return LSM303AGR_ERROR;
 8002fca:	f04f 35ff 	mov.w	r5, #4294967295
 8002fce:	e7f9      	b.n	8002fc4 <LSM303AGR_MAG_GetAxes+0x68>

08002fd0 <LSM303AGR_ACC_Write_Reg>:
{
 8002fd0:	b510      	push	{r4, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	ac02      	add	r4, sp, #8
 8002fd6:	f804 2d01 	strb.w	r2, [r4, #-1]!
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 8002fda:	2301      	movs	r3, #1
 8002fdc:	4622      	mov	r2, r4
 8002fde:	301c      	adds	r0, #28
 8002fe0:	f000 f887 	bl	80030f2 <lsm303agr_write_reg>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	b910      	cbnz	r0, 8002fee <LSM303AGR_ACC_Write_Reg+0x1e>
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	b002      	add	sp, #8
 8002fec:	bd10      	pop	{r4, pc}
    return LSM303AGR_ERROR;
 8002fee:	f04f 33ff 	mov.w	r3, #4294967295
 8002ff2:	e7f9      	b.n	8002fe8 <LSM303AGR_ACC_Write_Reg+0x18>

08002ff4 <LSM303AGR_ACC_RegisterBusIO>:
  if (pObj == NULL)
 8002ff4:	2800      	cmp	r0, #0
 8002ff6:	d02c      	beq.n	8003052 <LSM303AGR_ACC_RegisterBusIO+0x5e>
{
 8002ff8:	b510      	push	{r4, lr}
 8002ffa:	4604      	mov	r4, r0
    pObj->IO.Init      = pIO->Init;
 8002ffc:	680a      	ldr	r2, [r1, #0]
 8002ffe:	6002      	str	r2, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003000:	6848      	ldr	r0, [r1, #4]
 8003002:	6060      	str	r0, [r4, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003004:	6888      	ldr	r0, [r1, #8]
 8003006:	60a0      	str	r0, [r4, #8]
    pObj->IO.Address   = pIO->Address;
 8003008:	7b08      	ldrb	r0, [r1, #12]
 800300a:	7320      	strb	r0, [r4, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800300c:	6908      	ldr	r0, [r1, #16]
 800300e:	6120      	str	r0, [r4, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003010:	6948      	ldr	r0, [r1, #20]
 8003012:	6160      	str	r0, [r4, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003014:	6989      	ldr	r1, [r1, #24]
 8003016:	61a1      	str	r1, [r4, #24]
    pObj->Ctx.read_reg  = ReadAccRegWrap;
 8003018:	4913      	ldr	r1, [pc, #76]	; (8003068 <LSM303AGR_ACC_RegisterBusIO+0x74>)
 800301a:	6221      	str	r1, [r4, #32]
    pObj->Ctx.write_reg = WriteAccRegWrap;
 800301c:	4913      	ldr	r1, [pc, #76]	; (800306c <LSM303AGR_ACC_RegisterBusIO+0x78>)
 800301e:	61e1      	str	r1, [r4, #28]
    pObj->Ctx.handle    = pObj;
 8003020:	6264      	str	r4, [r4, #36]	; 0x24
    if (pObj->IO.Init == NULL)
 8003022:	b1d2      	cbz	r2, 800305a <LSM303AGR_ACC_RegisterBusIO+0x66>
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8003024:	4790      	blx	r2
 8003026:	4603      	mov	r3, r0
 8003028:	b9d0      	cbnz	r0, 8003060 <LSM303AGR_ACC_RegisterBusIO+0x6c>
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800302a:	68a2      	ldr	r2, [r4, #8]
 800302c:	2a01      	cmp	r2, #1
 800302e:	d001      	beq.n	8003034 <LSM303AGR_ACC_RegisterBusIO+0x40>
}
 8003030:	4618      	mov	r0, r3
 8003032:	bd10      	pop	{r4, pc}
        if (pObj->is_initialized == 0U)
 8003034:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8003038:	2a00      	cmp	r2, #0
 800303a:	d1f9      	bne.n	8003030 <LSM303AGR_ACC_RegisterBusIO+0x3c>
          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 800303c:	2201      	movs	r2, #1
 800303e:	2123      	movs	r1, #35	; 0x23
 8003040:	4620      	mov	r0, r4
 8003042:	f7ff ffc5 	bl	8002fd0 <LSM303AGR_ACC_Write_Reg>
 8003046:	4603      	mov	r3, r0
 8003048:	2800      	cmp	r0, #0
 800304a:	d0f1      	beq.n	8003030 <LSM303AGR_ACC_RegisterBusIO+0x3c>
            return LSM303AGR_ERROR;
 800304c:	f04f 33ff 	mov.w	r3, #4294967295
 8003050:	e7ee      	b.n	8003030 <LSM303AGR_ACC_RegisterBusIO+0x3c>
    ret = LSM303AGR_ERROR;
 8003052:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003056:	4618      	mov	r0, r3
 8003058:	4770      	bx	lr
      ret = LSM303AGR_ERROR;
 800305a:	f04f 33ff 	mov.w	r3, #4294967295
 800305e:	e7e7      	b.n	8003030 <LSM303AGR_ACC_RegisterBusIO+0x3c>
      ret = LSM303AGR_ERROR;
 8003060:	f04f 33ff 	mov.w	r3, #4294967295
 8003064:	e7e4      	b.n	8003030 <LSM303AGR_ACC_RegisterBusIO+0x3c>
 8003066:	bf00      	nop
 8003068:	08002771 	.word	0x08002771
 800306c:	0800278f 	.word	0x0800278f

08003070 <LSM303AGR_MAG_RegisterBusIO>:
  if (pObj == NULL)
 8003070:	2800      	cmp	r0, #0
 8003072:	d02a      	beq.n	80030ca <LSM303AGR_MAG_RegisterBusIO+0x5a>
{
 8003074:	b510      	push	{r4, lr}
 8003076:	4604      	mov	r4, r0
    pObj->IO.Init      = pIO->Init;
 8003078:	680a      	ldr	r2, [r1, #0]
 800307a:	6002      	str	r2, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800307c:	6848      	ldr	r0, [r1, #4]
 800307e:	6060      	str	r0, [r4, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003080:	6888      	ldr	r0, [r1, #8]
 8003082:	60a0      	str	r0, [r4, #8]
    pObj->IO.Address   = pIO->Address;
 8003084:	7b08      	ldrb	r0, [r1, #12]
 8003086:	7320      	strb	r0, [r4, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003088:	6908      	ldr	r0, [r1, #16]
 800308a:	6120      	str	r0, [r4, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800308c:	6948      	ldr	r0, [r1, #20]
 800308e:	6160      	str	r0, [r4, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003090:	6989      	ldr	r1, [r1, #24]
 8003092:	61a1      	str	r1, [r4, #24]
    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8003094:	4912      	ldr	r1, [pc, #72]	; (80030e0 <LSM303AGR_MAG_RegisterBusIO+0x70>)
 8003096:	6221      	str	r1, [r4, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8003098:	4912      	ldr	r1, [pc, #72]	; (80030e4 <LSM303AGR_MAG_RegisterBusIO+0x74>)
 800309a:	61e1      	str	r1, [r4, #28]
    pObj->Ctx.handle    = pObj;
 800309c:	6264      	str	r4, [r4, #36]	; 0x24
    if (pObj->IO.Init == NULL)
 800309e:	b1c2      	cbz	r2, 80030d2 <LSM303AGR_MAG_RegisterBusIO+0x62>
    else if (pObj->IO.Init() != LSM303AGR_OK)
 80030a0:	4790      	blx	r2
 80030a2:	4603      	mov	r3, r0
 80030a4:	b9c0      	cbnz	r0, 80030d8 <LSM303AGR_MAG_RegisterBusIO+0x68>
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 80030a6:	68a2      	ldr	r2, [r4, #8]
 80030a8:	b112      	cbz	r2, 80030b0 <LSM303AGR_MAG_RegisterBusIO+0x40>
        if (pObj->is_initialized == 0U)
 80030aa:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80030ae:	b10a      	cbz	r2, 80030b4 <LSM303AGR_MAG_RegisterBusIO+0x44>
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	bd10      	pop	{r4, pc}
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 80030b4:	2101      	movs	r1, #1
 80030b6:	f104 001c 	add.w	r0, r4, #28
 80030ba:	f000 f943 	bl	8003344 <lsm303agr_mag_i2c_interface_set>
 80030be:	4603      	mov	r3, r0
 80030c0:	2800      	cmp	r0, #0
 80030c2:	d0f5      	beq.n	80030b0 <LSM303AGR_MAG_RegisterBusIO+0x40>
            return LSM303AGR_ERROR;
 80030c4:	f04f 33ff 	mov.w	r3, #4294967295
 80030c8:	e7f2      	b.n	80030b0 <LSM303AGR_MAG_RegisterBusIO+0x40>
    ret = LSM303AGR_ERROR;
 80030ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	4770      	bx	lr
      ret = LSM303AGR_ERROR;
 80030d2:	f04f 33ff 	mov.w	r3, #4294967295
 80030d6:	e7eb      	b.n	80030b0 <LSM303AGR_MAG_RegisterBusIO+0x40>
      ret = LSM303AGR_ERROR;
 80030d8:	f04f 33ff 	mov.w	r3, #4294967295
 80030dc:	e7e8      	b.n	80030b0 <LSM303AGR_MAG_RegisterBusIO+0x40>
 80030de:	bf00      	nop
 80030e0:	080027ad 	.word	0x080027ad
 80030e4:	080027cb 	.word	0x080027cb

080030e8 <lsm303agr_read_reg>:
  * @param  uint16_t len: number of consecutive register to read
  *
  */
int32_t lsm303agr_read_reg(lsm303agr_ctx_t *ctx, uint8_t reg, uint8_t *data,
                           uint16_t len)
{
 80030e8:	b510      	push	{r4, lr}
  return ctx->read_reg(ctx->handle, reg, data, len);
 80030ea:	6844      	ldr	r4, [r0, #4]
 80030ec:	6880      	ldr	r0, [r0, #8]
 80030ee:	47a0      	blx	r4
}
 80030f0:	bd10      	pop	{r4, pc}

080030f2 <lsm303agr_write_reg>:
  * @param  uint16_t len: number of consecutive register to write
  *
*/
int32_t lsm303agr_write_reg(lsm303agr_ctx_t *ctx, uint8_t reg, uint8_t *data,
                            uint16_t len)
{
 80030f2:	b510      	push	{r4, lr}
  return ctx->write_reg(ctx->handle, reg, data, len);
 80030f4:	6804      	ldr	r4, [r0, #0]
 80030f6:	6880      	ldr	r0, [r0, #8]
 80030f8:	47a0      	blx	r4
}
 80030fa:	bd10      	pop	{r4, pc}

080030fc <lsm303agr_xl_operating_mode_get>:
  *                                  reg CTRL_REG4_AG1_A
  *
  */
int32_t lsm303agr_xl_operating_mode_get(lsm303agr_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 80030fc:	b570      	push	{r4, r5, r6, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	4605      	mov	r5, r0
 8003102:	460e      	mov	r6, r1
  lsm303agr_reg_t reg;
  int32_t mm_error;
  uint8_t lpen, hr;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A, &reg.byte, 1);
 8003104:	2301      	movs	r3, #1
 8003106:	aa01      	add	r2, sp, #4
 8003108:	2120      	movs	r1, #32
 800310a:	f7ff ffed 	bl	80030e8 <lsm303agr_read_reg>
  lpen = reg.ctrl_reg1_a.lpen;
 800310e:	f89d 4004 	ldrb.w	r4, [sp, #4]
 8003112:	f3c4 04c0 	ubfx	r4, r4, #3, #1
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A, &reg.byte, 1);
 8003116:	2301      	movs	r3, #1
 8003118:	aa01      	add	r2, sp, #4
 800311a:	2123      	movs	r1, #35	; 0x23
 800311c:	4628      	mov	r0, r5
 800311e:	f7ff ffe3 	bl	80030e8 <lsm303agr_read_reg>
  hr = reg.ctrl_reg4_a.hr;
 8003122:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003126:	f3c3 03c0 	ubfx	r3, r3, #3, #1

  if (lpen)
 800312a:	b91c      	cbnz	r4, 8003134 <lsm303agr_xl_operating_mode_get+0x38>
  {
    *val = LSM303AGR_LP_8bit;
  }
  else if (hr)
 800312c:	b933      	cbnz	r3, 800313c <lsm303agr_xl_operating_mode_get+0x40>
  {
    *val = LSM303AGR_HR_12bit;
  }
  else
  {
    *val = LSM303AGR_NM_10bit;
 800312e:	2301      	movs	r3, #1
 8003130:	7033      	strb	r3, [r6, #0]
  }

  return mm_error;
 8003132:	e001      	b.n	8003138 <lsm303agr_xl_operating_mode_get+0x3c>
    *val = LSM303AGR_LP_8bit;
 8003134:	2302      	movs	r3, #2
 8003136:	7033      	strb	r3, [r6, #0]
}
 8003138:	b002      	add	sp, #8
 800313a:	bd70      	pop	{r4, r5, r6, pc}
    *val = LSM303AGR_HR_12bit;
 800313c:	2300      	movs	r3, #0
 800313e:	7033      	strb	r3, [r6, #0]
 8003140:	e7fa      	b.n	8003138 <lsm303agr_xl_operating_mode_get+0x3c>

08003142 <lsm303agr_xl_data_rate_set>:
  * @param  lsm303agr_odr_a_t: change the values of odr in reg CTRL_REG1_A
  *
  */
int32_t lsm303agr_xl_data_rate_set(lsm303agr_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 8003142:	b530      	push	{r4, r5, lr}
 8003144:	b083      	sub	sp, #12
 8003146:	4604      	mov	r4, r0
 8003148:	460d      	mov	r5, r1
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800314a:	2301      	movs	r3, #1
 800314c:	aa01      	add	r2, sp, #4
 800314e:	2120      	movs	r1, #32
 8003150:	f7ff ffca 	bl	80030e8 <lsm303agr_read_reg>
                                &reg.byte, 1);
  reg.ctrl_reg1_a.odr = val;
 8003154:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003158:	f365 1307 	bfi	r3, r5, #4, #4
 800315c:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003160:	2301      	movs	r3, #1
 8003162:	aa01      	add	r2, sp, #4
 8003164:	2120      	movs	r1, #32
 8003166:	4620      	mov	r0, r4
 8003168:	f7ff ffc3 	bl	80030f2 <lsm303agr_write_reg>
                                 &reg.byte, 1);

  return mm_error;
}
 800316c:	b003      	add	sp, #12
 800316e:	bd30      	pop	{r4, r5, pc}

08003170 <lsm303agr_xl_data_rate_get>:
  * @param  lsm303agr_odr_a_t: Get the values of odr in reg CTRL_REG1_A
  *
  */
int32_t lsm303agr_xl_data_rate_get(lsm303agr_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 8003170:	b510      	push	{r4, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	460c      	mov	r4, r1
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A, &reg.byte, 1);
 8003176:	2301      	movs	r3, #1
 8003178:	aa01      	add	r2, sp, #4
 800317a:	2120      	movs	r1, #32
 800317c:	f7ff ffb4 	bl	80030e8 <lsm303agr_read_reg>
  *val = (lsm303agr_odr_a_t) reg.ctrl_reg1_a.odr;
 8003180:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003184:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003188:	7023      	strb	r3, [r4, #0]

  return mm_error;
}
 800318a:	b002      	add	sp, #8
 800318c:	bd10      	pop	{r4, pc}

0800318e <lsm303agr_xl_full_scale_set>:
  * @param  lsm303agr_fs_a_t: change the values of fs in reg CTRL_REG4_A
  *
  */
int32_t lsm303agr_xl_full_scale_set(lsm303agr_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 800318e:	b530      	push	{r4, r5, lr}
 8003190:	b083      	sub	sp, #12
 8003192:	4604      	mov	r4, r0
 8003194:	460d      	mov	r5, r1
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A, &reg.byte, 1);
 8003196:	2301      	movs	r3, #1
 8003198:	aa01      	add	r2, sp, #4
 800319a:	2123      	movs	r1, #35	; 0x23
 800319c:	f7ff ffa4 	bl	80030e8 <lsm303agr_read_reg>
  reg.ctrl_reg4_a.fs = val;
 80031a0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80031a4:	f365 1305 	bfi	r3, r5, #4, #2
 80031a8:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A, &reg.byte, 1);
 80031ac:	2301      	movs	r3, #1
 80031ae:	aa01      	add	r2, sp, #4
 80031b0:	2123      	movs	r1, #35	; 0x23
 80031b2:	4620      	mov	r0, r4
 80031b4:	f7ff ff9d 	bl	80030f2 <lsm303agr_write_reg>

  return mm_error;
}
 80031b8:	b003      	add	sp, #12
 80031ba:	bd30      	pop	{r4, r5, pc}

080031bc <lsm303agr_xl_full_scale_get>:
  * @param  lsm303agr_fs_a_t: Get the values of fs in reg CTRL_REG4_A
  *
  */
int32_t lsm303agr_xl_full_scale_get(lsm303agr_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 80031bc:	b510      	push	{r4, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	460c      	mov	r4, r1
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A, &reg.byte, 1);
 80031c2:	2301      	movs	r3, #1
 80031c4:	aa01      	add	r2, sp, #4
 80031c6:	2123      	movs	r1, #35	; 0x23
 80031c8:	f7ff ff8e 	bl	80030e8 <lsm303agr_read_reg>
  *val = (lsm303agr_fs_a_t) reg.ctrl_reg4_a.fs;
 80031cc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80031d0:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80031d4:	7023      	strb	r3, [r4, #0]

  return mm_error;
}
 80031d6:	b002      	add	sp, #8
 80031d8:	bd10      	pop	{r4, pc}

080031da <lsm303agr_xl_block_data_update_set>:
  * @param  uint8_t val: change the values of bdu in reg CTRL_REG4_A
  *
  */
int32_t lsm303agr_xl_block_data_update_set(lsm303agr_ctx_t *ctx,
                                           uint8_t val)
{
 80031da:	b530      	push	{r4, r5, lr}
 80031dc:	b083      	sub	sp, #12
 80031de:	4604      	mov	r4, r0
 80031e0:	460d      	mov	r5, r1
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A, &reg.byte, 1);
 80031e2:	2301      	movs	r3, #1
 80031e4:	aa01      	add	r2, sp, #4
 80031e6:	2123      	movs	r1, #35	; 0x23
 80031e8:	f7ff ff7e 	bl	80030e8 <lsm303agr_read_reg>
  reg.ctrl_reg4_a.bdu = val;
 80031ec:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80031f0:	f365 13c7 	bfi	r3, r5, #7, #1
 80031f4:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A, &reg.byte, 1);
 80031f8:	2301      	movs	r3, #1
 80031fa:	aa01      	add	r2, sp, #4
 80031fc:	2123      	movs	r1, #35	; 0x23
 80031fe:	4620      	mov	r0, r4
 8003200:	f7ff ff77 	bl	80030f2 <lsm303agr_write_reg>

  return mm_error;
}
 8003204:	b003      	add	sp, #12
 8003206:	bd30      	pop	{r4, r5, pc}

08003208 <lsm303agr_acceleration_raw_get>:
  * @param  lsm303agr_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t lsm303agr_acceleration_raw_get(lsm303agr_ctx_t *ctx, uint8_t *buff)
{
 8003208:	b508      	push	{r3, lr}
  return lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 800320a:	2306      	movs	r3, #6
 800320c:	460a      	mov	r2, r1
 800320e:	2128      	movs	r1, #40	; 0x28
 8003210:	f7ff ff6a 	bl	80030e8 <lsm303agr_read_reg>
}
 8003214:	bd08      	pop	{r3, pc}

08003216 <lsm303agr_mag_operating_mode_set>:
  * @param  lsm303agr_md_t: change the values of md in reg CFG_REG_A_M
  *
  */
int32_t lsm303agr_mag_operating_mode_set(lsm303agr_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 8003216:	b530      	push	{r4, r5, lr}
 8003218:	b083      	sub	sp, #12
 800321a:	4604      	mov	r4, r0
 800321c:	460d      	mov	r5, r1
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M, &reg.byte, 1);
 800321e:	2301      	movs	r3, #1
 8003220:	aa01      	add	r2, sp, #4
 8003222:	2160      	movs	r1, #96	; 0x60
 8003224:	f7ff ff60 	bl	80030e8 <lsm303agr_read_reg>
  reg.cfg_reg_a_m.md = val;
 8003228:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800322c:	f365 0301 	bfi	r3, r5, #0, #2
 8003230:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M, &reg.byte, 1);
 8003234:	2301      	movs	r3, #1
 8003236:	aa01      	add	r2, sp, #4
 8003238:	2160      	movs	r1, #96	; 0x60
 800323a:	4620      	mov	r0, r4
 800323c:	f7ff ff59 	bl	80030f2 <lsm303agr_write_reg>

  return mm_error;
}
 8003240:	b003      	add	sp, #12
 8003242:	bd30      	pop	{r4, r5, pc}

08003244 <lsm303agr_mag_data_rate_set>:
  * @param  lsm303agr_mg_odr_m_t: change the values of odr in reg CFG_REG_A_M
  *
  */
int32_t lsm303agr_mag_data_rate_set(lsm303agr_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8003244:	b530      	push	{r4, r5, lr}
 8003246:	b083      	sub	sp, #12
 8003248:	4604      	mov	r4, r0
 800324a:	460d      	mov	r5, r1
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M, &reg.byte, 1);
 800324c:	2301      	movs	r3, #1
 800324e:	aa01      	add	r2, sp, #4
 8003250:	2160      	movs	r1, #96	; 0x60
 8003252:	f7ff ff49 	bl	80030e8 <lsm303agr_read_reg>
  reg.cfg_reg_a_m.odr = val;
 8003256:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800325a:	f365 0383 	bfi	r3, r5, #2, #2
 800325e:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M, &reg.byte, 1);
 8003262:	2301      	movs	r3, #1
 8003264:	aa01      	add	r2, sp, #4
 8003266:	2160      	movs	r1, #96	; 0x60
 8003268:	4620      	mov	r0, r4
 800326a:	f7ff ff42 	bl	80030f2 <lsm303agr_write_reg>

  return mm_error;
}
 800326e:	b003      	add	sp, #12
 8003270:	bd30      	pop	{r4, r5, pc}

08003272 <lsm303agr_mag_data_rate_get>:
  * @param  lsm303agr_mg_odr_m_tv: Get the values of odr in reg CFG_REG_A_M
  *
  */
int32_t lsm303agr_mag_data_rate_get(lsm303agr_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 8003272:	b510      	push	{r4, lr}
 8003274:	b082      	sub	sp, #8
 8003276:	460c      	mov	r4, r1
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M, &reg.byte, 1);
 8003278:	2301      	movs	r3, #1
 800327a:	aa01      	add	r2, sp, #4
 800327c:	2160      	movs	r1, #96	; 0x60
 800327e:	f7ff ff33 	bl	80030e8 <lsm303agr_read_reg>
  *val = (lsm303agr_mg_odr_m_t) reg.cfg_reg_a_m.odr;
 8003282:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003286:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800328a:	7023      	strb	r3, [r4, #0]

  return mm_error;
}
 800328c:	b002      	add	sp, #8
 800328e:	bd10      	pop	{r4, pc}

08003290 <lsm303agr_mag_block_data_update_set>:
  * @param  uint8_t val: change the values of bdu in reg CFG_REG_C_M
  *
  */
int32_t lsm303agr_mag_block_data_update_set(lsm303agr_ctx_t *ctx,
                                            uint8_t val)
{
 8003290:	b530      	push	{r4, r5, lr}
 8003292:	b083      	sub	sp, #12
 8003294:	4604      	mov	r4, r0
 8003296:	460d      	mov	r5, r1
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 8003298:	2301      	movs	r3, #1
 800329a:	aa01      	add	r2, sp, #4
 800329c:	2162      	movs	r1, #98	; 0x62
 800329e:	f7ff ff23 	bl	80030e8 <lsm303agr_read_reg>
  reg.cfg_reg_c_m.bdu = val;
 80032a2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80032a6:	f365 1304 	bfi	r3, r5, #4, #1
 80032aa:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 80032ae:	2301      	movs	r3, #1
 80032b0:	aa01      	add	r2, sp, #4
 80032b2:	2162      	movs	r1, #98	; 0x62
 80032b4:	4620      	mov	r0, r4
 80032b6:	f7ff ff1c 	bl	80030f2 <lsm303agr_write_reg>

  return mm_error;
}
 80032ba:	b003      	add	sp, #12
 80032bc:	bd30      	pop	{r4, r5, pc}

080032be <lsm303agr_magnetic_raw_get>:
  * @param  lsm303agr_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t lsm303agr_magnetic_raw_get(lsm303agr_ctx_t *ctx, uint8_t *buff)
{
 80032be:	b508      	push	{r3, lr}
  return lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 80032c0:	2306      	movs	r3, #6
 80032c2:	460a      	mov	r2, r1
 80032c4:	2168      	movs	r1, #104	; 0x68
 80032c6:	f7ff ff0f 	bl	80030e8 <lsm303agr_read_reg>
}
 80032ca:	bd08      	pop	{r3, pc}

080032cc <lsm303agr_xl_device_id_get>:
  * @param  lsm303agr_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t lsm303agr_xl_device_id_get(lsm303agr_ctx_t *ctx, uint8_t *buff)
{
 80032cc:	b508      	push	{r3, lr}
  return lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 80032ce:	2301      	movs	r3, #1
 80032d0:	460a      	mov	r2, r1
 80032d2:	210f      	movs	r1, #15
 80032d4:	f7ff ff08 	bl	80030e8 <lsm303agr_read_reg>
}
 80032d8:	bd08      	pop	{r3, pc}

080032da <lsm303agr_mag_device_id_get>:
  * @param  lsm303agr_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t lsm303agr_mag_device_id_get(lsm303agr_ctx_t *ctx, uint8_t *buff)
{
 80032da:	b508      	push	{r3, lr}
  return lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 80032dc:	2301      	movs	r3, #1
 80032de:	460a      	mov	r2, r1
 80032e0:	214f      	movs	r1, #79	; 0x4f
 80032e2:	f7ff ff01 	bl	80030e8 <lsm303agr_read_reg>
}
 80032e6:	bd08      	pop	{r3, pc}

080032e8 <lsm303agr_mag_self_test_set>:
  * @param  lsm303agr_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t val: change the values of self_test in reg CFG_REG_C_M
  *
  */
int32_t lsm303agr_mag_self_test_set(lsm303agr_ctx_t *ctx, uint8_t val)
{
 80032e8:	b530      	push	{r4, r5, lr}
 80032ea:	b083      	sub	sp, #12
 80032ec:	4604      	mov	r4, r0
 80032ee:	460d      	mov	r5, r1
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 80032f0:	2301      	movs	r3, #1
 80032f2:	aa01      	add	r2, sp, #4
 80032f4:	2162      	movs	r1, #98	; 0x62
 80032f6:	f7ff fef7 	bl	80030e8 <lsm303agr_read_reg>
  reg.cfg_reg_c_m.self_test = val;
 80032fa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80032fe:	f365 0341 	bfi	r3, r5, #1, #1
 8003302:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 8003306:	2301      	movs	r3, #1
 8003308:	aa01      	add	r2, sp, #4
 800330a:	2162      	movs	r1, #98	; 0x62
 800330c:	4620      	mov	r0, r4
 800330e:	f7ff fef0 	bl	80030f2 <lsm303agr_write_reg>

  return mm_error;
}
 8003312:	b003      	add	sp, #12
 8003314:	bd30      	pop	{r4, r5, pc}

08003316 <lsm303agr_xl_fifo_mode_set>:
  * @param  lsm303agr_fm_a_t: change the values of fm in reg FIFO_CTRL_REG_A
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(lsm303agr_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 8003316:	b530      	push	{r4, r5, lr}
 8003318:	b083      	sub	sp, #12
 800331a:	4604      	mov	r4, r0
 800331c:	460d      	mov	r5, r1
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 800331e:	2301      	movs	r3, #1
 8003320:	aa01      	add	r2, sp, #4
 8003322:	212e      	movs	r1, #46	; 0x2e
 8003324:	f7ff fee0 	bl	80030e8 <lsm303agr_read_reg>
                                &reg.byte, 1);
  reg.fifo_ctrl_reg_a.fm = val;
 8003328:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800332c:	f365 1387 	bfi	r3, r5, #6, #2
 8003330:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8003334:	2301      	movs	r3, #1
 8003336:	aa01      	add	r2, sp, #4
 8003338:	212e      	movs	r1, #46	; 0x2e
 800333a:	4620      	mov	r0, r4
 800333c:	f7ff fed9 	bl	80030f2 <lsm303agr_write_reg>
                                 &reg.byte, 1);

  return mm_error;
}
 8003340:	b003      	add	sp, #12
 8003342:	bd30      	pop	{r4, r5, pc}

08003344 <lsm303agr_mag_i2c_interface_set>:
  *                                reg CFG_REG_C_M
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(lsm303agr_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 8003344:	b530      	push	{r4, r5, lr}
 8003346:	b083      	sub	sp, #12
 8003348:	4604      	mov	r4, r0
 800334a:	460d      	mov	r5, r1
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 800334c:	2301      	movs	r3, #1
 800334e:	aa01      	add	r2, sp, #4
 8003350:	2162      	movs	r1, #98	; 0x62
 8003352:	f7ff fec9 	bl	80030e8 <lsm303agr_read_reg>
  reg.cfg_reg_c_m.i2c_dis = val;
 8003356:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800335a:	f365 1345 	bfi	r3, r5, #5, #1
 800335e:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 8003362:	2301      	movs	r3, #1
 8003364:	aa01      	add	r2, sp, #4
 8003366:	2162      	movs	r1, #98	; 0x62
 8003368:	4620      	mov	r0, r4
 800336a:	f7ff fec2 	bl	80030f2 <lsm303agr_write_reg>

  return mm_error;
}
 800336e:	b003      	add	sp, #12
 8003370:	bd30      	pop	{r4, r5, pc}
	...

08003374 <LSM6DSL_GetCapabilities>:
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8003374:	2301      	movs	r3, #1
 8003376:	700b      	strb	r3, [r1, #0]
  Capabilities->Gyro         = 1;
 8003378:	704b      	strb	r3, [r1, #1]
  Capabilities->Magneto      = 0;
 800337a:	2000      	movs	r0, #0
 800337c:	7088      	strb	r0, [r1, #2]
  Capabilities->LowPower     = 0;
 800337e:	70c8      	strb	r0, [r1, #3]
  Capabilities->GyroMaxFS    = 2000;
 8003380:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003384:	604b      	str	r3, [r1, #4]
  Capabilities->AccMaxFS     = 16;
 8003386:	2310      	movs	r3, #16
 8003388:	608b      	str	r3, [r1, #8]
  Capabilities->MagMaxFS     = 0;
 800338a:	60c8      	str	r0, [r1, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 800338c:	4b02      	ldr	r3, [pc, #8]	; (8003398 <LSM6DSL_GetCapabilities+0x24>)
 800338e:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8003390:	614b      	str	r3, [r1, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8003392:	2300      	movs	r3, #0
 8003394:	618b      	str	r3, [r1, #24]
  return LSM6DSL_OK;
}
 8003396:	4770      	bx	lr
 8003398:	45d02000 	.word	0x45d02000

0800339c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                  : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 800339c:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 80033a0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80033a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a8:	d93b      	bls.n	8003422 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x86>
 80033aa:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 80033ae:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80033b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b6:	d939      	bls.n	800342c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 80033b8:	eddf 7a23 	vldr	s15, [pc, #140]	; 8003448 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xac>
 80033bc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80033c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033c4:	d934      	bls.n	8003430 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x94>
 80033c6:	eddf 7a21 	vldr	s15, [pc, #132]	; 800344c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xb0>
 80033ca:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80033ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d2:	d92f      	bls.n	8003434 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x98>
 80033d4:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8003450 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xb4>
 80033d8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80033dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033e0:	d92a      	bls.n	8003438 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x9c>
 80033e2:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8003454 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xb8>
 80033e6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80033ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ee:	d925      	bls.n	800343c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa0>
 80033f0:	eddf 7a19 	vldr	s15, [pc, #100]	; 8003458 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80033f4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80033f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033fc:	d920      	bls.n	8003440 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa4>
 80033fe:	eddf 7a17 	vldr	s15, [pc, #92]	; 800345c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8003402:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800340a:	d91b      	bls.n	8003444 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa8>
 800340c:	eddf 7a14 	vldr	s15, [pc, #80]	; 8003460 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xc4>
 8003410:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003418:	d901      	bls.n	800341e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x82>
 800341a:	230a      	movs	r3, #10
 800341c:	e002      	b.n	8003424 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x88>
 800341e:	2309      	movs	r3, #9
 8003420:	e000      	b.n	8003424 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x88>
 8003422:	2301      	movs	r3, #1
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8003424:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
                  : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                  : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                  :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
}
 8003428:	2000      	movs	r0, #0
 800342a:	4770      	bx	lr
                  : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 800342c:	2302      	movs	r3, #2
 800342e:	e7f9      	b.n	8003424 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x88>
 8003430:	2303      	movs	r3, #3
 8003432:	e7f7      	b.n	8003424 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x88>
 8003434:	2304      	movs	r3, #4
 8003436:	e7f5      	b.n	8003424 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x88>
 8003438:	2305      	movs	r3, #5
 800343a:	e7f3      	b.n	8003424 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x88>
 800343c:	2306      	movs	r3, #6
 800343e:	e7f1      	b.n	8003424 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x88>
 8003440:	2307      	movs	r3, #7
 8003442:	e7ef      	b.n	8003424 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x88>
 8003444:	2308      	movs	r3, #8
 8003446:	e7ed      	b.n	8003424 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x88>
 8003448:	42500000 	.word	0x42500000
 800344c:	42d00000 	.word	0x42d00000
 8003450:	43500000 	.word	0x43500000
 8003454:	43d00000 	.word	0x43d00000
 8003458:	44504000 	.word	0x44504000
 800345c:	44cf8000 	.word	0x44cf8000
 8003460:	45502000 	.word	0x45502000

08003464 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8003464:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 8003468:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800346c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003470:	d93b      	bls.n	80034ea <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x86>
 8003472:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8003476:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800347a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800347e:	d939      	bls.n	80034f4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8003480:	eddf 7a23 	vldr	s15, [pc, #140]	; 8003510 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xac>
 8003484:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800348c:	d934      	bls.n	80034f8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x94>
 800348e:	eddf 7a21 	vldr	s15, [pc, #132]	; 8003514 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xb0>
 8003492:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800349a:	d92f      	bls.n	80034fc <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x98>
 800349c:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8003518 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xb4>
 80034a0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80034a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a8:	d92a      	bls.n	8003500 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x9c>
 80034aa:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800351c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xb8>
 80034ae:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80034b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b6:	d925      	bls.n	8003504 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa0>
 80034b8:	eddf 7a19 	vldr	s15, [pc, #100]	; 8003520 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 80034bc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80034c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034c4:	d920      	bls.n	8003508 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa4>
 80034c6:	eddf 7a17 	vldr	s15, [pc, #92]	; 8003524 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xc0>
 80034ca:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80034ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d2:	d91b      	bls.n	800350c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa8>
 80034d4:	eddf 7a14 	vldr	s15, [pc, #80]	; 8003528 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xc4>
 80034d8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80034dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034e0:	d901      	bls.n	80034e6 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x82>
 80034e2:	230a      	movs	r3, #10
 80034e4:	e002      	b.n	80034ec <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x88>
 80034e6:	2309      	movs	r3, #9
 80034e8:	e000      	b.n	80034ec <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x88>
 80034ea:	2301      	movs	r3, #1
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 80034ec:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
                   : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                   : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                   :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
}
 80034f0:	2000      	movs	r0, #0
 80034f2:	4770      	bx	lr
                   : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 80034f4:	2302      	movs	r3, #2
 80034f6:	e7f9      	b.n	80034ec <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x88>
 80034f8:	2303      	movs	r3, #3
 80034fa:	e7f7      	b.n	80034ec <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x88>
 80034fc:	2304      	movs	r3, #4
 80034fe:	e7f5      	b.n	80034ec <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x88>
 8003500:	2305      	movs	r3, #5
 8003502:	e7f3      	b.n	80034ec <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x88>
 8003504:	2306      	movs	r3, #6
 8003506:	e7f1      	b.n	80034ec <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x88>
 8003508:	2307      	movs	r3, #7
 800350a:	e7ef      	b.n	80034ec <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x88>
 800350c:	2308      	movs	r3, #8
 800350e:	e7ed      	b.n	80034ec <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x88>
 8003510:	42500000 	.word	0x42500000
 8003514:	42d00000 	.word	0x42d00000
 8003518:	43500000 	.word	0x43500000
 800351c:	43d00000 	.word	0x43d00000
 8003520:	44504000 	.word	0x44504000
 8003524:	44cf8000 	.word	0x44cf8000
 8003528:	45502000 	.word	0x45502000

0800352c <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800352c:	b510      	push	{r4, lr}
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800352e:	6944      	ldr	r4, [r0, #20]
 8003530:	7b00      	ldrb	r0, [r0, #12]
 8003532:	47a0      	blx	r4
}
 8003534:	bd10      	pop	{r4, pc}

08003536 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003536:	b510      	push	{r4, lr}
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003538:	6904      	ldr	r4, [r0, #16]
 800353a:	7b00      	ldrb	r0, [r0, #12]
 800353c:	47a0      	blx	r4
}
 800353e:	bd10      	pop	{r4, pc}

08003540 <LSM6DSL_ACC_Enable>:
  if (pObj->acc_is_enabled == 1U)
 8003540:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8003544:	2b01      	cmp	r3, #1
 8003546:	d00d      	beq.n	8003564 <LSM6DSL_ACC_Enable+0x24>
{
 8003548:	b510      	push	{r4, lr}
 800354a:	4604      	mov	r4, r0
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 800354c:	f890 102b 	ldrb.w	r1, [r0, #43]	; 0x2b
 8003550:	301c      	adds	r0, #28
 8003552:	f000 fca3 	bl	8003e9c <lsm6dsl_xl_data_rate_set>
 8003556:	4603      	mov	r3, r0
 8003558:	b938      	cbnz	r0, 800356a <LSM6DSL_ACC_Enable+0x2a>
  pObj->acc_is_enabled = 1;
 800355a:	2201      	movs	r2, #1
 800355c:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
}
 8003560:	4618      	mov	r0, r3
 8003562:	bd10      	pop	{r4, pc}
    return LSM6DSL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	4770      	bx	lr
    return LSM6DSL_ERROR;
 800356a:	f04f 33ff 	mov.w	r3, #4294967295
 800356e:	e7f7      	b.n	8003560 <LSM6DSL_ACC_Enable+0x20>

08003570 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
{
 8003570:	b508      	push	{r3, lr}
            : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8003572:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 8003576:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800357a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800357e:	d939      	bls.n	80035f4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x84>
 8003580:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8003584:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800358c:	d93a      	bls.n	8003604 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x94>
 800358e:	eddf 7a27 	vldr	s15, [pc, #156]	; 800362c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8003592:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800359a:	d935      	bls.n	8003608 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x98>
 800359c:	eddf 7a24 	vldr	s15, [pc, #144]	; 8003630 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xc0>
 80035a0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80035a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035a8:	d930      	bls.n	800360c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x9c>
 80035aa:	eddf 7a22 	vldr	s15, [pc, #136]	; 8003634 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xc4>
 80035ae:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80035b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035b6:	d92b      	bls.n	8003610 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa0>
 80035b8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8003638 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xc8>
 80035bc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80035c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035c4:	d926      	bls.n	8003614 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa4>
 80035c6:	eddf 7a1d 	vldr	s15, [pc, #116]	; 800363c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xcc>
 80035ca:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80035ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035d2:	d921      	bls.n	8003618 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa8>
 80035d4:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8003640 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd0>
 80035d8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80035dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035e0:	d91c      	bls.n	800361c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xac>
 80035e2:	eddf 7a18 	vldr	s15, [pc, #96]	; 8003644 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80035e6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80035ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ee:	d817      	bhi.n	8003620 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xb0>
 80035f0:	2109      	movs	r1, #9
 80035f2:	e000      	b.n	80035f6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x86>
 80035f4:	2101      	movs	r1, #1
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 80035f6:	301c      	adds	r0, #28
 80035f8:	f000 fc50 	bl	8003e9c <lsm6dsl_xl_data_rate_set>
 80035fc:	4603      	mov	r3, r0
 80035fe:	b988      	cbnz	r0, 8003624 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xb4>
}
 8003600:	4618      	mov	r0, r3
 8003602:	bd08      	pop	{r3, pc}
            : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8003604:	2102      	movs	r1, #2
 8003606:	e7f6      	b.n	80035f6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x86>
 8003608:	2103      	movs	r1, #3
 800360a:	e7f4      	b.n	80035f6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x86>
 800360c:	2104      	movs	r1, #4
 800360e:	e7f2      	b.n	80035f6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x86>
 8003610:	2105      	movs	r1, #5
 8003612:	e7f0      	b.n	80035f6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x86>
 8003614:	2106      	movs	r1, #6
 8003616:	e7ee      	b.n	80035f6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x86>
 8003618:	2107      	movs	r1, #7
 800361a:	e7ec      	b.n	80035f6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x86>
 800361c:	2108      	movs	r1, #8
 800361e:	e7ea      	b.n	80035f6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x86>
 8003620:	210a      	movs	r1, #10
 8003622:	e7e8      	b.n	80035f6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x86>
    return LSM6DSL_ERROR;
 8003624:	f04f 33ff 	mov.w	r3, #4294967295
 8003628:	e7ea      	b.n	8003600 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 800362a:	bf00      	nop
 800362c:	42500000 	.word	0x42500000
 8003630:	42d00000 	.word	0x42d00000
 8003634:	43500000 	.word	0x43500000
 8003638:	43d00000 	.word	0x43d00000
 800363c:	44504000 	.word	0x44504000
 8003640:	44cf8000 	.word	0x44cf8000
 8003644:	45502000 	.word	0x45502000

08003648 <LSM6DSL_ACC_SetOutputDataRate>:
{
 8003648:	b508      	push	{r3, lr}
  if (pObj->acc_is_enabled == 1U)
 800364a:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800364e:	2b01      	cmp	r3, #1
 8003650:	d002      	beq.n	8003658 <LSM6DSL_ACC_SetOutputDataRate+0x10>
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003652:	f7ff fea3 	bl	800339c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
}
 8003656:	bd08      	pop	{r3, pc}
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8003658:	f7ff ff8a 	bl	8003570 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 800365c:	bd08      	pop	{r3, pc}

0800365e <LSM6DSL_ACC_SetFullScale>:
{
 800365e:	b508      	push	{r3, lr}
           : (FullScale <= 4) ? LSM6DSL_4g
 8003660:	2902      	cmp	r1, #2
 8003662:	dd05      	ble.n	8003670 <LSM6DSL_ACC_SetFullScale+0x12>
 8003664:	2904      	cmp	r1, #4
 8003666:	dd0b      	ble.n	8003680 <LSM6DSL_ACC_SetFullScale+0x22>
 8003668:	2908      	cmp	r1, #8
 800366a:	dc0b      	bgt.n	8003684 <LSM6DSL_ACC_SetFullScale+0x26>
 800366c:	2103      	movs	r1, #3
 800366e:	e000      	b.n	8003672 <LSM6DSL_ACC_SetFullScale+0x14>
 8003670:	2100      	movs	r1, #0
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8003672:	301c      	adds	r0, #28
 8003674:	f000 fbd4 	bl	8003e20 <lsm6dsl_xl_full_scale_set>
 8003678:	4603      	mov	r3, r0
 800367a:	b928      	cbnz	r0, 8003688 <LSM6DSL_ACC_SetFullScale+0x2a>
}
 800367c:	4618      	mov	r0, r3
 800367e:	bd08      	pop	{r3, pc}
           : (FullScale <= 4) ? LSM6DSL_4g
 8003680:	2102      	movs	r1, #2
 8003682:	e7f6      	b.n	8003672 <LSM6DSL_ACC_SetFullScale+0x14>
 8003684:	2101      	movs	r1, #1
 8003686:	e7f4      	b.n	8003672 <LSM6DSL_ACC_SetFullScale+0x14>
    return LSM6DSL_ERROR;
 8003688:	f04f 33ff 	mov.w	r3, #4294967295
 800368c:	e7f6      	b.n	800367c <LSM6DSL_ACC_SetFullScale+0x1e>

0800368e <LSM6DSL_GYRO_Enable>:
  if (pObj->gyro_is_enabled == 1U)
 800368e:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8003692:	2b01      	cmp	r3, #1
 8003694:	d00d      	beq.n	80036b2 <LSM6DSL_GYRO_Enable+0x24>
{
 8003696:	b510      	push	{r4, lr}
 8003698:	4604      	mov	r4, r0
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 800369a:	f890 102c 	ldrb.w	r1, [r0, #44]	; 0x2c
 800369e:	301c      	adds	r0, #28
 80036a0:	f000 fc98 	bl	8003fd4 <lsm6dsl_gy_data_rate_set>
 80036a4:	4603      	mov	r3, r0
 80036a6:	b938      	cbnz	r0, 80036b8 <LSM6DSL_GYRO_Enable+0x2a>
  pObj->gyro_is_enabled = 1;
 80036a8:	2201      	movs	r2, #1
 80036aa:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	bd10      	pop	{r4, pc}
    return LSM6DSL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	4770      	bx	lr
    return LSM6DSL_ERROR;
 80036b8:	f04f 33ff 	mov.w	r3, #4294967295
 80036bc:	e7f7      	b.n	80036ae <LSM6DSL_GYRO_Enable+0x20>
	...

080036c0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
{
 80036c0:	b508      	push	{r3, lr}
            : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 80036c2:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 80036c6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80036ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ce:	d939      	bls.n	8003744 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x84>
 80036d0:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 80036d4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80036d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036dc:	d93a      	bls.n	8003754 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x94>
 80036de:	eddf 7a27 	vldr	s15, [pc, #156]	; 800377c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 80036e2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80036e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ea:	d935      	bls.n	8003758 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x98>
 80036ec:	eddf 7a24 	vldr	s15, [pc, #144]	; 8003780 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xc0>
 80036f0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80036f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036f8:	d930      	bls.n	800375c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x9c>
 80036fa:	eddf 7a22 	vldr	s15, [pc, #136]	; 8003784 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xc4>
 80036fe:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003706:	d92b      	bls.n	8003760 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa0>
 8003708:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8003788 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xc8>
 800370c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003714:	d926      	bls.n	8003764 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa4>
 8003716:	eddf 7a1d 	vldr	s15, [pc, #116]	; 800378c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xcc>
 800371a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800371e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003722:	d921      	bls.n	8003768 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa8>
 8003724:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8003790 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd0>
 8003728:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800372c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003730:	d91c      	bls.n	800376c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xac>
 8003732:	eddf 7a18 	vldr	s15, [pc, #96]	; 8003794 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003736:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800373a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800373e:	d817      	bhi.n	8003770 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xb0>
 8003740:	2109      	movs	r1, #9
 8003742:	e000      	b.n	8003746 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x86>
 8003744:	2101      	movs	r1, #1
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8003746:	301c      	adds	r0, #28
 8003748:	f000 fc44 	bl	8003fd4 <lsm6dsl_gy_data_rate_set>
 800374c:	4603      	mov	r3, r0
 800374e:	b988      	cbnz	r0, 8003774 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xb4>
}
 8003750:	4618      	mov	r0, r3
 8003752:	bd08      	pop	{r3, pc}
            : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8003754:	2102      	movs	r1, #2
 8003756:	e7f6      	b.n	8003746 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x86>
 8003758:	2103      	movs	r1, #3
 800375a:	e7f4      	b.n	8003746 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x86>
 800375c:	2104      	movs	r1, #4
 800375e:	e7f2      	b.n	8003746 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x86>
 8003760:	2105      	movs	r1, #5
 8003762:	e7f0      	b.n	8003746 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x86>
 8003764:	2106      	movs	r1, #6
 8003766:	e7ee      	b.n	8003746 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x86>
 8003768:	2107      	movs	r1, #7
 800376a:	e7ec      	b.n	8003746 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x86>
 800376c:	2108      	movs	r1, #8
 800376e:	e7ea      	b.n	8003746 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x86>
 8003770:	210a      	movs	r1, #10
 8003772:	e7e8      	b.n	8003746 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x86>
    return LSM6DSL_ERROR;
 8003774:	f04f 33ff 	mov.w	r3, #4294967295
 8003778:	e7ea      	b.n	8003750 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 800377a:	bf00      	nop
 800377c:	42500000 	.word	0x42500000
 8003780:	42d00000 	.word	0x42d00000
 8003784:	43500000 	.word	0x43500000
 8003788:	43d00000 	.word	0x43d00000
 800378c:	44504000 	.word	0x44504000
 8003790:	44cf8000 	.word	0x44cf8000
 8003794:	45502000 	.word	0x45502000

08003798 <LSM6DSL_GYRO_SetOutputDataRate>:
{
 8003798:	b508      	push	{r3, lr}
  if (pObj->gyro_is_enabled == 1U)
 800379a:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d002      	beq.n	80037a8 <LSM6DSL_GYRO_SetOutputDataRate+0x10>
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 80037a2:	f7ff fe5f 	bl	8003464 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
}
 80037a6:	bd08      	pop	{r3, pc}
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 80037a8:	f7ff ff8a 	bl	80036c0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 80037ac:	bd08      	pop	{r3, pc}

080037ae <LSM6DSL_Init>:
{
 80037ae:	b538      	push	{r3, r4, r5, lr}
 80037b0:	4605      	mov	r5, r0
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80037b2:	f100 041c 	add.w	r4, r0, #28
 80037b6:	2101      	movs	r1, #1
 80037b8:	4620      	mov	r0, r4
 80037ba:	f000 fc92 	bl	80040e2 <lsm6dsl_auto_increment_set>
 80037be:	bb48      	cbnz	r0, 8003814 <LSM6DSL_Init+0x66>
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80037c0:	2101      	movs	r1, #1
 80037c2:	4620      	mov	r0, r4
 80037c4:	f000 fc5c 	bl	8004080 <lsm6dsl_block_data_update_set>
 80037c8:	bb38      	cbnz	r0, 800381a <LSM6DSL_Init+0x6c>
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 80037ca:	2100      	movs	r1, #0
 80037cc:	4620      	mov	r0, r4
 80037ce:	f000 fca4 	bl	800411a <lsm6dsl_fifo_mode_set>
 80037d2:	bb28      	cbnz	r0, 8003820 <LSM6DSL_Init+0x72>
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 80037d4:	2304      	movs	r3, #4
 80037d6:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 80037da:	2100      	movs	r1, #0
 80037dc:	4620      	mov	r0, r4
 80037de:	f000 fb5d 	bl	8003e9c <lsm6dsl_xl_data_rate_set>
 80037e2:	bb00      	cbnz	r0, 8003826 <LSM6DSL_Init+0x78>
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 80037e4:	2100      	movs	r1, #0
 80037e6:	4620      	mov	r0, r4
 80037e8:	f000 fb1a 	bl	8003e20 <lsm6dsl_xl_full_scale_set>
 80037ec:	b9f0      	cbnz	r0, 800382c <LSM6DSL_Init+0x7e>
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 80037ee:	2304      	movs	r3, #4
 80037f0:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 80037f4:	2100      	movs	r1, #0
 80037f6:	4620      	mov	r0, r4
 80037f8:	f000 fbec 	bl	8003fd4 <lsm6dsl_gy_data_rate_set>
 80037fc:	b9c8      	cbnz	r0, 8003832 <LSM6DSL_Init+0x84>
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 80037fe:	2106      	movs	r1, #6
 8003800:	4620      	mov	r0, r4
 8003802:	f000 fba4 	bl	8003f4e <lsm6dsl_gy_full_scale_set>
 8003806:	4603      	mov	r3, r0
 8003808:	b9b0      	cbnz	r0, 8003838 <LSM6DSL_Init+0x8a>
  pObj->is_initialized = 1;
 800380a:	2201      	movs	r2, #1
 800380c:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
}
 8003810:	4618      	mov	r0, r3
 8003812:	bd38      	pop	{r3, r4, r5, pc}
    return LSM6DSL_ERROR;
 8003814:	f04f 33ff 	mov.w	r3, #4294967295
 8003818:	e7fa      	b.n	8003810 <LSM6DSL_Init+0x62>
    return LSM6DSL_ERROR;
 800381a:	f04f 33ff 	mov.w	r3, #4294967295
 800381e:	e7f7      	b.n	8003810 <LSM6DSL_Init+0x62>
    return LSM6DSL_ERROR;
 8003820:	f04f 33ff 	mov.w	r3, #4294967295
 8003824:	e7f4      	b.n	8003810 <LSM6DSL_Init+0x62>
    return LSM6DSL_ERROR;
 8003826:	f04f 33ff 	mov.w	r3, #4294967295
 800382a:	e7f1      	b.n	8003810 <LSM6DSL_Init+0x62>
    return LSM6DSL_ERROR;
 800382c:	f04f 33ff 	mov.w	r3, #4294967295
 8003830:	e7ee      	b.n	8003810 <LSM6DSL_Init+0x62>
    return LSM6DSL_ERROR;
 8003832:	f04f 33ff 	mov.w	r3, #4294967295
 8003836:	e7eb      	b.n	8003810 <LSM6DSL_Init+0x62>
    return LSM6DSL_ERROR;
 8003838:	f04f 33ff 	mov.w	r3, #4294967295
 800383c:	e7e8      	b.n	8003810 <LSM6DSL_Init+0x62>

0800383e <LSM6DSL_GYRO_SetFullScale>:
{
 800383e:	b508      	push	{r3, lr}
           : (FullScale <= 250)  ? LSM6DSL_250dps
 8003840:	297d      	cmp	r1, #125	; 0x7d
 8003842:	dd09      	ble.n	8003858 <LSM6DSL_GYRO_SetFullScale+0x1a>
 8003844:	29fa      	cmp	r1, #250	; 0xfa
 8003846:	dd0f      	ble.n	8003868 <LSM6DSL_GYRO_SetFullScale+0x2a>
 8003848:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
 800384c:	dd0e      	ble.n	800386c <LSM6DSL_GYRO_SetFullScale+0x2e>
 800384e:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8003852:	dc0d      	bgt.n	8003870 <LSM6DSL_GYRO_SetFullScale+0x32>
 8003854:	2104      	movs	r1, #4
 8003856:	e000      	b.n	800385a <LSM6DSL_GYRO_SetFullScale+0x1c>
 8003858:	2101      	movs	r1, #1
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 800385a:	301c      	adds	r0, #28
 800385c:	f000 fb77 	bl	8003f4e <lsm6dsl_gy_full_scale_set>
 8003860:	4603      	mov	r3, r0
 8003862:	b938      	cbnz	r0, 8003874 <LSM6DSL_GYRO_SetFullScale+0x36>
}
 8003864:	4618      	mov	r0, r3
 8003866:	bd08      	pop	{r3, pc}
           : (FullScale <= 250)  ? LSM6DSL_250dps
 8003868:	2100      	movs	r1, #0
 800386a:	e7f6      	b.n	800385a <LSM6DSL_GYRO_SetFullScale+0x1c>
 800386c:	2102      	movs	r1, #2
 800386e:	e7f4      	b.n	800385a <LSM6DSL_GYRO_SetFullScale+0x1c>
 8003870:	2106      	movs	r1, #6
 8003872:	e7f2      	b.n	800385a <LSM6DSL_GYRO_SetFullScale+0x1c>
    return LSM6DSL_ERROR;
 8003874:	f04f 33ff 	mov.w	r3, #4294967295
 8003878:	e7f4      	b.n	8003864 <LSM6DSL_GYRO_SetFullScale+0x26>

0800387a <LSM6DSL_ReadID>:
{
 800387a:	b508      	push	{r3, lr}
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 800387c:	301c      	adds	r0, #28
 800387e:	f000 fc29 	bl	80040d4 <lsm6dsl_device_id_get>
 8003882:	4603      	mov	r3, r0
 8003884:	b908      	cbnz	r0, 800388a <LSM6DSL_ReadID+0x10>
}
 8003886:	4618      	mov	r0, r3
 8003888:	bd08      	pop	{r3, pc}
    return LSM6DSL_ERROR;
 800388a:	f04f 33ff 	mov.w	r3, #4294967295
 800388e:	e7fa      	b.n	8003886 <LSM6DSL_ReadID+0xc>

08003890 <LSM6DSL_ACC_Disable>:
{
 8003890:	b538      	push	{r3, r4, r5, lr}
  if (pObj->acc_is_enabled == 0U)
 8003892:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8003896:	b913      	cbnz	r3, 800389e <LSM6DSL_ACC_Disable+0xe>
    return LSM6DSL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	bd38      	pop	{r3, r4, r5, pc}
 800389e:	4604      	mov	r4, r0
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 80038a0:	f100 051c 	add.w	r5, r0, #28
 80038a4:	f100 012b 	add.w	r1, r0, #43	; 0x2b
 80038a8:	4628      	mov	r0, r5
 80038aa:	f000 fb13 	bl	8003ed4 <lsm6dsl_xl_data_rate_get>
 80038ae:	b948      	cbnz	r0, 80038c4 <LSM6DSL_ACC_Disable+0x34>
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 80038b0:	2100      	movs	r1, #0
 80038b2:	4628      	mov	r0, r5
 80038b4:	f000 faf2 	bl	8003e9c <lsm6dsl_xl_data_rate_set>
 80038b8:	4603      	mov	r3, r0
 80038ba:	b930      	cbnz	r0, 80038ca <LSM6DSL_ACC_Disable+0x3a>
  pObj->acc_is_enabled = 0;
 80038bc:	2200      	movs	r2, #0
 80038be:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  return LSM6DSL_OK;
 80038c2:	e7ea      	b.n	800389a <LSM6DSL_ACC_Disable+0xa>
    return LSM6DSL_ERROR;
 80038c4:	f04f 33ff 	mov.w	r3, #4294967295
 80038c8:	e7e7      	b.n	800389a <LSM6DSL_ACC_Disable+0xa>
    return LSM6DSL_ERROR;
 80038ca:	f04f 33ff 	mov.w	r3, #4294967295
 80038ce:	e7e4      	b.n	800389a <LSM6DSL_ACC_Disable+0xa>

080038d0 <LSM6DSL_ACC_GetOutputDataRate>:
{
 80038d0:	b510      	push	{r4, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	460c      	mov	r4, r1
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 80038d6:	f10d 0107 	add.w	r1, sp, #7
 80038da:	301c      	adds	r0, #28
 80038dc:	f000 fafa 	bl	8003ed4 <lsm6dsl_xl_data_rate_get>
 80038e0:	2800      	cmp	r0, #0
 80038e2:	d132      	bne.n	800394a <LSM6DSL_ACC_GetOutputDataRate+0x7a>
 80038e4:	4602      	mov	r2, r0
  switch (odr_low_level)
 80038e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80038ea:	2b0b      	cmp	r3, #11
 80038ec:	d830      	bhi.n	8003950 <LSM6DSL_ACC_GetOutputDataRate+0x80>
 80038ee:	e8df f003 	tbb	[pc, r3]
 80038f2:	0e06      	.short	0x0e06
 80038f4:	1a171411 	.word	0x1a171411
 80038f8:	2623201d 	.word	0x2623201d
 80038fc:	0b29      	.short	0x0b29
      *Odr = 0.0f;
 80038fe:	2300      	movs	r3, #0
 8003900:	6023      	str	r3, [r4, #0]
}
 8003902:	4610      	mov	r0, r2
 8003904:	b002      	add	sp, #8
 8003906:	bd10      	pop	{r4, pc}
      *Odr = 1.6f;
 8003908:	4b13      	ldr	r3, [pc, #76]	; (8003958 <LSM6DSL_ACC_GetOutputDataRate+0x88>)
 800390a:	6023      	str	r3, [r4, #0]
      break;
 800390c:	e7f9      	b.n	8003902 <LSM6DSL_ACC_GetOutputDataRate+0x32>
      *Odr = 12.5f;
 800390e:	4b13      	ldr	r3, [pc, #76]	; (800395c <LSM6DSL_ACC_GetOutputDataRate+0x8c>)
 8003910:	6023      	str	r3, [r4, #0]
      break;
 8003912:	e7f6      	b.n	8003902 <LSM6DSL_ACC_GetOutputDataRate+0x32>
      *Odr = 26.0f;
 8003914:	4b12      	ldr	r3, [pc, #72]	; (8003960 <LSM6DSL_ACC_GetOutputDataRate+0x90>)
 8003916:	6023      	str	r3, [r4, #0]
      break;
 8003918:	e7f3      	b.n	8003902 <LSM6DSL_ACC_GetOutputDataRate+0x32>
      *Odr = 52.0f;
 800391a:	4b12      	ldr	r3, [pc, #72]	; (8003964 <LSM6DSL_ACC_GetOutputDataRate+0x94>)
 800391c:	6023      	str	r3, [r4, #0]
      break;
 800391e:	e7f0      	b.n	8003902 <LSM6DSL_ACC_GetOutputDataRate+0x32>
      *Odr = 104.0f;
 8003920:	4b11      	ldr	r3, [pc, #68]	; (8003968 <LSM6DSL_ACC_GetOutputDataRate+0x98>)
 8003922:	6023      	str	r3, [r4, #0]
      break;
 8003924:	e7ed      	b.n	8003902 <LSM6DSL_ACC_GetOutputDataRate+0x32>
      *Odr = 208.0f;
 8003926:	4b11      	ldr	r3, [pc, #68]	; (800396c <LSM6DSL_ACC_GetOutputDataRate+0x9c>)
 8003928:	6023      	str	r3, [r4, #0]
      break;
 800392a:	e7ea      	b.n	8003902 <LSM6DSL_ACC_GetOutputDataRate+0x32>
      *Odr = 416.0f;
 800392c:	4b10      	ldr	r3, [pc, #64]	; (8003970 <LSM6DSL_ACC_GetOutputDataRate+0xa0>)
 800392e:	6023      	str	r3, [r4, #0]
      break;
 8003930:	e7e7      	b.n	8003902 <LSM6DSL_ACC_GetOutputDataRate+0x32>
      *Odr = 833.0f;
 8003932:	4b10      	ldr	r3, [pc, #64]	; (8003974 <LSM6DSL_ACC_GetOutputDataRate+0xa4>)
 8003934:	6023      	str	r3, [r4, #0]
      break;
 8003936:	e7e4      	b.n	8003902 <LSM6DSL_ACC_GetOutputDataRate+0x32>
      *Odr = 1660.0f;
 8003938:	4b0f      	ldr	r3, [pc, #60]	; (8003978 <LSM6DSL_ACC_GetOutputDataRate+0xa8>)
 800393a:	6023      	str	r3, [r4, #0]
      break;
 800393c:	e7e1      	b.n	8003902 <LSM6DSL_ACC_GetOutputDataRate+0x32>
      *Odr = 3330.0f;
 800393e:	4b0f      	ldr	r3, [pc, #60]	; (800397c <LSM6DSL_ACC_GetOutputDataRate+0xac>)
 8003940:	6023      	str	r3, [r4, #0]
      break;
 8003942:	e7de      	b.n	8003902 <LSM6DSL_ACC_GetOutputDataRate+0x32>
      *Odr = 6660.0f;
 8003944:	4b0e      	ldr	r3, [pc, #56]	; (8003980 <LSM6DSL_ACC_GetOutputDataRate+0xb0>)
 8003946:	6023      	str	r3, [r4, #0]
      break;
 8003948:	e7db      	b.n	8003902 <LSM6DSL_ACC_GetOutputDataRate+0x32>
    return LSM6DSL_ERROR;
 800394a:	f04f 32ff 	mov.w	r2, #4294967295
 800394e:	e7d8      	b.n	8003902 <LSM6DSL_ACC_GetOutputDataRate+0x32>
      ret = LSM6DSL_ERROR;
 8003950:	f04f 32ff 	mov.w	r2, #4294967295
 8003954:	e7d5      	b.n	8003902 <LSM6DSL_ACC_GetOutputDataRate+0x32>
 8003956:	bf00      	nop
 8003958:	3fcccccd 	.word	0x3fcccccd
 800395c:	41480000 	.word	0x41480000
 8003960:	41d00000 	.word	0x41d00000
 8003964:	42500000 	.word	0x42500000
 8003968:	42d00000 	.word	0x42d00000
 800396c:	43500000 	.word	0x43500000
 8003970:	43d00000 	.word	0x43d00000
 8003974:	44504000 	.word	0x44504000
 8003978:	44cf8000 	.word	0x44cf8000
 800397c:	45502000 	.word	0x45502000
 8003980:	45d02000 	.word	0x45d02000

08003984 <LSM6DSL_ACC_GetSensitivity>:
{
 8003984:	b510      	push	{r4, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	460c      	mov	r4, r1
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 800398a:	f10d 0107 	add.w	r1, sp, #7
 800398e:	301c      	adds	r0, #28
 8003990:	f000 fa62 	bl	8003e58 <lsm6dsl_xl_full_scale_get>
 8003994:	b9b0      	cbnz	r0, 80039c4 <LSM6DSL_ACC_GetSensitivity+0x40>
 8003996:	4602      	mov	r2, r0
  switch (full_scale)
 8003998:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800399c:	2b03      	cmp	r3, #3
 800399e:	d814      	bhi.n	80039ca <LSM6DSL_ACC_GetSensitivity+0x46>
 80039a0:	e8df f003 	tbb	[pc, r3]
 80039a4:	0a070d02 	.word	0x0a070d02
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 80039a8:	4b09      	ldr	r3, [pc, #36]	; (80039d0 <LSM6DSL_ACC_GetSensitivity+0x4c>)
 80039aa:	6023      	str	r3, [r4, #0]
}
 80039ac:	4610      	mov	r0, r2
 80039ae:	b002      	add	sp, #8
 80039b0:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 80039b2:	4b08      	ldr	r3, [pc, #32]	; (80039d4 <LSM6DSL_ACC_GetSensitivity+0x50>)
 80039b4:	6023      	str	r3, [r4, #0]
      break;
 80039b6:	e7f9      	b.n	80039ac <LSM6DSL_ACC_GetSensitivity+0x28>
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 80039b8:	4b07      	ldr	r3, [pc, #28]	; (80039d8 <LSM6DSL_ACC_GetSensitivity+0x54>)
 80039ba:	6023      	str	r3, [r4, #0]
      break;
 80039bc:	e7f6      	b.n	80039ac <LSM6DSL_ACC_GetSensitivity+0x28>
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 80039be:	4b07      	ldr	r3, [pc, #28]	; (80039dc <LSM6DSL_ACC_GetSensitivity+0x58>)
 80039c0:	6023      	str	r3, [r4, #0]
      break;
 80039c2:	e7f3      	b.n	80039ac <LSM6DSL_ACC_GetSensitivity+0x28>
    return LSM6DSL_ERROR;
 80039c4:	f04f 32ff 	mov.w	r2, #4294967295
 80039c8:	e7f0      	b.n	80039ac <LSM6DSL_ACC_GetSensitivity+0x28>
      ret = LSM6DSL_ERROR;
 80039ca:	f04f 32ff 	mov.w	r2, #4294967295
 80039ce:	e7ed      	b.n	80039ac <LSM6DSL_ACC_GetSensitivity+0x28>
 80039d0:	3d79db23 	.word	0x3d79db23
 80039d4:	3df9db23 	.word	0x3df9db23
 80039d8:	3e79db23 	.word	0x3e79db23
 80039dc:	3ef9db23 	.word	0x3ef9db23

080039e0 <LSM6DSL_ACC_GetFullScale>:
{
 80039e0:	b510      	push	{r4, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	460c      	mov	r4, r1
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 80039e6:	f10d 0107 	add.w	r1, sp, #7
 80039ea:	301c      	adds	r0, #28
 80039ec:	f000 fa34 	bl	8003e58 <lsm6dsl_xl_full_scale_get>
 80039f0:	b9b0      	cbnz	r0, 8003a20 <LSM6DSL_ACC_GetFullScale+0x40>
 80039f2:	4602      	mov	r2, r0
  switch (fs_low_level)
 80039f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80039f8:	2b03      	cmp	r3, #3
 80039fa:	d814      	bhi.n	8003a26 <LSM6DSL_ACC_GetFullScale+0x46>
 80039fc:	e8df f003 	tbb	[pc, r3]
 8003a00:	0a070d02 	.word	0x0a070d02
      *FullScale =  2;
 8003a04:	2302      	movs	r3, #2
 8003a06:	6023      	str	r3, [r4, #0]
}
 8003a08:	4610      	mov	r0, r2
 8003a0a:	b002      	add	sp, #8
 8003a0c:	bd10      	pop	{r4, pc}
      *FullScale =  4;
 8003a0e:	2304      	movs	r3, #4
 8003a10:	6023      	str	r3, [r4, #0]
      break;
 8003a12:	e7f9      	b.n	8003a08 <LSM6DSL_ACC_GetFullScale+0x28>
      *FullScale =  8;
 8003a14:	2308      	movs	r3, #8
 8003a16:	6023      	str	r3, [r4, #0]
      break;
 8003a18:	e7f6      	b.n	8003a08 <LSM6DSL_ACC_GetFullScale+0x28>
      *FullScale = 16;
 8003a1a:	2310      	movs	r3, #16
 8003a1c:	6023      	str	r3, [r4, #0]
      break;
 8003a1e:	e7f3      	b.n	8003a08 <LSM6DSL_ACC_GetFullScale+0x28>
    return LSM6DSL_ERROR;
 8003a20:	f04f 32ff 	mov.w	r2, #4294967295
 8003a24:	e7f0      	b.n	8003a08 <LSM6DSL_ACC_GetFullScale+0x28>
      ret = LSM6DSL_ERROR;
 8003a26:	f04f 32ff 	mov.w	r2, #4294967295
 8003a2a:	e7ed      	b.n	8003a08 <LSM6DSL_ACC_GetFullScale+0x28>

08003a2c <LSM6DSL_ACC_GetAxesRaw>:
{
 8003a2c:	b510      	push	{r4, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	460c      	mov	r4, r1
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8003a32:	4669      	mov	r1, sp
 8003a34:	301c      	adds	r0, #28
 8003a36:	f000 fb46 	bl	80040c6 <lsm6dsl_acceleration_raw_get>
 8003a3a:	b960      	cbnz	r0, 8003a56 <LSM6DSL_ACC_GetAxesRaw+0x2a>
 8003a3c:	4603      	mov	r3, r0
  Value->x = data_raw.i16bit[0];
 8003a3e:	f9bd 2000 	ldrsh.w	r2, [sp]
 8003a42:	8022      	strh	r2, [r4, #0]
  Value->y = data_raw.i16bit[1];
 8003a44:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 8003a48:	8062      	strh	r2, [r4, #2]
  Value->z = data_raw.i16bit[2];
 8003a4a:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8003a4e:	80a2      	strh	r2, [r4, #4]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	b002      	add	sp, #8
 8003a54:	bd10      	pop	{r4, pc}
    return LSM6DSL_ERROR;
 8003a56:	f04f 33ff 	mov.w	r3, #4294967295
 8003a5a:	e7f9      	b.n	8003a50 <LSM6DSL_ACC_GetAxesRaw+0x24>

08003a5c <LSM6DSL_ACC_GetAxes>:
{
 8003a5c:	b530      	push	{r4, r5, lr}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	4605      	mov	r5, r0
 8003a62:	460c      	mov	r4, r1
  float sensitivity = 0.0f;
 8003a64:	2300      	movs	r3, #0
 8003a66:	9301      	str	r3, [sp, #4]
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8003a68:	a902      	add	r1, sp, #8
 8003a6a:	301c      	adds	r0, #28
 8003a6c:	f000 fb2b 	bl	80040c6 <lsm6dsl_acceleration_raw_get>
 8003a70:	bb70      	cbnz	r0, 8003ad0 <LSM6DSL_ACC_GetAxes+0x74>
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8003a72:	a901      	add	r1, sp, #4
 8003a74:	4628      	mov	r0, r5
 8003a76:	f7ff ff85 	bl	8003984 <LSM6DSL_ACC_GetSensitivity>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	bb58      	cbnz	r0, 8003ad6 <LSM6DSL_ACC_GetAxes+0x7a>
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003a7e:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8003a82:	ee07 2a10 	vmov	s14, r2
 8003a86:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003a8a:	eddd 7a01 	vldr	s15, [sp, #4]
 8003a8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a92:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8003a96:	ed84 7a00 	vstr	s14, [r4]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003a9a:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8003a9e:	ee07 2a10 	vmov	s14, r2
 8003aa2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003aa6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003aaa:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8003aae:	ed84 7a01 	vstr	s14, [r4, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003ab2:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8003ab6:	ee07 2a10 	vmov	s14, r2
 8003aba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003abe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ac2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ac6:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	b005      	add	sp, #20
 8003ace:	bd30      	pop	{r4, r5, pc}
    return LSM6DSL_ERROR;
 8003ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad4:	e7f9      	b.n	8003aca <LSM6DSL_ACC_GetAxes+0x6e>
    return LSM6DSL_ERROR;
 8003ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8003ada:	e7f6      	b.n	8003aca <LSM6DSL_ACC_GetAxes+0x6e>

08003adc <LSM6DSL_GYRO_Disable>:
{
 8003adc:	b538      	push	{r3, r4, r5, lr}
  if (pObj->gyro_is_enabled == 0U)
 8003ade:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8003ae2:	b913      	cbnz	r3, 8003aea <LSM6DSL_GYRO_Disable+0xe>
    return LSM6DSL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	bd38      	pop	{r3, r4, r5, pc}
 8003aea:	4604      	mov	r4, r0
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 8003aec:	f100 051c 	add.w	r5, r0, #28
 8003af0:	f100 012c 	add.w	r1, r0, #44	; 0x2c
 8003af4:	4628      	mov	r0, r5
 8003af6:	f000 fa89 	bl	800400c <lsm6dsl_gy_data_rate_get>
 8003afa:	b948      	cbnz	r0, 8003b10 <LSM6DSL_GYRO_Disable+0x34>
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8003afc:	2100      	movs	r1, #0
 8003afe:	4628      	mov	r0, r5
 8003b00:	f000 fa68 	bl	8003fd4 <lsm6dsl_gy_data_rate_set>
 8003b04:	4603      	mov	r3, r0
 8003b06:	b930      	cbnz	r0, 8003b16 <LSM6DSL_GYRO_Disable+0x3a>
  pObj->gyro_is_enabled = 0;
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  return LSM6DSL_OK;
 8003b0e:	e7ea      	b.n	8003ae6 <LSM6DSL_GYRO_Disable+0xa>
    return LSM6DSL_ERROR;
 8003b10:	f04f 33ff 	mov.w	r3, #4294967295
 8003b14:	e7e7      	b.n	8003ae6 <LSM6DSL_GYRO_Disable+0xa>
    return LSM6DSL_ERROR;
 8003b16:	f04f 33ff 	mov.w	r3, #4294967295
 8003b1a:	e7e4      	b.n	8003ae6 <LSM6DSL_GYRO_Disable+0xa>

08003b1c <LSM6DSL_DeInit>:
{
 8003b1c:	b510      	push	{r4, lr}
 8003b1e:	4604      	mov	r4, r0
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 8003b20:	f7ff feb6 	bl	8003890 <LSM6DSL_ACC_Disable>
 8003b24:	b968      	cbnz	r0, 8003b42 <LSM6DSL_DeInit+0x26>
  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 8003b26:	4620      	mov	r0, r4
 8003b28:	f7ff ffd8 	bl	8003adc <LSM6DSL_GYRO_Disable>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	b958      	cbnz	r0, 8003b48 <LSM6DSL_DeInit+0x2c>
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 8003b30:	2300      	movs	r3, #0
 8003b32:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 8003b36:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  pObj->is_initialized = 0;
 8003b3a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
 8003b3e:	4610      	mov	r0, r2
 8003b40:	bd10      	pop	{r4, pc}
    return LSM6DSL_ERROR;
 8003b42:	f04f 32ff 	mov.w	r2, #4294967295
 8003b46:	e7fa      	b.n	8003b3e <LSM6DSL_DeInit+0x22>
    return LSM6DSL_ERROR;
 8003b48:	f04f 32ff 	mov.w	r2, #4294967295
 8003b4c:	e7f7      	b.n	8003b3e <LSM6DSL_DeInit+0x22>
	...

08003b50 <LSM6DSL_GYRO_GetOutputDataRate>:
{
 8003b50:	b510      	push	{r4, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	460c      	mov	r4, r1
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8003b56:	f10d 0107 	add.w	r1, sp, #7
 8003b5a:	301c      	adds	r0, #28
 8003b5c:	f000 fa56 	bl	800400c <lsm6dsl_gy_data_rate_get>
 8003b60:	2800      	cmp	r0, #0
 8003b62:	d12f      	bne.n	8003bc4 <LSM6DSL_GYRO_GetOutputDataRate+0x74>
 8003b64:	4602      	mov	r2, r0
  switch (odr_low_level)
 8003b66:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003b6a:	2b0a      	cmp	r3, #10
 8003b6c:	d82d      	bhi.n	8003bca <LSM6DSL_GYRO_GetOutputDataRate+0x7a>
 8003b6e:	e8df f003 	tbb	[pc, r3]
 8003b72:	0b06      	.short	0x0b06
 8003b74:	1714110e 	.word	0x1714110e
 8003b78:	23201d1a 	.word	0x23201d1a
 8003b7c:	26          	.byte	0x26
 8003b7d:	00          	.byte	0x00
      *Odr = 0.0f;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	6023      	str	r3, [r4, #0]
}
 8003b82:	4610      	mov	r0, r2
 8003b84:	b002      	add	sp, #8
 8003b86:	bd10      	pop	{r4, pc}
      *Odr = 12.5f;
 8003b88:	4b11      	ldr	r3, [pc, #68]	; (8003bd0 <LSM6DSL_GYRO_GetOutputDataRate+0x80>)
 8003b8a:	6023      	str	r3, [r4, #0]
      break;
 8003b8c:	e7f9      	b.n	8003b82 <LSM6DSL_GYRO_GetOutputDataRate+0x32>
      *Odr = 26.0f;
 8003b8e:	4b11      	ldr	r3, [pc, #68]	; (8003bd4 <LSM6DSL_GYRO_GetOutputDataRate+0x84>)
 8003b90:	6023      	str	r3, [r4, #0]
      break;
 8003b92:	e7f6      	b.n	8003b82 <LSM6DSL_GYRO_GetOutputDataRate+0x32>
      *Odr = 52.0f;
 8003b94:	4b10      	ldr	r3, [pc, #64]	; (8003bd8 <LSM6DSL_GYRO_GetOutputDataRate+0x88>)
 8003b96:	6023      	str	r3, [r4, #0]
      break;
 8003b98:	e7f3      	b.n	8003b82 <LSM6DSL_GYRO_GetOutputDataRate+0x32>
      *Odr = 104.0f;
 8003b9a:	4b10      	ldr	r3, [pc, #64]	; (8003bdc <LSM6DSL_GYRO_GetOutputDataRate+0x8c>)
 8003b9c:	6023      	str	r3, [r4, #0]
      break;
 8003b9e:	e7f0      	b.n	8003b82 <LSM6DSL_GYRO_GetOutputDataRate+0x32>
      *Odr = 208.0f;
 8003ba0:	4b0f      	ldr	r3, [pc, #60]	; (8003be0 <LSM6DSL_GYRO_GetOutputDataRate+0x90>)
 8003ba2:	6023      	str	r3, [r4, #0]
      break;
 8003ba4:	e7ed      	b.n	8003b82 <LSM6DSL_GYRO_GetOutputDataRate+0x32>
      *Odr = 416.0f;
 8003ba6:	4b0f      	ldr	r3, [pc, #60]	; (8003be4 <LSM6DSL_GYRO_GetOutputDataRate+0x94>)
 8003ba8:	6023      	str	r3, [r4, #0]
      break;
 8003baa:	e7ea      	b.n	8003b82 <LSM6DSL_GYRO_GetOutputDataRate+0x32>
      *Odr = 833.0f;
 8003bac:	4b0e      	ldr	r3, [pc, #56]	; (8003be8 <LSM6DSL_GYRO_GetOutputDataRate+0x98>)
 8003bae:	6023      	str	r3, [r4, #0]
      break;
 8003bb0:	e7e7      	b.n	8003b82 <LSM6DSL_GYRO_GetOutputDataRate+0x32>
      *Odr =  1660.0f;
 8003bb2:	4b0e      	ldr	r3, [pc, #56]	; (8003bec <LSM6DSL_GYRO_GetOutputDataRate+0x9c>)
 8003bb4:	6023      	str	r3, [r4, #0]
      break;
 8003bb6:	e7e4      	b.n	8003b82 <LSM6DSL_GYRO_GetOutputDataRate+0x32>
      *Odr =  3330.0f;
 8003bb8:	4b0d      	ldr	r3, [pc, #52]	; (8003bf0 <LSM6DSL_GYRO_GetOutputDataRate+0xa0>)
 8003bba:	6023      	str	r3, [r4, #0]
      break;
 8003bbc:	e7e1      	b.n	8003b82 <LSM6DSL_GYRO_GetOutputDataRate+0x32>
      *Odr =  6660.0f;
 8003bbe:	4b0d      	ldr	r3, [pc, #52]	; (8003bf4 <LSM6DSL_GYRO_GetOutputDataRate+0xa4>)
 8003bc0:	6023      	str	r3, [r4, #0]
      break;
 8003bc2:	e7de      	b.n	8003b82 <LSM6DSL_GYRO_GetOutputDataRate+0x32>
    return LSM6DSL_ERROR;
 8003bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8003bc8:	e7db      	b.n	8003b82 <LSM6DSL_GYRO_GetOutputDataRate+0x32>
      ret = LSM6DSL_ERROR;
 8003bca:	f04f 32ff 	mov.w	r2, #4294967295
 8003bce:	e7d8      	b.n	8003b82 <LSM6DSL_GYRO_GetOutputDataRate+0x32>
 8003bd0:	41480000 	.word	0x41480000
 8003bd4:	41d00000 	.word	0x41d00000
 8003bd8:	42500000 	.word	0x42500000
 8003bdc:	42d00000 	.word	0x42d00000
 8003be0:	43500000 	.word	0x43500000
 8003be4:	43d00000 	.word	0x43d00000
 8003be8:	44504000 	.word	0x44504000
 8003bec:	44cf8000 	.word	0x44cf8000
 8003bf0:	45502000 	.word	0x45502000
 8003bf4:	45d02000 	.word	0x45d02000

08003bf8 <LSM6DSL_GYRO_GetSensitivity>:
{
 8003bf8:	b510      	push	{r4, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	460c      	mov	r4, r1
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8003bfe:	f10d 0107 	add.w	r1, sp, #7
 8003c02:	301c      	adds	r0, #28
 8003c04:	f000 f9bf 	bl	8003f86 <lsm6dsl_gy_full_scale_get>
 8003c08:	b9d8      	cbnz	r0, 8003c42 <LSM6DSL_GYRO_GetSensitivity+0x4a>
 8003c0a:	4602      	mov	r2, r0
  switch (full_scale)
 8003c0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003c10:	2b06      	cmp	r3, #6
 8003c12:	d819      	bhi.n	8003c48 <LSM6DSL_GYRO_GetSensitivity+0x50>
 8003c14:	e8df f003 	tbb	[pc, r3]
 8003c18:	180c0409 	.word	0x180c0409
 8003c1c:	180f      	.short	0x180f
 8003c1e:	12          	.byte	0x12
 8003c1f:	00          	.byte	0x00
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 8003c20:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <LSM6DSL_GYRO_GetSensitivity+0x58>)
 8003c22:	6023      	str	r3, [r4, #0]
}
 8003c24:	4610      	mov	r0, r2
 8003c26:	b002      	add	sp, #8
 8003c28:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 8003c2a:	4b0a      	ldr	r3, [pc, #40]	; (8003c54 <LSM6DSL_GYRO_GetSensitivity+0x5c>)
 8003c2c:	6023      	str	r3, [r4, #0]
      break;
 8003c2e:	e7f9      	b.n	8003c24 <LSM6DSL_GYRO_GetSensitivity+0x2c>
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 8003c30:	4b09      	ldr	r3, [pc, #36]	; (8003c58 <LSM6DSL_GYRO_GetSensitivity+0x60>)
 8003c32:	6023      	str	r3, [r4, #0]
      break;
 8003c34:	e7f6      	b.n	8003c24 <LSM6DSL_GYRO_GetSensitivity+0x2c>
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 8003c36:	4b09      	ldr	r3, [pc, #36]	; (8003c5c <LSM6DSL_GYRO_GetSensitivity+0x64>)
 8003c38:	6023      	str	r3, [r4, #0]
      break;
 8003c3a:	e7f3      	b.n	8003c24 <LSM6DSL_GYRO_GetSensitivity+0x2c>
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 8003c3c:	4b08      	ldr	r3, [pc, #32]	; (8003c60 <LSM6DSL_GYRO_GetSensitivity+0x68>)
 8003c3e:	6023      	str	r3, [r4, #0]
      break;
 8003c40:	e7f0      	b.n	8003c24 <LSM6DSL_GYRO_GetSensitivity+0x2c>
    return LSM6DSL_ERROR;
 8003c42:	f04f 32ff 	mov.w	r2, #4294967295
 8003c46:	e7ed      	b.n	8003c24 <LSM6DSL_GYRO_GetSensitivity+0x2c>
      ret = LSM6DSL_ERROR;
 8003c48:	f04f 32ff 	mov.w	r2, #4294967295
 8003c4c:	e7ea      	b.n	8003c24 <LSM6DSL_GYRO_GetSensitivity+0x2c>
 8003c4e:	bf00      	nop
 8003c50:	408c0000 	.word	0x408c0000
 8003c54:	410c0000 	.word	0x410c0000
 8003c58:	418c0000 	.word	0x418c0000
 8003c5c:	420c0000 	.word	0x420c0000
 8003c60:	428c0000 	.word	0x428c0000

08003c64 <LSM6DSL_GYRO_GetFullScale>:
{
 8003c64:	b510      	push	{r4, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	460c      	mov	r4, r1
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8003c6a:	f10d 0107 	add.w	r1, sp, #7
 8003c6e:	301c      	adds	r0, #28
 8003c70:	f000 f989 	bl	8003f86 <lsm6dsl_gy_full_scale_get>
 8003c74:	b9f0      	cbnz	r0, 8003cb4 <LSM6DSL_GYRO_GetFullScale+0x50>
 8003c76:	4602      	mov	r2, r0
  switch (fs_low_level)
 8003c78:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003c7c:	2b06      	cmp	r3, #6
 8003c7e:	d81c      	bhi.n	8003cba <LSM6DSL_GYRO_GetFullScale+0x56>
 8003c80:	e8df f003 	tbb	[pc, r3]
 8003c84:	1b0c0409 	.word	0x1b0c0409
 8003c88:	1b10      	.short	0x1b10
 8003c8a:	14          	.byte	0x14
 8003c8b:	00          	.byte	0x00
      *FullScale =  125;
 8003c8c:	237d      	movs	r3, #125	; 0x7d
 8003c8e:	6023      	str	r3, [r4, #0]
}
 8003c90:	4610      	mov	r0, r2
 8003c92:	b002      	add	sp, #8
 8003c94:	bd10      	pop	{r4, pc}
      *FullScale =  250;
 8003c96:	23fa      	movs	r3, #250	; 0xfa
 8003c98:	6023      	str	r3, [r4, #0]
      break;
 8003c9a:	e7f9      	b.n	8003c90 <LSM6DSL_GYRO_GetFullScale+0x2c>
      *FullScale =  500;
 8003c9c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003ca0:	6023      	str	r3, [r4, #0]
      break;
 8003ca2:	e7f5      	b.n	8003c90 <LSM6DSL_GYRO_GetFullScale+0x2c>
      *FullScale = 1000;
 8003ca4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ca8:	6023      	str	r3, [r4, #0]
      break;
 8003caa:	e7f1      	b.n	8003c90 <LSM6DSL_GYRO_GetFullScale+0x2c>
      *FullScale = 2000;
 8003cac:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003cb0:	6023      	str	r3, [r4, #0]
      break;
 8003cb2:	e7ed      	b.n	8003c90 <LSM6DSL_GYRO_GetFullScale+0x2c>
    return LSM6DSL_ERROR;
 8003cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003cb8:	e7ea      	b.n	8003c90 <LSM6DSL_GYRO_GetFullScale+0x2c>
      ret = LSM6DSL_ERROR;
 8003cba:	f04f 32ff 	mov.w	r2, #4294967295
 8003cbe:	e7e7      	b.n	8003c90 <LSM6DSL_GYRO_GetFullScale+0x2c>

08003cc0 <LSM6DSL_GYRO_GetAxesRaw>:
{
 8003cc0:	b510      	push	{r4, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	460c      	mov	r4, r1
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8003cc6:	4669      	mov	r1, sp
 8003cc8:	301c      	adds	r0, #28
 8003cca:	f000 f9f5 	bl	80040b8 <lsm6dsl_angular_rate_raw_get>
 8003cce:	b960      	cbnz	r0, 8003cea <LSM6DSL_GYRO_GetAxesRaw+0x2a>
 8003cd0:	4603      	mov	r3, r0
  Value->x = data_raw.i16bit[0];
 8003cd2:	f9bd 2000 	ldrsh.w	r2, [sp]
 8003cd6:	8022      	strh	r2, [r4, #0]
  Value->y = data_raw.i16bit[1];
 8003cd8:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 8003cdc:	8062      	strh	r2, [r4, #2]
  Value->z = data_raw.i16bit[2];
 8003cde:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8003ce2:	80a2      	strh	r2, [r4, #4]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	b002      	add	sp, #8
 8003ce8:	bd10      	pop	{r4, pc}
    return LSM6DSL_ERROR;
 8003cea:	f04f 33ff 	mov.w	r3, #4294967295
 8003cee:	e7f9      	b.n	8003ce4 <LSM6DSL_GYRO_GetAxesRaw+0x24>

08003cf0 <LSM6DSL_GYRO_GetAxes>:
{
 8003cf0:	b530      	push	{r4, r5, lr}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	4605      	mov	r5, r0
 8003cf6:	460c      	mov	r4, r1
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8003cf8:	a902      	add	r1, sp, #8
 8003cfa:	301c      	adds	r0, #28
 8003cfc:	f000 f9dc 	bl	80040b8 <lsm6dsl_angular_rate_raw_get>
 8003d00:	bb70      	cbnz	r0, 8003d60 <LSM6DSL_GYRO_GetAxes+0x70>
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8003d02:	a901      	add	r1, sp, #4
 8003d04:	4628      	mov	r0, r5
 8003d06:	f7ff ff77 	bl	8003bf8 <LSM6DSL_GYRO_GetSensitivity>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	bb58      	cbnz	r0, 8003d66 <LSM6DSL_GYRO_GetAxes+0x76>
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003d0e:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8003d12:	ee07 2a10 	vmov	s14, r2
 8003d16:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003d1a:	eddd 7a01 	vldr	s15, [sp, #4]
 8003d1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d22:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8003d26:	ed84 7a00 	vstr	s14, [r4]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003d2a:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8003d2e:	ee07 2a10 	vmov	s14, r2
 8003d32:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003d36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d3a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8003d3e:	ed84 7a01 	vstr	s14, [r4, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003d42:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8003d46:	ee07 2a10 	vmov	s14, r2
 8003d4a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003d4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d56:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	b005      	add	sp, #20
 8003d5e:	bd30      	pop	{r4, r5, pc}
    return LSM6DSL_ERROR;
 8003d60:	f04f 33ff 	mov.w	r3, #4294967295
 8003d64:	e7f9      	b.n	8003d5a <LSM6DSL_GYRO_GetAxes+0x6a>
    return LSM6DSL_ERROR;
 8003d66:	f04f 33ff 	mov.w	r3, #4294967295
 8003d6a:	e7f6      	b.n	8003d5a <LSM6DSL_GYRO_GetAxes+0x6a>

08003d6c <LSM6DSL_Write_Reg>:
{
 8003d6c:	b510      	push	{r4, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	ac02      	add	r4, sp, #8
 8003d72:	f804 2d01 	strb.w	r2, [r4, #-1]!
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8003d76:	2301      	movs	r3, #1
 8003d78:	4622      	mov	r2, r4
 8003d7a:	301c      	adds	r0, #28
 8003d7c:	f000 f84b 	bl	8003e16 <lsm6dsl_write_reg>
 8003d80:	4603      	mov	r3, r0
 8003d82:	b910      	cbnz	r0, 8003d8a <LSM6DSL_Write_Reg+0x1e>
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	b002      	add	sp, #8
 8003d88:	bd10      	pop	{r4, pc}
    return LSM6DSL_ERROR;
 8003d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d8e:	e7f9      	b.n	8003d84 <LSM6DSL_Write_Reg+0x18>

08003d90 <LSM6DSL_RegisterBusIO>:
  if (pObj == NULL)
 8003d90:	2800      	cmp	r0, #0
 8003d92:	d02c      	beq.n	8003dee <LSM6DSL_RegisterBusIO+0x5e>
{
 8003d94:	b510      	push	{r4, lr}
 8003d96:	4604      	mov	r4, r0
    pObj->IO.Init      = pIO->Init;
 8003d98:	680a      	ldr	r2, [r1, #0]
 8003d9a:	6002      	str	r2, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003d9c:	6848      	ldr	r0, [r1, #4]
 8003d9e:	6060      	str	r0, [r4, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003da0:	6888      	ldr	r0, [r1, #8]
 8003da2:	60a0      	str	r0, [r4, #8]
    pObj->IO.Address   = pIO->Address;
 8003da4:	7b08      	ldrb	r0, [r1, #12]
 8003da6:	7320      	strb	r0, [r4, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003da8:	6908      	ldr	r0, [r1, #16]
 8003daa:	6120      	str	r0, [r4, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003dac:	6948      	ldr	r0, [r1, #20]
 8003dae:	6160      	str	r0, [r4, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003db0:	6989      	ldr	r1, [r1, #24]
 8003db2:	61a1      	str	r1, [r4, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 8003db4:	4913      	ldr	r1, [pc, #76]	; (8003e04 <LSM6DSL_RegisterBusIO+0x74>)
 8003db6:	6221      	str	r1, [r4, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8003db8:	4913      	ldr	r1, [pc, #76]	; (8003e08 <LSM6DSL_RegisterBusIO+0x78>)
 8003dba:	61e1      	str	r1, [r4, #28]
    pObj->Ctx.handle   = pObj;
 8003dbc:	6264      	str	r4, [r4, #36]	; 0x24
    if (pObj->IO.Init == NULL)
 8003dbe:	b1d2      	cbz	r2, 8003df6 <LSM6DSL_RegisterBusIO+0x66>
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8003dc0:	4790      	blx	r2
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	b9d0      	cbnz	r0, 8003dfc <LSM6DSL_RegisterBusIO+0x6c>
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003dc6:	68a2      	ldr	r2, [r4, #8]
 8003dc8:	2a02      	cmp	r2, #2
 8003dca:	d001      	beq.n	8003dd0 <LSM6DSL_RegisterBusIO+0x40>
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	bd10      	pop	{r4, pc}
        if (pObj->is_initialized == 0U)
 8003dd0:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8003dd4:	2a00      	cmp	r2, #0
 8003dd6:	d1f9      	bne.n	8003dcc <LSM6DSL_RegisterBusIO+0x3c>
          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8003dd8:	220c      	movs	r2, #12
 8003dda:	2112      	movs	r1, #18
 8003ddc:	4620      	mov	r0, r4
 8003dde:	f7ff ffc5 	bl	8003d6c <LSM6DSL_Write_Reg>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2800      	cmp	r0, #0
 8003de6:	d0f1      	beq.n	8003dcc <LSM6DSL_RegisterBusIO+0x3c>
            ret = LSM6DSL_ERROR;
 8003de8:	f04f 33ff 	mov.w	r3, #4294967295
  return ret;
 8003dec:	e7ee      	b.n	8003dcc <LSM6DSL_RegisterBusIO+0x3c>
    ret = LSM6DSL_ERROR;
 8003dee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	4770      	bx	lr
      ret = LSM6DSL_ERROR;
 8003df6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dfa:	e7e7      	b.n	8003dcc <LSM6DSL_RegisterBusIO+0x3c>
      ret = LSM6DSL_ERROR;
 8003dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8003e00:	e7e4      	b.n	8003dcc <LSM6DSL_RegisterBusIO+0x3c>
 8003e02:	bf00      	nop
 8003e04:	0800352d 	.word	0x0800352d
 8003e08:	08003537 	.word	0x08003537

08003e0c <lsm6dsl_read_reg>:
  * @param  uint16_t len: number of consecutive register to read
  *
  */
int32_t lsm6dsl_read_reg(lsm6dsl_ctx_t *ctx, uint8_t reg, uint8_t *data,
                         uint16_t len)
{
 8003e0c:	b510      	push	{r4, lr}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003e0e:	6844      	ldr	r4, [r0, #4]
 8003e10:	6880      	ldr	r0, [r0, #8]
 8003e12:	47a0      	blx	r4
  return ret;
}
 8003e14:	bd10      	pop	{r4, pc}

08003e16 <lsm6dsl_write_reg>:
  * @param  uint16_t len: number of consecutive register to write
  *
*/
int32_t lsm6dsl_write_reg(lsm6dsl_ctx_t *ctx, uint8_t reg, uint8_t *data,
                          uint16_t len)
{
 8003e16:	b510      	push	{r4, lr}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003e18:	6804      	ldr	r4, [r0, #0]
 8003e1a:	6880      	ldr	r0, [r0, #8]
 8003e1c:	47a0      	blx	r4
  return ret;
}
 8003e1e:	bd10      	pop	{r4, pc}

08003e20 <lsm6dsl_xl_full_scale_set>:
  * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
  * @param  lsm6dsl_fs_xl_t: change the values of fs_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dsl_xl_full_scale_set(lsm6dsl_ctx_t *ctx, lsm6dsl_fs_xl_t val)
{
 8003e20:	b530      	push	{r4, r5, lr}
 8003e22:	b083      	sub	sp, #12
 8003e24:	4604      	mov	r4, r0
 8003e26:	460d      	mov	r5, r1
  lsm6dsl_reg_t reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, &reg.byte, 1);
 8003e28:	2301      	movs	r3, #1
 8003e2a:	aa01      	add	r2, sp, #4
 8003e2c:	2110      	movs	r1, #16
 8003e2e:	f7ff ffed 	bl	8003e0c <lsm6dsl_read_reg>
  if (ret == 0)
 8003e32:	4603      	mov	r3, r0
 8003e34:	b110      	cbz	r0, 8003e3c <lsm6dsl_xl_full_scale_set+0x1c>
  {
    reg.ctrl1_xl.fs_xl = (uint8_t) val;
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, &reg.byte, 1);
  }
  return ret;
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	b003      	add	sp, #12
 8003e3a:	bd30      	pop	{r4, r5, pc}
    reg.ctrl1_xl.fs_xl = (uint8_t) val;
 8003e3c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003e40:	f365 0383 	bfi	r3, r5, #2, #2
 8003e44:	aa02      	add	r2, sp, #8
 8003e46:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, &reg.byte, 1);
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	2110      	movs	r1, #16
 8003e4e:	4620      	mov	r0, r4
 8003e50:	f7ff ffe1 	bl	8003e16 <lsm6dsl_write_reg>
 8003e54:	4603      	mov	r3, r0
  return ret;
 8003e56:	e7ee      	b.n	8003e36 <lsm6dsl_xl_full_scale_set+0x16>

08003e58 <lsm6dsl_xl_full_scale_get>:
  * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
  * @param  lsm6dsl_fs_xl_t: Get the values of fs_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dsl_xl_full_scale_get(lsm6dsl_ctx_t *ctx, lsm6dsl_fs_xl_t *val)
{
 8003e58:	b510      	push	{r4, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	460c      	mov	r4, r1
  lsm6dsl_reg_t reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, &reg.byte, 1);
 8003e5e:	2301      	movs	r3, #1
 8003e60:	aa01      	add	r2, sp, #4
 8003e62:	2110      	movs	r1, #16
 8003e64:	f7ff ffd2 	bl	8003e0c <lsm6dsl_read_reg>
  switch (reg.ctrl1_xl.fs_xl)
 8003e68:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003e6c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003e70:	2b03      	cmp	r3, #3
 8003e72:	d810      	bhi.n	8003e96 <lsm6dsl_xl_full_scale_get+0x3e>
 8003e74:	e8df f003 	tbb	[pc, r3]
 8003e78:	0c090602 	.word	0x0c090602
  {
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	7023      	strb	r3, [r4, #0]
      *val = LSM6DSL_XL_FS_ND;
      break;
  }

  return ret;
}
 8003e80:	b002      	add	sp, #8
 8003e82:	bd10      	pop	{r4, pc}
      *val = LSM6DSL_16g;
 8003e84:	2301      	movs	r3, #1
 8003e86:	7023      	strb	r3, [r4, #0]
      break;
 8003e88:	e7fa      	b.n	8003e80 <lsm6dsl_xl_full_scale_get+0x28>
      *val = LSM6DSL_4g;
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	7023      	strb	r3, [r4, #0]
      break;
 8003e8e:	e7f7      	b.n	8003e80 <lsm6dsl_xl_full_scale_get+0x28>
      *val = LSM6DSL_8g;
 8003e90:	2303      	movs	r3, #3
 8003e92:	7023      	strb	r3, [r4, #0]
      break;
 8003e94:	e7f4      	b.n	8003e80 <lsm6dsl_xl_full_scale_get+0x28>
      *val = LSM6DSL_XL_FS_ND;
 8003e96:	2304      	movs	r3, #4
 8003e98:	7023      	strb	r3, [r4, #0]
  return ret;
 8003e9a:	e7f1      	b.n	8003e80 <lsm6dsl_xl_full_scale_get+0x28>

08003e9c <lsm6dsl_xl_data_rate_set>:
  * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
  * @param  lsm6dsl_odr_xl_t: change the values of odr_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dsl_xl_data_rate_set(lsm6dsl_ctx_t *ctx, lsm6dsl_odr_xl_t val)
{
 8003e9c:	b530      	push	{r4, r5, lr}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	4604      	mov	r4, r0
 8003ea2:	460d      	mov	r5, r1
  lsm6dsl_reg_t reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, &reg.byte, 1);
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	aa01      	add	r2, sp, #4
 8003ea8:	2110      	movs	r1, #16
 8003eaa:	f7ff ffaf 	bl	8003e0c <lsm6dsl_read_reg>
  if (ret == 0)
 8003eae:	4603      	mov	r3, r0
 8003eb0:	b110      	cbz	r0, 8003eb8 <lsm6dsl_xl_data_rate_set+0x1c>
  {
    reg.ctrl1_xl.odr_xl = (uint8_t) val;
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, &reg.byte, 1);
  }
  return ret;
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	b003      	add	sp, #12
 8003eb6:	bd30      	pop	{r4, r5, pc}
    reg.ctrl1_xl.odr_xl = (uint8_t) val;
 8003eb8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003ebc:	f365 1307 	bfi	r3, r5, #4, #4
 8003ec0:	aa02      	add	r2, sp, #8
 8003ec2:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, &reg.byte, 1);
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	2110      	movs	r1, #16
 8003eca:	4620      	mov	r0, r4
 8003ecc:	f7ff ffa3 	bl	8003e16 <lsm6dsl_write_reg>
 8003ed0:	4603      	mov	r3, r0
  return ret;
 8003ed2:	e7ee      	b.n	8003eb2 <lsm6dsl_xl_data_rate_set+0x16>

08003ed4 <lsm6dsl_xl_data_rate_get>:
  * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
  * @param  lsm6dsl_odr_xl_t: Get the values of odr_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dsl_xl_data_rate_get(lsm6dsl_ctx_t *ctx, lsm6dsl_odr_xl_t *val)
{
 8003ed4:	b510      	push	{r4, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	460c      	mov	r4, r1
  lsm6dsl_reg_t reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, &reg.byte, 1);
 8003eda:	2301      	movs	r3, #1
 8003edc:	aa01      	add	r2, sp, #4
 8003ede:	2110      	movs	r1, #16
 8003ee0:	f7ff ff94 	bl	8003e0c <lsm6dsl_read_reg>
  switch (reg.ctrl1_xl.odr_xl)
 8003ee4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003ee8:	091b      	lsrs	r3, r3, #4
 8003eea:	2b0b      	cmp	r3, #11
 8003eec:	d82c      	bhi.n	8003f48 <lsm6dsl_xl_data_rate_get+0x74>
 8003eee:	e8df f003 	tbb	[pc, r3]
 8003ef2:	0a06      	.short	0x0a06
 8003ef4:	1613100d 	.word	0x1613100d
 8003ef8:	221f1c19 	.word	0x221f1c19
 8003efc:	2825      	.short	0x2825
  {
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 8003efe:	2300      	movs	r3, #0
 8003f00:	7023      	strb	r3, [r4, #0]
      *val = LSM6DSL_XL_ODR_ND;
      break;
  }

  return ret;
}
 8003f02:	b002      	add	sp, #8
 8003f04:	bd10      	pop	{r4, pc}
      *val = LSM6DSL_XL_ODR_12Hz5;
 8003f06:	2301      	movs	r3, #1
 8003f08:	7023      	strb	r3, [r4, #0]
      break;
 8003f0a:	e7fa      	b.n	8003f02 <lsm6dsl_xl_data_rate_get+0x2e>
      *val = LSM6DSL_XL_ODR_26Hz;
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	7023      	strb	r3, [r4, #0]
      break;
 8003f10:	e7f7      	b.n	8003f02 <lsm6dsl_xl_data_rate_get+0x2e>
      *val = LSM6DSL_XL_ODR_52Hz;
 8003f12:	2303      	movs	r3, #3
 8003f14:	7023      	strb	r3, [r4, #0]
      break;
 8003f16:	e7f4      	b.n	8003f02 <lsm6dsl_xl_data_rate_get+0x2e>
      *val = LSM6DSL_XL_ODR_104Hz;
 8003f18:	2304      	movs	r3, #4
 8003f1a:	7023      	strb	r3, [r4, #0]
      break;
 8003f1c:	e7f1      	b.n	8003f02 <lsm6dsl_xl_data_rate_get+0x2e>
      *val = LSM6DSL_XL_ODR_208Hz;
 8003f1e:	2305      	movs	r3, #5
 8003f20:	7023      	strb	r3, [r4, #0]
      break;
 8003f22:	e7ee      	b.n	8003f02 <lsm6dsl_xl_data_rate_get+0x2e>
      *val = LSM6DSL_XL_ODR_416Hz;
 8003f24:	2306      	movs	r3, #6
 8003f26:	7023      	strb	r3, [r4, #0]
      break;
 8003f28:	e7eb      	b.n	8003f02 <lsm6dsl_xl_data_rate_get+0x2e>
      *val = LSM6DSL_XL_ODR_833Hz;
 8003f2a:	2307      	movs	r3, #7
 8003f2c:	7023      	strb	r3, [r4, #0]
      break;
 8003f2e:	e7e8      	b.n	8003f02 <lsm6dsl_xl_data_rate_get+0x2e>
      *val = LSM6DSL_XL_ODR_1k66Hz;
 8003f30:	2308      	movs	r3, #8
 8003f32:	7023      	strb	r3, [r4, #0]
      break;
 8003f34:	e7e5      	b.n	8003f02 <lsm6dsl_xl_data_rate_get+0x2e>
      *val = LSM6DSL_XL_ODR_3k33Hz;
 8003f36:	2309      	movs	r3, #9
 8003f38:	7023      	strb	r3, [r4, #0]
      break;
 8003f3a:	e7e2      	b.n	8003f02 <lsm6dsl_xl_data_rate_get+0x2e>
      *val = LSM6DSL_XL_ODR_6k66Hz;
 8003f3c:	230a      	movs	r3, #10
 8003f3e:	7023      	strb	r3, [r4, #0]
      break;
 8003f40:	e7df      	b.n	8003f02 <lsm6dsl_xl_data_rate_get+0x2e>
      *val = LSM6DSL_XL_ODR_1Hz6;
 8003f42:	230b      	movs	r3, #11
 8003f44:	7023      	strb	r3, [r4, #0]
      break;
 8003f46:	e7dc      	b.n	8003f02 <lsm6dsl_xl_data_rate_get+0x2e>
      *val = LSM6DSL_XL_ODR_ND;
 8003f48:	230c      	movs	r3, #12
 8003f4a:	7023      	strb	r3, [r4, #0]
  return ret;
 8003f4c:	e7d9      	b.n	8003f02 <lsm6dsl_xl_data_rate_get+0x2e>

08003f4e <lsm6dsl_gy_full_scale_set>:
  * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
  * @param  lsm6dsl_fs_g_t: change the values of fs_g in reg CTRL2_G
  *
  */
int32_t lsm6dsl_gy_full_scale_set(lsm6dsl_ctx_t *ctx, lsm6dsl_fs_g_t val)
{
 8003f4e:	b530      	push	{r4, r5, lr}
 8003f50:	b083      	sub	sp, #12
 8003f52:	4604      	mov	r4, r0
 8003f54:	460d      	mov	r5, r1
  lsm6dsl_reg_t reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, &reg.byte, 1);
 8003f56:	2301      	movs	r3, #1
 8003f58:	aa01      	add	r2, sp, #4
 8003f5a:	2111      	movs	r1, #17
 8003f5c:	f7ff ff56 	bl	8003e0c <lsm6dsl_read_reg>
  if (ret == 0)
 8003f60:	4603      	mov	r3, r0
 8003f62:	b110      	cbz	r0, 8003f6a <lsm6dsl_gy_full_scale_set+0x1c>
  {
    reg.ctrl2_g.fs_g = (uint8_t) val;
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, &reg.byte, 1);
  }
  return ret;
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	b003      	add	sp, #12
 8003f68:	bd30      	pop	{r4, r5, pc}
    reg.ctrl2_g.fs_g = (uint8_t) val;
 8003f6a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003f6e:	f365 0343 	bfi	r3, r5, #1, #3
 8003f72:	aa02      	add	r2, sp, #8
 8003f74:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, &reg.byte, 1);
 8003f78:	2301      	movs	r3, #1
 8003f7a:	2111      	movs	r1, #17
 8003f7c:	4620      	mov	r0, r4
 8003f7e:	f7ff ff4a 	bl	8003e16 <lsm6dsl_write_reg>
 8003f82:	4603      	mov	r3, r0
  return ret;
 8003f84:	e7ee      	b.n	8003f64 <lsm6dsl_gy_full_scale_set+0x16>

08003f86 <lsm6dsl_gy_full_scale_get>:
  * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
  * @param  lsm6dsl_fs_g_t: Get the values of fs_g in reg CTRL2_G
  *
  */
int32_t lsm6dsl_gy_full_scale_get(lsm6dsl_ctx_t *ctx, lsm6dsl_fs_g_t *val)
{
 8003f86:	b510      	push	{r4, lr}
 8003f88:	b082      	sub	sp, #8
 8003f8a:	460c      	mov	r4, r1
  lsm6dsl_reg_t reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, &reg.byte, 1);
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	aa01      	add	r2, sp, #4
 8003f90:	2111      	movs	r1, #17
 8003f92:	f7ff ff3b 	bl	8003e0c <lsm6dsl_read_reg>
  switch (reg.ctrl2_g.fs_g)
 8003f96:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003f9a:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8003f9e:	2b06      	cmp	r3, #6
 8003fa0:	d815      	bhi.n	8003fce <lsm6dsl_gy_full_scale_get+0x48>
 8003fa2:	e8df f003 	tbb	[pc, r3]
 8003fa6:	0804      	.short	0x0804
 8003fa8:	140e140b 	.word	0x140e140b
 8003fac:	11          	.byte	0x11
 8003fad:	00          	.byte	0x00
  {
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	7023      	strb	r3, [r4, #0]
      *val = LSM6DSL_GY_FS_ND;
      break;
  }

  return ret;
}
 8003fb2:	b002      	add	sp, #8
 8003fb4:	bd10      	pop	{r4, pc}
      *val = LSM6DSL_125dps;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	7023      	strb	r3, [r4, #0]
      break;
 8003fba:	e7fa      	b.n	8003fb2 <lsm6dsl_gy_full_scale_get+0x2c>
      *val = LSM6DSL_500dps;
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	7023      	strb	r3, [r4, #0]
      break;
 8003fc0:	e7f7      	b.n	8003fb2 <lsm6dsl_gy_full_scale_get+0x2c>
      *val = LSM6DSL_1000dps;
 8003fc2:	2304      	movs	r3, #4
 8003fc4:	7023      	strb	r3, [r4, #0]
      break;
 8003fc6:	e7f4      	b.n	8003fb2 <lsm6dsl_gy_full_scale_get+0x2c>
      *val = LSM6DSL_2000dps;
 8003fc8:	2306      	movs	r3, #6
 8003fca:	7023      	strb	r3, [r4, #0]
      break;
 8003fcc:	e7f1      	b.n	8003fb2 <lsm6dsl_gy_full_scale_get+0x2c>
      *val = LSM6DSL_GY_FS_ND;
 8003fce:	2307      	movs	r3, #7
 8003fd0:	7023      	strb	r3, [r4, #0]
  return ret;
 8003fd2:	e7ee      	b.n	8003fb2 <lsm6dsl_gy_full_scale_get+0x2c>

08003fd4 <lsm6dsl_gy_data_rate_set>:
  * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
  * @param  lsm6dsl_odr_g_t: change the values of odr_g in reg CTRL2_G
  *
  */
int32_t lsm6dsl_gy_data_rate_set(lsm6dsl_ctx_t *ctx, lsm6dsl_odr_g_t val)
{
 8003fd4:	b530      	push	{r4, r5, lr}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	4604      	mov	r4, r0
 8003fda:	460d      	mov	r5, r1
  lsm6dsl_reg_t reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, &reg.byte, 1);
 8003fdc:	2301      	movs	r3, #1
 8003fde:	aa01      	add	r2, sp, #4
 8003fe0:	2111      	movs	r1, #17
 8003fe2:	f7ff ff13 	bl	8003e0c <lsm6dsl_read_reg>
  if (ret == 0)
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	b110      	cbz	r0, 8003ff0 <lsm6dsl_gy_data_rate_set+0x1c>
  {
    reg.ctrl2_g.odr_g = (uint8_t) val;
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, &reg.byte, 1);
  }
  return ret;
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	b003      	add	sp, #12
 8003fee:	bd30      	pop	{r4, r5, pc}
    reg.ctrl2_g.odr_g = (uint8_t) val;
 8003ff0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003ff4:	f365 1307 	bfi	r3, r5, #4, #4
 8003ff8:	aa02      	add	r2, sp, #8
 8003ffa:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, &reg.byte, 1);
 8003ffe:	2301      	movs	r3, #1
 8004000:	2111      	movs	r1, #17
 8004002:	4620      	mov	r0, r4
 8004004:	f7ff ff07 	bl	8003e16 <lsm6dsl_write_reg>
 8004008:	4603      	mov	r3, r0
  return ret;
 800400a:	e7ee      	b.n	8003fea <lsm6dsl_gy_data_rate_set+0x16>

0800400c <lsm6dsl_gy_data_rate_get>:
  * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
  * @param  lsm6dsl_odr_g_t: Get the values of odr_g in reg CTRL2_G
  *
  */
int32_t lsm6dsl_gy_data_rate_get(lsm6dsl_ctx_t *ctx, lsm6dsl_odr_g_t *val)
{
 800400c:	b510      	push	{r4, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	460c      	mov	r4, r1
  lsm6dsl_reg_t reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, &reg.byte, 1);
 8004012:	2301      	movs	r3, #1
 8004014:	aa01      	add	r2, sp, #4
 8004016:	2111      	movs	r1, #17
 8004018:	f7ff fef8 	bl	8003e0c <lsm6dsl_read_reg>
  switch (reg.ctrl2_g.odr_g)
 800401c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004020:	091b      	lsrs	r3, r3, #4
 8004022:	2b0a      	cmp	r3, #10
 8004024:	d829      	bhi.n	800407a <lsm6dsl_gy_data_rate_get+0x6e>
 8004026:	e8df f003 	tbb	[pc, r3]
 800402a:	0a06      	.short	0x0a06
 800402c:	1613100d 	.word	0x1613100d
 8004030:	221f1c19 	.word	0x221f1c19
 8004034:	25          	.byte	0x25
 8004035:	00          	.byte	0x00
  {
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 8004036:	2300      	movs	r3, #0
 8004038:	7023      	strb	r3, [r4, #0]
      *val = LSM6DSL_GY_ODR_ND;
      break;
  }

  return ret;
}
 800403a:	b002      	add	sp, #8
 800403c:	bd10      	pop	{r4, pc}
      *val = LSM6DSL_GY_ODR_12Hz5;
 800403e:	2301      	movs	r3, #1
 8004040:	7023      	strb	r3, [r4, #0]
      break;
 8004042:	e7fa      	b.n	800403a <lsm6dsl_gy_data_rate_get+0x2e>
      *val = LSM6DSL_GY_ODR_26Hz;
 8004044:	2302      	movs	r3, #2
 8004046:	7023      	strb	r3, [r4, #0]
      break;
 8004048:	e7f7      	b.n	800403a <lsm6dsl_gy_data_rate_get+0x2e>
      *val = LSM6DSL_GY_ODR_52Hz;
 800404a:	2303      	movs	r3, #3
 800404c:	7023      	strb	r3, [r4, #0]
      break;
 800404e:	e7f4      	b.n	800403a <lsm6dsl_gy_data_rate_get+0x2e>
      *val = LSM6DSL_GY_ODR_104Hz;
 8004050:	2304      	movs	r3, #4
 8004052:	7023      	strb	r3, [r4, #0]
      break;
 8004054:	e7f1      	b.n	800403a <lsm6dsl_gy_data_rate_get+0x2e>
      *val = LSM6DSL_GY_ODR_208Hz;
 8004056:	2305      	movs	r3, #5
 8004058:	7023      	strb	r3, [r4, #0]
      break;
 800405a:	e7ee      	b.n	800403a <lsm6dsl_gy_data_rate_get+0x2e>
      *val = LSM6DSL_GY_ODR_416Hz;
 800405c:	2306      	movs	r3, #6
 800405e:	7023      	strb	r3, [r4, #0]
      break;
 8004060:	e7eb      	b.n	800403a <lsm6dsl_gy_data_rate_get+0x2e>
      *val = LSM6DSL_GY_ODR_833Hz;
 8004062:	2307      	movs	r3, #7
 8004064:	7023      	strb	r3, [r4, #0]
      break;
 8004066:	e7e8      	b.n	800403a <lsm6dsl_gy_data_rate_get+0x2e>
      *val = LSM6DSL_GY_ODR_1k66Hz;
 8004068:	2308      	movs	r3, #8
 800406a:	7023      	strb	r3, [r4, #0]
      break;
 800406c:	e7e5      	b.n	800403a <lsm6dsl_gy_data_rate_get+0x2e>
      *val = LSM6DSL_GY_ODR_3k33Hz;
 800406e:	2309      	movs	r3, #9
 8004070:	7023      	strb	r3, [r4, #0]
      break;
 8004072:	e7e2      	b.n	800403a <lsm6dsl_gy_data_rate_get+0x2e>
      *val = LSM6DSL_GY_ODR_6k66Hz;
 8004074:	230a      	movs	r3, #10
 8004076:	7023      	strb	r3, [r4, #0]
      break;
 8004078:	e7df      	b.n	800403a <lsm6dsl_gy_data_rate_get+0x2e>
      *val = LSM6DSL_GY_ODR_ND;
 800407a:	230b      	movs	r3, #11
 800407c:	7023      	strb	r3, [r4, #0]
  return ret;
 800407e:	e7dc      	b.n	800403a <lsm6dsl_gy_data_rate_get+0x2e>

08004080 <lsm6dsl_block_data_update_set>:
  * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t val: change the values of bdu in reg CTRL3_C
  *
  */
int32_t lsm6dsl_block_data_update_set(lsm6dsl_ctx_t *ctx, uint8_t val)
{
 8004080:	b530      	push	{r4, r5, lr}
 8004082:	b083      	sub	sp, #12
 8004084:	4604      	mov	r4, r0
 8004086:	460d      	mov	r5, r1
  lsm6dsl_reg_t reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, &reg.byte, 1);
 8004088:	2301      	movs	r3, #1
 800408a:	aa01      	add	r2, sp, #4
 800408c:	2112      	movs	r1, #18
 800408e:	f7ff febd 	bl	8003e0c <lsm6dsl_read_reg>
  if (ret == 0)
 8004092:	4603      	mov	r3, r0
 8004094:	b110      	cbz	r0, 800409c <lsm6dsl_block_data_update_set+0x1c>
  {
    reg.ctrl3_c.bdu = val;
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, &reg.byte, 1);
  }
  return ret;
}
 8004096:	4618      	mov	r0, r3
 8004098:	b003      	add	sp, #12
 800409a:	bd30      	pop	{r4, r5, pc}
    reg.ctrl3_c.bdu = val;
 800409c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80040a0:	f365 1386 	bfi	r3, r5, #6, #1
 80040a4:	aa02      	add	r2, sp, #8
 80040a6:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, &reg.byte, 1);
 80040aa:	2301      	movs	r3, #1
 80040ac:	2112      	movs	r1, #18
 80040ae:	4620      	mov	r0, r4
 80040b0:	f7ff feb1 	bl	8003e16 <lsm6dsl_write_reg>
 80040b4:	4603      	mov	r3, r0
  return ret;
 80040b6:	e7ee      	b.n	8004096 <lsm6dsl_block_data_update_set+0x16>

080040b8 <lsm6dsl_angular_rate_raw_get>:
  * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(lsm6dsl_ctx_t *ctx, uint8_t *buff)
{
 80040b8:	b508      	push	{r3, lr}
  return lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 80040ba:	2306      	movs	r3, #6
 80040bc:	460a      	mov	r2, r1
 80040be:	2122      	movs	r1, #34	; 0x22
 80040c0:	f7ff fea4 	bl	8003e0c <lsm6dsl_read_reg>
}
 80040c4:	bd08      	pop	{r3, pc}

080040c6 <lsm6dsl_acceleration_raw_get>:
  * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t lsm6dsl_acceleration_raw_get(lsm6dsl_ctx_t *ctx, uint8_t *buff)
{
 80040c6:	b508      	push	{r3, lr}
  return lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 80040c8:	2306      	movs	r3, #6
 80040ca:	460a      	mov	r2, r1
 80040cc:	2128      	movs	r1, #40	; 0x28
 80040ce:	f7ff fe9d 	bl	8003e0c <lsm6dsl_read_reg>
}
 80040d2:	bd08      	pop	{r3, pc}

080040d4 <lsm6dsl_device_id_get>:
  * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t lsm6dsl_device_id_get(lsm6dsl_ctx_t *ctx, uint8_t *buff)
{
 80040d4:	b508      	push	{r3, lr}
  return lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 80040d6:	2301      	movs	r3, #1
 80040d8:	460a      	mov	r2, r1
 80040da:	210f      	movs	r1, #15
 80040dc:	f7ff fe96 	bl	8003e0c <lsm6dsl_read_reg>
}
 80040e0:	bd08      	pop	{r3, pc}

080040e2 <lsm6dsl_auto_increment_set>:
  * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t val: change the values of if_inc in reg CTRL3_C
  *
  */
int32_t lsm6dsl_auto_increment_set(lsm6dsl_ctx_t *ctx, uint8_t val)
{
 80040e2:	b530      	push	{r4, r5, lr}
 80040e4:	b083      	sub	sp, #12
 80040e6:	4604      	mov	r4, r0
 80040e8:	460d      	mov	r5, r1
  lsm6dsl_reg_t reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, &reg.byte, 1);
 80040ea:	2301      	movs	r3, #1
 80040ec:	aa01      	add	r2, sp, #4
 80040ee:	2112      	movs	r1, #18
 80040f0:	f7ff fe8c 	bl	8003e0c <lsm6dsl_read_reg>
  if (ret == 0)
 80040f4:	4603      	mov	r3, r0
 80040f6:	b110      	cbz	r0, 80040fe <lsm6dsl_auto_increment_set+0x1c>
  {
    reg.ctrl3_c.if_inc = val;
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, &reg.byte, 1);
  }
  return ret;
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	b003      	add	sp, #12
 80040fc:	bd30      	pop	{r4, r5, pc}
    reg.ctrl3_c.if_inc = val;
 80040fe:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004102:	f365 0382 	bfi	r3, r5, #2, #1
 8004106:	aa02      	add	r2, sp, #8
 8004108:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, &reg.byte, 1);
 800410c:	2301      	movs	r3, #1
 800410e:	2112      	movs	r1, #18
 8004110:	4620      	mov	r0, r4
 8004112:	f7ff fe80 	bl	8003e16 <lsm6dsl_write_reg>
 8004116:	4603      	mov	r3, r0
  return ret;
 8004118:	e7ee      	b.n	80040f8 <lsm6dsl_auto_increment_set+0x16>

0800411a <lsm6dsl_fifo_mode_set>:
  * @param  lsm6dsl_fifo_mode_t: change the values of fifo_mode in
  *                              reg FIFO_CTRL5
  *
  */
int32_t lsm6dsl_fifo_mode_set(lsm6dsl_ctx_t *ctx, lsm6dsl_fifo_mode_t val)
{
 800411a:	b530      	push	{r4, r5, lr}
 800411c:	b083      	sub	sp, #12
 800411e:	4604      	mov	r4, r0
 8004120:	460d      	mov	r5, r1
  lsm6dsl_reg_t reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, &reg.byte, 1);
 8004122:	2301      	movs	r3, #1
 8004124:	aa01      	add	r2, sp, #4
 8004126:	210a      	movs	r1, #10
 8004128:	f7ff fe70 	bl	8003e0c <lsm6dsl_read_reg>
  if (ret == 0)
 800412c:	4603      	mov	r3, r0
 800412e:	b110      	cbz	r0, 8004136 <lsm6dsl_fifo_mode_set+0x1c>
  {
    reg.fifo_ctrl5.fifo_mode = (uint8_t)val;
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5, &reg.byte, 1);
  }
  return ret;
}
 8004130:	4618      	mov	r0, r3
 8004132:	b003      	add	sp, #12
 8004134:	bd30      	pop	{r4, r5, pc}
    reg.fifo_ctrl5.fifo_mode = (uint8_t)val;
 8004136:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800413a:	f365 0302 	bfi	r3, r5, #0, #3
 800413e:	aa02      	add	r2, sp, #8
 8004140:	f802 3d04 	strb.w	r3, [r2, #-4]!
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5, &reg.byte, 1);
 8004144:	2301      	movs	r3, #1
 8004146:	210a      	movs	r1, #10
 8004148:	4620      	mov	r0, r4
 800414a:	f7ff fe64 	bl	8003e16 <lsm6dsl_write_reg>
 800414e:	4603      	mov	r3, r0
  return ret;
 8004150:	e7ee      	b.n	8004130 <lsm6dsl_fifo_mode_set+0x16>
	...

08004154 <HTS221_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
 * @retval BSP status
 */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 8004154:	b570      	push	{r4, r5, r6, lr}
 8004156:	b08c      	sub	sp, #48	; 0x30
 8004158:	4604      	mov	r4, r0
  int32_t                ret = BSP_ERROR_NONE;
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 800415a:	2300      	movs	r3, #0
 800415c:	9307      	str	r3, [sp, #28]
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 800415e:	23bf      	movs	r3, #191	; 0xbf
 8004160:	f88d 3020 	strb.w	r3, [sp, #32]
  io_ctx.Init        = IKS01A2_I2C_Init;
 8004164:	4b32      	ldr	r3, [pc, #200]	; (8004230 <HTS221_0_Probe+0xdc>)
 8004166:	9305      	str	r3, [sp, #20]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8004168:	4b32      	ldr	r3, [pc, #200]	; (8004234 <HTS221_0_Probe+0xe0>)
 800416a:	9306      	str	r3, [sp, #24]
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800416c:	4b32      	ldr	r3, [pc, #200]	; (8004238 <HTS221_0_Probe+0xe4>)
 800416e:	930a      	str	r3, [sp, #40]	; 0x28
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8004170:	4b32      	ldr	r3, [pc, #200]	; (800423c <HTS221_0_Probe+0xe8>)
 8004172:	9309      	str	r3, [sp, #36]	; 0x24
  io_ctx.GetTick     = IKS01A2_GetTick;
 8004174:	4b32      	ldr	r3, [pc, #200]	; (8004240 <HTS221_0_Probe+0xec>)
 8004176:	930b      	str	r3, [sp, #44]	; 0x2c

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8004178:	a905      	add	r1, sp, #20
 800417a:	4832      	ldr	r0, [pc, #200]	; (8004244 <HTS221_0_Probe+0xf0>)
 800417c:	f7fd f93e 	bl	80013fc <HTS221_RegisterBusIO>
 8004180:	2800      	cmp	r0, #0
 8004182:	d14b      	bne.n	800421c <HTS221_0_Probe+0xc8>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 8004184:	f10d 0113 	add.w	r1, sp, #19
 8004188:	482e      	ldr	r0, [pc, #184]	; (8004244 <HTS221_0_Probe+0xf0>)
 800418a:	f7fd f81d 	bl	80011c8 <HTS221_ReadID>
 800418e:	4605      	mov	r5, r0
 8004190:	2800      	cmp	r0, #0
 8004192:	d146      	bne.n	8004222 <HTS221_0_Probe+0xce>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != HTS221_ID)
 8004194:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8004198:	2bbc      	cmp	r3, #188	; 0xbc
 800419a:	d145      	bne.n	8004228 <HTS221_0_Probe+0xd4>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 800419c:	4e29      	ldr	r6, [pc, #164]	; (8004244 <HTS221_0_Probe+0xf0>)
 800419e:	4669      	mov	r1, sp
 80041a0:	4630      	mov	r0, r6
 80041a2:	f7fc fefd 	bl	8000fa0 <HTS221_GetCapabilities>
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80041a6:	f89d 2000 	ldrb.w	r2, [sp]
 80041aa:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80041ae:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
                                           uint32_t)cap.Humidity << 2);
 80041b2:	f89d 1002 	ldrb.w	r1, [sp, #2]
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80041b6:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 80041ba:	4923      	ldr	r1, [pc, #140]	; (8004248 <HTS221_0_Probe+0xf4>)
 80041bc:	600b      	str	r3, [r1, #0]

    EnvCompObj[IKS01A2_HTS221_0] = &hts221_obj_0;
 80041be:	4b23      	ldr	r3, [pc, #140]	; (800424c <HTS221_0_Probe+0xf8>)
 80041c0:	601e      	str	r6, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 80041c2:	4923      	ldr	r1, [pc, #140]	; (8004250 <HTS221_0_Probe+0xfc>)
 80041c4:	4b23      	ldr	r3, [pc, #140]	; (8004254 <HTS221_0_Probe+0x100>)
 80041c6:	6019      	str	r1, [r3, #0]

    if (((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80041c8:	f014 0f01 	tst.w	r4, #1
 80041cc:	d001      	beq.n	80041d2 <HTS221_0_Probe+0x7e>
 80041ce:	2a01      	cmp	r2, #1
 80041d0:	d009      	beq.n	80041e6 <HTS221_0_Probe+0x92>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 80041d2:	f014 0f04 	tst.w	r4, #4
 80041d6:	d003      	beq.n	80041e0 <HTS221_0_Probe+0x8c>
 80041d8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d00e      	beq.n	80041fe <HTS221_0_Probe+0xaa>
      }
    }
  }

  return ret;
}
 80041e0:	4628      	mov	r0, r5
 80041e2:	b00c      	add	sp, #48	; 0x30
 80041e4:	bd70      	pop	{r4, r5, r6, pc}
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 80041e6:	4a1c      	ldr	r2, [pc, #112]	; (8004258 <HTS221_0_Probe+0x104>)
 80041e8:	4b1c      	ldr	r3, [pc, #112]	; (800425c <HTS221_0_Probe+0x108>)
 80041ea:	601a      	str	r2, [r3, #0]
      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 80041ec:	680b      	ldr	r3, [r1, #0]
 80041ee:	4630      	mov	r0, r6
 80041f0:	4798      	blx	r3
 80041f2:	4605      	mov	r5, r0
 80041f4:	2800      	cmp	r0, #0
 80041f6:	d0ec      	beq.n	80041d2 <HTS221_0_Probe+0x7e>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80041f8:	f06f 0504 	mvn.w	r5, #4
 80041fc:	e7e9      	b.n	80041d2 <HTS221_0_Probe+0x7e>
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 80041fe:	4a18      	ldr	r2, [pc, #96]	; (8004260 <HTS221_0_Probe+0x10c>)
 8004200:	4b16      	ldr	r3, [pc, #88]	; (800425c <HTS221_0_Probe+0x108>)
 8004202:	609a      	str	r2, [r3, #8]
      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 8004204:	4b13      	ldr	r3, [pc, #76]	; (8004254 <HTS221_0_Probe+0x100>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a10      	ldr	r2, [pc, #64]	; (800424c <HTS221_0_Probe+0xf8>)
 800420c:	6810      	ldr	r0, [r2, #0]
 800420e:	4798      	blx	r3
 8004210:	4605      	mov	r5, r0
 8004212:	2800      	cmp	r0, #0
 8004214:	d0e4      	beq.n	80041e0 <HTS221_0_Probe+0x8c>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004216:	f06f 0504 	mvn.w	r5, #4
 800421a:	e7e1      	b.n	80041e0 <HTS221_0_Probe+0x8c>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800421c:	f06f 0506 	mvn.w	r5, #6
 8004220:	e7de      	b.n	80041e0 <HTS221_0_Probe+0x8c>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004222:	f06f 0506 	mvn.w	r5, #6
 8004226:	e7db      	b.n	80041e0 <HTS221_0_Probe+0x8c>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004228:	f06f 0506 	mvn.w	r5, #6
  return ret;
 800422c:	e7d8      	b.n	80041e0 <HTS221_0_Probe+0x8c>
 800422e:	bf00      	nop
 8004230:	0800c3e5 	.word	0x0800c3e5
 8004234:	0800c3e9 	.word	0x0800c3e9
 8004238:	0800c435 	.word	0x0800c435
 800423c:	0800c409 	.word	0x0800c409
 8004240:	0800c461 	.word	0x0800c461
 8004244:	2000248c 	.word	0x2000248c
 8004248:	20002464 	.word	0x20002464
 800424c:	2000280c 	.word	0x2000280c
 8004250:	200011c0 	.word	0x200011c0
 8004254:	2000246c 	.word	0x2000246c
 8004258:	200011e4 	.word	0x200011e4
 800425c:	20002474 	.word	0x20002474
 8004260:	200011d0 	.word	0x200011d0

08004264 <LPS22HB_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE
 * @retval BSP status
 */
static int32_t LPS22HB_0_Probe(uint32_t Functions)
{
 8004264:	b570      	push	{r4, r5, r6, lr}
 8004266:	b08c      	sub	sp, #48	; 0x30
 8004268:	4604      	mov	r4, r0
  int32_t                 ret = BSP_ERROR_NONE;
  static LPS22HB_Object_t lps22hb_obj_0;
  LPS22HB_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HB_I2C_BUS; /* I2C */
 800426a:	2300      	movs	r3, #0
 800426c:	9307      	str	r3, [sp, #28]
  io_ctx.Address     = LPS22HB_I2C_ADD_H;
 800426e:	23bb      	movs	r3, #187	; 0xbb
 8004270:	f88d 3020 	strb.w	r3, [sp, #32]
  io_ctx.Init        = IKS01A2_I2C_Init;
 8004274:	4b32      	ldr	r3, [pc, #200]	; (8004340 <LPS22HB_0_Probe+0xdc>)
 8004276:	9305      	str	r3, [sp, #20]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8004278:	4b32      	ldr	r3, [pc, #200]	; (8004344 <LPS22HB_0_Probe+0xe0>)
 800427a:	9306      	str	r3, [sp, #24]
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800427c:	4b32      	ldr	r3, [pc, #200]	; (8004348 <LPS22HB_0_Probe+0xe4>)
 800427e:	930a      	str	r3, [sp, #40]	; 0x28
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8004280:	4b32      	ldr	r3, [pc, #200]	; (800434c <LPS22HB_0_Probe+0xe8>)
 8004282:	9309      	str	r3, [sp, #36]	; 0x24
  io_ctx.GetTick     = IKS01A2_GetTick;
 8004284:	4b32      	ldr	r3, [pc, #200]	; (8004350 <LPS22HB_0_Probe+0xec>)
 8004286:	930b      	str	r3, [sp, #44]	; 0x2c

  if (LPS22HB_RegisterBusIO(&lps22hb_obj_0, &io_ctx) != LPS22HB_OK)
 8004288:	a905      	add	r1, sp, #20
 800428a:	4832      	ldr	r0, [pc, #200]	; (8004354 <LPS22HB_0_Probe+0xf0>)
 800428c:	f7fe f8ec 	bl	8002468 <LPS22HB_RegisterBusIO>
 8004290:	2800      	cmp	r0, #0
 8004292:	d14b      	bne.n	800432c <LPS22HB_0_Probe+0xc8>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (LPS22HB_ReadID(&lps22hb_obj_0, &id) != LPS22HB_OK)
 8004294:	f10d 0113 	add.w	r1, sp, #19
 8004298:	482e      	ldr	r0, [pc, #184]	; (8004354 <LPS22HB_0_Probe+0xf0>)
 800429a:	f7fd ff9b 	bl	80021d4 <LPS22HB_ReadID>
 800429e:	4605      	mov	r5, r0
 80042a0:	2800      	cmp	r0, #0
 80042a2:	d146      	bne.n	8004332 <LPS22HB_0_Probe+0xce>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != LPS22HB_ID)
 80042a4:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80042a8:	2bb1      	cmp	r3, #177	; 0xb1
 80042aa:	d145      	bne.n	8004338 <LPS22HB_0_Probe+0xd4>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)LPS22HB_GetCapabilities(&lps22hb_obj_0, &cap);
 80042ac:	4e29      	ldr	r6, [pc, #164]	; (8004354 <LPS22HB_0_Probe+0xf0>)
 80042ae:	4669      	mov	r1, sp
 80042b0:	4630      	mov	r0, r6
 80042b2:	f7fd fe8f 	bl	8001fd4 <LPS22HB_GetCapabilities>

    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80042b6:	f89d 2000 	ldrb.w	r2, [sp]
 80042ba:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80042be:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
                                            uint32_t)cap.Humidity << 2);
 80042c2:	f89d 1002 	ldrb.w	r1, [sp, #2]
    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80042c6:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 80042ca:	4923      	ldr	r1, [pc, #140]	; (8004358 <LPS22HB_0_Probe+0xf4>)
 80042cc:	604b      	str	r3, [r1, #4]

    EnvCompObj[IKS01A2_LPS22HB_0] = &lps22hb_obj_0;
 80042ce:	4b23      	ldr	r3, [pc, #140]	; (800435c <LPS22HB_0_Probe+0xf8>)
 80042d0:	605e      	str	r6, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_LPS22HB_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HB_COMMON_Driver;
 80042d2:	4923      	ldr	r1, [pc, #140]	; (8004360 <LPS22HB_0_Probe+0xfc>)
 80042d4:	4b23      	ldr	r3, [pc, #140]	; (8004364 <LPS22HB_0_Probe+0x100>)
 80042d6:	6059      	str	r1, [r3, #4]

    if (((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80042d8:	f014 0f01 	tst.w	r4, #1
 80042dc:	d001      	beq.n	80042e2 <LPS22HB_0_Probe+0x7e>
 80042de:	2a01      	cmp	r2, #1
 80042e0:	d009      	beq.n	80042f6 <LPS22HB_0_Probe+0x92>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 80042e2:	f014 0f02 	tst.w	r4, #2
 80042e6:	d003      	beq.n	80042f0 <LPS22HB_0_Probe+0x8c>
 80042e8:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d00e      	beq.n	800430e <LPS22HB_0_Probe+0xaa>
        ret = BSP_ERROR_NONE;
      }
    }
  }
  return ret;
}
 80042f0:	4628      	mov	r0, r5
 80042f2:	b00c      	add	sp, #48	; 0x30
 80042f4:	bd70      	pop	{r4, r5, r6, pc}
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_TEMP_Driver;
 80042f6:	4a1c      	ldr	r2, [pc, #112]	; (8004368 <LPS22HB_0_Probe+0x104>)
 80042f8:	4b1c      	ldr	r3, [pc, #112]	; (800436c <LPS22HB_0_Probe+0x108>)
 80042fa:	60da      	str	r2, [r3, #12]
      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 80042fc:	680b      	ldr	r3, [r1, #0]
 80042fe:	4630      	mov	r0, r6
 8004300:	4798      	blx	r3
 8004302:	4605      	mov	r5, r0
 8004304:	2800      	cmp	r0, #0
 8004306:	d0ec      	beq.n	80042e2 <LPS22HB_0_Probe+0x7e>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004308:	f06f 0504 	mvn.w	r5, #4
 800430c:	e7e9      	b.n	80042e2 <LPS22HB_0_Probe+0x7e>
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_PRESS_Driver;
 800430e:	4a18      	ldr	r2, [pc, #96]	; (8004370 <LPS22HB_0_Probe+0x10c>)
 8004310:	4b16      	ldr	r3, [pc, #88]	; (800436c <LPS22HB_0_Probe+0x108>)
 8004312:	611a      	str	r2, [r3, #16]
      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 8004314:	4b13      	ldr	r3, [pc, #76]	; (8004364 <LPS22HB_0_Probe+0x100>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a10      	ldr	r2, [pc, #64]	; (800435c <LPS22HB_0_Probe+0xf8>)
 800431c:	6850      	ldr	r0, [r2, #4]
 800431e:	4798      	blx	r3
 8004320:	4605      	mov	r5, r0
 8004322:	2800      	cmp	r0, #0
 8004324:	d0e4      	beq.n	80042f0 <LPS22HB_0_Probe+0x8c>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004326:	f06f 0504 	mvn.w	r5, #4
 800432a:	e7e1      	b.n	80042f0 <LPS22HB_0_Probe+0x8c>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800432c:	f06f 0506 	mvn.w	r5, #6
 8004330:	e7de      	b.n	80042f0 <LPS22HB_0_Probe+0x8c>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004332:	f06f 0506 	mvn.w	r5, #6
 8004336:	e7db      	b.n	80042f0 <LPS22HB_0_Probe+0x8c>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004338:	f06f 0506 	mvn.w	r5, #6
  return ret;
 800433c:	e7d8      	b.n	80042f0 <LPS22HB_0_Probe+0x8c>
 800433e:	bf00      	nop
 8004340:	0800c3e5 	.word	0x0800c3e5
 8004344:	0800c3e9 	.word	0x0800c3e9
 8004348:	0800c435 	.word	0x0800c435
 800434c:	0800c409 	.word	0x0800c409
 8004350:	0800c461 	.word	0x0800c461
 8004354:	200024b8 	.word	0x200024b8
 8004358:	20002464 	.word	0x20002464
 800435c:	2000280c 	.word	0x2000280c
 8004360:	2000135c 	.word	0x2000135c
 8004364:	2000246c 	.word	0x2000246c
 8004368:	20001380 	.word	0x20001380
 800436c:	20002474 	.word	0x20002474
 8004370:	2000136c 	.word	0x2000136c

08004374 <IKS01A2_ENV_SENSOR_Init>:
{
 8004374:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004378:	b085      	sub	sp, #20
 800437a:	460f      	mov	r7, r1
  switch (Instance)
 800437c:	4606      	mov	r6, r0
 800437e:	b158      	cbz	r0, 8004398 <IKS01A2_ENV_SENSOR_Init+0x24>
 8004380:	2801      	cmp	r0, #1
 8004382:	d030      	beq.n	80043e6 <IKS01A2_ENV_SENSOR_Init+0x72>
  uint32_t component_functions = 0;
 8004384:	f04f 0900 	mov.w	r9, #0
      ret = BSP_ERROR_WRONG_PARAM;
 8004388:	f06f 0801 	mvn.w	r8, #1
  if (ret != BSP_ERROR_NONE)
 800438c:	f1b8 0f00 	cmp.w	r8, #0
 8004390:	d16f      	bne.n	8004472 <IKS01A2_ENV_SENSOR_Init+0xfe>
 8004392:	2400      	movs	r4, #0
 8004394:	2501      	movs	r5, #1
 8004396:	e04f      	b.n	8004438 <IKS01A2_ENV_SENSOR_Init+0xc4>
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 8004398:	4608      	mov	r0, r1
 800439a:	f7ff fedb 	bl	8004154 <HTS221_0_Probe>
 800439e:	2800      	cmp	r0, #0
 80043a0:	d165      	bne.n	800446e <IKS01A2_ENV_SENSOR_Init+0xfa>
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80043a2:	4b3a      	ldr	r3, [pc, #232]	; (800448c <IKS01A2_ENV_SENSOR_Init+0x118>)
 80043a4:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	4669      	mov	r1, sp
 80043ac:	4a38      	ldr	r2, [pc, #224]	; (8004490 <IKS01A2_ENV_SENSOR_Init+0x11c>)
 80043ae:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 80043b2:	4798      	blx	r3
 80043b4:	4680      	mov	r8, r0
 80043b6:	2800      	cmp	r0, #0
 80043b8:	d15f      	bne.n	800447a <IKS01A2_ENV_SENSOR_Init+0x106>
      if (cap.Temperature == 1U)
 80043ba:	f89d 3000 	ldrb.w	r3, [sp]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d00b      	beq.n	80043da <IKS01A2_ENV_SENSOR_Init+0x66>
  uint32_t component_functions = 0;
 80043c2:	46b1      	mov	r9, r6
      if (cap.Humidity == 1U)
 80043c4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d009      	beq.n	80043e0 <IKS01A2_ENV_SENSOR_Init+0x6c>
      if (cap.Pressure == 1U)
 80043cc:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d1db      	bne.n	800438c <IKS01A2_ENV_SENSOR_Init+0x18>
        component_functions |= ENV_PRESSURE;
 80043d4:	f049 0902 	orr.w	r9, r9, #2
 80043d8:	e7d8      	b.n	800438c <IKS01A2_ENV_SENSOR_Init+0x18>
        component_functions |= ENV_TEMPERATURE;
 80043da:	f04f 0901 	mov.w	r9, #1
 80043de:	e7f1      	b.n	80043c4 <IKS01A2_ENV_SENSOR_Init+0x50>
        component_functions |= ENV_HUMIDITY;
 80043e0:	f049 0904 	orr.w	r9, r9, #4
 80043e4:	e7f2      	b.n	80043cc <IKS01A2_ENV_SENSOR_Init+0x58>
      if (LPS22HB_0_Probe(Functions) != BSP_ERROR_NONE)
 80043e6:	4608      	mov	r0, r1
 80043e8:	f7ff ff3c 	bl	8004264 <LPS22HB_0_Probe>
 80043ec:	2800      	cmp	r0, #0
 80043ee:	d147      	bne.n	8004480 <IKS01A2_ENV_SENSOR_Init+0x10c>
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80043f0:	4b26      	ldr	r3, [pc, #152]	; (800448c <IKS01A2_ENV_SENSOR_Init+0x118>)
 80043f2:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	4669      	mov	r1, sp
 80043fa:	4a25      	ldr	r2, [pc, #148]	; (8004490 <IKS01A2_ENV_SENSOR_Init+0x11c>)
 80043fc:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 8004400:	4798      	blx	r3
 8004402:	4680      	mov	r8, r0
 8004404:	2800      	cmp	r0, #0
 8004406:	d13e      	bne.n	8004486 <IKS01A2_ENV_SENSOR_Init+0x112>
      if (cap.Temperature == 1U)
 8004408:	f89d 3000 	ldrb.w	r3, [sp]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d00c      	beq.n	800442a <IKS01A2_ENV_SENSOR_Init+0xb6>
  uint32_t component_functions = 0;
 8004410:	f04f 0900 	mov.w	r9, #0
      if (cap.Humidity == 1U)
 8004414:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d008      	beq.n	800442e <IKS01A2_ENV_SENSOR_Init+0xba>
      if (cap.Pressure == 1U)
 800441c:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d1b3      	bne.n	800438c <IKS01A2_ENV_SENSOR_Init+0x18>
        component_functions |= ENV_PRESSURE;
 8004424:	f049 0902 	orr.w	r9, r9, #2
 8004428:	e7b0      	b.n	800438c <IKS01A2_ENV_SENSOR_Init+0x18>
        component_functions |= ENV_TEMPERATURE;
 800442a:	46b1      	mov	r9, r6
 800442c:	e7f2      	b.n	8004414 <IKS01A2_ENV_SENSOR_Init+0xa0>
        component_functions |= ENV_HUMIDITY;
 800442e:	f049 0904 	orr.w	r9, r9, #4
 8004432:	e7f3      	b.n	800441c <IKS01A2_ENV_SENSOR_Init+0xa8>
    function = function << 1;
 8004434:	006d      	lsls	r5, r5, #1
  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 8004436:	3401      	adds	r4, #1
 8004438:	2c02      	cmp	r4, #2
 800443a:	d81a      	bhi.n	8004472 <IKS01A2_ENV_SENSOR_Init+0xfe>
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800443c:	ea35 0307 	bics.w	r3, r5, r7
 8004440:	d1f8      	bne.n	8004434 <IKS01A2_ENV_SENSOR_Init+0xc0>
 8004442:	ea35 0309 	bics.w	r3, r5, r9
 8004446:	d1f5      	bne.n	8004434 <IKS01A2_ENV_SENSOR_Init+0xc0>
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8004448:	4b12      	ldr	r3, [pc, #72]	; (8004494 <IKS01A2_ENV_SENSOR_Init+0x120>)
 800444a:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 800444e:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8004452:	4413      	add	r3, r2
 8004454:	4a10      	ldr	r2, [pc, #64]	; (8004498 <IKS01A2_ENV_SENSOR_Init+0x124>)
 8004456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a0c      	ldr	r2, [pc, #48]	; (8004490 <IKS01A2_ENV_SENSOR_Init+0x11c>)
 800445e:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 8004462:	4798      	blx	r3
 8004464:	2800      	cmp	r0, #0
 8004466:	d0e5      	beq.n	8004434 <IKS01A2_ENV_SENSOR_Init+0xc0>
        return BSP_ERROR_COMPONENT_FAILURE;
 8004468:	f06f 0804 	mvn.w	r8, #4
 800446c:	e001      	b.n	8004472 <IKS01A2_ENV_SENSOR_Init+0xfe>
        return BSP_ERROR_NO_INIT;
 800446e:	f04f 38ff 	mov.w	r8, #4294967295
}
 8004472:	4640      	mov	r0, r8
 8004474:	b005      	add	sp, #20
 8004476:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800447a:	f06f 0806 	mvn.w	r8, #6
 800447e:	e7f8      	b.n	8004472 <IKS01A2_ENV_SENSOR_Init+0xfe>
        return BSP_ERROR_NO_INIT;
 8004480:	f04f 38ff 	mov.w	r8, #4294967295
 8004484:	e7f5      	b.n	8004472 <IKS01A2_ENV_SENSOR_Init+0xfe>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8004486:	f06f 0806 	mvn.w	r8, #6
 800448a:	e7f2      	b.n	8004472 <IKS01A2_ENV_SENSOR_Init+0xfe>
 800448c:	2000246c 	.word	0x2000246c
 8004490:	2000280c 	.word	0x2000280c
 8004494:	0801e094 	.word	0x0801e094
 8004498:	20002474 	.word	0x20002474

0800449c <IKS01A2_ENV_SENSOR_GetCapabilities>:
{
 800449c:	b508      	push	{r3, lr}
  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 800449e:	2801      	cmp	r0, #1
 80044a0:	d80e      	bhi.n	80044c0 <IKS01A2_ENV_SENSOR_GetCapabilities+0x24>
  else if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 80044a2:	4b09      	ldr	r3, [pc, #36]	; (80044c8 <IKS01A2_ENV_SENSOR_GetCapabilities+0x2c>)
 80044a4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	4a08      	ldr	r2, [pc, #32]	; (80044cc <IKS01A2_ENV_SENSOR_GetCapabilities+0x30>)
 80044ac:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80044b0:	4798      	blx	r3
 80044b2:	4603      	mov	r3, r0
 80044b4:	b908      	cbnz	r0, 80044ba <IKS01A2_ENV_SENSOR_GetCapabilities+0x1e>
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80044ba:	f06f 0306 	mvn.w	r3, #6
 80044be:	e7fa      	b.n	80044b6 <IKS01A2_ENV_SENSOR_GetCapabilities+0x1a>
    ret = BSP_ERROR_WRONG_PARAM;
 80044c0:	f06f 0301 	mvn.w	r3, #1
  return ret;
 80044c4:	e7f7      	b.n	80044b6 <IKS01A2_ENV_SENSOR_GetCapabilities+0x1a>
 80044c6:	bf00      	nop
 80044c8:	2000246c 	.word	0x2000246c
 80044cc:	2000280c 	.word	0x2000280c

080044d0 <IKS01A2_ENV_SENSOR_ReadID>:
{
 80044d0:	b508      	push	{r3, lr}
  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 80044d2:	2801      	cmp	r0, #1
 80044d4:	d80e      	bhi.n	80044f4 <IKS01A2_ENV_SENSOR_ReadID+0x24>
  else if (EnvDrv[Instance]->ReadID(EnvCompObj[Instance], Id) != BSP_ERROR_NONE)
 80044d6:	4b09      	ldr	r3, [pc, #36]	; (80044fc <IKS01A2_ENV_SENSOR_ReadID+0x2c>)
 80044d8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	4a08      	ldr	r2, [pc, #32]	; (8004500 <IKS01A2_ENV_SENSOR_ReadID+0x30>)
 80044e0:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80044e4:	4798      	blx	r3
 80044e6:	4603      	mov	r3, r0
 80044e8:	b908      	cbnz	r0, 80044ee <IKS01A2_ENV_SENSOR_ReadID+0x1e>
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80044ee:	f06f 0306 	mvn.w	r3, #6
 80044f2:	e7fa      	b.n	80044ea <IKS01A2_ENV_SENSOR_ReadID+0x1a>
    ret = BSP_ERROR_WRONG_PARAM;
 80044f4:	f06f 0301 	mvn.w	r3, #1
  return ret;
 80044f8:	e7f7      	b.n	80044ea <IKS01A2_ENV_SENSOR_ReadID+0x1a>
 80044fa:	bf00      	nop
 80044fc:	2000246c 	.word	0x2000246c
 8004500:	2000280c 	.word	0x2000280c

08004504 <IKS01A2_ENV_SENSOR_Enable>:
{
 8004504:	b508      	push	{r3, lr}
  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 8004506:	2801      	cmp	r0, #1
 8004508:	d81a      	bhi.n	8004540 <IKS01A2_ENV_SENSOR_Enable+0x3c>
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800450a:	4b10      	ldr	r3, [pc, #64]	; (800454c <IKS01A2_ENV_SENSOR_Enable+0x48>)
 800450c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8004510:	ea31 0303 	bics.w	r3, r1, r3
 8004514:	d117      	bne.n	8004546 <IKS01A2_ENV_SENSOR_Enable+0x42>
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8004516:	4b0e      	ldr	r3, [pc, #56]	; (8004550 <IKS01A2_ENV_SENSOR_Enable+0x4c>)
 8004518:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 800451c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8004520:	4413      	add	r3, r2
 8004522:	4a0c      	ldr	r2, [pc, #48]	; (8004554 <IKS01A2_ENV_SENSOR_Enable+0x50>)
 8004524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a0b      	ldr	r2, [pc, #44]	; (8004558 <IKS01A2_ENV_SENSOR_Enable+0x54>)
 800452c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8004530:	4798      	blx	r3
 8004532:	4603      	mov	r3, r0
 8004534:	b908      	cbnz	r0, 800453a <IKS01A2_ENV_SENSOR_Enable+0x36>
}
 8004536:	4618      	mov	r0, r3
 8004538:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800453a:	f06f 0304 	mvn.w	r3, #4
 800453e:	e7fa      	b.n	8004536 <IKS01A2_ENV_SENSOR_Enable+0x32>
    ret = BSP_ERROR_WRONG_PARAM;
 8004540:	f06f 0301 	mvn.w	r3, #1
 8004544:	e7f7      	b.n	8004536 <IKS01A2_ENV_SENSOR_Enable+0x32>
      ret = BSP_ERROR_WRONG_PARAM;
 8004546:	f06f 0301 	mvn.w	r3, #1
  return ret;
 800454a:	e7f4      	b.n	8004536 <IKS01A2_ENV_SENSOR_Enable+0x32>
 800454c:	20002464 	.word	0x20002464
 8004550:	0801e094 	.word	0x0801e094
 8004554:	20002474 	.word	0x20002474
 8004558:	2000280c 	.word	0x2000280c

0800455c <IKS01A2_ENV_SENSOR_GetOutputDataRate>:
{
 800455c:	b508      	push	{r3, lr}
  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 800455e:	2801      	cmp	r0, #1
 8004560:	d81c      	bhi.n	800459c <IKS01A2_ENV_SENSOR_GetOutputDataRate+0x40>
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8004562:	4b11      	ldr	r3, [pc, #68]	; (80045a8 <IKS01A2_ENV_SENSOR_GetOutputDataRate+0x4c>)
 8004564:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8004568:	ea31 0303 	bics.w	r3, r1, r3
 800456c:	d119      	bne.n	80045a2 <IKS01A2_ENV_SENSOR_GetOutputDataRate+0x46>
 800456e:	460b      	mov	r3, r1
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(EnvCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8004570:	490e      	ldr	r1, [pc, #56]	; (80045ac <IKS01A2_ENV_SENSOR_GetOutputDataRate+0x50>)
 8004572:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004576:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800457a:	440b      	add	r3, r1
 800457c:	490c      	ldr	r1, [pc, #48]	; (80045b0 <IKS01A2_ENV_SENSOR_GetOutputDataRate+0x54>)
 800457e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	4611      	mov	r1, r2
 8004586:	4a0b      	ldr	r2, [pc, #44]	; (80045b4 <IKS01A2_ENV_SENSOR_GetOutputDataRate+0x58>)
 8004588:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800458c:	4798      	blx	r3
 800458e:	4603      	mov	r3, r0
 8004590:	b908      	cbnz	r0, 8004596 <IKS01A2_ENV_SENSOR_GetOutputDataRate+0x3a>
}
 8004592:	4618      	mov	r0, r3
 8004594:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004596:	f06f 0304 	mvn.w	r3, #4
 800459a:	e7fa      	b.n	8004592 <IKS01A2_ENV_SENSOR_GetOutputDataRate+0x36>
    ret = BSP_ERROR_WRONG_PARAM;
 800459c:	f06f 0301 	mvn.w	r3, #1
 80045a0:	e7f7      	b.n	8004592 <IKS01A2_ENV_SENSOR_GetOutputDataRate+0x36>
      ret = BSP_ERROR_WRONG_PARAM;
 80045a2:	f06f 0301 	mvn.w	r3, #1
  return ret;
 80045a6:	e7f4      	b.n	8004592 <IKS01A2_ENV_SENSOR_GetOutputDataRate+0x36>
 80045a8:	20002464 	.word	0x20002464
 80045ac:	0801e094 	.word	0x0801e094
 80045b0:	20002474 	.word	0x20002474
 80045b4:	2000280c 	.word	0x2000280c

080045b8 <IKS01A2_ENV_SENSOR_GetValue>:
{
 80045b8:	b508      	push	{r3, lr}
  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 80045ba:	2801      	cmp	r0, #1
 80045bc:	d81c      	bhi.n	80045f8 <IKS01A2_ENV_SENSOR_GetValue+0x40>
    if ((EnvCtx[Instance].Functions & Function) == Function)
 80045be:	4b11      	ldr	r3, [pc, #68]	; (8004604 <IKS01A2_ENV_SENSOR_GetValue+0x4c>)
 80045c0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80045c4:	ea31 0303 	bics.w	r3, r1, r3
 80045c8:	d119      	bne.n	80045fe <IKS01A2_ENV_SENSOR_GetValue+0x46>
 80045ca:	460b      	mov	r3, r1
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 80045cc:	490e      	ldr	r1, [pc, #56]	; (8004608 <IKS01A2_ENV_SENSOR_GetValue+0x50>)
 80045ce:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80045d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80045d6:	440b      	add	r3, r1
 80045d8:	490c      	ldr	r1, [pc, #48]	; (800460c <IKS01A2_ENV_SENSOR_GetValue+0x54>)
 80045da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	4611      	mov	r1, r2
 80045e2:	4a0b      	ldr	r2, [pc, #44]	; (8004610 <IKS01A2_ENV_SENSOR_GetValue+0x58>)
 80045e4:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80045e8:	4798      	blx	r3
 80045ea:	4603      	mov	r3, r0
 80045ec:	b908      	cbnz	r0, 80045f2 <IKS01A2_ENV_SENSOR_GetValue+0x3a>
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80045f2:	f06f 0304 	mvn.w	r3, #4
 80045f6:	e7fa      	b.n	80045ee <IKS01A2_ENV_SENSOR_GetValue+0x36>
    ret = BSP_ERROR_WRONG_PARAM;
 80045f8:	f06f 0301 	mvn.w	r3, #1
 80045fc:	e7f7      	b.n	80045ee <IKS01A2_ENV_SENSOR_GetValue+0x36>
      ret = BSP_ERROR_WRONG_PARAM;
 80045fe:	f06f 0301 	mvn.w	r3, #1
  return ret;
 8004602:	e7f4      	b.n	80045ee <IKS01A2_ENV_SENSOR_GetValue+0x36>
 8004604:	20002464 	.word	0x20002464
 8004608:	0801e094 	.word	0x0801e094
 800460c:	20002474 	.word	0x20002474
 8004610:	2000280c 	.word	0x2000280c

08004614 <LSM6DSL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 8004614:	b570      	push	{r4, r5, r6, lr}
 8004616:	b090      	sub	sp, #64	; 0x40
 8004618:	4604      	mov	r4, r0
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 800461a:	2300      	movs	r3, #0
 800461c:	930b      	str	r3, [sp, #44]	; 0x2c
  io_ctx.Address     = LSM6DSL_I2C_ADD_H;
 800461e:	23d7      	movs	r3, #215	; 0xd7
 8004620:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  io_ctx.Init        = IKS01A2_I2C_Init;
 8004624:	4b32      	ldr	r3, [pc, #200]	; (80046f0 <LSM6DSL_0_Probe+0xdc>)
 8004626:	9309      	str	r3, [sp, #36]	; 0x24
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8004628:	4b32      	ldr	r3, [pc, #200]	; (80046f4 <LSM6DSL_0_Probe+0xe0>)
 800462a:	930a      	str	r3, [sp, #40]	; 0x28
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800462c:	4b32      	ldr	r3, [pc, #200]	; (80046f8 <LSM6DSL_0_Probe+0xe4>)
 800462e:	930e      	str	r3, [sp, #56]	; 0x38
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8004630:	4b32      	ldr	r3, [pc, #200]	; (80046fc <LSM6DSL_0_Probe+0xe8>)
 8004632:	930d      	str	r3, [sp, #52]	; 0x34
  io_ctx.GetTick     = IKS01A2_GetTick;
 8004634:	4b32      	ldr	r3, [pc, #200]	; (8004700 <LSM6DSL_0_Probe+0xec>)
 8004636:	930f      	str	r3, [sp, #60]	; 0x3c

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 8004638:	a909      	add	r1, sp, #36	; 0x24
 800463a:	4832      	ldr	r0, [pc, #200]	; (8004704 <LSM6DSL_0_Probe+0xf0>)
 800463c:	f7ff fba8 	bl	8003d90 <LSM6DSL_RegisterBusIO>
 8004640:	2800      	cmp	r0, #0
 8004642:	d14b      	bne.n	80046dc <LSM6DSL_0_Probe+0xc8>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 8004644:	f10d 0123 	add.w	r1, sp, #35	; 0x23
 8004648:	482e      	ldr	r0, [pc, #184]	; (8004704 <LSM6DSL_0_Probe+0xf0>)
 800464a:	f7ff f916 	bl	800387a <LSM6DSL_ReadID>
 800464e:	4605      	mov	r5, r0
 8004650:	2800      	cmp	r0, #0
 8004652:	d146      	bne.n	80046e2 <LSM6DSL_0_Probe+0xce>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != LSM6DSL_ID)
 8004654:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004658:	2b6a      	cmp	r3, #106	; 0x6a
 800465a:	d145      	bne.n	80046e8 <LSM6DSL_0_Probe+0xd4>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 800465c:	4e29      	ldr	r6, [pc, #164]	; (8004704 <LSM6DSL_0_Probe+0xf0>)
 800465e:	a901      	add	r1, sp, #4
 8004660:	4630      	mov	r0, r6
 8004662:	f7fe fe87 	bl	8003374 <LSM6DSL_GetCapabilities>
    MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8004666:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800466a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800466e:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
 8004672:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8004676:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 800467a:	4923      	ldr	r1, [pc, #140]	; (8004708 <LSM6DSL_0_Probe+0xf4>)
 800467c:	600b      	str	r3, [r1, #0]

    MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 800467e:	4b23      	ldr	r3, [pc, #140]	; (800470c <LSM6DSL_0_Probe+0xf8>)
 8004680:	601e      	str	r6, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 8004682:	4923      	ldr	r1, [pc, #140]	; (8004710 <LSM6DSL_0_Probe+0xfc>)
 8004684:	4b23      	ldr	r3, [pc, #140]	; (8004714 <LSM6DSL_0_Probe+0x100>)
 8004686:	6019      	str	r1, [r3, #0]

    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8004688:	f014 0f01 	tst.w	r4, #1
 800468c:	d001      	beq.n	8004692 <LSM6DSL_0_Probe+0x7e>
 800468e:	2a01      	cmp	r2, #1
 8004690:	d009      	beq.n	80046a6 <LSM6DSL_0_Probe+0x92>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8004692:	f014 0f02 	tst.w	r4, #2
 8004696:	d003      	beq.n	80046a0 <LSM6DSL_0_Probe+0x8c>
 8004698:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d00e      	beq.n	80046be <LSM6DSL_0_Probe+0xaa>
        ret = BSP_ERROR_NONE;
      }
    }
  }
  return ret;
}
 80046a0:	4628      	mov	r0, r5
 80046a2:	b010      	add	sp, #64	; 0x40
 80046a4:	bd70      	pop	{r4, r5, r6, pc}
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 80046a6:	4a1c      	ldr	r2, [pc, #112]	; (8004718 <LSM6DSL_0_Probe+0x104>)
 80046a8:	4b1c      	ldr	r3, [pc, #112]	; (800471c <LSM6DSL_0_Probe+0x108>)
 80046aa:	601a      	str	r2, [r3, #0]
      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 80046ac:	680b      	ldr	r3, [r1, #0]
 80046ae:	4630      	mov	r0, r6
 80046b0:	4798      	blx	r3
 80046b2:	4605      	mov	r5, r0
 80046b4:	2800      	cmp	r0, #0
 80046b6:	d0ec      	beq.n	8004692 <LSM6DSL_0_Probe+0x7e>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80046b8:	f06f 0504 	mvn.w	r5, #4
 80046bc:	e7e9      	b.n	8004692 <LSM6DSL_0_Probe+0x7e>
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80046be:	4a18      	ldr	r2, [pc, #96]	; (8004720 <LSM6DSL_0_Probe+0x10c>)
 80046c0:	4b16      	ldr	r3, [pc, #88]	; (800471c <LSM6DSL_0_Probe+0x108>)
 80046c2:	605a      	str	r2, [r3, #4]
      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 80046c4:	4b13      	ldr	r3, [pc, #76]	; (8004714 <LSM6DSL_0_Probe+0x100>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a10      	ldr	r2, [pc, #64]	; (800470c <LSM6DSL_0_Probe+0xf8>)
 80046cc:	6810      	ldr	r0, [r2, #0]
 80046ce:	4798      	blx	r3
 80046d0:	4605      	mov	r5, r0
 80046d2:	2800      	cmp	r0, #0
 80046d4:	d0e4      	beq.n	80046a0 <LSM6DSL_0_Probe+0x8c>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80046d6:	f06f 0504 	mvn.w	r5, #4
 80046da:	e7e1      	b.n	80046a0 <LSM6DSL_0_Probe+0x8c>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80046dc:	f06f 0506 	mvn.w	r5, #6
 80046e0:	e7de      	b.n	80046a0 <LSM6DSL_0_Probe+0x8c>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80046e2:	f06f 0506 	mvn.w	r5, #6
 80046e6:	e7db      	b.n	80046a0 <LSM6DSL_0_Probe+0x8c>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80046e8:	f06f 0506 	mvn.w	r5, #6
  return ret;
 80046ec:	e7d8      	b.n	80046a0 <LSM6DSL_0_Probe+0x8c>
 80046ee:	bf00      	nop
 80046f0:	0800c3e5 	.word	0x0800c3e5
 80046f4:	0800c3e9 	.word	0x0800c3e9
 80046f8:	0800c435 	.word	0x0800c435
 80046fc:	0800c409 	.word	0x0800c409
 8004700:	0800c461 	.word	0x0800c461
 8004704:	20002578 	.word	0x20002578
 8004708:	200024e4 	.word	0x200024e4
 800470c:	20002814 	.word	0x20002814
 8004710:	20001420 	.word	0x20001420
 8004714:	200024f0 	.word	0x200024f0
 8004718:	20001430 	.word	0x20001430
 800471c:	200024fc 	.word	0x200024fc
 8004720:	200013fc 	.word	0x200013fc

08004724 <LSM303AGR_ACC_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_ACC_0_Probe(uint32_t Functions)
{
 8004724:	b570      	push	{r4, r5, r6, lr}
 8004726:	b090      	sub	sp, #64	; 0x40
 8004728:	4606      	mov	r6, r0
  static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 800472a:	2300      	movs	r3, #0
 800472c:	930b      	str	r3, [sp, #44]	; 0x2c
  io_ctx.Address     = LSM303AGR_I2C_ADD_XL;
 800472e:	2333      	movs	r3, #51	; 0x33
 8004730:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  io_ctx.Init        = IKS01A2_I2C_Init;
 8004734:	4b27      	ldr	r3, [pc, #156]	; (80047d4 <LSM303AGR_ACC_0_Probe+0xb0>)
 8004736:	9309      	str	r3, [sp, #36]	; 0x24
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8004738:	4b27      	ldr	r3, [pc, #156]	; (80047d8 <LSM303AGR_ACC_0_Probe+0xb4>)
 800473a:	930a      	str	r3, [sp, #40]	; 0x28
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800473c:	4b27      	ldr	r3, [pc, #156]	; (80047dc <LSM303AGR_ACC_0_Probe+0xb8>)
 800473e:	930e      	str	r3, [sp, #56]	; 0x38
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8004740:	4b27      	ldr	r3, [pc, #156]	; (80047e0 <LSM303AGR_ACC_0_Probe+0xbc>)
 8004742:	930d      	str	r3, [sp, #52]	; 0x34
  io_ctx.GetTick     = IKS01A2_GetTick;
 8004744:	4b27      	ldr	r3, [pc, #156]	; (80047e4 <LSM303AGR_ACC_0_Probe+0xc0>)
 8004746:	930f      	str	r3, [sp, #60]	; 0x3c

  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 8004748:	a909      	add	r1, sp, #36	; 0x24
 800474a:	4827      	ldr	r0, [pc, #156]	; (80047e8 <LSM303AGR_ACC_0_Probe+0xc4>)
 800474c:	f7fe fc52 	bl	8002ff4 <LSM303AGR_ACC_RegisterBusIO>
 8004750:	2800      	cmp	r0, #0
 8004752:	d135      	bne.n	80047c0 <LSM303AGR_ACC_0_Probe+0x9c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK)
 8004754:	f10d 0123 	add.w	r1, sp, #35	; 0x23
 8004758:	4823      	ldr	r0, [pc, #140]	; (80047e8 <LSM303AGR_ACC_0_Probe+0xc4>)
 800475a:	f7fe f8f5 	bl	8002948 <LSM303AGR_ACC_ReadID>
 800475e:	4604      	mov	r4, r0
 8004760:	2800      	cmp	r0, #0
 8004762:	d130      	bne.n	80047c6 <LSM303AGR_ACC_0_Probe+0xa2>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != (uint8_t)LSM303AGR_ID_XL)
 8004764:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004768:	2b33      	cmp	r3, #51	; 0x33
 800476a:	d12f      	bne.n	80047cc <LSM303AGR_ACC_0_Probe+0xa8>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 800476c:	4d1e      	ldr	r5, [pc, #120]	; (80047e8 <LSM303AGR_ACC_0_Probe+0xc4>)
 800476e:	a901      	add	r1, sp, #4
 8004770:	4628      	mov	r0, r5
 8004772:	f7fd ff8b 	bl	800268c <LSM303AGR_ACC_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8004776:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800477a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800477e:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
                                                     uint32_t)cap.Magneto << 2);
 8004782:	f89d 1006 	ldrb.w	r1, [sp, #6]
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8004786:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 800478a:	4918      	ldr	r1, [pc, #96]	; (80047ec <LSM303AGR_ACC_0_Probe+0xc8>)
 800478c:	604b      	str	r3, [r1, #4]

    MotionCompObj[IKS01A2_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 800478e:	4b18      	ldr	r3, [pc, #96]	; (80047f0 <LSM303AGR_ACC_0_Probe+0xcc>)
 8004790:	605d      	str	r5, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 8004792:	4918      	ldr	r1, [pc, #96]	; (80047f4 <LSM303AGR_ACC_0_Probe+0xd0>)
 8004794:	4b18      	ldr	r3, [pc, #96]	; (80047f8 <LSM303AGR_ACC_0_Probe+0xd4>)
 8004796:	6059      	str	r1, [r3, #4]

    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8004798:	f016 0f02 	tst.w	r6, #2
 800479c:	d001      	beq.n	80047a2 <LSM303AGR_ACC_0_Probe+0x7e>
 800479e:	2a01      	cmp	r2, #1
 80047a0:	d002      	beq.n	80047a8 <LSM303AGR_ACC_0_Probe+0x84>
      }
    }
  }

  return ret;
}
 80047a2:	4620      	mov	r0, r4
 80047a4:	b010      	add	sp, #64	; 0x40
 80047a6:	bd70      	pop	{r4, r5, r6, pc}
      MotionFuncDrv[IKS01A2_LSM303AGR_ACC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80047a8:	4a14      	ldr	r2, [pc, #80]	; (80047fc <LSM303AGR_ACC_0_Probe+0xd8>)
 80047aa:	4b15      	ldr	r3, [pc, #84]	; (8004800 <LSM303AGR_ACC_0_Probe+0xdc>)
 80047ac:	611a      	str	r2, [r3, #16]
      if (MotionDrv[IKS01A2_LSM303AGR_ACC_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_ACC_0]) != LSM303AGR_OK)
 80047ae:	680b      	ldr	r3, [r1, #0]
 80047b0:	4628      	mov	r0, r5
 80047b2:	4798      	blx	r3
 80047b4:	4604      	mov	r4, r0
 80047b6:	2800      	cmp	r0, #0
 80047b8:	d0f3      	beq.n	80047a2 <LSM303AGR_ACC_0_Probe+0x7e>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80047ba:	f06f 0404 	mvn.w	r4, #4
 80047be:	e7f0      	b.n	80047a2 <LSM303AGR_ACC_0_Probe+0x7e>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80047c0:	f06f 0406 	mvn.w	r4, #6
 80047c4:	e7ed      	b.n	80047a2 <LSM303AGR_ACC_0_Probe+0x7e>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80047c6:	f06f 0406 	mvn.w	r4, #6
 80047ca:	e7ea      	b.n	80047a2 <LSM303AGR_ACC_0_Probe+0x7e>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80047cc:	f06f 0406 	mvn.w	r4, #6
  return ret;
 80047d0:	e7e7      	b.n	80047a2 <LSM303AGR_ACC_0_Probe+0x7e>
 80047d2:	bf00      	nop
 80047d4:	0800c3e5 	.word	0x0800c3e5
 80047d8:	0800c3e9 	.word	0x0800c3e9
 80047dc:	0800c435 	.word	0x0800c435
 80047e0:	0800c409 	.word	0x0800c409
 80047e4:	0800c461 	.word	0x0800c461
 80047e8:	20002520 	.word	0x20002520
 80047ec:	200024e4 	.word	0x200024e4
 80047f0:	20002814 	.word	0x20002814
 80047f4:	20001394 	.word	0x20001394
 80047f8:	200024f0 	.word	0x200024f0
 80047fc:	200013a4 	.word	0x200013a4
 8004800:	200024fc 	.word	0x200024fc

08004804 <LSM303AGR_MAG_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_MAG_0_Probe(uint32_t Functions)
{
 8004804:	b570      	push	{r4, r5, r6, lr}
 8004806:	b090      	sub	sp, #64	; 0x40
 8004808:	4606      	mov	r6, r0
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 800480a:	2300      	movs	r3, #0
 800480c:	930b      	str	r3, [sp, #44]	; 0x2c
  io_ctx.Address     = LSM303AGR_I2C_ADD_MG;
 800480e:	233d      	movs	r3, #61	; 0x3d
 8004810:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  io_ctx.Init        = IKS01A2_I2C_Init;
 8004814:	4b27      	ldr	r3, [pc, #156]	; (80048b4 <LSM303AGR_MAG_0_Probe+0xb0>)
 8004816:	9309      	str	r3, [sp, #36]	; 0x24
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8004818:	4b27      	ldr	r3, [pc, #156]	; (80048b8 <LSM303AGR_MAG_0_Probe+0xb4>)
 800481a:	930a      	str	r3, [sp, #40]	; 0x28
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800481c:	4b27      	ldr	r3, [pc, #156]	; (80048bc <LSM303AGR_MAG_0_Probe+0xb8>)
 800481e:	930e      	str	r3, [sp, #56]	; 0x38
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8004820:	4b27      	ldr	r3, [pc, #156]	; (80048c0 <LSM303AGR_MAG_0_Probe+0xbc>)
 8004822:	930d      	str	r3, [sp, #52]	; 0x34
  io_ctx.GetTick     = IKS01A2_GetTick;
 8004824:	4b27      	ldr	r3, [pc, #156]	; (80048c4 <LSM303AGR_MAG_0_Probe+0xc0>)
 8004826:	930f      	str	r3, [sp, #60]	; 0x3c

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 8004828:	a909      	add	r1, sp, #36	; 0x24
 800482a:	4827      	ldr	r0, [pc, #156]	; (80048c8 <LSM303AGR_MAG_0_Probe+0xc4>)
 800482c:	f7fe fc20 	bl	8003070 <LSM303AGR_MAG_RegisterBusIO>
 8004830:	2800      	cmp	r0, #0
 8004832:	d135      	bne.n	80048a0 <LSM303AGR_MAG_0_Probe+0x9c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 8004834:	f10d 0123 	add.w	r1, sp, #35	; 0x23
 8004838:	4823      	ldr	r0, [pc, #140]	; (80048c8 <LSM303AGR_MAG_0_Probe+0xc4>)
 800483a:	f7fe fb3d 	bl	8002eb8 <LSM303AGR_MAG_ReadID>
 800483e:	4604      	mov	r4, r0
 8004840:	2800      	cmp	r0, #0
 8004842:	d130      	bne.n	80048a6 <LSM303AGR_MAG_0_Probe+0xa2>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 8004844:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004848:	2b40      	cmp	r3, #64	; 0x40
 800484a:	d12f      	bne.n	80048ac <LSM303AGR_MAG_0_Probe+0xa8>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 800484c:	4d1e      	ldr	r5, [pc, #120]	; (80048c8 <LSM303AGR_MAG_0_Probe+0xc4>)
 800484e:	a901      	add	r1, sp, #4
 8004850:	4628      	mov	r0, r5
 8004852:	f7fd ff2d 	bl	80026b0 <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8004856:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800485a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800485e:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
                                                     uint32_t)cap.Magneto << 2);
 8004862:	f89d 2006 	ldrb.w	r2, [sp, #6]
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8004866:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 800486a:	4918      	ldr	r1, [pc, #96]	; (80048cc <LSM303AGR_MAG_0_Probe+0xc8>)
 800486c:	608b      	str	r3, [r1, #8]

    MotionCompObj[IKS01A2_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 800486e:	4b18      	ldr	r3, [pc, #96]	; (80048d0 <LSM303AGR_MAG_0_Probe+0xcc>)
 8004870:	609d      	str	r5, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 8004872:	4918      	ldr	r1, [pc, #96]	; (80048d4 <LSM303AGR_MAG_0_Probe+0xd0>)
 8004874:	4b18      	ldr	r3, [pc, #96]	; (80048d8 <LSM303AGR_MAG_0_Probe+0xd4>)
 8004876:	6099      	str	r1, [r3, #8]

    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8004878:	f016 0f04 	tst.w	r6, #4
 800487c:	d001      	beq.n	8004882 <LSM303AGR_MAG_0_Probe+0x7e>
 800487e:	2a01      	cmp	r2, #1
 8004880:	d002      	beq.n	8004888 <LSM303AGR_MAG_0_Probe+0x84>
      }
    }
  }

  return ret;
}
 8004882:	4620      	mov	r0, r4
 8004884:	b010      	add	sp, #64	; 0x40
 8004886:	bd70      	pop	{r4, r5, r6, pc}
      MotionFuncDrv[IKS01A2_LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8004888:	4a14      	ldr	r2, [pc, #80]	; (80048dc <LSM303AGR_MAG_0_Probe+0xd8>)
 800488a:	4b15      	ldr	r3, [pc, #84]	; (80048e0 <LSM303AGR_MAG_0_Probe+0xdc>)
 800488c:	621a      	str	r2, [r3, #32]
      if (MotionDrv[IKS01A2_LSM303AGR_MAG_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_MAG_0]) != LSM303AGR_OK)
 800488e:	680b      	ldr	r3, [r1, #0]
 8004890:	4628      	mov	r0, r5
 8004892:	4798      	blx	r3
 8004894:	4604      	mov	r4, r0
 8004896:	2800      	cmp	r0, #0
 8004898:	d0f3      	beq.n	8004882 <LSM303AGR_MAG_0_Probe+0x7e>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800489a:	f06f 0404 	mvn.w	r4, #4
 800489e:	e7f0      	b.n	8004882 <LSM303AGR_MAG_0_Probe+0x7e>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80048a0:	f06f 0406 	mvn.w	r4, #6
 80048a4:	e7ed      	b.n	8004882 <LSM303AGR_MAG_0_Probe+0x7e>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80048a6:	f06f 0406 	mvn.w	r4, #6
 80048aa:	e7ea      	b.n	8004882 <LSM303AGR_MAG_0_Probe+0x7e>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80048ac:	f06f 0406 	mvn.w	r4, #6
  return ret;
 80048b0:	e7e7      	b.n	8004882 <LSM303AGR_MAG_0_Probe+0x7e>
 80048b2:	bf00      	nop
 80048b4:	0800c3e5 	.word	0x0800c3e5
 80048b8:	0800c3e9 	.word	0x0800c3e9
 80048bc:	0800c435 	.word	0x0800c435
 80048c0:	0800c409 	.word	0x0800c409
 80048c4:	0800c461 	.word	0x0800c461
 80048c8:	2000254c 	.word	0x2000254c
 80048cc:	200024e4 	.word	0x200024e4
 80048d0:	20002814 	.word	0x20002814
 80048d4:	200013c8 	.word	0x200013c8
 80048d8:	200024f0 	.word	0x200024f0
 80048dc:	200013d8 	.word	0x200013d8
 80048e0:	200024fc 	.word	0x200024fc

080048e4 <IKS01A2_MOTION_SENSOR_Init>:
{
 80048e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80048e8:	b089      	sub	sp, #36	; 0x24
 80048ea:	4606      	mov	r6, r0
 80048ec:	460f      	mov	r7, r1
  switch (Instance)
 80048ee:	2801      	cmp	r0, #1
 80048f0:	d036      	beq.n	8004960 <IKS01A2_MOTION_SENSOR_Init+0x7c>
 80048f2:	b160      	cbz	r0, 800490e <IKS01A2_MOTION_SENSOR_Init+0x2a>
 80048f4:	2802      	cmp	r0, #2
 80048f6:	d05b      	beq.n	80049b0 <IKS01A2_MOTION_SENSOR_Init+0xcc>
  uint32_t component_functions = 0;
 80048f8:	f04f 0900 	mov.w	r9, #0
      ret = BSP_ERROR_WRONG_PARAM;
 80048fc:	f06f 0801 	mvn.w	r8, #1
  if (ret != BSP_ERROR_NONE)
 8004900:	f1b8 0f00 	cmp.w	r8, #0
 8004904:	f040 809a 	bne.w	8004a3c <IKS01A2_MOTION_SENSOR_Init+0x158>
 8004908:	2400      	movs	r4, #0
 800490a:	2501      	movs	r5, #1
 800490c:	e079      	b.n	8004a02 <IKS01A2_MOTION_SENSOR_Init+0x11e>
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 800490e:	4608      	mov	r0, r1
 8004910:	f7ff fe80 	bl	8004614 <LSM6DSL_0_Probe>
 8004914:	2800      	cmp	r0, #0
 8004916:	f040 808f 	bne.w	8004a38 <IKS01A2_MOTION_SENSOR_Init+0x154>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800491a:	4b52      	ldr	r3, [pc, #328]	; (8004a64 <IKS01A2_MOTION_SENSOR_Init+0x180>)
 800491c:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	a901      	add	r1, sp, #4
 8004924:	4a50      	ldr	r2, [pc, #320]	; (8004a68 <IKS01A2_MOTION_SENSOR_Init+0x184>)
 8004926:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 800492a:	4798      	blx	r3
 800492c:	4680      	mov	r8, r0
 800492e:	2800      	cmp	r0, #0
 8004930:	f040 8088 	bne.w	8004a44 <IKS01A2_MOTION_SENSOR_Init+0x160>
      if (cap.Acc == 1U)
 8004934:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d00b      	beq.n	8004954 <IKS01A2_MOTION_SENSOR_Init+0x70>
  uint32_t component_functions = 0;
 800493c:	46b1      	mov	r9, r6
      if (cap.Gyro == 1U)
 800493e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d009      	beq.n	800495a <IKS01A2_MOTION_SENSOR_Init+0x76>
      if (cap.Magneto == 1U)
 8004946:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d1d8      	bne.n	8004900 <IKS01A2_MOTION_SENSOR_Init+0x1c>
        component_functions |= MOTION_MAGNETO;
 800494e:	f049 0904 	orr.w	r9, r9, #4
 8004952:	e7d5      	b.n	8004900 <IKS01A2_MOTION_SENSOR_Init+0x1c>
        component_functions |= MOTION_ACCELERO;
 8004954:	f04f 0902 	mov.w	r9, #2
 8004958:	e7f1      	b.n	800493e <IKS01A2_MOTION_SENSOR_Init+0x5a>
        component_functions |= MOTION_GYRO;
 800495a:	f049 0901 	orr.w	r9, r9, #1
 800495e:	e7f2      	b.n	8004946 <IKS01A2_MOTION_SENSOR_Init+0x62>
      if (LSM303AGR_ACC_0_Probe(Functions) != BSP_ERROR_NONE)
 8004960:	4608      	mov	r0, r1
 8004962:	f7ff fedf 	bl	8004724 <LSM303AGR_ACC_0_Probe>
 8004966:	2800      	cmp	r0, #0
 8004968:	d16f      	bne.n	8004a4a <IKS01A2_MOTION_SENSOR_Init+0x166>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800496a:	4b3e      	ldr	r3, [pc, #248]	; (8004a64 <IKS01A2_MOTION_SENSOR_Init+0x180>)
 800496c:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	a901      	add	r1, sp, #4
 8004974:	4a3c      	ldr	r2, [pc, #240]	; (8004a68 <IKS01A2_MOTION_SENSOR_Init+0x184>)
 8004976:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 800497a:	4798      	blx	r3
 800497c:	4680      	mov	r8, r0
 800497e:	2800      	cmp	r0, #0
 8004980:	d166      	bne.n	8004a50 <IKS01A2_MOTION_SENSOR_Init+0x16c>
      if (cap.Acc == 1U)
 8004982:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d00c      	beq.n	80049a4 <IKS01A2_MOTION_SENSOR_Init+0xc0>
  uint32_t component_functions = 0;
 800498a:	f04f 0900 	mov.w	r9, #0
      if (cap.Gyro == 1U)
 800498e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d009      	beq.n	80049aa <IKS01A2_MOTION_SENSOR_Init+0xc6>
      if (cap.Magneto == 1U)
 8004996:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d1b0      	bne.n	8004900 <IKS01A2_MOTION_SENSOR_Init+0x1c>
        component_functions |= MOTION_MAGNETO;
 800499e:	f049 0904 	orr.w	r9, r9, #4
 80049a2:	e7ad      	b.n	8004900 <IKS01A2_MOTION_SENSOR_Init+0x1c>
        component_functions |= MOTION_ACCELERO;
 80049a4:	f04f 0902 	mov.w	r9, #2
 80049a8:	e7f1      	b.n	800498e <IKS01A2_MOTION_SENSOR_Init+0xaa>
        component_functions |= MOTION_GYRO;
 80049aa:	f049 0901 	orr.w	r9, r9, #1
 80049ae:	e7f2      	b.n	8004996 <IKS01A2_MOTION_SENSOR_Init+0xb2>
      if (LSM303AGR_MAG_0_Probe(Functions) != BSP_ERROR_NONE)
 80049b0:	4608      	mov	r0, r1
 80049b2:	f7ff ff27 	bl	8004804 <LSM303AGR_MAG_0_Probe>
 80049b6:	2800      	cmp	r0, #0
 80049b8:	d14d      	bne.n	8004a56 <IKS01A2_MOTION_SENSOR_Init+0x172>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80049ba:	4b2a      	ldr	r3, [pc, #168]	; (8004a64 <IKS01A2_MOTION_SENSOR_Init+0x180>)
 80049bc:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	a901      	add	r1, sp, #4
 80049c4:	4a28      	ldr	r2, [pc, #160]	; (8004a68 <IKS01A2_MOTION_SENSOR_Init+0x184>)
 80049c6:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 80049ca:	4798      	blx	r3
 80049cc:	4680      	mov	r8, r0
 80049ce:	2800      	cmp	r0, #0
 80049d0:	d144      	bne.n	8004a5c <IKS01A2_MOTION_SENSOR_Init+0x178>
      if (cap.Acc == 1U)
 80049d2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d00c      	beq.n	80049f4 <IKS01A2_MOTION_SENSOR_Init+0x110>
  uint32_t component_functions = 0;
 80049da:	f04f 0900 	mov.w	r9, #0
      if (cap.Gyro == 1U)
 80049de:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d008      	beq.n	80049f8 <IKS01A2_MOTION_SENSOR_Init+0x114>
      if (cap.Magneto == 1U)
 80049e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d188      	bne.n	8004900 <IKS01A2_MOTION_SENSOR_Init+0x1c>
        component_functions |= MOTION_MAGNETO;
 80049ee:	f049 0904 	orr.w	r9, r9, #4
 80049f2:	e785      	b.n	8004900 <IKS01A2_MOTION_SENSOR_Init+0x1c>
        component_functions |= MOTION_ACCELERO;
 80049f4:	46b1      	mov	r9, r6
 80049f6:	e7f2      	b.n	80049de <IKS01A2_MOTION_SENSOR_Init+0xfa>
        component_functions |= MOTION_GYRO;
 80049f8:	f049 0901 	orr.w	r9, r9, #1
 80049fc:	e7f3      	b.n	80049e6 <IKS01A2_MOTION_SENSOR_Init+0x102>
    function = function << 1;
 80049fe:	006d      	lsls	r5, r5, #1
  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8004a00:	3401      	adds	r4, #1
 8004a02:	2c02      	cmp	r4, #2
 8004a04:	d81a      	bhi.n	8004a3c <IKS01A2_MOTION_SENSOR_Init+0x158>
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8004a06:	ea35 0307 	bics.w	r3, r5, r7
 8004a0a:	d1f8      	bne.n	80049fe <IKS01A2_MOTION_SENSOR_Init+0x11a>
 8004a0c:	ea35 0309 	bics.w	r3, r5, r9
 8004a10:	d1f5      	bne.n	80049fe <IKS01A2_MOTION_SENSOR_Init+0x11a>
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8004a12:	4b16      	ldr	r3, [pc, #88]	; (8004a6c <IKS01A2_MOTION_SENSOR_Init+0x188>)
 8004a14:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8004a18:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8004a1c:	4413      	add	r3, r2
 8004a1e:	4a14      	ldr	r2, [pc, #80]	; (8004a70 <IKS01A2_MOTION_SENSOR_Init+0x18c>)
 8004a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a10      	ldr	r2, [pc, #64]	; (8004a68 <IKS01A2_MOTION_SENSOR_Init+0x184>)
 8004a28:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 8004a2c:	4798      	blx	r3
 8004a2e:	2800      	cmp	r0, #0
 8004a30:	d0e5      	beq.n	80049fe <IKS01A2_MOTION_SENSOR_Init+0x11a>
        return BSP_ERROR_COMPONENT_FAILURE;
 8004a32:	f06f 0804 	mvn.w	r8, #4
 8004a36:	e001      	b.n	8004a3c <IKS01A2_MOTION_SENSOR_Init+0x158>
        return BSP_ERROR_NO_INIT;
 8004a38:	f04f 38ff 	mov.w	r8, #4294967295
}
 8004a3c:	4640      	mov	r0, r8
 8004a3e:	b009      	add	sp, #36	; 0x24
 8004a40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8004a44:	f06f 0806 	mvn.w	r8, #6
 8004a48:	e7f8      	b.n	8004a3c <IKS01A2_MOTION_SENSOR_Init+0x158>
        return BSP_ERROR_NO_INIT;
 8004a4a:	f04f 38ff 	mov.w	r8, #4294967295
 8004a4e:	e7f5      	b.n	8004a3c <IKS01A2_MOTION_SENSOR_Init+0x158>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8004a50:	f06f 0806 	mvn.w	r8, #6
 8004a54:	e7f2      	b.n	8004a3c <IKS01A2_MOTION_SENSOR_Init+0x158>
        return BSP_ERROR_NO_INIT;
 8004a56:	f04f 38ff 	mov.w	r8, #4294967295
 8004a5a:	e7ef      	b.n	8004a3c <IKS01A2_MOTION_SENSOR_Init+0x158>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8004a5c:	f06f 0806 	mvn.w	r8, #6
 8004a60:	e7ec      	b.n	8004a3c <IKS01A2_MOTION_SENSOR_Init+0x158>
 8004a62:	bf00      	nop
 8004a64:	200024f0 	.word	0x200024f0
 8004a68:	20002814 	.word	0x20002814
 8004a6c:	0801e0a8 	.word	0x0801e0a8
 8004a70:	200024fc 	.word	0x200024fc

08004a74 <IKS01A2_MOTION_SENSOR_GetCapabilities>:
{
 8004a74:	b508      	push	{r3, lr}
  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8004a76:	2802      	cmp	r0, #2
 8004a78:	d80e      	bhi.n	8004a98 <IKS01A2_MOTION_SENSOR_GetCapabilities+0x24>
  else if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 8004a7a:	4b09      	ldr	r3, [pc, #36]	; (8004aa0 <IKS01A2_MOTION_SENSOR_GetCapabilities+0x2c>)
 8004a7c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	4a08      	ldr	r2, [pc, #32]	; (8004aa4 <IKS01A2_MOTION_SENSOR_GetCapabilities+0x30>)
 8004a84:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8004a88:	4798      	blx	r3
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	b908      	cbnz	r0, 8004a92 <IKS01A2_MOTION_SENSOR_GetCapabilities+0x1e>
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004a92:	f06f 0306 	mvn.w	r3, #6
 8004a96:	e7fa      	b.n	8004a8e <IKS01A2_MOTION_SENSOR_GetCapabilities+0x1a>
    ret = BSP_ERROR_WRONG_PARAM;
 8004a98:	f06f 0301 	mvn.w	r3, #1
  return ret;
 8004a9c:	e7f7      	b.n	8004a8e <IKS01A2_MOTION_SENSOR_GetCapabilities+0x1a>
 8004a9e:	bf00      	nop
 8004aa0:	200024f0 	.word	0x200024f0
 8004aa4:	20002814 	.word	0x20002814

08004aa8 <IKS01A2_MOTION_SENSOR_ReadID>:
{
 8004aa8:	b508      	push	{r3, lr}
  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8004aaa:	2802      	cmp	r0, #2
 8004aac:	d80e      	bhi.n	8004acc <IKS01A2_MOTION_SENSOR_ReadID+0x24>
  else if (MotionDrv[Instance]->ReadID(MotionCompObj[Instance], Id) != BSP_ERROR_NONE)
 8004aae:	4b09      	ldr	r3, [pc, #36]	; (8004ad4 <IKS01A2_MOTION_SENSOR_ReadID+0x2c>)
 8004ab0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	4a08      	ldr	r2, [pc, #32]	; (8004ad8 <IKS01A2_MOTION_SENSOR_ReadID+0x30>)
 8004ab8:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8004abc:	4798      	blx	r3
 8004abe:	4603      	mov	r3, r0
 8004ac0:	b908      	cbnz	r0, 8004ac6 <IKS01A2_MOTION_SENSOR_ReadID+0x1e>
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004ac6:	f06f 0306 	mvn.w	r3, #6
 8004aca:	e7fa      	b.n	8004ac2 <IKS01A2_MOTION_SENSOR_ReadID+0x1a>
    ret = BSP_ERROR_WRONG_PARAM;
 8004acc:	f06f 0301 	mvn.w	r3, #1
  return ret;
 8004ad0:	e7f7      	b.n	8004ac2 <IKS01A2_MOTION_SENSOR_ReadID+0x1a>
 8004ad2:	bf00      	nop
 8004ad4:	200024f0 	.word	0x200024f0
 8004ad8:	20002814 	.word	0x20002814

08004adc <IKS01A2_MOTION_SENSOR_Enable>:
{
 8004adc:	b508      	push	{r3, lr}
  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8004ade:	2802      	cmp	r0, #2
 8004ae0:	d81a      	bhi.n	8004b18 <IKS01A2_MOTION_SENSOR_Enable+0x3c>
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8004ae2:	4b10      	ldr	r3, [pc, #64]	; (8004b24 <IKS01A2_MOTION_SENSOR_Enable+0x48>)
 8004ae4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8004ae8:	ea31 0303 	bics.w	r3, r1, r3
 8004aec:	d117      	bne.n	8004b1e <IKS01A2_MOTION_SENSOR_Enable+0x42>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8004aee:	4b0e      	ldr	r3, [pc, #56]	; (8004b28 <IKS01A2_MOTION_SENSOR_Enable+0x4c>)
 8004af0:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8004af4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8004af8:	4413      	add	r3, r2
 8004afa:	4a0c      	ldr	r2, [pc, #48]	; (8004b2c <IKS01A2_MOTION_SENSOR_Enable+0x50>)
 8004afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a0b      	ldr	r2, [pc, #44]	; (8004b30 <IKS01A2_MOTION_SENSOR_Enable+0x54>)
 8004b04:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8004b08:	4798      	blx	r3
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	b908      	cbnz	r0, 8004b12 <IKS01A2_MOTION_SENSOR_Enable+0x36>
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004b12:	f06f 0304 	mvn.w	r3, #4
 8004b16:	e7fa      	b.n	8004b0e <IKS01A2_MOTION_SENSOR_Enable+0x32>
    ret = BSP_ERROR_WRONG_PARAM;
 8004b18:	f06f 0301 	mvn.w	r3, #1
 8004b1c:	e7f7      	b.n	8004b0e <IKS01A2_MOTION_SENSOR_Enable+0x32>
      ret = BSP_ERROR_WRONG_PARAM;
 8004b1e:	f06f 0301 	mvn.w	r3, #1
  return ret;
 8004b22:	e7f4      	b.n	8004b0e <IKS01A2_MOTION_SENSOR_Enable+0x32>
 8004b24:	200024e4 	.word	0x200024e4
 8004b28:	0801e0a8 	.word	0x0801e0a8
 8004b2c:	200024fc 	.word	0x200024fc
 8004b30:	20002814 	.word	0x20002814

08004b34 <IKS01A2_MOTION_SENSOR_GetAxes>:
{
 8004b34:	b508      	push	{r3, lr}
  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8004b36:	2802      	cmp	r0, #2
 8004b38:	d81c      	bhi.n	8004b74 <IKS01A2_MOTION_SENSOR_GetAxes+0x40>
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8004b3a:	4b11      	ldr	r3, [pc, #68]	; (8004b80 <IKS01A2_MOTION_SENSOR_GetAxes+0x4c>)
 8004b3c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8004b40:	ea31 0303 	bics.w	r3, r1, r3
 8004b44:	d119      	bne.n	8004b7a <IKS01A2_MOTION_SENSOR_GetAxes+0x46>
 8004b46:	460b      	mov	r3, r1
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8004b48:	490e      	ldr	r1, [pc, #56]	; (8004b84 <IKS01A2_MOTION_SENSOR_GetAxes+0x50>)
 8004b4a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004b4e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8004b52:	440b      	add	r3, r1
 8004b54:	490c      	ldr	r1, [pc, #48]	; (8004b88 <IKS01A2_MOTION_SENSOR_GetAxes+0x54>)
 8004b56:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004b5a:	69db      	ldr	r3, [r3, #28]
 8004b5c:	4611      	mov	r1, r2
 8004b5e:	4a0b      	ldr	r2, [pc, #44]	; (8004b8c <IKS01A2_MOTION_SENSOR_GetAxes+0x58>)
 8004b60:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8004b64:	4798      	blx	r3
 8004b66:	4603      	mov	r3, r0
 8004b68:	b908      	cbnz	r0, 8004b6e <IKS01A2_MOTION_SENSOR_GetAxes+0x3a>
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004b6e:	f06f 0304 	mvn.w	r3, #4
 8004b72:	e7fa      	b.n	8004b6a <IKS01A2_MOTION_SENSOR_GetAxes+0x36>
    ret = BSP_ERROR_WRONG_PARAM;
 8004b74:	f06f 0301 	mvn.w	r3, #1
 8004b78:	e7f7      	b.n	8004b6a <IKS01A2_MOTION_SENSOR_GetAxes+0x36>
      ret = BSP_ERROR_WRONG_PARAM;
 8004b7a:	f06f 0301 	mvn.w	r3, #1
  return ret;
 8004b7e:	e7f4      	b.n	8004b6a <IKS01A2_MOTION_SENSOR_GetAxes+0x36>
 8004b80:	200024e4 	.word	0x200024e4
 8004b84:	0801e0a8 	.word	0x0801e0a8
 8004b88:	200024fc 	.word	0x200024fc
 8004b8c:	20002814 	.word	0x20002814

08004b90 <IKS01A2_MOTION_SENSOR_GetOutputDataRate>:
{
 8004b90:	b508      	push	{r3, lr}
  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8004b92:	2802      	cmp	r0, #2
 8004b94:	d81c      	bhi.n	8004bd0 <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x40>
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8004b96:	4b11      	ldr	r3, [pc, #68]	; (8004bdc <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x4c>)
 8004b98:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8004b9c:	ea31 0303 	bics.w	r3, r1, r3
 8004ba0:	d119      	bne.n	8004bd6 <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x46>
 8004ba2:	460b      	mov	r3, r1
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8004ba4:	490e      	ldr	r1, [pc, #56]	; (8004be0 <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x50>)
 8004ba6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004baa:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8004bae:	440b      	add	r3, r1
 8004bb0:	490c      	ldr	r1, [pc, #48]	; (8004be4 <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x54>)
 8004bb2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	4611      	mov	r1, r2
 8004bba:	4a0b      	ldr	r2, [pc, #44]	; (8004be8 <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x58>)
 8004bbc:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8004bc0:	4798      	blx	r3
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	b908      	cbnz	r0, 8004bca <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x3a>
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004bca:	f06f 0304 	mvn.w	r3, #4
 8004bce:	e7fa      	b.n	8004bc6 <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x36>
    ret = BSP_ERROR_WRONG_PARAM;
 8004bd0:	f06f 0301 	mvn.w	r3, #1
 8004bd4:	e7f7      	b.n	8004bc6 <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x36>
      ret = BSP_ERROR_WRONG_PARAM;
 8004bd6:	f06f 0301 	mvn.w	r3, #1
  return ret;
 8004bda:	e7f4      	b.n	8004bc6 <IKS01A2_MOTION_SENSOR_GetOutputDataRate+0x36>
 8004bdc:	200024e4 	.word	0x200024e4
 8004be0:	0801e0a8 	.word	0x0801e0a8
 8004be4:	200024fc 	.word	0x200024fc
 8004be8:	20002814 	.word	0x20002814

08004bec <IKS01A2_MOTION_SENSOR_GetFullScale>:
{
 8004bec:	b508      	push	{r3, lr}
  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8004bee:	2802      	cmp	r0, #2
 8004bf0:	d81c      	bhi.n	8004c2c <IKS01A2_MOTION_SENSOR_GetFullScale+0x40>
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8004bf2:	4b11      	ldr	r3, [pc, #68]	; (8004c38 <IKS01A2_MOTION_SENSOR_GetFullScale+0x4c>)
 8004bf4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8004bf8:	ea31 0303 	bics.w	r3, r1, r3
 8004bfc:	d119      	bne.n	8004c32 <IKS01A2_MOTION_SENSOR_GetFullScale+0x46>
 8004bfe:	460b      	mov	r3, r1
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetFullScale(MotionCompObj[Instance],
 8004c00:	490e      	ldr	r1, [pc, #56]	; (8004c3c <IKS01A2_MOTION_SENSOR_GetFullScale+0x50>)
 8004c02:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004c06:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8004c0a:	440b      	add	r3, r1
 8004c0c:	490c      	ldr	r1, [pc, #48]	; (8004c40 <IKS01A2_MOTION_SENSOR_GetFullScale+0x54>)
 8004c0e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	4611      	mov	r1, r2
 8004c16:	4a0b      	ldr	r2, [pc, #44]	; (8004c44 <IKS01A2_MOTION_SENSOR_GetFullScale+0x58>)
 8004c18:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8004c1c:	4798      	blx	r3
 8004c1e:	4603      	mov	r3, r0
 8004c20:	b908      	cbnz	r0, 8004c26 <IKS01A2_MOTION_SENSOR_GetFullScale+0x3a>
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004c26:	f06f 0304 	mvn.w	r3, #4
 8004c2a:	e7fa      	b.n	8004c22 <IKS01A2_MOTION_SENSOR_GetFullScale+0x36>
    ret = BSP_ERROR_WRONG_PARAM;
 8004c2c:	f06f 0301 	mvn.w	r3, #1
 8004c30:	e7f7      	b.n	8004c22 <IKS01A2_MOTION_SENSOR_GetFullScale+0x36>
      ret = BSP_ERROR_WRONG_PARAM;
 8004c32:	f06f 0301 	mvn.w	r3, #1
  return ret;
 8004c36:	e7f4      	b.n	8004c22 <IKS01A2_MOTION_SENSOR_GetFullScale+0x36>
 8004c38:	200024e4 	.word	0x200024e4
 8004c3c:	0801e0a8 	.word	0x0801e0a8
 8004c40:	200024fc 	.word	0x200024fc
 8004c44:	20002814 	.word	0x20002814

08004c48 <BSP_LED_Init>:
 * @param  Led: Specifies the Led to be configured.
 *   This parameter can be one of following parameters:
 *     @arg LED2
 */
void BSP_LED_Init(Led_TypeDef Led)
{
 8004c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c4a:	b087      	sub	sp, #28
 8004c4c:	4606      	mov	r6, r0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Enable the GPIO_LED Clock */
	LEDx_GPIO_CLK_ENABLE(Led);
 8004c4e:	2400      	movs	r4, #0
 8004c50:	9400      	str	r4, [sp, #0]
 8004c52:	4b0f      	ldr	r3, [pc, #60]	; (8004c90 <BSP_LED_Init+0x48>)
 8004c54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c56:	f042 0201 	orr.w	r2, r2, #1
 8004c5a:	631a      	str	r2, [r3, #48]	; 0x30
 8004c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	9300      	str	r3, [sp, #0]
 8004c64:	9b00      	ldr	r3, [sp, #0]

	/* Configure the GPIO_LED pin */
	GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8004c66:	2720      	movs	r7, #32
 8004c68:	9701      	str	r7, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c6e:	9403      	str	r4, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8004c70:	2302      	movs	r3, #2
 8004c72:	9304      	str	r3, [sp, #16]

	HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8004c74:	4d07      	ldr	r5, [pc, #28]	; (8004c94 <BSP_LED_Init+0x4c>)
 8004c76:	a901      	add	r1, sp, #4
 8004c78:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8004c7c:	f001 fad6 	bl	800622c <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8004c80:	4622      	mov	r2, r4
 8004c82:	4639      	mov	r1, r7
 8004c84:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 8004c88:	f001 fcd8 	bl	800663c <HAL_GPIO_WritePin>
}
 8004c8c:	b007      	add	sp, #28
 8004c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c90:	40023800 	.word	0x40023800
 8004c94:	20001458 	.word	0x20001458

08004c98 <BSP_LED_On>:
 * @param  Led: Specifies the Led to be set on.
 *   This parameter can be one of following parameters:
 *     @arg LED2
 */
void BSP_LED_On(Led_TypeDef Led)
{
 8004c98:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	2120      	movs	r1, #32
 8004c9e:	4b03      	ldr	r3, [pc, #12]	; (8004cac <BSP_LED_On+0x14>)
 8004ca0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8004ca4:	f001 fcca 	bl	800663c <HAL_GPIO_WritePin>
 8004ca8:	bd08      	pop	{r3, pc}
 8004caa:	bf00      	nop
 8004cac:	20001458 	.word	0x20001458

08004cb0 <BSP_LED_Off>:
 * @param  Led: Specifies the Led to be set off.
 *   This parameter can be one of following parameters:
 *     @arg LED2
 */
void BSP_LED_Off(Led_TypeDef Led)
{
 8004cb0:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	2120      	movs	r1, #32
 8004cb6:	4b03      	ldr	r3, [pc, #12]	; (8004cc4 <BSP_LED_Off+0x14>)
 8004cb8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8004cbc:	f001 fcbe 	bl	800663c <HAL_GPIO_WritePin>
 8004cc0:	bd08      	pop	{r3, pc}
 8004cc2:	bf00      	nop
 8004cc4:	20001458 	.word	0x20001458

08004cc8 <BSP_PB_Init>:
 *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO
 *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
 *                            generation capability
 */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8004cc8:	b530      	push	{r4, r5, lr}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	4605      	mov	r5, r0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Enable the BUTTON Clock */
	BUTTONx_GPIO_CLK_ENABLE(Button);
 8004cce:	2300      	movs	r3, #0
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	4b1a      	ldr	r3, [pc, #104]	; (8004d3c <BSP_PB_Init+0x74>)
 8004cd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cd6:	f042 0204 	orr.w	r2, r2, #4
 8004cda:	631a      	str	r2, [r3, #48]	; 0x30
 8004cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cde:	f003 0304 	and.w	r3, r3, #4
 8004ce2:	9300      	str	r3, [sp, #0]
 8004ce4:	9b00      	ldr	r3, [sp, #0]

	if (ButtonMode == BUTTON_MODE_GPIO) {
 8004ce6:	460c      	mov	r4, r1
 8004ce8:	b119      	cbz	r1, 8004cf2 <BSP_PB_Init+0x2a>
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
		GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
		HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
	}

	if (ButtonMode == BUTTON_MODE_EXTI) {
 8004cea:	2c01      	cmp	r4, #1
 8004cec:	d010      	beq.n	8004d10 <BSP_PB_Init+0x48>

		/* Enable and set Button EXTI Interrupt to the lowest priority */
		HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
		HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
	}
}
 8004cee:	b007      	add	sp, #28
 8004cf0:	bd30      	pop	{r4, r5, pc}
		GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8004cf2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004cf6:	9301      	str	r3, [sp, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	9302      	str	r3, [sp, #8]
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8004d00:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8004d02:	a901      	add	r1, sp, #4
 8004d04:	4b0e      	ldr	r3, [pc, #56]	; (8004d40 <BSP_PB_Init+0x78>)
 8004d06:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8004d0a:	f001 fa8f 	bl	800622c <HAL_GPIO_Init>
 8004d0e:	e7ec      	b.n	8004cea <BSP_PB_Init+0x22>
		GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8004d10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d14:	9301      	str	r3, [sp, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d16:	2400      	movs	r4, #0
 8004d18:	9403      	str	r4, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004d1a:	4b0a      	ldr	r3, [pc, #40]	; (8004d44 <BSP_PB_Init+0x7c>)
 8004d1c:	9302      	str	r3, [sp, #8]
		HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8004d1e:	a901      	add	r1, sp, #4
 8004d20:	4b07      	ldr	r3, [pc, #28]	; (8004d40 <BSP_PB_Init+0x78>)
 8004d22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004d26:	f001 fa81 	bl	800622c <HAL_GPIO_Init>
		HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8004d2a:	4622      	mov	r2, r4
 8004d2c:	210f      	movs	r1, #15
 8004d2e:	2028      	movs	r0, #40	; 0x28
 8004d30:	f000 fe62 	bl	80059f8 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8004d34:	2028      	movs	r0, #40	; 0x28
 8004d36:	f000 fea3 	bl	8005a80 <HAL_NVIC_EnableIRQ>
}
 8004d3a:	e7d8      	b.n	8004cee <BSP_PB_Init+0x26>
 8004d3c:	40023800 	.word	0x40023800
 8004d40:	20001454 	.word	0x20001454
 8004d44:	10210000 	.word	0x10210000

08004d48 <L6206_Board_DisableBridge>:
* @brief Disable the power bridges (leave the output bridges HiZ)
* @param[in]  bridgeId (from 0 for bridge A to 1 for bridge B)
* @retval None
**********************************************************/
void L6206_Board_DisableBridge(uint8_t bridgeId)
{
 8004d48:	b570      	push	{r4, r5, r6, lr}
 8004d4a:	b086      	sub	sp, #24
	GPIO_InitTypeDef GPIO_InitStruct;
	uint32_t gpioPin;
	GPIO_TypeDef* gpioPort;

	if (bridgeId == 0) {
 8004d4c:	b1b0      	cbz	r0, 8004d7c <L6206_Board_DisableBridge+0x34>
		gpioPin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN;
		gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT;
	}else  {
		gpioPin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
		gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT;
 8004d4e:	4d0d      	ldr	r5, [pc, #52]	; (8004d84 <L6206_Board_DisableBridge+0x3c>)
		gpioPin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
 8004d50:	2402      	movs	r4, #2
	}

	/* Configure the GPIO connected to EN pin as an output */
	GPIO_InitStruct.Pin = gpioPin;
 8004d52:	9401      	str	r4, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d54:	2301      	movs	r3, #1
 8004d56:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d58:	2600      	movs	r6, #0
 8004d5a:	9603      	str	r6, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8004d5c:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(gpioPort, &GPIO_InitStruct);
 8004d5e:	a901      	add	r1, sp, #4
 8004d60:	4628      	mov	r0, r5
 8004d62:	f001 fa63 	bl	800622c <HAL_GPIO_Init>
   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
   Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
	__ASM volatile ("cpsid i" : : : "memory");
 8004d66:	b672      	cpsid	i

	__disable_irq();
	HAL_GPIO_WritePin(gpioPort, gpioPin, GPIO_PIN_RESET);
 8004d68:	4632      	mov	r2, r6
 8004d6a:	4621      	mov	r1, r4
 8004d6c:	4628      	mov	r0, r5
 8004d6e:	f001 fc65 	bl	800663c <HAL_GPIO_WritePin>
	__HAL_GPIO_EXTI_CLEAR_IT(gpioPin);
 8004d72:	4b05      	ldr	r3, [pc, #20]	; (8004d88 <L6206_Board_DisableBridge+0x40>)
 8004d74:	615c      	str	r4, [r3, #20]
	__ASM volatile ("cpsie i" : : : "memory");
 8004d76:	b662      	cpsie	i
	__enable_irq();
}
 8004d78:	b006      	add	sp, #24
 8004d7a:	bd70      	pop	{r4, r5, r6, pc}
		gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT;
 8004d7c:	4d03      	ldr	r5, [pc, #12]	; (8004d8c <L6206_Board_DisableBridge+0x44>)
		gpioPin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN;
 8004d7e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004d82:	e7e6      	b.n	8004d52 <L6206_Board_DisableBridge+0xa>
 8004d84:	40020800 	.word	0x40020800
 8004d88:	40013c00 	.word	0x40013c00
 8004d8c:	40020000 	.word	0x40020000

08004d90 <L6206_Board_EnableBridge>:
* @param[in]  bridgeId (from 0 for bridge A to 1 for bridge B)
* @param[in]  addDelay if different from 0, a delay is added after bridge activation
* @retval None
**********************************************************/
void L6206_Board_EnableBridge(uint8_t bridgeId, uint8_t addDelay)
{
 8004d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d92:	b087      	sub	sp, #28
 8004d94:	460f      	mov	r7, r1
	GPIO_InitTypeDef GPIO_InitStruct;
	uint32_t gpioPin;
	GPIO_TypeDef* gpioPort;
	IRQn_Type flagIrqn;

	if (bridgeId == 0) {
 8004d96:	b9e8      	cbnz	r0, 8004dd4 <L6206_Board_EnableBridge+0x44>
		gpioPin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN;
		gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT;
		flagIrqn = EXTI_FLAG_A_IRQn;
 8004d98:	2528      	movs	r5, #40	; 0x28
		gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT;
 8004d9a:	4e12      	ldr	r6, [pc, #72]	; (8004de4 <L6206_Board_EnableBridge+0x54>)
		gpioPin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN;
 8004d9c:	f44f 6480 	mov.w	r4, #1024	; 0x400
		gpioPin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
		gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT;
		flagIrqn = EXTI_FLAG_B_IRQn;
	}

	HAL_GPIO_WritePin(gpioPort, gpioPin, GPIO_PIN_SET);
 8004da0:	2201      	movs	r2, #1
 8004da2:	4621      	mov	r1, r4
 8004da4:	4630      	mov	r0, r6
 8004da6:	f001 fc49 	bl	800663c <HAL_GPIO_WritePin>
	if (addDelay != 0) {
 8004daa:	b9bf      	cbnz	r7, 8004ddc <L6206_Board_EnableBridge+0x4c>
		HAL_Delay(BSP_MOTOR_CONTROL_BOARD_BRIDGE_TURN_ON_DELAY);
	}
	/* Configure the GPIO connected to EN pin to take interrupt */
	GPIO_InitStruct.Pin = gpioPin;
 8004dac:	9401      	str	r4, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004dae:	4b0e      	ldr	r3, [pc, #56]	; (8004de8 <L6206_Board_EnableBridge+0x58>)
 8004db0:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004db2:	2301      	movs	r3, #1
 8004db4:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8004db6:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(gpioPort, &GPIO_InitStruct);
 8004db8:	a901      	add	r1, sp, #4
 8004dba:	4630      	mov	r0, r6
 8004dbc:	f001 fa36 	bl	800622c <HAL_GPIO_Init>

	__HAL_GPIO_EXTI_CLEAR_IT(gpioPin);
 8004dc0:	4b0a      	ldr	r3, [pc, #40]	; (8004dec <L6206_Board_EnableBridge+0x5c>)
 8004dc2:	615c      	str	r4, [r3, #20]
	HAL_NVIC_ClearPendingIRQ(flagIrqn);
 8004dc4:	4628      	mov	r0, r5
 8004dc6:	f000 fe9f 	bl	8005b08 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(flagIrqn);
 8004dca:	4628      	mov	r0, r5
 8004dcc:	f000 fe58 	bl	8005a80 <HAL_NVIC_EnableIRQ>
}
 8004dd0:	b007      	add	sp, #28
 8004dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flagIrqn = EXTI_FLAG_B_IRQn;
 8004dd4:	2507      	movs	r5, #7
		gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT;
 8004dd6:	4e06      	ldr	r6, [pc, #24]	; (8004df0 <L6206_Board_EnableBridge+0x60>)
		gpioPin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
 8004dd8:	2402      	movs	r4, #2
 8004dda:	e7e1      	b.n	8004da0 <L6206_Board_EnableBridge+0x10>
		HAL_Delay(BSP_MOTOR_CONTROL_BOARD_BRIDGE_TURN_ON_DELAY);
 8004ddc:	2014      	movs	r0, #20
 8004dde:	f000 fa9d 	bl	800531c <HAL_Delay>
 8004de2:	e7e3      	b.n	8004dac <L6206_Board_EnableBridge+0x1c>
 8004de4:	40020000 	.word	0x40020000
 8004de8:	10210000 	.word	0x10210000
 8004dec:	40013c00 	.word	0x40013c00
 8004df0:	40020800 	.word	0x40020800

08004df4 <L6206_Board_GetFlagPinState>:
* @brief  Returns the FLAG pin state.
* @param[in]  bridgeId (from 0 for bridge A to 1 for bridge B)
* @retval The FLAG pin value.
**********************************************************/
uint32_t L6206_Board_GetFlagPinState(uint8_t bridgeId)
{
 8004df4:	b508      	push	{r3, lr}
	uint32_t gpioPin;
	GPIO_TypeDef* gpioPort;

	if (bridgeId == 0) {
 8004df6:	b120      	cbz	r0, 8004e02 <L6206_Board_GetFlagPinState+0xe>
		gpioPin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN;
		gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT;
	}else  {
		gpioPin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
		gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT;
 8004df8:	4804      	ldr	r0, [pc, #16]	; (8004e0c <L6206_Board_GetFlagPinState+0x18>)
		gpioPin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
 8004dfa:	2102      	movs	r1, #2
	}
	return HAL_GPIO_ReadPin(gpioPort, gpioPin);
 8004dfc:	f001 fc0a 	bl	8006614 <HAL_GPIO_ReadPin>
}
 8004e00:	bd08      	pop	{r3, pc}
		gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT;
 8004e02:	4803      	ldr	r0, [pc, #12]	; (8004e10 <L6206_Board_GetFlagPinState+0x1c>)
		gpioPin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN;
 8004e04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e08:	e7f8      	b.n	8004dfc <L6206_Board_GetFlagPinState+0x8>
 8004e0a:	bf00      	nop
 8004e0c:	40020800 	.word	0x40020800
 8004e10:	40020000 	.word	0x40020000

08004e14 <L6206_Board_GpioInit>:
/******************************************************//**
* @brief  Initiliases the GPIOs used by the L6206s
* @retval None
**********************************************************/
void L6206_Board_GpioInit(void)
{
 8004e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e16:	b089      	sub	sp, #36	; 0x24
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__GPIOC_CLK_ENABLE();
 8004e18:	2400      	movs	r4, #0
 8004e1a:	9400      	str	r4, [sp, #0]
 8004e1c:	4b27      	ldr	r3, [pc, #156]	; (8004ebc <L6206_Board_GpioInit+0xa8>)
 8004e1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e20:	f042 0204 	orr.w	r2, r2, #4
 8004e24:	631a      	str	r2, [r3, #48]	; 0x30
 8004e26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e28:	f002 0204 	and.w	r2, r2, #4
 8004e2c:	9200      	str	r2, [sp, #0]
 8004e2e:	9a00      	ldr	r2, [sp, #0]
	__GPIOA_CLK_ENABLE();
 8004e30:	9401      	str	r4, [sp, #4]
 8004e32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e34:	f042 0201 	orr.w	r2, r2, #1
 8004e38:	631a      	str	r2, [r3, #48]	; 0x30
 8004e3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e3c:	f002 0201 	and.w	r2, r2, #1
 8004e40:	9201      	str	r2, [sp, #4]
 8004e42:	9a01      	ldr	r2, [sp, #4]
	__GPIOB_CLK_ENABLE();
 8004e44:	9402      	str	r4, [sp, #8]
 8004e46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e48:	f042 0202 	orr.w	r2, r2, #2
 8004e4c:	631a      	str	r2, [r3, #48]	; 0x30
 8004e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e50:	f003 0302 	and.w	r3, r3, #2
 8004e54:	9302      	str	r3, [sp, #8]
 8004e56:	9b02      	ldr	r3, [sp, #8]

	/* Configure L6206 Enable pin of Bridge A ------------------------------*/
	/* This pin is reconfigured later for OCD and OVT as GPIO_MODE_IT_FALLING with GPIO_PULLUP */
	GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN;
 8004e58:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8004e5c:	9703      	str	r7, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e5e:	2501      	movs	r5, #1
 8004e60:	9504      	str	r5, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e62:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8004e64:	9506      	str	r5, [sp, #24]
	HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT, &GPIO_InitStruct);
 8004e66:	4e16      	ldr	r6, [pc, #88]	; (8004ec0 <L6206_Board_GpioInit+0xac>)
 8004e68:	a903      	add	r1, sp, #12
 8004e6a:	4630      	mov	r0, r6
 8004e6c:	f001 f9de 	bl	800622c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT, BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN, GPIO_PIN_RESET);
 8004e70:	4622      	mov	r2, r4
 8004e72:	4639      	mov	r1, r7
 8004e74:	4630      	mov	r0, r6
 8004e76:	f001 fbe1 	bl	800663c <HAL_GPIO_WritePin>

	/* Set Priority of External Line Interrupt used for the OCD OVT interrupt*/
	HAL_NVIC_SetPriority(EXTI_FLAG_A_IRQn, BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PRIORITY, 0);
 8004e7a:	4622      	mov	r2, r4
 8004e7c:	2104      	movs	r1, #4
 8004e7e:	2028      	movs	r0, #40	; 0x28
 8004e80:	f000 fdba 	bl	80059f8 <HAL_NVIC_SetPriority>

	/* Enable the External Line Interrupt used for the OCD OVT interrupt*/
	HAL_NVIC_EnableIRQ(EXTI_FLAG_A_IRQn);
 8004e84:	2028      	movs	r0, #40	; 0x28
 8004e86:	f000 fdfb 	bl	8005a80 <HAL_NVIC_EnableIRQ>

/* Configure L6206 Enable pin of Bridge B ------------------------------*/
	/* This pin is reconfigured later for OCD and OVT as GPIO_MODE_IT_FALLING with GPIO_PULLUP */
	GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
 8004e8a:	2602      	movs	r6, #2
 8004e8c:	9603      	str	r6, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e8e:	9504      	str	r5, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e90:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8004e92:	9506      	str	r5, [sp, #24]
	HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT, &GPIO_InitStruct);
 8004e94:	4d0b      	ldr	r5, [pc, #44]	; (8004ec4 <L6206_Board_GpioInit+0xb0>)
 8004e96:	a903      	add	r1, sp, #12
 8004e98:	4628      	mov	r0, r5
 8004e9a:	f001 f9c7 	bl	800622c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT, BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN, GPIO_PIN_RESET);
 8004e9e:	4622      	mov	r2, r4
 8004ea0:	4631      	mov	r1, r6
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	f001 fbca 	bl	800663c <HAL_GPIO_WritePin>

	/* Set Priority of External Line Interrupt used for the OCD OVT interrupt*/
	HAL_NVIC_SetPriority(EXTI_FLAG_B_IRQn, BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PRIORITY, 0);
 8004ea8:	4622      	mov	r2, r4
 8004eaa:	2104      	movs	r1, #4
 8004eac:	2007      	movs	r0, #7
 8004eae:	f000 fda3 	bl	80059f8 <HAL_NVIC_SetPriority>

	/* Enable the External Line Interrupt used for the OCD OVT interrupt*/
	HAL_NVIC_EnableIRQ(EXTI_FLAG_B_IRQn);
 8004eb2:	2007      	movs	r0, #7
 8004eb4:	f000 fde4 	bl	8005a80 <HAL_NVIC_EnableIRQ>
}
 8004eb8:	b009      	add	sp, #36	; 0x24
 8004eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ebc:	40023800 	.word	0x40023800
 8004ec0:	40020000 	.word	0x40020000
 8004ec4:	40020800 	.word	0x40020800

08004ec8 <L6206_Board_PwmDeInit>:
* @param[in] bridgeInput 0 for input 1A, 1 for input 2A,
* 2 for input 1B, 3 for input 2B
* @retval None
**********************************************************/
void L6206_Board_PwmDeInit(uint8_t bridgeInput)
{
 8004ec8:	b508      	push	{r3, lr}
	TIM_HandleTypeDef *pHTim;

	switch (bridgeInput) {
 8004eca:	2802      	cmp	r0, #2
 8004ecc:	d011      	beq.n	8004ef2 <L6206_Board_PwmDeInit+0x2a>
 8004ece:	2803      	cmp	r0, #3
 8004ed0:	d016      	beq.n	8004f00 <L6206_Board_PwmDeInit+0x38>
 8004ed2:	2801      	cmp	r0, #1
 8004ed4:	d007      	beq.n	8004ee6 <L6206_Board_PwmDeInit+0x1e>
	case 0:
	default:
		pHTim = &hTimPwm1A;
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1A;
 8004ed6:	480e      	ldr	r0, [pc, #56]	; (8004f10 <L6206_Board_PwmDeInit+0x48>)
 8004ed8:	4b0e      	ldr	r3, [pc, #56]	; (8004f14 <L6206_Board_PwmDeInit+0x4c>)
 8004eda:	6003      	str	r3, [r0, #0]
		pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM1A;
 8004edc:	2301      	movs	r3, #1
 8004ede:	7603      	strb	r3, [r0, #24]
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
		pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2B;

		break;
	}
	HAL_TIM_PWM_DeInit(pHTim);
 8004ee0:	f004 f92a 	bl	8009138 <HAL_TIM_PWM_DeInit>
 8004ee4:	bd08      	pop	{r3, pc}
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2A;
 8004ee6:	480c      	ldr	r0, [pc, #48]	; (8004f18 <L6206_Board_PwmDeInit+0x50>)
 8004ee8:	4b0a      	ldr	r3, [pc, #40]	; (8004f14 <L6206_Board_PwmDeInit+0x4c>)
 8004eea:	6003      	str	r3, [r0, #0]
		pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2A;
 8004eec:	2302      	movs	r3, #2
 8004eee:	7603      	strb	r3, [r0, #24]
		break;
 8004ef0:	e7f6      	b.n	8004ee0 <L6206_Board_PwmDeInit+0x18>
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B;
 8004ef2:	480a      	ldr	r0, [pc, #40]	; (8004f1c <L6206_Board_PwmDeInit+0x54>)
 8004ef4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004ef8:	6003      	str	r3, [r0, #0]
		pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM1B;
 8004efa:	2301      	movs	r3, #1
 8004efc:	7603      	strb	r3, [r0, #24]
		break;
 8004efe:	e7ef      	b.n	8004ee0 <L6206_Board_PwmDeInit+0x18>
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
 8004f00:	4807      	ldr	r0, [pc, #28]	; (8004f20 <L6206_Board_PwmDeInit+0x58>)
 8004f02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f06:	6003      	str	r3, [r0, #0]
		pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2B;
 8004f08:	2302      	movs	r3, #2
 8004f0a:	7603      	strb	r3, [r0, #24]
		break;
 8004f0c:	e7e8      	b.n	8004ee0 <L6206_Board_PwmDeInit+0x18>
 8004f0e:	bf00      	nop
 8004f10:	200028d4 	.word	0x200028d4
 8004f14:	40000400 	.word	0x40000400
 8004f18:	20002820 	.word	0x20002820
 8004f1c:	2000285c 	.word	0x2000285c
 8004f20:	20002898 	.word	0x20002898

08004f24 <L6206_Board_PwmInit>:
* @param[in] bridgeInput 0 for input 1A, 1 for input 2A,
* 2 for input 1B, 3 for input 2B
* @retval None
**********************************************************/
void L6206_Board_PwmInit(uint8_t bridgeInput)
{
 8004f24:	b570      	push	{r4, r5, r6, lr}
 8004f26:	b08a      	sub	sp, #40	; 0x28
	TIM_OC_InitTypeDef sConfigOC;
	TIM_MasterConfigTypeDef sMasterConfig;
	TIM_HandleTypeDef *pHTim;
	uint32_t channel;

	switch (bridgeInput) {
 8004f28:	2802      	cmp	r0, #2
 8004f2a:	d02b      	beq.n	8004f84 <L6206_Board_PwmInit+0x60>
 8004f2c:	2803      	cmp	r0, #3
 8004f2e:	d031      	beq.n	8004f94 <L6206_Board_PwmInit+0x70>
 8004f30:	2801      	cmp	r0, #1
 8004f32:	d020      	beq.n	8004f76 <L6206_Board_PwmInit+0x52>
	case 0:
	default:
		pHTim = &hTimPwm1A;
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1A;
 8004f34:	4c1b      	ldr	r4, [pc, #108]	; (8004fa4 <L6206_Board_PwmInit+0x80>)
 8004f36:	4b1c      	ldr	r3, [pc, #112]	; (8004fa8 <L6206_Board_PwmInit+0x84>)
 8004f38:	6023      	str	r3, [r4, #0]
		pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM1A;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	7623      	strb	r3, [r4, #24]
		channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1A;
 8004f3e:	2600      	movs	r6, #0
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
		pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2B;
		channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2B;
		break;
	}
	pHTim->Init.Prescaler = TIMER_PRESCALER - 1;
 8004f40:	233f      	movs	r3, #63	; 0x3f
 8004f42:	6063      	str	r3, [r4, #4]
	pHTim->Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f44:	2500      	movs	r5, #0
 8004f46:	60a5      	str	r5, [r4, #8]
	pHTim->Init.Period = 0;
 8004f48:	60e5      	str	r5, [r4, #12]
	pHTim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f4a:	6125      	str	r5, [r4, #16]
	HAL_TIM_PWM_Init(pHTim);
 8004f4c:	4620      	mov	r0, r4
 8004f4e:	f004 fd2f 	bl	80099b0 <HAL_TIM_PWM_Init>

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004f52:	2360      	movs	r3, #96	; 0x60
 8004f54:	9303      	str	r3, [sp, #12]
	sConfigOC.Pulse = 0;
 8004f56:	9504      	str	r5, [sp, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f58:	9505      	str	r5, [sp, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f5a:	9507      	str	r5, [sp, #28]
	HAL_TIM_PWM_ConfigChannel(pHTim, &sConfigOC, channel);
 8004f5c:	4632      	mov	r2, r6
 8004f5e:	a903      	add	r1, sp, #12
 8004f60:	4620      	mov	r0, r4
 8004f62:	f004 fdc3 	bl	8009aec <HAL_TIM_PWM_ConfigChannel>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f66:	9501      	str	r5, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f68:	9502      	str	r5, [sp, #8]
	HAL_TIMEx_MasterConfigSynchronization(pHTim, &sMasterConfig);
 8004f6a:	a901      	add	r1, sp, #4
 8004f6c:	4620      	mov	r0, r4
 8004f6e:	f004 ffdb 	bl	8009f28 <HAL_TIMEx_MasterConfigSynchronization>
}
 8004f72:	b00a      	add	sp, #40	; 0x28
 8004f74:	bd70      	pop	{r4, r5, r6, pc}
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2A;
 8004f76:	4c0d      	ldr	r4, [pc, #52]	; (8004fac <L6206_Board_PwmInit+0x88>)
 8004f78:	4b0b      	ldr	r3, [pc, #44]	; (8004fa8 <L6206_Board_PwmInit+0x84>)
 8004f7a:	6023      	str	r3, [r4, #0]
		pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2A;
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	7623      	strb	r3, [r4, #24]
		channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2A;
 8004f80:	2604      	movs	r6, #4
		break;
 8004f82:	e7dd      	b.n	8004f40 <L6206_Board_PwmInit+0x1c>
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B;
 8004f84:	4c0a      	ldr	r4, [pc, #40]	; (8004fb0 <L6206_Board_PwmInit+0x8c>)
 8004f86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f8a:	6023      	str	r3, [r4, #0]
		pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM1B;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	7623      	strb	r3, [r4, #24]
		channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1B;
 8004f90:	2600      	movs	r6, #0
		break;
 8004f92:	e7d5      	b.n	8004f40 <L6206_Board_PwmInit+0x1c>
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
 8004f94:	4c07      	ldr	r4, [pc, #28]	; (8004fb4 <L6206_Board_PwmInit+0x90>)
 8004f96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f9a:	6023      	str	r3, [r4, #0]
		pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2B;
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	7623      	strb	r3, [r4, #24]
		channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2B;
 8004fa0:	2604      	movs	r6, #4
		break;
 8004fa2:	e7cd      	b.n	8004f40 <L6206_Board_PwmInit+0x1c>
 8004fa4:	200028d4 	.word	0x200028d4
 8004fa8:	40000400 	.word	0x40000400
 8004fac:	20002820 	.word	0x20002820
 8004fb0:	2000285c 	.word	0x2000285c
 8004fb4:	20002898 	.word	0x20002898

08004fb8 <L6206_Board_PwmSetFreq>:
* @param[in] duty Duty cycle
* @retval None
* @note The frequency is directly the current speed of the device
**********************************************************/
void L6206_Board_PwmSetFreq(uint8_t bridgeInput, uint32_t newFreq, uint8_t duty)
{
 8004fb8:	b570      	push	{r4, r5, r6, lr}
 8004fba:	4606      	mov	r6, r0
 8004fbc:	460d      	mov	r5, r1
 8004fbe:	4614      	mov	r4, r2
	uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 8004fc0:	f003 f98c 	bl	80082dc <HAL_RCC_GetSysClockFreq>
	TIM_HandleTypeDef *pHTim;
	uint32_t period;
	uint32_t pulse;
	uint32_t channel;

	switch (bridgeInput) {
 8004fc4:	2e02      	cmp	r6, #2
 8004fc6:	d027      	beq.n	8005018 <L6206_Board_PwmSetFreq+0x60>
 8004fc8:	2e03      	cmp	r6, #3
 8004fca:	d02b      	beq.n	8005024 <L6206_Board_PwmSetFreq+0x6c>
 8004fcc:	2e01      	cmp	r6, #1
 8004fce:	d01e      	beq.n	800500e <L6206_Board_PwmSetFreq+0x56>
	case 0:
	default:
		pHTim = &hTimPwm1A;
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1A;
 8004fd0:	4b18      	ldr	r3, [pc, #96]	; (8005034 <L6206_Board_PwmSetFreq+0x7c>)
 8004fd2:	4a19      	ldr	r2, [pc, #100]	; (8005038 <L6206_Board_PwmSetFreq+0x80>)
 8004fd4:	601a      	str	r2, [r3, #0]
		channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1A;
 8004fd6:	2100      	movs	r1, #0
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
		channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2B;
		break;
	}

	period = (uint32_t)((uint32_t)sysFreq / (uint32_t)(TIMER_PRESCALER * newFreq)) - 1;
 8004fd8:	01ad      	lsls	r5, r5, #6
 8004fda:	fbb0 f0f5 	udiv	r0, r0, r5
 8004fde:	3801      	subs	r0, #1


	__HAL_TIM_SetAutoreload(pHTim, period);
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	62d0      	str	r0, [r2, #44]	; 0x2c
 8004fe4:	60d8      	str	r0, [r3, #12]

	if (duty == 0) {
 8004fe6:	b31c      	cbz	r4, 8005030 <L6206_Board_PwmSetFreq+0x78>
		pulse = 0;
	}else  {
		if (duty > 100) duty = 100;
 8004fe8:	2c64      	cmp	r4, #100	; 0x64
 8004fea:	d900      	bls.n	8004fee <L6206_Board_PwmSetFreq+0x36>
 8004fec:	2464      	movs	r4, #100	; 0x64
		pulse = (uint32_t)(((uint32_t)period * (uint32_t)duty) / 100) + 1;
 8004fee:	fb04 f400 	mul.w	r4, r4, r0
 8004ff2:	4a12      	ldr	r2, [pc, #72]	; (800503c <L6206_Board_PwmSetFreq+0x84>)
 8004ff4:	fba2 2404 	umull	r2, r4, r2, r4
 8004ff8:	0964      	lsrs	r4, r4, #5
 8004ffa:	3401      	adds	r4, #1
	}
	__HAL_TIM_SetCompare(pHTim, channel, pulse);
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	3234      	adds	r2, #52	; 0x34
 8005000:	0888      	lsrs	r0, r1, #2
 8005002:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
	HAL_TIM_PWM_Start(pHTim, channel);
 8005006:	4618      	mov	r0, r3
 8005008:	f004 fec8 	bl	8009d9c <HAL_TIM_PWM_Start>
 800500c:	bd70      	pop	{r4, r5, r6, pc}
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2A;
 800500e:	4b0c      	ldr	r3, [pc, #48]	; (8005040 <L6206_Board_PwmSetFreq+0x88>)
 8005010:	4a09      	ldr	r2, [pc, #36]	; (8005038 <L6206_Board_PwmSetFreq+0x80>)
 8005012:	601a      	str	r2, [r3, #0]
		channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2A;
 8005014:	2104      	movs	r1, #4
		break;
 8005016:	e7df      	b.n	8004fd8 <L6206_Board_PwmSetFreq+0x20>
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B;
 8005018:	4b0a      	ldr	r3, [pc, #40]	; (8005044 <L6206_Board_PwmSetFreq+0x8c>)
 800501a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800501e:	601a      	str	r2, [r3, #0]
		channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1B;
 8005020:	2100      	movs	r1, #0
		break;
 8005022:	e7d9      	b.n	8004fd8 <L6206_Board_PwmSetFreq+0x20>
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
 8005024:	4b08      	ldr	r3, [pc, #32]	; (8005048 <L6206_Board_PwmSetFreq+0x90>)
 8005026:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800502a:	601a      	str	r2, [r3, #0]
		channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2B;
 800502c:	2104      	movs	r1, #4
		break;
 800502e:	e7d3      	b.n	8004fd8 <L6206_Board_PwmSetFreq+0x20>
		pulse = 0;
 8005030:	2400      	movs	r4, #0
 8005032:	e7e3      	b.n	8004ffc <L6206_Board_PwmSetFreq+0x44>
 8005034:	200028d4 	.word	0x200028d4
 8005038:	40000400 	.word	0x40000400
 800503c:	51eb851f 	.word	0x51eb851f
 8005040:	20002820 	.word	0x20002820
 8005044:	2000285c 	.word	0x2000285c
 8005048:	20002898 	.word	0x20002898

0800504c <L6206_Board_PwmStop>:
* @param[in] bridgeInput 0 for input 1A, 1 for input 2A,
* 2 for input 1B, 3 for input 2B
* @retval None
**********************************************************/
void L6206_Board_PwmStop(uint8_t bridgeInput)
{
 800504c:	b508      	push	{r3, lr}
	switch (bridgeInput) {
 800504e:	2803      	cmp	r0, #3
 8005050:	d816      	bhi.n	8005080 <L6206_Board_PwmStop+0x34>
 8005052:	e8df f000 	tbb	[pc, r0]
 8005056:	0702      	.short	0x0702
 8005058:	110c      	.short	0x110c
	case 0:
		HAL_TIM_PWM_Stop(&hTimPwm1A, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1A);
 800505a:	2100      	movs	r1, #0
 800505c:	4809      	ldr	r0, [pc, #36]	; (8005084 <L6206_Board_PwmStop+0x38>)
 800505e:	f004 fef5 	bl	8009e4c <HAL_TIM_PWM_Stop>
		break;
 8005062:	bd08      	pop	{r3, pc}
	case  1:
		HAL_TIM_PWM_Stop(&hTimPwm2A, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2A);
 8005064:	2104      	movs	r1, #4
 8005066:	4808      	ldr	r0, [pc, #32]	; (8005088 <L6206_Board_PwmStop+0x3c>)
 8005068:	f004 fef0 	bl	8009e4c <HAL_TIM_PWM_Stop>
		break;
 800506c:	bd08      	pop	{r3, pc}
	case  2:
		HAL_TIM_PWM_Stop(&hTimPwm1B, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1B);
 800506e:	2100      	movs	r1, #0
 8005070:	4806      	ldr	r0, [pc, #24]	; (800508c <L6206_Board_PwmStop+0x40>)
 8005072:	f004 feeb 	bl	8009e4c <HAL_TIM_PWM_Stop>
		break;
 8005076:	bd08      	pop	{r3, pc}
	case  3:
		HAL_TIM_PWM_Stop(&hTimPwm2B, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2B);
 8005078:	2104      	movs	r1, #4
 800507a:	4805      	ldr	r0, [pc, #20]	; (8005090 <L6206_Board_PwmStop+0x44>)
 800507c:	f004 fee6 	bl	8009e4c <HAL_TIM_PWM_Stop>
 8005080:	bd08      	pop	{r3, pc}
 8005082:	bf00      	nop
 8005084:	200028d4 	.word	0x200028d4
 8005088:	20002820 	.word	0x20002820
 800508c:	2000285c 	.word	0x2000285c
 8005090:	20002898 	.word	0x20002898

08005094 <L6474_GetMotorHandle>:
 */
/// Get motor handle for L6474
__weak motorDrv_t* L6474_GetMotorHandle(void)
{
	return((motorDrv_t* )0);
}
 8005094:	2000      	movs	r0, #0
 8005096:	4770      	bx	lr

08005098 <l647x_GetMotorHandle>:
/// Get motor handle for L647x
__weak motorDrv_t* l647x_GetMotorHandle(void)
{
	return((motorDrv_t* )0);
}
 8005098:	2000      	movs	r0, #0
 800509a:	4770      	bx	lr

0800509c <l648x_GetMotorHandle>:
/// Get motor handle for L648x
__weak motorDrv_t* l648x_GetMotorHandle(void)
{
	return((motorDrv_t* )0);
}
 800509c:	2000      	movs	r0, #0
 800509e:	4770      	bx	lr

080050a0 <Powerstep01_GetMotorHandle>:
/// Get motor handle for Powerstep
__weak motorDrv_t* Powerstep01_GetMotorHandle(void)
{
	return((motorDrv_t* )0);
}
 80050a0:	2000      	movs	r0, #0
 80050a2:	4770      	bx	lr

080050a4 <L6208_GetMotorHandle>:
}
/// Get motor handle for L6208
__weak motorDrv_t* L6208_GetMotorHandle(void)
{
	return((motorDrv_t* )0);
}
 80050a4:	2000      	movs	r0, #0
 80050a6:	4770      	bx	lr

080050a8 <Stspin220_GetMotorHandle>:
/// Get motor handle for STSPIN220
__weak motorDrv_t* Stspin220_GetMotorHandle(void)
{
	return((motorDrv_t* )0);
}
 80050a8:	2000      	movs	r0, #0
 80050aa:	4770      	bx	lr

080050ac <Stspin240_250_GetMotorHandle>:
/// Get motor handle for STSPIN240
__weak motorDrv_t* Stspin240_250_GetMotorHandle(void)
{
	return((motorDrv_t* )0);
}
 80050ac:	2000      	movs	r0, #0
 80050ae:	4770      	bx	lr

080050b0 <BSP_MotorControl_ErrorHandler>:
* @brief Motor control error handler
* @param[in] error number of the error
* @retval None
**********************************************************/
void BSP_MotorControl_ErrorHandler(uint16_t error)
{
 80050b0:	b508      	push	{r3, lr}
	if ((motorDrvHandle != 0) && (motorDrvHandle->ErrorHandler != 0)) {
 80050b2:	4b04      	ldr	r3, [pc, #16]	; (80050c4 <BSP_MotorControl_ErrorHandler+0x14>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	b123      	cbz	r3, 80050c2 <BSP_MotorControl_ErrorHandler+0x12>
 80050b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050bc:	b10b      	cbz	r3, 80050c2 <BSP_MotorControl_ErrorHandler+0x12>
		motorDrvHandle->ErrorHandler(error);
 80050be:	4798      	blx	r3
	}else  {
		while (1) {
			/* Infinite loop as Error handler must be defined*/
		}
	}
}
 80050c0:	bd08      	pop	{r3, pc}
 80050c2:	e7fe      	b.n	80050c2 <BSP_MotorControl_ErrorHandler+0x12>
 80050c4:	200025ac 	.word	0x200025ac

080050c8 <BSP_MotorControl_AttachErrorHandler>:
{
 80050c8:	b508      	push	{r3, lr}
	if ((motorDrvHandle != 0) && (motorDrvHandle->AttachErrorHandler != 0)) {
 80050ca:	4b06      	ldr	r3, [pc, #24]	; (80050e4 <BSP_MotorControl_AttachErrorHandler+0x1c>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	b11b      	cbz	r3, 80050d8 <BSP_MotorControl_AttachErrorHandler+0x10>
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	b10b      	cbz	r3, 80050d8 <BSP_MotorControl_AttachErrorHandler+0x10>
		motorDrvHandle->AttachErrorHandler(callback);
 80050d4:	4798      	blx	r3
 80050d6:	bd08      	pop	{r3, pc}
		MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(2);
 80050d8:	f640 0002 	movw	r0, #2050	; 0x802
 80050dc:	f7ff ffe8 	bl	80050b0 <BSP_MotorControl_ErrorHandler>
 80050e0:	bd08      	pop	{r3, pc}
 80050e2:	bf00      	nop
 80050e4:	200025ac 	.word	0x200025ac

080050e8 <BSP_MotorControl_AttachFlagInterrupt>:
{
 80050e8:	b508      	push	{r3, lr}
	if ((motorDrvHandle != 0) && (motorDrvHandle->AttachFlagInterrupt != 0)) {
 80050ea:	4b06      	ldr	r3, [pc, #24]	; (8005104 <BSP_MotorControl_AttachFlagInterrupt+0x1c>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	b11b      	cbz	r3, 80050f8 <BSP_MotorControl_AttachFlagInterrupt+0x10>
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	b10b      	cbz	r3, 80050f8 <BSP_MotorControl_AttachFlagInterrupt+0x10>
		motorDrvHandle->AttachFlagInterrupt(callback);
 80050f4:	4798      	blx	r3
 80050f6:	bd08      	pop	{r3, pc}
		MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(3);
 80050f8:	f640 0003 	movw	r0, #2051	; 0x803
 80050fc:	f7ff ffd8 	bl	80050b0 <BSP_MotorControl_ErrorHandler>
 8005100:	bd08      	pop	{r3, pc}
 8005102:	bf00      	nop
 8005104:	200025ac 	.word	0x200025ac

08005108 <BSP_MotorControl_Init>:
* @param[in] id Component Id (L6474, Powerstep01,...)
* @param[in] initDeviceParameters Initialization structure for one device
* @retval None
**********************************************************/
void BSP_MotorControl_Init(uint16_t id, void* initDeviceParameters)
{
 8005108:	b508      	push	{r3, lr}
	if ((motorDrvHandle != 0) && (motorDrvHandle->Init != 0)) {
 800510a:	4b06      	ldr	r3, [pc, #24]	; (8005124 <BSP_MotorControl_Init+0x1c>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	b123      	cbz	r3, 800511a <BSP_MotorControl_Init+0x12>
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	b113      	cbz	r3, 800511a <BSP_MotorControl_Init+0x12>
		motorDrvHandle->Init(initDeviceParameters);
 8005114:	4608      	mov	r0, r1
 8005116:	4798      	blx	r3
 8005118:	bd08      	pop	{r3, pc}
	}else  {
		MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(0);
 800511a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800511e:	f7ff ffc7 	bl	80050b0 <BSP_MotorControl_ErrorHandler>
 8005122:	bd08      	pop	{r3, pc}
 8005124:	200025ac 	.word	0x200025ac

08005128 <BSP_MotorControl_GetDeviceState>:
*            motorId from 0 to MAX_NUMBER_OF_BRUSH_DC_MOTORS for Brush DC motor
* @retval State ACCELERATING, DECELERATING, STEADY or INACTIVE for stepper motor,
                 STEADY or INACTIVE for Brush DC motor
**********************************************************/
motorState_t BSP_MotorControl_GetDeviceState(uint8_t deviceId)
{
 8005128:	b508      	push	{r3, lr}
	motorState_t state = INACTIVE;

	if ((motorDrvHandle != 0) && (motorDrvHandle->GetDeviceState != 0)) {
 800512a:	4b06      	ldr	r3, [pc, #24]	; (8005144 <BSP_MotorControl_GetDeviceState+0x1c>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	b11b      	cbz	r3, 8005138 <BSP_MotorControl_GetDeviceState+0x10>
 8005130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005132:	b10b      	cbz	r3, 8005138 <BSP_MotorControl_GetDeviceState+0x10>
		state = motorDrvHandle->GetDeviceState(deviceId);
 8005134:	4798      	blx	r3
 8005136:	bd08      	pop	{r3, pc}
	}else  {
		MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(9);
 8005138:	f640 0009 	movw	r0, #2057	; 0x809
 800513c:	f7ff ffb8 	bl	80050b0 <BSP_MotorControl_ErrorHandler>
	motorState_t state = INACTIVE;
 8005140:	2008      	movs	r0, #8
	}
	return(state);
}
 8005142:	bd08      	pop	{r3, pc}
 8005144:	200025ac 	.word	0x200025ac

08005148 <BSP_MotorControl_CmdGetStatus>:
* the flags of the status register are reset.
* This is not the case when the status register is read with the
* GetParam command (via the functions ReadStatusRegister or CmdGetParam).
**********************************************************/
uint16_t BSP_MotorControl_CmdGetStatus(uint8_t deviceId)
{
 8005148:	b508      	push	{r3, lr}
	uint16_t status = 0;
	if ((motorDrvHandle != 0) && (motorDrvHandle->CmdGetStatus != 0)) {
 800514a:	4b07      	ldr	r3, [pc, #28]	; (8005168 <BSP_MotorControl_CmdGetStatus+0x20>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	b123      	cbz	r3, 800515a <BSP_MotorControl_CmdGetStatus+0x12>
 8005150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005154:	b10b      	cbz	r3, 800515a <BSP_MotorControl_CmdGetStatus+0x12>
		status = motorDrvHandle->CmdGetStatus(deviceId);
 8005156:	4798      	blx	r3
 8005158:	bd08      	pop	{r3, pc}
	}else  {
		MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(34);
 800515a:	f640 0022 	movw	r0, #2082	; 0x822
 800515e:	f7ff ffa7 	bl	80050b0 <BSP_MotorControl_ErrorHandler>
	uint16_t status = 0;
 8005162:	2000      	movs	r0, #0
	}
	return(status);
}
 8005164:	bd08      	pop	{r3, pc}
 8005166:	bf00      	nop
 8005168:	200025ac 	.word	0x200025ac

0800516c <BSP_MotorControl_SetDualFullBridgeConfig>:
* for Stspin240, 0 for a mono brush DC configuration, 1 for a dual brush DC configuration
* for Stspin250, 0 only as no dual brush DC configuration is supported
* @retval None
**********************************************************/
void BSP_MotorControl_SetDualFullBridgeConfig(uint8_t config)
{
 800516c:	b508      	push	{r3, lr}
	if ((motorDrvHandle != 0) && (motorDrvHandle->SetDualFullBridgeConfig != 0)) {
 800516e:	4b06      	ldr	r3, [pc, #24]	; (8005188 <BSP_MotorControl_SetDualFullBridgeConfig+0x1c>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	b123      	cbz	r3, 800517e <BSP_MotorControl_SetDualFullBridgeConfig+0x12>
 8005174:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8005178:	b10b      	cbz	r3, 800517e <BSP_MotorControl_SetDualFullBridgeConfig+0x12>
		motorDrvHandle->SetDualFullBridgeConfig(config);
 800517a:	4798      	blx	r3
 800517c:	bd08      	pop	{r3, pc}
	}else  {
		MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(65);
 800517e:	f640 0041 	movw	r0, #2113	; 0x841
 8005182:	f7ff ff95 	bl	80050b0 <BSP_MotorControl_ErrorHandler>
 8005186:	bd08      	pop	{r3, pc}
 8005188:	200025ac 	.word	0x200025ac

0800518c <BSP_MotorControl_SetBridgeInputPwmFreq>:
* bridgeId must be 0 for L6208 (both bridges are set with the same frequency)
* @param[in] newFreq in Hz up to 100000Hz
* @retval None
**********************************************************/
void BSP_MotorControl_SetBridgeInputPwmFreq(uint8_t bridgeId, uint32_t newFreq)
{
 800518c:	b508      	push	{r3, lr}
	if ((motorDrvHandle != 0) && (motorDrvHandle->SetBridgeInputPwmFreq != 0)) {
 800518e:	4b06      	ldr	r3, [pc, #24]	; (80051a8 <BSP_MotorControl_SetBridgeInputPwmFreq+0x1c>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	b123      	cbz	r3, 800519e <BSP_MotorControl_SetBridgeInputPwmFreq+0x12>
 8005194:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8005198:	b10b      	cbz	r3, 800519e <BSP_MotorControl_SetBridgeInputPwmFreq+0x12>
		motorDrvHandle->SetBridgeInputPwmFreq(bridgeId, newFreq);
 800519a:	4798      	blx	r3
 800519c:	bd08      	pop	{r3, pc}
	}else  {
		MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(67);
 800519e:	f640 0043 	movw	r0, #2115	; 0x843
 80051a2:	f7ff ff85 	bl	80050b0 <BSP_MotorControl_ErrorHandler>
 80051a6:	bd08      	pop	{r3, pc}
 80051a8:	200025ac 	.word	0x200025ac

080051ac <BSP_MotorControl_SetNbDevices>:
* from 1 to MAX_NUMBER_OF_DEVICES
* @retval TRUE if successfull, FALSE if failure, attempt
* to set a number of devices greater than MAX_NUMBER_OF_DEVICES
**********************************************************/
bool BSP_MotorControl_SetNbDevices(uint16_t id, uint8_t nbDevices)
{
 80051ac:	b510      	push	{r4, lr}
 80051ae:	460c      	mov	r4, r1
	MotorControlBoardId = id;
 80051b0:	4b2f      	ldr	r3, [pc, #188]	; (8005270 <BSP_MotorControl_SetNbDevices+0xc4>)
 80051b2:	8018      	strh	r0, [r3, #0]
	bool status = FALSE;
	if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6474) {
 80051b4:	f641 134a 	movw	r3, #6474	; 0x194a
 80051b8:	4298      	cmp	r0, r3
 80051ba:	d022      	beq.n	8005202 <BSP_MotorControl_SetNbDevices+0x56>
		motorDrvHandle = L6474_GetMotorHandle();
	}else if (id == BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01) {
 80051bc:	2801      	cmp	r0, #1
 80051be:	d025      	beq.n	800520c <BSP_MotorControl_SetNbDevices+0x60>
		motorDrvHandle = Powerstep01_GetMotorHandle();
	}else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6206) {
 80051c0:	f641 033e 	movw	r3, #6206	; 0x183e
 80051c4:	4298      	cmp	r0, r3
 80051c6:	d026      	beq.n	8005216 <BSP_MotorControl_SetNbDevices+0x6a>
		motorDrvHandle = L6206_GetMotorHandle();
	}else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6208) {
 80051c8:	f5b0 5fc2 	cmp.w	r0, #6208	; 0x1840
 80051cc:	d028      	beq.n	8005220 <BSP_MotorControl_SetNbDevices+0x74>
		motorDrvHandle = L6208_GetMotorHandle();
	}else if (id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN220) {
 80051ce:	28dc      	cmp	r0, #220	; 0xdc
 80051d0:	d02b      	beq.n	800522a <BSP_MotorControl_SetNbDevices+0x7e>
		motorDrvHandle = Stspin220_GetMotorHandle();
	}else if ((id == BSP_MOTOR_CONTROL_BOARD_ID_L6470) ||
 80051d2:	f641 1346 	movw	r3, #6470	; 0x1946
 80051d6:	4298      	cmp	r0, r3
 80051d8:	d02c      	beq.n	8005234 <BSP_MotorControl_SetNbDevices+0x88>
 80051da:	f641 1348 	movw	r3, #6472	; 0x1948
 80051de:	4298      	cmp	r0, r3
 80051e0:	d028      	beq.n	8005234 <BSP_MotorControl_SetNbDevices+0x88>
		  (id == BSP_MOTOR_CONTROL_BOARD_ID_L6472)) {
		motorDrvHandle = l647x_GetMotorHandle();
	}else if ((id == BSP_MOTOR_CONTROL_BOARD_ID_L6480) ||
 80051e2:	f641 1350 	movw	r3, #6480	; 0x1950
 80051e6:	4298      	cmp	r0, r3
 80051e8:	d031      	beq.n	800524e <BSP_MotorControl_SetNbDevices+0xa2>
 80051ea:	f641 1352 	movw	r3, #6482	; 0x1952
 80051ee:	4298      	cmp	r0, r3
 80051f0:	d02d      	beq.n	800524e <BSP_MotorControl_SetNbDevices+0xa2>
		  (id == BSP_MOTOR_CONTROL_BOARD_ID_L6482)) {
		motorDrvHandle = l648x_GetMotorHandle();
	}else if ((id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN240) ||
 80051f2:	28f0      	cmp	r0, #240	; 0xf0
 80051f4:	d030      	beq.n	8005258 <BSP_MotorControl_SetNbDevices+0xac>
 80051f6:	28fa      	cmp	r0, #250	; 0xfa
 80051f8:	d02e      	beq.n	8005258 <BSP_MotorControl_SetNbDevices+0xac>
		  (id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN250)) {
		motorDrvHandle = Stspin240_250_GetMotorHandle();
	}else  {
		motorDrvHandle = 0;
 80051fa:	2200      	movs	r2, #0
 80051fc:	4b1d      	ldr	r3, [pc, #116]	; (8005274 <BSP_MotorControl_SetNbDevices+0xc8>)
 80051fe:	601a      	str	r2, [r3, #0]
 8005200:	e01c      	b.n	800523c <BSP_MotorControl_SetNbDevices+0x90>
		motorDrvHandle = L6474_GetMotorHandle();
 8005202:	f7ff ff47 	bl	8005094 <L6474_GetMotorHandle>
 8005206:	4b1b      	ldr	r3, [pc, #108]	; (8005274 <BSP_MotorControl_SetNbDevices+0xc8>)
 8005208:	6018      	str	r0, [r3, #0]
 800520a:	e017      	b.n	800523c <BSP_MotorControl_SetNbDevices+0x90>
		motorDrvHandle = Powerstep01_GetMotorHandle();
 800520c:	f7ff ff48 	bl	80050a0 <Powerstep01_GetMotorHandle>
 8005210:	4b18      	ldr	r3, [pc, #96]	; (8005274 <BSP_MotorControl_SetNbDevices+0xc8>)
 8005212:	6018      	str	r0, [r3, #0]
 8005214:	e012      	b.n	800523c <BSP_MotorControl_SetNbDevices+0x90>
		motorDrvHandle = L6206_GetMotorHandle();
 8005216:	f7fc fb7b 	bl	8001910 <L6206_GetMotorHandle>
 800521a:	4b16      	ldr	r3, [pc, #88]	; (8005274 <BSP_MotorControl_SetNbDevices+0xc8>)
 800521c:	6018      	str	r0, [r3, #0]
 800521e:	e00d      	b.n	800523c <BSP_MotorControl_SetNbDevices+0x90>
		motorDrvHandle = L6208_GetMotorHandle();
 8005220:	f7ff ff40 	bl	80050a4 <L6208_GetMotorHandle>
 8005224:	4b13      	ldr	r3, [pc, #76]	; (8005274 <BSP_MotorControl_SetNbDevices+0xc8>)
 8005226:	6018      	str	r0, [r3, #0]
 8005228:	e008      	b.n	800523c <BSP_MotorControl_SetNbDevices+0x90>
		motorDrvHandle = Stspin220_GetMotorHandle();
 800522a:	f7ff ff3d 	bl	80050a8 <Stspin220_GetMotorHandle>
 800522e:	4b11      	ldr	r3, [pc, #68]	; (8005274 <BSP_MotorControl_SetNbDevices+0xc8>)
 8005230:	6018      	str	r0, [r3, #0]
 8005232:	e003      	b.n	800523c <BSP_MotorControl_SetNbDevices+0x90>
		motorDrvHandle = l647x_GetMotorHandle();
 8005234:	f7ff ff30 	bl	8005098 <l647x_GetMotorHandle>
 8005238:	4b0e      	ldr	r3, [pc, #56]	; (8005274 <BSP_MotorControl_SetNbDevices+0xc8>)
 800523a:	6018      	str	r0, [r3, #0]
	}
	if ((motorDrvHandle != 0) &&
 800523c:	4b0d      	ldr	r3, [pc, #52]	; (8005274 <BSP_MotorControl_SetNbDevices+0xc8>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	b193      	cbz	r3, 8005268 <BSP_MotorControl_SetNbDevices+0xbc>
	    (motorDrvHandle->SetNbDevices != 0) &&
 8005242:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	if ((motorDrvHandle != 0) &&
 8005246:	b18b      	cbz	r3, 800526c <BSP_MotorControl_SetNbDevices+0xc0>
	    (motorDrvHandle->SetNbDevices != 0) &&
 8005248:	b95c      	cbnz	r4, 8005262 <BSP_MotorControl_SetNbDevices+0xb6>
	bool status = FALSE;
 800524a:	2000      	movs	r0, #0
	    (nbDevices != 0)) {
		status = motorDrvHandle->SetNbDevices(nbDevices);
	}
	return(status);
}
 800524c:	bd10      	pop	{r4, pc}
		motorDrvHandle = l648x_GetMotorHandle();
 800524e:	f7ff ff25 	bl	800509c <l648x_GetMotorHandle>
 8005252:	4b08      	ldr	r3, [pc, #32]	; (8005274 <BSP_MotorControl_SetNbDevices+0xc8>)
 8005254:	6018      	str	r0, [r3, #0]
 8005256:	e7f1      	b.n	800523c <BSP_MotorControl_SetNbDevices+0x90>
		motorDrvHandle = Stspin240_250_GetMotorHandle();
 8005258:	f7ff ff28 	bl	80050ac <Stspin240_250_GetMotorHandle>
 800525c:	4b05      	ldr	r3, [pc, #20]	; (8005274 <BSP_MotorControl_SetNbDevices+0xc8>)
 800525e:	6018      	str	r0, [r3, #0]
 8005260:	e7ec      	b.n	800523c <BSP_MotorControl_SetNbDevices+0x90>
		status = motorDrvHandle->SetNbDevices(nbDevices);
 8005262:	4620      	mov	r0, r4
 8005264:	4798      	blx	r3
 8005266:	bd10      	pop	{r4, pc}
	bool status = FALSE;
 8005268:	2000      	movs	r0, #0
 800526a:	bd10      	pop	{r4, pc}
 800526c:	2000      	movs	r0, #0
 800526e:	bd10      	pop	{r4, pc}
 8005270:	200025a8 	.word	0x200025a8
 8005274:	200025ac 	.word	0x200025ac

08005278 <HAL_InitTick>:
 *       implementation  in user file.
 * @param TickPriority Tick interrupt priority.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005278:	b510      	push	{r4, lr}
 800527a:	4604      	mov	r4, r0
	/* Configure the SysTick to have interrupt in 1ms time basis*/
	if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U) {
 800527c:	4b0e      	ldr	r3, [pc, #56]	; (80052b8 <HAL_InitTick+0x40>)
 800527e:	7818      	ldrb	r0, [r3, #0]
 8005280:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005284:	fbb3 f3f0 	udiv	r3, r3, r0
 8005288:	4a0c      	ldr	r2, [pc, #48]	; (80052bc <HAL_InitTick+0x44>)
 800528a:	6810      	ldr	r0, [r2, #0]
 800528c:	fbb0 f0f3 	udiv	r0, r0, r3
 8005290:	f000 fc24 	bl	8005adc <HAL_SYSTICK_Config>
 8005294:	b968      	cbnz	r0, 80052b2 <HAL_InitTick+0x3a>
		return HAL_ERROR;
	}

	/* Configure the SysTick IRQ priority */
	if (TickPriority < (1UL << __NVIC_PRIO_BITS)) {
 8005296:	2c0f      	cmp	r4, #15
 8005298:	d901      	bls.n	800529e <HAL_InitTick+0x26>
		HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
		uwTickPrio = TickPriority;
	}else  {
		return HAL_ERROR;
 800529a:	2001      	movs	r0, #1
	}

	/* Return function status */
	return HAL_OK;
}
 800529c:	bd10      	pop	{r4, pc}
		HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800529e:	2200      	movs	r2, #0
 80052a0:	4621      	mov	r1, r4
 80052a2:	f04f 30ff 	mov.w	r0, #4294967295
 80052a6:	f000 fba7 	bl	80059f8 <HAL_NVIC_SetPriority>
		uwTickPrio = TickPriority;
 80052aa:	4b05      	ldr	r3, [pc, #20]	; (80052c0 <HAL_InitTick+0x48>)
 80052ac:	601c      	str	r4, [r3, #0]
	return HAL_OK;
 80052ae:	2000      	movs	r0, #0
 80052b0:	bd10      	pop	{r4, pc}
		return HAL_ERROR;
 80052b2:	2001      	movs	r0, #1
 80052b4:	bd10      	pop	{r4, pc}
 80052b6:	bf00      	nop
 80052b8:	2000145c 	.word	0x2000145c
 80052bc:	20001478 	.word	0x20001478
 80052c0:	20001460 	.word	0x20001460

080052c4 <HAL_Init>:
{
 80052c4:	b508      	push	{r3, lr}
	__HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80052c6:	4b0b      	ldr	r3, [pc, #44]	; (80052f4 <HAL_Init+0x30>)
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052ce:	601a      	str	r2, [r3, #0]
	__HAL_FLASH_DATA_CACHE_ENABLE();
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052d6:	601a      	str	r2, [r3, #0]
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052de:	601a      	str	r2, [r3, #0]
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80052e0:	2003      	movs	r0, #3
 80052e2:	f000 fb6b 	bl	80059bc <HAL_NVIC_SetPriorityGrouping>
	HAL_InitTick(TICK_INT_PRIORITY);
 80052e6:	2000      	movs	r0, #0
 80052e8:	f7ff ffc6 	bl	8005278 <HAL_InitTick>
	HAL_MspInit();
 80052ec:	f007 f920 	bl	800c530 <HAL_MspInit>
}
 80052f0:	2000      	movs	r0, #0
 80052f2:	bd08      	pop	{r3, pc}
 80052f4:	40023c00 	.word	0x40023c00

080052f8 <HAL_IncTick>:
 *      implementations in user file.
 * @retval None
 */
__weak void HAL_IncTick(void)
{
	uwTick += uwTickFreq;
 80052f8:	4a03      	ldr	r2, [pc, #12]	; (8005308 <HAL_IncTick+0x10>)
 80052fa:	6811      	ldr	r1, [r2, #0]
 80052fc:	4b03      	ldr	r3, [pc, #12]	; (800530c <HAL_IncTick+0x14>)
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	440b      	add	r3, r1
 8005302:	6013      	str	r3, [r2, #0]
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	20002910 	.word	0x20002910
 800530c:	2000145c 	.word	0x2000145c

08005310 <HAL_GetTick>:
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void)
{
	return uwTick;
 8005310:	4b01      	ldr	r3, [pc, #4]	; (8005318 <HAL_GetTick+0x8>)
 8005312:	6818      	ldr	r0, [r3, #0]
}
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	20002910 	.word	0x20002910

0800531c <HAL_Delay>:
 *       implementations in user file.
 * @param Delay specifies the delay time length, in milliseconds.
 * @retval None
 */
__weak void HAL_Delay(uint32_t Delay)
{
 800531c:	b538      	push	{r3, r4, r5, lr}
 800531e:	4604      	mov	r4, r0
	uint32_t tickstart = HAL_GetTick();
 8005320:	f7ff fff6 	bl	8005310 <HAL_GetTick>
 8005324:	4605      	mov	r5, r0
	uint32_t wait = Delay;

	/* Add a freq to guarantee minimum wait */
	if (wait < HAL_MAX_DELAY) {
 8005326:	f1b4 3fff 	cmp.w	r4, #4294967295
 800532a:	d002      	beq.n	8005332 <HAL_Delay+0x16>
		wait += (uint32_t)(uwTickFreq);
 800532c:	4b04      	ldr	r3, [pc, #16]	; (8005340 <HAL_Delay+0x24>)
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	441c      	add	r4, r3
	}

	while ((HAL_GetTick() - tickstart) < wait) {
 8005332:	f7ff ffed 	bl	8005310 <HAL_GetTick>
 8005336:	1b40      	subs	r0, r0, r5
 8005338:	4284      	cmp	r4, r0
 800533a:	d8fa      	bhi.n	8005332 <HAL_Delay+0x16>
	}
}
 800533c:	bd38      	pop	{r3, r4, r5, pc}
 800533e:	bf00      	nop
 8005340:	2000145c 	.word	0x2000145c

08005344 <ADC_Init>:
 * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 *         the configuration information for the specified ADC.
 * @retval None
 */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005344:	b510      	push	{r4, lr}
 8005346:	4604      	mov	r4, r0
	/* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
	/* control register)                                                    */
	tmpADC_Common = ADC_COMMON_REGISTER(hadc);

	/* Set the ADC clock prescaler */
	tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005348:	4b4e      	ldr	r3, [pc, #312]	; (8005484 <ADC_Init+0x140>)
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8005350:	605a      	str	r2, [r3, #4]
	tmpADC_Common->CCR |= hadc->Init.ClockPrescaler;
 8005352:	685a      	ldr	r2, [r3, #4]
 8005354:	6841      	ldr	r1, [r0, #4]
 8005356:	430a      	orrs	r2, r1
 8005358:	605a      	str	r2, [r3, #4]

	/* Set ADC scan mode */
	hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800535a:	6802      	ldr	r2, [r0, #0]
 800535c:	6853      	ldr	r3, [r2, #4]
 800535e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005362:	6053      	str	r3, [r2, #4]
	hadc->Instance->CR1 |= ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005364:	6802      	ldr	r2, [r0, #0]
 8005366:	6853      	ldr	r3, [r2, #4]
 8005368:	6901      	ldr	r1, [r0, #16]
 800536a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800536e:	6053      	str	r3, [r2, #4]

	/* Set ADC resolution */
	hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005370:	6802      	ldr	r2, [r0, #0]
 8005372:	6853      	ldr	r3, [r2, #4]
 8005374:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8005378:	6053      	str	r3, [r2, #4]
	hadc->Instance->CR1 |= hadc->Init.Resolution;
 800537a:	6802      	ldr	r2, [r0, #0]
 800537c:	6853      	ldr	r3, [r2, #4]
 800537e:	6881      	ldr	r1, [r0, #8]
 8005380:	430b      	orrs	r3, r1
 8005382:	6053      	str	r3, [r2, #4]

	/* Set ADC data alignment */
	hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005384:	6802      	ldr	r2, [r0, #0]
 8005386:	6893      	ldr	r3, [r2, #8]
 8005388:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800538c:	6093      	str	r3, [r2, #8]
	hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800538e:	6802      	ldr	r2, [r0, #0]
 8005390:	6893      	ldr	r3, [r2, #8]
 8005392:	68c1      	ldr	r1, [r0, #12]
 8005394:	430b      	orrs	r3, r1
 8005396:	6093      	str	r3, [r2, #8]
	/* Enable external trigger if trigger selection is different of software  */
	/* start.                                                                 */
	/* Note: This configuration keeps the hardware feature of parameter       */
	/*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
	/*       software start.                                                  */
	if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START) {
 8005398:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800539a:	4b3b      	ldr	r3, [pc, #236]	; (8005488 <ADC_Init+0x144>)
 800539c:	429a      	cmp	r2, r3
 800539e:	d059      	beq.n	8005454 <ADC_Init+0x110>
		/* Select external trigger to start conversion */
		hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80053a0:	6802      	ldr	r2, [r0, #0]
 80053a2:	6893      	ldr	r3, [r2, #8]
 80053a4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80053a8:	6093      	str	r3, [r2, #8]
		hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80053aa:	6802      	ldr	r2, [r0, #0]
 80053ac:	6893      	ldr	r3, [r2, #8]
 80053ae:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80053b0:	430b      	orrs	r3, r1
 80053b2:	6093      	str	r3, [r2, #8]

		/* Select external trigger polarity */
		hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80053b4:	6802      	ldr	r2, [r0, #0]
 80053b6:	6893      	ldr	r3, [r2, #8]
 80053b8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80053bc:	6093      	str	r3, [r2, #8]
		hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80053be:	6802      	ldr	r2, [r0, #0]
 80053c0:	6893      	ldr	r3, [r2, #8]
 80053c2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80053c4:	430b      	orrs	r3, r1
 80053c6:	6093      	str	r3, [r2, #8]
		hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
		hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
	}

	/* Enable or disable ADC continuous conversion mode */
	hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80053c8:	6822      	ldr	r2, [r4, #0]
 80053ca:	6893      	ldr	r3, [r2, #8]
 80053cc:	f023 0302 	bic.w	r3, r3, #2
 80053d0:	6093      	str	r3, [r2, #8]
	hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80053d2:	6822      	ldr	r2, [r4, #0]
 80053d4:	6893      	ldr	r3, [r2, #8]
 80053d6:	69a1      	ldr	r1, [r4, #24]
 80053d8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80053dc:	6093      	str	r3, [r2, #8]

	if (hadc->Init.DiscontinuousConvMode != DISABLE) {
 80053de:	6a23      	ldr	r3, [r4, #32]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d048      	beq.n	8005476 <ADC_Init+0x132>
		assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 80053e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053e6:	3b01      	subs	r3, #1
 80053e8:	2b07      	cmp	r3, #7
 80053ea:	d83e      	bhi.n	800546a <ADC_Init+0x126>

		/* Enable the selected ADC regular discontinuous mode */
		hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80053ec:	6822      	ldr	r2, [r4, #0]
 80053ee:	6853      	ldr	r3, [r2, #4]
 80053f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80053f4:	6053      	str	r3, [r2, #4]

		/* Set the number of channels to be converted in discontinuous mode */
		hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80053f6:	6822      	ldr	r2, [r4, #0]
 80053f8:	6853      	ldr	r3, [r2, #4]
 80053fa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80053fe:	6053      	str	r3, [r2, #4]
		hadc->Instance->CR1 |= ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005400:	6821      	ldr	r1, [r4, #0]
 8005402:	684b      	ldr	r3, [r1, #4]
 8005404:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005406:	3a01      	subs	r2, #1
 8005408:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800540c:	604b      	str	r3, [r1, #4]
		/* Disable the selected ADC regular discontinuous mode */
		hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
	}

	/* Set ADC number of conversion */
	hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800540e:	6822      	ldr	r2, [r4, #0]
 8005410:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005412:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005416:	62d3      	str	r3, [r2, #44]	; 0x2c
	hadc->Instance->SQR1 |= ADC_SQR1(hadc->Init.NbrOfConversion);
 8005418:	6821      	ldr	r1, [r4, #0]
 800541a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800541c:	69e2      	ldr	r2, [r4, #28]
 800541e:	3a01      	subs	r2, #1
 8005420:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8005424:	62cb      	str	r3, [r1, #44]	; 0x2c

	/* Enable or disable ADC DMA continuous request */
	hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005426:	6822      	ldr	r2, [r4, #0]
 8005428:	6893      	ldr	r3, [r2, #8]
 800542a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800542e:	6093      	str	r3, [r2, #8]
	hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8005430:	6822      	ldr	r2, [r4, #0]
 8005432:	6893      	ldr	r3, [r2, #8]
 8005434:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005436:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 800543a:	6093      	str	r3, [r2, #8]

	/* Enable or disable ADC end of conversion selection */
	hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800543c:	6822      	ldr	r2, [r4, #0]
 800543e:	6893      	ldr	r3, [r2, #8]
 8005440:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005444:	6093      	str	r3, [r2, #8]
	hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005446:	6822      	ldr	r2, [r4, #0]
 8005448:	6893      	ldr	r3, [r2, #8]
 800544a:	6961      	ldr	r1, [r4, #20]
 800544c:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8005450:	6093      	str	r3, [r2, #8]
 8005452:	bd10      	pop	{r4, pc}
		hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005454:	6802      	ldr	r2, [r0, #0]
 8005456:	6893      	ldr	r3, [r2, #8]
 8005458:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800545c:	6093      	str	r3, [r2, #8]
		hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800545e:	6802      	ldr	r2, [r0, #0]
 8005460:	6893      	ldr	r3, [r2, #8]
 8005462:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8005466:	6093      	str	r3, [r2, #8]
 8005468:	e7ae      	b.n	80053c8 <ADC_Init+0x84>
		assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 800546a:	f240 51d1 	movw	r1, #1489	; 0x5d1
 800546e:	4807      	ldr	r0, [pc, #28]	; (800548c <ADC_Init+0x148>)
 8005470:	f006 ff5c 	bl	800c32c <assert_failed>
 8005474:	e7ba      	b.n	80053ec <ADC_Init+0xa8>
		hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005476:	6822      	ldr	r2, [r4, #0]
 8005478:	6853      	ldr	r3, [r2, #4]
 800547a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800547e:	6053      	str	r3, [r2, #4]
 8005480:	e7c5      	b.n	800540e <ADC_Init+0xca>
 8005482:	bf00      	nop
 8005484:	40012300 	.word	0x40012300
 8005488:	0f000001 	.word	0x0f000001
 800548c:	0801e0bc 	.word	0x0801e0bc

08005490 <HAL_ADC_Init>:
	if (hadc == NULL) {
 8005490:	2800      	cmp	r0, #0
 8005492:	f000 80d9 	beq.w	8005648 <HAL_ADC_Init+0x1b8>
{
 8005496:	b510      	push	{r4, lr}
 8005498:	4604      	mov	r4, r0
	assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800549a:	6802      	ldr	r2, [r0, #0]
 800549c:	4b6b      	ldr	r3, [pc, #428]	; (800564c <HAL_ADC_Init+0x1bc>)
 800549e:	429a      	cmp	r2, r3
 80054a0:	d004      	beq.n	80054ac <HAL_ADC_Init+0x1c>
 80054a2:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80054a6:	486a      	ldr	r0, [pc, #424]	; (8005650 <HAL_ADC_Init+0x1c0>)
 80054a8:	f006 ff40 	bl	800c32c <assert_failed>
	assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80054ac:	6863      	ldr	r3, [r4, #4]
 80054ae:	b16b      	cbz	r3, 80054cc <HAL_ADC_Init+0x3c>
 80054b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054b4:	d00a      	beq.n	80054cc <HAL_ADC_Init+0x3c>
 80054b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054ba:	d007      	beq.n	80054cc <HAL_ADC_Init+0x3c>
 80054bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80054c0:	d004      	beq.n	80054cc <HAL_ADC_Init+0x3c>
 80054c2:	f240 110b 	movw	r1, #267	; 0x10b
 80054c6:	4862      	ldr	r0, [pc, #392]	; (8005650 <HAL_ADC_Init+0x1c0>)
 80054c8:	f006 ff30 	bl	800c32c <assert_failed>
	assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80054cc:	68a3      	ldr	r3, [r4, #8]
 80054ce:	b16b      	cbz	r3, 80054ec <HAL_ADC_Init+0x5c>
 80054d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054d4:	d00a      	beq.n	80054ec <HAL_ADC_Init+0x5c>
 80054d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054da:	d007      	beq.n	80054ec <HAL_ADC_Init+0x5c>
 80054dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80054e0:	d004      	beq.n	80054ec <HAL_ADC_Init+0x5c>
 80054e2:	f44f 7186 	mov.w	r1, #268	; 0x10c
 80054e6:	485a      	ldr	r0, [pc, #360]	; (8005650 <HAL_ADC_Init+0x1c0>)
 80054e8:	f006 ff20 	bl	800c32c <assert_failed>
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 80054ec:	6923      	ldr	r3, [r4, #16]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d904      	bls.n	80054fc <HAL_ADC_Init+0x6c>
 80054f2:	f240 110d 	movw	r1, #269	; 0x10d
 80054f6:	4856      	ldr	r0, [pc, #344]	; (8005650 <HAL_ADC_Init+0x1c0>)
 80054f8:	f006 ff18 	bl	800c32c <assert_failed>
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80054fc:	69a3      	ldr	r3, [r4, #24]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d904      	bls.n	800550c <HAL_ADC_Init+0x7c>
 8005502:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8005506:	4852      	ldr	r0, [pc, #328]	; (8005650 <HAL_ADC_Init+0x1c0>)
 8005508:	f006 ff10 	bl	800c32c <assert_failed>
	assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 800550c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800550e:	b3a3      	cbz	r3, 800557a <HAL_ADC_Init+0xea>
 8005510:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005514:	d031      	beq.n	800557a <HAL_ADC_Init+0xea>
 8005516:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800551a:	d02e      	beq.n	800557a <HAL_ADC_Init+0xea>
 800551c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005520:	d02b      	beq.n	800557a <HAL_ADC_Init+0xea>
 8005522:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005526:	d028      	beq.n	800557a <HAL_ADC_Init+0xea>
 8005528:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800552c:	d025      	beq.n	800557a <HAL_ADC_Init+0xea>
 800552e:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8005532:	d022      	beq.n	800557a <HAL_ADC_Init+0xea>
 8005534:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8005538:	d01f      	beq.n	800557a <HAL_ADC_Init+0xea>
 800553a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800553e:	d01c      	beq.n	800557a <HAL_ADC_Init+0xea>
 8005540:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8005544:	d019      	beq.n	800557a <HAL_ADC_Init+0xea>
 8005546:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 800554a:	d016      	beq.n	800557a <HAL_ADC_Init+0xea>
 800554c:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 8005550:	d013      	beq.n	800557a <HAL_ADC_Init+0xea>
 8005552:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005556:	d010      	beq.n	800557a <HAL_ADC_Init+0xea>
 8005558:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 800555c:	d00d      	beq.n	800557a <HAL_ADC_Init+0xea>
 800555e:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8005562:	d00a      	beq.n	800557a <HAL_ADC_Init+0xea>
 8005564:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005568:	d007      	beq.n	800557a <HAL_ADC_Init+0xea>
 800556a:	4a3a      	ldr	r2, [pc, #232]	; (8005654 <HAL_ADC_Init+0x1c4>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d004      	beq.n	800557a <HAL_ADC_Init+0xea>
 8005570:	f240 110f 	movw	r1, #271	; 0x10f
 8005574:	4836      	ldr	r0, [pc, #216]	; (8005650 <HAL_ADC_Init+0x1c0>)
 8005576:	f006 fed9 	bl	800c32c <assert_failed>
	assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 800557a:	68e3      	ldr	r3, [r4, #12]
 800557c:	b13b      	cbz	r3, 800558e <HAL_ADC_Init+0xfe>
 800557e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005582:	d004      	beq.n	800558e <HAL_ADC_Init+0xfe>
 8005584:	f44f 7188 	mov.w	r1, #272	; 0x110
 8005588:	4831      	ldr	r0, [pc, #196]	; (8005650 <HAL_ADC_Init+0x1c0>)
 800558a:	f006 fecf 	bl	800c32c <assert_failed>
	assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 800558e:	69e3      	ldr	r3, [r4, #28]
 8005590:	3b01      	subs	r3, #1
 8005592:	2b0f      	cmp	r3, #15
 8005594:	d831      	bhi.n	80055fa <HAL_ADC_Init+0x16a>
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8005596:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005598:	2b01      	cmp	r3, #1
 800559a:	d904      	bls.n	80055a6 <HAL_ADC_Init+0x116>
 800559c:	f44f 7189 	mov.w	r1, #274	; 0x112
 80055a0:	482b      	ldr	r0, [pc, #172]	; (8005650 <HAL_ADC_Init+0x1c0>)
 80055a2:	f006 fec3 	bl	800c32c <assert_failed>
	assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80055a6:	6963      	ldr	r3, [r4, #20]
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d82c      	bhi.n	8005606 <HAL_ADC_Init+0x176>
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80055ac:	6a23      	ldr	r3, [r4, #32]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d904      	bls.n	80055bc <HAL_ADC_Init+0x12c>
 80055b2:	f44f 718a 	mov.w	r1, #276	; 0x114
 80055b6:	4826      	ldr	r0, [pc, #152]	; (8005650 <HAL_ADC_Init+0x1c0>)
 80055b8:	f006 feb8 	bl	800c32c <assert_failed>
	if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START) {
 80055bc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80055be:	4b25      	ldr	r3, [pc, #148]	; (8005654 <HAL_ADC_Init+0x1c4>)
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d00f      	beq.n	80055e4 <HAL_ADC_Init+0x154>
		assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80055c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80055c6:	b16b      	cbz	r3, 80055e4 <HAL_ADC_Init+0x154>
 80055c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055cc:	d00a      	beq.n	80055e4 <HAL_ADC_Init+0x154>
 80055ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055d2:	d007      	beq.n	80055e4 <HAL_ADC_Init+0x154>
 80055d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80055d8:	d004      	beq.n	80055e4 <HAL_ADC_Init+0x154>
 80055da:	f240 1117 	movw	r1, #279	; 0x117
 80055de:	481c      	ldr	r0, [pc, #112]	; (8005650 <HAL_ADC_Init+0x1c0>)
 80055e0:	f006 fea4 	bl	800c32c <assert_failed>
	if (hadc->State == HAL_ADC_STATE_RESET) {
 80055e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055e6:	b1a3      	cbz	r3, 8005612 <HAL_ADC_Init+0x182>
	if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL)) {
 80055e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055ea:	f013 0f10 	tst.w	r3, #16
 80055ee:	d017      	beq.n	8005620 <HAL_ADC_Init+0x190>
		tmp_hal_status = HAL_ERROR;
 80055f0:	2001      	movs	r0, #1
	__HAL_UNLOCK(hadc);
 80055f2:	2300      	movs	r3, #0
 80055f4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	return tmp_hal_status;
 80055f8:	bd10      	pop	{r4, pc}
	assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80055fa:	f240 1111 	movw	r1, #273	; 0x111
 80055fe:	4814      	ldr	r0, [pc, #80]	; (8005650 <HAL_ADC_Init+0x1c0>)
 8005600:	f006 fe94 	bl	800c32c <assert_failed>
 8005604:	e7c7      	b.n	8005596 <HAL_ADC_Init+0x106>
	assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8005606:	f240 1113 	movw	r1, #275	; 0x113
 800560a:	4811      	ldr	r0, [pc, #68]	; (8005650 <HAL_ADC_Init+0x1c0>)
 800560c:	f006 fe8e 	bl	800c32c <assert_failed>
 8005610:	e7cc      	b.n	80055ac <HAL_ADC_Init+0x11c>
		ADC_CLEAR_ERRORCODE(hadc);
 8005612:	6463      	str	r3, [r4, #68]	; 0x44
		hadc->Lock = HAL_UNLOCKED;
 8005614:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		HAL_ADC_MspInit(hadc);
 8005618:	4620      	mov	r0, r4
 800561a:	f005 fa8b 	bl	800ab34 <HAL_ADC_MspInit>
 800561e:	e7e3      	b.n	80055e8 <HAL_ADC_Init+0x158>
		ADC_STATE_CLR_SET(hadc->State,
 8005620:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005622:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005626:	f023 0302 	bic.w	r3, r3, #2
 800562a:	f043 0302 	orr.w	r3, r3, #2
 800562e:	6423      	str	r3, [r4, #64]	; 0x40
		ADC_Init(hadc);
 8005630:	4620      	mov	r0, r4
 8005632:	f7ff fe87 	bl	8005344 <ADC_Init>
		ADC_CLEAR_ERRORCODE(hadc);
 8005636:	2000      	movs	r0, #0
 8005638:	6460      	str	r0, [r4, #68]	; 0x44
		ADC_STATE_CLR_SET(hadc->State,
 800563a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800563c:	f023 0303 	bic.w	r3, r3, #3
 8005640:	f043 0301 	orr.w	r3, r3, #1
 8005644:	6423      	str	r3, [r4, #64]	; 0x40
 8005646:	e7d4      	b.n	80055f2 <HAL_ADC_Init+0x162>
		return HAL_ERROR;
 8005648:	2001      	movs	r0, #1
 800564a:	4770      	bx	lr
 800564c:	40012000 	.word	0x40012000
 8005650:	0801e0bc 	.word	0x0801e0bc
 8005654:	0f000001 	.word	0x0f000001

08005658 <HAL_ADC_ConvCpltCallback>:
{
 8005658:	4770      	bx	lr

0800565a <HAL_ADC_LevelOutOfWindowCallback>:
{
 800565a:	4770      	bx	lr

0800565c <HAL_ADC_ErrorCallback>:
{
 800565c:	4770      	bx	lr
	...

08005660 <HAL_ADC_IRQHandler>:
{
 8005660:	b538      	push	{r3, r4, r5, lr}
 8005662:	4604      	mov	r4, r0
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8005664:	6983      	ldr	r3, [r0, #24]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d904      	bls.n	8005674 <HAL_ADC_IRQHandler+0x14>
 800566a:	f240 3146 	movw	r1, #838	; 0x346
 800566e:	485e      	ldr	r0, [pc, #376]	; (80057e8 <HAL_ADC_IRQHandler+0x188>)
 8005670:	f006 fe5c 	bl	800c32c <assert_failed>
	assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8005674:	69e3      	ldr	r3, [r4, #28]
 8005676:	3b01      	subs	r3, #1
 8005678:	2b0f      	cmp	r3, #15
 800567a:	f200 8090 	bhi.w	800579e <HAL_ADC_IRQHandler+0x13e>
	assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 800567e:	6963      	ldr	r3, [r4, #20]
 8005680:	2b02      	cmp	r3, #2
 8005682:	f200 8092 	bhi.w	80057aa <HAL_ADC_IRQHandler+0x14a>
	tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8005686:	6822      	ldr	r2, [r4, #0]
 8005688:	6811      	ldr	r1, [r2, #0]
	tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800568a:	6853      	ldr	r3, [r2, #4]
 800568c:	f003 0320 	and.w	r3, r3, #32
	if (tmp1 && tmp2) {
 8005690:	f011 0f02 	tst.w	r1, #2
 8005694:	d02d      	beq.n	80056f2 <HAL_ADC_IRQHandler+0x92>
 8005696:	b363      	cbz	r3, 80056f2 <HAL_ADC_IRQHandler+0x92>
		if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL)) {
 8005698:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800569a:	f013 0f10 	tst.w	r3, #16
 800569e:	d103      	bne.n	80056a8 <HAL_ADC_IRQHandler+0x48>
			SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80056a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80056a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056a6:	6423      	str	r3, [r4, #64]	; 0x40
		if (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80056a8:	6893      	ldr	r3, [r2, #8]
 80056aa:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 80056ae:	d119      	bne.n	80056e4 <HAL_ADC_IRQHandler+0x84>
		    (hadc->Init.ContinuousConvMode == DISABLE) &&
 80056b0:	69a3      	ldr	r3, [r4, #24]
		if (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80056b2:	b9bb      	cbnz	r3, 80056e4 <HAL_ADC_IRQHandler+0x84>
		    (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80056b4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		    (hadc->Init.ContinuousConvMode == DISABLE) &&
 80056b6:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 80056ba:	d003      	beq.n	80056c4 <HAL_ADC_IRQHandler+0x64>
		     HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS))) {
 80056bc:	6893      	ldr	r3, [r2, #8]
		    (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80056be:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80056c2:	d10f      	bne.n	80056e4 <HAL_ADC_IRQHandler+0x84>
			__HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80056c4:	6853      	ldr	r3, [r2, #4]
 80056c6:	f023 0320 	bic.w	r3, r3, #32
 80056ca:	6053      	str	r3, [r2, #4]
			CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80056cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80056ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056d2:	6423      	str	r3, [r4, #64]	; 0x40
			if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY)) {
 80056d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80056d6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80056da:	d103      	bne.n	80056e4 <HAL_ADC_IRQHandler+0x84>
				SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80056dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80056de:	f043 0301 	orr.w	r3, r3, #1
 80056e2:	6423      	str	r3, [r4, #64]	; 0x40
		HAL_ADC_ConvCpltCallback(hadc);
 80056e4:	4620      	mov	r0, r4
 80056e6:	f7ff ffb7 	bl	8005658 <HAL_ADC_ConvCpltCallback>
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80056ea:	6823      	ldr	r3, [r4, #0]
 80056ec:	f06f 0212 	mvn.w	r2, #18
 80056f0:	601a      	str	r2, [r3, #0]
	tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80056f2:	6823      	ldr	r3, [r4, #0]
 80056f4:	6819      	ldr	r1, [r3, #0]
	tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	f002 0280 	and.w	r2, r2, #128	; 0x80
	if (tmp1 && tmp2) {
 80056fc:	f011 0f04 	tst.w	r1, #4
 8005700:	d036      	beq.n	8005770 <HAL_ADC_IRQHandler+0x110>
 8005702:	2a00      	cmp	r2, #0
 8005704:	d034      	beq.n	8005770 <HAL_ADC_IRQHandler+0x110>
		if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL)) {
 8005706:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005708:	f012 0f10 	tst.w	r2, #16
 800570c:	d103      	bne.n	8005716 <HAL_ADC_IRQHandler+0xb6>
			SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800570e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005710:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005714:	6422      	str	r2, [r4, #64]	; 0x40
		if (ADC_IS_SOFTWARE_START_INJECTED(hadc) &&
 8005716:	689a      	ldr	r2, [r3, #8]
 8005718:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800571c:	d121      	bne.n	8005762 <HAL_ADC_IRQHandler+0x102>
		    (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800571e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if (ADC_IS_SOFTWARE_START_INJECTED(hadc) &&
 8005720:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8005724:	d003      	beq.n	800572e <HAL_ADC_IRQHandler+0xce>
		     HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8005726:	689a      	ldr	r2, [r3, #8]
		    (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8005728:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800572c:	d119      	bne.n	8005762 <HAL_ADC_IRQHandler+0x102>
		    (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800572e:	685a      	ldr	r2, [r3, #4]
		     HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8005730:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8005734:	d115      	bne.n	8005762 <HAL_ADC_IRQHandler+0x102>
		     (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8005736:	689a      	ldr	r2, [r3, #8]
		    (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005738:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800573c:	d111      	bne.n	8005762 <HAL_ADC_IRQHandler+0x102>
		      (hadc->Init.ContinuousConvMode == DISABLE)))) {
 800573e:	69a2      	ldr	r2, [r4, #24]
		     (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8005740:	b97a      	cbnz	r2, 8005762 <HAL_ADC_IRQHandler+0x102>
			__HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005748:	605a      	str	r2, [r3, #4]
			CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800574a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800574c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005750:	6423      	str	r3, [r4, #64]	; 0x40
			if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY)) {
 8005752:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005754:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005758:	d103      	bne.n	8005762 <HAL_ADC_IRQHandler+0x102>
				SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800575a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800575c:	f043 0301 	orr.w	r3, r3, #1
 8005760:	6423      	str	r3, [r4, #64]	; 0x40
		HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005762:	4620      	mov	r0, r4
 8005764:	f000 f928 	bl	80059b8 <HAL_ADCEx_InjectedConvCpltCallback>
		__HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005768:	6823      	ldr	r3, [r4, #0]
 800576a:	f06f 020c 	mvn.w	r2, #12
 800576e:	601a      	str	r2, [r3, #0]
	tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8005770:	6822      	ldr	r2, [r4, #0]
 8005772:	6811      	ldr	r1, [r2, #0]
	tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);
 8005774:	6853      	ldr	r3, [r2, #4]
 8005776:	f003 0340 	and.w	r3, r3, #64	; 0x40
	if (tmp1 && tmp2) {
 800577a:	f011 0f01 	tst.w	r1, #1
 800577e:	d004      	beq.n	800578a <HAL_ADC_IRQHandler+0x12a>
 8005780:	b11b      	cbz	r3, 800578a <HAL_ADC_IRQHandler+0x12a>
		if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD)) {
 8005782:	6813      	ldr	r3, [r2, #0]
 8005784:	f013 0f01 	tst.w	r3, #1
 8005788:	d115      	bne.n	80057b6 <HAL_ADC_IRQHandler+0x156>
	tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800578a:	6822      	ldr	r2, [r4, #0]
 800578c:	6811      	ldr	r1, [r2, #0]
	tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800578e:	6853      	ldr	r3, [r2, #4]
 8005790:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
	if (tmp1 && tmp2) {
 8005794:	f011 0f20 	tst.w	r1, #32
 8005798:	d000      	beq.n	800579c <HAL_ADC_IRQHandler+0x13c>
 800579a:	b9c3      	cbnz	r3, 80057ce <HAL_ADC_IRQHandler+0x16e>
 800579c:	bd38      	pop	{r3, r4, r5, pc}
	assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 800579e:	f240 3147 	movw	r1, #839	; 0x347
 80057a2:	4811      	ldr	r0, [pc, #68]	; (80057e8 <HAL_ADC_IRQHandler+0x188>)
 80057a4:	f006 fdc2 	bl	800c32c <assert_failed>
 80057a8:	e769      	b.n	800567e <HAL_ADC_IRQHandler+0x1e>
	assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80057aa:	f44f 7152 	mov.w	r1, #840	; 0x348
 80057ae:	480e      	ldr	r0, [pc, #56]	; (80057e8 <HAL_ADC_IRQHandler+0x188>)
 80057b0:	f006 fdbc 	bl	800c32c <assert_failed>
 80057b4:	e767      	b.n	8005686 <HAL_ADC_IRQHandler+0x26>
			SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80057b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057bc:	6423      	str	r3, [r4, #64]	; 0x40
			HAL_ADC_LevelOutOfWindowCallback(hadc);
 80057be:	4620      	mov	r0, r4
 80057c0:	f7ff ff4b 	bl	800565a <HAL_ADC_LevelOutOfWindowCallback>
			__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80057c4:	6823      	ldr	r3, [r4, #0]
 80057c6:	f06f 0201 	mvn.w	r2, #1
 80057ca:	601a      	str	r2, [r3, #0]
 80057cc:	e7dd      	b.n	800578a <HAL_ADC_IRQHandler+0x12a>
		SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80057ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80057d0:	f043 0302 	orr.w	r3, r3, #2
 80057d4:	6463      	str	r3, [r4, #68]	; 0x44
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80057d6:	f06f 0520 	mvn.w	r5, #32
 80057da:	6015      	str	r5, [r2, #0]
		HAL_ADC_ErrorCallback(hadc);
 80057dc:	4620      	mov	r0, r4
 80057de:	f7ff ff3d 	bl	800565c <HAL_ADC_ErrorCallback>
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80057e2:	6823      	ldr	r3, [r4, #0]
 80057e4:	601d      	str	r5, [r3, #0]
}
 80057e6:	e7d9      	b.n	800579c <HAL_ADC_IRQHandler+0x13c>
 80057e8:	0801e0bc 	.word	0x0801e0bc

080057ec <HAL_ADC_ConfigChannel>:
{
 80057ec:	b530      	push	{r4, r5, lr}
 80057ee:	b083      	sub	sp, #12
 80057f0:	4605      	mov	r5, r0
 80057f2:	460c      	mov	r4, r1
	__IO uint32_t counter = 0U;
 80057f4:	2300      	movs	r3, #0
 80057f6:	9301      	str	r3, [sp, #4]
	assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80057f8:	680b      	ldr	r3, [r1, #0]
 80057fa:	2b12      	cmp	r3, #18
 80057fc:	d84e      	bhi.n	800589c <HAL_ADC_ConfigChannel+0xb0>
	assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80057fe:	6863      	ldr	r3, [r4, #4]
 8005800:	3b01      	subs	r3, #1
 8005802:	2b0f      	cmp	r3, #15
 8005804:	d850      	bhi.n	80058a8 <HAL_ADC_ConfigChannel+0xbc>
	assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8005806:	68a3      	ldr	r3, [r4, #8]
 8005808:	2b07      	cmp	r3, #7
 800580a:	d853      	bhi.n	80058b4 <HAL_ADC_ConfigChannel+0xc8>
	__HAL_LOCK(hadc);
 800580c:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8005810:	2b01      	cmp	r3, #1
 8005812:	f000 80c7 	beq.w	80059a4 <HAL_ADC_ConfigChannel+0x1b8>
 8005816:	2301      	movs	r3, #1
 8005818:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
	if (sConfig->Channel > ADC_CHANNEL_9) {
 800581c:	6823      	ldr	r3, [r4, #0]
 800581e:	2b09      	cmp	r3, #9
 8005820:	d94e      	bls.n	80058c0 <HAL_ADC_ConfigChannel+0xd4>
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005822:	6828      	ldr	r0, [r5, #0]
 8005824:	68c2      	ldr	r2, [r0, #12]
 8005826:	b29b      	uxth	r3, r3
 8005828:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800582c:	3b1e      	subs	r3, #30
 800582e:	2107      	movs	r1, #7
 8005830:	fa01 f303 	lsl.w	r3, r1, r3
 8005834:	ea22 0303 	bic.w	r3, r2, r3
 8005838:	60c3      	str	r3, [r0, #12]
		hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800583a:	6828      	ldr	r0, [r5, #0]
 800583c:	68c2      	ldr	r2, [r0, #12]
 800583e:	68a1      	ldr	r1, [r4, #8]
 8005840:	8823      	ldrh	r3, [r4, #0]
 8005842:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005846:	3b1e      	subs	r3, #30
 8005848:	fa01 f303 	lsl.w	r3, r1, r3
 800584c:	4313      	orrs	r3, r2
 800584e:	60c3      	str	r3, [r0, #12]
	if (sConfig->Rank < 7U) {
 8005850:	6863      	ldr	r3, [r4, #4]
 8005852:	2b06      	cmp	r3, #6
 8005854:	d84a      	bhi.n	80058ec <HAL_ADC_ConfigChannel+0x100>
		hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005856:	6828      	ldr	r0, [r5, #0]
 8005858:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800585a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800585e:	3b05      	subs	r3, #5
 8005860:	211f      	movs	r1, #31
 8005862:	fa01 f303 	lsl.w	r3, r1, r3
 8005866:	ea22 0303 	bic.w	r3, r2, r3
 800586a:	6343      	str	r3, [r0, #52]	; 0x34
		hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800586c:	6828      	ldr	r0, [r5, #0]
 800586e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8005870:	6863      	ldr	r3, [r4, #4]
 8005872:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005876:	3b05      	subs	r3, #5
 8005878:	8821      	ldrh	r1, [r4, #0]
 800587a:	fa01 f303 	lsl.w	r3, r1, r3
 800587e:	4313      	orrs	r3, r2
 8005880:	6343      	str	r3, [r0, #52]	; 0x34
	if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT)) {
 8005882:	682a      	ldr	r2, [r5, #0]
 8005884:	4b48      	ldr	r3, [pc, #288]	; (80059a8 <HAL_ADC_ConfigChannel+0x1bc>)
 8005886:	429a      	cmp	r2, r3
 8005888:	d060      	beq.n	800594c <HAL_ADC_ConfigChannel+0x160>
	if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT))) {
 800588a:	682a      	ldr	r2, [r5, #0]
 800588c:	4b46      	ldr	r3, [pc, #280]	; (80059a8 <HAL_ADC_ConfigChannel+0x1bc>)
 800588e:	429a      	cmp	r2, r3
 8005890:	d065      	beq.n	800595e <HAL_ADC_ConfigChannel+0x172>
	__HAL_UNLOCK(hadc);
 8005892:	2000      	movs	r0, #0
 8005894:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
}
 8005898:	b003      	add	sp, #12
 800589a:	bd30      	pop	{r4, r5, pc}
	assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800589c:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
 80058a0:	4842      	ldr	r0, [pc, #264]	; (80059ac <HAL_ADC_ConfigChannel+0x1c0>)
 80058a2:	f006 fd43 	bl	800c32c <assert_failed>
 80058a6:	e7aa      	b.n	80057fe <HAL_ADC_ConfigChannel+0x12>
	assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80058a8:	f240 41d1 	movw	r1, #1233	; 0x4d1
 80058ac:	483f      	ldr	r0, [pc, #252]	; (80059ac <HAL_ADC_ConfigChannel+0x1c0>)
 80058ae:	f006 fd3d 	bl	800c32c <assert_failed>
 80058b2:	e7a8      	b.n	8005806 <HAL_ADC_ConfigChannel+0x1a>
	assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80058b4:	f240 41d2 	movw	r1, #1234	; 0x4d2
 80058b8:	483c      	ldr	r0, [pc, #240]	; (80059ac <HAL_ADC_ConfigChannel+0x1c0>)
 80058ba:	f006 fd37 	bl	800c32c <assert_failed>
 80058be:	e7a5      	b.n	800580c <HAL_ADC_ConfigChannel+0x20>
		hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80058c0:	6828      	ldr	r0, [r5, #0]
 80058c2:	6902      	ldr	r2, [r0, #16]
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80058ca:	2107      	movs	r1, #7
 80058cc:	fa01 f303 	lsl.w	r3, r1, r3
 80058d0:	ea22 0303 	bic.w	r3, r2, r3
 80058d4:	6103      	str	r3, [r0, #16]
		hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80058d6:	6828      	ldr	r0, [r5, #0]
 80058d8:	6902      	ldr	r2, [r0, #16]
 80058da:	68a1      	ldr	r1, [r4, #8]
 80058dc:	8823      	ldrh	r3, [r4, #0]
 80058de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80058e2:	fa01 f303 	lsl.w	r3, r1, r3
 80058e6:	4313      	orrs	r3, r2
 80058e8:	6103      	str	r3, [r0, #16]
 80058ea:	e7b1      	b.n	8005850 <HAL_ADC_ConfigChannel+0x64>
	else if (sConfig->Rank < 13U) {
 80058ec:	2b0c      	cmp	r3, #12
 80058ee:	d816      	bhi.n	800591e <HAL_ADC_ConfigChannel+0x132>
		hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80058f0:	6828      	ldr	r0, [r5, #0]
 80058f2:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80058f4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80058f8:	3b23      	subs	r3, #35	; 0x23
 80058fa:	211f      	movs	r1, #31
 80058fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005900:	ea22 0303 	bic.w	r3, r2, r3
 8005904:	6303      	str	r3, [r0, #48]	; 0x30
		hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005906:	6828      	ldr	r0, [r5, #0]
 8005908:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800590a:	6863      	ldr	r3, [r4, #4]
 800590c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005910:	3b23      	subs	r3, #35	; 0x23
 8005912:	8821      	ldrh	r1, [r4, #0]
 8005914:	fa01 f303 	lsl.w	r3, r1, r3
 8005918:	4313      	orrs	r3, r2
 800591a:	6303      	str	r3, [r0, #48]	; 0x30
 800591c:	e7b1      	b.n	8005882 <HAL_ADC_ConfigChannel+0x96>
		hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800591e:	6828      	ldr	r0, [r5, #0]
 8005920:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8005922:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005926:	3b41      	subs	r3, #65	; 0x41
 8005928:	211f      	movs	r1, #31
 800592a:	fa01 f303 	lsl.w	r3, r1, r3
 800592e:	ea22 0303 	bic.w	r3, r2, r3
 8005932:	62c3      	str	r3, [r0, #44]	; 0x2c
		hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005934:	6828      	ldr	r0, [r5, #0]
 8005936:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8005938:	6863      	ldr	r3, [r4, #4]
 800593a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800593e:	3b41      	subs	r3, #65	; 0x41
 8005940:	8821      	ldrh	r1, [r4, #0]
 8005942:	fa01 f303 	lsl.w	r3, r1, r3
 8005946:	4313      	orrs	r3, r2
 8005948:	62c3      	str	r3, [r0, #44]	; 0x2c
 800594a:	e79a      	b.n	8005882 <HAL_ADC_ConfigChannel+0x96>
	if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT)) {
 800594c:	6823      	ldr	r3, [r4, #0]
 800594e:	2b12      	cmp	r3, #18
 8005950:	d19b      	bne.n	800588a <HAL_ADC_ConfigChannel+0x9e>
		tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005952:	4a17      	ldr	r2, [pc, #92]	; (80059b0 <HAL_ADC_ConfigChannel+0x1c4>)
 8005954:	6853      	ldr	r3, [r2, #4]
 8005956:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800595a:	6053      	str	r3, [r2, #4]
 800595c:	e795      	b.n	800588a <HAL_ADC_ConfigChannel+0x9e>
	if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT))) {
 800595e:	6823      	ldr	r3, [r4, #0]
 8005960:	3b10      	subs	r3, #16
 8005962:	2b01      	cmp	r3, #1
 8005964:	d895      	bhi.n	8005892 <HAL_ADC_ConfigChannel+0xa6>
		tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005966:	4a12      	ldr	r2, [pc, #72]	; (80059b0 <HAL_ADC_ConfigChannel+0x1c4>)
 8005968:	6853      	ldr	r3, [r2, #4]
 800596a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800596e:	6053      	str	r3, [r2, #4]
		if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)) {
 8005970:	6823      	ldr	r3, [r4, #0]
 8005972:	2b10      	cmp	r3, #16
 8005974:	d18d      	bne.n	8005892 <HAL_ADC_ConfigChannel+0xa6>
			counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005976:	4b0f      	ldr	r3, [pc, #60]	; (80059b4 <HAL_ADC_ConfigChannel+0x1c8>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 800597e:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8005982:	f202 3283 	addw	r2, r2, #899	; 0x383
 8005986:	fba2 2303 	umull	r2, r3, r2, r3
 800598a:	0c9b      	lsrs	r3, r3, #18
 800598c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005990:	005a      	lsls	r2, r3, #1
 8005992:	9201      	str	r2, [sp, #4]
			while (counter != 0U) {
 8005994:	e002      	b.n	800599c <HAL_ADC_ConfigChannel+0x1b0>
				counter--;
 8005996:	9b01      	ldr	r3, [sp, #4]
 8005998:	3b01      	subs	r3, #1
 800599a:	9301      	str	r3, [sp, #4]
			while (counter != 0U) {
 800599c:	9b01      	ldr	r3, [sp, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1f9      	bne.n	8005996 <HAL_ADC_ConfigChannel+0x1aa>
 80059a2:	e776      	b.n	8005892 <HAL_ADC_ConfigChannel+0xa6>
	__HAL_LOCK(hadc);
 80059a4:	2002      	movs	r0, #2
 80059a6:	e777      	b.n	8005898 <HAL_ADC_ConfigChannel+0xac>
 80059a8:	40012000 	.word	0x40012000
 80059ac:	0801e0bc 	.word	0x0801e0bc
 80059b0:	40012300 	.word	0x40012300
 80059b4:	20001478 	.word	0x20001478

080059b8 <HAL_ADCEx_InjectedConvCpltCallback>:
 * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 *         the configuration information for the specified ADC.
 * @retval None
 */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80059b8:	4770      	bx	lr
	...

080059bc <HAL_NVIC_SetPriorityGrouping>:
 * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
 *         The pending IRQ priority will be managed only by the subpriority.
 * @retval None
 */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059bc:	b510      	push	{r4, lr}
 80059be:	4604      	mov	r4, r0
	/* Check the parameters */
	assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80059c0:	1ec3      	subs	r3, r0, #3
 80059c2:	2b04      	cmp	r3, #4
 80059c4:	d80f      	bhi.n	80059e6 <HAL_NVIC_SetPriorityGrouping+0x2a>
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
	uint32_t reg_value;
	uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);       /* only values 0..7 are used          */

	reg_value = SCB->AIRCR;                                               /* read old register configuration    */
 80059c6:	4a0a      	ldr	r2, [pc, #40]	; (80059f0 <HAL_NVIC_SetPriorityGrouping+0x34>)
 80059c8:	68d3      	ldr	r3, [r2, #12]
	reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80059ca:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80059ce:	041b      	lsls	r3, r3, #16
 80059d0:	0c1b      	lsrs	r3, r3, #16
	reg_value = (reg_value |
		     ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
		     (PriorityGroupTmp << 8U));                               /* Insert write key and priorty group */
 80059d2:	0224      	lsls	r4, r4, #8
 80059d4:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
		     ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80059d8:	4323      	orrs	r3, r4
	reg_value = (reg_value |
 80059da:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80059de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = reg_value;
 80059e2:	60d3      	str	r3, [r2, #12]
 80059e4:	bd10      	pop	{r4, pc}
 80059e6:	21a2      	movs	r1, #162	; 0xa2
 80059e8:	4802      	ldr	r0, [pc, #8]	; (80059f4 <HAL_NVIC_SetPriorityGrouping+0x38>)
 80059ea:	f006 fc9f 	bl	800c32c <assert_failed>
 80059ee:	e7ea      	b.n	80059c6 <HAL_NVIC_SetPriorityGrouping+0xa>
 80059f0:	e000ed00 	.word	0xe000ed00
 80059f4:	0801e0f4 	.word	0x0801e0f4

080059f8 <HAL_NVIC_SetPriority>:
 *         This parameter can be a value between 0 and 15
 *         A lower priority value indicates a higher priority.
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059f8:	b570      	push	{r4, r5, r6, lr}
 80059fa:	4605      	mov	r5, r0
 80059fc:	460c      	mov	r4, r1
 80059fe:	4616      	mov	r6, r2
	uint32_t prioritygroup = 0x00U;

	/* Check the parameters */
	assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8005a00:	2a0f      	cmp	r2, #15
 8005a02:	d824      	bhi.n	8005a4e <HAL_NVIC_SetPriority+0x56>
	assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8005a04:	2c0f      	cmp	r4, #15
 8005a06:	d827      	bhi.n	8005a58 <HAL_NVIC_SetPriority+0x60>
   \details Reads the priority grouping field from the NVIC Interrupt Controller.
   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
	return((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a08:	4b1a      	ldr	r3, [pc, #104]	; (8005a74 <HAL_NVIC_SetPriority+0x7c>)
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
	uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL); /* only values 0..7 are used          */
	uint32_t PreemptPriorityBits;
	uint32_t SubPriorityBits;

	PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a10:	f1c3 0207 	rsb	r2, r3, #7
 8005a14:	2a04      	cmp	r2, #4
 8005a16:	bf28      	it	cs
 8005a18:	2204      	movcs	r2, #4
	SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a1a:	1d19      	adds	r1, r3, #4
 8005a1c:	2906      	cmp	r1, #6
 8005a1e:	d920      	bls.n	8005a62 <HAL_NVIC_SetPriority+0x6a>
 8005a20:	3b03      	subs	r3, #3

	return(
		((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a22:	2101      	movs	r1, #1
 8005a24:	fa01 f202 	lsl.w	r2, r1, r2
 8005a28:	3a01      	subs	r2, #1
 8005a2a:	4014      	ands	r4, r2
 8005a2c:	409c      	lsls	r4, r3
		((SubPriority & (uint32_t)((1UL << (SubPriorityBits)) - 1UL)))
 8005a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a32:	3b01      	subs	r3, #1
 8005a34:	4033      	ands	r3, r6
		((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a36:	431c      	orrs	r4, r3
	if ((int32_t)(IRQn) < 0) {
 8005a38:	2d00      	cmp	r5, #0
 8005a3a:	db14      	blt.n	8005a66 <HAL_NVIC_SetPriority+0x6e>
		NVIC->IP[((uint32_t)(int32_t)IRQn)] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a3c:	0124      	lsls	r4, r4, #4
 8005a3e:	b2e4      	uxtb	r4, r4
 8005a40:	f105 4560 	add.w	r5, r5, #3758096384	; 0xe0000000
 8005a44:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
 8005a48:	f885 4300 	strb.w	r4, [r5, #768]	; 0x300
 8005a4c:	bd70      	pop	{r4, r5, r6, pc}
	assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8005a4e:	21ba      	movs	r1, #186	; 0xba
 8005a50:	4809      	ldr	r0, [pc, #36]	; (8005a78 <HAL_NVIC_SetPriority+0x80>)
 8005a52:	f006 fc6b 	bl	800c32c <assert_failed>
 8005a56:	e7d5      	b.n	8005a04 <HAL_NVIC_SetPriority+0xc>
	assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8005a58:	21bb      	movs	r1, #187	; 0xbb
 8005a5a:	4807      	ldr	r0, [pc, #28]	; (8005a78 <HAL_NVIC_SetPriority+0x80>)
 8005a5c:	f006 fc66 	bl	800c32c <assert_failed>
 8005a60:	e7d2      	b.n	8005a08 <HAL_NVIC_SetPriority+0x10>
	SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a62:	2300      	movs	r3, #0
 8005a64:	e7dd      	b.n	8005a22 <HAL_NVIC_SetPriority+0x2a>
		SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL) - 4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a66:	f005 050f 	and.w	r5, r5, #15
 8005a6a:	0124      	lsls	r4, r4, #4
 8005a6c:	b2e4      	uxtb	r4, r4
 8005a6e:	4b03      	ldr	r3, [pc, #12]	; (8005a7c <HAL_NVIC_SetPriority+0x84>)
 8005a70:	555c      	strb	r4, [r3, r5]
 8005a72:	bd70      	pop	{r4, r5, r6, pc}
 8005a74:	e000ed00 	.word	0xe000ed00
 8005a78:	0801e0f4 	.word	0x0801e0f4
 8005a7c:	e000ed14 	.word	0xe000ed14

08005a80 <HAL_NVIC_EnableIRQ>:
 *         This parameter can be an enumerator of IRQn_Type enumeration
 *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
 * @retval None
 */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a80:	b510      	push	{r4, lr}
	/* Check the parameters */
	assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8005a82:	1e04      	subs	r4, r0, #0
 8005a84:	db09      	blt.n	8005a9a <HAL_NVIC_EnableIRQ+0x1a>
	NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8005a86:	0962      	lsrs	r2, r4, #5
 8005a88:	f004 041f 	and.w	r4, r4, #31
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	fa03 f404 	lsl.w	r4, r3, r4
 8005a92:	4b04      	ldr	r3, [pc, #16]	; (8005aa4 <HAL_NVIC_EnableIRQ+0x24>)
 8005a94:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005a98:	bd10      	pop	{r4, pc}
 8005a9a:	21ce      	movs	r1, #206	; 0xce
 8005a9c:	4802      	ldr	r0, [pc, #8]	; (8005aa8 <HAL_NVIC_EnableIRQ+0x28>)
 8005a9e:	f006 fc45 	bl	800c32c <assert_failed>
 8005aa2:	e7f0      	b.n	8005a86 <HAL_NVIC_EnableIRQ+0x6>
 8005aa4:	e000e100 	.word	0xe000e100
 8005aa8:	0801e0f4 	.word	0x0801e0f4

08005aac <HAL_NVIC_DisableIRQ>:
 *         This parameter can be an enumerator of IRQn_Type enumeration
 *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
 * @retval None
 */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005aac:	b510      	push	{r4, lr}
	/* Check the parameters */
	assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8005aae:	1e04      	subs	r4, r0, #0
 8005ab0:	db0a      	blt.n	8005ac8 <HAL_NVIC_DisableIRQ+0x1c>
	NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8005ab2:	0963      	lsrs	r3, r4, #5
 8005ab4:	f004 041f 	and.w	r4, r4, #31
 8005ab8:	2201      	movs	r2, #1
 8005aba:	fa02 f404 	lsl.w	r4, r2, r4
 8005abe:	3320      	adds	r3, #32
 8005ac0:	4a04      	ldr	r2, [pc, #16]	; (8005ad4 <HAL_NVIC_DisableIRQ+0x28>)
 8005ac2:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8005ac6:	bd10      	pop	{r4, pc}
 8005ac8:	21de      	movs	r1, #222	; 0xde
 8005aca:	4803      	ldr	r0, [pc, #12]	; (8005ad8 <HAL_NVIC_DisableIRQ+0x2c>)
 8005acc:	f006 fc2e 	bl	800c32c <assert_failed>
 8005ad0:	e7ef      	b.n	8005ab2 <HAL_NVIC_DisableIRQ+0x6>
 8005ad2:	bf00      	nop
 8005ad4:	e000e100 	.word	0xe000e100
 8005ad8:	0801e0f4 	.word	0x0801e0f4

08005adc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
	if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) {
 8005adc:	3801      	subs	r0, #1
 8005ade:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8005ae2:	d20a      	bcs.n	8005afa <HAL_SYSTICK_Config+0x1e>
		return(1UL);                                        /* Reload value impossible */
	}

	SysTick->LOAD = (uint32_t)(ticks - 1UL);                    /* set reload register */
 8005ae4:	4b06      	ldr	r3, [pc, #24]	; (8005b00 <HAL_SYSTICK_Config+0x24>)
 8005ae6:	6058      	str	r0, [r3, #4]
		SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL) - 4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ae8:	21f0      	movs	r1, #240	; 0xf0
 8005aea:	4a06      	ldr	r2, [pc, #24]	; (8005b04 <HAL_SYSTICK_Config+0x28>)
 8005aec:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
	NVIC_SetPriority(SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
	SysTick->VAL = 0UL;                                         /* Load the SysTick Counter Value */
 8005af0:	2000      	movs	r0, #0
 8005af2:	6098      	str	r0, [r3, #8]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 8005af4:	2207      	movs	r2, #7
 8005af6:	601a      	str	r2, [r3, #0]
 8005af8:	4770      	bx	lr
		return(1UL);                                        /* Reload value impossible */
 8005afa:	2001      	movs	r0, #1
 *                  - 1  Function failed.
 */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
	return SysTick_Config(TicksNumb);
}
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	e000e010 	.word	0xe000e010
 8005b04:	e000ed00 	.word	0xe000ed00

08005b08 <HAL_NVIC_ClearPendingIRQ>:
 *         This parameter can be an enumerator of IRQn_Type enumeration
 *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
 * @retval None
 */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8005b08:	b510      	push	{r4, lr}
	/* Check the parameters */
	assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8005b0a:	1e04      	subs	r4, r0, #0
 8005b0c:	db0a      	blt.n	8005b24 <HAL_NVIC_ClearPendingIRQ+0x1c>
	NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8005b0e:	0963      	lsrs	r3, r4, #5
 8005b10:	f004 041f 	and.w	r4, r4, #31
 8005b14:	2201      	movs	r2, #1
 8005b16:	fa02 f404 	lsl.w	r4, r2, r4
 8005b1a:	3360      	adds	r3, #96	; 0x60
 8005b1c:	4a04      	ldr	r2, [pc, #16]	; (8005b30 <HAL_NVIC_ClearPendingIRQ+0x28>)
 8005b1e:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8005b22:	bd10      	pop	{r4, pc}
 8005b24:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8005b28:	4802      	ldr	r0, [pc, #8]	; (8005b34 <HAL_NVIC_ClearPendingIRQ+0x2c>)
 8005b2a:	f006 fbff 	bl	800c32c <assert_failed>
 8005b2e:	e7ee      	b.n	8005b0e <HAL_NVIC_ClearPendingIRQ+0x6>
 8005b30:	e000e100 	.word	0xe000e100
 8005b34:	0801e0f4 	.word	0x0801e0f4

08005b38 <DMA_SetConfig>:
 * @param  DstAddress The destination memory Buffer address
 * @param  DataLength The length of data to be transferred from source to destination
 * @retval HAL status
 */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b38:	b430      	push	{r4, r5}
	/* Clear DBM bit */
	hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005b3a:	6805      	ldr	r5, [r0, #0]
 8005b3c:	682c      	ldr	r4, [r5, #0]
 8005b3e:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8005b42:	602c      	str	r4, [r5, #0]

	/* Configure DMA Stream data length */
	hdma->Instance->NDTR = DataLength;
 8005b44:	6804      	ldr	r4, [r0, #0]
 8005b46:	6063      	str	r3, [r4, #4]

	/* Memory to Peripheral */
	if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH) {
 8005b48:	6883      	ldr	r3, [r0, #8]
 8005b4a:	2b40      	cmp	r3, #64	; 0x40
 8005b4c:	d005      	beq.n	8005b5a <DMA_SetConfig+0x22>
		hdma->Instance->M0AR = SrcAddress;
	}
	/* Peripheral to Memory */
	else{
		/* Configure DMA Stream source address */
		hdma->Instance->PAR = SrcAddress;
 8005b4e:	6803      	ldr	r3, [r0, #0]
 8005b50:	6099      	str	r1, [r3, #8]

		/* Configure DMA Stream destination address */
		hdma->Instance->M0AR = DstAddress;
 8005b52:	6803      	ldr	r3, [r0, #0]
 8005b54:	60da      	str	r2, [r3, #12]
	}
}
 8005b56:	bc30      	pop	{r4, r5}
 8005b58:	4770      	bx	lr
		hdma->Instance->PAR = DstAddress;
 8005b5a:	6803      	ldr	r3, [r0, #0]
 8005b5c:	609a      	str	r2, [r3, #8]
		hdma->Instance->M0AR = SrcAddress;
 8005b5e:	6803      	ldr	r3, [r0, #0]
 8005b60:	60d9      	str	r1, [r3, #12]
 8005b62:	e7f8      	b.n	8005b56 <DMA_SetConfig+0x1e>

08005b64 <DMA_CalcBaseAndBitshift>:
 *                     the configuration information for the specified DMA Stream.
 * @retval Stream base address
 */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
	uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005b64:	6802      	ldr	r2, [r0, #0]
 8005b66:	b2d3      	uxtb	r3, r2
 8005b68:	3b10      	subs	r3, #16
 8005b6a:	490b      	ldr	r1, [pc, #44]	; (8005b98 <DMA_CalcBaseAndBitshift+0x34>)
 8005b6c:	fba1 1303 	umull	r1, r3, r1, r3
 8005b70:	091b      	lsrs	r3, r3, #4

	/* lookup table for necessary bitshift of flags within status registers */
	static const uint8_t flagBitshiftOffset[8U] = { 0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U };
	hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005b72:	490a      	ldr	r1, [pc, #40]	; (8005b9c <DMA_CalcBaseAndBitshift+0x38>)
 8005b74:	5cc9      	ldrb	r1, [r1, r3]
 8005b76:	65c1      	str	r1, [r0, #92]	; 0x5c

	if (stream_number > 3U) {
 8005b78:	2b03      	cmp	r3, #3
 8005b7a:	d806      	bhi.n	8005b8a <DMA_CalcBaseAndBitshift+0x26>
		/* return pointer to HISR and HIFCR */
		hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
	}else  {
		/* return pointer to LISR and LIFCR */
		hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005b7c:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8005b80:	f022 0203 	bic.w	r2, r2, #3
 8005b84:	6582      	str	r2, [r0, #88]	; 0x58
	}

	return hdma->StreamBaseAddress;
}
 8005b86:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8005b88:	4770      	bx	lr
		hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005b8a:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8005b8e:	f022 0203 	bic.w	r2, r2, #3
 8005b92:	3204      	adds	r2, #4
 8005b94:	6582      	str	r2, [r0, #88]	; 0x58
 8005b96:	e7f6      	b.n	8005b86 <DMA_CalcBaseAndBitshift+0x22>
 8005b98:	aaaaaaab 	.word	0xaaaaaaab
 8005b9c:	0801e168 	.word	0x0801e168

08005ba0 <DMA_CheckFifoParam>:
 * @retval HAL status
 */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
	HAL_StatusTypeDef status = HAL_OK;
	uint32_t tmp = hdma->Init.FIFOThreshold;
 8005ba0:	6a83      	ldr	r3, [r0, #40]	; 0x28

	/* Memory Data size equal to Byte */
	if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE) {
 8005ba2:	6982      	ldr	r2, [r0, #24]
 8005ba4:	b992      	cbnz	r2, 8005bcc <DMA_CheckFifoParam+0x2c>
		switch (tmp) {
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d00a      	beq.n	8005bc0 <DMA_CheckFifoParam+0x20>
 8005baa:	b11b      	cbz	r3, 8005bb4 <DMA_CheckFifoParam+0x14>
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d001      	beq.n	8005bb4 <DMA_CheckFifoParam+0x14>
	HAL_StatusTypeDef status = HAL_OK;
 8005bb0:	2000      	movs	r0, #0
 8005bb2:	4770      	bx	lr
		case DMA_FIFO_THRESHOLD_1QUARTERFULL:
		case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
			if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1) {
 8005bb4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005bb6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005bba:	d12c      	bne.n	8005c16 <DMA_CheckFifoParam+0x76>
	HAL_StatusTypeDef status = HAL_OK;
 8005bbc:	2000      	movs	r0, #0
 8005bbe:	4770      	bx	lr
				status = HAL_ERROR;
			}
			break;
		case DMA_FIFO_THRESHOLD_HALFFULL:
			if (hdma->Init.MemBurst == DMA_MBURST_INC16) {
 8005bc0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005bc2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005bc6:	d028      	beq.n	8005c1a <DMA_CheckFifoParam+0x7a>
	HAL_StatusTypeDef status = HAL_OK;
 8005bc8:	2000      	movs	r0, #0
 8005bca:	4770      	bx	lr
		default:
			break;
		}
	}
	/* Memory Data size equal to Half-Word */
	else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD) {
 8005bcc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8005bd0:	d005      	beq.n	8005bde <DMA_CheckFifoParam+0x3e>
			break;
		}
	}
	/* Memory Data size equal to Word */
	else{
		switch (tmp) {
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d929      	bls.n	8005c2a <DMA_CheckFifoParam+0x8a>
 8005bd6:	2b03      	cmp	r3, #3
 8005bd8:	d015      	beq.n	8005c06 <DMA_CheckFifoParam+0x66>
	HAL_StatusTypeDef status = HAL_OK;
 8005bda:	2000      	movs	r0, #0
 8005bdc:	4770      	bx	lr
		switch (tmp) {
 8005bde:	2b03      	cmp	r3, #3
 8005be0:	d803      	bhi.n	8005bea <DMA_CheckFifoParam+0x4a>
 8005be2:	e8df f003 	tbb	[pc, r3]
 8005be6:	041c      	.short	0x041c
 8005be8:	0a1c      	.short	0x0a1c
	HAL_StatusTypeDef status = HAL_OK;
 8005bea:	2000      	movs	r0, #0
 8005bec:	4770      	bx	lr
			if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1) {
 8005bee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005bf0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005bf4:	d115      	bne.n	8005c22 <DMA_CheckFifoParam+0x82>
	HAL_StatusTypeDef status = HAL_OK;
 8005bf6:	2000      	movs	r0, #0
 8005bf8:	4770      	bx	lr
			if (hdma->Init.MemBurst == DMA_MBURST_INC16) {
 8005bfa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005bfc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005c00:	d011      	beq.n	8005c26 <DMA_CheckFifoParam+0x86>
	HAL_StatusTypeDef status = HAL_OK;
 8005c02:	2000      	movs	r0, #0
 8005c04:	4770      	bx	lr
		case DMA_FIFO_THRESHOLD_HALFFULL:
		case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
			status = HAL_ERROR;
			break;
		case DMA_FIFO_THRESHOLD_FULL:
			if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1) {
 8005c06:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005c08:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005c0c:	d001      	beq.n	8005c12 <DMA_CheckFifoParam+0x72>
				status = HAL_ERROR;
 8005c0e:	2001      	movs	r0, #1
			break;
		}
	}

	return status;
}
 8005c10:	4770      	bx	lr
	HAL_StatusTypeDef status = HAL_OK;
 8005c12:	2000      	movs	r0, #0
 8005c14:	4770      	bx	lr
				status = HAL_ERROR;
 8005c16:	2001      	movs	r0, #1
 8005c18:	4770      	bx	lr
				status = HAL_ERROR;
 8005c1a:	2001      	movs	r0, #1
 8005c1c:	4770      	bx	lr
			status = HAL_ERROR;
 8005c1e:	2001      	movs	r0, #1
 8005c20:	4770      	bx	lr
				status = HAL_ERROR;
 8005c22:	2001      	movs	r0, #1
 8005c24:	4770      	bx	lr
				status = HAL_ERROR;
 8005c26:	2001      	movs	r0, #1
 8005c28:	4770      	bx	lr
			status = HAL_ERROR;
 8005c2a:	2001      	movs	r0, #1
 8005c2c:	4770      	bx	lr
	...

08005c30 <HAL_DMA_Init>:
{
 8005c30:	b570      	push	{r4, r5, r6, lr}
 8005c32:	4604      	mov	r4, r0
	uint32_t tickstart = HAL_GetTick();
 8005c34:	f7ff fb6c 	bl	8005310 <HAL_GetTick>
	if (hdma == NULL) {
 8005c38:	2c00      	cmp	r4, #0
 8005c3a:	f000 8131 	beq.w	8005ea0 <HAL_DMA_Init+0x270>
 8005c3e:	4605      	mov	r5, r0
	assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8005c40:	6823      	ldr	r3, [r4, #0]
 8005c42:	4a98      	ldr	r2, [pc, #608]	; (8005ea4 <HAL_DMA_Init+0x274>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d031      	beq.n	8005cac <HAL_DMA_Init+0x7c>
 8005c48:	3218      	adds	r2, #24
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d02e      	beq.n	8005cac <HAL_DMA_Init+0x7c>
 8005c4e:	3218      	adds	r2, #24
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d02b      	beq.n	8005cac <HAL_DMA_Init+0x7c>
 8005c54:	3218      	adds	r2, #24
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d028      	beq.n	8005cac <HAL_DMA_Init+0x7c>
 8005c5a:	3218      	adds	r2, #24
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d025      	beq.n	8005cac <HAL_DMA_Init+0x7c>
 8005c60:	3218      	adds	r2, #24
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d022      	beq.n	8005cac <HAL_DMA_Init+0x7c>
 8005c66:	3218      	adds	r2, #24
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d01f      	beq.n	8005cac <HAL_DMA_Init+0x7c>
 8005c6c:	3218      	adds	r2, #24
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d01c      	beq.n	8005cac <HAL_DMA_Init+0x7c>
 8005c72:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d018      	beq.n	8005cac <HAL_DMA_Init+0x7c>
 8005c7a:	3218      	adds	r2, #24
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d015      	beq.n	8005cac <HAL_DMA_Init+0x7c>
 8005c80:	3218      	adds	r2, #24
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d012      	beq.n	8005cac <HAL_DMA_Init+0x7c>
 8005c86:	3218      	adds	r2, #24
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d00f      	beq.n	8005cac <HAL_DMA_Init+0x7c>
 8005c8c:	3218      	adds	r2, #24
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d00c      	beq.n	8005cac <HAL_DMA_Init+0x7c>
 8005c92:	3218      	adds	r2, #24
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d009      	beq.n	8005cac <HAL_DMA_Init+0x7c>
 8005c98:	3218      	adds	r2, #24
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d006      	beq.n	8005cac <HAL_DMA_Init+0x7c>
 8005c9e:	3218      	adds	r2, #24
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d003      	beq.n	8005cac <HAL_DMA_Init+0x7c>
 8005ca4:	21c6      	movs	r1, #198	; 0xc6
 8005ca6:	4880      	ldr	r0, [pc, #512]	; (8005ea8 <HAL_DMA_Init+0x278>)
 8005ca8:	f006 fb40 	bl	800c32c <assert_failed>
	assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8005cac:	6863      	ldr	r3, [r4, #4]
 8005cae:	b1c3      	cbz	r3, 8005ce2 <HAL_DMA_Init+0xb2>
 8005cb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005cb4:	d015      	beq.n	8005ce2 <HAL_DMA_Init+0xb2>
 8005cb6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005cba:	d012      	beq.n	8005ce2 <HAL_DMA_Init+0xb2>
 8005cbc:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8005cc0:	d00f      	beq.n	8005ce2 <HAL_DMA_Init+0xb2>
 8005cc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cc6:	d00c      	beq.n	8005ce2 <HAL_DMA_Init+0xb2>
 8005cc8:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8005ccc:	d009      	beq.n	8005ce2 <HAL_DMA_Init+0xb2>
 8005cce:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005cd2:	d006      	beq.n	8005ce2 <HAL_DMA_Init+0xb2>
 8005cd4:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8005cd8:	d003      	beq.n	8005ce2 <HAL_DMA_Init+0xb2>
 8005cda:	21c7      	movs	r1, #199	; 0xc7
 8005cdc:	4872      	ldr	r0, [pc, #456]	; (8005ea8 <HAL_DMA_Init+0x278>)
 8005cde:	f006 fb25 	bl	800c32c <assert_failed>
	assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8005ce2:	68a3      	ldr	r3, [r4, #8]
 8005ce4:	b13b      	cbz	r3, 8005cf6 <HAL_DMA_Init+0xc6>
 8005ce6:	2b40      	cmp	r3, #64	; 0x40
 8005ce8:	d005      	beq.n	8005cf6 <HAL_DMA_Init+0xc6>
 8005cea:	2b80      	cmp	r3, #128	; 0x80
 8005cec:	d003      	beq.n	8005cf6 <HAL_DMA_Init+0xc6>
 8005cee:	21c8      	movs	r1, #200	; 0xc8
 8005cf0:	486d      	ldr	r0, [pc, #436]	; (8005ea8 <HAL_DMA_Init+0x278>)
 8005cf2:	f006 fb1b 	bl	800c32c <assert_failed>
	assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8005cf6:	68e3      	ldr	r3, [r4, #12]
 8005cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cfc:	d001      	beq.n	8005d02 <HAL_DMA_Init+0xd2>
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d17d      	bne.n	8005dfe <HAL_DMA_Init+0x1ce>
	assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8005d02:	6923      	ldr	r3, [r4, #16]
 8005d04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d08:	d001      	beq.n	8005d0e <HAL_DMA_Init+0xde>
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d17c      	bne.n	8005e08 <HAL_DMA_Init+0x1d8>
	assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8005d0e:	6963      	ldr	r3, [r4, #20]
 8005d10:	b14b      	cbz	r3, 8005d26 <HAL_DMA_Init+0xf6>
 8005d12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d16:	d006      	beq.n	8005d26 <HAL_DMA_Init+0xf6>
 8005d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d1c:	d003      	beq.n	8005d26 <HAL_DMA_Init+0xf6>
 8005d1e:	21cb      	movs	r1, #203	; 0xcb
 8005d20:	4861      	ldr	r0, [pc, #388]	; (8005ea8 <HAL_DMA_Init+0x278>)
 8005d22:	f006 fb03 	bl	800c32c <assert_failed>
	assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8005d26:	69a3      	ldr	r3, [r4, #24]
 8005d28:	b14b      	cbz	r3, 8005d3e <HAL_DMA_Init+0x10e>
 8005d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d2e:	d006      	beq.n	8005d3e <HAL_DMA_Init+0x10e>
 8005d30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d34:	d003      	beq.n	8005d3e <HAL_DMA_Init+0x10e>
 8005d36:	21cc      	movs	r1, #204	; 0xcc
 8005d38:	485b      	ldr	r0, [pc, #364]	; (8005ea8 <HAL_DMA_Init+0x278>)
 8005d3a:	f006 faf7 	bl	800c32c <assert_failed>
	assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8005d3e:	69e3      	ldr	r3, [r4, #28]
 8005d40:	b143      	cbz	r3, 8005d54 <HAL_DMA_Init+0x124>
 8005d42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d46:	d005      	beq.n	8005d54 <HAL_DMA_Init+0x124>
 8005d48:	2b20      	cmp	r3, #32
 8005d4a:	d003      	beq.n	8005d54 <HAL_DMA_Init+0x124>
 8005d4c:	21cd      	movs	r1, #205	; 0xcd
 8005d4e:	4856      	ldr	r0, [pc, #344]	; (8005ea8 <HAL_DMA_Init+0x278>)
 8005d50:	f006 faec 	bl	800c32c <assert_failed>
	assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8005d54:	6a23      	ldr	r3, [r4, #32]
 8005d56:	b163      	cbz	r3, 8005d72 <HAL_DMA_Init+0x142>
 8005d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d5c:	d009      	beq.n	8005d72 <HAL_DMA_Init+0x142>
 8005d5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d62:	d006      	beq.n	8005d72 <HAL_DMA_Init+0x142>
 8005d64:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d68:	d003      	beq.n	8005d72 <HAL_DMA_Init+0x142>
 8005d6a:	21ce      	movs	r1, #206	; 0xce
 8005d6c:	484e      	ldr	r0, [pc, #312]	; (8005ea8 <HAL_DMA_Init+0x278>)
 8005d6e:	f006 fadd 	bl	800c32c <assert_failed>
	assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8005d72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d74:	b12b      	cbz	r3, 8005d82 <HAL_DMA_Init+0x152>
 8005d76:	2b04      	cmp	r3, #4
 8005d78:	d003      	beq.n	8005d82 <HAL_DMA_Init+0x152>
 8005d7a:	21cf      	movs	r1, #207	; 0xcf
 8005d7c:	484a      	ldr	r0, [pc, #296]	; (8005ea8 <HAL_DMA_Init+0x278>)
 8005d7e:	f006 fad5 	bl	800c32c <assert_failed>
	if (hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE) {
 8005d82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d84:	b303      	cbz	r3, 8005dc8 <HAL_DMA_Init+0x198>
		assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8005d86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005d88:	2b03      	cmp	r3, #3
 8005d8a:	d842      	bhi.n	8005e12 <HAL_DMA_Init+0x1e2>
		assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8005d8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005d8e:	b163      	cbz	r3, 8005daa <HAL_DMA_Init+0x17a>
 8005d90:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d94:	d009      	beq.n	8005daa <HAL_DMA_Init+0x17a>
 8005d96:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d9a:	d006      	beq.n	8005daa <HAL_DMA_Init+0x17a>
 8005d9c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005da0:	d003      	beq.n	8005daa <HAL_DMA_Init+0x17a>
 8005da2:	21d4      	movs	r1, #212	; 0xd4
 8005da4:	4840      	ldr	r0, [pc, #256]	; (8005ea8 <HAL_DMA_Init+0x278>)
 8005da6:	f006 fac1 	bl	800c32c <assert_failed>
		assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8005daa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005dac:	b163      	cbz	r3, 8005dc8 <HAL_DMA_Init+0x198>
 8005dae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005db2:	d009      	beq.n	8005dc8 <HAL_DMA_Init+0x198>
 8005db4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005db8:	d006      	beq.n	8005dc8 <HAL_DMA_Init+0x198>
 8005dba:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005dbe:	d003      	beq.n	8005dc8 <HAL_DMA_Init+0x198>
 8005dc0:	21d5      	movs	r1, #213	; 0xd5
 8005dc2:	4839      	ldr	r0, [pc, #228]	; (8005ea8 <HAL_DMA_Init+0x278>)
 8005dc4:	f006 fab2 	bl	800c32c <assert_failed>
	__HAL_UNLOCK(hdma);
 8005dc8:	2300      	movs	r3, #0
 8005dca:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	hdma->State = HAL_DMA_STATE_BUSY;
 8005dce:	2302      	movs	r3, #2
 8005dd0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	__HAL_DMA_DISABLE(hdma);
 8005dd4:	6822      	ldr	r2, [r4, #0]
 8005dd6:	6813      	ldr	r3, [r2, #0]
 8005dd8:	f023 0301 	bic.w	r3, r3, #1
 8005ddc:	6013      	str	r3, [r2, #0]
	while ((hdma->Instance->CR & DMA_SxCR_EN) != RESET) {
 8005dde:	6823      	ldr	r3, [r4, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	f012 0f01 	tst.w	r2, #1
 8005de6:	d019      	beq.n	8005e1c <HAL_DMA_Init+0x1ec>
		if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT) {
 8005de8:	f7ff fa92 	bl	8005310 <HAL_GetTick>
 8005dec:	1b40      	subs	r0, r0, r5
 8005dee:	2805      	cmp	r0, #5
 8005df0:	d9f5      	bls.n	8005dde <HAL_DMA_Init+0x1ae>
			hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005df2:	2320      	movs	r3, #32
 8005df4:	6563      	str	r3, [r4, #84]	; 0x54
			hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005df6:	2003      	movs	r0, #3
 8005df8:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
			return HAL_TIMEOUT;
 8005dfc:	bd70      	pop	{r4, r5, r6, pc}
	assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8005dfe:	21c9      	movs	r1, #201	; 0xc9
 8005e00:	4829      	ldr	r0, [pc, #164]	; (8005ea8 <HAL_DMA_Init+0x278>)
 8005e02:	f006 fa93 	bl	800c32c <assert_failed>
 8005e06:	e77c      	b.n	8005d02 <HAL_DMA_Init+0xd2>
	assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8005e08:	21ca      	movs	r1, #202	; 0xca
 8005e0a:	4827      	ldr	r0, [pc, #156]	; (8005ea8 <HAL_DMA_Init+0x278>)
 8005e0c:	f006 fa8e 	bl	800c32c <assert_failed>
 8005e10:	e77d      	b.n	8005d0e <HAL_DMA_Init+0xde>
		assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8005e12:	21d3      	movs	r1, #211	; 0xd3
 8005e14:	4824      	ldr	r0, [pc, #144]	; (8005ea8 <HAL_DMA_Init+0x278>)
 8005e16:	f006 fa89 	bl	800c32c <assert_failed>
 8005e1a:	e7b7      	b.n	8005d8c <HAL_DMA_Init+0x15c>
	tmp = hdma->Instance->CR;
 8005e1c:	681a      	ldr	r2, [r3, #0]
	tmp &= ((uint32_t) ~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005e1e:	4923      	ldr	r1, [pc, #140]	; (8005eac <HAL_DMA_Init+0x27c>)
 8005e20:	4011      	ands	r1, r2
	tmp |= hdma->Init.Channel | hdma->Init.Direction |
 8005e22:	6862      	ldr	r2, [r4, #4]
 8005e24:	68a0      	ldr	r0, [r4, #8]
 8005e26:	4302      	orrs	r2, r0
	       hdma->Init.PeriphInc | hdma->Init.MemInc |
 8005e28:	68e0      	ldr	r0, [r4, #12]
	tmp |= hdma->Init.Channel | hdma->Init.Direction |
 8005e2a:	4302      	orrs	r2, r0
	       hdma->Init.PeriphInc | hdma->Init.MemInc |
 8005e2c:	6920      	ldr	r0, [r4, #16]
 8005e2e:	4302      	orrs	r2, r0
	       hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e30:	6960      	ldr	r0, [r4, #20]
	       hdma->Init.PeriphInc | hdma->Init.MemInc |
 8005e32:	4302      	orrs	r2, r0
	       hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e34:	69a0      	ldr	r0, [r4, #24]
 8005e36:	4302      	orrs	r2, r0
	       hdma->Init.Mode | hdma->Init.Priority;
 8005e38:	69e0      	ldr	r0, [r4, #28]
	       hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e3a:	4302      	orrs	r2, r0
	       hdma->Init.Mode | hdma->Init.Priority;
 8005e3c:	6a20      	ldr	r0, [r4, #32]
 8005e3e:	4302      	orrs	r2, r0
	tmp |= hdma->Init.Channel | hdma->Init.Direction |
 8005e40:	430a      	orrs	r2, r1
	if (hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE) {
 8005e42:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005e44:	2904      	cmp	r1, #4
 8005e46:	d016      	beq.n	8005e76 <HAL_DMA_Init+0x246>
	hdma->Instance->CR = tmp;
 8005e48:	601a      	str	r2, [r3, #0]
	tmp = hdma->Instance->FCR;
 8005e4a:	6826      	ldr	r6, [r4, #0]
 8005e4c:	6975      	ldr	r5, [r6, #20]
	tmp &= (uint32_t) ~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005e4e:	f025 0507 	bic.w	r5, r5, #7
	tmp |= hdma->Init.FIFOMode;
 8005e52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e54:	431d      	orrs	r5, r3
	if (hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE) {
 8005e56:	2b04      	cmp	r3, #4
 8005e58:	d012      	beq.n	8005e80 <HAL_DMA_Init+0x250>
	hdma->Instance->FCR = tmp;
 8005e5a:	6175      	str	r5, [r6, #20]
	regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005e5c:	4620      	mov	r0, r4
 8005e5e:	f7ff fe81 	bl	8005b64 <DMA_CalcBaseAndBitshift>
	regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e62:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005e64:	233f      	movs	r3, #63	; 0x3f
 8005e66:	4093      	lsls	r3, r2
 8005e68:	6083      	str	r3, [r0, #8]
	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e6a:	2000      	movs	r0, #0
 8005e6c:	6560      	str	r0, [r4, #84]	; 0x54
	hdma->State = HAL_DMA_STATE_READY;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	return HAL_OK;
 8005e74:	bd70      	pop	{r4, r5, r6, pc}
		tmp |= hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005e76:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005e78:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005e7a:	4301      	orrs	r1, r0
 8005e7c:	430a      	orrs	r2, r1
 8005e7e:	e7e3      	b.n	8005e48 <HAL_DMA_Init+0x218>
		tmp |= hdma->Init.FIFOThreshold;
 8005e80:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005e82:	431d      	orrs	r5, r3
		if (hdma->Init.MemBurst != DMA_MBURST_SINGLE) {
 8005e84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d0e7      	beq.n	8005e5a <HAL_DMA_Init+0x22a>
			if (DMA_CheckFifoParam(hdma) != HAL_OK) {
 8005e8a:	4620      	mov	r0, r4
 8005e8c:	f7ff fe88 	bl	8005ba0 <DMA_CheckFifoParam>
 8005e90:	2800      	cmp	r0, #0
 8005e92:	d0e2      	beq.n	8005e5a <HAL_DMA_Init+0x22a>
				hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005e94:	2340      	movs	r3, #64	; 0x40
 8005e96:	6563      	str	r3, [r4, #84]	; 0x54
				hdma->State = HAL_DMA_STATE_READY;
 8005e98:	2001      	movs	r0, #1
 8005e9a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
				return HAL_ERROR;
 8005e9e:	bd70      	pop	{r4, r5, r6, pc}
		return HAL_ERROR;
 8005ea0:	2001      	movs	r0, #1
}
 8005ea2:	bd70      	pop	{r4, r5, r6, pc}
 8005ea4:	40026010 	.word	0x40026010
 8005ea8:	0801e130 	.word	0x0801e130
 8005eac:	f010803f 	.word	0xf010803f

08005eb0 <HAL_DMA_DeInit>:
	if (hdma == NULL) {
 8005eb0:	2800      	cmp	r0, #0
 8005eb2:	d05e      	beq.n	8005f72 <HAL_DMA_DeInit+0xc2>
{
 8005eb4:	b538      	push	{r3, r4, r5, lr}
 8005eb6:	4604      	mov	r4, r0
	if (hdma->State == HAL_DMA_STATE_BUSY) {
 8005eb8:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d059      	beq.n	8005f76 <HAL_DMA_DeInit+0xc6>
	assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8005ec2:	6803      	ldr	r3, [r0, #0]
 8005ec4:	4a2d      	ldr	r2, [pc, #180]	; (8005f7c <HAL_DMA_DeInit+0xcc>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d032      	beq.n	8005f30 <HAL_DMA_DeInit+0x80>
 8005eca:	3218      	adds	r2, #24
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d02f      	beq.n	8005f30 <HAL_DMA_DeInit+0x80>
 8005ed0:	3218      	adds	r2, #24
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d02c      	beq.n	8005f30 <HAL_DMA_DeInit+0x80>
 8005ed6:	3218      	adds	r2, #24
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d029      	beq.n	8005f30 <HAL_DMA_DeInit+0x80>
 8005edc:	3218      	adds	r2, #24
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d026      	beq.n	8005f30 <HAL_DMA_DeInit+0x80>
 8005ee2:	3218      	adds	r2, #24
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d023      	beq.n	8005f30 <HAL_DMA_DeInit+0x80>
 8005ee8:	3218      	adds	r2, #24
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d020      	beq.n	8005f30 <HAL_DMA_DeInit+0x80>
 8005eee:	3218      	adds	r2, #24
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d01d      	beq.n	8005f30 <HAL_DMA_DeInit+0x80>
 8005ef4:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d019      	beq.n	8005f30 <HAL_DMA_DeInit+0x80>
 8005efc:	3218      	adds	r2, #24
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d016      	beq.n	8005f30 <HAL_DMA_DeInit+0x80>
 8005f02:	3218      	adds	r2, #24
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d013      	beq.n	8005f30 <HAL_DMA_DeInit+0x80>
 8005f08:	3218      	adds	r2, #24
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d010      	beq.n	8005f30 <HAL_DMA_DeInit+0x80>
 8005f0e:	3218      	adds	r2, #24
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d00d      	beq.n	8005f30 <HAL_DMA_DeInit+0x80>
 8005f14:	3218      	adds	r2, #24
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d00a      	beq.n	8005f30 <HAL_DMA_DeInit+0x80>
 8005f1a:	3218      	adds	r2, #24
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d007      	beq.n	8005f30 <HAL_DMA_DeInit+0x80>
 8005f20:	3218      	adds	r2, #24
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d004      	beq.n	8005f30 <HAL_DMA_DeInit+0x80>
 8005f26:	f240 114d 	movw	r1, #333	; 0x14d
 8005f2a:	4815      	ldr	r0, [pc, #84]	; (8005f80 <HAL_DMA_DeInit+0xd0>)
 8005f2c:	f006 f9fe 	bl	800c32c <assert_failed>
	__HAL_DMA_DISABLE(hdma);
 8005f30:	6822      	ldr	r2, [r4, #0]
 8005f32:	6813      	ldr	r3, [r2, #0]
 8005f34:	f023 0301 	bic.w	r3, r3, #1
 8005f38:	6013      	str	r3, [r2, #0]
	hdma->Instance->CR = 0U;
 8005f3a:	6823      	ldr	r3, [r4, #0]
 8005f3c:	2500      	movs	r5, #0
 8005f3e:	601d      	str	r5, [r3, #0]
	hdma->Instance->NDTR = 0U;
 8005f40:	6823      	ldr	r3, [r4, #0]
 8005f42:	605d      	str	r5, [r3, #4]
	hdma->Instance->PAR = 0U;
 8005f44:	6823      	ldr	r3, [r4, #0]
 8005f46:	609d      	str	r5, [r3, #8]
	hdma->Instance->M0AR = 0U;
 8005f48:	6823      	ldr	r3, [r4, #0]
 8005f4a:	60dd      	str	r5, [r3, #12]
	hdma->Instance->M1AR = 0U;
 8005f4c:	6823      	ldr	r3, [r4, #0]
 8005f4e:	611d      	str	r5, [r3, #16]
	hdma->Instance->FCR = 0x00000021U;
 8005f50:	6823      	ldr	r3, [r4, #0]
 8005f52:	2221      	movs	r2, #33	; 0x21
 8005f54:	615a      	str	r2, [r3, #20]
	regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005f56:	4620      	mov	r0, r4
 8005f58:	f7ff fe04 	bl	8005b64 <DMA_CalcBaseAndBitshift>
	regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f5c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005f5e:	233f      	movs	r3, #63	; 0x3f
 8005f60:	4093      	lsls	r3, r2
 8005f62:	6083      	str	r3, [r0, #8]
	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f64:	6565      	str	r5, [r4, #84]	; 0x54
	hdma->State = HAL_DMA_STATE_RESET;
 8005f66:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
	__HAL_UNLOCK(hdma);
 8005f6a:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
	return HAL_OK;
 8005f6e:	4628      	mov	r0, r5
 8005f70:	bd38      	pop	{r3, r4, r5, pc}
		return HAL_ERROR;
 8005f72:	2001      	movs	r0, #1
 8005f74:	4770      	bx	lr
		return HAL_BUSY;
 8005f76:	2002      	movs	r0, #2
}
 8005f78:	bd38      	pop	{r3, r4, r5, pc}
 8005f7a:	bf00      	nop
 8005f7c:	40026010 	.word	0x40026010
 8005f80:	0801e130 	.word	0x0801e130

08005f84 <HAL_DMA_Start_IT>:
{
 8005f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f88:	4604      	mov	r4, r0
 8005f8a:	460f      	mov	r7, r1
 8005f8c:	4690      	mov	r8, r2
 8005f8e:	461d      	mov	r5, r3
	DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f90:	6d86      	ldr	r6, [r0, #88]	; 0x58
	assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8005f92:	1e5a      	subs	r2, r3, #1
 8005f94:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d811      	bhi.n	8005fc0 <HAL_DMA_Start_IT+0x3c>
	__HAL_LOCK(hdma);
 8005f9c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d03b      	beq.n	800601c <HAL_DMA_Start_IT+0x98>
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	if (HAL_DMA_STATE_READY == hdma->State) {
 8005faa:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d00b      	beq.n	8005fcc <HAL_DMA_Start_IT+0x48>
		__HAL_UNLOCK(hdma);
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		status = HAL_BUSY;
 8005fba:	2002      	movs	r0, #2
 8005fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8005fc0:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8005fc4:	4817      	ldr	r0, [pc, #92]	; (8006024 <HAL_DMA_Start_IT+0xa0>)
 8005fc6:	f006 f9b1 	bl	800c32c <assert_failed>
 8005fca:	e7e7      	b.n	8005f9c <HAL_DMA_Start_IT+0x18>
		hdma->State = HAL_DMA_STATE_BUSY;
 8005fcc:	2302      	movs	r3, #2
 8005fce:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
		hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	6563      	str	r3, [r4, #84]	; 0x54
		DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005fd6:	462b      	mov	r3, r5
 8005fd8:	4642      	mov	r2, r8
 8005fda:	4639      	mov	r1, r7
 8005fdc:	4620      	mov	r0, r4
 8005fde:	f7ff fdab 	bl	8005b38 <DMA_SetConfig>
		regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005fe2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005fe4:	233f      	movs	r3, #63	; 0x3f
 8005fe6:	4093      	lsls	r3, r2
 8005fe8:	60b3      	str	r3, [r6, #8]
		hdma->Instance->CR |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005fea:	6822      	ldr	r2, [r4, #0]
 8005fec:	6813      	ldr	r3, [r2, #0]
 8005fee:	f043 0316 	orr.w	r3, r3, #22
 8005ff2:	6013      	str	r3, [r2, #0]
		hdma->Instance->FCR |= DMA_IT_FE;
 8005ff4:	6822      	ldr	r2, [r4, #0]
 8005ff6:	6953      	ldr	r3, [r2, #20]
 8005ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ffc:	6153      	str	r3, [r2, #20]
		if (hdma->XferHalfCpltCallback != NULL) {
 8005ffe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006000:	b123      	cbz	r3, 800600c <HAL_DMA_Start_IT+0x88>
			hdma->Instance->CR |= DMA_IT_HT;
 8006002:	6822      	ldr	r2, [r4, #0]
 8006004:	6813      	ldr	r3, [r2, #0]
 8006006:	f043 0308 	orr.w	r3, r3, #8
 800600a:	6013      	str	r3, [r2, #0]
		__HAL_DMA_ENABLE(hdma);
 800600c:	6822      	ldr	r2, [r4, #0]
 800600e:	6813      	ldr	r3, [r2, #0]
 8006010:	f043 0301 	orr.w	r3, r3, #1
 8006014:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8006016:	2000      	movs	r0, #0
 8006018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__HAL_LOCK(hdma);
 800601c:	2002      	movs	r0, #2
}
 800601e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006022:	bf00      	nop
 8006024:	0801e130 	.word	0x0801e130

08006028 <HAL_DMA_Abort_IT>:
	if (hdma->State != HAL_DMA_STATE_BUSY) {
 8006028:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b02      	cmp	r3, #2
 8006030:	d003      	beq.n	800603a <HAL_DMA_Abort_IT+0x12>
		hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006032:	2380      	movs	r3, #128	; 0x80
 8006034:	6543      	str	r3, [r0, #84]	; 0x54
		return HAL_ERROR;
 8006036:	2001      	movs	r0, #1
 8006038:	4770      	bx	lr
		hdma->State = HAL_DMA_STATE_ABORT;
 800603a:	2305      	movs	r3, #5
 800603c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
		__HAL_DMA_DISABLE(hdma);
 8006040:	6802      	ldr	r2, [r0, #0]
 8006042:	6813      	ldr	r3, [r2, #0]
 8006044:	f023 0301 	bic.w	r3, r3, #1
 8006048:	6013      	str	r3, [r2, #0]
	return HAL_OK;
 800604a:	2000      	movs	r0, #0
}
 800604c:	4770      	bx	lr
	...

08006050 <HAL_DMA_IRQHandler>:
{
 8006050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006052:	b083      	sub	sp, #12
 8006054:	4604      	mov	r4, r0
	__IO uint32_t count = 0U;
 8006056:	2300      	movs	r3, #0
 8006058:	9301      	str	r3, [sp, #4]
	uint32_t timeout = SystemCoreClock / 9600U;
 800605a:	4b72      	ldr	r3, [pc, #456]	; (8006224 <HAL_DMA_IRQHandler+0x1d4>)
 800605c:	681d      	ldr	r5, [r3, #0]
 800605e:	4b72      	ldr	r3, [pc, #456]	; (8006228 <HAL_DMA_IRQHandler+0x1d8>)
 8006060:	fba3 3505 	umull	r3, r5, r3, r5
 8006064:	0aad      	lsrs	r5, r5, #10
	DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006066:	6d87      	ldr	r7, [r0, #88]	; 0x58
	tmpisr = regs->ISR;
 8006068:	683e      	ldr	r6, [r7, #0]
	if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET) {
 800606a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800606c:	2308      	movs	r3, #8
 800606e:	4093      	lsls	r3, r2
 8006070:	421e      	tst	r6, r3
 8006072:	d010      	beq.n	8006096 <HAL_DMA_IRQHandler+0x46>
		if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET) {
 8006074:	6803      	ldr	r3, [r0, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	f012 0f04 	tst.w	r2, #4
 800607c:	d00b      	beq.n	8006096 <HAL_DMA_IRQHandler+0x46>
			hdma->Instance->CR &= ~(DMA_IT_TE);
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	f022 0204 	bic.w	r2, r2, #4
 8006084:	601a      	str	r2, [r3, #0]
			regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006086:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8006088:	2308      	movs	r3, #8
 800608a:	4093      	lsls	r3, r2
 800608c:	60bb      	str	r3, [r7, #8]
			hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800608e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8006090:	f043 0301 	orr.w	r3, r3, #1
 8006094:	6543      	str	r3, [r0, #84]	; 0x54
	if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET) {
 8006096:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006098:	2301      	movs	r3, #1
 800609a:	4093      	lsls	r3, r2
 800609c:	421e      	tst	r6, r3
 800609e:	d009      	beq.n	80060b4 <HAL_DMA_IRQHandler+0x64>
		if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET) {
 80060a0:	6822      	ldr	r2, [r4, #0]
 80060a2:	6952      	ldr	r2, [r2, #20]
 80060a4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80060a8:	d004      	beq.n	80060b4 <HAL_DMA_IRQHandler+0x64>
			regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80060aa:	60bb      	str	r3, [r7, #8]
			hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80060ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80060ae:	f043 0302 	orr.w	r3, r3, #2
 80060b2:	6563      	str	r3, [r4, #84]	; 0x54
	if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET) {
 80060b4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80060b6:	2304      	movs	r3, #4
 80060b8:	4093      	lsls	r3, r2
 80060ba:	421e      	tst	r6, r3
 80060bc:	d009      	beq.n	80060d2 <HAL_DMA_IRQHandler+0x82>
		if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET) {
 80060be:	6822      	ldr	r2, [r4, #0]
 80060c0:	6812      	ldr	r2, [r2, #0]
 80060c2:	f012 0f02 	tst.w	r2, #2
 80060c6:	d004      	beq.n	80060d2 <HAL_DMA_IRQHandler+0x82>
			regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80060c8:	60bb      	str	r3, [r7, #8]
			hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80060ca:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80060cc:	f043 0304 	orr.w	r3, r3, #4
 80060d0:	6563      	str	r3, [r4, #84]	; 0x54
	if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET) {
 80060d2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80060d4:	2310      	movs	r3, #16
 80060d6:	4093      	lsls	r3, r2
 80060d8:	421e      	tst	r6, r3
 80060da:	d024      	beq.n	8006126 <HAL_DMA_IRQHandler+0xd6>
		if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET) {
 80060dc:	6822      	ldr	r2, [r4, #0]
 80060de:	6812      	ldr	r2, [r2, #0]
 80060e0:	f012 0f08 	tst.w	r2, #8
 80060e4:	d01f      	beq.n	8006126 <HAL_DMA_IRQHandler+0xd6>
			regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80060e6:	60bb      	str	r3, [r7, #8]
			if (((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET) {
 80060e8:	6823      	ldr	r3, [r4, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80060f0:	d00d      	beq.n	800610e <HAL_DMA_IRQHandler+0xbe>
				if ((hdma->Instance->CR & DMA_SxCR_CT) == RESET) {
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80060f8:	d104      	bne.n	8006104 <HAL_DMA_IRQHandler+0xb4>
					if (hdma->XferHalfCpltCallback != NULL) {
 80060fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80060fc:	b19b      	cbz	r3, 8006126 <HAL_DMA_IRQHandler+0xd6>
						hdma->XferHalfCpltCallback(hdma);
 80060fe:	4620      	mov	r0, r4
 8006100:	4798      	blx	r3
 8006102:	e010      	b.n	8006126 <HAL_DMA_IRQHandler+0xd6>
					if (hdma->XferM1HalfCpltCallback != NULL) {
 8006104:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006106:	b173      	cbz	r3, 8006126 <HAL_DMA_IRQHandler+0xd6>
						hdma->XferM1HalfCpltCallback(hdma);
 8006108:	4620      	mov	r0, r4
 800610a:	4798      	blx	r3
 800610c:	e00b      	b.n	8006126 <HAL_DMA_IRQHandler+0xd6>
				if ((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET) {
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	f412 7f80 	tst.w	r2, #256	; 0x100
 8006114:	d103      	bne.n	800611e <HAL_DMA_IRQHandler+0xce>
					hdma->Instance->CR &= ~(DMA_IT_HT);
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	f022 0208 	bic.w	r2, r2, #8
 800611c:	601a      	str	r2, [r3, #0]
				if (hdma->XferHalfCpltCallback != NULL) {
 800611e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006120:	b10b      	cbz	r3, 8006126 <HAL_DMA_IRQHandler+0xd6>
					hdma->XferHalfCpltCallback(hdma);
 8006122:	4620      	mov	r0, r4
 8006124:	4798      	blx	r3
	if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET) {
 8006126:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006128:	2320      	movs	r3, #32
 800612a:	4093      	lsls	r3, r2
 800612c:	421e      	tst	r6, r3
 800612e:	d055      	beq.n	80061dc <HAL_DMA_IRQHandler+0x18c>
		if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET) {
 8006130:	6822      	ldr	r2, [r4, #0]
 8006132:	6812      	ldr	r2, [r2, #0]
 8006134:	f012 0f10 	tst.w	r2, #16
 8006138:	d050      	beq.n	80061dc <HAL_DMA_IRQHandler+0x18c>
			regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800613a:	60bb      	str	r3, [r7, #8]
			if (HAL_DMA_STATE_ABORT == hdma->State) {
 800613c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8006140:	b2db      	uxtb	r3, r3
 8006142:	2b05      	cmp	r3, #5
 8006144:	d00e      	beq.n	8006164 <HAL_DMA_IRQHandler+0x114>
			if (((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET) {
 8006146:	6823      	ldr	r3, [r4, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800614e:	d033      	beq.n	80061b8 <HAL_DMA_IRQHandler+0x168>
				if ((hdma->Instance->CR & DMA_SxCR_CT) == RESET) {
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8006156:	d12a      	bne.n	80061ae <HAL_DMA_IRQHandler+0x15e>
					if (hdma->XferM1CpltCallback != NULL) {
 8006158:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800615a:	2b00      	cmp	r3, #0
 800615c:	d03e      	beq.n	80061dc <HAL_DMA_IRQHandler+0x18c>
						hdma->XferM1CpltCallback(hdma);
 800615e:	4620      	mov	r0, r4
 8006160:	4798      	blx	r3
 8006162:	e03b      	b.n	80061dc <HAL_DMA_IRQHandler+0x18c>
				hdma->Instance->CR &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006164:	6822      	ldr	r2, [r4, #0]
 8006166:	6813      	ldr	r3, [r2, #0]
 8006168:	f023 0316 	bic.w	r3, r3, #22
 800616c:	6013      	str	r3, [r2, #0]
				hdma->Instance->FCR &= ~(DMA_IT_FE);
 800616e:	6822      	ldr	r2, [r4, #0]
 8006170:	6953      	ldr	r3, [r2, #20]
 8006172:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006176:	6153      	str	r3, [r2, #20]
				if ((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL)) {
 8006178:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800617a:	b1a3      	cbz	r3, 80061a6 <HAL_DMA_IRQHandler+0x156>
					hdma->Instance->CR &= ~(DMA_IT_HT);
 800617c:	6822      	ldr	r2, [r4, #0]
 800617e:	6813      	ldr	r3, [r2, #0]
 8006180:	f023 0308 	bic.w	r3, r3, #8
 8006184:	6013      	str	r3, [r2, #0]
				regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006186:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006188:	233f      	movs	r3, #63	; 0x3f
 800618a:	4093      	lsls	r3, r2
 800618c:	60bb      	str	r3, [r7, #8]
				__HAL_UNLOCK(hdma);
 800618e:	2300      	movs	r3, #0
 8006190:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
				hdma->State = HAL_DMA_STATE_READY;
 8006194:	2301      	movs	r3, #1
 8006196:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
				if (hdma->XferAbortCallback != NULL) {
 800619a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800619c:	2b00      	cmp	r3, #0
 800619e:	d03f      	beq.n	8006220 <HAL_DMA_IRQHandler+0x1d0>
					hdma->XferAbortCallback(hdma);
 80061a0:	4620      	mov	r0, r4
 80061a2:	4798      	blx	r3
 80061a4:	e03c      	b.n	8006220 <HAL_DMA_IRQHandler+0x1d0>
				if ((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL)) {
 80061a6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d1e7      	bne.n	800617c <HAL_DMA_IRQHandler+0x12c>
 80061ac:	e7eb      	b.n	8006186 <HAL_DMA_IRQHandler+0x136>
					if (hdma->XferCpltCallback != NULL) {
 80061ae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80061b0:	b1a3      	cbz	r3, 80061dc <HAL_DMA_IRQHandler+0x18c>
						hdma->XferCpltCallback(hdma);
 80061b2:	4620      	mov	r0, r4
 80061b4:	4798      	blx	r3
 80061b6:	e011      	b.n	80061dc <HAL_DMA_IRQHandler+0x18c>
				if ((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET) {
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	f412 7f80 	tst.w	r2, #256	; 0x100
 80061be:	d109      	bne.n	80061d4 <HAL_DMA_IRQHandler+0x184>
					hdma->Instance->CR &= ~(DMA_IT_TC);
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	f022 0210 	bic.w	r2, r2, #16
 80061c6:	601a      	str	r2, [r3, #0]
					__HAL_UNLOCK(hdma);
 80061c8:	2300      	movs	r3, #0
 80061ca:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
					hdma->State = HAL_DMA_STATE_READY;
 80061ce:	2301      	movs	r3, #1
 80061d0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
				if (hdma->XferCpltCallback != NULL) {
 80061d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80061d6:	b10b      	cbz	r3, 80061dc <HAL_DMA_IRQHandler+0x18c>
					hdma->XferCpltCallback(hdma);
 80061d8:	4620      	mov	r0, r4
 80061da:	4798      	blx	r3
	if (hdma->ErrorCode != HAL_DMA_ERROR_NONE) {
 80061dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80061de:	b1fb      	cbz	r3, 8006220 <HAL_DMA_IRQHandler+0x1d0>
		if ((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET) {
 80061e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80061e2:	f013 0f01 	tst.w	r3, #1
 80061e6:	d017      	beq.n	8006218 <HAL_DMA_IRQHandler+0x1c8>
			hdma->State = HAL_DMA_STATE_ABORT;
 80061e8:	2305      	movs	r3, #5
 80061ea:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			__HAL_DMA_DISABLE(hdma);
 80061ee:	6822      	ldr	r2, [r4, #0]
 80061f0:	6813      	ldr	r3, [r2, #0]
 80061f2:	f023 0301 	bic.w	r3, r3, #1
 80061f6:	6013      	str	r3, [r2, #0]
				if (++count > timeout) {
 80061f8:	9b01      	ldr	r3, [sp, #4]
 80061fa:	3301      	adds	r3, #1
 80061fc:	9301      	str	r3, [sp, #4]
 80061fe:	429d      	cmp	r5, r3
 8006200:	d304      	bcc.n	800620c <HAL_DMA_IRQHandler+0x1bc>
			} while ((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006202:	6823      	ldr	r3, [r4, #0]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f013 0f01 	tst.w	r3, #1
 800620a:	d1f5      	bne.n	80061f8 <HAL_DMA_IRQHandler+0x1a8>
			__HAL_UNLOCK(hdma);
 800620c:	2300      	movs	r3, #0
 800620e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			hdma->State = HAL_DMA_STATE_READY;
 8006212:	2301      	movs	r3, #1
 8006214:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
		if (hdma->XferErrorCallback != NULL) {
 8006218:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800621a:	b10b      	cbz	r3, 8006220 <HAL_DMA_IRQHandler+0x1d0>
			hdma->XferErrorCallback(hdma);
 800621c:	4620      	mov	r0, r4
 800621e:	4798      	blx	r3
}
 8006220:	b003      	add	sp, #12
 8006222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006224:	20001478 	.word	0x20001478
 8006228:	1b4e81b5 	.word	0x1b4e81b5

0800622c <HAL_GPIO_Init>:
 * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800622c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006230:	b082      	sub	sp, #8
 8006232:	4680      	mov	r8, r0
 8006234:	460f      	mov	r7, r1
	uint32_t ioposition = 0x00U;
	uint32_t iocurrent = 0x00U;
	uint32_t temp = 0x00U;

	/* Check the parameters */
	assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8006236:	4ba4      	ldr	r3, [pc, #656]	; (80064c8 <HAL_GPIO_Init+0x29c>)
 8006238:	4298      	cmp	r0, r3
 800623a:	d017      	beq.n	800626c <HAL_GPIO_Init+0x40>
 800623c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006240:	4298      	cmp	r0, r3
 8006242:	d013      	beq.n	800626c <HAL_GPIO_Init+0x40>
 8006244:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006248:	4298      	cmp	r0, r3
 800624a:	d00f      	beq.n	800626c <HAL_GPIO_Init+0x40>
 800624c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006250:	4298      	cmp	r0, r3
 8006252:	d00b      	beq.n	800626c <HAL_GPIO_Init+0x40>
 8006254:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006258:	4298      	cmp	r0, r3
 800625a:	d007      	beq.n	800626c <HAL_GPIO_Init+0x40>
 800625c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8006260:	4298      	cmp	r0, r3
 8006262:	d003      	beq.n	800626c <HAL_GPIO_Init+0x40>
 8006264:	21c3      	movs	r1, #195	; 0xc3
 8006266:	4899      	ldr	r0, [pc, #612]	; (80064cc <HAL_GPIO_Init+0x2a0>)
 8006268:	f006 f860 	bl	800c32c <assert_failed>
	assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	b29a      	uxth	r2, r3
 8006270:	b112      	cbz	r2, 8006278 <HAL_GPIO_Init+0x4c>
 8006272:	0c1b      	lsrs	r3, r3, #16
 8006274:	041b      	lsls	r3, r3, #16
 8006276:	b11b      	cbz	r3, 8006280 <HAL_GPIO_Init+0x54>
 8006278:	21c4      	movs	r1, #196	; 0xc4
 800627a:	4894      	ldr	r0, [pc, #592]	; (80064cc <HAL_GPIO_Init+0x2a0>)
 800627c:	f006 f856 	bl	800c32c <assert_failed>
	assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d922      	bls.n	80062cc <HAL_GPIO_Init+0xa0>
 8006286:	2b11      	cmp	r3, #17
 8006288:	d020      	beq.n	80062cc <HAL_GPIO_Init+0xa0>
 800628a:	2b02      	cmp	r3, #2
 800628c:	d01e      	beq.n	80062cc <HAL_GPIO_Init+0xa0>
 800628e:	2b12      	cmp	r3, #18
 8006290:	d01c      	beq.n	80062cc <HAL_GPIO_Init+0xa0>
 8006292:	4a8f      	ldr	r2, [pc, #572]	; (80064d0 <HAL_GPIO_Init+0x2a4>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d019      	beq.n	80062cc <HAL_GPIO_Init+0xa0>
 8006298:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 800629c:	4293      	cmp	r3, r2
 800629e:	d015      	beq.n	80062cc <HAL_GPIO_Init+0xa0>
 80062a0:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d011      	beq.n	80062cc <HAL_GPIO_Init+0xa0>
 80062a8:	f5a2 12f8 	sub.w	r2, r2, #2031616	; 0x1f0000
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d00d      	beq.n	80062cc <HAL_GPIO_Init+0xa0>
 80062b0:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d009      	beq.n	80062cc <HAL_GPIO_Init+0xa0>
 80062b8:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 80062bc:	4293      	cmp	r3, r2
 80062be:	d005      	beq.n	80062cc <HAL_GPIO_Init+0xa0>
 80062c0:	2b03      	cmp	r3, #3
 80062c2:	d003      	beq.n	80062cc <HAL_GPIO_Init+0xa0>
 80062c4:	21c5      	movs	r1, #197	; 0xc5
 80062c6:	4881      	ldr	r0, [pc, #516]	; (80064cc <HAL_GPIO_Init+0x2a0>)
 80062c8:	f006 f830 	bl	800c32c <assert_failed>
	assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d801      	bhi.n	80062d6 <HAL_GPIO_Init+0xaa>
				/* Enable SYSCFG Clock */
				__HAL_RCC_SYSCFG_CLK_ENABLE();

				temp = SYSCFG->EXTICR[position >> 2U];
				temp &= ~(0x0FU << (4U * (position & 0x03U)));
				temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80062d2:	2500      	movs	r5, #0
 80062d4:	e0b9      	b.n	800644a <HAL_GPIO_Init+0x21e>
	assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80062d6:	21c6      	movs	r1, #198	; 0xc6
 80062d8:	487c      	ldr	r0, [pc, #496]	; (80064cc <HAL_GPIO_Init+0x2a0>)
 80062da:	f006 f827 	bl	800c32c <assert_failed>
 80062de:	e7f8      	b.n	80062d2 <HAL_GPIO_Init+0xa6>
				assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	b1cb      	cbz	r3, 8006318 <HAL_GPIO_Init+0xec>
 80062e4:	2b09      	cmp	r3, #9
 80062e6:	d017      	beq.n	8006318 <HAL_GPIO_Init+0xec>
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d015      	beq.n	8006318 <HAL_GPIO_Init+0xec>
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d013      	beq.n	8006318 <HAL_GPIO_Init+0xec>
 80062f0:	2b04      	cmp	r3, #4
 80062f2:	d011      	beq.n	8006318 <HAL_GPIO_Init+0xec>
 80062f4:	2b05      	cmp	r3, #5
 80062f6:	d00f      	beq.n	8006318 <HAL_GPIO_Init+0xec>
 80062f8:	2b06      	cmp	r3, #6
 80062fa:	d00d      	beq.n	8006318 <HAL_GPIO_Init+0xec>
 80062fc:	2b07      	cmp	r3, #7
 80062fe:	d00b      	beq.n	8006318 <HAL_GPIO_Init+0xec>
 8006300:	2b08      	cmp	r3, #8
 8006302:	d009      	beq.n	8006318 <HAL_GPIO_Init+0xec>
 8006304:	2b0a      	cmp	r3, #10
 8006306:	d007      	beq.n	8006318 <HAL_GPIO_Init+0xec>
 8006308:	2b0c      	cmp	r3, #12
 800630a:	d005      	beq.n	8006318 <HAL_GPIO_Init+0xec>
 800630c:	2b0f      	cmp	r3, #15
 800630e:	d003      	beq.n	8006318 <HAL_GPIO_Init+0xec>
 8006310:	21d4      	movs	r1, #212	; 0xd4
 8006312:	486e      	ldr	r0, [pc, #440]	; (80064cc <HAL_GPIO_Init+0x2a0>)
 8006314:	f006 f80a 	bl	800c32c <assert_failed>
				temp = GPIOx->AFR[position >> 3U];
 8006318:	08ea      	lsrs	r2, r5, #3
 800631a:	3208      	adds	r2, #8
 800631c:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
				temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U));
 8006320:	f005 0107 	and.w	r1, r5, #7
 8006324:	0089      	lsls	r1, r1, #2
 8006326:	200f      	movs	r0, #15
 8006328:	4088      	lsls	r0, r1
 800632a:	ea23 0300 	bic.w	r3, r3, r0
				temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800632e:	6938      	ldr	r0, [r7, #16]
 8006330:	fa00 f101 	lsl.w	r1, r0, r1
 8006334:	430b      	orrs	r3, r1
				GPIOx->AFR[position >> 3U] = temp;
 8006336:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
 800633a:	e096      	b.n	800646a <HAL_GPIO_Init+0x23e>
				assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2b03      	cmp	r3, #3
 8006340:	f200 80b0 	bhi.w	80064a4 <HAL_GPIO_Init+0x278>
				temp = GPIOx->OSPEEDR;
 8006344:	f8d8 3008 	ldr.w	r3, [r8, #8]
				temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006348:	4033      	ands	r3, r6
				temp |= (GPIO_Init->Speed << (position * 2U));
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	fa02 f20a 	lsl.w	r2, r2, sl
 8006350:	4313      	orrs	r3, r2
				GPIOx->OSPEEDR = temp;
 8006352:	f8c8 3008 	str.w	r3, [r8, #8]
				temp = GPIOx->OTYPER;
 8006356:	f8d8 3004 	ldr.w	r3, [r8, #4]
				temp &= ~(GPIO_OTYPER_OT_0 << position);
 800635a:	ea23 0404 	bic.w	r4, r3, r4
				temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006364:	40ab      	lsls	r3, r5
 8006366:	431c      	orrs	r4, r3
				GPIOx->OTYPER = temp;
 8006368:	f8c8 4004 	str.w	r4, [r8, #4]
			temp = GPIOx->PUPDR;
 800636c:	f8d8 300c 	ldr.w	r3, [r8, #12]
			temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006370:	401e      	ands	r6, r3
			temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	fa03 f30a 	lsl.w	r3, r3, sl
 8006378:	431e      	orrs	r6, r3
			GPIOx->PUPDR = temp;
 800637a:	f8c8 600c 	str.w	r6, [r8, #12]
			if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) {
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8006384:	d060      	beq.n	8006448 <HAL_GPIO_Init+0x21c>
				__HAL_RCC_SYSCFG_CLK_ENABLE();
 8006386:	2300      	movs	r3, #0
 8006388:	9301      	str	r3, [sp, #4]
 800638a:	4b52      	ldr	r3, [pc, #328]	; (80064d4 <HAL_GPIO_Init+0x2a8>)
 800638c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800638e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006392:	645a      	str	r2, [r3, #68]	; 0x44
 8006394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800639a:	9301      	str	r3, [sp, #4]
 800639c:	9b01      	ldr	r3, [sp, #4]
				temp = SYSCFG->EXTICR[position >> 2U];
 800639e:	08aa      	lsrs	r2, r5, #2
 80063a0:	1c91      	adds	r1, r2, #2
 80063a2:	4b4d      	ldr	r3, [pc, #308]	; (80064d8 <HAL_GPIO_Init+0x2ac>)
 80063a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
				temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80063a8:	f005 0103 	and.w	r1, r5, #3
 80063ac:	0089      	lsls	r1, r1, #2
 80063ae:	200f      	movs	r0, #15
 80063b0:	4088      	lsls	r0, r1
 80063b2:	ea23 0300 	bic.w	r3, r3, r0
				temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80063b6:	4844      	ldr	r0, [pc, #272]	; (80064c8 <HAL_GPIO_Init+0x29c>)
 80063b8:	4580      	cmp	r8, r0
 80063ba:	d07a      	beq.n	80064b2 <HAL_GPIO_Init+0x286>
 80063bc:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80063c0:	4580      	cmp	r8, r0
 80063c2:	d078      	beq.n	80064b6 <HAL_GPIO_Init+0x28a>
 80063c4:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80063c8:	4580      	cmp	r8, r0
 80063ca:	d076      	beq.n	80064ba <HAL_GPIO_Init+0x28e>
 80063cc:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80063d0:	4580      	cmp	r8, r0
 80063d2:	d074      	beq.n	80064be <HAL_GPIO_Init+0x292>
 80063d4:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80063d8:	4580      	cmp	r8, r0
 80063da:	d068      	beq.n	80064ae <HAL_GPIO_Init+0x282>
 80063dc:	2007      	movs	r0, #7
 80063de:	fa00 f101 	lsl.w	r1, r0, r1
 80063e2:	430b      	orrs	r3, r1
				SYSCFG->EXTICR[position >> 2U] = temp;
 80063e4:	3202      	adds	r2, #2
 80063e6:	493c      	ldr	r1, [pc, #240]	; (80064d8 <HAL_GPIO_Init+0x2ac>)
 80063e8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

				/* Clear EXTI line configuration */
				temp = EXTI->IMR;
 80063ec:	4b3b      	ldr	r3, [pc, #236]	; (80064dc <HAL_GPIO_Init+0x2b0>)
 80063ee:	681a      	ldr	r2, [r3, #0]
				temp &= ~((uint32_t)iocurrent);
 80063f0:	ea6f 0309 	mvn.w	r3, r9
 80063f4:	ea02 0103 	and.w	r1, r2, r3
				if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT) {
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f410 3f80 	tst.w	r0, #65536	; 0x10000
 80063fe:	d001      	beq.n	8006404 <HAL_GPIO_Init+0x1d8>
					temp |= iocurrent;
 8006400:	ea49 0102 	orr.w	r1, r9, r2
				}
				EXTI->IMR = temp;
 8006404:	4a35      	ldr	r2, [pc, #212]	; (80064dc <HAL_GPIO_Init+0x2b0>)
 8006406:	6011      	str	r1, [r2, #0]

				temp = EXTI->EMR;
 8006408:	6852      	ldr	r2, [r2, #4]
				temp &= ~((uint32_t)iocurrent);
 800640a:	ea03 0102 	and.w	r1, r3, r2
				if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT) {
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 8006414:	d001      	beq.n	800641a <HAL_GPIO_Init+0x1ee>
					temp |= iocurrent;
 8006416:	ea49 0102 	orr.w	r1, r9, r2
				}
				EXTI->EMR = temp;
 800641a:	4a30      	ldr	r2, [pc, #192]	; (80064dc <HAL_GPIO_Init+0x2b0>)
 800641c:	6051      	str	r1, [r2, #4]

				/* Clear Rising Falling edge configuration */
				temp = EXTI->RTSR;
 800641e:	6892      	ldr	r2, [r2, #8]
				temp &= ~((uint32_t)iocurrent);
 8006420:	ea03 0102 	and.w	r1, r3, r2
				if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE) {
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 800642a:	d001      	beq.n	8006430 <HAL_GPIO_Init+0x204>
					temp |= iocurrent;
 800642c:	ea49 0102 	orr.w	r1, r9, r2
				}
				EXTI->RTSR = temp;
 8006430:	4a2a      	ldr	r2, [pc, #168]	; (80064dc <HAL_GPIO_Init+0x2b0>)
 8006432:	6091      	str	r1, [r2, #8]

				temp = EXTI->FTSR;
 8006434:	68d2      	ldr	r2, [r2, #12]
				temp &= ~((uint32_t)iocurrent);
 8006436:	4013      	ands	r3, r2
				if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE) {
 8006438:	6879      	ldr	r1, [r7, #4]
 800643a:	f411 1f00 	tst.w	r1, #2097152	; 0x200000
 800643e:	d001      	beq.n	8006444 <HAL_GPIO_Init+0x218>
					temp |= iocurrent;
 8006440:	ea49 0302 	orr.w	r3, r9, r2
				}
				EXTI->FTSR = temp;
 8006444:	4a25      	ldr	r2, [pc, #148]	; (80064dc <HAL_GPIO_Init+0x2b0>)
 8006446:	60d3      	str	r3, [r2, #12]
	for (position = 0U; position < GPIO_NUMBER; position++) {
 8006448:	3501      	adds	r5, #1
 800644a:	2d0f      	cmp	r5, #15
 800644c:	d839      	bhi.n	80064c2 <HAL_GPIO_Init+0x296>
		ioposition = 0x01U << position;
 800644e:	2401      	movs	r4, #1
 8006450:	40ac      	lsls	r4, r5
		iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	ea04 0903 	and.w	r9, r4, r3
		if (iocurrent == ioposition) {
 8006458:	454c      	cmp	r4, r9
 800645a:	d1f5      	bne.n	8006448 <HAL_GPIO_Init+0x21c>
			if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) {
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b02      	cmp	r3, #2
 8006460:	f43f af3e 	beq.w	80062e0 <HAL_GPIO_Init+0xb4>
 8006464:	2b12      	cmp	r3, #18
 8006466:	f43f af3b 	beq.w	80062e0 <HAL_GPIO_Init+0xb4>
			temp = GPIOx->MODER;
 800646a:	f8d8 3000 	ldr.w	r3, [r8]
			temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800646e:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 8006472:	2603      	movs	r6, #3
 8006474:	fa06 f60a 	lsl.w	r6, r6, sl
 8006478:	43f6      	mvns	r6, r6
 800647a:	4033      	ands	r3, r6
			temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	f002 0203 	and.w	r2, r2, #3
 8006482:	fa02 f20a 	lsl.w	r2, r2, sl
 8006486:	4313      	orrs	r3, r2
			GPIOx->MODER = temp;
 8006488:	f8c8 3000 	str.w	r3, [r8]
			if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	1e5a      	subs	r2, r3, #1
 8006490:	2a01      	cmp	r2, #1
 8006492:	f67f af53 	bls.w	800633c <HAL_GPIO_Init+0x110>
 8006496:	2b11      	cmp	r3, #17
 8006498:	f43f af50 	beq.w	800633c <HAL_GPIO_Init+0x110>
			    (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) {
 800649c:	2b12      	cmp	r3, #18
 800649e:	f47f af65 	bne.w	800636c <HAL_GPIO_Init+0x140>
 80064a2:	e74b      	b.n	800633c <HAL_GPIO_Init+0x110>
				assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80064a4:	21e6      	movs	r1, #230	; 0xe6
 80064a6:	4809      	ldr	r0, [pc, #36]	; (80064cc <HAL_GPIO_Init+0x2a0>)
 80064a8:	f005 ff40 	bl	800c32c <assert_failed>
 80064ac:	e74a      	b.n	8006344 <HAL_GPIO_Init+0x118>
				temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80064ae:	2004      	movs	r0, #4
 80064b0:	e795      	b.n	80063de <HAL_GPIO_Init+0x1b2>
 80064b2:	2000      	movs	r0, #0
 80064b4:	e793      	b.n	80063de <HAL_GPIO_Init+0x1b2>
 80064b6:	2001      	movs	r0, #1
 80064b8:	e791      	b.n	80063de <HAL_GPIO_Init+0x1b2>
 80064ba:	2002      	movs	r0, #2
 80064bc:	e78f      	b.n	80063de <HAL_GPIO_Init+0x1b2>
 80064be:	2003      	movs	r0, #3
 80064c0:	e78d      	b.n	80063de <HAL_GPIO_Init+0x1b2>
			}
		}
	}
}
 80064c2:	b002      	add	sp, #8
 80064c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064c8:	40020000 	.word	0x40020000
 80064cc:	0801e170 	.word	0x0801e170
 80064d0:	10110000 	.word	0x10110000
 80064d4:	40023800 	.word	0x40023800
 80064d8:	40013800 	.word	0x40013800
 80064dc:	40013c00 	.word	0x40013c00

080064e0 <HAL_GPIO_DeInit>:
 * @param  GPIO_Pin specifies the port bit to be written.
 *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
 * @retval None
 */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80064e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064e2:	4604      	mov	r4, r0
 80064e4:	460d      	mov	r5, r1
	uint32_t ioposition = 0x00U;
	uint32_t iocurrent = 0x00U;
	uint32_t tmp = 0x00U;

	/* Check the parameters */
	assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80064e6:	4b47      	ldr	r3, [pc, #284]	; (8006604 <HAL_GPIO_DeInit+0x124>)
 80064e8:	4298      	cmp	r0, r3
 80064ea:	d018      	beq.n	800651e <HAL_GPIO_DeInit+0x3e>
 80064ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064f0:	4298      	cmp	r0, r3
 80064f2:	d014      	beq.n	800651e <HAL_GPIO_DeInit+0x3e>
 80064f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064f8:	4298      	cmp	r0, r3
 80064fa:	d010      	beq.n	800651e <HAL_GPIO_DeInit+0x3e>
 80064fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006500:	4298      	cmp	r0, r3
 8006502:	d00c      	beq.n	800651e <HAL_GPIO_DeInit+0x3e>
 8006504:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006508:	4298      	cmp	r0, r3
 800650a:	d008      	beq.n	800651e <HAL_GPIO_DeInit+0x3e>
 800650c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8006510:	4298      	cmp	r0, r3
 8006512:	d004      	beq.n	800651e <HAL_GPIO_DeInit+0x3e>
 8006514:	f240 1137 	movw	r1, #311	; 0x137
 8006518:	483b      	ldr	r0, [pc, #236]	; (8006608 <HAL_GPIO_DeInit+0x128>)
 800651a:	f005 ff07 	bl	800c32c <assert_failed>
			GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));

			/*------------------------- EXTI Mode Configuration --------------------*/
			tmp = SYSCFG->EXTICR[position >> 2U];
			tmp &= (0x0FU << (4U * (position & 0x03U)));
			if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)))) {
 800651e:	2300      	movs	r3, #0
 8006520:	e007      	b.n	8006532 <HAL_GPIO_DeInit+0x52>
 8006522:	2604      	movs	r6, #4
 8006524:	e000      	b.n	8006528 <HAL_GPIO_DeInit+0x48>
 8006526:	2600      	movs	r6, #0
 8006528:	fa06 f202 	lsl.w	r2, r6, r2
 800652c:	4291      	cmp	r1, r2
 800652e:	d050      	beq.n	80065d2 <HAL_GPIO_DeInit+0xf2>
	for (position = 0U; position < GPIO_NUMBER; position++) {
 8006530:	3301      	adds	r3, #1
 8006532:	2b0f      	cmp	r3, #15
 8006534:	d865      	bhi.n	8006602 <HAL_GPIO_DeInit+0x122>
		ioposition = 0x01U << position;
 8006536:	2201      	movs	r2, #1
 8006538:	409a      	lsls	r2, r3
		iocurrent = (GPIO_Pin) & ioposition;
 800653a:	ea02 0005 	and.w	r0, r2, r5
		if (iocurrent == ioposition) {
 800653e:	4282      	cmp	r2, r0
 8006540:	d1f6      	bne.n	8006530 <HAL_GPIO_DeInit+0x50>
			GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006542:	6826      	ldr	r6, [r4, #0]
 8006544:	005f      	lsls	r7, r3, #1
 8006546:	2103      	movs	r1, #3
 8006548:	40b9      	lsls	r1, r7
 800654a:	43c9      	mvns	r1, r1
 800654c:	400e      	ands	r6, r1
 800654e:	6026      	str	r6, [r4, #0]
			GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U));
 8006550:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8006554:	f10e 0e08 	add.w	lr, lr, #8
 8006558:	f854 c02e 	ldr.w	ip, [r4, lr, lsl #2]
 800655c:	f003 0607 	and.w	r6, r3, #7
 8006560:	00b6      	lsls	r6, r6, #2
 8006562:	270f      	movs	r7, #15
 8006564:	fa07 f606 	lsl.w	r6, r7, r6
 8006568:	ea2c 0606 	bic.w	r6, ip, r6
 800656c:	f844 602e 	str.w	r6, [r4, lr, lsl #2]
			GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006570:	68a6      	ldr	r6, [r4, #8]
 8006572:	400e      	ands	r6, r1
 8006574:	60a6      	str	r6, [r4, #8]
			GPIOx->OTYPER &= ~(GPIO_OTYPER_OT_0 << position);
 8006576:	6866      	ldr	r6, [r4, #4]
 8006578:	ea26 0202 	bic.w	r2, r6, r2
 800657c:	6062      	str	r2, [r4, #4]
			GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800657e:	68e2      	ldr	r2, [r4, #12]
 8006580:	4011      	ands	r1, r2
 8006582:	60e1      	str	r1, [r4, #12]
			tmp = SYSCFG->EXTICR[position >> 2U];
 8006584:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 8006588:	f10e 0102 	add.w	r1, lr, #2
 800658c:	4a1f      	ldr	r2, [pc, #124]	; (800660c <HAL_GPIO_DeInit+0x12c>)
 800658e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
			tmp &= (0x0FU << (4U * (position & 0x03U)));
 8006592:	f003 0203 	and.w	r2, r3, #3
 8006596:	0092      	lsls	r2, r2, #2
 8006598:	4097      	lsls	r7, r2
 800659a:	4039      	ands	r1, r7
			if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)))) {
 800659c:	4e19      	ldr	r6, [pc, #100]	; (8006604 <HAL_GPIO_DeInit+0x124>)
 800659e:	42b4      	cmp	r4, r6
 80065a0:	d0c1      	beq.n	8006526 <HAL_GPIO_DeInit+0x46>
 80065a2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80065a6:	42b4      	cmp	r4, r6
 80065a8:	d00d      	beq.n	80065c6 <HAL_GPIO_DeInit+0xe6>
 80065aa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80065ae:	42b4      	cmp	r4, r6
 80065b0:	d00b      	beq.n	80065ca <HAL_GPIO_DeInit+0xea>
 80065b2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80065b6:	42b4      	cmp	r4, r6
 80065b8:	d009      	beq.n	80065ce <HAL_GPIO_DeInit+0xee>
 80065ba:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80065be:	42b4      	cmp	r4, r6
 80065c0:	d0af      	beq.n	8006522 <HAL_GPIO_DeInit+0x42>
 80065c2:	2607      	movs	r6, #7
 80065c4:	e7b0      	b.n	8006528 <HAL_GPIO_DeInit+0x48>
 80065c6:	2601      	movs	r6, #1
 80065c8:	e7ae      	b.n	8006528 <HAL_GPIO_DeInit+0x48>
 80065ca:	2602      	movs	r6, #2
 80065cc:	e7ac      	b.n	8006528 <HAL_GPIO_DeInit+0x48>
 80065ce:	2603      	movs	r6, #3
 80065d0:	e7aa      	b.n	8006528 <HAL_GPIO_DeInit+0x48>
				/* Configure the External Interrupt or event for the current IO */
				tmp = 0x0FU << (4U * (position & 0x03U));
				SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80065d2:	4e0e      	ldr	r6, [pc, #56]	; (800660c <HAL_GPIO_DeInit+0x12c>)
 80065d4:	f10e 0202 	add.w	r2, lr, #2
 80065d8:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
 80065dc:	ea21 0707 	bic.w	r7, r1, r7
 80065e0:	f846 7022 	str.w	r7, [r6, r2, lsl #2]

				/* Clear EXTI line configuration */
				EXTI->IMR &= ~((uint32_t)iocurrent);
 80065e4:	490a      	ldr	r1, [pc, #40]	; (8006610 <HAL_GPIO_DeInit+0x130>)
 80065e6:	680e      	ldr	r6, [r1, #0]
 80065e8:	43c2      	mvns	r2, r0
 80065ea:	4016      	ands	r6, r2
 80065ec:	600e      	str	r6, [r1, #0]
				EXTI->EMR &= ~((uint32_t)iocurrent);
 80065ee:	6848      	ldr	r0, [r1, #4]
 80065f0:	4010      	ands	r0, r2
 80065f2:	6048      	str	r0, [r1, #4]

				/* Clear Rising Falling edge configuration */
				EXTI->RTSR &= ~((uint32_t)iocurrent);
 80065f4:	6888      	ldr	r0, [r1, #8]
 80065f6:	4010      	ands	r0, r2
 80065f8:	6088      	str	r0, [r1, #8]
				EXTI->FTSR &= ~((uint32_t)iocurrent);
 80065fa:	68c8      	ldr	r0, [r1, #12]
 80065fc:	4002      	ands	r2, r0
 80065fe:	60ca      	str	r2, [r1, #12]
 8006600:	e796      	b.n	8006530 <HAL_GPIO_DeInit+0x50>
			}
		}
	}
}
 8006602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006604:	40020000 	.word	0x40020000
 8006608:	0801e170 	.word	0x0801e170
 800660c:	40013800 	.word	0x40013800
 8006610:	40013c00 	.word	0x40013c00

08006614 <HAL_GPIO_ReadPin>:
 * @param  GPIO_Pin specifies the port bit to read.
 *         This parameter can be GPIO_PIN_x where x can be (0..15).
 * @retval The input port pin value.
 */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006614:	b538      	push	{r3, r4, r5, lr}
 8006616:	4605      	mov	r5, r0
	GPIO_PinState bitstatus;

	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));
 8006618:	460c      	mov	r4, r1
 800661a:	b121      	cbz	r1, 8006626 <HAL_GPIO_ReadPin+0x12>

	if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET) {
 800661c:	692b      	ldr	r3, [r5, #16]
 800661e:	421c      	tst	r4, r3
 8006620:	d107      	bne.n	8006632 <HAL_GPIO_ReadPin+0x1e>
		bitstatus = GPIO_PIN_SET;
	}else  {
		bitstatus = GPIO_PIN_RESET;
 8006622:	2000      	movs	r0, #0
	}
	return bitstatus;
}
 8006624:	bd38      	pop	{r3, r4, r5, pc}
	assert_param(IS_GPIO_PIN(GPIO_Pin));
 8006626:	f44f 71c1 	mov.w	r1, #386	; 0x182
 800662a:	4803      	ldr	r0, [pc, #12]	; (8006638 <HAL_GPIO_ReadPin+0x24>)
 800662c:	f005 fe7e 	bl	800c32c <assert_failed>
 8006630:	e7f4      	b.n	800661c <HAL_GPIO_ReadPin+0x8>
		bitstatus = GPIO_PIN_SET;
 8006632:	2001      	movs	r0, #1
 8006634:	bd38      	pop	{r3, r4, r5, pc}
 8006636:	bf00      	nop
 8006638:	0801e170 	.word	0x0801e170

0800663c <HAL_GPIO_WritePin>:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800663c:	b570      	push	{r4, r5, r6, lr}
 800663e:	4606      	mov	r6, r0
 8006640:	4615      	mov	r5, r2
	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));
 8006642:	460c      	mov	r4, r1
 8006644:	b151      	cbz	r1, 800665c <HAL_GPIO_WritePin+0x20>
	assert_param(IS_GPIO_PIN_ACTION(PinState));
 8006646:	2d01      	cmp	r5, #1
 8006648:	d904      	bls.n	8006654 <HAL_GPIO_WritePin+0x18>
 800664a:	f240 11a1 	movw	r1, #417	; 0x1a1
 800664e:	4807      	ldr	r0, [pc, #28]	; (800666c <HAL_GPIO_WritePin+0x30>)
 8006650:	f005 fe6c 	bl	800c32c <assert_failed>

	if (PinState != GPIO_PIN_RESET) {
 8006654:	b945      	cbnz	r5, 8006668 <HAL_GPIO_WritePin+0x2c>
		GPIOx->BSRR = GPIO_Pin;
	}else  {
		GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006656:	0424      	lsls	r4, r4, #16
 8006658:	61b4      	str	r4, [r6, #24]
 800665a:	bd70      	pop	{r4, r5, r6, pc}
	assert_param(IS_GPIO_PIN(GPIO_Pin));
 800665c:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8006660:	4802      	ldr	r0, [pc, #8]	; (800666c <HAL_GPIO_WritePin+0x30>)
 8006662:	f005 fe63 	bl	800c32c <assert_failed>
 8006666:	e7ee      	b.n	8006646 <HAL_GPIO_WritePin+0xa>
		GPIOx->BSRR = GPIO_Pin;
 8006668:	61b4      	str	r4, [r6, #24]
 800666a:	bd70      	pop	{r4, r5, r6, pc}
 800666c:	0801e170 	.word	0x0801e170

08006670 <HAL_GPIO_EXTI_IRQHandler>:
 * @brief  This function handles EXTI interrupt request.
 * @param  GPIO_Pin Specifies the pins connected EXTI line
 * @retval None
 */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006670:	b508      	push	{r3, lr}
	/* EXTI line interrupt detected */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) {
 8006672:	4b05      	ldr	r3, [pc, #20]	; (8006688 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8006674:	695b      	ldr	r3, [r3, #20]
 8006676:	4203      	tst	r3, r0
 8006678:	d100      	bne.n	800667c <HAL_GPIO_EXTI_IRQHandler+0xc>
 800667a:	bd08      	pop	{r3, pc}
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800667c:	4b02      	ldr	r3, [pc, #8]	; (8006688 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800667e:	6158      	str	r0, [r3, #20]
		HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006680:	f005 fc58 	bl	800bf34 <HAL_GPIO_EXTI_Callback>
	}
}
 8006684:	e7f9      	b.n	800667a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8006686:	bf00      	nop
 8006688:	40013c00 	.word	0x40013c00

0800668c <I2C_Master_SB>:
 *         the configuration information for I2C module
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
	if (hi2c->Mode == HAL_I2C_MODE_MEM) {
 800668c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8006690:	b2db      	uxtb	r3, r3
 8006692:	2b40      	cmp	r3, #64	; 0x40
 8006694:	d013      	beq.n	80066be <I2C_Master_SB+0x32>
			hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
		}else  {
			hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
		}
	}else  {
		if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT) {
 8006696:	6903      	ldr	r3, [r0, #16]
 8006698:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800669c:	d01e      	beq.n	80066dc <I2C_Master_SB+0x50>
				hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
			}else  {
				hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
			}
		}else  {
			if (hi2c->EventCount == 0U) {
 800669e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d02d      	beq.n	8006700 <I2C_Master_SB+0x74>
				/* Send header of slave address */
				hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
			}else if (hi2c->EventCount == 1U) {
 80066a4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d133      	bne.n	8006712 <I2C_Master_SB+0x86>
				/* Send header of slave address */
				hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80066aa:	6802      	ldr	r2, [r0, #0]
 80066ac:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80066ae:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 80066b2:	f003 0306 	and.w	r3, r3, #6
 80066b6:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
 80066ba:	6113      	str	r3, [r2, #16]
 80066bc:	e029      	b.n	8006712 <I2C_Master_SB+0x86>
		if (hi2c->EventCount == 0U) {
 80066be:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80066c0:	b92b      	cbnz	r3, 80066ce <I2C_Master_SB+0x42>
			hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80066c2:	6802      	ldr	r2, [r0, #0]
 80066c4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80066c6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80066ca:	6113      	str	r3, [r2, #16]
 80066cc:	e021      	b.n	8006712 <I2C_Master_SB+0x86>
			hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80066ce:	6802      	ldr	r2, [r0, #0]
 80066d0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80066d2:	f043 0301 	orr.w	r3, r3, #1
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	6113      	str	r3, [r2, #16]
 80066da:	e01a      	b.n	8006712 <I2C_Master_SB+0x86>
			if (hi2c->State == HAL_I2C_STATE_BUSY_TX) {
 80066dc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	2b21      	cmp	r3, #33	; 0x21
 80066e4:	d006      	beq.n	80066f4 <I2C_Master_SB+0x68>
				hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80066e6:	6802      	ldr	r2, [r0, #0]
 80066e8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80066ea:	f043 0301 	orr.w	r3, r3, #1
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	6113      	str	r3, [r2, #16]
 80066f2:	e00e      	b.n	8006712 <I2C_Master_SB+0x86>
				hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80066f4:	6802      	ldr	r2, [r0, #0]
 80066f6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80066f8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80066fc:	6113      	str	r3, [r2, #16]
 80066fe:	e008      	b.n	8006712 <I2C_Master_SB+0x86>
				hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006700:	6802      	ldr	r2, [r0, #0]
 8006702:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006704:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8006708:	f003 0306 	and.w	r3, r3, #6
 800670c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8006710:	6113      	str	r3, [r2, #16]
			}
		}
	}

	return HAL_OK;
}
 8006712:	2000      	movs	r0, #0
 8006714:	4770      	bx	lr

08006716 <I2C_Master_ADD10>:
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
	/* Send slave address */
	hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006716:	6802      	ldr	r2, [r0, #0]
 8006718:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800671a:	b2db      	uxtb	r3, r3
 800671c:	6113      	str	r3, [r2, #16]

	return HAL_OK;
}
 800671e:	2000      	movs	r0, #0
 8006720:	4770      	bx	lr

08006722 <I2C_Master_ADDR>:
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *         the configuration information for I2C module
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006722:	b410      	push	{r4}
 8006724:	b08b      	sub	sp, #44	; 0x2c
	/* Declaration of temporary variable to prevent undefined behavior of volatile usage */
	uint32_t CurrentMode = hi2c->Mode;
 8006726:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800672a:	b2da      	uxtb	r2, r3
	uint32_t CurrentXferOptions = hi2c->XferOptions;
 800672c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	uint32_t Prev_State = hi2c->PreviousState;
 800672e:	6b04      	ldr	r4, [r0, #48]	; 0x30

	if (hi2c->State == HAL_I2C_STATE_BUSY_RX) {
 8006730:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006734:	b2db      	uxtb	r3, r3
 8006736:	2b22      	cmp	r3, #34	; 0x22
 8006738:	d00c      	beq.n	8006754 <I2C_Master_ADDR+0x32>
			/* Reset Event counter  */
			hi2c->EventCount = 0U;
		}
	}else  {
		/* Clear ADDR flag */
		__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800673a:	2300      	movs	r3, #0
 800673c:	9309      	str	r3, [sp, #36]	; 0x24
 800673e:	6803      	ldr	r3, [r0, #0]
 8006740:	695a      	ldr	r2, [r3, #20]
 8006742:	9209      	str	r2, [sp, #36]	; 0x24
 8006744:	699b      	ldr	r3, [r3, #24]
 8006746:	9309      	str	r3, [sp, #36]	; 0x24
 8006748:	9b09      	ldr	r3, [sp, #36]	; 0x24
	}

	return HAL_OK;
}
 800674a:	2000      	movs	r0, #0
 800674c:	b00b      	add	sp, #44	; 0x2c
 800674e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006752:	4770      	bx	lr
		if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM)) {
 8006754:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006756:	b90b      	cbnz	r3, 800675c <I2C_Master_ADDR+0x3a>
 8006758:	2a40      	cmp	r2, #64	; 0x40
 800675a:	d017      	beq.n	800678c <I2C_Master_ADDR+0x6a>
		}else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)) {
 800675c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800675e:	b91b      	cbnz	r3, 8006768 <I2C_Master_ADDR+0x46>
 8006760:	6903      	ldr	r3, [r0, #16]
 8006762:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006766:	d019      	beq.n	800679c <I2C_Master_ADDR+0x7a>
			if (hi2c->XferCount == 0U) {
 8006768:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800676a:	b29b      	uxth	r3, r3
 800676c:	2b00      	cmp	r3, #0
 800676e:	d125      	bne.n	80067bc <I2C_Master_ADDR+0x9a>
				__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006770:	9302      	str	r3, [sp, #8]
 8006772:	6803      	ldr	r3, [r0, #0]
 8006774:	695a      	ldr	r2, [r3, #20]
 8006776:	9202      	str	r2, [sp, #8]
 8006778:	699a      	ldr	r2, [r3, #24]
 800677a:	9202      	str	r2, [sp, #8]
 800677c:	9a02      	ldr	r2, [sp, #8]
				hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006784:	601a      	str	r2, [r3, #0]
			hi2c->EventCount = 0U;
 8006786:	2300      	movs	r3, #0
 8006788:	6503      	str	r3, [r0, #80]	; 0x50
 800678a:	e7de      	b.n	800674a <I2C_Master_ADDR+0x28>
			__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800678c:	9300      	str	r3, [sp, #0]
 800678e:	6803      	ldr	r3, [r0, #0]
 8006790:	695a      	ldr	r2, [r3, #20]
 8006792:	9200      	str	r2, [sp, #0]
 8006794:	699b      	ldr	r3, [r3, #24]
 8006796:	9300      	str	r3, [sp, #0]
 8006798:	9b00      	ldr	r3, [sp, #0]
 800679a:	e7d6      	b.n	800674a <I2C_Master_ADDR+0x28>
			__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800679c:	2300      	movs	r3, #0
 800679e:	9301      	str	r3, [sp, #4]
 80067a0:	6803      	ldr	r3, [r0, #0]
 80067a2:	695a      	ldr	r2, [r3, #20]
 80067a4:	9201      	str	r2, [sp, #4]
 80067a6:	699a      	ldr	r2, [r3, #24]
 80067a8:	9201      	str	r2, [sp, #4]
 80067aa:	9a01      	ldr	r2, [sp, #4]
			hi2c->Instance->CR1 |= I2C_CR1_START;
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067b2:	601a      	str	r2, [r3, #0]
			hi2c->EventCount++;
 80067b4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80067b6:	3301      	adds	r3, #1
 80067b8:	6503      	str	r3, [r0, #80]	; 0x50
 80067ba:	e7c6      	b.n	800674a <I2C_Master_ADDR+0x28>
			}else if (hi2c->XferCount == 1U) {
 80067bc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80067be:	b29b      	uxth	r3, r3
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d01a      	beq.n	80067fa <I2C_Master_ADDR+0xd8>
			}else if (hi2c->XferCount == 2U) {
 80067c4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d06b      	beq.n	80068a4 <I2C_Master_ADDR+0x182>
				hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80067cc:	6802      	ldr	r2, [r0, #0]
 80067ce:	6813      	ldr	r3, [r2, #0]
 80067d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80067d4:	6013      	str	r3, [r2, #0]
				if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) {
 80067d6:	6803      	ldr	r3, [r0, #0]
 80067d8:	685a      	ldr	r2, [r3, #4]
 80067da:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80067de:	d003      	beq.n	80067e8 <I2C_Master_ADDR+0xc6>
					hi2c->Instance->CR2 |= I2C_CR2_LAST;
 80067e0:	685a      	ldr	r2, [r3, #4]
 80067e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80067e6:	605a      	str	r2, [r3, #4]
				__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067e8:	2300      	movs	r3, #0
 80067ea:	9308      	str	r3, [sp, #32]
 80067ec:	6803      	ldr	r3, [r0, #0]
 80067ee:	695a      	ldr	r2, [r3, #20]
 80067f0:	9208      	str	r2, [sp, #32]
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	9308      	str	r3, [sp, #32]
 80067f6:	9b08      	ldr	r3, [sp, #32]
 80067f8:	e7c5      	b.n	8006786 <I2C_Master_ADDR+0x64>
				if (CurrentXferOptions == I2C_NO_OPTION_FRAME) {
 80067fa:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 80067fe:	d016      	beq.n	800682e <I2C_Master_ADDR+0x10c>
				else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006800:	2904      	cmp	r1, #4
 8006802:	d03d      	beq.n	8006880 <I2C_Master_ADDR+0x15e>
 8006804:	2908      	cmp	r1, #8
 8006806:	d03b      	beq.n	8006880 <I2C_Master_ADDR+0x15e>
					 && (Prev_State != I2C_STATE_MASTER_BUSY_RX)) {
 8006808:	2c12      	cmp	r4, #18
 800680a:	d039      	beq.n	8006880 <I2C_Master_ADDR+0x15e>
					if (hi2c->XferOptions != I2C_NEXT_FRAME) {
 800680c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800680e:	2b02      	cmp	r3, #2
 8006810:	d030      	beq.n	8006874 <I2C_Master_ADDR+0x152>
						hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006812:	6802      	ldr	r2, [r0, #0]
 8006814:	6813      	ldr	r3, [r2, #0]
 8006816:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800681a:	6013      	str	r3, [r2, #0]
					__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800681c:	2300      	movs	r3, #0
 800681e:	9305      	str	r3, [sp, #20]
 8006820:	6803      	ldr	r3, [r0, #0]
 8006822:	695a      	ldr	r2, [r3, #20]
 8006824:	9205      	str	r2, [sp, #20]
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	9305      	str	r3, [sp, #20]
 800682a:	9b05      	ldr	r3, [sp, #20]
 800682c:	e7ab      	b.n	8006786 <I2C_Master_ADDR+0x64>
					hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800682e:	6802      	ldr	r2, [r0, #0]
 8006830:	6813      	ldr	r3, [r2, #0]
 8006832:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006836:	6013      	str	r3, [r2, #0]
					if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) {
 8006838:	6803      	ldr	r3, [r0, #0]
 800683a:	685a      	ldr	r2, [r3, #4]
 800683c:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8006840:	d00c      	beq.n	800685c <I2C_Master_ADDR+0x13a>
						hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006848:	601a      	str	r2, [r3, #0]
						__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800684a:	2300      	movs	r3, #0
 800684c:	9303      	str	r3, [sp, #12]
 800684e:	6803      	ldr	r3, [r0, #0]
 8006850:	695a      	ldr	r2, [r3, #20]
 8006852:	9203      	str	r2, [sp, #12]
 8006854:	699b      	ldr	r3, [r3, #24]
 8006856:	9303      	str	r3, [sp, #12]
 8006858:	9b03      	ldr	r3, [sp, #12]
 800685a:	e794      	b.n	8006786 <I2C_Master_ADDR+0x64>
						__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800685c:	2200      	movs	r2, #0
 800685e:	9204      	str	r2, [sp, #16]
 8006860:	695a      	ldr	r2, [r3, #20]
 8006862:	9204      	str	r2, [sp, #16]
 8006864:	699a      	ldr	r2, [r3, #24]
 8006866:	9204      	str	r2, [sp, #16]
 8006868:	9a04      	ldr	r2, [sp, #16]
						hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006870:	601a      	str	r2, [r3, #0]
 8006872:	e788      	b.n	8006786 <I2C_Master_ADDR+0x64>
						hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8006874:	6802      	ldr	r2, [r0, #0]
 8006876:	6813      	ldr	r3, [r2, #0]
 8006878:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800687c:	6013      	str	r3, [r2, #0]
 800687e:	e7cd      	b.n	800681c <I2C_Master_ADDR+0xfa>
					hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006880:	6802      	ldr	r2, [r0, #0]
 8006882:	6813      	ldr	r3, [r2, #0]
 8006884:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006888:	6013      	str	r3, [r2, #0]
					__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800688a:	2300      	movs	r3, #0
 800688c:	9306      	str	r3, [sp, #24]
 800688e:	6803      	ldr	r3, [r0, #0]
 8006890:	695a      	ldr	r2, [r3, #20]
 8006892:	9206      	str	r2, [sp, #24]
 8006894:	699a      	ldr	r2, [r3, #24]
 8006896:	9206      	str	r2, [sp, #24]
 8006898:	9a06      	ldr	r2, [sp, #24]
					hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068a0:	601a      	str	r2, [r3, #0]
 80068a2:	e770      	b.n	8006786 <I2C_Master_ADDR+0x64>
				if (hi2c->XferOptions != I2C_NEXT_FRAME) {
 80068a4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d01b      	beq.n	80068e2 <I2C_Master_ADDR+0x1c0>
					hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80068aa:	6802      	ldr	r2, [r0, #0]
 80068ac:	6813      	ldr	r3, [r2, #0]
 80068ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068b2:	6013      	str	r3, [r2, #0]
					hi2c->Instance->CR1 |= I2C_CR1_POS;
 80068b4:	6802      	ldr	r2, [r0, #0]
 80068b6:	6813      	ldr	r3, [r2, #0]
 80068b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80068bc:	6013      	str	r3, [r2, #0]
				if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) {
 80068be:	6803      	ldr	r3, [r0, #0]
 80068c0:	685a      	ldr	r2, [r3, #4]
 80068c2:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80068c6:	d003      	beq.n	80068d0 <I2C_Master_ADDR+0x1ae>
					hi2c->Instance->CR2 |= I2C_CR2_LAST;
 80068c8:	685a      	ldr	r2, [r3, #4]
 80068ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80068ce:	605a      	str	r2, [r3, #4]
				__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068d0:	2300      	movs	r3, #0
 80068d2:	9307      	str	r3, [sp, #28]
 80068d4:	6803      	ldr	r3, [r0, #0]
 80068d6:	695a      	ldr	r2, [r3, #20]
 80068d8:	9207      	str	r2, [sp, #28]
 80068da:	699b      	ldr	r3, [r3, #24]
 80068dc:	9307      	str	r3, [sp, #28]
 80068de:	9b07      	ldr	r3, [sp, #28]
 80068e0:	e751      	b.n	8006786 <I2C_Master_ADDR+0x64>
					hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80068e2:	6802      	ldr	r2, [r0, #0]
 80068e4:	6813      	ldr	r3, [r2, #0]
 80068e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80068ea:	6013      	str	r3, [r2, #0]
 80068ec:	e7e7      	b.n	80068be <I2C_Master_ADDR+0x19c>

080068ee <I2C_SlaveTransmit_BTF>:
 *         the configuration information for I2C module
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
	if (hi2c->XferCount != 0U) {
 80068ee:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	b153      	cbz	r3, 800690a <I2C_SlaveTransmit_BTF+0x1c>
		/* Write data to DR */
		hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80068f4:	6802      	ldr	r2, [r0, #0]
 80068f6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80068f8:	1c59      	adds	r1, r3, #1
 80068fa:	6241      	str	r1, [r0, #36]	; 0x24
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	6113      	str	r3, [r2, #16]
		hi2c->XferCount--;
 8006900:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8006902:	b29b      	uxth	r3, r3
 8006904:	3b01      	subs	r3, #1
 8006906:	b29b      	uxth	r3, r3
 8006908:	8543      	strh	r3, [r0, #42]	; 0x2a
	}
	return HAL_OK;
}
 800690a:	2000      	movs	r0, #0
 800690c:	4770      	bx	lr

0800690e <I2C_SlaveReceive_BTF>:
 *         the configuration information for I2C module
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
	if (hi2c->XferCount != 0U) {
 800690e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8006910:	b29b      	uxth	r3, r3
 8006912:	b153      	cbz	r3, 800692a <I2C_SlaveReceive_BTF+0x1c>
		/* Read data from DR */
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8006914:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006916:	1c5a      	adds	r2, r3, #1
 8006918:	6242      	str	r2, [r0, #36]	; 0x24
 800691a:	6802      	ldr	r2, [r0, #0]
 800691c:	6912      	ldr	r2, [r2, #16]
 800691e:	701a      	strb	r2, [r3, #0]
		hi2c->XferCount--;
 8006920:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8006922:	b29b      	uxth	r3, r3
 8006924:	3b01      	subs	r3, #1
 8006926:	b29b      	uxth	r3, r3
 8006928:	8543      	strh	r3, [r0, #42]	; 0x2a
	}
	return HAL_OK;
}
 800692a:	2000      	movs	r0, #0
 800692c:	4770      	bx	lr

0800692e <I2C_IsAcknowledgeFailed>:
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
	if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) {
 800692e:	6803      	ldr	r3, [r0, #0]
 8006930:	695a      	ldr	r2, [r3, #20]
 8006932:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8006936:	d00d      	beq.n	8006954 <I2C_IsAcknowledgeFailed+0x26>
		/* Clear NACKF Flag */
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006938:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800693c:	615a      	str	r2, [r3, #20]

		hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800693e:	2304      	movs	r3, #4
 8006940:	6403      	str	r3, [r0, #64]	; 0x40
		hi2c->PreviousState = I2C_STATE_NONE;
 8006942:	2300      	movs	r3, #0
 8006944:	6303      	str	r3, [r0, #48]	; 0x30
		hi2c->State = HAL_I2C_STATE_READY;
 8006946:	2220      	movs	r2, #32
 8006948:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

		/* Process Unlocked */
		__HAL_UNLOCK(hi2c);
 800694c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

		return HAL_ERROR;
 8006950:	2001      	movs	r0, #1
 8006952:	4770      	bx	lr
	}
	return HAL_OK;
 8006954:	2000      	movs	r0, #0
}
 8006956:	4770      	bx	lr

08006958 <I2C_WaitOnFlagUntilTimeout>:
{
 8006958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800695a:	4606      	mov	r6, r0
 800695c:	460c      	mov	r4, r1
 800695e:	4617      	mov	r7, r2
 8006960:	461d      	mov	r5, r3
	while ((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) {
 8006962:	e01e      	b.n	80069a2 <I2C_WaitOnFlagUntilTimeout+0x4a>
			if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 8006964:	b12d      	cbz	r5, 8006972 <I2C_WaitOnFlagUntilTimeout+0x1a>
 8006966:	f7fe fcd3 	bl	8005310 <HAL_GetTick>
 800696a:	9b06      	ldr	r3, [sp, #24]
 800696c:	1ac0      	subs	r0, r0, r3
 800696e:	4285      	cmp	r5, r0
 8006970:	d217      	bcs.n	80069a2 <I2C_WaitOnFlagUntilTimeout+0x4a>
				hi2c->PreviousState = I2C_STATE_NONE;
 8006972:	2300      	movs	r3, #0
 8006974:	6333      	str	r3, [r6, #48]	; 0x30
				hi2c->State = HAL_I2C_STATE_READY;
 8006976:	2220      	movs	r2, #32
 8006978:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
				hi2c->Mode = HAL_I2C_MODE_NONE;
 800697c:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
				__HAL_UNLOCK(hi2c);
 8006980:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
				return HAL_TIMEOUT;
 8006984:	2003      	movs	r0, #3
 8006986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	while ((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) {
 8006988:	6833      	ldr	r3, [r6, #0]
 800698a:	695b      	ldr	r3, [r3, #20]
 800698c:	ea24 0303 	bic.w	r3, r4, r3
 8006990:	b29b      	uxth	r3, r3
 8006992:	fab3 f383 	clz	r3, r3
 8006996:	095b      	lsrs	r3, r3, #5
 8006998:	42bb      	cmp	r3, r7
 800699a:	d10f      	bne.n	80069bc <I2C_WaitOnFlagUntilTimeout+0x64>
		if (Timeout != HAL_MAX_DELAY) {
 800699c:	f1b5 3fff 	cmp.w	r5, #4294967295
 80069a0:	d1e0      	bne.n	8006964 <I2C_WaitOnFlagUntilTimeout+0xc>
	while ((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) {
 80069a2:	f3c4 4307 	ubfx	r3, r4, #16, #8
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d0ee      	beq.n	8006988 <I2C_WaitOnFlagUntilTimeout+0x30>
 80069aa:	6833      	ldr	r3, [r6, #0]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	ea24 0303 	bic.w	r3, r4, r3
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	fab3 f383 	clz	r3, r3
 80069b8:	095b      	lsrs	r3, r3, #5
 80069ba:	e7ed      	b.n	8006998 <I2C_WaitOnFlagUntilTimeout+0x40>
	return HAL_OK;
 80069bc:	2000      	movs	r0, #0
}
 80069be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080069c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80069c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069c2:	4604      	mov	r4, r0
 80069c4:	460d      	mov	r5, r1
 80069c6:	4616      	mov	r6, r2
 80069c8:	461f      	mov	r7, r3
	while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET) {
 80069ca:	e032      	b.n	8006a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
			hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069d2:	601a      	str	r2, [r3, #0]
			__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069d4:	6823      	ldr	r3, [r4, #0]
 80069d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80069da:	615a      	str	r2, [r3, #20]
			hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80069dc:	2304      	movs	r3, #4
 80069de:	6423      	str	r3, [r4, #64]	; 0x40
			hi2c->PreviousState = I2C_STATE_NONE;
 80069e0:	2300      	movs	r3, #0
 80069e2:	6323      	str	r3, [r4, #48]	; 0x30
			hi2c->State = HAL_I2C_STATE_READY;
 80069e4:	2220      	movs	r2, #32
 80069e6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
			__HAL_UNLOCK(hi2c);
 80069ea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			return HAL_ERROR;
 80069ee:	2001      	movs	r0, #1
 80069f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 80069f2:	b126      	cbz	r6, 80069fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>
 80069f4:	f7fe fc8c 	bl	8005310 <HAL_GetTick>
 80069f8:	1bc0      	subs	r0, r0, r7
 80069fa:	4286      	cmp	r6, r0
 80069fc:	d219      	bcs.n	8006a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
				hi2c->PreviousState = I2C_STATE_NONE;
 80069fe:	2300      	movs	r3, #0
 8006a00:	6323      	str	r3, [r4, #48]	; 0x30
				hi2c->State = HAL_I2C_STATE_READY;
 8006a02:	2220      	movs	r2, #32
 8006a04:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
				__HAL_UNLOCK(hi2c);
 8006a08:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
				return HAL_TIMEOUT;
 8006a0c:	2003      	movs	r0, #3
 8006a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET) {
 8006a10:	6823      	ldr	r3, [r4, #0]
 8006a12:	695b      	ldr	r3, [r3, #20]
 8006a14:	ea25 0303 	bic.w	r3, r5, r3
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	3300      	adds	r3, #0
 8006a1c:	bf18      	it	ne
 8006a1e:	2301      	movne	r3, #1
 8006a20:	b1a3      	cbz	r3, 8006a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8c>
		if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) {
 8006a22:	6823      	ldr	r3, [r4, #0]
 8006a24:	695a      	ldr	r2, [r3, #20]
 8006a26:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8006a2a:	d1cf      	bne.n	80069cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
		if (Timeout != HAL_MAX_DELAY) {
 8006a2c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8006a30:	d1df      	bne.n	80069f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x32>
	while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET) {
 8006a32:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d0ea      	beq.n	8006a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x50>
 8006a3a:	6823      	ldr	r3, [r4, #0]
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	ea25 0303 	bic.w	r3, r5, r3
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	3300      	adds	r3, #0
 8006a46:	bf18      	it	ne
 8006a48:	2301      	movne	r3, #1
 8006a4a:	e7e9      	b.n	8006a20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
	return HAL_OK;
 8006a4c:	2000      	movs	r0, #0
}
 8006a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006a50 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8006a50:	b570      	push	{r4, r5, r6, lr}
 8006a52:	4604      	mov	r4, r0
 8006a54:	460d      	mov	r5, r1
 8006a56:	4616      	mov	r6, r2
	while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET) {
 8006a58:	6823      	ldr	r3, [r4, #0]
 8006a5a:	695b      	ldr	r3, [r3, #20]
 8006a5c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006a60:	d119      	bne.n	8006a96 <I2C_WaitOnTXEFlagUntilTimeout+0x46>
		if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK) {
 8006a62:	4620      	mov	r0, r4
 8006a64:	f7ff ff63 	bl	800692e <I2C_IsAcknowledgeFailed>
 8006a68:	b9b8      	cbnz	r0, 8006a9a <I2C_WaitOnTXEFlagUntilTimeout+0x4a>
		if (Timeout != HAL_MAX_DELAY) {
 8006a6a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006a6e:	d0f3      	beq.n	8006a58 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
			if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 8006a70:	b125      	cbz	r5, 8006a7c <I2C_WaitOnTXEFlagUntilTimeout+0x2c>
 8006a72:	f7fe fc4d 	bl	8005310 <HAL_GetTick>
 8006a76:	1b80      	subs	r0, r0, r6
 8006a78:	4285      	cmp	r5, r0
 8006a7a:	d2ed      	bcs.n	8006a58 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
				hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a7e:	f043 0320 	orr.w	r3, r3, #32
 8006a82:	6423      	str	r3, [r4, #64]	; 0x40
				hi2c->PreviousState = I2C_STATE_NONE;
 8006a84:	2300      	movs	r3, #0
 8006a86:	6323      	str	r3, [r4, #48]	; 0x30
				hi2c->State = HAL_I2C_STATE_READY;
 8006a88:	2220      	movs	r2, #32
 8006a8a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
				__HAL_UNLOCK(hi2c);
 8006a8e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
				return HAL_TIMEOUT;
 8006a92:	2003      	movs	r0, #3
 8006a94:	bd70      	pop	{r4, r5, r6, pc}
	return HAL_OK;
 8006a96:	2000      	movs	r0, #0
 8006a98:	bd70      	pop	{r4, r5, r6, pc}
			return HAL_ERROR;
 8006a9a:	2001      	movs	r0, #1
}
 8006a9c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006aa0 <I2C_RequestMemoryWrite>:
{
 8006aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aa4:	b084      	sub	sp, #16
 8006aa6:	4605      	mov	r5, r0
 8006aa8:	4688      	mov	r8, r1
 8006aaa:	4616      	mov	r6, r2
 8006aac:	461f      	mov	r7, r3
 8006aae:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	hi2c->Instance->CR1 |= I2C_CR1_START;
 8006ab0:	6802      	ldr	r2, [r0, #0]
 8006ab2:	6813      	ldr	r3, [r2, #0]
 8006ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ab8:	6013      	str	r3, [r2, #0]
	if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 8006aba:	9400      	str	r4, [sp, #0]
 8006abc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006ac4:	f7ff ff48 	bl	8006958 <I2C_WaitOnFlagUntilTimeout>
 8006ac8:	b120      	cbz	r0, 8006ad4 <I2C_RequestMemoryWrite+0x34>
		return HAL_TIMEOUT;
 8006aca:	2303      	movs	r3, #3
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	b004      	add	sp, #16
 8006ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006ad4:	682a      	ldr	r2, [r5, #0]
 8006ad6:	f008 03fe 	and.w	r3, r8, #254	; 0xfe
 8006ada:	6113      	str	r3, [r2, #16]
	if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 8006adc:	4623      	mov	r3, r4
 8006ade:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ae0:	4923      	ldr	r1, [pc, #140]	; (8006b70 <I2C_RequestMemoryWrite+0xd0>)
 8006ae2:	4628      	mov	r0, r5
 8006ae4:	f7ff ff6c 	bl	80069c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ae8:	b130      	cbz	r0, 8006af8 <I2C_RequestMemoryWrite+0x58>
		if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8006aea:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8006aec:	2b04      	cmp	r3, #4
 8006aee:	d001      	beq.n	8006af4 <I2C_RequestMemoryWrite+0x54>
			return HAL_TIMEOUT;
 8006af0:	2303      	movs	r3, #3
 8006af2:	e7eb      	b.n	8006acc <I2C_RequestMemoryWrite+0x2c>
			return HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	e7e9      	b.n	8006acc <I2C_RequestMemoryWrite+0x2c>
	__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006af8:	2300      	movs	r3, #0
 8006afa:	9303      	str	r3, [sp, #12]
 8006afc:	682b      	ldr	r3, [r5, #0]
 8006afe:	695a      	ldr	r2, [r3, #20]
 8006b00:	9203      	str	r2, [sp, #12]
 8006b02:	699b      	ldr	r3, [r3, #24]
 8006b04:	9303      	str	r3, [sp, #12]
 8006b06:	9b03      	ldr	r3, [sp, #12]
	if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 8006b08:	4622      	mov	r2, r4
 8006b0a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006b0c:	4628      	mov	r0, r5
 8006b0e:	f7ff ff9f 	bl	8006a50 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b12:	4603      	mov	r3, r0
 8006b14:	b158      	cbz	r0, 8006b2e <I2C_RequestMemoryWrite+0x8e>
		if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8006b16:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8006b18:	2b04      	cmp	r3, #4
 8006b1a:	d001      	beq.n	8006b20 <I2C_RequestMemoryWrite+0x80>
			return HAL_TIMEOUT;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	e7d5      	b.n	8006acc <I2C_RequestMemoryWrite+0x2c>
			hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8006b20:	682a      	ldr	r2, [r5, #0]
 8006b22:	6813      	ldr	r3, [r2, #0]
 8006b24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b28:	6013      	str	r3, [r2, #0]
			return HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e7ce      	b.n	8006acc <I2C_RequestMemoryWrite+0x2c>
	if (MemAddSize == I2C_MEMADD_SIZE_8BIT) {
 8006b2e:	2f01      	cmp	r7, #1
 8006b30:	d00e      	beq.n	8006b50 <I2C_RequestMemoryWrite+0xb0>
		hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006b32:	682b      	ldr	r3, [r5, #0]
 8006b34:	0a32      	lsrs	r2, r6, #8
 8006b36:	611a      	str	r2, [r3, #16]
		if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 8006b38:	4622      	mov	r2, r4
 8006b3a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006b3c:	4628      	mov	r0, r5
 8006b3e:	f7ff ff87 	bl	8006a50 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b42:	4603      	mov	r3, r0
 8006b44:	b178      	cbz	r0, 8006b66 <I2C_RequestMemoryWrite+0xc6>
			if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8006b46:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8006b48:	2b04      	cmp	r3, #4
 8006b4a:	d005      	beq.n	8006b58 <I2C_RequestMemoryWrite+0xb8>
				return HAL_TIMEOUT;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	e7bd      	b.n	8006acc <I2C_RequestMemoryWrite+0x2c>
		hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b50:	682a      	ldr	r2, [r5, #0]
 8006b52:	b2f6      	uxtb	r6, r6
 8006b54:	6116      	str	r6, [r2, #16]
 8006b56:	e7b9      	b.n	8006acc <I2C_RequestMemoryWrite+0x2c>
				hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8006b58:	682a      	ldr	r2, [r5, #0]
 8006b5a:	6813      	ldr	r3, [r2, #0]
 8006b5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b60:	6013      	str	r3, [r2, #0]
				return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e7b2      	b.n	8006acc <I2C_RequestMemoryWrite+0x2c>
		hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b66:	682a      	ldr	r2, [r5, #0]
 8006b68:	b2f6      	uxtb	r6, r6
 8006b6a:	6116      	str	r6, [r2, #16]
 8006b6c:	e7ae      	b.n	8006acc <I2C_RequestMemoryWrite+0x2c>
 8006b6e:	bf00      	nop
 8006b70:	00010002 	.word	0x00010002

08006b74 <I2C_RequestMemoryRead>:
{
 8006b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b78:	b084      	sub	sp, #16
 8006b7a:	4605      	mov	r5, r0
 8006b7c:	460e      	mov	r6, r1
 8006b7e:	4617      	mov	r7, r2
 8006b80:	4698      	mov	r8, r3
 8006b82:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8006b84:	6802      	ldr	r2, [r0, #0]
 8006b86:	6813      	ldr	r3, [r2, #0]
 8006b88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006b8c:	6013      	str	r3, [r2, #0]
	hi2c->Instance->CR1 |= I2C_CR1_START;
 8006b8e:	6802      	ldr	r2, [r0, #0]
 8006b90:	6813      	ldr	r3, [r2, #0]
 8006b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b96:	6013      	str	r3, [r2, #0]
	if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 8006b98:	9400      	str	r4, [sp, #0]
 8006b9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006ba2:	f7ff fed9 	bl	8006958 <I2C_WaitOnFlagUntilTimeout>
 8006ba6:	b120      	cbz	r0, 8006bb2 <I2C_RequestMemoryRead+0x3e>
		return HAL_TIMEOUT;
 8006ba8:	2303      	movs	r3, #3
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	b004      	add	sp, #16
 8006bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006bb2:	682b      	ldr	r3, [r5, #0]
 8006bb4:	b2f6      	uxtb	r6, r6
 8006bb6:	f006 02fe 	and.w	r2, r6, #254	; 0xfe
 8006bba:	611a      	str	r2, [r3, #16]
	if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 8006bbc:	4623      	mov	r3, r4
 8006bbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bc0:	493d      	ldr	r1, [pc, #244]	; (8006cb8 <I2C_RequestMemoryRead+0x144>)
 8006bc2:	4628      	mov	r0, r5
 8006bc4:	f7ff fefc 	bl	80069c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006bc8:	b130      	cbz	r0, 8006bd8 <I2C_RequestMemoryRead+0x64>
		if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8006bca:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8006bcc:	2b04      	cmp	r3, #4
 8006bce:	d001      	beq.n	8006bd4 <I2C_RequestMemoryRead+0x60>
			return HAL_TIMEOUT;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e7ea      	b.n	8006baa <I2C_RequestMemoryRead+0x36>
			return HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e7e8      	b.n	8006baa <I2C_RequestMemoryRead+0x36>
	__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bd8:	2300      	movs	r3, #0
 8006bda:	9303      	str	r3, [sp, #12]
 8006bdc:	682b      	ldr	r3, [r5, #0]
 8006bde:	695a      	ldr	r2, [r3, #20]
 8006be0:	9203      	str	r2, [sp, #12]
 8006be2:	699b      	ldr	r3, [r3, #24]
 8006be4:	9303      	str	r3, [sp, #12]
 8006be6:	9b03      	ldr	r3, [sp, #12]
	if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 8006be8:	4622      	mov	r2, r4
 8006bea:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006bec:	4628      	mov	r0, r5
 8006bee:	f7ff ff2f 	bl	8006a50 <I2C_WaitOnTXEFlagUntilTimeout>
 8006bf2:	b158      	cbz	r0, 8006c0c <I2C_RequestMemoryRead+0x98>
		if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8006bf4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8006bf6:	2b04      	cmp	r3, #4
 8006bf8:	d001      	beq.n	8006bfe <I2C_RequestMemoryRead+0x8a>
			return HAL_TIMEOUT;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	e7d5      	b.n	8006baa <I2C_RequestMemoryRead+0x36>
			hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8006bfe:	682a      	ldr	r2, [r5, #0]
 8006c00:	6813      	ldr	r3, [r2, #0]
 8006c02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c06:	6013      	str	r3, [r2, #0]
			return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e7ce      	b.n	8006baa <I2C_RequestMemoryRead+0x36>
	if (MemAddSize == I2C_MEMADD_SIZE_8BIT) {
 8006c0c:	f1b8 0f01 	cmp.w	r8, #1
 8006c10:	d00d      	beq.n	8006c2e <I2C_RequestMemoryRead+0xba>
		hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006c12:	682b      	ldr	r3, [r5, #0]
 8006c14:	0a3a      	lsrs	r2, r7, #8
 8006c16:	611a      	str	r2, [r3, #16]
		if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 8006c18:	4622      	mov	r2, r4
 8006c1a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006c1c:	4628      	mov	r0, r5
 8006c1e:	f7ff ff17 	bl	8006a50 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c22:	b1c8      	cbz	r0, 8006c58 <I2C_RequestMemoryRead+0xe4>
			if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8006c24:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8006c26:	2b04      	cmp	r3, #4
 8006c28:	d00f      	beq.n	8006c4a <I2C_RequestMemoryRead+0xd6>
				return HAL_TIMEOUT;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e7bd      	b.n	8006baa <I2C_RequestMemoryRead+0x36>
		hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c2e:	682b      	ldr	r3, [r5, #0]
 8006c30:	b2ff      	uxtb	r7, r7
 8006c32:	611f      	str	r7, [r3, #16]
	if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 8006c34:	4622      	mov	r2, r4
 8006c36:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006c38:	4628      	mov	r0, r5
 8006c3a:	f7ff ff09 	bl	8006a50 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c3e:	b1b0      	cbz	r0, 8006c6e <I2C_RequestMemoryRead+0xfa>
		if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8006c40:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8006c42:	2b04      	cmp	r3, #4
 8006c44:	d00c      	beq.n	8006c60 <I2C_RequestMemoryRead+0xec>
			return HAL_TIMEOUT;
 8006c46:	2303      	movs	r3, #3
 8006c48:	e7af      	b.n	8006baa <I2C_RequestMemoryRead+0x36>
				hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8006c4a:	682a      	ldr	r2, [r5, #0]
 8006c4c:	6813      	ldr	r3, [r2, #0]
 8006c4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c52:	6013      	str	r3, [r2, #0]
				return HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	e7a8      	b.n	8006baa <I2C_RequestMemoryRead+0x36>
		hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c58:	682b      	ldr	r3, [r5, #0]
 8006c5a:	b2ff      	uxtb	r7, r7
 8006c5c:	611f      	str	r7, [r3, #16]
 8006c5e:	e7e9      	b.n	8006c34 <I2C_RequestMemoryRead+0xc0>
			hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8006c60:	682a      	ldr	r2, [r5, #0]
 8006c62:	6813      	ldr	r3, [r2, #0]
 8006c64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c68:	6013      	str	r3, [r2, #0]
			return HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e79d      	b.n	8006baa <I2C_RequestMemoryRead+0x36>
	hi2c->Instance->CR1 |= I2C_CR1_START;
 8006c6e:	682a      	ldr	r2, [r5, #0]
 8006c70:	6813      	ldr	r3, [r2, #0]
 8006c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c76:	6013      	str	r3, [r2, #0]
	if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 8006c78:	9400      	str	r4, [sp, #0]
 8006c7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006c82:	4628      	mov	r0, r5
 8006c84:	f7ff fe68 	bl	8006958 <I2C_WaitOnFlagUntilTimeout>
 8006c88:	b108      	cbz	r0, 8006c8e <I2C_RequestMemoryRead+0x11a>
		return HAL_TIMEOUT;
 8006c8a:	2303      	movs	r3, #3
 8006c8c:	e78d      	b.n	8006baa <I2C_RequestMemoryRead+0x36>
	hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006c8e:	682b      	ldr	r3, [r5, #0]
 8006c90:	f046 0601 	orr.w	r6, r6, #1
 8006c94:	611e      	str	r6, [r3, #16]
	if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 8006c96:	4623      	mov	r3, r4
 8006c98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c9a:	4907      	ldr	r1, [pc, #28]	; (8006cb8 <I2C_RequestMemoryRead+0x144>)
 8006c9c:	4628      	mov	r0, r5
 8006c9e:	f7ff fe8f 	bl	80069c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2800      	cmp	r0, #0
 8006ca6:	d080      	beq.n	8006baa <I2C_RequestMemoryRead+0x36>
		if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8006ca8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8006caa:	2b04      	cmp	r3, #4
 8006cac:	d001      	beq.n	8006cb2 <I2C_RequestMemoryRead+0x13e>
			return HAL_TIMEOUT;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	e77b      	b.n	8006baa <I2C_RequestMemoryRead+0x36>
			return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e779      	b.n	8006baa <I2C_RequestMemoryRead+0x36>
 8006cb6:	bf00      	nop
 8006cb8:	00010002 	.word	0x00010002

08006cbc <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8006cbc:	b570      	push	{r4, r5, r6, lr}
 8006cbe:	4604      	mov	r4, r0
 8006cc0:	460d      	mov	r5, r1
 8006cc2:	4616      	mov	r6, r2
	while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET) {
 8006cc4:	6823      	ldr	r3, [r4, #0]
 8006cc6:	695b      	ldr	r3, [r3, #20]
 8006cc8:	f013 0f04 	tst.w	r3, #4
 8006ccc:	d119      	bne.n	8006d02 <I2C_WaitOnBTFFlagUntilTimeout+0x46>
		if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK) {
 8006cce:	4620      	mov	r0, r4
 8006cd0:	f7ff fe2d 	bl	800692e <I2C_IsAcknowledgeFailed>
 8006cd4:	b9b8      	cbnz	r0, 8006d06 <I2C_WaitOnBTFFlagUntilTimeout+0x4a>
		if (Timeout != HAL_MAX_DELAY) {
 8006cd6:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006cda:	d0f3      	beq.n	8006cc4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
			if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 8006cdc:	b125      	cbz	r5, 8006ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x2c>
 8006cde:	f7fe fb17 	bl	8005310 <HAL_GetTick>
 8006ce2:	1b80      	subs	r0, r0, r6
 8006ce4:	4285      	cmp	r5, r0
 8006ce6:	d2ed      	bcs.n	8006cc4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
				hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ce8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006cea:	f043 0320 	orr.w	r3, r3, #32
 8006cee:	6423      	str	r3, [r4, #64]	; 0x40
				hi2c->PreviousState = I2C_STATE_NONE;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	6323      	str	r3, [r4, #48]	; 0x30
				hi2c->State = HAL_I2C_STATE_READY;
 8006cf4:	2220      	movs	r2, #32
 8006cf6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
				__HAL_UNLOCK(hi2c);
 8006cfa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
				return HAL_TIMEOUT;
 8006cfe:	2003      	movs	r0, #3
 8006d00:	bd70      	pop	{r4, r5, r6, pc}
	return HAL_OK;
 8006d02:	2000      	movs	r0, #0
 8006d04:	bd70      	pop	{r4, r5, r6, pc}
			return HAL_ERROR;
 8006d06:	2001      	movs	r0, #1
}
 8006d08:	bd70      	pop	{r4, r5, r6, pc}

08006d0a <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8006d0a:	b570      	push	{r4, r5, r6, lr}
 8006d0c:	4605      	mov	r5, r0
 8006d0e:	460c      	mov	r4, r1
 8006d10:	4616      	mov	r6, r2
	while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) {
 8006d12:	682b      	ldr	r3, [r5, #0]
 8006d14:	695a      	ldr	r2, [r3, #20]
 8006d16:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006d1a:	d122      	bne.n	8006d62 <I2C_WaitOnRXNEFlagUntilTimeout+0x58>
		if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) {
 8006d1c:	695a      	ldr	r2, [r3, #20]
 8006d1e:	f012 0f10 	tst.w	r2, #16
 8006d22:	d111      	bne.n	8006d48 <I2C_WaitOnRXNEFlagUntilTimeout+0x3e>
		if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 8006d24:	b124      	cbz	r4, 8006d30 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
 8006d26:	f7fe faf3 	bl	8005310 <HAL_GetTick>
 8006d2a:	1b80      	subs	r0, r0, r6
 8006d2c:	4284      	cmp	r4, r0
 8006d2e:	d2f0      	bcs.n	8006d12 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
			hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d30:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8006d32:	f043 0320 	orr.w	r3, r3, #32
 8006d36:	642b      	str	r3, [r5, #64]	; 0x40
			hi2c->State = HAL_I2C_STATE_READY;
 8006d38:	2320      	movs	r3, #32
 8006d3a:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
			__HAL_UNLOCK(hi2c);
 8006d3e:	2300      	movs	r3, #0
 8006d40:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
			return HAL_TIMEOUT;
 8006d44:	2003      	movs	r0, #3
 8006d46:	bd70      	pop	{r4, r5, r6, pc}
			__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d48:	f06f 0210 	mvn.w	r2, #16
 8006d4c:	615a      	str	r2, [r3, #20]
			hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	642b      	str	r3, [r5, #64]	; 0x40
			hi2c->PreviousState = I2C_STATE_NONE;
 8006d52:	632b      	str	r3, [r5, #48]	; 0x30
			hi2c->State = HAL_I2C_STATE_READY;
 8006d54:	2220      	movs	r2, #32
 8006d56:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
			__HAL_UNLOCK(hi2c);
 8006d5a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
			return HAL_ERROR;
 8006d5e:	2001      	movs	r0, #1
 8006d60:	bd70      	pop	{r4, r5, r6, pc}
	return HAL_OK;
 8006d62:	2000      	movs	r0, #0
}
 8006d64:	bd70      	pop	{r4, r5, r6, pc}
	...

08006d68 <HAL_I2C_Init>:
	if (hi2c == NULL) {
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	f000 80e7 	beq.w	8006f3c <HAL_I2C_Init+0x1d4>
{
 8006d6e:	b538      	push	{r3, r4, r5, lr}
 8006d70:	4604      	mov	r4, r0
	assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8006d72:	6803      	ldr	r3, [r0, #0]
 8006d74:	4a72      	ldr	r2, [pc, #456]	; (8006f40 <HAL_I2C_Init+0x1d8>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d00c      	beq.n	8006d94 <HAL_I2C_Init+0x2c>
 8006d7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d008      	beq.n	8006d94 <HAL_I2C_Init+0x2c>
 8006d82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d004      	beq.n	8006d94 <HAL_I2C_Init+0x2c>
 8006d8a:	f240 116d 	movw	r1, #365	; 0x16d
 8006d8e:	486d      	ldr	r0, [pc, #436]	; (8006f44 <HAL_I2C_Init+0x1dc>)
 8006d90:	f005 facc 	bl	800c32c <assert_failed>
	assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8006d94:	6863      	ldr	r3, [r4, #4]
 8006d96:	3b01      	subs	r3, #1
 8006d98:	4a6b      	ldr	r2, [pc, #428]	; (8006f48 <HAL_I2C_Init+0x1e0>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	f200 8081 	bhi.w	8006ea2 <HAL_I2C_Init+0x13a>
	assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8006da0:	68a3      	ldr	r3, [r4, #8]
 8006da2:	b13b      	cbz	r3, 8006db4 <HAL_I2C_Init+0x4c>
 8006da4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006da8:	d004      	beq.n	8006db4 <HAL_I2C_Init+0x4c>
 8006daa:	f240 116f 	movw	r1, #367	; 0x16f
 8006dae:	4865      	ldr	r0, [pc, #404]	; (8006f44 <HAL_I2C_Init+0x1dc>)
 8006db0:	f005 fabc 	bl	800c32c <assert_failed>
	assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8006db4:	68e3      	ldr	r3, [r4, #12]
 8006db6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006dba:	f023 0303 	bic.w	r3, r3, #3
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d175      	bne.n	8006eae <HAL_I2C_Init+0x146>
	assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8006dc2:	6923      	ldr	r3, [r4, #16]
 8006dc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006dc8:	d007      	beq.n	8006dda <HAL_I2C_Init+0x72>
 8006dca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006dce:	d004      	beq.n	8006dda <HAL_I2C_Init+0x72>
 8006dd0:	f240 1171 	movw	r1, #369	; 0x171
 8006dd4:	485b      	ldr	r0, [pc, #364]	; (8006f44 <HAL_I2C_Init+0x1dc>)
 8006dd6:	f005 faa9 	bl	800c32c <assert_failed>
	assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8006dda:	6963      	ldr	r3, [r4, #20]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d904      	bls.n	8006dea <HAL_I2C_Init+0x82>
 8006de0:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8006de4:	4857      	ldr	r0, [pc, #348]	; (8006f44 <HAL_I2C_Init+0x1dc>)
 8006de6:	f005 faa1 	bl	800c32c <assert_failed>
	assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8006dea:	69a3      	ldr	r3, [r4, #24]
 8006dec:	f033 03fe 	bics.w	r3, r3, #254	; 0xfe
 8006df0:	d163      	bne.n	8006eba <HAL_I2C_Init+0x152>
	assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8006df2:	69e3      	ldr	r3, [r4, #28]
 8006df4:	b133      	cbz	r3, 8006e04 <HAL_I2C_Init+0x9c>
 8006df6:	2b40      	cmp	r3, #64	; 0x40
 8006df8:	d004      	beq.n	8006e04 <HAL_I2C_Init+0x9c>
 8006dfa:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8006dfe:	4851      	ldr	r0, [pc, #324]	; (8006f44 <HAL_I2C_Init+0x1dc>)
 8006e00:	f005 fa94 	bl	800c32c <assert_failed>
	assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8006e04:	6a23      	ldr	r3, [r4, #32]
 8006e06:	b133      	cbz	r3, 8006e16 <HAL_I2C_Init+0xae>
 8006e08:	2b80      	cmp	r3, #128	; 0x80
 8006e0a:	d004      	beq.n	8006e16 <HAL_I2C_Init+0xae>
 8006e0c:	f240 1175 	movw	r1, #373	; 0x175
 8006e10:	484c      	ldr	r0, [pc, #304]	; (8006f44 <HAL_I2C_Init+0x1dc>)
 8006e12:	f005 fa8b 	bl	800c32c <assert_failed>
	if (hi2c->State == HAL_I2C_STATE_RESET) {
 8006e16:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d053      	beq.n	8006ec6 <HAL_I2C_Init+0x15e>
	hi2c->State = HAL_I2C_STATE_BUSY;
 8006e1e:	2324      	movs	r3, #36	; 0x24
 8006e20:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	__HAL_I2C_DISABLE(hi2c);
 8006e24:	6822      	ldr	r2, [r4, #0]
 8006e26:	6813      	ldr	r3, [r2, #0]
 8006e28:	f023 0301 	bic.w	r3, r3, #1
 8006e2c:	6013      	str	r3, [r2, #0]
	pclk1 = HAL_RCC_GetPCLK1Freq();
 8006e2e:	f001 fbcd 	bl	80085cc <HAL_RCC_GetPCLK1Freq>
	freqrange = I2C_FREQRANGE(pclk1);
 8006e32:	4b46      	ldr	r3, [pc, #280]	; (8006f4c <HAL_I2C_Init+0x1e4>)
 8006e34:	fba3 2300 	umull	r2, r3, r3, r0
 8006e38:	0c9b      	lsrs	r3, r3, #18
	hi2c->Instance->CR2 = freqrange;
 8006e3a:	6822      	ldr	r2, [r4, #0]
 8006e3c:	6053      	str	r3, [r2, #4]
	hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8006e3e:	6821      	ldr	r1, [r4, #0]
 8006e40:	6865      	ldr	r5, [r4, #4]
 8006e42:	4a43      	ldr	r2, [pc, #268]	; (8006f50 <HAL_I2C_Init+0x1e8>)
 8006e44:	4295      	cmp	r5, r2
 8006e46:	d844      	bhi.n	8006ed2 <HAL_I2C_Init+0x16a>
 8006e48:	3301      	adds	r3, #1
 8006e4a:	620b      	str	r3, [r1, #32]
	hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8006e4c:	6821      	ldr	r1, [r4, #0]
 8006e4e:	6863      	ldr	r3, [r4, #4]
 8006e50:	4a3f      	ldr	r2, [pc, #252]	; (8006f50 <HAL_I2C_Init+0x1e8>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d847      	bhi.n	8006ee6 <HAL_I2C_Init+0x17e>
 8006e56:	005b      	lsls	r3, r3, #1
 8006e58:	fbb0 f0f3 	udiv	r0, r0, r3
 8006e5c:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8006e60:	2b03      	cmp	r3, #3
 8006e62:	d800      	bhi.n	8006e66 <HAL_I2C_Init+0xfe>
 8006e64:	2004      	movs	r0, #4
 8006e66:	61c8      	str	r0, [r1, #28]
	hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006e68:	6822      	ldr	r2, [r4, #0]
 8006e6a:	69e3      	ldr	r3, [r4, #28]
 8006e6c:	6a21      	ldr	r1, [r4, #32]
 8006e6e:	430b      	orrs	r3, r1
 8006e70:	6013      	str	r3, [r2, #0]
	hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8006e72:	6822      	ldr	r2, [r4, #0]
 8006e74:	6923      	ldr	r3, [r4, #16]
 8006e76:	68e1      	ldr	r1, [r4, #12]
 8006e78:	430b      	orrs	r3, r1
 8006e7a:	6093      	str	r3, [r2, #8]
	hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8006e7c:	6822      	ldr	r2, [r4, #0]
 8006e7e:	6963      	ldr	r3, [r4, #20]
 8006e80:	69a1      	ldr	r1, [r4, #24]
 8006e82:	430b      	orrs	r3, r1
 8006e84:	60d3      	str	r3, [r2, #12]
	__HAL_I2C_ENABLE(hi2c);
 8006e86:	6822      	ldr	r2, [r4, #0]
 8006e88:	6813      	ldr	r3, [r2, #0]
 8006e8a:	f043 0301 	orr.w	r3, r3, #1
 8006e8e:	6013      	str	r3, [r2, #0]
	hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e90:	2000      	movs	r0, #0
 8006e92:	6420      	str	r0, [r4, #64]	; 0x40
	hi2c->State = HAL_I2C_STATE_READY;
 8006e94:	2320      	movs	r3, #32
 8006e96:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	hi2c->PreviousState = I2C_STATE_NONE;
 8006e9a:	6320      	str	r0, [r4, #48]	; 0x30
	hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e9c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
	return HAL_OK;
 8006ea0:	bd38      	pop	{r3, r4, r5, pc}
	assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8006ea2:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 8006ea6:	4827      	ldr	r0, [pc, #156]	; (8006f44 <HAL_I2C_Init+0x1dc>)
 8006ea8:	f005 fa40 	bl	800c32c <assert_failed>
 8006eac:	e778      	b.n	8006da0 <HAL_I2C_Init+0x38>
	assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8006eae:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8006eb2:	4824      	ldr	r0, [pc, #144]	; (8006f44 <HAL_I2C_Init+0x1dc>)
 8006eb4:	f005 fa3a 	bl	800c32c <assert_failed>
 8006eb8:	e783      	b.n	8006dc2 <HAL_I2C_Init+0x5a>
	assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8006eba:	f240 1173 	movw	r1, #371	; 0x173
 8006ebe:	4821      	ldr	r0, [pc, #132]	; (8006f44 <HAL_I2C_Init+0x1dc>)
 8006ec0:	f005 fa34 	bl	800c32c <assert_failed>
 8006ec4:	e795      	b.n	8006df2 <HAL_I2C_Init+0x8a>
		hi2c->Lock = HAL_UNLOCKED;
 8006ec6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		HAL_I2C_MspInit(hi2c);
 8006eca:	4620      	mov	r0, r4
 8006ecc:	f004 fc68 	bl	800b7a0 <HAL_I2C_MspInit>
 8006ed0:	e7a5      	b.n	8006e1e <HAL_I2C_Init+0xb6>
	hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8006ed2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006ed6:	fb02 f303 	mul.w	r3, r2, r3
 8006eda:	4a1e      	ldr	r2, [pc, #120]	; (8006f54 <HAL_I2C_Init+0x1ec>)
 8006edc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ee0:	099b      	lsrs	r3, r3, #6
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	e7b1      	b.n	8006e4a <HAL_I2C_Init+0xe2>
	hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8006ee6:	68a5      	ldr	r5, [r4, #8]
 8006ee8:	b98d      	cbnz	r5, 8006f0e <HAL_I2C_Init+0x1a6>
 8006eea:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8006eee:	fbb0 f2f2 	udiv	r2, r0, r2
 8006ef2:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8006ef6:	fab2 f282 	clz	r2, r2
 8006efa:	0952      	lsrs	r2, r2, #5
 8006efc:	b9e2      	cbnz	r2, 8006f38 <HAL_I2C_Init+0x1d0>
 8006efe:	b995      	cbnz	r5, 8006f26 <HAL_I2C_Init+0x1be>
 8006f00:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006f04:	fbb0 f0f3 	udiv	r0, r0, r3
 8006f08:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8006f0c:	e7ab      	b.n	8006e66 <HAL_I2C_Init+0xfe>
 8006f0e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006f12:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006f16:	fbb0 f2f2 	udiv	r2, r0, r2
 8006f1a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8006f1e:	fab2 f282 	clz	r2, r2
 8006f22:	0952      	lsrs	r2, r2, #5
 8006f24:	e7ea      	b.n	8006efc <HAL_I2C_Init+0x194>
 8006f26:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006f2a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006f2e:	fbb0 f0f3 	udiv	r0, r0, r3
 8006f32:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8006f36:	e796      	b.n	8006e66 <HAL_I2C_Init+0xfe>
 8006f38:	2001      	movs	r0, #1
 8006f3a:	e794      	b.n	8006e66 <HAL_I2C_Init+0xfe>
		return HAL_ERROR;
 8006f3c:	2001      	movs	r0, #1
 8006f3e:	4770      	bx	lr
 8006f40:	40005400 	.word	0x40005400
 8006f44:	0801e1ac 	.word	0x0801e1ac
 8006f48:	00061a7f 	.word	0x00061a7f
 8006f4c:	431bde83 	.word	0x431bde83
 8006f50:	000186a0 	.word	0x000186a0
 8006f54:	10624dd3 	.word	0x10624dd3

08006f58 <HAL_I2C_DeInit>:
	if (hi2c == NULL) {
 8006f58:	b338      	cbz	r0, 8006faa <HAL_I2C_DeInit+0x52>
{
 8006f5a:	b510      	push	{r4, lr}
 8006f5c:	4604      	mov	r4, r0
	assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8006f5e:	6803      	ldr	r3, [r0, #0]
 8006f60:	4a13      	ldr	r2, [pc, #76]	; (8006fb0 <HAL_I2C_DeInit+0x58>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d00c      	beq.n	8006f80 <HAL_I2C_DeInit+0x28>
 8006f66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d008      	beq.n	8006f80 <HAL_I2C_DeInit+0x28>
 8006f6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d004      	beq.n	8006f80 <HAL_I2C_DeInit+0x28>
 8006f76:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
 8006f7a:	480e      	ldr	r0, [pc, #56]	; (8006fb4 <HAL_I2C_DeInit+0x5c>)
 8006f7c:	f005 f9d6 	bl	800c32c <assert_failed>
	hi2c->State = HAL_I2C_STATE_BUSY;
 8006f80:	2324      	movs	r3, #36	; 0x24
 8006f82:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	__HAL_I2C_DISABLE(hi2c);
 8006f86:	6822      	ldr	r2, [r4, #0]
 8006f88:	6813      	ldr	r3, [r2, #0]
 8006f8a:	f023 0301 	bic.w	r3, r3, #1
 8006f8e:	6013      	str	r3, [r2, #0]
	HAL_I2C_MspDeInit(hi2c);
 8006f90:	4620      	mov	r0, r4
 8006f92:	f004 fc8d 	bl	800b8b0 <HAL_I2C_MspDeInit>
	hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f96:	2000      	movs	r0, #0
 8006f98:	6420      	str	r0, [r4, #64]	; 0x40
	hi2c->State = HAL_I2C_STATE_RESET;
 8006f9a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
	hi2c->PreviousState = I2C_STATE_NONE;
 8006f9e:	6320      	str	r0, [r4, #48]	; 0x30
	hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fa0:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
	__HAL_UNLOCK(hi2c);
 8006fa4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
	return HAL_OK;
 8006fa8:	bd10      	pop	{r4, pc}
		return HAL_ERROR;
 8006faa:	2001      	movs	r0, #1
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop
 8006fb0:	40005400 	.word	0x40005400
 8006fb4:	0801e1ac 	.word	0x0801e1ac

08006fb8 <HAL_I2C_Mem_Write>:
{
 8006fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fbc:	b082      	sub	sp, #8
 8006fbe:	4604      	mov	r4, r0
 8006fc0:	460f      	mov	r7, r1
 8006fc2:	4690      	mov	r8, r2
 8006fc4:	461d      	mov	r5, r3
	tickstart = HAL_GetTick();
 8006fc6:	f7fe f9a3 	bl	8005310 <HAL_GetTick>
 8006fca:	4606      	mov	r6, r0
	assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8006fcc:	2d01      	cmp	r5, #1
 8006fce:	d006      	beq.n	8006fde <HAL_I2C_Mem_Write+0x26>
 8006fd0:	2d10      	cmp	r5, #16
 8006fd2:	d004      	beq.n	8006fde <HAL_I2C_Mem_Write+0x26>
 8006fd4:	f640 01a5 	movw	r1, #2213	; 0x8a5
 8006fd8:	4858      	ldr	r0, [pc, #352]	; (800713c <HAL_I2C_Mem_Write+0x184>)
 8006fda:	f005 f9a7 	bl	800c32c <assert_failed>
	if (hi2c->State == HAL_I2C_STATE_READY) {
 8006fde:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	2b20      	cmp	r3, #32
 8006fe6:	d004      	beq.n	8006ff2 <HAL_I2C_Mem_Write+0x3a>
		return HAL_BUSY;
 8006fe8:	2302      	movs	r3, #2
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	b002      	add	sp, #8
 8006fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK) {
 8006ff2:	9600      	str	r6, [sp, #0]
 8006ff4:	2319      	movs	r3, #25
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	4951      	ldr	r1, [pc, #324]	; (8007140 <HAL_I2C_Mem_Write+0x188>)
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	f7ff fcac 	bl	8006958 <I2C_WaitOnFlagUntilTimeout>
 8007000:	b108      	cbz	r0, 8007006 <HAL_I2C_Mem_Write+0x4e>
			return HAL_BUSY;
 8007002:	2302      	movs	r3, #2
 8007004:	e7f1      	b.n	8006fea <HAL_I2C_Mem_Write+0x32>
		__HAL_LOCK(hi2c);
 8007006:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800700a:	2b01      	cmp	r3, #1
 800700c:	f000 8094 	beq.w	8007138 <HAL_I2C_Mem_Write+0x180>
 8007010:	2301      	movs	r3, #1
 8007012:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE) {
 8007016:	6823      	ldr	r3, [r4, #0]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	f012 0f01 	tst.w	r2, #1
 800701e:	d103      	bne.n	8007028 <HAL_I2C_Mem_Write+0x70>
			__HAL_I2C_ENABLE(hi2c);
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	f042 0201 	orr.w	r2, r2, #1
 8007026:	601a      	str	r2, [r3, #0]
		hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007028:	6822      	ldr	r2, [r4, #0]
 800702a:	6813      	ldr	r3, [r2, #0]
 800702c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007030:	6013      	str	r3, [r2, #0]
		hi2c->State = HAL_I2C_STATE_BUSY_TX;
 8007032:	2321      	movs	r3, #33	; 0x21
 8007034:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_MEM;
 8007038:	2340      	movs	r3, #64	; 0x40
 800703a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800703e:	2300      	movs	r3, #0
 8007040:	6423      	str	r3, [r4, #64]	; 0x40
		hi2c->pBuffPtr = pData;
 8007042:	9b08      	ldr	r3, [sp, #32]
 8007044:	6263      	str	r3, [r4, #36]	; 0x24
		hi2c->XferCount = Size;
 8007046:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800704a:	8563      	strh	r3, [r4, #42]	; 0x2a
		hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800704c:	4b3d      	ldr	r3, [pc, #244]	; (8007144 <HAL_I2C_Mem_Write+0x18c>)
 800704e:	62e3      	str	r3, [r4, #44]	; 0x2c
		hi2c->XferSize = hi2c->XferCount;
 8007050:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007052:	8523      	strh	r3, [r4, #40]	; 0x28
		if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK) {
 8007054:	9601      	str	r6, [sp, #4]
 8007056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007058:	9300      	str	r3, [sp, #0]
 800705a:	462b      	mov	r3, r5
 800705c:	4642      	mov	r2, r8
 800705e:	4639      	mov	r1, r7
 8007060:	4620      	mov	r0, r4
 8007062:	f7ff fd1d 	bl	8006aa0 <I2C_RequestMemoryWrite>
 8007066:	b1c0      	cbz	r0, 800709a <HAL_I2C_Mem_Write+0xe2>
			if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8007068:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800706a:	2b04      	cmp	r3, #4
 800706c:	d004      	beq.n	8007078 <HAL_I2C_Mem_Write+0xc0>
				__HAL_UNLOCK(hi2c);
 800706e:	2300      	movs	r3, #0
 8007070:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
				return HAL_TIMEOUT;
 8007074:	2303      	movs	r3, #3
 8007076:	e7b8      	b.n	8006fea <HAL_I2C_Mem_Write+0x32>
				__HAL_UNLOCK(hi2c);
 8007078:	2300      	movs	r3, #0
 800707a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
				return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e7b3      	b.n	8006fea <HAL_I2C_Mem_Write+0x32>
				if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8007082:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007084:	2b04      	cmp	r3, #4
 8007086:	d001      	beq.n	800708c <HAL_I2C_Mem_Write+0xd4>
					return HAL_TIMEOUT;
 8007088:	2303      	movs	r3, #3
 800708a:	e7ae      	b.n	8006fea <HAL_I2C_Mem_Write+0x32>
					hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800708c:	6822      	ldr	r2, [r4, #0]
 800708e:	6813      	ldr	r3, [r2, #0]
 8007090:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007094:	6013      	str	r3, [r2, #0]
					return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e7a7      	b.n	8006fea <HAL_I2C_Mem_Write+0x32>
		while (hi2c->XferSize > 0U) {
 800709a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800709c:	2b00      	cmp	r3, #0
 800709e:	d02a      	beq.n	80070f6 <HAL_I2C_Mem_Write+0x13e>
			if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 80070a0:	4632      	mov	r2, r6
 80070a2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80070a4:	4620      	mov	r0, r4
 80070a6:	f7ff fcd3 	bl	8006a50 <I2C_WaitOnTXEFlagUntilTimeout>
 80070aa:	2800      	cmp	r0, #0
 80070ac:	d1e9      	bne.n	8007082 <HAL_I2C_Mem_Write+0xca>
			hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80070ae:	6822      	ldr	r2, [r4, #0]
 80070b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070b2:	1c59      	adds	r1, r3, #1
 80070b4:	6261      	str	r1, [r4, #36]	; 0x24
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	6113      	str	r3, [r2, #16]
			hi2c->XferSize--;
 80070ba:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80070bc:	3a01      	subs	r2, #1
 80070be:	b292      	uxth	r2, r2
 80070c0:	8522      	strh	r2, [r4, #40]	; 0x28
			hi2c->XferCount--;
 80070c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	3b01      	subs	r3, #1
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	8563      	strh	r3, [r4, #42]	; 0x2a
			if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U)) {
 80070cc:	6823      	ldr	r3, [r4, #0]
 80070ce:	6959      	ldr	r1, [r3, #20]
 80070d0:	f011 0f04 	tst.w	r1, #4
 80070d4:	d0e1      	beq.n	800709a <HAL_I2C_Mem_Write+0xe2>
 80070d6:	2a00      	cmp	r2, #0
 80070d8:	d0df      	beq.n	800709a <HAL_I2C_Mem_Write+0xe2>
				hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80070da:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80070dc:	1c51      	adds	r1, r2, #1
 80070de:	6261      	str	r1, [r4, #36]	; 0x24
 80070e0:	7812      	ldrb	r2, [r2, #0]
 80070e2:	611a      	str	r2, [r3, #16]
				hi2c->XferSize--;
 80070e4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80070e6:	3b01      	subs	r3, #1
 80070e8:	8523      	strh	r3, [r4, #40]	; 0x28
				hi2c->XferCount--;
 80070ea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	3b01      	subs	r3, #1
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	8563      	strh	r3, [r4, #42]	; 0x2a
 80070f4:	e7d1      	b.n	800709a <HAL_I2C_Mem_Write+0xe2>
		if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 80070f6:	4632      	mov	r2, r6
 80070f8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80070fa:	4620      	mov	r0, r4
 80070fc:	f7ff fdde 	bl	8006cbc <I2C_WaitOnBTFFlagUntilTimeout>
 8007100:	4603      	mov	r3, r0
 8007102:	b158      	cbz	r0, 800711c <HAL_I2C_Mem_Write+0x164>
			if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8007104:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007106:	2b04      	cmp	r3, #4
 8007108:	d001      	beq.n	800710e <HAL_I2C_Mem_Write+0x156>
				return HAL_TIMEOUT;
 800710a:	2303      	movs	r3, #3
 800710c:	e76d      	b.n	8006fea <HAL_I2C_Mem_Write+0x32>
				hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800710e:	6822      	ldr	r2, [r4, #0]
 8007110:	6813      	ldr	r3, [r2, #0]
 8007112:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007116:	6013      	str	r3, [r2, #0]
				return HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e766      	b.n	8006fea <HAL_I2C_Mem_Write+0x32>
		hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800711c:	6821      	ldr	r1, [r4, #0]
 800711e:	680a      	ldr	r2, [r1, #0]
 8007120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007124:	600a      	str	r2, [r1, #0]
		hi2c->State = HAL_I2C_STATE_READY;
 8007126:	2220      	movs	r2, #32
 8007128:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_NONE;
 800712c:	2200      	movs	r2, #0
 800712e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
		__HAL_UNLOCK(hi2c);
 8007132:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
		return HAL_OK;
 8007136:	e758      	b.n	8006fea <HAL_I2C_Mem_Write+0x32>
		__HAL_LOCK(hi2c);
 8007138:	2302      	movs	r3, #2
 800713a:	e756      	b.n	8006fea <HAL_I2C_Mem_Write+0x32>
 800713c:	0801e1ac 	.word	0x0801e1ac
 8007140:	00100002 	.word	0x00100002
 8007144:	ffff0000 	.word	0xffff0000

08007148 <HAL_I2C_Mem_Read>:
{
 8007148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800714c:	b086      	sub	sp, #24
 800714e:	4604      	mov	r4, r0
 8007150:	460f      	mov	r7, r1
 8007152:	4690      	mov	r8, r2
 8007154:	461d      	mov	r5, r3
	tickstart = HAL_GetTick();
 8007156:	f7fe f8db 	bl	8005310 <HAL_GetTick>
 800715a:	4606      	mov	r6, r0
	assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800715c:	2d01      	cmp	r5, #1
 800715e:	d006      	beq.n	800716e <HAL_I2C_Mem_Read+0x26>
 8007160:	2d10      	cmp	r5, #16
 8007162:	d004      	beq.n	800716e <HAL_I2C_Mem_Read+0x26>
 8007164:	f640 1117 	movw	r1, #2327	; 0x917
 8007168:	4896      	ldr	r0, [pc, #600]	; (80073c4 <HAL_I2C_Mem_Read+0x27c>)
 800716a:	f005 f8df 	bl	800c32c <assert_failed>
	if (hi2c->State == HAL_I2C_STATE_READY) {
 800716e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8007172:	b2db      	uxtb	r3, r3
 8007174:	2b20      	cmp	r3, #32
 8007176:	d004      	beq.n	8007182 <HAL_I2C_Mem_Read+0x3a>
		return HAL_BUSY;
 8007178:	2502      	movs	r5, #2
}
 800717a:	4628      	mov	r0, r5
 800717c:	b006      	add	sp, #24
 800717e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK) {
 8007182:	9600      	str	r6, [sp, #0]
 8007184:	2319      	movs	r3, #25
 8007186:	2201      	movs	r2, #1
 8007188:	498f      	ldr	r1, [pc, #572]	; (80073c8 <HAL_I2C_Mem_Read+0x280>)
 800718a:	4620      	mov	r0, r4
 800718c:	f7ff fbe4 	bl	8006958 <I2C_WaitOnFlagUntilTimeout>
 8007190:	b108      	cbz	r0, 8007196 <HAL_I2C_Mem_Read+0x4e>
			return HAL_BUSY;
 8007192:	2502      	movs	r5, #2
 8007194:	e7f1      	b.n	800717a <HAL_I2C_Mem_Read+0x32>
		__HAL_LOCK(hi2c);
 8007196:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800719a:	2b01      	cmp	r3, #1
 800719c:	f000 814f 	beq.w	800743e <HAL_I2C_Mem_Read+0x2f6>
 80071a0:	2301      	movs	r3, #1
 80071a2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE) {
 80071a6:	6823      	ldr	r3, [r4, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	f012 0f01 	tst.w	r2, #1
 80071ae:	d103      	bne.n	80071b8 <HAL_I2C_Mem_Read+0x70>
			__HAL_I2C_ENABLE(hi2c);
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	f042 0201 	orr.w	r2, r2, #1
 80071b6:	601a      	str	r2, [r3, #0]
		hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80071b8:	6822      	ldr	r2, [r4, #0]
 80071ba:	6813      	ldr	r3, [r2, #0]
 80071bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071c0:	6013      	str	r3, [r2, #0]
		hi2c->State = HAL_I2C_STATE_BUSY_RX;
 80071c2:	2322      	movs	r3, #34	; 0x22
 80071c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_MEM;
 80071c8:	2340      	movs	r3, #64	; 0x40
 80071ca:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071ce:	2300      	movs	r3, #0
 80071d0:	6423      	str	r3, [r4, #64]	; 0x40
		hi2c->pBuffPtr = pData;
 80071d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80071d4:	6263      	str	r3, [r4, #36]	; 0x24
		hi2c->XferCount = Size;
 80071d6:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 80071da:	8563      	strh	r3, [r4, #42]	; 0x2a
		hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80071dc:	4b7b      	ldr	r3, [pc, #492]	; (80073cc <HAL_I2C_Mem_Read+0x284>)
 80071de:	62e3      	str	r3, [r4, #44]	; 0x2c
		hi2c->XferSize = hi2c->XferCount;
 80071e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80071e2:	8523      	strh	r3, [r4, #40]	; 0x28
		if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK) {
 80071e4:	9601      	str	r6, [sp, #4]
 80071e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071e8:	9300      	str	r3, [sp, #0]
 80071ea:	462b      	mov	r3, r5
 80071ec:	4642      	mov	r2, r8
 80071ee:	4639      	mov	r1, r7
 80071f0:	4620      	mov	r0, r4
 80071f2:	f7ff fcbf 	bl	8006b74 <I2C_RequestMemoryRead>
 80071f6:	4605      	mov	r5, r0
 80071f8:	b160      	cbz	r0, 8007214 <HAL_I2C_Mem_Read+0xcc>
			if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 80071fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80071fc:	2b04      	cmp	r3, #4
 80071fe:	d004      	beq.n	800720a <HAL_I2C_Mem_Read+0xc2>
				__HAL_UNLOCK(hi2c);
 8007200:	2300      	movs	r3, #0
 8007202:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
				return HAL_TIMEOUT;
 8007206:	2503      	movs	r5, #3
 8007208:	e7b7      	b.n	800717a <HAL_I2C_Mem_Read+0x32>
				__HAL_UNLOCK(hi2c);
 800720a:	2300      	movs	r3, #0
 800720c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
				return HAL_ERROR;
 8007210:	2501      	movs	r5, #1
 8007212:	e7b2      	b.n	800717a <HAL_I2C_Mem_Read+0x32>
		if (hi2c->XferSize == 0U) {
 8007214:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007216:	b95b      	cbnz	r3, 8007230 <HAL_I2C_Mem_Read+0xe8>
			__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007218:	9302      	str	r3, [sp, #8]
 800721a:	6823      	ldr	r3, [r4, #0]
 800721c:	695a      	ldr	r2, [r3, #20]
 800721e:	9202      	str	r2, [sp, #8]
 8007220:	699a      	ldr	r2, [r3, #24]
 8007222:	9202      	str	r2, [sp, #8]
 8007224:	9a02      	ldr	r2, [sp, #8]
			hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800722c:	601a      	str	r2, [r3, #0]
 800722e:	e078      	b.n	8007322 <HAL_I2C_Mem_Read+0x1da>
		}else if (hi2c->XferSize == 1U) {
 8007230:	2b01      	cmp	r3, #1
 8007232:	d00a      	beq.n	800724a <HAL_I2C_Mem_Read+0x102>
		}else if (hi2c->XferSize == 2U) {
 8007234:	2b02      	cmp	r3, #2
 8007236:	d01a      	beq.n	800726e <HAL_I2C_Mem_Read+0x126>
			__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007238:	2300      	movs	r3, #0
 800723a:	9305      	str	r3, [sp, #20]
 800723c:	6823      	ldr	r3, [r4, #0]
 800723e:	695a      	ldr	r2, [r3, #20]
 8007240:	9205      	str	r2, [sp, #20]
 8007242:	699b      	ldr	r3, [r3, #24]
 8007244:	9305      	str	r3, [sp, #20]
 8007246:	9b05      	ldr	r3, [sp, #20]
 8007248:	e06b      	b.n	8007322 <HAL_I2C_Mem_Read+0x1da>
			hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800724a:	6822      	ldr	r2, [r4, #0]
 800724c:	6813      	ldr	r3, [r2, #0]
 800724e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007252:	6013      	str	r3, [r2, #0]
			__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007254:	2300      	movs	r3, #0
 8007256:	9303      	str	r3, [sp, #12]
 8007258:	6823      	ldr	r3, [r4, #0]
 800725a:	695a      	ldr	r2, [r3, #20]
 800725c:	9203      	str	r2, [sp, #12]
 800725e:	699a      	ldr	r2, [r3, #24]
 8007260:	9203      	str	r2, [sp, #12]
 8007262:	9a03      	ldr	r2, [sp, #12]
			hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800726a:	601a      	str	r2, [r3, #0]
 800726c:	e059      	b.n	8007322 <HAL_I2C_Mem_Read+0x1da>
			hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800726e:	6822      	ldr	r2, [r4, #0]
 8007270:	6813      	ldr	r3, [r2, #0]
 8007272:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007276:	6013      	str	r3, [r2, #0]
			hi2c->Instance->CR1 |= I2C_CR1_POS;
 8007278:	6822      	ldr	r2, [r4, #0]
 800727a:	6813      	ldr	r3, [r2, #0]
 800727c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007280:	6013      	str	r3, [r2, #0]
			__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007282:	2300      	movs	r3, #0
 8007284:	9304      	str	r3, [sp, #16]
 8007286:	6823      	ldr	r3, [r4, #0]
 8007288:	695a      	ldr	r2, [r3, #20]
 800728a:	9204      	str	r2, [sp, #16]
 800728c:	699b      	ldr	r3, [r3, #24]
 800728e:	9304      	str	r3, [sp, #16]
 8007290:	9b04      	ldr	r3, [sp, #16]
 8007292:	e046      	b.n	8007322 <HAL_I2C_Mem_Read+0x1da>
					if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8007294:	4632      	mov	r2, r6
 8007296:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007298:	4620      	mov	r0, r4
 800729a:	f7ff fd36 	bl	8006d0a <I2C_WaitOnRXNEFlagUntilTimeout>
 800729e:	b970      	cbnz	r0, 80072be <HAL_I2C_Mem_Read+0x176>
					(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80072a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072a2:	1c5a      	adds	r2, r3, #1
 80072a4:	6262      	str	r2, [r4, #36]	; 0x24
 80072a6:	6822      	ldr	r2, [r4, #0]
 80072a8:	6912      	ldr	r2, [r2, #16]
 80072aa:	701a      	strb	r2, [r3, #0]
					hi2c->XferSize--;
 80072ac:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80072ae:	3b01      	subs	r3, #1
 80072b0:	8523      	strh	r3, [r4, #40]	; 0x28
					hi2c->XferCount--;
 80072b2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	3b01      	subs	r3, #1
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	8563      	strh	r3, [r4, #42]	; 0x2a
 80072bc:	e031      	b.n	8007322 <HAL_I2C_Mem_Read+0x1da>
						if (hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT) {
 80072be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80072c0:	2b20      	cmp	r3, #32
 80072c2:	d001      	beq.n	80072c8 <HAL_I2C_Mem_Read+0x180>
							return HAL_ERROR;
 80072c4:	2501      	movs	r5, #1
 80072c6:	e758      	b.n	800717a <HAL_I2C_Mem_Read+0x32>
							return HAL_TIMEOUT;
 80072c8:	2503      	movs	r5, #3
 80072ca:	e756      	b.n	800717a <HAL_I2C_Mem_Read+0x32>
					if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 80072cc:	9600      	str	r6, [sp, #0]
 80072ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072d0:	2200      	movs	r2, #0
 80072d2:	493f      	ldr	r1, [pc, #252]	; (80073d0 <HAL_I2C_Mem_Read+0x288>)
 80072d4:	4620      	mov	r0, r4
 80072d6:	f7ff fb3f 	bl	8006958 <I2C_WaitOnFlagUntilTimeout>
 80072da:	2800      	cmp	r0, #0
 80072dc:	f040 80b1 	bne.w	8007442 <HAL_I2C_Mem_Read+0x2fa>
					hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80072e0:	6822      	ldr	r2, [r4, #0]
 80072e2:	6813      	ldr	r3, [r2, #0]
 80072e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80072e8:	6013      	str	r3, [r2, #0]
					(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80072ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072ec:	1c5a      	adds	r2, r3, #1
 80072ee:	6262      	str	r2, [r4, #36]	; 0x24
 80072f0:	6822      	ldr	r2, [r4, #0]
 80072f2:	6912      	ldr	r2, [r2, #16]
 80072f4:	701a      	strb	r2, [r3, #0]
					hi2c->XferSize--;
 80072f6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80072f8:	3b01      	subs	r3, #1
 80072fa:	8523      	strh	r3, [r4, #40]	; 0x28
					hi2c->XferCount--;
 80072fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80072fe:	b29b      	uxth	r3, r3
 8007300:	3b01      	subs	r3, #1
 8007302:	b29b      	uxth	r3, r3
 8007304:	8563      	strh	r3, [r4, #42]	; 0x2a
					(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8007306:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007308:	1c5a      	adds	r2, r3, #1
 800730a:	6262      	str	r2, [r4, #36]	; 0x24
 800730c:	6822      	ldr	r2, [r4, #0]
 800730e:	6912      	ldr	r2, [r2, #16]
 8007310:	701a      	strb	r2, [r3, #0]
					hi2c->XferSize--;
 8007312:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007314:	3b01      	subs	r3, #1
 8007316:	8523      	strh	r3, [r4, #40]	; 0x28
					hi2c->XferCount--;
 8007318:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800731a:	b29b      	uxth	r3, r3
 800731c:	3b01      	subs	r3, #1
 800731e:	b29b      	uxth	r3, r3
 8007320:	8563      	strh	r3, [r4, #42]	; 0x2a
		while (hi2c->XferSize > 0U) {
 8007322:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007324:	2b00      	cmp	r3, #0
 8007326:	f000 8081 	beq.w	800742c <HAL_I2C_Mem_Read+0x2e4>
			if (hi2c->XferSize <= 3U) {
 800732a:	2b03      	cmp	r3, #3
 800732c:	d852      	bhi.n	80073d4 <HAL_I2C_Mem_Read+0x28c>
				if (hi2c->XferSize == 1U) {
 800732e:	2b01      	cmp	r3, #1
 8007330:	d0b0      	beq.n	8007294 <HAL_I2C_Mem_Read+0x14c>
				else if (hi2c->XferSize == 2U) {
 8007332:	2b02      	cmp	r3, #2
 8007334:	d0ca      	beq.n	80072cc <HAL_I2C_Mem_Read+0x184>
					if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 8007336:	9600      	str	r6, [sp, #0]
 8007338:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800733a:	2200      	movs	r2, #0
 800733c:	4924      	ldr	r1, [pc, #144]	; (80073d0 <HAL_I2C_Mem_Read+0x288>)
 800733e:	4620      	mov	r0, r4
 8007340:	f7ff fb0a 	bl	8006958 <I2C_WaitOnFlagUntilTimeout>
 8007344:	2800      	cmp	r0, #0
 8007346:	d17e      	bne.n	8007446 <HAL_I2C_Mem_Read+0x2fe>
					hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8007348:	6822      	ldr	r2, [r4, #0]
 800734a:	6813      	ldr	r3, [r2, #0]
 800734c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007350:	6013      	str	r3, [r2, #0]
					(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8007352:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007354:	1c5a      	adds	r2, r3, #1
 8007356:	6262      	str	r2, [r4, #36]	; 0x24
 8007358:	6822      	ldr	r2, [r4, #0]
 800735a:	6912      	ldr	r2, [r2, #16]
 800735c:	701a      	strb	r2, [r3, #0]
					hi2c->XferSize--;
 800735e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007360:	3b01      	subs	r3, #1
 8007362:	8523      	strh	r3, [r4, #40]	; 0x28
					hi2c->XferCount--;
 8007364:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007366:	b29b      	uxth	r3, r3
 8007368:	3b01      	subs	r3, #1
 800736a:	b29b      	uxth	r3, r3
 800736c:	8563      	strh	r3, [r4, #42]	; 0x2a
					if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 800736e:	9600      	str	r6, [sp, #0]
 8007370:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007372:	2200      	movs	r2, #0
 8007374:	4916      	ldr	r1, [pc, #88]	; (80073d0 <HAL_I2C_Mem_Read+0x288>)
 8007376:	4620      	mov	r0, r4
 8007378:	f7ff faee 	bl	8006958 <I2C_WaitOnFlagUntilTimeout>
 800737c:	2800      	cmp	r0, #0
 800737e:	d164      	bne.n	800744a <HAL_I2C_Mem_Read+0x302>
					hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8007380:	6822      	ldr	r2, [r4, #0]
 8007382:	6813      	ldr	r3, [r2, #0]
 8007384:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007388:	6013      	str	r3, [r2, #0]
					(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800738a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800738c:	1c5a      	adds	r2, r3, #1
 800738e:	6262      	str	r2, [r4, #36]	; 0x24
 8007390:	6822      	ldr	r2, [r4, #0]
 8007392:	6912      	ldr	r2, [r2, #16]
 8007394:	701a      	strb	r2, [r3, #0]
					hi2c->XferSize--;
 8007396:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007398:	3b01      	subs	r3, #1
 800739a:	8523      	strh	r3, [r4, #40]	; 0x28
					hi2c->XferCount--;
 800739c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800739e:	b29b      	uxth	r3, r3
 80073a0:	3b01      	subs	r3, #1
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	8563      	strh	r3, [r4, #42]	; 0x2a
					(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80073a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073a8:	1c5a      	adds	r2, r3, #1
 80073aa:	6262      	str	r2, [r4, #36]	; 0x24
 80073ac:	6822      	ldr	r2, [r4, #0]
 80073ae:	6912      	ldr	r2, [r2, #16]
 80073b0:	701a      	strb	r2, [r3, #0]
					hi2c->XferSize--;
 80073b2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80073b4:	3b01      	subs	r3, #1
 80073b6:	8523      	strh	r3, [r4, #40]	; 0x28
					hi2c->XferCount--;
 80073b8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	3b01      	subs	r3, #1
 80073be:	b29b      	uxth	r3, r3
 80073c0:	8563      	strh	r3, [r4, #42]	; 0x2a
 80073c2:	e7ae      	b.n	8007322 <HAL_I2C_Mem_Read+0x1da>
 80073c4:	0801e1ac 	.word	0x0801e1ac
 80073c8:	00100002 	.word	0x00100002
 80073cc:	ffff0000 	.word	0xffff0000
 80073d0:	00010004 	.word	0x00010004
				if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 80073d4:	4632      	mov	r2, r6
 80073d6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80073d8:	4620      	mov	r0, r4
 80073da:	f7ff fc96 	bl	8006d0a <I2C_WaitOnRXNEFlagUntilTimeout>
 80073de:	bb00      	cbnz	r0, 8007422 <HAL_I2C_Mem_Read+0x2da>
				(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80073e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073e2:	1c5a      	adds	r2, r3, #1
 80073e4:	6262      	str	r2, [r4, #36]	; 0x24
 80073e6:	6822      	ldr	r2, [r4, #0]
 80073e8:	6912      	ldr	r2, [r2, #16]
 80073ea:	701a      	strb	r2, [r3, #0]
				hi2c->XferSize--;
 80073ec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80073ee:	3b01      	subs	r3, #1
 80073f0:	8523      	strh	r3, [r4, #40]	; 0x28
				hi2c->XferCount--;
 80073f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	3b01      	subs	r3, #1
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	8563      	strh	r3, [r4, #42]	; 0x2a
				if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) {
 80073fc:	6823      	ldr	r3, [r4, #0]
 80073fe:	695a      	ldr	r2, [r3, #20]
 8007400:	f012 0f04 	tst.w	r2, #4
 8007404:	d08d      	beq.n	8007322 <HAL_I2C_Mem_Read+0x1da>
					(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8007406:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007408:	1c51      	adds	r1, r2, #1
 800740a:	6261      	str	r1, [r4, #36]	; 0x24
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	7013      	strb	r3, [r2, #0]
					hi2c->XferSize--;
 8007410:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007412:	3b01      	subs	r3, #1
 8007414:	8523      	strh	r3, [r4, #40]	; 0x28
					hi2c->XferCount--;
 8007416:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007418:	b29b      	uxth	r3, r3
 800741a:	3b01      	subs	r3, #1
 800741c:	b29b      	uxth	r3, r3
 800741e:	8563      	strh	r3, [r4, #42]	; 0x2a
 8007420:	e77f      	b.n	8007322 <HAL_I2C_Mem_Read+0x1da>
					if (hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT) {
 8007422:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007424:	2b20      	cmp	r3, #32
 8007426:	d112      	bne.n	800744e <HAL_I2C_Mem_Read+0x306>
						return HAL_TIMEOUT;
 8007428:	2503      	movs	r5, #3
 800742a:	e6a6      	b.n	800717a <HAL_I2C_Mem_Read+0x32>
		hi2c->State = HAL_I2C_STATE_READY;
 800742c:	2320      	movs	r3, #32
 800742e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_NONE;
 8007432:	2300      	movs	r3, #0
 8007434:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		__HAL_UNLOCK(hi2c);
 8007438:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		return HAL_OK;
 800743c:	e69d      	b.n	800717a <HAL_I2C_Mem_Read+0x32>
		__HAL_LOCK(hi2c);
 800743e:	2502      	movs	r5, #2
 8007440:	e69b      	b.n	800717a <HAL_I2C_Mem_Read+0x32>
						return HAL_TIMEOUT;
 8007442:	2503      	movs	r5, #3
 8007444:	e699      	b.n	800717a <HAL_I2C_Mem_Read+0x32>
						return HAL_TIMEOUT;
 8007446:	2503      	movs	r5, #3
 8007448:	e697      	b.n	800717a <HAL_I2C_Mem_Read+0x32>
						return HAL_TIMEOUT;
 800744a:	2503      	movs	r5, #3
 800744c:	e695      	b.n	800717a <HAL_I2C_Mem_Read+0x32>
						return HAL_ERROR;
 800744e:	2501      	movs	r5, #1
 8007450:	e693      	b.n	800717a <HAL_I2C_Mem_Read+0x32>
 8007452:	bf00      	nop

08007454 <HAL_I2C_MasterTxCpltCallback>:
{
 8007454:	4770      	bx	lr

08007456 <HAL_I2C_MasterRxCpltCallback>:
{
 8007456:	4770      	bx	lr

08007458 <HAL_I2C_SlaveTxCpltCallback>:
{
 8007458:	4770      	bx	lr

0800745a <I2C_SlaveTransmit_TXE>:
	uint32_t CurrentState = hi2c->State;
 800745a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800745e:	b2da      	uxtb	r2, r3
	if (hi2c->XferCount != 0U) {
 8007460:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8007462:	b29b      	uxth	r3, r3
 8007464:	b1fb      	cbz	r3, 80074a6 <I2C_SlaveTransmit_TXE+0x4c>
{
 8007466:	b510      	push	{r4, lr}
		hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8007468:	6801      	ldr	r1, [r0, #0]
 800746a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800746c:	1c5c      	adds	r4, r3, #1
 800746e:	6244      	str	r4, [r0, #36]	; 0x24
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	610b      	str	r3, [r1, #16]
		hi2c->XferCount--;
 8007474:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8007476:	b29b      	uxth	r3, r3
 8007478:	3b01      	subs	r3, #1
 800747a:	b29b      	uxth	r3, r3
 800747c:	8543      	strh	r3, [r0, #42]	; 0x2a
		if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)) {
 800747e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8007480:	b29b      	uxth	r3, r3
 8007482:	b90b      	cbnz	r3, 8007488 <I2C_SlaveTransmit_TXE+0x2e>
 8007484:	2a29      	cmp	r2, #41	; 0x29
 8007486:	d001      	beq.n	800748c <I2C_SlaveTransmit_TXE+0x32>
}
 8007488:	2000      	movs	r0, #0
 800748a:	bd10      	pop	{r4, pc}
			__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800748c:	6802      	ldr	r2, [r0, #0]
 800748e:	6853      	ldr	r3, [r2, #4]
 8007490:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007494:	6053      	str	r3, [r2, #4]
			hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007496:	2321      	movs	r3, #33	; 0x21
 8007498:	6303      	str	r3, [r0, #48]	; 0x30
			hi2c->State = HAL_I2C_STATE_LISTEN;
 800749a:	2328      	movs	r3, #40	; 0x28
 800749c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
			HAL_I2C_SlaveTxCpltCallback(hi2c);
 80074a0:	f7ff ffda 	bl	8007458 <HAL_I2C_SlaveTxCpltCallback>
 80074a4:	e7f0      	b.n	8007488 <I2C_SlaveTransmit_TXE+0x2e>
}
 80074a6:	2000      	movs	r0, #0
 80074a8:	4770      	bx	lr

080074aa <HAL_I2C_SlaveRxCpltCallback>:
{
 80074aa:	4770      	bx	lr

080074ac <I2C_SlaveReceive_RXNE>:
{
 80074ac:	b508      	push	{r3, lr}
	uint32_t CurrentState = hi2c->State;
 80074ae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80074b2:	b2da      	uxtb	r2, r3
	if (hi2c->XferCount != 0U) {
 80074b4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	b17b      	cbz	r3, 80074da <I2C_SlaveReceive_RXNE+0x2e>
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80074ba:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80074bc:	1c59      	adds	r1, r3, #1
 80074be:	6241      	str	r1, [r0, #36]	; 0x24
 80074c0:	6801      	ldr	r1, [r0, #0]
 80074c2:	6909      	ldr	r1, [r1, #16]
 80074c4:	7019      	strb	r1, [r3, #0]
		hi2c->XferCount--;
 80074c6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	3b01      	subs	r3, #1
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	8543      	strh	r3, [r0, #42]	; 0x2a
		if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)) {
 80074d0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	b90b      	cbnz	r3, 80074da <I2C_SlaveReceive_RXNE+0x2e>
 80074d6:	2a2a      	cmp	r2, #42	; 0x2a
 80074d8:	d001      	beq.n	80074de <I2C_SlaveReceive_RXNE+0x32>
}
 80074da:	2000      	movs	r0, #0
 80074dc:	bd08      	pop	{r3, pc}
			__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80074de:	6802      	ldr	r2, [r0, #0]
 80074e0:	6853      	ldr	r3, [r2, #4]
 80074e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074e6:	6053      	str	r3, [r2, #4]
			hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80074e8:	2322      	movs	r3, #34	; 0x22
 80074ea:	6303      	str	r3, [r0, #48]	; 0x30
			hi2c->State = HAL_I2C_STATE_LISTEN;
 80074ec:	2328      	movs	r3, #40	; 0x28
 80074ee:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
			HAL_I2C_SlaveRxCpltCallback(hi2c);
 80074f2:	f7ff ffda 	bl	80074aa <HAL_I2C_SlaveRxCpltCallback>
 80074f6:	e7f0      	b.n	80074da <I2C_SlaveReceive_RXNE+0x2e>

080074f8 <HAL_I2C_AddrCallback>:
{
 80074f8:	4770      	bx	lr

080074fa <I2C_Slave_ADDR>:
{
 80074fa:	b508      	push	{r3, lr}
	if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET) {
 80074fc:	6803      	ldr	r3, [r0, #0]
 80074fe:	699a      	ldr	r2, [r3, #24]
 8007500:	f012 0f04 	tst.w	r2, #4
 8007504:	d009      	beq.n	800751a <I2C_Slave_ADDR+0x20>
	uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007506:	2100      	movs	r1, #0
	if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET) {
 8007508:	699b      	ldr	r3, [r3, #24]
 800750a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800750e:	d006      	beq.n	800751e <I2C_Slave_ADDR+0x24>
		SlaveAddrCode = hi2c->Init.OwnAddress2;
 8007510:	8b02      	ldrh	r2, [r0, #24]
	HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007512:	f7ff fff1 	bl	80074f8 <HAL_I2C_AddrCallback>
}
 8007516:	2000      	movs	r0, #0
 8007518:	bd08      	pop	{r3, pc}
		TransferDirection = I2C_DIRECTION_TRANSMIT;
 800751a:	2101      	movs	r1, #1
 800751c:	e7f4      	b.n	8007508 <I2C_Slave_ADDR+0xe>
		SlaveAddrCode = hi2c->Init.OwnAddress1;
 800751e:	8982      	ldrh	r2, [r0, #12]
 8007520:	e7f7      	b.n	8007512 <I2C_Slave_ADDR+0x18>

08007522 <HAL_I2C_ListenCpltCallback>:
{
 8007522:	4770      	bx	lr

08007524 <I2C_Slave_AF>:
{
 8007524:	b508      	push	{r3, lr}
	uint32_t CurrentState = hi2c->State;
 8007526:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800752a:	b2db      	uxtb	r3, r3
	uint32_t CurrentXferOptions = hi2c->XferOptions;
 800752c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
	if (((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800752e:	2a04      	cmp	r2, #4
 8007530:	d009      	beq.n	8007546 <I2C_Slave_AF+0x22>
 8007532:	2a08      	cmp	r2, #8
 8007534:	d007      	beq.n	8007546 <I2C_Slave_AF+0x22>
	}else if (CurrentState == HAL_I2C_STATE_BUSY_TX) {
 8007536:	2b21      	cmp	r3, #33	; 0x21
 8007538:	d021      	beq.n	800757e <I2C_Slave_AF+0x5a>
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800753a:	6803      	ldr	r3, [r0, #0]
 800753c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007540:	615a      	str	r2, [r3, #20]
}
 8007542:	2000      	movs	r0, #0
 8007544:	bd08      	pop	{r3, pc}
	if (((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007546:	2b28      	cmp	r3, #40	; 0x28
 8007548:	d1f5      	bne.n	8007536 <I2C_Slave_AF+0x12>
		hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800754a:	4b1a      	ldr	r3, [pc, #104]	; (80075b4 <I2C_Slave_AF+0x90>)
 800754c:	62c3      	str	r3, [r0, #44]	; 0x2c
		__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800754e:	6802      	ldr	r2, [r0, #0]
 8007550:	6853      	ldr	r3, [r2, #4]
 8007552:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007556:	6053      	str	r3, [r2, #4]
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007558:	6803      	ldr	r3, [r0, #0]
 800755a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800755e:	615a      	str	r2, [r3, #20]
		hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8007560:	6802      	ldr	r2, [r0, #0]
 8007562:	6813      	ldr	r3, [r2, #0]
 8007564:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007568:	6013      	str	r3, [r2, #0]
		hi2c->PreviousState = I2C_STATE_NONE;
 800756a:	2300      	movs	r3, #0
 800756c:	6303      	str	r3, [r0, #48]	; 0x30
		hi2c->State = HAL_I2C_STATE_READY;
 800756e:	2220      	movs	r2, #32
 8007570:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_NONE;
 8007574:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
		HAL_I2C_ListenCpltCallback(hi2c);
 8007578:	f7ff ffd3 	bl	8007522 <HAL_I2C_ListenCpltCallback>
 800757c:	e7e1      	b.n	8007542 <I2C_Slave_AF+0x1e>
		hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800757e:	4b0d      	ldr	r3, [pc, #52]	; (80075b4 <I2C_Slave_AF+0x90>)
 8007580:	62c3      	str	r3, [r0, #44]	; 0x2c
		hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007582:	2321      	movs	r3, #33	; 0x21
 8007584:	6303      	str	r3, [r0, #48]	; 0x30
		hi2c->State = HAL_I2C_STATE_READY;
 8007586:	2320      	movs	r3, #32
 8007588:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_NONE;
 800758c:	2300      	movs	r3, #0
 800758e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
		__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007592:	6802      	ldr	r2, [r0, #0]
 8007594:	6853      	ldr	r3, [r2, #4]
 8007596:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800759a:	6053      	str	r3, [r2, #4]
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800759c:	6803      	ldr	r3, [r0, #0]
 800759e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80075a2:	615a      	str	r2, [r3, #20]
		hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80075a4:	6802      	ldr	r2, [r0, #0]
 80075a6:	6813      	ldr	r3, [r2, #0]
 80075a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80075ac:	6013      	str	r3, [r2, #0]
		HAL_I2C_SlaveTxCpltCallback(hi2c);
 80075ae:	f7ff ff53 	bl	8007458 <HAL_I2C_SlaveTxCpltCallback>
 80075b2:	e7c6      	b.n	8007542 <I2C_Slave_AF+0x1e>
 80075b4:	ffff0000 	.word	0xffff0000

080075b8 <HAL_I2C_MemTxCpltCallback>:
{
 80075b8:	4770      	bx	lr

080075ba <I2C_MasterTransmit_TXE>:
{
 80075ba:	b510      	push	{r4, lr}
	uint32_t CurrentState = hi2c->State;
 80075bc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80075c0:	b2db      	uxtb	r3, r3
	uint32_t CurrentMode = hi2c->Mode;
 80075c2:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 80075c6:	b2d2      	uxtb	r2, r2
	uint32_t CurrentXferOptions = hi2c->XferOptions;
 80075c8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
	if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX)) {
 80075ca:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 80075cc:	b909      	cbnz	r1, 80075d2 <I2C_MasterTransmit_TXE+0x18>
 80075ce:	2b21      	cmp	r3, #33	; 0x21
 80075d0:	d005      	beq.n	80075de <I2C_MasterTransmit_TXE+0x24>
	}else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80075d2:	2b21      	cmp	r3, #33	; 0x21
 80075d4:	d03c      	beq.n	8007650 <I2C_MasterTransmit_TXE+0x96>
 80075d6:	2a40      	cmp	r2, #64	; 0x40
 80075d8:	d038      	beq.n	800764c <I2C_MasterTransmit_TXE+0x92>
}
 80075da:	2000      	movs	r0, #0
 80075dc:	bd10      	pop	{r4, pc}
		if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME)) {
 80075de:	2c04      	cmp	r4, #4
 80075e0:	d004      	beq.n	80075ec <I2C_MasterTransmit_TXE+0x32>
 80075e2:	2c08      	cmp	r4, #8
 80075e4:	d002      	beq.n	80075ec <I2C_MasterTransmit_TXE+0x32>
 80075e6:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
 80075ea:	d119      	bne.n	8007620 <I2C_MasterTransmit_TXE+0x66>
			__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80075ec:	6802      	ldr	r2, [r0, #0]
 80075ee:	6853      	ldr	r3, [r2, #4]
 80075f0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80075f4:	6053      	str	r3, [r2, #4]
			hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80075f6:	6802      	ldr	r2, [r0, #0]
 80075f8:	6813      	ldr	r3, [r2, #0]
 80075fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80075fe:	6013      	str	r3, [r2, #0]
			hi2c->PreviousState = I2C_STATE_NONE;
 8007600:	2300      	movs	r3, #0
 8007602:	6303      	str	r3, [r0, #48]	; 0x30
			hi2c->State = HAL_I2C_STATE_READY;
 8007604:	2320      	movs	r3, #32
 8007606:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
			if (hi2c->Mode == HAL_I2C_MODE_MEM) {
 800760a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800760e:	b2db      	uxtb	r3, r3
 8007610:	2b40      	cmp	r3, #64	; 0x40
 8007612:	d015      	beq.n	8007640 <I2C_MasterTransmit_TXE+0x86>
				hi2c->Mode = HAL_I2C_MODE_NONE;
 8007614:	2300      	movs	r3, #0
 8007616:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
				HAL_I2C_MasterTxCpltCallback(hi2c);
 800761a:	f7ff ff1b 	bl	8007454 <HAL_I2C_MasterTxCpltCallback>
 800761e:	e7dc      	b.n	80075da <I2C_MasterTransmit_TXE+0x20>
			__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007620:	6802      	ldr	r2, [r0, #0]
 8007622:	6853      	ldr	r3, [r2, #4]
 8007624:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007628:	6053      	str	r3, [r2, #4]
			hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800762a:	2311      	movs	r3, #17
 800762c:	6303      	str	r3, [r0, #48]	; 0x30
			hi2c->Mode = HAL_I2C_MODE_NONE;
 800762e:	2300      	movs	r3, #0
 8007630:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
			hi2c->State = HAL_I2C_STATE_READY;
 8007634:	2320      	movs	r3, #32
 8007636:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
			HAL_I2C_MasterTxCpltCallback(hi2c);
 800763a:	f7ff ff0b 	bl	8007454 <HAL_I2C_MasterTxCpltCallback>
 800763e:	e7cc      	b.n	80075da <I2C_MasterTransmit_TXE+0x20>
				hi2c->Mode = HAL_I2C_MODE_NONE;
 8007640:	2300      	movs	r3, #0
 8007642:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
				HAL_I2C_MemTxCpltCallback(hi2c);
 8007646:	f7ff ffb7 	bl	80075b8 <HAL_I2C_MemTxCpltCallback>
 800764a:	e7c6      	b.n	80075da <I2C_MasterTransmit_TXE+0x20>
		  ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX))) {
 800764c:	2b22      	cmp	r3, #34	; 0x22
 800764e:	d1c4      	bne.n	80075da <I2C_MasterTransmit_TXE+0x20>
		if (hi2c->XferCount == 0U) {
 8007650:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8007652:	b29b      	uxth	r3, r3
 8007654:	b183      	cbz	r3, 8007678 <I2C_MasterTransmit_TXE+0xbe>
			if (hi2c->Mode == HAL_I2C_MODE_MEM) {
 8007656:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800765a:	b2db      	uxtb	r3, r3
 800765c:	2b40      	cmp	r3, #64	; 0x40
 800765e:	d011      	beq.n	8007684 <I2C_MasterTransmit_TXE+0xca>
				hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8007660:	6802      	ldr	r2, [r0, #0]
 8007662:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007664:	1c59      	adds	r1, r3, #1
 8007666:	6241      	str	r1, [r0, #36]	; 0x24
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	6113      	str	r3, [r2, #16]
				hi2c->XferCount--;
 800766c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800766e:	b29b      	uxth	r3, r3
 8007670:	3b01      	subs	r3, #1
 8007672:	b29b      	uxth	r3, r3
 8007674:	8543      	strh	r3, [r0, #42]	; 0x2a
 8007676:	e7b0      	b.n	80075da <I2C_MasterTransmit_TXE+0x20>
			__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007678:	6802      	ldr	r2, [r0, #0]
 800767a:	6853      	ldr	r3, [r2, #4]
 800767c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007680:	6053      	str	r3, [r2, #4]
 8007682:	e7aa      	b.n	80075da <I2C_MasterTransmit_TXE+0x20>
				if (hi2c->EventCount == 0) {
 8007684:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007686:	b99b      	cbnz	r3, 80076b0 <I2C_MasterTransmit_TXE+0xf6>
					if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT) {
 8007688:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800768a:	2b01      	cmp	r3, #1
 800768c:	d008      	beq.n	80076a0 <I2C_MasterTransmit_TXE+0xe6>
						hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800768e:	6802      	ldr	r2, [r0, #0]
 8007690:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8007692:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8007696:	6113      	str	r3, [r2, #16]
						hi2c->EventCount++;
 8007698:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800769a:	3301      	adds	r3, #1
 800769c:	6503      	str	r3, [r0, #80]	; 0x50
 800769e:	e79c      	b.n	80075da <I2C_MasterTransmit_TXE+0x20>
						hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80076a0:	6802      	ldr	r2, [r0, #0]
 80076a2:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	6113      	str	r3, [r2, #16]
						hi2c->EventCount += 2;
 80076a8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80076aa:	3302      	adds	r3, #2
 80076ac:	6503      	str	r3, [r0, #80]	; 0x50
 80076ae:	e794      	b.n	80075da <I2C_MasterTransmit_TXE+0x20>
				}else if (hi2c->EventCount == 1) {
 80076b0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d018      	beq.n	80076e8 <I2C_MasterTransmit_TXE+0x12e>
				}else if (hi2c->EventCount == 2) {
 80076b6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80076b8:	2b02      	cmp	r3, #2
 80076ba:	d18e      	bne.n	80075da <I2C_MasterTransmit_TXE+0x20>
					if (hi2c->State == HAL_I2C_STATE_BUSY_RX) {
 80076bc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	2b22      	cmp	r3, #34	; 0x22
 80076c4:	d018      	beq.n	80076f8 <I2C_MasterTransmit_TXE+0x13e>
					}else if (hi2c->State == HAL_I2C_STATE_BUSY_TX) {
 80076c6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	2b21      	cmp	r3, #33	; 0x21
 80076ce:	d184      	bne.n	80075da <I2C_MasterTransmit_TXE+0x20>
						hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80076d0:	6802      	ldr	r2, [r0, #0]
 80076d2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80076d4:	1c59      	adds	r1, r3, #1
 80076d6:	6241      	str	r1, [r0, #36]	; 0x24
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	6113      	str	r3, [r2, #16]
						hi2c->XferCount--;
 80076dc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80076de:	b29b      	uxth	r3, r3
 80076e0:	3b01      	subs	r3, #1
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	8543      	strh	r3, [r0, #42]	; 0x2a
 80076e6:	e778      	b.n	80075da <I2C_MasterTransmit_TXE+0x20>
					hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80076e8:	6802      	ldr	r2, [r0, #0]
 80076ea:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	6113      	str	r3, [r2, #16]
					hi2c->EventCount++;
 80076f0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80076f2:	3301      	adds	r3, #1
 80076f4:	6503      	str	r3, [r0, #80]	; 0x50
 80076f6:	e770      	b.n	80075da <I2C_MasterTransmit_TXE+0x20>
						hi2c->Instance->CR1 |= I2C_CR1_START;
 80076f8:	6802      	ldr	r2, [r0, #0]
 80076fa:	6813      	ldr	r3, [r2, #0]
 80076fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007700:	6013      	str	r3, [r2, #0]
 8007702:	e76a      	b.n	80075da <I2C_MasterTransmit_TXE+0x20>

08007704 <I2C_MasterTransmit_BTF>:
{
 8007704:	b508      	push	{r3, lr}
	uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007706:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
	if (hi2c->State == HAL_I2C_STATE_BUSY_TX) {
 8007708:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800770c:	b2db      	uxtb	r3, r3
 800770e:	2b21      	cmp	r3, #33	; 0x21
 8007710:	d001      	beq.n	8007716 <I2C_MasterTransmit_BTF+0x12>
}
 8007712:	2000      	movs	r0, #0
 8007714:	bd08      	pop	{r3, pc}
		if (hi2c->XferCount != 0U) {
 8007716:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8007718:	b29b      	uxth	r3, r3
 800771a:	bb03      	cbnz	r3, 800775e <I2C_MasterTransmit_BTF+0x5a>
			if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME)) {
 800771c:	2a04      	cmp	r2, #4
 800771e:	d004      	beq.n	800772a <I2C_MasterTransmit_BTF+0x26>
 8007720:	2a08      	cmp	r2, #8
 8007722:	d002      	beq.n	800772a <I2C_MasterTransmit_BTF+0x26>
 8007724:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8007728:	d125      	bne.n	8007776 <I2C_MasterTransmit_BTF+0x72>
				__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800772a:	6802      	ldr	r2, [r0, #0]
 800772c:	6853      	ldr	r3, [r2, #4]
 800772e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007732:	6053      	str	r3, [r2, #4]
				hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8007734:	6802      	ldr	r2, [r0, #0]
 8007736:	6813      	ldr	r3, [r2, #0]
 8007738:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800773c:	6013      	str	r3, [r2, #0]
				hi2c->PreviousState = I2C_STATE_NONE;
 800773e:	2300      	movs	r3, #0
 8007740:	6303      	str	r3, [r0, #48]	; 0x30
				hi2c->State = HAL_I2C_STATE_READY;
 8007742:	2320      	movs	r3, #32
 8007744:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
				if (hi2c->Mode == HAL_I2C_MODE_MEM) {
 8007748:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800774c:	b2db      	uxtb	r3, r3
 800774e:	2b40      	cmp	r3, #64	; 0x40
 8007750:	d021      	beq.n	8007796 <I2C_MasterTransmit_BTF+0x92>
					hi2c->Mode = HAL_I2C_MODE_NONE;
 8007752:	2300      	movs	r3, #0
 8007754:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
					HAL_I2C_MasterTxCpltCallback(hi2c);
 8007758:	f7ff fe7c 	bl	8007454 <HAL_I2C_MasterTxCpltCallback>
 800775c:	e7d9      	b.n	8007712 <I2C_MasterTransmit_BTF+0xe>
			hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800775e:	6802      	ldr	r2, [r0, #0]
 8007760:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007762:	1c59      	adds	r1, r3, #1
 8007764:	6241      	str	r1, [r0, #36]	; 0x24
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	6113      	str	r3, [r2, #16]
			hi2c->XferCount--;
 800776a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800776c:	b29b      	uxth	r3, r3
 800776e:	3b01      	subs	r3, #1
 8007770:	b29b      	uxth	r3, r3
 8007772:	8543      	strh	r3, [r0, #42]	; 0x2a
 8007774:	e7cd      	b.n	8007712 <I2C_MasterTransmit_BTF+0xe>
				__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007776:	6802      	ldr	r2, [r0, #0]
 8007778:	6853      	ldr	r3, [r2, #4]
 800777a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800777e:	6053      	str	r3, [r2, #4]
				hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007780:	2311      	movs	r3, #17
 8007782:	6303      	str	r3, [r0, #48]	; 0x30
				hi2c->Mode = HAL_I2C_MODE_NONE;
 8007784:	2300      	movs	r3, #0
 8007786:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
				hi2c->State = HAL_I2C_STATE_READY;
 800778a:	2320      	movs	r3, #32
 800778c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
				HAL_I2C_MasterTxCpltCallback(hi2c);
 8007790:	f7ff fe60 	bl	8007454 <HAL_I2C_MasterTxCpltCallback>
 8007794:	e7bd      	b.n	8007712 <I2C_MasterTransmit_BTF+0xe>
					hi2c->Mode = HAL_I2C_MODE_NONE;
 8007796:	2300      	movs	r3, #0
 8007798:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
					HAL_I2C_MemTxCpltCallback(hi2c);
 800779c:	f7ff ff0c 	bl	80075b8 <HAL_I2C_MemTxCpltCallback>
 80077a0:	e7b7      	b.n	8007712 <I2C_MasterTransmit_BTF+0xe>

080077a2 <HAL_I2C_MemRxCpltCallback>:
{
 80077a2:	4770      	bx	lr

080077a4 <I2C_MasterReceive_RXNE>:
{
 80077a4:	b508      	push	{r3, lr}
	if (hi2c->State == HAL_I2C_STATE_BUSY_RX) {
 80077a6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	2b22      	cmp	r3, #34	; 0x22
 80077ae:	d001      	beq.n	80077b4 <I2C_MasterReceive_RXNE+0x10>
}
 80077b0:	2000      	movs	r0, #0
 80077b2:	bd08      	pop	{r3, pc}
		tmp = hi2c->XferCount;
 80077b4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80077b6:	b29b      	uxth	r3, r3
		if (tmp > 3U) {
 80077b8:	2b03      	cmp	r3, #3
 80077ba:	d914      	bls.n	80077e6 <I2C_MasterReceive_RXNE+0x42>
			(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80077bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80077be:	1c5a      	adds	r2, r3, #1
 80077c0:	6242      	str	r2, [r0, #36]	; 0x24
 80077c2:	6802      	ldr	r2, [r0, #0]
 80077c4:	6912      	ldr	r2, [r2, #16]
 80077c6:	701a      	strb	r2, [r3, #0]
			hi2c->XferCount--;
 80077c8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	3b01      	subs	r3, #1
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	8543      	strh	r3, [r0, #42]	; 0x2a
			if (hi2c->XferCount == 3) {
 80077d2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	2b03      	cmp	r3, #3
 80077d8:	d1ea      	bne.n	80077b0 <I2C_MasterReceive_RXNE+0xc>
				__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80077da:	6802      	ldr	r2, [r0, #0]
 80077dc:	6853      	ldr	r3, [r2, #4]
 80077de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077e2:	6053      	str	r3, [r2, #4]
 80077e4:	e7e4      	b.n	80077b0 <I2C_MasterReceive_RXNE+0xc>
		}else if ((tmp == 1U) || (tmp == 0U)) {
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d8e2      	bhi.n	80077b0 <I2C_MasterReceive_RXNE+0xc>
			hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80077ea:	6802      	ldr	r2, [r0, #0]
 80077ec:	6813      	ldr	r3, [r2, #0]
 80077ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077f2:	6013      	str	r3, [r2, #0]
			__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80077f4:	6802      	ldr	r2, [r0, #0]
 80077f6:	6853      	ldr	r3, [r2, #4]
 80077f8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80077fc:	6053      	str	r3, [r2, #4]
			(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80077fe:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007800:	1c5a      	adds	r2, r3, #1
 8007802:	6242      	str	r2, [r0, #36]	; 0x24
 8007804:	6802      	ldr	r2, [r0, #0]
 8007806:	6912      	ldr	r2, [r2, #16]
 8007808:	701a      	strb	r2, [r3, #0]
			hi2c->XferCount--;
 800780a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800780c:	b29b      	uxth	r3, r3
 800780e:	3b01      	subs	r3, #1
 8007810:	b29b      	uxth	r3, r3
 8007812:	8543      	strh	r3, [r0, #42]	; 0x2a
			hi2c->State = HAL_I2C_STATE_READY;
 8007814:	2320      	movs	r3, #32
 8007816:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
			hi2c->PreviousState = I2C_STATE_NONE;
 800781a:	2300      	movs	r3, #0
 800781c:	6303      	str	r3, [r0, #48]	; 0x30
			if (hi2c->Mode == HAL_I2C_MODE_MEM) {
 800781e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8007822:	b2db      	uxtb	r3, r3
 8007824:	2b40      	cmp	r3, #64	; 0x40
 8007826:	d005      	beq.n	8007834 <I2C_MasterReceive_RXNE+0x90>
				hi2c->Mode = HAL_I2C_MODE_NONE;
 8007828:	2300      	movs	r3, #0
 800782a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
				HAL_I2C_MasterRxCpltCallback(hi2c);
 800782e:	f7ff fe12 	bl	8007456 <HAL_I2C_MasterRxCpltCallback>
 8007832:	e7bd      	b.n	80077b0 <I2C_MasterReceive_RXNE+0xc>
				hi2c->Mode = HAL_I2C_MODE_NONE;
 8007834:	2300      	movs	r3, #0
 8007836:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
				HAL_I2C_MemRxCpltCallback(hi2c);
 800783a:	f7ff ffb2 	bl	80077a2 <HAL_I2C_MemRxCpltCallback>
 800783e:	e7b7      	b.n	80077b0 <I2C_MasterReceive_RXNE+0xc>

08007840 <I2C_MasterReceive_BTF>:
{
 8007840:	b508      	push	{r3, lr}
	uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007842:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
	if (hi2c->XferCount == 4U) {
 8007844:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8007846:	b29b      	uxth	r3, r3
 8007848:	2b04      	cmp	r3, #4
 800784a:	d014      	beq.n	8007876 <I2C_MasterReceive_BTF+0x36>
	}else if (hi2c->XferCount == 3U) {
 800784c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800784e:	b29b      	uxth	r3, r3
 8007850:	2b03      	cmp	r3, #3
 8007852:	d021      	beq.n	8007898 <I2C_MasterReceive_BTF+0x58>
	}else if (hi2c->XferCount == 2U) {
 8007854:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8007856:	b29b      	uxth	r3, r3
 8007858:	2b02      	cmp	r3, #2
 800785a:	d033      	beq.n	80078c4 <I2C_MasterReceive_BTF+0x84>
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800785c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800785e:	1c5a      	adds	r2, r3, #1
 8007860:	6242      	str	r2, [r0, #36]	; 0x24
 8007862:	6802      	ldr	r2, [r0, #0]
 8007864:	6912      	ldr	r2, [r2, #16]
 8007866:	701a      	strb	r2, [r3, #0]
		hi2c->XferCount--;
 8007868:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800786a:	b29b      	uxth	r3, r3
 800786c:	3b01      	subs	r3, #1
 800786e:	b29b      	uxth	r3, r3
 8007870:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 8007872:	2000      	movs	r0, #0
 8007874:	bd08      	pop	{r3, pc}
		__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007876:	6802      	ldr	r2, [r0, #0]
 8007878:	6853      	ldr	r3, [r2, #4]
 800787a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800787e:	6053      	str	r3, [r2, #4]
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8007880:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007882:	1c5a      	adds	r2, r3, #1
 8007884:	6242      	str	r2, [r0, #36]	; 0x24
 8007886:	6802      	ldr	r2, [r0, #0]
 8007888:	6912      	ldr	r2, [r2, #16]
 800788a:	701a      	strb	r2, [r3, #0]
		hi2c->XferCount--;
 800788c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800788e:	b29b      	uxth	r3, r3
 8007890:	3b01      	subs	r3, #1
 8007892:	b29b      	uxth	r3, r3
 8007894:	8543      	strh	r3, [r0, #42]	; 0x2a
 8007896:	e7ec      	b.n	8007872 <I2C_MasterReceive_BTF+0x32>
		__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007898:	6802      	ldr	r2, [r0, #0]
 800789a:	6853      	ldr	r3, [r2, #4]
 800789c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078a0:	6053      	str	r3, [r2, #4]
		hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80078a2:	6802      	ldr	r2, [r0, #0]
 80078a4:	6813      	ldr	r3, [r2, #0]
 80078a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078aa:	6013      	str	r3, [r2, #0]
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80078ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80078ae:	1c5a      	adds	r2, r3, #1
 80078b0:	6242      	str	r2, [r0, #36]	; 0x24
 80078b2:	6802      	ldr	r2, [r0, #0]
 80078b4:	6912      	ldr	r2, [r2, #16]
 80078b6:	701a      	strb	r2, [r3, #0]
		hi2c->XferCount--;
 80078b8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	3b01      	subs	r3, #1
 80078be:	b29b      	uxth	r3, r3
 80078c0:	8543      	strh	r3, [r0, #42]	; 0x2a
 80078c2:	e7d6      	b.n	8007872 <I2C_MasterReceive_BTF+0x32>
		if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)) {
 80078c4:	3a01      	subs	r2, #1
 80078c6:	2a01      	cmp	r2, #1
 80078c8:	d92f      	bls.n	800792a <I2C_MasterReceive_BTF+0xea>
			hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80078ca:	6802      	ldr	r2, [r0, #0]
 80078cc:	6813      	ldr	r3, [r2, #0]
 80078ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80078d2:	6013      	str	r3, [r2, #0]
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80078d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80078d6:	1c5a      	adds	r2, r3, #1
 80078d8:	6242      	str	r2, [r0, #36]	; 0x24
 80078da:	6802      	ldr	r2, [r0, #0]
 80078dc:	6912      	ldr	r2, [r2, #16]
 80078de:	701a      	strb	r2, [r3, #0]
		hi2c->XferCount--;
 80078e0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	3b01      	subs	r3, #1
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	8543      	strh	r3, [r0, #42]	; 0x2a
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80078ea:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80078ec:	1c5a      	adds	r2, r3, #1
 80078ee:	6242      	str	r2, [r0, #36]	; 0x24
 80078f0:	6802      	ldr	r2, [r0, #0]
 80078f2:	6912      	ldr	r2, [r2, #16]
 80078f4:	701a      	strb	r2, [r3, #0]
		hi2c->XferCount--;
 80078f6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	3b01      	subs	r3, #1
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	8543      	strh	r3, [r0, #42]	; 0x2a
		__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007900:	6802      	ldr	r2, [r0, #0]
 8007902:	6853      	ldr	r3, [r2, #4]
 8007904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007908:	6053      	str	r3, [r2, #4]
		hi2c->State = HAL_I2C_STATE_READY;
 800790a:	2320      	movs	r3, #32
 800790c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
		hi2c->PreviousState = I2C_STATE_NONE;
 8007910:	2300      	movs	r3, #0
 8007912:	6303      	str	r3, [r0, #48]	; 0x30
		if (hi2c->Mode == HAL_I2C_MODE_MEM) {
 8007914:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8007918:	b2db      	uxtb	r3, r3
 800791a:	2b40      	cmp	r3, #64	; 0x40
 800791c:	d010      	beq.n	8007940 <I2C_MasterReceive_BTF+0x100>
			hi2c->Mode = HAL_I2C_MODE_NONE;
 800791e:	2300      	movs	r3, #0
 8007920:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
			HAL_I2C_MasterRxCpltCallback(hi2c);
 8007924:	f7ff fd97 	bl	8007456 <HAL_I2C_MasterRxCpltCallback>
 8007928:	e7a3      	b.n	8007872 <I2C_MasterReceive_BTF+0x32>
			hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800792a:	6802      	ldr	r2, [r0, #0]
 800792c:	6813      	ldr	r3, [r2, #0]
 800792e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007932:	6013      	str	r3, [r2, #0]
			hi2c->Instance->CR1 |= I2C_CR1_START;
 8007934:	6802      	ldr	r2, [r0, #0]
 8007936:	6813      	ldr	r3, [r2, #0]
 8007938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800793c:	6013      	str	r3, [r2, #0]
 800793e:	e7c9      	b.n	80078d4 <I2C_MasterReceive_BTF+0x94>
			hi2c->Mode = HAL_I2C_MODE_NONE;
 8007940:	2300      	movs	r3, #0
 8007942:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
			HAL_I2C_MemRxCpltCallback(hi2c);
 8007946:	f7ff ff2c 	bl	80077a2 <HAL_I2C_MemRxCpltCallback>
 800794a:	e792      	b.n	8007872 <I2C_MasterReceive_BTF+0x32>

0800794c <HAL_I2C_ErrorCallback>:
{
 800794c:	4770      	bx	lr

0800794e <HAL_I2C_AbortCpltCallback>:
{
 800794e:	4770      	bx	lr

08007950 <I2C_ITError>:
{
 8007950:	b510      	push	{r4, lr}
 8007952:	4604      	mov	r4, r0
	uint32_t CurrentState = hi2c->State;
 8007954:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
	if ((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)) {
 8007958:	3b29      	subs	r3, #41	; 0x29
 800795a:	2b01      	cmp	r3, #1
 800795c:	d937      	bls.n	80079ce <I2C_ITError+0x7e>
		if ((hi2c->State != HAL_I2C_STATE_ABORT) && ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) != I2C_CR2_DMAEN)) {
 800795e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007962:	b2db      	uxtb	r3, r3
 8007964:	2b60      	cmp	r3, #96	; 0x60
 8007966:	d007      	beq.n	8007978 <I2C_ITError+0x28>
 8007968:	6803      	ldr	r3, [r0, #0]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8007970:	d102      	bne.n	8007978 <I2C_ITError+0x28>
			hi2c->State = HAL_I2C_STATE_READY;
 8007972:	2320      	movs	r3, #32
 8007974:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
		hi2c->PreviousState = I2C_STATE_NONE;
 8007978:	2300      	movs	r3, #0
 800797a:	6323      	str	r3, [r4, #48]	; 0x30
		hi2c->Mode = HAL_I2C_MODE_NONE;
 800797c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
	hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007980:	6822      	ldr	r2, [r4, #0]
 8007982:	6813      	ldr	r3, [r2, #0]
 8007984:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007988:	6013      	str	r3, [r2, #0]
	if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) {
 800798a:	6823      	ldr	r3, [r4, #0]
 800798c:	685a      	ldr	r2, [r3, #4]
 800798e:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8007992:	d03f      	beq.n	8007a14 <I2C_ITError+0xc4>
		hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007994:	685a      	ldr	r2, [r3, #4]
 8007996:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800799a:	605a      	str	r2, [r3, #4]
		if (hi2c->hdmatx->State != HAL_DMA_STATE_READY) {
 800799c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800799e:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d018      	beq.n	80079da <I2C_ITError+0x8a>
			hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80079a8:	4b3a      	ldr	r3, [pc, #232]	; (8007a94 <I2C_ITError+0x144>)
 80079aa:	6513      	str	r3, [r2, #80]	; 0x50
			if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK) {
 80079ac:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80079ae:	f7fe fb3b 	bl	8006028 <HAL_DMA_Abort_IT>
 80079b2:	2800      	cmp	r0, #0
 80079b4:	d03f      	beq.n	8007a36 <I2C_ITError+0xe6>
				__HAL_I2C_DISABLE(hi2c);
 80079b6:	6822      	ldr	r2, [r4, #0]
 80079b8:	6813      	ldr	r3, [r2, #0]
 80079ba:	f023 0301 	bic.w	r3, r3, #1
 80079be:	6013      	str	r3, [r2, #0]
				hi2c->State = HAL_I2C_STATE_READY;
 80079c0:	2320      	movs	r3, #32
 80079c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
				hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80079c6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80079c8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80079ca:	4798      	blx	r3
 80079cc:	e033      	b.n	8007a36 <I2C_ITError+0xe6>
		hi2c->PreviousState = I2C_STATE_NONE;
 80079ce:	2300      	movs	r3, #0
 80079d0:	6303      	str	r3, [r0, #48]	; 0x30
		hi2c->State = HAL_I2C_STATE_LISTEN;
 80079d2:	2328      	movs	r3, #40	; 0x28
 80079d4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 80079d8:	e7d2      	b.n	8007980 <I2C_ITError+0x30>
			hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80079da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80079dc:	4a2d      	ldr	r2, [pc, #180]	; (8007a94 <I2C_ITError+0x144>)
 80079de:	651a      	str	r2, [r3, #80]	; 0x50
			if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK) {
 80079e0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80079e2:	f7fe fb21 	bl	8006028 <HAL_DMA_Abort_IT>
 80079e6:	b330      	cbz	r0, 8007a36 <I2C_ITError+0xe6>
				if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) {
 80079e8:	6823      	ldr	r3, [r4, #0]
 80079ea:	695a      	ldr	r2, [r3, #20]
 80079ec:	f012 0f40 	tst.w	r2, #64	; 0x40
 80079f0:	d004      	beq.n	80079fc <I2C_ITError+0xac>
					(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80079f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80079f4:	1c51      	adds	r1, r2, #1
 80079f6:	6261      	str	r1, [r4, #36]	; 0x24
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	7013      	strb	r3, [r2, #0]
				__HAL_I2C_DISABLE(hi2c);
 80079fc:	6822      	ldr	r2, [r4, #0]
 80079fe:	6813      	ldr	r3, [r2, #0]
 8007a00:	f023 0301 	bic.w	r3, r3, #1
 8007a04:	6013      	str	r3, [r2, #0]
				hi2c->State = HAL_I2C_STATE_READY;
 8007a06:	2320      	movs	r3, #32
 8007a08:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
				hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007a0c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007a0e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007a10:	4798      	blx	r3
 8007a12:	e010      	b.n	8007a36 <I2C_ITError+0xe6>
	}else if (hi2c->State == HAL_I2C_STATE_ABORT) {
 8007a14:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8007a18:	b2d2      	uxtb	r2, r2
 8007a1a:	2a60      	cmp	r2, #96	; 0x60
 8007a1c:	d011      	beq.n	8007a42 <I2C_ITError+0xf2>
		if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) {
 8007a1e:	695a      	ldr	r2, [r3, #20]
 8007a20:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007a24:	d004      	beq.n	8007a30 <I2C_ITError+0xe0>
			(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8007a26:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007a28:	1c51      	adds	r1, r2, #1
 8007a2a:	6261      	str	r1, [r4, #36]	; 0x24
 8007a2c:	691b      	ldr	r3, [r3, #16]
 8007a2e:	7013      	strb	r3, [r2, #0]
		HAL_I2C_ErrorCallback(hi2c);
 8007a30:	4620      	mov	r0, r4
 8007a32:	f7ff ff8b 	bl	800794c <HAL_I2C_ErrorCallback>
	if ((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)) {
 8007a36:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	2b28      	cmp	r3, #40	; 0x28
 8007a3e:	d017      	beq.n	8007a70 <I2C_ITError+0x120>
 8007a40:	bd10      	pop	{r4, pc}
		hi2c->State = HAL_I2C_STATE_READY;
 8007a42:	2220      	movs	r2, #32
 8007a44:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
		hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a48:	2200      	movs	r2, #0
 8007a4a:	6422      	str	r2, [r4, #64]	; 0x40
		if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) {
 8007a4c:	695a      	ldr	r2, [r3, #20]
 8007a4e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007a52:	d004      	beq.n	8007a5e <I2C_ITError+0x10e>
			(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8007a54:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007a56:	1c51      	adds	r1, r2, #1
 8007a58:	6261      	str	r1, [r4, #36]	; 0x24
 8007a5a:	691b      	ldr	r3, [r3, #16]
 8007a5c:	7013      	strb	r3, [r2, #0]
		__HAL_I2C_DISABLE(hi2c);
 8007a5e:	6822      	ldr	r2, [r4, #0]
 8007a60:	6813      	ldr	r3, [r2, #0]
 8007a62:	f023 0301 	bic.w	r3, r3, #1
 8007a66:	6013      	str	r3, [r2, #0]
		HAL_I2C_AbortCpltCallback(hi2c);
 8007a68:	4620      	mov	r0, r4
 8007a6a:	f7ff ff70 	bl	800794e <HAL_I2C_AbortCpltCallback>
 8007a6e:	e7e2      	b.n	8007a36 <I2C_ITError+0xe6>
	if ((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)) {
 8007a70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a72:	f013 0f04 	tst.w	r3, #4
 8007a76:	d0e3      	beq.n	8007a40 <I2C_ITError+0xf0>
		hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007a78:	4b07      	ldr	r3, [pc, #28]	; (8007a98 <I2C_ITError+0x148>)
 8007a7a:	62e3      	str	r3, [r4, #44]	; 0x2c
		hi2c->PreviousState = I2C_STATE_NONE;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	6323      	str	r3, [r4, #48]	; 0x30
		hi2c->State = HAL_I2C_STATE_READY;
 8007a80:	2220      	movs	r2, #32
 8007a82:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a86:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		HAL_I2C_ListenCpltCallback(hi2c);
 8007a8a:	4620      	mov	r0, r4
 8007a8c:	f7ff fd49 	bl	8007522 <HAL_I2C_ListenCpltCallback>
}
 8007a90:	e7d6      	b.n	8007a40 <I2C_ITError+0xf0>
 8007a92:	bf00      	nop
 8007a94:	08007ddd 	.word	0x08007ddd
 8007a98:	ffff0000 	.word	0xffff0000

08007a9c <I2C_Slave_STOPF>:
{
 8007a9c:	b510      	push	{r4, lr}
 8007a9e:	b082      	sub	sp, #8
	uint32_t CurrentState = hi2c->State;
 8007aa0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007aa4:	b2db      	uxtb	r3, r3
	__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007aa6:	6801      	ldr	r1, [r0, #0]
 8007aa8:	684a      	ldr	r2, [r1, #4]
 8007aaa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007aae:	604a      	str	r2, [r1, #4]
	__HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	9201      	str	r2, [sp, #4]
 8007ab4:	6802      	ldr	r2, [r0, #0]
 8007ab6:	6951      	ldr	r1, [r2, #20]
 8007ab8:	9101      	str	r1, [sp, #4]
 8007aba:	6811      	ldr	r1, [r2, #0]
 8007abc:	f041 0101 	orr.w	r1, r1, #1
 8007ac0:	6011      	str	r1, [r2, #0]
 8007ac2:	9a01      	ldr	r2, [sp, #4]
	hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8007ac4:	6801      	ldr	r1, [r0, #0]
 8007ac6:	680a      	ldr	r2, [r1, #0]
 8007ac8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007acc:	600a      	str	r2, [r1, #0]
	if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) {
 8007ace:	6801      	ldr	r1, [r0, #0]
 8007ad0:	684a      	ldr	r2, [r1, #4]
 8007ad2:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8007ad6:	d00e      	beq.n	8007af6 <I2C_Slave_STOPF+0x5a>
		if ((hi2c->State == HAL_I2C_STATE_BUSY_RX) || (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)) {
 8007ad8:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8007adc:	b2d2      	uxtb	r2, r2
 8007ade:	2a22      	cmp	r2, #34	; 0x22
 8007ae0:	d044      	beq.n	8007b6c <I2C_Slave_STOPF+0xd0>
 8007ae2:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8007ae6:	b2d2      	uxtb	r2, r2
 8007ae8:	2a2a      	cmp	r2, #42	; 0x2a
 8007aea:	d03f      	beq.n	8007b6c <I2C_Slave_STOPF+0xd0>
			hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8007aec:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007aee:	6812      	ldr	r2, [r2, #0]
 8007af0:	6852      	ldr	r2, [r2, #4]
 8007af2:	b292      	uxth	r2, r2
 8007af4:	8542      	strh	r2, [r0, #42]	; 0x2a
	if (hi2c->XferCount != 0U) {
 8007af6:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8007af8:	b292      	uxth	r2, r2
 8007afa:	b302      	cbz	r2, 8007b3e <I2C_Slave_STOPF+0xa2>
		if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) {
 8007afc:	694a      	ldr	r2, [r1, #20]
 8007afe:	f012 0f04 	tst.w	r2, #4
 8007b02:	d009      	beq.n	8007b18 <I2C_Slave_STOPF+0x7c>
			(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8007b04:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8007b06:	1c54      	adds	r4, r2, #1
 8007b08:	6244      	str	r4, [r0, #36]	; 0x24
 8007b0a:	6909      	ldr	r1, [r1, #16]
 8007b0c:	7011      	strb	r1, [r2, #0]
			hi2c->XferCount--;
 8007b0e:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8007b10:	b292      	uxth	r2, r2
 8007b12:	3a01      	subs	r2, #1
 8007b14:	b292      	uxth	r2, r2
 8007b16:	8542      	strh	r2, [r0, #42]	; 0x2a
		if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) {
 8007b18:	6802      	ldr	r2, [r0, #0]
 8007b1a:	6951      	ldr	r1, [r2, #20]
 8007b1c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8007b20:	d009      	beq.n	8007b36 <I2C_Slave_STOPF+0x9a>
			(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8007b22:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8007b24:	1c4c      	adds	r4, r1, #1
 8007b26:	6244      	str	r4, [r0, #36]	; 0x24
 8007b28:	6912      	ldr	r2, [r2, #16]
 8007b2a:	700a      	strb	r2, [r1, #0]
			hi2c->XferCount--;
 8007b2c:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8007b2e:	b292      	uxth	r2, r2
 8007b30:	3a01      	subs	r2, #1
 8007b32:	b292      	uxth	r2, r2
 8007b34:	8542      	strh	r2, [r0, #42]	; 0x2a
		hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007b36:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007b38:	f042 0204 	orr.w	r2, r2, #4
 8007b3c:	6402      	str	r2, [r0, #64]	; 0x40
	if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE) {
 8007b3e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007b40:	b9d2      	cbnz	r2, 8007b78 <I2C_Slave_STOPF+0xdc>
		if ((CurrentState == HAL_I2C_STATE_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN) || \
 8007b42:	2b28      	cmp	r3, #40	; 0x28
 8007b44:	d01b      	beq.n	8007b7e <I2C_Slave_STOPF+0xe2>
 8007b46:	2b2a      	cmp	r3, #42	; 0x2a
 8007b48:	d019      	beq.n	8007b7e <I2C_Slave_STOPF+0xe2>
 8007b4a:	2b29      	cmp	r3, #41	; 0x29
 8007b4c:	d017      	beq.n	8007b7e <I2C_Slave_STOPF+0xe2>
			if ((hi2c->PreviousState == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX)) {
 8007b4e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8007b50:	2a22      	cmp	r2, #34	; 0x22
 8007b52:	d001      	beq.n	8007b58 <I2C_Slave_STOPF+0xbc>
 8007b54:	2b22      	cmp	r3, #34	; 0x22
 8007b56:	d11d      	bne.n	8007b94 <I2C_Slave_STOPF+0xf8>
				hi2c->PreviousState = I2C_STATE_NONE;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	6303      	str	r3, [r0, #48]	; 0x30
				hi2c->State = HAL_I2C_STATE_READY;
 8007b5c:	2220      	movs	r2, #32
 8007b5e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
				hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b62:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
				HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007b66:	f7ff fca0 	bl	80074aa <HAL_I2C_SlaveRxCpltCallback>
 8007b6a:	e013      	b.n	8007b94 <I2C_Slave_STOPF+0xf8>
			hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8007b6c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8007b6e:	6812      	ldr	r2, [r2, #0]
 8007b70:	6852      	ldr	r2, [r2, #4]
 8007b72:	b292      	uxth	r2, r2
 8007b74:	8542      	strh	r2, [r0, #42]	; 0x2a
 8007b76:	e7be      	b.n	8007af6 <I2C_Slave_STOPF+0x5a>
		I2C_ITError(hi2c);
 8007b78:	f7ff feea 	bl	8007950 <I2C_ITError>
 8007b7c:	e00a      	b.n	8007b94 <I2C_Slave_STOPF+0xf8>
			hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b7e:	4b07      	ldr	r3, [pc, #28]	; (8007b9c <I2C_Slave_STOPF+0x100>)
 8007b80:	62c3      	str	r3, [r0, #44]	; 0x2c
			hi2c->PreviousState = I2C_STATE_NONE;
 8007b82:	2300      	movs	r3, #0
 8007b84:	6303      	str	r3, [r0, #48]	; 0x30
			hi2c->State = HAL_I2C_STATE_READY;
 8007b86:	2220      	movs	r2, #32
 8007b88:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
			hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b8c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
			HAL_I2C_ListenCpltCallback(hi2c);
 8007b90:	f7ff fcc7 	bl	8007522 <HAL_I2C_ListenCpltCallback>
}
 8007b94:	2000      	movs	r0, #0
 8007b96:	b002      	add	sp, #8
 8007b98:	bd10      	pop	{r4, pc}
 8007b9a:	bf00      	nop
 8007b9c:	ffff0000 	.word	0xffff0000

08007ba0 <HAL_I2C_EV_IRQHandler>:
{
 8007ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ba2:	4605      	mov	r5, r0
	uint32_t sr2itflags = READ_REG(hi2c->Instance->SR2);
 8007ba4:	6803      	ldr	r3, [r0, #0]
 8007ba6:	699f      	ldr	r7, [r3, #24]
	uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8007ba8:	695c      	ldr	r4, [r3, #20]
	uint32_t itsources = READ_REG(hi2c->Instance->CR2);
 8007baa:	685e      	ldr	r6, [r3, #4]
	uint32_t CurrentMode = hi2c->Mode;
 8007bac:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8007bb0:	b2db      	uxtb	r3, r3
	if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) {
 8007bb2:	2b10      	cmp	r3, #16
 8007bb4:	d025      	beq.n	8007c02 <HAL_I2C_EV_IRQHandler+0x62>
 8007bb6:	2b40      	cmp	r3, #64	; 0x40
 8007bb8:	d023      	beq.n	8007c02 <HAL_I2C_EV_IRQHandler+0x62>
		if (((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET)) {
 8007bba:	4b4c      	ldr	r3, [pc, #304]	; (8007cec <HAL_I2C_EV_IRQHandler+0x14c>)
 8007bbc:	4023      	ands	r3, r4
 8007bbe:	b113      	cbz	r3, 8007bc6 <HAL_I2C_EV_IRQHandler+0x26>
 8007bc0:	f416 7f00 	tst.w	r6, #512	; 0x200
 8007bc4:	d16e      	bne.n	8007ca4 <HAL_I2C_EV_IRQHandler+0x104>
		else if (((sr1itflags & I2C_FLAG_STOPF) != RESET) && ((itsources & I2C_IT_EVT) != RESET)) {
 8007bc6:	4b4a      	ldr	r3, [pc, #296]	; (8007cf0 <HAL_I2C_EV_IRQHandler+0x150>)
 8007bc8:	4023      	ands	r3, r4
 8007bca:	b113      	cbz	r3, 8007bd2 <HAL_I2C_EV_IRQHandler+0x32>
 8007bcc:	f416 7f00 	tst.w	r6, #512	; 0x200
 8007bd0:	d16b      	bne.n	8007caa <HAL_I2C_EV_IRQHandler+0x10a>
		else if ((sr2itflags & I2C_FLAG_TRA) != RESET) {
 8007bd2:	4b48      	ldr	r3, [pc, #288]	; (8007cf4 <HAL_I2C_EV_IRQHandler+0x154>)
 8007bd4:	403b      	ands	r3, r7
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d06f      	beq.n	8007cba <HAL_I2C_EV_IRQHandler+0x11a>
			if (((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET)) {
 8007bda:	4b47      	ldr	r3, [pc, #284]	; (8007cf8 <HAL_I2C_EV_IRQHandler+0x158>)
 8007bdc:	4023      	ands	r3, r4
 8007bde:	b133      	cbz	r3, 8007bee <HAL_I2C_EV_IRQHandler+0x4e>
 8007be0:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8007be4:	d003      	beq.n	8007bee <HAL_I2C_EV_IRQHandler+0x4e>
 8007be6:	4b45      	ldr	r3, [pc, #276]	; (8007cfc <HAL_I2C_EV_IRQHandler+0x15c>)
 8007be8:	4023      	ands	r3, r4
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d061      	beq.n	8007cb2 <HAL_I2C_EV_IRQHandler+0x112>
			else if (((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET)) {
 8007bee:	4b43      	ldr	r3, [pc, #268]	; (8007cfc <HAL_I2C_EV_IRQHandler+0x15c>)
 8007bf0:	4023      	ands	r3, r4
 8007bf2:	b353      	cbz	r3, 8007c4a <HAL_I2C_EV_IRQHandler+0xaa>
 8007bf4:	f416 7f00 	tst.w	r6, #512	; 0x200
 8007bf8:	d027      	beq.n	8007c4a <HAL_I2C_EV_IRQHandler+0xaa>
				I2C_SlaveTransmit_BTF(hi2c);
 8007bfa:	4628      	mov	r0, r5
 8007bfc:	f7fe fe77 	bl	80068ee <I2C_SlaveTransmit_BTF>
 8007c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (((sr1itflags & I2C_FLAG_SB) != RESET) && ((itsources & I2C_IT_EVT) != RESET)) {
 8007c02:	f014 1f01 	tst.w	r4, #65537	; 0x10001
 8007c06:	d002      	beq.n	8007c0e <HAL_I2C_EV_IRQHandler+0x6e>
 8007c08:	f416 7f00 	tst.w	r6, #512	; 0x200
 8007c0c:	d11e      	bne.n	8007c4c <HAL_I2C_EV_IRQHandler+0xac>
		else if (((sr1itflags & I2C_FLAG_ADD10) != RESET) && ((itsources & I2C_IT_EVT) != RESET)) {
 8007c0e:	4b3c      	ldr	r3, [pc, #240]	; (8007d00 <HAL_I2C_EV_IRQHandler+0x160>)
 8007c10:	4023      	ands	r3, r4
 8007c12:	b113      	cbz	r3, 8007c1a <HAL_I2C_EV_IRQHandler+0x7a>
 8007c14:	f416 7f00 	tst.w	r6, #512	; 0x200
 8007c18:	d11c      	bne.n	8007c54 <HAL_I2C_EV_IRQHandler+0xb4>
		else if (((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET)) {
 8007c1a:	4b34      	ldr	r3, [pc, #208]	; (8007cec <HAL_I2C_EV_IRQHandler+0x14c>)
 8007c1c:	4023      	ands	r3, r4
 8007c1e:	b113      	cbz	r3, 8007c26 <HAL_I2C_EV_IRQHandler+0x86>
 8007c20:	f416 7f00 	tst.w	r6, #512	; 0x200
 8007c24:	d11a      	bne.n	8007c5c <HAL_I2C_EV_IRQHandler+0xbc>
		if ((sr2itflags & I2C_FLAG_TRA) != RESET) {
 8007c26:	4b33      	ldr	r3, [pc, #204]	; (8007cf4 <HAL_I2C_EV_IRQHandler+0x154>)
 8007c28:	403b      	ands	r3, r7
 8007c2a:	b31b      	cbz	r3, 8007c74 <HAL_I2C_EV_IRQHandler+0xd4>
			if (((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET)) {
 8007c2c:	4b32      	ldr	r3, [pc, #200]	; (8007cf8 <HAL_I2C_EV_IRQHandler+0x158>)
 8007c2e:	4023      	ands	r3, r4
 8007c30:	b12b      	cbz	r3, 8007c3e <HAL_I2C_EV_IRQHandler+0x9e>
 8007c32:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8007c36:	d002      	beq.n	8007c3e <HAL_I2C_EV_IRQHandler+0x9e>
 8007c38:	4b30      	ldr	r3, [pc, #192]	; (8007cfc <HAL_I2C_EV_IRQHandler+0x15c>)
 8007c3a:	4023      	ands	r3, r4
 8007c3c:	b193      	cbz	r3, 8007c64 <HAL_I2C_EV_IRQHandler+0xc4>
			else if (((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET)) {
 8007c3e:	4b2f      	ldr	r3, [pc, #188]	; (8007cfc <HAL_I2C_EV_IRQHandler+0x15c>)
 8007c40:	4023      	ands	r3, r4
 8007c42:	b113      	cbz	r3, 8007c4a <HAL_I2C_EV_IRQHandler+0xaa>
 8007c44:	f416 7f00 	tst.w	r6, #512	; 0x200
 8007c48:	d110      	bne.n	8007c6c <HAL_I2C_EV_IRQHandler+0xcc>
 8007c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			I2C_Master_SB(hi2c);
 8007c4c:	4628      	mov	r0, r5
 8007c4e:	f7fe fd1d 	bl	800668c <I2C_Master_SB>
 8007c52:	e7e8      	b.n	8007c26 <HAL_I2C_EV_IRQHandler+0x86>
			I2C_Master_ADD10(hi2c);
 8007c54:	4628      	mov	r0, r5
 8007c56:	f7fe fd5e 	bl	8006716 <I2C_Master_ADD10>
 8007c5a:	e7e4      	b.n	8007c26 <HAL_I2C_EV_IRQHandler+0x86>
			I2C_Master_ADDR(hi2c);
 8007c5c:	4628      	mov	r0, r5
 8007c5e:	f7fe fd60 	bl	8006722 <I2C_Master_ADDR>
 8007c62:	e7e0      	b.n	8007c26 <HAL_I2C_EV_IRQHandler+0x86>
				I2C_MasterTransmit_TXE(hi2c);
 8007c64:	4628      	mov	r0, r5
 8007c66:	f7ff fca8 	bl	80075ba <I2C_MasterTransmit_TXE>
 8007c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				I2C_MasterTransmit_BTF(hi2c);
 8007c6c:	4628      	mov	r0, r5
 8007c6e:	f7ff fd49 	bl	8007704 <I2C_MasterTransmit_BTF>
 8007c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET)) {
 8007c74:	4b23      	ldr	r3, [pc, #140]	; (8007d04 <HAL_I2C_EV_IRQHandler+0x164>)
 8007c76:	4023      	ands	r3, r4
 8007c78:	b12b      	cbz	r3, 8007c86 <HAL_I2C_EV_IRQHandler+0xe6>
 8007c7a:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8007c7e:	d002      	beq.n	8007c86 <HAL_I2C_EV_IRQHandler+0xe6>
 8007c80:	4b1e      	ldr	r3, [pc, #120]	; (8007cfc <HAL_I2C_EV_IRQHandler+0x15c>)
 8007c82:	4023      	ands	r3, r4
 8007c84:	b153      	cbz	r3, 8007c9c <HAL_I2C_EV_IRQHandler+0xfc>
			else if (((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET)) {
 8007c86:	4b1d      	ldr	r3, [pc, #116]	; (8007cfc <HAL_I2C_EV_IRQHandler+0x15c>)
 8007c88:	4023      	ands	r3, r4
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d0dd      	beq.n	8007c4a <HAL_I2C_EV_IRQHandler+0xaa>
 8007c8e:	f416 7f00 	tst.w	r6, #512	; 0x200
 8007c92:	d0da      	beq.n	8007c4a <HAL_I2C_EV_IRQHandler+0xaa>
				I2C_MasterReceive_BTF(hi2c);
 8007c94:	4628      	mov	r0, r5
 8007c96:	f7ff fdd3 	bl	8007840 <I2C_MasterReceive_BTF>
 8007c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				I2C_MasterReceive_RXNE(hi2c);
 8007c9c:	4628      	mov	r0, r5
 8007c9e:	f7ff fd81 	bl	80077a4 <I2C_MasterReceive_RXNE>
 8007ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			I2C_Slave_ADDR(hi2c);
 8007ca4:	f7ff fc29 	bl	80074fa <I2C_Slave_ADDR>
 8007ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			I2C_Slave_STOPF(hi2c);
 8007caa:	4628      	mov	r0, r5
 8007cac:	f7ff fef6 	bl	8007a9c <I2C_Slave_STOPF>
 8007cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				I2C_SlaveTransmit_TXE(hi2c);
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	f7ff fbd1 	bl	800745a <I2C_SlaveTransmit_TXE>
 8007cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET)) {
 8007cba:	4b12      	ldr	r3, [pc, #72]	; (8007d04 <HAL_I2C_EV_IRQHandler+0x164>)
 8007cbc:	4023      	ands	r3, r4
 8007cbe:	b12b      	cbz	r3, 8007ccc <HAL_I2C_EV_IRQHandler+0x12c>
 8007cc0:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8007cc4:	d002      	beq.n	8007ccc <HAL_I2C_EV_IRQHandler+0x12c>
 8007cc6:	4b0d      	ldr	r3, [pc, #52]	; (8007cfc <HAL_I2C_EV_IRQHandler+0x15c>)
 8007cc8:	4023      	ands	r3, r4
 8007cca:	b153      	cbz	r3, 8007ce2 <HAL_I2C_EV_IRQHandler+0x142>
			else if (((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET)) {
 8007ccc:	4b0b      	ldr	r3, [pc, #44]	; (8007cfc <HAL_I2C_EV_IRQHandler+0x15c>)
 8007cce:	4023      	ands	r3, r4
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d0ba      	beq.n	8007c4a <HAL_I2C_EV_IRQHandler+0xaa>
 8007cd4:	f416 7f00 	tst.w	r6, #512	; 0x200
 8007cd8:	d0b7      	beq.n	8007c4a <HAL_I2C_EV_IRQHandler+0xaa>
				I2C_SlaveReceive_BTF(hi2c);
 8007cda:	4628      	mov	r0, r5
 8007cdc:	f7fe fe17 	bl	800690e <I2C_SlaveReceive_BTF>
}
 8007ce0:	e7b3      	b.n	8007c4a <HAL_I2C_EV_IRQHandler+0xaa>
				I2C_SlaveReceive_RXNE(hi2c);
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	f7ff fbe2 	bl	80074ac <I2C_SlaveReceive_RXNE>
 8007ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cea:	bf00      	nop
 8007cec:	00010002 	.word	0x00010002
 8007cf0:	00010010 	.word	0x00010010
 8007cf4:	00100004 	.word	0x00100004
 8007cf8:	00010080 	.word	0x00010080
 8007cfc:	00010004 	.word	0x00010004
 8007d00:	00010008 	.word	0x00010008
 8007d04:	00010040 	.word	0x00010040

08007d08 <HAL_I2C_ER_IRQHandler>:
{
 8007d08:	b570      	push	{r4, r5, r6, lr}
 8007d0a:	4604      	mov	r4, r0
	uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8007d0c:	6803      	ldr	r3, [r0, #0]
 8007d0e:	695d      	ldr	r5, [r3, #20]
	uint32_t itsources = READ_REG(hi2c->Instance->CR2);
 8007d10:	685e      	ldr	r6, [r3, #4]
	if (((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET)) {
 8007d12:	4a31      	ldr	r2, [pc, #196]	; (8007dd8 <HAL_I2C_ER_IRQHandler+0xd0>)
 8007d14:	4215      	tst	r5, r2
 8007d16:	d009      	beq.n	8007d2c <HAL_I2C_ER_IRQHandler+0x24>
 8007d18:	f416 7f80 	tst.w	r6, #256	; 0x100
 8007d1c:	d006      	beq.n	8007d2c <HAL_I2C_ER_IRQHandler+0x24>
		hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007d1e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007d20:	f042 0201 	orr.w	r2, r2, #1
 8007d24:	6402      	str	r2, [r0, #64]	; 0x40
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007d26:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007d2a:	615a      	str	r2, [r3, #20]
	if (((sr1itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERR) != RESET)) {
 8007d2c:	f415 3f81 	tst.w	r5, #66048	; 0x10200
 8007d30:	d00a      	beq.n	8007d48 <HAL_I2C_ER_IRQHandler+0x40>
 8007d32:	f416 7f80 	tst.w	r6, #256	; 0x100
 8007d36:	d007      	beq.n	8007d48 <HAL_I2C_ER_IRQHandler+0x40>
		hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007d38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d3a:	f043 0302 	orr.w	r3, r3, #2
 8007d3e:	6423      	str	r3, [r4, #64]	; 0x40
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007d40:	6823      	ldr	r3, [r4, #0]
 8007d42:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8007d46:	615a      	str	r2, [r3, #20]
	if (((sr1itflags & I2C_FLAG_AF) != RESET) && ((itsources & I2C_IT_ERR) != RESET)) {
 8007d48:	f415 3f82 	tst.w	r5, #66560	; 0x10400
 8007d4c:	d01a      	beq.n	8007d84 <HAL_I2C_ER_IRQHandler+0x7c>
 8007d4e:	f416 7f80 	tst.w	r6, #256	; 0x100
 8007d52:	d017      	beq.n	8007d84 <HAL_I2C_ER_IRQHandler+0x7c>
		tmp1 = hi2c->Mode;
 8007d54:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8007d58:	b2db      	uxtb	r3, r3
		tmp2 = hi2c->XferCount;
 8007d5a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8007d5c:	b291      	uxth	r1, r2
		tmp3 = hi2c->State;
 8007d5e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8007d62:	b2d2      	uxtb	r2, r2
		tmp4 = hi2c->PreviousState;
 8007d64:	6b20      	ldr	r0, [r4, #48]	; 0x30
		if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8007d66:	2b20      	cmp	r3, #32
 8007d68:	d01d      	beq.n	8007da6 <HAL_I2C_ER_IRQHandler+0x9e>
			hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007d6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d6c:	f043 0304 	orr.w	r3, r3, #4
 8007d70:	6423      	str	r3, [r4, #64]	; 0x40
			if (hi2c->Mode == HAL_I2C_MODE_MASTER) {
 8007d72:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	2b10      	cmp	r3, #16
 8007d7a:	d022      	beq.n	8007dc2 <HAL_I2C_ER_IRQHandler+0xba>
			__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d7c:	6823      	ldr	r3, [r4, #0]
 8007d7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007d82:	615a      	str	r2, [r3, #20]
	if (((sr1itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERR) != RESET)) {
 8007d84:	f415 3f84 	tst.w	r5, #67584	; 0x10800
 8007d88:	d00a      	beq.n	8007da0 <HAL_I2C_ER_IRQHandler+0x98>
 8007d8a:	f416 7f80 	tst.w	r6, #256	; 0x100
 8007d8e:	d007      	beq.n	8007da0 <HAL_I2C_ER_IRQHandler+0x98>
		hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007d90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d92:	f043 0308 	orr.w	r3, r3, #8
 8007d96:	6423      	str	r3, [r4, #64]	; 0x40
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007d98:	6823      	ldr	r3, [r4, #0]
 8007d9a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8007d9e:	615a      	str	r2, [r3, #20]
	if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE) {
 8007da0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007da2:	b9a3      	cbnz	r3, 8007dce <HAL_I2C_ER_IRQHandler+0xc6>
 8007da4:	bd70      	pop	{r4, r5, r6, pc}
		if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8007da6:	2900      	cmp	r1, #0
 8007da8:	d1df      	bne.n	8007d6a <HAL_I2C_ER_IRQHandler+0x62>
 8007daa:	2a21      	cmp	r2, #33	; 0x21
 8007dac:	d005      	beq.n	8007dba <HAL_I2C_ER_IRQHandler+0xb2>
		    ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8007dae:	2a29      	cmp	r2, #41	; 0x29
 8007db0:	d003      	beq.n	8007dba <HAL_I2C_ER_IRQHandler+0xb2>
 8007db2:	2a28      	cmp	r2, #40	; 0x28
 8007db4:	d1d9      	bne.n	8007d6a <HAL_I2C_ER_IRQHandler+0x62>
		     ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX)))) {
 8007db6:	2821      	cmp	r0, #33	; 0x21
 8007db8:	d1d7      	bne.n	8007d6a <HAL_I2C_ER_IRQHandler+0x62>
			I2C_Slave_AF(hi2c);
 8007dba:	4620      	mov	r0, r4
 8007dbc:	f7ff fbb2 	bl	8007524 <I2C_Slave_AF>
 8007dc0:	e7e0      	b.n	8007d84 <HAL_I2C_ER_IRQHandler+0x7c>
				SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dc2:	6822      	ldr	r2, [r4, #0]
 8007dc4:	6813      	ldr	r3, [r2, #0]
 8007dc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007dca:	6013      	str	r3, [r2, #0]
 8007dcc:	e7d6      	b.n	8007d7c <HAL_I2C_ER_IRQHandler+0x74>
		I2C_ITError(hi2c);
 8007dce:	4620      	mov	r0, r4
 8007dd0:	f7ff fdbe 	bl	8007950 <I2C_ITError>
}
 8007dd4:	e7e6      	b.n	8007da4 <HAL_I2C_ER_IRQHandler+0x9c>
 8007dd6:	bf00      	nop
 8007dd8:	00010100 	.word	0x00010100

08007ddc <I2C_DMAAbort>:
{
 8007ddc:	b508      	push	{r3, lr}
	I2C_HandleTypeDef* hi2c = ( I2C_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007dde:	6b80      	ldr	r0, [r0, #56]	; 0x38
	hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8007de0:	6802      	ldr	r2, [r0, #0]
 8007de2:	6813      	ldr	r3, [r2, #0]
 8007de4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007de8:	6013      	str	r3, [r2, #0]
	hi2c->XferCount = 0U;
 8007dea:	2300      	movs	r3, #0
 8007dec:	8543      	strh	r3, [r0, #42]	; 0x2a
	hi2c->hdmatx->XferAbortCallback = NULL;
 8007dee:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007df0:	6513      	str	r3, [r2, #80]	; 0x50
	hi2c->hdmarx->XferAbortCallback = NULL;
 8007df2:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8007df4:	6513      	str	r3, [r2, #80]	; 0x50
	if (hi2c->State == HAL_I2C_STATE_ABORT) {
 8007df6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	2b60      	cmp	r3, #96	; 0x60
 8007dfe:	d00d      	beq.n	8007e1c <I2C_DMAAbort+0x40>
		hi2c->State = HAL_I2C_STATE_READY;
 8007e00:	2320      	movs	r3, #32
 8007e02:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e06:	2300      	movs	r3, #0
 8007e08:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
		__HAL_I2C_DISABLE(hi2c);
 8007e0c:	6802      	ldr	r2, [r0, #0]
 8007e0e:	6813      	ldr	r3, [r2, #0]
 8007e10:	f023 0301 	bic.w	r3, r3, #1
 8007e14:	6013      	str	r3, [r2, #0]
		HAL_I2C_ErrorCallback(hi2c);
 8007e16:	f7ff fd99 	bl	800794c <HAL_I2C_ErrorCallback>
 8007e1a:	bd08      	pop	{r3, pc}
		hi2c->State = HAL_I2C_STATE_READY;
 8007e1c:	2320      	movs	r3, #32
 8007e1e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e22:	2300      	movs	r3, #0
 8007e24:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
		hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e28:	6403      	str	r3, [r0, #64]	; 0x40
		__HAL_I2C_DISABLE(hi2c);
 8007e2a:	6802      	ldr	r2, [r0, #0]
 8007e2c:	6813      	ldr	r3, [r2, #0]
 8007e2e:	f023 0301 	bic.w	r3, r3, #1
 8007e32:	6013      	str	r3, [r2, #0]
		HAL_I2C_AbortCpltCallback(hi2c);
 8007e34:	f7ff fd8b 	bl	800794e <HAL_I2C_AbortCpltCallback>
 8007e38:	bd08      	pop	{r3, pc}
	...

08007e3c <HAL_PWR_EnableBkUpAccess>:
 *         Backup Domain Access should be kept enabled.
 * @retval None
 */
void HAL_PWR_EnableBkUpAccess(void)
{
	*(__IO uint32_t *)CR_DBP_BB = (uint32_t)ENABLE;
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	4b01      	ldr	r3, [pc, #4]	; (8007e44 <HAL_PWR_EnableBkUpAccess+0x8>)
 8007e40:	601a      	str	r2, [r3, #0]
 8007e42:	4770      	bx	lr
 8007e44:	420e0020 	.word	0x420e0020

08007e48 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
	uint32_t tickstart;

	/* Check Null pointer */
	if (RCC_OscInitStruct == NULL) {
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	f000 8235 	beq.w	80082b8 <HAL_RCC_OscConfig+0x470>
{
 8007e4e:	b570      	push	{r4, r5, r6, lr}
 8007e50:	b082      	sub	sp, #8
 8007e52:	4604      	mov	r4, r0
		return HAL_ERROR;
	}

	/* Check the parameters */
	assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8007e54:	6803      	ldr	r3, [r0, #0]
 8007e56:	2b0f      	cmp	r3, #15
 8007e58:	d83d      	bhi.n	8007ed6 <HAL_RCC_OscConfig+0x8e>
	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE) {
 8007e5a:	6823      	ldr	r3, [r4, #0]
 8007e5c:	f013 0f01 	tst.w	r3, #1
 8007e60:	d04c      	beq.n	8007efc <HAL_RCC_OscConfig+0xb4>
		/* Check the parameters */
		assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8007e62:	6863      	ldr	r3, [r4, #4]
 8007e64:	b14b      	cbz	r3, 8007e7a <HAL_RCC_OscConfig+0x32>
 8007e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e6a:	d006      	beq.n	8007e7a <HAL_RCC_OscConfig+0x32>
 8007e6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e70:	d003      	beq.n	8007e7a <HAL_RCC_OscConfig+0x32>
 8007e72:	21fb      	movs	r1, #251	; 0xfb
 8007e74:	48a2      	ldr	r0, [pc, #648]	; (8008100 <HAL_RCC_OscConfig+0x2b8>)
 8007e76:	f004 fa59 	bl	800c32c <assert_failed>
		/* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007e7a:	4ba2      	ldr	r3, [pc, #648]	; (8008104 <HAL_RCC_OscConfig+0x2bc>)
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	f003 030c 	and.w	r3, r3, #12
 8007e82:	2b04      	cmp	r3, #4
 8007e84:	d031      	beq.n	8007eea <HAL_RCC_OscConfig+0xa2>
		    ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE))) {
 8007e86:	4b9f      	ldr	r3, [pc, #636]	; (8008104 <HAL_RCC_OscConfig+0x2bc>)
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	f003 030c 	and.w	r3, r3, #12
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007e8e:	2b08      	cmp	r3, #8
 8007e90:	d026      	beq.n	8007ee0 <HAL_RCC_OscConfig+0x98>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
				return HAL_ERROR;
			}
		}else  {
			/* Set the new HSE configuration ---------------------------------------*/
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e92:	6863      	ldr	r3, [r4, #4]
 8007e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e98:	d05f      	beq.n	8007f5a <HAL_RCC_OscConfig+0x112>
 8007e9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e9e:	d062      	beq.n	8007f66 <HAL_RCC_OscConfig+0x11e>
 8007ea0:	4b98      	ldr	r3, [pc, #608]	; (8008104 <HAL_RCC_OscConfig+0x2bc>)
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007ea8:	601a      	str	r2, [r3, #0]
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007eb0:	601a      	str	r2, [r3, #0]

			/* Check the HSE State */
			if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF) {
 8007eb2:	6863      	ldr	r3, [r4, #4]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d060      	beq.n	8007f7a <HAL_RCC_OscConfig+0x132>
				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8007eb8:	f7fd fa2a 	bl	8005310 <HAL_GetTick>
 8007ebc:	4605      	mov	r5, r0

				/* Wait till HSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8007ebe:	4b91      	ldr	r3, [pc, #580]	; (8008104 <HAL_RCC_OscConfig+0x2bc>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007ec6:	d119      	bne.n	8007efc <HAL_RCC_OscConfig+0xb4>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8007ec8:	f7fd fa22 	bl	8005310 <HAL_GetTick>
 8007ecc:	1b40      	subs	r0, r0, r5
 8007ece:	2864      	cmp	r0, #100	; 0x64
 8007ed0:	d9f5      	bls.n	8007ebe <HAL_RCC_OscConfig+0x76>
						return HAL_TIMEOUT;
 8007ed2:	2003      	movs	r0, #3
 8007ed4:	e1f5      	b.n	80082c2 <HAL_RCC_OscConfig+0x47a>
	assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8007ed6:	21f7      	movs	r1, #247	; 0xf7
 8007ed8:	4889      	ldr	r0, [pc, #548]	; (8008100 <HAL_RCC_OscConfig+0x2b8>)
 8007eda:	f004 fa27 	bl	800c32c <assert_failed>
 8007ede:	e7bc      	b.n	8007e5a <HAL_RCC_OscConfig+0x12>
		    ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE))) {
 8007ee0:	4b88      	ldr	r3, [pc, #544]	; (8008104 <HAL_RCC_OscConfig+0x2bc>)
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8007ee8:	d0d3      	beq.n	8007e92 <HAL_RCC_OscConfig+0x4a>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 8007eea:	4b86      	ldr	r3, [pc, #536]	; (8008104 <HAL_RCC_OscConfig+0x2bc>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007ef2:	d003      	beq.n	8007efc <HAL_RCC_OscConfig+0xb4>
 8007ef4:	6863      	ldr	r3, [r4, #4]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	f000 81e0 	beq.w	80082bc <HAL_RCC_OscConfig+0x474>
				}
			}
		}
	}
	/*----------------------------- HSI Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI) {
 8007efc:	6823      	ldr	r3, [r4, #0]
 8007efe:	f013 0f02 	tst.w	r3, #2
 8007f02:	d066      	beq.n	8007fd2 <HAL_RCC_OscConfig+0x18a>
		/* Check the parameters */
		assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8007f04:	68e3      	ldr	r3, [r4, #12]
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d904      	bls.n	8007f14 <HAL_RCC_OscConfig+0xcc>
 8007f0a:	f240 1121 	movw	r1, #289	; 0x121
 8007f0e:	487c      	ldr	r0, [pc, #496]	; (8008100 <HAL_RCC_OscConfig+0x2b8>)
 8007f10:	f004 fa0c 	bl	800c32c <assert_failed>
		assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8007f14:	6923      	ldr	r3, [r4, #16]
 8007f16:	2b1f      	cmp	r3, #31
 8007f18:	d83e      	bhi.n	8007f98 <HAL_RCC_OscConfig+0x150>

		/* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007f1a:	4b7a      	ldr	r3, [pc, #488]	; (8008104 <HAL_RCC_OscConfig+0x2bc>)
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	f013 0f0c 	tst.w	r3, #12
 8007f22:	d044      	beq.n	8007fae <HAL_RCC_OscConfig+0x166>
		    ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI))) {
 8007f24:	4b77      	ldr	r3, [pc, #476]	; (8008104 <HAL_RCC_OscConfig+0x2bc>)
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	f003 030c 	and.w	r3, r3, #12
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007f2c:	2b08      	cmp	r3, #8
 8007f2e:	d039      	beq.n	8007fa4 <HAL_RCC_OscConfig+0x15c>
				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
			}
		}else  {
			/* Check the HSI State */
			if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF) {
 8007f30:	68e3      	ldr	r3, [r4, #12]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d076      	beq.n	8008024 <HAL_RCC_OscConfig+0x1dc>
				/* Enable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_ENABLE();
 8007f36:	2201      	movs	r2, #1
 8007f38:	4b73      	ldr	r3, [pc, #460]	; (8008108 <HAL_RCC_OscConfig+0x2c0>)
 8007f3a:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8007f3c:	f7fd f9e8 	bl	8005310 <HAL_GetTick>
 8007f40:	4605      	mov	r5, r0

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8007f42:	4b70      	ldr	r3, [pc, #448]	; (8008104 <HAL_RCC_OscConfig+0x2bc>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f013 0f02 	tst.w	r3, #2
 8007f4a:	d162      	bne.n	8008012 <HAL_RCC_OscConfig+0x1ca>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8007f4c:	f7fd f9e0 	bl	8005310 <HAL_GetTick>
 8007f50:	1b40      	subs	r0, r0, r5
 8007f52:	2802      	cmp	r0, #2
 8007f54:	d9f5      	bls.n	8007f42 <HAL_RCC_OscConfig+0xfa>
						return HAL_TIMEOUT;
 8007f56:	2003      	movs	r0, #3
 8007f58:	e1b3      	b.n	80082c2 <HAL_RCC_OscConfig+0x47a>
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f5a:	4a6a      	ldr	r2, [pc, #424]	; (8008104 <HAL_RCC_OscConfig+0x2bc>)
 8007f5c:	6813      	ldr	r3, [r2, #0]
 8007f5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f62:	6013      	str	r3, [r2, #0]
 8007f64:	e7a5      	b.n	8007eb2 <HAL_RCC_OscConfig+0x6a>
 8007f66:	4b67      	ldr	r3, [pc, #412]	; (8008104 <HAL_RCC_OscConfig+0x2bc>)
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007f6e:	601a      	str	r2, [r3, #0]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007f76:	601a      	str	r2, [r3, #0]
 8007f78:	e79b      	b.n	8007eb2 <HAL_RCC_OscConfig+0x6a>
				tickstart = HAL_GetTick();
 8007f7a:	f7fd f9c9 	bl	8005310 <HAL_GetTick>
 8007f7e:	4605      	mov	r5, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 8007f80:	4b60      	ldr	r3, [pc, #384]	; (8008104 <HAL_RCC_OscConfig+0x2bc>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007f88:	d0b8      	beq.n	8007efc <HAL_RCC_OscConfig+0xb4>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8007f8a:	f7fd f9c1 	bl	8005310 <HAL_GetTick>
 8007f8e:	1b40      	subs	r0, r0, r5
 8007f90:	2864      	cmp	r0, #100	; 0x64
 8007f92:	d9f5      	bls.n	8007f80 <HAL_RCC_OscConfig+0x138>
						return HAL_TIMEOUT;
 8007f94:	2003      	movs	r0, #3
 8007f96:	e194      	b.n	80082c2 <HAL_RCC_OscConfig+0x47a>
		assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8007f98:	f44f 7191 	mov.w	r1, #290	; 0x122
 8007f9c:	4858      	ldr	r0, [pc, #352]	; (8008100 <HAL_RCC_OscConfig+0x2b8>)
 8007f9e:	f004 f9c5 	bl	800c32c <assert_failed>
 8007fa2:	e7ba      	b.n	8007f1a <HAL_RCC_OscConfig+0xd2>
		    ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI))) {
 8007fa4:	4b57      	ldr	r3, [pc, #348]	; (8008104 <HAL_RCC_OscConfig+0x2bc>)
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8007fac:	d1c0      	bne.n	8007f30 <HAL_RCC_OscConfig+0xe8>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 8007fae:	4b55      	ldr	r3, [pc, #340]	; (8008104 <HAL_RCC_OscConfig+0x2bc>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f013 0f02 	tst.w	r3, #2
 8007fb6:	d004      	beq.n	8007fc2 <HAL_RCC_OscConfig+0x17a>
 8007fb8:	68e3      	ldr	r3, [r4, #12]
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d001      	beq.n	8007fc2 <HAL_RCC_OscConfig+0x17a>
				return HAL_ERROR;
 8007fbe:	2001      	movs	r0, #1
 8007fc0:	e17f      	b.n	80082c2 <HAL_RCC_OscConfig+0x47a>
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fc2:	4a50      	ldr	r2, [pc, #320]	; (8008104 <HAL_RCC_OscConfig+0x2bc>)
 8007fc4:	6813      	ldr	r3, [r2, #0]
 8007fc6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007fca:	6921      	ldr	r1, [r4, #16]
 8007fcc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007fd0:	6013      	str	r3, [r2, #0]
				}
			}
		}
	}
	/*------------------------------ LSI Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI) {
 8007fd2:	6823      	ldr	r3, [r4, #0]
 8007fd4:	f013 0f08 	tst.w	r3, #8
 8007fd8:	d048      	beq.n	800806c <HAL_RCC_OscConfig+0x224>
		/* Check the parameters */
		assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8007fda:	6963      	ldr	r3, [r4, #20]
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d904      	bls.n	8007fea <HAL_RCC_OscConfig+0x1a2>
 8007fe0:	f240 1155 	movw	r1, #341	; 0x155
 8007fe4:	4846      	ldr	r0, [pc, #280]	; (8008100 <HAL_RCC_OscConfig+0x2b8>)
 8007fe6:	f004 f9a1 	bl	800c32c <assert_failed>

		/* Check the LSI State */
		if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF) {
 8007fea:	6963      	ldr	r3, [r4, #20]
 8007fec:	b363      	cbz	r3, 8008048 <HAL_RCC_OscConfig+0x200>
			/* Enable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_ENABLE();
 8007fee:	2201      	movs	r2, #1
 8007ff0:	4b46      	ldr	r3, [pc, #280]	; (800810c <HAL_RCC_OscConfig+0x2c4>)
 8007ff2:	601a      	str	r2, [r3, #0]

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8007ff4:	f7fd f98c 	bl	8005310 <HAL_GetTick>
 8007ff8:	4605      	mov	r5, r0

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 8007ffa:	4b42      	ldr	r3, [pc, #264]	; (8008104 <HAL_RCC_OscConfig+0x2bc>)
 8007ffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ffe:	f013 0f02 	tst.w	r3, #2
 8008002:	d133      	bne.n	800806c <HAL_RCC_OscConfig+0x224>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8008004:	f7fd f984 	bl	8005310 <HAL_GetTick>
 8008008:	1b40      	subs	r0, r0, r5
 800800a:	2802      	cmp	r0, #2
 800800c:	d9f5      	bls.n	8007ffa <HAL_RCC_OscConfig+0x1b2>
					return HAL_TIMEOUT;
 800800e:	2003      	movs	r0, #3
 8008010:	e157      	b.n	80082c2 <HAL_RCC_OscConfig+0x47a>
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008012:	4a3c      	ldr	r2, [pc, #240]	; (8008104 <HAL_RCC_OscConfig+0x2bc>)
 8008014:	6813      	ldr	r3, [r2, #0]
 8008016:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800801a:	6921      	ldr	r1, [r4, #16]
 800801c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008020:	6013      	str	r3, [r2, #0]
 8008022:	e7d6      	b.n	8007fd2 <HAL_RCC_OscConfig+0x18a>
				__HAL_RCC_HSI_DISABLE();
 8008024:	2200      	movs	r2, #0
 8008026:	4b38      	ldr	r3, [pc, #224]	; (8008108 <HAL_RCC_OscConfig+0x2c0>)
 8008028:	601a      	str	r2, [r3, #0]
				tickstart = HAL_GetTick();
 800802a:	f7fd f971 	bl	8005310 <HAL_GetTick>
 800802e:	4605      	mov	r5, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 8008030:	4b34      	ldr	r3, [pc, #208]	; (8008104 <HAL_RCC_OscConfig+0x2bc>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f013 0f02 	tst.w	r3, #2
 8008038:	d0cb      	beq.n	8007fd2 <HAL_RCC_OscConfig+0x18a>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 800803a:	f7fd f969 	bl	8005310 <HAL_GetTick>
 800803e:	1b40      	subs	r0, r0, r5
 8008040:	2802      	cmp	r0, #2
 8008042:	d9f5      	bls.n	8008030 <HAL_RCC_OscConfig+0x1e8>
						return HAL_TIMEOUT;
 8008044:	2003      	movs	r0, #3
 8008046:	e13c      	b.n	80082c2 <HAL_RCC_OscConfig+0x47a>
				}
			}
		}else  {
			/* Disable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_DISABLE();
 8008048:	2200      	movs	r2, #0
 800804a:	4b30      	ldr	r3, [pc, #192]	; (800810c <HAL_RCC_OscConfig+0x2c4>)
 800804c:	601a      	str	r2, [r3, #0]

			/* Get Start Tick */
			tickstart = HAL_GetTick();
 800804e:	f7fd f95f 	bl	8005310 <HAL_GetTick>
 8008052:	4605      	mov	r5, r0

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 8008054:	4b2b      	ldr	r3, [pc, #172]	; (8008104 <HAL_RCC_OscConfig+0x2bc>)
 8008056:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008058:	f013 0f02 	tst.w	r3, #2
 800805c:	d006      	beq.n	800806c <HAL_RCC_OscConfig+0x224>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 800805e:	f7fd f957 	bl	8005310 <HAL_GetTick>
 8008062:	1b40      	subs	r0, r0, r5
 8008064:	2802      	cmp	r0, #2
 8008066:	d9f5      	bls.n	8008054 <HAL_RCC_OscConfig+0x20c>
					return HAL_TIMEOUT;
 8008068:	2003      	movs	r0, #3
 800806a:	e12a      	b.n	80082c2 <HAL_RCC_OscConfig+0x47a>
				}
			}
		}
	}
	/*------------------------------ LSE Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE) {
 800806c:	6823      	ldr	r3, [r4, #0]
 800806e:	f013 0f04 	tst.w	r3, #4
 8008072:	f000 8085 	beq.w	8008180 <HAL_RCC_OscConfig+0x338>
		FlagStatus pwrclkchanged = RESET;

		/* Check the parameters */
		assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8008076:	68a3      	ldr	r3, [r4, #8]
 8008078:	2b01      	cmp	r3, #1
 800807a:	d906      	bls.n	800808a <HAL_RCC_OscConfig+0x242>
 800807c:	2b05      	cmp	r3, #5
 800807e:	d004      	beq.n	800808a <HAL_RCC_OscConfig+0x242>
 8008080:	f240 1179 	movw	r1, #377	; 0x179
 8008084:	481e      	ldr	r0, [pc, #120]	; (8008100 <HAL_RCC_OscConfig+0x2b8>)
 8008086:	f004 f951 	bl	800c32c <assert_failed>

		/* Update LSE configuration in Backup Domain control register    */
		/* Requires to enable write access to Backup Domain of necessary */
		if (__HAL_RCC_PWR_IS_CLK_DISABLED()) {
 800808a:	4b1e      	ldr	r3, [pc, #120]	; (8008104 <HAL_RCC_OscConfig+0x2bc>)
 800808c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800808e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8008092:	d133      	bne.n	80080fc <HAL_RCC_OscConfig+0x2b4>
			__HAL_RCC_PWR_CLK_ENABLE();
 8008094:	2300      	movs	r3, #0
 8008096:	9301      	str	r3, [sp, #4]
 8008098:	4b1a      	ldr	r3, [pc, #104]	; (8008104 <HAL_RCC_OscConfig+0x2bc>)
 800809a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800809c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80080a0:	641a      	str	r2, [r3, #64]	; 0x40
 80080a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080a8:	9301      	str	r3, [sp, #4]
 80080aa:	9b01      	ldr	r3, [sp, #4]
			pwrclkchanged = SET;
 80080ac:	2501      	movs	r5, #1
		}

		if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 80080ae:	4b18      	ldr	r3, [pc, #96]	; (8008110 <HAL_RCC_OscConfig+0x2c8>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80080b6:	d02d      	beq.n	8008114 <HAL_RCC_OscConfig+0x2cc>
				}
			}
		}

		/* Set the new LSE configuration -----------------------------------------*/
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80080b8:	68a3      	ldr	r3, [r4, #8]
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d03e      	beq.n	800813c <HAL_RCC_OscConfig+0x2f4>
 80080be:	2b05      	cmp	r3, #5
 80080c0:	d042      	beq.n	8008148 <HAL_RCC_OscConfig+0x300>
 80080c2:	4b10      	ldr	r3, [pc, #64]	; (8008104 <HAL_RCC_OscConfig+0x2bc>)
 80080c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80080c6:	f022 0201 	bic.w	r2, r2, #1
 80080ca:	671a      	str	r2, [r3, #112]	; 0x70
 80080cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80080ce:	f022 0204 	bic.w	r2, r2, #4
 80080d2:	671a      	str	r2, [r3, #112]	; 0x70
		/* Check the LSE State */
		if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF) {
 80080d4:	68a3      	ldr	r3, [r4, #8]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d040      	beq.n	800815c <HAL_RCC_OscConfig+0x314>
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 80080da:	f7fd f919 	bl	8005310 <HAL_GetTick>
 80080de:	4606      	mov	r6, r0

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 80080e0:	4b08      	ldr	r3, [pc, #32]	; (8008104 <HAL_RCC_OscConfig+0x2bc>)
 80080e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080e4:	f013 0f02 	tst.w	r3, #2
 80080e8:	d149      	bne.n	800817e <HAL_RCC_OscConfig+0x336>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 80080ea:	f7fd f911 	bl	8005310 <HAL_GetTick>
 80080ee:	1b80      	subs	r0, r0, r6
 80080f0:	f241 3388 	movw	r3, #5000	; 0x1388
 80080f4:	4298      	cmp	r0, r3
 80080f6:	d9f3      	bls.n	80080e0 <HAL_RCC_OscConfig+0x298>
					return HAL_TIMEOUT;
 80080f8:	2003      	movs	r0, #3
 80080fa:	e0e2      	b.n	80082c2 <HAL_RCC_OscConfig+0x47a>
		FlagStatus pwrclkchanged = RESET;
 80080fc:	2500      	movs	r5, #0
 80080fe:	e7d6      	b.n	80080ae <HAL_RCC_OscConfig+0x266>
 8008100:	0801e1e4 	.word	0x0801e1e4
 8008104:	40023800 	.word	0x40023800
 8008108:	42470000 	.word	0x42470000
 800810c:	42470e80 	.word	0x42470e80
 8008110:	40007000 	.word	0x40007000
			SET_BIT(PWR->CR, PWR_CR_DBP);
 8008114:	4a6d      	ldr	r2, [pc, #436]	; (80082cc <HAL_RCC_OscConfig+0x484>)
 8008116:	6813      	ldr	r3, [r2, #0]
 8008118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800811c:	6013      	str	r3, [r2, #0]
			tickstart = HAL_GetTick();
 800811e:	f7fd f8f7 	bl	8005310 <HAL_GetTick>
 8008122:	4606      	mov	r6, r0
			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8008124:	4b69      	ldr	r3, [pc, #420]	; (80082cc <HAL_RCC_OscConfig+0x484>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f413 7f80 	tst.w	r3, #256	; 0x100
 800812c:	d1c4      	bne.n	80080b8 <HAL_RCC_OscConfig+0x270>
				if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 800812e:	f7fd f8ef 	bl	8005310 <HAL_GetTick>
 8008132:	1b80      	subs	r0, r0, r6
 8008134:	2802      	cmp	r0, #2
 8008136:	d9f5      	bls.n	8008124 <HAL_RCC_OscConfig+0x2dc>
					return HAL_TIMEOUT;
 8008138:	2003      	movs	r0, #3
 800813a:	e0c2      	b.n	80082c2 <HAL_RCC_OscConfig+0x47a>
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800813c:	4a64      	ldr	r2, [pc, #400]	; (80082d0 <HAL_RCC_OscConfig+0x488>)
 800813e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8008140:	f043 0301 	orr.w	r3, r3, #1
 8008144:	6713      	str	r3, [r2, #112]	; 0x70
 8008146:	e7c5      	b.n	80080d4 <HAL_RCC_OscConfig+0x28c>
 8008148:	4b61      	ldr	r3, [pc, #388]	; (80082d0 <HAL_RCC_OscConfig+0x488>)
 800814a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800814c:	f042 0204 	orr.w	r2, r2, #4
 8008150:	671a      	str	r2, [r3, #112]	; 0x70
 8008152:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008154:	f042 0201 	orr.w	r2, r2, #1
 8008158:	671a      	str	r2, [r3, #112]	; 0x70
 800815a:	e7bb      	b.n	80080d4 <HAL_RCC_OscConfig+0x28c>
				}
			}
		}else  {
			/* Get Start Tick */
			tickstart = HAL_GetTick();
 800815c:	f7fd f8d8 	bl	8005310 <HAL_GetTick>
 8008160:	4606      	mov	r6, r0

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 8008162:	4b5b      	ldr	r3, [pc, #364]	; (80082d0 <HAL_RCC_OscConfig+0x488>)
 8008164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008166:	f013 0f02 	tst.w	r3, #2
 800816a:	d008      	beq.n	800817e <HAL_RCC_OscConfig+0x336>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 800816c:	f7fd f8d0 	bl	8005310 <HAL_GetTick>
 8008170:	1b80      	subs	r0, r0, r6
 8008172:	f241 3388 	movw	r3, #5000	; 0x1388
 8008176:	4298      	cmp	r0, r3
 8008178:	d9f3      	bls.n	8008162 <HAL_RCC_OscConfig+0x31a>
					return HAL_TIMEOUT;
 800817a:	2003      	movs	r0, #3
 800817c:	e0a1      	b.n	80082c2 <HAL_RCC_OscConfig+0x47a>
				}
			}
		}

		/* Restore clock configuration if changed */
		if (pwrclkchanged == SET) {
 800817e:	bb0d      	cbnz	r5, 80081c4 <HAL_RCC_OscConfig+0x37c>
			__HAL_RCC_PWR_CLK_DISABLE();
		}
	}
	/*-------------------------------- PLL Configuration -----------------------*/
	/* Check the parameters */
	assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8008180:	69a3      	ldr	r3, [r4, #24]
 8008182:	2b02      	cmp	r3, #2
 8008184:	d824      	bhi.n	80081d0 <HAL_RCC_OscConfig+0x388>
	if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE) {
 8008186:	69a3      	ldr	r3, [r4, #24]
 8008188:	2b00      	cmp	r3, #0
 800818a:	f000 8099 	beq.w	80082c0 <HAL_RCC_OscConfig+0x478>
		/* Check if the PLL is used as system clock or not */
		if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL) {
 800818e:	4a50      	ldr	r2, [pc, #320]	; (80082d0 <HAL_RCC_OscConfig+0x488>)
 8008190:	6892      	ldr	r2, [r2, #8]
 8008192:	f002 020c 	and.w	r2, r2, #12
 8008196:	2a08      	cmp	r2, #8
 8008198:	f000 8095 	beq.w	80082c6 <HAL_RCC_OscConfig+0x47e>
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 800819c:	2b02      	cmp	r3, #2
 800819e:	d01d      	beq.n	80081dc <HAL_RCC_OscConfig+0x394>
						return HAL_TIMEOUT;
					}
				}
			}else  {
				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 80081a0:	2200      	movs	r2, #0
 80081a2:	4b4c      	ldr	r3, [pc, #304]	; (80082d4 <HAL_RCC_OscConfig+0x48c>)
 80081a4:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 80081a6:	f7fd f8b3 	bl	8005310 <HAL_GetTick>
 80081aa:	4604      	mov	r4, r0

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 80081ac:	4b48      	ldr	r3, [pc, #288]	; (80082d0 <HAL_RCC_OscConfig+0x488>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80081b4:	d07e      	beq.n	80082b4 <HAL_RCC_OscConfig+0x46c>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 80081b6:	f7fd f8ab 	bl	8005310 <HAL_GetTick>
 80081ba:	1b00      	subs	r0, r0, r4
 80081bc:	2802      	cmp	r0, #2
 80081be:	d9f5      	bls.n	80081ac <HAL_RCC_OscConfig+0x364>
						return HAL_TIMEOUT;
 80081c0:	2003      	movs	r0, #3
 80081c2:	e07e      	b.n	80082c2 <HAL_RCC_OscConfig+0x47a>
			__HAL_RCC_PWR_CLK_DISABLE();
 80081c4:	4a42      	ldr	r2, [pc, #264]	; (80082d0 <HAL_RCC_OscConfig+0x488>)
 80081c6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80081c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081cc:	6413      	str	r3, [r2, #64]	; 0x40
 80081ce:	e7d7      	b.n	8008180 <HAL_RCC_OscConfig+0x338>
	assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80081d0:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80081d4:	4840      	ldr	r0, [pc, #256]	; (80082d8 <HAL_RCC_OscConfig+0x490>)
 80081d6:	f004 f8a9 	bl	800c32c <assert_failed>
 80081da:	e7d4      	b.n	8008186 <HAL_RCC_OscConfig+0x33e>
				assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80081dc:	69e3      	ldr	r3, [r4, #28]
 80081de:	b13b      	cbz	r3, 80081f0 <HAL_RCC_OscConfig+0x3a8>
 80081e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081e4:	d004      	beq.n	80081f0 <HAL_RCC_OscConfig+0x3a8>
 80081e6:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 80081ea:	483b      	ldr	r0, [pc, #236]	; (80082d8 <HAL_RCC_OscConfig+0x490>)
 80081ec:	f004 f89e 	bl	800c32c <assert_failed>
				assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80081f0:	6a23      	ldr	r3, [r4, #32]
 80081f2:	2b3f      	cmp	r3, #63	; 0x3f
 80081f4:	d828      	bhi.n	8008248 <HAL_RCC_OscConfig+0x400>
				assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80081f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081f8:	3b32      	subs	r3, #50	; 0x32
 80081fa:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 80081fe:	d829      	bhi.n	8008254 <HAL_RCC_OscConfig+0x40c>
				assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8008200:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008202:	2b02      	cmp	r3, #2
 8008204:	d00a      	beq.n	800821c <HAL_RCC_OscConfig+0x3d4>
 8008206:	2b04      	cmp	r3, #4
 8008208:	d008      	beq.n	800821c <HAL_RCC_OscConfig+0x3d4>
 800820a:	2b06      	cmp	r3, #6
 800820c:	d006      	beq.n	800821c <HAL_RCC_OscConfig+0x3d4>
 800820e:	2b08      	cmp	r3, #8
 8008210:	d004      	beq.n	800821c <HAL_RCC_OscConfig+0x3d4>
 8008212:	f240 11b9 	movw	r1, #441	; 0x1b9
 8008216:	4830      	ldr	r0, [pc, #192]	; (80082d8 <HAL_RCC_OscConfig+0x490>)
 8008218:	f004 f888 	bl	800c32c <assert_failed>
				assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800821c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800821e:	3b02      	subs	r3, #2
 8008220:	2b0d      	cmp	r3, #13
 8008222:	d81d      	bhi.n	8008260 <HAL_RCC_OscConfig+0x418>
				__HAL_RCC_PLL_DISABLE();
 8008224:	2200      	movs	r2, #0
 8008226:	4b2b      	ldr	r3, [pc, #172]	; (80082d4 <HAL_RCC_OscConfig+0x48c>)
 8008228:	601a      	str	r2, [r3, #0]
				tickstart = HAL_GetTick();
 800822a:	f7fd f871 	bl	8005310 <HAL_GetTick>
 800822e:	4605      	mov	r5, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8008230:	4b27      	ldr	r3, [pc, #156]	; (80082d0 <HAL_RCC_OscConfig+0x488>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008238:	d018      	beq.n	800826c <HAL_RCC_OscConfig+0x424>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 800823a:	f7fd f869 	bl	8005310 <HAL_GetTick>
 800823e:	1b40      	subs	r0, r0, r5
 8008240:	2802      	cmp	r0, #2
 8008242:	d9f5      	bls.n	8008230 <HAL_RCC_OscConfig+0x3e8>
						return HAL_TIMEOUT;
 8008244:	2003      	movs	r0, #3
 8008246:	e03c      	b.n	80082c2 <HAL_RCC_OscConfig+0x47a>
				assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8008248:	f240 11b7 	movw	r1, #439	; 0x1b7
 800824c:	4822      	ldr	r0, [pc, #136]	; (80082d8 <HAL_RCC_OscConfig+0x490>)
 800824e:	f004 f86d 	bl	800c32c <assert_failed>
 8008252:	e7d0      	b.n	80081f6 <HAL_RCC_OscConfig+0x3ae>
				assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8008254:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8008258:	481f      	ldr	r0, [pc, #124]	; (80082d8 <HAL_RCC_OscConfig+0x490>)
 800825a:	f004 f867 	bl	800c32c <assert_failed>
 800825e:	e7cf      	b.n	8008200 <HAL_RCC_OscConfig+0x3b8>
				assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8008260:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
 8008264:	481c      	ldr	r0, [pc, #112]	; (80082d8 <HAL_RCC_OscConfig+0x490>)
 8008266:	f004 f861 	bl	800c32c <assert_failed>
 800826a:	e7db      	b.n	8008224 <HAL_RCC_OscConfig+0x3dc>
				WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource | \
 800826c:	69e3      	ldr	r3, [r4, #28]
 800826e:	6a22      	ldr	r2, [r4, #32]
 8008270:	4313      	orrs	r3, r2
 8008272:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008274:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8008278:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800827a:	0852      	lsrs	r2, r2, #1
 800827c:	3a01      	subs	r2, #1
 800827e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008282:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008284:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008288:	4a11      	ldr	r2, [pc, #68]	; (80082d0 <HAL_RCC_OscConfig+0x488>)
 800828a:	6053      	str	r3, [r2, #4]
				__HAL_RCC_PLL_ENABLE();
 800828c:	2201      	movs	r2, #1
 800828e:	4b11      	ldr	r3, [pc, #68]	; (80082d4 <HAL_RCC_OscConfig+0x48c>)
 8008290:	601a      	str	r2, [r3, #0]
				tickstart = HAL_GetTick();
 8008292:	f7fd f83d 	bl	8005310 <HAL_GetTick>
 8008296:	4604      	mov	r4, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8008298:	4b0d      	ldr	r3, [pc, #52]	; (80082d0 <HAL_RCC_OscConfig+0x488>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80082a0:	d106      	bne.n	80082b0 <HAL_RCC_OscConfig+0x468>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 80082a2:	f7fd f835 	bl	8005310 <HAL_GetTick>
 80082a6:	1b00      	subs	r0, r0, r4
 80082a8:	2802      	cmp	r0, #2
 80082aa:	d9f5      	bls.n	8008298 <HAL_RCC_OscConfig+0x450>
						return HAL_TIMEOUT;
 80082ac:	2003      	movs	r0, #3
 80082ae:	e008      	b.n	80082c2 <HAL_RCC_OscConfig+0x47a>
			}
		}else  {
			return HAL_ERROR;
		}
	}
	return HAL_OK;
 80082b0:	2000      	movs	r0, #0
 80082b2:	e006      	b.n	80082c2 <HAL_RCC_OscConfig+0x47a>
 80082b4:	2000      	movs	r0, #0
 80082b6:	e004      	b.n	80082c2 <HAL_RCC_OscConfig+0x47a>
		return HAL_ERROR;
 80082b8:	2001      	movs	r0, #1
 80082ba:	4770      	bx	lr
				return HAL_ERROR;
 80082bc:	2001      	movs	r0, #1
 80082be:	e000      	b.n	80082c2 <HAL_RCC_OscConfig+0x47a>
	return HAL_OK;
 80082c0:	2000      	movs	r0, #0
}
 80082c2:	b002      	add	sp, #8
 80082c4:	bd70      	pop	{r4, r5, r6, pc}
			return HAL_ERROR;
 80082c6:	2001      	movs	r0, #1
 80082c8:	e7fb      	b.n	80082c2 <HAL_RCC_OscConfig+0x47a>
 80082ca:	bf00      	nop
 80082cc:	40007000 	.word	0x40007000
 80082d0:	40023800 	.word	0x40023800
 80082d4:	42470060 	.word	0x42470060
 80082d8:	0801e1e4 	.word	0x0801e1e4

080082dc <HAL_RCC_GetSysClockFreq>:
 *
 *
 * @retval SYSCLK frequency
 */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80082dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
	uint32_t sysclockfreq = 0U;

	/* Get SYSCLK source -------------------------------------------------------*/
	switch (RCC->CFGR & RCC_CFGR_SWS) {
 80082de:	4b31      	ldr	r3, [pc, #196]	; (80083a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	f003 030c 	and.w	r3, r3, #12
 80082e6:	2b04      	cmp	r3, #4
 80082e8:	d059      	beq.n	800839e <HAL_RCC_GetSysClockFreq+0xc2>
 80082ea:	2b08      	cmp	r3, #8
 80082ec:	d001      	beq.n	80082f2 <HAL_RCC_GetSysClockFreq+0x16>
	case RCC_CFGR_SWS_HSI: /* HSI used as system clock source */
	{
		sysclockfreq = HSI_VALUE;
 80082ee:	482e      	ldr	r0, [pc, #184]	; (80083a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 80082f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	case RCC_CFGR_SWS_PLL: /* PLL used as system clock  source */
	{
		/* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
		   SYSCLK = PLL_VCO / PLLP */
		pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80082f2:	4b2c      	ldr	r3, [pc, #176]	; (80083a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80082f4:	685a      	ldr	r2, [r3, #4]
 80082f6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
		if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI) {
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8008300:	d02a      	beq.n	8008358 <HAL_RCC_GetSysClockFreq+0x7c>
			/* HSE used as PLL clock source */
			pllvco = (uint32_t)((((uint64_t)HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008302:	4b28      	ldr	r3, [pc, #160]	; (80083a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800830a:	461e      	mov	r6, r3
 800830c:	2700      	movs	r7, #0
 800830e:	015c      	lsls	r4, r3, #5
 8008310:	2500      	movs	r5, #0
 8008312:	1ae4      	subs	r4, r4, r3
 8008314:	eb65 0507 	sbc.w	r5, r5, r7
 8008318:	01a9      	lsls	r1, r5, #6
 800831a:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 800831e:	01a0      	lsls	r0, r4, #6
 8008320:	1b00      	subs	r0, r0, r4
 8008322:	eb61 0105 	sbc.w	r1, r1, r5
 8008326:	00cb      	lsls	r3, r1, #3
 8008328:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800832c:	00c4      	lsls	r4, r0, #3
 800832e:	19a0      	adds	r0, r4, r6
 8008330:	eb43 0107 	adc.w	r1, r3, r7
 8008334:	024b      	lsls	r3, r1, #9
 8008336:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800833a:	0244      	lsls	r4, r0, #9
 800833c:	4620      	mov	r0, r4
 800833e:	4619      	mov	r1, r3
 8008340:	2300      	movs	r3, #0
 8008342:	f7f8 fca5 	bl	8000c90 <__aeabi_uldivmod>
		}else  {
			/* HSI used as PLL clock source */
			pllvco = (uint32_t)((((uint64_t)HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
		}
		pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008346:	4b17      	ldr	r3, [pc, #92]	; (80083a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800834e:	3301      	adds	r3, #1
 8008350:	005b      	lsls	r3, r3, #1

		sysclockfreq = pllvco / pllp;
 8008352:	fbb0 f0f3 	udiv	r0, r0, r3
		break;
 8008356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pllvco = (uint32_t)((((uint64_t)HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008358:	4b12      	ldr	r3, [pc, #72]	; (80083a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8008360:	461e      	mov	r6, r3
 8008362:	2700      	movs	r7, #0
 8008364:	015c      	lsls	r4, r3, #5
 8008366:	2500      	movs	r5, #0
 8008368:	1ae4      	subs	r4, r4, r3
 800836a:	eb65 0507 	sbc.w	r5, r5, r7
 800836e:	01a9      	lsls	r1, r5, #6
 8008370:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8008374:	01a0      	lsls	r0, r4, #6
 8008376:	1b00      	subs	r0, r0, r4
 8008378:	eb61 0105 	sbc.w	r1, r1, r5
 800837c:	00cb      	lsls	r3, r1, #3
 800837e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8008382:	00c4      	lsls	r4, r0, #3
 8008384:	19a0      	adds	r0, r4, r6
 8008386:	eb43 0107 	adc.w	r1, r3, r7
 800838a:	028b      	lsls	r3, r1, #10
 800838c:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8008390:	0284      	lsls	r4, r0, #10
 8008392:	4620      	mov	r0, r4
 8008394:	4619      	mov	r1, r3
 8008396:	2300      	movs	r3, #0
 8008398:	f7f8 fc7a 	bl	8000c90 <__aeabi_uldivmod>
 800839c:	e7d3      	b.n	8008346 <HAL_RCC_GetSysClockFreq+0x6a>
		sysclockfreq = HSE_VALUE;
 800839e:	4803      	ldr	r0, [pc, #12]	; (80083ac <HAL_RCC_GetSysClockFreq+0xd0>)
		sysclockfreq = HSI_VALUE;
		break;
	}
	}
	return sysclockfreq;
}
 80083a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083a2:	bf00      	nop
 80083a4:	40023800 	.word	0x40023800
 80083a8:	00f42400 	.word	0x00f42400
 80083ac:	007a1200 	.word	0x007a1200

080083b0 <HAL_RCC_ClockConfig>:
	if (RCC_ClkInitStruct == NULL) {
 80083b0:	2800      	cmp	r0, #0
 80083b2:	f000 80f6 	beq.w	80085a2 <HAL_RCC_ClockConfig+0x1f2>
{
 80083b6:	b570      	push	{r4, r5, r6, lr}
 80083b8:	4604      	mov	r4, r0
 80083ba:	460d      	mov	r5, r1
	assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80083bc:	6803      	ldr	r3, [r0, #0]
 80083be:	3b01      	subs	r3, #1
 80083c0:	2b0e      	cmp	r3, #14
 80083c2:	d811      	bhi.n	80083e8 <HAL_RCC_ClockConfig+0x38>
	assert_param(IS_FLASH_LATENCY(FLatency));
 80083c4:	2d07      	cmp	r5, #7
 80083c6:	d815      	bhi.n	80083f4 <HAL_RCC_ClockConfig+0x44>
	if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 80083c8:	4b78      	ldr	r3, [pc, #480]	; (80085ac <HAL_RCC_ClockConfig+0x1fc>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f003 030f 	and.w	r3, r3, #15
 80083d0:	429d      	cmp	r5, r3
 80083d2:	d915      	bls.n	8008400 <HAL_RCC_ClockConfig+0x50>
		__HAL_FLASH_SET_LATENCY(FLatency);
 80083d4:	b2eb      	uxtb	r3, r5
 80083d6:	4a75      	ldr	r2, [pc, #468]	; (80085ac <HAL_RCC_ClockConfig+0x1fc>)
 80083d8:	7013      	strb	r3, [r2, #0]
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 80083da:	6813      	ldr	r3, [r2, #0]
 80083dc:	f003 030f 	and.w	r3, r3, #15
 80083e0:	429d      	cmp	r5, r3
 80083e2:	d00d      	beq.n	8008400 <HAL_RCC_ClockConfig+0x50>
			return HAL_ERROR;
 80083e4:	2001      	movs	r0, #1
 80083e6:	bd70      	pop	{r4, r5, r6, pc}
	assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80083e8:	f240 2113 	movw	r1, #531	; 0x213
 80083ec:	4870      	ldr	r0, [pc, #448]	; (80085b0 <HAL_RCC_ClockConfig+0x200>)
 80083ee:	f003 ff9d 	bl	800c32c <assert_failed>
 80083f2:	e7e7      	b.n	80083c4 <HAL_RCC_ClockConfig+0x14>
	assert_param(IS_FLASH_LATENCY(FLatency));
 80083f4:	f44f 7105 	mov.w	r1, #532	; 0x214
 80083f8:	486d      	ldr	r0, [pc, #436]	; (80085b0 <HAL_RCC_ClockConfig+0x200>)
 80083fa:	f003 ff97 	bl	800c32c <assert_failed>
 80083fe:	e7e3      	b.n	80083c8 <HAL_RCC_ClockConfig+0x18>
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) {
 8008400:	6823      	ldr	r3, [r4, #0]
 8008402:	f013 0f02 	tst.w	r3, #2
 8008406:	d02e      	beq.n	8008466 <HAL_RCC_ClockConfig+0xb6>
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1) {
 8008408:	f013 0f04 	tst.w	r3, #4
 800840c:	d004      	beq.n	8008418 <HAL_RCC_ClockConfig+0x68>
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800840e:	4a69      	ldr	r2, [pc, #420]	; (80085b4 <HAL_RCC_ClockConfig+0x204>)
 8008410:	6893      	ldr	r3, [r2, #8]
 8008412:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008416:	6093      	str	r3, [r2, #8]
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2) {
 8008418:	6823      	ldr	r3, [r4, #0]
 800841a:	f013 0f08 	tst.w	r3, #8
 800841e:	d004      	beq.n	800842a <HAL_RCC_ClockConfig+0x7a>
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008420:	4a64      	ldr	r2, [pc, #400]	; (80085b4 <HAL_RCC_ClockConfig+0x204>)
 8008422:	6893      	ldr	r3, [r2, #8]
 8008424:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008428:	6093      	str	r3, [r2, #8]
		assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800842a:	68a3      	ldr	r3, [r4, #8]
 800842c:	b1a3      	cbz	r3, 8008458 <HAL_RCC_ClockConfig+0xa8>
 800842e:	2b80      	cmp	r3, #128	; 0x80
 8008430:	d012      	beq.n	8008458 <HAL_RCC_ClockConfig+0xa8>
 8008432:	2b90      	cmp	r3, #144	; 0x90
 8008434:	d010      	beq.n	8008458 <HAL_RCC_ClockConfig+0xa8>
 8008436:	2ba0      	cmp	r3, #160	; 0xa0
 8008438:	d00e      	beq.n	8008458 <HAL_RCC_ClockConfig+0xa8>
 800843a:	2bb0      	cmp	r3, #176	; 0xb0
 800843c:	d00c      	beq.n	8008458 <HAL_RCC_ClockConfig+0xa8>
 800843e:	2bc0      	cmp	r3, #192	; 0xc0
 8008440:	d00a      	beq.n	8008458 <HAL_RCC_ClockConfig+0xa8>
 8008442:	2bd0      	cmp	r3, #208	; 0xd0
 8008444:	d008      	beq.n	8008458 <HAL_RCC_ClockConfig+0xa8>
 8008446:	2be0      	cmp	r3, #224	; 0xe0
 8008448:	d006      	beq.n	8008458 <HAL_RCC_ClockConfig+0xa8>
 800844a:	2bf0      	cmp	r3, #240	; 0xf0
 800844c:	d004      	beq.n	8008458 <HAL_RCC_ClockConfig+0xa8>
 800844e:	f240 2132 	movw	r1, #562	; 0x232
 8008452:	4857      	ldr	r0, [pc, #348]	; (80085b0 <HAL_RCC_ClockConfig+0x200>)
 8008454:	f003 ff6a 	bl	800c32c <assert_failed>
		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008458:	4a56      	ldr	r2, [pc, #344]	; (80085b4 <HAL_RCC_ClockConfig+0x204>)
 800845a:	6893      	ldr	r3, [r2, #8]
 800845c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008460:	68a1      	ldr	r1, [r4, #8]
 8008462:	430b      	orrs	r3, r1
 8008464:	6093      	str	r3, [r2, #8]
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK) {
 8008466:	6823      	ldr	r3, [r4, #0]
 8008468:	f013 0f01 	tst.w	r3, #1
 800846c:	d03c      	beq.n	80084e8 <HAL_RCC_ClockConfig+0x138>
		assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800846e:	6863      	ldr	r3, [r4, #4]
 8008470:	2b03      	cmp	r3, #3
 8008472:	d825      	bhi.n	80084c0 <HAL_RCC_ClockConfig+0x110>
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 8008474:	6863      	ldr	r3, [r4, #4]
 8008476:	2b01      	cmp	r3, #1
 8008478:	d028      	beq.n	80084cc <HAL_RCC_ClockConfig+0x11c>
		else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) ||
 800847a:	1e9a      	subs	r2, r3, #2
 800847c:	2a01      	cmp	r2, #1
 800847e:	d92c      	bls.n	80084da <HAL_RCC_ClockConfig+0x12a>
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8008480:	4a4c      	ldr	r2, [pc, #304]	; (80085b4 <HAL_RCC_ClockConfig+0x204>)
 8008482:	6812      	ldr	r2, [r2, #0]
 8008484:	f012 0f02 	tst.w	r2, #2
 8008488:	f000 808d 	beq.w	80085a6 <HAL_RCC_ClockConfig+0x1f6>
		__HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800848c:	4949      	ldr	r1, [pc, #292]	; (80085b4 <HAL_RCC_ClockConfig+0x204>)
 800848e:	688a      	ldr	r2, [r1, #8]
 8008490:	f022 0203 	bic.w	r2, r2, #3
 8008494:	4313      	orrs	r3, r2
 8008496:	608b      	str	r3, [r1, #8]
		tickstart = HAL_GetTick();
 8008498:	f7fc ff3a 	bl	8005310 <HAL_GetTick>
 800849c:	4606      	mov	r6, r0
		while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 800849e:	4b45      	ldr	r3, [pc, #276]	; (80085b4 <HAL_RCC_ClockConfig+0x204>)
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	f003 030c 	and.w	r3, r3, #12
 80084a6:	6862      	ldr	r2, [r4, #4]
 80084a8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80084ac:	d01c      	beq.n	80084e8 <HAL_RCC_ClockConfig+0x138>
			if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 80084ae:	f7fc ff2f 	bl	8005310 <HAL_GetTick>
 80084b2:	1b80      	subs	r0, r0, r6
 80084b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80084b8:	4298      	cmp	r0, r3
 80084ba:	d9f0      	bls.n	800849e <HAL_RCC_ClockConfig+0xee>
				return HAL_TIMEOUT;
 80084bc:	2003      	movs	r0, #3
 80084be:	bd70      	pop	{r4, r5, r6, pc}
		assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80084c0:	f44f 710e 	mov.w	r1, #568	; 0x238
 80084c4:	483a      	ldr	r0, [pc, #232]	; (80085b0 <HAL_RCC_ClockConfig+0x200>)
 80084c6:	f003 ff31 	bl	800c32c <assert_failed>
 80084ca:	e7d3      	b.n	8008474 <HAL_RCC_ClockConfig+0xc4>
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 80084cc:	4a39      	ldr	r2, [pc, #228]	; (80085b4 <HAL_RCC_ClockConfig+0x204>)
 80084ce:	6812      	ldr	r2, [r2, #0]
 80084d0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80084d4:	d1da      	bne.n	800848c <HAL_RCC_ClockConfig+0xdc>
				return HAL_ERROR;
 80084d6:	2001      	movs	r0, #1
 80084d8:	bd70      	pop	{r4, r5, r6, pc}
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 80084da:	4a36      	ldr	r2, [pc, #216]	; (80085b4 <HAL_RCC_ClockConfig+0x204>)
 80084dc:	6812      	ldr	r2, [r2, #0]
 80084de:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80084e2:	d1d3      	bne.n	800848c <HAL_RCC_ClockConfig+0xdc>
				return HAL_ERROR;
 80084e4:	2001      	movs	r0, #1
 80084e6:	bd70      	pop	{r4, r5, r6, pc}
	if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 80084e8:	4b30      	ldr	r3, [pc, #192]	; (80085ac <HAL_RCC_ClockConfig+0x1fc>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f003 030f 	and.w	r3, r3, #15
 80084f0:	429d      	cmp	r5, r3
 80084f2:	d209      	bcs.n	8008508 <HAL_RCC_ClockConfig+0x158>
		__HAL_FLASH_SET_LATENCY(FLatency);
 80084f4:	b2ea      	uxtb	r2, r5
 80084f6:	4b2d      	ldr	r3, [pc, #180]	; (80085ac <HAL_RCC_ClockConfig+0x1fc>)
 80084f8:	701a      	strb	r2, [r3, #0]
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f003 030f 	and.w	r3, r3, #15
 8008500:	429d      	cmp	r5, r3
 8008502:	d001      	beq.n	8008508 <HAL_RCC_ClockConfig+0x158>
			return HAL_ERROR;
 8008504:	2001      	movs	r0, #1
}
 8008506:	bd70      	pop	{r4, r5, r6, pc}
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1) {
 8008508:	6823      	ldr	r3, [r4, #0]
 800850a:	f013 0f04 	tst.w	r3, #4
 800850e:	d019      	beq.n	8008544 <HAL_RCC_ClockConfig+0x194>
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8008510:	68e3      	ldr	r3, [r4, #12]
 8008512:	b183      	cbz	r3, 8008536 <HAL_RCC_ClockConfig+0x186>
 8008514:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008518:	d00d      	beq.n	8008536 <HAL_RCC_ClockConfig+0x186>
 800851a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800851e:	d00a      	beq.n	8008536 <HAL_RCC_ClockConfig+0x186>
 8008520:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8008524:	d007      	beq.n	8008536 <HAL_RCC_ClockConfig+0x186>
 8008526:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800852a:	d004      	beq.n	8008536 <HAL_RCC_ClockConfig+0x186>
 800852c:	f240 216b 	movw	r1, #619	; 0x26b
 8008530:	481f      	ldr	r0, [pc, #124]	; (80085b0 <HAL_RCC_ClockConfig+0x200>)
 8008532:	f003 fefb 	bl	800c32c <assert_failed>
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008536:	4a1f      	ldr	r2, [pc, #124]	; (80085b4 <HAL_RCC_ClockConfig+0x204>)
 8008538:	6893      	ldr	r3, [r2, #8]
 800853a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800853e:	68e1      	ldr	r1, [r4, #12]
 8008540:	430b      	orrs	r3, r1
 8008542:	6093      	str	r3, [r2, #8]
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2) {
 8008544:	6823      	ldr	r3, [r4, #0]
 8008546:	f013 0f08 	tst.w	r3, #8
 800854a:	d01a      	beq.n	8008582 <HAL_RCC_ClockConfig+0x1d2>
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800854c:	6923      	ldr	r3, [r4, #16]
 800854e:	b183      	cbz	r3, 8008572 <HAL_RCC_ClockConfig+0x1c2>
 8008550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008554:	d00d      	beq.n	8008572 <HAL_RCC_ClockConfig+0x1c2>
 8008556:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800855a:	d00a      	beq.n	8008572 <HAL_RCC_ClockConfig+0x1c2>
 800855c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8008560:	d007      	beq.n	8008572 <HAL_RCC_ClockConfig+0x1c2>
 8008562:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8008566:	d004      	beq.n	8008572 <HAL_RCC_ClockConfig+0x1c2>
 8008568:	f240 2171 	movw	r1, #625	; 0x271
 800856c:	4810      	ldr	r0, [pc, #64]	; (80085b0 <HAL_RCC_ClockConfig+0x200>)
 800856e:	f003 fedd 	bl	800c32c <assert_failed>
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008572:	4a10      	ldr	r2, [pc, #64]	; (80085b4 <HAL_RCC_ClockConfig+0x204>)
 8008574:	6893      	ldr	r3, [r2, #8]
 8008576:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800857a:	6921      	ldr	r1, [r4, #16]
 800857c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008580:	6093      	str	r3, [r2, #8]
	SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008582:	f7ff feab 	bl	80082dc <HAL_RCC_GetSysClockFreq>
 8008586:	4b0b      	ldr	r3, [pc, #44]	; (80085b4 <HAL_RCC_ClockConfig+0x204>)
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800858e:	4a0a      	ldr	r2, [pc, #40]	; (80085b8 <HAL_RCC_ClockConfig+0x208>)
 8008590:	5cd3      	ldrb	r3, [r2, r3]
 8008592:	40d8      	lsrs	r0, r3
 8008594:	4b09      	ldr	r3, [pc, #36]	; (80085bc <HAL_RCC_ClockConfig+0x20c>)
 8008596:	6018      	str	r0, [r3, #0]
	HAL_InitTick(TICK_INT_PRIORITY);
 8008598:	2000      	movs	r0, #0
 800859a:	f7fc fe6d 	bl	8005278 <HAL_InitTick>
	return HAL_OK;
 800859e:	2000      	movs	r0, #0
 80085a0:	bd70      	pop	{r4, r5, r6, pc}
		return HAL_ERROR;
 80085a2:	2001      	movs	r0, #1
 80085a4:	4770      	bx	lr
				return HAL_ERROR;
 80085a6:	2001      	movs	r0, #1
 80085a8:	bd70      	pop	{r4, r5, r6, pc}
 80085aa:	bf00      	nop
 80085ac:	40023c00 	.word	0x40023c00
 80085b0:	0801e1e4 	.word	0x0801e1e4
 80085b4:	40023800 	.word	0x40023800
 80085b8:	0801e864 	.word	0x0801e864
 80085bc:	20001478 	.word	0x20001478

080085c0 <HAL_RCC_GetHCLKFreq>:
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
	return SystemCoreClock;
}
 80085c0:	4b01      	ldr	r3, [pc, #4]	; (80085c8 <HAL_RCC_GetHCLKFreq+0x8>)
 80085c2:	6818      	ldr	r0, [r3, #0]
 80085c4:	4770      	bx	lr
 80085c6:	bf00      	nop
 80085c8:	20001478 	.word	0x20001478

080085cc <HAL_RCC_GetPCLK1Freq>:
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80085cc:	b508      	push	{r3, lr}
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return(HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80085ce:	f7ff fff7 	bl	80085c0 <HAL_RCC_GetHCLKFreq>
 80085d2:	4b04      	ldr	r3, [pc, #16]	; (80085e4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80085da:	4a03      	ldr	r2, [pc, #12]	; (80085e8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80085dc:	5cd3      	ldrb	r3, [r2, r3]
}
 80085de:	40d8      	lsrs	r0, r3
 80085e0:	bd08      	pop	{r3, pc}
 80085e2:	bf00      	nop
 80085e4:	40023800 	.word	0x40023800
 80085e8:	0801e874 	.word	0x0801e874

080085ec <HAL_RCC_GetPCLK2Freq>:
 * @note   Each time PCLK2 changes, this function must be called to update the
 *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK2 frequency
 */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80085ec:	b508      	push	{r3, lr}
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return(HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80085ee:	f7ff ffe7 	bl	80085c0 <HAL_RCC_GetHCLKFreq>
 80085f2:	4b04      	ldr	r3, [pc, #16]	; (8008604 <HAL_RCC_GetPCLK2Freq+0x18>)
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80085fa:	4a03      	ldr	r2, [pc, #12]	; (8008608 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80085fc:	5cd3      	ldrb	r3, [r2, r3]
}
 80085fe:	40d8      	lsrs	r0, r3
 8008600:	bd08      	pop	{r3, pc}
 8008602:	bf00      	nop
 8008604:	40023800 	.word	0x40023800
 8008608:	0801e874 	.word	0x0801e874

0800860c <HAL_RCCEx_PeriphCLKConfig>:
 *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
 *
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800860c:	b530      	push	{r4, r5, lr}
 800860e:	b083      	sub	sp, #12
 8008610:	4604      	mov	r4, r0
	uint32_t tickstart = 0U;
	uint32_t tmpreg1 = 0U;

	/* Check the parameters */
	assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8008612:	6803      	ldr	r3, [r0, #0]
 8008614:	3b01      	subs	r3, #1
 8008616:	2b0e      	cmp	r3, #14
 8008618:	d81e      	bhi.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x4c>

	/*---------------------------- I2S configuration ---------------------------*/
	if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800861a:	6823      	ldr	r3, [r4, #0]
 800861c:	f013 0f05 	tst.w	r3, #5
 8008620:	d046      	beq.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
	    (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)) {
		/* check for Parameters */
		assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8008622:	68a3      	ldr	r3, [r4, #8]
 8008624:	3b02      	subs	r3, #2
 8008626:	2b05      	cmp	r3, #5
 8008628:	d81c      	bhi.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x58>
		assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800862a:	6863      	ldr	r3, [r4, #4]
 800862c:	3b32      	subs	r3, #50	; 0x32
 800862e:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 8008632:	d81d      	bhi.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x64>
#if defined(STM32F411xE)
		assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
		/* Disable the PLLI2S */
		__HAL_RCC_PLLI2S_DISABLE();
 8008634:	2200      	movs	r2, #0
 8008636:	4b9b      	ldr	r3, [pc, #620]	; (80088a4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8008638:	601a      	str	r2, [r3, #0]
		/* Get tick */
		tickstart = HAL_GetTick();
 800863a:	f7fc fe69 	bl	8005310 <HAL_GetTick>
 800863e:	4605      	mov	r5, r0
		/* Wait till PLLI2S is disabled */
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET) {
 8008640:	4b99      	ldr	r3, [pc, #612]	; (80088a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8008648:	d018      	beq.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x70>
			if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE) {
 800864a:	f7fc fe61 	bl	8005310 <HAL_GetTick>
 800864e:	1b40      	subs	r0, r0, r5
 8008650:	2802      	cmp	r0, #2
 8008652:	d9f5      	bls.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x34>
				/* return in case of Timeout detected */
				return HAL_TIMEOUT;
 8008654:	2003      	movs	r0, #3
 8008656:	e105      	b.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0x258>
	assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8008658:	f640 01f6 	movw	r1, #2294	; 0x8f6
 800865c:	4893      	ldr	r0, [pc, #588]	; (80088ac <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800865e:	f003 fe65 	bl	800c32c <assert_failed>
 8008662:	e7da      	b.n	800861a <HAL_RCCEx_PeriphCLKConfig+0xe>
		assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8008664:	f640 01fc 	movw	r1, #2300	; 0x8fc
 8008668:	4890      	ldr	r0, [pc, #576]	; (80088ac <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800866a:	f003 fe5f 	bl	800c32c <assert_failed>
 800866e:	e7dc      	b.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x1e>
		assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8008670:	f640 01fd 	movw	r1, #2301	; 0x8fd
 8008674:	488d      	ldr	r0, [pc, #564]	; (80088ac <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8008676:	f003 fe59 	bl	800c32c <assert_failed>
 800867a:	e7db      	b.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x28>
		__HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
		/* Configure the PLLI2S division factors */
		/* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
		/* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
		__HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800867c:	6862      	ldr	r2, [r4, #4]
 800867e:	68a3      	ldr	r3, [r4, #8]
 8008680:	071b      	lsls	r3, r3, #28
 8008682:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8008686:	4a88      	ldr	r2, [pc, #544]	; (80088a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008688:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* STM32F411xE */

		/* Enable the PLLI2S */
		__HAL_RCC_PLLI2S_ENABLE();
 800868c:	2201      	movs	r2, #1
 800868e:	4b85      	ldr	r3, [pc, #532]	; (80088a4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8008690:	601a      	str	r2, [r3, #0]
		/* Get tick */
		tickstart = HAL_GetTick();
 8008692:	f7fc fe3d 	bl	8005310 <HAL_GetTick>
 8008696:	4605      	mov	r5, r0
		/* Wait till PLLI2S is ready */
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET) {
 8008698:	4b83      	ldr	r3, [pc, #524]	; (80088a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80086a0:	d106      	bne.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
			if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE) {
 80086a2:	f7fc fe35 	bl	8005310 <HAL_GetTick>
 80086a6:	1b40      	subs	r0, r0, r5
 80086a8:	2802      	cmp	r0, #2
 80086aa:	d9f5      	bls.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x8c>
				/* return in case of Timeout detected */
				return HAL_TIMEOUT;
 80086ac:	2003      	movs	r0, #3
 80086ae:	e0d9      	b.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0x258>
			}
		}
	}

	/*---------------------------- RTC configuration ---------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC)) {
 80086b0:	6823      	ldr	r3, [r4, #0]
 80086b2:	f013 0f02 	tst.w	r3, #2
 80086b6:	f000 80cd 	beq.w	8008854 <HAL_RCCEx_PeriphCLKConfig+0x248>
		/* Check for RTC Parameters used to output RTCCLK */
		assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80086ba:	68e3      	ldr	r3, [r4, #12]
 80086bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086c0:	d07e      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80086c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086c6:	d07b      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80086c8:	4a79      	ldr	r2, [pc, #484]	; (80088b0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d078      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80086ce:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d074      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80086d6:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80086da:	4293      	cmp	r3, r2
 80086dc:	d070      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80086de:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d06c      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80086e6:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d068      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80086ee:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d064      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80086f6:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d060      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80086fe:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8008702:	4293      	cmp	r3, r2
 8008704:	d05c      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8008706:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800870a:	4293      	cmp	r3, r2
 800870c:	d058      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800870e:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8008712:	4293      	cmp	r3, r2
 8008714:	d054      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8008716:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800871a:	4293      	cmp	r3, r2
 800871c:	d050      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800871e:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8008722:	4293      	cmp	r3, r2
 8008724:	d04c      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8008726:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800872a:	4293      	cmp	r3, r2
 800872c:	d048      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800872e:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8008732:	4293      	cmp	r3, r2
 8008734:	d044      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8008736:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800873a:	4293      	cmp	r3, r2
 800873c:	d040      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800873e:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8008742:	4293      	cmp	r3, r2
 8008744:	d03c      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8008746:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800874a:	4293      	cmp	r3, r2
 800874c:	d038      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800874e:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8008752:	4293      	cmp	r3, r2
 8008754:	d034      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8008756:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800875a:	4293      	cmp	r3, r2
 800875c:	d030      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800875e:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8008762:	4293      	cmp	r3, r2
 8008764:	d02c      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8008766:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800876a:	4293      	cmp	r3, r2
 800876c:	d028      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800876e:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8008772:	4293      	cmp	r3, r2
 8008774:	d024      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8008776:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800877a:	4293      	cmp	r3, r2
 800877c:	d020      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800877e:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8008782:	4293      	cmp	r3, r2
 8008784:	d01c      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8008786:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800878a:	4293      	cmp	r3, r2
 800878c:	d018      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800878e:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8008792:	4293      	cmp	r3, r2
 8008794:	d014      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8008796:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800879a:	4293      	cmp	r3, r2
 800879c:	d010      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800879e:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d00c      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80087a6:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d008      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80087ae:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d004      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80087b6:	f640 1129 	movw	r1, #2345	; 0x929
 80087ba:	483c      	ldr	r0, [pc, #240]	; (80088ac <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80087bc:	f003 fdb6 	bl	800c32c <assert_failed>

		/* Enable Power Clock*/
		__HAL_RCC_PWR_CLK_ENABLE();
 80087c0:	2300      	movs	r3, #0
 80087c2:	9301      	str	r3, [sp, #4]
 80087c4:	4b38      	ldr	r3, [pc, #224]	; (80088a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80087c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80087c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80087cc:	641a      	str	r2, [r3, #64]	; 0x40
 80087ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087d4:	9301      	str	r3, [sp, #4]
 80087d6:	9b01      	ldr	r3, [sp, #4]

		/* Enable write access to Backup domain */
		PWR->CR |= PWR_CR_DBP;
 80087d8:	4a36      	ldr	r2, [pc, #216]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80087da:	6813      	ldr	r3, [r2, #0]
 80087dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087e0:	6013      	str	r3, [r2, #0]

		/* Get tick */
		tickstart = HAL_GetTick();
 80087e2:	f7fc fd95 	bl	8005310 <HAL_GetTick>
 80087e6:	4605      	mov	r5, r0

		while ((PWR->CR & PWR_CR_DBP) == RESET) {
 80087e8:	4b32      	ldr	r3, [pc, #200]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f413 7f80 	tst.w	r3, #256	; 0x100
 80087f0:	d106      	bne.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
			if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 80087f2:	f7fc fd8d 	bl	8005310 <HAL_GetTick>
 80087f6:	1b40      	subs	r0, r0, r5
 80087f8:	2802      	cmp	r0, #2
 80087fa:	d9f5      	bls.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
				return HAL_TIMEOUT;
 80087fc:	2003      	movs	r0, #3
 80087fe:	e031      	b.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0x258>
			}
		}
		/* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
		tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008800:	4b29      	ldr	r3, [pc, #164]	; (80088a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
		if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))) {
 8008804:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8008808:	d012      	beq.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x224>
 800880a:	68e2      	ldr	r2, [r4, #12]
 800880c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8008810:	4293      	cmp	r3, r2
 8008812:	d00d      	beq.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x224>
			/* Store the content of BDCR register before the reset of Backup Domain */
			tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008814:	4b24      	ldr	r3, [pc, #144]	; (80088a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008816:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008818:	f422 7240 	bic.w	r2, r2, #768	; 0x300
			/* RTC Clock selection can be changed only if the Backup Domain is reset */
			__HAL_RCC_BACKUPRESET_FORCE();
 800881c:	4926      	ldr	r1, [pc, #152]	; (80088b8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800881e:	2001      	movs	r0, #1
 8008820:	6008      	str	r0, [r1, #0]
			__HAL_RCC_BACKUPRESET_RELEASE();
 8008822:	2000      	movs	r0, #0
 8008824:	6008      	str	r0, [r1, #0]
			/* Restore the Content of BDCR register */
			RCC->BDCR = tmpreg1;
 8008826:	671a      	str	r2, [r3, #112]	; 0x70

			/* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
			if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON)) {
 8008828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800882a:	f013 0f01 	tst.w	r3, #1
 800882e:	d11b      	bne.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0x25c>
						return HAL_TIMEOUT;
					}
				}
			}
		}
		__HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008830:	68e3      	ldr	r3, [r4, #12]
 8008832:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8008836:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800883a:	d026      	beq.n	800888a <HAL_RCCEx_PeriphCLKConfig+0x27e>
 800883c:	4a1a      	ldr	r2, [pc, #104]	; (80088a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800883e:	6893      	ldr	r3, [r2, #8]
 8008840:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008844:	6093      	str	r3, [r2, #8]
 8008846:	4918      	ldr	r1, [pc, #96]	; (80088a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008848:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 800884a:	68e2      	ldr	r2, [r4, #12]
 800884c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8008850:	4313      	orrs	r3, r2
 8008852:	670b      	str	r3, [r1, #112]	; 0x70
	}
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
	/*---------------------------- TIM configuration ---------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM)) {
 8008854:	6823      	ldr	r3, [r4, #0]
 8008856:	f013 0f08 	tst.w	r3, #8
 800885a:	d021      	beq.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x294>
		__HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800885c:	7c22      	ldrb	r2, [r4, #16]
 800885e:	4b17      	ldr	r3, [pc, #92]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8008860:	601a      	str	r2, [r3, #0]
	}
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
	return HAL_OK;
 8008862:	2000      	movs	r0, #0
}
 8008864:	b003      	add	sp, #12
 8008866:	bd30      	pop	{r4, r5, pc}
				tickstart = HAL_GetTick();
 8008868:	f7fc fd52 	bl	8005310 <HAL_GetTick>
 800886c:	4605      	mov	r5, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 800886e:	4b0e      	ldr	r3, [pc, #56]	; (80088a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008872:	f013 0f02 	tst.w	r3, #2
 8008876:	d1db      	bne.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x224>
					if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8008878:	f7fc fd4a 	bl	8005310 <HAL_GetTick>
 800887c:	1b40      	subs	r0, r0, r5
 800887e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008882:	4298      	cmp	r0, r3
 8008884:	d9f3      	bls.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x262>
						return HAL_TIMEOUT;
 8008886:	2003      	movs	r0, #3
 8008888:	e7ec      	b.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0x258>
		__HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800888a:	4907      	ldr	r1, [pc, #28]	; (80088a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800888c:	688a      	ldr	r2, [r1, #8]
 800888e:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8008892:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800889a:	4313      	orrs	r3, r2
 800889c:	608b      	str	r3, [r1, #8]
 800889e:	e7d2      	b.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0x23a>
	return HAL_OK;
 80088a0:	2000      	movs	r0, #0
 80088a2:	e7df      	b.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0x258>
 80088a4:	42470068 	.word	0x42470068
 80088a8:	40023800 	.word	0x40023800
 80088ac:	0801e21c 	.word	0x0801e21c
 80088b0:	00020300 	.word	0x00020300
 80088b4:	40007000 	.word	0x40007000
 80088b8:	42470e40 	.word	0x42470e40
 80088bc:	424711e0 	.word	0x424711e0

080088c0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80088c0:	b538      	push	{r3, r4, r5, lr}
 80088c2:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80088c4:	6802      	ldr	r2, [r0, #0]
 80088c6:	68d3      	ldr	r3, [r2, #12]
 80088c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80088cc:	60d3      	str	r3, [r2, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80088ce:	f7fc fd1f 	bl	8005310 <HAL_GetTick>
 80088d2:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80088d4:	6823      	ldr	r3, [r4, #0]
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	f013 0f20 	tst.w	r3, #32
 80088dc:	d107      	bne.n	80088ee <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80088de:	f7fc fd17 	bl	8005310 <HAL_GetTick>
 80088e2:	1b40      	subs	r0, r0, r5
 80088e4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80088e8:	d9f4      	bls.n	80088d4 <HAL_RTC_WaitForSynchro+0x14>
    {       
      return HAL_TIMEOUT;
 80088ea:	2003      	movs	r0, #3
    } 
  }

  return HAL_OK;
}
 80088ec:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 80088ee:	2000      	movs	r0, #0
 80088f0:	bd38      	pop	{r3, r4, r5, pc}

080088f2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80088f2:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U; 
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80088f4:	6803      	ldr	r3, [r0, #0]
 80088f6:	68da      	ldr	r2, [r3, #12]
 80088f8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80088fc:	d001      	beq.n	8008902 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 80088fe:	2000      	movs	r0, #0
 8008900:	bd38      	pop	{r3, r4, r5, pc}
 8008902:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008904:	f04f 32ff 	mov.w	r2, #4294967295
 8008908:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800890a:	f7fc fd01 	bl	8005310 <HAL_GetTick>
 800890e:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008910:	6823      	ldr	r3, [r4, #0]
 8008912:	68db      	ldr	r3, [r3, #12]
 8008914:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008918:	d107      	bne.n	800892a <RTC_EnterInitMode+0x38>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800891a:	f7fc fcf9 	bl	8005310 <HAL_GetTick>
 800891e:	1b40      	subs	r0, r0, r5
 8008920:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008924:	d9f4      	bls.n	8008910 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8008926:	2003      	movs	r0, #3
}
 8008928:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;  
 800892a:	2000      	movs	r0, #0
 800892c:	bd38      	pop	{r3, r4, r5, pc}
	...

08008930 <HAL_RTC_Init>:
{
 8008930:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8008932:	2800      	cmp	r0, #0
 8008934:	f000 809a 	beq.w	8008a6c <HAL_RTC_Init+0x13c>
 8008938:	4604      	mov	r4, r0
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 800893a:	6843      	ldr	r3, [r0, #4]
 800893c:	2b40      	cmp	r3, #64	; 0x40
 800893e:	d001      	beq.n	8008944 <HAL_RTC_Init+0x14>
 8008940:	2b00      	cmp	r3, #0
 8008942:	d16c      	bne.n	8008a1e <HAL_RTC_Init+0xee>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8008944:	68a3      	ldr	r3, [r4, #8]
 8008946:	2b7f      	cmp	r3, #127	; 0x7f
 8008948:	d86e      	bhi.n	8008a28 <HAL_RTC_Init+0xf8>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 800894a:	68e3      	ldr	r3, [r4, #12]
 800894c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008950:	d26f      	bcs.n	8008a32 <HAL_RTC_Init+0x102>
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
 8008952:	6923      	ldr	r3, [r4, #16]
 8008954:	b163      	cbz	r3, 8008970 <HAL_RTC_Init+0x40>
 8008956:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800895a:	d009      	beq.n	8008970 <HAL_RTC_Init+0x40>
 800895c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008960:	d006      	beq.n	8008970 <HAL_RTC_Init+0x40>
 8008962:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008966:	d003      	beq.n	8008970 <HAL_RTC_Init+0x40>
 8008968:	21d5      	movs	r1, #213	; 0xd5
 800896a:	4841      	ldr	r0, [pc, #260]	; (8008a70 <HAL_RTC_Init+0x140>)
 800896c:	f003 fcde 	bl	800c32c <assert_failed>
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 8008970:	6963      	ldr	r3, [r4, #20]
 8008972:	b133      	cbz	r3, 8008982 <HAL_RTC_Init+0x52>
 8008974:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008978:	d003      	beq.n	8008982 <HAL_RTC_Init+0x52>
 800897a:	21d6      	movs	r1, #214	; 0xd6
 800897c:	483c      	ldr	r0, [pc, #240]	; (8008a70 <HAL_RTC_Init+0x140>)
 800897e:	f003 fcd5 	bl	800c32c <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 8008982:	69a3      	ldr	r3, [r4, #24]
 8008984:	b133      	cbz	r3, 8008994 <HAL_RTC_Init+0x64>
 8008986:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800898a:	d003      	beq.n	8008994 <HAL_RTC_Init+0x64>
 800898c:	21d7      	movs	r1, #215	; 0xd7
 800898e:	4838      	ldr	r0, [pc, #224]	; (8008a70 <HAL_RTC_Init+0x140>)
 8008990:	f003 fccc 	bl	800c32c <assert_failed>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008994:	7f63      	ldrb	r3, [r4, #29]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d050      	beq.n	8008a3c <HAL_RTC_Init+0x10c>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 800899a:	2302      	movs	r3, #2
 800899c:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800899e:	6823      	ldr	r3, [r4, #0]
 80089a0:	22ca      	movs	r2, #202	; 0xca
 80089a2:	625a      	str	r2, [r3, #36]	; 0x24
 80089a4:	6823      	ldr	r3, [r4, #0]
 80089a6:	2253      	movs	r2, #83	; 0x53
 80089a8:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80089aa:	4620      	mov	r0, r4
 80089ac:	f7ff ffa1 	bl	80088f2 <RTC_EnterInitMode>
 80089b0:	4605      	mov	r5, r0
 80089b2:	2800      	cmp	r0, #0
 80089b4:	d147      	bne.n	8008a46 <HAL_RTC_Init+0x116>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80089b6:	6822      	ldr	r2, [r4, #0]
 80089b8:	6893      	ldr	r3, [r2, #8]
 80089ba:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80089be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089c2:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80089c4:	6821      	ldr	r1, [r4, #0]
 80089c6:	688a      	ldr	r2, [r1, #8]
 80089c8:	6863      	ldr	r3, [r4, #4]
 80089ca:	6920      	ldr	r0, [r4, #16]
 80089cc:	4303      	orrs	r3, r0
 80089ce:	6960      	ldr	r0, [r4, #20]
 80089d0:	4303      	orrs	r3, r0
 80089d2:	4313      	orrs	r3, r2
 80089d4:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80089d6:	6823      	ldr	r3, [r4, #0]
 80089d8:	68e2      	ldr	r2, [r4, #12]
 80089da:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80089dc:	6822      	ldr	r2, [r4, #0]
 80089de:	6913      	ldr	r3, [r2, #16]
 80089e0:	68a1      	ldr	r1, [r4, #8]
 80089e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80089e6:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 80089e8:	6822      	ldr	r2, [r4, #0]
 80089ea:	68d3      	ldr	r3, [r2, #12]
 80089ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089f0:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80089f2:	6823      	ldr	r3, [r4, #0]
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	f013 0f20 	tst.w	r3, #32
 80089fa:	d02b      	beq.n	8008a54 <HAL_RTC_Init+0x124>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80089fc:	6822      	ldr	r2, [r4, #0]
 80089fe:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008a00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008a04:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8008a06:	6822      	ldr	r2, [r4, #0]
 8008a08:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008a0a:	69a1      	ldr	r1, [r4, #24]
 8008a0c:	430b      	orrs	r3, r1
 8008a0e:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8008a10:	6823      	ldr	r3, [r4, #0]
 8008a12:	22ff      	movs	r2, #255	; 0xff
 8008a14:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8008a16:	2301      	movs	r3, #1
 8008a18:	7763      	strb	r3, [r4, #29]
}
 8008a1a:	4628      	mov	r0, r5
 8008a1c:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 8008a1e:	21d2      	movs	r1, #210	; 0xd2
 8008a20:	4813      	ldr	r0, [pc, #76]	; (8008a70 <HAL_RTC_Init+0x140>)
 8008a22:	f003 fc83 	bl	800c32c <assert_failed>
 8008a26:	e78d      	b.n	8008944 <HAL_RTC_Init+0x14>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8008a28:	21d3      	movs	r1, #211	; 0xd3
 8008a2a:	4811      	ldr	r0, [pc, #68]	; (8008a70 <HAL_RTC_Init+0x140>)
 8008a2c:	f003 fc7e 	bl	800c32c <assert_failed>
 8008a30:	e78b      	b.n	800894a <HAL_RTC_Init+0x1a>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8008a32:	21d4      	movs	r1, #212	; 0xd4
 8008a34:	480e      	ldr	r0, [pc, #56]	; (8008a70 <HAL_RTC_Init+0x140>)
 8008a36:	f003 fc79 	bl	800c32c <assert_failed>
 8008a3a:	e78a      	b.n	8008952 <HAL_RTC_Init+0x22>
    hrtc->Lock = HAL_UNLOCKED;
 8008a3c:	7723      	strb	r3, [r4, #28]
    HAL_RTC_MspInit(hrtc);
 8008a3e:	4620      	mov	r0, r4
 8008a40:	f003 fd1a 	bl	800c478 <HAL_RTC_MspInit>
 8008a44:	e7a9      	b.n	800899a <HAL_RTC_Init+0x6a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8008a46:	6823      	ldr	r3, [r4, #0]
 8008a48:	22ff      	movs	r2, #255	; 0xff
 8008a4a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008a4c:	2304      	movs	r3, #4
 8008a4e:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8008a50:	2501      	movs	r5, #1
 8008a52:	e7e2      	b.n	8008a1a <HAL_RTC_Init+0xea>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008a54:	4620      	mov	r0, r4
 8008a56:	f7ff ff33 	bl	80088c0 <HAL_RTC_WaitForSynchro>
 8008a5a:	2800      	cmp	r0, #0
 8008a5c:	d0ce      	beq.n	80089fc <HAL_RTC_Init+0xcc>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a5e:	6823      	ldr	r3, [r4, #0]
 8008a60:	22ff      	movs	r2, #255	; 0xff
 8008a62:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008a64:	2304      	movs	r3, #4
 8008a66:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8008a68:	2501      	movs	r5, #1
 8008a6a:	e7d6      	b.n	8008a1a <HAL_RTC_Init+0xea>
     return HAL_ERROR;
 8008a6c:	2501      	movs	r5, #1
 8008a6e:	e7d4      	b.n	8008a1a <HAL_RTC_Init+0xea>
 8008a70:	0801e258 	.word	0x0801e258

08008a74 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8008a74:	2300      	movs	r3, #0
  
  while(Value >= 10U)
 8008a76:	e002      	b.n	8008a7e <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8008a78:	3301      	adds	r3, #1
    Value -= 10U;
 8008a7a:	380a      	subs	r0, #10
 8008a7c:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 8008a7e:	2809      	cmp	r0, #9
 8008a80:	d8fa      	bhi.n	8008a78 <RTC_ByteToBcd2+0x4>
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8008a82:	011b      	lsls	r3, r3, #4
 8008a84:	b2db      	uxtb	r3, r3
}
 8008a86:	4318      	orrs	r0, r3
 8008a88:	4770      	bx	lr

08008a8a <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8008a8a:	0903      	lsrs	r3, r0, #4
 8008a8c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008a90:	005a      	lsls	r2, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8008a92:	f000 000f 	and.w	r0, r0, #15
 8008a96:	4410      	add	r0, r2
}
 8008a98:	b2c0      	uxtb	r0, r0
 8008a9a:	4770      	bx	lr

08008a9c <HAL_RTC_SetTime>:
{
 8008a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a9e:	4604      	mov	r4, r0
 8008aa0:	460d      	mov	r5, r1
 8008aa2:	4616      	mov	r6, r2
  assert_param(IS_RTC_FORMAT(Format));
 8008aa4:	2a01      	cmp	r2, #1
 8008aa6:	d904      	bls.n	8008ab2 <HAL_RTC_SetTime+0x16>
 8008aa8:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8008aac:	487f      	ldr	r0, [pc, #508]	; (8008cac <HAL_RTC_SetTime+0x210>)
 8008aae:	f003 fc3d 	bl	800c32c <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 8008ab2:	68eb      	ldr	r3, [r5, #12]
 8008ab4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ab8:	d003      	beq.n	8008ac2 <HAL_RTC_SetTime+0x26>
 8008aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008abe:	d000      	beq.n	8008ac2 <HAL_RTC_SetTime+0x26>
 8008ac0:	bb3b      	cbnz	r3, 8008b12 <HAL_RTC_SetTime+0x76>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 8008ac2:	692b      	ldr	r3, [r5, #16]
 8008ac4:	b13b      	cbz	r3, 8008ad6 <HAL_RTC_SetTime+0x3a>
 8008ac6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008aca:	d004      	beq.n	8008ad6 <HAL_RTC_SetTime+0x3a>
 8008acc:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8008ad0:	4876      	ldr	r0, [pc, #472]	; (8008cac <HAL_RTC_SetTime+0x210>)
 8008ad2:	f003 fc2b 	bl	800c32c <assert_failed>
  __HAL_LOCK(hrtc);
 8008ad6:	7f23      	ldrb	r3, [r4, #28]
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	f000 80e3 	beq.w	8008ca4 <HAL_RTC_SetTime+0x208>
 8008ade:	2301      	movs	r3, #1
 8008ae0:	7723      	strb	r3, [r4, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ae2:	2302      	movs	r3, #2
 8008ae4:	7763      	strb	r3, [r4, #29]
  if(Format == RTC_FORMAT_BIN)
 8008ae6:	2e00      	cmp	r6, #0
 8008ae8:	d17c      	bne.n	8008be4 <HAL_RTC_SetTime+0x148>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008aea:	6823      	ldr	r3, [r4, #0]
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008af2:	d01a      	beq.n	8008b2a <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 8008af4:	782b      	ldrb	r3, [r5, #0]
 8008af6:	3b01      	subs	r3, #1
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	2b0b      	cmp	r3, #11
 8008afc:	d80f      	bhi.n	8008b1e <HAL_RTC_SetTime+0x82>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8008afe:	78eb      	ldrb	r3, [r5, #3]
 8008b00:	b1c3      	cbz	r3, 8008b34 <HAL_RTC_SetTime+0x98>
 8008b02:	2b40      	cmp	r3, #64	; 0x40
 8008b04:	d016      	beq.n	8008b34 <HAL_RTC_SetTime+0x98>
 8008b06:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8008b0a:	4868      	ldr	r0, [pc, #416]	; (8008cac <HAL_RTC_SetTime+0x210>)
 8008b0c:	f003 fc0e 	bl	800c32c <assert_failed>
 8008b10:	e010      	b.n	8008b34 <HAL_RTC_SetTime+0x98>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 8008b12:	f240 11c1 	movw	r1, #449	; 0x1c1
 8008b16:	4865      	ldr	r0, [pc, #404]	; (8008cac <HAL_RTC_SetTime+0x210>)
 8008b18:	f003 fc08 	bl	800c32c <assert_failed>
 8008b1c:	e7d1      	b.n	8008ac2 <HAL_RTC_SetTime+0x26>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 8008b1e:	f240 11cd 	movw	r1, #461	; 0x1cd
 8008b22:	4862      	ldr	r0, [pc, #392]	; (8008cac <HAL_RTC_SetTime+0x210>)
 8008b24:	f003 fc02 	bl	800c32c <assert_failed>
 8008b28:	e7e9      	b.n	8008afe <HAL_RTC_SetTime+0x62>
      sTime->TimeFormat = 0x00U;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	70eb      	strb	r3, [r5, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 8008b2e:	782b      	ldrb	r3, [r5, #0]
 8008b30:	2b17      	cmp	r3, #23
 8008b32:	d845      	bhi.n	8008bc0 <HAL_RTC_SetTime+0x124>
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 8008b34:	786b      	ldrb	r3, [r5, #1]
 8008b36:	2b3b      	cmp	r3, #59	; 0x3b
 8008b38:	d848      	bhi.n	8008bcc <HAL_RTC_SetTime+0x130>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8008b3a:	78ab      	ldrb	r3, [r5, #2]
 8008b3c:	2b3b      	cmp	r3, #59	; 0x3b
 8008b3e:	d84b      	bhi.n	8008bd8 <HAL_RTC_SetTime+0x13c>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008b40:	7828      	ldrb	r0, [r5, #0]
 8008b42:	f7ff ff97 	bl	8008a74 <RTC_ByteToBcd2>
 8008b46:	0406      	lsls	r6, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008b48:	7868      	ldrb	r0, [r5, #1]
 8008b4a:	f7ff ff93 	bl	8008a74 <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008b4e:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008b52:	78a8      	ldrb	r0, [r5, #2]
 8008b54:	f7ff ff8e 	bl	8008a74 <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008b58:	4330      	orrs	r0, r6
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 8008b5a:	78ee      	ldrb	r6, [r5, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008b5c:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008b60:	6823      	ldr	r3, [r4, #0]
 8008b62:	22ca      	movs	r2, #202	; 0xca
 8008b64:	625a      	str	r2, [r3, #36]	; 0x24
 8008b66:	6823      	ldr	r3, [r4, #0]
 8008b68:	2253      	movs	r2, #83	; 0x53
 8008b6a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008b6c:	4620      	mov	r0, r4
 8008b6e:	f7ff fec0 	bl	80088f2 <RTC_EnterInitMode>
 8008b72:	4607      	mov	r7, r0
 8008b74:	2800      	cmp	r0, #0
 8008b76:	d17e      	bne.n	8008c76 <HAL_RTC_SetTime+0x1da>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008b78:	6823      	ldr	r3, [r4, #0]
 8008b7a:	f006 367f 	and.w	r6, r6, #2139062143	; 0x7f7f7f7f
 8008b7e:	f026 46fe 	bic.w	r6, r6, #2130706432	; 0x7f000000
 8008b82:	601e      	str	r6, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8008b84:	6822      	ldr	r2, [r4, #0]
 8008b86:	6893      	ldr	r3, [r2, #8]
 8008b88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b8c:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008b8e:	6821      	ldr	r1, [r4, #0]
 8008b90:	688b      	ldr	r3, [r1, #8]
 8008b92:	68ea      	ldr	r2, [r5, #12]
 8008b94:	6928      	ldr	r0, [r5, #16]
 8008b96:	4302      	orrs	r2, r0
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8008b9c:	6822      	ldr	r2, [r4, #0]
 8008b9e:	68d3      	ldr	r3, [r2, #12]
 8008ba0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ba4:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008ba6:	6823      	ldr	r3, [r4, #0]
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	f013 0f20 	tst.w	r3, #32
 8008bae:	d06b      	beq.n	8008c88 <HAL_RTC_SetTime+0x1ec>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008bb0:	6823      	ldr	r3, [r4, #0]
 8008bb2:	22ff      	movs	r2, #255	; 0xff
 8008bb4:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8008bba:	2300      	movs	r3, #0
 8008bbc:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 8008bbe:	e072      	b.n	8008ca6 <HAL_RTC_SetTime+0x20a>
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 8008bc0:	f240 11d3 	movw	r1, #467	; 0x1d3
 8008bc4:	4839      	ldr	r0, [pc, #228]	; (8008cac <HAL_RTC_SetTime+0x210>)
 8008bc6:	f003 fbb1 	bl	800c32c <assert_failed>
 8008bca:	e7b3      	b.n	8008b34 <HAL_RTC_SetTime+0x98>
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 8008bcc:	f240 11d5 	movw	r1, #469	; 0x1d5
 8008bd0:	4836      	ldr	r0, [pc, #216]	; (8008cac <HAL_RTC_SetTime+0x210>)
 8008bd2:	f003 fbab 	bl	800c32c <assert_failed>
 8008bd6:	e7b0      	b.n	8008b3a <HAL_RTC_SetTime+0x9e>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8008bd8:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8008bdc:	4833      	ldr	r0, [pc, #204]	; (8008cac <HAL_RTC_SetTime+0x210>)
 8008bde:	f003 fba5 	bl	800c32c <assert_failed>
 8008be2:	e7ad      	b.n	8008b40 <HAL_RTC_SetTime+0xa4>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008be4:	6823      	ldr	r3, [r4, #0]
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008bec:	d015      	beq.n	8008c1a <HAL_RTC_SetTime+0x17e>
      tmpreg = RTC_Bcd2ToByte(sTime->Hours);
 8008bee:	7828      	ldrb	r0, [r5, #0]
 8008bf0:	f7ff ff4b 	bl	8008a8a <RTC_Bcd2ToByte>
      assert_param(IS_RTC_HOUR12(tmpreg));
 8008bf4:	3801      	subs	r0, #1
 8008bf6:	280b      	cmp	r0, #11
 8008bf8:	d809      	bhi.n	8008c0e <HAL_RTC_SetTime+0x172>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat)); 
 8008bfa:	78eb      	ldrb	r3, [r5, #3]
 8008bfc:	b1a3      	cbz	r3, 8008c28 <HAL_RTC_SetTime+0x18c>
 8008bfe:	2b40      	cmp	r3, #64	; 0x40
 8008c00:	d012      	beq.n	8008c28 <HAL_RTC_SetTime+0x18c>
 8008c02:	f240 11e3 	movw	r1, #483	; 0x1e3
 8008c06:	4829      	ldr	r0, [pc, #164]	; (8008cac <HAL_RTC_SetTime+0x210>)
 8008c08:	f003 fb90 	bl	800c32c <assert_failed>
 8008c0c:	e00c      	b.n	8008c28 <HAL_RTC_SetTime+0x18c>
      assert_param(IS_RTC_HOUR12(tmpreg));
 8008c0e:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8008c12:	4826      	ldr	r0, [pc, #152]	; (8008cac <HAL_RTC_SetTime+0x210>)
 8008c14:	f003 fb8a 	bl	800c32c <assert_failed>
 8008c18:	e7ef      	b.n	8008bfa <HAL_RTC_SetTime+0x15e>
      sTime->TimeFormat = 0x00U;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	70eb      	strb	r3, [r5, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8008c1e:	7828      	ldrb	r0, [r5, #0]
 8008c20:	f7ff ff33 	bl	8008a8a <RTC_Bcd2ToByte>
 8008c24:	2817      	cmp	r0, #23
 8008c26:	d814      	bhi.n	8008c52 <HAL_RTC_SetTime+0x1b6>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 8008c28:	7868      	ldrb	r0, [r5, #1]
 8008c2a:	f7ff ff2e 	bl	8008a8a <RTC_Bcd2ToByte>
 8008c2e:	283b      	cmp	r0, #59	; 0x3b
 8008c30:	d815      	bhi.n	8008c5e <HAL_RTC_SetTime+0x1c2>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8008c32:	78a8      	ldrb	r0, [r5, #2]
 8008c34:	f7ff ff29 	bl	8008a8a <RTC_Bcd2ToByte>
 8008c38:	283b      	cmp	r0, #59	; 0x3b
 8008c3a:	d816      	bhi.n	8008c6a <HAL_RTC_SetTime+0x1ce>
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008c3c:	782e      	ldrb	r6, [r5, #0]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008c3e:	7868      	ldrb	r0, [r5, #1]
 8008c40:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008c42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
              ((uint32_t)sTime->Seconds) | \
 8008c46:	78ae      	ldrb	r6, [r5, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008c48:	4330      	orrs	r0, r6
              ((uint32_t)(sTime->TimeFormat) << 16U));   
 8008c4a:	78ee      	ldrb	r6, [r5, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008c4c:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8008c50:	e786      	b.n	8008b60 <HAL_RTC_SetTime+0xc4>
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8008c52:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8008c56:	4815      	ldr	r0, [pc, #84]	; (8008cac <HAL_RTC_SetTime+0x210>)
 8008c58:	f003 fb68 	bl	800c32c <assert_failed>
 8008c5c:	e7e4      	b.n	8008c28 <HAL_RTC_SetTime+0x18c>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 8008c5e:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8008c62:	4812      	ldr	r0, [pc, #72]	; (8008cac <HAL_RTC_SetTime+0x210>)
 8008c64:	f003 fb62 	bl	800c32c <assert_failed>
 8008c68:	e7e3      	b.n	8008c32 <HAL_RTC_SetTime+0x196>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8008c6a:	f240 11eb 	movw	r1, #491	; 0x1eb
 8008c6e:	480f      	ldr	r0, [pc, #60]	; (8008cac <HAL_RTC_SetTime+0x210>)
 8008c70:	f003 fb5c 	bl	800c32c <assert_failed>
 8008c74:	e7e2      	b.n	8008c3c <HAL_RTC_SetTime+0x1a0>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8008c76:	6823      	ldr	r3, [r4, #0]
 8008c78:	22ff      	movs	r2, #255	; 0xff
 8008c7a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008c7c:	2304      	movs	r3, #4
 8008c7e:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8008c80:	2300      	movs	r3, #0
 8008c82:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8008c84:	2701      	movs	r7, #1
 8008c86:	e00e      	b.n	8008ca6 <HAL_RTC_SetTime+0x20a>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008c88:	4620      	mov	r0, r4
 8008c8a:	f7ff fe19 	bl	80088c0 <HAL_RTC_WaitForSynchro>
 8008c8e:	2800      	cmp	r0, #0
 8008c90:	d08e      	beq.n	8008bb0 <HAL_RTC_SetTime+0x114>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8008c92:	6823      	ldr	r3, [r4, #0]
 8008c94:	22ff      	movs	r2, #255	; 0xff
 8008c96:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008c98:	2304      	movs	r3, #4
 8008c9a:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8008ca0:	2701      	movs	r7, #1
 8008ca2:	e000      	b.n	8008ca6 <HAL_RTC_SetTime+0x20a>
  __HAL_LOCK(hrtc);
 8008ca4:	2702      	movs	r7, #2
}
 8008ca6:	4638      	mov	r0, r7
 8008ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008caa:	bf00      	nop
 8008cac:	0801e258 	.word	0x0801e258

08008cb0 <HAL_RTC_GetTime>:
{
 8008cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cb2:	4604      	mov	r4, r0
 8008cb4:	460d      	mov	r5, r1
 8008cb6:	4616      	mov	r6, r2
  assert_param(IS_RTC_FORMAT(Format));
 8008cb8:	2a01      	cmp	r2, #1
 8008cba:	d904      	bls.n	8008cc6 <HAL_RTC_GetTime+0x16>
 8008cbc:	f44f 7111 	mov.w	r1, #580	; 0x244
 8008cc0:	4815      	ldr	r0, [pc, #84]	; (8008d18 <HAL_RTC_GetTime+0x68>)
 8008cc2:	f003 fb33 	bl	800c32c <assert_failed>
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008cc6:	6823      	ldr	r3, [r4, #0]
 8008cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cca:	606b      	str	r3, [r5, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008ccc:	6823      	ldr	r3, [r4, #0]
 8008cce:	691b      	ldr	r3, [r3, #16]
 8008cd0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008cd4:	60ab      	str	r3, [r5, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8008cd6:	6823      	ldr	r3, [r4, #0]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008cde:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8008ce2:	0c1a      	lsrs	r2, r3, #16
 8008ce4:	f002 003f 	and.w	r0, r2, #63	; 0x3f
 8008ce8:	7028      	strb	r0, [r5, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8008cea:	f3c3 2706 	ubfx	r7, r3, #8, #7
 8008cee:	706f      	strb	r7, [r5, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8008cf0:	f003 047f 	and.w	r4, r3, #127	; 0x7f
 8008cf4:	70ac      	strb	r4, [r5, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 8008cf6:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8008cfa:	70ea      	strb	r2, [r5, #3]
  if(Format == RTC_FORMAT_BIN)
 8008cfc:	b956      	cbnz	r6, 8008d14 <HAL_RTC_GetTime+0x64>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008cfe:	f7ff fec4 	bl	8008a8a <RTC_Bcd2ToByte>
 8008d02:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008d04:	4638      	mov	r0, r7
 8008d06:	f7ff fec0 	bl	8008a8a <RTC_Bcd2ToByte>
 8008d0a:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8008d0c:	4620      	mov	r0, r4
 8008d0e:	f7ff febc 	bl	8008a8a <RTC_Bcd2ToByte>
 8008d12:	70a8      	strb	r0, [r5, #2]
}
 8008d14:	2000      	movs	r0, #0
 8008d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d18:	0801e258 	.word	0x0801e258

08008d1c <HAL_RTC_SetDate>:
{
 8008d1c:	b570      	push	{r4, r5, r6, lr}
 8008d1e:	4604      	mov	r4, r0
 8008d20:	460e      	mov	r6, r1
 8008d22:	4615      	mov	r5, r2
  assert_param(IS_RTC_FORMAT(Format));
 8008d24:	2a01      	cmp	r2, #1
 8008d26:	d904      	bls.n	8008d32 <HAL_RTC_SetDate+0x16>
 8008d28:	f240 2171 	movw	r1, #625	; 0x271
 8008d2c:	4857      	ldr	r0, [pc, #348]	; (8008e8c <HAL_RTC_SetDate+0x170>)
 8008d2e:	f003 fafd 	bl	800c32c <assert_failed>
 __HAL_LOCK(hrtc);
 8008d32:	7f23      	ldrb	r3, [r4, #28]
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	f000 80a5 	beq.w	8008e84 <HAL_RTC_SetDate+0x168>
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	7723      	strb	r3, [r4, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8008d3e:	2302      	movs	r3, #2
 8008d40:	7763      	strb	r3, [r4, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008d42:	b93d      	cbnz	r5, 8008d54 <HAL_RTC_SetDate+0x38>
 8008d44:	7873      	ldrb	r3, [r6, #1]
 8008d46:	f013 0f10 	tst.w	r3, #16
 8008d4a:	d003      	beq.n	8008d54 <HAL_RTC_SetDate+0x38>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008d4c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8008d50:	330a      	adds	r3, #10
 8008d52:	7073      	strb	r3, [r6, #1]
  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 8008d54:	7833      	ldrb	r3, [r6, #0]
 8008d56:	3b01      	subs	r3, #1
 8008d58:	b2db      	uxtb	r3, r3
 8008d5a:	2b06      	cmp	r3, #6
 8008d5c:	d842      	bhi.n	8008de4 <HAL_RTC_SetDate+0xc8>
  if(Format == RTC_FORMAT_BIN)
 8008d5e:	2d00      	cmp	r5, #0
 8008d60:	d158      	bne.n	8008e14 <HAL_RTC_SetDate+0xf8>
    assert_param(IS_RTC_YEAR(sDate->Year));
 8008d62:	78f3      	ldrb	r3, [r6, #3]
 8008d64:	2b63      	cmp	r3, #99	; 0x63
 8008d66:	d843      	bhi.n	8008df0 <HAL_RTC_SetDate+0xd4>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8008d68:	7873      	ldrb	r3, [r6, #1]
 8008d6a:	3b01      	subs	r3, #1
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	2b0b      	cmp	r3, #11
 8008d70:	d844      	bhi.n	8008dfc <HAL_RTC_SetDate+0xe0>
    assert_param(IS_RTC_DATE(sDate->Date)); 
 8008d72:	78b3      	ldrb	r3, [r6, #2]
 8008d74:	3b01      	subs	r3, #1
 8008d76:	b2db      	uxtb	r3, r3
 8008d78:	2b1e      	cmp	r3, #30
 8008d7a:	d845      	bhi.n	8008e08 <HAL_RTC_SetDate+0xec>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008d7c:	78f0      	ldrb	r0, [r6, #3]
 8008d7e:	f7ff fe79 	bl	8008a74 <RTC_ByteToBcd2>
 8008d82:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008d84:	7870      	ldrb	r0, [r6, #1]
 8008d86:	f7ff fe75 	bl	8008a74 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008d8a:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008d8e:	78b0      	ldrb	r0, [r6, #2]
 8008d90:	f7ff fe70 	bl	8008a74 <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008d94:	4328      	orrs	r0, r5
                 ((uint32_t)sDate->WeekDay << 13U));   
 8008d96:	7835      	ldrb	r5, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008d98:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d9c:	6823      	ldr	r3, [r4, #0]
 8008d9e:	22ca      	movs	r2, #202	; 0xca
 8008da0:	625a      	str	r2, [r3, #36]	; 0x24
 8008da2:	6823      	ldr	r3, [r4, #0]
 8008da4:	2253      	movs	r2, #83	; 0x53
 8008da6:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008da8:	4620      	mov	r0, r4
 8008daa:	f7ff fda2 	bl	80088f2 <RTC_EnterInitMode>
 8008dae:	4606      	mov	r6, r0
 8008db0:	2800      	cmp	r0, #0
 8008db2:	d150      	bne.n	8008e56 <HAL_RTC_SetDate+0x13a>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008db4:	6823      	ldr	r3, [r4, #0]
 8008db6:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8008dba:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 8008dbe:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8008dc0:	6822      	ldr	r2, [r4, #0]
 8008dc2:	68d3      	ldr	r3, [r2, #12]
 8008dc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008dc8:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008dca:	6823      	ldr	r3, [r4, #0]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	f013 0f20 	tst.w	r3, #32
 8008dd2:	d049      	beq.n	8008e68 <HAL_RTC_SetDate+0x14c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8008dd4:	6823      	ldr	r3, [r4, #0]
 8008dd6:	22ff      	movs	r2, #255	; 0xff
 8008dd8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8008dde:	2300      	movs	r3, #0
 8008de0:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 8008de2:	e050      	b.n	8008e86 <HAL_RTC_SetDate+0x16a>
  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 8008de4:	f240 217d 	movw	r1, #637	; 0x27d
 8008de8:	4828      	ldr	r0, [pc, #160]	; (8008e8c <HAL_RTC_SetDate+0x170>)
 8008dea:	f003 fa9f 	bl	800c32c <assert_failed>
 8008dee:	e7b6      	b.n	8008d5e <HAL_RTC_SetDate+0x42>
    assert_param(IS_RTC_YEAR(sDate->Year));
 8008df0:	f240 2181 	movw	r1, #641	; 0x281
 8008df4:	4825      	ldr	r0, [pc, #148]	; (8008e8c <HAL_RTC_SetDate+0x170>)
 8008df6:	f003 fa99 	bl	800c32c <assert_failed>
 8008dfa:	e7b5      	b.n	8008d68 <HAL_RTC_SetDate+0x4c>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8008dfc:	f240 2182 	movw	r1, #642	; 0x282
 8008e00:	4822      	ldr	r0, [pc, #136]	; (8008e8c <HAL_RTC_SetDate+0x170>)
 8008e02:	f003 fa93 	bl	800c32c <assert_failed>
 8008e06:	e7b4      	b.n	8008d72 <HAL_RTC_SetDate+0x56>
    assert_param(IS_RTC_DATE(sDate->Date)); 
 8008e08:	f240 2183 	movw	r1, #643	; 0x283
 8008e0c:	481f      	ldr	r0, [pc, #124]	; (8008e8c <HAL_RTC_SetDate+0x170>)
 8008e0e:	f003 fa8d 	bl	800c32c <assert_failed>
 8008e12:	e7b3      	b.n	8008d7c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8008e14:	78f0      	ldrb	r0, [r6, #3]
 8008e16:	f7ff fe38 	bl	8008a8a <RTC_Bcd2ToByte>
 8008e1a:	2863      	cmp	r0, #99	; 0x63
 8008e1c:	d815      	bhi.n	8008e4a <HAL_RTC_SetDate+0x12e>
    assert_param(IS_RTC_MONTH(datetmpreg));
 8008e1e:	4d1b      	ldr	r5, [pc, #108]	; (8008e8c <HAL_RTC_SetDate+0x170>)
 8008e20:	f240 218d 	movw	r1, #653	; 0x28d
 8008e24:	4628      	mov	r0, r5
 8008e26:	f003 fa81 	bl	800c32c <assert_failed>
    assert_param(IS_RTC_DATE(datetmpreg));
 8008e2a:	f240 218e 	movw	r1, #654	; 0x28e
 8008e2e:	4628      	mov	r0, r5
 8008e30:	f003 fa7c 	bl	800c32c <assert_failed>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008e34:	78f5      	ldrb	r5, [r6, #3]
                  (((uint32_t)sDate->Month) << 8U) | \
 8008e36:	7870      	ldrb	r0, [r6, #1]
 8008e38:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008e3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
                  ((uint32_t)sDate->Date) | \
 8008e3e:	78b5      	ldrb	r5, [r6, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8008e40:	4328      	orrs	r0, r5
                  (((uint32_t)sDate->WeekDay) << 13U));  
 8008e42:	7835      	ldrb	r5, [r6, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008e44:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
 8008e48:	e7a8      	b.n	8008d9c <HAL_RTC_SetDate+0x80>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8008e4a:	f44f 7123 	mov.w	r1, #652	; 0x28c
 8008e4e:	480f      	ldr	r0, [pc, #60]	; (8008e8c <HAL_RTC_SetDate+0x170>)
 8008e50:	f003 fa6c 	bl	800c32c <assert_failed>
 8008e54:	e7e3      	b.n	8008e1e <HAL_RTC_SetDate+0x102>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8008e56:	6823      	ldr	r3, [r4, #0]
 8008e58:	22ff      	movs	r2, #255	; 0xff
 8008e5a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008e5c:	2304      	movs	r3, #4
 8008e5e:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8008e60:	2300      	movs	r3, #0
 8008e62:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8008e64:	2601      	movs	r6, #1
 8008e66:	e00e      	b.n	8008e86 <HAL_RTC_SetDate+0x16a>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008e68:	4620      	mov	r0, r4
 8008e6a:	f7ff fd29 	bl	80088c0 <HAL_RTC_WaitForSynchro>
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	d0b0      	beq.n	8008dd4 <HAL_RTC_SetDate+0xb8>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8008e72:	6823      	ldr	r3, [r4, #0]
 8008e74:	22ff      	movs	r2, #255	; 0xff
 8008e76:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008e78:	2304      	movs	r3, #4
 8008e7a:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8008e80:	2601      	movs	r6, #1
 8008e82:	e000      	b.n	8008e86 <HAL_RTC_SetDate+0x16a>
 __HAL_LOCK(hrtc);
 8008e84:	2602      	movs	r6, #2
}
 8008e86:	4630      	mov	r0, r6
 8008e88:	bd70      	pop	{r4, r5, r6, pc}
 8008e8a:	bf00      	nop
 8008e8c:	0801e258 	.word	0x0801e258

08008e90 <HAL_RTC_GetDate>:
{
 8008e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e92:	4606      	mov	r6, r0
 8008e94:	460c      	mov	r4, r1
 8008e96:	4615      	mov	r5, r2
  assert_param(IS_RTC_FORMAT(Format));
 8008e98:	2a01      	cmp	r2, #1
 8008e9a:	d904      	bls.n	8008ea6 <HAL_RTC_GetDate+0x16>
 8008e9c:	f240 21df 	movw	r1, #735	; 0x2df
 8008ea0:	4810      	ldr	r0, [pc, #64]	; (8008ee4 <HAL_RTC_GetDate+0x54>)
 8008ea2:	f003 fa43 	bl	800c32c <assert_failed>
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8008ea6:	6833      	ldr	r3, [r6, #0]
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008eae:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8008eb2:	0c18      	lsrs	r0, r3, #16
 8008eb4:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8008eb6:	f3c3 2704 	ubfx	r7, r3, #8, #5
 8008eba:	7067      	strb	r7, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008ebc:	f003 063f 	and.w	r6, r3, #63	; 0x3f
 8008ec0:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8008ec2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8008ec6:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 8008ec8:	b955      	cbnz	r5, 8008ee0 <HAL_RTC_GetDate+0x50>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008eca:	f7ff fdde 	bl	8008a8a <RTC_Bcd2ToByte>
 8008ece:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008ed0:	4638      	mov	r0, r7
 8008ed2:	f7ff fdda 	bl	8008a8a <RTC_Bcd2ToByte>
 8008ed6:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8008ed8:	4630      	mov	r0, r6
 8008eda:	f7ff fdd6 	bl	8008a8a <RTC_Bcd2ToByte>
 8008ede:	70a0      	strb	r0, [r4, #2]
}
 8008ee0:	2000      	movs	r0, #0
 8008ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ee4:	0801e258 	.word	0x0801e258

08008ee8 <TIM_OC1_SetConfig>:
 * @param  TIMx to select the TIM peripheral
 * @param  OC_Config The output configuration structure
 * @retval None
 */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ee8:	b430      	push	{r4, r5}
	uint32_t tmpccmrx = 0U;
	uint32_t tmpccer = 0U;
	uint32_t tmpcr2 = 0U;

	/* Disable the Channel 1: Reset the CC1E Bit */
	TIMx->CCER &= ~TIM_CCER_CC1E;
 8008eea:	6a03      	ldr	r3, [r0, #32]
 8008eec:	f023 0301 	bic.w	r3, r3, #1
 8008ef0:	6203      	str	r3, [r0, #32]

	/* Get the TIMx CCER register value */
	tmpccer = TIMx->CCER;
 8008ef2:	6a03      	ldr	r3, [r0, #32]
	/* Get the TIMx CR2 register value */
	tmpcr2 = TIMx->CR2;
 8008ef4:	6844      	ldr	r4, [r0, #4]

	/* Get the TIMx CCMR1 register value */
	tmpccmrx = TIMx->CCMR1;
 8008ef6:	6982      	ldr	r2, [r0, #24]

	/* Reset the Output Compare Mode Bits */
	tmpccmrx &= ~TIM_CCMR1_OC1M;
	tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008ef8:	f022 0273 	bic.w	r2, r2, #115	; 0x73
	/* Select the Output Compare Mode */
	tmpccmrx |= OC_Config->OCMode;
 8008efc:	680d      	ldr	r5, [r1, #0]
 8008efe:	432a      	orrs	r2, r5

	/* Reset the Output Polarity level */
	tmpccer &= ~TIM_CCER_CC1P;
 8008f00:	f023 0302 	bic.w	r3, r3, #2
	/* Set the Output Compare Polarity */
	tmpccer |= OC_Config->OCPolarity;
 8008f04:	688d      	ldr	r5, [r1, #8]
 8008f06:	432b      	orrs	r3, r5


	if (IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET) {
 8008f08:	4d0b      	ldr	r5, [pc, #44]	; (8008f38 <TIM_OC1_SetConfig+0x50>)
 8008f0a:	42a8      	cmp	r0, r5
 8008f0c:	d006      	beq.n	8008f1c <TIM_OC1_SetConfig+0x34>
		tmpcr2 |= OC_Config->OCIdleState;
		/* Set the Output N Idle state */
		tmpcr2 |= OC_Config->OCNIdleState;
	}
	/* Write to TIMx CR2 */
	TIMx->CR2 = tmpcr2;
 8008f0e:	6044      	str	r4, [r0, #4]

	/* Write to TIMx CCMR1 */
	TIMx->CCMR1 = tmpccmrx;
 8008f10:	6182      	str	r2, [r0, #24]

	/* Set the Capture Compare Register value */
	TIMx->CCR1 = OC_Config->Pulse;
 8008f12:	684a      	ldr	r2, [r1, #4]
 8008f14:	6342      	str	r2, [r0, #52]	; 0x34

	/* Write to TIMx CCER */
	TIMx->CCER = tmpccer;
 8008f16:	6203      	str	r3, [r0, #32]
}
 8008f18:	bc30      	pop	{r4, r5}
 8008f1a:	4770      	bx	lr
		tmpccer &= ~TIM_CCER_CC1NP;
 8008f1c:	f023 0308 	bic.w	r3, r3, #8
		tmpccer |= OC_Config->OCNPolarity;
 8008f20:	68cd      	ldr	r5, [r1, #12]
 8008f22:	432b      	orrs	r3, r5
		tmpccer &= ~TIM_CCER_CC1NE;
 8008f24:	f023 0304 	bic.w	r3, r3, #4
		tmpcr2 &= ~TIM_CR2_OIS1N;
 8008f28:	f424 7440 	bic.w	r4, r4, #768	; 0x300
		tmpcr2 |= OC_Config->OCIdleState;
 8008f2c:	694d      	ldr	r5, [r1, #20]
 8008f2e:	432c      	orrs	r4, r5
		tmpcr2 |= OC_Config->OCNIdleState;
 8008f30:	698d      	ldr	r5, [r1, #24]
 8008f32:	432c      	orrs	r4, r5
 8008f34:	e7eb      	b.n	8008f0e <TIM_OC1_SetConfig+0x26>
 8008f36:	bf00      	nop
 8008f38:	40010000 	.word	0x40010000

08008f3c <TIM_TI1_ConfigInputStage>:
 * @param  TIM_ICFilter Specifies the Input Capture Filter.
 *          This parameter must be a value between 0x00 and 0x0F.
 * @retval None
 */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f3c:	b410      	push	{r4}
	uint32_t tmpccmr1 = 0U;
	uint32_t tmpccer = 0U;

	/* Disable the Channel 1: Reset the CC1E Bit */
	tmpccer = TIMx->CCER;
 8008f3e:	6a03      	ldr	r3, [r0, #32]
	TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f40:	6a04      	ldr	r4, [r0, #32]
 8008f42:	f024 0401 	bic.w	r4, r4, #1
 8008f46:	6204      	str	r4, [r0, #32]
	tmpccmr1 = TIMx->CCMR1;
 8008f48:	6984      	ldr	r4, [r0, #24]

	/* Set the filter */
	tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f4a:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
	tmpccmr1 |= (TIM_ICFilter << 4U);
 8008f4e:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

	/* Select the Polarity and set the CC1E Bit */
	tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008f52:	f023 030a 	bic.w	r3, r3, #10
	tmpccer |= TIM_ICPolarity;
 8008f56:	430b      	orrs	r3, r1

	/* Write to TIMx CCMR1 and CCER registers */
	TIMx->CCMR1 = tmpccmr1;
 8008f58:	6182      	str	r2, [r0, #24]
	TIMx->CCER = tmpccer;
 8008f5a:	6203      	str	r3, [r0, #32]
}
 8008f5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f60:	4770      	bx	lr

08008f62 <TIM_TI2_ConfigInputStage>:
 * @param  TIM_ICFilter Specifies the Input Capture Filter.
 *          This parameter must be a value between 0x00 and 0x0F.
 * @retval None
 */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f62:	b410      	push	{r4}
	uint32_t tmpccmr1 = 0U;
	uint32_t tmpccer = 0U;

	/* Disable the Channel 2: Reset the CC2E Bit */
	TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f64:	6a03      	ldr	r3, [r0, #32]
 8008f66:	f023 0310 	bic.w	r3, r3, #16
 8008f6a:	6203      	str	r3, [r0, #32]
	tmpccmr1 = TIMx->CCMR1;
 8008f6c:	6984      	ldr	r4, [r0, #24]
	tmpccer = TIMx->CCER;
 8008f6e:	6a03      	ldr	r3, [r0, #32]

	/* Set the filter */
	tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f70:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
	tmpccmr1 |= (TIM_ICFilter << 12U);
 8008f74:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

	/* Select the Polarity and set the CC2E Bit */
	tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f78:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
	tmpccer |= (TIM_ICPolarity << 4U);
 8008f7c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

	/* Write to TIMx CCMR1 and CCER registers */
	TIMx->CCMR1 = tmpccmr1;
 8008f80:	6182      	str	r2, [r0, #24]
	TIMx->CCER = tmpccer;
 8008f82:	6203      	str	r3, [r0, #32]
}
 8008f84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f88:	4770      	bx	lr

08008f8a <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
	uint32_t tmpsmcr = 0U;

	/* Get the TIMx SMCR register value */
	tmpsmcr = TIMx->SMCR;
 8008f8a:	6883      	ldr	r3, [r0, #8]
	/* Reset the TS Bits */
	tmpsmcr &= ~TIM_SMCR_TS;
 8008f8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	/* Set the Input Trigger source and the slave mode*/
	tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8008f90:	f041 0107 	orr.w	r1, r1, #7
 8008f94:	430b      	orrs	r3, r1
	/* Write to TIMx SMCR */
	TIMx->SMCR = tmpsmcr;
 8008f96:	6083      	str	r3, [r0, #8]
 8008f98:	4770      	bx	lr

08008f9a <TIM_ETR_SetConfig>:
 *          This parameter must be a value between 0x00 and 0x0F
 * @retval None
 */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
			      uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f9a:	b410      	push	{r4}
	uint32_t tmpsmcr = 0U;

	tmpsmcr = TIMx->SMCR;
 8008f9c:	6884      	ldr	r4, [r0, #8]

	/* Reset the ETR Bits */
	tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f9e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

	/* Set the Prescaler, the Filter value and the Polarity */
	tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8008fa2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8008fa6:	4319      	orrs	r1, r3
 8008fa8:	430c      	orrs	r4, r1

	/* Write to TIMx SMCR */
	TIMx->SMCR = tmpsmcr;
 8008faa:	6084      	str	r4, [r0, #8]
}
 8008fac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fb0:	4770      	bx	lr
	...

08008fb4 <TIM_OC3_SetConfig>:
{
 8008fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fb8:	4604      	mov	r4, r0
 8008fba:	460f      	mov	r7, r1
	TIMx->CCER &= ~TIM_CCER_CC3E;
 8008fbc:	6a03      	ldr	r3, [r0, #32]
 8008fbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fc2:	6203      	str	r3, [r0, #32]
	tmpccer = TIMx->CCER;
 8008fc4:	6a05      	ldr	r5, [r0, #32]
	tmpcr2 = TIMx->CR2;
 8008fc6:	f8d0 8004 	ldr.w	r8, [r0, #4]
	tmpccmrx = TIMx->CCMR2;
 8008fca:	69c6      	ldr	r6, [r0, #28]
	tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008fcc:	f026 0673 	bic.w	r6, r6, #115	; 0x73
	tmpccmrx |= OC_Config->OCMode;
 8008fd0:	680b      	ldr	r3, [r1, #0]
 8008fd2:	431e      	orrs	r6, r3
	tmpccer &= ~TIM_CCER_CC3P;
 8008fd4:	f425 7500 	bic.w	r5, r5, #512	; 0x200
	tmpccer |= (OC_Config->OCPolarity << 8U);
 8008fd8:	688b      	ldr	r3, [r1, #8]
 8008fda:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	if (IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET) {
 8008fde:	4b1d      	ldr	r3, [pc, #116]	; (8009054 <TIM_OC3_SetConfig+0xa0>)
 8008fe0:	4298      	cmp	r0, r3
 8008fe2:	d007      	beq.n	8008ff4 <TIM_OC3_SetConfig+0x40>
	TIMx->CR2 = tmpcr2;
 8008fe4:	f8c4 8004 	str.w	r8, [r4, #4]
	TIMx->CCMR2 = tmpccmrx;
 8008fe8:	61e6      	str	r6, [r4, #28]
	TIMx->CCR3 = OC_Config->Pulse;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	63e3      	str	r3, [r4, #60]	; 0x3c
	TIMx->CCER = tmpccer;
 8008fee:	6225      	str	r5, [r4, #32]
 8008ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008ff4:	68cb      	ldr	r3, [r1, #12]
 8008ff6:	b133      	cbz	r3, 8009006 <TIM_OC3_SetConfig+0x52>
 8008ff8:	2b08      	cmp	r3, #8
 8008ffa:	d004      	beq.n	8009006 <TIM_OC3_SetConfig+0x52>
 8008ffc:	f241 2166 	movw	r1, #4710	; 0x1266
 8009000:	4815      	ldr	r0, [pc, #84]	; (8009058 <TIM_OC3_SetConfig+0xa4>)
 8009002:	f003 f993 	bl	800c32c <assert_failed>
		assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8009006:	69bb      	ldr	r3, [r7, #24]
 8009008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800900c:	d000      	beq.n	8009010 <TIM_OC3_SetConfig+0x5c>
 800900e:	b9a3      	cbnz	r3, 800903a <TIM_OC3_SetConfig+0x86>
		assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009016:	d000      	beq.n	800901a <TIM_OC3_SetConfig+0x66>
 8009018:	b9ab      	cbnz	r3, 8009046 <TIM_OC3_SetConfig+0x92>
		tmpccer &= ~TIM_CCER_CC3NP;
 800901a:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
		tmpccer |= (OC_Config->OCNPolarity << 8U);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
		tmpccer &= ~TIM_CCER_CC3NE;
 8009024:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
		tmpcr2 &= ~TIM_CR2_OIS3N;
 8009028:	f428 5840 	bic.w	r8, r8, #12288	; 0x3000
		tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	ea48 1803 	orr.w	r8, r8, r3, lsl #4
		tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009032:	69bb      	ldr	r3, [r7, #24]
 8009034:	ea48 1803 	orr.w	r8, r8, r3, lsl #4
 8009038:	e7d4      	b.n	8008fe4 <TIM_OC3_SetConfig+0x30>
		assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800903a:	f241 2167 	movw	r1, #4711	; 0x1267
 800903e:	4806      	ldr	r0, [pc, #24]	; (8009058 <TIM_OC3_SetConfig+0xa4>)
 8009040:	f003 f974 	bl	800c32c <assert_failed>
 8009044:	e7e4      	b.n	8009010 <TIM_OC3_SetConfig+0x5c>
		assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009046:	f241 2168 	movw	r1, #4712	; 0x1268
 800904a:	4803      	ldr	r0, [pc, #12]	; (8009058 <TIM_OC3_SetConfig+0xa4>)
 800904c:	f003 f96e 	bl	800c32c <assert_failed>
 8009050:	e7e3      	b.n	800901a <TIM_OC3_SetConfig+0x66>
 8009052:	bf00      	nop
 8009054:	40010000 	.word	0x40010000
 8009058:	0801e290 	.word	0x0801e290

0800905c <TIM_OC4_SetConfig>:
{
 800905c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009060:	4604      	mov	r4, r0
 8009062:	460f      	mov	r7, r1
	TIMx->CCER &= ~TIM_CCER_CC4E;
 8009064:	6a03      	ldr	r3, [r0, #32]
 8009066:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800906a:	6203      	str	r3, [r0, #32]
	tmpccer = TIMx->CCER;
 800906c:	6a05      	ldr	r5, [r0, #32]
	tmpcr2 = TIMx->CR2;
 800906e:	f8d0 8004 	ldr.w	r8, [r0, #4]
	tmpccmrx = TIMx->CCMR2;
 8009072:	69c6      	ldr	r6, [r0, #28]
	tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009074:	f426 46e6 	bic.w	r6, r6, #29440	; 0x7300
	tmpccmrx |= (OC_Config->OCMode << 8U);
 8009078:	680b      	ldr	r3, [r1, #0]
 800907a:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
	tmpccer &= ~TIM_CCER_CC4P;
 800907e:	f425 5500 	bic.w	r5, r5, #8192	; 0x2000
	tmpccer |= (OC_Config->OCPolarity << 12U);
 8009082:	688b      	ldr	r3, [r1, #8]
 8009084:	ea45 3503 	orr.w	r5, r5, r3, lsl #12
	if (IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET) {
 8009088:	4b0d      	ldr	r3, [pc, #52]	; (80090c0 <TIM_OC4_SetConfig+0x64>)
 800908a:	4298      	cmp	r0, r3
 800908c:	d007      	beq.n	800909e <TIM_OC4_SetConfig+0x42>
	TIMx->CR2 = tmpcr2;
 800908e:	f8c4 8004 	str.w	r8, [r4, #4]
	TIMx->CCMR2 = tmpccmrx;
 8009092:	61e6      	str	r6, [r4, #28]
	TIMx->CCR4 = OC_Config->Pulse;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6423      	str	r3, [r4, #64]	; 0x40
	TIMx->CCER = tmpccer;
 8009098:	6225      	str	r5, [r4, #32]
 800909a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800909e:	694b      	ldr	r3, [r1, #20]
 80090a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090a4:	d000      	beq.n	80090a8 <TIM_OC4_SetConfig+0x4c>
 80090a6:	b92b      	cbnz	r3, 80090b4 <TIM_OC4_SetConfig+0x58>
		tmpcr2 &= ~TIM_CR2_OIS4;
 80090a8:	f428 4880 	bic.w	r8, r8, #16384	; 0x4000
		tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	ea48 1883 	orr.w	r8, r8, r3, lsl #6
 80090b2:	e7ec      	b.n	800908e <TIM_OC4_SetConfig+0x32>
		assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80090b4:	f241 21ab 	movw	r1, #4779	; 0x12ab
 80090b8:	4802      	ldr	r0, [pc, #8]	; (80090c4 <TIM_OC4_SetConfig+0x68>)
 80090ba:	f003 f937 	bl	800c32c <assert_failed>
 80090be:	e7f3      	b.n	80090a8 <TIM_OC4_SetConfig+0x4c>
 80090c0:	40010000 	.word	0x40010000
 80090c4:	0801e290 	.word	0x0801e290

080090c8 <HAL_TIM_Base_Start_IT>:
{
 80090c8:	b510      	push	{r4, lr}
 80090ca:	4604      	mov	r4, r0
	assert_param(IS_TIM_INSTANCE(htim->Instance));
 80090cc:	6803      	ldr	r3, [r0, #0]
 80090ce:	4a17      	ldr	r2, [pc, #92]	; (800912c <HAL_TIM_Base_Start_IT+0x64>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d01f      	beq.n	8009114 <HAL_TIM_Base_Start_IT+0x4c>
 80090d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090d8:	d01c      	beq.n	8009114 <HAL_TIM_Base_Start_IT+0x4c>
 80090da:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80090de:	4293      	cmp	r3, r2
 80090e0:	d018      	beq.n	8009114 <HAL_TIM_Base_Start_IT+0x4c>
 80090e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d014      	beq.n	8009114 <HAL_TIM_Base_Start_IT+0x4c>
 80090ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d010      	beq.n	8009114 <HAL_TIM_Base_Start_IT+0x4c>
 80090f2:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d00c      	beq.n	8009114 <HAL_TIM_Base_Start_IT+0x4c>
 80090fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80090fe:	4293      	cmp	r3, r2
 8009100:	d008      	beq.n	8009114 <HAL_TIM_Base_Start_IT+0x4c>
 8009102:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009106:	4293      	cmp	r3, r2
 8009108:	d004      	beq.n	8009114 <HAL_TIM_Base_Start_IT+0x4c>
 800910a:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800910e:	4808      	ldr	r0, [pc, #32]	; (8009130 <HAL_TIM_Base_Start_IT+0x68>)
 8009110:	f003 f90c 	bl	800c32c <assert_failed>
	__HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009114:	6822      	ldr	r2, [r4, #0]
 8009116:	68d3      	ldr	r3, [r2, #12]
 8009118:	f043 0301 	orr.w	r3, r3, #1
 800911c:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_ENABLE(htim);
 800911e:	6822      	ldr	r2, [r4, #0]
 8009120:	6813      	ldr	r3, [r2, #0]
 8009122:	f043 0301 	orr.w	r3, r3, #1
 8009126:	6013      	str	r3, [r2, #0]
}
 8009128:	2000      	movs	r0, #0
 800912a:	bd10      	pop	{r4, pc}
 800912c:	40010000 	.word	0x40010000
 8009130:	0801e290 	.word	0x0801e290

08009134 <HAL_TIM_PWM_MspInit>:
{
 8009134:	4770      	bx	lr

08009136 <HAL_TIM_PWM_MspDeInit>:
{
 8009136:	4770      	bx	lr

08009138 <HAL_TIM_PWM_DeInit>:
{
 8009138:	b510      	push	{r4, lr}
 800913a:	4604      	mov	r4, r0
	assert_param(IS_TIM_INSTANCE(htim->Instance));
 800913c:	6803      	ldr	r3, [r0, #0]
 800913e:	4a1f      	ldr	r2, [pc, #124]	; (80091bc <HAL_TIM_PWM_DeInit+0x84>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d01f      	beq.n	8009184 <HAL_TIM_PWM_DeInit+0x4c>
 8009144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009148:	d01c      	beq.n	8009184 <HAL_TIM_PWM_DeInit+0x4c>
 800914a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800914e:	4293      	cmp	r3, r2
 8009150:	d018      	beq.n	8009184 <HAL_TIM_PWM_DeInit+0x4c>
 8009152:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009156:	4293      	cmp	r3, r2
 8009158:	d014      	beq.n	8009184 <HAL_TIM_PWM_DeInit+0x4c>
 800915a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800915e:	4293      	cmp	r3, r2
 8009160:	d010      	beq.n	8009184 <HAL_TIM_PWM_DeInit+0x4c>
 8009162:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8009166:	4293      	cmp	r3, r2
 8009168:	d00c      	beq.n	8009184 <HAL_TIM_PWM_DeInit+0x4c>
 800916a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800916e:	4293      	cmp	r3, r2
 8009170:	d008      	beq.n	8009184 <HAL_TIM_PWM_DeInit+0x4c>
 8009172:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009176:	4293      	cmp	r3, r2
 8009178:	d004      	beq.n	8009184 <HAL_TIM_PWM_DeInit+0x4c>
 800917a:	f240 31f6 	movw	r1, #1014	; 0x3f6
 800917e:	4810      	ldr	r0, [pc, #64]	; (80091c0 <HAL_TIM_PWM_DeInit+0x88>)
 8009180:	f003 f8d4 	bl	800c32c <assert_failed>
	htim->State = HAL_TIM_STATE_BUSY;
 8009184:	2302      	movs	r3, #2
 8009186:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	__HAL_TIM_DISABLE(htim);
 800918a:	6823      	ldr	r3, [r4, #0]
 800918c:	6a19      	ldr	r1, [r3, #32]
 800918e:	f241 1211 	movw	r2, #4369	; 0x1111
 8009192:	4211      	tst	r1, r2
 8009194:	d108      	bne.n	80091a8 <HAL_TIM_PWM_DeInit+0x70>
 8009196:	6a19      	ldr	r1, [r3, #32]
 8009198:	f240 4244 	movw	r2, #1092	; 0x444
 800919c:	4211      	tst	r1, r2
 800919e:	d103      	bne.n	80091a8 <HAL_TIM_PWM_DeInit+0x70>
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	f022 0201 	bic.w	r2, r2, #1
 80091a6:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_MspDeInit(htim);
 80091a8:	4620      	mov	r0, r4
 80091aa:	f7ff ffc4 	bl	8009136 <HAL_TIM_PWM_MspDeInit>
	htim->State = HAL_TIM_STATE_RESET;
 80091ae:	2000      	movs	r0, #0
 80091b0:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
	__HAL_UNLOCK(htim);
 80091b4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 80091b8:	bd10      	pop	{r4, pc}
 80091ba:	bf00      	nop
 80091bc:	40010000 	.word	0x40010000
 80091c0:	0801e290 	.word	0x0801e290

080091c4 <HAL_TIM_ConfigClockSource>:
{
 80091c4:	b538      	push	{r3, r4, r5, lr}
	__HAL_LOCK(htim);
 80091c6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	f000 8264 	beq.w	8009698 <HAL_TIM_ConfigClockSource+0x4d4>
 80091d0:	460d      	mov	r5, r1
 80091d2:	4604      	mov	r4, r0
 80091d4:	2301      	movs	r3, #1
 80091d6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	htim->State = HAL_TIM_STATE_BUSY;
 80091da:	2302      	movs	r3, #2
 80091dc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
	assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80091e0:	680b      	ldr	r3, [r1, #0]
 80091e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091e6:	d016      	beq.n	8009216 <HAL_TIM_ConfigClockSource+0x52>
 80091e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091ec:	d013      	beq.n	8009216 <HAL_TIM_ConfigClockSource+0x52>
 80091ee:	b193      	cbz	r3, 8009216 <HAL_TIM_ConfigClockSource+0x52>
 80091f0:	2b10      	cmp	r3, #16
 80091f2:	d010      	beq.n	8009216 <HAL_TIM_ConfigClockSource+0x52>
 80091f4:	2b20      	cmp	r3, #32
 80091f6:	d00e      	beq.n	8009216 <HAL_TIM_ConfigClockSource+0x52>
 80091f8:	2b30      	cmp	r3, #48	; 0x30
 80091fa:	d00c      	beq.n	8009216 <HAL_TIM_ConfigClockSource+0x52>
 80091fc:	2b40      	cmp	r3, #64	; 0x40
 80091fe:	d00a      	beq.n	8009216 <HAL_TIM_ConfigClockSource+0x52>
 8009200:	2b50      	cmp	r3, #80	; 0x50
 8009202:	d008      	beq.n	8009216 <HAL_TIM_ConfigClockSource+0x52>
 8009204:	2b60      	cmp	r3, #96	; 0x60
 8009206:	d006      	beq.n	8009216 <HAL_TIM_ConfigClockSource+0x52>
 8009208:	2b70      	cmp	r3, #112	; 0x70
 800920a:	d004      	beq.n	8009216 <HAL_TIM_ConfigClockSource+0x52>
 800920c:	f640 61df 	movw	r1, #3807	; 0xedf
 8009210:	48b6      	ldr	r0, [pc, #728]	; (80094ec <HAL_TIM_ConfigClockSource+0x328>)
 8009212:	f003 f88b 	bl	800c32c <assert_failed>
	tmpsmcr = htim->Instance->SMCR;
 8009216:	6822      	ldr	r2, [r4, #0]
 8009218:	6893      	ldr	r3, [r2, #8]
	tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800921a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800921e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
	htim->Instance->SMCR = tmpsmcr;
 8009222:	6093      	str	r3, [r2, #8]
	switch (sClockSourceConfig->ClockSource) {
 8009224:	682b      	ldr	r3, [r5, #0]
 8009226:	2b40      	cmp	r3, #64	; 0x40
 8009228:	f000 81af 	beq.w	800958a <HAL_TIM_ConfigClockSource+0x3c6>
 800922c:	d942      	bls.n	80092b4 <HAL_TIM_ConfigClockSource+0xf0>
 800922e:	2b70      	cmp	r3, #112	; 0x70
 8009230:	f000 810b 	beq.w	800944a <HAL_TIM_ConfigClockSource+0x286>
 8009234:	f200 808d 	bhi.w	8009352 <HAL_TIM_ConfigClockSource+0x18e>
 8009238:	2b50      	cmp	r3, #80	; 0x50
 800923a:	f000 815b 	beq.w	80094f4 <HAL_TIM_ConfigClockSource+0x330>
 800923e:	2b60      	cmp	r3, #96	; 0x60
 8009240:	f040 80fc 	bne.w	800943c <HAL_TIM_ConfigClockSource+0x278>
		assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8009244:	6823      	ldr	r3, [r4, #0]
 8009246:	4aaa      	ldr	r2, [pc, #680]	; (80094f0 <HAL_TIM_ConfigClockSource+0x32c>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d017      	beq.n	800927c <HAL_TIM_ConfigClockSource+0xb8>
 800924c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009250:	d014      	beq.n	800927c <HAL_TIM_ConfigClockSource+0xb8>
 8009252:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8009256:	4293      	cmp	r3, r2
 8009258:	d010      	beq.n	800927c <HAL_TIM_ConfigClockSource+0xb8>
 800925a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800925e:	4293      	cmp	r3, r2
 8009260:	d00c      	beq.n	800927c <HAL_TIM_ConfigClockSource+0xb8>
 8009262:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009266:	4293      	cmp	r3, r2
 8009268:	d008      	beq.n	800927c <HAL_TIM_ConfigClockSource+0xb8>
 800926a:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800926e:	4293      	cmp	r3, r2
 8009270:	d004      	beq.n	800927c <HAL_TIM_ConfigClockSource+0xb8>
 8009272:	f640 712b 	movw	r1, #3883	; 0xf2b
 8009276:	489d      	ldr	r0, [pc, #628]	; (80094ec <HAL_TIM_ConfigClockSource+0x328>)
 8009278:	f003 f858 	bl	800c32c <assert_failed>
		assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800927c:	686b      	ldr	r3, [r5, #4]
 800927e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009282:	d009      	beq.n	8009298 <HAL_TIM_ConfigClockSource+0xd4>
 8009284:	b143      	cbz	r3, 8009298 <HAL_TIM_ConfigClockSource+0xd4>
 8009286:	2b02      	cmp	r3, #2
 8009288:	d006      	beq.n	8009298 <HAL_TIM_ConfigClockSource+0xd4>
 800928a:	2b0a      	cmp	r3, #10
 800928c:	d004      	beq.n	8009298 <HAL_TIM_ConfigClockSource+0xd4>
 800928e:	f640 712e 	movw	r1, #3886	; 0xf2e
 8009292:	4896      	ldr	r0, [pc, #600]	; (80094ec <HAL_TIM_ConfigClockSource+0x328>)
 8009294:	f003 f84a 	bl	800c32c <assert_failed>
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009298:	68eb      	ldr	r3, [r5, #12]
 800929a:	2b0f      	cmp	r3, #15
 800929c:	f200 816f 	bhi.w	800957e <HAL_TIM_ConfigClockSource+0x3ba>
		TIM_TI2_ConfigInputStage(htim->Instance,
 80092a0:	68ea      	ldr	r2, [r5, #12]
 80092a2:	6869      	ldr	r1, [r5, #4]
 80092a4:	6820      	ldr	r0, [r4, #0]
 80092a6:	f7ff fe5c 	bl	8008f62 <TIM_TI2_ConfigInputStage>
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80092aa:	2160      	movs	r1, #96	; 0x60
 80092ac:	6820      	ldr	r0, [r4, #0]
 80092ae:	f7ff fe6c 	bl	8008f8a <TIM_ITRx_SetConfig>
	break;
 80092b2:	e0c3      	b.n	800943c <HAL_TIM_ConfigClockSource+0x278>
	switch (sClockSourceConfig->ClockSource) {
 80092b4:	2b10      	cmp	r3, #16
 80092b6:	f000 81ad 	beq.w	8009614 <HAL_TIM_ConfigClockSource+0x450>
 80092ba:	d926      	bls.n	800930a <HAL_TIM_ConfigClockSource+0x146>
 80092bc:	2b20      	cmp	r3, #32
 80092be:	f000 81ca 	beq.w	8009656 <HAL_TIM_ConfigClockSource+0x492>
 80092c2:	2b30      	cmp	r3, #48	; 0x30
 80092c4:	f040 80ba 	bne.w	800943c <HAL_TIM_ConfigClockSource+0x278>
		assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80092c8:	6823      	ldr	r3, [r4, #0]
 80092ca:	4a89      	ldr	r2, [pc, #548]	; (80094f0 <HAL_TIM_ConfigClockSource+0x32c>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d017      	beq.n	8009300 <HAL_TIM_ConfigClockSource+0x13c>
 80092d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092d4:	d014      	beq.n	8009300 <HAL_TIM_ConfigClockSource+0x13c>
 80092d6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80092da:	4293      	cmp	r3, r2
 80092dc:	d010      	beq.n	8009300 <HAL_TIM_ConfigClockSource+0x13c>
 80092de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d00c      	beq.n	8009300 <HAL_TIM_ConfigClockSource+0x13c>
 80092e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d008      	beq.n	8009300 <HAL_TIM_ConfigClockSource+0x13c>
 80092ee:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d004      	beq.n	8009300 <HAL_TIM_ConfigClockSource+0x13c>
 80092f6:	f640 7159 	movw	r1, #3929	; 0xf59
 80092fa:	487c      	ldr	r0, [pc, #496]	; (80094ec <HAL_TIM_ConfigClockSource+0x328>)
 80092fc:	f003 f816 	bl	800c32c <assert_failed>
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8009300:	2130      	movs	r1, #48	; 0x30
 8009302:	6820      	ldr	r0, [r4, #0]
 8009304:	f7ff fe41 	bl	8008f8a <TIM_ITRx_SetConfig>
	break;
 8009308:	e098      	b.n	800943c <HAL_TIM_ConfigClockSource+0x278>
	switch (sClockSourceConfig->ClockSource) {
 800930a:	2b00      	cmp	r3, #0
 800930c:	f040 8096 	bne.w	800943c <HAL_TIM_ConfigClockSource+0x278>
		assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8009310:	6823      	ldr	r3, [r4, #0]
 8009312:	4a77      	ldr	r2, [pc, #476]	; (80094f0 <HAL_TIM_ConfigClockSource+0x32c>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d017      	beq.n	8009348 <HAL_TIM_ConfigClockSource+0x184>
 8009318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800931c:	d014      	beq.n	8009348 <HAL_TIM_ConfigClockSource+0x184>
 800931e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8009322:	4293      	cmp	r3, r2
 8009324:	d010      	beq.n	8009348 <HAL_TIM_ConfigClockSource+0x184>
 8009326:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800932a:	4293      	cmp	r3, r2
 800932c:	d00c      	beq.n	8009348 <HAL_TIM_ConfigClockSource+0x184>
 800932e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009332:	4293      	cmp	r3, r2
 8009334:	d008      	beq.n	8009348 <HAL_TIM_ConfigClockSource+0x184>
 8009336:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800933a:	4293      	cmp	r3, r2
 800933c:	d004      	beq.n	8009348 <HAL_TIM_ConfigClockSource+0x184>
 800933e:	f640 7147 	movw	r1, #3911	; 0xf47
 8009342:	486a      	ldr	r0, [pc, #424]	; (80094ec <HAL_TIM_ConfigClockSource+0x328>)
 8009344:	f002 fff2 	bl	800c32c <assert_failed>
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8009348:	2100      	movs	r1, #0
 800934a:	6820      	ldr	r0, [r4, #0]
 800934c:	f7ff fe1d 	bl	8008f8a <TIM_ITRx_SetConfig>
	break;
 8009350:	e074      	b.n	800943c <HAL_TIM_ConfigClockSource+0x278>
	switch (sClockSourceConfig->ClockSource) {
 8009352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009356:	d048      	beq.n	80093ea <HAL_TIM_ConfigClockSource+0x226>
 8009358:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800935c:	d16e      	bne.n	800943c <HAL_TIM_ConfigClockSource+0x278>
		assert_param(IS_TIM_ETR_INSTANCE(htim->Instance));
 800935e:	6823      	ldr	r3, [r4, #0]
 8009360:	4a63      	ldr	r2, [pc, #396]	; (80094f0 <HAL_TIM_ConfigClockSource+0x32c>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d013      	beq.n	800938e <HAL_TIM_ConfigClockSource+0x1ca>
 8009366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800936a:	d010      	beq.n	800938e <HAL_TIM_ConfigClockSource+0x1ca>
 800936c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8009370:	4293      	cmp	r3, r2
 8009372:	d00c      	beq.n	800938e <HAL_TIM_ConfigClockSource+0x1ca>
 8009374:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009378:	4293      	cmp	r3, r2
 800937a:	d008      	beq.n	800938e <HAL_TIM_ConfigClockSource+0x1ca>
 800937c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009380:	4293      	cmp	r3, r2
 8009382:	d004      	beq.n	800938e <HAL_TIM_ConfigClockSource+0x1ca>
 8009384:	f640 710b 	movw	r1, #3851	; 0xf0b
 8009388:	4858      	ldr	r0, [pc, #352]	; (80094ec <HAL_TIM_ConfigClockSource+0x328>)
 800938a:	f002 ffcf 	bl	800c32c <assert_failed>
		assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800938e:	686b      	ldr	r3, [r5, #4]
 8009390:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009394:	d009      	beq.n	80093aa <HAL_TIM_ConfigClockSource+0x1e6>
 8009396:	b143      	cbz	r3, 80093aa <HAL_TIM_ConfigClockSource+0x1e6>
 8009398:	2b02      	cmp	r3, #2
 800939a:	d006      	beq.n	80093aa <HAL_TIM_ConfigClockSource+0x1e6>
 800939c:	2b0a      	cmp	r3, #10
 800939e:	d004      	beq.n	80093aa <HAL_TIM_ConfigClockSource+0x1e6>
 80093a0:	f640 710d 	movw	r1, #3853	; 0xf0d
 80093a4:	4851      	ldr	r0, [pc, #324]	; (80094ec <HAL_TIM_ConfigClockSource+0x328>)
 80093a6:	f002 ffc1 	bl	800c32c <assert_failed>
		assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80093aa:	68ab      	ldr	r3, [r5, #8]
 80093ac:	b16b      	cbz	r3, 80093ca <HAL_TIM_ConfigClockSource+0x206>
 80093ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093b2:	d00a      	beq.n	80093ca <HAL_TIM_ConfigClockSource+0x206>
 80093b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093b8:	d007      	beq.n	80093ca <HAL_TIM_ConfigClockSource+0x206>
 80093ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80093be:	d004      	beq.n	80093ca <HAL_TIM_ConfigClockSource+0x206>
 80093c0:	f640 710e 	movw	r1, #3854	; 0xf0e
 80093c4:	4849      	ldr	r0, [pc, #292]	; (80094ec <HAL_TIM_ConfigClockSource+0x328>)
 80093c6:	f002 ffb1 	bl	800c32c <assert_failed>
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80093ca:	68eb      	ldr	r3, [r5, #12]
 80093cc:	2b0f      	cmp	r3, #15
 80093ce:	f200 8087 	bhi.w	80094e0 <HAL_TIM_ConfigClockSource+0x31c>
		TIM_ETR_SetConfig(htim->Instance,
 80093d2:	68eb      	ldr	r3, [r5, #12]
 80093d4:	686a      	ldr	r2, [r5, #4]
 80093d6:	68a9      	ldr	r1, [r5, #8]
 80093d8:	6820      	ldr	r0, [r4, #0]
 80093da:	f7ff fdde 	bl	8008f9a <TIM_ETR_SetConfig>
		htim->Instance->SMCR |= TIM_SMCR_ECE;
 80093de:	6822      	ldr	r2, [r4, #0]
 80093e0:	6893      	ldr	r3, [r2, #8]
 80093e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80093e6:	6093      	str	r3, [r2, #8]
	break;
 80093e8:	e028      	b.n	800943c <HAL_TIM_ConfigClockSource+0x278>
		assert_param(IS_TIM_INSTANCE(htim->Instance));
 80093ea:	6823      	ldr	r3, [r4, #0]
 80093ec:	4a40      	ldr	r2, [pc, #256]	; (80094f0 <HAL_TIM_ConfigClockSource+0x32c>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d01f      	beq.n	8009432 <HAL_TIM_ConfigClockSource+0x26e>
 80093f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093f6:	d01c      	beq.n	8009432 <HAL_TIM_ConfigClockSource+0x26e>
 80093f8:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d018      	beq.n	8009432 <HAL_TIM_ConfigClockSource+0x26e>
 8009400:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009404:	4293      	cmp	r3, r2
 8009406:	d014      	beq.n	8009432 <HAL_TIM_ConfigClockSource+0x26e>
 8009408:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800940c:	4293      	cmp	r3, r2
 800940e:	d010      	beq.n	8009432 <HAL_TIM_ConfigClockSource+0x26e>
 8009410:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8009414:	4293      	cmp	r3, r2
 8009416:	d00c      	beq.n	8009432 <HAL_TIM_ConfigClockSource+0x26e>
 8009418:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800941c:	4293      	cmp	r3, r2
 800941e:	d008      	beq.n	8009432 <HAL_TIM_ConfigClockSource+0x26e>
 8009420:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009424:	4293      	cmp	r3, r2
 8009426:	d004      	beq.n	8009432 <HAL_TIM_ConfigClockSource+0x26e>
 8009428:	f640 61ea 	movw	r1, #3818	; 0xeea
 800942c:	482f      	ldr	r0, [pc, #188]	; (80094ec <HAL_TIM_ConfigClockSource+0x328>)
 800942e:	f002 ff7d 	bl	800c32c <assert_failed>
		htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8009432:	6822      	ldr	r2, [r4, #0]
 8009434:	6893      	ldr	r3, [r2, #8]
 8009436:	f023 0307 	bic.w	r3, r3, #7
 800943a:	6093      	str	r3, [r2, #8]
	htim->State = HAL_TIM_STATE_READY;
 800943c:	2301      	movs	r3, #1
 800943e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	__HAL_UNLOCK(htim);
 8009442:	2000      	movs	r0, #0
 8009444:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
	return HAL_OK;
 8009448:	bd38      	pop	{r3, r4, r5, pc}
		assert_param(IS_TIM_ETR_INSTANCE(htim->Instance));
 800944a:	6823      	ldr	r3, [r4, #0]
 800944c:	4a28      	ldr	r2, [pc, #160]	; (80094f0 <HAL_TIM_ConfigClockSource+0x32c>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d013      	beq.n	800947a <HAL_TIM_ConfigClockSource+0x2b6>
 8009452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009456:	d010      	beq.n	800947a <HAL_TIM_ConfigClockSource+0x2b6>
 8009458:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800945c:	4293      	cmp	r3, r2
 800945e:	d00c      	beq.n	800947a <HAL_TIM_ConfigClockSource+0x2b6>
 8009460:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009464:	4293      	cmp	r3, r2
 8009466:	d008      	beq.n	800947a <HAL_TIM_ConfigClockSource+0x2b6>
 8009468:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800946c:	4293      	cmp	r3, r2
 800946e:	d004      	beq.n	800947a <HAL_TIM_ConfigClockSource+0x2b6>
 8009470:	f640 61f3 	movw	r1, #3827	; 0xef3
 8009474:	481d      	ldr	r0, [pc, #116]	; (80094ec <HAL_TIM_ConfigClockSource+0x328>)
 8009476:	f002 ff59 	bl	800c32c <assert_failed>
		assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800947a:	686b      	ldr	r3, [r5, #4]
 800947c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009480:	d009      	beq.n	8009496 <HAL_TIM_ConfigClockSource+0x2d2>
 8009482:	b143      	cbz	r3, 8009496 <HAL_TIM_ConfigClockSource+0x2d2>
 8009484:	2b02      	cmp	r3, #2
 8009486:	d006      	beq.n	8009496 <HAL_TIM_ConfigClockSource+0x2d2>
 8009488:	2b0a      	cmp	r3, #10
 800948a:	d004      	beq.n	8009496 <HAL_TIM_ConfigClockSource+0x2d2>
 800948c:	f640 61f5 	movw	r1, #3829	; 0xef5
 8009490:	4816      	ldr	r0, [pc, #88]	; (80094ec <HAL_TIM_ConfigClockSource+0x328>)
 8009492:	f002 ff4b 	bl	800c32c <assert_failed>
		assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8009496:	68ab      	ldr	r3, [r5, #8]
 8009498:	b16b      	cbz	r3, 80094b6 <HAL_TIM_ConfigClockSource+0x2f2>
 800949a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800949e:	d00a      	beq.n	80094b6 <HAL_TIM_ConfigClockSource+0x2f2>
 80094a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094a4:	d007      	beq.n	80094b6 <HAL_TIM_ConfigClockSource+0x2f2>
 80094a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80094aa:	d004      	beq.n	80094b6 <HAL_TIM_ConfigClockSource+0x2f2>
 80094ac:	f640 61f6 	movw	r1, #3830	; 0xef6
 80094b0:	480e      	ldr	r0, [pc, #56]	; (80094ec <HAL_TIM_ConfigClockSource+0x328>)
 80094b2:	f002 ff3b 	bl	800c32c <assert_failed>
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80094b6:	68eb      	ldr	r3, [r5, #12]
 80094b8:	2b0f      	cmp	r3, #15
 80094ba:	d80b      	bhi.n	80094d4 <HAL_TIM_ConfigClockSource+0x310>
		TIM_ETR_SetConfig(htim->Instance,
 80094bc:	68eb      	ldr	r3, [r5, #12]
 80094be:	686a      	ldr	r2, [r5, #4]
 80094c0:	68a9      	ldr	r1, [r5, #8]
 80094c2:	6820      	ldr	r0, [r4, #0]
 80094c4:	f7ff fd69 	bl	8008f9a <TIM_ETR_SetConfig>
		tmpsmcr = htim->Instance->SMCR;
 80094c8:	6822      	ldr	r2, [r4, #0]
 80094ca:	6893      	ldr	r3, [r2, #8]
		tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80094cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
		htim->Instance->SMCR = tmpsmcr;
 80094d0:	6093      	str	r3, [r2, #8]
	break;
 80094d2:	e7b3      	b.n	800943c <HAL_TIM_ConfigClockSource+0x278>
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80094d4:	f640 61f7 	movw	r1, #3831	; 0xef7
 80094d8:	4804      	ldr	r0, [pc, #16]	; (80094ec <HAL_TIM_ConfigClockSource+0x328>)
 80094da:	f002 ff27 	bl	800c32c <assert_failed>
 80094de:	e7ed      	b.n	80094bc <HAL_TIM_ConfigClockSource+0x2f8>
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80094e0:	f640 710f 	movw	r1, #3855	; 0xf0f
 80094e4:	4801      	ldr	r0, [pc, #4]	; (80094ec <HAL_TIM_ConfigClockSource+0x328>)
 80094e6:	f002 ff21 	bl	800c32c <assert_failed>
 80094ea:	e772      	b.n	80093d2 <HAL_TIM_ConfigClockSource+0x20e>
 80094ec:	0801e290 	.word	0x0801e290
 80094f0:	40010000 	.word	0x40010000
		assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80094f4:	6823      	ldr	r3, [r4, #0]
 80094f6:	4a69      	ldr	r2, [pc, #420]	; (800969c <HAL_TIM_ConfigClockSource+0x4d8>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d01f      	beq.n	800953c <HAL_TIM_ConfigClockSource+0x378>
 80094fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009500:	d01c      	beq.n	800953c <HAL_TIM_ConfigClockSource+0x378>
 8009502:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8009506:	4293      	cmp	r3, r2
 8009508:	d018      	beq.n	800953c <HAL_TIM_ConfigClockSource+0x378>
 800950a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800950e:	4293      	cmp	r3, r2
 8009510:	d014      	beq.n	800953c <HAL_TIM_ConfigClockSource+0x378>
 8009512:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009516:	4293      	cmp	r3, r2
 8009518:	d010      	beq.n	800953c <HAL_TIM_ConfigClockSource+0x378>
 800951a:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800951e:	4293      	cmp	r3, r2
 8009520:	d00c      	beq.n	800953c <HAL_TIM_ConfigClockSource+0x378>
 8009522:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009526:	4293      	cmp	r3, r2
 8009528:	d008      	beq.n	800953c <HAL_TIM_ConfigClockSource+0x378>
 800952a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800952e:	4293      	cmp	r3, r2
 8009530:	d004      	beq.n	800953c <HAL_TIM_ConfigClockSource+0x378>
 8009532:	f640 711d 	movw	r1, #3869	; 0xf1d
 8009536:	485a      	ldr	r0, [pc, #360]	; (80096a0 <HAL_TIM_ConfigClockSource+0x4dc>)
 8009538:	f002 fef8 	bl	800c32c <assert_failed>
		assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800953c:	686b      	ldr	r3, [r5, #4]
 800953e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009542:	d009      	beq.n	8009558 <HAL_TIM_ConfigClockSource+0x394>
 8009544:	b143      	cbz	r3, 8009558 <HAL_TIM_ConfigClockSource+0x394>
 8009546:	2b02      	cmp	r3, #2
 8009548:	d006      	beq.n	8009558 <HAL_TIM_ConfigClockSource+0x394>
 800954a:	2b0a      	cmp	r3, #10
 800954c:	d004      	beq.n	8009558 <HAL_TIM_ConfigClockSource+0x394>
 800954e:	f44f 6172 	mov.w	r1, #3872	; 0xf20
 8009552:	4853      	ldr	r0, [pc, #332]	; (80096a0 <HAL_TIM_ConfigClockSource+0x4dc>)
 8009554:	f002 feea 	bl	800c32c <assert_failed>
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009558:	68eb      	ldr	r3, [r5, #12]
 800955a:	2b0f      	cmp	r3, #15
 800955c:	d809      	bhi.n	8009572 <HAL_TIM_ConfigClockSource+0x3ae>
		TIM_TI1_ConfigInputStage(htim->Instance,
 800955e:	68ea      	ldr	r2, [r5, #12]
 8009560:	6869      	ldr	r1, [r5, #4]
 8009562:	6820      	ldr	r0, [r4, #0]
 8009564:	f7ff fcea 	bl	8008f3c <TIM_TI1_ConfigInputStage>
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009568:	2150      	movs	r1, #80	; 0x50
 800956a:	6820      	ldr	r0, [r4, #0]
 800956c:	f7ff fd0d 	bl	8008f8a <TIM_ITRx_SetConfig>
	break;
 8009570:	e764      	b.n	800943c <HAL_TIM_ConfigClockSource+0x278>
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009572:	f640 7121 	movw	r1, #3873	; 0xf21
 8009576:	484a      	ldr	r0, [pc, #296]	; (80096a0 <HAL_TIM_ConfigClockSource+0x4dc>)
 8009578:	f002 fed8 	bl	800c32c <assert_failed>
 800957c:	e7ef      	b.n	800955e <HAL_TIM_ConfigClockSource+0x39a>
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800957e:	f640 712f 	movw	r1, #3887	; 0xf2f
 8009582:	4847      	ldr	r0, [pc, #284]	; (80096a0 <HAL_TIM_ConfigClockSource+0x4dc>)
 8009584:	f002 fed2 	bl	800c32c <assert_failed>
 8009588:	e68a      	b.n	80092a0 <HAL_TIM_ConfigClockSource+0xdc>
		assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800958a:	6823      	ldr	r3, [r4, #0]
 800958c:	4a43      	ldr	r2, [pc, #268]	; (800969c <HAL_TIM_ConfigClockSource+0x4d8>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d01f      	beq.n	80095d2 <HAL_TIM_ConfigClockSource+0x40e>
 8009592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009596:	d01c      	beq.n	80095d2 <HAL_TIM_ConfigClockSource+0x40e>
 8009598:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800959c:	4293      	cmp	r3, r2
 800959e:	d018      	beq.n	80095d2 <HAL_TIM_ConfigClockSource+0x40e>
 80095a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d014      	beq.n	80095d2 <HAL_TIM_ConfigClockSource+0x40e>
 80095a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d010      	beq.n	80095d2 <HAL_TIM_ConfigClockSource+0x40e>
 80095b0:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d00c      	beq.n	80095d2 <HAL_TIM_ConfigClockSource+0x40e>
 80095b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80095bc:	4293      	cmp	r3, r2
 80095be:	d008      	beq.n	80095d2 <HAL_TIM_ConfigClockSource+0x40e>
 80095c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d004      	beq.n	80095d2 <HAL_TIM_ConfigClockSource+0x40e>
 80095c8:	f640 7139 	movw	r1, #3897	; 0xf39
 80095cc:	4834      	ldr	r0, [pc, #208]	; (80096a0 <HAL_TIM_ConfigClockSource+0x4dc>)
 80095ce:	f002 fead 	bl	800c32c <assert_failed>
		assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80095d2:	686b      	ldr	r3, [r5, #4]
 80095d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095d8:	d009      	beq.n	80095ee <HAL_TIM_ConfigClockSource+0x42a>
 80095da:	b143      	cbz	r3, 80095ee <HAL_TIM_ConfigClockSource+0x42a>
 80095dc:	2b02      	cmp	r3, #2
 80095de:	d006      	beq.n	80095ee <HAL_TIM_ConfigClockSource+0x42a>
 80095e0:	2b0a      	cmp	r3, #10
 80095e2:	d004      	beq.n	80095ee <HAL_TIM_ConfigClockSource+0x42a>
 80095e4:	f640 713c 	movw	r1, #3900	; 0xf3c
 80095e8:	482d      	ldr	r0, [pc, #180]	; (80096a0 <HAL_TIM_ConfigClockSource+0x4dc>)
 80095ea:	f002 fe9f 	bl	800c32c <assert_failed>
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80095ee:	68eb      	ldr	r3, [r5, #12]
 80095f0:	2b0f      	cmp	r3, #15
 80095f2:	d809      	bhi.n	8009608 <HAL_TIM_ConfigClockSource+0x444>
		TIM_TI1_ConfigInputStage(htim->Instance,
 80095f4:	68ea      	ldr	r2, [r5, #12]
 80095f6:	6869      	ldr	r1, [r5, #4]
 80095f8:	6820      	ldr	r0, [r4, #0]
 80095fa:	f7ff fc9f 	bl	8008f3c <TIM_TI1_ConfigInputStage>
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80095fe:	2140      	movs	r1, #64	; 0x40
 8009600:	6820      	ldr	r0, [r4, #0]
 8009602:	f7ff fcc2 	bl	8008f8a <TIM_ITRx_SetConfig>
	break;
 8009606:	e719      	b.n	800943c <HAL_TIM_ConfigClockSource+0x278>
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009608:	f640 713d 	movw	r1, #3901	; 0xf3d
 800960c:	4824      	ldr	r0, [pc, #144]	; (80096a0 <HAL_TIM_ConfigClockSource+0x4dc>)
 800960e:	f002 fe8d 	bl	800c32c <assert_failed>
 8009612:	e7ef      	b.n	80095f4 <HAL_TIM_ConfigClockSource+0x430>
		assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8009614:	6823      	ldr	r3, [r4, #0]
 8009616:	4a21      	ldr	r2, [pc, #132]	; (800969c <HAL_TIM_ConfigClockSource+0x4d8>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d017      	beq.n	800964c <HAL_TIM_ConfigClockSource+0x488>
 800961c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009620:	d014      	beq.n	800964c <HAL_TIM_ConfigClockSource+0x488>
 8009622:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8009626:	4293      	cmp	r3, r2
 8009628:	d010      	beq.n	800964c <HAL_TIM_ConfigClockSource+0x488>
 800962a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800962e:	4293      	cmp	r3, r2
 8009630:	d00c      	beq.n	800964c <HAL_TIM_ConfigClockSource+0x488>
 8009632:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009636:	4293      	cmp	r3, r2
 8009638:	d008      	beq.n	800964c <HAL_TIM_ConfigClockSource+0x488>
 800963a:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800963e:	4293      	cmp	r3, r2
 8009640:	d004      	beq.n	800964c <HAL_TIM_ConfigClockSource+0x488>
 8009642:	f640 714d 	movw	r1, #3917	; 0xf4d
 8009646:	4816      	ldr	r0, [pc, #88]	; (80096a0 <HAL_TIM_ConfigClockSource+0x4dc>)
 8009648:	f002 fe70 	bl	800c32c <assert_failed>
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 800964c:	2110      	movs	r1, #16
 800964e:	6820      	ldr	r0, [r4, #0]
 8009650:	f7ff fc9b 	bl	8008f8a <TIM_ITRx_SetConfig>
	break;
 8009654:	e6f2      	b.n	800943c <HAL_TIM_ConfigClockSource+0x278>
		assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8009656:	6823      	ldr	r3, [r4, #0]
 8009658:	4a10      	ldr	r2, [pc, #64]	; (800969c <HAL_TIM_ConfigClockSource+0x4d8>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d017      	beq.n	800968e <HAL_TIM_ConfigClockSource+0x4ca>
 800965e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009662:	d014      	beq.n	800968e <HAL_TIM_ConfigClockSource+0x4ca>
 8009664:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8009668:	4293      	cmp	r3, r2
 800966a:	d010      	beq.n	800968e <HAL_TIM_ConfigClockSource+0x4ca>
 800966c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009670:	4293      	cmp	r3, r2
 8009672:	d00c      	beq.n	800968e <HAL_TIM_ConfigClockSource+0x4ca>
 8009674:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009678:	4293      	cmp	r3, r2
 800967a:	d008      	beq.n	800968e <HAL_TIM_ConfigClockSource+0x4ca>
 800967c:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8009680:	4293      	cmp	r3, r2
 8009682:	d004      	beq.n	800968e <HAL_TIM_ConfigClockSource+0x4ca>
 8009684:	f640 7153 	movw	r1, #3923	; 0xf53
 8009688:	4805      	ldr	r0, [pc, #20]	; (80096a0 <HAL_TIM_ConfigClockSource+0x4dc>)
 800968a:	f002 fe4f 	bl	800c32c <assert_failed>
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 800968e:	2120      	movs	r1, #32
 8009690:	6820      	ldr	r0, [r4, #0]
 8009692:	f7ff fc7a 	bl	8008f8a <TIM_ITRx_SetConfig>
	break;
 8009696:	e6d1      	b.n	800943c <HAL_TIM_ConfigClockSource+0x278>
	__HAL_LOCK(htim);
 8009698:	2002      	movs	r0, #2
}
 800969a:	bd38      	pop	{r3, r4, r5, pc}
 800969c:	40010000 	.word	0x40010000
 80096a0:	0801e290 	.word	0x0801e290

080096a4 <HAL_TIM_PeriodElapsedCallback>:
{
 80096a4:	4770      	bx	lr

080096a6 <HAL_TIM_OC_DelayElapsedCallback>:
{
 80096a6:	4770      	bx	lr

080096a8 <HAL_TIM_IC_CaptureCallback>:
{
 80096a8:	4770      	bx	lr

080096aa <HAL_TIM_PWM_PulseFinishedCallback>:
{
 80096aa:	4770      	bx	lr

080096ac <HAL_TIM_TriggerCallback>:
{
 80096ac:	4770      	bx	lr

080096ae <HAL_TIM_IRQHandler>:
{
 80096ae:	b510      	push	{r4, lr}
 80096b0:	4604      	mov	r4, r0
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET) {
 80096b2:	6803      	ldr	r3, [r0, #0]
 80096b4:	691a      	ldr	r2, [r3, #16]
 80096b6:	f012 0f02 	tst.w	r2, #2
 80096ba:	d011      	beq.n	80096e0 <HAL_TIM_IRQHandler+0x32>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET) {
 80096bc:	68da      	ldr	r2, [r3, #12]
 80096be:	f012 0f02 	tst.w	r2, #2
 80096c2:	d00d      	beq.n	80096e0 <HAL_TIM_IRQHandler+0x32>
				__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80096c4:	f06f 0202 	mvn.w	r2, #2
 80096c8:	611a      	str	r2, [r3, #16]
				htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80096ca:	2301      	movs	r3, #1
 80096cc:	7603      	strb	r3, [r0, #24]
				if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U) {
 80096ce:	6803      	ldr	r3, [r0, #0]
 80096d0:	699b      	ldr	r3, [r3, #24]
 80096d2:	f013 0f03 	tst.w	r3, #3
 80096d6:	d070      	beq.n	80097ba <HAL_TIM_IRQHandler+0x10c>
					HAL_TIM_IC_CaptureCallback(htim);
 80096d8:	f7ff ffe6 	bl	80096a8 <HAL_TIM_IC_CaptureCallback>
				htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096dc:	2300      	movs	r3, #0
 80096de:	7623      	strb	r3, [r4, #24]
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET) {
 80096e0:	6823      	ldr	r3, [r4, #0]
 80096e2:	691a      	ldr	r2, [r3, #16]
 80096e4:	f012 0f04 	tst.w	r2, #4
 80096e8:	d012      	beq.n	8009710 <HAL_TIM_IRQHandler+0x62>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET) {
 80096ea:	68da      	ldr	r2, [r3, #12]
 80096ec:	f012 0f04 	tst.w	r2, #4
 80096f0:	d00e      	beq.n	8009710 <HAL_TIM_IRQHandler+0x62>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80096f2:	f06f 0204 	mvn.w	r2, #4
 80096f6:	611a      	str	r2, [r3, #16]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80096f8:	2302      	movs	r3, #2
 80096fa:	7623      	strb	r3, [r4, #24]
			if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U) {
 80096fc:	6823      	ldr	r3, [r4, #0]
 80096fe:	699b      	ldr	r3, [r3, #24]
 8009700:	f413 7f40 	tst.w	r3, #768	; 0x300
 8009704:	d05f      	beq.n	80097c6 <HAL_TIM_IRQHandler+0x118>
				HAL_TIM_IC_CaptureCallback(htim);
 8009706:	4620      	mov	r0, r4
 8009708:	f7ff ffce 	bl	80096a8 <HAL_TIM_IC_CaptureCallback>
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800970c:	2300      	movs	r3, #0
 800970e:	7623      	strb	r3, [r4, #24]
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET) {
 8009710:	6823      	ldr	r3, [r4, #0]
 8009712:	691a      	ldr	r2, [r3, #16]
 8009714:	f012 0f08 	tst.w	r2, #8
 8009718:	d012      	beq.n	8009740 <HAL_TIM_IRQHandler+0x92>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET) {
 800971a:	68da      	ldr	r2, [r3, #12]
 800971c:	f012 0f08 	tst.w	r2, #8
 8009720:	d00e      	beq.n	8009740 <HAL_TIM_IRQHandler+0x92>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009722:	f06f 0208 	mvn.w	r2, #8
 8009726:	611a      	str	r2, [r3, #16]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009728:	2304      	movs	r3, #4
 800972a:	7623      	strb	r3, [r4, #24]
			if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U) {
 800972c:	6823      	ldr	r3, [r4, #0]
 800972e:	69db      	ldr	r3, [r3, #28]
 8009730:	f013 0f03 	tst.w	r3, #3
 8009734:	d04e      	beq.n	80097d4 <HAL_TIM_IRQHandler+0x126>
				HAL_TIM_IC_CaptureCallback(htim);
 8009736:	4620      	mov	r0, r4
 8009738:	f7ff ffb6 	bl	80096a8 <HAL_TIM_IC_CaptureCallback>
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800973c:	2300      	movs	r3, #0
 800973e:	7623      	strb	r3, [r4, #24]
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET) {
 8009740:	6823      	ldr	r3, [r4, #0]
 8009742:	691a      	ldr	r2, [r3, #16]
 8009744:	f012 0f10 	tst.w	r2, #16
 8009748:	d012      	beq.n	8009770 <HAL_TIM_IRQHandler+0xc2>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET) {
 800974a:	68da      	ldr	r2, [r3, #12]
 800974c:	f012 0f10 	tst.w	r2, #16
 8009750:	d00e      	beq.n	8009770 <HAL_TIM_IRQHandler+0xc2>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009752:	f06f 0210 	mvn.w	r2, #16
 8009756:	611a      	str	r2, [r3, #16]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009758:	2308      	movs	r3, #8
 800975a:	7623      	strb	r3, [r4, #24]
			if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U) {
 800975c:	6823      	ldr	r3, [r4, #0]
 800975e:	69db      	ldr	r3, [r3, #28]
 8009760:	f413 7f40 	tst.w	r3, #768	; 0x300
 8009764:	d03d      	beq.n	80097e2 <HAL_TIM_IRQHandler+0x134>
				HAL_TIM_IC_CaptureCallback(htim);
 8009766:	4620      	mov	r0, r4
 8009768:	f7ff ff9e 	bl	80096a8 <HAL_TIM_IC_CaptureCallback>
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800976c:	2300      	movs	r3, #0
 800976e:	7623      	strb	r3, [r4, #24]
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET) {
 8009770:	6823      	ldr	r3, [r4, #0]
 8009772:	691a      	ldr	r2, [r3, #16]
 8009774:	f012 0f01 	tst.w	r2, #1
 8009778:	d003      	beq.n	8009782 <HAL_TIM_IRQHandler+0xd4>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET) {
 800977a:	68da      	ldr	r2, [r3, #12]
 800977c:	f012 0f01 	tst.w	r2, #1
 8009780:	d136      	bne.n	80097f0 <HAL_TIM_IRQHandler+0x142>
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET) {
 8009782:	6823      	ldr	r3, [r4, #0]
 8009784:	691a      	ldr	r2, [r3, #16]
 8009786:	f012 0f80 	tst.w	r2, #128	; 0x80
 800978a:	d003      	beq.n	8009794 <HAL_TIM_IRQHandler+0xe6>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET) {
 800978c:	68da      	ldr	r2, [r3, #12]
 800978e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8009792:	d134      	bne.n	80097fe <HAL_TIM_IRQHandler+0x150>
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET) {
 8009794:	6823      	ldr	r3, [r4, #0]
 8009796:	691a      	ldr	r2, [r3, #16]
 8009798:	f012 0f40 	tst.w	r2, #64	; 0x40
 800979c:	d003      	beq.n	80097a6 <HAL_TIM_IRQHandler+0xf8>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET) {
 800979e:	68da      	ldr	r2, [r3, #12]
 80097a0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80097a4:	d132      	bne.n	800980c <HAL_TIM_IRQHandler+0x15e>
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET) {
 80097a6:	6823      	ldr	r3, [r4, #0]
 80097a8:	691a      	ldr	r2, [r3, #16]
 80097aa:	f012 0f20 	tst.w	r2, #32
 80097ae:	d003      	beq.n	80097b8 <HAL_TIM_IRQHandler+0x10a>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET) {
 80097b0:	68da      	ldr	r2, [r3, #12]
 80097b2:	f012 0f20 	tst.w	r2, #32
 80097b6:	d130      	bne.n	800981a <HAL_TIM_IRQHandler+0x16c>
 80097b8:	bd10      	pop	{r4, pc}
					HAL_TIM_OC_DelayElapsedCallback(htim);
 80097ba:	f7ff ff74 	bl	80096a6 <HAL_TIM_OC_DelayElapsedCallback>
					HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097be:	4620      	mov	r0, r4
 80097c0:	f7ff ff73 	bl	80096aa <HAL_TIM_PWM_PulseFinishedCallback>
 80097c4:	e78a      	b.n	80096dc <HAL_TIM_IRQHandler+0x2e>
				HAL_TIM_OC_DelayElapsedCallback(htim);
 80097c6:	4620      	mov	r0, r4
 80097c8:	f7ff ff6d 	bl	80096a6 <HAL_TIM_OC_DelayElapsedCallback>
				HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097cc:	4620      	mov	r0, r4
 80097ce:	f7ff ff6c 	bl	80096aa <HAL_TIM_PWM_PulseFinishedCallback>
 80097d2:	e79b      	b.n	800970c <HAL_TIM_IRQHandler+0x5e>
				HAL_TIM_OC_DelayElapsedCallback(htim);
 80097d4:	4620      	mov	r0, r4
 80097d6:	f7ff ff66 	bl	80096a6 <HAL_TIM_OC_DelayElapsedCallback>
				HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097da:	4620      	mov	r0, r4
 80097dc:	f7ff ff65 	bl	80096aa <HAL_TIM_PWM_PulseFinishedCallback>
 80097e0:	e7ac      	b.n	800973c <HAL_TIM_IRQHandler+0x8e>
				HAL_TIM_OC_DelayElapsedCallback(htim);
 80097e2:	4620      	mov	r0, r4
 80097e4:	f7ff ff5f 	bl	80096a6 <HAL_TIM_OC_DelayElapsedCallback>
				HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097e8:	4620      	mov	r0, r4
 80097ea:	f7ff ff5e 	bl	80096aa <HAL_TIM_PWM_PulseFinishedCallback>
 80097ee:	e7bd      	b.n	800976c <HAL_TIM_IRQHandler+0xbe>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80097f0:	f06f 0201 	mvn.w	r2, #1
 80097f4:	611a      	str	r2, [r3, #16]
			HAL_TIM_PeriodElapsedCallback(htim);
 80097f6:	4620      	mov	r0, r4
 80097f8:	f7ff ff54 	bl	80096a4 <HAL_TIM_PeriodElapsedCallback>
 80097fc:	e7c1      	b.n	8009782 <HAL_TIM_IRQHandler+0xd4>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80097fe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009802:	611a      	str	r2, [r3, #16]
			HAL_TIMEx_BreakCallback(htim);
 8009804:	4620      	mov	r0, r4
 8009806:	f000 fbf4 	bl	8009ff2 <HAL_TIMEx_BreakCallback>
 800980a:	e7c3      	b.n	8009794 <HAL_TIM_IRQHandler+0xe6>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800980c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009810:	611a      	str	r2, [r3, #16]
			HAL_TIM_TriggerCallback(htim);
 8009812:	4620      	mov	r0, r4
 8009814:	f7ff ff4a 	bl	80096ac <HAL_TIM_TriggerCallback>
 8009818:	e7c5      	b.n	80097a6 <HAL_TIM_IRQHandler+0xf8>
			__HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800981a:	f06f 0220 	mvn.w	r2, #32
 800981e:	611a      	str	r2, [r3, #16]
			HAL_TIMEx_CommutationCallback(htim);
 8009820:	4620      	mov	r0, r4
 8009822:	f000 fbe5 	bl	8009ff0 <HAL_TIMEx_CommutationCallback>
}
 8009826:	e7c7      	b.n	80097b8 <HAL_TIM_IRQHandler+0x10a>

08009828 <TIM_Base_SetConfig>:
	tmpcr1 = TIMx->CR1;
 8009828:	6803      	ldr	r3, [r0, #0]
	if (IS_TIM_CC3_INSTANCE(TIMx) != RESET) {
 800982a:	4a32      	ldr	r2, [pc, #200]	; (80098f4 <TIM_Base_SetConfig+0xcc>)
 800982c:	4290      	cmp	r0, r2
 800982e:	d045      	beq.n	80098bc <TIM_Base_SetConfig+0x94>
 8009830:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009834:	d044      	beq.n	80098c0 <TIM_Base_SetConfig+0x98>
 8009836:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800983a:	4290      	cmp	r0, r2
 800983c:	d042      	beq.n	80098c4 <TIM_Base_SetConfig+0x9c>
 800983e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009842:	4290      	cmp	r0, r2
 8009844:	d040      	beq.n	80098c8 <TIM_Base_SetConfig+0xa0>
 8009846:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800984a:	4290      	cmp	r0, r2
 800984c:	d034      	beq.n	80098b8 <TIM_Base_SetConfig+0x90>
 800984e:	2200      	movs	r2, #0
 8009850:	b11a      	cbz	r2, 800985a <TIM_Base_SetConfig+0x32>
		tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
		tmpcr1 |= Structure->CounterMode;
 8009856:	684a      	ldr	r2, [r1, #4]
 8009858:	4313      	orrs	r3, r2
	if (IS_TIM_CC1_INSTANCE(TIMx) != RESET) {
 800985a:	4a26      	ldr	r2, [pc, #152]	; (80098f4 <TIM_Base_SetConfig+0xcc>)
 800985c:	4290      	cmp	r0, r2
 800985e:	d037      	beq.n	80098d0 <TIM_Base_SetConfig+0xa8>
 8009860:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009864:	d036      	beq.n	80098d4 <TIM_Base_SetConfig+0xac>
 8009866:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800986a:	4290      	cmp	r0, r2
 800986c:	d034      	beq.n	80098d8 <TIM_Base_SetConfig+0xb0>
 800986e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009872:	4290      	cmp	r0, r2
 8009874:	d032      	beq.n	80098dc <TIM_Base_SetConfig+0xb4>
 8009876:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800987a:	4290      	cmp	r0, r2
 800987c:	d030      	beq.n	80098e0 <TIM_Base_SetConfig+0xb8>
 800987e:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8009882:	4290      	cmp	r0, r2
 8009884:	d02e      	beq.n	80098e4 <TIM_Base_SetConfig+0xbc>
 8009886:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800988a:	4290      	cmp	r0, r2
 800988c:	d02c      	beq.n	80098e8 <TIM_Base_SetConfig+0xc0>
 800988e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009892:	4290      	cmp	r0, r2
 8009894:	d01a      	beq.n	80098cc <TIM_Base_SetConfig+0xa4>
 8009896:	2200      	movs	r2, #0
 8009898:	b11a      	cbz	r2, 80098a2 <TIM_Base_SetConfig+0x7a>
		tmpcr1 &= ~TIM_CR1_CKD;
 800989a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
		tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800989e:	68ca      	ldr	r2, [r1, #12]
 80098a0:	4313      	orrs	r3, r2
	TIMx->CR1 = tmpcr1;
 80098a2:	6003      	str	r3, [r0, #0]
	TIMx->ARR = (uint32_t)Structure->Period;
 80098a4:	688b      	ldr	r3, [r1, #8]
 80098a6:	62c3      	str	r3, [r0, #44]	; 0x2c
	TIMx->PSC = (uint32_t)Structure->Prescaler;
 80098a8:	680b      	ldr	r3, [r1, #0]
 80098aa:	6283      	str	r3, [r0, #40]	; 0x28
	if (IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET) {
 80098ac:	4b11      	ldr	r3, [pc, #68]	; (80098f4 <TIM_Base_SetConfig+0xcc>)
 80098ae:	4298      	cmp	r0, r3
 80098b0:	d01c      	beq.n	80098ec <TIM_Base_SetConfig+0xc4>
	TIMx->EGR = TIM_EGR_UG;
 80098b2:	2301      	movs	r3, #1
 80098b4:	6143      	str	r3, [r0, #20]
 80098b6:	4770      	bx	lr
	if (IS_TIM_CC3_INSTANCE(TIMx) != RESET) {
 80098b8:	2201      	movs	r2, #1
 80098ba:	e7c9      	b.n	8009850 <TIM_Base_SetConfig+0x28>
 80098bc:	2201      	movs	r2, #1
 80098be:	e7c7      	b.n	8009850 <TIM_Base_SetConfig+0x28>
 80098c0:	2201      	movs	r2, #1
 80098c2:	e7c5      	b.n	8009850 <TIM_Base_SetConfig+0x28>
 80098c4:	2201      	movs	r2, #1
 80098c6:	e7c3      	b.n	8009850 <TIM_Base_SetConfig+0x28>
 80098c8:	2201      	movs	r2, #1
 80098ca:	e7c1      	b.n	8009850 <TIM_Base_SetConfig+0x28>
	if (IS_TIM_CC1_INSTANCE(TIMx) != RESET) {
 80098cc:	2201      	movs	r2, #1
 80098ce:	e7e3      	b.n	8009898 <TIM_Base_SetConfig+0x70>
 80098d0:	2201      	movs	r2, #1
 80098d2:	e7e1      	b.n	8009898 <TIM_Base_SetConfig+0x70>
 80098d4:	2201      	movs	r2, #1
 80098d6:	e7df      	b.n	8009898 <TIM_Base_SetConfig+0x70>
 80098d8:	2201      	movs	r2, #1
 80098da:	e7dd      	b.n	8009898 <TIM_Base_SetConfig+0x70>
 80098dc:	2201      	movs	r2, #1
 80098de:	e7db      	b.n	8009898 <TIM_Base_SetConfig+0x70>
 80098e0:	2201      	movs	r2, #1
 80098e2:	e7d9      	b.n	8009898 <TIM_Base_SetConfig+0x70>
 80098e4:	2201      	movs	r2, #1
 80098e6:	e7d7      	b.n	8009898 <TIM_Base_SetConfig+0x70>
 80098e8:	2201      	movs	r2, #1
 80098ea:	e7d5      	b.n	8009898 <TIM_Base_SetConfig+0x70>
		TIMx->RCR = Structure->RepetitionCounter;
 80098ec:	690b      	ldr	r3, [r1, #16]
 80098ee:	6303      	str	r3, [r0, #48]	; 0x30
 80098f0:	e7df      	b.n	80098b2 <TIM_Base_SetConfig+0x8a>
 80098f2:	bf00      	nop
 80098f4:	40010000 	.word	0x40010000

080098f8 <HAL_TIM_Base_Init>:
	if (htim == NULL) {
 80098f8:	2800      	cmp	r0, #0
 80098fa:	d053      	beq.n	80099a4 <HAL_TIM_Base_Init+0xac>
{
 80098fc:	b510      	push	{r4, lr}
 80098fe:	4604      	mov	r4, r0
	assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009900:	6803      	ldr	r3, [r0, #0]
 8009902:	4a29      	ldr	r2, [pc, #164]	; (80099a8 <HAL_TIM_Base_Init+0xb0>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d01e      	beq.n	8009946 <HAL_TIM_Base_Init+0x4e>
 8009908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800990c:	d01b      	beq.n	8009946 <HAL_TIM_Base_Init+0x4e>
 800990e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8009912:	4293      	cmp	r3, r2
 8009914:	d017      	beq.n	8009946 <HAL_TIM_Base_Init+0x4e>
 8009916:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800991a:	4293      	cmp	r3, r2
 800991c:	d013      	beq.n	8009946 <HAL_TIM_Base_Init+0x4e>
 800991e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009922:	4293      	cmp	r3, r2
 8009924:	d00f      	beq.n	8009946 <HAL_TIM_Base_Init+0x4e>
 8009926:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800992a:	4293      	cmp	r3, r2
 800992c:	d00b      	beq.n	8009946 <HAL_TIM_Base_Init+0x4e>
 800992e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009932:	4293      	cmp	r3, r2
 8009934:	d007      	beq.n	8009946 <HAL_TIM_Base_Init+0x4e>
 8009936:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800993a:	4293      	cmp	r3, r2
 800993c:	d003      	beq.n	8009946 <HAL_TIM_Base_Init+0x4e>
 800993e:	21d6      	movs	r1, #214	; 0xd6
 8009940:	481a      	ldr	r0, [pc, #104]	; (80099ac <HAL_TIM_Base_Init+0xb4>)
 8009942:	f002 fcf3 	bl	800c32c <assert_failed>
	assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8009946:	68a3      	ldr	r3, [r4, #8]
 8009948:	b15b      	cbz	r3, 8009962 <HAL_TIM_Base_Init+0x6a>
 800994a:	2b10      	cmp	r3, #16
 800994c:	d009      	beq.n	8009962 <HAL_TIM_Base_Init+0x6a>
 800994e:	2b20      	cmp	r3, #32
 8009950:	d007      	beq.n	8009962 <HAL_TIM_Base_Init+0x6a>
 8009952:	2b40      	cmp	r3, #64	; 0x40
 8009954:	d005      	beq.n	8009962 <HAL_TIM_Base_Init+0x6a>
 8009956:	2b60      	cmp	r3, #96	; 0x60
 8009958:	d003      	beq.n	8009962 <HAL_TIM_Base_Init+0x6a>
 800995a:	21d7      	movs	r1, #215	; 0xd7
 800995c:	4813      	ldr	r0, [pc, #76]	; (80099ac <HAL_TIM_Base_Init+0xb4>)
 800995e:	f002 fce5 	bl	800c32c <assert_failed>
	assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8009962:	6923      	ldr	r3, [r4, #16]
 8009964:	b14b      	cbz	r3, 800997a <HAL_TIM_Base_Init+0x82>
 8009966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800996a:	d006      	beq.n	800997a <HAL_TIM_Base_Init+0x82>
 800996c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009970:	d003      	beq.n	800997a <HAL_TIM_Base_Init+0x82>
 8009972:	21d8      	movs	r1, #216	; 0xd8
 8009974:	480d      	ldr	r0, [pc, #52]	; (80099ac <HAL_TIM_Base_Init+0xb4>)
 8009976:	f002 fcd9 	bl	800c32c <assert_failed>
	if (htim->State == HAL_TIM_STATE_RESET) {
 800997a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800997e:	b15b      	cbz	r3, 8009998 <HAL_TIM_Base_Init+0xa0>
	htim->State = HAL_TIM_STATE_BUSY;
 8009980:	2302      	movs	r3, #2
 8009982:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009986:	1d21      	adds	r1, r4, #4
 8009988:	6820      	ldr	r0, [r4, #0]
 800998a:	f7ff ff4d 	bl	8009828 <TIM_Base_SetConfig>
	htim->State = HAL_TIM_STATE_READY;
 800998e:	2301      	movs	r3, #1
 8009990:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	return HAL_OK;
 8009994:	2000      	movs	r0, #0
 8009996:	bd10      	pop	{r4, pc}
		htim->Lock = HAL_UNLOCKED;
 8009998:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		HAL_TIM_Base_MspInit(htim);
 800999c:	4620      	mov	r0, r4
 800999e:	f002 fed7 	bl	800c750 <HAL_TIM_Base_MspInit>
 80099a2:	e7ed      	b.n	8009980 <HAL_TIM_Base_Init+0x88>
		return HAL_ERROR;
 80099a4:	2001      	movs	r0, #1
 80099a6:	4770      	bx	lr
 80099a8:	40010000 	.word	0x40010000
 80099ac:	0801e290 	.word	0x0801e290

080099b0 <HAL_TIM_PWM_Init>:
	if (htim == NULL) {
 80099b0:	2800      	cmp	r0, #0
 80099b2:	d056      	beq.n	8009a62 <HAL_TIM_PWM_Init+0xb2>
{
 80099b4:	b510      	push	{r4, lr}
 80099b6:	4604      	mov	r4, r0
	assert_param(IS_TIM_INSTANCE(htim->Instance));
 80099b8:	6803      	ldr	r3, [r0, #0]
 80099ba:	4a2b      	ldr	r2, [pc, #172]	; (8009a68 <HAL_TIM_PWM_Init+0xb8>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d01f      	beq.n	8009a00 <HAL_TIM_PWM_Init+0x50>
 80099c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099c4:	d01c      	beq.n	8009a00 <HAL_TIM_PWM_Init+0x50>
 80099c6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d018      	beq.n	8009a00 <HAL_TIM_PWM_Init+0x50>
 80099ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d014      	beq.n	8009a00 <HAL_TIM_PWM_Init+0x50>
 80099d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80099da:	4293      	cmp	r3, r2
 80099dc:	d010      	beq.n	8009a00 <HAL_TIM_PWM_Init+0x50>
 80099de:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d00c      	beq.n	8009a00 <HAL_TIM_PWM_Init+0x50>
 80099e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d008      	beq.n	8009a00 <HAL_TIM_PWM_Init+0x50>
 80099ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d004      	beq.n	8009a00 <HAL_TIM_PWM_Init+0x50>
 80099f6:	f240 31d6 	movw	r1, #982	; 0x3d6
 80099fa:	481c      	ldr	r0, [pc, #112]	; (8009a6c <HAL_TIM_PWM_Init+0xbc>)
 80099fc:	f002 fc96 	bl	800c32c <assert_failed>
	assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8009a00:	68a3      	ldr	r3, [r4, #8]
 8009a02:	b163      	cbz	r3, 8009a1e <HAL_TIM_PWM_Init+0x6e>
 8009a04:	2b10      	cmp	r3, #16
 8009a06:	d00a      	beq.n	8009a1e <HAL_TIM_PWM_Init+0x6e>
 8009a08:	2b20      	cmp	r3, #32
 8009a0a:	d008      	beq.n	8009a1e <HAL_TIM_PWM_Init+0x6e>
 8009a0c:	2b40      	cmp	r3, #64	; 0x40
 8009a0e:	d006      	beq.n	8009a1e <HAL_TIM_PWM_Init+0x6e>
 8009a10:	2b60      	cmp	r3, #96	; 0x60
 8009a12:	d004      	beq.n	8009a1e <HAL_TIM_PWM_Init+0x6e>
 8009a14:	f240 31d7 	movw	r1, #983	; 0x3d7
 8009a18:	4814      	ldr	r0, [pc, #80]	; (8009a6c <HAL_TIM_PWM_Init+0xbc>)
 8009a1a:	f002 fc87 	bl	800c32c <assert_failed>
	assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8009a1e:	6923      	ldr	r3, [r4, #16]
 8009a20:	b153      	cbz	r3, 8009a38 <HAL_TIM_PWM_Init+0x88>
 8009a22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a26:	d007      	beq.n	8009a38 <HAL_TIM_PWM_Init+0x88>
 8009a28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a2c:	d004      	beq.n	8009a38 <HAL_TIM_PWM_Init+0x88>
 8009a2e:	f44f 7176 	mov.w	r1, #984	; 0x3d8
 8009a32:	480e      	ldr	r0, [pc, #56]	; (8009a6c <HAL_TIM_PWM_Init+0xbc>)
 8009a34:	f002 fc7a 	bl	800c32c <assert_failed>
	if (htim->State == HAL_TIM_STATE_RESET) {
 8009a38:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8009a3c:	b15b      	cbz	r3, 8009a56 <HAL_TIM_PWM_Init+0xa6>
	htim->State = HAL_TIM_STATE_BUSY;
 8009a3e:	2302      	movs	r3, #2
 8009a40:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a44:	1d21      	adds	r1, r4, #4
 8009a46:	6820      	ldr	r0, [r4, #0]
 8009a48:	f7ff feee 	bl	8009828 <TIM_Base_SetConfig>
	htim->State = HAL_TIM_STATE_READY;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	return HAL_OK;
 8009a52:	2000      	movs	r0, #0
 8009a54:	bd10      	pop	{r4, pc}
		htim->Lock = HAL_UNLOCKED;
 8009a56:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		HAL_TIM_PWM_MspInit(htim);
 8009a5a:	4620      	mov	r0, r4
 8009a5c:	f7ff fb6a 	bl	8009134 <HAL_TIM_PWM_MspInit>
 8009a60:	e7ed      	b.n	8009a3e <HAL_TIM_PWM_Init+0x8e>
		return HAL_ERROR;
 8009a62:	2001      	movs	r0, #1
 8009a64:	4770      	bx	lr
 8009a66:	bf00      	nop
 8009a68:	40010000 	.word	0x40010000
 8009a6c:	0801e290 	.word	0x0801e290

08009a70 <TIM_OC2_SetConfig>:
{
 8009a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a74:	4604      	mov	r4, r0
 8009a76:	460f      	mov	r7, r1
	TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a78:	6a03      	ldr	r3, [r0, #32]
 8009a7a:	f023 0310 	bic.w	r3, r3, #16
 8009a7e:	6203      	str	r3, [r0, #32]
	tmpccer = TIMx->CCER;
 8009a80:	6a05      	ldr	r5, [r0, #32]
	tmpcr2 = TIMx->CR2;
 8009a82:	f8d0 8004 	ldr.w	r8, [r0, #4]
	tmpccmrx = TIMx->CCMR1;
 8009a86:	6986      	ldr	r6, [r0, #24]
	tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009a88:	f426 46e6 	bic.w	r6, r6, #29440	; 0x7300
	tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a8c:	680b      	ldr	r3, [r1, #0]
 8009a8e:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
	tmpccer &= ~TIM_CCER_CC2P;
 8009a92:	f025 0520 	bic.w	r5, r5, #32
	tmpccer |= (OC_Config->OCPolarity << 4U);
 8009a96:	688b      	ldr	r3, [r1, #8]
 8009a98:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
	if (IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET) {
 8009a9c:	4b11      	ldr	r3, [pc, #68]	; (8009ae4 <TIM_OC2_SetConfig+0x74>)
 8009a9e:	4298      	cmp	r0, r3
 8009aa0:	d007      	beq.n	8009ab2 <TIM_OC2_SetConfig+0x42>
	TIMx->CR2 = tmpcr2;
 8009aa2:	f8c4 8004 	str.w	r8, [r4, #4]
	TIMx->CCMR1 = tmpccmrx;
 8009aa6:	61a6      	str	r6, [r4, #24]
	TIMx->CCR2 = OC_Config->Pulse;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	63a3      	str	r3, [r4, #56]	; 0x38
	TIMx->CCER = tmpccer;
 8009aac:	6225      	str	r5, [r4, #32]
 8009aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8009ab2:	68cb      	ldr	r3, [r1, #12]
 8009ab4:	b133      	cbz	r3, 8009ac4 <TIM_OC2_SetConfig+0x54>
 8009ab6:	2b08      	cmp	r3, #8
 8009ab8:	d004      	beq.n	8009ac4 <TIM_OC2_SetConfig+0x54>
 8009aba:	f241 1164 	movw	r1, #4452	; 0x1164
 8009abe:	480a      	ldr	r0, [pc, #40]	; (8009ae8 <TIM_OC2_SetConfig+0x78>)
 8009ac0:	f002 fc34 	bl	800c32c <assert_failed>
		tmpccer &= ~TIM_CCER_CC2NP;
 8009ac4:	f025 0580 	bic.w	r5, r5, #128	; 0x80
		tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
		tmpccer &= ~TIM_CCER_CC2NE;
 8009ace:	f025 0540 	bic.w	r5, r5, #64	; 0x40
		tmpcr2 &= ~TIM_CR2_OIS2N;
 8009ad2:	f428 6840 	bic.w	r8, r8, #3072	; 0xc00
		tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	ea48 0883 	orr.w	r8, r8, r3, lsl #2
		tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009adc:	69bb      	ldr	r3, [r7, #24]
 8009ade:	ea48 0883 	orr.w	r8, r8, r3, lsl #2
 8009ae2:	e7de      	b.n	8009aa2 <TIM_OC2_SetConfig+0x32>
 8009ae4:	40010000 	.word	0x40010000
 8009ae8:	0801e290 	.word	0x0801e290

08009aec <HAL_TIM_PWM_ConfigChannel>:
	__HAL_LOCK(htim);
 8009aec:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8009af0:	2b01      	cmp	r3, #1
 8009af2:	f000 8107 	beq.w	8009d04 <HAL_TIM_PWM_ConfigChannel+0x218>
{
 8009af6:	b570      	push	{r4, r5, r6, lr}
 8009af8:	4616      	mov	r6, r2
 8009afa:	460d      	mov	r5, r1
 8009afc:	4604      	mov	r4, r0
	__HAL_LOCK(htim);
 8009afe:	2301      	movs	r3, #1
 8009b00:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	assert_param(IS_TIM_CHANNELS(Channel));
 8009b04:	b162      	cbz	r2, 8009b20 <HAL_TIM_PWM_ConfigChannel+0x34>
 8009b06:	2a04      	cmp	r2, #4
 8009b08:	d00a      	beq.n	8009b20 <HAL_TIM_PWM_ConfigChannel+0x34>
 8009b0a:	2a08      	cmp	r2, #8
 8009b0c:	d008      	beq.n	8009b20 <HAL_TIM_PWM_ConfigChannel+0x34>
 8009b0e:	2a0c      	cmp	r2, #12
 8009b10:	d006      	beq.n	8009b20 <HAL_TIM_PWM_ConfigChannel+0x34>
 8009b12:	2a18      	cmp	r2, #24
 8009b14:	d004      	beq.n	8009b20 <HAL_TIM_PWM_ConfigChannel+0x34>
 8009b16:	f640 31d4 	movw	r1, #3028	; 0xbd4
 8009b1a:	487b      	ldr	r0, [pc, #492]	; (8009d08 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 8009b1c:	f002 fc06 	bl	800c32c <assert_failed>
	assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8009b20:	682b      	ldr	r3, [r5, #0]
 8009b22:	2b60      	cmp	r3, #96	; 0x60
 8009b24:	d006      	beq.n	8009b34 <HAL_TIM_PWM_ConfigChannel+0x48>
 8009b26:	2b70      	cmp	r3, #112	; 0x70
 8009b28:	d004      	beq.n	8009b34 <HAL_TIM_PWM_ConfigChannel+0x48>
 8009b2a:	f640 31d5 	movw	r1, #3029	; 0xbd5
 8009b2e:	4876      	ldr	r0, [pc, #472]	; (8009d08 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 8009b30:	f002 fbfc 	bl	800c32c <assert_failed>
	assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8009b34:	68ab      	ldr	r3, [r5, #8]
 8009b36:	b133      	cbz	r3, 8009b46 <HAL_TIM_PWM_ConfigChannel+0x5a>
 8009b38:	2b02      	cmp	r3, #2
 8009b3a:	d004      	beq.n	8009b46 <HAL_TIM_PWM_ConfigChannel+0x5a>
 8009b3c:	f640 31d6 	movw	r1, #3030	; 0xbd6
 8009b40:	4871      	ldr	r0, [pc, #452]	; (8009d08 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 8009b42:	f002 fbf3 	bl	800c32c <assert_failed>
	assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8009b46:	692b      	ldr	r3, [r5, #16]
 8009b48:	b133      	cbz	r3, 8009b58 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8009b4a:	2b04      	cmp	r3, #4
 8009b4c:	d004      	beq.n	8009b58 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8009b4e:	f640 31d7 	movw	r1, #3031	; 0xbd7
 8009b52:	486d      	ldr	r0, [pc, #436]	; (8009d08 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 8009b54:	f002 fbea 	bl	800c32c <assert_failed>
	htim->State = HAL_TIM_STATE_BUSY;
 8009b58:	2302      	movs	r3, #2
 8009b5a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	switch (Channel) {
 8009b5e:	2e0c      	cmp	r6, #12
 8009b60:	d83f      	bhi.n	8009be2 <HAL_TIM_PWM_ConfigChannel+0xf6>
 8009b62:	e8df f006 	tbb	[pc, r6]
 8009b66:	3e07      	.short	0x3e07
 8009b68:	3e453e3e 	.word	0x3e453e3e
 8009b6c:	3e763e3e 	.word	0x3e763e3e
 8009b70:	3e3e      	.short	0x3e3e
 8009b72:	a2          	.byte	0xa2
 8009b73:	00          	.byte	0x00
		assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8009b74:	6823      	ldr	r3, [r4, #0]
 8009b76:	4a65      	ldr	r2, [pc, #404]	; (8009d0c <HAL_TIM_PWM_ConfigChannel+0x220>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d01f      	beq.n	8009bbc <HAL_TIM_PWM_ConfigChannel+0xd0>
 8009b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b80:	d01c      	beq.n	8009bbc <HAL_TIM_PWM_ConfigChannel+0xd0>
 8009b82:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d018      	beq.n	8009bbc <HAL_TIM_PWM_ConfigChannel+0xd0>
 8009b8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d014      	beq.n	8009bbc <HAL_TIM_PWM_ConfigChannel+0xd0>
 8009b92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d010      	beq.n	8009bbc <HAL_TIM_PWM_ConfigChannel+0xd0>
 8009b9a:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d00c      	beq.n	8009bbc <HAL_TIM_PWM_ConfigChannel+0xd0>
 8009ba2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d008      	beq.n	8009bbc <HAL_TIM_PWM_ConfigChannel+0xd0>
 8009baa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d004      	beq.n	8009bbc <HAL_TIM_PWM_ConfigChannel+0xd0>
 8009bb2:	f640 31de 	movw	r1, #3038	; 0xbde
 8009bb6:	4854      	ldr	r0, [pc, #336]	; (8009d08 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 8009bb8:	f002 fbb8 	bl	800c32c <assert_failed>
		TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009bbc:	4629      	mov	r1, r5
 8009bbe:	6820      	ldr	r0, [r4, #0]
 8009bc0:	f7ff f992 	bl	8008ee8 <TIM_OC1_SetConfig>
		htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009bc4:	6822      	ldr	r2, [r4, #0]
 8009bc6:	6993      	ldr	r3, [r2, #24]
 8009bc8:	f043 0308 	orr.w	r3, r3, #8
 8009bcc:	6193      	str	r3, [r2, #24]
		htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009bce:	6822      	ldr	r2, [r4, #0]
 8009bd0:	6993      	ldr	r3, [r2, #24]
 8009bd2:	f023 0304 	bic.w	r3, r3, #4
 8009bd6:	6193      	str	r3, [r2, #24]
		htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009bd8:	6822      	ldr	r2, [r4, #0]
 8009bda:	6993      	ldr	r3, [r2, #24]
 8009bdc:	6929      	ldr	r1, [r5, #16]
 8009bde:	430b      	orrs	r3, r1
 8009be0:	6193      	str	r3, [r2, #24]
	htim->State = HAL_TIM_STATE_READY;
 8009be2:	2301      	movs	r3, #1
 8009be4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	__HAL_UNLOCK(htim);
 8009be8:	2000      	movs	r0, #0
 8009bea:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
	return HAL_OK;
 8009bee:	bd70      	pop	{r4, r5, r6, pc}
		assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8009bf0:	6823      	ldr	r3, [r4, #0]
 8009bf2:	4a46      	ldr	r2, [pc, #280]	; (8009d0c <HAL_TIM_PWM_ConfigChannel+0x220>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d017      	beq.n	8009c28 <HAL_TIM_PWM_ConfigChannel+0x13c>
 8009bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bfc:	d014      	beq.n	8009c28 <HAL_TIM_PWM_ConfigChannel+0x13c>
 8009bfe:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d010      	beq.n	8009c28 <HAL_TIM_PWM_ConfigChannel+0x13c>
 8009c06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d00c      	beq.n	8009c28 <HAL_TIM_PWM_ConfigChannel+0x13c>
 8009c0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d008      	beq.n	8009c28 <HAL_TIM_PWM_ConfigChannel+0x13c>
 8009c16:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d004      	beq.n	8009c28 <HAL_TIM_PWM_ConfigChannel+0x13c>
 8009c1e:	f640 31ed 	movw	r1, #3053	; 0xbed
 8009c22:	4839      	ldr	r0, [pc, #228]	; (8009d08 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 8009c24:	f002 fb82 	bl	800c32c <assert_failed>
		TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009c28:	4629      	mov	r1, r5
 8009c2a:	6820      	ldr	r0, [r4, #0]
 8009c2c:	f7ff ff20 	bl	8009a70 <TIM_OC2_SetConfig>
		htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009c30:	6822      	ldr	r2, [r4, #0]
 8009c32:	6993      	ldr	r3, [r2, #24]
 8009c34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009c38:	6193      	str	r3, [r2, #24]
		htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009c3a:	6822      	ldr	r2, [r4, #0]
 8009c3c:	6993      	ldr	r3, [r2, #24]
 8009c3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c42:	6193      	str	r3, [r2, #24]
		htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009c44:	6822      	ldr	r2, [r4, #0]
 8009c46:	6993      	ldr	r3, [r2, #24]
 8009c48:	6929      	ldr	r1, [r5, #16]
 8009c4a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009c4e:	6193      	str	r3, [r2, #24]
	break;
 8009c50:	e7c7      	b.n	8009be2 <HAL_TIM_PWM_ConfigChannel+0xf6>
		assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8009c52:	6823      	ldr	r3, [r4, #0]
 8009c54:	4a2d      	ldr	r2, [pc, #180]	; (8009d0c <HAL_TIM_PWM_ConfigChannel+0x220>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d013      	beq.n	8009c82 <HAL_TIM_PWM_ConfigChannel+0x196>
 8009c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c5e:	d010      	beq.n	8009c82 <HAL_TIM_PWM_ConfigChannel+0x196>
 8009c60:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d00c      	beq.n	8009c82 <HAL_TIM_PWM_ConfigChannel+0x196>
 8009c68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d008      	beq.n	8009c82 <HAL_TIM_PWM_ConfigChannel+0x196>
 8009c70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d004      	beq.n	8009c82 <HAL_TIM_PWM_ConfigChannel+0x196>
 8009c78:	f640 31fc 	movw	r1, #3068	; 0xbfc
 8009c7c:	4822      	ldr	r0, [pc, #136]	; (8009d08 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 8009c7e:	f002 fb55 	bl	800c32c <assert_failed>
		TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009c82:	4629      	mov	r1, r5
 8009c84:	6820      	ldr	r0, [r4, #0]
 8009c86:	f7ff f995 	bl	8008fb4 <TIM_OC3_SetConfig>
		htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009c8a:	6822      	ldr	r2, [r4, #0]
 8009c8c:	69d3      	ldr	r3, [r2, #28]
 8009c8e:	f043 0308 	orr.w	r3, r3, #8
 8009c92:	61d3      	str	r3, [r2, #28]
		htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009c94:	6822      	ldr	r2, [r4, #0]
 8009c96:	69d3      	ldr	r3, [r2, #28]
 8009c98:	f023 0304 	bic.w	r3, r3, #4
 8009c9c:	61d3      	str	r3, [r2, #28]
		htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009c9e:	6822      	ldr	r2, [r4, #0]
 8009ca0:	69d3      	ldr	r3, [r2, #28]
 8009ca2:	6929      	ldr	r1, [r5, #16]
 8009ca4:	430b      	orrs	r3, r1
 8009ca6:	61d3      	str	r3, [r2, #28]
	break;
 8009ca8:	e79b      	b.n	8009be2 <HAL_TIM_PWM_ConfigChannel+0xf6>
		assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8009caa:	6823      	ldr	r3, [r4, #0]
 8009cac:	4a17      	ldr	r2, [pc, #92]	; (8009d0c <HAL_TIM_PWM_ConfigChannel+0x220>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d013      	beq.n	8009cda <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8009cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cb6:	d010      	beq.n	8009cda <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8009cb8:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d00c      	beq.n	8009cda <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8009cc0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d008      	beq.n	8009cda <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8009cc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d004      	beq.n	8009cda <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8009cd0:	f640 410b 	movw	r1, #3083	; 0xc0b
 8009cd4:	480c      	ldr	r0, [pc, #48]	; (8009d08 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 8009cd6:	f002 fb29 	bl	800c32c <assert_failed>
		TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009cda:	4629      	mov	r1, r5
 8009cdc:	6820      	ldr	r0, [r4, #0]
 8009cde:	f7ff f9bd 	bl	800905c <TIM_OC4_SetConfig>
		htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009ce2:	6822      	ldr	r2, [r4, #0]
 8009ce4:	69d3      	ldr	r3, [r2, #28]
 8009ce6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009cea:	61d3      	str	r3, [r2, #28]
		htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009cec:	6822      	ldr	r2, [r4, #0]
 8009cee:	69d3      	ldr	r3, [r2, #28]
 8009cf0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009cf4:	61d3      	str	r3, [r2, #28]
		htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009cf6:	6822      	ldr	r2, [r4, #0]
 8009cf8:	69d3      	ldr	r3, [r2, #28]
 8009cfa:	6929      	ldr	r1, [r5, #16]
 8009cfc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009d00:	61d3      	str	r3, [r2, #28]
	break;
 8009d02:	e76e      	b.n	8009be2 <HAL_TIM_PWM_ConfigChannel+0xf6>
	__HAL_LOCK(htim);
 8009d04:	2002      	movs	r0, #2
 8009d06:	4770      	bx	lr
 8009d08:	0801e290 	.word	0x0801e290
 8009d0c:	40010000 	.word	0x40010000

08009d10 <TIM_CCxChannelCmd>:
{
 8009d10:	b570      	push	{r4, r5, r6, lr}
 8009d12:	4604      	mov	r4, r0
 8009d14:	460d      	mov	r5, r1
 8009d16:	4616      	mov	r6, r2
	assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8009d18:	4b1e      	ldr	r3, [pc, #120]	; (8009d94 <TIM_CCxChannelCmd+0x84>)
 8009d1a:	4298      	cmp	r0, r3
 8009d1c:	d01f      	beq.n	8009d5e <TIM_CCxChannelCmd+0x4e>
 8009d1e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009d22:	d01c      	beq.n	8009d5e <TIM_CCxChannelCmd+0x4e>
 8009d24:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 8009d28:	4298      	cmp	r0, r3
 8009d2a:	d018      	beq.n	8009d5e <TIM_CCxChannelCmd+0x4e>
 8009d2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d30:	4298      	cmp	r0, r3
 8009d32:	d014      	beq.n	8009d5e <TIM_CCxChannelCmd+0x4e>
 8009d34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d38:	4298      	cmp	r0, r3
 8009d3a:	d010      	beq.n	8009d5e <TIM_CCxChannelCmd+0x4e>
 8009d3c:	f503 339a 	add.w	r3, r3, #78848	; 0x13400
 8009d40:	4298      	cmp	r0, r3
 8009d42:	d00c      	beq.n	8009d5e <TIM_CCxChannelCmd+0x4e>
 8009d44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d48:	4298      	cmp	r0, r3
 8009d4a:	d008      	beq.n	8009d5e <TIM_CCxChannelCmd+0x4e>
 8009d4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d50:	4298      	cmp	r0, r3
 8009d52:	d004      	beq.n	8009d5e <TIM_CCxChannelCmd+0x4e>
 8009d54:	f241 11d9 	movw	r1, #4569	; 0x11d9
 8009d58:	480f      	ldr	r0, [pc, #60]	; (8009d98 <TIM_CCxChannelCmd+0x88>)
 8009d5a:	f002 fae7 	bl	800c32c <assert_failed>
	assert_param(IS_TIM_CHANNELS(Channel));
 8009d5e:	b165      	cbz	r5, 8009d7a <TIM_CCxChannelCmd+0x6a>
 8009d60:	2d04      	cmp	r5, #4
 8009d62:	d00a      	beq.n	8009d7a <TIM_CCxChannelCmd+0x6a>
 8009d64:	2d08      	cmp	r5, #8
 8009d66:	d008      	beq.n	8009d7a <TIM_CCxChannelCmd+0x6a>
 8009d68:	2d0c      	cmp	r5, #12
 8009d6a:	d006      	beq.n	8009d7a <TIM_CCxChannelCmd+0x6a>
 8009d6c:	2d18      	cmp	r5, #24
 8009d6e:	d004      	beq.n	8009d7a <TIM_CCxChannelCmd+0x6a>
 8009d70:	f241 11da 	movw	r1, #4570	; 0x11da
 8009d74:	4808      	ldr	r0, [pc, #32]	; (8009d98 <TIM_CCxChannelCmd+0x88>)
 8009d76:	f002 fad9 	bl	800c32c <assert_failed>
	tmp = TIM_CCER_CC1E << Channel;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	fa03 f205 	lsl.w	r2, r3, r5
	TIMx->CCER &= ~tmp;
 8009d80:	6a23      	ldr	r3, [r4, #32]
 8009d82:	ea23 0302 	bic.w	r3, r3, r2
 8009d86:	6223      	str	r3, [r4, #32]
	TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8009d88:	6a23      	ldr	r3, [r4, #32]
 8009d8a:	fa06 f505 	lsl.w	r5, r6, r5
 8009d8e:	431d      	orrs	r5, r3
 8009d90:	6225      	str	r5, [r4, #32]
 8009d92:	bd70      	pop	{r4, r5, r6, pc}
 8009d94:	40010000 	.word	0x40010000
 8009d98:	0801e290 	.word	0x0801e290

08009d9c <HAL_TIM_PWM_Start>:
{
 8009d9c:	b538      	push	{r3, r4, r5, lr}
 8009d9e:	4604      	mov	r4, r0
 8009da0:	460d      	mov	r5, r1
	assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8009da2:	6803      	ldr	r3, [r0, #0]
 8009da4:	4a24      	ldr	r2, [pc, #144]	; (8009e38 <HAL_TIM_PWM_Start+0x9c>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d02c      	beq.n	8009e04 <HAL_TIM_PWM_Start+0x68>
 8009daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dae:	d029      	beq.n	8009e04 <HAL_TIM_PWM_Start+0x68>
 8009db0:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d025      	beq.n	8009e04 <HAL_TIM_PWM_Start+0x68>
 8009db8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d021      	beq.n	8009e04 <HAL_TIM_PWM_Start+0x68>
 8009dc0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d01d      	beq.n	8009e04 <HAL_TIM_PWM_Start+0x68>
 8009dc8:	4a1c      	ldr	r2, [pc, #112]	; (8009e3c <HAL_TIM_PWM_Start+0xa0>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d023      	beq.n	8009e16 <HAL_TIM_PWM_Start+0x7a>
 8009dce:	4a1c      	ldr	r2, [pc, #112]	; (8009e40 <HAL_TIM_PWM_Start+0xa4>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d025      	beq.n	8009e20 <HAL_TIM_PWM_Start+0x84>
 8009dd4:	4a1b      	ldr	r2, [pc, #108]	; (8009e44 <HAL_TIM_PWM_Start+0xa8>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d025      	beq.n	8009e26 <HAL_TIM_PWM_Start+0x8a>
 8009dda:	f240 4136 	movw	r1, #1078	; 0x436
 8009dde:	481a      	ldr	r0, [pc, #104]	; (8009e48 <HAL_TIM_PWM_Start+0xac>)
 8009de0:	f002 faa4 	bl	800c32c <assert_failed>
	TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009de4:	2201      	movs	r2, #1
 8009de6:	4629      	mov	r1, r5
 8009de8:	6820      	ldr	r0, [r4, #0]
 8009dea:	f7ff ff91 	bl	8009d10 <TIM_CCxChannelCmd>
	if (IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET) {
 8009dee:	6823      	ldr	r3, [r4, #0]
 8009df0:	4a11      	ldr	r2, [pc, #68]	; (8009e38 <HAL_TIM_PWM_Start+0x9c>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d01a      	beq.n	8009e2c <HAL_TIM_PWM_Start+0x90>
	__HAL_TIM_ENABLE(htim);
 8009df6:	6822      	ldr	r2, [r4, #0]
 8009df8:	6813      	ldr	r3, [r2, #0]
 8009dfa:	f043 0301 	orr.w	r3, r3, #1
 8009dfe:	6013      	str	r3, [r2, #0]
}
 8009e00:	2000      	movs	r0, #0
 8009e02:	bd38      	pop	{r3, r4, r5, pc}
	assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8009e04:	2d00      	cmp	r5, #0
 8009e06:	d0ed      	beq.n	8009de4 <HAL_TIM_PWM_Start+0x48>
 8009e08:	2d04      	cmp	r5, #4
 8009e0a:	d0eb      	beq.n	8009de4 <HAL_TIM_PWM_Start+0x48>
 8009e0c:	2d08      	cmp	r5, #8
 8009e0e:	d0e9      	beq.n	8009de4 <HAL_TIM_PWM_Start+0x48>
 8009e10:	2d0c      	cmp	r5, #12
 8009e12:	d1d9      	bne.n	8009dc8 <HAL_TIM_PWM_Start+0x2c>
 8009e14:	e7e6      	b.n	8009de4 <HAL_TIM_PWM_Start+0x48>
 8009e16:	2d00      	cmp	r5, #0
 8009e18:	d0e4      	beq.n	8009de4 <HAL_TIM_PWM_Start+0x48>
 8009e1a:	2d04      	cmp	r5, #4
 8009e1c:	d1d7      	bne.n	8009dce <HAL_TIM_PWM_Start+0x32>
 8009e1e:	e7e1      	b.n	8009de4 <HAL_TIM_PWM_Start+0x48>
 8009e20:	2d00      	cmp	r5, #0
 8009e22:	d0df      	beq.n	8009de4 <HAL_TIM_PWM_Start+0x48>
 8009e24:	e7d6      	b.n	8009dd4 <HAL_TIM_PWM_Start+0x38>
 8009e26:	2d00      	cmp	r5, #0
 8009e28:	d0dc      	beq.n	8009de4 <HAL_TIM_PWM_Start+0x48>
 8009e2a:	e7d6      	b.n	8009dda <HAL_TIM_PWM_Start+0x3e>
		__HAL_TIM_MOE_ENABLE(htim);
 8009e2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e32:	645a      	str	r2, [r3, #68]	; 0x44
 8009e34:	e7df      	b.n	8009df6 <HAL_TIM_PWM_Start+0x5a>
 8009e36:	bf00      	nop
 8009e38:	40010000 	.word	0x40010000
 8009e3c:	40014000 	.word	0x40014000
 8009e40:	40014400 	.word	0x40014400
 8009e44:	40014800 	.word	0x40014800
 8009e48:	0801e290 	.word	0x0801e290

08009e4c <HAL_TIM_PWM_Stop>:
{
 8009e4c:	b538      	push	{r3, r4, r5, lr}
 8009e4e:	4604      	mov	r4, r0
 8009e50:	460d      	mov	r5, r1
	assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8009e52:	6803      	ldr	r3, [r0, #0]
 8009e54:	4a2f      	ldr	r2, [pc, #188]	; (8009f14 <HAL_TIM_PWM_Stop+0xc8>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d039      	beq.n	8009ece <HAL_TIM_PWM_Stop+0x82>
 8009e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e5e:	d036      	beq.n	8009ece <HAL_TIM_PWM_Stop+0x82>
 8009e60:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d032      	beq.n	8009ece <HAL_TIM_PWM_Stop+0x82>
 8009e68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d02e      	beq.n	8009ece <HAL_TIM_PWM_Stop+0x82>
 8009e70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d02a      	beq.n	8009ece <HAL_TIM_PWM_Stop+0x82>
 8009e78:	4a27      	ldr	r2, [pc, #156]	; (8009f18 <HAL_TIM_PWM_Stop+0xcc>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d030      	beq.n	8009ee0 <HAL_TIM_PWM_Stop+0x94>
 8009e7e:	4a27      	ldr	r2, [pc, #156]	; (8009f1c <HAL_TIM_PWM_Stop+0xd0>)
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d032      	beq.n	8009eea <HAL_TIM_PWM_Stop+0x9e>
 8009e84:	4a26      	ldr	r2, [pc, #152]	; (8009f20 <HAL_TIM_PWM_Stop+0xd4>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d032      	beq.n	8009ef0 <HAL_TIM_PWM_Stop+0xa4>
 8009e8a:	f240 4156 	movw	r1, #1110	; 0x456
 8009e8e:	4825      	ldr	r0, [pc, #148]	; (8009f24 <HAL_TIM_PWM_Stop+0xd8>)
 8009e90:	f002 fa4c 	bl	800c32c <assert_failed>
	TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009e94:	2200      	movs	r2, #0
 8009e96:	4629      	mov	r1, r5
 8009e98:	6820      	ldr	r0, [r4, #0]
 8009e9a:	f7ff ff39 	bl	8009d10 <TIM_CCxChannelCmd>
	if (IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET) {
 8009e9e:	6823      	ldr	r3, [r4, #0]
 8009ea0:	4a1c      	ldr	r2, [pc, #112]	; (8009f14 <HAL_TIM_PWM_Stop+0xc8>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d027      	beq.n	8009ef6 <HAL_TIM_PWM_Stop+0xaa>
	__HAL_TIM_DISABLE(htim);
 8009ea6:	6823      	ldr	r3, [r4, #0]
 8009ea8:	6a19      	ldr	r1, [r3, #32]
 8009eaa:	f241 1211 	movw	r2, #4369	; 0x1111
 8009eae:	4211      	tst	r1, r2
 8009eb0:	d108      	bne.n	8009ec4 <HAL_TIM_PWM_Stop+0x78>
 8009eb2:	6a19      	ldr	r1, [r3, #32]
 8009eb4:	f240 4244 	movw	r2, #1092	; 0x444
 8009eb8:	4211      	tst	r1, r2
 8009eba:	d103      	bne.n	8009ec4 <HAL_TIM_PWM_Stop+0x78>
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	f022 0201 	bic.w	r2, r2, #1
 8009ec2:	601a      	str	r2, [r3, #0]
	htim->State = HAL_TIM_STATE_READY;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8009eca:	2000      	movs	r0, #0
 8009ecc:	bd38      	pop	{r3, r4, r5, pc}
	assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8009ece:	2d00      	cmp	r5, #0
 8009ed0:	d0e0      	beq.n	8009e94 <HAL_TIM_PWM_Stop+0x48>
 8009ed2:	2d04      	cmp	r5, #4
 8009ed4:	d0de      	beq.n	8009e94 <HAL_TIM_PWM_Stop+0x48>
 8009ed6:	2d08      	cmp	r5, #8
 8009ed8:	d0dc      	beq.n	8009e94 <HAL_TIM_PWM_Stop+0x48>
 8009eda:	2d0c      	cmp	r5, #12
 8009edc:	d1cc      	bne.n	8009e78 <HAL_TIM_PWM_Stop+0x2c>
 8009ede:	e7d9      	b.n	8009e94 <HAL_TIM_PWM_Stop+0x48>
 8009ee0:	2d00      	cmp	r5, #0
 8009ee2:	d0d7      	beq.n	8009e94 <HAL_TIM_PWM_Stop+0x48>
 8009ee4:	2d04      	cmp	r5, #4
 8009ee6:	d1ca      	bne.n	8009e7e <HAL_TIM_PWM_Stop+0x32>
 8009ee8:	e7d4      	b.n	8009e94 <HAL_TIM_PWM_Stop+0x48>
 8009eea:	2d00      	cmp	r5, #0
 8009eec:	d0d2      	beq.n	8009e94 <HAL_TIM_PWM_Stop+0x48>
 8009eee:	e7c9      	b.n	8009e84 <HAL_TIM_PWM_Stop+0x38>
 8009ef0:	2d00      	cmp	r5, #0
 8009ef2:	d0cf      	beq.n	8009e94 <HAL_TIM_PWM_Stop+0x48>
 8009ef4:	e7c9      	b.n	8009e8a <HAL_TIM_PWM_Stop+0x3e>
		__HAL_TIM_MOE_DISABLE(htim);
 8009ef6:	6a19      	ldr	r1, [r3, #32]
 8009ef8:	f241 1211 	movw	r2, #4369	; 0x1111
 8009efc:	4211      	tst	r1, r2
 8009efe:	d1d2      	bne.n	8009ea6 <HAL_TIM_PWM_Stop+0x5a>
 8009f00:	6a19      	ldr	r1, [r3, #32]
 8009f02:	f240 4244 	movw	r2, #1092	; 0x444
 8009f06:	4211      	tst	r1, r2
 8009f08:	d1cd      	bne.n	8009ea6 <HAL_TIM_PWM_Stop+0x5a>
 8009f0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009f10:	645a      	str	r2, [r3, #68]	; 0x44
 8009f12:	e7c8      	b.n	8009ea6 <HAL_TIM_PWM_Stop+0x5a>
 8009f14:	40010000 	.word	0x40010000
 8009f18:	40014000 	.word	0x40014000
 8009f1c:	40014400 	.word	0x40014400
 8009f20:	40014800 	.word	0x40014800
 8009f24:	0801e290 	.word	0x0801e290

08009f28 <HAL_TIMEx_MasterConfigSynchronization>:
 *         contains the selected trigger output (TRGO) and the Master/Slave
 *         mode.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8009f28:	b538      	push	{r3, r4, r5, lr}
 8009f2a:	4604      	mov	r4, r0
 8009f2c:	460d      	mov	r5, r1
	/* Check the parameters */
	assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8009f2e:	6803      	ldr	r3, [r0, #0]
 8009f30:	4a2d      	ldr	r2, [pc, #180]	; (8009fe8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d013      	beq.n	8009f5e <HAL_TIMEx_MasterConfigSynchronization+0x36>
 8009f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f3a:	d010      	beq.n	8009f5e <HAL_TIMEx_MasterConfigSynchronization+0x36>
 8009f3c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d00c      	beq.n	8009f5e <HAL_TIMEx_MasterConfigSynchronization+0x36>
 8009f44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d008      	beq.n	8009f5e <HAL_TIMEx_MasterConfigSynchronization+0x36>
 8009f4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d004      	beq.n	8009f5e <HAL_TIMEx_MasterConfigSynchronization+0x36>
 8009f54:	f240 6129 	movw	r1, #1577	; 0x629
 8009f58:	4824      	ldr	r0, [pc, #144]	; (8009fec <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009f5a:	f002 f9e7 	bl	800c32c <assert_failed>
	assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8009f5e:	682b      	ldr	r3, [r5, #0]
 8009f60:	b193      	cbz	r3, 8009f88 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009f62:	2b10      	cmp	r3, #16
 8009f64:	d010      	beq.n	8009f88 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009f66:	2b20      	cmp	r3, #32
 8009f68:	d00e      	beq.n	8009f88 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009f6a:	2b30      	cmp	r3, #48	; 0x30
 8009f6c:	d00c      	beq.n	8009f88 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009f6e:	2b40      	cmp	r3, #64	; 0x40
 8009f70:	d00a      	beq.n	8009f88 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009f72:	2b50      	cmp	r3, #80	; 0x50
 8009f74:	d008      	beq.n	8009f88 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009f76:	2b60      	cmp	r3, #96	; 0x60
 8009f78:	d006      	beq.n	8009f88 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009f7a:	2b70      	cmp	r3, #112	; 0x70
 8009f7c:	d004      	beq.n	8009f88 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009f7e:	f240 612a 	movw	r1, #1578	; 0x62a
 8009f82:	481a      	ldr	r0, [pc, #104]	; (8009fec <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009f84:	f002 f9d2 	bl	800c32c <assert_failed>
	assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8009f88:	686b      	ldr	r3, [r5, #4]
 8009f8a:	2b80      	cmp	r3, #128	; 0x80
 8009f8c:	d000      	beq.n	8009f90 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8009f8e:	bb1b      	cbnz	r3, 8009fd8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>

	__HAL_LOCK(htim);
 8009f90:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d025      	beq.n	8009fe4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 8009f98:	2201      	movs	r2, #1
 8009f9a:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38

	htim->State = HAL_TIM_STATE_BUSY;
 8009f9e:	2302      	movs	r3, #2
 8009fa0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

	/* Reset the MMS Bits */
	htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8009fa4:	6821      	ldr	r1, [r4, #0]
 8009fa6:	684b      	ldr	r3, [r1, #4]
 8009fa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fac:	604b      	str	r3, [r1, #4]
	/* Select the TRGO source */
	htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8009fae:	6821      	ldr	r1, [r4, #0]
 8009fb0:	684b      	ldr	r3, [r1, #4]
 8009fb2:	6828      	ldr	r0, [r5, #0]
 8009fb4:	4303      	orrs	r3, r0
 8009fb6:	604b      	str	r3, [r1, #4]

	/* Reset the MSM Bit */
	htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8009fb8:	6821      	ldr	r1, [r4, #0]
 8009fba:	688b      	ldr	r3, [r1, #8]
 8009fbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fc0:	608b      	str	r3, [r1, #8]
	/* Set or Reset the MSM Bit */
	htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8009fc2:	6821      	ldr	r1, [r4, #0]
 8009fc4:	688b      	ldr	r3, [r1, #8]
 8009fc6:	6868      	ldr	r0, [r5, #4]
 8009fc8:	4303      	orrs	r3, r0
 8009fca:	608b      	str	r3, [r1, #8]

	htim->State = HAL_TIM_STATE_READY;
 8009fcc:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39

	__HAL_UNLOCK(htim);
 8009fd0:	2000      	movs	r0, #0
 8009fd2:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38

	return HAL_OK;
 8009fd6:	bd38      	pop	{r3, r4, r5, pc}
	assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8009fd8:	f240 612b 	movw	r1, #1579	; 0x62b
 8009fdc:	4803      	ldr	r0, [pc, #12]	; (8009fec <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009fde:	f002 f9a5 	bl	800c32c <assert_failed>
 8009fe2:	e7d5      	b.n	8009f90 <HAL_TIMEx_MasterConfigSynchronization+0x68>
	__HAL_LOCK(htim);
 8009fe4:	2002      	movs	r0, #2
}
 8009fe6:	bd38      	pop	{r3, r4, r5, pc}
 8009fe8:	40010000 	.word	0x40010000
 8009fec:	0801e2c8 	.word	0x0801e2c8

08009ff0 <HAL_TIMEx_CommutationCallback>:
 * @param  htim pointer to a TIM_HandleTypeDef structure that contains
 *                the configuration information for TIM module.
 * @retval None
 */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8009ff0:	4770      	bx	lr

08009ff2 <HAL_TIMEx_BreakCallback>:
 * @param  htim pointer to a TIM_HandleTypeDef structure that contains
 *                the configuration information for TIM module.
 * @retval None
 */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ff2:	4770      	bx	lr

08009ff4 <UART_EndTxTransfer>:
 * @retval None
 */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
	/* Disable TXEIE and TCIE interrupts */
	CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009ff4:	6802      	ldr	r2, [r0, #0]
 8009ff6:	68d3      	ldr	r3, [r2, #12]
 8009ff8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009ffc:	60d3      	str	r3, [r2, #12]

	/* At end of Tx process, restore huart->gState to Ready */
	huart->gState = HAL_UART_STATE_READY;
 8009ffe:	2320      	movs	r3, #32
 800a000:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 800a004:	4770      	bx	lr

0800a006 <UART_EndRxTransfer>:
 * @retval None
 */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
	/* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
	CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a006:	6802      	ldr	r2, [r0, #0]
 800a008:	68d3      	ldr	r3, [r2, #12]
 800a00a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a00e:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a010:	6802      	ldr	r2, [r0, #0]
 800a012:	6953      	ldr	r3, [r2, #20]
 800a014:	f023 0301 	bic.w	r3, r3, #1
 800a018:	6153      	str	r3, [r2, #20]

	/* At end of Rx process, restore huart->RxState to Ready */
	huart->RxState = HAL_UART_STATE_READY;
 800a01a:	2320      	movs	r3, #32
 800a01c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 800a020:	4770      	bx	lr

0800a022 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
	uint16_t* tmp;

	/* Check that a Tx process is ongoing */
	if (huart->gState == HAL_UART_STATE_BUSY_TX) {
 800a022:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800a026:	b2db      	uxtb	r3, r3
 800a028:	2b21      	cmp	r3, #33	; 0x21
 800a02a:	d001      	beq.n	800a030 <UART_Transmit_IT+0xe>
			/* Enable the UART Transmit Complete Interrupt */
			SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
		}
		return HAL_OK;
	}else  {
		return HAL_BUSY;
 800a02c:	2002      	movs	r0, #2
 800a02e:	4770      	bx	lr
		if (huart->Init.WordLength == UART_WORDLENGTH_9B) {
 800a030:	6883      	ldr	r3, [r0, #8]
 800a032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a036:	d017      	beq.n	800a068 <UART_Transmit_IT+0x46>
			huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a038:	6802      	ldr	r2, [r0, #0]
 800a03a:	6a03      	ldr	r3, [r0, #32]
 800a03c:	1c59      	adds	r1, r3, #1
 800a03e:	6201      	str	r1, [r0, #32]
 800a040:	781b      	ldrb	r3, [r3, #0]
 800a042:	6053      	str	r3, [r2, #4]
		if (--huart->TxXferCount == 0U) {
 800a044:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 800a046:	b29b      	uxth	r3, r3
 800a048:	3b01      	subs	r3, #1
 800a04a:	b29b      	uxth	r3, r3
 800a04c:	84c3      	strh	r3, [r0, #38]	; 0x26
 800a04e:	b9db      	cbnz	r3, 800a088 <UART_Transmit_IT+0x66>
			CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a050:	6802      	ldr	r2, [r0, #0]
 800a052:	68d3      	ldr	r3, [r2, #12]
 800a054:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a058:	60d3      	str	r3, [r2, #12]
			SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a05a:	6802      	ldr	r2, [r0, #0]
 800a05c:	68d3      	ldr	r3, [r2, #12]
 800a05e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a062:	60d3      	str	r3, [r2, #12]
		return HAL_OK;
 800a064:	2000      	movs	r0, #0
 800a066:	4770      	bx	lr
			tmp = (uint16_t*)huart->pTxBuffPtr;
 800a068:	6a03      	ldr	r3, [r0, #32]
			huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a06a:	6802      	ldr	r2, [r0, #0]
 800a06c:	881b      	ldrh	r3, [r3, #0]
 800a06e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a072:	6053      	str	r3, [r2, #4]
			if (huart->Init.Parity == UART_PARITY_NONE) {
 800a074:	6903      	ldr	r3, [r0, #16]
 800a076:	b91b      	cbnz	r3, 800a080 <UART_Transmit_IT+0x5e>
				huart->pTxBuffPtr += 2U;
 800a078:	6a03      	ldr	r3, [r0, #32]
 800a07a:	3302      	adds	r3, #2
 800a07c:	6203      	str	r3, [r0, #32]
 800a07e:	e7e1      	b.n	800a044 <UART_Transmit_IT+0x22>
				huart->pTxBuffPtr += 1U;
 800a080:	6a03      	ldr	r3, [r0, #32]
 800a082:	3301      	adds	r3, #1
 800a084:	6203      	str	r3, [r0, #32]
 800a086:	e7dd      	b.n	800a044 <UART_Transmit_IT+0x22>
		return HAL_OK;
 800a088:	2000      	movs	r0, #0
	}
}
 800a08a:	4770      	bx	lr

0800a08c <UART_SetConfig>:
 * @param  huart pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a08c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a090:	4604      	mov	r4, r0
	uint32_t tmpreg = 0x00U;

	/* Check the parameters */
	assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800a092:	6842      	ldr	r2, [r0, #4]
 800a094:	4bb6      	ldr	r3, [pc, #728]	; (800a370 <UART_SetConfig+0x2e4>)
 800a096:	429a      	cmp	r2, r3
 800a098:	f200 80a6 	bhi.w	800a1e8 <UART_SetConfig+0x15c>
	assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800a09c:	68e3      	ldr	r3, [r4, #12]
 800a09e:	b13b      	cbz	r3, 800a0b0 <UART_SetConfig+0x24>
 800a0a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0a4:	d004      	beq.n	800a0b0 <UART_SetConfig+0x24>
 800a0a6:	f44f 610e 	mov.w	r1, #2272	; 0x8e0
 800a0aa:	48b2      	ldr	r0, [pc, #712]	; (800a374 <UART_SetConfig+0x2e8>)
 800a0ac:	f002 f93e 	bl	800c32c <assert_failed>
	assert_param(IS_UART_PARITY(huart->Init.Parity));
 800a0b0:	6923      	ldr	r3, [r4, #16]
 800a0b2:	b153      	cbz	r3, 800a0ca <UART_SetConfig+0x3e>
 800a0b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0b8:	d007      	beq.n	800a0ca <UART_SetConfig+0x3e>
 800a0ba:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a0be:	d004      	beq.n	800a0ca <UART_SetConfig+0x3e>
 800a0c0:	f640 01e1 	movw	r1, #2273	; 0x8e1
 800a0c4:	48ab      	ldr	r0, [pc, #684]	; (800a374 <UART_SetConfig+0x2e8>)
 800a0c6:	f002 f931 	bl	800c32c <assert_failed>
	assert_param(IS_UART_MODE(huart->Init.Mode));
 800a0ca:	6963      	ldr	r3, [r4, #20]
 800a0cc:	f64f 72f3 	movw	r2, #65523	; 0xfff3
 800a0d0:	4213      	tst	r3, r2
 800a0d2:	d100      	bne.n	800a0d6 <UART_SetConfig+0x4a>
 800a0d4:	b923      	cbnz	r3, 800a0e0 <UART_SetConfig+0x54>
 800a0d6:	f640 01e2 	movw	r1, #2274	; 0x8e2
 800a0da:	48a6      	ldr	r0, [pc, #664]	; (800a374 <UART_SetConfig+0x2e8>)
 800a0dc:	f002 f926 	bl	800c32c <assert_failed>

	/*-------------------------- USART CR2 Configuration -----------------------*/
	tmpreg = huart->Instance->CR2;
 800a0e0:	6822      	ldr	r2, [r4, #0]
 800a0e2:	6913      	ldr	r3, [r2, #16]

	/* Clear STOP[13:12] bits */
	tmpreg &= (uint32_t) ~((uint32_t)USART_CR2_STOP);
 800a0e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000

	/* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
	tmpreg |= (uint32_t)huart->Init.StopBits;
 800a0e8:	68e1      	ldr	r1, [r4, #12]
 800a0ea:	430b      	orrs	r3, r1

	/* Write to USART CR2 */
	WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800a0ec:	6113      	str	r3, [r2, #16]

	/*-------------------------- USART CR1 Configuration -----------------------*/
	tmpreg = huart->Instance->CR1;
 800a0ee:	6821      	ldr	r1, [r4, #0]
 800a0f0:	68cb      	ldr	r3, [r1, #12]

	/* Clear M, PCE, PS, TE and RE bits */
	tmpreg &= (uint32_t) ~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800a0f2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800a0f6:	f023 030c 	bic.w	r3, r3, #12
	/* Configure the UART Word Length, Parity and mode:
	   Set the M bits according to huart->Init.WordLength value
	   Set PCE and PS bits according to huart->Init.Parity value
	   Set TE and RE bits according to huart->Init.Mode value
	   Set OVER8 bit according to huart->Init.OverSampling value */
	tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a0fa:	68a2      	ldr	r2, [r4, #8]
 800a0fc:	6920      	ldr	r0, [r4, #16]
 800a0fe:	4302      	orrs	r2, r0
 800a100:	6960      	ldr	r0, [r4, #20]
 800a102:	4302      	orrs	r2, r0
 800a104:	69e0      	ldr	r0, [r4, #28]
 800a106:	4302      	orrs	r2, r0
 800a108:	4313      	orrs	r3, r2

	/* Write to USART CR1 */
	WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800a10a:	60cb      	str	r3, [r1, #12]

	/*-------------------------- USART CR3 Configuration -----------------------*/
	tmpreg = huart->Instance->CR3;
 800a10c:	6822      	ldr	r2, [r4, #0]
 800a10e:	6953      	ldr	r3, [r2, #20]

	/* Clear CTSE and RTSE bits */
	tmpreg &= (uint32_t) ~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800a110:	f423 7340 	bic.w	r3, r3, #768	; 0x300

	/* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
	tmpreg |= huart->Init.HwFlowCtl;
 800a114:	69a1      	ldr	r1, [r4, #24]
 800a116:	430b      	orrs	r3, r1

	/* Write to USART CR3 */
	WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800a118:	6153      	str	r3, [r2, #20]

	/* Check the Over Sampling */
	if (huart->Init.OverSampling == UART_OVERSAMPLING_8) {
 800a11a:	69e3      	ldr	r3, [r4, #28]
 800a11c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a120:	d068      	beq.n	800a1f4 <UART_SetConfig+0x168>
			huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
		}
	}else  {
		/*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
		if ((huart->Instance == USART1) || (huart->Instance == USART6)) {
 800a122:	f8d4 8000 	ldr.w	r8, [r4]
 800a126:	4b94      	ldr	r3, [pc, #592]	; (800a378 <UART_SetConfig+0x2ec>)
 800a128:	4598      	cmp	r8, r3
 800a12a:	f000 8129 	beq.w	800a380 <UART_SetConfig+0x2f4>
 800a12e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a132:	4598      	cmp	r8, r3
 800a134:	f000 8124 	beq.w	800a380 <UART_SetConfig+0x2f4>
		if (huart->Instance == USART1) {
			huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
		}
#endif /* USART6 */
		else{
			huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800a138:	f7fe fa48 	bl	80085cc <HAL_RCC_GetPCLK1Freq>
 800a13c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a140:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a144:	6865      	ldr	r5, [r4, #4]
 800a146:	00ad      	lsls	r5, r5, #2
 800a148:	fbb0 f5f5 	udiv	r5, r0, r5
 800a14c:	4f8b      	ldr	r7, [pc, #556]	; (800a37c <UART_SetConfig+0x2f0>)
 800a14e:	fba7 3505 	umull	r3, r5, r7, r5
 800a152:	096d      	lsrs	r5, r5, #5
 800a154:	012e      	lsls	r6, r5, #4
 800a156:	f7fe fa39 	bl	80085cc <HAL_RCC_GetPCLK1Freq>
 800a15a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a15e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a162:	6865      	ldr	r5, [r4, #4]
 800a164:	00ad      	lsls	r5, r5, #2
 800a166:	fbb0 faf5 	udiv	sl, r0, r5
 800a16a:	f7fe fa2f 	bl	80085cc <HAL_RCC_GetPCLK1Freq>
 800a16e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a172:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a176:	6865      	ldr	r5, [r4, #4]
 800a178:	00ad      	lsls	r5, r5, #2
 800a17a:	fbb0 f5f5 	udiv	r5, r0, r5
 800a17e:	fba7 3505 	umull	r3, r5, r7, r5
 800a182:	096d      	lsrs	r5, r5, #5
 800a184:	f04f 0964 	mov.w	r9, #100	; 0x64
 800a188:	fb09 a515 	mls	r5, r9, r5, sl
 800a18c:	012d      	lsls	r5, r5, #4
 800a18e:	3532      	adds	r5, #50	; 0x32
 800a190:	fba7 3505 	umull	r3, r5, r7, r5
 800a194:	096d      	lsrs	r5, r5, #5
 800a196:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 800a19a:	4435      	add	r5, r6
 800a19c:	f7fe fa16 	bl	80085cc <HAL_RCC_GetPCLK1Freq>
 800a1a0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a1a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a1a8:	6866      	ldr	r6, [r4, #4]
 800a1aa:	00b6      	lsls	r6, r6, #2
 800a1ac:	fbb0 f6f6 	udiv	r6, r0, r6
 800a1b0:	f7fe fa0c 	bl	80085cc <HAL_RCC_GetPCLK1Freq>
 800a1b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a1b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a1bc:	6863      	ldr	r3, [r4, #4]
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	fbb0 f0f3 	udiv	r0, r0, r3
 800a1c4:	fba7 3000 	umull	r3, r0, r7, r0
 800a1c8:	0940      	lsrs	r0, r0, #5
 800a1ca:	fb09 6910 	mls	r9, r9, r0, r6
 800a1ce:	ea4f 1909 	mov.w	r9, r9, lsl #4
 800a1d2:	f109 0932 	add.w	r9, r9, #50	; 0x32
 800a1d6:	fba7 3709 	umull	r3, r7, r7, r9
 800a1da:	f3c7 1743 	ubfx	r7, r7, #5, #4
 800a1de:	442f      	add	r7, r5
 800a1e0:	f8c8 7008 	str.w	r7, [r8, #8]
 800a1e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800a1e8:	f640 01df 	movw	r1, #2271	; 0x8df
 800a1ec:	4861      	ldr	r0, [pc, #388]	; (800a374 <UART_SetConfig+0x2e8>)
 800a1ee:	f002 f89d 	bl	800c32c <assert_failed>
 800a1f2:	e753      	b.n	800a09c <UART_SetConfig+0x10>
		if ((huart->Instance == USART1) || (huart->Instance == USART6)) {
 800a1f4:	f8d4 8000 	ldr.w	r8, [r4]
 800a1f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a1fc:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 800a200:	4598      	cmp	r8, r3
 800a202:	d05c      	beq.n	800a2be <UART_SetConfig+0x232>
 800a204:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a208:	4598      	cmp	r8, r3
 800a20a:	d058      	beq.n	800a2be <UART_SetConfig+0x232>
			huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800a20c:	f7fe f9de 	bl	80085cc <HAL_RCC_GetPCLK1Freq>
 800a210:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a214:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a218:	6865      	ldr	r5, [r4, #4]
 800a21a:	006d      	lsls	r5, r5, #1
 800a21c:	fbb0 f5f5 	udiv	r5, r0, r5
 800a220:	4f56      	ldr	r7, [pc, #344]	; (800a37c <UART_SetConfig+0x2f0>)
 800a222:	fba7 3505 	umull	r3, r5, r7, r5
 800a226:	096d      	lsrs	r5, r5, #5
 800a228:	012e      	lsls	r6, r5, #4
 800a22a:	f7fe f9cf 	bl	80085cc <HAL_RCC_GetPCLK1Freq>
 800a22e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a232:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a236:	6865      	ldr	r5, [r4, #4]
 800a238:	006d      	lsls	r5, r5, #1
 800a23a:	fbb0 faf5 	udiv	sl, r0, r5
 800a23e:	f7fe f9c5 	bl	80085cc <HAL_RCC_GetPCLK1Freq>
 800a242:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a246:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a24a:	6865      	ldr	r5, [r4, #4]
 800a24c:	006d      	lsls	r5, r5, #1
 800a24e:	fbb0 f5f5 	udiv	r5, r0, r5
 800a252:	fba7 3505 	umull	r3, r5, r7, r5
 800a256:	096d      	lsrs	r5, r5, #5
 800a258:	f04f 0964 	mov.w	r9, #100	; 0x64
 800a25c:	fb09 a515 	mls	r5, r9, r5, sl
 800a260:	00ed      	lsls	r5, r5, #3
 800a262:	3532      	adds	r5, #50	; 0x32
 800a264:	fba7 3505 	umull	r3, r5, r7, r5
 800a268:	096d      	lsrs	r5, r5, #5
 800a26a:	006d      	lsls	r5, r5, #1
 800a26c:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 800a270:	4435      	add	r5, r6
 800a272:	f7fe f9ab 	bl	80085cc <HAL_RCC_GetPCLK1Freq>
 800a276:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a27a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a27e:	6866      	ldr	r6, [r4, #4]
 800a280:	0076      	lsls	r6, r6, #1
 800a282:	fbb0 f6f6 	udiv	r6, r0, r6
 800a286:	f7fe f9a1 	bl	80085cc <HAL_RCC_GetPCLK1Freq>
 800a28a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a28e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a292:	6863      	ldr	r3, [r4, #4]
 800a294:	005b      	lsls	r3, r3, #1
 800a296:	fbb0 f3f3 	udiv	r3, r0, r3
 800a29a:	fba7 2303 	umull	r2, r3, r7, r3
 800a29e:	095b      	lsrs	r3, r3, #5
 800a2a0:	fb09 6913 	mls	r9, r9, r3, r6
 800a2a4:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800a2a8:	f109 0932 	add.w	r9, r9, #50	; 0x32
 800a2ac:	fba7 3709 	umull	r3, r7, r7, r9
 800a2b0:	f3c7 1742 	ubfx	r7, r7, #5, #3
 800a2b4:	442f      	add	r7, r5
 800a2b6:	f8c8 7008 	str.w	r7, [r8, #8]
 800a2ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800a2be:	f7fe f995 	bl	80085ec <HAL_RCC_GetPCLK2Freq>
 800a2c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a2c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a2ca:	6865      	ldr	r5, [r4, #4]
 800a2cc:	006d      	lsls	r5, r5, #1
 800a2ce:	fbb0 f5f5 	udiv	r5, r0, r5
 800a2d2:	4f2a      	ldr	r7, [pc, #168]	; (800a37c <UART_SetConfig+0x2f0>)
 800a2d4:	fba7 3505 	umull	r3, r5, r7, r5
 800a2d8:	096d      	lsrs	r5, r5, #5
 800a2da:	012e      	lsls	r6, r5, #4
 800a2dc:	f7fe f986 	bl	80085ec <HAL_RCC_GetPCLK2Freq>
 800a2e0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a2e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a2e8:	6865      	ldr	r5, [r4, #4]
 800a2ea:	006d      	lsls	r5, r5, #1
 800a2ec:	fbb0 faf5 	udiv	sl, r0, r5
 800a2f0:	f7fe f97c 	bl	80085ec <HAL_RCC_GetPCLK2Freq>
 800a2f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a2f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a2fc:	6865      	ldr	r5, [r4, #4]
 800a2fe:	006d      	lsls	r5, r5, #1
 800a300:	fbb0 f5f5 	udiv	r5, r0, r5
 800a304:	fba7 3505 	umull	r3, r5, r7, r5
 800a308:	096d      	lsrs	r5, r5, #5
 800a30a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800a30e:	fb09 a515 	mls	r5, r9, r5, sl
 800a312:	00ed      	lsls	r5, r5, #3
 800a314:	3532      	adds	r5, #50	; 0x32
 800a316:	fba7 3505 	umull	r3, r5, r7, r5
 800a31a:	096d      	lsrs	r5, r5, #5
 800a31c:	006d      	lsls	r5, r5, #1
 800a31e:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 800a322:	4435      	add	r5, r6
 800a324:	f7fe f962 	bl	80085ec <HAL_RCC_GetPCLK2Freq>
 800a328:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a32c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a330:	6866      	ldr	r6, [r4, #4]
 800a332:	0076      	lsls	r6, r6, #1
 800a334:	fbb0 f6f6 	udiv	r6, r0, r6
 800a338:	f7fe f958 	bl	80085ec <HAL_RCC_GetPCLK2Freq>
 800a33c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a340:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a344:	6863      	ldr	r3, [r4, #4]
 800a346:	005b      	lsls	r3, r3, #1
 800a348:	fbb0 f3f3 	udiv	r3, r0, r3
 800a34c:	fba7 2303 	umull	r2, r3, r7, r3
 800a350:	095b      	lsrs	r3, r3, #5
 800a352:	fb09 6913 	mls	r9, r9, r3, r6
 800a356:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800a35a:	f109 0932 	add.w	r9, r9, #50	; 0x32
 800a35e:	fba7 3709 	umull	r3, r7, r7, r9
 800a362:	f3c7 1742 	ubfx	r7, r7, #5, #3
 800a366:	442f      	add	r7, r5
 800a368:	f8c8 7008 	str.w	r7, [r8, #8]
 800a36c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a370:	00a037a0 	.word	0x00a037a0
 800a374:	0801e304 	.word	0x0801e304
 800a378:	40011000 	.word	0x40011000
 800a37c:	51eb851f 	.word	0x51eb851f
			huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800a380:	f7fe f934 	bl	80085ec <HAL_RCC_GetPCLK2Freq>
 800a384:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a388:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a38c:	6865      	ldr	r5, [r4, #4]
 800a38e:	00ad      	lsls	r5, r5, #2
 800a390:	fbb0 f5f5 	udiv	r5, r0, r5
 800a394:	4f26      	ldr	r7, [pc, #152]	; (800a430 <UART_SetConfig+0x3a4>)
 800a396:	fba7 3505 	umull	r3, r5, r7, r5
 800a39a:	096d      	lsrs	r5, r5, #5
 800a39c:	012e      	lsls	r6, r5, #4
 800a39e:	f7fe f925 	bl	80085ec <HAL_RCC_GetPCLK2Freq>
 800a3a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a3a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a3aa:	6865      	ldr	r5, [r4, #4]
 800a3ac:	00ad      	lsls	r5, r5, #2
 800a3ae:	fbb0 faf5 	udiv	sl, r0, r5
 800a3b2:	f7fe f91b 	bl	80085ec <HAL_RCC_GetPCLK2Freq>
 800a3b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a3ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a3be:	6865      	ldr	r5, [r4, #4]
 800a3c0:	00ad      	lsls	r5, r5, #2
 800a3c2:	fbb0 f5f5 	udiv	r5, r0, r5
 800a3c6:	fba7 3505 	umull	r3, r5, r7, r5
 800a3ca:	096d      	lsrs	r5, r5, #5
 800a3cc:	f04f 0964 	mov.w	r9, #100	; 0x64
 800a3d0:	fb09 a515 	mls	r5, r9, r5, sl
 800a3d4:	012d      	lsls	r5, r5, #4
 800a3d6:	3532      	adds	r5, #50	; 0x32
 800a3d8:	fba7 3505 	umull	r3, r5, r7, r5
 800a3dc:	096d      	lsrs	r5, r5, #5
 800a3de:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 800a3e2:	4435      	add	r5, r6
 800a3e4:	f7fe f902 	bl	80085ec <HAL_RCC_GetPCLK2Freq>
 800a3e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a3ec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a3f0:	6866      	ldr	r6, [r4, #4]
 800a3f2:	00b6      	lsls	r6, r6, #2
 800a3f4:	fbb0 f6f6 	udiv	r6, r0, r6
 800a3f8:	f7fe f8f8 	bl	80085ec <HAL_RCC_GetPCLK2Freq>
 800a3fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a400:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a404:	6863      	ldr	r3, [r4, #4]
 800a406:	009b      	lsls	r3, r3, #2
 800a408:	fbb0 f3f3 	udiv	r3, r0, r3
 800a40c:	fba7 2303 	umull	r2, r3, r7, r3
 800a410:	095b      	lsrs	r3, r3, #5
 800a412:	fb09 6913 	mls	r9, r9, r3, r6
 800a416:	ea4f 1909 	mov.w	r9, r9, lsl #4
 800a41a:	f109 0932 	add.w	r9, r9, #50	; 0x32
 800a41e:	fba7 3709 	umull	r3, r7, r7, r9
 800a422:	f3c7 1743 	ubfx	r7, r7, #5, #4
 800a426:	442f      	add	r7, r5
 800a428:	f8c8 7008 	str.w	r7, [r8, #8]
 800a42c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a430:	51eb851f 	.word	0x51eb851f

0800a434 <UART_WaitOnFlagUntilTimeout>:
{
 800a434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a438:	4605      	mov	r5, r0
 800a43a:	460f      	mov	r7, r1
 800a43c:	4616      	mov	r6, r2
 800a43e:	4698      	mov	r8, r3
 800a440:	9c06      	ldr	r4, [sp, #24]
	while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) {
 800a442:	682b      	ldr	r3, [r5, #0]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	ea37 0303 	bics.w	r3, r7, r3
 800a44a:	bf0c      	ite	eq
 800a44c:	2301      	moveq	r3, #1
 800a44e:	2300      	movne	r3, #0
 800a450:	42b3      	cmp	r3, r6
 800a452:	d11e      	bne.n	800a492 <UART_WaitOnFlagUntilTimeout+0x5e>
		if (Timeout != HAL_MAX_DELAY) {
 800a454:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a458:	d0f3      	beq.n	800a442 <UART_WaitOnFlagUntilTimeout+0xe>
			if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 800a45a:	b12c      	cbz	r4, 800a468 <UART_WaitOnFlagUntilTimeout+0x34>
 800a45c:	f7fa ff58 	bl	8005310 <HAL_GetTick>
 800a460:	eba0 0008 	sub.w	r0, r0, r8
 800a464:	4284      	cmp	r4, r0
 800a466:	d2ec      	bcs.n	800a442 <UART_WaitOnFlagUntilTimeout+0xe>
				CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a468:	682a      	ldr	r2, [r5, #0]
 800a46a:	68d3      	ldr	r3, [r2, #12]
 800a46c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a470:	60d3      	str	r3, [r2, #12]
				CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a472:	682a      	ldr	r2, [r5, #0]
 800a474:	6953      	ldr	r3, [r2, #20]
 800a476:	f023 0301 	bic.w	r3, r3, #1
 800a47a:	6153      	str	r3, [r2, #20]
				huart->gState = HAL_UART_STATE_READY;
 800a47c:	2320      	movs	r3, #32
 800a47e:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
				huart->RxState = HAL_UART_STATE_READY;
 800a482:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
				__HAL_UNLOCK(huart);
 800a486:	2300      	movs	r3, #0
 800a488:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
				return HAL_TIMEOUT;
 800a48c:	2003      	movs	r0, #3
 800a48e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return HAL_OK;
 800a492:	2000      	movs	r0, #0
}
 800a494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a498 <HAL_MultiProcessor_Init>:
	if (huart == NULL) {
 800a498:	2800      	cmp	r0, #0
 800a49a:	d077      	beq.n	800a58c <HAL_MultiProcessor_Init+0xf4>
{
 800a49c:	b570      	push	{r4, r5, r6, lr}
 800a49e:	4604      	mov	r4, r0
 800a4a0:	4615      	mov	r5, r2
 800a4a2:	460e      	mov	r6, r1
	assert_param(IS_UART_INSTANCE(huart->Instance));
 800a4a4:	6803      	ldr	r3, [r0, #0]
 800a4a6:	4a3a      	ldr	r2, [pc, #232]	; (800a590 <HAL_MultiProcessor_Init+0xf8>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d00c      	beq.n	800a4c6 <HAL_MultiProcessor_Init+0x2e>
 800a4ac:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d008      	beq.n	800a4c6 <HAL_MultiProcessor_Init+0x2e>
 800a4b4:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d004      	beq.n	800a4c6 <HAL_MultiProcessor_Init+0x2e>
 800a4bc:	f240 11af 	movw	r1, #431	; 0x1af
 800a4c0:	4834      	ldr	r0, [pc, #208]	; (800a594 <HAL_MultiProcessor_Init+0xfc>)
 800a4c2:	f001 ff33 	bl	800c32c <assert_failed>
	assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 800a4c6:	b13d      	cbz	r5, 800a4d8 <HAL_MultiProcessor_Init+0x40>
 800a4c8:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800a4cc:	d004      	beq.n	800a4d8 <HAL_MultiProcessor_Init+0x40>
 800a4ce:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800a4d2:	4830      	ldr	r0, [pc, #192]	; (800a594 <HAL_MultiProcessor_Init+0xfc>)
 800a4d4:	f001 ff2a 	bl	800c32c <assert_failed>
	assert_param(IS_UART_ADDRESS(Address));
 800a4d8:	2e0f      	cmp	r6, #15
 800a4da:	d84b      	bhi.n	800a574 <HAL_MultiProcessor_Init+0xdc>
	assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800a4dc:	68a3      	ldr	r3, [r4, #8]
 800a4de:	b13b      	cbz	r3, 800a4f0 <HAL_MultiProcessor_Init+0x58>
 800a4e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4e4:	d004      	beq.n	800a4f0 <HAL_MultiProcessor_Init+0x58>
 800a4e6:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 800a4ea:	482a      	ldr	r0, [pc, #168]	; (800a594 <HAL_MultiProcessor_Init+0xfc>)
 800a4ec:	f001 ff1e 	bl	800c32c <assert_failed>
	assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800a4f0:	69e3      	ldr	r3, [r4, #28]
 800a4f2:	b13b      	cbz	r3, 800a504 <HAL_MultiProcessor_Init+0x6c>
 800a4f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a4f8:	d004      	beq.n	800a504 <HAL_MultiProcessor_Init+0x6c>
 800a4fa:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a4fe:	4825      	ldr	r0, [pc, #148]	; (800a594 <HAL_MultiProcessor_Init+0xfc>)
 800a500:	f001 ff14 	bl	800c32c <assert_failed>
	if (huart->gState == HAL_UART_STATE_RESET) {
 800a504:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d039      	beq.n	800a580 <HAL_MultiProcessor_Init+0xe8>
	huart->gState = HAL_UART_STATE_BUSY;
 800a50c:	2324      	movs	r3, #36	; 0x24
 800a50e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	__HAL_UART_DISABLE(huart);
 800a512:	6822      	ldr	r2, [r4, #0]
 800a514:	68d3      	ldr	r3, [r2, #12]
 800a516:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a51a:	60d3      	str	r3, [r2, #12]
	UART_SetConfig(huart);
 800a51c:	4620      	mov	r0, r4
 800a51e:	f7ff fdb5 	bl	800a08c <UART_SetConfig>
	CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a522:	6822      	ldr	r2, [r4, #0]
 800a524:	6913      	ldr	r3, [r2, #16]
 800a526:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800a52a:	6113      	str	r3, [r2, #16]
	CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a52c:	6822      	ldr	r2, [r4, #0]
 800a52e:	6953      	ldr	r3, [r2, #20]
 800a530:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800a534:	6153      	str	r3, [r2, #20]
	CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 800a536:	6822      	ldr	r2, [r4, #0]
 800a538:	6913      	ldr	r3, [r2, #16]
 800a53a:	f023 030f 	bic.w	r3, r3, #15
 800a53e:	6113      	str	r3, [r2, #16]
	SET_BIT(huart->Instance->CR2, Address);
 800a540:	6823      	ldr	r3, [r4, #0]
 800a542:	6919      	ldr	r1, [r3, #16]
 800a544:	430e      	orrs	r6, r1
 800a546:	611e      	str	r6, [r3, #16]
	CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 800a548:	6822      	ldr	r2, [r4, #0]
 800a54a:	68d3      	ldr	r3, [r2, #12]
 800a54c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a550:	60d3      	str	r3, [r2, #12]
	SET_BIT(huart->Instance->CR1, WakeUpMethod);
 800a552:	6823      	ldr	r3, [r4, #0]
 800a554:	68da      	ldr	r2, [r3, #12]
 800a556:	4315      	orrs	r5, r2
 800a558:	60dd      	str	r5, [r3, #12]
	__HAL_UART_ENABLE(huart);
 800a55a:	6822      	ldr	r2, [r4, #0]
 800a55c:	68d3      	ldr	r3, [r2, #12]
 800a55e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a562:	60d3      	str	r3, [r2, #12]
	huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a564:	2000      	movs	r0, #0
 800a566:	63e0      	str	r0, [r4, #60]	; 0x3c
	huart->gState = HAL_UART_STATE_READY;
 800a568:	2320      	movs	r3, #32
 800a56a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	huart->RxState = HAL_UART_STATE_READY;
 800a56e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	return HAL_OK;
 800a572:	bd70      	pop	{r4, r5, r6, pc}
	assert_param(IS_UART_ADDRESS(Address));
 800a574:	f240 11b1 	movw	r1, #433	; 0x1b1
 800a578:	4806      	ldr	r0, [pc, #24]	; (800a594 <HAL_MultiProcessor_Init+0xfc>)
 800a57a:	f001 fed7 	bl	800c32c <assert_failed>
 800a57e:	e7ad      	b.n	800a4dc <HAL_MultiProcessor_Init+0x44>
		huart->Lock = HAL_UNLOCKED;
 800a580:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		HAL_UART_MspInit(huart);
 800a584:	4620      	mov	r0, r4
 800a586:	f002 fa6f 	bl	800ca68 <HAL_UART_MspInit>
 800a58a:	e7bf      	b.n	800a50c <HAL_MultiProcessor_Init+0x74>
		return HAL_ERROR;
 800a58c:	2001      	movs	r0, #1
 800a58e:	4770      	bx	lr
 800a590:	40011000 	.word	0x40011000
 800a594:	0801e304 	.word	0x0801e304

0800a598 <HAL_UART_Transmit>:
{
 800a598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a59c:	b082      	sub	sp, #8
 800a59e:	461e      	mov	r6, r3
	if (huart->gState == HAL_UART_STATE_READY) {
 800a5a0:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800a5a4:	b2db      	uxtb	r3, r3
 800a5a6:	2b20      	cmp	r3, #32
 800a5a8:	d004      	beq.n	800a5b4 <HAL_UART_Transmit+0x1c>
		return HAL_BUSY;
 800a5aa:	2302      	movs	r3, #2
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	b002      	add	sp, #8
 800a5b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5b4:	4604      	mov	r4, r0
 800a5b6:	460d      	mov	r5, r1
 800a5b8:	4690      	mov	r8, r2
		if ((pData == NULL) || (Size == 0)) {
 800a5ba:	2900      	cmp	r1, #0
 800a5bc:	d055      	beq.n	800a66a <HAL_UART_Transmit+0xd2>
 800a5be:	2a00      	cmp	r2, #0
 800a5c0:	d055      	beq.n	800a66e <HAL_UART_Transmit+0xd6>
		__HAL_LOCK(huart);
 800a5c2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800a5c6:	2b01      	cmp	r3, #1
 800a5c8:	d101      	bne.n	800a5ce <HAL_UART_Transmit+0x36>
 800a5ca:	2302      	movs	r3, #2
 800a5cc:	e7ee      	b.n	800a5ac <HAL_UART_Transmit+0x14>
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
		huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	63c3      	str	r3, [r0, #60]	; 0x3c
		huart->gState = HAL_UART_STATE_BUSY_TX;
 800a5d8:	2321      	movs	r3, #33	; 0x21
 800a5da:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
		tickstart = HAL_GetTick();
 800a5de:	f7fa fe97 	bl	8005310 <HAL_GetTick>
 800a5e2:	4607      	mov	r7, r0
		huart->TxXferSize = Size;
 800a5e4:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
		huart->TxXferCount = Size;
 800a5e8:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
		while (huart->TxXferCount > 0U) {
 800a5ec:	e010      	b.n	800a610 <HAL_UART_Transmit+0x78>
				if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK) {
 800a5ee:	9600      	str	r6, [sp, #0]
 800a5f0:	463b      	mov	r3, r7
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	2180      	movs	r1, #128	; 0x80
 800a5f6:	4620      	mov	r0, r4
 800a5f8:	f7ff ff1c 	bl	800a434 <UART_WaitOnFlagUntilTimeout>
 800a5fc:	2800      	cmp	r0, #0
 800a5fe:	d138      	bne.n	800a672 <HAL_UART_Transmit+0xda>
				huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800a600:	6822      	ldr	r2, [r4, #0]
 800a602:	882b      	ldrh	r3, [r5, #0]
 800a604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a608:	6053      	str	r3, [r2, #4]
				if (huart->Init.Parity == UART_PARITY_NONE) {
 800a60a:	6923      	ldr	r3, [r4, #16]
 800a60c:	b9cb      	cbnz	r3, 800a642 <HAL_UART_Transmit+0xaa>
					pData += 2U;
 800a60e:	3502      	adds	r5, #2
		while (huart->TxXferCount > 0U) {
 800a610:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800a612:	b29b      	uxth	r3, r3
 800a614:	b1bb      	cbz	r3, 800a646 <HAL_UART_Transmit+0xae>
			huart->TxXferCount--;
 800a616:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800a618:	b29b      	uxth	r3, r3
 800a61a:	3b01      	subs	r3, #1
 800a61c:	b29b      	uxth	r3, r3
 800a61e:	84e3      	strh	r3, [r4, #38]	; 0x26
			if (huart->Init.WordLength == UART_WORDLENGTH_9B) {
 800a620:	68a3      	ldr	r3, [r4, #8]
 800a622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a626:	d0e2      	beq.n	800a5ee <HAL_UART_Transmit+0x56>
				if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK) {
 800a628:	9600      	str	r6, [sp, #0]
 800a62a:	463b      	mov	r3, r7
 800a62c:	2200      	movs	r2, #0
 800a62e:	2180      	movs	r1, #128	; 0x80
 800a630:	4620      	mov	r0, r4
 800a632:	f7ff feff 	bl	800a434 <UART_WaitOnFlagUntilTimeout>
 800a636:	b9f0      	cbnz	r0, 800a676 <HAL_UART_Transmit+0xde>
				huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800a638:	6823      	ldr	r3, [r4, #0]
 800a63a:	782a      	ldrb	r2, [r5, #0]
 800a63c:	605a      	str	r2, [r3, #4]
 800a63e:	3501      	adds	r5, #1
 800a640:	e7e6      	b.n	800a610 <HAL_UART_Transmit+0x78>
					pData += 1U;
 800a642:	3501      	adds	r5, #1
 800a644:	e7e4      	b.n	800a610 <HAL_UART_Transmit+0x78>
		if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK) {
 800a646:	9600      	str	r6, [sp, #0]
 800a648:	463b      	mov	r3, r7
 800a64a:	2200      	movs	r2, #0
 800a64c:	2140      	movs	r1, #64	; 0x40
 800a64e:	4620      	mov	r0, r4
 800a650:	f7ff fef0 	bl	800a434 <UART_WaitOnFlagUntilTimeout>
 800a654:	4603      	mov	r3, r0
 800a656:	b108      	cbz	r0, 800a65c <HAL_UART_Transmit+0xc4>
			return HAL_TIMEOUT;
 800a658:	2303      	movs	r3, #3
 800a65a:	e7a7      	b.n	800a5ac <HAL_UART_Transmit+0x14>
		huart->gState = HAL_UART_STATE_READY;
 800a65c:	2220      	movs	r2, #32
 800a65e:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
		__HAL_UNLOCK(huart);
 800a662:	2200      	movs	r2, #0
 800a664:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
		return HAL_OK;
 800a668:	e7a0      	b.n	800a5ac <HAL_UART_Transmit+0x14>
			return HAL_ERROR;
 800a66a:	2301      	movs	r3, #1
 800a66c:	e79e      	b.n	800a5ac <HAL_UART_Transmit+0x14>
 800a66e:	2301      	movs	r3, #1
 800a670:	e79c      	b.n	800a5ac <HAL_UART_Transmit+0x14>
					return HAL_TIMEOUT;
 800a672:	2303      	movs	r3, #3
 800a674:	e79a      	b.n	800a5ac <HAL_UART_Transmit+0x14>
					return HAL_TIMEOUT;
 800a676:	2303      	movs	r3, #3
 800a678:	e798      	b.n	800a5ac <HAL_UART_Transmit+0x14>
	...

0800a67c <HAL_UART_Receive_DMA>:
{
 800a67c:	b530      	push	{r4, r5, lr}
 800a67e:	b083      	sub	sp, #12
	if (huart->RxState == HAL_UART_STATE_READY) {
 800a680:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
 800a684:	b2e4      	uxtb	r4, r4
 800a686:	2c20      	cmp	r4, #32
 800a688:	d002      	beq.n	800a690 <HAL_UART_Receive_DMA+0x14>
		return HAL_BUSY;
 800a68a:	2002      	movs	r0, #2
}
 800a68c:	b003      	add	sp, #12
 800a68e:	bd30      	pop	{r4, r5, pc}
		if ((pData == NULL) || (Size == 0)) {
 800a690:	2900      	cmp	r1, #0
 800a692:	d03d      	beq.n	800a710 <HAL_UART_Receive_DMA+0x94>
 800a694:	2a00      	cmp	r2, #0
 800a696:	d03d      	beq.n	800a714 <HAL_UART_Receive_DMA+0x98>
		__HAL_LOCK(huart);
 800a698:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	d101      	bne.n	800a6a4 <HAL_UART_Receive_DMA+0x28>
 800a6a0:	2002      	movs	r0, #2
 800a6a2:	e7f3      	b.n	800a68c <HAL_UART_Receive_DMA+0x10>
 800a6a4:	4613      	mov	r3, r2
 800a6a6:	460a      	mov	r2, r1
 800a6a8:	4604      	mov	r4, r0
 800a6aa:	2101      	movs	r1, #1
 800a6ac:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
		huart->pRxBuffPtr = pData;
 800a6b0:	6282      	str	r2, [r0, #40]	; 0x28
		huart->RxXferSize = Size;
 800a6b2:	8583      	strh	r3, [r0, #44]	; 0x2c
		huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6b4:	2500      	movs	r5, #0
 800a6b6:	63c5      	str	r5, [r0, #60]	; 0x3c
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a6b8:	2122      	movs	r1, #34	; 0x22
 800a6ba:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
		huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a6be:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800a6c0:	4815      	ldr	r0, [pc, #84]	; (800a718 <HAL_UART_Receive_DMA+0x9c>)
 800a6c2:	63c8      	str	r0, [r1, #60]	; 0x3c
		huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a6c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6c6:	4815      	ldr	r0, [pc, #84]	; (800a71c <HAL_UART_Receive_DMA+0xa0>)
 800a6c8:	6408      	str	r0, [r1, #64]	; 0x40
		huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a6ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6cc:	4814      	ldr	r0, [pc, #80]	; (800a720 <HAL_UART_Receive_DMA+0xa4>)
 800a6ce:	64c8      	str	r0, [r1, #76]	; 0x4c
		huart->hdmarx->XferAbortCallback = NULL;
 800a6d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6d2:	650d      	str	r5, [r1, #80]	; 0x50
		HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 800a6d4:	6821      	ldr	r1, [r4, #0]
 800a6d6:	3104      	adds	r1, #4
 800a6d8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800a6da:	f7fb fc53 	bl	8005f84 <HAL_DMA_Start_IT>
		__HAL_UART_CLEAR_OREFLAG(huart);
 800a6de:	9501      	str	r5, [sp, #4]
 800a6e0:	6823      	ldr	r3, [r4, #0]
 800a6e2:	681a      	ldr	r2, [r3, #0]
 800a6e4:	9201      	str	r2, [sp, #4]
 800a6e6:	685a      	ldr	r2, [r3, #4]
 800a6e8:	9201      	str	r2, [sp, #4]
 800a6ea:	9a01      	ldr	r2, [sp, #4]
		__HAL_UNLOCK(huart);
 800a6ec:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
		SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a6f0:	68da      	ldr	r2, [r3, #12]
 800a6f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a6f6:	60da      	str	r2, [r3, #12]
		SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6f8:	6822      	ldr	r2, [r4, #0]
 800a6fa:	6953      	ldr	r3, [r2, #20]
 800a6fc:	f043 0301 	orr.w	r3, r3, #1
 800a700:	6153      	str	r3, [r2, #20]
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a702:	6822      	ldr	r2, [r4, #0]
 800a704:	6953      	ldr	r3, [r2, #20]
 800a706:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a70a:	6153      	str	r3, [r2, #20]
		return HAL_OK;
 800a70c:	4628      	mov	r0, r5
 800a70e:	e7bd      	b.n	800a68c <HAL_UART_Receive_DMA+0x10>
			return HAL_ERROR;
 800a710:	2001      	movs	r0, #1
 800a712:	e7bb      	b.n	800a68c <HAL_UART_Receive_DMA+0x10>
 800a714:	2001      	movs	r0, #1
 800a716:	e7b9      	b.n	800a68c <HAL_UART_Receive_DMA+0x10>
 800a718:	0800a73f 	.word	0x0800a73f
 800a71c:	0800a813 	.word	0x0800a813
 800a720:	0800a81f 	.word	0x0800a81f

0800a724 <UART_EndTransmit_IT>:
{
 800a724:	b508      	push	{r3, lr}
	CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a726:	6801      	ldr	r1, [r0, #0]
 800a728:	68cb      	ldr	r3, [r1, #12]
 800a72a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a72e:	60cb      	str	r3, [r1, #12]
	huart->gState = HAL_UART_STATE_READY;
 800a730:	2320      	movs	r3, #32
 800a732:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
	HAL_UART_TxCpltCallback(huart);
 800a736:	f000 ff3d 	bl	800b5b4 <HAL_UART_TxCpltCallback>
}
 800a73a:	2000      	movs	r0, #0
 800a73c:	bd08      	pop	{r3, pc}

0800a73e <UART_DMAReceiveCplt>:
{
 800a73e:	b508      	push	{r3, lr}
	UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a740:	6b83      	ldr	r3, [r0, #56]	; 0x38
	if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U) {
 800a742:	6802      	ldr	r2, [r0, #0]
 800a744:	6812      	ldr	r2, [r2, #0]
 800a746:	f412 7f80 	tst.w	r2, #256	; 0x100
 800a74a:	d113      	bne.n	800a774 <UART_DMAReceiveCplt+0x36>
		huart->RxXferCount = 0U;
 800a74c:	2200      	movs	r2, #0
 800a74e:	85da      	strh	r2, [r3, #46]	; 0x2e
		CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a750:	6819      	ldr	r1, [r3, #0]
 800a752:	68ca      	ldr	r2, [r1, #12]
 800a754:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a758:	60ca      	str	r2, [r1, #12]
		CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a75a:	6819      	ldr	r1, [r3, #0]
 800a75c:	694a      	ldr	r2, [r1, #20]
 800a75e:	f022 0201 	bic.w	r2, r2, #1
 800a762:	614a      	str	r2, [r1, #20]
		CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a764:	6819      	ldr	r1, [r3, #0]
 800a766:	694a      	ldr	r2, [r1, #20]
 800a768:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a76c:	614a      	str	r2, [r1, #20]
		huart->RxState = HAL_UART_STATE_READY;
 800a76e:	2220      	movs	r2, #32
 800a770:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	HAL_UART_RxCpltCallback(huart);
 800a774:	4618      	mov	r0, r3
 800a776:	f000 ff35 	bl	800b5e4 <HAL_UART_RxCpltCallback>
 800a77a:	bd08      	pop	{r3, pc}

0800a77c <UART_Receive_IT>:
{
 800a77c:	b508      	push	{r3, lr}
	if (huart->RxState == HAL_UART_STATE_BUSY_RX) {
 800a77e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800a782:	b2db      	uxtb	r3, r3
 800a784:	2b22      	cmp	r3, #34	; 0x22
 800a786:	d001      	beq.n	800a78c <UART_Receive_IT+0x10>
		return HAL_BUSY;
 800a788:	2002      	movs	r0, #2
 800a78a:	bd08      	pop	{r3, pc}
		if (huart->Init.WordLength == UART_WORDLENGTH_9B) {
 800a78c:	6883      	ldr	r3, [r0, #8]
 800a78e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a792:	d00f      	beq.n	800a7b4 <UART_Receive_IT+0x38>
			if (huart->Init.Parity == UART_PARITY_NONE) {
 800a794:	6903      	ldr	r3, [r0, #16]
 800a796:	bb0b      	cbnz	r3, 800a7dc <UART_Receive_IT+0x60>
				*huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a798:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a79a:	1c5a      	adds	r2, r3, #1
 800a79c:	6282      	str	r2, [r0, #40]	; 0x28
 800a79e:	6802      	ldr	r2, [r0, #0]
 800a7a0:	6852      	ldr	r2, [r2, #4]
 800a7a2:	701a      	strb	r2, [r3, #0]
		if (--huart->RxXferCount == 0U) {
 800a7a4:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800a7a6:	b29b      	uxth	r3, r3
 800a7a8:	3b01      	subs	r3, #1
 800a7aa:	b29b      	uxth	r3, r3
 800a7ac:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800a7ae:	b1f3      	cbz	r3, 800a7ee <UART_Receive_IT+0x72>
		return HAL_OK;
 800a7b0:	2000      	movs	r0, #0
}
 800a7b2:	bd08      	pop	{r3, pc}
			tmp = (uint16_t*)huart->pRxBuffPtr;
 800a7b4:	6a82      	ldr	r2, [r0, #40]	; 0x28
			if (huart->Init.Parity == UART_PARITY_NONE) {
 800a7b6:	6903      	ldr	r3, [r0, #16]
 800a7b8:	b943      	cbnz	r3, 800a7cc <UART_Receive_IT+0x50>
				*tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a7ba:	6803      	ldr	r3, [r0, #0]
 800a7bc:	685b      	ldr	r3, [r3, #4]
 800a7be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7c2:	8013      	strh	r3, [r2, #0]
				huart->pRxBuffPtr += 2U;
 800a7c4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a7c6:	3302      	adds	r3, #2
 800a7c8:	6283      	str	r3, [r0, #40]	; 0x28
 800a7ca:	e7eb      	b.n	800a7a4 <UART_Receive_IT+0x28>
				*tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800a7cc:	6803      	ldr	r3, [r0, #0]
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	b2db      	uxtb	r3, r3
 800a7d2:	8013      	strh	r3, [r2, #0]
				huart->pRxBuffPtr += 1U;
 800a7d4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	6283      	str	r3, [r0, #40]	; 0x28
 800a7da:	e7e3      	b.n	800a7a4 <UART_Receive_IT+0x28>
				*huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a7dc:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800a7de:	1c53      	adds	r3, r2, #1
 800a7e0:	6283      	str	r3, [r0, #40]	; 0x28
 800a7e2:	6803      	ldr	r3, [r0, #0]
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7ea:	7013      	strb	r3, [r2, #0]
 800a7ec:	e7da      	b.n	800a7a4 <UART_Receive_IT+0x28>
			CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a7ee:	6802      	ldr	r2, [r0, #0]
 800a7f0:	68d3      	ldr	r3, [r2, #12]
 800a7f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a7f6:	60d3      	str	r3, [r2, #12]
			CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7f8:	6802      	ldr	r2, [r0, #0]
 800a7fa:	6953      	ldr	r3, [r2, #20]
 800a7fc:	f023 0301 	bic.w	r3, r3, #1
 800a800:	6153      	str	r3, [r2, #20]
			huart->RxState = HAL_UART_STATE_READY;
 800a802:	2320      	movs	r3, #32
 800a804:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
			HAL_UART_RxCpltCallback(huart);
 800a808:	f000 feec 	bl	800b5e4 <HAL_UART_RxCpltCallback>
			return HAL_OK;
 800a80c:	2000      	movs	r0, #0
 800a80e:	bd08      	pop	{r3, pc}

0800a810 <HAL_UART_RxHalfCpltCallback>:
{
 800a810:	4770      	bx	lr

0800a812 <UART_DMARxHalfCplt>:
{
 800a812:	b508      	push	{r3, lr}
	HAL_UART_RxHalfCpltCallback(huart);
 800a814:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800a816:	f7ff fffb 	bl	800a810 <HAL_UART_RxHalfCpltCallback>
 800a81a:	bd08      	pop	{r3, pc}

0800a81c <HAL_UART_ErrorCallback>:
{
 800a81c:	4770      	bx	lr

0800a81e <UART_DMAError>:
{
 800a81e:	b510      	push	{r4, lr}
	UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a820:	6b84      	ldr	r4, [r0, #56]	; 0x38
	dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a822:	6823      	ldr	r3, [r4, #0]
 800a824:	695a      	ldr	r2, [r3, #20]
	if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest) {
 800a826:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800a82a:	b2db      	uxtb	r3, r3
 800a82c:	2b21      	cmp	r3, #33	; 0x21
 800a82e:	d010      	beq.n	800a852 <UART_DMAError+0x34>
	dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a830:	6823      	ldr	r3, [r4, #0]
 800a832:	695a      	ldr	r2, [r3, #20]
 800a834:	f002 0240 	and.w	r2, r2, #64	; 0x40
	if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest) {
 800a838:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 800a83c:	b2db      	uxtb	r3, r3
 800a83e:	2b22      	cmp	r3, #34	; 0x22
 800a840:	d011      	beq.n	800a866 <UART_DMAError+0x48>
	huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a842:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a844:	f043 0310 	orr.w	r3, r3, #16
 800a848:	63e3      	str	r3, [r4, #60]	; 0x3c
	HAL_UART_ErrorCallback(huart);
 800a84a:	4620      	mov	r0, r4
 800a84c:	f7ff ffe6 	bl	800a81c <HAL_UART_ErrorCallback>
 800a850:	bd10      	pop	{r4, pc}
 800a852:	f002 0280 	and.w	r2, r2, #128	; 0x80
	if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest) {
 800a856:	2a00      	cmp	r2, #0
 800a858:	d0ea      	beq.n	800a830 <UART_DMAError+0x12>
		huart->TxXferCount = 0U;
 800a85a:	2300      	movs	r3, #0
 800a85c:	84e3      	strh	r3, [r4, #38]	; 0x26
		UART_EndTxTransfer(huart);
 800a85e:	4620      	mov	r0, r4
 800a860:	f7ff fbc8 	bl	8009ff4 <UART_EndTxTransfer>
 800a864:	e7e4      	b.n	800a830 <UART_DMAError+0x12>
	if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest) {
 800a866:	2a00      	cmp	r2, #0
 800a868:	d0eb      	beq.n	800a842 <UART_DMAError+0x24>
		huart->RxXferCount = 0U;
 800a86a:	2300      	movs	r3, #0
 800a86c:	85e3      	strh	r3, [r4, #46]	; 0x2e
		UART_EndRxTransfer(huart);
 800a86e:	4620      	mov	r0, r4
 800a870:	f7ff fbc9 	bl	800a006 <UART_EndRxTransfer>
 800a874:	e7e5      	b.n	800a842 <UART_DMAError+0x24>
	...

0800a878 <HAL_UART_IRQHandler>:
{
 800a878:	b510      	push	{r4, lr}
 800a87a:	4604      	mov	r4, r0
	uint32_t isrflags = READ_REG(huart->Instance->SR);
 800a87c:	6802      	ldr	r2, [r0, #0]
 800a87e:	6813      	ldr	r3, [r2, #0]
	uint32_t cr1its = READ_REG(huart->Instance->CR1);
 800a880:	68d1      	ldr	r1, [r2, #12]
	uint32_t cr3its = READ_REG(huart->Instance->CR3);
 800a882:	6952      	ldr	r2, [r2, #20]
	if (errorflags == RESET) {
 800a884:	f013 000f 	ands.w	r0, r3, #15
 800a888:	d105      	bne.n	800a896 <HAL_UART_IRQHandler+0x1e>
		if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET)) {
 800a88a:	f013 0f20 	tst.w	r3, #32
 800a88e:	d002      	beq.n	800a896 <HAL_UART_IRQHandler+0x1e>
 800a890:	f011 0f20 	tst.w	r1, #32
 800a894:	d153      	bne.n	800a93e <HAL_UART_IRQHandler+0xc6>
	if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET))) {
 800a896:	2800      	cmp	r0, #0
 800a898:	d067      	beq.n	800a96a <HAL_UART_IRQHandler+0xf2>
 800a89a:	f012 0201 	ands.w	r2, r2, #1
 800a89e:	d102      	bne.n	800a8a6 <HAL_UART_IRQHandler+0x2e>
 800a8a0:	f411 7f90 	tst.w	r1, #288	; 0x120
 800a8a4:	d061      	beq.n	800a96a <HAL_UART_IRQHandler+0xf2>
		if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET)) {
 800a8a6:	f013 0f01 	tst.w	r3, #1
 800a8aa:	d006      	beq.n	800a8ba <HAL_UART_IRQHandler+0x42>
 800a8ac:	f411 7f80 	tst.w	r1, #256	; 0x100
 800a8b0:	d003      	beq.n	800a8ba <HAL_UART_IRQHandler+0x42>
			huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a8b2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800a8b4:	f040 0001 	orr.w	r0, r0, #1
 800a8b8:	63e0      	str	r0, [r4, #60]	; 0x3c
		if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET)) {
 800a8ba:	f013 0f04 	tst.w	r3, #4
 800a8be:	d004      	beq.n	800a8ca <HAL_UART_IRQHandler+0x52>
 800a8c0:	b11a      	cbz	r2, 800a8ca <HAL_UART_IRQHandler+0x52>
			huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a8c2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800a8c4:	f040 0002 	orr.w	r0, r0, #2
 800a8c8:	63e0      	str	r0, [r4, #60]	; 0x3c
		if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET)) {
 800a8ca:	f013 0f02 	tst.w	r3, #2
 800a8ce:	d004      	beq.n	800a8da <HAL_UART_IRQHandler+0x62>
 800a8d0:	b11a      	cbz	r2, 800a8da <HAL_UART_IRQHandler+0x62>
			huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a8d2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800a8d4:	f040 0004 	orr.w	r0, r0, #4
 800a8d8:	63e0      	str	r0, [r4, #60]	; 0x3c
		if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET)) {
 800a8da:	f013 0f08 	tst.w	r3, #8
 800a8de:	d004      	beq.n	800a8ea <HAL_UART_IRQHandler+0x72>
 800a8e0:	b11a      	cbz	r2, 800a8ea <HAL_UART_IRQHandler+0x72>
			huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a8e2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800a8e4:	f042 0208 	orr.w	r2, r2, #8
 800a8e8:	63e2      	str	r2, [r4, #60]	; 0x3c
		if (huart->ErrorCode != HAL_UART_ERROR_NONE) {
 800a8ea:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800a8ec:	2a00      	cmp	r2, #0
 800a8ee:	d048      	beq.n	800a982 <HAL_UART_IRQHandler+0x10a>
			if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET)) {
 800a8f0:	f013 0f20 	tst.w	r3, #32
 800a8f4:	d002      	beq.n	800a8fc <HAL_UART_IRQHandler+0x84>
 800a8f6:	f011 0f20 	tst.w	r1, #32
 800a8fa:	d124      	bne.n	800a946 <HAL_UART_IRQHandler+0xce>
			dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a8fc:	6823      	ldr	r3, [r4, #0]
 800a8fe:	695b      	ldr	r3, [r3, #20]
 800a900:	f003 0340 	and.w	r3, r3, #64	; 0x40
			if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest) {
 800a904:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800a906:	f012 0f08 	tst.w	r2, #8
 800a90a:	d100      	bne.n	800a90e <HAL_UART_IRQHandler+0x96>
 800a90c:	b33b      	cbz	r3, 800a95e <HAL_UART_IRQHandler+0xe6>
				UART_EndRxTransfer(huart);
 800a90e:	4620      	mov	r0, r4
 800a910:	f7ff fb79 	bl	800a006 <UART_EndRxTransfer>
				if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 800a914:	6823      	ldr	r3, [r4, #0]
 800a916:	695a      	ldr	r2, [r3, #20]
 800a918:	f012 0f40 	tst.w	r2, #64	; 0x40
 800a91c:	d01b      	beq.n	800a956 <HAL_UART_IRQHandler+0xde>
					CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a91e:	695a      	ldr	r2, [r3, #20]
 800a920:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a924:	615a      	str	r2, [r3, #20]
					if (huart->hdmarx != NULL) {
 800a926:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a928:	b18b      	cbz	r3, 800a94e <HAL_UART_IRQHandler+0xd6>
						huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a92a:	4a1a      	ldr	r2, [pc, #104]	; (800a994 <HAL_UART_IRQHandler+0x11c>)
 800a92c:	651a      	str	r2, [r3, #80]	; 0x50
						if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK) {
 800a92e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800a930:	f7fb fb7a 	bl	8006028 <HAL_DMA_Abort_IT>
 800a934:	b328      	cbz	r0, 800a982 <HAL_UART_IRQHandler+0x10a>
							huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a936:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800a938:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a93a:	4798      	blx	r3
 800a93c:	bd10      	pop	{r4, pc}
			UART_Receive_IT(huart);
 800a93e:	4620      	mov	r0, r4
 800a940:	f7ff ff1c 	bl	800a77c <UART_Receive_IT>
			return;
 800a944:	bd10      	pop	{r4, pc}
				UART_Receive_IT(huart);
 800a946:	4620      	mov	r0, r4
 800a948:	f7ff ff18 	bl	800a77c <UART_Receive_IT>
 800a94c:	e7d6      	b.n	800a8fc <HAL_UART_IRQHandler+0x84>
						HAL_UART_ErrorCallback(huart);
 800a94e:	4620      	mov	r0, r4
 800a950:	f7ff ff64 	bl	800a81c <HAL_UART_ErrorCallback>
 800a954:	bd10      	pop	{r4, pc}
					HAL_UART_ErrorCallback(huart);
 800a956:	4620      	mov	r0, r4
 800a958:	f7ff ff60 	bl	800a81c <HAL_UART_ErrorCallback>
 800a95c:	bd10      	pop	{r4, pc}
				HAL_UART_ErrorCallback(huart);
 800a95e:	4620      	mov	r0, r4
 800a960:	f7ff ff5c 	bl	800a81c <HAL_UART_ErrorCallback>
				huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a964:	2300      	movs	r3, #0
 800a966:	63e3      	str	r3, [r4, #60]	; 0x3c
 800a968:	bd10      	pop	{r4, pc}
	if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET)) {
 800a96a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a96e:	d002      	beq.n	800a976 <HAL_UART_IRQHandler+0xfe>
 800a970:	f011 0f80 	tst.w	r1, #128	; 0x80
 800a974:	d106      	bne.n	800a984 <HAL_UART_IRQHandler+0x10c>
	if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET)) {
 800a976:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a97a:	d002      	beq.n	800a982 <HAL_UART_IRQHandler+0x10a>
 800a97c:	f011 0f40 	tst.w	r1, #64	; 0x40
 800a980:	d104      	bne.n	800a98c <HAL_UART_IRQHandler+0x114>
 800a982:	bd10      	pop	{r4, pc}
		UART_Transmit_IT(huart);
 800a984:	4620      	mov	r0, r4
 800a986:	f7ff fb4c 	bl	800a022 <UART_Transmit_IT>
		return;
 800a98a:	bd10      	pop	{r4, pc}
		UART_EndTransmit_IT(huart);
 800a98c:	4620      	mov	r0, r4
 800a98e:	f7ff fec9 	bl	800a724 <UART_EndTransmit_IT>
		return;
 800a992:	e7f6      	b.n	800a982 <HAL_UART_IRQHandler+0x10a>
 800a994:	0800a999 	.word	0x0800a999

0800a998 <UART_DMAAbortOnError>:
{
 800a998:	b508      	push	{r3, lr}
	UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a99a:	6b80      	ldr	r0, [r0, #56]	; 0x38
	huart->RxXferCount = 0U;
 800a99c:	2300      	movs	r3, #0
 800a99e:	85c3      	strh	r3, [r0, #46]	; 0x2e
	huart->TxXferCount = 0U;
 800a9a0:	84c3      	strh	r3, [r0, #38]	; 0x26
	HAL_UART_ErrorCallback(huart);
 800a9a2:	f7ff ff3b 	bl	800a81c <HAL_UART_ErrorCallback>
 800a9a6:	bd08      	pop	{r3, pc}

0800a9a8 <MotionFX_manager_init>:
 * @brief  Initialises MotionFX algorithm
 * @param  None
 * @retval None
 */
void MotionFX_manager_init(void)
{
 800a9a8:	b510      	push	{r4, lr}
 800a9aa:	b084      	sub	sp, #16
  char acc_orientation[4];
  char gyro_orientation[4];
  char mag_orientation[4];

  acc_orientation[0] = 'n';
 800a9ac:	226e      	movs	r2, #110	; 0x6e
 800a9ae:	f88d 200c 	strb.w	r2, [sp, #12]
  acc_orientation[1] = 'w';
 800a9b2:	2177      	movs	r1, #119	; 0x77
 800a9b4:	f88d 100d 	strb.w	r1, [sp, #13]
  acc_orientation[2] = 'u';
 800a9b8:	2375      	movs	r3, #117	; 0x75
 800a9ba:	f88d 300e 	strb.w	r3, [sp, #14]

  gyro_orientation[0] = 'n';
 800a9be:	f88d 2008 	strb.w	r2, [sp, #8]
  gyro_orientation[1] = 'w';
 800a9c2:	f88d 1009 	strb.w	r1, [sp, #9]
  gyro_orientation[2] = 'u';
 800a9c6:	f88d 300a 	strb.w	r3, [sp, #10]

  mag_orientation[0] = 'n';
 800a9ca:	f88d 2004 	strb.w	r2, [sp, #4]
  mag_orientation[1] = 'e';
 800a9ce:	2265      	movs	r2, #101	; 0x65
 800a9d0:	f88d 2005 	strb.w	r2, [sp, #5]
  mag_orientation[2] = 'u';
 800a9d4:	f88d 3006 	strb.w	r3, [sp, #6]

#if ((defined (USE_STM32F4XX_NUCLEO)) || (defined (USE_STM32L4XX_NUCLEO)) || (defined (USE_STM32L1XX_NUCLEO)))

  MotionFX_initialize();
 800a9d8:	f00b fdb6 	bl	8016548 <MotionFX_initialize>

  MotionFX_getKnobs(ipKnobs);
 800a9dc:	4c16      	ldr	r4, [pc, #88]	; (800aa38 <MotionFX_manager_init+0x90>)
 800a9de:	4620      	mov	r0, r4
 800a9e0:	f00c f840 	bl	8016a64 <MotionFX_getKnobs>

  (void)strcpy(ipKnobs->acc_orientation, acc_orientation);
 800a9e4:	a903      	add	r1, sp, #12
 800a9e6:	f104 0029 	add.w	r0, r4, #41	; 0x29
 800a9ea:	f011 fc76 	bl	801c2da <strcpy>
  (void)strcpy(ipKnobs->gyro_orientation, gyro_orientation);
 800a9ee:	a902      	add	r1, sp, #8
 800a9f0:	f104 002d 	add.w	r0, r4, #45	; 0x2d
 800a9f4:	f011 fc71 	bl	801c2da <strcpy>
  (void)strcpy(ipKnobs->mag_orientation, mag_orientation);
 800a9f8:	a901      	add	r1, sp, #4
 800a9fa:	f104 0031 	add.w	r0, r4, #49	; 0x31
 800a9fe:	f011 fc6c 	bl	801c2da <strcpy>

  ipKnobs->gbias_acc_th_sc_6X = GBIAS_ACC_TH_SC_6X;
 800aa02:	490e      	ldr	r1, [pc, #56]	; (800aa3c <MotionFX_manager_init+0x94>)
 800aa04:	6161      	str	r1, [r4, #20]
  ipKnobs->gbias_gyro_th_sc_6X = GBIAS_GYRO_TH_SC_6X;
 800aa06:	4a0e      	ldr	r2, [pc, #56]	; (800aa40 <MotionFX_manager_init+0x98>)
 800aa08:	61a2      	str	r2, [r4, #24]
  ipKnobs->gbias_mag_th_sc_6X = GBIAS_MAG_TH_SC_6X;
 800aa0a:	4b0e      	ldr	r3, [pc, #56]	; (800aa44 <MotionFX_manager_init+0x9c>)
 800aa0c:	6123      	str	r3, [r4, #16]

  ipKnobs->gbias_acc_th_sc_9X = GBIAS_ACC_TH_SC_9X;
 800aa0e:	6221      	str	r1, [r4, #32]
  ipKnobs->gbias_gyro_th_sc_9X = GBIAS_GYRO_TH_SC_9X;
 800aa10:	6262      	str	r2, [r4, #36]	; 0x24
  ipKnobs->gbias_mag_th_sc_9X = GBIAS_MAG_TH_SC_9X;
 800aa12:	61e3      	str	r3, [r4, #28]

  ipKnobs->output_type = MFX_ENGINE_OUTPUT_ENU;
 800aa14:	2301      	movs	r3, #1
 800aa16:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  ipKnobs->LMode = 1;
 800aa1a:	7323      	strb	r3, [r4, #12]
  ipKnobs->modx = DECIMATION;
 800aa1c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28

  MotionFX_setKnobs(ipKnobs);
 800aa20:	4620      	mov	r0, r4
 800aa22:	f00b ffbb 	bl	801699c <MotionFX_setKnobs>

  MotionFX_enable_6X(MFX_ENGINE_DISABLE);
 800aa26:	2000      	movs	r0, #0
 800aa28:	f00c f872 	bl	8016b10 <MotionFX_enable_6X>
  MotionFX_enable_9X(MFX_ENGINE_DISABLE);
 800aa2c:	2000      	movs	r0, #0
 800aa2e:	f00c f893 	bl	8016b58 <MotionFX_enable_9X>
  MotionFX_CM0P_enable_euler(MFX_CM0P_ENGINE_ENABLE);
  MotionFX_CM0P_enable_6X(MFX_CM0P_ENGINE_DISABLE);
  MotionFX_CM0P_enable_9X(MFX_CM0P_ENGINE_DISABLE);

#endif
}
 800aa32:	b004      	add	sp, #16
 800aa34:	bd10      	pop	{r4, pc}
 800aa36:	bf00      	nop
 800aa38:	200025b8 	.word	0x200025b8
 800aa3c:	3ac88a48 	.word	0x3ac88a48
 800aa40:	3b83126f 	.word	0x3b83126f
 800aa44:	3b449ba6 	.word	0x3b449ba6

0800aa48 <MotionFX_manager_run>:
 * @param  None
 * @retval None
 */
#if ((defined (USE_STM32F4XX_NUCLEO)) || (defined (USE_STM32L4XX_NUCLEO)) || (defined (USE_STM32L1XX_NUCLEO)))
void MotionFX_manager_run(MFX_input_t *data_in, MFX_output_t *data_out, float delta_time)
{
 800aa48:	b538      	push	{r3, r4, r5, lr}
 800aa4a:	ed2d 8b02 	vpush	{d8}
  if (discardedCount == sampleToDiscard)
 800aa4e:	4b0e      	ldr	r3, [pc, #56]	; (800aa88 <MotionFX_manager_run+0x40>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	4a0e      	ldr	r2, [pc, #56]	; (800aa8c <MotionFX_manager_run+0x44>)
 800aa54:	6812      	ldr	r2, [r2, #0]
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d005      	beq.n	800aa66 <MotionFX_manager_run+0x1e>
    MotionFX_propagate(data_out, data_in, delta_time);
    MotionFX_update(data_out, data_in, delta_time, NULL);
  }
  else
  {
    discardedCount++;
 800aa5a:	3301      	adds	r3, #1
 800aa5c:	4a0a      	ldr	r2, [pc, #40]	; (800aa88 <MotionFX_manager_run+0x40>)
 800aa5e:	6013      	str	r3, [r2, #0]
  }
}
 800aa60:	ecbd 8b02 	vpop	{d8}
 800aa64:	bd38      	pop	{r3, r4, r5, pc}
 800aa66:	eeb0 8a40 	vmov.f32	s16, s0
 800aa6a:	460c      	mov	r4, r1
 800aa6c:	4605      	mov	r5, r0
    MotionFX_propagate(data_out, data_in, delta_time);
 800aa6e:	4601      	mov	r1, r0
 800aa70:	4620      	mov	r0, r4
 800aa72:	f00c fa6d 	bl	8016f50 <MotionFX_propagate>
    MotionFX_update(data_out, data_in, delta_time, NULL);
 800aa76:	2200      	movs	r2, #0
 800aa78:	eeb0 0a48 	vmov.f32	s0, s16
 800aa7c:	4629      	mov	r1, r5
 800aa7e:	4620      	mov	r0, r4
 800aa80:	f00c f896 	bl	8016bb0 <MotionFX_update>
 800aa84:	e7ec      	b.n	800aa60 <MotionFX_manager_run+0x18>
 800aa86:	bf00      	nop
 800aa88:	200025b4 	.word	0x200025b4
 800aa8c:	20001464 	.word	0x20001464

0800aa90 <MotionFX_manager_get_version>:
 * @param  version  Library version string (must be array of 35 char)
 * @param  length  Library version string length
 * @retval None
 */
void MotionFX_manager_get_version(char *version, int *length)
{
 800aa90:	b510      	push	{r4, lr}
 800aa92:	460c      	mov	r4, r1
#if ((defined (USE_STM32F4XX_NUCLEO)) || (defined (USE_STM32L4XX_NUCLEO)) || (defined (USE_STM32L1XX_NUCLEO)))
  *length = (int)MotionFX_GetLibVersion(version);
 800aa94:	f00d fc3e 	bl	8018314 <MotionFX_GetLibVersion>
 800aa98:	6020      	str	r0, [r4, #0]
 800aa9a:	bd10      	pop	{r4, pc}

0800aa9c <MotionFX_manager_MagCal_run>:
 * @param  None
 * @retval None
 */
#if ((defined (USE_STM32F4XX_NUCLEO)) || (defined (USE_STM32L4XX_NUCLEO)) || (defined (USE_STM32L1XX_NUCLEO)))
void MotionFX_manager_MagCal_run(MFX_MagCal_input_t *data_in, MFX_MagCal_output_t *data_out)
{
 800aa9c:	b510      	push	{r4, lr}
 800aa9e:	460c      	mov	r4, r1
  MotionFX_MagCal_run(data_in);
 800aaa0:	f00d faec 	bl	801807c <MotionFX_MagCal_run>
  MotionFX_MagCal_getParams(data_out);
 800aaa4:	4620      	mov	r0, r4
 800aaa6:	f00d fc07 	bl	80182b8 <MotionFX_MagCal_getParams>
 800aaaa:	bd10      	pop	{r4, pc}

0800aaac <MotionFX_manager_MagCal_start>:
 * @brief  Start magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_start(int sampletime)
{
 800aaac:	b508      	push	{r3, lr}
#if ((defined (USE_STM32F4XX_NUCLEO)) || (defined (USE_STM32L4XX_NUCLEO)) || (defined (USE_STM32L1XX_NUCLEO)))
  MotionFX_MagCal_init(sampletime, 1);
 800aaae:	2101      	movs	r1, #1
 800aab0:	f00d f9e6 	bl	8017e80 <MotionFX_MagCal_init>
 800aab4:	bd08      	pop	{r3, pc}

0800aab6 <MotionFX_manager_MagCal_stop>:
 * @brief  Stop magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_stop(int sampletime)
{
 800aab6:	b508      	push	{r3, lr}
#if ((defined (USE_STM32F4XX_NUCLEO)) || (defined (USE_STM32L4XX_NUCLEO)) || (defined (USE_STM32L1XX_NUCLEO)))
  MotionFX_MagCal_init(sampletime, 0);
 800aab8:	2100      	movs	r1, #0
 800aaba:	f00d f9e1 	bl	8017e80 <MotionFX_MagCal_init>
 800aabe:	bd08      	pop	{r3, pc}

0800aac0 <MotionFX_LoadMagCalFromNVM>:
  RecallCalibrationFromMemory(dataSize / 4, (uint32_t *) data);
  return (char)0;
#else
  return (char)1;
#endif
}
 800aac0:	2001      	movs	r0, #1
 800aac2:	4770      	bx	lr

0800aac4 <MotionFX_SaveMagCalInNVM>:
  SaveCalibrationToMemory(dataSize / 4, (uint32_t *) data);
  return (char)0;
#else
  return (char)1;
#endif
}
 800aac4:	2001      	movs	r0, #1
 800aac6:	4770      	bx	lr

0800aac8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800aac8:	b500      	push	{lr}
 800aaca:	b085      	sub	sp, #20
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800aacc:	2300      	movs	r3, #0
 800aace:	9300      	str	r3, [sp, #0]
 800aad0:	9301      	str	r3, [sp, #4]
 800aad2:	9302      	str	r3, [sp, #8]
 800aad4:	9303      	str	r3, [sp, #12]

	/**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800aad6:	4814      	ldr	r0, [pc, #80]	; (800ab28 <MX_ADC1_Init+0x60>)
 800aad8:	4a14      	ldr	r2, [pc, #80]	; (800ab2c <MX_ADC1_Init+0x64>)
 800aada:	6002      	str	r2, [r0, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800aadc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800aae0:	6042      	str	r2, [r0, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800aae2:	6083      	str	r3, [r0, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 800aae4:	6103      	str	r3, [r0, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800aae6:	6183      	str	r3, [r0, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800aae8:	6203      	str	r3, [r0, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800aaea:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800aaec:	4a10      	ldr	r2, [pc, #64]	; (800ab30 <MX_ADC1_Init+0x68>)
 800aaee:	6282      	str	r2, [r0, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800aaf0:	60c3      	str	r3, [r0, #12]
	hadc1.Init.NbrOfConversion = 1;
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	61c2      	str	r2, [r0, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800aaf6:	6303      	str	r3, [r0, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800aaf8:	6142      	str	r2, [r0, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800aafa:	f7fa fcc9 	bl	8005490 <HAL_ADC_Init>
 800aafe:	b968      	cbnz	r0, 800ab1c <MX_ADC1_Init+0x54>
		Error_Handler();
	}
	/**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 800ab00:	2306      	movs	r3, #6
 800ab02:	9300      	str	r3, [sp, #0]
	sConfig.Rank = 1;
 800ab04:	2301      	movs	r3, #1
 800ab06:	9301      	str	r3, [sp, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	9302      	str	r3, [sp, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800ab0c:	4669      	mov	r1, sp
 800ab0e:	4806      	ldr	r0, [pc, #24]	; (800ab28 <MX_ADC1_Init+0x60>)
 800ab10:	f7fa fe6c 	bl	80057ec <HAL_ADC_ConfigChannel>
 800ab14:	b928      	cbnz	r0, 800ab22 <MX_ADC1_Init+0x5a>
		Error_Handler();
	}
}
 800ab16:	b005      	add	sp, #20
 800ab18:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 800ab1c:	f001 fa14 	bl	800bf48 <Error_Handler>
 800ab20:	e7ee      	b.n	800ab00 <MX_ADC1_Init+0x38>
		Error_Handler();
 800ab22:	f001 fa11 	bl	800bf48 <Error_Handler>
}
 800ab26:	e7f6      	b.n	800ab16 <MX_ADC1_Init+0x4e>
 800ab28:	20002914 	.word	0x20002914
 800ab2c:	40012000 	.word	0x40012000
 800ab30:	0f000001 	.word	0x0f000001

0800ab34 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800ab34:	b510      	push	{r4, lr}
 800ab36:	b088      	sub	sp, #32
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800ab38:	2300      	movs	r3, #0
 800ab3a:	9303      	str	r3, [sp, #12]
 800ab3c:	9304      	str	r3, [sp, #16]
 800ab3e:	9305      	str	r3, [sp, #20]
 800ab40:	9306      	str	r3, [sp, #24]
 800ab42:	9307      	str	r3, [sp, #28]
	if (adcHandle->Instance == ADC1) {
 800ab44:	6802      	ldr	r2, [r0, #0]
 800ab46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ab4a:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	d001      	beq.n	800ab56 <HAL_ADC_MspInit+0x22>
		HAL_NVIC_EnableIRQ(ADC_IRQn);
		/* USER CODE BEGIN ADC1_MspInit 1 */

		/* USER CODE END ADC1_MspInit 1 */
	}
}
 800ab52:	b008      	add	sp, #32
 800ab54:	bd10      	pop	{r4, pc}
		__HAL_RCC_ADC1_CLK_ENABLE();
 800ab56:	2400      	movs	r4, #0
 800ab58:	9401      	str	r4, [sp, #4]
 800ab5a:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 800ab5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ab60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ab64:	645a      	str	r2, [r3, #68]	; 0x44
 800ab66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ab68:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800ab6c:	9201      	str	r2, [sp, #4]
 800ab6e:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800ab70:	9402      	str	r4, [sp, #8]
 800ab72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab74:	f042 0201 	orr.w	r2, r2, #1
 800ab78:	631a      	str	r2, [r3, #48]	; 0x30
 800ab7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab7c:	f003 0301 	and.w	r3, r3, #1
 800ab80:	9302      	str	r3, [sp, #8]
 800ab82:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Pin = ADC6_Pin;
 800ab84:	2340      	movs	r3, #64	; 0x40
 800ab86:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ab88:	2303      	movs	r3, #3
 800ab8a:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(ADC6_GPIO_Port, &GPIO_InitStruct);
 800ab8c:	a903      	add	r1, sp, #12
 800ab8e:	4806      	ldr	r0, [pc, #24]	; (800aba8 <HAL_ADC_MspInit+0x74>)
 800ab90:	f7fb fb4c 	bl	800622c <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800ab94:	4622      	mov	r2, r4
 800ab96:	4621      	mov	r1, r4
 800ab98:	2012      	movs	r0, #18
 800ab9a:	f7fa ff2d 	bl	80059f8 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(ADC_IRQn);
 800ab9e:	2012      	movs	r0, #18
 800aba0:	f7fa ff6e 	bl	8005a80 <HAL_NVIC_EnableIRQ>
}
 800aba4:	e7d5      	b.n	800ab52 <HAL_ADC_MspInit+0x1e>
 800aba6:	bf00      	nop
 800aba8:	40020000 	.word	0x40020000
 800abac:	00000000 	.word	0x00000000

0800abb0 <floatToInt>:
  * @param  out_value the pointer to the output integer structure
  * @param  dec_prec the decimal precision to be used
  * @retval None
  */
static void floatToInt(float in, displayFloatToInt_t *out_value, int32_t dec_prec)
{
 800abb0:	b5d0      	push	{r4, r6, r7, lr}
 800abb2:	ed2d 8b02 	vpush	{d8}
 800abb6:	4604      	mov	r4, r0
  if(in >= 0.0f)
 800abb8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800abbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abc0:	db22      	blt.n	800ac08 <floatToInt+0x58>
  {
    out_value->sign = 0;
 800abc2:	2300      	movs	r3, #0
 800abc4:	7003      	strb	r3, [r0, #0]
  {
    out_value->sign = 1;
    in = -in;
  }
  
  out_value->out_int = (int32_t)in;
 800abc6:	eebd 8ac0 	vcvt.s32.f32	s16, s0
 800abca:	ed84 8a01 	vstr	s16, [r4, #4]
  in = in - (float)(out_value->out_int);
 800abce:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 800abd2:	ee30 8a48 	vsub.f32	s16, s0, s16
  out_value->out_dec = (int32_t)trunc(in * pow(10, dec_prec));
 800abd6:	4608      	mov	r0, r1
 800abd8:	f7f5 fcac 	bl	8000534 <__aeabi_i2d>
 800abdc:	ec41 0b11 	vmov	d1, r0, r1
 800abe0:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 800ac18 <floatToInt+0x68>
 800abe4:	f00d fde4 	bl	80187b0 <pow>
 800abe8:	ec57 6b10 	vmov	r6, r7, d0
 800abec:	ee18 0a10 	vmov	r0, s16
 800abf0:	f7f5 fcb2 	bl	8000558 <__aeabi_f2d>
 800abf4:	4632      	mov	r2, r6
 800abf6:	463b      	mov	r3, r7
 800abf8:	f7f5 fd02 	bl	8000600 <__aeabi_dmul>
 800abfc:	f7f5 ffb0 	bl	8000b60 <__aeabi_d2iz>
 800ac00:	60a0      	str	r0, [r4, #8]
}
 800ac02:	ecbd 8b02 	vpop	{d8}
 800ac06:	bdd0      	pop	{r4, r6, r7, pc}
    out_value->sign = 1;
 800ac08:	2301      	movs	r3, #1
 800ac0a:	7003      	strb	r3, [r0, #0]
    in = -in;
 800ac0c:	eeb1 0a40 	vneg.f32	s0, s0
 800ac10:	e7d9      	b.n	800abc6 <floatToInt+0x16>
 800ac12:	bf00      	nop
 800ac14:	f3af 8000 	nop.w
 800ac18:	00000000 	.word	0x00000000
 800ac1c:	40240000 	.word	0x40240000

0800ac20 <MX_IKS01A2_DataLogTerminal_Init>:
{
 800ac20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac22:	b089      	sub	sp, #36	; 0x24
  BSP_LED_Init(LED2);
 800ac24:	2000      	movs	r0, #0
 800ac26:	f7fa f80f 	bl	8004c48 <BSP_LED_Init>
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 800ac2a:	2101      	movs	r1, #1
 800ac2c:	2000      	movs	r0, #0
 800ac2e:	f7fa f84b 	bl	8004cc8 <BSP_PB_Init>
  IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_ACCELERO | MOTION_GYRO);
 800ac32:	2103      	movs	r1, #3
 800ac34:	2000      	movs	r0, #0
 800ac36:	f7f9 fe55 	bl	80048e4 <IKS01A2_MOTION_SENSOR_Init>
  IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM303AGR_ACC_0, MOTION_ACCELERO);
 800ac3a:	2102      	movs	r1, #2
 800ac3c:	2001      	movs	r0, #1
 800ac3e:	f7f9 fe51 	bl	80048e4 <IKS01A2_MOTION_SENSOR_Init>
  IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 800ac42:	2104      	movs	r1, #4
 800ac44:	2002      	movs	r0, #2
 800ac46:	f7f9 fe4d 	bl	80048e4 <IKS01A2_MOTION_SENSOR_Init>
  for(i = 0; i < IKS01A2_MOTION_INSTANCES_NBR; i++)
 800ac4a:	2600      	movs	r6, #0
 800ac4c:	e05d      	b.n	800ad0a <MX_IKS01A2_DataLogTerminal_Init+0xea>
    IKS01A2_MOTION_SENSOR_GetCapabilities(i, &MotionCapabilities[i]);
 800ac4e:	4f62      	ldr	r7, [pc, #392]	; (800add8 <MX_IKS01A2_DataLogTerminal_Init+0x1b8>)
 800ac50:	00f3      	lsls	r3, r6, #3
 800ac52:	1b9b      	subs	r3, r3, r6
 800ac54:	009d      	lsls	r5, r3, #2
 800ac56:	197c      	adds	r4, r7, r5
 800ac58:	4621      	mov	r1, r4
 800ac5a:	4630      	mov	r0, r6
 800ac5c:	f7f9 ff0a 	bl	8004a74 <IKS01A2_MOTION_SENSOR_GetCapabilities>
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 800ac60:	5d7b      	ldrb	r3, [r7, r5]
 800ac62:	7862      	ldrb	r2, [r4, #1]
 800ac64:	78a1      	ldrb	r1, [r4, #2]
 800ac66:	78e0      	ldrb	r0, [r4, #3]
    snprintf(dataOut, MAX_BUF_SIZE,
 800ac68:	4d5c      	ldr	r5, [pc, #368]	; (800addc <MX_IKS01A2_DataLogTerminal_Init+0x1bc>)
 800ac6a:	9003      	str	r0, [sp, #12]
 800ac6c:	9102      	str	r1, [sp, #8]
 800ac6e:	9201      	str	r2, [sp, #4]
 800ac70:	9300      	str	r3, [sp, #0]
 800ac72:	4633      	mov	r3, r6
 800ac74:	4a5a      	ldr	r2, [pc, #360]	; (800ade0 <MX_IKS01A2_DataLogTerminal_Init+0x1c0>)
 800ac76:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ac7a:	4628      	mov	r0, r5
 800ac7c:	f011 fab6 	bl	801c1ec <sniprintf>
    printf("%s", dataOut);
 800ac80:	4f58      	ldr	r7, [pc, #352]	; (800ade4 <MX_IKS01A2_DataLogTerminal_Init+0x1c4>)
 800ac82:	4629      	mov	r1, r5
 800ac84:	4638      	mov	r0, r7
 800ac86:	f011 f977 	bl	801bf78 <iprintf>
    floatToInt(MotionCapabilities[i].AccMaxOdr, &out_value_odr, 3);
 800ac8a:	2103      	movs	r1, #3
 800ac8c:	a805      	add	r0, sp, #20
 800ac8e:	ed94 0a05 	vldr	s0, [r4, #20]
 800ac92:	f7ff ff8d 	bl	800abb0 <floatToInt>
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 800ac96:	68a3      	ldr	r3, [r4, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 800ac98:	9301      	str	r3, [sp, #4]
 800ac9a:	9b07      	ldr	r3, [sp, #28]
 800ac9c:	9300      	str	r3, [sp, #0]
 800ac9e:	9b06      	ldr	r3, [sp, #24]
 800aca0:	4a51      	ldr	r2, [pc, #324]	; (800ade8 <MX_IKS01A2_DataLogTerminal_Init+0x1c8>)
 800aca2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800aca6:	4628      	mov	r0, r5
 800aca8:	f011 faa0 	bl	801c1ec <sniprintf>
    printf("%s", dataOut);
 800acac:	4629      	mov	r1, r5
 800acae:	4638      	mov	r0, r7
 800acb0:	f011 f962 	bl	801bf78 <iprintf>
    floatToInt(MotionCapabilities[i].GyroMaxOdr, &out_value_odr, 3);
 800acb4:	2103      	movs	r1, #3
 800acb6:	a805      	add	r0, sp, #20
 800acb8:	ed94 0a04 	vldr	s0, [r4, #16]
 800acbc:	f7ff ff78 	bl	800abb0 <floatToInt>
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 800acc0:	6863      	ldr	r3, [r4, #4]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 800acc2:	9301      	str	r3, [sp, #4]
 800acc4:	9b07      	ldr	r3, [sp, #28]
 800acc6:	9300      	str	r3, [sp, #0]
 800acc8:	9b06      	ldr	r3, [sp, #24]
 800acca:	4a48      	ldr	r2, [pc, #288]	; (800adec <MX_IKS01A2_DataLogTerminal_Init+0x1cc>)
 800accc:	f44f 7180 	mov.w	r1, #256	; 0x100
 800acd0:	4628      	mov	r0, r5
 800acd2:	f011 fa8b 	bl	801c1ec <sniprintf>
    printf("%s", dataOut);
 800acd6:	4629      	mov	r1, r5
 800acd8:	4638      	mov	r0, r7
 800acda:	f011 f94d 	bl	801bf78 <iprintf>
    floatToInt(MotionCapabilities[i].MagMaxOdr, &out_value_odr, 3);
 800acde:	2103      	movs	r1, #3
 800ace0:	a805      	add	r0, sp, #20
 800ace2:	ed94 0a06 	vldr	s0, [r4, #24]
 800ace6:	f7ff ff63 	bl	800abb0 <floatToInt>
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 800acea:	68e3      	ldr	r3, [r4, #12]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 800acec:	9301      	str	r3, [sp, #4]
 800acee:	9b07      	ldr	r3, [sp, #28]
 800acf0:	9300      	str	r3, [sp, #0]
 800acf2:	9b06      	ldr	r3, [sp, #24]
 800acf4:	4a3e      	ldr	r2, [pc, #248]	; (800adf0 <MX_IKS01A2_DataLogTerminal_Init+0x1d0>)
 800acf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800acfa:	4628      	mov	r0, r5
 800acfc:	f011 fa76 	bl	801c1ec <sniprintf>
    printf("%s", dataOut);
 800ad00:	4629      	mov	r1, r5
 800ad02:	4638      	mov	r0, r7
 800ad04:	f011 f938 	bl	801bf78 <iprintf>
  for(i = 0; i < IKS01A2_MOTION_INSTANCES_NBR; i++)
 800ad08:	3601      	adds	r6, #1
 800ad0a:	2e02      	cmp	r6, #2
 800ad0c:	d99f      	bls.n	800ac4e <MX_IKS01A2_DataLogTerminal_Init+0x2e>
  IKS01A2_ENV_SENSOR_Init(IKS01A2_HTS221_0, ENV_TEMPERATURE | ENV_HUMIDITY);
 800ad0e:	2105      	movs	r1, #5
 800ad10:	2000      	movs	r0, #0
 800ad12:	f7f9 fb2f 	bl	8004374 <IKS01A2_ENV_SENSOR_Init>
  IKS01A2_ENV_SENSOR_Init(IKS01A2_LPS22HB_0, ENV_TEMPERATURE | ENV_PRESSURE);
 800ad16:	2103      	movs	r1, #3
 800ad18:	2001      	movs	r0, #1
 800ad1a:	f7f9 fb2b 	bl	8004374 <IKS01A2_ENV_SENSOR_Init>
  for(i = 0; i < IKS01A2_ENV_INSTANCES_NBR; i++)
 800ad1e:	2600      	movs	r6, #0
 800ad20:	e055      	b.n	800adce <MX_IKS01A2_DataLogTerminal_Init+0x1ae>
    IKS01A2_ENV_SENSOR_GetCapabilities(i, &EnvCapabilities[i]);
 800ad22:	4f34      	ldr	r7, [pc, #208]	; (800adf4 <MX_IKS01A2_DataLogTerminal_Init+0x1d4>)
 800ad24:	0134      	lsls	r4, r6, #4
 800ad26:	193d      	adds	r5, r7, r4
 800ad28:	4629      	mov	r1, r5
 800ad2a:	4630      	mov	r0, r6
 800ad2c:	f7f9 fbb6 	bl	800449c <IKS01A2_ENV_SENSOR_GetCapabilities>
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 800ad30:	5d3b      	ldrb	r3, [r7, r4]
 800ad32:	786a      	ldrb	r2, [r5, #1]
 800ad34:	78a9      	ldrb	r1, [r5, #2]
 800ad36:	78e8      	ldrb	r0, [r5, #3]
    snprintf(dataOut, MAX_BUF_SIZE,
 800ad38:	4c28      	ldr	r4, [pc, #160]	; (800addc <MX_IKS01A2_DataLogTerminal_Init+0x1bc>)
 800ad3a:	9003      	str	r0, [sp, #12]
 800ad3c:	9102      	str	r1, [sp, #8]
 800ad3e:	9201      	str	r2, [sp, #4]
 800ad40:	9300      	str	r3, [sp, #0]
 800ad42:	4633      	mov	r3, r6
 800ad44:	4a2c      	ldr	r2, [pc, #176]	; (800adf8 <MX_IKS01A2_DataLogTerminal_Init+0x1d8>)
 800ad46:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ad4a:	4620      	mov	r0, r4
 800ad4c:	f011 fa4e 	bl	801c1ec <sniprintf>
    printf("%s", dataOut);
 800ad50:	4f24      	ldr	r7, [pc, #144]	; (800ade4 <MX_IKS01A2_DataLogTerminal_Init+0x1c4>)
 800ad52:	4621      	mov	r1, r4
 800ad54:	4638      	mov	r0, r7
 800ad56:	f011 f90f 	bl	801bf78 <iprintf>
    floatToInt(EnvCapabilities[i].TempMaxOdr, &out_value_odr, 3);
 800ad5a:	2103      	movs	r1, #3
 800ad5c:	a805      	add	r0, sp, #20
 800ad5e:	ed95 0a02 	vldr	s0, [r5, #8]
 800ad62:	f7ff ff25 	bl	800abb0 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX TEMP ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 800ad66:	9b07      	ldr	r3, [sp, #28]
 800ad68:	9300      	str	r3, [sp, #0]
 800ad6a:	9b06      	ldr	r3, [sp, #24]
 800ad6c:	4a23      	ldr	r2, [pc, #140]	; (800adfc <MX_IKS01A2_DataLogTerminal_Init+0x1dc>)
 800ad6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ad72:	4620      	mov	r0, r4
 800ad74:	f011 fa3a 	bl	801c1ec <sniprintf>
    printf("%s", dataOut);
 800ad78:	4621      	mov	r1, r4
 800ad7a:	4638      	mov	r0, r7
 800ad7c:	f011 f8fc 	bl	801bf78 <iprintf>
    floatToInt(EnvCapabilities[i].PressMaxOdr, &out_value_odr, 3);
 800ad80:	2103      	movs	r1, #3
 800ad82:	a805      	add	r0, sp, #20
 800ad84:	ed95 0a03 	vldr	s0, [r5, #12]
 800ad88:	f7ff ff12 	bl	800abb0 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX PRESS ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 800ad8c:	9b07      	ldr	r3, [sp, #28]
 800ad8e:	9300      	str	r3, [sp, #0]
 800ad90:	9b06      	ldr	r3, [sp, #24]
 800ad92:	4a1b      	ldr	r2, [pc, #108]	; (800ae00 <MX_IKS01A2_DataLogTerminal_Init+0x1e0>)
 800ad94:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ad98:	4620      	mov	r0, r4
 800ad9a:	f011 fa27 	bl	801c1ec <sniprintf>
    printf("%s", dataOut);
 800ad9e:	4621      	mov	r1, r4
 800ada0:	4638      	mov	r0, r7
 800ada2:	f011 f8e9 	bl	801bf78 <iprintf>
    floatToInt(EnvCapabilities[i].HumMaxOdr, &out_value_odr, 3);
 800ada6:	2103      	movs	r1, #3
 800ada8:	a805      	add	r0, sp, #20
 800adaa:	ed95 0a01 	vldr	s0, [r5, #4]
 800adae:	f7ff feff 	bl	800abb0 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX HUM ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int, (int)out_value_odr.out_dec);
 800adb2:	9b07      	ldr	r3, [sp, #28]
 800adb4:	9300      	str	r3, [sp, #0]
 800adb6:	9b06      	ldr	r3, [sp, #24]
 800adb8:	4a12      	ldr	r2, [pc, #72]	; (800ae04 <MX_IKS01A2_DataLogTerminal_Init+0x1e4>)
 800adba:	f44f 7180 	mov.w	r1, #256	; 0x100
 800adbe:	4620      	mov	r0, r4
 800adc0:	f011 fa14 	bl	801c1ec <sniprintf>
    printf("%s", dataOut);
 800adc4:	4621      	mov	r1, r4
 800adc6:	4638      	mov	r0, r7
 800adc8:	f011 f8d6 	bl	801bf78 <iprintf>
  for(i = 0; i < IKS01A2_ENV_INSTANCES_NBR; i++)
 800adcc:	3601      	adds	r6, #1
 800adce:	2e01      	cmp	r6, #1
 800add0:	d9a7      	bls.n	800ad22 <MX_IKS01A2_DataLogTerminal_Init+0x102>
}
 800add2:	b009      	add	sp, #36	; 0x24
 800add4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800add6:	bf00      	nop
 800add8:	20002614 	.word	0x20002614
 800addc:	2000266c 	.word	0x2000266c
 800ade0:	0801e490 	.word	0x0801e490
 800ade4:	0801e504 	.word	0x0801e504
 800ade8:	0801e508 	.word	0x0801e508
 800adec:	0801e534 	.word	0x0801e534
 800adf0:	0801e564 	.word	0x0801e564
 800adf4:	200025f4 	.word	0x200025f4
 800adf8:	0801e590 	.word	0x0801e590
 800adfc:	0801e604 	.word	0x0801e604
 800ae00:	0801e620 	.word	0x0801e620
 800ae04:	0801e640 	.word	0x0801e640

0800ae08 <Accelero_Sensor_Handler>:
  * @brief  Handles the accelerometer axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Accelero_Sensor_Handler(uint32_t Instance)
{
 800ae08:	b510      	push	{r4, lr}
 800ae0a:	b090      	sub	sp, #64	; 0x40
 800ae0c:	4604      	mov	r4, r0
  int32_t fullScale;
  IKS01A2_MOTION_SENSOR_Axes_t acceleration;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  if (IKS01A2_MOTION_SENSOR_GetAxes(Instance, MOTION_ACCELERO, &acceleration))
 800ae0e:	aa0b      	add	r2, sp, #44	; 0x2c
 800ae10:	2102      	movs	r1, #2
 800ae12:	f7f9 fe8f 	bl	8004b34 <IKS01A2_MOTION_SENSOR_GetAxes>
 800ae16:	2800      	cmp	r0, #0
 800ae18:	d042      	beq.n	800aea0 <Accelero_Sensor_Handler+0x98>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC[%d]: Error\r\n", (int)Instance);
 800ae1a:	4623      	mov	r3, r4
 800ae1c:	4a3c      	ldr	r2, [pc, #240]	; (800af10 <Accelero_Sensor_Handler+0x108>)
 800ae1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ae22:	483c      	ldr	r0, [pc, #240]	; (800af14 <Accelero_Sensor_Handler+0x10c>)
 800ae24:	f011 f9e2 	bl	801c1ec <sniprintf>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
  }

  printf("%s", dataOut);
 800ae28:	493a      	ldr	r1, [pc, #232]	; (800af14 <Accelero_Sensor_Handler+0x10c>)
 800ae2a:	483b      	ldr	r0, [pc, #236]	; (800af18 <Accelero_Sensor_Handler+0x110>)
 800ae2c:	f011 f8a4 	bl	801bf78 <iprintf>

  if (verbose == 1)
  {
    if (IKS01A2_MOTION_SENSOR_ReadID(Instance, &whoami))
 800ae30:	f10d 011f 	add.w	r1, sp, #31
 800ae34:	4620      	mov	r0, r4
 800ae36:	f7f9 fe37 	bl	8004aa8 <IKS01A2_MOTION_SENSOR_ReadID>
 800ae3a:	2800      	cmp	r0, #0
 800ae3c:	d040      	beq.n	800aec0 <Accelero_Sensor_Handler+0xb8>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 800ae3e:	4623      	mov	r3, r4
 800ae40:	4a36      	ldr	r2, [pc, #216]	; (800af1c <Accelero_Sensor_Handler+0x114>)
 800ae42:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ae46:	4833      	ldr	r0, [pc, #204]	; (800af14 <Accelero_Sensor_Handler+0x10c>)
 800ae48:	f011 f9d0 	bl	801c1ec <sniprintf>
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
    }

    printf("%s", dataOut);
 800ae4c:	4931      	ldr	r1, [pc, #196]	; (800af14 <Accelero_Sensor_Handler+0x10c>)
 800ae4e:	4832      	ldr	r0, [pc, #200]	; (800af18 <Accelero_Sensor_Handler+0x110>)
 800ae50:	f011 f892 	bl	801bf78 <iprintf>

    if (IKS01A2_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_ACCELERO, &odr))
 800ae54:	aa0f      	add	r2, sp, #60	; 0x3c
 800ae56:	2102      	movs	r1, #2
 800ae58:	4620      	mov	r0, r4
 800ae5a:	f7f9 fe99 	bl	8004b90 <IKS01A2_MOTION_SENSOR_GetOutputDataRate>
 800ae5e:	2800      	cmp	r0, #0
 800ae60:	d039      	beq.n	800aed6 <Accelero_Sensor_Handler+0xce>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 800ae62:	4623      	mov	r3, r4
 800ae64:	4a2e      	ldr	r2, [pc, #184]	; (800af20 <Accelero_Sensor_Handler+0x118>)
 800ae66:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ae6a:	482a      	ldr	r0, [pc, #168]	; (800af14 <Accelero_Sensor_Handler+0x10c>)
 800ae6c:	f011 f9be 	bl	801c1ec <sniprintf>
      floatToInt(odr, &out_value, 3);
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
               (int)out_value.out_dec);
    }

    printf("%s", dataOut);
 800ae70:	4928      	ldr	r1, [pc, #160]	; (800af14 <Accelero_Sensor_Handler+0x10c>)
 800ae72:	4829      	ldr	r0, [pc, #164]	; (800af18 <Accelero_Sensor_Handler+0x110>)
 800ae74:	f011 f880 	bl	801bf78 <iprintf>

    if (IKS01A2_MOTION_SENSOR_GetFullScale(Instance, MOTION_ACCELERO, &fullScale))
 800ae78:	aa0e      	add	r2, sp, #56	; 0x38
 800ae7a:	2102      	movs	r1, #2
 800ae7c:	4620      	mov	r0, r4
 800ae7e:	f7f9 feb5 	bl	8004bec <IKS01A2_MOTION_SENSOR_GetFullScale>
 800ae82:	2800      	cmp	r0, #0
 800ae84:	d039      	beq.n	800aefa <Accelero_Sensor_Handler+0xf2>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 800ae86:	4623      	mov	r3, r4
 800ae88:	4a26      	ldr	r2, [pc, #152]	; (800af24 <Accelero_Sensor_Handler+0x11c>)
 800ae8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ae8e:	4821      	ldr	r0, [pc, #132]	; (800af14 <Accelero_Sensor_Handler+0x10c>)
 800ae90:	f011 f9ac 	bl	801c1ec <sniprintf>
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d g\r\n", (int)Instance, (int)fullScale);
    }

    printf("%s", dataOut);
 800ae94:	491f      	ldr	r1, [pc, #124]	; (800af14 <Accelero_Sensor_Handler+0x10c>)
 800ae96:	4820      	ldr	r0, [pc, #128]	; (800af18 <Accelero_Sensor_Handler+0x110>)
 800ae98:	f011 f86e 	bl	801bf78 <iprintf>
  }
}
 800ae9c:	b010      	add	sp, #64	; 0x40
 800ae9e:	bd10      	pop	{r4, pc}
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 800aea0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aea2:	9304      	str	r3, [sp, #16]
 800aea4:	9403      	str	r4, [sp, #12]
 800aea6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aea8:	9302      	str	r3, [sp, #8]
 800aeaa:	9401      	str	r4, [sp, #4]
 800aeac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aeae:	9300      	str	r3, [sp, #0]
 800aeb0:	4623      	mov	r3, r4
 800aeb2:	4a1d      	ldr	r2, [pc, #116]	; (800af28 <Accelero_Sensor_Handler+0x120>)
 800aeb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800aeb8:	4816      	ldr	r0, [pc, #88]	; (800af14 <Accelero_Sensor_Handler+0x10c>)
 800aeba:	f011 f997 	bl	801c1ec <sniprintf>
 800aebe:	e7b3      	b.n	800ae28 <Accelero_Sensor_Handler+0x20>
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 800aec0:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800aec4:	9300      	str	r3, [sp, #0]
 800aec6:	4623      	mov	r3, r4
 800aec8:	4a18      	ldr	r2, [pc, #96]	; (800af2c <Accelero_Sensor_Handler+0x124>)
 800aeca:	f44f 7180 	mov.w	r1, #256	; 0x100
 800aece:	4811      	ldr	r0, [pc, #68]	; (800af14 <Accelero_Sensor_Handler+0x10c>)
 800aed0:	f011 f98c 	bl	801c1ec <sniprintf>
 800aed4:	e7ba      	b.n	800ae4c <Accelero_Sensor_Handler+0x44>
      floatToInt(odr, &out_value, 3);
 800aed6:	2103      	movs	r1, #3
 800aed8:	a808      	add	r0, sp, #32
 800aeda:	ed9d 0a0f 	vldr	s0, [sp, #60]	; 0x3c
 800aede:	f7ff fe67 	bl	800abb0 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800aee2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aee4:	9301      	str	r3, [sp, #4]
 800aee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aee8:	9300      	str	r3, [sp, #0]
 800aeea:	4623      	mov	r3, r4
 800aeec:	4a10      	ldr	r2, [pc, #64]	; (800af30 <Accelero_Sensor_Handler+0x128>)
 800aeee:	f44f 7180 	mov.w	r1, #256	; 0x100
 800aef2:	4808      	ldr	r0, [pc, #32]	; (800af14 <Accelero_Sensor_Handler+0x10c>)
 800aef4:	f011 f97a 	bl	801c1ec <sniprintf>
 800aef8:	e7ba      	b.n	800ae70 <Accelero_Sensor_Handler+0x68>
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d g\r\n", (int)Instance, (int)fullScale);
 800aefa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aefc:	9300      	str	r3, [sp, #0]
 800aefe:	4623      	mov	r3, r4
 800af00:	4a0c      	ldr	r2, [pc, #48]	; (800af34 <Accelero_Sensor_Handler+0x12c>)
 800af02:	f44f 7180 	mov.w	r1, #256	; 0x100
 800af06:	4803      	ldr	r0, [pc, #12]	; (800af14 <Accelero_Sensor_Handler+0x10c>)
 800af08:	f011 f970 	bl	801c1ec <sniprintf>
 800af0c:	e7c2      	b.n	800ae94 <Accelero_Sensor_Handler+0x8c>
 800af0e:	bf00      	nop
 800af10:	0801e340 	.word	0x0801e340
 800af14:	2000266c 	.word	0x2000266c
 800af18:	0801e504 	.word	0x0801e504
 800af1c:	0801e384 	.word	0x0801e384
 800af20:	0801e3ac 	.word	0x0801e3ac
 800af24:	0801e3d8 	.word	0x0801e3d8
 800af28:	0801e354 	.word	0x0801e354
 800af2c:	0801e398 	.word	0x0801e398
 800af30:	0801e3c0 	.word	0x0801e3c0
 800af34:	0801e3e8 	.word	0x0801e3e8

0800af38 <Gyro_Sensor_Handler>:
  * @brief  Handles the gyroscope axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Gyro_Sensor_Handler(uint32_t Instance)
{
 800af38:	b510      	push	{r4, lr}
 800af3a:	b090      	sub	sp, #64	; 0x40
 800af3c:	4604      	mov	r4, r0
  int32_t fullScale;
  IKS01A2_MOTION_SENSOR_Axes_t angular_velocity;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  if (IKS01A2_MOTION_SENSOR_GetAxes(Instance, MOTION_GYRO, &angular_velocity))
 800af3e:	aa0b      	add	r2, sp, #44	; 0x2c
 800af40:	2101      	movs	r1, #1
 800af42:	f7f9 fdf7 	bl	8004b34 <IKS01A2_MOTION_SENSOR_GetAxes>
 800af46:	2800      	cmp	r0, #0
 800af48:	d042      	beq.n	800afd0 <Gyro_Sensor_Handler+0x98>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR[%d]: Error\r\n", (int)Instance);
 800af4a:	4623      	mov	r3, r4
 800af4c:	4a3c      	ldr	r2, [pc, #240]	; (800b040 <Gyro_Sensor_Handler+0x108>)
 800af4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800af52:	483c      	ldr	r0, [pc, #240]	; (800b044 <Gyro_Sensor_Handler+0x10c>)
 800af54:	f011 f94a 	bl	801c1ec <sniprintf>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
  }

  printf("%s", dataOut);
 800af58:	493a      	ldr	r1, [pc, #232]	; (800b044 <Gyro_Sensor_Handler+0x10c>)
 800af5a:	483b      	ldr	r0, [pc, #236]	; (800b048 <Gyro_Sensor_Handler+0x110>)
 800af5c:	f011 f80c 	bl	801bf78 <iprintf>

  if (verbose == 1)
  {
    if (IKS01A2_MOTION_SENSOR_ReadID(Instance, &whoami))
 800af60:	f10d 011f 	add.w	r1, sp, #31
 800af64:	4620      	mov	r0, r4
 800af66:	f7f9 fd9f 	bl	8004aa8 <IKS01A2_MOTION_SENSOR_ReadID>
 800af6a:	2800      	cmp	r0, #0
 800af6c:	d040      	beq.n	800aff0 <Gyro_Sensor_Handler+0xb8>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 800af6e:	4623      	mov	r3, r4
 800af70:	4a36      	ldr	r2, [pc, #216]	; (800b04c <Gyro_Sensor_Handler+0x114>)
 800af72:	f44f 7180 	mov.w	r1, #256	; 0x100
 800af76:	4833      	ldr	r0, [pc, #204]	; (800b044 <Gyro_Sensor_Handler+0x10c>)
 800af78:	f011 f938 	bl	801c1ec <sniprintf>
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
    }

    printf("%s", dataOut);
 800af7c:	4931      	ldr	r1, [pc, #196]	; (800b044 <Gyro_Sensor_Handler+0x10c>)
 800af7e:	4832      	ldr	r0, [pc, #200]	; (800b048 <Gyro_Sensor_Handler+0x110>)
 800af80:	f010 fffa 	bl	801bf78 <iprintf>

    if (IKS01A2_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_GYRO, &odr))
 800af84:	aa0f      	add	r2, sp, #60	; 0x3c
 800af86:	2101      	movs	r1, #1
 800af88:	4620      	mov	r0, r4
 800af8a:	f7f9 fe01 	bl	8004b90 <IKS01A2_MOTION_SENSOR_GetOutputDataRate>
 800af8e:	2800      	cmp	r0, #0
 800af90:	d039      	beq.n	800b006 <Gyro_Sensor_Handler+0xce>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 800af92:	4623      	mov	r3, r4
 800af94:	4a2e      	ldr	r2, [pc, #184]	; (800b050 <Gyro_Sensor_Handler+0x118>)
 800af96:	f44f 7180 	mov.w	r1, #256	; 0x100
 800af9a:	482a      	ldr	r0, [pc, #168]	; (800b044 <Gyro_Sensor_Handler+0x10c>)
 800af9c:	f011 f926 	bl	801c1ec <sniprintf>
      floatToInt(odr, &out_value, 3);
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
               (int)out_value.out_dec);
    }

    printf("%s", dataOut);
 800afa0:	4928      	ldr	r1, [pc, #160]	; (800b044 <Gyro_Sensor_Handler+0x10c>)
 800afa2:	4829      	ldr	r0, [pc, #164]	; (800b048 <Gyro_Sensor_Handler+0x110>)
 800afa4:	f010 ffe8 	bl	801bf78 <iprintf>

    if (IKS01A2_MOTION_SENSOR_GetFullScale(Instance, MOTION_GYRO, &fullScale))
 800afa8:	aa0e      	add	r2, sp, #56	; 0x38
 800afaa:	2101      	movs	r1, #1
 800afac:	4620      	mov	r0, r4
 800afae:	f7f9 fe1d 	bl	8004bec <IKS01A2_MOTION_SENSOR_GetFullScale>
 800afb2:	2800      	cmp	r0, #0
 800afb4:	d039      	beq.n	800b02a <Gyro_Sensor_Handler+0xf2>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 800afb6:	4623      	mov	r3, r4
 800afb8:	4a26      	ldr	r2, [pc, #152]	; (800b054 <Gyro_Sensor_Handler+0x11c>)
 800afba:	f44f 7180 	mov.w	r1, #256	; 0x100
 800afbe:	4821      	ldr	r0, [pc, #132]	; (800b044 <Gyro_Sensor_Handler+0x10c>)
 800afc0:	f011 f914 	bl	801c1ec <sniprintf>
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d dps\r\n", (int)Instance, (int)fullScale);
    }

    printf("%s", dataOut);
 800afc4:	491f      	ldr	r1, [pc, #124]	; (800b044 <Gyro_Sensor_Handler+0x10c>)
 800afc6:	4820      	ldr	r0, [pc, #128]	; (800b048 <Gyro_Sensor_Handler+0x110>)
 800afc8:	f010 ffd6 	bl	801bf78 <iprintf>
  }
}
 800afcc:	b010      	add	sp, #64	; 0x40
 800afce:	bd10      	pop	{r4, pc}
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 800afd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afd2:	9304      	str	r3, [sp, #16]
 800afd4:	9403      	str	r4, [sp, #12]
 800afd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afd8:	9302      	str	r3, [sp, #8]
 800afda:	9401      	str	r4, [sp, #4]
 800afdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afde:	9300      	str	r3, [sp, #0]
 800afe0:	4623      	mov	r3, r4
 800afe2:	4a1d      	ldr	r2, [pc, #116]	; (800b058 <Gyro_Sensor_Handler+0x120>)
 800afe4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800afe8:	4816      	ldr	r0, [pc, #88]	; (800b044 <Gyro_Sensor_Handler+0x10c>)
 800afea:	f011 f8ff 	bl	801c1ec <sniprintf>
 800afee:	e7b3      	b.n	800af58 <Gyro_Sensor_Handler+0x20>
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 800aff0:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800aff4:	9300      	str	r3, [sp, #0]
 800aff6:	4623      	mov	r3, r4
 800aff8:	4a18      	ldr	r2, [pc, #96]	; (800b05c <Gyro_Sensor_Handler+0x124>)
 800affa:	f44f 7180 	mov.w	r1, #256	; 0x100
 800affe:	4811      	ldr	r0, [pc, #68]	; (800b044 <Gyro_Sensor_Handler+0x10c>)
 800b000:	f011 f8f4 	bl	801c1ec <sniprintf>
 800b004:	e7ba      	b.n	800af7c <Gyro_Sensor_Handler+0x44>
      floatToInt(odr, &out_value, 3);
 800b006:	2103      	movs	r1, #3
 800b008:	a808      	add	r0, sp, #32
 800b00a:	ed9d 0a0f 	vldr	s0, [sp, #60]	; 0x3c
 800b00e:	f7ff fdcf 	bl	800abb0 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800b012:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b014:	9301      	str	r3, [sp, #4]
 800b016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b018:	9300      	str	r3, [sp, #0]
 800b01a:	4623      	mov	r3, r4
 800b01c:	4a10      	ldr	r2, [pc, #64]	; (800b060 <Gyro_Sensor_Handler+0x128>)
 800b01e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b022:	4808      	ldr	r0, [pc, #32]	; (800b044 <Gyro_Sensor_Handler+0x10c>)
 800b024:	f011 f8e2 	bl	801c1ec <sniprintf>
 800b028:	e7ba      	b.n	800afa0 <Gyro_Sensor_Handler+0x68>
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d dps\r\n", (int)Instance, (int)fullScale);
 800b02a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b02c:	9300      	str	r3, [sp, #0]
 800b02e:	4623      	mov	r3, r4
 800b030:	4a0c      	ldr	r2, [pc, #48]	; (800b064 <Gyro_Sensor_Handler+0x12c>)
 800b032:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b036:	4803      	ldr	r0, [pc, #12]	; (800b044 <Gyro_Sensor_Handler+0x10c>)
 800b038:	f011 f8d8 	bl	801c1ec <sniprintf>
 800b03c:	e7c2      	b.n	800afc4 <Gyro_Sensor_Handler+0x8c>
 800b03e:	bf00      	nop
 800b040:	0801e3f8 	.word	0x0801e3f8
 800b044:	2000266c 	.word	0x2000266c
 800b048:	0801e504 	.word	0x0801e504
 800b04c:	0801e384 	.word	0x0801e384
 800b050:	0801e3ac 	.word	0x0801e3ac
 800b054:	0801e3d8 	.word	0x0801e3d8
 800b058:	0801e40c 	.word	0x0801e40c
 800b05c:	0801e398 	.word	0x0801e398
 800b060:	0801e3c0 	.word	0x0801e3c0
 800b064:	0801e43c 	.word	0x0801e43c

0800b068 <Magneto_Sensor_Handler>:
  * @brief  Handles the magneto axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Magneto_Sensor_Handler(uint32_t Instance)
{
 800b068:	b510      	push	{r4, lr}
 800b06a:	b090      	sub	sp, #64	; 0x40
 800b06c:	4604      	mov	r4, r0
  int32_t fullScale;
  IKS01A2_MOTION_SENSOR_Axes_t magnetic_field;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  if (IKS01A2_MOTION_SENSOR_GetAxes(Instance, MOTION_MAGNETO, &magnetic_field))
 800b06e:	aa0b      	add	r2, sp, #44	; 0x2c
 800b070:	2104      	movs	r1, #4
 800b072:	f7f9 fd5f 	bl	8004b34 <IKS01A2_MOTION_SENSOR_GetAxes>
 800b076:	2800      	cmp	r0, #0
 800b078:	d042      	beq.n	800b100 <Magneto_Sensor_Handler+0x98>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG[%d]: Error\r\n", (int)Instance);
 800b07a:	4623      	mov	r3, r4
 800b07c:	4a3c      	ldr	r2, [pc, #240]	; (800b170 <Magneto_Sensor_Handler+0x108>)
 800b07e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b082:	483c      	ldr	r0, [pc, #240]	; (800b174 <Magneto_Sensor_Handler+0x10c>)
 800b084:	f011 f8b2 	bl	801c1ec <sniprintf>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
  }

  printf("%s", dataOut);
 800b088:	493a      	ldr	r1, [pc, #232]	; (800b174 <Magneto_Sensor_Handler+0x10c>)
 800b08a:	483b      	ldr	r0, [pc, #236]	; (800b178 <Magneto_Sensor_Handler+0x110>)
 800b08c:	f010 ff74 	bl	801bf78 <iprintf>

  if (verbose == 1)
  {
    if (IKS01A2_MOTION_SENSOR_ReadID(Instance, &whoami))
 800b090:	f10d 011f 	add.w	r1, sp, #31
 800b094:	4620      	mov	r0, r4
 800b096:	f7f9 fd07 	bl	8004aa8 <IKS01A2_MOTION_SENSOR_ReadID>
 800b09a:	2800      	cmp	r0, #0
 800b09c:	d040      	beq.n	800b120 <Magneto_Sensor_Handler+0xb8>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 800b09e:	4623      	mov	r3, r4
 800b0a0:	4a36      	ldr	r2, [pc, #216]	; (800b17c <Magneto_Sensor_Handler+0x114>)
 800b0a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b0a6:	4833      	ldr	r0, [pc, #204]	; (800b174 <Magneto_Sensor_Handler+0x10c>)
 800b0a8:	f011 f8a0 	bl	801c1ec <sniprintf>
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
    }

    printf("%s", dataOut);
 800b0ac:	4931      	ldr	r1, [pc, #196]	; (800b174 <Magneto_Sensor_Handler+0x10c>)
 800b0ae:	4832      	ldr	r0, [pc, #200]	; (800b178 <Magneto_Sensor_Handler+0x110>)
 800b0b0:	f010 ff62 	bl	801bf78 <iprintf>

    if (IKS01A2_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_MAGNETO, &odr))
 800b0b4:	aa0f      	add	r2, sp, #60	; 0x3c
 800b0b6:	2104      	movs	r1, #4
 800b0b8:	4620      	mov	r0, r4
 800b0ba:	f7f9 fd69 	bl	8004b90 <IKS01A2_MOTION_SENSOR_GetOutputDataRate>
 800b0be:	2800      	cmp	r0, #0
 800b0c0:	d039      	beq.n	800b136 <Magneto_Sensor_Handler+0xce>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 800b0c2:	4623      	mov	r3, r4
 800b0c4:	4a2e      	ldr	r2, [pc, #184]	; (800b180 <Magneto_Sensor_Handler+0x118>)
 800b0c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b0ca:	482a      	ldr	r0, [pc, #168]	; (800b174 <Magneto_Sensor_Handler+0x10c>)
 800b0cc:	f011 f88e 	bl	801c1ec <sniprintf>
      floatToInt(odr, &out_value, 3);
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
               (int)out_value.out_dec);
    }

    printf("%s", dataOut);
 800b0d0:	4928      	ldr	r1, [pc, #160]	; (800b174 <Magneto_Sensor_Handler+0x10c>)
 800b0d2:	4829      	ldr	r0, [pc, #164]	; (800b178 <Magneto_Sensor_Handler+0x110>)
 800b0d4:	f010 ff50 	bl	801bf78 <iprintf>

    if (IKS01A2_MOTION_SENSOR_GetFullScale(Instance, MOTION_MAGNETO, &fullScale))
 800b0d8:	aa0e      	add	r2, sp, #56	; 0x38
 800b0da:	2104      	movs	r1, #4
 800b0dc:	4620      	mov	r0, r4
 800b0de:	f7f9 fd85 	bl	8004bec <IKS01A2_MOTION_SENSOR_GetFullScale>
 800b0e2:	2800      	cmp	r0, #0
 800b0e4:	d039      	beq.n	800b15a <Magneto_Sensor_Handler+0xf2>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 800b0e6:	4623      	mov	r3, r4
 800b0e8:	4a26      	ldr	r2, [pc, #152]	; (800b184 <Magneto_Sensor_Handler+0x11c>)
 800b0ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b0ee:	4821      	ldr	r0, [pc, #132]	; (800b174 <Magneto_Sensor_Handler+0x10c>)
 800b0f0:	f011 f87c 	bl	801c1ec <sniprintf>
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d gauss\r\n", (int)Instance, (int)fullScale);
    }

    printf("%s", dataOut);
 800b0f4:	491f      	ldr	r1, [pc, #124]	; (800b174 <Magneto_Sensor_Handler+0x10c>)
 800b0f6:	4820      	ldr	r0, [pc, #128]	; (800b178 <Magneto_Sensor_Handler+0x110>)
 800b0f8:	f010 ff3e 	bl	801bf78 <iprintf>
  }
}
 800b0fc:	b010      	add	sp, #64	; 0x40
 800b0fe:	bd10      	pop	{r4, pc}
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 800b100:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b102:	9304      	str	r3, [sp, #16]
 800b104:	9403      	str	r4, [sp, #12]
 800b106:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b108:	9302      	str	r3, [sp, #8]
 800b10a:	9401      	str	r4, [sp, #4]
 800b10c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b10e:	9300      	str	r3, [sp, #0]
 800b110:	4623      	mov	r3, r4
 800b112:	4a1d      	ldr	r2, [pc, #116]	; (800b188 <Magneto_Sensor_Handler+0x120>)
 800b114:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b118:	4816      	ldr	r0, [pc, #88]	; (800b174 <Magneto_Sensor_Handler+0x10c>)
 800b11a:	f011 f867 	bl	801c1ec <sniprintf>
 800b11e:	e7b3      	b.n	800b088 <Magneto_Sensor_Handler+0x20>
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 800b120:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800b124:	9300      	str	r3, [sp, #0]
 800b126:	4623      	mov	r3, r4
 800b128:	4a18      	ldr	r2, [pc, #96]	; (800b18c <Magneto_Sensor_Handler+0x124>)
 800b12a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b12e:	4811      	ldr	r0, [pc, #68]	; (800b174 <Magneto_Sensor_Handler+0x10c>)
 800b130:	f011 f85c 	bl	801c1ec <sniprintf>
 800b134:	e7ba      	b.n	800b0ac <Magneto_Sensor_Handler+0x44>
      floatToInt(odr, &out_value, 3);
 800b136:	2103      	movs	r1, #3
 800b138:	a808      	add	r0, sp, #32
 800b13a:	ed9d 0a0f 	vldr	s0, [sp, #60]	; 0x3c
 800b13e:	f7ff fd37 	bl	800abb0 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800b142:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b144:	9301      	str	r3, [sp, #4]
 800b146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b148:	9300      	str	r3, [sp, #0]
 800b14a:	4623      	mov	r3, r4
 800b14c:	4a10      	ldr	r2, [pc, #64]	; (800b190 <Magneto_Sensor_Handler+0x128>)
 800b14e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b152:	4808      	ldr	r0, [pc, #32]	; (800b174 <Magneto_Sensor_Handler+0x10c>)
 800b154:	f011 f84a 	bl	801c1ec <sniprintf>
 800b158:	e7ba      	b.n	800b0d0 <Magneto_Sensor_Handler+0x68>
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d gauss\r\n", (int)Instance, (int)fullScale);
 800b15a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b15c:	9300      	str	r3, [sp, #0]
 800b15e:	4623      	mov	r3, r4
 800b160:	4a0c      	ldr	r2, [pc, #48]	; (800b194 <Magneto_Sensor_Handler+0x12c>)
 800b162:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b166:	4803      	ldr	r0, [pc, #12]	; (800b174 <Magneto_Sensor_Handler+0x10c>)
 800b168:	f011 f840 	bl	801c1ec <sniprintf>
 800b16c:	e7c2      	b.n	800b0f4 <Magneto_Sensor_Handler+0x8c>
 800b16e:	bf00      	nop
 800b170:	0801e65c 	.word	0x0801e65c
 800b174:	2000266c 	.word	0x2000266c
 800b178:	0801e504 	.word	0x0801e504
 800b17c:	0801e384 	.word	0x0801e384
 800b180:	0801e3ac 	.word	0x0801e3ac
 800b184:	0801e3d8 	.word	0x0801e3d8
 800b188:	0801e670 	.word	0x0801e670
 800b18c:	0801e398 	.word	0x0801e398
 800b190:	0801e3c0 	.word	0x0801e3c0
 800b194:	0801e6a0 	.word	0x0801e6a0

0800b198 <Hum_Sensor_Handler>:
  * @brief  Handles the humidity data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Hum_Sensor_Handler(uint32_t Instance)
{
 800b198:	b510      	push	{r4, lr}
 800b19a:	b088      	sub	sp, #32
 800b19c:	4604      	mov	r4, r0
  float odr;
  float humidity;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  if (IKS01A2_ENV_SENSOR_GetValue(Instance, ENV_HUMIDITY, &humidity))
 800b19e:	aa06      	add	r2, sp, #24
 800b1a0:	2104      	movs	r1, #4
 800b1a2:	f7f9 fa09 	bl	80045b8 <IKS01A2_ENV_SENSOR_GetValue>
 800b1a6:	2800      	cmp	r0, #0
 800b1a8:	d02f      	beq.n	800b20a <Hum_Sensor_Handler+0x72>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nHum[%d]: Error\r\n", (int)Instance);
 800b1aa:	4623      	mov	r3, r4
 800b1ac:	4a2e      	ldr	r2, [pc, #184]	; (800b268 <Hum_Sensor_Handler+0xd0>)
 800b1ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b1b2:	482e      	ldr	r0, [pc, #184]	; (800b26c <Hum_Sensor_Handler+0xd4>)
 800b1b4:	f011 f81a 	bl	801c1ec <sniprintf>
    floatToInt(humidity, &out_value, 2);
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nHum[%d]: %d.%02d %%\r\n", (int)Instance, (int)out_value.out_int,
             (int)out_value.out_dec);
  }

  printf("%s", dataOut);
 800b1b8:	492c      	ldr	r1, [pc, #176]	; (800b26c <Hum_Sensor_Handler+0xd4>)
 800b1ba:	482d      	ldr	r0, [pc, #180]	; (800b270 <Hum_Sensor_Handler+0xd8>)
 800b1bc:	f010 fedc 	bl	801bf78 <iprintf>

  if (verbose == 1)
  {
    if (IKS01A2_ENV_SENSOR_ReadID(Instance, &whoami))
 800b1c0:	f10d 010b 	add.w	r1, sp, #11
 800b1c4:	4620      	mov	r0, r4
 800b1c6:	f7f9 f983 	bl	80044d0 <IKS01A2_ENV_SENSOR_ReadID>
 800b1ca:	2800      	cmp	r0, #0
 800b1cc:	d02f      	beq.n	800b22e <Hum_Sensor_Handler+0x96>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 800b1ce:	4623      	mov	r3, r4
 800b1d0:	4a28      	ldr	r2, [pc, #160]	; (800b274 <Hum_Sensor_Handler+0xdc>)
 800b1d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b1d6:	4825      	ldr	r0, [pc, #148]	; (800b26c <Hum_Sensor_Handler+0xd4>)
 800b1d8:	f011 f808 	bl	801c1ec <sniprintf>
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
    }

    printf("%s", dataOut);
 800b1dc:	4923      	ldr	r1, [pc, #140]	; (800b26c <Hum_Sensor_Handler+0xd4>)
 800b1de:	4824      	ldr	r0, [pc, #144]	; (800b270 <Hum_Sensor_Handler+0xd8>)
 800b1e0:	f010 feca 	bl	801bf78 <iprintf>

    if (IKS01A2_ENV_SENSOR_GetOutputDataRate(Instance, ENV_HUMIDITY, &odr))
 800b1e4:	aa07      	add	r2, sp, #28
 800b1e6:	2104      	movs	r1, #4
 800b1e8:	4620      	mov	r0, r4
 800b1ea:	f7f9 f9b7 	bl	800455c <IKS01A2_ENV_SENSOR_GetOutputDataRate>
 800b1ee:	b348      	cbz	r0, 800b244 <Hum_Sensor_Handler+0xac>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: Error\r\n", (int)Instance);
 800b1f0:	4623      	mov	r3, r4
 800b1f2:	4a21      	ldr	r2, [pc, #132]	; (800b278 <Hum_Sensor_Handler+0xe0>)
 800b1f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b1f8:	481c      	ldr	r0, [pc, #112]	; (800b26c <Hum_Sensor_Handler+0xd4>)
 800b1fa:	f010 fff7 	bl	801c1ec <sniprintf>
      floatToInt(odr, &out_value, 3);
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
               (int)out_value.out_dec);
    }

    printf("%s", dataOut);
 800b1fe:	491b      	ldr	r1, [pc, #108]	; (800b26c <Hum_Sensor_Handler+0xd4>)
 800b200:	481b      	ldr	r0, [pc, #108]	; (800b270 <Hum_Sensor_Handler+0xd8>)
 800b202:	f010 feb9 	bl	801bf78 <iprintf>
  }
}
 800b206:	b008      	add	sp, #32
 800b208:	bd10      	pop	{r4, pc}
    floatToInt(humidity, &out_value, 2);
 800b20a:	2102      	movs	r1, #2
 800b20c:	a803      	add	r0, sp, #12
 800b20e:	ed9d 0a06 	vldr	s0, [sp, #24]
 800b212:	f7ff fccd 	bl	800abb0 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nHum[%d]: %d.%02d %%\r\n", (int)Instance, (int)out_value.out_int,
 800b216:	9b05      	ldr	r3, [sp, #20]
 800b218:	9301      	str	r3, [sp, #4]
 800b21a:	9b04      	ldr	r3, [sp, #16]
 800b21c:	9300      	str	r3, [sp, #0]
 800b21e:	4623      	mov	r3, r4
 800b220:	4a16      	ldr	r2, [pc, #88]	; (800b27c <Hum_Sensor_Handler+0xe4>)
 800b222:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b226:	4811      	ldr	r0, [pc, #68]	; (800b26c <Hum_Sensor_Handler+0xd4>)
 800b228:	f010 ffe0 	bl	801c1ec <sniprintf>
 800b22c:	e7c4      	b.n	800b1b8 <Hum_Sensor_Handler+0x20>
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 800b22e:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800b232:	9300      	str	r3, [sp, #0]
 800b234:	4623      	mov	r3, r4
 800b236:	4a12      	ldr	r2, [pc, #72]	; (800b280 <Hum_Sensor_Handler+0xe8>)
 800b238:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b23c:	480b      	ldr	r0, [pc, #44]	; (800b26c <Hum_Sensor_Handler+0xd4>)
 800b23e:	f010 ffd5 	bl	801c1ec <sniprintf>
 800b242:	e7cb      	b.n	800b1dc <Hum_Sensor_Handler+0x44>
      floatToInt(odr, &out_value, 3);
 800b244:	2103      	movs	r1, #3
 800b246:	a803      	add	r0, sp, #12
 800b248:	ed9d 0a07 	vldr	s0, [sp, #28]
 800b24c:	f7ff fcb0 	bl	800abb0 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800b250:	9b05      	ldr	r3, [sp, #20]
 800b252:	9301      	str	r3, [sp, #4]
 800b254:	9b04      	ldr	r3, [sp, #16]
 800b256:	9300      	str	r3, [sp, #0]
 800b258:	4623      	mov	r3, r4
 800b25a:	4a0a      	ldr	r2, [pc, #40]	; (800b284 <Hum_Sensor_Handler+0xec>)
 800b25c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b260:	4802      	ldr	r0, [pc, #8]	; (800b26c <Hum_Sensor_Handler+0xd4>)
 800b262:	f010 ffc3 	bl	801c1ec <sniprintf>
 800b266:	e7ca      	b.n	800b1fe <Hum_Sensor_Handler+0x66>
 800b268:	0801e450 	.word	0x0801e450
 800b26c:	2000266c 	.word	0x2000266c
 800b270:	0801e504 	.word	0x0801e504
 800b274:	0801e384 	.word	0x0801e384
 800b278:	0801e47c 	.word	0x0801e47c
 800b27c:	0801e464 	.word	0x0801e464
 800b280:	0801e398 	.word	0x0801e398
 800b284:	0801e3c0 	.word	0x0801e3c0

0800b288 <Temp_Sensor_Handler>:
{
 800b288:	b510      	push	{r4, lr}
 800b28a:	b088      	sub	sp, #32
 800b28c:	4604      	mov	r4, r0
  if (IKS01A2_ENV_SENSOR_GetValue(Instance, ENV_TEMPERATURE, &temperature))
 800b28e:	aa06      	add	r2, sp, #24
 800b290:	2101      	movs	r1, #1
 800b292:	f7f9 f991 	bl	80045b8 <IKS01A2_ENV_SENSOR_GetValue>
 800b296:	2800      	cmp	r0, #0
 800b298:	d02f      	beq.n	800b2fa <Temp_Sensor_Handler+0x72>
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nTemp[%d]: Error\r\n", (int)Instance);
 800b29a:	4623      	mov	r3, r4
 800b29c:	4a2e      	ldr	r2, [pc, #184]	; (800b358 <Temp_Sensor_Handler+0xd0>)
 800b29e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b2a2:	482e      	ldr	r0, [pc, #184]	; (800b35c <Temp_Sensor_Handler+0xd4>)
 800b2a4:	f010 ffa2 	bl	801c1ec <sniprintf>
  printf("%s", dataOut);
 800b2a8:	492c      	ldr	r1, [pc, #176]	; (800b35c <Temp_Sensor_Handler+0xd4>)
 800b2aa:	482d      	ldr	r0, [pc, #180]	; (800b360 <Temp_Sensor_Handler+0xd8>)
 800b2ac:	f010 fe64 	bl	801bf78 <iprintf>
    if (IKS01A2_ENV_SENSOR_ReadID(Instance, &whoami))
 800b2b0:	f10d 010b 	add.w	r1, sp, #11
 800b2b4:	4620      	mov	r0, r4
 800b2b6:	f7f9 f90b 	bl	80044d0 <IKS01A2_ENV_SENSOR_ReadID>
 800b2ba:	2800      	cmp	r0, #0
 800b2bc:	d02f      	beq.n	800b31e <Temp_Sensor_Handler+0x96>
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 800b2be:	4623      	mov	r3, r4
 800b2c0:	4a28      	ldr	r2, [pc, #160]	; (800b364 <Temp_Sensor_Handler+0xdc>)
 800b2c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b2c6:	4825      	ldr	r0, [pc, #148]	; (800b35c <Temp_Sensor_Handler+0xd4>)
 800b2c8:	f010 ff90 	bl	801c1ec <sniprintf>
    printf("%s", dataOut);
 800b2cc:	4923      	ldr	r1, [pc, #140]	; (800b35c <Temp_Sensor_Handler+0xd4>)
 800b2ce:	4824      	ldr	r0, [pc, #144]	; (800b360 <Temp_Sensor_Handler+0xd8>)
 800b2d0:	f010 fe52 	bl	801bf78 <iprintf>
    if (IKS01A2_ENV_SENSOR_GetOutputDataRate(Instance, ENV_TEMPERATURE, &odr))
 800b2d4:	aa07      	add	r2, sp, #28
 800b2d6:	2101      	movs	r1, #1
 800b2d8:	4620      	mov	r0, r4
 800b2da:	f7f9 f93f 	bl	800455c <IKS01A2_ENV_SENSOR_GetOutputDataRate>
 800b2de:	b348      	cbz	r0, 800b334 <Temp_Sensor_Handler+0xac>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: Error\r\n", (int)Instance);
 800b2e0:	4623      	mov	r3, r4
 800b2e2:	4a21      	ldr	r2, [pc, #132]	; (800b368 <Temp_Sensor_Handler+0xe0>)
 800b2e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b2e8:	481c      	ldr	r0, [pc, #112]	; (800b35c <Temp_Sensor_Handler+0xd4>)
 800b2ea:	f010 ff7f 	bl	801c1ec <sniprintf>
    printf("%s", dataOut);
 800b2ee:	491b      	ldr	r1, [pc, #108]	; (800b35c <Temp_Sensor_Handler+0xd4>)
 800b2f0:	481b      	ldr	r0, [pc, #108]	; (800b360 <Temp_Sensor_Handler+0xd8>)
 800b2f2:	f010 fe41 	bl	801bf78 <iprintf>
}
 800b2f6:	b008      	add	sp, #32
 800b2f8:	bd10      	pop	{r4, pc}
    floatToInt(temperature, &out_value, 2);
 800b2fa:	2102      	movs	r1, #2
 800b2fc:	a803      	add	r0, sp, #12
 800b2fe:	ed9d 0a06 	vldr	s0, [sp, #24]
 800b302:	f7ff fc55 	bl	800abb0 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nTemp[%d]: %d.%02d degC\r\n", (int)Instance, (int)out_value.out_int,
 800b306:	9b05      	ldr	r3, [sp, #20]
 800b308:	9301      	str	r3, [sp, #4]
 800b30a:	9b04      	ldr	r3, [sp, #16]
 800b30c:	9300      	str	r3, [sp, #0]
 800b30e:	4623      	mov	r3, r4
 800b310:	4a16      	ldr	r2, [pc, #88]	; (800b36c <Temp_Sensor_Handler+0xe4>)
 800b312:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b316:	4811      	ldr	r0, [pc, #68]	; (800b35c <Temp_Sensor_Handler+0xd4>)
 800b318:	f010 ff68 	bl	801c1ec <sniprintf>
 800b31c:	e7c4      	b.n	800b2a8 <Temp_Sensor_Handler+0x20>
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 800b31e:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800b322:	9300      	str	r3, [sp, #0]
 800b324:	4623      	mov	r3, r4
 800b326:	4a12      	ldr	r2, [pc, #72]	; (800b370 <Temp_Sensor_Handler+0xe8>)
 800b328:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b32c:	480b      	ldr	r0, [pc, #44]	; (800b35c <Temp_Sensor_Handler+0xd4>)
 800b32e:	f010 ff5d 	bl	801c1ec <sniprintf>
 800b332:	e7cb      	b.n	800b2cc <Temp_Sensor_Handler+0x44>
      floatToInt(odr, &out_value, 3);
 800b334:	2103      	movs	r1, #3
 800b336:	a803      	add	r0, sp, #12
 800b338:	ed9d 0a07 	vldr	s0, [sp, #28]
 800b33c:	f7ff fc38 	bl	800abb0 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800b340:	9b05      	ldr	r3, [sp, #20]
 800b342:	9301      	str	r3, [sp, #4]
 800b344:	9b04      	ldr	r3, [sp, #16]
 800b346:	9300      	str	r3, [sp, #0]
 800b348:	4623      	mov	r3, r4
 800b34a:	4a0a      	ldr	r2, [pc, #40]	; (800b374 <Temp_Sensor_Handler+0xec>)
 800b34c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b350:	4802      	ldr	r0, [pc, #8]	; (800b35c <Temp_Sensor_Handler+0xd4>)
 800b352:	f010 ff4b 	bl	801c1ec <sniprintf>
 800b356:	e7ca      	b.n	800b2ee <Temp_Sensor_Handler+0x66>
 800b358:	0801e6e8 	.word	0x0801e6e8
 800b35c:	2000266c 	.word	0x2000266c
 800b360:	0801e504 	.word	0x0801e504
 800b364:	0801e384 	.word	0x0801e384
 800b368:	0801e47c 	.word	0x0801e47c
 800b36c:	0801e6fc 	.word	0x0801e6fc
 800b370:	0801e398 	.word	0x0801e398
 800b374:	0801e3c0 	.word	0x0801e3c0

0800b378 <Press_Sensor_Handler>:
{
 800b378:	b510      	push	{r4, lr}
 800b37a:	b088      	sub	sp, #32
 800b37c:	4604      	mov	r4, r0
  if (IKS01A2_ENV_SENSOR_GetValue(Instance, ENV_PRESSURE, &pressure))
 800b37e:	aa06      	add	r2, sp, #24
 800b380:	2102      	movs	r1, #2
 800b382:	f7f9 f919 	bl	80045b8 <IKS01A2_ENV_SENSOR_GetValue>
 800b386:	2800      	cmp	r0, #0
 800b388:	d02f      	beq.n	800b3ea <Press_Sensor_Handler+0x72>
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nPress[%d]: Error\r\n", (int)Instance);
 800b38a:	4623      	mov	r3, r4
 800b38c:	4a2e      	ldr	r2, [pc, #184]	; (800b448 <Press_Sensor_Handler+0xd0>)
 800b38e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b392:	482e      	ldr	r0, [pc, #184]	; (800b44c <Press_Sensor_Handler+0xd4>)
 800b394:	f010 ff2a 	bl	801c1ec <sniprintf>
  printf("%s", dataOut);
 800b398:	492c      	ldr	r1, [pc, #176]	; (800b44c <Press_Sensor_Handler+0xd4>)
 800b39a:	482d      	ldr	r0, [pc, #180]	; (800b450 <Press_Sensor_Handler+0xd8>)
 800b39c:	f010 fdec 	bl	801bf78 <iprintf>
    if (IKS01A2_ENV_SENSOR_ReadID(Instance, &whoami))
 800b3a0:	f10d 010b 	add.w	r1, sp, #11
 800b3a4:	4620      	mov	r0, r4
 800b3a6:	f7f9 f893 	bl	80044d0 <IKS01A2_ENV_SENSOR_ReadID>
 800b3aa:	2800      	cmp	r0, #0
 800b3ac:	d02f      	beq.n	800b40e <Press_Sensor_Handler+0x96>
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 800b3ae:	4623      	mov	r3, r4
 800b3b0:	4a28      	ldr	r2, [pc, #160]	; (800b454 <Press_Sensor_Handler+0xdc>)
 800b3b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b3b6:	4825      	ldr	r0, [pc, #148]	; (800b44c <Press_Sensor_Handler+0xd4>)
 800b3b8:	f010 ff18 	bl	801c1ec <sniprintf>
    printf("%s", dataOut);
 800b3bc:	4923      	ldr	r1, [pc, #140]	; (800b44c <Press_Sensor_Handler+0xd4>)
 800b3be:	4824      	ldr	r0, [pc, #144]	; (800b450 <Press_Sensor_Handler+0xd8>)
 800b3c0:	f010 fdda 	bl	801bf78 <iprintf>
    if (IKS01A2_ENV_SENSOR_GetOutputDataRate(Instance, ENV_PRESSURE, &odr))
 800b3c4:	aa07      	add	r2, sp, #28
 800b3c6:	2102      	movs	r1, #2
 800b3c8:	4620      	mov	r0, r4
 800b3ca:	f7f9 f8c7 	bl	800455c <IKS01A2_ENV_SENSOR_GetOutputDataRate>
 800b3ce:	b348      	cbz	r0, 800b424 <Press_Sensor_Handler+0xac>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: Error\r\n", (int)Instance);
 800b3d0:	4623      	mov	r3, r4
 800b3d2:	4a21      	ldr	r2, [pc, #132]	; (800b458 <Press_Sensor_Handler+0xe0>)
 800b3d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b3d8:	481c      	ldr	r0, [pc, #112]	; (800b44c <Press_Sensor_Handler+0xd4>)
 800b3da:	f010 ff07 	bl	801c1ec <sniprintf>
    printf("%s", dataOut);
 800b3de:	491b      	ldr	r1, [pc, #108]	; (800b44c <Press_Sensor_Handler+0xd4>)
 800b3e0:	481b      	ldr	r0, [pc, #108]	; (800b450 <Press_Sensor_Handler+0xd8>)
 800b3e2:	f010 fdc9 	bl	801bf78 <iprintf>
}
 800b3e6:	b008      	add	sp, #32
 800b3e8:	bd10      	pop	{r4, pc}
    floatToInt(pressure, &out_value, 2);
 800b3ea:	2102      	movs	r1, #2
 800b3ec:	a803      	add	r0, sp, #12
 800b3ee:	ed9d 0a06 	vldr	s0, [sp, #24]
 800b3f2:	f7ff fbdd 	bl	800abb0 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nPress[%d]: %d.%02d hPa\r\n", (int)Instance, (int)out_value.out_int,
 800b3f6:	9b05      	ldr	r3, [sp, #20]
 800b3f8:	9301      	str	r3, [sp, #4]
 800b3fa:	9b04      	ldr	r3, [sp, #16]
 800b3fc:	9300      	str	r3, [sp, #0]
 800b3fe:	4623      	mov	r3, r4
 800b400:	4a16      	ldr	r2, [pc, #88]	; (800b45c <Press_Sensor_Handler+0xe4>)
 800b402:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b406:	4811      	ldr	r0, [pc, #68]	; (800b44c <Press_Sensor_Handler+0xd4>)
 800b408:	f010 fef0 	bl	801c1ec <sniprintf>
 800b40c:	e7c4      	b.n	800b398 <Press_Sensor_Handler+0x20>
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 800b40e:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800b412:	9300      	str	r3, [sp, #0]
 800b414:	4623      	mov	r3, r4
 800b416:	4a12      	ldr	r2, [pc, #72]	; (800b460 <Press_Sensor_Handler+0xe8>)
 800b418:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b41c:	480b      	ldr	r0, [pc, #44]	; (800b44c <Press_Sensor_Handler+0xd4>)
 800b41e:	f010 fee5 	bl	801c1ec <sniprintf>
 800b422:	e7cb      	b.n	800b3bc <Press_Sensor_Handler+0x44>
      floatToInt(odr, &out_value, 3);
 800b424:	2103      	movs	r1, #3
 800b426:	a803      	add	r0, sp, #12
 800b428:	ed9d 0a07 	vldr	s0, [sp, #28]
 800b42c:	f7ff fbc0 	bl	800abb0 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800b430:	9b05      	ldr	r3, [sp, #20]
 800b432:	9301      	str	r3, [sp, #4]
 800b434:	9b04      	ldr	r3, [sp, #16]
 800b436:	9300      	str	r3, [sp, #0]
 800b438:	4623      	mov	r3, r4
 800b43a:	4a0a      	ldr	r2, [pc, #40]	; (800b464 <Press_Sensor_Handler+0xec>)
 800b43c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b440:	4802      	ldr	r0, [pc, #8]	; (800b44c <Press_Sensor_Handler+0xd4>)
 800b442:	f010 fed3 	bl	801c1ec <sniprintf>
 800b446:	e7ca      	b.n	800b3de <Press_Sensor_Handler+0x66>
 800b448:	0801e6b4 	.word	0x0801e6b4
 800b44c:	2000266c 	.word	0x2000266c
 800b450:	0801e504 	.word	0x0801e504
 800b454:	0801e384 	.word	0x0801e384
 800b458:	0801e47c 	.word	0x0801e47c
 800b45c:	0801e6cc 	.word	0x0801e6cc
 800b460:	0801e398 	.word	0x0801e398
 800b464:	0801e3c0 	.word	0x0801e3c0

0800b468 <MX_IKS01A2_DataLogTerminal_Process>:
{
 800b468:	b538      	push	{r3, r4, r5, lr}
  if (PushButtonDetected != 0U)
 800b46a:	4b2b      	ldr	r3, [pc, #172]	; (800b518 <MX_IKS01A2_DataLogTerminal_Process+0xb0>)
 800b46c:	781b      	ldrb	r3, [r3, #0]
 800b46e:	b113      	cbz	r3, 800b476 <MX_IKS01A2_DataLogTerminal_Process+0xe>
    PushButtonDetected = 0;
 800b470:	2200      	movs	r2, #0
 800b472:	4b29      	ldr	r3, [pc, #164]	; (800b518 <MX_IKS01A2_DataLogTerminal_Process+0xb0>)
 800b474:	701a      	strb	r2, [r3, #0]
{
 800b476:	2400      	movs	r4, #0
 800b478:	e008      	b.n	800b48c <MX_IKS01A2_DataLogTerminal_Process+0x24>
      Accelero_Sensor_Handler(i);
 800b47a:	4628      	mov	r0, r5
 800b47c:	f7ff fcc4 	bl	800ae08 <Accelero_Sensor_Handler>
 800b480:	e00e      	b.n	800b4a0 <MX_IKS01A2_DataLogTerminal_Process+0x38>
      Gyro_Sensor_Handler(i);
 800b482:	4628      	mov	r0, r5
 800b484:	f7ff fd58 	bl	800af38 <Gyro_Sensor_Handler>
 800b488:	e012      	b.n	800b4b0 <MX_IKS01A2_DataLogTerminal_Process+0x48>
  for(i = 0; i < IKS01A2_MOTION_INSTANCES_NBR; i++)
 800b48a:	3401      	adds	r4, #1
 800b48c:	4625      	mov	r5, r4
 800b48e:	2c02      	cmp	r4, #2
 800b490:	d81a      	bhi.n	800b4c8 <MX_IKS01A2_DataLogTerminal_Process+0x60>
    if(MotionCapabilities[i].Acc)
 800b492:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 800b496:	0093      	lsls	r3, r2, #2
 800b498:	4a20      	ldr	r2, [pc, #128]	; (800b51c <MX_IKS01A2_DataLogTerminal_Process+0xb4>)
 800b49a:	5cd3      	ldrb	r3, [r2, r3]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d1ec      	bne.n	800b47a <MX_IKS01A2_DataLogTerminal_Process+0x12>
    if(MotionCapabilities[i].Gyro)
 800b4a0:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800b4a4:	009a      	lsls	r2, r3, #2
 800b4a6:	4b1d      	ldr	r3, [pc, #116]	; (800b51c <MX_IKS01A2_DataLogTerminal_Process+0xb4>)
 800b4a8:	4413      	add	r3, r2
 800b4aa:	785b      	ldrb	r3, [r3, #1]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d1e8      	bne.n	800b482 <MX_IKS01A2_DataLogTerminal_Process+0x1a>
    if(MotionCapabilities[i].Magneto)
 800b4b0:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800b4b4:	009a      	lsls	r2, r3, #2
 800b4b6:	4b19      	ldr	r3, [pc, #100]	; (800b51c <MX_IKS01A2_DataLogTerminal_Process+0xb4>)
 800b4b8:	4413      	add	r3, r2
 800b4ba:	789b      	ldrb	r3, [r3, #2]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d0e4      	beq.n	800b48a <MX_IKS01A2_DataLogTerminal_Process+0x22>
      Magneto_Sensor_Handler(i);
 800b4c0:	4628      	mov	r0, r5
 800b4c2:	f7ff fdd1 	bl	800b068 <Magneto_Sensor_Handler>
 800b4c6:	e7e0      	b.n	800b48a <MX_IKS01A2_DataLogTerminal_Process+0x22>
 800b4c8:	2400      	movs	r4, #0
 800b4ca:	e008      	b.n	800b4de <MX_IKS01A2_DataLogTerminal_Process+0x76>
      Hum_Sensor_Handler(i);
 800b4cc:	4628      	mov	r0, r5
 800b4ce:	f7ff fe63 	bl	800b198 <Hum_Sensor_Handler>
 800b4d2:	e00d      	b.n	800b4f0 <MX_IKS01A2_DataLogTerminal_Process+0x88>
      Temp_Sensor_Handler(i);
 800b4d4:	4628      	mov	r0, r5
 800b4d6:	f7ff fed7 	bl	800b288 <Temp_Sensor_Handler>
 800b4da:	e00e      	b.n	800b4fa <MX_IKS01A2_DataLogTerminal_Process+0x92>
  for(i = 0; i < IKS01A2_ENV_INSTANCES_NBR; i++)
 800b4dc:	3401      	adds	r4, #1
 800b4de:	4625      	mov	r5, r4
 800b4e0:	2c01      	cmp	r4, #1
 800b4e2:	d814      	bhi.n	800b50e <MX_IKS01A2_DataLogTerminal_Process+0xa6>
    if(EnvCapabilities[i].Humidity)
 800b4e4:	4b0e      	ldr	r3, [pc, #56]	; (800b520 <MX_IKS01A2_DataLogTerminal_Process+0xb8>)
 800b4e6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800b4ea:	789b      	ldrb	r3, [r3, #2]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d1ed      	bne.n	800b4cc <MX_IKS01A2_DataLogTerminal_Process+0x64>
    if(EnvCapabilities[i].Temperature)
 800b4f0:	0123      	lsls	r3, r4, #4
 800b4f2:	4a0b      	ldr	r2, [pc, #44]	; (800b520 <MX_IKS01A2_DataLogTerminal_Process+0xb8>)
 800b4f4:	5cd3      	ldrb	r3, [r2, r3]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d1ec      	bne.n	800b4d4 <MX_IKS01A2_DataLogTerminal_Process+0x6c>
    if(EnvCapabilities[i].Pressure)
 800b4fa:	4b09      	ldr	r3, [pc, #36]	; (800b520 <MX_IKS01A2_DataLogTerminal_Process+0xb8>)
 800b4fc:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800b500:	785b      	ldrb	r3, [r3, #1]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d0ea      	beq.n	800b4dc <MX_IKS01A2_DataLogTerminal_Process+0x74>
      Press_Sensor_Handler(i);
 800b506:	4628      	mov	r0, r5
 800b508:	f7ff ff36 	bl	800b378 <Press_Sensor_Handler>
 800b50c:	e7e6      	b.n	800b4dc <MX_IKS01A2_DataLogTerminal_Process+0x74>
  HAL_Delay( 1000 );
 800b50e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b512:	f7f9 ff03 	bl	800531c <HAL_Delay>
 800b516:	bd38      	pop	{r3, r4, r5, pc}
 800b518:	20002668 	.word	0x20002668
 800b51c:	20002614 	.word	0x20002614
 800b520:	200025f4 	.word	0x200025f4

0800b524 <MX_X_CUBE_MEMS1_Init>:
{
 800b524:	b508      	push	{r3, lr}
  MX_IKS01A2_DataLogTerminal_Init();
 800b526:	f7ff fb7b 	bl	800ac20 <MX_IKS01A2_DataLogTerminal_Init>
 800b52a:	bd08      	pop	{r3, pc}

0800b52c <MX_X_CUBE_MEMS1_Process>:
{
 800b52c:	b508      	push	{r3, lr}
  MX_IKS01A2_DataLogTerminal_Process();
 800b52e:	f7ff ff9b 	bl	800b468 <MX_IKS01A2_DataLogTerminal_Process>
 800b532:	bd08      	pop	{r3, pc}

0800b534 <uartSendChar>:
/** @brief Sends a character to serial port
 * @param ch Character to send
 * @retval Character sent
 */
int uartSendChar(int ch)
{
 800b534:	b500      	push	{lr}
 800b536:	b083      	sub	sp, #12
 800b538:	a902      	add	r1, sp, #8
 800b53a:	f841 0d04 	str.w	r0, [r1, #-4]!
//	while ((uart2TXReady == 0)) {
//		;
//	}


	uart2TXReady = 0;
 800b53e:	2300      	movs	r3, #0
 800b540:	4a06      	ldr	r2, [pc, #24]	; (800b55c <uartSendChar+0x28>)
 800b542:	6013      	str	r3, [r2, #0]
	uart6TXReady = 0;
 800b544:	4a06      	ldr	r2, [pc, #24]	; (800b560 <uartSendChar+0x2c>)
 800b546:	6013      	str	r3, [r2, #0]
//		;
//	}

	// HAL_UART_Transmit_DMA(&huart2, (uint8_t *)&ch, 1);

	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1,100);
 800b548:	2364      	movs	r3, #100	; 0x64
 800b54a:	2201      	movs	r2, #1
 800b54c:	4805      	ldr	r0, [pc, #20]	; (800b564 <uartSendChar+0x30>)
 800b54e:	f7ff f823 	bl	800a598 <HAL_UART_Transmit>
//	while (uart2TXReady == 0) {
//		;
//	}

	return ch;
}
 800b552:	9801      	ldr	r0, [sp, #4]
 800b554:	b003      	add	sp, #12
 800b556:	f85d fb04 	ldr.w	pc, [sp], #4
 800b55a:	bf00      	nop
 800b55c:	20001468 	.word	0x20001468
 800b560:	2000146c 	.word	0x2000146c
 800b564:	20003614 	.word	0x20003614

0800b568 <uartReceiveChar>:
/** @brief Receives a character from serial port
 * @param None
 * @retval Character received
 */
int uartReceiveChar(void)
{
 800b568:	b500      	push	{lr}
 800b56a:	b083      	sub	sp, #12
	uint8_t ch;

	while (uartRXReady == 0) {
 800b56c:	4b0a      	ldr	r3, [pc, #40]	; (800b598 <uartReceiveChar+0x30>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d0fb      	beq.n	800b56c <uartReceiveChar+0x4>
		;
	}

	uartRXReady = 0;
 800b574:	2200      	movs	r2, #0
 800b576:	4b08      	ldr	r3, [pc, #32]	; (800b598 <uartReceiveChar+0x30>)
 800b578:	601a      	str	r2, [r3, #0]

	HAL_UART_Receive_DMA(&huart6, &ch, 1);
 800b57a:	2201      	movs	r2, #1
 800b57c:	f10d 0107 	add.w	r1, sp, #7
 800b580:	4806      	ldr	r0, [pc, #24]	; (800b59c <uartReceiveChar+0x34>)
 800b582:	f7ff f87b 	bl	800a67c <HAL_UART_Receive_DMA>

	while (uartRXReady == 0) {
 800b586:	4b04      	ldr	r3, [pc, #16]	; (800b598 <uartReceiveChar+0x30>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d0fb      	beq.n	800b586 <uartReceiveChar+0x1e>
		;
	}

	return ch;
}
 800b58e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800b592:	b003      	add	sp, #12
 800b594:	f85d fb04 	ldr.w	pc, [sp], #4
 800b598:	20001470 	.word	0x20001470
 800b59c:	2000388c 	.word	0x2000388c

0800b5a0 <__io_putchar>:
/** @brief putchar call for standard output implementation
 * @param ch Character to print
 * @retval Character printed
 */
int __io_putchar(int ch)
{
 800b5a0:	b508      	push	{r3, lr}
	uartSendChar(ch);
 800b5a2:	f7ff ffc7 	bl	800b534 <uartSendChar>

	return 0;
}
 800b5a6:	2000      	movs	r0, #0
 800b5a8:	bd08      	pop	{r3, pc}

0800b5aa <__io_getchar>:
/** @brief getchar call for standard input implementation
 * @param None
 * @retval Character acquired from standard input
 */
int __io_getchar(void)
{
 800b5aa:	b508      	push	{r3, lr}
	return uartReceiveChar();
 800b5ac:	f7ff ffdc 	bl	800b568 <uartReceiveChar>
}
 800b5b0:	bd08      	pop	{r3, pc}
	...

0800b5b4 <HAL_UART_TxCpltCallback>:
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
	/* Set transmission flag: trasfer complete*/

	if (UartHandle->Instance == USART2) uart2TXReady = 1;
 800b5b4:	6803      	ldr	r3, [r0, #0]
 800b5b6:	4a07      	ldr	r2, [pc, #28]	; (800b5d4 <HAL_UART_TxCpltCallback+0x20>)
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	d003      	beq.n	800b5c4 <HAL_UART_TxCpltCallback+0x10>
	if (UartHandle->Instance == USART6) uart6TXReady = 1;
 800b5bc:	4a06      	ldr	r2, [pc, #24]	; (800b5d8 <HAL_UART_TxCpltCallback+0x24>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d004      	beq.n	800b5cc <HAL_UART_TxCpltCallback+0x18>
 800b5c2:	4770      	bx	lr
	if (UartHandle->Instance == USART2) uart2TXReady = 1;
 800b5c4:	2101      	movs	r1, #1
 800b5c6:	4a05      	ldr	r2, [pc, #20]	; (800b5dc <HAL_UART_TxCpltCallback+0x28>)
 800b5c8:	6011      	str	r1, [r2, #0]
 800b5ca:	e7f7      	b.n	800b5bc <HAL_UART_TxCpltCallback+0x8>
	if (UartHandle->Instance == USART6) uart6TXReady = 1;
 800b5cc:	2201      	movs	r2, #1
 800b5ce:	4b04      	ldr	r3, [pc, #16]	; (800b5e0 <HAL_UART_TxCpltCallback+0x2c>)
 800b5d0:	601a      	str	r2, [r3, #0]
}
 800b5d2:	e7f6      	b.n	800b5c2 <HAL_UART_TxCpltCallback+0xe>
 800b5d4:	40004400 	.word	0x40004400
 800b5d8:	40011400 	.word	0x40011400
 800b5dc:	20001468 	.word	0x20001468
 800b5e0:	2000146c 	.word	0x2000146c

0800b5e4 <HAL_UART_RxCpltCallback>:
 * @retval None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
	/* Set transmission flag: trasfer complete*/
	uartRXReady = 1;
 800b5e4:	2201      	movs	r2, #1
 800b5e6:	4b01      	ldr	r3, [pc, #4]	; (800b5ec <HAL_UART_RxCpltCallback+0x8>)
 800b5e8:	601a      	str	r2, [r3, #0]
 800b5ea:	4770      	bx	lr
 800b5ec:	20001470 	.word	0x20001470

0800b5f0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
void MX_DMA_Init(void)
{
 800b5f0:	b510      	push	{r4, lr}
 800b5f2:	b082      	sub	sp, #8
	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800b5f4:	2400      	movs	r4, #0
 800b5f6:	9400      	str	r4, [sp, #0]
 800b5f8:	4b22      	ldr	r3, [pc, #136]	; (800b684 <MX_DMA_Init+0x94>)
 800b5fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b5fc:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800b600:	631a      	str	r2, [r3, #48]	; 0x30
 800b602:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b604:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800b608:	9200      	str	r2, [sp, #0]
 800b60a:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_DMA2_CLK_ENABLE();
 800b60c:	9401      	str	r4, [sp, #4]
 800b60e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b610:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800b614:	631a      	str	r2, [r3, #48]	; 0x30
 800b616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b618:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b61c:	9301      	str	r3, [sp, #4]
 800b61e:	9b01      	ldr	r3, [sp, #4]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800b620:	4622      	mov	r2, r4
 800b622:	4621      	mov	r1, r4
 800b624:	200b      	movs	r0, #11
 800b626:	f7fa f9e7 	bl	80059f8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800b62a:	200b      	movs	r0, #11
 800b62c:	f7fa fa28 	bl	8005a80 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800b630:	4622      	mov	r2, r4
 800b632:	4621      	mov	r1, r4
 800b634:	2010      	movs	r0, #16
 800b636:	f7fa f9df 	bl	80059f8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800b63a:	2010      	movs	r0, #16
 800b63c:	f7fa fa20 	bl	8005a80 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800b640:	4622      	mov	r2, r4
 800b642:	4621      	mov	r1, r4
 800b644:	2011      	movs	r0, #17
 800b646:	f7fa f9d7 	bl	80059f8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800b64a:	2011      	movs	r0, #17
 800b64c:	f7fa fa18 	bl	8005a80 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800b650:	4622      	mov	r2, r4
 800b652:	4621      	mov	r1, r4
 800b654:	202f      	movs	r0, #47	; 0x2f
 800b656:	f7fa f9cf 	bl	80059f8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800b65a:	202f      	movs	r0, #47	; 0x2f
 800b65c:	f7fa fa10 	bl	8005a80 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800b660:	4622      	mov	r2, r4
 800b662:	4621      	mov	r1, r4
 800b664:	2039      	movs	r0, #57	; 0x39
 800b666:	f7fa f9c7 	bl	80059f8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800b66a:	2039      	movs	r0, #57	; 0x39
 800b66c:	f7fa fa08 	bl	8005a80 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800b670:	4622      	mov	r2, r4
 800b672:	4621      	mov	r1, r4
 800b674:	2045      	movs	r0, #69	; 0x45
 800b676:	f7fa f9bf 	bl	80059f8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800b67a:	2045      	movs	r0, #69	; 0x45
 800b67c:	f7fa fa00 	bl	8005a80 <HAL_NVIC_EnableIRQ>
}
 800b680:	b002      	add	sp, #8
 800b682:	bd10      	pop	{r4, pc}
 800b684:	40023800 	.word	0x40023800

0800b688 <MX_GPIO_Init>:
 * Output
 * EVENT_OUT
 * EXTI
 */
void MX_GPIO_Init(void)
{
 800b688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b68a:	b08b      	sub	sp, #44	; 0x2c
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800b68c:	2400      	movs	r4, #0
 800b68e:	9405      	str	r4, [sp, #20]
 800b690:	9406      	str	r4, [sp, #24]
 800b692:	9407      	str	r4, [sp, #28]
 800b694:	9408      	str	r4, [sp, #32]
 800b696:	9409      	str	r4, [sp, #36]	; 0x24

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800b698:	9401      	str	r4, [sp, #4]
 800b69a:	4b2e      	ldr	r3, [pc, #184]	; (800b754 <MX_GPIO_Init+0xcc>)
 800b69c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b69e:	f042 0204 	orr.w	r2, r2, #4
 800b6a2:	631a      	str	r2, [r3, #48]	; 0x30
 800b6a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b6a6:	f002 0204 	and.w	r2, r2, #4
 800b6aa:	9201      	str	r2, [sp, #4]
 800b6ac:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800b6ae:	9402      	str	r4, [sp, #8]
 800b6b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b6b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b6b6:	631a      	str	r2, [r3, #48]	; 0x30
 800b6b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b6ba:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800b6be:	9202      	str	r2, [sp, #8]
 800b6c0:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800b6c2:	9403      	str	r4, [sp, #12]
 800b6c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b6c6:	f042 0201 	orr.w	r2, r2, #1
 800b6ca:	631a      	str	r2, [r3, #48]	; 0x30
 800b6cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b6ce:	f002 0201 	and.w	r2, r2, #1
 800b6d2:	9203      	str	r2, [sp, #12]
 800b6d4:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800b6d6:	9404      	str	r4, [sp, #16]
 800b6d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b6da:	f042 0202 	orr.w	r2, r2, #2
 800b6de:	631a      	str	r2, [r3, #48]	; 0x30
 800b6e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6e2:	f003 0302 	and.w	r3, r3, #2
 800b6e6:	9304      	str	r3, [sp, #16]
 800b6e8:	9b04      	ldr	r3, [sp, #16]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(MOTOR_ENB_GPIO_Port, MOTOR_ENB_Pin, GPIO_PIN_RESET);
 800b6ea:	4e1b      	ldr	r6, [pc, #108]	; (800b758 <MX_GPIO_Init+0xd0>)
 800b6ec:	4622      	mov	r2, r4
 800b6ee:	2102      	movs	r1, #2
 800b6f0:	4630      	mov	r0, r6
 800b6f2:	f7fa ffa3 	bl	800663c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | MOTOR_ENA_Pin, GPIO_PIN_RESET);
 800b6f6:	4f19      	ldr	r7, [pc, #100]	; (800b75c <MX_GPIO_Init+0xd4>)
 800b6f8:	4622      	mov	r2, r4
 800b6fa:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800b6fe:	4638      	mov	r0, r7
 800b700:	f7fa ff9c 	bl	800663c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = B1_Pin;
 800b704:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b708:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800b70a:	4b15      	ldr	r3, [pc, #84]	; (800b760 <MX_GPIO_Init+0xd8>)
 800b70c:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b70e:	9407      	str	r4, [sp, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800b710:	a905      	add	r1, sp, #20
 800b712:	4630      	mov	r0, r6
 800b714:	f7fa fd8a 	bl	800622c <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = MOTOR_ENB_Pin;
 800b718:	2302      	movs	r3, #2
 800b71a:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b71c:	2501      	movs	r5, #1
 800b71e:	9506      	str	r5, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b720:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b722:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(MOTOR_ENB_GPIO_Port, &GPIO_InitStruct);
 800b724:	a905      	add	r1, sp, #20
 800b726:	4630      	mov	r0, r6
 800b728:	f7fa fd80 	bl	800622c <HAL_GPIO_Init>

	/*Configure GPIO pins : PAPin PAPin */
	GPIO_InitStruct.Pin = LD2_Pin | MOTOR_ENA_Pin;
 800b72c:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800b730:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b732:	9506      	str	r5, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b734:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b736:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b738:	a905      	add	r1, sp, #20
 800b73a:	4638      	mov	r0, r7
 800b73c:	f7fa fd76 	bl	800622c <HAL_GPIO_Init>

	/* Initialize LED */
	BSP_LED_Init(LED2);
 800b740:	4620      	mov	r0, r4
 800b742:	f7f9 fa81 	bl	8004c48 <BSP_LED_Init>

	/* Initialize push button */
	BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 800b746:	4629      	mov	r1, r5
 800b748:	4620      	mov	r0, r4
 800b74a:	f7f9 fabd 	bl	8004cc8 <BSP_PB_Init>
}
 800b74e:	b00b      	add	sp, #44	; 0x2c
 800b750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b752:	bf00      	nop
 800b754:	40023800 	.word	0x40023800
 800b758:	40020800 	.word	0x40020800
 800b75c:	40020000 	.word	0x40020000
 800b760:	10210000 	.word	0x10210000

0800b764 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800b764:	b508      	push	{r3, lr}
	hi2c1.Instance = I2C1;
 800b766:	480b      	ldr	r0, [pc, #44]	; (800b794 <MX_I2C1_Init+0x30>)
 800b768:	4b0b      	ldr	r3, [pc, #44]	; (800b798 <MX_I2C1_Init+0x34>)
 800b76a:	6003      	str	r3, [r0, #0]
	hi2c1.Init.ClockSpeed = 400000;
 800b76c:	4b0b      	ldr	r3, [pc, #44]	; (800b79c <MX_I2C1_Init+0x38>)
 800b76e:	6043      	str	r3, [r0, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800b770:	2300      	movs	r3, #0
 800b772:	6083      	str	r3, [r0, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800b774:	60c3      	str	r3, [r0, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b776:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b77a:	6102      	str	r2, [r0, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800b77c:	6143      	str	r3, [r0, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800b77e:	6183      	str	r3, [r0, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800b780:	61c3      	str	r3, [r0, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800b782:	6203      	str	r3, [r0, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800b784:	f7fb faf0 	bl	8006d68 <HAL_I2C_Init>
 800b788:	b900      	cbnz	r0, 800b78c <MX_I2C1_Init+0x28>
 800b78a:	bd08      	pop	{r3, pc}
		Error_Handler();
 800b78c:	f000 fbdc 	bl	800bf48 <Error_Handler>
	}
}
 800b790:	e7fb      	b.n	800b78a <MX_I2C1_Init+0x26>
 800b792:	bf00      	nop
 800b794:	200029bc 	.word	0x200029bc
 800b798:	40005400 	.word	0x40005400
 800b79c:	00061a80 	.word	0x00061a80

0800b7a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800b7a0:	b570      	push	{r4, r5, r6, lr}
 800b7a2:	b088      	sub	sp, #32
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	9303      	str	r3, [sp, #12]
 800b7a8:	9304      	str	r3, [sp, #16]
 800b7aa:	9305      	str	r3, [sp, #20]
 800b7ac:	9306      	str	r3, [sp, #24]
 800b7ae:	9307      	str	r3, [sp, #28]
	if (i2cHandle->Instance == I2C1) {
 800b7b0:	6802      	ldr	r2, [r0, #0]
 800b7b2:	4b38      	ldr	r3, [pc, #224]	; (800b894 <HAL_I2C_MspInit+0xf4>)
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d001      	beq.n	800b7bc <HAL_I2C_MspInit+0x1c>
		HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
		/* USER CODE BEGIN I2C1_MspInit 1 */

		/* USER CODE END I2C1_MspInit 1 */
	}
}
 800b7b8:	b008      	add	sp, #32
 800b7ba:	bd70      	pop	{r4, r5, r6, pc}
 800b7bc:	4604      	mov	r4, r0
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800b7be:	2500      	movs	r5, #0
 800b7c0:	9501      	str	r5, [sp, #4]
 800b7c2:	4e35      	ldr	r6, [pc, #212]	; (800b898 <HAL_I2C_MspInit+0xf8>)
 800b7c4:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800b7c6:	f043 0302 	orr.w	r3, r3, #2
 800b7ca:	6333      	str	r3, [r6, #48]	; 0x30
 800b7cc:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800b7ce:	f003 0302 	and.w	r3, r3, #2
 800b7d2:	9301      	str	r3, [sp, #4]
 800b7d4:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 800b7d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b7da:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b7dc:	2312      	movs	r3, #18
 800b7de:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b7e4:	2303      	movs	r3, #3
 800b7e6:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800b7e8:	2304      	movs	r3, #4
 800b7ea:	9307      	str	r3, [sp, #28]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b7ec:	a903      	add	r1, sp, #12
 800b7ee:	482b      	ldr	r0, [pc, #172]	; (800b89c <HAL_I2C_MspInit+0xfc>)
 800b7f0:	f7fa fd1c 	bl	800622c <HAL_GPIO_Init>
		__HAL_RCC_I2C1_CLK_ENABLE();
 800b7f4:	9502      	str	r5, [sp, #8]
 800b7f6:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800b7f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b7fc:	6433      	str	r3, [r6, #64]	; 0x40
 800b7fe:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800b800:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b804:	9302      	str	r3, [sp, #8]
 800b806:	9b02      	ldr	r3, [sp, #8]
		hdma_i2c1_rx.Instance = DMA1_Stream0;
 800b808:	4825      	ldr	r0, [pc, #148]	; (800b8a0 <HAL_I2C_MspInit+0x100>)
 800b80a:	4b26      	ldr	r3, [pc, #152]	; (800b8a4 <HAL_I2C_MspInit+0x104>)
 800b80c:	6003      	str	r3, [r0, #0]
		hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800b80e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b812:	6043      	str	r3, [r0, #4]
		hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b814:	6085      	str	r5, [r0, #8]
		hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b816:	60c5      	str	r5, [r0, #12]
		hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b818:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b81c:	6103      	str	r3, [r0, #16]
		hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b81e:	6145      	str	r5, [r0, #20]
		hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b820:	6185      	str	r5, [r0, #24]
		hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800b822:	61c5      	str	r5, [r0, #28]
		hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800b824:	6205      	str	r5, [r0, #32]
		hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b826:	6245      	str	r5, [r0, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK) {
 800b828:	f7fa fa02 	bl	8005c30 <HAL_DMA_Init>
 800b82c:	bb58      	cbnz	r0, 800b886 <HAL_I2C_MspInit+0xe6>
		__HAL_LINKDMA(i2cHandle, hdmarx, hdma_i2c1_rx);
 800b82e:	4b1c      	ldr	r3, [pc, #112]	; (800b8a0 <HAL_I2C_MspInit+0x100>)
 800b830:	63a3      	str	r3, [r4, #56]	; 0x38
 800b832:	639c      	str	r4, [r3, #56]	; 0x38
		hdma_i2c1_tx.Instance = DMA1_Stream7;
 800b834:	481c      	ldr	r0, [pc, #112]	; (800b8a8 <HAL_I2C_MspInit+0x108>)
 800b836:	4b1d      	ldr	r3, [pc, #116]	; (800b8ac <HAL_I2C_MspInit+0x10c>)
 800b838:	6003      	str	r3, [r0, #0]
		hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800b83a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b83e:	6043      	str	r3, [r0, #4]
		hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b840:	2340      	movs	r3, #64	; 0x40
 800b842:	6083      	str	r3, [r0, #8]
		hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b844:	2300      	movs	r3, #0
 800b846:	60c3      	str	r3, [r0, #12]
		hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b848:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b84c:	6102      	str	r2, [r0, #16]
		hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b84e:	6143      	str	r3, [r0, #20]
		hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b850:	6183      	str	r3, [r0, #24]
		hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800b852:	61c3      	str	r3, [r0, #28]
		hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b854:	6203      	str	r3, [r0, #32]
		hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b856:	6243      	str	r3, [r0, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK) {
 800b858:	f7fa f9ea 	bl	8005c30 <HAL_DMA_Init>
 800b85c:	b9b0      	cbnz	r0, 800b88c <HAL_I2C_MspInit+0xec>
		__HAL_LINKDMA(i2cHandle, hdmatx, hdma_i2c1_tx);
 800b85e:	4b12      	ldr	r3, [pc, #72]	; (800b8a8 <HAL_I2C_MspInit+0x108>)
 800b860:	6363      	str	r3, [r4, #52]	; 0x34
 800b862:	639c      	str	r4, [r3, #56]	; 0x38
		HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800b864:	2200      	movs	r2, #0
 800b866:	4611      	mov	r1, r2
 800b868:	201f      	movs	r0, #31
 800b86a:	f7fa f8c5 	bl	80059f8 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800b86e:	201f      	movs	r0, #31
 800b870:	f7fa f906 	bl	8005a80 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800b874:	2200      	movs	r2, #0
 800b876:	4611      	mov	r1, r2
 800b878:	2020      	movs	r0, #32
 800b87a:	f7fa f8bd 	bl	80059f8 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800b87e:	2020      	movs	r0, #32
 800b880:	f7fa f8fe 	bl	8005a80 <HAL_NVIC_EnableIRQ>
}
 800b884:	e798      	b.n	800b7b8 <HAL_I2C_MspInit+0x18>
			Error_Handler();
 800b886:	f000 fb5f 	bl	800bf48 <Error_Handler>
 800b88a:	e7d0      	b.n	800b82e <HAL_I2C_MspInit+0x8e>
			Error_Handler();
 800b88c:	f000 fb5c 	bl	800bf48 <Error_Handler>
 800b890:	e7e5      	b.n	800b85e <HAL_I2C_MspInit+0xbe>
 800b892:	bf00      	nop
 800b894:	40005400 	.word	0x40005400
 800b898:	40023800 	.word	0x40023800
 800b89c:	40020400 	.word	0x40020400
 800b8a0:	20002a10 	.word	0x20002a10
 800b8a4:	40026010 	.word	0x40026010
 800b8a8:	2000295c 	.word	0x2000295c
 800b8ac:	400260b8 	.word	0x400260b8

0800b8b0 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
	if (i2cHandle->Instance == I2C1) {
 800b8b0:	6802      	ldr	r2, [r0, #0]
 800b8b2:	4b0e      	ldr	r3, [pc, #56]	; (800b8ec <HAL_I2C_MspDeInit+0x3c>)
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	d000      	beq.n	800b8ba <HAL_I2C_MspDeInit+0xa>
 800b8b8:	4770      	bx	lr
{
 800b8ba:	b510      	push	{r4, lr}
 800b8bc:	4604      	mov	r4, r0
		/* USER CODE BEGIN I2C1_MspDeInit 0 */

		/* USER CODE END I2C1_MspDeInit 0 */
		/* Peripheral clock disable */
		__HAL_RCC_I2C1_CLK_DISABLE();
 800b8be:	4a0c      	ldr	r2, [pc, #48]	; (800b8f0 <HAL_I2C_MspDeInit+0x40>)
 800b8c0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800b8c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b8c6:	6413      	str	r3, [r2, #64]	; 0x40

		/**I2C1 GPIO Configuration
		   PB8     ------> I2C1_SCL
		   PB9     ------> I2C1_SDA
		 */
		HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8 | GPIO_PIN_9);
 800b8c8:	f44f 7140 	mov.w	r1, #768	; 0x300
 800b8cc:	4809      	ldr	r0, [pc, #36]	; (800b8f4 <HAL_I2C_MspDeInit+0x44>)
 800b8ce:	f7fa fe07 	bl	80064e0 <HAL_GPIO_DeInit>

		/* I2C1 DMA DeInit */
		HAL_DMA_DeInit(i2cHandle->hdmarx);
 800b8d2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800b8d4:	f7fa faec 	bl	8005eb0 <HAL_DMA_DeInit>
		HAL_DMA_DeInit(i2cHandle->hdmatx);
 800b8d8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800b8da:	f7fa fae9 	bl	8005eb0 <HAL_DMA_DeInit>

		/* I2C1 interrupt Deinit */
		HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 800b8de:	201f      	movs	r0, #31
 800b8e0:	f7fa f8e4 	bl	8005aac <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 800b8e4:	2020      	movs	r0, #32
 800b8e6:	f7fa f8e1 	bl	8005aac <HAL_NVIC_DisableIRQ>
 800b8ea:	bd10      	pop	{r4, pc}
 800b8ec:	40005400 	.word	0x40005400
 800b8f0:	40023800 	.word	0x40023800
 800b8f4:	40020400 	.word	0x40020400

0800b8f8 <MX_CRC_Init>:
 * @brief  CRC init function.
 * @param  None
 * @retval None
 */
static void MX_CRC_Init(void)
{
 800b8f8:	b082      	sub	sp, #8
  __CRC_CLK_ENABLE();
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	9301      	str	r3, [sp, #4]
 800b8fe:	4b06      	ldr	r3, [pc, #24]	; (800b918 <MX_CRC_Init+0x20>)
 800b900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b902:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b906:	631a      	str	r2, [r3, #48]	; 0x30
 800b908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b90a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b90e:	9301      	str	r3, [sp, #4]
 800b910:	9b01      	ldr	r3, [sp, #4]
}
 800b912:	b002      	add	sp, #8
 800b914:	4770      	bx	lr
 800b916:	bf00      	nop
 800b918:	40023800 	.word	0x40023800

0800b91c <MX_TIM_ALGO_Init>:
 * @param  None
 * @retval None
 * @details This function intializes the Timer used to synchronize the algorithm.
 */
static void MX_TIM_ALGO_Init(void)
{
 800b91c:	b530      	push	{r4, r5, lr}
 800b91e:	b087      	sub	sp, #28
  const uint32_t tim_period = TIM_CLOCK / ALGO_FREQ - 1U;

  TIM_ClockConfigTypeDef s_clock_source_config;
  TIM_MasterConfigTypeDef s_master_config;

  AlgoTimHandle.Instance           = TIM_ALGO;
 800b920:	4c0e      	ldr	r4, [pc, #56]	; (800b95c <MX_TIM_ALGO_Init+0x40>)
 800b922:	4b0f      	ldr	r3, [pc, #60]	; (800b960 <MX_TIM_ALGO_Init+0x44>)
 800b924:	6023      	str	r3, [r4, #0]
  AlgoTimHandle.Init.Prescaler     = prescaler;
 800b926:	f24a 430f 	movw	r3, #41999	; 0xa40f
 800b92a:	6063      	str	r3, [r4, #4]
  AlgoTimHandle.Init.CounterMode   = TIM_COUNTERMODE_UP;
 800b92c:	2500      	movs	r5, #0
 800b92e:	60a5      	str	r5, [r4, #8]
  AlgoTimHandle.Init.Period        = tim_period;
 800b930:	2313      	movs	r3, #19
 800b932:	60e3      	str	r3, [r4, #12]
  AlgoTimHandle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b934:	6125      	str	r5, [r4, #16]
  (void)HAL_TIM_Base_Init(&AlgoTimHandle);
 800b936:	4620      	mov	r0, r4
 800b938:	f7fd ffde 	bl	80098f8 <HAL_TIM_Base_Init>

  s_clock_source_config.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b93c:	a906      	add	r1, sp, #24
 800b93e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b942:	f841 3d10 	str.w	r3, [r1, #-16]!
  (void)HAL_TIM_ConfigClockSource(&AlgoTimHandle, &s_clock_source_config);
 800b946:	4620      	mov	r0, r4
 800b948:	f7fd fc3c 	bl	80091c4 <HAL_TIM_ConfigClockSource>

  s_master_config.MasterOutputTrigger = TIM_TRGO_RESET;
 800b94c:	9500      	str	r5, [sp, #0]
  s_master_config.MasterSlaveMode     = TIM_MASTERSLAVEMODE_DISABLE;
 800b94e:	9501      	str	r5, [sp, #4]
  (void)HAL_TIMEx_MasterConfigSynchronization(&AlgoTimHandle, &s_master_config);
 800b950:	4669      	mov	r1, sp
 800b952:	4620      	mov	r0, r4
 800b954:	f7fe fae8 	bl	8009f28 <HAL_TIMEx_MasterConfigSynchronization>
}
 800b958:	b007      	add	sp, #28
 800b95a:	bd30      	pop	{r4, r5, pc}
 800b95c:	200035d8 	.word	0x200035d8
 800b960:	40000c00 	.word	0x40000c00

0800b964 <Init_Sensors>:
{
 800b964:	b508      	push	{r3, lr}
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_ACCELERO | MOTION_GYRO);
 800b966:	2103      	movs	r1, #3
 800b968:	2000      	movs	r0, #0
 800b96a:	f7f8 ffbb 	bl	80048e4 <IKS01A2_MOTION_SENSOR_Init>
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 800b96e:	2104      	movs	r1, #4
 800b970:	2002      	movs	r0, #2
 800b972:	f7f8 ffb7 	bl	80048e4 <IKS01A2_MOTION_SENSOR_Init>
  (void)IKS01A2_ENV_SENSOR_Init(IKS01A2_HTS221_0, ENV_TEMPERATURE | ENV_HUMIDITY);
 800b976:	2105      	movs	r1, #5
 800b978:	2000      	movs	r0, #0
 800b97a:	f7f8 fcfb 	bl	8004374 <IKS01A2_ENV_SENSOR_Init>
  (void)IKS01A2_ENV_SENSOR_Init(IKS01A2_LPS22HB_0, ENV_PRESSURE);
 800b97e:	2102      	movs	r1, #2
 800b980:	2001      	movs	r0, #1
 800b982:	f7f8 fcf7 	bl	8004374 <IKS01A2_ENV_SENSOR_Init>
   if ((SensorsEnabled & PRESSURE_SENSOR) == PRESSURE_SENSOR)
 800b986:	4b21      	ldr	r3, [pc, #132]	; (800ba0c <Init_Sensors+0xa8>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	f013 0f01 	tst.w	r3, #1
 800b98e:	d11f      	bne.n	800b9d0 <Init_Sensors+0x6c>
   if ((SensorsEnabled & TEMPERATURE_SENSOR) == TEMPERATURE_SENSOR)
 800b990:	4b1e      	ldr	r3, [pc, #120]	; (800ba0c <Init_Sensors+0xa8>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	f013 0f02 	tst.w	r3, #2
 800b998:	d11f      	bne.n	800b9da <Init_Sensors+0x76>
   if ((SensorsEnabled & HUMIDITY_SENSOR) == HUMIDITY_SENSOR)
 800b99a:	4b1c      	ldr	r3, [pc, #112]	; (800ba0c <Init_Sensors+0xa8>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f013 0f04 	tst.w	r3, #4
 800b9a2:	d11f      	bne.n	800b9e4 <Init_Sensors+0x80>
   if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 800b9a4:	4b19      	ldr	r3, [pc, #100]	; (800ba0c <Init_Sensors+0xa8>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	f013 0f10 	tst.w	r3, #16
 800b9ac:	d11f      	bne.n	800b9ee <Init_Sensors+0x8a>
   if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
 800b9ae:	4b17      	ldr	r3, [pc, #92]	; (800ba0c <Init_Sensors+0xa8>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f013 0f20 	tst.w	r3, #32
 800b9b6:	d11f      	bne.n	800b9f8 <Init_Sensors+0x94>
   if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
 800b9b8:	4b14      	ldr	r3, [pc, #80]	; (800ba0c <Init_Sensors+0xa8>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b9c0:	d11f      	bne.n	800ba02 <Init_Sensors+0x9e>
   (void)HAL_TIM_Base_Start_IT(&AlgoTimHandle);
 800b9c2:	4813      	ldr	r0, [pc, #76]	; (800ba10 <Init_Sensors+0xac>)
 800b9c4:	f7fd fb80 	bl	80090c8 <HAL_TIM_Base_Start_IT>
   DataLoggerActive = 1;
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	4b12      	ldr	r3, [pc, #72]	; (800ba14 <Init_Sensors+0xb0>)
 800b9cc:	701a      	strb	r2, [r3, #0]
 800b9ce:	bd08      	pop	{r3, pc}
     (void)IKS01A2_ENV_SENSOR_Enable(IKS01A2_LPS22HB_0, ENV_PRESSURE);
 800b9d0:	2102      	movs	r1, #2
 800b9d2:	2001      	movs	r0, #1
 800b9d4:	f7f8 fd96 	bl	8004504 <IKS01A2_ENV_SENSOR_Enable>
 800b9d8:	e7da      	b.n	800b990 <Init_Sensors+0x2c>
     (void)IKS01A2_ENV_SENSOR_Enable(IKS01A2_HTS221_0, ENV_TEMPERATURE);
 800b9da:	2101      	movs	r1, #1
 800b9dc:	2000      	movs	r0, #0
 800b9de:	f7f8 fd91 	bl	8004504 <IKS01A2_ENV_SENSOR_Enable>
 800b9e2:	e7da      	b.n	800b99a <Init_Sensors+0x36>
     (void)IKS01A2_ENV_SENSOR_Enable(IKS01A2_HTS221_0, ENV_HUMIDITY);
 800b9e4:	2104      	movs	r1, #4
 800b9e6:	2000      	movs	r0, #0
 800b9e8:	f7f8 fd8c 	bl	8004504 <IKS01A2_ENV_SENSOR_Enable>
 800b9ec:	e7da      	b.n	800b9a4 <Init_Sensors+0x40>
     (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 800b9ee:	2102      	movs	r1, #2
 800b9f0:	2000      	movs	r0, #0
 800b9f2:	f7f9 f873 	bl	8004adc <IKS01A2_MOTION_SENSOR_Enable>
 800b9f6:	e7da      	b.n	800b9ae <Init_Sensors+0x4a>
     (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 800b9f8:	2101      	movs	r1, #1
 800b9fa:	2000      	movs	r0, #0
 800b9fc:	f7f9 f86e 	bl	8004adc <IKS01A2_MOTION_SENSOR_Enable>
 800ba00:	e7da      	b.n	800b9b8 <Init_Sensors+0x54>
     (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 800ba02:	2104      	movs	r1, #4
 800ba04:	2002      	movs	r0, #2
 800ba06:	f7f9 f869 	bl	8004adc <IKS01A2_MOTION_SENSOR_Enable>
 800ba0a:	e7da      	b.n	800b9c2 <Init_Sensors+0x5e>
 800ba0c:	20001474 	.word	0x20001474
 800ba10:	200035d8 	.word	0x200035d8
 800ba14:	20002778 	.word	0x20002778

0800ba18 <RTC_Handler>:
 * @brief  Handles the time+date getting/sending
 * @param  Msg the time+date part of the stream
 * @retval None
 */
static RTC_TimeTypeDef RTC_Handler(TMsg *Msg)
{
 800ba18:	b570      	push	{r4, r5, r6, lr}
 800ba1a:	b086      	sub	sp, #24
 800ba1c:	4606      	mov	r6, r0
 800ba1e:	460c      	mov	r4, r1
  uint32_t ans_uint32;
  int32_t ans_int32;
  RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructure;

  (void)HAL_RTC_GetTime(&RtcHandle, &stimestructure, FORMAT_BIN);
 800ba20:	4d13      	ldr	r5, [pc, #76]	; (800ba70 <RTC_Handler+0x58>)
 800ba22:	2200      	movs	r2, #0
 800ba24:	4669      	mov	r1, sp
 800ba26:	4628      	mov	r0, r5
 800ba28:	f7fd f942 	bl	8008cb0 <HAL_RTC_GetTime>
  (void)HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, FORMAT_BIN);
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	a905      	add	r1, sp, #20
 800ba30:	4628      	mov	r0, r5
 800ba32:	f7fd fa2d 	bl	8008e90 <HAL_RTC_GetDate>

  /* To be MISRA C-2012 compliant the original calculation:
     sub_sec = ((((((int)RtcSynchPrediv) - ((int)stimestructure.SubSeconds)) * 100) / (RtcSynchPrediv + 1)) & 0xFF);
     has been split to separate expressions */
  ans_int32 = (RtcSynchPrediv - (int32_t)stimestructure.SubSeconds) * 100;
 800ba36:	4b0f      	ldr	r3, [pc, #60]	; (800ba74 <RTC_Handler+0x5c>)
 800ba38:	681a      	ldr	r2, [r3, #0]
 800ba3a:	9b01      	ldr	r3, [sp, #4]
 800ba3c:	1ad1      	subs	r1, r2, r3
 800ba3e:	2364      	movs	r3, #100	; 0x64
 800ba40:	fb03 f301 	mul.w	r3, r3, r1
  ans_int32 /= RtcSynchPrediv + 1;
 800ba44:	3201      	adds	r2, #1
 800ba46:	fb93 f3f2 	sdiv	r3, r3, r2
  ans_uint32 = (uint32_t)ans_int32 & 0xFFU;
  sub_sec = (uint8_t)ans_uint32;

  Msg->Data[3] = (uint8_t)stimestructure.Hours;
 800ba4a:	f89d 2000 	ldrb.w	r2, [sp]
 800ba4e:	71e2      	strb	r2, [r4, #7]
  Msg->Data[4] = (uint8_t)stimestructure.Minutes;
 800ba50:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800ba54:	7222      	strb	r2, [r4, #8]
  Msg->Data[5] = (uint8_t)stimestructure.Seconds;
 800ba56:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800ba5a:	7262      	strb	r2, [r4, #9]
  Msg->Data[6] = sub_sec;
 800ba5c:	72a3      	strb	r3, [r4, #10]

  return stimestructure;
 800ba5e:	4635      	mov	r5, r6
 800ba60:	466c      	mov	r4, sp
 800ba62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ba64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ba66:	6823      	ldr	r3, [r4, #0]
 800ba68:	602b      	str	r3, [r5, #0]
}
 800ba6a:	4630      	mov	r0, r6
 800ba6c:	b006      	add	sp, #24
 800ba6e:	bd70      	pop	{r4, r5, r6, pc}
 800ba70:	200027a8 	.word	0x200027a8
 800ba74:	200027c8 	.word	0x200027c8

0800ba78 <Accelero_Sensor_Handler>:
 * @param  Instance the device instance
 * @retval None
 */
static void Accelero_Sensor_Handler(TMsg *Msg, uint32_t Instance)
{
  if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 800ba78:	4b20      	ldr	r3, [pc, #128]	; (800bafc <Accelero_Sensor_Handler+0x84>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f013 0f10 	tst.w	r3, #16
 800ba80:	d100      	bne.n	800ba84 <Accelero_Sensor_Handler+0xc>
 800ba82:	4770      	bx	lr
{
 800ba84:	b570      	push	{r4, r5, r6, lr}
 800ba86:	b084      	sub	sp, #16
 800ba88:	460e      	mov	r6, r1
 800ba8a:	4604      	mov	r4, r0
  {

	  uint8_t *pData = malloc(6*sizeof(uint8_t));
 800ba8c:	2006      	movs	r0, #6
 800ba8e:	f00f fd3f 	bl	801b510 <malloc>
 800ba92:	4605      	mov	r5, r0

	  HAL_I2C_Mem_Read(&hi2c1, 0xD7, (uint16_t) 0x28, I2C_MEMADD_SIZE_8BIT, pData, 6, 1000);
 800ba94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ba98:	9302      	str	r3, [sp, #8]
 800ba9a:	2306      	movs	r3, #6
 800ba9c:	9301      	str	r3, [sp, #4]
 800ba9e:	9000      	str	r0, [sp, #0]
 800baa0:	2301      	movs	r3, #1
 800baa2:	2228      	movs	r2, #40	; 0x28
 800baa4:	21d7      	movs	r1, #215	; 0xd7
 800baa6:	4816      	ldr	r0, [pc, #88]	; (800bb00 <Accelero_Sensor_Handler+0x88>)
 800baa8:	f7fb fb4e 	bl	8007148 <HAL_I2C_Mem_Read>


	  printf("%d %d %d %d %d %d", *pData, *(pData+1), *(pData+1), *(pData+3), *(pData+3), *(pData+4), *(pData+5));
 800baac:	7829      	ldrb	r1, [r5, #0]
 800baae:	786a      	ldrb	r2, [r5, #1]
 800bab0:	78eb      	ldrb	r3, [r5, #3]
 800bab2:	7928      	ldrb	r0, [r5, #4]
 800bab4:	796d      	ldrb	r5, [r5, #5]
 800bab6:	9503      	str	r5, [sp, #12]
 800bab8:	9002      	str	r0, [sp, #8]
 800baba:	9301      	str	r3, [sp, #4]
 800babc:	9300      	str	r3, [sp, #0]
 800babe:	4613      	mov	r3, r2
 800bac0:	4810      	ldr	r0, [pc, #64]	; (800bb04 <Accelero_Sensor_Handler+0x8c>)
 800bac2:	f010 fa59 	bl	801bf78 <iprintf>

	  (void)IKS01A2_MOTION_SENSOR_GetAxes(Instance, MOTION_ACCELERO, &AccValue);
 800bac6:	4d10      	ldr	r5, [pc, #64]	; (800bb08 <Accelero_Sensor_Handler+0x90>)
 800bac8:	462a      	mov	r2, r5
 800baca:	2102      	movs	r1, #2
 800bacc:	4630      	mov	r0, r6
 800bace:	f7f9 f831 	bl	8004b34 <IKS01A2_MOTION_SENSOR_GetAxes>
    Serialize_s32(&Msg->Data[19], (int32_t)AccValue.x, 4);
 800bad2:	2204      	movs	r2, #4
 800bad4:	6829      	ldr	r1, [r5, #0]
 800bad6:	f104 0017 	add.w	r0, r4, #23
 800bada:	f000 fcc5 	bl	800c468 <Serialize_s32>
    Serialize_s32(&Msg->Data[23], (int32_t)AccValue.y, 4);
 800bade:	2204      	movs	r2, #4
 800bae0:	6869      	ldr	r1, [r5, #4]
 800bae2:	f104 001b 	add.w	r0, r4, #27
 800bae6:	f000 fcbf 	bl	800c468 <Serialize_s32>
    Serialize_s32(&Msg->Data[27], (int32_t)AccValue.z, 4);
 800baea:	2204      	movs	r2, #4
 800baec:	68a9      	ldr	r1, [r5, #8]
 800baee:	f104 001f 	add.w	r0, r4, #31
 800baf2:	f000 fcb9 	bl	800c468 <Serialize_s32>
  }
}
 800baf6:	b004      	add	sp, #16
 800baf8:	bd70      	pop	{r4, r5, r6, pc}
 800bafa:	bf00      	nop
 800bafc:	20001474 	.word	0x20001474
 800bb00:	200029bc 	.word	0x200029bc
 800bb04:	0801e718 	.word	0x0801e718
 800bb08:	2000276c 	.word	0x2000276c

0800bb0c <Gyro_Sensor_Handler>:
 * @param  Msg the GYR part of the stream
 * @param  Instance the device instance
 * @retval None
 */
static void Gyro_Sensor_Handler(TMsg *Msg, uint32_t Instance)
{
 800bb0c:	b538      	push	{r3, r4, r5, lr}
  if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
 800bb0e:	4b10      	ldr	r3, [pc, #64]	; (800bb50 <Gyro_Sensor_Handler+0x44>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	f013 0f20 	tst.w	r3, #32
 800bb16:	d100      	bne.n	800bb1a <Gyro_Sensor_Handler+0xe>
 800bb18:	bd38      	pop	{r3, r4, r5, pc}
 800bb1a:	460b      	mov	r3, r1
 800bb1c:	4604      	mov	r4, r0
  {
    (void)IKS01A2_MOTION_SENSOR_GetAxes(Instance, MOTION_GYRO, &GyrValue);
 800bb1e:	4d0d      	ldr	r5, [pc, #52]	; (800bb54 <Gyro_Sensor_Handler+0x48>)
 800bb20:	462a      	mov	r2, r5
 800bb22:	2101      	movs	r1, #1
 800bb24:	4618      	mov	r0, r3
 800bb26:	f7f9 f805 	bl	8004b34 <IKS01A2_MOTION_SENSOR_GetAxes>



    Serialize_s32(&Msg->Data[31], GyrValue.x, 4);
 800bb2a:	2204      	movs	r2, #4
 800bb2c:	6829      	ldr	r1, [r5, #0]
 800bb2e:	f104 0023 	add.w	r0, r4, #35	; 0x23
 800bb32:	f000 fc99 	bl	800c468 <Serialize_s32>
    Serialize_s32(&Msg->Data[35], GyrValue.y, 4);
 800bb36:	2204      	movs	r2, #4
 800bb38:	6869      	ldr	r1, [r5, #4]
 800bb3a:	f104 0027 	add.w	r0, r4, #39	; 0x27
 800bb3e:	f000 fc93 	bl	800c468 <Serialize_s32>
    Serialize_s32(&Msg->Data[39], GyrValue.z, 4);
 800bb42:	2204      	movs	r2, #4
 800bb44:	68a9      	ldr	r1, [r5, #8]
 800bb46:	f104 002b 	add.w	r0, r4, #43	; 0x2b
 800bb4a:	f000 fc8d 	bl	800c468 <Serialize_s32>
  }
}
 800bb4e:	e7e3      	b.n	800bb18 <Gyro_Sensor_Handler+0xc>
 800bb50:	20001474 	.word	0x20001474
 800bb54:	2000277c 	.word	0x2000277c

0800bb58 <Magneto_Sensor_Handler>:
  MFX_CM0P_MagCal_output_t mag_data_out;
#else
#error Not supported platform
#endif

  if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
 800bb58:	4b3e      	ldr	r3, [pc, #248]	; (800bc54 <Magneto_Sensor_Handler+0xfc>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800bb60:	d100      	bne.n	800bb64 <Magneto_Sensor_Handler+0xc>
 800bb62:	4770      	bx	lr
{
 800bb64:	b530      	push	{r4, r5, lr}
 800bb66:	b089      	sub	sp, #36	; 0x24
 800bb68:	460b      	mov	r3, r1
 800bb6a:	4605      	mov	r5, r0
  {
    (void)IKS01A2_MOTION_SENSOR_GetAxes(Instance, MOTION_MAGNETO, &MagValue);
 800bb6c:	4a3a      	ldr	r2, [pc, #232]	; (800bc58 <Magneto_Sensor_Handler+0x100>)
 800bb6e:	2104      	movs	r1, #4
 800bb70:	4618      	mov	r0, r3
 800bb72:	f7f8 ffdf 	bl	8004b34 <IKS01A2_MOTION_SENSOR_GetAxes>

    if (MagCalStatus == 0U)
 800bb76:	4b39      	ldr	r3, [pc, #228]	; (800bc5c <Magneto_Sensor_Handler+0x104>)
 800bb78:	781b      	ldrb	r3, [r3, #0]
 800bb7a:	b303      	cbz	r3, 800bbbe <Magneto_Sensor_Handler+0x66>
        /* Disable magnetometer calibration */
        MotionFX_manager_MagCal_stop(ALGO_PERIOD);
      }
    }

    MagValue.x = (int32_t)(MagValue.x - MagOffset.x);
 800bb7c:	4c36      	ldr	r4, [pc, #216]	; (800bc58 <Magneto_Sensor_Handler+0x100>)
 800bb7e:	6821      	ldr	r1, [r4, #0]
 800bb80:	4a37      	ldr	r2, [pc, #220]	; (800bc60 <Magneto_Sensor_Handler+0x108>)
 800bb82:	6813      	ldr	r3, [r2, #0]
 800bb84:	1ac9      	subs	r1, r1, r3
 800bb86:	6021      	str	r1, [r4, #0]
    MagValue.y = (int32_t)(MagValue.y - MagOffset.y);
 800bb88:	6863      	ldr	r3, [r4, #4]
 800bb8a:	6850      	ldr	r0, [r2, #4]
 800bb8c:	1a1b      	subs	r3, r3, r0
 800bb8e:	6063      	str	r3, [r4, #4]
    MagValue.z = (int32_t)(MagValue.z - MagOffset.z);
 800bb90:	68a3      	ldr	r3, [r4, #8]
 800bb92:	6892      	ldr	r2, [r2, #8]
 800bb94:	1a9b      	subs	r3, r3, r2
 800bb96:	60a3      	str	r3, [r4, #8]

    Serialize_s32(&Msg->Data[43], MagValue.x, 4);
 800bb98:	2204      	movs	r2, #4
 800bb9a:	f105 002f 	add.w	r0, r5, #47	; 0x2f
 800bb9e:	f000 fc63 	bl	800c468 <Serialize_s32>
    Serialize_s32(&Msg->Data[47], MagValue.y, 4);
 800bba2:	2204      	movs	r2, #4
 800bba4:	6861      	ldr	r1, [r4, #4]
 800bba6:	f105 0033 	add.w	r0, r5, #51	; 0x33
 800bbaa:	f000 fc5d 	bl	800c468 <Serialize_s32>
    Serialize_s32(&Msg->Data[51], MagValue.z, 4);
 800bbae:	2204      	movs	r2, #4
 800bbb0:	68a1      	ldr	r1, [r4, #8]
 800bbb2:	f105 0037 	add.w	r0, r5, #55	; 0x37
 800bbb6:	f000 fc57 	bl	800c468 <Serialize_s32>
  }
}
 800bbba:	b009      	add	sp, #36	; 0x24
 800bbbc:	bd30      	pop	{r4, r5, pc}
      mag_data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 800bbbe:	4b26      	ldr	r3, [pc, #152]	; (800bc58 <Magneto_Sensor_Handler+0x100>)
 800bbc0:	edd3 7a00 	vldr	s15, [r3]
 800bbc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bbc8:	eddf 6a26 	vldr	s13, [pc, #152]	; 800bc64 <Magneto_Sensor_Handler+0x10c>
 800bbcc:	ee27 7a26 	vmul.f32	s14, s14, s13
 800bbd0:	ed8d 7a04 	vstr	s14, [sp, #16]
      mag_data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 800bbd4:	edd3 7a01 	vldr	s15, [r3, #4]
 800bbd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bbdc:	ee27 7a26 	vmul.f32	s14, s14, s13
 800bbe0:	ed8d 7a05 	vstr	s14, [sp, #20]
      mag_data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 800bbe4:	edd3 7a02 	vldr	s15, [r3, #8]
 800bbe8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bbec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bbf0:	edcd 7a06 	vstr	s15, [sp, #24]
      mag_data_in.time_stamp = (int)MagTimeStamp;
 800bbf4:	4a1c      	ldr	r2, [pc, #112]	; (800bc68 <Magneto_Sensor_Handler+0x110>)
 800bbf6:	6813      	ldr	r3, [r2, #0]
 800bbf8:	9307      	str	r3, [sp, #28]
      MagTimeStamp += (uint32_t)ALGO_PERIOD;
 800bbfa:	330a      	adds	r3, #10
 800bbfc:	6013      	str	r3, [r2, #0]
      MotionFX_manager_MagCal_run(&mag_data_in, &mag_data_out);
 800bbfe:	4669      	mov	r1, sp
 800bc00:	a804      	add	r0, sp, #16
 800bc02:	f7fe ff4b 	bl	800aa9c <MotionFX_manager_MagCal_run>
      if (mag_data_out.cal_quality == MFX_MAGCALGOOD)
 800bc06:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800bc0a:	2b03      	cmp	r3, #3
 800bc0c:	d1b6      	bne.n	800bb7c <Magneto_Sensor_Handler+0x24>
        MagCalStatus = 1;
 800bc0e:	2201      	movs	r2, #1
 800bc10:	4b12      	ldr	r3, [pc, #72]	; (800bc5c <Magneto_Sensor_Handler+0x104>)
 800bc12:	701a      	strb	r2, [r3, #0]
        ans_float = (mag_data_out.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 800bc14:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800bc6c <Magneto_Sensor_Handler+0x114>
 800bc18:	eddd 7a00 	vldr	s15, [sp]
 800bc1c:	ee67 7a87 	vmul.f32	s15, s15, s14
        MagOffset.x = (int32_t)ans_float;
 800bc20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc24:	4b0e      	ldr	r3, [pc, #56]	; (800bc60 <Magneto_Sensor_Handler+0x108>)
 800bc26:	edc3 7a00 	vstr	s15, [r3]
        ans_float = (mag_data_out.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 800bc2a:	eddd 7a01 	vldr	s15, [sp, #4]
 800bc2e:	ee67 7a87 	vmul.f32	s15, s15, s14
        MagOffset.y = (int32_t)ans_float;
 800bc32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc36:	edc3 7a01 	vstr	s15, [r3, #4]
        ans_float = (mag_data_out.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 800bc3a:	eddd 7a02 	vldr	s15, [sp, #8]
 800bc3e:	ee67 7a87 	vmul.f32	s15, s15, s14
        MagOffset.z = (int32_t)ans_float;
 800bc42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc46:	edc3 7a02 	vstr	s15, [r3, #8]
        MotionFX_manager_MagCal_stop(ALGO_PERIOD);
 800bc4a:	200a      	movs	r0, #10
 800bc4c:	f7fe ff33 	bl	800aab6 <MotionFX_manager_MagCal_stop>
 800bc50:	e794      	b.n	800bb7c <Magneto_Sensor_Handler+0x24>
 800bc52:	bf00      	nop
 800bc54:	20001474 	.word	0x20001474
 800bc58:	2000279c 	.word	0x2000279c
 800bc5c:	20002788 	.word	0x20002788
 800bc60:	2000278c 	.word	0x2000278c
 800bc64:	3b03126f 	.word	0x3b03126f
 800bc68:	20002798 	.word	0x20002798
 800bc6c:	43fa0000 	.word	0x43fa0000

0800bc70 <Humidity_Sensor_Handler>:
 */
static void Humidity_Sensor_Handler(TMsg *Msg, uint32_t Instance)
{
  float hum_value;

  if ((SensorsEnabled & HUMIDITY_SENSOR) == HUMIDITY_SENSOR)
 800bc70:	4b09      	ldr	r3, [pc, #36]	; (800bc98 <Humidity_Sensor_Handler+0x28>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f013 0f04 	tst.w	r3, #4
 800bc78:	d100      	bne.n	800bc7c <Humidity_Sensor_Handler+0xc>
 800bc7a:	4770      	bx	lr
{
 800bc7c:	b510      	push	{r4, lr}
 800bc7e:	b082      	sub	sp, #8
 800bc80:	460b      	mov	r3, r1
 800bc82:	4604      	mov	r4, r0
  {
    (void)IKS01A2_ENV_SENSOR_GetValue(Instance, ENV_HUMIDITY, &hum_value);
 800bc84:	aa01      	add	r2, sp, #4
 800bc86:	2104      	movs	r1, #4
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f7f8 fc95 	bl	80045b8 <IKS01A2_ENV_SENSOR_GetValue>
    (void)memcpy(&Msg->Data[15], (void *)&hum_value, sizeof(float));;
 800bc8e:	9b01      	ldr	r3, [sp, #4]
 800bc90:	f8c4 3013 	str.w	r3, [r4, #19]
  }
}
 800bc94:	b002      	add	sp, #8
 800bc96:	bd10      	pop	{r4, pc}
 800bc98:	20001474 	.word	0x20001474

0800bc9c <Temperature_Sensor_Handler>:
  if ((SensorsEnabled & TEMPERATURE_SENSOR) == TEMPERATURE_SENSOR)
 800bc9c:	4b09      	ldr	r3, [pc, #36]	; (800bcc4 <Temperature_Sensor_Handler+0x28>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f013 0f02 	tst.w	r3, #2
 800bca4:	d100      	bne.n	800bca8 <Temperature_Sensor_Handler+0xc>
 800bca6:	4770      	bx	lr
{
 800bca8:	b510      	push	{r4, lr}
 800bcaa:	b082      	sub	sp, #8
 800bcac:	460b      	mov	r3, r1
 800bcae:	4604      	mov	r4, r0
    (void)IKS01A2_ENV_SENSOR_GetValue(Instance, ENV_TEMPERATURE, &temp_value);
 800bcb0:	aa01      	add	r2, sp, #4
 800bcb2:	2101      	movs	r1, #1
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f7f8 fc7f 	bl	80045b8 <IKS01A2_ENV_SENSOR_GetValue>
    (void)memcpy(&Msg->Data[11], (void *)&temp_value, sizeof(float));
 800bcba:	9b01      	ldr	r3, [sp, #4]
 800bcbc:	f8c4 300f 	str.w	r3, [r4, #15]
}
 800bcc0:	b002      	add	sp, #8
 800bcc2:	bd10      	pop	{r4, pc}
 800bcc4:	20001474 	.word	0x20001474

0800bcc8 <Pressure_Sensor_Handler>:
  if ((SensorsEnabled & PRESSURE_SENSOR) == PRESSURE_SENSOR)
 800bcc8:	4b09      	ldr	r3, [pc, #36]	; (800bcf0 <Pressure_Sensor_Handler+0x28>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f013 0f01 	tst.w	r3, #1
 800bcd0:	d100      	bne.n	800bcd4 <Pressure_Sensor_Handler+0xc>
 800bcd2:	4770      	bx	lr
{
 800bcd4:	b510      	push	{r4, lr}
 800bcd6:	b082      	sub	sp, #8
 800bcd8:	460b      	mov	r3, r1
 800bcda:	4604      	mov	r4, r0
    (void)IKS01A2_ENV_SENSOR_GetValue(Instance, ENV_PRESSURE, &press_value);
 800bcdc:	aa01      	add	r2, sp, #4
 800bcde:	2102      	movs	r1, #2
 800bce0:	4618      	mov	r0, r3
 800bce2:	f7f8 fc69 	bl	80045b8 <IKS01A2_ENV_SENSOR_GetValue>
    (void)memcpy(&Msg->Data[7], (void *)&press_value, sizeof(float));
 800bce6:	9b01      	ldr	r3, [sp, #4]
 800bce8:	f8c4 300b 	str.w	r3, [r4, #11]
}
 800bcec:	b002      	add	sp, #8
 800bcee:	bd10      	pop	{r4, pc}
 800bcf0:	20001474 	.word	0x20001474

0800bcf4 <FX_Data_Handler>:
{
 800bcf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcf8:	ed2d 8b02 	vpush	{d8}
 800bcfc:	b0b7      	sub	sp, #220	; 0xdc
 800bcfe:	4604      	mov	r4, r0
  if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 800bd00:	4b83      	ldr	r3, [pc, #524]	; (800bf10 <FX_Data_Handler+0x21c>)
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	f013 0f10 	tst.w	r3, #16
 800bd08:	d00a      	beq.n	800bd20 <FX_Data_Handler+0x2c>
 800bd0a:	460d      	mov	r5, r1
    if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
 800bd0c:	4b80      	ldr	r3, [pc, #512]	; (800bf10 <FX_Data_Handler+0x21c>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f013 0f20 	tst.w	r3, #32
 800bd14:	d004      	beq.n	800bd20 <FX_Data_Handler+0x2c>
      if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
 800bd16:	4b7e      	ldr	r3, [pc, #504]	; (800bf10 <FX_Data_Handler+0x21c>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800bd1e:	d146      	bne.n	800bdae <FX_Data_Handler+0xba>
		  data_out.rotation_9X[0],data_out.rotation_9X[1],data_out.rotation_9X[2],
 800bd20:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800bd22:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
		  data_out.linear_acceleration_9X[0],data_out.linear_acceleration_9X[1],
 800bd26:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 800bd2a:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
		  data_out.linear_acceleration_9X[2],
 800bd2e:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
		  data_out.heading_9X,data_out.headingErr_9X);
 800bd32:	ed9d 8a1c 	vldr	s16, [sp, #112]	; 0x70
 800bd36:	eddd 8a1d 	vldr	s17, [sp, #116]	; 0x74
  printf("ROT XYZ: %0.2f %0.2f %0.2f ACC XYZ: %0.2f %0.2f %0.2f HDG = %0.2f HDGe = %0.2f \r\n",
 800bd3a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800bd3c:	f7f4 fc0c 	bl	8000558 <__aeabi_f2d>
 800bd40:	4606      	mov	r6, r0
 800bd42:	460f      	mov	r7, r1
 800bd44:	ee18 0a90 	vmov	r0, s17
 800bd48:	f7f4 fc06 	bl	8000558 <__aeabi_f2d>
 800bd4c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bd50:	ee18 0a10 	vmov	r0, s16
 800bd54:	f7f4 fc00 	bl	8000558 <__aeabi_f2d>
 800bd58:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800bd5c:	4658      	mov	r0, fp
 800bd5e:	f7f4 fbfb 	bl	8000558 <__aeabi_f2d>
 800bd62:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bd66:	4650      	mov	r0, sl
 800bd68:	f7f4 fbf6 	bl	8000558 <__aeabi_f2d>
 800bd6c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bd70:	4648      	mov	r0, r9
 800bd72:	f7f4 fbf1 	bl	8000558 <__aeabi_f2d>
 800bd76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bd7a:	4640      	mov	r0, r8
 800bd7c:	f7f4 fbec 	bl	8000558 <__aeabi_f2d>
 800bd80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd84:	4628      	mov	r0, r5
 800bd86:	f7f4 fbe7 	bl	8000558 <__aeabi_f2d>
 800bd8a:	e9cd 0100 	strd	r0, r1, [sp]
 800bd8e:	4632      	mov	r2, r6
 800bd90:	463b      	mov	r3, r7
 800bd92:	4860      	ldr	r0, [pc, #384]	; (800bf14 <FX_Data_Handler+0x220>)
 800bd94:	f010 f8f0 	bl	801bf78 <iprintf>
return data_out;
 800bd98:	2278      	movs	r2, #120	; 0x78
 800bd9a:	a90f      	add	r1, sp, #60	; 0x3c
 800bd9c:	4620      	mov	r0, r4
 800bd9e:	f00f fbbf 	bl	801b520 <memcpy>
}
 800bda2:	4620      	mov	r0, r4
 800bda4:	b037      	add	sp, #220	; 0xdc
 800bda6:	ecbd 8b02 	vpop	{d8}
 800bdaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        data_in.gyro[0] = (float)GyrValue.x * FROM_MDPS_TO_DPS;
 800bdae:	4b5a      	ldr	r3, [pc, #360]	; (800bf18 <FX_Data_Handler+0x224>)
 800bdb0:	edd3 7a00 	vldr	s15, [r3]
 800bdb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bdb8:	eddf 7a58 	vldr	s15, [pc, #352]	; 800bf1c <FX_Data_Handler+0x228>
 800bdbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bdc0:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
        data_in.gyro[1] = (float)GyrValue.y * FROM_MDPS_TO_DPS;
 800bdc4:	ed93 7a01 	vldr	s14, [r3, #4]
 800bdc8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bdcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bdd0:	ed8d 7a34 	vstr	s14, [sp, #208]	; 0xd0
        data_in.gyro[2] = (float)GyrValue.z * FROM_MDPS_TO_DPS;
 800bdd4:	ed93 7a02 	vldr	s14, [r3, #8]
 800bdd8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bddc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bde0:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
        data_in.acc[0] = (float)AccValue.x * FROM_MG_TO_G;
 800bde4:	4b4e      	ldr	r3, [pc, #312]	; (800bf20 <FX_Data_Handler+0x22c>)
 800bde6:	ed93 7a00 	vldr	s14, [r3]
 800bdea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bdee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bdf2:	ed8d 7a30 	vstr	s14, [sp, #192]	; 0xc0
        data_in.acc[1] = (float)AccValue.y * FROM_MG_TO_G;
 800bdf6:	ed93 7a01 	vldr	s14, [r3, #4]
 800bdfa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bdfe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be02:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
        data_in.acc[2] = (float)AccValue.z * FROM_MG_TO_G;
 800be06:	ed93 7a02 	vldr	s14, [r3, #8]
 800be0a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800be0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be12:	edcd 7a32 	vstr	s15, [sp, #200]	; 0xc8
        data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 800be16:	4b43      	ldr	r3, [pc, #268]	; (800bf24 <FX_Data_Handler+0x230>)
 800be18:	edd3 7a00 	vldr	s15, [r3]
 800be1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800be20:	eddf 6a41 	vldr	s13, [pc, #260]	; 800bf28 <FX_Data_Handler+0x234>
 800be24:	ee27 7a26 	vmul.f32	s14, s14, s13
 800be28:	ed8d 7a2d 	vstr	s14, [sp, #180]	; 0xb4
        data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 800be2c:	edd3 7a01 	vldr	s15, [r3, #4]
 800be30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800be34:	ee27 7a26 	vmul.f32	s14, s14, s13
 800be38:	ed8d 7a2e 	vstr	s14, [sp, #184]	; 0xb8
        data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 800be3c:	edd3 7a02 	vldr	s15, [r3, #8]
 800be40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be44:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800be48:	edcd 7a2f 	vstr	s15, [sp, #188]	; 0xbc
        BSP_LED_On(LED2);
 800be4c:	2000      	movs	r0, #0
 800be4e:	f7f8 ff23 	bl	8004c98 <BSP_LED_On>
        MotionFX_manager_run(pdata_in, pdata_out, MOTIONFX_ENGINE_DELTATIME);
 800be52:	ed9f 0a36 	vldr	s0, [pc, #216]	; 800bf2c <FX_Data_Handler+0x238>
 800be56:	a90f      	add	r1, sp, #60	; 0x3c
 800be58:	a82d      	add	r0, sp, #180	; 0xb4
 800be5a:	f7fe fdf5 	bl	800aa48 <MotionFX_manager_run>
        BSP_LED_Off(LED2);
 800be5e:	2000      	movs	r0, #0
 800be60:	f7f8 ff26 	bl	8004cb0 <BSP_LED_Off>
        if (Enabled6X == 1U)
 800be64:	4b32      	ldr	r3, [pc, #200]	; (800bf30 <FX_Data_Handler+0x23c>)
 800be66:	781b      	ldrb	r3, [r3, #0]
 800be68:	2b01      	cmp	r3, #1
 800be6a:	d028      	beq.n	800bebe <FX_Data_Handler+0x1ca>
          (void)memcpy(&Msg->Data[55], (void *)pdata_out->quaternion_9X, 4U * sizeof(float));
 800be6c:	ae12      	add	r6, sp, #72	; 0x48
 800be6e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800be70:	f8c5 003b 	str.w	r0, [r5, #59]	; 0x3b
 800be74:	f8c5 103f 	str.w	r1, [r5, #63]	; 0x3f
 800be78:	f8c5 2043 	str.w	r2, [r5, #67]	; 0x43
 800be7c:	f8c5 3047 	str.w	r3, [r5, #71]	; 0x47
          (void)memcpy(&Msg->Data[71], (void *)pdata_out->rotation_9X, 3U * sizeof(float));
 800be80:	ab0f      	add	r3, sp, #60	; 0x3c
 800be82:	cb07      	ldmia	r3!, {r0, r1, r2}
 800be84:	f8c5 004b 	str.w	r0, [r5, #75]	; 0x4b
 800be88:	f8c5 104f 	str.w	r1, [r5, #79]	; 0x4f
 800be8c:	f8c5 2053 	str.w	r2, [r5, #83]	; 0x53
          (void)memcpy(&Msg->Data[83], (void *)pdata_out->gravity_9X, 3U * sizeof(float));
 800be90:	ab16      	add	r3, sp, #88	; 0x58
 800be92:	cb07      	ldmia	r3!, {r0, r1, r2}
 800be94:	f8c5 0057 	str.w	r0, [r5, #87]	; 0x57
 800be98:	f8c5 105b 	str.w	r1, [r5, #91]	; 0x5b
 800be9c:	f8c5 205f 	str.w	r2, [r5, #95]	; 0x5f
          (void)memcpy(&Msg->Data[95], (void *)pdata_out->linear_acceleration_9X, 3U * sizeof(float));
 800bea0:	ab19      	add	r3, sp, #100	; 0x64
 800bea2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bea4:	f8c5 0063 	str.w	r0, [r5, #99]	; 0x63
 800bea8:	f8c5 1067 	str.w	r1, [r5, #103]	; 0x67
 800beac:	f8c5 206b 	str.w	r2, [r5, #107]	; 0x6b
          (void)memcpy(&Msg->Data[107], (void *) & (pdata_out->heading_9X), sizeof(float));
 800beb0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800beb2:	f8c5 306f 	str.w	r3, [r5, #111]	; 0x6f
          (void)memcpy(&Msg->Data[111], (void *) & (pdata_out->headingErr_9X), sizeof(float));
 800beb6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800beb8:	f8c5 3073 	str.w	r3, [r5, #115]	; 0x73
 800bebc:	e730      	b.n	800bd20 <FX_Data_Handler+0x2c>
          (void)memcpy(&Msg->Data[55], (void *)pdata_out->quaternion_6X, 4U * sizeof(float));
 800bebe:	ae21      	add	r6, sp, #132	; 0x84
 800bec0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800bec2:	f8c5 003b 	str.w	r0, [r5, #59]	; 0x3b
 800bec6:	f8c5 103f 	str.w	r1, [r5, #63]	; 0x3f
 800beca:	f8c5 2043 	str.w	r2, [r5, #67]	; 0x43
 800bece:	f8c5 3047 	str.w	r3, [r5, #71]	; 0x47
          (void)memcpy(&Msg->Data[71], (void *)pdata_out->rotation_6X, 3U * sizeof(float));
 800bed2:	ab1e      	add	r3, sp, #120	; 0x78
 800bed4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bed6:	f8c5 004b 	str.w	r0, [r5, #75]	; 0x4b
 800beda:	f8c5 104f 	str.w	r1, [r5, #79]	; 0x4f
 800bede:	f8c5 2053 	str.w	r2, [r5, #83]	; 0x53
          (void)memcpy(&Msg->Data[83], (void *)pdata_out->gravity_6X, 3U * sizeof(float));
 800bee2:	ab25      	add	r3, sp, #148	; 0x94
 800bee4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bee6:	f8c5 0057 	str.w	r0, [r5, #87]	; 0x57
 800beea:	f8c5 105b 	str.w	r1, [r5, #91]	; 0x5b
 800beee:	f8c5 205f 	str.w	r2, [r5, #95]	; 0x5f
          (void)memcpy(&Msg->Data[95], (void *)pdata_out->linear_acceleration_6X, 3U * sizeof(float));
 800bef2:	ab28      	add	r3, sp, #160	; 0xa0
 800bef4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bef6:	f8c5 0063 	str.w	r0, [r5, #99]	; 0x63
 800befa:	f8c5 1067 	str.w	r1, [r5, #103]	; 0x67
 800befe:	f8c5 206b 	str.w	r2, [r5, #107]	; 0x6b
          (void)memcpy(&Msg->Data[107], (void *) & (pdata_out->heading_6X), sizeof(float));
 800bf02:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800bf04:	f8c5 306f 	str.w	r3, [r5, #111]	; 0x6f
          (void)memcpy(&Msg->Data[111], (void *) & (pdata_out->headingErr_6X), sizeof(float));
 800bf08:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800bf0a:	f8c5 3073 	str.w	r3, [r5, #115]	; 0x73
 800bf0e:	e707      	b.n	800bd20 <FX_Data_Handler+0x2c>
 800bf10:	20001474 	.word	0x20001474
 800bf14:	0801e72c 	.word	0x0801e72c
 800bf18:	2000277c 	.word	0x2000277c
 800bf1c:	3a83126f 	.word	0x3a83126f
 800bf20:	2000276c 	.word	0x2000276c
 800bf24:	2000279c 	.word	0x2000279c
 800bf28:	3b03126f 	.word	0x3b03126f
 800bf2c:	3c23d70a 	.word	0x3c23d70a
 800bf30:	200025b0 	.word	0x200025b0

0800bf34 <HAL_GPIO_EXTI_Callback>:
	if (GPIO_Pin == VL53L1X_INT_Pin) {
 800bf34:	2810      	cmp	r0, #16
 800bf36:	d000      	beq.n	800bf3a <HAL_GPIO_EXTI_Callback+0x6>
 800bf38:	4770      	bx	lr
		IntCount++;
 800bf3a:	4a02      	ldr	r2, [pc, #8]	; (800bf44 <HAL_GPIO_EXTI_Callback+0x10>)
 800bf3c:	6813      	ldr	r3, [r2, #0]
 800bf3e:	3301      	adds	r3, #1
 800bf40:	6013      	str	r3, [r2, #0]
}
 800bf42:	e7f9      	b.n	800bf38 <HAL_GPIO_EXTI_Callback+0x4>
 800bf44:	200031b8 	.word	0x200031b8

0800bf48 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800bf48:	b508      	push	{r3, lr}
	/* USER CODE BEGIN Error_Handler_Debug */

	for (;;)
	  {
	    BSP_LED_On(LED2);
 800bf4a:	2000      	movs	r0, #0
 800bf4c:	f7f8 fea4 	bl	8004c98 <BSP_LED_On>
	    HAL_Delay(100);
 800bf50:	2064      	movs	r0, #100	; 0x64
 800bf52:	f7f9 f9e3 	bl	800531c <HAL_Delay>
	    BSP_LED_Off(LED2);
 800bf56:	2000      	movs	r0, #0
 800bf58:	f7f8 feaa 	bl	8004cb0 <BSP_LED_Off>
	    HAL_Delay(100);
 800bf5c:	2064      	movs	r0, #100	; 0x64
 800bf5e:	f7f9 f9dd 	bl	800531c <HAL_Delay>
 800bf62:	e7f2      	b.n	800bf4a <Error_Handler+0x2>

0800bf64 <RTC_Config>:
{
 800bf64:	b500      	push	{lr}
 800bf66:	b08d      	sub	sp, #52	; 0x34
  rcc_osc_init_struct.OscillatorType =  RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_LSE;
 800bf68:	230c      	movs	r3, #12
 800bf6a:	9300      	str	r3, [sp, #0]
  rcc_osc_init_struct.PLL.PLLState = RCC_PLL_NONE;
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	9306      	str	r3, [sp, #24]
  rcc_osc_init_struct.LSEState = RCC_LSE_ON;
 800bf70:	2201      	movs	r2, #1
 800bf72:	9202      	str	r2, [sp, #8]
  rcc_osc_init_struct.LSIState = RCC_LSI_OFF;
 800bf74:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_OscConfig(&rcc_osc_init_struct) != HAL_OK)
 800bf76:	4668      	mov	r0, sp
 800bf78:	f7fb ff66 	bl	8007e48 <HAL_RCC_OscConfig>
 800bf7c:	b1c0      	cbz	r0, 800bfb0 <RTC_Config+0x4c>
    UseLSI = 1;
 800bf7e:	2201      	movs	r2, #1
 800bf80:	4b12      	ldr	r3, [pc, #72]	; (800bfcc <RTC_Config+0x68>)
 800bf82:	601a      	str	r2, [r3, #0]
    RtcHandle.Init.AsynchPrediv = RTC_ASYNCH_PREDIV_LSI;
 800bf84:	4a12      	ldr	r2, [pc, #72]	; (800bfd0 <RTC_Config+0x6c>)
 800bf86:	237f      	movs	r3, #127	; 0x7f
 800bf88:	6093      	str	r3, [r2, #8]
    RtcHandle.Init.SynchPrediv = RTC_SYNCH_PREDIV_LSI;
 800bf8a:	23f9      	movs	r3, #249	; 0xf9
 800bf8c:	60d3      	str	r3, [r2, #12]
    RtcSynchPrediv = RTC_SYNCH_PREDIV_LSI;
 800bf8e:	4a11      	ldr	r2, [pc, #68]	; (800bfd4 <RTC_Config+0x70>)
 800bf90:	6013      	str	r3, [r2, #0]
  RtcHandle.Instance = RTC;
 800bf92:	480f      	ldr	r0, [pc, #60]	; (800bfd0 <RTC_Config+0x6c>)
 800bf94:	4b10      	ldr	r3, [pc, #64]	; (800bfd8 <RTC_Config+0x74>)
 800bf96:	6003      	str	r3, [r0, #0]
  RtcHandle.Init.HourFormat     = RTC_HOURFORMAT_12;
 800bf98:	2340      	movs	r3, #64	; 0x40
 800bf9a:	6043      	str	r3, [r0, #4]
  RtcHandle.Init.OutPut         = RTC_OUTPUT_DISABLE;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	6103      	str	r3, [r0, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800bfa0:	6143      	str	r3, [r0, #20]
  RtcHandle.Init.OutPutType     = RTC_OUTPUT_TYPE_OPENDRAIN;
 800bfa2:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&RtcHandle) != HAL_OK)
 800bfa4:	f7fc fcc4 	bl	8008930 <HAL_RTC_Init>
 800bfa8:	b968      	cbnz	r0, 800bfc6 <RTC_Config+0x62>
}
 800bfaa:	b00d      	add	sp, #52	; 0x34
 800bfac:	f85d fb04 	ldr.w	pc, [sp], #4
    UseLSI = 0;
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	4b06      	ldr	r3, [pc, #24]	; (800bfcc <RTC_Config+0x68>)
 800bfb4:	601a      	str	r2, [r3, #0]
    RtcHandle.Init.AsynchPrediv = RTC_ASYNCH_PREDIV_LSE;
 800bfb6:	4a06      	ldr	r2, [pc, #24]	; (800bfd0 <RTC_Config+0x6c>)
 800bfb8:	237f      	movs	r3, #127	; 0x7f
 800bfba:	6093      	str	r3, [r2, #8]
    RtcHandle.Init.SynchPrediv = RTC_SYNCH_PREDIV_LSE;
 800bfbc:	23ff      	movs	r3, #255	; 0xff
 800bfbe:	60d3      	str	r3, [r2, #12]
    RtcSynchPrediv = RTC_SYNCH_PREDIV_LSE;
 800bfc0:	4a04      	ldr	r2, [pc, #16]	; (800bfd4 <RTC_Config+0x70>)
 800bfc2:	6013      	str	r3, [r2, #0]
 800bfc4:	e7e5      	b.n	800bf92 <RTC_Config+0x2e>
    Error_Handler();
 800bfc6:	f7ff ffbf 	bl	800bf48 <Error_Handler>
 800bfca:	bf00      	nop
 800bfcc:	200027cc 	.word	0x200027cc
 800bfd0:	200027a8 	.word	0x200027a8
 800bfd4:	200027c8 	.word	0x200027c8
 800bfd8:	40002800 	.word	0x40002800

0800bfdc <RTC_TimeStampConfig>:
{
 800bfdc:	b500      	push	{lr}
 800bfde:	b087      	sub	sp, #28
  sdatestructure.Year = 0x01;
 800bfe0:	2201      	movs	r2, #1
 800bfe2:	f88d 2017 	strb.w	r2, [sp, #23]
  sdatestructure.Month = RTC_MONTH_JANUARY;
 800bfe6:	f88d 2015 	strb.w	r2, [sp, #21]
  sdatestructure.Date = 0x01;
 800bfea:	f88d 2016 	strb.w	r2, [sp, #22]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;
 800bfee:	a906      	add	r1, sp, #24
 800bff0:	f801 2d04 	strb.w	r2, [r1, #-4]!
  if (HAL_RTC_SetDate(&RtcHandle, &sdatestructure, FORMAT_BCD) != HAL_OK)
 800bff4:	480d      	ldr	r0, [pc, #52]	; (800c02c <RTC_TimeStampConfig+0x50>)
 800bff6:	f7fc fe91 	bl	8008d1c <HAL_RTC_SetDate>
 800bffa:	b998      	cbnz	r0, 800c024 <RTC_TimeStampConfig+0x48>
  stimestructure.Hours = 0x00;
 800bffc:	2300      	movs	r3, #0
 800bffe:	f88d 3000 	strb.w	r3, [sp]
  stimestructure.Minutes = 0x00;
 800c002:	f88d 3001 	strb.w	r3, [sp, #1]
  stimestructure.Seconds = 0x00;
 800c006:	f88d 3002 	strb.w	r3, [sp, #2]
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800c00a:	f88d 3003 	strb.w	r3, [sp, #3]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 800c00e:	9303      	str	r3, [sp, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800c010:	9304      	str	r3, [sp, #16]
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, FORMAT_BCD) != HAL_OK)
 800c012:	2201      	movs	r2, #1
 800c014:	4669      	mov	r1, sp
 800c016:	4805      	ldr	r0, [pc, #20]	; (800c02c <RTC_TimeStampConfig+0x50>)
 800c018:	f7fc fd40 	bl	8008a9c <HAL_RTC_SetTime>
 800c01c:	b920      	cbnz	r0, 800c028 <RTC_TimeStampConfig+0x4c>
}
 800c01e:	b007      	add	sp, #28
 800c020:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800c024:	f7ff ff90 	bl	800bf48 <Error_Handler>
    Error_Handler();
 800c028:	f7ff ff8e 	bl	800bf48 <Error_Handler>
 800c02c:	200027a8 	.word	0x200027a8

0800c030 <SystemClock_Config>:
{
 800c030:	b500      	push	{lr}
 800c032:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800c034:	2230      	movs	r2, #48	; 0x30
 800c036:	2100      	movs	r1, #0
 800c038:	a808      	add	r0, sp, #32
 800c03a:	f00f fa7c 	bl	801b536 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800c03e:	2300      	movs	r3, #0
 800c040:	9303      	str	r3, [sp, #12]
 800c042:	9304      	str	r3, [sp, #16]
 800c044:	9305      	str	r3, [sp, #20]
 800c046:	9306      	str	r3, [sp, #24]
 800c048:	9307      	str	r3, [sp, #28]
	__HAL_RCC_PWR_CLK_ENABLE();
 800c04a:	9301      	str	r3, [sp, #4]
 800c04c:	4a21      	ldr	r2, [pc, #132]	; (800c0d4 <SystemClock_Config+0xa4>)
 800c04e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800c050:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800c054:	6411      	str	r1, [r2, #64]	; 0x40
 800c056:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800c058:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800c05c:	9201      	str	r2, [sp, #4]
 800c05e:	9a01      	ldr	r2, [sp, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800c060:	9302      	str	r3, [sp, #8]
 800c062:	4a1d      	ldr	r2, [pc, #116]	; (800c0d8 <SystemClock_Config+0xa8>)
 800c064:	6813      	ldr	r3, [r2, #0]
 800c066:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800c06a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c06e:	6013      	str	r3, [r2, #0]
 800c070:	6813      	ldr	r3, [r2, #0]
 800c072:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c076:	9302      	str	r3, [sp, #8]
 800c078:	9b02      	ldr	r3, [sp, #8]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800c07a:	2301      	movs	r3, #1
 800c07c:	9308      	str	r3, [sp, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800c07e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800c082:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c084:	2302      	movs	r3, #2
 800c086:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800c088:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c08c:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800c08e:	2308      	movs	r3, #8
 800c090:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 800c092:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800c096:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800c098:	2304      	movs	r3, #4
 800c09a:	9312      	str	r3, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800c09c:	2307      	movs	r3, #7
 800c09e:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800c0a0:	a808      	add	r0, sp, #32
 800c0a2:	f7fb fed1 	bl	8007e48 <HAL_RCC_OscConfig>
 800c0a6:	b980      	cbnz	r0, 800c0ca <SystemClock_Config+0x9a>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800c0a8:	230f      	movs	r3, #15
 800c0aa:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c0ac:	2102      	movs	r1, #2
 800c0ae:	9104      	str	r1, [sp, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	9305      	str	r3, [sp, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800c0b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c0b8:	9206      	str	r2, [sp, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800c0ba:	9307      	str	r3, [sp, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800c0bc:	a803      	add	r0, sp, #12
 800c0be:	f7fc f977 	bl	80083b0 <HAL_RCC_ClockConfig>
 800c0c2:	b920      	cbnz	r0, 800c0ce <SystemClock_Config+0x9e>
}
 800c0c4:	b015      	add	sp, #84	; 0x54
 800c0c6:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 800c0ca:	f7ff ff3d 	bl	800bf48 <Error_Handler>
		Error_Handler();
 800c0ce:	f7ff ff3b 	bl	800bf48 <Error_Handler>
 800c0d2:	bf00      	nop
 800c0d4:	40023800 	.word	0x40023800
 800c0d8:	40007000 	.word	0x40007000

0800c0dc <main>:
{
 800c0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0e0:	ed2d 8b02 	vpush	{d8}
 800c0e4:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
	HAL_Init();
 800c0e8:	f7f9 f8ec 	bl	80052c4 <HAL_Init>
	SystemClock_Config();
 800c0ec:	f7ff ffa0 	bl	800c030 <SystemClock_Config>
	MX_GPIO_Init();
 800c0f0:	f7ff faca 	bl	800b688 <MX_GPIO_Init>
	MX_DMA_Init();
 800c0f4:	f7ff fa7c 	bl	800b5f0 <MX_DMA_Init>
	MX_USART2_UART_Init();
 800c0f8:	f000 fc7e 	bl	800c9f8 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 800c0fc:	f7ff fb32 	bl	800b764 <MX_I2C1_Init>
	MX_TIM2_Init();
 800c100:	f000 fbc0 	bl	800c884 <MX_TIM2_Init>
	MX_TIM3_Init();
 800c104:	f000 fc1a 	bl	800c93c <MX_TIM3_Init>
	MX_ADC1_Init();
 800c108:	f7fe fcde 	bl	800aac8 <MX_ADC1_Init>
	MX_USART6_UART_Init();
 800c10c:	f000 fc90 	bl	800ca30 <MX_USART6_UART_Init>
	MX_CRC_Init();
 800c110:	f7ff fbf2 	bl	800b8f8 <MX_CRC_Init>
	MX_I2C1_Init();
 800c114:	f7ff fb26 	bl	800b764 <MX_I2C1_Init>
	__HAL_RCC_CRC_CLK_ENABLE();
 800c118:	2400      	movs	r4, #0
 800c11a:	9432      	str	r4, [sp, #200]	; 0xc8
 800c11c:	4b74      	ldr	r3, [pc, #464]	; (800c2f0 <main+0x214>)
 800c11e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c120:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c124:	631a      	str	r2, [r3, #48]	; 0x30
 800c126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c128:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c12c:	9332      	str	r3, [sp, #200]	; 0xc8
 800c12e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
	setvbuf(stdin, NULL, _IONBF, 0);
 800c130:	4d70      	ldr	r5, [pc, #448]	; (800c2f4 <main+0x218>)
 800c132:	6828      	ldr	r0, [r5, #0]
 800c134:	4623      	mov	r3, r4
 800c136:	2202      	movs	r2, #2
 800c138:	4621      	mov	r1, r4
 800c13a:	6840      	ldr	r0, [r0, #4]
 800c13c:	f00f ffa8 	bl	801c090 <setvbuf>
	setvbuf(stdout, NULL, _IONBF, 0);
 800c140:	6828      	ldr	r0, [r5, #0]
 800c142:	4623      	mov	r3, r4
 800c144:	2202      	movs	r2, #2
 800c146:	4621      	mov	r1, r4
 800c148:	6880      	ldr	r0, [r0, #8]
 800c14a:	f00f ffa1 	bl	801c090 <setvbuf>
	setvbuf(stderr, NULL, _IONBF, 0);
 800c14e:	6828      	ldr	r0, [r5, #0]
 800c150:	4623      	mov	r3, r4
 800c152:	2202      	movs	r2, #2
 800c154:	4621      	mov	r1, r4
 800c156:	68c0      	ldr	r0, [r0, #12]
 800c158:	f00f ff9a 	bl	801c090 <setvbuf>
	printf("\r\nInitializing sensors ... \r\n");
 800c15c:	4866      	ldr	r0, [pc, #408]	; (800c2f8 <main+0x21c>)
 800c15e:	f00f ff7f 	bl	801c060 <puts>
	MX_TIM_ALGO_Init();
 800c162:	f7ff fbdb 	bl	800b91c <MX_TIM_ALGO_Init>
	Init_Sensors();
 800c166:	f7ff fbfd 	bl	800b964 <Init_Sensors>
	MX_X_CUBE_MEMS1_Init();
 800c16a:	f7ff f9db 	bl	800b524 <MX_X_CUBE_MEMS1_Init>
	MotionFX_manager_init();
 800c16e:	f7fe fc1b 	bl	800a9a8 <MotionFX_manager_init>
	MotionFX_manager_get_version(lib_version, &lib_version_len);
 800c172:	a978      	add	r1, sp, #480	; 0x1e0
 800c174:	a879      	add	r0, sp, #484	; 0x1e4
 800c176:	f7fe fc8b 	bl	800aa90 <MotionFX_manager_get_version>
	RTC_Config();
 800c17a:	f7ff fef3 	bl	800bf64 <RTC_Config>
	RTC_TimeStampConfig();
 800c17e:	f7ff ff2d 	bl	800bfdc <RTC_TimeStampConfig>
	BSP_LED_On(LED2);
 800c182:	4620      	mov	r0, r4
 800c184:	f7f8 fd88 	bl	8004c98 <BSP_LED_On>
	HAL_Delay(500);
 800c188:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c18c:	f7f9 f8c6 	bl	800531c <HAL_Delay>
	BSP_LED_Off(LED2);
 800c190:	4620      	mov	r0, r4
 800c192:	f7f8 fd8d 	bl	8004cb0 <BSP_LED_Off>
	MotionFX_manager_MagCal_start(ALGO_PERIOD);
 800c196:	200a      	movs	r0, #10
 800c198:	f7fe fc88 	bl	800aaac <MotionFX_manager_MagCal_start>
	MotionFX_MagCal_getParams(&mag_cal_test);
 800c19c:	a833      	add	r0, sp, #204	; 0xcc
 800c19e:	f00c f88b 	bl	80182b8 <MotionFX_MagCal_getParams>
	if (mag_cal_test.cal_quality == MFX_MAGCALGOOD)
 800c1a2:	f89d 30d8 	ldrb.w	r3, [sp, #216]	; 0xd8
 800c1a6:	2b03      	cmp	r3, #3
 800c1a8:	f000 8083 	beq.w	800c2b2 <main+0x1d6>
		printf("\r\nSensors initialized \r\n");
 800c1ac:	4853      	ldr	r0, [pc, #332]	; (800c2fc <main+0x220>)
 800c1ae:	f00f ff57 	bl	801c060 <puts>
		printf("\r\nInitialing motors ... \r\n");
 800c1b2:	4853      	ldr	r0, [pc, #332]	; (800c300 <main+0x224>)
 800c1b4:	f00f ff54 	bl	801c060 <puts>
		motor_init();
 800c1b8:	f000 f8d2 	bl	800c360 <motor_init>
		printf("\r\nMotors initialized \r\n");
 800c1bc:	4851      	ldr	r0, [pc, #324]	; (800c304 <main+0x228>)
 800c1be:	f00f ff4f 	bl	801c060 <puts>
		printf("\r\nConsole ready ... \r\n");
 800c1c2:	4851      	ldr	r0, [pc, #324]	; (800c308 <main+0x22c>)
 800c1c4:	f00f ff4c 	bl	801c060 <puts>
		  		MX_X_CUBE_MEMS1_Process();
 800c1c8:	f7ff f9b0 	bl	800b52c <MX_X_CUBE_MEMS1_Process>
		      RTC_Handler(&msg_dat);
 800c1cc:	a937      	add	r1, sp, #220	; 0xdc
 800c1ce:	a82c      	add	r0, sp, #176	; 0xb0
 800c1d0:	f7ff fc22 	bl	800ba18 <RTC_Handler>
		      Accelero_Sensor_Handler(&msg_dat, IKS01A2_LSM6DSL_0);
 800c1d4:	2100      	movs	r1, #0
 800c1d6:	a837      	add	r0, sp, #220	; 0xdc
 800c1d8:	f7ff fc4e 	bl	800ba78 <Accelero_Sensor_Handler>
		      Gyro_Sensor_Handler(&msg_dat, IKS01A2_LSM6DSL_0);
 800c1dc:	2100      	movs	r1, #0
 800c1de:	a837      	add	r0, sp, #220	; 0xdc
 800c1e0:	f7ff fc94 	bl	800bb0c <Gyro_Sensor_Handler>
		      Magneto_Sensor_Handler(&msg_dat, IKS01A2_LSM303AGR_MAG_0);
 800c1e4:	2102      	movs	r1, #2
 800c1e6:	a837      	add	r0, sp, #220	; 0xdc
 800c1e8:	f7ff fcb6 	bl	800bb58 <Magneto_Sensor_Handler>
		      Humidity_Sensor_Handler(&msg_dat, IKS01A2_HTS221_0);
 800c1ec:	2100      	movs	r1, #0
 800c1ee:	a837      	add	r0, sp, #220	; 0xdc
 800c1f0:	f7ff fd3e 	bl	800bc70 <Humidity_Sensor_Handler>
		      Temperature_Sensor_Handler(&msg_dat, IKS01A2_HTS221_0);
 800c1f4:	2100      	movs	r1, #0
 800c1f6:	a837      	add	r0, sp, #220	; 0xdc
 800c1f8:	f7ff fd50 	bl	800bc9c <Temperature_Sensor_Handler>
		      Pressure_Sensor_Handler(&msg_dat, IKS01A2_LPS22HB_0);
 800c1fc:	2101      	movs	r1, #1
 800c1fe:	a837      	add	r0, sp, #220	; 0xdc
 800c200:	f7ff fd62 	bl	800bcc8 <Pressure_Sensor_Handler>
		      data_out = FX_Data_Handler(&msg_dat);
 800c204:	4c41      	ldr	r4, [pc, #260]	; (800c30c <main+0x230>)
 800c206:	a937      	add	r1, sp, #220	; 0xdc
 800c208:	a80e      	add	r0, sp, #56	; 0x38
 800c20a:	f7ff fd73 	bl	800bcf4 <FX_Data_Handler>
 800c20e:	2278      	movs	r2, #120	; 0x78
 800c210:	a90e      	add	r1, sp, #56	; 0x38
 800c212:	4620      	mov	r0, r4
 800c214:	f00f f984 	bl	801b520 <memcpy>
		    		  data_out.rotation_9X[0],data_out.rotation_9X[1],data_out.rotation_9X[2],
 800c218:	6866      	ldr	r6, [r4, #4]
 800c21a:	68a7      	ldr	r7, [r4, #8]
					  data_out.linear_acceleration_9X[0],data_out.linear_acceleration_9X[1],
 800c21c:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
 800c220:	f8d4 902c 	ldr.w	r9, [r4, #44]	; 0x2c
					  data_out.linear_acceleration_9X[2],
 800c224:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
					  data_out.heading_9X,data_out.headingErr_9X);
 800c228:	f8d4 b034 	ldr.w	fp, [r4, #52]	; 0x34
 800c22c:	ed94 8a0e 	vldr	s16, [r4, #56]	; 0x38
		      printf("ROT XYZ: %0.2f %0.2f %0.2f ACC XYZ: %0.2f %0.2f %0.2f HDG = %0.2f HDGe = %0.2f \r\n",
 800c230:	6820      	ldr	r0, [r4, #0]
 800c232:	f7f4 f991 	bl	8000558 <__aeabi_f2d>
 800c236:	4604      	mov	r4, r0
 800c238:	460d      	mov	r5, r1
 800c23a:	ee18 0a10 	vmov	r0, s16
 800c23e:	f7f4 f98b 	bl	8000558 <__aeabi_f2d>
 800c242:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c246:	4658      	mov	r0, fp
 800c248:	f7f4 f986 	bl	8000558 <__aeabi_f2d>
 800c24c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c250:	4650      	mov	r0, sl
 800c252:	f7f4 f981 	bl	8000558 <__aeabi_f2d>
 800c256:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c25a:	4648      	mov	r0, r9
 800c25c:	f7f4 f97c 	bl	8000558 <__aeabi_f2d>
 800c260:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c264:	4640      	mov	r0, r8
 800c266:	f7f4 f977 	bl	8000558 <__aeabi_f2d>
 800c26a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c26e:	4638      	mov	r0, r7
 800c270:	f7f4 f972 	bl	8000558 <__aeabi_f2d>
 800c274:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c278:	4630      	mov	r0, r6
 800c27a:	f7f4 f96d 	bl	8000558 <__aeabi_f2d>
 800c27e:	e9cd 0100 	strd	r0, r1, [sp]
 800c282:	4622      	mov	r2, r4
 800c284:	462b      	mov	r3, r5
 800c286:	4822      	ldr	r0, [pc, #136]	; (800c310 <main+0x234>)
 800c288:	f00f fe76 	bl	801bf78 <iprintf>
		      printf("ROT XYZ: %lu %lu %lu ACC XYZ: %lu %lu %lu \r\n",
 800c28c:	4921      	ldr	r1, [pc, #132]	; (800c314 <main+0x238>)
 800c28e:	688b      	ldr	r3, [r1, #8]
 800c290:	684a      	ldr	r2, [r1, #4]
 800c292:	6809      	ldr	r1, [r1, #0]
 800c294:	4820      	ldr	r0, [pc, #128]	; (800c318 <main+0x23c>)
 800c296:	6884      	ldr	r4, [r0, #8]
 800c298:	9402      	str	r4, [sp, #8]
 800c29a:	6844      	ldr	r4, [r0, #4]
 800c29c:	9401      	str	r4, [sp, #4]
 800c29e:	6800      	ldr	r0, [r0, #0]
 800c2a0:	9000      	str	r0, [sp, #0]
 800c2a2:	481e      	ldr	r0, [pc, #120]	; (800c31c <main+0x240>)
 800c2a4:	f00f fe68 	bl	801bf78 <iprintf>
		 HAL_Delay(2000);
 800c2a8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c2ac:	f7f9 f836 	bl	800531c <HAL_Delay>
 800c2b0:	e78a      	b.n	800c1c8 <main+0xec>
		ans_float = (mag_cal_test.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 800c2b2:	eddd 7a33 	vldr	s15, [sp, #204]	; 0xcc
 800c2b6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800c320 <main+0x244>
 800c2ba:	ee67 7a87 	vmul.f32	s15, s15, s14
		MagOffset.x = (int32_t)ans_float;
 800c2be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c2c2:	4b18      	ldr	r3, [pc, #96]	; (800c324 <main+0x248>)
 800c2c4:	edc3 7a00 	vstr	s15, [r3]
		ans_float = (mag_cal_test.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 800c2c8:	eddd 7a34 	vldr	s15, [sp, #208]	; 0xd0
 800c2cc:	ee67 7a87 	vmul.f32	s15, s15, s14
		MagOffset.y = (int32_t)ans_float;
 800c2d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c2d4:	edc3 7a01 	vstr	s15, [r3, #4]
		ans_float = (mag_cal_test.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 800c2d8:	eddd 7a35 	vldr	s15, [sp, #212]	; 0xd4
 800c2dc:	ee67 7a87 	vmul.f32	s15, s15, s14
		MagOffset.z = (int32_t)ans_float;
 800c2e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c2e4:	edc3 7a02 	vstr	s15, [r3, #8]
		MagCalStatus = 1;
 800c2e8:	2201      	movs	r2, #1
 800c2ea:	4b0f      	ldr	r3, [pc, #60]	; (800c328 <main+0x24c>)
 800c2ec:	701a      	strb	r2, [r3, #0]
 800c2ee:	e75d      	b.n	800c1ac <main+0xd0>
 800c2f0:	40023800 	.word	0x40023800
 800c2f4:	20001480 	.word	0x20001480
 800c2f8:	0801e7b0 	.word	0x0801e7b0
 800c2fc:	0801e7d0 	.word	0x0801e7d0
 800c300:	0801e7e8 	.word	0x0801e7e8
 800c304:	0801e804 	.word	0x0801e804
 800c308:	0801e81c 	.word	0x0801e81c
 800c30c:	20003560 	.word	0x20003560
 800c310:	0801e72c 	.word	0x0801e72c
 800c314:	2000277c 	.word	0x2000277c
 800c318:	2000276c 	.word	0x2000276c
 800c31c:	0801e834 	.word	0x0801e834
 800c320:	43fa0000 	.word	0x43fa0000
 800c324:	2000278c 	.word	0x2000278c
 800c328:	20002788 	.word	0x20002788

0800c32c <assert_failed>:
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
 800c32c:	b508      	push	{r3, lr}
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number */
	printf("Wrong parameters value: file %s on line %d\r\n", file, line);
 800c32e:	460a      	mov	r2, r1
 800c330:	4601      	mov	r1, r0
 800c332:	4802      	ldr	r0, [pc, #8]	; (800c33c <assert_failed+0x10>)
 800c334:	f00f fe20 	bl	801bf78 <iprintf>
 800c338:	bd08      	pop	{r3, pc}
 800c33a:	bf00      	nop
 800c33c:	0801e780 	.word	0x0801e780

0800c340 <MyFlagInterruptHandler>:
 * @brief  This function is the User handler for the flag interrupt
 * @param  None
 * @retval None
 */
void MyFlagInterruptHandler(void)
{
 800c340:	b508      	push	{r3, lr}
	/* Code to be customised */
	/************************/
	/* Get the state of bridge A */
	uint16_t bridgeState = BSP_MotorControl_CmdGetStatus(0);
 800c342:	2000      	movs	r0, #0
 800c344:	f7f8 ff00 	bl	8005148 <BSP_MotorControl_CmdGetStatus>

	if (bridgeState == 0) {
 800c348:	b100      	cbz	r0, 800c34c <MyFlagInterruptHandler+0xc>
 800c34a:	bd08      	pop	{r3, pc}
		if (BSP_MotorControl_GetDeviceState(0) != INACTIVE) {
 800c34c:	f7f8 feec 	bl	8005128 <BSP_MotorControl_GetDeviceState>
 800c350:	2808      	cmp	r0, #8
 800c352:	d0fa      	beq.n	800c34a <MyFlagInterruptHandler+0xa>
			/* Bridge A was disabling due to overcurrent or over temperature */
			/* When  motor was running */
			Error_Handler(0XBAD0);
 800c354:	f64b 20d0 	movw	r0, #47824	; 0xbad0
 800c358:	f7ff fdf6 	bl	800bf48 <Error_Handler>
		}
	}
}
 800c35c:	e7f5      	b.n	800c34a <MyFlagInterruptHandler+0xa>
	...

0800c360 <motor_init>:
{
 800c360:	b530      	push	{r4, r5, lr}
 800c362:	b08b      	sub	sp, #44	; 0x2c
	deviceParams_t initDeviceParameters =
 800c364:	466c      	mov	r4, sp
 800c366:	4d14      	ldr	r5, [pc, #80]	; (800c3b8 <motor_init+0x58>)
 800c368:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c36a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c36c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c36e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c370:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c374:	e884 0003 	stmia.w	r4, {r0, r1}
	BSP_MotorControl_SetNbDevices(BSP_MOTOR_CONTROL_BOARD_ID_L6206, 2);
 800c378:	2102      	movs	r1, #2
 800c37a:	f641 003e 	movw	r0, #6206	; 0x183e
 800c37e:	f7f8 ff15 	bl	80051ac <BSP_MotorControl_SetNbDevices>
	BSP_MotorControl_Init(BSP_MOTOR_CONTROL_BOARD_ID_L6206, &initDeviceParameters);
 800c382:	4669      	mov	r1, sp
 800c384:	f641 003e 	movw	r0, #6206	; 0x183e
 800c388:	f7f8 febe 	bl	8005108 <BSP_MotorControl_Init>
	BSP_MotorControl_SetDualFullBridgeConfig(PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B);
 800c38c:	2000      	movs	r0, #0
 800c38e:	f7f8 feed 	bl	800516c <BSP_MotorControl_SetDualFullBridgeConfig>
	BSP_MotorControl_AttachFlagInterrupt(MyFlagInterruptHandler);
 800c392:	480a      	ldr	r0, [pc, #40]	; (800c3bc <motor_init+0x5c>)
 800c394:	f7f8 fea8 	bl	80050e8 <BSP_MotorControl_AttachFlagInterrupt>
	BSP_MotorControl_AttachErrorHandler(Error_Handler);
 800c398:	4809      	ldr	r0, [pc, #36]	; (800c3c0 <motor_init+0x60>)
 800c39a:	f7f8 fe95 	bl	80050c8 <BSP_MotorControl_AttachErrorHandler>
	BSP_MotorControl_SetBridgeInputPwmFreq(0, 10000);
 800c39e:	f242 7110 	movw	r1, #10000	; 0x2710
 800c3a2:	2000      	movs	r0, #0
 800c3a4:	f7f8 fef2 	bl	800518c <BSP_MotorControl_SetBridgeInputPwmFreq>
	BSP_MotorControl_SetBridgeInputPwmFreq(1, 10000);
 800c3a8:	f242 7110 	movw	r1, #10000	; 0x2710
 800c3ac:	2001      	movs	r0, #1
 800c3ae:	f7f8 feed 	bl	800518c <BSP_MotorControl_SetBridgeInputPwmFreq>
}
 800c3b2:	b00b      	add	sp, #44	; 0x2c
 800c3b4:	bd30      	pop	{r4, r5, pc}
 800c3b6:	bf00      	nop
 800c3b8:	0801dea0 	.word	0x0801dea0
 800c3bc:	0800c341 	.word	0x0800c341
 800c3c0:	0800bf49 	.word	0x0800bf49

0800c3c4 <I2C1_MspDeInit>:
//
//  /* USER CODE END I2C1_MspInit 1 */
}

static void I2C1_MspDeInit(I2C_HandleTypeDef *i2cHandle)
{
 800c3c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
  /* Peripheral clock disable */
  __HAL_RCC_I2C1_CLK_DISABLE();
 800c3c6:	4a05      	ldr	r2, [pc, #20]	; (800c3dc <I2C1_MspDeInit+0x18>)
 800c3c8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800c3ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c3ce:	6413      	str	r3, [r2, #64]	; 0x40

  /**I2C1 GPIO Configuration
  PB8     ------> I2C1_SCL
  PB9     ------> I2C1_SDA
  */
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8 | GPIO_PIN_9);
 800c3d0:	f44f 7140 	mov.w	r1, #768	; 0x300
 800c3d4:	4802      	ldr	r0, [pc, #8]	; (800c3e0 <I2C1_MspDeInit+0x1c>)
 800c3d6:	f7fa f883 	bl	80064e0 <HAL_GPIO_DeInit>
 800c3da:	bd08      	pop	{r3, pc}
 800c3dc:	40023800 	.word	0x40023800
 800c3e0:	40020400 	.word	0x40020400

0800c3e4 <BSP_I2C1_Init>:
}
 800c3e4:	2000      	movs	r0, #0
 800c3e6:	4770      	bx	lr

0800c3e8 <BSP_I2C1_DeInit>:
{
 800c3e8:	b510      	push	{r4, lr}
  I2C1_MspDeInit(&hi2c1);
 800c3ea:	4c06      	ldr	r4, [pc, #24]	; (800c404 <BSP_I2C1_DeInit+0x1c>)
 800c3ec:	4620      	mov	r0, r4
 800c3ee:	f7ff ffe9 	bl	800c3c4 <I2C1_MspDeInit>
  if (HAL_I2C_DeInit(&hi2c1) == HAL_OK)
 800c3f2:	4620      	mov	r0, r4
 800c3f4:	f7fa fdb0 	bl	8006f58 <HAL_I2C_DeInit>
 800c3f8:	b908      	cbnz	r0, 800c3fe <BSP_I2C1_DeInit+0x16>
    ret = BSP_ERROR_NONE;
 800c3fa:	2000      	movs	r0, #0
}
 800c3fc:	bd10      	pop	{r4, pc}
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 800c3fe:	f06f 0007 	mvn.w	r0, #7
 800c402:	bd10      	pop	{r4, pc}
 800c404:	200029bc 	.word	0x200029bc

0800c408 <BSP_I2C1_WriteReg>:
{
 800c408:	b510      	push	{r4, lr}
 800c40a:	b084      	sub	sp, #16
  if (HAL_I2C_Mem_Write(&hi2c1, (uint8_t)DevAddr,
 800c40c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800c410:	9402      	str	r4, [sp, #8]
 800c412:	9301      	str	r3, [sp, #4]
 800c414:	9200      	str	r2, [sp, #0]
 800c416:	2301      	movs	r3, #1
 800c418:	460a      	mov	r2, r1
 800c41a:	b2c1      	uxtb	r1, r0
 800c41c:	4804      	ldr	r0, [pc, #16]	; (800c430 <BSP_I2C1_WriteReg+0x28>)
 800c41e:	f7fa fdcb 	bl	8006fb8 <HAL_I2C_Mem_Write>
 800c422:	b910      	cbnz	r0, 800c42a <BSP_I2C1_WriteReg+0x22>
    ret = BSP_ERROR_NONE;
 800c424:	2000      	movs	r0, #0
}
 800c426:	b004      	add	sp, #16
 800c428:	bd10      	pop	{r4, pc}
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 800c42a:	f06f 0007 	mvn.w	r0, #7
 800c42e:	e7fa      	b.n	800c426 <BSP_I2C1_WriteReg+0x1e>
 800c430:	200029bc 	.word	0x200029bc

0800c434 <BSP_I2C1_ReadReg>:
{
 800c434:	b510      	push	{r4, lr}
 800c436:	b084      	sub	sp, #16
  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, (uint16_t)Reg,
 800c438:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800c43c:	9402      	str	r4, [sp, #8]
 800c43e:	9301      	str	r3, [sp, #4]
 800c440:	9200      	str	r2, [sp, #0]
 800c442:	2301      	movs	r3, #1
 800c444:	460a      	mov	r2, r1
 800c446:	4601      	mov	r1, r0
 800c448:	4804      	ldr	r0, [pc, #16]	; (800c45c <BSP_I2C1_ReadReg+0x28>)
 800c44a:	f7fa fe7d 	bl	8007148 <HAL_I2C_Mem_Read>
 800c44e:	b910      	cbnz	r0, 800c456 <BSP_I2C1_ReadReg+0x22>
    ret = HAL_OK;
 800c450:	2000      	movs	r0, #0
}
 800c452:	b004      	add	sp, #16
 800c454:	bd10      	pop	{r4, pc}
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 800c456:	f06f 0007 	mvn.w	r0, #7
 800c45a:	e7fa      	b.n	800c452 <BSP_I2C1_ReadReg+0x1e>
 800c45c:	200029bc 	.word	0x200029bc

0800c460 <BSP_GetTick>:
{
 800c460:	b508      	push	{r3, lr}
  return HAL_GetTick();
 800c462:	f7f8 ff55 	bl	8005310 <HAL_GetTick>
}
 800c466:	bd08      	pop	{r3, pc}

0800c468 <Serialize_s32>:
void Serialize_s32(uint8_t *Dest, int32_t Source, uint32_t Len)
{
  uint32_t i;
  uint32_t source_uint32;

  for (i = 0; i < Len; i++)
 800c468:	2300      	movs	r3, #0
 800c46a:	e002      	b.n	800c472 <Serialize_s32+0xa>
  {
    source_uint32 = (uint32_t)Source;
    Dest[i] = (uint8_t)(source_uint32 & 0xFFU);
 800c46c:	54c1      	strb	r1, [r0, r3]
    source_uint32 >>= 8;
 800c46e:	0a09      	lsrs	r1, r1, #8
  for (i = 0; i < Len; i++)
 800c470:	3301      	adds	r3, #1
 800c472:	4293      	cmp	r3, r2
 800c474:	d3fa      	bcc.n	800c46c <Serialize_s32+0x4>
    Source = (int32_t)source_uint32;
  }
}
 800c476:	4770      	bx	lr

0800c478 <HAL_RTC_MspInit>:
 *         the backup registers) and RCC_BDCR register are set to their reset values.
 *
 * @retval None
 */
void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
 800c478:	b500      	push	{lr}
 800c47a:	b093      	sub	sp, #76	; 0x4c
     - Enable write access using HAL_PWR_EnableBkUpAccess() function before to
       configure the RTC clock source (to be done once after reset).
     - Reset the Back up Domain using __HAL_RCC_BACKUPRESET_FORCE() and
       __HAL_RCC_BACKUPRESET_RELEASE().
     - Configure the needed RTC clock source */
  __HAL_RCC_PWR_CLK_ENABLE();
 800c47c:	2300      	movs	r3, #0
 800c47e:	9300      	str	r3, [sp, #0]
 800c480:	4b28      	ldr	r3, [pc, #160]	; (800c524 <HAL_RTC_MspInit+0xac>)
 800c482:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c484:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800c488:	641a      	str	r2, [r3, #64]	; 0x40
 800c48a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c48c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c490:	9300      	str	r3, [sp, #0]
 800c492:	9b00      	ldr	r3, [sp, #0]
  HAL_PWR_EnableBkUpAccess();
 800c494:	f7fb fcd2 	bl	8007e3c <HAL_PWR_EnableBkUpAccess>

  /*##-2- Configue LSE/LSI as RTC clock soucre ###############################*/
  if (UseLSI == 0)
 800c498:	4b23      	ldr	r3, [pc, #140]	; (800c528 <HAL_RTC_MspInit+0xb0>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	bb3b      	cbnz	r3, 800c4ee <HAL_RTC_MspInit+0x76>
  {
    RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_LSE;
 800c49e:	230c      	movs	r3, #12
 800c4a0:	9306      	str	r3, [sp, #24]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	930c      	str	r3, [sp, #48]	; 0x30
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	9208      	str	r2, [sp, #32]
    RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
 800c4aa:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c4ac:	a806      	add	r0, sp, #24
 800c4ae:	f7fb fccb 	bl	8007e48 <HAL_RCC_OscConfig>
 800c4b2:	b9b0      	cbnz	r0, 800c4e2 <HAL_RTC_MspInit+0x6a>
    {
      Error_Handler();
    }

    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800c4b4:	2302      	movs	r3, #2
 800c4b6:	9301      	str	r3, [sp, #4]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800c4b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c4bc:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c4be:	a801      	add	r0, sp, #4
 800c4c0:	f7fc f8a4 	bl	800860c <HAL_RCCEx_PeriphCLKConfig>
 800c4c4:	b980      	cbnz	r0, 800c4e8 <HAL_RTC_MspInit+0x70>
    }
  }

  /*##-2- Enable RTC peripheral Clocks #######################################*/
  /* Enable RTC Clock */
  __HAL_RCC_RTC_ENABLE();
 800c4c6:	2201      	movs	r2, #1
 800c4c8:	4b18      	ldr	r3, [pc, #96]	; (800c52c <HAL_RTC_MspInit+0xb4>)
 800c4ca:	601a      	str	r2, [r3, #0]

  /*##-4- Configure the NVIC for RTC Alarm ###################################*/
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0x0F, 0);
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	210f      	movs	r1, #15
 800c4d0:	2029      	movs	r0, #41	; 0x29
 800c4d2:	f7f9 fa91 	bl	80059f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800c4d6:	2029      	movs	r0, #41	; 0x29
 800c4d8:	f7f9 fad2 	bl	8005a80 <HAL_NVIC_EnableIRQ>
}
 800c4dc:	b013      	add	sp, #76	; 0x4c
 800c4de:	f85d fb04 	ldr.w	pc, [sp], #4
      Error_Handler();
 800c4e2:	f7ff fd31 	bl	800bf48 <Error_Handler>
 800c4e6:	e7e5      	b.n	800c4b4 <HAL_RTC_MspInit+0x3c>
      Error_Handler();
 800c4e8:	f7ff fd2e 	bl	800bf48 <Error_Handler>
 800c4ec:	e7eb      	b.n	800c4c6 <HAL_RTC_MspInit+0x4e>
    RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_LSE;
 800c4ee:	230c      	movs	r3, #12
 800c4f0:	9306      	str	r3, [sp, #24]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	930c      	str	r3, [sp, #48]	; 0x30
    RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800c4f6:	2201      	movs	r2, #1
 800c4f8:	920b      	str	r2, [sp, #44]	; 0x2c
    RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 800c4fa:	9308      	str	r3, [sp, #32]
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c4fc:	a806      	add	r0, sp, #24
 800c4fe:	f7fb fca3 	bl	8007e48 <HAL_RCC_OscConfig>
 800c502:	b960      	cbnz	r0, 800c51e <HAL_RTC_MspInit+0xa6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800c504:	2302      	movs	r3, #2
 800c506:	9301      	str	r3, [sp, #4]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800c508:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c50c:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c50e:	a801      	add	r0, sp, #4
 800c510:	f7fc f87c 	bl	800860c <HAL_RCCEx_PeriphCLKConfig>
 800c514:	2800      	cmp	r0, #0
 800c516:	d0d6      	beq.n	800c4c6 <HAL_RTC_MspInit+0x4e>
      Error_Handler();
 800c518:	f7ff fd16 	bl	800bf48 <Error_Handler>
 800c51c:	e7d3      	b.n	800c4c6 <HAL_RTC_MspInit+0x4e>
      Error_Handler();
 800c51e:	f7ff fd13 	bl	800bf48 <Error_Handler>
 800c522:	e7ef      	b.n	800c504 <HAL_RTC_MspInit+0x8c>
 800c524:	40023800 	.word	0x40023800
 800c528:	200027cc 	.word	0x200027cc
 800c52c:	42470e3c 	.word	0x42470e3c

0800c530 <HAL_MspInit>:

/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void)
{
 800c530:	b500      	push	{lr}
 800c532:	b083      	sub	sp, #12
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 800c534:	2100      	movs	r1, #0
 800c536:	9100      	str	r1, [sp, #0]
 800c538:	4b0c      	ldr	r3, [pc, #48]	; (800c56c <HAL_MspInit+0x3c>)
 800c53a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c53c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c540:	645a      	str	r2, [r3, #68]	; 0x44
 800c542:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c544:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800c548:	9200      	str	r2, [sp, #0]
 800c54a:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_PWR_CLK_ENABLE();
 800c54c:	9101      	str	r1, [sp, #4]
 800c54e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c550:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800c554:	641a      	str	r2, [r3, #64]	; 0x40
 800c556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c55c:	9301      	str	r3, [sp, #4]
 800c55e:	9b01      	ldr	r3, [sp, #4]

	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800c560:	2007      	movs	r0, #7
 800c562:	f7f9 fa2b 	bl	80059bc <HAL_NVIC_SetPriorityGrouping>
	/* System interrupt init*/

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 800c566:	b003      	add	sp, #12
 800c568:	f85d fb04 	ldr.w	pc, [sp], #4
 800c56c:	40023800 	.word	0x40023800

0800c570 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 800c570:	4770      	bx	lr

0800c572 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 800c572:	e7fe      	b.n	800c572 <HardFault_Handler>

0800c574 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 800c574:	e7fe      	b.n	800c574 <MemManage_Handler>

0800c576 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 800c576:	e7fe      	b.n	800c576 <BusFault_Handler>

0800c578 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 800c578:	e7fe      	b.n	800c578 <UsageFault_Handler>

0800c57a <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 800c57a:	4770      	bx	lr

0800c57c <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 800c57c:	4770      	bx	lr

0800c57e <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 800c57e:	4770      	bx	lr

0800c580 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 800c580:	b508      	push	{r3, lr}
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 800c582:	f7f8 feb9 	bl	80052f8 <HAL_IncTick>
 800c586:	bd08      	pop	{r3, pc}

0800c588 <TIM5_IRQHandler>:
 * @brief  This function handles TIM_ALGO global interrupt.
 * @param  None
 * @retval None
 */
void TIM_ALGO_IRQHandler(void)
{
 800c588:	b508      	push	{r3, lr}
  HAL_TIM_IRQHandler(&AlgoTimHandle);
 800c58a:	4802      	ldr	r0, [pc, #8]	; (800c594 <TIM5_IRQHandler+0xc>)
 800c58c:	f7fd f88f 	bl	80096ae <HAL_TIM_IRQHandler>
 800c590:	bd08      	pop	{r3, pc}
 800c592:	bf00      	nop
 800c594:	200035d8 	.word	0x200035d8

0800c598 <EXTI15_10_IRQHandler>:
}

void EXTI15_10_IRQHandler(void)
{
 800c598:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 800c59a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c59e:	f7fa f867 	bl	8006670 <HAL_GPIO_EXTI_IRQHandler>
 800c5a2:	bd08      	pop	{r3, pc}

0800c5a4 <DMA1_Stream0_IRQHandler>:

/**
 * @brief This function handles DMA1 stream0 global interrupt.
 */
void DMA1_Stream0_IRQHandler(void)
{
 800c5a4:	b508      	push	{r3, lr}
	/* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

	/* USER CODE END DMA1_Stream0_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800c5a6:	4802      	ldr	r0, [pc, #8]	; (800c5b0 <DMA1_Stream0_IRQHandler+0xc>)
 800c5a8:	f7f9 fd52 	bl	8006050 <HAL_DMA_IRQHandler>
 800c5ac:	bd08      	pop	{r3, pc}
 800c5ae:	bf00      	nop
 800c5b0:	20002a10 	.word	0x20002a10

0800c5b4 <DMA1_Stream5_IRQHandler>:

/**
 * @brief This function handles DMA1 stream5 global interrupt.
 */
void DMA1_Stream5_IRQHandler(void)
{
 800c5b4:	b508      	push	{r3, lr}
	/* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

	/* USER CODE END DMA1_Stream5_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800c5b6:	4802      	ldr	r0, [pc, #8]	; (800c5c0 <DMA1_Stream5_IRQHandler+0xc>)
 800c5b8:	f7f9 fd4a 	bl	8006050 <HAL_DMA_IRQHandler>
 800c5bc:	bd08      	pop	{r3, pc}
 800c5be:	bf00      	nop
 800c5c0:	2000370c 	.word	0x2000370c

0800c5c4 <DMA1_Stream6_IRQHandler>:

/**
 * @brief This function handles DMA1 stream6 global interrupt.
 */
void DMA1_Stream6_IRQHandler(void)
{
 800c5c4:	b508      	push	{r3, lr}
	/* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

	/* USER CODE END DMA1_Stream6_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800c5c6:	4802      	ldr	r0, [pc, #8]	; (800c5d0 <DMA1_Stream6_IRQHandler+0xc>)
 800c5c8:	f7f9 fd42 	bl	8006050 <HAL_DMA_IRQHandler>
 800c5cc:	bd08      	pop	{r3, pc}
 800c5ce:	bf00      	nop
 800c5d0:	2000382c 	.word	0x2000382c

0800c5d4 <ADC_IRQHandler>:

/**
 * @brief This function handles ADC1 global interrupt.
 */
void ADC_IRQHandler(void)
{
 800c5d4:	b508      	push	{r3, lr}
	/* USER CODE BEGIN ADC_IRQn 0 */

	/* USER CODE END ADC_IRQn 0 */
	HAL_ADC_IRQHandler(&hadc1);
 800c5d6:	4802      	ldr	r0, [pc, #8]	; (800c5e0 <ADC_IRQHandler+0xc>)
 800c5d8:	f7f9 f842 	bl	8005660 <HAL_ADC_IRQHandler>
 800c5dc:	bd08      	pop	{r3, pc}
 800c5de:	bf00      	nop
 800c5e0:	20002914 	.word	0x20002914

0800c5e4 <TIM2_IRQHandler>:

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void)
{
 800c5e4:	b508      	push	{r3, lr}
	/* USER CODE BEGIN TIM2_IRQn 0 */

	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 800c5e6:	4802      	ldr	r0, [pc, #8]	; (800c5f0 <TIM2_IRQHandler+0xc>)
 800c5e8:	f7fd f861 	bl	80096ae <HAL_TIM_IRQHandler>
 800c5ec:	bd08      	pop	{r3, pc}
 800c5ee:	bf00      	nop
 800c5f0:	200036d0 	.word	0x200036d0

0800c5f4 <TIM3_IRQHandler>:

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void)
{
 800c5f4:	b508      	push	{r3, lr}
	/* USER CODE BEGIN TIM3_IRQn 0 */

	/* USER CODE END TIM3_IRQn 0 */
	HAL_TIM_IRQHandler(&htim3);
 800c5f6:	4802      	ldr	r0, [pc, #8]	; (800c600 <TIM3_IRQHandler+0xc>)
 800c5f8:	f7fd f859 	bl	80096ae <HAL_TIM_IRQHandler>
 800c5fc:	bd08      	pop	{r3, pc}
 800c5fe:	bf00      	nop
 800c600:	20003658 	.word	0x20003658

0800c604 <I2C1_EV_IRQHandler>:

/**
 * @brief This function handles I2C1 event interrupt.
 */
void I2C1_EV_IRQHandler(void)
{
 800c604:	b508      	push	{r3, lr}
	/* USER CODE BEGIN I2C1_EV_IRQn 0 */

	/* USER CODE END I2C1_EV_IRQn 0 */
	HAL_I2C_EV_IRQHandler(&hi2c1);
 800c606:	4802      	ldr	r0, [pc, #8]	; (800c610 <I2C1_EV_IRQHandler+0xc>)
 800c608:	f7fb faca 	bl	8007ba0 <HAL_I2C_EV_IRQHandler>
 800c60c:	bd08      	pop	{r3, pc}
 800c60e:	bf00      	nop
 800c610:	200029bc 	.word	0x200029bc

0800c614 <I2C1_ER_IRQHandler>:

/**
 * @brief This function handles I2C1 error interrupt.
 */
void I2C1_ER_IRQHandler(void)
{
 800c614:	b508      	push	{r3, lr}
	/* USER CODE BEGIN I2C1_ER_IRQn 0 */

	/* USER CODE END I2C1_ER_IRQn 0 */
	HAL_I2C_ER_IRQHandler(&hi2c1);
 800c616:	4802      	ldr	r0, [pc, #8]	; (800c620 <I2C1_ER_IRQHandler+0xc>)
 800c618:	f7fb fb76 	bl	8007d08 <HAL_I2C_ER_IRQHandler>
 800c61c:	bd08      	pop	{r3, pc}
 800c61e:	bf00      	nop
 800c620:	200029bc 	.word	0x200029bc

0800c624 <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void)
{
 800c624:	b508      	push	{r3, lr}
	/* USER CODE BEGIN USART2_IRQn 0 */

	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 800c626:	4802      	ldr	r0, [pc, #8]	; (800c630 <USART2_IRQHandler+0xc>)
 800c628:	f7fe f926 	bl	800a878 <HAL_UART_IRQHandler>
 800c62c:	bd08      	pop	{r3, pc}
 800c62e:	bf00      	nop
 800c630:	20003614 	.word	0x20003614

0800c634 <DMA1_Stream7_IRQHandler>:

/**
 * @brief This function handles DMA1 stream7 global interrupt.
 */
void DMA1_Stream7_IRQHandler(void)
{
 800c634:	b508      	push	{r3, lr}
	/* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

	/* USER CODE END DMA1_Stream7_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800c636:	4802      	ldr	r0, [pc, #8]	; (800c640 <DMA1_Stream7_IRQHandler+0xc>)
 800c638:	f7f9 fd0a 	bl	8006050 <HAL_DMA_IRQHandler>
 800c63c:	bd08      	pop	{r3, pc}
 800c63e:	bf00      	nop
 800c640:	2000295c 	.word	0x2000295c

0800c644 <DMA2_Stream1_IRQHandler>:

/**
 * @brief This function handles DMA2 stream1 global interrupt.
 */
void DMA2_Stream1_IRQHandler(void)
{
 800c644:	b508      	push	{r3, lr}
	/* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

	/* USER CODE END DMA2_Stream1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800c646:	4802      	ldr	r0, [pc, #8]	; (800c650 <DMA2_Stream1_IRQHandler+0xc>)
 800c648:	f7f9 fd02 	bl	8006050 <HAL_DMA_IRQHandler>
 800c64c:	bd08      	pop	{r3, pc}
 800c64e:	bf00      	nop
 800c650:	2000376c 	.word	0x2000376c

0800c654 <DMA2_Stream6_IRQHandler>:

/**
 * @brief This function handles DMA2 stream6 global interrupt.
 */
void DMA2_Stream6_IRQHandler(void)
{
 800c654:	b508      	push	{r3, lr}
	/* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

	/* USER CODE END DMA2_Stream6_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800c656:	4802      	ldr	r0, [pc, #8]	; (800c660 <DMA2_Stream6_IRQHandler+0xc>)
 800c658:	f7f9 fcfa 	bl	8006050 <HAL_DMA_IRQHandler>
 800c65c:	bd08      	pop	{r3, pc}
 800c65e:	bf00      	nop
 800c660:	200037cc 	.word	0x200037cc

0800c664 <USART6_IRQHandler>:

/**
 * @brief This function handles USART6 global interrupt.
 */
void USART6_IRQHandler(void)
{
 800c664:	b508      	push	{r3, lr}
	/* USER CODE BEGIN USART6_IRQn 0 */

	/* USER CODE END USART6_IRQn 0 */
	HAL_UART_IRQHandler(&huart6);
 800c666:	4802      	ldr	r0, [pc, #8]	; (800c670 <USART6_IRQHandler+0xc>)
 800c668:	f7fe f906 	bl	800a878 <HAL_UART_IRQHandler>
 800c66c:	bd08      	pop	{r3, pc}
 800c66e:	bf00      	nop
 800c670:	2000388c 	.word	0x2000388c

0800c674 <_read>:
	while (1) {
	}                       /* Make sure we hang here */
}

int _read(int file, char *ptr, int len)
{
 800c674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c676:	460d      	mov	r5, r1
 800c678:	4617      	mov	r7, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800c67a:	2400      	movs	r4, #0
 800c67c:	e005      	b.n	800c68a <_read+0x16>
		*ptr++ = __io_getchar();
 800c67e:	1c6e      	adds	r6, r5, #1
 800c680:	f7fe ff93 	bl	800b5aa <__io_getchar>
 800c684:	7028      	strb	r0, [r5, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800c686:	3401      	adds	r4, #1
		*ptr++ = __io_getchar();
 800c688:	4635      	mov	r5, r6
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800c68a:	42bc      	cmp	r4, r7
 800c68c:	dbf7      	blt.n	800c67e <_read+0xa>
	}

	return len;
}
 800c68e:	4638      	mov	r0, r7
 800c690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c692 <_write>:

int _write(int file, char *ptr, int len)
{
 800c692:	b570      	push	{r4, r5, r6, lr}
 800c694:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800c696:	2400      	movs	r4, #0
 800c698:	e005      	b.n	800c6a6 <_write+0x14>
		__io_putchar(*ptr++);
 800c69a:	1c4d      	adds	r5, r1, #1
 800c69c:	7808      	ldrb	r0, [r1, #0]
 800c69e:	f7fe ff7f 	bl	800b5a0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800c6a2:	3401      	adds	r4, #1
		__io_putchar(*ptr++);
 800c6a4:	4629      	mov	r1, r5
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800c6a6:	42b4      	cmp	r4, r6
 800c6a8:	dbf7      	blt.n	800c69a <_write+0x8>
	}
	return len;
}
 800c6aa:	4630      	mov	r0, r6
 800c6ac:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c6b0 <_sbrk>:

caddr_t _sbrk(int incr)
{
 800c6b0:	b508      	push	{r3, lr}
 800c6b2:	4603      	mov	r3, r0
	extern char end asm ("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800c6b4:	4a0b      	ldr	r2, [pc, #44]	; (800c6e4 <_sbrk+0x34>)
 800c6b6:	6812      	ldr	r2, [r2, #0]
 800c6b8:	b142      	cbz	r2, 800c6cc <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 800c6ba:	4a0a      	ldr	r2, [pc, #40]	; (800c6e4 <_sbrk+0x34>)
 800c6bc:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr) {
 800c6be:	4403      	add	r3, r0
 800c6c0:	466a      	mov	r2, sp
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	d806      	bhi.n	800c6d4 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t)-1;
	}

	heap_end += incr;
 800c6c6:	4a07      	ldr	r2, [pc, #28]	; (800c6e4 <_sbrk+0x34>)
 800c6c8:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap_end;
}
 800c6ca:	bd08      	pop	{r3, pc}
		heap_end = &end;
 800c6cc:	4906      	ldr	r1, [pc, #24]	; (800c6e8 <_sbrk+0x38>)
 800c6ce:	4a05      	ldr	r2, [pc, #20]	; (800c6e4 <_sbrk+0x34>)
 800c6d0:	6011      	str	r1, [r2, #0]
 800c6d2:	e7f2      	b.n	800c6ba <_sbrk+0xa>
		errno = ENOMEM;
 800c6d4:	f00e fd76 	bl	801b1c4 <__errno>
 800c6d8:	230c      	movs	r3, #12
 800c6da:	6003      	str	r3, [r0, #0]
		return (caddr_t)-1;
 800c6dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c6e0:	bd08      	pop	{r3, pc}
 800c6e2:	bf00      	nop
 800c6e4:	200027d0 	.word	0x200027d0
 800c6e8:	200038d0 	.word	0x200038d0

0800c6ec <_close>:

int _close(int file)
{
	return -1;
}
 800c6ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c6f0:	4770      	bx	lr

0800c6f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800c6f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c6f6:	604b      	str	r3, [r1, #4]
	return 0;
}
 800c6f8:	2000      	movs	r0, #0
 800c6fa:	4770      	bx	lr

0800c6fc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800c6fc:	2001      	movs	r0, #1
 800c6fe:	4770      	bx	lr

0800c700 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800c700:	2000      	movs	r0, #0
 800c702:	4770      	bx	lr

0800c704 <SystemInit>:
 */
void SystemInit(void)
{
	/* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 800c704:	490f      	ldr	r1, [pc, #60]	; (800c744 <SystemInit+0x40>)
 800c706:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800c70a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c70e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR |= (uint32_t)0x00000001;
 800c712:	4b0d      	ldr	r3, [pc, #52]	; (800c748 <SystemInit+0x44>)
 800c714:	681a      	ldr	r2, [r3, #0]
 800c716:	f042 0201 	orr.w	r2, r2, #1
 800c71a:	601a      	str	r2, [r3, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 800c71c:	2000      	movs	r0, #0
 800c71e:	6098      	str	r0, [r3, #8]

	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t)0xFEF6FFFF;
 800c720:	681a      	ldr	r2, [r3, #0]
 800c722:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800c726:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c72a:	601a      	str	r2, [r3, #0]

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x24003010;
 800c72c:	4a07      	ldr	r2, [pc, #28]	; (800c74c <SystemInit+0x48>)
 800c72e:	605a      	str	r2, [r3, #4]

	/* Reset HSEBYP bit */
	RCC->CR &= (uint32_t)0xFFFBFFFF;
 800c730:	681a      	ldr	r2, [r3, #0]
 800c732:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c736:	601a      	str	r2, [r3, #0]

	/* Disable all interrupts */
	RCC->CIR = 0x00000000;
 800c738:	60d8      	str	r0, [r3, #12]

	/* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
	SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c73a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c73e:	608b      	str	r3, [r1, #8]
 800c740:	4770      	bx	lr
 800c742:	bf00      	nop
 800c744:	e000ed00 	.word	0xe000ed00
 800c748:	40023800 	.word	0x40023800
 800c74c:	24003010 	.word	0x24003010

0800c750 <HAL_TIM_Base_MspInit>:
	}
	HAL_TIM_MspPostInit(&htim3);
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800c750:	b500      	push	{lr}
 800c752:	b085      	sub	sp, #20
	if (tim_baseHandle->Instance == TIM2) {
 800c754:	6803      	ldr	r3, [r0, #0]
 800c756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c75a:	d008      	beq.n	800c76e <HAL_TIM_Base_MspInit+0x1e>
		HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
		/* USER CODE BEGIN TIM2_MspInit 1 */

		/* USER CODE END TIM2_MspInit 1 */
	}else if (tim_baseHandle->Instance == TIM3) {
 800c75c:	4a22      	ldr	r2, [pc, #136]	; (800c7e8 <HAL_TIM_Base_MspInit+0x98>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	d01a      	beq.n	800c798 <HAL_TIM_Base_MspInit+0x48>
		HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
		/* USER CODE BEGIN TIM3_MspInit 1 */

		/* USER CODE END TIM3_MspInit 1 */
	} else if (tim_baseHandle->Instance == TIM_ALGO)
 800c762:	4a22      	ldr	r2, [pc, #136]	; (800c7ec <HAL_TIM_Base_MspInit+0x9c>)
 800c764:	4293      	cmp	r3, r2
 800c766:	d02b      	beq.n	800c7c0 <HAL_TIM_Base_MspInit+0x70>

	    /* System interrupt init*/
	    HAL_NVIC_SetPriority(TIM_ALGO_IRQn, 0x0F, 0);
	    HAL_NVIC_EnableIRQ(TIM_ALGO_IRQn);
	  }
}
 800c768:	b005      	add	sp, #20
 800c76a:	f85d fb04 	ldr.w	pc, [sp], #4
		__HAL_RCC_TIM2_CLK_ENABLE();
 800c76e:	2100      	movs	r1, #0
 800c770:	9101      	str	r1, [sp, #4]
 800c772:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800c776:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c778:	f042 0201 	orr.w	r2, r2, #1
 800c77c:	641a      	str	r2, [r3, #64]	; 0x40
 800c77e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c780:	f003 0301 	and.w	r3, r3, #1
 800c784:	9301      	str	r3, [sp, #4]
 800c786:	9b01      	ldr	r3, [sp, #4]
		HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800c788:	460a      	mov	r2, r1
 800c78a:	201c      	movs	r0, #28
 800c78c:	f7f9 f934 	bl	80059f8 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800c790:	201c      	movs	r0, #28
 800c792:	f7f9 f975 	bl	8005a80 <HAL_NVIC_EnableIRQ>
 800c796:	e7e7      	b.n	800c768 <HAL_TIM_Base_MspInit+0x18>
		__HAL_RCC_TIM3_CLK_ENABLE();
 800c798:	2100      	movs	r1, #0
 800c79a:	9102      	str	r1, [sp, #8]
 800c79c:	4b14      	ldr	r3, [pc, #80]	; (800c7f0 <HAL_TIM_Base_MspInit+0xa0>)
 800c79e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c7a0:	f042 0202 	orr.w	r2, r2, #2
 800c7a4:	641a      	str	r2, [r3, #64]	; 0x40
 800c7a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7a8:	f003 0302 	and.w	r3, r3, #2
 800c7ac:	9302      	str	r3, [sp, #8]
 800c7ae:	9b02      	ldr	r3, [sp, #8]
		HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800c7b0:	460a      	mov	r2, r1
 800c7b2:	201d      	movs	r0, #29
 800c7b4:	f7f9 f920 	bl	80059f8 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800c7b8:	201d      	movs	r0, #29
 800c7ba:	f7f9 f961 	bl	8005a80 <HAL_NVIC_EnableIRQ>
 800c7be:	e7d3      	b.n	800c768 <HAL_TIM_Base_MspInit+0x18>
	    TIM_ALGO_CLK_ENABLE();
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	9203      	str	r2, [sp, #12]
 800c7c4:	4b0a      	ldr	r3, [pc, #40]	; (800c7f0 <HAL_TIM_Base_MspInit+0xa0>)
 800c7c6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800c7c8:	f041 0108 	orr.w	r1, r1, #8
 800c7cc:	6419      	str	r1, [r3, #64]	; 0x40
 800c7ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7d0:	f003 0308 	and.w	r3, r3, #8
 800c7d4:	9303      	str	r3, [sp, #12]
 800c7d6:	9b03      	ldr	r3, [sp, #12]
	    HAL_NVIC_SetPriority(TIM_ALGO_IRQn, 0x0F, 0);
 800c7d8:	210f      	movs	r1, #15
 800c7da:	2032      	movs	r0, #50	; 0x32
 800c7dc:	f7f9 f90c 	bl	80059f8 <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(TIM_ALGO_IRQn);
 800c7e0:	2032      	movs	r0, #50	; 0x32
 800c7e2:	f7f9 f94d 	bl	8005a80 <HAL_NVIC_EnableIRQ>
}
 800c7e6:	e7bf      	b.n	800c768 <HAL_TIM_Base_MspInit+0x18>
 800c7e8:	40000400 	.word	0x40000400
 800c7ec:	40000c00 	.word	0x40000c00
 800c7f0:	40023800 	.word	0x40023800

0800c7f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800c7f4:	b500      	push	{lr}
 800c7f6:	b089      	sub	sp, #36	; 0x24
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	9303      	str	r3, [sp, #12]
 800c7fc:	9304      	str	r3, [sp, #16]
 800c7fe:	9305      	str	r3, [sp, #20]
 800c800:	9306      	str	r3, [sp, #24]
 800c802:	9307      	str	r3, [sp, #28]
	if (timHandle->Instance == TIM2) {
 800c804:	6803      	ldr	r3, [r0, #0]
 800c806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c80a:	d005      	beq.n	800c818 <HAL_TIM_MspPostInit+0x24>
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

		/* USER CODE BEGIN TIM2_MspPostInit 1 */

		/* USER CODE END TIM2_MspPostInit 1 */
	}else if (timHandle->Instance == TIM3) {
 800c80c:	4a19      	ldr	r2, [pc, #100]	; (800c874 <HAL_TIM_MspPostInit+0x80>)
 800c80e:	4293      	cmp	r3, r2
 800c810:	d019      	beq.n	800c846 <HAL_TIM_MspPostInit+0x52>

		/* USER CODE BEGIN TIM3_MspPostInit 1 */

		/* USER CODE END TIM3_MspPostInit 1 */
	}
}
 800c812:	b009      	add	sp, #36	; 0x24
 800c814:	f85d fb04 	ldr.w	pc, [sp], #4
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800c818:	2300      	movs	r3, #0
 800c81a:	9301      	str	r3, [sp, #4]
 800c81c:	4b16      	ldr	r3, [pc, #88]	; (800c878 <HAL_TIM_MspPostInit+0x84>)
 800c81e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c820:	f042 0201 	orr.w	r2, r2, #1
 800c824:	631a      	str	r2, [r3, #48]	; 0x30
 800c826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c828:	f003 0301 	and.w	r3, r3, #1
 800c82c:	9301      	str	r3, [sp, #4]
 800c82e:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin = PWM_IN1B_TIM2CH1_Pin | PWM_IN2B_TIM2CH2_Pin;
 800c830:	2303      	movs	r3, #3
 800c832:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c834:	2302      	movs	r3, #2
 800c836:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800c838:	2301      	movs	r3, #1
 800c83a:	9307      	str	r3, [sp, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c83c:	a903      	add	r1, sp, #12
 800c83e:	480f      	ldr	r0, [pc, #60]	; (800c87c <HAL_TIM_MspPostInit+0x88>)
 800c840:	f7f9 fcf4 	bl	800622c <HAL_GPIO_Init>
 800c844:	e7e5      	b.n	800c812 <HAL_TIM_MspPostInit+0x1e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800c846:	2300      	movs	r3, #0
 800c848:	9302      	str	r3, [sp, #8]
 800c84a:	4b0b      	ldr	r3, [pc, #44]	; (800c878 <HAL_TIM_MspPostInit+0x84>)
 800c84c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c84e:	f042 0202 	orr.w	r2, r2, #2
 800c852:	631a      	str	r2, [r3, #48]	; 0x30
 800c854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c856:	f003 0302 	and.w	r3, r3, #2
 800c85a:	9302      	str	r3, [sp, #8]
 800c85c:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Pin = PWM_IN1A_TIM3CH1_Pin | PWM_IN2A_TIM3CH2_Pin;
 800c85e:	2330      	movs	r3, #48	; 0x30
 800c860:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c862:	2302      	movs	r3, #2
 800c864:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800c866:	9307      	str	r3, [sp, #28]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c868:	a903      	add	r1, sp, #12
 800c86a:	4805      	ldr	r0, [pc, #20]	; (800c880 <HAL_TIM_MspPostInit+0x8c>)
 800c86c:	f7f9 fcde 	bl	800622c <HAL_GPIO_Init>
}
 800c870:	e7cf      	b.n	800c812 <HAL_TIM_MspPostInit+0x1e>
 800c872:	bf00      	nop
 800c874:	40000400 	.word	0x40000400
 800c878:	40023800 	.word	0x40023800
 800c87c:	40020000 	.word	0x40020000
 800c880:	40020400 	.word	0x40020400

0800c884 <MX_TIM2_Init>:
{
 800c884:	b500      	push	{lr}
 800c886:	b08f      	sub	sp, #60	; 0x3c
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800c888:	2300      	movs	r3, #0
 800c88a:	930a      	str	r3, [sp, #40]	; 0x28
 800c88c:	930b      	str	r3, [sp, #44]	; 0x2c
 800c88e:	930c      	str	r3, [sp, #48]	; 0x30
 800c890:	930d      	str	r3, [sp, #52]	; 0x34
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800c892:	9308      	str	r3, [sp, #32]
 800c894:	9309      	str	r3, [sp, #36]	; 0x24
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800c896:	9301      	str	r3, [sp, #4]
 800c898:	9302      	str	r3, [sp, #8]
 800c89a:	9303      	str	r3, [sp, #12]
 800c89c:	9304      	str	r3, [sp, #16]
 800c89e:	9305      	str	r3, [sp, #20]
 800c8a0:	9306      	str	r3, [sp, #24]
 800c8a2:	9307      	str	r3, [sp, #28]
	htim2.Instance = TIM2;
 800c8a4:	4824      	ldr	r0, [pc, #144]	; (800c938 <MX_TIM2_Init+0xb4>)
 800c8a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c8aa:	6002      	str	r2, [r0, #0]
	htim2.Init.Prescaler = 0;
 800c8ac:	6043      	str	r3, [r0, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c8ae:	6083      	str	r3, [r0, #8]
	htim2.Init.Period = 0;
 800c8b0:	60c3      	str	r3, [r0, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c8b2:	6103      	str	r3, [r0, #16]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800c8b4:	f7fd f820 	bl	80098f8 <HAL_TIM_Base_Init>
 800c8b8:	bb60      	cbnz	r0, 800c914 <MX_TIM2_Init+0x90>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c8ba:	a90e      	add	r1, sp, #56	; 0x38
 800c8bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c8c0:	f841 3d10 	str.w	r3, [r1, #-16]!
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800c8c4:	481c      	ldr	r0, [pc, #112]	; (800c938 <MX_TIM2_Init+0xb4>)
 800c8c6:	f7fc fc7d 	bl	80091c4 <HAL_TIM_ConfigClockSource>
 800c8ca:	bb30      	cbnz	r0, 800c91a <MX_TIM2_Init+0x96>
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 800c8cc:	481a      	ldr	r0, [pc, #104]	; (800c938 <MX_TIM2_Init+0xb4>)
 800c8ce:	f7fd f86f 	bl	80099b0 <HAL_TIM_PWM_Init>
 800c8d2:	bb28      	cbnz	r0, 800c920 <MX_TIM2_Init+0x9c>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	9308      	str	r3, [sp, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c8d8:	9309      	str	r3, [sp, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 800c8da:	a908      	add	r1, sp, #32
 800c8dc:	4816      	ldr	r0, [pc, #88]	; (800c938 <MX_TIM2_Init+0xb4>)
 800c8de:	f7fd fb23 	bl	8009f28 <HAL_TIMEx_MasterConfigSynchronization>
 800c8e2:	bb00      	cbnz	r0, 800c926 <MX_TIM2_Init+0xa2>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c8e4:	2360      	movs	r3, #96	; 0x60
 800c8e6:	9301      	str	r3, [sp, #4]
	sConfigOC.Pulse = 0;
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	9202      	str	r2, [sp, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c8ec:	9203      	str	r2, [sp, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c8ee:	9205      	str	r2, [sp, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 800c8f0:	a901      	add	r1, sp, #4
 800c8f2:	4811      	ldr	r0, [pc, #68]	; (800c938 <MX_TIM2_Init+0xb4>)
 800c8f4:	f7fd f8fa 	bl	8009aec <HAL_TIM_PWM_ConfigChannel>
 800c8f8:	b9c0      	cbnz	r0, 800c92c <MX_TIM2_Init+0xa8>
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 800c8fa:	2204      	movs	r2, #4
 800c8fc:	eb0d 0102 	add.w	r1, sp, r2
 800c900:	480d      	ldr	r0, [pc, #52]	; (800c938 <MX_TIM2_Init+0xb4>)
 800c902:	f7fd f8f3 	bl	8009aec <HAL_TIM_PWM_ConfigChannel>
 800c906:	b9a0      	cbnz	r0, 800c932 <MX_TIM2_Init+0xae>
	HAL_TIM_MspPostInit(&htim2);
 800c908:	480b      	ldr	r0, [pc, #44]	; (800c938 <MX_TIM2_Init+0xb4>)
 800c90a:	f7ff ff73 	bl	800c7f4 <HAL_TIM_MspPostInit>
}
 800c90e:	b00f      	add	sp, #60	; 0x3c
 800c910:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 800c914:	f7ff fb18 	bl	800bf48 <Error_Handler>
 800c918:	e7cf      	b.n	800c8ba <MX_TIM2_Init+0x36>
		Error_Handler();
 800c91a:	f7ff fb15 	bl	800bf48 <Error_Handler>
 800c91e:	e7d5      	b.n	800c8cc <MX_TIM2_Init+0x48>
		Error_Handler();
 800c920:	f7ff fb12 	bl	800bf48 <Error_Handler>
 800c924:	e7d6      	b.n	800c8d4 <MX_TIM2_Init+0x50>
		Error_Handler();
 800c926:	f7ff fb0f 	bl	800bf48 <Error_Handler>
 800c92a:	e7db      	b.n	800c8e4 <MX_TIM2_Init+0x60>
		Error_Handler();
 800c92c:	f7ff fb0c 	bl	800bf48 <Error_Handler>
 800c930:	e7e3      	b.n	800c8fa <MX_TIM2_Init+0x76>
		Error_Handler();
 800c932:	f7ff fb09 	bl	800bf48 <Error_Handler>
 800c936:	e7e7      	b.n	800c908 <MX_TIM2_Init+0x84>
 800c938:	200036d0 	.word	0x200036d0

0800c93c <MX_TIM3_Init>:
{
 800c93c:	b500      	push	{lr}
 800c93e:	b08f      	sub	sp, #60	; 0x3c
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800c940:	2300      	movs	r3, #0
 800c942:	930a      	str	r3, [sp, #40]	; 0x28
 800c944:	930b      	str	r3, [sp, #44]	; 0x2c
 800c946:	930c      	str	r3, [sp, #48]	; 0x30
 800c948:	930d      	str	r3, [sp, #52]	; 0x34
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800c94a:	9308      	str	r3, [sp, #32]
 800c94c:	9309      	str	r3, [sp, #36]	; 0x24
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800c94e:	9301      	str	r3, [sp, #4]
 800c950:	9302      	str	r3, [sp, #8]
 800c952:	9303      	str	r3, [sp, #12]
 800c954:	9304      	str	r3, [sp, #16]
 800c956:	9305      	str	r3, [sp, #20]
 800c958:	9306      	str	r3, [sp, #24]
 800c95a:	9307      	str	r3, [sp, #28]
	htim3.Instance = TIM3;
 800c95c:	4824      	ldr	r0, [pc, #144]	; (800c9f0 <MX_TIM3_Init+0xb4>)
 800c95e:	4a25      	ldr	r2, [pc, #148]	; (800c9f4 <MX_TIM3_Init+0xb8>)
 800c960:	6002      	str	r2, [r0, #0]
	htim3.Init.Prescaler = 0;
 800c962:	6043      	str	r3, [r0, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c964:	6083      	str	r3, [r0, #8]
	htim3.Init.Period = 0;
 800c966:	60c3      	str	r3, [r0, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c968:	6103      	str	r3, [r0, #16]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800c96a:	f7fc ffc5 	bl	80098f8 <HAL_TIM_Base_Init>
 800c96e:	bb60      	cbnz	r0, 800c9ca <MX_TIM3_Init+0x8e>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c970:	a90e      	add	r1, sp, #56	; 0x38
 800c972:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c976:	f841 3d10 	str.w	r3, [r1, #-16]!
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800c97a:	481d      	ldr	r0, [pc, #116]	; (800c9f0 <MX_TIM3_Init+0xb4>)
 800c97c:	f7fc fc22 	bl	80091c4 <HAL_TIM_ConfigClockSource>
 800c980:	bb30      	cbnz	r0, 800c9d0 <MX_TIM3_Init+0x94>
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 800c982:	481b      	ldr	r0, [pc, #108]	; (800c9f0 <MX_TIM3_Init+0xb4>)
 800c984:	f7fd f814 	bl	80099b0 <HAL_TIM_PWM_Init>
 800c988:	bb28      	cbnz	r0, 800c9d6 <MX_TIM3_Init+0x9a>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c98a:	2300      	movs	r3, #0
 800c98c:	9308      	str	r3, [sp, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c98e:	9309      	str	r3, [sp, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 800c990:	a908      	add	r1, sp, #32
 800c992:	4817      	ldr	r0, [pc, #92]	; (800c9f0 <MX_TIM3_Init+0xb4>)
 800c994:	f7fd fac8 	bl	8009f28 <HAL_TIMEx_MasterConfigSynchronization>
 800c998:	bb00      	cbnz	r0, 800c9dc <MX_TIM3_Init+0xa0>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c99a:	2360      	movs	r3, #96	; 0x60
 800c99c:	9301      	str	r3, [sp, #4]
	sConfigOC.Pulse = 0;
 800c99e:	2200      	movs	r2, #0
 800c9a0:	9202      	str	r2, [sp, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c9a2:	9203      	str	r2, [sp, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c9a4:	9205      	str	r2, [sp, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 800c9a6:	a901      	add	r1, sp, #4
 800c9a8:	4811      	ldr	r0, [pc, #68]	; (800c9f0 <MX_TIM3_Init+0xb4>)
 800c9aa:	f7fd f89f 	bl	8009aec <HAL_TIM_PWM_ConfigChannel>
 800c9ae:	b9c0      	cbnz	r0, 800c9e2 <MX_TIM3_Init+0xa6>
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 800c9b0:	2204      	movs	r2, #4
 800c9b2:	eb0d 0102 	add.w	r1, sp, r2
 800c9b6:	480e      	ldr	r0, [pc, #56]	; (800c9f0 <MX_TIM3_Init+0xb4>)
 800c9b8:	f7fd f898 	bl	8009aec <HAL_TIM_PWM_ConfigChannel>
 800c9bc:	b9a0      	cbnz	r0, 800c9e8 <MX_TIM3_Init+0xac>
	HAL_TIM_MspPostInit(&htim3);
 800c9be:	480c      	ldr	r0, [pc, #48]	; (800c9f0 <MX_TIM3_Init+0xb4>)
 800c9c0:	f7ff ff18 	bl	800c7f4 <HAL_TIM_MspPostInit>
}
 800c9c4:	b00f      	add	sp, #60	; 0x3c
 800c9c6:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 800c9ca:	f7ff fabd 	bl	800bf48 <Error_Handler>
 800c9ce:	e7cf      	b.n	800c970 <MX_TIM3_Init+0x34>
		Error_Handler();
 800c9d0:	f7ff faba 	bl	800bf48 <Error_Handler>
 800c9d4:	e7d5      	b.n	800c982 <MX_TIM3_Init+0x46>
		Error_Handler();
 800c9d6:	f7ff fab7 	bl	800bf48 <Error_Handler>
 800c9da:	e7d6      	b.n	800c98a <MX_TIM3_Init+0x4e>
		Error_Handler();
 800c9dc:	f7ff fab4 	bl	800bf48 <Error_Handler>
 800c9e0:	e7db      	b.n	800c99a <MX_TIM3_Init+0x5e>
		Error_Handler();
 800c9e2:	f7ff fab1 	bl	800bf48 <Error_Handler>
 800c9e6:	e7e3      	b.n	800c9b0 <MX_TIM3_Init+0x74>
		Error_Handler();
 800c9e8:	f7ff faae 	bl	800bf48 <Error_Handler>
 800c9ec:	e7e7      	b.n	800c9be <MX_TIM3_Init+0x82>
 800c9ee:	bf00      	nop
 800c9f0:	20003658 	.word	0x20003658
 800c9f4:	40000400 	.word	0x40000400

0800c9f8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800c9f8:	b508      	push	{r3, lr}
	huart2.Instance = USART2;
 800c9fa:	480b      	ldr	r0, [pc, #44]	; (800ca28 <MX_USART2_UART_Init+0x30>)
 800c9fc:	4b0b      	ldr	r3, [pc, #44]	; (800ca2c <MX_USART2_UART_Init+0x34>)
 800c9fe:	6003      	str	r3, [r0, #0]
	huart2.Init.BaudRate = 115200;
 800ca00:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800ca04:	6043      	str	r3, [r0, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800ca06:	2100      	movs	r1, #0
 800ca08:	6081      	str	r1, [r0, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800ca0a:	60c1      	str	r1, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800ca0c:	6101      	str	r1, [r0, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800ca0e:	230c      	movs	r3, #12
 800ca10:	6143      	str	r3, [r0, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ca12:	6181      	str	r1, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800ca14:	61c1      	str	r1, [r0, #28]
	if (HAL_MultiProcessor_Init(&huart2, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 800ca16:	460a      	mov	r2, r1
 800ca18:	f7fd fd3e 	bl	800a498 <HAL_MultiProcessor_Init>
 800ca1c:	b900      	cbnz	r0, 800ca20 <MX_USART2_UART_Init+0x28>
 800ca1e:	bd08      	pop	{r3, pc}
		Error_Handler();
 800ca20:	f7ff fa92 	bl	800bf48 <Error_Handler>
	}
}
 800ca24:	e7fb      	b.n	800ca1e <MX_USART2_UART_Init+0x26>
 800ca26:	bf00      	nop
 800ca28:	20003614 	.word	0x20003614
 800ca2c:	40004400 	.word	0x40004400

0800ca30 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800ca30:	b508      	push	{r3, lr}
	huart6.Instance = USART6;
 800ca32:	480b      	ldr	r0, [pc, #44]	; (800ca60 <MX_USART6_UART_Init+0x30>)
 800ca34:	4b0b      	ldr	r3, [pc, #44]	; (800ca64 <MX_USART6_UART_Init+0x34>)
 800ca36:	6003      	str	r3, [r0, #0]
	huart6.Init.BaudRate = 115200;
 800ca38:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800ca3c:	6043      	str	r3, [r0, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800ca3e:	2100      	movs	r1, #0
 800ca40:	6081      	str	r1, [r0, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 800ca42:	60c1      	str	r1, [r0, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 800ca44:	6101      	str	r1, [r0, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 800ca46:	230c      	movs	r3, #12
 800ca48:	6143      	str	r3, [r0, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ca4a:	6181      	str	r1, [r0, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800ca4c:	61c1      	str	r1, [r0, #28]
	if (HAL_MultiProcessor_Init(&huart6, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 800ca4e:	460a      	mov	r2, r1
 800ca50:	f7fd fd22 	bl	800a498 <HAL_MultiProcessor_Init>
 800ca54:	b900      	cbnz	r0, 800ca58 <MX_USART6_UART_Init+0x28>
 800ca56:	bd08      	pop	{r3, pc}
		Error_Handler();
 800ca58:	f7ff fa76 	bl	800bf48 <Error_Handler>
	}
}
 800ca5c:	e7fb      	b.n	800ca56 <MX_USART6_UART_Init+0x26>
 800ca5e:	bf00      	nop
 800ca60:	2000388c 	.word	0x2000388c
 800ca64:	40011400 	.word	0x40011400

0800ca68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800ca68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca6c:	b08a      	sub	sp, #40	; 0x28
 800ca6e:	4604      	mov	r4, r0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800ca70:	2300      	movs	r3, #0
 800ca72:	9305      	str	r3, [sp, #20]
 800ca74:	9306      	str	r3, [sp, #24]
 800ca76:	9307      	str	r3, [sp, #28]
 800ca78:	9308      	str	r3, [sp, #32]
 800ca7a:	9309      	str	r3, [sp, #36]	; 0x24
	if (uartHandle->Instance == USART2) {
 800ca7c:	6803      	ldr	r3, [r0, #0]
 800ca7e:	4a6e      	ldr	r2, [pc, #440]	; (800cc38 <HAL_UART_MspInit+0x1d0>)
 800ca80:	4293      	cmp	r3, r2
 800ca82:	d005      	beq.n	800ca90 <HAL_UART_MspInit+0x28>
		HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
		HAL_NVIC_EnableIRQ(USART2_IRQn);
		/* USER CODE BEGIN USART2_MspInit 1 */

		/* USER CODE END USART2_MspInit 1 */
	}else if (uartHandle->Instance == USART6) {
 800ca84:	4a6d      	ldr	r2, [pc, #436]	; (800cc3c <HAL_UART_MspInit+0x1d4>)
 800ca86:	4293      	cmp	r3, r2
 800ca88:	d05f      	beq.n	800cb4a <HAL_UART_MspInit+0xe2>
		HAL_NVIC_EnableIRQ(USART6_IRQn);
		/* USER CODE BEGIN USART6_MspInit 1 */

		/* USER CODE END USART6_MspInit 1 */
	}
}
 800ca8a:	b00a      	add	sp, #40	; 0x28
 800ca8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		__HAL_RCC_USART2_CLK_ENABLE();
 800ca90:	2500      	movs	r5, #0
 800ca92:	9500      	str	r5, [sp, #0]
 800ca94:	4b6a      	ldr	r3, [pc, #424]	; (800cc40 <HAL_UART_MspInit+0x1d8>)
 800ca96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ca98:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ca9c:	641a      	str	r2, [r3, #64]	; 0x40
 800ca9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800caa0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800caa4:	9200      	str	r2, [sp, #0]
 800caa6:	9a00      	ldr	r2, [sp, #0]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800caa8:	9501      	str	r5, [sp, #4]
 800caaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800caac:	f042 0201 	orr.w	r2, r2, #1
 800cab0:	631a      	str	r2, [r3, #48]	; 0x30
 800cab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cab4:	f003 0301 	and.w	r3, r3, #1
 800cab8:	9301      	str	r3, [sp, #4]
 800caba:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin = USART_TX_Pin | USART_RX_Pin;
 800cabc:	230c      	movs	r3, #12
 800cabe:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cac0:	2302      	movs	r3, #2
 800cac2:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800cac4:	2307      	movs	r3, #7
 800cac6:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cac8:	a905      	add	r1, sp, #20
 800caca:	485e      	ldr	r0, [pc, #376]	; (800cc44 <HAL_UART_MspInit+0x1dc>)
 800cacc:	f7f9 fbae 	bl	800622c <HAL_GPIO_Init>
		hdma_usart2_rx.Instance = DMA1_Stream5;
 800cad0:	485d      	ldr	r0, [pc, #372]	; (800cc48 <HAL_UART_MspInit+0x1e0>)
 800cad2:	4b5e      	ldr	r3, [pc, #376]	; (800cc4c <HAL_UART_MspInit+0x1e4>)
 800cad4:	6003      	str	r3, [r0, #0]
		hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800cad6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cada:	6043      	str	r3, [r0, #4]
		hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800cadc:	6085      	str	r5, [r0, #8]
		hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800cade:	60c5      	str	r5, [r0, #12]
		hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800cae0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cae4:	6103      	str	r3, [r0, #16]
		hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800cae6:	6145      	str	r5, [r0, #20]
		hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800cae8:	6185      	str	r5, [r0, #24]
		hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800caea:	61c5      	str	r5, [r0, #28]
		hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800caec:	6205      	str	r5, [r0, #32]
		hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800caee:	6245      	str	r5, [r0, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK) {
 800caf0:	f7f9 f89e 	bl	8005c30 <HAL_DMA_Init>
 800caf4:	bb18      	cbnz	r0, 800cb3e <HAL_UART_MspInit+0xd6>
		__HAL_LINKDMA(uartHandle, hdmarx, hdma_usart2_rx);
 800caf6:	4b54      	ldr	r3, [pc, #336]	; (800cc48 <HAL_UART_MspInit+0x1e0>)
 800caf8:	6363      	str	r3, [r4, #52]	; 0x34
 800cafa:	639c      	str	r4, [r3, #56]	; 0x38
		hdma_usart2_tx.Instance = DMA1_Stream6;
 800cafc:	4854      	ldr	r0, [pc, #336]	; (800cc50 <HAL_UART_MspInit+0x1e8>)
 800cafe:	4b55      	ldr	r3, [pc, #340]	; (800cc54 <HAL_UART_MspInit+0x1ec>)
 800cb00:	6003      	str	r3, [r0, #0]
		hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800cb02:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cb06:	6043      	str	r3, [r0, #4]
		hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800cb08:	2340      	movs	r3, #64	; 0x40
 800cb0a:	6083      	str	r3, [r0, #8]
		hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	60c3      	str	r3, [r0, #12]
		hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800cb10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cb14:	6102      	str	r2, [r0, #16]
		hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800cb16:	6143      	str	r3, [r0, #20]
		hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800cb18:	6183      	str	r3, [r0, #24]
		hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800cb1a:	61c3      	str	r3, [r0, #28]
		hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800cb1c:	6203      	str	r3, [r0, #32]
		hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800cb1e:	6243      	str	r3, [r0, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK) {
 800cb20:	f7f9 f886 	bl	8005c30 <HAL_DMA_Init>
 800cb24:	b970      	cbnz	r0, 800cb44 <HAL_UART_MspInit+0xdc>
		__HAL_LINKDMA(uartHandle, hdmatx, hdma_usart2_tx);
 800cb26:	4b4a      	ldr	r3, [pc, #296]	; (800cc50 <HAL_UART_MspInit+0x1e8>)
 800cb28:	6323      	str	r3, [r4, #48]	; 0x30
 800cb2a:	639c      	str	r4, [r3, #56]	; 0x38
		HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	4611      	mov	r1, r2
 800cb30:	2026      	movs	r0, #38	; 0x26
 800cb32:	f7f8 ff61 	bl	80059f8 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 800cb36:	2026      	movs	r0, #38	; 0x26
 800cb38:	f7f8 ffa2 	bl	8005a80 <HAL_NVIC_EnableIRQ>
 800cb3c:	e7a5      	b.n	800ca8a <HAL_UART_MspInit+0x22>
			Error_Handler();
 800cb3e:	f7ff fa03 	bl	800bf48 <Error_Handler>
 800cb42:	e7d8      	b.n	800caf6 <HAL_UART_MspInit+0x8e>
			Error_Handler();
 800cb44:	f7ff fa00 	bl	800bf48 <Error_Handler>
 800cb48:	e7ed      	b.n	800cb26 <HAL_UART_MspInit+0xbe>
		__HAL_RCC_USART6_CLK_ENABLE();
 800cb4a:	2500      	movs	r5, #0
 800cb4c:	9502      	str	r5, [sp, #8]
 800cb4e:	4b3c      	ldr	r3, [pc, #240]	; (800cc40 <HAL_UART_MspInit+0x1d8>)
 800cb50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb52:	f042 0220 	orr.w	r2, r2, #32
 800cb56:	645a      	str	r2, [r3, #68]	; 0x44
 800cb58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb5a:	f002 0220 	and.w	r2, r2, #32
 800cb5e:	9202      	str	r2, [sp, #8]
 800cb60:	9a02      	ldr	r2, [sp, #8]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800cb62:	9503      	str	r5, [sp, #12]
 800cb64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cb66:	f042 0204 	orr.w	r2, r2, #4
 800cb6a:	631a      	str	r2, [r3, #48]	; 0x30
 800cb6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cb6e:	f002 0204 	and.w	r2, r2, #4
 800cb72:	9203      	str	r2, [sp, #12]
 800cb74:	9a03      	ldr	r2, [sp, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800cb76:	9504      	str	r5, [sp, #16]
 800cb78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cb7a:	f042 0201 	orr.w	r2, r2, #1
 800cb7e:	631a      	str	r2, [r3, #48]	; 0x30
 800cb80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb82:	f003 0301 	and.w	r3, r3, #1
 800cb86:	9304      	str	r3, [sp, #16]
 800cb88:	9b04      	ldr	r3, [sp, #16]
		GPIO_InitStruct.Pin = RPI_USART6TX_Pin;
 800cb8a:	2340      	movs	r3, #64	; 0x40
 800cb8c:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb8e:	f04f 0802 	mov.w	r8, #2
 800cb92:	f8cd 8018 	str.w	r8, [sp, #24]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cb96:	2703      	movs	r7, #3
 800cb98:	9708      	str	r7, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800cb9a:	2608      	movs	r6, #8
 800cb9c:	9609      	str	r6, [sp, #36]	; 0x24
		HAL_GPIO_Init(RPI_USART6TX_GPIO_Port, &GPIO_InitStruct);
 800cb9e:	a905      	add	r1, sp, #20
 800cba0:	482d      	ldr	r0, [pc, #180]	; (800cc58 <HAL_UART_MspInit+0x1f0>)
 800cba2:	f7f9 fb43 	bl	800622c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = RPI_USART6RX_Pin;
 800cba6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cbaa:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cbac:	f8cd 8018 	str.w	r8, [sp, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cbb0:	9507      	str	r5, [sp, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cbb2:	9708      	str	r7, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800cbb4:	9609      	str	r6, [sp, #36]	; 0x24
		HAL_GPIO_Init(RPI_USART6RX_GPIO_Port, &GPIO_InitStruct);
 800cbb6:	a905      	add	r1, sp, #20
 800cbb8:	4822      	ldr	r0, [pc, #136]	; (800cc44 <HAL_UART_MspInit+0x1dc>)
 800cbba:	f7f9 fb37 	bl	800622c <HAL_GPIO_Init>
		hdma_usart6_rx.Instance = DMA2_Stream1;
 800cbbe:	4827      	ldr	r0, [pc, #156]	; (800cc5c <HAL_UART_MspInit+0x1f4>)
 800cbc0:	4b27      	ldr	r3, [pc, #156]	; (800cc60 <HAL_UART_MspInit+0x1f8>)
 800cbc2:	6003      	str	r3, [r0, #0]
		hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800cbc4:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
 800cbc8:	6043      	str	r3, [r0, #4]
		hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800cbca:	6085      	str	r5, [r0, #8]
		hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800cbcc:	60c5      	str	r5, [r0, #12]
		hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800cbce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbd2:	6103      	str	r3, [r0, #16]
		hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800cbd4:	6145      	str	r5, [r0, #20]
		hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800cbd6:	6185      	str	r5, [r0, #24]
		hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 800cbd8:	61c5      	str	r5, [r0, #28]
		hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800cbda:	6205      	str	r5, [r0, #32]
		hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800cbdc:	6245      	str	r5, [r0, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK) {
 800cbde:	f7f9 f827 	bl	8005c30 <HAL_DMA_Init>
 800cbe2:	bb18      	cbnz	r0, 800cc2c <HAL_UART_MspInit+0x1c4>
		__HAL_LINKDMA(uartHandle, hdmarx, hdma_usart6_rx);
 800cbe4:	4b1d      	ldr	r3, [pc, #116]	; (800cc5c <HAL_UART_MspInit+0x1f4>)
 800cbe6:	6363      	str	r3, [r4, #52]	; 0x34
 800cbe8:	639c      	str	r4, [r3, #56]	; 0x38
		hdma_usart6_tx.Instance = DMA2_Stream6;
 800cbea:	481e      	ldr	r0, [pc, #120]	; (800cc64 <HAL_UART_MspInit+0x1fc>)
 800cbec:	4b1e      	ldr	r3, [pc, #120]	; (800cc68 <HAL_UART_MspInit+0x200>)
 800cbee:	6003      	str	r3, [r0, #0]
		hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800cbf0:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
 800cbf4:	6043      	str	r3, [r0, #4]
		hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800cbf6:	2340      	movs	r3, #64	; 0x40
 800cbf8:	6083      	str	r3, [r0, #8]
		hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	60c3      	str	r3, [r0, #12]
		hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800cbfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cc02:	6102      	str	r2, [r0, #16]
		hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800cc04:	6143      	str	r3, [r0, #20]
		hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800cc06:	6183      	str	r3, [r0, #24]
		hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800cc08:	61c3      	str	r3, [r0, #28]
		hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 800cc0a:	6203      	str	r3, [r0, #32]
		hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800cc0c:	6243      	str	r3, [r0, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK) {
 800cc0e:	f7f9 f80f 	bl	8005c30 <HAL_DMA_Init>
 800cc12:	b970      	cbnz	r0, 800cc32 <HAL_UART_MspInit+0x1ca>
		__HAL_LINKDMA(uartHandle, hdmatx, hdma_usart6_tx);
 800cc14:	4b13      	ldr	r3, [pc, #76]	; (800cc64 <HAL_UART_MspInit+0x1fc>)
 800cc16:	6323      	str	r3, [r4, #48]	; 0x30
 800cc18:	639c      	str	r4, [r3, #56]	; 0x38
		HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	4611      	mov	r1, r2
 800cc1e:	2047      	movs	r0, #71	; 0x47
 800cc20:	f7f8 feea 	bl	80059f8 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART6_IRQn);
 800cc24:	2047      	movs	r0, #71	; 0x47
 800cc26:	f7f8 ff2b 	bl	8005a80 <HAL_NVIC_EnableIRQ>
}
 800cc2a:	e72e      	b.n	800ca8a <HAL_UART_MspInit+0x22>
			Error_Handler();
 800cc2c:	f7ff f98c 	bl	800bf48 <Error_Handler>
 800cc30:	e7d8      	b.n	800cbe4 <HAL_UART_MspInit+0x17c>
			Error_Handler();
 800cc32:	f7ff f989 	bl	800bf48 <Error_Handler>
 800cc36:	e7ed      	b.n	800cc14 <HAL_UART_MspInit+0x1ac>
 800cc38:	40004400 	.word	0x40004400
 800cc3c:	40011400 	.word	0x40011400
 800cc40:	40023800 	.word	0x40023800
 800cc44:	40020000 	.word	0x40020000
 800cc48:	2000370c 	.word	0x2000370c
 800cc4c:	40026088 	.word	0x40026088
 800cc50:	2000382c 	.word	0x2000382c
 800cc54:	400260a0 	.word	0x400260a0
 800cc58:	40020800 	.word	0x40020800
 800cc5c:	2000376c 	.word	0x2000376c
 800cc60:	40026428 	.word	0x40026428
 800cc64:	200037cc 	.word	0x200037cc
 800cc68:	400264a0 	.word	0x400264a0

0800cc6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800cc6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800cca4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800cc70:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800cc72:	e003      	b.n	800cc7c <LoopCopyDataInit>

0800cc74 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800cc74:	4b0c      	ldr	r3, [pc, #48]	; (800cca8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800cc76:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800cc78:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800cc7a:	3104      	adds	r1, #4

0800cc7c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800cc7c:	480b      	ldr	r0, [pc, #44]	; (800ccac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800cc7e:	4b0c      	ldr	r3, [pc, #48]	; (800ccb0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800cc80:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800cc82:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800cc84:	d3f6      	bcc.n	800cc74 <CopyDataInit>
  ldr  r2, =_sbss
 800cc86:	4a0b      	ldr	r2, [pc, #44]	; (800ccb4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800cc88:	e002      	b.n	800cc90 <LoopFillZerobss>

0800cc8a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800cc8a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800cc8c:	f842 3b04 	str.w	r3, [r2], #4

0800cc90 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800cc90:	4b09      	ldr	r3, [pc, #36]	; (800ccb8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800cc92:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800cc94:	d3f9      	bcc.n	800cc8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800cc96:	f7ff fd35 	bl	800c704 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800cc9a:	f00e fc15 	bl	801b4c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800cc9e:	f7ff fa1d 	bl	800c0dc <main>
  bx  lr    
 800cca2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800cca4:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 800cca8:	0801efb8 	.word	0x0801efb8
  ldr  r0, =_sdata
 800ccac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800ccb0:	20001650 	.word	0x20001650
  ldr  r2, =_sbss
 800ccb4:	20001650 	.word	0x20001650
  ldr  r3, = _ebss
 800ccb8:	200038d0 	.word	0x200038d0

0800ccbc <DMA1_Stream1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ccbc:	e7fe      	b.n	800ccbc <DMA1_Stream1_IRQHandler>
	...

0800ccc0 <m_mldivide>:
 800ccc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccc4:	b097      	sub	sp, #92	; 0x5c
 800ccc6:	4607      	mov	r7, r0
 800ccc8:	460d      	mov	r5, r1
 800ccca:	4614      	mov	r4, r2
 800cccc:	4606      	mov	r6, r0
 800ccce:	f100 0820 	add.w	r8, r0, #32
 800ccd2:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 800ccd6:	6830      	ldr	r0, [r6, #0]
 800ccd8:	6871      	ldr	r1, [r6, #4]
 800ccda:	68b2      	ldr	r2, [r6, #8]
 800ccdc:	68f3      	ldr	r3, [r6, #12]
 800ccde:	46e6      	mov	lr, ip
 800cce0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cce4:	3610      	adds	r6, #16
 800cce6:	4546      	cmp	r6, r8
 800cce8:	46f4      	mov	ip, lr
 800ccea:	d1f4      	bne.n	800ccd6 <m_mldivide+0x16>
 800ccec:	edd7 7a00 	vldr	s15, [r7]
 800ccf0:	ed97 7a01 	vldr	s14, [r7, #4]
 800ccf4:	6830      	ldr	r0, [r6, #0]
 800ccf6:	f8ce 0000 	str.w	r0, [lr]
 800ccfa:	eef0 7ae7 	vabs.f32	s15, s15
 800ccfe:	eeb0 7ac7 	vabs.f32	s14, s14
 800cd02:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cd06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd0a:	f100 8184 	bmi.w	800d016 <m_mldivide+0x356>
 800cd0e:	2304      	movs	r3, #4
 800cd10:	9302      	str	r3, [sp, #8]
 800cd12:	f04f 0b00 	mov.w	fp, #0
 800cd16:	4618      	mov	r0, r3
 800cd18:	2307      	movs	r3, #7
 800cd1a:	eeb0 7a67 	vmov.f32	s14, s15
 800cd1e:	46dc      	mov	ip, fp
 800cd20:	2106      	movs	r1, #6
 800cd22:	9303      	str	r3, [sp, #12]
 800cd24:	f04f 0903 	mov.w	r9, #3
 800cd28:	2601      	movs	r6, #1
 800cd2a:	edd7 7a02 	vldr	s15, [r7, #8]
 800cd2e:	eef0 7ae7 	vabs.f32	s15, s15
 800cd32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cd36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd3a:	f100 8179 	bmi.w	800d030 <m_mldivide+0x370>
 800cd3e:	2202      	movs	r2, #2
 800cd40:	2308      	movs	r3, #8
 800cd42:	f04f 0e05 	mov.w	lr, #5
 800cd46:	9200      	str	r2, [sp, #0]
 800cd48:	4438      	add	r0, r7
 800cd4a:	4467      	add	r7, ip
 800cd4c:	edd0 6a00 	vldr	s13, [r0]
 800cd50:	ed97 7a00 	vldr	s14, [r7]
 800cd54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd58:	00b0      	lsls	r0, r6, #2
 800cd5a:	aa16      	add	r2, sp, #88	; 0x58
 800cd5c:	eb02 0c00 	add.w	ip, r2, r0
 800cd60:	9a00      	ldr	r2, [sp, #0]
 800cd62:	9006      	str	r0, [sp, #24]
 800cd64:	ea4f 008b 	mov.w	r0, fp, lsl #2
 800cd68:	4607      	mov	r7, r0
 800cd6a:	ea4f 0a82 	mov.w	sl, r2, lsl #2
 800cd6e:	aa16      	add	r2, sp, #88	; 0x58
 800cd70:	eb02 0807 	add.w	r8, r2, r7
 800cd74:	9004      	str	r0, [sp, #16]
 800cd76:	eb02 000a 	add.w	r0, r2, sl
 800cd7a:	ea4f 0789 	mov.w	r7, r9, lsl #2
 800cd7e:	970a      	str	r7, [sp, #40]	; 0x28
 800cd80:	ed4c 7a09 	vstr	s15, [ip, #-36]	; 0xffffffdc
 800cd84:	ed18 7a09 	vldr	s14, [r8, #-36]	; 0xffffffdc
 800cd88:	ed50 6a09 	vldr	s13, [r0, #-36]	; 0xffffffdc
 800cd8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd90:	19d7      	adds	r7, r2, r7
 800cd92:	9709      	str	r7, [sp, #36]	; 0x24
 800cd94:	9f02      	ldr	r7, [sp, #8]
 800cd96:	00bf      	lsls	r7, r7, #2
 800cd98:	9707      	str	r7, [sp, #28]
 800cd9a:	19d7      	adds	r7, r2, r7
 800cd9c:	ea4f 028e 	mov.w	r2, lr, lsl #2
 800cda0:	9701      	str	r7, [sp, #4]
 800cda2:	0089      	lsls	r1, r1, #2
 800cda4:	4617      	mov	r7, r2
 800cda6:	aa16      	add	r2, sp, #88	; 0x58
 800cda8:	eb02 0901 	add.w	r9, r2, r1
 800cdac:	910b      	str	r1, [sp, #44]	; 0x2c
 800cdae:	9903      	ldr	r1, [sp, #12]
 800cdb0:	ed40 7a09 	vstr	s15, [r0, #-36]	; 0xffffffdc
 800cdb4:	0089      	lsls	r1, r1, #2
 800cdb6:	009b      	lsls	r3, r3, #2
 800cdb8:	eb02 0e07 	add.w	lr, r2, r7
 800cdbc:	eb02 0803 	add.w	r8, r2, r3
 800cdc0:	9108      	str	r1, [sp, #32]
 800cdc2:	1851      	adds	r1, r2, r1
 800cdc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cdc6:	ed1c 7a09 	vldr	s14, [ip, #-36]	; 0xffffffdc
 800cdca:	ed52 6a09 	vldr	s13, [r2, #-36]	; 0xffffffdc
 800cdce:	9705      	str	r7, [sp, #20]
 800cdd0:	9f01      	ldr	r7, [sp, #4]
 800cdd2:	ee27 7a26 	vmul.f32	s14, s14, s13
 800cdd6:	ed57 7a09 	vldr	s15, [r7, #-36]	; 0xffffffdc
 800cdda:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cdde:	ed47 7a09 	vstr	s15, [r7, #-36]	; 0xffffffdc
 800cde2:	ed52 6a09 	vldr	s13, [r2, #-36]	; 0xffffffdc
 800cde6:	ed10 7a09 	vldr	s14, [r0, #-36]	; 0xffffffdc
 800cdea:	ed5e 7a09 	vldr	s15, [lr, #-36]	; 0xffffffdc
 800cdee:	ee27 7a26 	vmul.f32	s14, s14, s13
 800cdf2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cdf6:	ed4e 7a09 	vstr	s15, [lr, #-36]	; 0xffffffdc
 800cdfa:	ed59 6a09 	vldr	s13, [r9, #-36]	; 0xffffffdc
 800cdfe:	ed1c 7a09 	vldr	s14, [ip, #-36]	; 0xffffffdc
 800ce02:	ed51 7a09 	vldr	s15, [r1, #-36]	; 0xffffffdc
 800ce06:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ce0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ce0e:	ed41 7a09 	vstr	s15, [r1, #-36]	; 0xffffffdc
 800ce12:	ed10 7a09 	vldr	s14, [r0, #-36]	; 0xffffffdc
 800ce16:	ed59 6a09 	vldr	s13, [r9, #-36]	; 0xffffffdc
 800ce1a:	ed58 7a09 	vldr	s15, [r8, #-36]	; 0xffffffdc
 800ce1e:	9a01      	ldr	r2, [sp, #4]
 800ce20:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ce24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ce28:	ed48 7a09 	vstr	s15, [r8, #-36]	; 0xffffffdc
 800ce2c:	ed1e 7a09 	vldr	s14, [lr, #-36]	; 0xffffffdc
 800ce30:	ed52 6a09 	vldr	s13, [r2, #-36]	; 0xffffffdc
 800ce34:	eeb0 6ac7 	vabs.f32	s12, s14
 800ce38:	eef0 7ae6 	vabs.f32	s15, s13
 800ce3c:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800ce40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce44:	dc15      	bgt.n	800ce72 <m_mldivide+0x1b2>
 800ce46:	9900      	ldr	r1, [sp, #0]
 800ce48:	9f05      	ldr	r7, [sp, #20]
 800ce4a:	9707      	str	r7, [sp, #28]
 800ce4c:	9f02      	ldr	r7, [sp, #8]
 800ce4e:	9600      	str	r6, [sp, #0]
 800ce50:	4630      	mov	r0, r6
 800ce52:	460e      	mov	r6, r1
 800ce54:	9903      	ldr	r1, [sp, #12]
 800ce56:	9308      	str	r3, [sp, #32]
 800ce58:	eef0 7a66 	vmov.f32	s15, s13
 800ce5c:	00bb      	lsls	r3, r7, #2
 800ce5e:	eef0 6a47 	vmov.f32	s13, s14
 800ce62:	9305      	str	r3, [sp, #20]
 800ce64:	f8cd a018 	str.w	sl, [sp, #24]
 800ce68:	eeb0 7a67 	vmov.f32	s14, s15
 800ce6c:	008b      	lsls	r3, r1, #2
 800ce6e:	ea4f 0a80 	mov.w	sl, r0, lsl #2
 800ce72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce76:	9a07      	ldr	r2, [sp, #28]
 800ce78:	9f04      	ldr	r7, [sp, #16]
 800ce7a:	a916      	add	r1, sp, #88	; 0x58
 800ce7c:	440a      	add	r2, r1
 800ce7e:	4610      	mov	r0, r2
 800ce80:	9a08      	ldr	r2, [sp, #32]
 800ce82:	440a      	add	r2, r1
 800ce84:	440b      	add	r3, r1
 800ce86:	4611      	mov	r1, r2
 800ce88:	9a05      	ldr	r2, [sp, #20]
 800ce8a:	f10d 0e58 	add.w	lr, sp, #88	; 0x58
 800ce8e:	4472      	add	r2, lr
 800ce90:	ed40 7a09 	vstr	s15, [r0, #-36]	; 0xffffffdc
 800ce94:	4690      	mov	r8, r2
 800ce96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ce98:	ed53 6a09 	vldr	s13, [r3, #-36]	; 0xffffffdc
 800ce9c:	ed11 6a09 	vldr	s12, [r1, #-36]	; 0xffffffdc
 800cea0:	4472      	add	r2, lr
 800cea2:	4696      	mov	lr, r2
 800cea4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cea8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ceaa:	f10d 0958 	add.w	r9, sp, #88	; 0x58
 800ceae:	ee36 6a67 	vsub.f32	s12, s12, s15
 800ceb2:	444a      	add	r2, r9
 800ceb4:	eb05 0c07 	add.w	ip, r5, r7
 800ceb8:	4691      	mov	r9, r2
 800ceba:	aa16      	add	r2, sp, #88	; 0x58
 800cebc:	ed9c 7a00 	vldr	s14, [ip]
 800cec0:	ed01 6a09 	vstr	s12, [r1, #-36]	; 0xffffffdc
 800cec4:	eb02 0c0a 	add.w	ip, r2, sl
 800cec8:	ed1c 2a09 	vldr	s4, [ip, #-36]	; 0xffffffdc
 800cecc:	ed84 7a00 	vstr	s14, [r4]
 800ced0:	44aa      	add	sl, r5
 800ced2:	edda 6a00 	vldr	s13, [sl]
 800ced6:	9906      	ldr	r1, [sp, #24]
 800ced8:	ed53 4a09 	vldr	s9, [r3, #-36]	; 0xffffffdc
 800cedc:	ed10 4a09 	vldr	s8, [r0, #-36]	; 0xffffffdc
 800cee0:	ed1e 5a09 	vldr	s10, [lr, #-36]	; 0xffffffdc
 800cee4:	ed58 2a09 	vldr	s5, [r8, #-36]	; 0xffffffdc
 800cee8:	ed59 5a09 	vldr	s11, [r9, #-36]	; 0xffffffdc
 800ceec:	ee67 7a02 	vmul.f32	s15, s14, s4
 800cef0:	1853      	adds	r3, r2, r1
 800cef2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800cef6:	ed53 3a09 	vldr	s7, [r3, #-36]	; 0xffffffdc
 800cefa:	edc4 6a01 	vstr	s13, [r4, #4]
 800cefe:	186b      	adds	r3, r5, r1
 800cf00:	edd3 7a00 	vldr	s15, [r3]
 800cf04:	ee27 1a23 	vmul.f32	s2, s14, s7
 800cf08:	ee64 1a26 	vmul.f32	s3, s8, s13
 800cf0c:	ee77 7ac1 	vsub.f32	s15, s15, s2
 800cf10:	19d7      	adds	r7, r2, r7
 800cf12:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800cf16:	ed17 3a09 	vldr	s6, [r7, #-36]	; 0xffffffdc
 800cf1a:	9a00      	ldr	r2, [sp, #0]
 800cf1c:	eec7 1a86 	vdiv.f32	s3, s15, s12
 800cf20:	eb05 078b 	add.w	r7, r5, fp, lsl #2
 800cf24:	eb05 0082 	add.w	r0, r5, r2, lsl #2
 800cf28:	eb05 0186 	add.w	r1, r5, r6, lsl #2
 800cf2c:	ee24 1aa1 	vmul.f32	s2, s9, s3
 800cf30:	ee65 7a21 	vmul.f32	s15, s10, s3
 800cf34:	ee76 6ac1 	vsub.f32	s13, s13, s2
 800cf38:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cf3c:	eec6 7aa2 	vdiv.f32	s15, s13, s5
 800cf40:	edc4 1a02 	vstr	s3, [r4, #8]
 800cf44:	ee67 6aa5 	vmul.f32	s13, s15, s11
 800cf48:	edc4 7a01 	vstr	s15, [r4, #4]
 800cf4c:	ee37 7a66 	vsub.f32	s14, s14, s13
 800cf50:	eec7 7a03 	vdiv.f32	s15, s14, s6
 800cf54:	edc4 7a00 	vstr	s15, [r4]
 800cf58:	ed97 7a03 	vldr	s14, [r7, #12]
 800cf5c:	ed84 7a03 	vstr	s14, [r4, #12]
 800cf60:	edd0 6a03 	vldr	s13, [r0, #12]
 800cf64:	ee67 7a02 	vmul.f32	s15, s14, s4
 800cf68:	ee27 1a23 	vmul.f32	s2, s14, s7
 800cf6c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800cf70:	edc4 6a04 	vstr	s13, [r4, #16]
 800cf74:	edd1 7a03 	vldr	s15, [r1, #12]
 800cf78:	ee66 1a84 	vmul.f32	s3, s13, s8
 800cf7c:	ee77 7ac1 	vsub.f32	s15, s15, s2
 800cf80:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800cf84:	eec7 1a86 	vdiv.f32	s3, s15, s12
 800cf88:	ee21 1aa4 	vmul.f32	s2, s3, s9
 800cf8c:	ee61 7a85 	vmul.f32	s15, s3, s10
 800cf90:	ee76 6ac1 	vsub.f32	s13, s13, s2
 800cf94:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cf98:	eec6 7aa2 	vdiv.f32	s15, s13, s5
 800cf9c:	edc4 1a05 	vstr	s3, [r4, #20]
 800cfa0:	ee67 6aa5 	vmul.f32	s13, s15, s11
 800cfa4:	edc4 7a04 	vstr	s15, [r4, #16]
 800cfa8:	ee37 7a66 	vsub.f32	s14, s14, s13
 800cfac:	eec7 7a03 	vdiv.f32	s15, s14, s6
 800cfb0:	edc4 7a03 	vstr	s15, [r4, #12]
 800cfb4:	edd7 7a06 	vldr	s15, [r7, #24]
 800cfb8:	edc4 7a06 	vstr	s15, [r4, #24]
 800cfbc:	ed90 7a06 	vldr	s14, [r0, #24]
 800cfc0:	ee27 2a82 	vmul.f32	s4, s15, s4
 800cfc4:	ee67 3aa3 	vmul.f32	s7, s15, s7
 800cfc8:	ee37 7a42 	vsub.f32	s14, s14, s4
 800cfcc:	ed84 7a07 	vstr	s14, [r4, #28]
 800cfd0:	edd1 6a06 	vldr	s13, [r1, #24]
 800cfd4:	ee27 4a04 	vmul.f32	s8, s14, s8
 800cfd8:	ee76 6ae3 	vsub.f32	s13, s13, s7
 800cfdc:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800cfe0:	ee86 4a86 	vdiv.f32	s8, s13, s12
 800cfe4:	ee64 4a24 	vmul.f32	s9, s8, s9
 800cfe8:	ee24 5a05 	vmul.f32	s10, s8, s10
 800cfec:	ee37 7a64 	vsub.f32	s14, s14, s9
 800cff0:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800cff4:	eec7 6a22 	vdiv.f32	s13, s14, s5
 800cff8:	ed84 4a08 	vstr	s8, [r4, #32]
 800cffc:	ee66 5aa5 	vmul.f32	s11, s13, s11
 800d000:	edc4 6a07 	vstr	s13, [r4, #28]
 800d004:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800d008:	ee87 7a83 	vdiv.f32	s14, s15, s6
 800d00c:	ed84 7a06 	vstr	s14, [r4, #24]
 800d010:	b017      	add	sp, #92	; 0x5c
 800d012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d016:	2306      	movs	r3, #6
 800d018:	f04f 0904 	mov.w	r9, #4
 800d01c:	2000      	movs	r0, #0
 800d01e:	9303      	str	r3, [sp, #12]
 800d020:	2303      	movs	r3, #3
 800d022:	46cc      	mov	ip, r9
 800d024:	4606      	mov	r6, r0
 800d026:	2107      	movs	r1, #7
 800d028:	9302      	str	r3, [sp, #8]
 800d02a:	f04f 0b01 	mov.w	fp, #1
 800d02e:	e67c      	b.n	800cd2a <m_mldivide+0x6a>
 800d030:	2207      	movs	r2, #7
 800d032:	2304      	movs	r3, #4
 800d034:	2108      	movs	r1, #8
 800d036:	9203      	str	r2, [sp, #12]
 800d038:	2200      	movs	r2, #0
 800d03a:	9302      	str	r3, [sp, #8]
 800d03c:	4618      	mov	r0, r3
 800d03e:	468c      	mov	ip, r1
 800d040:	2306      	movs	r3, #6
 800d042:	f04f 0e03 	mov.w	lr, #3
 800d046:	f04f 0905 	mov.w	r9, #5
 800d04a:	f04f 0b02 	mov.w	fp, #2
 800d04e:	9200      	str	r2, [sp, #0]
 800d050:	2601      	movs	r6, #1
 800d052:	e679      	b.n	800cd48 <m_mldivide+0x88>

0800d054 <m_qmult_eml>:
 800d054:	edd1 3a02 	vldr	s7, [r1, #8]
 800d058:	ed91 3a00 	vldr	s6, [r1]
 800d05c:	edd0 7a00 	vldr	s15, [r0]
 800d060:	edd1 2a03 	vldr	s5, [r1, #12]
 800d064:	ed91 4a01 	vldr	s8, [r1, #4]
 800d068:	edd0 4a01 	vldr	s9, [r0, #4]
 800d06c:	eddf 0a2c 	vldr	s1, [pc, #176]	; 800d120 <m_qmult_eml+0xcc>
 800d070:	ed90 5a02 	vldr	s10, [r0, #8]
 800d074:	edd0 5a03 	vldr	s11, [r0, #12]
 800d078:	eeb1 1a43 	vneg.f32	s2, s6
 800d07c:	eeb1 2a63 	vneg.f32	s4, s7
 800d080:	ee27 7a81 	vmul.f32	s14, s15, s2
 800d084:	ee67 6a82 	vmul.f32	s13, s15, s4
 800d088:	ee27 6aa2 	vmul.f32	s12, s15, s5
 800d08c:	ee67 7a84 	vmul.f32	s15, s15, s8
 800d090:	eef1 1a44 	vneg.f32	s3, s8
 800d094:	ee24 0aa1 	vmul.f32	s0, s9, s3
 800d098:	ed2d 8b02 	vpush	{d8}
 800d09c:	ee36 6a20 	vadd.f32	s12, s12, s1
 800d0a0:	ee24 8aa3 	vmul.f32	s16, s9, s7
 800d0a4:	ee37 7a20 	vadd.f32	s14, s14, s1
 800d0a8:	ee24 1a81 	vmul.f32	s2, s9, s2
 800d0ac:	ee76 6aa0 	vadd.f32	s13, s13, s1
 800d0b0:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800d0b4:	ee64 4aa2 	vmul.f32	s9, s9, s5
 800d0b8:	ee65 0a03 	vmul.f32	s1, s10, s6
 800d0bc:	ee36 6a08 	vadd.f32	s12, s12, s16
 800d0c0:	ee65 1a21 	vmul.f32	s3, s10, s3
 800d0c4:	ee25 2a02 	vmul.f32	s4, s10, s4
 800d0c8:	ee37 7a00 	vadd.f32	s14, s14, s0
 800d0cc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800d0d0:	ee77 7a81 	vadd.f32	s15, s15, s2
 800d0d4:	ee25 5a22 	vmul.f32	s10, s10, s5
 800d0d8:	ee25 3a83 	vmul.f32	s6, s11, s6
 800d0dc:	ee65 3aa3 	vmul.f32	s7, s11, s7
 800d0e0:	ee25 4a84 	vmul.f32	s8, s11, s8
 800d0e4:	ee36 6a21 	vadd.f32	s12, s12, s3
 800d0e8:	ee37 7a02 	vadd.f32	s14, s14, s4
 800d0ec:	ee76 6aa0 	vadd.f32	s13, s13, s1
 800d0f0:	ee77 7a85 	vadd.f32	s15, s15, s10
 800d0f4:	ee65 5aa2 	vmul.f32	s11, s11, s5
 800d0f8:	ee36 6a03 	vadd.f32	s12, s12, s6
 800d0fc:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800d100:	ee76 6a84 	vadd.f32	s13, s13, s8
 800d104:	ee37 7a25 	vadd.f32	s14, s14, s11
 800d108:	ed82 6a00 	vstr	s12, [r2]
 800d10c:	edc2 7a02 	vstr	s15, [r2, #8]
 800d110:	edc2 6a01 	vstr	s13, [r2, #4]
 800d114:	ed82 7a03 	vstr	s14, [r2, #12]
 800d118:	ecbd 8b02 	vpop	{d8}
 800d11c:	4770      	bx	lr
 800d11e:	bf00      	nop
 800d120:	00000000 	.word	0x00000000

0800d124 <m_q2dcm_eml>:
 800d124:	b510      	push	{r4, lr}
 800d126:	ed90 7a00 	vldr	s14, [r0]
 800d12a:	edd0 6a01 	vldr	s13, [r0, #4]
 800d12e:	ed90 6a02 	vldr	s12, [r0, #8]
 800d132:	edd0 7a03 	vldr	s15, [r0, #12]
 800d136:	ed2d 8b0a 	vpush	{d8-d12}
 800d13a:	ee66 caa6 	vmul.f32	s25, s13, s13
 800d13e:	ee27 8a07 	vmul.f32	s16, s14, s14
 800d142:	460c      	mov	r4, r1
 800d144:	4608      	mov	r0, r1
 800d146:	2224      	movs	r2, #36	; 0x24
 800d148:	2100      	movs	r1, #0
 800d14a:	ee67 ba26 	vmul.f32	s23, s14, s13
 800d14e:	ee27 ba06 	vmul.f32	s22, s14, s12
 800d152:	ee66 aa86 	vmul.f32	s21, s13, s12
 800d156:	ee26 ca06 	vmul.f32	s24, s12, s12
 800d15a:	ee67 8aa7 	vmul.f32	s17, s15, s15
 800d15e:	ee27 9a27 	vmul.f32	s18, s14, s15
 800d162:	ee66 9aa7 	vmul.f32	s19, s13, s15
 800d166:	ee26 aa27 	vmul.f32	s20, s12, s15
 800d16a:	f00e f9e4 	bl	801b536 <memset>
 800d16e:	ee78 5a6c 	vsub.f32	s11, s16, s25
 800d172:	eef1 7a48 	vneg.f32	s15, s16
 800d176:	ee3c 8ac8 	vsub.f32	s16, s25, s16
 800d17a:	ee77 7aec 	vsub.f32	s15, s15, s25
 800d17e:	ee38 8a4c 	vsub.f32	s16, s16, s24
 800d182:	ee75 5acc 	vsub.f32	s11, s11, s24
 800d186:	ee77 7a8c 	vadd.f32	s15, s15, s24
 800d18a:	ee38 8a28 	vadd.f32	s16, s16, s17
 800d18e:	ee3b 4a8a 	vadd.f32	s8, s23, s20
 800d192:	ee3b 6aca 	vsub.f32	s12, s23, s20
 800d196:	ee7b 4a69 	vsub.f32	s9, s22, s19
 800d19a:	ee7b 6a29 	vadd.f32	s13, s22, s19
 800d19e:	ee39 5a2a 	vadd.f32	s10, s18, s21
 800d1a2:	ee3a 7ac9 	vsub.f32	s14, s21, s18
 800d1a6:	ee75 5aa8 	vadd.f32	s11, s11, s17
 800d1aa:	ee77 7aa8 	vadd.f32	s15, s15, s17
 800d1ae:	ed84 8a04 	vstr	s16, [r4, #16]
 800d1b2:	ecbd 8b0a 	vpop	{d8-d12}
 800d1b6:	ee34 4a04 	vadd.f32	s8, s8, s8
 800d1ba:	ee36 6a06 	vadd.f32	s12, s12, s12
 800d1be:	ee74 4aa4 	vadd.f32	s9, s9, s9
 800d1c2:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800d1c6:	ee35 5a05 	vadd.f32	s10, s10, s10
 800d1ca:	ee37 7a07 	vadd.f32	s14, s14, s14
 800d1ce:	edc4 5a00 	vstr	s11, [r4]
 800d1d2:	ed84 4a03 	vstr	s8, [r4, #12]
 800d1d6:	ed84 6a01 	vstr	s12, [r4, #4]
 800d1da:	edc4 4a06 	vstr	s9, [r4, #24]
 800d1de:	edc4 6a02 	vstr	s13, [r4, #8]
 800d1e2:	edc4 7a08 	vstr	s15, [r4, #32]
 800d1e6:	ed84 5a07 	vstr	s10, [r4, #28]
 800d1ea:	ed84 7a05 	vstr	s14, [r4, #20]
 800d1ee:	bd10      	pop	{r4, pc}

0800d1f0 <m_dcm2q_eml>:
 800d1f0:	edd0 7a00 	vldr	s15, [r0]
 800d1f4:	edd0 6a04 	vldr	s13, [r0, #16]
 800d1f8:	ed90 7a08 	vldr	s14, [r0, #32]
 800d1fc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d200:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d208:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d20c:	4604      	mov	r4, r0
 800d20e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d212:	460d      	mov	r5, r1
 800d214:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d21c:	f340 80e0 	ble.w	800d3e0 <m_dcm2q_eml+0x1f0>
 800d220:	ee17 0a90 	vmov	r0, s15
 800d224:	f7f3 f998 	bl	8000558 <__aeabi_f2d>
 800d228:	ec41 0b10 	vmov	d0, r0, r1
 800d22c:	ed94 5a05 	vldr	s10, [r4, #20]
 800d230:	edd4 6a07 	vldr	s13, [r4, #28]
 800d234:	edd4 5a06 	vldr	s11, [r4, #24]
 800d238:	ed94 7a02 	vldr	s14, [r4, #8]
 800d23c:	ed94 6a01 	vldr	s12, [r4, #4]
 800d240:	edd4 7a03 	vldr	s15, [r4, #12]
 800d244:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800d248:	ee37 7a65 	vsub.f32	s14, s14, s11
 800d24c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800d250:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800d254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d258:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800d25c:	bf4c      	ite	mi
 800d25e:	f04f 38ff 	movmi.w	r8, #4294967295
 800d262:	f04f 0801 	movpl.w	r8, #1
 800d266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d26a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d26e:	bf4c      	ite	mi
 800d270:	f04f 36ff 	movmi.w	r6, #4294967295
 800d274:	2601      	movpl	r6, #1
 800d276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d27a:	bf4c      	ite	mi
 800d27c:	f04f 37ff 	movmi.w	r7, #4294967295
 800d280:	2701      	movpl	r7, #1
 800d282:	f00b fc0d 	bl	8018aa0 <sqrt>
 800d286:	ec51 0b10 	vmov	r0, r1, d0
 800d28a:	f7f3 fcb1 	bl	8000bf0 <__aeabi_d2f>
 800d28e:	ee07 8a90 	vmov	s15, r8
 800d292:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d296:	ee07 0a90 	vmov	s15, r0
 800d29a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d29e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d2a2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d2a6:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d2aa:	ed85 7a00 	vstr	s14, [r5]
 800d2ae:	ed94 6a00 	vldr	s12, [r4]
 800d2b2:	edd4 6a04 	vldr	s13, [r4, #16]
 800d2b6:	ed94 7a08 	vldr	s14, [r4, #32]
 800d2ba:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800d2be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d2c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d2ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2ce:	d904      	bls.n	800d2da <m_dcm2q_eml+0xea>
 800d2d0:	eef4 7a67 	vcmp.f32	s15, s15
 800d2d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2d8:	d07b      	beq.n	800d3d2 <m_dcm2q_eml+0x1e2>
 800d2da:	ed9f 0b43 	vldr	d0, [pc, #268]	; 800d3e8 <m_dcm2q_eml+0x1f8>
 800d2de:	f00b fbdf 	bl	8018aa0 <sqrt>
 800d2e2:	ec51 0b10 	vmov	r0, r1, d0
 800d2e6:	f7f3 fc83 	bl	8000bf0 <__aeabi_d2f>
 800d2ea:	ee07 0a90 	vmov	s15, r0
 800d2ee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d2f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d2f6:	ee07 6a90 	vmov	s15, r6
 800d2fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d2fe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d302:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d306:	ed85 7a01 	vstr	s14, [r5, #4]
 800d30a:	ed94 6a00 	vldr	s12, [r4]
 800d30e:	edd4 6a04 	vldr	s13, [r4, #16]
 800d312:	ed94 7a08 	vldr	s14, [r4, #32]
 800d316:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800d31a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d31e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d322:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d32a:	d904      	bls.n	800d336 <m_dcm2q_eml+0x146>
 800d32c:	eef4 7a67 	vcmp.f32	s15, s15
 800d330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d334:	d046      	beq.n	800d3c4 <m_dcm2q_eml+0x1d4>
 800d336:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 800d3e8 <m_dcm2q_eml+0x1f8>
 800d33a:	f00b fbb1 	bl	8018aa0 <sqrt>
 800d33e:	ec51 0b10 	vmov	r0, r1, d0
 800d342:	f7f3 fc55 	bl	8000bf0 <__aeabi_d2f>
 800d346:	ee07 0a90 	vmov	s15, r0
 800d34a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d34e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d352:	ee07 7a90 	vmov	s15, r7
 800d356:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d35a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d35e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d362:	ed85 7a02 	vstr	s14, [r5, #8]
 800d366:	edd4 7a00 	vldr	s15, [r4]
 800d36a:	edd4 6a04 	vldr	s13, [r4, #16]
 800d36e:	ed94 7a08 	vldr	s14, [r4, #32]
 800d372:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d37a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d37e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d386:	d904      	bls.n	800d392 <m_dcm2q_eml+0x1a2>
 800d388:	eef4 7a67 	vcmp.f32	s15, s15
 800d38c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d390:	d011      	beq.n	800d3b6 <m_dcm2q_eml+0x1c6>
 800d392:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800d3e8 <m_dcm2q_eml+0x1f8>
 800d396:	f00b fb83 	bl	8018aa0 <sqrt>
 800d39a:	ec51 0b10 	vmov	r0, r1, d0
 800d39e:	f7f3 fc27 	bl	8000bf0 <__aeabi_d2f>
 800d3a2:	ee07 0a10 	vmov	s14, r0
 800d3a6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d3aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3ae:	edc5 7a03 	vstr	s15, [r5, #12]
 800d3b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3b6:	ee17 0a90 	vmov	r0, s15
 800d3ba:	f7f3 f8cd 	bl	8000558 <__aeabi_f2d>
 800d3be:	ec41 0b10 	vmov	d0, r0, r1
 800d3c2:	e7e8      	b.n	800d396 <m_dcm2q_eml+0x1a6>
 800d3c4:	ee17 0a90 	vmov	r0, s15
 800d3c8:	f7f3 f8c6 	bl	8000558 <__aeabi_f2d>
 800d3cc:	ec41 0b10 	vmov	d0, r0, r1
 800d3d0:	e7b3      	b.n	800d33a <m_dcm2q_eml+0x14a>
 800d3d2:	ee17 0a90 	vmov	r0, s15
 800d3d6:	f7f3 f8bf 	bl	8000558 <__aeabi_f2d>
 800d3da:	ec41 0b10 	vmov	d0, r0, r1
 800d3de:	e77e      	b.n	800d2de <m_dcm2q_eml+0xee>
 800d3e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d3e8 <m_dcm2q_eml+0x1f8>
 800d3e4:	e722      	b.n	800d22c <m_dcm2q_eml+0x3c>
 800d3e6:	bf00      	nop
	...

0800d3f0 <SpacePointGyroProp>:
 800d3f0:	b570      	push	{r4, r5, r6, lr}
 800d3f2:	edd2 5a00 	vldr	s11, [r2]
 800d3f6:	ed92 7a01 	vldr	s14, [r2, #4]
 800d3fa:	eddf 6a53 	vldr	s13, [pc, #332]	; 800d548 <SpacePointGyroProp+0x158>
 800d3fe:	edd1 7a02 	vldr	s15, [r1, #8]
 800d402:	ed9f 6a52 	vldr	s12, [pc, #328]	; 800d54c <SpacePointGyroProp+0x15c>
 800d406:	ed2d 8b04 	vpush	{d8-d9}
 800d40a:	ed91 9a00 	vldr	s18, [r1]
 800d40e:	edd1 8a01 	vldr	s17, [r1, #4]
 800d412:	ed92 8a02 	vldr	s16, [r2, #8]
 800d416:	9d08      	ldr	r5, [sp, #32]
 800d418:	ee39 9a65 	vsub.f32	s18, s18, s11
 800d41c:	ee78 8ac7 	vsub.f32	s17, s17, s14
 800d420:	ee29 9a00 	vmul.f32	s18, s18, s0
 800d424:	ee37 8ac8 	vsub.f32	s16, s15, s16
 800d428:	ee29 9a26 	vmul.f32	s18, s18, s13
 800d42c:	ee68 8a80 	vmul.f32	s17, s17, s0
 800d430:	ee29 7a09 	vmul.f32	s14, s18, s18
 800d434:	ee68 8aa6 	vmul.f32	s17, s17, s13
 800d438:	ee28 8a00 	vmul.f32	s16, s16, s0
 800d43c:	ee68 7aa8 	vmul.f32	s15, s17, s17
 800d440:	ee28 8a26 	vmul.f32	s16, s16, s13
 800d444:	ee37 7a06 	vadd.f32	s14, s14, s12
 800d448:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 800d44c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d450:	ee68 7a08 	vmul.f32	s15, s16, s16
 800d454:	4606      	mov	r6, r0
 800d456:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d45a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d45e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d462:	461c      	mov	r4, r3
 800d464:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d468:	eef4 7ac6 	vcmpe.f32	s15, s12
 800d46c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d470:	dd62      	ble.n	800d538 <SpacePointGyroProp+0x148>
 800d472:	ee17 0a90 	vmov	r0, s15
 800d476:	f7f3 f86f 	bl	8000558 <__aeabi_f2d>
 800d47a:	ec41 0b10 	vmov	d0, r0, r1
 800d47e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d482:	ee29 9a27 	vmul.f32	s18, s18, s15
 800d486:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800d48a:	ee28 8a27 	vmul.f32	s16, s16, s15
 800d48e:	ed85 9a00 	vstr	s18, [r5]
 800d492:	edc5 8a01 	vstr	s17, [r5, #4]
 800d496:	ed85 8a02 	vstr	s16, [r5, #8]
 800d49a:	f00b fb01 	bl	8018aa0 <sqrt>
 800d49e:	ec51 0b10 	vmov	r0, r1, d0
 800d4a2:	f7f3 fba5 	bl	8000bf0 <__aeabi_d2f>
 800d4a6:	4622      	mov	r2, r4
 800d4a8:	4631      	mov	r1, r6
 800d4aa:	60e8      	str	r0, [r5, #12]
 800d4ac:	4628      	mov	r0, r5
 800d4ae:	f7ff fdd1 	bl	800d054 <m_qmult_eml>
 800d4b2:	edd4 6a00 	vldr	s13, [r4]
 800d4b6:	eddf 5a25 	vldr	s11, [pc, #148]	; 800d54c <SpacePointGyroProp+0x15c>
 800d4ba:	ed94 7a01 	vldr	s14, [r4, #4]
 800d4be:	edd4 7a02 	vldr	s15, [r4, #8]
 800d4c2:	ed94 6a03 	vldr	s12, [r4, #12]
 800d4c6:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800d4ca:	ee27 7a07 	vmul.f32	s14, s14, s14
 800d4ce:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800d4d2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d4d6:	ee37 7a26 	vadd.f32	s14, s14, s13
 800d4da:	ee26 6a06 	vmul.f32	s12, s12, s12
 800d4de:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d4e2:	ee76 7a27 	vadd.f32	s15, s12, s15
 800d4e6:	ee17 0a90 	vmov	r0, s15
 800d4ea:	f7f3 f835 	bl	8000558 <__aeabi_f2d>
 800d4ee:	ec41 0b10 	vmov	d0, r0, r1
 800d4f2:	f00b fad5 	bl	8018aa0 <sqrt>
 800d4f6:	ec51 0b10 	vmov	r0, r1, d0
 800d4fa:	f7f3 fb79 	bl	8000bf0 <__aeabi_d2f>
 800d4fe:	ed94 6a00 	vldr	s12, [r4]
 800d502:	edd4 6a01 	vldr	s13, [r4, #4]
 800d506:	ed94 7a02 	vldr	s14, [r4, #8]
 800d50a:	ed94 5a03 	vldr	s10, [r4, #12]
 800d50e:	ee07 0a90 	vmov	s15, r0
 800d512:	eec6 5a27 	vdiv.f32	s11, s12, s15
 800d516:	ecbd 8b04 	vpop	{d8-d9}
 800d51a:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800d51e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800d522:	ee85 7a27 	vdiv.f32	s14, s10, s15
 800d526:	edc4 5a00 	vstr	s11, [r4]
 800d52a:	ed84 6a01 	vstr	s12, [r4, #4]
 800d52e:	edc4 6a02 	vstr	s13, [r4, #8]
 800d532:	ed84 7a03 	vstr	s14, [r4, #12]
 800d536:	bd70      	pop	{r4, r5, r6, pc}
 800d538:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d540 <SpacePointGyroProp+0x150>
 800d53c:	e79f      	b.n	800d47e <SpacePointGyroProp+0x8e>
 800d53e:	bf00      	nop
	...
 800d548:	3c8efa35 	.word	0x3c8efa35
 800d54c:	00000000 	.word	0x00000000

0800d550 <m_b_interp1q_constrain>:
 800d550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d552:	ed2d 8b04 	vpush	{d8-d9}
 800d556:	edd0 8a00 	vldr	s17, [r0]
 800d55a:	eef4 8ac0 	vcmpe.f32	s17, s0
 800d55e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d562:	db04      	blt.n	800d56e <m_b_interp1q_constrain+0x1e>
 800d564:	ed91 0a00 	vldr	s0, [r1]
 800d568:	ecbd 8b04 	vpop	{d8-d9}
 800d56c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d56e:	ed90 9a09 	vldr	s18, [r0, #36]	; 0x24
 800d572:	eeb4 0ac9 	vcmpe.f32	s0, s18
 800d576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d57a:	da58      	bge.n	800d62e <m_b_interp1q_constrain+0xde>
 800d57c:	4b32      	ldr	r3, [pc, #200]	; (800d648 <m_b_interp1q_constrain+0xf8>)
 800d57e:	460e      	mov	r6, r1
 800d580:	4605      	mov	r5, r0
 800d582:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d586:	eeb0 8a40 	vmov.f32	s16, s0
 800d58a:	f7f3 fb31 	bl	8000bf0 <__aeabi_d2f>
 800d58e:	eef4 8ac8 	vcmpe.f32	s17, s16
 800d592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d596:	ee00 0a10 	vmov	s0, r0
 800d59a:	d8e5      	bhi.n	800d568 <m_b_interp1q_constrain+0x18>
 800d59c:	eeb4 8ac9 	vcmpe.f32	s16, s18
 800d5a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5a4:	d8e0      	bhi.n	800d568 <m_b_interp1q_constrain+0x18>
 800d5a6:	210a      	movs	r1, #10
 800d5a8:	2702      	movs	r7, #2
 800d5aa:	2001      	movs	r0, #1
 800d5ac:	f06f 4e40 	mvn.w	lr, #3221225472	; 0xc0000000
 800d5b0:	1844      	adds	r4, r0, r1
 800d5b2:	0864      	lsrs	r4, r4, #1
 800d5b4:	eb04 020e 	add.w	r2, r4, lr
 800d5b8:	0092      	lsls	r2, r2, #2
 800d5ba:	18ab      	adds	r3, r5, r2
 800d5bc:	edd3 7a00 	vldr	s15, [r3]
 800d5c0:	eef4 7ac8 	vcmpe.f32	s15, s16
 800d5c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5c8:	d808      	bhi.n	800d5dc <m_b_interp1q_constrain+0x8c>
 800d5ca:	e03b      	b.n	800d644 <m_b_interp1q_constrain+0xf4>
 800d5cc:	edd1 7a00 	vldr	s15, [r1]
 800d5d0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d5d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5d8:	da2e      	bge.n	800d638 <m_b_interp1q_constrain+0xe8>
 800d5da:	461c      	mov	r4, r3
 800d5dc:	1823      	adds	r3, r4, r0
 800d5de:	085b      	lsrs	r3, r3, #1
 800d5e0:	eb03 020e 	add.w	r2, r3, lr
 800d5e4:	0092      	lsls	r2, r2, #2
 800d5e6:	42bc      	cmp	r4, r7
 800d5e8:	eb05 0102 	add.w	r1, r5, r2
 800d5ec:	d8ee      	bhi.n	800d5cc <m_b_interp1q_constrain+0x7c>
 800d5ee:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800d5f2:	3a01      	subs	r2, #1
 800d5f4:	0092      	lsls	r2, r2, #2
 800d5f6:	18ab      	adds	r3, r5, r2
 800d5f8:	edd3 7a00 	vldr	s15, [r3]
 800d5fc:	0080      	lsls	r0, r0, #2
 800d5fe:	4405      	add	r5, r0
 800d600:	ed95 7a00 	vldr	s14, [r5]
 800d604:	ee38 8a67 	vsub.f32	s16, s16, s15
 800d608:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d60c:	4430      	add	r0, r6
 800d60e:	ee88 0a27 	vdiv.f32	s0, s16, s15
 800d612:	4432      	add	r2, r6
 800d614:	ecbd 8b04 	vpop	{d8-d9}
 800d618:	ed92 7a00 	vldr	s14, [r2]
 800d61c:	edd0 7a00 	vldr	s15, [r0]
 800d620:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d624:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d628:	ee30 0a07 	vadd.f32	s0, s0, s14
 800d62c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d62e:	ecbd 8b04 	vpop	{d8-d9}
 800d632:	ed91 0a09 	vldr	s0, [r1, #36]	; 0x24
 800d636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d638:	4621      	mov	r1, r4
 800d63a:	1c5f      	adds	r7, r3, #1
 800d63c:	428f      	cmp	r7, r1
 800d63e:	4618      	mov	r0, r3
 800d640:	d3b6      	bcc.n	800d5b0 <m_b_interp1q_constrain+0x60>
 800d642:	e7db      	b.n	800d5fc <m_b_interp1q_constrain+0xac>
 800d644:	4623      	mov	r3, r4
 800d646:	e7f8      	b.n	800d63a <m_b_interp1q_constrain+0xea>
 800d648:	20001670 	.word	0x20001670

0800d64c <m_interp1q_constrain>:
 800d64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d64e:	ed2d 8b04 	vpush	{d8-d9}
 800d652:	edd0 8a00 	vldr	s17, [r0]
 800d656:	eef4 8ac0 	vcmpe.f32	s17, s0
 800d65a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d65e:	db04      	blt.n	800d66a <m_interp1q_constrain+0x1e>
 800d660:	ed91 0a00 	vldr	s0, [r1]
 800d664:	ecbd 8b04 	vpop	{d8-d9}
 800d668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d66a:	ed90 9a0c 	vldr	s18, [r0, #48]	; 0x30
 800d66e:	eeb4 0ac9 	vcmpe.f32	s0, s18
 800d672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d676:	da58      	bge.n	800d72a <m_interp1q_constrain+0xde>
 800d678:	4b32      	ldr	r3, [pc, #200]	; (800d744 <m_interp1q_constrain+0xf8>)
 800d67a:	460e      	mov	r6, r1
 800d67c:	4605      	mov	r5, r0
 800d67e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d682:	eeb0 8a40 	vmov.f32	s16, s0
 800d686:	f7f3 fab3 	bl	8000bf0 <__aeabi_d2f>
 800d68a:	eef4 8ac8 	vcmpe.f32	s17, s16
 800d68e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d692:	ee00 0a10 	vmov	s0, r0
 800d696:	d8e5      	bhi.n	800d664 <m_interp1q_constrain+0x18>
 800d698:	eeb4 8ac9 	vcmpe.f32	s16, s18
 800d69c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6a0:	d8e0      	bhi.n	800d664 <m_interp1q_constrain+0x18>
 800d6a2:	210d      	movs	r1, #13
 800d6a4:	2702      	movs	r7, #2
 800d6a6:	2001      	movs	r0, #1
 800d6a8:	f06f 4e40 	mvn.w	lr, #3221225472	; 0xc0000000
 800d6ac:	1844      	adds	r4, r0, r1
 800d6ae:	0864      	lsrs	r4, r4, #1
 800d6b0:	eb04 020e 	add.w	r2, r4, lr
 800d6b4:	0092      	lsls	r2, r2, #2
 800d6b6:	18ab      	adds	r3, r5, r2
 800d6b8:	edd3 7a00 	vldr	s15, [r3]
 800d6bc:	eef4 7ac8 	vcmpe.f32	s15, s16
 800d6c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6c4:	d808      	bhi.n	800d6d8 <m_interp1q_constrain+0x8c>
 800d6c6:	e03b      	b.n	800d740 <m_interp1q_constrain+0xf4>
 800d6c8:	edd1 7a00 	vldr	s15, [r1]
 800d6cc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d6d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6d4:	da2e      	bge.n	800d734 <m_interp1q_constrain+0xe8>
 800d6d6:	461c      	mov	r4, r3
 800d6d8:	1823      	adds	r3, r4, r0
 800d6da:	085b      	lsrs	r3, r3, #1
 800d6dc:	eb03 020e 	add.w	r2, r3, lr
 800d6e0:	0092      	lsls	r2, r2, #2
 800d6e2:	42bc      	cmp	r4, r7
 800d6e4:	eb05 0102 	add.w	r1, r5, r2
 800d6e8:	d8ee      	bhi.n	800d6c8 <m_interp1q_constrain+0x7c>
 800d6ea:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800d6ee:	3a01      	subs	r2, #1
 800d6f0:	0092      	lsls	r2, r2, #2
 800d6f2:	18ab      	adds	r3, r5, r2
 800d6f4:	edd3 7a00 	vldr	s15, [r3]
 800d6f8:	0080      	lsls	r0, r0, #2
 800d6fa:	4405      	add	r5, r0
 800d6fc:	ed95 7a00 	vldr	s14, [r5]
 800d700:	ee38 8a67 	vsub.f32	s16, s16, s15
 800d704:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d708:	4430      	add	r0, r6
 800d70a:	ee88 0a27 	vdiv.f32	s0, s16, s15
 800d70e:	4432      	add	r2, r6
 800d710:	ecbd 8b04 	vpop	{d8-d9}
 800d714:	ed92 7a00 	vldr	s14, [r2]
 800d718:	edd0 7a00 	vldr	s15, [r0]
 800d71c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d720:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d724:	ee30 0a07 	vadd.f32	s0, s0, s14
 800d728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d72a:	ecbd 8b04 	vpop	{d8-d9}
 800d72e:	ed91 0a0c 	vldr	s0, [r1, #48]	; 0x30
 800d732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d734:	4621      	mov	r1, r4
 800d736:	1c5f      	adds	r7, r3, #1
 800d738:	428f      	cmp	r7, r1
 800d73a:	4618      	mov	r0, r3
 800d73c:	d3b6      	bcc.n	800d6ac <m_interp1q_constrain+0x60>
 800d73e:	e7db      	b.n	800d6f8 <m_interp1q_constrain+0xac>
 800d740:	4623      	mov	r3, r4
 800d742:	e7f8      	b.n	800d736 <m_interp1q_constrain+0xea>
 800d744:	20001670 	.word	0x20001670

0800d748 <rt_InitInfAndNaN.isra.3>:
 800d748:	4b06      	ldr	r3, [pc, #24]	; (800d764 <rt_InitInfAndNaN.isra.3+0x1c>)
 800d74a:	4907      	ldr	r1, [pc, #28]	; (800d768 <rt_InitInfAndNaN.isra.3+0x20>)
 800d74c:	4a07      	ldr	r2, [pc, #28]	; (800d76c <rt_InitInfAndNaN.isra.3+0x24>)
 800d74e:	b410      	push	{r4}
 800d750:	2000      	movs	r0, #0
 800d752:	f04f 44ff 	mov.w	r4, #2139095040	; 0x7f800000
 800d756:	609c      	str	r4, [r3, #8]
 800d758:	e9c3 0100 	strd	r0, r1, [r3]
 800d75c:	60da      	str	r2, [r3, #12]
 800d75e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d762:	4770      	bx	lr
 800d764:	20001670 	.word	0x20001670
 800d768:	fff80000 	.word	0xfff80000
 800d76c:	ff800000 	.word	0xff800000

0800d770 <m_rt_atan2f_snf>:
 800d770:	b500      	push	{lr}
 800d772:	eeb4 0a40 	vcmp.f32	s0, s0
 800d776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d77a:	b085      	sub	sp, #20
 800d77c:	4b42      	ldr	r3, [pc, #264]	; (800d888 <m_rt_atan2f_snf+0x118>)
 800d77e:	d008      	beq.n	800d792 <m_rt_atan2f_snf+0x22>
 800d780:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d784:	f7f3 fa34 	bl	8000bf0 <__aeabi_d2f>
 800d788:	ee00 0a10 	vmov	s0, r0
 800d78c:	b005      	add	sp, #20
 800d78e:	f85d fb04 	ldr.w	pc, [sp], #4
 800d792:	eef4 0a60 	vcmp.f32	s1, s1
 800d796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d79a:	d1f1      	bne.n	800d780 <m_rt_atan2f_snf+0x10>
 800d79c:	edd3 7a02 	vldr	s15, [r3, #8]
 800d7a0:	eeb4 0a67 	vcmp.f32	s0, s15
 800d7a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7a8:	d015      	beq.n	800d7d6 <m_rt_atan2f_snf+0x66>
 800d7aa:	ed93 7a03 	vldr	s14, [r3, #12]
 800d7ae:	eeb4 0a47 	vcmp.f32	s0, s14
 800d7b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7b6:	d00e      	beq.n	800d7d6 <m_rt_atan2f_snf+0x66>
 800d7b8:	eef5 0a40 	vcmp.f32	s1, #0.0
 800d7bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7c0:	d131      	bne.n	800d826 <m_rt_atan2f_snf+0xb6>
 800d7c2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d7c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7ca:	dd47      	ble.n	800d85c <m_rt_atan2f_snf+0xec>
 800d7cc:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 800d88c <m_rt_atan2f_snf+0x11c>
 800d7d0:	b005      	add	sp, #20
 800d7d2:	f85d fb04 	ldr.w	pc, [sp], #4
 800d7d6:	eef4 0a67 	vcmp.f32	s1, s15
 800d7da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7de:	d11a      	bne.n	800d816 <m_rt_atan2f_snf+0xa6>
 800d7e0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d7e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7e8:	dd3c      	ble.n	800d864 <m_rt_atan2f_snf+0xf4>
 800d7ea:	ed9f 7b23 	vldr	d7, [pc, #140]	; 800d878 <m_rt_atan2f_snf+0x108>
 800d7ee:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 800d7f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7f6:	dd38      	ble.n	800d86a <m_rt_atan2f_snf+0xfa>
 800d7f8:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800d878 <m_rt_atan2f_snf+0x108>
 800d7fc:	eeb0 0a47 	vmov.f32	s0, s14
 800d800:	eef0 0a67 	vmov.f32	s1, s15
 800d804:	f00a ffd2 	bl	80187ac <atan2>
 800d808:	ec51 0b10 	vmov	r0, r1, d0
 800d80c:	f7f3 f9f0 	bl	8000bf0 <__aeabi_d2f>
 800d810:	ee00 0a10 	vmov	s0, r0
 800d814:	e7ba      	b.n	800d78c <m_rt_atan2f_snf+0x1c>
 800d816:	edd3 7a03 	vldr	s15, [r3, #12]
 800d81a:	eef4 0a67 	vcmp.f32	s1, s15
 800d81e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d822:	d0dd      	beq.n	800d7e0 <m_rt_atan2f_snf+0x70>
 800d824:	e7c8      	b.n	800d7b8 <m_rt_atan2f_snf+0x48>
 800d826:	ee10 0a90 	vmov	r0, s1
 800d82a:	ed8d 0a03 	vstr	s0, [sp, #12]
 800d82e:	f7f2 fe93 	bl	8000558 <__aeabi_f2d>
 800d832:	ed9d 0a03 	vldr	s0, [sp, #12]
 800d836:	e9cd 0100 	strd	r0, r1, [sp]
 800d83a:	ee10 0a10 	vmov	r0, s0
 800d83e:	f7f2 fe8b 	bl	8000558 <__aeabi_f2d>
 800d842:	ed9d 1b00 	vldr	d1, [sp]
 800d846:	ec41 0b10 	vmov	d0, r0, r1
 800d84a:	f00a ffaf 	bl	80187ac <atan2>
 800d84e:	ec51 0b10 	vmov	r0, r1, d0
 800d852:	f7f3 f9cd 	bl	8000bf0 <__aeabi_d2f>
 800d856:	ee00 0a10 	vmov	s0, r0
 800d85a:	e797      	b.n	800d78c <m_rt_atan2f_snf+0x1c>
 800d85c:	d408      	bmi.n	800d870 <m_rt_atan2f_snf+0x100>
 800d85e:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800d890 <m_rt_atan2f_snf+0x120>
 800d862:	e793      	b.n	800d78c <m_rt_atan2f_snf+0x1c>
 800d864:	ed9f 7b06 	vldr	d7, [pc, #24]	; 800d880 <m_rt_atan2f_snf+0x110>
 800d868:	e7c1      	b.n	800d7ee <m_rt_atan2f_snf+0x7e>
 800d86a:	ed9f 1b05 	vldr	d1, [pc, #20]	; 800d880 <m_rt_atan2f_snf+0x110>
 800d86e:	e7c5      	b.n	800d7fc <m_rt_atan2f_snf+0x8c>
 800d870:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800d894 <m_rt_atan2f_snf+0x124>
 800d874:	e78a      	b.n	800d78c <m_rt_atan2f_snf+0x1c>
 800d876:	bf00      	nop
 800d878:	00000000 	.word	0x00000000
 800d87c:	3ff00000 	.word	0x3ff00000
 800d880:	00000000 	.word	0x00000000
 800d884:	bff00000 	.word	0xbff00000
 800d888:	20001670 	.word	0x20001670
 800d88c:	3fc90fdb 	.word	0x3fc90fdb
 800d890:	00000000 	.word	0x00000000
 800d894:	bfc90fdb 	.word	0xbfc90fdb

0800d898 <output_update>:
 800d898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d89c:	ed2d 8b06 	vpush	{d8-d10}
 800d8a0:	edd0 6a00 	vldr	s13, [r0]
 800d8a4:	ed90 7a01 	vldr	s14, [r0, #4]
 800d8a8:	edd0 7a02 	vldr	s15, [r0, #8]
 800d8ac:	b08d      	sub	sp, #52	; 0x34
 800d8ae:	eef1 6a66 	vneg.f32	s13, s13
 800d8b2:	f89d 706c 	ldrb.w	r7, [sp, #108]	; 0x6c
 800d8b6:	edc0 6a00 	vstr	s13, [r0]
 800d8ba:	eeb1 7a47 	vneg.f32	s14, s14
 800d8be:	eef1 7a67 	vneg.f32	s15, s15
 800d8c2:	4689      	mov	r9, r1
 800d8c4:	ed80 7a01 	vstr	s14, [r0, #4]
 800d8c8:	edc0 7a02 	vstr	s15, [r0, #8]
 800d8cc:	a903      	add	r1, sp, #12
 800d8ce:	4604      	mov	r4, r0
 800d8d0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800d8d4:	4615      	mov	r5, r2
 800d8d6:	461e      	mov	r6, r3
 800d8d8:	f7ff fc24 	bl	800d124 <m_q2dcm_eml>
 800d8dc:	2f00      	cmp	r7, #0
 800d8de:	d17e      	bne.n	800d9de <output_update+0x146>
 800d8e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d8e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d8e6:	6072      	str	r2, [r6, #4]
 800d8e8:	60b3      	str	r3, [r6, #8]
 800d8ea:	6031      	str	r1, [r6, #0]
 800d8ec:	ed94 7a01 	vldr	s14, [r4, #4]
 800d8f0:	ed94 0a00 	vldr	s0, [r4]
 800d8f4:	edd4 0a02 	vldr	s1, [r4, #8]
 800d8f8:	edd4 7a03 	vldr	s15, [r4, #12]
 800d8fc:	ee20 8a00 	vmul.f32	s16, s0, s0
 800d900:	ee67 9a07 	vmul.f32	s19, s14, s14
 800d904:	ee60 6aa7 	vmul.f32	s13, s1, s15
 800d908:	ee20 0a07 	vmul.f32	s0, s0, s14
 800d90c:	ee20 9aa0 	vmul.f32	s18, s1, s1
 800d910:	ee38 7a69 	vsub.f32	s14, s16, s19
 800d914:	ee67 8aa7 	vmul.f32	s17, s15, s15
 800d918:	ee30 0a26 	vadd.f32	s0, s0, s13
 800d91c:	ee77 0a49 	vsub.f32	s1, s14, s18
 800d920:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d924:	ee70 0aa8 	vadd.f32	s1, s1, s17
 800d928:	f7ff ff22 	bl	800d770 <m_rt_atan2f_snf>
 800d92c:	ed85 0a00 	vstr	s0, [r5]
 800d930:	ed94 6a02 	vldr	s12, [r4, #8]
 800d934:	edd4 6a03 	vldr	s13, [r4, #12]
 800d938:	edd4 7a00 	vldr	s15, [r4]
 800d93c:	ed94 7a01 	vldr	s14, [r4, #4]
 800d940:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d944:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d948:	eef8 6a00 	vmov.f32	s13, #128	; 0xc0000000 -2.0
 800d94c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d950:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d954:	ee17 0a90 	vmov	r0, s15
 800d958:	f7f2 fdfe 	bl	8000558 <__aeabi_f2d>
 800d95c:	ec41 0b10 	vmov	d0, r0, r1
 800d960:	f00a fecc 	bl	80186fc <asin>
 800d964:	ec51 0b10 	vmov	r0, r1, d0
 800d968:	f7f3 f942 	bl	8000bf0 <__aeabi_d2f>
 800d96c:	6068      	str	r0, [r5, #4]
 800d96e:	ed94 0a01 	vldr	s0, [r4, #4]
 800d972:	edd4 6a02 	vldr	s13, [r4, #8]
 800d976:	edd4 7a00 	vldr	s15, [r4]
 800d97a:	ed94 7a03 	vldr	s14, [r4, #12]
 800d97e:	eef1 0a48 	vneg.f32	s1, s16
 800d982:	ee20 0a26 	vmul.f32	s0, s0, s13
 800d986:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d98a:	ee70 0ae9 	vsub.f32	s1, s1, s19
 800d98e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d992:	ee70 0a89 	vadd.f32	s1, s1, s18
 800d996:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d99a:	ee70 0aa8 	vadd.f32	s1, s1, s17
 800d99e:	f7ff fee7 	bl	800d770 <m_rt_atan2f_snf>
 800d9a2:	ed95 6a00 	vldr	s12, [r5]
 800d9a6:	ed85 0a02 	vstr	s0, [r5, #8]
 800d9aa:	eddf 6a7b 	vldr	s13, [pc, #492]	; 800db98 <output_update+0x300>
 800d9ae:	ed95 7a01 	vldr	s14, [r5, #4]
 800d9b2:	edd5 7a02 	vldr	s15, [r5, #8]
 800d9b6:	ee26 6a26 	vmul.f32	s12, s12, s13
 800d9ba:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d9be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d9c2:	ed85 6a00 	vstr	s12, [r5]
 800d9c6:	ed85 7a01 	vstr	s14, [r5, #4]
 800d9ca:	edc5 7a02 	vstr	s15, [r5, #8]
 800d9ce:	b387      	cbz	r7, 800da32 <output_update+0x19a>
 800d9d0:	2f01      	cmp	r7, #1
 800d9d2:	d009      	beq.n	800d9e8 <output_update+0x150>
 800d9d4:	b00d      	add	sp, #52	; 0x34
 800d9d6:	ecbd 8b06 	vpop	{d8-d10}
 800d9da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9de:	2f01      	cmp	r7, #1
 800d9e0:	d04a      	beq.n	800da78 <output_update+0x1e0>
 800d9e2:	ed95 6a00 	vldr	s12, [r5]
 800d9e6:	e7e0      	b.n	800d9aa <output_update+0x112>
 800d9e8:	ed96 7a00 	vldr	s14, [r6]
 800d9ec:	edd9 7a01 	vldr	s15, [r9, #4]
 800d9f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d9f4:	eef1 7a67 	vneg.f32	s15, s15
 800d9f8:	edc8 7a00 	vstr	s15, [r8]
 800d9fc:	ed96 7a01 	vldr	s14, [r6, #4]
 800da00:	edd9 7a00 	vldr	s15, [r9]
 800da04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800da08:	eef1 7a67 	vneg.f32	s15, s15
 800da0c:	edc8 7a01 	vstr	s15, [r8, #4]
 800da10:	edd9 7a02 	vldr	s15, [r9, #8]
 800da14:	ed96 7a02 	vldr	s14, [r6, #8]
 800da18:	eef1 7a67 	vneg.f32	s15, s15
 800da1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800da20:	eef1 7a67 	vneg.f32	s15, s15
 800da24:	edc8 7a02 	vstr	s15, [r8, #8]
 800da28:	b00d      	add	sp, #52	; 0x34
 800da2a:	ecbd 8b06 	vpop	{d8-d10}
 800da2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da32:	ed96 7a00 	vldr	s14, [r6]
 800da36:	edd9 7a00 	vldr	s15, [r9]
 800da3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800da3e:	eef1 7a67 	vneg.f32	s15, s15
 800da42:	edc8 7a00 	vstr	s15, [r8]
 800da46:	ed96 7a01 	vldr	s14, [r6, #4]
 800da4a:	edd9 7a01 	vldr	s15, [r9, #4]
 800da4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800da52:	eef1 7a67 	vneg.f32	s15, s15
 800da56:	edc8 7a01 	vstr	s15, [r8, #4]
 800da5a:	edd9 7a02 	vldr	s15, [r9, #8]
 800da5e:	ed96 7a02 	vldr	s14, [r6, #8]
 800da62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800da66:	eef1 7a67 	vneg.f32	s15, s15
 800da6a:	edc8 7a02 	vstr	s15, [r8, #8]
 800da6e:	b00d      	add	sp, #52	; 0x34
 800da70:	ecbd 8b06 	vpop	{d8-d10}
 800da74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da78:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 800da7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da80:	6032      	str	r2, [r6, #0]
 800da82:	eef1 7a67 	vneg.f32	s15, s15
 800da86:	6073      	str	r3, [r6, #4]
 800da88:	edc6 7a02 	vstr	s15, [r6, #8]
 800da8c:	edd4 8a02 	vldr	s17, [r4, #8]
 800da90:	ed94 8a00 	vldr	s16, [r4]
 800da94:	ed94 9a01 	vldr	s18, [r4, #4]
 800da98:	edd4 aa03 	vldr	s21, [r4, #12]
 800da9c:	ee68 7aa8 	vmul.f32	s15, s17, s17
 800daa0:	ee68 9a08 	vmul.f32	s19, s16, s16
 800daa4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800daa8:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
 800daac:	ee79 9aa9 	vadd.f32	s19, s19, s19
 800dab0:	ee7a 7a67 	vsub.f32	s15, s20, s15
 800dab4:	eef1 8a68 	vneg.f32	s17, s17
 800dab8:	ee77 7ae9 	vsub.f32	s15, s15, s19
 800dabc:	ee17 0a90 	vmov	r0, s15
 800dac0:	f7f2 fd4a 	bl	8000558 <__aeabi_f2d>
 800dac4:	ee28 7a09 	vmul.f32	s14, s16, s18
 800dac8:	ee68 7aaa 	vmul.f32	s15, s17, s21
 800dacc:	e9cd 0100 	strd	r0, r1, [sp]
 800dad0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dad4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800dad8:	ee17 0a90 	vmov	r0, s15
 800dadc:	f7f2 fd3c 	bl	8000558 <__aeabi_f2d>
 800dae0:	ed9d 1b00 	vldr	d1, [sp]
 800dae4:	ec41 0b10 	vmov	d0, r0, r1
 800dae8:	f00a fe60 	bl	80187ac <atan2>
 800daec:	ec51 0b10 	vmov	r0, r1, d0
 800daf0:	f7f3 f87e 	bl	8000bf0 <__aeabi_d2f>
 800daf4:	ee69 7a09 	vmul.f32	s15, s18, s18
 800daf8:	ee7a 9a69 	vsub.f32	s19, s20, s19
 800dafc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800db00:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800db04:	ee79 7ae7 	vsub.f32	s15, s19, s15
 800db08:	6028      	str	r0, [r5, #0]
 800db0a:	ee17 0a90 	vmov	r0, s15
 800db0e:	f7f2 fd23 	bl	8000558 <__aeabi_f2d>
 800db12:	ee29 7a2a 	vmul.f32	s14, s18, s21
 800db16:	ee68 7a28 	vmul.f32	s15, s16, s17
 800db1a:	e9cd 0100 	strd	r0, r1, [sp]
 800db1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800db22:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800db26:	ee17 0a90 	vmov	r0, s15
 800db2a:	f7f2 fd15 	bl	8000558 <__aeabi_f2d>
 800db2e:	ed9d 1b00 	vldr	d1, [sp]
 800db32:	ec41 0b10 	vmov	d0, r0, r1
 800db36:	f00a fe39 	bl	80187ac <atan2>
 800db3a:	ee68 8a89 	vmul.f32	s17, s17, s18
 800db3e:	ee28 8a2a 	vmul.f32	s16, s16, s21
 800db42:	ec51 0b10 	vmov	r0, r1, d0
 800db46:	f7f3 f853 	bl	8000bf0 <__aeabi_d2f>
 800db4a:	ee38 8a68 	vsub.f32	s16, s16, s17
 800db4e:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800db52:	ee78 7a08 	vadd.f32	s15, s16, s16
 800db56:	6068      	str	r0, [r5, #4]
 800db58:	ee17 0a90 	vmov	r0, s15
 800db5c:	f7f2 fcfc 	bl	8000558 <__aeabi_f2d>
 800db60:	ec41 0b10 	vmov	d0, r0, r1
 800db64:	f00a fdca 	bl	80186fc <asin>
 800db68:	ec51 0b10 	vmov	r0, r1, d0
 800db6c:	f7f3 f840 	bl	8000bf0 <__aeabi_d2f>
 800db70:	ed95 6a00 	vldr	s12, [r5]
 800db74:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 800db78:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800db7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db80:	60a8      	str	r0, [r5, #8]
 800db82:	f57f af12 	bpl.w	800d9aa <output_update+0x112>
 800db86:	eddf 7a05 	vldr	s15, [pc, #20]	; 800db9c <output_update+0x304>
 800db8a:	ee76 7a27 	vadd.f32	s15, s12, s15
 800db8e:	eeb0 6a67 	vmov.f32	s12, s15
 800db92:	edc5 7a00 	vstr	s15, [r5]
 800db96:	e708      	b.n	800d9aa <output_update+0x112>
 800db98:	42652ee1 	.word	0x42652ee1
 800db9c:	40c90e56 	.word	0x40c90e56

0800dba0 <llEvaluate.constprop.32>:
 800dba0:	edd2 0a00 	vldr	s1, [r2]
 800dba4:	ed90 1a00 	vldr	s2, [r0]
 800dba8:	ed90 3a04 	vldr	s6, [r0, #16]
 800dbac:	edd2 3a01 	vldr	s7, [r2, #4]
 800dbb0:	ed90 5a08 	vldr	s10, [r0, #32]
 800dbb4:	edd0 1a05 	vldr	s3, [r0, #20]
 800dbb8:	ed92 7a02 	vldr	s14, [r2, #8]
 800dbbc:	ed90 4a09 	vldr	s8, [r0, #36]	; 0x24
 800dbc0:	edd0 5a0d 	vldr	s11, [r0, #52]	; 0x34
 800dbc4:	ed90 2a0a 	vldr	s4, [r0, #40]	; 0x28
 800dbc8:	edd0 4a0c 	vldr	s9, [r0, #48]	; 0x30
 800dbcc:	edd2 7a03 	vldr	s15, [r2, #12]
 800dbd0:	ed90 6a0e 	vldr	s12, [r0, #56]	; 0x38
 800dbd4:	edd0 2a0f 	vldr	s5, [r0, #60]	; 0x3c
 800dbd8:	eec0 6a81 	vdiv.f32	s13, s1, s2
 800dbdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbe0:	b084      	sub	sp, #16
 800dbe2:	460d      	mov	r5, r1
 800dbe4:	f10d 0c10 	add.w	ip, sp, #16
 800dbe8:	4686      	mov	lr, r0
 800dbea:	f101 0710 	add.w	r7, r1, #16
 800dbee:	2603      	movs	r6, #3
 800dbf0:	ee26 3a83 	vmul.f32	s6, s13, s6
 800dbf4:	ee25 5a26 	vmul.f32	s10, s10, s13
 800dbf8:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800dbfc:	ee37 7a45 	vsub.f32	s14, s14, s10
 800dc00:	ee83 5aa1 	vdiv.f32	s10, s7, s3
 800dc04:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800dc08:	ee24 4a05 	vmul.f32	s8, s8, s10
 800dc0c:	edcd 6a00 	vstr	s13, [sp]
 800dc10:	ee37 7a44 	vsub.f32	s14, s14, s8
 800dc14:	ee65 6a85 	vmul.f32	s13, s11, s10
 800dc18:	eec7 5a02 	vdiv.f32	s11, s14, s4
 800dc1c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800dc20:	ee26 7a25 	vmul.f32	s14, s12, s11
 800dc24:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800dc28:	ed8d 5a01 	vstr	s10, [sp, #4]
 800dc2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dc30:	edcd 5a02 	vstr	s11, [sp, #8]
 800dc34:	ee87 7aa2 	vdiv.f32	s14, s15, s5
 800dc38:	ee17 3a10 	vmov	r3, s14
 800dc3c:	f845 3f0c 	str.w	r3, [r5, #12]!
 800dc40:	ed2c 7a01 	vstmdb	ip!, {s14}
 800dc44:	ed57 6a01 	vldr	s13, [r7, #-4]
 800dc48:	ed9e 7a0f 	vldr	s14, [lr, #60]	; 0x3c
 800dc4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dc50:	ed67 7a01 	vstmdb	r7!, {s15}
 800dc54:	b1fe      	cbz	r6, 800dc96 <llEvaluate.constprop.32+0xf6>
 800dc56:	3e01      	subs	r6, #1
 800dc58:	ed3c 7a01 	vldmdb	ip!, {s14}
 800dc5c:	1c73      	adds	r3, r6, #1
 800dc5e:	b25b      	sxtb	r3, r3
 800dc60:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800dc64:	ed25 7a01 	vstmdb	r5!, {s14}
 800dc68:	b21a      	sxth	r2, r3
 800dc6a:	eb00 1402 	add.w	r4, r0, r2, lsl #4
 800dc6e:	4444      	add	r4, r8
 800dc70:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800dc74:	edd4 7a00 	vldr	s15, [r4]
 800dc78:	edd2 6a00 	vldr	s13, [r2]
 800dc7c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800dc80:	3301      	adds	r3, #1
 800dc82:	ee37 7a67 	vsub.f32	s14, s14, s15
 800dc86:	b25b      	sxtb	r3, r3
 800dc88:	2b04      	cmp	r3, #4
 800dc8a:	ed85 7a00 	vstr	s14, [r5]
 800dc8e:	d1eb      	bne.n	800dc68 <llEvaluate.constprop.32+0xc8>
 800dc90:	f1ae 0e14 	sub.w	lr, lr, #20
 800dc94:	e7d6      	b.n	800dc44 <llEvaluate.constprop.32+0xa4>
 800dc96:	b004      	add	sp, #16
 800dc98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dc9c <getMagStats.constprop.35>:
 800dc9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dca0:	2400      	movs	r4, #0
 800dca2:	f8df a27c 	ldr.w	sl, [pc, #636]	; 800df20 <getMagStats.constprop.35+0x284>
 800dca6:	ed2d 8b04 	vpush	{d8-d9}
 800dcaa:	601c      	str	r4, [r3, #0]
 800dcac:	6014      	str	r4, [r2, #0]
 800dcae:	f89a e0b0 	ldrb.w	lr, [sl, #176]	; 0xb0
 800dcb2:	f89a 40b1 	ldrb.w	r4, [sl, #177]	; 0xb1
 800dcb6:	f99a 50b2 	ldrsb.w	r5, [sl, #178]	; 0xb2
 800dcba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800dcbe:	45a6      	cmp	lr, r4
 800dcc0:	b085      	sub	sp, #20
 800dcc2:	eef0 9a40 	vmov.f32	s19, s0
 800dcc6:	4681      	mov	r9, r0
 800dcc8:	eec7 8a80 	vdiv.f32	s17, s15, s0
 800dccc:	f000 80ef 	beq.w	800deae <getMagStats.constprop.35+0x212>
 800dcd0:	1c68      	adds	r0, r5, #1
 800dcd2:	eba0 000e 	sub.w	r0, r0, lr
 800dcd6:	fb90 f5f4 	sdiv	r5, r0, r4
 800dcda:	fb04 0015 	mls	r0, r4, r5, r0
 800dcde:	b205      	sxth	r5, r0
 800dce0:	2d00      	cmp	r5, #0
 800dce2:	9502      	str	r5, [sp, #8]
 800dce4:	f8cd e000 	str.w	lr, [sp]
 800dce8:	f2c0 80eb 	blt.w	800dec2 <getMagStats.constprop.35+0x226>
 800dcec:	ed9f 9a8a 	vldr	s18, [pc, #552]	; 800df18 <getMagStats.constprop.35+0x27c>
 800dcf0:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 800dcf4:	ee28 9a89 	vmul.f32	s18, s17, s18
 800dcf8:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800dcfc:	f1be 0f00 	cmp.w	lr, #0
 800dd00:	f000 80ee 	beq.w	800dee0 <getMagStats.constprop.35+0x244>
 800dd04:	2000      	movs	r0, #0
 800dd06:	4680      	mov	r8, r0
 800dd08:	460f      	mov	r7, r1
 800dd0a:	e001      	b.n	800dd10 <getMagStats.constprop.35+0x74>
 800dd0c:	f89a 40b1 	ldrb.w	r4, [sl, #177]	; 0xb1
 800dd10:	9902      	ldr	r1, [sp, #8]
 800dd12:	f8b9 6000 	ldrh.w	r6, [r9]
 800dd16:	f8b9 c002 	ldrh.w	ip, [r9, #2]
 800dd1a:	ed97 7a04 	vldr	s14, [r7, #16]
 800dd1e:	ed97 5a00 	vldr	s10, [r7]
 800dd22:	edd7 6a08 	vldr	s13, [r7, #32]
 800dd26:	eb08 0501 	add.w	r5, r8, r1
 800dd2a:	fb95 f1f4 	sdiv	r1, r5, r4
 800dd2e:	fb04 5111 	mls	r1, r4, r1, r5
 800dd32:	b2c9      	uxtb	r1, r1
 800dd34:	3104      	adds	r1, #4
 800dd36:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 800dd3a:	f8b1 b0b2 	ldrh.w	fp, [r1, #178]	; 0xb2
 800dd3e:	f8b1 50b4 	ldrh.w	r5, [r1, #180]	; 0xb4
 800dd42:	f8b1 40b6 	ldrh.w	r4, [r1, #182]	; 0xb6
 800dd46:	f8b9 1004 	ldrh.w	r1, [r9, #4]
 800dd4a:	ebab 0606 	sub.w	r6, fp, r6
 800dd4e:	b236      	sxth	r6, r6
 800dd50:	ee07 6a90 	vmov	s15, r6
 800dd54:	eba5 050c 	sub.w	r5, r5, ip
 800dd58:	b22d      	sxth	r5, r5
 800dd5a:	1a64      	subs	r4, r4, r1
 800dd5c:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800dd60:	ee07 5a90 	vmov	s15, r5
 800dd64:	b224      	sxth	r4, r4
 800dd66:	ee06 4a10 	vmov	s12, r4
 800dd6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dd6e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800dd72:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dd76:	ee65 5a85 	vmul.f32	s11, s11, s10
 800dd7a:	ee26 7a26 	vmul.f32	s14, s12, s13
 800dd7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dd82:	eefd 6ae5 	vcvt.s32.f32	s13, s11
 800dd86:	ee17 4a90 	vmov	r4, s15
 800dd8a:	edcd 6a00 	vstr	s13, [sp]
 800dd8e:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800dd92:	f9bd 1000 	ldrsh.w	r1, [sp]
 800dd96:	edcd 7a01 	vstr	s15, [sp, #4]
 800dd9a:	fb14 f404 	smulbb	r4, r4, r4
 800dd9e:	fb01 4401 	mla	r4, r1, r1, r4
 800dda2:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 800dda6:	fb01 4101 	mla	r1, r1, r1, r4
 800ddaa:	ee07 1a90 	vmov	s15, r1
 800ddae:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800ddb2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ddb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddba:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800ddbe:	f100 8084 	bmi.w	800deca <getMagStats.constprop.35+0x22e>
 800ddc2:	f108 0801 	add.w	r8, r8, #1
 800ddc6:	fa5f f888 	uxtb.w	r8, r8
 800ddca:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800ddce:	ed92 7a00 	vldr	s14, [r2]
 800ddd2:	edcd 7a00 	vstr	s15, [sp]
 800ddd6:	f9bd 1000 	ldrsh.w	r1, [sp]
 800ddda:	ee07 1a90 	vmov	s15, r1
 800ddde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dde2:	ee77 6ac9 	vsub.f32	s13, s15, s18
 800dde6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ddea:	eeb0 7ae6 	vabs.f32	s14, s13
 800ddee:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800ddf2:	edc2 7a00 	vstr	s15, [r2]
 800ddf6:	ed8d 7a00 	vstr	s14, [sp]
 800ddfa:	f9bd 1000 	ldrsh.w	r1, [sp]
 800ddfe:	ee07 1a10 	vmov	s14, r1
 800de02:	fb01 f401 	mul.w	r4, r1, r1
 800de06:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800de0a:	ee07 4a90 	vmov	s15, r4
 800de0e:	eef4 8ac7 	vcmpe.f32	s17, s14
 800de12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800de16:	ed93 7a00 	vldr	s14, [r3]
 800de1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de1e:	f100 0101 	add.w	r1, r0, #1
 800de22:	ee77 7a87 	vadd.f32	s15, s15, s14
 800de26:	bf48      	it	mi
 800de28:	b2c8      	uxtbmi	r0, r1
 800de2a:	45f0      	cmp	r8, lr
 800de2c:	edc3 7a00 	vstr	s15, [r3]
 800de30:	f4ff af6c 	bcc.w	800dd0c <getMagStats.constprop.35+0x70>
 800de34:	f8cd e000 	str.w	lr, [sp]
 800de38:	ee07 ea10 	vmov	s14, lr
 800de3c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800de40:	ee87 0a87 	vdiv.f32	s0, s15, s14
 800de44:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800de48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de4c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800de50:	d44a      	bmi.n	800dee8 <getMagStats.constprop.35+0x24c>
 800de52:	eddf 7a32 	vldr	s15, [pc, #200]	; 800df1c <getMagStats.constprop.35+0x280>
 800de56:	ee29 8a88 	vmul.f32	s16, s19, s16
 800de5a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800de5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de62:	dc12      	bgt.n	800de8a <getMagStats.constprop.35+0x1ee>
 800de64:	ed9d 7a00 	vldr	s14, [sp]
 800de68:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800de6c:	edc3 7a00 	vstr	s15, [r3]
 800de70:	edd2 7a00 	vldr	s15, [r2]
 800de74:	ee69 9aa7 	vmul.f32	s19, s19, s15
 800de78:	eec9 7a87 	vdiv.f32	s15, s19, s14
 800de7c:	edc2 7a00 	vstr	s15, [r2]
 800de80:	b005      	add	sp, #20
 800de82:	ecbd 8b04 	vpop	{d8-d9}
 800de86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de8a:	eddd 7a00 	vldr	s15, [sp]
 800de8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800de92:	edd3 7a00 	vldr	s15, [r3]
 800de96:	ee87 0a87 	vdiv.f32	s0, s15, s14
 800de9a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800de9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dea2:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800dea6:	d42a      	bmi.n	800defe <getMagStats.constprop.35+0x262>
 800dea8:	ee69 7a88 	vmul.f32	s15, s19, s16
 800deac:	e7de      	b.n	800de6c <getMagStats.constprop.35+0x1d0>
 800deae:	3501      	adds	r5, #1
 800deb0:	fb95 f0fe 	sdiv	r0, r5, lr
 800deb4:	fb0e 5510 	mls	r5, lr, r0, r5
 800deb8:	b228      	sxth	r0, r5
 800deba:	f8cd e000 	str.w	lr, [sp]
 800debe:	9002      	str	r0, [sp, #8]
 800dec0:	e714      	b.n	800dcec <getMagStats.constprop.35+0x50>
 800dec2:	4420      	add	r0, r4
 800dec4:	b200      	sxth	r0, r0
 800dec6:	9002      	str	r0, [sp, #8]
 800dec8:	e710      	b.n	800dcec <getMagStats.constprop.35+0x50>
 800deca:	9303      	str	r3, [sp, #12]
 800decc:	e88d 0005 	stmia.w	sp, {r0, r2}
 800ded0:	f00a fe98 	bl	8018c04 <sqrtf>
 800ded4:	f89a e0b0 	ldrb.w	lr, [sl, #176]	; 0xb0
 800ded8:	9b03      	ldr	r3, [sp, #12]
 800deda:	e89d 0005 	ldmia.w	sp, {r0, r2}
 800dede:	e770      	b.n	800ddc2 <getMagStats.constprop.35+0x126>
 800dee0:	edd3 7a00 	vldr	s15, [r3]
 800dee4:	4670      	mov	r0, lr
 800dee6:	e7a7      	b.n	800de38 <getMagStats.constprop.35+0x19c>
 800dee8:	9303      	str	r3, [sp, #12]
 800deea:	9202      	str	r2, [sp, #8]
 800deec:	9001      	str	r0, [sp, #4]
 800deee:	f00a fe89 	bl	8018c04 <sqrtf>
 800def2:	f89a 30b0 	ldrb.w	r3, [sl, #176]	; 0xb0
 800def6:	9300      	str	r3, [sp, #0]
 800def8:	a801      	add	r0, sp, #4
 800defa:	c80d      	ldmia	r0, {r0, r2, r3}
 800defc:	e7a9      	b.n	800de52 <getMagStats.constprop.35+0x1b6>
 800defe:	e88d 000d 	stmia.w	sp, {r0, r2, r3}
 800df02:	f00a fe7f 	bl	8018c04 <sqrtf>
 800df06:	f89a 30b0 	ldrb.w	r3, [sl, #176]	; 0xb0
 800df0a:	ee07 3a10 	vmov	s14, r3
 800df0e:	e89d 000d 	ldmia.w	sp, {r0, r2, r3}
 800df12:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800df16:	e7c7      	b.n	800dea8 <getMagStats.constprop.35+0x20c>
 800df18:	423c0000 	.word	0x423c0000
 800df1c:	3f59999a 	.word	0x3f59999a
 800df20:	20001670 	.word	0x20001670

0800df24 <iNemo_setOrientation.constprop.51>:
 800df24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df28:	4a70      	ldr	r2, [pc, #448]	; (800e0ec <iNemo_setOrientation.constprop.51+0x1c8>)
 800df2a:	4b71      	ldr	r3, [pc, #452]	; (800e0f0 <iNemo_setOrientation.constprop.51+0x1cc>)
 800df2c:	f892 e000 	ldrb.w	lr, [r2]
 800df30:	f892 9004 	ldrb.w	r9, [r2, #4]
 800df34:	7a17      	ldrb	r7, [r2, #8]
 800df36:	7856      	ldrb	r6, [r2, #1]
 800df38:	7954      	ldrb	r4, [r2, #5]
 800df3a:	7a51      	ldrb	r1, [r2, #9]
 800df3c:	7895      	ldrb	r5, [r2, #2]
 800df3e:	7990      	ldrb	r0, [r2, #6]
 800df40:	7a92      	ldrb	r2, [r2, #10]
 800df42:	f1ae 0c42 	sub.w	ip, lr, #66	; 0x42
 800df46:	f10e 0820 	add.w	r8, lr, #32
 800df4a:	f1bc 0f17 	cmp.w	ip, #23
 800df4e:	bf88      	it	hi
 800df50:	46f0      	movhi	r8, lr
 800df52:	f1a9 0a42 	sub.w	sl, r9, #66	; 0x42
 800df56:	f109 0c20 	add.w	ip, r9, #32
 800df5a:	f1ba 0f17 	cmp.w	sl, #23
 800df5e:	bf88      	it	hi
 800df60:	46cc      	movhi	ip, r9
 800df62:	f107 0e20 	add.w	lr, r7, #32
 800df66:	f1a7 0a42 	sub.w	sl, r7, #66	; 0x42
 800df6a:	f1ba 0f17 	cmp.w	sl, #23
 800df6e:	bf88      	it	hi
 800df70:	46be      	movhi	lr, r7
 800df72:	f106 0920 	add.w	r9, r6, #32
 800df76:	f1a6 0a42 	sub.w	sl, r6, #66	; 0x42
 800df7a:	f1ba 0f17 	cmp.w	sl, #23
 800df7e:	bf98      	it	ls
 800df80:	464e      	movls	r6, r9
 800df82:	f104 0720 	add.w	r7, r4, #32
 800df86:	f1a4 0a42 	sub.w	sl, r4, #66	; 0x42
 800df8a:	f1ba 0f17 	cmp.w	sl, #23
 800df8e:	bf98      	it	ls
 800df90:	463c      	movls	r4, r7
 800df92:	f101 0920 	add.w	r9, r1, #32
 800df96:	f1a1 0a42 	sub.w	sl, r1, #66	; 0x42
 800df9a:	f1ba 0f17 	cmp.w	sl, #23
 800df9e:	bf98      	it	ls
 800dfa0:	4649      	movls	r1, r9
 800dfa2:	f105 0720 	add.w	r7, r5, #32
 800dfa6:	f1a5 0a42 	sub.w	sl, r5, #66	; 0x42
 800dfaa:	f1ba 0f17 	cmp.w	sl, #23
 800dfae:	bf98      	it	ls
 800dfb0:	463d      	movls	r5, r7
 800dfb2:	f100 0920 	add.w	r9, r0, #32
 800dfb6:	f1a0 0a42 	sub.w	sl, r0, #66	; 0x42
 800dfba:	f102 0720 	add.w	r7, r2, #32
 800dfbe:	f1ba 0f17 	cmp.w	sl, #23
 800dfc2:	bf98      	it	ls
 800dfc4:	4648      	movls	r0, r9
 800dfc6:	fa5f f888 	uxtb.w	r8, r8
 800dfca:	f1a2 0942 	sub.w	r9, r2, #66	; 0x42
 800dfce:	f1b9 0f17 	cmp.w	r9, #23
 800dfd2:	bf98      	it	ls
 800dfd4:	463a      	movls	r2, r7
 800dfd6:	f1a8 0864 	sub.w	r8, r8, #100	; 0x64
 800dfda:	2700      	movs	r7, #0
 800dfdc:	fa5f fc8c 	uxtb.w	ip, ip
 800dfe0:	fa5f fe8e 	uxtb.w	lr, lr
 800dfe4:	b2f6      	uxtb	r6, r6
 800dfe6:	b2e4      	uxtb	r4, r4
 800dfe8:	b2c9      	uxtb	r1, r1
 800dfea:	b2ed      	uxtb	r5, r5
 800dfec:	b2c0      	uxtb	r0, r0
 800dfee:	b2d2      	uxtb	r2, r2
 800dff0:	f8c3 73d4 	str.w	r7, [r3, #980]	; 0x3d4
 800dff4:	f883 73d8 	strb.w	r7, [r3, #984]	; 0x3d8
 800dff8:	f8c3 73d0 	str.w	r7, [r3, #976]	; 0x3d0
 800dffc:	f8c3 73dc 	str.w	r7, [r3, #988]	; 0x3dc
 800e000:	f8c3 73e8 	str.w	r7, [r3, #1000]	; 0x3e8
 800e004:	f8c3 73e0 	str.w	r7, [r3, #992]	; 0x3e0
 800e008:	f883 73e4 	strb.w	r7, [r3, #996]	; 0x3e4
 800e00c:	f8c3 73ec 	str.w	r7, [r3, #1004]	; 0x3ec
 800e010:	f883 73f0 	strb.w	r7, [r3, #1008]	; 0x3f0
 800e014:	f1b8 0f13 	cmp.w	r8, #19
 800e018:	d80e      	bhi.n	800e038 <iNemo_setOrientation.constprop.51+0x114>
 800e01a:	e8df f008 	tbb	[pc, r8]
 800e01e:	ad0a      	.short	0xad0a
 800e020:	0d0d0d0d 	.word	0x0d0d0d0d
 800e024:	0d0d0d0d 	.word	0x0d0d0d0d
 800e028:	0d0d0db1 	.word	0x0d0d0db1
 800e02c:	b90db50d 	.word	0xb90db50d
 800e030:	bd0d      	.short	0xbd0d
 800e032:	27ff      	movs	r7, #255	; 0xff
 800e034:	f883 73d6 	strb.w	r7, [r3, #982]	; 0x3d6
 800e038:	3e64      	subs	r6, #100	; 0x64
 800e03a:	2e13      	cmp	r6, #19
 800e03c:	d80e      	bhi.n	800e05c <iNemo_setOrientation.constprop.51+0x138>
 800e03e:	e8df f006 	tbb	[pc, r6]
 800e042:	af0a      	.short	0xaf0a
 800e044:	0d0d0d0d 	.word	0x0d0d0d0d
 800e048:	0d0d0d0d 	.word	0x0d0d0d0d
 800e04c:	0d0d0db3 	.word	0x0d0d0db3
 800e050:	bb0db70d 	.word	0xbb0db70d
 800e054:	bf0d      	.short	0xbf0d
 800e056:	26ff      	movs	r6, #255	; 0xff
 800e058:	f883 63d7 	strb.w	r6, [r3, #983]	; 0x3d7
 800e05c:	3d64      	subs	r5, #100	; 0x64
 800e05e:	2d13      	cmp	r5, #19
 800e060:	d80e      	bhi.n	800e080 <iNemo_setOrientation.constprop.51+0x15c>
 800e062:	e8df f005 	tbb	[pc, r5]
 800e066:	b10a      	.short	0xb10a
 800e068:	0d0d0d0d 	.word	0x0d0d0d0d
 800e06c:	0d0d0d0d 	.word	0x0d0d0d0d
 800e070:	0d0d0db5 	.word	0x0d0d0db5
 800e074:	bd0db90d 	.word	0xbd0db90d
 800e078:	c10d      	.short	0xc10d
 800e07a:	25ff      	movs	r5, #255	; 0xff
 800e07c:	f883 53d8 	strb.w	r5, [r3, #984]	; 0x3d8
 800e080:	f1ac 0c64 	sub.w	ip, ip, #100	; 0x64
 800e084:	f1bc 0f13 	cmp.w	ip, #19
 800e088:	d80e      	bhi.n	800e0a8 <iNemo_setOrientation.constprop.51+0x184>
 800e08a:	e8df f00c 	tbb	[pc, ip]
 800e08e:	b10a      	.short	0xb10a
 800e090:	0d0d0d0d 	.word	0x0d0d0d0d
 800e094:	0d0d0d0d 	.word	0x0d0d0d0d
 800e098:	0d0d0db5 	.word	0x0d0d0db5
 800e09c:	bd0db90d 	.word	0xbd0db90d
 800e0a0:	c10d      	.short	0xc10d
 800e0a2:	25ff      	movs	r5, #255	; 0xff
 800e0a4:	f883 53ee 	strb.w	r5, [r3, #1006]	; 0x3ee
 800e0a8:	3c64      	subs	r4, #100	; 0x64
 800e0aa:	2c13      	cmp	r4, #19
 800e0ac:	d80e      	bhi.n	800e0cc <iNemo_setOrientation.constprop.51+0x1a8>
 800e0ae:	e8df f004 	tbb	[pc, r4]
 800e0b2:	b30a      	.short	0xb30a
 800e0b4:	0d0d0d0d 	.word	0x0d0d0d0d
 800e0b8:	0d0d0d0d 	.word	0x0d0d0d0d
 800e0bc:	0d0d0db7 	.word	0x0d0d0db7
 800e0c0:	bf0dbb0d 	.word	0xbf0dbb0d
 800e0c4:	c30d      	.short	0xc30d
 800e0c6:	24ff      	movs	r4, #255	; 0xff
 800e0c8:	f883 43ef 	strb.w	r4, [r3, #1007]	; 0x3ef
 800e0cc:	3864      	subs	r0, #100	; 0x64
 800e0ce:	2813      	cmp	r0, #19
 800e0d0:	d813      	bhi.n	800e0fa <iNemo_setOrientation.constprop.51+0x1d6>
 800e0d2:	e8df f000 	tbb	[pc, r0]
 800e0d6:	b50f      	.short	0xb50f
 800e0d8:	12121212 	.word	0x12121212
 800e0dc:	12121212 	.word	0x12121212
 800e0e0:	121212b9 	.word	0x121212b9
 800e0e4:	c112bd12 	.word	0xc112bd12
 800e0e8:	c512      	.short	0xc512
 800e0ea:	bf00      	nop
 800e0ec:	20000000 	.word	0x20000000
 800e0f0:	20001670 	.word	0x20001670
 800e0f4:	20ff      	movs	r0, #255	; 0xff
 800e0f6:	f883 03f0 	strb.w	r0, [r3, #1008]	; 0x3f0
 800e0fa:	f1ae 0e64 	sub.w	lr, lr, #100	; 0x64
 800e0fe:	f1be 0f13 	cmp.w	lr, #19
 800e102:	d80e      	bhi.n	800e122 <iNemo_setOrientation.constprop.51+0x1fe>
 800e104:	e8df f00e 	tbb	[pc, lr]
 800e108:	0d0db00a 	.word	0x0d0db00a
 800e10c:	0d0d0d0d 	.word	0x0d0d0d0d
 800e110:	0db40d0d 	.word	0x0db40d0d
 800e114:	b80d0d0d 	.word	0xb80d0d0d
 800e118:	c00dbc0d 	.word	0xc00dbc0d
 800e11c:	20ff      	movs	r0, #255	; 0xff
 800e11e:	f883 03e2 	strb.w	r0, [r3, #994]	; 0x3e2
 800e122:	3964      	subs	r1, #100	; 0x64
 800e124:	2913      	cmp	r1, #19
 800e126:	d80e      	bhi.n	800e146 <iNemo_setOrientation.constprop.51+0x222>
 800e128:	e8df f001 	tbb	[pc, r1]
 800e12c:	0d0db20a 	.word	0x0d0db20a
 800e130:	0d0d0d0d 	.word	0x0d0d0d0d
 800e134:	0db60d0d 	.word	0x0db60d0d
 800e138:	ba0d0d0d 	.word	0xba0d0d0d
 800e13c:	c20dbe0d 	.word	0xc20dbe0d
 800e140:	21ff      	movs	r1, #255	; 0xff
 800e142:	f883 13e3 	strb.w	r1, [r3, #995]	; 0x3e3
 800e146:	3a64      	subs	r2, #100	; 0x64
 800e148:	2a13      	cmp	r2, #19
 800e14a:	d80e      	bhi.n	800e16a <iNemo_setOrientation.constprop.51+0x246>
 800e14c:	e8df f002 	tbb	[pc, r2]
 800e150:	0d0db40a 	.word	0x0d0db40a
 800e154:	0d0d0d0d 	.word	0x0d0d0d0d
 800e158:	0db90d0d 	.word	0x0db90d0d
 800e15c:	be0d0d0d 	.word	0xbe0d0d0d
 800e160:	0f0dc30d 	.word	0x0f0dc30d
 800e164:	22ff      	movs	r2, #255	; 0xff
 800e166:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
 800e16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e16e:	22ff      	movs	r2, #255	; 0xff
 800e170:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
 800e174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e178:	2701      	movs	r7, #1
 800e17a:	f883 73d0 	strb.w	r7, [r3, #976]	; 0x3d0
 800e17e:	e75b      	b.n	800e038 <iNemo_setOrientation.constprop.51+0x114>
 800e180:	2701      	movs	r7, #1
 800e182:	f883 73d3 	strb.w	r7, [r3, #979]	; 0x3d3
 800e186:	e757      	b.n	800e038 <iNemo_setOrientation.constprop.51+0x114>
 800e188:	27ff      	movs	r7, #255	; 0xff
 800e18a:	f883 73d3 	strb.w	r7, [r3, #979]	; 0x3d3
 800e18e:	e753      	b.n	800e038 <iNemo_setOrientation.constprop.51+0x114>
 800e190:	2701      	movs	r7, #1
 800e192:	f883 73d6 	strb.w	r7, [r3, #982]	; 0x3d6
 800e196:	e74f      	b.n	800e038 <iNemo_setOrientation.constprop.51+0x114>
 800e198:	27ff      	movs	r7, #255	; 0xff
 800e19a:	f883 73d0 	strb.w	r7, [r3, #976]	; 0x3d0
 800e19e:	e74b      	b.n	800e038 <iNemo_setOrientation.constprop.51+0x114>
 800e1a0:	2601      	movs	r6, #1
 800e1a2:	f883 63d1 	strb.w	r6, [r3, #977]	; 0x3d1
 800e1a6:	e759      	b.n	800e05c <iNemo_setOrientation.constprop.51+0x138>
 800e1a8:	2601      	movs	r6, #1
 800e1aa:	f883 63d4 	strb.w	r6, [r3, #980]	; 0x3d4
 800e1ae:	e755      	b.n	800e05c <iNemo_setOrientation.constprop.51+0x138>
 800e1b0:	26ff      	movs	r6, #255	; 0xff
 800e1b2:	f883 63d4 	strb.w	r6, [r3, #980]	; 0x3d4
 800e1b6:	e751      	b.n	800e05c <iNemo_setOrientation.constprop.51+0x138>
 800e1b8:	2601      	movs	r6, #1
 800e1ba:	f883 63d7 	strb.w	r6, [r3, #983]	; 0x3d7
 800e1be:	e74d      	b.n	800e05c <iNemo_setOrientation.constprop.51+0x138>
 800e1c0:	26ff      	movs	r6, #255	; 0xff
 800e1c2:	f883 63d1 	strb.w	r6, [r3, #977]	; 0x3d1
 800e1c6:	e749      	b.n	800e05c <iNemo_setOrientation.constprop.51+0x138>
 800e1c8:	2501      	movs	r5, #1
 800e1ca:	f883 53d2 	strb.w	r5, [r3, #978]	; 0x3d2
 800e1ce:	e757      	b.n	800e080 <iNemo_setOrientation.constprop.51+0x15c>
 800e1d0:	2501      	movs	r5, #1
 800e1d2:	f883 53d5 	strb.w	r5, [r3, #981]	; 0x3d5
 800e1d6:	e753      	b.n	800e080 <iNemo_setOrientation.constprop.51+0x15c>
 800e1d8:	25ff      	movs	r5, #255	; 0xff
 800e1da:	f883 53d5 	strb.w	r5, [r3, #981]	; 0x3d5
 800e1de:	e74f      	b.n	800e080 <iNemo_setOrientation.constprop.51+0x15c>
 800e1e0:	2501      	movs	r5, #1
 800e1e2:	f883 53d8 	strb.w	r5, [r3, #984]	; 0x3d8
 800e1e6:	e74b      	b.n	800e080 <iNemo_setOrientation.constprop.51+0x15c>
 800e1e8:	25ff      	movs	r5, #255	; 0xff
 800e1ea:	f883 53d2 	strb.w	r5, [r3, #978]	; 0x3d2
 800e1ee:	e747      	b.n	800e080 <iNemo_setOrientation.constprop.51+0x15c>
 800e1f0:	2501      	movs	r5, #1
 800e1f2:	f883 53e8 	strb.w	r5, [r3, #1000]	; 0x3e8
 800e1f6:	e757      	b.n	800e0a8 <iNemo_setOrientation.constprop.51+0x184>
 800e1f8:	2501      	movs	r5, #1
 800e1fa:	f883 53eb 	strb.w	r5, [r3, #1003]	; 0x3eb
 800e1fe:	e753      	b.n	800e0a8 <iNemo_setOrientation.constprop.51+0x184>
 800e200:	25ff      	movs	r5, #255	; 0xff
 800e202:	f883 53eb 	strb.w	r5, [r3, #1003]	; 0x3eb
 800e206:	e74f      	b.n	800e0a8 <iNemo_setOrientation.constprop.51+0x184>
 800e208:	2501      	movs	r5, #1
 800e20a:	f883 53ee 	strb.w	r5, [r3, #1006]	; 0x3ee
 800e20e:	e74b      	b.n	800e0a8 <iNemo_setOrientation.constprop.51+0x184>
 800e210:	25ff      	movs	r5, #255	; 0xff
 800e212:	f883 53e8 	strb.w	r5, [r3, #1000]	; 0x3e8
 800e216:	e747      	b.n	800e0a8 <iNemo_setOrientation.constprop.51+0x184>
 800e218:	2401      	movs	r4, #1
 800e21a:	f883 43e9 	strb.w	r4, [r3, #1001]	; 0x3e9
 800e21e:	e755      	b.n	800e0cc <iNemo_setOrientation.constprop.51+0x1a8>
 800e220:	2401      	movs	r4, #1
 800e222:	f883 43ec 	strb.w	r4, [r3, #1004]	; 0x3ec
 800e226:	e751      	b.n	800e0cc <iNemo_setOrientation.constprop.51+0x1a8>
 800e228:	24ff      	movs	r4, #255	; 0xff
 800e22a:	f883 43ec 	strb.w	r4, [r3, #1004]	; 0x3ec
 800e22e:	e74d      	b.n	800e0cc <iNemo_setOrientation.constprop.51+0x1a8>
 800e230:	2401      	movs	r4, #1
 800e232:	f883 43ef 	strb.w	r4, [r3, #1007]	; 0x3ef
 800e236:	e749      	b.n	800e0cc <iNemo_setOrientation.constprop.51+0x1a8>
 800e238:	24ff      	movs	r4, #255	; 0xff
 800e23a:	f883 43e9 	strb.w	r4, [r3, #1001]	; 0x3e9
 800e23e:	e745      	b.n	800e0cc <iNemo_setOrientation.constprop.51+0x1a8>
 800e240:	2001      	movs	r0, #1
 800e242:	f883 03ea 	strb.w	r0, [r3, #1002]	; 0x3ea
 800e246:	e758      	b.n	800e0fa <iNemo_setOrientation.constprop.51+0x1d6>
 800e248:	2001      	movs	r0, #1
 800e24a:	f883 03ed 	strb.w	r0, [r3, #1005]	; 0x3ed
 800e24e:	e754      	b.n	800e0fa <iNemo_setOrientation.constprop.51+0x1d6>
 800e250:	20ff      	movs	r0, #255	; 0xff
 800e252:	f883 03ed 	strb.w	r0, [r3, #1005]	; 0x3ed
 800e256:	e750      	b.n	800e0fa <iNemo_setOrientation.constprop.51+0x1d6>
 800e258:	2001      	movs	r0, #1
 800e25a:	f883 03f0 	strb.w	r0, [r3, #1008]	; 0x3f0
 800e25e:	e74c      	b.n	800e0fa <iNemo_setOrientation.constprop.51+0x1d6>
 800e260:	20ff      	movs	r0, #255	; 0xff
 800e262:	f883 03ea 	strb.w	r0, [r3, #1002]	; 0x3ea
 800e266:	e748      	b.n	800e0fa <iNemo_setOrientation.constprop.51+0x1d6>
 800e268:	2001      	movs	r0, #1
 800e26a:	f883 03dc 	strb.w	r0, [r3, #988]	; 0x3dc
 800e26e:	e758      	b.n	800e122 <iNemo_setOrientation.constprop.51+0x1fe>
 800e270:	2001      	movs	r0, #1
 800e272:	f883 03df 	strb.w	r0, [r3, #991]	; 0x3df
 800e276:	e754      	b.n	800e122 <iNemo_setOrientation.constprop.51+0x1fe>
 800e278:	20ff      	movs	r0, #255	; 0xff
 800e27a:	f883 03df 	strb.w	r0, [r3, #991]	; 0x3df
 800e27e:	e750      	b.n	800e122 <iNemo_setOrientation.constprop.51+0x1fe>
 800e280:	2001      	movs	r0, #1
 800e282:	f883 03e2 	strb.w	r0, [r3, #994]	; 0x3e2
 800e286:	e74c      	b.n	800e122 <iNemo_setOrientation.constprop.51+0x1fe>
 800e288:	20ff      	movs	r0, #255	; 0xff
 800e28a:	f883 03dc 	strb.w	r0, [r3, #988]	; 0x3dc
 800e28e:	e748      	b.n	800e122 <iNemo_setOrientation.constprop.51+0x1fe>
 800e290:	2101      	movs	r1, #1
 800e292:	f883 13dd 	strb.w	r1, [r3, #989]	; 0x3dd
 800e296:	e756      	b.n	800e146 <iNemo_setOrientation.constprop.51+0x222>
 800e298:	2101      	movs	r1, #1
 800e29a:	f883 13e0 	strb.w	r1, [r3, #992]	; 0x3e0
 800e29e:	e752      	b.n	800e146 <iNemo_setOrientation.constprop.51+0x222>
 800e2a0:	21ff      	movs	r1, #255	; 0xff
 800e2a2:	f883 13e0 	strb.w	r1, [r3, #992]	; 0x3e0
 800e2a6:	e74e      	b.n	800e146 <iNemo_setOrientation.constprop.51+0x222>
 800e2a8:	2101      	movs	r1, #1
 800e2aa:	f883 13e3 	strb.w	r1, [r3, #995]	; 0x3e3
 800e2ae:	e74a      	b.n	800e146 <iNemo_setOrientation.constprop.51+0x222>
 800e2b0:	21ff      	movs	r1, #255	; 0xff
 800e2b2:	f883 13dd 	strb.w	r1, [r3, #989]	; 0x3dd
 800e2b6:	e746      	b.n	800e146 <iNemo_setOrientation.constprop.51+0x222>
 800e2b8:	2201      	movs	r2, #1
 800e2ba:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
 800e2be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2c2:	2201      	movs	r2, #1
 800e2c4:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
 800e2c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2cc:	22ff      	movs	r2, #255	; 0xff
 800e2ce:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
 800e2d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2d6:	2201      	movs	r2, #1
 800e2d8:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
 800e2dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e2e0 <iNemo_setOrientation_6X.constprop.52>:
 800e2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2e4:	4a70      	ldr	r2, [pc, #448]	; (800e4a8 <iNemo_setOrientation_6X.constprop.52+0x1c8>)
 800e2e6:	4b71      	ldr	r3, [pc, #452]	; (800e4ac <iNemo_setOrientation_6X.constprop.52+0x1cc>)
 800e2e8:	f892 e000 	ldrb.w	lr, [r2]
 800e2ec:	f892 9004 	ldrb.w	r9, [r2, #4]
 800e2f0:	7a17      	ldrb	r7, [r2, #8]
 800e2f2:	7856      	ldrb	r6, [r2, #1]
 800e2f4:	7954      	ldrb	r4, [r2, #5]
 800e2f6:	7a51      	ldrb	r1, [r2, #9]
 800e2f8:	7895      	ldrb	r5, [r2, #2]
 800e2fa:	7990      	ldrb	r0, [r2, #6]
 800e2fc:	7a92      	ldrb	r2, [r2, #10]
 800e2fe:	f1ae 0c42 	sub.w	ip, lr, #66	; 0x42
 800e302:	f10e 0820 	add.w	r8, lr, #32
 800e306:	f1bc 0f17 	cmp.w	ip, #23
 800e30a:	bf88      	it	hi
 800e30c:	46f0      	movhi	r8, lr
 800e30e:	f1a9 0a42 	sub.w	sl, r9, #66	; 0x42
 800e312:	f109 0c20 	add.w	ip, r9, #32
 800e316:	f1ba 0f17 	cmp.w	sl, #23
 800e31a:	bf88      	it	hi
 800e31c:	46cc      	movhi	ip, r9
 800e31e:	f107 0e20 	add.w	lr, r7, #32
 800e322:	f1a7 0a42 	sub.w	sl, r7, #66	; 0x42
 800e326:	f1ba 0f17 	cmp.w	sl, #23
 800e32a:	bf88      	it	hi
 800e32c:	46be      	movhi	lr, r7
 800e32e:	f106 0920 	add.w	r9, r6, #32
 800e332:	f1a6 0a42 	sub.w	sl, r6, #66	; 0x42
 800e336:	f1ba 0f17 	cmp.w	sl, #23
 800e33a:	bf98      	it	ls
 800e33c:	464e      	movls	r6, r9
 800e33e:	f104 0720 	add.w	r7, r4, #32
 800e342:	f1a4 0a42 	sub.w	sl, r4, #66	; 0x42
 800e346:	f1ba 0f17 	cmp.w	sl, #23
 800e34a:	bf98      	it	ls
 800e34c:	463c      	movls	r4, r7
 800e34e:	f101 0920 	add.w	r9, r1, #32
 800e352:	f1a1 0a42 	sub.w	sl, r1, #66	; 0x42
 800e356:	f1ba 0f17 	cmp.w	sl, #23
 800e35a:	bf98      	it	ls
 800e35c:	4649      	movls	r1, r9
 800e35e:	f105 0720 	add.w	r7, r5, #32
 800e362:	f1a5 0a42 	sub.w	sl, r5, #66	; 0x42
 800e366:	f1ba 0f17 	cmp.w	sl, #23
 800e36a:	bf98      	it	ls
 800e36c:	463d      	movls	r5, r7
 800e36e:	f100 0920 	add.w	r9, r0, #32
 800e372:	f1a0 0a42 	sub.w	sl, r0, #66	; 0x42
 800e376:	f102 0720 	add.w	r7, r2, #32
 800e37a:	f1ba 0f17 	cmp.w	sl, #23
 800e37e:	bf98      	it	ls
 800e380:	4648      	movls	r0, r9
 800e382:	fa5f f888 	uxtb.w	r8, r8
 800e386:	f1a2 0942 	sub.w	r9, r2, #66	; 0x42
 800e38a:	f1b9 0f17 	cmp.w	r9, #23
 800e38e:	bf98      	it	ls
 800e390:	463a      	movls	r2, r7
 800e392:	f1a8 0864 	sub.w	r8, r8, #100	; 0x64
 800e396:	2700      	movs	r7, #0
 800e398:	fa5f fc8c 	uxtb.w	ip, ip
 800e39c:	fa5f fe8e 	uxtb.w	lr, lr
 800e3a0:	b2f6      	uxtb	r6, r6
 800e3a2:	b2e4      	uxtb	r4, r4
 800e3a4:	b2c9      	uxtb	r1, r1
 800e3a6:	b2ed      	uxtb	r5, r5
 800e3a8:	b2c0      	uxtb	r0, r0
 800e3aa:	b2d2      	uxtb	r2, r2
 800e3ac:	f8c3 73f8 	str.w	r7, [r3, #1016]	; 0x3f8
 800e3b0:	f883 73fc 	strb.w	r7, [r3, #1020]	; 0x3fc
 800e3b4:	f8c3 73f4 	str.w	r7, [r3, #1012]	; 0x3f4
 800e3b8:	f8c3 7400 	str.w	r7, [r3, #1024]	; 0x400
 800e3bc:	f8c3 740c 	str.w	r7, [r3, #1036]	; 0x40c
 800e3c0:	f8c3 7404 	str.w	r7, [r3, #1028]	; 0x404
 800e3c4:	f883 7408 	strb.w	r7, [r3, #1032]	; 0x408
 800e3c8:	f8c3 7410 	str.w	r7, [r3, #1040]	; 0x410
 800e3cc:	f883 7414 	strb.w	r7, [r3, #1044]	; 0x414
 800e3d0:	f1b8 0f13 	cmp.w	r8, #19
 800e3d4:	d80e      	bhi.n	800e3f4 <iNemo_setOrientation_6X.constprop.52+0x114>
 800e3d6:	e8df f008 	tbb	[pc, r8]
 800e3da:	ad0a      	.short	0xad0a
 800e3dc:	0d0d0d0d 	.word	0x0d0d0d0d
 800e3e0:	0d0d0d0d 	.word	0x0d0d0d0d
 800e3e4:	0d0d0db1 	.word	0x0d0d0db1
 800e3e8:	b90db50d 	.word	0xb90db50d
 800e3ec:	bd0d      	.short	0xbd0d
 800e3ee:	27ff      	movs	r7, #255	; 0xff
 800e3f0:	f883 73fa 	strb.w	r7, [r3, #1018]	; 0x3fa
 800e3f4:	3e64      	subs	r6, #100	; 0x64
 800e3f6:	2e13      	cmp	r6, #19
 800e3f8:	d80e      	bhi.n	800e418 <iNemo_setOrientation_6X.constprop.52+0x138>
 800e3fa:	e8df f006 	tbb	[pc, r6]
 800e3fe:	af0a      	.short	0xaf0a
 800e400:	0d0d0d0d 	.word	0x0d0d0d0d
 800e404:	0d0d0d0d 	.word	0x0d0d0d0d
 800e408:	0d0d0db3 	.word	0x0d0d0db3
 800e40c:	bb0db70d 	.word	0xbb0db70d
 800e410:	bf0d      	.short	0xbf0d
 800e412:	26ff      	movs	r6, #255	; 0xff
 800e414:	f883 63fb 	strb.w	r6, [r3, #1019]	; 0x3fb
 800e418:	3d64      	subs	r5, #100	; 0x64
 800e41a:	2d13      	cmp	r5, #19
 800e41c:	d80e      	bhi.n	800e43c <iNemo_setOrientation_6X.constprop.52+0x15c>
 800e41e:	e8df f005 	tbb	[pc, r5]
 800e422:	b10a      	.short	0xb10a
 800e424:	0d0d0d0d 	.word	0x0d0d0d0d
 800e428:	0d0d0d0d 	.word	0x0d0d0d0d
 800e42c:	0d0d0db5 	.word	0x0d0d0db5
 800e430:	bd0db90d 	.word	0xbd0db90d
 800e434:	c10d      	.short	0xc10d
 800e436:	25ff      	movs	r5, #255	; 0xff
 800e438:	f883 53fc 	strb.w	r5, [r3, #1020]	; 0x3fc
 800e43c:	f1ac 0c64 	sub.w	ip, ip, #100	; 0x64
 800e440:	f1bc 0f13 	cmp.w	ip, #19
 800e444:	d80e      	bhi.n	800e464 <iNemo_setOrientation_6X.constprop.52+0x184>
 800e446:	e8df f00c 	tbb	[pc, ip]
 800e44a:	b10a      	.short	0xb10a
 800e44c:	0d0d0d0d 	.word	0x0d0d0d0d
 800e450:	0d0d0d0d 	.word	0x0d0d0d0d
 800e454:	0d0d0db5 	.word	0x0d0d0db5
 800e458:	bd0db90d 	.word	0xbd0db90d
 800e45c:	c10d      	.short	0xc10d
 800e45e:	25ff      	movs	r5, #255	; 0xff
 800e460:	f883 5412 	strb.w	r5, [r3, #1042]	; 0x412
 800e464:	3c64      	subs	r4, #100	; 0x64
 800e466:	2c13      	cmp	r4, #19
 800e468:	d80e      	bhi.n	800e488 <iNemo_setOrientation_6X.constprop.52+0x1a8>
 800e46a:	e8df f004 	tbb	[pc, r4]
 800e46e:	b30a      	.short	0xb30a
 800e470:	0d0d0d0d 	.word	0x0d0d0d0d
 800e474:	0d0d0d0d 	.word	0x0d0d0d0d
 800e478:	0d0d0db7 	.word	0x0d0d0db7
 800e47c:	bf0dbb0d 	.word	0xbf0dbb0d
 800e480:	c30d      	.short	0xc30d
 800e482:	24ff      	movs	r4, #255	; 0xff
 800e484:	f883 4413 	strb.w	r4, [r3, #1043]	; 0x413
 800e488:	3864      	subs	r0, #100	; 0x64
 800e48a:	2813      	cmp	r0, #19
 800e48c:	d813      	bhi.n	800e4b6 <iNemo_setOrientation_6X.constprop.52+0x1d6>
 800e48e:	e8df f000 	tbb	[pc, r0]
 800e492:	b50f      	.short	0xb50f
 800e494:	12121212 	.word	0x12121212
 800e498:	12121212 	.word	0x12121212
 800e49c:	121212b9 	.word	0x121212b9
 800e4a0:	c112bd12 	.word	0xc112bd12
 800e4a4:	c512      	.short	0xc512
 800e4a6:	bf00      	nop
 800e4a8:	20000000 	.word	0x20000000
 800e4ac:	20001670 	.word	0x20001670
 800e4b0:	20ff      	movs	r0, #255	; 0xff
 800e4b2:	f883 0414 	strb.w	r0, [r3, #1044]	; 0x414
 800e4b6:	f1ae 0e64 	sub.w	lr, lr, #100	; 0x64
 800e4ba:	f1be 0f13 	cmp.w	lr, #19
 800e4be:	d80e      	bhi.n	800e4de <iNemo_setOrientation_6X.constprop.52+0x1fe>
 800e4c0:	e8df f00e 	tbb	[pc, lr]
 800e4c4:	0d0db00a 	.word	0x0d0db00a
 800e4c8:	0d0d0d0d 	.word	0x0d0d0d0d
 800e4cc:	0db40d0d 	.word	0x0db40d0d
 800e4d0:	b80d0d0d 	.word	0xb80d0d0d
 800e4d4:	c00dbc0d 	.word	0xc00dbc0d
 800e4d8:	20ff      	movs	r0, #255	; 0xff
 800e4da:	f883 0406 	strb.w	r0, [r3, #1030]	; 0x406
 800e4de:	3964      	subs	r1, #100	; 0x64
 800e4e0:	2913      	cmp	r1, #19
 800e4e2:	d80e      	bhi.n	800e502 <iNemo_setOrientation_6X.constprop.52+0x222>
 800e4e4:	e8df f001 	tbb	[pc, r1]
 800e4e8:	0d0db20a 	.word	0x0d0db20a
 800e4ec:	0d0d0d0d 	.word	0x0d0d0d0d
 800e4f0:	0db60d0d 	.word	0x0db60d0d
 800e4f4:	ba0d0d0d 	.word	0xba0d0d0d
 800e4f8:	c20dbe0d 	.word	0xc20dbe0d
 800e4fc:	21ff      	movs	r1, #255	; 0xff
 800e4fe:	f883 1407 	strb.w	r1, [r3, #1031]	; 0x407
 800e502:	3a64      	subs	r2, #100	; 0x64
 800e504:	2a13      	cmp	r2, #19
 800e506:	d80e      	bhi.n	800e526 <iNemo_setOrientation_6X.constprop.52+0x246>
 800e508:	e8df f002 	tbb	[pc, r2]
 800e50c:	0d0db40a 	.word	0x0d0db40a
 800e510:	0d0d0d0d 	.word	0x0d0d0d0d
 800e514:	0db90d0d 	.word	0x0db90d0d
 800e518:	be0d0d0d 	.word	0xbe0d0d0d
 800e51c:	0f0dc30d 	.word	0x0f0dc30d
 800e520:	22ff      	movs	r2, #255	; 0xff
 800e522:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
 800e526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e52a:	22ff      	movs	r2, #255	; 0xff
 800e52c:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
 800e530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e534:	2701      	movs	r7, #1
 800e536:	f883 73f4 	strb.w	r7, [r3, #1012]	; 0x3f4
 800e53a:	e75b      	b.n	800e3f4 <iNemo_setOrientation_6X.constprop.52+0x114>
 800e53c:	2701      	movs	r7, #1
 800e53e:	f883 73f7 	strb.w	r7, [r3, #1015]	; 0x3f7
 800e542:	e757      	b.n	800e3f4 <iNemo_setOrientation_6X.constprop.52+0x114>
 800e544:	27ff      	movs	r7, #255	; 0xff
 800e546:	f883 73f7 	strb.w	r7, [r3, #1015]	; 0x3f7
 800e54a:	e753      	b.n	800e3f4 <iNemo_setOrientation_6X.constprop.52+0x114>
 800e54c:	2701      	movs	r7, #1
 800e54e:	f883 73fa 	strb.w	r7, [r3, #1018]	; 0x3fa
 800e552:	e74f      	b.n	800e3f4 <iNemo_setOrientation_6X.constprop.52+0x114>
 800e554:	27ff      	movs	r7, #255	; 0xff
 800e556:	f883 73f4 	strb.w	r7, [r3, #1012]	; 0x3f4
 800e55a:	e74b      	b.n	800e3f4 <iNemo_setOrientation_6X.constprop.52+0x114>
 800e55c:	2601      	movs	r6, #1
 800e55e:	f883 63f5 	strb.w	r6, [r3, #1013]	; 0x3f5
 800e562:	e759      	b.n	800e418 <iNemo_setOrientation_6X.constprop.52+0x138>
 800e564:	2601      	movs	r6, #1
 800e566:	f883 63f8 	strb.w	r6, [r3, #1016]	; 0x3f8
 800e56a:	e755      	b.n	800e418 <iNemo_setOrientation_6X.constprop.52+0x138>
 800e56c:	26ff      	movs	r6, #255	; 0xff
 800e56e:	f883 63f8 	strb.w	r6, [r3, #1016]	; 0x3f8
 800e572:	e751      	b.n	800e418 <iNemo_setOrientation_6X.constprop.52+0x138>
 800e574:	2601      	movs	r6, #1
 800e576:	f883 63fb 	strb.w	r6, [r3, #1019]	; 0x3fb
 800e57a:	e74d      	b.n	800e418 <iNemo_setOrientation_6X.constprop.52+0x138>
 800e57c:	26ff      	movs	r6, #255	; 0xff
 800e57e:	f883 63f5 	strb.w	r6, [r3, #1013]	; 0x3f5
 800e582:	e749      	b.n	800e418 <iNemo_setOrientation_6X.constprop.52+0x138>
 800e584:	2501      	movs	r5, #1
 800e586:	f883 53f6 	strb.w	r5, [r3, #1014]	; 0x3f6
 800e58a:	e757      	b.n	800e43c <iNemo_setOrientation_6X.constprop.52+0x15c>
 800e58c:	2501      	movs	r5, #1
 800e58e:	f883 53f9 	strb.w	r5, [r3, #1017]	; 0x3f9
 800e592:	e753      	b.n	800e43c <iNemo_setOrientation_6X.constprop.52+0x15c>
 800e594:	25ff      	movs	r5, #255	; 0xff
 800e596:	f883 53f9 	strb.w	r5, [r3, #1017]	; 0x3f9
 800e59a:	e74f      	b.n	800e43c <iNemo_setOrientation_6X.constprop.52+0x15c>
 800e59c:	2501      	movs	r5, #1
 800e59e:	f883 53fc 	strb.w	r5, [r3, #1020]	; 0x3fc
 800e5a2:	e74b      	b.n	800e43c <iNemo_setOrientation_6X.constprop.52+0x15c>
 800e5a4:	25ff      	movs	r5, #255	; 0xff
 800e5a6:	f883 53f6 	strb.w	r5, [r3, #1014]	; 0x3f6
 800e5aa:	e747      	b.n	800e43c <iNemo_setOrientation_6X.constprop.52+0x15c>
 800e5ac:	2501      	movs	r5, #1
 800e5ae:	f883 540c 	strb.w	r5, [r3, #1036]	; 0x40c
 800e5b2:	e757      	b.n	800e464 <iNemo_setOrientation_6X.constprop.52+0x184>
 800e5b4:	2501      	movs	r5, #1
 800e5b6:	f883 540f 	strb.w	r5, [r3, #1039]	; 0x40f
 800e5ba:	e753      	b.n	800e464 <iNemo_setOrientation_6X.constprop.52+0x184>
 800e5bc:	25ff      	movs	r5, #255	; 0xff
 800e5be:	f883 540f 	strb.w	r5, [r3, #1039]	; 0x40f
 800e5c2:	e74f      	b.n	800e464 <iNemo_setOrientation_6X.constprop.52+0x184>
 800e5c4:	2501      	movs	r5, #1
 800e5c6:	f883 5412 	strb.w	r5, [r3, #1042]	; 0x412
 800e5ca:	e74b      	b.n	800e464 <iNemo_setOrientation_6X.constprop.52+0x184>
 800e5cc:	25ff      	movs	r5, #255	; 0xff
 800e5ce:	f883 540c 	strb.w	r5, [r3, #1036]	; 0x40c
 800e5d2:	e747      	b.n	800e464 <iNemo_setOrientation_6X.constprop.52+0x184>
 800e5d4:	2401      	movs	r4, #1
 800e5d6:	f883 440d 	strb.w	r4, [r3, #1037]	; 0x40d
 800e5da:	e755      	b.n	800e488 <iNemo_setOrientation_6X.constprop.52+0x1a8>
 800e5dc:	2401      	movs	r4, #1
 800e5de:	f883 4410 	strb.w	r4, [r3, #1040]	; 0x410
 800e5e2:	e751      	b.n	800e488 <iNemo_setOrientation_6X.constprop.52+0x1a8>
 800e5e4:	24ff      	movs	r4, #255	; 0xff
 800e5e6:	f883 4410 	strb.w	r4, [r3, #1040]	; 0x410
 800e5ea:	e74d      	b.n	800e488 <iNemo_setOrientation_6X.constprop.52+0x1a8>
 800e5ec:	2401      	movs	r4, #1
 800e5ee:	f883 4413 	strb.w	r4, [r3, #1043]	; 0x413
 800e5f2:	e749      	b.n	800e488 <iNemo_setOrientation_6X.constprop.52+0x1a8>
 800e5f4:	24ff      	movs	r4, #255	; 0xff
 800e5f6:	f883 440d 	strb.w	r4, [r3, #1037]	; 0x40d
 800e5fa:	e745      	b.n	800e488 <iNemo_setOrientation_6X.constprop.52+0x1a8>
 800e5fc:	2001      	movs	r0, #1
 800e5fe:	f883 040e 	strb.w	r0, [r3, #1038]	; 0x40e
 800e602:	e758      	b.n	800e4b6 <iNemo_setOrientation_6X.constprop.52+0x1d6>
 800e604:	2001      	movs	r0, #1
 800e606:	f883 0411 	strb.w	r0, [r3, #1041]	; 0x411
 800e60a:	e754      	b.n	800e4b6 <iNemo_setOrientation_6X.constprop.52+0x1d6>
 800e60c:	20ff      	movs	r0, #255	; 0xff
 800e60e:	f883 0411 	strb.w	r0, [r3, #1041]	; 0x411
 800e612:	e750      	b.n	800e4b6 <iNemo_setOrientation_6X.constprop.52+0x1d6>
 800e614:	2001      	movs	r0, #1
 800e616:	f883 0414 	strb.w	r0, [r3, #1044]	; 0x414
 800e61a:	e74c      	b.n	800e4b6 <iNemo_setOrientation_6X.constprop.52+0x1d6>
 800e61c:	20ff      	movs	r0, #255	; 0xff
 800e61e:	f883 040e 	strb.w	r0, [r3, #1038]	; 0x40e
 800e622:	e748      	b.n	800e4b6 <iNemo_setOrientation_6X.constprop.52+0x1d6>
 800e624:	2001      	movs	r0, #1
 800e626:	f883 0400 	strb.w	r0, [r3, #1024]	; 0x400
 800e62a:	e758      	b.n	800e4de <iNemo_setOrientation_6X.constprop.52+0x1fe>
 800e62c:	2001      	movs	r0, #1
 800e62e:	f883 0403 	strb.w	r0, [r3, #1027]	; 0x403
 800e632:	e754      	b.n	800e4de <iNemo_setOrientation_6X.constprop.52+0x1fe>
 800e634:	20ff      	movs	r0, #255	; 0xff
 800e636:	f883 0403 	strb.w	r0, [r3, #1027]	; 0x403
 800e63a:	e750      	b.n	800e4de <iNemo_setOrientation_6X.constprop.52+0x1fe>
 800e63c:	2001      	movs	r0, #1
 800e63e:	f883 0406 	strb.w	r0, [r3, #1030]	; 0x406
 800e642:	e74c      	b.n	800e4de <iNemo_setOrientation_6X.constprop.52+0x1fe>
 800e644:	20ff      	movs	r0, #255	; 0xff
 800e646:	f883 0400 	strb.w	r0, [r3, #1024]	; 0x400
 800e64a:	e748      	b.n	800e4de <iNemo_setOrientation_6X.constprop.52+0x1fe>
 800e64c:	2101      	movs	r1, #1
 800e64e:	f883 1401 	strb.w	r1, [r3, #1025]	; 0x401
 800e652:	e756      	b.n	800e502 <iNemo_setOrientation_6X.constprop.52+0x222>
 800e654:	2101      	movs	r1, #1
 800e656:	f883 1404 	strb.w	r1, [r3, #1028]	; 0x404
 800e65a:	e752      	b.n	800e502 <iNemo_setOrientation_6X.constprop.52+0x222>
 800e65c:	21ff      	movs	r1, #255	; 0xff
 800e65e:	f883 1404 	strb.w	r1, [r3, #1028]	; 0x404
 800e662:	e74e      	b.n	800e502 <iNemo_setOrientation_6X.constprop.52+0x222>
 800e664:	2101      	movs	r1, #1
 800e666:	f883 1407 	strb.w	r1, [r3, #1031]	; 0x407
 800e66a:	e74a      	b.n	800e502 <iNemo_setOrientation_6X.constprop.52+0x222>
 800e66c:	21ff      	movs	r1, #255	; 0xff
 800e66e:	f883 1401 	strb.w	r1, [r3, #1025]	; 0x401
 800e672:	e746      	b.n	800e502 <iNemo_setOrientation_6X.constprop.52+0x222>
 800e674:	2201      	movs	r2, #1
 800e676:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
 800e67a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e67e:	2201      	movs	r2, #1
 800e680:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
 800e684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e688:	22ff      	movs	r2, #255	; 0xff
 800e68a:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
 800e68e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e692:	2201      	movs	r2, #1
 800e694:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
 800e698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e69c <MEMS_updateMagBufferIndex.constprop.33>:
 800e69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6a0:	4e91      	ldr	r6, [pc, #580]	; (800e8e8 <MEMS_updateMagBufferIndex.constprop.33+0x24c>)
 800e6a2:	ed2d 8b02 	vpush	{d8}
 800e6a6:	f896 30b0 	ldrb.w	r3, [r6, #176]	; 0xb0
 800e6aa:	f896 80b1 	ldrb.w	r8, [r6, #177]	; 0xb1
 800e6ae:	f996 20b2 	ldrsb.w	r2, [r6, #178]	; 0xb2
 800e6b2:	b08f      	sub	sp, #60	; 0x3c
 800e6b4:	4619      	mov	r1, r3
 800e6b6:	9301      	str	r3, [sp, #4]
 800e6b8:	4541      	cmp	r1, r8
 800e6ba:	f04f 0300 	mov.w	r3, #0
 800e6be:	f8c6 30b8 	str.w	r3, [r6, #184]	; 0xb8
 800e6c2:	f8c6 30bc 	str.w	r3, [r6, #188]	; 0xbc
 800e6c6:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0
 800e6ca:	f8c6 30c4 	str.w	r3, [r6, #196]	; 0xc4
 800e6ce:	f8c6 30cc 	str.w	r3, [r6, #204]	; 0xcc
 800e6d2:	f8c6 30c8 	str.w	r3, [r6, #200]	; 0xc8
 800e6d6:	f000 80f2 	beq.w	800e8be <MEMS_updateMagBufferIndex.constprop.33+0x222>
 800e6da:	1c53      	adds	r3, r2, #1
 800e6dc:	9a01      	ldr	r2, [sp, #4]
 800e6de:	1a9b      	subs	r3, r3, r2
 800e6e0:	fb93 f2f8 	sdiv	r2, r3, r8
 800e6e4:	fb08 3312 	mls	r3, r8, r2, r3
 800e6e8:	b21a      	sxth	r2, r3
 800e6ea:	2a00      	cmp	r2, #0
 800e6ec:	9202      	str	r2, [sp, #8]
 800e6ee:	f2c0 80ee 	blt.w	800e8ce <MEMS_updateMagBufferIndex.constprop.33+0x232>
 800e6f2:	9b01      	ldr	r3, [sp, #4]
 800e6f4:	b93b      	cbnz	r3, 800e706 <MEMS_updateMagBufferIndex.constprop.33+0x6a>
 800e6f6:	23ff      	movs	r3, #255	; 0xff
 800e6f8:	f886 30b2 	strb.w	r3, [r6, #178]	; 0xb2
 800e6fc:	b00f      	add	sp, #60	; 0x3c
 800e6fe:	ecbd 8b02 	vpop	{d8}
 800e702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e706:	2500      	movs	r5, #0
 800e708:	eeb0 8a40 	vmov.f32	s16, s0
 800e70c:	4682      	mov	sl, r0
 800e70e:	9508      	str	r5, [sp, #32]
 800e710:	46a9      	mov	r9, r5
 800e712:	950d      	str	r5, [sp, #52]	; 0x34
 800e714:	9507      	str	r5, [sp, #28]
 800e716:	950a      	str	r5, [sp, #40]	; 0x28
 800e718:	9503      	str	r5, [sp, #12]
 800e71a:	950b      	str	r5, [sp, #44]	; 0x2c
 800e71c:	9504      	str	r5, [sp, #16]
 800e71e:	950c      	str	r5, [sp, #48]	; 0x30
 800e720:	9505      	str	r5, [sp, #20]
 800e722:	9509      	str	r5, [sp, #36]	; 0x24
 800e724:	9506      	str	r5, [sp, #24]
 800e726:	2701      	movs	r7, #1
 800e728:	9b02      	ldr	r3, [sp, #8]
 800e72a:	1959      	adds	r1, r3, r5
 800e72c:	fb91 f3f8 	sdiv	r3, r1, r8
 800e730:	fb08 1313 	mls	r3, r8, r3, r1
 800e734:	b2db      	uxtb	r3, r3
 800e736:	f103 0b04 	add.w	fp, r3, #4
 800e73a:	eb06 01cb 	add.w	r1, r6, fp, lsl #3
 800e73e:	f9b1 00b2 	ldrsh.w	r0, [r1, #178]	; 0xb2
 800e742:	fb90 f1fa 	sdiv	r1, r0, sl
 800e746:	fb0a 0111 	mls	r1, sl, r1, r0
 800e74a:	2900      	cmp	r1, #0
 800e74c:	bfb8      	it	lt
 800e74e:	4451      	addlt	r1, sl
 800e750:	b20b      	sxth	r3, r1
 800e752:	ee00 3a10 	vmov	s0, r3
 800e756:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800e75a:	ee80 0a08 	vdiv.f32	s0, s0, s16
 800e75e:	f009 ff3d 	bl	80185dc <roundf>
 800e762:	eb06 01cb 	add.w	r1, r6, fp, lsl #3
 800e766:	f9b1 00b4 	ldrsh.w	r0, [r1, #180]	; 0xb4
 800e76a:	fb90 f1fa 	sdiv	r1, r0, sl
 800e76e:	fb0a 0111 	mls	r1, sl, r1, r0
 800e772:	2900      	cmp	r1, #0
 800e774:	bfb8      	it	lt
 800e776:	4451      	addlt	r1, sl
 800e778:	b20b      	sxth	r3, r1
 800e77a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800e77e:	ee00 3a10 	vmov	s0, r3
 800e782:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800e786:	edcd 7a00 	vstr	s15, [sp]
 800e78a:	ee80 0a08 	vdiv.f32	s0, s0, s16
 800e78e:	f009 ff25 	bl	80185dc <roundf>
 800e792:	eb06 03cb 	add.w	r3, r6, fp, lsl #3
 800e796:	f89d 4000 	ldrb.w	r4, [sp]
 800e79a:	f9b3 10b6 	ldrsh.w	r1, [r3, #182]	; 0xb6
 800e79e:	fb91 f3fa 	sdiv	r3, r1, sl
 800e7a2:	fb0a 1313 	mls	r3, sl, r3, r1
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	bfb8      	it	lt
 800e7aa:	4453      	addlt	r3, sl
 800e7ac:	b21b      	sxth	r3, r3
 800e7ae:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800e7b2:	ee00 3a10 	vmov	s0, r3
 800e7b6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800e7ba:	edcd 7a00 	vstr	s15, [sp]
 800e7be:	ee80 0a08 	vdiv.f32	s0, s0, s16
 800e7c2:	f009 ff0b 	bl	80185dc <roundf>
 800e7c6:	f89d b000 	ldrb.w	fp, [sp]
 800e7ca:	2c1f      	cmp	r4, #31
 800e7cc:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800e7d0:	edcd 7a00 	vstr	s15, [sp]
 800e7d4:	f89d 3000 	ldrb.w	r3, [sp]
 800e7d8:	d966      	bls.n	800e8a8 <MEMS_updateMagBufferIndex.constprop.33+0x20c>
 800e7da:	9906      	ldr	r1, [sp, #24]
 800e7dc:	3c20      	subs	r4, #32
 800e7de:	fa07 f404 	lsl.w	r4, r7, r4
 800e7e2:	460a      	mov	r2, r1
 800e7e4:	ea24 0401 	bic.w	r4, r4, r1
 800e7e8:	4062      	eors	r2, r4
 800e7ea:	9206      	str	r2, [sp, #24]
 800e7ec:	2201      	movs	r2, #1
 800e7ee:	9209      	str	r2, [sp, #36]	; 0x24
 800e7f0:	f1bb 0f1f 	cmp.w	fp, #31
 800e7f4:	d939      	bls.n	800e86a <MEMS_updateMagBufferIndex.constprop.33+0x1ce>
 800e7f6:	9804      	ldr	r0, [sp, #16]
 800e7f8:	f1ab 0120 	sub.w	r1, fp, #32
 800e7fc:	fa07 f101 	lsl.w	r1, r7, r1
 800e800:	4602      	mov	r2, r0
 800e802:	ea21 0100 	bic.w	r1, r1, r0
 800e806:	404a      	eors	r2, r1
 800e808:	9204      	str	r2, [sp, #16]
 800e80a:	2b1f      	cmp	r3, #31
 800e80c:	f04f 0201 	mov.w	r2, #1
 800e810:	920b      	str	r2, [sp, #44]	; 0x2c
 800e812:	d837      	bhi.n	800e884 <MEMS_updateMagBufferIndex.constprop.33+0x1e8>
 800e814:	fa07 f303 	lsl.w	r3, r7, r3
 800e818:	ea23 0309 	bic.w	r3, r3, r9
 800e81c:	3501      	adds	r5, #1
 800e81e:	ea89 0903 	eor.w	r9, r9, r3
 800e822:	9b01      	ldr	r3, [sp, #4]
 800e824:	b2e9      	uxtb	r1, r5
 800e826:	428b      	cmp	r3, r1
 800e828:	f04f 0301 	mov.w	r3, #1
 800e82c:	9308      	str	r3, [sp, #32]
 800e82e:	f63f af7b 	bhi.w	800e728 <MEMS_updateMagBufferIndex.constprop.33+0x8c>
 800e832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e834:	2b00      	cmp	r3, #0
 800e836:	d14e      	bne.n	800e8d6 <MEMS_updateMagBufferIndex.constprop.33+0x23a>
 800e838:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d14f      	bne.n	800e8de <MEMS_updateMagBufferIndex.constprop.33+0x242>
 800e83e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e840:	b113      	cbz	r3, 800e848 <MEMS_updateMagBufferIndex.constprop.33+0x1ac>
 800e842:	9b04      	ldr	r3, [sp, #16]
 800e844:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0
 800e848:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e84a:	b113      	cbz	r3, 800e852 <MEMS_updateMagBufferIndex.constprop.33+0x1b6>
 800e84c:	9b03      	ldr	r3, [sp, #12]
 800e84e:	f8c6 30c4 	str.w	r3, [r6, #196]	; 0xc4
 800e852:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e854:	b113      	cbz	r3, 800e85c <MEMS_updateMagBufferIndex.constprop.33+0x1c0>
 800e856:	9b07      	ldr	r3, [sp, #28]
 800e858:	f8c6 30cc 	str.w	r3, [r6, #204]	; 0xcc
 800e85c:	9b08      	ldr	r3, [sp, #32]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	f43f af4c 	beq.w	800e6fc <MEMS_updateMagBufferIndex.constprop.33+0x60>
 800e864:	f8c6 90c8 	str.w	r9, [r6, #200]	; 0xc8
 800e868:	e748      	b.n	800e6fc <MEMS_updateMagBufferIndex.constprop.33+0x60>
 800e86a:	9803      	ldr	r0, [sp, #12]
 800e86c:	fa07 f10b 	lsl.w	r1, r7, fp
 800e870:	4602      	mov	r2, r0
 800e872:	ea21 0100 	bic.w	r1, r1, r0
 800e876:	404a      	eors	r2, r1
 800e878:	9203      	str	r2, [sp, #12]
 800e87a:	2b1f      	cmp	r3, #31
 800e87c:	f04f 0201 	mov.w	r2, #1
 800e880:	920a      	str	r2, [sp, #40]	; 0x28
 800e882:	d9c7      	bls.n	800e814 <MEMS_updateMagBufferIndex.constprop.33+0x178>
 800e884:	9807      	ldr	r0, [sp, #28]
 800e886:	3b20      	subs	r3, #32
 800e888:	fa07 f303 	lsl.w	r3, r7, r3
 800e88c:	ea23 0300 	bic.w	r3, r3, r0
 800e890:	4043      	eors	r3, r0
 800e892:	3501      	adds	r5, #1
 800e894:	9307      	str	r3, [sp, #28]
 800e896:	9b01      	ldr	r3, [sp, #4]
 800e898:	b2e9      	uxtb	r1, r5
 800e89a:	428b      	cmp	r3, r1
 800e89c:	f04f 0301 	mov.w	r3, #1
 800e8a0:	930d      	str	r3, [sp, #52]	; 0x34
 800e8a2:	f63f af41 	bhi.w	800e728 <MEMS_updateMagBufferIndex.constprop.33+0x8c>
 800e8a6:	e7c4      	b.n	800e832 <MEMS_updateMagBufferIndex.constprop.33+0x196>
 800e8a8:	9905      	ldr	r1, [sp, #20]
 800e8aa:	fa07 f404 	lsl.w	r4, r7, r4
 800e8ae:	460a      	mov	r2, r1
 800e8b0:	ea24 0401 	bic.w	r4, r4, r1
 800e8b4:	4062      	eors	r2, r4
 800e8b6:	9205      	str	r2, [sp, #20]
 800e8b8:	2201      	movs	r2, #1
 800e8ba:	920c      	str	r2, [sp, #48]	; 0x30
 800e8bc:	e798      	b.n	800e7f0 <MEMS_updateMagBufferIndex.constprop.33+0x154>
 800e8be:	3201      	adds	r2, #1
 800e8c0:	fb92 f3f1 	sdiv	r3, r2, r1
 800e8c4:	fb01 2213 	mls	r2, r1, r3, r2
 800e8c8:	b213      	sxth	r3, r2
 800e8ca:	9302      	str	r3, [sp, #8]
 800e8cc:	e711      	b.n	800e6f2 <MEMS_updateMagBufferIndex.constprop.33+0x56>
 800e8ce:	4443      	add	r3, r8
 800e8d0:	b21b      	sxth	r3, r3
 800e8d2:	9302      	str	r3, [sp, #8]
 800e8d4:	e70d      	b.n	800e6f2 <MEMS_updateMagBufferIndex.constprop.33+0x56>
 800e8d6:	9b06      	ldr	r3, [sp, #24]
 800e8d8:	f8c6 30b8 	str.w	r3, [r6, #184]	; 0xb8
 800e8dc:	e7ac      	b.n	800e838 <MEMS_updateMagBufferIndex.constprop.33+0x19c>
 800e8de:	9b05      	ldr	r3, [sp, #20]
 800e8e0:	f8c6 30bc 	str.w	r3, [r6, #188]	; 0xbc
 800e8e4:	e7ab      	b.n	800e83e <MEMS_updateMagBufferIndex.constprop.33+0x1a2>
 800e8e6:	bf00      	nop
 800e8e8:	20001670 	.word	0x20001670
 800e8ec:	00000000 	.word	0x00000000

0800e8f0 <iNemo_quat2heading>:
 800e8f0:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800e8f4:	ed2d 8b08 	vpush	{d8-d11}
 800e8f8:	460e      	mov	r6, r1
 800e8fa:	b082      	sub	sp, #8
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d15d      	bne.n	800e9bc <iNemo_quat2heading+0xcc>
 800e900:	edd2 6a00 	vldr	s13, [r2]
 800e904:	ed92 7a01 	vldr	s14, [r2, #4]
 800e908:	4dd5      	ldr	r5, [pc, #852]	; (800ec60 <iNemo_quat2heading+0x370>)
 800e90a:	edd2 7a02 	vldr	s15, [r2, #8]
 800e90e:	edd0 8a00 	vldr	s17, [r0]
 800e912:	f8d5 4418 	ldr.w	r4, [r5, #1048]	; 0x418
 800e916:	edd0 9a01 	vldr	s19, [r0, #4]
 800e91a:	ed90 8a02 	vldr	s16, [r0, #8]
 800e91e:	ed90 aa03 	vldr	s20, [r0, #12]
 800e922:	eef0 aae6 	vabs.f32	s21, s13
 800e926:	eeb0 9ac7 	vabs.f32	s18, s14
 800e92a:	eef4 aac9 	vcmpe.f32	s21, s18
 800e92e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e932:	eeb0 bae7 	vabs.f32	s22, s15
 800e936:	f340 8098 	ble.w	800ea6a <iNemo_quat2heading+0x17a>
 800e93a:	eef4 aacb 	vcmpe.f32	s21, s22
 800e93e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e942:	f340 8092 	ble.w	800ea6a <iNemo_quat2heading+0x17a>
 800e946:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800e94a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e94e:	ee1a 0a90 	vmov	r0, s21
 800e952:	f340 818d 	ble.w	800ec70 <iNemo_quat2heading+0x380>
 800e956:	f7f1 fdff 	bl	8000558 <__aeabi_f2d>
 800e95a:	4680      	mov	r8, r0
 800e95c:	ee19 0a10 	vmov	r0, s18
 800e960:	4689      	mov	r9, r1
 800e962:	f7f1 fdf9 	bl	8000558 <__aeabi_f2d>
 800e966:	a3ba      	add	r3, pc, #744	; (adr r3, 800ec50 <iNemo_quat2heading+0x360>)
 800e968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e96c:	f7f1 fe48 	bl	8000600 <__aeabi_dmul>
 800e970:	4602      	mov	r2, r0
 800e972:	460b      	mov	r3, r1
 800e974:	4640      	mov	r0, r8
 800e976:	4649      	mov	r1, r9
 800e978:	f7f2 f8d2 	bl	8000b20 <__aeabi_dcmpgt>
 800e97c:	b188      	cbz	r0, 800e9a2 <iNemo_quat2heading+0xb2>
 800e97e:	ee1b 0a10 	vmov	r0, s22
 800e982:	f7f1 fde9 	bl	8000558 <__aeabi_f2d>
 800e986:	a3b2      	add	r3, pc, #712	; (adr r3, 800ec50 <iNemo_quat2heading+0x360>)
 800e988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e98c:	f7f1 fe38 	bl	8000600 <__aeabi_dmul>
 800e990:	4602      	mov	r2, r0
 800e992:	460b      	mov	r3, r1
 800e994:	4640      	mov	r0, r8
 800e996:	4649      	mov	r1, r9
 800e998:	f7f2 f8c2 	bl	8000b20 <__aeabi_dcmpgt>
 800e99c:	2800      	cmp	r0, #0
 800e99e:	bf18      	it	ne
 800e9a0:	2404      	movne	r4, #4
 800e9a2:	f8c5 4418 	str.w	r4, [r5, #1048]	; 0x418
 800e9a6:	2c05      	cmp	r4, #5
 800e9a8:	f200 81b4 	bhi.w	800ed14 <iNemo_quat2heading+0x424>
 800e9ac:	e8df f014 	tbh	[pc, r4, lsl #1]
 800e9b0:	00e300e0 	.word	0x00e300e0
 800e9b4:	011900c3 	.word	0x011900c3
 800e9b8:	00e000c3 	.word	0x00e000c3
 800e9bc:	edd2 6a01 	vldr	s13, [r2, #4]
 800e9c0:	ed92 7a00 	vldr	s14, [r2]
 800e9c4:	ed90 8a02 	vldr	s16, [r0, #8]
 800e9c8:	4da5      	ldr	r5, [pc, #660]	; (800ec60 <iNemo_quat2heading+0x370>)
 800e9ca:	edd2 7a02 	vldr	s15, [r2, #8]
 800e9ce:	edd0 8a01 	vldr	s17, [r0, #4]
 800e9d2:	f8d5 4418 	ldr.w	r4, [r5, #1048]	; 0x418
 800e9d6:	edd0 9a00 	vldr	s19, [r0]
 800e9da:	ed90 aa03 	vldr	s20, [r0, #12]
 800e9de:	eef0 aae6 	vabs.f32	s21, s13
 800e9e2:	eeb0 9ac7 	vabs.f32	s18, s14
 800e9e6:	eef4 aac9 	vcmpe.f32	s21, s18
 800e9ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9ee:	eeb1 8a48 	vneg.f32	s16, s16
 800e9f2:	eeb0 bae7 	vabs.f32	s22, s15
 800e9f6:	dd04      	ble.n	800ea02 <iNemo_quat2heading+0x112>
 800e9f8:	eef4 aacb 	vcmpe.f32	s21, s22
 800e9fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea00:	dca1      	bgt.n	800e946 <iNemo_quat2heading+0x56>
 800ea02:	eeb4 9acb 	vcmpe.f32	s18, s22
 800ea06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea0a:	dc63      	bgt.n	800ead4 <iNemo_quat2heading+0x1e4>
 800ea0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ea10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea14:	ee1b 0a10 	vmov	r0, s22
 800ea18:	d433      	bmi.n	800ea82 <iNemo_quat2heading+0x192>
 800ea1a:	f7f1 fd9d 	bl	8000558 <__aeabi_f2d>
 800ea1e:	4680      	mov	r8, r0
 800ea20:	ee19 0a10 	vmov	r0, s18
 800ea24:	4689      	mov	r9, r1
 800ea26:	f7f1 fd97 	bl	8000558 <__aeabi_f2d>
 800ea2a:	a389      	add	r3, pc, #548	; (adr r3, 800ec50 <iNemo_quat2heading+0x360>)
 800ea2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea30:	f7f1 fde6 	bl	8000600 <__aeabi_dmul>
 800ea34:	4602      	mov	r2, r0
 800ea36:	460b      	mov	r3, r1
 800ea38:	4640      	mov	r0, r8
 800ea3a:	4649      	mov	r1, r9
 800ea3c:	f7f2 f870 	bl	8000b20 <__aeabi_dcmpgt>
 800ea40:	2800      	cmp	r0, #0
 800ea42:	d0ae      	beq.n	800e9a2 <iNemo_quat2heading+0xb2>
 800ea44:	ee1a 0a90 	vmov	r0, s21
 800ea48:	f7f1 fd86 	bl	8000558 <__aeabi_f2d>
 800ea4c:	a380      	add	r3, pc, #512	; (adr r3, 800ec50 <iNemo_quat2heading+0x360>)
 800ea4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea52:	f7f1 fdd5 	bl	8000600 <__aeabi_dmul>
 800ea56:	4602      	mov	r2, r0
 800ea58:	460b      	mov	r3, r1
 800ea5a:	4640      	mov	r0, r8
 800ea5c:	4649      	mov	r1, r9
 800ea5e:	f7f2 f85f 	bl	8000b20 <__aeabi_dcmpgt>
 800ea62:	2800      	cmp	r0, #0
 800ea64:	bf18      	it	ne
 800ea66:	2402      	movne	r4, #2
 800ea68:	e79b      	b.n	800e9a2 <iNemo_quat2heading+0xb2>
 800ea6a:	eeb4 9acb 	vcmpe.f32	s18, s22
 800ea6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea72:	dc2f      	bgt.n	800ead4 <iNemo_quat2heading+0x1e4>
 800ea74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ea78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea7c:	ee1b 0a10 	vmov	r0, s22
 800ea80:	ddcb      	ble.n	800ea1a <iNemo_quat2heading+0x12a>
 800ea82:	f7f1 fd69 	bl	8000558 <__aeabi_f2d>
 800ea86:	4680      	mov	r8, r0
 800ea88:	ee19 0a10 	vmov	r0, s18
 800ea8c:	4689      	mov	r9, r1
 800ea8e:	f7f1 fd63 	bl	8000558 <__aeabi_f2d>
 800ea92:	a36f      	add	r3, pc, #444	; (adr r3, 800ec50 <iNemo_quat2heading+0x360>)
 800ea94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea98:	f7f1 fdb2 	bl	8000600 <__aeabi_dmul>
 800ea9c:	4602      	mov	r2, r0
 800ea9e:	460b      	mov	r3, r1
 800eaa0:	4640      	mov	r0, r8
 800eaa2:	4649      	mov	r1, r9
 800eaa4:	f7f2 f83c 	bl	8000b20 <__aeabi_dcmpgt>
 800eaa8:	2800      	cmp	r0, #0
 800eaaa:	f43f af7a 	beq.w	800e9a2 <iNemo_quat2heading+0xb2>
 800eaae:	ee1a 0a90 	vmov	r0, s21
 800eab2:	f7f1 fd51 	bl	8000558 <__aeabi_f2d>
 800eab6:	a366      	add	r3, pc, #408	; (adr r3, 800ec50 <iNemo_quat2heading+0x360>)
 800eab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eabc:	f7f1 fda0 	bl	8000600 <__aeabi_dmul>
 800eac0:	4602      	mov	r2, r0
 800eac2:	460b      	mov	r3, r1
 800eac4:	4640      	mov	r0, r8
 800eac6:	4649      	mov	r1, r9
 800eac8:	f7f2 f82a 	bl	8000b20 <__aeabi_dcmpgt>
 800eacc:	2800      	cmp	r0, #0
 800eace:	bf18      	it	ne
 800ead0:	2400      	movne	r4, #0
 800ead2:	e766      	b.n	800e9a2 <iNemo_quat2heading+0xb2>
 800ead4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800ead8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eadc:	ee19 0a10 	vmov	r0, s18
 800eae0:	f340 80ef 	ble.w	800ecc2 <iNemo_quat2heading+0x3d2>
 800eae4:	f7f1 fd38 	bl	8000558 <__aeabi_f2d>
 800eae8:	4680      	mov	r8, r0
 800eaea:	ee1a 0a90 	vmov	r0, s21
 800eaee:	4689      	mov	r9, r1
 800eaf0:	f7f1 fd32 	bl	8000558 <__aeabi_f2d>
 800eaf4:	a356      	add	r3, pc, #344	; (adr r3, 800ec50 <iNemo_quat2heading+0x360>)
 800eaf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eafa:	f7f1 fd81 	bl	8000600 <__aeabi_dmul>
 800eafe:	4602      	mov	r2, r0
 800eb00:	460b      	mov	r3, r1
 800eb02:	4640      	mov	r0, r8
 800eb04:	4649      	mov	r1, r9
 800eb06:	f7f2 f80b 	bl	8000b20 <__aeabi_dcmpgt>
 800eb0a:	2800      	cmp	r0, #0
 800eb0c:	f43f af49 	beq.w	800e9a2 <iNemo_quat2heading+0xb2>
 800eb10:	ee1b 0a10 	vmov	r0, s22
 800eb14:	f7f1 fd20 	bl	8000558 <__aeabi_f2d>
 800eb18:	a34d      	add	r3, pc, #308	; (adr r3, 800ec50 <iNemo_quat2heading+0x360>)
 800eb1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb1e:	f7f1 fd6f 	bl	8000600 <__aeabi_dmul>
 800eb22:	4602      	mov	r2, r0
 800eb24:	460b      	mov	r3, r1
 800eb26:	4640      	mov	r0, r8
 800eb28:	4649      	mov	r1, r9
 800eb2a:	f7f1 fff9 	bl	8000b20 <__aeabi_dcmpgt>
 800eb2e:	2800      	cmp	r0, #0
 800eb30:	bf18      	it	ne
 800eb32:	2401      	movne	r4, #1
 800eb34:	e735      	b.n	800e9a2 <iNemo_quat2heading+0xb2>
 800eb36:	ed96 0a00 	vldr	s0, [r6]
 800eb3a:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800ec64 <iNemo_quat2heading+0x374>
 800eb3e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800eb42:	eddf 7a49 	vldr	s15, [pc, #292]	; 800ec68 <iNemo_quat2heading+0x378>
 800eb46:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800eb4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb4e:	bfa8      	it	ge
 800eb50:	ee30 0a67 	vsubge.f32	s0, s0, s15
 800eb54:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800eb58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb5c:	d503      	bpl.n	800eb66 <iNemo_quat2heading+0x276>
 800eb5e:	eddf 7a42 	vldr	s15, [pc, #264]	; 800ec68 <iNemo_quat2heading+0x378>
 800eb62:	ee30 0a27 	vadd.f32	s0, s0, s15
 800eb66:	b002      	add	sp, #8
 800eb68:	ecbd 8b08 	vpop	{d8-d11}
 800eb6c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800eb70:	ed96 0a00 	vldr	s0, [r6]
 800eb74:	e7e5      	b.n	800eb42 <iNemo_quat2heading+0x252>
 800eb76:	ee68 7aa8 	vmul.f32	s15, s17, s17
 800eb7a:	ee29 7aa9 	vmul.f32	s14, s19, s19
 800eb7e:	ee68 6a08 	vmul.f32	s13, s16, s16
 800eb82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eb86:	ee2a 7a0a 	vmul.f32	s14, s20, s20
 800eb8a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800eb8e:	ee69 8aa8 	vmul.f32	s17, s19, s17
 800eb92:	ee77 7a87 	vadd.f32	s15, s15, s14
 800eb96:	ee2a 8a08 	vmul.f32	s16, s20, s16
 800eb9a:	ee17 0a90 	vmov	r0, s15
 800eb9e:	ee38 8a88 	vadd.f32	s16, s17, s16
 800eba2:	f7f1 fcd9 	bl	8000558 <__aeabi_f2d>
 800eba6:	ee78 7a08 	vadd.f32	s15, s16, s16
 800ebaa:	e9cd 0100 	strd	r0, r1, [sp]
 800ebae:	ee17 0a90 	vmov	r0, s15
 800ebb2:	f7f1 fcd1 	bl	8000558 <__aeabi_f2d>
 800ebb6:	ed9d 1b00 	vldr	d1, [sp]
 800ebba:	ec41 0b10 	vmov	d0, r0, r1
 800ebbe:	f009 fdf5 	bl	80187ac <atan2>
 800ebc2:	a325      	add	r3, pc, #148	; (adr r3, 800ec58 <iNemo_quat2heading+0x368>)
 800ebc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebc8:	ec51 0b10 	vmov	r0, r1, d0
 800ebcc:	f7f1 fd18 	bl	8000600 <__aeabi_dmul>
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	4b26      	ldr	r3, [pc, #152]	; (800ec6c <iNemo_quat2heading+0x37c>)
 800ebd4:	f7f1 fb60 	bl	8000298 <__aeabi_dsub>
 800ebd8:	f7f2 f80a 	bl	8000bf0 <__aeabi_d2f>
 800ebdc:	ee00 0a10 	vmov	s0, r0
 800ebe0:	e7af      	b.n	800eb42 <iNemo_quat2heading+0x252>
 800ebe2:	ee68 7aa8 	vmul.f32	s15, s17, s17
 800ebe6:	ee29 7aa9 	vmul.f32	s14, s19, s19
 800ebea:	ee68 6a08 	vmul.f32	s13, s16, s16
 800ebee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ebf2:	ee2a 7a0a 	vmul.f32	s14, s20, s20
 800ebf6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ebfa:	ee69 8aa8 	vmul.f32	s17, s19, s17
 800ebfe:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ec02:	ee2a 8a08 	vmul.f32	s16, s20, s16
 800ec06:	ee17 0a90 	vmov	r0, s15
 800ec0a:	ee38 8a88 	vadd.f32	s16, s17, s16
 800ec0e:	f7f1 fca3 	bl	8000558 <__aeabi_f2d>
 800ec12:	ee78 7a08 	vadd.f32	s15, s16, s16
 800ec16:	e9cd 0100 	strd	r0, r1, [sp]
 800ec1a:	ee17 0a90 	vmov	r0, s15
 800ec1e:	f7f1 fc9b 	bl	8000558 <__aeabi_f2d>
 800ec22:	ed9d 1b00 	vldr	d1, [sp]
 800ec26:	ec41 0b10 	vmov	d0, r0, r1
 800ec2a:	f009 fdbf 	bl	80187ac <atan2>
 800ec2e:	a30a      	add	r3, pc, #40	; (adr r3, 800ec58 <iNemo_quat2heading+0x368>)
 800ec30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec34:	ec51 0b10 	vmov	r0, r1, d0
 800ec38:	f7f1 fce2 	bl	8000600 <__aeabi_dmul>
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	4b0b      	ldr	r3, [pc, #44]	; (800ec6c <iNemo_quat2heading+0x37c>)
 800ec40:	f7f1 fb2c 	bl	800029c <__adddf3>
 800ec44:	f7f1 ffd4 	bl	8000bf0 <__aeabi_d2f>
 800ec48:	ee00 0a10 	vmov	s0, r0
 800ec4c:	e779      	b.n	800eb42 <iNemo_quat2heading+0x252>
 800ec4e:	bf00      	nop
 800ec50:	e0000000 	.word	0xe0000000
 800ec54:	3ff6b851 	.word	0x3ff6b851
 800ec58:	20000000 	.word	0x20000000
 800ec5c:	404ca5dc 	.word	0x404ca5dc
 800ec60:	20001670 	.word	0x20001670
 800ec64:	43340000 	.word	0x43340000
 800ec68:	43b40000 	.word	0x43b40000
 800ec6c:	40568000 	.word	0x40568000
 800ec70:	f7f1 fc72 	bl	8000558 <__aeabi_f2d>
 800ec74:	4680      	mov	r8, r0
 800ec76:	ee19 0a10 	vmov	r0, s18
 800ec7a:	4689      	mov	r9, r1
 800ec7c:	f7f1 fc6c 	bl	8000558 <__aeabi_f2d>
 800ec80:	a328      	add	r3, pc, #160	; (adr r3, 800ed24 <iNemo_quat2heading+0x434>)
 800ec82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec86:	f7f1 fcbb 	bl	8000600 <__aeabi_dmul>
 800ec8a:	4602      	mov	r2, r0
 800ec8c:	460b      	mov	r3, r1
 800ec8e:	4640      	mov	r0, r8
 800ec90:	4649      	mov	r1, r9
 800ec92:	f7f1 ff45 	bl	8000b20 <__aeabi_dcmpgt>
 800ec96:	2800      	cmp	r0, #0
 800ec98:	f43f ae83 	beq.w	800e9a2 <iNemo_quat2heading+0xb2>
 800ec9c:	ee1b 0a10 	vmov	r0, s22
 800eca0:	f7f1 fc5a 	bl	8000558 <__aeabi_f2d>
 800eca4:	a31f      	add	r3, pc, #124	; (adr r3, 800ed24 <iNemo_quat2heading+0x434>)
 800eca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecaa:	f7f1 fca9 	bl	8000600 <__aeabi_dmul>
 800ecae:	4602      	mov	r2, r0
 800ecb0:	460b      	mov	r3, r1
 800ecb2:	4640      	mov	r0, r8
 800ecb4:	4649      	mov	r1, r9
 800ecb6:	f7f1 ff33 	bl	8000b20 <__aeabi_dcmpgt>
 800ecba:	2800      	cmp	r0, #0
 800ecbc:	bf18      	it	ne
 800ecbe:	2405      	movne	r4, #5
 800ecc0:	e66f      	b.n	800e9a2 <iNemo_quat2heading+0xb2>
 800ecc2:	f7f1 fc49 	bl	8000558 <__aeabi_f2d>
 800ecc6:	4680      	mov	r8, r0
 800ecc8:	ee1a 0a90 	vmov	r0, s21
 800eccc:	4689      	mov	r9, r1
 800ecce:	f7f1 fc43 	bl	8000558 <__aeabi_f2d>
 800ecd2:	a314      	add	r3, pc, #80	; (adr r3, 800ed24 <iNemo_quat2heading+0x434>)
 800ecd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecd8:	f7f1 fc92 	bl	8000600 <__aeabi_dmul>
 800ecdc:	4602      	mov	r2, r0
 800ecde:	460b      	mov	r3, r1
 800ece0:	4640      	mov	r0, r8
 800ece2:	4649      	mov	r1, r9
 800ece4:	f7f1 ff1c 	bl	8000b20 <__aeabi_dcmpgt>
 800ece8:	2800      	cmp	r0, #0
 800ecea:	f43f ae5a 	beq.w	800e9a2 <iNemo_quat2heading+0xb2>
 800ecee:	ee1b 0a10 	vmov	r0, s22
 800ecf2:	f7f1 fc31 	bl	8000558 <__aeabi_f2d>
 800ecf6:	a30b      	add	r3, pc, #44	; (adr r3, 800ed24 <iNemo_quat2heading+0x434>)
 800ecf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecfc:	f7f1 fc80 	bl	8000600 <__aeabi_dmul>
 800ed00:	4602      	mov	r2, r0
 800ed02:	460b      	mov	r3, r1
 800ed04:	4640      	mov	r0, r8
 800ed06:	4649      	mov	r1, r9
 800ed08:	f7f1 ff0a 	bl	8000b20 <__aeabi_dcmpgt>
 800ed0c:	2800      	cmp	r0, #0
 800ed0e:	bf18      	it	ne
 800ed10:	2403      	movne	r4, #3
 800ed12:	e646      	b.n	800e9a2 <iNemo_quat2heading+0xb2>
 800ed14:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800ed20 <iNemo_quat2heading+0x430>
 800ed18:	e725      	b.n	800eb66 <iNemo_quat2heading+0x276>
 800ed1a:	bf00      	nop
 800ed1c:	f3af 8000 	nop.w
 800ed20:	00000000 	.word	0x00000000
 800ed24:	e0000000 	.word	0xe0000000
 800ed28:	3ff6b851 	.word	0x3ff6b851

0800ed2c <MEMS_runMagCal.constprop.21>:
 800ed2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed30:	f8df b4a4 	ldr.w	fp, [pc, #1188]	; 800f1d8 <MEMS_runMagCal.constprop.21+0x4ac>
 800ed34:	ed2d 8b10 	vpush	{d8-d15}
 800ed38:	f8bb 6018 	ldrh.w	r6, [fp, #24]
 800ed3c:	f9bb e012 	ldrsh.w	lr, [fp, #18]
 800ed40:	2e82      	cmp	r6, #130	; 0x82
 800ed42:	f2ad 5d6c 	subw	sp, sp, #1388	; 0x56c
 800ed46:	f240 8400 	bls.w	800f54a <MEMS_runMagCal.constprop.21+0x81e>
 800ed4a:	f8db 201c 	ldr.w	r2, [fp, #28]
 800ed4e:	1e73      	subs	r3, r6, #1
 800ed50:	fb0e 2313 	mls	r3, lr, r3, r2
 800ed54:	2182      	movs	r1, #130	; 0x82
 800ed56:	f106 057e 	add.w	r5, r6, #126	; 0x7e
 800ed5a:	9304      	str	r3, [sp, #16]
 800ed5c:	2381      	movs	r3, #129	; 0x81
 800ed5e:	910c      	str	r1, [sp, #48]	; 0x30
 800ed60:	eb0e 1ece 	add.w	lr, lr, lr, lsl #7
 800ed64:	b2ed      	uxtb	r5, r5
 800ed66:	460f      	mov	r7, r1
 800ed68:	930d      	str	r3, [sp, #52]	; 0x34
 800ed6a:	f8db 4020 	ldr.w	r4, [fp, #32]
 800ed6e:	2200      	movs	r2, #0
 800ed70:	f50d 78ac 	add.w	r8, sp, #344	; 0x158
 800ed74:	b211      	sxth	r1, r2
 800ed76:	00cb      	lsls	r3, r1, #3
 800ed78:	18e0      	adds	r0, r4, r3
 800ed7a:	3201      	adds	r2, #1
 800ed7c:	4443      	add	r3, r8
 800ed7e:	f814 c031 	ldrb.w	ip, [r4, r1, lsl #3]
 800ed82:	f808 c031 	strb.w	ip, [r8, r1, lsl #3]
 800ed86:	b2d2      	uxtb	r2, r2
 800ed88:	f8b0 9002 	ldrh.w	r9, [r0, #2]
 800ed8c:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 800ed90:	88c1      	ldrh	r1, [r0, #6]
 800ed92:	f8a3 9002 	strh.w	r9, [r3, #2]
 800ed96:	4297      	cmp	r7, r2
 800ed98:	f8a3 c004 	strh.w	ip, [r3, #4]
 800ed9c:	80d9      	strh	r1, [r3, #6]
 800ed9e:	d8e9      	bhi.n	800ed74 <MEMS_runMagCal.constprop.21+0x48>
 800eda0:	2e82      	cmp	r6, #130	; 0x82
 800eda2:	bf86      	itte	hi
 800eda4:	f1a6 0382 	subhi.w	r3, r6, #130	; 0x82
 800eda8:	b29b      	uxthhi	r3, r3
 800edaa:	2300      	movls	r3, #0
 800edac:	f8ab 3018 	strh.w	r3, [fp, #24]
 800edb0:	b1c5      	cbz	r5, 800ede4 <MEMS_runMagCal.constprop.21+0xb8>
 800edb2:	3d01      	subs	r5, #1
 800edb4:	b2ed      	uxtb	r5, r5
 800edb6:	f8db 3020 	ldr.w	r3, [fp, #32]
 800edba:	3501      	adds	r5, #1
 800edbc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800edc0:	2600      	movs	r6, #0
 800edc2:	f893 4410 	ldrb.w	r4, [r3, #1040]	; 0x410
 800edc6:	f8b3 0412 	ldrh.w	r0, [r3, #1042]	; 0x412
 800edca:	f8b3 1414 	ldrh.w	r1, [r3, #1044]	; 0x414
 800edce:	f8b3 2416 	ldrh.w	r2, [r3, #1046]	; 0x416
 800edd2:	701c      	strb	r4, [r3, #0]
 800edd4:	f883 6410 	strb.w	r6, [r3, #1040]	; 0x410
 800edd8:	8058      	strh	r0, [r3, #2]
 800edda:	8099      	strh	r1, [r3, #4]
 800eddc:	80da      	strh	r2, [r3, #6]
 800edde:	3308      	adds	r3, #8
 800ede0:	429d      	cmp	r5, r3
 800ede2:	d1ee      	bne.n	800edc2 <MEMS_runMagCal.constprop.21+0x96>
 800ede4:	9b04      	ldr	r3, [sp, #16]
 800ede6:	4473      	add	r3, lr
 800ede8:	9305      	str	r3, [sp, #20]
 800edea:	f8cb 305c 	str.w	r3, [fp, #92]	; 0x5c
 800edee:	2f00      	cmp	r7, #0
 800edf0:	f000 83a5 	beq.w	800f53e <MEMS_runMagCal.constprop.21+0x812>
 800edf4:	4619      	mov	r1, r3
 800edf6:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
 800edfa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800edfe:	f501 31c3 	add.w	r1, r1, #99840	; 0x18600
 800ee02:	fb02 f203 	mul.w	r2, r2, r3
 800ee06:	31a0      	adds	r1, #160	; 0xa0
 800ee08:	4291      	cmp	r1, r2
 800ee0a:	f080 83ac 	bcs.w	800f566 <MEMS_runMagCal.constprop.21+0x83a>
 800ee0e:	3300      	adds	r3, #0
 800ee10:	bf18      	it	ne
 800ee12:	2301      	movne	r3, #1
 800ee14:	2200      	movs	r2, #0
 800ee16:	f8cb 302c 	str.w	r3, [fp, #44]	; 0x2c
 800ee1a:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
 800ee1e:	f88b 20b0 	strb.w	r2, [fp, #176]	; 0xb0
 800ee22:	f8cb 2030 	str.w	r2, [fp, #48]	; 0x30
 800ee26:	2300      	movs	r3, #0
 800ee28:	22ff      	movs	r2, #255	; 0xff
 800ee2a:	f8cb 30b8 	str.w	r3, [fp, #184]	; 0xb8
 800ee2e:	f8cb 30bc 	str.w	r3, [fp, #188]	; 0xbc
 800ee32:	f8cb 30c0 	str.w	r3, [fp, #192]	; 0xc0
 800ee36:	f8cb 30c4 	str.w	r3, [fp, #196]	; 0xc4
 800ee3a:	f8cb 30cc 	str.w	r3, [fp, #204]	; 0xcc
 800ee3e:	f8cb 30c8 	str.w	r3, [fp, #200]	; 0xc8
 800ee42:	f88b 20b2 	strb.w	r2, [fp, #178]	; 0xb2
 800ee46:	eddf 7adf 	vldr	s15, [pc, #892]	; 800f1c4 <MEMS_runMagCal.constprop.21+0x498>
 800ee4a:	f8df c390 	ldr.w	ip, [pc, #912]	; 800f1dc <MEMS_runMagCal.constprop.21+0x4b0>
 800ee4e:	ed9b 8a05 	vldr	s16, [fp, #20]
 800ee52:	eddb 2a23 	vldr	s5, [fp, #140]	; 0x8c
 800ee56:	ed9b 3a20 	vldr	s6, [fp, #128]	; 0x80
 800ee5a:	eddb 3a27 	vldr	s7, [fp, #156]	; 0x9c
 800ee5e:	ed9b 4a21 	vldr	s8, [fp, #132]	; 0x84
 800ee62:	eddb 4a2b 	vldr	s9, [fp, #172]	; 0xac
 800ee66:	ed9b 5a22 	vldr	s10, [fp, #136]	; 0x88
 800ee6a:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 800ee6e:	2600      	movs	r6, #0
 800ee70:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800ee74:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800ee78:	f50d 78ac 	add.w	r8, sp, #344	; 0x158
 800ee7c:	f8ad 20d8 	strh.w	r2, [sp, #216]	; 0xd8
 800ee80:	f8ad 20da 	strh.w	r2, [sp, #218]	; 0xda
 800ee84:	f8ad 20dc 	strh.w	r2, [sp, #220]	; 0xdc
 800ee88:	eeb0 7a67 	vmov.f32	s14, s15
 800ee8c:	eeb0 6a67 	vmov.f32	s12, s15
 800ee90:	eef0 5a67 	vmov.f32	s11, s15
 800ee94:	469a      	mov	sl, r3
 800ee96:	9301      	str	r3, [sp, #4]
 800ee98:	9303      	str	r3, [sp, #12]
 800ee9a:	f8ad 3118 	strh.w	r3, [sp, #280]	; 0x118
 800ee9e:	f8ad 311a 	strh.w	r3, [sp, #282]	; 0x11a
 800eea2:	f8ad 311c 	strh.w	r3, [sp, #284]	; 0x11c
 800eea6:	f8cd c000 	str.w	ip, [sp]
 800eeaa:	f8cd c008 	str.w	ip, [sp, #8]
 800eeae:	4645      	mov	r5, r8
 800eeb0:	9606      	str	r6, [sp, #24]
 800eeb2:	9607      	str	r6, [sp, #28]
 800eeb4:	9608      	str	r6, [sp, #32]
 800eeb6:	9609      	str	r6, [sp, #36]	; 0x24
 800eeb8:	960a      	str	r6, [sp, #40]	; 0x28
 800eeba:	960b      	str	r6, [sp, #44]	; 0x2c
 800eebc:	4632      	mov	r2, r6
 800eebe:	4634      	mov	r4, r6
 800eec0:	46b6      	mov	lr, r6
 800eec2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800eec6:	782b      	ldrb	r3, [r5, #0]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	f000 809f 	beq.w	800f00c <MEMS_runMagCal.constprop.21+0x2e0>
 800eece:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 800eed2:	f10e 0e01 	add.w	lr, lr, #1
 800eed6:	4561      	cmp	r1, ip
 800eed8:	fa4f fe8e 	sxtb.w	lr, lr
 800eedc:	dd02      	ble.n	800eee4 <MEMS_runMagCal.constprop.21+0x1b8>
 800eede:	2301      	movs	r3, #1
 800eee0:	468c      	mov	ip, r1
 800eee2:	9306      	str	r3, [sp, #24]
 800eee4:	4551      	cmp	r1, sl
 800eee6:	da02      	bge.n	800eeee <MEMS_runMagCal.constprop.21+0x1c2>
 800eee8:	2301      	movs	r3, #1
 800eeea:	468a      	mov	sl, r1
 800eeec:	9307      	str	r3, [sp, #28]
 800eeee:	ee07 1a90 	vmov	s15, r1
 800eef2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eef6:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800eefa:	9b00      	ldr	r3, [sp, #0]
 800eefc:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800ef00:	429a      	cmp	r2, r3
 800ef02:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800ef06:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ef0a:	ee37 6a86 	vadd.f32	s12, s15, s12
 800ef0e:	dd02      	ble.n	800ef16 <MEMS_runMagCal.constprop.21+0x1ea>
 800ef10:	2301      	movs	r3, #1
 800ef12:	9200      	str	r2, [sp, #0]
 800ef14:	9308      	str	r3, [sp, #32]
 800ef16:	9b01      	ldr	r3, [sp, #4]
 800ef18:	429a      	cmp	r2, r3
 800ef1a:	da02      	bge.n	800ef22 <MEMS_runMagCal.constprop.21+0x1f6>
 800ef1c:	2301      	movs	r3, #1
 800ef1e:	9201      	str	r2, [sp, #4]
 800ef20:	9309      	str	r3, [sp, #36]	; 0x24
 800ef22:	ee07 2a90 	vmov	s15, r2
 800ef26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ef2a:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800ef2e:	9802      	ldr	r0, [sp, #8]
 800ef30:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800ef34:	4283      	cmp	r3, r0
 800ef36:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800ef3a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ef3e:	ee77 7a86 	vadd.f32	s15, s15, s12
 800ef42:	dd02      	ble.n	800ef4a <MEMS_runMagCal.constprop.21+0x21e>
 800ef44:	2001      	movs	r0, #1
 800ef46:	9302      	str	r3, [sp, #8]
 800ef48:	900a      	str	r0, [sp, #40]	; 0x28
 800ef4a:	9803      	ldr	r0, [sp, #12]
 800ef4c:	4283      	cmp	r3, r0
 800ef4e:	da02      	bge.n	800ef56 <MEMS_runMagCal.constprop.21+0x22a>
 800ef50:	2001      	movs	r0, #1
 800ef52:	9303      	str	r3, [sp, #12]
 800ef54:	900b      	str	r0, [sp, #44]	; 0x2c
 800ef56:	ee07 3a10 	vmov	s14, r3
 800ef5a:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 800ef5e:	2e03      	cmp	r6, #3
 800ef60:	ee36 6a45 	vsub.f32	s12, s12, s10
 800ef64:	ee26 6a24 	vmul.f32	s12, s12, s9
 800ef68:	ee26 6a06 	vmul.f32	s12, s12, s12
 800ef6c:	ee36 6a27 	vadd.f32	s12, s12, s15
 800ef70:	f241 8286 	bls.w	8010480 <MEMS_runMagCal.constprop.21+0x1754>
 800ef74:	f935 9c1e 	ldrsh.w	r9, [r5, #-30]
 800ef78:	f935 8c16 	ldrsh.w	r8, [r5, #-22]
 800ef7c:	f935 0c06 	ldrsh.w	r0, [r5, #-6]
 800ef80:	eba1 0109 	sub.w	r1, r1, r9
 800ef84:	eba0 0008 	sub.w	r0, r0, r8
 800ef88:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800ef8c:	ee07 1a90 	vmov	s15, r1
 800ef90:	f935 9c1c 	ldrsh.w	r9, [r5, #-28]
 800ef94:	f935 1c04 	ldrsh.w	r1, [r5, #-4]
 800ef98:	f935 8c14 	ldrsh.w	r8, [r5, #-20]
 800ef9c:	f935 0c1a 	ldrsh.w	r0, [r5, #-26]
 800efa0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800efa4:	eba1 0108 	sub.w	r1, r1, r8
 800efa8:	eeb0 7ac7 	vabs.f32	s14, s14
 800efac:	eba2 0209 	sub.w	r2, r2, r9
 800efb0:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800efb4:	ee37 7a25 	vadd.f32	s14, s14, s11
 800efb8:	ee07 2a90 	vmov	s15, r2
 800efbc:	eefc 6ac7 	vcvt.u32.f32	s13, s14
 800efc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800efc4:	f935 2c02 	ldrsh.w	r2, [r5, #-2]
 800efc8:	f935 1c12 	ldrsh.w	r1, [r5, #-18]
 800efcc:	eeb8 7a66 	vcvt.f32.u32	s14, s13
 800efd0:	eef0 7ae7 	vabs.f32	s15, s15
 800efd4:	1a52      	subs	r2, r2, r1
 800efd6:	1a1b      	subs	r3, r3, r0
 800efd8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800efdc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800efe0:	ee07 3a90 	vmov	s15, r3
 800efe4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800efe8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800efec:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800eff0:	eef0 7ae7 	vabs.f32	s15, s15
 800eff4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800eff8:	2201      	movs	r2, #1
 800effa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800effe:	eeb0 7a46 	vmov.f32	s14, s12
 800f002:	ee17 3a90 	vmov	r3, s15
 800f006:	429c      	cmp	r4, r3
 800f008:	bf38      	it	cc
 800f00a:	461c      	movcc	r4, r3
 800f00c:	3601      	adds	r6, #1
 800f00e:	b2b3      	uxth	r3, r6
 800f010:	429f      	cmp	r7, r3
 800f012:	f105 0508 	add.w	r5, r5, #8
 800f016:	f63f af56 	bhi.w	800eec6 <MEMS_runMagCal.constprop.21+0x19a>
 800f01a:	940f      	str	r4, [sp, #60]	; 0x3c
 800f01c:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 800f020:	2a00      	cmp	r2, #0
 800f022:	f041 8229 	bne.w	8010478 <MEMS_runMagCal.constprop.21+0x174c>
 800f026:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f028:	b11b      	cbz	r3, 800f032 <MEMS_runMagCal.constprop.21+0x306>
 800f02a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800f02e:	f8ad 311c 	strh.w	r3, [sp, #284]	; 0x11c
 800f032:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f034:	b11b      	cbz	r3, 800f03e <MEMS_runMagCal.constprop.21+0x312>
 800f036:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800f03a:	f8ad 30dc 	strh.w	r3, [sp, #220]	; 0xdc
 800f03e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f040:	b11b      	cbz	r3, 800f04a <MEMS_runMagCal.constprop.21+0x31e>
 800f042:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800f046:	f8ad 311a 	strh.w	r3, [sp, #282]	; 0x11a
 800f04a:	9b08      	ldr	r3, [sp, #32]
 800f04c:	b11b      	cbz	r3, 800f056 <MEMS_runMagCal.constprop.21+0x32a>
 800f04e:	f8bd 3000 	ldrh.w	r3, [sp]
 800f052:	f8ad 30da 	strh.w	r3, [sp, #218]	; 0xda
 800f056:	9b07      	ldr	r3, [sp, #28]
 800f058:	b10b      	cbz	r3, 800f05e <MEMS_runMagCal.constprop.21+0x332>
 800f05a:	f8ad a118 	strh.w	sl, [sp, #280]	; 0x118
 800f05e:	9b06      	ldr	r3, [sp, #24]
 800f060:	2b00      	cmp	r3, #0
 800f062:	f040 829a 	bne.w	800f59a <MEMS_runMagCal.constprop.21+0x86e>
 800f066:	f1be 0f00 	cmp.w	lr, #0
 800f06a:	f000 82a6 	beq.w	800f5ba <MEMS_runMagCal.constprop.21+0x88e>
 800f06e:	f9bd 70d8 	ldrsh.w	r7, [sp, #216]	; 0xd8
 800f072:	f9bd 4118 	ldrsh.w	r4, [sp, #280]	; 0x118
 800f076:	f514 4f80 	cmn.w	r4, #16384	; 0x4000
 800f07a:	f2c0 8299 	blt.w	800f5b0 <MEMS_runMagCal.constprop.21+0x884>
 800f07e:	f9bd 60da 	ldrsh.w	r6, [sp, #218]	; 0xda
 800f082:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
 800f086:	f280 8293 	bge.w	800f5b0 <MEMS_runMagCal.constprop.21+0x884>
 800f08a:	f9bd a11a 	ldrsh.w	sl, [sp, #282]	; 0x11a
 800f08e:	f51a 4f80 	cmn.w	sl, #16384	; 0x4000
 800f092:	f2c0 828d 	blt.w	800f5b0 <MEMS_runMagCal.constprop.21+0x884>
 800f096:	f9bd 50dc 	ldrsh.w	r5, [sp, #220]	; 0xdc
 800f09a:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
 800f09e:	f280 8287 	bge.w	800f5b0 <MEMS_runMagCal.constprop.21+0x884>
 800f0a2:	f9bd 911c 	ldrsh.w	r9, [sp, #284]	; 0x11c
 800f0a6:	f519 4f80 	cmn.w	r9, #16384	; 0x4000
 800f0aa:	f2c0 8281 	blt.w	800f5b0 <MEMS_runMagCal.constprop.21+0x884>
 800f0ae:	ee07 ea90 	vmov	s15, lr
 800f0b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f0b6:	ee86 0a27 	vdiv.f32	s0, s12, s15
 800f0ba:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800f0be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0c2:	eef1 8ac0 	vsqrt.f32	s17, s0
 800f0c6:	bf58      	it	pl
 800f0c8:	eef0 5a48 	vmovpl.f32	s11, s16
 800f0cc:	f101 814a 	bmi.w	8010364 <MEMS_runMagCal.constprop.21+0x1638>
 800f0d0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f0d4:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800f0d8:	1b3c      	subs	r4, r7, r4
 800f0da:	eba6 060a 	sub.w	r6, r6, sl
 800f0de:	42b4      	cmp	r4, r6
 800f0e0:	4623      	mov	r3, r4
 800f0e2:	eba5 0509 	sub.w	r5, r5, r9
 800f0e6:	bfb8      	it	lt
 800f0e8:	4633      	movlt	r3, r6
 800f0ea:	42ab      	cmp	r3, r5
 800f0ec:	bfb8      	it	lt
 800f0ee:	462b      	movlt	r3, r5
 800f0f0:	eddf 6a35 	vldr	s13, [pc, #212]	; 800f1c8 <MEMS_runMagCal.constprop.21+0x49c>
 800f0f4:	ee07 3a90 	vmov	s15, r3
 800f0f8:	ee67 6a26 	vmul.f32	s13, s14, s13
 800f0fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f100:	ee28 6aa5 	vmul.f32	s12, s17, s11
 800f104:	eef4 6ae7 	vcmpe.f32	s13, s15
 800f108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f10c:	f100 8250 	bmi.w	800f5b0 <MEMS_runMagCal.constprop.21+0x884>
 800f110:	eddd 6a0f 	vldr	s13, [sp, #60]	; 0x3c
 800f114:	ed9f 5a2d 	vldr	s10, [pc, #180]	; 800f1cc <MEMS_runMagCal.constprop.21+0x4a0>
 800f118:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800f11c:	ee66 5aa5 	vmul.f32	s11, s13, s11
 800f120:	eef4 5ac5 	vcmpe.f32	s11, s10
 800f124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f128:	f300 8242 	bgt.w	800f5b0 <MEMS_runMagCal.constprop.21+0x884>
 800f12c:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800f130:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f134:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f13c:	f301 805b 	bgt.w	80101f6 <MEMS_runMagCal.constprop.21+0x14ca>
 800f140:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800f144:	ee67 6a26 	vmul.f32	s13, s14, s13
 800f148:	eef4 7ae6 	vcmpe.f32	s15, s13
 800f14c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f150:	f341 8056 	ble.w	8010200 <MEMS_runMagCal.constprop.21+0x14d4>
 800f154:	ee07 4a90 	vmov	s15, r4
 800f158:	ee37 7a07 	vadd.f32	s14, s14, s14
 800f15c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f160:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f168:	f341 804a 	ble.w	8010200 <MEMS_runMagCal.constprop.21+0x14d4>
 800f16c:	ee07 6a90 	vmov	s15, r6
 800f170:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f174:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f17c:	f141 8040 	bpl.w	8010200 <MEMS_runMagCal.constprop.21+0x14d4>
 800f180:	ee07 5a90 	vmov	s15, r5
 800f184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f188:	2100      	movs	r1, #0
 800f18a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f18e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f192:	bf4c      	ite	mi
 800f194:	f04f 0a01 	movmi.w	sl, #1
 800f198:	468a      	movpl	sl, r1
 800f19a:	2600      	movs	r6, #0
 800f19c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800f1d0 <MEMS_runMagCal.constprop.21+0x4a4>
 800f1a0:	eddf 7a0c 	vldr	s15, [pc, #48]	; 800f1d4 <MEMS_runMagCal.constprop.21+0x4a8>
 800f1a4:	f89b 407c 	ldrb.w	r4, [fp, #124]	; 0x7c
 800f1a8:	ee26 0a00 	vmul.f32	s0, s12, s0
 800f1ac:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f1b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1b4:	f140 8212 	bpl.w	800f5dc <MEMS_runMagCal.constprop.21+0x8b0>
 800f1b8:	2c01      	cmp	r4, #1
 800f1ba:	ed8d 0a10 	vstr	s0, [sp, #64]	; 0x40
 800f1be:	d928      	bls.n	800f212 <MEMS_runMagCal.constprop.21+0x4e6>
 800f1c0:	e014      	b.n	800f1ec <MEMS_runMagCal.constprop.21+0x4c0>
 800f1c2:	bf00      	nop
 800f1c4:	00000000 	.word	0x00000000
 800f1c8:	43020000 	.word	0x43020000
 800f1cc:	447a0000 	.word	0x447a0000
 800f1d0:	42c80000 	.word	0x42c80000
 800f1d4:	477fff00 	.word	0x477fff00
 800f1d8:	20001670 	.word	0x20001670
 800f1dc:	ffff8000 	.word	0xffff8000
 800f1e0:	427c0000 	.word	0x427c0000
 800f1e4:	3f666666 	.word	0x3f666666
 800f1e8:	423c0000 	.word	0x423c0000
 800f1ec:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800f1f0:	edcd 7a00 	vstr	s15, [sp]
 800f1f4:	f8bd 3000 	ldrh.w	r3, [sp]
 800f1f8:	2bc7      	cmp	r3, #199	; 0xc7
 800f1fa:	f201 8146 	bhi.w	801048a <MEMS_runMagCal.constprop.21+0x175e>
 800f1fe:	2400      	movs	r4, #0
 800f200:	23ff      	movs	r3, #255	; 0xff
 800f202:	f88b 407c 	strb.w	r4, [fp, #124]	; 0x7c
 800f206:	f88b 40b0 	strb.w	r4, [fp, #176]	; 0xb0
 800f20a:	f88b 4064 	strb.w	r4, [fp, #100]	; 0x64
 800f20e:	f88b 30b2 	strb.w	r3, [fp, #178]	; 0xb2
 800f212:	2e00      	cmp	r6, #0
 800f214:	f040 81d3 	bne.w	800f5be <MEMS_runMagCal.constprop.21+0x892>
 800f218:	f99b 3036 	ldrsb.w	r3, [fp, #54]	; 0x36
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	f2c0 82ca 	blt.w	800f7b6 <MEMS_runMagCal.constprop.21+0xa8a>
 800f222:	f89b 7035 	ldrb.w	r7, [fp, #53]	; 0x35
 800f226:	1c5a      	adds	r2, r3, #1
 800f228:	fb92 f3f7 	sdiv	r3, r2, r7
 800f22c:	fb07 2313 	mls	r3, r7, r3, r2
 800f230:	b25b      	sxtb	r3, r3
 800f232:	4699      	mov	r9, r3
 800f234:	f89b 5034 	ldrb.w	r5, [fp, #52]	; 0x34
 800f238:	f88b 3036 	strb.w	r3, [fp, #54]	; 0x36
 800f23c:	3501      	adds	r5, #1
 800f23e:	42bd      	cmp	r5, r7
 800f240:	bfa8      	it	ge
 800f242:	463d      	movge	r5, r7
 800f244:	b2e8      	uxtb	r0, r5
 800f246:	9101      	str	r1, [sp, #4]
 800f248:	f88b 0034 	strb.w	r0, [fp, #52]	; 0x34
 800f24c:	9000      	str	r0, [sp, #0]
 800f24e:	f009 f9c5 	bl	80185dc <roundf>
 800f252:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800f256:	eb0b 0349 	add.w	r3, fp, r9, lsl #1
 800f25a:	ee17 2a90 	vmov	r2, s15
 800f25e:	871a      	strh	r2, [r3, #56]	; 0x38
 800f260:	2e00      	cmp	r6, #0
 800f262:	f040 81ac 	bne.w	800f5be <MEMS_runMagCal.constprop.21+0x892>
 800f266:	f8db 3030 	ldr.w	r3, [fp, #48]	; 0x30
 800f26a:	e89d 0003 	ldmia.w	sp, {r0, r1}
 800f26e:	b12b      	cbz	r3, 800f27c <MEMS_runMagCal.constprop.21+0x550>
 800f270:	9a05      	ldr	r2, [sp, #20]
 800f272:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 800f276:	429a      	cmp	r2, r3
 800f278:	f0c0 8161 	bcc.w	800f53e <MEMS_runMagCal.constprop.21+0x812>
 800f27c:	2900      	cmp	r1, #0
 800f27e:	f040 815e 	bne.w	800f53e <MEMS_runMagCal.constprop.21+0x812>
 800f282:	1ea3      	subs	r3, r4, #2
 800f284:	2b01      	cmp	r3, #1
 800f286:	f240 8707 	bls.w	8010098 <MEMS_runMagCal.constprop.21+0x136c>
 800f28a:	eddb 6a05 	vldr	s13, [fp, #20]
 800f28e:	ed5f 7a2c 	vldr	s15, [pc, #-176]	; 800f1e0 <MEMS_runMagCal.constprop.21+0x4b4>
 800f292:	f8db 30b4 	ldr.w	r3, [fp, #180]	; 0xb4
 800f296:	f9bb 5012 	ldrsh.w	r5, [fp, #18]
 800f29a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f29c:	9804      	ldr	r0, [sp, #16]
 800f29e:	ed1f 7a2f 	vldr	s14, [pc, #-188]	; 800f1e4 <MEMS_runMagCal.constprop.21+0x4b8>
 800f2a2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800f2a6:	eec6 8a26 	vdiv.f32	s17, s12, s13
 800f2aa:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
 800f2ae:	3210      	adds	r2, #16
 800f2b0:	fb01 0505 	mla	r5, r1, r5, r0
 800f2b4:	42aa      	cmp	r2, r5
 800f2b6:	eeb0 8a08 	vmov.f32	s16, #8	; 0x40400000  3.0
 800f2ba:	ee28 8a88 	vmul.f32	s16, s17, s16
 800f2be:	eeb7 aa08 	vmov.f32	s20, #120	; 0x3fc00000  1.5
 800f2c2:	ee68 7a27 	vmul.f32	s15, s16, s15
 800f2c6:	ee68 9a08 	vmul.f32	s19, s16, s16
 800f2ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f2ce:	ee69 9a87 	vmul.f32	s19, s19, s14
 800f2d2:	edcd 7a00 	vstr	s15, [sp]
 800f2d6:	f8bd 9000 	ldrh.w	r9, [sp]
 800f2da:	ee28 aa0a 	vmul.f32	s20, s16, s20
 800f2de:	f0c0 867c 	bcc.w	800ffda <MEMS_runMagCal.constprop.21+0x12ae>
 800f2e2:	f89b 00b0 	ldrb.w	r0, [fp, #176]	; 0xb0
 800f2e6:	461d      	mov	r5, r3
 800f2e8:	2800      	cmp	r0, #0
 800f2ea:	f000 86cc 	beq.w	8010086 <MEMS_runMagCal.constprop.21+0x135a>
 800f2ee:	f99b 30b2 	ldrsb.w	r3, [fp, #178]	; 0xb2
 800f2f2:	9a04      	ldr	r2, [sp, #16]
 800f2f4:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 800f2f8:	f9b3 30d0 	ldrsh.w	r3, [r3, #208]	; 0xd0
 800f2fc:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800f300:	3308      	adds	r3, #8
 800f302:	442b      	add	r3, r5
 800f304:	4293      	cmp	r3, r2
 800f306:	f0c0 813c 	bcc.w	800f582 <MEMS_runMagCal.constprop.21+0x856>
 800f30a:	f1ba 0f00 	cmp.w	sl, #0
 800f30e:	d104      	bne.n	800f31a <MEMS_runMagCal.constprop.21+0x5ee>
 800f310:	f89b 30b0 	ldrb.w	r3, [fp, #176]	; 0xb0
 800f314:	2b0a      	cmp	r3, #10
 800f316:	f240 86ba 	bls.w	801008e <MEMS_runMagCal.constprop.21+0x1362>
 800f31a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	f000 86b6 	beq.w	801008e <MEMS_runMagCal.constprop.21+0x1362>
 800f322:	2300      	movs	r3, #0
 800f324:	461f      	mov	r7, r3
 800f326:	9300      	str	r3, [sp, #0]
 800f328:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 800f32c:	f8cd a018 	str.w	sl, [sp, #24]
 800f330:	e096      	b.n	800f460 <MEMS_runMagCal.constprop.21+0x734>
 800f332:	f9b2 a006 	ldrsh.w	sl, [r2, #6]
 800f336:	f89b 50b0 	ldrb.w	r5, [fp, #176]	; 0xb0
 800f33a:	2d00      	cmp	r5, #0
 800f33c:	f040 8156 	bne.w	800f5ec <MEMS_runMagCal.constprop.21+0x8c0>
 800f340:	fb94 f1f9 	sdiv	r1, r4, r9
 800f344:	f04f 0201 	mov.w	r2, #1
 800f348:	f88b 20b0 	strb.w	r2, [fp, #176]	; 0xb0
 800f34c:	f9bb 0012 	ldrsh.w	r0, [fp, #18]
 800f350:	9a04      	ldr	r2, [sp, #16]
 800f352:	f88b 50b2 	strb.w	r5, [fp, #178]	; 0xb2
 800f356:	fb03 2000 	mla	r0, r3, r0, r2
 800f35a:	fb09 4311 	mls	r3, r9, r1, r4
 800f35e:	2b00      	cmp	r3, #0
 800f360:	bfb8      	it	lt
 800f362:	444b      	addlt	r3, r9
 800f364:	b21b      	sxth	r3, r3
 800f366:	ee07 3a90 	vmov	s15, r3
 800f36a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f36e:	f8cb 00b4 	str.w	r0, [fp, #180]	; 0xb4
 800f372:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800f376:	f8ab 50d0 	strh.w	r5, [fp, #208]	; 0xd0
 800f37a:	f8ab 40d2 	strh.w	r4, [fp, #210]	; 0xd2
 800f37e:	f8ab 43c8 	strh.w	r4, [fp, #968]	; 0x3c8
 800f382:	f8ab 60d4 	strh.w	r6, [fp, #212]	; 0xd4
 800f386:	f8ab 63ca 	strh.w	r6, [fp, #970]	; 0x3ca
 800f38a:	f8ab a0d6 	strh.w	sl, [fp, #214]	; 0xd6
 800f38e:	f8ab a3cc 	strh.w	sl, [fp, #972]	; 0x3cc
 800f392:	f009 f923 	bl	80185dc <roundf>
 800f396:	fb96 f3f9 	sdiv	r3, r6, r9
 800f39a:	fb09 6613 	mls	r6, r9, r3, r6
 800f39e:	2e00      	cmp	r6, #0
 800f3a0:	bfb8      	it	lt
 800f3a2:	444e      	addlt	r6, r9
 800f3a4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800f3a8:	b236      	sxth	r6, r6
 800f3aa:	edcd 7a00 	vstr	s15, [sp]
 800f3ae:	ee07 6a90 	vmov	s15, r6
 800f3b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f3b6:	f89d 4000 	ldrb.w	r4, [sp]
 800f3ba:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800f3be:	f009 f90d 	bl	80185dc <roundf>
 800f3c2:	fb9a f3f9 	sdiv	r3, sl, r9
 800f3c6:	fb09 a213 	mls	r2, r9, r3, sl
 800f3ca:	2a00      	cmp	r2, #0
 800f3cc:	bfb8      	it	lt
 800f3ce:	444a      	addlt	r2, r9
 800f3d0:	b212      	sxth	r2, r2
 800f3d2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800f3d6:	edcd 7a00 	vstr	s15, [sp]
 800f3da:	ee07 2a90 	vmov	s15, r2
 800f3de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f3e2:	f89d 5000 	ldrb.w	r5, [sp]
 800f3e6:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800f3ea:	f009 f8f7 	bl	80185dc <roundf>
 800f3ee:	2c1f      	cmp	r4, #31
 800f3f0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800f3f4:	edcd 7a00 	vstr	s15, [sp]
 800f3f8:	f89d 3000 	ldrb.w	r3, [sp]
 800f3fc:	f240 81ea 	bls.w	800f7d4 <MEMS_runMagCal.constprop.21+0xaa8>
 800f400:	f8db 10b8 	ldr.w	r1, [fp, #184]	; 0xb8
 800f404:	f1a4 0220 	sub.w	r2, r4, #32
 800f408:	2001      	movs	r0, #1
 800f40a:	fa00 f202 	lsl.w	r2, r0, r2
 800f40e:	ea22 0201 	bic.w	r2, r2, r1
 800f412:	404a      	eors	r2, r1
 800f414:	f8cb 20b8 	str.w	r2, [fp, #184]	; 0xb8
 800f418:	2d1f      	cmp	r5, #31
 800f41a:	f240 81d1 	bls.w	800f7c0 <MEMS_runMagCal.constprop.21+0xa94>
 800f41e:	f8db 10c0 	ldr.w	r1, [fp, #192]	; 0xc0
 800f422:	f1a5 0220 	sub.w	r2, r5, #32
 800f426:	2001      	movs	r0, #1
 800f428:	fa00 f202 	lsl.w	r2, r0, r2
 800f42c:	ea22 0201 	bic.w	r2, r2, r1
 800f430:	404a      	eors	r2, r1
 800f432:	f8cb 20c0 	str.w	r2, [fp, #192]	; 0xc0
 800f436:	2b1f      	cmp	r3, #31
 800f438:	f200 81d6 	bhi.w	800f7e8 <MEMS_runMagCal.constprop.21+0xabc>
 800f43c:	f8db 20c8 	ldr.w	r2, [fp, #200]	; 0xc8
 800f440:	2101      	movs	r1, #1
 800f442:	fa01 f303 	lsl.w	r3, r1, r3
 800f446:	ea23 0302 	bic.w	r3, r3, r2
 800f44a:	4053      	eors	r3, r2
 800f44c:	f8cb 30c8 	str.w	r3, [fp, #200]	; 0xc8
 800f450:	9100      	str	r1, [sp, #0]
 800f452:	3701      	adds	r7, #1
 800f454:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f456:	b23f      	sxth	r7, r7
 800f458:	4297      	cmp	r7, r2
 800f45a:	463b      	mov	r3, r7
 800f45c:	f280 81d1 	bge.w	800f802 <MEMS_runMagCal.constprop.21+0xad6>
 800f460:	f818 1037 	ldrb.w	r1, [r8, r7, lsl #3]
 800f464:	eb08 02c7 	add.w	r2, r8, r7, lsl #3
 800f468:	2900      	cmp	r1, #0
 800f46a:	d0f2      	beq.n	800f452 <MEMS_runMagCal.constprop.21+0x726>
 800f46c:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 800f470:	f9b2 6004 	ldrsh.w	r6, [r2, #4]
 800f474:	ee07 4a90 	vmov	s15, r4
 800f478:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f47c:	ee28 7a89 	vmul.f32	s14, s17, s18
 800f480:	eef0 7ae7 	vabs.f32	s15, s15
 800f484:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f48c:	f57f af51 	bpl.w	800f332 <MEMS_runMagCal.constprop.21+0x606>
 800f490:	ee07 6a90 	vmov	s15, r6
 800f494:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f498:	f9b2 a006 	ldrsh.w	sl, [r2, #6]
 800f49c:	eef0 7ae7 	vabs.f32	s15, s15
 800f4a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f4a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4a8:	f77f af45 	ble.w	800f336 <MEMS_runMagCal.constprop.21+0x60a>
 800f4ac:	ee07 aa90 	vmov	s15, sl
 800f4b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f4b4:	eef0 7ae7 	vabs.f32	s15, s15
 800f4b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f4bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4c0:	dcc7      	bgt.n	800f452 <MEMS_runMagCal.constprop.21+0x726>
 800f4c2:	e738      	b.n	800f336 <MEMS_runMagCal.constprop.21+0x60a>
 800f4c4:	ed9b 0a05 	vldr	s0, [fp, #20]
 800f4c8:	4285      	cmp	r5, r0
 800f4ca:	bf28      	it	cs
 800f4cc:	4605      	movcs	r5, r0
 800f4ce:	4631      	mov	r1, r6
 800f4d0:	f10d 00aa 	add.w	r0, sp, #170	; 0xaa
 800f4d4:	4623      	mov	r3, r4
 800f4d6:	aa10      	add	r2, sp, #64	; 0x40
 800f4d8:	f88b 5034 	strb.w	r5, [fp, #52]	; 0x34
 800f4dc:	f7fe fbde 	bl	800dc9c <getMagStats.constprop.35>
 800f4e0:	ed1f 7abf 	vldr	s14, [pc, #-764]	; 800f1e8 <MEMS_runMagCal.constprop.21+0x4bc>
 800f4e4:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 800f4e8:	edd4 6a00 	vldr	s13, [r4]
 800f4ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f4f0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800f4f4:	eef0 7ae7 	vabs.f32	s15, s15
 800f4f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f4fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f500:	d505      	bpl.n	800f50e <MEMS_runMagCal.constprop.21+0x7e2>
 800f502:	eef4 6ac7 	vcmpe.f32	s13, s14
 800f506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f50a:	f101 8670 	bmi.w	80111ee <MEMS_runMagCal.constprop.21+0x24c2>
 800f50e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800f512:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f51a:	f141 866b 	bpl.w	80111f4 <MEMS_runMagCal.constprop.21+0x24c8>
 800f51e:	eef4 6ac7 	vcmpe.f32	s13, s14
 800f522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f526:	bf4c      	ite	mi
 800f528:	2302      	movmi	r3, #2
 800f52a:	2301      	movpl	r3, #1
 800f52c:	f89d 20a8 	ldrb.w	r2, [sp, #168]	; 0xa8
 800f530:	f88b 307c 	strb.w	r3, [fp, #124]	; 0x7c
 800f534:	2ac8      	cmp	r2, #200	; 0xc8
 800f536:	d902      	bls.n	800f53e <MEMS_runMagCal.constprop.21+0x812>
 800f538:	2302      	movs	r3, #2
 800f53a:	f88b 307c 	strb.w	r3, [fp, #124]	; 0x7c
 800f53e:	f20d 5d6c 	addw	sp, sp, #1388	; 0x56c
 800f542:	ecbd 8b10 	vpop	{d8-d15}
 800f546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f54a:	1e72      	subs	r2, r6, #1
 800f54c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f550:	920d      	str	r2, [sp, #52]	; 0x34
 800f552:	fb02 fe0e 	mul.w	lr, r2, lr
 800f556:	eba3 030e 	sub.w	r3, r3, lr
 800f55a:	9304      	str	r3, [sp, #16]
 800f55c:	960c      	str	r6, [sp, #48]	; 0x30
 800f55e:	4637      	mov	r7, r6
 800f560:	b166      	cbz	r6, 800f57c <MEMS_runMagCal.constprop.21+0x850>
 800f562:	2500      	movs	r5, #0
 800f564:	e401      	b.n	800ed6a <MEMS_runMagCal.constprop.21+0x3e>
 800f566:	f8db 20b4 	ldr.w	r2, [fp, #180]	; 0xb4
 800f56a:	4291      	cmp	r1, r2
 800f56c:	f4ff ac4f 	bcc.w	800ee0e <MEMS_runMagCal.constprop.21+0xe2>
 800f570:	f89b 30b0 	ldrb.w	r3, [fp, #176]	; 0xb0
 800f574:	2b00      	cmp	r3, #0
 800f576:	f47f ac66 	bne.w	800ee46 <MEMS_runMagCal.constprop.21+0x11a>
 800f57a:	e454      	b.n	800ee26 <MEMS_runMagCal.constprop.21+0xfa>
 800f57c:	f8ab 6018 	strh.w	r6, [fp, #24]
 800f580:	e430      	b.n	800ede4 <MEMS_runMagCal.constprop.21+0xb8>
 800f582:	2200      	movs	r2, #0
 800f584:	23ff      	movs	r3, #255	; 0xff
 800f586:	eeb0 0a48 	vmov.f32	s0, s16
 800f58a:	4648      	mov	r0, r9
 800f58c:	f88b 20b0 	strb.w	r2, [fp, #176]	; 0xb0
 800f590:	f88b 30b2 	strb.w	r3, [fp, #178]	; 0xb2
 800f594:	f7ff f882 	bl	800e69c <MEMS_updateMagBufferIndex.constprop.33>
 800f598:	e6b7      	b.n	800f30a <MEMS_runMagCal.constprop.21+0x5de>
 800f59a:	f8ad c0d8 	strh.w	ip, [sp, #216]	; 0xd8
 800f59e:	f1be 0f00 	cmp.w	lr, #0
 800f5a2:	d00a      	beq.n	800f5ba <MEMS_runMagCal.constprop.21+0x88e>
 800f5a4:	fa0f f78c 	sxth.w	r7, ip
 800f5a8:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
 800f5ac:	f6ff ad61 	blt.w	800f072 <MEMS_runMagCal.constprop.21+0x346>
 800f5b0:	2602      	movs	r6, #2
 800f5b2:	f04f 0a00 	mov.w	sl, #0
 800f5b6:	4651      	mov	r1, sl
 800f5b8:	e5f0      	b.n	800f19c <MEMS_runMagCal.constprop.21+0x470>
 800f5ba:	4676      	mov	r6, lr
 800f5bc:	e7f9      	b.n	800f5b2 <MEMS_runMagCal.constprop.21+0x886>
 800f5be:	9905      	ldr	r1, [sp, #20]
 800f5c0:	f8cb 1030 	str.w	r1, [fp, #48]	; 0x30
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	23ff      	movs	r3, #255	; 0xff
 800f5c8:	f88b 20b0 	strb.w	r2, [fp, #176]	; 0xb0
 800f5cc:	f88b 30b2 	strb.w	r3, [fp, #178]	; 0xb2
 800f5d0:	f20d 5d6c 	addw	sp, sp, #1388	; 0x56c
 800f5d4:	ecbd 8b10 	vpop	{d8-d15}
 800f5d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5dc:	2c01      	cmp	r4, #1
 800f5de:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 800f5e2:	eeb0 0a67 	vmov.f32	s0, s15
 800f5e6:	f63f ae0a 	bhi.w	800f1fe <MEMS_runMagCal.constprop.21+0x4d2>
 800f5ea:	e612      	b.n	800f212 <MEMS_runMagCal.constprop.21+0x4e6>
 800f5ec:	f9bb 03ca 	ldrsh.w	r0, [fp, #970]	; 0x3ca
 800f5f0:	f9bb 13c8 	ldrsh.w	r1, [fp, #968]	; 0x3c8
 800f5f4:	f9bb 33cc 	ldrsh.w	r3, [fp, #972]	; 0x3cc
 800f5f8:	1b80      	subs	r0, r0, r6
 800f5fa:	fb00 f000 	mul.w	r0, r0, r0
 800f5fe:	1b09      	subs	r1, r1, r4
 800f600:	fb01 0101 	mla	r1, r1, r1, r0
 800f604:	eba3 030a 	sub.w	r3, r3, sl
 800f608:	fb03 1303 	mla	r3, r3, r3, r1
 800f60c:	ee07 3a90 	vmov	s15, r3
 800f610:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f614:	eef4 9ae7 	vcmpe.f32	s19, s15
 800f618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f61c:	f73f af19 	bgt.w	800f452 <MEMS_runMagCal.constprop.21+0x726>
 800f620:	fb94 f3f9 	sdiv	r3, r4, r9
 800f624:	fb09 4313 	mls	r3, r9, r3, r4
 800f628:	2b00      	cmp	r3, #0
 800f62a:	bfb8      	it	lt
 800f62c:	444b      	addlt	r3, r9
 800f62e:	b21b      	sxth	r3, r3
 800f630:	ee07 3a90 	vmov	s15, r3
 800f634:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f638:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800f63c:	f008 ffce 	bl	80185dc <roundf>
 800f640:	fb96 f3f9 	sdiv	r3, r6, r9
 800f644:	fb09 6313 	mls	r3, r9, r3, r6
 800f648:	2b00      	cmp	r3, #0
 800f64a:	bfb8      	it	lt
 800f64c:	444b      	addlt	r3, r9
 800f64e:	b21b      	sxth	r3, r3
 800f650:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800f654:	edcd 7a01 	vstr	s15, [sp, #4]
 800f658:	ee07 3a90 	vmov	s15, r3
 800f65c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f660:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f664:	9202      	str	r2, [sp, #8]
 800f666:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800f66a:	f008 ffb7 	bl	80185dc <roundf>
 800f66e:	fb9a f3f9 	sdiv	r3, sl, r9
 800f672:	fb09 a313 	mls	r3, r9, r3, sl
 800f676:	2b00      	cmp	r3, #0
 800f678:	bfb8      	it	lt
 800f67a:	444b      	addlt	r3, r9
 800f67c:	b21b      	sxth	r3, r3
 800f67e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800f682:	edcd 7a01 	vstr	s15, [sp, #4]
 800f686:	ee07 3a90 	vmov	s15, r3
 800f68a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f68e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f692:	9203      	str	r2, [sp, #12]
 800f694:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800f698:	f008 ffa0 	bl	80185dc <roundf>
 800f69c:	f8db 30b8 	ldr.w	r3, [fp, #184]	; 0xb8
 800f6a0:	f8db 10bc 	ldr.w	r1, [fp, #188]	; 0xbc
 800f6a4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800f6a8:	edcd 7a01 	vstr	s15, [sp, #4]
 800f6ac:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f6b0:	9201      	str	r2, [sp, #4]
 800f6b2:	9a02      	ldr	r2, [sp, #8]
 800f6b4:	2a1f      	cmp	r2, #31
 800f6b6:	f240 852e 	bls.w	8010116 <MEMS_runMagCal.constprop.21+0x13ea>
 800f6ba:	f1a2 0e20 	sub.w	lr, r2, #32
 800f6be:	2201      	movs	r2, #1
 800f6c0:	fa02 fe0e 	lsl.w	lr, r2, lr
 800f6c4:	ea0e 0e03 	and.w	lr, lr, r3
 800f6c8:	9a03      	ldr	r2, [sp, #12]
 800f6ca:	f8db 30c0 	ldr.w	r3, [fp, #192]	; 0xc0
 800f6ce:	f8db 10c4 	ldr.w	r1, [fp, #196]	; 0xc4
 800f6d2:	2a1f      	cmp	r2, #31
 800f6d4:	f240 852e 	bls.w	8010134 <MEMS_runMagCal.constprop.21+0x1408>
 800f6d8:	f1a2 0120 	sub.w	r1, r2, #32
 800f6dc:	2201      	movs	r2, #1
 800f6de:	fa02 f101 	lsl.w	r1, r2, r1
 800f6e2:	4019      	ands	r1, r3
 800f6e4:	9a01      	ldr	r2, [sp, #4]
 800f6e6:	f8db 30cc 	ldr.w	r3, [fp, #204]	; 0xcc
 800f6ea:	f8db 00c8 	ldr.w	r0, [fp, #200]	; 0xc8
 800f6ee:	2a1f      	cmp	r2, #31
 800f6f0:	f240 8519 	bls.w	8010126 <MEMS_runMagCal.constprop.21+0x13fa>
 800f6f4:	f1a2 0020 	sub.w	r0, r2, #32
 800f6f8:	2201      	movs	r2, #1
 800f6fa:	fa02 f000 	lsl.w	r0, r2, r0
 800f6fe:	4003      	ands	r3, r0
 800f700:	f1be 0f00 	cmp.w	lr, #0
 800f704:	f040 851d 	bne.w	8010142 <MEMS_runMagCal.constprop.21+0x1416>
 800f708:	2900      	cmp	r1, #0
 800f70a:	f040 851e 	bne.w	801014a <MEMS_runMagCal.constprop.21+0x141e>
 800f70e:	2b00      	cmp	r3, #0
 800f710:	f040 851b 	bne.w	801014a <MEMS_runMagCal.constprop.21+0x141e>
 800f714:	f89b 00b1 	ldrb.w	r0, [fp, #177]	; 0xb1
 800f718:	f99b 10b2 	ldrsb.w	r1, [fp, #178]	; 0xb2
 800f71c:	4602      	mov	r2, r0
 800f71e:	3101      	adds	r1, #1
 800f720:	3501      	adds	r5, #1
 800f722:	4295      	cmp	r5, r2
 800f724:	fb91 f3f2 	sdiv	r3, r1, r2
 800f728:	fb02 1113 	mls	r1, r2, r3, r1
 800f72c:	bfa8      	it	ge
 800f72e:	4615      	movge	r5, r2
 800f730:	b249      	sxtb	r1, r1
 800f732:	f8db 30b4 	ldr.w	r3, [fp, #180]	; 0xb4
 800f736:	9a04      	ldr	r2, [sp, #16]
 800f738:	f9bb e012 	ldrsh.w	lr, [fp, #18]
 800f73c:	f8ab 43c8 	strh.w	r4, [fp, #968]	; 0x3c8
 800f740:	f101 0c04 	add.w	ip, r1, #4
 800f744:	eb0b 0ccc 	add.w	ip, fp, ip, lsl #3
 800f748:	b2ed      	uxtb	r5, r5
 800f74a:	1ad3      	subs	r3, r2, r3
 800f74c:	fb0e 3307 	mla	r3, lr, r7, r3
 800f750:	4285      	cmp	r5, r0
 800f752:	f88b 50b0 	strb.w	r5, [fp, #176]	; 0xb0
 800f756:	f8ab 63ca 	strh.w	r6, [fp, #970]	; 0x3ca
 800f75a:	f8ab a3cc 	strh.w	sl, [fp, #972]	; 0x3cc
 800f75e:	f88b 10b2 	strb.w	r1, [fp, #178]	; 0xb2
 800f762:	f8ac 40b2 	strh.w	r4, [ip, #178]	; 0xb2
 800f766:	f8ac 60b4 	strh.w	r6, [ip, #180]	; 0xb4
 800f76a:	f8ac a0b6 	strh.w	sl, [ip, #182]	; 0xb6
 800f76e:	f8ac 30b0 	strh.w	r3, [ip, #176]	; 0xb0
 800f772:	f000 856f 	beq.w	8010254 <MEMS_runMagCal.constprop.21+0x1528>
 800f776:	9b02      	ldr	r3, [sp, #8]
 800f778:	2b1f      	cmp	r3, #31
 800f77a:	f240 855f 	bls.w	801023c <MEMS_runMagCal.constprop.21+0x1510>
 800f77e:	f8db 20b8 	ldr.w	r2, [fp, #184]	; 0xb8
 800f782:	3b20      	subs	r3, #32
 800f784:	2101      	movs	r1, #1
 800f786:	fa01 f303 	lsl.w	r3, r1, r3
 800f78a:	ea23 0302 	bic.w	r3, r3, r2
 800f78e:	4053      	eors	r3, r2
 800f790:	f8cb 30b8 	str.w	r3, [fp, #184]	; 0xb8
 800f794:	9b03      	ldr	r3, [sp, #12]
 800f796:	2b1f      	cmp	r3, #31
 800f798:	f240 853e 	bls.w	8010218 <MEMS_runMagCal.constprop.21+0x14ec>
 800f79c:	f8db 20c0 	ldr.w	r2, [fp, #192]	; 0xc0
 800f7a0:	3b20      	subs	r3, #32
 800f7a2:	2101      	movs	r1, #1
 800f7a4:	fa01 f303 	lsl.w	r3, r1, r3
 800f7a8:	ea23 0302 	bic.w	r3, r3, r2
 800f7ac:	4053      	eors	r3, r2
 800f7ae:	f8cb 30c0 	str.w	r3, [fp, #192]	; 0xc0
 800f7b2:	9b01      	ldr	r3, [sp, #4]
 800f7b4:	e63f      	b.n	800f436 <MEMS_runMagCal.constprop.21+0x70a>
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	4699      	mov	r9, r3
 800f7ba:	f89b 7035 	ldrb.w	r7, [fp, #53]	; 0x35
 800f7be:	e539      	b.n	800f234 <MEMS_runMagCal.constprop.21+0x508>
 800f7c0:	f8db 10c4 	ldr.w	r1, [fp, #196]	; 0xc4
 800f7c4:	2201      	movs	r2, #1
 800f7c6:	40aa      	lsls	r2, r5
 800f7c8:	ea22 0201 	bic.w	r2, r2, r1
 800f7cc:	404a      	eors	r2, r1
 800f7ce:	f8cb 20c4 	str.w	r2, [fp, #196]	; 0xc4
 800f7d2:	e630      	b.n	800f436 <MEMS_runMagCal.constprop.21+0x70a>
 800f7d4:	f8db 10bc 	ldr.w	r1, [fp, #188]	; 0xbc
 800f7d8:	2201      	movs	r2, #1
 800f7da:	40a2      	lsls	r2, r4
 800f7dc:	ea22 0201 	bic.w	r2, r2, r1
 800f7e0:	404a      	eors	r2, r1
 800f7e2:	f8cb 20bc 	str.w	r2, [fp, #188]	; 0xbc
 800f7e6:	e617      	b.n	800f418 <MEMS_runMagCal.constprop.21+0x6ec>
 800f7e8:	f8db 20cc 	ldr.w	r2, [fp, #204]	; 0xcc
 800f7ec:	2101      	movs	r1, #1
 800f7ee:	3b20      	subs	r3, #32
 800f7f0:	fa01 f303 	lsl.w	r3, r1, r3
 800f7f4:	ea23 0302 	bic.w	r3, r3, r2
 800f7f8:	4053      	eors	r3, r2
 800f7fa:	f8cb 30cc 	str.w	r3, [fp, #204]	; 0xcc
 800f7fe:	9100      	str	r1, [sp, #0]
 800f800:	e627      	b.n	800f452 <MEMS_runMagCal.constprop.21+0x726>
 800f802:	f8dd a018 	ldr.w	sl, [sp, #24]
 800f806:	9a00      	ldr	r2, [sp, #0]
 800f808:	f89b 3024 	ldrb.w	r3, [fp, #36]	; 0x24
 800f80c:	431a      	orrs	r2, r3
 800f80e:	f88b 2024 	strb.w	r2, [fp, #36]	; 0x24
 800f812:	2a00      	cmp	r2, #0
 800f814:	f43f ae93 	beq.w	800f53e <MEMS_runMagCal.constprop.21+0x812>
 800f818:	f89b 30b0 	ldrb.w	r3, [fp, #176]	; 0xb0
 800f81c:	9306      	str	r3, [sp, #24]
 800f81e:	2b19      	cmp	r3, #25
 800f820:	f67f ae8d 	bls.w	800f53e <MEMS_runMagCal.constprop.21+0x812>
 800f824:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
 800f828:	9307      	str	r3, [sp, #28]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	f000 84ed 	beq.w	801020a <MEMS_runMagCal.constprop.21+0x14de>
 800f830:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
 800f834:	2b00      	cmp	r3, #0
 800f836:	f000 84e8 	beq.w	801020a <MEMS_runMagCal.constprop.21+0x14de>
 800f83a:	eddd 7a05 	vldr	s15, [sp, #20]
 800f83e:	ed9f 7ac8 	vldr	s14, [pc, #800]	; 800fb60 <MEMS_runMagCal.constprop.21+0xe34>
 800f842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f846:	ee06 3a90 	vmov	s13, r3
 800f84a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f84e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800f852:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
 800f856:	ee37 7a66 	vsub.f32	s14, s14, s13
 800f85a:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800f85e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f862:	f200 84d2 	bhi.w	801020a <MEMS_runMagCal.constprop.21+0x14de>
 800f866:	f1ba 0f00 	cmp.w	sl, #0
 800f86a:	f43f ae68 	beq.w	800f53e <MEMS_runMagCal.constprop.21+0x812>
 800f86e:	ed9f 7abc 	vldr	s14, [pc, #752]	; 800fb60 <MEMS_runMagCal.constprop.21+0xe34>
 800f872:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f876:	ed9d 7a07 	vldr	s14, [sp, #28]
 800f87a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800f87e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800f882:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f886:	eef4 7ae6 	vcmpe.f32	s15, s13
 800f88a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f88e:	bf4c      	ite	mi
 800f890:	2301      	movmi	r3, #1
 800f892:	2300      	movpl	r3, #0
 800f894:	9308      	str	r3, [sp, #32]
 800f896:	f8db 20c4 	ldr.w	r2, [fp, #196]	; 0xc4
 800f89a:	9203      	str	r2, [sp, #12]
 800f89c:	f8db 20c8 	ldr.w	r2, [fp, #200]	; 0xc8
 800f8a0:	9202      	str	r2, [sp, #8]
 800f8a2:	f8db 20c0 	ldr.w	r2, [fp, #192]	; 0xc0
 800f8a6:	9204      	str	r2, [sp, #16]
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	f8db 20cc 	ldr.w	r2, [fp, #204]	; 0xcc
 800f8ae:	eddb 8a05 	vldr	s17, [fp, #20]
 800f8b2:	f8db 90b8 	ldr.w	r9, [fp, #184]	; 0xb8
 800f8b6:	f8db 80bc 	ldr.w	r8, [fp, #188]	; 0xbc
 800f8ba:	9201      	str	r2, [sp, #4]
 800f8bc:	4619      	mov	r1, r3
 800f8be:	9329      	str	r3, [sp, #164]	; 0xa4
 800f8c0:	461d      	mov	r5, r3
 800f8c2:	469e      	mov	lr, r3
 800f8c4:	932a      	str	r3, [sp, #168]	; 0xa8
 800f8c6:	932b      	str	r3, [sp, #172]	; 0xac
 800f8c8:	932c      	str	r3, [sp, #176]	; 0xb0
 800f8ca:	932d      	str	r3, [sp, #180]	; 0xb4
 800f8cc:	f04f 0c01 	mov.w	ip, #1
 800f8d0:	469a      	mov	sl, r3
 800f8d2:	f1ae 0320 	sub.w	r3, lr, #32
 800f8d6:	9a04      	ldr	r2, [sp, #16]
 800f8d8:	9f03      	ldr	r7, [sp, #12]
 800f8da:	fa0c f40e 	lsl.w	r4, ip, lr
 800f8de:	fa0c f303 	lsl.w	r3, ip, r3
 800f8e2:	ea03 0002 	and.w	r0, r3, r2
 800f8e6:	ea04 0208 	and.w	r2, r4, r8
 800f8ea:	9200      	str	r2, [sp, #0]
 800f8ec:	9a01      	ldr	r2, [sp, #4]
 800f8ee:	ea03 0609 	and.w	r6, r3, r9
 800f8f2:	4013      	ands	r3, r2
 800f8f4:	9a00      	ldr	r2, [sp, #0]
 800f8f6:	4027      	ands	r7, r4
 800f8f8:	2e00      	cmp	r6, #0
 800f8fa:	bf0c      	ite	eq
 800f8fc:	4656      	moveq	r6, sl
 800f8fe:	f10a 0601 	addne.w	r6, sl, #1
 800f902:	2800      	cmp	r0, #0
 800f904:	bf0c      	ite	eq
 800f906:	4628      	moveq	r0, r5
 800f908:	1c68      	addne	r0, r5, #1
 800f90a:	2a00      	cmp	r2, #0
 800f90c:	bf0c      	ite	eq
 800f90e:	4652      	moveq	r2, sl
 800f910:	f10a 0201 	addne.w	r2, sl, #1
 800f914:	2f00      	cmp	r7, #0
 800f916:	bf18      	it	ne
 800f918:	3501      	addne	r5, #1
 800f91a:	fa5f fa8e 	uxtb.w	sl, lr
 800f91e:	9f02      	ldr	r7, [sp, #8]
 800f920:	f1ba 0f1f 	cmp.w	sl, #31
 800f924:	ea04 0407 	and.w	r4, r4, r7
 800f928:	b2f6      	uxtb	r6, r6
 800f92a:	bf88      	it	hi
 800f92c:	461c      	movhi	r4, r3
 800f92e:	b2c0      	uxtb	r0, r0
 800f930:	b2d2      	uxtb	r2, r2
 800f932:	f10e 0e01 	add.w	lr, lr, #1
 800f936:	bf94      	ite	ls
 800f938:	4692      	movls	sl, r2
 800f93a:	46b2      	movhi	sl, r6
 800f93c:	b2ed      	uxtb	r5, r5
 800f93e:	bf88      	it	hi
 800f940:	4605      	movhi	r5, r0
 800f942:	2c00      	cmp	r4, #0
 800f944:	bf0c      	ite	eq
 800f946:	460c      	moveq	r4, r1
 800f948:	1c4c      	addne	r4, r1, #1
 800f94a:	f1be 0f40 	cmp.w	lr, #64	; 0x40
 800f94e:	b2e1      	uxtb	r1, r4
 800f950:	d1bf      	bne.n	800f8d2 <MEMS_runMagCal.constprop.21+0xba6>
 800f952:	4652      	mov	r2, sl
 800f954:	2a05      	cmp	r2, #5
 800f956:	f240 833b 	bls.w	800ffd0 <MEMS_runMagCal.constprop.21+0x12a4>
 800f95a:	2d05      	cmp	r5, #5
 800f95c:	f240 8338 	bls.w	800ffd0 <MEMS_runMagCal.constprop.21+0x12a4>
 800f960:	2905      	cmp	r1, #5
 800f962:	f240 8335 	bls.w	800ffd0 <MEMS_runMagCal.constprop.21+0x12a4>
 800f966:	f99b 30b2 	ldrsb.w	r3, [fp, #178]	; 0xb2
 800f96a:	f89b 40b1 	ldrb.w	r4, [fp, #177]	; 0xb1
 800f96e:	9300      	str	r3, [sp, #0]
 800f970:	9b06      	ldr	r3, [sp, #24]
 800f972:	42a3      	cmp	r3, r4
 800f974:	f000 855a 	beq.w	801042c <MEMS_runMagCal.constprop.21+0x1700>
 800f978:	9b00      	ldr	r3, [sp, #0]
 800f97a:	1c5d      	adds	r5, r3, #1
 800f97c:	9b06      	ldr	r3, [sp, #24]
 800f97e:	1aea      	subs	r2, r5, r3
 800f980:	fb92 f3f4 	sdiv	r3, r2, r4
 800f984:	fb04 2313 	mls	r3, r4, r3, r2
 800f988:	b219      	sxth	r1, r3
 800f98a:	2900      	cmp	r1, #0
 800f98c:	bfb8      	it	lt
 800f98e:	191b      	addlt	r3, r3, r4
 800f990:	46a0      	mov	r8, r4
 800f992:	bfb8      	it	lt
 800f994:	b219      	sxthlt	r1, r3
 800f996:	f101 0315 	add.w	r3, r1, #21
 800f99a:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 800f99e:	2200      	movs	r2, #0
 800f9a0:	f9b3 602a 	ldrsh.w	r6, [r3, #42]	; 0x2a
 800f9a4:	f9b3 702c 	ldrsh.w	r7, [r3, #44]	; 0x2c
 800f9a8:	f9b3 002e 	ldrsh.w	r0, [r3, #46]	; 0x2e
 800f9ac:	f8ad 6050 	strh.w	r6, [sp, #80]	; 0x50
 800f9b0:	f8ad 6058 	strh.w	r6, [sp, #88]	; 0x58
 800f9b4:	46b1      	mov	r9, r6
 800f9b6:	f8ad 7052 	strh.w	r7, [sp, #82]	; 0x52
 800f9ba:	f8ad 705a 	strh.w	r7, [sp, #90]	; 0x5a
 800f9be:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 800f9c2:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 800f9c6:	900a      	str	r0, [sp, #40]	; 0x28
 800f9c8:	9001      	str	r0, [sp, #4]
 800f9ca:	46ba      	mov	sl, r7
 800f9cc:	9202      	str	r2, [sp, #8]
 800f9ce:	9203      	str	r2, [sp, #12]
 800f9d0:	9204      	str	r2, [sp, #16]
 800f9d2:	9209      	str	r2, [sp, #36]	; 0x24
 800f9d4:	920b      	str	r2, [sp, #44]	; 0x2c
 800f9d6:	920c      	str	r2, [sp, #48]	; 0x30
 800f9d8:	910d      	str	r1, [sp, #52]	; 0x34
 800f9da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f9dc:	eb03 0e02 	add.w	lr, r3, r2
 800f9e0:	fb9e f3f8 	sdiv	r3, lr, r8
 800f9e4:	fb08 e313 	mls	r3, r8, r3, lr
 800f9e8:	b2db      	uxtb	r3, r3
 800f9ea:	3315      	adds	r3, #21
 800f9ec:	eb0b 0ec3 	add.w	lr, fp, r3, lsl #3
 800f9f0:	f9be e02a 	ldrsh.w	lr, [lr, #42]	; 0x2a
 800f9f4:	45b6      	cmp	lr, r6
 800f9f6:	dd02      	ble.n	800f9fe <MEMS_runMagCal.constprop.21+0xcd2>
 800f9f8:	2101      	movs	r1, #1
 800f9fa:	4676      	mov	r6, lr
 800f9fc:	9102      	str	r1, [sp, #8]
 800f9fe:	eb0b 0cc3 	add.w	ip, fp, r3, lsl #3
 800fa02:	f9bc c02c 	ldrsh.w	ip, [ip, #44]	; 0x2c
 800fa06:	45bc      	cmp	ip, r7
 800fa08:	dd02      	ble.n	800fa10 <MEMS_runMagCal.constprop.21+0xce4>
 800fa0a:	2101      	movs	r1, #1
 800fa0c:	4667      	mov	r7, ip
 800fa0e:	9104      	str	r1, [sp, #16]
 800fa10:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 800fa14:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800fa18:	4283      	cmp	r3, r0
 800fa1a:	dd02      	ble.n	800fa22 <MEMS_runMagCal.constprop.21+0xcf6>
 800fa1c:	2101      	movs	r1, #1
 800fa1e:	4618      	mov	r0, r3
 800fa20:	9103      	str	r1, [sp, #12]
 800fa22:	45ce      	cmp	lr, r9
 800fa24:	bfba      	itte	lt
 800fa26:	2101      	movlt	r1, #1
 800fa28:	910b      	strlt	r1, [sp, #44]	; 0x2c
 800fa2a:	46ce      	movge	lr, r9
 800fa2c:	45d4      	cmp	ip, sl
 800fa2e:	bfbc      	itt	lt
 800fa30:	2101      	movlt	r1, #1
 800fa32:	910c      	strlt	r1, [sp, #48]	; 0x30
 800fa34:	9901      	ldr	r1, [sp, #4]
 800fa36:	bfa8      	it	ge
 800fa38:	46d4      	movge	ip, sl
 800fa3a:	428b      	cmp	r3, r1
 800fa3c:	da03      	bge.n	800fa46 <MEMS_runMagCal.constprop.21+0xd1a>
 800fa3e:	930a      	str	r3, [sp, #40]	; 0x28
 800fa40:	9301      	str	r3, [sp, #4]
 800fa42:	2301      	movs	r3, #1
 800fa44:	9309      	str	r3, [sp, #36]	; 0x24
 800fa46:	3201      	adds	r2, #1
 800fa48:	9906      	ldr	r1, [sp, #24]
 800fa4a:	b2d3      	uxtb	r3, r2
 800fa4c:	4299      	cmp	r1, r3
 800fa4e:	46f1      	mov	r9, lr
 800fa50:	46e2      	mov	sl, ip
 800fa52:	d8c2      	bhi.n	800f9da <MEMS_runMagCal.constprop.21+0xcae>
 800fa54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	f040 84e4 	bne.w	8010424 <MEMS_runMagCal.constprop.21+0x16f8>
 800fa5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fa5e:	b10b      	cbz	r3, 800fa64 <MEMS_runMagCal.constprop.21+0xd38>
 800fa60:	f8ad e058 	strh.w	lr, [sp, #88]	; 0x58
 800fa64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa66:	b11b      	cbz	r3, 800fa70 <MEMS_runMagCal.constprop.21+0xd44>
 800fa68:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 800fa6c:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
 800fa70:	9b04      	ldr	r3, [sp, #16]
 800fa72:	b10b      	cbz	r3, 800fa78 <MEMS_runMagCal.constprop.21+0xd4c>
 800fa74:	f8ad 7052 	strh.w	r7, [sp, #82]	; 0x52
 800fa78:	9b03      	ldr	r3, [sp, #12]
 800fa7a:	b10b      	cbz	r3, 800fa80 <MEMS_runMagCal.constprop.21+0xd54>
 800fa7c:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 800fa80:	9b02      	ldr	r3, [sp, #8]
 800fa82:	b10b      	cbz	r3, 800fa88 <MEMS_runMagCal.constprop.21+0xd5c>
 800fa84:	f8ad 6050 	strh.w	r6, [sp, #80]	; 0x50
 800fa88:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fa8c:	eec7 9aa8 	vdiv.f32	s19, s15, s17
 800fa90:	f8bd 6052 	ldrh.w	r6, [sp, #82]	; 0x52
 800fa94:	f8bd 205a 	ldrh.w	r2, [sp, #90]	; 0x5a
 800fa98:	f8bd 7050 	ldrh.w	r7, [sp, #80]	; 0x50
 800fa9c:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 800faa0:	f8bd 0054 	ldrh.w	r0, [sp, #84]	; 0x54
 800faa4:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
 800faa8:	1ab2      	subs	r2, r6, r2
 800faaa:	f89b 6064 	ldrb.w	r6, [fp, #100]	; 0x64
 800faae:	1afb      	subs	r3, r7, r3
 800fab0:	1a41      	subs	r1, r0, r1
 800fab2:	b21b      	sxth	r3, r3
 800fab4:	ed9f 5a2b 	vldr	s10, [pc, #172]	; 800fb64 <MEMS_runMagCal.constprop.21+0xe38>
 800fab8:	b212      	sxth	r2, r2
 800faba:	ee29 5a85 	vmul.f32	s10, s19, s10
 800fabe:	b209      	sxth	r1, r1
 800fac0:	2e00      	cmp	r6, #0
 800fac2:	f040 846e 	bne.w	80103a2 <MEMS_runMagCal.constprop.21+0x1676>
 800fac6:	f89b 007c 	ldrb.w	r0, [fp, #124]	; 0x7c
 800faca:	fab0 f080 	clz	r0, r0
 800face:	0940      	lsrs	r0, r0, #5
 800fad0:	ee07 3a90 	vmov	s15, r3
 800fad4:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 800fad8:	ee25 6a06 	vmul.f32	s12, s10, s12
 800fadc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fae0:	eef4 7ac6 	vcmpe.f32	s15, s12
 800fae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fae8:	f300 8442 	bgt.w	8010370 <MEMS_runMagCal.constprop.21+0x1644>
 800faec:	ee07 2a10 	vmov	s14, r2
 800faf0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800faf4:	eeb4 6ac7 	vcmpe.f32	s12, s14
 800faf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fafc:	f100 8438 	bmi.w	8010370 <MEMS_runMagCal.constprop.21+0x1644>
 800fb00:	ee06 1a90 	vmov	s13, r1
 800fb04:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800fb08:	eeb4 6ae6 	vcmpe.f32	s12, s13
 800fb0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb10:	f100 842e 	bmi.w	8010370 <MEMS_runMagCal.constprop.21+0x1644>
 800fb14:	4299      	cmp	r1, r3
 800fb16:	460e      	mov	r6, r1
 800fb18:	bfa8      	it	ge
 800fb1a:	461e      	movge	r6, r3
 800fb1c:	429a      	cmp	r2, r3
 800fb1e:	4692      	mov	sl, r2
 800fb20:	bfb8      	it	lt
 800fb22:	469a      	movlt	sl, r3
 800fb24:	4296      	cmp	r6, r2
 800fb26:	bfa8      	it	ge
 800fb28:	4616      	movge	r6, r2
 800fb2a:	458a      	cmp	sl, r1
 800fb2c:	bfb8      	it	lt
 800fb2e:	468a      	movlt	sl, r1
 800fb30:	459a      	cmp	sl, r3
 800fb32:	f8ad 605a 	strh.w	r6, [sp, #90]	; 0x5a
 800fb36:	dd02      	ble.n	800fb3e <MEMS_runMagCal.constprop.21+0xe12>
 800fb38:	429e      	cmp	r6, r3
 800fb3a:	f2c0 8482 	blt.w	8010442 <MEMS_runMagCal.constprop.21+0x1716>
 800fb3e:	4633      	mov	r3, r6
 800fb40:	2700      	movs	r7, #0
 800fb42:	4592      	cmp	sl, r2
 800fb44:	dd02      	ble.n	800fb4c <MEMS_runMagCal.constprop.21+0xe20>
 800fb46:	4296      	cmp	r6, r2
 800fb48:	f2c0 855d 	blt.w	8010606 <MEMS_runMagCal.constprop.21+0x18da>
 800fb4c:	4551      	cmp	r1, sl
 800fb4e:	da02      	bge.n	800fb56 <MEMS_runMagCal.constprop.21+0xe2a>
 800fb50:	42b1      	cmp	r1, r6
 800fb52:	f300 8550 	bgt.w	80105f6 <MEMS_runMagCal.constprop.21+0x18ca>
 800fb56:	2f00      	cmp	r7, #0
 800fb58:	f040 854e 	bne.w	80105f8 <MEMS_runMagCal.constprop.21+0x18cc>
 800fb5c:	e00a      	b.n	800fb74 <MEMS_runMagCal.constprop.21+0xe48>
 800fb5e:	bf00      	nop
 800fb60:	3a83126f 	.word	0x3a83126f
 800fb64:	42340000 	.word	0x42340000
 800fb68:	3faccccd 	.word	0x3faccccd
 800fb6c:	00000000 	.word	0x00000000
 800fb70:	358637bd 	.word	0x358637bd
 800fb74:	2800      	cmp	r0, #0
 800fb76:	f000 8504 	beq.w	8010582 <MEMS_runMagCal.constprop.21+0x1856>
 800fb7a:	eeb4 5ae7 	vcmpe.f32	s10, s15
 800fb7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb82:	f300 84fa 	bgt.w	801057a <MEMS_runMagCal.constprop.21+0x184e>
 800fb86:	eeb4 5ac7 	vcmpe.f32	s10, s14
 800fb8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb8e:	f300 84f4 	bgt.w	801057a <MEMS_runMagCal.constprop.21+0x184e>
 800fb92:	eeb4 5ae6 	vcmpe.f32	s10, s13
 800fb96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb9a:	bfcc      	ite	gt
 800fb9c:	2301      	movgt	r3, #1
 800fb9e:	2300      	movle	r3, #0
 800fba0:	9300      	str	r3, [sp, #0]
 800fba2:	ed1f 6a0f 	vldr	s12, [pc, #-60]	; 800fb68 <MEMS_runMagCal.constprop.21+0xe3c>
 800fba6:	ee05 aa90 	vmov	s11, sl
 800fbaa:	ee25 6a06 	vmul.f32	s12, s10, s12
 800fbae:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800fbb2:	eef4 5ac6 	vcmpe.f32	s11, s12
 800fbb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbba:	db1e      	blt.n	800fbfa <MEMS_runMagCal.constprop.21+0xece>
 800fbbc:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 800fbc0:	ee05 3a90 	vmov	s11, r3
 800fbc4:	eeb7 6a02 	vmov.f32	s12, #114	; 0x3f900000  1.125
 800fbc8:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800fbcc:	ee25 6a06 	vmul.f32	s12, s10, s12
 800fbd0:	eef4 5ac6 	vcmpe.f32	s11, s12
 800fbd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbd8:	db0f      	blt.n	800fbfa <MEMS_runMagCal.constprop.21+0xece>
 800fbda:	ebba 0f46 	cmp.w	sl, r6, lsl #1
 800fbde:	da0c      	bge.n	800fbfa <MEMS_runMagCal.constprop.21+0xece>
 800fbe0:	ee06 6a10 	vmov	s12, r6
 800fbe4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800fbe8:	eef7 5a04 	vmov.f32	s11, #116	; 0x3fa00000  1.250
 800fbec:	ee26 6a25 	vmul.f32	s12, s12, s11
 800fbf0:	eeb4 5ac6 	vcmpe.f32	s10, s12
 800fbf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbf8:	d419      	bmi.n	800fc2e <MEMS_runMagCal.constprop.21+0xf02>
 800fbfa:	eeb7 6a02 	vmov.f32	s12, #114	; 0x3f900000  1.125
 800fbfe:	ee67 7a86 	vmul.f32	s15, s15, s12
 800fc02:	eeb4 5ae7 	vcmpe.f32	s10, s15
 800fc06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc0a:	f300 81e1 	bgt.w	800ffd0 <MEMS_runMagCal.constprop.21+0x12a4>
 800fc0e:	ee27 7a06 	vmul.f32	s14, s14, s12
 800fc12:	eeb4 5ac7 	vcmpe.f32	s10, s14
 800fc16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc1a:	f300 81d9 	bgt.w	800ffd0 <MEMS_runMagCal.constprop.21+0x12a4>
 800fc1e:	ee66 6a86 	vmul.f32	s13, s13, s12
 800fc22:	eeb4 5ae6 	vcmpe.f32	s10, s13
 800fc26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc2a:	f300 81d1 	bgt.w	800ffd0 <MEMS_runMagCal.constprop.21+0x12a4>
 800fc2e:	9b06      	ldr	r3, [sp, #24]
 800fc30:	42a3      	cmp	r3, r4
 800fc32:	f000 849a 	beq.w	801056a <MEMS_runMagCal.constprop.21+0x183e>
 800fc36:	1aeb      	subs	r3, r5, r3
 800fc38:	fb93 f2f8 	sdiv	r2, r3, r8
 800fc3c:	fb08 3212 	mls	r2, r8, r2, r3
 800fc40:	b213      	sxth	r3, r2
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	bfbc      	itt	lt
 800fc46:	18a3      	addlt	r3, r4, r2
 800fc48:	b21b      	sxthlt	r3, r3
 800fc4a:	b25b      	sxtb	r3, r3
 800fc4c:	f04f 0900 	mov.w	r9, #0
 800fc50:	f103 0e01 	add.w	lr, r3, #1
 800fc54:	2301      	movs	r3, #1
 800fc56:	f8cd 9004 	str.w	r9, [sp, #4]
 800fc5a:	9302      	str	r3, [sp, #8]
 800fc5c:	f10e 33ff 	add.w	r3, lr, #4294967295
 800fc60:	fb93 f2f8 	sdiv	r2, r3, r8
 800fc64:	fb08 3212 	mls	r2, r8, r2, r3
 800fc68:	b251      	sxtb	r1, r2
 800fc6a:	2900      	cmp	r1, #0
 800fc6c:	bfb8      	it	lt
 800fc6e:	1912      	addlt	r2, r2, r4
 800fc70:	fb9e f3f8 	sdiv	r3, lr, r8
 800fc74:	fb08 e313 	mls	r3, r8, r3, lr
 800fc78:	bfb8      	it	lt
 800fc7a:	b251      	sxtblt	r1, r2
 800fc7c:	b25b      	sxtb	r3, r3
 800fc7e:	3104      	adds	r1, #4
 800fc80:	3304      	adds	r3, #4
 800fc82:	eb0b 02c3 	add.w	r2, fp, r3, lsl #3
 800fc86:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 800fc8a:	f9b2 20b2 	ldrsh.w	r2, [r2, #178]	; 0xb2
 800fc8e:	f9b0 00b2 	ldrsh.w	r0, [r0, #178]	; 0xb2
 800fc92:	1a16      	subs	r6, r2, r0
 800fc94:	bf4c      	ite	mi
 800fc96:	1a82      	submi	r2, r0, r2
 800fc98:	b232      	sxthpl	r2, r6
 800fc9a:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 800fc9e:	eb0b 06c3 	add.w	r6, fp, r3, lsl #3
 800fca2:	f9b0 00b4 	ldrsh.w	r0, [r0, #180]	; 0xb4
 800fca6:	f9b6 70b4 	ldrsh.w	r7, [r6, #180]	; 0xb4
 800fcaa:	bf48      	it	mi
 800fcac:	b212      	sxthmi	r2, r2
 800fcae:	1a3e      	subs	r6, r7, r0
 800fcb0:	bf44      	itt	mi
 800fcb2:	1bc0      	submi	r0, r0, r7
 800fcb4:	b206      	sxthmi	r6, r0
 800fcb6:	eb0b 07c3 	add.w	r7, fp, r3, lsl #3
 800fcba:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 800fcbe:	f9b7 70b6 	ldrsh.w	r7, [r7, #182]	; 0xb6
 800fcc2:	f9b0 00b6 	ldrsh.w	r0, [r0, #182]	; 0xb6
 800fcc6:	bf58      	it	pl
 800fcc8:	b236      	sxthpl	r6, r6
 800fcca:	ebb7 0c00 	subs.w	ip, r7, r0
 800fcce:	bf48      	it	mi
 800fcd0:	eba0 0c07 	submi.w	ip, r0, r7
 800fcd4:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 800fcd8:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 800fcdc:	f8b3 10b0 	ldrh.w	r1, [r3, #176]	; 0xb0
 800fce0:	f8b0 30b0 	ldrh.w	r3, [r0, #176]	; 0xb0
 800fce4:	1ac9      	subs	r1, r1, r3
 800fce6:	b209      	sxth	r1, r1
 800fce8:	2900      	cmp	r1, #0
 800fcea:	fa0f fc8c 	sxth.w	ip, ip
 800fcee:	dd21      	ble.n	800fd34 <MEMS_runMagCal.constprop.21+0x1008>
 800fcf0:	1993      	adds	r3, r2, r6
 800fcf2:	4463      	add	r3, ip
 800fcf4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fcf8:	fb02 f303 	mul.w	r3, r2, r3
 800fcfc:	ee07 3a90 	vmov	s15, r3
 800fd00:	ee07 1a10 	vmov	s14, r1
 800fd04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fd08:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fd0c:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800fd10:	9b01      	ldr	r3, [sp, #4]
 800fd12:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800fd16:	3301      	adds	r3, #1
 800fd18:	b2db      	uxtb	r3, r3
 800fd1a:	9301      	str	r3, [sp, #4]
 800fd1c:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800fd20:	edcd 7a03 	vstr	s15, [sp, #12]
 800fd24:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800fd28:	2b96      	cmp	r3, #150	; 0x96
 800fd2a:	bfc4      	itt	gt
 800fd2c:	f109 0901 	addgt.w	r9, r9, #1
 800fd30:	fa5f f989 	uxtbgt.w	r9, r9
 800fd34:	9b02      	ldr	r3, [sp, #8]
 800fd36:	9a06      	ldr	r2, [sp, #24]
 800fd38:	3301      	adds	r3, #1
 800fd3a:	b2db      	uxtb	r3, r3
 800fd3c:	429a      	cmp	r2, r3
 800fd3e:	9302      	str	r3, [sp, #8]
 800fd40:	f10e 0e01 	add.w	lr, lr, #1
 800fd44:	d88a      	bhi.n	800fc5c <MEMS_runMagCal.constprop.21+0xf30>
 800fd46:	9b01      	ldr	r3, [sp, #4]
 800fd48:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 800fd4c:	4599      	cmp	r9, r3
 800fd4e:	f340 813f 	ble.w	800ffd0 <MEMS_runMagCal.constprop.21+0x12a4>
 800fd52:	9b08      	ldr	r3, [sp, #32]
 800fd54:	b92b      	cbnz	r3, 800fd62 <MEMS_runMagCal.constprop.21+0x1036>
 800fd56:	f89b 307c 	ldrb.w	r3, [fp, #124]	; 0x7c
 800fd5a:	3b02      	subs	r3, #2
 800fd5c:	2b01      	cmp	r3, #1
 800fd5e:	f240 83a4 	bls.w	80104aa <MEMS_runMagCal.constprop.21+0x177e>
 800fd62:	a82e      	add	r0, sp, #184	; 0xb8
 800fd64:	2220      	movs	r2, #32
 800fd66:	2100      	movs	r1, #0
 800fd68:	f00b fbe5 	bl	801b536 <memset>
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	931a      	str	r3, [sp, #104]	; 0x68
 800fd70:	931b      	str	r3, [sp, #108]	; 0x6c
 800fd72:	931c      	str	r3, [sp, #112]	; 0x70
 800fd74:	9b06      	ldr	r3, [sp, #24]
 800fd76:	42a3      	cmp	r3, r4
 800fd78:	f000 83f1 	beq.w	801055e <MEMS_runMagCal.constprop.21+0x1832>
 800fd7c:	1aed      	subs	r5, r5, r3
 800fd7e:	fb95 f3f4 	sdiv	r3, r5, r4
 800fd82:	fb04 5313 	mls	r3, r4, r3, r5
 800fd86:	b219      	sxth	r1, r3
 800fd88:	2900      	cmp	r1, #0
 800fd8a:	bfbc      	itt	lt
 800fd8c:	191b      	addlt	r3, r3, r4
 800fd8e:	b219      	sxthlt	r1, r3
 800fd90:	9b06      	ldr	r3, [sp, #24]
 800fd92:	b39b      	cbz	r3, 800fdfc <MEMS_runMagCal.constprop.21+0x10d0>
 800fd94:	ed5f 7a8b 	vldr	s15, [pc, #-556]	; 800fb6c <MEMS_runMagCal.constprop.21+0xe40>
 800fd98:	2000      	movs	r0, #0
 800fd9a:	eeb0 7a67 	vmov.f32	s14, s15
 800fd9e:	eef0 6a67 	vmov.f32	s13, s15
 800fda2:	180a      	adds	r2, r1, r0
 800fda4:	fb92 f3f4 	sdiv	r3, r2, r4
 800fda8:	fb04 2313 	mls	r3, r4, r3, r2
 800fdac:	b2db      	uxtb	r3, r3
 800fdae:	3304      	adds	r3, #4
 800fdb0:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 800fdb4:	3001      	adds	r0, #1
 800fdb6:	f9b3 20b2 	ldrsh.w	r2, [r3, #178]	; 0xb2
 800fdba:	ee05 2a10 	vmov	s10, r2
 800fdbe:	f9b3 20b4 	ldrsh.w	r2, [r3, #180]	; 0xb4
 800fdc2:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 800fdc6:	ee05 2a90 	vmov	s11, r2
 800fdca:	ee06 3a10 	vmov	s12, r3
 800fdce:	9a06      	ldr	r2, [sp, #24]
 800fdd0:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 800fdd4:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800fdd8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800fddc:	b2c3      	uxtb	r3, r0
 800fdde:	4293      	cmp	r3, r2
 800fde0:	ee76 6a85 	vadd.f32	s13, s13, s10
 800fde4:	ee37 7a25 	vadd.f32	s14, s14, s11
 800fde8:	ee77 7a86 	vadd.f32	s15, s15, s12
 800fdec:	d3d9      	bcc.n	800fda2 <MEMS_runMagCal.constprop.21+0x1076>
 800fdee:	edcd 6a1a 	vstr	s13, [sp, #104]	; 0x68
 800fdf2:	ed8d 7a1b 	vstr	s14, [sp, #108]	; 0x6c
 800fdf6:	edcd 7a1c 	vstr	s15, [sp, #112]	; 0x70
 800fdfa:	4613      	mov	r3, r2
 800fdfc:	eddd 7a06 	vldr	s15, [sp, #24]
 800fe00:	eddd 6a1a 	vldr	s13, [sp, #104]	; 0x68
 800fe04:	ed9d 7a1b 	vldr	s14, [sp, #108]	; 0x6c
 800fe08:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 800fe0c:	eddd 7a1c 	vldr	s15, [sp, #112]	; 0x70
 800fe10:	eec6 1aa4 	vdiv.f32	s3, s13, s9
 800fe14:	ee87 2a24 	vdiv.f32	s4, s14, s9
 800fe18:	eec7 2aa4 	vdiv.f32	s5, s15, s9
 800fe1c:	edcd 1a1a 	vstr	s3, [sp, #104]	; 0x68
 800fe20:	ed8d 2a1b 	vstr	s4, [sp, #108]	; 0x6c
 800fe24:	edcd 2a1c 	vstr	s5, [sp, #112]	; 0x70
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	f001 830e 	beq.w	801144a <MEMS_runMagCal.constprop.21+0x271e>
 800fe2e:	ed5f 7ab1 	vldr	s15, [pc, #-708]	; 800fb6c <MEMS_runMagCal.constprop.21+0xe40>
 800fe32:	2000      	movs	r0, #0
 800fe34:	eeb0 4a67 	vmov.f32	s8, s15
 800fe38:	eef0 6a67 	vmov.f32	s13, s15
 800fe3c:	eef0 3a67 	vmov.f32	s7, s15
 800fe40:	eeb0 3a67 	vmov.f32	s6, s15
 800fe44:	eeb0 7a67 	vmov.f32	s14, s15
 800fe48:	180a      	adds	r2, r1, r0
 800fe4a:	fb92 f3f4 	sdiv	r3, r2, r4
 800fe4e:	fb04 2313 	mls	r3, r4, r3, r2
 800fe52:	b2db      	uxtb	r3, r3
 800fe54:	3304      	adds	r3, #4
 800fe56:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 800fe5a:	3001      	adds	r0, #1
 800fe5c:	f9b3 20b2 	ldrsh.w	r2, [r3, #178]	; 0xb2
 800fe60:	ee05 2a10 	vmov	s10, r2
 800fe64:	f9b3 20b4 	ldrsh.w	r2, [r3, #180]	; 0xb4
 800fe68:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 800fe6c:	ee05 2a90 	vmov	s11, r2
 800fe70:	ee06 3a10 	vmov	s12, r3
 800fe74:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 800fe78:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800fe7c:	ee35 5a61 	vsub.f32	s10, s10, s3
 800fe80:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800fe84:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800fe88:	ee36 6a62 	vsub.f32	s12, s12, s5
 800fe8c:	ee25 1a05 	vmul.f32	s2, s10, s10
 800fe90:	9a06      	ldr	r2, [sp, #24]
 800fe92:	ee65 0a25 	vmul.f32	s1, s10, s11
 800fe96:	b2c3      	uxtb	r3, r0
 800fe98:	ee25 5a06 	vmul.f32	s10, s10, s12
 800fe9c:	ee37 7a01 	vadd.f32	s14, s14, s2
 800fea0:	ee25 1aa5 	vmul.f32	s2, s11, s11
 800fea4:	ee65 5a86 	vmul.f32	s11, s11, s12
 800fea8:	ee26 6a06 	vmul.f32	s12, s12, s12
 800feac:	4293      	cmp	r3, r2
 800feae:	ee33 3a20 	vadd.f32	s6, s6, s1
 800feb2:	ee73 3a85 	vadd.f32	s7, s7, s10
 800feb6:	ee76 6a81 	vadd.f32	s13, s13, s2
 800feba:	ee34 4a25 	vadd.f32	s8, s8, s11
 800febe:	ee77 7a86 	vadd.f32	s15, s15, s12
 800fec2:	d3c1      	bcc.n	800fe48 <MEMS_runMagCal.constprop.21+0x111c>
 800fec4:	ee23 6aa3 	vmul.f32	s12, s7, s7
 800fec8:	ee63 5a03 	vmul.f32	s11, s6, s6
 800fecc:	ee24 5a04 	vmul.f32	s10, s8, s8
 800fed0:	ee75 5a86 	vadd.f32	s11, s11, s12
 800fed4:	ee37 6a26 	vadd.f32	s12, s14, s13
 800fed8:	ee75 5a85 	vadd.f32	s11, s11, s10
 800fedc:	ed1f 5adc 	vldr	s10, [pc, #-880]	; 800fb70 <MEMS_runMagCal.constprop.21+0xe44>
 800fee0:	ed8d 7a2e 	vstr	s14, [sp, #184]	; 0xb8
 800fee4:	eef4 5ac5 	vcmpe.f32	s11, s10
 800fee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feec:	ed8d 3a2f 	vstr	s6, [sp, #188]	; 0xbc
 800fef0:	edcd 3a30 	vstr	s7, [sp, #192]	; 0xc0
 800fef4:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 800fef8:	ed8d 4a32 	vstr	s8, [sp, #200]	; 0xc8
 800fefc:	edcd 7a33 	vstr	s15, [sp, #204]	; 0xcc
 800ff00:	ee36 6a27 	vadd.f32	s12, s12, s15
 800ff04:	f141 8200 	bpl.w	8011308 <MEMS_runMagCal.constprop.21+0x25dc>
 800ff08:	eeb0 7ac7 	vabs.f32	s14, s14
 800ff0c:	eef0 6ae6 	vabs.f32	s13, s13
 800ff10:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800ff14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff18:	bf54      	ite	pl
 800ff1a:	eeb0 9a66 	vmovpl.f32	s18, s13
 800ff1e:	eeb0 9a47 	vmovmi.f32	s18, s14
 800ff22:	ee86 0a24 	vdiv.f32	s0, s12, s9
 800ff26:	eeb0 8ae7 	vabs.f32	s16, s15
 800ff2a:	eeb4 8ac9 	vcmpe.f32	s16, s18
 800ff2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff32:	eef4 6a47 	vcmp.f32	s13, s14
 800ff36:	bfd8      	it	le
 800ff38:	eeb0 9a48 	vmovle.f32	s18, s16
 800ff3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff40:	bf48      	it	mi
 800ff42:	eef0 6a47 	vmovmi.f32	s13, s14
 800ff46:	eeb4 8a66 	vcmp.f32	s16, s13
 800ff4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff4e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ff52:	bf48      	it	mi
 800ff54:	eeb0 8a66 	vmovmi.f32	s16, s13
 800ff58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff5c:	eeb1 aac0 	vsqrt.f32	s20, s0
 800ff60:	d501      	bpl.n	800ff66 <MEMS_runMagCal.constprop.21+0x123a>
 800ff62:	f008 fe4f 	bl	8018c04 <sqrtf>
 800ff66:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800ff6a:	ee29 7a07 	vmul.f32	s14, s18, s14
 800ff6e:	ee68 7a8a 	vmul.f32	s15, s17, s20
 800ff72:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800ff76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff7a:	d41b      	bmi.n	800ffb4 <MEMS_runMagCal.constprop.21+0x1288>
 800ff7c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800ff80:	ee29 9a07 	vmul.f32	s18, s18, s14
 800ff84:	eeb4 8ac9 	vcmpe.f32	s16, s18
 800ff88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff8c:	dd03      	ble.n	800ff96 <MEMS_runMagCal.constprop.21+0x126a>
 800ff8e:	f89b 30b0 	ldrb.w	r3, [fp, #176]	; 0xb0
 800ff92:	2b22      	cmp	r3, #34	; 0x22
 800ff94:	d90e      	bls.n	800ffb4 <MEMS_runMagCal.constprop.21+0x1288>
 800ff96:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 801027c <MEMS_runMagCal.constprop.21+0x1550>
 800ff9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ff9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffa2:	dc07      	bgt.n	800ffb4 <MEMS_runMagCal.constprop.21+0x1288>
 800ffa4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800ffa8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ffac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffb0:	f140 832f 	bpl.w	8010612 <MEMS_runMagCal.constprop.21+0x18e6>
 800ffb4:	eddd 7a05 	vldr	s15, [sp, #20]
 800ffb8:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 800ffbc:	eddf 7ab0 	vldr	s15, [pc, #704]	; 8010280 <MEMS_runMagCal.constprop.21+0x1554>
 800ffc0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ffc4:	f008 fb0a 	bl	80185dc <roundf>
 800ffc8:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800ffcc:	ed8b 0a0a 	vstr	s0, [fp, #40]	; 0x28
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	f88b 3024 	strb.w	r3, [fp, #36]	; 0x24
 800ffd6:	f7ff bab2 	b.w	800f53e <MEMS_runMagCal.constprop.21+0x812>
 800ffda:	f242 3228 	movw	r2, #9000	; 0x2328
 800ffde:	4295      	cmp	r5, r2
 800ffe0:	f89b 00b0 	ldrb.w	r0, [fp, #176]	; 0xb0
 800ffe4:	f89b 10b1 	ldrb.w	r1, [fp, #177]	; 0xb1
 800ffe8:	f99b 20b2 	ldrsb.w	r2, [fp, #178]	; 0xb2
 800ffec:	bf1a      	itte	ne
 800ffee:	f5a5 550c 	subne.w	r5, r5, #8960	; 0x2300
 800fff2:	3d28      	subne	r5, #40	; 0x28
 800fff4:	2500      	moveq	r5, #0
 800fff6:	4288      	cmp	r0, r1
 800fff8:	f102 0201 	add.w	r2, r2, #1
 800fffc:	f000 8118 	beq.w	8010230 <MEMS_runMagCal.constprop.21+0x1504>
 8010000:	1a12      	subs	r2, r2, r0
 8010002:	fb92 f4f1 	sdiv	r4, r2, r1
 8010006:	fb01 2214 	mls	r2, r1, r4, r2
 801000a:	b214      	sxth	r4, r2
 801000c:	2c00      	cmp	r4, #0
 801000e:	bfbc      	itt	lt
 8010010:	1852      	addlt	r2, r2, r1
 8010012:	b214      	sxthlt	r4, r2
 8010014:	b207      	sxth	r7, r0
 8010016:	b397      	cbz	r7, 801007e <MEMS_runMagCal.constprop.21+0x1352>
 8010018:	2200      	movs	r2, #0
 801001a:	1b5b      	subs	r3, r3, r5
 801001c:	b29e      	uxth	r6, r3
 801001e:	9200      	str	r2, [sp, #0]
 8010020:	4696      	mov	lr, r2
 8010022:	e003      	b.n	801002c <MEMS_runMagCal.constprop.21+0x1300>
 8010024:	3201      	adds	r2, #1
 8010026:	b213      	sxth	r3, r2
 8010028:	429f      	cmp	r7, r3
 801002a:	dd1e      	ble.n	801006a <MEMS_runMagCal.constprop.21+0x133e>
 801002c:	eb04 0c02 	add.w	ip, r4, r2
 8010030:	fb9c f3f1 	sdiv	r3, ip, r1
 8010034:	fb01 c313 	mls	r3, r1, r3, ip
 8010038:	b2db      	uxtb	r3, r3
 801003a:	3304      	adds	r3, #4
 801003c:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8010040:	f8b3 c0b0 	ldrh.w	ip, [r3, #176]	; 0xb0
 8010044:	44b4      	add	ip, r6
 8010046:	fa0f fc8c 	sxth.w	ip, ip
 801004a:	f1bc 0f00 	cmp.w	ip, #0
 801004e:	f8a3 c0b0 	strh.w	ip, [r3, #176]	; 0xb0
 8010052:	dae7      	bge.n	8010024 <MEMS_runMagCal.constprop.21+0x12f8>
 8010054:	1e43      	subs	r3, r0, #1
 8010056:	b128      	cbz	r0, 8010064 <MEMS_runMagCal.constprop.21+0x1338>
 8010058:	2001      	movs	r0, #1
 801005a:	9000      	str	r0, [sp, #0]
 801005c:	f04f 0e01 	mov.w	lr, #1
 8010060:	b2d8      	uxtb	r0, r3
 8010062:	e7df      	b.n	8010024 <MEMS_runMagCal.constprop.21+0x12f8>
 8010064:	f04f 0e01 	mov.w	lr, #1
 8010068:	e7dc      	b.n	8010024 <MEMS_runMagCal.constprop.21+0x12f8>
 801006a:	9b00      	ldr	r3, [sp, #0]
 801006c:	2b00      	cmp	r3, #0
 801006e:	f040 8200 	bne.w	8010472 <MEMS_runMagCal.constprop.21+0x1746>
 8010072:	f1be 0f00 	cmp.w	lr, #0
 8010076:	f040 80f4 	bne.w	8010262 <MEMS_runMagCal.constprop.21+0x1536>
 801007a:	f89b 00b0 	ldrb.w	r0, [fp, #176]	; 0xb0
 801007e:	f8cb 50b4 	str.w	r5, [fp, #180]	; 0xb4
 8010082:	f7ff b931 	b.w	800f2e8 <MEMS_runMagCal.constprop.21+0x5bc>
 8010086:	f1ba 0f00 	cmp.w	sl, #0
 801008a:	f47f a946 	bne.w	800f31a <MEMS_runMagCal.constprop.21+0x5ee>
 801008e:	2300      	movs	r3, #0
 8010090:	9300      	str	r3, [sp, #0]
 8010092:	461a      	mov	r2, r3
 8010094:	f7ff bbb8 	b.w	800f808 <MEMS_runMagCal.constprop.21+0xadc>
 8010098:	42b8      	cmp	r0, r7
 801009a:	f000 80f7 	beq.w	801028c <MEMS_runMagCal.constprop.21+0x1560>
 801009e:	2c03      	cmp	r4, #3
 80100a0:	f47f a8f3 	bne.w	800f28a <MEMS_runMagCal.constprop.21+0x55e>
 80100a4:	eddb 7a0c 	vldr	s15, [fp, #48]	; 0x30
 80100a8:	eddf 6a75 	vldr	s13, [pc, #468]	; 8010280 <MEMS_runMagCal.constprop.21+0x1554>
 80100ac:	ed9b 7a0a 	vldr	s14, [fp, #40]	; 0x28
 80100b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80100b4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80100b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80100bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80100c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100c4:	f77f a8e1 	ble.w	800f28a <MEMS_runMagCal.constprop.21+0x55e>
 80100c8:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	f43f a8dc 	beq.w	800f28a <MEMS_runMagCal.constprop.21+0x55e>
 80100d2:	eddd 7a05 	vldr	s15, [sp, #20]
 80100d6:	330a      	adds	r3, #10
 80100d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80100dc:	ee07 3a10 	vmov	s14, r3
 80100e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80100e4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80100e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80100ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100f0:	f77f a8cb 	ble.w	800f28a <MEMS_runMagCal.constprop.21+0x55e>
 80100f4:	f89b 3025 	ldrb.w	r3, [fp, #37]	; 0x25
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	f47f a8c6 	bne.w	800f28a <MEMS_runMagCal.constprop.21+0x55e>
 80100fe:	f89b 3064 	ldrb.w	r3, [fp, #100]	; 0x64
 8010102:	2b00      	cmp	r3, #0
 8010104:	f43f aa1b 	beq.w	800f53e <MEMS_runMagCal.constprop.21+0x812>
 8010108:	f89b 306c 	ldrb.w	r3, [fp, #108]	; 0x6c
 801010c:	2bff      	cmp	r3, #255	; 0xff
 801010e:	f47f aa16 	bne.w	800f53e <MEMS_runMagCal.constprop.21+0x812>
 8010112:	f7ff b8ba 	b.w	800f28a <MEMS_runMagCal.constprop.21+0x55e>
 8010116:	4613      	mov	r3, r2
 8010118:	2201      	movs	r2, #1
 801011a:	fa02 fe03 	lsl.w	lr, r2, r3
 801011e:	ea0e 0e01 	and.w	lr, lr, r1
 8010122:	f7ff bad1 	b.w	800f6c8 <MEMS_runMagCal.constprop.21+0x99c>
 8010126:	4613      	mov	r3, r2
 8010128:	2201      	movs	r2, #1
 801012a:	fa02 f303 	lsl.w	r3, r2, r3
 801012e:	4003      	ands	r3, r0
 8010130:	f7ff bae6 	b.w	800f700 <MEMS_runMagCal.constprop.21+0x9d4>
 8010134:	4613      	mov	r3, r2
 8010136:	2201      	movs	r2, #1
 8010138:	fa02 f303 	lsl.w	r3, r2, r3
 801013c:	4019      	ands	r1, r3
 801013e:	f7ff bad1 	b.w	800f6e4 <MEMS_runMagCal.constprop.21+0x9b8>
 8010142:	b111      	cbz	r1, 801014a <MEMS_runMagCal.constprop.21+0x141e>
 8010144:	2b00      	cmp	r3, #0
 8010146:	f47f a984 	bne.w	800f452 <MEMS_runMagCal.constprop.21+0x726>
 801014a:	f89b 00b1 	ldrb.w	r0, [fp, #177]	; 0xb1
 801014e:	f99b 10b2 	ldrsb.w	r1, [fp, #178]	; 0xb2
 8010152:	4285      	cmp	r5, r0
 8010154:	f000 817b 	beq.w	801044e <MEMS_runMagCal.constprop.21+0x1722>
 8010158:	3101      	adds	r1, #1
 801015a:	eba1 0e05 	sub.w	lr, r1, r5
 801015e:	fb9e f3f0 	sdiv	r3, lr, r0
 8010162:	fb00 e313 	mls	r3, r0, r3, lr
 8010166:	fa0f fe83 	sxth.w	lr, r3
 801016a:	f1be 0f00 	cmp.w	lr, #0
 801016e:	bfb8      	it	lt
 8010170:	181b      	addlt	r3, r3, r0
 8010172:	4602      	mov	r2, r0
 8010174:	bfb8      	it	lt
 8010176:	fa0f fe83 	sxthlt.w	lr, r3
 801017a:	f04f 0c00 	mov.w	ip, #0
 801017e:	9007      	str	r0, [sp, #28]
 8010180:	9108      	str	r1, [sp, #32]
 8010182:	eb0e 000c 	add.w	r0, lr, ip
 8010186:	fb90 f3f2 	sdiv	r3, r0, r2
 801018a:	fb02 0313 	mls	r3, r2, r3, r0
 801018e:	b2db      	uxtb	r3, r3
 8010190:	3304      	adds	r3, #4
 8010192:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8010196:	f10c 0c01 	add.w	ip, ip, #1
 801019a:	f9b3 00b2 	ldrsh.w	r0, [r3, #178]	; 0xb2
 801019e:	f9b3 10b4 	ldrsh.w	r1, [r3, #180]	; 0xb4
 80101a2:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 80101a6:	1a20      	subs	r0, r4, r0
 80101a8:	ee06 0a90 	vmov	s13, r0
 80101ac:	1a70      	subs	r0, r6, r1
 80101ae:	ee07 0a10 	vmov	s14, r0
 80101b2:	ebaa 0303 	sub.w	r3, sl, r3
 80101b6:	ee07 3a90 	vmov	s15, r3
 80101ba:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80101be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80101c2:	eef0 6ae6 	vabs.f32	s13, s13
 80101c6:	eeb0 7ac7 	vabs.f32	s14, s14
 80101ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80101ce:	ee36 7a87 	vadd.f32	s14, s13, s14
 80101d2:	eef0 7ae7 	vabs.f32	s15, s15
 80101d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80101da:	fa5f f38c 	uxtb.w	r3, ip
 80101de:	eeb4 aae7 	vcmpe.f32	s20, s15
 80101e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101e6:	f73f a934 	bgt.w	800f452 <MEMS_runMagCal.constprop.21+0x726>
 80101ea:	429d      	cmp	r5, r3
 80101ec:	d8c9      	bhi.n	8010182 <MEMS_runMagCal.constprop.21+0x1456>
 80101ee:	9807      	ldr	r0, [sp, #28]
 80101f0:	9908      	ldr	r1, [sp, #32]
 80101f2:	f7ff ba95 	b.w	800f720 <MEMS_runMagCal.constprop.21+0x9f4>
 80101f6:	f04f 0a00 	mov.w	sl, #0
 80101fa:	2101      	movs	r1, #1
 80101fc:	f7fe bfcd 	b.w	800f19a <MEMS_runMagCal.constprop.21+0x46e>
 8010200:	f04f 0a00 	mov.w	sl, #0
 8010204:	4651      	mov	r1, sl
 8010206:	f7fe bfc8 	b.w	800f19a <MEMS_runMagCal.constprop.21+0x46e>
 801020a:	f1ba 0f00 	cmp.w	sl, #0
 801020e:	d12e      	bne.n	801026e <MEMS_runMagCal.constprop.21+0x1542>
 8010210:	2300      	movs	r3, #0
 8010212:	9308      	str	r3, [sp, #32]
 8010214:	f7ff bb3f 	b.w	800f896 <MEMS_runMagCal.constprop.21+0xb6a>
 8010218:	f8db 20c4 	ldr.w	r2, [fp, #196]	; 0xc4
 801021c:	2101      	movs	r1, #1
 801021e:	fa01 f303 	lsl.w	r3, r1, r3
 8010222:	ea23 0302 	bic.w	r3, r3, r2
 8010226:	4053      	eors	r3, r2
 8010228:	f8cb 30c4 	str.w	r3, [fp, #196]	; 0xc4
 801022c:	f7ff bac1 	b.w	800f7b2 <MEMS_runMagCal.constprop.21+0xa86>
 8010230:	fb92 f4f0 	sdiv	r4, r2, r0
 8010234:	fb00 2214 	mls	r2, r0, r4, r2
 8010238:	b214      	sxth	r4, r2
 801023a:	e6eb      	b.n	8010014 <MEMS_runMagCal.constprop.21+0x12e8>
 801023c:	f8db 20bc 	ldr.w	r2, [fp, #188]	; 0xbc
 8010240:	2101      	movs	r1, #1
 8010242:	fa01 f303 	lsl.w	r3, r1, r3
 8010246:	ea23 0302 	bic.w	r3, r3, r2
 801024a:	4053      	eors	r3, r2
 801024c:	f8cb 30bc 	str.w	r3, [fp, #188]	; 0xbc
 8010250:	f7ff baa0 	b.w	800f794 <MEMS_runMagCal.constprop.21+0xa68>
 8010254:	eeb0 0a48 	vmov.f32	s0, s16
 8010258:	4648      	mov	r0, r9
 801025a:	f7fe fa1f 	bl	800e69c <MEMS_updateMagBufferIndex.constprop.33>
 801025e:	f7ff ba8a 	b.w	800f776 <MEMS_runMagCal.constprop.21+0xa4a>
 8010262:	eeb0 0a48 	vmov.f32	s0, s16
 8010266:	4648      	mov	r0, r9
 8010268:	f7fe fa18 	bl	800e69c <MEMS_updateMagBufferIndex.constprop.33>
 801026c:	e705      	b.n	801007a <MEMS_runMagCal.constprop.21+0x134e>
 801026e:	eddd 7a05 	vldr	s15, [sp, #20]
 8010272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010276:	f7ff bafa 	b.w	800f86e <MEMS_runMagCal.constprop.21+0xb42>
 801027a:	bf00      	nop
 801027c:	42960000 	.word	0x42960000
 8010280:	3a83126f 	.word	0x3a83126f
 8010284:	00000000 	.word	0x00000000
 8010288:	3c23d70a 	.word	0x3c23d70a
 801028c:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8010284 <MEMS_runMagCal.constprop.21+0x1558>
 8010290:	f109 0901 	add.w	r9, r9, #1
 8010294:	ac11      	add	r4, sp, #68	; 0x44
 8010296:	b2ba      	uxth	r2, r7
 8010298:	fb99 fcf7 	sdiv	ip, r9, r7
 801029c:	ed8d 7a10 	vstr	s14, [sp, #64]	; 0x40
 80102a0:	fb07 9c1c 	mls	ip, r7, ip, r9
 80102a4:	ed84 7a00 	vstr	s14, [r4]
 80102a8:	2a00      	cmp	r2, #0
 80102aa:	f000 80dc 	beq.w	8010466 <MEMS_runMagCal.constprop.21+0x173a>
 80102ae:	1e51      	subs	r1, r2, #1
 80102b0:	1c6b      	adds	r3, r5, #1
 80102b2:	2200      	movs	r2, #0
 80102b4:	fa1f fc8c 	uxth.w	ip, ip
 80102b8:	fa13 f981 	uxtah	r9, r3, r1
 80102bc:	eeb0 6a47 	vmov.f32	s12, s14
 80102c0:	eef0 7a47 	vmov.f32	s15, s14
 80102c4:	ebac 0c05 	sub.w	ip, ip, r5
 80102c8:	4616      	mov	r6, r2
 80102ca:	4629      	mov	r1, r5
 80102cc:	f241 2e5c 	movw	lr, #4700	; 0x125c
 80102d0:	4613      	mov	r3, r2
 80102d2:	428d      	cmp	r5, r1
 80102d4:	eb0c 0001 	add.w	r0, ip, r1
 80102d8:	dc23      	bgt.n	8010322 <MEMS_runMagCal.constprop.21+0x15f6>
 80102da:	fb90 f3f7 	sdiv	r3, r0, r7
 80102de:	fb07 0313 	mls	r3, r7, r3, r0
 80102e2:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 80102e6:	2201      	movs	r2, #1
 80102e8:	8f18      	ldrh	r0, [r3, #56]	; 0x38
 80102ea:	f5a0 5392 	sub.w	r3, r0, #4672	; 0x1240
 80102ee:	4570      	cmp	r0, lr
 80102f0:	f1a3 031c 	sub.w	r3, r3, #28
 80102f4:	bf98      	it	ls
 80102f6:	ebae 0300 	subls.w	r3, lr, r0
 80102fa:	b29b      	uxth	r3, r3
 80102fc:	fb03 f303 	mul.w	r3, r3, r3
 8010300:	ee07 3a10 	vmov	s14, r3
 8010304:	ee06 0a90 	vmov	s13, r0
 8010308:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801030c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010310:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010314:	4416      	add	r6, r2
 8010316:	ee36 6a26 	vadd.f32	s12, s12, s13
 801031a:	eeb0 7a67 	vmov.f32	s14, s15
 801031e:	b2b6      	uxth	r6, r6
 8010320:	4613      	mov	r3, r2
 8010322:	3101      	adds	r1, #1
 8010324:	4589      	cmp	r9, r1
 8010326:	d1d4      	bne.n	80102d2 <MEMS_runMagCal.constprop.21+0x15a6>
 8010328:	2b00      	cmp	r3, #0
 801032a:	f040 808d 	bne.w	8010448 <MEMS_runMagCal.constprop.21+0x171c>
 801032e:	2a00      	cmp	r2, #0
 8010330:	f040 8096 	bne.w	8010460 <MEMS_runMagCal.constprop.21+0x1734>
 8010334:	2e00      	cmp	r6, #0
 8010336:	d149      	bne.n	80103cc <MEMS_runMagCal.constprop.21+0x16a0>
 8010338:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 801033c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010344:	dd30      	ble.n	80103a8 <MEMS_runMagCal.constprop.21+0x167c>
 8010346:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 801034a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801034e:	2402      	movs	r4, #2
 8010350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010354:	f88b 407c 	strb.w	r4, [fp, #124]	; 0x7c
 8010358:	f77e af97 	ble.w	800f28a <MEMS_runMagCal.constprop.21+0x55e>
 801035c:	2301      	movs	r3, #1
 801035e:	f88b 3025 	strb.w	r3, [fp, #37]	; 0x25
 8010362:	e69c      	b.n	801009e <MEMS_runMagCal.constprop.21+0x1372>
 8010364:	f008 fc4e 	bl	8018c04 <sqrtf>
 8010368:	eddb 5a05 	vldr	s11, [fp, #20]
 801036c:	f7fe beb0 	b.w	800f0d0 <MEMS_runMagCal.constprop.21+0x3a4>
 8010370:	9b00      	ldr	r3, [sp, #0]
 8010372:	f8db 20b4 	ldr.w	r2, [fp, #180]	; 0xb4
 8010376:	f8db 1030 	ldr.w	r1, [fp, #48]	; 0x30
 801037a:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801037e:	f9b3 30d0 	ldrsh.w	r3, [r3, #208]	; 0xd0
 8010382:	4413      	add	r3, r2
 8010384:	4299      	cmp	r1, r3
 8010386:	f4bf ae23 	bcs.w	800ffd0 <MEMS_runMagCal.constprop.21+0x12a4>
 801038a:	9907      	ldr	r1, [sp, #28]
 801038c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010390:	fb03 f301 	mul.w	r3, r3, r1
 8010394:	3364      	adds	r3, #100	; 0x64
 8010396:	4293      	cmp	r3, r2
 8010398:	bf38      	it	cc
 801039a:	4613      	movcc	r3, r2
 801039c:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30
 80103a0:	e616      	b.n	800ffd0 <MEMS_runMagCal.constprop.21+0x12a4>
 80103a2:	2000      	movs	r0, #0
 80103a4:	f7ff bb94 	b.w	800fad0 <MEMS_runMagCal.constprop.21+0xda4>
 80103a8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80103ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80103b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103b4:	d428      	bmi.n	8010408 <MEMS_runMagCal.constprop.21+0x16dc>
 80103b6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80103ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80103be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103c2:	f89b 407c 	ldrb.w	r4, [fp, #124]	; 0x7c
 80103c6:	f77f ae6a 	ble.w	801009e <MEMS_runMagCal.constprop.21+0x1372>
 80103ca:	e7c7      	b.n	801035c <MEMS_runMagCal.constprop.21+0x1630>
 80103cc:	ee07 6a10 	vmov	s14, r6
 80103d0:	eef8 8ac7 	vcvt.f32.s32	s17, s14
 80103d4:	ee87 0aa8 	vdiv.f32	s0, s15, s17
 80103d8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80103dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103e0:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80103e4:	d501      	bpl.n	80103ea <MEMS_runMagCal.constprop.21+0x16be>
 80103e6:	f008 fc0d 	bl	8018c04 <sqrtf>
 80103ea:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 80103ee:	ed5f 6a5a 	vldr	s13, [pc, #-360]	; 8010288 <MEMS_runMagCal.constprop.21+0x155c>
 80103f2:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 80103f6:	ee68 7a26 	vmul.f32	s15, s16, s13
 80103fa:	ee27 7a26 	vmul.f32	s14, s14, s13
 80103fe:	edc4 7a00 	vstr	s15, [r4]
 8010402:	ed8d 7a10 	vstr	s14, [sp, #64]	; 0x40
 8010406:	e797      	b.n	8010338 <MEMS_runMagCal.constprop.21+0x160c>
 8010408:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 801040c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010410:	2403      	movs	r4, #3
 8010412:	2300      	movs	r3, #0
 8010414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010418:	f88b 407c 	strb.w	r4, [fp, #124]	; 0x7c
 801041c:	f88b 3025 	strb.w	r3, [fp, #37]	; 0x25
 8010420:	dc9c      	bgt.n	801035c <MEMS_runMagCal.constprop.21+0x1630>
 8010422:	e63f      	b.n	80100a4 <MEMS_runMagCal.constprop.21+0x1378>
 8010424:	f8ad c05a 	strh.w	ip, [sp, #90]	; 0x5a
 8010428:	f7ff bb18 	b.w	800fa5c <MEMS_runMagCal.constprop.21+0xd30>
 801042c:	461a      	mov	r2, r3
 801042e:	9b00      	ldr	r3, [sp, #0]
 8010430:	1c5d      	adds	r5, r3, #1
 8010432:	fb95 f1f2 	sdiv	r1, r5, r2
 8010436:	fb02 5111 	mls	r1, r2, r1, r5
 801043a:	b209      	sxth	r1, r1
 801043c:	4690      	mov	r8, r2
 801043e:	f7ff baaa 	b.w	800f996 <MEMS_runMagCal.constprop.21+0xc6a>
 8010442:	2701      	movs	r7, #1
 8010444:	f7ff bb7d 	b.w	800fb42 <MEMS_runMagCal.constprop.21+0xe16>
 8010448:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801044c:	e76f      	b.n	801032e <MEMS_runMagCal.constprop.21+0x1602>
 801044e:	3101      	adds	r1, #1
 8010450:	fb91 f3f5 	sdiv	r3, r1, r5
 8010454:	fb05 1313 	mls	r3, r5, r3, r1
 8010458:	fa0f fe83 	sxth.w	lr, r3
 801045c:	462a      	mov	r2, r5
 801045e:	e68c      	b.n	801017a <MEMS_runMagCal.constprop.21+0x144e>
 8010460:	ed84 7a00 	vstr	s14, [r4]
 8010464:	e766      	b.n	8010334 <MEMS_runMagCal.constprop.21+0x1608>
 8010466:	2303      	movs	r3, #3
 8010468:	f88b 2025 	strb.w	r2, [fp, #37]	; 0x25
 801046c:	f88b 307c 	strb.w	r3, [fp, #124]	; 0x7c
 8010470:	e618      	b.n	80100a4 <MEMS_runMagCal.constprop.21+0x1378>
 8010472:	f88b 00b0 	strb.w	r0, [fp, #176]	; 0xb0
 8010476:	e5fc      	b.n	8010072 <MEMS_runMagCal.constprop.21+0x1346>
 8010478:	ed8d 7a10 	vstr	s14, [sp, #64]	; 0x40
 801047c:	f7fe bdd3 	b.w	800f026 <MEMS_runMagCal.constprop.21+0x2fa>
 8010480:	eeb0 7a46 	vmov.f32	s14, s12
 8010484:	2201      	movs	r2, #1
 8010486:	f7fe bdc1 	b.w	800f00c <MEMS_runMagCal.constprop.21+0x2e0>
 801048a:	f241 225b 	movw	r2, #4699	; 0x125b
 801048e:	4293      	cmp	r3, r2
 8010490:	f67e aebf 	bls.w	800f212 <MEMS_runMagCal.constprop.21+0x4e6>
 8010494:	f5a3 5392 	sub.w	r3, r3, #4672	; 0x1240
 8010498:	3b1c      	subs	r3, #28
 801049a:	b29b      	uxth	r3, r3
 801049c:	f643 2298 	movw	r2, #15000	; 0x3a98
 80104a0:	4293      	cmp	r3, r2
 80104a2:	f67e aeb6 	bls.w	800f212 <MEMS_runMagCal.constprop.21+0x4e6>
 80104a6:	f7fe beaa 	b.w	800f1fe <MEMS_runMagCal.constprop.21+0x4d2>
 80104aa:	ed9b 0a20 	vldr	s0, [fp, #128]	; 0x80
 80104ae:	f008 f895 	bl	80185dc <roundf>
 80104b2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80104b6:	ae18      	add	r6, sp, #96	; 0x60
 80104b8:	ee17 3a90 	vmov	r3, s15
 80104bc:	ed9b 0a21 	vldr	s0, [fp, #132]	; 0x84
 80104c0:	8033      	strh	r3, [r6, #0]
 80104c2:	f008 f88b 	bl	80185dc <roundf>
 80104c6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80104ca:	ed9b 0a22 	vldr	s0, [fp, #136]	; 0x88
 80104ce:	ee17 3a90 	vmov	r3, s15
 80104d2:	8073      	strh	r3, [r6, #2]
 80104d4:	f008 f882 	bl	80185dc <roundf>
 80104d8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80104dc:	4630      	mov	r0, r6
 80104de:	ee17 4a90 	vmov	r4, s15
 80104e2:	ab12      	add	r3, sp, #72	; 0x48
 80104e4:	aa13      	add	r2, sp, #76	; 0x4c
 80104e6:	eeb0 0a68 	vmov.f32	s0, s17
 80104ea:	49cc      	ldr	r1, [pc, #816]	; (801081c <MEMS_runMagCal.constprop.21+0x1af0>)
 80104ec:	80b4      	strh	r4, [r6, #4]
 80104ee:	f7fd fbd5 	bl	800dc9c <getMagStats.constprop.35>
 80104f2:	ed9d 7a12 	vldr	s14, [sp, #72]	; 0x48
 80104f6:	eddf 7aca 	vldr	s15, [pc, #808]	; 8010820 <MEMS_runMagCal.constprop.21+0x1af4>
 80104fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80104fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010502:	d50e      	bpl.n	8010522 <MEMS_runMagCal.constprop.21+0x17f6>
 8010504:	b968      	cbnz	r0, 8010522 <MEMS_runMagCal.constprop.21+0x17f6>
 8010506:	f89b 3064 	ldrb.w	r3, [fp, #100]	; 0x64
 801050a:	b1b3      	cbz	r3, 801053a <MEMS_runMagCal.constprop.21+0x180e>
 801050c:	f89b 306d 	ldrb.w	r3, [fp, #109]	; 0x6d
 8010510:	ee07 3a90 	vmov	s15, r3
 8010514:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010518:	eef4 9ae7 	vcmpe.f32	s19, s15
 801051c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010520:	dc0b      	bgt.n	801053a <MEMS_runMagCal.constprop.21+0x180e>
 8010522:	f89b 30b0 	ldrb.w	r3, [fp, #176]	; 0xb0
 8010526:	f99b 50b2 	ldrsb.w	r5, [fp, #178]	; 0xb2
 801052a:	9306      	str	r3, [sp, #24]
 801052c:	2300      	movs	r3, #0
 801052e:	f89b 40b1 	ldrb.w	r4, [fp, #177]	; 0xb1
 8010532:	6033      	str	r3, [r6, #0]
 8010534:	3501      	adds	r5, #1
 8010536:	80b3      	strh	r3, [r6, #4]
 8010538:	e413      	b.n	800fd62 <MEMS_runMagCal.constprop.21+0x1036>
 801053a:	eddd 7a05 	vldr	s15, [sp, #20]
 801053e:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8010542:	eddf 7ab8 	vldr	s15, [pc, #736]	; 8010824 <MEMS_runMagCal.constprop.21+0x1af8>
 8010546:	2303      	movs	r3, #3
 8010548:	ee20 0a27 	vmul.f32	s0, s0, s15
 801054c:	f88b 307c 	strb.w	r3, [fp, #124]	; 0x7c
 8010550:	f008 f844 	bl	80185dc <roundf>
 8010554:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8010558:	ed8b 0a0a 	vstr	s0, [fp, #40]	; 0x28
 801055c:	e538      	b.n	800ffd0 <MEMS_runMagCal.constprop.21+0x12a4>
 801055e:	fb95 f1f3 	sdiv	r1, r5, r3
 8010562:	fb03 5111 	mls	r1, r3, r1, r5
 8010566:	b209      	sxth	r1, r1
 8010568:	e412      	b.n	800fd90 <MEMS_runMagCal.constprop.21+0x1064>
 801056a:	461a      	mov	r2, r3
 801056c:	fb95 f3f3 	sdiv	r3, r5, r3
 8010570:	fb02 5313 	mls	r3, r2, r3, r5
 8010574:	b21b      	sxth	r3, r3
 8010576:	f7ff bb68 	b.w	800fc4a <MEMS_runMagCal.constprop.21+0xf1e>
 801057a:	2301      	movs	r3, #1
 801057c:	9300      	str	r3, [sp, #0]
 801057e:	f7ff bb10 	b.w	800fba2 <MEMS_runMagCal.constprop.21+0xe76>
 8010582:	eddb 4a27 	vldr	s9, [fp, #156]	; 0x9c
 8010586:	eddb 5a23 	vldr	s11, [fp, #140]	; 0x8c
 801058a:	ed9b 6a2b 	vldr	s12, [fp, #172]	; 0xac
 801058e:	ee75 5aa4 	vadd.f32	s11, s11, s9
 8010592:	eeb0 4a08 	vmov.f32	s8, #8	; 0x40400000  3.0
 8010596:	ee75 5a86 	vadd.f32	s11, s11, s12
 801059a:	eef7 4a02 	vmov.f32	s9, #114	; 0x3f900000  1.125
 801059e:	ee85 6a84 	vdiv.f32	s12, s11, s8
 80105a2:	eeb4 6ae4 	vcmpe.f32	s12, s9
 80105a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105aa:	d529      	bpl.n	8010600 <MEMS_runMagCal.constprop.21+0x18d4>
 80105ac:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80105b0:	eeb4 6ae5 	vcmpe.f32	s12, s11
 80105b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105b8:	bfd8      	it	le
 80105ba:	eeb0 6a65 	vmovle.f32	s12, s11
 80105be:	ee67 7a86 	vmul.f32	s15, s15, s12
 80105c2:	eeb4 5ae7 	vcmpe.f32	s10, s15
 80105c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105ca:	f73f ad01 	bgt.w	800ffd0 <MEMS_runMagCal.constprop.21+0x12a4>
 80105ce:	ee27 7a06 	vmul.f32	s14, s14, s12
 80105d2:	eeb4 5ac7 	vcmpe.f32	s10, s14
 80105d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105da:	f73f acf9 	bgt.w	800ffd0 <MEMS_runMagCal.constprop.21+0x12a4>
 80105de:	ee66 6a86 	vmul.f32	s13, s13, s12
 80105e2:	eeb4 5ae6 	vcmpe.f32	s10, s13
 80105e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105ea:	f73f acf1 	bgt.w	800ffd0 <MEMS_runMagCal.constprop.21+0x12a4>
 80105ee:	2300      	movs	r3, #0
 80105f0:	9300      	str	r3, [sp, #0]
 80105f2:	f7ff bb1c 	b.w	800fc2e <MEMS_runMagCal.constprop.21+0xf02>
 80105f6:	460b      	mov	r3, r1
 80105f8:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
 80105fc:	f7ff baba 	b.w	800fb74 <MEMS_runMagCal.constprop.21+0xe48>
 8010600:	eeb0 6a64 	vmov.f32	s12, s9
 8010604:	e7db      	b.n	80105be <MEMS_runMagCal.constprop.21+0x1892>
 8010606:	4551      	cmp	r1, sl
 8010608:	4613      	mov	r3, r2
 801060a:	daf5      	bge.n	80105f8 <MEMS_runMagCal.constprop.21+0x18cc>
 801060c:	2701      	movs	r7, #1
 801060e:	f7ff ba9f 	b.w	800fb50 <MEMS_runMagCal.constprop.21+0xe24>
 8010612:	2220      	movs	r2, #32
 8010614:	2100      	movs	r1, #0
 8010616:	a82e      	add	r0, sp, #184	; 0xb8
 8010618:	f00a ff8d 	bl	801b536 <memset>
 801061c:	eddf 7a82 	vldr	s15, [pc, #520]	; 8010828 <MEMS_runMagCal.constprop.21+0x1afc>
 8010620:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 8010624:	ee07 aa90 	vmov	s15, sl
 8010628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801062c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010634:	d409      	bmi.n	801064a <MEMS_runMagCal.constprop.21+0x191e>
 8010636:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801063a:	edcd 7a01 	vstr	s15, [sp, #4]
 801063e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8010642:	ee07 3a90 	vmov	s15, r3
 8010646:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801064a:	eddf 6a80 	vldr	s13, [pc, #512]	; 801084c <MEMS_runMagCal.constprop.21+0x1b20>
 801064e:	ee86 7aa8 	vdiv.f32	s14, s13, s17
 8010652:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801065a:	d409      	bmi.n	8010670 <MEMS_runMagCal.constprop.21+0x1944>
 801065c:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8010660:	edcd 7a01 	vstr	s15, [sp, #4]
 8010664:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8010668:	ee07 3a90 	vmov	s15, r3
 801066c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010670:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8010674:	eddf 6a75 	vldr	s13, [pc, #468]	; 801084c <MEMS_runMagCal.constprop.21+0x1b20>
 8010678:	eddf 5a6c 	vldr	s11, [pc, #432]	; 801082c <MEMS_runMagCal.constprop.21+0x1b00>
 801067c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010680:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8010684:	ee67 7a06 	vmul.f32	s15, s14, s12
 8010688:	eef4 7ae5 	vcmpe.f32	s15, s11
 801068c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010690:	f340 8626 	ble.w	80112e0 <MEMS_runMagCal.constprop.21+0x25b4>
 8010694:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8010698:	eef4 7ac7 	vcmpe.f32	s15, s14
 801069c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106a0:	f140 861e 	bpl.w	80112e0 <MEMS_runMagCal.constprop.21+0x25b4>
 80106a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80106a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80106ac:	ee67 7a86 	vmul.f32	s15, s15, s12
 80106b0:	ee27 caa6 	vmul.f32	s24, s15, s13
 80106b4:	eddd 6a1a 	vldr	s13, [sp, #104]	; 0x68
 80106b8:	ed9d 7a1b 	vldr	s14, [sp, #108]	; 0x6c
 80106bc:	eddd 7a1c 	vldr	s15, [sp, #112]	; 0x70
 80106c0:	eddf aa60 	vldr	s21, [pc, #384]	; 8010844 <MEMS_runMagCal.constprop.21+0x1b18>
 80106c4:	ed9f aa5a 	vldr	s20, [pc, #360]	; 8010830 <MEMS_runMagCal.constprop.21+0x1b04>
 80106c8:	eddf ba5a 	vldr	s23, [pc, #360]	; 8010834 <MEMS_runMagCal.constprop.21+0x1b08>
 80106cc:	ed9f ba5a 	vldr	s22, [pc, #360]	; 8010838 <MEMS_runMagCal.constprop.21+0x1b0c>
 80106d0:	ed8d ca31 	vstr	s24, [sp, #196]	; 0xc4
 80106d4:	ee66 6aa8 	vmul.f32	s13, s13, s17
 80106d8:	ee27 7a28 	vmul.f32	s14, s14, s17
 80106dc:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80106e0:	ed8d ca34 	vstr	s24, [sp, #208]	; 0xd0
 80106e4:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 80106e8:	ed8d 7a2f 	vstr	s14, [sp, #188]	; 0xbc
 80106ec:	edcd 7a30 	vstr	s15, [sp, #192]	; 0xc0
 80106f0:	2400      	movs	r4, #0
 80106f2:	2500      	movs	r5, #0
 80106f4:	4629      	mov	r1, r5
 80106f6:	2240      	movs	r2, #64	; 0x40
 80106f8:	a836      	add	r0, sp, #216	; 0xd8
 80106fa:	9521      	str	r5, [sp, #132]	; 0x84
 80106fc:	9522      	str	r5, [sp, #136]	; 0x88
 80106fe:	9523      	str	r5, [sp, #140]	; 0x8c
 8010700:	9524      	str	r5, [sp, #144]	; 0x90
 8010702:	951d      	str	r5, [sp, #116]	; 0x74
 8010704:	951e      	str	r5, [sp, #120]	; 0x78
 8010706:	951f      	str	r5, [sp, #124]	; 0x7c
 8010708:	9520      	str	r5, [sp, #128]	; 0x80
 801070a:	f00a ff14 	bl	801b536 <memset>
 801070e:	4629      	mov	r1, r5
 8010710:	2240      	movs	r2, #64	; 0x40
 8010712:	a846      	add	r0, sp, #280	; 0x118
 8010714:	f00a ff0f 	bl	801b536 <memset>
 8010718:	eeb4 caea 	vcmpe.f32	s24, s21
 801071c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010720:	f100 85d7 	bmi.w	80112d2 <MEMS_runMagCal.constprop.21+0x25a6>
 8010724:	f89b 00b0 	ldrb.w	r0, [fp, #176]	; 0xb0
 8010728:	f89b 30b1 	ldrb.w	r3, [fp, #177]	; 0xb1
 801072c:	f99b 20b2 	ldrsb.w	r2, [fp, #178]	; 0xb2
 8010730:	4298      	cmp	r0, r3
 8010732:	f102 0201 	add.w	r2, r2, #1
 8010736:	f000 8158 	beq.w	80109ea <MEMS_runMagCal.constprop.21+0x1cbe>
 801073a:	1a12      	subs	r2, r2, r0
 801073c:	fb92 f1f3 	sdiv	r1, r2, r3
 8010740:	fb03 2211 	mls	r2, r3, r1, r2
 8010744:	b216      	sxth	r6, r2
 8010746:	2e00      	cmp	r6, #0
 8010748:	bfbc      	itt	lt
 801074a:	18d2      	addlt	r2, r2, r3
 801074c:	b216      	sxthlt	r6, r2
 801074e:	ed9f ca3b 	vldr	s24, [pc, #236]	; 801083c <MEMS_runMagCal.constprop.21+0x1b10>
 8010752:	eef0 ca4c 	vmov.f32	s25, s24
 8010756:	eeb0 da4c 	vmov.f32	s26, s24
 801075a:	eef0 da4c 	vmov.f32	s27, s24
 801075e:	eeb0 ea4c 	vmov.f32	s28, s24
 8010762:	eef0 ea4c 	vmov.f32	s29, s24
 8010766:	2800      	cmp	r0, #0
 8010768:	f000 80e8 	beq.w	801093c <MEMS_runMagCal.constprop.21+0x1c10>
 801076c:	2500      	movs	r5, #0
 801076e:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
 8010772:	461a      	mov	r2, r3
 8010774:	19a9      	adds	r1, r5, r6
 8010776:	fb91 f3f2 	sdiv	r3, r1, r2
 801077a:	fb02 1313 	mls	r3, r2, r3, r1
 801077e:	b2db      	uxtb	r3, r3
 8010780:	3304      	adds	r3, #4
 8010782:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8010786:	eddd 7a2f 	vldr	s15, [sp, #188]	; 0xbc
 801078a:	f9b3 20b2 	ldrsh.w	r2, [r3, #178]	; 0xb2
 801078e:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8010792:	ed9d 6a30 	vldr	s12, [sp, #192]	; 0xc0
 8010796:	ee09 2a10 	vmov	s18, r2
 801079a:	f9b3 20b4 	ldrsh.w	r2, [r3, #180]	; 0xb4
 801079e:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 80107a2:	ee07 2a10 	vmov	s14, r2
 80107a6:	ee0f 3a90 	vmov	s31, r3
 80107aa:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 80107ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80107b2:	eef8 faef 	vcvt.f32.s32	s31, s31
 80107b6:	ee27 7a28 	vmul.f32	s14, s14, s17
 80107ba:	ee29 9a28 	vmul.f32	s18, s18, s17
 80107be:	ee37 8a67 	vsub.f32	s16, s14, s15
 80107c2:	ee39 9a66 	vsub.f32	s18, s18, s13
 80107c6:	ee6f 7aa8 	vmul.f32	s15, s31, s17
 80107ca:	ee29 0a09 	vmul.f32	s0, s18, s18
 80107ce:	ee77 fac6 	vsub.f32	s31, s15, s12
 80107d2:	ee28 7a08 	vmul.f32	s14, s16, s16
 80107d6:	ee6f 7aaf 	vmul.f32	s15, s31, s31
 80107da:	ee30 0a07 	vadd.f32	s0, s0, s14
 80107de:	ee30 0a27 	vadd.f32	s0, s0, s15
 80107e2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80107e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107ea:	eeb1 6ac0 	vsqrt.f32	s12, s0
 80107ee:	d505      	bpl.n	80107fc <MEMS_runMagCal.constprop.21+0x1ad0>
 80107f0:	ed8d 6a01 	vstr	s12, [sp, #4]
 80107f4:	f008 fa06 	bl	8018c04 <sqrtf>
 80107f8:	ed9d 6a01 	vldr	s12, [sp, #4]
 80107fc:	eeb4 6aca 	vcmpe.f32	s12, s20
 8010800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010804:	f105 0201 	add.w	r2, r5, #1
 8010808:	d52c      	bpl.n	8010864 <MEMS_runMagCal.constprop.21+0x1b38>
 801080a:	f89b 30b0 	ldrb.w	r3, [fp, #176]	; 0xb0
 801080e:	b2d5      	uxtb	r5, r2
 8010810:	42ab      	cmp	r3, r5
 8010812:	f240 8093 	bls.w	801093c <MEMS_runMagCal.constprop.21+0x1c10>
 8010816:	f89b 20b1 	ldrb.w	r2, [fp, #177]	; 0xb1
 801081a:	e7ab      	b.n	8010774 <MEMS_runMagCal.constprop.21+0x1a48>
 801081c:	200016fc 	.word	0x200016fc
 8010820:	3ff4cccd 	.word	0x3ff4cccd
 8010824:	3a83126f 	.word	0x3a83126f
 8010828:	430d0000 	.word	0x430d0000
 801082c:	3e4ccccd 	.word	0x3e4ccccd
 8010830:	358637bd 	.word	0x358637bd
 8010834:	3e99999a 	.word	0x3e99999a
 8010838:	3f666666 	.word	0x3f666666
 801083c:	00000000 	.word	0x00000000
 8010840:	400ccccd 	.word	0x400ccccd
 8010844:	3dcccccd 	.word	0x3dcccccd
 8010848:	41f00001 	.word	0x41f00001
 801084c:	423c0000 	.word	0x423c0000
 8010850:	3f8ccccd 	.word	0x3f8ccccd
 8010854:	3f266666 	.word	0x3f266666
 8010858:	3ee66666 	.word	0x3ee66666
 801085c:	3f19999a 	.word	0x3f19999a
 8010860:	433d0000 	.word	0x433d0000
 8010864:	eecf 7a06 	vdiv.f32	s15, s30, s12
 8010868:	f89b 30b0 	ldrb.w	r3, [fp, #176]	; 0xb0
 801086c:	b2d5      	uxtb	r5, r2
 801086e:	42ab      	cmp	r3, r5
 8010870:	eddd 5a31 	vldr	s11, [sp, #196]	; 0xc4
 8010874:	ed9d 5a36 	vldr	s10, [sp, #216]	; 0xd8
 8010878:	ed9d 4a22 	vldr	s8, [sp, #136]	; 0x88
 801087c:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8010880:	ee69 6a67 	vnmul.f32	s13, s18, s15
 8010884:	ee28 7a67 	vnmul.f32	s14, s16, s15
 8010888:	ee35 6ac6 	vsub.f32	s12, s11, s12
 801088c:	ee6f 7ae7 	vnmul.f32	s15, s31, s15
 8010890:	ee66 5aa6 	vmul.f32	s11, s13, s13
 8010894:	ee66 4a26 	vmul.f32	s9, s12, s13
 8010898:	ee7d dae6 	vsub.f32	s27, s27, s13
 801089c:	ee35 5a25 	vadd.f32	s10, s10, s11
 80108a0:	ee66 5a87 	vmul.f32	s11, s13, s14
 80108a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80108a8:	ee7c cac7 	vsub.f32	s25, s25, s14
 80108ac:	ee7e eaa5 	vadd.f32	s29, s29, s11
 80108b0:	ee3e ea26 	vadd.f32	s28, s28, s13
 80108b4:	ee67 5a07 	vmul.f32	s11, s14, s14
 80108b8:	ee66 6a07 	vmul.f32	s13, s12, s14
 80108bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80108c0:	ee34 4a26 	vadd.f32	s8, s8, s13
 80108c4:	ee3d da07 	vadd.f32	s26, s26, s14
 80108c8:	ed9d 7a3b 	vldr	s14, [sp, #236]	; 0xec
 80108cc:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 80108d0:	edcd da39 	vstr	s27, [sp, #228]	; 0xe4
 80108d4:	ee77 5a25 	vadd.f32	s11, s14, s11
 80108d8:	ee26 7a27 	vmul.f32	s14, s12, s15
 80108dc:	ee3c ca67 	vsub.f32	s24, s24, s15
 80108e0:	ee76 6a87 	vadd.f32	s13, s13, s14
 80108e4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80108e8:	ed9d 7a40 	vldr	s14, [sp, #256]	; 0x100
 80108ec:	edcd ca3d 	vstr	s25, [sp, #244]	; 0xf4
 80108f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80108f4:	ed9d 7a24 	vldr	s14, [sp, #144]	; 0x90
 80108f8:	ed8d ca41 	vstr	s24, [sp, #260]	; 0x104
 80108fc:	ee37 7a46 	vsub.f32	s14, s14, s12
 8010900:	ed9d 6a45 	vldr	s12, [sp, #276]	; 0x114
 8010904:	ed8d 5a36 	vstr	s10, [sp, #216]	; 0xd8
 8010908:	ee73 4aa4 	vadd.f32	s9, s7, s9
 801090c:	ee36 6a0f 	vadd.f32	s12, s12, s30
 8010910:	edcd 4a21 	vstr	s9, [sp, #132]	; 0x84
 8010914:	edcd ea37 	vstr	s29, [sp, #220]	; 0xdc
 8010918:	ed8d ea38 	vstr	s28, [sp, #224]	; 0xe0
 801091c:	ed8d 4a22 	vstr	s8, [sp, #136]	; 0x88
 8010920:	ed8d da3c 	vstr	s26, [sp, #240]	; 0xf0
 8010924:	edcd 5a3b 	vstr	s11, [sp, #236]	; 0xec
 8010928:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801092c:	edcd 7a40 	vstr	s15, [sp, #256]	; 0x100
 8010930:	ed8d 7a24 	vstr	s14, [sp, #144]	; 0x90
 8010934:	ed8d 6a45 	vstr	s12, [sp, #276]	; 0x114
 8010938:	f63f af6d 	bhi.w	8010816 <MEMS_runMagCal.constprop.21+0x1aea>
 801093c:	2100      	movs	r1, #0
 801093e:	a846      	add	r0, sp, #280	; 0x118
 8010940:	2240      	movs	r2, #64	; 0x40
 8010942:	f10d 09d8 	add.w	r9, sp, #216	; 0xd8
 8010946:	edcd ea3a 	vstr	s29, [sp, #232]	; 0xe8
 801094a:	ed8d ea3e 	vstr	s28, [sp, #248]	; 0xf8
 801094e:	edcd da42 	vstr	s27, [sp, #264]	; 0x108
 8010952:	ed8d da3f 	vstr	s26, [sp, #252]	; 0xfc
 8010956:	edcd ca43 	vstr	s25, [sp, #268]	; 0x10c
 801095a:	ed8d ca44 	vstr	s24, [sp, #272]	; 0x110
 801095e:	4606      	mov	r6, r0
 8010960:	46c8      	mov	r8, r9
 8010962:	f00a fde8 	bl	801b536 <memset>
 8010966:	2700      	movs	r7, #0
 8010968:	4621      	mov	r1, r4
 801096a:	b27a      	sxtb	r2, r7
 801096c:	463b      	mov	r3, r7
 801096e:	ed5f 7a4d 	vldr	s15, [pc, #-308]	; 801083c <MEMS_runMagCal.constprop.21+0x1b10>
 8010972:	46ca      	mov	sl, r9
 8010974:	4617      	mov	r7, r2
 8010976:	ac4a      	add	r4, sp, #296	; 0x128
 8010978:	464a      	mov	r2, r9
 801097a:	2500      	movs	r5, #0
 801097c:	4689      	mov	r9, r1
 801097e:	4619      	mov	r1, r3
 8010980:	b26b      	sxtb	r3, r5
 8010982:	42bb      	cmp	r3, r7
 8010984:	f000 859d 	beq.w	80114c2 <MEMS_runMagCal.constprop.21+0x2796>
 8010988:	00ab      	lsls	r3, r5, #2
 801098a:	1958      	adds	r0, r3, r5
 801098c:	f50d 7e8c 	add.w	lr, sp, #280	; 0x118
 8010990:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
 8010994:	edd0 6a00 	vldr	s13, [r0]
 8010998:	eeb0 7ae6 	vabs.f32	s14, s13
 801099c:	eeb4 7aca 	vcmpe.f32	s14, s20
 80109a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109a4:	f100 8575 	bmi.w	8011492 <MEMS_runMagCal.constprop.21+0x2766>
 80109a8:	ed9a 7a00 	vldr	s14, [sl]
 80109ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80109b0:	4433      	add	r3, r6
 80109b2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80109b6:	ed83 7a00 	vstr	s14, [r3]
 80109ba:	3501      	adds	r5, #1
 80109bc:	b26b      	sxtb	r3, r5
 80109be:	429f      	cmp	r7, r3
 80109c0:	db19      	blt.n	80109f6 <MEMS_runMagCal.constprop.21+0x1cca>
 80109c2:	ed5f 7a62 	vldr	s15, [pc, #-392]	; 801083c <MEMS_runMagCal.constprop.21+0x1b10>
 80109c6:	eb06 0e85 	add.w	lr, r6, r5, lsl #2
 80109ca:	4620      	mov	r0, r4
 80109cc:	4633      	mov	r3, r6
 80109ce:	ecf3 6a01 	vldmia	r3!, {s13}
 80109d2:	ecb0 7a01 	vldmia	r0!, {s14}
 80109d6:	ee26 7a87 	vmul.f32	s14, s13, s14
 80109da:	4573      	cmp	r3, lr
 80109dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80109e0:	d1f5      	bne.n	80109ce <MEMS_runMagCal.constprop.21+0x1ca2>
 80109e2:	f10a 0a04 	add.w	sl, sl, #4
 80109e6:	3410      	adds	r4, #16
 80109e8:	e7ca      	b.n	8010980 <MEMS_runMagCal.constprop.21+0x1c54>
 80109ea:	fb92 f6f0 	sdiv	r6, r2, r0
 80109ee:	fb00 2216 	mls	r2, r0, r6, r2
 80109f2:	b216      	sxth	r6, r2
 80109f4:	e6ab      	b.n	801074e <MEMS_runMagCal.constprop.21+0x1a22>
 80109f6:	460f      	mov	r7, r1
 80109f8:	3701      	adds	r7, #1
 80109fa:	2f04      	cmp	r7, #4
 80109fc:	4649      	mov	r1, r9
 80109fe:	f106 0610 	add.w	r6, r6, #16
 8010a02:	f102 0910 	add.w	r9, r2, #16
 8010a06:	f108 0814 	add.w	r8, r8, #20
 8010a0a:	d1ae      	bne.n	801096a <MEMS_runMagCal.constprop.21+0x1c3e>
 8010a0c:	460c      	mov	r4, r1
 8010a0e:	aa21      	add	r2, sp, #132	; 0x84
 8010a10:	a91d      	add	r1, sp, #116	; 0x74
 8010a12:	a846      	add	r0, sp, #280	; 0x118
 8010a14:	f7fd f8c4 	bl	800dba0 <llEvaluate.constprop.32>
 8010a18:	ae25      	add	r6, sp, #148	; 0x94
 8010a1a:	af21      	add	r7, sp, #132	; 0x84
 8010a1c:	f10d 0990 	add.w	r9, sp, #144	; 0x90
 8010a20:	eeb0 9a6a 	vmov.f32	s18, s21
 8010a24:	2500      	movs	r5, #0
 8010a26:	f04f 587e 	mov.w	r8, #1065353216	; 0x3f800000
 8010a2a:	9521      	str	r5, [sp, #132]	; 0x84
 8010a2c:	9522      	str	r5, [sp, #136]	; 0x88
 8010a2e:	9523      	str	r5, [sp, #140]	; 0x8c
 8010a30:	9524      	str	r5, [sp, #144]	; 0x90
 8010a32:	aa21      	add	r2, sp, #132	; 0x84
 8010a34:	a925      	add	r1, sp, #148	; 0x94
 8010a36:	a846      	add	r0, sp, #280	; 0x118
 8010a38:	f847 8b04 	str.w	r8, [r7], #4
 8010a3c:	f7fd f8b0 	bl	800dba0 <llEvaluate.constprop.32>
 8010a40:	ed96 0a00 	vldr	s0, [r6]
 8010a44:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a4c:	f340 80ed 	ble.w	8010c2a <MEMS_runMagCal.constprop.21+0x1efe>
 8010a50:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8010a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a58:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8010a5c:	d501      	bpl.n	8010a62 <MEMS_runMagCal.constprop.21+0x1d36>
 8010a5e:	f008 f8d1 	bl	8018c04 <sqrtf>
 8010a62:	eeb4 9ac8 	vcmpe.f32	s18, s16
 8010a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a6a:	f340 851c 	ble.w	80114a6 <MEMS_runMagCal.constprop.21+0x277a>
 8010a6e:	45b9      	cmp	r9, r7
 8010a70:	f106 0604 	add.w	r6, r6, #4
 8010a74:	d1d9      	bne.n	8010a2a <MEMS_runMagCal.constprop.21+0x1cfe>
 8010a76:	ed9d ca31 	vldr	s24, [sp, #196]	; 0xc4
 8010a7a:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8010a7e:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8010a82:	ee2c 7a07 	vmul.f32	s14, s24, s14
 8010a86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a8e:	d503      	bpl.n	8010a98 <MEMS_runMagCal.constprop.21+0x1d6c>
 8010a90:	ed8d 7a20 	vstr	s14, [sp, #128]	; 0x80
 8010a94:	eef0 7a47 	vmov.f32	s15, s14
 8010a98:	eddd 4a1d 	vldr	s9, [sp, #116]	; 0x74
 8010a9c:	eddd 5a1e 	vldr	s11, [sp, #120]	; 0x78
 8010aa0:	eddd 6a1f 	vldr	s13, [sp, #124]	; 0x7c
 8010aa4:	ed9d 4a2e 	vldr	s8, [sp, #184]	; 0xb8
 8010aa8:	ed9d 5a2f 	vldr	s10, [sp, #188]	; 0xbc
 8010aac:	ed9d 6a30 	vldr	s12, [sp, #192]	; 0xc0
 8010ab0:	eeb0 7ae4 	vabs.f32	s14, s9
 8010ab4:	eef0 3ae5 	vabs.f32	s7, s11
 8010ab8:	eef4 3a47 	vcmp.f32	s7, s14
 8010abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ac0:	bf48      	it	mi
 8010ac2:	eef0 3a47 	vmovmi.f32	s7, s14
 8010ac6:	eeb0 7ae6 	vabs.f32	s14, s13
 8010aca:	eeb4 7a63 	vcmp.f32	s14, s7
 8010ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ad2:	bf48      	it	mi
 8010ad4:	eeb0 7a63 	vmovmi.f32	s14, s7
 8010ad8:	ee3c ca27 	vadd.f32	s24, s24, s15
 8010adc:	ee74 4a24 	vadd.f32	s9, s8, s9
 8010ae0:	ee75 5a25 	vadd.f32	s11, s10, s11
 8010ae4:	ee76 6a26 	vadd.f32	s13, s12, s13
 8010ae8:	eeb4 7aeb 	vcmpe.f32	s14, s23
 8010aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010af0:	ed8d ca31 	vstr	s24, [sp, #196]	; 0xc4
 8010af4:	eef0 7ae7 	vabs.f32	s15, s15
 8010af8:	edcd 4a2e 	vstr	s9, [sp, #184]	; 0xb8
 8010afc:	edcd 5a2f 	vstr	s11, [sp, #188]	; 0xbc
 8010b00:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8010b04:	d506      	bpl.n	8010b14 <MEMS_runMagCal.constprop.21+0x1de8>
 8010b06:	eef4 7acb 	vcmpe.f32	s15, s22
 8010b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b0e:	d501      	bpl.n	8010b14 <MEMS_runMagCal.constprop.21+0x1de8>
 8010b10:	2c01      	cmp	r4, #1
 8010b12:	d804      	bhi.n	8010b1e <MEMS_runMagCal.constprop.21+0x1df2>
 8010b14:	3401      	adds	r4, #1
 8010b16:	b2e4      	uxtb	r4, r4
 8010b18:	2c05      	cmp	r4, #5
 8010b1a:	f47f adea 	bne.w	80106f2 <MEMS_runMagCal.constprop.21+0x19c6>
 8010b1e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8010b22:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8010b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b2a:	dc0e      	bgt.n	8010b4a <MEMS_runMagCal.constprop.21+0x1e1e>
 8010b2c:	ed1f 7abc 	vldr	s14, [pc, #-752]	; 8010840 <MEMS_runMagCal.constprop.21+0x1b14>
 8010b30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b38:	dc07      	bgt.n	8010b4a <MEMS_runMagCal.constprop.21+0x1e1e>
 8010b3a:	ed5f 7abe 	vldr	s15, [pc, #-760]	; 8010844 <MEMS_runMagCal.constprop.21+0x1b18>
 8010b3e:	eeb4 cae7 	vcmpe.f32	s24, s15
 8010b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b46:	f200 837e 	bhi.w	8011246 <MEMS_runMagCal.constprop.21+0x251a>
 8010b4a:	ed1f 8ac0 	vldr	s16, [pc, #-768]	; 801084c <MEMS_runMagCal.constprop.21+0x1b20>
 8010b4e:	ed1f 9ac2 	vldr	s18, [pc, #-776]	; 8010848 <MEMS_runMagCal.constprop.21+0x1b1c>
 8010b52:	ed8d 8a34 	vstr	s16, [sp, #208]	; 0xd0
 8010b56:	eeb0 aa48 	vmov.f32	s20, s16
 8010b5a:	2224      	movs	r2, #36	; 0x24
 8010b5c:	2100      	movs	r1, #0
 8010b5e:	a846      	add	r0, sp, #280	; 0x118
 8010b60:	f00a fce9 	bl	801b536 <memset>
 8010b64:	ed5f 5ac7 	vldr	s11, [pc, #-796]	; 801084c <MEMS_runMagCal.constprop.21+0x1b20>
 8010b68:	ed9d 6a2e 	vldr	s12, [sp, #184]	; 0xb8
 8010b6c:	eddd 6a2f 	vldr	s13, [sp, #188]	; 0xbc
 8010b70:	ed9d 7a30 	vldr	s14, [sp, #192]	; 0xc0
 8010b74:	eec5 7a8c 	vdiv.f32	s15, s11, s24
 8010b78:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 8010b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b80:	ee86 0a28 	vdiv.f32	s0, s12, s17
 8010b84:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8010b88:	edcd 7a4a 	vstr	s15, [sp, #296]	; 0x128
 8010b8c:	edcd 7a4e 	vstr	s15, [sp, #312]	; 0x138
 8010b90:	ee86 baa8 	vdiv.f32	s22, s13, s17
 8010b94:	eec7 aa28 	vdiv.f32	s21, s14, s17
 8010b98:	f100 8352 	bmi.w	8011240 <MEMS_runMagCal.constprop.21+0x2514>
 8010b9c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ba4:	f100 834c 	bmi.w	8011240 <MEMS_runMagCal.constprop.21+0x2514>
 8010ba8:	ee88 7a0a 	vdiv.f32	s14, s16, s20
 8010bac:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8010bb0:	ee38 8a47 	vsub.f32	s16, s16, s14
 8010bb4:	ed5f 6ada 	vldr	s13, [pc, #-872]	; 8010850 <MEMS_runMagCal.constprop.21+0x1b24>
 8010bb8:	ed1f 6ada 	vldr	s12, [pc, #-872]	; 8010854 <MEMS_runMagCal.constprop.21+0x1b28>
 8010bbc:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8010bc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010bc4:	eef0 6ae6 	vabs.f32	s13, s13
 8010bc8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8010bcc:	eef4 6ac6 	vcmpe.f32	s13, s12
 8010bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bd4:	eeb0 7ac7 	vabs.f32	s14, s14
 8010bd8:	f140 8329 	bpl.w	801122e <MEMS_runMagCal.constprop.21+0x2502>
 8010bdc:	ed5f 6ae2 	vldr	s13, [pc, #-904]	; 8010858 <MEMS_runMagCal.constprop.21+0x1b2c>
 8010be0:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010be8:	f340 8321 	ble.w	801122e <MEMS_runMagCal.constprop.21+0x2502>
 8010bec:	ed5f 7ae5 	vldr	s15, [pc, #-916]	; 801085c <MEMS_runMagCal.constprop.21+0x1b30>
 8010bf0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bf8:	d51a      	bpl.n	8010c30 <MEMS_runMagCal.constprop.21+0x1f04>
 8010bfa:	ed5f 7ae7 	vldr	s15, [pc, #-924]	; 8010860 <MEMS_runMagCal.constprop.21+0x1b34>
 8010bfe:	f89b 30b0 	ldrb.w	r3, [fp, #176]	; 0xb0
 8010c02:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 8010c06:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8010c0a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8010c0e:	ee87 0aa8 	vdiv.f32	s0, s15, s17
 8010c12:	ed8d 7a00 	vstr	s14, [sp]
 8010c16:	f8bd 0000 	ldrh.w	r0, [sp]
 8010c1a:	b113      	cbz	r3, 8010c22 <MEMS_runMagCal.constprop.21+0x1ef6>
 8010c1c:	3b01      	subs	r3, #1
 8010c1e:	f88b 30b0 	strb.w	r3, [fp, #176]	; 0xb0
 8010c22:	f7fd fd3b 	bl	800e69c <MEMS_updateMagBufferIndex.constprop.33>
 8010c26:	f7ff b9c5 	b.w	800ffb4 <MEMS_runMagCal.constprop.21+0x1288>
 8010c2a:	eeb2 9a04 	vmov.f32	s18, #36	; 0x41200000  10.0
 8010c2e:	e71e      	b.n	8010a6e <MEMS_runMagCal.constprop.21+0x1d42>
 8010c30:	f007 fcd4 	bl	80185dc <roundf>
 8010c34:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8010c38:	ae18      	add	r6, sp, #96	; 0x60
 8010c3a:	ee17 3a90 	vmov	r3, s15
 8010c3e:	eeb0 0a4b 	vmov.f32	s0, s22
 8010c42:	8033      	strh	r3, [r6, #0]
 8010c44:	f007 fcca 	bl	80185dc <roundf>
 8010c48:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8010c4c:	eeb0 0a6a 	vmov.f32	s0, s21
 8010c50:	ee17 3a90 	vmov	r3, s15
 8010c54:	8073      	strh	r3, [r6, #2]
 8010c56:	f007 fcc1 	bl	80185dc <roundf>
 8010c5a:	eddd 7a05 	vldr	s15, [sp, #20]
 8010c5e:	eefd 6ac0 	vcvt.s32.f32	s13, s0
 8010c62:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010c66:	ee16 3a90 	vmov	r3, s13
 8010c6a:	eddf 7aab 	vldr	s15, [pc, #684]	; 8010f18 <MEMS_runMagCal.constprop.21+0x21ec>
 8010c6e:	80b3      	strh	r3, [r6, #4]
 8010c70:	ee27 0a27 	vmul.f32	s0, s14, s15
 8010c74:	f007 fcb2 	bl	80185dc <roundf>
 8010c78:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8010c7c:	ab12      	add	r3, sp, #72	; 0x48
 8010c7e:	4630      	mov	r0, r6
 8010c80:	eeb0 0a68 	vmov.f32	s0, s17
 8010c84:	aa13      	add	r2, sp, #76	; 0x4c
 8010c86:	a946      	add	r1, sp, #280	; 0x118
 8010c88:	edcb 7a0a 	vstr	s15, [fp, #40]	; 0x28
 8010c8c:	f7fd f806 	bl	800dc9c <getMagStats.constprop.35>
 8010c90:	f89b 50b0 	ldrb.w	r5, [fp, #176]	; 0xb0
 8010c94:	eddf 6aa1 	vldr	s13, [pc, #644]	; 8010f1c <MEMS_runMagCal.constprop.21+0x21f0>
 8010c98:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 8010c9c:	005b      	lsls	r3, r3, #1
 8010c9e:	ee07 3a90 	vmov	s15, r3
 8010ca2:	ee07 0a10 	vmov	s14, r0
 8010ca6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010caa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010cae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010cb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cba:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
 8010cbe:	f300 82b3 	bgt.w	8011228 <MEMS_runMagCal.constprop.21+0x24fc>
 8010cc2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8010cc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cce:	bfc3      	ittte	gt
 8010cd0:	f89b 9064 	ldrbgt.w	r9, [fp, #100]	; 0x64
 8010cd4:	fab9 f989 	clzgt	r9, r9
 8010cd8:	ea4f 1959 	movgt.w	r9, r9, lsr #5
 8010cdc:	f04f 0901 	movle.w	r9, #1
 8010ce0:	ee69 7aa7 	vmul.f32	s15, s19, s15
 8010ce4:	f8db 7028 	ldr.w	r7, [fp, #40]	; 0x28
 8010ce8:	9729      	str	r7, [sp, #164]	; 0xa4
 8010cea:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8010cee:	f007 fc75 	bl	80185dc <roundf>
 8010cf2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8010cf6:	ee29 0a89 	vmul.f32	s0, s19, s18
 8010cfa:	ee17 3a90 	vmov	r3, s15
 8010cfe:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8
 8010d02:	f007 fc6b 	bl	80185dc <roundf>
 8010d06:	ed9f 6a86 	vldr	s12, [pc, #536]	; 8010f20 <MEMS_runMagCal.constprop.21+0x21f4>
 8010d0a:	eddd 7a4e 	vldr	s15, [sp, #312]	; 0x138
 8010d0e:	eddd 6a46 	vldr	s13, [sp, #280]	; 0x118
 8010d12:	ed9d 7a4a 	vldr	s14, [sp, #296]	; 0x128
 8010d16:	88b3      	ldrh	r3, [r6, #4]
 8010d18:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
 8010d1c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010d20:	ee66 6a86 	vmul.f32	s13, s13, s12
 8010d24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010d28:	ee27 7a06 	vmul.f32	s14, s14, s12
 8010d2c:	edcd 7a03 	vstr	s15, [sp, #12]
 8010d30:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8010d34:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8010d38:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8010d3c:	edcd 6a01 	vstr	s13, [sp, #4]
 8010d40:	ed8d 7a02 	vstr	s14, [sp, #8]
 8010d44:	ee17 2a90 	vmov	r2, s15
 8010d48:	9b00      	ldr	r3, [sp, #0]
 8010d4a:	6830      	ldr	r0, [r6, #0]
 8010d4c:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 8010d50:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 8010d54:	f8bd 600c 	ldrh.w	r6, [sp, #12]
 8010d58:	f8cd 00aa 	str.w	r0, [sp, #170]	; 0xaa
 8010d5c:	f8ad 80b0 	strh.w	r8, [sp, #176]	; 0xb0
 8010d60:	f8ad 40b2 	strh.w	r4, [sp, #178]	; 0xb2
 8010d64:	f8ad 60b4 	strh.w	r6, [sp, #180]	; 0xb4
 8010d68:	f88d 20a9 	strb.w	r2, [sp, #169]	; 0xa9
 8010d6c:	b113      	cbz	r3, 8010d74 <MEMS_runMagCal.constprop.21+0x2048>
 8010d6e:	23ff      	movs	r3, #255	; 0xff
 8010d70:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8
 8010d74:	2100      	movs	r1, #0
 8010d76:	f88b 1024 	strb.w	r1, [fp, #36]	; 0x24
 8010d7a:	f1b9 0f00 	cmp.w	r9, #0
 8010d7e:	f43e abde 	beq.w	800f53e <MEMS_runMagCal.constprop.21+0x812>
 8010d82:	f89b 3064 	ldrb.w	r3, [fp, #100]	; 0x64
 8010d86:	f88b 1025 	strb.w	r1, [fp, #37]	; 0x25
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	f040 80d2 	bne.w	8010f34 <MEMS_runMagCal.constprop.21+0x2208>
 8010d90:	4e64      	ldr	r6, [pc, #400]	; (8010f24 <MEMS_runMagCal.constprop.21+0x21f8>)
 8010d92:	ac11      	add	r4, sp, #68	; 0x44
 8010d94:	f8cb 702c 	str.w	r7, [fp, #44]	; 0x2c
 8010d98:	af29      	add	r7, sp, #164	; 0xa4
 8010d9a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010d9c:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8010f2c <MEMS_runMagCal.constprop.21+0x2200>
 8010da0:	f8bd c0b0 	ldrh.w	ip, [sp, #176]	; 0xb0
 8010da4:	f8bd e0b2 	ldrh.w	lr, [sp, #178]	; 0xb2
 8010da8:	eddf 4a61 	vldr	s9, [pc, #388]	; 8010f30 <MEMS_runMagCal.constprop.21+0x2204>
 8010dac:	683f      	ldr	r7, [r7, #0]
 8010dae:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8010db2:	f9bd 30aa 	ldrsh.w	r3, [sp, #170]	; 0xaa
 8010db6:	f8bd 20b4 	ldrh.w	r2, [sp, #180]	; 0xb4
 8010dba:	f8c8 7000 	str.w	r7, [r8]
 8010dbe:	ee05 3a10 	vmov	s10, r3
 8010dc2:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 8010dc6:	f89b 0035 	ldrb.w	r0, [fp, #53]	; 0x35
 8010dca:	ee05 3a90 	vmov	s11, r3
 8010dce:	f9bd 30ae 	ldrsh.w	r3, [sp, #174]	; 0xae
 8010dd2:	ee06 3a10 	vmov	s12, r3
 8010dd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010dda:	fb03 f10c 	mul.w	r1, r3, ip
 8010dde:	ee06 1a90 	vmov	s13, r1
 8010de2:	fb03 f10e 	mul.w	r1, r3, lr
 8010de6:	fb03 f302 	mul.w	r3, r3, r2
 8010dea:	ee07 3a90 	vmov	s15, r3
 8010dee:	ee07 1a10 	vmov	s14, r1
 8010df2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010df6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010dfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010dfe:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8010e02:	ee27 7a24 	vmul.f32	s14, s14, s9
 8010e06:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8010e0a:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8010e0e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8010e12:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8010e16:	2301      	movs	r3, #1
 8010e18:	2700      	movs	r7, #0
 8010e1a:	22ff      	movs	r2, #255	; 0xff
 8010e1c:	edcb 6a23 	vstr	s13, [fp, #140]	; 0x8c
 8010e20:	ed8b 7a27 	vstr	s14, [fp, #156]	; 0x9c
 8010e24:	edcb 7a2b 	vstr	s15, [fp, #172]	; 0xac
 8010e28:	ed8b 5a20 	vstr	s10, [fp, #128]	; 0x80
 8010e2c:	edcb 5a21 	vstr	s11, [fp, #132]	; 0x84
 8010e30:	ed8b 6a22 	vstr	s12, [fp, #136]	; 0x88
 8010e34:	f88b 3064 	strb.w	r3, [fp, #100]	; 0x64
 8010e38:	f88b 307d 	strb.w	r3, [fp, #125]	; 0x7d
 8010e3c:	f88b 7034 	strb.w	r7, [fp, #52]	; 0x34
 8010e40:	f88b 2036 	strb.w	r2, [fp, #54]	; 0x36
 8010e44:	2d00      	cmp	r5, #0
 8010e46:	f43e ab3d 	beq.w	800f4c4 <MEMS_runMagCal.constprop.21+0x798>
 8010e4a:	eddf 8a37 	vldr	s17, [pc, #220]	; 8010f28 <MEMS_runMagCal.constprop.21+0x21fc>
 8010e4e:	f04f 31ff 	mov.w	r1, #4294967295
 8010e52:	463a      	mov	r2, r7
 8010e54:	f89b e0b1 	ldrb.w	lr, [fp, #177]	; 0xb1
 8010e58:	fb92 f3fe 	sdiv	r3, r2, lr
 8010e5c:	fb0e 2313 	mls	r3, lr, r3, r2
 8010e60:	b2db      	uxtb	r3, r3
 8010e62:	3315      	adds	r3, #21
 8010e64:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8010e68:	eddb 3a20 	vldr	s7, [fp, #128]	; 0x80
 8010e6c:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	; 0x2a
 8010e70:	ed9b 4a21 	vldr	s8, [fp, #132]	; 0x84
 8010e74:	eddb 6a23 	vldr	s13, [fp, #140]	; 0x8c
 8010e78:	ed9b 7a27 	vldr	s14, [fp, #156]	; 0x9c
 8010e7c:	eddb 5a22 	vldr	s11, [fp, #136]	; 0x88
 8010e80:	eddb 7a2b 	vldr	s15, [fp, #172]	; 0xac
 8010e84:	ee04 2a90 	vmov	s9, r2
 8010e88:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 8010e8c:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8010e90:	ee05 2a10 	vmov	s10, r2
 8010e94:	ee06 3a10 	vmov	s12, r3
 8010e98:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8010e9c:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8010ea0:	ee74 4ae3 	vsub.f32	s9, s9, s7
 8010ea4:	ee35 5a44 	vsub.f32	s10, s10, s8
 8010ea8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8010eac:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8010eb0:	ee25 7a07 	vmul.f32	s14, s10, s14
 8010eb4:	ee36 6a65 	vsub.f32	s12, s12, s11
 8010eb8:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8010ebc:	ee27 7a07 	vmul.f32	s14, s14, s14
 8010ec0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010ec4:	ee36 0a87 	vadd.f32	s0, s13, s14
 8010ec8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010ecc:	1c4b      	adds	r3, r1, #1
 8010ece:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010ed2:	fb93 f1f0 	sdiv	r1, r3, r0
 8010ed6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8010eda:	fb00 3111 	mls	r1, r0, r1, r3
 8010ede:	b249      	sxtb	r1, r1
 8010ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ee4:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8010ee8:	f88b 1036 	strb.w	r1, [fp, #54]	; 0x36
 8010eec:	f100 8193 	bmi.w	8011216 <MEMS_runMagCal.constprop.21+0x24ea>
 8010ef0:	3701      	adds	r7, #1
 8010ef2:	b23f      	sxth	r7, r7
 8010ef4:	eb0b 0341 	add.w	r3, fp, r1, lsl #1
 8010ef8:	42af      	cmp	r7, r5
 8010efa:	ed9b 0a05 	vldr	s0, [fp, #20]
 8010efe:	ee68 7a00 	vmul.f32	s15, s16, s0
 8010f02:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8010f06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010f0a:	ee17 2a90 	vmov	r2, s15
 8010f0e:	871a      	strh	r2, [r3, #56]	; 0x38
 8010f10:	463a      	mov	r2, r7
 8010f12:	db9f      	blt.n	8010e54 <MEMS_runMagCal.constprop.21+0x2128>
 8010f14:	f7fe bad8 	b.w	800f4c8 <MEMS_runMagCal.constprop.21+0x79c>
 8010f18:	3a83126f 	.word	0x3a83126f
 8010f1c:	3c23d70a 	.word	0x3c23d70a
 8010f20:	447a0000 	.word	0x447a0000
 8010f24:	200016fc 	.word	0x200016fc
 8010f28:	42c80000 	.word	0x42c80000
 8010f2c:	200016d8 	.word	0x200016d8
 8010f30:	358637bd 	.word	0x358637bd
 8010f34:	2224      	movs	r2, #36	; 0x24
 8010f36:	a846      	add	r0, sp, #280	; 0x118
 8010f38:	f00a fafd 	bl	801b536 <memset>
 8010f3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010f40:	fb03 f208 	mul.w	r2, r3, r8
 8010f44:	ee06 2a90 	vmov	s13, r2
 8010f48:	fb03 f204 	mul.w	r2, r3, r4
 8010f4c:	fb03 f306 	mul.w	r3, r3, r6
 8010f50:	ee07 2a10 	vmov	s14, r2
 8010f54:	ee07 3a90 	vmov	s15, r3
 8010f58:	ed1f 6a0b 	vldr	s12, [pc, #-44]	; 8010f30 <MEMS_runMagCal.constprop.21+0x2204>
 8010f5c:	4ee2      	ldr	r6, [pc, #904]	; (80112e8 <MEMS_runMagCal.constprop.21+0x25bc>)
 8010f5e:	ed9b 0a05 	vldr	s0, [fp, #20]
 8010f62:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010f66:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010f6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010f6e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8010f72:	ee27 7a06 	vmul.f32	s14, s14, s12
 8010f76:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010f7a:	4631      	mov	r1, r6
 8010f7c:	ab36      	add	r3, sp, #216	; 0xd8
 8010f7e:	aa10      	add	r2, sp, #64	; 0x40
 8010f80:	ac11      	add	r4, sp, #68	; 0x44
 8010f82:	f1a6 001e 	sub.w	r0, r6, #30
 8010f86:	edcd 6a46 	vstr	s13, [sp, #280]	; 0x118
 8010f8a:	ed8d 7a4a 	vstr	s14, [sp, #296]	; 0x128
 8010f8e:	edcd 7a4e 	vstr	s15, [sp, #312]	; 0x138
 8010f92:	f7fc fe83 	bl	800dc9c <getMagStats.constprop.35>
 8010f96:	a946      	add	r1, sp, #280	; 0x118
 8010f98:	4623      	mov	r3, r4
 8010f9a:	aa10      	add	r2, sp, #64	; 0x40
 8010f9c:	ed9b 0a05 	vldr	s0, [fp, #20]
 8010fa0:	f10d 00aa 	add.w	r0, sp, #170	; 0xaa
 8010fa4:	f7fc fe7a 	bl	800dc9c <getMagStats.constprop.35>
 8010fa8:	eddf 6ad0 	vldr	s13, [pc, #832]	; 80112ec <MEMS_runMagCal.constprop.21+0x25c0>
 8010fac:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 8010fb0:	ed94 7a00 	vldr	s14, [r4]
 8010fb4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010fb8:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8010fbc:	eef0 7ae7 	vabs.f32	s15, s15
 8010fc0:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fc8:	d505      	bpl.n	8010fd6 <MEMS_runMagCal.constprop.21+0x22aa>
 8010fca:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8010fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fd2:	f100 810a 	bmi.w	80111ea <MEMS_runMagCal.constprop.21+0x24be>
 8010fd6:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8010fda:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fe2:	f140 8100 	bpl.w	80111e6 <MEMS_runMagCal.constprop.21+0x24ba>
 8010fe6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8010fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fee:	bf4c      	ite	mi
 8010ff0:	2302      	movmi	r3, #2
 8010ff2:	2301      	movpl	r3, #1
 8010ff4:	eddd 6a36 	vldr	s13, [sp, #216]	; 0xd8
 8010ff8:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8010ffc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011000:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011008:	f57e aa99 	bpl.w	800f53e <MEMS_runMagCal.constprop.21+0x812>
 801100c:	f89b 207c 	ldrb.w	r2, [fp, #124]	; 0x7c
 8011010:	429a      	cmp	r2, r3
 8011012:	f63e aa94 	bhi.w	800f53e <MEMS_runMagCal.constprop.21+0x812>
 8011016:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 801101a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801101e:	eef4 6ae7 	vcmpe.f32	s13, s15
 8011022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011026:	f140 80e8 	bpl.w	80111fa <MEMS_runMagCal.constprop.21+0x24ce>
 801102a:	f9bb 1070 	ldrsh.w	r1, [fp, #112]	; 0x70
 801102e:	f9bd 70ac 	ldrsh.w	r7, [sp, #172]	; 0xac
 8011032:	f9bb e06e 	ldrsh.w	lr, [fp, #110]	; 0x6e
 8011036:	f9bd 00aa 	ldrsh.w	r0, [sp, #170]	; 0xaa
 801103a:	f9bb 5072 	ldrsh.w	r5, [fp, #114]	; 0x72
 801103e:	f9bd 20ae 	ldrsh.w	r2, [sp, #174]	; 0xae
 8011042:	eddb 5a05 	vldr	s11, [fp, #20]
 8011046:	eba1 0c07 	sub.w	ip, r1, r7
 801104a:	ebae 0800 	sub.w	r8, lr, r0
 801104e:	ea8c 73ec 	eor.w	r3, ip, ip, asr #31
 8011052:	eba3 73ec 	sub.w	r3, r3, ip, asr #31
 8011056:	ea88 7ce8 	eor.w	ip, r8, r8, asr #31
 801105a:	ebac 7ce8 	sub.w	ip, ip, r8, asr #31
 801105e:	4563      	cmp	r3, ip
 8011060:	eba5 0802 	sub.w	r8, r5, r2
 8011064:	bfb8      	it	lt
 8011066:	4663      	movlt	r3, ip
 8011068:	ea88 7ce8 	eor.w	ip, r8, r8, asr #31
 801106c:	b21b      	sxth	r3, r3
 801106e:	ebac 7ce8 	sub.w	ip, ip, r8, asr #31
 8011072:	4563      	cmp	r3, ip
 8011074:	bfb8      	it	lt
 8011076:	4663      	movlt	r3, ip
 8011078:	b21b      	sxth	r3, r3
 801107a:	ee07 3a90 	vmov	s15, r3
 801107e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011082:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8011086:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801108a:	eef4 7ac6 	vcmpe.f32	s15, s12
 801108e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011092:	f140 80a4 	bpl.w	80111de <MEMS_runMagCal.constprop.21+0x24b2>
 8011096:	ee37 7a26 	vadd.f32	s14, s14, s13
 801109a:	f8bb 3074 	ldrh.w	r3, [fp, #116]	; 0x74
 801109e:	eec6 3a87 	vdiv.f32	s7, s13, s14
 80110a2:	ee07 ea90 	vmov	s15, lr
 80110a6:	ee04 3a90 	vmov	s9, r3
 80110aa:	f8bd 30b0 	ldrh.w	r3, [sp, #176]	; 0xb0
 80110ae:	eeb8 2ae7 	vcvt.f32.s32	s4, s15
 80110b2:	ee00 3a10 	vmov	s0, r3
 80110b6:	ee07 0a90 	vmov	s15, r0
 80110ba:	f8bb 3076 	ldrh.w	r3, [fp, #118]	; 0x76
 80110be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80110c2:	ee00 3a90 	vmov	s1, r3
 80110c6:	ee07 1a90 	vmov	s15, r1
 80110ca:	f8bd 30b2 	ldrh.w	r3, [sp, #178]	; 0xb2
 80110ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80110d2:	ee05 3a10 	vmov	s10, r3
 80110d6:	ee07 7a90 	vmov	s15, r7
 80110da:	f8bb 3078 	ldrh.w	r3, [fp, #120]	; 0x78
 80110de:	eef8 2ae7 	vcvt.f32.s32	s5, s15
 80110e2:	ee01 3a10 	vmov	s2, r3
 80110e6:	ee07 5a90 	vmov	s15, r5
 80110ea:	f8bd 30b4 	ldrh.w	r3, [sp, #180]	; 0xb4
 80110ee:	eeb8 3ae7 	vcvt.f32.s32	s6, s15
 80110f2:	ee05 3a90 	vmov	s11, r3
 80110f6:	ee07 2a90 	vmov	s15, r2
 80110fa:	f89b 306c 	ldrb.w	r3, [fp, #108]	; 0x6c
 80110fe:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 8011102:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011106:	ee01 3a90 	vmov	s3, r3
 801110a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801110e:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 8011112:	ee23 3a04 	vmul.f32	s6, s6, s8
 8011116:	ee06 3a10 	vmov	s12, r3
 801111a:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801111e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8011122:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8011126:	ee22 2a04 	vmul.f32	s4, s4, s8
 801112a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801112e:	ee21 1a04 	vmul.f32	s2, s2, s8
 8011132:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8011136:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801113a:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801113e:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8011142:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8011146:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801114a:	ee66 6aa3 	vmul.f32	s13, s13, s7
 801114e:	ee62 2aa3 	vmul.f32	s5, s5, s7
 8011152:	ee65 5aa3 	vmul.f32	s11, s11, s7
 8011156:	ee77 7a83 	vadd.f32	s15, s15, s6
 801115a:	ee64 4a84 	vmul.f32	s9, s9, s8
 801115e:	ee60 0a84 	vmul.f32	s1, s1, s8
 8011162:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011166:	ee20 0a23 	vmul.f32	s0, s0, s7
 801116a:	ee25 5a23 	vmul.f32	s10, s10, s7
 801116e:	ee21 4a84 	vmul.f32	s8, s3, s8
 8011172:	ee26 6a23 	vmul.f32	s12, s12, s7
 8011176:	ee76 6a82 	vadd.f32	s13, s13, s4
 801117a:	ee37 7a22 	vadd.f32	s14, s14, s5
 801117e:	ee75 5a81 	vadd.f32	s11, s11, s2
 8011182:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8011186:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801118a:	ee17 3a90 	vmov	r3, s15
 801118e:	ee74 4a80 	vadd.f32	s9, s9, s0
 8011192:	eefc 7ae5 	vcvt.u32.f32	s15, s11
 8011196:	ee35 5a20 	vadd.f32	s10, s10, s1
 801119a:	ee36 6a04 	vadd.f32	s12, s12, s8
 801119e:	ee16 1a90 	vmov	r1, s13
 80111a2:	ee17 2a10 	vmov	r2, s14
 80111a6:	ee17 5a90 	vmov	r5, s15
 80111aa:	eefc 6ae4 	vcvt.u32.f32	s13, s9
 80111ae:	eebc 7ac5 	vcvt.u32.f32	s14, s10
 80111b2:	eefc 7ac6 	vcvt.u32.f32	s15, s12
 80111b6:	ee16 ea90 	vmov	lr, s13
 80111ba:	ee17 7a10 	vmov	r7, s14
 80111be:	ee17 0a90 	vmov	r0, s15
 80111c2:	f8ad 10aa 	strh.w	r1, [sp, #170]	; 0xaa
 80111c6:	f8ad e0b0 	strh.w	lr, [sp, #176]	; 0xb0
 80111ca:	f8ad 20ac 	strh.w	r2, [sp, #172]	; 0xac
 80111ce:	f8ad 70b2 	strh.w	r7, [sp, #178]	; 0xb2
 80111d2:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
 80111d6:	f8ad 50b4 	strh.w	r5, [sp, #180]	; 0xb4
 80111da:	f88d 00a8 	strb.w	r0, [sp, #168]	; 0xa8
 80111de:	9f29      	ldr	r7, [sp, #164]	; 0xa4
 80111e0:	f89b 50b0 	ldrb.w	r5, [fp, #176]	; 0xb0
 80111e4:	e5d6      	b.n	8010d94 <MEMS_runMagCal.constprop.21+0x2068>
 80111e6:	2301      	movs	r3, #1
 80111e8:	e704      	b.n	8010ff4 <MEMS_runMagCal.constprop.21+0x22c8>
 80111ea:	2303      	movs	r3, #3
 80111ec:	e702      	b.n	8010ff4 <MEMS_runMagCal.constprop.21+0x22c8>
 80111ee:	2303      	movs	r3, #3
 80111f0:	f7fe b99c 	b.w	800f52c <MEMS_runMagCal.constprop.21+0x800>
 80111f4:	2301      	movs	r3, #1
 80111f6:	f7fe b999 	b.w	800f52c <MEMS_runMagCal.constprop.21+0x800>
 80111fa:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 80111fe:	eef4 6ae7 	vcmpe.f32	s13, s15
 8011202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011206:	d5ea      	bpl.n	80111de <MEMS_runMagCal.constprop.21+0x24b2>
 8011208:	f89b 206c 	ldrb.w	r2, [fp, #108]	; 0x6c
 801120c:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 8011210:	429a      	cmp	r2, r3
 8011212:	d2e4      	bcs.n	80111de <MEMS_runMagCal.constprop.21+0x24b2>
 8011214:	e709      	b.n	801102a <MEMS_runMagCal.constprop.21+0x22fe>
 8011216:	f007 fcf5 	bl	8018c04 <sqrtf>
 801121a:	f99b 1036 	ldrsb.w	r1, [fp, #54]	; 0x36
 801121e:	f89b 50b0 	ldrb.w	r5, [fp, #176]	; 0xb0
 8011222:	f89b 0035 	ldrb.w	r0, [fp, #53]	; 0x35
 8011226:	e663      	b.n	8010ef0 <MEMS_runMagCal.constprop.21+0x21c4>
 8011228:	f04f 0900 	mov.w	r9, #0
 801122c:	e558      	b.n	8010ce0 <MEMS_runMagCal.constprop.21+0x1fb4>
 801122e:	eddf 7a30 	vldr	s15, [pc, #192]	; 80112f0 <MEMS_runMagCal.constprop.21+0x25c4>
 8011232:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801123a:	f53f acd7 	bmi.w	8010bec <MEMS_runMagCal.constprop.21+0x1ec0>
 801123e:	e4dc      	b.n	8010bfa <MEMS_runMagCal.constprop.21+0x1ece>
 8011240:	ed9f 8a2f 	vldr	s16, [pc, #188]	; 8011300 <MEMS_runMagCal.constprop.21+0x25d4>
 8011244:	e4b6      	b.n	8010bb4 <MEMS_runMagCal.constprop.21+0x1e88>
 8011246:	2224      	movs	r2, #36	; 0x24
 8011248:	2100      	movs	r1, #0
 801124a:	a846      	add	r0, sp, #280	; 0x118
 801124c:	f00a f973 	bl	801b536 <memset>
 8011250:	eddf 7a26 	vldr	s15, [pc, #152]	; 80112ec <MEMS_runMagCal.constprop.21+0x25c0>
 8011254:	ed9d 7a2e 	vldr	s14, [sp, #184]	; 0xb8
 8011258:	ee87 8a8c 	vdiv.f32	s16, s15, s24
 801125c:	ee87 0a28 	vdiv.f32	s0, s14, s17
 8011260:	f007 f9bc 	bl	80185dc <roundf>
 8011264:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8011268:	eddd 7a2f 	vldr	s15, [sp, #188]	; 0xbc
 801126c:	ed8d 8a46 	vstr	s16, [sp, #280]	; 0x118
 8011270:	ee17 3a10 	vmov	r3, s14
 8011274:	ee87 0aa8 	vdiv.f32	s0, s15, s17
 8011278:	f8ad 30d8 	strh.w	r3, [sp, #216]	; 0xd8
 801127c:	f007 f9ae 	bl	80185dc <roundf>
 8011280:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8011284:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8011288:	ed8d 8a4a 	vstr	s16, [sp, #296]	; 0x128
 801128c:	ee17 3a10 	vmov	r3, s14
 8011290:	ee87 0aa8 	vdiv.f32	s0, s15, s17
 8011294:	f8ad 30da 	strh.w	r3, [sp, #218]	; 0xda
 8011298:	f007 f9a0 	bl	80185dc <roundf>
 801129c:	ab25      	add	r3, sp, #148	; 0x94
 801129e:	aa34      	add	r2, sp, #208	; 0xd0
 80112a0:	a946      	add	r1, sp, #280	; 0x118
 80112a2:	a836      	add	r0, sp, #216	; 0xd8
 80112a4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80112a8:	eeb0 0a68 	vmov.f32	s0, s17
 80112ac:	ee17 4a90 	vmov	r4, s15
 80112b0:	ed8d 8a4e 	vstr	s16, [sp, #312]	; 0x138
 80112b4:	f8ad 40dc 	strh.w	r4, [sp, #220]	; 0xdc
 80112b8:	f7fc fcf0 	bl	800dc9c <getMagStats.constprop.35>
 80112bc:	ed9d 8a25 	vldr	s16, [sp, #148]	; 0x94
 80112c0:	ed9d aa34 	vldr	s20, [sp, #208]	; 0xd0
 80112c4:	ed9d ca31 	vldr	s24, [sp, #196]	; 0xc4
 80112c8:	ee28 9a09 	vmul.f32	s18, s16, s18
 80112cc:	ee38 8a08 	vadd.f32	s16, s16, s16
 80112d0:	e443      	b.n	8010b5a <MEMS_runMagCal.constprop.21+0x1e2e>
 80112d2:	ed9f 9a0b 	vldr	s18, [pc, #44]	; 8011300 <MEMS_runMagCal.constprop.21+0x25d4>
 80112d6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8011304 <MEMS_runMagCal.constprop.21+0x25d8>
 80112da:	eef0 7a49 	vmov.f32	s15, s18
 80112de:	e41e      	b.n	8010b1e <MEMS_runMagCal.constprop.21+0x1df2>
 80112e0:	eeb0 ca66 	vmov.f32	s24, s13
 80112e4:	f7ff b9e6 	b.w	80106b4 <MEMS_runMagCal.constprop.21+0x1988>
 80112e8:	200016fc 	.word	0x200016fc
 80112ec:	423c0000 	.word	0x423c0000
 80112f0:	3eb33333 	.word	0x3eb33333
 80112f4:	bf000001 	.word	0xbf000001
 80112f8:	40060a92 	.word	0x40060a92
 80112fc:	3effffff 	.word	0x3effffff
 8011300:	00000000 	.word	0x00000000
 8011304:	41f00001 	.word	0x41f00001
 8011308:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 801130c:	ee86 9a05 	vdiv.f32	s18, s12, s10
 8011310:	ee75 5aa5 	vadd.f32	s11, s11, s11
 8011314:	ee37 7a49 	vsub.f32	s14, s14, s18
 8011318:	ee76 6ac9 	vsub.f32	s13, s13, s18
 801131c:	ee27 7a07 	vmul.f32	s14, s14, s14
 8011320:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8011324:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8011328:	ee37 7a26 	vadd.f32	s14, s14, s13
 801132c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011330:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8011334:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011338:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801133c:	ee87 0aa6 	vdiv.f32	s0, s15, s13
 8011340:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8011344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011348:	eeb1 aac0 	vsqrt.f32	s20, s0
 801134c:	d501      	bpl.n	8011352 <MEMS_runMagCal.constprop.21+0x2626>
 801134e:	f007 fc59 	bl	8018c04 <sqrtf>
 8011352:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8011356:	eddd 6a33 	vldr	s13, [sp, #204]	; 0xcc
 801135a:	eddd 5a32 	vldr	s11, [sp, #200]	; 0xc8
 801135e:	ed9d 6a2f 	vldr	s12, [sp, #188]	; 0xbc
 8011362:	eddd 4a30 	vldr	s9, [sp, #192]	; 0xc0
 8011366:	ed9d 5a2e 	vldr	s10, [sp, #184]	; 0xb8
 801136a:	ee37 7a49 	vsub.f32	s14, s14, s18
 801136e:	ee76 6ac9 	vsub.f32	s13, s13, s18
 8011372:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8011376:	ee86 7a8a 	vdiv.f32	s14, s13, s20
 801137a:	eec5 6a8a 	vdiv.f32	s13, s11, s20
 801137e:	eec6 5a0a 	vdiv.f32	s11, s12, s20
 8011382:	ee84 6a8a 	vdiv.f32	s12, s9, s20
 8011386:	ee35 5a49 	vsub.f32	s10, s10, s18
 801138a:	ee27 0a87 	vmul.f32	s0, s15, s14
 801138e:	eec5 4a0a 	vdiv.f32	s9, s10, s20
 8011392:	ee26 4aa6 	vmul.f32	s8, s13, s13
 8011396:	ee26 5a86 	vmul.f32	s10, s13, s12
 801139a:	ee25 7a87 	vmul.f32	s14, s11, s14
 801139e:	ee30 0a44 	vsub.f32	s0, s0, s8
 80113a2:	ee37 7a45 	vsub.f32	s14, s14, s10
 80113a6:	ee27 4a86 	vmul.f32	s8, s15, s12
 80113aa:	ee26 5aa5 	vmul.f32	s10, s13, s11
 80113ae:	ee27 7a25 	vmul.f32	s14, s14, s11
 80113b2:	ee35 5a44 	vsub.f32	s10, s10, s8
 80113b6:	ee20 0a24 	vmul.f32	s0, s0, s9
 80113ba:	edcd 7a4a 	vstr	s15, [sp, #296]	; 0x128
 80113be:	ee30 0a47 	vsub.f32	s0, s0, s14
 80113c2:	ee25 7a06 	vmul.f32	s14, s10, s12
 80113c6:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 80113ca:	ee30 0a07 	vadd.f32	s0, s0, s14
 80113ce:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80113d2:	ee20 0a05 	vmul.f32	s0, s0, s10
 80113d6:	edcd 6a4b 	vstr	s13, [sp, #300]	; 0x12c
 80113da:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80113de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113e2:	edcd 6a4d 	vstr	s13, [sp, #308]	; 0x134
 80113e6:	edcd 4a46 	vstr	s9, [sp, #280]	; 0x118
 80113ea:	edcd 5a47 	vstr	s11, [sp, #284]	; 0x11c
 80113ee:	edcd 5a49 	vstr	s11, [sp, #292]	; 0x124
 80113f2:	ed8d 6a48 	vstr	s12, [sp, #288]	; 0x120
 80113f6:	ed8d 6a4c 	vstr	s12, [sp, #304]	; 0x130
 80113fa:	d945      	bls.n	8011488 <MEMS_runMagCal.constprop.21+0x275c>
 80113fc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8011400:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8011404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011408:	db2b      	blt.n	8011462 <MEMS_runMagCal.constprop.21+0x2736>
 801140a:	ed1f 0a46 	vldr	s0, [pc, #-280]	; 80112f4 <MEMS_runMagCal.constprop.21+0x25c8>
 801140e:	f89b 30b0 	ldrb.w	r3, [fp, #176]	; 0xb0
 8011412:	ee7a 7a0a 	vadd.f32	s15, s20, s20
 8011416:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 801141a:	ee27 7a88 	vmul.f32	s14, s15, s16
 801141e:	ee69 6a26 	vmul.f32	s13, s18, s13
 8011422:	ee37 7a09 	vadd.f32	s14, s14, s18
 8011426:	ee67 7a80 	vmul.f32	s15, s15, s0
 801142a:	ee76 6ac7 	vsub.f32	s13, s13, s14
 801142e:	ee77 7a89 	vadd.f32	s15, s15, s18
 8011432:	ee04 3a90 	vmov	s9, r3
 8011436:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801143a:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 801143e:	ee37 6a26 	vadd.f32	s12, s14, s13
 8011442:	ee36 6a27 	vadd.f32	s12, s12, s15
 8011446:	f7fe bd5f 	b.w	800ff08 <MEMS_runMagCal.constprop.21+0x11dc>
 801144a:	ed1f 6a53 	vldr	s12, [pc, #-332]	; 8011300 <MEMS_runMagCal.constprop.21+0x25d4>
 801144e:	eef0 7a46 	vmov.f32	s15, s12
 8011452:	eef0 6a46 	vmov.f32	s13, s12
 8011456:	eeb0 7a46 	vmov.f32	s14, s12
 801145a:	eeb0 9a46 	vmov.f32	s18, s12
 801145e:	f7fe bd60 	b.w	800ff22 <MEMS_runMagCal.constprop.21+0x11f6>
 8011462:	f007 fb77 	bl	8018b54 <acosf>
 8011466:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 801146a:	eec0 aa27 	vdiv.f32	s21, s0, s15
 801146e:	eeb0 0a6a 	vmov.f32	s0, s21
 8011472:	f007 f873 	bl	801855c <cosf>
 8011476:	eeb0 8a40 	vmov.f32	s16, s0
 801147a:	ed1f 0a61 	vldr	s0, [pc, #-388]	; 80112f8 <MEMS_runMagCal.constprop.21+0x25cc>
 801147e:	ee3a 0a80 	vadd.f32	s0, s21, s0
 8011482:	f007 f86b 	bl	801855c <cosf>
 8011486:	e7c2      	b.n	801140e <MEMS_runMagCal.constprop.21+0x26e2>
 8011488:	eeb0 0a47 	vmov.f32	s0, s14
 801148c:	ed1f 8a65 	vldr	s16, [pc, #-404]	; 80112fc <MEMS_runMagCal.constprop.21+0x25d0>
 8011490:	e7bd      	b.n	801140e <MEMS_runMagCal.constprop.21+0x26e2>
 8011492:	ed1f 9a65 	vldr	s18, [pc, #-404]	; 8011300 <MEMS_runMagCal.constprop.21+0x25d4>
 8011496:	ed9d ca31 	vldr	s24, [sp, #196]	; 0xc4
 801149a:	ed1f 7a66 	vldr	s14, [pc, #-408]	; 8011304 <MEMS_runMagCal.constprop.21+0x25d8>
 801149e:	eef0 7a49 	vmov.f32	s15, s18
 80114a2:	f7ff bb3c 	b.w	8010b1e <MEMS_runMagCal.constprop.21+0x1df2>
 80114a6:	ed96 0a00 	vldr	s0, [r6]
 80114aa:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80114ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114b2:	eeb1 9ac0 	vsqrt.f32	s18, s0
 80114b6:	f57f aada 	bpl.w	8010a6e <MEMS_runMagCal.constprop.21+0x1d42>
 80114ba:	f007 fba3 	bl	8018c04 <sqrtf>
 80114be:	f7ff bad6 	b.w	8010a6e <MEMS_runMagCal.constprop.21+0x1d42>
 80114c2:	ed98 0a00 	vldr	s0, [r8]
 80114c6:	eef4 7ac0 	vcmpe.f32	s15, s0
 80114ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114ce:	d5e0      	bpl.n	8011492 <MEMS_runMagCal.constprop.21+0x2766>
 80114d0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80114d4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80114d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114dc:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80114e0:	d505      	bpl.n	80114ee <MEMS_runMagCal.constprop.21+0x27c2>
 80114e2:	9102      	str	r1, [sp, #8]
 80114e4:	9201      	str	r2, [sp, #4]
 80114e6:	f007 fb8d 	bl	8018c04 <sqrtf>
 80114ea:	9902      	ldr	r1, [sp, #8]
 80114ec:	9a01      	ldr	r2, [sp, #4]
 80114ee:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 80114f2:	ed83 8a00 	vstr	s16, [r3]
 80114f6:	f7ff ba60 	b.w	80109ba <MEMS_runMagCal.constprop.21+0x1c8e>
 80114fa:	bf00      	nop
 80114fc:	0000      	movs	r0, r0
	...

08011500 <m_kalman_3gyro.isra.9.constprop.47>:
 8011500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011504:	ed2d 8b10 	vpush	{d8-d15}
 8011508:	4cd2      	ldr	r4, [pc, #840]	; (8011854 <m_kalman_3gyro.isra.9.constprop.47+0x354>)
 801150a:	ed9f 8ad3 	vldr	s16, [pc, #844]	; 8011858 <m_kalman_3gyro.isra.9.constprop.47+0x358>
 801150e:	f2ad 6d54 	subw	sp, sp, #1620	; 0x654
 8011512:	468c      	mov	ip, r1
 8011514:	4691      	mov	r9, r2
 8011516:	9125      	str	r1, [sp, #148]	; 0x94
 8011518:	9208      	str	r2, [sp, #32]
 801151a:	9307      	str	r3, [sp, #28]
 801151c:	4680      	mov	r8, r0
 801151e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011520:	aeb1      	add	r6, sp, #708	; 0x2c4
 8011522:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011524:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011526:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011528:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801152a:	f89d 56c0 	ldrb.w	r5, [sp, #1728]	; 0x6c0
 801152e:	9526      	str	r5, [sp, #152]	; 0x98
 8011530:	f89d 56c4 	ldrb.w	r5, [sp, #1732]	; 0x6c4
 8011534:	950a      	str	r5, [sp, #40]	; 0x28
 8011536:	f8dd a700 	ldr.w	sl, [sp, #1792]	; 0x700
 801153a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801153c:	4625      	mov	r5, r4
 801153e:	afbe      	add	r7, sp, #760	; 0x2f8
 8011540:	f855 3b04 	ldr.w	r3, [r5], #4
 8011544:	6033      	str	r3, [r6, #0]
 8011546:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011548:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801154a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801154c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801154e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011550:	f104 0e38 	add.w	lr, r4, #56	; 0x38
 8011554:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8011556:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801155a:	aecb      	add	r6, sp, #812	; 0x32c
 801155c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801155e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011562:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011564:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011568:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801156a:	682a      	ldr	r2, [r5, #0]
 801156c:	f8de 3000 	ldr.w	r3, [lr]
 8011570:	603a      	str	r2, [r7, #0]
 8011572:	f104 076c 	add.w	r7, r4, #108	; 0x6c
 8011576:	6033      	str	r3, [r6, #0]
 8011578:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801157a:	add8      	add	r5, sp, #864	; 0x360
 801157c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801157e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011580:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011582:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011584:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
 8011588:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801158a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801158c:	683f      	ldr	r7, [r7, #0]
 801158e:	602f      	str	r7, [r5, #0]
 8011590:	ad93      	add	r5, sp, #588	; 0x24c
 8011592:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011594:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8011596:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011598:	e896 0003 	ldmia.w	r6, {r0, r1}
 801159c:	f104 06c8 	add.w	r6, r4, #200	; 0xc8
 80115a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80115a4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80115a6:	ad9d      	add	r5, sp, #628	; 0x274
 80115a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80115aa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80115ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80115ae:	e896 0003 	ldmia.w	r6, {r0, r1}
 80115b2:	f104 06f0 	add.w	r6, r4, #240	; 0xf0
 80115b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80115ba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80115bc:	ada7      	add	r5, sp, #668	; 0x29c
 80115be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80115c0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80115c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80115c4:	e896 0003 	ldmia.w	r6, {r0, r1}
 80115c8:	f504 768c 	add.w	r6, r4, #280	; 0x118
 80115cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80115d0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80115d2:	ad58      	add	r5, sp, #352	; 0x160
 80115d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80115d6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80115da:	f8dd 76f4 	ldr.w	r7, [sp, #1780]	; 0x6f4
 80115de:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80115e2:	f504 749a 	add.w	r4, r4, #308	; 0x134
 80115e6:	2500      	movs	r5, #0
 80115e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80115ea:	703d      	strb	r5, [r7, #0]
 80115ec:	f8dd 76f8 	ldr.w	r7, [sp, #1784]	; 0x6f8
 80115f0:	ed8d 2a27 	vstr	s4, [sp, #156]	; 0x9c
 80115f4:	703d      	strb	r5, [r7, #0]
 80115f6:	f8dd 76fc 	ldr.w	r7, [sp, #1788]	; 0x6fc
 80115fa:	703d      	strb	r5, [r7, #0]
 80115fc:	eddc 6a00 	vldr	s13, [ip]
 8011600:	eddc 7a01 	vldr	s15, [ip, #4]
 8011604:	ed9c 7a02 	vldr	s14, [ip, #8]
 8011608:	ee66 6aa6 	vmul.f32	s13, s13, s13
 801160c:	ad5f      	add	r5, sp, #380	; 0x17c
 801160e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011612:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011614:	ee27 7a07 	vmul.f32	s14, s14, s14
 8011618:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801161c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011620:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8011624:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011628:	4667      	mov	r7, ip
 801162a:	ee17 0a90 	vmov	r0, s15
 801162e:	eeb0 fa41 	vmov.f32	s30, s2
 8011632:	eef0 8a61 	vmov.f32	s17, s3
 8011636:	eef0 ea40 	vmov.f32	s29, s0
 801163a:	eeb0 da60 	vmov.f32	s26, s1
 801163e:	f7ee ff8b 	bl	8000558 <__aeabi_f2d>
 8011642:	ec41 0b10 	vmov	d0, r0, r1
 8011646:	f007 fa2b 	bl	8018aa0 <sqrt>
 801164a:	ec51 0b10 	vmov	r0, r1, d0
 801164e:	f7ef facf 	bl	8000bf0 <__aeabi_d2f>
 8011652:	edd9 6a00 	vldr	s13, [r9]
 8011656:	edd9 7a01 	vldr	s15, [r9, #4]
 801165a:	ed99 7a02 	vldr	s14, [r9, #8]
 801165e:	4b7f      	ldr	r3, [pc, #508]	; (801185c <m_kalman_3gyro.isra.9.constprop.47+0x35c>)
 8011660:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8011664:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011668:	ee27 7a07 	vmul.f32	s14, s14, s14
 801166c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011670:	6018      	str	r0, [r3, #0]
 8011672:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011676:	ee09 0a90 	vmov	s19, r0
 801167a:	ee17 0a90 	vmov	r0, s15
 801167e:	f7ee ff6b 	bl	8000558 <__aeabi_f2d>
 8011682:	ec41 0b10 	vmov	d0, r0, r1
 8011686:	f007 fa0b 	bl	8018aa0 <sqrt>
 801168a:	ec51 0b10 	vmov	r0, r1, d0
 801168e:	f7ef faaf 	bl	8000bf0 <__aeabi_d2f>
 8011692:	edd7 7a00 	vldr	s15, [r7]
 8011696:	ed99 5a00 	vldr	s10, [r9]
 801169a:	edd7 6a01 	vldr	s13, [r7, #4]
 801169e:	edd9 5a01 	vldr	s11, [r9, #4]
 80116a2:	ed97 7a02 	vldr	s14, [r7, #8]
 80116a6:	ed99 6a02 	vldr	s12, [r9, #8]
 80116aa:	edcd 7a52 	vstr	s15, [sp, #328]	; 0x148
 80116ae:	ee0a 0a10 	vmov	s20, r0
 80116b2:	ee87 9aa9 	vdiv.f32	s18, s15, s19
 80116b6:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 80116ba:	f89a 48cd 	ldrb.w	r4, [sl, #2253]	; 0x8cd
 80116be:	ab55      	add	r3, sp, #340	; 0x154
 80116c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80116c4:	ee85 ba0a 	vdiv.f32	s22, s10, s20
 80116c8:	ee86 eaa9 	vdiv.f32	s28, s13, s19
 80116cc:	eec5 ba8a 	vdiv.f32	s23, s11, s20
 80116d0:	eec7 da29 	vdiv.f32	s27, s14, s19
 80116d4:	eec6 aa0a 	vdiv.f32	s21, s12, s20
 80116d8:	ee6b fa09 	vmul.f32	s31, s22, s18
 80116dc:	ee6b 7a8e 	vmul.f32	s15, s23, s28
 80116e0:	ee7f fa88 	vadd.f32	s31, s31, s16
 80116e4:	edcd 6a53 	vstr	s13, [sp, #332]	; 0x14c
 80116e8:	ee77 7aaf 	vadd.f32	s15, s15, s31
 80116ec:	ee6d faaa 	vmul.f32	s31, s27, s21
 80116f0:	ed8d 7a54 	vstr	s14, [sp, #336]	; 0x150
 80116f4:	ee7f faa7 	vadd.f32	s31, s31, s15
 80116f8:	ed8d 9a35 	vstr	s18, [sp, #212]	; 0xd4
 80116fc:	ed8d ea36 	vstr	s28, [sp, #216]	; 0xd8
 8011700:	edcd da37 	vstr	s27, [sp, #220]	; 0xdc
 8011704:	ed8d ba38 	vstr	s22, [sp, #224]	; 0xe0
 8011708:	edcd ba39 	vstr	s23, [sp, #228]	; 0xe4
 801170c:	edcd aa3a 	vstr	s21, [sp, #232]	; 0xe8
 8011710:	2c00      	cmp	r4, #0
 8011712:	f040 81b0 	bne.w	8011a76 <m_kalman_3gyro.isra.9.constprop.47+0x576>
 8011716:	f50d 61db 	add.w	r1, sp, #1752	; 0x6d8
 801171a:	ed91 7b00 	vldr	d7, [r1]
 801171e:	aa3e      	add	r2, sp, #248	; 0xf8
 8011720:	4616      	mov	r6, r2
 8011722:	2301      	movs	r3, #1
 8011724:	9206      	str	r2, [sp, #24]
 8011726:	f10a 0240 	add.w	r2, sl, #64	; 0x40
 801172a:	ed8a 7b0e 	vstr	d7, [sl, #56]	; 0x38
 801172e:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 8011732:	f88a 38cd 	strb.w	r3, [sl, #2253]	; 0x8cd
 8011736:	f88a 3031 	strb.w	r3, [sl, #49]	; 0x31
 801173a:	4621      	mov	r1, r4
 801173c:	6034      	str	r4, [r6, #0]
 801173e:	6074      	str	r4, [r6, #4]
 8011740:	60b4      	str	r4, [r6, #8]
 8011742:	60f4      	str	r4, [r6, #12]
 8011744:	9209      	str	r2, [sp, #36]	; 0x24
 8011746:	f88a 4030 	strb.w	r4, [sl, #48]	; 0x30
 801174a:	4610      	mov	r0, r2
 801174c:	2224      	movs	r2, #36	; 0x24
 801174e:	9442      	str	r4, [sp, #264]	; 0x108
 8011750:	9443      	str	r4, [sp, #268]	; 0x10c
 8011752:	9444      	str	r4, [sp, #272]	; 0x110
 8011754:	9545      	str	r5, [sp, #276]	; 0x114
 8011756:	f009 feee 	bl	801b536 <memset>
 801175a:	4621      	mov	r1, r4
 801175c:	f8ca 5060 	str.w	r5, [sl, #96]	; 0x60
 8011760:	f8ca 5050 	str.w	r5, [sl, #80]	; 0x50
 8011764:	f8ca 5040 	str.w	r5, [sl, #64]	; 0x40
 8011768:	2230      	movs	r2, #48	; 0x30
 801176a:	f10a 0064 	add.w	r0, sl, #100	; 0x64
 801176e:	f009 fee2 	bl	801b536 <memset>
 8011772:	4b3b      	ldr	r3, [pc, #236]	; (8011860 <m_kalman_3gyro.isra.9.constprop.47+0x360>)
 8011774:	f8ca 50b0 	str.w	r5, [sl, #176]	; 0xb0
 8011778:	4621      	mov	r1, r4
 801177a:	f8ca 50b4 	str.w	r5, [sl, #180]	; 0xb4
 801177e:	ed8a 8a25 	vstr	s16, [sl, #148]	; 0x94
 8011782:	ed8a 8a26 	vstr	s16, [sl, #152]	; 0x98
 8011786:	ed8a 8a27 	vstr	s16, [sl, #156]	; 0x9c
 801178a:	f8ca 30ac 	str.w	r3, [sl, #172]	; 0xac
 801178e:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8011792:	f10a 00b8 	add.w	r0, sl, #184	; 0xb8
 8011796:	f009 fece 	bl	801b536 <memset>
 801179a:	4b32      	ldr	r3, [pc, #200]	; (8011864 <m_kalman_3gyro.isra.9.constprop.47+0x364>)
 801179c:	f8ca 30b8 	str.w	r3, [sl, #184]	; 0xb8
 80117a0:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 80117a4:	f50a 7105 	add.w	r1, sl, #532	; 0x214
 80117a8:	f8ca 30e0 	str.w	r3, [sl, #224]	; 0xe0
 80117ac:	f8ca 3108 	str.w	r3, [sl, #264]	; 0x108
 80117b0:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
 80117b4:	f8ca 3158 	str.w	r3, [sl, #344]	; 0x158
 80117b8:	f8ca 3180 	str.w	r3, [sl, #384]	; 0x180
 80117bc:	f8ca 31a8 	str.w	r3, [sl, #424]	; 0x1a8
 80117c0:	f8ca 31d0 	str.w	r3, [sl, #464]	; 0x1d0
 80117c4:	f8ca 31f8 	str.w	r3, [sl, #504]	; 0x1f8
 80117c8:	f50a 730e 	add.w	r3, sl, #568	; 0x238
 80117cc:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80117d0:	461d      	mov	r5, r3
 80117d2:	9122      	str	r1, [sp, #136]	; 0x88
 80117d4:	f8ca 21fc 	str.w	r2, [sl, #508]	; 0x1fc
 80117d8:	4608      	mov	r0, r1
 80117da:	f8ca 2200 	str.w	r2, [sl, #512]	; 0x200
 80117de:	f8ca 2204 	str.w	r2, [sl, #516]	; 0x204
 80117e2:	2100      	movs	r1, #0
 80117e4:	2224      	movs	r2, #36	; 0x24
 80117e6:	9316      	str	r3, [sp, #88]	; 0x58
 80117e8:	f50a 7417 	add.w	r4, sl, #604	; 0x25c
 80117ec:	f009 fea3 	bl	801b536 <memset>
 80117f0:	4628      	mov	r0, r5
 80117f2:	2224      	movs	r2, #36	; 0x24
 80117f4:	2100      	movs	r1, #0
 80117f6:	ed8a 9a8d 	vstr	s18, [sl, #564]	; 0x234
 80117fa:	ed8a 9a89 	vstr	s18, [sl, #548]	; 0x224
 80117fe:	ed8a 9a85 	vstr	s18, [sl, #532]	; 0x214
 8011802:	f009 fe98 	bl	801b536 <memset>
 8011806:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801180a:	2100      	movs	r1, #0
 801180c:	ed8a 9a96 	vstr	s18, [sl, #600]	; 0x258
 8011810:	ed8a 9a92 	vstr	s18, [sl, #584]	; 0x248
 8011814:	ed8a 9a8e 	vstr	s18, [sl, #568]	; 0x238
 8011818:	4620      	mov	r0, r4
 801181a:	f009 fe8c 	bl	801b536 <memset>
 801181e:	f20a 4104 	addw	r1, sl, #1028	; 0x404
 8011822:	9110      	str	r1, [sp, #64]	; 0x40
 8011824:	f50a 6082 	add.w	r0, sl, #1040	; 0x410
 8011828:	f50a 6181 	add.w	r1, sl, #1032	; 0x408
 801182c:	9100      	str	r1, [sp, #0]
 801182e:	9019      	str	r0, [sp, #100]	; 0x64
 8011830:	f20a 4114 	addw	r1, sl, #1044	; 0x414
 8011834:	f50a 6083 	add.w	r0, sl, #1048	; 0x418
 8011838:	f50a 7375 	add.w	r3, sl, #980	; 0x3d4
 801183c:	9111      	str	r1, [sp, #68]	; 0x44
 801183e:	9012      	str	r0, [sp, #72]	; 0x48
 8011840:	f50a 6185 	add.w	r1, sl, #1064	; 0x428
 8011844:	f20a 4024 	addw	r0, sl, #1060	; 0x424
 8011848:	2700      	movs	r7, #0
 801184a:	f04f 0900 	mov.w	r9, #0
 801184e:	901b      	str	r0, [sp, #108]	; 0x6c
 8011850:	911c      	str	r1, [sp, #112]	; 0x70
 8011852:	e015      	b.n	8011880 <m_kalman_3gyro.isra.9.constprop.47+0x380>
 8011854:	0801dec8 	.word	0x0801dec8
 8011858:	00000000 	.word	0x00000000
 801185c:	20001a8c 	.word	0x20001a8c
 8011860:	3f666666 	.word	0x3f666666
 8011864:	40a00000 	.word	0x40a00000
 8011868:	3ca3d70a 	.word	0x3ca3d70a
 801186c:	be4ccccd 	.word	0xbe4ccccd
 8011870:	00000000 	.word	0x00000000
 8011874:	bdcccccd 	.word	0xbdcccccd
 8011878:	3dcccccd 	.word	0x3dcccccd
 801187c:	3e4ccccd 	.word	0x3e4ccccd
 8011880:	f20a 402c 	addw	r0, sl, #1068	; 0x42c
 8011884:	f50a 6186 	add.w	r1, sl, #1072	; 0x430
 8011888:	f8ca 73d4 	str.w	r7, [sl, #980]	; 0x3d4
 801188c:	f8ca 93c4 	str.w	r9, [sl, #964]	; 0x3c4
 8011890:	f8ca 93c8 	str.w	r9, [sl, #968]	; 0x3c8
 8011894:	f8ca 93cc 	str.w	r9, [sl, #972]	; 0x3cc
 8011898:	f8ca 93d0 	str.w	r9, [sl, #976]	; 0x3d0
 801189c:	901d      	str	r0, [sp, #116]	; 0x74
 801189e:	605f      	str	r7, [r3, #4]
 80118a0:	609f      	str	r7, [r3, #8]
 80118a2:	9113      	str	r1, [sp, #76]	; 0x4c
 80118a4:	f20a 4034 	addw	r0, sl, #1076	; 0x434
 80118a8:	f50a 6187 	add.w	r1, sl, #1080	; 0x438
 80118ac:	9318      	str	r3, [sp, #96]	; 0x60
 80118ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80118b0:	900c      	str	r0, [sp, #48]	; 0x30
 80118b2:	f20a 4c1c 	addw	ip, sl, #1052	; 0x41c
 80118b6:	911e      	str	r1, [sp, #120]	; 0x78
 80118b8:	f20a 403c 	addw	r0, sl, #1084	; 0x43c
 80118bc:	f50d 61db 	add.w	r1, sp, #1752	; 0x6d8
 80118c0:	f8ca 73e0 	str.w	r7, [sl, #992]	; 0x3e0
 80118c4:	f8ca 73e4 	str.w	r7, [sl, #996]	; 0x3e4
 80118c8:	f8ca 73e8 	str.w	r7, [sl, #1000]	; 0x3e8
 80118cc:	f8ca 73ec 	str.w	r7, [sl, #1004]	; 0x3ec
 80118d0:	f8ca 73f0 	str.w	r7, [sl, #1008]	; 0x3f0
 80118d4:	f8ca 73f4 	str.w	r7, [sl, #1012]	; 0x3f4
 80118d8:	f8ca 73f8 	str.w	r7, [sl, #1016]	; 0x3f8
 80118dc:	f8ca 73fc 	str.w	r7, [sl, #1020]	; 0x3fc
 80118e0:	f8ca 7400 	str.w	r7, [sl, #1024]	; 0x400
 80118e4:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
 80118e8:	900b      	str	r0, [sp, #44]	; 0x2c
 80118ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80118ee:	f8c3 9000 	str.w	r9, [r3]
 80118f2:	9b00      	ldr	r3, [sp, #0]
 80118f4:	f20a 460c 	addw	r6, sl, #1036	; 0x40c
 80118f8:	f8c3 9000 	str.w	r9, [r3]
 80118fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80118fe:	f8c6 9000 	str.w	r9, [r6]
 8011902:	f8c3 9000 	str.w	r9, [r3]
 8011906:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011908:	f8c3 9000 	str.w	r9, [r3]
 801190c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801190e:	f8c3 9000 	str.w	r9, [r3]
 8011912:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8011914:	f50a 6c84 	add.w	ip, sl, #1056	; 0x420
 8011918:	f8c3 9000 	str.w	r9, [r3]
 801191c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801191e:	f04f 4b80 	mov.w	fp, #1073741824	; 0x40000000
 8011922:	f8cc b000 	str.w	fp, [ip]
 8011926:	f8c3 9000 	str.w	r9, [r3]
 801192a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801192c:	f8c3 9000 	str.w	r9, [r3]
 8011930:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011932:	f8c3 9000 	str.w	r9, [r3]
 8011936:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011938:	f8c3 9000 	str.w	r9, [r3]
 801193c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801193e:	f8c3 9000 	str.w	r9, [r3]
 8011942:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8011944:	f8c3 9000 	str.w	r9, [r3]
 8011948:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801194a:	ed83 9a00 	vstr	s18, [r3]
 801194e:	f7ef f94f 	bl	8000bf0 <__aeabi_d2f>
 8011952:	f50a 6388 	add.w	r3, sl, #1088	; 0x440
 8011956:	461a      	mov	r2, r3
 8011958:	9314      	str	r3, [sp, #80]	; 0x50
 801195a:	f20a 4344 	addw	r3, sl, #1092	; 0x444
 801195e:	4619      	mov	r1, r3
 8011960:	ee08 0a10 	vmov	s16, r0
 8011964:	930d      	str	r3, [sp, #52]	; 0x34
 8011966:	ed5f 7a40 	vldr	s15, [pc, #-256]	; 8011868 <m_kalman_3gyro.isra.9.constprop.47+0x368>
 801196a:	f50a 6389 	add.w	r3, sl, #1096	; 0x448
 801196e:	4618      	mov	r0, r3
 8011970:	931f      	str	r3, [sp, #124]	; 0x7c
 8011972:	f20a 434c 	addw	r3, sl, #1100	; 0x44c
 8011976:	461d      	mov	r5, r3
 8011978:	ee68 7a27 	vmul.f32	s15, s16, s15
 801197c:	930e      	str	r3, [sp, #56]	; 0x38
 801197e:	2332      	movs	r3, #50	; 0x32
 8011980:	edc2 7a00 	vstr	s15, [r2]
 8011984:	f8c1 9000 	str.w	r9, [r1]
 8011988:	ed80 9a00 	vstr	s18, [r0]
 801198c:	f8c5 9000 	str.w	r9, [r5]
 8011990:	f8ca 3458 	str.w	r3, [sl, #1112]	; 0x458
 8011994:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8011996:	f8ca 7450 	str.w	r7, [sl, #1104]	; 0x450
 801199a:	f8ca 7454 	str.w	r7, [sl, #1108]	; 0x454
 801199e:	f8ca 745c 	str.w	r7, [sl, #1116]	; 0x45c
 80119a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80119a6:	af6f      	add	r7, sp, #444	; 0x1bc
 80119a8:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 80119ac:	9b08      	ldr	r3, [sp, #32]
 80119ae:	edd7 6a00 	vldr	s13, [r7]
 80119b2:	ed97 7a01 	vldr	s14, [r7, #4]
 80119b6:	f8d7 b008 	ldr.w	fp, [r7, #8]
 80119ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80119be:	ab72      	add	r3, sp, #456	; 0x1c8
 80119c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80119c4:	9b07      	ldr	r3, [sp, #28]
 80119c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80119ca:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80119ce:	f8d7 c014 	ldr.w	ip, [r7, #20]
 80119d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80119d6:	ab75      	add	r3, sp, #468	; 0x1d4
 80119d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80119dc:	f50a 658c 	add.w	r5, sl, #1120	; 0x460
 80119e0:	9515      	str	r5, [sp, #84]	; 0x54
 80119e2:	462b      	mov	r3, r5
 80119e4:	f8d7 e018 	ldr.w	lr, [r7, #24]
 80119e8:	69f8      	ldr	r0, [r7, #28]
 80119ea:	6a39      	ldr	r1, [r7, #32]
 80119ec:	9d00      	ldr	r5, [sp, #0]
 80119ee:	f60a 0298 	addw	r2, sl, #2200	; 0x898
 80119f2:	edc3 6a00 	vstr	s13, [r3]
 80119f6:	ed83 7a01 	vstr	s14, [r3, #4]
 80119fa:	f8c3 b008 	str.w	fp, [r3, #8]
 80119fe:	ed83 6a03 	vstr	s12, [r3, #12]
 8011a02:	f8c3 9010 	str.w	r9, [r3, #16]
 8011a06:	f8c3 c014 	str.w	ip, [r3, #20]
 8011a0a:	f8c3 e018 	str.w	lr, [r3, #24]
 8011a0e:	61d8      	str	r0, [r3, #28]
 8011a10:	6219      	str	r1, [r3, #32]
 8011a12:	3324      	adds	r3, #36	; 0x24
 8011a14:	429a      	cmp	r2, r3
 8011a16:	d1ec      	bne.n	80119f2 <m_kalman_3gyro.isra.9.constprop.47+0x4f2>
 8011a18:	f8dd 36e0 	ldr.w	r3, [sp, #1760]	; 0x6e0
 8011a1c:	9500      	str	r5, [sp, #0]
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	6013      	str	r3, [r2, #0]
 8011a22:	f8dd 36e0 	ldr.w	r3, [sp, #1760]	; 0x6e0
 8011a26:	eddd da37 	vldr	s27, [sp, #220]	; 0xdc
 8011a2a:	685a      	ldr	r2, [r3, #4]
 8011a2c:	ed9d ea36 	vldr	s28, [sp, #216]	; 0xd8
 8011a30:	ed9d 9a35 	vldr	s18, [sp, #212]	; 0xd4
 8011a34:	ed9d ba38 	vldr	s22, [sp, #224]	; 0xe0
 8011a38:	eddd ba39 	vldr	s23, [sp, #228]	; 0xe4
 8011a3c:	eddd aa3a 	vldr	s21, [sp, #232]	; 0xe8
 8011a40:	f60a 039c 	addw	r3, sl, #2204	; 0x89c
 8011a44:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011a48:	601a      	str	r2, [r3, #0]
 8011a4a:	f8dd 36e0 	ldr.w	r3, [sp, #1760]	; 0x6e0
 8011a4e:	f50a 620a 	add.w	r2, sl, #2208	; 0x8a0
 8011a52:	6898      	ldr	r0, [r3, #8]
 8011a54:	6010      	str	r0, [r2, #0]
 8011a56:	2300      	movs	r3, #0
 8011a58:	f88a 38a4 	strb.w	r3, [sl, #2212]	; 0x8a4
 8011a5c:	f8aa 38a6 	strh.w	r3, [sl, #2214]	; 0x8a6
 8011a60:	f8aa 38a8 	strh.w	r3, [sl, #2216]	; 0x8a8
 8011a64:	f88a 38ad 	strb.w	r3, [sl, #2221]	; 0x8ad
 8011a68:	f88a 38ae 	strb.w	r3, [sl, #2222]	; 0x8ae
 8011a6c:	f8ca 38b0 	str.w	r3, [sl, #2224]	; 0x8b0
 8011a70:	f8aa 18aa 	strh.w	r1, [sl, #2218]	; 0x8aa
 8011a74:	e053      	b.n	8011b1e <m_kalman_3gyro.isra.9.constprop.47+0x61e>
 8011a76:	f50d 63db 	add.w	r3, sp, #1752	; 0x6d8
 8011a7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011a7e:	f7ef f8b7 	bl	8000bf0 <__aeabi_d2f>
 8011a82:	f10a 0340 	add.w	r3, sl, #64	; 0x40
 8011a86:	9309      	str	r3, [sp, #36]	; 0x24
 8011a88:	f50a 7305 	add.w	r3, sl, #532	; 0x214
 8011a8c:	9322      	str	r3, [sp, #136]	; 0x88
 8011a8e:	f50a 730e 	add.w	r3, sl, #568	; 0x238
 8011a92:	9316      	str	r3, [sp, #88]	; 0x58
 8011a94:	f50a 638c 	add.w	r3, sl, #1120	; 0x460
 8011a98:	9315      	str	r3, [sp, #84]	; 0x54
 8011a9a:	ab3e      	add	r3, sp, #248	; 0xf8
 8011a9c:	9306      	str	r3, [sp, #24]
 8011a9e:	f50a 7375 	add.w	r3, sl, #980	; 0x3d4
 8011aa2:	9318      	str	r3, [sp, #96]	; 0x60
 8011aa4:	f20a 4304 	addw	r3, sl, #1028	; 0x404
 8011aa8:	9310      	str	r3, [sp, #64]	; 0x40
 8011aaa:	f50a 6381 	add.w	r3, sl, #1032	; 0x408
 8011aae:	9300      	str	r3, [sp, #0]
 8011ab0:	f50a 6382 	add.w	r3, sl, #1040	; 0x410
 8011ab4:	9319      	str	r3, [sp, #100]	; 0x64
 8011ab6:	f20a 4314 	addw	r3, sl, #1044	; 0x414
 8011aba:	9311      	str	r3, [sp, #68]	; 0x44
 8011abc:	f50a 6383 	add.w	r3, sl, #1048	; 0x418
 8011ac0:	9312      	str	r3, [sp, #72]	; 0x48
 8011ac2:	f20a 431c 	addw	r3, sl, #1052	; 0x41c
 8011ac6:	931a      	str	r3, [sp, #104]	; 0x68
 8011ac8:	f20a 4324 	addw	r3, sl, #1060	; 0x424
 8011acc:	931b      	str	r3, [sp, #108]	; 0x6c
 8011ace:	f50a 6385 	add.w	r3, sl, #1064	; 0x428
 8011ad2:	931c      	str	r3, [sp, #112]	; 0x70
 8011ad4:	f20a 432c 	addw	r3, sl, #1068	; 0x42c
 8011ad8:	931d      	str	r3, [sp, #116]	; 0x74
 8011ada:	f50a 6386 	add.w	r3, sl, #1072	; 0x430
 8011ade:	9313      	str	r3, [sp, #76]	; 0x4c
 8011ae0:	f20a 4334 	addw	r3, sl, #1076	; 0x434
 8011ae4:	930c      	str	r3, [sp, #48]	; 0x30
 8011ae6:	f50a 6387 	add.w	r3, sl, #1080	; 0x438
 8011aea:	931e      	str	r3, [sp, #120]	; 0x78
 8011aec:	f20a 433c 	addw	r3, sl, #1084	; 0x43c
 8011af0:	930b      	str	r3, [sp, #44]	; 0x2c
 8011af2:	f50a 6388 	add.w	r3, sl, #1088	; 0x440
 8011af6:	ee08 0a10 	vmov	s16, r0
 8011afa:	ed5f 7aa5 	vldr	s15, [pc, #-660]	; 8011868 <m_kalman_3gyro.isra.9.constprop.47+0x368>
 8011afe:	9314      	str	r3, [sp, #80]	; 0x50
 8011b00:	f20a 4344 	addw	r3, sl, #1092	; 0x444
 8011b04:	930d      	str	r3, [sp, #52]	; 0x34
 8011b06:	f50a 6389 	add.w	r3, sl, #1096	; 0x448
 8011b0a:	931f      	str	r3, [sp, #124]	; 0x7c
 8011b0c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8011b10:	f20a 434c 	addw	r3, sl, #1100	; 0x44c
 8011b14:	f50a 7417 	add.w	r4, sl, #604	; 0x25c
 8011b18:	f20a 460c 	addw	r6, sl, #1036	; 0x40c
 8011b1c:	930e      	str	r3, [sp, #56]	; 0x38
 8011b1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011b20:	ed5f 3aae 	vldr	s7, [pc, #-696]	; 801186c <m_kalman_3gyro.isra.9.constprop.47+0x36c>
 8011b24:	ed93 6a00 	vldr	s12, [r3]
 8011b28:	ed1f 7aaf 	vldr	s14, [pc, #-700]	; 8011870 <m_kalman_3gyro.isra.9.constprop.47+0x370>
 8011b2c:	ed1f 4aaf 	vldr	s8, [pc, #-700]	; 8011874 <m_kalman_3gyro.isra.9.constprop.47+0x374>
 8011b30:	ed5f 4aaf 	vldr	s9, [pc, #-700]	; 8011878 <m_kalman_3gyro.isra.9.constprop.47+0x378>
 8011b34:	ed1f 5aaf 	vldr	s10, [pc, #-700]	; 801187c <m_kalman_3gyro.isra.9.constprop.47+0x37c>
 8011b38:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8011b3a:	f20a 4384 	addw	r3, sl, #1156	; 0x484
 8011b3e:	edd3 5a00 	vldr	s11, [r3]
 8011b42:	9331      	str	r3, [sp, #196]	; 0xc4
 8011b44:	ee26 6a23 	vmul.f32	s12, s12, s7
 8011b48:	f50a 6395 	add.w	r3, sl, #1192	; 0x4a8
 8011b4c:	edd3 6a00 	vldr	s13, [r3]
 8011b50:	ee65 5a84 	vmul.f32	s11, s11, s8
 8011b54:	ee36 6a07 	vadd.f32	s12, s12, s14
 8011b58:	f20a 43cc 	addw	r3, sl, #1228	; 0x4cc
 8011b5c:	ee66 6a87 	vmul.f32	s13, s13, s14
 8011b60:	ee36 6a25 	vadd.f32	s12, s12, s11
 8011b64:	edd3 5a00 	vldr	s11, [r3]
 8011b68:	f50a 639e 	add.w	r3, sl, #1264	; 0x4f0
 8011b6c:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8011b70:	ee36 6a26 	vadd.f32	s12, s12, s13
 8011b74:	f50d 65db 	add.w	r5, sp, #1752	; 0x6d8
 8011b78:	edd3 6a00 	vldr	s13, [r3]
 8011b7c:	ed95 2b00 	vldr	d2, [r5]
 8011b80:	ee66 6a85 	vmul.f32	s13, s13, s10
 8011b84:	ee36 6a25 	vadd.f32	s12, s12, s11
 8011b88:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8011b8c:	ee36 6a26 	vadd.f32	s12, s12, s13
 8011b90:	ed8a 2b0e 	vstr	d2, [sl, #56]	; 0x38
 8011b94:	f20a 4564 	addw	r5, sl, #1124	; 0x464
 8011b98:	edc7 7a00 	vstr	s15, [r7]
 8011b9c:	ed8a 6af8 	vstr	s12, [sl, #992]	; 0x3e0
 8011ba0:	edd5 7a00 	vldr	s15, [r5]
 8011ba4:	952a      	str	r5, [sp, #168]	; 0xa8
 8011ba6:	f50a 6791 	add.w	r7, sl, #1160	; 0x488
 8011baa:	edd7 5a00 	vldr	s11, [r7]
 8011bae:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8011bb2:	f20a 47ac 	addw	r7, sl, #1196	; 0x4ac
 8011bb6:	edd7 6a00 	vldr	s13, [r7]
 8011bba:	ee65 5a84 	vmul.f32	s11, s11, s8
 8011bbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011bc2:	f50a 679a 	add.w	r7, sl, #1232	; 0x4d0
 8011bc6:	ee66 6a87 	vmul.f32	s13, s13, s14
 8011bca:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8011bce:	edd7 5a00 	vldr	s11, [r7]
 8011bd2:	f20a 47f4 	addw	r7, sl, #1268	; 0x4f4
 8011bd6:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8011bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011bde:	edd7 6a00 	vldr	s13, [r7]
 8011be2:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8011be6:	ee66 6a85 	vmul.f32	s13, s13, s10
 8011bea:	f50a 658d 	add.w	r5, sl, #1128	; 0x468
 8011bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011bf2:	f20a 478c 	addw	r7, sl, #1164	; 0x48c
 8011bf6:	edca 7af9 	vstr	s15, [sl, #996]	; 0x3e4
 8011bfa:	edd5 6a00 	vldr	s13, [r5]
 8011bfe:	ed97 3a00 	vldr	s6, [r7]
 8011c02:	952b      	str	r5, [sp, #172]	; 0xac
 8011c04:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8011c08:	f50a 6796 	add.w	r7, sl, #1200	; 0x4b0
 8011c0c:	edd7 5a00 	vldr	s11, [r7]
 8011c10:	ee23 3a04 	vmul.f32	s6, s6, s8
 8011c14:	ee76 6a87 	vadd.f32	s13, s13, s14
 8011c18:	f20a 47d4 	addw	r7, sl, #1236	; 0x4d4
 8011c1c:	ee65 5a87 	vmul.f32	s11, s11, s14
 8011c20:	ee76 6a83 	vadd.f32	s13, s13, s6
 8011c24:	ed97 3a00 	vldr	s6, [r7]
 8011c28:	f50a 679f 	add.w	r7, sl, #1272	; 0x4f8
 8011c2c:	ee23 3a24 	vmul.f32	s6, s6, s9
 8011c30:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8011c34:	edd7 5a00 	vldr	s11, [r7]
 8011c38:	ee76 6a83 	vadd.f32	s13, s13, s6
 8011c3c:	ee65 5a85 	vmul.f32	s11, s11, s10
 8011c40:	f20a 456c 	addw	r5, sl, #1132	; 0x46c
 8011c44:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8011c48:	f50a 6792 	add.w	r7, sl, #1168	; 0x490
 8011c4c:	edca 6afa 	vstr	s13, [sl, #1000]	; 0x3e8
 8011c50:	edd5 5a00 	vldr	s11, [r5]
 8011c54:	952c      	str	r5, [sp, #176]	; 0xb0
 8011c56:	ee65 5aa3 	vmul.f32	s11, s11, s7
 8011c5a:	edd7 2a00 	vldr	s5, [r7]
 8011c5e:	9d06      	ldr	r5, [sp, #24]
 8011c60:	f20a 47b4 	addw	r7, sl, #1204	; 0x4b4
 8011c64:	ed97 3a00 	vldr	s6, [r7]
 8011c68:	ee62 2a84 	vmul.f32	s5, s5, s8
 8011c6c:	ee75 5a87 	vadd.f32	s11, s11, s14
 8011c70:	f50a 679b 	add.w	r7, sl, #1240	; 0x4d8
 8011c74:	ee23 3a07 	vmul.f32	s6, s6, s14
 8011c78:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8011c7c:	edd7 2a00 	vldr	s5, [r7]
 8011c80:	f20a 47fc 	addw	r7, sl, #1276	; 0x4fc
 8011c84:	ee62 2aa4 	vmul.f32	s5, s5, s9
 8011c88:	ee75 5a83 	vadd.f32	s11, s11, s6
 8011c8c:	ed97 3a00 	vldr	s6, [r7]
 8011c90:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8011c94:	ee23 3a05 	vmul.f32	s6, s6, s10
 8011c98:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8011c9c:	ee75 5a83 	vadd.f32	s11, s11, s6
 8011ca0:	f50a 638e 	add.w	r3, sl, #1136	; 0x470
 8011ca4:	edca 5afb 	vstr	s11, [sl, #1004]	; 0x3ec
 8011ca8:	461a      	mov	r2, r3
 8011caa:	edd2 5a00 	vldr	s11, [r2]
 8011cae:	932d      	str	r3, [sp, #180]	; 0xb4
 8011cb0:	f20a 4394 	addw	r3, sl, #1172	; 0x494
 8011cb4:	edd3 2a00 	vldr	s5, [r3]
 8011cb8:	ee65 5aa3 	vmul.f32	s11, s11, s7
 8011cbc:	f50a 6397 	add.w	r3, sl, #1208	; 0x4b8
 8011cc0:	ed93 3a00 	vldr	s6, [r3]
 8011cc4:	ee62 2a84 	vmul.f32	s5, s5, s8
 8011cc8:	ee75 5a87 	vadd.f32	s11, s11, s14
 8011ccc:	f20a 43dc 	addw	r3, sl, #1244	; 0x4dc
 8011cd0:	ee23 3a07 	vmul.f32	s6, s6, s14
 8011cd4:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8011cd8:	edd3 2a00 	vldr	s5, [r3]
 8011cdc:	f50a 63a0 	add.w	r3, sl, #1280	; 0x500
 8011ce0:	ee62 2aa4 	vmul.f32	s5, s5, s9
 8011ce4:	ee75 5a83 	vadd.f32	s11, s11, s6
 8011ce8:	ed93 3a00 	vldr	s6, [r3]
 8011cec:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8011cf0:	ee23 3a05 	vmul.f32	s6, s6, s10
 8011cf4:	f20a 4374 	addw	r3, sl, #1140	; 0x474
 8011cf8:	ee75 5a83 	vadd.f32	s11, s11, s6
 8011cfc:	461a      	mov	r2, r3
 8011cfe:	edca 5afc 	vstr	s11, [sl, #1008]	; 0x3f0
 8011d02:	edd2 5a00 	vldr	s11, [r2]
 8011d06:	932e      	str	r3, [sp, #184]	; 0xb8
 8011d08:	f50a 6393 	add.w	r3, sl, #1176	; 0x498
 8011d0c:	edd3 2a00 	vldr	s5, [r3]
 8011d10:	ee65 5aa3 	vmul.f32	s11, s11, s7
 8011d14:	f20a 43bc 	addw	r3, sl, #1212	; 0x4bc
 8011d18:	ed93 3a00 	vldr	s6, [r3]
 8011d1c:	ee62 2a84 	vmul.f32	s5, s5, s8
 8011d20:	ee75 5a87 	vadd.f32	s11, s11, s14
 8011d24:	f50a 639c 	add.w	r3, sl, #1248	; 0x4e0
 8011d28:	ee23 3a07 	vmul.f32	s6, s6, s14
 8011d2c:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8011d30:	edd3 2a00 	vldr	s5, [r3]
 8011d34:	f20a 5304 	addw	r3, sl, #1284	; 0x504
 8011d38:	ee62 2aa4 	vmul.f32	s5, s5, s9
 8011d3c:	ee75 5a83 	vadd.f32	s11, s11, s6
 8011d40:	ed93 3a00 	vldr	s6, [r3]
 8011d44:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8011d48:	ee23 3a05 	vmul.f32	s6, s6, s10
 8011d4c:	f50a 638f 	add.w	r3, sl, #1144	; 0x478
 8011d50:	ee75 5a83 	vadd.f32	s11, s11, s6
 8011d54:	461a      	mov	r2, r3
 8011d56:	edca 5afd 	vstr	s11, [sl, #1012]	; 0x3f4
 8011d5a:	edd2 5a00 	vldr	s11, [r2]
 8011d5e:	9328      	str	r3, [sp, #160]	; 0xa0
 8011d60:	f20a 439c 	addw	r3, sl, #1180	; 0x49c
 8011d64:	edd3 2a00 	vldr	s5, [r3]
 8011d68:	ee65 5aa3 	vmul.f32	s11, s11, s7
 8011d6c:	f50a 6398 	add.w	r3, sl, #1216	; 0x4c0
 8011d70:	ed93 3a00 	vldr	s6, [r3]
 8011d74:	ee62 2a84 	vmul.f32	s5, s5, s8
 8011d78:	ee75 5a87 	vadd.f32	s11, s11, s14
 8011d7c:	f20a 43e4 	addw	r3, sl, #1252	; 0x4e4
 8011d80:	ee23 3a07 	vmul.f32	s6, s6, s14
 8011d84:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8011d88:	edd3 2a00 	vldr	s5, [r3]
 8011d8c:	f50a 63a1 	add.w	r3, sl, #1288	; 0x508
 8011d90:	ee62 2aa4 	vmul.f32	s5, s5, s9
 8011d94:	ee75 5a83 	vadd.f32	s11, s11, s6
 8011d98:	ed93 3a00 	vldr	s6, [r3]
 8011d9c:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8011da0:	ee23 3a05 	vmul.f32	s6, s6, s10
 8011da4:	f20a 437c 	addw	r3, sl, #1148	; 0x47c
 8011da8:	ee75 5a83 	vadd.f32	s11, s11, s6
 8011dac:	461a      	mov	r2, r3
 8011dae:	edca 5afe 	vstr	s11, [sl, #1016]	; 0x3f8
 8011db2:	932f      	str	r3, [sp, #188]	; 0xbc
 8011db4:	edd2 5a00 	vldr	s11, [r2]
 8011db8:	f50a 6394 	add.w	r3, sl, #1184	; 0x4a0
 8011dbc:	edd3 2a00 	vldr	s5, [r3]
 8011dc0:	ee65 5aa3 	vmul.f32	s11, s11, s7
 8011dc4:	f20a 43c4 	addw	r3, sl, #1220	; 0x4c4
 8011dc8:	ed93 3a00 	vldr	s6, [r3]
 8011dcc:	ee62 2a84 	vmul.f32	s5, s5, s8
 8011dd0:	ee75 5a87 	vadd.f32	s11, s11, s14
 8011dd4:	f50a 639d 	add.w	r3, sl, #1256	; 0x4e8
 8011dd8:	ee23 3a07 	vmul.f32	s6, s6, s14
 8011ddc:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8011de0:	edd3 2a00 	vldr	s5, [r3]
 8011de4:	f20a 530c 	addw	r3, sl, #1292	; 0x50c
 8011de8:	ee62 2aa4 	vmul.f32	s5, s5, s9
 8011dec:	ee75 5a83 	vadd.f32	s11, s11, s6
 8011df0:	ed93 3a00 	vldr	s6, [r3]
 8011df4:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8011df8:	ee23 3a05 	vmul.f32	s6, s6, s10
 8011dfc:	f50a 6390 	add.w	r3, sl, #1152	; 0x480
 8011e00:	ee75 5a83 	vadd.f32	s11, s11, s6
 8011e04:	461a      	mov	r2, r3
 8011e06:	edca 5aff 	vstr	s11, [sl, #1020]	; 0x3fc
 8011e0a:	edd2 5a00 	vldr	s11, [r2]
 8011e0e:	9330      	str	r3, [sp, #192]	; 0xc0
 8011e10:	f20a 43a4 	addw	r3, sl, #1188	; 0x4a4
 8011e14:	ed93 3a00 	vldr	s6, [r3]
 8011e18:	ee65 5aa3 	vmul.f32	s11, s11, s7
 8011e1c:	f50a 6399 	add.w	r3, sl, #1224	; 0x4c8
 8011e20:	ee63 3a04 	vmul.f32	s7, s6, s8
 8011e24:	ee75 5a87 	vadd.f32	s11, s11, s14
 8011e28:	ed93 4a00 	vldr	s8, [r3]
 8011e2c:	f20a 43ec 	addw	r3, sl, #1260	; 0x4ec
 8011e30:	ee75 5aa3 	vadd.f32	s11, s11, s7
 8011e34:	ee24 7a07 	vmul.f32	s14, s8, s14
 8011e38:	ed93 4a00 	vldr	s8, [r3]
 8011e3c:	f50a 63a2 	add.w	r3, sl, #1296	; 0x510
 8011e40:	ee64 4a24 	vmul.f32	s9, s8, s9
 8011e44:	ee35 7a87 	vadd.f32	s14, s11, s14
 8011e48:	edd3 5a00 	vldr	s11, [r3]
 8011e4c:	ee37 7a24 	vadd.f32	s14, s14, s9
 8011e50:	ee25 5a85 	vmul.f32	s10, s11, s10
 8011e54:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011e58:	ee26 6a06 	vmul.f32	s12, s12, s12
 8011e5c:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8011e60:	ee37 6a86 	vadd.f32	s12, s15, s12
 8011e64:	ee77 7a05 	vadd.f32	s15, s14, s10
 8011e68:	f50a 6780 	add.w	r7, sl, #1024	; 0x400
 8011e6c:	edc7 7a00 	vstr	s15, [r7]
 8011e70:	ee76 7a86 	vadd.f32	s15, s13, s12
 8011e74:	ee17 0a90 	vmov	r0, s15
 8011e78:	f7ee fb6e 	bl	8000558 <__aeabi_f2d>
 8011e7c:	ec41 0b10 	vmov	d0, r0, r1
 8011e80:	f006 fe0e 	bl	8018aa0 <sqrt>
 8011e84:	ec51 0b10 	vmov	r0, r1, d0
 8011e88:	f7ee feb2 	bl	8000bf0 <__aeabi_d2f>
 8011e8c:	edda 6afb 	vldr	s13, [sl, #1004]	; 0x3ec
 8011e90:	edda 7afc 	vldr	s15, [sl, #1008]	; 0x3f0
 8011e94:	ed9a 7afd 	vldr	s14, [sl, #1012]	; 0x3f4
 8011e98:	4bea      	ldr	r3, [pc, #936]	; (8012244 <m_kalman_3gyro.isra.9.constprop.47+0xd44>)
 8011e9a:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8011e9e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011ea2:	ee27 7a07 	vmul.f32	s14, s14, s14
 8011ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011eaa:	6018      	str	r0, [r3, #0]
 8011eac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011eb0:	ee0c 0a90 	vmov	s25, r0
 8011eb4:	ee17 0a90 	vmov	r0, s15
 8011eb8:	461d      	mov	r5, r3
 8011eba:	f7ee fb4d 	bl	8000558 <__aeabi_f2d>
 8011ebe:	ec41 0b10 	vmov	d0, r0, r1
 8011ec2:	f006 fded 	bl	8018aa0 <sqrt>
 8011ec6:	ec51 0b10 	vmov	r0, r1, d0
 8011eca:	f7ee fe91 	bl	8000bf0 <__aeabi_d2f>
 8011ece:	edda 6afe 	vldr	s13, [sl, #1016]	; 0x3f8
 8011ed2:	edda 7aff 	vldr	s15, [sl, #1020]	; 0x3fc
 8011ed6:	ed97 7a00 	vldr	s14, [r7]
 8011eda:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8011ede:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011ee2:	ee27 7a07 	vmul.f32	s14, s14, s14
 8011ee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011eea:	462b      	mov	r3, r5
 8011eec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011ef0:	f843 0f04 	str.w	r0, [r3, #4]!
 8011ef4:	ee09 0a90 	vmov	s19, r0
 8011ef8:	ee17 0a90 	vmov	r0, s15
 8011efc:	9332      	str	r3, [sp, #200]	; 0xc8
 8011efe:	f7ee fb2b 	bl	8000558 <__aeabi_f2d>
 8011f02:	ec41 0b10 	vmov	d0, r0, r1
 8011f06:	f006 fdcb 	bl	8018aa0 <sqrt>
 8011f0a:	ec51 0b10 	vmov	r0, r1, d0
 8011f0e:	f7ee fe6f 	bl	8000bf0 <__aeabi_d2f>
 8011f12:	ee2b 6aad 	vmul.f32	s12, s23, s27
 8011f16:	ee2b 7a2d 	vmul.f32	s14, s22, s27
 8011f1a:	ee6a 7a8e 	vmul.f32	s15, s21, s28
 8011f1e:	ee6a 6a89 	vmul.f32	s13, s21, s18
 8011f22:	ee76 da67 	vsub.f32	s27, s12, s15
 8011f26:	ee2b 9a89 	vmul.f32	s18, s23, s18
 8011f2a:	ee6b 7a0e 	vmul.f32	s15, s22, s28
 8011f2e:	ee36 eac7 	vsub.f32	s28, s13, s14
 8011f32:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011f34:	ee2d 7aad 	vmul.f32	s14, s27, s27
 8011f38:	ee37 9ac9 	vsub.f32	s18, s15, s18
 8011f3c:	ee6e 7a0e 	vmul.f32	s15, s28, s28
 8011f40:	edc3 ca00 	vstr	s25, [r3]
 8011f44:	ee0c 0a10 	vmov	s24, r0
 8011f48:	9b00      	ldr	r3, [sp, #0]
 8011f4a:	ee69 6a09 	vmul.f32	s13, s18, s18
 8011f4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011f52:	edc3 9a00 	vstr	s19, [r3]
 8011f56:	ee1c 2a10 	vmov	r2, s24
 8011f5a:	462b      	mov	r3, r5
 8011f5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011f60:	f843 2f08 	str.w	r2, [r3, #8]!
 8011f64:	ed86 ca00 	vstr	s24, [r6]
 8011f68:	ee17 0a90 	vmov	r0, s15
 8011f6c:	edca da8f 	vstr	s27, [sl, #572]	; 0x23c
 8011f70:	ed8a ea92 	vstr	s28, [sl, #584]	; 0x248
 8011f74:	ed8a 9a95 	vstr	s18, [sl, #596]	; 0x254
 8011f78:	ed8a ba90 	vstr	s22, [sl, #576]	; 0x240
 8011f7c:	edca ba93 	vstr	s23, [sl, #588]	; 0x24c
 8011f80:	edca aa96 	vstr	s21, [sl, #600]	; 0x258
 8011f84:	9333      	str	r3, [sp, #204]	; 0xcc
 8011f86:	f7ee fae7 	bl	8000558 <__aeabi_f2d>
 8011f8a:	ec41 0b10 	vmov	d0, r0, r1
 8011f8e:	e9cd 0120 	strd	r0, r1, [sp, #128]	; 0x80
 8011f92:	f006 fd85 	bl	8018aa0 <sqrt>
 8011f96:	ec51 0b10 	vmov	r0, r1, d0
 8011f9a:	f7ee fe29 	bl	8000bf0 <__aeabi_d2f>
 8011f9e:	edda 4a8f 	vldr	s9, [sl, #572]	; 0x23c
 8011fa2:	edda 5a95 	vldr	s11, [sl, #596]	; 0x254
 8011fa6:	ed9a 5a92 	vldr	s10, [sl, #584]	; 0x248
 8011faa:	ed9a 7a96 	vldr	s14, [sl, #600]	; 0x258
 8011fae:	edda 6a90 	vldr	s13, [sl, #576]	; 0x240
 8011fb2:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011fb4:	ee06 0a10 	vmov	s12, r0
 8011fb8:	eec4 7a86 	vdiv.f32	s15, s9, s12
 8011fbc:	aa78      	add	r2, sp, #480	; 0x1e0
 8011fbe:	9822      	ldr	r0, [sp, #136]	; 0x88
 8011fc0:	eec5 4a86 	vdiv.f32	s9, s11, s12
 8011fc4:	eec5 5a06 	vdiv.f32	s11, s10, s12
 8011fc8:	ed9a 6a93 	vldr	s12, [sl, #588]	; 0x24c
 8011fcc:	edca 7a8f 	vstr	s15, [sl, #572]	; 0x23c
 8011fd0:	ee27 4a27 	vmul.f32	s8, s14, s15
 8011fd4:	ee26 5aa4 	vmul.f32	s10, s13, s9
 8011fd8:	ee27 7a25 	vmul.f32	s14, s14, s11
 8011fdc:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8011fe0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8011fe4:	ee26 6a24 	vmul.f32	s12, s12, s9
 8011fe8:	ee35 5a44 	vsub.f32	s10, s10, s8
 8011fec:	ee37 7a46 	vsub.f32	s14, s14, s12
 8011ff0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011ff4:	edca 4a95 	vstr	s9, [sl, #596]	; 0x254
 8011ff8:	ed8a 5a91 	vstr	s10, [sl, #580]	; 0x244
 8011ffc:	edca 5a92 	vstr	s11, [sl, #584]	; 0x248
 8012000:	ed8a 7a8e 	vstr	s14, [sl, #568]	; 0x238
 8012004:	edca 7a94 	vstr	s15, [sl, #592]	; 0x250
 8012008:	f7fa fe5a 	bl	800ccc0 <m_mldivide>
 801200c:	a878      	add	r0, sp, #480	; 0x1e0
 801200e:	a946      	add	r1, sp, #280	; 0x118
 8012010:	f7fb f8ee 	bl	800d1f0 <m_dcm2q_eml>
 8012014:	4653      	mov	r3, sl
 8012016:	f5aa 70ae 	sub.w	r0, sl, #348	; 0x15c
 801201a:	f8d3 23ac 	ldr.w	r2, [r3, #940]	; 0x3ac
 801201e:	f8d3 13b0 	ldr.w	r1, [r3, #944]	; 0x3b0
 8012022:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
 8012026:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 801202a:	f8c3 13bc 	str.w	r1, [r3, #956]	; 0x3bc
 801202e:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
 8012032:	3b0c      	subs	r3, #12
 8012034:	4283      	cmp	r3, r0
 8012036:	d1f0      	bne.n	801201a <m_kalman_3gyro.isra.9.constprop.47+0xb1a>
 8012038:	eddd 6a46 	vldr	s13, [sp, #280]	; 0x118
 801203c:	ed9d 7a47 	vldr	s14, [sp, #284]	; 0x11c
 8012040:	eddd 7a48 	vldr	s15, [sp, #288]	; 0x120
 8012044:	9429      	str	r4, [sp, #164]	; 0xa4
 8012046:	ee76 6aa6 	vadd.f32	s13, s13, s13
 801204a:	ee37 7a07 	vadd.f32	s14, s14, s14
 801204e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8012052:	ee86 6aa8 	vdiv.f32	s12, s13, s17
 8012056:	ad3b      	add	r5, sp, #236	; 0xec
 8012058:	462e      	mov	r6, r5
 801205a:	f504 71ae 	add.w	r1, r4, #348	; 0x15c
 801205e:	f104 070c 	add.w	r7, r4, #12
 8012062:	4620      	mov	r0, r4
 8012064:	eec7 6a28 	vdiv.f32	s13, s14, s17
 8012068:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 801206c:	ed8a 6a97 	vstr	s12, [sl, #604]	; 0x25c
 8012070:	edca 6a98 	vstr	s13, [sl, #608]	; 0x260
 8012074:	ed8a 7a99 	vstr	s14, [sl, #612]	; 0x264
 8012078:	eef3 5a0e 	vmov.f32	s11, #62	; 0x41f00000  30.0
 801207c:	eeb3 6a0d 	vmov.f32	s12, #61	; 0x41e80000  29.0
 8012080:	ed90 7a00 	vldr	s14, [r0]
 8012084:	4603      	mov	r3, r0
 8012086:	eef0 7a47 	vmov.f32	s15, s14
 801208a:	330c      	adds	r3, #12
 801208c:	edd3 6a00 	vldr	s13, [r3]
 8012090:	4299      	cmp	r1, r3
 8012092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012096:	d1f8      	bne.n	801208a <m_kalman_3gyro.isra.9.constprop.47+0xb8a>
 8012098:	eec7 6aa5 	vdiv.f32	s13, s15, s11
 801209c:	4602      	mov	r2, r0
 801209e:	ee37 7a66 	vsub.f32	s14, s14, s13
 80120a2:	ee27 7a07 	vmul.f32	s14, s14, s14
 80120a6:	320c      	adds	r2, #12
 80120a8:	edd2 7a00 	vldr	s15, [r2]
 80120ac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80120b0:	4293      	cmp	r3, r2
 80120b2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80120b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80120ba:	d1f4      	bne.n	80120a6 <m_kalman_3gyro.isra.9.constprop.47+0xba6>
 80120bc:	eec7 7a06 	vdiv.f32	s15, s14, s12
 80120c0:	3004      	adds	r0, #4
 80120c2:	4287      	cmp	r7, r0
 80120c4:	f101 0104 	add.w	r1, r1, #4
 80120c8:	ece6 7a01 	vstmia	r6!, {s15}
 80120cc:	d1d8      	bne.n	8012080 <m_kalman_3gyro.isra.9.constprop.47+0xb80>
 80120ce:	6828      	ldr	r0, [r5, #0]
 80120d0:	f7ee fa42 	bl	8000558 <__aeabi_f2d>
 80120d4:	ec41 0b10 	vmov	d0, r0, r1
 80120d8:	f006 fce2 	bl	8018aa0 <sqrt>
 80120dc:	ec51 0b10 	vmov	r0, r1, d0
 80120e0:	f7ee fd86 	bl	8000bf0 <__aeabi_d2f>
 80120e4:	9b06      	ldr	r3, [sp, #24]
 80120e6:	f845 0b04 	str.w	r0, [r5], #4
 80120ea:	42ab      	cmp	r3, r5
 80120ec:	d1ef      	bne.n	80120ce <m_kalman_3gyro.isra.9.constprop.47+0xbce>
 80120ee:	eddd 7a3b 	vldr	s15, [sp, #236]	; 0xec
 80120f2:	eddd 6a3c 	vldr	s13, [sp, #240]	; 0xf0
 80120f6:	ed9d 7a3d 	vldr	s14, [sp, #244]	; 0xf4
 80120fa:	9417      	str	r4, [sp, #92]	; 0x5c
 80120fc:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8012100:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012104:	ee27 7a07 	vmul.f32	s14, s14, s14
 8012108:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801210c:	f20d 5b0c 	addw	fp, sp, #1292	; 0x50c
 8012110:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012114:	f50d 7865 	add.w	r8, sp, #916	; 0x394
 8012118:	ee17 0a90 	vmov	r0, s15
 801211c:	f7ee fa1c 	bl	8000558 <__aeabi_f2d>
 8012120:	ec41 0b10 	vmov	d0, r0, r1
 8012124:	f006 fcbc 	bl	8018aa0 <sqrt>
 8012128:	ec51 0b10 	vmov	r0, r1, d0
 801212c:	f7ee fd60 	bl	8000bf0 <__aeabi_d2f>
 8012130:	4b45      	ldr	r3, [pc, #276]	; (8012248 <m_kalman_3gyro.isra.9.constprop.47+0xd48>)
 8012132:	f8ca 03c4 	str.w	r0, [sl, #964]	; 0x3c4
 8012136:	edd3 7a03 	vldr	s15, [r3, #12]
 801213a:	edd3 8a02 	vldr	s17, [r3, #8]
 801213e:	edcd 7a23 	vstr	s15, [sp, #140]	; 0x8c
 8012142:	f50a 7372 	add.w	r3, sl, #968	; 0x3c8
 8012146:	9324      	str	r3, [sp, #144]	; 0x90
 8012148:	f50d 7972 	add.w	r9, sp, #968	; 0x3c8
 801214c:	f8cd a700 	str.w	sl, [sp, #1792]	; 0x700
 8012150:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012152:	4658      	mov	r0, fp
 8012154:	f20d 31c7 	addw	r1, sp, #967	; 0x3c7
 8012158:	2301      	movs	r3, #1
 801215a:	f801 3f01 	strb.w	r3, [r1, #1]!
 801215e:	3301      	adds	r3, #1
 8012160:	f852 4b0c 	ldr.w	r4, [r2], #12
 8012164:	f840 4b04 	str.w	r4, [r0], #4
 8012168:	2b1f      	cmp	r3, #31
 801216a:	d1f6      	bne.n	801215a <m_kalman_3gyro.isra.9.constprop.47+0xc5a>
 801216c:	221e      	movs	r2, #30
 801216e:	2101      	movs	r1, #1
 8012170:	4640      	mov	r0, r8
 8012172:	f009 f9e0 	bl	801b536 <memset>
 8012176:	eddb 7a01 	vldr	s15, [fp, #4]
 801217a:	ed9b 7a00 	vldr	s14, [fp]
 801217e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012186:	d90c      	bls.n	80121a2 <m_kalman_3gyro.isra.9.constprop.47+0xca2>
 8012188:	eef4 7a67 	vcmp.f32	s15, s15
 801218c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012190:	d107      	bne.n	80121a2 <m_kalman_3gyro.isra.9.constprop.47+0xca2>
 8012192:	f04f 0302 	mov.w	r3, #2
 8012196:	f889 3000 	strb.w	r3, [r9]
 801219a:	f04f 0301 	mov.w	r3, #1
 801219e:	f889 3001 	strb.w	r3, [r9, #1]
 80121a2:	eddb 7a03 	vldr	s15, [fp, #12]
 80121a6:	ed9b 7a02 	vldr	s14, [fp, #8]
 80121aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80121ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121b2:	d90a      	bls.n	80121ca <m_kalman_3gyro.isra.9.constprop.47+0xcca>
 80121b4:	eef4 7a67 	vcmp.f32	s15, s15
 80121b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121bc:	d105      	bne.n	80121ca <m_kalman_3gyro.isra.9.constprop.47+0xcca>
 80121be:	2204      	movs	r2, #4
 80121c0:	2303      	movs	r3, #3
 80121c2:	f889 2002 	strb.w	r2, [r9, #2]
 80121c6:	f889 3003 	strb.w	r3, [r9, #3]
 80121ca:	eddb 7a05 	vldr	s15, [fp, #20]
 80121ce:	ed9b 7a04 	vldr	s14, [fp, #16]
 80121d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80121d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121da:	d90a      	bls.n	80121f2 <m_kalman_3gyro.isra.9.constprop.47+0xcf2>
 80121dc:	eef4 7a67 	vcmp.f32	s15, s15
 80121e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121e4:	d105      	bne.n	80121f2 <m_kalman_3gyro.isra.9.constprop.47+0xcf2>
 80121e6:	2206      	movs	r2, #6
 80121e8:	2305      	movs	r3, #5
 80121ea:	f889 2004 	strb.w	r2, [r9, #4]
 80121ee:	f889 3005 	strb.w	r3, [r9, #5]
 80121f2:	eddb 7a07 	vldr	s15, [fp, #28]
 80121f6:	ed9b 7a06 	vldr	s14, [fp, #24]
 80121fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80121fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012202:	d90a      	bls.n	801221a <m_kalman_3gyro.isra.9.constprop.47+0xd1a>
 8012204:	eef4 7a67 	vcmp.f32	s15, s15
 8012208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801220c:	d105      	bne.n	801221a <m_kalman_3gyro.isra.9.constprop.47+0xd1a>
 801220e:	2208      	movs	r2, #8
 8012210:	2307      	movs	r3, #7
 8012212:	f889 2006 	strb.w	r2, [r9, #6]
 8012216:	f889 3007 	strb.w	r3, [r9, #7]
 801221a:	eddb 7a09 	vldr	s15, [fp, #36]	; 0x24
 801221e:	ed9b 7a08 	vldr	s14, [fp, #32]
 8012222:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801222a:	d913      	bls.n	8012254 <m_kalman_3gyro.isra.9.constprop.47+0xd54>
 801222c:	eef4 7a67 	vcmp.f32	s15, s15
 8012230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012234:	d10e      	bne.n	8012254 <m_kalman_3gyro.isra.9.constprop.47+0xd54>
 8012236:	220a      	movs	r2, #10
 8012238:	2309      	movs	r3, #9
 801223a:	f889 2008 	strb.w	r2, [r9, #8]
 801223e:	f889 3009 	strb.w	r3, [r9, #9]
 8012242:	e007      	b.n	8012254 <m_kalman_3gyro.isra.9.constprop.47+0xd54>
 8012244:	20001a90 	.word	0x20001a90
 8012248:	20001670 	.word	0x20001670
 801224c:	3f333333 	.word	0x3f333333
 8012250:	3f4ccccd 	.word	0x3f4ccccd
 8012254:	eddb 7a0b 	vldr	s15, [fp, #44]	; 0x2c
 8012258:	ed9b 7a0a 	vldr	s14, [fp, #40]	; 0x28
 801225c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012264:	d90a      	bls.n	801227c <m_kalman_3gyro.isra.9.constprop.47+0xd7c>
 8012266:	eef4 7a67 	vcmp.f32	s15, s15
 801226a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801226e:	d105      	bne.n	801227c <m_kalman_3gyro.isra.9.constprop.47+0xd7c>
 8012270:	220c      	movs	r2, #12
 8012272:	230b      	movs	r3, #11
 8012274:	f889 200a 	strb.w	r2, [r9, #10]
 8012278:	f889 300b 	strb.w	r3, [r9, #11]
 801227c:	eddb 7a0d 	vldr	s15, [fp, #52]	; 0x34
 8012280:	ed9b 7a0c 	vldr	s14, [fp, #48]	; 0x30
 8012284:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801228c:	d90a      	bls.n	80122a4 <m_kalman_3gyro.isra.9.constprop.47+0xda4>
 801228e:	eef4 7a67 	vcmp.f32	s15, s15
 8012292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012296:	d105      	bne.n	80122a4 <m_kalman_3gyro.isra.9.constprop.47+0xda4>
 8012298:	220e      	movs	r2, #14
 801229a:	230d      	movs	r3, #13
 801229c:	f889 200c 	strb.w	r2, [r9, #12]
 80122a0:	f889 300d 	strb.w	r3, [r9, #13]
 80122a4:	eddb 7a0f 	vldr	s15, [fp, #60]	; 0x3c
 80122a8:	ed9b 7a0e 	vldr	s14, [fp, #56]	; 0x38
 80122ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80122b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122b4:	d90a      	bls.n	80122cc <m_kalman_3gyro.isra.9.constprop.47+0xdcc>
 80122b6:	eef4 7a67 	vcmp.f32	s15, s15
 80122ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122be:	d105      	bne.n	80122cc <m_kalman_3gyro.isra.9.constprop.47+0xdcc>
 80122c0:	2210      	movs	r2, #16
 80122c2:	230f      	movs	r3, #15
 80122c4:	f889 200e 	strb.w	r2, [r9, #14]
 80122c8:	f889 300f 	strb.w	r3, [r9, #15]
 80122cc:	eddb 7a11 	vldr	s15, [fp, #68]	; 0x44
 80122d0:	ed9b 7a10 	vldr	s14, [fp, #64]	; 0x40
 80122d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80122d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122dc:	d90a      	bls.n	80122f4 <m_kalman_3gyro.isra.9.constprop.47+0xdf4>
 80122de:	eef4 7a67 	vcmp.f32	s15, s15
 80122e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122e6:	d105      	bne.n	80122f4 <m_kalman_3gyro.isra.9.constprop.47+0xdf4>
 80122e8:	2212      	movs	r2, #18
 80122ea:	2311      	movs	r3, #17
 80122ec:	f889 2010 	strb.w	r2, [r9, #16]
 80122f0:	f889 3011 	strb.w	r3, [r9, #17]
 80122f4:	eddb 7a13 	vldr	s15, [fp, #76]	; 0x4c
 80122f8:	ed9b 7a12 	vldr	s14, [fp, #72]	; 0x48
 80122fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012304:	d90a      	bls.n	801231c <m_kalman_3gyro.isra.9.constprop.47+0xe1c>
 8012306:	eef4 7a67 	vcmp.f32	s15, s15
 801230a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801230e:	d105      	bne.n	801231c <m_kalman_3gyro.isra.9.constprop.47+0xe1c>
 8012310:	2214      	movs	r2, #20
 8012312:	2313      	movs	r3, #19
 8012314:	f889 2012 	strb.w	r2, [r9, #18]
 8012318:	f889 3013 	strb.w	r3, [r9, #19]
 801231c:	eddb 7a15 	vldr	s15, [fp, #84]	; 0x54
 8012320:	ed9b 7a14 	vldr	s14, [fp, #80]	; 0x50
 8012324:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801232c:	d90a      	bls.n	8012344 <m_kalman_3gyro.isra.9.constprop.47+0xe44>
 801232e:	eef4 7a67 	vcmp.f32	s15, s15
 8012332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012336:	d105      	bne.n	8012344 <m_kalman_3gyro.isra.9.constprop.47+0xe44>
 8012338:	2216      	movs	r2, #22
 801233a:	2315      	movs	r3, #21
 801233c:	f889 2014 	strb.w	r2, [r9, #20]
 8012340:	f889 3015 	strb.w	r3, [r9, #21]
 8012344:	eddb 7a17 	vldr	s15, [fp, #92]	; 0x5c
 8012348:	ed9b 7a16 	vldr	s14, [fp, #88]	; 0x58
 801234c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012354:	d90a      	bls.n	801236c <m_kalman_3gyro.isra.9.constprop.47+0xe6c>
 8012356:	eef4 7a67 	vcmp.f32	s15, s15
 801235a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801235e:	d105      	bne.n	801236c <m_kalman_3gyro.isra.9.constprop.47+0xe6c>
 8012360:	2218      	movs	r2, #24
 8012362:	2317      	movs	r3, #23
 8012364:	f889 2016 	strb.w	r2, [r9, #22]
 8012368:	f889 3017 	strb.w	r3, [r9, #23]
 801236c:	eddb 7a19 	vldr	s15, [fp, #100]	; 0x64
 8012370:	ed9b 7a18 	vldr	s14, [fp, #96]	; 0x60
 8012374:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801237c:	d90a      	bls.n	8012394 <m_kalman_3gyro.isra.9.constprop.47+0xe94>
 801237e:	eef4 7a67 	vcmp.f32	s15, s15
 8012382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012386:	d105      	bne.n	8012394 <m_kalman_3gyro.isra.9.constprop.47+0xe94>
 8012388:	221a      	movs	r2, #26
 801238a:	2319      	movs	r3, #25
 801238c:	f889 2018 	strb.w	r2, [r9, #24]
 8012390:	f889 3019 	strb.w	r3, [r9, #25]
 8012394:	eddb 7a1b 	vldr	s15, [fp, #108]	; 0x6c
 8012398:	ed9b 7a1a 	vldr	s14, [fp, #104]	; 0x68
 801239c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80123a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123a4:	d90a      	bls.n	80123bc <m_kalman_3gyro.isra.9.constprop.47+0xebc>
 80123a6:	eef4 7a67 	vcmp.f32	s15, s15
 80123aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123ae:	d105      	bne.n	80123bc <m_kalman_3gyro.isra.9.constprop.47+0xebc>
 80123b0:	221c      	movs	r2, #28
 80123b2:	231b      	movs	r3, #27
 80123b4:	f889 201a 	strb.w	r2, [r9, #26]
 80123b8:	f889 301b 	strb.w	r3, [r9, #27]
 80123bc:	eddb 7a1d 	vldr	s15, [fp, #116]	; 0x74
 80123c0:	ed9b 7a1c 	vldr	s14, [fp, #112]	; 0x70
 80123c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80123c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123cc:	d90b      	bls.n	80123e6 <m_kalman_3gyro.isra.9.constprop.47+0xee6>
 80123ce:	eef4 7a67 	vcmp.f32	s15, s15
 80123d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123d6:	d106      	bne.n	80123e6 <m_kalman_3gyro.isra.9.constprop.47+0xee6>
 80123d8:	231d      	movs	r3, #29
 80123da:	f04f 021e 	mov.w	r2, #30
 80123de:	f889 201c 	strb.w	r2, [r9, #28]
 80123e2:	f889 301d 	strb.w	r3, [r9, #29]
 80123e6:	2304      	movs	r3, #4
 80123e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80123ea:	2302      	movs	r3, #2
 80123ec:	9304      	str	r3, [sp, #16]
 80123ee:	9a04      	ldr	r2, [sp, #16]
 80123f0:	f102 0a01 	add.w	sl, r2, #1
 80123f4:	0053      	lsls	r3, r2, #1
 80123f6:	f1ba 0f1f 	cmp.w	sl, #31
 80123fa:	9305      	str	r3, [sp, #20]
 80123fc:	d056      	beq.n	80124ac <m_kalman_3gyro.isra.9.constprop.47+0xfac>
 80123fe:	2301      	movs	r3, #1
 8012400:	9302      	str	r3, [sp, #8]
 8012402:	9b02      	ldr	r3, [sp, #8]
 8012404:	9a05      	ldr	r2, [sp, #20]
 8012406:	189f      	adds	r7, r3, r2
 8012408:	2f1f      	cmp	r7, #31
 801240a:	bfa8      	it	ge
 801240c:	271f      	movge	r7, #31
 801240e:	1afb      	subs	r3, r7, r3
 8012410:	2b00      	cmp	r3, #0
 8012412:	9300      	str	r3, [sp, #0]
 8012414:	dd42      	ble.n	801249c <m_kalman_3gyro.isra.9.constprop.47+0xf9c>
 8012416:	4655      	mov	r5, sl
 8012418:	9e02      	ldr	r6, [sp, #8]
 801241a:	2401      	movs	r4, #1
 801241c:	e00e      	b.n	801243c <m_kalman_3gyro.isra.9.constprop.47+0xf3c>
 801241e:	eef4 7a67 	vcmp.f32	s15, s15
 8012422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012426:	d11f      	bne.n	8012468 <m_kalman_3gyro.isra.9.constprop.47+0xf68>
 8012428:	3501      	adds	r5, #1
 801242a:	42bd      	cmp	r5, r7
 801242c:	f800 3c01 	strb.w	r3, [r0, #-1]
 8012430:	f001 86fa 	beq.w	8014228 <m_kalman_3gyro.isra.9.constprop.47+0x2d28>
 8012434:	9b00      	ldr	r3, [sp, #0]
 8012436:	3401      	adds	r4, #1
 8012438:	42a3      	cmp	r3, r4
 801243a:	db28      	blt.n	801248e <m_kalman_3gyro.isra.9.constprop.47+0xf8e>
 801243c:	f106 3cff 	add.w	ip, r6, #4294967295
 8012440:	1e69      	subs	r1, r5, #1
 8012442:	f919 200c 	ldrsb.w	r2, [r9, ip]
 8012446:	f919 3001 	ldrsb.w	r3, [r9, r1]
 801244a:	eb0b 0e82 	add.w	lr, fp, r2, lsl #2
 801244e:	eb0b 0083 	add.w	r0, fp, r3, lsl #2
 8012452:	ed50 7a01 	vldr	s15, [r0, #-4]
 8012456:	ed1e 7a01 	vldr	s14, [lr, #-4]
 801245a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801245e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012462:	eb08 0004 	add.w	r0, r8, r4
 8012466:	d8da      	bhi.n	801241e <m_kalman_3gyro.isra.9.constprop.47+0xf1e>
 8012468:	3601      	adds	r6, #1
 801246a:	4556      	cmp	r6, sl
 801246c:	f800 2c01 	strb.w	r2, [r0, #-1]
 8012470:	d1e0      	bne.n	8012434 <m_kalman_3gyro.isra.9.constprop.47+0xf34>
 8012472:	42bd      	cmp	r5, r7
 8012474:	eba7 0205 	sub.w	r2, r7, r5
 8012478:	4449      	add	r1, r9
 801247a:	dadb      	bge.n	8012434 <m_kalman_3gyro.isra.9.constprop.47+0xf34>
 801247c:	443c      	add	r4, r7
 801247e:	f009 f84f 	bl	801b520 <memcpy>
 8012482:	1b64      	subs	r4, r4, r5
 8012484:	9b00      	ldr	r3, [sp, #0]
 8012486:	3401      	adds	r4, #1
 8012488:	42a3      	cmp	r3, r4
 801248a:	463d      	mov	r5, r7
 801248c:	dad6      	bge.n	801243c <m_kalman_3gyro.isra.9.constprop.47+0xf3c>
 801248e:	461a      	mov	r2, r3
 8012490:	9b02      	ldr	r3, [sp, #8]
 8012492:	1e58      	subs	r0, r3, #1
 8012494:	4448      	add	r0, r9
 8012496:	4641      	mov	r1, r8
 8012498:	f009 f842 	bl	801b520 <memcpy>
 801249c:	9b04      	ldr	r3, [sp, #16]
 801249e:	9702      	str	r7, [sp, #8]
 80124a0:	eb03 0a07 	add.w	sl, r3, r7
 80124a4:	f1ba 0f1e 	cmp.w	sl, #30
 80124a8:	ddab      	ble.n	8012402 <m_kalman_3gyro.isra.9.constprop.47+0xf02>
 80124aa:	9b05      	ldr	r3, [sp, #20]
 80124ac:	9304      	str	r3, [sp, #16]
 80124ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80124b0:	3b01      	subs	r3, #1
 80124b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80124b4:	d19b      	bne.n	80123ee <m_kalman_3gyro.isra.9.constprop.47+0xeee>
 80124b6:	f999 301d 	ldrsb.w	r3, [r9, #29]
 80124ba:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 80124be:	ed53 7a01 	vldr	s15, [r3, #-4]
 80124c2:	eef4 7a67 	vcmp.f32	s15, s15
 80124c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124ca:	d122      	bne.n	8012512 <m_kalman_3gyro.isra.9.constprop.47+0x1012>
 80124cc:	f999 200e 	ldrsb.w	r2, [r9, #14]
 80124d0:	f999 300f 	ldrsb.w	r3, [r9, #15]
 80124d4:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 80124d8:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 80124dc:	ed52 7a01 	vldr	s15, [r2, #-4]
 80124e0:	ed13 7a01 	vldr	s14, [r3, #-4]
 80124e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80124e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124ec:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80124f0:	bf4c      	ite	mi
 80124f2:	2201      	movmi	r2, #1
 80124f4:	2200      	movpl	r2, #0
 80124f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124fa:	bf4c      	ite	mi
 80124fc:	2301      	movmi	r3, #1
 80124fe:	2300      	movpl	r3, #0
 8012500:	429a      	cmp	r2, r3
 8012502:	f001 86c4 	beq.w	801428e <m_kalman_3gyro.isra.9.constprop.47+0x2d8e>
 8012506:	ee77 7a87 	vadd.f32	s15, s15, s14
 801250a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801250e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012512:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012514:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8012516:	3204      	adds	r2, #4
 8012518:	9217      	str	r2, [sp, #92]	; 0x5c
 801251a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801251c:	ece3 7a01 	vstmia	r3!, {s15}
 8012520:	429a      	cmp	r2, r3
 8012522:	9324      	str	r3, [sp, #144]	; 0x90
 8012524:	f47f ae14 	bne.w	8012150 <m_kalman_3gyro.isra.9.constprop.47+0xc50>
 8012528:	f8dd a700 	ldr.w	sl, [sp, #1792]	; 0x700
 801252c:	edda 6af2 	vldr	s13, [sl, #968]	; 0x3c8
 8012530:	edda 7af3 	vldr	s15, [sl, #972]	; 0x3cc
 8012534:	ed9a 7af4 	vldr	s14, [sl, #976]	; 0x3d0
 8012538:	ee66 6aa6 	vmul.f32	s13, s13, s13
 801253c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012540:	ee27 7a07 	vmul.f32	s14, s14, s14
 8012544:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012548:	ee77 7a27 	vadd.f32	s15, s14, s15
 801254c:	ee17 0a90 	vmov	r0, s15
 8012550:	f7ee f802 	bl	8000558 <__aeabi_f2d>
 8012554:	ec41 0b10 	vmov	d0, r0, r1
 8012558:	f006 faa2 	bl	8018aa0 <sqrt>
 801255c:	ec51 0b10 	vmov	r0, r1, d0
 8012560:	f7ee fb46 	bl	8000bf0 <__aeabi_d2f>
 8012564:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8012568:	ee2e 6a87 	vmul.f32	s12, s29, s14
 801256c:	ee6d 6a07 	vmul.f32	s13, s26, s14
 8012570:	eecc 7a86 	vdiv.f32	s15, s25, s12
 8012574:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012576:	9004      	str	r0, [sp, #16]
 8012578:	ee89 6aa6 	vdiv.f32	s12, s19, s13
 801257c:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8012580:	ed5f 6ace 	vldr	s13, [pc, #-824]	; 801224c <m_kalman_3gyro.isra.9.constprop.47+0xd4c>
 8012584:	edc3 7a00 	vstr	s15, [r3]
 8012588:	eecc 5a07 	vdiv.f32	s11, s24, s14
 801258c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801258e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012592:	ee77 7a86 	vadd.f32	s15, s15, s12
 8012596:	ee05 0a10 	vmov	s10, r0
 801259a:	ee69 8a87 	vmul.f32	s17, s19, s14
 801259e:	ee6c 6a26 	vmul.f32	s13, s24, s13
 80125a2:	ed83 6a00 	vstr	s12, [r3]
 80125a6:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80125aa:	ee25 6a07 	vmul.f32	s12, s10, s14
 80125ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80125b0:	ed1f 7ad9 	vldr	s14, [pc, #-868]	; 8012250 <m_kalman_3gyro.isra.9.constprop.47+0xd50>
 80125b4:	edc3 5a00 	vstr	s11, [r3]
 80125b8:	ee78 8aa6 	vadd.f32	s17, s17, s13
 80125bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80125be:	ee76 7a27 	vadd.f32	s15, s12, s15
 80125c2:	ee68 8a87 	vmul.f32	s17, s17, s14
 80125c6:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80125ca:	ed83 6a00 	vstr	s12, [r3]
 80125ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80125d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80125d4:	edc3 7a00 	vstr	s15, [r3]
 80125d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80125da:	edc3 8a00 	vstr	s17, [r3]
 80125de:	f89a 38ce 	ldrb.w	r3, [sl, #2254]	; 0x8ce
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	f041 8632 	bne.w	801424c <m_kalman_3gyro.isra.9.constprop.47+0x2d4c>
 80125e8:	2301      	movs	r3, #1
 80125ea:	f60a 07b8 	addw	r7, sl, #2232	; 0x8b8
 80125ee:	e9da 0102 	ldrd	r0, r1, [sl, #8]
 80125f2:	f88a 38ce 	strb.w	r3, [sl, #2254]	; 0x8ce
 80125f6:	2200      	movs	r2, #0
 80125f8:	2300      	movs	r3, #0
 80125fa:	edc7 8a00 	vstr	s17, [r7]
 80125fe:	f60a 06bc 	addw	r6, sl, #2236	; 0x8bc
 8012602:	f7ed fe4b 	bl	800029c <__adddf3>
 8012606:	f50a 650c 	add.w	r5, sl, #2240	; 0x8c0
 801260a:	e9da 2304 	ldrd	r2, r3, [sl, #16]
 801260e:	edc6 8a00 	vstr	s17, [r6]
 8012612:	f7ed fe43 	bl	800029c <__adddf3>
 8012616:	e9da 2306 	ldrd	r2, r3, [sl, #24]
 801261a:	edc5 8a00 	vstr	s17, [r5]
 801261e:	f7ed fe3d 	bl	800029c <__adddf3>
 8012622:	f60a 04c4 	addw	r4, sl, #2244	; 0x8c4
 8012626:	f60a 03c8 	addw	r3, sl, #2248	; 0x8c8
 801262a:	9302      	str	r3, [sp, #8]
 801262c:	edc4 8a00 	vstr	s17, [r4]
 8012630:	e9da 2308 	ldrd	r2, r3, [sl, #32]
 8012634:	f7ed fe32 	bl	800029c <__adddf3>
 8012638:	9b02      	ldr	r3, [sp, #8]
 801263a:	edc3 8a00 	vstr	s17, [r3]
 801263e:	e9da 230a 	ldrd	r2, r3, [sl, #40]	; 0x28
 8012642:	f7ed fe2b 	bl	800029c <__adddf3>
 8012646:	4602      	mov	r2, r0
 8012648:	460b      	mov	r3, r1
 801264a:	e9cd 0100 	strd	r0, r1, [sp]
 801264e:	e9da 0102 	ldrd	r0, r1, [sl, #8]
 8012652:	f7ee f8ff 	bl	8000854 <__aeabi_ddiv>
 8012656:	e9dd 2300 	ldrd	r2, r3, [sp]
 801265a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801265e:	e9da 0104 	ldrd	r0, r1, [sl, #16]
 8012662:	f7ee f8f7 	bl	8000854 <__aeabi_ddiv>
 8012666:	e9dd 2300 	ldrd	r2, r3, [sp]
 801266a:	e9ca 0104 	strd	r0, r1, [sl, #16]
 801266e:	e9da 0106 	ldrd	r0, r1, [sl, #24]
 8012672:	f7ee f8ef 	bl	8000854 <__aeabi_ddiv>
 8012676:	e9dd 2300 	ldrd	r2, r3, [sp]
 801267a:	e9ca 0106 	strd	r0, r1, [sl, #24]
 801267e:	e9da 0108 	ldrd	r0, r1, [sl, #32]
 8012682:	f7ee f8e7 	bl	8000854 <__aeabi_ddiv>
 8012686:	e9dd 2300 	ldrd	r2, r3, [sp]
 801268a:	e9ca 0108 	strd	r0, r1, [sl, #32]
 801268e:	e9da 010a 	ldrd	r0, r1, [sl, #40]	; 0x28
 8012692:	f7ee f8df 	bl	8000854 <__aeabi_ddiv>
 8012696:	e9ca 010a 	strd	r0, r1, [sl, #40]	; 0x28
 801269a:	9b02      	ldr	r3, [sp, #8]
 801269c:	edd4 6a00 	vldr	s13, [r4]
 80126a0:	edc3 6a00 	vstr	s13, [r3]
 80126a4:	e9da 010a 	ldrd	r0, r1, [sl, #40]	; 0x28
 80126a8:	edcd 6a00 	vstr	s13, [sp]
 80126ac:	f7ee faa0 	bl	8000bf0 <__aeabi_d2f>
 80126b0:	edd5 7a00 	vldr	s15, [r5]
 80126b4:	eddd 6a00 	vldr	s13, [sp]
 80126b8:	edc4 7a00 	vstr	s15, [r4]
 80126bc:	edcd 7a02 	vstr	s15, [sp, #8]
 80126c0:	ee07 0a90 	vmov	s15, r0
 80126c4:	ed9f 6ada 	vldr	s12, [pc, #872]	; 8012a30 <m_kalman_3gyro.isra.9.constprop.47+0x1530>
 80126c8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80126cc:	e9da 0108 	ldrd	r0, r1, [sl, #32]
 80126d0:	ee76 6a86 	vadd.f32	s13, s13, s12
 80126d4:	edcd 6a00 	vstr	s13, [sp]
 80126d8:	f7ee fa8a 	bl	8000bf0 <__aeabi_d2f>
 80126dc:	eddd 7a02 	vldr	s15, [sp, #8]
 80126e0:	ed96 7a00 	vldr	s14, [r6]
 80126e4:	ee06 0a90 	vmov	s13, r0
 80126e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80126ec:	eddd 6a00 	vldr	s13, [sp]
 80126f0:	ed85 7a00 	vstr	s14, [r5]
 80126f4:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80126f8:	e9da 0106 	ldrd	r0, r1, [sl, #24]
 80126fc:	ed8d 7a02 	vstr	s14, [sp, #8]
 8012700:	edcd 6a00 	vstr	s13, [sp]
 8012704:	f7ee fa74 	bl	8000bf0 <__aeabi_d2f>
 8012708:	ed9d 7a02 	vldr	s14, [sp, #8]
 801270c:	edd7 7a00 	vldr	s15, [r7]
 8012710:	ee06 0a90 	vmov	s13, r0
 8012714:	ee26 7a87 	vmul.f32	s14, s13, s14
 8012718:	eddd 6a00 	vldr	s13, [sp]
 801271c:	edc6 7a00 	vstr	s15, [r6]
 8012720:	ee37 7a26 	vadd.f32	s14, s14, s13
 8012724:	e9da 0104 	ldrd	r0, r1, [sl, #16]
 8012728:	edcd 7a02 	vstr	s15, [sp, #8]
 801272c:	ed8d 7a00 	vstr	s14, [sp]
 8012730:	f7ee fa5e 	bl	8000bf0 <__aeabi_d2f>
 8012734:	eddd 7a02 	vldr	s15, [sp, #8]
 8012738:	edc7 8a00 	vstr	s17, [r7]
 801273c:	ee07 0a10 	vmov	s14, r0
 8012740:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012744:	ed9d 7a00 	vldr	s14, [sp]
 8012748:	ee77 7a87 	vadd.f32	s15, s15, s14
 801274c:	e9da 0102 	ldrd	r0, r1, [sl, #8]
 8012750:	edcd 7a00 	vstr	s15, [sp]
 8012754:	f7ee fa4c 	bl	8000bf0 <__aeabi_d2f>
 8012758:	ee07 0a90 	vmov	s15, r0
 801275c:	ee67 8aa8 	vmul.f32	s17, s15, s17
 8012760:	eddd 7a00 	vldr	s15, [sp]
 8012764:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8012766:	ee78 8aa7 	vadd.f32	s17, s17, s15
 801276a:	f50d 61db 	add.w	r1, sp, #1752	; 0x6d8
 801276e:	2200      	movs	r2, #0
 8012770:	2300      	movs	r3, #0
 8012772:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012776:	edc4 8a00 	vstr	s17, [r4]
 801277a:	f7ee f9bd 	bl	8000af8 <__aeabi_dcmple>
 801277e:	2800      	cmp	r0, #0
 8012780:	f041 8571 	bne.w	8014266 <m_kalman_3gyro.isra.9.constprop.47+0x2d66>
 8012784:	f50d 61db 	add.w	r1, sp, #1752	; 0x6d8
 8012788:	2200      	movs	r2, #0
 801278a:	4baa      	ldr	r3, [pc, #680]	; (8012a34 <m_kalman_3gyro.isra.9.constprop.47+0x1534>)
 801278c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012790:	f7ee f99e 	bl	8000ad0 <__aeabi_dcmpeq>
 8012794:	2800      	cmp	r0, #0
 8012796:	f041 8574 	bne.w	8014282 <m_kalman_3gyro.isra.9.constprop.47+0x2d82>
 801279a:	eddd 6acb 	vldr	s13, [sp, #812]	; 0x32c
 801279e:	ed9d 7ab2 	vldr	s14, [sp, #712]	; 0x2c8
 80127a2:	eddd 7acc 	vldr	s15, [sp, #816]	; 0x330
 80127a6:	ed9d 6ab3 	vldr	s12, [sp, #716]	; 0x2cc
 80127aa:	eddd 5ab1 	vldr	s11, [sp, #708]	; 0x2c4
 80127ae:	ee66 6a88 	vmul.f32	s13, s13, s16
 80127b2:	ee27 7a08 	vmul.f32	s14, s14, s16
 80127b6:	ee67 7a88 	vmul.f32	s15, s15, s16
 80127ba:	edcd 6acb 	vstr	s13, [sp, #812]	; 0x32c
 80127be:	ed8d 7ab2 	vstr	s14, [sp, #712]	; 0x2c8
 80127c2:	eddd 6acd 	vldr	s13, [sp, #820]	; 0x334
 80127c6:	ed9d 7ab4 	vldr	s14, [sp, #720]	; 0x2d0
 80127ca:	edcd 7acc 	vstr	s15, [sp, #816]	; 0x330
 80127ce:	eddd 7ace 	vldr	s15, [sp, #824]	; 0x338
 80127d2:	ee26 6a08 	vmul.f32	s12, s12, s16
 80127d6:	ee66 6a88 	vmul.f32	s13, s13, s16
 80127da:	ee27 7a08 	vmul.f32	s14, s14, s16
 80127de:	ee67 7a88 	vmul.f32	s15, s15, s16
 80127e2:	ed8d 6ab3 	vstr	s12, [sp, #716]	; 0x2cc
 80127e6:	edcd 6acd 	vstr	s13, [sp, #820]	; 0x334
 80127ea:	ed9d 6ab5 	vldr	s12, [sp, #724]	; 0x2d4
 80127ee:	eddd 6acf 	vldr	s13, [sp, #828]	; 0x33c
 80127f2:	ed8d 7ab4 	vstr	s14, [sp, #720]	; 0x2d0
 80127f6:	edcd 7ace 	vstr	s15, [sp, #824]	; 0x338
 80127fa:	ed9d 7ab6 	vldr	s14, [sp, #728]	; 0x2d8
 80127fe:	eddd 7ad0 	vldr	s15, [sp, #832]	; 0x340
 8012802:	ee26 6a08 	vmul.f32	s12, s12, s16
 8012806:	ee66 6a88 	vmul.f32	s13, s13, s16
 801280a:	ee27 7a08 	vmul.f32	s14, s14, s16
 801280e:	ee67 7a88 	vmul.f32	s15, s15, s16
 8012812:	ed8d 6ab5 	vstr	s12, [sp, #724]	; 0x2d4
 8012816:	edcd 6acf 	vstr	s13, [sp, #828]	; 0x33c
 801281a:	ed9d 6ab7 	vldr	s12, [sp, #732]	; 0x2dc
 801281e:	eddd 6ad1 	vldr	s13, [sp, #836]	; 0x344
 8012822:	ed8d 7ab6 	vstr	s14, [sp, #728]	; 0x2d8
 8012826:	edcd 7ad0 	vstr	s15, [sp, #832]	; 0x340
 801282a:	ed9d 7ab8 	vldr	s14, [sp, #736]	; 0x2e0
 801282e:	eddd 7ad2 	vldr	s15, [sp, #840]	; 0x348
 8012832:	ee65 5a88 	vmul.f32	s11, s11, s16
 8012836:	ee26 6a08 	vmul.f32	s12, s12, s16
 801283a:	ee66 6a88 	vmul.f32	s13, s13, s16
 801283e:	ee27 7a08 	vmul.f32	s14, s14, s16
 8012842:	ee67 7a88 	vmul.f32	s15, s15, s16
 8012846:	ed8d 6ab7 	vstr	s12, [sp, #732]	; 0x2dc
 801284a:	edcd 6ad1 	vstr	s13, [sp, #836]	; 0x344
 801284e:	ed8d 7ab8 	vstr	s14, [sp, #736]	; 0x2e0
 8012852:	edcd 7ad2 	vstr	s15, [sp, #840]	; 0x348
 8012856:	edcd 5ab1 	vstr	s11, [sp, #708]	; 0x2c4
 801285a:	eddd 5ab9 	vldr	s11, [sp, #740]	; 0x2e4
 801285e:	eddd 7ad3 	vldr	s15, [sp, #844]	; 0x34c
 8012862:	ed9d 6aba 	vldr	s12, [sp, #744]	; 0x2e8
 8012866:	eddd 6ad4 	vldr	s13, [sp, #848]	; 0x350
 801286a:	ed9d 7abb 	vldr	s14, [sp, #748]	; 0x2ec
 801286e:	ee67 7a88 	vmul.f32	s15, s15, s16
 8012872:	ee26 6a08 	vmul.f32	s12, s12, s16
 8012876:	edcd 7ad3 	vstr	s15, [sp, #844]	; 0x34c
 801287a:	eddd 7ad5 	vldr	s15, [sp, #852]	; 0x354
 801287e:	ed8d 6aba 	vstr	s12, [sp, #744]	; 0x2e8
 8012882:	ee66 6a88 	vmul.f32	s13, s13, s16
 8012886:	ee27 7a08 	vmul.f32	s14, s14, s16
 801288a:	ee67 7a88 	vmul.f32	s15, s15, s16
 801288e:	ed9d 6abc 	vldr	s12, [sp, #752]	; 0x2f0
 8012892:	edcd 6ad4 	vstr	s13, [sp, #848]	; 0x350
 8012896:	ed8d 7abb 	vstr	s14, [sp, #748]	; 0x2ec
 801289a:	eddd 6ad6 	vldr	s13, [sp, #856]	; 0x358
 801289e:	ed9d 7abd 	vldr	s14, [sp, #756]	; 0x2f4
 80128a2:	edcd 7ad5 	vstr	s15, [sp, #852]	; 0x354
 80128a6:	eddd 7ad7 	vldr	s15, [sp, #860]	; 0x35c
 80128aa:	ee65 5a88 	vmul.f32	s11, s11, s16
 80128ae:	ee26 6a08 	vmul.f32	s12, s12, s16
 80128b2:	ee66 6a88 	vmul.f32	s13, s13, s16
 80128b6:	ee27 7a08 	vmul.f32	s14, s14, s16
 80128ba:	ee27 8a88 	vmul.f32	s16, s15, s16
 80128be:	a9be      	add	r1, sp, #760	; 0x2f8
 80128c0:	edcd 5ab9 	vstr	s11, [sp, #740]	; 0x2e4
 80128c4:	ed8d 6abc 	vstr	s12, [sp, #752]	; 0x2f0
 80128c8:	edcd 6ad6 	vstr	s13, [sp, #856]	; 0x358
 80128cc:	a8b1      	add	r0, sp, #708	; 0x2c4
 80128ce:	ed8d 7abd 	vstr	s14, [sp, #756]	; 0x2f4
 80128d2:	eeb0 0a68 	vmov.f32	s0, s17
 80128d6:	ed8d 8ad7 	vstr	s16, [sp, #860]	; 0x35c
 80128da:	f7fa feb7 	bl	800d64c <m_interp1q_constrain>
 80128de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80128e0:	ed8d 0a00 	vstr	s0, [sp]
 80128e4:	ed83 0a00 	vstr	s0, [r3]
 80128e8:	a9d8      	add	r1, sp, #864	; 0x360
 80128ea:	a8cb      	add	r0, sp, #812	; 0x32c
 80128ec:	eeb0 0a68 	vmov.f32	s0, s17
 80128f0:	f7fa feac 	bl	800d64c <m_interp1q_constrain>
 80128f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80128f6:	eddd 7a00 	vldr	s15, [sp]
 80128fa:	ed83 0a00 	vstr	s0, [r3]
 80128fe:	4b4e      	ldr	r3, [pc, #312]	; (8012a38 <m_kalman_3gyro.isra.9.constprop.47+0x1538>)
 8012900:	ed9a 7a2d 	vldr	s14, [sl, #180]	; 0xb4
 8012904:	ed93 8a00 	vldr	s16, [r3]
 8012908:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801290a:	edc3 7a00 	vstr	s15, [r3]
 801290e:	ee78 7a47 	vsub.f32	s15, s16, s14
 8012912:	eef0 7ae7 	vabs.f32	s15, s15
 8012916:	ee17 0a90 	vmov	r0, s15
 801291a:	f7ed fe1d 	bl	8000558 <__aeabi_f2d>
 801291e:	ec41 0b10 	vmov	d0, r0, r1
 8012922:	f005 fd1d 	bl	8018360 <floor>
 8012926:	ec51 0b10 	vmov	r0, r1, d0
 801292a:	f7ee f941 	bl	8000bb0 <__aeabi_d2uiz>
 801292e:	f8dd 36f4 	ldr.w	r3, [sp, #1780]	; 0x6f4
 8012932:	7018      	strb	r0, [r3, #0]
 8012934:	ed9a 7a2d 	vldr	s14, [sl, #180]	; 0xb4
 8012938:	edda 7a2b 	vldr	s15, [sl, #172]	; 0xac
 801293c:	4b3f      	ldr	r3, [pc, #252]	; (8012a3c <m_kalman_3gyro.isra.9.constprop.47+0x153c>)
 801293e:	ee38 7a47 	vsub.f32	s14, s16, s14
 8012942:	ee7f 7ae7 	vsub.f32	s15, s31, s15
 8012946:	eeb0 7ac7 	vabs.f32	s14, s14
 801294a:	eef0 7ae7 	vabs.f32	s15, s15
 801294e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012952:	ed83 7a00 	vstr	s14, [r3]
 8012956:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012958:	edcd 7a00 	vstr	s15, [sp]
 801295c:	edc3 7a00 	vstr	s15, [r3]
 8012960:	ee17 0a90 	vmov	r0, s15
 8012964:	f7ed fdf8 	bl	8000558 <__aeabi_f2d>
 8012968:	a32f      	add	r3, pc, #188	; (adr r3, 8012a28 <m_kalman_3gyro.isra.9.constprop.47+0x1528>)
 801296a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801296e:	f7ee f8d7 	bl	8000b20 <__aeabi_dcmpgt>
 8012972:	2800      	cmp	r0, #0
 8012974:	f001 8466 	beq.w	8014244 <m_kalman_3gyro.isra.9.constprop.47+0x2d44>
 8012978:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8012a40 <m_kalman_3gyro.isra.9.constprop.47+0x1540>
 801297c:	eddd 7a00 	vldr	s15, [sp]
 8012980:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012982:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012986:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 801298a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801298e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012992:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012996:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 801299a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801299e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129a2:	edc3 7a00 	vstr	s15, [r3]
 80129a6:	f301 8468 	bgt.w	801427a <m_kalman_3gyro.isra.9.constprop.47+0x2d7a>
 80129aa:	ee17 0a90 	vmov	r0, s15
 80129ae:	f7ed fdd3 	bl	8000558 <__aeabi_f2d>
 80129b2:	ec41 0b10 	vmov	d0, r0, r1
 80129b6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80129ba:	ee78 7a65 	vsub.f32	s15, s16, s11
 80129be:	edcd 5a00 	vstr	s11, [sp]
 80129c2:	eef0 7ae7 	vabs.f32	s15, s15
 80129c6:	ee17 0a90 	vmov	r0, s15
 80129ca:	ed8d 0b02 	vstr	d0, [sp, #8]
 80129ce:	f7ed fdc3 	bl	8000558 <__aeabi_f2d>
 80129d2:	4b1c      	ldr	r3, [pc, #112]	; (8012a44 <m_kalman_3gyro.isra.9.constprop.47+0x1544>)
 80129d4:	2200      	movs	r2, #0
 80129d6:	f7ed fc5f 	bl	8000298 <__aeabi_dsub>
 80129da:	ed9d 0b02 	vldr	d0, [sp, #8]
 80129de:	ec41 0b11 	vmov	d1, r0, r1
 80129e2:	f005 fd41 	bl	8018468 <fmax>
 80129e6:	ec51 0b10 	vmov	r0, r1, d0
 80129ea:	f7ee f901 	bl	8000bf0 <__aeabi_d2f>
 80129ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80129f0:	6018      	str	r0, [r3, #0]
 80129f2:	f89a 3031 	ldrb.w	r3, [sl, #49]	; 0x31
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	f000 80ae 	beq.w	8012b58 <m_kalman_3gyro.isra.9.constprop.47+0x1658>
 80129fc:	f89a 3030 	ldrb.w	r3, [sl, #48]	; 0x30
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	f040 80a9 	bne.w	8012b58 <m_kalman_3gyro.isra.9.constprop.47+0x1658>
 8012a06:	ed9d 7a27 	vldr	s14, [sp, #156]	; 0x9c
 8012a0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012a0c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012a10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012a14:	ed93 7a00 	vldr	s14, [r3]
 8012a18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a20:	f140 809a 	bpl.w	8012b58 <m_kalman_3gyro.isra.9.constprop.47+0x1658>
 8012a24:	e014      	b.n	8012a50 <m_kalman_3gyro.isra.9.constprop.47+0x1550>
 8012a26:	bf00      	nop
 8012a28:	9999999a 	.word	0x9999999a
 8012a2c:	3fb99999 	.word	0x3fb99999
 8012a30:	00000000 	.word	0x00000000
 8012a34:	3ff00000 	.word	0x3ff00000
 8012a38:	20001a8c 	.word	0x20001a8c
 8012a3c:	20001a9c 	.word	0x20001a9c
 8012a40:	3dcccccd 	.word	0x3dcccccd
 8012a44:	3fe00000 	.word	0x3fe00000
 8012a48:	3f99999a 	.word	0x3f99999a
 8012a4c:	3f4ccccd 	.word	0x3f4ccccd
 8012a50:	ed8a ba12 	vstr	s22, [sl, #72]	; 0x48
 8012a54:	edca ba15 	vstr	s23, [sl, #84]	; 0x54
 8012a58:	edca aa18 	vstr	s21, [sl, #96]	; 0x60
 8012a5c:	edca da11 	vstr	s27, [sl, #68]	; 0x44
 8012a60:	ed8a ea14 	vstr	s28, [sl, #80]	; 0x50
 8012a64:	ed8a 9a17 	vstr	s18, [sl, #92]	; 0x5c
 8012a68:	ed9d 0b20 	vldr	d0, [sp, #128]	; 0x80
 8012a6c:	f006 f818 	bl	8018aa0 <sqrt>
 8012a70:	ec51 0b10 	vmov	r0, r1, d0
 8012a74:	f7ee f8bc 	bl	8000bf0 <__aeabi_d2f>
 8012a78:	ed9a 4a11 	vldr	s8, [sl, #68]	; 0x44
 8012a7c:	ed9a 5a17 	vldr	s10, [sl, #92]	; 0x5c
 8012a80:	edda 4a14 	vldr	s9, [sl, #80]	; 0x50
 8012a84:	ed9a 7a18 	vldr	s14, [sl, #96]	; 0x60
 8012a88:	edda 6a12 	vldr	s13, [sl, #72]	; 0x48
 8012a8c:	9906      	ldr	r1, [sp, #24]
 8012a8e:	ee06 0a10 	vmov	s12, r0
 8012a92:	eec4 7a06 	vdiv.f32	s15, s8, s12
 8012a96:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012a98:	ee85 4a06 	vdiv.f32	s8, s10, s12
 8012a9c:	ee84 5a86 	vdiv.f32	s10, s9, s12
 8012aa0:	ed9a 6a15 	vldr	s12, [sl, #84]	; 0x54
 8012aa4:	edca 7a11 	vstr	s15, [sl, #68]	; 0x44
 8012aa8:	ee67 3a27 	vmul.f32	s7, s14, s15
 8012aac:	ee66 4a84 	vmul.f32	s9, s13, s8
 8012ab0:	ee27 7a05 	vmul.f32	s14, s14, s10
 8012ab4:	ee66 6a85 	vmul.f32	s13, s13, s10
 8012ab8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8012abc:	ee26 6a04 	vmul.f32	s12, s12, s8
 8012ac0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012ac4:	ee74 4ae3 	vsub.f32	s9, s9, s7
 8012ac8:	ee37 7a46 	vsub.f32	s14, s14, s12
 8012acc:	edca 7a16 	vstr	s15, [sl, #88]	; 0x58
 8012ad0:	ed8a 4a17 	vstr	s8, [sl, #92]	; 0x5c
 8012ad4:	edca 4a13 	vstr	s9, [sl, #76]	; 0x4c
 8012ad8:	ed8a 5a14 	vstr	s10, [sl, #80]	; 0x50
 8012adc:	ed8a 7a10 	vstr	s14, [sl, #64]	; 0x40
 8012ae0:	f7fa fb86 	bl	800d1f0 <m_dcm2q_eml>
 8012ae4:	ed5f 7a28 	vldr	s15, [pc, #-160]	; 8012a48 <m_kalman_3gyro.isra.9.constprop.47+0x1548>
 8012ae8:	edca fa2b 	vstr	s31, [sl, #172]	; 0xac
 8012aec:	eeb4 aae7 	vcmpe.f32	s20, s15
 8012af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012af4:	eddd 5a00 	vldr	s11, [sp]
 8012af8:	f141 83ed 	bpl.w	80142d6 <m_kalman_3gyro.isra.9.constprop.47+0x2dd6>
 8012afc:	ed5f 7a2d 	vldr	s15, [pc, #-180]	; 8012a4c <m_kalman_3gyro.isra.9.constprop.47+0x154c>
 8012b00:	eeb4 aae7 	vcmpe.f32	s20, s15
 8012b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b08:	bfd4      	ite	le
 8012b0a:	eef0 7a65 	vmovle.f32	s15, s11
 8012b0e:	eef0 7a4a 	vmovgt.f32	s15, s20
 8012b12:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8012b16:	2100      	movs	r1, #0
 8012b18:	edca 7a2c 	vstr	s15, [sl, #176]	; 0xb0
 8012b1c:	f10a 00b8 	add.w	r0, sl, #184	; 0xb8
 8012b20:	f008 fd09 	bl	801b536 <memset>
 8012b24:	4be7      	ldr	r3, [pc, #924]	; (8012ec4 <m_kalman_3gyro.isra.9.constprop.47+0x19c4>)
 8012b26:	f8ca 30b8 	str.w	r3, [sl, #184]	; 0xb8
 8012b2a:	f8ca 30e0 	str.w	r3, [sl, #224]	; 0xe0
 8012b2e:	f8ca 3108 	str.w	r3, [sl, #264]	; 0x108
 8012b32:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
 8012b36:	f8ca 3158 	str.w	r3, [sl, #344]	; 0x158
 8012b3a:	f8ca 3180 	str.w	r3, [sl, #384]	; 0x180
 8012b3e:	f8ca 31a8 	str.w	r3, [sl, #424]	; 0x1a8
 8012b42:	f8ca 31d0 	str.w	r3, [sl, #464]	; 0x1d0
 8012b46:	f8ca 31f8 	str.w	r3, [sl, #504]	; 0x1f8
 8012b4a:	f8dd 36fc 	ldr.w	r3, [sp, #1788]	; 0x6fc
 8012b4e:	2100      	movs	r1, #0
 8012b50:	2201      	movs	r2, #1
 8012b52:	f88a 1031 	strb.w	r1, [sl, #49]	; 0x31
 8012b56:	701a      	strb	r2, [r3, #0]
 8012b58:	9b06      	ldr	r3, [sp, #24]
 8012b5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012b5c:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
 8012b60:	f10a 0494 	add.w	r4, sl, #148	; 0x94
 8012b64:	aee9      	add	r6, sp, #932	; 0x3a4
 8012b66:	f10a 07b4 	add.w	r7, sl, #180	; 0xb4
 8012b6a:	6820      	ldr	r0, [r4, #0]
 8012b6c:	6861      	ldr	r1, [r4, #4]
 8012b6e:	68a2      	ldr	r2, [r4, #8]
 8012b70:	68e3      	ldr	r3, [r4, #12]
 8012b72:	4635      	mov	r5, r6
 8012b74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012b76:	3410      	adds	r4, #16
 8012b78:	42bc      	cmp	r4, r7
 8012b7a:	462e      	mov	r6, r5
 8012b7c:	d1f5      	bne.n	8012b6a <m_kalman_3gyro.isra.9.constprop.47+0x166a>
 8012b7e:	6820      	ldr	r0, [r4, #0]
 8012b80:	6028      	str	r0, [r5, #0]
 8012b82:	edd8 7a00 	vldr	s15, [r8]
 8012b86:	eef4 7a67 	vcmp.f32	s15, s15
 8012b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b8e:	d170      	bne.n	8012c72 <m_kalman_3gyro.isra.9.constprop.47+0x1772>
 8012b90:	edd8 7a01 	vldr	s15, [r8, #4]
 8012b94:	eef4 7a67 	vcmp.f32	s15, s15
 8012b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b9c:	d169      	bne.n	8012c72 <m_kalman_3gyro.isra.9.constprop.47+0x1772>
 8012b9e:	edd8 7a02 	vldr	s15, [r8, #8]
 8012ba2:	eef4 7a67 	vcmp.f32	s15, s15
 8012ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012baa:	d162      	bne.n	8012c72 <m_kalman_3gyro.isra.9.constprop.47+0x1772>
 8012bac:	edd8 7a03 	vldr	s15, [r8, #12]
 8012bb0:	eef4 7a67 	vcmp.f32	s15, s15
 8012bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bb8:	d15b      	bne.n	8012c72 <m_kalman_3gyro.isra.9.constprop.47+0x1772>
 8012bba:	edd8 7a04 	vldr	s15, [r8, #16]
 8012bbe:	eef4 7a67 	vcmp.f32	s15, s15
 8012bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bc6:	d154      	bne.n	8012c72 <m_kalman_3gyro.isra.9.constprop.47+0x1772>
 8012bc8:	edd8 7a05 	vldr	s15, [r8, #20]
 8012bcc:	eef4 7a67 	vcmp.f32	s15, s15
 8012bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bd4:	d14d      	bne.n	8012c72 <m_kalman_3gyro.isra.9.constprop.47+0x1772>
 8012bd6:	edd8 7a06 	vldr	s15, [r8, #24]
 8012bda:	eef4 7a67 	vcmp.f32	s15, s15
 8012bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012be2:	d146      	bne.n	8012c72 <m_kalman_3gyro.isra.9.constprop.47+0x1772>
 8012be4:	edd8 7a07 	vldr	s15, [r8, #28]
 8012be8:	eef4 7a67 	vcmp.f32	s15, s15
 8012bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bf0:	d13f      	bne.n	8012c72 <m_kalman_3gyro.isra.9.constprop.47+0x1772>
 8012bf2:	edd8 7a08 	vldr	s15, [r8, #32]
 8012bf6:	eef4 7a67 	vcmp.f32	s15, s15
 8012bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bfe:	d138      	bne.n	8012c72 <m_kalman_3gyro.isra.9.constprop.47+0x1772>
 8012c00:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
 8012c04:	eef4 7a67 	vcmp.f32	s15, s15
 8012c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c0c:	d131      	bne.n	8012c72 <m_kalman_3gyro.isra.9.constprop.47+0x1772>
 8012c0e:	edd8 7a0a 	vldr	s15, [r8, #40]	; 0x28
 8012c12:	eef4 7a67 	vcmp.f32	s15, s15
 8012c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c1a:	d12a      	bne.n	8012c72 <m_kalman_3gyro.isra.9.constprop.47+0x1772>
 8012c1c:	edd8 7a0b 	vldr	s15, [r8, #44]	; 0x2c
 8012c20:	eef4 7a67 	vcmp.f32	s15, s15
 8012c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c28:	d123      	bne.n	8012c72 <m_kalman_3gyro.isra.9.constprop.47+0x1772>
 8012c2a:	edd8 7a0c 	vldr	s15, [r8, #48]	; 0x30
 8012c2e:	eef4 7a67 	vcmp.f32	s15, s15
 8012c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c36:	d11c      	bne.n	8012c72 <m_kalman_3gyro.isra.9.constprop.47+0x1772>
 8012c38:	9b06      	ldr	r3, [sp, #24]
 8012c3a:	edd3 7a00 	vldr	s15, [r3]
 8012c3e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c46:	d163      	bne.n	8012d10 <m_kalman_3gyro.isra.9.constprop.47+0x1810>
 8012c48:	edd3 7a01 	vldr	s15, [r3, #4]
 8012c4c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c54:	d15c      	bne.n	8012d10 <m_kalman_3gyro.isra.9.constprop.47+0x1810>
 8012c56:	edd3 7a02 	vldr	s15, [r3, #8]
 8012c5a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c62:	d155      	bne.n	8012d10 <m_kalman_3gyro.isra.9.constprop.47+0x1810>
 8012c64:	edd3 7a03 	vldr	s15, [r3, #12]
 8012c68:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c70:	d14e      	bne.n	8012d10 <m_kalman_3gyro.isra.9.constprop.47+0x1810>
 8012c72:	2400      	movs	r4, #0
 8012c74:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 8012c78:	9906      	ldr	r1, [sp, #24]
 8012c7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012c7c:	f8ca 4044 	str.w	r4, [sl, #68]	; 0x44
 8012c80:	f8ca 4048 	str.w	r4, [sl, #72]	; 0x48
 8012c84:	f8ca 404c 	str.w	r4, [sl, #76]	; 0x4c
 8012c88:	f8ca 4054 	str.w	r4, [sl, #84]	; 0x54
 8012c8c:	f8ca 4058 	str.w	r4, [sl, #88]	; 0x58
 8012c90:	f8ca 405c 	str.w	r4, [sl, #92]	; 0x5c
 8012c94:	f8ca 5040 	str.w	r5, [sl, #64]	; 0x40
 8012c98:	f8ca 5050 	str.w	r5, [sl, #80]	; 0x50
 8012c9c:	f8ca 5060 	str.w	r5, [sl, #96]	; 0x60
 8012ca0:	f7fa faa6 	bl	800d1f0 <m_dcm2q_eml>
 8012ca4:	f8dd 36e0 	ldr.w	r3, [sp, #1760]	; 0x6e0
 8012ca8:	f8ca 4094 	str.w	r4, [sl, #148]	; 0x94
 8012cac:	f8ca 4098 	str.w	r4, [sl, #152]	; 0x98
 8012cb0:	f8ca 409c 	str.w	r4, [sl, #156]	; 0x9c
 8012cb4:	681a      	ldr	r2, [r3, #0]
 8012cb6:	f8ca 20a0 	str.w	r2, [sl, #160]	; 0xa0
 8012cba:	f8dd 26e0 	ldr.w	r2, [sp, #1760]	; 0x6e0
 8012cbe:	4b82      	ldr	r3, [pc, #520]	; (8012ec8 <m_kalman_3gyro.isra.9.constprop.47+0x19c8>)
 8012cc0:	6852      	ldr	r2, [r2, #4]
 8012cc2:	f8ca 20a4 	str.w	r2, [sl, #164]	; 0xa4
 8012cc6:	f8dd 26e0 	ldr.w	r2, [sp, #1760]	; 0x6e0
 8012cca:	6892      	ldr	r2, [r2, #8]
 8012ccc:	f8ca 20a8 	str.w	r2, [sl, #168]	; 0xa8
 8012cd0:	f8ca 30ac 	str.w	r3, [sl, #172]	; 0xac
 8012cd4:	f8ca 50b0 	str.w	r5, [sl, #176]	; 0xb0
 8012cd8:	f8ca 50b4 	str.w	r5, [sl, #180]	; 0xb4
 8012cdc:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8012ce0:	2100      	movs	r1, #0
 8012ce2:	f10a 00b8 	add.w	r0, sl, #184	; 0xb8
 8012ce6:	f008 fc26 	bl	801b536 <memset>
 8012cea:	4b76      	ldr	r3, [pc, #472]	; (8012ec4 <m_kalman_3gyro.isra.9.constprop.47+0x19c4>)
 8012cec:	f8ca 30b8 	str.w	r3, [sl, #184]	; 0xb8
 8012cf0:	f8ca 30e0 	str.w	r3, [sl, #224]	; 0xe0
 8012cf4:	f8ca 3108 	str.w	r3, [sl, #264]	; 0x108
 8012cf8:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
 8012cfc:	f8ca 3158 	str.w	r3, [sl, #344]	; 0x158
 8012d00:	f8ca 3180 	str.w	r3, [sl, #384]	; 0x180
 8012d04:	f8ca 31a8 	str.w	r3, [sl, #424]	; 0x1a8
 8012d08:	f8ca 31d0 	str.w	r3, [sl, #464]	; 0x1d0
 8012d0c:	f8ca 31f8 	str.w	r3, [sl, #504]	; 0x1f8
 8012d10:	f50d 61da 	add.w	r1, sp, #1744	; 0x6d0
 8012d14:	2200      	movs	r2, #0
 8012d16:	2300      	movs	r3, #0
 8012d18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012d1c:	f7ed fed8 	bl	8000ad0 <__aeabi_dcmpeq>
 8012d20:	2800      	cmp	r0, #0
 8012d22:	d174      	bne.n	8012e0e <m_kalman_3gyro.isra.9.constprop.47+0x190e>
 8012d24:	eddd 7a27 	vldr	s15, [sp, #156]	; 0x9c
 8012d28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012d2a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8012d2e:	ed93 7a00 	vldr	s14, [r3]
 8012d32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d3a:	d568      	bpl.n	8012e0e <m_kalman_3gyro.isra.9.constprop.47+0x190e>
 8012d3c:	ed8a ba12 	vstr	s22, [sl, #72]	; 0x48
 8012d40:	edca ba15 	vstr	s23, [sl, #84]	; 0x54
 8012d44:	edca aa18 	vstr	s21, [sl, #96]	; 0x60
 8012d48:	edca da11 	vstr	s27, [sl, #68]	; 0x44
 8012d4c:	ed8a ea14 	vstr	s28, [sl, #80]	; 0x50
 8012d50:	ed8a 9a17 	vstr	s18, [sl, #92]	; 0x5c
 8012d54:	ed9d 0b20 	vldr	d0, [sp, #128]	; 0x80
 8012d58:	f005 fea2 	bl	8018aa0 <sqrt>
 8012d5c:	ec51 0b10 	vmov	r0, r1, d0
 8012d60:	f7ed ff46 	bl	8000bf0 <__aeabi_d2f>
 8012d64:	ed9a 5a11 	vldr	s10, [sl, #68]	; 0x44
 8012d68:	ed9a 6a17 	vldr	s12, [sl, #92]	; 0x5c
 8012d6c:	ed9a 4a14 	vldr	s8, [sl, #80]	; 0x50
 8012d70:	ed9a 7a18 	vldr	s14, [sl, #96]	; 0x60
 8012d74:	edda 6a12 	vldr	s13, [sl, #72]	; 0x48
 8012d78:	edda 7a15 	vldr	s15, [sl, #84]	; 0x54
 8012d7c:	9906      	ldr	r1, [sp, #24]
 8012d7e:	ee05 0a90 	vmov	s11, r0
 8012d82:	eec5 4a25 	vdiv.f32	s9, s10, s11
 8012d86:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012d88:	ee86 5a25 	vdiv.f32	s10, s12, s11
 8012d8c:	ee84 6a25 	vdiv.f32	s12, s8, s11
 8012d90:	ee67 3a24 	vmul.f32	s7, s14, s9
 8012d94:	ee66 5a85 	vmul.f32	s11, s13, s10
 8012d98:	ee27 4a85 	vmul.f32	s8, s15, s10
 8012d9c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8012da0:	ee66 6a86 	vmul.f32	s13, s13, s12
 8012da4:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8012da8:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8012dac:	ee37 7a44 	vsub.f32	s14, s14, s8
 8012db0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012db4:	edca 4a11 	vstr	s9, [sl, #68]	; 0x44
 8012db8:	ed8a 5a17 	vstr	s10, [sl, #92]	; 0x5c
 8012dbc:	edca 5a13 	vstr	s11, [sl, #76]	; 0x4c
 8012dc0:	ed8a 6a14 	vstr	s12, [sl, #80]	; 0x50
 8012dc4:	ed8a 7a10 	vstr	s14, [sl, #64]	; 0x40
 8012dc8:	edca 7a16 	vstr	s15, [sl, #88]	; 0x58
 8012dcc:	f7fa fa10 	bl	800d1f0 <m_dcm2q_eml>
 8012dd0:	f8dd 16fc 	ldr.w	r1, [sp, #1788]	; 0x6fc
 8012dd4:	2300      	movs	r3, #0
 8012dd6:	2201      	movs	r2, #1
 8012dd8:	700a      	strb	r2, [r1, #0]
 8012dda:	edca fa2b 	vstr	s31, [sl, #172]	; 0xac
 8012dde:	ed8a 8a2d 	vstr	s16, [sl, #180]	; 0xb4
 8012de2:	f8ca 30b8 	str.w	r3, [sl, #184]	; 0xb8
 8012de6:	f8ca 30bc 	str.w	r3, [sl, #188]	; 0xbc
 8012dea:	f8ca 30c0 	str.w	r3, [sl, #192]	; 0xc0
 8012dee:	f8ca 30dc 	str.w	r3, [sl, #220]	; 0xdc
 8012df2:	f8ca 30e0 	str.w	r3, [sl, #224]	; 0xe0
 8012df6:	f8ca 30e4 	str.w	r3, [sl, #228]	; 0xe4
 8012dfa:	f8ca 3100 	str.w	r3, [sl, #256]	; 0x100
 8012dfe:	f8ca 3104 	str.w	r3, [sl, #260]	; 0x104
 8012e02:	f8ca 3108 	str.w	r3, [sl, #264]	; 0x108
 8012e06:	f8ca 31a8 	str.w	r3, [sl, #424]	; 0x1a8
 8012e0a:	f8ca 31f8 	str.w	r3, [sl, #504]	; 0x1f8
 8012e0e:	ed9f 9a30 	vldr	s18, [pc, #192]	; 8012ed0 <m_kalman_3gyro.isra.9.constprop.47+0x19d0>
 8012e12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012e14:	9806      	ldr	r0, [sp, #24]
 8012e16:	ed8a 9a25 	vstr	s18, [sl, #148]	; 0x94
 8012e1a:	ed8a 9a26 	vstr	s18, [sl, #152]	; 0x98
 8012e1e:	ed8a 9a27 	vstr	s18, [sl, #156]	; 0x9c
 8012e22:	f7fa f97f 	bl	800d124 <m_q2dcm_eml>
 8012e26:	edda 7a2b 	vldr	s15, [sl, #172]	; 0xac
 8012e2a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012e2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012e32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012e36:	ee17 0a90 	vmov	r0, s15
 8012e3a:	f7ed fb8d 	bl	8000558 <__aeabi_f2d>
 8012e3e:	ec41 0b10 	vmov	d0, r0, r1
 8012e42:	f005 fe2d 	bl	8018aa0 <sqrt>
 8012e46:	ec51 0b10 	vmov	r0, r1, d0
 8012e4a:	f7ed fed1 	bl	8000bf0 <__aeabi_d2f>
 8012e4e:	ed9a 7a10 	vldr	s14, [sl, #64]	; 0x40
 8012e52:	ed9a 4a16 	vldr	s8, [sl, #88]	; 0x58
 8012e56:	ed9a 5a17 	vldr	s10, [sl, #92]	; 0x5c
 8012e5a:	edda 3a13 	vldr	s7, [sl, #76]	; 0x4c
 8012e5e:	edda 2a11 	vldr	s5, [sl, #68]	; 0x44
 8012e62:	edda 4a14 	vldr	s9, [sl, #80]	; 0x50
 8012e66:	edca fa22 	vstr	s31, [sl, #136]	; 0x88
 8012e6a:	ee07 0a90 	vmov	s15, r0
 8012e6e:	ee67 5a09 	vmul.f32	s11, s14, s18
 8012e72:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012e76:	ee25 3a09 	vmul.f32	s6, s10, s18
 8012e7a:	ee77 6a09 	vadd.f32	s13, s14, s18
 8012e7e:	ee24 5a09 	vmul.f32	s10, s8, s18
 8012e82:	ee27 7a84 	vmul.f32	s14, s15, s8
 8012e86:	ee62 2a89 	vmul.f32	s5, s5, s18
 8012e8a:	ee27 6aa3 	vmul.f32	s12, s15, s7
 8012e8e:	ee75 5a89 	vadd.f32	s11, s11, s18
 8012e92:	ee63 3a89 	vmul.f32	s7, s7, s18
 8012e96:	ee37 7a09 	vadd.f32	s14, s14, s18
 8012e9a:	ee35 5a09 	vadd.f32	s10, s10, s18
 8012e9e:	ee33 4a89 	vadd.f32	s8, s7, s18
 8012ea2:	ee72 5aa5 	vadd.f32	s11, s5, s11
 8012ea6:	edda 3a2b 	vldr	s7, [sl, #172]	; 0xac
 8012eaa:	ed8a aa23 	vstr	s20, [sl, #140]	; 0x8c
 8012eae:	ee33 5a05 	vadd.f32	s10, s6, s10
 8012eb2:	ee64 4a89 	vmul.f32	s9, s9, s18
 8012eb6:	ee36 6a09 	vadd.f32	s12, s12, s18
 8012eba:	ee37 7a03 	vadd.f32	s14, s14, s6
 8012ebe:	ed9a 3a12 	vldr	s6, [sl, #72]	; 0x48
 8012ec2:	e00d      	b.n	8012ee0 <m_kalman_3gyro.isra.9.constprop.47+0x19e0>
 8012ec4:	40a00000 	.word	0x40a00000
 8012ec8:	3f666666 	.word	0x3f666666
 8012ecc:	3f4ccccd 	.word	0x3f4ccccd
 8012ed0:	00000000 	.word	0x00000000
 8012ed4:	3e4ccccd 	.word	0x3e4ccccd
 8012ed8:	3f99999a 	.word	0x3f99999a
 8012edc:	3be56042 	.word	0x3be56042
 8012ee0:	ed8a 8a24 	vstr	s16, [sl, #144]	; 0x90
 8012ee4:	ee76 7aa2 	vadd.f32	s15, s13, s5
 8012ee8:	ee76 6a24 	vadd.f32	s13, s12, s9
 8012eec:	edda 2a18 	vldr	s5, [sl, #96]	; 0x60
 8012ef0:	ee35 6a83 	vadd.f32	s12, s11, s6
 8012ef4:	ee74 4a84 	vadd.f32	s9, s9, s8
 8012ef8:	ee23 3a83 	vmul.f32	s6, s7, s6
 8012efc:	ed9a 4a15 	vldr	s8, [sl, #84]	; 0x54
 8012f00:	ee77 7a83 	vadd.f32	s15, s15, s6
 8012f04:	ee74 4a84 	vadd.f32	s9, s9, s8
 8012f08:	ed9d 3a52 	vldr	s6, [sp, #328]	; 0x148
 8012f0c:	edca 7a82 	vstr	s15, [sl, #520]	; 0x208
 8012f10:	ee23 4a84 	vmul.f32	s8, s7, s8
 8012f14:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8012f18:	ee73 7a67 	vsub.f32	s15, s6, s15
 8012f1c:	ee37 7a23 	vadd.f32	s14, s14, s7
 8012f20:	eddd 3a55 	vldr	s7, [sp, #340]	; 0x154
 8012f24:	edca 7a19 	vstr	s15, [sl, #100]	; 0x64
 8012f28:	ee76 6a84 	vadd.f32	s13, s13, s8
 8012f2c:	ee75 5a22 	vadd.f32	s11, s10, s5
 8012f30:	ee73 3ac6 	vsub.f32	s7, s7, s12
 8012f34:	eddd 7a57 	vldr	s15, [sp, #348]	; 0x15c
 8012f38:	ed9d 6a54 	vldr	s12, [sp, #336]	; 0x150
 8012f3c:	ed9d 4a53 	vldr	s8, [sp, #332]	; 0x14c
 8012f40:	edca 6a83 	vstr	s13, [sl, #524]	; 0x20c
 8012f44:	ee34 4a66 	vsub.f32	s8, s8, s13
 8012f48:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8012f4c:	ee76 6a47 	vsub.f32	s13, s12, s14
 8012f50:	ed9d 5a56 	vldr	s10, [sp, #344]	; 0x158
 8012f54:	edda 7a2c 	vldr	s15, [sl, #176]	; 0xb0
 8012f58:	ed1f 6a21 	vldr	s12, [pc, #-132]	; 8012ed8 <m_kalman_3gyro.isra.9.constprop.47+0x19d8>
 8012f5c:	edca 3a1c 	vstr	s7, [sl, #112]	; 0x70
 8012f60:	ee75 4a64 	vsub.f32	s9, s10, s9
 8012f64:	eef4 7ac6 	vcmpe.f32	s15, s12
 8012f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f6c:	ed8a 4a1a 	vstr	s8, [sl, #104]	; 0x68
 8012f70:	edca 4a1d 	vstr	s9, [sl, #116]	; 0x74
 8012f74:	ed8a 7a84 	vstr	s14, [sl, #528]	; 0x210
 8012f78:	edca 6a1b 	vstr	s13, [sl, #108]	; 0x6c
 8012f7c:	edca 5a1e 	vstr	s11, [sl, #120]	; 0x78
 8012f80:	d506      	bpl.n	8012f90 <m_kalman_3gyro.isra.9.constprop.47+0x1a90>
 8012f82:	ed1f 7a2e 	vldr	s14, [pc, #-184]	; 8012ecc <m_kalman_3gyro.isra.9.constprop.47+0x19cc>
 8012f86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f8e:	dc01      	bgt.n	8012f94 <m_kalman_3gyro.isra.9.constprop.47+0x1a94>
 8012f90:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012f94:	ee7a 7a67 	vsub.f32	s15, s20, s15
 8012f98:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012f9a:	eef0 7ae7 	vabs.f32	s15, s15
 8012f9e:	ee37 9aa9 	vadd.f32	s18, s15, s19
 8012fa2:	edc3 7a00 	vstr	s15, [r3]
 8012fa6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012fa8:	a99d      	add	r1, sp, #628	; 0x274
 8012faa:	ed83 9a00 	vstr	s18, [r3]
 8012fae:	eeb0 0a49 	vmov.f32	s0, s18
 8012fb2:	a893      	add	r0, sp, #588	; 0x24c
 8012fb4:	f7fa facc 	bl	800d550 <m_b_interp1q_constrain>
 8012fb8:	a9a7      	add	r1, sp, #668	; 0x29c
 8012fba:	eeb0 8a40 	vmov.f32	s16, s0
 8012fbe:	a893      	add	r0, sp, #588	; 0x24c
 8012fc0:	eeb0 0a49 	vmov.f32	s0, s18
 8012fc4:	f7fa fac4 	bl	800d550 <m_b_interp1q_constrain>
 8012fc8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012fca:	ed9d ba58 	vldr	s22, [sp, #352]	; 0x160
 8012fce:	edd3 aa00 	vldr	s21, [r3]
 8012fd2:	eef4 aacb 	vcmpe.f32	s21, s22
 8012fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fda:	eeb0 9a40 	vmov.f32	s18, s0
 8012fde:	f201 83c8 	bhi.w	8014772 <m_kalman_3gyro.isra.9.constprop.47+0x3272>
 8012fe2:	ed9d aa5f 	vldr	s20, [sp, #380]	; 0x17c
 8012fe6:	ed5f 7a46 	vldr	s15, [pc, #-280]	; 8012ed0 <m_kalman_3gyro.isra.9.constprop.47+0x19d0>
 8012fea:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8012fec:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8012fee:	edca 7af5 	vstr	s15, [sl, #980]	; 0x3d4
 8012ff2:	eef0 6a67 	vmov.f32	s13, s15
 8012ff6:	eeb0 6a67 	vmov.f32	s12, s15
 8012ffa:	eef0 5a67 	vmov.f32	s11, s15
 8012ffe:	edca 7af6 	vstr	s15, [sl, #984]	; 0x3d8
 8013002:	edca 7af7 	vstr	s15, [sl, #988]	; 0x3dc
 8013006:	462e      	mov	r6, r5
 8013008:	f505 6387 	add.w	r3, r5, #1080	; 0x438
 801300c:	ed95 7a06 	vldr	s14, [r5, #24]
 8013010:	edd2 7a00 	vldr	s15, [r2]
 8013014:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013018:	3524      	adds	r5, #36	; 0x24
 801301a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 801301e:	320c      	adds	r2, #12
 8013020:	edca 5af5 	vstr	s11, [sl, #980]	; 0x3d4
 8013024:	ed15 7a02 	vldr	s14, [r5, #-8]
 8013028:	ed52 7a02 	vldr	s15, [r2, #-8]
 801302c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013030:	ee36 6a27 	vadd.f32	s12, s12, s15
 8013034:	ed8a 6af6 	vstr	s12, [sl, #984]	; 0x3d8
 8013038:	ed15 7a01 	vldr	s14, [r5, #-4]
 801303c:	ed52 7a01 	vldr	s15, [r2, #-4]
 8013040:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013044:	42ab      	cmp	r3, r5
 8013046:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801304a:	edca 6af7 	vstr	s13, [sl, #988]	; 0x3dc
 801304e:	d1dd      	bne.n	801300c <m_kalman_3gyro.isra.9.constprop.47+0x1b0c>
 8013050:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8013054:	ee85 5aa7 	vdiv.f32	s10, s11, s15
 8013058:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801305a:	f50a 6305 	add.w	r3, sl, #2128	; 0x850
 801305e:	eec6 5a27 	vdiv.f32	s11, s12, s15
 8013062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013066:	ed8a 5af5 	vstr	s10, [sl, #980]	; 0x3d4
 801306a:	edca 5af6 	vstr	s11, [sl, #984]	; 0x3d8
 801306e:	ed8a 7af7 	vstr	s14, [sl, #988]	; 0x3dc
 8013072:	681a      	ldr	r2, [r3, #0]
 8013074:	6859      	ldr	r1, [r3, #4]
 8013076:	625a      	str	r2, [r3, #36]	; 0x24
 8013078:	689a      	ldr	r2, [r3, #8]
 801307a:	6299      	str	r1, [r3, #40]	; 0x28
 801307c:	62da      	str	r2, [r3, #44]	; 0x2c
 801307e:	68d9      	ldr	r1, [r3, #12]
 8013080:	691a      	ldr	r2, [r3, #16]
 8013082:	6319      	str	r1, [r3, #48]	; 0x30
 8013084:	635a      	str	r2, [r3, #52]	; 0x34
 8013086:	6959      	ldr	r1, [r3, #20]
 8013088:	699a      	ldr	r2, [r3, #24]
 801308a:	6399      	str	r1, [r3, #56]	; 0x38
 801308c:	63da      	str	r2, [r3, #60]	; 0x3c
 801308e:	69d9      	ldr	r1, [r3, #28]
 8013090:	6a1a      	ldr	r2, [r3, #32]
 8013092:	6419      	str	r1, [r3, #64]	; 0x40
 8013094:	645a      	str	r2, [r3, #68]	; 0x44
 8013096:	3b24      	subs	r3, #36	; 0x24
 8013098:	4283      	cmp	r3, r0
 801309a:	d1ea      	bne.n	8013072 <m_kalman_3gyro.isra.9.constprop.47+0x1b72>
 801309c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801309e:	9915      	ldr	r1, [sp, #84]	; 0x54
 80130a0:	6813      	ldr	r3, [r2, #0]
 80130a2:	600b      	str	r3, [r1, #0]
 80130a4:	9908      	ldr	r1, [sp, #32]
 80130a6:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80130a8:	680b      	ldr	r3, [r1, #0]
 80130aa:	6003      	str	r3, [r0, #0]
 80130ac:	9807      	ldr	r0, [sp, #28]
 80130ae:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 80130b0:	6803      	ldr	r3, [r0, #0]
 80130b2:	6023      	str	r3, [r4, #0]
 80130b4:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80130b6:	6853      	ldr	r3, [r2, #4]
 80130b8:	6023      	str	r3, [r4, #0]
 80130ba:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 80130bc:	684b      	ldr	r3, [r1, #4]
 80130be:	6023      	str	r3, [r4, #0]
 80130c0:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 80130c2:	6843      	ldr	r3, [r0, #4]
 80130c4:	6023      	str	r3, [r4, #0]
 80130c6:	6893      	ldr	r3, [r2, #8]
 80130c8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80130ca:	6013      	str	r3, [r2, #0]
 80130cc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80130ce:	688b      	ldr	r3, [r1, #8]
 80130d0:	6013      	str	r3, [r2, #0]
 80130d2:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80130d4:	6883      	ldr	r3, [r0, #8]
 80130d6:	6013      	str	r3, [r2, #0]
 80130d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80130da:	2b02      	cmp	r3, #2
 80130dc:	f001 8674 	beq.w	8014dc8 <m_kalman_3gyro.isra.9.constprop.47+0x38c8>
 80130e0:	eef4 eaec 	vcmpe.f32	s29, s25
 80130e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130e8:	f340 80f9 	ble.w	80132de <m_kalman_3gyro.isra.9.constprop.47+0x1dde>
 80130ec:	eeb4 dae9 	vcmpe.f32	s26, s19
 80130f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130f4:	f340 80f3 	ble.w	80132de <m_kalman_3gyro.isra.9.constprop.47+0x1dde>
 80130f8:	eeb4 facc 	vcmpe.f32	s30, s24
 80130fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013100:	f340 80ed 	ble.w	80132de <m_kalman_3gyro.isra.9.constprop.47+0x1dde>
 8013104:	9b07      	ldr	r3, [sp, #28]
 8013106:	ed5f 7a8d 	vldr	s15, [pc, #-564]	; 8012ed4 <m_kalman_3gyro.isra.9.constprop.47+0x19d4>
 801310a:	ed93 7a00 	vldr	s14, [r3]
 801310e:	eeb0 7ac7 	vabs.f32	s14, s14
 8013112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801311a:	f140 80e0 	bpl.w	80132de <m_kalman_3gyro.isra.9.constprop.47+0x1dde>
 801311e:	ed93 7a01 	vldr	s14, [r3, #4]
 8013122:	eeb0 7ac7 	vabs.f32	s14, s14
 8013126:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801312a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801312e:	f140 80d6 	bpl.w	80132de <m_kalman_3gyro.isra.9.constprop.47+0x1dde>
 8013132:	ed93 7a02 	vldr	s14, [r3, #8]
 8013136:	eeb0 7ac7 	vabs.f32	s14, s14
 801313a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801313e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013142:	f140 80cc 	bpl.w	80132de <m_kalman_3gyro.isra.9.constprop.47+0x1dde>
 8013146:	9a08      	ldr	r2, [sp, #32]
 8013148:	ed5f 7a9d 	vldr	s15, [pc, #-628]	; 8012ed8 <m_kalman_3gyro.isra.9.constprop.47+0x19d8>
 801314c:	ed92 7a00 	vldr	s14, [r2]
 8013150:	eeb0 7ac7 	vabs.f32	s14, s14
 8013154:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801315c:	f140 80bf 	bpl.w	80132de <m_kalman_3gyro.isra.9.constprop.47+0x1dde>
 8013160:	ed92 7a01 	vldr	s14, [r2, #4]
 8013164:	eeb0 7ac7 	vabs.f32	s14, s14
 8013168:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801316c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013170:	f140 80b5 	bpl.w	80132de <m_kalman_3gyro.isra.9.constprop.47+0x1dde>
 8013174:	ed92 7a02 	vldr	s14, [r2, #8]
 8013178:	eeb0 7ac7 	vabs.f32	s14, s14
 801317c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013184:	f140 80ab 	bpl.w	80132de <m_kalman_3gyro.isra.9.constprop.47+0x1dde>
 8013188:	f8da 3450 	ldr.w	r3, [sl, #1104]	; 0x450
 801318c:	ed1f 5aad 	vldr	s10, [pc, #-692]	; 8012edc <m_kalman_3gyro.isra.9.constprop.47+0x19dc>
 8013190:	2b09      	cmp	r3, #9
 8013192:	bfc8      	it	gt
 8013194:	220a      	movgt	r2, #10
 8013196:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8013198:	bfd8      	it	le
 801319a:	2205      	movle	r2, #5
 801319c:	e003      	b.n	80131a6 <m_kalman_3gyro.isra.9.constprop.47+0x1ca6>
 801319e:	9931      	ldr	r1, [sp, #196]	; 0xc4
 80131a0:	4299      	cmp	r1, r3
 80131a2:	f002 810d 	beq.w	80153c0 <m_kalman_3gyro.isra.9.constprop.47+0x3ec0>
 80131a6:	ecf3 5a01 	vldmia	r3!, {s11}
 80131aa:	ed93 7a08 	vldr	s14, [r3, #32]
 80131ae:	ed93 6a11 	vldr	s12, [r3, #68]	; 0x44
 80131b2:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 80131b6:	eef4 5ac7 	vcmpe.f32	s11, s14
 80131ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131be:	bf54      	ite	pl
 80131c0:	eef0 7a65 	vmovpl.f32	s15, s11
 80131c4:	eef0 7a47 	vmovmi.f32	s15, s14
 80131c8:	eeb4 6a67 	vcmp.f32	s12, s15
 80131cc:	bfd8      	it	le
 80131ce:	eeb0 7a65 	vmovle.f32	s14, s11
 80131d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131d6:	eeb4 6ac7 	vcmpe.f32	s12, s14
 80131da:	bfc8      	it	gt
 80131dc:	eef0 7a46 	vmovgt.f32	s15, s12
 80131e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131e4:	bf58      	it	pl
 80131e6:	eeb0 6a47 	vmovpl.f32	s12, s14
 80131ea:	eef4 6a67 	vcmp.f32	s13, s15
 80131ee:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 80131f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131f6:	eef4 6ac6 	vcmpe.f32	s13, s12
 80131fa:	bfc8      	it	gt
 80131fc:	eef0 7a66 	vmovgt.f32	s15, s13
 8013200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013204:	bf58      	it	pl
 8013206:	eef0 6a46 	vmovpl.f32	s13, s12
 801320a:	eeb4 7a67 	vcmp.f32	s14, s15
 801320e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013212:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013216:	bfc8      	it	gt
 8013218:	eef0 7a47 	vmovgt.f32	s15, s14
 801321c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013220:	bf58      	it	pl
 8013222:	eeb0 7a66 	vmovpl.f32	s14, s13
 8013226:	2a05      	cmp	r2, #5
 8013228:	d051      	beq.n	80132ce <m_kalman_3gyro.isra.9.constprop.47+0x1dce>
 801322a:	edd3 5a2c 	vldr	s11, [r3, #176]	; 0xb0
 801322e:	ed93 6a35 	vldr	s12, [r3, #212]	; 0xd4
 8013232:	edd3 6a3e 	vldr	s13, [r3, #248]	; 0xf8
 8013236:	eef4 5a67 	vcmp.f32	s11, s15
 801323a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801323e:	eef4 5ac7 	vcmpe.f32	s11, s14
 8013242:	bfc8      	it	gt
 8013244:	eef0 7a65 	vmovgt.f32	s15, s11
 8013248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801324c:	bf58      	it	pl
 801324e:	eef0 5a47 	vmovpl.f32	s11, s14
 8013252:	eeb4 6a67 	vcmp.f32	s12, s15
 8013256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801325a:	eeb4 6ae5 	vcmpe.f32	s12, s11
 801325e:	bfc8      	it	gt
 8013260:	eef0 7a46 	vmovgt.f32	s15, s12
 8013264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013268:	bf58      	it	pl
 801326a:	eeb0 6a65 	vmovpl.f32	s12, s11
 801326e:	eef4 6a67 	vcmp.f32	s13, s15
 8013272:	ed93 7a47 	vldr	s14, [r3, #284]	; 0x11c
 8013276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801327a:	eef4 6ac6 	vcmpe.f32	s13, s12
 801327e:	bfc8      	it	gt
 8013280:	eef0 7a66 	vmovgt.f32	s15, s13
 8013284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013288:	bf58      	it	pl
 801328a:	eef0 6a46 	vmovpl.f32	s13, s12
 801328e:	eeb4 7a67 	vcmp.f32	s14, s15
 8013292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013296:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801329a:	bfc8      	it	gt
 801329c:	eef0 7a47 	vmovgt.f32	s15, s14
 80132a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132a4:	bf58      	it	pl
 80132a6:	eeb0 7a66 	vmovpl.f32	s14, s13
 80132aa:	2a0a      	cmp	r2, #10
 80132ac:	d10f      	bne.n	80132ce <m_kalman_3gyro.isra.9.constprop.47+0x1dce>
 80132ae:	edd3 6a50 	vldr	s13, [r3, #320]	; 0x140
 80132b2:	eef4 6a67 	vcmp.f32	s13, s15
 80132b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132ba:	eef4 6ac7 	vcmpe.f32	s13, s14
 80132be:	bfc8      	it	gt
 80132c0:	eef0 7a66 	vmovgt.f32	s15, s13
 80132c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132c8:	bf48      	it	mi
 80132ca:	eeb0 7a66 	vmovmi.f32	s14, s13
 80132ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80132d2:	eef4 7ac5 	vcmpe.f32	s15, s10
 80132d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132da:	f77f af60 	ble.w	801319e <m_kalman_3gyro.isra.9.constprop.47+0x1c9e>
 80132de:	2300      	movs	r3, #0
 80132e0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80132e2:	2900      	cmp	r1, #0
 80132e4:	f001 8225 	beq.w	8014732 <m_kalman_3gyro.isra.9.constprop.47+0x3232>
 80132e8:	f001 02fd 	and.w	r2, r1, #253	; 0xfd
 80132ec:	2a01      	cmp	r2, #1
 80132ee:	f002 80f4 	beq.w	80154da <m_kalman_3gyro.isra.9.constprop.47+0x3fda>
 80132f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80132f4:	2b02      	cmp	r3, #2
 80132f6:	f002 80ee 	beq.w	80154d6 <m_kalman_3gyro.isra.9.constprop.47+0x3fd6>
 80132fa:	2b04      	cmp	r3, #4
 80132fc:	f001 824a 	beq.w	8014794 <m_kalman_3gyro.isra.9.constprop.47+0x3294>
 8013300:	f8da 20a4 	ldr.w	r2, [sl, #164]	; 0xa4
 8013304:	f8da 30a8 	ldr.w	r3, [sl, #168]	; 0xa8
 8013308:	f8ca 2080 	str.w	r2, [sl, #128]	; 0x80
 801330c:	f8ca 3084 	str.w	r3, [sl, #132]	; 0x84
 8013310:	f8da 20a0 	ldr.w	r2, [sl, #160]	; 0xa0
 8013314:	f8ca 207c 	str.w	r2, [sl, #124]	; 0x7c
 8013318:	2300      	movs	r3, #0
 801331a:	ac81      	add	r4, sp, #516	; 0x204
 801331c:	f8ca 3450 	str.w	r3, [sl, #1104]	; 0x450
 8013320:	f8ca 345c 	str.w	r3, [sl, #1116]	; 0x45c
 8013324:	eddf 7ae6 	vldr	s15, [pc, #920]	; 80136c0 <m_kalman_3gyro.isra.9.constprop.47+0x21c0>
 8013328:	eeb4 9ae7 	vcmpe.f32	s18, s15
 801332c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013330:	f281 81f4 	bge.w	801471c <m_kalman_3gyro.isra.9.constprop.47+0x321c>
 8013334:	f8da 2458 	ldr.w	r2, [sl, #1112]	; 0x458
 8013338:	2a31      	cmp	r2, #49	; 0x31
 801333a:	dc10      	bgt.n	801335e <m_kalman_3gyro.isra.9.constprop.47+0x1e5e>
 801333c:	2300      	movs	r3, #0
 801333e:	2a00      	cmp	r2, #0
 8013340:	f88a 3202 	strb.w	r3, [sl, #514]	; 0x202
 8013344:	f88a 3203 	strb.w	r3, [sl, #515]	; 0x203
 8013348:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 801334c:	f102 0301 	add.w	r3, r2, #1
 8013350:	dd03      	ble.n	801335a <m_kalman_3gyro.isra.9.constprop.47+0x1e5a>
 8013352:	2b00      	cmp	r3, #0
 8013354:	bfd8      	it	le
 8013356:	f06f 4300 	mvnle.w	r3, #2147483648	; 0x80000000
 801335a:	f8ca 3458 	str.w	r3, [sl, #1112]	; 0x458
 801335e:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8013362:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013364:	ed93 6a08 	vldr	s12, [r3, #32]
 8013368:	ed93 5a06 	vldr	s10, [r3, #24]
 801336c:	edd3 5a07 	vldr	s11, [r3, #28]
 8013370:	ed93 2a00 	vldr	s4, [r3]
 8013374:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013376:	edd3 2a01 	vldr	s5, [r3, #4]
 801337a:	ed93 7a02 	vldr	s14, [r3, #8]
 801337e:	ed93 3a03 	vldr	s6, [r3, #12]
 8013382:	edd3 3a04 	vldr	s7, [r3, #16]
 8013386:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 801338a:	edd3 4a05 	vldr	s9, [r3, #20]
 801338e:	ed9f 4acd 	vldr	s8, [pc, #820]	; 80136c4 <m_kalman_3gyro.isra.9.constprop.47+0x21c4>
 8013392:	ee25 5a09 	vmul.f32	s10, s10, s18
 8013396:	ee65 5a89 	vmul.f32	s11, s11, s18
 801339a:	ee26 9a09 	vmul.f32	s18, s12, s18
 801339e:	ed83 5a06 	vstr	s10, [r3, #24]
 80133a2:	edc3 5a07 	vstr	s11, [r3, #28]
 80133a6:	ed83 9a08 	vstr	s18, [r3, #32]
 80133aa:	edd2 6a00 	vldr	s13, [r2]
 80133ae:	ed91 6a00 	vldr	s12, [r1]
 80133b2:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 80133b6:	ee66 6a82 	vmul.f32	s13, s13, s4
 80133ba:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80133be:	ee66 6a86 	vmul.f32	s13, s13, s12
 80133c2:	ee78 5a25 	vadd.f32	s11, s16, s11
 80133c6:	edc3 6a00 	vstr	s13, [r3]
 80133ca:	edd2 6a00 	vldr	s13, [r2]
 80133ce:	ed91 6a00 	vldr	s12, [r1]
 80133d2:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 80133d6:	ee66 6aa2 	vmul.f32	s13, s13, s5
 80133da:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 80133de:	ee66 6a86 	vmul.f32	s13, s13, s12
 80133e2:	ee85 6a25 	vdiv.f32	s12, s10, s11
 80133e6:	edc3 6a01 	vstr	s13, [r3, #4]
 80133ea:	edd2 5a00 	vldr	s11, [r2]
 80133ee:	edd1 6a00 	vldr	s13, [r1]
 80133f2:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 80133f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80133f8:	ee27 7a25 	vmul.f32	s14, s14, s11
 80133fc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013400:	ee27 7a26 	vmul.f32	s14, s14, s13
 8013404:	ee67 7a88 	vmul.f32	s15, s15, s16
 8013408:	ed83 7a02 	vstr	s14, [r3, #8]
 801340c:	edd2 6a00 	vldr	s13, [r2]
 8013410:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8013414:	ee63 6a26 	vmul.f32	s13, s6, s13
 8013418:	eeb4 6a44 	vcmp.f32	s12, s8
 801341c:	edc3 6a03 	vstr	s13, [r3, #12]
 8013420:	ed92 7a00 	vldr	s14, [r2]
 8013424:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8013428:	ee23 7a87 	vmul.f32	s14, s7, s14
 801342c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013430:	ed83 7a04 	vstr	s14, [r3, #16]
 8013434:	ed92 7a00 	vldr	s14, [r2]
 8013438:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 801343c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 8013440:	ee64 7a87 	vmul.f32	s15, s9, s14
 8013444:	bf48      	it	mi
 8013446:	eeb0 6a44 	vmovmi.f32	s12, s8
 801344a:	edc3 7a05 	vstr	s15, [r3, #20]
 801344e:	f8dd 36bc 	ldr.w	r3, [sp, #1724]	; 0x6bc
 8013452:	edd3 7a06 	vldr	s15, [r3, #24]
 8013456:	ee67 7a86 	vmul.f32	s15, s15, s12
 801345a:	edc3 7a06 	vstr	s15, [r3, #24]
 801345e:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8013462:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8013466:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801346a:	ee67 7a88 	vmul.f32	s15, s15, s16
 801346e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
 8013472:	f8dd 36bc 	ldr.w	r3, [sp, #1724]	; 0x6bc
 8013476:	edd3 7a07 	vldr	s15, [r3, #28]
 801347a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801347e:	edc3 7a07 	vstr	s15, [r3, #28]
 8013482:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8013486:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 801348a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801348c:	ed93 7a00 	vldr	s14, [r3]
 8013490:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8013494:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013498:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
 801349c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d041      	beq.n	8013526 <m_kalman_3gyro.isra.9.constprop.47+0x2026>
 80134a2:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 80134a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80134aa:	ee67 7a88 	vmul.f32	s15, s15, s16
 80134ae:	edc3 7a03 	vstr	s15, [r3, #12]
 80134b2:	f8dd 36bc 	ldr.w	r3, [sp, #1724]	; 0x6bc
 80134b6:	edd3 7a00 	vldr	s15, [r3]
 80134ba:	ee67 7a86 	vmul.f32	s15, s15, s12
 80134be:	edc3 7a00 	vstr	s15, [r3]
 80134c2:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 80134c6:	edd3 7a04 	vldr	s15, [r3, #16]
 80134ca:	ee67 7a88 	vmul.f32	s15, s15, s16
 80134ce:	edc3 7a04 	vstr	s15, [r3, #16]
 80134d2:	f8dd 36bc 	ldr.w	r3, [sp, #1724]	; 0x6bc
 80134d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80134da:	ee67 7a86 	vmul.f32	s15, s15, s12
 80134de:	edc3 7a01 	vstr	s15, [r3, #4]
 80134e2:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 80134e6:	edd3 7a05 	vldr	s15, [r3, #20]
 80134ea:	ee67 7a88 	vmul.f32	s15, s15, s16
 80134ee:	edc3 7a05 	vstr	s15, [r3, #20]
 80134f2:	f8dd 36bc 	ldr.w	r3, [sp, #1724]	; 0x6bc
 80134f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80134fa:	ee67 7a86 	vmul.f32	s15, s15, s12
 80134fe:	edc3 7a02 	vstr	s15, [r3, #8]
 8013502:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8013506:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 801350a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801350e:	ee27 8a88 	vmul.f32	s16, s15, s16
 8013512:	ed83 8a0a 	vstr	s16, [r3, #40]	; 0x28
 8013516:	f8dd 36bc 	ldr.w	r3, [sp, #1724]	; 0x6bc
 801351a:	edd3 7a07 	vldr	s15, [r3, #28]
 801351e:	ee27 6a86 	vmul.f32	s12, s15, s12
 8013522:	ed83 6a07 	vstr	s12, [r3, #28]
 8013526:	f8dd 36bc 	ldr.w	r3, [sp, #1724]	; 0x6bc
 801352a:	edda 2a2e 	vldr	s5, [sl, #184]	; 0xb8
 801352e:	edd3 7a00 	vldr	s15, [r3]
 8013532:	f8dd 26bc 	ldr.w	r2, [sp, #1724]	; 0x6bc
 8013536:	ed9a 3a38 	vldr	s6, [sl, #224]	; 0xe0
 801353a:	edda 3a42 	vldr	s7, [sl, #264]	; 0x108
 801353e:	ed9a 4a4c 	vldr	s8, [sl, #304]	; 0x130
 8013542:	edda 4a56 	vldr	s9, [sl, #344]	; 0x158
 8013546:	ed9a 2a60 	vldr	s4, [sl, #384]	; 0x180
 801354a:	edda 5a6a 	vldr	s11, [sl, #424]	; 0x1a8
 801354e:	ed9a 6a74 	vldr	s12, [sl, #464]	; 0x1d0
 8013552:	ed9d 5a54 	vldr	s10, [sp, #336]	; 0x150
 8013556:	ed9d 7a53 	vldr	s14, [sp, #332]	; 0x14c
 801355a:	edda 6a7e 	vldr	s13, [sl, #504]	; 0x1f8
 801355e:	ed84 7a06 	vstr	s14, [r4, #24]
 8013562:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013566:	2300      	movs	r3, #0
 8013568:	ee72 7aa7 	vadd.f32	s15, s5, s15
 801356c:	eef1 2a45 	vneg.f32	s5, s10
 8013570:	edca 7a2e 	vstr	s15, [sl, #184]	; 0xb8
 8013574:	edd2 7a01 	vldr	s15, [r2, #4]
 8013578:	6023      	str	r3, [r4, #0]
 801357a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801357e:	edc4 2a03 	vstr	s5, [r4, #12]
 8013582:	ee73 7a27 	vadd.f32	s15, s6, s15
 8013586:	eeb1 7a47 	vneg.f32	s14, s14
 801358a:	edca 7a38 	vstr	s15, [sl, #224]	; 0xe0
 801358e:	edd2 7a02 	vldr	s15, [r2, #8]
 8013592:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013596:	ee73 7aa7 	vadd.f32	s15, s7, s15
 801359a:	edca 7a42 	vstr	s15, [sl, #264]	; 0x108
 801359e:	edd2 7a03 	vldr	s15, [r2, #12]
 80135a2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80135a6:	ee74 7a27 	vadd.f32	s15, s8, s15
 80135aa:	edca 7a4c 	vstr	s15, [sl, #304]	; 0x130
 80135ae:	edd2 7a04 	vldr	s15, [r2, #16]
 80135b2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80135b6:	ee74 7aa7 	vadd.f32	s15, s9, s15
 80135ba:	edca 7a56 	vstr	s15, [sl, #344]	; 0x158
 80135be:	edd2 7a05 	vldr	s15, [r2, #20]
 80135c2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80135c6:	ee72 7a27 	vadd.f32	s15, s4, s15
 80135ca:	edca 7a60 	vstr	s15, [sl, #384]	; 0x180
 80135ce:	edd2 7a06 	vldr	s15, [r2, #24]
 80135d2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80135d6:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80135da:	edca 7a6a 	vstr	s15, [sl, #424]	; 0x1a8
 80135de:	edd2 7a07 	vldr	s15, [r2, #28]
 80135e2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80135e6:	ee76 7a27 	vadd.f32	s15, s12, s15
 80135ea:	edca 7a74 	vstr	s15, [sl, #464]	; 0x1d0
 80135ee:	edd2 7a08 	vldr	s15, [r2, #32]
 80135f2:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
 80135f6:	eddd 5a52 	vldr	s11, [sp, #328]	; 0x148
 80135fa:	ed9d 6a57 	vldr	s12, [sp, #348]	; 0x15c
 80135fe:	ed84 5a01 	vstr	s10, [r4, #4]
 8013602:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013606:	eeb1 4a65 	vneg.f32	s8, s11
 801360a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801360e:	eef1 4a46 	vneg.f32	s9, s12
 8013612:	edca 7a7e 	vstr	s15, [sl, #504]	; 0x1f8
 8013616:	7812      	ldrb	r2, [r2, #0]
 8013618:	f88a 21fc 	strb.w	r2, [sl, #508]	; 0x1fc
 801361c:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
 8013620:	eddd 6a55 	vldr	s13, [sp, #340]	; 0x154
 8013624:	7812      	ldrb	r2, [r2, #0]
 8013626:	f88a 21fd 	strb.w	r2, [sl, #509]	; 0x1fd
 801362a:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
 801362e:	eddd 7a56 	vldr	s15, [sp, #344]	; 0x158
 8013632:	7812      	ldrb	r2, [r2, #0]
 8013634:	f88a 21fe 	strb.w	r2, [sl, #510]	; 0x1fe
 8013638:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
 801363c:	ed84 7a02 	vstr	s14, [r4, #8]
 8013640:	7852      	ldrb	r2, [r2, #1]
 8013642:	f88a 21ff 	strb.w	r2, [sl, #511]	; 0x1ff
 8013646:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
 801364a:	6123      	str	r3, [r4, #16]
 801364c:	7852      	ldrb	r2, [r2, #1]
 801364e:	f88a 2200 	strb.w	r2, [sl, #512]	; 0x200
 8013652:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
 8013656:	6223      	str	r3, [r4, #32]
 8013658:	7852      	ldrb	r2, [r2, #1]
 801365a:	938a      	str	r3, [sp, #552]	; 0x228
 801365c:	f88a 2201 	strb.w	r2, [sl, #513]	; 0x201
 8013660:	edc4 5a05 	vstr	s11, [r4, #20]
 8013664:	ed84 4a07 	vstr	s8, [r4, #28]
 8013668:	edcd 4a8d 	vstr	s9, [sp, #564]	; 0x234
 801366c:	ed8d 6a8b 	vstr	s12, [sp, #556]	; 0x22c
 8013670:	938e      	str	r3, [sp, #568]	; 0x238
 8013672:	9392      	str	r3, [sp, #584]	; 0x248
 8013674:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013676:	edcd 6a8f 	vstr	s13, [sp, #572]	; 0x23c
 801367a:	eeb1 5a66 	vneg.f32	s10, s13
 801367e:	eeb1 7a67 	vneg.f32	s14, s15
 8013682:	ed8d 5a91 	vstr	s10, [sp, #580]	; 0x244
 8013686:	edcd 7a90 	vstr	s15, [sp, #576]	; 0x240
 801368a:	ed8d 7a8c 	vstr	s14, [sp, #560]	; 0x230
 801368e:	b1fb      	cbz	r3, 80136d0 <m_kalman_3gyro.isra.9.constprop.47+0x21d0>
 8013690:	f8dd 36c8 	ldr.w	r3, [sp, #1736]	; 0x6c8
 8013694:	785b      	ldrb	r3, [r3, #1]
 8013696:	b1db      	cbz	r3, 80136d0 <m_kalman_3gyro.isra.9.constprop.47+0x21d0>
 8013698:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801369a:	ed93 7a00 	vldr	s14, [r3]
 801369e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80136a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80136a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136aa:	bfd4      	ite	le
 80136ac:	2301      	movle	r3, #1
 80136ae:	2300      	movgt	r3, #0
 80136b0:	f88a 31ff 	strb.w	r3, [sl, #511]	; 0x1ff
 80136b4:	f88a 3200 	strb.w	r3, [sl, #512]	; 0x200
 80136b8:	f88a 3201 	strb.w	r3, [sl, #513]	; 0x201
 80136bc:	e008      	b.n	80136d0 <m_kalman_3gyro.isra.9.constprop.47+0x21d0>
 80136be:	bf00      	nop
 80136c0:	42480000 	.word	0x42480000
 80136c4:	3c23d70a 	.word	0x3c23d70a
 80136c8:	3e4ccccd 	.word	0x3e4ccccd
 80136cc:	3ecccccd 	.word	0x3ecccccd
 80136d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80136d2:	edd3 7a00 	vldr	s15, [r3]
 80136d6:	eef4 7ae8 	vcmpe.f32	s15, s17
 80136da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136de:	f2c1 8004 	blt.w	80146ea <m_kalman_3gyro.isra.9.constprop.47+0x31ea>
 80136e2:	f50d 63db 	add.w	r3, sp, #1752	; 0x6d8
 80136e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80136ea:	2200      	movs	r2, #0
 80136ec:	2300      	movs	r3, #0
 80136ee:	f7ed fa17 	bl	8000b20 <__aeabi_dcmpgt>
 80136f2:	2800      	cmp	r0, #0
 80136f4:	f000 87f9 	beq.w	80146ea <m_kalman_3gyro.isra.9.constprop.47+0x31ea>
 80136f8:	2300      	movs	r3, #0
 80136fa:	f88a 31fc 	strb.w	r3, [sl, #508]	; 0x1fc
 80136fe:	f88a 31fd 	strb.w	r3, [sl, #509]	; 0x1fd
 8013702:	f88a 31fe 	strb.w	r3, [sl, #510]	; 0x1fe
 8013706:	edda 7a24 	vldr	s15, [sl, #144]	; 0x90
 801370a:	f88a 3207 	strb.w	r3, [sl, #519]	; 0x207
 801370e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8013712:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801371a:	f88a 3205 	strb.w	r3, [sl, #517]	; 0x205
 801371e:	dc06      	bgt.n	801372e <m_kalman_3gyro.isra.9.constprop.47+0x222e>
 8013720:	ed1f 7a17 	vldr	s14, [pc, #-92]	; 80136c8 <m_kalman_3gyro.isra.9.constprop.47+0x21c8>
 8013724:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801372c:	d50a      	bpl.n	8013744 <m_kalman_3gyro.isra.9.constprop.47+0x2244>
 801372e:	2300      	movs	r3, #0
 8013730:	f88a 31fc 	strb.w	r3, [sl, #508]	; 0x1fc
 8013734:	f88a 31fd 	strb.w	r3, [sl, #509]	; 0x1fd
 8013738:	f88a 31fe 	strb.w	r3, [sl, #510]	; 0x1fe
 801373c:	f88a 3205 	strb.w	r3, [sl, #517]	; 0x205
 8013740:	f88a 3207 	strb.w	r3, [sl, #519]	; 0x207
 8013744:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8013748:	ee77 7ae8 	vsub.f32	s15, s15, s17
 801374c:	eef0 7ae7 	vabs.f32	s15, s15
 8013750:	ee17 0a90 	vmov	r0, s15
 8013754:	f7ec ff00 	bl	8000558 <__aeabi_f2d>
 8013758:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 801375c:	e9cd 0100 	strd	r0, r1, [sp]
 8013760:	6818      	ldr	r0, [r3, #0]
 8013762:	f7ec fef9 	bl	8000558 <__aeabi_f2d>
 8013766:	ed9d 1b00 	vldr	d1, [sp]
 801376a:	ec41 0b10 	vmov	d0, r0, r1
 801376e:	f004 fe7b 	bl	8018468 <fmax>
 8013772:	ec51 0b10 	vmov	r0, r1, d0
 8013776:	f7ed fa3b 	bl	8000bf0 <__aeabi_d2f>
 801377a:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 801377e:	6018      	str	r0, [r3, #0]
 8013780:	6058      	str	r0, [r3, #4]
 8013782:	6098      	str	r0, [r3, #8]
 8013784:	edda 7a23 	vldr	s15, [sl, #140]	; 0x8c
 8013788:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801378c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013794:	f300 879c 	bgt.w	80146d0 <m_kalman_3gyro.isra.9.constprop.47+0x31d0>
 8013798:	ed1f 7a34 	vldr	s14, [pc, #-208]	; 80136cc <m_kalman_3gyro.isra.9.constprop.47+0x21cc>
 801379c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80137a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137a4:	f100 8794 	bmi.w	80146d0 <m_kalman_3gyro.isra.9.constprop.47+0x31d0>
 80137a8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80137aa:	ee37 8ae8 	vsub.f32	s16, s15, s17
 80137ae:	f7ec fed3 	bl	8000558 <__aeabi_f2d>
 80137b2:	eef0 7ac8 	vabs.f32	s15, s16
 80137b6:	e9cd 0100 	strd	r0, r1, [sp]
 80137ba:	ee17 0a90 	vmov	r0, s15
 80137be:	f7ec fecb 	bl	8000558 <__aeabi_f2d>
 80137c2:	ed9d 1b00 	vldr	d1, [sp]
 80137c6:	ec41 0b10 	vmov	d0, r0, r1
 80137ca:	f004 fe4d 	bl	8018468 <fmax>
 80137ce:	ec51 0b10 	vmov	r0, r1, d0
 80137d2:	f7ed fa0d 	bl	8000bf0 <__aeabi_d2f>
 80137d6:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 80137da:	ed93 7a03 	vldr	s14, [r3, #12]
 80137de:	6298      	str	r0, [r3, #40]	; 0x28
 80137e0:	ee68 7a08 	vmul.f32	s15, s16, s16
 80137e4:	ee67 6a07 	vmul.f32	s13, s14, s14
 80137e8:	eef4 7ae6 	vcmpe.f32	s15, s13
 80137ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137f0:	dd14      	ble.n	801381c <m_kalman_3gyro.isra.9.constprop.47+0x231c>
 80137f2:	eef4 7ae8 	vcmpe.f32	s15, s17
 80137f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137fa:	dd0f      	ble.n	801381c <m_kalman_3gyro.isra.9.constprop.47+0x231c>
 80137fc:	ed93 6a04 	vldr	s12, [r3, #16]
 8013800:	edd3 6a05 	vldr	s13, [r3, #20]
 8013804:	ee27 7a87 	vmul.f32	s14, s15, s14
 8013808:	ee26 6a27 	vmul.f32	s12, s12, s15
 801380c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013810:	ed83 7a03 	vstr	s14, [r3, #12]
 8013814:	ed83 6a04 	vstr	s12, [r3, #16]
 8013818:	edc3 7a05 	vstr	s15, [r3, #20]
 801381c:	4b25      	ldr	r3, [pc, #148]	; (80138b4 <m_kalman_3gyro.isra.9.constprop.47+0x23b4>)
 801381e:	edd3 7a00 	vldr	s15, [r3]
 8013822:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8013826:	eef4 7ac7 	vcmpe.f32	s15, s14
 801382a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801382e:	f341 8189 	ble.w	8014b44 <m_kalman_3gyro.isra.9.constprop.47+0x3644>
 8013832:	2300      	movs	r3, #0
 8013834:	f8dd 26b8 	ldr.w	r2, [sp, #1720]	; 0x6b8
 8013838:	f88a 31fc 	strb.w	r3, [sl, #508]	; 0x1fc
 801383c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8013840:	f88a 31fd 	strb.w	r3, [sl, #509]	; 0x1fd
 8013844:	f88a 31fe 	strb.w	r3, [sl, #510]	; 0x1fe
 8013848:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 801384c:	ed92 6a09 	vldr	s12, [r2, #36]	; 0x24
 8013850:	edd2 6a0b 	vldr	s13, [r2, #44]	; 0x2c
 8013854:	ee37 7a25 	vadd.f32	s14, s14, s11
 8013858:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 801385c:	ee26 6a07 	vmul.f32	s12, s12, s14
 8013860:	ee26 7a87 	vmul.f32	s14, s13, s14
 8013864:	eef4 7ae5 	vcmpe.f32	s15, s11
 8013868:	ed82 6a09 	vstr	s12, [r2, #36]	; 0x24
 801386c:	ed82 7a0b 	vstr	s14, [r2, #44]	; 0x2c
 8013870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013874:	bfc4      	itt	gt
 8013876:	f88a 3205 	strbgt.w	r3, [sl, #517]	; 0x205
 801387a:	f88a 3207 	strbgt.w	r3, [sl, #519]	; 0x207
 801387e:	f89a 38ae 	ldrb.w	r3, [sl, #2222]	; 0x8ae
 8013882:	2b0e      	cmp	r3, #14
 8013884:	d802      	bhi.n	801388c <m_kalman_3gyro.isra.9.constprop.47+0x238c>
 8013886:	3305      	adds	r3, #5
 8013888:	f88a 38ae 	strb.w	r3, [sl, #2222]	; 0x8ae
 801388c:	f20a 12fb 	addw	r2, sl, #507	; 0x1fb
 8013890:	9207      	str	r2, [sp, #28]
 8013892:	f10a 0264 	add.w	r2, sl, #100	; 0x64
 8013896:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 801389a:	9202      	str	r2, [sp, #8]
 801389c:	aa75      	add	r2, sp, #468	; 0x1d4
 801389e:	9304      	str	r3, [sp, #16]
 80138a0:	9205      	str	r2, [sp, #20]
 80138a2:	ab8a      	add	r3, sp, #552	; 0x228
 80138a4:	2200      	movs	r2, #0
 80138a6:	461f      	mov	r7, r3
 80138a8:	46a0      	mov	r8, r4
 80138aa:	9200      	str	r2, [sp, #0]
 80138ac:	ed9f 8a02 	vldr	s16, [pc, #8]	; 80138b8 <m_kalman_3gyro.isra.9.constprop.47+0x23b8>
 80138b0:	4613      	mov	r3, r2
 80138b2:	e02e      	b.n	8013912 <m_kalman_3gyro.isra.9.constprop.47+0x2412>
 80138b4:	20001a9c 	.word	0x20001a9c
 80138b8:	00000000 	.word	0x00000000
 80138bc:	ed57 6a03 	vldr	s13, [r7, #-12]
 80138c0:	ed97 7a00 	vldr	s14, [r7]
 80138c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80138c8:	9a07      	ldr	r2, [sp, #28]
 80138ca:	ee76 6aa6 	vadd.f32	s13, s13, s13
 80138ce:	ee37 7a07 	vadd.f32	s14, s14, s14
 80138d2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80138d6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80138da:	edcd 6a78 	vstr	s13, [sp, #480]	; 0x1e0
 80138de:	ed8d 7a79 	vstr	s14, [sp, #484]	; 0x1e4
 80138e2:	edcd 7a7a 	vstr	s15, [sp, #488]	; 0x1e8
 80138e6:	9207      	str	r2, [sp, #28]
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d133      	bne.n	8013954 <m_kalman_3gyro.isra.9.constprop.47+0x2454>
 80138ec:	9a02      	ldr	r2, [sp, #8]
 80138ee:	9b00      	ldr	r3, [sp, #0]
 80138f0:	3204      	adds	r2, #4
 80138f2:	9202      	str	r2, [sp, #8]
 80138f4:	9a04      	ldr	r2, [sp, #16]
 80138f6:	3204      	adds	r2, #4
 80138f8:	9204      	str	r2, [sp, #16]
 80138fa:	9a05      	ldr	r2, [sp, #20]
 80138fc:	3301      	adds	r3, #1
 80138fe:	3204      	adds	r2, #4
 8013900:	2b0c      	cmp	r3, #12
 8013902:	9300      	str	r3, [sp, #0]
 8013904:	f108 0804 	add.w	r8, r8, #4
 8013908:	f107 0704 	add.w	r7, r7, #4
 801390c:	9205      	str	r2, [sp, #20]
 801390e:	f000 85b3 	beq.w	8014478 <m_kalman_3gyro.isra.9.constprop.47+0x2f78>
 8013912:	2b02      	cmp	r3, #2
 8013914:	ed8d 8a78 	vstr	s16, [sp, #480]	; 0x1e0
 8013918:	ed8d 8a79 	vstr	s16, [sp, #484]	; 0x1e4
 801391c:	ed8d 8a7a 	vstr	s16, [sp, #488]	; 0x1e8
 8013920:	ed8d 8a7b 	vstr	s16, [sp, #492]	; 0x1ec
 8013924:	ed8d 8a7c 	vstr	s16, [sp, #496]	; 0x1f0
 8013928:	ed8d 8a7d 	vstr	s16, [sp, #500]	; 0x1f4
 801392c:	ed8d 8a7e 	vstr	s16, [sp, #504]	; 0x1f8
 8013930:	ed8d 8a7f 	vstr	s16, [sp, #508]	; 0x1fc
 8013934:	ed8d 8a80 	vstr	s16, [sp, #512]	; 0x200
 8013938:	f340 84e0 	ble.w	80142fc <m_kalman_3gyro.isra.9.constprop.47+0x2dfc>
 801393c:	2b05      	cmp	r3, #5
 801393e:	ddbd      	ble.n	80138bc <m_kalman_3gyro.isra.9.constprop.47+0x23bc>
 8013940:	9a05      	ldr	r2, [sp, #20]
 8013942:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8013946:	6013      	str	r3, [r2, #0]
 8013948:	9a07      	ldr	r2, [sp, #28]
 801394a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801394e:	9207      	str	r2, [sp, #28]
 8013950:	2b00      	cmp	r3, #0
 8013952:	d0cb      	beq.n	80138ec <m_kalman_3gyro.isra.9.constprop.47+0x23ec>
 8013954:	ac6f      	add	r4, sp, #444	; 0x1bc
 8013956:	f10a 03b8 	add.w	r3, sl, #184	; 0xb8
 801395a:	eddd ea78 	vldr	s29, [sp, #480]	; 0x1e0
 801395e:	eddd da79 	vldr	s27, [sp, #484]	; 0x1e4
 8013962:	eddd 6a7a 	vldr	s13, [sp, #488]	; 0x1e8
 8013966:	eddd fa7b 	vldr	s31, [sp, #492]	; 0x1ec
 801396a:	ed9d fa7c 	vldr	s30, [sp, #496]	; 0x1f0
 801396e:	ed9d ea7d 	vldr	s28, [sp, #500]	; 0x1f4
 8013972:	ed9d da7e 	vldr	s26, [sp, #504]	; 0x1f8
 8013976:	eddd 5a7f 	vldr	s11, [sp, #508]	; 0x1fc
 801397a:	ed9d 6a80 	vldr	s12, [sp, #512]	; 0x200
 801397e:	ed84 8a00 	vstr	s16, [r4]
 8013982:	461e      	mov	r6, r3
 8013984:	461a      	mov	r2, r3
 8013986:	ed84 8a01 	vstr	s16, [r4, #4]
 801398a:	ed84 8a02 	vstr	s16, [r4, #8]
 801398e:	ed84 8a03 	vstr	s16, [r4, #12]
 8013992:	ed84 8a04 	vstr	s16, [r4, #16]
 8013996:	ed84 8a05 	vstr	s16, [r4, #20]
 801399a:	ed84 8a06 	vstr	s16, [r4, #24]
 801399e:	ed84 8a07 	vstr	s16, [r4, #28]
 80139a2:	ed84 8a08 	vstr	s16, [r4, #32]
 80139a6:	4621      	mov	r1, r4
 80139a8:	f10a 00dc 	add.w	r0, sl, #220	; 0xdc
 80139ac:	ecb2 7a01 	vldmia	r2!, {s14}
 80139b0:	edd1 7a00 	vldr	s15, [r1]
 80139b4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80139b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139bc:	d008      	beq.n	80139d0 <m_kalman_3gyro.isra.9.constprop.47+0x24d0>
 80139be:	eef5 ea40 	vcmp.f32	s29, #0.0
 80139c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139c6:	bf1c      	itt	ne
 80139c8:	ee27 7a2e 	vmulne.f32	s14, s14, s29
 80139cc:	ee77 7a87 	vaddne.f32	s15, s15, s14
 80139d0:	ed92 7a08 	vldr	s14, [r2, #32]
 80139d4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80139d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139dc:	d008      	beq.n	80139f0 <m_kalman_3gyro.isra.9.constprop.47+0x24f0>
 80139de:	eef5 da40 	vcmp.f32	s27, #0.0
 80139e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139e6:	bf1c      	itt	ne
 80139e8:	ee2d 7a87 	vmulne.f32	s14, s27, s14
 80139ec:	ee77 7a87 	vaddne.f32	s15, s15, s14
 80139f0:	ed92 7a11 	vldr	s14, [r2, #68]	; 0x44
 80139f4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80139f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139fc:	d008      	beq.n	8013a10 <m_kalman_3gyro.isra.9.constprop.47+0x2510>
 80139fe:	eef5 6a40 	vcmp.f32	s13, #0.0
 8013a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a06:	bf1c      	itt	ne
 8013a08:	ee27 7a26 	vmulne.f32	s14, s14, s13
 8013a0c:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8013a10:	ed92 7a1a 	vldr	s14, [r2, #104]	; 0x68
 8013a14:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a1c:	d008      	beq.n	8013a30 <m_kalman_3gyro.isra.9.constprop.47+0x2530>
 8013a1e:	eef5 fa40 	vcmp.f32	s31, #0.0
 8013a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a26:	bf1c      	itt	ne
 8013a28:	ee27 7a2f 	vmulne.f32	s14, s14, s31
 8013a2c:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8013a30:	ed92 7a23 	vldr	s14, [r2, #140]	; 0x8c
 8013a34:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a3c:	d008      	beq.n	8013a50 <m_kalman_3gyro.isra.9.constprop.47+0x2550>
 8013a3e:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8013a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a46:	bf1c      	itt	ne
 8013a48:	ee27 7a0f 	vmulne.f32	s14, s14, s30
 8013a4c:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8013a50:	ed92 7a2c 	vldr	s14, [r2, #176]	; 0xb0
 8013a54:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a5c:	d008      	beq.n	8013a70 <m_kalman_3gyro.isra.9.constprop.47+0x2570>
 8013a5e:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8013a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a66:	bf1c      	itt	ne
 8013a68:	ee2e 7a07 	vmulne.f32	s14, s28, s14
 8013a6c:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8013a70:	ed92 7a35 	vldr	s14, [r2, #212]	; 0xd4
 8013a74:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a7c:	d008      	beq.n	8013a90 <m_kalman_3gyro.isra.9.constprop.47+0x2590>
 8013a7e:	eeb5 da40 	vcmp.f32	s26, #0.0
 8013a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a86:	bf1c      	itt	ne
 8013a88:	ee2d 7a07 	vmulne.f32	s14, s26, s14
 8013a8c:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8013a90:	ed92 7a3e 	vldr	s14, [r2, #248]	; 0xf8
 8013a94:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a9c:	d008      	beq.n	8013ab0 <m_kalman_3gyro.isra.9.constprop.47+0x25b0>
 8013a9e:	eef5 5a40 	vcmp.f32	s11, #0.0
 8013aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013aa6:	bf1c      	itt	ne
 8013aa8:	ee27 7a25 	vmulne.f32	s14, s14, s11
 8013aac:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8013ab0:	ed92 7a47 	vldr	s14, [r2, #284]	; 0x11c
 8013ab4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013abc:	d008      	beq.n	8013ad0 <m_kalman_3gyro.isra.9.constprop.47+0x25d0>
 8013abe:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8013ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ac6:	bf1c      	itt	ne
 8013ac8:	ee27 7a06 	vmulne.f32	s14, s14, s12
 8013acc:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8013ad0:	4290      	cmp	r0, r2
 8013ad2:	ece1 7a01 	vstmia	r1!, {s15}
 8013ad6:	f47f af69 	bne.w	80139ac <m_kalman_3gyro.isra.9.constprop.47+0x24ac>
 8013ada:	eef5 ea40 	vcmp.f32	s29, #0.0
 8013ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ae2:	ed94 ca00 	vldr	s24, [r4]
 8013ae6:	f000 8403 	beq.w	80142f0 <m_kalman_3gyro.isra.9.constprop.47+0x2df0>
 8013aea:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8013aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013af2:	f000 83fd 	beq.w	80142f0 <m_kalman_3gyro.isra.9.constprop.47+0x2df0>
 8013af6:	ee6c 7a2e 	vmul.f32	s15, s24, s29
 8013afa:	ee77 7a88 	vadd.f32	s15, s15, s16
 8013afe:	eef5 da40 	vcmp.f32	s27, #0.0
 8013b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b06:	ed94 9a01 	vldr	s18, [r4, #4]
 8013b0a:	d008      	beq.n	8013b1e <m_kalman_3gyro.isra.9.constprop.47+0x261e>
 8013b0c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8013b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b14:	bf1c      	itt	ne
 8013b16:	ee2d 7a89 	vmulne.f32	s14, s27, s18
 8013b1a:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8013b1e:	eef5 6a40 	vcmp.f32	s13, #0.0
 8013b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b26:	edd4 ba02 	vldr	s23, [r4, #8]
 8013b2a:	d008      	beq.n	8013b3e <m_kalman_3gyro.isra.9.constprop.47+0x263e>
 8013b2c:	eef5 ba40 	vcmp.f32	s23, #0.0
 8013b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b34:	bf1c      	itt	ne
 8013b36:	ee2b 7aa6 	vmulne.f32	s14, s23, s13
 8013b3a:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8013b3e:	eef5 fa40 	vcmp.f32	s31, #0.0
 8013b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b46:	edd4 ca03 	vldr	s25, [r4, #12]
 8013b4a:	d008      	beq.n	8013b5e <m_kalman_3gyro.isra.9.constprop.47+0x265e>
 8013b4c:	eef5 ca40 	vcmp.f32	s25, #0.0
 8013b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b54:	bf1c      	itt	ne
 8013b56:	ee2c 7aaf 	vmulne.f32	s14, s25, s31
 8013b5a:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8013b5e:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8013b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b66:	edd4 aa04 	vldr	s21, [r4, #16]
 8013b6a:	d008      	beq.n	8013b7e <m_kalman_3gyro.isra.9.constprop.47+0x267e>
 8013b6c:	eef5 aa40 	vcmp.f32	s21, #0.0
 8013b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b74:	bf1c      	itt	ne
 8013b76:	ee2a 7a8f 	vmulne.f32	s14, s21, s30
 8013b7a:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8013b7e:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8013b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b86:	ed94 ba05 	vldr	s22, [r4, #20]
 8013b8a:	d008      	beq.n	8013b9e <m_kalman_3gyro.isra.9.constprop.47+0x269e>
 8013b8c:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8013b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b94:	bf1c      	itt	ne
 8013b96:	ee2e 7a0b 	vmulne.f32	s14, s28, s22
 8013b9a:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8013b9e:	eeb5 da40 	vcmp.f32	s26, #0.0
 8013ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ba6:	ed94 aa06 	vldr	s20, [r4, #24]
 8013baa:	d008      	beq.n	8013bbe <m_kalman_3gyro.isra.9.constprop.47+0x26be>
 8013bac:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8013bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bb4:	bf1c      	itt	ne
 8013bb6:	ee2d 7a0a 	vmulne.f32	s14, s26, s20
 8013bba:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8013bbe:	eef5 5a40 	vcmp.f32	s11, #0.0
 8013bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bc6:	edd4 9a07 	vldr	s19, [r4, #28]
 8013bca:	d008      	beq.n	8013bde <m_kalman_3gyro.isra.9.constprop.47+0x26de>
 8013bcc:	eef5 9a40 	vcmp.f32	s19, #0.0
 8013bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bd4:	bf1c      	itt	ne
 8013bd6:	ee29 7aa5 	vmulne.f32	s14, s19, s11
 8013bda:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8013bde:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8013be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013be6:	edd4 8a08 	vldr	s17, [r4, #32]
 8013bea:	d008      	beq.n	8013bfe <m_kalman_3gyro.isra.9.constprop.47+0x26fe>
 8013bec:	eef5 8a40 	vcmp.f32	s17, #0.0
 8013bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bf4:	bf1c      	itt	ne
 8013bf6:	ee28 7a86 	vmulne.f32	s14, s17, s12
 8013bfa:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8013bfe:	9a04      	ldr	r2, [sp, #16]
 8013c00:	ed92 7a00 	vldr	s14, [r2]
 8013c04:	9a00      	ldr	r2, [sp, #0]
 8013c06:	ee27 7a07 	vmul.f32	s14, s14, s14
 8013c0a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8013c0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013c12:	2a05      	cmp	r2, #5
 8013c14:	ee85 7a27 	vdiv.f32	s14, s10, s15
 8013c18:	ee27 ca0c 	vmul.f32	s24, s14, s24
 8013c1c:	ee29 9a07 	vmul.f32	s18, s18, s14
 8013c20:	ee67 ba2b 	vmul.f32	s23, s14, s23
 8013c24:	ee67 ca2c 	vmul.f32	s25, s14, s25
 8013c28:	ee6a aa87 	vmul.f32	s21, s21, s14
 8013c2c:	ee27 ba0b 	vmul.f32	s22, s14, s22
 8013c30:	ee27 aa0a 	vmul.f32	s20, s14, s20
 8013c34:	ee67 9a29 	vmul.f32	s19, s14, s19
 8013c38:	ee67 8a28 	vmul.f32	s17, s14, s17
 8013c3c:	ed8d ca66 	vstr	s24, [sp, #408]	; 0x198
 8013c40:	ed8d 9a67 	vstr	s18, [sp, #412]	; 0x19c
 8013c44:	edcd ba68 	vstr	s23, [sp, #416]	; 0x1a0
 8013c48:	edcd ca69 	vstr	s25, [sp, #420]	; 0x1a4
 8013c4c:	edcd aa6a 	vstr	s21, [sp, #424]	; 0x1a8
 8013c50:	ed8d ba6b 	vstr	s22, [sp, #428]	; 0x1ac
 8013c54:	ed8d aa6c 	vstr	s20, [sp, #432]	; 0x1b0
 8013c58:	edcd 9a6d 	vstr	s19, [sp, #436]	; 0x1b4
 8013c5c:	edcd 8a6e 	vstr	s17, [sp, #440]	; 0x1b8
 8013c60:	f340 809a 	ble.w	8013d98 <m_kalman_3gyro.isra.9.constprop.47+0x2898>
 8013c64:	9a02      	ldr	r2, [sp, #8]
 8013c66:	eef5 ea40 	vcmp.f32	s29, #0.0
 8013c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c6e:	ed92 7a00 	vldr	s14, [r2]
 8013c72:	f000 8340 	beq.w	80142f6 <m_kalman_3gyro.isra.9.constprop.47+0x2df6>
 8013c76:	edda 7a25 	vldr	s15, [sl, #148]	; 0x94
 8013c7a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c82:	f000 8338 	beq.w	80142f6 <m_kalman_3gyro.isra.9.constprop.47+0x2df6>
 8013c86:	ee67 7aae 	vmul.f32	s15, s15, s29
 8013c8a:	ee77 7a88 	vadd.f32	s15, s15, s16
 8013c8e:	eef5 da40 	vcmp.f32	s27, #0.0
 8013c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c96:	d00a      	beq.n	8013cae <m_kalman_3gyro.isra.9.constprop.47+0x27ae>
 8013c98:	ed9a 5a26 	vldr	s10, [sl, #152]	; 0x98
 8013c9c:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8013ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ca4:	bf1c      	itt	ne
 8013ca6:	ee2d 5a85 	vmulne.f32	s10, s27, s10
 8013caa:	ee77 7a85 	vaddne.f32	s15, s15, s10
 8013cae:	eef5 6a40 	vcmp.f32	s13, #0.0
 8013cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cb6:	d00a      	beq.n	8013cce <m_kalman_3gyro.isra.9.constprop.47+0x27ce>
 8013cb8:	ed9a 5a27 	vldr	s10, [sl, #156]	; 0x9c
 8013cbc:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8013cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cc4:	bf1c      	itt	ne
 8013cc6:	ee25 5a26 	vmulne.f32	s10, s10, s13
 8013cca:	ee77 7a85 	vaddne.f32	s15, s15, s10
 8013cce:	eef5 fa40 	vcmp.f32	s31, #0.0
 8013cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cd6:	d00a      	beq.n	8013cee <m_kalman_3gyro.isra.9.constprop.47+0x27ee>
 8013cd8:	ed9a 5a28 	vldr	s10, [sl, #160]	; 0xa0
 8013cdc:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8013ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ce4:	bf1c      	itt	ne
 8013ce6:	ee25 5a2f 	vmulne.f32	s10, s10, s31
 8013cea:	ee77 7a85 	vaddne.f32	s15, s15, s10
 8013cee:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8013cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cf6:	d00a      	beq.n	8013d0e <m_kalman_3gyro.isra.9.constprop.47+0x280e>
 8013cf8:	ed9a 5a29 	vldr	s10, [sl, #164]	; 0xa4
 8013cfc:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8013d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d04:	bf1c      	itt	ne
 8013d06:	ee25 5a0f 	vmulne.f32	s10, s10, s30
 8013d0a:	ee77 7a85 	vaddne.f32	s15, s15, s10
 8013d0e:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8013d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d16:	d00a      	beq.n	8013d2e <m_kalman_3gyro.isra.9.constprop.47+0x282e>
 8013d18:	ed9a 5a2a 	vldr	s10, [sl, #168]	; 0xa8
 8013d1c:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8013d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d24:	bf1c      	itt	ne
 8013d26:	ee2e 5a05 	vmulne.f32	s10, s28, s10
 8013d2a:	ee77 7a85 	vaddne.f32	s15, s15, s10
 8013d2e:	eeb5 da40 	vcmp.f32	s26, #0.0
 8013d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d36:	d00a      	beq.n	8013d4e <m_kalman_3gyro.isra.9.constprop.47+0x284e>
 8013d38:	ed9a 5a2b 	vldr	s10, [sl, #172]	; 0xac
 8013d3c:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8013d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d44:	bf1c      	itt	ne
 8013d46:	ee2d 5a05 	vmulne.f32	s10, s26, s10
 8013d4a:	ee77 7a85 	vaddne.f32	s15, s15, s10
 8013d4e:	eef5 5a40 	vcmp.f32	s11, #0.0
 8013d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d56:	d00a      	beq.n	8013d6e <m_kalman_3gyro.isra.9.constprop.47+0x286e>
 8013d58:	ed9a 5a2c 	vldr	s10, [sl, #176]	; 0xb0
 8013d5c:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8013d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d64:	bf1c      	itt	ne
 8013d66:	ee25 5a25 	vmulne.f32	s10, s10, s11
 8013d6a:	ee77 7a85 	vaddne.f32	s15, s15, s10
 8013d6e:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8013d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d76:	d00a      	beq.n	8013d8e <m_kalman_3gyro.isra.9.constprop.47+0x288e>
 8013d78:	ed9a 5a2d 	vldr	s10, [sl, #180]	; 0xb4
 8013d7c:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8013d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d84:	bf1c      	itt	ne
 8013d86:	ee25 5a06 	vmulne.f32	s10, s10, s12
 8013d8a:	ee77 7a85 	vaddne.f32	s15, s15, s10
 8013d8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013d92:	9a02      	ldr	r2, [sp, #8]
 8013d94:	edc2 7a00 	vstr	s15, [r2]
 8013d98:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8013d9c:	2100      	movs	r1, #0
 8013d9e:	4648      	mov	r0, r9
 8013da0:	930c      	str	r3, [sp, #48]	; 0x30
 8013da2:	edcd 5a0b 	vstr	s11, [sp, #44]	; 0x2c
 8013da6:	ed8d 6a0a 	vstr	s12, [sp, #40]	; 0x28
 8013daa:	edcd 6a08 	vstr	s13, [sp, #32]
 8013dae:	f007 fbc2 	bl	801b536 <memset>
 8013db2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013db4:	eddd 5a0b 	vldr	s11, [sp, #44]	; 0x2c
 8013db8:	ed9d 6a0a 	vldr	s12, [sp, #40]	; 0x28
 8013dbc:	eddd 6a08 	vldr	s13, [sp, #32]
 8013dc0:	464d      	mov	r5, r9
 8013dc2:	a966      	add	r1, sp, #408	; 0x198
 8013dc4:	464a      	mov	r2, r9
 8013dc6:	ecf1 7a01 	vldmia	r1!, {s15}
 8013dca:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dd2:	d074      	beq.n	8013ebe <m_kalman_3gyro.isra.9.constprop.47+0x29be>
 8013dd4:	eef5 ea40 	vcmp.f32	s29, #0.0
 8013dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ddc:	d007      	beq.n	8013dee <m_kalman_3gyro.isra.9.constprop.47+0x28ee>
 8013dde:	ed92 5a00 	vldr	s10, [r2]
 8013de2:	ee27 7aae 	vmul.f32	s14, s15, s29
 8013de6:	ee35 7a07 	vadd.f32	s14, s10, s14
 8013dea:	ed82 7a00 	vstr	s14, [r2]
 8013dee:	eef5 da40 	vcmp.f32	s27, #0.0
 8013df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013df6:	d007      	beq.n	8013e08 <m_kalman_3gyro.isra.9.constprop.47+0x2908>
 8013df8:	ed92 5a09 	vldr	s10, [r2, #36]	; 0x24
 8013dfc:	ee2d 7aa7 	vmul.f32	s14, s27, s15
 8013e00:	ee35 7a07 	vadd.f32	s14, s10, s14
 8013e04:	ed82 7a09 	vstr	s14, [r2, #36]	; 0x24
 8013e08:	eef5 6a40 	vcmp.f32	s13, #0.0
 8013e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e10:	d007      	beq.n	8013e22 <m_kalman_3gyro.isra.9.constprop.47+0x2922>
 8013e12:	ed92 5a12 	vldr	s10, [r2, #72]	; 0x48
 8013e16:	ee27 7aa6 	vmul.f32	s14, s15, s13
 8013e1a:	ee35 7a07 	vadd.f32	s14, s10, s14
 8013e1e:	ed82 7a12 	vstr	s14, [r2, #72]	; 0x48
 8013e22:	eef5 fa40 	vcmp.f32	s31, #0.0
 8013e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e2a:	d007      	beq.n	8013e3c <m_kalman_3gyro.isra.9.constprop.47+0x293c>
 8013e2c:	ed92 5a1b 	vldr	s10, [r2, #108]	; 0x6c
 8013e30:	ee27 7aaf 	vmul.f32	s14, s15, s31
 8013e34:	ee35 7a07 	vadd.f32	s14, s10, s14
 8013e38:	ed82 7a1b 	vstr	s14, [r2, #108]	; 0x6c
 8013e3c:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8013e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e44:	d007      	beq.n	8013e56 <m_kalman_3gyro.isra.9.constprop.47+0x2956>
 8013e46:	ed92 5a24 	vldr	s10, [r2, #144]	; 0x90
 8013e4a:	ee27 7a8f 	vmul.f32	s14, s15, s30
 8013e4e:	ee35 7a07 	vadd.f32	s14, s10, s14
 8013e52:	ed82 7a24 	vstr	s14, [r2, #144]	; 0x90
 8013e56:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8013e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e5e:	d007      	beq.n	8013e70 <m_kalman_3gyro.isra.9.constprop.47+0x2970>
 8013e60:	ed92 5a2d 	vldr	s10, [r2, #180]	; 0xb4
 8013e64:	ee2e 7a27 	vmul.f32	s14, s28, s15
 8013e68:	ee35 7a07 	vadd.f32	s14, s10, s14
 8013e6c:	ed82 7a2d 	vstr	s14, [r2, #180]	; 0xb4
 8013e70:	eeb5 da40 	vcmp.f32	s26, #0.0
 8013e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e78:	d007      	beq.n	8013e8a <m_kalman_3gyro.isra.9.constprop.47+0x298a>
 8013e7a:	ed92 5a36 	vldr	s10, [r2, #216]	; 0xd8
 8013e7e:	ee2d 7a27 	vmul.f32	s14, s26, s15
 8013e82:	ee35 7a07 	vadd.f32	s14, s10, s14
 8013e86:	ed82 7a36 	vstr	s14, [r2, #216]	; 0xd8
 8013e8a:	eef5 5a40 	vcmp.f32	s11, #0.0
 8013e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e92:	d007      	beq.n	8013ea4 <m_kalman_3gyro.isra.9.constprop.47+0x29a4>
 8013e94:	ed92 5a3f 	vldr	s10, [r2, #252]	; 0xfc
 8013e98:	ee27 7aa5 	vmul.f32	s14, s15, s11
 8013e9c:	ee35 7a07 	vadd.f32	s14, s10, s14
 8013ea0:	ed82 7a3f 	vstr	s14, [r2, #252]	; 0xfc
 8013ea4:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8013ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013eac:	d007      	beq.n	8013ebe <m_kalman_3gyro.isra.9.constprop.47+0x29be>
 8013eae:	ed92 7a48 	vldr	s14, [r2, #288]	; 0x120
 8013eb2:	ee67 7a86 	vmul.f32	s15, s15, s12
 8013eb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013eba:	edc2 7a48 	vstr	s15, [r2, #288]	; 0x120
 8013ebe:	42a1      	cmp	r1, r4
 8013ec0:	f102 0204 	add.w	r2, r2, #4
 8013ec4:	f47f af7f 	bne.w	8013dc6 <m_kalman_3gyro.isra.9.constprop.47+0x28c6>
 8013ec8:	f8df e5a4 	ldr.w	lr, [pc, #1444]	; 8014470 <m_kalman_3gyro.isra.9.constprop.47+0x2f70>
 8013ecc:	4648      	mov	r0, r9
 8013ece:	2100      	movs	r1, #0
 8013ed0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013ed4:	fb8e c201 	smull	ip, r2, lr, r1
 8013ed8:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 8013edc:	ebcc 02a2 	rsb	r2, ip, r2, asr #2
 8013ee0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8013ee4:	ebb1 0f42 	cmp.w	r1, r2, lsl #1
 8013ee8:	edd0 7a00 	vldr	s15, [r0]
 8013eec:	f040 81f7 	bne.w	80142de <m_kalman_3gyro.isra.9.constprop.47+0x2dde>
 8013ef0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013ef4:	3101      	adds	r1, #1
 8013ef6:	2951      	cmp	r1, #81	; 0x51
 8013ef8:	ece0 7a01 	vstmia	r0!, {s15}
 8013efc:	d1ea      	bne.n	8013ed4 <m_kalman_3gyro.isra.9.constprop.47+0x29d4>
 8013efe:	4619      	mov	r1, r3
 8013f00:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8013f04:	4658      	mov	r0, fp
 8013f06:	9308      	str	r3, [sp, #32]
 8013f08:	f007 fb0a 	bl	801b520 <memcpy>
 8013f0c:	9b08      	ldr	r3, [sp, #32]
 8013f0e:	2100      	movs	r1, #0
 8013f10:	4618      	mov	r0, r3
 8013f12:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8013f16:	f007 fb0e 	bl	801b536 <memset>
 8013f1a:	a8fb      	add	r0, sp, #1004	; 0x3ec
 8013f1c:	f50d 61ca 	add.w	r1, sp, #1616	; 0x650
 8013f20:	ecf5 2a01 	vldmia	r5!, {s5}
 8013f24:	ed95 3a08 	vldr	s6, [r5, #32]
 8013f28:	edd5 3a11 	vldr	s7, [r5, #68]	; 0x44
 8013f2c:	ed95 4a1a 	vldr	s8, [r5, #104]	; 0x68
 8013f30:	edd5 4a23 	vldr	s9, [r5, #140]	; 0x8c
 8013f34:	ed95 5a2c 	vldr	s10, [r5, #176]	; 0xb0
 8013f38:	edd5 5a35 	vldr	s11, [r5, #212]	; 0xd4
 8013f3c:	ed95 6a3e 	vldr	s12, [r5, #248]	; 0xf8
 8013f40:	edd5 6a47 	vldr	s13, [r5, #284]	; 0x11c
 8013f44:	465b      	mov	r3, fp
 8013f46:	4632      	mov	r2, r6
 8013f48:	eef5 2a40 	vcmp.f32	s5, #0.0
 8013f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f50:	d00e      	beq.n	8013f70 <m_kalman_3gyro.isra.9.constprop.47+0x2a70>
 8013f52:	edd3 7a00 	vldr	s15, [r3]
 8013f56:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f5e:	d007      	beq.n	8013f70 <m_kalman_3gyro.isra.9.constprop.47+0x2a70>
 8013f60:	ed92 7a00 	vldr	s14, [r2]
 8013f64:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8013f68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013f6c:	edc2 7a00 	vstr	s15, [r2]
 8013f70:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8013f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f78:	d00e      	beq.n	8013f98 <m_kalman_3gyro.isra.9.constprop.47+0x2a98>
 8013f7a:	edd3 7a01 	vldr	s15, [r3, #4]
 8013f7e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f86:	d007      	beq.n	8013f98 <m_kalman_3gyro.isra.9.constprop.47+0x2a98>
 8013f88:	ed92 7a00 	vldr	s14, [r2]
 8013f8c:	ee67 7a83 	vmul.f32	s15, s15, s6
 8013f90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013f94:	edc2 7a00 	vstr	s15, [r2]
 8013f98:	eef5 3a40 	vcmp.f32	s7, #0.0
 8013f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fa0:	d00e      	beq.n	8013fc0 <m_kalman_3gyro.isra.9.constprop.47+0x2ac0>
 8013fa2:	edd3 7a02 	vldr	s15, [r3, #8]
 8013fa6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fae:	d007      	beq.n	8013fc0 <m_kalman_3gyro.isra.9.constprop.47+0x2ac0>
 8013fb0:	ed92 7a00 	vldr	s14, [r2]
 8013fb4:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8013fb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013fbc:	edc2 7a00 	vstr	s15, [r2]
 8013fc0:	eeb5 4a40 	vcmp.f32	s8, #0.0
 8013fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fc8:	d00e      	beq.n	8013fe8 <m_kalman_3gyro.isra.9.constprop.47+0x2ae8>
 8013fca:	edd3 7a03 	vldr	s15, [r3, #12]
 8013fce:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fd6:	d007      	beq.n	8013fe8 <m_kalman_3gyro.isra.9.constprop.47+0x2ae8>
 8013fd8:	ed92 7a00 	vldr	s14, [r2]
 8013fdc:	ee67 7a84 	vmul.f32	s15, s15, s8
 8013fe0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013fe4:	edc2 7a00 	vstr	s15, [r2]
 8013fe8:	eef5 4a40 	vcmp.f32	s9, #0.0
 8013fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ff0:	d00e      	beq.n	8014010 <m_kalman_3gyro.isra.9.constprop.47+0x2b10>
 8013ff2:	edd3 7a04 	vldr	s15, [r3, #16]
 8013ff6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ffe:	d007      	beq.n	8014010 <m_kalman_3gyro.isra.9.constprop.47+0x2b10>
 8014000:	ed92 7a00 	vldr	s14, [r2]
 8014004:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8014008:	ee77 7a27 	vadd.f32	s15, s14, s15
 801400c:	edc2 7a00 	vstr	s15, [r2]
 8014010:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8014014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014018:	d00e      	beq.n	8014038 <m_kalman_3gyro.isra.9.constprop.47+0x2b38>
 801401a:	edd3 7a05 	vldr	s15, [r3, #20]
 801401e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014026:	d007      	beq.n	8014038 <m_kalman_3gyro.isra.9.constprop.47+0x2b38>
 8014028:	ed92 7a00 	vldr	s14, [r2]
 801402c:	ee65 7a27 	vmul.f32	s15, s10, s15
 8014030:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014034:	edc2 7a00 	vstr	s15, [r2]
 8014038:	eef5 5a40 	vcmp.f32	s11, #0.0
 801403c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014040:	d00e      	beq.n	8014060 <m_kalman_3gyro.isra.9.constprop.47+0x2b60>
 8014042:	edd3 7a06 	vldr	s15, [r3, #24]
 8014046:	eef5 7a40 	vcmp.f32	s15, #0.0
 801404a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801404e:	d007      	beq.n	8014060 <m_kalman_3gyro.isra.9.constprop.47+0x2b60>
 8014050:	ed92 7a00 	vldr	s14, [r2]
 8014054:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014058:	ee77 7a27 	vadd.f32	s15, s14, s15
 801405c:	edc2 7a00 	vstr	s15, [r2]
 8014060:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8014064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014068:	d00e      	beq.n	8014088 <m_kalman_3gyro.isra.9.constprop.47+0x2b88>
 801406a:	edd3 7a07 	vldr	s15, [r3, #28]
 801406e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014076:	d007      	beq.n	8014088 <m_kalman_3gyro.isra.9.constprop.47+0x2b88>
 8014078:	ed92 7a00 	vldr	s14, [r2]
 801407c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8014080:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014084:	edc2 7a00 	vstr	s15, [r2]
 8014088:	eef5 6a40 	vcmp.f32	s13, #0.0
 801408c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014090:	d00e      	beq.n	80140b0 <m_kalman_3gyro.isra.9.constprop.47+0x2bb0>
 8014092:	edd3 7a08 	vldr	s15, [r3, #32]
 8014096:	eef5 7a40 	vcmp.f32	s15, #0.0
 801409a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801409e:	d007      	beq.n	80140b0 <m_kalman_3gyro.isra.9.constprop.47+0x2bb0>
 80140a0:	ed92 7a00 	vldr	s14, [r2]
 80140a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80140a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80140ac:	edc2 7a00 	vstr	s15, [r2]
 80140b0:	3324      	adds	r3, #36	; 0x24
 80140b2:	4299      	cmp	r1, r3
 80140b4:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80140b8:	f47f af46 	bne.w	8013f48 <m_kalman_3gyro.isra.9.constprop.47+0x2a48>
 80140bc:	4285      	cmp	r5, r0
 80140be:	f106 0604 	add.w	r6, r6, #4
 80140c2:	f47f af2d 	bne.w	8013f20 <m_kalman_3gyro.isra.9.constprop.47+0x2a20>
 80140c6:	9b02      	ldr	r3, [sp, #8]
 80140c8:	ed84 8a00 	vstr	s16, [r4]
 80140cc:	eeb5 ca40 	vcmp.f32	s24, #0.0
 80140d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140d4:	ed84 8a01 	vstr	s16, [r4, #4]
 80140d8:	edd3 7a00 	vldr	s15, [r3]
 80140dc:	f000 8116 	beq.w	801430c <m_kalman_3gyro.isra.9.constprop.47+0x2e0c>
 80140e0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80140e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140e8:	f000 8110 	beq.w	801430c <m_kalman_3gyro.isra.9.constprop.47+0x2e0c>
 80140ec:	ee27 ca8c 	vmul.f32	s24, s15, s24
 80140f0:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80140f4:	ee3c ca08 	vadd.f32	s24, s24, s16
 80140f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140fc:	ed84 ca00 	vstr	s24, [r4]
 8014100:	f000 8199 	beq.w	8014436 <m_kalman_3gyro.isra.9.constprop.47+0x2f36>
 8014104:	ee67 6a89 	vmul.f32	s13, s15, s18
 8014108:	eef5 ba40 	vcmp.f32	s23, #0.0
 801410c:	ee76 6a88 	vadd.f32	s13, s13, s16
 8014110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014114:	edc4 6a01 	vstr	s13, [r4, #4]
 8014118:	f000 8113 	beq.w	8014342 <m_kalman_3gyro.isra.9.constprop.47+0x2e42>
 801411c:	ee27 2aab 	vmul.f32	s4, s15, s23
 8014120:	eef5 ca40 	vcmp.f32	s25, #0.0
 8014124:	ee32 2a08 	vadd.f32	s4, s4, s16
 8014128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801412c:	ed84 2a02 	vstr	s4, [r4, #8]
 8014130:	f000 8117 	beq.w	8014362 <m_kalman_3gyro.isra.9.constprop.47+0x2e62>
 8014134:	ee67 1aac 	vmul.f32	s3, s15, s25
 8014138:	eef5 aa40 	vcmp.f32	s21, #0.0
 801413c:	ee71 1a88 	vadd.f32	s3, s3, s16
 8014140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014144:	edc4 1a03 	vstr	s3, [r4, #12]
 8014148:	f000 8165 	beq.w	8014416 <m_kalman_3gyro.isra.9.constprop.47+0x2f16>
 801414c:	ee27 4aaa 	vmul.f32	s8, s15, s21
 8014150:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8014154:	ee34 4a08 	vadd.f32	s8, s8, s16
 8014158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801415c:	ed84 4a04 	vstr	s8, [r4, #16]
 8014160:	f000 8112 	beq.w	8014388 <m_kalman_3gyro.isra.9.constprop.47+0x2e88>
 8014164:	ee27 6a8b 	vmul.f32	s12, s15, s22
 8014168:	eeb5 aa40 	vcmp.f32	s20, #0.0
 801416c:	ee36 6a08 	vadd.f32	s12, s12, s16
 8014170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014174:	ed84 6a05 	vstr	s12, [r4, #20]
 8014178:	f000 8134 	beq.w	80143e4 <m_kalman_3gyro.isra.9.constprop.47+0x2ee4>
 801417c:	ee27 5a8a 	vmul.f32	s10, s15, s20
 8014180:	eef5 9a40 	vcmp.f32	s19, #0.0
 8014184:	ee35 5a08 	vadd.f32	s10, s10, s16
 8014188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801418c:	ed84 5a06 	vstr	s10, [r4, #24]
 8014190:	f000 8113 	beq.w	80143ba <m_kalman_3gyro.isra.9.constprop.47+0x2eba>
 8014194:	ee27 3aa9 	vmul.f32	s6, s15, s19
 8014198:	eef5 8a40 	vcmp.f32	s17, #0.0
 801419c:	ee33 3a08 	vadd.f32	s6, s6, s16
 80141a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141a4:	ed84 3a07 	vstr	s6, [r4, #28]
 80141a8:	f000 8117 	beq.w	80143da <m_kalman_3gyro.isra.9.constprop.47+0x2eda>
 80141ac:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80141b0:	ee77 7a88 	vadd.f32	s15, s15, s16
 80141b4:	edda 8a25 	vldr	s17, [sl, #148]	; 0x94
 80141b8:	ed9a 0a26 	vldr	s0, [sl, #152]	; 0x98
 80141bc:	edda 0a27 	vldr	s1, [sl, #156]	; 0x9c
 80141c0:	ed9a 1a28 	vldr	s2, [sl, #160]	; 0xa0
 80141c4:	edda 3a29 	vldr	s7, [sl, #164]	; 0xa4
 80141c8:	edda 5a2a 	vldr	s11, [sl, #168]	; 0xa8
 80141cc:	edda 4a2b 	vldr	s9, [sl, #172]	; 0xac
 80141d0:	edda 2a2c 	vldr	s5, [sl, #176]	; 0xb0
 80141d4:	ed9a 7a2d 	vldr	s14, [sl, #180]	; 0xb4
 80141d8:	edc4 7a08 	vstr	s15, [r4, #32]
 80141dc:	ee38 ca8c 	vadd.f32	s24, s17, s24
 80141e0:	ee70 6a26 	vadd.f32	s13, s0, s13
 80141e4:	ee30 2a82 	vadd.f32	s4, s1, s4
 80141e8:	ee71 1a21 	vadd.f32	s3, s2, s3
 80141ec:	ee33 4a84 	vadd.f32	s8, s7, s8
 80141f0:	ee35 6a86 	vadd.f32	s12, s11, s12
 80141f4:	ee34 5a85 	vadd.f32	s10, s9, s10
 80141f8:	ee32 3a83 	vadd.f32	s6, s5, s6
 80141fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014200:	ed8a ca25 	vstr	s24, [sl, #148]	; 0x94
 8014204:	edca 6a26 	vstr	s13, [sl, #152]	; 0x98
 8014208:	ed8a 2a27 	vstr	s4, [sl, #156]	; 0x9c
 801420c:	edca 1a28 	vstr	s3, [sl, #160]	; 0xa0
 8014210:	ed8a 4a29 	vstr	s8, [sl, #164]	; 0xa4
 8014214:	ed8a 6a2a 	vstr	s12, [sl, #168]	; 0xa8
 8014218:	ed8a 5a2b 	vstr	s10, [sl, #172]	; 0xac
 801421c:	ed8a 3a2c 	vstr	s6, [sl, #176]	; 0xb0
 8014220:	edca 7a2d 	vstr	s15, [sl, #180]	; 0xb4
 8014224:	f7ff bb62 	b.w	80138ec <m_kalman_3gyro.isra.9.constprop.47+0x23ec>
 8014228:	4556      	cmp	r6, sl
 801422a:	f6be a903 	bge.w	8012434 <m_kalman_3gyro.isra.9.constprop.47+0xf34>
 801422e:	ebaa 0206 	sub.w	r2, sl, r6
 8014232:	eb09 010c 	add.w	r1, r9, ip
 8014236:	4454      	add	r4, sl
 8014238:	1ba4      	subs	r4, r4, r6
 801423a:	f007 f971 	bl	801b520 <memcpy>
 801423e:	4656      	mov	r6, sl
 8014240:	f7fe b8f8 	b.w	8012434 <m_kalman_3gyro.isra.9.constprop.47+0xf34>
 8014244:	ed9f 0b86 	vldr	d0, [pc, #536]	; 8014460 <m_kalman_3gyro.isra.9.constprop.47+0x2f60>
 8014248:	f7fe bbb5 	b.w	80129b6 <m_kalman_3gyro.isra.9.constprop.47+0x14b6>
 801424c:	f60a 03c8 	addw	r3, sl, #2248	; 0x8c8
 8014250:	f60a 04c4 	addw	r4, sl, #2244	; 0x8c4
 8014254:	9302      	str	r3, [sp, #8]
 8014256:	f50a 650c 	add.w	r5, sl, #2240	; 0x8c0
 801425a:	f60a 06bc 	addw	r6, sl, #2236	; 0x8bc
 801425e:	f60a 07b8 	addw	r7, sl, #2232	; 0x8b8
 8014262:	f7fe ba1b 	b.w	801269c <m_kalman_3gyro.isra.9.constprop.47+0x119c>
 8014266:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014268:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801426c:	edc3 7a00 	vstr	s15, [r3]
 8014270:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014272:	edc3 7a00 	vstr	s15, [r3]
 8014276:	f7fe bb42 	b.w	80128fe <m_kalman_3gyro.isra.9.constprop.47+0x13fe>
 801427a:	ed9f 0b7b 	vldr	d0, [pc, #492]	; 8014468 <m_kalman_3gyro.isra.9.constprop.47+0x2f68>
 801427e:	f7fe bb9a 	b.w	80129b6 <m_kalman_3gyro.isra.9.constprop.47+0x14b6>
 8014282:	a9be      	add	r1, sp, #760	; 0x2f8
 8014284:	a8b1      	add	r0, sp, #708	; 0x2c4
 8014286:	eeb0 0a68 	vmov.f32	s0, s17
 801428a:	f7fe bb26 	b.w	80128da <m_kalman_3gyro.isra.9.constprop.47+0x13da>
 801428e:	eef4 7a68 	vcmp.f32	s15, s17
 8014292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014296:	f43e a936 	beq.w	8012506 <m_kalman_3gyro.isra.9.constprop.47+0x1006>
 801429a:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801429e:	eef4 7a66 	vcmp.f32	s15, s13
 80142a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142a6:	f43e a92e 	beq.w	8012506 <m_kalman_3gyro.isra.9.constprop.47+0x1006>
 80142aa:	eeb4 7a68 	vcmp.f32	s14, s17
 80142ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142b2:	f43e a928 	beq.w	8012506 <m_kalman_3gyro.isra.9.constprop.47+0x1006>
 80142b6:	eeb4 7a66 	vcmp.f32	s14, s13
 80142ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142be:	f43e a922 	beq.w	8012506 <m_kalman_3gyro.isra.9.constprop.47+0x1006>
 80142c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80142c6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80142ca:	ee27 7a26 	vmul.f32	s14, s14, s13
 80142ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80142d2:	f7fe b91e 	b.w	8012512 <m_kalman_3gyro.isra.9.constprop.47+0x1012>
 80142d6:	eef0 7a65 	vmov.f32	s15, s11
 80142da:	f7fe bc1a 	b.w	8012b12 <m_kalman_3gyro.isra.9.constprop.47+0x1612>
 80142de:	ee78 7a67 	vsub.f32	s15, s16, s15
 80142e2:	3101      	adds	r1, #1
 80142e4:	2951      	cmp	r1, #81	; 0x51
 80142e6:	ece0 7a01 	vstmia	r0!, {s15}
 80142ea:	f47f adf3 	bne.w	8013ed4 <m_kalman_3gyro.isra.9.constprop.47+0x29d4>
 80142ee:	e606      	b.n	8013efe <m_kalman_3gyro.isra.9.constprop.47+0x29fe>
 80142f0:	eddf 7a60 	vldr	s15, [pc, #384]	; 8014474 <m_kalman_3gyro.isra.9.constprop.47+0x2f74>
 80142f4:	e403      	b.n	8013afe <m_kalman_3gyro.isra.9.constprop.47+0x25fe>
 80142f6:	eddf 7a5f 	vldr	s15, [pc, #380]	; 8014474 <m_kalman_3gyro.isra.9.constprop.47+0x2f74>
 80142fa:	e4c8      	b.n	8013c8e <m_kalman_3gyro.isra.9.constprop.47+0x278e>
 80142fc:	edd8 6a00 	vldr	s13, [r8]
 8014300:	ed98 7a03 	vldr	s14, [r8, #12]
 8014304:	edd8 7a06 	vldr	s15, [r8, #24]
 8014308:	f7ff bade 	b.w	80138c8 <m_kalman_3gyro.isra.9.constprop.47+0x23c8>
 801430c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8014310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014314:	d005      	beq.n	8014322 <m_kalman_3gyro.isra.9.constprop.47+0x2e22>
 8014316:	eef5 7a40 	vcmp.f32	s15, #0.0
 801431a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801431e:	f041 80d2 	bne.w	80154c6 <m_kalman_3gyro.isra.9.constprop.47+0x3fc6>
 8014322:	eef5 ba40 	vcmp.f32	s23, #0.0
 8014326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801432a:	f000 83ed 	beq.w	8014b08 <m_kalman_3gyro.isra.9.constprop.47+0x3608>
 801432e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014336:	eef0 6a48 	vmov.f32	s13, s16
 801433a:	eeb0 ca48 	vmov.f32	s24, s16
 801433e:	f47f aeed 	bne.w	801411c <m_kalman_3gyro.isra.9.constprop.47+0x2c1c>
 8014342:	eef5 ca40 	vcmp.f32	s25, #0.0
 8014346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801434a:	ed84 8a02 	vstr	s16, [r4, #8]
 801434e:	f000 8082 	beq.w	8014456 <m_kalman_3gyro.isra.9.constprop.47+0x2f56>
 8014352:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801435a:	eeb0 2a48 	vmov.f32	s4, s16
 801435e:	f47f aee9 	bne.w	8014134 <m_kalman_3gyro.isra.9.constprop.47+0x2c34>
 8014362:	eef5 aa40 	vcmp.f32	s21, #0.0
 8014366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801436a:	ed84 8a03 	vstr	s16, [r4, #12]
 801436e:	d050      	beq.n	8014412 <m_kalman_3gyro.isra.9.constprop.47+0x2f12>
 8014370:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014378:	f040 86a6 	bne.w	80150c8 <m_kalman_3gyro.isra.9.constprop.47+0x3bc8>
 801437c:	ed84 8a04 	vstr	s16, [r4, #16]
 8014380:	eeb0 4a48 	vmov.f32	s8, s16
 8014384:	eef0 1a48 	vmov.f32	s3, s16
 8014388:	eeb5 aa40 	vcmp.f32	s20, #0.0
 801438c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014390:	ed84 8a05 	vstr	s16, [r4, #20]
 8014394:	d024      	beq.n	80143e0 <m_kalman_3gyro.isra.9.constprop.47+0x2ee0>
 8014396:	eef5 7a40 	vcmp.f32	s15, #0.0
 801439a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801439e:	f041 8059 	bne.w	8015454 <m_kalman_3gyro.isra.9.constprop.47+0x3f54>
 80143a2:	eef5 9a40 	vcmp.f32	s19, #0.0
 80143a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143aa:	ed84 8a06 	vstr	s16, [r4, #24]
 80143ae:	f041 808e 	bne.w	80154ce <m_kalman_3gyro.isra.9.constprop.47+0x3fce>
 80143b2:	eeb0 5a48 	vmov.f32	s10, s16
 80143b6:	eeb0 6a48 	vmov.f32	s12, s16
 80143ba:	eef5 8a40 	vcmp.f32	s17, #0.0
 80143be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143c2:	ed84 8a07 	vstr	s16, [r4, #28]
 80143c6:	f000 81e0 	beq.w	801478a <m_kalman_3gyro.isra.9.constprop.47+0x328a>
 80143ca:	eef5 7a40 	vcmp.f32	s15, #0.0
 80143ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143d2:	eeb0 3a48 	vmov.f32	s6, s16
 80143d6:	f47f aee9 	bne.w	80141ac <m_kalman_3gyro.isra.9.constprop.47+0x2cac>
 80143da:	eef0 7a48 	vmov.f32	s15, s16
 80143de:	e6e9      	b.n	80141b4 <m_kalman_3gyro.isra.9.constprop.47+0x2cb4>
 80143e0:	eeb0 6a48 	vmov.f32	s12, s16
 80143e4:	eef5 9a40 	vcmp.f32	s19, #0.0
 80143e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143ec:	ed84 8a06 	vstr	s16, [r4, #24]
 80143f0:	f000 8387 	beq.w	8014b02 <m_kalman_3gyro.isra.9.constprop.47+0x3602>
 80143f4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80143f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143fc:	f040 8389 	bne.w	8014b12 <m_kalman_3gyro.isra.9.constprop.47+0x3612>
 8014400:	ed84 8a07 	vstr	s16, [r4, #28]
 8014404:	eeb0 3a48 	vmov.f32	s6, s16
 8014408:	eeb0 5a48 	vmov.f32	s10, s16
 801440c:	eef0 7a48 	vmov.f32	s15, s16
 8014410:	e6d0      	b.n	80141b4 <m_kalman_3gyro.isra.9.constprop.47+0x2cb4>
 8014412:	eef0 1a48 	vmov.f32	s3, s16
 8014416:	eeb5 ba40 	vcmp.f32	s22, #0.0
 801441a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801441e:	ed84 8a04 	vstr	s16, [r4, #16]
 8014422:	f000 836b 	beq.w	8014afc <m_kalman_3gyro.isra.9.constprop.47+0x35fc>
 8014426:	eef5 7a40 	vcmp.f32	s15, #0.0
 801442a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801442e:	eeb0 4a48 	vmov.f32	s8, s16
 8014432:	d0a9      	beq.n	8014388 <m_kalman_3gyro.isra.9.constprop.47+0x2e88>
 8014434:	e696      	b.n	8014164 <m_kalman_3gyro.isra.9.constprop.47+0x2c64>
 8014436:	eef5 ba40 	vcmp.f32	s23, #0.0
 801443a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801443e:	eef0 6a48 	vmov.f32	s13, s16
 8014442:	f47f ae6b 	bne.w	801411c <m_kalman_3gyro.isra.9.constprop.47+0x2c1c>
 8014446:	eef5 ca40 	vcmp.f32	s25, #0.0
 801444a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801444e:	ed84 8a02 	vstr	s16, [r4, #8]
 8014452:	f47f af7e 	bne.w	8014352 <m_kalman_3gyro.isra.9.constprop.47+0x2e52>
 8014456:	eeb0 2a48 	vmov.f32	s4, s16
 801445a:	e782      	b.n	8014362 <m_kalman_3gyro.isra.9.constprop.47+0x2e62>
 801445c:	f3af 8000 	nop.w
 8014460:	00000000 	.word	0x00000000
 8014464:	3ff00000 	.word	0x3ff00000
 8014468:	00000000 	.word	0x00000000
 801446c:	40140000 	.word	0x40140000
 8014470:	66666667 	.word	0x66666667
 8014474:	00000000 	.word	0x00000000
 8014478:	ed9a 9a25 	vldr	s18, [sl, #148]	; 0x94
 801447c:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8014474 <m_kalman_3gyro.isra.9.constprop.47+0x2f74>
 8014480:	edda 8a26 	vldr	s17, [sl, #152]	; 0x98
 8014484:	ed9a 8a27 	vldr	s16, [sl, #156]	; 0x9c
 8014488:	ee69 7a09 	vmul.f32	s15, s18, s18
 801448c:	ee68 6aa8 	vmul.f32	s13, s17, s17
 8014490:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014494:	ee28 7a08 	vmul.f32	s14, s16, s16
 8014498:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801449c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80144a0:	ee37 7a26 	vadd.f32	s14, s14, s13
 80144a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80144a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80144ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144b0:	f340 87d4 	ble.w	801545c <m_kalman_3gyro.isra.9.constprop.47+0x3f5c>
 80144b4:	ee17 0a90 	vmov	r0, s15
 80144b8:	f7ec f84e 	bl	8000558 <__aeabi_f2d>
 80144bc:	ec41 0b10 	vmov	d0, r0, r1
 80144c0:	ed8d 9a42 	vstr	s18, [sp, #264]	; 0x108
 80144c4:	edcd 8a43 	vstr	s17, [sp, #268]	; 0x10c
 80144c8:	ed8d 8a44 	vstr	s16, [sp, #272]	; 0x110
 80144cc:	f004 fae8 	bl	8018aa0 <sqrt>
 80144d0:	ec51 0b10 	vmov	r0, r1, d0
 80144d4:	f7ec fb8c 	bl	8000bf0 <__aeabi_d2f>
 80144d8:	f8ba 3030 	ldrh.w	r3, [sl, #48]	; 0x30
 80144dc:	9045      	str	r0, [sp, #276]	; 0x114
 80144de:	4604      	mov	r4, r0
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	f040 8105 	bne.w	80146f0 <m_kalman_3gyro.isra.9.constprop.47+0x31f0>
 80144e6:	f8dd 36c8 	ldr.w	r3, [sp, #1736]	; 0x6c8
 80144ea:	9e06      	ldr	r6, [sp, #24]
 80144ec:	789b      	ldrb	r3, [r3, #2]
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	f000 87b8 	beq.w	8015464 <m_kalman_3gyro.isra.9.constprop.47+0x3f64>
 80144f4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80144f8:	ad4e      	add	r5, sp, #312	; 0x138
 80144fa:	af46      	add	r7, sp, #280	; 0x118
 80144fc:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8014500:	eeb1 9a49 	vneg.f32	s18, s18
 8014504:	eef1 8a68 	vneg.f32	s17, s17
 8014508:	eeb1 8a48 	vneg.f32	s16, s16
 801450c:	4628      	mov	r0, r5
 801450e:	4632      	mov	r2, r6
 8014510:	4639      	mov	r1, r7
 8014512:	ed85 9a00 	vstr	s18, [r5]
 8014516:	edc5 8a01 	vstr	s17, [r5, #4]
 801451a:	ed85 8a02 	vstr	s16, [r5, #8]
 801451e:	60ec      	str	r4, [r5, #12]
 8014520:	f7f8 fd98 	bl	800d054 <m_qmult_eml>
 8014524:	ed8d 9a46 	vstr	s18, [sp, #280]	; 0x118
 8014528:	edcd 8a47 	vstr	s17, [sp, #284]	; 0x11c
 801452c:	ed8d 8a48 	vstr	s16, [sp, #288]	; 0x120
 8014530:	9449      	str	r4, [sp, #292]	; 0x124
 8014532:	ab46      	add	r3, sp, #280	; 0x118
 8014534:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014536:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801453a:	ed95 6a00 	vldr	s12, [r5]
 801453e:	ed95 7a01 	vldr	s14, [r5, #4]
 8014542:	edd5 7a02 	vldr	s15, [r5, #8]
 8014546:	edd5 6a03 	vldr	s13, [r5, #12]
 801454a:	ee26 6a06 	vmul.f32	s12, s12, s12
 801454e:	ee27 7a07 	vmul.f32	s14, s14, s14
 8014552:	ee37 7a06 	vadd.f32	s14, s14, s12
 8014556:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801455a:	ee66 6aa6 	vmul.f32	s13, s13, s13
 801455e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014562:	ac4a      	add	r4, sp, #296	; 0x128
 8014564:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014568:	ee17 0a90 	vmov	r0, s15
 801456c:	f7eb fff4 	bl	8000558 <__aeabi_f2d>
 8014570:	ec41 0b10 	vmov	d0, r0, r1
 8014574:	f004 fa94 	bl	8018aa0 <sqrt>
 8014578:	ec51 0b10 	vmov	r0, r1, d0
 801457c:	f7ec fb38 	bl	8000bf0 <__aeabi_d2f>
 8014580:	ed95 6a00 	vldr	s12, [r5]
 8014584:	edd5 6a01 	vldr	s13, [r5, #4]
 8014588:	ed95 7a02 	vldr	s14, [r5, #8]
 801458c:	ed95 5a03 	vldr	s10, [r5, #12]
 8014590:	9f06      	ldr	r7, [sp, #24]
 8014592:	ee07 0a90 	vmov	s15, r0
 8014596:	eec6 5a27 	vdiv.f32	s11, s12, s15
 801459a:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 801459e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80145a2:	ee85 7a27 	vdiv.f32	s14, s10, s15
 80145a6:	edcd 5a4a 	vstr	s11, [sp, #296]	; 0x128
 80145aa:	ed8d 6a4b 	vstr	s12, [sp, #300]	; 0x12c
 80145ae:	edcd 6a4c 	vstr	s13, [sp, #304]	; 0x130
 80145b2:	ed8d 7a4d 	vstr	s14, [sp, #308]	; 0x134
 80145b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80145b8:	f8dd 46e8 	ldr.w	r4, [sp, #1768]	; 0x6e8
 80145bc:	6020      	str	r0, [r4, #0]
 80145be:	6061      	str	r1, [r4, #4]
 80145c0:	60a2      	str	r2, [r4, #8]
 80145c2:	60e3      	str	r3, [r4, #12]
 80145c4:	4638      	mov	r0, r7
 80145c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80145c8:	f7f8 fdac 	bl	800d124 <m_q2dcm_eml>
 80145cc:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80145d0:	ac46      	add	r4, sp, #280	; 0x118
 80145d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80145d6:	ed9d 6a46 	vldr	s12, [sp, #280]	; 0x118
 80145da:	ed9d 7a47 	vldr	s14, [sp, #284]	; 0x11c
 80145de:	eddd 7a48 	vldr	s15, [sp, #288]	; 0x120
 80145e2:	eddd 6a49 	vldr	s13, [sp, #292]	; 0x124
 80145e6:	ee26 6a06 	vmul.f32	s12, s12, s12
 80145ea:	ee27 7a07 	vmul.f32	s14, s14, s14
 80145ee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80145f2:	ee37 7a06 	vadd.f32	s14, s14, s12
 80145f6:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80145fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80145fe:	f50a 7616 	add.w	r6, sl, #600	; 0x258
 8014602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014606:	ee17 0a90 	vmov	r0, s15
 801460a:	f7eb ffa5 	bl	8000558 <__aeabi_f2d>
 801460e:	ec41 0b10 	vmov	d0, r0, r1
 8014612:	f004 fa45 	bl	8018aa0 <sqrt>
 8014616:	ec51 0b10 	vmov	r0, r1, d0
 801461a:	f7ec fae9 	bl	8000bf0 <__aeabi_d2f>
 801461e:	ed9d 6a46 	vldr	s12, [sp, #280]	; 0x118
 8014622:	eddd 6a47 	vldr	s13, [sp, #284]	; 0x11c
 8014626:	ed9d 7a48 	vldr	s14, [sp, #288]	; 0x120
 801462a:	ed9d 5a49 	vldr	s10, [sp, #292]	; 0x124
 801462e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8014630:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8014632:	ee07 0a90 	vmov	s15, r0
 8014636:	eec6 5a27 	vdiv.f32	s11, s12, s15
 801463a:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 801463e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014642:	ee85 7a27 	vdiv.f32	s14, s10, s15
 8014646:	edc7 5a00 	vstr	s11, [r7]
 801464a:	ed87 6a01 	vstr	s12, [r7, #4]
 801464e:	edc7 6a02 	vstr	s13, [r7, #8]
 8014652:	ed87 7a03 	vstr	s14, [r7, #12]
 8014656:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 801465a:	f8dd 76e4 	ldr.w	r7, [sp, #1764]	; 0x6e4
 801465e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8014662:	6821      	ldr	r1, [r4, #0]
 8014664:	6862      	ldr	r2, [r4, #4]
 8014666:	68a3      	ldr	r3, [r4, #8]
 8014668:	68e0      	ldr	r0, [r4, #12]
 801466a:	60e8      	str	r0, [r5, #12]
 801466c:	3410      	adds	r4, #16
 801466e:	42b4      	cmp	r4, r6
 8014670:	6029      	str	r1, [r5, #0]
 8014672:	606a      	str	r2, [r5, #4]
 8014674:	60ab      	str	r3, [r5, #8]
 8014676:	f105 0510 	add.w	r5, r5, #16
 801467a:	d1f2      	bne.n	8014662 <m_kalman_3gyro.isra.9.constprop.47+0x3162>
 801467c:	6823      	ldr	r3, [r4, #0]
 801467e:	602b      	str	r3, [r5, #0]
 8014680:	f8dd 26f0 	ldr.w	r2, [sp, #1776]	; 0x6f0
 8014684:	f8da 3094 	ldr.w	r3, [sl, #148]	; 0x94
 8014688:	6013      	str	r3, [r2, #0]
 801468a:	f8da 3098 	ldr.w	r3, [sl, #152]	; 0x98
 801468e:	6053      	str	r3, [r2, #4]
 8014690:	f8da 309c 	ldr.w	r3, [sl, #156]	; 0x9c
 8014694:	6093      	str	r3, [r2, #8]
 8014696:	f8da 30a0 	ldr.w	r3, [sl, #160]	; 0xa0
 801469a:	60d3      	str	r3, [r2, #12]
 801469c:	f8da 30a4 	ldr.w	r3, [sl, #164]	; 0xa4
 80146a0:	6113      	str	r3, [r2, #16]
 80146a2:	f8da 30a8 	ldr.w	r3, [sl, #168]	; 0xa8
 80146a6:	6153      	str	r3, [r2, #20]
 80146a8:	f8da 30ac 	ldr.w	r3, [sl, #172]	; 0xac
 80146ac:	6193      	str	r3, [r2, #24]
 80146ae:	f8da 30b0 	ldr.w	r3, [sl, #176]	; 0xb0
 80146b2:	61d3      	str	r3, [r2, #28]
 80146b4:	f8da 30b4 	ldr.w	r3, [sl, #180]	; 0xb4
 80146b8:	6213      	str	r3, [r2, #32]
 80146ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80146bc:	f8dd 26ec 	ldr.w	r2, [sp, #1772]	; 0x6ec
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	6013      	str	r3, [r2, #0]
 80146c4:	f20d 6d54 	addw	sp, sp, #1620	; 0x654
 80146c8:	ecbd 8b10 	vpop	{d8-d15}
 80146cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146d0:	2300      	movs	r3, #0
 80146d2:	f88a 31ff 	strb.w	r3, [sl, #511]	; 0x1ff
 80146d6:	f88a 3200 	strb.w	r3, [sl, #512]	; 0x200
 80146da:	f88a 3201 	strb.w	r3, [sl, #513]	; 0x201
 80146de:	f88a 3205 	strb.w	r3, [sl, #517]	; 0x205
 80146e2:	f88a 3206 	strb.w	r3, [sl, #518]	; 0x206
 80146e6:	f7ff b899 	b.w	801381c <m_kalman_3gyro.isra.9.constprop.47+0x231c>
 80146ea:	2301      	movs	r3, #1
 80146ec:	f7ff b80b 	b.w	8013706 <m_kalman_3gyro.isra.9.constprop.47+0x2206>
 80146f0:	f8dd 16e8 	ldr.w	r1, [sp, #1768]	; 0x6e8
 80146f4:	9806      	ldr	r0, [sp, #24]
 80146f6:	2300      	movs	r3, #0
 80146f8:	600b      	str	r3, [r1, #0]
 80146fa:	f8dd 16e8 	ldr.w	r1, [sp, #1768]	; 0x6e8
 80146fe:	6003      	str	r3, [r0, #0]
 8014700:	604b      	str	r3, [r1, #4]
 8014702:	f8dd 16e8 	ldr.w	r1, [sp, #1768]	; 0x6e8
 8014706:	6043      	str	r3, [r0, #4]
 8014708:	608b      	str	r3, [r1, #8]
 801470a:	6083      	str	r3, [r0, #8]
 801470c:	f8dd 36e8 	ldr.w	r3, [sp, #1768]	; 0x6e8
 8014710:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8014714:	60c2      	str	r2, [r0, #12]
 8014716:	60da      	str	r2, [r3, #12]
 8014718:	4607      	mov	r7, r0
 801471a:	e753      	b.n	80145c4 <m_kalman_3gyro.isra.9.constprop.47+0x30c4>
 801471c:	2300      	movs	r3, #0
 801471e:	f88a 3202 	strb.w	r3, [sl, #514]	; 0x202
 8014722:	f88a 3203 	strb.w	r3, [sl, #515]	; 0x203
 8014726:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 801472a:	f8ca 3458 	str.w	r3, [sl, #1112]	; 0x458
 801472e:	f7fe be16 	b.w	801335e <m_kalman_3gyro.isra.9.constprop.47+0x1e5e>
 8014732:	f8da 30a8 	ldr.w	r3, [sl, #168]	; 0xa8
 8014736:	f8da 20a4 	ldr.w	r2, [sl, #164]	; 0xa4
 801473a:	f8ca 3084 	str.w	r3, [sl, #132]	; 0x84
 801473e:	f89a 3030 	ldrb.w	r3, [sl, #48]	; 0x30
 8014742:	f8ca 2080 	str.w	r2, [sl, #128]	; 0x80
 8014746:	f8da 20a0 	ldr.w	r2, [sl, #160]	; 0xa0
 801474a:	f88a 1202 	strb.w	r1, [sl, #514]	; 0x202
 801474e:	f88a 1203 	strb.w	r1, [sl, #515]	; 0x203
 8014752:	f88a 1204 	strb.w	r1, [sl, #516]	; 0x204
 8014756:	f8ca 145c 	str.w	r1, [sl, #1116]	; 0x45c
 801475a:	f8ca 207c 	str.w	r2, [sl, #124]	; 0x7c
 801475e:	2b00      	cmp	r3, #0
 8014760:	f000 81c9 	beq.w	8014af6 <m_kalman_3gyro.isra.9.constprop.47+0x35f6>
 8014764:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8014768:	f88a 3030 	strb.w	r3, [sl, #48]	; 0x30
 801476c:	ac81      	add	r4, sp, #516	; 0x204
 801476e:	f7fe bdd9 	b.w	8013324 <m_kalman_3gyro.isra.9.constprop.47+0x1e24>
 8014772:	eddd ba5e 	vldr	s23, [sp, #376]	; 0x178
 8014776:	eef4 aaeb 	vcmpe.f32	s21, s23
 801477a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801477e:	f2c0 81f5 	blt.w	8014b6c <m_kalman_3gyro.isra.9.constprop.47+0x366c>
 8014782:	ed9d aa65 	vldr	s20, [sp, #404]	; 0x194
 8014786:	f7fe bc2e 	b.w	8012fe6 <m_kalman_3gyro.isra.9.constprop.47+0x1ae6>
 801478a:	eeb0 3a48 	vmov.f32	s6, s16
 801478e:	eef0 7a48 	vmov.f32	s15, s16
 8014792:	e50f      	b.n	80141b4 <m_kalman_3gyro.isra.9.constprop.47+0x2cb4>
 8014794:	4be4      	ldr	r3, [pc, #912]	; (8014b28 <m_kalman_3gyro.isra.9.constprop.47+0x3628>)
 8014796:	f893 3430 	ldrb.w	r3, [r3, #1072]	; 0x430
 801479a:	2b04      	cmp	r3, #4
 801479c:	f240 82e3 	bls.w	8014d66 <m_kalman_3gyro.isra.9.constprop.47+0x3866>
 80147a0:	4be2      	ldr	r3, [pc, #904]	; (8014b2c <m_kalman_3gyro.isra.9.constprop.47+0x362c>)
 80147a2:	ed9f 4ae3 	vldr	s8, [pc, #908]	; 8014b30 <m_kalman_3gyro.isra.9.constprop.47+0x3630>
 80147a6:	ed93 1a04 	vldr	s2, [r3, #16]
 80147aa:	ed93 3a06 	vldr	s6, [r3, #24]
 80147ae:	ed93 7a03 	vldr	s14, [r3, #12]
 80147b2:	eddf 5ae0 	vldr	s11, [pc, #896]	; 8014b34 <m_kalman_3gyro.isra.9.constprop.47+0x3634>
 80147b6:	edd3 3a12 	vldr	s7, [r3, #72]	; 0x48
 80147ba:	edd3 7a07 	vldr	s15, [r3, #28]
 80147be:	ed93 6a15 	vldr	s12, [r3, #84]	; 0x54
 80147c2:	ed83 7a00 	vstr	s14, [r3]
 80147c6:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80147ca:	ed83 1a01 	vstr	s2, [r3, #4]
 80147ce:	ee61 9a04 	vmul.f32	s19, s2, s8
 80147d2:	ee27 7a04 	vmul.f32	s14, s14, s8
 80147d6:	ee23 1a25 	vmul.f32	s2, s6, s11
 80147da:	edd3 aa05 	vldr	s21, [r3, #20]
 80147de:	edd3 4a08 	vldr	s9, [r3, #32]
 80147e2:	ed93 2a0a 	vldr	s4, [r3, #40]	; 0x28
 80147e6:	edd2 0a04 	vldr	s1, [r2, #16]
 80147ea:	ed92 aa05 	vldr	s20, [r2, #20]
 80147ee:	ed92 0a07 	vldr	s0, [r2, #28]
 80147f2:	edd3 1a09 	vldr	s3, [r3, #36]	; 0x24
 80147f6:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80147fa:	edd2 2a08 	vldr	s5, [r2, #32]
 80147fe:	ed92 5a09 	vldr	s10, [r2, #36]	; 0x24
 8014802:	edc2 3a00 	vstr	s7, [r2]
 8014806:	ed83 3a03 	vstr	s6, [r3, #12]
 801480a:	edc3 7a04 	vstr	s15, [r3, #16]
 801480e:	ee23 3a84 	vmul.f32	s6, s7, s8
 8014812:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8014816:	ee66 3a25 	vmul.f32	s7, s12, s11
 801481a:	ee37 7a01 	vadd.f32	s14, s14, s2
 801481e:	ed9f 1ac6 	vldr	s2, [pc, #792]	; 8014b38 <m_kalman_3gyro.isra.9.constprop.47+0x3638>
 8014822:	edc2 0a01 	vstr	s1, [r2, #4]
 8014826:	ed82 aa02 	vstr	s20, [r2, #8]
 801482a:	ed82 0a04 	vstr	s0, [r2, #16]
 801482e:	edc2 2a05 	vstr	s5, [r2, #20]
 8014832:	ed82 5a06 	vstr	s10, [r2, #24]
 8014836:	edc3 aa02 	vstr	s21, [r3, #8]
 801483a:	edc3 4a05 	vstr	s9, [r3, #20]
 801483e:	edc3 1a06 	vstr	s3, [r3, #24]
 8014842:	ed83 2a07 	vstr	s4, [r3, #28]
 8014846:	edc3 6a08 	vstr	s13, [r3, #32]
 801484a:	ed82 6a03 	vstr	s12, [r2, #12]
 801484e:	ee6a aa84 	vmul.f32	s21, s21, s8
 8014852:	ed92 6a0a 	vldr	s12, [r2, #40]	; 0x28
 8014856:	ed93 ba0d 	vldr	s22, [r3, #52]	; 0x34
 801485a:	9808      	ldr	r0, [sp, #32]
 801485c:	9c07      	ldr	r4, [sp, #28]
 801485e:	ed82 6a07 	vstr	s12, [r2, #28]
 8014862:	ee60 0a84 	vmul.f32	s1, s1, s8
 8014866:	ee2a aa04 	vmul.f32	s20, s20, s8
 801486a:	ee62 2aa5 	vmul.f32	s5, s5, s11
 801486e:	ee20 4a25 	vmul.f32	s8, s0, s11
 8014872:	ee25 5a01 	vmul.f32	s10, s10, s2
 8014876:	ee79 9aa7 	vadd.f32	s19, s19, s15
 801487a:	ee64 4aa5 	vmul.f32	s9, s9, s11
 801487e:	ee62 7a01 	vmul.f32	s15, s4, s2
 8014882:	edd2 5a0c 	vldr	s11, [r2, #48]	; 0x30
 8014886:	ed9f 2aad 	vldr	s4, [pc, #692]	; 8014b3c <m_kalman_3gyro.isra.9.constprop.47+0x363c>
 801488a:	edc2 5a09 	vstr	s11, [r2, #36]	; 0x24
 801488e:	ee61 1a81 	vmul.f32	s3, s3, s2
 8014892:	ee73 3a23 	vadd.f32	s7, s6, s7
 8014896:	ed93 3a0c 	vldr	s6, [r3, #48]	; 0x30
 801489a:	ed83 ba0a 	vstr	s22, [r3, #40]	; 0x28
 801489e:	ed83 3a09 	vstr	s6, [r3, #36]	; 0x24
 80148a2:	ee30 0a84 	vadd.f32	s0, s1, s8
 80148a6:	ee7a 4aa4 	vadd.f32	s9, s21, s9
 80148aa:	ed93 4a0e 	vldr	s8, [r3, #56]	; 0x38
 80148ae:	edd0 0a01 	vldr	s1, [r0, #4]
 80148b2:	edd0 aa00 	vldr	s21, [r0]
 80148b6:	edc3 0a0d 	vstr	s1, [r3, #52]	; 0x34
 80148ba:	ee77 1a21 	vadd.f32	s3, s14, s3
 80148be:	ee23 3a02 	vmul.f32	s6, s6, s4
 80148c2:	ee3a 7a22 	vadd.f32	s14, s20, s5
 80148c6:	ee73 3a85 	vadd.f32	s7, s7, s10
 80148ca:	ed94 aa00 	vldr	s20, [r4]
 80148ce:	edd2 2a0b 	vldr	s5, [r2, #44]	; 0x2c
 80148d2:	edc3 aa0c 	vstr	s21, [r3, #48]	; 0x30
 80148d6:	ee2b 5a02 	vmul.f32	s10, s22, s4
 80148da:	ee65 5a82 	vmul.f32	s11, s11, s4
 80148de:	ee79 9aa7 	vadd.f32	s19, s19, s15
 80148e2:	ee66 6a81 	vmul.f32	s13, s13, s2
 80148e6:	eddf 7a96 	vldr	s15, [pc, #600]	; 8014b40 <m_kalman_3gyro.isra.9.constprop.47+0x3640>
 80148ea:	ed82 aa0c 	vstr	s20, [r2, #48]	; 0x30
 80148ee:	ee24 ba02 	vmul.f32	s22, s8, s4
 80148f2:	ee71 ba83 	vadd.f32	s23, s3, s6
 80148f6:	ee79 9a85 	vadd.f32	s19, s19, s10
 80148fa:	edd0 1a02 	vldr	s3, [r0, #8]
 80148fe:	ed92 5a0d 	vldr	s10, [r2, #52]	; 0x34
 8014902:	ed83 4a0b 	vstr	s8, [r3, #44]	; 0x2c
 8014906:	ee20 3aa7 	vmul.f32	s6, s1, s15
 801490a:	ee74 6aa6 	vadd.f32	s13, s9, s13
 801490e:	ee26 6a01 	vmul.f32	s12, s12, s2
 8014912:	ee73 4aa5 	vadd.f32	s9, s7, s11
 8014916:	ee6a aaa7 	vmul.f32	s21, s21, s15
 801491a:	ee2a aa27 	vmul.f32	s20, s20, s15
 801491e:	ee39 3a83 	vadd.f32	s6, s19, s6
 8014922:	ee61 0aa7 	vmul.f32	s1, s3, s15
 8014926:	ee22 1a81 	vmul.f32	s2, s5, s2
 801492a:	edd4 5a01 	vldr	s11, [r4, #4]
 801492e:	ed82 5a0a 	vstr	s10, [r2, #40]	; 0x28
 8014932:	ee7b 3aaa 	vadd.f32	s7, s23, s21
 8014936:	ee74 4a8a 	vadd.f32	s9, s9, s20
 801493a:	ee25 5a02 	vmul.f32	s10, s10, s4
 801493e:	ee30 6a06 	vadd.f32	s12, s0, s12
 8014942:	ee76 6a8b 	vadd.f32	s13, s13, s22
 8014946:	ed92 0a0e 	vldr	s0, [r2, #56]	; 0x38
 801494a:	edc2 5a0d 	vstr	s11, [r2, #52]	; 0x34
 801494e:	ee20 2a02 	vmul.f32	s4, s0, s4
 8014952:	ee14 0a90 	vmov	r0, s9
 8014956:	ee76 6aa0 	vadd.f32	s13, s13, s1
 801495a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 801495e:	ee63 0a03 	vmul.f32	s1, s6, s6
 8014962:	ee37 7a01 	vadd.f32	s14, s14, s2
 8014966:	ee36 6a05 	vadd.f32	s12, s12, s10
 801496a:	ed94 1a02 	vldr	s2, [r4, #8]
 801496e:	edc3 1a0e 	vstr	s3, [r3, #56]	; 0x38
 8014972:	461c      	mov	r4, r3
 8014974:	ee23 5aa3 	vmul.f32	s10, s7, s7
 8014978:	4619      	mov	r1, r3
 801497a:	ee37 7a02 	vadd.f32	s14, s14, s4
 801497e:	ee36 6a25 	vadd.f32	s12, s12, s11
 8014982:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014986:	ee75 5a20 	vadd.f32	s11, s10, s1
 801498a:	f844 0f84 	str.w	r0, [r4, #132]!
 801498e:	ee26 5aa6 	vmul.f32	s10, s13, s13
 8014992:	ee13 0a90 	vmov	r0, s7
 8014996:	ee77 7a27 	vadd.f32	s15, s14, s15
 801499a:	f841 0f78 	str.w	r0, [r1, #120]!
 801499e:	ee35 7a25 	vadd.f32	s14, s10, s11
 80149a2:	ed81 3a01 	vstr	s6, [r1, #4]
 80149a6:	ed82 1a0e 	vstr	s2, [r2, #56]	; 0x38
 80149aa:	edc1 6a02 	vstr	s13, [r1, #8]
 80149ae:	ee17 0a10 	vmov	r0, s14
 80149b2:	ed82 0a0b 	vstr	s0, [r2, #44]	; 0x2c
 80149b6:	edc2 2a08 	vstr	s5, [r2, #32]
 80149ba:	ed84 6a01 	vstr	s12, [r4, #4]
 80149be:	edc4 7a02 	vstr	s15, [r4, #8]
 80149c2:	f7eb fdc9 	bl	8000558 <__aeabi_f2d>
 80149c6:	ec41 0b10 	vmov	d0, r0, r1
 80149ca:	f004 f869 	bl	8018aa0 <sqrt>
 80149ce:	edd4 7a00 	vldr	s15, [r4]
 80149d2:	edd4 6a01 	vldr	s13, [r4, #4]
 80149d6:	ed94 7a02 	vldr	s14, [r4, #8]
 80149da:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80149de:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80149e2:	ee27 7a07 	vmul.f32	s14, s14, s14
 80149e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80149ea:	ec57 6b10 	vmov	r6, r7, d0
 80149ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80149f2:	ee17 0a90 	vmov	r0, s15
 80149f6:	f7eb fdaf 	bl	8000558 <__aeabi_f2d>
 80149fa:	ec41 0b10 	vmov	d0, r0, r1
 80149fe:	f004 f84f 	bl	8018aa0 <sqrt>
 8014a02:	ec51 0b10 	vmov	r0, r1, d0
 8014a06:	f7ec f8f3 	bl	8000bf0 <__aeabi_d2f>
 8014a0a:	4639      	mov	r1, r7
 8014a0c:	ee09 0a90 	vmov	s19, r0
 8014a10:	4630      	mov	r0, r6
 8014a12:	f7ec f8ed 	bl	8000bf0 <__aeabi_d2f>
 8014a16:	ee07 0a90 	vmov	s15, r0
 8014a1a:	eeb4 dae7 	vcmpe.f32	s26, s15
 8014a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a22:	dd68      	ble.n	8014af6 <m_kalman_3gyro.isra.9.constprop.47+0x35f6>
 8014a24:	eeb4 fae9 	vcmpe.f32	s30, s19
 8014a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a2c:	dd63      	ble.n	8014af6 <m_kalman_3gyro.isra.9.constprop.47+0x35f6>
 8014a2e:	9b07      	ldr	r3, [sp, #28]
 8014a30:	ed93 7a00 	vldr	s14, [r3]
 8014a34:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 8014a38:	eeb0 7ac7 	vabs.f32	s14, s14
 8014a3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a44:	d557      	bpl.n	8014af6 <m_kalman_3gyro.isra.9.constprop.47+0x35f6>
 8014a46:	ed93 7a01 	vldr	s14, [r3, #4]
 8014a4a:	eeb0 7ac7 	vabs.f32	s14, s14
 8014a4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a56:	d54e      	bpl.n	8014af6 <m_kalman_3gyro.isra.9.constprop.47+0x35f6>
 8014a58:	ed93 7a02 	vldr	s14, [r3, #8]
 8014a5c:	eeb0 7ac7 	vabs.f32	s14, s14
 8014a60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a68:	d545      	bpl.n	8014af6 <m_kalman_3gyro.isra.9.constprop.47+0x35f6>
 8014a6a:	9b08      	ldr	r3, [sp, #32]
 8014a6c:	edd3 7a00 	vldr	s15, [r3]
 8014a70:	eef0 7ae7 	vabs.f32	s15, s15
 8014a74:	ee17 0a90 	vmov	r0, s15
 8014a78:	f7eb fd6e 	bl	8000558 <__aeabi_f2d>
 8014a7c:	a328      	add	r3, pc, #160	; (adr r3, 8014b20 <m_kalman_3gyro.isra.9.constprop.47+0x3620>)
 8014a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a82:	f7ec f82f 	bl	8000ae4 <__aeabi_dcmplt>
 8014a86:	b3b0      	cbz	r0, 8014af6 <m_kalman_3gyro.isra.9.constprop.47+0x35f6>
 8014a88:	9b08      	ldr	r3, [sp, #32]
 8014a8a:	edd3 7a01 	vldr	s15, [r3, #4]
 8014a8e:	eef0 7ae7 	vabs.f32	s15, s15
 8014a92:	ee17 0a90 	vmov	r0, s15
 8014a96:	f7eb fd5f 	bl	8000558 <__aeabi_f2d>
 8014a9a:	a321      	add	r3, pc, #132	; (adr r3, 8014b20 <m_kalman_3gyro.isra.9.constprop.47+0x3620>)
 8014a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014aa0:	f7ec f820 	bl	8000ae4 <__aeabi_dcmplt>
 8014aa4:	b338      	cbz	r0, 8014af6 <m_kalman_3gyro.isra.9.constprop.47+0x35f6>
 8014aa6:	9b08      	ldr	r3, [sp, #32]
 8014aa8:	edd3 7a02 	vldr	s15, [r3, #8]
 8014aac:	eef0 7ae7 	vabs.f32	s15, s15
 8014ab0:	ee17 0a90 	vmov	r0, s15
 8014ab4:	f7eb fd50 	bl	8000558 <__aeabi_f2d>
 8014ab8:	a319      	add	r3, pc, #100	; (adr r3, 8014b20 <m_kalman_3gyro.isra.9.constprop.47+0x3620>)
 8014aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014abe:	f7ec f811 	bl	8000ae4 <__aeabi_dcmplt>
 8014ac2:	b1c0      	cbz	r0, 8014af6 <m_kalman_3gyro.isra.9.constprop.47+0x35f6>
 8014ac4:	f8da 2450 	ldr.w	r2, [sl, #1104]	; 0x450
 8014ac8:	2a0a      	cmp	r2, #10
 8014aca:	f000 810c 	beq.w	8014ce6 <m_kalman_3gyro.isra.9.constprop.47+0x37e6>
 8014ace:	2300      	movs	r3, #0
 8014ad0:	2a00      	cmp	r2, #0
 8014ad2:	f88a 3202 	strb.w	r3, [sl, #514]	; 0x202
 8014ad6:	f88a 3203 	strb.w	r3, [sl, #515]	; 0x203
 8014ada:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 8014ade:	f102 0301 	add.w	r3, r2, #1
 8014ae2:	dd03      	ble.n	8014aec <m_kalman_3gyro.isra.9.constprop.47+0x35ec>
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	bfd8      	it	le
 8014ae8:	f06f 4300 	mvnle.w	r3, #2147483648	; 0x80000000
 8014aec:	2200      	movs	r2, #0
 8014aee:	f8ca 3450 	str.w	r3, [sl, #1104]	; 0x450
 8014af2:	f8ca 245c 	str.w	r2, [sl, #1116]	; 0x45c
 8014af6:	ac81      	add	r4, sp, #516	; 0x204
 8014af8:	f7fe bc14 	b.w	8013324 <m_kalman_3gyro.isra.9.constprop.47+0x1e24>
 8014afc:	eeb0 4a48 	vmov.f32	s8, s16
 8014b00:	e442      	b.n	8014388 <m_kalman_3gyro.isra.9.constprop.47+0x2e88>
 8014b02:	eeb0 5a48 	vmov.f32	s10, s16
 8014b06:	e458      	b.n	80143ba <m_kalman_3gyro.isra.9.constprop.47+0x2eba>
 8014b08:	eef0 6a48 	vmov.f32	s13, s16
 8014b0c:	eeb0 ca48 	vmov.f32	s24, s16
 8014b10:	e417      	b.n	8014342 <m_kalman_3gyro.isra.9.constprop.47+0x2e42>
 8014b12:	eeb0 5a48 	vmov.f32	s10, s16
 8014b16:	f7ff bb3d 	b.w	8014194 <m_kalman_3gyro.isra.9.constprop.47+0x2c94>
 8014b1a:	bf00      	nop
 8014b1c:	f3af 8000 	nop.w
 8014b20:	66666666 	.word	0x66666666
 8014b24:	3ff66666 	.word	0x3ff66666
 8014b28:	20001670 	.word	0x20001670
 8014b2c:	20001aa4 	.word	0x20001aa4
 8014b30:	be4ccccd 	.word	0xbe4ccccd
 8014b34:	bdcccccd 	.word	0xbdcccccd
 8014b38:	00000000 	.word	0x00000000
 8014b3c:	3dcccccd 	.word	0x3dcccccd
 8014b40:	3e4ccccd 	.word	0x3e4ccccd
 8014b44:	f89a 28ae 	ldrb.w	r2, [sl, #2222]	; 0x8ae
 8014b48:	2a00      	cmp	r2, #0
 8014b4a:	d05e      	beq.n	8014c0a <m_kalman_3gyro.isra.9.constprop.47+0x370a>
 8014b4c:	3a01      	subs	r2, #1
 8014b4e:	2300      	movs	r3, #0
 8014b50:	f88a 28ae 	strb.w	r2, [sl, #2222]	; 0x8ae
 8014b54:	f88a 31fc 	strb.w	r3, [sl, #508]	; 0x1fc
 8014b58:	f88a 31fd 	strb.w	r3, [sl, #509]	; 0x1fd
 8014b5c:	f88a 31fe 	strb.w	r3, [sl, #510]	; 0x1fe
 8014b60:	f88a 3205 	strb.w	r3, [sl, #517]	; 0x205
 8014b64:	f88a 3207 	strb.w	r3, [sl, #519]	; 0x207
 8014b68:	f7fe be90 	b.w	801388c <m_kalman_3gyro.isra.9.constprop.47+0x238c>
 8014b6c:	4b92      	ldr	r3, [pc, #584]	; (8014db8 <m_kalman_3gyro.isra.9.constprop.47+0x38b8>)
 8014b6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014b72:	f7ec f83d 	bl	8000bf0 <__aeabi_d2f>
 8014b76:	eef4 aacb 	vcmpe.f32	s21, s22
 8014b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b7e:	ee0a 0a10 	vmov	s20, r0
 8014b82:	f6fe aa30 	blt.w	8012fe6 <m_kalman_3gyro.isra.9.constprop.47+0x1ae6>
 8014b86:	eef4 aaeb 	vcmpe.f32	s21, s23
 8014b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b8e:	f63e aa2a 	bhi.w	8012fe6 <m_kalman_3gyro.isra.9.constprop.47+0x1ae6>
 8014b92:	2007      	movs	r0, #7
 8014b94:	2402      	movs	r4, #2
 8014b96:	2301      	movs	r3, #1
 8014b98:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
 8014b9c:	e009      	b.n	8014bb2 <m_kalman_3gyro.isra.9.constprop.47+0x36b2>
 8014b9e:	edd1 7a00 	vldr	s15, [r1]
 8014ba2:	eef4 aae7 	vcmpe.f32	s21, s15
 8014ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014baa:	bfa6      	itte	ge
 8014bac:	1c54      	addge	r4, r2, #1
 8014bae:	4613      	movge	r3, r2
 8014bb0:	4610      	movlt	r0, r2
 8014bb2:	18c2      	adds	r2, r0, r3
 8014bb4:	0852      	lsrs	r2, r2, #1
 8014bb6:	1951      	adds	r1, r2, r5
 8014bb8:	f50d 66ca 	add.w	r6, sp, #1616	; 0x650
 8014bbc:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 8014bc0:	42a0      	cmp	r0, r4
 8014bc2:	f5a1 619e 	sub.w	r1, r1, #1264	; 0x4f0
 8014bc6:	d8ea      	bhi.n	8014b9e <m_kalman_3gyro.isra.9.constprop.47+0x369e>
 8014bc8:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8014bcc:	3a01      	subs	r2, #1
 8014bce:	0092      	lsls	r2, r2, #2
 8014bd0:	009b      	lsls	r3, r3, #2
 8014bd2:	a958      	add	r1, sp, #352	; 0x160
 8014bd4:	1888      	adds	r0, r1, r2
 8014bd6:	4419      	add	r1, r3
 8014bd8:	ed90 7a00 	vldr	s14, [r0]
 8014bdc:	edd1 7a00 	vldr	s15, [r1]
 8014be0:	ee7a aac7 	vsub.f32	s21, s21, s14
 8014be4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014be8:	a95f      	add	r1, sp, #380	; 0x17c
 8014bea:	ee8a aaa7 	vdiv.f32	s20, s21, s15
 8014bee:	440a      	add	r2, r1
 8014bf0:	440b      	add	r3, r1
 8014bf2:	ed92 7a00 	vldr	s14, [r2]
 8014bf6:	edd3 7a00 	vldr	s15, [r3]
 8014bfa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014bfe:	ee2a aa27 	vmul.f32	s20, s20, s15
 8014c02:	ee3a aa07 	vadd.f32	s20, s20, s14
 8014c06:	f7fe b9ee 	b.w	8012fe6 <m_kalman_3gyro.isra.9.constprop.47+0x1ae6>
 8014c0a:	f8da 58b0 	ldr.w	r5, [sl, #2224]	; 0x8b0
 8014c0e:	b175      	cbz	r5, 8014c2e <m_kalman_3gyro.isra.9.constprop.47+0x372e>
 8014c10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014c12:	6818      	ldr	r0, [r3, #0]
 8014c14:	f7eb fca0 	bl	8000558 <__aeabi_f2d>
 8014c18:	a365      	add	r3, pc, #404	; (adr r3, 8014db0 <m_kalman_3gyro.isra.9.constprop.47+0x38b0>)
 8014c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c1e:	f7eb ff7f 	bl	8000b20 <__aeabi_dcmpgt>
 8014c22:	b120      	cbz	r0, 8014c2e <m_kalman_3gyro.isra.9.constprop.47+0x372e>
 8014c24:	3d01      	subs	r5, #1
 8014c26:	f8ca 58b0 	str.w	r5, [sl, #2224]	; 0x8b0
 8014c2a:	f7fe be2f 	b.w	801388c <m_kalman_3gyro.isra.9.constprop.47+0x238c>
 8014c2e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8014c30:	6818      	ldr	r0, [r3, #0]
 8014c32:	f7eb fc91 	bl	8000558 <__aeabi_f2d>
 8014c36:	4606      	mov	r6, r0
 8014c38:	ee1d 0a10 	vmov	r0, s26
 8014c3c:	460f      	mov	r7, r1
 8014c3e:	f7eb fc8b 	bl	8000558 <__aeabi_f2d>
 8014c42:	2200      	movs	r2, #0
 8014c44:	4b5d      	ldr	r3, [pc, #372]	; (8014dbc <m_kalman_3gyro.isra.9.constprop.47+0x38bc>)
 8014c46:	f7eb fcdb 	bl	8000600 <__aeabi_dmul>
 8014c4a:	4602      	mov	r2, r0
 8014c4c:	460b      	mov	r3, r1
 8014c4e:	4630      	mov	r0, r6
 8014c50:	4639      	mov	r1, r7
 8014c52:	f7eb ff47 	bl	8000ae4 <__aeabi_dcmplt>
 8014c56:	2800      	cmp	r0, #0
 8014c58:	f43e ae18 	beq.w	801388c <m_kalman_3gyro.isra.9.constprop.47+0x238c>
 8014c5c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8014c5e:	6818      	ldr	r0, [r3, #0]
 8014c60:	f7eb fc7a 	bl	8000558 <__aeabi_f2d>
 8014c64:	4606      	mov	r6, r0
 8014c66:	ee1f 0a10 	vmov	r0, s30
 8014c6a:	460f      	mov	r7, r1
 8014c6c:	f7eb fc74 	bl	8000558 <__aeabi_f2d>
 8014c70:	2200      	movs	r2, #0
 8014c72:	4b52      	ldr	r3, [pc, #328]	; (8014dbc <m_kalman_3gyro.isra.9.constprop.47+0x38bc>)
 8014c74:	f7eb fcc4 	bl	8000600 <__aeabi_dmul>
 8014c78:	4602      	mov	r2, r0
 8014c7a:	460b      	mov	r3, r1
 8014c7c:	4630      	mov	r0, r6
 8014c7e:	4639      	mov	r1, r7
 8014c80:	f7eb ff30 	bl	8000ae4 <__aeabi_dcmplt>
 8014c84:	2800      	cmp	r0, #0
 8014c86:	f43e ae01 	beq.w	801388c <m_kalman_3gyro.isra.9.constprop.47+0x238c>
 8014c8a:	4b4d      	ldr	r3, [pc, #308]	; (8014dc0 <m_kalman_3gyro.isra.9.constprop.47+0x38c0>)
 8014c8c:	6818      	ldr	r0, [r3, #0]
 8014c8e:	f7eb fc63 	bl	8000558 <__aeabi_f2d>
 8014c92:	4606      	mov	r6, r0
 8014c94:	ee1e 0a90 	vmov	r0, s29
 8014c98:	460f      	mov	r7, r1
 8014c9a:	f7eb fc5d 	bl	8000558 <__aeabi_f2d>
 8014c9e:	4602      	mov	r2, r0
 8014ca0:	460b      	mov	r3, r1
 8014ca2:	f7eb fafb 	bl	800029c <__adddf3>
 8014ca6:	4602      	mov	r2, r0
 8014ca8:	460b      	mov	r3, r1
 8014caa:	4630      	mov	r0, r6
 8014cac:	4639      	mov	r1, r7
 8014cae:	f7eb ff37 	bl	8000b20 <__aeabi_dcmpgt>
 8014cb2:	2800      	cmp	r0, #0
 8014cb4:	f000 8387 	beq.w	80153c6 <m_kalman_3gyro.isra.9.constprop.47+0x3ec6>
 8014cb8:	f89a 28ad 	ldrb.w	r2, [sl, #2221]	; 0x8ad
 8014cbc:	2300      	movs	r3, #0
 8014cbe:	2a0e      	cmp	r2, #14
 8014cc0:	f88a 31fc 	strb.w	r3, [sl, #508]	; 0x1fc
 8014cc4:	f88a 31fd 	strb.w	r3, [sl, #509]	; 0x1fd
 8014cc8:	f88a 31fe 	strb.w	r3, [sl, #510]	; 0x1fe
 8014ccc:	f88a 3205 	strb.w	r3, [sl, #517]	; 0x205
 8014cd0:	f88a 3207 	strb.w	r3, [sl, #519]	; 0x207
 8014cd4:	bf95      	itete	ls
 8014cd6:	3203      	addls	r2, #3
 8014cd8:	2364      	movhi	r3, #100	; 0x64
 8014cda:	f88a 28ad 	strbls.w	r2, [sl, #2221]	; 0x8ad
 8014cde:	f8ca 38b0 	strhi.w	r3, [sl, #2224]	; 0x8b0
 8014ce2:	f7fe bdd3 	b.w	801388c <m_kalman_3gyro.isra.9.constprop.47+0x238c>
 8014ce6:	2301      	movs	r3, #1
 8014ce8:	9907      	ldr	r1, [sp, #28]
 8014cea:	f88a 3202 	strb.w	r3, [sl, #514]	; 0x202
 8014cee:	f88a 3203 	strb.w	r3, [sl, #515]	; 0x203
 8014cf2:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 8014cf6:	680a      	ldr	r2, [r1, #0]
 8014cf8:	f8ca 207c 	str.w	r2, [sl, #124]	; 0x7c
 8014cfc:	684a      	ldr	r2, [r1, #4]
 8014cfe:	f8ca 2080 	str.w	r2, [sl, #128]	; 0x80
 8014d02:	688a      	ldr	r2, [r1, #8]
 8014d04:	f8ca 2084 	str.w	r2, [sl, #132]	; 0x84
 8014d08:	f8dd 26f8 	ldr.w	r2, [sp, #1784]	; 0x6f8
 8014d0c:	7013      	strb	r3, [r2, #0]
 8014d0e:	f8da 345c 	ldr.w	r3, [sl, #1116]	; 0x45c
 8014d12:	f89a 2030 	ldrb.w	r2, [sl, #48]	; 0x30
 8014d16:	3301      	adds	r3, #1
 8014d18:	f8ca 345c 	str.w	r3, [sl, #1116]	; 0x45c
 8014d1c:	b172      	cbz	r2, 8014d3c <m_kalman_3gyro.isra.9.constprop.47+0x383c>
 8014d1e:	f8da 1080 	ldr.w	r1, [sl, #128]	; 0x80
 8014d22:	f8da 2084 	ldr.w	r2, [sl, #132]	; 0x84
 8014d26:	f8ca 10a4 	str.w	r1, [sl, #164]	; 0xa4
 8014d2a:	f8ca 20a8 	str.w	r2, [sl, #168]	; 0xa8
 8014d2e:	f8da 107c 	ldr.w	r1, [sl, #124]	; 0x7c
 8014d32:	f8ca 10a0 	str.w	r1, [sl, #160]	; 0xa0
 8014d36:	2200      	movs	r2, #0
 8014d38:	f88a 2030 	strb.w	r2, [sl, #48]	; 0x30
 8014d3c:	2b1e      	cmp	r3, #30
 8014d3e:	f47f aeda 	bne.w	8014af6 <m_kalman_3gyro.isra.9.constprop.47+0x35f6>
 8014d42:	f60a 0398 	addw	r3, sl, #2200	; 0x898
 8014d46:	f8da 00a0 	ldr.w	r0, [sl, #160]	; 0xa0
 8014d4a:	f8da 10a4 	ldr.w	r1, [sl, #164]	; 0xa4
 8014d4e:	f8da 20a8 	ldr.w	r2, [sl, #168]	; 0xa8
 8014d52:	6018      	str	r0, [r3, #0]
 8014d54:	f60a 039c 	addw	r3, sl, #2204	; 0x89c
 8014d58:	ac81      	add	r4, sp, #516	; 0x204
 8014d5a:	6019      	str	r1, [r3, #0]
 8014d5c:	f50a 630a 	add.w	r3, sl, #2208	; 0x8a0
 8014d60:	601a      	str	r2, [r3, #0]
 8014d62:	f7fe badf 	b.w	8013324 <m_kalman_3gyro.isra.9.constprop.47+0x1e24>
 8014d66:	4a17      	ldr	r2, [pc, #92]	; (8014dc4 <m_kalman_3gyro.isra.9.constprop.47+0x38c4>)
 8014d68:	9d08      	ldr	r5, [sp, #32]
 8014d6a:	9f07      	ldr	r7, [sp, #28]
 8014d6c:	68ae      	ldr	r6, [r5, #8]
 8014d6e:	682c      	ldr	r4, [r5, #0]
 8014d70:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8014d74:	0080      	lsls	r0, r0, #2
 8014d76:	f102 013c 	add.w	r1, r2, #60	; 0x3c
 8014d7a:	4402      	add	r2, r0
 8014d7c:	4401      	add	r1, r0
 8014d7e:	6096      	str	r6, [r2, #8]
 8014d80:	4e0d      	ldr	r6, [pc, #52]	; (8014db8 <m_kalman_3gyro.isra.9.constprop.47+0x38b8>)
 8014d82:	6868      	ldr	r0, [r5, #4]
 8014d84:	6014      	str	r4, [r2, #0]
 8014d86:	3301      	adds	r3, #1
 8014d88:	683d      	ldr	r5, [r7, #0]
 8014d8a:	6050      	str	r0, [r2, #4]
 8014d8c:	687c      	ldr	r4, [r7, #4]
 8014d8e:	68b8      	ldr	r0, [r7, #8]
 8014d90:	f886 3430 	strb.w	r3, [r6, #1072]	; 0x430
 8014d94:	f8dd 36f8 	ldr.w	r3, [sp, #1784]	; 0x6f8
 8014d98:	600d      	str	r5, [r1, #0]
 8014d9a:	2200      	movs	r2, #0
 8014d9c:	604c      	str	r4, [r1, #4]
 8014d9e:	6088      	str	r0, [r1, #8]
 8014da0:	701a      	strb	r2, [r3, #0]
 8014da2:	f20d 6d54 	addw	sp, sp, #1620	; 0x654
 8014da6:	ecbd 8b10 	vpop	{d8-d15}
 8014daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014dae:	bf00      	nop
 8014db0:	33333333 	.word	0x33333333
 8014db4:	3fd33333 	.word	0x3fd33333
 8014db8:	20001670 	.word	0x20001670
 8014dbc:	3ff80000 	.word	0x3ff80000
 8014dc0:	20001a90 	.word	0x20001a90
 8014dc4:	20001aa4 	.word	0x20001aa4
 8014dc8:	f60a 0274 	addw	r2, sl, #2164	; 0x874
 8014dcc:	f60a 0378 	addw	r3, sl, #2168	; 0x878
 8014dd0:	ed92 7a00 	vldr	s14, [r2]
 8014dd4:	edd3 7a00 	vldr	s15, [r3]
 8014dd8:	9305      	str	r3, [sp, #20]
 8014dda:	f60a 037c 	addw	r3, sl, #2172	; 0x87c
 8014dde:	ee67 6a07 	vmul.f32	s13, s14, s14
 8014de2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014de6:	ed93 7a00 	vldr	s14, [r3]
 8014dea:	9300      	str	r3, [sp, #0]
 8014dec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014df0:	ee27 7a07 	vmul.f32	s14, s14, s14
 8014df4:	920c      	str	r2, [sp, #48]	; 0x30
 8014df6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014dfa:	f50a 6808 	add.w	r8, sl, #2176	; 0x880
 8014dfe:	ee17 0a90 	vmov	r0, s15
 8014e02:	f7eb fba9 	bl	8000558 <__aeabi_f2d>
 8014e06:	ec41 0b10 	vmov	d0, r0, r1
 8014e0a:	f003 fe49 	bl	8018aa0 <sqrt>
 8014e0e:	f60a 0284 	addw	r2, sl, #2180	; 0x884
 8014e12:	4614      	mov	r4, r2
 8014e14:	ec51 0b10 	vmov	r0, r1, d0
 8014e18:	f7eb feea 	bl	8000bf0 <__aeabi_d2f>
 8014e1c:	edd4 7a00 	vldr	s15, [r4]
 8014e20:	ed98 7a00 	vldr	s14, [r8]
 8014e24:	9402      	str	r4, [sp, #8]
 8014e26:	f60a 0788 	addw	r7, sl, #2184	; 0x888
 8014e2a:	ee67 6a07 	vmul.f32	s13, s14, s14
 8014e2e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014e32:	ed97 7a00 	vldr	s14, [r7]
 8014e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014e3a:	ee27 7a07 	vmul.f32	s14, s14, s14
 8014e3e:	ee0a 0a90 	vmov	s21, r0
 8014e42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014e46:	ac81      	add	r4, sp, #516	; 0x204
 8014e48:	ee17 0a90 	vmov	r0, s15
 8014e4c:	f7eb fb84 	bl	8000558 <__aeabi_f2d>
 8014e50:	ec41 0b10 	vmov	d0, r0, r1
 8014e54:	f003 fe24 	bl	8018aa0 <sqrt>
 8014e58:	ec51 0b10 	vmov	r0, r1, d0
 8014e5c:	f7eb fec8 	bl	8000bf0 <__aeabi_d2f>
 8014e60:	9b00      	ldr	r3, [sp, #0]
 8014e62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014e64:	edd3 6a00 	vldr	s13, [r3]
 8014e68:	edd2 4a00 	vldr	s9, [r2]
 8014e6c:	9b05      	ldr	r3, [sp, #20]
 8014e6e:	9a02      	ldr	r2, [sp, #8]
 8014e70:	ed97 5a00 	vldr	s10, [r7]
 8014e74:	edd2 5a00 	vldr	s11, [r2]
 8014e78:	ed93 6a00 	vldr	s12, [r3]
 8014e7c:	ed98 7a00 	vldr	s14, [r8]
 8014e80:	4be5      	ldr	r3, [pc, #916]	; (8015218 <m_kalman_3gyro.isra.9.constprop.47+0x3d18>)
 8014e82:	ee07 0a90 	vmov	s15, r0
 8014e86:	ee85 eaa7 	vdiv.f32	s28, s11, s15
 8014e8a:	6018      	str	r0, [r3, #0]
 8014e8c:	af4a      	add	r7, sp, #296	; 0x128
 8014e8e:	eec5 da27 	vdiv.f32	s27, s10, s15
 8014e92:	eec7 fa27 	vdiv.f32	s31, s14, s15
 8014e96:	ee86 7aaa 	vdiv.f32	s14, s13, s21
 8014e9a:	eec6 7a2a 	vdiv.f32	s15, s12, s21
 8014e9e:	eec4 6aaa 	vdiv.f32	s13, s9, s21
 8014ea2:	ee27 6a2f 	vmul.f32	s12, s14, s31
 8014ea6:	ee6d baa6 	vmul.f32	s23, s27, s13
 8014eaa:	ee27 7a0e 	vmul.f32	s14, s14, s28
 8014eae:	ee2d baa7 	vmul.f32	s22, s27, s15
 8014eb2:	ee7b bac6 	vsub.f32	s23, s23, s12
 8014eb6:	ee6e 6a26 	vmul.f32	s13, s28, s13
 8014eba:	ee37 ba4b 	vsub.f32	s22, s14, s22
 8014ebe:	ee67 7aaf 	vmul.f32	s15, s15, s31
 8014ec2:	ee2b 7a0b 	vmul.f32	s14, s22, s22
 8014ec6:	ee77 aae6 	vsub.f32	s21, s15, s13
 8014eca:	ee6b 7aab 	vmul.f32	s15, s23, s23
 8014ece:	ee6a 6aaa 	vmul.f32	s13, s21, s21
 8014ed2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014ed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014eda:	ee17 0a90 	vmov	r0, s15
 8014ede:	f7eb fb3b 	bl	8000558 <__aeabi_f2d>
 8014ee2:	ec41 0b10 	vmov	d0, r0, r1
 8014ee6:	f003 fddb 	bl	8018aa0 <sqrt>
 8014eea:	ec51 0b10 	vmov	r0, r1, d0
 8014eee:	f7eb fe7f 	bl	8000bf0 <__aeabi_d2f>
 8014ef2:	ee07 0a90 	vmov	s15, r0
 8014ef6:	ee8b 6aa7 	vdiv.f32	s12, s23, s15
 8014efa:	aa78      	add	r2, sp, #480	; 0x1e0
 8014efc:	4620      	mov	r0, r4
 8014efe:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014f00:	eeca 6aa7 	vdiv.f32	s13, s21, s15
 8014f04:	eecb 5a27 	vdiv.f32	s11, s22, s15
 8014f08:	ee2d 5a86 	vmul.f32	s10, s27, s12
 8014f0c:	ee66 7a8e 	vmul.f32	s15, s13, s28
 8014f10:	ee6f 4a86 	vmul.f32	s9, s31, s12
 8014f14:	ee35 5a67 	vsub.f32	s10, s10, s15
 8014f18:	ee2e 7a25 	vmul.f32	s14, s28, s11
 8014f1c:	ee66 7aaf 	vmul.f32	s15, s13, s31
 8014f20:	ed84 5a00 	vstr	s10, [r4]
 8014f24:	ee2d 5aa5 	vmul.f32	s10, s27, s11
 8014f28:	ee37 7a64 	vsub.f32	s14, s14, s9
 8014f2c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8014f30:	ed84 6a04 	vstr	s12, [r4, #16]
 8014f34:	edc4 6a07 	vstr	s13, [r4, #28]
 8014f38:	edc4 7a03 	vstr	s15, [r4, #12]
 8014f3c:	edc4 5a01 	vstr	s11, [r4, #4]
 8014f40:	ed84 7a06 	vstr	s14, [r4, #24]
 8014f44:	edc4 fa02 	vstr	s31, [r4, #8]
 8014f48:	ed84 ea05 	vstr	s28, [r4, #20]
 8014f4c:	edc4 da08 	vstr	s27, [r4, #32]
 8014f50:	f7f7 feb6 	bl	800ccc0 <m_mldivide>
 8014f54:	a946      	add	r1, sp, #280	; 0x118
 8014f56:	a878      	add	r0, sp, #480	; 0x1e0
 8014f58:	f7f8 f94a 	bl	800d1f0 <m_dcm2q_eml>
 8014f5c:	ab46      	add	r3, sp, #280	; 0x118
 8014f5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014f60:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8014f64:	eddf 7aad 	vldr	s15, [pc, #692]	; 801521c <m_kalman_3gyro.isra.9.constprop.47+0x3d1c>
 8014f68:	eef0 6a67 	vmov.f32	s13, s15
 8014f6c:	eeb0 6a67 	vmov.f32	s12, s15
 8014f70:	ed96 5a06 	vldr	s10, [r6, #24]
 8014f74:	edd6 5a07 	vldr	s11, [r6, #28]
 8014f78:	ed96 7a08 	vldr	s14, [r6, #32]
 8014f7c:	3624      	adds	r6, #36	; 0x24
 8014f7e:	42ae      	cmp	r6, r5
 8014f80:	ee36 6a05 	vadd.f32	s12, s12, s10
 8014f84:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8014f88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014f8c:	d1f0      	bne.n	8014f70 <m_kalman_3gyro.isra.9.constprop.47+0x3a70>
 8014f8e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8014f92:	eec6 5a07 	vdiv.f32	s11, s12, s14
 8014f96:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8014f9a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8014f9e:	eef4 eaec 	vcmpe.f32	s29, s25
 8014fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fa6:	edcd 5a35 	vstr	s11, [sp, #212]	; 0xd4
 8014faa:	ed8d 6a36 	vstr	s12, [sp, #216]	; 0xd8
 8014fae:	edcd 6a37 	vstr	s13, [sp, #220]	; 0xdc
 8014fb2:	dd05      	ble.n	8014fc0 <m_kalman_3gyro.isra.9.constprop.47+0x3ac0>
 8014fb4:	eeb4 dae9 	vcmpe.f32	s26, s19
 8014fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fbc:	f73e a89c 	bgt.w	80130f8 <m_kalman_3gyro.isra.9.constprop.47+0x1bf8>
 8014fc0:	2301      	movs	r3, #1
 8014fc2:	f88a 3202 	strb.w	r3, [sl, #514]	; 0x202
 8014fc6:	f88a 3203 	strb.w	r3, [sl, #515]	; 0x203
 8014fca:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 8014fce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014fd0:	edd3 7a00 	vldr	s15, [r3]
 8014fd4:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8014fd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014fdc:	eef4 7ae8 	vcmpe.f32	s15, s17
 8014fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fe4:	f2c0 81a9 	blt.w	801533a <m_kalman_3gyro.isra.9.constprop.47+0x3e3a>
 8014fe8:	f89a 38a4 	ldrb.w	r3, [sl, #2212]	; 0x8a4
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	f000 818d 	beq.w	801530c <m_kalman_3gyro.isra.9.constprop.47+0x3e0c>
 8014ff2:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8014ff6:	edd3 7a06 	vldr	s15, [r3, #24]
 8014ffa:	ed93 7a07 	vldr	s14, [r3, #28]
 8014ffe:	edd3 6a08 	vldr	s13, [r3, #32]
 8015002:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8015006:	ee67 7a86 	vmul.f32	s15, s15, s12
 801500a:	ee27 7a06 	vmul.f32	s14, s14, s12
 801500e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8015012:	edc3 7a06 	vstr	s15, [r3, #24]
 8015016:	ed83 7a07 	vstr	s14, [r3, #28]
 801501a:	edc3 6a08 	vstr	s13, [r3, #32]
 801501e:	f8ba 38a6 	ldrh.w	r3, [sl, #2214]	; 0x8a6
 8015022:	3301      	adds	r3, #1
 8015024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015028:	d052      	beq.n	80150d0 <m_kalman_3gyro.isra.9.constprop.47+0x3bd0>
 801502a:	2b31      	cmp	r3, #49	; 0x31
 801502c:	f8aa 38a6 	strh.w	r3, [sl, #2214]	; 0x8a6
 8015030:	d912      	bls.n	8015058 <m_kalman_3gyro.isra.9.constprop.47+0x3b58>
 8015032:	f89a 38a4 	ldrb.w	r3, [sl, #2212]	; 0x8a4
 8015036:	b97b      	cbnz	r3, 8015058 <m_kalman_3gyro.isra.9.constprop.47+0x3b58>
 8015038:	ed9f 6a79 	vldr	s12, [pc, #484]	; 8015220 <m_kalman_3gyro.isra.9.constprop.47+0x3d20>
 801503c:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8015040:	ee87 5a86 	vdiv.f32	s10, s15, s12
 8015044:	eec7 5a06 	vdiv.f32	s11, s14, s12
 8015048:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801504c:	ed83 5a06 	vstr	s10, [r3, #24]
 8015050:	edc3 5a07 	vstr	s11, [r3, #28]
 8015054:	edc3 7a08 	vstr	s15, [r3, #32]
 8015058:	f8da 38a4 	ldr.w	r3, [sl, #2212]	; 0x8a4
 801505c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8015060:	f5b3 0f8c 	cmp.w	r3, #4587520	; 0x460000
 8015064:	f000 8149 	beq.w	80152fa <m_kalman_3gyro.isra.9.constprop.47+0x3dfa>
 8015068:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 801506c:	d06c      	beq.n	8015148 <m_kalman_3gyro.isra.9.constprop.47+0x3c48>
 801506e:	f89a 38a4 	ldrb.w	r3, [sl, #2212]	; 0x8a4
 8015072:	2b00      	cmp	r3, #0
 8015074:	d17a      	bne.n	801516c <m_kalman_3gyro.isra.9.constprop.47+0x3c6c>
 8015076:	f89a 2030 	ldrb.w	r2, [sl, #48]	; 0x30
 801507a:	b372      	cbz	r2, 80150da <m_kalman_3gyro.isra.9.constprop.47+0x3bda>
 801507c:	ed9d 7a04 	vldr	s14, [sp, #16]
 8015080:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8015084:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801508c:	d525      	bpl.n	80150da <m_kalman_3gyro.isra.9.constprop.47+0x3bda>
 801508e:	ed9a 7af1 	vldr	s14, [sl, #964]	; 0x3c4
 8015092:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8015096:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801509a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801509e:	d51c      	bpl.n	80150da <m_kalman_3gyro.isra.9.constprop.47+0x3bda>
 80150a0:	f8da 13d8 	ldr.w	r1, [sl, #984]	; 0x3d8
 80150a4:	f8ca 1080 	str.w	r1, [sl, #128]	; 0x80
 80150a8:	f8da 13d4 	ldr.w	r1, [sl, #980]	; 0x3d4
 80150ac:	f8da 23dc 	ldr.w	r2, [sl, #988]	; 0x3dc
 80150b0:	f8ca 107c 	str.w	r1, [sl, #124]	; 0x7c
 80150b4:	f8dd 16f8 	ldr.w	r1, [sp, #1784]	; 0x6f8
 80150b8:	f8ca 2084 	str.w	r2, [sl, #132]	; 0x84
 80150bc:	2201      	movs	r2, #1
 80150be:	700a      	strb	r2, [r1, #0]
 80150c0:	f88a 3030 	strb.w	r3, [sl, #48]	; 0x30
 80150c4:	f7fe b92e 	b.w	8013324 <m_kalman_3gyro.isra.9.constprop.47+0x1e24>
 80150c8:	eef0 1a48 	vmov.f32	s3, s16
 80150cc:	f7ff b83e 	b.w	801414c <m_kalman_3gyro.isra.9.constprop.47+0x2c4c>
 80150d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80150d4:	f8aa 38a6 	strh.w	r3, [sl, #2214]	; 0x8a6
 80150d8:	e7ab      	b.n	8015032 <m_kalman_3gyro.isra.9.constprop.47+0x3b32>
 80150da:	f8da 2454 	ldr.w	r2, [sl, #1108]	; 0x454
 80150de:	2a1e      	cmp	r2, #30
 80150e0:	d00e      	beq.n	8015100 <m_kalman_3gyro.isra.9.constprop.47+0x3c00>
 80150e2:	2a00      	cmp	r2, #0
 80150e4:	f102 0301 	add.w	r3, r2, #1
 80150e8:	dd03      	ble.n	80150f2 <m_kalman_3gyro.isra.9.constprop.47+0x3bf2>
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	bfd8      	it	le
 80150ee:	f06f 4300 	mvnle.w	r3, #2147483648	; 0x80000000
 80150f2:	2200      	movs	r2, #0
 80150f4:	f8ca 3454 	str.w	r3, [sl, #1108]	; 0x454
 80150f8:	f8ca 245c 	str.w	r2, [sl, #1116]	; 0x45c
 80150fc:	f7fe b912 	b.w	8013324 <m_kalman_3gyro.isra.9.constprop.47+0x1e24>
 8015100:	f8ba 38a6 	ldrh.w	r3, [sl, #2214]	; 0x8a6
 8015104:	2b27      	cmp	r3, #39	; 0x27
 8015106:	d873      	bhi.n	80151f0 <m_kalman_3gyro.isra.9.constprop.47+0x3cf0>
 8015108:	f8da 23d8 	ldr.w	r2, [sl, #984]	; 0x3d8
 801510c:	f8ca 2080 	str.w	r2, [sl, #128]	; 0x80
 8015110:	f8da 23d4 	ldr.w	r2, [sl, #980]	; 0x3d4
 8015114:	f8da 33dc 	ldr.w	r3, [sl, #988]	; 0x3dc
 8015118:	f8ca 207c 	str.w	r2, [sl, #124]	; 0x7c
 801511c:	f8dd 26f8 	ldr.w	r2, [sp, #1784]	; 0x6f8
 8015120:	f8ca 3084 	str.w	r3, [sl, #132]	; 0x84
 8015124:	2301      	movs	r3, #1
 8015126:	7013      	strb	r3, [r2, #0]
 8015128:	f8ba 38a8 	ldrh.w	r3, [sl, #2216]	; 0x8a8
 801512c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015130:	3301      	adds	r3, #1
 8015132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015136:	bf08      	it	eq
 8015138:	4613      	moveq	r3, r2
 801513a:	2201      	movs	r2, #1
 801513c:	f8aa 38a8 	strh.w	r3, [sl, #2216]	; 0x8a8
 8015140:	f8ca 245c 	str.w	r2, [sl, #1116]	; 0x45c
 8015144:	f7fe b8ee 	b.w	8013324 <m_kalman_3gyro.isra.9.constprop.47+0x1e24>
 8015148:	2301      	movs	r3, #1
 801514a:	f88a 38a4 	strb.w	r3, [sl, #2212]	; 0x8a4
 801514e:	f60a 0398 	addw	r3, sl, #2200	; 0x898
 8015152:	f8da 00a0 	ldr.w	r0, [sl, #160]	; 0xa0
 8015156:	f8da 10a4 	ldr.w	r1, [sl, #164]	; 0xa4
 801515a:	f8da 20a8 	ldr.w	r2, [sl, #168]	; 0xa8
 801515e:	6018      	str	r0, [r3, #0]
 8015160:	f60a 039c 	addw	r3, sl, #2204	; 0x89c
 8015164:	6019      	str	r1, [r3, #0]
 8015166:	f50a 630a 	add.w	r3, sl, #2208	; 0x8a0
 801516a:	601a      	str	r2, [r3, #0]
 801516c:	eddd 7a4a 	vldr	s15, [sp, #296]	; 0x128
 8015170:	eddd 6a4b 	vldr	s13, [sp, #300]	; 0x12c
 8015174:	ed9d 7a4c 	vldr	s14, [sp, #304]	; 0x130
 8015178:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801517c:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8015180:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8015184:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8015188:	ee37 7a07 	vadd.f32	s14, s14, s14
 801518c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015190:	ee27 7a07 	vmul.f32	s14, s14, s14
 8015194:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015198:	ee17 0a90 	vmov	r0, s15
 801519c:	f7eb f9dc 	bl	8000558 <__aeabi_f2d>
 80151a0:	ec41 0b10 	vmov	d0, r0, r1
 80151a4:	f003 fc7c 	bl	8018aa0 <sqrt>
 80151a8:	ec51 0b10 	vmov	r0, r1, d0
 80151ac:	f7eb fd20 	bl	8000bf0 <__aeabi_d2f>
 80151b0:	f7eb f9d2 	bl	8000558 <__aeabi_f2d>
 80151b4:	a316      	add	r3, pc, #88	; (adr r3, 8015210 <m_kalman_3gyro.isra.9.constprop.47+0x3d10>)
 80151b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151ba:	f7eb fc93 	bl	8000ae4 <__aeabi_dcmplt>
 80151be:	2800      	cmp	r0, #0
 80151c0:	d044      	beq.n	801524c <m_kalman_3gyro.isra.9.constprop.47+0x3d4c>
 80151c2:	f50d 61da 	add.w	r1, sp, #1744	; 0x6d0
 80151c6:	2200      	movs	r2, #0
 80151c8:	2300      	movs	r3, #0
 80151ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80151ce:	f7eb fc7f 	bl	8000ad0 <__aeabi_dcmpeq>
 80151d2:	bb38      	cbnz	r0, 8015224 <m_kalman_3gyro.isra.9.constprop.47+0x3d24>
 80151d4:	f88a 0202 	strb.w	r0, [sl, #514]	; 0x202
 80151d8:	f88a 0203 	strb.w	r0, [sl, #515]	; 0x203
 80151dc:	f88a 0204 	strb.w	r0, [sl, #516]	; 0x204
 80151e0:	2301      	movs	r3, #1
 80151e2:	2200      	movs	r2, #0
 80151e4:	f8ca 3450 	str.w	r3, [sl, #1104]	; 0x450
 80151e8:	f8ca 245c 	str.w	r2, [sl, #1116]	; 0x45c
 80151ec:	f7fe b89a 	b.w	8013324 <m_kalman_3gyro.isra.9.constprop.47+0x1e24>
 80151f0:	9a07      	ldr	r2, [sp, #28]
 80151f2:	6813      	ldr	r3, [r2, #0]
 80151f4:	f8ca 307c 	str.w	r3, [sl, #124]	; 0x7c
 80151f8:	6853      	ldr	r3, [r2, #4]
 80151fa:	f8ca 3080 	str.w	r3, [sl, #128]	; 0x80
 80151fe:	6892      	ldr	r2, [r2, #8]
 8015200:	f8ca 2084 	str.w	r2, [sl, #132]	; 0x84
 8015204:	f8dd 26f8 	ldr.w	r2, [sp, #1784]	; 0x6f8
 8015208:	2301      	movs	r3, #1
 801520a:	7013      	strb	r3, [r2, #0]
 801520c:	e78c      	b.n	8015128 <m_kalman_3gyro.isra.9.constprop.47+0x3c28>
 801520e:	bf00      	nop
 8015210:	47ae147b 	.word	0x47ae147b
 8015214:	3f747ae1 	.word	0x3f747ae1
 8015218:	20001a8c 	.word	0x20001a8c
 801521c:	00000000 	.word	0x00000000
 8015220:	3fd55555 	.word	0x3fd55555
 8015224:	f8da 2450 	ldr.w	r2, [sl, #1104]	; 0x450
 8015228:	2a32      	cmp	r2, #50	; 0x32
 801522a:	d01b      	beq.n	8015264 <m_kalman_3gyro.isra.9.constprop.47+0x3d64>
 801522c:	2300      	movs	r3, #0
 801522e:	2a00      	cmp	r2, #0
 8015230:	f88a 3202 	strb.w	r3, [sl, #514]	; 0x202
 8015234:	f88a 3203 	strb.w	r3, [sl, #515]	; 0x203
 8015238:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 801523c:	f102 0301 	add.w	r3, r2, #1
 8015240:	ddcf      	ble.n	80151e2 <m_kalman_3gyro.isra.9.constprop.47+0x3ce2>
 8015242:	2b00      	cmp	r3, #0
 8015244:	bfd8      	it	le
 8015246:	f06f 4300 	mvnle.w	r3, #2147483648	; 0x80000000
 801524a:	e7ca      	b.n	80151e2 <m_kalman_3gyro.isra.9.constprop.47+0x3ce2>
 801524c:	f8ca 0450 	str.w	r0, [sl, #1104]	; 0x450
 8015250:	f88a 0202 	strb.w	r0, [sl, #514]	; 0x202
 8015254:	f88a 0203 	strb.w	r0, [sl, #515]	; 0x203
 8015258:	f88a 0204 	strb.w	r0, [sl, #516]	; 0x204
 801525c:	f8ca 045c 	str.w	r0, [sl, #1116]	; 0x45c
 8015260:	f7fe b860 	b.w	8013324 <m_kalman_3gyro.isra.9.constprop.47+0x1e24>
 8015264:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8015268:	f8dd 16b8 	ldr.w	r1, [sp, #1720]	; 0x6b8
 801526c:	edd3 6a06 	vldr	s13, [r3, #24]
 8015270:	f8da 245c 	ldr.w	r2, [sl, #1116]	; 0x45c
 8015274:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8015278:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801527c:	2301      	movs	r3, #1
 801527e:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8015282:	ed81 7a06 	vstr	s14, [r1, #24]
 8015286:	f88a 3202 	strb.w	r3, [sl, #514]	; 0x202
 801528a:	edd1 6a07 	vldr	s13, [r1, #28]
 801528e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015292:	ed81 7a07 	vstr	s14, [r1, #28]
 8015296:	f88a 3203 	strb.w	r3, [sl, #515]	; 0x203
 801529a:	edd1 6a08 	vldr	s13, [r1, #32]
 801529e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80152a2:	ed81 7a08 	vstr	s14, [r1, #32]
 80152a6:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 80152aa:	d014      	beq.n	80152d6 <m_kalman_3gyro.isra.9.constprop.47+0x3dd6>
 80152ac:	2a00      	cmp	r2, #0
 80152ae:	f102 0301 	add.w	r3, r2, #1
 80152b2:	dd03      	ble.n	80152bc <m_kalman_3gyro.isra.9.constprop.47+0x3dbc>
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	bfd8      	it	le
 80152b8:	f06f 4300 	mvnle.w	r3, #2147483648	; 0x80000000
 80152bc:	9935      	ldr	r1, [sp, #212]	; 0xd4
 80152be:	f8ca 345c 	str.w	r3, [sl, #1116]	; 0x45c
 80152c2:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 80152c4:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 80152c6:	f8ca 10a0 	str.w	r1, [sl, #160]	; 0xa0
 80152ca:	f8ca 20a4 	str.w	r2, [sl, #164]	; 0xa4
 80152ce:	f8ca 30a8 	str.w	r3, [sl, #168]	; 0xa8
 80152d2:	f7fe b827 	b.w	8013324 <m_kalman_3gyro.isra.9.constprop.47+0x1e24>
 80152d6:	f60a 0398 	addw	r3, sl, #2200	; 0x898
 80152da:	f8da 00a0 	ldr.w	r0, [sl, #160]	; 0xa0
 80152de:	f8da 10a4 	ldr.w	r1, [sl, #164]	; 0xa4
 80152e2:	f8da 20a8 	ldr.w	r2, [sl, #168]	; 0xa8
 80152e6:	6018      	str	r0, [r3, #0]
 80152e8:	f60a 039c 	addw	r3, sl, #2204	; 0x89c
 80152ec:	6019      	str	r1, [r3, #0]
 80152ee:	f50a 630a 	add.w	r3, sl, #2208	; 0x8a0
 80152f2:	601a      	str	r2, [r3, #0]
 80152f4:	f240 33e9 	movw	r3, #1001	; 0x3e9
 80152f8:	e7e0      	b.n	80152bc <m_kalman_3gyro.isra.9.constprop.47+0x3dbc>
 80152fa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80152fe:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
 8015302:	f8ca 3158 	str.w	r3, [sl, #344]	; 0x158
 8015306:	f8ca 3180 	str.w	r3, [sl, #384]	; 0x180
 801530a:	e6b0      	b.n	801506e <m_kalman_3gyro.isra.9.constprop.47+0x3b6e>
 801530c:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8015310:	edd3 7a06 	vldr	s15, [r3, #24]
 8015314:	ed93 7a07 	vldr	s14, [r3, #28]
 8015318:	edd3 6a08 	vldr	s13, [r3, #32]
 801531c:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8015320:	eec7 7a86 	vdiv.f32	s15, s15, s12
 8015324:	ee87 7a06 	vdiv.f32	s14, s14, s12
 8015328:	eec6 6a86 	vdiv.f32	s13, s13, s12
 801532c:	edc3 7a06 	vstr	s15, [r3, #24]
 8015330:	ed83 7a07 	vstr	s14, [r3, #28]
 8015334:	edc3 6a08 	vstr	s13, [r3, #32]
 8015338:	e671      	b.n	801501e <m_kalman_3gyro.isra.9.constprop.47+0x3b1e>
 801533a:	eef4 eaec 	vcmpe.f32	s29, s25
 801533e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015342:	dd52      	ble.n	80153ea <m_kalman_3gyro.isra.9.constprop.47+0x3eea>
 8015344:	eeb4 dae9 	vcmpe.f32	s26, s19
 8015348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801534c:	dd4d      	ble.n	80153ea <m_kalman_3gyro.isra.9.constprop.47+0x3eea>
 801534e:	eeb4 facc 	vcmpe.f32	s30, s24
 8015352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015356:	dd48      	ble.n	80153ea <m_kalman_3gyro.isra.9.constprop.47+0x3eea>
 8015358:	ed9d 7a04 	vldr	s14, [sp, #16]
 801535c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015360:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015368:	d53f      	bpl.n	80153ea <m_kalman_3gyro.isra.9.constprop.47+0x3eea>
 801536a:	ee89 6a8d 	vdiv.f32	s12, s19, s26
 801536e:	eecc 6aae 	vdiv.f32	s13, s25, s29
 8015372:	ee8c 7a0f 	vdiv.f32	s14, s24, s30
 8015376:	ee76 6a86 	vadd.f32	s13, s13, s12
 801537a:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
 801537e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8015382:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8015386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801538a:	d52e      	bpl.n	80153ea <m_kalman_3gyro.isra.9.constprop.47+0x3eea>
 801538c:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8015390:	f8dd 26b8 	ldr.w	r2, [sp, #1720]	; 0x6b8
 8015394:	ed93 6a06 	vldr	s12, [r3, #24]
 8015398:	edd3 6a07 	vldr	s13, [r3, #28]
 801539c:	ed93 7a08 	vldr	s14, [r3, #32]
 80153a0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80153a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80153a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80153ac:	2300      	movs	r3, #0
 80153ae:	ed82 6a06 	vstr	s12, [r2, #24]
 80153b2:	edc2 6a07 	vstr	s13, [r2, #28]
 80153b6:	edc2 7a08 	vstr	s15, [r2, #32]
 80153ba:	f8aa 38a6 	strh.w	r3, [sl, #2214]	; 0x8a6
 80153be:	e656      	b.n	801506e <m_kalman_3gyro.isra.9.constprop.47+0x3b6e>
 80153c0:	2301      	movs	r3, #1
 80153c2:	f7fd bf8d 	b.w	80132e0 <m_kalman_3gyro.isra.9.constprop.47+0x1de0>
 80153c6:	f89a 38ad 	ldrb.w	r3, [sl, #2221]	; 0x8ad
 80153ca:	b343      	cbz	r3, 801541e <m_kalman_3gyro.isra.9.constprop.47+0x3f1e>
 80153cc:	3b01      	subs	r3, #1
 80153ce:	f88a 38ad 	strb.w	r3, [sl, #2221]	; 0x8ad
 80153d2:	f88a 01fc 	strb.w	r0, [sl, #508]	; 0x1fc
 80153d6:	f88a 01fd 	strb.w	r0, [sl, #509]	; 0x1fd
 80153da:	f88a 01fe 	strb.w	r0, [sl, #510]	; 0x1fe
 80153de:	f88a 0205 	strb.w	r0, [sl, #517]	; 0x205
 80153e2:	f88a 0207 	strb.w	r0, [sl, #519]	; 0x207
 80153e6:	f7fe ba51 	b.w	801388c <m_kalman_3gyro.isra.9.constprop.47+0x238c>
 80153ea:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 80153ee:	f8dd 26b8 	ldr.w	r2, [sp, #1720]	; 0x6b8
 80153f2:	edd3 6a06 	vldr	s13, [r3, #24]
 80153f6:	ed93 7a07 	vldr	s14, [r3, #28]
 80153fa:	edd3 7a08 	vldr	s15, [r3, #32]
 80153fe:	ee66 6a8a 	vmul.f32	s13, s13, s20
 8015402:	ee27 7a0a 	vmul.f32	s14, s14, s20
 8015406:	ee27 aa8a 	vmul.f32	s20, s15, s20
 801540a:	2300      	movs	r3, #0
 801540c:	edc2 6a06 	vstr	s13, [r2, #24]
 8015410:	ed82 7a07 	vstr	s14, [r2, #28]
 8015414:	ed82 aa08 	vstr	s20, [r2, #32]
 8015418:	f8aa 38a6 	strh.w	r3, [sl, #2214]	; 0x8a6
 801541c:	e627      	b.n	801506e <m_kalman_3gyro.isra.9.constprop.47+0x3b6e>
 801541e:	2d00      	cmp	r5, #0
 8015420:	f47f ab98 	bne.w	8014b54 <m_kalman_3gyro.isra.9.constprop.47+0x3654>
 8015424:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8015428:	edd3 6a00 	vldr	s13, [r3]
 801542c:	ed93 7a01 	vldr	s14, [r3, #4]
 8015430:	edd3 7a02 	vldr	s15, [r3, #8]
 8015434:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8015438:	ee66 6a86 	vmul.f32	s13, s13, s12
 801543c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8015440:	ee67 7a86 	vmul.f32	s15, s15, s12
 8015444:	edc3 6a00 	vstr	s13, [r3]
 8015448:	ed83 7a01 	vstr	s14, [r3, #4]
 801544c:	edc3 7a02 	vstr	s15, [r3, #8]
 8015450:	f7fe ba1c 	b.w	801388c <m_kalman_3gyro.isra.9.constprop.47+0x238c>
 8015454:	eeb0 6a48 	vmov.f32	s12, s16
 8015458:	f7fe be90 	b.w	801417c <m_kalman_3gyro.isra.9.constprop.47+0x2c7c>
 801545c:	2000      	movs	r0, #0
 801545e:	2100      	movs	r1, #0
 8015460:	f7ff b82c 	b.w	80144bc <m_kalman_3gyro.isra.9.constprop.47+0x2fbc>
 8015464:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8015468:	ad4e      	add	r5, sp, #312	; 0x138
 801546a:	af46      	add	r7, sp, #280	; 0x118
 801546c:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8015470:	eeb1 9a49 	vneg.f32	s18, s18
 8015474:	eef1 8a68 	vneg.f32	s17, s17
 8015478:	eeb1 8a48 	vneg.f32	s16, s16
 801547c:	4628      	mov	r0, r5
 801547e:	4632      	mov	r2, r6
 8015480:	4639      	mov	r1, r7
 8015482:	ed85 9a00 	vstr	s18, [r5]
 8015486:	edc5 8a01 	vstr	s17, [r5, #4]
 801548a:	ed85 8a02 	vstr	s16, [r5, #8]
 801548e:	60ec      	str	r4, [r5, #12]
 8015490:	f7f7 fde0 	bl	800d054 <m_qmult_eml>
 8015494:	ed8d 9a46 	vstr	s18, [sp, #280]	; 0x118
 8015498:	edcd 8a47 	vstr	s17, [sp, #284]	; 0x11c
 801549c:	ed8d 8a48 	vstr	s16, [sp, #288]	; 0x120
 80154a0:	9449      	str	r4, [sp, #292]	; 0x124
 80154a2:	ab46      	add	r3, sp, #280	; 0x118
 80154a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80154a6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80154aa:	ed95 7a00 	vldr	s14, [r5]
 80154ae:	ed95 6a01 	vldr	s12, [r5, #4]
 80154b2:	edd5 7a02 	vldr	s15, [r5, #8]
 80154b6:	edd5 6a03 	vldr	s13, [r5, #12]
 80154ba:	ee27 7a07 	vmul.f32	s14, s14, s14
 80154be:	ee26 6a06 	vmul.f32	s12, s12, s12
 80154c2:	f7ff b846 	b.w	8014552 <m_kalman_3gyro.isra.9.constprop.47+0x3052>
 80154c6:	eeb0 ca48 	vmov.f32	s24, s16
 80154ca:	f7fe be1b 	b.w	8014104 <m_kalman_3gyro.isra.9.constprop.47+0x2c04>
 80154ce:	eeb0 6a48 	vmov.f32	s12, s16
 80154d2:	f7fe bf95 	b.w	8014400 <m_kalman_3gyro.isra.9.constprop.47+0x2f00>
 80154d6:	ac81      	add	r4, sp, #516	; 0x204
 80154d8:	e572      	b.n	8014fc0 <m_kalman_3gyro.isra.9.constprop.47+0x3ac0>
 80154da:	2b00      	cmp	r3, #0
 80154dc:	f43d af10 	beq.w	8013300 <m_kalman_3gyro.isra.9.constprop.47+0x1e00>
 80154e0:	f8da 2450 	ldr.w	r2, [sl, #1104]	; 0x450
 80154e4:	2a0a      	cmp	r2, #10
 80154e6:	f47f aaf2 	bne.w	8014ace <m_kalman_3gyro.isra.9.constprop.47+0x35ce>
 80154ea:	9907      	ldr	r1, [sp, #28]
 80154ec:	f88a 3202 	strb.w	r3, [sl, #514]	; 0x202
 80154f0:	f88a 3203 	strb.w	r3, [sl, #515]	; 0x203
 80154f4:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 80154f8:	680a      	ldr	r2, [r1, #0]
 80154fa:	f8ca 207c 	str.w	r2, [sl, #124]	; 0x7c
 80154fe:	684a      	ldr	r2, [r1, #4]
 8015500:	f8ca 2080 	str.w	r2, [sl, #128]	; 0x80
 8015504:	688a      	ldr	r2, [r1, #8]
 8015506:	f8ca 2084 	str.w	r2, [sl, #132]	; 0x84
 801550a:	f8dd 26f8 	ldr.w	r2, [sp, #1784]	; 0x6f8
 801550e:	7013      	strb	r3, [r2, #0]
 8015510:	f8da 345c 	ldr.w	r3, [sl, #1116]	; 0x45c
 8015514:	f89a 2030 	ldrb.w	r2, [sl, #48]	; 0x30
 8015518:	3301      	adds	r3, #1
 801551a:	f8ca 345c 	str.w	r3, [sl, #1116]	; 0x45c
 801551e:	2a00      	cmp	r2, #0
 8015520:	f43f ac0c 	beq.w	8014d3c <m_kalman_3gyro.isra.9.constprop.47+0x383c>
 8015524:	f8da 107c 	ldr.w	r1, [sl, #124]	; 0x7c
 8015528:	f8da 2080 	ldr.w	r2, [sl, #128]	; 0x80
 801552c:	f8ca 10a0 	str.w	r1, [sl, #160]	; 0xa0
 8015530:	f8ca 20a4 	str.w	r2, [sl, #164]	; 0xa4
 8015534:	f8da 1084 	ldr.w	r1, [sl, #132]	; 0x84
 8015538:	f8ca 10a8 	str.w	r1, [sl, #168]	; 0xa8
 801553c:	2200      	movs	r2, #0
 801553e:	f88a 2030 	strb.w	r2, [sl, #48]	; 0x30
 8015542:	f7ff bbfb 	b.w	8014d3c <m_kalman_3gyro.isra.9.constprop.47+0x383c>
 8015546:	bf00      	nop

08015548 <SpacePointAlgorithm.isra.10>:
 8015548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801554c:	ed2d 8b10 	vpush	{d8-d15}
 8015550:	b0bb      	sub	sp, #236	; 0xec
 8015552:	f8df c408 	ldr.w	ip, [pc, #1032]	; 801595c <SpacePointAlgorithm.isra.10+0x414>
 8015556:	f89d 5160 	ldrb.w	r5, [sp, #352]	; 0x160
 801555a:	9515      	str	r5, [sp, #84]	; 0x54
 801555c:	f89d 5168 	ldrb.w	r5, [sp, #360]	; 0x168
 8015560:	9516      	str	r5, [sp, #88]	; 0x58
 8015562:	f89d 516c 	ldrb.w	r5, [sp, #364]	; 0x16c
 8015566:	9517      	str	r5, [sp, #92]	; 0x5c
 8015568:	f89d 5170 	ldrb.w	r5, [sp, #368]	; 0x170
 801556c:	9518      	str	r5, [sp, #96]	; 0x60
 801556e:	4682      	mov	sl, r0
 8015570:	4689      	mov	r9, r1
 8015572:	4693      	mov	fp, r2
 8015574:	461d      	mov	r5, r3
 8015576:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801557a:	f10d 0e7c 	add.w	lr, sp, #124	; 0x7c
 801557e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015582:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8015586:	9e69      	ldr	r6, [sp, #420]	; 0x1a4
 8015588:	ed8d 1a19 	vstr	s2, [sp, #100]	; 0x64
 801558c:	e88e 0003 	stmia.w	lr, {r0, r1}
 8015590:	e9dd 0156 	ldrd	r0, r1, [sp, #344]	; 0x158
 8015594:	eeb0 ea40 	vmov.f32	s28, s0
 8015598:	eeb0 8a60 	vmov.f32	s16, s1
 801559c:	eeb0 fa61 	vmov.f32	s30, s3
 80155a0:	eeb0 aa42 	vmov.f32	s20, s4
 80155a4:	eef0 aa62 	vmov.f32	s21, s5
 80155a8:	eeb0 ba43 	vmov.f32	s22, s6
 80155ac:	eef0 ba63 	vmov.f32	s23, s7
 80155b0:	f7eb fb1e 	bl	8000bf0 <__aeabi_d2f>
 80155b4:	f896 38cc 	ldrb.w	r3, [r6, #2252]	; 0x8cc
 80155b8:	9c54      	ldr	r4, [sp, #336]	; 0x150
 80155ba:	f89d 8164 	ldrb.w	r8, [sp, #356]	; 0x164
 80155be:	9f64      	ldr	r7, [sp, #400]	; 0x190
 80155c0:	ee0d 0a90 	vmov	s27, r0
 80155c4:	b923      	cbnz	r3, 80155d0 <SpacePointAlgorithm.isra.10+0x88>
 80155c6:	2200      	movs	r2, #0
 80155c8:	2301      	movs	r3, #1
 80155ca:	6032      	str	r2, [r6, #0]
 80155cc:	f886 38cc 	strb.w	r3, [r6, #2252]	; 0x8cc
 80155d0:	eddf 7ad7 	vldr	s15, [pc, #860]	; 8015930 <SpacePointAlgorithm.isra.10+0x3e8>
 80155d4:	ee87 7a8e 	vdiv.f32	s14, s15, s28
 80155d8:	ee17 0a10 	vmov	r0, s14
 80155dc:	f7ea ffbc 	bl	8000558 <__aeabi_f2d>
 80155e0:	ec41 0b10 	vmov	d0, r0, r1
 80155e4:	f003 fa5c 	bl	8018aa0 <sqrt>
 80155e8:	ec51 0b10 	vmov	r0, r1, d0
 80155ec:	f7eb fb00 	bl	8000bf0 <__aeabi_d2f>
 80155f0:	ed9f 6ad0 	vldr	s12, [pc, #832]	; 8015934 <SpacePointAlgorithm.isra.10+0x3ec>
 80155f4:	ed95 7a01 	vldr	s14, [r5, #4]
 80155f8:	edd5 6a00 	vldr	s13, [r5]
 80155fc:	edd5 7a02 	vldr	s15, [r5, #8]
 8015600:	eddf 5acd 	vldr	s11, [pc, #820]	; 8015938 <SpacePointAlgorithm.isra.10+0x3f0>
 8015604:	ed9d 9a20 	vldr	s18, [sp, #128]	; 0x80
 8015608:	ed9d da21 	vldr	s26, [sp, #132]	; 0x84
 801560c:	eddd ca22 	vldr	s25, [sp, #136]	; 0x88
 8015610:	ed9d ca23 	vldr	s24, [sp, #140]	; 0x8c
 8015614:	ee27 7a06 	vmul.f32	s14, s14, s12
 8015618:	ee08 0a90 	vmov	s17, r0
 801561c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8015620:	ee67 7a86 	vmul.f32	s15, s15, s12
 8015624:	ed85 7a01 	vstr	s14, [r5, #4]
 8015628:	ed9d 7a24 	vldr	s14, [sp, #144]	; 0x90
 801562c:	edc5 6a00 	vstr	s13, [r5]
 8015630:	eec5 eaa8 	vdiv.f32	s29, s11, s17
 8015634:	ee28 9a89 	vmul.f32	s18, s17, s18
 8015638:	ee28 da8d 	vmul.f32	s26, s17, s26
 801563c:	ee68 caac 	vmul.f32	s25, s17, s25
 8015640:	ee28 ca8c 	vmul.f32	s24, s17, s24
 8015644:	edc5 7a02 	vstr	s15, [r5, #8]
 8015648:	ee68 8a87 	vmul.f32	s17, s17, s14
 801564c:	f1b8 0f04 	cmp.w	r8, #4
 8015650:	d806      	bhi.n	8015660 <SpacePointAlgorithm.isra.10+0x118>
 8015652:	e8df f018 	tbh	[pc, r8, lsl #1]
 8015656:	0155      	.short	0x0155
 8015658:	014a0162 	.word	0x014a0162
 801565c:	012a0005 	.word	0x012a0005
 8015660:	eddf 7ab6 	vldr	s15, [pc, #728]	; 801593c <SpacePointAlgorithm.isra.10+0x3f4>
 8015664:	eddf fab6 	vldr	s31, [pc, #728]	; 8015940 <SpacePointAlgorithm.isra.10+0x3f8>
 8015668:	ee6d aaaa 	vmul.f32	s21, s27, s21
 801566c:	ee2d ba8b 	vmul.f32	s22, s27, s22
 8015670:	ee6d baab 	vmul.f32	s23, s27, s23
 8015674:	ee6a aaa7 	vmul.f32	s21, s21, s15
 8015678:	ee2b ba27 	vmul.f32	s22, s22, s15
 801567c:	ee6b baa7 	vmul.f32	s23, s23, s15
 8015680:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 8015684:	2200      	movs	r2, #0
 8015686:	2300      	movs	r3, #0
 8015688:	e9dd 015e 	ldrd	r0, r1, [sp, #376]	; 0x178
 801568c:	f7eb fa20 	bl	8000ad0 <__aeabi_dcmpeq>
 8015690:	edd6 7a00 	vldr	s15, [r6]
 8015694:	b168      	cbz	r0, 80156b2 <SpacePointAlgorithm.isra.10+0x16a>
 8015696:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801569a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801569e:	f340 8109 	ble.w	80158b4 <SpacePointAlgorithm.isra.10+0x36c>
 80156a2:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80156a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80156aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156ae:	f140 8101 	bpl.w	80158b4 <SpacePointAlgorithm.isra.10+0x36c>
 80156b2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80156b6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80156ba:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80156be:	ee87 8a87 	vdiv.f32	s16, s15, s14
 80156c2:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8015944 <SpacePointAlgorithm.isra.10+0x3fc>
 80156c6:	edc6 7a00 	vstr	s15, [r6]
 80156ca:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80156ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156d2:	bf54      	ite	pl
 80156d4:	eec6 5a08 	vdivpl.f32	s11, s12, s16
 80156d8:	eeb0 8a47 	vmovmi.f32	s16, s14
 80156dc:	ee28 7a0a 	vmul.f32	s14, s16, s20
 80156e0:	eddf 7a99 	vldr	s15, [pc, #612]	; 8015948 <SpacePointAlgorithm.isra.10+0x400>
 80156e4:	bf48      	it	mi
 80156e6:	eef1 5a04 	vmovmi.f32	s11, #20	; 0x40a00000  5.0
 80156ea:	ee6e eaa5 	vmul.f32	s29, s29, s11
 80156ee:	ee28 9a09 	vmul.f32	s18, s16, s18
 80156f2:	ee28 da0d 	vmul.f32	s26, s16, s26
 80156f6:	ee27 ca0c 	vmul.f32	s24, s14, s24
 80156fa:	ee69 9aac 	vmul.f32	s19, s19, s25
 80156fe:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8015702:	edd4 5a09 	vldr	s11, [r4, #36]	; 0x24
 8015706:	edd9 7a00 	vldr	s15, [r9]
 801570a:	ed94 6a00 	vldr	s12, [r4]
 801570e:	ed94 7a01 	vldr	s14, [r4, #4]
 8015712:	edd9 4a01 	vldr	s9, [r9, #4]
 8015716:	edd9 3a02 	vldr	s7, [r9, #8]
 801571a:	ed94 5a0a 	vldr	s10, [r4, #40]	; 0x28
 801571e:	ed94 3a05 	vldr	s6, [r4, #20]
 8015722:	ed9f 4a8a 	vldr	s8, [pc, #552]	; 801594c <SpacePointAlgorithm.isra.10+0x404>
 8015726:	ed8d 9a2e 	vstr	s18, [sp, #184]	; 0xb8
 801572a:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801572e:	edd4 5a02 	vldr	s11, [r4, #8]
 8015732:	ed8d 9a2f 	vstr	s18, [sp, #188]	; 0xbc
 8015736:	ee27 6a86 	vmul.f32	s12, s15, s12
 801573a:	ee27 7a87 	vmul.f32	s14, s15, s14
 801573e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8015742:	edd4 5a0b 	vldr	s11, [r4, #44]	; 0x2c
 8015746:	ed8d 9a30 	vstr	s18, [sp, #192]	; 0xc0
 801574a:	ee34 5ac5 	vsub.f32	s10, s9, s10
 801574e:	ee73 5ae5 	vsub.f32	s11, s7, s11
 8015752:	edd4 4a03 	vldr	s9, [r4, #12]
 8015756:	edd4 3a04 	vldr	s7, [r4, #16]
 801575a:	ed8d da31 	vstr	s26, [sp, #196]	; 0xc4
 801575e:	ee65 3a23 	vmul.f32	s7, s10, s7
 8015762:	ee65 4a24 	vmul.f32	s9, s10, s9
 8015766:	ee36 6a04 	vadd.f32	s12, s12, s8
 801576a:	ee25 5a03 	vmul.f32	s10, s10, s6
 801576e:	ee77 7a84 	vadd.f32	s15, s15, s8
 8015772:	ee37 7a04 	vadd.f32	s14, s14, s8
 8015776:	ee36 6a24 	vadd.f32	s12, s12, s9
 801577a:	ed94 4a06 	vldr	s8, [r4, #24]
 801577e:	edd4 4a07 	vldr	s9, [r4, #28]
 8015782:	ed8d da32 	vstr	s26, [sp, #200]	; 0xc8
 8015786:	ee77 7a85 	vadd.f32	s15, s15, s10
 801578a:	ed94 5a08 	vldr	s10, [r4, #32]
 801578e:	ed8d da33 	vstr	s26, [sp, #204]	; 0xcc
 8015792:	ee25 4a84 	vmul.f32	s8, s11, s8
 8015796:	ee65 4aa4 	vmul.f32	s9, s11, s9
 801579a:	ee37 7a23 	vadd.f32	s14, s14, s7
 801579e:	ee65 5a85 	vmul.f32	s11, s11, s10
 80157a2:	eeb7 5a08 	vmov.f32	s10, #120	; 0x3fc00000  1.5
 80157a6:	ee37 7a24 	vadd.f32	s14, s14, s9
 80157aa:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80157ae:	ee36 6a04 	vadd.f32	s12, s12, s8
 80157b2:	ee2a aa05 	vmul.f32	s20, s20, s10
 80157b6:	ed8d 6a1c 	vstr	s12, [sp, #112]	; 0x70
 80157ba:	ed8d 7a1d 	vstr	s14, [sp, #116]	; 0x74
 80157be:	edcd 7a1e 	vstr	s15, [sp, #120]	; 0x78
 80157c2:	edcd 9a34 	vstr	s19, [sp, #208]	; 0xd0
 80157c6:	edcd 9a35 	vstr	s19, [sp, #212]	; 0xd4
 80157ca:	edcd 9a36 	vstr	s19, [sp, #216]	; 0xd8
 80157ce:	ed8d ca37 	vstr	s24, [sp, #220]	; 0xdc
 80157d2:	edcd 8a38 	vstr	s17, [sp, #224]	; 0xe0
 80157d6:	edcd ea25 	vstr	s29, [sp, #148]	; 0x94
 80157da:	edcd ea26 	vstr	s29, [sp, #152]	; 0x98
 80157de:	ed8d aa39 	vstr	s20, [sp, #228]	; 0xe4
 80157e2:	edcd ea27 	vstr	s29, [sp, #156]	; 0x9c
 80157e6:	ed9d 7b60 	vldr	d7, [sp, #384]	; 0x180
 80157ea:	9612      	str	r6, [sp, #72]	; 0x48
 80157ec:	9e68      	ldr	r6, [sp, #416]	; 0x1a0
 80157ee:	9611      	str	r6, [sp, #68]	; 0x44
 80157f0:	9e67      	ldr	r6, [sp, #412]	; 0x19c
 80157f2:	9610      	str	r6, [sp, #64]	; 0x40
 80157f4:	9e66      	ldr	r6, [sp, #408]	; 0x198
 80157f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80157fa:	ed8d 7b08 	vstr	d7, [sp, #32]
 80157fe:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 8015802:	960f      	str	r6, [sp, #60]	; 0x3c
 8015804:	ed9d 7b5e 	vldr	d7, [sp, #376]	; 0x178
 8015808:	9e63      	ldr	r6, [sp, #396]	; 0x18c
 801580a:	f88d 8068 	strb.w	r8, [sp, #104]	; 0x68
 801580e:	462b      	mov	r3, r5
 8015810:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
 8015814:	960c      	str	r6, [sp, #48]	; 0x30
 8015816:	ad1a      	add	r5, sp, #104	; 0x68
 8015818:	9e62      	ldr	r6, [sp, #392]	; 0x188
 801581a:	9915      	ldr	r1, [sp, #84]	; 0x54
 801581c:	9504      	str	r5, [sp, #16]
 801581e:	4650      	mov	r0, sl
 8015820:	ac25      	add	r4, sp, #148	; 0x94
 8015822:	f88d 8069 	strb.w	r8, [sp, #105]	; 0x69
 8015826:	960b      	str	r6, [sp, #44]	; 0x2c
 8015828:	f89d 8060 	ldrb.w	r8, [sp, #96]	; 0x60
 801582c:	9e55      	ldr	r6, [sp, #340]	; 0x154
 801582e:	f8df e130 	ldr.w	lr, [pc, #304]	; 8015960 <SpacePointAlgorithm.isra.10+0x418>
 8015832:	f8df c130 	ldr.w	ip, [pc, #304]	; 8015964 <SpacePointAlgorithm.isra.10+0x41c>
 8015836:	9102      	str	r1, [sp, #8]
 8015838:	f10d 0ab8 	add.w	sl, sp, #184	; 0xb8
 801583c:	ad1b      	add	r5, sp, #108	; 0x6c
 801583e:	465a      	mov	r2, fp
 8015840:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015844:	eeb0 2a6d 	vmov.f32	s4, s27
 8015848:	eef0 1a4e 	vmov.f32	s3, s28
 801584c:	eeb0 1a6b 	vmov.f32	s2, s23
 8015850:	eef0 0a4b 	vmov.f32	s1, s22
 8015854:	eeb0 0a6a 	vmov.f32	s0, s21
 8015858:	a91c      	add	r1, sp, #112	; 0x70
 801585a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8015968 <SpacePointAlgorithm.isra.10+0x420>
 801585e:	9401      	str	r4, [sp, #4]
 8015860:	f8cd a000 	str.w	sl, [sp]
 8015864:	edcd fa28 	vstr	s31, [sp, #160]	; 0xa0
 8015868:	edcd fa29 	vstr	s31, [sp, #164]	; 0xa4
 801586c:	edcd fa2a 	vstr	s31, [sp, #168]	; 0xa8
 8015870:	f88d 806a 	strb.w	r8, [sp, #106]	; 0x6a
 8015874:	970e      	str	r7, [sp, #56]	; 0x38
 8015876:	960a      	str	r6, [sp, #40]	; 0x28
 8015878:	950d      	str	r5, [sp, #52]	; 0x34
 801587a:	f8cd e0ac 	str.w	lr, [sp, #172]	; 0xac
 801587e:	f8cd c0b0 	str.w	ip, [sp, #176]	; 0xb0
 8015882:	f8cd 90b4 	str.w	r9, [sp, #180]	; 0xb4
 8015886:	f7fb fe3b 	bl	8011500 <m_kalman_3gyro.isra.9.constprop.47>
 801588a:	4621      	mov	r1, r4
 801588c:	9862      	ldr	r0, [sp, #392]	; 0x188
 801588e:	f7f7 fc49 	bl	800d124 <m_q2dcm_eml>
 8015892:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	6013      	str	r3, [r2, #0]
 8015898:	693b      	ldr	r3, [r7, #16]
 801589a:	6053      	str	r3, [r2, #4]
 801589c:	697b      	ldr	r3, [r7, #20]
 801589e:	6093      	str	r3, [r2, #8]
 80158a0:	b03b      	add	sp, #236	; 0xec
 80158a2:	ecbd 8b10 	vpop	{d8-d15}
 80158a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158aa:	eddf fa29 	vldr	s31, [pc, #164]	; 8015950 <SpacePointAlgorithm.isra.10+0x408>
 80158ae:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 80158b2:	e6e7      	b.n	8015684 <SpacePointAlgorithm.isra.10+0x13c>
 80158b4:	eddf 7a27 	vldr	s15, [pc, #156]	; 8015954 <SpacePointAlgorithm.isra.10+0x40c>
 80158b8:	eddd 6a19 	vldr	s13, [sp, #100]	; 0x64
 80158bc:	ee3f fa27 	vadd.f32	s30, s30, s15
 80158c0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80158c4:	ee87 7a8f 	vdiv.f32	s14, s15, s30
 80158c8:	2300      	movs	r3, #0
 80158ca:	6033      	str	r3, [r6, #0]
 80158cc:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8015948 <SpacePointAlgorithm.isra.10+0x400>
 80158d0:	ee29 9a26 	vmul.f32	s18, s18, s13
 80158d4:	ee28 da0d 	vmul.f32	s26, s16, s26
 80158d8:	ee69 9aac 	vmul.f32	s19, s19, s25
 80158dc:	ee2a ca0c 	vmul.f32	s24, s20, s24
 80158e0:	ee67 ea2e 	vmul.f32	s29, s14, s29
 80158e4:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80158e8:	e70b      	b.n	8015702 <SpacePointAlgorithm.isra.10+0x1ba>
 80158ea:	ee6a aaad 	vmul.f32	s21, s21, s27
 80158ee:	ee2b ba2d 	vmul.f32	s22, s22, s27
 80158f2:	ee6b baad 	vmul.f32	s23, s23, s27
 80158f6:	eddf fa18 	vldr	s31, [pc, #96]	; 8015958 <SpacePointAlgorithm.isra.10+0x410>
 80158fa:	eef1 9a04 	vmov.f32	s19, #20	; 0x40a00000  5.0
 80158fe:	e6c1      	b.n	8015684 <SpacePointAlgorithm.isra.10+0x13c>
 8015900:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8015904:	eeca aaa7 	vdiv.f32	s21, s21, s15
 8015908:	ee8b ba27 	vdiv.f32	s22, s22, s15
 801590c:	eecb baa7 	vdiv.f32	s23, s23, s15
 8015910:	eddf fa0b 	vldr	s31, [pc, #44]	; 8015940 <SpacePointAlgorithm.isra.10+0x3f8>
 8015914:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 8015918:	e6b4      	b.n	8015684 <SpacePointAlgorithm.isra.10+0x13c>
 801591a:	ee6a aaad 	vmul.f32	s21, s21, s27
 801591e:	ee2b ba2d 	vmul.f32	s22, s22, s27
 8015922:	ee6b baad 	vmul.f32	s23, s23, s27
 8015926:	eddf fa0a 	vldr	s31, [pc, #40]	; 8015950 <SpacePointAlgorithm.isra.10+0x408>
 801592a:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 801592e:	e6a9      	b.n	8015684 <SpacePointAlgorithm.isra.10+0x13c>
 8015930:	3c03126f 	.word	0x3c03126f
 8015934:	3c8efa35 	.word	0x3c8efa35
 8015938:	3b656042 	.word	0x3b656042
 801593c:	42c80000 	.word	0x42c80000
 8015940:	3a83126f 	.word	0x3a83126f
 8015944:	3e4ccccd 	.word	0x3e4ccccd
 8015948:	3f333333 	.word	0x3f333333
 801594c:	00000000 	.word	0x00000000
 8015950:	3ac49ba6 	.word	0x3ac49ba6
 8015954:	358637bd 	.word	0x358637bd
 8015958:	3727c5ac 	.word	0x3727c5ac
 801595c:	0801e048 	.word	0x0801e048
 8015960:	3b449ba6 	.word	0x3b449ba6
 8015964:	3c23d70a 	.word	0x3c23d70a
 8015968:	3a9d4952 	.word	0x3a9d4952

0801596c <iNemo_update_6X.constprop.45>:
 801596c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015970:	4ce3      	ldr	r4, [pc, #908]	; (8015d00 <iNemo_update_6X.constprop.45+0x394>)
 8015972:	f8df 83a0 	ldr.w	r8, [pc, #928]	; 8015d14 <iNemo_update_6X.constprop.45+0x3a8>
 8015976:	f994 33f4 	ldrsb.w	r3, [r4, #1012]	; 0x3f4
 801597a:	f994 23fc 	ldrsb.w	r2, [r4, #1020]	; 0x3fc
 801597e:	f994 1413 	ldrsb.w	r1, [r4, #1043]	; 0x413
 8015982:	ee05 3a90 	vmov	s11, r3
 8015986:	f994 33f5 	ldrsb.w	r3, [r4, #1013]	; 0x3f5
 801598a:	ee01 3a10 	vmov	s2, r3
 801598e:	f994 33f7 	ldrsb.w	r3, [r4, #1015]	; 0x3f7
 8015992:	ee01 3a90 	vmov	s3, r3
 8015996:	f994 33f8 	ldrsb.w	r3, [r4, #1016]	; 0x3f8
 801599a:	ee07 3a90 	vmov	s15, r3
 801599e:	f994 340f 	ldrsb.w	r3, [r4, #1039]	; 0x40f
 80159a2:	ee06 3a90 	vmov	s13, r3
 80159a6:	f994 3410 	ldrsb.w	r3, [r4, #1040]	; 0x410
 80159aa:	ed2d 8b08 	vpush	{d8-d11}
 80159ae:	ee0a 3a10 	vmov	s20, r3
 80159b2:	f994 340c 	ldrsb.w	r3, [r4, #1036]	; 0x40c
 80159b6:	ee07 3a10 	vmov	s14, r3
 80159ba:	f994 33f6 	ldrsb.w	r3, [r4, #1014]	; 0x3f6
 80159be:	ee02 3a90 	vmov	s5, r3
 80159c2:	f994 340d 	ldrsb.w	r3, [r4, #1037]	; 0x40d
 80159c6:	ee08 3a90 	vmov	s17, r3
 80159ca:	f994 33f9 	ldrsb.w	r3, [r4, #1017]	; 0x3f9
 80159ce:	ee03 3a90 	vmov	s7, r3
 80159d2:	f994 33fa 	ldrsb.w	r3, [r4, #1018]	; 0x3fa
 80159d6:	ee09 3a10 	vmov	s18, r3
 80159da:	f994 33fb 	ldrsb.w	r3, [r4, #1019]	; 0x3fb
 80159de:	ee04 3a10 	vmov	s8, r3
 80159e2:	f994 3411 	ldrsb.w	r3, [r4, #1041]	; 0x411
 80159e6:	ee04 3a90 	vmov	s9, r3
 80159ea:	f994 340e 	ldrsb.w	r3, [r4, #1038]	; 0x40e
 80159ee:	f204 45c4 	addw	r5, r4, #1220	; 0x4c4
 80159f2:	ed95 ba06 	vldr	s22, [r5, #24]
 80159f6:	edd5 aa07 	vldr	s21, [r5, #28]
 80159fa:	edd5 9a09 	vldr	s19, [r5, #36]	; 0x24
 80159fe:	edd5 0a0a 	vldr	s1, [r5, #40]	; 0x28
 8015a02:	ed95 2a08 	vldr	s4, [r5, #32]
 8015a06:	ed95 3a0b 	vldr	s6, [r5, #44]	; 0x2c
 8015a0a:	ee05 3a10 	vmov	s10, r3
 8015a0e:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8015a12:	f994 3412 	ldrsb.w	r3, [r4, #1042]	; 0x412
 8015a16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015a1a:	ee08 3a10 	vmov	s16, r3
 8015a1e:	ee67 7aaa 	vmul.f32	s15, s15, s21
 8015a22:	ee61 1a8b 	vmul.f32	s3, s3, s22
 8015a26:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015a2a:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8015a2e:	ee27 7a29 	vmul.f32	s14, s14, s19
 8015a32:	ee31 6aa7 	vadd.f32	s12, s3, s15
 8015a36:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015a3a:	eef8 7ac8 	vcvt.f32.s32	s15, s16
 8015a3e:	eeb8 aaca 	vcvt.f32.s32	s20, s20
 8015a42:	ee68 8aa0 	vmul.f32	s17, s17, s1
 8015a46:	ee66 6aa9 	vmul.f32	s13, s13, s19
 8015a4a:	f994 3414 	ldrsb.w	r3, [r4, #1044]	; 0x414
 8015a4e:	ee77 8a28 	vadd.f32	s17, s14, s17
 8015a52:	ee27 8aa9 	vmul.f32	s16, s15, s19
 8015a56:	ee07 1a10 	vmov	s14, r1
 8015a5a:	ee07 2a90 	vmov	s15, r2
 8015a5e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8015a62:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8015a66:	ee2a aa20 	vmul.f32	s20, s20, s1
 8015a6a:	ee65 5a8b 	vmul.f32	s11, s11, s22
 8015a6e:	ee21 1a2a 	vmul.f32	s2, s2, s21
 8015a72:	ee36 aa8a 	vadd.f32	s20, s13, s20
 8015a76:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 8015a7a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8015a7e:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8015a82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8015a86:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 8015a8a:	ee07 3a90 	vmov	s15, r3
 8015a8e:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8015a92:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8015a96:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8015a9a:	ee29 9a0b 	vmul.f32	s18, s18, s22
 8015a9e:	ee24 4a2a 	vmul.f32	s8, s8, s21
 8015aa2:	ee75 5a81 	vadd.f32	s11, s11, s2
 8015aa6:	ee62 2a82 	vmul.f32	s5, s5, s4
 8015aaa:	ee63 3a82 	vmul.f32	s7, s7, s4
 8015aae:	ee64 4a83 	vmul.f32	s9, s9, s6
 8015ab2:	ee25 5a03 	vmul.f32	s10, s10, s6
 8015ab6:	ee66 6aa0 	vmul.f32	s13, s13, s1
 8015aba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015abe:	b0e5      	sub	sp, #404	; 0x194
 8015ac0:	af16      	add	r7, sp, #88	; 0x58
 8015ac2:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8015ac6:	ee36 6a23 	vadd.f32	s12, s12, s7
 8015aca:	ee39 9a04 	vadd.f32	s18, s18, s8
 8015ace:	ee27 7a02 	vmul.f32	s14, s14, s4
 8015ad2:	ee3a aa24 	vadd.f32	s20, s20, s9
 8015ad6:	ee78 8a85 	vadd.f32	s17, s17, s10
 8015ada:	ee38 8a26 	vadd.f32	s16, s16, s13
 8015ade:	ee67 7a83 	vmul.f32	s15, s15, s6
 8015ae2:	f898 200c 	ldrb.w	r2, [r8, #12]
 8015ae6:	2300      	movs	r3, #0
 8015ae8:	eef0 ba40 	vmov.f32	s23, s0
 8015aec:	4681      	mov	r9, r0
 8015aee:	eef1 aa65 	vneg.f32	s21, s11
 8015af2:	ee39 9a07 	vadd.f32	s18, s18, s14
 8015af6:	eeb1 ba46 	vneg.f32	s22, s12
 8015afa:	eeb1 aa4a 	vneg.f32	s20, s20
 8015afe:	eef1 8a68 	vneg.f32	s17, s17
 8015b02:	ee38 8a27 	vadd.f32	s16, s16, s15
 8015b06:	603b      	str	r3, [r7, #0]
 8015b08:	607b      	str	r3, [r7, #4]
 8015b0a:	60bb      	str	r3, [r7, #8]
 8015b0c:	2a00      	cmp	r2, #0
 8015b0e:	f040 8107 	bne.w	8015d20 <iNemo_update_6X.constprop.45+0x3b4>
 8015b12:	f8df a204 	ldr.w	sl, [pc, #516]	; 8015d18 <iNemo_update_6X.constprop.45+0x3ac>
 8015b16:	f8df b204 	ldr.w	fp, [pc, #516]	; 8015d1c <iNemo_update_6X.constprop.45+0x3b0>
 8015b1a:	f894 25f5 	ldrb.w	r2, [r4, #1525]	; 0x5f5
 8015b1e:	f894 35f4 	ldrb.w	r3, [r4, #1524]	; 0x5f4
 8015b22:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 8015b24:	f8c5 1088 	str.w	r1, [r5, #136]	; 0x88
 8015b28:	ee09 2a90 	vmov	s19, r2
 8015b2c:	4975      	ldr	r1, [pc, #468]	; (8015d04 <iNemo_update_6X.constprop.45+0x398>)
 8015b2e:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8015b30:	f8d5 6080 	ldr.w	r6, [r5, #128]	; 0x80
 8015b34:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
 8015b38:	f043 0302 	orr.w	r3, r3, #2
 8015b3c:	22f8      	movs	r2, #248	; 0xf8
 8015b3e:	f8d5 e084 	ldr.w	lr, [r5, #132]	; 0x84
 8015b42:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
 8015b46:	f083 0301 	eor.w	r3, r3, #1
 8015b4a:	188e      	adds	r6, r1, r2
 8015b4c:	a826      	add	r0, sp, #152	; 0x98
 8015b4e:	f884 35f4 	strb.w	r3, [r4, #1524]	; 0x5f4
 8015b52:	f8c5 e094 	str.w	lr, [r5, #148]	; 0x94
 8015b56:	f005 fce3 	bl	801b520 <memcpy>
 8015b5a:	f506 7e9b 	add.w	lr, r6, #310	; 0x136
 8015b5e:	6a30      	ldr	r0, [r6, #32]
 8015b60:	f8cd e050 	str.w	lr, [sp, #80]	; 0x50
 8015b64:	2300      	movs	r3, #0
 8015b66:	f506 7c9a 	add.w	ip, r6, #308	; 0x134
 8015b6a:	f1a6 0e30 	sub.w	lr, r6, #48	; 0x30
 8015b6e:	f206 1235 	addw	r2, r6, #309	; 0x135
 8015b72:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 8015b76:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
 8015b7a:	9213      	str	r2, [sp, #76]	; 0x4c
 8015b7c:	9711      	str	r7, [sp, #68]	; 0x44
 8015b7e:	aa1d      	add	r2, sp, #116	; 0x74
 8015b80:	632b      	str	r3, [r5, #48]	; 0x30
 8015b82:	636b      	str	r3, [r5, #52]	; 0x34
 8015b84:	63ab      	str	r3, [r5, #56]	; 0x38
 8015b86:	4960      	ldr	r1, [pc, #384]	; (8015d08 <iNemo_update_6X.constprop.45+0x39c>)
 8015b88:	f8cd a0ac 	str.w	sl, [sp, #172]	; 0xac
 8015b8c:	f10d 0a64 	add.w	sl, sp, #100	; 0x64
 8015b90:	932a      	str	r3, [sp, #168]	; 0xa8
 8015b92:	9210      	str	r2, [sp, #64]	; 0x40
 8015b94:	ed8d ba2c 	vstr	s22, [sp, #176]	; 0xb0
 8015b98:	edcd aa2d 	vstr	s21, [sp, #180]	; 0xb4
 8015b9c:	ed8d 9a2e 	vstr	s18, [sp, #184]	; 0xb8
 8015ba0:	ed8d aa2f 	vstr	s20, [sp, #188]	; 0xbc
 8015ba4:	edcd 8a30 	vstr	s17, [sp, #192]	; 0xc0
 8015ba8:	ed8d 8a31 	vstr	s16, [sp, #196]	; 0xc4
 8015bac:	f8cd b0a4 	str.w	fp, [sp, #164]	; 0xa4
 8015bb0:	9115      	str	r1, [sp, #84]	; 0x54
 8015bb2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8015bb6:	f7ea fccf 	bl	8000558 <__aeabi_f2d>
 8015bba:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015bbe:	f894 05d6 	ldrb.w	r0, [r4, #1494]	; 0x5d6
 8015bc2:	ed96 ba0b 	vldr	s22, [r6, #44]	; 0x2c
 8015bc6:	edd6 aa0a 	vldr	s21, [r6, #40]	; 0x28
 8015bca:	ed96 aa03 	vldr	s20, [r6, #12]
 8015bce:	ed96 9a02 	vldr	s18, [r6, #8]
 8015bd2:	edd6 8a01 	vldr	s17, [r6, #4]
 8015bd6:	ed96 8a00 	vldr	s16, [r6]
 8015bda:	f7ea fc9b 	bl	8000514 <__aeabi_ui2d>
 8015bde:	eef8 9a69 	vcvt.f32.u32	s19, s19
 8015be2:	f894 35d4 	ldrb.w	r3, [r4, #1492]	; 0x5d4
 8015be6:	f894 e5d2 	ldrb.w	lr, [r4, #1490]	; 0x5d2
 8015bea:	f894 25d1 	ldrb.w	r2, [r4, #1489]	; 0x5d1
 8015bee:	f894 c5d3 	ldrb.w	ip, [r4, #1491]	; 0x5d3
 8015bf2:	ee69 9aab 	vmul.f32	s19, s19, s23
 8015bf6:	edd6 ba0c 	vldr	s23, [r6, #48]	; 0x30
 8015bfa:	9308      	str	r3, [sp, #32]
 8015bfc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8015c00:	f894 35d0 	ldrb.w	r3, [r4, #1488]	; 0x5d0
 8015c04:	6930      	ldr	r0, [r6, #16]
 8015c06:	f8cd e018 	str.w	lr, [sp, #24]
 8015c0a:	9205      	str	r2, [sp, #20]
 8015c0c:	9304      	str	r3, [sp, #16]
 8015c0e:	f8cd c01c 	str.w	ip, [sp, #28]
 8015c12:	f7ea fca1 	bl	8000558 <__aeabi_f2d>
 8015c16:	ae35      	add	r6, sp, #212	; 0xd4
 8015c18:	f50d 7e82 	add.w	lr, sp, #260	; 0x104
 8015c1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015c20:	eeb0 0a69 	vmov.f32	s0, s19
 8015c24:	eef0 3a6b 	vmov.f32	s7, s23
 8015c28:	eeb0 3a4b 	vmov.f32	s6, s22
 8015c2c:	eef0 2a6a 	vmov.f32	s5, s21
 8015c30:	eeb0 2a4a 	vmov.f32	s4, s20
 8015c34:	eef0 1a49 	vmov.f32	s3, s18
 8015c38:	eeb0 1a68 	vmov.f32	s2, s17
 8015c3c:	eef0 0a48 	vmov.f32	s1, s16
 8015c40:	ab32      	add	r3, sp, #200	; 0xc8
 8015c42:	aa2c      	add	r2, sp, #176	; 0xb0
 8015c44:	a929      	add	r1, sp, #164	; 0xa4
 8015c46:	a848      	add	r0, sp, #288	; 0x120
 8015c48:	e88d 4040 	stmia.w	sp, {r6, lr}
 8015c4c:	f7ff fc7c 	bl	8015548 <SpacePointAlgorithm.isra.10>
 8015c50:	f1b9 0f00 	cmp.w	r9, #0
 8015c54:	d00f      	beq.n	8015c76 <iNemo_update_6X.constprop.45+0x30a>
 8015c56:	f8da 2000 	ldr.w	r2, [sl]
 8015c5a:	f8da 3004 	ldr.w	r3, [sl, #4]
 8015c5e:	f8c9 2000 	str.w	r2, [r9]
 8015c62:	f8c9 3004 	str.w	r3, [r9, #4]
 8015c66:	f8da 2008 	ldr.w	r2, [sl, #8]
 8015c6a:	f8da 300c 	ldr.w	r3, [sl, #12]
 8015c6e:	f8c9 2008 	str.w	r2, [r9, #8]
 8015c72:	f8c9 300c 	str.w	r3, [r9, #12]
 8015c76:	4b25      	ldr	r3, [pc, #148]	; (8015d0c <iNemo_update_6X.constprop.45+0x3a0>)
 8015c78:	f8d8 20f0 	ldr.w	r2, [r8, #240]	; 0xf0
 8015c7c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8015c80:	f894 26f2 	ldrb.w	r2, [r4, #1778]	; 0x6f2
 8015c84:	f8d8 10c8 	ldr.w	r1, [r8, #200]	; 0xc8
 8015c88:	f8c3 10fc 	str.w	r1, [r3, #252]	; 0xfc
 8015c8c:	2a01      	cmp	r2, #1
 8015c8e:	f8d8 1118 	ldr.w	r1, [r8, #280]	; 0x118
 8015c92:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
 8015c96:	d066      	beq.n	8015d66 <iNemo_update_6X.constprop.45+0x3fa>
 8015c98:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8015d10 <iNemo_update_6X.constprop.45+0x3a4>
 8015c9c:	ed97 6a00 	vldr	s12, [r7]
 8015ca0:	edd7 6a01 	vldr	s13, [r7, #4]
 8015ca4:	ed97 7a02 	vldr	s14, [r7, #8]
 8015ca8:	f894 26f1 	ldrb.w	r2, [r4, #1777]	; 0x6f1
 8015cac:	ee26 5a27 	vmul.f32	s10, s12, s15
 8015cb0:	ee66 5aa7 	vmul.f32	s11, s13, s15
 8015cb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015cb8:	ed85 5a1b 	vstr	s10, [r5, #108]	; 0x6c
 8015cbc:	edc5 5a1c 	vstr	s11, [r5, #112]	; 0x70
 8015cc0:	edc5 7a1d 	vstr	s15, [r5, #116]	; 0x74
 8015cc4:	b13a      	cbz	r2, 8015cd6 <iNemo_update_6X.constprop.45+0x36a>
 8015cc6:	f894 2700 	ldrb.w	r2, [r4, #1792]	; 0x700
 8015cca:	2a09      	cmp	r2, #9
 8015ccc:	d810      	bhi.n	8015cf0 <iNemo_update_6X.constprop.45+0x384>
 8015cce:	3201      	adds	r2, #1
 8015cd0:	f884 2700 	strb.w	r2, [r4, #1792]	; 0x700
 8015cd4:	e001      	b.n	8015cda <iNemo_update_6X.constprop.45+0x36e>
 8015cd6:	f884 2700 	strb.w	r2, [r4, #1792]	; 0x700
 8015cda:	f894 35f4 	ldrb.w	r3, [r4, #1524]	; 0x5f4
 8015cde:	f083 0302 	eor.w	r3, r3, #2
 8015ce2:	f884 35f4 	strb.w	r3, [r4, #1524]	; 0x5f4
 8015ce6:	b065      	add	sp, #404	; 0x194
 8015ce8:	ecbd 8b08 	vpop	{d8-d11}
 8015cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cf0:	ed83 6a22 	vstr	s12, [r3, #136]	; 0x88
 8015cf4:	edc3 6a23 	vstr	s13, [r3, #140]	; 0x8c
 8015cf8:	ed83 7a24 	vstr	s14, [r3, #144]	; 0x90
 8015cfc:	e7ed      	b.n	8015cda <iNemo_update_6X.constprop.45+0x36e>
 8015cfe:	bf00      	nop
 8015d00:	20001670 	.word	0x20001670
 8015d04:	20001b34 	.word	0x20001b34
 8015d08:	20000010 	.word	0x20000010
 8015d0c:	20001c68 	.word	0x20001c68
 8015d10:	42652ee1 	.word	0x42652ee1
 8015d14:	20000000 	.word	0x20000000
 8015d18:	bf333333 	.word	0xbf333333
 8015d1c:	3f333333 	.word	0x3f333333
 8015d20:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8015d24:	ee26 6a06 	vmul.f32	s12, s12, s12
 8015d28:	ee69 7a09 	vmul.f32	s15, s18, s18
 8015d2c:	ee36 6a25 	vadd.f32	s12, s12, s11
 8015d30:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8015da0 <iNemo_update_6X.constprop.45+0x434>
 8015d34:	f8df b06c 	ldr.w	fp, [pc, #108]	; 8015da4 <iNemo_update_6X.constprop.45+0x438>
 8015d38:	ee76 7a27 	vadd.f32	s15, s12, s15
 8015d3c:	ee17 0a90 	vmov	r0, s15
 8015d40:	f7ea fc0a 	bl	8000558 <__aeabi_f2d>
 8015d44:	ec41 0b10 	vmov	d0, r0, r1
 8015d48:	f002 feaa 	bl	8018aa0 <sqrt>
 8015d4c:	ec51 0b10 	vmov	r0, r1, d0
 8015d50:	f7ea ff4e 	bl	8000bf0 <__aeabi_d2f>
 8015d54:	ee07 0a90 	vmov	s15, r0
 8015d58:	ee8b ba27 	vdiv.f32	s22, s22, s15
 8015d5c:	eeca aaa7 	vdiv.f32	s21, s21, s15
 8015d60:	ee89 9a27 	vdiv.f32	s18, s18, s15
 8015d64:	e6d9      	b.n	8015b1a <iNemo_update_6X.constprop.45+0x1ae>
 8015d66:	f8da 2004 	ldr.w	r2, [sl, #4]
 8015d6a:	f8da 6000 	ldr.w	r6, [sl]
 8015d6e:	f8da 0008 	ldr.w	r0, [sl, #8]
 8015d72:	f8da 100c 	ldr.w	r1, [sl, #12]
 8015d76:	67ea      	str	r2, [r5, #124]	; 0x7c
 8015d78:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
 8015d7c:	2200      	movs	r2, #0
 8015d7e:	67ae      	str	r6, [r5, #120]	; 0x78
 8015d80:	f8c5 6088 	str.w	r6, [r5, #136]	; 0x88
 8015d84:	f8c5 0080 	str.w	r0, [r5, #128]	; 0x80
 8015d88:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
 8015d8c:	f8c5 1084 	str.w	r1, [r5, #132]	; 0x84
 8015d90:	f8c5 1094 	str.w	r1, [r5, #148]	; 0x94
 8015d94:	f884 25e0 	strb.w	r2, [r4, #1504]	; 0x5e0
 8015d98:	f888 200c 	strb.w	r2, [r8, #12]
 8015d9c:	e77c      	b.n	8015c98 <iNemo_update_6X.constprop.45+0x32c>
 8015d9e:	bf00      	nop
 8015da0:	bf3504f3 	.word	0xbf3504f3
 8015da4:	3f3504f3 	.word	0x3f3504f3

08015da8 <iNemo_update.constprop.46>:
 8015da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015dac:	4cee      	ldr	r4, [pc, #952]	; (8016168 <iNemo_update.constprop.46+0x3c0>)
 8015dae:	f994 33d0 	ldrsb.w	r3, [r4, #976]	; 0x3d0
 8015db2:	f994 b3e0 	ldrsb.w	fp, [r4, #992]	; 0x3e0
 8015db6:	f994 e3d2 	ldrsb.w	lr, [r4, #978]	; 0x3d2
 8015dba:	f994 63d5 	ldrsb.w	r6, [r4, #981]	; 0x3d5
 8015dbe:	f994 c3d7 	ldrsb.w	ip, [r4, #983]	; 0x3d7
 8015dc2:	f994 a3df 	ldrsb.w	sl, [r4, #991]	; 0x3df
 8015dc6:	f994 93e1 	ldrsb.w	r9, [r4, #993]	; 0x3e1
 8015dca:	ee02 3a10 	vmov	s4, r3
 8015dce:	f994 33d1 	ldrsb.w	r3, [r4, #977]	; 0x3d1
 8015dd2:	ee05 3a90 	vmov	s11, r3
 8015dd6:	f994 33d3 	ldrsb.w	r3, [r4, #979]	; 0x3d3
 8015dda:	ee02 3a90 	vmov	s5, r3
 8015dde:	f994 33d4 	ldrsb.w	r3, [r4, #980]	; 0x3d4
 8015de2:	ee06 3a10 	vmov	s12, r3
 8015de6:	f994 33d6 	ldrsb.w	r3, [r4, #982]	; 0x3d6
 8015dea:	ed2d 8b10 	vpush	{d8-d15}
 8015dee:	ee0b 3a10 	vmov	s22, r3
 8015df2:	f994 33d8 	ldrsb.w	r3, [r4, #984]	; 0x3d8
 8015df6:	ee0c 3a90 	vmov	s25, r3
 8015dfa:	f994 33ee 	ldrsb.w	r3, [r4, #1006]	; 0x3ee
 8015dfe:	ee04 3a90 	vmov	s9, r3
 8015e02:	f994 33ef 	ldrsb.w	r3, [r4, #1007]	; 0x3ef
 8015e06:	ee0d 3a10 	vmov	s26, r3
 8015e0a:	f994 33f0 	ldrsb.w	r3, [r4, #1008]	; 0x3f0
 8015e0e:	ee0e 3a10 	vmov	s28, r3
 8015e12:	f994 33dc 	ldrsb.w	r3, [r4, #988]	; 0x3dc
 8015e16:	ee0d 3a90 	vmov	s27, r3
 8015e1a:	f994 33dd 	ldrsb.w	r3, [r4, #989]	; 0x3dd
 8015e1e:	ee05 3a10 	vmov	s10, r3
 8015e22:	f994 33de 	ldrsb.w	r3, [r4, #990]	; 0x3de
 8015e26:	ee0c 3a10 	vmov	s24, r3
 8015e2a:	f994 33e2 	ldrsb.w	r3, [r4, #994]	; 0x3e2
 8015e2e:	b0e7      	sub	sp, #412	; 0x19c
 8015e30:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 8015e34:	ee03 3a10 	vmov	s6, r3
 8015e38:	f994 33e3 	ldrsb.w	r3, [r4, #995]	; 0x3e3
 8015e3c:	f204 7504 	addw	r5, r4, #1796	; 0x704
 8015e40:	2200      	movs	r2, #0
 8015e42:	edd5 aa06 	vldr	s21, [r5, #24]
 8015e46:	ed95 aa07 	vldr	s20, [r5, #28]
 8015e4a:	ed95 9a08 	vldr	s18, [r5, #32]
 8015e4e:	edd5 9a09 	vldr	s19, [r5, #36]	; 0x24
 8015e52:	edd5 8a0a 	vldr	s17, [r5, #40]	; 0x28
 8015e56:	ed95 1a0b 	vldr	s2, [r5, #44]	; 0x2c
 8015e5a:	ed95 8a03 	vldr	s16, [r5, #12]
 8015e5e:	edd5 0a04 	vldr	s1, [r5, #16]
 8015e62:	edd5 1a05 	vldr	s3, [r5, #20]
 8015e66:	f8c8 2000 	str.w	r2, [r8]
 8015e6a:	ee06 3a90 	vmov	s13, r3
 8015e6e:	f8c8 2004 	str.w	r2, [r8, #4]
 8015e72:	f994 33eb 	ldrsb.w	r3, [r4, #1003]	; 0x3eb
 8015e76:	f994 73e4 	ldrsb.w	r7, [r4, #996]	; 0x3e4
 8015e7a:	f994 13ed 	ldrsb.w	r1, [r4, #1005]	; 0x3ed
 8015e7e:	f8c8 2008 	str.w	r2, [r8, #8]
 8015e82:	ee07 3a10 	vmov	s14, r3
 8015e86:	f994 33ec 	ldrsb.w	r3, [r4, #1004]	; 0x3ec
 8015e8a:	f994 23ea 	ldrsb.w	r2, [r4, #1002]	; 0x3ea
 8015e8e:	ee03 3a90 	vmov	s7, r3
 8015e92:	f994 33e8 	ldrsb.w	r3, [r4, #1000]	; 0x3e8
 8015e96:	ee04 3a10 	vmov	s8, r3
 8015e9a:	f994 33e9 	ldrsb.w	r3, [r4, #1001]	; 0x3e9
 8015e9e:	ee07 3a90 	vmov	s15, r3
 8015ea2:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8015ea6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015eaa:	ee24 4a29 	vmul.f32	s8, s8, s19
 8015eae:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8015eb2:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8015eb6:	ee74 7a27 	vadd.f32	s15, s8, s15
 8015eba:	ee04 ca10 	vmov	s8, ip
 8015ebe:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8015ec2:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8015ec6:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8015eca:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015ece:	ee23 3a08 	vmul.f32	s6, s6, s16
 8015ed2:	ee65 5a8a 	vmul.f32	s11, s11, s20
 8015ed6:	ee26 6a0a 	vmul.f32	s12, s12, s20
 8015eda:	ee66 6aa0 	vmul.f32	s13, s13, s1
 8015ede:	ee24 aa0a 	vmul.f32	s20, s8, s20
 8015ee2:	ee04 7a10 	vmov	s8, r7
 8015ee6:	ee73 6a26 	vadd.f32	s13, s6, s13
 8015eea:	eeb8 3ac4 	vcvt.f32.s32	s6, s8
 8015eee:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8015ef2:	ee23 3a21 	vmul.f32	s6, s6, s3
 8015ef6:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 8015efa:	ee22 2a2a 	vmul.f32	s4, s4, s21
 8015efe:	ee62 2aaa 	vmul.f32	s5, s5, s21
 8015f02:	eef8 bac7 	vcvt.f32.s32	s23, s14
 8015f06:	ee76 ea83 	vadd.f32	s29, s13, s6
 8015f0a:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8015f0e:	ee06 aa90 	vmov	s13, sl
 8015f12:	ee2b 7aa9 	vmul.f32	s14, s23, s19
 8015f16:	ee63 3aa8 	vmul.f32	s7, s7, s17
 8015f1a:	ee72 5a25 	vadd.f32	s11, s4, s11
 8015f1e:	ee32 6a86 	vadd.f32	s12, s5, s12
 8015f22:	eef8 bae6 	vcvt.f32.s32	s23, s13
 8015f26:	ee04 1a10 	vmov	s8, r1
 8015f2a:	ee06 ba90 	vmov	s13, fp
 8015f2e:	ee02 ea10 	vmov	s4, lr
 8015f32:	ee02 6a90 	vmov	s5, r6
 8015f36:	ee37 7a23 	vadd.f32	s14, s14, s7
 8015f3a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015f3e:	eef8 3ac4 	vcvt.f32.s32	s7, s8
 8015f42:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8015f46:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 8015f4a:	ee04 2a10 	vmov	s8, r2
 8015f4e:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8015f52:	ee22 2a09 	vmul.f32	s4, s4, s18
 8015f56:	ee62 2a89 	vmul.f32	s5, s5, s18
 8015f5a:	ee25 5a20 	vmul.f32	s10, s10, s1
 8015f5e:	eeb8 bacb 	vcvt.f32.s32	s22, s22
 8015f62:	ee66 0aa0 	vmul.f32	s1, s13, s1
 8015f66:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8015f6a:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8015f6e:	eeb8 dacd 	vcvt.f32.s32	s26, s26
 8015f72:	eef8 daed 	vcvt.f32.s32	s27, s27
 8015f76:	ee06 9a90 	vmov	s13, r9
 8015f7a:	ee2b ba2a 	vmul.f32	s22, s22, s21
 8015f7e:	ee63 3a81 	vmul.f32	s7, s7, s2
 8015f82:	ee35 2a82 	vadd.f32	s4, s11, s4
 8015f86:	ee76 2a22 	vadd.f32	s5, s12, s5
 8015f8a:	ee64 5a01 	vmul.f32	s11, s8, s2
 8015f8e:	ee6d da88 	vmul.f32	s27, s27, s16
 8015f92:	4b76      	ldr	r3, [pc, #472]	; (801616c <iNemo_update.constprop.46+0x3c4>)
 8015f94:	ee2b 8a88 	vmul.f32	s16, s23, s16
 8015f98:	eef8 caec 	vcvt.f32.s32	s25, s25
 8015f9c:	ee64 9aa9 	vmul.f32	s19, s9, s19
 8015fa0:	ee6d 8a28 	vmul.f32	s17, s26, s17
 8015fa4:	eeb8 eace 	vcvt.f32.s32	s28, s28
 8015fa8:	eeb8 cacc 	vcvt.f32.s32	s24, s24
 8015fac:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 8015fb0:	ee3b ba0a 	vadd.f32	s22, s22, s20
 8015fb4:	ee2c 9a89 	vmul.f32	s18, s25, s18
 8015fb8:	ee2c ca21 	vmul.f32	s24, s24, s3
 8015fbc:	f893 38e0 	ldrb.w	r3, [r3, #2272]	; 0x8e0
 8015fc0:	9317      	str	r3, [sp, #92]	; 0x5c
 8015fc2:	ee37 7a23 	vadd.f32	s14, s14, s7
 8015fc6:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8015fca:	ee79 8aa8 	vadd.f32	s17, s19, s17
 8015fce:	ee2e 1a01 	vmul.f32	s2, s28, s2
 8015fd2:	ee7d da85 	vadd.f32	s27, s27, s10
 8015fd6:	ee38 8a20 	vadd.f32	s16, s16, s1
 8015fda:	ee66 1a21 	vmul.f32	s3, s12, s3
 8015fde:	ee3b ba09 	vadd.f32	s22, s22, s18
 8015fe2:	eeb0 aa40 	vmov.f32	s20, s0
 8015fe6:	4683      	mov	fp, r0
 8015fe8:	eeb1 fa42 	vneg.f32	s30, s4
 8015fec:	eef1 aa62 	vneg.f32	s21, s5
 8015ff0:	eeb1 9a6e 	vneg.f32	s18, s29
 8015ff4:	eef1 fa47 	vneg.f32	s31, s14
 8015ff8:	eef1 ba67 	vneg.f32	s23, s15
 8015ffc:	ee78 8a81 	vadd.f32	s17, s17, s2
 8016000:	ee3d ca8c 	vadd.f32	s24, s27, s24
 8016004:	ee38 8a21 	vadd.f32	s16, s16, s3
 8016008:	2b00      	cmp	r3, #0
 801600a:	f040 8131 	bne.w	8016270 <iNemo_update.constprop.46+0x4c8>
 801600e:	f894 2835 	ldrb.w	r2, [r4, #2101]	; 0x835
 8016012:	f894 3834 	ldrb.w	r3, [r4, #2100]	; 0x834
 8016016:	4e56      	ldr	r6, [pc, #344]	; (8016170 <iNemo_update.constprop.46+0x3c8>)
 8016018:	4f56      	ldr	r7, [pc, #344]	; (8016174 <iNemo_update.constprop.46+0x3cc>)
 801601a:	f8d5 c078 	ldr.w	ip, [r5, #120]	; 0x78
 801601e:	f8d5 e07c 	ldr.w	lr, [r5, #124]	; 0x7c
 8016022:	f8c5 c088 	str.w	ip, [r5, #136]	; 0x88
 8016026:	ee09 2a90 	vmov	s19, r2
 801602a:	f043 0302 	orr.w	r3, r3, #2
 801602e:	f083 0301 	eor.w	r3, r3, #1
 8016032:	f8d5 c080 	ldr.w	ip, [r5, #128]	; 0x80
 8016036:	f8c5 e08c 	str.w	lr, [r5, #140]	; 0x8c
 801603a:	f5a6 719a 	sub.w	r1, r6, #308	; 0x134
 801603e:	f8d5 e084 	ldr.w	lr, [r5, #132]	; 0x84
 8016042:	f884 3834 	strb.w	r3, [r4, #2100]	; 0x834
 8016046:	22f8      	movs	r2, #248	; 0xf8
 8016048:	a828      	add	r0, sp, #160	; 0xa0
 801604a:	eef8 9a69 	vcvt.f32.u32	s19, s19
 801604e:	f8c5 c090 	str.w	ip, [r5, #144]	; 0x90
 8016052:	f8c5 e094 	str.w	lr, [r5, #148]	; 0x94
 8016056:	f005 fa63 	bl	801b520 <memcpy>
 801605a:	f8d7 e0b0 	ldr.w	lr, [r7, #176]	; 0xb0
 801605e:	f8d7 c0ac 	ldr.w	ip, [r7, #172]	; 0xac
 8016062:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8016066:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 801606a:	9715      	str	r7, [sp, #84]	; 0x54
 801606c:	f106 01fa 	add.w	r1, r6, #250	; 0xfa
 8016070:	f8c6 e050 	str.w	lr, [r6, #80]	; 0x50
 8016074:	f8c6 c04c 	str.w	ip, [r6, #76]	; 0x4c
 8016078:	6570      	str	r0, [r6, #84]	; 0x54
 801607a:	2200      	movs	r2, #0
 801607c:	f106 0cf9 	add.w	ip, r6, #249	; 0xf9
 8016080:	f106 03f8 	add.w	r3, r6, #248	; 0xf8
 8016084:	ee69 9a8a 	vmul.f32	s19, s19, s20
 8016088:	edcd aa2e 	vstr	s21, [sp, #184]	; 0xb8
 801608c:	ed16 aa0c 	vldr	s20, [r6, #-48]	; 0xffffffd0
 8016090:	ed56 aa05 	vldr	s21, [r6, #-20]	; 0xffffffec
 8016094:	ed8d ba30 	vstr	s22, [sp, #192]	; 0xc0
 8016098:	ed8d 8a2b 	vstr	s16, [sp, #172]	; 0xac
 801609c:	ed16 ba04 	vldr	s22, [r6, #-16]
 80160a0:	ed16 8a0f 	vldr	s16, [r6, #-60]	; 0xffffffc4
 80160a4:	ed8d 9a2d 	vstr	s18, [sp, #180]	; 0xb4
 80160a8:	edcd ba32 	vstr	s23, [sp, #200]	; 0xc8
 80160ac:	ed16 9a0d 	vldr	s18, [r6, #-52]	; 0xffffffcc
 80160b0:	ed56 ba03 	vldr	s23, [r6, #-12]
 80160b4:	edcd 8a33 	vstr	s17, [sp, #204]	; 0xcc
 80160b8:	f1a6 006c 	sub.w	r0, r6, #108	; 0x6c
 80160bc:	ed56 8a0e 	vldr	s17, [r6, #-56]	; 0xffffffc8
 80160c0:	9114      	str	r1, [sp, #80]	; 0x50
 80160c2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
 80160c6:	a91f      	add	r1, sp, #124	; 0x7c
 80160c8:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 80160cc:	9312      	str	r3, [sp, #72]	; 0x48
 80160ce:	900f      	str	r0, [sp, #60]	; 0x3c
 80160d0:	ed8d fa2f 	vstr	s30, [sp, #188]	; 0xbc
 80160d4:	632a      	str	r2, [r5, #48]	; 0x30
 80160d6:	636a      	str	r2, [r5, #52]	; 0x34
 80160d8:	63aa      	str	r2, [r5, #56]	; 0x38
 80160da:	ed8d ca2c 	vstr	s24, [sp, #176]	; 0xb0
 80160de:	9110      	str	r1, [sp, #64]	; 0x40
 80160e0:	edcd fa31 	vstr	s31, [sp, #196]	; 0xc4
 80160e4:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80160e8:	f856 0c1c 	ldr.w	r0, [r6, #-28]
 80160ec:	f7ea fa34 	bl	8000558 <__aeabi_f2d>
 80160f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80160f4:	f894 0816 	ldrb.w	r0, [r4, #2070]	; 0x816
 80160f8:	f7ea fa0c 	bl	8000514 <__aeabi_ui2d>
 80160fc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016100:	f894 3814 	ldrb.w	r3, [r4, #2068]	; 0x814
 8016104:	9308      	str	r3, [sp, #32]
 8016106:	f856 0c2c 	ldr.w	r0, [r6, #-44]
 801610a:	f894 e813 	ldrb.w	lr, [r4, #2067]	; 0x813
 801610e:	f894 2812 	ldrb.w	r2, [r4, #2066]	; 0x812
 8016112:	f894 3810 	ldrb.w	r3, [r4, #2064]	; 0x810
 8016116:	f894 1811 	ldrb.w	r1, [r4, #2065]	; 0x811
 801611a:	f8cd e01c 	str.w	lr, [sp, #28]
 801611e:	9206      	str	r2, [sp, #24]
 8016120:	9304      	str	r3, [sp, #16]
 8016122:	9105      	str	r1, [sp, #20]
 8016124:	f7ea fa18 	bl	8000558 <__aeabi_f2d>
 8016128:	f50d 7c86 	add.w	ip, sp, #268	; 0x10c
 801612c:	f10d 0edc 	add.w	lr, sp, #220	; 0xdc
 8016130:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016134:	eef0 3a6b 	vmov.f32	s7, s23
 8016138:	eeb0 3a4b 	vmov.f32	s6, s22
 801613c:	eef0 2a6a 	vmov.f32	s5, s21
 8016140:	eeb0 2a4a 	vmov.f32	s4, s20
 8016144:	eef0 1a49 	vmov.f32	s3, s18
 8016148:	eeb0 1a68 	vmov.f32	s2, s17
 801614c:	eef0 0a48 	vmov.f32	s1, s16
 8016150:	eeb0 0a69 	vmov.f32	s0, s19
 8016154:	ab34      	add	r3, sp, #208	; 0xd0
 8016156:	aa2e      	add	r2, sp, #184	; 0xb8
 8016158:	a92b      	add	r1, sp, #172	; 0xac
 801615a:	a84a      	add	r0, sp, #296	; 0x128
 801615c:	f8cd c004 	str.w	ip, [sp, #4]
 8016160:	f8cd e000 	str.w	lr, [sp]
 8016164:	e008      	b.n	8016178 <iNemo_update.constprop.46+0x3d0>
 8016166:	bf00      	nop
 8016168:	20001670 	.word	0x20001670
 801616c:	20000000 	.word	0x20000000
 8016170:	20001ea8 	.word	0x20001ea8
 8016174:	200008e8 	.word	0x200008e8
 8016178:	f7ff f9e6 	bl	8015548 <SpacePointAlgorithm.isra.10>
 801617c:	f1bb 0f00 	cmp.w	fp, #0
 8016180:	d00f      	beq.n	80161a2 <iNemo_update.constprop.46+0x3fa>
 8016182:	f8d9 2000 	ldr.w	r2, [r9]
 8016186:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801618a:	f8cb 2000 	str.w	r2, [fp]
 801618e:	f8cb 3004 	str.w	r3, [fp, #4]
 8016192:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8016196:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801619a:	f8cb 2008 	str.w	r2, [fp, #8]
 801619e:	f8cb 300c 	str.w	r3, [fp, #12]
 80161a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80161a6:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
 80161aa:	f894 3932 	ldrb.w	r3, [r4, #2354]	; 0x932
 80161ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80161b2:	f8c6 20fc 	str.w	r2, [r6, #252]	; 0xfc
 80161b6:	2b01      	cmp	r3, #1
 80161b8:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80161bc:	f8c6 2104 	str.w	r2, [r6, #260]	; 0x104
 80161c0:	f000 8093 	beq.w	80162ea <iNemo_update.constprop.46+0x542>
 80161c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80161c6:	f103 3aff 	add.w	sl, r3, #4294967295
 80161ca:	fa5f fa8a 	uxtb.w	sl, sl
 80161ce:	f1ba 0f08 	cmp.w	sl, #8
 80161d2:	bf9c      	itt	ls
 80161d4:	4b53      	ldrls	r3, [pc, #332]	; (8016324 <iNemo_update.constprop.46+0x57c>)
 80161d6:	f883 a8e0 	strbls.w	sl, [r3, #2272]	; 0x8e0
 80161da:	eddf 7a53 	vldr	s15, [pc, #332]	; 8016328 <iNemo_update.constprop.46+0x580>
 80161de:	ed98 6a00 	vldr	s12, [r8]
 80161e2:	edd8 6a01 	vldr	s13, [r8, #4]
 80161e6:	ed98 7a02 	vldr	s14, [r8, #8]
 80161ea:	f894 3931 	ldrb.w	r3, [r4, #2353]	; 0x931
 80161ee:	ee26 5a27 	vmul.f32	s10, s12, s15
 80161f2:	ee66 5aa7 	vmul.f32	s11, s13, s15
 80161f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80161fa:	ed85 5a1b 	vstr	s10, [r5, #108]	; 0x6c
 80161fe:	edc5 5a1c 	vstr	s11, [r5, #112]	; 0x70
 8016202:	edc5 7a1d 	vstr	s15, [r5, #116]	; 0x74
 8016206:	b13b      	cbz	r3, 8016218 <iNemo_update.constprop.46+0x470>
 8016208:	f894 3940 	ldrb.w	r3, [r4, #2368]	; 0x940
 801620c:	2b09      	cmp	r3, #9
 801620e:	d828      	bhi.n	8016262 <iNemo_update.constprop.46+0x4ba>
 8016210:	3301      	adds	r3, #1
 8016212:	f884 3940 	strb.w	r3, [r4, #2368]	; 0x940
 8016216:	e001      	b.n	801621c <iNemo_update.constprop.46+0x474>
 8016218:	f884 3940 	strb.w	r3, [r4, #2368]	; 0x940
 801621c:	f894 3834 	ldrb.w	r3, [r4, #2100]	; 0x834
 8016220:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8016224:	f8d7 e098 	ldr.w	lr, [r7, #152]	; 0x98
 8016228:	f8d7 509c 	ldr.w	r5, [r7, #156]	; 0x9c
 801622c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8016230:	f8c6 20ac 	str.w	r2, [r6, #172]	; 0xac
 8016234:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8016238:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801623c:	f8c6 e0b0 	str.w	lr, [r6, #176]	; 0xb0
 8016240:	f083 0302 	eor.w	r3, r3, #2
 8016244:	f884 3834 	strb.w	r3, [r4, #2100]	; 0x834
 8016248:	f8c6 50b4 	str.w	r5, [r6, #180]	; 0xb4
 801624c:	f8c6 00c4 	str.w	r0, [r6, #196]	; 0xc4
 8016250:	f8c6 10c8 	str.w	r1, [r6, #200]	; 0xc8
 8016254:	f8c6 20cc 	str.w	r2, [r6, #204]	; 0xcc
 8016258:	b067      	add	sp, #412	; 0x19c
 801625a:	ecbd 8b10 	vpop	{d8-d15}
 801625e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016262:	ed86 6a22 	vstr	s12, [r6, #136]	; 0x88
 8016266:	edc6 6a23 	vstr	s13, [r6, #140]	; 0x8c
 801626a:	ed86 7a24 	vstr	s14, [r6, #144]	; 0x90
 801626e:	e7d5      	b.n	801621c <iNemo_update.constprop.46+0x474>
 8016270:	ee62 2aa2 	vmul.f32	s5, s5, s5
 8016274:	ee22 2a02 	vmul.f32	s4, s4, s4
 8016278:	ee6b 7a0b 	vmul.f32	s15, s22, s22
 801627c:	ee32 2a82 	vadd.f32	s4, s5, s4
 8016280:	ee72 7a27 	vadd.f32	s15, s4, s15
 8016284:	ee17 0a90 	vmov	r0, s15
 8016288:	f7ea f966 	bl	8000558 <__aeabi_f2d>
 801628c:	ec41 0b10 	vmov	d0, r0, r1
 8016290:	f002 fc06 	bl	8018aa0 <sqrt>
 8016294:	ec51 0b10 	vmov	r0, r1, d0
 8016298:	f7ea fcaa 	bl	8000bf0 <__aeabi_d2f>
 801629c:	ee6c 6a0c 	vmul.f32	s13, s24, s24
 80162a0:	ee28 7a08 	vmul.f32	s14, s16, s16
 80162a4:	ee2e 3aae 	vmul.f32	s6, s29, s29
 80162a8:	ee37 7a26 	vadd.f32	s14, s14, s13
 80162ac:	ee07 0a90 	vmov	s15, r0
 80162b0:	ee37 7a03 	vadd.f32	s14, s14, s6
 80162b4:	eeca aaa7 	vdiv.f32	s21, s21, s15
 80162b8:	ee17 0a10 	vmov	r0, s14
 80162bc:	ee8f fa27 	vdiv.f32	s30, s30, s15
 80162c0:	ee8b ba27 	vdiv.f32	s22, s22, s15
 80162c4:	f7ea f948 	bl	8000558 <__aeabi_f2d>
 80162c8:	ec41 0b10 	vmov	d0, r0, r1
 80162cc:	f002 fbe8 	bl	8018aa0 <sqrt>
 80162d0:	ec51 0b10 	vmov	r0, r1, d0
 80162d4:	f7ea fc8c 	bl	8000bf0 <__aeabi_d2f>
 80162d8:	ee07 0a90 	vmov	s15, r0
 80162dc:	ee88 8a27 	vdiv.f32	s16, s16, s15
 80162e0:	ee8c ca27 	vdiv.f32	s24, s24, s15
 80162e4:	ee89 9a27 	vdiv.f32	s18, s18, s15
 80162e8:	e691      	b.n	801600e <iNemo_update.constprop.46+0x266>
 80162ea:	f8d9 200c 	ldr.w	r2, [r9, #12]
 80162ee:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80162f2:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
 80162f6:	f8c5 2094 	str.w	r2, [r5, #148]	; 0x94
 80162fa:	4a0a      	ldr	r2, [pc, #40]	; (8016324 <iNemo_update.constprop.46+0x57c>)
 80162fc:	f8d9 0000 	ldr.w	r0, [r9]
 8016300:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8016304:	67eb      	str	r3, [r5, #124]	; 0x7c
 8016306:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 801630a:	2300      	movs	r3, #0
 801630c:	67a8      	str	r0, [r5, #120]	; 0x78
 801630e:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
 8016312:	f8c5 1080 	str.w	r1, [r5, #128]	; 0x80
 8016316:	f8c5 1090 	str.w	r1, [r5, #144]	; 0x90
 801631a:	f884 3820 	strb.w	r3, [r4, #2080]	; 0x820
 801631e:	f882 38e0 	strb.w	r3, [r2, #2272]	; 0x8e0
 8016322:	e75a      	b.n	80161da <iNemo_update.constprop.46+0x432>
 8016324:	20000000 	.word	0x20000000
 8016328:	42652ee1 	.word	0x42652ee1
 801632c:	00000000 	.word	0x00000000

08016330 <quatErr2EulerErr>:
 8016330:	b570      	push	{r4, r5, r6, lr}
 8016332:	2300      	movs	r3, #0
 8016334:	6013      	str	r3, [r2, #0]
 8016336:	6053      	str	r3, [r2, #4]
 8016338:	6093      	str	r3, [r2, #8]
 801633a:	ed2d 8b04 	vpush	{d8-d9}
 801633e:	ed90 0a01 	vldr	s0, [r0, #4]
 8016342:	ed9f 8a7b 	vldr	s16, [pc, #492]	; 8016530 <quatErr2EulerErr+0x200>
 8016346:	4606      	mov	r6, r0
 8016348:	ee20 0a08 	vmul.f32	s0, s0, s16
 801634c:	460c      	mov	r4, r1
 801634e:	4615      	mov	r5, r2
 8016350:	f002 f904 	bl	801855c <cosf>
 8016354:	edd6 9a02 	vldr	s19, [r6, #8]
 8016358:	ee69 9a88 	vmul.f32	s19, s19, s16
 801635c:	eeb0 9a40 	vmov.f32	s18, s0
 8016360:	eeb0 0a69 	vmov.f32	s0, s19
 8016364:	f002 f960 	bl	8018628 <sinf>
 8016368:	eef0 8a40 	vmov.f32	s17, s0
 801636c:	eeb0 0a69 	vmov.f32	s0, s19
 8016370:	f002 f8f4 	bl	801855c <cosf>
 8016374:	ee68 8aa8 	vmul.f32	s17, s17, s17
 8016378:	ee20 8a00 	vmul.f32	s16, s0, s0
 801637c:	edd4 7a01 	vldr	s15, [r4, #4]
 8016380:	ed94 0a02 	vldr	s0, [r4, #8]
 8016384:	ee68 7a27 	vmul.f32	s15, s16, s15
 8016388:	ee28 0a80 	vmul.f32	s0, s17, s0
 801638c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016390:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8016394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016398:	eef1 9ac0 	vsqrt.f32	s19, s0
 801639c:	f100 80b5 	bmi.w	801650a <quatErr2EulerErr+0x1da>
 80163a0:	ee79 9aa9 	vadd.f32	s19, s19, s19
 80163a4:	eddf 7a63 	vldr	s15, [pc, #396]	; 8016534 <quatErr2EulerErr+0x204>
 80163a8:	ee69 7aa7 	vmul.f32	s15, s19, s15
 80163ac:	ee29 9a09 	vmul.f32	s18, s18, s18
 80163b0:	ee17 0a90 	vmov	r0, s15
 80163b4:	f7ea f8d0 	bl	8000558 <__aeabi_f2d>
 80163b8:	ed9f 1b57 	vldr	d1, [pc, #348]	; 8016518 <quatErr2EulerErr+0x1e8>
 80163bc:	ec41 0b10 	vmov	d0, r0, r1
 80163c0:	f002 f879 	bl	80184b6 <fmin>
 80163c4:	ec51 0b10 	vmov	r0, r1, d0
 80163c8:	f7ea fc12 	bl	8000bf0 <__aeabi_d2f>
 80163cc:	f7ea f8c4 	bl	8000558 <__aeabi_f2d>
 80163d0:	ed9f 1b53 	vldr	d1, [pc, #332]	; 8016520 <quatErr2EulerErr+0x1f0>
 80163d4:	ec41 0b10 	vmov	d0, r0, r1
 80163d8:	f002 f846 	bl	8018468 <fmax>
 80163dc:	ec51 0b10 	vmov	r0, r1, d0
 80163e0:	f7ea fc06 	bl	8000bf0 <__aeabi_d2f>
 80163e4:	6068      	str	r0, [r5, #4]
 80163e6:	edd4 7a01 	vldr	s15, [r4, #4]
 80163ea:	ed94 7a02 	vldr	s14, [r4, #8]
 80163ee:	eddf 6a52 	vldr	s13, [pc, #328]	; 8016538 <quatErr2EulerErr+0x208>
 80163f2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80163f6:	ee28 7a07 	vmul.f32	s14, s16, s14
 80163fa:	ee39 9a26 	vadd.f32	s18, s18, s13
 80163fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016402:	ee87 0a89 	vdiv.f32	s0, s15, s18
 8016406:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801640a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801640e:	eeb1 9ac0 	vsqrt.f32	s18, s0
 8016412:	d477      	bmi.n	8016504 <quatErr2EulerErr+0x1d4>
 8016414:	ee39 9a09 	vadd.f32	s18, s18, s18
 8016418:	eddf 7a46 	vldr	s15, [pc, #280]	; 8016534 <quatErr2EulerErr+0x204>
 801641c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8016420:	ee17 0a90 	vmov	r0, s15
 8016424:	f7ea f898 	bl	8000558 <__aeabi_f2d>
 8016428:	ed9f 1b3f 	vldr	d1, [pc, #252]	; 8016528 <quatErr2EulerErr+0x1f8>
 801642c:	ec41 0b10 	vmov	d0, r0, r1
 8016430:	f002 f841 	bl	80184b6 <fmin>
 8016434:	ec51 0b10 	vmov	r0, r1, d0
 8016438:	f7ea fbda 	bl	8000bf0 <__aeabi_d2f>
 801643c:	f7ea f88c 	bl	8000558 <__aeabi_f2d>
 8016440:	ed9f 1b37 	vldr	d1, [pc, #220]	; 8016520 <quatErr2EulerErr+0x1f0>
 8016444:	ec41 0b10 	vmov	d0, r0, r1
 8016448:	f002 f80e 	bl	8018468 <fmax>
 801644c:	ec51 0b10 	vmov	r0, r1, d0
 8016450:	f7ea fbce 	bl	8000bf0 <__aeabi_d2f>
 8016454:	6028      	str	r0, [r5, #0]
 8016456:	ed96 0a01 	vldr	s0, [r6, #4]
 801645a:	ed9f 6a35 	vldr	s12, [pc, #212]	; 8016530 <quatErr2EulerErr+0x200>
 801645e:	ed94 7a02 	vldr	s14, [r4, #8]
 8016462:	edd4 6a01 	vldr	s13, [r4, #4]
 8016466:	eddf 7a35 	vldr	s15, [pc, #212]	; 801653c <quatErr2EulerErr+0x20c>
 801646a:	ee20 0a06 	vmul.f32	s0, s0, s12
 801646e:	ee68 8a87 	vmul.f32	s17, s17, s14
 8016472:	eeb0 7ac0 	vabs.f32	s14, s0
 8016476:	ee28 8a26 	vmul.f32	s16, s16, s13
 801647a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801647e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016482:	ee38 8a28 	vadd.f32	s16, s16, s17
 8016486:	d432      	bmi.n	80164ee <quatErr2EulerErr+0x1be>
 8016488:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8016540 <quatErr2EulerErr+0x210>
 801648c:	edd4 7a00 	vldr	s15, [r4]
 8016490:	ee28 0a00 	vmul.f32	s0, s16, s0
 8016494:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016498:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801649c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164a0:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80164a4:	d434      	bmi.n	8016510 <quatErr2EulerErr+0x1e0>
 80164a6:	ee38 8a08 	vadd.f32	s16, s16, s16
 80164aa:	eddf 7a22 	vldr	s15, [pc, #136]	; 8016534 <quatErr2EulerErr+0x204>
 80164ae:	ee68 7a27 	vmul.f32	s15, s16, s15
 80164b2:	ee17 0a90 	vmov	r0, s15
 80164b6:	f7ea f84f 	bl	8000558 <__aeabi_f2d>
 80164ba:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8016528 <quatErr2EulerErr+0x1f8>
 80164be:	ec41 0b10 	vmov	d0, r0, r1
 80164c2:	f001 fff8 	bl	80184b6 <fmin>
 80164c6:	ec51 0b10 	vmov	r0, r1, d0
 80164ca:	f7ea fb91 	bl	8000bf0 <__aeabi_d2f>
 80164ce:	f7ea f843 	bl	8000558 <__aeabi_f2d>
 80164d2:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8016520 <quatErr2EulerErr+0x1f0>
 80164d6:	ec41 0b10 	vmov	d0, r0, r1
 80164da:	f001 ffc5 	bl	8018468 <fmax>
 80164de:	ec51 0b10 	vmov	r0, r1, d0
 80164e2:	f7ea fb85 	bl	8000bf0 <__aeabi_d2f>
 80164e6:	ecbd 8b04 	vpop	{d8-d9}
 80164ea:	60a8      	str	r0, [r5, #8]
 80164ec:	bd70      	pop	{r4, r5, r6, pc}
 80164ee:	f002 f8dd 	bl	80186ac <tanf>
 80164f2:	ee20 0a00 	vmul.f32	s0, s0, s0
 80164f6:	edd4 7a00 	vldr	s15, [r4]
 80164fa:	ee20 0a08 	vmul.f32	s0, s0, s16
 80164fe:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016502:	e7c9      	b.n	8016498 <quatErr2EulerErr+0x168>
 8016504:	f002 fb7e 	bl	8018c04 <sqrtf>
 8016508:	e784      	b.n	8016414 <quatErr2EulerErr+0xe4>
 801650a:	f002 fb7b 	bl	8018c04 <sqrtf>
 801650e:	e747      	b.n	80163a0 <quatErr2EulerErr+0x70>
 8016510:	f002 fb78 	bl	8018c04 <sqrtf>
 8016514:	e7c7      	b.n	80164a6 <quatErr2EulerErr+0x176>
 8016516:	bf00      	nop
 8016518:	00000000 	.word	0x00000000
 801651c:	40568000 	.word	0x40568000
 8016520:	00000000 	.word	0x00000000
 8016524:	3ff00000 	.word	0x3ff00000
 8016528:	00000000 	.word	0x00000000
 801652c:	40668000 	.word	0x40668000
 8016530:	3c8efa35 	.word	0x3c8efa35
 8016534:	42652ee1 	.word	0x42652ee1
 8016538:	3a83126f 	.word	0x3a83126f
 801653c:	3fbc430e 	.word	0x3fbc430e
 8016540:	42c6ab07 	.word	0x42c6ab07
 8016544:	00000000 	.word	0x00000000

08016548 <MotionFX_initialize>:
 8016548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801654c:	490a      	ldr	r1, [pc, #40]	; (8016578 <MotionFX_initialize+0x30>)
 801654e:	4a0b      	ldr	r2, [pc, #44]	; (801657c <MotionFX_initialize+0x34>)
 8016550:	680b      	ldr	r3, [r1, #0]
 8016552:	2001      	movs	r0, #1
 8016554:	f023 0301 	bic.w	r3, r3, #1
 8016558:	600b      	str	r3, [r1, #0]
 801655a:	b083      	sub	sp, #12
 801655c:	4613      	mov	r3, r2
 801655e:	6010      	str	r0, [r2, #0]
 8016560:	681e      	ldr	r6, [r3, #0]
 8016562:	2e00      	cmp	r6, #0
 8016564:	d1fc      	bne.n	8016560 <MotionFX_initialize+0x18>
 8016566:	4b06      	ldr	r3, [pc, #24]	; (8016580 <MotionFX_initialize+0x38>)
 8016568:	4a06      	ldr	r2, [pc, #24]	; (8016584 <MotionFX_initialize+0x3c>)
 801656a:	601a      	str	r2, [r3, #0]
 801656c:	681a      	ldr	r2, [r3, #0]
 801656e:	4b06      	ldr	r3, [pc, #24]	; (8016588 <MotionFX_initialize+0x40>)
 8016570:	429a      	cmp	r2, r3
 8016572:	d00b      	beq.n	801658c <MotionFX_initialize+0x44>
 8016574:	e7fe      	b.n	8016574 <MotionFX_initialize+0x2c>
 8016576:	bf00      	nop
 8016578:	e0002000 	.word	0xe0002000
 801657c:	40023008 	.word	0x40023008
 8016580:	40023000 	.word	0x40023000
 8016584:	f407a5c2 	.word	0xf407a5c2
 8016588:	b5e8b5cd 	.word	0xb5e8b5cd
 801658c:	4de6      	ldr	r5, [pc, #920]	; (8016928 <MotionFX_initialize+0x3e0>)
 801658e:	f8df 83cc 	ldr.w	r8, [pc, #972]	; 801695c <MotionFX_initialize+0x414>
 8016592:	ed9f 7ae6 	vldr	s14, [pc, #920]	; 801692c <MotionFX_initialize+0x3e4>
 8016596:	eddf 7ae6 	vldr	s15, [pc, #920]	; 8016930 <MotionFX_initialize+0x3e8>
 801659a:	f8c5 6944 	str.w	r6, [r5, #2372]	; 0x944
 801659e:	f04f 0b01 	mov.w	fp, #1
 80165a2:	ed9f 4bd7 	vldr	d4, [pc, #860]	; 8016900 <MotionFX_initialize+0x3b8>
 80165a6:	ed9f 2bd8 	vldr	d2, [pc, #864]	; 8016908 <MotionFX_initialize+0x3c0>
 80165aa:	ed9f 3bd9 	vldr	d3, [pc, #868]	; 8016910 <MotionFX_initialize+0x3c8>
 80165ae:	ed9f 5bda 	vldr	d5, [pc, #872]	; 8016918 <MotionFX_initialize+0x3d0>
 80165b2:	ed9f 6bdb 	vldr	d6, [pc, #876]	; 8016920 <MotionFX_initialize+0x3d8>
 80165b6:	f8c5 6948 	str.w	r6, [r5, #2376]	; 0x948
 80165ba:	f885 b941 	strb.w	fp, [r5, #2369]	; 0x941
 80165be:	f7f7 f8c3 	bl	800d748 <rt_InitInfAndNaN.isra.3>
 80165c2:	f241 11b5 	movw	r1, #4533	; 0x11b5
 80165c6:	f241 10b6 	movw	r0, #4534	; 0x11b6
 80165ca:	f241 12b4 	movw	r2, #4532	; 0x11b4
 80165ce:	f808 6001 	strb.w	r6, [r8, r1]
 80165d2:	f608 01e8 	addw	r1, r8, #2280	; 0x8e8
 80165d6:	2400      	movs	r4, #0
 80165d8:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
 80165dc:	230a      	movs	r3, #10
 80165de:	ed81 4b02 	vstr	d4, [r1, #8]
 80165e2:	ed81 2b08 	vstr	d2, [r1, #32]
 80165e6:	ed81 3b0a 	vstr	d3, [r1, #40]	; 0x28
 80165ea:	ed81 5b04 	vstr	d5, [r1, #16]
 80165ee:	ed81 6b06 	vstr	d6, [r1, #24]
 80165f2:	f808 6000 	strb.w	r6, [r8, r0]
 80165f6:	f808 6002 	strb.w	r6, [r8, r2]
 80165fa:	f888 38e0 	strb.w	r3, [r8, #2272]	; 0x8e0
 80165fe:	f8c1 7208 	str.w	r7, [r1, #520]	; 0x208
 8016602:	f8c1 420c 	str.w	r4, [r1, #524]	; 0x20c
 8016606:	f8c1 4210 	str.w	r4, [r1, #528]	; 0x210
 801660a:	9101      	str	r1, [sp, #4]
 801660c:	f8c5 63d0 	str.w	r6, [r5, #976]	; 0x3d0
 8016610:	f8c5 63dc 	str.w	r6, [r5, #988]	; 0x3dc
 8016614:	f8c5 63e8 	str.w	r6, [r5, #1000]	; 0x3e8
 8016618:	f8c5 63d4 	str.w	r6, [r5, #980]	; 0x3d4
 801661c:	f885 63d8 	strb.w	r6, [r5, #984]	; 0x3d8
 8016620:	f8c5 63e0 	str.w	r6, [r5, #992]	; 0x3e0
 8016624:	f885 63e4 	strb.w	r6, [r5, #996]	; 0x3e4
 8016628:	f8c5 63ec 	str.w	r6, [r5, #1004]	; 0x3ec
 801662c:	f885 63f0 	strb.w	r6, [r5, #1008]	; 0x3f0
 8016630:	f7f7 f88a 	bl	800d748 <rt_InitInfAndNaN.isra.3>
 8016634:	f205 7204 	addw	r2, r5, #1796	; 0x704
 8016638:	f205 43c4 	addw	r3, r5, #1220	; 0x4c4
 801663c:	f205 79fc 	addw	r9, r5, #2044	; 0x7fc
 8016640:	f205 5abc 	addw	sl, r5, #1468	; 0x5bc
 8016644:	ed88 4b06 	vstr	d4, [r8, #24]
 8016648:	ed88 5b08 	vstr	d5, [r8, #32]
 801664c:	eddf 4ab9 	vldr	s9, [pc, #740]	; 8016934 <MotionFX_initialize+0x3ec>
 8016650:	ed9f 5ab9 	vldr	s10, [pc, #740]	; 8016938 <MotionFX_initialize+0x3f0>
 8016654:	eddf 5ab9 	vldr	s11, [pc, #740]	; 801693c <MotionFX_initialize+0x3f4>
 8016658:	f8c8 7218 	str.w	r7, [r8, #536]	; 0x218
 801665c:	ed88 6b0a 	vstr	d6, [r8, #40]	; 0x28
 8016660:	ed88 2b0c 	vstr	d2, [r8, #48]	; 0x30
 8016664:	ed9f 6ab6 	vldr	s12, [pc, #728]	; 8016940 <MotionFX_initialize+0x3f8>
 8016668:	eddf 6ab6 	vldr	s13, [pc, #728]	; 8016944 <MotionFX_initialize+0x3fc>
 801666c:	f8c8 421c 	str.w	r4, [r8, #540]	; 0x21c
 8016670:	ed88 3b0e 	vstr	d3, [r8, #56]	; 0x38
 8016674:	f8c8 4220 	str.w	r4, [r8, #544]	; 0x220
 8016678:	6794      	str	r4, [r2, #120]	; 0x78
 801667a:	67d4      	str	r4, [r2, #124]	; 0x7c
 801667c:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
 8016680:	f8c2 7084 	str.w	r7, [r2, #132]	; 0x84
 8016684:	f8c2 4088 	str.w	r4, [r2, #136]	; 0x88
 8016688:	f8c2 408c 	str.w	r4, [r2, #140]	; 0x8c
 801668c:	f8c2 4090 	str.w	r4, [r2, #144]	; 0x90
 8016690:	f8c2 7094 	str.w	r7, [r2, #148]	; 0x94
 8016694:	f8c2 4098 	str.w	r4, [r2, #152]	; 0x98
 8016698:	f8c2 409c 	str.w	r4, [r2, #156]	; 0x9c
 801669c:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
 80166a0:	f888 68de 	strb.w	r6, [r8, #2270]	; 0x8de
 80166a4:	f888 68dd 	strb.w	r6, [r8, #2269]	; 0x8dd
 80166a8:	f888 68dc 	strb.w	r6, [r8, #2268]	; 0x8dc
 80166ac:	f8c5 63f4 	str.w	r6, [r5, #1012]	; 0x3f4
 80166b0:	f8c5 6400 	str.w	r6, [r5, #1024]	; 0x400
 80166b4:	f8c5 640c 	str.w	r6, [r5, #1036]	; 0x40c
 80166b8:	f888 b00c 	strb.w	fp, [r8, #12]
 80166bc:	f8c5 63f8 	str.w	r6, [r5, #1016]	; 0x3f8
 80166c0:	f885 63fc 	strb.w	r6, [r5, #1020]	; 0x3fc
 80166c4:	f8c5 6404 	str.w	r6, [r5, #1028]	; 0x404
 80166c8:	f885 6408 	strb.w	r6, [r5, #1032]	; 0x408
 80166cc:	f8c5 6410 	str.w	r6, [r5, #1040]	; 0x410
 80166d0:	f885 6414 	strb.w	r6, [r5, #1044]	; 0x414
 80166d4:	f8c2 70a4 	str.w	r7, [r2, #164]	; 0xa4
 80166d8:	f8c2 40a8 	str.w	r4, [r2, #168]	; 0xa8
 80166dc:	f8c2 40ac 	str.w	r4, [r2, #172]	; 0xac
 80166e0:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
 80166e4:	f8c2 70b4 	str.w	r7, [r2, #180]	; 0xb4
 80166e8:	f8c2 40b8 	str.w	r4, [r2, #184]	; 0xb8
 80166ec:	f8c2 40bc 	str.w	r4, [r2, #188]	; 0xbc
 80166f0:	f8c2 40c0 	str.w	r4, [r2, #192]	; 0xc0
 80166f4:	f8c2 70c4 	str.w	r7, [r2, #196]	; 0xc4
 80166f8:	f8c2 40c8 	str.w	r4, [r2, #200]	; 0xc8
 80166fc:	f8c2 40cc 	str.w	r4, [r2, #204]	; 0xcc
 8016700:	f8c2 40d0 	str.w	r4, [r2, #208]	; 0xd0
 8016704:	f8c2 70d4 	str.w	r7, [r2, #212]	; 0xd4
 8016708:	f8c2 40d8 	str.w	r4, [r2, #216]	; 0xd8
 801670c:	f8c2 40dc 	str.w	r4, [r2, #220]	; 0xdc
 8016710:	f8c2 40e0 	str.w	r4, [r2, #224]	; 0xe0
 8016714:	f8c2 70e4 	str.w	r7, [r2, #228]	; 0xe4
 8016718:	f8c2 40e8 	str.w	r4, [r2, #232]	; 0xe8
 801671c:	f8c2 40ec 	str.w	r4, [r2, #236]	; 0xec
 8016720:	f8c2 40f0 	str.w	r4, [r2, #240]	; 0xf0
 8016724:	f8c2 70f4 	str.w	r7, [r2, #244]	; 0xf4
 8016728:	63d7      	str	r7, [r2, #60]	; 0x3c
 801672a:	6414      	str	r4, [r2, #64]	; 0x40
 801672c:	6454      	str	r4, [r2, #68]	; 0x44
 801672e:	6494      	str	r4, [r2, #72]	; 0x48
 8016730:	64d7      	str	r7, [r2, #76]	; 0x4c
 8016732:	6514      	str	r4, [r2, #80]	; 0x50
 8016734:	6554      	str	r4, [r2, #84]	; 0x54
 8016736:	6594      	str	r4, [r2, #88]	; 0x58
 8016738:	65d7      	str	r7, [r2, #92]	; 0x5c
 801673a:	6614      	str	r4, [r2, #96]	; 0x60
 801673c:	6654      	str	r4, [r2, #100]	; 0x64
 801673e:	6694      	str	r4, [r2, #104]	; 0x68
 8016740:	66d4      	str	r4, [r2, #108]	; 0x6c
 8016742:	9901      	ldr	r1, [sp, #4]
 8016744:	f8df c218 	ldr.w	ip, [pc, #536]	; 8016960 <MotionFX_initialize+0x418>
 8016748:	487f      	ldr	r0, [pc, #508]	; (8016948 <MotionFX_initialize+0x400>)
 801674a:	6714      	str	r4, [r2, #112]	; 0x70
 801674c:	6754      	str	r4, [r2, #116]	; 0x74
 801674e:	2202      	movs	r2, #2
 8016750:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
 8016754:	f8c1 40a4 	str.w	r4, [r1, #164]	; 0xa4
 8016758:	f8c1 40a8 	str.w	r4, [r1, #168]	; 0xa8
 801675c:	f8c9 0010 	str.w	r0, [r9, #16]
 8016760:	f8c9 c030 	str.w	ip, [r9, #48]	; 0x30
 8016764:	f885 2818 	strb.w	r2, [r5, #2072]	; 0x818
 8016768:	edc9 4a00 	vstr	s9, [r9]
 801676c:	ed89 5a01 	vstr	s10, [r9, #4]
 8016770:	edc9 5a02 	vstr	s11, [r9, #8]
 8016774:	ed89 7a03 	vstr	s14, [r9, #12]
 8016778:	ed89 6a0a 	vstr	s12, [r9, #40]	; 0x28
 801677c:	edc9 6a0b 	vstr	s13, [r9, #44]	; 0x2c
 8016780:	edc9 7a0d 	vstr	s15, [r9, #52]	; 0x34
 8016784:	f8c9 7020 	str.w	r7, [r9, #32]
 8016788:	679c      	str	r4, [r3, #120]	; 0x78
 801678a:	67dc      	str	r4, [r3, #124]	; 0x7c
 801678c:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
 8016790:	f8c3 7084 	str.w	r7, [r3, #132]	; 0x84
 8016794:	f885 b810 	strb.w	fp, [r5, #2064]	; 0x810
 8016798:	f885 b811 	strb.w	fp, [r5, #2065]	; 0x811
 801679c:	f885 b812 	strb.w	fp, [r5, #2066]	; 0x812
 80167a0:	f885 b813 	strb.w	fp, [r5, #2067]	; 0x813
 80167a4:	f885 b814 	strb.w	fp, [r5, #2068]	; 0x814
 80167a8:	f885 6815 	strb.w	r6, [r5, #2069]	; 0x815
 80167ac:	f885 6816 	strb.w	r6, [r5, #2070]	; 0x816
 80167b0:	f885 6817 	strb.w	r6, [r5, #2071]	; 0x817
 80167b4:	f885 b820 	strb.w	fp, [r5, #2080]	; 0x820
 80167b8:	f885 6834 	strb.w	r6, [r5, #2100]	; 0x834
 80167bc:	f885 6836 	strb.w	r6, [r5, #2102]	; 0x836
 80167c0:	f885 2835 	strb.w	r2, [r5, #2101]	; 0x835
 80167c4:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
 80167c8:	f8c3 408c 	str.w	r4, [r3, #140]	; 0x8c
 80167cc:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
 80167d0:	f8c3 7094 	str.w	r7, [r3, #148]	; 0x94
 80167d4:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
 80167d8:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
 80167dc:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
 80167e0:	f8c3 70a4 	str.w	r7, [r3, #164]	; 0xa4
 80167e4:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
 80167e8:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
 80167ec:	f8c3 40b0 	str.w	r4, [r3, #176]	; 0xb0
 80167f0:	f8c3 70b4 	str.w	r7, [r3, #180]	; 0xb4
 80167f4:	f8c3 40b8 	str.w	r4, [r3, #184]	; 0xb8
 80167f8:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
 80167fc:	f8c3 40c0 	str.w	r4, [r3, #192]	; 0xc0
 8016800:	f8c3 70c4 	str.w	r7, [r3, #196]	; 0xc4
 8016804:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8
 8016808:	f8c3 40cc 	str.w	r4, [r3, #204]	; 0xcc
 801680c:	f8c3 40d0 	str.w	r4, [r3, #208]	; 0xd0
 8016810:	f8c3 70d4 	str.w	r7, [r3, #212]	; 0xd4
 8016814:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 8016818:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
 801681c:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
 8016820:	f8c3 70e4 	str.w	r7, [r3, #228]	; 0xe4
 8016824:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 8016828:	f8c3 40ec 	str.w	r4, [r3, #236]	; 0xec
 801682c:	f8c3 40f0 	str.w	r4, [r3, #240]	; 0xf0
 8016830:	f8c3 70f4 	str.w	r7, [r3, #244]	; 0xf4
 8016834:	63df      	str	r7, [r3, #60]	; 0x3c
 8016836:	641c      	str	r4, [r3, #64]	; 0x40
 8016838:	645c      	str	r4, [r3, #68]	; 0x44
 801683a:	649c      	str	r4, [r3, #72]	; 0x48
 801683c:	64df      	str	r7, [r3, #76]	; 0x4c
 801683e:	f8ca 0010 	str.w	r0, [sl, #16]
 8016842:	f8ca c030 	str.w	ip, [sl, #48]	; 0x30
 8016846:	f885 25d8 	strb.w	r2, [r5, #1496]	; 0x5d8
 801684a:	f885 25f5 	strb.w	r2, [r5, #1525]	; 0x5f5
 801684e:	edca 4a00 	vstr	s9, [sl]
 8016852:	ed8a 5a01 	vstr	s10, [sl, #4]
 8016856:	edca 5a02 	vstr	s11, [sl, #8]
 801685a:	ed8a 7a03 	vstr	s14, [sl, #12]
 801685e:	ed8a 6a0a 	vstr	s12, [sl, #40]	; 0x28
 8016862:	edca 6a0b 	vstr	s13, [sl, #44]	; 0x2c
 8016866:	edca 7a0d 	vstr	s15, [sl, #52]	; 0x34
 801686a:	651c      	str	r4, [r3, #80]	; 0x50
 801686c:	655c      	str	r4, [r3, #84]	; 0x54
 801686e:	659c      	str	r4, [r3, #88]	; 0x58
 8016870:	65df      	str	r7, [r3, #92]	; 0x5c
 8016872:	661c      	str	r4, [r3, #96]	; 0x60
 8016874:	665c      	str	r4, [r3, #100]	; 0x64
 8016876:	669c      	str	r4, [r3, #104]	; 0x68
 8016878:	66dc      	str	r4, [r3, #108]	; 0x6c
 801687a:	671c      	str	r4, [r3, #112]	; 0x70
 801687c:	675c      	str	r4, [r3, #116]	; 0x74
 801687e:	f8ca 7020 	str.w	r7, [sl, #32]
 8016882:	f885 b5d0 	strb.w	fp, [r5, #1488]	; 0x5d0
 8016886:	f885 b5d1 	strb.w	fp, [r5, #1489]	; 0x5d1
 801688a:	f885 65d2 	strb.w	r6, [r5, #1490]	; 0x5d2
 801688e:	f885 b5d3 	strb.w	fp, [r5, #1491]	; 0x5d3
 8016892:	f885 b5d4 	strb.w	fp, [r5, #1492]	; 0x5d4
 8016896:	f885 65d5 	strb.w	r6, [r5, #1493]	; 0x5d5
 801689a:	f885 65d6 	strb.w	r6, [r5, #1494]	; 0x5d6
 801689e:	f885 65d7 	strb.w	r6, [r5, #1495]	; 0x5d7
 80168a2:	f885 b5e0 	strb.w	fp, [r5, #1504]	; 0x5e0
 80168a6:	f885 65f4 	strb.w	r6, [r5, #1524]	; 0x5f4
 80168aa:	9201      	str	r2, [sp, #4]
 80168ac:	f8c8 40b0 	str.w	r4, [r8, #176]	; 0xb0
 80168b0:	f8c8 40b4 	str.w	r4, [r8, #180]	; 0xb4
 80168b4:	f8c8 40b8 	str.w	r4, [r8, #184]	; 0xb8
 80168b8:	f885 65f6 	strb.w	r6, [r5, #1526]	; 0x5f6
 80168bc:	f7f7 fb32 	bl	800df24 <iNemo_setOrientation.constprop.51>
 80168c0:	f7f7 fd0e 	bl	800e2e0 <iNemo_setOrientation_6X.constprop.52>
 80168c4:	4f21      	ldr	r7, [pc, #132]	; (801694c <MotionFX_initialize+0x404>)
 80168c6:	4822      	ldr	r0, [pc, #136]	; (8016950 <MotionFX_initialize+0x408>)
 80168c8:	4922      	ldr	r1, [pc, #136]	; (8016954 <MotionFX_initialize+0x40c>)
 80168ca:	4b23      	ldr	r3, [pc, #140]	; (8016958 <MotionFX_initialize+0x410>)
 80168cc:	9a01      	ldr	r2, [sp, #4]
 80168ce:	f8df c094 	ldr.w	ip, [pc, #148]	; 8016964 <MotionFX_initialize+0x41c>
 80168d2:	ed8a 7a03 	vstr	s14, [sl, #12]
 80168d6:	f04f 547f 	mov.w	r4, #1069547520	; 0x3fc00000
 80168da:	f04f 3e01 	mov.w	lr, #16843009	; 0x1010101
 80168de:	edca 7a0d 	vstr	s15, [sl, #52]	; 0x34
 80168e2:	ed89 7a03 	vstr	s14, [r9, #12]
 80168e6:	edc9 7a0d 	vstr	s15, [r9, #52]	; 0x34
 80168ea:	f885 25f5 	strb.w	r2, [r5, #1525]	; 0x5f5
 80168ee:	f885 65f6 	strb.w	r6, [r5, #1526]	; 0x5f6
 80168f2:	f885 2835 	strb.w	r2, [r5, #2101]	; 0x835
 80168f6:	f885 6836 	strb.w	r6, [r5, #2102]	; 0x836
 80168fa:	f8c5 c5d1 	str.w	ip, [r5, #1489]	; 0x5d1
 80168fe:	e033      	b.n	8016968 <MotionFX_initialize+0x420>
 8016900:	60000000 	.word	0x60000000
 8016904:	3fc76cab 	.word	0x3fc76cab
 8016908:	c0000000 	.word	0xc0000000
 801690c:	3fb2875e 	.word	0x3fb2875e
 8016910:	60000000 	.word	0x60000000
 8016914:	3f9f1fed 	.word	0x3f9f1fed
 8016918:	20000000 	.word	0x20000000
 801691c:	3fc55a40 	.word	0x3fc55a40
 8016920:	00000000 	.word	0x00000000
 8016924:	3fbfdfb7 	.word	0x3fbfdfb7
 8016928:	20001670 	.word	0x20001670
 801692c:	3f2ac083 	.word	0x3f2ac083
 8016930:	3dcccccd 	.word	0x3dcccccd
 8016934:	3f639581 	.word	0x3f639581
 8016938:	402ab021 	.word	0x402ab021
 801693c:	3f13f7cf 	.word	0x3f13f7cf
 8016940:	39712c28 	.word	0x39712c28
 8016944:	3a09a027 	.word	0x3a09a027
 8016948:	41200000 	.word	0x41200000
 801694c:	3f666666 	.word	0x3f666666
 8016950:	3a51b717 	.word	0x3a51b717
 8016954:	3a378034 	.word	0x3a378034
 8016958:	3b378034 	.word	0x3b378034
 801695c:	20000000 	.word	0x20000000
 8016960:	39b24207 	.word	0x39b24207
 8016964:	01010001 	.word	0x01010001
 8016968:	f8c5 e811 	str.w	lr, [r5, #2065]	; 0x811
 801696c:	f8ca 7000 	str.w	r7, [sl]
 8016970:	f8c9 7000 	str.w	r7, [r9]
 8016974:	f8ca 4004 	str.w	r4, [sl, #4]
 8016978:	f8c9 4004 	str.w	r4, [r9, #4]
 801697c:	f8ca 0028 	str.w	r0, [sl, #40]	; 0x28
 8016980:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
 8016984:	f8ca 102c 	str.w	r1, [sl, #44]	; 0x2c
 8016988:	f8c9 102c 	str.w	r1, [r9, #44]	; 0x2c
 801698c:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
 8016990:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
 8016994:	b003      	add	sp, #12
 8016996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801699a:	bf00      	nop

0801699c <MotionFX_setKnobs>:
 801699c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801699e:	4b2f      	ldr	r3, [pc, #188]	; (8016a5c <MotionFX_setKnobs+0xc0>)
 80169a0:	f893 2941 	ldrb.w	r2, [r3, #2369]	; 0x941
 80169a4:	b902      	cbnz	r2, 80169a8 <MotionFX_setKnobs+0xc>
 80169a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80169a8:	2800      	cmp	r0, #0
 80169aa:	d0fc      	beq.n	80169a6 <MotionFX_setKnobs+0xa>
 80169ac:	f203 52bc 	addw	r2, r3, #1468	; 0x5bc
 80169b0:	6884      	ldr	r4, [r0, #8]
 80169b2:	6806      	ldr	r6, [r0, #0]
 80169b4:	6845      	ldr	r5, [r0, #4]
 80169b6:	60d4      	str	r4, [r2, #12]
 80169b8:	7b01      	ldrb	r1, [r0, #12]
 80169ba:	f883 15d1 	strb.w	r1, [r3, #1489]	; 0x5d1
 80169be:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80169c2:	f8d0 e014 	ldr.w	lr, [r0, #20]
 80169c6:	6987      	ldr	r7, [r0, #24]
 80169c8:	6317      	str	r7, [r2, #48]	; 0x30
 80169ca:	f8c2 c028 	str.w	ip, [r2, #40]	; 0x28
 80169ce:	f8c2 e02c 	str.w	lr, [r2, #44]	; 0x2c
 80169d2:	f890 7028 	ldrb.w	r7, [r0, #40]	; 0x28
 80169d6:	f883 75f5 	strb.w	r7, [r3, #1525]	; 0x5f5
 80169da:	f890 e035 	ldrb.w	lr, [r0, #53]	; 0x35
 80169de:	f883 e5f6 	strb.w	lr, [r3, #1526]	; 0x5f6
 80169e2:	f883 1811 	strb.w	r1, [r3, #2065]	; 0x811
 80169e6:	f203 71fc 	addw	r1, r3, #2044	; 0x7fc
 80169ea:	6016      	str	r6, [r2, #0]
 80169ec:	6055      	str	r5, [r2, #4]
 80169ee:	6a02      	ldr	r2, [r0, #32]
 80169f0:	f8d0 c01c 	ldr.w	ip, [r0, #28]
 80169f4:	62ca      	str	r2, [r1, #44]	; 0x2c
 80169f6:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80169f8:	f883 e836 	strb.w	lr, [r3, #2102]	; 0x836
 80169fc:	f883 7835 	strb.w	r7, [r3, #2101]	; 0x835
 8016a00:	6b87      	ldr	r7, [r0, #56]	; 0x38
 8016a02:	f8c1 c028 	str.w	ip, [r1, #40]	; 0x28
 8016a06:	630a      	str	r2, [r1, #48]	; 0x30
 8016a08:	4a15      	ldr	r2, [pc, #84]	; (8016a60 <MotionFX_setKnobs+0xc4>)
 8016a0a:	600e      	str	r6, [r1, #0]
 8016a0c:	604d      	str	r5, [r1, #4]
 8016a0e:	60cc      	str	r4, [r1, #12]
 8016a10:	f8c3 794c 	str.w	r7, [r3, #2380]	; 0x94c
 8016a14:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8016a18:	7013      	strb	r3, [r2, #0]
 8016a1a:	f890 e031 	ldrb.w	lr, [r0, #49]	; 0x31
 8016a1e:	f890 702a 	ldrb.w	r7, [r0, #42]	; 0x2a
 8016a22:	f890 602e 	ldrb.w	r6, [r0, #46]	; 0x2e
 8016a26:	f890 5032 	ldrb.w	r5, [r0, #50]	; 0x32
 8016a2a:	f890 402b 	ldrb.w	r4, [r0, #43]	; 0x2b
 8016a2e:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 8016a32:	f890 c02d 	ldrb.w	ip, [r0, #45]	; 0x2d
 8016a36:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
 8016a3a:	f882 e008 	strb.w	lr, [r2, #8]
 8016a3e:	7057      	strb	r7, [r2, #1]
 8016a40:	7156      	strb	r6, [r2, #5]
 8016a42:	7255      	strb	r5, [r2, #9]
 8016a44:	7094      	strb	r4, [r2, #2]
 8016a46:	7293      	strb	r3, [r2, #10]
 8016a48:	f882 c004 	strb.w	ip, [r2, #4]
 8016a4c:	7191      	strb	r1, [r2, #6]
 8016a4e:	f7f7 fa69 	bl	800df24 <iNemo_setOrientation.constprop.51>
 8016a52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016a56:	f7f7 bc43 	b.w	800e2e0 <iNemo_setOrientation_6X.constprop.52>
 8016a5a:	bf00      	nop
 8016a5c:	20001670 	.word	0x20001670
 8016a60:	20000000 	.word	0x20000000

08016a64 <MotionFX_getKnobs>:
 8016a64:	4b28      	ldr	r3, [pc, #160]	; (8016b08 <MotionFX_getKnobs+0xa4>)
 8016a66:	f893 2941 	ldrb.w	r2, [r3, #2369]	; 0x941
 8016a6a:	b902      	cbnz	r2, 8016a6e <MotionFX_getKnobs+0xa>
 8016a6c:	4770      	bx	lr
 8016a6e:	2800      	cmp	r0, #0
 8016a70:	d0fc      	beq.n	8016a6c <MotionFX_getKnobs+0x8>
 8016a72:	b4f0      	push	{r4, r5, r6, r7}
 8016a74:	f203 72fc 	addw	r2, r3, #2044	; 0x7fc
 8016a78:	68d1      	ldr	r1, [r2, #12]
 8016a7a:	6854      	ldr	r4, [r2, #4]
 8016a7c:	6815      	ldr	r5, [r2, #0]
 8016a7e:	6005      	str	r5, [r0, #0]
 8016a80:	6044      	str	r4, [r0, #4]
 8016a82:	6081      	str	r1, [r0, #8]
 8016a84:	f893 1811 	ldrb.w	r1, [r3, #2065]	; 0x811
 8016a88:	7301      	strb	r1, [r0, #12]
 8016a8a:	f203 51bc 	addw	r1, r3, #1468	; 0x5bc
 8016a8e:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8016a90:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8016a92:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8016a94:	6a8f      	ldr	r7, [r1, #40]	; 0x28
 8016a96:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8016a98:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8016a9a:	6242      	str	r2, [r0, #36]	; 0x24
 8016a9c:	6107      	str	r7, [r0, #16]
 8016a9e:	6185      	str	r5, [r0, #24]
 8016aa0:	61c4      	str	r4, [r0, #28]
 8016aa2:	6146      	str	r6, [r0, #20]
 8016aa4:	6201      	str	r1, [r0, #32]
 8016aa6:	4a19      	ldr	r2, [pc, #100]	; (8016b0c <MotionFX_getKnobs+0xa8>)
 8016aa8:	f893 1835 	ldrb.w	r1, [r3, #2101]	; 0x835
 8016aac:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
 8016ab0:	f893 6836 	ldrb.w	r6, [r3, #2102]	; 0x836
 8016ab4:	f8d3 594c 	ldr.w	r5, [r3, #2380]	; 0x94c
 8016ab8:	7814      	ldrb	r4, [r2, #0]
 8016aba:	7911      	ldrb	r1, [r2, #4]
 8016abc:	7a13      	ldrb	r3, [r2, #8]
 8016abe:	f880 6035 	strb.w	r6, [r0, #53]	; 0x35
 8016ac2:	6385      	str	r5, [r0, #56]	; 0x38
 8016ac4:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
 8016ac8:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d
 8016acc:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
 8016ad0:	2300      	movs	r3, #0
 8016ad2:	7857      	ldrb	r7, [r2, #1]
 8016ad4:	7956      	ldrb	r6, [r2, #5]
 8016ad6:	7a55      	ldrb	r5, [r2, #9]
 8016ad8:	7894      	ldrb	r4, [r2, #2]
 8016ada:	7991      	ldrb	r1, [r2, #6]
 8016adc:	7a92      	ldrb	r2, [r2, #10]
 8016ade:	f880 702a 	strb.w	r7, [r0, #42]	; 0x2a
 8016ae2:	f880 602e 	strb.w	r6, [r0, #46]	; 0x2e
 8016ae6:	f880 5032 	strb.w	r5, [r0, #50]	; 0x32
 8016aea:	f880 402b 	strb.w	r4, [r0, #43]	; 0x2b
 8016aee:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
 8016af2:	f880 2033 	strb.w	r2, [r0, #51]	; 0x33
 8016af6:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8016afa:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
 8016afe:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
 8016b02:	bcf0      	pop	{r4, r5, r6, r7}
 8016b04:	4770      	bx	lr
 8016b06:	bf00      	nop
 8016b08:	20001670 	.word	0x20001670
 8016b0c:	20000000 	.word	0x20000000

08016b10 <MotionFX_enable_6X>:
 8016b10:	4b0d      	ldr	r3, [pc, #52]	; (8016b48 <MotionFX_enable_6X+0x38>)
 8016b12:	f893 2941 	ldrb.w	r2, [r3, #2369]	; 0x941
 8016b16:	b112      	cbz	r2, 8016b1e <MotionFX_enable_6X+0xe>
 8016b18:	f8c3 0944 	str.w	r0, [r3, #2372]	; 0x944
 8016b1c:	b900      	cbnz	r0, 8016b20 <MotionFX_enable_6X+0x10>
 8016b1e:	4770      	bx	lr
 8016b20:	b430      	push	{r4, r5}
 8016b22:	4a0a      	ldr	r2, [pc, #40]	; (8016b4c <MotionFX_enable_6X+0x3c>)
 8016b24:	4d0a      	ldr	r5, [pc, #40]	; (8016b50 <MotionFX_enable_6X+0x40>)
 8016b26:	480b      	ldr	r0, [pc, #44]	; (8016b54 <MotionFX_enable_6X+0x44>)
 8016b28:	60d8      	str	r0, [r3, #12]
 8016b2a:	f04f 41ff 	mov.w	r1, #2139095040	; 0x7f800000
 8016b2e:	6099      	str	r1, [r3, #8]
 8016b30:	2100      	movs	r1, #0
 8016b32:	2400      	movs	r4, #0
 8016b34:	f882 18de 	strb.w	r1, [r2, #2270]	; 0x8de
 8016b38:	f882 18dd 	strb.w	r1, [r2, #2269]	; 0x8dd
 8016b3c:	f882 18dc 	strb.w	r1, [r2, #2268]	; 0x8dc
 8016b40:	e9c3 4500 	strd	r4, r5, [r3]
 8016b44:	bc30      	pop	{r4, r5}
 8016b46:	4770      	bx	lr
 8016b48:	20001670 	.word	0x20001670
 8016b4c:	20000000 	.word	0x20000000
 8016b50:	fff80000 	.word	0xfff80000
 8016b54:	ff800000 	.word	0xff800000

08016b58 <MotionFX_enable_9X>:
 8016b58:	4b11      	ldr	r3, [pc, #68]	; (8016ba0 <MotionFX_enable_9X+0x48>)
 8016b5a:	f893 2941 	ldrb.w	r2, [r3, #2369]	; 0x941
 8016b5e:	b112      	cbz	r2, 8016b66 <MotionFX_enable_9X+0xe>
 8016b60:	f8c3 0948 	str.w	r0, [r3, #2376]	; 0x948
 8016b64:	b900      	cbnz	r0, 8016b68 <MotionFX_enable_9X+0x10>
 8016b66:	4770      	bx	lr
 8016b68:	e92d 0370 	stmdb	sp!, {r4, r5, r6, r8, r9}
 8016b6c:	4a0d      	ldr	r2, [pc, #52]	; (8016ba4 <MotionFX_enable_9X+0x4c>)
 8016b6e:	f8df 903c 	ldr.w	r9, [pc, #60]	; 8016bac <MotionFX_enable_9X+0x54>
 8016b72:	480d      	ldr	r0, [pc, #52]	; (8016ba8 <MotionFX_enable_9X+0x50>)
 8016b74:	60d8      	str	r0, [r3, #12]
 8016b76:	f04f 41ff 	mov.w	r1, #2139095040	; 0x7f800000
 8016b7a:	f241 16b6 	movw	r6, #4534	; 0x11b6
 8016b7e:	f241 15b5 	movw	r5, #4533	; 0x11b5
 8016b82:	f241 14b4 	movw	r4, #4532	; 0x11b4
 8016b86:	6099      	str	r1, [r3, #8]
 8016b88:	2100      	movs	r1, #0
 8016b8a:	5591      	strb	r1, [r2, r6]
 8016b8c:	5551      	strb	r1, [r2, r5]
 8016b8e:	5511      	strb	r1, [r2, r4]
 8016b90:	f04f 0800 	mov.w	r8, #0
 8016b94:	e9c3 8900 	strd	r8, r9, [r3]
 8016b98:	e8bd 0370 	ldmia.w	sp!, {r4, r5, r6, r8, r9}
 8016b9c:	4770      	bx	lr
 8016b9e:	bf00      	nop
 8016ba0:	20001670 	.word	0x20001670
 8016ba4:	20000000 	.word	0x20000000
 8016ba8:	ff800000 	.word	0xff800000
 8016bac:	fff80000 	.word	0xfff80000

08016bb0 <MotionFX_update>:
 8016bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bb4:	4eca      	ldr	r6, [pc, #808]	; (8016ee0 <MotionFX_update+0x330>)
 8016bb6:	ed2d 8b02 	vpush	{d8}
 8016bba:	f896 3941 	ldrb.w	r3, [r6, #2369]	; 0x941
 8016bbe:	b08a      	sub	sp, #40	; 0x28
 8016bc0:	b923      	cbnz	r3, 8016bcc <MotionFX_update+0x1c>
 8016bc2:	b00a      	add	sp, #40	; 0x28
 8016bc4:	ecbd 8b02 	vpop	{d8}
 8016bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bcc:	4604      	mov	r4, r0
 8016bce:	eeb0 8a40 	vmov.f32	s16, s0
 8016bd2:	2a00      	cmp	r2, #0
 8016bd4:	f000 80d7 	beq.w	8016d86 <MotionFX_update+0x1d6>
 8016bd8:	4bc2      	ldr	r3, [pc, #776]	; (8016ee4 <MotionFX_update+0x334>)
 8016bda:	68cf      	ldr	r7, [r1, #12]
 8016bdc:	f8d1 c000 	ldr.w	ip, [r1]
 8016be0:	690d      	ldr	r5, [r1, #16]
 8016be2:	f8d1 e018 	ldr.w	lr, [r1, #24]
 8016be6:	619f      	str	r7, [r3, #24]
 8016be8:	f5a3 7010 	sub.w	r0, r3, #576	; 0x240
 8016bec:	f8c3 c00c 	str.w	ip, [r3, #12]
 8016bf0:	6187      	str	r7, [r0, #24]
 8016bf2:	684f      	ldr	r7, [r1, #4]
 8016bf4:	f8c0 c00c 	str.w	ip, [r0, #12]
 8016bf8:	f8d1 c01c 	ldr.w	ip, [r1, #28]
 8016bfc:	f8c0 e024 	str.w	lr, [r0, #36]	; 0x24
 8016c00:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
 8016c04:	f8d1 e014 	ldr.w	lr, [r1, #20]
 8016c08:	6107      	str	r7, [r0, #16]
 8016c0a:	611f      	str	r7, [r3, #16]
 8016c0c:	f8d6 794c 	ldr.w	r7, [r6, #2380]	; 0x94c
 8016c10:	61dd      	str	r5, [r3, #28]
 8016c12:	61c5      	str	r5, [r0, #28]
 8016c14:	688d      	ldr	r5, [r1, #8]
 8016c16:	6a09      	ldr	r1, [r1, #32]
 8016c18:	6145      	str	r5, [r0, #20]
 8016c1a:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
 8016c1e:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
 8016c22:	f8c3 e020 	str.w	lr, [r3, #32]
 8016c26:	f8c0 e020 	str.w	lr, [r0, #32]
 8016c2a:	62c1      	str	r1, [r0, #44]	; 0x2c
 8016c2c:	615d      	str	r5, [r3, #20]
 8016c2e:	62d9      	str	r1, [r3, #44]	; 0x2c
 8016c30:	b187      	cbz	r7, 8016c54 <MotionFX_update+0xa4>
 8016c32:	f896 3834 	ldrb.w	r3, [r6, #2100]	; 0x834
 8016c36:	07dd      	lsls	r5, r3, #31
 8016c38:	d403      	bmi.n	8016c42 <MotionFX_update+0x92>
 8016c3a:	f896 35f4 	ldrb.w	r3, [r6, #1524]	; 0x5f4
 8016c3e:	07d8      	lsls	r0, r3, #31
 8016c40:	d525      	bpl.n	8016c8e <MotionFX_update+0xde>
 8016c42:	49a9      	ldr	r1, [pc, #676]	; (8016ee8 <MotionFX_update+0x338>)
 8016c44:	f8d1 30c0 	ldr.w	r3, [r1, #192]	; 0xc0
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	f340 809e 	ble.w	8016d8a <MotionFX_update+0x1da>
 8016c4e:	3b01      	subs	r3, #1
 8016c50:	f8c1 30c0 	str.w	r3, [r1, #192]	; 0xc0
 8016c54:	f8d6 3944 	ldr.w	r3, [r6, #2372]	; 0x944
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	f000 808e 	beq.w	8016d7a <MotionFX_update+0x1ca>
 8016c5e:	f896 35f4 	ldrb.w	r3, [r6, #1524]	; 0x5f4
 8016c62:	07d9      	lsls	r1, r3, #31
 8016c64:	f140 8089 	bpl.w	8016d7a <MotionFX_update+0x1ca>
 8016c68:	4610      	mov	r0, r2
 8016c6a:	eeb0 0a48 	vmov.f32	s0, s16
 8016c6e:	9201      	str	r2, [sp, #4]
 8016c70:	f7fe fe7c 	bl	801596c <iNemo_update_6X.constprop.45>
 8016c74:	f8d6 3948 	ldr.w	r3, [r6, #2376]	; 0x948
 8016c78:	9a01      	ldr	r2, [sp, #4]
 8016c7a:	b143      	cbz	r3, 8016c8e <MotionFX_update+0xde>
 8016c7c:	f896 3834 	ldrb.w	r3, [r6, #2100]	; 0x834
 8016c80:	07db      	lsls	r3, r3, #31
 8016c82:	d504      	bpl.n	8016c8e <MotionFX_update+0xde>
 8016c84:	4610      	mov	r0, r2
 8016c86:	eeb0 0a48 	vmov.f32	s0, s16
 8016c8a:	f7ff f88d 	bl	8015da8 <iNemo_update.constprop.46>
 8016c8e:	4d97      	ldr	r5, [pc, #604]	; (8016eec <MotionFX_update+0x33c>)
 8016c90:	69ea      	ldr	r2, [r5, #28]
 8016c92:	69af      	ldr	r7, [r5, #24]
 8016c94:	f8d5 025c 	ldr.w	r0, [r5, #604]	; 0x25c
 8016c98:	f8d5 1258 	ldr.w	r1, [r5, #600]	; 0x258
 8016c9c:	60e1      	str	r1, [r4, #12]
 8016c9e:	64a7      	str	r7, [r4, #72]	; 0x48
 8016ca0:	f8d5 1260 	ldr.w	r1, [r5, #608]	; 0x260
 8016ca4:	6a2f      	ldr	r7, [r5, #32]
 8016ca6:	64e2      	str	r2, [r4, #76]	; 0x4c
 8016ca8:	6120      	str	r0, [r4, #16]
 8016caa:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8016cac:	f8d5 0264 	ldr.w	r0, [r5, #612]	; 0x264
 8016cb0:	6527      	str	r7, [r4, #80]	; 0x50
 8016cb2:	6161      	str	r1, [r4, #20]
 8016cb4:	68ef      	ldr	r7, [r5, #12]
 8016cb6:	f8d5 124c 	ldr.w	r1, [r5, #588]	; 0x24c
 8016cba:	61a0      	str	r0, [r4, #24]
 8016cbc:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
 8016cc0:	6562      	str	r2, [r4, #84]	; 0x54
 8016cc2:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
 8016cc6:	63e7      	str	r7, [r4, #60]	; 0x3c
 8016cc8:	f8d5 72d4 	ldr.w	r7, [r5, #724]	; 0x2d4
 8016ccc:	65a0      	str	r0, [r4, #88]	; 0x58
 8016cce:	f8d5 02e0 	ldr.w	r0, [r5, #736]	; 0x2e0
 8016cd2:	6021      	str	r1, [r4, #0]
 8016cd4:	6662      	str	r2, [r4, #100]	; 0x64
 8016cd6:	6929      	ldr	r1, [r5, #16]
 8016cd8:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 8016cdc:	65e2      	str	r2, [r4, #92]	; 0x5c
 8016cde:	61e7      	str	r7, [r4, #28]
 8016ce0:	6421      	str	r1, [r4, #64]	; 0x40
 8016ce2:	62a0      	str	r0, [r4, #40]	; 0x28
 8016ce4:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
 8016ce8:	f8d5 2250 	ldr.w	r2, [r5, #592]	; 0x250
 8016cec:	f8d5 72d8 	ldr.w	r7, [r5, #728]	; 0x2d8
 8016cf0:	f8d5 12e4 	ldr.w	r1, [r5, #740]	; 0x2e4
 8016cf4:	66a0      	str	r0, [r4, #104]	; 0x68
 8016cf6:	f8d5 0254 	ldr.w	r0, [r5, #596]	; 0x254
 8016cfa:	6062      	str	r2, [r4, #4]
 8016cfc:	696a      	ldr	r2, [r5, #20]
 8016cfe:	f8d5 32e8 	ldr.w	r3, [r5, #744]	; 0x2e8
 8016d02:	6227      	str	r7, [r4, #32]
 8016d04:	f8d5 709c 	ldr.w	r7, [r5, #156]	; 0x9c
 8016d08:	62e1      	str	r1, [r4, #44]	; 0x2c
 8016d0a:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 8016d0e:	6462      	str	r2, [r4, #68]	; 0x44
 8016d10:	f8d5 22dc 	ldr.w	r2, [r5, #732]	; 0x2dc
 8016d14:	6262      	str	r2, [r4, #36]	; 0x24
 8016d16:	60a0      	str	r0, [r4, #8]
 8016d18:	66e1      	str	r1, [r4, #108]	; 0x6c
 8016d1a:	6323      	str	r3, [r4, #48]	; 0x30
 8016d1c:	f505 714f 	add.w	r1, r5, #828	; 0x33c
 8016d20:	f505 7013 	add.w	r0, r5, #588	; 0x24c
 8016d24:	aa03      	add	r2, sp, #12
 8016d26:	6627      	str	r7, [r4, #96]	; 0x60
 8016d28:	f7ff fb02 	bl	8016330 <quatErr2EulerErr>
 8016d2c:	9b03      	ldr	r3, [sp, #12]
 8016d2e:	63a3      	str	r3, [r4, #56]	; 0x38
 8016d30:	aa03      	add	r2, sp, #12
 8016d32:	f105 01fc 	add.w	r1, r5, #252	; 0xfc
 8016d36:	f105 000c 	add.w	r0, r5, #12
 8016d3a:	f7ff faf9 	bl	8016330 <quatErr2EulerErr>
 8016d3e:	9a03      	ldr	r2, [sp, #12]
 8016d40:	f896 35f6 	ldrb.w	r3, [r6, #1526]	; 0x5f6
 8016d44:	6762      	str	r2, [r4, #116]	; 0x74
 8016d46:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8016d4a:	f104 0258 	add.w	r2, r4, #88	; 0x58
 8016d4e:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8016d52:	f7f7 fdcd 	bl	800e8f0 <iNemo_quat2heading>
 8016d56:	f896 3836 	ldrb.w	r3, [r6, #2102]	; 0x836
 8016d5a:	ed84 0a1c 	vstr	s0, [r4, #112]	; 0x70
 8016d5e:	f104 021c 	add.w	r2, r4, #28
 8016d62:	4621      	mov	r1, r4
 8016d64:	f104 000c 	add.w	r0, r4, #12
 8016d68:	f7f7 fdc2 	bl	800e8f0 <iNemo_quat2heading>
 8016d6c:	ed84 0a0d 	vstr	s0, [r4, #52]	; 0x34
 8016d70:	b00a      	add	sp, #40	; 0x28
 8016d72:	ecbd 8b02 	vpop	{d8}
 8016d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d7a:	f8d6 3948 	ldr.w	r3, [r6, #2376]	; 0x948
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	f47f af7c 	bne.w	8016c7c <MotionFX_update+0xcc>
 8016d84:	e783      	b.n	8016c8e <MotionFX_update+0xde>
 8016d86:	aa06      	add	r2, sp, #24
 8016d88:	e726      	b.n	8016bd8 <MotionFX_update+0x28>
 8016d8a:	f8d6 3948 	ldr.w	r3, [r6, #2376]	; 0x948
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d16c      	bne.n	8016e6c <MotionFX_update+0x2bc>
 8016d92:	f8d6 1950 	ldr.w	r1, [r6, #2384]	; 0x950
 8016d96:	f101 0e01 	add.w	lr, r1, #1
 8016d9a:	f8d6 8944 	ldr.w	r8, [r6, #2372]	; 0x944
 8016d9e:	f1b8 0f00 	cmp.w	r8, #0
 8016da2:	f000 80ad 	beq.w	8016f00 <MotionFX_update+0x350>
 8016da6:	4852      	ldr	r0, [pc, #328]	; (8016ef0 <MotionFX_update+0x340>)
 8016da8:	f8df c14c 	ldr.w	ip, [pc, #332]	; 8016ef8 <MotionFX_update+0x348>
 8016dac:	ed90 6a00 	vldr	s12, [r0]
 8016db0:	ed9c 4a02 	vldr	s8, [ip, #8]
 8016db4:	ecfc 5a01 	vldmia	ip!, {s11}
 8016db8:	f8c6 e950 	str.w	lr, [r6, #2384]	; 0x950
 8016dbc:	4605      	mov	r5, r0
 8016dbe:	4607      	mov	r7, r0
 8016dc0:	ee07 1a90 	vmov	s15, r1
 8016dc4:	3504      	adds	r5, #4
 8016dc6:	3708      	adds	r7, #8
 8016dc8:	ed97 5a00 	vldr	s10, [r7]
 8016dcc:	edd5 6a00 	vldr	s13, [r5]
 8016dd0:	eddc 3a00 	vldr	s7, [ip]
 8016dd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016dd8:	ee07 ea10 	vmov	s14, lr
 8016ddc:	ee27 6a86 	vmul.f32	s12, s15, s12
 8016de0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016de4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8016de8:	ee67 7a85 	vmul.f32	s15, s15, s10
 8016dec:	eec5 4a87 	vdiv.f32	s9, s11, s14
 8016df0:	f5be 7ffa 	cmp.w	lr, #500	; 0x1f4
 8016df4:	eec6 5a07 	vdiv.f32	s11, s12, s14
 8016df8:	ee83 5a87 	vdiv.f32	s10, s7, s14
 8016dfc:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8016e00:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8016e04:	eec4 7a07 	vdiv.f32	s15, s8, s14
 8016e08:	ee75 5aa4 	vadd.f32	s11, s11, s9
 8016e0c:	ee36 7a05 	vadd.f32	s14, s12, s10
 8016e10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016e14:	edc0 5a00 	vstr	s11, [r0]
 8016e18:	ed85 7a00 	vstr	s14, [r5]
 8016e1c:	edc7 7a00 	vstr	s15, [r7]
 8016e20:	f47f af1d 	bne.w	8016c5e <MotionFX_update+0xae>
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	d078      	beq.n	8016f1a <MotionFX_update+0x36a>
 8016e28:	edd5 6a00 	vldr	s13, [r5]
 8016e2c:	ed97 7a00 	vldr	s14, [r7]
 8016e30:	edd0 7a00 	vldr	s15, [r0]
 8016e34:	4b2f      	ldr	r3, [pc, #188]	; (8016ef4 <MotionFX_update+0x344>)
 8016e36:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8016e3a:	ee66 6a86 	vmul.f32	s13, s13, s12
 8016e3e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016e42:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016e46:	edc3 6a0b 	vstr	s13, [r3, #44]	; 0x2c
 8016e4a:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30
 8016e4e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
 8016e52:	f1b8 0f00 	cmp.w	r8, #0
 8016e56:	d160      	bne.n	8016f1a <MotionFX_update+0x36a>
 8016e58:	2300      	movs	r3, #0
 8016e5a:	2100      	movs	r1, #0
 8016e5c:	6003      	str	r3, [r0, #0]
 8016e5e:	602b      	str	r3, [r5, #0]
 8016e60:	603b      	str	r3, [r7, #0]
 8016e62:	f8c6 1950 	str.w	r1, [r6, #2384]	; 0x950
 8016e66:	f8c6 194c 	str.w	r1, [r6, #2380]	; 0x94c
 8016e6a:	e6f3      	b.n	8016c54 <MotionFX_update+0xa4>
 8016e6c:	f8df e08c 	ldr.w	lr, [pc, #140]	; 8016efc <MotionFX_update+0x34c>
 8016e70:	f8d6 1950 	ldr.w	r1, [r6, #2384]	; 0x950
 8016e74:	edde 3a02 	vldr	s7, [lr, #8]
 8016e78:	ecfe 5a01 	vldmia	lr!, {s11}
 8016e7c:	481c      	ldr	r0, [pc, #112]	; (8016ef0 <MotionFX_update+0x340>)
 8016e7e:	ed9e 5a00 	vldr	s10, [lr]
 8016e82:	edd0 4a02 	vldr	s9, [r0, #8]
 8016e86:	ed90 6a00 	vldr	s12, [r0]
 8016e8a:	edd0 6a01 	vldr	s13, [r0, #4]
 8016e8e:	ee07 1a90 	vmov	s15, r1
 8016e92:	f101 0e01 	add.w	lr, r1, #1
 8016e96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8016e9a:	ee07 ea90 	vmov	s15, lr
 8016e9e:	ee27 6a06 	vmul.f32	s12, s14, s12
 8016ea2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016ea6:	ee67 6a26 	vmul.f32	s13, s14, s13
 8016eaa:	ee27 7a24 	vmul.f32	s14, s14, s9
 8016eae:	ee85 4aa7 	vdiv.f32	s8, s11, s15
 8016eb2:	eec5 4a27 	vdiv.f32	s9, s10, s15
 8016eb6:	eec6 5a27 	vdiv.f32	s11, s12, s15
 8016eba:	ee83 5aa7 	vdiv.f32	s10, s7, s15
 8016ebe:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8016ec2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8016ec6:	ee75 5a84 	vadd.f32	s11, s11, s8
 8016eca:	ee36 7a24 	vadd.f32	s14, s12, s9
 8016ece:	ee76 7a85 	vadd.f32	s15, s13, s10
 8016ed2:	edc0 5a00 	vstr	s11, [r0]
 8016ed6:	ed80 7a01 	vstr	s14, [r0, #4]
 8016eda:	edc0 7a02 	vstr	s15, [r0, #8]
 8016ede:	e75c      	b.n	8016d9a <MotionFX_update+0x1ea>
 8016ee0:	20001670 	.word	0x20001670
 8016ee4:	20001d74 	.word	0x20001d74
 8016ee8:	200010f8 	.word	0x200010f8
 8016eec:	20001c68 	.word	0x20001c68
 8016ef0:	20001fc4 	.word	0x20001fc4
 8016ef4:	20001e6c 	.word	0x20001e6c
 8016ef8:	20000414 	.word	0x20000414
 8016efc:	20000cec 	.word	0x20000cec
 8016f00:	f5be 7ffa 	cmp.w	lr, #500	; 0x1f4
 8016f04:	f8c6 e950 	str.w	lr, [r6, #2384]	; 0x950
 8016f08:	f47f aeb7 	bne.w	8016c7a <MotionFX_update+0xca>
 8016f0c:	480e      	ldr	r0, [pc, #56]	; (8016f48 <MotionFX_update+0x398>)
 8016f0e:	1d05      	adds	r5, r0, #4
 8016f10:	f100 0708 	add.w	r7, r0, #8
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d187      	bne.n	8016e28 <MotionFX_update+0x278>
 8016f18:	e79e      	b.n	8016e58 <MotionFX_update+0x2a8>
 8016f1a:	edd5 6a00 	vldr	s13, [r5]
 8016f1e:	ed97 7a00 	vldr	s14, [r7]
 8016f22:	edd0 7a00 	vldr	s15, [r0]
 8016f26:	4b09      	ldr	r3, [pc, #36]	; (8016f4c <MotionFX_update+0x39c>)
 8016f28:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8016f2c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8016f30:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016f34:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016f38:	edc3 6a0b 	vstr	s13, [r3, #44]	; 0x2c
 8016f3c:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30
 8016f40:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
 8016f44:	e788      	b.n	8016e58 <MotionFX_update+0x2a8>
 8016f46:	bf00      	nop
 8016f48:	20001fc4 	.word	0x20001fc4
 8016f4c:	20001c2c 	.word	0x20001c2c

08016f50 <MotionFX_propagate>:
 8016f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f54:	ed2d 8b0e 	vpush	{d8-d14}
 8016f58:	4c58      	ldr	r4, [pc, #352]	; (80170bc <MotionFX_propagate+0x16c>)
 8016f5a:	f894 3941 	ldrb.w	r3, [r4, #2369]	; 0x941
 8016f5e:	b099      	sub	sp, #100	; 0x64
 8016f60:	b923      	cbnz	r3, 8016f6c <MotionFX_propagate+0x1c>
 8016f62:	b019      	add	sp, #100	; 0x64
 8016f64:	ecbd 8b0e 	vpop	{d8-d14}
 8016f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f6c:	ed91 3a03 	vldr	s6, [r1, #12]
 8016f70:	edd1 9a00 	vldr	s19, [r1]
 8016f74:	edd1 3a04 	vldr	s7, [r1, #16]
 8016f78:	ed91 9a01 	vldr	s18, [r1, #4]
 8016f7c:	ed91 5a05 	vldr	s10, [r1, #20]
 8016f80:	edd1 8a02 	vldr	s17, [r1, #8]
 8016f84:	ed91 4a06 	vldr	s8, [r1, #24]
 8016f88:	edd1 4a07 	vldr	s9, [r1, #28]
 8016f8c:	edd1 5a08 	vldr	s11, [r1, #32]
 8016f90:	f8d4 3948 	ldr.w	r3, [r4, #2376]	; 0x948
 8016f94:	ed8d 0a02 	vstr	s0, [sp, #8]
 8016f98:	f204 7804 	addw	r8, r4, #1796	; 0x704
 8016f9c:	f204 4bc4 	addw	fp, r4, #1220	; 0x4c4
 8016fa0:	4682      	mov	sl, r0
 8016fa2:	ed88 3a06 	vstr	s6, [r8, #24]
 8016fa6:	edc8 9a03 	vstr	s19, [r8, #12]
 8016faa:	ed88 4a09 	vstr	s8, [r8, #36]	; 0x24
 8016fae:	ed8b 3a06 	vstr	s6, [fp, #24]
 8016fb2:	edcb 9a03 	vstr	s19, [fp, #12]
 8016fb6:	ed8b 4a09 	vstr	s8, [fp, #36]	; 0x24
 8016fba:	edc8 3a07 	vstr	s7, [r8, #28]
 8016fbe:	ed88 9a04 	vstr	s18, [r8, #16]
 8016fc2:	ed8b 9a04 	vstr	s18, [fp, #16]
 8016fc6:	edc8 4a0a 	vstr	s9, [r8, #40]	; 0x28
 8016fca:	edcb 3a07 	vstr	s7, [fp, #28]
 8016fce:	edcb 4a0a 	vstr	s9, [fp, #40]	; 0x28
 8016fd2:	ed88 5a08 	vstr	s10, [r8, #32]
 8016fd6:	edc8 8a05 	vstr	s17, [r8, #20]
 8016fda:	edcb 8a05 	vstr	s17, [fp, #20]
 8016fde:	edc8 5a0b 	vstr	s11, [r8, #44]	; 0x2c
 8016fe2:	ed8b 5a08 	vstr	s10, [fp, #32]
 8016fe6:	edcb 5a0b 	vstr	s11, [fp, #44]	; 0x2c
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	f040 8324 	bne.w	8017638 <MotionFX_propagate+0x6e8>
 8016ff0:	f604 0538 	addw	r5, r4, #2104	; 0x838
 8016ff4:	f8d4 3944 	ldr.w	r3, [r4, #2372]	; 0x944
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	d163      	bne.n	80170c4 <MotionFX_propagate+0x174>
 8016ffc:	4f30      	ldr	r7, [pc, #192]	; (80170c0 <MotionFX_propagate+0x170>)
 8016ffe:	69bb      	ldr	r3, [r7, #24]
 8017000:	69f8      	ldr	r0, [r7, #28]
 8017002:	6a3a      	ldr	r2, [r7, #32]
 8017004:	69e9      	ldr	r1, [r5, #28]
 8017006:	69ac      	ldr	r4, [r5, #24]
 8017008:	f8ca 3048 	str.w	r3, [sl, #72]	; 0x48
 801700c:	6a2b      	ldr	r3, [r5, #32]
 801700e:	f8ca 004c 	str.w	r0, [sl, #76]	; 0x4c
 8017012:	f8ca 400c 	str.w	r4, [sl, #12]
 8017016:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8017018:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 801701a:	f8ca 2050 	str.w	r2, [sl, #80]	; 0x50
 801701e:	f8ca 1010 	str.w	r1, [sl, #16]
 8017022:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8017026:	68f9      	ldr	r1, [r7, #12]
 8017028:	f8ca 3014 	str.w	r3, [sl, #20]
 801702c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8017030:	f8ca 4054 	str.w	r4, [sl, #84]	; 0x54
 8017034:	f8ca 0018 	str.w	r0, [sl, #24]
 8017038:	68ec      	ldr	r4, [r5, #12]
 801703a:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
 801703e:	f8ca 103c 	str.w	r1, [sl, #60]	; 0x3c
 8017042:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 8017046:	f8ca 2058 	str.w	r2, [sl, #88]	; 0x58
 801704a:	f8ca 3064 	str.w	r3, [sl, #100]	; 0x64
 801704e:	693a      	ldr	r2, [r7, #16]
 8017050:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8017054:	f8ca 305c 	str.w	r3, [sl, #92]	; 0x5c
 8017058:	f8ca 4000 	str.w	r4, [sl]
 801705c:	f8ca 001c 	str.w	r0, [sl, #28]
 8017060:	f8ca 2040 	str.w	r2, [sl, #64]	; 0x40
 8017064:	f8ca 1028 	str.w	r1, [sl, #40]	; 0x28
 8017068:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801706c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8017070:	692a      	ldr	r2, [r5, #16]
 8017072:	f8d5 e0a4 	ldr.w	lr, [r5, #164]	; 0xa4
 8017076:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 801707a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 801707e:	697e      	ldr	r6, [r7, #20]
 8017080:	f8ca 1068 	str.w	r1, [sl, #104]	; 0x68
 8017084:	f8ca 2004 	str.w	r2, [sl, #4]
 8017088:	6969      	ldr	r1, [r5, #20]
 801708a:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
 801708e:	f8ca 3020 	str.w	r3, [sl, #32]
 8017092:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 8017096:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
 801709a:	f8ca e02c 	str.w	lr, [sl, #44]	; 0x2c
 801709e:	f8ca 6044 	str.w	r6, [sl, #68]	; 0x44
 80170a2:	f8ca 4060 	str.w	r4, [sl, #96]	; 0x60
 80170a6:	f8ca 006c 	str.w	r0, [sl, #108]	; 0x6c
 80170aa:	f8ca 1008 	str.w	r1, [sl, #8]
 80170ae:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
 80170b2:	b019      	add	sp, #100	; 0x64
 80170b4:	ecbd 8b0e 	vpop	{d8-d14}
 80170b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170bc:	20001670 	.word	0x20001670
 80170c0:	20001c68 	.word	0x20001c68
 80170c4:	f994 33fa 	ldrsb.w	r3, [r4, #1018]	; 0x3fa
 80170c8:	f994 23f4 	ldrsb.w	r2, [r4, #1012]	; 0x3f4
 80170cc:	eddb ea06 	vldr	s29, [fp, #24]
 80170d0:	ed9b ea07 	vldr	s28, [fp, #28]
 80170d4:	eddb 0a08 	vldr	s1, [fp, #32]
 80170d8:	eddb da09 	vldr	s27, [fp, #36]	; 0x24
 80170dc:	ed9b da0a 	vldr	s26, [fp, #40]	; 0x28
 80170e0:	eddb aa0b 	vldr	s21, [fp, #44]	; 0x2c
 80170e4:	f894 95f5 	ldrb.w	r9, [r4, #1525]	; 0x5f5
 80170e8:	ee07 3a90 	vmov	s15, r3
 80170ec:	f994 33fb 	ldrsb.w	r3, [r4, #1019]	; 0x3fb
 80170f0:	ee07 3a10 	vmov	s14, r3
 80170f4:	f994 33fc 	ldrsb.w	r3, [r4, #1020]	; 0x3fc
 80170f8:	ee0c 2a90 	vmov	s25, r2
 80170fc:	f994 23f5 	ldrsb.w	r2, [r4, #1013]	; 0x3f5
 8017100:	ee05 3a10 	vmov	s10, r3
 8017104:	2300      	movs	r3, #0
 8017106:	ee08 2a10 	vmov	s16, r2
 801710a:	930c      	str	r3, [sp, #48]	; 0x30
 801710c:	f994 23f7 	ldrsb.w	r2, [r4, #1015]	; 0x3f7
 8017110:	930d      	str	r3, [sp, #52]	; 0x34
 8017112:	930e      	str	r3, [sp, #56]	; 0x38
 8017114:	9310      	str	r3, [sp, #64]	; 0x40
 8017116:	9311      	str	r3, [sp, #68]	; 0x44
 8017118:	9312      	str	r3, [sp, #72]	; 0x48
 801711a:	f994 33f6 	ldrsb.w	r3, [r4, #1014]	; 0x3f6
 801711e:	ee0c 2a10 	vmov	s24, r2
 8017122:	ee01 3a10 	vmov	s2, r3
 8017126:	f994 23f8 	ldrsb.w	r2, [r4, #1016]	; 0x3f8
 801712a:	f994 33f9 	ldrsb.w	r3, [r4, #1017]	; 0x3f9
 801712e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017132:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017136:	ee02 2a10 	vmov	s4, r2
 801713a:	ee27 7a0e 	vmul.f32	s14, s14, s28
 801713e:	f994 240c 	ldrsb.w	r2, [r4, #1036]	; 0x40c
 8017142:	ee02 3a90 	vmov	s5, r3
 8017146:	ee67 7aae 	vmul.f32	s15, s15, s29
 801714a:	f994 340e 	ldrsb.w	r3, [r4, #1038]	; 0x40e
 801714e:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8017152:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017156:	ee0b 2a90 	vmov	s23, r2
 801715a:	ee03 3a10 	vmov	s6, r3
 801715e:	f994 240d 	ldrsb.w	r2, [r4, #1037]	; 0x40d
 8017162:	f994 3411 	ldrsb.w	r3, [r4, #1041]	; 0x411
 8017166:	ee25 5a20 	vmul.f32	s10, s10, s1
 801716a:	ee0b 2a10 	vmov	s22, r2
 801716e:	ee37 5a85 	vadd.f32	s10, s15, s10
 8017172:	f994 240f 	ldrsb.w	r2, [r4, #1039]	; 0x40f
 8017176:	ed8d 5a08 	vstr	s10, [sp, #32]
 801717a:	ee03 3a90 	vmov	s7, r3
 801717e:	f994 3412 	ldrsb.w	r3, [r4, #1042]	; 0x412
 8017182:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8017186:	ee00 2a10 	vmov	s0, r2
 801718a:	ee06 3a90 	vmov	s13, r3
 801718e:	f994 2410 	ldrsb.w	r2, [r4, #1040]	; 0x410
 8017192:	edcd 8a0f 	vstr	s17, [sp, #60]	; 0x3c
 8017196:	edcd 8a13 	vstr	s17, [sp, #76]	; 0x4c
 801719a:	f994 3413 	ldrsb.w	r3, [r4, #1043]	; 0x413
 801719e:	ed9b aa03 	vldr	s20, [fp, #12]
 80171a2:	eddb 9a04 	vldr	s19, [fp, #16]
 80171a6:	ed9b 9a05 	vldr	s18, [fp, #20]
 80171aa:	f994 7400 	ldrsb.w	r7, [r4, #1024]	; 0x400
 80171ae:	f994 8402 	ldrsb.w	r8, [r4, #1026]	; 0x402
 80171b2:	f994 6403 	ldrsb.w	r6, [r4, #1027]	; 0x403
 80171b6:	ee07 3a10 	vmov	s14, r3
 80171ba:	f994 3414 	ldrsb.w	r3, [r4, #1044]	; 0x414
 80171be:	ee04 3a10 	vmov	s8, r3
 80171c2:	f994 3406 	ldrsb.w	r3, [r4, #1030]	; 0x406
 80171c6:	ee05 2a90 	vmov	s11, r2
 80171ca:	ee07 3a90 	vmov	s15, r3
 80171ce:	eef8 caec 	vcvt.f32.s32	s25, s25
 80171d2:	f994 3407 	ldrsb.w	r3, [r4, #1031]	; 0x407
 80171d6:	f994 2401 	ldrsb.w	r2, [r4, #1025]	; 0x401
 80171da:	9203      	str	r2, [sp, #12]
 80171dc:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 80171e0:	eeb8 cacc 	vcvt.f32.s32	s24, s24
 80171e4:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 80171e8:	eef8 baeb 	vcvt.f32.s32	s23, s23
 80171ec:	eeb8 bacb 	vcvt.f32.s32	s22, s22
 80171f0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80171f4:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80171f8:	ee04 3a90 	vmov	s9, r3
 80171fc:	ee28 8a0e 	vmul.f32	s16, s16, s28
 8017200:	f994 3408 	ldrsb.w	r3, [r4, #1032]	; 0x408
 8017204:	f994 2404 	ldrsb.w	r2, [r4, #1028]	; 0x404
 8017208:	9204      	str	r2, [sp, #16]
 801720a:	ee6c caae 	vmul.f32	s25, s25, s29
 801720e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8017212:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017216:	ee2c ca2e 	vmul.f32	s24, s24, s29
 801721a:	ee22 2a0e 	vmul.f32	s4, s4, s28
 801721e:	ee6b baad 	vmul.f32	s23, s23, s27
 8017222:	ee2b ba0d 	vmul.f32	s22, s22, s26
 8017226:	ee20 0a2d 	vmul.f32	s0, s0, s27
 801722a:	ee65 5a8d 	vmul.f32	s11, s11, s26
 801722e:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8017232:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 8017236:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801723a:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801723e:	ee7c 1a88 	vadd.f32	s3, s25, s16
 8017242:	ee66 6aad 	vmul.f32	s13, s13, s27
 8017246:	ee08 3a10 	vmov	s16, r3
 801724a:	ee27 7a0d 	vmul.f32	s14, s14, s26
 801724e:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8017252:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017256:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 801725a:	ee3b 6a8b 	vadd.f32	s12, s23, s22
 801725e:	ee70 5a25 	vadd.f32	s11, s0, s11
 8017262:	ee21 1a20 	vmul.f32	s2, s2, s1
 8017266:	ee3c 2a02 	vadd.f32	s4, s24, s4
 801726a:	ee62 2aa0 	vmul.f32	s5, s5, s1
 801726e:	ee23 3a2a 	vmul.f32	s6, s6, s21
 8017272:	ee63 3aaa 	vmul.f32	s7, s7, s21
 8017276:	ee36 7a87 	vadd.f32	s14, s13, s14
 801727a:	ee64 4aa9 	vmul.f32	s9, s9, s19
 801727e:	4bea      	ldr	r3, [pc, #936]	; (8017628 <MotionFX_propagate+0x6d8>)
 8017280:	f994 2405 	ldrsb.w	r2, [r4, #1029]	; 0x405
 8017284:	7b1b      	ldrb	r3, [r3, #12]
 8017286:	9205      	str	r2, [sp, #20]
 8017288:	ee24 4a2a 	vmul.f32	s8, s8, s21
 801728c:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8017290:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8017294:	ee76 6a03 	vadd.f32	s13, s12, s6
 8017298:	ee71 1a81 	vadd.f32	s3, s3, s2
 801729c:	ee35 6aa3 	vadd.f32	s12, s11, s7
 80172a0:	ee72 2a22 	vadd.f32	s5, s4, s5
 80172a4:	ee77 7aa4 	vadd.f32	s15, s15, s9
 80172a8:	ee37 7a04 	vadd.f32	s14, s14, s8
 80172ac:	ee28 8a09 	vmul.f32	s16, s16, s18
 80172b0:	eef1 4a62 	vneg.f32	s9, s5
 80172b4:	eef1 5a61 	vneg.f32	s11, s3
 80172b8:	eef1 6a66 	vneg.f32	s13, s13
 80172bc:	eeb1 6a46 	vneg.f32	s12, s12
 80172c0:	ed8d 7a0b 	vstr	s14, [sp, #44]	; 0x2c
 80172c4:	edcd 4a06 	vstr	s9, [sp, #24]
 80172c8:	edcd 5a07 	vstr	s11, [sp, #28]
 80172cc:	edcd 6a0a 	vstr	s13, [sp, #40]	; 0x28
 80172d0:	ed8d 6a09 	vstr	s12, [sp, #36]	; 0x24
 80172d4:	ee37 8a88 	vadd.f32	s16, s15, s16
 80172d8:	2b00      	cmp	r3, #0
 80172da:	f040 8497 	bne.w	8017c0c <MotionFX_propagate+0xcbc>
 80172de:	464a      	mov	r2, r9
 80172e0:	2a00      	cmp	r2, #0
 80172e2:	f000 8479 	beq.w	8017bd8 <MotionFX_propagate+0xc88>
 80172e6:	ee07 2a90 	vmov	s15, r2
 80172ea:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80172ee:	eec6 4a25 	vdiv.f32	s9, s12, s11
 80172f2:	f894 35d8 	ldrb.w	r3, [r4, #1496]	; 0x5d8
 80172f6:	f894 05d4 	ldrb.w	r0, [r4, #1492]	; 0x5d4
 80172fa:	3301      	adds	r3, #1
 80172fc:	b2db      	uxtb	r3, r3
 80172fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8017302:	fb02 3311 	mls	r3, r2, r1, r3
 8017306:	f884 35d8 	strb.w	r3, [r4, #1496]	; 0x5d8
 801730a:	ee86 5aa5 	vdiv.f32	s10, s13, s11
 801730e:	ee87 6a25 	vdiv.f32	s12, s14, s11
 8017312:	eddb 6a0c 	vldr	s13, [fp, #48]	; 0x30
 8017316:	ed9b 7a0d 	vldr	s14, [fp, #52]	; 0x34
 801731a:	eddb 7a0e 	vldr	s15, [fp, #56]	; 0x38
 801731e:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8017322:	ee37 7a05 	vadd.f32	s14, s14, s10
 8017326:	ee77 7a86 	vadd.f32	s15, s15, s12
 801732a:	edcb 6a0c 	vstr	s13, [fp, #48]	; 0x30
 801732e:	ed8b 7a0d 	vstr	s14, [fp, #52]	; 0x34
 8017332:	edcb 7a0e 	vstr	s15, [fp, #56]	; 0x38
 8017336:	2800      	cmp	r0, #0
 8017338:	f040 845b 	bne.w	8017bf2 <MotionFX_propagate+0xca2>
 801733c:	ae10      	add	r6, sp, #64	; 0x40
 801733e:	4abb      	ldr	r2, [pc, #748]	; (801762c <MotionFX_propagate+0x6dc>)
 8017340:	ed9f 8abb 	vldr	s16, [pc, #748]	; 8017630 <MotionFX_propagate+0x6e0>
 8017344:	f102 074c 	add.w	r7, r2, #76	; 0x4c
 8017348:	4611      	mov	r1, r2
 801734a:	f1a2 0010 	sub.w	r0, r2, #16
 801734e:	f7f5 fe81 	bl	800d054 <m_qmult_eml>
 8017352:	f1a7 027c 	sub.w	r2, r7, #124	; 0x7c
 8017356:	4611      	mov	r1, r2
 8017358:	4630      	mov	r0, r6
 801735a:	f7f5 fe7b 	bl	800d054 <m_qmult_eml>
 801735e:	f107 0218 	add.w	r2, r7, #24
 8017362:	f1a7 019c 	sub.w	r1, r7, #156	; 0x9c
 8017366:	f1a7 004c 	sub.w	r0, r7, #76	; 0x4c
 801736a:	f7f5 fe73 	bl	800d054 <m_qmult_eml>
 801736e:	f107 0218 	add.w	r2, r7, #24
 8017372:	4611      	mov	r1, r2
 8017374:	f1a7 007c 	sub.w	r0, r7, #124	; 0x7c
 8017378:	f7f5 fe6c 	bl	800d054 <m_qmult_eml>
 801737c:	edd7 6a06 	vldr	s13, [r7, #24]
 8017380:	ed97 7a07 	vldr	s14, [r7, #28]
 8017384:	edd7 7a08 	vldr	s15, [r7, #32]
 8017388:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 801738c:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8017390:	ee27 7a07 	vmul.f32	s14, s14, s14
 8017394:	ee76 6a88 	vadd.f32	s13, s13, s16
 8017398:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801739c:	ee37 7a26 	vadd.f32	s14, s14, s13
 80173a0:	ee26 6a06 	vmul.f32	s12, s12, s12
 80173a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80173a8:	ee76 7a27 	vadd.f32	s15, s12, s15
 80173ac:	ee17 0a90 	vmov	r0, s15
 80173b0:	f7e9 f8d2 	bl	8000558 <__aeabi_f2d>
 80173b4:	ec41 0b10 	vmov	d0, r0, r1
 80173b8:	f001 fb72 	bl	8018aa0 <sqrt>
 80173bc:	ec51 0b10 	vmov	r0, r1, d0
 80173c0:	f7e9 fc16 	bl	8000bf0 <__aeabi_d2f>
 80173c4:	ed97 6a06 	vldr	s12, [r7, #24]
 80173c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80173cc:	ed97 7a08 	vldr	s14, [r7, #32]
 80173d0:	ed97 5a09 	vldr	s10, [r7, #36]	; 0x24
 80173d4:	f894 35e0 	ldrb.w	r3, [r4, #1504]	; 0x5e0
 80173d8:	ee07 0a90 	vmov	s15, r0
 80173dc:	eec6 5a27 	vdiv.f32	s11, s12, s15
 80173e0:	2b01      	cmp	r3, #1
 80173e2:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 80173e6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80173ea:	ee85 7a27 	vdiv.f32	s14, s10, s15
 80173ee:	edc7 5a06 	vstr	s11, [r7, #24]
 80173f2:	ed87 6a07 	vstr	s12, [r7, #28]
 80173f6:	edc7 6a08 	vstr	s13, [r7, #32]
 80173fa:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 80173fe:	f000 850b 	beq.w	8017e18 <MotionFX_propagate+0xec8>
 8017402:	f8df 8230 	ldr.w	r8, [pc, #560]	; 8017634 <MotionFX_propagate+0x6e4>
 8017406:	f894 15f6 	ldrb.w	r1, [r4, #1526]	; 0x5f6
 801740a:	9101      	str	r1, [sp, #4]
 801740c:	f1a8 030c 	sub.w	r3, r8, #12
 8017410:	f1a8 0294 	sub.w	r2, r8, #148	; 0x94
 8017414:	f8cd 8000 	str.w	r8, [sp]
 8017418:	f1a8 0088 	sub.w	r0, r8, #136	; 0x88
 801741c:	a906      	add	r1, sp, #24
 801741e:	f7f6 fa3b 	bl	800d898 <output_update>
 8017422:	f894 35f4 	ldrb.w	r3, [r4, #1524]	; 0x5f4
 8017426:	2200      	movs	r2, #0
 8017428:	f884 25d6 	strb.w	r2, [r4, #1494]	; 0x5d6
 801742c:	079a      	lsls	r2, r3, #30
 801742e:	f100 83bd 	bmi.w	8017bac <MotionFX_propagate+0xc5c>
 8017432:	f894 15d8 	ldrb.w	r1, [r4, #1496]	; 0x5d8
 8017436:	fbb1 f2f9 	udiv	r2, r1, r9
 801743a:	fb09 1212 	mls	r2, r9, r2, r1
 801743e:	f012 0fff 	tst.w	r2, #255	; 0xff
 8017442:	f040 83b3 	bne.w	8017bac <MotionFX_propagate+0xc5c>
 8017446:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
 801744a:	eddb 7a22 	vldr	s15, [fp, #136]	; 0x88
 801744e:	f8db 108c 	ldr.w	r1, [fp, #140]	; 0x8c
 8017452:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 8017456:	edcb 7a26 	vstr	s15, [fp, #152]	; 0x98
 801745a:	f043 0301 	orr.w	r3, r3, #1
 801745e:	eeb4 7a47 	vcmp.f32	s14, s14
 8017462:	f884 35f4 	strb.w	r3, [r4, #1524]	; 0x5f4
 8017466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801746a:	f8db 3094 	ldr.w	r3, [fp, #148]	; 0x94
 801746e:	f8cb 109c 	str.w	r1, [fp, #156]	; 0x9c
 8017472:	f8cb 20a0 	str.w	r2, [fp, #160]	; 0xa0
 8017476:	f8cb 30a4 	str.w	r3, [fp, #164]	; 0xa4
 801747a:	f47f adc0 	bne.w	8016ffe <MotionFX_propagate+0xae>
 801747e:	ed9b 7a2a 	vldr	s14, [fp, #168]	; 0xa8
 8017482:	eeb4 7a47 	vcmp.f32	s14, s14
 8017486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801748a:	f47f adb8 	bne.w	8016ffe <MotionFX_propagate+0xae>
 801748e:	ed9b 7a32 	vldr	s14, [fp, #200]	; 0xc8
 8017492:	eeb4 7a47 	vcmp.f32	s14, s14
 8017496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801749a:	f47f adb0 	bne.w	8016ffe <MotionFX_propagate+0xae>
 801749e:	eef4 7a67 	vcmp.f32	s15, s15
 80174a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174a6:	f47f adaa 	bne.w	8016ffe <MotionFX_propagate+0xae>
 80174aa:	4630      	mov	r0, r6
 80174ac:	aa14      	add	r2, sp, #80	; 0x50
 80174ae:	f5a8 7196 	sub.w	r1, r8, #300	; 0x12c
 80174b2:	f7f5 fdcf 	bl	800d054 <m_qmult_eml>
 80174b6:	aa0c      	add	r2, sp, #48	; 0x30
 80174b8:	f5a8 71a6 	sub.w	r1, r8, #332	; 0x14c
 80174bc:	f5a8 7086 	sub.w	r0, r8, #268	; 0x10c
 80174c0:	f7f5 fdc8 	bl	800d054 <m_qmult_eml>
 80174c4:	aa0c      	add	r2, sp, #48	; 0x30
 80174c6:	4611      	mov	r1, r2
 80174c8:	a814      	add	r0, sp, #80	; 0x50
 80174ca:	f7f5 fdc3 	bl	800d054 <m_qmult_eml>
 80174ce:	eddd 6a0c 	vldr	s13, [sp, #48]	; 0x30
 80174d2:	eddf 5a57 	vldr	s11, [pc, #348]	; 8017630 <MotionFX_propagate+0x6e0>
 80174d6:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 80174da:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 80174de:	ed9d 6a0f 	vldr	s12, [sp, #60]	; 0x3c
 80174e2:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80174e6:	ee27 7a07 	vmul.f32	s14, s14, s14
 80174ea:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80174ee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80174f2:	ee37 7a26 	vadd.f32	s14, s14, s13
 80174f6:	ee26 6a06 	vmul.f32	s12, s12, s12
 80174fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80174fe:	ee76 7a27 	vadd.f32	s15, s12, s15
 8017502:	ee17 0a90 	vmov	r0, s15
 8017506:	f7e9 f827 	bl	8000558 <__aeabi_f2d>
 801750a:	ec41 0b10 	vmov	d0, r0, r1
 801750e:	f001 fac7 	bl	8018aa0 <sqrt>
 8017512:	ec51 0b10 	vmov	r0, r1, d0
 8017516:	f7e9 fb6b 	bl	8000bf0 <__aeabi_d2f>
 801751a:	ed9d 5a0c 	vldr	s10, [sp, #48]	; 0x30
 801751e:	eddd 5a0d 	vldr	s11, [sp, #52]	; 0x34
 8017522:	ed9d 6a0e 	vldr	s12, [sp, #56]	; 0x38
 8017526:	ed9d 7a0f 	vldr	s14, [sp, #60]	; 0x3c
 801752a:	ee07 0a90 	vmov	s15, r0
 801752e:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8017532:	eec5 3aa7 	vdiv.f32	s7, s11, s15
 8017536:	ee86 4a27 	vdiv.f32	s8, s12, s15
 801753a:	eec7 4a27 	vdiv.f32	s9, s14, s15
 801753e:	eef4 6a66 	vcmp.f32	s13, s13
 8017542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017546:	edcd 6a0c 	vstr	s13, [sp, #48]	; 0x30
 801754a:	edcd 3a0d 	vstr	s7, [sp, #52]	; 0x34
 801754e:	ed8d 4a0e 	vstr	s8, [sp, #56]	; 0x38
 8017552:	edcd 4a0f 	vstr	s9, [sp, #60]	; 0x3c
 8017556:	f47f ad52 	bne.w	8016ffe <MotionFX_propagate+0xae>
 801755a:	f894 35f5 	ldrb.w	r3, [r4, #1525]	; 0x5f5
 801755e:	eddb 5a32 	vldr	s11, [fp, #200]	; 0xc8
 8017562:	ed9b 6a33 	vldr	s12, [fp, #204]	; 0xcc
 8017566:	eddb 7a34 	vldr	s15, [fp, #208]	; 0xd0
 801756a:	edcb 6a1e 	vstr	s13, [fp, #120]	; 0x78
 801756e:	ee07 3a10 	vmov	s14, r3
 8017572:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8017576:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801757a:	ee85 5a87 	vdiv.f32	s10, s11, s14
 801757e:	f8db 30a8 	ldr.w	r3, [fp, #168]	; 0xa8
 8017582:	f8db 10ac 	ldr.w	r1, [fp, #172]	; 0xac
 8017586:	f8db 20b0 	ldr.w	r2, [fp, #176]	; 0xb0
 801758a:	f8cb 30b8 	str.w	r3, [fp, #184]	; 0xb8
 801758e:	f8db 30b4 	ldr.w	r3, [fp, #180]	; 0xb4
 8017592:	f8cb 10bc 	str.w	r1, [fp, #188]	; 0xbc
 8017596:	f8cb 20c0 	str.w	r2, [fp, #192]	; 0xc0
 801759a:	f8cb 30c4 	str.w	r3, [fp, #196]	; 0xc4
 801759e:	eec6 5a07 	vdiv.f32	s11, s12, s14
 80175a2:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80175a6:	ee25 3aa5 	vmul.f32	s6, s11, s11
 80175aa:	ee65 7a05 	vmul.f32	s15, s10, s10
 80175ae:	ee26 7a06 	vmul.f32	s14, s12, s12
 80175b2:	ee77 7a83 	vadd.f32	s15, s15, s6
 80175b6:	edcb 3a1f 	vstr	s7, [fp, #124]	; 0x7c
 80175ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80175be:	ed8b 4a20 	vstr	s8, [fp, #128]	; 0x80
 80175c2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80175c6:	edcb 4a21 	vstr	s9, [fp, #132]	; 0x84
 80175ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80175ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175d2:	ed8b 5a36 	vstr	s10, [fp, #216]	; 0xd8
 80175d6:	edcb 5a37 	vstr	s11, [fp, #220]	; 0xdc
 80175da:	ed8b 6a38 	vstr	s12, [fp, #224]	; 0xe0
 80175de:	f340 8430 	ble.w	8017e42 <MotionFX_propagate+0xef2>
 80175e2:	ee17 0a90 	vmov	r0, s15
 80175e6:	f7e8 ffb7 	bl	8000558 <__aeabi_f2d>
 80175ea:	ec41 0b10 	vmov	d0, r0, r1
 80175ee:	f001 fa57 	bl	8018aa0 <sqrt>
 80175f2:	ec51 0b10 	vmov	r0, r1, d0
 80175f6:	f7e9 fafb 	bl	8000bf0 <__aeabi_d2f>
 80175fa:	2300      	movs	r3, #0
 80175fc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8017600:	f8cb 00e4 	str.w	r0, [fp, #228]	; 0xe4
 8017604:	f8cb 30a8 	str.w	r3, [fp, #168]	; 0xa8
 8017608:	f8cb 30ac 	str.w	r3, [fp, #172]	; 0xac
 801760c:	f8cb 30b0 	str.w	r3, [fp, #176]	; 0xb0
 8017610:	f8cb 30e8 	str.w	r3, [fp, #232]	; 0xe8
 8017614:	f8cb 30ec 	str.w	r3, [fp, #236]	; 0xec
 8017618:	f8cb 30f0 	str.w	r3, [fp, #240]	; 0xf0
 801761c:	f8cb 20b4 	str.w	r2, [fp, #180]	; 0xb4
 8017620:	f8cb 20f4 	str.w	r2, [fp, #244]	; 0xf4
 8017624:	e2c7      	b.n	8017bb6 <MotionFX_propagate+0xc66>
 8017626:	bf00      	nop
 8017628:	20000000 	.word	0x20000000
 801762c:	20001c1c 	.word	0x20001c1c
 8017630:	00000000 	.word	0x00000000
 8017634:	20001d08 	.word	0x20001d08
 8017638:	f994 33d6 	ldrsb.w	r3, [r4, #982]	; 0x3d6
 801763c:	f994 23e8 	ldrsb.w	r2, [r4, #1000]	; 0x3e8
 8017640:	f994 13eb 	ldrsb.w	r1, [r4, #1003]	; 0x3eb
 8017644:	f994 53d4 	ldrsb.w	r5, [r4, #980]	; 0x3d4
 8017648:	f994 03d2 	ldrsb.w	r0, [r4, #978]	; 0x3d2
 801764c:	f994 73ea 	ldrsb.w	r7, [r4, #1002]	; 0x3ea
 8017650:	f894 9835 	ldrb.w	r9, [r4, #2101]	; 0x835
 8017654:	ee06 3a10 	vmov	s12, r3
 8017658:	f994 33d7 	ldrsb.w	r3, [r4, #983]	; 0x3d7
 801765c:	ee00 3a10 	vmov	s0, r3
 8017660:	f994 33ee 	ldrsb.w	r3, [r4, #1006]	; 0x3ee
 8017664:	ee06 3a90 	vmov	s13, r3
 8017668:	f994 33ef 	ldrsb.w	r3, [r4, #1007]	; 0x3ef
 801766c:	ee01 3a90 	vmov	s3, r3
 8017670:	f994 33d8 	ldrsb.w	r3, [r4, #984]	; 0x3d8
 8017674:	ee02 3a10 	vmov	s4, r3
 8017678:	f994 33f0 	ldrsb.w	r3, [r4, #1008]	; 0x3f0
 801767c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8017680:	ee02 3a90 	vmov	s5, r3
 8017684:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8017688:	f994 33d0 	ldrsb.w	r3, [r4, #976]	; 0x3d0
 801768c:	ee61 1aa4 	vmul.f32	s3, s3, s9
 8017690:	ee0a 3a90 	vmov	s21, r3
 8017694:	ee66 6a84 	vmul.f32	s13, s13, s8
 8017698:	f994 33d1 	ldrsb.w	r3, [r4, #977]	; 0x3d1
 801769c:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 80176a0:	ee76 6aa1 	vadd.f32	s13, s13, s3
 80176a4:	ee0a 3a10 	vmov	s20, r3
 80176a8:	ee62 2aa5 	vmul.f32	s5, s5, s11
 80176ac:	f994 33d3 	ldrsb.w	r3, [r4, #979]	; 0x3d3
 80176b0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80176b4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80176b8:	ee07 1a10 	vmov	s14, r1
 80176bc:	ee20 0a23 	vmul.f32	s0, s0, s7
 80176c0:	f994 13ec 	ldrsb.w	r1, [r4, #1004]	; 0x3ec
 80176c4:	ee07 2a90 	vmov	s15, r2
 80176c8:	ee26 6a03 	vmul.f32	s12, s12, s6
 80176cc:	f994 23e9 	ldrsb.w	r2, [r4, #1001]	; 0x3e9
 80176d0:	ee76 2aa2 	vadd.f32	s5, s13, s5
 80176d4:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 80176d8:	ee06 3a90 	vmov	s13, r3
 80176dc:	ee22 2a05 	vmul.f32	s4, s4, s10
 80176e0:	ee00 2a90 	vmov	s1, r2
 80176e4:	ee01 1a10 	vmov	s2, r1
 80176e8:	ee36 6a00 	vadd.f32	s12, s12, s0
 80176ec:	eef8 bae6 	vcvt.f32.s32	s23, s13
 80176f0:	ee06 5a90 	vmov	s13, r5
 80176f4:	ee01 0a90 	vmov	s3, r0
 80176f8:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 80176fc:	f994 03d5 	ldrsb.w	r0, [r4, #981]	; 0x3d5
 8017700:	f994 33dd 	ldrsb.w	r3, [r4, #989]	; 0x3dd
 8017704:	edcd 2a0b 	vstr	s5, [sp, #44]	; 0x2c
 8017708:	ee36 6a02 	vadd.f32	s12, s12, s4
 801770c:	eeb8 aaca 	vcvt.f32.s32	s20, s20
 8017710:	eeb8 bae0 	vcvt.f32.s32	s22, s1
 8017714:	eef8 aaea 	vcvt.f32.s32	s21, s21
 8017718:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801771c:	2100      	movs	r1, #0
 801771e:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
 8017722:	ee6a 0a23 	vmul.f32	s1, s20, s7
 8017726:	ee02 0a10 	vmov	s4, r0
 801772a:	ee60 3a23 	vmul.f32	s7, s0, s7
 801772e:	f994 03ed 	ldrsb.w	r0, [r4, #1005]	; 0x3ed
 8017732:	910c      	str	r1, [sp, #48]	; 0x30
 8017734:	910d      	str	r1, [sp, #52]	; 0x34
 8017736:	910e      	str	r1, [sp, #56]	; 0x38
 8017738:	9110      	str	r1, [sp, #64]	; 0x40
 801773a:	9111      	str	r1, [sp, #68]	; 0x44
 801773c:	9112      	str	r1, [sp, #72]	; 0x48
 801773e:	960f      	str	r6, [sp, #60]	; 0x3c
 8017740:	9613      	str	r6, [sp, #76]	; 0x4c
 8017742:	ee6a aa83 	vmul.f32	s21, s21, s6
 8017746:	ee2b ba24 	vmul.f32	s22, s22, s9
 801774a:	ee21 1a24 	vmul.f32	s2, s2, s9
 801774e:	ed8d 6a08 	vstr	s12, [sp, #32]
 8017752:	ee04 7a90 	vmov	s9, r7
 8017756:	f994 63dc 	ldrsb.w	r6, [r4, #988]	; 0x3dc
 801775a:	9303      	str	r3, [sp, #12]
 801775c:	ee2b 3a83 	vmul.f32	s6, s23, s6
 8017760:	f994 33de 	ldrsb.w	r3, [r4, #990]	; 0x3de
 8017764:	f994 13e2 	ldrsb.w	r1, [r4, #994]	; 0x3e2
 8017768:	f994 e3e4 	ldrsb.w	lr, [r4, #996]	; 0x3e4
 801776c:	4af2      	ldr	r2, [pc, #968]	; (8017b38 <MotionFX_propagate+0xbe8>)
 801776e:	f994 53df 	ldrsb.w	r5, [r4, #991]	; 0x3df
 8017772:	f892 28e0 	ldrb.w	r2, [r2, #2272]	; 0x8e0
 8017776:	f994 73e1 	ldrsb.w	r7, [r4, #993]	; 0x3e1
 801777a:	ee06 1a90 	vmov	s13, r1
 801777e:	ee33 3a23 	vadd.f32	s6, s6, s7
 8017782:	f994 13e3 	ldrsb.w	r1, [r4, #995]	; 0x3e3
 8017786:	eef8 3ae4 	vcvt.f32.s32	s7, s9
 801778a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801778e:	ee04 0a90 	vmov	s9, r0
 8017792:	eeb8 aac7 	vcvt.f32.s32	s20, s14
 8017796:	ee67 7a84 	vmul.f32	s15, s15, s8
 801779a:	ee2a 7a04 	vmul.f32	s14, s20, s8
 801779e:	eeb8 4ae4 	vcvt.f32.s32	s8, s9
 80177a2:	ee04 1a90 	vmov	s9, r1
 80177a6:	eeb8 0ae1 	vcvt.f32.s32	s0, s3
 80177aa:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 80177ae:	ee08 ea10 	vmov	s16, lr
 80177b2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80177b6:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 80177ba:	ee60 1a05 	vmul.f32	s3, s0, s10
 80177be:	ee63 3aa5 	vmul.f32	s7, s7, s11
 80177c2:	ee7a 0aa0 	vadd.f32	s1, s21, s1
 80177c6:	ee64 5a25 	vmul.f32	s11, s8, s11
 80177ca:	ee22 5a05 	vmul.f32	s10, s4, s10
 80177ce:	ee77 7a8b 	vadd.f32	s15, s15, s22
 80177d2:	ee37 7a01 	vadd.f32	s14, s14, s2
 80177d6:	ee64 4a89 	vmul.f32	s9, s9, s18
 80177da:	ee66 6aa9 	vmul.f32	s13, s13, s19
 80177de:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 80177e2:	ee37 7a25 	vadd.f32	s14, s14, s11
 80177e6:	ee70 1aa1 	vadd.f32	s3, s1, s3
 80177ea:	ee33 5a05 	vadd.f32	s10, s6, s10
 80177ee:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80177f2:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80177f6:	ee28 8a28 	vmul.f32	s16, s16, s17
 80177fa:	f994 13e0 	ldrsb.w	r1, [r4, #992]	; 0x3e0
 80177fe:	9104      	str	r1, [sp, #16]
 8017800:	eef1 4a61 	vneg.f32	s9, s3
 8017804:	eef1 5a45 	vneg.f32	s11, s10
 8017808:	eef1 7a67 	vneg.f32	s15, s15
 801780c:	eeb1 7a47 	vneg.f32	s14, s14
 8017810:	edcd 4a07 	vstr	s9, [sp, #28]
 8017814:	edcd 5a06 	vstr	s11, [sp, #24]
 8017818:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
 801781c:	ed8d 7a09 	vstr	s14, [sp, #36]	; 0x24
 8017820:	ee36 8a88 	vadd.f32	s16, s13, s16
 8017824:	2a00      	cmp	r2, #0
 8017826:	f040 827a 	bne.w	8017d1e <MotionFX_propagate+0xdce>
 801782a:	464a      	mov	r2, r9
 801782c:	2a00      	cmp	r2, #0
 801782e:	f000 81da 	beq.w	8017be6 <MotionFX_propagate+0xc96>
 8017832:	ee06 2a90 	vmov	s13, r2
 8017836:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 801783a:	eec7 4a06 	vdiv.f32	s9, s14, s12
 801783e:	f894 3818 	ldrb.w	r3, [r4, #2072]	; 0x818
 8017842:	f894 0814 	ldrb.w	r0, [r4, #2068]	; 0x814
 8017846:	3301      	adds	r3, #1
 8017848:	b2db      	uxtb	r3, r3
 801784a:	fbb3 f1f2 	udiv	r1, r3, r2
 801784e:	fb02 3311 	mls	r3, r2, r1, r3
 8017852:	f884 3818 	strb.w	r3, [r4, #2072]	; 0x818
 8017856:	ee87 5a86 	vdiv.f32	s10, s15, s12
 801785a:	eec2 5a86 	vdiv.f32	s11, s5, s12
 801785e:	edd8 6a0c 	vldr	s13, [r8, #48]	; 0x30
 8017862:	ed98 7a0d 	vldr	s14, [r8, #52]	; 0x34
 8017866:	edd8 7a0e 	vldr	s15, [r8, #56]	; 0x38
 801786a:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801786e:	ee37 7a05 	vadd.f32	s14, s14, s10
 8017872:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8017876:	edc8 6a0c 	vstr	s13, [r8, #48]	; 0x30
 801787a:	ed88 7a0d 	vstr	s14, [r8, #52]	; 0x34
 801787e:	edc8 7a0e 	vstr	s15, [r8, #56]	; 0x38
 8017882:	2800      	cmp	r0, #0
 8017884:	f040 823f 	bne.w	8017d06 <MotionFX_propagate+0xdb6>
 8017888:	ae10      	add	r6, sp, #64	; 0x40
 801788a:	4aac      	ldr	r2, [pc, #688]	; (8017b3c <MotionFX_propagate+0xbec>)
 801788c:	ed9f 8aac 	vldr	s16, [pc, #688]	; 8017b40 <MotionFX_propagate+0xbf0>
 8017890:	f102 054c 	add.w	r5, r2, #76	; 0x4c
 8017894:	4611      	mov	r1, r2
 8017896:	f1a2 0010 	sub.w	r0, r2, #16
 801789a:	f7f5 fbdb 	bl	800d054 <m_qmult_eml>
 801789e:	f1a5 027c 	sub.w	r2, r5, #124	; 0x7c
 80178a2:	4611      	mov	r1, r2
 80178a4:	4630      	mov	r0, r6
 80178a6:	f7f5 fbd5 	bl	800d054 <m_qmult_eml>
 80178aa:	f105 0218 	add.w	r2, r5, #24
 80178ae:	f1a5 019c 	sub.w	r1, r5, #156	; 0x9c
 80178b2:	f1a5 004c 	sub.w	r0, r5, #76	; 0x4c
 80178b6:	f7f5 fbcd 	bl	800d054 <m_qmult_eml>
 80178ba:	f105 0218 	add.w	r2, r5, #24
 80178be:	4611      	mov	r1, r2
 80178c0:	f1a5 007c 	sub.w	r0, r5, #124	; 0x7c
 80178c4:	f7f5 fbc6 	bl	800d054 <m_qmult_eml>
 80178c8:	edd5 6a06 	vldr	s13, [r5, #24]
 80178cc:	ed95 7a07 	vldr	s14, [r5, #28]
 80178d0:	edd5 7a08 	vldr	s15, [r5, #32]
 80178d4:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80178d8:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80178dc:	ee27 7a07 	vmul.f32	s14, s14, s14
 80178e0:	ee76 6a88 	vadd.f32	s13, s13, s16
 80178e4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80178e8:	ee37 7a26 	vadd.f32	s14, s14, s13
 80178ec:	ee26 6a06 	vmul.f32	s12, s12, s12
 80178f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80178f4:	ee76 7a27 	vadd.f32	s15, s12, s15
 80178f8:	ee17 0a90 	vmov	r0, s15
 80178fc:	f7e8 fe2c 	bl	8000558 <__aeabi_f2d>
 8017900:	ec41 0b10 	vmov	d0, r0, r1
 8017904:	f001 f8cc 	bl	8018aa0 <sqrt>
 8017908:	ec51 0b10 	vmov	r0, r1, d0
 801790c:	f7e9 f970 	bl	8000bf0 <__aeabi_d2f>
 8017910:	ed95 6a06 	vldr	s12, [r5, #24]
 8017914:	edd5 6a07 	vldr	s13, [r5, #28]
 8017918:	ed95 7a08 	vldr	s14, [r5, #32]
 801791c:	ed95 5a09 	vldr	s10, [r5, #36]	; 0x24
 8017920:	f894 3820 	ldrb.w	r3, [r4, #2080]	; 0x820
 8017924:	ee07 0a90 	vmov	s15, r0
 8017928:	eec6 5a27 	vdiv.f32	s11, s12, s15
 801792c:	2b01      	cmp	r3, #1
 801792e:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8017932:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8017936:	ee85 7a27 	vdiv.f32	s14, s10, s15
 801793a:	edc5 5a06 	vstr	s11, [r5, #24]
 801793e:	ed85 6a07 	vstr	s12, [r5, #28]
 8017942:	edc5 6a08 	vstr	s13, [r5, #32]
 8017946:	ed85 7a09 	vstr	s14, [r5, #36]	; 0x24
 801794a:	f000 8270 	beq.w	8017e2e <MotionFX_propagate+0xede>
 801794e:	4f7d      	ldr	r7, [pc, #500]	; (8017b44 <MotionFX_propagate+0xbf4>)
 8017950:	f894 1836 	ldrb.w	r1, [r4, #2102]	; 0x836
 8017954:	9101      	str	r1, [sp, #4]
 8017956:	f1a7 030c 	sub.w	r3, r7, #12
 801795a:	f1a7 0294 	sub.w	r2, r7, #148	; 0x94
 801795e:	a906      	add	r1, sp, #24
 8017960:	9700      	str	r7, [sp, #0]
 8017962:	f1a7 0088 	sub.w	r0, r7, #136	; 0x88
 8017966:	f7f5 ff97 	bl	800d898 <output_update>
 801796a:	f894 3834 	ldrb.w	r3, [r4, #2100]	; 0x834
 801796e:	2200      	movs	r2, #0
 8017970:	0799      	lsls	r1, r3, #30
 8017972:	f884 2816 	strb.w	r2, [r4, #2070]	; 0x816
 8017976:	f100 8103 	bmi.w	8017b80 <MotionFX_propagate+0xc30>
 801797a:	f894 1818 	ldrb.w	r1, [r4, #2072]	; 0x818
 801797e:	fbb1 f2f9 	udiv	r2, r1, r9
 8017982:	fb09 1912 	mls	r9, r9, r2, r1
 8017986:	f019 0fff 	tst.w	r9, #255	; 0xff
 801798a:	f040 80f9 	bne.w	8017b80 <MotionFX_propagate+0xc30>
 801798e:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
 8017992:	edd8 7a22 	vldr	s15, [r8, #136]	; 0x88
 8017996:	f8d8 108c 	ldr.w	r1, [r8, #140]	; 0x8c
 801799a:	f8d8 2090 	ldr.w	r2, [r8, #144]	; 0x90
 801799e:	edc8 7a26 	vstr	s15, [r8, #152]	; 0x98
 80179a2:	f043 0301 	orr.w	r3, r3, #1
 80179a6:	eeb4 7a47 	vcmp.f32	s14, s14
 80179aa:	f884 3834 	strb.w	r3, [r4, #2100]	; 0x834
 80179ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179b2:	f8d8 3094 	ldr.w	r3, [r8, #148]	; 0x94
 80179b6:	f8c8 109c 	str.w	r1, [r8, #156]	; 0x9c
 80179ba:	f8c8 20a0 	str.w	r2, [r8, #160]	; 0xa0
 80179be:	f8c8 30a4 	str.w	r3, [r8, #164]	; 0xa4
 80179c2:	f47f ab17 	bne.w	8016ff4 <MotionFX_propagate+0xa4>
 80179c6:	ed98 7a2a 	vldr	s14, [r8, #168]	; 0xa8
 80179ca:	eeb4 7a47 	vcmp.f32	s14, s14
 80179ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179d2:	f47f ab0f 	bne.w	8016ff4 <MotionFX_propagate+0xa4>
 80179d6:	ed98 7a32 	vldr	s14, [r8, #200]	; 0xc8
 80179da:	eeb4 7a47 	vcmp.f32	s14, s14
 80179de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179e2:	f47f ab07 	bne.w	8016ff4 <MotionFX_propagate+0xa4>
 80179e6:	eef4 7a67 	vcmp.f32	s15, s15
 80179ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179ee:	f47f ab01 	bne.w	8016ff4 <MotionFX_propagate+0xa4>
 80179f2:	4630      	mov	r0, r6
 80179f4:	aa14      	add	r2, sp, #80	; 0x50
 80179f6:	f5a7 7196 	sub.w	r1, r7, #300	; 0x12c
 80179fa:	f7f5 fb2b 	bl	800d054 <m_qmult_eml>
 80179fe:	aa0c      	add	r2, sp, #48	; 0x30
 8017a00:	f5a7 71a6 	sub.w	r1, r7, #332	; 0x14c
 8017a04:	f5a7 7086 	sub.w	r0, r7, #268	; 0x10c
 8017a08:	f7f5 fb24 	bl	800d054 <m_qmult_eml>
 8017a0c:	aa0c      	add	r2, sp, #48	; 0x30
 8017a0e:	4611      	mov	r1, r2
 8017a10:	a814      	add	r0, sp, #80	; 0x50
 8017a12:	f7f5 fb1f 	bl	800d054 <m_qmult_eml>
 8017a16:	eddd 6a0c 	vldr	s13, [sp, #48]	; 0x30
 8017a1a:	eddf 5a49 	vldr	s11, [pc, #292]	; 8017b40 <MotionFX_propagate+0xbf0>
 8017a1e:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 8017a22:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8017a26:	ed9d 6a0f 	vldr	s12, [sp, #60]	; 0x3c
 8017a2a:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8017a2e:	ee27 7a07 	vmul.f32	s14, s14, s14
 8017a32:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8017a36:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8017a3a:	ee37 7a26 	vadd.f32	s14, s14, s13
 8017a3e:	ee26 6a06 	vmul.f32	s12, s12, s12
 8017a42:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017a46:	ee76 7a27 	vadd.f32	s15, s12, s15
 8017a4a:	ee17 0a90 	vmov	r0, s15
 8017a4e:	f7e8 fd83 	bl	8000558 <__aeabi_f2d>
 8017a52:	ec41 0b10 	vmov	d0, r0, r1
 8017a56:	f001 f823 	bl	8018aa0 <sqrt>
 8017a5a:	ec51 0b10 	vmov	r0, r1, d0
 8017a5e:	f7e9 f8c7 	bl	8000bf0 <__aeabi_d2f>
 8017a62:	ed9d 5a0c 	vldr	s10, [sp, #48]	; 0x30
 8017a66:	eddd 5a0d 	vldr	s11, [sp, #52]	; 0x34
 8017a6a:	ed9d 6a0e 	vldr	s12, [sp, #56]	; 0x38
 8017a6e:	eddd 6a0f 	vldr	s13, [sp, #60]	; 0x3c
 8017a72:	ee07 0a90 	vmov	s15, r0
 8017a76:	ee85 7a27 	vdiv.f32	s14, s10, s15
 8017a7a:	ee85 4aa7 	vdiv.f32	s8, s11, s15
 8017a7e:	eec6 4a27 	vdiv.f32	s9, s12, s15
 8017a82:	ee86 5aa7 	vdiv.f32	s10, s13, s15
 8017a86:	eeb4 7a47 	vcmp.f32	s14, s14
 8017a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a8e:	ed8d 7a0c 	vstr	s14, [sp, #48]	; 0x30
 8017a92:	ed8d 4a0d 	vstr	s8, [sp, #52]	; 0x34
 8017a96:	edcd 4a0e 	vstr	s9, [sp, #56]	; 0x38
 8017a9a:	ed8d 5a0f 	vstr	s10, [sp, #60]	; 0x3c
 8017a9e:	f47f aaa9 	bne.w	8016ff4 <MotionFX_propagate+0xa4>
 8017aa2:	f894 3835 	ldrb.w	r3, [r4, #2101]	; 0x835
 8017aa6:	ed98 6a32 	vldr	s12, [r8, #200]	; 0xc8
 8017aaa:	edd8 6a33 	vldr	s13, [r8, #204]	; 0xcc
 8017aae:	edd8 3a34 	vldr	s7, [r8, #208]	; 0xd0
 8017ab2:	ed88 7a1e 	vstr	s14, [r8, #120]	; 0x78
 8017ab6:	ee07 3a90 	vmov	s15, r3
 8017aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017abe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017ac2:	eec6 5a27 	vdiv.f32	s11, s12, s15
 8017ac6:	f8d8 30a8 	ldr.w	r3, [r8, #168]	; 0xa8
 8017aca:	f8d8 10ac 	ldr.w	r1, [r8, #172]	; 0xac
 8017ace:	f8d8 20b0 	ldr.w	r2, [r8, #176]	; 0xb0
 8017ad2:	f8c8 30b8 	str.w	r3, [r8, #184]	; 0xb8
 8017ad6:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
 8017ada:	f8c8 10bc 	str.w	r1, [r8, #188]	; 0xbc
 8017ade:	f8c8 20c0 	str.w	r2, [r8, #192]	; 0xc0
 8017ae2:	f8c8 30c4 	str.w	r3, [r8, #196]	; 0xc4
 8017ae6:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8017aea:	eec3 6aa7 	vdiv.f32	s13, s7, s15
 8017aee:	ee26 3a06 	vmul.f32	s6, s12, s12
 8017af2:	ee65 7aa5 	vmul.f32	s15, s11, s11
 8017af6:	ee66 3aa6 	vmul.f32	s7, s13, s13
 8017afa:	ee77 7a83 	vadd.f32	s15, s15, s6
 8017afe:	ed88 4a1f 	vstr	s8, [r8, #124]	; 0x7c
 8017b02:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8017b06:	edc8 4a20 	vstr	s9, [r8, #128]	; 0x80
 8017b0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017b0e:	ed88 5a21 	vstr	s10, [r8, #132]	; 0x84
 8017b12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b1a:	edc8 5a36 	vstr	s11, [r8, #216]	; 0xd8
 8017b1e:	ed88 6a37 	vstr	s12, [r8, #220]	; 0xdc
 8017b22:	edc8 6a38 	vstr	s13, [r8, #224]	; 0xe0
 8017b26:	f340 8190 	ble.w	8017e4a <MotionFX_propagate+0xefa>
 8017b2a:	ee17 0a90 	vmov	r0, s15
 8017b2e:	f7e8 fd13 	bl	8000558 <__aeabi_f2d>
 8017b32:	ec41 0b10 	vmov	d0, r0, r1
 8017b36:	e007      	b.n	8017b48 <MotionFX_propagate+0xbf8>
 8017b38:	20000000 	.word	0x20000000
 8017b3c:	20001e5c 	.word	0x20001e5c
 8017b40:	00000000 	.word	0x00000000
 8017b44:	20001f48 	.word	0x20001f48
 8017b48:	f000 ffaa 	bl	8018aa0 <sqrt>
 8017b4c:	ec51 0b10 	vmov	r0, r1, d0
 8017b50:	f7e9 f84e 	bl	8000bf0 <__aeabi_d2f>
 8017b54:	2300      	movs	r3, #0
 8017b56:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8017b5a:	f8c8 00e4 	str.w	r0, [r8, #228]	; 0xe4
 8017b5e:	f8c8 30a8 	str.w	r3, [r8, #168]	; 0xa8
 8017b62:	f8c8 30ac 	str.w	r3, [r8, #172]	; 0xac
 8017b66:	f8c8 30b0 	str.w	r3, [r8, #176]	; 0xb0
 8017b6a:	f8c8 30e8 	str.w	r3, [r8, #232]	; 0xe8
 8017b6e:	f8c8 30ec 	str.w	r3, [r8, #236]	; 0xec
 8017b72:	f8c8 30f0 	str.w	r3, [r8, #240]	; 0xf0
 8017b76:	f8c8 20b4 	str.w	r2, [r8, #180]	; 0xb4
 8017b7a:	f8c8 20f4 	str.w	r2, [r8, #244]	; 0xf4
 8017b7e:	e004      	b.n	8017b8a <MotionFX_propagate+0xc3a>
 8017b80:	4abb      	ldr	r2, [pc, #748]	; (8017e70 <MotionFX_propagate+0xf20>)
 8017b82:	4630      	mov	r0, r6
 8017b84:	4611      	mov	r1, r2
 8017b86:	f7f5 fa65 	bl	800d054 <m_qmult_eml>
 8017b8a:	f894 3836 	ldrb.w	r3, [r4, #2102]	; 0x836
 8017b8e:	2b01      	cmp	r3, #1
 8017b90:	f47f aa30 	bne.w	8016ff4 <MotionFX_propagate+0xa4>
 8017b94:	edd5 7a08 	vldr	s15, [r5, #32]
 8017b98:	69aa      	ldr	r2, [r5, #24]
 8017b9a:	69eb      	ldr	r3, [r5, #28]
 8017b9c:	61ab      	str	r3, [r5, #24]
 8017b9e:	eef1 7a67 	vneg.f32	s15, s15
 8017ba2:	61ea      	str	r2, [r5, #28]
 8017ba4:	edc5 7a08 	vstr	s15, [r5, #32]
 8017ba8:	f7ff ba24 	b.w	8016ff4 <MotionFX_propagate+0xa4>
 8017bac:	4ab1      	ldr	r2, [pc, #708]	; (8017e74 <MotionFX_propagate+0xf24>)
 8017bae:	4630      	mov	r0, r6
 8017bb0:	4611      	mov	r1, r2
 8017bb2:	f7f5 fa4f 	bl	800d054 <m_qmult_eml>
 8017bb6:	f894 35f6 	ldrb.w	r3, [r4, #1526]	; 0x5f6
 8017bba:	2b01      	cmp	r3, #1
 8017bbc:	f47f aa1f 	bne.w	8016ffe <MotionFX_propagate+0xae>
 8017bc0:	edd7 7a08 	vldr	s15, [r7, #32]
 8017bc4:	69ba      	ldr	r2, [r7, #24]
 8017bc6:	69fb      	ldr	r3, [r7, #28]
 8017bc8:	61bb      	str	r3, [r7, #24]
 8017bca:	eef1 7a67 	vneg.f32	s15, s15
 8017bce:	61fa      	str	r2, [r7, #28]
 8017bd0:	edc7 7a08 	vstr	s15, [r7, #32]
 8017bd4:	f7ff ba13 	b.w	8016ffe <MotionFX_propagate+0xae>
 8017bd8:	2201      	movs	r2, #1
 8017bda:	f884 25f5 	strb.w	r2, [r4, #1525]	; 0x5f5
 8017bde:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8017be2:	f7ff bb84 	b.w	80172ee <MotionFX_propagate+0x39e>
 8017be6:	2201      	movs	r2, #1
 8017be8:	f884 2835 	strb.w	r2, [r4, #2101]	; 0x835
 8017bec:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8017bf0:	e623      	b.n	801783a <MotionFX_propagate+0x8ea>
 8017bf2:	4ba1      	ldr	r3, [pc, #644]	; (8017e78 <MotionFX_propagate+0xf28>)
 8017bf4:	ed9d 0a02 	vldr	s0, [sp, #8]
 8017bf8:	ae10      	add	r6, sp, #64	; 0x40
 8017bfa:	f1a3 020c 	sub.w	r2, r3, #12
 8017bfe:	4618      	mov	r0, r3
 8017c00:	9600      	str	r6, [sp, #0]
 8017c02:	a909      	add	r1, sp, #36	; 0x24
 8017c04:	f7f5 fbf4 	bl	800d3f0 <SpacePointGyroProp>
 8017c08:	f7ff bb99 	b.w	801733e <MotionFX_propagate+0x3ee>
 8017c0c:	ee61 1aa1 	vmul.f32	s3, s3, s3
 8017c10:	ee62 2aa2 	vmul.f32	s5, s5, s5
 8017c14:	ee65 7a05 	vmul.f32	s15, s10, s10
 8017c18:	ee72 2aa1 	vadd.f32	s5, s5, s3
 8017c1c:	ee72 7aa7 	vadd.f32	s15, s5, s15
 8017c20:	ee17 0a90 	vmov	r0, s15
 8017c24:	f7e8 fc98 	bl	8000558 <__aeabi_f2d>
 8017c28:	ec41 0b10 	vmov	d0, r0, r1
 8017c2c:	f000 ff38 	bl	8018aa0 <sqrt>
 8017c30:	ec51 0b10 	vmov	r0, r1, d0
 8017c34:	f7e8 ffdc 	bl	8000bf0 <__aeabi_d2f>
 8017c38:	ee0a 0a90 	vmov	s21, r0
 8017c3c:	f7e8 fc8c 	bl	8000558 <__aeabi_f2d>
 8017c40:	a387      	add	r3, pc, #540	; (adr r3, 8017e60 <MotionFX_propagate+0xf10>)
 8017c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c46:	f7e8 ff4d 	bl	8000ae4 <__aeabi_dcmplt>
 8017c4a:	eddd 7a06 	vldr	s15, [sp, #24]
 8017c4e:	ed9d 6a07 	vldr	s12, [sp, #28]
 8017c52:	ed9d 7a08 	vldr	s14, [sp, #32]
 8017c56:	2800      	cmp	r0, #0
 8017c58:	bf18      	it	ne
 8017c5a:	eef0 aa68 	vmovne.f32	s21, s17
 8017c5e:	eec7 6aaa 	vdiv.f32	s13, s15, s21
 8017c62:	eec6 7a2a 	vdiv.f32	s15, s12, s21
 8017c66:	ee87 5a2a 	vdiv.f32	s10, s14, s21
 8017c6a:	ed9d 7a04 	vldr	s14, [sp, #16]
 8017c6e:	edcd 7a07 	vstr	s15, [sp, #28]
 8017c72:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8017c76:	ee07 6a90 	vmov	s15, r6
 8017c7a:	ee07 7a10 	vmov	s14, r7
 8017c7e:	edcd 6a06 	vstr	s13, [sp, #24]
 8017c82:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017c86:	eddd 6a03 	vldr	s13, [sp, #12]
 8017c8a:	ed9d 6a05 	vldr	s12, [sp, #20]
 8017c8e:	ed8d 5a08 	vstr	s10, [sp, #32]
 8017c92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017c96:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8017c9a:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8017c9e:	ee27 aa0a 	vmul.f32	s20, s14, s20
 8017ca2:	ee07 8a10 	vmov	s14, r8
 8017ca6:	ee65 5aa9 	vmul.f32	s11, s11, s19
 8017caa:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8017cae:	ee66 9aa9 	vmul.f32	s19, s13, s19
 8017cb2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8017cb6:	ee26 6a09 	vmul.f32	s12, s12, s18
 8017cba:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8017cbe:	ee26 9a89 	vmul.f32	s18, s13, s18
 8017cc2:	ee3a 7a29 	vadd.f32	s14, s20, s19
 8017cc6:	ee77 7a86 	vadd.f32	s15, s15, s12
 8017cca:	ee37 9a09 	vadd.f32	s18, s14, s18
 8017cce:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8017cd2:	ee29 9a09 	vmul.f32	s18, s18, s18
 8017cd6:	ee68 7a08 	vmul.f32	s15, s16, s16
 8017cda:	ee37 7a09 	vadd.f32	s14, s14, s18
 8017cde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017ce2:	ee17 0a90 	vmov	r0, s15
 8017ce6:	f7e8 fc37 	bl	8000558 <__aeabi_f2d>
 8017cea:	ec41 0b10 	vmov	d0, r0, r1
 8017cee:	f000 fed7 	bl	8018aa0 <sqrt>
 8017cf2:	f894 25f5 	ldrb.w	r2, [r4, #1525]	; 0x5f5
 8017cf6:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
 8017cfa:	eddd 6a0a 	vldr	s13, [sp, #40]	; 0x28
 8017cfe:	ed9d 7a0b 	vldr	s14, [sp, #44]	; 0x2c
 8017d02:	f7ff baed 	b.w	80172e0 <MotionFX_propagate+0x390>
 8017d06:	4b5d      	ldr	r3, [pc, #372]	; (8017e7c <MotionFX_propagate+0xf2c>)
 8017d08:	ed9d 0a02 	vldr	s0, [sp, #8]
 8017d0c:	ae10      	add	r6, sp, #64	; 0x40
 8017d0e:	f1a3 020c 	sub.w	r2, r3, #12
 8017d12:	4618      	mov	r0, r3
 8017d14:	9600      	str	r6, [sp, #0]
 8017d16:	a909      	add	r1, sp, #36	; 0x24
 8017d18:	f7f5 fb6a 	bl	800d3f0 <SpacePointGyroProp>
 8017d1c:	e5b5      	b.n	801788a <MotionFX_propagate+0x93a>
 8017d1e:	ee61 1aa1 	vmul.f32	s3, s3, s3
 8017d22:	ee25 5a05 	vmul.f32	s10, s10, s10
 8017d26:	ee26 6a06 	vmul.f32	s12, s12, s12
 8017d2a:	ee35 5a21 	vadd.f32	s10, s10, s3
 8017d2e:	9305      	str	r3, [sp, #20]
 8017d30:	ee75 7a06 	vadd.f32	s15, s10, s12
 8017d34:	ee17 0a90 	vmov	r0, s15
 8017d38:	f7e8 fc0e 	bl	8000558 <__aeabi_f2d>
 8017d3c:	ec41 0b10 	vmov	d0, r0, r1
 8017d40:	f000 feae 	bl	8018aa0 <sqrt>
 8017d44:	ec51 0b10 	vmov	r0, r1, d0
 8017d48:	f7e8 ff52 	bl	8000bf0 <__aeabi_d2f>
 8017d4c:	ed9d 7a06 	vldr	s14, [sp, #24]
 8017d50:	eddd 5a07 	vldr	s11, [sp, #28]
 8017d54:	eddd 6a08 	vldr	s13, [sp, #32]
 8017d58:	9b05      	ldr	r3, [sp, #20]
 8017d5a:	ee07 0a90 	vmov	s15, r0
 8017d5e:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8017d62:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8017d66:	ee86 5aa7 	vdiv.f32	s10, s13, s15
 8017d6a:	ed8d 7a07 	vstr	s14, [sp, #28]
 8017d6e:	ed9d 7a04 	vldr	s14, [sp, #16]
 8017d72:	eddd 6a03 	vldr	s13, [sp, #12]
 8017d76:	ed8d 6a06 	vstr	s12, [sp, #24]
 8017d7a:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8017d7e:	ee07 5a90 	vmov	s15, r5
 8017d82:	ee07 6a10 	vmov	s14, r6
 8017d86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017d8a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017d8e:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 8017d92:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8017d96:	ee06 7a90 	vmov	s13, r7
 8017d9a:	ee67 9a29 	vmul.f32	s19, s14, s19
 8017d9e:	ee07 3a10 	vmov	s14, r3
 8017da2:	ee65 5a89 	vmul.f32	s11, s11, s18
 8017da6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017daa:	ee26 9a09 	vmul.f32	s18, s12, s18
 8017dae:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8017db2:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8017db6:	ee66 6aa8 	vmul.f32	s13, s13, s17
 8017dba:	ee39 9a89 	vadd.f32	s18, s19, s18
 8017dbe:	ee67 8a28 	vmul.f32	s17, s14, s17
 8017dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017dc6:	ee79 8a28 	vadd.f32	s17, s18, s17
 8017dca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8017dce:	ee68 8aa8 	vmul.f32	s17, s17, s17
 8017dd2:	ee68 6a08 	vmul.f32	s13, s16, s16
 8017dd6:	ee77 7aa8 	vadd.f32	s15, s15, s17
 8017dda:	ed8d 5a08 	vstr	s10, [sp, #32]
 8017dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017de2:	ee17 0a90 	vmov	r0, s15
 8017de6:	f7e8 fbb7 	bl	8000558 <__aeabi_f2d>
 8017dea:	2200      	movs	r2, #0
 8017dec:	2300      	movs	r3, #0
 8017dee:	4606      	mov	r6, r0
 8017df0:	460f      	mov	r7, r1
 8017df2:	f7e8 fe9f 	bl	8000b34 <__aeabi_dcmpun>
 8017df6:	b930      	cbnz	r0, 8017e06 <MotionFX_propagate+0xeb6>
 8017df8:	2200      	movs	r2, #0
 8017dfa:	2300      	movs	r3, #0
 8017dfc:	4630      	mov	r0, r6
 8017dfe:	4639      	mov	r1, r7
 8017e00:	f7e8 fe84 	bl	8000b0c <__aeabi_dcmpge>
 8017e04:	b320      	cbz	r0, 8017e50 <MotionFX_propagate+0xf00>
 8017e06:	f894 2835 	ldrb.w	r2, [r4, #2101]	; 0x835
 8017e0a:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
 8017e0e:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8017e12:	eddd 2a0b 	vldr	s5, [sp, #44]	; 0x2c
 8017e16:	e509      	b.n	801782c <MotionFX_propagate+0x8dc>
 8017e18:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8017e1c:	ed87 8a06 	vstr	s16, [r7, #24]
 8017e20:	ed87 8a07 	vstr	s16, [r7, #28]
 8017e24:	ed87 8a08 	vstr	s16, [r7, #32]
 8017e28:	627b      	str	r3, [r7, #36]	; 0x24
 8017e2a:	f7ff baea 	b.w	8017402 <MotionFX_propagate+0x4b2>
 8017e2e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8017e32:	ed85 8a06 	vstr	s16, [r5, #24]
 8017e36:	ed85 8a07 	vstr	s16, [r5, #28]
 8017e3a:	ed85 8a08 	vstr	s16, [r5, #32]
 8017e3e:	626b      	str	r3, [r5, #36]	; 0x24
 8017e40:	e585      	b.n	801794e <MotionFX_propagate+0x9fe>
 8017e42:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8017e68 <MotionFX_propagate+0xf18>
 8017e46:	f7ff bbd2 	b.w	80175ee <MotionFX_propagate+0x69e>
 8017e4a:	ed9f 0b07 	vldr	d0, [pc, #28]	; 8017e68 <MotionFX_propagate+0xf18>
 8017e4e:	e67b      	b.n	8017b48 <MotionFX_propagate+0xbf8>
 8017e50:	ec47 6b10 	vmov	d0, r6, r7
 8017e54:	f000 fe24 	bl	8018aa0 <sqrt>
 8017e58:	e7d5      	b.n	8017e06 <MotionFX_propagate+0xeb6>
 8017e5a:	bf00      	nop
 8017e5c:	f3af 8000 	nop.w
 8017e60:	a0b5ed8d 	.word	0xa0b5ed8d
 8017e64:	3eb0c6f7 	.word	0x3eb0c6f7
	...
 8017e70:	20001e1c 	.word	0x20001e1c
 8017e74:	20001bdc 	.word	0x20001bdc
 8017e78:	20001bac 	.word	0x20001bac
 8017e7c:	20001dec 	.word	0x20001dec

08017e80 <MotionFX_MagCal_init>:
 8017e80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017e84:	4c77      	ldr	r4, [pc, #476]	; (8018064 <MotionFX_MagCal_init+0x1e4>)
 8017e86:	f894 3941 	ldrb.w	r3, [r4, #2369]	; 0x941
 8017e8a:	b097      	sub	sp, #92	; 0x5c
 8017e8c:	b913      	cbnz	r3, 8017e94 <MotionFX_MagCal_init+0x14>
 8017e8e:	b017      	add	sp, #92	; 0x5c
 8017e90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017e94:	1e43      	subs	r3, r0, #1
 8017e96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017e9a:	d2f8      	bcs.n	8017e8e <MotionFX_MagCal_init+0xe>
 8017e9c:	4689      	mov	r9, r1
 8017e9e:	4607      	mov	r7, r0
 8017ea0:	fa0f f880 	sxth.w	r8, r0
 8017ea4:	2900      	cmp	r1, #0
 8017ea6:	d15a      	bne.n	8017f5e <MotionFX_MagCal_init+0xde>
 8017ea8:	f104 057c 	add.w	r5, r4, #124	; 0x7c
 8017eac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017eae:	f04f 0e01 	mov.w	lr, #1
 8017eb2:	ae03      	add	r6, sp, #12
 8017eb4:	f88d e004 	strb.w	lr, [sp, #4]
 8017eb8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8017eba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017ebc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8017ebe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017ec0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8017ec2:	f855 2948 	ldr.w	r2, [r5], #-72
 8017ec6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8017ec8:	6032      	str	r2, [r6, #0]
 8017eca:	9302      	str	r3, [sp, #8]
 8017ecc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017ece:	ae10      	add	r6, sp, #64	; 0x40
 8017ed0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8017ed2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017ed6:	e886 0003 	stmia.w	r6, {r0, r1}
 8017eda:	a901      	add	r1, sp, #4
 8017edc:	2054      	movs	r0, #84	; 0x54
 8017ede:	f7f2 fdf1 	bl	800aac4 <MotionFX_SaveMagCalInNVM>
 8017ee2:	f884 9058 	strb.w	r9, [r4, #88]	; 0x58
 8017ee6:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 8017eea:	4a5f      	ldr	r2, [pc, #380]	; (8018068 <MotionFX_MagCal_init+0x1e8>)
 8017eec:	1bdb      	subs	r3, r3, r7
 8017eee:	ee07 3a90 	vmov	s15, r3
 8017ef2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017ef6:	23c8      	movs	r3, #200	; 0xc8
 8017ef8:	eef0 7ae7 	vabs.f32	s15, s15
 8017efc:	fb93 f3f7 	sdiv	r3, r3, r7
 8017f00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017f04:	b2db      	uxtb	r3, r3
 8017f06:	2b0f      	cmp	r3, #15
 8017f08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017f0c:	bf28      	it	cs
 8017f0e:	230f      	movcs	r3, #15
 8017f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f14:	f884 3d76 	strb.w	r3, [r4, #3446]	; 0xd76
 8017f18:	f8c2 70c4 	str.w	r7, [r2, #196]	; 0xc4
 8017f1c:	dd0f      	ble.n	8017f3e <MotionFX_MagCal_init+0xbe>
 8017f1e:	2300      	movs	r3, #0
 8017f20:	4952      	ldr	r1, [pc, #328]	; (801806c <MotionFX_MagCal_init+0x1ec>)
 8017f22:	f8a4 8012 	strh.w	r8, [r4, #18]
 8017f26:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8017f2a:	6161      	str	r1, [r4, #20]
 8017f2c:	8323      	strh	r3, [r4, #24]
 8017f2e:	61e3      	str	r3, [r4, #28]
 8017f30:	8222      	strh	r2, [r4, #16]
 8017f32:	2300      	movs	r3, #0
 8017f34:	f884 3df0 	strb.w	r3, [r4, #3568]	; 0xdf0
 8017f38:	b017      	add	sp, #92	; 0x5c
 8017f3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017f3e:	edd4 7a05 	vldr	s15, [r4, #20]
 8017f42:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8018070 <MotionFX_MagCal_init+0x1f0>
 8017f46:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8018074 <MotionFX_MagCal_init+0x1f4>
 8017f4a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8017f4e:	eef0 7ae7 	vabs.f32	s15, s15
 8017f52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f5a:	dce0      	bgt.n	8017f1e <MotionFX_MagCal_init+0x9e>
 8017f5c:	e7e9      	b.n	8017f32 <MotionFX_MagCal_init+0xb2>
 8017f5e:	2500      	movs	r5, #0
 8017f60:	f44f 0202 	mov.w	r2, #8519680	; 0x820000
 8017f64:	f504 6016 	add.w	r0, r4, #2400	; 0x960
 8017f68:	4629      	mov	r1, r5
 8017f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017f6e:	61a2      	str	r2, [r4, #24]
 8017f70:	6220      	str	r0, [r4, #32]
 8017f72:	f44f 7248 	mov.w	r2, #800	; 0x320
 8017f76:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 8017f7a:	61e5      	str	r5, [r4, #28]
 8017f7c:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8017f80:	65e5      	str	r5, [r4, #92]	; 0x5c
 8017f82:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
 8017f86:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
 8017f8a:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
 8017f8e:	f003 fad2 	bl	801b536 <memset>
 8017f92:	225f      	movs	r2, #95	; 0x5f
 8017f94:	23ff      	movs	r3, #255	; 0xff
 8017f96:	2601      	movs	r6, #1
 8017f98:	4629      	mov	r1, r5
 8017f9a:	6325      	str	r5, [r4, #48]	; 0x30
 8017f9c:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8017fa0:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 8017fa4:	62e5      	str	r5, [r4, #44]	; 0x2c
 8017fa6:	62a5      	str	r5, [r4, #40]	; 0x28
 8017fa8:	f884 20b1 	strb.w	r2, [r4, #177]	; 0xb1
 8017fac:	250f      	movs	r5, #15
 8017fae:	2234      	movs	r2, #52	; 0x34
 8017fb0:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 8017fb4:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
 8017fb8:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
 8017fbc:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
 8017fc0:	f884 6065 	strb.w	r6, [r4, #101]	; 0x65
 8017fc4:	f003 fab7 	bl	801b536 <memset>
 8017fc8:	a916      	add	r1, sp, #88	; 0x58
 8017fca:	f1a7 030a 	sub.w	r3, r7, #10
 8017fce:	b29b      	uxth	r3, r3
 8017fd0:	2500      	movs	r5, #0
 8017fd2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8017fd6:	2b32      	cmp	r3, #50	; 0x32
 8017fd8:	f801 5d54 	strb.w	r5, [r1, #-84]!
 8017fdc:	f04f 0301 	mov.w	r3, #1
 8017fe0:	f04f 0054 	mov.w	r0, #84	; 0x54
 8017fe4:	bf98      	it	ls
 8017fe6:	f884 6058 	strbls.w	r6, [r4, #88]	; 0x58
 8017fea:	f884 607d 	strb.w	r6, [r4, #125]	; 0x7d
 8017fee:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
 8017ff2:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
 8017ff6:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
 8017ffa:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
 8017ffe:	f7f2 fd5f 	bl	800aac0 <MotionFX_LoadMagCalFromNVM>
 8018002:	2801      	cmp	r0, #1
 8018004:	f43f af6f 	beq.w	8017ee6 <MotionFX_MagCal_init+0x66>
 8018008:	9e02      	ldr	r6, [sp, #8]
 801800a:	f88d 5004 	strb.w	r5, [sp, #4]
 801800e:	2e00      	cmp	r6, #0
 8018010:	f43f af69 	beq.w	8017ee6 <MotionFX_MagCal_init+0x66>
 8018014:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8018018:	2b00      	cmp	r3, #0
 801801a:	f43f af64 	beq.w	8017ee6 <MotionFX_MagCal_init+0x66>
 801801e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8018022:	2b00      	cmp	r3, #0
 8018024:	f43f af5f 	beq.w	8017ee6 <MotionFX_MagCal_init+0x66>
 8018028:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 801802c:	429a      	cmp	r2, r3
 801802e:	f4ff af5a 	bcc.w	8017ee6 <MotionFX_MagCal_init+0x66>
 8018032:	f10d 0e0c 	add.w	lr, sp, #12
 8018036:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801803a:	4d0f      	ldr	r5, [pc, #60]	; (8018078 <MotionFX_MagCal_init+0x1f8>)
 801803c:	62e6      	str	r6, [r4, #44]	; 0x2c
 801803e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018040:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018044:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018046:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801804a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801804c:	ae10      	add	r6, sp, #64	; 0x40
 801804e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8018050:	f8de e000 	ldr.w	lr, [lr]
 8018054:	f845 e948 	str.w	lr, [r5], #-72
 8018058:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801805a:	e896 0003 	ldmia.w	r6, {r0, r1}
 801805e:	e885 0003 	stmia.w	r5, {r0, r1}
 8018062:	e740      	b.n	8017ee6 <MotionFX_MagCal_init+0x66>
 8018064:	20001670 	.word	0x20001670
 8018068:	200010f8 	.word	0x200010f8
 801806c:	3dcccccd 	.word	0x3dcccccd
 8018070:	3dcccccd 	.word	0x3dcccccd
 8018074:	3c23d70a 	.word	0x3c23d70a
 8018078:	200016ec 	.word	0x200016ec

0801807c <MotionFX_MagCal_run>:
 801807c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018080:	f8df e230 	ldr.w	lr, [pc, #560]	; 80182b4 <MotionFX_MagCal_run+0x238>
 8018084:	f89e 3941 	ldrb.w	r3, [lr, #2369]	; 0x941
 8018088:	b083      	sub	sp, #12
 801808a:	2b00      	cmp	r3, #0
 801808c:	d06f      	beq.n	801816e <MotionFX_MagCal_run+0xf2>
 801808e:	edd0 7a00 	vldr	s15, [r0]
 8018092:	ed9f 7a84 	vldr	s14, [pc, #528]	; 80182a4 <MotionFX_MagCal_run+0x228>
 8018096:	f89e 4df0 	ldrb.w	r4, [lr, #3568]	; 0xdf0
 801809a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801809e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80180a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180a6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80180aa:	bfac      	ite	ge
 80180ac:	ee77 7a87 	vaddge.f32	s15, s15, s14
 80180b0:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 80180b4:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 80182a4 <MotionFX_MagCal_run+0x228>
 80180b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80180bc:	ee17 1a90 	vmov	r1, s15
 80180c0:	edd0 7a01 	vldr	s15, [r0, #4]
 80180c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80180c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80180cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180d0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80180d4:	bfac      	ite	ge
 80180d6:	ee77 7a87 	vaddge.f32	s15, s15, s14
 80180da:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 80180de:	ed9f 7a71 	vldr	s14, [pc, #452]	; 80182a4 <MotionFX_MagCal_run+0x228>
 80180e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80180e6:	ee17 3a90 	vmov	r3, s15
 80180ea:	edd0 7a02 	vldr	s15, [r0, #8]
 80180ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80180f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80180f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180fa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80180fe:	bfac      	ite	ge
 8018100:	ee77 7a87 	vaddge.f32	s15, s15, s14
 8018104:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 8018108:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801810c:	ee17 2a90 	vmov	r2, s15
 8018110:	b384      	cbz	r4, 8018174 <MotionFX_MagCal_run+0xf8>
 8018112:	4d65      	ldr	r5, [pc, #404]	; (80182a8 <MotionFX_MagCal_run+0x22c>)
 8018114:	00e0      	lsls	r0, r4, #3
 8018116:	f8d5 50c4 	ldr.w	r5, [r5, #196]	; 0xc4
 801811a:	eb0e 0600 	add.w	r6, lr, r0
 801811e:	fb15 f504 	smulbb	r5, r5, r4
 8018122:	f8a6 5d78 	strh.w	r5, [r6, #3448]	; 0xd78
 8018126:	f647 75fe 	movw	r5, #32766	; 0x7ffe
 801812a:	42a9      	cmp	r1, r5
 801812c:	4f5f      	ldr	r7, [pc, #380]	; (80182ac <MotionFX_MagCal_run+0x230>)
 801812e:	f89e 6d76 	ldrb.w	r6, [lr, #3446]	; 0xd76
 8018132:	bfa8      	it	ge
 8018134:	4629      	movge	r1, r5
 8018136:	42ab      	cmp	r3, r5
 8018138:	bfa8      	it	ge
 801813a:	462b      	movge	r3, r5
 801813c:	42aa      	cmp	r2, r5
 801813e:	bfa8      	it	ge
 8018140:	462a      	movge	r2, r5
 8018142:	3401      	adds	r4, #1
 8018144:	42b9      	cmp	r1, r7
 8018146:	4470      	add	r0, lr
 8018148:	bfb8      	it	lt
 801814a:	4639      	movlt	r1, r7
 801814c:	b2e4      	uxtb	r4, r4
 801814e:	42bb      	cmp	r3, r7
 8018150:	bfb8      	it	lt
 8018152:	462b      	movlt	r3, r5
 8018154:	42ba      	cmp	r2, r7
 8018156:	bfb8      	it	lt
 8018158:	463a      	movlt	r2, r7
 801815a:	42a6      	cmp	r6, r4
 801815c:	f88e 4df0 	strb.w	r4, [lr, #3568]	; 0xdf0
 8018160:	f8a0 1d7a 	strh.w	r1, [r0, #3450]	; 0xd7a
 8018164:	f8a0 3d7c 	strh.w	r3, [r0, #3452]	; 0xd7c
 8018168:	f8a0 2d7e 	strh.w	r2, [r0, #3454]	; 0xd7e
 801816c:	d00a      	beq.n	8018184 <MotionFX_MagCal_run+0x108>
 801816e:	b003      	add	sp, #12
 8018170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018174:	68c0      	ldr	r0, [r0, #12]
 8018176:	f8ce 0d70 	str.w	r0, [lr, #3440]	; 0xd70
 801817a:	2001      	movs	r0, #1
 801817c:	f88e 0d74 	strb.w	r0, [lr, #3444]	; 0xd74
 8018180:	4620      	mov	r0, r4
 8018182:	e7d0      	b.n	8018126 <MotionFX_MagCal_run+0xaa>
 8018184:	f89e 2d74 	ldrb.w	r2, [lr, #3444]	; 0xd74
 8018188:	f8de cd70 	ldr.w	ip, [lr, #3440]	; 0xd70
 801818c:	f04f 0a00 	mov.w	sl, #0
 8018190:	f88e adf0 	strb.w	sl, [lr, #3568]	; 0xdf0
 8018194:	2a00      	cmp	r2, #0
 8018196:	d048      	beq.n	801822a <MotionFX_MagCal_run+0x1ae>
 8018198:	3a01      	subs	r2, #1
 801819a:	217a      	movs	r1, #122	; 0x7a
 801819c:	b2d2      	uxtb	r2, r2
 801819e:	fb02 1201 	mla	r2, r2, r1, r1
 80181a2:	f8be 701a 	ldrh.w	r7, [lr, #26]
 80181a6:	f8de 5020 	ldr.w	r5, [lr, #32]
 80181aa:	f8be 3018 	ldrh.w	r3, [lr, #24]
 80181ae:	f8de 001c 	ldr.w	r0, [lr, #28]
 80181b2:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 80182b0 <MotionFX_MagCal_run+0x234>
 80181b6:	9201      	str	r2, [sp, #4]
 80181b8:	4651      	mov	r1, sl
 80181ba:	4654      	mov	r4, sl
 80181bc:	f06f 4960 	mvn.w	r9, #3758096384	; 0xe0000000
 80181c0:	f04f 0801 	mov.w	r8, #1
 80181c4:	f89b 6006 	ldrb.w	r6, [fp, #6]
 80181c8:	b32e      	cbz	r6, 8018216 <MotionFX_MagCal_run+0x19a>
 80181ca:	b327      	cbz	r7, 8018216 <MotionFX_MagCal_run+0x19a>
 80181cc:	3e01      	subs	r6, #1
 80181ce:	f10a 0208 	add.w	r2, sl, #8
 80181d2:	b2f6      	uxtb	r6, r6
 80181d4:	2108      	movs	r1, #8
 80181d6:	fb11 2606 	smlabb	r6, r1, r6, r2
 80181da:	4a35      	ldr	r2, [pc, #212]	; (80182b0 <MotionFX_MagCal_run+0x234>)
 80181dc:	42bb      	cmp	r3, r7
 80181de:	4416      	add	r6, r2
 80181e0:	bf28      	it	cs
 80181e2:	463b      	movcs	r3, r7
 80181e4:	465a      	mov	r2, fp
 80181e6:	3301      	adds	r3, #1
 80181e8:	b29b      	uxth	r3, r3
 80181ea:	42bb      	cmp	r3, r7
 80181ec:	bf28      	it	cs
 80181ee:	463b      	movcs	r3, r7
 80181f0:	eb03 0009 	add.w	r0, r3, r9
 80181f4:	eb05 01c0 	add.w	r1, r5, r0, lsl #3
 80181f8:	8954      	ldrh	r4, [r2, #10]
 80181fa:	f805 8030 	strb.w	r8, [r5, r0, lsl #3]
 80181fe:	8990      	ldrh	r0, [r2, #12]
 8018200:	804c      	strh	r4, [r1, #2]
 8018202:	89d4      	ldrh	r4, [r2, #14]
 8018204:	8088      	strh	r0, [r1, #4]
 8018206:	f832 0f08 	ldrh.w	r0, [r2, #8]!
 801820a:	80cc      	strh	r4, [r1, #6]
 801820c:	42b2      	cmp	r2, r6
 801820e:	4460      	add	r0, ip
 8018210:	d1e9      	bne.n	80181e6 <MotionFX_MagCal_run+0x16a>
 8018212:	2101      	movs	r1, #1
 8018214:	460c      	mov	r4, r1
 8018216:	9a01      	ldr	r2, [sp, #4]
 8018218:	f10a 0a7a 	add.w	sl, sl, #122	; 0x7a
 801821c:	4552      	cmp	r2, sl
 801821e:	f10b 0b7a 	add.w	fp, fp, #122	; 0x7a
 8018222:	d1cf      	bne.n	80181c4 <MotionFX_MagCal_run+0x148>
 8018224:	2c00      	cmp	r4, #0
 8018226:	d13a      	bne.n	801829e <MotionFX_MagCal_run+0x222>
 8018228:	bbb1      	cbnz	r1, 8018298 <MotionFX_MagCal_run+0x21c>
 801822a:	f89e 3058 	ldrb.w	r3, [lr, #88]	; 0x58
 801822e:	2b00      	cmp	r3, #0
 8018230:	d09d      	beq.n	801816e <MotionFX_MagCal_run+0xf2>
 8018232:	f8be 1018 	ldrh.w	r1, [lr, #24]
 8018236:	f8be 301a 	ldrh.w	r3, [lr, #26]
 801823a:	428b      	cmp	r3, r1
 801823c:	d023      	beq.n	8018286 <MotionFX_MagCal_run+0x20a>
 801823e:	f9be 4012 	ldrsh.w	r4, [lr, #18]
 8018242:	b329      	cbz	r1, 8018290 <MotionFX_MagCal_run+0x214>
 8018244:	f8de 201c 	ldr.w	r2, [lr, #28]
 8018248:	3201      	adds	r2, #1
 801824a:	1913      	adds	r3, r2, r4
 801824c:	1c5a      	adds	r2, r3, #1
 801824e:	d01f      	beq.n	8018290 <MotionFX_MagCal_run+0x214>
 8018250:	f503 501c 	add.w	r0, r3, #9984	; 0x2700
 8018254:	3010      	adds	r0, #16
 8018256:	f8de 205c 	ldr.w	r2, [lr, #92]	; 0x5c
 801825a:	4282      	cmp	r2, r0
 801825c:	f8be 0060 	ldrh.w	r0, [lr, #96]	; 0x60
 8018260:	bf84      	itt	hi
 8018262:	f8ce 305c 	strhi.w	r3, [lr, #92]	; 0x5c
 8018266:	461a      	movhi	r2, r3
 8018268:	4402      	add	r2, r0
 801826a:	4293      	cmp	r3, r2
 801826c:	f4ff af7f 	bcc.w	801816e <MotionFX_MagCal_run+0xf2>
 8018270:	b121      	cbz	r1, 801827c <MotionFX_MagCal_run+0x200>
 8018272:	f8de 201c 	ldr.w	r2, [lr, #28]
 8018276:	3901      	subs	r1, #1
 8018278:	fb04 2111 	mls	r1, r4, r1, r2
 801827c:	1a5b      	subs	r3, r3, r1
 801827e:	b21b      	sxth	r3, r3
 8018280:	4283      	cmp	r3, r0
 8018282:	f6ff af74 	blt.w	801816e <MotionFX_MagCal_run+0xf2>
 8018286:	b003      	add	sp, #12
 8018288:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801828c:	f7f6 bd4e 	b.w	800ed2c <MEMS_runMagCal.constprop.21>
 8018290:	f242 7010 	movw	r0, #10000	; 0x2710
 8018294:	2300      	movs	r3, #0
 8018296:	e7de      	b.n	8018256 <MotionFX_MagCal_run+0x1da>
 8018298:	f8ce 001c 	str.w	r0, [lr, #28]
 801829c:	e7c5      	b.n	801822a <MotionFX_MagCal_run+0x1ae>
 801829e:	f8ae 3018 	strh.w	r3, [lr, #24]
 80182a2:	e7c1      	b.n	8018228 <MotionFX_MagCal_run+0x1ac>
 80182a4:	43fa0000 	.word	0x43fa0000
 80182a8:	200010f8 	.word	0x200010f8
 80182ac:	ffff8002 	.word	0xffff8002
 80182b0:	200023e0 	.word	0x200023e0
 80182b4:	20001670 	.word	0x20001670

080182b8 <MotionFX_MagCal_getParams>:
 80182b8:	4b14      	ldr	r3, [pc, #80]	; (801830c <MotionFX_MagCal_getParams+0x54>)
 80182ba:	f893 2941 	ldrb.w	r2, [r3, #2369]	; 0x941
 80182be:	b902      	cbnz	r2, 80182c2 <MotionFX_MagCal_getParams+0xa>
 80182c0:	4770      	bx	lr
 80182c2:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 80182c6:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 80182ca:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 80182ce:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8018310 <MotionFX_MagCal_getParams+0x58>
 80182d2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80182d6:	7303      	strb	r3, [r0, #12]
 80182d8:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 80182dc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80182e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80182e4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80182e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80182ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80182f0:	eec6 5a86 	vdiv.f32	s11, s13, s12
 80182f4:	eec7 6a06 	vdiv.f32	s13, s14, s12
 80182f8:	ee87 7a86 	vdiv.f32	s14, s15, s12
 80182fc:	edc0 5a00 	vstr	s11, [r0]
 8018300:	edc0 6a01 	vstr	s13, [r0, #4]
 8018304:	ed80 7a02 	vstr	s14, [r0, #8]
 8018308:	4770      	bx	lr
 801830a:	bf00      	nop
 801830c:	20001670 	.word	0x20001670
 8018310:	43fa0000 	.word	0x43fa0000

08018314 <MotionFX_GetLibVersion>:
 8018314:	4b10      	ldr	r3, [pc, #64]	; (8018358 <MotionFX_GetLibVersion+0x44>)
 8018316:	f893 3941 	ldrb.w	r3, [r3, #2369]	; 0x941
 801831a:	b90b      	cbnz	r3, 8018320 <MotionFX_GetLibVersion+0xc>
 801831c:	4618      	mov	r0, r3
 801831e:	4770      	bx	lr
 8018320:	b470      	push	{r4, r5, r6}
 8018322:	4e0e      	ldr	r6, [pc, #56]	; (801835c <MotionFX_GetLibVersion+0x48>)
 8018324:	4605      	mov	r5, r0
 8018326:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8018328:	b08b      	sub	sp, #44	; 0x2c
 801832a:	ac01      	add	r4, sp, #4
 801832c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801832e:	6833      	ldr	r3, [r6, #0]
 8018330:	f824 3b02 	strh.w	r3, [r4], #2
 8018334:	0c1b      	lsrs	r3, r3, #16
 8018336:	7023      	strb	r3, [r4, #0]
 8018338:	ac01      	add	r4, sp, #4
 801833a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801833c:	8826      	ldrh	r6, [r4, #0]
 801833e:	60eb      	str	r3, [r5, #12]
 8018340:	78a4      	ldrb	r4, [r4, #2]
 8018342:	6028      	str	r0, [r5, #0]
 8018344:	2312      	movs	r3, #18
 8018346:	4618      	mov	r0, r3
 8018348:	6069      	str	r1, [r5, #4]
 801834a:	60aa      	str	r2, [r5, #8]
 801834c:	822e      	strh	r6, [r5, #16]
 801834e:	74ac      	strb	r4, [r5, #18]
 8018350:	b00b      	add	sp, #44	; 0x2c
 8018352:	bc70      	pop	{r4, r5, r6}
 8018354:	4770      	bx	lr
 8018356:	bf00      	nop
 8018358:	20001670 	.word	0x20001670
 801835c:	0801e060 	.word	0x0801e060

08018360 <floor>:
 8018360:	ec51 0b10 	vmov	r0, r1, d0
 8018364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018368:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801836c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8018370:	2e13      	cmp	r6, #19
 8018372:	ee10 8a10 	vmov	r8, s0
 8018376:	460c      	mov	r4, r1
 8018378:	ee10 5a10 	vmov	r5, s0
 801837c:	dc35      	bgt.n	80183ea <floor+0x8a>
 801837e:	2e00      	cmp	r6, #0
 8018380:	da17      	bge.n	80183b2 <floor+0x52>
 8018382:	a335      	add	r3, pc, #212	; (adr r3, 8018458 <floor+0xf8>)
 8018384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018388:	f7e7 ff88 	bl	800029c <__adddf3>
 801838c:	2200      	movs	r2, #0
 801838e:	2300      	movs	r3, #0
 8018390:	f7e8 fbc6 	bl	8000b20 <__aeabi_dcmpgt>
 8018394:	b150      	cbz	r0, 80183ac <floor+0x4c>
 8018396:	2c00      	cmp	r4, #0
 8018398:	da5a      	bge.n	8018450 <floor+0xf0>
 801839a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801839e:	ea53 0308 	orrs.w	r3, r3, r8
 80183a2:	4b2f      	ldr	r3, [pc, #188]	; (8018460 <floor+0x100>)
 80183a4:	f04f 0500 	mov.w	r5, #0
 80183a8:	bf18      	it	ne
 80183aa:	461c      	movne	r4, r3
 80183ac:	4621      	mov	r1, r4
 80183ae:	4628      	mov	r0, r5
 80183b0:	e025      	b.n	80183fe <floor+0x9e>
 80183b2:	4f2c      	ldr	r7, [pc, #176]	; (8018464 <floor+0x104>)
 80183b4:	4137      	asrs	r7, r6
 80183b6:	ea01 0307 	and.w	r3, r1, r7
 80183ba:	4303      	orrs	r3, r0
 80183bc:	d01f      	beq.n	80183fe <floor+0x9e>
 80183be:	a326      	add	r3, pc, #152	; (adr r3, 8018458 <floor+0xf8>)
 80183c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183c4:	f7e7 ff6a 	bl	800029c <__adddf3>
 80183c8:	2200      	movs	r2, #0
 80183ca:	2300      	movs	r3, #0
 80183cc:	f7e8 fba8 	bl	8000b20 <__aeabi_dcmpgt>
 80183d0:	2800      	cmp	r0, #0
 80183d2:	d0eb      	beq.n	80183ac <floor+0x4c>
 80183d4:	2c00      	cmp	r4, #0
 80183d6:	bfbe      	ittt	lt
 80183d8:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80183dc:	fa43 f606 	asrlt.w	r6, r3, r6
 80183e0:	19a4      	addlt	r4, r4, r6
 80183e2:	ea24 0407 	bic.w	r4, r4, r7
 80183e6:	2500      	movs	r5, #0
 80183e8:	e7e0      	b.n	80183ac <floor+0x4c>
 80183ea:	2e33      	cmp	r6, #51	; 0x33
 80183ec:	dd0b      	ble.n	8018406 <floor+0xa6>
 80183ee:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80183f2:	d104      	bne.n	80183fe <floor+0x9e>
 80183f4:	ee10 2a10 	vmov	r2, s0
 80183f8:	460b      	mov	r3, r1
 80183fa:	f7e7 ff4f 	bl	800029c <__adddf3>
 80183fe:	ec41 0b10 	vmov	d0, r0, r1
 8018402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018406:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801840a:	f04f 33ff 	mov.w	r3, #4294967295
 801840e:	fa23 f707 	lsr.w	r7, r3, r7
 8018412:	4238      	tst	r0, r7
 8018414:	d0f3      	beq.n	80183fe <floor+0x9e>
 8018416:	a310      	add	r3, pc, #64	; (adr r3, 8018458 <floor+0xf8>)
 8018418:	e9d3 2300 	ldrd	r2, r3, [r3]
 801841c:	f7e7 ff3e 	bl	800029c <__adddf3>
 8018420:	2200      	movs	r2, #0
 8018422:	2300      	movs	r3, #0
 8018424:	f7e8 fb7c 	bl	8000b20 <__aeabi_dcmpgt>
 8018428:	2800      	cmp	r0, #0
 801842a:	d0bf      	beq.n	80183ac <floor+0x4c>
 801842c:	2c00      	cmp	r4, #0
 801842e:	da02      	bge.n	8018436 <floor+0xd6>
 8018430:	2e14      	cmp	r6, #20
 8018432:	d103      	bne.n	801843c <floor+0xdc>
 8018434:	3401      	adds	r4, #1
 8018436:	ea25 0507 	bic.w	r5, r5, r7
 801843a:	e7b7      	b.n	80183ac <floor+0x4c>
 801843c:	2301      	movs	r3, #1
 801843e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8018442:	fa03 f606 	lsl.w	r6, r3, r6
 8018446:	4435      	add	r5, r6
 8018448:	45a8      	cmp	r8, r5
 801844a:	bf88      	it	hi
 801844c:	18e4      	addhi	r4, r4, r3
 801844e:	e7f2      	b.n	8018436 <floor+0xd6>
 8018450:	2500      	movs	r5, #0
 8018452:	462c      	mov	r4, r5
 8018454:	e7aa      	b.n	80183ac <floor+0x4c>
 8018456:	bf00      	nop
 8018458:	8800759c 	.word	0x8800759c
 801845c:	7e37e43c 	.word	0x7e37e43c
 8018460:	bff00000 	.word	0xbff00000
 8018464:	000fffff 	.word	0x000fffff

08018468 <fmax>:
 8018468:	b508      	push	{r3, lr}
 801846a:	ed2d 8b04 	vpush	{d8-d9}
 801846e:	eeb0 8a40 	vmov.f32	s16, s0
 8018472:	eef0 8a60 	vmov.f32	s17, s1
 8018476:	eeb0 9a41 	vmov.f32	s18, s2
 801847a:	eef0 9a61 	vmov.f32	s19, s3
 801847e:	f000 f841 	bl	8018504 <__fpclassifyd>
 8018482:	b168      	cbz	r0, 80184a0 <fmax+0x38>
 8018484:	eeb0 0a49 	vmov.f32	s0, s18
 8018488:	eef0 0a69 	vmov.f32	s1, s19
 801848c:	f000 f83a 	bl	8018504 <__fpclassifyd>
 8018490:	b150      	cbz	r0, 80184a8 <fmax+0x40>
 8018492:	ec53 2b19 	vmov	r2, r3, d9
 8018496:	ec51 0b18 	vmov	r0, r1, d8
 801849a:	f7e8 fb41 	bl	8000b20 <__aeabi_dcmpgt>
 801849e:	b918      	cbnz	r0, 80184a8 <fmax+0x40>
 80184a0:	eeb0 8a49 	vmov.f32	s16, s18
 80184a4:	eef0 8a69 	vmov.f32	s17, s19
 80184a8:	eeb0 0a48 	vmov.f32	s0, s16
 80184ac:	eef0 0a68 	vmov.f32	s1, s17
 80184b0:	ecbd 8b04 	vpop	{d8-d9}
 80184b4:	bd08      	pop	{r3, pc}

080184b6 <fmin>:
 80184b6:	b508      	push	{r3, lr}
 80184b8:	ed2d 8b04 	vpush	{d8-d9}
 80184bc:	eeb0 8a40 	vmov.f32	s16, s0
 80184c0:	eef0 8a60 	vmov.f32	s17, s1
 80184c4:	eeb0 9a41 	vmov.f32	s18, s2
 80184c8:	eef0 9a61 	vmov.f32	s19, s3
 80184cc:	f000 f81a 	bl	8018504 <__fpclassifyd>
 80184d0:	b168      	cbz	r0, 80184ee <fmin+0x38>
 80184d2:	eeb0 0a49 	vmov.f32	s0, s18
 80184d6:	eef0 0a69 	vmov.f32	s1, s19
 80184da:	f000 f813 	bl	8018504 <__fpclassifyd>
 80184de:	b150      	cbz	r0, 80184f6 <fmin+0x40>
 80184e0:	ec53 2b19 	vmov	r2, r3, d9
 80184e4:	ec51 0b18 	vmov	r0, r1, d8
 80184e8:	f7e8 fafc 	bl	8000ae4 <__aeabi_dcmplt>
 80184ec:	b918      	cbnz	r0, 80184f6 <fmin+0x40>
 80184ee:	eeb0 8a49 	vmov.f32	s16, s18
 80184f2:	eef0 8a69 	vmov.f32	s17, s19
 80184f6:	eeb0 0a48 	vmov.f32	s0, s16
 80184fa:	eef0 0a68 	vmov.f32	s1, s17
 80184fe:	ecbd 8b04 	vpop	{d8-d9}
 8018502:	bd08      	pop	{r3, pc}

08018504 <__fpclassifyd>:
 8018504:	ec53 2b10 	vmov	r2, r3, d0
 8018508:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801850c:	b510      	push	{r4, lr}
 801850e:	ee10 0a10 	vmov	r0, s0
 8018512:	d01b      	beq.n	801854c <__fpclassifyd+0x48>
 8018514:	490f      	ldr	r1, [pc, #60]	; (8018554 <__fpclassifyd+0x50>)
 8018516:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
 801851a:	428c      	cmp	r4, r1
 801851c:	d910      	bls.n	8018540 <__fpclassifyd+0x3c>
 801851e:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 8018522:	490c      	ldr	r1, [pc, #48]	; (8018554 <__fpclassifyd+0x50>)
 8018524:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8018528:	428b      	cmp	r3, r1
 801852a:	d909      	bls.n	8018540 <__fpclassifyd+0x3c>
 801852c:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8018530:	d308      	bcc.n	8018544 <__fpclassifyd+0x40>
 8018532:	4b09      	ldr	r3, [pc, #36]	; (8018558 <__fpclassifyd+0x54>)
 8018534:	429a      	cmp	r2, r3
 8018536:	d107      	bne.n	8018548 <__fpclassifyd+0x44>
 8018538:	fab0 f080 	clz	r0, r0
 801853c:	0940      	lsrs	r0, r0, #5
 801853e:	bd10      	pop	{r4, pc}
 8018540:	2004      	movs	r0, #4
 8018542:	bd10      	pop	{r4, pc}
 8018544:	2003      	movs	r0, #3
 8018546:	bd10      	pop	{r4, pc}
 8018548:	2000      	movs	r0, #0
 801854a:	bd10      	pop	{r4, pc}
 801854c:	2800      	cmp	r0, #0
 801854e:	d1e6      	bne.n	801851e <__fpclassifyd+0x1a>
 8018550:	2002      	movs	r0, #2
 8018552:	bd10      	pop	{r4, pc}
 8018554:	7fdfffff 	.word	0x7fdfffff
 8018558:	7ff00000 	.word	0x7ff00000

0801855c <cosf>:
 801855c:	ee10 3a10 	vmov	r3, s0
 8018560:	b507      	push	{r0, r1, r2, lr}
 8018562:	4a1c      	ldr	r2, [pc, #112]	; (80185d4 <cosf+0x78>)
 8018564:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018568:	4293      	cmp	r3, r2
 801856a:	dc04      	bgt.n	8018576 <cosf+0x1a>
 801856c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 80185d8 <cosf+0x7c>
 8018570:	f001 feb4 	bl	801a2dc <__kernel_cosf>
 8018574:	e004      	b.n	8018580 <cosf+0x24>
 8018576:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801857a:	db04      	blt.n	8018586 <cosf+0x2a>
 801857c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8018580:	b003      	add	sp, #12
 8018582:	f85d fb04 	ldr.w	pc, [sp], #4
 8018586:	4668      	mov	r0, sp
 8018588:	f001 fd34 	bl	8019ff4 <__ieee754_rem_pio2f>
 801858c:	f000 0003 	and.w	r0, r0, #3
 8018590:	2801      	cmp	r0, #1
 8018592:	d007      	beq.n	80185a4 <cosf+0x48>
 8018594:	2802      	cmp	r0, #2
 8018596:	d00e      	beq.n	80185b6 <cosf+0x5a>
 8018598:	b9a0      	cbnz	r0, 80185c4 <cosf+0x68>
 801859a:	eddd 0a01 	vldr	s1, [sp, #4]
 801859e:	ed9d 0a00 	vldr	s0, [sp]
 80185a2:	e7e5      	b.n	8018570 <cosf+0x14>
 80185a4:	eddd 0a01 	vldr	s1, [sp, #4]
 80185a8:	ed9d 0a00 	vldr	s0, [sp]
 80185ac:	f002 f952 	bl	801a854 <__kernel_sinf>
 80185b0:	eeb1 0a40 	vneg.f32	s0, s0
 80185b4:	e7e4      	b.n	8018580 <cosf+0x24>
 80185b6:	eddd 0a01 	vldr	s1, [sp, #4]
 80185ba:	ed9d 0a00 	vldr	s0, [sp]
 80185be:	f001 fe8d 	bl	801a2dc <__kernel_cosf>
 80185c2:	e7f5      	b.n	80185b0 <cosf+0x54>
 80185c4:	2001      	movs	r0, #1
 80185c6:	eddd 0a01 	vldr	s1, [sp, #4]
 80185ca:	ed9d 0a00 	vldr	s0, [sp]
 80185ce:	f002 f941 	bl	801a854 <__kernel_sinf>
 80185d2:	e7d5      	b.n	8018580 <cosf+0x24>
 80185d4:	3f490fd8 	.word	0x3f490fd8
 80185d8:	00000000 	.word	0x00000000

080185dc <roundf>:
 80185dc:	ee10 0a10 	vmov	r0, s0
 80185e0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80185e4:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 80185e8:	2a16      	cmp	r2, #22
 80185ea:	dc15      	bgt.n	8018618 <roundf+0x3c>
 80185ec:	2a00      	cmp	r2, #0
 80185ee:	da08      	bge.n	8018602 <roundf+0x26>
 80185f0:	3201      	adds	r2, #1
 80185f2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80185f6:	d101      	bne.n	80185fc <roundf+0x20>
 80185f8:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80185fc:	ee00 3a10 	vmov	s0, r3
 8018600:	4770      	bx	lr
 8018602:	4908      	ldr	r1, [pc, #32]	; (8018624 <roundf+0x48>)
 8018604:	4111      	asrs	r1, r2
 8018606:	4208      	tst	r0, r1
 8018608:	d0fa      	beq.n	8018600 <roundf+0x24>
 801860a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801860e:	4113      	asrs	r3, r2
 8018610:	4403      	add	r3, r0
 8018612:	ea23 0301 	bic.w	r3, r3, r1
 8018616:	e7f1      	b.n	80185fc <roundf+0x20>
 8018618:	2a80      	cmp	r2, #128	; 0x80
 801861a:	d1f1      	bne.n	8018600 <roundf+0x24>
 801861c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018620:	4770      	bx	lr
 8018622:	bf00      	nop
 8018624:	007fffff 	.word	0x007fffff

08018628 <sinf>:
 8018628:	ee10 3a10 	vmov	r3, s0
 801862c:	b507      	push	{r0, r1, r2, lr}
 801862e:	4a1d      	ldr	r2, [pc, #116]	; (80186a4 <sinf+0x7c>)
 8018630:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018634:	4293      	cmp	r3, r2
 8018636:	dc05      	bgt.n	8018644 <sinf+0x1c>
 8018638:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80186a8 <sinf+0x80>
 801863c:	2000      	movs	r0, #0
 801863e:	f002 f909 	bl	801a854 <__kernel_sinf>
 8018642:	e004      	b.n	801864e <sinf+0x26>
 8018644:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018648:	db04      	blt.n	8018654 <sinf+0x2c>
 801864a:	ee30 0a40 	vsub.f32	s0, s0, s0
 801864e:	b003      	add	sp, #12
 8018650:	f85d fb04 	ldr.w	pc, [sp], #4
 8018654:	4668      	mov	r0, sp
 8018656:	f001 fccd 	bl	8019ff4 <__ieee754_rem_pio2f>
 801865a:	f000 0003 	and.w	r0, r0, #3
 801865e:	2801      	cmp	r0, #1
 8018660:	d008      	beq.n	8018674 <sinf+0x4c>
 8018662:	2802      	cmp	r0, #2
 8018664:	d00d      	beq.n	8018682 <sinf+0x5a>
 8018666:	b9b0      	cbnz	r0, 8018696 <sinf+0x6e>
 8018668:	2001      	movs	r0, #1
 801866a:	eddd 0a01 	vldr	s1, [sp, #4]
 801866e:	ed9d 0a00 	vldr	s0, [sp]
 8018672:	e7e4      	b.n	801863e <sinf+0x16>
 8018674:	eddd 0a01 	vldr	s1, [sp, #4]
 8018678:	ed9d 0a00 	vldr	s0, [sp]
 801867c:	f001 fe2e 	bl	801a2dc <__kernel_cosf>
 8018680:	e7e5      	b.n	801864e <sinf+0x26>
 8018682:	2001      	movs	r0, #1
 8018684:	eddd 0a01 	vldr	s1, [sp, #4]
 8018688:	ed9d 0a00 	vldr	s0, [sp]
 801868c:	f002 f8e2 	bl	801a854 <__kernel_sinf>
 8018690:	eeb1 0a40 	vneg.f32	s0, s0
 8018694:	e7db      	b.n	801864e <sinf+0x26>
 8018696:	eddd 0a01 	vldr	s1, [sp, #4]
 801869a:	ed9d 0a00 	vldr	s0, [sp]
 801869e:	f001 fe1d 	bl	801a2dc <__kernel_cosf>
 80186a2:	e7f5      	b.n	8018690 <sinf+0x68>
 80186a4:	3f490fd8 	.word	0x3f490fd8
 80186a8:	00000000 	.word	0x00000000

080186ac <tanf>:
 80186ac:	ee10 3a10 	vmov	r3, s0
 80186b0:	b507      	push	{r0, r1, r2, lr}
 80186b2:	4a10      	ldr	r2, [pc, #64]	; (80186f4 <tanf+0x48>)
 80186b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80186b8:	4293      	cmp	r3, r2
 80186ba:	dc05      	bgt.n	80186c8 <tanf+0x1c>
 80186bc:	eddf 0a0e 	vldr	s1, [pc, #56]	; 80186f8 <tanf+0x4c>
 80186c0:	2001      	movs	r0, #1
 80186c2:	f002 f90f 	bl	801a8e4 <__kernel_tanf>
 80186c6:	e004      	b.n	80186d2 <tanf+0x26>
 80186c8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80186cc:	db04      	blt.n	80186d8 <tanf+0x2c>
 80186ce:	ee30 0a40 	vsub.f32	s0, s0, s0
 80186d2:	b003      	add	sp, #12
 80186d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80186d8:	4668      	mov	r0, sp
 80186da:	f001 fc8b 	bl	8019ff4 <__ieee754_rem_pio2f>
 80186de:	0040      	lsls	r0, r0, #1
 80186e0:	f000 0002 	and.w	r0, r0, #2
 80186e4:	f1c0 0001 	rsb	r0, r0, #1
 80186e8:	eddd 0a01 	vldr	s1, [sp, #4]
 80186ec:	ed9d 0a00 	vldr	s0, [sp]
 80186f0:	e7e7      	b.n	80186c2 <tanf+0x16>
 80186f2:	bf00      	nop
 80186f4:	3f490fda 	.word	0x3f490fda
 80186f8:	00000000 	.word	0x00000000

080186fc <asin>:
 80186fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80186fe:	ed2d 8b02 	vpush	{d8}
 8018702:	4e26      	ldr	r6, [pc, #152]	; (801879c <asin+0xa0>)
 8018704:	b08b      	sub	sp, #44	; 0x2c
 8018706:	ec55 4b10 	vmov	r4, r5, d0
 801870a:	f000 facd 	bl	8018ca8 <__ieee754_asin>
 801870e:	f996 3000 	ldrsb.w	r3, [r6]
 8018712:	eeb0 8a40 	vmov.f32	s16, s0
 8018716:	eef0 8a60 	vmov.f32	s17, s1
 801871a:	3301      	adds	r3, #1
 801871c:	d036      	beq.n	801878c <asin+0x90>
 801871e:	4622      	mov	r2, r4
 8018720:	462b      	mov	r3, r5
 8018722:	4620      	mov	r0, r4
 8018724:	4629      	mov	r1, r5
 8018726:	f7e8 fa05 	bl	8000b34 <__aeabi_dcmpun>
 801872a:	4607      	mov	r7, r0
 801872c:	bb70      	cbnz	r0, 801878c <asin+0x90>
 801872e:	ec45 4b10 	vmov	d0, r4, r5
 8018732:	f002 fb65 	bl	801ae00 <fabs>
 8018736:	2200      	movs	r2, #0
 8018738:	4b19      	ldr	r3, [pc, #100]	; (80187a0 <asin+0xa4>)
 801873a:	ec51 0b10 	vmov	r0, r1, d0
 801873e:	f7e8 f9ef 	bl	8000b20 <__aeabi_dcmpgt>
 8018742:	b318      	cbz	r0, 801878c <asin+0x90>
 8018744:	2301      	movs	r3, #1
 8018746:	9300      	str	r3, [sp, #0]
 8018748:	4816      	ldr	r0, [pc, #88]	; (80187a4 <asin+0xa8>)
 801874a:	4b17      	ldr	r3, [pc, #92]	; (80187a8 <asin+0xac>)
 801874c:	9301      	str	r3, [sp, #4]
 801874e:	9708      	str	r7, [sp, #32]
 8018750:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8018754:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8018758:	f002 fb66 	bl	801ae28 <nan>
 801875c:	f996 3000 	ldrsb.w	r3, [r6]
 8018760:	2b02      	cmp	r3, #2
 8018762:	ed8d 0b06 	vstr	d0, [sp, #24]
 8018766:	d104      	bne.n	8018772 <asin+0x76>
 8018768:	f002 fd2c 	bl	801b1c4 <__errno>
 801876c:	2321      	movs	r3, #33	; 0x21
 801876e:	6003      	str	r3, [r0, #0]
 8018770:	e004      	b.n	801877c <asin+0x80>
 8018772:	4668      	mov	r0, sp
 8018774:	f002 fb53 	bl	801ae1e <matherr>
 8018778:	2800      	cmp	r0, #0
 801877a:	d0f5      	beq.n	8018768 <asin+0x6c>
 801877c:	9b08      	ldr	r3, [sp, #32]
 801877e:	b11b      	cbz	r3, 8018788 <asin+0x8c>
 8018780:	f002 fd20 	bl	801b1c4 <__errno>
 8018784:	9b08      	ldr	r3, [sp, #32]
 8018786:	6003      	str	r3, [r0, #0]
 8018788:	ed9d 8b06 	vldr	d8, [sp, #24]
 801878c:	eeb0 0a48 	vmov.f32	s0, s16
 8018790:	eef0 0a68 	vmov.f32	s1, s17
 8018794:	b00b      	add	sp, #44	; 0x2c
 8018796:	ecbd 8b02 	vpop	{d8}
 801879a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801879c:	2000147c 	.word	0x2000147c
 80187a0:	3ff00000 	.word	0x3ff00000
 80187a4:	0801ee91 	.word	0x0801ee91
 80187a8:	0801e87c 	.word	0x0801e87c

080187ac <atan2>:
 80187ac:	f000 bc88 	b.w	80190c0 <__ieee754_atan2>

080187b0 <pow>:
 80187b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187b4:	ed2d 8b04 	vpush	{d8-d9}
 80187b8:	b08d      	sub	sp, #52	; 0x34
 80187ba:	ec57 6b10 	vmov	r6, r7, d0
 80187be:	ec55 4b11 	vmov	r4, r5, d1
 80187c2:	f000 fd59 	bl	8019278 <__ieee754_pow>
 80187c6:	4bae      	ldr	r3, [pc, #696]	; (8018a80 <pow+0x2d0>)
 80187c8:	eeb0 8a40 	vmov.f32	s16, s0
 80187cc:	eef0 8a60 	vmov.f32	s17, s1
 80187d0:	f993 9000 	ldrsb.w	r9, [r3]
 80187d4:	f1b9 3fff 	cmp.w	r9, #4294967295
 80187d8:	4698      	mov	r8, r3
 80187da:	d05f      	beq.n	801889c <pow+0xec>
 80187dc:	4622      	mov	r2, r4
 80187de:	462b      	mov	r3, r5
 80187e0:	4620      	mov	r0, r4
 80187e2:	4629      	mov	r1, r5
 80187e4:	f7e8 f9a6 	bl	8000b34 <__aeabi_dcmpun>
 80187e8:	4683      	mov	fp, r0
 80187ea:	2800      	cmp	r0, #0
 80187ec:	d156      	bne.n	801889c <pow+0xec>
 80187ee:	4632      	mov	r2, r6
 80187f0:	463b      	mov	r3, r7
 80187f2:	4630      	mov	r0, r6
 80187f4:	4639      	mov	r1, r7
 80187f6:	f7e8 f99d 	bl	8000b34 <__aeabi_dcmpun>
 80187fa:	9001      	str	r0, [sp, #4]
 80187fc:	b1e8      	cbz	r0, 801883a <pow+0x8a>
 80187fe:	2200      	movs	r2, #0
 8018800:	2300      	movs	r3, #0
 8018802:	4620      	mov	r0, r4
 8018804:	4629      	mov	r1, r5
 8018806:	f7e8 f963 	bl	8000ad0 <__aeabi_dcmpeq>
 801880a:	2800      	cmp	r0, #0
 801880c:	d046      	beq.n	801889c <pow+0xec>
 801880e:	2301      	movs	r3, #1
 8018810:	9302      	str	r3, [sp, #8]
 8018812:	4b9c      	ldr	r3, [pc, #624]	; (8018a84 <pow+0x2d4>)
 8018814:	9303      	str	r3, [sp, #12]
 8018816:	4b9c      	ldr	r3, [pc, #624]	; (8018a88 <pow+0x2d8>)
 8018818:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801881c:	2200      	movs	r2, #0
 801881e:	f1b9 0f02 	cmp.w	r9, #2
 8018822:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8018826:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801882a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801882e:	d033      	beq.n	8018898 <pow+0xe8>
 8018830:	a802      	add	r0, sp, #8
 8018832:	f002 faf4 	bl	801ae1e <matherr>
 8018836:	bb48      	cbnz	r0, 801888c <pow+0xdc>
 8018838:	e05e      	b.n	80188f8 <pow+0x148>
 801883a:	f04f 0a00 	mov.w	sl, #0
 801883e:	f04f 0b00 	mov.w	fp, #0
 8018842:	4652      	mov	r2, sl
 8018844:	465b      	mov	r3, fp
 8018846:	4630      	mov	r0, r6
 8018848:	4639      	mov	r1, r7
 801884a:	f7e8 f941 	bl	8000ad0 <__aeabi_dcmpeq>
 801884e:	ec4b ab19 	vmov	d9, sl, fp
 8018852:	2800      	cmp	r0, #0
 8018854:	d055      	beq.n	8018902 <pow+0x152>
 8018856:	4652      	mov	r2, sl
 8018858:	465b      	mov	r3, fp
 801885a:	4620      	mov	r0, r4
 801885c:	4629      	mov	r1, r5
 801885e:	f7e8 f937 	bl	8000ad0 <__aeabi_dcmpeq>
 8018862:	4680      	mov	r8, r0
 8018864:	b318      	cbz	r0, 80188ae <pow+0xfe>
 8018866:	2301      	movs	r3, #1
 8018868:	9302      	str	r3, [sp, #8]
 801886a:	4b86      	ldr	r3, [pc, #536]	; (8018a84 <pow+0x2d4>)
 801886c:	9303      	str	r3, [sp, #12]
 801886e:	9b01      	ldr	r3, [sp, #4]
 8018870:	930a      	str	r3, [sp, #40]	; 0x28
 8018872:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8018876:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801887a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801887e:	f1b9 0f00 	cmp.w	r9, #0
 8018882:	d0d5      	beq.n	8018830 <pow+0x80>
 8018884:	4b80      	ldr	r3, [pc, #512]	; (8018a88 <pow+0x2d8>)
 8018886:	2200      	movs	r2, #0
 8018888:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801888c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801888e:	b11b      	cbz	r3, 8018898 <pow+0xe8>
 8018890:	f002 fc98 	bl	801b1c4 <__errno>
 8018894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018896:	6003      	str	r3, [r0, #0]
 8018898:	ed9d 8b08 	vldr	d8, [sp, #32]
 801889c:	eeb0 0a48 	vmov.f32	s0, s16
 80188a0:	eef0 0a68 	vmov.f32	s1, s17
 80188a4:	b00d      	add	sp, #52	; 0x34
 80188a6:	ecbd 8b04 	vpop	{d8-d9}
 80188aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188ae:	ec45 4b10 	vmov	d0, r4, r5
 80188b2:	f002 faac 	bl	801ae0e <finite>
 80188b6:	2800      	cmp	r0, #0
 80188b8:	d0f0      	beq.n	801889c <pow+0xec>
 80188ba:	4652      	mov	r2, sl
 80188bc:	465b      	mov	r3, fp
 80188be:	4620      	mov	r0, r4
 80188c0:	4629      	mov	r1, r5
 80188c2:	f7e8 f90f 	bl	8000ae4 <__aeabi_dcmplt>
 80188c6:	2800      	cmp	r0, #0
 80188c8:	d0e8      	beq.n	801889c <pow+0xec>
 80188ca:	2301      	movs	r3, #1
 80188cc:	9302      	str	r3, [sp, #8]
 80188ce:	4b6d      	ldr	r3, [pc, #436]	; (8018a84 <pow+0x2d4>)
 80188d0:	9303      	str	r3, [sp, #12]
 80188d2:	4b6b      	ldr	r3, [pc, #428]	; (8018a80 <pow+0x2d0>)
 80188d4:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80188d8:	f993 3000 	ldrsb.w	r3, [r3]
 80188dc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80188e0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80188e4:	b913      	cbnz	r3, 80188ec <pow+0x13c>
 80188e6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80188ea:	e7a1      	b.n	8018830 <pow+0x80>
 80188ec:	4967      	ldr	r1, [pc, #412]	; (8018a8c <pow+0x2dc>)
 80188ee:	2000      	movs	r0, #0
 80188f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80188f4:	2b02      	cmp	r3, #2
 80188f6:	d19b      	bne.n	8018830 <pow+0x80>
 80188f8:	f002 fc64 	bl	801b1c4 <__errno>
 80188fc:	2321      	movs	r3, #33	; 0x21
 80188fe:	6003      	str	r3, [r0, #0]
 8018900:	e7c4      	b.n	801888c <pow+0xdc>
 8018902:	eeb0 0a48 	vmov.f32	s0, s16
 8018906:	eef0 0a68 	vmov.f32	s1, s17
 801890a:	f002 fa80 	bl	801ae0e <finite>
 801890e:	9001      	str	r0, [sp, #4]
 8018910:	2800      	cmp	r0, #0
 8018912:	f040 808a 	bne.w	8018a2a <pow+0x27a>
 8018916:	ec47 6b10 	vmov	d0, r6, r7
 801891a:	f002 fa78 	bl	801ae0e <finite>
 801891e:	2800      	cmp	r0, #0
 8018920:	f000 8083 	beq.w	8018a2a <pow+0x27a>
 8018924:	ec45 4b10 	vmov	d0, r4, r5
 8018928:	f002 fa71 	bl	801ae0e <finite>
 801892c:	2800      	cmp	r0, #0
 801892e:	d07c      	beq.n	8018a2a <pow+0x27a>
 8018930:	ec53 2b18 	vmov	r2, r3, d8
 8018934:	ee18 0a10 	vmov	r0, s16
 8018938:	4619      	mov	r1, r3
 801893a:	f7e8 f8fb 	bl	8000b34 <__aeabi_dcmpun>
 801893e:	f998 9000 	ldrsb.w	r9, [r8]
 8018942:	4b50      	ldr	r3, [pc, #320]	; (8018a84 <pow+0x2d4>)
 8018944:	b1b0      	cbz	r0, 8018974 <pow+0x1c4>
 8018946:	2201      	movs	r2, #1
 8018948:	9303      	str	r3, [sp, #12]
 801894a:	9b01      	ldr	r3, [sp, #4]
 801894c:	9202      	str	r2, [sp, #8]
 801894e:	930a      	str	r3, [sp, #40]	; 0x28
 8018950:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8018954:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8018958:	f1b9 0f00 	cmp.w	r9, #0
 801895c:	d0c3      	beq.n	80188e6 <pow+0x136>
 801895e:	4652      	mov	r2, sl
 8018960:	465b      	mov	r3, fp
 8018962:	4650      	mov	r0, sl
 8018964:	4659      	mov	r1, fp
 8018966:	f7e7 ff75 	bl	8000854 <__aeabi_ddiv>
 801896a:	f1b9 0f02 	cmp.w	r9, #2
 801896e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8018972:	e7c0      	b.n	80188f6 <pow+0x146>
 8018974:	2203      	movs	r2, #3
 8018976:	9202      	str	r2, [sp, #8]
 8018978:	9303      	str	r3, [sp, #12]
 801897a:	900a      	str	r0, [sp, #40]	; 0x28
 801897c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8018980:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8018984:	f1b9 0f00 	cmp.w	r9, #0
 8018988:	d12c      	bne.n	80189e4 <pow+0x234>
 801898a:	4b41      	ldr	r3, [pc, #260]	; (8018a90 <pow+0x2e0>)
 801898c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8018990:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8018994:	4630      	mov	r0, r6
 8018996:	4652      	mov	r2, sl
 8018998:	465b      	mov	r3, fp
 801899a:	4639      	mov	r1, r7
 801899c:	f7e8 f8a2 	bl	8000ae4 <__aeabi_dcmplt>
 80189a0:	2800      	cmp	r0, #0
 80189a2:	d066      	beq.n	8018a72 <pow+0x2c2>
 80189a4:	2200      	movs	r2, #0
 80189a6:	4b3b      	ldr	r3, [pc, #236]	; (8018a94 <pow+0x2e4>)
 80189a8:	4620      	mov	r0, r4
 80189aa:	4629      	mov	r1, r5
 80189ac:	f7e7 fe28 	bl	8000600 <__aeabi_dmul>
 80189b0:	4604      	mov	r4, r0
 80189b2:	460d      	mov	r5, r1
 80189b4:	ec45 4b10 	vmov	d0, r4, r5
 80189b8:	f002 fa3e 	bl	801ae38 <rint>
 80189bc:	4620      	mov	r0, r4
 80189be:	ec53 2b10 	vmov	r2, r3, d0
 80189c2:	4629      	mov	r1, r5
 80189c4:	f7e8 f884 	bl	8000ad0 <__aeabi_dcmpeq>
 80189c8:	b920      	cbnz	r0, 80189d4 <pow+0x224>
 80189ca:	4b33      	ldr	r3, [pc, #204]	; (8018a98 <pow+0x2e8>)
 80189cc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80189d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80189d4:	f998 3000 	ldrsb.w	r3, [r8]
 80189d8:	2b02      	cmp	r3, #2
 80189da:	d14a      	bne.n	8018a72 <pow+0x2c2>
 80189dc:	f002 fbf2 	bl	801b1c4 <__errno>
 80189e0:	2322      	movs	r3, #34	; 0x22
 80189e2:	e78c      	b.n	80188fe <pow+0x14e>
 80189e4:	4b2d      	ldr	r3, [pc, #180]	; (8018a9c <pow+0x2ec>)
 80189e6:	2200      	movs	r2, #0
 80189e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80189ec:	4630      	mov	r0, r6
 80189ee:	4652      	mov	r2, sl
 80189f0:	465b      	mov	r3, fp
 80189f2:	4639      	mov	r1, r7
 80189f4:	f7e8 f876 	bl	8000ae4 <__aeabi_dcmplt>
 80189f8:	2800      	cmp	r0, #0
 80189fa:	d0eb      	beq.n	80189d4 <pow+0x224>
 80189fc:	2200      	movs	r2, #0
 80189fe:	4b25      	ldr	r3, [pc, #148]	; (8018a94 <pow+0x2e4>)
 8018a00:	4620      	mov	r0, r4
 8018a02:	4629      	mov	r1, r5
 8018a04:	f7e7 fdfc 	bl	8000600 <__aeabi_dmul>
 8018a08:	4604      	mov	r4, r0
 8018a0a:	460d      	mov	r5, r1
 8018a0c:	ec45 4b10 	vmov	d0, r4, r5
 8018a10:	f002 fa12 	bl	801ae38 <rint>
 8018a14:	4620      	mov	r0, r4
 8018a16:	ec53 2b10 	vmov	r2, r3, d0
 8018a1a:	4629      	mov	r1, r5
 8018a1c:	f7e8 f858 	bl	8000ad0 <__aeabi_dcmpeq>
 8018a20:	2800      	cmp	r0, #0
 8018a22:	d1d7      	bne.n	80189d4 <pow+0x224>
 8018a24:	2200      	movs	r2, #0
 8018a26:	4b19      	ldr	r3, [pc, #100]	; (8018a8c <pow+0x2dc>)
 8018a28:	e7d2      	b.n	80189d0 <pow+0x220>
 8018a2a:	2200      	movs	r2, #0
 8018a2c:	2300      	movs	r3, #0
 8018a2e:	ec51 0b18 	vmov	r0, r1, d8
 8018a32:	f7e8 f84d 	bl	8000ad0 <__aeabi_dcmpeq>
 8018a36:	2800      	cmp	r0, #0
 8018a38:	f43f af30 	beq.w	801889c <pow+0xec>
 8018a3c:	ec47 6b10 	vmov	d0, r6, r7
 8018a40:	f002 f9e5 	bl	801ae0e <finite>
 8018a44:	2800      	cmp	r0, #0
 8018a46:	f43f af29 	beq.w	801889c <pow+0xec>
 8018a4a:	ec45 4b10 	vmov	d0, r4, r5
 8018a4e:	f002 f9de 	bl	801ae0e <finite>
 8018a52:	2800      	cmp	r0, #0
 8018a54:	f43f af22 	beq.w	801889c <pow+0xec>
 8018a58:	2304      	movs	r3, #4
 8018a5a:	9302      	str	r3, [sp, #8]
 8018a5c:	4b09      	ldr	r3, [pc, #36]	; (8018a84 <pow+0x2d4>)
 8018a5e:	9303      	str	r3, [sp, #12]
 8018a60:	2300      	movs	r3, #0
 8018a62:	930a      	str	r3, [sp, #40]	; 0x28
 8018a64:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8018a68:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8018a6c:	ed8d 9b08 	vstr	d9, [sp, #32]
 8018a70:	e7b0      	b.n	80189d4 <pow+0x224>
 8018a72:	a802      	add	r0, sp, #8
 8018a74:	f002 f9d3 	bl	801ae1e <matherr>
 8018a78:	2800      	cmp	r0, #0
 8018a7a:	f47f af07 	bne.w	801888c <pow+0xdc>
 8018a7e:	e7ad      	b.n	80189dc <pow+0x22c>
 8018a80:	2000147c 	.word	0x2000147c
 8018a84:	0801e881 	.word	0x0801e881
 8018a88:	3ff00000 	.word	0x3ff00000
 8018a8c:	fff00000 	.word	0xfff00000
 8018a90:	47efffff 	.word	0x47efffff
 8018a94:	3fe00000 	.word	0x3fe00000
 8018a98:	c7efffff 	.word	0xc7efffff
 8018a9c:	7ff00000 	.word	0x7ff00000

08018aa0 <sqrt>:
 8018aa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018aa4:	ed2d 8b02 	vpush	{d8}
 8018aa8:	b08b      	sub	sp, #44	; 0x2c
 8018aaa:	ec55 4b10 	vmov	r4, r5, d0
 8018aae:	f001 f8f5 	bl	8019c9c <__ieee754_sqrt>
 8018ab2:	4b26      	ldr	r3, [pc, #152]	; (8018b4c <sqrt+0xac>)
 8018ab4:	eeb0 8a40 	vmov.f32	s16, s0
 8018ab8:	eef0 8a60 	vmov.f32	s17, s1
 8018abc:	f993 6000 	ldrsb.w	r6, [r3]
 8018ac0:	1c73      	adds	r3, r6, #1
 8018ac2:	d02a      	beq.n	8018b1a <sqrt+0x7a>
 8018ac4:	4622      	mov	r2, r4
 8018ac6:	462b      	mov	r3, r5
 8018ac8:	4620      	mov	r0, r4
 8018aca:	4629      	mov	r1, r5
 8018acc:	f7e8 f832 	bl	8000b34 <__aeabi_dcmpun>
 8018ad0:	4607      	mov	r7, r0
 8018ad2:	bb10      	cbnz	r0, 8018b1a <sqrt+0x7a>
 8018ad4:	f04f 0800 	mov.w	r8, #0
 8018ad8:	f04f 0900 	mov.w	r9, #0
 8018adc:	4642      	mov	r2, r8
 8018ade:	464b      	mov	r3, r9
 8018ae0:	4620      	mov	r0, r4
 8018ae2:	4629      	mov	r1, r5
 8018ae4:	f7e7 fffe 	bl	8000ae4 <__aeabi_dcmplt>
 8018ae8:	b1b8      	cbz	r0, 8018b1a <sqrt+0x7a>
 8018aea:	2301      	movs	r3, #1
 8018aec:	9300      	str	r3, [sp, #0]
 8018aee:	4b18      	ldr	r3, [pc, #96]	; (8018b50 <sqrt+0xb0>)
 8018af0:	9301      	str	r3, [sp, #4]
 8018af2:	9708      	str	r7, [sp, #32]
 8018af4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8018af8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8018afc:	b9b6      	cbnz	r6, 8018b2c <sqrt+0x8c>
 8018afe:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8018b02:	4668      	mov	r0, sp
 8018b04:	f002 f98b 	bl	801ae1e <matherr>
 8018b08:	b1d0      	cbz	r0, 8018b40 <sqrt+0xa0>
 8018b0a:	9b08      	ldr	r3, [sp, #32]
 8018b0c:	b11b      	cbz	r3, 8018b16 <sqrt+0x76>
 8018b0e:	f002 fb59 	bl	801b1c4 <__errno>
 8018b12:	9b08      	ldr	r3, [sp, #32]
 8018b14:	6003      	str	r3, [r0, #0]
 8018b16:	ed9d 8b06 	vldr	d8, [sp, #24]
 8018b1a:	eeb0 0a48 	vmov.f32	s0, s16
 8018b1e:	eef0 0a68 	vmov.f32	s1, s17
 8018b22:	b00b      	add	sp, #44	; 0x2c
 8018b24:	ecbd 8b02 	vpop	{d8}
 8018b28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018b2c:	4642      	mov	r2, r8
 8018b2e:	464b      	mov	r3, r9
 8018b30:	4640      	mov	r0, r8
 8018b32:	4649      	mov	r1, r9
 8018b34:	f7e7 fe8e 	bl	8000854 <__aeabi_ddiv>
 8018b38:	2e02      	cmp	r6, #2
 8018b3a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018b3e:	d1e0      	bne.n	8018b02 <sqrt+0x62>
 8018b40:	f002 fb40 	bl	801b1c4 <__errno>
 8018b44:	2321      	movs	r3, #33	; 0x21
 8018b46:	6003      	str	r3, [r0, #0]
 8018b48:	e7df      	b.n	8018b0a <sqrt+0x6a>
 8018b4a:	bf00      	nop
 8018b4c:	2000147c 	.word	0x2000147c
 8018b50:	0801e885 	.word	0x0801e885

08018b54 <acosf>:
 8018b54:	b510      	push	{r4, lr}
 8018b56:	ed2d 8b02 	vpush	{d8}
 8018b5a:	4c27      	ldr	r4, [pc, #156]	; (8018bf8 <acosf+0xa4>)
 8018b5c:	b08a      	sub	sp, #40	; 0x28
 8018b5e:	eeb0 8a40 	vmov.f32	s16, s0
 8018b62:	f001 f94b 	bl	8019dfc <__ieee754_acosf>
 8018b66:	f994 3000 	ldrsb.w	r3, [r4]
 8018b6a:	3301      	adds	r3, #1
 8018b6c:	eef0 8a40 	vmov.f32	s17, s0
 8018b70:	d03c      	beq.n	8018bec <acosf+0x98>
 8018b72:	eeb4 8a48 	vcmp.f32	s16, s16
 8018b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b7a:	d637      	bvs.n	8018bec <acosf+0x98>
 8018b7c:	eeb0 0a48 	vmov.f32	s0, s16
 8018b80:	f002 fa5c 	bl	801b03c <fabsf>
 8018b84:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018b88:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8018b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b90:	dd2c      	ble.n	8018bec <acosf+0x98>
 8018b92:	2301      	movs	r3, #1
 8018b94:	9300      	str	r3, [sp, #0]
 8018b96:	4b19      	ldr	r3, [pc, #100]	; (8018bfc <acosf+0xa8>)
 8018b98:	9301      	str	r3, [sp, #4]
 8018b9a:	ee18 0a10 	vmov	r0, s16
 8018b9e:	2300      	movs	r3, #0
 8018ba0:	9308      	str	r3, [sp, #32]
 8018ba2:	f7e7 fcd9 	bl	8000558 <__aeabi_f2d>
 8018ba6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018baa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018bae:	4814      	ldr	r0, [pc, #80]	; (8018c00 <acosf+0xac>)
 8018bb0:	f002 f93a 	bl	801ae28 <nan>
 8018bb4:	f994 3000 	ldrsb.w	r3, [r4]
 8018bb8:	2b02      	cmp	r3, #2
 8018bba:	ed8d 0b06 	vstr	d0, [sp, #24]
 8018bbe:	d104      	bne.n	8018bca <acosf+0x76>
 8018bc0:	f002 fb00 	bl	801b1c4 <__errno>
 8018bc4:	2321      	movs	r3, #33	; 0x21
 8018bc6:	6003      	str	r3, [r0, #0]
 8018bc8:	e004      	b.n	8018bd4 <acosf+0x80>
 8018bca:	4668      	mov	r0, sp
 8018bcc:	f002 f927 	bl	801ae1e <matherr>
 8018bd0:	2800      	cmp	r0, #0
 8018bd2:	d0f5      	beq.n	8018bc0 <acosf+0x6c>
 8018bd4:	9b08      	ldr	r3, [sp, #32]
 8018bd6:	b11b      	cbz	r3, 8018be0 <acosf+0x8c>
 8018bd8:	f002 faf4 	bl	801b1c4 <__errno>
 8018bdc:	9b08      	ldr	r3, [sp, #32]
 8018bde:	6003      	str	r3, [r0, #0]
 8018be0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018be4:	f7e8 f804 	bl	8000bf0 <__aeabi_d2f>
 8018be8:	ee08 0a90 	vmov	s17, r0
 8018bec:	eeb0 0a68 	vmov.f32	s0, s17
 8018bf0:	b00a      	add	sp, #40	; 0x28
 8018bf2:	ecbd 8b02 	vpop	{d8}
 8018bf6:	bd10      	pop	{r4, pc}
 8018bf8:	2000147c 	.word	0x2000147c
 8018bfc:	0801e88a 	.word	0x0801e88a
 8018c00:	0801ee91 	.word	0x0801ee91

08018c04 <sqrtf>:
 8018c04:	b510      	push	{r4, lr}
 8018c06:	ed2d 8b02 	vpush	{d8}
 8018c0a:	b08a      	sub	sp, #40	; 0x28
 8018c0c:	eeb0 8a40 	vmov.f32	s16, s0
 8018c10:	f001 fb1c 	bl	801a24c <__ieee754_sqrtf>
 8018c14:	4b21      	ldr	r3, [pc, #132]	; (8018c9c <sqrtf+0x98>)
 8018c16:	f993 4000 	ldrsb.w	r4, [r3]
 8018c1a:	1c63      	adds	r3, r4, #1
 8018c1c:	d02c      	beq.n	8018c78 <sqrtf+0x74>
 8018c1e:	eeb4 8a48 	vcmp.f32	s16, s16
 8018c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c26:	d627      	bvs.n	8018c78 <sqrtf+0x74>
 8018c28:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c30:	d522      	bpl.n	8018c78 <sqrtf+0x74>
 8018c32:	2301      	movs	r3, #1
 8018c34:	9300      	str	r3, [sp, #0]
 8018c36:	4b1a      	ldr	r3, [pc, #104]	; (8018ca0 <sqrtf+0x9c>)
 8018c38:	9301      	str	r3, [sp, #4]
 8018c3a:	ee18 0a10 	vmov	r0, s16
 8018c3e:	2300      	movs	r3, #0
 8018c40:	9308      	str	r3, [sp, #32]
 8018c42:	f7e7 fc89 	bl	8000558 <__aeabi_f2d>
 8018c46:	2200      	movs	r2, #0
 8018c48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018c4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018c50:	2300      	movs	r3, #0
 8018c52:	b9ac      	cbnz	r4, 8018c80 <sqrtf+0x7c>
 8018c54:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018c58:	4668      	mov	r0, sp
 8018c5a:	f002 f8e0 	bl	801ae1e <matherr>
 8018c5e:	b1b8      	cbz	r0, 8018c90 <sqrtf+0x8c>
 8018c60:	9b08      	ldr	r3, [sp, #32]
 8018c62:	b11b      	cbz	r3, 8018c6c <sqrtf+0x68>
 8018c64:	f002 faae 	bl	801b1c4 <__errno>
 8018c68:	9b08      	ldr	r3, [sp, #32]
 8018c6a:	6003      	str	r3, [r0, #0]
 8018c6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018c70:	f7e7 ffbe 	bl	8000bf0 <__aeabi_d2f>
 8018c74:	ee00 0a10 	vmov	s0, r0
 8018c78:	b00a      	add	sp, #40	; 0x28
 8018c7a:	ecbd 8b02 	vpop	{d8}
 8018c7e:	bd10      	pop	{r4, pc}
 8018c80:	4610      	mov	r0, r2
 8018c82:	4619      	mov	r1, r3
 8018c84:	f7e7 fde6 	bl	8000854 <__aeabi_ddiv>
 8018c88:	2c02      	cmp	r4, #2
 8018c8a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018c8e:	d1e3      	bne.n	8018c58 <sqrtf+0x54>
 8018c90:	f002 fa98 	bl	801b1c4 <__errno>
 8018c94:	2321      	movs	r3, #33	; 0x21
 8018c96:	6003      	str	r3, [r0, #0]
 8018c98:	e7e2      	b.n	8018c60 <sqrtf+0x5c>
 8018c9a:	bf00      	nop
 8018c9c:	2000147c 	.word	0x2000147c
 8018ca0:	0801e890 	.word	0x0801e890
 8018ca4:	00000000 	.word	0x00000000

08018ca8 <__ieee754_asin>:
 8018ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cac:	ec55 4b10 	vmov	r4, r5, d0
 8018cb0:	4bcb      	ldr	r3, [pc, #812]	; (8018fe0 <__ieee754_asin+0x338>)
 8018cb2:	b085      	sub	sp, #20
 8018cb4:	f025 4b00 	bic.w	fp, r5, #2147483648	; 0x80000000
 8018cb8:	459b      	cmp	fp, r3
 8018cba:	9501      	str	r5, [sp, #4]
 8018cbc:	dd32      	ble.n	8018d24 <__ieee754_asin+0x7c>
 8018cbe:	ee10 3a10 	vmov	r3, s0
 8018cc2:	f10b 4b40 	add.w	fp, fp, #3221225472	; 0xc0000000
 8018cc6:	f50b 1b80 	add.w	fp, fp, #1048576	; 0x100000
 8018cca:	ea5b 0303 	orrs.w	r3, fp, r3
 8018cce:	d117      	bne.n	8018d00 <__ieee754_asin+0x58>
 8018cd0:	a3a9      	add	r3, pc, #676	; (adr r3, 8018f78 <__ieee754_asin+0x2d0>)
 8018cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018cd6:	ee10 0a10 	vmov	r0, s0
 8018cda:	4629      	mov	r1, r5
 8018cdc:	f7e7 fc90 	bl	8000600 <__aeabi_dmul>
 8018ce0:	a3a7      	add	r3, pc, #668	; (adr r3, 8018f80 <__ieee754_asin+0x2d8>)
 8018ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ce6:	4606      	mov	r6, r0
 8018ce8:	460f      	mov	r7, r1
 8018cea:	4620      	mov	r0, r4
 8018cec:	4629      	mov	r1, r5
 8018cee:	f7e7 fc87 	bl	8000600 <__aeabi_dmul>
 8018cf2:	4602      	mov	r2, r0
 8018cf4:	460b      	mov	r3, r1
 8018cf6:	4630      	mov	r0, r6
 8018cf8:	4639      	mov	r1, r7
 8018cfa:	f7e7 facf 	bl	800029c <__adddf3>
 8018cfe:	e00a      	b.n	8018d16 <__ieee754_asin+0x6e>
 8018d00:	ee10 2a10 	vmov	r2, s0
 8018d04:	462b      	mov	r3, r5
 8018d06:	4620      	mov	r0, r4
 8018d08:	4629      	mov	r1, r5
 8018d0a:	f7e7 fac5 	bl	8000298 <__aeabi_dsub>
 8018d0e:	4602      	mov	r2, r0
 8018d10:	460b      	mov	r3, r1
 8018d12:	f7e7 fd9f 	bl	8000854 <__aeabi_ddiv>
 8018d16:	4604      	mov	r4, r0
 8018d18:	460d      	mov	r5, r1
 8018d1a:	ec45 4b10 	vmov	d0, r4, r5
 8018d1e:	b005      	add	sp, #20
 8018d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d24:	4baf      	ldr	r3, [pc, #700]	; (8018fe4 <__ieee754_asin+0x33c>)
 8018d26:	459b      	cmp	fp, r3
 8018d28:	dc11      	bgt.n	8018d4e <__ieee754_asin+0xa6>
 8018d2a:	f1bb 5f79 	cmp.w	fp, #1044381696	; 0x3e400000
 8018d2e:	f280 80b0 	bge.w	8018e92 <__ieee754_asin+0x1ea>
 8018d32:	a395      	add	r3, pc, #596	; (adr r3, 8018f88 <__ieee754_asin+0x2e0>)
 8018d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d38:	ee10 0a10 	vmov	r0, s0
 8018d3c:	4629      	mov	r1, r5
 8018d3e:	f7e7 faad 	bl	800029c <__adddf3>
 8018d42:	2200      	movs	r2, #0
 8018d44:	4ba8      	ldr	r3, [pc, #672]	; (8018fe8 <__ieee754_asin+0x340>)
 8018d46:	f7e7 feeb 	bl	8000b20 <__aeabi_dcmpgt>
 8018d4a:	2800      	cmp	r0, #0
 8018d4c:	d1e5      	bne.n	8018d1a <__ieee754_asin+0x72>
 8018d4e:	ec45 4b10 	vmov	d0, r4, r5
 8018d52:	f002 f855 	bl	801ae00 <fabs>
 8018d56:	2000      	movs	r0, #0
 8018d58:	ec53 2b10 	vmov	r2, r3, d0
 8018d5c:	49a2      	ldr	r1, [pc, #648]	; (8018fe8 <__ieee754_asin+0x340>)
 8018d5e:	f7e7 fa9b 	bl	8000298 <__aeabi_dsub>
 8018d62:	2200      	movs	r2, #0
 8018d64:	4ba1      	ldr	r3, [pc, #644]	; (8018fec <__ieee754_asin+0x344>)
 8018d66:	f7e7 fc4b 	bl	8000600 <__aeabi_dmul>
 8018d6a:	a389      	add	r3, pc, #548	; (adr r3, 8018f90 <__ieee754_asin+0x2e8>)
 8018d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d70:	4604      	mov	r4, r0
 8018d72:	460d      	mov	r5, r1
 8018d74:	f7e7 fc44 	bl	8000600 <__aeabi_dmul>
 8018d78:	a387      	add	r3, pc, #540	; (adr r3, 8018f98 <__ieee754_asin+0x2f0>)
 8018d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d7e:	f7e7 fa8d 	bl	800029c <__adddf3>
 8018d82:	4622      	mov	r2, r4
 8018d84:	462b      	mov	r3, r5
 8018d86:	f7e7 fc3b 	bl	8000600 <__aeabi_dmul>
 8018d8a:	a385      	add	r3, pc, #532	; (adr r3, 8018fa0 <__ieee754_asin+0x2f8>)
 8018d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d90:	f7e7 fa82 	bl	8000298 <__aeabi_dsub>
 8018d94:	4622      	mov	r2, r4
 8018d96:	462b      	mov	r3, r5
 8018d98:	f7e7 fc32 	bl	8000600 <__aeabi_dmul>
 8018d9c:	a382      	add	r3, pc, #520	; (adr r3, 8018fa8 <__ieee754_asin+0x300>)
 8018d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018da2:	f7e7 fa7b 	bl	800029c <__adddf3>
 8018da6:	4622      	mov	r2, r4
 8018da8:	462b      	mov	r3, r5
 8018daa:	f7e7 fc29 	bl	8000600 <__aeabi_dmul>
 8018dae:	a380      	add	r3, pc, #512	; (adr r3, 8018fb0 <__ieee754_asin+0x308>)
 8018db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018db4:	f7e7 fa70 	bl	8000298 <__aeabi_dsub>
 8018db8:	4622      	mov	r2, r4
 8018dba:	462b      	mov	r3, r5
 8018dbc:	f7e7 fc20 	bl	8000600 <__aeabi_dmul>
 8018dc0:	a37d      	add	r3, pc, #500	; (adr r3, 8018fb8 <__ieee754_asin+0x310>)
 8018dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dc6:	f7e7 fa69 	bl	800029c <__adddf3>
 8018dca:	4622      	mov	r2, r4
 8018dcc:	462b      	mov	r3, r5
 8018dce:	f7e7 fc17 	bl	8000600 <__aeabi_dmul>
 8018dd2:	a37b      	add	r3, pc, #492	; (adr r3, 8018fc0 <__ieee754_asin+0x318>)
 8018dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dd8:	4680      	mov	r8, r0
 8018dda:	4689      	mov	r9, r1
 8018ddc:	4620      	mov	r0, r4
 8018dde:	4629      	mov	r1, r5
 8018de0:	f7e7 fc0e 	bl	8000600 <__aeabi_dmul>
 8018de4:	a378      	add	r3, pc, #480	; (adr r3, 8018fc8 <__ieee754_asin+0x320>)
 8018de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dea:	f7e7 fa55 	bl	8000298 <__aeabi_dsub>
 8018dee:	4622      	mov	r2, r4
 8018df0:	462b      	mov	r3, r5
 8018df2:	f7e7 fc05 	bl	8000600 <__aeabi_dmul>
 8018df6:	a376      	add	r3, pc, #472	; (adr r3, 8018fd0 <__ieee754_asin+0x328>)
 8018df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dfc:	f7e7 fa4e 	bl	800029c <__adddf3>
 8018e00:	4622      	mov	r2, r4
 8018e02:	462b      	mov	r3, r5
 8018e04:	f7e7 fbfc 	bl	8000600 <__aeabi_dmul>
 8018e08:	a373      	add	r3, pc, #460	; (adr r3, 8018fd8 <__ieee754_asin+0x330>)
 8018e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e0e:	f7e7 fa43 	bl	8000298 <__aeabi_dsub>
 8018e12:	4622      	mov	r2, r4
 8018e14:	462b      	mov	r3, r5
 8018e16:	f7e7 fbf3 	bl	8000600 <__aeabi_dmul>
 8018e1a:	2200      	movs	r2, #0
 8018e1c:	4b72      	ldr	r3, [pc, #456]	; (8018fe8 <__ieee754_asin+0x340>)
 8018e1e:	f7e7 fa3d 	bl	800029c <__adddf3>
 8018e22:	ec45 4b10 	vmov	d0, r4, r5
 8018e26:	460b      	mov	r3, r1
 8018e28:	4602      	mov	r2, r0
 8018e2a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018e2e:	f000 ff35 	bl	8019c9c <__ieee754_sqrt>
 8018e32:	496f      	ldr	r1, [pc, #444]	; (8018ff0 <__ieee754_asin+0x348>)
 8018e34:	458b      	cmp	fp, r1
 8018e36:	ec57 6b10 	vmov	r6, r7, d0
 8018e3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018e3e:	f340 80d9 	ble.w	8018ff4 <__ieee754_asin+0x34c>
 8018e42:	4640      	mov	r0, r8
 8018e44:	4649      	mov	r1, r9
 8018e46:	f7e7 fd05 	bl	8000854 <__aeabi_ddiv>
 8018e4a:	4632      	mov	r2, r6
 8018e4c:	463b      	mov	r3, r7
 8018e4e:	f7e7 fbd7 	bl	8000600 <__aeabi_dmul>
 8018e52:	4632      	mov	r2, r6
 8018e54:	463b      	mov	r3, r7
 8018e56:	f7e7 fa21 	bl	800029c <__adddf3>
 8018e5a:	4602      	mov	r2, r0
 8018e5c:	460b      	mov	r3, r1
 8018e5e:	f7e7 fa1d 	bl	800029c <__adddf3>
 8018e62:	a347      	add	r3, pc, #284	; (adr r3, 8018f80 <__ieee754_asin+0x2d8>)
 8018e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e68:	f7e7 fa16 	bl	8000298 <__aeabi_dsub>
 8018e6c:	4602      	mov	r2, r0
 8018e6e:	460b      	mov	r3, r1
 8018e70:	a141      	add	r1, pc, #260	; (adr r1, 8018f78 <__ieee754_asin+0x2d0>)
 8018e72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018e76:	f7e7 fa0f 	bl	8000298 <__aeabi_dsub>
 8018e7a:	9b01      	ldr	r3, [sp, #4]
 8018e7c:	2b00      	cmp	r3, #0
 8018e7e:	bfdc      	itt	le
 8018e80:	4602      	movle	r2, r0
 8018e82:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8018e86:	4604      	mov	r4, r0
 8018e88:	460d      	mov	r5, r1
 8018e8a:	bfdc      	itt	le
 8018e8c:	4614      	movle	r4, r2
 8018e8e:	461d      	movle	r5, r3
 8018e90:	e743      	b.n	8018d1a <__ieee754_asin+0x72>
 8018e92:	ee10 2a10 	vmov	r2, s0
 8018e96:	ee10 0a10 	vmov	r0, s0
 8018e9a:	462b      	mov	r3, r5
 8018e9c:	4629      	mov	r1, r5
 8018e9e:	f7e7 fbaf 	bl	8000600 <__aeabi_dmul>
 8018ea2:	a33b      	add	r3, pc, #236	; (adr r3, 8018f90 <__ieee754_asin+0x2e8>)
 8018ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ea8:	4606      	mov	r6, r0
 8018eaa:	460f      	mov	r7, r1
 8018eac:	f7e7 fba8 	bl	8000600 <__aeabi_dmul>
 8018eb0:	a339      	add	r3, pc, #228	; (adr r3, 8018f98 <__ieee754_asin+0x2f0>)
 8018eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018eb6:	f7e7 f9f1 	bl	800029c <__adddf3>
 8018eba:	4632      	mov	r2, r6
 8018ebc:	463b      	mov	r3, r7
 8018ebe:	f7e7 fb9f 	bl	8000600 <__aeabi_dmul>
 8018ec2:	a337      	add	r3, pc, #220	; (adr r3, 8018fa0 <__ieee754_asin+0x2f8>)
 8018ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ec8:	f7e7 f9e6 	bl	8000298 <__aeabi_dsub>
 8018ecc:	4632      	mov	r2, r6
 8018ece:	463b      	mov	r3, r7
 8018ed0:	f7e7 fb96 	bl	8000600 <__aeabi_dmul>
 8018ed4:	a334      	add	r3, pc, #208	; (adr r3, 8018fa8 <__ieee754_asin+0x300>)
 8018ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018eda:	f7e7 f9df 	bl	800029c <__adddf3>
 8018ede:	4632      	mov	r2, r6
 8018ee0:	463b      	mov	r3, r7
 8018ee2:	f7e7 fb8d 	bl	8000600 <__aeabi_dmul>
 8018ee6:	a332      	add	r3, pc, #200	; (adr r3, 8018fb0 <__ieee754_asin+0x308>)
 8018ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018eec:	f7e7 f9d4 	bl	8000298 <__aeabi_dsub>
 8018ef0:	4632      	mov	r2, r6
 8018ef2:	463b      	mov	r3, r7
 8018ef4:	f7e7 fb84 	bl	8000600 <__aeabi_dmul>
 8018ef8:	a32f      	add	r3, pc, #188	; (adr r3, 8018fb8 <__ieee754_asin+0x310>)
 8018efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018efe:	f7e7 f9cd 	bl	800029c <__adddf3>
 8018f02:	4632      	mov	r2, r6
 8018f04:	463b      	mov	r3, r7
 8018f06:	f7e7 fb7b 	bl	8000600 <__aeabi_dmul>
 8018f0a:	a32d      	add	r3, pc, #180	; (adr r3, 8018fc0 <__ieee754_asin+0x318>)
 8018f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f10:	4680      	mov	r8, r0
 8018f12:	4689      	mov	r9, r1
 8018f14:	4630      	mov	r0, r6
 8018f16:	4639      	mov	r1, r7
 8018f18:	f7e7 fb72 	bl	8000600 <__aeabi_dmul>
 8018f1c:	a32a      	add	r3, pc, #168	; (adr r3, 8018fc8 <__ieee754_asin+0x320>)
 8018f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f22:	f7e7 f9b9 	bl	8000298 <__aeabi_dsub>
 8018f26:	4632      	mov	r2, r6
 8018f28:	463b      	mov	r3, r7
 8018f2a:	f7e7 fb69 	bl	8000600 <__aeabi_dmul>
 8018f2e:	a328      	add	r3, pc, #160	; (adr r3, 8018fd0 <__ieee754_asin+0x328>)
 8018f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f34:	f7e7 f9b2 	bl	800029c <__adddf3>
 8018f38:	4632      	mov	r2, r6
 8018f3a:	463b      	mov	r3, r7
 8018f3c:	f7e7 fb60 	bl	8000600 <__aeabi_dmul>
 8018f40:	a325      	add	r3, pc, #148	; (adr r3, 8018fd8 <__ieee754_asin+0x330>)
 8018f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f46:	f7e7 f9a7 	bl	8000298 <__aeabi_dsub>
 8018f4a:	4632      	mov	r2, r6
 8018f4c:	463b      	mov	r3, r7
 8018f4e:	f7e7 fb57 	bl	8000600 <__aeabi_dmul>
 8018f52:	2200      	movs	r2, #0
 8018f54:	4b24      	ldr	r3, [pc, #144]	; (8018fe8 <__ieee754_asin+0x340>)
 8018f56:	f7e7 f9a1 	bl	800029c <__adddf3>
 8018f5a:	4602      	mov	r2, r0
 8018f5c:	460b      	mov	r3, r1
 8018f5e:	4640      	mov	r0, r8
 8018f60:	4649      	mov	r1, r9
 8018f62:	f7e7 fc77 	bl	8000854 <__aeabi_ddiv>
 8018f66:	4622      	mov	r2, r4
 8018f68:	462b      	mov	r3, r5
 8018f6a:	f7e7 fb49 	bl	8000600 <__aeabi_dmul>
 8018f6e:	4602      	mov	r2, r0
 8018f70:	460b      	mov	r3, r1
 8018f72:	4620      	mov	r0, r4
 8018f74:	4629      	mov	r1, r5
 8018f76:	e6c0      	b.n	8018cfa <__ieee754_asin+0x52>
 8018f78:	54442d18 	.word	0x54442d18
 8018f7c:	3ff921fb 	.word	0x3ff921fb
 8018f80:	33145c07 	.word	0x33145c07
 8018f84:	3c91a626 	.word	0x3c91a626
 8018f88:	8800759c 	.word	0x8800759c
 8018f8c:	7e37e43c 	.word	0x7e37e43c
 8018f90:	0dfdf709 	.word	0x0dfdf709
 8018f94:	3f023de1 	.word	0x3f023de1
 8018f98:	7501b288 	.word	0x7501b288
 8018f9c:	3f49efe0 	.word	0x3f49efe0
 8018fa0:	b5688f3b 	.word	0xb5688f3b
 8018fa4:	3fa48228 	.word	0x3fa48228
 8018fa8:	0e884455 	.word	0x0e884455
 8018fac:	3fc9c155 	.word	0x3fc9c155
 8018fb0:	03eb6f7d 	.word	0x03eb6f7d
 8018fb4:	3fd4d612 	.word	0x3fd4d612
 8018fb8:	55555555 	.word	0x55555555
 8018fbc:	3fc55555 	.word	0x3fc55555
 8018fc0:	b12e9282 	.word	0xb12e9282
 8018fc4:	3fb3b8c5 	.word	0x3fb3b8c5
 8018fc8:	1b8d0159 	.word	0x1b8d0159
 8018fcc:	3fe6066c 	.word	0x3fe6066c
 8018fd0:	9c598ac8 	.word	0x9c598ac8
 8018fd4:	40002ae5 	.word	0x40002ae5
 8018fd8:	1c8a2d4b 	.word	0x1c8a2d4b
 8018fdc:	40033a27 	.word	0x40033a27
 8018fe0:	3fefffff 	.word	0x3fefffff
 8018fe4:	3fdfffff 	.word	0x3fdfffff
 8018fe8:	3ff00000 	.word	0x3ff00000
 8018fec:	3fe00000 	.word	0x3fe00000
 8018ff0:	3fef3332 	.word	0x3fef3332
 8018ff4:	4640      	mov	r0, r8
 8018ff6:	4649      	mov	r1, r9
 8018ff8:	f7e7 fc2c 	bl	8000854 <__aeabi_ddiv>
 8018ffc:	4632      	mov	r2, r6
 8018ffe:	4680      	mov	r8, r0
 8019000:	4689      	mov	r9, r1
 8019002:	463b      	mov	r3, r7
 8019004:	4630      	mov	r0, r6
 8019006:	4639      	mov	r1, r7
 8019008:	f7e7 f948 	bl	800029c <__adddf3>
 801900c:	4602      	mov	r2, r0
 801900e:	460b      	mov	r3, r1
 8019010:	4640      	mov	r0, r8
 8019012:	4649      	mov	r1, r9
 8019014:	f7e7 faf4 	bl	8000600 <__aeabi_dmul>
 8019018:	f04f 0a00 	mov.w	sl, #0
 801901c:	4680      	mov	r8, r0
 801901e:	4689      	mov	r9, r1
 8019020:	4652      	mov	r2, sl
 8019022:	463b      	mov	r3, r7
 8019024:	4650      	mov	r0, sl
 8019026:	4639      	mov	r1, r7
 8019028:	f7e7 faea 	bl	8000600 <__aeabi_dmul>
 801902c:	4602      	mov	r2, r0
 801902e:	460b      	mov	r3, r1
 8019030:	4620      	mov	r0, r4
 8019032:	4629      	mov	r1, r5
 8019034:	f7e7 f930 	bl	8000298 <__aeabi_dsub>
 8019038:	4652      	mov	r2, sl
 801903a:	4604      	mov	r4, r0
 801903c:	460d      	mov	r5, r1
 801903e:	463b      	mov	r3, r7
 8019040:	4630      	mov	r0, r6
 8019042:	4639      	mov	r1, r7
 8019044:	f7e7 f92a 	bl	800029c <__adddf3>
 8019048:	4602      	mov	r2, r0
 801904a:	460b      	mov	r3, r1
 801904c:	4620      	mov	r0, r4
 801904e:	4629      	mov	r1, r5
 8019050:	f7e7 fc00 	bl	8000854 <__aeabi_ddiv>
 8019054:	4602      	mov	r2, r0
 8019056:	460b      	mov	r3, r1
 8019058:	f7e7 f920 	bl	800029c <__adddf3>
 801905c:	4602      	mov	r2, r0
 801905e:	460b      	mov	r3, r1
 8019060:	a113      	add	r1, pc, #76	; (adr r1, 80190b0 <__ieee754_asin+0x408>)
 8019062:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019066:	f7e7 f917 	bl	8000298 <__aeabi_dsub>
 801906a:	4602      	mov	r2, r0
 801906c:	460b      	mov	r3, r1
 801906e:	4640      	mov	r0, r8
 8019070:	4649      	mov	r1, r9
 8019072:	f7e7 f911 	bl	8000298 <__aeabi_dsub>
 8019076:	4652      	mov	r2, sl
 8019078:	4604      	mov	r4, r0
 801907a:	460d      	mov	r5, r1
 801907c:	463b      	mov	r3, r7
 801907e:	4650      	mov	r0, sl
 8019080:	4639      	mov	r1, r7
 8019082:	f7e7 f90b 	bl	800029c <__adddf3>
 8019086:	4602      	mov	r2, r0
 8019088:	460b      	mov	r3, r1
 801908a:	a10b      	add	r1, pc, #44	; (adr r1, 80190b8 <__ieee754_asin+0x410>)
 801908c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019090:	f7e7 f902 	bl	8000298 <__aeabi_dsub>
 8019094:	4602      	mov	r2, r0
 8019096:	460b      	mov	r3, r1
 8019098:	4620      	mov	r0, r4
 801909a:	4629      	mov	r1, r5
 801909c:	f7e7 f8fc 	bl	8000298 <__aeabi_dsub>
 80190a0:	4602      	mov	r2, r0
 80190a2:	460b      	mov	r3, r1
 80190a4:	a104      	add	r1, pc, #16	; (adr r1, 80190b8 <__ieee754_asin+0x410>)
 80190a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80190aa:	e6e4      	b.n	8018e76 <__ieee754_asin+0x1ce>
 80190ac:	f3af 8000 	nop.w
 80190b0:	33145c07 	.word	0x33145c07
 80190b4:	3c91a626 	.word	0x3c91a626
 80190b8:	54442d18 	.word	0x54442d18
 80190bc:	3fe921fb 	.word	0x3fe921fb

080190c0 <__ieee754_atan2>:
 80190c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80190c4:	ec57 6b11 	vmov	r6, r7, d1
 80190c8:	4273      	negs	r3, r6
 80190ca:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80190ce:	4333      	orrs	r3, r6
 80190d0:	f8df c19c 	ldr.w	ip, [pc, #412]	; 8019270 <__ieee754_atan2+0x1b0>
 80190d4:	ec51 0b10 	vmov	r0, r1, d0
 80190d8:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80190dc:	4563      	cmp	r3, ip
 80190de:	ee11 8a10 	vmov	r8, s2
 80190e2:	ee10 9a10 	vmov	r9, s0
 80190e6:	468e      	mov	lr, r1
 80190e8:	d807      	bhi.n	80190fa <__ieee754_atan2+0x3a>
 80190ea:	4244      	negs	r4, r0
 80190ec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80190f0:	4304      	orrs	r4, r0
 80190f2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80190f6:	4564      	cmp	r4, ip
 80190f8:	d907      	bls.n	801910a <__ieee754_atan2+0x4a>
 80190fa:	4632      	mov	r2, r6
 80190fc:	463b      	mov	r3, r7
 80190fe:	f7e7 f8cd 	bl	800029c <__adddf3>
 8019102:	ec41 0b10 	vmov	d0, r0, r1
 8019106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801910a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801910e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8019112:	4334      	orrs	r4, r6
 8019114:	d103      	bne.n	801911e <__ieee754_atan2+0x5e>
 8019116:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801911a:	f001 bcc9 	b.w	801aab0 <atan>
 801911e:	17bc      	asrs	r4, r7, #30
 8019120:	f004 0402 	and.w	r4, r4, #2
 8019124:	ea59 0903 	orrs.w	r9, r9, r3
 8019128:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801912c:	d107      	bne.n	801913e <__ieee754_atan2+0x7e>
 801912e:	2c02      	cmp	r4, #2
 8019130:	d030      	beq.n	8019194 <__ieee754_atan2+0xd4>
 8019132:	2c03      	cmp	r4, #3
 8019134:	d1e5      	bne.n	8019102 <__ieee754_atan2+0x42>
 8019136:	a13c      	add	r1, pc, #240	; (adr r1, 8019228 <__ieee754_atan2+0x168>)
 8019138:	e9d1 0100 	ldrd	r0, r1, [r1]
 801913c:	e7e1      	b.n	8019102 <__ieee754_atan2+0x42>
 801913e:	ea58 0802 	orrs.w	r8, r8, r2
 8019142:	d106      	bne.n	8019152 <__ieee754_atan2+0x92>
 8019144:	f1be 0f00 	cmp.w	lr, #0
 8019148:	da6a      	bge.n	8019220 <__ieee754_atan2+0x160>
 801914a:	a139      	add	r1, pc, #228	; (adr r1, 8019230 <__ieee754_atan2+0x170>)
 801914c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019150:	e7d7      	b.n	8019102 <__ieee754_atan2+0x42>
 8019152:	4562      	cmp	r2, ip
 8019154:	d122      	bne.n	801919c <__ieee754_atan2+0xdc>
 8019156:	4293      	cmp	r3, r2
 8019158:	d111      	bne.n	801917e <__ieee754_atan2+0xbe>
 801915a:	2c02      	cmp	r4, #2
 801915c:	d007      	beq.n	801916e <__ieee754_atan2+0xae>
 801915e:	2c03      	cmp	r4, #3
 8019160:	d009      	beq.n	8019176 <__ieee754_atan2+0xb6>
 8019162:	2c01      	cmp	r4, #1
 8019164:	d156      	bne.n	8019214 <__ieee754_atan2+0x154>
 8019166:	a134      	add	r1, pc, #208	; (adr r1, 8019238 <__ieee754_atan2+0x178>)
 8019168:	e9d1 0100 	ldrd	r0, r1, [r1]
 801916c:	e7c9      	b.n	8019102 <__ieee754_atan2+0x42>
 801916e:	a134      	add	r1, pc, #208	; (adr r1, 8019240 <__ieee754_atan2+0x180>)
 8019170:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019174:	e7c5      	b.n	8019102 <__ieee754_atan2+0x42>
 8019176:	a134      	add	r1, pc, #208	; (adr r1, 8019248 <__ieee754_atan2+0x188>)
 8019178:	e9d1 0100 	ldrd	r0, r1, [r1]
 801917c:	e7c1      	b.n	8019102 <__ieee754_atan2+0x42>
 801917e:	2c02      	cmp	r4, #2
 8019180:	d008      	beq.n	8019194 <__ieee754_atan2+0xd4>
 8019182:	2c03      	cmp	r4, #3
 8019184:	d0d7      	beq.n	8019136 <__ieee754_atan2+0x76>
 8019186:	2c01      	cmp	r4, #1
 8019188:	f04f 0000 	mov.w	r0, #0
 801918c:	d146      	bne.n	801921c <__ieee754_atan2+0x15c>
 801918e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8019192:	e7b6      	b.n	8019102 <__ieee754_atan2+0x42>
 8019194:	a12e      	add	r1, pc, #184	; (adr r1, 8019250 <__ieee754_atan2+0x190>)
 8019196:	e9d1 0100 	ldrd	r0, r1, [r1]
 801919a:	e7b2      	b.n	8019102 <__ieee754_atan2+0x42>
 801919c:	4563      	cmp	r3, ip
 801919e:	d0d1      	beq.n	8019144 <__ieee754_atan2+0x84>
 80191a0:	1a9b      	subs	r3, r3, r2
 80191a2:	151b      	asrs	r3, r3, #20
 80191a4:	2b3c      	cmp	r3, #60	; 0x3c
 80191a6:	dc1e      	bgt.n	80191e6 <__ieee754_atan2+0x126>
 80191a8:	2f00      	cmp	r7, #0
 80191aa:	da01      	bge.n	80191b0 <__ieee754_atan2+0xf0>
 80191ac:	333c      	adds	r3, #60	; 0x3c
 80191ae:	db1e      	blt.n	80191ee <__ieee754_atan2+0x12e>
 80191b0:	4632      	mov	r2, r6
 80191b2:	463b      	mov	r3, r7
 80191b4:	f7e7 fb4e 	bl	8000854 <__aeabi_ddiv>
 80191b8:	ec41 0b10 	vmov	d0, r0, r1
 80191bc:	f001 fe20 	bl	801ae00 <fabs>
 80191c0:	f001 fc76 	bl	801aab0 <atan>
 80191c4:	ec51 0b10 	vmov	r0, r1, d0
 80191c8:	2c01      	cmp	r4, #1
 80191ca:	d013      	beq.n	80191f4 <__ieee754_atan2+0x134>
 80191cc:	2c02      	cmp	r4, #2
 80191ce:	d014      	beq.n	80191fa <__ieee754_atan2+0x13a>
 80191d0:	2c00      	cmp	r4, #0
 80191d2:	d096      	beq.n	8019102 <__ieee754_atan2+0x42>
 80191d4:	a320      	add	r3, pc, #128	; (adr r3, 8019258 <__ieee754_atan2+0x198>)
 80191d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191da:	f7e7 f85d 	bl	8000298 <__aeabi_dsub>
 80191de:	a31c      	add	r3, pc, #112	; (adr r3, 8019250 <__ieee754_atan2+0x190>)
 80191e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191e4:	e013      	b.n	801920e <__ieee754_atan2+0x14e>
 80191e6:	a11e      	add	r1, pc, #120	; (adr r1, 8019260 <__ieee754_atan2+0x1a0>)
 80191e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80191ec:	e7ec      	b.n	80191c8 <__ieee754_atan2+0x108>
 80191ee:	2000      	movs	r0, #0
 80191f0:	2100      	movs	r1, #0
 80191f2:	e7e9      	b.n	80191c8 <__ieee754_atan2+0x108>
 80191f4:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80191f8:	e783      	b.n	8019102 <__ieee754_atan2+0x42>
 80191fa:	a317      	add	r3, pc, #92	; (adr r3, 8019258 <__ieee754_atan2+0x198>)
 80191fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019200:	f7e7 f84a 	bl	8000298 <__aeabi_dsub>
 8019204:	4602      	mov	r2, r0
 8019206:	460b      	mov	r3, r1
 8019208:	a111      	add	r1, pc, #68	; (adr r1, 8019250 <__ieee754_atan2+0x190>)
 801920a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801920e:	f7e7 f843 	bl	8000298 <__aeabi_dsub>
 8019212:	e776      	b.n	8019102 <__ieee754_atan2+0x42>
 8019214:	a114      	add	r1, pc, #80	; (adr r1, 8019268 <__ieee754_atan2+0x1a8>)
 8019216:	e9d1 0100 	ldrd	r0, r1, [r1]
 801921a:	e772      	b.n	8019102 <__ieee754_atan2+0x42>
 801921c:	2100      	movs	r1, #0
 801921e:	e770      	b.n	8019102 <__ieee754_atan2+0x42>
 8019220:	a10f      	add	r1, pc, #60	; (adr r1, 8019260 <__ieee754_atan2+0x1a0>)
 8019222:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019226:	e76c      	b.n	8019102 <__ieee754_atan2+0x42>
 8019228:	54442d18 	.word	0x54442d18
 801922c:	c00921fb 	.word	0xc00921fb
 8019230:	54442d18 	.word	0x54442d18
 8019234:	bff921fb 	.word	0xbff921fb
 8019238:	54442d18 	.word	0x54442d18
 801923c:	bfe921fb 	.word	0xbfe921fb
 8019240:	7f3321d2 	.word	0x7f3321d2
 8019244:	4002d97c 	.word	0x4002d97c
 8019248:	7f3321d2 	.word	0x7f3321d2
 801924c:	c002d97c 	.word	0xc002d97c
 8019250:	54442d18 	.word	0x54442d18
 8019254:	400921fb 	.word	0x400921fb
 8019258:	33145c07 	.word	0x33145c07
 801925c:	3ca1a626 	.word	0x3ca1a626
 8019260:	54442d18 	.word	0x54442d18
 8019264:	3ff921fb 	.word	0x3ff921fb
 8019268:	54442d18 	.word	0x54442d18
 801926c:	3fe921fb 	.word	0x3fe921fb
 8019270:	7ff00000 	.word	0x7ff00000
 8019274:	00000000 	.word	0x00000000

08019278 <__ieee754_pow>:
 8019278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801927c:	b091      	sub	sp, #68	; 0x44
 801927e:	ed8d 1b00 	vstr	d1, [sp]
 8019282:	e89d 0204 	ldmia.w	sp, {r2, r9}
 8019286:	ec57 6b10 	vmov	r6, r7, d0
 801928a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801928e:	ea58 0302 	orrs.w	r3, r8, r2
 8019292:	ee10 aa10 	vmov	sl, s0
 8019296:	463d      	mov	r5, r7
 8019298:	f000 84bd 	beq.w	8019c16 <__ieee754_pow+0x99e>
 801929c:	4b78      	ldr	r3, [pc, #480]	; (8019480 <__ieee754_pow+0x208>)
 801929e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80192a2:	429c      	cmp	r4, r3
 80192a4:	dc09      	bgt.n	80192ba <__ieee754_pow+0x42>
 80192a6:	d103      	bne.n	80192b0 <__ieee754_pow+0x38>
 80192a8:	b93e      	cbnz	r6, 80192ba <__ieee754_pow+0x42>
 80192aa:	45a0      	cmp	r8, r4
 80192ac:	dc0d      	bgt.n	80192ca <__ieee754_pow+0x52>
 80192ae:	e001      	b.n	80192b4 <__ieee754_pow+0x3c>
 80192b0:	4598      	cmp	r8, r3
 80192b2:	dc02      	bgt.n	80192ba <__ieee754_pow+0x42>
 80192b4:	4598      	cmp	r8, r3
 80192b6:	d10e      	bne.n	80192d6 <__ieee754_pow+0x5e>
 80192b8:	b16a      	cbz	r2, 80192d6 <__ieee754_pow+0x5e>
 80192ba:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80192be:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80192c2:	ea54 030a 	orrs.w	r3, r4, sl
 80192c6:	f000 84a6 	beq.w	8019c16 <__ieee754_pow+0x99e>
 80192ca:	486e      	ldr	r0, [pc, #440]	; (8019484 <__ieee754_pow+0x20c>)
 80192cc:	b011      	add	sp, #68	; 0x44
 80192ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192d2:	f001 bda9 	b.w	801ae28 <nan>
 80192d6:	2d00      	cmp	r5, #0
 80192d8:	da53      	bge.n	8019382 <__ieee754_pow+0x10a>
 80192da:	4b6b      	ldr	r3, [pc, #428]	; (8019488 <__ieee754_pow+0x210>)
 80192dc:	4598      	cmp	r8, r3
 80192de:	dc4d      	bgt.n	801937c <__ieee754_pow+0x104>
 80192e0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80192e4:	4598      	cmp	r8, r3
 80192e6:	dd4c      	ble.n	8019382 <__ieee754_pow+0x10a>
 80192e8:	ea4f 5328 	mov.w	r3, r8, asr #20
 80192ec:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80192f0:	2b14      	cmp	r3, #20
 80192f2:	dd26      	ble.n	8019342 <__ieee754_pow+0xca>
 80192f4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80192f8:	fa22 f103 	lsr.w	r1, r2, r3
 80192fc:	fa01 f303 	lsl.w	r3, r1, r3
 8019300:	429a      	cmp	r2, r3
 8019302:	d13e      	bne.n	8019382 <__ieee754_pow+0x10a>
 8019304:	f001 0101 	and.w	r1, r1, #1
 8019308:	f1c1 0b02 	rsb	fp, r1, #2
 801930c:	2a00      	cmp	r2, #0
 801930e:	d15b      	bne.n	80193c8 <__ieee754_pow+0x150>
 8019310:	4b5b      	ldr	r3, [pc, #364]	; (8019480 <__ieee754_pow+0x208>)
 8019312:	4598      	cmp	r8, r3
 8019314:	d124      	bne.n	8019360 <__ieee754_pow+0xe8>
 8019316:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801931a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801931e:	ea53 030a 	orrs.w	r3, r3, sl
 8019322:	f000 8478 	beq.w	8019c16 <__ieee754_pow+0x99e>
 8019326:	4b59      	ldr	r3, [pc, #356]	; (801948c <__ieee754_pow+0x214>)
 8019328:	429c      	cmp	r4, r3
 801932a:	dd2d      	ble.n	8019388 <__ieee754_pow+0x110>
 801932c:	f1b9 0f00 	cmp.w	r9, #0
 8019330:	f280 8475 	bge.w	8019c1e <__ieee754_pow+0x9a6>
 8019334:	2000      	movs	r0, #0
 8019336:	2100      	movs	r1, #0
 8019338:	ec41 0b10 	vmov	d0, r0, r1
 801933c:	b011      	add	sp, #68	; 0x44
 801933e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019342:	2a00      	cmp	r2, #0
 8019344:	d13e      	bne.n	80193c4 <__ieee754_pow+0x14c>
 8019346:	f1c3 0314 	rsb	r3, r3, #20
 801934a:	fa48 f103 	asr.w	r1, r8, r3
 801934e:	fa01 f303 	lsl.w	r3, r1, r3
 8019352:	4598      	cmp	r8, r3
 8019354:	f040 846b 	bne.w	8019c2e <__ieee754_pow+0x9b6>
 8019358:	f001 0101 	and.w	r1, r1, #1
 801935c:	f1c1 0b02 	rsb	fp, r1, #2
 8019360:	4b4b      	ldr	r3, [pc, #300]	; (8019490 <__ieee754_pow+0x218>)
 8019362:	4598      	cmp	r8, r3
 8019364:	d118      	bne.n	8019398 <__ieee754_pow+0x120>
 8019366:	f1b9 0f00 	cmp.w	r9, #0
 801936a:	f280 845c 	bge.w	8019c26 <__ieee754_pow+0x9ae>
 801936e:	4948      	ldr	r1, [pc, #288]	; (8019490 <__ieee754_pow+0x218>)
 8019370:	4632      	mov	r2, r6
 8019372:	463b      	mov	r3, r7
 8019374:	2000      	movs	r0, #0
 8019376:	f7e7 fa6d 	bl	8000854 <__aeabi_ddiv>
 801937a:	e7dd      	b.n	8019338 <__ieee754_pow+0xc0>
 801937c:	f04f 0b02 	mov.w	fp, #2
 8019380:	e7c4      	b.n	801930c <__ieee754_pow+0x94>
 8019382:	f04f 0b00 	mov.w	fp, #0
 8019386:	e7c1      	b.n	801930c <__ieee754_pow+0x94>
 8019388:	f1b9 0f00 	cmp.w	r9, #0
 801938c:	dad2      	bge.n	8019334 <__ieee754_pow+0xbc>
 801938e:	e89d 0009 	ldmia.w	sp, {r0, r3}
 8019392:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8019396:	e7cf      	b.n	8019338 <__ieee754_pow+0xc0>
 8019398:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801939c:	d106      	bne.n	80193ac <__ieee754_pow+0x134>
 801939e:	4632      	mov	r2, r6
 80193a0:	463b      	mov	r3, r7
 80193a2:	4610      	mov	r0, r2
 80193a4:	4619      	mov	r1, r3
 80193a6:	f7e7 f92b 	bl	8000600 <__aeabi_dmul>
 80193aa:	e7c5      	b.n	8019338 <__ieee754_pow+0xc0>
 80193ac:	4b39      	ldr	r3, [pc, #228]	; (8019494 <__ieee754_pow+0x21c>)
 80193ae:	4599      	cmp	r9, r3
 80193b0:	d10a      	bne.n	80193c8 <__ieee754_pow+0x150>
 80193b2:	2d00      	cmp	r5, #0
 80193b4:	db08      	blt.n	80193c8 <__ieee754_pow+0x150>
 80193b6:	ec47 6b10 	vmov	d0, r6, r7
 80193ba:	b011      	add	sp, #68	; 0x44
 80193bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193c0:	f000 bc6c 	b.w	8019c9c <__ieee754_sqrt>
 80193c4:	f04f 0b00 	mov.w	fp, #0
 80193c8:	ec47 6b10 	vmov	d0, r6, r7
 80193cc:	f001 fd18 	bl	801ae00 <fabs>
 80193d0:	ec51 0b10 	vmov	r0, r1, d0
 80193d4:	f1ba 0f00 	cmp.w	sl, #0
 80193d8:	d127      	bne.n	801942a <__ieee754_pow+0x1b2>
 80193da:	b124      	cbz	r4, 80193e6 <__ieee754_pow+0x16e>
 80193dc:	4b2c      	ldr	r3, [pc, #176]	; (8019490 <__ieee754_pow+0x218>)
 80193de:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80193e2:	429a      	cmp	r2, r3
 80193e4:	d121      	bne.n	801942a <__ieee754_pow+0x1b2>
 80193e6:	f1b9 0f00 	cmp.w	r9, #0
 80193ea:	da05      	bge.n	80193f8 <__ieee754_pow+0x180>
 80193ec:	4602      	mov	r2, r0
 80193ee:	460b      	mov	r3, r1
 80193f0:	2000      	movs	r0, #0
 80193f2:	4927      	ldr	r1, [pc, #156]	; (8019490 <__ieee754_pow+0x218>)
 80193f4:	f7e7 fa2e 	bl	8000854 <__aeabi_ddiv>
 80193f8:	2d00      	cmp	r5, #0
 80193fa:	da9d      	bge.n	8019338 <__ieee754_pow+0xc0>
 80193fc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8019400:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8019404:	ea54 030b 	orrs.w	r3, r4, fp
 8019408:	d108      	bne.n	801941c <__ieee754_pow+0x1a4>
 801940a:	4602      	mov	r2, r0
 801940c:	460b      	mov	r3, r1
 801940e:	4610      	mov	r0, r2
 8019410:	4619      	mov	r1, r3
 8019412:	f7e6 ff41 	bl	8000298 <__aeabi_dsub>
 8019416:	4602      	mov	r2, r0
 8019418:	460b      	mov	r3, r1
 801941a:	e7ac      	b.n	8019376 <__ieee754_pow+0xfe>
 801941c:	f1bb 0f01 	cmp.w	fp, #1
 8019420:	d18a      	bne.n	8019338 <__ieee754_pow+0xc0>
 8019422:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019426:	4619      	mov	r1, r3
 8019428:	e786      	b.n	8019338 <__ieee754_pow+0xc0>
 801942a:	0fed      	lsrs	r5, r5, #31
 801942c:	1e6b      	subs	r3, r5, #1
 801942e:	930d      	str	r3, [sp, #52]	; 0x34
 8019430:	ea5b 0303 	orrs.w	r3, fp, r3
 8019434:	d102      	bne.n	801943c <__ieee754_pow+0x1c4>
 8019436:	4632      	mov	r2, r6
 8019438:	463b      	mov	r3, r7
 801943a:	e7e8      	b.n	801940e <__ieee754_pow+0x196>
 801943c:	4b16      	ldr	r3, [pc, #88]	; (8019498 <__ieee754_pow+0x220>)
 801943e:	4598      	cmp	r8, r3
 8019440:	f340 80fe 	ble.w	8019640 <__ieee754_pow+0x3c8>
 8019444:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8019448:	4598      	cmp	r8, r3
 801944a:	dd0a      	ble.n	8019462 <__ieee754_pow+0x1ea>
 801944c:	4b0f      	ldr	r3, [pc, #60]	; (801948c <__ieee754_pow+0x214>)
 801944e:	429c      	cmp	r4, r3
 8019450:	dc0d      	bgt.n	801946e <__ieee754_pow+0x1f6>
 8019452:	f1b9 0f00 	cmp.w	r9, #0
 8019456:	f6bf af6d 	bge.w	8019334 <__ieee754_pow+0xbc>
 801945a:	a307      	add	r3, pc, #28	; (adr r3, 8019478 <__ieee754_pow+0x200>)
 801945c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019460:	e79f      	b.n	80193a2 <__ieee754_pow+0x12a>
 8019462:	4b0e      	ldr	r3, [pc, #56]	; (801949c <__ieee754_pow+0x224>)
 8019464:	429c      	cmp	r4, r3
 8019466:	ddf4      	ble.n	8019452 <__ieee754_pow+0x1da>
 8019468:	4b09      	ldr	r3, [pc, #36]	; (8019490 <__ieee754_pow+0x218>)
 801946a:	429c      	cmp	r4, r3
 801946c:	dd18      	ble.n	80194a0 <__ieee754_pow+0x228>
 801946e:	f1b9 0f00 	cmp.w	r9, #0
 8019472:	dcf2      	bgt.n	801945a <__ieee754_pow+0x1e2>
 8019474:	e75e      	b.n	8019334 <__ieee754_pow+0xbc>
 8019476:	bf00      	nop
 8019478:	8800759c 	.word	0x8800759c
 801947c:	7e37e43c 	.word	0x7e37e43c
 8019480:	7ff00000 	.word	0x7ff00000
 8019484:	0801ee91 	.word	0x0801ee91
 8019488:	433fffff 	.word	0x433fffff
 801948c:	3fefffff 	.word	0x3fefffff
 8019490:	3ff00000 	.word	0x3ff00000
 8019494:	3fe00000 	.word	0x3fe00000
 8019498:	41e00000 	.word	0x41e00000
 801949c:	3feffffe 	.word	0x3feffffe
 80194a0:	2200      	movs	r2, #0
 80194a2:	4b63      	ldr	r3, [pc, #396]	; (8019630 <__ieee754_pow+0x3b8>)
 80194a4:	f7e6 fef8 	bl	8000298 <__aeabi_dsub>
 80194a8:	a355      	add	r3, pc, #340	; (adr r3, 8019600 <__ieee754_pow+0x388>)
 80194aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194ae:	4604      	mov	r4, r0
 80194b0:	460d      	mov	r5, r1
 80194b2:	f7e7 f8a5 	bl	8000600 <__aeabi_dmul>
 80194b6:	a354      	add	r3, pc, #336	; (adr r3, 8019608 <__ieee754_pow+0x390>)
 80194b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194bc:	4606      	mov	r6, r0
 80194be:	460f      	mov	r7, r1
 80194c0:	4620      	mov	r0, r4
 80194c2:	4629      	mov	r1, r5
 80194c4:	f7e7 f89c 	bl	8000600 <__aeabi_dmul>
 80194c8:	2200      	movs	r2, #0
 80194ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80194ce:	4b59      	ldr	r3, [pc, #356]	; (8019634 <__ieee754_pow+0x3bc>)
 80194d0:	4620      	mov	r0, r4
 80194d2:	4629      	mov	r1, r5
 80194d4:	f7e7 f894 	bl	8000600 <__aeabi_dmul>
 80194d8:	4602      	mov	r2, r0
 80194da:	460b      	mov	r3, r1
 80194dc:	a14c      	add	r1, pc, #304	; (adr r1, 8019610 <__ieee754_pow+0x398>)
 80194de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80194e2:	f7e6 fed9 	bl	8000298 <__aeabi_dsub>
 80194e6:	4622      	mov	r2, r4
 80194e8:	462b      	mov	r3, r5
 80194ea:	f7e7 f889 	bl	8000600 <__aeabi_dmul>
 80194ee:	4602      	mov	r2, r0
 80194f0:	460b      	mov	r3, r1
 80194f2:	2000      	movs	r0, #0
 80194f4:	4950      	ldr	r1, [pc, #320]	; (8019638 <__ieee754_pow+0x3c0>)
 80194f6:	f7e6 fecf 	bl	8000298 <__aeabi_dsub>
 80194fa:	4622      	mov	r2, r4
 80194fc:	462b      	mov	r3, r5
 80194fe:	4680      	mov	r8, r0
 8019500:	4689      	mov	r9, r1
 8019502:	4620      	mov	r0, r4
 8019504:	4629      	mov	r1, r5
 8019506:	f7e7 f87b 	bl	8000600 <__aeabi_dmul>
 801950a:	4602      	mov	r2, r0
 801950c:	460b      	mov	r3, r1
 801950e:	4640      	mov	r0, r8
 8019510:	4649      	mov	r1, r9
 8019512:	f7e7 f875 	bl	8000600 <__aeabi_dmul>
 8019516:	a340      	add	r3, pc, #256	; (adr r3, 8019618 <__ieee754_pow+0x3a0>)
 8019518:	e9d3 2300 	ldrd	r2, r3, [r3]
 801951c:	f7e7 f870 	bl	8000600 <__aeabi_dmul>
 8019520:	4602      	mov	r2, r0
 8019522:	460b      	mov	r3, r1
 8019524:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019528:	f7e6 feb6 	bl	8000298 <__aeabi_dsub>
 801952c:	4602      	mov	r2, r0
 801952e:	460b      	mov	r3, r1
 8019530:	4604      	mov	r4, r0
 8019532:	460d      	mov	r5, r1
 8019534:	4630      	mov	r0, r6
 8019536:	4639      	mov	r1, r7
 8019538:	f7e6 feb0 	bl	800029c <__adddf3>
 801953c:	2000      	movs	r0, #0
 801953e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8019542:	4632      	mov	r2, r6
 8019544:	463b      	mov	r3, r7
 8019546:	f7e6 fea7 	bl	8000298 <__aeabi_dsub>
 801954a:	4602      	mov	r2, r0
 801954c:	460b      	mov	r3, r1
 801954e:	4620      	mov	r0, r4
 8019550:	4629      	mov	r1, r5
 8019552:	f7e6 fea1 	bl	8000298 <__aeabi_dsub>
 8019556:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019558:	f10b 33ff 	add.w	r3, fp, #4294967295
 801955c:	4313      	orrs	r3, r2
 801955e:	4606      	mov	r6, r0
 8019560:	460f      	mov	r7, r1
 8019562:	f040 81eb 	bne.w	801993c <__ieee754_pow+0x6c4>
 8019566:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8019620 <__ieee754_pow+0x3a8>
 801956a:	e9dd 4500 	ldrd	r4, r5, [sp]
 801956e:	2400      	movs	r4, #0
 8019570:	4622      	mov	r2, r4
 8019572:	462b      	mov	r3, r5
 8019574:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019578:	ed8d 7b02 	vstr	d7, [sp, #8]
 801957c:	f7e6 fe8c 	bl	8000298 <__aeabi_dsub>
 8019580:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019584:	f7e7 f83c 	bl	8000600 <__aeabi_dmul>
 8019588:	e9dd 2300 	ldrd	r2, r3, [sp]
 801958c:	4680      	mov	r8, r0
 801958e:	4689      	mov	r9, r1
 8019590:	4630      	mov	r0, r6
 8019592:	4639      	mov	r1, r7
 8019594:	f7e7 f834 	bl	8000600 <__aeabi_dmul>
 8019598:	4602      	mov	r2, r0
 801959a:	460b      	mov	r3, r1
 801959c:	4640      	mov	r0, r8
 801959e:	4649      	mov	r1, r9
 80195a0:	f7e6 fe7c 	bl	800029c <__adddf3>
 80195a4:	4622      	mov	r2, r4
 80195a6:	462b      	mov	r3, r5
 80195a8:	4680      	mov	r8, r0
 80195aa:	4689      	mov	r9, r1
 80195ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80195b0:	f7e7 f826 	bl	8000600 <__aeabi_dmul>
 80195b4:	460b      	mov	r3, r1
 80195b6:	4604      	mov	r4, r0
 80195b8:	460d      	mov	r5, r1
 80195ba:	4602      	mov	r2, r0
 80195bc:	4649      	mov	r1, r9
 80195be:	4640      	mov	r0, r8
 80195c0:	e9cd 4500 	strd	r4, r5, [sp]
 80195c4:	f7e6 fe6a 	bl	800029c <__adddf3>
 80195c8:	4b1c      	ldr	r3, [pc, #112]	; (801963c <__ieee754_pow+0x3c4>)
 80195ca:	4299      	cmp	r1, r3
 80195cc:	4606      	mov	r6, r0
 80195ce:	460f      	mov	r7, r1
 80195d0:	468b      	mov	fp, r1
 80195d2:	f340 82f7 	ble.w	8019bc4 <__ieee754_pow+0x94c>
 80195d6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80195da:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80195de:	4303      	orrs	r3, r0
 80195e0:	f000 81ea 	beq.w	80199b8 <__ieee754_pow+0x740>
 80195e4:	a310      	add	r3, pc, #64	; (adr r3, 8019628 <__ieee754_pow+0x3b0>)
 80195e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80195ee:	f7e7 f807 	bl	8000600 <__aeabi_dmul>
 80195f2:	a30d      	add	r3, pc, #52	; (adr r3, 8019628 <__ieee754_pow+0x3b0>)
 80195f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195f8:	e6d5      	b.n	80193a6 <__ieee754_pow+0x12e>
 80195fa:	bf00      	nop
 80195fc:	f3af 8000 	nop.w
 8019600:	60000000 	.word	0x60000000
 8019604:	3ff71547 	.word	0x3ff71547
 8019608:	f85ddf44 	.word	0xf85ddf44
 801960c:	3e54ae0b 	.word	0x3e54ae0b
 8019610:	55555555 	.word	0x55555555
 8019614:	3fd55555 	.word	0x3fd55555
 8019618:	652b82fe 	.word	0x652b82fe
 801961c:	3ff71547 	.word	0x3ff71547
 8019620:	00000000 	.word	0x00000000
 8019624:	bff00000 	.word	0xbff00000
 8019628:	8800759c 	.word	0x8800759c
 801962c:	7e37e43c 	.word	0x7e37e43c
 8019630:	3ff00000 	.word	0x3ff00000
 8019634:	3fd00000 	.word	0x3fd00000
 8019638:	3fe00000 	.word	0x3fe00000
 801963c:	408fffff 	.word	0x408fffff
 8019640:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8019644:	f04f 0200 	mov.w	r2, #0
 8019648:	da05      	bge.n	8019656 <__ieee754_pow+0x3de>
 801964a:	4bd3      	ldr	r3, [pc, #844]	; (8019998 <__ieee754_pow+0x720>)
 801964c:	f7e6 ffd8 	bl	8000600 <__aeabi_dmul>
 8019650:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8019654:	460c      	mov	r4, r1
 8019656:	1523      	asrs	r3, r4, #20
 8019658:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801965c:	4413      	add	r3, r2
 801965e:	9307      	str	r3, [sp, #28]
 8019660:	4bce      	ldr	r3, [pc, #824]	; (801999c <__ieee754_pow+0x724>)
 8019662:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8019666:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801966a:	429c      	cmp	r4, r3
 801966c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8019670:	dd08      	ble.n	8019684 <__ieee754_pow+0x40c>
 8019672:	4bcb      	ldr	r3, [pc, #812]	; (80199a0 <__ieee754_pow+0x728>)
 8019674:	429c      	cmp	r4, r3
 8019676:	f340 815e 	ble.w	8019936 <__ieee754_pow+0x6be>
 801967a:	9b07      	ldr	r3, [sp, #28]
 801967c:	3301      	adds	r3, #1
 801967e:	9307      	str	r3, [sp, #28]
 8019680:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8019684:	f04f 0a00 	mov.w	sl, #0
 8019688:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801968c:	930c      	str	r3, [sp, #48]	; 0x30
 801968e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019690:	4bc4      	ldr	r3, [pc, #784]	; (80199a4 <__ieee754_pow+0x72c>)
 8019692:	4413      	add	r3, r2
 8019694:	ed93 7b00 	vldr	d7, [r3]
 8019698:	4629      	mov	r1, r5
 801969a:	ec53 2b17 	vmov	r2, r3, d7
 801969e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80196a2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80196a6:	f7e6 fdf7 	bl	8000298 <__aeabi_dsub>
 80196aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80196ae:	4606      	mov	r6, r0
 80196b0:	460f      	mov	r7, r1
 80196b2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80196b6:	f7e6 fdf1 	bl	800029c <__adddf3>
 80196ba:	4602      	mov	r2, r0
 80196bc:	460b      	mov	r3, r1
 80196be:	2000      	movs	r0, #0
 80196c0:	49b9      	ldr	r1, [pc, #740]	; (80199a8 <__ieee754_pow+0x730>)
 80196c2:	f7e7 f8c7 	bl	8000854 <__aeabi_ddiv>
 80196c6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80196ca:	4602      	mov	r2, r0
 80196cc:	460b      	mov	r3, r1
 80196ce:	4630      	mov	r0, r6
 80196d0:	4639      	mov	r1, r7
 80196d2:	f7e6 ff95 	bl	8000600 <__aeabi_dmul>
 80196d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80196da:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80196de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80196e2:	2300      	movs	r3, #0
 80196e4:	9302      	str	r3, [sp, #8]
 80196e6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80196ea:	106d      	asrs	r5, r5, #1
 80196ec:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80196f0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80196f4:	2200      	movs	r2, #0
 80196f6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80196fa:	4640      	mov	r0, r8
 80196fc:	4649      	mov	r1, r9
 80196fe:	4614      	mov	r4, r2
 8019700:	461d      	mov	r5, r3
 8019702:	f7e6 ff7d 	bl	8000600 <__aeabi_dmul>
 8019706:	4602      	mov	r2, r0
 8019708:	460b      	mov	r3, r1
 801970a:	4630      	mov	r0, r6
 801970c:	4639      	mov	r1, r7
 801970e:	f7e6 fdc3 	bl	8000298 <__aeabi_dsub>
 8019712:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8019716:	4606      	mov	r6, r0
 8019718:	460f      	mov	r7, r1
 801971a:	4620      	mov	r0, r4
 801971c:	4629      	mov	r1, r5
 801971e:	f7e6 fdbb 	bl	8000298 <__aeabi_dsub>
 8019722:	4602      	mov	r2, r0
 8019724:	460b      	mov	r3, r1
 8019726:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801972a:	f7e6 fdb5 	bl	8000298 <__aeabi_dsub>
 801972e:	4642      	mov	r2, r8
 8019730:	464b      	mov	r3, r9
 8019732:	f7e6 ff65 	bl	8000600 <__aeabi_dmul>
 8019736:	4602      	mov	r2, r0
 8019738:	460b      	mov	r3, r1
 801973a:	4630      	mov	r0, r6
 801973c:	4639      	mov	r1, r7
 801973e:	f7e6 fdab 	bl	8000298 <__aeabi_dsub>
 8019742:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8019746:	f7e6 ff5b 	bl	8000600 <__aeabi_dmul>
 801974a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801974e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8019752:	4610      	mov	r0, r2
 8019754:	4619      	mov	r1, r3
 8019756:	f7e6 ff53 	bl	8000600 <__aeabi_dmul>
 801975a:	a37b      	add	r3, pc, #492	; (adr r3, 8019948 <__ieee754_pow+0x6d0>)
 801975c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019760:	4604      	mov	r4, r0
 8019762:	460d      	mov	r5, r1
 8019764:	f7e6 ff4c 	bl	8000600 <__aeabi_dmul>
 8019768:	a379      	add	r3, pc, #484	; (adr r3, 8019950 <__ieee754_pow+0x6d8>)
 801976a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801976e:	f7e6 fd95 	bl	800029c <__adddf3>
 8019772:	4622      	mov	r2, r4
 8019774:	462b      	mov	r3, r5
 8019776:	f7e6 ff43 	bl	8000600 <__aeabi_dmul>
 801977a:	a377      	add	r3, pc, #476	; (adr r3, 8019958 <__ieee754_pow+0x6e0>)
 801977c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019780:	f7e6 fd8c 	bl	800029c <__adddf3>
 8019784:	4622      	mov	r2, r4
 8019786:	462b      	mov	r3, r5
 8019788:	f7e6 ff3a 	bl	8000600 <__aeabi_dmul>
 801978c:	a374      	add	r3, pc, #464	; (adr r3, 8019960 <__ieee754_pow+0x6e8>)
 801978e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019792:	f7e6 fd83 	bl	800029c <__adddf3>
 8019796:	4622      	mov	r2, r4
 8019798:	462b      	mov	r3, r5
 801979a:	f7e6 ff31 	bl	8000600 <__aeabi_dmul>
 801979e:	a372      	add	r3, pc, #456	; (adr r3, 8019968 <__ieee754_pow+0x6f0>)
 80197a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197a4:	f7e6 fd7a 	bl	800029c <__adddf3>
 80197a8:	4622      	mov	r2, r4
 80197aa:	462b      	mov	r3, r5
 80197ac:	f7e6 ff28 	bl	8000600 <__aeabi_dmul>
 80197b0:	a36f      	add	r3, pc, #444	; (adr r3, 8019970 <__ieee754_pow+0x6f8>)
 80197b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197b6:	f7e6 fd71 	bl	800029c <__adddf3>
 80197ba:	4622      	mov	r2, r4
 80197bc:	4606      	mov	r6, r0
 80197be:	460f      	mov	r7, r1
 80197c0:	462b      	mov	r3, r5
 80197c2:	4620      	mov	r0, r4
 80197c4:	4629      	mov	r1, r5
 80197c6:	f7e6 ff1b 	bl	8000600 <__aeabi_dmul>
 80197ca:	4602      	mov	r2, r0
 80197cc:	460b      	mov	r3, r1
 80197ce:	4630      	mov	r0, r6
 80197d0:	4639      	mov	r1, r7
 80197d2:	f7e6 ff15 	bl	8000600 <__aeabi_dmul>
 80197d6:	4642      	mov	r2, r8
 80197d8:	4604      	mov	r4, r0
 80197da:	460d      	mov	r5, r1
 80197dc:	464b      	mov	r3, r9
 80197de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80197e2:	f7e6 fd5b 	bl	800029c <__adddf3>
 80197e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80197ea:	f7e6 ff09 	bl	8000600 <__aeabi_dmul>
 80197ee:	4622      	mov	r2, r4
 80197f0:	462b      	mov	r3, r5
 80197f2:	f7e6 fd53 	bl	800029c <__adddf3>
 80197f6:	4642      	mov	r2, r8
 80197f8:	4606      	mov	r6, r0
 80197fa:	460f      	mov	r7, r1
 80197fc:	464b      	mov	r3, r9
 80197fe:	4640      	mov	r0, r8
 8019800:	4649      	mov	r1, r9
 8019802:	f7e6 fefd 	bl	8000600 <__aeabi_dmul>
 8019806:	2200      	movs	r2, #0
 8019808:	4b68      	ldr	r3, [pc, #416]	; (80199ac <__ieee754_pow+0x734>)
 801980a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801980e:	f7e6 fd45 	bl	800029c <__adddf3>
 8019812:	4632      	mov	r2, r6
 8019814:	463b      	mov	r3, r7
 8019816:	f7e6 fd41 	bl	800029c <__adddf3>
 801981a:	9802      	ldr	r0, [sp, #8]
 801981c:	460d      	mov	r5, r1
 801981e:	4604      	mov	r4, r0
 8019820:	4602      	mov	r2, r0
 8019822:	460b      	mov	r3, r1
 8019824:	4640      	mov	r0, r8
 8019826:	4649      	mov	r1, r9
 8019828:	f7e6 feea 	bl	8000600 <__aeabi_dmul>
 801982c:	2200      	movs	r2, #0
 801982e:	4680      	mov	r8, r0
 8019830:	4689      	mov	r9, r1
 8019832:	4b5e      	ldr	r3, [pc, #376]	; (80199ac <__ieee754_pow+0x734>)
 8019834:	4620      	mov	r0, r4
 8019836:	4629      	mov	r1, r5
 8019838:	f7e6 fd2e 	bl	8000298 <__aeabi_dsub>
 801983c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8019840:	f7e6 fd2a 	bl	8000298 <__aeabi_dsub>
 8019844:	4602      	mov	r2, r0
 8019846:	460b      	mov	r3, r1
 8019848:	4630      	mov	r0, r6
 801984a:	4639      	mov	r1, r7
 801984c:	f7e6 fd24 	bl	8000298 <__aeabi_dsub>
 8019850:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019854:	f7e6 fed4 	bl	8000600 <__aeabi_dmul>
 8019858:	4622      	mov	r2, r4
 801985a:	4606      	mov	r6, r0
 801985c:	460f      	mov	r7, r1
 801985e:	462b      	mov	r3, r5
 8019860:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8019864:	f7e6 fecc 	bl	8000600 <__aeabi_dmul>
 8019868:	4602      	mov	r2, r0
 801986a:	460b      	mov	r3, r1
 801986c:	4630      	mov	r0, r6
 801986e:	4639      	mov	r1, r7
 8019870:	f7e6 fd14 	bl	800029c <__adddf3>
 8019874:	4606      	mov	r6, r0
 8019876:	460f      	mov	r7, r1
 8019878:	4602      	mov	r2, r0
 801987a:	460b      	mov	r3, r1
 801987c:	4640      	mov	r0, r8
 801987e:	4649      	mov	r1, r9
 8019880:	f7e6 fd0c 	bl	800029c <__adddf3>
 8019884:	9802      	ldr	r0, [sp, #8]
 8019886:	a33c      	add	r3, pc, #240	; (adr r3, 8019978 <__ieee754_pow+0x700>)
 8019888:	e9d3 2300 	ldrd	r2, r3, [r3]
 801988c:	4604      	mov	r4, r0
 801988e:	460d      	mov	r5, r1
 8019890:	f7e6 feb6 	bl	8000600 <__aeabi_dmul>
 8019894:	4642      	mov	r2, r8
 8019896:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801989a:	464b      	mov	r3, r9
 801989c:	4620      	mov	r0, r4
 801989e:	4629      	mov	r1, r5
 80198a0:	f7e6 fcfa 	bl	8000298 <__aeabi_dsub>
 80198a4:	4602      	mov	r2, r0
 80198a6:	460b      	mov	r3, r1
 80198a8:	4630      	mov	r0, r6
 80198aa:	4639      	mov	r1, r7
 80198ac:	f7e6 fcf4 	bl	8000298 <__aeabi_dsub>
 80198b0:	a333      	add	r3, pc, #204	; (adr r3, 8019980 <__ieee754_pow+0x708>)
 80198b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198b6:	f7e6 fea3 	bl	8000600 <__aeabi_dmul>
 80198ba:	a333      	add	r3, pc, #204	; (adr r3, 8019988 <__ieee754_pow+0x710>)
 80198bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198c0:	4606      	mov	r6, r0
 80198c2:	460f      	mov	r7, r1
 80198c4:	4620      	mov	r0, r4
 80198c6:	4629      	mov	r1, r5
 80198c8:	f7e6 fe9a 	bl	8000600 <__aeabi_dmul>
 80198cc:	4602      	mov	r2, r0
 80198ce:	460b      	mov	r3, r1
 80198d0:	4630      	mov	r0, r6
 80198d2:	4639      	mov	r1, r7
 80198d4:	f7e6 fce2 	bl	800029c <__adddf3>
 80198d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80198da:	4b35      	ldr	r3, [pc, #212]	; (80199b0 <__ieee754_pow+0x738>)
 80198dc:	4413      	add	r3, r2
 80198de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198e2:	f7e6 fcdb 	bl	800029c <__adddf3>
 80198e6:	4604      	mov	r4, r0
 80198e8:	9807      	ldr	r0, [sp, #28]
 80198ea:	460d      	mov	r5, r1
 80198ec:	f7e6 fe22 	bl	8000534 <__aeabi_i2d>
 80198f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80198f2:	4b30      	ldr	r3, [pc, #192]	; (80199b4 <__ieee754_pow+0x73c>)
 80198f4:	4413      	add	r3, r2
 80198f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80198fa:	4606      	mov	r6, r0
 80198fc:	460f      	mov	r7, r1
 80198fe:	4622      	mov	r2, r4
 8019900:	462b      	mov	r3, r5
 8019902:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8019906:	f7e6 fcc9 	bl	800029c <__adddf3>
 801990a:	4642      	mov	r2, r8
 801990c:	464b      	mov	r3, r9
 801990e:	f7e6 fcc5 	bl	800029c <__adddf3>
 8019912:	4632      	mov	r2, r6
 8019914:	463b      	mov	r3, r7
 8019916:	f7e6 fcc1 	bl	800029c <__adddf3>
 801991a:	9802      	ldr	r0, [sp, #8]
 801991c:	4632      	mov	r2, r6
 801991e:	463b      	mov	r3, r7
 8019920:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8019924:	f7e6 fcb8 	bl	8000298 <__aeabi_dsub>
 8019928:	4642      	mov	r2, r8
 801992a:	464b      	mov	r3, r9
 801992c:	f7e6 fcb4 	bl	8000298 <__aeabi_dsub>
 8019930:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8019934:	e607      	b.n	8019546 <__ieee754_pow+0x2ce>
 8019936:	f04f 0a01 	mov.w	sl, #1
 801993a:	e6a5      	b.n	8019688 <__ieee754_pow+0x410>
 801993c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8019990 <__ieee754_pow+0x718>
 8019940:	e613      	b.n	801956a <__ieee754_pow+0x2f2>
 8019942:	bf00      	nop
 8019944:	f3af 8000 	nop.w
 8019948:	4a454eef 	.word	0x4a454eef
 801994c:	3fca7e28 	.word	0x3fca7e28
 8019950:	93c9db65 	.word	0x93c9db65
 8019954:	3fcd864a 	.word	0x3fcd864a
 8019958:	a91d4101 	.word	0xa91d4101
 801995c:	3fd17460 	.word	0x3fd17460
 8019960:	518f264d 	.word	0x518f264d
 8019964:	3fd55555 	.word	0x3fd55555
 8019968:	db6fabff 	.word	0xdb6fabff
 801996c:	3fdb6db6 	.word	0x3fdb6db6
 8019970:	33333303 	.word	0x33333303
 8019974:	3fe33333 	.word	0x3fe33333
 8019978:	e0000000 	.word	0xe0000000
 801997c:	3feec709 	.word	0x3feec709
 8019980:	dc3a03fd 	.word	0xdc3a03fd
 8019984:	3feec709 	.word	0x3feec709
 8019988:	145b01f5 	.word	0x145b01f5
 801998c:	be3e2fe0 	.word	0xbe3e2fe0
 8019990:	00000000 	.word	0x00000000
 8019994:	3ff00000 	.word	0x3ff00000
 8019998:	43400000 	.word	0x43400000
 801999c:	0003988e 	.word	0x0003988e
 80199a0:	000bb679 	.word	0x000bb679
 80199a4:	0801e898 	.word	0x0801e898
 80199a8:	3ff00000 	.word	0x3ff00000
 80199ac:	40080000 	.word	0x40080000
 80199b0:	0801e8b8 	.word	0x0801e8b8
 80199b4:	0801e8a8 	.word	0x0801e8a8
 80199b8:	a3b6      	add	r3, pc, #728	; (adr r3, 8019c94 <__ieee754_pow+0xa1c>)
 80199ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199be:	4640      	mov	r0, r8
 80199c0:	4649      	mov	r1, r9
 80199c2:	f7e6 fc6b 	bl	800029c <__adddf3>
 80199c6:	4622      	mov	r2, r4
 80199c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80199cc:	462b      	mov	r3, r5
 80199ce:	4630      	mov	r0, r6
 80199d0:	4639      	mov	r1, r7
 80199d2:	f7e6 fc61 	bl	8000298 <__aeabi_dsub>
 80199d6:	4602      	mov	r2, r0
 80199d8:	460b      	mov	r3, r1
 80199da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80199de:	f7e7 f89f 	bl	8000b20 <__aeabi_dcmpgt>
 80199e2:	2800      	cmp	r0, #0
 80199e4:	f47f adfe 	bne.w	80195e4 <__ieee754_pow+0x36c>
 80199e8:	4aa5      	ldr	r2, [pc, #660]	; (8019c80 <__ieee754_pow+0xa08>)
 80199ea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80199ee:	4293      	cmp	r3, r2
 80199f0:	f340 810c 	ble.w	8019c0c <__ieee754_pow+0x994>
 80199f4:	151b      	asrs	r3, r3, #20
 80199f6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80199fa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80199fe:	fa4a f303 	asr.w	r3, sl, r3
 8019a02:	445b      	add	r3, fp
 8019a04:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8019a08:	4e9e      	ldr	r6, [pc, #632]	; (8019c84 <__ieee754_pow+0xa0c>)
 8019a0a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8019a0e:	4116      	asrs	r6, r2
 8019a10:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8019a14:	2000      	movs	r0, #0
 8019a16:	ea23 0106 	bic.w	r1, r3, r6
 8019a1a:	f1c2 0214 	rsb	r2, r2, #20
 8019a1e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8019a22:	fa4a fa02 	asr.w	sl, sl, r2
 8019a26:	f1bb 0f00 	cmp.w	fp, #0
 8019a2a:	4602      	mov	r2, r0
 8019a2c:	460b      	mov	r3, r1
 8019a2e:	4620      	mov	r0, r4
 8019a30:	4629      	mov	r1, r5
 8019a32:	bfb8      	it	lt
 8019a34:	f1ca 0a00 	rsblt	sl, sl, #0
 8019a38:	f7e6 fc2e 	bl	8000298 <__aeabi_dsub>
 8019a3c:	e9cd 0100 	strd	r0, r1, [sp]
 8019a40:	4642      	mov	r2, r8
 8019a42:	464b      	mov	r3, r9
 8019a44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019a48:	f7e6 fc28 	bl	800029c <__adddf3>
 8019a4c:	2000      	movs	r0, #0
 8019a4e:	a37a      	add	r3, pc, #488	; (adr r3, 8019c38 <__ieee754_pow+0x9c0>)
 8019a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a54:	4604      	mov	r4, r0
 8019a56:	460d      	mov	r5, r1
 8019a58:	f7e6 fdd2 	bl	8000600 <__aeabi_dmul>
 8019a5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019a60:	4606      	mov	r6, r0
 8019a62:	460f      	mov	r7, r1
 8019a64:	4620      	mov	r0, r4
 8019a66:	4629      	mov	r1, r5
 8019a68:	f7e6 fc16 	bl	8000298 <__aeabi_dsub>
 8019a6c:	4602      	mov	r2, r0
 8019a6e:	460b      	mov	r3, r1
 8019a70:	4640      	mov	r0, r8
 8019a72:	4649      	mov	r1, r9
 8019a74:	f7e6 fc10 	bl	8000298 <__aeabi_dsub>
 8019a78:	a371      	add	r3, pc, #452	; (adr r3, 8019c40 <__ieee754_pow+0x9c8>)
 8019a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a7e:	f7e6 fdbf 	bl	8000600 <__aeabi_dmul>
 8019a82:	a371      	add	r3, pc, #452	; (adr r3, 8019c48 <__ieee754_pow+0x9d0>)
 8019a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a88:	4680      	mov	r8, r0
 8019a8a:	4689      	mov	r9, r1
 8019a8c:	4620      	mov	r0, r4
 8019a8e:	4629      	mov	r1, r5
 8019a90:	f7e6 fdb6 	bl	8000600 <__aeabi_dmul>
 8019a94:	4602      	mov	r2, r0
 8019a96:	460b      	mov	r3, r1
 8019a98:	4640      	mov	r0, r8
 8019a9a:	4649      	mov	r1, r9
 8019a9c:	f7e6 fbfe 	bl	800029c <__adddf3>
 8019aa0:	4604      	mov	r4, r0
 8019aa2:	460d      	mov	r5, r1
 8019aa4:	4602      	mov	r2, r0
 8019aa6:	460b      	mov	r3, r1
 8019aa8:	4630      	mov	r0, r6
 8019aaa:	4639      	mov	r1, r7
 8019aac:	f7e6 fbf6 	bl	800029c <__adddf3>
 8019ab0:	4632      	mov	r2, r6
 8019ab2:	463b      	mov	r3, r7
 8019ab4:	4680      	mov	r8, r0
 8019ab6:	4689      	mov	r9, r1
 8019ab8:	f7e6 fbee 	bl	8000298 <__aeabi_dsub>
 8019abc:	4602      	mov	r2, r0
 8019abe:	460b      	mov	r3, r1
 8019ac0:	4620      	mov	r0, r4
 8019ac2:	4629      	mov	r1, r5
 8019ac4:	f7e6 fbe8 	bl	8000298 <__aeabi_dsub>
 8019ac8:	4642      	mov	r2, r8
 8019aca:	4606      	mov	r6, r0
 8019acc:	460f      	mov	r7, r1
 8019ace:	464b      	mov	r3, r9
 8019ad0:	4640      	mov	r0, r8
 8019ad2:	4649      	mov	r1, r9
 8019ad4:	f7e6 fd94 	bl	8000600 <__aeabi_dmul>
 8019ad8:	a35d      	add	r3, pc, #372	; (adr r3, 8019c50 <__ieee754_pow+0x9d8>)
 8019ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ade:	4604      	mov	r4, r0
 8019ae0:	460d      	mov	r5, r1
 8019ae2:	f7e6 fd8d 	bl	8000600 <__aeabi_dmul>
 8019ae6:	a35c      	add	r3, pc, #368	; (adr r3, 8019c58 <__ieee754_pow+0x9e0>)
 8019ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019aec:	f7e6 fbd4 	bl	8000298 <__aeabi_dsub>
 8019af0:	4622      	mov	r2, r4
 8019af2:	462b      	mov	r3, r5
 8019af4:	f7e6 fd84 	bl	8000600 <__aeabi_dmul>
 8019af8:	a359      	add	r3, pc, #356	; (adr r3, 8019c60 <__ieee754_pow+0x9e8>)
 8019afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019afe:	f7e6 fbcd 	bl	800029c <__adddf3>
 8019b02:	4622      	mov	r2, r4
 8019b04:	462b      	mov	r3, r5
 8019b06:	f7e6 fd7b 	bl	8000600 <__aeabi_dmul>
 8019b0a:	a357      	add	r3, pc, #348	; (adr r3, 8019c68 <__ieee754_pow+0x9f0>)
 8019b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b10:	f7e6 fbc2 	bl	8000298 <__aeabi_dsub>
 8019b14:	4622      	mov	r2, r4
 8019b16:	462b      	mov	r3, r5
 8019b18:	f7e6 fd72 	bl	8000600 <__aeabi_dmul>
 8019b1c:	a354      	add	r3, pc, #336	; (adr r3, 8019c70 <__ieee754_pow+0x9f8>)
 8019b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b22:	f7e6 fbbb 	bl	800029c <__adddf3>
 8019b26:	4622      	mov	r2, r4
 8019b28:	462b      	mov	r3, r5
 8019b2a:	f7e6 fd69 	bl	8000600 <__aeabi_dmul>
 8019b2e:	4602      	mov	r2, r0
 8019b30:	460b      	mov	r3, r1
 8019b32:	4640      	mov	r0, r8
 8019b34:	4649      	mov	r1, r9
 8019b36:	f7e6 fbaf 	bl	8000298 <__aeabi_dsub>
 8019b3a:	4604      	mov	r4, r0
 8019b3c:	460d      	mov	r5, r1
 8019b3e:	4602      	mov	r2, r0
 8019b40:	460b      	mov	r3, r1
 8019b42:	4640      	mov	r0, r8
 8019b44:	4649      	mov	r1, r9
 8019b46:	f7e6 fd5b 	bl	8000600 <__aeabi_dmul>
 8019b4a:	2200      	movs	r2, #0
 8019b4c:	e9cd 0100 	strd	r0, r1, [sp]
 8019b50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8019b54:	4620      	mov	r0, r4
 8019b56:	4629      	mov	r1, r5
 8019b58:	f7e6 fb9e 	bl	8000298 <__aeabi_dsub>
 8019b5c:	4602      	mov	r2, r0
 8019b5e:	460b      	mov	r3, r1
 8019b60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019b64:	f7e6 fe76 	bl	8000854 <__aeabi_ddiv>
 8019b68:	4632      	mov	r2, r6
 8019b6a:	4604      	mov	r4, r0
 8019b6c:	460d      	mov	r5, r1
 8019b6e:	463b      	mov	r3, r7
 8019b70:	4640      	mov	r0, r8
 8019b72:	4649      	mov	r1, r9
 8019b74:	f7e6 fd44 	bl	8000600 <__aeabi_dmul>
 8019b78:	4632      	mov	r2, r6
 8019b7a:	463b      	mov	r3, r7
 8019b7c:	f7e6 fb8e 	bl	800029c <__adddf3>
 8019b80:	4602      	mov	r2, r0
 8019b82:	460b      	mov	r3, r1
 8019b84:	4620      	mov	r0, r4
 8019b86:	4629      	mov	r1, r5
 8019b88:	f7e6 fb86 	bl	8000298 <__aeabi_dsub>
 8019b8c:	4642      	mov	r2, r8
 8019b8e:	464b      	mov	r3, r9
 8019b90:	f7e6 fb82 	bl	8000298 <__aeabi_dsub>
 8019b94:	4602      	mov	r2, r0
 8019b96:	460b      	mov	r3, r1
 8019b98:	2000      	movs	r0, #0
 8019b9a:	493b      	ldr	r1, [pc, #236]	; (8019c88 <__ieee754_pow+0xa10>)
 8019b9c:	f7e6 fb7c 	bl	8000298 <__aeabi_dsub>
 8019ba0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8019ba4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8019ba8:	4602      	mov	r2, r0
 8019baa:	460b      	mov	r3, r1
 8019bac:	da31      	bge.n	8019c12 <__ieee754_pow+0x99a>
 8019bae:	4650      	mov	r0, sl
 8019bb0:	ec43 2b10 	vmov	d0, r2, r3
 8019bb4:	f001 f9c8 	bl	801af48 <scalbn>
 8019bb8:	ec51 0b10 	vmov	r0, r1, d0
 8019bbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019bc0:	f7ff bbf1 	b.w	80193a6 <__ieee754_pow+0x12e>
 8019bc4:	4b31      	ldr	r3, [pc, #196]	; (8019c8c <__ieee754_pow+0xa14>)
 8019bc6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8019bca:	429e      	cmp	r6, r3
 8019bcc:	f77f af0c 	ble.w	80199e8 <__ieee754_pow+0x770>
 8019bd0:	4b2f      	ldr	r3, [pc, #188]	; (8019c90 <__ieee754_pow+0xa18>)
 8019bd2:	440b      	add	r3, r1
 8019bd4:	4303      	orrs	r3, r0
 8019bd6:	d00b      	beq.n	8019bf0 <__ieee754_pow+0x978>
 8019bd8:	a327      	add	r3, pc, #156	; (adr r3, 8019c78 <__ieee754_pow+0xa00>)
 8019bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019be2:	f7e6 fd0d 	bl	8000600 <__aeabi_dmul>
 8019be6:	a324      	add	r3, pc, #144	; (adr r3, 8019c78 <__ieee754_pow+0xa00>)
 8019be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bec:	f7ff bbdb 	b.w	80193a6 <__ieee754_pow+0x12e>
 8019bf0:	4622      	mov	r2, r4
 8019bf2:	462b      	mov	r3, r5
 8019bf4:	f7e6 fb50 	bl	8000298 <__aeabi_dsub>
 8019bf8:	4602      	mov	r2, r0
 8019bfa:	460b      	mov	r3, r1
 8019bfc:	4640      	mov	r0, r8
 8019bfe:	4649      	mov	r1, r9
 8019c00:	f7e6 ff7a 	bl	8000af8 <__aeabi_dcmple>
 8019c04:	2800      	cmp	r0, #0
 8019c06:	f43f aeef 	beq.w	80199e8 <__ieee754_pow+0x770>
 8019c0a:	e7e5      	b.n	8019bd8 <__ieee754_pow+0x960>
 8019c0c:	f04f 0a00 	mov.w	sl, #0
 8019c10:	e716      	b.n	8019a40 <__ieee754_pow+0x7c8>
 8019c12:	4621      	mov	r1, r4
 8019c14:	e7d2      	b.n	8019bbc <__ieee754_pow+0x944>
 8019c16:	2000      	movs	r0, #0
 8019c18:	491b      	ldr	r1, [pc, #108]	; (8019c88 <__ieee754_pow+0xa10>)
 8019c1a:	f7ff bb8d 	b.w	8019338 <__ieee754_pow+0xc0>
 8019c1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019c22:	f7ff bb89 	b.w	8019338 <__ieee754_pow+0xc0>
 8019c26:	4630      	mov	r0, r6
 8019c28:	4639      	mov	r1, r7
 8019c2a:	f7ff bb85 	b.w	8019338 <__ieee754_pow+0xc0>
 8019c2e:	4693      	mov	fp, r2
 8019c30:	f7ff bb96 	b.w	8019360 <__ieee754_pow+0xe8>
 8019c34:	f3af 8000 	nop.w
 8019c38:	00000000 	.word	0x00000000
 8019c3c:	3fe62e43 	.word	0x3fe62e43
 8019c40:	fefa39ef 	.word	0xfefa39ef
 8019c44:	3fe62e42 	.word	0x3fe62e42
 8019c48:	0ca86c39 	.word	0x0ca86c39
 8019c4c:	be205c61 	.word	0xbe205c61
 8019c50:	72bea4d0 	.word	0x72bea4d0
 8019c54:	3e663769 	.word	0x3e663769
 8019c58:	c5d26bf1 	.word	0xc5d26bf1
 8019c5c:	3ebbbd41 	.word	0x3ebbbd41
 8019c60:	af25de2c 	.word	0xaf25de2c
 8019c64:	3f11566a 	.word	0x3f11566a
 8019c68:	16bebd93 	.word	0x16bebd93
 8019c6c:	3f66c16c 	.word	0x3f66c16c
 8019c70:	5555553e 	.word	0x5555553e
 8019c74:	3fc55555 	.word	0x3fc55555
 8019c78:	c2f8f359 	.word	0xc2f8f359
 8019c7c:	01a56e1f 	.word	0x01a56e1f
 8019c80:	3fe00000 	.word	0x3fe00000
 8019c84:	000fffff 	.word	0x000fffff
 8019c88:	3ff00000 	.word	0x3ff00000
 8019c8c:	4090cbff 	.word	0x4090cbff
 8019c90:	3f6f3400 	.word	0x3f6f3400
 8019c94:	652b82fe 	.word	0x652b82fe
 8019c98:	3c971547 	.word	0x3c971547

08019c9c <__ieee754_sqrt>:
 8019c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ca0:	ec55 4b10 	vmov	r4, r5, d0
 8019ca4:	4e54      	ldr	r6, [pc, #336]	; (8019df8 <__ieee754_sqrt+0x15c>)
 8019ca6:	43ae      	bics	r6, r5
 8019ca8:	ee10 0a10 	vmov	r0, s0
 8019cac:	462b      	mov	r3, r5
 8019cae:	462a      	mov	r2, r5
 8019cb0:	4621      	mov	r1, r4
 8019cb2:	d113      	bne.n	8019cdc <__ieee754_sqrt+0x40>
 8019cb4:	ee10 2a10 	vmov	r2, s0
 8019cb8:	462b      	mov	r3, r5
 8019cba:	ee10 0a10 	vmov	r0, s0
 8019cbe:	4629      	mov	r1, r5
 8019cc0:	f7e6 fc9e 	bl	8000600 <__aeabi_dmul>
 8019cc4:	4602      	mov	r2, r0
 8019cc6:	460b      	mov	r3, r1
 8019cc8:	4620      	mov	r0, r4
 8019cca:	4629      	mov	r1, r5
 8019ccc:	f7e6 fae6 	bl	800029c <__adddf3>
 8019cd0:	4604      	mov	r4, r0
 8019cd2:	460d      	mov	r5, r1
 8019cd4:	ec45 4b10 	vmov	d0, r4, r5
 8019cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019cdc:	2d00      	cmp	r5, #0
 8019cde:	dc10      	bgt.n	8019d02 <__ieee754_sqrt+0x66>
 8019ce0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019ce4:	4330      	orrs	r0, r6
 8019ce6:	d0f5      	beq.n	8019cd4 <__ieee754_sqrt+0x38>
 8019ce8:	b15d      	cbz	r5, 8019d02 <__ieee754_sqrt+0x66>
 8019cea:	ee10 2a10 	vmov	r2, s0
 8019cee:	462b      	mov	r3, r5
 8019cf0:	4620      	mov	r0, r4
 8019cf2:	4629      	mov	r1, r5
 8019cf4:	f7e6 fad0 	bl	8000298 <__aeabi_dsub>
 8019cf8:	4602      	mov	r2, r0
 8019cfa:	460b      	mov	r3, r1
 8019cfc:	f7e6 fdaa 	bl	8000854 <__aeabi_ddiv>
 8019d00:	e7e6      	b.n	8019cd0 <__ieee754_sqrt+0x34>
 8019d02:	151b      	asrs	r3, r3, #20
 8019d04:	d10c      	bne.n	8019d20 <__ieee754_sqrt+0x84>
 8019d06:	2a00      	cmp	r2, #0
 8019d08:	d06d      	beq.n	8019de6 <__ieee754_sqrt+0x14a>
 8019d0a:	2000      	movs	r0, #0
 8019d0c:	02d6      	lsls	r6, r2, #11
 8019d0e:	d56e      	bpl.n	8019dee <__ieee754_sqrt+0x152>
 8019d10:	1e44      	subs	r4, r0, #1
 8019d12:	1b1b      	subs	r3, r3, r4
 8019d14:	f1c0 0420 	rsb	r4, r0, #32
 8019d18:	fa21 f404 	lsr.w	r4, r1, r4
 8019d1c:	4322      	orrs	r2, r4
 8019d1e:	4081      	lsls	r1, r0
 8019d20:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019d24:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8019d28:	07dd      	lsls	r5, r3, #31
 8019d2a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8019d2e:	bf42      	ittt	mi
 8019d30:	0052      	lslmi	r2, r2, #1
 8019d32:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8019d36:	0049      	lslmi	r1, r1, #1
 8019d38:	1058      	asrs	r0, r3, #1
 8019d3a:	2500      	movs	r5, #0
 8019d3c:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8019d40:	441a      	add	r2, r3
 8019d42:	0049      	lsls	r1, r1, #1
 8019d44:	2316      	movs	r3, #22
 8019d46:	462c      	mov	r4, r5
 8019d48:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8019d4c:	19a7      	adds	r7, r4, r6
 8019d4e:	4297      	cmp	r7, r2
 8019d50:	bfde      	ittt	le
 8019d52:	1bd2      	suble	r2, r2, r7
 8019d54:	19bc      	addle	r4, r7, r6
 8019d56:	19ad      	addle	r5, r5, r6
 8019d58:	0052      	lsls	r2, r2, #1
 8019d5a:	3b01      	subs	r3, #1
 8019d5c:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8019d60:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8019d64:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8019d68:	d1f0      	bne.n	8019d4c <__ieee754_sqrt+0xb0>
 8019d6a:	f04f 0e20 	mov.w	lr, #32
 8019d6e:	469c      	mov	ip, r3
 8019d70:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8019d74:	42a2      	cmp	r2, r4
 8019d76:	eb06 070c 	add.w	r7, r6, ip
 8019d7a:	dc02      	bgt.n	8019d82 <__ieee754_sqrt+0xe6>
 8019d7c:	d112      	bne.n	8019da4 <__ieee754_sqrt+0x108>
 8019d7e:	428f      	cmp	r7, r1
 8019d80:	d810      	bhi.n	8019da4 <__ieee754_sqrt+0x108>
 8019d82:	2f00      	cmp	r7, #0
 8019d84:	eb07 0c06 	add.w	ip, r7, r6
 8019d88:	da34      	bge.n	8019df4 <__ieee754_sqrt+0x158>
 8019d8a:	f1bc 0f00 	cmp.w	ip, #0
 8019d8e:	db31      	blt.n	8019df4 <__ieee754_sqrt+0x158>
 8019d90:	f104 0801 	add.w	r8, r4, #1
 8019d94:	1b12      	subs	r2, r2, r4
 8019d96:	428f      	cmp	r7, r1
 8019d98:	bf88      	it	hi
 8019d9a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8019d9e:	1bc9      	subs	r1, r1, r7
 8019da0:	4433      	add	r3, r6
 8019da2:	4644      	mov	r4, r8
 8019da4:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8019da8:	f1be 0e01 	subs.w	lr, lr, #1
 8019dac:	443a      	add	r2, r7
 8019dae:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8019db2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8019db6:	d1dd      	bne.n	8019d74 <__ieee754_sqrt+0xd8>
 8019db8:	430a      	orrs	r2, r1
 8019dba:	d006      	beq.n	8019dca <__ieee754_sqrt+0x12e>
 8019dbc:	1c5c      	adds	r4, r3, #1
 8019dbe:	bf13      	iteet	ne
 8019dc0:	3301      	addne	r3, #1
 8019dc2:	3501      	addeq	r5, #1
 8019dc4:	4673      	moveq	r3, lr
 8019dc6:	f023 0301 	bicne.w	r3, r3, #1
 8019dca:	106a      	asrs	r2, r5, #1
 8019dcc:	085b      	lsrs	r3, r3, #1
 8019dce:	07e9      	lsls	r1, r5, #31
 8019dd0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8019dd4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8019dd8:	bf48      	it	mi
 8019dda:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8019dde:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8019de2:	461c      	mov	r4, r3
 8019de4:	e776      	b.n	8019cd4 <__ieee754_sqrt+0x38>
 8019de6:	0aca      	lsrs	r2, r1, #11
 8019de8:	3b15      	subs	r3, #21
 8019dea:	0549      	lsls	r1, r1, #21
 8019dec:	e78b      	b.n	8019d06 <__ieee754_sqrt+0x6a>
 8019dee:	0052      	lsls	r2, r2, #1
 8019df0:	3001      	adds	r0, #1
 8019df2:	e78b      	b.n	8019d0c <__ieee754_sqrt+0x70>
 8019df4:	46a0      	mov	r8, r4
 8019df6:	e7cd      	b.n	8019d94 <__ieee754_sqrt+0xf8>
 8019df8:	7ff00000 	.word	0x7ff00000

08019dfc <__ieee754_acosf>:
 8019dfc:	b508      	push	{r3, lr}
 8019dfe:	ee10 3a10 	vmov	r3, s0
 8019e02:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8019e06:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8019e0a:	ed2d 8b0c 	vpush	{d8-d13}
 8019e0e:	d10a      	bne.n	8019e26 <__ieee754_acosf+0x2a>
 8019e10:	ed9f 8a67 	vldr	s16, [pc, #412]	; 8019fb0 <__ieee754_acosf+0x1b4>
 8019e14:	ed9f 0a67 	vldr	s0, [pc, #412]	; 8019fb4 <__ieee754_acosf+0x1b8>
 8019e18:	2b00      	cmp	r3, #0
 8019e1a:	bfd8      	it	le
 8019e1c:	eeb0 0a48 	vmovle.f32	s0, s16
 8019e20:	ecbd 8b0c 	vpop	{d8-d13}
 8019e24:	bd08      	pop	{r3, pc}
 8019e26:	dd04      	ble.n	8019e32 <__ieee754_acosf+0x36>
 8019e28:	ee30 8a40 	vsub.f32	s16, s0, s0
 8019e2c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8019e30:	e7f6      	b.n	8019e20 <__ieee754_acosf+0x24>
 8019e32:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 8019e36:	da3e      	bge.n	8019eb6 <__ieee754_acosf+0xba>
 8019e38:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 8019e3c:	f340 80b5 	ble.w	8019faa <__ieee754_acosf+0x1ae>
 8019e40:	ee60 7a00 	vmul.f32	s15, s0, s0
 8019e44:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8019fb8 <__ieee754_acosf+0x1bc>
 8019e48:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8019fbc <__ieee754_acosf+0x1c0>
 8019e4c:	ed9f 6a5c 	vldr	s12, [pc, #368]	; 8019fc0 <__ieee754_acosf+0x1c4>
 8019e50:	ed9f 8a5c 	vldr	s16, [pc, #368]	; 8019fc4 <__ieee754_acosf+0x1c8>
 8019e54:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8019e58:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8019fc8 <__ieee754_acosf+0x1cc>
 8019e5c:	eee7 6a87 	vfma.f32	s13, s15, s14
 8019e60:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8019fcc <__ieee754_acosf+0x1d0>
 8019e64:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8019e68:	eddf 6a59 	vldr	s13, [pc, #356]	; 8019fd0 <__ieee754_acosf+0x1d4>
 8019e6c:	eee7 6a87 	vfma.f32	s13, s15, s14
 8019e70:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8019fd4 <__ieee754_acosf+0x1d8>
 8019e74:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8019e78:	eddf 6a57 	vldr	s13, [pc, #348]	; 8019fd8 <__ieee754_acosf+0x1dc>
 8019e7c:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8019e80:	eddf 6a56 	vldr	s13, [pc, #344]	; 8019fdc <__ieee754_acosf+0x1e0>
 8019e84:	eee7 6a86 	vfma.f32	s13, s15, s12
 8019e88:	ed9f 6a55 	vldr	s12, [pc, #340]	; 8019fe0 <__ieee754_acosf+0x1e4>
 8019e8c:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8019e90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019e94:	eee7 6a86 	vfma.f32	s13, s15, s12
 8019e98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019e9c:	eef0 7a66 	vmov.f32	s15, s13
 8019ea0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8019ea4:	eea0 8a66 	vfms.f32	s16, s0, s13
 8019ea8:	ee30 8a48 	vsub.f32	s16, s0, s16
 8019eac:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8019fe4 <__ieee754_acosf+0x1e8>
 8019eb0:	ee30 0a48 	vsub.f32	s0, s0, s16
 8019eb4:	e7b4      	b.n	8019e20 <__ieee754_acosf+0x24>
 8019eb6:	2b00      	cmp	r3, #0
 8019eb8:	eddf da3f 	vldr	s27, [pc, #252]	; 8019fb8 <__ieee754_acosf+0x1bc>
 8019ebc:	eddf ca3f 	vldr	s25, [pc, #252]	; 8019fbc <__ieee754_acosf+0x1c0>
 8019ec0:	ed9f ca41 	vldr	s24, [pc, #260]	; 8019fc8 <__ieee754_acosf+0x1cc>
 8019ec4:	eddf ba41 	vldr	s23, [pc, #260]	; 8019fcc <__ieee754_acosf+0x1d0>
 8019ec8:	ed9f ba41 	vldr	s22, [pc, #260]	; 8019fd0 <__ieee754_acosf+0x1d4>
 8019ecc:	eddf 8a41 	vldr	s17, [pc, #260]	; 8019fd4 <__ieee754_acosf+0x1d8>
 8019ed0:	ed9f da41 	vldr	s26, [pc, #260]	; 8019fd8 <__ieee754_acosf+0x1dc>
 8019ed4:	eddf aa3a 	vldr	s21, [pc, #232]	; 8019fc0 <__ieee754_acosf+0x1c4>
 8019ed8:	ed9f aa40 	vldr	s20, [pc, #256]	; 8019fdc <__ieee754_acosf+0x1e0>
 8019edc:	eddf 9a40 	vldr	s19, [pc, #256]	; 8019fe0 <__ieee754_acosf+0x1e4>
 8019ee0:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8019ee4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8019ee8:	da28      	bge.n	8019f3c <__ieee754_acosf+0x140>
 8019eea:	ee30 0a09 	vadd.f32	s0, s0, s18
 8019eee:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019ef2:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8019ef6:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8019efa:	eea0 ca2c 	vfma.f32	s24, s0, s25
 8019efe:	eea0 aa2a 	vfma.f32	s20, s0, s21
 8019f02:	eee0 ba0c 	vfma.f32	s23, s0, s24
 8019f06:	eee0 9a0a 	vfma.f32	s19, s0, s20
 8019f0a:	eea0 ba2b 	vfma.f32	s22, s0, s23
 8019f0e:	eea0 9a29 	vfma.f32	s18, s0, s19
 8019f12:	eee0 8a0b 	vfma.f32	s17, s0, s22
 8019f16:	ee68 8a80 	vmul.f32	s17, s17, s0
 8019f1a:	f000 f997 	bl	801a24c <__ieee754_sqrtf>
 8019f1e:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8019f22:	eddf 7a31 	vldr	s15, [pc, #196]	; 8019fe8 <__ieee754_acosf+0x1ec>
 8019f26:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019f2a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8019f2e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019f32:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8019fec <__ieee754_acosf+0x1f0>
 8019f36:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8019f3a:	e771      	b.n	8019e20 <__ieee754_acosf+0x24>
 8019f3c:	ee39 8a40 	vsub.f32	s16, s18, s0
 8019f40:	ee28 8a27 	vmul.f32	s16, s16, s15
 8019f44:	eeb0 0a48 	vmov.f32	s0, s16
 8019f48:	f000 f980 	bl	801a24c <__ieee754_sqrtf>
 8019f4c:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8019f50:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8019f54:	eea8 ca2c 	vfma.f32	s24, s16, s25
 8019f58:	eea8 aa2a 	vfma.f32	s20, s16, s21
 8019f5c:	eee8 ba0c 	vfma.f32	s23, s16, s24
 8019f60:	ee10 3a10 	vmov	r3, s0
 8019f64:	eea8 ba2b 	vfma.f32	s22, s16, s23
 8019f68:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8019f6c:	f023 030f 	bic.w	r3, r3, #15
 8019f70:	eee8 9a0a 	vfma.f32	s19, s16, s20
 8019f74:	ee07 3a90 	vmov	s15, r3
 8019f78:	eee8 8a0b 	vfma.f32	s17, s16, s22
 8019f7c:	eeb0 6a48 	vmov.f32	s12, s16
 8019f80:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8019f84:	eea8 9a29 	vfma.f32	s18, s16, s19
 8019f88:	ee77 6a80 	vadd.f32	s13, s15, s0
 8019f8c:	ee68 8a88 	vmul.f32	s17, s17, s16
 8019f90:	eeb0 7a40 	vmov.f32	s14, s0
 8019f94:	ee86 0a26 	vdiv.f32	s0, s12, s13
 8019f98:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8019f9c:	eea7 0a26 	vfma.f32	s0, s14, s13
 8019fa0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019fa4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019fa8:	e73a      	b.n	8019e20 <__ieee754_acosf+0x24>
 8019faa:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8019ff0 <__ieee754_acosf+0x1f4>
 8019fae:	e737      	b.n	8019e20 <__ieee754_acosf+0x24>
 8019fb0:	40490fdb 	.word	0x40490fdb
 8019fb4:	00000000 	.word	0x00000000
 8019fb8:	3811ef08 	.word	0x3811ef08
 8019fbc:	3a4f7f04 	.word	0x3a4f7f04
 8019fc0:	bf303361 	.word	0xbf303361
 8019fc4:	33a22168 	.word	0x33a22168
 8019fc8:	bd241146 	.word	0xbd241146
 8019fcc:	3e4e0aa8 	.word	0x3e4e0aa8
 8019fd0:	bea6b090 	.word	0xbea6b090
 8019fd4:	3e2aaaab 	.word	0x3e2aaaab
 8019fd8:	3d9dc62e 	.word	0x3d9dc62e
 8019fdc:	4001572d 	.word	0x4001572d
 8019fe0:	c019d139 	.word	0xc019d139
 8019fe4:	3fc90fda 	.word	0x3fc90fda
 8019fe8:	b3a22168 	.word	0xb3a22168
 8019fec:	40490fda 	.word	0x40490fda
 8019ff0:	3fc90fdb 	.word	0x3fc90fdb

08019ff4 <__ieee754_rem_pio2f>:
 8019ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019ff6:	ee10 6a10 	vmov	r6, s0
 8019ffa:	4b86      	ldr	r3, [pc, #536]	; (801a214 <__ieee754_rem_pio2f+0x220>)
 8019ffc:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 801a000:	429c      	cmp	r4, r3
 801a002:	b087      	sub	sp, #28
 801a004:	4605      	mov	r5, r0
 801a006:	dc05      	bgt.n	801a014 <__ieee754_rem_pio2f+0x20>
 801a008:	2300      	movs	r3, #0
 801a00a:	ed85 0a00 	vstr	s0, [r5]
 801a00e:	6043      	str	r3, [r0, #4]
 801a010:	2000      	movs	r0, #0
 801a012:	e020      	b.n	801a056 <__ieee754_rem_pio2f+0x62>
 801a014:	4b80      	ldr	r3, [pc, #512]	; (801a218 <__ieee754_rem_pio2f+0x224>)
 801a016:	429c      	cmp	r4, r3
 801a018:	dc38      	bgt.n	801a08c <__ieee754_rem_pio2f+0x98>
 801a01a:	2e00      	cmp	r6, #0
 801a01c:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 801a21c <__ieee754_rem_pio2f+0x228>
 801a020:	4b7f      	ldr	r3, [pc, #508]	; (801a220 <__ieee754_rem_pio2f+0x22c>)
 801a022:	f024 040f 	bic.w	r4, r4, #15
 801a026:	dd18      	ble.n	801a05a <__ieee754_rem_pio2f+0x66>
 801a028:	429c      	cmp	r4, r3
 801a02a:	ee70 7a47 	vsub.f32	s15, s0, s14
 801a02e:	bf09      	itett	eq
 801a030:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 801a224 <__ieee754_rem_pio2f+0x230>
 801a034:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 801a228 <__ieee754_rem_pio2f+0x234>
 801a038:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801a03c:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 801a22c <__ieee754_rem_pio2f+0x238>
 801a040:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801a044:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a048:	edc0 6a00 	vstr	s13, [r0]
 801a04c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a050:	edc0 7a01 	vstr	s15, [r0, #4]
 801a054:	2001      	movs	r0, #1
 801a056:	b007      	add	sp, #28
 801a058:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a05a:	429c      	cmp	r4, r3
 801a05c:	ee70 7a07 	vadd.f32	s15, s0, s14
 801a060:	bf09      	itett	eq
 801a062:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 801a224 <__ieee754_rem_pio2f+0x230>
 801a066:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 801a228 <__ieee754_rem_pio2f+0x234>
 801a06a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801a06e:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 801a22c <__ieee754_rem_pio2f+0x238>
 801a072:	ee77 6a87 	vadd.f32	s13, s15, s14
 801a076:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a07a:	edc0 6a00 	vstr	s13, [r0]
 801a07e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a082:	edc0 7a01 	vstr	s15, [r0, #4]
 801a086:	f04f 30ff 	mov.w	r0, #4294967295
 801a08a:	e7e4      	b.n	801a056 <__ieee754_rem_pio2f+0x62>
 801a08c:	4b68      	ldr	r3, [pc, #416]	; (801a230 <__ieee754_rem_pio2f+0x23c>)
 801a08e:	429c      	cmp	r4, r3
 801a090:	dc71      	bgt.n	801a176 <__ieee754_rem_pio2f+0x182>
 801a092:	f000 ffd3 	bl	801b03c <fabsf>
 801a096:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801a234 <__ieee754_rem_pio2f+0x240>
 801a09a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801a09e:	eee0 7a07 	vfma.f32	s15, s0, s14
 801a0a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a0a6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801a0aa:	ee17 0a90 	vmov	r0, s15
 801a0ae:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801a21c <__ieee754_rem_pio2f+0x228>
 801a0b2:	eeb1 7a46 	vneg.f32	s14, s12
 801a0b6:	eea7 0a27 	vfma.f32	s0, s14, s15
 801a0ba:	281f      	cmp	r0, #31
 801a0bc:	eddf 7a5a 	vldr	s15, [pc, #360]	; 801a228 <__ieee754_rem_pio2f+0x234>
 801a0c0:	ee66 7a27 	vmul.f32	s15, s12, s15
 801a0c4:	ee70 6a67 	vsub.f32	s13, s0, s15
 801a0c8:	ee16 3a90 	vmov	r3, s13
 801a0cc:	dc1c      	bgt.n	801a108 <__ieee754_rem_pio2f+0x114>
 801a0ce:	1e47      	subs	r7, r0, #1
 801a0d0:	4959      	ldr	r1, [pc, #356]	; (801a238 <__ieee754_rem_pio2f+0x244>)
 801a0d2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801a0d6:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 801a0da:	428a      	cmp	r2, r1
 801a0dc:	d014      	beq.n	801a108 <__ieee754_rem_pio2f+0x114>
 801a0de:	602b      	str	r3, [r5, #0]
 801a0e0:	ed95 7a00 	vldr	s14, [r5]
 801a0e4:	ee30 0a47 	vsub.f32	s0, s0, s14
 801a0e8:	2e00      	cmp	r6, #0
 801a0ea:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a0ee:	ed85 0a01 	vstr	s0, [r5, #4]
 801a0f2:	dab0      	bge.n	801a056 <__ieee754_rem_pio2f+0x62>
 801a0f4:	eeb1 7a47 	vneg.f32	s14, s14
 801a0f8:	eeb1 0a40 	vneg.f32	s0, s0
 801a0fc:	ed85 7a00 	vstr	s14, [r5]
 801a100:	ed85 0a01 	vstr	s0, [r5, #4]
 801a104:	4240      	negs	r0, r0
 801a106:	e7a6      	b.n	801a056 <__ieee754_rem_pio2f+0x62>
 801a108:	15e4      	asrs	r4, r4, #23
 801a10a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801a10e:	1aa2      	subs	r2, r4, r2
 801a110:	2a08      	cmp	r2, #8
 801a112:	dde4      	ble.n	801a0de <__ieee754_rem_pio2f+0xea>
 801a114:	eddf 7a43 	vldr	s15, [pc, #268]	; 801a224 <__ieee754_rem_pio2f+0x230>
 801a118:	eef0 6a40 	vmov.f32	s13, s0
 801a11c:	eee7 6a27 	vfma.f32	s13, s14, s15
 801a120:	ee30 0a66 	vsub.f32	s0, s0, s13
 801a124:	eea7 0a27 	vfma.f32	s0, s14, s15
 801a128:	eddf 7a40 	vldr	s15, [pc, #256]	; 801a22c <__ieee754_rem_pio2f+0x238>
 801a12c:	ee96 0a27 	vfnms.f32	s0, s12, s15
 801a130:	ee76 5ac0 	vsub.f32	s11, s13, s0
 801a134:	eef0 7a40 	vmov.f32	s15, s0
 801a138:	ee15 3a90 	vmov	r3, s11
 801a13c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801a140:	1aa4      	subs	r4, r4, r2
 801a142:	2c19      	cmp	r4, #25
 801a144:	dc04      	bgt.n	801a150 <__ieee754_rem_pio2f+0x15c>
 801a146:	edc5 5a00 	vstr	s11, [r5]
 801a14a:	eeb0 0a66 	vmov.f32	s0, s13
 801a14e:	e7c7      	b.n	801a0e0 <__ieee754_rem_pio2f+0xec>
 801a150:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801a23c <__ieee754_rem_pio2f+0x248>
 801a154:	eeb0 0a66 	vmov.f32	s0, s13
 801a158:	eea7 0a25 	vfma.f32	s0, s14, s11
 801a15c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801a160:	eee7 7a25 	vfma.f32	s15, s14, s11
 801a164:	ed9f 7a36 	vldr	s14, [pc, #216]	; 801a240 <__ieee754_rem_pio2f+0x24c>
 801a168:	eed6 7a07 	vfnms.f32	s15, s12, s14
 801a16c:	ee30 7a67 	vsub.f32	s14, s0, s15
 801a170:	ed85 7a00 	vstr	s14, [r5]
 801a174:	e7b4      	b.n	801a0e0 <__ieee754_rem_pio2f+0xec>
 801a176:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801a17a:	db06      	blt.n	801a18a <__ieee754_rem_pio2f+0x196>
 801a17c:	ee70 7a40 	vsub.f32	s15, s0, s0
 801a180:	edc0 7a01 	vstr	s15, [r0, #4]
 801a184:	edc0 7a00 	vstr	s15, [r0]
 801a188:	e742      	b.n	801a010 <__ieee754_rem_pio2f+0x1c>
 801a18a:	15e2      	asrs	r2, r4, #23
 801a18c:	3a86      	subs	r2, #134	; 0x86
 801a18e:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 801a192:	ee07 3a90 	vmov	s15, r3
 801a196:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801a19a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 801a244 <__ieee754_rem_pio2f+0x250>
 801a19e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a1a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a1a6:	ed8d 7a03 	vstr	s14, [sp, #12]
 801a1aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a1ae:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801a1b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a1b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a1ba:	ed8d 7a04 	vstr	s14, [sp, #16]
 801a1be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a1c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 801a1c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a1ca:	edcd 7a05 	vstr	s15, [sp, #20]
 801a1ce:	d11e      	bne.n	801a20e <__ieee754_rem_pio2f+0x21a>
 801a1d0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801a1d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a1d8:	bf14      	ite	ne
 801a1da:	2302      	movne	r3, #2
 801a1dc:	2301      	moveq	r3, #1
 801a1de:	491a      	ldr	r1, [pc, #104]	; (801a248 <__ieee754_rem_pio2f+0x254>)
 801a1e0:	9101      	str	r1, [sp, #4]
 801a1e2:	2102      	movs	r1, #2
 801a1e4:	9100      	str	r1, [sp, #0]
 801a1e6:	a803      	add	r0, sp, #12
 801a1e8:	4629      	mov	r1, r5
 801a1ea:	f000 f8d5 	bl	801a398 <__kernel_rem_pio2f>
 801a1ee:	2e00      	cmp	r6, #0
 801a1f0:	f6bf af31 	bge.w	801a056 <__ieee754_rem_pio2f+0x62>
 801a1f4:	edd5 7a00 	vldr	s15, [r5]
 801a1f8:	eef1 7a67 	vneg.f32	s15, s15
 801a1fc:	edc5 7a00 	vstr	s15, [r5]
 801a200:	edd5 7a01 	vldr	s15, [r5, #4]
 801a204:	eef1 7a67 	vneg.f32	s15, s15
 801a208:	edc5 7a01 	vstr	s15, [r5, #4]
 801a20c:	e77a      	b.n	801a104 <__ieee754_rem_pio2f+0x110>
 801a20e:	2303      	movs	r3, #3
 801a210:	e7e5      	b.n	801a1de <__ieee754_rem_pio2f+0x1ea>
 801a212:	bf00      	nop
 801a214:	3f490fd8 	.word	0x3f490fd8
 801a218:	4016cbe3 	.word	0x4016cbe3
 801a21c:	3fc90f80 	.word	0x3fc90f80
 801a220:	3fc90fd0 	.word	0x3fc90fd0
 801a224:	37354400 	.word	0x37354400
 801a228:	37354443 	.word	0x37354443
 801a22c:	2e85a308 	.word	0x2e85a308
 801a230:	43490f80 	.word	0x43490f80
 801a234:	3f22f984 	.word	0x3f22f984
 801a238:	0801e8c8 	.word	0x0801e8c8
 801a23c:	2e85a300 	.word	0x2e85a300
 801a240:	248d3132 	.word	0x248d3132
 801a244:	43800000 	.word	0x43800000
 801a248:	0801e948 	.word	0x0801e948

0801a24c <__ieee754_sqrtf>:
 801a24c:	ee10 2a10 	vmov	r2, s0
 801a250:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801a254:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801a258:	b570      	push	{r4, r5, r6, lr}
 801a25a:	d302      	bcc.n	801a262 <__ieee754_sqrtf+0x16>
 801a25c:	eea0 0a00 	vfma.f32	s0, s0, s0
 801a260:	bd70      	pop	{r4, r5, r6, pc}
 801a262:	b3b1      	cbz	r1, 801a2d2 <__ieee754_sqrtf+0x86>
 801a264:	2a00      	cmp	r2, #0
 801a266:	da04      	bge.n	801a272 <__ieee754_sqrtf+0x26>
 801a268:	ee70 7a40 	vsub.f32	s15, s0, s0
 801a26c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801a270:	bd70      	pop	{r4, r5, r6, pc}
 801a272:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 801a276:	ea4f 53e2 	mov.w	r3, r2, asr #23
 801a27a:	d204      	bcs.n	801a286 <__ieee754_sqrtf+0x3a>
 801a27c:	2100      	movs	r1, #0
 801a27e:	0210      	lsls	r0, r2, #8
 801a280:	d528      	bpl.n	801a2d4 <__ieee754_sqrtf+0x88>
 801a282:	3901      	subs	r1, #1
 801a284:	1a5b      	subs	r3, r3, r1
 801a286:	3b7f      	subs	r3, #127	; 0x7f
 801a288:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801a28c:	07d9      	lsls	r1, r3, #31
 801a28e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 801a292:	bf48      	it	mi
 801a294:	0052      	lslmi	r2, r2, #1
 801a296:	1059      	asrs	r1, r3, #1
 801a298:	2300      	movs	r3, #0
 801a29a:	0052      	lsls	r2, r2, #1
 801a29c:	2419      	movs	r4, #25
 801a29e:	461e      	mov	r6, r3
 801a2a0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 801a2a4:	1835      	adds	r5, r6, r0
 801a2a6:	4295      	cmp	r5, r2
 801a2a8:	bfde      	ittt	le
 801a2aa:	182e      	addle	r6, r5, r0
 801a2ac:	1b52      	suble	r2, r2, r5
 801a2ae:	181b      	addle	r3, r3, r0
 801a2b0:	3c01      	subs	r4, #1
 801a2b2:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801a2b6:	ea4f 0050 	mov.w	r0, r0, lsr #1
 801a2ba:	d1f3      	bne.n	801a2a4 <__ieee754_sqrtf+0x58>
 801a2bc:	b112      	cbz	r2, 801a2c4 <__ieee754_sqrtf+0x78>
 801a2be:	3301      	adds	r3, #1
 801a2c0:	f023 0301 	bic.w	r3, r3, #1
 801a2c4:	105b      	asrs	r3, r3, #1
 801a2c6:	f103 537c 	add.w	r3, r3, #1056964608	; 0x3f000000
 801a2ca:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 801a2ce:	ee00 3a10 	vmov	s0, r3
 801a2d2:	bd70      	pop	{r4, r5, r6, pc}
 801a2d4:	0052      	lsls	r2, r2, #1
 801a2d6:	3101      	adds	r1, #1
 801a2d8:	e7d1      	b.n	801a27e <__ieee754_sqrtf+0x32>
	...

0801a2dc <__kernel_cosf>:
 801a2dc:	ee10 3a10 	vmov	r3, s0
 801a2e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a2e4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801a2e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a2ec:	da05      	bge.n	801a2fa <__kernel_cosf+0x1e>
 801a2ee:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801a2f2:	ee17 2a90 	vmov	r2, s15
 801a2f6:	2a00      	cmp	r2, #0
 801a2f8:	d03b      	beq.n	801a372 <__kernel_cosf+0x96>
 801a2fa:	ee20 7a00 	vmul.f32	s14, s0, s0
 801a2fe:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 801a378 <__kernel_cosf+0x9c>
 801a302:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801a37c <__kernel_cosf+0xa0>
 801a306:	eddf 5a1e 	vldr	s11, [pc, #120]	; 801a380 <__kernel_cosf+0xa4>
 801a30a:	4a1e      	ldr	r2, [pc, #120]	; (801a384 <__kernel_cosf+0xa8>)
 801a30c:	eea7 6a27 	vfma.f32	s12, s14, s15
 801a310:	4293      	cmp	r3, r2
 801a312:	ee60 0a20 	vmul.f32	s1, s0, s1
 801a316:	eee7 5a06 	vfma.f32	s11, s14, s12
 801a31a:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 801a388 <__kernel_cosf+0xac>
 801a31e:	eea7 6a25 	vfma.f32	s12, s14, s11
 801a322:	eddf 5a1a 	vldr	s11, [pc, #104]	; 801a38c <__kernel_cosf+0xb0>
 801a326:	eee7 5a06 	vfma.f32	s11, s14, s12
 801a32a:	ed9f 6a19 	vldr	s12, [pc, #100]	; 801a390 <__kernel_cosf+0xb4>
 801a32e:	eea7 6a25 	vfma.f32	s12, s14, s11
 801a332:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801a336:	ee26 6a07 	vmul.f32	s12, s12, s14
 801a33a:	dc06      	bgt.n	801a34a <__kernel_cosf+0x6e>
 801a33c:	eed7 0a06 	vfnms.f32	s1, s14, s12
 801a340:	eed7 0a25 	vfnms.f32	s1, s14, s11
 801a344:	ee36 0ae0 	vsub.f32	s0, s13, s1
 801a348:	4770      	bx	lr
 801a34a:	4a12      	ldr	r2, [pc, #72]	; (801a394 <__kernel_cosf+0xb8>)
 801a34c:	4293      	cmp	r3, r2
 801a34e:	bfda      	itte	le
 801a350:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801a354:	ee07 3a90 	vmovle	s15, r3
 801a358:	eef5 7a02 	vmovgt.f32	s15, #82	; 0x3e900000  0.2812500
 801a35c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801a360:	eed7 0a06 	vfnms.f32	s1, s14, s12
 801a364:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801a368:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801a36c:	ee36 0ae7 	vsub.f32	s0, s13, s15
 801a370:	4770      	bx	lr
 801a372:	eeb0 0a66 	vmov.f32	s0, s13
 801a376:	4770      	bx	lr
 801a378:	310f74f6 	.word	0x310f74f6
 801a37c:	ad47d74e 	.word	0xad47d74e
 801a380:	b493f27c 	.word	0xb493f27c
 801a384:	3e999999 	.word	0x3e999999
 801a388:	37d00d01 	.word	0x37d00d01
 801a38c:	bab60b61 	.word	0xbab60b61
 801a390:	3d2aaaab 	.word	0x3d2aaaab
 801a394:	3f480000 	.word	0x3f480000

0801a398 <__kernel_rem_pio2f>:
 801a398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a39c:	ed2d 8b04 	vpush	{d8-d9}
 801a3a0:	b0d7      	sub	sp, #348	; 0x15c
 801a3a2:	468b      	mov	fp, r1
 801a3a4:	9301      	str	r3, [sp, #4]
 801a3a6:	9964      	ldr	r1, [sp, #400]	; 0x190
 801a3a8:	4bcb      	ldr	r3, [pc, #812]	; (801a6d8 <__kernel_rem_pio2f+0x340>)
 801a3aa:	9002      	str	r0, [sp, #8]
 801a3ac:	f853 a021 	ldr.w	sl, [r3, r1, lsl #2]
 801a3b0:	9b01      	ldr	r3, [sp, #4]
 801a3b2:	9e65      	ldr	r6, [sp, #404]	; 0x194
 801a3b4:	ed9f 7acc 	vldr	s14, [pc, #816]	; 801a6e8 <__kernel_rem_pio2f+0x350>
 801a3b8:	3b01      	subs	r3, #1
 801a3ba:	1ed0      	subs	r0, r2, #3
 801a3bc:	2408      	movs	r4, #8
 801a3be:	fb90 f0f4 	sdiv	r0, r0, r4
 801a3c2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 801a3c6:	1c45      	adds	r5, r0, #1
 801a3c8:	1ac7      	subs	r7, r0, r3
 801a3ca:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801a3ce:	eb0a 0e03 	add.w	lr, sl, r3
 801a3d2:	ac1a      	add	r4, sp, #104	; 0x68
 801a3d4:	eb06 0c87 	add.w	ip, r6, r7, lsl #2
 801a3d8:	2200      	movs	r2, #0
 801a3da:	4572      	cmp	r2, lr
 801a3dc:	dd0f      	ble.n	801a3fe <__kernel_rem_pio2f+0x66>
 801a3de:	f50d 7e84 	add.w	lr, sp, #264	; 0x108
 801a3e2:	2400      	movs	r4, #0
 801a3e4:	4554      	cmp	r4, sl
 801a3e6:	dc26      	bgt.n	801a436 <__kernel_rem_pio2f+0x9e>
 801a3e8:	9a01      	ldr	r2, [sp, #4]
 801a3ea:	9f02      	ldr	r7, [sp, #8]
 801a3ec:	eddf 7abe 	vldr	s15, [pc, #760]	; 801a6e8 <__kernel_rem_pio2f+0x350>
 801a3f0:	4422      	add	r2, r4
 801a3f2:	a91a      	add	r1, sp, #104	; 0x68
 801a3f4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801a3f8:	f04f 0c00 	mov.w	ip, #0
 801a3fc:	e015      	b.n	801a42a <__kernel_rem_pio2f+0x92>
 801a3fe:	42d7      	cmn	r7, r2
 801a400:	bf5d      	ittte	pl
 801a402:	f85c 1022 	ldrpl.w	r1, [ip, r2, lsl #2]
 801a406:	ee07 1a90 	vmovpl	s15, r1
 801a40a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801a40e:	eef0 7a47 	vmovmi.f32	s15, s14
 801a412:	ece4 7a01 	vstmia	r4!, {s15}
 801a416:	3201      	adds	r2, #1
 801a418:	e7df      	b.n	801a3da <__kernel_rem_pio2f+0x42>
 801a41a:	ecf7 6a01 	vldmia	r7!, {s13}
 801a41e:	ed32 7a01 	vldmdb	r2!, {s14}
 801a422:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a426:	f10c 0c01 	add.w	ip, ip, #1
 801a42a:	459c      	cmp	ip, r3
 801a42c:	ddf5      	ble.n	801a41a <__kernel_rem_pio2f+0x82>
 801a42e:	ecee 7a01 	vstmia	lr!, {s15}
 801a432:	3401      	adds	r4, #1
 801a434:	e7d6      	b.n	801a3e4 <__kernel_rem_pio2f+0x4c>
 801a436:	aa06      	add	r2, sp, #24
 801a438:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801a43c:	9204      	str	r2, [sp, #16]
 801a43e:	eddf 8aa7 	vldr	s17, [pc, #668]	; 801a6dc <__kernel_rem_pio2f+0x344>
 801a442:	ed9f 9aa7 	vldr	s18, [pc, #668]	; 801a6e0 <__kernel_rem_pio2f+0x348>
 801a446:	eb06 0280 	add.w	r2, r6, r0, lsl #2
 801a44a:	9203      	str	r2, [sp, #12]
 801a44c:	4657      	mov	r7, sl
 801a44e:	aa56      	add	r2, sp, #344	; 0x158
 801a450:	f107 4880 	add.w	r8, r7, #1073741824	; 0x40000000
 801a454:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 801a458:	f108 38ff 	add.w	r8, r8, #4294967295
 801a45c:	ed12 0a14 	vldr	s0, [r2, #-80]	; 0xffffffb0
 801a460:	ea4f 0888 	mov.w	r8, r8, lsl #2
 801a464:	aa56      	add	r2, sp, #344	; 0x158
 801a466:	eb02 0008 	add.w	r0, r2, r8
 801a46a:	384c      	subs	r0, #76	; 0x4c
 801a46c:	2200      	movs	r2, #0
 801a46e:	1abc      	subs	r4, r7, r2
 801a470:	2c00      	cmp	r4, #0
 801a472:	dc4a      	bgt.n	801a50a <__kernel_rem_pio2f+0x172>
 801a474:	4628      	mov	r0, r5
 801a476:	9305      	str	r3, [sp, #20]
 801a478:	f000 fe2a 	bl	801b0d0 <scalbnf>
 801a47c:	eeb0 8a40 	vmov.f32	s16, s0
 801a480:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801a484:	ee28 0a00 	vmul.f32	s0, s16, s0
 801a488:	f000 fde0 	bl	801b04c <floorf>
 801a48c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801a490:	eea0 8a67 	vfms.f32	s16, s0, s15
 801a494:	2d00      	cmp	r5, #0
 801a496:	9b05      	ldr	r3, [sp, #20]
 801a498:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801a49c:	ee17 9a90 	vmov	r9, s15
 801a4a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a4a4:	ee38 8a67 	vsub.f32	s16, s16, s15
 801a4a8:	dd44      	ble.n	801a534 <__kernel_rem_pio2f+0x19c>
 801a4aa:	1e78      	subs	r0, r7, #1
 801a4ac:	aa06      	add	r2, sp, #24
 801a4ae:	f1c5 0408 	rsb	r4, r5, #8
 801a4b2:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801a4b6:	fa46 f204 	asr.w	r2, r6, r4
 801a4ba:	4491      	add	r9, r2
 801a4bc:	40a2      	lsls	r2, r4
 801a4be:	1ab6      	subs	r6, r6, r2
 801a4c0:	aa06      	add	r2, sp, #24
 801a4c2:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 801a4c6:	f1c5 0207 	rsb	r2, r5, #7
 801a4ca:	4116      	asrs	r6, r2
 801a4cc:	2e00      	cmp	r6, #0
 801a4ce:	dd40      	ble.n	801a552 <__kernel_rem_pio2f+0x1ba>
 801a4d0:	2400      	movs	r4, #0
 801a4d2:	f109 0901 	add.w	r9, r9, #1
 801a4d6:	4620      	mov	r0, r4
 801a4d8:	42a7      	cmp	r7, r4
 801a4da:	dc75      	bgt.n	801a5c8 <__kernel_rem_pio2f+0x230>
 801a4dc:	2d00      	cmp	r5, #0
 801a4de:	dd05      	ble.n	801a4ec <__kernel_rem_pio2f+0x154>
 801a4e0:	2d01      	cmp	r5, #1
 801a4e2:	f000 8086 	beq.w	801a5f2 <__kernel_rem_pio2f+0x25a>
 801a4e6:	2d02      	cmp	r5, #2
 801a4e8:	f000 808d 	beq.w	801a606 <__kernel_rem_pio2f+0x26e>
 801a4ec:	2e02      	cmp	r6, #2
 801a4ee:	d130      	bne.n	801a552 <__kernel_rem_pio2f+0x1ba>
 801a4f0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801a4f4:	ee30 8a48 	vsub.f32	s16, s0, s16
 801a4f8:	b358      	cbz	r0, 801a552 <__kernel_rem_pio2f+0x1ba>
 801a4fa:	4628      	mov	r0, r5
 801a4fc:	9305      	str	r3, [sp, #20]
 801a4fe:	f000 fde7 	bl	801b0d0 <scalbnf>
 801a502:	9b05      	ldr	r3, [sp, #20]
 801a504:	ee38 8a40 	vsub.f32	s16, s16, s0
 801a508:	e023      	b.n	801a552 <__kernel_rem_pio2f+0x1ba>
 801a50a:	ee60 7a28 	vmul.f32	s15, s0, s17
 801a50e:	ac06      	add	r4, sp, #24
 801a510:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a514:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a518:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801a51c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801a520:	ee10 1a10 	vmov	r1, s0
 801a524:	ed30 0a01 	vldmdb	r0!, {s0}
 801a528:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801a52c:	ee37 0a80 	vadd.f32	s0, s15, s0
 801a530:	3201      	adds	r2, #1
 801a532:	e79c      	b.n	801a46e <__kernel_rem_pio2f+0xd6>
 801a534:	d105      	bne.n	801a542 <__kernel_rem_pio2f+0x1aa>
 801a536:	1e7a      	subs	r2, r7, #1
 801a538:	a906      	add	r1, sp, #24
 801a53a:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801a53e:	1236      	asrs	r6, r6, #8
 801a540:	e7c4      	b.n	801a4cc <__kernel_rem_pio2f+0x134>
 801a542:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801a546:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801a54a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a54e:	da39      	bge.n	801a5c4 <__kernel_rem_pio2f+0x22c>
 801a550:	2600      	movs	r6, #0
 801a552:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801a556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a55a:	f040 808d 	bne.w	801a678 <__kernel_rem_pio2f+0x2e0>
 801a55e:	1e7c      	subs	r4, r7, #1
 801a560:	4620      	mov	r0, r4
 801a562:	2200      	movs	r2, #0
 801a564:	4550      	cmp	r0, sl
 801a566:	da55      	bge.n	801a614 <__kernel_rem_pio2f+0x27c>
 801a568:	2a00      	cmp	r2, #0
 801a56a:	d164      	bne.n	801a636 <__kernel_rem_pio2f+0x29e>
 801a56c:	2401      	movs	r4, #1
 801a56e:	f06f 0003 	mvn.w	r0, #3
 801a572:	fb00 f204 	mul.w	r2, r0, r4
 801a576:	9904      	ldr	r1, [sp, #16]
 801a578:	588a      	ldr	r2, [r1, r2]
 801a57a:	2a00      	cmp	r2, #0
 801a57c:	d050      	beq.n	801a620 <__kernel_rem_pio2f+0x288>
 801a57e:	aa56      	add	r2, sp, #344	; 0x158
 801a580:	4490      	add	r8, r2
 801a582:	9a01      	ldr	r2, [sp, #4]
 801a584:	a91a      	add	r1, sp, #104	; 0x68
 801a586:	443a      	add	r2, r7
 801a588:	1c78      	adds	r0, r7, #1
 801a58a:	f1a8 0848 	sub.w	r8, r8, #72	; 0x48
 801a58e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801a592:	4427      	add	r7, r4
 801a594:	42b8      	cmp	r0, r7
 801a596:	f73f af5a 	bgt.w	801a44e <__kernel_rem_pio2f+0xb6>
 801a59a:	9903      	ldr	r1, [sp, #12]
 801a59c:	9e02      	ldr	r6, [sp, #8]
 801a59e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801a5a2:	9105      	str	r1, [sp, #20]
 801a5a4:	ee07 1a90 	vmov	s15, r1
 801a5a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a5ac:	2400      	movs	r4, #0
 801a5ae:	ece2 7a01 	vstmia	r2!, {s15}
 801a5b2:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801a6e8 <__kernel_rem_pio2f+0x350>
 801a5b6:	4696      	mov	lr, r2
 801a5b8:	429c      	cmp	r4, r3
 801a5ba:	dd33      	ble.n	801a624 <__kernel_rem_pio2f+0x28c>
 801a5bc:	ece8 7a01 	vstmia	r8!, {s15}
 801a5c0:	3001      	adds	r0, #1
 801a5c2:	e7e7      	b.n	801a594 <__kernel_rem_pio2f+0x1fc>
 801a5c4:	2602      	movs	r6, #2
 801a5c6:	e783      	b.n	801a4d0 <__kernel_rem_pio2f+0x138>
 801a5c8:	aa06      	add	r2, sp, #24
 801a5ca:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 801a5ce:	b948      	cbnz	r0, 801a5e4 <__kernel_rem_pio2f+0x24c>
 801a5d0:	b12a      	cbz	r2, 801a5de <__kernel_rem_pio2f+0x246>
 801a5d2:	a906      	add	r1, sp, #24
 801a5d4:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801a5d8:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 801a5dc:	2201      	movs	r2, #1
 801a5de:	3401      	adds	r4, #1
 801a5e0:	4610      	mov	r0, r2
 801a5e2:	e779      	b.n	801a4d8 <__kernel_rem_pio2f+0x140>
 801a5e4:	a906      	add	r1, sp, #24
 801a5e6:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801a5ea:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 801a5ee:	4602      	mov	r2, r0
 801a5f0:	e7f5      	b.n	801a5de <__kernel_rem_pio2f+0x246>
 801a5f2:	1e7c      	subs	r4, r7, #1
 801a5f4:	aa06      	add	r2, sp, #24
 801a5f6:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 801a5fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801a5fe:	a906      	add	r1, sp, #24
 801a600:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 801a604:	e772      	b.n	801a4ec <__kernel_rem_pio2f+0x154>
 801a606:	1e7c      	subs	r4, r7, #1
 801a608:	aa06      	add	r2, sp, #24
 801a60a:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 801a60e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801a612:	e7f4      	b.n	801a5fe <__kernel_rem_pio2f+0x266>
 801a614:	a906      	add	r1, sp, #24
 801a616:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801a61a:	3801      	subs	r0, #1
 801a61c:	430a      	orrs	r2, r1
 801a61e:	e7a1      	b.n	801a564 <__kernel_rem_pio2f+0x1cc>
 801a620:	3401      	adds	r4, #1
 801a622:	e7a6      	b.n	801a572 <__kernel_rem_pio2f+0x1da>
 801a624:	ecf6 6a01 	vldmia	r6!, {s13}
 801a628:	ed3e 7a01 	vldmdb	lr!, {s14}
 801a62c:	3401      	adds	r4, #1
 801a62e:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a632:	e7c1      	b.n	801a5b8 <__kernel_rem_pio2f+0x220>
 801a634:	3c01      	subs	r4, #1
 801a636:	ab06      	add	r3, sp, #24
 801a638:	3d08      	subs	r5, #8
 801a63a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801a63e:	2b00      	cmp	r3, #0
 801a640:	d0f8      	beq.n	801a634 <__kernel_rem_pio2f+0x29c>
 801a642:	4628      	mov	r0, r5
 801a644:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801a648:	f000 fd42 	bl	801b0d0 <scalbnf>
 801a64c:	00a3      	lsls	r3, r4, #2
 801a64e:	aa42      	add	r2, sp, #264	; 0x108
 801a650:	3304      	adds	r3, #4
 801a652:	ed9f 7a22 	vldr	s14, [pc, #136]	; 801a6dc <__kernel_rem_pio2f+0x344>
 801a656:	18d0      	adds	r0, r2, r3
 801a658:	4622      	mov	r2, r4
 801a65a:	2a00      	cmp	r2, #0
 801a65c:	da46      	bge.n	801a6ec <__kernel_rem_pio2f+0x354>
 801a65e:	f10d 0eb8 	add.w	lr, sp, #184	; 0xb8
 801a662:	2200      	movs	r2, #0
 801a664:	1aa5      	subs	r5, r4, r2
 801a666:	d460      	bmi.n	801a72a <__kernel_rem_pio2f+0x392>
 801a668:	a942      	add	r1, sp, #264	; 0x108
 801a66a:	4f1e      	ldr	r7, [pc, #120]	; (801a6e4 <__kernel_rem_pio2f+0x34c>)
 801a66c:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801a6e8 <__kernel_rem_pio2f+0x350>
 801a670:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 801a674:	2000      	movs	r0, #0
 801a676:	e050      	b.n	801a71a <__kernel_rem_pio2f+0x382>
 801a678:	4268      	negs	r0, r5
 801a67a:	eeb0 0a48 	vmov.f32	s0, s16
 801a67e:	f000 fd27 	bl	801b0d0 <scalbnf>
 801a682:	ed9f 7a17 	vldr	s14, [pc, #92]	; 801a6e0 <__kernel_rem_pio2f+0x348>
 801a686:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801a68a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a68e:	db19      	blt.n	801a6c4 <__kernel_rem_pio2f+0x32c>
 801a690:	eddf 7a12 	vldr	s15, [pc, #72]	; 801a6dc <__kernel_rem_pio2f+0x344>
 801a694:	ee60 7a27 	vmul.f32	s15, s0, s15
 801a698:	aa06      	add	r2, sp, #24
 801a69a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a69e:	1c7c      	adds	r4, r7, #1
 801a6a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a6a4:	3508      	adds	r5, #8
 801a6a6:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801a6aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a6ae:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801a6b2:	ee10 3a10 	vmov	r3, s0
 801a6b6:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 801a6ba:	ee17 3a90 	vmov	r3, s15
 801a6be:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801a6c2:	e7be      	b.n	801a642 <__kernel_rem_pio2f+0x2aa>
 801a6c4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801a6c8:	aa06      	add	r2, sp, #24
 801a6ca:	ee10 3a10 	vmov	r3, s0
 801a6ce:	463c      	mov	r4, r7
 801a6d0:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 801a6d4:	e7b5      	b.n	801a642 <__kernel_rem_pio2f+0x2aa>
 801a6d6:	bf00      	nop
 801a6d8:	0801ec8c 	.word	0x0801ec8c
 801a6dc:	3b800000 	.word	0x3b800000
 801a6e0:	43800000 	.word	0x43800000
 801a6e4:	0801ec60 	.word	0x0801ec60
 801a6e8:	00000000 	.word	0x00000000
 801a6ec:	a906      	add	r1, sp, #24
 801a6ee:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801a6f2:	9101      	str	r1, [sp, #4]
 801a6f4:	ee07 1a90 	vmov	s15, r1
 801a6f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a6fc:	3a01      	subs	r2, #1
 801a6fe:	ee67 7a80 	vmul.f32	s15, s15, s0
 801a702:	ee20 0a07 	vmul.f32	s0, s0, s14
 801a706:	ed60 7a01 	vstmdb	r0!, {s15}
 801a70a:	e7a6      	b.n	801a65a <__kernel_rem_pio2f+0x2c2>
 801a70c:	ecf7 6a01 	vldmia	r7!, {s13}
 801a710:	ecb5 7a01 	vldmia	r5!, {s14}
 801a714:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a718:	3001      	adds	r0, #1
 801a71a:	4550      	cmp	r0, sl
 801a71c:	dc01      	bgt.n	801a722 <__kernel_rem_pio2f+0x38a>
 801a71e:	4290      	cmp	r0, r2
 801a720:	ddf4      	ble.n	801a70c <__kernel_rem_pio2f+0x374>
 801a722:	ecee 7a01 	vstmia	lr!, {s15}
 801a726:	3201      	adds	r2, #1
 801a728:	e79c      	b.n	801a664 <__kernel_rem_pio2f+0x2cc>
 801a72a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801a72c:	2a03      	cmp	r2, #3
 801a72e:	d843      	bhi.n	801a7b8 <__kernel_rem_pio2f+0x420>
 801a730:	e8df f002 	tbb	[pc, r2]
 801a734:	021d1d37 	.word	0x021d1d37
 801a738:	aa2e      	add	r2, sp, #184	; 0xb8
 801a73a:	4413      	add	r3, r2
 801a73c:	461a      	mov	r2, r3
 801a73e:	4620      	mov	r0, r4
 801a740:	2800      	cmp	r0, #0
 801a742:	dc55      	bgt.n	801a7f0 <__kernel_rem_pio2f+0x458>
 801a744:	461a      	mov	r2, r3
 801a746:	4620      	mov	r0, r4
 801a748:	2801      	cmp	r0, #1
 801a74a:	dc61      	bgt.n	801a810 <__kernel_rem_pio2f+0x478>
 801a74c:	ed5f 7a1a 	vldr	s15, [pc, #-104]	; 801a6e8 <__kernel_rem_pio2f+0x350>
 801a750:	2c01      	cmp	r4, #1
 801a752:	dc6d      	bgt.n	801a830 <__kernel_rem_pio2f+0x498>
 801a754:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 801a758:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 801a75c:	2e00      	cmp	r6, #0
 801a75e:	d16d      	bne.n	801a83c <__kernel_rem_pio2f+0x4a4>
 801a760:	edcb 6a00 	vstr	s13, [fp]
 801a764:	ed8b 7a01 	vstr	s14, [fp, #4]
 801a768:	edcb 7a02 	vstr	s15, [fp, #8]
 801a76c:	e024      	b.n	801a7b8 <__kernel_rem_pio2f+0x420>
 801a76e:	aa2e      	add	r2, sp, #184	; 0xb8
 801a770:	ed1f 7a23 	vldr	s14, [pc, #-140]	; 801a6e8 <__kernel_rem_pio2f+0x350>
 801a774:	4413      	add	r3, r2
 801a776:	4622      	mov	r2, r4
 801a778:	2a00      	cmp	r2, #0
 801a77a:	da2a      	bge.n	801a7d2 <__kernel_rem_pio2f+0x43a>
 801a77c:	b37e      	cbz	r6, 801a7de <__kernel_rem_pio2f+0x446>
 801a77e:	eef1 7a47 	vneg.f32	s15, s14
 801a782:	edcb 7a00 	vstr	s15, [fp]
 801a786:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 801a78a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a78e:	aa2f      	add	r2, sp, #188	; 0xbc
 801a790:	2301      	movs	r3, #1
 801a792:	429c      	cmp	r4, r3
 801a794:	da26      	bge.n	801a7e4 <__kernel_rem_pio2f+0x44c>
 801a796:	b10e      	cbz	r6, 801a79c <__kernel_rem_pio2f+0x404>
 801a798:	eef1 7a67 	vneg.f32	s15, s15
 801a79c:	edcb 7a01 	vstr	s15, [fp, #4]
 801a7a0:	e00a      	b.n	801a7b8 <__kernel_rem_pio2f+0x420>
 801a7a2:	aa2e      	add	r2, sp, #184	; 0xb8
 801a7a4:	ed5f 7a30 	vldr	s15, [pc, #-192]	; 801a6e8 <__kernel_rem_pio2f+0x350>
 801a7a8:	4413      	add	r3, r2
 801a7aa:	2c00      	cmp	r4, #0
 801a7ac:	da0b      	bge.n	801a7c6 <__kernel_rem_pio2f+0x42e>
 801a7ae:	b10e      	cbz	r6, 801a7b4 <__kernel_rem_pio2f+0x41c>
 801a7b0:	eef1 7a67 	vneg.f32	s15, s15
 801a7b4:	edcb 7a00 	vstr	s15, [fp]
 801a7b8:	f009 0007 	and.w	r0, r9, #7
 801a7bc:	b057      	add	sp, #348	; 0x15c
 801a7be:	ecbd 8b04 	vpop	{d8-d9}
 801a7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7c6:	ed33 7a01 	vldmdb	r3!, {s14}
 801a7ca:	3c01      	subs	r4, #1
 801a7cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a7d0:	e7eb      	b.n	801a7aa <__kernel_rem_pio2f+0x412>
 801a7d2:	ed73 7a01 	vldmdb	r3!, {s15}
 801a7d6:	3a01      	subs	r2, #1
 801a7d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a7dc:	e7cc      	b.n	801a778 <__kernel_rem_pio2f+0x3e0>
 801a7de:	eef0 7a47 	vmov.f32	s15, s14
 801a7e2:	e7ce      	b.n	801a782 <__kernel_rem_pio2f+0x3ea>
 801a7e4:	ecb2 7a01 	vldmia	r2!, {s14}
 801a7e8:	3301      	adds	r3, #1
 801a7ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a7ee:	e7d0      	b.n	801a792 <__kernel_rem_pio2f+0x3fa>
 801a7f0:	ed52 6a01 	vldr	s13, [r2, #-4]
 801a7f4:	ed52 7a02 	vldr	s15, [r2, #-8]
 801a7f8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801a7fc:	3801      	subs	r0, #1
 801a7fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a806:	ed62 7a01 	vstmdb	r2!, {s15}
 801a80a:	ed02 7a01 	vstr	s14, [r2, #-4]
 801a80e:	e797      	b.n	801a740 <__kernel_rem_pio2f+0x3a8>
 801a810:	ed52 6a01 	vldr	s13, [r2, #-4]
 801a814:	ed52 7a02 	vldr	s15, [r2, #-8]
 801a818:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801a81c:	3801      	subs	r0, #1
 801a81e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a826:	ed62 7a01 	vstmdb	r2!, {s15}
 801a82a:	ed02 7a01 	vstr	s14, [r2, #-4]
 801a82e:	e78b      	b.n	801a748 <__kernel_rem_pio2f+0x3b0>
 801a830:	ed33 7a01 	vldmdb	r3!, {s14}
 801a834:	3c01      	subs	r4, #1
 801a836:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a83a:	e789      	b.n	801a750 <__kernel_rem_pio2f+0x3b8>
 801a83c:	eef1 6a66 	vneg.f32	s13, s13
 801a840:	eeb1 7a47 	vneg.f32	s14, s14
 801a844:	edcb 6a00 	vstr	s13, [fp]
 801a848:	ed8b 7a01 	vstr	s14, [fp, #4]
 801a84c:	eef1 7a67 	vneg.f32	s15, s15
 801a850:	e78a      	b.n	801a768 <__kernel_rem_pio2f+0x3d0>
 801a852:	bf00      	nop

0801a854 <__kernel_sinf>:
 801a854:	ee10 3a10 	vmov	r3, s0
 801a858:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a85c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801a860:	da04      	bge.n	801a86c <__kernel_sinf+0x18>
 801a862:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801a866:	ee17 3a90 	vmov	r3, s15
 801a86a:	b35b      	cbz	r3, 801a8c4 <__kernel_sinf+0x70>
 801a86c:	ee20 7a00 	vmul.f32	s14, s0, s0
 801a870:	eddf 7a15 	vldr	s15, [pc, #84]	; 801a8c8 <__kernel_sinf+0x74>
 801a874:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801a8cc <__kernel_sinf+0x78>
 801a878:	eea7 6a27 	vfma.f32	s12, s14, s15
 801a87c:	eddf 7a14 	vldr	s15, [pc, #80]	; 801a8d0 <__kernel_sinf+0x7c>
 801a880:	eee7 7a06 	vfma.f32	s15, s14, s12
 801a884:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801a8d4 <__kernel_sinf+0x80>
 801a888:	eea7 6a27 	vfma.f32	s12, s14, s15
 801a88c:	eddf 7a12 	vldr	s15, [pc, #72]	; 801a8d8 <__kernel_sinf+0x84>
 801a890:	ee60 6a07 	vmul.f32	s13, s0, s14
 801a894:	eee7 7a06 	vfma.f32	s15, s14, s12
 801a898:	b930      	cbnz	r0, 801a8a8 <__kernel_sinf+0x54>
 801a89a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801a8dc <__kernel_sinf+0x88>
 801a89e:	eea7 6a27 	vfma.f32	s12, s14, s15
 801a8a2:	eea6 0a86 	vfma.f32	s0, s13, s12
 801a8a6:	4770      	bx	lr
 801a8a8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801a8ac:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801a8b0:	eee0 7a86 	vfma.f32	s15, s1, s12
 801a8b4:	eed7 0a27 	vfnms.f32	s1, s14, s15
 801a8b8:	eddf 7a09 	vldr	s15, [pc, #36]	; 801a8e0 <__kernel_sinf+0x8c>
 801a8bc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801a8c0:	ee30 0a60 	vsub.f32	s0, s0, s1
 801a8c4:	4770      	bx	lr
 801a8c6:	bf00      	nop
 801a8c8:	2f2ec9d3 	.word	0x2f2ec9d3
 801a8cc:	b2d72f34 	.word	0xb2d72f34
 801a8d0:	3638ef1b 	.word	0x3638ef1b
 801a8d4:	b9500d01 	.word	0xb9500d01
 801a8d8:	3c088889 	.word	0x3c088889
 801a8dc:	be2aaaab 	.word	0xbe2aaaab
 801a8e0:	3e2aaaab 	.word	0x3e2aaaab

0801a8e4 <__kernel_tanf>:
 801a8e4:	b508      	push	{r3, lr}
 801a8e6:	ee10 3a10 	vmov	r3, s0
 801a8ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801a8ee:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 801a8f2:	eef0 7a40 	vmov.f32	s15, s0
 801a8f6:	da17      	bge.n	801a928 <__kernel_tanf+0x44>
 801a8f8:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 801a8fc:	ee17 1a10 	vmov	r1, s14
 801a900:	bb41      	cbnz	r1, 801a954 <__kernel_tanf+0x70>
 801a902:	1c43      	adds	r3, r0, #1
 801a904:	4313      	orrs	r3, r2
 801a906:	d108      	bne.n	801a91a <__kernel_tanf+0x36>
 801a908:	f000 fb98 	bl	801b03c <fabsf>
 801a90c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a910:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a914:	eeb0 0a67 	vmov.f32	s0, s15
 801a918:	bd08      	pop	{r3, pc}
 801a91a:	2801      	cmp	r0, #1
 801a91c:	d0fa      	beq.n	801a914 <__kernel_tanf+0x30>
 801a91e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801a922:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a926:	e7f5      	b.n	801a914 <__kernel_tanf+0x30>
 801a928:	494e      	ldr	r1, [pc, #312]	; (801aa64 <__kernel_tanf+0x180>)
 801a92a:	428a      	cmp	r2, r1
 801a92c:	dd12      	ble.n	801a954 <__kernel_tanf+0x70>
 801a92e:	2b00      	cmp	r3, #0
 801a930:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 801aa68 <__kernel_tanf+0x184>
 801a934:	bfb8      	it	lt
 801a936:	eef1 7a40 	vneglt.f32	s15, s0
 801a93a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a93e:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 801aa6c <__kernel_tanf+0x188>
 801a942:	bfb8      	it	lt
 801a944:	eef1 0a60 	vneglt.f32	s1, s1
 801a948:	ee77 0a60 	vsub.f32	s1, s14, s1
 801a94c:	ee70 7aa7 	vadd.f32	s15, s1, s15
 801a950:	eddf 0a47 	vldr	s1, [pc, #284]	; 801aa70 <__kernel_tanf+0x18c>
 801a954:	eddf 5a47 	vldr	s11, [pc, #284]	; 801aa74 <__kernel_tanf+0x190>
 801a958:	ed9f 6a47 	vldr	s12, [pc, #284]	; 801aa78 <__kernel_tanf+0x194>
 801a95c:	ed9f 5a47 	vldr	s10, [pc, #284]	; 801aa7c <__kernel_tanf+0x198>
 801a960:	4940      	ldr	r1, [pc, #256]	; (801aa64 <__kernel_tanf+0x180>)
 801a962:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801a966:	428a      	cmp	r2, r1
 801a968:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801a96c:	ee67 4aa6 	vmul.f32	s9, s15, s13
 801a970:	eea7 6a25 	vfma.f32	s12, s14, s11
 801a974:	eddf 5a42 	vldr	s11, [pc, #264]	; 801aa80 <__kernel_tanf+0x19c>
 801a978:	eee7 5a06 	vfma.f32	s11, s14, s12
 801a97c:	ed9f 6a41 	vldr	s12, [pc, #260]	; 801aa84 <__kernel_tanf+0x1a0>
 801a980:	eea7 6a25 	vfma.f32	s12, s14, s11
 801a984:	eddf 5a40 	vldr	s11, [pc, #256]	; 801aa88 <__kernel_tanf+0x1a4>
 801a988:	eee7 5a06 	vfma.f32	s11, s14, s12
 801a98c:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 801aa8c <__kernel_tanf+0x1a8>
 801a990:	eea7 6a25 	vfma.f32	s12, s14, s11
 801a994:	eddf 5a3e 	vldr	s11, [pc, #248]	; 801aa90 <__kernel_tanf+0x1ac>
 801a998:	eee7 5a05 	vfma.f32	s11, s14, s10
 801a99c:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 801aa94 <__kernel_tanf+0x1b0>
 801a9a0:	eea7 5a25 	vfma.f32	s10, s14, s11
 801a9a4:	eddf 5a3c 	vldr	s11, [pc, #240]	; 801aa98 <__kernel_tanf+0x1b4>
 801a9a8:	eee7 5a05 	vfma.f32	s11, s14, s10
 801a9ac:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 801aa9c <__kernel_tanf+0x1b8>
 801a9b0:	eea7 5a25 	vfma.f32	s10, s14, s11
 801a9b4:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801aaa0 <__kernel_tanf+0x1bc>
 801a9b8:	eee7 5a05 	vfma.f32	s11, s14, s10
 801a9bc:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801a9c0:	eeb0 7a46 	vmov.f32	s14, s12
 801a9c4:	eeb0 6a60 	vmov.f32	s12, s1
 801a9c8:	eea4 6a87 	vfma.f32	s12, s9, s14
 801a9cc:	ed9f 7a35 	vldr	s14, [pc, #212]	; 801aaa4 <__kernel_tanf+0x1c0>
 801a9d0:	eee6 0a86 	vfma.f32	s1, s13, s12
 801a9d4:	eee4 0a87 	vfma.f32	s1, s9, s14
 801a9d8:	ee77 6aa0 	vadd.f32	s13, s15, s1
 801a9dc:	dd1d      	ble.n	801aa1a <__kernel_tanf+0x136>
 801a9de:	ee07 0a10 	vmov	s14, r0
 801a9e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a9e6:	ee66 5aa6 	vmul.f32	s11, s13, s13
 801a9ea:	ee76 6a87 	vadd.f32	s13, s13, s14
 801a9ee:	179b      	asrs	r3, r3, #30
 801a9f0:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 801a9f4:	f003 0302 	and.w	r3, r3, #2
 801a9f8:	f1c3 0301 	rsb	r3, r3, #1
 801a9fc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801aa00:	ee76 0a60 	vsub.f32	s1, s12, s1
 801aa04:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801aa08:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801aa0c:	ee07 3a90 	vmov	s15, r3
 801aa10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801aa14:	ee67 7a27 	vmul.f32	s15, s14, s15
 801aa18:	e77c      	b.n	801a914 <__kernel_tanf+0x30>
 801aa1a:	2801      	cmp	r0, #1
 801aa1c:	d01f      	beq.n	801aa5e <__kernel_tanf+0x17a>
 801aa1e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801aa22:	eec7 5a26 	vdiv.f32	s11, s14, s13
 801aa26:	4b20      	ldr	r3, [pc, #128]	; (801aaa8 <__kernel_tanf+0x1c4>)
 801aa28:	ee16 2a90 	vmov	r2, s13
 801aa2c:	401a      	ands	r2, r3
 801aa2e:	ee06 2a10 	vmov	s12, r2
 801aa32:	ee15 2a90 	vmov	r2, s11
 801aa36:	4013      	ands	r3, r2
 801aa38:	ee07 3a10 	vmov	s14, r3
 801aa3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801aa40:	eee6 6a07 	vfma.f32	s13, s12, s14
 801aa44:	ee76 7a67 	vsub.f32	s15, s12, s15
 801aa48:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801aa4c:	eef0 7a66 	vmov.f32	s15, s13
 801aa50:	eee7 7a20 	vfma.f32	s15, s14, s1
 801aa54:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801aa58:	eef0 7a47 	vmov.f32	s15, s14
 801aa5c:	e75a      	b.n	801a914 <__kernel_tanf+0x30>
 801aa5e:	eef0 7a66 	vmov.f32	s15, s13
 801aa62:	e757      	b.n	801a914 <__kernel_tanf+0x30>
 801aa64:	3f2ca13f 	.word	0x3f2ca13f
 801aa68:	3f490fda 	.word	0x3f490fda
 801aa6c:	33222168 	.word	0x33222168
 801aa70:	00000000 	.word	0x00000000
 801aa74:	b79bae5f 	.word	0xb79bae5f
 801aa78:	38a3f445 	.word	0x38a3f445
 801aa7c:	37d95384 	.word	0x37d95384
 801aa80:	3a1a26c8 	.word	0x3a1a26c8
 801aa84:	3b6b6916 	.word	0x3b6b6916
 801aa88:	3cb327a4 	.word	0x3cb327a4
 801aa8c:	3e088889 	.word	0x3e088889
 801aa90:	3895c07a 	.word	0x3895c07a
 801aa94:	398137b9 	.word	0x398137b9
 801aa98:	3abede48 	.word	0x3abede48
 801aa9c:	3c11371f 	.word	0x3c11371f
 801aaa0:	3d5d0dd1 	.word	0x3d5d0dd1
 801aaa4:	3eaaaaab 	.word	0x3eaaaaab
 801aaa8:	fffff000 	.word	0xfffff000
 801aaac:	00000000 	.word	0x00000000

0801aab0 <atan>:
 801aab0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aab4:	ec55 4b10 	vmov	r4, r5, d0
 801aab8:	4bc7      	ldr	r3, [pc, #796]	; (801add8 <atan+0x328>)
 801aaba:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801aabe:	429e      	cmp	r6, r3
 801aac0:	46ab      	mov	fp, r5
 801aac2:	dd18      	ble.n	801aaf6 <atan+0x46>
 801aac4:	4ac5      	ldr	r2, [pc, #788]	; (801addc <atan+0x32c>)
 801aac6:	4296      	cmp	r6, r2
 801aac8:	dc01      	bgt.n	801aace <atan+0x1e>
 801aaca:	d109      	bne.n	801aae0 <atan+0x30>
 801aacc:	b144      	cbz	r4, 801aae0 <atan+0x30>
 801aace:	4622      	mov	r2, r4
 801aad0:	462b      	mov	r3, r5
 801aad2:	4620      	mov	r0, r4
 801aad4:	4629      	mov	r1, r5
 801aad6:	f7e5 fbe1 	bl	800029c <__adddf3>
 801aada:	4604      	mov	r4, r0
 801aadc:	460d      	mov	r5, r1
 801aade:	e006      	b.n	801aaee <atan+0x3e>
 801aae0:	f1bb 0f00 	cmp.w	fp, #0
 801aae4:	f300 813a 	bgt.w	801ad5c <atan+0x2ac>
 801aae8:	a59f      	add	r5, pc, #636	; (adr r5, 801ad68 <atan+0x2b8>)
 801aaea:	e9d5 4500 	ldrd	r4, r5, [r5]
 801aaee:	ec45 4b10 	vmov	d0, r4, r5
 801aaf2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aaf6:	4bba      	ldr	r3, [pc, #744]	; (801ade0 <atan+0x330>)
 801aaf8:	429e      	cmp	r6, r3
 801aafa:	dc14      	bgt.n	801ab26 <atan+0x76>
 801aafc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801ab00:	429e      	cmp	r6, r3
 801ab02:	dc0d      	bgt.n	801ab20 <atan+0x70>
 801ab04:	a39a      	add	r3, pc, #616	; (adr r3, 801ad70 <atan+0x2c0>)
 801ab06:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab0a:	ee10 0a10 	vmov	r0, s0
 801ab0e:	4629      	mov	r1, r5
 801ab10:	f7e5 fbc4 	bl	800029c <__adddf3>
 801ab14:	2200      	movs	r2, #0
 801ab16:	4bb3      	ldr	r3, [pc, #716]	; (801ade4 <atan+0x334>)
 801ab18:	f7e6 f802 	bl	8000b20 <__aeabi_dcmpgt>
 801ab1c:	2800      	cmp	r0, #0
 801ab1e:	d1e6      	bne.n	801aaee <atan+0x3e>
 801ab20:	f04f 3aff 	mov.w	sl, #4294967295
 801ab24:	e02b      	b.n	801ab7e <atan+0xce>
 801ab26:	f000 f96b 	bl	801ae00 <fabs>
 801ab2a:	4baf      	ldr	r3, [pc, #700]	; (801ade8 <atan+0x338>)
 801ab2c:	429e      	cmp	r6, r3
 801ab2e:	ec55 4b10 	vmov	r4, r5, d0
 801ab32:	f300 80bf 	bgt.w	801acb4 <atan+0x204>
 801ab36:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801ab3a:	429e      	cmp	r6, r3
 801ab3c:	f300 80a0 	bgt.w	801ac80 <atan+0x1d0>
 801ab40:	ee10 2a10 	vmov	r2, s0
 801ab44:	ee10 0a10 	vmov	r0, s0
 801ab48:	462b      	mov	r3, r5
 801ab4a:	4629      	mov	r1, r5
 801ab4c:	f7e5 fba6 	bl	800029c <__adddf3>
 801ab50:	2200      	movs	r2, #0
 801ab52:	4ba4      	ldr	r3, [pc, #656]	; (801ade4 <atan+0x334>)
 801ab54:	f7e5 fba0 	bl	8000298 <__aeabi_dsub>
 801ab58:	2200      	movs	r2, #0
 801ab5a:	4606      	mov	r6, r0
 801ab5c:	460f      	mov	r7, r1
 801ab5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801ab62:	4620      	mov	r0, r4
 801ab64:	4629      	mov	r1, r5
 801ab66:	f7e5 fb99 	bl	800029c <__adddf3>
 801ab6a:	4602      	mov	r2, r0
 801ab6c:	460b      	mov	r3, r1
 801ab6e:	4630      	mov	r0, r6
 801ab70:	4639      	mov	r1, r7
 801ab72:	f7e5 fe6f 	bl	8000854 <__aeabi_ddiv>
 801ab76:	f04f 0a00 	mov.w	sl, #0
 801ab7a:	4604      	mov	r4, r0
 801ab7c:	460d      	mov	r5, r1
 801ab7e:	4622      	mov	r2, r4
 801ab80:	462b      	mov	r3, r5
 801ab82:	4620      	mov	r0, r4
 801ab84:	4629      	mov	r1, r5
 801ab86:	f7e5 fd3b 	bl	8000600 <__aeabi_dmul>
 801ab8a:	4602      	mov	r2, r0
 801ab8c:	460b      	mov	r3, r1
 801ab8e:	4680      	mov	r8, r0
 801ab90:	4689      	mov	r9, r1
 801ab92:	f7e5 fd35 	bl	8000600 <__aeabi_dmul>
 801ab96:	a378      	add	r3, pc, #480	; (adr r3, 801ad78 <atan+0x2c8>)
 801ab98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab9c:	4606      	mov	r6, r0
 801ab9e:	460f      	mov	r7, r1
 801aba0:	f7e5 fd2e 	bl	8000600 <__aeabi_dmul>
 801aba4:	a376      	add	r3, pc, #472	; (adr r3, 801ad80 <atan+0x2d0>)
 801aba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abaa:	f7e5 fb77 	bl	800029c <__adddf3>
 801abae:	4632      	mov	r2, r6
 801abb0:	463b      	mov	r3, r7
 801abb2:	f7e5 fd25 	bl	8000600 <__aeabi_dmul>
 801abb6:	a374      	add	r3, pc, #464	; (adr r3, 801ad88 <atan+0x2d8>)
 801abb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abbc:	f7e5 fb6e 	bl	800029c <__adddf3>
 801abc0:	4632      	mov	r2, r6
 801abc2:	463b      	mov	r3, r7
 801abc4:	f7e5 fd1c 	bl	8000600 <__aeabi_dmul>
 801abc8:	a371      	add	r3, pc, #452	; (adr r3, 801ad90 <atan+0x2e0>)
 801abca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abce:	f7e5 fb65 	bl	800029c <__adddf3>
 801abd2:	4632      	mov	r2, r6
 801abd4:	463b      	mov	r3, r7
 801abd6:	f7e5 fd13 	bl	8000600 <__aeabi_dmul>
 801abda:	a36f      	add	r3, pc, #444	; (adr r3, 801ad98 <atan+0x2e8>)
 801abdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abe0:	f7e5 fb5c 	bl	800029c <__adddf3>
 801abe4:	4632      	mov	r2, r6
 801abe6:	463b      	mov	r3, r7
 801abe8:	f7e5 fd0a 	bl	8000600 <__aeabi_dmul>
 801abec:	a36c      	add	r3, pc, #432	; (adr r3, 801ada0 <atan+0x2f0>)
 801abee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abf2:	f7e5 fb53 	bl	800029c <__adddf3>
 801abf6:	4642      	mov	r2, r8
 801abf8:	464b      	mov	r3, r9
 801abfa:	f7e5 fd01 	bl	8000600 <__aeabi_dmul>
 801abfe:	a36a      	add	r3, pc, #424	; (adr r3, 801ada8 <atan+0x2f8>)
 801ac00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac04:	4680      	mov	r8, r0
 801ac06:	4689      	mov	r9, r1
 801ac08:	4630      	mov	r0, r6
 801ac0a:	4639      	mov	r1, r7
 801ac0c:	f7e5 fcf8 	bl	8000600 <__aeabi_dmul>
 801ac10:	a367      	add	r3, pc, #412	; (adr r3, 801adb0 <atan+0x300>)
 801ac12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac16:	f7e5 fb3f 	bl	8000298 <__aeabi_dsub>
 801ac1a:	4632      	mov	r2, r6
 801ac1c:	463b      	mov	r3, r7
 801ac1e:	f7e5 fcef 	bl	8000600 <__aeabi_dmul>
 801ac22:	a365      	add	r3, pc, #404	; (adr r3, 801adb8 <atan+0x308>)
 801ac24:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac28:	f7e5 fb36 	bl	8000298 <__aeabi_dsub>
 801ac2c:	4632      	mov	r2, r6
 801ac2e:	463b      	mov	r3, r7
 801ac30:	f7e5 fce6 	bl	8000600 <__aeabi_dmul>
 801ac34:	a362      	add	r3, pc, #392	; (adr r3, 801adc0 <atan+0x310>)
 801ac36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac3a:	f7e5 fb2d 	bl	8000298 <__aeabi_dsub>
 801ac3e:	4632      	mov	r2, r6
 801ac40:	463b      	mov	r3, r7
 801ac42:	f7e5 fcdd 	bl	8000600 <__aeabi_dmul>
 801ac46:	a360      	add	r3, pc, #384	; (adr r3, 801adc8 <atan+0x318>)
 801ac48:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac4c:	f7e5 fb24 	bl	8000298 <__aeabi_dsub>
 801ac50:	4632      	mov	r2, r6
 801ac52:	463b      	mov	r3, r7
 801ac54:	f7e5 fcd4 	bl	8000600 <__aeabi_dmul>
 801ac58:	f1ba 3fff 	cmp.w	sl, #4294967295
 801ac5c:	4602      	mov	r2, r0
 801ac5e:	460b      	mov	r3, r1
 801ac60:	d155      	bne.n	801ad0e <atan+0x25e>
 801ac62:	4640      	mov	r0, r8
 801ac64:	4649      	mov	r1, r9
 801ac66:	f7e5 fb19 	bl	800029c <__adddf3>
 801ac6a:	4622      	mov	r2, r4
 801ac6c:	462b      	mov	r3, r5
 801ac6e:	f7e5 fcc7 	bl	8000600 <__aeabi_dmul>
 801ac72:	4602      	mov	r2, r0
 801ac74:	460b      	mov	r3, r1
 801ac76:	4620      	mov	r0, r4
 801ac78:	4629      	mov	r1, r5
 801ac7a:	f7e5 fb0d 	bl	8000298 <__aeabi_dsub>
 801ac7e:	e72c      	b.n	801aada <atan+0x2a>
 801ac80:	ee10 0a10 	vmov	r0, s0
 801ac84:	2200      	movs	r2, #0
 801ac86:	4b57      	ldr	r3, [pc, #348]	; (801ade4 <atan+0x334>)
 801ac88:	4629      	mov	r1, r5
 801ac8a:	f7e5 fb05 	bl	8000298 <__aeabi_dsub>
 801ac8e:	2200      	movs	r2, #0
 801ac90:	4606      	mov	r6, r0
 801ac92:	460f      	mov	r7, r1
 801ac94:	4b53      	ldr	r3, [pc, #332]	; (801ade4 <atan+0x334>)
 801ac96:	4620      	mov	r0, r4
 801ac98:	4629      	mov	r1, r5
 801ac9a:	f7e5 faff 	bl	800029c <__adddf3>
 801ac9e:	4602      	mov	r2, r0
 801aca0:	460b      	mov	r3, r1
 801aca2:	4630      	mov	r0, r6
 801aca4:	4639      	mov	r1, r7
 801aca6:	f7e5 fdd5 	bl	8000854 <__aeabi_ddiv>
 801acaa:	f04f 0a01 	mov.w	sl, #1
 801acae:	4604      	mov	r4, r0
 801acb0:	460d      	mov	r5, r1
 801acb2:	e764      	b.n	801ab7e <atan+0xce>
 801acb4:	4b4d      	ldr	r3, [pc, #308]	; (801adec <atan+0x33c>)
 801acb6:	429e      	cmp	r6, r3
 801acb8:	dc1d      	bgt.n	801acf6 <atan+0x246>
 801acba:	ee10 0a10 	vmov	r0, s0
 801acbe:	2200      	movs	r2, #0
 801acc0:	4b4b      	ldr	r3, [pc, #300]	; (801adf0 <atan+0x340>)
 801acc2:	4629      	mov	r1, r5
 801acc4:	f7e5 fae8 	bl	8000298 <__aeabi_dsub>
 801acc8:	2200      	movs	r2, #0
 801acca:	4606      	mov	r6, r0
 801accc:	460f      	mov	r7, r1
 801acce:	4b48      	ldr	r3, [pc, #288]	; (801adf0 <atan+0x340>)
 801acd0:	4620      	mov	r0, r4
 801acd2:	4629      	mov	r1, r5
 801acd4:	f7e5 fc94 	bl	8000600 <__aeabi_dmul>
 801acd8:	2200      	movs	r2, #0
 801acda:	4b42      	ldr	r3, [pc, #264]	; (801ade4 <atan+0x334>)
 801acdc:	f7e5 fade 	bl	800029c <__adddf3>
 801ace0:	4602      	mov	r2, r0
 801ace2:	460b      	mov	r3, r1
 801ace4:	4630      	mov	r0, r6
 801ace6:	4639      	mov	r1, r7
 801ace8:	f7e5 fdb4 	bl	8000854 <__aeabi_ddiv>
 801acec:	f04f 0a02 	mov.w	sl, #2
 801acf0:	4604      	mov	r4, r0
 801acf2:	460d      	mov	r5, r1
 801acf4:	e743      	b.n	801ab7e <atan+0xce>
 801acf6:	462b      	mov	r3, r5
 801acf8:	ee10 2a10 	vmov	r2, s0
 801acfc:	2000      	movs	r0, #0
 801acfe:	493d      	ldr	r1, [pc, #244]	; (801adf4 <atan+0x344>)
 801ad00:	f7e5 fda8 	bl	8000854 <__aeabi_ddiv>
 801ad04:	f04f 0a03 	mov.w	sl, #3
 801ad08:	4604      	mov	r4, r0
 801ad0a:	460d      	mov	r5, r1
 801ad0c:	e737      	b.n	801ab7e <atan+0xce>
 801ad0e:	4640      	mov	r0, r8
 801ad10:	4649      	mov	r1, r9
 801ad12:	f7e5 fac3 	bl	800029c <__adddf3>
 801ad16:	4622      	mov	r2, r4
 801ad18:	462b      	mov	r3, r5
 801ad1a:	f7e5 fc71 	bl	8000600 <__aeabi_dmul>
 801ad1e:	4e36      	ldr	r6, [pc, #216]	; (801adf8 <atan+0x348>)
 801ad20:	4b36      	ldr	r3, [pc, #216]	; (801adfc <atan+0x34c>)
 801ad22:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801ad26:	4456      	add	r6, sl
 801ad28:	449a      	add	sl, r3
 801ad2a:	e9da 2300 	ldrd	r2, r3, [sl]
 801ad2e:	f7e5 fab3 	bl	8000298 <__aeabi_dsub>
 801ad32:	4622      	mov	r2, r4
 801ad34:	462b      	mov	r3, r5
 801ad36:	f7e5 faaf 	bl	8000298 <__aeabi_dsub>
 801ad3a:	4602      	mov	r2, r0
 801ad3c:	460b      	mov	r3, r1
 801ad3e:	e9d6 0100 	ldrd	r0, r1, [r6]
 801ad42:	f7e5 faa9 	bl	8000298 <__aeabi_dsub>
 801ad46:	f1bb 0f00 	cmp.w	fp, #0
 801ad4a:	4604      	mov	r4, r0
 801ad4c:	460d      	mov	r5, r1
 801ad4e:	f6bf aece 	bge.w	801aaee <atan+0x3e>
 801ad52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ad56:	4604      	mov	r4, r0
 801ad58:	461d      	mov	r5, r3
 801ad5a:	e6c8      	b.n	801aaee <atan+0x3e>
 801ad5c:	a51c      	add	r5, pc, #112	; (adr r5, 801add0 <atan+0x320>)
 801ad5e:	e9d5 4500 	ldrd	r4, r5, [r5]
 801ad62:	e6c4      	b.n	801aaee <atan+0x3e>
 801ad64:	f3af 8000 	nop.w
 801ad68:	54442d18 	.word	0x54442d18
 801ad6c:	bff921fb 	.word	0xbff921fb
 801ad70:	8800759c 	.word	0x8800759c
 801ad74:	7e37e43c 	.word	0x7e37e43c
 801ad78:	e322da11 	.word	0xe322da11
 801ad7c:	3f90ad3a 	.word	0x3f90ad3a
 801ad80:	24760deb 	.word	0x24760deb
 801ad84:	3fa97b4b 	.word	0x3fa97b4b
 801ad88:	a0d03d51 	.word	0xa0d03d51
 801ad8c:	3fb10d66 	.word	0x3fb10d66
 801ad90:	c54c206e 	.word	0xc54c206e
 801ad94:	3fb745cd 	.word	0x3fb745cd
 801ad98:	920083ff 	.word	0x920083ff
 801ad9c:	3fc24924 	.word	0x3fc24924
 801ada0:	5555550d 	.word	0x5555550d
 801ada4:	3fd55555 	.word	0x3fd55555
 801ada8:	2c6a6c2f 	.word	0x2c6a6c2f
 801adac:	bfa2b444 	.word	0xbfa2b444
 801adb0:	52defd9a 	.word	0x52defd9a
 801adb4:	3fadde2d 	.word	0x3fadde2d
 801adb8:	af749a6d 	.word	0xaf749a6d
 801adbc:	3fb3b0f2 	.word	0x3fb3b0f2
 801adc0:	fe231671 	.word	0xfe231671
 801adc4:	3fbc71c6 	.word	0x3fbc71c6
 801adc8:	9998ebc4 	.word	0x9998ebc4
 801adcc:	3fc99999 	.word	0x3fc99999
 801add0:	54442d18 	.word	0x54442d18
 801add4:	3ff921fb 	.word	0x3ff921fb
 801add8:	440fffff 	.word	0x440fffff
 801addc:	7ff00000 	.word	0x7ff00000
 801ade0:	3fdbffff 	.word	0x3fdbffff
 801ade4:	3ff00000 	.word	0x3ff00000
 801ade8:	3ff2ffff 	.word	0x3ff2ffff
 801adec:	40037fff 	.word	0x40037fff
 801adf0:	3ff80000 	.word	0x3ff80000
 801adf4:	bff00000 	.word	0xbff00000
 801adf8:	0801ec98 	.word	0x0801ec98
 801adfc:	0801ecb8 	.word	0x0801ecb8

0801ae00 <fabs>:
 801ae00:	ec53 2b10 	vmov	r2, r3, d0
 801ae04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ae08:	ec43 2b10 	vmov	d0, r2, r3
 801ae0c:	4770      	bx	lr

0801ae0e <finite>:
 801ae0e:	ee10 3a90 	vmov	r3, s1
 801ae12:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801ae16:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801ae1a:	0fc0      	lsrs	r0, r0, #31
 801ae1c:	4770      	bx	lr

0801ae1e <matherr>:
 801ae1e:	2000      	movs	r0, #0
 801ae20:	4770      	bx	lr
 801ae22:	0000      	movs	r0, r0
 801ae24:	0000      	movs	r0, r0
	...

0801ae28 <nan>:
 801ae28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801ae30 <nan+0x8>
 801ae2c:	4770      	bx	lr
 801ae2e:	bf00      	nop
 801ae30:	00000000 	.word	0x00000000
 801ae34:	7ff80000 	.word	0x7ff80000

0801ae38 <rint>:
 801ae38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ae3a:	ec51 0b10 	vmov	r0, r1, d0
 801ae3e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 801ae42:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 801ae46:	2e13      	cmp	r6, #19
 801ae48:	ee10 7a10 	vmov	r7, s0
 801ae4c:	460b      	mov	r3, r1
 801ae4e:	4602      	mov	r2, r0
 801ae50:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801ae54:	dc58      	bgt.n	801af08 <rint+0xd0>
 801ae56:	2e00      	cmp	r6, #0
 801ae58:	da2b      	bge.n	801aeb2 <rint+0x7a>
 801ae5a:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801ae5e:	4302      	orrs	r2, r0
 801ae60:	d023      	beq.n	801aeaa <rint+0x72>
 801ae62:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801ae66:	4302      	orrs	r2, r0
 801ae68:	4251      	negs	r1, r2
 801ae6a:	4311      	orrs	r1, r2
 801ae6c:	0b09      	lsrs	r1, r1, #12
 801ae6e:	0c5b      	lsrs	r3, r3, #17
 801ae70:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 801ae74:	045b      	lsls	r3, r3, #17
 801ae76:	ea41 0703 	orr.w	r7, r1, r3
 801ae7a:	4b31      	ldr	r3, [pc, #196]	; (801af40 <rint+0x108>)
 801ae7c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801ae80:	4639      	mov	r1, r7
 801ae82:	e9d3 6700 	ldrd	r6, r7, [r3]
 801ae86:	ee10 0a10 	vmov	r0, s0
 801ae8a:	4632      	mov	r2, r6
 801ae8c:	463b      	mov	r3, r7
 801ae8e:	f7e5 fa05 	bl	800029c <__adddf3>
 801ae92:	e9cd 0100 	strd	r0, r1, [sp]
 801ae96:	463b      	mov	r3, r7
 801ae98:	4632      	mov	r2, r6
 801ae9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ae9e:	f7e5 f9fb 	bl	8000298 <__aeabi_dsub>
 801aea2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801aea6:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 801aeaa:	ec41 0b10 	vmov	d0, r0, r1
 801aeae:	b003      	add	sp, #12
 801aeb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aeb2:	4c24      	ldr	r4, [pc, #144]	; (801af44 <rint+0x10c>)
 801aeb4:	4134      	asrs	r4, r6
 801aeb6:	ea01 0704 	and.w	r7, r1, r4
 801aeba:	4307      	orrs	r7, r0
 801aebc:	d0f5      	beq.n	801aeaa <rint+0x72>
 801aebe:	0861      	lsrs	r1, r4, #1
 801aec0:	ea03 0001 	and.w	r0, r3, r1
 801aec4:	4302      	orrs	r2, r0
 801aec6:	d00b      	beq.n	801aee0 <rint+0xa8>
 801aec8:	ea23 0101 	bic.w	r1, r3, r1
 801aecc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801aed0:	2e13      	cmp	r6, #19
 801aed2:	fa43 f306 	asr.w	r3, r3, r6
 801aed6:	bf0c      	ite	eq
 801aed8:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 801aedc:	2200      	movne	r2, #0
 801aede:	430b      	orrs	r3, r1
 801aee0:	4619      	mov	r1, r3
 801aee2:	4b17      	ldr	r3, [pc, #92]	; (801af40 <rint+0x108>)
 801aee4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801aee8:	e9d5 4500 	ldrd	r4, r5, [r5]
 801aeec:	4610      	mov	r0, r2
 801aeee:	462b      	mov	r3, r5
 801aef0:	4622      	mov	r2, r4
 801aef2:	f7e5 f9d3 	bl	800029c <__adddf3>
 801aef6:	e9cd 0100 	strd	r0, r1, [sp]
 801aefa:	4622      	mov	r2, r4
 801aefc:	462b      	mov	r3, r5
 801aefe:	e9dd 0100 	ldrd	r0, r1, [sp]
 801af02:	f7e5 f9c9 	bl	8000298 <__aeabi_dsub>
 801af06:	e7d0      	b.n	801aeaa <rint+0x72>
 801af08:	2e33      	cmp	r6, #51	; 0x33
 801af0a:	dd08      	ble.n	801af1e <rint+0xe6>
 801af0c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801af10:	d1cb      	bne.n	801aeaa <rint+0x72>
 801af12:	ee10 2a10 	vmov	r2, s0
 801af16:	460b      	mov	r3, r1
 801af18:	f7e5 f9c0 	bl	800029c <__adddf3>
 801af1c:	e7c5      	b.n	801aeaa <rint+0x72>
 801af1e:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 801af22:	f04f 34ff 	mov.w	r4, #4294967295
 801af26:	40f4      	lsrs	r4, r6
 801af28:	4220      	tst	r0, r4
 801af2a:	d0be      	beq.n	801aeaa <rint+0x72>
 801af2c:	0861      	lsrs	r1, r4, #1
 801af2e:	420f      	tst	r7, r1
 801af30:	bf1f      	itttt	ne
 801af32:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 801af36:	ea27 0101 	bicne.w	r1, r7, r1
 801af3a:	4132      	asrne	r2, r6
 801af3c:	430a      	orrne	r2, r1
 801af3e:	e7cf      	b.n	801aee0 <rint+0xa8>
 801af40:	0801ecd8 	.word	0x0801ecd8
 801af44:	000fffff 	.word	0x000fffff

0801af48 <scalbn>:
 801af48:	b570      	push	{r4, r5, r6, lr}
 801af4a:	ec55 4b10 	vmov	r4, r5, d0
 801af4e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801af52:	4606      	mov	r6, r0
 801af54:	462b      	mov	r3, r5
 801af56:	b9b2      	cbnz	r2, 801af86 <scalbn+0x3e>
 801af58:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801af5c:	4323      	orrs	r3, r4
 801af5e:	d03c      	beq.n	801afda <scalbn+0x92>
 801af60:	2200      	movs	r2, #0
 801af62:	4b33      	ldr	r3, [pc, #204]	; (801b030 <scalbn+0xe8>)
 801af64:	4629      	mov	r1, r5
 801af66:	ee10 0a10 	vmov	r0, s0
 801af6a:	f7e5 fb49 	bl	8000600 <__aeabi_dmul>
 801af6e:	4a31      	ldr	r2, [pc, #196]	; (801b034 <scalbn+0xec>)
 801af70:	4296      	cmp	r6, r2
 801af72:	4604      	mov	r4, r0
 801af74:	460d      	mov	r5, r1
 801af76:	460b      	mov	r3, r1
 801af78:	da13      	bge.n	801afa2 <scalbn+0x5a>
 801af7a:	a329      	add	r3, pc, #164	; (adr r3, 801b020 <scalbn+0xd8>)
 801af7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af80:	f7e5 fb3e 	bl	8000600 <__aeabi_dmul>
 801af84:	e00a      	b.n	801af9c <scalbn+0x54>
 801af86:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801af8a:	428a      	cmp	r2, r1
 801af8c:	d10c      	bne.n	801afa8 <scalbn+0x60>
 801af8e:	ee10 2a10 	vmov	r2, s0
 801af92:	462b      	mov	r3, r5
 801af94:	4620      	mov	r0, r4
 801af96:	4629      	mov	r1, r5
 801af98:	f7e5 f980 	bl	800029c <__adddf3>
 801af9c:	4604      	mov	r4, r0
 801af9e:	460d      	mov	r5, r1
 801afa0:	e01b      	b.n	801afda <scalbn+0x92>
 801afa2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801afa6:	3a36      	subs	r2, #54	; 0x36
 801afa8:	4432      	add	r2, r6
 801afaa:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801afae:	428a      	cmp	r2, r1
 801afb0:	dd0b      	ble.n	801afca <scalbn+0x82>
 801afb2:	ec45 4b11 	vmov	d1, r4, r5
 801afb6:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 801b028 <scalbn+0xe0>
 801afba:	f000 f8e9 	bl	801b190 <copysign>
 801afbe:	a31a      	add	r3, pc, #104	; (adr r3, 801b028 <scalbn+0xe0>)
 801afc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afc4:	ec51 0b10 	vmov	r0, r1, d0
 801afc8:	e7da      	b.n	801af80 <scalbn+0x38>
 801afca:	2a00      	cmp	r2, #0
 801afcc:	dd08      	ble.n	801afe0 <scalbn+0x98>
 801afce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801afd2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801afd6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801afda:	ec45 4b10 	vmov	d0, r4, r5
 801afde:	bd70      	pop	{r4, r5, r6, pc}
 801afe0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801afe4:	da0d      	bge.n	801b002 <scalbn+0xba>
 801afe6:	f24c 3350 	movw	r3, #50000	; 0xc350
 801afea:	429e      	cmp	r6, r3
 801afec:	ec45 4b11 	vmov	d1, r4, r5
 801aff0:	dce1      	bgt.n	801afb6 <scalbn+0x6e>
 801aff2:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 801b020 <scalbn+0xd8>
 801aff6:	f000 f8cb 	bl	801b190 <copysign>
 801affa:	a309      	add	r3, pc, #36	; (adr r3, 801b020 <scalbn+0xd8>)
 801affc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b000:	e7e0      	b.n	801afc4 <scalbn+0x7c>
 801b002:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b006:	3236      	adds	r2, #54	; 0x36
 801b008:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b00c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b010:	4620      	mov	r0, r4
 801b012:	4629      	mov	r1, r5
 801b014:	2200      	movs	r2, #0
 801b016:	4b08      	ldr	r3, [pc, #32]	; (801b038 <scalbn+0xf0>)
 801b018:	e7b2      	b.n	801af80 <scalbn+0x38>
 801b01a:	bf00      	nop
 801b01c:	f3af 8000 	nop.w
 801b020:	c2f8f359 	.word	0xc2f8f359
 801b024:	01a56e1f 	.word	0x01a56e1f
 801b028:	8800759c 	.word	0x8800759c
 801b02c:	7e37e43c 	.word	0x7e37e43c
 801b030:	43500000 	.word	0x43500000
 801b034:	ffff3cb0 	.word	0xffff3cb0
 801b038:	3c900000 	.word	0x3c900000

0801b03c <fabsf>:
 801b03c:	ee10 3a10 	vmov	r3, s0
 801b040:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b044:	ee00 3a10 	vmov	s0, r3
 801b048:	4770      	bx	lr
	...

0801b04c <floorf>:
 801b04c:	ee10 3a10 	vmov	r3, s0
 801b050:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801b054:	0dca      	lsrs	r2, r1, #23
 801b056:	3a7f      	subs	r2, #127	; 0x7f
 801b058:	2a16      	cmp	r2, #22
 801b05a:	dc2a      	bgt.n	801b0b2 <floorf+0x66>
 801b05c:	2a00      	cmp	r2, #0
 801b05e:	da11      	bge.n	801b084 <floorf+0x38>
 801b060:	eddf 7a18 	vldr	s15, [pc, #96]	; 801b0c4 <floorf+0x78>
 801b064:	ee30 0a27 	vadd.f32	s0, s0, s15
 801b068:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801b06c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b070:	dd05      	ble.n	801b07e <floorf+0x32>
 801b072:	2b00      	cmp	r3, #0
 801b074:	da23      	bge.n	801b0be <floorf+0x72>
 801b076:	4a14      	ldr	r2, [pc, #80]	; (801b0c8 <floorf+0x7c>)
 801b078:	2900      	cmp	r1, #0
 801b07a:	bf18      	it	ne
 801b07c:	4613      	movne	r3, r2
 801b07e:	ee00 3a10 	vmov	s0, r3
 801b082:	4770      	bx	lr
 801b084:	4911      	ldr	r1, [pc, #68]	; (801b0cc <floorf+0x80>)
 801b086:	4111      	asrs	r1, r2
 801b088:	420b      	tst	r3, r1
 801b08a:	d0fa      	beq.n	801b082 <floorf+0x36>
 801b08c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801b0c4 <floorf+0x78>
 801b090:	ee30 0a27 	vadd.f32	s0, s0, s15
 801b094:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801b098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b09c:	ddef      	ble.n	801b07e <floorf+0x32>
 801b09e:	2b00      	cmp	r3, #0
 801b0a0:	bfbe      	ittt	lt
 801b0a2:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801b0a6:	fa40 f202 	asrlt.w	r2, r0, r2
 801b0aa:	189b      	addlt	r3, r3, r2
 801b0ac:	ea23 0301 	bic.w	r3, r3, r1
 801b0b0:	e7e5      	b.n	801b07e <floorf+0x32>
 801b0b2:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801b0b6:	d3e4      	bcc.n	801b082 <floorf+0x36>
 801b0b8:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b0bc:	4770      	bx	lr
 801b0be:	2300      	movs	r3, #0
 801b0c0:	e7dd      	b.n	801b07e <floorf+0x32>
 801b0c2:	bf00      	nop
 801b0c4:	7149f2ca 	.word	0x7149f2ca
 801b0c8:	bf800000 	.word	0xbf800000
 801b0cc:	007fffff 	.word	0x007fffff

0801b0d0 <scalbnf>:
 801b0d0:	b508      	push	{r3, lr}
 801b0d2:	ee10 2a10 	vmov	r2, s0
 801b0d6:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 801b0da:	ed2d 8b02 	vpush	{d8}
 801b0de:	eef0 0a40 	vmov.f32	s1, s0
 801b0e2:	d004      	beq.n	801b0ee <scalbnf+0x1e>
 801b0e4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801b0e8:	d306      	bcc.n	801b0f8 <scalbnf+0x28>
 801b0ea:	ee70 0a00 	vadd.f32	s1, s0, s0
 801b0ee:	ecbd 8b02 	vpop	{d8}
 801b0f2:	eeb0 0a60 	vmov.f32	s0, s1
 801b0f6:	bd08      	pop	{r3, pc}
 801b0f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801b0fc:	d21c      	bcs.n	801b138 <scalbnf+0x68>
 801b0fe:	4b1f      	ldr	r3, [pc, #124]	; (801b17c <scalbnf+0xac>)
 801b100:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801b180 <scalbnf+0xb0>
 801b104:	4298      	cmp	r0, r3
 801b106:	ee60 0a27 	vmul.f32	s1, s0, s15
 801b10a:	db10      	blt.n	801b12e <scalbnf+0x5e>
 801b10c:	ee10 2a90 	vmov	r2, s1
 801b110:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 801b114:	3b19      	subs	r3, #25
 801b116:	4403      	add	r3, r0
 801b118:	2bfe      	cmp	r3, #254	; 0xfe
 801b11a:	dd0f      	ble.n	801b13c <scalbnf+0x6c>
 801b11c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 801b184 <scalbnf+0xb4>
 801b120:	eeb0 0a48 	vmov.f32	s0, s16
 801b124:	f000 f841 	bl	801b1aa <copysignf>
 801b128:	ee60 0a08 	vmul.f32	s1, s0, s16
 801b12c:	e7df      	b.n	801b0ee <scalbnf+0x1e>
 801b12e:	eddf 7a16 	vldr	s15, [pc, #88]	; 801b188 <scalbnf+0xb8>
 801b132:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801b136:	e7da      	b.n	801b0ee <scalbnf+0x1e>
 801b138:	0ddb      	lsrs	r3, r3, #23
 801b13a:	e7ec      	b.n	801b116 <scalbnf+0x46>
 801b13c:	2b00      	cmp	r3, #0
 801b13e:	dd06      	ble.n	801b14e <scalbnf+0x7e>
 801b140:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801b144:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801b148:	ee00 3a90 	vmov	s1, r3
 801b14c:	e7cf      	b.n	801b0ee <scalbnf+0x1e>
 801b14e:	f113 0f16 	cmn.w	r3, #22
 801b152:	da06      	bge.n	801b162 <scalbnf+0x92>
 801b154:	f24c 3350 	movw	r3, #50000	; 0xc350
 801b158:	4298      	cmp	r0, r3
 801b15a:	dcdf      	bgt.n	801b11c <scalbnf+0x4c>
 801b15c:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 801b188 <scalbnf+0xb8>
 801b160:	e7de      	b.n	801b120 <scalbnf+0x50>
 801b162:	3319      	adds	r3, #25
 801b164:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801b168:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801b16c:	eddf 7a07 	vldr	s15, [pc, #28]	; 801b18c <scalbnf+0xbc>
 801b170:	ee07 3a10 	vmov	s14, r3
 801b174:	ee67 0a27 	vmul.f32	s1, s14, s15
 801b178:	e7b9      	b.n	801b0ee <scalbnf+0x1e>
 801b17a:	bf00      	nop
 801b17c:	ffff3cb0 	.word	0xffff3cb0
 801b180:	4c000000 	.word	0x4c000000
 801b184:	7149f2ca 	.word	0x7149f2ca
 801b188:	0da24260 	.word	0x0da24260
 801b18c:	33000000 	.word	0x33000000

0801b190 <copysign>:
 801b190:	ec53 2b10 	vmov	r2, r3, d0
 801b194:	ee11 0a90 	vmov	r0, s3
 801b198:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801b19c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801b1a0:	ea41 0300 	orr.w	r3, r1, r0
 801b1a4:	ec43 2b10 	vmov	d0, r2, r3
 801b1a8:	4770      	bx	lr

0801b1aa <copysignf>:
 801b1aa:	ee10 3a10 	vmov	r3, s0
 801b1ae:	ee10 2a90 	vmov	r2, s1
 801b1b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b1b6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 801b1ba:	4313      	orrs	r3, r2
 801b1bc:	ee00 3a10 	vmov	s0, r3
 801b1c0:	4770      	bx	lr
	...

0801b1c4 <__errno>:
 801b1c4:	4b01      	ldr	r3, [pc, #4]	; (801b1cc <__errno+0x8>)
 801b1c6:	6818      	ldr	r0, [r3, #0]
 801b1c8:	4770      	bx	lr
 801b1ca:	bf00      	nop
 801b1cc:	20001480 	.word	0x20001480

0801b1d0 <__sflush_r>:
 801b1d0:	898a      	ldrh	r2, [r1, #12]
 801b1d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b1d6:	4605      	mov	r5, r0
 801b1d8:	0710      	lsls	r0, r2, #28
 801b1da:	460c      	mov	r4, r1
 801b1dc:	d45a      	bmi.n	801b294 <__sflush_r+0xc4>
 801b1de:	684b      	ldr	r3, [r1, #4]
 801b1e0:	2b00      	cmp	r3, #0
 801b1e2:	dc05      	bgt.n	801b1f0 <__sflush_r+0x20>
 801b1e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b1e6:	2b00      	cmp	r3, #0
 801b1e8:	dc02      	bgt.n	801b1f0 <__sflush_r+0x20>
 801b1ea:	2000      	movs	r0, #0
 801b1ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b1f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b1f2:	2e00      	cmp	r6, #0
 801b1f4:	d0f9      	beq.n	801b1ea <__sflush_r+0x1a>
 801b1f6:	2300      	movs	r3, #0
 801b1f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b1fc:	682f      	ldr	r7, [r5, #0]
 801b1fe:	602b      	str	r3, [r5, #0]
 801b200:	d033      	beq.n	801b26a <__sflush_r+0x9a>
 801b202:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b204:	89a3      	ldrh	r3, [r4, #12]
 801b206:	075a      	lsls	r2, r3, #29
 801b208:	d505      	bpl.n	801b216 <__sflush_r+0x46>
 801b20a:	6863      	ldr	r3, [r4, #4]
 801b20c:	1ac0      	subs	r0, r0, r3
 801b20e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b210:	b10b      	cbz	r3, 801b216 <__sflush_r+0x46>
 801b212:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b214:	1ac0      	subs	r0, r0, r3
 801b216:	2300      	movs	r3, #0
 801b218:	4602      	mov	r2, r0
 801b21a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b21c:	6a21      	ldr	r1, [r4, #32]
 801b21e:	4628      	mov	r0, r5
 801b220:	47b0      	blx	r6
 801b222:	1c43      	adds	r3, r0, #1
 801b224:	89a3      	ldrh	r3, [r4, #12]
 801b226:	d106      	bne.n	801b236 <__sflush_r+0x66>
 801b228:	6829      	ldr	r1, [r5, #0]
 801b22a:	291d      	cmp	r1, #29
 801b22c:	d84b      	bhi.n	801b2c6 <__sflush_r+0xf6>
 801b22e:	4a2b      	ldr	r2, [pc, #172]	; (801b2dc <__sflush_r+0x10c>)
 801b230:	40ca      	lsrs	r2, r1
 801b232:	07d6      	lsls	r6, r2, #31
 801b234:	d547      	bpl.n	801b2c6 <__sflush_r+0xf6>
 801b236:	2200      	movs	r2, #0
 801b238:	6062      	str	r2, [r4, #4]
 801b23a:	04d9      	lsls	r1, r3, #19
 801b23c:	6922      	ldr	r2, [r4, #16]
 801b23e:	6022      	str	r2, [r4, #0]
 801b240:	d504      	bpl.n	801b24c <__sflush_r+0x7c>
 801b242:	1c42      	adds	r2, r0, #1
 801b244:	d101      	bne.n	801b24a <__sflush_r+0x7a>
 801b246:	682b      	ldr	r3, [r5, #0]
 801b248:	b903      	cbnz	r3, 801b24c <__sflush_r+0x7c>
 801b24a:	6560      	str	r0, [r4, #84]	; 0x54
 801b24c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b24e:	602f      	str	r7, [r5, #0]
 801b250:	2900      	cmp	r1, #0
 801b252:	d0ca      	beq.n	801b1ea <__sflush_r+0x1a>
 801b254:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b258:	4299      	cmp	r1, r3
 801b25a:	d002      	beq.n	801b262 <__sflush_r+0x92>
 801b25c:	4628      	mov	r0, r5
 801b25e:	f000 f973 	bl	801b548 <_free_r>
 801b262:	2000      	movs	r0, #0
 801b264:	6360      	str	r0, [r4, #52]	; 0x34
 801b266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b26a:	6a21      	ldr	r1, [r4, #32]
 801b26c:	2301      	movs	r3, #1
 801b26e:	4628      	mov	r0, r5
 801b270:	47b0      	blx	r6
 801b272:	1c41      	adds	r1, r0, #1
 801b274:	d1c6      	bne.n	801b204 <__sflush_r+0x34>
 801b276:	682b      	ldr	r3, [r5, #0]
 801b278:	2b00      	cmp	r3, #0
 801b27a:	d0c3      	beq.n	801b204 <__sflush_r+0x34>
 801b27c:	2b1d      	cmp	r3, #29
 801b27e:	d001      	beq.n	801b284 <__sflush_r+0xb4>
 801b280:	2b16      	cmp	r3, #22
 801b282:	d101      	bne.n	801b288 <__sflush_r+0xb8>
 801b284:	602f      	str	r7, [r5, #0]
 801b286:	e7b0      	b.n	801b1ea <__sflush_r+0x1a>
 801b288:	89a3      	ldrh	r3, [r4, #12]
 801b28a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b28e:	81a3      	strh	r3, [r4, #12]
 801b290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b294:	690f      	ldr	r7, [r1, #16]
 801b296:	2f00      	cmp	r7, #0
 801b298:	d0a7      	beq.n	801b1ea <__sflush_r+0x1a>
 801b29a:	0793      	lsls	r3, r2, #30
 801b29c:	680e      	ldr	r6, [r1, #0]
 801b29e:	bf08      	it	eq
 801b2a0:	694b      	ldreq	r3, [r1, #20]
 801b2a2:	600f      	str	r7, [r1, #0]
 801b2a4:	bf18      	it	ne
 801b2a6:	2300      	movne	r3, #0
 801b2a8:	eba6 0807 	sub.w	r8, r6, r7
 801b2ac:	608b      	str	r3, [r1, #8]
 801b2ae:	f1b8 0f00 	cmp.w	r8, #0
 801b2b2:	dd9a      	ble.n	801b1ea <__sflush_r+0x1a>
 801b2b4:	4643      	mov	r3, r8
 801b2b6:	463a      	mov	r2, r7
 801b2b8:	6a21      	ldr	r1, [r4, #32]
 801b2ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b2bc:	4628      	mov	r0, r5
 801b2be:	47b0      	blx	r6
 801b2c0:	2800      	cmp	r0, #0
 801b2c2:	dc07      	bgt.n	801b2d4 <__sflush_r+0x104>
 801b2c4:	89a3      	ldrh	r3, [r4, #12]
 801b2c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b2ca:	81a3      	strh	r3, [r4, #12]
 801b2cc:	f04f 30ff 	mov.w	r0, #4294967295
 801b2d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b2d4:	4407      	add	r7, r0
 801b2d6:	eba8 0800 	sub.w	r8, r8, r0
 801b2da:	e7e8      	b.n	801b2ae <__sflush_r+0xde>
 801b2dc:	20400001 	.word	0x20400001

0801b2e0 <_fflush_r>:
 801b2e0:	b538      	push	{r3, r4, r5, lr}
 801b2e2:	690b      	ldr	r3, [r1, #16]
 801b2e4:	4605      	mov	r5, r0
 801b2e6:	460c      	mov	r4, r1
 801b2e8:	b1db      	cbz	r3, 801b322 <_fflush_r+0x42>
 801b2ea:	b118      	cbz	r0, 801b2f4 <_fflush_r+0x14>
 801b2ec:	6983      	ldr	r3, [r0, #24]
 801b2ee:	b90b      	cbnz	r3, 801b2f4 <_fflush_r+0x14>
 801b2f0:	f000 f860 	bl	801b3b4 <__sinit>
 801b2f4:	4b0c      	ldr	r3, [pc, #48]	; (801b328 <_fflush_r+0x48>)
 801b2f6:	429c      	cmp	r4, r3
 801b2f8:	d109      	bne.n	801b30e <_fflush_r+0x2e>
 801b2fa:	686c      	ldr	r4, [r5, #4]
 801b2fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b300:	b17b      	cbz	r3, 801b322 <_fflush_r+0x42>
 801b302:	4621      	mov	r1, r4
 801b304:	4628      	mov	r0, r5
 801b306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b30a:	f7ff bf61 	b.w	801b1d0 <__sflush_r>
 801b30e:	4b07      	ldr	r3, [pc, #28]	; (801b32c <_fflush_r+0x4c>)
 801b310:	429c      	cmp	r4, r3
 801b312:	d101      	bne.n	801b318 <_fflush_r+0x38>
 801b314:	68ac      	ldr	r4, [r5, #8]
 801b316:	e7f1      	b.n	801b2fc <_fflush_r+0x1c>
 801b318:	4b05      	ldr	r3, [pc, #20]	; (801b330 <_fflush_r+0x50>)
 801b31a:	429c      	cmp	r4, r3
 801b31c:	bf08      	it	eq
 801b31e:	68ec      	ldreq	r4, [r5, #12]
 801b320:	e7ec      	b.n	801b2fc <_fflush_r+0x1c>
 801b322:	2000      	movs	r0, #0
 801b324:	bd38      	pop	{r3, r4, r5, pc}
 801b326:	bf00      	nop
 801b328:	0801ed08 	.word	0x0801ed08
 801b32c:	0801ed28 	.word	0x0801ed28
 801b330:	0801ece8 	.word	0x0801ece8

0801b334 <_cleanup_r>:
 801b334:	4901      	ldr	r1, [pc, #4]	; (801b33c <_cleanup_r+0x8>)
 801b336:	f000 b8a9 	b.w	801b48c <_fwalk_reent>
 801b33a:	bf00      	nop
 801b33c:	0801b2e1 	.word	0x0801b2e1

0801b340 <std.isra.0>:
 801b340:	2300      	movs	r3, #0
 801b342:	b510      	push	{r4, lr}
 801b344:	4604      	mov	r4, r0
 801b346:	6003      	str	r3, [r0, #0]
 801b348:	6043      	str	r3, [r0, #4]
 801b34a:	6083      	str	r3, [r0, #8]
 801b34c:	8181      	strh	r1, [r0, #12]
 801b34e:	6643      	str	r3, [r0, #100]	; 0x64
 801b350:	81c2      	strh	r2, [r0, #14]
 801b352:	6103      	str	r3, [r0, #16]
 801b354:	6143      	str	r3, [r0, #20]
 801b356:	6183      	str	r3, [r0, #24]
 801b358:	4619      	mov	r1, r3
 801b35a:	2208      	movs	r2, #8
 801b35c:	305c      	adds	r0, #92	; 0x5c
 801b35e:	f000 f8ea 	bl	801b536 <memset>
 801b362:	4b05      	ldr	r3, [pc, #20]	; (801b378 <std.isra.0+0x38>)
 801b364:	6263      	str	r3, [r4, #36]	; 0x24
 801b366:	4b05      	ldr	r3, [pc, #20]	; (801b37c <std.isra.0+0x3c>)
 801b368:	62a3      	str	r3, [r4, #40]	; 0x28
 801b36a:	4b05      	ldr	r3, [pc, #20]	; (801b380 <std.isra.0+0x40>)
 801b36c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b36e:	4b05      	ldr	r3, [pc, #20]	; (801b384 <std.isra.0+0x44>)
 801b370:	6224      	str	r4, [r4, #32]
 801b372:	6323      	str	r3, [r4, #48]	; 0x30
 801b374:	bd10      	pop	{r4, pc}
 801b376:	bf00      	nop
 801b378:	0801c255 	.word	0x0801c255
 801b37c:	0801c277 	.word	0x0801c277
 801b380:	0801c2af 	.word	0x0801c2af
 801b384:	0801c2d3 	.word	0x0801c2d3

0801b388 <__sfmoreglue>:
 801b388:	b570      	push	{r4, r5, r6, lr}
 801b38a:	1e4a      	subs	r2, r1, #1
 801b38c:	2568      	movs	r5, #104	; 0x68
 801b38e:	4355      	muls	r5, r2
 801b390:	460e      	mov	r6, r1
 801b392:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801b396:	f000 f925 	bl	801b5e4 <_malloc_r>
 801b39a:	4604      	mov	r4, r0
 801b39c:	b140      	cbz	r0, 801b3b0 <__sfmoreglue+0x28>
 801b39e:	2100      	movs	r1, #0
 801b3a0:	e880 0042 	stmia.w	r0, {r1, r6}
 801b3a4:	300c      	adds	r0, #12
 801b3a6:	60a0      	str	r0, [r4, #8]
 801b3a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801b3ac:	f000 f8c3 	bl	801b536 <memset>
 801b3b0:	4620      	mov	r0, r4
 801b3b2:	bd70      	pop	{r4, r5, r6, pc}

0801b3b4 <__sinit>:
 801b3b4:	6983      	ldr	r3, [r0, #24]
 801b3b6:	b510      	push	{r4, lr}
 801b3b8:	4604      	mov	r4, r0
 801b3ba:	bb33      	cbnz	r3, 801b40a <__sinit+0x56>
 801b3bc:	6483      	str	r3, [r0, #72]	; 0x48
 801b3be:	64c3      	str	r3, [r0, #76]	; 0x4c
 801b3c0:	6503      	str	r3, [r0, #80]	; 0x50
 801b3c2:	4b12      	ldr	r3, [pc, #72]	; (801b40c <__sinit+0x58>)
 801b3c4:	4a12      	ldr	r2, [pc, #72]	; (801b410 <__sinit+0x5c>)
 801b3c6:	681b      	ldr	r3, [r3, #0]
 801b3c8:	6282      	str	r2, [r0, #40]	; 0x28
 801b3ca:	4298      	cmp	r0, r3
 801b3cc:	bf04      	itt	eq
 801b3ce:	2301      	moveq	r3, #1
 801b3d0:	6183      	streq	r3, [r0, #24]
 801b3d2:	f000 f81f 	bl	801b414 <__sfp>
 801b3d6:	6060      	str	r0, [r4, #4]
 801b3d8:	4620      	mov	r0, r4
 801b3da:	f000 f81b 	bl	801b414 <__sfp>
 801b3de:	60a0      	str	r0, [r4, #8]
 801b3e0:	4620      	mov	r0, r4
 801b3e2:	f000 f817 	bl	801b414 <__sfp>
 801b3e6:	2200      	movs	r2, #0
 801b3e8:	60e0      	str	r0, [r4, #12]
 801b3ea:	2104      	movs	r1, #4
 801b3ec:	6860      	ldr	r0, [r4, #4]
 801b3ee:	f7ff ffa7 	bl	801b340 <std.isra.0>
 801b3f2:	2201      	movs	r2, #1
 801b3f4:	2109      	movs	r1, #9
 801b3f6:	68a0      	ldr	r0, [r4, #8]
 801b3f8:	f7ff ffa2 	bl	801b340 <std.isra.0>
 801b3fc:	2202      	movs	r2, #2
 801b3fe:	2112      	movs	r1, #18
 801b400:	68e0      	ldr	r0, [r4, #12]
 801b402:	f7ff ff9d 	bl	801b340 <std.isra.0>
 801b406:	2301      	movs	r3, #1
 801b408:	61a3      	str	r3, [r4, #24]
 801b40a:	bd10      	pop	{r4, pc}
 801b40c:	0801ed48 	.word	0x0801ed48
 801b410:	0801b335 	.word	0x0801b335

0801b414 <__sfp>:
 801b414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b416:	4b1c      	ldr	r3, [pc, #112]	; (801b488 <__sfp+0x74>)
 801b418:	681e      	ldr	r6, [r3, #0]
 801b41a:	69b3      	ldr	r3, [r6, #24]
 801b41c:	4607      	mov	r7, r0
 801b41e:	b913      	cbnz	r3, 801b426 <__sfp+0x12>
 801b420:	4630      	mov	r0, r6
 801b422:	f7ff ffc7 	bl	801b3b4 <__sinit>
 801b426:	3648      	adds	r6, #72	; 0x48
 801b428:	68b4      	ldr	r4, [r6, #8]
 801b42a:	6873      	ldr	r3, [r6, #4]
 801b42c:	3b01      	subs	r3, #1
 801b42e:	d503      	bpl.n	801b438 <__sfp+0x24>
 801b430:	6833      	ldr	r3, [r6, #0]
 801b432:	b133      	cbz	r3, 801b442 <__sfp+0x2e>
 801b434:	6836      	ldr	r6, [r6, #0]
 801b436:	e7f7      	b.n	801b428 <__sfp+0x14>
 801b438:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801b43c:	b16d      	cbz	r5, 801b45a <__sfp+0x46>
 801b43e:	3468      	adds	r4, #104	; 0x68
 801b440:	e7f4      	b.n	801b42c <__sfp+0x18>
 801b442:	2104      	movs	r1, #4
 801b444:	4638      	mov	r0, r7
 801b446:	f7ff ff9f 	bl	801b388 <__sfmoreglue>
 801b44a:	6030      	str	r0, [r6, #0]
 801b44c:	2800      	cmp	r0, #0
 801b44e:	d1f1      	bne.n	801b434 <__sfp+0x20>
 801b450:	230c      	movs	r3, #12
 801b452:	603b      	str	r3, [r7, #0]
 801b454:	4604      	mov	r4, r0
 801b456:	4620      	mov	r0, r4
 801b458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b45a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b45e:	81e3      	strh	r3, [r4, #14]
 801b460:	2301      	movs	r3, #1
 801b462:	81a3      	strh	r3, [r4, #12]
 801b464:	6665      	str	r5, [r4, #100]	; 0x64
 801b466:	6025      	str	r5, [r4, #0]
 801b468:	60a5      	str	r5, [r4, #8]
 801b46a:	6065      	str	r5, [r4, #4]
 801b46c:	6125      	str	r5, [r4, #16]
 801b46e:	6165      	str	r5, [r4, #20]
 801b470:	61a5      	str	r5, [r4, #24]
 801b472:	2208      	movs	r2, #8
 801b474:	4629      	mov	r1, r5
 801b476:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801b47a:	f000 f85c 	bl	801b536 <memset>
 801b47e:	6365      	str	r5, [r4, #52]	; 0x34
 801b480:	63a5      	str	r5, [r4, #56]	; 0x38
 801b482:	64a5      	str	r5, [r4, #72]	; 0x48
 801b484:	64e5      	str	r5, [r4, #76]	; 0x4c
 801b486:	e7e6      	b.n	801b456 <__sfp+0x42>
 801b488:	0801ed48 	.word	0x0801ed48

0801b48c <_fwalk_reent>:
 801b48c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b490:	4680      	mov	r8, r0
 801b492:	4689      	mov	r9, r1
 801b494:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801b498:	2600      	movs	r6, #0
 801b49a:	b914      	cbnz	r4, 801b4a2 <_fwalk_reent+0x16>
 801b49c:	4630      	mov	r0, r6
 801b49e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b4a2:	68a5      	ldr	r5, [r4, #8]
 801b4a4:	6867      	ldr	r7, [r4, #4]
 801b4a6:	3f01      	subs	r7, #1
 801b4a8:	d501      	bpl.n	801b4ae <_fwalk_reent+0x22>
 801b4aa:	6824      	ldr	r4, [r4, #0]
 801b4ac:	e7f5      	b.n	801b49a <_fwalk_reent+0xe>
 801b4ae:	89ab      	ldrh	r3, [r5, #12]
 801b4b0:	2b01      	cmp	r3, #1
 801b4b2:	d907      	bls.n	801b4c4 <_fwalk_reent+0x38>
 801b4b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b4b8:	3301      	adds	r3, #1
 801b4ba:	d003      	beq.n	801b4c4 <_fwalk_reent+0x38>
 801b4bc:	4629      	mov	r1, r5
 801b4be:	4640      	mov	r0, r8
 801b4c0:	47c8      	blx	r9
 801b4c2:	4306      	orrs	r6, r0
 801b4c4:	3568      	adds	r5, #104	; 0x68
 801b4c6:	e7ee      	b.n	801b4a6 <_fwalk_reent+0x1a>

0801b4c8 <__libc_init_array>:
 801b4c8:	b570      	push	{r4, r5, r6, lr}
 801b4ca:	4e0d      	ldr	r6, [pc, #52]	; (801b500 <__libc_init_array+0x38>)
 801b4cc:	4c0d      	ldr	r4, [pc, #52]	; (801b504 <__libc_init_array+0x3c>)
 801b4ce:	1ba4      	subs	r4, r4, r6
 801b4d0:	10a4      	asrs	r4, r4, #2
 801b4d2:	2500      	movs	r5, #0
 801b4d4:	42a5      	cmp	r5, r4
 801b4d6:	d109      	bne.n	801b4ec <__libc_init_array+0x24>
 801b4d8:	4e0b      	ldr	r6, [pc, #44]	; (801b508 <__libc_init_array+0x40>)
 801b4da:	4c0c      	ldr	r4, [pc, #48]	; (801b50c <__libc_init_array+0x44>)
 801b4dc:	f002 fcd2 	bl	801de84 <_init>
 801b4e0:	1ba4      	subs	r4, r4, r6
 801b4e2:	10a4      	asrs	r4, r4, #2
 801b4e4:	2500      	movs	r5, #0
 801b4e6:	42a5      	cmp	r5, r4
 801b4e8:	d105      	bne.n	801b4f6 <__libc_init_array+0x2e>
 801b4ea:	bd70      	pop	{r4, r5, r6, pc}
 801b4ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801b4f0:	4798      	blx	r3
 801b4f2:	3501      	adds	r5, #1
 801b4f4:	e7ee      	b.n	801b4d4 <__libc_init_array+0xc>
 801b4f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801b4fa:	4798      	blx	r3
 801b4fc:	3501      	adds	r5, #1
 801b4fe:	e7f2      	b.n	801b4e6 <__libc_init_array+0x1e>
 801b500:	0801efb0 	.word	0x0801efb0
 801b504:	0801efb0 	.word	0x0801efb0
 801b508:	0801efb0 	.word	0x0801efb0
 801b50c:	0801efb4 	.word	0x0801efb4

0801b510 <malloc>:
 801b510:	4b02      	ldr	r3, [pc, #8]	; (801b51c <malloc+0xc>)
 801b512:	4601      	mov	r1, r0
 801b514:	6818      	ldr	r0, [r3, #0]
 801b516:	f000 b865 	b.w	801b5e4 <_malloc_r>
 801b51a:	bf00      	nop
 801b51c:	20001480 	.word	0x20001480

0801b520 <memcpy>:
 801b520:	b510      	push	{r4, lr}
 801b522:	1e43      	subs	r3, r0, #1
 801b524:	440a      	add	r2, r1
 801b526:	4291      	cmp	r1, r2
 801b528:	d100      	bne.n	801b52c <memcpy+0xc>
 801b52a:	bd10      	pop	{r4, pc}
 801b52c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b530:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b534:	e7f7      	b.n	801b526 <memcpy+0x6>

0801b536 <memset>:
 801b536:	4402      	add	r2, r0
 801b538:	4603      	mov	r3, r0
 801b53a:	4293      	cmp	r3, r2
 801b53c:	d100      	bne.n	801b540 <memset+0xa>
 801b53e:	4770      	bx	lr
 801b540:	f803 1b01 	strb.w	r1, [r3], #1
 801b544:	e7f9      	b.n	801b53a <memset+0x4>
	...

0801b548 <_free_r>:
 801b548:	b538      	push	{r3, r4, r5, lr}
 801b54a:	4605      	mov	r5, r0
 801b54c:	2900      	cmp	r1, #0
 801b54e:	d045      	beq.n	801b5dc <_free_r+0x94>
 801b550:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b554:	1f0c      	subs	r4, r1, #4
 801b556:	2b00      	cmp	r3, #0
 801b558:	bfb8      	it	lt
 801b55a:	18e4      	addlt	r4, r4, r3
 801b55c:	f001 fe86 	bl	801d26c <__malloc_lock>
 801b560:	4a1f      	ldr	r2, [pc, #124]	; (801b5e0 <_free_r+0x98>)
 801b562:	6813      	ldr	r3, [r2, #0]
 801b564:	4610      	mov	r0, r2
 801b566:	b933      	cbnz	r3, 801b576 <_free_r+0x2e>
 801b568:	6063      	str	r3, [r4, #4]
 801b56a:	6014      	str	r4, [r2, #0]
 801b56c:	4628      	mov	r0, r5
 801b56e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b572:	f001 be7c 	b.w	801d26e <__malloc_unlock>
 801b576:	42a3      	cmp	r3, r4
 801b578:	d90c      	bls.n	801b594 <_free_r+0x4c>
 801b57a:	6821      	ldr	r1, [r4, #0]
 801b57c:	1862      	adds	r2, r4, r1
 801b57e:	4293      	cmp	r3, r2
 801b580:	bf04      	itt	eq
 801b582:	681a      	ldreq	r2, [r3, #0]
 801b584:	685b      	ldreq	r3, [r3, #4]
 801b586:	6063      	str	r3, [r4, #4]
 801b588:	bf04      	itt	eq
 801b58a:	1852      	addeq	r2, r2, r1
 801b58c:	6022      	streq	r2, [r4, #0]
 801b58e:	6004      	str	r4, [r0, #0]
 801b590:	e7ec      	b.n	801b56c <_free_r+0x24>
 801b592:	4613      	mov	r3, r2
 801b594:	685a      	ldr	r2, [r3, #4]
 801b596:	b10a      	cbz	r2, 801b59c <_free_r+0x54>
 801b598:	42a2      	cmp	r2, r4
 801b59a:	d9fa      	bls.n	801b592 <_free_r+0x4a>
 801b59c:	6819      	ldr	r1, [r3, #0]
 801b59e:	1858      	adds	r0, r3, r1
 801b5a0:	42a0      	cmp	r0, r4
 801b5a2:	d10b      	bne.n	801b5bc <_free_r+0x74>
 801b5a4:	6820      	ldr	r0, [r4, #0]
 801b5a6:	4401      	add	r1, r0
 801b5a8:	1858      	adds	r0, r3, r1
 801b5aa:	4282      	cmp	r2, r0
 801b5ac:	6019      	str	r1, [r3, #0]
 801b5ae:	d1dd      	bne.n	801b56c <_free_r+0x24>
 801b5b0:	6810      	ldr	r0, [r2, #0]
 801b5b2:	6852      	ldr	r2, [r2, #4]
 801b5b4:	605a      	str	r2, [r3, #4]
 801b5b6:	4401      	add	r1, r0
 801b5b8:	6019      	str	r1, [r3, #0]
 801b5ba:	e7d7      	b.n	801b56c <_free_r+0x24>
 801b5bc:	d902      	bls.n	801b5c4 <_free_r+0x7c>
 801b5be:	230c      	movs	r3, #12
 801b5c0:	602b      	str	r3, [r5, #0]
 801b5c2:	e7d3      	b.n	801b56c <_free_r+0x24>
 801b5c4:	6820      	ldr	r0, [r4, #0]
 801b5c6:	1821      	adds	r1, r4, r0
 801b5c8:	428a      	cmp	r2, r1
 801b5ca:	bf04      	itt	eq
 801b5cc:	6811      	ldreq	r1, [r2, #0]
 801b5ce:	6852      	ldreq	r2, [r2, #4]
 801b5d0:	6062      	str	r2, [r4, #4]
 801b5d2:	bf04      	itt	eq
 801b5d4:	1809      	addeq	r1, r1, r0
 801b5d6:	6021      	streq	r1, [r4, #0]
 801b5d8:	605c      	str	r4, [r3, #4]
 801b5da:	e7c7      	b.n	801b56c <_free_r+0x24>
 801b5dc:	bd38      	pop	{r3, r4, r5, pc}
 801b5de:	bf00      	nop
 801b5e0:	200027d4 	.word	0x200027d4

0801b5e4 <_malloc_r>:
 801b5e4:	b570      	push	{r4, r5, r6, lr}
 801b5e6:	1ccd      	adds	r5, r1, #3
 801b5e8:	f025 0503 	bic.w	r5, r5, #3
 801b5ec:	3508      	adds	r5, #8
 801b5ee:	2d0c      	cmp	r5, #12
 801b5f0:	bf38      	it	cc
 801b5f2:	250c      	movcc	r5, #12
 801b5f4:	2d00      	cmp	r5, #0
 801b5f6:	4606      	mov	r6, r0
 801b5f8:	db01      	blt.n	801b5fe <_malloc_r+0x1a>
 801b5fa:	42a9      	cmp	r1, r5
 801b5fc:	d903      	bls.n	801b606 <_malloc_r+0x22>
 801b5fe:	230c      	movs	r3, #12
 801b600:	6033      	str	r3, [r6, #0]
 801b602:	2000      	movs	r0, #0
 801b604:	bd70      	pop	{r4, r5, r6, pc}
 801b606:	f001 fe31 	bl	801d26c <__malloc_lock>
 801b60a:	4a23      	ldr	r2, [pc, #140]	; (801b698 <_malloc_r+0xb4>)
 801b60c:	6814      	ldr	r4, [r2, #0]
 801b60e:	4621      	mov	r1, r4
 801b610:	b991      	cbnz	r1, 801b638 <_malloc_r+0x54>
 801b612:	4c22      	ldr	r4, [pc, #136]	; (801b69c <_malloc_r+0xb8>)
 801b614:	6823      	ldr	r3, [r4, #0]
 801b616:	b91b      	cbnz	r3, 801b620 <_malloc_r+0x3c>
 801b618:	4630      	mov	r0, r6
 801b61a:	f000 fd29 	bl	801c070 <_sbrk_r>
 801b61e:	6020      	str	r0, [r4, #0]
 801b620:	4629      	mov	r1, r5
 801b622:	4630      	mov	r0, r6
 801b624:	f000 fd24 	bl	801c070 <_sbrk_r>
 801b628:	1c43      	adds	r3, r0, #1
 801b62a:	d126      	bne.n	801b67a <_malloc_r+0x96>
 801b62c:	230c      	movs	r3, #12
 801b62e:	6033      	str	r3, [r6, #0]
 801b630:	4630      	mov	r0, r6
 801b632:	f001 fe1c 	bl	801d26e <__malloc_unlock>
 801b636:	e7e4      	b.n	801b602 <_malloc_r+0x1e>
 801b638:	680b      	ldr	r3, [r1, #0]
 801b63a:	1b5b      	subs	r3, r3, r5
 801b63c:	d41a      	bmi.n	801b674 <_malloc_r+0x90>
 801b63e:	2b0b      	cmp	r3, #11
 801b640:	d90f      	bls.n	801b662 <_malloc_r+0x7e>
 801b642:	600b      	str	r3, [r1, #0]
 801b644:	50cd      	str	r5, [r1, r3]
 801b646:	18cc      	adds	r4, r1, r3
 801b648:	4630      	mov	r0, r6
 801b64a:	f001 fe10 	bl	801d26e <__malloc_unlock>
 801b64e:	f104 000b 	add.w	r0, r4, #11
 801b652:	1d23      	adds	r3, r4, #4
 801b654:	f020 0007 	bic.w	r0, r0, #7
 801b658:	1ac3      	subs	r3, r0, r3
 801b65a:	d01b      	beq.n	801b694 <_malloc_r+0xb0>
 801b65c:	425a      	negs	r2, r3
 801b65e:	50e2      	str	r2, [r4, r3]
 801b660:	bd70      	pop	{r4, r5, r6, pc}
 801b662:	428c      	cmp	r4, r1
 801b664:	bf0d      	iteet	eq
 801b666:	6863      	ldreq	r3, [r4, #4]
 801b668:	684b      	ldrne	r3, [r1, #4]
 801b66a:	6063      	strne	r3, [r4, #4]
 801b66c:	6013      	streq	r3, [r2, #0]
 801b66e:	bf18      	it	ne
 801b670:	460c      	movne	r4, r1
 801b672:	e7e9      	b.n	801b648 <_malloc_r+0x64>
 801b674:	460c      	mov	r4, r1
 801b676:	6849      	ldr	r1, [r1, #4]
 801b678:	e7ca      	b.n	801b610 <_malloc_r+0x2c>
 801b67a:	1cc4      	adds	r4, r0, #3
 801b67c:	f024 0403 	bic.w	r4, r4, #3
 801b680:	42a0      	cmp	r0, r4
 801b682:	d005      	beq.n	801b690 <_malloc_r+0xac>
 801b684:	1a21      	subs	r1, r4, r0
 801b686:	4630      	mov	r0, r6
 801b688:	f000 fcf2 	bl	801c070 <_sbrk_r>
 801b68c:	3001      	adds	r0, #1
 801b68e:	d0cd      	beq.n	801b62c <_malloc_r+0x48>
 801b690:	6025      	str	r5, [r4, #0]
 801b692:	e7d9      	b.n	801b648 <_malloc_r+0x64>
 801b694:	bd70      	pop	{r4, r5, r6, pc}
 801b696:	bf00      	nop
 801b698:	200027d4 	.word	0x200027d4
 801b69c:	200027d8 	.word	0x200027d8

0801b6a0 <__cvt>:
 801b6a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b6a4:	ec55 4b10 	vmov	r4, r5, d0
 801b6a8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801b6aa:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801b6ae:	2d00      	cmp	r5, #0
 801b6b0:	460e      	mov	r6, r1
 801b6b2:	4691      	mov	r9, r2
 801b6b4:	4619      	mov	r1, r3
 801b6b6:	bfb8      	it	lt
 801b6b8:	4622      	movlt	r2, r4
 801b6ba:	462b      	mov	r3, r5
 801b6bc:	f027 0720 	bic.w	r7, r7, #32
 801b6c0:	bfbb      	ittet	lt
 801b6c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801b6c6:	461d      	movlt	r5, r3
 801b6c8:	2300      	movge	r3, #0
 801b6ca:	232d      	movlt	r3, #45	; 0x2d
 801b6cc:	bfb8      	it	lt
 801b6ce:	4614      	movlt	r4, r2
 801b6d0:	2f46      	cmp	r7, #70	; 0x46
 801b6d2:	700b      	strb	r3, [r1, #0]
 801b6d4:	d004      	beq.n	801b6e0 <__cvt+0x40>
 801b6d6:	2f45      	cmp	r7, #69	; 0x45
 801b6d8:	d100      	bne.n	801b6dc <__cvt+0x3c>
 801b6da:	3601      	adds	r6, #1
 801b6dc:	2102      	movs	r1, #2
 801b6de:	e000      	b.n	801b6e2 <__cvt+0x42>
 801b6e0:	2103      	movs	r1, #3
 801b6e2:	ab03      	add	r3, sp, #12
 801b6e4:	9301      	str	r3, [sp, #4]
 801b6e6:	ab02      	add	r3, sp, #8
 801b6e8:	9300      	str	r3, [sp, #0]
 801b6ea:	4632      	mov	r2, r6
 801b6ec:	4653      	mov	r3, sl
 801b6ee:	ec45 4b10 	vmov	d0, r4, r5
 801b6f2:	f000 ff69 	bl	801c5c8 <_dtoa_r>
 801b6f6:	2f47      	cmp	r7, #71	; 0x47
 801b6f8:	4680      	mov	r8, r0
 801b6fa:	d102      	bne.n	801b702 <__cvt+0x62>
 801b6fc:	f019 0f01 	tst.w	r9, #1
 801b700:	d026      	beq.n	801b750 <__cvt+0xb0>
 801b702:	2f46      	cmp	r7, #70	; 0x46
 801b704:	eb08 0906 	add.w	r9, r8, r6
 801b708:	d111      	bne.n	801b72e <__cvt+0x8e>
 801b70a:	f898 3000 	ldrb.w	r3, [r8]
 801b70e:	2b30      	cmp	r3, #48	; 0x30
 801b710:	d10a      	bne.n	801b728 <__cvt+0x88>
 801b712:	2200      	movs	r2, #0
 801b714:	2300      	movs	r3, #0
 801b716:	4620      	mov	r0, r4
 801b718:	4629      	mov	r1, r5
 801b71a:	f7e5 f9d9 	bl	8000ad0 <__aeabi_dcmpeq>
 801b71e:	b918      	cbnz	r0, 801b728 <__cvt+0x88>
 801b720:	f1c6 0601 	rsb	r6, r6, #1
 801b724:	f8ca 6000 	str.w	r6, [sl]
 801b728:	f8da 3000 	ldr.w	r3, [sl]
 801b72c:	4499      	add	r9, r3
 801b72e:	2200      	movs	r2, #0
 801b730:	2300      	movs	r3, #0
 801b732:	4620      	mov	r0, r4
 801b734:	4629      	mov	r1, r5
 801b736:	f7e5 f9cb 	bl	8000ad0 <__aeabi_dcmpeq>
 801b73a:	b938      	cbnz	r0, 801b74c <__cvt+0xac>
 801b73c:	2230      	movs	r2, #48	; 0x30
 801b73e:	9b03      	ldr	r3, [sp, #12]
 801b740:	4599      	cmp	r9, r3
 801b742:	d905      	bls.n	801b750 <__cvt+0xb0>
 801b744:	1c59      	adds	r1, r3, #1
 801b746:	9103      	str	r1, [sp, #12]
 801b748:	701a      	strb	r2, [r3, #0]
 801b74a:	e7f8      	b.n	801b73e <__cvt+0x9e>
 801b74c:	f8cd 900c 	str.w	r9, [sp, #12]
 801b750:	9b03      	ldr	r3, [sp, #12]
 801b752:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b754:	eba3 0308 	sub.w	r3, r3, r8
 801b758:	4640      	mov	r0, r8
 801b75a:	6013      	str	r3, [r2, #0]
 801b75c:	b004      	add	sp, #16
 801b75e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801b762 <__exponent>:
 801b762:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b764:	4603      	mov	r3, r0
 801b766:	2900      	cmp	r1, #0
 801b768:	bfb8      	it	lt
 801b76a:	4249      	neglt	r1, r1
 801b76c:	f803 2b02 	strb.w	r2, [r3], #2
 801b770:	bfb4      	ite	lt
 801b772:	222d      	movlt	r2, #45	; 0x2d
 801b774:	222b      	movge	r2, #43	; 0x2b
 801b776:	2909      	cmp	r1, #9
 801b778:	7042      	strb	r2, [r0, #1]
 801b77a:	dd20      	ble.n	801b7be <__exponent+0x5c>
 801b77c:	f10d 0207 	add.w	r2, sp, #7
 801b780:	4617      	mov	r7, r2
 801b782:	260a      	movs	r6, #10
 801b784:	fb91 f5f6 	sdiv	r5, r1, r6
 801b788:	fb06 1115 	mls	r1, r6, r5, r1
 801b78c:	3130      	adds	r1, #48	; 0x30
 801b78e:	2d09      	cmp	r5, #9
 801b790:	f802 1c01 	strb.w	r1, [r2, #-1]
 801b794:	f102 34ff 	add.w	r4, r2, #4294967295
 801b798:	4629      	mov	r1, r5
 801b79a:	dc09      	bgt.n	801b7b0 <__exponent+0x4e>
 801b79c:	3130      	adds	r1, #48	; 0x30
 801b79e:	3a02      	subs	r2, #2
 801b7a0:	f804 1c01 	strb.w	r1, [r4, #-1]
 801b7a4:	42ba      	cmp	r2, r7
 801b7a6:	461c      	mov	r4, r3
 801b7a8:	d304      	bcc.n	801b7b4 <__exponent+0x52>
 801b7aa:	1a20      	subs	r0, r4, r0
 801b7ac:	b003      	add	sp, #12
 801b7ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b7b0:	4622      	mov	r2, r4
 801b7b2:	e7e7      	b.n	801b784 <__exponent+0x22>
 801b7b4:	f812 1b01 	ldrb.w	r1, [r2], #1
 801b7b8:	f803 1b01 	strb.w	r1, [r3], #1
 801b7bc:	e7f2      	b.n	801b7a4 <__exponent+0x42>
 801b7be:	2230      	movs	r2, #48	; 0x30
 801b7c0:	461c      	mov	r4, r3
 801b7c2:	4411      	add	r1, r2
 801b7c4:	f804 2b02 	strb.w	r2, [r4], #2
 801b7c8:	7059      	strb	r1, [r3, #1]
 801b7ca:	e7ee      	b.n	801b7aa <__exponent+0x48>

0801b7cc <_printf_float>:
 801b7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7d0:	b08d      	sub	sp, #52	; 0x34
 801b7d2:	460c      	mov	r4, r1
 801b7d4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801b7d8:	4616      	mov	r6, r2
 801b7da:	461f      	mov	r7, r3
 801b7dc:	4605      	mov	r5, r0
 801b7de:	f001 fcc1 	bl	801d164 <_localeconv_r>
 801b7e2:	6803      	ldr	r3, [r0, #0]
 801b7e4:	9304      	str	r3, [sp, #16]
 801b7e6:	4618      	mov	r0, r3
 801b7e8:	f7e4 fcfa 	bl	80001e0 <strlen>
 801b7ec:	2300      	movs	r3, #0
 801b7ee:	930a      	str	r3, [sp, #40]	; 0x28
 801b7f0:	f8d8 3000 	ldr.w	r3, [r8]
 801b7f4:	9005      	str	r0, [sp, #20]
 801b7f6:	3307      	adds	r3, #7
 801b7f8:	f023 0307 	bic.w	r3, r3, #7
 801b7fc:	f103 0208 	add.w	r2, r3, #8
 801b800:	f894 a018 	ldrb.w	sl, [r4, #24]
 801b804:	f8d4 b000 	ldr.w	fp, [r4]
 801b808:	f8c8 2000 	str.w	r2, [r8]
 801b80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b810:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801b814:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801b818:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801b81c:	9307      	str	r3, [sp, #28]
 801b81e:	f8cd 8018 	str.w	r8, [sp, #24]
 801b822:	f04f 32ff 	mov.w	r2, #4294967295
 801b826:	4ba5      	ldr	r3, [pc, #660]	; (801babc <_printf_float+0x2f0>)
 801b828:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b82c:	f7e5 f982 	bl	8000b34 <__aeabi_dcmpun>
 801b830:	2800      	cmp	r0, #0
 801b832:	f040 81fb 	bne.w	801bc2c <_printf_float+0x460>
 801b836:	f04f 32ff 	mov.w	r2, #4294967295
 801b83a:	4ba0      	ldr	r3, [pc, #640]	; (801babc <_printf_float+0x2f0>)
 801b83c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b840:	f7e5 f95a 	bl	8000af8 <__aeabi_dcmple>
 801b844:	2800      	cmp	r0, #0
 801b846:	f040 81f1 	bne.w	801bc2c <_printf_float+0x460>
 801b84a:	2200      	movs	r2, #0
 801b84c:	2300      	movs	r3, #0
 801b84e:	4640      	mov	r0, r8
 801b850:	4649      	mov	r1, r9
 801b852:	f7e5 f947 	bl	8000ae4 <__aeabi_dcmplt>
 801b856:	b110      	cbz	r0, 801b85e <_printf_float+0x92>
 801b858:	232d      	movs	r3, #45	; 0x2d
 801b85a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b85e:	4b98      	ldr	r3, [pc, #608]	; (801bac0 <_printf_float+0x2f4>)
 801b860:	4a98      	ldr	r2, [pc, #608]	; (801bac4 <_printf_float+0x2f8>)
 801b862:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801b866:	bf8c      	ite	hi
 801b868:	4690      	movhi	r8, r2
 801b86a:	4698      	movls	r8, r3
 801b86c:	2303      	movs	r3, #3
 801b86e:	f02b 0204 	bic.w	r2, fp, #4
 801b872:	6123      	str	r3, [r4, #16]
 801b874:	6022      	str	r2, [r4, #0]
 801b876:	f04f 0900 	mov.w	r9, #0
 801b87a:	9700      	str	r7, [sp, #0]
 801b87c:	4633      	mov	r3, r6
 801b87e:	aa0b      	add	r2, sp, #44	; 0x2c
 801b880:	4621      	mov	r1, r4
 801b882:	4628      	mov	r0, r5
 801b884:	f000 f9e2 	bl	801bc4c <_printf_common>
 801b888:	3001      	adds	r0, #1
 801b88a:	f040 8093 	bne.w	801b9b4 <_printf_float+0x1e8>
 801b88e:	f04f 30ff 	mov.w	r0, #4294967295
 801b892:	b00d      	add	sp, #52	; 0x34
 801b894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b898:	6861      	ldr	r1, [r4, #4]
 801b89a:	1c4b      	adds	r3, r1, #1
 801b89c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 801b8a0:	d13f      	bne.n	801b922 <_printf_float+0x156>
 801b8a2:	2306      	movs	r3, #6
 801b8a4:	6063      	str	r3, [r4, #4]
 801b8a6:	2300      	movs	r3, #0
 801b8a8:	9303      	str	r3, [sp, #12]
 801b8aa:	ab0a      	add	r3, sp, #40	; 0x28
 801b8ac:	9302      	str	r3, [sp, #8]
 801b8ae:	ab09      	add	r3, sp, #36	; 0x24
 801b8b0:	9300      	str	r3, [sp, #0]
 801b8b2:	ec49 8b10 	vmov	d0, r8, r9
 801b8b6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801b8ba:	6022      	str	r2, [r4, #0]
 801b8bc:	f8cd a004 	str.w	sl, [sp, #4]
 801b8c0:	6861      	ldr	r1, [r4, #4]
 801b8c2:	4628      	mov	r0, r5
 801b8c4:	f7ff feec 	bl	801b6a0 <__cvt>
 801b8c8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 801b8cc:	2b47      	cmp	r3, #71	; 0x47
 801b8ce:	4680      	mov	r8, r0
 801b8d0:	d109      	bne.n	801b8e6 <_printf_float+0x11a>
 801b8d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b8d4:	1cd8      	adds	r0, r3, #3
 801b8d6:	db02      	blt.n	801b8de <_printf_float+0x112>
 801b8d8:	6862      	ldr	r2, [r4, #4]
 801b8da:	4293      	cmp	r3, r2
 801b8dc:	dd57      	ble.n	801b98e <_printf_float+0x1c2>
 801b8de:	f1aa 0a02 	sub.w	sl, sl, #2
 801b8e2:	fa5f fa8a 	uxtb.w	sl, sl
 801b8e6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801b8ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b8ec:	d834      	bhi.n	801b958 <_printf_float+0x18c>
 801b8ee:	3901      	subs	r1, #1
 801b8f0:	4652      	mov	r2, sl
 801b8f2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801b8f6:	9109      	str	r1, [sp, #36]	; 0x24
 801b8f8:	f7ff ff33 	bl	801b762 <__exponent>
 801b8fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b8fe:	1883      	adds	r3, r0, r2
 801b900:	2a01      	cmp	r2, #1
 801b902:	4681      	mov	r9, r0
 801b904:	6123      	str	r3, [r4, #16]
 801b906:	dc02      	bgt.n	801b90e <_printf_float+0x142>
 801b908:	6822      	ldr	r2, [r4, #0]
 801b90a:	07d1      	lsls	r1, r2, #31
 801b90c:	d501      	bpl.n	801b912 <_printf_float+0x146>
 801b90e:	3301      	adds	r3, #1
 801b910:	6123      	str	r3, [r4, #16]
 801b912:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801b916:	2b00      	cmp	r3, #0
 801b918:	d0af      	beq.n	801b87a <_printf_float+0xae>
 801b91a:	232d      	movs	r3, #45	; 0x2d
 801b91c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b920:	e7ab      	b.n	801b87a <_printf_float+0xae>
 801b922:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 801b926:	d002      	beq.n	801b92e <_printf_float+0x162>
 801b928:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801b92c:	d1bb      	bne.n	801b8a6 <_printf_float+0xda>
 801b92e:	b189      	cbz	r1, 801b954 <_printf_float+0x188>
 801b930:	2300      	movs	r3, #0
 801b932:	9303      	str	r3, [sp, #12]
 801b934:	ab0a      	add	r3, sp, #40	; 0x28
 801b936:	9302      	str	r3, [sp, #8]
 801b938:	ab09      	add	r3, sp, #36	; 0x24
 801b93a:	9300      	str	r3, [sp, #0]
 801b93c:	ec49 8b10 	vmov	d0, r8, r9
 801b940:	6022      	str	r2, [r4, #0]
 801b942:	f8cd a004 	str.w	sl, [sp, #4]
 801b946:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801b94a:	4628      	mov	r0, r5
 801b94c:	f7ff fea8 	bl	801b6a0 <__cvt>
 801b950:	4680      	mov	r8, r0
 801b952:	e7be      	b.n	801b8d2 <_printf_float+0x106>
 801b954:	2301      	movs	r3, #1
 801b956:	e7a5      	b.n	801b8a4 <_printf_float+0xd8>
 801b958:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 801b95c:	d119      	bne.n	801b992 <_printf_float+0x1c6>
 801b95e:	2900      	cmp	r1, #0
 801b960:	6863      	ldr	r3, [r4, #4]
 801b962:	dd0c      	ble.n	801b97e <_printf_float+0x1b2>
 801b964:	6121      	str	r1, [r4, #16]
 801b966:	b913      	cbnz	r3, 801b96e <_printf_float+0x1a2>
 801b968:	6822      	ldr	r2, [r4, #0]
 801b96a:	07d2      	lsls	r2, r2, #31
 801b96c:	d502      	bpl.n	801b974 <_printf_float+0x1a8>
 801b96e:	3301      	adds	r3, #1
 801b970:	440b      	add	r3, r1
 801b972:	6123      	str	r3, [r4, #16]
 801b974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b976:	65a3      	str	r3, [r4, #88]	; 0x58
 801b978:	f04f 0900 	mov.w	r9, #0
 801b97c:	e7c9      	b.n	801b912 <_printf_float+0x146>
 801b97e:	b913      	cbnz	r3, 801b986 <_printf_float+0x1ba>
 801b980:	6822      	ldr	r2, [r4, #0]
 801b982:	07d0      	lsls	r0, r2, #31
 801b984:	d501      	bpl.n	801b98a <_printf_float+0x1be>
 801b986:	3302      	adds	r3, #2
 801b988:	e7f3      	b.n	801b972 <_printf_float+0x1a6>
 801b98a:	2301      	movs	r3, #1
 801b98c:	e7f1      	b.n	801b972 <_printf_float+0x1a6>
 801b98e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801b992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b994:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b996:	4293      	cmp	r3, r2
 801b998:	db05      	blt.n	801b9a6 <_printf_float+0x1da>
 801b99a:	6822      	ldr	r2, [r4, #0]
 801b99c:	6123      	str	r3, [r4, #16]
 801b99e:	07d1      	lsls	r1, r2, #31
 801b9a0:	d5e8      	bpl.n	801b974 <_printf_float+0x1a8>
 801b9a2:	3301      	adds	r3, #1
 801b9a4:	e7e5      	b.n	801b972 <_printf_float+0x1a6>
 801b9a6:	2b00      	cmp	r3, #0
 801b9a8:	bfd4      	ite	le
 801b9aa:	f1c3 0302 	rsble	r3, r3, #2
 801b9ae:	2301      	movgt	r3, #1
 801b9b0:	4413      	add	r3, r2
 801b9b2:	e7de      	b.n	801b972 <_printf_float+0x1a6>
 801b9b4:	6823      	ldr	r3, [r4, #0]
 801b9b6:	055a      	lsls	r2, r3, #21
 801b9b8:	d407      	bmi.n	801b9ca <_printf_float+0x1fe>
 801b9ba:	6923      	ldr	r3, [r4, #16]
 801b9bc:	4642      	mov	r2, r8
 801b9be:	4631      	mov	r1, r6
 801b9c0:	4628      	mov	r0, r5
 801b9c2:	47b8      	blx	r7
 801b9c4:	3001      	adds	r0, #1
 801b9c6:	d12b      	bne.n	801ba20 <_printf_float+0x254>
 801b9c8:	e761      	b.n	801b88e <_printf_float+0xc2>
 801b9ca:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801b9ce:	f240 80e2 	bls.w	801bb96 <_printf_float+0x3ca>
 801b9d2:	2200      	movs	r2, #0
 801b9d4:	2300      	movs	r3, #0
 801b9d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801b9da:	f7e5 f879 	bl	8000ad0 <__aeabi_dcmpeq>
 801b9de:	2800      	cmp	r0, #0
 801b9e0:	d03c      	beq.n	801ba5c <_printf_float+0x290>
 801b9e2:	2301      	movs	r3, #1
 801b9e4:	4a38      	ldr	r2, [pc, #224]	; (801bac8 <_printf_float+0x2fc>)
 801b9e6:	4631      	mov	r1, r6
 801b9e8:	4628      	mov	r0, r5
 801b9ea:	47b8      	blx	r7
 801b9ec:	3001      	adds	r0, #1
 801b9ee:	f43f af4e 	beq.w	801b88e <_printf_float+0xc2>
 801b9f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b9f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b9f6:	429a      	cmp	r2, r3
 801b9f8:	db02      	blt.n	801ba00 <_printf_float+0x234>
 801b9fa:	6823      	ldr	r3, [r4, #0]
 801b9fc:	07d8      	lsls	r0, r3, #31
 801b9fe:	d50f      	bpl.n	801ba20 <_printf_float+0x254>
 801ba00:	9b05      	ldr	r3, [sp, #20]
 801ba02:	9a04      	ldr	r2, [sp, #16]
 801ba04:	4631      	mov	r1, r6
 801ba06:	4628      	mov	r0, r5
 801ba08:	47b8      	blx	r7
 801ba0a:	3001      	adds	r0, #1
 801ba0c:	f43f af3f 	beq.w	801b88e <_printf_float+0xc2>
 801ba10:	f04f 0800 	mov.w	r8, #0
 801ba14:	f104 091a 	add.w	r9, r4, #26
 801ba18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ba1a:	3b01      	subs	r3, #1
 801ba1c:	4598      	cmp	r8, r3
 801ba1e:	db12      	blt.n	801ba46 <_printf_float+0x27a>
 801ba20:	6823      	ldr	r3, [r4, #0]
 801ba22:	079b      	lsls	r3, r3, #30
 801ba24:	d509      	bpl.n	801ba3a <_printf_float+0x26e>
 801ba26:	f04f 0800 	mov.w	r8, #0
 801ba2a:	f104 0919 	add.w	r9, r4, #25
 801ba2e:	68e3      	ldr	r3, [r4, #12]
 801ba30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ba32:	1a9b      	subs	r3, r3, r2
 801ba34:	4598      	cmp	r8, r3
 801ba36:	f2c0 80ee 	blt.w	801bc16 <_printf_float+0x44a>
 801ba3a:	68e0      	ldr	r0, [r4, #12]
 801ba3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ba3e:	4298      	cmp	r0, r3
 801ba40:	bfb8      	it	lt
 801ba42:	4618      	movlt	r0, r3
 801ba44:	e725      	b.n	801b892 <_printf_float+0xc6>
 801ba46:	2301      	movs	r3, #1
 801ba48:	464a      	mov	r2, r9
 801ba4a:	4631      	mov	r1, r6
 801ba4c:	4628      	mov	r0, r5
 801ba4e:	47b8      	blx	r7
 801ba50:	3001      	adds	r0, #1
 801ba52:	f43f af1c 	beq.w	801b88e <_printf_float+0xc2>
 801ba56:	f108 0801 	add.w	r8, r8, #1
 801ba5a:	e7dd      	b.n	801ba18 <_printf_float+0x24c>
 801ba5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ba5e:	2b00      	cmp	r3, #0
 801ba60:	dc34      	bgt.n	801bacc <_printf_float+0x300>
 801ba62:	2301      	movs	r3, #1
 801ba64:	4a18      	ldr	r2, [pc, #96]	; (801bac8 <_printf_float+0x2fc>)
 801ba66:	4631      	mov	r1, r6
 801ba68:	4628      	mov	r0, r5
 801ba6a:	47b8      	blx	r7
 801ba6c:	3001      	adds	r0, #1
 801ba6e:	f43f af0e 	beq.w	801b88e <_printf_float+0xc2>
 801ba72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ba74:	b923      	cbnz	r3, 801ba80 <_printf_float+0x2b4>
 801ba76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ba78:	b913      	cbnz	r3, 801ba80 <_printf_float+0x2b4>
 801ba7a:	6823      	ldr	r3, [r4, #0]
 801ba7c:	07d9      	lsls	r1, r3, #31
 801ba7e:	d5cf      	bpl.n	801ba20 <_printf_float+0x254>
 801ba80:	9b05      	ldr	r3, [sp, #20]
 801ba82:	9a04      	ldr	r2, [sp, #16]
 801ba84:	4631      	mov	r1, r6
 801ba86:	4628      	mov	r0, r5
 801ba88:	47b8      	blx	r7
 801ba8a:	3001      	adds	r0, #1
 801ba8c:	f43f aeff 	beq.w	801b88e <_printf_float+0xc2>
 801ba90:	f04f 0900 	mov.w	r9, #0
 801ba94:	f104 0a1a 	add.w	sl, r4, #26
 801ba98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ba9a:	425b      	negs	r3, r3
 801ba9c:	4599      	cmp	r9, r3
 801ba9e:	db01      	blt.n	801baa4 <_printf_float+0x2d8>
 801baa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801baa2:	e78b      	b.n	801b9bc <_printf_float+0x1f0>
 801baa4:	2301      	movs	r3, #1
 801baa6:	4652      	mov	r2, sl
 801baa8:	4631      	mov	r1, r6
 801baaa:	4628      	mov	r0, r5
 801baac:	47b8      	blx	r7
 801baae:	3001      	adds	r0, #1
 801bab0:	f43f aeed 	beq.w	801b88e <_printf_float+0xc2>
 801bab4:	f109 0901 	add.w	r9, r9, #1
 801bab8:	e7ee      	b.n	801ba98 <_printf_float+0x2cc>
 801baba:	bf00      	nop
 801babc:	7fefffff 	.word	0x7fefffff
 801bac0:	0801ed4c 	.word	0x0801ed4c
 801bac4:	0801ed50 	.word	0x0801ed50
 801bac8:	0801ed5c 	.word	0x0801ed5c
 801bacc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bace:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801bad0:	429a      	cmp	r2, r3
 801bad2:	bfa8      	it	ge
 801bad4:	461a      	movge	r2, r3
 801bad6:	2a00      	cmp	r2, #0
 801bad8:	4691      	mov	r9, r2
 801bada:	dc38      	bgt.n	801bb4e <_printf_float+0x382>
 801badc:	f104 031a 	add.w	r3, r4, #26
 801bae0:	f04f 0b00 	mov.w	fp, #0
 801bae4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801bae8:	9306      	str	r3, [sp, #24]
 801baea:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 801baee:	ebaa 0309 	sub.w	r3, sl, r9
 801baf2:	459b      	cmp	fp, r3
 801baf4:	db33      	blt.n	801bb5e <_printf_float+0x392>
 801baf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801baf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bafa:	429a      	cmp	r2, r3
 801bafc:	db3a      	blt.n	801bb74 <_printf_float+0x3a8>
 801bafe:	6823      	ldr	r3, [r4, #0]
 801bb00:	07da      	lsls	r2, r3, #31
 801bb02:	d437      	bmi.n	801bb74 <_printf_float+0x3a8>
 801bb04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bb06:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bb08:	eba3 020a 	sub.w	r2, r3, sl
 801bb0c:	eba3 0901 	sub.w	r9, r3, r1
 801bb10:	4591      	cmp	r9, r2
 801bb12:	bfa8      	it	ge
 801bb14:	4691      	movge	r9, r2
 801bb16:	f1b9 0f00 	cmp.w	r9, #0
 801bb1a:	dc33      	bgt.n	801bb84 <_printf_float+0x3b8>
 801bb1c:	f04f 0800 	mov.w	r8, #0
 801bb20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801bb24:	f104 0a1a 	add.w	sl, r4, #26
 801bb28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bb2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bb2c:	1a9b      	subs	r3, r3, r2
 801bb2e:	eba3 0309 	sub.w	r3, r3, r9
 801bb32:	4598      	cmp	r8, r3
 801bb34:	f6bf af74 	bge.w	801ba20 <_printf_float+0x254>
 801bb38:	2301      	movs	r3, #1
 801bb3a:	4652      	mov	r2, sl
 801bb3c:	4631      	mov	r1, r6
 801bb3e:	4628      	mov	r0, r5
 801bb40:	47b8      	blx	r7
 801bb42:	3001      	adds	r0, #1
 801bb44:	f43f aea3 	beq.w	801b88e <_printf_float+0xc2>
 801bb48:	f108 0801 	add.w	r8, r8, #1
 801bb4c:	e7ec      	b.n	801bb28 <_printf_float+0x35c>
 801bb4e:	4613      	mov	r3, r2
 801bb50:	4631      	mov	r1, r6
 801bb52:	4642      	mov	r2, r8
 801bb54:	4628      	mov	r0, r5
 801bb56:	47b8      	blx	r7
 801bb58:	3001      	adds	r0, #1
 801bb5a:	d1bf      	bne.n	801badc <_printf_float+0x310>
 801bb5c:	e697      	b.n	801b88e <_printf_float+0xc2>
 801bb5e:	2301      	movs	r3, #1
 801bb60:	9a06      	ldr	r2, [sp, #24]
 801bb62:	4631      	mov	r1, r6
 801bb64:	4628      	mov	r0, r5
 801bb66:	47b8      	blx	r7
 801bb68:	3001      	adds	r0, #1
 801bb6a:	f43f ae90 	beq.w	801b88e <_printf_float+0xc2>
 801bb6e:	f10b 0b01 	add.w	fp, fp, #1
 801bb72:	e7ba      	b.n	801baea <_printf_float+0x31e>
 801bb74:	9b05      	ldr	r3, [sp, #20]
 801bb76:	9a04      	ldr	r2, [sp, #16]
 801bb78:	4631      	mov	r1, r6
 801bb7a:	4628      	mov	r0, r5
 801bb7c:	47b8      	blx	r7
 801bb7e:	3001      	adds	r0, #1
 801bb80:	d1c0      	bne.n	801bb04 <_printf_float+0x338>
 801bb82:	e684      	b.n	801b88e <_printf_float+0xc2>
 801bb84:	464b      	mov	r3, r9
 801bb86:	eb08 020a 	add.w	r2, r8, sl
 801bb8a:	4631      	mov	r1, r6
 801bb8c:	4628      	mov	r0, r5
 801bb8e:	47b8      	blx	r7
 801bb90:	3001      	adds	r0, #1
 801bb92:	d1c3      	bne.n	801bb1c <_printf_float+0x350>
 801bb94:	e67b      	b.n	801b88e <_printf_float+0xc2>
 801bb96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bb98:	2a01      	cmp	r2, #1
 801bb9a:	dc01      	bgt.n	801bba0 <_printf_float+0x3d4>
 801bb9c:	07db      	lsls	r3, r3, #31
 801bb9e:	d537      	bpl.n	801bc10 <_printf_float+0x444>
 801bba0:	2301      	movs	r3, #1
 801bba2:	4642      	mov	r2, r8
 801bba4:	4631      	mov	r1, r6
 801bba6:	4628      	mov	r0, r5
 801bba8:	47b8      	blx	r7
 801bbaa:	3001      	adds	r0, #1
 801bbac:	f43f ae6f 	beq.w	801b88e <_printf_float+0xc2>
 801bbb0:	9b05      	ldr	r3, [sp, #20]
 801bbb2:	9a04      	ldr	r2, [sp, #16]
 801bbb4:	4631      	mov	r1, r6
 801bbb6:	4628      	mov	r0, r5
 801bbb8:	47b8      	blx	r7
 801bbba:	3001      	adds	r0, #1
 801bbbc:	f43f ae67 	beq.w	801b88e <_printf_float+0xc2>
 801bbc0:	2200      	movs	r2, #0
 801bbc2:	2300      	movs	r3, #0
 801bbc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801bbc8:	f7e4 ff82 	bl	8000ad0 <__aeabi_dcmpeq>
 801bbcc:	b158      	cbz	r0, 801bbe6 <_printf_float+0x41a>
 801bbce:	f04f 0800 	mov.w	r8, #0
 801bbd2:	f104 0a1a 	add.w	sl, r4, #26
 801bbd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bbd8:	3b01      	subs	r3, #1
 801bbda:	4598      	cmp	r8, r3
 801bbdc:	db0d      	blt.n	801bbfa <_printf_float+0x42e>
 801bbde:	464b      	mov	r3, r9
 801bbe0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801bbe4:	e6eb      	b.n	801b9be <_printf_float+0x1f2>
 801bbe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bbe8:	f108 0201 	add.w	r2, r8, #1
 801bbec:	3b01      	subs	r3, #1
 801bbee:	4631      	mov	r1, r6
 801bbf0:	4628      	mov	r0, r5
 801bbf2:	47b8      	blx	r7
 801bbf4:	3001      	adds	r0, #1
 801bbf6:	d1f2      	bne.n	801bbde <_printf_float+0x412>
 801bbf8:	e649      	b.n	801b88e <_printf_float+0xc2>
 801bbfa:	2301      	movs	r3, #1
 801bbfc:	4652      	mov	r2, sl
 801bbfe:	4631      	mov	r1, r6
 801bc00:	4628      	mov	r0, r5
 801bc02:	47b8      	blx	r7
 801bc04:	3001      	adds	r0, #1
 801bc06:	f43f ae42 	beq.w	801b88e <_printf_float+0xc2>
 801bc0a:	f108 0801 	add.w	r8, r8, #1
 801bc0e:	e7e2      	b.n	801bbd6 <_printf_float+0x40a>
 801bc10:	2301      	movs	r3, #1
 801bc12:	4642      	mov	r2, r8
 801bc14:	e7eb      	b.n	801bbee <_printf_float+0x422>
 801bc16:	2301      	movs	r3, #1
 801bc18:	464a      	mov	r2, r9
 801bc1a:	4631      	mov	r1, r6
 801bc1c:	4628      	mov	r0, r5
 801bc1e:	47b8      	blx	r7
 801bc20:	3001      	adds	r0, #1
 801bc22:	f43f ae34 	beq.w	801b88e <_printf_float+0xc2>
 801bc26:	f108 0801 	add.w	r8, r8, #1
 801bc2a:	e700      	b.n	801ba2e <_printf_float+0x262>
 801bc2c:	4642      	mov	r2, r8
 801bc2e:	464b      	mov	r3, r9
 801bc30:	4640      	mov	r0, r8
 801bc32:	4649      	mov	r1, r9
 801bc34:	f7e4 ff7e 	bl	8000b34 <__aeabi_dcmpun>
 801bc38:	2800      	cmp	r0, #0
 801bc3a:	f43f ae2d 	beq.w	801b898 <_printf_float+0xcc>
 801bc3e:	4b01      	ldr	r3, [pc, #4]	; (801bc44 <_printf_float+0x478>)
 801bc40:	4a01      	ldr	r2, [pc, #4]	; (801bc48 <_printf_float+0x47c>)
 801bc42:	e60e      	b.n	801b862 <_printf_float+0x96>
 801bc44:	0801ed54 	.word	0x0801ed54
 801bc48:	0801ed58 	.word	0x0801ed58

0801bc4c <_printf_common>:
 801bc4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bc50:	4691      	mov	r9, r2
 801bc52:	461f      	mov	r7, r3
 801bc54:	688a      	ldr	r2, [r1, #8]
 801bc56:	690b      	ldr	r3, [r1, #16]
 801bc58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801bc5c:	4293      	cmp	r3, r2
 801bc5e:	bfb8      	it	lt
 801bc60:	4613      	movlt	r3, r2
 801bc62:	f8c9 3000 	str.w	r3, [r9]
 801bc66:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801bc6a:	4606      	mov	r6, r0
 801bc6c:	460c      	mov	r4, r1
 801bc6e:	b112      	cbz	r2, 801bc76 <_printf_common+0x2a>
 801bc70:	3301      	adds	r3, #1
 801bc72:	f8c9 3000 	str.w	r3, [r9]
 801bc76:	6823      	ldr	r3, [r4, #0]
 801bc78:	0699      	lsls	r1, r3, #26
 801bc7a:	bf42      	ittt	mi
 801bc7c:	f8d9 3000 	ldrmi.w	r3, [r9]
 801bc80:	3302      	addmi	r3, #2
 801bc82:	f8c9 3000 	strmi.w	r3, [r9]
 801bc86:	6825      	ldr	r5, [r4, #0]
 801bc88:	f015 0506 	ands.w	r5, r5, #6
 801bc8c:	d107      	bne.n	801bc9e <_printf_common+0x52>
 801bc8e:	f104 0a19 	add.w	sl, r4, #25
 801bc92:	68e3      	ldr	r3, [r4, #12]
 801bc94:	f8d9 2000 	ldr.w	r2, [r9]
 801bc98:	1a9b      	subs	r3, r3, r2
 801bc9a:	429d      	cmp	r5, r3
 801bc9c:	db29      	blt.n	801bcf2 <_printf_common+0xa6>
 801bc9e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801bca2:	6822      	ldr	r2, [r4, #0]
 801bca4:	3300      	adds	r3, #0
 801bca6:	bf18      	it	ne
 801bca8:	2301      	movne	r3, #1
 801bcaa:	0692      	lsls	r2, r2, #26
 801bcac:	d42e      	bmi.n	801bd0c <_printf_common+0xc0>
 801bcae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801bcb2:	4639      	mov	r1, r7
 801bcb4:	4630      	mov	r0, r6
 801bcb6:	47c0      	blx	r8
 801bcb8:	3001      	adds	r0, #1
 801bcba:	d021      	beq.n	801bd00 <_printf_common+0xb4>
 801bcbc:	6823      	ldr	r3, [r4, #0]
 801bcbe:	68e5      	ldr	r5, [r4, #12]
 801bcc0:	f8d9 2000 	ldr.w	r2, [r9]
 801bcc4:	f003 0306 	and.w	r3, r3, #6
 801bcc8:	2b04      	cmp	r3, #4
 801bcca:	bf08      	it	eq
 801bccc:	1aad      	subeq	r5, r5, r2
 801bcce:	68a3      	ldr	r3, [r4, #8]
 801bcd0:	6922      	ldr	r2, [r4, #16]
 801bcd2:	bf0c      	ite	eq
 801bcd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801bcd8:	2500      	movne	r5, #0
 801bcda:	4293      	cmp	r3, r2
 801bcdc:	bfc4      	itt	gt
 801bcde:	1a9b      	subgt	r3, r3, r2
 801bce0:	18ed      	addgt	r5, r5, r3
 801bce2:	f04f 0900 	mov.w	r9, #0
 801bce6:	341a      	adds	r4, #26
 801bce8:	454d      	cmp	r5, r9
 801bcea:	d11b      	bne.n	801bd24 <_printf_common+0xd8>
 801bcec:	2000      	movs	r0, #0
 801bcee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bcf2:	2301      	movs	r3, #1
 801bcf4:	4652      	mov	r2, sl
 801bcf6:	4639      	mov	r1, r7
 801bcf8:	4630      	mov	r0, r6
 801bcfa:	47c0      	blx	r8
 801bcfc:	3001      	adds	r0, #1
 801bcfe:	d103      	bne.n	801bd08 <_printf_common+0xbc>
 801bd00:	f04f 30ff 	mov.w	r0, #4294967295
 801bd04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bd08:	3501      	adds	r5, #1
 801bd0a:	e7c2      	b.n	801bc92 <_printf_common+0x46>
 801bd0c:	18e1      	adds	r1, r4, r3
 801bd0e:	1c5a      	adds	r2, r3, #1
 801bd10:	2030      	movs	r0, #48	; 0x30
 801bd12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801bd16:	4422      	add	r2, r4
 801bd18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801bd1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801bd20:	3302      	adds	r3, #2
 801bd22:	e7c4      	b.n	801bcae <_printf_common+0x62>
 801bd24:	2301      	movs	r3, #1
 801bd26:	4622      	mov	r2, r4
 801bd28:	4639      	mov	r1, r7
 801bd2a:	4630      	mov	r0, r6
 801bd2c:	47c0      	blx	r8
 801bd2e:	3001      	adds	r0, #1
 801bd30:	d0e6      	beq.n	801bd00 <_printf_common+0xb4>
 801bd32:	f109 0901 	add.w	r9, r9, #1
 801bd36:	e7d7      	b.n	801bce8 <_printf_common+0x9c>

0801bd38 <_printf_i>:
 801bd38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bd3c:	4617      	mov	r7, r2
 801bd3e:	7e0a      	ldrb	r2, [r1, #24]
 801bd40:	b085      	sub	sp, #20
 801bd42:	2a6e      	cmp	r2, #110	; 0x6e
 801bd44:	4698      	mov	r8, r3
 801bd46:	4606      	mov	r6, r0
 801bd48:	460c      	mov	r4, r1
 801bd4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bd4c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 801bd50:	f000 80bc 	beq.w	801becc <_printf_i+0x194>
 801bd54:	d81a      	bhi.n	801bd8c <_printf_i+0x54>
 801bd56:	2a63      	cmp	r2, #99	; 0x63
 801bd58:	d02e      	beq.n	801bdb8 <_printf_i+0x80>
 801bd5a:	d80a      	bhi.n	801bd72 <_printf_i+0x3a>
 801bd5c:	2a00      	cmp	r2, #0
 801bd5e:	f000 80c8 	beq.w	801bef2 <_printf_i+0x1ba>
 801bd62:	2a58      	cmp	r2, #88	; 0x58
 801bd64:	f000 808a 	beq.w	801be7c <_printf_i+0x144>
 801bd68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801bd6c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 801bd70:	e02a      	b.n	801bdc8 <_printf_i+0x90>
 801bd72:	2a64      	cmp	r2, #100	; 0x64
 801bd74:	d001      	beq.n	801bd7a <_printf_i+0x42>
 801bd76:	2a69      	cmp	r2, #105	; 0x69
 801bd78:	d1f6      	bne.n	801bd68 <_printf_i+0x30>
 801bd7a:	6821      	ldr	r1, [r4, #0]
 801bd7c:	681a      	ldr	r2, [r3, #0]
 801bd7e:	f011 0f80 	tst.w	r1, #128	; 0x80
 801bd82:	d023      	beq.n	801bdcc <_printf_i+0x94>
 801bd84:	1d11      	adds	r1, r2, #4
 801bd86:	6019      	str	r1, [r3, #0]
 801bd88:	6813      	ldr	r3, [r2, #0]
 801bd8a:	e027      	b.n	801bddc <_printf_i+0xa4>
 801bd8c:	2a73      	cmp	r2, #115	; 0x73
 801bd8e:	f000 80b4 	beq.w	801befa <_printf_i+0x1c2>
 801bd92:	d808      	bhi.n	801bda6 <_printf_i+0x6e>
 801bd94:	2a6f      	cmp	r2, #111	; 0x6f
 801bd96:	d02a      	beq.n	801bdee <_printf_i+0xb6>
 801bd98:	2a70      	cmp	r2, #112	; 0x70
 801bd9a:	d1e5      	bne.n	801bd68 <_printf_i+0x30>
 801bd9c:	680a      	ldr	r2, [r1, #0]
 801bd9e:	f042 0220 	orr.w	r2, r2, #32
 801bda2:	600a      	str	r2, [r1, #0]
 801bda4:	e003      	b.n	801bdae <_printf_i+0x76>
 801bda6:	2a75      	cmp	r2, #117	; 0x75
 801bda8:	d021      	beq.n	801bdee <_printf_i+0xb6>
 801bdaa:	2a78      	cmp	r2, #120	; 0x78
 801bdac:	d1dc      	bne.n	801bd68 <_printf_i+0x30>
 801bdae:	2278      	movs	r2, #120	; 0x78
 801bdb0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 801bdb4:	496e      	ldr	r1, [pc, #440]	; (801bf70 <_printf_i+0x238>)
 801bdb6:	e064      	b.n	801be82 <_printf_i+0x14a>
 801bdb8:	681a      	ldr	r2, [r3, #0]
 801bdba:	f101 0542 	add.w	r5, r1, #66	; 0x42
 801bdbe:	1d11      	adds	r1, r2, #4
 801bdc0:	6019      	str	r1, [r3, #0]
 801bdc2:	6813      	ldr	r3, [r2, #0]
 801bdc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801bdc8:	2301      	movs	r3, #1
 801bdca:	e0a3      	b.n	801bf14 <_printf_i+0x1dc>
 801bdcc:	f011 0f40 	tst.w	r1, #64	; 0x40
 801bdd0:	f102 0104 	add.w	r1, r2, #4
 801bdd4:	6019      	str	r1, [r3, #0]
 801bdd6:	d0d7      	beq.n	801bd88 <_printf_i+0x50>
 801bdd8:	f9b2 3000 	ldrsh.w	r3, [r2]
 801bddc:	2b00      	cmp	r3, #0
 801bdde:	da03      	bge.n	801bde8 <_printf_i+0xb0>
 801bde0:	222d      	movs	r2, #45	; 0x2d
 801bde2:	425b      	negs	r3, r3
 801bde4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801bde8:	4962      	ldr	r1, [pc, #392]	; (801bf74 <_printf_i+0x23c>)
 801bdea:	220a      	movs	r2, #10
 801bdec:	e017      	b.n	801be1e <_printf_i+0xe6>
 801bdee:	6820      	ldr	r0, [r4, #0]
 801bdf0:	6819      	ldr	r1, [r3, #0]
 801bdf2:	f010 0f80 	tst.w	r0, #128	; 0x80
 801bdf6:	d003      	beq.n	801be00 <_printf_i+0xc8>
 801bdf8:	1d08      	adds	r0, r1, #4
 801bdfa:	6018      	str	r0, [r3, #0]
 801bdfc:	680b      	ldr	r3, [r1, #0]
 801bdfe:	e006      	b.n	801be0e <_printf_i+0xd6>
 801be00:	f010 0f40 	tst.w	r0, #64	; 0x40
 801be04:	f101 0004 	add.w	r0, r1, #4
 801be08:	6018      	str	r0, [r3, #0]
 801be0a:	d0f7      	beq.n	801bdfc <_printf_i+0xc4>
 801be0c:	880b      	ldrh	r3, [r1, #0]
 801be0e:	4959      	ldr	r1, [pc, #356]	; (801bf74 <_printf_i+0x23c>)
 801be10:	2a6f      	cmp	r2, #111	; 0x6f
 801be12:	bf14      	ite	ne
 801be14:	220a      	movne	r2, #10
 801be16:	2208      	moveq	r2, #8
 801be18:	2000      	movs	r0, #0
 801be1a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 801be1e:	6865      	ldr	r5, [r4, #4]
 801be20:	60a5      	str	r5, [r4, #8]
 801be22:	2d00      	cmp	r5, #0
 801be24:	f2c0 809c 	blt.w	801bf60 <_printf_i+0x228>
 801be28:	6820      	ldr	r0, [r4, #0]
 801be2a:	f020 0004 	bic.w	r0, r0, #4
 801be2e:	6020      	str	r0, [r4, #0]
 801be30:	2b00      	cmp	r3, #0
 801be32:	d13f      	bne.n	801beb4 <_printf_i+0x17c>
 801be34:	2d00      	cmp	r5, #0
 801be36:	f040 8095 	bne.w	801bf64 <_printf_i+0x22c>
 801be3a:	4675      	mov	r5, lr
 801be3c:	2a08      	cmp	r2, #8
 801be3e:	d10b      	bne.n	801be58 <_printf_i+0x120>
 801be40:	6823      	ldr	r3, [r4, #0]
 801be42:	07da      	lsls	r2, r3, #31
 801be44:	d508      	bpl.n	801be58 <_printf_i+0x120>
 801be46:	6923      	ldr	r3, [r4, #16]
 801be48:	6862      	ldr	r2, [r4, #4]
 801be4a:	429a      	cmp	r2, r3
 801be4c:	bfde      	ittt	le
 801be4e:	2330      	movle	r3, #48	; 0x30
 801be50:	f805 3c01 	strble.w	r3, [r5, #-1]
 801be54:	f105 35ff 	addle.w	r5, r5, #4294967295
 801be58:	ebae 0305 	sub.w	r3, lr, r5
 801be5c:	6123      	str	r3, [r4, #16]
 801be5e:	f8cd 8000 	str.w	r8, [sp]
 801be62:	463b      	mov	r3, r7
 801be64:	aa03      	add	r2, sp, #12
 801be66:	4621      	mov	r1, r4
 801be68:	4630      	mov	r0, r6
 801be6a:	f7ff feef 	bl	801bc4c <_printf_common>
 801be6e:	3001      	adds	r0, #1
 801be70:	d155      	bne.n	801bf1e <_printf_i+0x1e6>
 801be72:	f04f 30ff 	mov.w	r0, #4294967295
 801be76:	b005      	add	sp, #20
 801be78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801be7c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 801be80:	493c      	ldr	r1, [pc, #240]	; (801bf74 <_printf_i+0x23c>)
 801be82:	6822      	ldr	r2, [r4, #0]
 801be84:	6818      	ldr	r0, [r3, #0]
 801be86:	f012 0f80 	tst.w	r2, #128	; 0x80
 801be8a:	f100 0504 	add.w	r5, r0, #4
 801be8e:	601d      	str	r5, [r3, #0]
 801be90:	d001      	beq.n	801be96 <_printf_i+0x15e>
 801be92:	6803      	ldr	r3, [r0, #0]
 801be94:	e002      	b.n	801be9c <_printf_i+0x164>
 801be96:	0655      	lsls	r5, r2, #25
 801be98:	d5fb      	bpl.n	801be92 <_printf_i+0x15a>
 801be9a:	8803      	ldrh	r3, [r0, #0]
 801be9c:	07d0      	lsls	r0, r2, #31
 801be9e:	bf44      	itt	mi
 801bea0:	f042 0220 	orrmi.w	r2, r2, #32
 801bea4:	6022      	strmi	r2, [r4, #0]
 801bea6:	b91b      	cbnz	r3, 801beb0 <_printf_i+0x178>
 801bea8:	6822      	ldr	r2, [r4, #0]
 801beaa:	f022 0220 	bic.w	r2, r2, #32
 801beae:	6022      	str	r2, [r4, #0]
 801beb0:	2210      	movs	r2, #16
 801beb2:	e7b1      	b.n	801be18 <_printf_i+0xe0>
 801beb4:	4675      	mov	r5, lr
 801beb6:	fbb3 f0f2 	udiv	r0, r3, r2
 801beba:	fb02 3310 	mls	r3, r2, r0, r3
 801bebe:	5ccb      	ldrb	r3, [r1, r3]
 801bec0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801bec4:	4603      	mov	r3, r0
 801bec6:	2800      	cmp	r0, #0
 801bec8:	d1f5      	bne.n	801beb6 <_printf_i+0x17e>
 801beca:	e7b7      	b.n	801be3c <_printf_i+0x104>
 801becc:	6808      	ldr	r0, [r1, #0]
 801bece:	681a      	ldr	r2, [r3, #0]
 801bed0:	6949      	ldr	r1, [r1, #20]
 801bed2:	f010 0f80 	tst.w	r0, #128	; 0x80
 801bed6:	d004      	beq.n	801bee2 <_printf_i+0x1aa>
 801bed8:	1d10      	adds	r0, r2, #4
 801beda:	6018      	str	r0, [r3, #0]
 801bedc:	6813      	ldr	r3, [r2, #0]
 801bede:	6019      	str	r1, [r3, #0]
 801bee0:	e007      	b.n	801bef2 <_printf_i+0x1ba>
 801bee2:	f010 0f40 	tst.w	r0, #64	; 0x40
 801bee6:	f102 0004 	add.w	r0, r2, #4
 801beea:	6018      	str	r0, [r3, #0]
 801beec:	6813      	ldr	r3, [r2, #0]
 801beee:	d0f6      	beq.n	801bede <_printf_i+0x1a6>
 801bef0:	8019      	strh	r1, [r3, #0]
 801bef2:	2300      	movs	r3, #0
 801bef4:	6123      	str	r3, [r4, #16]
 801bef6:	4675      	mov	r5, lr
 801bef8:	e7b1      	b.n	801be5e <_printf_i+0x126>
 801befa:	681a      	ldr	r2, [r3, #0]
 801befc:	1d11      	adds	r1, r2, #4
 801befe:	6019      	str	r1, [r3, #0]
 801bf00:	6815      	ldr	r5, [r2, #0]
 801bf02:	6862      	ldr	r2, [r4, #4]
 801bf04:	2100      	movs	r1, #0
 801bf06:	4628      	mov	r0, r5
 801bf08:	f7e4 f972 	bl	80001f0 <memchr>
 801bf0c:	b108      	cbz	r0, 801bf12 <_printf_i+0x1da>
 801bf0e:	1b40      	subs	r0, r0, r5
 801bf10:	6060      	str	r0, [r4, #4]
 801bf12:	6863      	ldr	r3, [r4, #4]
 801bf14:	6123      	str	r3, [r4, #16]
 801bf16:	2300      	movs	r3, #0
 801bf18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bf1c:	e79f      	b.n	801be5e <_printf_i+0x126>
 801bf1e:	6923      	ldr	r3, [r4, #16]
 801bf20:	462a      	mov	r2, r5
 801bf22:	4639      	mov	r1, r7
 801bf24:	4630      	mov	r0, r6
 801bf26:	47c0      	blx	r8
 801bf28:	3001      	adds	r0, #1
 801bf2a:	d0a2      	beq.n	801be72 <_printf_i+0x13a>
 801bf2c:	6823      	ldr	r3, [r4, #0]
 801bf2e:	079b      	lsls	r3, r3, #30
 801bf30:	d507      	bpl.n	801bf42 <_printf_i+0x20a>
 801bf32:	2500      	movs	r5, #0
 801bf34:	f104 0919 	add.w	r9, r4, #25
 801bf38:	68e3      	ldr	r3, [r4, #12]
 801bf3a:	9a03      	ldr	r2, [sp, #12]
 801bf3c:	1a9b      	subs	r3, r3, r2
 801bf3e:	429d      	cmp	r5, r3
 801bf40:	db05      	blt.n	801bf4e <_printf_i+0x216>
 801bf42:	68e0      	ldr	r0, [r4, #12]
 801bf44:	9b03      	ldr	r3, [sp, #12]
 801bf46:	4298      	cmp	r0, r3
 801bf48:	bfb8      	it	lt
 801bf4a:	4618      	movlt	r0, r3
 801bf4c:	e793      	b.n	801be76 <_printf_i+0x13e>
 801bf4e:	2301      	movs	r3, #1
 801bf50:	464a      	mov	r2, r9
 801bf52:	4639      	mov	r1, r7
 801bf54:	4630      	mov	r0, r6
 801bf56:	47c0      	blx	r8
 801bf58:	3001      	adds	r0, #1
 801bf5a:	d08a      	beq.n	801be72 <_printf_i+0x13a>
 801bf5c:	3501      	adds	r5, #1
 801bf5e:	e7eb      	b.n	801bf38 <_printf_i+0x200>
 801bf60:	2b00      	cmp	r3, #0
 801bf62:	d1a7      	bne.n	801beb4 <_printf_i+0x17c>
 801bf64:	780b      	ldrb	r3, [r1, #0]
 801bf66:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801bf6a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801bf6e:	e765      	b.n	801be3c <_printf_i+0x104>
 801bf70:	0801ed6f 	.word	0x0801ed6f
 801bf74:	0801ed5e 	.word	0x0801ed5e

0801bf78 <iprintf>:
 801bf78:	b40f      	push	{r0, r1, r2, r3}
 801bf7a:	4b0a      	ldr	r3, [pc, #40]	; (801bfa4 <iprintf+0x2c>)
 801bf7c:	b513      	push	{r0, r1, r4, lr}
 801bf7e:	681c      	ldr	r4, [r3, #0]
 801bf80:	b124      	cbz	r4, 801bf8c <iprintf+0x14>
 801bf82:	69a3      	ldr	r3, [r4, #24]
 801bf84:	b913      	cbnz	r3, 801bf8c <iprintf+0x14>
 801bf86:	4620      	mov	r0, r4
 801bf88:	f7ff fa14 	bl	801b3b4 <__sinit>
 801bf8c:	ab05      	add	r3, sp, #20
 801bf8e:	9a04      	ldr	r2, [sp, #16]
 801bf90:	68a1      	ldr	r1, [r4, #8]
 801bf92:	9301      	str	r3, [sp, #4]
 801bf94:	4620      	mov	r0, r4
 801bf96:	f001 fdc3 	bl	801db20 <_vfiprintf_r>
 801bf9a:	b002      	add	sp, #8
 801bf9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bfa0:	b004      	add	sp, #16
 801bfa2:	4770      	bx	lr
 801bfa4:	20001480 	.word	0x20001480

0801bfa8 <_puts_r>:
 801bfa8:	b570      	push	{r4, r5, r6, lr}
 801bfaa:	460e      	mov	r6, r1
 801bfac:	4605      	mov	r5, r0
 801bfae:	b118      	cbz	r0, 801bfb8 <_puts_r+0x10>
 801bfb0:	6983      	ldr	r3, [r0, #24]
 801bfb2:	b90b      	cbnz	r3, 801bfb8 <_puts_r+0x10>
 801bfb4:	f7ff f9fe 	bl	801b3b4 <__sinit>
 801bfb8:	69ab      	ldr	r3, [r5, #24]
 801bfba:	68ac      	ldr	r4, [r5, #8]
 801bfbc:	b913      	cbnz	r3, 801bfc4 <_puts_r+0x1c>
 801bfbe:	4628      	mov	r0, r5
 801bfc0:	f7ff f9f8 	bl	801b3b4 <__sinit>
 801bfc4:	4b23      	ldr	r3, [pc, #140]	; (801c054 <_puts_r+0xac>)
 801bfc6:	429c      	cmp	r4, r3
 801bfc8:	d117      	bne.n	801bffa <_puts_r+0x52>
 801bfca:	686c      	ldr	r4, [r5, #4]
 801bfcc:	89a3      	ldrh	r3, [r4, #12]
 801bfce:	071b      	lsls	r3, r3, #28
 801bfd0:	d51d      	bpl.n	801c00e <_puts_r+0x66>
 801bfd2:	6923      	ldr	r3, [r4, #16]
 801bfd4:	b1db      	cbz	r3, 801c00e <_puts_r+0x66>
 801bfd6:	3e01      	subs	r6, #1
 801bfd8:	68a3      	ldr	r3, [r4, #8]
 801bfda:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801bfde:	3b01      	subs	r3, #1
 801bfe0:	60a3      	str	r3, [r4, #8]
 801bfe2:	b9e9      	cbnz	r1, 801c020 <_puts_r+0x78>
 801bfe4:	2b00      	cmp	r3, #0
 801bfe6:	da2e      	bge.n	801c046 <_puts_r+0x9e>
 801bfe8:	4622      	mov	r2, r4
 801bfea:	210a      	movs	r1, #10
 801bfec:	4628      	mov	r0, r5
 801bfee:	f000 f97d 	bl	801c2ec <__swbuf_r>
 801bff2:	3001      	adds	r0, #1
 801bff4:	d011      	beq.n	801c01a <_puts_r+0x72>
 801bff6:	200a      	movs	r0, #10
 801bff8:	bd70      	pop	{r4, r5, r6, pc}
 801bffa:	4b17      	ldr	r3, [pc, #92]	; (801c058 <_puts_r+0xb0>)
 801bffc:	429c      	cmp	r4, r3
 801bffe:	d101      	bne.n	801c004 <_puts_r+0x5c>
 801c000:	68ac      	ldr	r4, [r5, #8]
 801c002:	e7e3      	b.n	801bfcc <_puts_r+0x24>
 801c004:	4b15      	ldr	r3, [pc, #84]	; (801c05c <_puts_r+0xb4>)
 801c006:	429c      	cmp	r4, r3
 801c008:	bf08      	it	eq
 801c00a:	68ec      	ldreq	r4, [r5, #12]
 801c00c:	e7de      	b.n	801bfcc <_puts_r+0x24>
 801c00e:	4621      	mov	r1, r4
 801c010:	4628      	mov	r0, r5
 801c012:	f000 f9cf 	bl	801c3b4 <__swsetup_r>
 801c016:	2800      	cmp	r0, #0
 801c018:	d0dd      	beq.n	801bfd6 <_puts_r+0x2e>
 801c01a:	f04f 30ff 	mov.w	r0, #4294967295
 801c01e:	bd70      	pop	{r4, r5, r6, pc}
 801c020:	2b00      	cmp	r3, #0
 801c022:	da04      	bge.n	801c02e <_puts_r+0x86>
 801c024:	69a2      	ldr	r2, [r4, #24]
 801c026:	4293      	cmp	r3, r2
 801c028:	db06      	blt.n	801c038 <_puts_r+0x90>
 801c02a:	290a      	cmp	r1, #10
 801c02c:	d004      	beq.n	801c038 <_puts_r+0x90>
 801c02e:	6823      	ldr	r3, [r4, #0]
 801c030:	1c5a      	adds	r2, r3, #1
 801c032:	6022      	str	r2, [r4, #0]
 801c034:	7019      	strb	r1, [r3, #0]
 801c036:	e7cf      	b.n	801bfd8 <_puts_r+0x30>
 801c038:	4622      	mov	r2, r4
 801c03a:	4628      	mov	r0, r5
 801c03c:	f000 f956 	bl	801c2ec <__swbuf_r>
 801c040:	3001      	adds	r0, #1
 801c042:	d1c9      	bne.n	801bfd8 <_puts_r+0x30>
 801c044:	e7e9      	b.n	801c01a <_puts_r+0x72>
 801c046:	6823      	ldr	r3, [r4, #0]
 801c048:	200a      	movs	r0, #10
 801c04a:	1c5a      	adds	r2, r3, #1
 801c04c:	6022      	str	r2, [r4, #0]
 801c04e:	7018      	strb	r0, [r3, #0]
 801c050:	bd70      	pop	{r4, r5, r6, pc}
 801c052:	bf00      	nop
 801c054:	0801ed08 	.word	0x0801ed08
 801c058:	0801ed28 	.word	0x0801ed28
 801c05c:	0801ece8 	.word	0x0801ece8

0801c060 <puts>:
 801c060:	4b02      	ldr	r3, [pc, #8]	; (801c06c <puts+0xc>)
 801c062:	4601      	mov	r1, r0
 801c064:	6818      	ldr	r0, [r3, #0]
 801c066:	f7ff bf9f 	b.w	801bfa8 <_puts_r>
 801c06a:	bf00      	nop
 801c06c:	20001480 	.word	0x20001480

0801c070 <_sbrk_r>:
 801c070:	b538      	push	{r3, r4, r5, lr}
 801c072:	4c06      	ldr	r4, [pc, #24]	; (801c08c <_sbrk_r+0x1c>)
 801c074:	2300      	movs	r3, #0
 801c076:	4605      	mov	r5, r0
 801c078:	4608      	mov	r0, r1
 801c07a:	6023      	str	r3, [r4, #0]
 801c07c:	f7f0 fb18 	bl	800c6b0 <_sbrk>
 801c080:	1c43      	adds	r3, r0, #1
 801c082:	d102      	bne.n	801c08a <_sbrk_r+0x1a>
 801c084:	6823      	ldr	r3, [r4, #0]
 801c086:	b103      	cbz	r3, 801c08a <_sbrk_r+0x1a>
 801c088:	602b      	str	r3, [r5, #0]
 801c08a:	bd38      	pop	{r3, r4, r5, pc}
 801c08c:	200038cc 	.word	0x200038cc

0801c090 <setvbuf>:
 801c090:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c094:	461d      	mov	r5, r3
 801c096:	4b51      	ldr	r3, [pc, #324]	; (801c1dc <setvbuf+0x14c>)
 801c098:	681e      	ldr	r6, [r3, #0]
 801c09a:	4604      	mov	r4, r0
 801c09c:	460f      	mov	r7, r1
 801c09e:	4690      	mov	r8, r2
 801c0a0:	b126      	cbz	r6, 801c0ac <setvbuf+0x1c>
 801c0a2:	69b3      	ldr	r3, [r6, #24]
 801c0a4:	b913      	cbnz	r3, 801c0ac <setvbuf+0x1c>
 801c0a6:	4630      	mov	r0, r6
 801c0a8:	f7ff f984 	bl	801b3b4 <__sinit>
 801c0ac:	4b4c      	ldr	r3, [pc, #304]	; (801c1e0 <setvbuf+0x150>)
 801c0ae:	429c      	cmp	r4, r3
 801c0b0:	d152      	bne.n	801c158 <setvbuf+0xc8>
 801c0b2:	6874      	ldr	r4, [r6, #4]
 801c0b4:	f1b8 0f02 	cmp.w	r8, #2
 801c0b8:	d006      	beq.n	801c0c8 <setvbuf+0x38>
 801c0ba:	f1b8 0f01 	cmp.w	r8, #1
 801c0be:	f200 8089 	bhi.w	801c1d4 <setvbuf+0x144>
 801c0c2:	2d00      	cmp	r5, #0
 801c0c4:	f2c0 8086 	blt.w	801c1d4 <setvbuf+0x144>
 801c0c8:	4621      	mov	r1, r4
 801c0ca:	4630      	mov	r0, r6
 801c0cc:	f7ff f908 	bl	801b2e0 <_fflush_r>
 801c0d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c0d2:	b141      	cbz	r1, 801c0e6 <setvbuf+0x56>
 801c0d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c0d8:	4299      	cmp	r1, r3
 801c0da:	d002      	beq.n	801c0e2 <setvbuf+0x52>
 801c0dc:	4630      	mov	r0, r6
 801c0de:	f7ff fa33 	bl	801b548 <_free_r>
 801c0e2:	2300      	movs	r3, #0
 801c0e4:	6363      	str	r3, [r4, #52]	; 0x34
 801c0e6:	2300      	movs	r3, #0
 801c0e8:	61a3      	str	r3, [r4, #24]
 801c0ea:	6063      	str	r3, [r4, #4]
 801c0ec:	89a3      	ldrh	r3, [r4, #12]
 801c0ee:	061b      	lsls	r3, r3, #24
 801c0f0:	d503      	bpl.n	801c0fa <setvbuf+0x6a>
 801c0f2:	6921      	ldr	r1, [r4, #16]
 801c0f4:	4630      	mov	r0, r6
 801c0f6:	f7ff fa27 	bl	801b548 <_free_r>
 801c0fa:	89a3      	ldrh	r3, [r4, #12]
 801c0fc:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 801c100:	f023 0303 	bic.w	r3, r3, #3
 801c104:	f1b8 0f02 	cmp.w	r8, #2
 801c108:	81a3      	strh	r3, [r4, #12]
 801c10a:	d05d      	beq.n	801c1c8 <setvbuf+0x138>
 801c10c:	ab01      	add	r3, sp, #4
 801c10e:	466a      	mov	r2, sp
 801c110:	4621      	mov	r1, r4
 801c112:	4630      	mov	r0, r6
 801c114:	f001 f846 	bl	801d1a4 <__swhatbuf_r>
 801c118:	89a3      	ldrh	r3, [r4, #12]
 801c11a:	4318      	orrs	r0, r3
 801c11c:	81a0      	strh	r0, [r4, #12]
 801c11e:	bb2d      	cbnz	r5, 801c16c <setvbuf+0xdc>
 801c120:	9d00      	ldr	r5, [sp, #0]
 801c122:	4628      	mov	r0, r5
 801c124:	f7ff f9f4 	bl	801b510 <malloc>
 801c128:	4607      	mov	r7, r0
 801c12a:	2800      	cmp	r0, #0
 801c12c:	d14e      	bne.n	801c1cc <setvbuf+0x13c>
 801c12e:	f8dd 9000 	ldr.w	r9, [sp]
 801c132:	45a9      	cmp	r9, r5
 801c134:	d13c      	bne.n	801c1b0 <setvbuf+0x120>
 801c136:	f04f 30ff 	mov.w	r0, #4294967295
 801c13a:	89a3      	ldrh	r3, [r4, #12]
 801c13c:	f043 0302 	orr.w	r3, r3, #2
 801c140:	81a3      	strh	r3, [r4, #12]
 801c142:	2300      	movs	r3, #0
 801c144:	60a3      	str	r3, [r4, #8]
 801c146:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c14a:	6023      	str	r3, [r4, #0]
 801c14c:	6123      	str	r3, [r4, #16]
 801c14e:	2301      	movs	r3, #1
 801c150:	6163      	str	r3, [r4, #20]
 801c152:	b003      	add	sp, #12
 801c154:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c158:	4b22      	ldr	r3, [pc, #136]	; (801c1e4 <setvbuf+0x154>)
 801c15a:	429c      	cmp	r4, r3
 801c15c:	d101      	bne.n	801c162 <setvbuf+0xd2>
 801c15e:	68b4      	ldr	r4, [r6, #8]
 801c160:	e7a8      	b.n	801c0b4 <setvbuf+0x24>
 801c162:	4b21      	ldr	r3, [pc, #132]	; (801c1e8 <setvbuf+0x158>)
 801c164:	429c      	cmp	r4, r3
 801c166:	bf08      	it	eq
 801c168:	68f4      	ldreq	r4, [r6, #12]
 801c16a:	e7a3      	b.n	801c0b4 <setvbuf+0x24>
 801c16c:	2f00      	cmp	r7, #0
 801c16e:	d0d8      	beq.n	801c122 <setvbuf+0x92>
 801c170:	69b3      	ldr	r3, [r6, #24]
 801c172:	b913      	cbnz	r3, 801c17a <setvbuf+0xea>
 801c174:	4630      	mov	r0, r6
 801c176:	f7ff f91d 	bl	801b3b4 <__sinit>
 801c17a:	f1b8 0f01 	cmp.w	r8, #1
 801c17e:	bf08      	it	eq
 801c180:	89a3      	ldrheq	r3, [r4, #12]
 801c182:	6027      	str	r7, [r4, #0]
 801c184:	bf04      	itt	eq
 801c186:	f043 0301 	orreq.w	r3, r3, #1
 801c18a:	81a3      	strheq	r3, [r4, #12]
 801c18c:	89a3      	ldrh	r3, [r4, #12]
 801c18e:	6127      	str	r7, [r4, #16]
 801c190:	f013 0008 	ands.w	r0, r3, #8
 801c194:	6165      	str	r5, [r4, #20]
 801c196:	d01b      	beq.n	801c1d0 <setvbuf+0x140>
 801c198:	f013 0001 	ands.w	r0, r3, #1
 801c19c:	bf18      	it	ne
 801c19e:	426d      	negne	r5, r5
 801c1a0:	f04f 0300 	mov.w	r3, #0
 801c1a4:	bf1d      	ittte	ne
 801c1a6:	60a3      	strne	r3, [r4, #8]
 801c1a8:	61a5      	strne	r5, [r4, #24]
 801c1aa:	4618      	movne	r0, r3
 801c1ac:	60a5      	streq	r5, [r4, #8]
 801c1ae:	e7d0      	b.n	801c152 <setvbuf+0xc2>
 801c1b0:	4648      	mov	r0, r9
 801c1b2:	f7ff f9ad 	bl	801b510 <malloc>
 801c1b6:	4607      	mov	r7, r0
 801c1b8:	2800      	cmp	r0, #0
 801c1ba:	d0bc      	beq.n	801c136 <setvbuf+0xa6>
 801c1bc:	89a3      	ldrh	r3, [r4, #12]
 801c1be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c1c2:	81a3      	strh	r3, [r4, #12]
 801c1c4:	464d      	mov	r5, r9
 801c1c6:	e7d3      	b.n	801c170 <setvbuf+0xe0>
 801c1c8:	2000      	movs	r0, #0
 801c1ca:	e7b6      	b.n	801c13a <setvbuf+0xaa>
 801c1cc:	46a9      	mov	r9, r5
 801c1ce:	e7f5      	b.n	801c1bc <setvbuf+0x12c>
 801c1d0:	60a0      	str	r0, [r4, #8]
 801c1d2:	e7be      	b.n	801c152 <setvbuf+0xc2>
 801c1d4:	f04f 30ff 	mov.w	r0, #4294967295
 801c1d8:	e7bb      	b.n	801c152 <setvbuf+0xc2>
 801c1da:	bf00      	nop
 801c1dc:	20001480 	.word	0x20001480
 801c1e0:	0801ed08 	.word	0x0801ed08
 801c1e4:	0801ed28 	.word	0x0801ed28
 801c1e8:	0801ece8 	.word	0x0801ece8

0801c1ec <sniprintf>:
 801c1ec:	b40c      	push	{r2, r3}
 801c1ee:	b530      	push	{r4, r5, lr}
 801c1f0:	4b17      	ldr	r3, [pc, #92]	; (801c250 <sniprintf+0x64>)
 801c1f2:	1e0c      	subs	r4, r1, #0
 801c1f4:	b09d      	sub	sp, #116	; 0x74
 801c1f6:	681d      	ldr	r5, [r3, #0]
 801c1f8:	da08      	bge.n	801c20c <sniprintf+0x20>
 801c1fa:	238b      	movs	r3, #139	; 0x8b
 801c1fc:	602b      	str	r3, [r5, #0]
 801c1fe:	f04f 30ff 	mov.w	r0, #4294967295
 801c202:	b01d      	add	sp, #116	; 0x74
 801c204:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c208:	b002      	add	sp, #8
 801c20a:	4770      	bx	lr
 801c20c:	f44f 7302 	mov.w	r3, #520	; 0x208
 801c210:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c214:	bf14      	ite	ne
 801c216:	f104 33ff 	addne.w	r3, r4, #4294967295
 801c21a:	4623      	moveq	r3, r4
 801c21c:	9304      	str	r3, [sp, #16]
 801c21e:	9307      	str	r3, [sp, #28]
 801c220:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c224:	9002      	str	r0, [sp, #8]
 801c226:	9006      	str	r0, [sp, #24]
 801c228:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c22c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801c22e:	ab21      	add	r3, sp, #132	; 0x84
 801c230:	a902      	add	r1, sp, #8
 801c232:	4628      	mov	r0, r5
 801c234:	9301      	str	r3, [sp, #4]
 801c236:	f001 fb55 	bl	801d8e4 <_svfiprintf_r>
 801c23a:	1c43      	adds	r3, r0, #1
 801c23c:	bfbc      	itt	lt
 801c23e:	238b      	movlt	r3, #139	; 0x8b
 801c240:	602b      	strlt	r3, [r5, #0]
 801c242:	2c00      	cmp	r4, #0
 801c244:	d0dd      	beq.n	801c202 <sniprintf+0x16>
 801c246:	9b02      	ldr	r3, [sp, #8]
 801c248:	2200      	movs	r2, #0
 801c24a:	701a      	strb	r2, [r3, #0]
 801c24c:	e7d9      	b.n	801c202 <sniprintf+0x16>
 801c24e:	bf00      	nop
 801c250:	20001480 	.word	0x20001480

0801c254 <__sread>:
 801c254:	b510      	push	{r4, lr}
 801c256:	460c      	mov	r4, r1
 801c258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c25c:	f001 fd76 	bl	801dd4c <_read_r>
 801c260:	2800      	cmp	r0, #0
 801c262:	bfab      	itete	ge
 801c264:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c266:	89a3      	ldrhlt	r3, [r4, #12]
 801c268:	181b      	addge	r3, r3, r0
 801c26a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c26e:	bfac      	ite	ge
 801c270:	6563      	strge	r3, [r4, #84]	; 0x54
 801c272:	81a3      	strhlt	r3, [r4, #12]
 801c274:	bd10      	pop	{r4, pc}

0801c276 <__swrite>:
 801c276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c27a:	461f      	mov	r7, r3
 801c27c:	898b      	ldrh	r3, [r1, #12]
 801c27e:	05db      	lsls	r3, r3, #23
 801c280:	4605      	mov	r5, r0
 801c282:	460c      	mov	r4, r1
 801c284:	4616      	mov	r6, r2
 801c286:	d505      	bpl.n	801c294 <__swrite+0x1e>
 801c288:	2302      	movs	r3, #2
 801c28a:	2200      	movs	r2, #0
 801c28c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c290:	f000 ff76 	bl	801d180 <_lseek_r>
 801c294:	89a3      	ldrh	r3, [r4, #12]
 801c296:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c29a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c29e:	81a3      	strh	r3, [r4, #12]
 801c2a0:	4632      	mov	r2, r6
 801c2a2:	463b      	mov	r3, r7
 801c2a4:	4628      	mov	r0, r5
 801c2a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c2aa:	f000 b871 	b.w	801c390 <_write_r>

0801c2ae <__sseek>:
 801c2ae:	b510      	push	{r4, lr}
 801c2b0:	460c      	mov	r4, r1
 801c2b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c2b6:	f000 ff63 	bl	801d180 <_lseek_r>
 801c2ba:	1c43      	adds	r3, r0, #1
 801c2bc:	89a3      	ldrh	r3, [r4, #12]
 801c2be:	bf15      	itete	ne
 801c2c0:	6560      	strne	r0, [r4, #84]	; 0x54
 801c2c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c2c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c2ca:	81a3      	strheq	r3, [r4, #12]
 801c2cc:	bf18      	it	ne
 801c2ce:	81a3      	strhne	r3, [r4, #12]
 801c2d0:	bd10      	pop	{r4, pc}

0801c2d2 <__sclose>:
 801c2d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c2d6:	f000 b8db 	b.w	801c490 <_close_r>

0801c2da <strcpy>:
 801c2da:	4603      	mov	r3, r0
 801c2dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c2e0:	f803 2b01 	strb.w	r2, [r3], #1
 801c2e4:	2a00      	cmp	r2, #0
 801c2e6:	d1f9      	bne.n	801c2dc <strcpy+0x2>
 801c2e8:	4770      	bx	lr
	...

0801c2ec <__swbuf_r>:
 801c2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c2ee:	460e      	mov	r6, r1
 801c2f0:	4614      	mov	r4, r2
 801c2f2:	4605      	mov	r5, r0
 801c2f4:	b118      	cbz	r0, 801c2fe <__swbuf_r+0x12>
 801c2f6:	6983      	ldr	r3, [r0, #24]
 801c2f8:	b90b      	cbnz	r3, 801c2fe <__swbuf_r+0x12>
 801c2fa:	f7ff f85b 	bl	801b3b4 <__sinit>
 801c2fe:	4b21      	ldr	r3, [pc, #132]	; (801c384 <__swbuf_r+0x98>)
 801c300:	429c      	cmp	r4, r3
 801c302:	d12a      	bne.n	801c35a <__swbuf_r+0x6e>
 801c304:	686c      	ldr	r4, [r5, #4]
 801c306:	69a3      	ldr	r3, [r4, #24]
 801c308:	60a3      	str	r3, [r4, #8]
 801c30a:	89a3      	ldrh	r3, [r4, #12]
 801c30c:	071a      	lsls	r2, r3, #28
 801c30e:	d52e      	bpl.n	801c36e <__swbuf_r+0x82>
 801c310:	6923      	ldr	r3, [r4, #16]
 801c312:	b363      	cbz	r3, 801c36e <__swbuf_r+0x82>
 801c314:	6923      	ldr	r3, [r4, #16]
 801c316:	6820      	ldr	r0, [r4, #0]
 801c318:	1ac0      	subs	r0, r0, r3
 801c31a:	6963      	ldr	r3, [r4, #20]
 801c31c:	b2f6      	uxtb	r6, r6
 801c31e:	4298      	cmp	r0, r3
 801c320:	4637      	mov	r7, r6
 801c322:	db04      	blt.n	801c32e <__swbuf_r+0x42>
 801c324:	4621      	mov	r1, r4
 801c326:	4628      	mov	r0, r5
 801c328:	f7fe ffda 	bl	801b2e0 <_fflush_r>
 801c32c:	bb28      	cbnz	r0, 801c37a <__swbuf_r+0x8e>
 801c32e:	68a3      	ldr	r3, [r4, #8]
 801c330:	3b01      	subs	r3, #1
 801c332:	60a3      	str	r3, [r4, #8]
 801c334:	6823      	ldr	r3, [r4, #0]
 801c336:	1c5a      	adds	r2, r3, #1
 801c338:	6022      	str	r2, [r4, #0]
 801c33a:	701e      	strb	r6, [r3, #0]
 801c33c:	6963      	ldr	r3, [r4, #20]
 801c33e:	3001      	adds	r0, #1
 801c340:	4298      	cmp	r0, r3
 801c342:	d004      	beq.n	801c34e <__swbuf_r+0x62>
 801c344:	89a3      	ldrh	r3, [r4, #12]
 801c346:	07db      	lsls	r3, r3, #31
 801c348:	d519      	bpl.n	801c37e <__swbuf_r+0x92>
 801c34a:	2e0a      	cmp	r6, #10
 801c34c:	d117      	bne.n	801c37e <__swbuf_r+0x92>
 801c34e:	4621      	mov	r1, r4
 801c350:	4628      	mov	r0, r5
 801c352:	f7fe ffc5 	bl	801b2e0 <_fflush_r>
 801c356:	b190      	cbz	r0, 801c37e <__swbuf_r+0x92>
 801c358:	e00f      	b.n	801c37a <__swbuf_r+0x8e>
 801c35a:	4b0b      	ldr	r3, [pc, #44]	; (801c388 <__swbuf_r+0x9c>)
 801c35c:	429c      	cmp	r4, r3
 801c35e:	d101      	bne.n	801c364 <__swbuf_r+0x78>
 801c360:	68ac      	ldr	r4, [r5, #8]
 801c362:	e7d0      	b.n	801c306 <__swbuf_r+0x1a>
 801c364:	4b09      	ldr	r3, [pc, #36]	; (801c38c <__swbuf_r+0xa0>)
 801c366:	429c      	cmp	r4, r3
 801c368:	bf08      	it	eq
 801c36a:	68ec      	ldreq	r4, [r5, #12]
 801c36c:	e7cb      	b.n	801c306 <__swbuf_r+0x1a>
 801c36e:	4621      	mov	r1, r4
 801c370:	4628      	mov	r0, r5
 801c372:	f000 f81f 	bl	801c3b4 <__swsetup_r>
 801c376:	2800      	cmp	r0, #0
 801c378:	d0cc      	beq.n	801c314 <__swbuf_r+0x28>
 801c37a:	f04f 37ff 	mov.w	r7, #4294967295
 801c37e:	4638      	mov	r0, r7
 801c380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c382:	bf00      	nop
 801c384:	0801ed08 	.word	0x0801ed08
 801c388:	0801ed28 	.word	0x0801ed28
 801c38c:	0801ece8 	.word	0x0801ece8

0801c390 <_write_r>:
 801c390:	b538      	push	{r3, r4, r5, lr}
 801c392:	4c07      	ldr	r4, [pc, #28]	; (801c3b0 <_write_r+0x20>)
 801c394:	4605      	mov	r5, r0
 801c396:	4608      	mov	r0, r1
 801c398:	4611      	mov	r1, r2
 801c39a:	2200      	movs	r2, #0
 801c39c:	6022      	str	r2, [r4, #0]
 801c39e:	461a      	mov	r2, r3
 801c3a0:	f7f0 f977 	bl	800c692 <_write>
 801c3a4:	1c43      	adds	r3, r0, #1
 801c3a6:	d102      	bne.n	801c3ae <_write_r+0x1e>
 801c3a8:	6823      	ldr	r3, [r4, #0]
 801c3aa:	b103      	cbz	r3, 801c3ae <_write_r+0x1e>
 801c3ac:	602b      	str	r3, [r5, #0]
 801c3ae:	bd38      	pop	{r3, r4, r5, pc}
 801c3b0:	200038cc 	.word	0x200038cc

0801c3b4 <__swsetup_r>:
 801c3b4:	4b32      	ldr	r3, [pc, #200]	; (801c480 <__swsetup_r+0xcc>)
 801c3b6:	b570      	push	{r4, r5, r6, lr}
 801c3b8:	681d      	ldr	r5, [r3, #0]
 801c3ba:	4606      	mov	r6, r0
 801c3bc:	460c      	mov	r4, r1
 801c3be:	b125      	cbz	r5, 801c3ca <__swsetup_r+0x16>
 801c3c0:	69ab      	ldr	r3, [r5, #24]
 801c3c2:	b913      	cbnz	r3, 801c3ca <__swsetup_r+0x16>
 801c3c4:	4628      	mov	r0, r5
 801c3c6:	f7fe fff5 	bl	801b3b4 <__sinit>
 801c3ca:	4b2e      	ldr	r3, [pc, #184]	; (801c484 <__swsetup_r+0xd0>)
 801c3cc:	429c      	cmp	r4, r3
 801c3ce:	d10f      	bne.n	801c3f0 <__swsetup_r+0x3c>
 801c3d0:	686c      	ldr	r4, [r5, #4]
 801c3d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c3d6:	b29a      	uxth	r2, r3
 801c3d8:	0715      	lsls	r5, r2, #28
 801c3da:	d42c      	bmi.n	801c436 <__swsetup_r+0x82>
 801c3dc:	06d0      	lsls	r0, r2, #27
 801c3de:	d411      	bmi.n	801c404 <__swsetup_r+0x50>
 801c3e0:	2209      	movs	r2, #9
 801c3e2:	6032      	str	r2, [r6, #0]
 801c3e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c3e8:	81a3      	strh	r3, [r4, #12]
 801c3ea:	f04f 30ff 	mov.w	r0, #4294967295
 801c3ee:	bd70      	pop	{r4, r5, r6, pc}
 801c3f0:	4b25      	ldr	r3, [pc, #148]	; (801c488 <__swsetup_r+0xd4>)
 801c3f2:	429c      	cmp	r4, r3
 801c3f4:	d101      	bne.n	801c3fa <__swsetup_r+0x46>
 801c3f6:	68ac      	ldr	r4, [r5, #8]
 801c3f8:	e7eb      	b.n	801c3d2 <__swsetup_r+0x1e>
 801c3fa:	4b24      	ldr	r3, [pc, #144]	; (801c48c <__swsetup_r+0xd8>)
 801c3fc:	429c      	cmp	r4, r3
 801c3fe:	bf08      	it	eq
 801c400:	68ec      	ldreq	r4, [r5, #12]
 801c402:	e7e6      	b.n	801c3d2 <__swsetup_r+0x1e>
 801c404:	0751      	lsls	r1, r2, #29
 801c406:	d512      	bpl.n	801c42e <__swsetup_r+0x7a>
 801c408:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c40a:	b141      	cbz	r1, 801c41e <__swsetup_r+0x6a>
 801c40c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c410:	4299      	cmp	r1, r3
 801c412:	d002      	beq.n	801c41a <__swsetup_r+0x66>
 801c414:	4630      	mov	r0, r6
 801c416:	f7ff f897 	bl	801b548 <_free_r>
 801c41a:	2300      	movs	r3, #0
 801c41c:	6363      	str	r3, [r4, #52]	; 0x34
 801c41e:	89a3      	ldrh	r3, [r4, #12]
 801c420:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c424:	81a3      	strh	r3, [r4, #12]
 801c426:	2300      	movs	r3, #0
 801c428:	6063      	str	r3, [r4, #4]
 801c42a:	6923      	ldr	r3, [r4, #16]
 801c42c:	6023      	str	r3, [r4, #0]
 801c42e:	89a3      	ldrh	r3, [r4, #12]
 801c430:	f043 0308 	orr.w	r3, r3, #8
 801c434:	81a3      	strh	r3, [r4, #12]
 801c436:	6923      	ldr	r3, [r4, #16]
 801c438:	b94b      	cbnz	r3, 801c44e <__swsetup_r+0x9a>
 801c43a:	89a3      	ldrh	r3, [r4, #12]
 801c43c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c444:	d003      	beq.n	801c44e <__swsetup_r+0x9a>
 801c446:	4621      	mov	r1, r4
 801c448:	4630      	mov	r0, r6
 801c44a:	f000 fecf 	bl	801d1ec <__smakebuf_r>
 801c44e:	89a2      	ldrh	r2, [r4, #12]
 801c450:	f012 0301 	ands.w	r3, r2, #1
 801c454:	d00c      	beq.n	801c470 <__swsetup_r+0xbc>
 801c456:	2300      	movs	r3, #0
 801c458:	60a3      	str	r3, [r4, #8]
 801c45a:	6963      	ldr	r3, [r4, #20]
 801c45c:	425b      	negs	r3, r3
 801c45e:	61a3      	str	r3, [r4, #24]
 801c460:	6923      	ldr	r3, [r4, #16]
 801c462:	b953      	cbnz	r3, 801c47a <__swsetup_r+0xc6>
 801c464:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c468:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801c46c:	d1ba      	bne.n	801c3e4 <__swsetup_r+0x30>
 801c46e:	bd70      	pop	{r4, r5, r6, pc}
 801c470:	0792      	lsls	r2, r2, #30
 801c472:	bf58      	it	pl
 801c474:	6963      	ldrpl	r3, [r4, #20]
 801c476:	60a3      	str	r3, [r4, #8]
 801c478:	e7f2      	b.n	801c460 <__swsetup_r+0xac>
 801c47a:	2000      	movs	r0, #0
 801c47c:	e7f7      	b.n	801c46e <__swsetup_r+0xba>
 801c47e:	bf00      	nop
 801c480:	20001480 	.word	0x20001480
 801c484:	0801ed08 	.word	0x0801ed08
 801c488:	0801ed28 	.word	0x0801ed28
 801c48c:	0801ece8 	.word	0x0801ece8

0801c490 <_close_r>:
 801c490:	b538      	push	{r3, r4, r5, lr}
 801c492:	4c06      	ldr	r4, [pc, #24]	; (801c4ac <_close_r+0x1c>)
 801c494:	2300      	movs	r3, #0
 801c496:	4605      	mov	r5, r0
 801c498:	4608      	mov	r0, r1
 801c49a:	6023      	str	r3, [r4, #0]
 801c49c:	f7f0 f926 	bl	800c6ec <_close>
 801c4a0:	1c43      	adds	r3, r0, #1
 801c4a2:	d102      	bne.n	801c4aa <_close_r+0x1a>
 801c4a4:	6823      	ldr	r3, [r4, #0]
 801c4a6:	b103      	cbz	r3, 801c4aa <_close_r+0x1a>
 801c4a8:	602b      	str	r3, [r5, #0]
 801c4aa:	bd38      	pop	{r3, r4, r5, pc}
 801c4ac:	200038cc 	.word	0x200038cc

0801c4b0 <quorem>:
 801c4b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c4b4:	6903      	ldr	r3, [r0, #16]
 801c4b6:	690c      	ldr	r4, [r1, #16]
 801c4b8:	429c      	cmp	r4, r3
 801c4ba:	4680      	mov	r8, r0
 801c4bc:	f300 8082 	bgt.w	801c5c4 <quorem+0x114>
 801c4c0:	3c01      	subs	r4, #1
 801c4c2:	f101 0714 	add.w	r7, r1, #20
 801c4c6:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 801c4ca:	f100 0614 	add.w	r6, r0, #20
 801c4ce:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801c4d2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801c4d6:	eb06 030e 	add.w	r3, r6, lr
 801c4da:	3501      	adds	r5, #1
 801c4dc:	eb07 090e 	add.w	r9, r7, lr
 801c4e0:	9301      	str	r3, [sp, #4]
 801c4e2:	fbb0 f5f5 	udiv	r5, r0, r5
 801c4e6:	b395      	cbz	r5, 801c54e <quorem+0x9e>
 801c4e8:	f04f 0a00 	mov.w	sl, #0
 801c4ec:	4638      	mov	r0, r7
 801c4ee:	46b4      	mov	ip, r6
 801c4f0:	46d3      	mov	fp, sl
 801c4f2:	f850 2b04 	ldr.w	r2, [r0], #4
 801c4f6:	b293      	uxth	r3, r2
 801c4f8:	fb05 a303 	mla	r3, r5, r3, sl
 801c4fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801c500:	b29b      	uxth	r3, r3
 801c502:	ebab 0303 	sub.w	r3, fp, r3
 801c506:	0c12      	lsrs	r2, r2, #16
 801c508:	f8bc b000 	ldrh.w	fp, [ip]
 801c50c:	fb05 a202 	mla	r2, r5, r2, sl
 801c510:	fa13 f38b 	uxtah	r3, r3, fp
 801c514:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801c518:	fa1f fb82 	uxth.w	fp, r2
 801c51c:	f8dc 2000 	ldr.w	r2, [ip]
 801c520:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801c524:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c528:	b29b      	uxth	r3, r3
 801c52a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c52e:	4581      	cmp	r9, r0
 801c530:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801c534:	f84c 3b04 	str.w	r3, [ip], #4
 801c538:	d2db      	bcs.n	801c4f2 <quorem+0x42>
 801c53a:	f856 300e 	ldr.w	r3, [r6, lr]
 801c53e:	b933      	cbnz	r3, 801c54e <quorem+0x9e>
 801c540:	9b01      	ldr	r3, [sp, #4]
 801c542:	3b04      	subs	r3, #4
 801c544:	429e      	cmp	r6, r3
 801c546:	461a      	mov	r2, r3
 801c548:	d330      	bcc.n	801c5ac <quorem+0xfc>
 801c54a:	f8c8 4010 	str.w	r4, [r8, #16]
 801c54e:	4640      	mov	r0, r8
 801c550:	f001 f897 	bl	801d682 <__mcmp>
 801c554:	2800      	cmp	r0, #0
 801c556:	db25      	blt.n	801c5a4 <quorem+0xf4>
 801c558:	3501      	adds	r5, #1
 801c55a:	4630      	mov	r0, r6
 801c55c:	f04f 0e00 	mov.w	lr, #0
 801c560:	f857 2b04 	ldr.w	r2, [r7], #4
 801c564:	f8d0 c000 	ldr.w	ip, [r0]
 801c568:	b293      	uxth	r3, r2
 801c56a:	ebae 0303 	sub.w	r3, lr, r3
 801c56e:	0c12      	lsrs	r2, r2, #16
 801c570:	fa13 f38c 	uxtah	r3, r3, ip
 801c574:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801c578:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c57c:	b29b      	uxth	r3, r3
 801c57e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c582:	45b9      	cmp	r9, r7
 801c584:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801c588:	f840 3b04 	str.w	r3, [r0], #4
 801c58c:	d2e8      	bcs.n	801c560 <quorem+0xb0>
 801c58e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801c592:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801c596:	b92a      	cbnz	r2, 801c5a4 <quorem+0xf4>
 801c598:	3b04      	subs	r3, #4
 801c59a:	429e      	cmp	r6, r3
 801c59c:	461a      	mov	r2, r3
 801c59e:	d30b      	bcc.n	801c5b8 <quorem+0x108>
 801c5a0:	f8c8 4010 	str.w	r4, [r8, #16]
 801c5a4:	4628      	mov	r0, r5
 801c5a6:	b003      	add	sp, #12
 801c5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c5ac:	6812      	ldr	r2, [r2, #0]
 801c5ae:	3b04      	subs	r3, #4
 801c5b0:	2a00      	cmp	r2, #0
 801c5b2:	d1ca      	bne.n	801c54a <quorem+0x9a>
 801c5b4:	3c01      	subs	r4, #1
 801c5b6:	e7c5      	b.n	801c544 <quorem+0x94>
 801c5b8:	6812      	ldr	r2, [r2, #0]
 801c5ba:	3b04      	subs	r3, #4
 801c5bc:	2a00      	cmp	r2, #0
 801c5be:	d1ef      	bne.n	801c5a0 <quorem+0xf0>
 801c5c0:	3c01      	subs	r4, #1
 801c5c2:	e7ea      	b.n	801c59a <quorem+0xea>
 801c5c4:	2000      	movs	r0, #0
 801c5c6:	e7ee      	b.n	801c5a6 <quorem+0xf6>

0801c5c8 <_dtoa_r>:
 801c5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5cc:	ec57 6b10 	vmov	r6, r7, d0
 801c5d0:	b097      	sub	sp, #92	; 0x5c
 801c5d2:	e9cd 6700 	strd	r6, r7, [sp]
 801c5d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c5d8:	9107      	str	r1, [sp, #28]
 801c5da:	4604      	mov	r4, r0
 801c5dc:	920a      	str	r2, [sp, #40]	; 0x28
 801c5de:	930f      	str	r3, [sp, #60]	; 0x3c
 801c5e0:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801c5e2:	b93e      	cbnz	r6, 801c5f4 <_dtoa_r+0x2c>
 801c5e4:	2010      	movs	r0, #16
 801c5e6:	f7fe ff93 	bl	801b510 <malloc>
 801c5ea:	6260      	str	r0, [r4, #36]	; 0x24
 801c5ec:	6046      	str	r6, [r0, #4]
 801c5ee:	6086      	str	r6, [r0, #8]
 801c5f0:	6006      	str	r6, [r0, #0]
 801c5f2:	60c6      	str	r6, [r0, #12]
 801c5f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c5f6:	6819      	ldr	r1, [r3, #0]
 801c5f8:	b151      	cbz	r1, 801c610 <_dtoa_r+0x48>
 801c5fa:	685a      	ldr	r2, [r3, #4]
 801c5fc:	604a      	str	r2, [r1, #4]
 801c5fe:	2301      	movs	r3, #1
 801c600:	4093      	lsls	r3, r2
 801c602:	608b      	str	r3, [r1, #8]
 801c604:	4620      	mov	r0, r4
 801c606:	f000 fe67 	bl	801d2d8 <_Bfree>
 801c60a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c60c:	2200      	movs	r2, #0
 801c60e:	601a      	str	r2, [r3, #0]
 801c610:	9b01      	ldr	r3, [sp, #4]
 801c612:	2b00      	cmp	r3, #0
 801c614:	bfbf      	itttt	lt
 801c616:	2301      	movlt	r3, #1
 801c618:	602b      	strlt	r3, [r5, #0]
 801c61a:	9b01      	ldrlt	r3, [sp, #4]
 801c61c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801c620:	bfb2      	itee	lt
 801c622:	9301      	strlt	r3, [sp, #4]
 801c624:	2300      	movge	r3, #0
 801c626:	602b      	strge	r3, [r5, #0]
 801c628:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c62c:	4ba8      	ldr	r3, [pc, #672]	; (801c8d0 <_dtoa_r+0x308>)
 801c62e:	ea33 0308 	bics.w	r3, r3, r8
 801c632:	d11b      	bne.n	801c66c <_dtoa_r+0xa4>
 801c634:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c636:	f242 730f 	movw	r3, #9999	; 0x270f
 801c63a:	6013      	str	r3, [r2, #0]
 801c63c:	9b00      	ldr	r3, [sp, #0]
 801c63e:	b923      	cbnz	r3, 801c64a <_dtoa_r+0x82>
 801c640:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801c644:	2800      	cmp	r0, #0
 801c646:	f000 8578 	beq.w	801d13a <_dtoa_r+0xb72>
 801c64a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c64c:	b953      	cbnz	r3, 801c664 <_dtoa_r+0x9c>
 801c64e:	4ba1      	ldr	r3, [pc, #644]	; (801c8d4 <_dtoa_r+0x30c>)
 801c650:	e021      	b.n	801c696 <_dtoa_r+0xce>
 801c652:	4ba1      	ldr	r3, [pc, #644]	; (801c8d8 <_dtoa_r+0x310>)
 801c654:	9302      	str	r3, [sp, #8]
 801c656:	3308      	adds	r3, #8
 801c658:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801c65a:	6013      	str	r3, [r2, #0]
 801c65c:	9802      	ldr	r0, [sp, #8]
 801c65e:	b017      	add	sp, #92	; 0x5c
 801c660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c664:	4b9b      	ldr	r3, [pc, #620]	; (801c8d4 <_dtoa_r+0x30c>)
 801c666:	9302      	str	r3, [sp, #8]
 801c668:	3303      	adds	r3, #3
 801c66a:	e7f5      	b.n	801c658 <_dtoa_r+0x90>
 801c66c:	e9dd 6700 	ldrd	r6, r7, [sp]
 801c670:	2200      	movs	r2, #0
 801c672:	2300      	movs	r3, #0
 801c674:	4630      	mov	r0, r6
 801c676:	4639      	mov	r1, r7
 801c678:	f7e4 fa2a 	bl	8000ad0 <__aeabi_dcmpeq>
 801c67c:	4681      	mov	r9, r0
 801c67e:	b160      	cbz	r0, 801c69a <_dtoa_r+0xd2>
 801c680:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c682:	2301      	movs	r3, #1
 801c684:	6013      	str	r3, [r2, #0]
 801c686:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c688:	2b00      	cmp	r3, #0
 801c68a:	f000 8553 	beq.w	801d134 <_dtoa_r+0xb6c>
 801c68e:	4b93      	ldr	r3, [pc, #588]	; (801c8dc <_dtoa_r+0x314>)
 801c690:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801c692:	6013      	str	r3, [r2, #0]
 801c694:	3b01      	subs	r3, #1
 801c696:	9302      	str	r3, [sp, #8]
 801c698:	e7e0      	b.n	801c65c <_dtoa_r+0x94>
 801c69a:	aa14      	add	r2, sp, #80	; 0x50
 801c69c:	a915      	add	r1, sp, #84	; 0x54
 801c69e:	ec47 6b10 	vmov	d0, r6, r7
 801c6a2:	4620      	mov	r0, r4
 801c6a4:	f001 f865 	bl	801d772 <__d2b>
 801c6a8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801c6ac:	4682      	mov	sl, r0
 801c6ae:	2d00      	cmp	r5, #0
 801c6b0:	d07e      	beq.n	801c7b0 <_dtoa_r+0x1e8>
 801c6b2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801c6b6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 801c6ba:	4630      	mov	r0, r6
 801c6bc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801c6c0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801c6c4:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 801c6c8:	2200      	movs	r2, #0
 801c6ca:	4b85      	ldr	r3, [pc, #532]	; (801c8e0 <_dtoa_r+0x318>)
 801c6cc:	f7e3 fde4 	bl	8000298 <__aeabi_dsub>
 801c6d0:	a379      	add	r3, pc, #484	; (adr r3, 801c8b8 <_dtoa_r+0x2f0>)
 801c6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c6d6:	f7e3 ff93 	bl	8000600 <__aeabi_dmul>
 801c6da:	a379      	add	r3, pc, #484	; (adr r3, 801c8c0 <_dtoa_r+0x2f8>)
 801c6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c6e0:	f7e3 fddc 	bl	800029c <__adddf3>
 801c6e4:	4606      	mov	r6, r0
 801c6e6:	4628      	mov	r0, r5
 801c6e8:	460f      	mov	r7, r1
 801c6ea:	f7e3 ff23 	bl	8000534 <__aeabi_i2d>
 801c6ee:	a376      	add	r3, pc, #472	; (adr r3, 801c8c8 <_dtoa_r+0x300>)
 801c6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c6f4:	f7e3 ff84 	bl	8000600 <__aeabi_dmul>
 801c6f8:	4602      	mov	r2, r0
 801c6fa:	460b      	mov	r3, r1
 801c6fc:	4630      	mov	r0, r6
 801c6fe:	4639      	mov	r1, r7
 801c700:	f7e3 fdcc 	bl	800029c <__adddf3>
 801c704:	4606      	mov	r6, r0
 801c706:	460f      	mov	r7, r1
 801c708:	f7e4 fa2a 	bl	8000b60 <__aeabi_d2iz>
 801c70c:	2200      	movs	r2, #0
 801c70e:	4683      	mov	fp, r0
 801c710:	2300      	movs	r3, #0
 801c712:	4630      	mov	r0, r6
 801c714:	4639      	mov	r1, r7
 801c716:	f7e4 f9e5 	bl	8000ae4 <__aeabi_dcmplt>
 801c71a:	b158      	cbz	r0, 801c734 <_dtoa_r+0x16c>
 801c71c:	4658      	mov	r0, fp
 801c71e:	f7e3 ff09 	bl	8000534 <__aeabi_i2d>
 801c722:	4602      	mov	r2, r0
 801c724:	460b      	mov	r3, r1
 801c726:	4630      	mov	r0, r6
 801c728:	4639      	mov	r1, r7
 801c72a:	f7e4 f9d1 	bl	8000ad0 <__aeabi_dcmpeq>
 801c72e:	b908      	cbnz	r0, 801c734 <_dtoa_r+0x16c>
 801c730:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c734:	f1bb 0f16 	cmp.w	fp, #22
 801c738:	d859      	bhi.n	801c7ee <_dtoa_r+0x226>
 801c73a:	496a      	ldr	r1, [pc, #424]	; (801c8e4 <_dtoa_r+0x31c>)
 801c73c:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 801c740:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c744:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c748:	f7e4 f9ea 	bl	8000b20 <__aeabi_dcmpgt>
 801c74c:	2800      	cmp	r0, #0
 801c74e:	d050      	beq.n	801c7f2 <_dtoa_r+0x22a>
 801c750:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c754:	2300      	movs	r3, #0
 801c756:	930e      	str	r3, [sp, #56]	; 0x38
 801c758:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c75a:	1b5d      	subs	r5, r3, r5
 801c75c:	1e6b      	subs	r3, r5, #1
 801c75e:	9306      	str	r3, [sp, #24]
 801c760:	bf45      	ittet	mi
 801c762:	f1c5 0301 	rsbmi	r3, r5, #1
 801c766:	9305      	strmi	r3, [sp, #20]
 801c768:	2300      	movpl	r3, #0
 801c76a:	2300      	movmi	r3, #0
 801c76c:	bf4c      	ite	mi
 801c76e:	9306      	strmi	r3, [sp, #24]
 801c770:	9305      	strpl	r3, [sp, #20]
 801c772:	f1bb 0f00 	cmp.w	fp, #0
 801c776:	db3e      	blt.n	801c7f6 <_dtoa_r+0x22e>
 801c778:	9b06      	ldr	r3, [sp, #24]
 801c77a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801c77e:	445b      	add	r3, fp
 801c780:	9306      	str	r3, [sp, #24]
 801c782:	2300      	movs	r3, #0
 801c784:	9308      	str	r3, [sp, #32]
 801c786:	9b07      	ldr	r3, [sp, #28]
 801c788:	2b09      	cmp	r3, #9
 801c78a:	f200 80af 	bhi.w	801c8ec <_dtoa_r+0x324>
 801c78e:	2b05      	cmp	r3, #5
 801c790:	bfc4      	itt	gt
 801c792:	3b04      	subgt	r3, #4
 801c794:	9307      	strgt	r3, [sp, #28]
 801c796:	9b07      	ldr	r3, [sp, #28]
 801c798:	f1a3 0302 	sub.w	r3, r3, #2
 801c79c:	bfcc      	ite	gt
 801c79e:	2600      	movgt	r6, #0
 801c7a0:	2601      	movle	r6, #1
 801c7a2:	2b03      	cmp	r3, #3
 801c7a4:	f200 80ae 	bhi.w	801c904 <_dtoa_r+0x33c>
 801c7a8:	e8df f003 	tbb	[pc, r3]
 801c7ac:	772f8482 	.word	0x772f8482
 801c7b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c7b2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801c7b4:	441d      	add	r5, r3
 801c7b6:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801c7ba:	2b20      	cmp	r3, #32
 801c7bc:	dd11      	ble.n	801c7e2 <_dtoa_r+0x21a>
 801c7be:	9a00      	ldr	r2, [sp, #0]
 801c7c0:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801c7c4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 801c7c8:	fa22 f000 	lsr.w	r0, r2, r0
 801c7cc:	fa08 f303 	lsl.w	r3, r8, r3
 801c7d0:	4318      	orrs	r0, r3
 801c7d2:	f7e3 fe9f 	bl	8000514 <__aeabi_ui2d>
 801c7d6:	2301      	movs	r3, #1
 801c7d8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801c7dc:	3d01      	subs	r5, #1
 801c7de:	9312      	str	r3, [sp, #72]	; 0x48
 801c7e0:	e772      	b.n	801c6c8 <_dtoa_r+0x100>
 801c7e2:	f1c3 0020 	rsb	r0, r3, #32
 801c7e6:	9b00      	ldr	r3, [sp, #0]
 801c7e8:	fa03 f000 	lsl.w	r0, r3, r0
 801c7ec:	e7f1      	b.n	801c7d2 <_dtoa_r+0x20a>
 801c7ee:	2301      	movs	r3, #1
 801c7f0:	e7b1      	b.n	801c756 <_dtoa_r+0x18e>
 801c7f2:	900e      	str	r0, [sp, #56]	; 0x38
 801c7f4:	e7b0      	b.n	801c758 <_dtoa_r+0x190>
 801c7f6:	9b05      	ldr	r3, [sp, #20]
 801c7f8:	eba3 030b 	sub.w	r3, r3, fp
 801c7fc:	9305      	str	r3, [sp, #20]
 801c7fe:	f1cb 0300 	rsb	r3, fp, #0
 801c802:	9308      	str	r3, [sp, #32]
 801c804:	2300      	movs	r3, #0
 801c806:	930b      	str	r3, [sp, #44]	; 0x2c
 801c808:	e7bd      	b.n	801c786 <_dtoa_r+0x1be>
 801c80a:	2301      	movs	r3, #1
 801c80c:	9309      	str	r3, [sp, #36]	; 0x24
 801c80e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c810:	2b00      	cmp	r3, #0
 801c812:	dd7a      	ble.n	801c90a <_dtoa_r+0x342>
 801c814:	9304      	str	r3, [sp, #16]
 801c816:	9303      	str	r3, [sp, #12]
 801c818:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801c81a:	2200      	movs	r2, #0
 801c81c:	606a      	str	r2, [r5, #4]
 801c81e:	2104      	movs	r1, #4
 801c820:	f101 0214 	add.w	r2, r1, #20
 801c824:	429a      	cmp	r2, r3
 801c826:	d975      	bls.n	801c914 <_dtoa_r+0x34c>
 801c828:	6869      	ldr	r1, [r5, #4]
 801c82a:	4620      	mov	r0, r4
 801c82c:	f000 fd20 	bl	801d270 <_Balloc>
 801c830:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c832:	6028      	str	r0, [r5, #0]
 801c834:	681b      	ldr	r3, [r3, #0]
 801c836:	9302      	str	r3, [sp, #8]
 801c838:	9b03      	ldr	r3, [sp, #12]
 801c83a:	2b0e      	cmp	r3, #14
 801c83c:	f200 80e5 	bhi.w	801ca0a <_dtoa_r+0x442>
 801c840:	2e00      	cmp	r6, #0
 801c842:	f000 80e2 	beq.w	801ca0a <_dtoa_r+0x442>
 801c846:	ed9d 7b00 	vldr	d7, [sp]
 801c84a:	f1bb 0f00 	cmp.w	fp, #0
 801c84e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801c852:	dd74      	ble.n	801c93e <_dtoa_r+0x376>
 801c854:	4a23      	ldr	r2, [pc, #140]	; (801c8e4 <_dtoa_r+0x31c>)
 801c856:	f00b 030f 	and.w	r3, fp, #15
 801c85a:	ea4f 162b 	mov.w	r6, fp, asr #4
 801c85e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801c862:	06f0      	lsls	r0, r6, #27
 801c864:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c868:	d559      	bpl.n	801c91e <_dtoa_r+0x356>
 801c86a:	4b1f      	ldr	r3, [pc, #124]	; (801c8e8 <_dtoa_r+0x320>)
 801c86c:	ec51 0b17 	vmov	r0, r1, d7
 801c870:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801c874:	f7e3 ffee 	bl	8000854 <__aeabi_ddiv>
 801c878:	e9cd 0100 	strd	r0, r1, [sp]
 801c87c:	f006 060f 	and.w	r6, r6, #15
 801c880:	2503      	movs	r5, #3
 801c882:	4f19      	ldr	r7, [pc, #100]	; (801c8e8 <_dtoa_r+0x320>)
 801c884:	2e00      	cmp	r6, #0
 801c886:	d14c      	bne.n	801c922 <_dtoa_r+0x35a>
 801c888:	4642      	mov	r2, r8
 801c88a:	464b      	mov	r3, r9
 801c88c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c890:	f7e3 ffe0 	bl	8000854 <__aeabi_ddiv>
 801c894:	e9cd 0100 	strd	r0, r1, [sp]
 801c898:	e06a      	b.n	801c970 <_dtoa_r+0x3a8>
 801c89a:	2301      	movs	r3, #1
 801c89c:	9309      	str	r3, [sp, #36]	; 0x24
 801c89e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c8a0:	445b      	add	r3, fp
 801c8a2:	9304      	str	r3, [sp, #16]
 801c8a4:	3301      	adds	r3, #1
 801c8a6:	2b01      	cmp	r3, #1
 801c8a8:	9303      	str	r3, [sp, #12]
 801c8aa:	bfb8      	it	lt
 801c8ac:	2301      	movlt	r3, #1
 801c8ae:	e7b3      	b.n	801c818 <_dtoa_r+0x250>
 801c8b0:	2300      	movs	r3, #0
 801c8b2:	e7ab      	b.n	801c80c <_dtoa_r+0x244>
 801c8b4:	2300      	movs	r3, #0
 801c8b6:	e7f1      	b.n	801c89c <_dtoa_r+0x2d4>
 801c8b8:	636f4361 	.word	0x636f4361
 801c8bc:	3fd287a7 	.word	0x3fd287a7
 801c8c0:	8b60c8b3 	.word	0x8b60c8b3
 801c8c4:	3fc68a28 	.word	0x3fc68a28
 801c8c8:	509f79fb 	.word	0x509f79fb
 801c8cc:	3fd34413 	.word	0x3fd34413
 801c8d0:	7ff00000 	.word	0x7ff00000
 801c8d4:	0801ed89 	.word	0x0801ed89
 801c8d8:	0801ed80 	.word	0x0801ed80
 801c8dc:	0801ed5d 	.word	0x0801ed5d
 801c8e0:	3ff80000 	.word	0x3ff80000
 801c8e4:	0801edb8 	.word	0x0801edb8
 801c8e8:	0801ed90 	.word	0x0801ed90
 801c8ec:	2601      	movs	r6, #1
 801c8ee:	2300      	movs	r3, #0
 801c8f0:	9307      	str	r3, [sp, #28]
 801c8f2:	9609      	str	r6, [sp, #36]	; 0x24
 801c8f4:	f04f 33ff 	mov.w	r3, #4294967295
 801c8f8:	9304      	str	r3, [sp, #16]
 801c8fa:	9303      	str	r3, [sp, #12]
 801c8fc:	2200      	movs	r2, #0
 801c8fe:	2312      	movs	r3, #18
 801c900:	920a      	str	r2, [sp, #40]	; 0x28
 801c902:	e789      	b.n	801c818 <_dtoa_r+0x250>
 801c904:	2301      	movs	r3, #1
 801c906:	9309      	str	r3, [sp, #36]	; 0x24
 801c908:	e7f4      	b.n	801c8f4 <_dtoa_r+0x32c>
 801c90a:	2301      	movs	r3, #1
 801c90c:	9304      	str	r3, [sp, #16]
 801c90e:	9303      	str	r3, [sp, #12]
 801c910:	461a      	mov	r2, r3
 801c912:	e7f5      	b.n	801c900 <_dtoa_r+0x338>
 801c914:	686a      	ldr	r2, [r5, #4]
 801c916:	3201      	adds	r2, #1
 801c918:	606a      	str	r2, [r5, #4]
 801c91a:	0049      	lsls	r1, r1, #1
 801c91c:	e780      	b.n	801c820 <_dtoa_r+0x258>
 801c91e:	2502      	movs	r5, #2
 801c920:	e7af      	b.n	801c882 <_dtoa_r+0x2ba>
 801c922:	07f1      	lsls	r1, r6, #31
 801c924:	d508      	bpl.n	801c938 <_dtoa_r+0x370>
 801c926:	4640      	mov	r0, r8
 801c928:	4649      	mov	r1, r9
 801c92a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c92e:	f7e3 fe67 	bl	8000600 <__aeabi_dmul>
 801c932:	3501      	adds	r5, #1
 801c934:	4680      	mov	r8, r0
 801c936:	4689      	mov	r9, r1
 801c938:	1076      	asrs	r6, r6, #1
 801c93a:	3708      	adds	r7, #8
 801c93c:	e7a2      	b.n	801c884 <_dtoa_r+0x2bc>
 801c93e:	f000 809d 	beq.w	801ca7c <_dtoa_r+0x4b4>
 801c942:	f1cb 0600 	rsb	r6, fp, #0
 801c946:	4b9f      	ldr	r3, [pc, #636]	; (801cbc4 <_dtoa_r+0x5fc>)
 801c948:	4f9f      	ldr	r7, [pc, #636]	; (801cbc8 <_dtoa_r+0x600>)
 801c94a:	f006 020f 	and.w	r2, r6, #15
 801c94e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c952:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c956:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c95a:	f7e3 fe51 	bl	8000600 <__aeabi_dmul>
 801c95e:	e9cd 0100 	strd	r0, r1, [sp]
 801c962:	1136      	asrs	r6, r6, #4
 801c964:	2300      	movs	r3, #0
 801c966:	2502      	movs	r5, #2
 801c968:	2e00      	cmp	r6, #0
 801c96a:	d17c      	bne.n	801ca66 <_dtoa_r+0x49e>
 801c96c:	2b00      	cmp	r3, #0
 801c96e:	d191      	bne.n	801c894 <_dtoa_r+0x2cc>
 801c970:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c972:	2b00      	cmp	r3, #0
 801c974:	f000 8084 	beq.w	801ca80 <_dtoa_r+0x4b8>
 801c978:	e9dd 8900 	ldrd	r8, r9, [sp]
 801c97c:	2200      	movs	r2, #0
 801c97e:	4b93      	ldr	r3, [pc, #588]	; (801cbcc <_dtoa_r+0x604>)
 801c980:	4640      	mov	r0, r8
 801c982:	4649      	mov	r1, r9
 801c984:	f7e4 f8ae 	bl	8000ae4 <__aeabi_dcmplt>
 801c988:	2800      	cmp	r0, #0
 801c98a:	d079      	beq.n	801ca80 <_dtoa_r+0x4b8>
 801c98c:	9b03      	ldr	r3, [sp, #12]
 801c98e:	2b00      	cmp	r3, #0
 801c990:	d076      	beq.n	801ca80 <_dtoa_r+0x4b8>
 801c992:	9b04      	ldr	r3, [sp, #16]
 801c994:	2b00      	cmp	r3, #0
 801c996:	dd34      	ble.n	801ca02 <_dtoa_r+0x43a>
 801c998:	2200      	movs	r2, #0
 801c99a:	4b8d      	ldr	r3, [pc, #564]	; (801cbd0 <_dtoa_r+0x608>)
 801c99c:	4640      	mov	r0, r8
 801c99e:	4649      	mov	r1, r9
 801c9a0:	f7e3 fe2e 	bl	8000600 <__aeabi_dmul>
 801c9a4:	e9cd 0100 	strd	r0, r1, [sp]
 801c9a8:	9e04      	ldr	r6, [sp, #16]
 801c9aa:	f10b 37ff 	add.w	r7, fp, #4294967295
 801c9ae:	3501      	adds	r5, #1
 801c9b0:	4628      	mov	r0, r5
 801c9b2:	f7e3 fdbf 	bl	8000534 <__aeabi_i2d>
 801c9b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c9ba:	f7e3 fe21 	bl	8000600 <__aeabi_dmul>
 801c9be:	2200      	movs	r2, #0
 801c9c0:	4b84      	ldr	r3, [pc, #528]	; (801cbd4 <_dtoa_r+0x60c>)
 801c9c2:	f7e3 fc6b 	bl	800029c <__adddf3>
 801c9c6:	4680      	mov	r8, r0
 801c9c8:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 801c9cc:	2e00      	cmp	r6, #0
 801c9ce:	d15a      	bne.n	801ca86 <_dtoa_r+0x4be>
 801c9d0:	2200      	movs	r2, #0
 801c9d2:	4b81      	ldr	r3, [pc, #516]	; (801cbd8 <_dtoa_r+0x610>)
 801c9d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c9d8:	f7e3 fc5e 	bl	8000298 <__aeabi_dsub>
 801c9dc:	4642      	mov	r2, r8
 801c9de:	464b      	mov	r3, r9
 801c9e0:	e9cd 0100 	strd	r0, r1, [sp]
 801c9e4:	f7e4 f89c 	bl	8000b20 <__aeabi_dcmpgt>
 801c9e8:	2800      	cmp	r0, #0
 801c9ea:	f040 829b 	bne.w	801cf24 <_dtoa_r+0x95c>
 801c9ee:	4642      	mov	r2, r8
 801c9f0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801c9f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c9f8:	f7e4 f874 	bl	8000ae4 <__aeabi_dcmplt>
 801c9fc:	2800      	cmp	r0, #0
 801c9fe:	f040 828f 	bne.w	801cf20 <_dtoa_r+0x958>
 801ca02:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801ca06:	e9cd 2300 	strd	r2, r3, [sp]
 801ca0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ca0c:	2b00      	cmp	r3, #0
 801ca0e:	f2c0 8150 	blt.w	801ccb2 <_dtoa_r+0x6ea>
 801ca12:	f1bb 0f0e 	cmp.w	fp, #14
 801ca16:	f300 814c 	bgt.w	801ccb2 <_dtoa_r+0x6ea>
 801ca1a:	4b6a      	ldr	r3, [pc, #424]	; (801cbc4 <_dtoa_r+0x5fc>)
 801ca1c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801ca20:	e9d3 8900 	ldrd	r8, r9, [r3]
 801ca24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ca26:	2b00      	cmp	r3, #0
 801ca28:	f280 80da 	bge.w	801cbe0 <_dtoa_r+0x618>
 801ca2c:	9b03      	ldr	r3, [sp, #12]
 801ca2e:	2b00      	cmp	r3, #0
 801ca30:	f300 80d6 	bgt.w	801cbe0 <_dtoa_r+0x618>
 801ca34:	f040 8273 	bne.w	801cf1e <_dtoa_r+0x956>
 801ca38:	2200      	movs	r2, #0
 801ca3a:	4b67      	ldr	r3, [pc, #412]	; (801cbd8 <_dtoa_r+0x610>)
 801ca3c:	4640      	mov	r0, r8
 801ca3e:	4649      	mov	r1, r9
 801ca40:	f7e3 fdde 	bl	8000600 <__aeabi_dmul>
 801ca44:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ca48:	f7e4 f860 	bl	8000b0c <__aeabi_dcmpge>
 801ca4c:	9e03      	ldr	r6, [sp, #12]
 801ca4e:	4637      	mov	r7, r6
 801ca50:	2800      	cmp	r0, #0
 801ca52:	f040 824a 	bne.w	801ceea <_dtoa_r+0x922>
 801ca56:	9b02      	ldr	r3, [sp, #8]
 801ca58:	9a02      	ldr	r2, [sp, #8]
 801ca5a:	1c5d      	adds	r5, r3, #1
 801ca5c:	2331      	movs	r3, #49	; 0x31
 801ca5e:	7013      	strb	r3, [r2, #0]
 801ca60:	f10b 0b01 	add.w	fp, fp, #1
 801ca64:	e245      	b.n	801cef2 <_dtoa_r+0x92a>
 801ca66:	07f2      	lsls	r2, r6, #31
 801ca68:	d505      	bpl.n	801ca76 <_dtoa_r+0x4ae>
 801ca6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ca6e:	f7e3 fdc7 	bl	8000600 <__aeabi_dmul>
 801ca72:	3501      	adds	r5, #1
 801ca74:	2301      	movs	r3, #1
 801ca76:	1076      	asrs	r6, r6, #1
 801ca78:	3708      	adds	r7, #8
 801ca7a:	e775      	b.n	801c968 <_dtoa_r+0x3a0>
 801ca7c:	2502      	movs	r5, #2
 801ca7e:	e777      	b.n	801c970 <_dtoa_r+0x3a8>
 801ca80:	465f      	mov	r7, fp
 801ca82:	9e03      	ldr	r6, [sp, #12]
 801ca84:	e794      	b.n	801c9b0 <_dtoa_r+0x3e8>
 801ca86:	9a02      	ldr	r2, [sp, #8]
 801ca88:	4b4e      	ldr	r3, [pc, #312]	; (801cbc4 <_dtoa_r+0x5fc>)
 801ca8a:	4432      	add	r2, r6
 801ca8c:	9213      	str	r2, [sp, #76]	; 0x4c
 801ca8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ca90:	1e71      	subs	r1, r6, #1
 801ca92:	2a00      	cmp	r2, #0
 801ca94:	d048      	beq.n	801cb28 <_dtoa_r+0x560>
 801ca96:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801ca9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca9e:	2000      	movs	r0, #0
 801caa0:	494e      	ldr	r1, [pc, #312]	; (801cbdc <_dtoa_r+0x614>)
 801caa2:	f7e3 fed7 	bl	8000854 <__aeabi_ddiv>
 801caa6:	4642      	mov	r2, r8
 801caa8:	464b      	mov	r3, r9
 801caaa:	f7e3 fbf5 	bl	8000298 <__aeabi_dsub>
 801caae:	9d02      	ldr	r5, [sp, #8]
 801cab0:	4680      	mov	r8, r0
 801cab2:	4689      	mov	r9, r1
 801cab4:	e9dd 0100 	ldrd	r0, r1, [sp]
 801cab8:	f7e4 f852 	bl	8000b60 <__aeabi_d2iz>
 801cabc:	4606      	mov	r6, r0
 801cabe:	f7e3 fd39 	bl	8000534 <__aeabi_i2d>
 801cac2:	4602      	mov	r2, r0
 801cac4:	460b      	mov	r3, r1
 801cac6:	e9dd 0100 	ldrd	r0, r1, [sp]
 801caca:	f7e3 fbe5 	bl	8000298 <__aeabi_dsub>
 801cace:	3630      	adds	r6, #48	; 0x30
 801cad0:	f805 6b01 	strb.w	r6, [r5], #1
 801cad4:	4642      	mov	r2, r8
 801cad6:	464b      	mov	r3, r9
 801cad8:	e9cd 0100 	strd	r0, r1, [sp]
 801cadc:	f7e4 f802 	bl	8000ae4 <__aeabi_dcmplt>
 801cae0:	2800      	cmp	r0, #0
 801cae2:	d165      	bne.n	801cbb0 <_dtoa_r+0x5e8>
 801cae4:	e9dd 2300 	ldrd	r2, r3, [sp]
 801cae8:	2000      	movs	r0, #0
 801caea:	4938      	ldr	r1, [pc, #224]	; (801cbcc <_dtoa_r+0x604>)
 801caec:	f7e3 fbd4 	bl	8000298 <__aeabi_dsub>
 801caf0:	4642      	mov	r2, r8
 801caf2:	464b      	mov	r3, r9
 801caf4:	f7e3 fff6 	bl	8000ae4 <__aeabi_dcmplt>
 801caf8:	2800      	cmp	r0, #0
 801cafa:	f040 80ba 	bne.w	801cc72 <_dtoa_r+0x6aa>
 801cafe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801cb00:	429d      	cmp	r5, r3
 801cb02:	f43f af7e 	beq.w	801ca02 <_dtoa_r+0x43a>
 801cb06:	2200      	movs	r2, #0
 801cb08:	4b31      	ldr	r3, [pc, #196]	; (801cbd0 <_dtoa_r+0x608>)
 801cb0a:	4640      	mov	r0, r8
 801cb0c:	4649      	mov	r1, r9
 801cb0e:	f7e3 fd77 	bl	8000600 <__aeabi_dmul>
 801cb12:	2200      	movs	r2, #0
 801cb14:	4680      	mov	r8, r0
 801cb16:	4689      	mov	r9, r1
 801cb18:	4b2d      	ldr	r3, [pc, #180]	; (801cbd0 <_dtoa_r+0x608>)
 801cb1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801cb1e:	f7e3 fd6f 	bl	8000600 <__aeabi_dmul>
 801cb22:	e9cd 0100 	strd	r0, r1, [sp]
 801cb26:	e7c5      	b.n	801cab4 <_dtoa_r+0x4ec>
 801cb28:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801cb2c:	4642      	mov	r2, r8
 801cb2e:	464b      	mov	r3, r9
 801cb30:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cb34:	f7e3 fd64 	bl	8000600 <__aeabi_dmul>
 801cb38:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801cb3c:	9d02      	ldr	r5, [sp, #8]
 801cb3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801cb42:	f7e4 f80d 	bl	8000b60 <__aeabi_d2iz>
 801cb46:	4606      	mov	r6, r0
 801cb48:	f7e3 fcf4 	bl	8000534 <__aeabi_i2d>
 801cb4c:	3630      	adds	r6, #48	; 0x30
 801cb4e:	4602      	mov	r2, r0
 801cb50:	460b      	mov	r3, r1
 801cb52:	e9dd 0100 	ldrd	r0, r1, [sp]
 801cb56:	f7e3 fb9f 	bl	8000298 <__aeabi_dsub>
 801cb5a:	f805 6b01 	strb.w	r6, [r5], #1
 801cb5e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801cb60:	42ab      	cmp	r3, r5
 801cb62:	4680      	mov	r8, r0
 801cb64:	4689      	mov	r9, r1
 801cb66:	f04f 0200 	mov.w	r2, #0
 801cb6a:	d125      	bne.n	801cbb8 <_dtoa_r+0x5f0>
 801cb6c:	4b1b      	ldr	r3, [pc, #108]	; (801cbdc <_dtoa_r+0x614>)
 801cb6e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801cb72:	f7e3 fb93 	bl	800029c <__adddf3>
 801cb76:	4602      	mov	r2, r0
 801cb78:	460b      	mov	r3, r1
 801cb7a:	4640      	mov	r0, r8
 801cb7c:	4649      	mov	r1, r9
 801cb7e:	f7e3 ffcf 	bl	8000b20 <__aeabi_dcmpgt>
 801cb82:	2800      	cmp	r0, #0
 801cb84:	d175      	bne.n	801cc72 <_dtoa_r+0x6aa>
 801cb86:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801cb8a:	2000      	movs	r0, #0
 801cb8c:	4913      	ldr	r1, [pc, #76]	; (801cbdc <_dtoa_r+0x614>)
 801cb8e:	f7e3 fb83 	bl	8000298 <__aeabi_dsub>
 801cb92:	4602      	mov	r2, r0
 801cb94:	460b      	mov	r3, r1
 801cb96:	4640      	mov	r0, r8
 801cb98:	4649      	mov	r1, r9
 801cb9a:	f7e3 ffa3 	bl	8000ae4 <__aeabi_dcmplt>
 801cb9e:	2800      	cmp	r0, #0
 801cba0:	f43f af2f 	beq.w	801ca02 <_dtoa_r+0x43a>
 801cba4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801cba8:	2b30      	cmp	r3, #48	; 0x30
 801cbaa:	f105 32ff 	add.w	r2, r5, #4294967295
 801cbae:	d001      	beq.n	801cbb4 <_dtoa_r+0x5ec>
 801cbb0:	46bb      	mov	fp, r7
 801cbb2:	e04d      	b.n	801cc50 <_dtoa_r+0x688>
 801cbb4:	4615      	mov	r5, r2
 801cbb6:	e7f5      	b.n	801cba4 <_dtoa_r+0x5dc>
 801cbb8:	4b05      	ldr	r3, [pc, #20]	; (801cbd0 <_dtoa_r+0x608>)
 801cbba:	f7e3 fd21 	bl	8000600 <__aeabi_dmul>
 801cbbe:	e9cd 0100 	strd	r0, r1, [sp]
 801cbc2:	e7bc      	b.n	801cb3e <_dtoa_r+0x576>
 801cbc4:	0801edb8 	.word	0x0801edb8
 801cbc8:	0801ed90 	.word	0x0801ed90
 801cbcc:	3ff00000 	.word	0x3ff00000
 801cbd0:	40240000 	.word	0x40240000
 801cbd4:	401c0000 	.word	0x401c0000
 801cbd8:	40140000 	.word	0x40140000
 801cbdc:	3fe00000 	.word	0x3fe00000
 801cbe0:	e9dd 6700 	ldrd	r6, r7, [sp]
 801cbe4:	9d02      	ldr	r5, [sp, #8]
 801cbe6:	4642      	mov	r2, r8
 801cbe8:	464b      	mov	r3, r9
 801cbea:	4630      	mov	r0, r6
 801cbec:	4639      	mov	r1, r7
 801cbee:	f7e3 fe31 	bl	8000854 <__aeabi_ddiv>
 801cbf2:	f7e3 ffb5 	bl	8000b60 <__aeabi_d2iz>
 801cbf6:	9000      	str	r0, [sp, #0]
 801cbf8:	f7e3 fc9c 	bl	8000534 <__aeabi_i2d>
 801cbfc:	4642      	mov	r2, r8
 801cbfe:	464b      	mov	r3, r9
 801cc00:	f7e3 fcfe 	bl	8000600 <__aeabi_dmul>
 801cc04:	4602      	mov	r2, r0
 801cc06:	460b      	mov	r3, r1
 801cc08:	4630      	mov	r0, r6
 801cc0a:	4639      	mov	r1, r7
 801cc0c:	f7e3 fb44 	bl	8000298 <__aeabi_dsub>
 801cc10:	9e00      	ldr	r6, [sp, #0]
 801cc12:	9f03      	ldr	r7, [sp, #12]
 801cc14:	3630      	adds	r6, #48	; 0x30
 801cc16:	f805 6b01 	strb.w	r6, [r5], #1
 801cc1a:	9e02      	ldr	r6, [sp, #8]
 801cc1c:	1bae      	subs	r6, r5, r6
 801cc1e:	42b7      	cmp	r7, r6
 801cc20:	4602      	mov	r2, r0
 801cc22:	460b      	mov	r3, r1
 801cc24:	d138      	bne.n	801cc98 <_dtoa_r+0x6d0>
 801cc26:	f7e3 fb39 	bl	800029c <__adddf3>
 801cc2a:	4606      	mov	r6, r0
 801cc2c:	460f      	mov	r7, r1
 801cc2e:	4602      	mov	r2, r0
 801cc30:	460b      	mov	r3, r1
 801cc32:	4640      	mov	r0, r8
 801cc34:	4649      	mov	r1, r9
 801cc36:	f7e3 ff55 	bl	8000ae4 <__aeabi_dcmplt>
 801cc3a:	b9c8      	cbnz	r0, 801cc70 <_dtoa_r+0x6a8>
 801cc3c:	4632      	mov	r2, r6
 801cc3e:	463b      	mov	r3, r7
 801cc40:	4640      	mov	r0, r8
 801cc42:	4649      	mov	r1, r9
 801cc44:	f7e3 ff44 	bl	8000ad0 <__aeabi_dcmpeq>
 801cc48:	b110      	cbz	r0, 801cc50 <_dtoa_r+0x688>
 801cc4a:	9b00      	ldr	r3, [sp, #0]
 801cc4c:	07db      	lsls	r3, r3, #31
 801cc4e:	d40f      	bmi.n	801cc70 <_dtoa_r+0x6a8>
 801cc50:	4651      	mov	r1, sl
 801cc52:	4620      	mov	r0, r4
 801cc54:	f000 fb40 	bl	801d2d8 <_Bfree>
 801cc58:	2300      	movs	r3, #0
 801cc5a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cc5c:	702b      	strb	r3, [r5, #0]
 801cc5e:	f10b 0301 	add.w	r3, fp, #1
 801cc62:	6013      	str	r3, [r2, #0]
 801cc64:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801cc66:	2b00      	cmp	r3, #0
 801cc68:	f43f acf8 	beq.w	801c65c <_dtoa_r+0x94>
 801cc6c:	601d      	str	r5, [r3, #0]
 801cc6e:	e4f5      	b.n	801c65c <_dtoa_r+0x94>
 801cc70:	465f      	mov	r7, fp
 801cc72:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801cc76:	2a39      	cmp	r2, #57	; 0x39
 801cc78:	f105 33ff 	add.w	r3, r5, #4294967295
 801cc7c:	d106      	bne.n	801cc8c <_dtoa_r+0x6c4>
 801cc7e:	9a02      	ldr	r2, [sp, #8]
 801cc80:	429a      	cmp	r2, r3
 801cc82:	d107      	bne.n	801cc94 <_dtoa_r+0x6cc>
 801cc84:	2330      	movs	r3, #48	; 0x30
 801cc86:	7013      	strb	r3, [r2, #0]
 801cc88:	3701      	adds	r7, #1
 801cc8a:	4613      	mov	r3, r2
 801cc8c:	781a      	ldrb	r2, [r3, #0]
 801cc8e:	3201      	adds	r2, #1
 801cc90:	701a      	strb	r2, [r3, #0]
 801cc92:	e78d      	b.n	801cbb0 <_dtoa_r+0x5e8>
 801cc94:	461d      	mov	r5, r3
 801cc96:	e7ec      	b.n	801cc72 <_dtoa_r+0x6aa>
 801cc98:	2200      	movs	r2, #0
 801cc9a:	4ba4      	ldr	r3, [pc, #656]	; (801cf2c <_dtoa_r+0x964>)
 801cc9c:	f7e3 fcb0 	bl	8000600 <__aeabi_dmul>
 801cca0:	2200      	movs	r2, #0
 801cca2:	2300      	movs	r3, #0
 801cca4:	4606      	mov	r6, r0
 801cca6:	460f      	mov	r7, r1
 801cca8:	f7e3 ff12 	bl	8000ad0 <__aeabi_dcmpeq>
 801ccac:	2800      	cmp	r0, #0
 801ccae:	d09a      	beq.n	801cbe6 <_dtoa_r+0x61e>
 801ccb0:	e7ce      	b.n	801cc50 <_dtoa_r+0x688>
 801ccb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ccb4:	2a00      	cmp	r2, #0
 801ccb6:	f000 80cd 	beq.w	801ce54 <_dtoa_r+0x88c>
 801ccba:	9a07      	ldr	r2, [sp, #28]
 801ccbc:	2a01      	cmp	r2, #1
 801ccbe:	f300 80af 	bgt.w	801ce20 <_dtoa_r+0x858>
 801ccc2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ccc4:	2a00      	cmp	r2, #0
 801ccc6:	f000 80a7 	beq.w	801ce18 <_dtoa_r+0x850>
 801ccca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801ccce:	9e08      	ldr	r6, [sp, #32]
 801ccd0:	9d05      	ldr	r5, [sp, #20]
 801ccd2:	9a05      	ldr	r2, [sp, #20]
 801ccd4:	441a      	add	r2, r3
 801ccd6:	9205      	str	r2, [sp, #20]
 801ccd8:	9a06      	ldr	r2, [sp, #24]
 801ccda:	2101      	movs	r1, #1
 801ccdc:	441a      	add	r2, r3
 801ccde:	4620      	mov	r0, r4
 801cce0:	9206      	str	r2, [sp, #24]
 801cce2:	f000 fb99 	bl	801d418 <__i2b>
 801cce6:	4607      	mov	r7, r0
 801cce8:	2d00      	cmp	r5, #0
 801ccea:	dd0c      	ble.n	801cd06 <_dtoa_r+0x73e>
 801ccec:	9b06      	ldr	r3, [sp, #24]
 801ccee:	2b00      	cmp	r3, #0
 801ccf0:	dd09      	ble.n	801cd06 <_dtoa_r+0x73e>
 801ccf2:	42ab      	cmp	r3, r5
 801ccf4:	9a05      	ldr	r2, [sp, #20]
 801ccf6:	bfa8      	it	ge
 801ccf8:	462b      	movge	r3, r5
 801ccfa:	1ad2      	subs	r2, r2, r3
 801ccfc:	9205      	str	r2, [sp, #20]
 801ccfe:	9a06      	ldr	r2, [sp, #24]
 801cd00:	1aed      	subs	r5, r5, r3
 801cd02:	1ad3      	subs	r3, r2, r3
 801cd04:	9306      	str	r3, [sp, #24]
 801cd06:	9b08      	ldr	r3, [sp, #32]
 801cd08:	b1f3      	cbz	r3, 801cd48 <_dtoa_r+0x780>
 801cd0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cd0c:	2b00      	cmp	r3, #0
 801cd0e:	f000 80a5 	beq.w	801ce5c <_dtoa_r+0x894>
 801cd12:	2e00      	cmp	r6, #0
 801cd14:	dd10      	ble.n	801cd38 <_dtoa_r+0x770>
 801cd16:	4639      	mov	r1, r7
 801cd18:	4632      	mov	r2, r6
 801cd1a:	4620      	mov	r0, r4
 801cd1c:	f000 fc12 	bl	801d544 <__pow5mult>
 801cd20:	4652      	mov	r2, sl
 801cd22:	4601      	mov	r1, r0
 801cd24:	4607      	mov	r7, r0
 801cd26:	4620      	mov	r0, r4
 801cd28:	f000 fb7f 	bl	801d42a <__multiply>
 801cd2c:	4651      	mov	r1, sl
 801cd2e:	4680      	mov	r8, r0
 801cd30:	4620      	mov	r0, r4
 801cd32:	f000 fad1 	bl	801d2d8 <_Bfree>
 801cd36:	46c2      	mov	sl, r8
 801cd38:	9b08      	ldr	r3, [sp, #32]
 801cd3a:	1b9a      	subs	r2, r3, r6
 801cd3c:	d004      	beq.n	801cd48 <_dtoa_r+0x780>
 801cd3e:	4651      	mov	r1, sl
 801cd40:	4620      	mov	r0, r4
 801cd42:	f000 fbff 	bl	801d544 <__pow5mult>
 801cd46:	4682      	mov	sl, r0
 801cd48:	2101      	movs	r1, #1
 801cd4a:	4620      	mov	r0, r4
 801cd4c:	f000 fb64 	bl	801d418 <__i2b>
 801cd50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cd52:	2b00      	cmp	r3, #0
 801cd54:	4606      	mov	r6, r0
 801cd56:	f340 8083 	ble.w	801ce60 <_dtoa_r+0x898>
 801cd5a:	461a      	mov	r2, r3
 801cd5c:	4601      	mov	r1, r0
 801cd5e:	4620      	mov	r0, r4
 801cd60:	f000 fbf0 	bl	801d544 <__pow5mult>
 801cd64:	9b07      	ldr	r3, [sp, #28]
 801cd66:	2b01      	cmp	r3, #1
 801cd68:	4606      	mov	r6, r0
 801cd6a:	dd7c      	ble.n	801ce66 <_dtoa_r+0x89e>
 801cd6c:	f04f 0800 	mov.w	r8, #0
 801cd70:	6933      	ldr	r3, [r6, #16]
 801cd72:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801cd76:	6918      	ldr	r0, [r3, #16]
 801cd78:	f000 fb00 	bl	801d37c <__hi0bits>
 801cd7c:	f1c0 0020 	rsb	r0, r0, #32
 801cd80:	9b06      	ldr	r3, [sp, #24]
 801cd82:	4418      	add	r0, r3
 801cd84:	f010 001f 	ands.w	r0, r0, #31
 801cd88:	f000 8096 	beq.w	801ceb8 <_dtoa_r+0x8f0>
 801cd8c:	f1c0 0320 	rsb	r3, r0, #32
 801cd90:	2b04      	cmp	r3, #4
 801cd92:	f340 8087 	ble.w	801cea4 <_dtoa_r+0x8dc>
 801cd96:	9b05      	ldr	r3, [sp, #20]
 801cd98:	f1c0 001c 	rsb	r0, r0, #28
 801cd9c:	4403      	add	r3, r0
 801cd9e:	9305      	str	r3, [sp, #20]
 801cda0:	9b06      	ldr	r3, [sp, #24]
 801cda2:	4405      	add	r5, r0
 801cda4:	4403      	add	r3, r0
 801cda6:	9306      	str	r3, [sp, #24]
 801cda8:	9b05      	ldr	r3, [sp, #20]
 801cdaa:	2b00      	cmp	r3, #0
 801cdac:	dd05      	ble.n	801cdba <_dtoa_r+0x7f2>
 801cdae:	4651      	mov	r1, sl
 801cdb0:	461a      	mov	r2, r3
 801cdb2:	4620      	mov	r0, r4
 801cdb4:	f000 fc14 	bl	801d5e0 <__lshift>
 801cdb8:	4682      	mov	sl, r0
 801cdba:	9b06      	ldr	r3, [sp, #24]
 801cdbc:	2b00      	cmp	r3, #0
 801cdbe:	dd05      	ble.n	801cdcc <_dtoa_r+0x804>
 801cdc0:	4631      	mov	r1, r6
 801cdc2:	461a      	mov	r2, r3
 801cdc4:	4620      	mov	r0, r4
 801cdc6:	f000 fc0b 	bl	801d5e0 <__lshift>
 801cdca:	4606      	mov	r6, r0
 801cdcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cdce:	2b00      	cmp	r3, #0
 801cdd0:	d074      	beq.n	801cebc <_dtoa_r+0x8f4>
 801cdd2:	4631      	mov	r1, r6
 801cdd4:	4650      	mov	r0, sl
 801cdd6:	f000 fc54 	bl	801d682 <__mcmp>
 801cdda:	2800      	cmp	r0, #0
 801cddc:	da6e      	bge.n	801cebc <_dtoa_r+0x8f4>
 801cdde:	2300      	movs	r3, #0
 801cde0:	4651      	mov	r1, sl
 801cde2:	220a      	movs	r2, #10
 801cde4:	4620      	mov	r0, r4
 801cde6:	f000 fa8e 	bl	801d306 <__multadd>
 801cdea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cdec:	f10b 3bff 	add.w	fp, fp, #4294967295
 801cdf0:	4682      	mov	sl, r0
 801cdf2:	2b00      	cmp	r3, #0
 801cdf4:	f000 81a8 	beq.w	801d148 <_dtoa_r+0xb80>
 801cdf8:	2300      	movs	r3, #0
 801cdfa:	4639      	mov	r1, r7
 801cdfc:	220a      	movs	r2, #10
 801cdfe:	4620      	mov	r0, r4
 801ce00:	f000 fa81 	bl	801d306 <__multadd>
 801ce04:	9b04      	ldr	r3, [sp, #16]
 801ce06:	2b00      	cmp	r3, #0
 801ce08:	4607      	mov	r7, r0
 801ce0a:	f300 80c8 	bgt.w	801cf9e <_dtoa_r+0x9d6>
 801ce0e:	9b07      	ldr	r3, [sp, #28]
 801ce10:	2b02      	cmp	r3, #2
 801ce12:	f340 80c4 	ble.w	801cf9e <_dtoa_r+0x9d6>
 801ce16:	e059      	b.n	801cecc <_dtoa_r+0x904>
 801ce18:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ce1a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801ce1e:	e756      	b.n	801ccce <_dtoa_r+0x706>
 801ce20:	9b03      	ldr	r3, [sp, #12]
 801ce22:	1e5e      	subs	r6, r3, #1
 801ce24:	9b08      	ldr	r3, [sp, #32]
 801ce26:	42b3      	cmp	r3, r6
 801ce28:	bfbf      	itttt	lt
 801ce2a:	9b08      	ldrlt	r3, [sp, #32]
 801ce2c:	9608      	strlt	r6, [sp, #32]
 801ce2e:	1af2      	sublt	r2, r6, r3
 801ce30:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 801ce32:	bfb6      	itet	lt
 801ce34:	189b      	addlt	r3, r3, r2
 801ce36:	1b9e      	subge	r6, r3, r6
 801ce38:	930b      	strlt	r3, [sp, #44]	; 0x2c
 801ce3a:	9b03      	ldr	r3, [sp, #12]
 801ce3c:	bfb8      	it	lt
 801ce3e:	2600      	movlt	r6, #0
 801ce40:	2b00      	cmp	r3, #0
 801ce42:	bfb9      	ittee	lt
 801ce44:	9b05      	ldrlt	r3, [sp, #20]
 801ce46:	9a03      	ldrlt	r2, [sp, #12]
 801ce48:	9d05      	ldrge	r5, [sp, #20]
 801ce4a:	9b03      	ldrge	r3, [sp, #12]
 801ce4c:	bfbc      	itt	lt
 801ce4e:	1a9d      	sublt	r5, r3, r2
 801ce50:	2300      	movlt	r3, #0
 801ce52:	e73e      	b.n	801ccd2 <_dtoa_r+0x70a>
 801ce54:	9e08      	ldr	r6, [sp, #32]
 801ce56:	9d05      	ldr	r5, [sp, #20]
 801ce58:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801ce5a:	e745      	b.n	801cce8 <_dtoa_r+0x720>
 801ce5c:	9a08      	ldr	r2, [sp, #32]
 801ce5e:	e76e      	b.n	801cd3e <_dtoa_r+0x776>
 801ce60:	9b07      	ldr	r3, [sp, #28]
 801ce62:	2b01      	cmp	r3, #1
 801ce64:	dc19      	bgt.n	801ce9a <_dtoa_r+0x8d2>
 801ce66:	9b00      	ldr	r3, [sp, #0]
 801ce68:	b9bb      	cbnz	r3, 801ce9a <_dtoa_r+0x8d2>
 801ce6a:	9b01      	ldr	r3, [sp, #4]
 801ce6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ce70:	b99b      	cbnz	r3, 801ce9a <_dtoa_r+0x8d2>
 801ce72:	9b01      	ldr	r3, [sp, #4]
 801ce74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ce78:	0d1b      	lsrs	r3, r3, #20
 801ce7a:	051b      	lsls	r3, r3, #20
 801ce7c:	b183      	cbz	r3, 801cea0 <_dtoa_r+0x8d8>
 801ce7e:	9b05      	ldr	r3, [sp, #20]
 801ce80:	3301      	adds	r3, #1
 801ce82:	9305      	str	r3, [sp, #20]
 801ce84:	9b06      	ldr	r3, [sp, #24]
 801ce86:	3301      	adds	r3, #1
 801ce88:	9306      	str	r3, [sp, #24]
 801ce8a:	f04f 0801 	mov.w	r8, #1
 801ce8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ce90:	2b00      	cmp	r3, #0
 801ce92:	f47f af6d 	bne.w	801cd70 <_dtoa_r+0x7a8>
 801ce96:	2001      	movs	r0, #1
 801ce98:	e772      	b.n	801cd80 <_dtoa_r+0x7b8>
 801ce9a:	f04f 0800 	mov.w	r8, #0
 801ce9e:	e7f6      	b.n	801ce8e <_dtoa_r+0x8c6>
 801cea0:	4698      	mov	r8, r3
 801cea2:	e7f4      	b.n	801ce8e <_dtoa_r+0x8c6>
 801cea4:	d080      	beq.n	801cda8 <_dtoa_r+0x7e0>
 801cea6:	9a05      	ldr	r2, [sp, #20]
 801cea8:	331c      	adds	r3, #28
 801ceaa:	441a      	add	r2, r3
 801ceac:	9205      	str	r2, [sp, #20]
 801ceae:	9a06      	ldr	r2, [sp, #24]
 801ceb0:	441a      	add	r2, r3
 801ceb2:	441d      	add	r5, r3
 801ceb4:	4613      	mov	r3, r2
 801ceb6:	e776      	b.n	801cda6 <_dtoa_r+0x7de>
 801ceb8:	4603      	mov	r3, r0
 801ceba:	e7f4      	b.n	801cea6 <_dtoa_r+0x8de>
 801cebc:	9b03      	ldr	r3, [sp, #12]
 801cebe:	2b00      	cmp	r3, #0
 801cec0:	dc36      	bgt.n	801cf30 <_dtoa_r+0x968>
 801cec2:	9b07      	ldr	r3, [sp, #28]
 801cec4:	2b02      	cmp	r3, #2
 801cec6:	dd33      	ble.n	801cf30 <_dtoa_r+0x968>
 801cec8:	9b03      	ldr	r3, [sp, #12]
 801ceca:	9304      	str	r3, [sp, #16]
 801cecc:	9b04      	ldr	r3, [sp, #16]
 801cece:	b963      	cbnz	r3, 801ceea <_dtoa_r+0x922>
 801ced0:	4631      	mov	r1, r6
 801ced2:	2205      	movs	r2, #5
 801ced4:	4620      	mov	r0, r4
 801ced6:	f000 fa16 	bl	801d306 <__multadd>
 801ceda:	4601      	mov	r1, r0
 801cedc:	4606      	mov	r6, r0
 801cede:	4650      	mov	r0, sl
 801cee0:	f000 fbcf 	bl	801d682 <__mcmp>
 801cee4:	2800      	cmp	r0, #0
 801cee6:	f73f adb6 	bgt.w	801ca56 <_dtoa_r+0x48e>
 801ceea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ceec:	9d02      	ldr	r5, [sp, #8]
 801ceee:	ea6f 0b03 	mvn.w	fp, r3
 801cef2:	2300      	movs	r3, #0
 801cef4:	9303      	str	r3, [sp, #12]
 801cef6:	4631      	mov	r1, r6
 801cef8:	4620      	mov	r0, r4
 801cefa:	f000 f9ed 	bl	801d2d8 <_Bfree>
 801cefe:	2f00      	cmp	r7, #0
 801cf00:	f43f aea6 	beq.w	801cc50 <_dtoa_r+0x688>
 801cf04:	9b03      	ldr	r3, [sp, #12]
 801cf06:	b12b      	cbz	r3, 801cf14 <_dtoa_r+0x94c>
 801cf08:	42bb      	cmp	r3, r7
 801cf0a:	d003      	beq.n	801cf14 <_dtoa_r+0x94c>
 801cf0c:	4619      	mov	r1, r3
 801cf0e:	4620      	mov	r0, r4
 801cf10:	f000 f9e2 	bl	801d2d8 <_Bfree>
 801cf14:	4639      	mov	r1, r7
 801cf16:	4620      	mov	r0, r4
 801cf18:	f000 f9de 	bl	801d2d8 <_Bfree>
 801cf1c:	e698      	b.n	801cc50 <_dtoa_r+0x688>
 801cf1e:	2600      	movs	r6, #0
 801cf20:	4637      	mov	r7, r6
 801cf22:	e7e2      	b.n	801ceea <_dtoa_r+0x922>
 801cf24:	46bb      	mov	fp, r7
 801cf26:	4637      	mov	r7, r6
 801cf28:	e595      	b.n	801ca56 <_dtoa_r+0x48e>
 801cf2a:	bf00      	nop
 801cf2c:	40240000 	.word	0x40240000
 801cf30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cf32:	bb93      	cbnz	r3, 801cf9a <_dtoa_r+0x9d2>
 801cf34:	9b03      	ldr	r3, [sp, #12]
 801cf36:	9304      	str	r3, [sp, #16]
 801cf38:	9d02      	ldr	r5, [sp, #8]
 801cf3a:	4631      	mov	r1, r6
 801cf3c:	4650      	mov	r0, sl
 801cf3e:	f7ff fab7 	bl	801c4b0 <quorem>
 801cf42:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801cf46:	f805 9b01 	strb.w	r9, [r5], #1
 801cf4a:	9b02      	ldr	r3, [sp, #8]
 801cf4c:	9a04      	ldr	r2, [sp, #16]
 801cf4e:	1aeb      	subs	r3, r5, r3
 801cf50:	429a      	cmp	r2, r3
 801cf52:	f300 80dc 	bgt.w	801d10e <_dtoa_r+0xb46>
 801cf56:	9b02      	ldr	r3, [sp, #8]
 801cf58:	2a01      	cmp	r2, #1
 801cf5a:	bfac      	ite	ge
 801cf5c:	189b      	addge	r3, r3, r2
 801cf5e:	3301      	addlt	r3, #1
 801cf60:	4698      	mov	r8, r3
 801cf62:	2300      	movs	r3, #0
 801cf64:	9303      	str	r3, [sp, #12]
 801cf66:	4651      	mov	r1, sl
 801cf68:	2201      	movs	r2, #1
 801cf6a:	4620      	mov	r0, r4
 801cf6c:	f000 fb38 	bl	801d5e0 <__lshift>
 801cf70:	4631      	mov	r1, r6
 801cf72:	4682      	mov	sl, r0
 801cf74:	f000 fb85 	bl	801d682 <__mcmp>
 801cf78:	2800      	cmp	r0, #0
 801cf7a:	f300 808d 	bgt.w	801d098 <_dtoa_r+0xad0>
 801cf7e:	d103      	bne.n	801cf88 <_dtoa_r+0x9c0>
 801cf80:	f019 0f01 	tst.w	r9, #1
 801cf84:	f040 8088 	bne.w	801d098 <_dtoa_r+0xad0>
 801cf88:	4645      	mov	r5, r8
 801cf8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801cf8e:	2b30      	cmp	r3, #48	; 0x30
 801cf90:	f105 32ff 	add.w	r2, r5, #4294967295
 801cf94:	d1af      	bne.n	801cef6 <_dtoa_r+0x92e>
 801cf96:	4615      	mov	r5, r2
 801cf98:	e7f7      	b.n	801cf8a <_dtoa_r+0x9c2>
 801cf9a:	9b03      	ldr	r3, [sp, #12]
 801cf9c:	9304      	str	r3, [sp, #16]
 801cf9e:	2d00      	cmp	r5, #0
 801cfa0:	dd05      	ble.n	801cfae <_dtoa_r+0x9e6>
 801cfa2:	4639      	mov	r1, r7
 801cfa4:	462a      	mov	r2, r5
 801cfa6:	4620      	mov	r0, r4
 801cfa8:	f000 fb1a 	bl	801d5e0 <__lshift>
 801cfac:	4607      	mov	r7, r0
 801cfae:	f1b8 0f00 	cmp.w	r8, #0
 801cfb2:	d04c      	beq.n	801d04e <_dtoa_r+0xa86>
 801cfb4:	6879      	ldr	r1, [r7, #4]
 801cfb6:	4620      	mov	r0, r4
 801cfb8:	f000 f95a 	bl	801d270 <_Balloc>
 801cfbc:	693a      	ldr	r2, [r7, #16]
 801cfbe:	3202      	adds	r2, #2
 801cfc0:	4605      	mov	r5, r0
 801cfc2:	0092      	lsls	r2, r2, #2
 801cfc4:	f107 010c 	add.w	r1, r7, #12
 801cfc8:	300c      	adds	r0, #12
 801cfca:	f7fe faa9 	bl	801b520 <memcpy>
 801cfce:	2201      	movs	r2, #1
 801cfd0:	4629      	mov	r1, r5
 801cfd2:	4620      	mov	r0, r4
 801cfd4:	f000 fb04 	bl	801d5e0 <__lshift>
 801cfd8:	9b00      	ldr	r3, [sp, #0]
 801cfda:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801cfde:	9703      	str	r7, [sp, #12]
 801cfe0:	f003 0301 	and.w	r3, r3, #1
 801cfe4:	4607      	mov	r7, r0
 801cfe6:	9305      	str	r3, [sp, #20]
 801cfe8:	4631      	mov	r1, r6
 801cfea:	4650      	mov	r0, sl
 801cfec:	f7ff fa60 	bl	801c4b0 <quorem>
 801cff0:	9903      	ldr	r1, [sp, #12]
 801cff2:	4605      	mov	r5, r0
 801cff4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801cff8:	4650      	mov	r0, sl
 801cffa:	f000 fb42 	bl	801d682 <__mcmp>
 801cffe:	463a      	mov	r2, r7
 801d000:	9000      	str	r0, [sp, #0]
 801d002:	4631      	mov	r1, r6
 801d004:	4620      	mov	r0, r4
 801d006:	f000 fb56 	bl	801d6b6 <__mdiff>
 801d00a:	68c3      	ldr	r3, [r0, #12]
 801d00c:	4602      	mov	r2, r0
 801d00e:	bb03      	cbnz	r3, 801d052 <_dtoa_r+0xa8a>
 801d010:	4601      	mov	r1, r0
 801d012:	9006      	str	r0, [sp, #24]
 801d014:	4650      	mov	r0, sl
 801d016:	f000 fb34 	bl	801d682 <__mcmp>
 801d01a:	9a06      	ldr	r2, [sp, #24]
 801d01c:	4603      	mov	r3, r0
 801d01e:	4611      	mov	r1, r2
 801d020:	4620      	mov	r0, r4
 801d022:	9306      	str	r3, [sp, #24]
 801d024:	f000 f958 	bl	801d2d8 <_Bfree>
 801d028:	9b06      	ldr	r3, [sp, #24]
 801d02a:	b9a3      	cbnz	r3, 801d056 <_dtoa_r+0xa8e>
 801d02c:	9a07      	ldr	r2, [sp, #28]
 801d02e:	b992      	cbnz	r2, 801d056 <_dtoa_r+0xa8e>
 801d030:	9a05      	ldr	r2, [sp, #20]
 801d032:	b982      	cbnz	r2, 801d056 <_dtoa_r+0xa8e>
 801d034:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801d038:	d029      	beq.n	801d08e <_dtoa_r+0xac6>
 801d03a:	9b00      	ldr	r3, [sp, #0]
 801d03c:	2b00      	cmp	r3, #0
 801d03e:	dd01      	ble.n	801d044 <_dtoa_r+0xa7c>
 801d040:	f105 0931 	add.w	r9, r5, #49	; 0x31
 801d044:	f108 0501 	add.w	r5, r8, #1
 801d048:	f888 9000 	strb.w	r9, [r8]
 801d04c:	e753      	b.n	801cef6 <_dtoa_r+0x92e>
 801d04e:	4638      	mov	r0, r7
 801d050:	e7c2      	b.n	801cfd8 <_dtoa_r+0xa10>
 801d052:	2301      	movs	r3, #1
 801d054:	e7e3      	b.n	801d01e <_dtoa_r+0xa56>
 801d056:	9a00      	ldr	r2, [sp, #0]
 801d058:	2a00      	cmp	r2, #0
 801d05a:	db04      	blt.n	801d066 <_dtoa_r+0xa9e>
 801d05c:	d125      	bne.n	801d0aa <_dtoa_r+0xae2>
 801d05e:	9a07      	ldr	r2, [sp, #28]
 801d060:	bb1a      	cbnz	r2, 801d0aa <_dtoa_r+0xae2>
 801d062:	9a05      	ldr	r2, [sp, #20]
 801d064:	bb0a      	cbnz	r2, 801d0aa <_dtoa_r+0xae2>
 801d066:	2b00      	cmp	r3, #0
 801d068:	ddec      	ble.n	801d044 <_dtoa_r+0xa7c>
 801d06a:	4651      	mov	r1, sl
 801d06c:	2201      	movs	r2, #1
 801d06e:	4620      	mov	r0, r4
 801d070:	f000 fab6 	bl	801d5e0 <__lshift>
 801d074:	4631      	mov	r1, r6
 801d076:	4682      	mov	sl, r0
 801d078:	f000 fb03 	bl	801d682 <__mcmp>
 801d07c:	2800      	cmp	r0, #0
 801d07e:	dc03      	bgt.n	801d088 <_dtoa_r+0xac0>
 801d080:	d1e0      	bne.n	801d044 <_dtoa_r+0xa7c>
 801d082:	f019 0f01 	tst.w	r9, #1
 801d086:	d0dd      	beq.n	801d044 <_dtoa_r+0xa7c>
 801d088:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801d08c:	d1d8      	bne.n	801d040 <_dtoa_r+0xa78>
 801d08e:	2339      	movs	r3, #57	; 0x39
 801d090:	f888 3000 	strb.w	r3, [r8]
 801d094:	f108 0801 	add.w	r8, r8, #1
 801d098:	4645      	mov	r5, r8
 801d09a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801d09e:	2b39      	cmp	r3, #57	; 0x39
 801d0a0:	f105 32ff 	add.w	r2, r5, #4294967295
 801d0a4:	d03b      	beq.n	801d11e <_dtoa_r+0xb56>
 801d0a6:	3301      	adds	r3, #1
 801d0a8:	e040      	b.n	801d12c <_dtoa_r+0xb64>
 801d0aa:	2b00      	cmp	r3, #0
 801d0ac:	f108 0501 	add.w	r5, r8, #1
 801d0b0:	dd05      	ble.n	801d0be <_dtoa_r+0xaf6>
 801d0b2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801d0b6:	d0ea      	beq.n	801d08e <_dtoa_r+0xac6>
 801d0b8:	f109 0901 	add.w	r9, r9, #1
 801d0bc:	e7c4      	b.n	801d048 <_dtoa_r+0xa80>
 801d0be:	9b02      	ldr	r3, [sp, #8]
 801d0c0:	9a04      	ldr	r2, [sp, #16]
 801d0c2:	f805 9c01 	strb.w	r9, [r5, #-1]
 801d0c6:	1aeb      	subs	r3, r5, r3
 801d0c8:	4293      	cmp	r3, r2
 801d0ca:	46a8      	mov	r8, r5
 801d0cc:	f43f af4b 	beq.w	801cf66 <_dtoa_r+0x99e>
 801d0d0:	4651      	mov	r1, sl
 801d0d2:	2300      	movs	r3, #0
 801d0d4:	220a      	movs	r2, #10
 801d0d6:	4620      	mov	r0, r4
 801d0d8:	f000 f915 	bl	801d306 <__multadd>
 801d0dc:	9b03      	ldr	r3, [sp, #12]
 801d0de:	9903      	ldr	r1, [sp, #12]
 801d0e0:	42bb      	cmp	r3, r7
 801d0e2:	4682      	mov	sl, r0
 801d0e4:	f04f 0300 	mov.w	r3, #0
 801d0e8:	f04f 020a 	mov.w	r2, #10
 801d0ec:	4620      	mov	r0, r4
 801d0ee:	d104      	bne.n	801d0fa <_dtoa_r+0xb32>
 801d0f0:	f000 f909 	bl	801d306 <__multadd>
 801d0f4:	9003      	str	r0, [sp, #12]
 801d0f6:	4607      	mov	r7, r0
 801d0f8:	e776      	b.n	801cfe8 <_dtoa_r+0xa20>
 801d0fa:	f000 f904 	bl	801d306 <__multadd>
 801d0fe:	2300      	movs	r3, #0
 801d100:	9003      	str	r0, [sp, #12]
 801d102:	220a      	movs	r2, #10
 801d104:	4639      	mov	r1, r7
 801d106:	4620      	mov	r0, r4
 801d108:	f000 f8fd 	bl	801d306 <__multadd>
 801d10c:	e7f3      	b.n	801d0f6 <_dtoa_r+0xb2e>
 801d10e:	4651      	mov	r1, sl
 801d110:	2300      	movs	r3, #0
 801d112:	220a      	movs	r2, #10
 801d114:	4620      	mov	r0, r4
 801d116:	f000 f8f6 	bl	801d306 <__multadd>
 801d11a:	4682      	mov	sl, r0
 801d11c:	e70d      	b.n	801cf3a <_dtoa_r+0x972>
 801d11e:	9b02      	ldr	r3, [sp, #8]
 801d120:	4293      	cmp	r3, r2
 801d122:	d105      	bne.n	801d130 <_dtoa_r+0xb68>
 801d124:	9a02      	ldr	r2, [sp, #8]
 801d126:	f10b 0b01 	add.w	fp, fp, #1
 801d12a:	2331      	movs	r3, #49	; 0x31
 801d12c:	7013      	strb	r3, [r2, #0]
 801d12e:	e6e2      	b.n	801cef6 <_dtoa_r+0x92e>
 801d130:	4615      	mov	r5, r2
 801d132:	e7b2      	b.n	801d09a <_dtoa_r+0xad2>
 801d134:	4b09      	ldr	r3, [pc, #36]	; (801d15c <_dtoa_r+0xb94>)
 801d136:	f7ff baae 	b.w	801c696 <_dtoa_r+0xce>
 801d13a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d13c:	2b00      	cmp	r3, #0
 801d13e:	f47f aa88 	bne.w	801c652 <_dtoa_r+0x8a>
 801d142:	4b07      	ldr	r3, [pc, #28]	; (801d160 <_dtoa_r+0xb98>)
 801d144:	f7ff baa7 	b.w	801c696 <_dtoa_r+0xce>
 801d148:	9b04      	ldr	r3, [sp, #16]
 801d14a:	2b00      	cmp	r3, #0
 801d14c:	f73f aef4 	bgt.w	801cf38 <_dtoa_r+0x970>
 801d150:	9b07      	ldr	r3, [sp, #28]
 801d152:	2b02      	cmp	r3, #2
 801d154:	f77f aef0 	ble.w	801cf38 <_dtoa_r+0x970>
 801d158:	e6b8      	b.n	801cecc <_dtoa_r+0x904>
 801d15a:	bf00      	nop
 801d15c:	0801ed5c 	.word	0x0801ed5c
 801d160:	0801ed80 	.word	0x0801ed80

0801d164 <_localeconv_r>:
 801d164:	4b04      	ldr	r3, [pc, #16]	; (801d178 <_localeconv_r+0x14>)
 801d166:	681b      	ldr	r3, [r3, #0]
 801d168:	6a18      	ldr	r0, [r3, #32]
 801d16a:	4b04      	ldr	r3, [pc, #16]	; (801d17c <_localeconv_r+0x18>)
 801d16c:	2800      	cmp	r0, #0
 801d16e:	bf08      	it	eq
 801d170:	4618      	moveq	r0, r3
 801d172:	30f0      	adds	r0, #240	; 0xf0
 801d174:	4770      	bx	lr
 801d176:	bf00      	nop
 801d178:	20001480 	.word	0x20001480
 801d17c:	200014e4 	.word	0x200014e4

0801d180 <_lseek_r>:
 801d180:	b538      	push	{r3, r4, r5, lr}
 801d182:	4c07      	ldr	r4, [pc, #28]	; (801d1a0 <_lseek_r+0x20>)
 801d184:	4605      	mov	r5, r0
 801d186:	4608      	mov	r0, r1
 801d188:	4611      	mov	r1, r2
 801d18a:	2200      	movs	r2, #0
 801d18c:	6022      	str	r2, [r4, #0]
 801d18e:	461a      	mov	r2, r3
 801d190:	f7ef fab6 	bl	800c700 <_lseek>
 801d194:	1c43      	adds	r3, r0, #1
 801d196:	d102      	bne.n	801d19e <_lseek_r+0x1e>
 801d198:	6823      	ldr	r3, [r4, #0]
 801d19a:	b103      	cbz	r3, 801d19e <_lseek_r+0x1e>
 801d19c:	602b      	str	r3, [r5, #0]
 801d19e:	bd38      	pop	{r3, r4, r5, pc}
 801d1a0:	200038cc 	.word	0x200038cc

0801d1a4 <__swhatbuf_r>:
 801d1a4:	b570      	push	{r4, r5, r6, lr}
 801d1a6:	460e      	mov	r6, r1
 801d1a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d1ac:	2900      	cmp	r1, #0
 801d1ae:	b090      	sub	sp, #64	; 0x40
 801d1b0:	4614      	mov	r4, r2
 801d1b2:	461d      	mov	r5, r3
 801d1b4:	da07      	bge.n	801d1c6 <__swhatbuf_r+0x22>
 801d1b6:	2300      	movs	r3, #0
 801d1b8:	602b      	str	r3, [r5, #0]
 801d1ba:	89b3      	ldrh	r3, [r6, #12]
 801d1bc:	061a      	lsls	r2, r3, #24
 801d1be:	d410      	bmi.n	801d1e2 <__swhatbuf_r+0x3e>
 801d1c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d1c4:	e00e      	b.n	801d1e4 <__swhatbuf_r+0x40>
 801d1c6:	aa01      	add	r2, sp, #4
 801d1c8:	f000 fdd2 	bl	801dd70 <_fstat_r>
 801d1cc:	2800      	cmp	r0, #0
 801d1ce:	dbf2      	blt.n	801d1b6 <__swhatbuf_r+0x12>
 801d1d0:	9a02      	ldr	r2, [sp, #8]
 801d1d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801d1d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801d1da:	425a      	negs	r2, r3
 801d1dc:	415a      	adcs	r2, r3
 801d1de:	602a      	str	r2, [r5, #0]
 801d1e0:	e7ee      	b.n	801d1c0 <__swhatbuf_r+0x1c>
 801d1e2:	2340      	movs	r3, #64	; 0x40
 801d1e4:	2000      	movs	r0, #0
 801d1e6:	6023      	str	r3, [r4, #0]
 801d1e8:	b010      	add	sp, #64	; 0x40
 801d1ea:	bd70      	pop	{r4, r5, r6, pc}

0801d1ec <__smakebuf_r>:
 801d1ec:	898b      	ldrh	r3, [r1, #12]
 801d1ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d1f0:	079d      	lsls	r5, r3, #30
 801d1f2:	4606      	mov	r6, r0
 801d1f4:	460c      	mov	r4, r1
 801d1f6:	d507      	bpl.n	801d208 <__smakebuf_r+0x1c>
 801d1f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d1fc:	6023      	str	r3, [r4, #0]
 801d1fe:	6123      	str	r3, [r4, #16]
 801d200:	2301      	movs	r3, #1
 801d202:	6163      	str	r3, [r4, #20]
 801d204:	b002      	add	sp, #8
 801d206:	bd70      	pop	{r4, r5, r6, pc}
 801d208:	ab01      	add	r3, sp, #4
 801d20a:	466a      	mov	r2, sp
 801d20c:	f7ff ffca 	bl	801d1a4 <__swhatbuf_r>
 801d210:	9900      	ldr	r1, [sp, #0]
 801d212:	4605      	mov	r5, r0
 801d214:	4630      	mov	r0, r6
 801d216:	f7fe f9e5 	bl	801b5e4 <_malloc_r>
 801d21a:	b948      	cbnz	r0, 801d230 <__smakebuf_r+0x44>
 801d21c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d220:	059a      	lsls	r2, r3, #22
 801d222:	d4ef      	bmi.n	801d204 <__smakebuf_r+0x18>
 801d224:	f023 0303 	bic.w	r3, r3, #3
 801d228:	f043 0302 	orr.w	r3, r3, #2
 801d22c:	81a3      	strh	r3, [r4, #12]
 801d22e:	e7e3      	b.n	801d1f8 <__smakebuf_r+0xc>
 801d230:	4b0d      	ldr	r3, [pc, #52]	; (801d268 <__smakebuf_r+0x7c>)
 801d232:	62b3      	str	r3, [r6, #40]	; 0x28
 801d234:	89a3      	ldrh	r3, [r4, #12]
 801d236:	6020      	str	r0, [r4, #0]
 801d238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d23c:	81a3      	strh	r3, [r4, #12]
 801d23e:	9b00      	ldr	r3, [sp, #0]
 801d240:	6163      	str	r3, [r4, #20]
 801d242:	9b01      	ldr	r3, [sp, #4]
 801d244:	6120      	str	r0, [r4, #16]
 801d246:	b15b      	cbz	r3, 801d260 <__smakebuf_r+0x74>
 801d248:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d24c:	4630      	mov	r0, r6
 801d24e:	f000 fda1 	bl	801dd94 <_isatty_r>
 801d252:	b128      	cbz	r0, 801d260 <__smakebuf_r+0x74>
 801d254:	89a3      	ldrh	r3, [r4, #12]
 801d256:	f023 0303 	bic.w	r3, r3, #3
 801d25a:	f043 0301 	orr.w	r3, r3, #1
 801d25e:	81a3      	strh	r3, [r4, #12]
 801d260:	89a3      	ldrh	r3, [r4, #12]
 801d262:	431d      	orrs	r5, r3
 801d264:	81a5      	strh	r5, [r4, #12]
 801d266:	e7cd      	b.n	801d204 <__smakebuf_r+0x18>
 801d268:	0801b335 	.word	0x0801b335

0801d26c <__malloc_lock>:
 801d26c:	4770      	bx	lr

0801d26e <__malloc_unlock>:
 801d26e:	4770      	bx	lr

0801d270 <_Balloc>:
 801d270:	b570      	push	{r4, r5, r6, lr}
 801d272:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801d274:	4604      	mov	r4, r0
 801d276:	460e      	mov	r6, r1
 801d278:	b93d      	cbnz	r5, 801d28a <_Balloc+0x1a>
 801d27a:	2010      	movs	r0, #16
 801d27c:	f7fe f948 	bl	801b510 <malloc>
 801d280:	6260      	str	r0, [r4, #36]	; 0x24
 801d282:	6045      	str	r5, [r0, #4]
 801d284:	6085      	str	r5, [r0, #8]
 801d286:	6005      	str	r5, [r0, #0]
 801d288:	60c5      	str	r5, [r0, #12]
 801d28a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801d28c:	68eb      	ldr	r3, [r5, #12]
 801d28e:	b183      	cbz	r3, 801d2b2 <_Balloc+0x42>
 801d290:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d292:	68db      	ldr	r3, [r3, #12]
 801d294:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801d298:	b9b8      	cbnz	r0, 801d2ca <_Balloc+0x5a>
 801d29a:	2101      	movs	r1, #1
 801d29c:	fa01 f506 	lsl.w	r5, r1, r6
 801d2a0:	1d6a      	adds	r2, r5, #5
 801d2a2:	0092      	lsls	r2, r2, #2
 801d2a4:	4620      	mov	r0, r4
 801d2a6:	f000 fab3 	bl	801d810 <_calloc_r>
 801d2aa:	b160      	cbz	r0, 801d2c6 <_Balloc+0x56>
 801d2ac:	6046      	str	r6, [r0, #4]
 801d2ae:	6085      	str	r5, [r0, #8]
 801d2b0:	e00e      	b.n	801d2d0 <_Balloc+0x60>
 801d2b2:	2221      	movs	r2, #33	; 0x21
 801d2b4:	2104      	movs	r1, #4
 801d2b6:	4620      	mov	r0, r4
 801d2b8:	f000 faaa 	bl	801d810 <_calloc_r>
 801d2bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d2be:	60e8      	str	r0, [r5, #12]
 801d2c0:	68db      	ldr	r3, [r3, #12]
 801d2c2:	2b00      	cmp	r3, #0
 801d2c4:	d1e4      	bne.n	801d290 <_Balloc+0x20>
 801d2c6:	2000      	movs	r0, #0
 801d2c8:	bd70      	pop	{r4, r5, r6, pc}
 801d2ca:	6802      	ldr	r2, [r0, #0]
 801d2cc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801d2d0:	2300      	movs	r3, #0
 801d2d2:	6103      	str	r3, [r0, #16]
 801d2d4:	60c3      	str	r3, [r0, #12]
 801d2d6:	bd70      	pop	{r4, r5, r6, pc}

0801d2d8 <_Bfree>:
 801d2d8:	b570      	push	{r4, r5, r6, lr}
 801d2da:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801d2dc:	4606      	mov	r6, r0
 801d2de:	460d      	mov	r5, r1
 801d2e0:	b93c      	cbnz	r4, 801d2f2 <_Bfree+0x1a>
 801d2e2:	2010      	movs	r0, #16
 801d2e4:	f7fe f914 	bl	801b510 <malloc>
 801d2e8:	6270      	str	r0, [r6, #36]	; 0x24
 801d2ea:	6044      	str	r4, [r0, #4]
 801d2ec:	6084      	str	r4, [r0, #8]
 801d2ee:	6004      	str	r4, [r0, #0]
 801d2f0:	60c4      	str	r4, [r0, #12]
 801d2f2:	b13d      	cbz	r5, 801d304 <_Bfree+0x2c>
 801d2f4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801d2f6:	686a      	ldr	r2, [r5, #4]
 801d2f8:	68db      	ldr	r3, [r3, #12]
 801d2fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d2fe:	6029      	str	r1, [r5, #0]
 801d300:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801d304:	bd70      	pop	{r4, r5, r6, pc}

0801d306 <__multadd>:
 801d306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d30a:	690d      	ldr	r5, [r1, #16]
 801d30c:	461f      	mov	r7, r3
 801d30e:	4606      	mov	r6, r0
 801d310:	460c      	mov	r4, r1
 801d312:	f101 0e14 	add.w	lr, r1, #20
 801d316:	2300      	movs	r3, #0
 801d318:	f8de 0000 	ldr.w	r0, [lr]
 801d31c:	b281      	uxth	r1, r0
 801d31e:	fb02 7101 	mla	r1, r2, r1, r7
 801d322:	0c0f      	lsrs	r7, r1, #16
 801d324:	0c00      	lsrs	r0, r0, #16
 801d326:	fb02 7000 	mla	r0, r2, r0, r7
 801d32a:	b289      	uxth	r1, r1
 801d32c:	3301      	adds	r3, #1
 801d32e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801d332:	429d      	cmp	r5, r3
 801d334:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801d338:	f84e 1b04 	str.w	r1, [lr], #4
 801d33c:	dcec      	bgt.n	801d318 <__multadd+0x12>
 801d33e:	b1d7      	cbz	r7, 801d376 <__multadd+0x70>
 801d340:	68a3      	ldr	r3, [r4, #8]
 801d342:	429d      	cmp	r5, r3
 801d344:	db12      	blt.n	801d36c <__multadd+0x66>
 801d346:	6861      	ldr	r1, [r4, #4]
 801d348:	4630      	mov	r0, r6
 801d34a:	3101      	adds	r1, #1
 801d34c:	f7ff ff90 	bl	801d270 <_Balloc>
 801d350:	6922      	ldr	r2, [r4, #16]
 801d352:	3202      	adds	r2, #2
 801d354:	f104 010c 	add.w	r1, r4, #12
 801d358:	4680      	mov	r8, r0
 801d35a:	0092      	lsls	r2, r2, #2
 801d35c:	300c      	adds	r0, #12
 801d35e:	f7fe f8df 	bl	801b520 <memcpy>
 801d362:	4621      	mov	r1, r4
 801d364:	4630      	mov	r0, r6
 801d366:	f7ff ffb7 	bl	801d2d8 <_Bfree>
 801d36a:	4644      	mov	r4, r8
 801d36c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801d370:	3501      	adds	r5, #1
 801d372:	615f      	str	r7, [r3, #20]
 801d374:	6125      	str	r5, [r4, #16]
 801d376:	4620      	mov	r0, r4
 801d378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d37c <__hi0bits>:
 801d37c:	0c02      	lsrs	r2, r0, #16
 801d37e:	0412      	lsls	r2, r2, #16
 801d380:	4603      	mov	r3, r0
 801d382:	b9b2      	cbnz	r2, 801d3b2 <__hi0bits+0x36>
 801d384:	0403      	lsls	r3, r0, #16
 801d386:	2010      	movs	r0, #16
 801d388:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801d38c:	bf04      	itt	eq
 801d38e:	021b      	lsleq	r3, r3, #8
 801d390:	3008      	addeq	r0, #8
 801d392:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801d396:	bf04      	itt	eq
 801d398:	011b      	lsleq	r3, r3, #4
 801d39a:	3004      	addeq	r0, #4
 801d39c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801d3a0:	bf04      	itt	eq
 801d3a2:	009b      	lsleq	r3, r3, #2
 801d3a4:	3002      	addeq	r0, #2
 801d3a6:	2b00      	cmp	r3, #0
 801d3a8:	db06      	blt.n	801d3b8 <__hi0bits+0x3c>
 801d3aa:	005b      	lsls	r3, r3, #1
 801d3ac:	d503      	bpl.n	801d3b6 <__hi0bits+0x3a>
 801d3ae:	3001      	adds	r0, #1
 801d3b0:	4770      	bx	lr
 801d3b2:	2000      	movs	r0, #0
 801d3b4:	e7e8      	b.n	801d388 <__hi0bits+0xc>
 801d3b6:	2020      	movs	r0, #32
 801d3b8:	4770      	bx	lr

0801d3ba <__lo0bits>:
 801d3ba:	6803      	ldr	r3, [r0, #0]
 801d3bc:	f013 0207 	ands.w	r2, r3, #7
 801d3c0:	4601      	mov	r1, r0
 801d3c2:	d00b      	beq.n	801d3dc <__lo0bits+0x22>
 801d3c4:	07da      	lsls	r2, r3, #31
 801d3c6:	d423      	bmi.n	801d410 <__lo0bits+0x56>
 801d3c8:	0798      	lsls	r0, r3, #30
 801d3ca:	bf49      	itett	mi
 801d3cc:	085b      	lsrmi	r3, r3, #1
 801d3ce:	089b      	lsrpl	r3, r3, #2
 801d3d0:	2001      	movmi	r0, #1
 801d3d2:	600b      	strmi	r3, [r1, #0]
 801d3d4:	bf5c      	itt	pl
 801d3d6:	600b      	strpl	r3, [r1, #0]
 801d3d8:	2002      	movpl	r0, #2
 801d3da:	4770      	bx	lr
 801d3dc:	b298      	uxth	r0, r3
 801d3de:	b9a8      	cbnz	r0, 801d40c <__lo0bits+0x52>
 801d3e0:	0c1b      	lsrs	r3, r3, #16
 801d3e2:	2010      	movs	r0, #16
 801d3e4:	f013 0fff 	tst.w	r3, #255	; 0xff
 801d3e8:	bf04      	itt	eq
 801d3ea:	0a1b      	lsreq	r3, r3, #8
 801d3ec:	3008      	addeq	r0, #8
 801d3ee:	071a      	lsls	r2, r3, #28
 801d3f0:	bf04      	itt	eq
 801d3f2:	091b      	lsreq	r3, r3, #4
 801d3f4:	3004      	addeq	r0, #4
 801d3f6:	079a      	lsls	r2, r3, #30
 801d3f8:	bf04      	itt	eq
 801d3fa:	089b      	lsreq	r3, r3, #2
 801d3fc:	3002      	addeq	r0, #2
 801d3fe:	07da      	lsls	r2, r3, #31
 801d400:	d402      	bmi.n	801d408 <__lo0bits+0x4e>
 801d402:	085b      	lsrs	r3, r3, #1
 801d404:	d006      	beq.n	801d414 <__lo0bits+0x5a>
 801d406:	3001      	adds	r0, #1
 801d408:	600b      	str	r3, [r1, #0]
 801d40a:	4770      	bx	lr
 801d40c:	4610      	mov	r0, r2
 801d40e:	e7e9      	b.n	801d3e4 <__lo0bits+0x2a>
 801d410:	2000      	movs	r0, #0
 801d412:	4770      	bx	lr
 801d414:	2020      	movs	r0, #32
 801d416:	4770      	bx	lr

0801d418 <__i2b>:
 801d418:	b510      	push	{r4, lr}
 801d41a:	460c      	mov	r4, r1
 801d41c:	2101      	movs	r1, #1
 801d41e:	f7ff ff27 	bl	801d270 <_Balloc>
 801d422:	2201      	movs	r2, #1
 801d424:	6144      	str	r4, [r0, #20]
 801d426:	6102      	str	r2, [r0, #16]
 801d428:	bd10      	pop	{r4, pc}

0801d42a <__multiply>:
 801d42a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d42e:	4614      	mov	r4, r2
 801d430:	690a      	ldr	r2, [r1, #16]
 801d432:	6923      	ldr	r3, [r4, #16]
 801d434:	429a      	cmp	r2, r3
 801d436:	bfb8      	it	lt
 801d438:	460b      	movlt	r3, r1
 801d43a:	4689      	mov	r9, r1
 801d43c:	bfbc      	itt	lt
 801d43e:	46a1      	movlt	r9, r4
 801d440:	461c      	movlt	r4, r3
 801d442:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801d446:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801d44a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801d44e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801d452:	eb07 060a 	add.w	r6, r7, sl
 801d456:	429e      	cmp	r6, r3
 801d458:	bfc8      	it	gt
 801d45a:	3101      	addgt	r1, #1
 801d45c:	f7ff ff08 	bl	801d270 <_Balloc>
 801d460:	f100 0514 	add.w	r5, r0, #20
 801d464:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801d468:	462b      	mov	r3, r5
 801d46a:	2200      	movs	r2, #0
 801d46c:	4543      	cmp	r3, r8
 801d46e:	d316      	bcc.n	801d49e <__multiply+0x74>
 801d470:	f104 0214 	add.w	r2, r4, #20
 801d474:	f109 0114 	add.w	r1, r9, #20
 801d478:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 801d47c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801d480:	9301      	str	r3, [sp, #4]
 801d482:	9c01      	ldr	r4, [sp, #4]
 801d484:	4294      	cmp	r4, r2
 801d486:	4613      	mov	r3, r2
 801d488:	d80c      	bhi.n	801d4a4 <__multiply+0x7a>
 801d48a:	2e00      	cmp	r6, #0
 801d48c:	dd03      	ble.n	801d496 <__multiply+0x6c>
 801d48e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801d492:	2b00      	cmp	r3, #0
 801d494:	d054      	beq.n	801d540 <__multiply+0x116>
 801d496:	6106      	str	r6, [r0, #16]
 801d498:	b003      	add	sp, #12
 801d49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d49e:	f843 2b04 	str.w	r2, [r3], #4
 801d4a2:	e7e3      	b.n	801d46c <__multiply+0x42>
 801d4a4:	f8b3 a000 	ldrh.w	sl, [r3]
 801d4a8:	3204      	adds	r2, #4
 801d4aa:	f1ba 0f00 	cmp.w	sl, #0
 801d4ae:	d020      	beq.n	801d4f2 <__multiply+0xc8>
 801d4b0:	46ae      	mov	lr, r5
 801d4b2:	4689      	mov	r9, r1
 801d4b4:	f04f 0c00 	mov.w	ip, #0
 801d4b8:	f859 4b04 	ldr.w	r4, [r9], #4
 801d4bc:	f8be b000 	ldrh.w	fp, [lr]
 801d4c0:	b2a3      	uxth	r3, r4
 801d4c2:	fb0a b303 	mla	r3, sl, r3, fp
 801d4c6:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 801d4ca:	f8de 4000 	ldr.w	r4, [lr]
 801d4ce:	4463      	add	r3, ip
 801d4d0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 801d4d4:	fb0a c40b 	mla	r4, sl, fp, ip
 801d4d8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801d4dc:	b29b      	uxth	r3, r3
 801d4de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801d4e2:	454f      	cmp	r7, r9
 801d4e4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 801d4e8:	f84e 3b04 	str.w	r3, [lr], #4
 801d4ec:	d8e4      	bhi.n	801d4b8 <__multiply+0x8e>
 801d4ee:	f8ce c000 	str.w	ip, [lr]
 801d4f2:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 801d4f6:	f1b9 0f00 	cmp.w	r9, #0
 801d4fa:	d01f      	beq.n	801d53c <__multiply+0x112>
 801d4fc:	682b      	ldr	r3, [r5, #0]
 801d4fe:	46ae      	mov	lr, r5
 801d500:	468c      	mov	ip, r1
 801d502:	f04f 0a00 	mov.w	sl, #0
 801d506:	f8bc 4000 	ldrh.w	r4, [ip]
 801d50a:	f8be b002 	ldrh.w	fp, [lr, #2]
 801d50e:	fb09 b404 	mla	r4, r9, r4, fp
 801d512:	44a2      	add	sl, r4
 801d514:	b29b      	uxth	r3, r3
 801d516:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 801d51a:	f84e 3b04 	str.w	r3, [lr], #4
 801d51e:	f85c 3b04 	ldr.w	r3, [ip], #4
 801d522:	f8be 4000 	ldrh.w	r4, [lr]
 801d526:	0c1b      	lsrs	r3, r3, #16
 801d528:	fb09 4303 	mla	r3, r9, r3, r4
 801d52c:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 801d530:	4567      	cmp	r7, ip
 801d532:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801d536:	d8e6      	bhi.n	801d506 <__multiply+0xdc>
 801d538:	f8ce 3000 	str.w	r3, [lr]
 801d53c:	3504      	adds	r5, #4
 801d53e:	e7a0      	b.n	801d482 <__multiply+0x58>
 801d540:	3e01      	subs	r6, #1
 801d542:	e7a2      	b.n	801d48a <__multiply+0x60>

0801d544 <__pow5mult>:
 801d544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d548:	4615      	mov	r5, r2
 801d54a:	f012 0203 	ands.w	r2, r2, #3
 801d54e:	4606      	mov	r6, r0
 801d550:	460f      	mov	r7, r1
 801d552:	d007      	beq.n	801d564 <__pow5mult+0x20>
 801d554:	3a01      	subs	r2, #1
 801d556:	4c21      	ldr	r4, [pc, #132]	; (801d5dc <__pow5mult+0x98>)
 801d558:	2300      	movs	r3, #0
 801d55a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d55e:	f7ff fed2 	bl	801d306 <__multadd>
 801d562:	4607      	mov	r7, r0
 801d564:	10ad      	asrs	r5, r5, #2
 801d566:	d035      	beq.n	801d5d4 <__pow5mult+0x90>
 801d568:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801d56a:	b93c      	cbnz	r4, 801d57c <__pow5mult+0x38>
 801d56c:	2010      	movs	r0, #16
 801d56e:	f7fd ffcf 	bl	801b510 <malloc>
 801d572:	6270      	str	r0, [r6, #36]	; 0x24
 801d574:	6044      	str	r4, [r0, #4]
 801d576:	6084      	str	r4, [r0, #8]
 801d578:	6004      	str	r4, [r0, #0]
 801d57a:	60c4      	str	r4, [r0, #12]
 801d57c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801d580:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d584:	b94c      	cbnz	r4, 801d59a <__pow5mult+0x56>
 801d586:	f240 2171 	movw	r1, #625	; 0x271
 801d58a:	4630      	mov	r0, r6
 801d58c:	f7ff ff44 	bl	801d418 <__i2b>
 801d590:	2300      	movs	r3, #0
 801d592:	f8c8 0008 	str.w	r0, [r8, #8]
 801d596:	4604      	mov	r4, r0
 801d598:	6003      	str	r3, [r0, #0]
 801d59a:	f04f 0800 	mov.w	r8, #0
 801d59e:	07eb      	lsls	r3, r5, #31
 801d5a0:	d50a      	bpl.n	801d5b8 <__pow5mult+0x74>
 801d5a2:	4639      	mov	r1, r7
 801d5a4:	4622      	mov	r2, r4
 801d5a6:	4630      	mov	r0, r6
 801d5a8:	f7ff ff3f 	bl	801d42a <__multiply>
 801d5ac:	4639      	mov	r1, r7
 801d5ae:	4681      	mov	r9, r0
 801d5b0:	4630      	mov	r0, r6
 801d5b2:	f7ff fe91 	bl	801d2d8 <_Bfree>
 801d5b6:	464f      	mov	r7, r9
 801d5b8:	106d      	asrs	r5, r5, #1
 801d5ba:	d00b      	beq.n	801d5d4 <__pow5mult+0x90>
 801d5bc:	6820      	ldr	r0, [r4, #0]
 801d5be:	b938      	cbnz	r0, 801d5d0 <__pow5mult+0x8c>
 801d5c0:	4622      	mov	r2, r4
 801d5c2:	4621      	mov	r1, r4
 801d5c4:	4630      	mov	r0, r6
 801d5c6:	f7ff ff30 	bl	801d42a <__multiply>
 801d5ca:	6020      	str	r0, [r4, #0]
 801d5cc:	f8c0 8000 	str.w	r8, [r0]
 801d5d0:	4604      	mov	r4, r0
 801d5d2:	e7e4      	b.n	801d59e <__pow5mult+0x5a>
 801d5d4:	4638      	mov	r0, r7
 801d5d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d5da:	bf00      	nop
 801d5dc:	0801ee80 	.word	0x0801ee80

0801d5e0 <__lshift>:
 801d5e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d5e4:	460c      	mov	r4, r1
 801d5e6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d5ea:	6923      	ldr	r3, [r4, #16]
 801d5ec:	6849      	ldr	r1, [r1, #4]
 801d5ee:	eb0a 0903 	add.w	r9, sl, r3
 801d5f2:	68a3      	ldr	r3, [r4, #8]
 801d5f4:	4607      	mov	r7, r0
 801d5f6:	4616      	mov	r6, r2
 801d5f8:	f109 0501 	add.w	r5, r9, #1
 801d5fc:	42ab      	cmp	r3, r5
 801d5fe:	db31      	blt.n	801d664 <__lshift+0x84>
 801d600:	4638      	mov	r0, r7
 801d602:	f7ff fe35 	bl	801d270 <_Balloc>
 801d606:	2200      	movs	r2, #0
 801d608:	4680      	mov	r8, r0
 801d60a:	f100 0314 	add.w	r3, r0, #20
 801d60e:	4611      	mov	r1, r2
 801d610:	4552      	cmp	r2, sl
 801d612:	db2a      	blt.n	801d66a <__lshift+0x8a>
 801d614:	6920      	ldr	r0, [r4, #16]
 801d616:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d61a:	f104 0114 	add.w	r1, r4, #20
 801d61e:	f016 021f 	ands.w	r2, r6, #31
 801d622:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801d626:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 801d62a:	d022      	beq.n	801d672 <__lshift+0x92>
 801d62c:	f1c2 0c20 	rsb	ip, r2, #32
 801d630:	2000      	movs	r0, #0
 801d632:	680e      	ldr	r6, [r1, #0]
 801d634:	4096      	lsls	r6, r2
 801d636:	4330      	orrs	r0, r6
 801d638:	f843 0b04 	str.w	r0, [r3], #4
 801d63c:	f851 0b04 	ldr.w	r0, [r1], #4
 801d640:	458e      	cmp	lr, r1
 801d642:	fa20 f00c 	lsr.w	r0, r0, ip
 801d646:	d8f4      	bhi.n	801d632 <__lshift+0x52>
 801d648:	6018      	str	r0, [r3, #0]
 801d64a:	b108      	cbz	r0, 801d650 <__lshift+0x70>
 801d64c:	f109 0502 	add.w	r5, r9, #2
 801d650:	3d01      	subs	r5, #1
 801d652:	4638      	mov	r0, r7
 801d654:	f8c8 5010 	str.w	r5, [r8, #16]
 801d658:	4621      	mov	r1, r4
 801d65a:	f7ff fe3d 	bl	801d2d8 <_Bfree>
 801d65e:	4640      	mov	r0, r8
 801d660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d664:	3101      	adds	r1, #1
 801d666:	005b      	lsls	r3, r3, #1
 801d668:	e7c8      	b.n	801d5fc <__lshift+0x1c>
 801d66a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801d66e:	3201      	adds	r2, #1
 801d670:	e7ce      	b.n	801d610 <__lshift+0x30>
 801d672:	3b04      	subs	r3, #4
 801d674:	f851 2b04 	ldr.w	r2, [r1], #4
 801d678:	f843 2f04 	str.w	r2, [r3, #4]!
 801d67c:	458e      	cmp	lr, r1
 801d67e:	d8f9      	bhi.n	801d674 <__lshift+0x94>
 801d680:	e7e6      	b.n	801d650 <__lshift+0x70>

0801d682 <__mcmp>:
 801d682:	6903      	ldr	r3, [r0, #16]
 801d684:	690a      	ldr	r2, [r1, #16]
 801d686:	1a9b      	subs	r3, r3, r2
 801d688:	b530      	push	{r4, r5, lr}
 801d68a:	d10c      	bne.n	801d6a6 <__mcmp+0x24>
 801d68c:	0092      	lsls	r2, r2, #2
 801d68e:	3014      	adds	r0, #20
 801d690:	3114      	adds	r1, #20
 801d692:	1884      	adds	r4, r0, r2
 801d694:	4411      	add	r1, r2
 801d696:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801d69a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801d69e:	4295      	cmp	r5, r2
 801d6a0:	d003      	beq.n	801d6aa <__mcmp+0x28>
 801d6a2:	d305      	bcc.n	801d6b0 <__mcmp+0x2e>
 801d6a4:	2301      	movs	r3, #1
 801d6a6:	4618      	mov	r0, r3
 801d6a8:	bd30      	pop	{r4, r5, pc}
 801d6aa:	42a0      	cmp	r0, r4
 801d6ac:	d3f3      	bcc.n	801d696 <__mcmp+0x14>
 801d6ae:	e7fa      	b.n	801d6a6 <__mcmp+0x24>
 801d6b0:	f04f 33ff 	mov.w	r3, #4294967295
 801d6b4:	e7f7      	b.n	801d6a6 <__mcmp+0x24>

0801d6b6 <__mdiff>:
 801d6b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d6ba:	460d      	mov	r5, r1
 801d6bc:	4607      	mov	r7, r0
 801d6be:	4611      	mov	r1, r2
 801d6c0:	4628      	mov	r0, r5
 801d6c2:	4614      	mov	r4, r2
 801d6c4:	f7ff ffdd 	bl	801d682 <__mcmp>
 801d6c8:	1e06      	subs	r6, r0, #0
 801d6ca:	d108      	bne.n	801d6de <__mdiff+0x28>
 801d6cc:	4631      	mov	r1, r6
 801d6ce:	4638      	mov	r0, r7
 801d6d0:	f7ff fdce 	bl	801d270 <_Balloc>
 801d6d4:	2301      	movs	r3, #1
 801d6d6:	6103      	str	r3, [r0, #16]
 801d6d8:	6146      	str	r6, [r0, #20]
 801d6da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d6de:	bfa4      	itt	ge
 801d6e0:	4623      	movge	r3, r4
 801d6e2:	462c      	movge	r4, r5
 801d6e4:	4638      	mov	r0, r7
 801d6e6:	6861      	ldr	r1, [r4, #4]
 801d6e8:	bfa6      	itte	ge
 801d6ea:	461d      	movge	r5, r3
 801d6ec:	2600      	movge	r6, #0
 801d6ee:	2601      	movlt	r6, #1
 801d6f0:	f7ff fdbe 	bl	801d270 <_Balloc>
 801d6f4:	692b      	ldr	r3, [r5, #16]
 801d6f6:	60c6      	str	r6, [r0, #12]
 801d6f8:	6926      	ldr	r6, [r4, #16]
 801d6fa:	f105 0914 	add.w	r9, r5, #20
 801d6fe:	f104 0214 	add.w	r2, r4, #20
 801d702:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801d706:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801d70a:	f100 0514 	add.w	r5, r0, #20
 801d70e:	f04f 0c00 	mov.w	ip, #0
 801d712:	f852 ab04 	ldr.w	sl, [r2], #4
 801d716:	f859 4b04 	ldr.w	r4, [r9], #4
 801d71a:	fa1c f18a 	uxtah	r1, ip, sl
 801d71e:	b2a3      	uxth	r3, r4
 801d720:	1ac9      	subs	r1, r1, r3
 801d722:	0c23      	lsrs	r3, r4, #16
 801d724:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801d728:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801d72c:	b289      	uxth	r1, r1
 801d72e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 801d732:	45c8      	cmp	r8, r9
 801d734:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801d738:	4696      	mov	lr, r2
 801d73a:	f845 3b04 	str.w	r3, [r5], #4
 801d73e:	d8e8      	bhi.n	801d712 <__mdiff+0x5c>
 801d740:	45be      	cmp	lr, r7
 801d742:	d305      	bcc.n	801d750 <__mdiff+0x9a>
 801d744:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801d748:	b18b      	cbz	r3, 801d76e <__mdiff+0xb8>
 801d74a:	6106      	str	r6, [r0, #16]
 801d74c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d750:	f85e 1b04 	ldr.w	r1, [lr], #4
 801d754:	fa1c f381 	uxtah	r3, ip, r1
 801d758:	141a      	asrs	r2, r3, #16
 801d75a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801d75e:	b29b      	uxth	r3, r3
 801d760:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d764:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801d768:	f845 3b04 	str.w	r3, [r5], #4
 801d76c:	e7e8      	b.n	801d740 <__mdiff+0x8a>
 801d76e:	3e01      	subs	r6, #1
 801d770:	e7e8      	b.n	801d744 <__mdiff+0x8e>

0801d772 <__d2b>:
 801d772:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d776:	460e      	mov	r6, r1
 801d778:	2101      	movs	r1, #1
 801d77a:	ec59 8b10 	vmov	r8, r9, d0
 801d77e:	4615      	mov	r5, r2
 801d780:	f7ff fd76 	bl	801d270 <_Balloc>
 801d784:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801d788:	4607      	mov	r7, r0
 801d78a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d78e:	bb34      	cbnz	r4, 801d7de <__d2b+0x6c>
 801d790:	9301      	str	r3, [sp, #4]
 801d792:	f1b8 0f00 	cmp.w	r8, #0
 801d796:	d027      	beq.n	801d7e8 <__d2b+0x76>
 801d798:	a802      	add	r0, sp, #8
 801d79a:	f840 8d08 	str.w	r8, [r0, #-8]!
 801d79e:	f7ff fe0c 	bl	801d3ba <__lo0bits>
 801d7a2:	9900      	ldr	r1, [sp, #0]
 801d7a4:	b1f0      	cbz	r0, 801d7e4 <__d2b+0x72>
 801d7a6:	9a01      	ldr	r2, [sp, #4]
 801d7a8:	f1c0 0320 	rsb	r3, r0, #32
 801d7ac:	fa02 f303 	lsl.w	r3, r2, r3
 801d7b0:	430b      	orrs	r3, r1
 801d7b2:	40c2      	lsrs	r2, r0
 801d7b4:	617b      	str	r3, [r7, #20]
 801d7b6:	9201      	str	r2, [sp, #4]
 801d7b8:	9b01      	ldr	r3, [sp, #4]
 801d7ba:	61bb      	str	r3, [r7, #24]
 801d7bc:	2b00      	cmp	r3, #0
 801d7be:	bf14      	ite	ne
 801d7c0:	2102      	movne	r1, #2
 801d7c2:	2101      	moveq	r1, #1
 801d7c4:	6139      	str	r1, [r7, #16]
 801d7c6:	b1c4      	cbz	r4, 801d7fa <__d2b+0x88>
 801d7c8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801d7cc:	4404      	add	r4, r0
 801d7ce:	6034      	str	r4, [r6, #0]
 801d7d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801d7d4:	6028      	str	r0, [r5, #0]
 801d7d6:	4638      	mov	r0, r7
 801d7d8:	b003      	add	sp, #12
 801d7da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d7de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d7e2:	e7d5      	b.n	801d790 <__d2b+0x1e>
 801d7e4:	6179      	str	r1, [r7, #20]
 801d7e6:	e7e7      	b.n	801d7b8 <__d2b+0x46>
 801d7e8:	a801      	add	r0, sp, #4
 801d7ea:	f7ff fde6 	bl	801d3ba <__lo0bits>
 801d7ee:	9b01      	ldr	r3, [sp, #4]
 801d7f0:	617b      	str	r3, [r7, #20]
 801d7f2:	2101      	movs	r1, #1
 801d7f4:	6139      	str	r1, [r7, #16]
 801d7f6:	3020      	adds	r0, #32
 801d7f8:	e7e5      	b.n	801d7c6 <__d2b+0x54>
 801d7fa:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801d7fe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801d802:	6030      	str	r0, [r6, #0]
 801d804:	6918      	ldr	r0, [r3, #16]
 801d806:	f7ff fdb9 	bl	801d37c <__hi0bits>
 801d80a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801d80e:	e7e1      	b.n	801d7d4 <__d2b+0x62>

0801d810 <_calloc_r>:
 801d810:	b538      	push	{r3, r4, r5, lr}
 801d812:	fb02 f401 	mul.w	r4, r2, r1
 801d816:	4621      	mov	r1, r4
 801d818:	f7fd fee4 	bl	801b5e4 <_malloc_r>
 801d81c:	4605      	mov	r5, r0
 801d81e:	b118      	cbz	r0, 801d828 <_calloc_r+0x18>
 801d820:	4622      	mov	r2, r4
 801d822:	2100      	movs	r1, #0
 801d824:	f7fd fe87 	bl	801b536 <memset>
 801d828:	4628      	mov	r0, r5
 801d82a:	bd38      	pop	{r3, r4, r5, pc}

0801d82c <__ssputs_r>:
 801d82c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d830:	688e      	ldr	r6, [r1, #8]
 801d832:	429e      	cmp	r6, r3
 801d834:	4682      	mov	sl, r0
 801d836:	460c      	mov	r4, r1
 801d838:	4691      	mov	r9, r2
 801d83a:	4698      	mov	r8, r3
 801d83c:	d835      	bhi.n	801d8aa <__ssputs_r+0x7e>
 801d83e:	898a      	ldrh	r2, [r1, #12]
 801d840:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801d844:	d031      	beq.n	801d8aa <__ssputs_r+0x7e>
 801d846:	6825      	ldr	r5, [r4, #0]
 801d848:	6909      	ldr	r1, [r1, #16]
 801d84a:	1a6f      	subs	r7, r5, r1
 801d84c:	6965      	ldr	r5, [r4, #20]
 801d84e:	2302      	movs	r3, #2
 801d850:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d854:	fb95 f5f3 	sdiv	r5, r5, r3
 801d858:	f108 0301 	add.w	r3, r8, #1
 801d85c:	443b      	add	r3, r7
 801d85e:	429d      	cmp	r5, r3
 801d860:	bf38      	it	cc
 801d862:	461d      	movcc	r5, r3
 801d864:	0553      	lsls	r3, r2, #21
 801d866:	d531      	bpl.n	801d8cc <__ssputs_r+0xa0>
 801d868:	4629      	mov	r1, r5
 801d86a:	f7fd febb 	bl	801b5e4 <_malloc_r>
 801d86e:	4606      	mov	r6, r0
 801d870:	b950      	cbnz	r0, 801d888 <__ssputs_r+0x5c>
 801d872:	230c      	movs	r3, #12
 801d874:	f8ca 3000 	str.w	r3, [sl]
 801d878:	89a3      	ldrh	r3, [r4, #12]
 801d87a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d87e:	81a3      	strh	r3, [r4, #12]
 801d880:	f04f 30ff 	mov.w	r0, #4294967295
 801d884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d888:	463a      	mov	r2, r7
 801d88a:	6921      	ldr	r1, [r4, #16]
 801d88c:	f7fd fe48 	bl	801b520 <memcpy>
 801d890:	89a3      	ldrh	r3, [r4, #12]
 801d892:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801d896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d89a:	81a3      	strh	r3, [r4, #12]
 801d89c:	6126      	str	r6, [r4, #16]
 801d89e:	6165      	str	r5, [r4, #20]
 801d8a0:	443e      	add	r6, r7
 801d8a2:	1bed      	subs	r5, r5, r7
 801d8a4:	6026      	str	r6, [r4, #0]
 801d8a6:	60a5      	str	r5, [r4, #8]
 801d8a8:	4646      	mov	r6, r8
 801d8aa:	4546      	cmp	r6, r8
 801d8ac:	bf28      	it	cs
 801d8ae:	4646      	movcs	r6, r8
 801d8b0:	4632      	mov	r2, r6
 801d8b2:	4649      	mov	r1, r9
 801d8b4:	6820      	ldr	r0, [r4, #0]
 801d8b6:	f000 fa8f 	bl	801ddd8 <memmove>
 801d8ba:	68a3      	ldr	r3, [r4, #8]
 801d8bc:	1b9b      	subs	r3, r3, r6
 801d8be:	60a3      	str	r3, [r4, #8]
 801d8c0:	6823      	ldr	r3, [r4, #0]
 801d8c2:	441e      	add	r6, r3
 801d8c4:	6026      	str	r6, [r4, #0]
 801d8c6:	2000      	movs	r0, #0
 801d8c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d8cc:	462a      	mov	r2, r5
 801d8ce:	f000 fa9d 	bl	801de0c <_realloc_r>
 801d8d2:	4606      	mov	r6, r0
 801d8d4:	2800      	cmp	r0, #0
 801d8d6:	d1e1      	bne.n	801d89c <__ssputs_r+0x70>
 801d8d8:	6921      	ldr	r1, [r4, #16]
 801d8da:	4650      	mov	r0, sl
 801d8dc:	f7fd fe34 	bl	801b548 <_free_r>
 801d8e0:	e7c7      	b.n	801d872 <__ssputs_r+0x46>
	...

0801d8e4 <_svfiprintf_r>:
 801d8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8e8:	b09d      	sub	sp, #116	; 0x74
 801d8ea:	4680      	mov	r8, r0
 801d8ec:	9303      	str	r3, [sp, #12]
 801d8ee:	898b      	ldrh	r3, [r1, #12]
 801d8f0:	061c      	lsls	r4, r3, #24
 801d8f2:	460d      	mov	r5, r1
 801d8f4:	4616      	mov	r6, r2
 801d8f6:	d50f      	bpl.n	801d918 <_svfiprintf_r+0x34>
 801d8f8:	690b      	ldr	r3, [r1, #16]
 801d8fa:	b96b      	cbnz	r3, 801d918 <_svfiprintf_r+0x34>
 801d8fc:	2140      	movs	r1, #64	; 0x40
 801d8fe:	f7fd fe71 	bl	801b5e4 <_malloc_r>
 801d902:	6028      	str	r0, [r5, #0]
 801d904:	6128      	str	r0, [r5, #16]
 801d906:	b928      	cbnz	r0, 801d914 <_svfiprintf_r+0x30>
 801d908:	230c      	movs	r3, #12
 801d90a:	f8c8 3000 	str.w	r3, [r8]
 801d90e:	f04f 30ff 	mov.w	r0, #4294967295
 801d912:	e0c5      	b.n	801daa0 <_svfiprintf_r+0x1bc>
 801d914:	2340      	movs	r3, #64	; 0x40
 801d916:	616b      	str	r3, [r5, #20]
 801d918:	2300      	movs	r3, #0
 801d91a:	9309      	str	r3, [sp, #36]	; 0x24
 801d91c:	2320      	movs	r3, #32
 801d91e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d922:	2330      	movs	r3, #48	; 0x30
 801d924:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d928:	f04f 0b01 	mov.w	fp, #1
 801d92c:	4637      	mov	r7, r6
 801d92e:	463c      	mov	r4, r7
 801d930:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d934:	2b00      	cmp	r3, #0
 801d936:	d13c      	bne.n	801d9b2 <_svfiprintf_r+0xce>
 801d938:	ebb7 0a06 	subs.w	sl, r7, r6
 801d93c:	d00b      	beq.n	801d956 <_svfiprintf_r+0x72>
 801d93e:	4653      	mov	r3, sl
 801d940:	4632      	mov	r2, r6
 801d942:	4629      	mov	r1, r5
 801d944:	4640      	mov	r0, r8
 801d946:	f7ff ff71 	bl	801d82c <__ssputs_r>
 801d94a:	3001      	adds	r0, #1
 801d94c:	f000 80a3 	beq.w	801da96 <_svfiprintf_r+0x1b2>
 801d950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d952:	4453      	add	r3, sl
 801d954:	9309      	str	r3, [sp, #36]	; 0x24
 801d956:	783b      	ldrb	r3, [r7, #0]
 801d958:	2b00      	cmp	r3, #0
 801d95a:	f000 809c 	beq.w	801da96 <_svfiprintf_r+0x1b2>
 801d95e:	2300      	movs	r3, #0
 801d960:	f04f 32ff 	mov.w	r2, #4294967295
 801d964:	9304      	str	r3, [sp, #16]
 801d966:	9307      	str	r3, [sp, #28]
 801d968:	9205      	str	r2, [sp, #20]
 801d96a:	9306      	str	r3, [sp, #24]
 801d96c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d970:	931a      	str	r3, [sp, #104]	; 0x68
 801d972:	2205      	movs	r2, #5
 801d974:	7821      	ldrb	r1, [r4, #0]
 801d976:	4850      	ldr	r0, [pc, #320]	; (801dab8 <_svfiprintf_r+0x1d4>)
 801d978:	f7e2 fc3a 	bl	80001f0 <memchr>
 801d97c:	1c67      	adds	r7, r4, #1
 801d97e:	9b04      	ldr	r3, [sp, #16]
 801d980:	b9d8      	cbnz	r0, 801d9ba <_svfiprintf_r+0xd6>
 801d982:	06d9      	lsls	r1, r3, #27
 801d984:	bf44      	itt	mi
 801d986:	2220      	movmi	r2, #32
 801d988:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801d98c:	071a      	lsls	r2, r3, #28
 801d98e:	bf44      	itt	mi
 801d990:	222b      	movmi	r2, #43	; 0x2b
 801d992:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801d996:	7822      	ldrb	r2, [r4, #0]
 801d998:	2a2a      	cmp	r2, #42	; 0x2a
 801d99a:	d016      	beq.n	801d9ca <_svfiprintf_r+0xe6>
 801d99c:	9a07      	ldr	r2, [sp, #28]
 801d99e:	2100      	movs	r1, #0
 801d9a0:	200a      	movs	r0, #10
 801d9a2:	4627      	mov	r7, r4
 801d9a4:	3401      	adds	r4, #1
 801d9a6:	783b      	ldrb	r3, [r7, #0]
 801d9a8:	3b30      	subs	r3, #48	; 0x30
 801d9aa:	2b09      	cmp	r3, #9
 801d9ac:	d951      	bls.n	801da52 <_svfiprintf_r+0x16e>
 801d9ae:	b1c9      	cbz	r1, 801d9e4 <_svfiprintf_r+0x100>
 801d9b0:	e011      	b.n	801d9d6 <_svfiprintf_r+0xf2>
 801d9b2:	2b25      	cmp	r3, #37	; 0x25
 801d9b4:	d0c0      	beq.n	801d938 <_svfiprintf_r+0x54>
 801d9b6:	4627      	mov	r7, r4
 801d9b8:	e7b9      	b.n	801d92e <_svfiprintf_r+0x4a>
 801d9ba:	4a3f      	ldr	r2, [pc, #252]	; (801dab8 <_svfiprintf_r+0x1d4>)
 801d9bc:	1a80      	subs	r0, r0, r2
 801d9be:	fa0b f000 	lsl.w	r0, fp, r0
 801d9c2:	4318      	orrs	r0, r3
 801d9c4:	9004      	str	r0, [sp, #16]
 801d9c6:	463c      	mov	r4, r7
 801d9c8:	e7d3      	b.n	801d972 <_svfiprintf_r+0x8e>
 801d9ca:	9a03      	ldr	r2, [sp, #12]
 801d9cc:	1d11      	adds	r1, r2, #4
 801d9ce:	6812      	ldr	r2, [r2, #0]
 801d9d0:	9103      	str	r1, [sp, #12]
 801d9d2:	2a00      	cmp	r2, #0
 801d9d4:	db01      	blt.n	801d9da <_svfiprintf_r+0xf6>
 801d9d6:	9207      	str	r2, [sp, #28]
 801d9d8:	e004      	b.n	801d9e4 <_svfiprintf_r+0x100>
 801d9da:	4252      	negs	r2, r2
 801d9dc:	f043 0302 	orr.w	r3, r3, #2
 801d9e0:	9207      	str	r2, [sp, #28]
 801d9e2:	9304      	str	r3, [sp, #16]
 801d9e4:	783b      	ldrb	r3, [r7, #0]
 801d9e6:	2b2e      	cmp	r3, #46	; 0x2e
 801d9e8:	d10e      	bne.n	801da08 <_svfiprintf_r+0x124>
 801d9ea:	787b      	ldrb	r3, [r7, #1]
 801d9ec:	2b2a      	cmp	r3, #42	; 0x2a
 801d9ee:	f107 0101 	add.w	r1, r7, #1
 801d9f2:	d132      	bne.n	801da5a <_svfiprintf_r+0x176>
 801d9f4:	9b03      	ldr	r3, [sp, #12]
 801d9f6:	1d1a      	adds	r2, r3, #4
 801d9f8:	681b      	ldr	r3, [r3, #0]
 801d9fa:	9203      	str	r2, [sp, #12]
 801d9fc:	2b00      	cmp	r3, #0
 801d9fe:	bfb8      	it	lt
 801da00:	f04f 33ff 	movlt.w	r3, #4294967295
 801da04:	3702      	adds	r7, #2
 801da06:	9305      	str	r3, [sp, #20]
 801da08:	4c2c      	ldr	r4, [pc, #176]	; (801dabc <_svfiprintf_r+0x1d8>)
 801da0a:	7839      	ldrb	r1, [r7, #0]
 801da0c:	2203      	movs	r2, #3
 801da0e:	4620      	mov	r0, r4
 801da10:	f7e2 fbee 	bl	80001f0 <memchr>
 801da14:	b138      	cbz	r0, 801da26 <_svfiprintf_r+0x142>
 801da16:	2340      	movs	r3, #64	; 0x40
 801da18:	1b00      	subs	r0, r0, r4
 801da1a:	fa03 f000 	lsl.w	r0, r3, r0
 801da1e:	9b04      	ldr	r3, [sp, #16]
 801da20:	4303      	orrs	r3, r0
 801da22:	9304      	str	r3, [sp, #16]
 801da24:	3701      	adds	r7, #1
 801da26:	7839      	ldrb	r1, [r7, #0]
 801da28:	4825      	ldr	r0, [pc, #148]	; (801dac0 <_svfiprintf_r+0x1dc>)
 801da2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801da2e:	2206      	movs	r2, #6
 801da30:	1c7e      	adds	r6, r7, #1
 801da32:	f7e2 fbdd 	bl	80001f0 <memchr>
 801da36:	2800      	cmp	r0, #0
 801da38:	d035      	beq.n	801daa6 <_svfiprintf_r+0x1c2>
 801da3a:	4b22      	ldr	r3, [pc, #136]	; (801dac4 <_svfiprintf_r+0x1e0>)
 801da3c:	b9fb      	cbnz	r3, 801da7e <_svfiprintf_r+0x19a>
 801da3e:	9b03      	ldr	r3, [sp, #12]
 801da40:	3307      	adds	r3, #7
 801da42:	f023 0307 	bic.w	r3, r3, #7
 801da46:	3308      	adds	r3, #8
 801da48:	9303      	str	r3, [sp, #12]
 801da4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801da4c:	444b      	add	r3, r9
 801da4e:	9309      	str	r3, [sp, #36]	; 0x24
 801da50:	e76c      	b.n	801d92c <_svfiprintf_r+0x48>
 801da52:	fb00 3202 	mla	r2, r0, r2, r3
 801da56:	2101      	movs	r1, #1
 801da58:	e7a3      	b.n	801d9a2 <_svfiprintf_r+0xbe>
 801da5a:	2300      	movs	r3, #0
 801da5c:	9305      	str	r3, [sp, #20]
 801da5e:	4618      	mov	r0, r3
 801da60:	240a      	movs	r4, #10
 801da62:	460f      	mov	r7, r1
 801da64:	3101      	adds	r1, #1
 801da66:	783a      	ldrb	r2, [r7, #0]
 801da68:	3a30      	subs	r2, #48	; 0x30
 801da6a:	2a09      	cmp	r2, #9
 801da6c:	d903      	bls.n	801da76 <_svfiprintf_r+0x192>
 801da6e:	2b00      	cmp	r3, #0
 801da70:	d0ca      	beq.n	801da08 <_svfiprintf_r+0x124>
 801da72:	9005      	str	r0, [sp, #20]
 801da74:	e7c8      	b.n	801da08 <_svfiprintf_r+0x124>
 801da76:	fb04 2000 	mla	r0, r4, r0, r2
 801da7a:	2301      	movs	r3, #1
 801da7c:	e7f1      	b.n	801da62 <_svfiprintf_r+0x17e>
 801da7e:	ab03      	add	r3, sp, #12
 801da80:	9300      	str	r3, [sp, #0]
 801da82:	462a      	mov	r2, r5
 801da84:	4b10      	ldr	r3, [pc, #64]	; (801dac8 <_svfiprintf_r+0x1e4>)
 801da86:	a904      	add	r1, sp, #16
 801da88:	4640      	mov	r0, r8
 801da8a:	f7fd fe9f 	bl	801b7cc <_printf_float>
 801da8e:	f1b0 3fff 	cmp.w	r0, #4294967295
 801da92:	4681      	mov	r9, r0
 801da94:	d1d9      	bne.n	801da4a <_svfiprintf_r+0x166>
 801da96:	89ab      	ldrh	r3, [r5, #12]
 801da98:	065b      	lsls	r3, r3, #25
 801da9a:	f53f af38 	bmi.w	801d90e <_svfiprintf_r+0x2a>
 801da9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801daa0:	b01d      	add	sp, #116	; 0x74
 801daa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801daa6:	ab03      	add	r3, sp, #12
 801daa8:	9300      	str	r3, [sp, #0]
 801daaa:	462a      	mov	r2, r5
 801daac:	4b06      	ldr	r3, [pc, #24]	; (801dac8 <_svfiprintf_r+0x1e4>)
 801daae:	a904      	add	r1, sp, #16
 801dab0:	4640      	mov	r0, r8
 801dab2:	f7fe f941 	bl	801bd38 <_printf_i>
 801dab6:	e7ea      	b.n	801da8e <_svfiprintf_r+0x1aa>
 801dab8:	0801ee8c 	.word	0x0801ee8c
 801dabc:	0801ee92 	.word	0x0801ee92
 801dac0:	0801ee96 	.word	0x0801ee96
 801dac4:	0801b7cd 	.word	0x0801b7cd
 801dac8:	0801d82d 	.word	0x0801d82d

0801dacc <__sfputc_r>:
 801dacc:	6893      	ldr	r3, [r2, #8]
 801dace:	3b01      	subs	r3, #1
 801dad0:	2b00      	cmp	r3, #0
 801dad2:	b410      	push	{r4}
 801dad4:	6093      	str	r3, [r2, #8]
 801dad6:	da09      	bge.n	801daec <__sfputc_r+0x20>
 801dad8:	6994      	ldr	r4, [r2, #24]
 801dada:	42a3      	cmp	r3, r4
 801dadc:	db02      	blt.n	801dae4 <__sfputc_r+0x18>
 801dade:	b2cb      	uxtb	r3, r1
 801dae0:	2b0a      	cmp	r3, #10
 801dae2:	d103      	bne.n	801daec <__sfputc_r+0x20>
 801dae4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dae8:	f7fe bc00 	b.w	801c2ec <__swbuf_r>
 801daec:	6813      	ldr	r3, [r2, #0]
 801daee:	1c58      	adds	r0, r3, #1
 801daf0:	6010      	str	r0, [r2, #0]
 801daf2:	7019      	strb	r1, [r3, #0]
 801daf4:	b2c8      	uxtb	r0, r1
 801daf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dafa:	4770      	bx	lr

0801dafc <__sfputs_r>:
 801dafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dafe:	4606      	mov	r6, r0
 801db00:	460f      	mov	r7, r1
 801db02:	4614      	mov	r4, r2
 801db04:	18d5      	adds	r5, r2, r3
 801db06:	42ac      	cmp	r4, r5
 801db08:	d101      	bne.n	801db0e <__sfputs_r+0x12>
 801db0a:	2000      	movs	r0, #0
 801db0c:	e007      	b.n	801db1e <__sfputs_r+0x22>
 801db0e:	463a      	mov	r2, r7
 801db10:	f814 1b01 	ldrb.w	r1, [r4], #1
 801db14:	4630      	mov	r0, r6
 801db16:	f7ff ffd9 	bl	801dacc <__sfputc_r>
 801db1a:	1c43      	adds	r3, r0, #1
 801db1c:	d1f3      	bne.n	801db06 <__sfputs_r+0xa>
 801db1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801db20 <_vfiprintf_r>:
 801db20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db24:	b09d      	sub	sp, #116	; 0x74
 801db26:	460c      	mov	r4, r1
 801db28:	4617      	mov	r7, r2
 801db2a:	9303      	str	r3, [sp, #12]
 801db2c:	4606      	mov	r6, r0
 801db2e:	b118      	cbz	r0, 801db38 <_vfiprintf_r+0x18>
 801db30:	6983      	ldr	r3, [r0, #24]
 801db32:	b90b      	cbnz	r3, 801db38 <_vfiprintf_r+0x18>
 801db34:	f7fd fc3e 	bl	801b3b4 <__sinit>
 801db38:	4b7c      	ldr	r3, [pc, #496]	; (801dd2c <_vfiprintf_r+0x20c>)
 801db3a:	429c      	cmp	r4, r3
 801db3c:	d157      	bne.n	801dbee <_vfiprintf_r+0xce>
 801db3e:	6874      	ldr	r4, [r6, #4]
 801db40:	89a3      	ldrh	r3, [r4, #12]
 801db42:	0718      	lsls	r0, r3, #28
 801db44:	d55d      	bpl.n	801dc02 <_vfiprintf_r+0xe2>
 801db46:	6923      	ldr	r3, [r4, #16]
 801db48:	2b00      	cmp	r3, #0
 801db4a:	d05a      	beq.n	801dc02 <_vfiprintf_r+0xe2>
 801db4c:	2300      	movs	r3, #0
 801db4e:	9309      	str	r3, [sp, #36]	; 0x24
 801db50:	2320      	movs	r3, #32
 801db52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801db56:	2330      	movs	r3, #48	; 0x30
 801db58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801db5c:	f04f 0b01 	mov.w	fp, #1
 801db60:	46b8      	mov	r8, r7
 801db62:	4645      	mov	r5, r8
 801db64:	f815 3b01 	ldrb.w	r3, [r5], #1
 801db68:	2b00      	cmp	r3, #0
 801db6a:	d155      	bne.n	801dc18 <_vfiprintf_r+0xf8>
 801db6c:	ebb8 0a07 	subs.w	sl, r8, r7
 801db70:	d00b      	beq.n	801db8a <_vfiprintf_r+0x6a>
 801db72:	4653      	mov	r3, sl
 801db74:	463a      	mov	r2, r7
 801db76:	4621      	mov	r1, r4
 801db78:	4630      	mov	r0, r6
 801db7a:	f7ff ffbf 	bl	801dafc <__sfputs_r>
 801db7e:	3001      	adds	r0, #1
 801db80:	f000 80c4 	beq.w	801dd0c <_vfiprintf_r+0x1ec>
 801db84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801db86:	4453      	add	r3, sl
 801db88:	9309      	str	r3, [sp, #36]	; 0x24
 801db8a:	f898 3000 	ldrb.w	r3, [r8]
 801db8e:	2b00      	cmp	r3, #0
 801db90:	f000 80bc 	beq.w	801dd0c <_vfiprintf_r+0x1ec>
 801db94:	2300      	movs	r3, #0
 801db96:	f04f 32ff 	mov.w	r2, #4294967295
 801db9a:	9304      	str	r3, [sp, #16]
 801db9c:	9307      	str	r3, [sp, #28]
 801db9e:	9205      	str	r2, [sp, #20]
 801dba0:	9306      	str	r3, [sp, #24]
 801dba2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801dba6:	931a      	str	r3, [sp, #104]	; 0x68
 801dba8:	2205      	movs	r2, #5
 801dbaa:	7829      	ldrb	r1, [r5, #0]
 801dbac:	4860      	ldr	r0, [pc, #384]	; (801dd30 <_vfiprintf_r+0x210>)
 801dbae:	f7e2 fb1f 	bl	80001f0 <memchr>
 801dbb2:	f105 0801 	add.w	r8, r5, #1
 801dbb6:	9b04      	ldr	r3, [sp, #16]
 801dbb8:	2800      	cmp	r0, #0
 801dbba:	d131      	bne.n	801dc20 <_vfiprintf_r+0x100>
 801dbbc:	06d9      	lsls	r1, r3, #27
 801dbbe:	bf44      	itt	mi
 801dbc0:	2220      	movmi	r2, #32
 801dbc2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801dbc6:	071a      	lsls	r2, r3, #28
 801dbc8:	bf44      	itt	mi
 801dbca:	222b      	movmi	r2, #43	; 0x2b
 801dbcc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801dbd0:	782a      	ldrb	r2, [r5, #0]
 801dbd2:	2a2a      	cmp	r2, #42	; 0x2a
 801dbd4:	d02c      	beq.n	801dc30 <_vfiprintf_r+0x110>
 801dbd6:	9a07      	ldr	r2, [sp, #28]
 801dbd8:	2100      	movs	r1, #0
 801dbda:	200a      	movs	r0, #10
 801dbdc:	46a8      	mov	r8, r5
 801dbde:	3501      	adds	r5, #1
 801dbe0:	f898 3000 	ldrb.w	r3, [r8]
 801dbe4:	3b30      	subs	r3, #48	; 0x30
 801dbe6:	2b09      	cmp	r3, #9
 801dbe8:	d96d      	bls.n	801dcc6 <_vfiprintf_r+0x1a6>
 801dbea:	b371      	cbz	r1, 801dc4a <_vfiprintf_r+0x12a>
 801dbec:	e026      	b.n	801dc3c <_vfiprintf_r+0x11c>
 801dbee:	4b51      	ldr	r3, [pc, #324]	; (801dd34 <_vfiprintf_r+0x214>)
 801dbf0:	429c      	cmp	r4, r3
 801dbf2:	d101      	bne.n	801dbf8 <_vfiprintf_r+0xd8>
 801dbf4:	68b4      	ldr	r4, [r6, #8]
 801dbf6:	e7a3      	b.n	801db40 <_vfiprintf_r+0x20>
 801dbf8:	4b4f      	ldr	r3, [pc, #316]	; (801dd38 <_vfiprintf_r+0x218>)
 801dbfa:	429c      	cmp	r4, r3
 801dbfc:	bf08      	it	eq
 801dbfe:	68f4      	ldreq	r4, [r6, #12]
 801dc00:	e79e      	b.n	801db40 <_vfiprintf_r+0x20>
 801dc02:	4621      	mov	r1, r4
 801dc04:	4630      	mov	r0, r6
 801dc06:	f7fe fbd5 	bl	801c3b4 <__swsetup_r>
 801dc0a:	2800      	cmp	r0, #0
 801dc0c:	d09e      	beq.n	801db4c <_vfiprintf_r+0x2c>
 801dc0e:	f04f 30ff 	mov.w	r0, #4294967295
 801dc12:	b01d      	add	sp, #116	; 0x74
 801dc14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc18:	2b25      	cmp	r3, #37	; 0x25
 801dc1a:	d0a7      	beq.n	801db6c <_vfiprintf_r+0x4c>
 801dc1c:	46a8      	mov	r8, r5
 801dc1e:	e7a0      	b.n	801db62 <_vfiprintf_r+0x42>
 801dc20:	4a43      	ldr	r2, [pc, #268]	; (801dd30 <_vfiprintf_r+0x210>)
 801dc22:	1a80      	subs	r0, r0, r2
 801dc24:	fa0b f000 	lsl.w	r0, fp, r0
 801dc28:	4318      	orrs	r0, r3
 801dc2a:	9004      	str	r0, [sp, #16]
 801dc2c:	4645      	mov	r5, r8
 801dc2e:	e7bb      	b.n	801dba8 <_vfiprintf_r+0x88>
 801dc30:	9a03      	ldr	r2, [sp, #12]
 801dc32:	1d11      	adds	r1, r2, #4
 801dc34:	6812      	ldr	r2, [r2, #0]
 801dc36:	9103      	str	r1, [sp, #12]
 801dc38:	2a00      	cmp	r2, #0
 801dc3a:	db01      	blt.n	801dc40 <_vfiprintf_r+0x120>
 801dc3c:	9207      	str	r2, [sp, #28]
 801dc3e:	e004      	b.n	801dc4a <_vfiprintf_r+0x12a>
 801dc40:	4252      	negs	r2, r2
 801dc42:	f043 0302 	orr.w	r3, r3, #2
 801dc46:	9207      	str	r2, [sp, #28]
 801dc48:	9304      	str	r3, [sp, #16]
 801dc4a:	f898 3000 	ldrb.w	r3, [r8]
 801dc4e:	2b2e      	cmp	r3, #46	; 0x2e
 801dc50:	d110      	bne.n	801dc74 <_vfiprintf_r+0x154>
 801dc52:	f898 3001 	ldrb.w	r3, [r8, #1]
 801dc56:	2b2a      	cmp	r3, #42	; 0x2a
 801dc58:	f108 0101 	add.w	r1, r8, #1
 801dc5c:	d137      	bne.n	801dcce <_vfiprintf_r+0x1ae>
 801dc5e:	9b03      	ldr	r3, [sp, #12]
 801dc60:	1d1a      	adds	r2, r3, #4
 801dc62:	681b      	ldr	r3, [r3, #0]
 801dc64:	9203      	str	r2, [sp, #12]
 801dc66:	2b00      	cmp	r3, #0
 801dc68:	bfb8      	it	lt
 801dc6a:	f04f 33ff 	movlt.w	r3, #4294967295
 801dc6e:	f108 0802 	add.w	r8, r8, #2
 801dc72:	9305      	str	r3, [sp, #20]
 801dc74:	4d31      	ldr	r5, [pc, #196]	; (801dd3c <_vfiprintf_r+0x21c>)
 801dc76:	f898 1000 	ldrb.w	r1, [r8]
 801dc7a:	2203      	movs	r2, #3
 801dc7c:	4628      	mov	r0, r5
 801dc7e:	f7e2 fab7 	bl	80001f0 <memchr>
 801dc82:	b140      	cbz	r0, 801dc96 <_vfiprintf_r+0x176>
 801dc84:	2340      	movs	r3, #64	; 0x40
 801dc86:	1b40      	subs	r0, r0, r5
 801dc88:	fa03 f000 	lsl.w	r0, r3, r0
 801dc8c:	9b04      	ldr	r3, [sp, #16]
 801dc8e:	4303      	orrs	r3, r0
 801dc90:	9304      	str	r3, [sp, #16]
 801dc92:	f108 0801 	add.w	r8, r8, #1
 801dc96:	f898 1000 	ldrb.w	r1, [r8]
 801dc9a:	4829      	ldr	r0, [pc, #164]	; (801dd40 <_vfiprintf_r+0x220>)
 801dc9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801dca0:	2206      	movs	r2, #6
 801dca2:	f108 0701 	add.w	r7, r8, #1
 801dca6:	f7e2 faa3 	bl	80001f0 <memchr>
 801dcaa:	2800      	cmp	r0, #0
 801dcac:	d034      	beq.n	801dd18 <_vfiprintf_r+0x1f8>
 801dcae:	4b25      	ldr	r3, [pc, #148]	; (801dd44 <_vfiprintf_r+0x224>)
 801dcb0:	bb03      	cbnz	r3, 801dcf4 <_vfiprintf_r+0x1d4>
 801dcb2:	9b03      	ldr	r3, [sp, #12]
 801dcb4:	3307      	adds	r3, #7
 801dcb6:	f023 0307 	bic.w	r3, r3, #7
 801dcba:	3308      	adds	r3, #8
 801dcbc:	9303      	str	r3, [sp, #12]
 801dcbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dcc0:	444b      	add	r3, r9
 801dcc2:	9309      	str	r3, [sp, #36]	; 0x24
 801dcc4:	e74c      	b.n	801db60 <_vfiprintf_r+0x40>
 801dcc6:	fb00 3202 	mla	r2, r0, r2, r3
 801dcca:	2101      	movs	r1, #1
 801dccc:	e786      	b.n	801dbdc <_vfiprintf_r+0xbc>
 801dcce:	2300      	movs	r3, #0
 801dcd0:	9305      	str	r3, [sp, #20]
 801dcd2:	4618      	mov	r0, r3
 801dcd4:	250a      	movs	r5, #10
 801dcd6:	4688      	mov	r8, r1
 801dcd8:	3101      	adds	r1, #1
 801dcda:	f898 2000 	ldrb.w	r2, [r8]
 801dcde:	3a30      	subs	r2, #48	; 0x30
 801dce0:	2a09      	cmp	r2, #9
 801dce2:	d903      	bls.n	801dcec <_vfiprintf_r+0x1cc>
 801dce4:	2b00      	cmp	r3, #0
 801dce6:	d0c5      	beq.n	801dc74 <_vfiprintf_r+0x154>
 801dce8:	9005      	str	r0, [sp, #20]
 801dcea:	e7c3      	b.n	801dc74 <_vfiprintf_r+0x154>
 801dcec:	fb05 2000 	mla	r0, r5, r0, r2
 801dcf0:	2301      	movs	r3, #1
 801dcf2:	e7f0      	b.n	801dcd6 <_vfiprintf_r+0x1b6>
 801dcf4:	ab03      	add	r3, sp, #12
 801dcf6:	9300      	str	r3, [sp, #0]
 801dcf8:	4622      	mov	r2, r4
 801dcfa:	4b13      	ldr	r3, [pc, #76]	; (801dd48 <_vfiprintf_r+0x228>)
 801dcfc:	a904      	add	r1, sp, #16
 801dcfe:	4630      	mov	r0, r6
 801dd00:	f7fd fd64 	bl	801b7cc <_printf_float>
 801dd04:	f1b0 3fff 	cmp.w	r0, #4294967295
 801dd08:	4681      	mov	r9, r0
 801dd0a:	d1d8      	bne.n	801dcbe <_vfiprintf_r+0x19e>
 801dd0c:	89a3      	ldrh	r3, [r4, #12]
 801dd0e:	065b      	lsls	r3, r3, #25
 801dd10:	f53f af7d 	bmi.w	801dc0e <_vfiprintf_r+0xee>
 801dd14:	9809      	ldr	r0, [sp, #36]	; 0x24
 801dd16:	e77c      	b.n	801dc12 <_vfiprintf_r+0xf2>
 801dd18:	ab03      	add	r3, sp, #12
 801dd1a:	9300      	str	r3, [sp, #0]
 801dd1c:	4622      	mov	r2, r4
 801dd1e:	4b0a      	ldr	r3, [pc, #40]	; (801dd48 <_vfiprintf_r+0x228>)
 801dd20:	a904      	add	r1, sp, #16
 801dd22:	4630      	mov	r0, r6
 801dd24:	f7fe f808 	bl	801bd38 <_printf_i>
 801dd28:	e7ec      	b.n	801dd04 <_vfiprintf_r+0x1e4>
 801dd2a:	bf00      	nop
 801dd2c:	0801ed08 	.word	0x0801ed08
 801dd30:	0801ee8c 	.word	0x0801ee8c
 801dd34:	0801ed28 	.word	0x0801ed28
 801dd38:	0801ece8 	.word	0x0801ece8
 801dd3c:	0801ee92 	.word	0x0801ee92
 801dd40:	0801ee96 	.word	0x0801ee96
 801dd44:	0801b7cd 	.word	0x0801b7cd
 801dd48:	0801dafd 	.word	0x0801dafd

0801dd4c <_read_r>:
 801dd4c:	b538      	push	{r3, r4, r5, lr}
 801dd4e:	4c07      	ldr	r4, [pc, #28]	; (801dd6c <_read_r+0x20>)
 801dd50:	4605      	mov	r5, r0
 801dd52:	4608      	mov	r0, r1
 801dd54:	4611      	mov	r1, r2
 801dd56:	2200      	movs	r2, #0
 801dd58:	6022      	str	r2, [r4, #0]
 801dd5a:	461a      	mov	r2, r3
 801dd5c:	f7ee fc8a 	bl	800c674 <_read>
 801dd60:	1c43      	adds	r3, r0, #1
 801dd62:	d102      	bne.n	801dd6a <_read_r+0x1e>
 801dd64:	6823      	ldr	r3, [r4, #0]
 801dd66:	b103      	cbz	r3, 801dd6a <_read_r+0x1e>
 801dd68:	602b      	str	r3, [r5, #0]
 801dd6a:	bd38      	pop	{r3, r4, r5, pc}
 801dd6c:	200038cc 	.word	0x200038cc

0801dd70 <_fstat_r>:
 801dd70:	b538      	push	{r3, r4, r5, lr}
 801dd72:	4c07      	ldr	r4, [pc, #28]	; (801dd90 <_fstat_r+0x20>)
 801dd74:	2300      	movs	r3, #0
 801dd76:	4605      	mov	r5, r0
 801dd78:	4608      	mov	r0, r1
 801dd7a:	4611      	mov	r1, r2
 801dd7c:	6023      	str	r3, [r4, #0]
 801dd7e:	f7ee fcb8 	bl	800c6f2 <_fstat>
 801dd82:	1c43      	adds	r3, r0, #1
 801dd84:	d102      	bne.n	801dd8c <_fstat_r+0x1c>
 801dd86:	6823      	ldr	r3, [r4, #0]
 801dd88:	b103      	cbz	r3, 801dd8c <_fstat_r+0x1c>
 801dd8a:	602b      	str	r3, [r5, #0]
 801dd8c:	bd38      	pop	{r3, r4, r5, pc}
 801dd8e:	bf00      	nop
 801dd90:	200038cc 	.word	0x200038cc

0801dd94 <_isatty_r>:
 801dd94:	b538      	push	{r3, r4, r5, lr}
 801dd96:	4c06      	ldr	r4, [pc, #24]	; (801ddb0 <_isatty_r+0x1c>)
 801dd98:	2300      	movs	r3, #0
 801dd9a:	4605      	mov	r5, r0
 801dd9c:	4608      	mov	r0, r1
 801dd9e:	6023      	str	r3, [r4, #0]
 801dda0:	f7ee fcac 	bl	800c6fc <_isatty>
 801dda4:	1c43      	adds	r3, r0, #1
 801dda6:	d102      	bne.n	801ddae <_isatty_r+0x1a>
 801dda8:	6823      	ldr	r3, [r4, #0]
 801ddaa:	b103      	cbz	r3, 801ddae <_isatty_r+0x1a>
 801ddac:	602b      	str	r3, [r5, #0]
 801ddae:	bd38      	pop	{r3, r4, r5, pc}
 801ddb0:	200038cc 	.word	0x200038cc

0801ddb4 <__ascii_mbtowc>:
 801ddb4:	b082      	sub	sp, #8
 801ddb6:	b901      	cbnz	r1, 801ddba <__ascii_mbtowc+0x6>
 801ddb8:	a901      	add	r1, sp, #4
 801ddba:	b142      	cbz	r2, 801ddce <__ascii_mbtowc+0x1a>
 801ddbc:	b14b      	cbz	r3, 801ddd2 <__ascii_mbtowc+0x1e>
 801ddbe:	7813      	ldrb	r3, [r2, #0]
 801ddc0:	600b      	str	r3, [r1, #0]
 801ddc2:	7812      	ldrb	r2, [r2, #0]
 801ddc4:	1c10      	adds	r0, r2, #0
 801ddc6:	bf18      	it	ne
 801ddc8:	2001      	movne	r0, #1
 801ddca:	b002      	add	sp, #8
 801ddcc:	4770      	bx	lr
 801ddce:	4610      	mov	r0, r2
 801ddd0:	e7fb      	b.n	801ddca <__ascii_mbtowc+0x16>
 801ddd2:	f06f 0001 	mvn.w	r0, #1
 801ddd6:	e7f8      	b.n	801ddca <__ascii_mbtowc+0x16>

0801ddd8 <memmove>:
 801ddd8:	4288      	cmp	r0, r1
 801ddda:	b510      	push	{r4, lr}
 801dddc:	eb01 0302 	add.w	r3, r1, r2
 801dde0:	d803      	bhi.n	801ddea <memmove+0x12>
 801dde2:	1e42      	subs	r2, r0, #1
 801dde4:	4299      	cmp	r1, r3
 801dde6:	d10c      	bne.n	801de02 <memmove+0x2a>
 801dde8:	bd10      	pop	{r4, pc}
 801ddea:	4298      	cmp	r0, r3
 801ddec:	d2f9      	bcs.n	801dde2 <memmove+0xa>
 801ddee:	1881      	adds	r1, r0, r2
 801ddf0:	1ad2      	subs	r2, r2, r3
 801ddf2:	42d3      	cmn	r3, r2
 801ddf4:	d100      	bne.n	801ddf8 <memmove+0x20>
 801ddf6:	bd10      	pop	{r4, pc}
 801ddf8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ddfc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801de00:	e7f7      	b.n	801ddf2 <memmove+0x1a>
 801de02:	f811 4b01 	ldrb.w	r4, [r1], #1
 801de06:	f802 4f01 	strb.w	r4, [r2, #1]!
 801de0a:	e7eb      	b.n	801dde4 <memmove+0xc>

0801de0c <_realloc_r>:
 801de0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801de0e:	4607      	mov	r7, r0
 801de10:	4614      	mov	r4, r2
 801de12:	460e      	mov	r6, r1
 801de14:	b921      	cbnz	r1, 801de20 <_realloc_r+0x14>
 801de16:	4611      	mov	r1, r2
 801de18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801de1c:	f7fd bbe2 	b.w	801b5e4 <_malloc_r>
 801de20:	b922      	cbnz	r2, 801de2c <_realloc_r+0x20>
 801de22:	f7fd fb91 	bl	801b548 <_free_r>
 801de26:	4625      	mov	r5, r4
 801de28:	4628      	mov	r0, r5
 801de2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801de2c:	f000 f821 	bl	801de72 <_malloc_usable_size_r>
 801de30:	4284      	cmp	r4, r0
 801de32:	d90f      	bls.n	801de54 <_realloc_r+0x48>
 801de34:	4621      	mov	r1, r4
 801de36:	4638      	mov	r0, r7
 801de38:	f7fd fbd4 	bl	801b5e4 <_malloc_r>
 801de3c:	4605      	mov	r5, r0
 801de3e:	2800      	cmp	r0, #0
 801de40:	d0f2      	beq.n	801de28 <_realloc_r+0x1c>
 801de42:	4631      	mov	r1, r6
 801de44:	4622      	mov	r2, r4
 801de46:	f7fd fb6b 	bl	801b520 <memcpy>
 801de4a:	4631      	mov	r1, r6
 801de4c:	4638      	mov	r0, r7
 801de4e:	f7fd fb7b 	bl	801b548 <_free_r>
 801de52:	e7e9      	b.n	801de28 <_realloc_r+0x1c>
 801de54:	4635      	mov	r5, r6
 801de56:	e7e7      	b.n	801de28 <_realloc_r+0x1c>

0801de58 <__ascii_wctomb>:
 801de58:	b149      	cbz	r1, 801de6e <__ascii_wctomb+0x16>
 801de5a:	2aff      	cmp	r2, #255	; 0xff
 801de5c:	bf85      	ittet	hi
 801de5e:	238a      	movhi	r3, #138	; 0x8a
 801de60:	6003      	strhi	r3, [r0, #0]
 801de62:	700a      	strbls	r2, [r1, #0]
 801de64:	f04f 30ff 	movhi.w	r0, #4294967295
 801de68:	bf98      	it	ls
 801de6a:	2001      	movls	r0, #1
 801de6c:	4770      	bx	lr
 801de6e:	4608      	mov	r0, r1
 801de70:	4770      	bx	lr

0801de72 <_malloc_usable_size_r>:
 801de72:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801de76:	2800      	cmp	r0, #0
 801de78:	f1a0 0004 	sub.w	r0, r0, #4
 801de7c:	bfbc      	itt	lt
 801de7e:	580b      	ldrlt	r3, [r1, r0]
 801de80:	18c0      	addlt	r0, r0, r3
 801de82:	4770      	bx	lr

0801de84 <_init>:
 801de84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801de86:	bf00      	nop
 801de88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801de8a:	bc08      	pop	{r3}
 801de8c:	469e      	mov	lr, r3
 801de8e:	4770      	bx	lr

0801de90 <_fini>:
 801de90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801de92:	bf00      	nop
 801de94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801de96:	bc08      	pop	{r3}
 801de98:	469e      	mov	lr, r3
 801de9a:	4770      	bx	lr
