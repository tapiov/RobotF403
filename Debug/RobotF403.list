
RobotF403.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004904  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08004aa4  08004aa4  00014aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004b7c  08004b7c  00014b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004b84  08004b84  00014b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004b88  08004b88  00014b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  20000000  08004b8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000404  2000007c  08004c08  0002007c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000480  08004c08  00020480  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000210cd  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003eb8  00000000  00000000  00041179  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000a1c5  00000000  00000000  00045031  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000dd0  00000000  00000000  0004f1f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001230  00000000  00000000  0004ffc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00008bd3  00000000  00000000  000511f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004e22  00000000  00000000  00059dcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0005ebed  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000030bc  00000000  00000000  0005ec6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004a8c 	.word	0x08004a8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08004a8c 	.word	0x08004a8c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b97a 	b.w	800058c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	468c      	mov	ip, r1
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	9e08      	ldr	r6, [sp, #32]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d151      	bne.n	8000364 <__udivmoddi4+0xb4>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d96d      	bls.n	80003a2 <__udivmoddi4+0xf2>
 80002c6:	fab2 fe82 	clz	lr, r2
 80002ca:	f1be 0f00 	cmp.w	lr, #0
 80002ce:	d00b      	beq.n	80002e8 <__udivmoddi4+0x38>
 80002d0:	f1ce 0c20 	rsb	ip, lr, #32
 80002d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ec:	0c25      	lsrs	r5, r4, #16
 80002ee:	fbbc f8fa 	udiv	r8, ip, sl
 80002f2:	fa1f f987 	uxth.w	r9, r7
 80002f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002fe:	fb08 f309 	mul.w	r3, r8, r9
 8000302:	42ab      	cmp	r3, r5
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x6c>
 8000306:	19ed      	adds	r5, r5, r7
 8000308:	f108 32ff 	add.w	r2, r8, #4294967295
 800030c:	f080 8123 	bcs.w	8000556 <__udivmoddi4+0x2a6>
 8000310:	42ab      	cmp	r3, r5
 8000312:	f240 8120 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000316:	f1a8 0802 	sub.w	r8, r8, #2
 800031a:	443d      	add	r5, r7
 800031c:	1aed      	subs	r5, r5, r3
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb5 f0fa 	udiv	r0, r5, sl
 8000324:	fb0a 5510 	mls	r5, sl, r0, r5
 8000328:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800032c:	fb00 f909 	mul.w	r9, r0, r9
 8000330:	45a1      	cmp	r9, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x98>
 8000334:	19e4      	adds	r4, r4, r7
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	f080 810a 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800033e:	45a1      	cmp	r9, r4
 8000340:	f240 8107 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 0409 	sub.w	r4, r4, r9
 800034c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000350:	2100      	movs	r1, #0
 8000352:	2e00      	cmp	r6, #0
 8000354:	d061      	beq.n	800041a <__udivmoddi4+0x16a>
 8000356:	fa24 f40e 	lsr.w	r4, r4, lr
 800035a:	2300      	movs	r3, #0
 800035c:	6034      	str	r4, [r6, #0]
 800035e:	6073      	str	r3, [r6, #4]
 8000360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xc8>
 8000368:	2e00      	cmp	r6, #0
 800036a:	d054      	beq.n	8000416 <__udivmoddi4+0x166>
 800036c:	2100      	movs	r1, #0
 800036e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000372:	4608      	mov	r0, r1
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	f040 808e 	bne.w	800049e <__udivmoddi4+0x1ee>
 8000382:	42ab      	cmp	r3, r5
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xdc>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2d0>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb65 0503 	sbc.w	r5, r5, r3
 8000392:	2001      	movs	r0, #1
 8000394:	46ac      	mov	ip, r5
 8000396:	2e00      	cmp	r6, #0
 8000398:	d03f      	beq.n	800041a <__udivmoddi4+0x16a>
 800039a:	e886 1010 	stmia.w	r6, {r4, ip}
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	b912      	cbnz	r2, 80003aa <__udivmoddi4+0xfa>
 80003a4:	2701      	movs	r7, #1
 80003a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003aa:	fab7 fe87 	clz	lr, r7
 80003ae:	f1be 0f00 	cmp.w	lr, #0
 80003b2:	d134      	bne.n	800041e <__udivmoddi4+0x16e>
 80003b4:	1beb      	subs	r3, r5, r7
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb3 f8f2 	udiv	r8, r3, r2
 80003c2:	0c25      	lsrs	r5, r4, #16
 80003c4:	fb02 3318 	mls	r3, r2, r8, r3
 80003c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003cc:	fb0c f308 	mul.w	r3, ip, r8
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x134>
 80003d4:	19ed      	adds	r5, r5, r7
 80003d6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x132>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	f200 80d1 	bhi.w	8000584 <__udivmoddi4+0x2d4>
 80003e2:	4680      	mov	r8, r0
 80003e4:	1aed      	subs	r5, r5, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ec:	fb02 5510 	mls	r5, r2, r0, r5
 80003f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003f4:	fb0c fc00 	mul.w	ip, ip, r0
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x15c>
 80003fc:	19e4      	adds	r4, r4, r7
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x15a>
 8000404:	45a4      	cmp	ip, r4
 8000406:	f200 80b8 	bhi.w	800057a <__udivmoddi4+0x2ca>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 040c 	sub.w	r4, r4, ip
 8000410:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000414:	e79d      	b.n	8000352 <__udivmoddi4+0xa2>
 8000416:	4631      	mov	r1, r6
 8000418:	4630      	mov	r0, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1ce 0420 	rsb	r4, lr, #32
 8000422:	fa05 f30e 	lsl.w	r3, r5, lr
 8000426:	fa07 f70e 	lsl.w	r7, r7, lr
 800042a:	fa20 f804 	lsr.w	r8, r0, r4
 800042e:	0c3a      	lsrs	r2, r7, #16
 8000430:	fa25 f404 	lsr.w	r4, r5, r4
 8000434:	ea48 0803 	orr.w	r8, r8, r3
 8000438:	fbb4 f1f2 	udiv	r1, r4, r2
 800043c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000440:	fb02 4411 	mls	r4, r2, r1, r4
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800044c:	fb01 f30c 	mul.w	r3, r1, ip
 8000450:	42ab      	cmp	r3, r5
 8000452:	fa00 f40e 	lsl.w	r4, r0, lr
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x1bc>
 8000458:	19ed      	adds	r5, r5, r7
 800045a:	f101 30ff 	add.w	r0, r1, #4294967295
 800045e:	f080 808a 	bcs.w	8000576 <__udivmoddi4+0x2c6>
 8000462:	42ab      	cmp	r3, r5
 8000464:	f240 8087 	bls.w	8000576 <__udivmoddi4+0x2c6>
 8000468:	3902      	subs	r1, #2
 800046a:	443d      	add	r5, r7
 800046c:	1aeb      	subs	r3, r5, r3
 800046e:	fa1f f588 	uxth.w	r5, r8
 8000472:	fbb3 f0f2 	udiv	r0, r3, r2
 8000476:	fb02 3310 	mls	r3, r2, r0, r3
 800047a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800047e:	fb00 f30c 	mul.w	r3, r0, ip
 8000482:	42ab      	cmp	r3, r5
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1e6>
 8000486:	19ed      	adds	r5, r5, r7
 8000488:	f100 38ff 	add.w	r8, r0, #4294967295
 800048c:	d26f      	bcs.n	800056e <__udivmoddi4+0x2be>
 800048e:	42ab      	cmp	r3, r5
 8000490:	d96d      	bls.n	800056e <__udivmoddi4+0x2be>
 8000492:	3802      	subs	r0, #2
 8000494:	443d      	add	r5, r7
 8000496:	1aeb      	subs	r3, r5, r3
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	e78f      	b.n	80003be <__udivmoddi4+0x10e>
 800049e:	f1c1 0720 	rsb	r7, r1, #32
 80004a2:	fa22 f807 	lsr.w	r8, r2, r7
 80004a6:	408b      	lsls	r3, r1
 80004a8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ac:	ea48 0303 	orr.w	r3, r8, r3
 80004b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004b8:	40fd      	lsrs	r5, r7
 80004ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80004be:	fbb5 f9fc 	udiv	r9, r5, ip
 80004c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ca:	fa1f f883 	uxth.w	r8, r3
 80004ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004d2:	fb09 f408 	mul.w	r4, r9, r8
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	fa02 f201 	lsl.w	r2, r2, r1
 80004dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x244>
 80004e2:	18ed      	adds	r5, r5, r3
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d243      	bcs.n	8000572 <__udivmoddi4+0x2c2>
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	d941      	bls.n	8000572 <__udivmoddi4+0x2c2>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	441d      	add	r5, r3
 80004f4:	1b2d      	subs	r5, r5, r4
 80004f6:	fa1f fe8e 	uxth.w	lr, lr
 80004fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80004fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000502:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45a0      	cmp	r8, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x26e>
 800050e:	18e4      	adds	r4, r4, r3
 8000510:	f100 35ff 	add.w	r5, r0, #4294967295
 8000514:	d229      	bcs.n	800056a <__udivmoddi4+0x2ba>
 8000516:	45a0      	cmp	r8, r4
 8000518:	d927      	bls.n	800056a <__udivmoddi4+0x2ba>
 800051a:	3802      	subs	r0, #2
 800051c:	441c      	add	r4, r3
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba4 0408 	sub.w	r4, r4, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454c      	cmp	r4, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	464d      	mov	r5, r9
 8000530:	d315      	bcc.n	800055e <__udivmoddi4+0x2ae>
 8000532:	d012      	beq.n	800055a <__udivmoddi4+0x2aa>
 8000534:	b156      	cbz	r6, 800054c <__udivmoddi4+0x29c>
 8000536:	ebba 030e 	subs.w	r3, sl, lr
 800053a:	eb64 0405 	sbc.w	r4, r4, r5
 800053e:	fa04 f707 	lsl.w	r7, r4, r7
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431f      	orrs	r7, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	6037      	str	r7, [r6, #0]
 800054a:	6074      	str	r4, [r6, #4]
 800054c:	2100      	movs	r1, #0
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	4618      	mov	r0, r3
 8000554:	e6f8      	b.n	8000348 <__udivmoddi4+0x98>
 8000556:	4690      	mov	r8, r2
 8000558:	e6e0      	b.n	800031c <__udivmoddi4+0x6c>
 800055a:	45c2      	cmp	sl, r8
 800055c:	d2ea      	bcs.n	8000534 <__udivmoddi4+0x284>
 800055e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000562:	eb69 0503 	sbc.w	r5, r9, r3
 8000566:	3801      	subs	r0, #1
 8000568:	e7e4      	b.n	8000534 <__udivmoddi4+0x284>
 800056a:	4628      	mov	r0, r5
 800056c:	e7d7      	b.n	800051e <__udivmoddi4+0x26e>
 800056e:	4640      	mov	r0, r8
 8000570:	e791      	b.n	8000496 <__udivmoddi4+0x1e6>
 8000572:	4681      	mov	r9, r0
 8000574:	e7be      	b.n	80004f4 <__udivmoddi4+0x244>
 8000576:	4601      	mov	r1, r0
 8000578:	e778      	b.n	800046c <__udivmoddi4+0x1bc>
 800057a:	3802      	subs	r0, #2
 800057c:	443c      	add	r4, r7
 800057e:	e745      	b.n	800040c <__udivmoddi4+0x15c>
 8000580:	4608      	mov	r0, r1
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xe6>
 8000584:	f1a8 0802 	sub.w	r8, r8, #2
 8000588:	443d      	add	r5, r7
 800058a:	e72b      	b.n	80003e4 <__udivmoddi4+0x134>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000590:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000592:	4a0e      	ldr	r2, [pc, #56]	; (80005cc <HAL_InitTick+0x3c>)
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_InitTick+0x40>)
{
 8000596:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000598:	7818      	ldrb	r0, [r3, #0]
 800059a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059e:	fbb3 f3f0 	udiv	r3, r3, r0
 80005a2:	6810      	ldr	r0, [r2, #0]
 80005a4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005a8:	f000 fa68 	bl	8000a7c <HAL_SYSTICK_Config>
 80005ac:	4604      	mov	r4, r0
 80005ae:	b958      	cbnz	r0, 80005c8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005b0:	2d0f      	cmp	r5, #15
 80005b2:	d809      	bhi.n	80005c8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005b4:	4602      	mov	r2, r0
 80005b6:	4629      	mov	r1, r5
 80005b8:	f04f 30ff 	mov.w	r0, #4294967295
 80005bc:	f000 fa1e 	bl	80009fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005c0:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <HAL_InitTick+0x44>)
 80005c2:	4620      	mov	r0, r4
 80005c4:	601d      	str	r5, [r3, #0]
 80005c6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005c8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005ca:	bd38      	pop	{r3, r4, r5, pc}
 80005cc:	20000014 	.word	0x20000014
 80005d0:	20000000 	.word	0x20000000
 80005d4:	20000004 	.word	0x20000004

080005d8 <HAL_Init>:
{
 80005d8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <HAL_Init+0x30>)
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005e2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005ea:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005f2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f4:	2003      	movs	r0, #3
 80005f6:	f000 f9ef 	bl	80009d8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005fa:	2000      	movs	r0, #0
 80005fc:	f7ff ffc8 	bl	8000590 <HAL_InitTick>
  HAL_MspInit();
 8000600:	f002 fd68 	bl	80030d4 <HAL_MspInit>
}
 8000604:	2000      	movs	r0, #0
 8000606:	bd08      	pop	{r3, pc}
 8000608:	40023c00 	.word	0x40023c00

0800060c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800060c:	4a03      	ldr	r2, [pc, #12]	; (800061c <HAL_IncTick+0x10>)
 800060e:	4b04      	ldr	r3, [pc, #16]	; (8000620 <HAL_IncTick+0x14>)
 8000610:	6811      	ldr	r1, [r2, #0]
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	440b      	add	r3, r1
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	200000a4 	.word	0x200000a4
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000624:	4b01      	ldr	r3, [pc, #4]	; (800062c <HAL_GetTick+0x8>)
 8000626:	6818      	ldr	r0, [r3, #0]
}
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	200000a4 	.word	0x200000a4

08000630 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000630:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000632:	4604      	mov	r4, r0
 8000634:	2800      	cmp	r0, #0
 8000636:	f000 8099 	beq.w	800076c <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800063a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800063c:	b923      	cbnz	r3, 8000648 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800063e:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000640:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000644:	f002 fab6 	bl	8002bb4 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000648:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800064a:	06db      	lsls	r3, r3, #27
 800064c:	f100 808c 	bmi.w	8000768 <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000650:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000652:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000656:	f023 0302 	bic.w	r3, r3, #2
 800065a:	f043 0302 	orr.w	r3, r3, #2
 800065e:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000660:	4b43      	ldr	r3, [pc, #268]	; (8000770 <HAL_ADC_Init+0x140>)
 8000662:	685a      	ldr	r2, [r3, #4]
 8000664:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000668:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800066a:	685a      	ldr	r2, [r3, #4]
 800066c:	6861      	ldr	r1, [r4, #4]
 800066e:	430a      	orrs	r2, r1
 8000670:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000672:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000674:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000676:	685a      	ldr	r2, [r3, #4]
 8000678:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800067c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800067e:	685a      	ldr	r2, [r3, #4]
 8000680:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000684:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000686:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000688:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800068a:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800068e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000690:	685a      	ldr	r2, [r3, #4]
 8000692:	430a      	orrs	r2, r1
 8000694:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000696:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000698:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800069a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800069e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80006a0:	689a      	ldr	r2, [r3, #8]
 80006a2:	430a      	orrs	r2, r1
 80006a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80006a6:	4933      	ldr	r1, [pc, #204]	; (8000774 <HAL_ADC_Init+0x144>)
 80006a8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80006aa:	428a      	cmp	r2, r1
 80006ac:	d050      	beq.n	8000750 <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80006ae:	6899      	ldr	r1, [r3, #8]
 80006b0:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80006b4:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80006b6:	6899      	ldr	r1, [r3, #8]
 80006b8:	430a      	orrs	r2, r1
 80006ba:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006bc:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80006be:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80006c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80006c6:	689a      	ldr	r2, [r3, #8]
 80006c8:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006ca:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80006cc:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80006ce:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80006d0:	f022 0202 	bic.w	r2, r2, #2
 80006d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80006d6:	689a      	ldr	r2, [r3, #8]
 80006d8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80006dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80006de:	6a22      	ldr	r2, [r4, #32]
 80006e0:	2a00      	cmp	r2, #0
 80006e2:	d03d      	beq.n	8000760 <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80006e4:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80006e6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80006e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80006ec:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80006ee:	685a      	ldr	r2, [r3, #4]
 80006f0:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80006f4:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80006f6:	685a      	ldr	r2, [r3, #4]
 80006f8:	3901      	subs	r1, #1
 80006fa:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80006fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000702:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000704:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000708:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800070a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800070c:	3901      	subs	r1, #1
 800070e:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000712:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000714:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000716:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000718:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800071c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800071e:	689a      	ldr	r2, [r3, #8]
 8000720:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000724:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000726:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000728:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800072a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800072e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000730:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000732:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000734:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000738:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800073a:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800073c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800073e:	f023 0303 	bic.w	r3, r3, #3
 8000742:	f043 0301 	orr.w	r3, r3, #1
 8000746:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000748:	2300      	movs	r3, #0
 800074a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 800074e:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000750:	689a      	ldr	r2, [r3, #8]
 8000752:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000756:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000758:	689a      	ldr	r2, [r3, #8]
 800075a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800075e:	e7b4      	b.n	80006ca <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000760:	685a      	ldr	r2, [r3, #4]
 8000762:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000766:	e7ca      	b.n	80006fe <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 8000768:	2001      	movs	r0, #1
 800076a:	e7ed      	b.n	8000748 <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 800076c:	2001      	movs	r0, #1
}
 800076e:	bd10      	pop	{r4, pc}
 8000770:	40012300 	.word	0x40012300
 8000774:	0f000001 	.word	0x0f000001

08000778 <HAL_ADC_ConvCpltCallback>:
 8000778:	4770      	bx	lr

0800077a <HAL_ADC_LevelOutOfWindowCallback>:
 800077a:	4770      	bx	lr

0800077c <HAL_ADC_ErrorCallback>:
{
 800077c:	4770      	bx	lr

0800077e <HAL_ADC_IRQHandler>:
{
 800077e:	b538      	push	{r3, r4, r5, lr}
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8000780:	6803      	ldr	r3, [r0, #0]
 8000782:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8000784:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8000786:	078d      	lsls	r5, r1, #30
{
 8000788:	4604      	mov	r4, r0
  if(tmp1 && tmp2)
 800078a:	d52b      	bpl.n	80007e4 <HAL_ADC_IRQHandler+0x66>
 800078c:	0690      	lsls	r0, r2, #26
 800078e:	d529      	bpl.n	80007e4 <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000790:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000792:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000794:	bf5e      	ittt	pl
 8000796:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 8000798:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 800079c:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800079e:	689a      	ldr	r2, [r3, #8]
 80007a0:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80007a4:	d117      	bne.n	80007d6 <HAL_ADC_IRQHandler+0x58>
 80007a6:	69a2      	ldr	r2, [r4, #24]
 80007a8:	b9aa      	cbnz	r2, 80007d6 <HAL_ADC_IRQHandler+0x58>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80007aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80007ac:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 80007b0:	d002      	beq.n	80007b8 <HAL_ADC_IRQHandler+0x3a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80007b2:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80007b4:	0552      	lsls	r2, r2, #21
 80007b6:	d40e      	bmi.n	80007d6 <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80007b8:	685a      	ldr	r2, [r3, #4]
 80007ba:	f022 0220 	bic.w	r2, r2, #32
 80007be:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80007c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007c6:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007ca:	04db      	lsls	r3, r3, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80007cc:	bf5e      	ittt	pl
 80007ce:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 80007d0:	f043 0301 	orrpl.w	r3, r3, #1
 80007d4:	6423      	strpl	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80007d6:	4620      	mov	r0, r4
 80007d8:	f7ff ffce 	bl	8000778 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80007dc:	6823      	ldr	r3, [r4, #0]
 80007de:	f06f 0212 	mvn.w	r2, #18
 80007e2:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80007e4:	6823      	ldr	r3, [r4, #0]
 80007e6:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80007e8:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80007ea:	074d      	lsls	r5, r1, #29
 80007ec:	d532      	bpl.n	8000854 <HAL_ADC_IRQHandler+0xd6>
 80007ee:	0610      	lsls	r0, r2, #24
 80007f0:	d530      	bpl.n	8000854 <HAL_ADC_IRQHandler+0xd6>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80007f2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80007f4:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80007f6:	bf5e      	ittt	pl
 80007f8:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 80007fa:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 80007fe:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000800:	689a      	ldr	r2, [r3, #8]
 8000802:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8000806:	d11e      	bne.n	8000846 <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000808:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800080a:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800080e:	d002      	beq.n	8000816 <HAL_ADC_IRQHandler+0x98>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000810:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000812:	0552      	lsls	r2, r2, #21
 8000814:	d417      	bmi.n	8000846 <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000816:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000818:	0555      	lsls	r5, r2, #21
 800081a:	d414      	bmi.n	8000846 <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800081c:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800081e:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000822:	d110      	bne.n	8000846 <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000824:	69a2      	ldr	r2, [r4, #24]
 8000826:	b972      	cbnz	r2, 8000846 <HAL_ADC_IRQHandler+0xc8>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000828:	685a      	ldr	r2, [r3, #4]
 800082a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800082e:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000830:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000832:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000836:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000838:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800083a:	05d8      	lsls	r0, r3, #23
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800083c:	bf5e      	ittt	pl
 800083e:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 8000840:	f043 0301 	orrpl.w	r3, r3, #1
 8000844:	6423      	strpl	r3, [r4, #64]	; 0x40
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000846:	4620      	mov	r0, r4
 8000848:	f000 f8c4 	bl	80009d4 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800084c:	6823      	ldr	r3, [r4, #0]
 800084e:	f06f 020c 	mvn.w	r2, #12
 8000852:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8000854:	6823      	ldr	r3, [r4, #0]
 8000856:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8000858:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 800085a:	07c9      	lsls	r1, r1, #31
 800085c:	d50f      	bpl.n	800087e <HAL_ADC_IRQHandler+0x100>
 800085e:	0655      	lsls	r5, r2, #25
 8000860:	d50d      	bpl.n	800087e <HAL_ADC_IRQHandler+0x100>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	07d8      	lsls	r0, r3, #31
 8000866:	d50a      	bpl.n	800087e <HAL_ADC_IRQHandler+0x100>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000868:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800086a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800086e:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000870:	4620      	mov	r0, r4
 8000872:	f7ff ff82 	bl	800077a <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000876:	6823      	ldr	r3, [r4, #0]
 8000878:	f06f 0201 	mvn.w	r2, #1
 800087c:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800087e:	6823      	ldr	r3, [r4, #0]
 8000880:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8000882:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8000884:	0689      	lsls	r1, r1, #26
 8000886:	d50d      	bpl.n	80008a4 <HAL_ADC_IRQHandler+0x126>
 8000888:	0152      	lsls	r2, r2, #5
 800088a:	d50b      	bpl.n	80008a4 <HAL_ADC_IRQHandler+0x126>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800088c:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800088e:	f06f 0520 	mvn.w	r5, #32
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000892:	f042 0202 	orr.w	r2, r2, #2
 8000896:	6462      	str	r2, [r4, #68]	; 0x44
    HAL_ADC_ErrorCallback(hadc);
 8000898:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800089a:	601d      	str	r5, [r3, #0]
    HAL_ADC_ErrorCallback(hadc);
 800089c:	f7ff ff6e 	bl	800077c <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80008a0:	6823      	ldr	r3, [r4, #0]
 80008a2:	601d      	str	r5, [r3, #0]
 80008a4:	bd38      	pop	{r3, r4, r5, pc}
	...

080008a8 <HAL_ADC_ConfigChannel>:
{
 80008a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 80008aa:	2300      	movs	r3, #0
 80008ac:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80008ae:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	f000 8083 	beq.w	80009be <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 80008b8:	680d      	ldr	r5, [r1, #0]
 80008ba:	6804      	ldr	r4, [r0, #0]
 80008bc:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 80008be:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 80008c0:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 80008c2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80008c6:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 80008c8:	d92a      	bls.n	8000920 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80008ca:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80008ce:	68e7      	ldr	r7, [r4, #12]
 80008d0:	3b1e      	subs	r3, #30
 80008d2:	f04f 0e07 	mov.w	lr, #7
 80008d6:	fa0e fe03 	lsl.w	lr, lr, r3
 80008da:	ea27 070e 	bic.w	r7, r7, lr
 80008de:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80008e0:	68e7      	ldr	r7, [r4, #12]
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	433b      	orrs	r3, r7
 80008e8:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 80008ea:	684a      	ldr	r2, [r1, #4]
 80008ec:	2a06      	cmp	r2, #6
 80008ee:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80008f2:	d825      	bhi.n	8000940 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80008f4:	4413      	add	r3, r2
 80008f6:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80008f8:	1f59      	subs	r1, r3, #5
 80008fa:	231f      	movs	r3, #31
 80008fc:	408b      	lsls	r3, r1
 80008fe:	ea27 0303 	bic.w	r3, r7, r3
 8000902:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000904:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000906:	fa06 f101 	lsl.w	r1, r6, r1
 800090a:	4311      	orrs	r1, r2
 800090c:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800090e:	4b2d      	ldr	r3, [pc, #180]	; (80009c4 <HAL_ADC_ConfigChannel+0x11c>)
 8000910:	429c      	cmp	r4, r3
 8000912:	d034      	beq.n	800097e <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 8000914:	2300      	movs	r3, #0
 8000916:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800091a:	4618      	mov	r0, r3
}
 800091c:	b003      	add	sp, #12
 800091e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000920:	6927      	ldr	r7, [r4, #16]
 8000922:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000926:	f04f 0e07 	mov.w	lr, #7
 800092a:	fa0e fe03 	lsl.w	lr, lr, r3
 800092e:	ea27 070e 	bic.w	r7, r7, lr
 8000932:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000934:	6927      	ldr	r7, [r4, #16]
 8000936:	fa02 f303 	lsl.w	r3, r2, r3
 800093a:	433b      	orrs	r3, r7
 800093c:	6123      	str	r3, [r4, #16]
 800093e:	e7d4      	b.n	80008ea <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 8000940:	2a0c      	cmp	r2, #12
 8000942:	d80e      	bhi.n	8000962 <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000944:	4413      	add	r3, r2
 8000946:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000948:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 800094c:	231f      	movs	r3, #31
 800094e:	4093      	lsls	r3, r2
 8000950:	ea21 0303 	bic.w	r3, r1, r3
 8000954:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000956:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000958:	fa06 f202 	lsl.w	r2, r6, r2
 800095c:	431a      	orrs	r2, r3
 800095e:	6322      	str	r2, [r4, #48]	; 0x30
 8000960:	e7d5      	b.n	800090e <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000962:	4413      	add	r3, r2
 8000964:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000966:	3b41      	subs	r3, #65	; 0x41
 8000968:	221f      	movs	r2, #31
 800096a:	409a      	lsls	r2, r3
 800096c:	ea21 0202 	bic.w	r2, r1, r2
 8000970:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000972:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000974:	fa06 f103 	lsl.w	r1, r6, r3
 8000978:	4311      	orrs	r1, r2
 800097a:	62e1      	str	r1, [r4, #44]	; 0x2c
 800097c:	e7c7      	b.n	800090e <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800097e:	2d12      	cmp	r5, #18
 8000980:	d104      	bne.n	800098c <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000982:	4a11      	ldr	r2, [pc, #68]	; (80009c8 <HAL_ADC_ConfigChannel+0x120>)
 8000984:	6853      	ldr	r3, [r2, #4]
 8000986:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800098a:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800098c:	f1a5 0310 	sub.w	r3, r5, #16
 8000990:	2b01      	cmp	r3, #1
 8000992:	d8bf      	bhi.n	8000914 <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000994:	4a0c      	ldr	r2, [pc, #48]	; (80009c8 <HAL_ADC_ConfigChannel+0x120>)
 8000996:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000998:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800099a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800099e:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80009a0:	d1b8      	bne.n	8000914 <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80009a2:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <HAL_ADC_ConfigChannel+0x124>)
 80009a4:	4a0a      	ldr	r2, [pc, #40]	; (80009d0 <HAL_ADC_ConfigChannel+0x128>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	fbb3 f2f2 	udiv	r2, r3, r2
 80009ac:	230a      	movs	r3, #10
 80009ae:	4353      	muls	r3, r2
        counter--;
 80009b0:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80009b2:	9b01      	ldr	r3, [sp, #4]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d0ad      	beq.n	8000914 <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 80009b8:	9b01      	ldr	r3, [sp, #4]
 80009ba:	3b01      	subs	r3, #1
 80009bc:	e7f8      	b.n	80009b0 <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 80009be:	2002      	movs	r0, #2
 80009c0:	e7ac      	b.n	800091c <HAL_ADC_ConfigChannel+0x74>
 80009c2:	bf00      	nop
 80009c4:	40012000 	.word	0x40012000
 80009c8:	40012300 	.word	0x40012300
 80009cc:	20000014 	.word	0x20000014
 80009d0:	000f4240 	.word	0x000f4240

080009d4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80009d4:	4770      	bx	lr
	...

080009d8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009d8:	4a07      	ldr	r2, [pc, #28]	; (80009f8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80009da:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009dc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80009e0:	041b      	lsls	r3, r3, #16
 80009e2:	0c1b      	lsrs	r3, r3, #16
 80009e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80009e8:	0200      	lsls	r0, r0, #8
 80009ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ee:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80009f2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80009f4:	60d3      	str	r3, [r2, #12]
 80009f6:	4770      	bx	lr
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009fc:	4b17      	ldr	r3, [pc, #92]	; (8000a5c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009fe:	b530      	push	{r4, r5, lr}
 8000a00:	68dc      	ldr	r4, [r3, #12]
 8000a02:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a06:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a0a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a0c:	2b04      	cmp	r3, #4
 8000a0e:	bf28      	it	cs
 8000a10:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a12:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a14:	f04f 0501 	mov.w	r5, #1
 8000a18:	fa05 f303 	lsl.w	r3, r5, r3
 8000a1c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a20:	bf8c      	ite	hi
 8000a22:	3c03      	subhi	r4, #3
 8000a24:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a26:	4019      	ands	r1, r3
 8000a28:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a2a:	fa05 f404 	lsl.w	r4, r5, r4
 8000a2e:	3c01      	subs	r4, #1
 8000a30:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000a32:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a34:	ea42 0201 	orr.w	r2, r2, r1
 8000a38:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3c:	bfaf      	iteee	ge
 8000a3e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a42:	f000 000f 	andlt.w	r0, r0, #15
 8000a46:	4b06      	ldrlt	r3, [pc, #24]	; (8000a60 <HAL_NVIC_SetPriority+0x64>)
 8000a48:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4a:	bfa5      	ittet	ge
 8000a4c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000a50:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a52:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a54:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000a58:	bd30      	pop	{r4, r5, pc}
 8000a5a:	bf00      	nop
 8000a5c:	e000ed00 	.word	0xe000ed00
 8000a60:	e000ed14 	.word	0xe000ed14

08000a64 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000a64:	0942      	lsrs	r2, r0, #5
 8000a66:	2301      	movs	r3, #1
 8000a68:	f000 001f 	and.w	r0, r0, #31
 8000a6c:	fa03 f000 	lsl.w	r0, r3, r0
 8000a70:	4b01      	ldr	r3, [pc, #4]	; (8000a78 <HAL_NVIC_EnableIRQ+0x14>)
 8000a72:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000a76:	4770      	bx	lr
 8000a78:	e000e100 	.word	0xe000e100

08000a7c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a7c:	3801      	subs	r0, #1
 8000a7e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a82:	d20a      	bcs.n	8000a9a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a86:	4a07      	ldr	r2, [pc, #28]	; (8000aa4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a88:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8a:	21f0      	movs	r1, #240	; 0xf0
 8000a8c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a90:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a92:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a94:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000a9a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000e010 	.word	0xe000e010
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000aa8:	6803      	ldr	r3, [r0, #0]
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000ab0:	f023 0303 	bic.w	r3, r3, #3
 8000ab4:	2118      	movs	r1, #24
 8000ab6:	3a10      	subs	r2, #16
 8000ab8:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000abc:	4904      	ldr	r1, [pc, #16]	; (8000ad0 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8000abe:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000ac0:	bf88      	it	hi
 8000ac2:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000ac4:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000ac6:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000ac8:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 8000aca:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	08004aa4 	.word	0x08004aa4

08000ad4 <HAL_DMA_Init>:
{
 8000ad4:	b570      	push	{r4, r5, r6, lr}
 8000ad6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ad8:	f7ff fda4 	bl	8000624 <HAL_GetTick>
 8000adc:	4605      	mov	r5, r0
  if(hdma == NULL)
 8000ade:	2c00      	cmp	r4, #0
 8000ae0:	d071      	beq.n	8000bc6 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8000ae8:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8000aea:	2302      	movs	r3, #2
 8000aec:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000af0:	6813      	ldr	r3, [r2, #0]
 8000af2:	f023 0301 	bic.w	r3, r3, #1
 8000af6:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000af8:	6821      	ldr	r1, [r4, #0]
 8000afa:	680b      	ldr	r3, [r1, #0]
 8000afc:	07d8      	lsls	r0, r3, #31
 8000afe:	d43c      	bmi.n	8000b7a <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8000b00:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000b02:	4d32      	ldr	r5, [pc, #200]	; (8000bcc <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000b04:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b06:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000b08:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000b0a:	68a3      	ldr	r3, [r4, #8]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	68e2      	ldr	r2, [r4, #12]
 8000b10:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b12:	6922      	ldr	r2, [r4, #16]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	6962      	ldr	r2, [r4, #20]
 8000b18:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b1a:	69e2      	ldr	r2, [r4, #28]
 8000b1c:	4303      	orrs	r3, r0
 8000b1e:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b20:	6a22      	ldr	r2, [r4, #32]
 8000b22:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000b24:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b26:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000b28:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000b2c:	bf01      	itttt	eq
 8000b2e:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8000b30:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8000b32:	4335      	orreq	r5, r6
 8000b34:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8000b36:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8000b38:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000b3a:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000b3c:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8000b40:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000b44:	d10b      	bne.n	8000b5e <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8000b46:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000b48:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8000b4a:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000b4c:	b13d      	cbz	r5, 8000b5e <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000b4e:	b9f8      	cbnz	r0, 8000b90 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8000b50:	2a01      	cmp	r2, #1
 8000b52:	d02d      	beq.n	8000bb0 <HAL_DMA_Init+0xdc>
 8000b54:	d301      	bcc.n	8000b5a <HAL_DMA_Init+0x86>
 8000b56:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000b58:	d101      	bne.n	8000b5e <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000b5a:	01ea      	lsls	r2, r5, #7
 8000b5c:	d42b      	bmi.n	8000bb6 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8000b5e:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000b60:	4620      	mov	r0, r4
 8000b62:	f7ff ffa1 	bl	8000aa8 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b66:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000b68:	233f      	movs	r3, #63	; 0x3f
 8000b6a:	4093      	lsls	r3, r2
 8000b6c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b6e:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000b70:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b72:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000b74:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000b78:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000b7a:	f7ff fd53 	bl	8000624 <HAL_GetTick>
 8000b7e:	1b40      	subs	r0, r0, r5
 8000b80:	2805      	cmp	r0, #5
 8000b82:	d9b9      	bls.n	8000af8 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000b84:	2320      	movs	r3, #32
 8000b86:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000b88:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8000b8a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000b8e:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000b90:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000b94:	d113      	bne.n	8000bbe <HAL_DMA_Init+0xea>
    switch (tmp)
 8000b96:	2a03      	cmp	r2, #3
 8000b98:	d8e1      	bhi.n	8000b5e <HAL_DMA_Init+0x8a>
 8000b9a:	a001      	add	r0, pc, #4	; (adr r0, 8000ba0 <HAL_DMA_Init+0xcc>)
 8000b9c:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000ba0:	08000bb7 	.word	0x08000bb7
 8000ba4:	08000b5b 	.word	0x08000b5b
 8000ba8:	08000bb7 	.word	0x08000bb7
 8000bac:	08000bb1 	.word	0x08000bb1
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000bb0:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8000bb4:	d1d3      	bne.n	8000b5e <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000bb6:	2340      	movs	r3, #64	; 0x40
 8000bb8:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000bba:	2001      	movs	r0, #1
 8000bbc:	e7e5      	b.n	8000b8a <HAL_DMA_Init+0xb6>
    switch (tmp)
 8000bbe:	2a02      	cmp	r2, #2
 8000bc0:	d9f9      	bls.n	8000bb6 <HAL_DMA_Init+0xe2>
 8000bc2:	2a03      	cmp	r2, #3
 8000bc4:	e7c8      	b.n	8000b58 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	bd70      	pop	{r4, r5, r6, pc}
 8000bca:	bf00      	nop
 8000bcc:	f010803f 	.word	0xf010803f

08000bd0 <HAL_DMA_Start_IT>:
{
 8000bd0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8000bd2:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8000bd6:	2c01      	cmp	r4, #1
 8000bd8:	d036      	beq.n	8000c48 <HAL_DMA_Start_IT+0x78>
 8000bda:	2401      	movs	r4, #1
 8000bdc:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000be0:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000be4:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 8000be6:	2c01      	cmp	r4, #1
 8000be8:	f04f 0500 	mov.w	r5, #0
 8000bec:	f04f 0402 	mov.w	r4, #2
 8000bf0:	d128      	bne.n	8000c44 <HAL_DMA_Start_IT+0x74>
    hdma->State = HAL_DMA_STATE_BUSY;
 8000bf2:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000bf6:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bf8:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000bfa:	6825      	ldr	r5, [r4, #0]
 8000bfc:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8000c00:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8000c02:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000c04:	6883      	ldr	r3, [r0, #8]
 8000c06:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8000c08:	bf0e      	itee	eq
 8000c0a:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8000c0c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8000c0e:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c10:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8000c12:	bf08      	it	eq
 8000c14:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c16:	233f      	movs	r3, #63	; 0x3f
 8000c18:	4093      	lsls	r3, r2
 8000c1a:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000c1c:	6823      	ldr	r3, [r4, #0]
 8000c1e:	f043 0316 	orr.w	r3, r3, #22
 8000c22:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000c24:	6963      	ldr	r3, [r4, #20]
 8000c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c2a:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8000c2c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000c2e:	b11b      	cbz	r3, 8000c38 <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000c30:	6823      	ldr	r3, [r4, #0]
 8000c32:	f043 0308 	orr.w	r3, r3, #8
 8000c36:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000c38:	6823      	ldr	r3, [r4, #0]
 8000c3a:	f043 0301 	orr.w	r3, r3, #1
 8000c3e:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c40:	2000      	movs	r0, #0
 8000c42:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8000c44:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8000c48:	2002      	movs	r0, #2
}
 8000c4a:	bd70      	pop	{r4, r5, r6, pc}

08000c4c <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c4c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000c50:	2b02      	cmp	r3, #2
 8000c52:	d003      	beq.n	8000c5c <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c54:	2380      	movs	r3, #128	; 0x80
 8000c56:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000c58:	2001      	movs	r0, #1
 8000c5a:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8000c5c:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000c5e:	2305      	movs	r3, #5
 8000c60:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000c64:	6813      	ldr	r3, [r2, #0]
 8000c66:	f023 0301 	bic.w	r3, r3, #1
 8000c6a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8000c6c:	2000      	movs	r0, #0
}
 8000c6e:	4770      	bx	lr

08000c70 <HAL_DMA_IRQHandler>:
{
 8000c70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8000c72:	2300      	movs	r3, #0
 8000c74:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000c76:	4b5a      	ldr	r3, [pc, #360]	; (8000de0 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000c78:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8000c7a:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000c7c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8000c7e:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000c80:	2208      	movs	r2, #8
 8000c82:	409a      	lsls	r2, r3
 8000c84:	4216      	tst	r6, r2
{
 8000c86:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000c88:	d00c      	beq.n	8000ca4 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000c8a:	6801      	ldr	r1, [r0, #0]
 8000c8c:	6808      	ldr	r0, [r1, #0]
 8000c8e:	0740      	lsls	r0, r0, #29
 8000c90:	d508      	bpl.n	8000ca4 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000c92:	6808      	ldr	r0, [r1, #0]
 8000c94:	f020 0004 	bic.w	r0, r0, #4
 8000c98:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000c9a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000c9c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000c9e:	f042 0201 	orr.w	r2, r2, #1
 8000ca2:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	409a      	lsls	r2, r3
 8000ca8:	4216      	tst	r6, r2
 8000caa:	d008      	beq.n	8000cbe <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000cac:	6821      	ldr	r1, [r4, #0]
 8000cae:	6949      	ldr	r1, [r1, #20]
 8000cb0:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000cb2:	bf41      	itttt	mi
 8000cb4:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000cb6:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000cb8:	f042 0202 	orrmi.w	r2, r2, #2
 8000cbc:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000cbe:	2204      	movs	r2, #4
 8000cc0:	409a      	lsls	r2, r3
 8000cc2:	4216      	tst	r6, r2
 8000cc4:	d008      	beq.n	8000cd8 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000cc6:	6821      	ldr	r1, [r4, #0]
 8000cc8:	6809      	ldr	r1, [r1, #0]
 8000cca:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000ccc:	bf41      	itttt	mi
 8000cce:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000cd0:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000cd2:	f042 0204 	orrmi.w	r2, r2, #4
 8000cd6:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000cd8:	2210      	movs	r2, #16
 8000cda:	409a      	lsls	r2, r3
 8000cdc:	4216      	tst	r6, r2
 8000cde:	d010      	beq.n	8000d02 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000ce0:	6823      	ldr	r3, [r4, #0]
 8000ce2:	6819      	ldr	r1, [r3, #0]
 8000ce4:	0709      	lsls	r1, r1, #28
 8000ce6:	d50c      	bpl.n	8000d02 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000ce8:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	0350      	lsls	r0, r2, #13
 8000cee:	d535      	bpl.n	8000d5c <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	0319      	lsls	r1, r3, #12
 8000cf4:	d401      	bmi.n	8000cfa <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8000cf6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000cf8:	e000      	b.n	8000cfc <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000cfa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8000cfc:	b10b      	cbz	r3, 8000d02 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8000cfe:	4620      	mov	r0, r4
 8000d00:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000d02:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000d04:	2220      	movs	r2, #32
 8000d06:	408a      	lsls	r2, r1
 8000d08:	4216      	tst	r6, r2
 8000d0a:	d038      	beq.n	8000d7e <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000d0c:	6823      	ldr	r3, [r4, #0]
 8000d0e:	6818      	ldr	r0, [r3, #0]
 8000d10:	06c6      	lsls	r6, r0, #27
 8000d12:	d534      	bpl.n	8000d7e <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000d14:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000d16:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8000d1a:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d1c:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000d1e:	d125      	bne.n	8000d6c <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d20:	f022 0216 	bic.w	r2, r2, #22
 8000d24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d26:	695a      	ldr	r2, [r3, #20]
 8000d28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d2c:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d2e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000d30:	b90a      	cbnz	r2, 8000d36 <HAL_DMA_IRQHandler+0xc6>
 8000d32:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000d34:	b11a      	cbz	r2, 8000d3e <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	f022 0208 	bic.w	r2, r2, #8
 8000d3c:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d3e:	233f      	movs	r3, #63	; 0x3f
 8000d40:	408b      	lsls	r3, r1
 8000d42:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8000d44:	2300      	movs	r3, #0
 8000d46:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000d50:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8000d52:	b10b      	cbz	r3, 8000d58 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8000d54:	4620      	mov	r0, r4
 8000d56:	4798      	blx	r3
}
 8000d58:	b003      	add	sp, #12
 8000d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d60:	bf5e      	ittt	pl
 8000d62:	681a      	ldrpl	r2, [r3, #0]
 8000d64:	f022 0208 	bicpl.w	r2, r2, #8
 8000d68:	601a      	strpl	r2, [r3, #0]
 8000d6a:	e7c4      	b.n	8000cf6 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000d6c:	0350      	lsls	r0, r2, #13
 8000d6e:	d528      	bpl.n	8000dc2 <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	0319      	lsls	r1, r3, #12
 8000d74:	d432      	bmi.n	8000ddc <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8000d76:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8000d78:	b10b      	cbz	r3, 8000d7e <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8000d7a:	4620      	mov	r0, r4
 8000d7c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000d7e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d0e9      	beq.n	8000d58 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000d84:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000d86:	07da      	lsls	r2, r3, #31
 8000d88:	d519      	bpl.n	8000dbe <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000d8a:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8000d8c:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8000d8e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000d92:	6813      	ldr	r3, [r2, #0]
 8000d94:	f023 0301 	bic.w	r3, r3, #1
 8000d98:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000d9a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000d9e:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8000da2:	9b01      	ldr	r3, [sp, #4]
 8000da4:	3301      	adds	r3, #1
 8000da6:	429f      	cmp	r7, r3
 8000da8:	9301      	str	r3, [sp, #4]
 8000daa:	d302      	bcc.n	8000db2 <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000dac:	6813      	ldr	r3, [r2, #0]
 8000dae:	07db      	lsls	r3, r3, #31
 8000db0:	d4f7      	bmi.n	8000da2 <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 8000db2:	2300      	movs	r3, #0
 8000db4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000db8:	2301      	movs	r3, #1
 8000dba:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000dbe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000dc0:	e7c7      	b.n	8000d52 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000dc8:	d108      	bne.n	8000ddc <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000dca:	6819      	ldr	r1, [r3, #0]
 8000dcc:	f021 0110 	bic.w	r1, r1, #16
 8000dd0:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000dd2:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8000dd4:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000dd8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000ddc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000dde:	e7cb      	b.n	8000d78 <HAL_DMA_IRQHandler+0x108>
 8000de0:	20000014 	.word	0x20000014

08000de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000de8:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dea:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dec:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8000f8c <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000df0:	4a64      	ldr	r2, [pc, #400]	; (8000f84 <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000df2:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8000df4:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000df8:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dfa:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000dfc:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e00:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 8000e04:	42b7      	cmp	r7, r6
 8000e06:	f040 80ad 	bne.w	8000f64 <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e0a:	684c      	ldr	r4, [r1, #4]
 8000e0c:	f024 0a10 	bic.w	sl, r4, #16
 8000e10:	f1ba 0f02 	cmp.w	sl, #2
 8000e14:	d116      	bne.n	8000e44 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 8000e16:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8000e1a:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e1e:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000e22:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e26:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000e2a:	f04f 0e0f 	mov.w	lr, #15
 8000e2e:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000e32:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e36:	690d      	ldr	r5, [r1, #16]
 8000e38:	fa05 f50b 	lsl.w	r5, r5, fp
 8000e3c:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000e40:	f8cc 5020 	str.w	r5, [ip, #32]
 8000e44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e48:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000e4a:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e4e:	fa05 f50c 	lsl.w	r5, r5, ip
 8000e52:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e54:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e58:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e5c:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e60:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e64:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e68:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e6c:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 8000e6e:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e72:	d815      	bhi.n	8000ea0 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 8000e74:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e78:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e7c:	68cd      	ldr	r5, [r1, #12]
 8000e7e:	fa05 fa0c 	lsl.w	sl, r5, ip
 8000e82:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 8000e86:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8000e8a:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e8e:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e92:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 8000e96:	fa0e fe03 	lsl.w	lr, lr, r3
 8000e9a:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 8000e9e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000ea0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ea2:	9d00      	ldr	r5, [sp, #0]
 8000ea4:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ea6:	688f      	ldr	r7, [r1, #8]
 8000ea8:	fa07 f70c 	lsl.w	r7, r7, ip
 8000eac:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000eae:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000eb0:	00e5      	lsls	r5, r4, #3
 8000eb2:	d557      	bpl.n	8000f64 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb4:	f04f 0b00 	mov.w	fp, #0
 8000eb8:	f8cd b00c 	str.w	fp, [sp, #12]
 8000ebc:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ec0:	4d31      	ldr	r5, [pc, #196]	; (8000f88 <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec2:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000ec6:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000eca:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000ece:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000ed2:	9703      	str	r7, [sp, #12]
 8000ed4:	9f03      	ldr	r7, [sp, #12]
 8000ed6:	f023 0703 	bic.w	r7, r3, #3
 8000eda:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000ede:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ee2:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000ee6:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000eea:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000eee:	f04f 0e0f 	mov.w	lr, #15
 8000ef2:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ef6:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ef8:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000efc:	d039      	beq.n	8000f72 <HAL_GPIO_Init+0x18e>
 8000efe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f02:	42a8      	cmp	r0, r5
 8000f04:	d037      	beq.n	8000f76 <HAL_GPIO_Init+0x192>
 8000f06:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f0a:	42a8      	cmp	r0, r5
 8000f0c:	d035      	beq.n	8000f7a <HAL_GPIO_Init+0x196>
 8000f0e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f12:	42a8      	cmp	r0, r5
 8000f14:	d033      	beq.n	8000f7e <HAL_GPIO_Init+0x19a>
 8000f16:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f1a:	42a8      	cmp	r0, r5
 8000f1c:	bf14      	ite	ne
 8000f1e:	2507      	movne	r5, #7
 8000f20:	2504      	moveq	r5, #4
 8000f22:	fa05 f50c 	lsl.w	r5, r5, ip
 8000f26:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f2a:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000f2c:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000f2e:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f30:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000f34:	bf0c      	ite	eq
 8000f36:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000f38:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000f3a:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000f3c:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f3e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000f42:	bf0c      	ite	eq
 8000f44:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000f46:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000f48:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f4a:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f4c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000f50:	bf0c      	ite	eq
 8000f52:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000f54:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000f56:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000f58:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f5a:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000f5c:	bf54      	ite	pl
 8000f5e:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000f60:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000f62:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f64:	3301      	adds	r3, #1
 8000f66:	2b10      	cmp	r3, #16
 8000f68:	f47f af47 	bne.w	8000dfa <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000f6c:	b005      	add	sp, #20
 8000f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f72:	465d      	mov	r5, fp
 8000f74:	e7d5      	b.n	8000f22 <HAL_GPIO_Init+0x13e>
 8000f76:	2501      	movs	r5, #1
 8000f78:	e7d3      	b.n	8000f22 <HAL_GPIO_Init+0x13e>
 8000f7a:	2502      	movs	r5, #2
 8000f7c:	e7d1      	b.n	8000f22 <HAL_GPIO_Init+0x13e>
 8000f7e:	2503      	movs	r5, #3
 8000f80:	e7cf      	b.n	8000f22 <HAL_GPIO_Init+0x13e>
 8000f82:	bf00      	nop
 8000f84:	40013c00 	.word	0x40013c00
 8000f88:	40020000 	.word	0x40020000
 8000f8c:	40023800 	.word	0x40023800

08000f90 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f90:	b10a      	cbz	r2, 8000f96 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f92:	6181      	str	r1, [r0, #24]
 8000f94:	4770      	bx	lr
 8000f96:	0409      	lsls	r1, r1, #16
 8000f98:	e7fb      	b.n	8000f92 <HAL_GPIO_WritePin+0x2>
	...

08000f9c <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f9c:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange = 0U;
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8000f9e:	4604      	mov	r4, r0
 8000fa0:	2800      	cmp	r0, #0
 8000fa2:	d062      	beq.n	800106a <HAL_I2C_Init+0xce>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000fa4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000fa8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000fac:	b91b      	cbnz	r3, 8000fb6 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000fae:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000fb2:	f001 ff77 	bl	8002ea4 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000fb6:	6822      	ldr	r2, [r4, #0]
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000fb8:	4e2d      	ldr	r6, [pc, #180]	; (8001070 <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 8000fba:	4d2e      	ldr	r5, [pc, #184]	; (8001074 <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000fbc:	2324      	movs	r3, #36	; 0x24
 8000fbe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000fc2:	6813      	ldr	r3, [r2, #0]
 8000fc4:	f023 0301 	bic.w	r3, r3, #1
 8000fc8:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000fca:	f000 ff67 	bl	8001e9c <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000fce:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 8000fd0:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000fd2:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000fd6:	42b3      	cmp	r3, r6
 8000fd8:	bf84      	itt	hi
 8000fda:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 8000fde:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 8000fe0:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000fe2:	bf91      	iteee	ls
 8000fe4:	1c69      	addls	r1, r5, #1
 8000fe6:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 8000fea:	fbb1 f1f5 	udivhi	r1, r1, r5
 8000fee:	3101      	addhi	r1, #1

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000ff0:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000ff2:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000ff4:	d821      	bhi.n	800103a <HAL_I2C_Init+0x9e>
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ffc:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001000:	2b03      	cmp	r3, #3
 8001002:	bf98      	it	ls
 8001004:	2004      	movls	r0, #4

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001006:	6a21      	ldr	r1, [r4, #32]
 8001008:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800100a:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800100c:	430b      	orrs	r3, r1
 800100e:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001010:	68e1      	ldr	r1, [r4, #12]
 8001012:	6923      	ldr	r3, [r4, #16]
 8001014:	430b      	orrs	r3, r1
 8001016:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001018:	69a1      	ldr	r1, [r4, #24]
 800101a:	6963      	ldr	r3, [r4, #20]
 800101c:	430b      	orrs	r3, r1
 800101e:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001020:	6813      	ldr	r3, [r2, #0]
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001028:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800102a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800102c:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800102e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001032:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001034:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8001038:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800103a:	68a1      	ldr	r1, [r4, #8]
 800103c:	b949      	cbnz	r1, 8001052 <HAL_I2C_Init+0xb6>
 800103e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001042:	fbb0 f0f3 	udiv	r0, r0, r3
 8001046:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800104a:	b163      	cbz	r3, 8001066 <HAL_I2C_Init+0xca>
 800104c:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8001050:	e7d9      	b.n	8001006 <HAL_I2C_Init+0x6a>
 8001052:	2119      	movs	r1, #25
 8001054:	434b      	muls	r3, r1
 8001056:	fbb0 f0f3 	udiv	r0, r0, r3
 800105a:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800105e:	b113      	cbz	r3, 8001066 <HAL_I2C_Init+0xca>
 8001060:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8001064:	e7cf      	b.n	8001006 <HAL_I2C_Init+0x6a>
 8001066:	2001      	movs	r0, #1
 8001068:	e7cd      	b.n	8001006 <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 800106a:	2001      	movs	r0, #1
}
 800106c:	bd70      	pop	{r4, r5, r6, pc}
 800106e:	bf00      	nop
 8001070:	000186a0 	.word	0x000186a0
 8001074:	000f4240 	.word	0x000f4240

08001078 <HAL_I2C_MasterTxCpltCallback>:
 8001078:	4770      	bx	lr

0800107a <HAL_I2C_MasterRxCpltCallback>:
 800107a:	4770      	bx	lr

0800107c <HAL_I2C_SlaveTxCpltCallback>:
 800107c:	4770      	bx	lr

0800107e <HAL_I2C_SlaveRxCpltCallback>:
 800107e:	4770      	bx	lr

08001080 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferOptions_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001080:	4770      	bx	lr

08001082 <HAL_I2C_ListenCpltCallback>:
 8001082:	4770      	bx	lr

08001084 <HAL_I2C_MemTxCpltCallback>:
 8001084:	4770      	bx	lr

08001086 <HAL_I2C_MemRxCpltCallback>:
 8001086:	4770      	bx	lr

08001088 <HAL_I2C_ErrorCallback>:
 8001088:	4770      	bx	lr

0800108a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800108a:	4770      	bx	lr

0800108c <I2C_ITError>:
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 800108c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d

  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001090:	3b29      	subs	r3, #41	; 0x29
 8001092:	2b01      	cmp	r3, #1
{
 8001094:	b510      	push	{r4, lr}
 8001096:	6803      	ldr	r3, [r0, #0]
 8001098:	4604      	mov	r4, r0
  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800109a:	d839      	bhi.n	8001110 <I2C_ITError+0x84>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800109c:	2200      	movs	r2, #0
 800109e:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80010a0:	2228      	movs	r2, #40	; 0x28
 80010a2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->Mode = HAL_I2C_MODE_NONE;
  }

  /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
  hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010ac:	601a      	str	r2, [r3, #0]

  /* Abort DMA transfer */
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80010ae:	685a      	ldr	r2, [r3, #4]
 80010b0:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 80010b4:	d054      	beq.n	8001160 <I2C_ITError+0xd4>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80010b6:	685a      	ldr	r2, [r3, #4]

    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80010b8:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80010ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010be:	605a      	str	r2, [r3, #4]
    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80010c0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	4b39      	ldr	r3, [pc, #228]	; (80011ac <I2C_ITError+0x120>)
 80010c8:	d031      	beq.n	800112e <I2C_ITError+0xa2>
    {
      /* Set the DMA Abort callback : 
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80010ca:	6503      	str	r3, [r0, #80]	; 0x50

      if(HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80010cc:	f7ff fdbe 	bl	8000c4c <HAL_DMA_Abort_IT>
 80010d0:	b150      	cbz	r0, 80010e8 <I2C_ITError+0x5c>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80010d2:	6822      	ldr	r2, [r4, #0]

        hi2c->State = HAL_I2C_STATE_READY;

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80010d4:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 80010d6:	6813      	ldr	r3, [r2, #0]
 80010d8:	f023 0301 	bic.w	r3, r3, #1
 80010dc:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80010de:	2320      	movs	r3, #32
 80010e0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_I2C_DISABLE(hi2c);

        hi2c->State = HAL_I2C_STATE_READY;

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80010e4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80010e6:	4798      	blx	r3
    HAL_I2C_ErrorCallback(hi2c);
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
 80010e8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80010ec:	2b28      	cmp	r3, #40	; 0x28
 80010ee:	d10e      	bne.n	800110e <I2C_ITError+0x82>
 80010f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010f2:	075b      	lsls	r3, r3, #29
 80010f4:	d50b      	bpl.n	800110e <I2C_ITError+0x82>
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80010f6:	4b2e      	ldr	r3, [pc, #184]	; (80011b0 <I2C_ITError+0x124>)
 80010f8:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State = HAL_I2C_STATE_READY;
 80010fa:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 80010fc:	2300      	movs	r3, #0
 80010fe:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
    
    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    HAL_I2C_ListenCpltCallback(hi2c);
 8001100:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 8001102:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001106:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 800110a:	f7ff ffba 	bl	8001082 <HAL_I2C_ListenCpltCallback>
 800110e:	bd10      	pop	{r4, pc}
    if((hi2c->State != HAL_I2C_STATE_ABORT) && ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) != I2C_CR2_DMAEN))
 8001110:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8001114:	2a60      	cmp	r2, #96	; 0x60
 8001116:	d005      	beq.n	8001124 <I2C_ITError+0x98>
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	0512      	lsls	r2, r2, #20
      hi2c->State = HAL_I2C_STATE_READY;
 800111c:	bf5c      	itt	pl
 800111e:	2220      	movpl	r2, #32
 8001120:	f880 203d 	strbpl.w	r2, [r0, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8001124:	2200      	movs	r2, #0
 8001126:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001128:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 800112c:	e7bb      	b.n	80010a6 <I2C_ITError+0x1a>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800112e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001130:	6503      	str	r3, [r0, #80]	; 0x50
      if(HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001132:	f7ff fd8b 	bl	8000c4c <HAL_DMA_Abort_IT>
 8001136:	2800      	cmp	r0, #0
 8001138:	d0d6      	beq.n	80010e8 <I2C_ITError+0x5c>
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800113a:	6822      	ldr	r2, [r4, #0]
 800113c:	6953      	ldr	r3, [r2, #20]
 800113e:	0658      	lsls	r0, r3, #25
 8001140:	d504      	bpl.n	800114c <I2C_ITError+0xc0>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001142:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001144:	6912      	ldr	r2, [r2, #16]
 8001146:	1c59      	adds	r1, r3, #1
 8001148:	6261      	str	r1, [r4, #36]	; 0x24
 800114a:	701a      	strb	r2, [r3, #0]
        __HAL_I2C_DISABLE(hi2c);
 800114c:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800114e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 8001150:	6813      	ldr	r3, [r2, #0]
 8001152:	f023 0301 	bic.w	r3, r3, #1
 8001156:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8001158:	2320      	movs	r3, #32
 800115a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 800115e:	e7c1      	b.n	80010e4 <I2C_ITError+0x58>
  else if(hi2c->State == HAL_I2C_STATE_ABORT)
 8001160:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8001164:	2960      	cmp	r1, #96	; 0x60
 8001166:	d114      	bne.n	8001192 <I2C_ITError+0x106>
    hi2c->State = HAL_I2C_STATE_READY;
 8001168:	2120      	movs	r1, #32
 800116a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800116e:	6422      	str	r2, [r4, #64]	; 0x40
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001170:	695a      	ldr	r2, [r3, #20]
 8001172:	0651      	lsls	r1, r2, #25
 8001174:	d504      	bpl.n	8001180 <I2C_ITError+0xf4>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001176:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001178:	691b      	ldr	r3, [r3, #16]
 800117a:	1c51      	adds	r1, r2, #1
 800117c:	6261      	str	r1, [r4, #36]	; 0x24
 800117e:	7013      	strb	r3, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 8001180:	6822      	ldr	r2, [r4, #0]
 8001182:	6813      	ldr	r3, [r2, #0]
 8001184:	f023 0301 	bic.w	r3, r3, #1
 8001188:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 800118a:	4620      	mov	r0, r4
 800118c:	f7ff ff7d 	bl	800108a <HAL_I2C_AbortCpltCallback>
 8001190:	e7aa      	b.n	80010e8 <I2C_ITError+0x5c>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001192:	695a      	ldr	r2, [r3, #20]
 8001194:	0652      	lsls	r2, r2, #25
 8001196:	d504      	bpl.n	80011a2 <I2C_ITError+0x116>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001198:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800119a:	691b      	ldr	r3, [r3, #16]
 800119c:	1c51      	adds	r1, r2, #1
 800119e:	6261      	str	r1, [r4, #36]	; 0x24
 80011a0:	7013      	strb	r3, [r2, #0]
    HAL_I2C_ErrorCallback(hi2c);
 80011a2:	4620      	mov	r0, r4
 80011a4:	f7ff ff70 	bl	8001088 <HAL_I2C_ErrorCallback>
 80011a8:	e79e      	b.n	80010e8 <I2C_ITError+0x5c>
 80011aa:	bf00      	nop
 80011ac:	080019bd 	.word	0x080019bd
 80011b0:	ffff0000 	.word	0xffff0000

080011b4 <HAL_I2C_EV_IRQHandler>:
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80011b4:	6803      	ldr	r3, [r0, #0]
{
 80011b6:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80011b8:	699d      	ldr	r5, [r3, #24]
  uint32_t sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80011ba:	6959      	ldr	r1, [r3, #20]
  uint32_t itsources    = READ_REG(hi2c->Instance->CR2);
 80011bc:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentMode  = hi2c->Mode;
 80011be:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
 80011c2:	b2e4      	uxtb	r4, r4
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80011c4:	2c10      	cmp	r4, #16
{
 80011c6:	b08d      	sub	sp, #52	; 0x34
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80011c8:	d002      	beq.n	80011d0 <HAL_I2C_EV_IRQHandler+0x1c>
 80011ca:	2c40      	cmp	r4, #64	; 0x40
 80011cc:	f040 8255 	bne.w	800167a <HAL_I2C_EV_IRQHandler+0x4c6>
    if(((sr1itflags & I2C_FLAG_SB) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80011d0:	f011 1f01 	tst.w	r1, #65537	; 0x10001
 80011d4:	d066      	beq.n	80012a4 <HAL_I2C_EV_IRQHandler+0xf0>
 80011d6:	0597      	lsls	r7, r2, #22
 80011d8:	d564      	bpl.n	80012a4 <HAL_I2C_EV_IRQHandler+0xf0>
  if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80011da:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
 80011de:	2c40      	cmp	r4, #64	; 0x40
 80011e0:	d143      	bne.n	800126a <HAL_I2C_EV_IRQHandler+0xb6>
    if(hi2c->EventCount == 0U)
 80011e2:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80011e4:	2c00      	cmp	r4, #0
 80011e6:	d13b      	bne.n	8001260 <HAL_I2C_EV_IRQHandler+0xac>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80011e8:	6c44      	ldr	r4, [r0, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80011ea:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80011ee:	611c      	str	r4, [r3, #16]
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 80011f0:	4e98      	ldr	r6, [pc, #608]	; (8001454 <HAL_I2C_EV_IRQHandler+0x2a0>)
 80011f2:	4c99      	ldr	r4, [pc, #612]	; (8001458 <HAL_I2C_EV_IRQHandler+0x2a4>)
 80011f4:	402e      	ands	r6, r5
 80011f6:	400c      	ands	r4, r1
 80011f8:	2e00      	cmp	r6, #0
 80011fa:	f000 819f 	beq.w	800153c <HAL_I2C_EV_IRQHandler+0x388>
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 80011fe:	4d97      	ldr	r5, [pc, #604]	; (800145c <HAL_I2C_EV_IRQHandler+0x2a8>)
 8001200:	400d      	ands	r5, r1
 8001202:	2d00      	cmp	r5, #0
 8001204:	f000 8166 	beq.w	80014d4 <HAL_I2C_EV_IRQHandler+0x320>
 8001208:	0555      	lsls	r5, r2, #21
 800120a:	f140 8163 	bpl.w	80014d4 <HAL_I2C_EV_IRQHandler+0x320>
 800120e:	2c00      	cmp	r4, #0
 8001210:	f040 8160 	bne.w	80014d4 <HAL_I2C_EV_IRQHandler+0x320>
  uint32_t CurrentState       = hi2c->State;
 8001214:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001218:	8d05      	ldrh	r5, [r0, #40]	; 0x28
  uint32_t CurrentMode        = hi2c->Mode;
 800121a:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800121e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  uint32_t CurrentState       = hi2c->State;
 8001220:	b2d2      	uxtb	r2, r2
  uint32_t CurrentMode        = hi2c->Mode;
 8001222:	b2c9      	uxtb	r1, r1
  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001224:	2d00      	cmp	r5, #0
 8001226:	f040 8105 	bne.w	8001434 <HAL_I2C_EV_IRQHandler+0x280>
 800122a:	2a21      	cmp	r2, #33	; 0x21
 800122c:	f040 8104 	bne.w	8001438 <HAL_I2C_EV_IRQHandler+0x284>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001230:	2c04      	cmp	r4, #4
 8001232:	f000 816c 	beq.w	800150e <HAL_I2C_EV_IRQHandler+0x35a>
 8001236:	2c08      	cmp	r4, #8
 8001238:	f000 8169 	beq.w	800150e <HAL_I2C_EV_IRQHandler+0x35a>
 800123c:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
 8001240:	f000 8165 	beq.w	800150e <HAL_I2C_EV_IRQHandler+0x35a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001244:	685a      	ldr	r2, [r3, #4]
 8001246:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800124a:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800124c:	2311      	movs	r3, #17
 800124e:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001250:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001254:	2320      	movs	r3, #32
 8001256:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800125a:	f7ff ff0d 	bl	8001078 <HAL_I2C_MasterTxCpltCallback>
 800125e:	e0f6      	b.n	800144e <HAL_I2C_EV_IRQHandler+0x29a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001260:	6c44      	ldr	r4, [r0, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001262:	f044 0401 	orr.w	r4, r4, #1
 8001266:	b2e4      	uxtb	r4, r4
 8001268:	e7c1      	b.n	80011ee <HAL_I2C_EV_IRQHandler+0x3a>
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800126a:	6904      	ldr	r4, [r0, #16]
 800126c:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 8001270:	d105      	bne.n	800127e <HAL_I2C_EV_IRQHandler+0xca>
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 8001272:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8001276:	2c21      	cmp	r4, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001278:	6c44      	ldr	r4, [r0, #68]	; 0x44
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 800127a:	d1f2      	bne.n	8001262 <HAL_I2C_EV_IRQHandler+0xae>
 800127c:	e7b5      	b.n	80011ea <HAL_I2C_EV_IRQHandler+0x36>
      if(hi2c->EventCount == 0U)
 800127e:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001280:	b934      	cbnz	r4, 8001290 <HAL_I2C_EV_IRQHandler+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001282:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001284:	11e4      	asrs	r4, r4, #7
 8001286:	f004 0406 	and.w	r4, r4, #6
 800128a:	f044 04f0 	orr.w	r4, r4, #240	; 0xf0
 800128e:	e7ae      	b.n	80011ee <HAL_I2C_EV_IRQHandler+0x3a>
      else if(hi2c->EventCount == 1U)
 8001290:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001292:	2c01      	cmp	r4, #1
 8001294:	d1ac      	bne.n	80011f0 <HAL_I2C_EV_IRQHandler+0x3c>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001296:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001298:	11e4      	asrs	r4, r4, #7
 800129a:	f004 0406 	and.w	r4, r4, #6
 800129e:	f044 04f1 	orr.w	r4, r4, #241	; 0xf1
 80012a2:	e7a4      	b.n	80011ee <HAL_I2C_EV_IRQHandler+0x3a>
    else if(((sr1itflags & I2C_FLAG_ADD10) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80012a4:	4c6e      	ldr	r4, [pc, #440]	; (8001460 <HAL_I2C_EV_IRQHandler+0x2ac>)
 80012a6:	400c      	ands	r4, r1
 80012a8:	b11c      	cbz	r4, 80012b2 <HAL_I2C_EV_IRQHandler+0xfe>
 80012aa:	0596      	lsls	r6, r2, #22
 80012ac:	d501      	bpl.n	80012b2 <HAL_I2C_EV_IRQHandler+0xfe>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80012ae:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80012b0:	e7d9      	b.n	8001266 <HAL_I2C_EV_IRQHandler+0xb2>
    else if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80012b2:	4c6c      	ldr	r4, [pc, #432]	; (8001464 <HAL_I2C_EV_IRQHandler+0x2b0>)
 80012b4:	400c      	ands	r4, r1
 80012b6:	2c00      	cmp	r4, #0
 80012b8:	d09a      	beq.n	80011f0 <HAL_I2C_EV_IRQHandler+0x3c>
 80012ba:	0594      	lsls	r4, r2, #22
 80012bc:	d598      	bpl.n	80011f0 <HAL_I2C_EV_IRQHandler+0x3c>
  uint32_t CurrentMode        = hi2c->Mode;
 80012be:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80012c2:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  uint32_t Prev_State         = hi2c->PreviousState;
 80012c4:	f8d0 e030 	ldr.w	lr, [r0, #48]	; 0x30
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80012c8:	f890 703d 	ldrb.w	r7, [r0, #61]	; 0x3d
 80012cc:	2f22      	cmp	r7, #34	; 0x22
  uint32_t CurrentMode        = hi2c->Mode;
 80012ce:	b2e4      	uxtb	r4, r4
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80012d0:	f040 80a8 	bne.w	8001424 <HAL_I2C_EV_IRQHandler+0x270>
    if((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80012d4:	6d07      	ldr	r7, [r0, #80]	; 0x50
 80012d6:	b947      	cbnz	r7, 80012ea <HAL_I2C_EV_IRQHandler+0x136>
 80012d8:	2c40      	cmp	r4, #64	; 0x40
 80012da:	d106      	bne.n	80012ea <HAL_I2C_EV_IRQHandler+0x136>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012dc:	9701      	str	r7, [sp, #4]
 80012de:	695c      	ldr	r4, [r3, #20]
 80012e0:	9401      	str	r4, [sp, #4]
 80012e2:	699c      	ldr	r4, [r3, #24]
 80012e4:	9401      	str	r4, [sp, #4]
 80012e6:	9c01      	ldr	r4, [sp, #4]
 80012e8:	e782      	b.n	80011f0 <HAL_I2C_EV_IRQHandler+0x3c>
    else if((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80012ea:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80012ec:	b98c      	cbnz	r4, 8001312 <HAL_I2C_EV_IRQHandler+0x15e>
 80012ee:	6907      	ldr	r7, [r0, #16]
 80012f0:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
 80012f4:	d10d      	bne.n	8001312 <HAL_I2C_EV_IRQHandler+0x15e>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012f6:	9402      	str	r4, [sp, #8]
 80012f8:	695c      	ldr	r4, [r3, #20]
 80012fa:	9402      	str	r4, [sp, #8]
 80012fc:	699c      	ldr	r4, [r3, #24]
 80012fe:	9402      	str	r4, [sp, #8]
 8001300:	9c02      	ldr	r4, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001302:	681c      	ldr	r4, [r3, #0]
 8001304:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8001308:	601c      	str	r4, [r3, #0]
      hi2c->EventCount++;
 800130a:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800130c:	3401      	adds	r4, #1
      hi2c->EventCount = 0U;
 800130e:	6504      	str	r4, [r0, #80]	; 0x50
 8001310:	e76e      	b.n	80011f0 <HAL_I2C_EV_IRQHandler+0x3c>
      if(hi2c->XferCount == 0U)
 8001312:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8001314:	b2a4      	uxth	r4, r4
 8001316:	b954      	cbnz	r4, 800132e <HAL_I2C_EV_IRQHandler+0x17a>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001318:	9403      	str	r4, [sp, #12]
 800131a:	695c      	ldr	r4, [r3, #20]
 800131c:	9403      	str	r4, [sp, #12]
 800131e:	699c      	ldr	r4, [r3, #24]
 8001320:	9403      	str	r4, [sp, #12]
 8001322:	9c03      	ldr	r4, [sp, #12]
            hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001324:	681c      	ldr	r4, [r3, #0]
 8001326:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 800132a:	601c      	str	r4, [r3, #0]
 800132c:	e019      	b.n	8001362 <HAL_I2C_EV_IRQHandler+0x1ae>
      else if(hi2c->XferCount == 1U)   
 800132e:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8001330:	b2a4      	uxth	r4, r4
 8001332:	2c01      	cmp	r4, #1
 8001334:	d142      	bne.n	80013bc <HAL_I2C_EV_IRQHandler+0x208>
        if(CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8001336:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 800133a:	d11b      	bne.n	8001374 <HAL_I2C_EV_IRQHandler+0x1c0>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800133c:	681c      	ldr	r4, [r3, #0]
 800133e:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8001342:	601c      	str	r4, [r3, #0]
          if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001344:	685c      	ldr	r4, [r3, #4]
 8001346:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
 800134a:	d00c      	beq.n	8001366 <HAL_I2C_EV_IRQHandler+0x1b2>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800134c:	681c      	ldr	r4, [r3, #0]
 800134e:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8001352:	601c      	str	r4, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001354:	2400      	movs	r4, #0
 8001356:	9404      	str	r4, [sp, #16]
 8001358:	695c      	ldr	r4, [r3, #20]
 800135a:	9404      	str	r4, [sp, #16]
 800135c:	699c      	ldr	r4, [r3, #24]
 800135e:	9404      	str	r4, [sp, #16]
 8001360:	9c04      	ldr	r4, [sp, #16]
      hi2c->EventCount = 0U;
 8001362:	2400      	movs	r4, #0
 8001364:	e7d3      	b.n	800130e <HAL_I2C_EV_IRQHandler+0x15a>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001366:	9405      	str	r4, [sp, #20]
 8001368:	695c      	ldr	r4, [r3, #20]
 800136a:	9405      	str	r4, [sp, #20]
 800136c:	699c      	ldr	r4, [r3, #24]
 800136e:	9405      	str	r4, [sp, #20]
 8001370:	9c05      	ldr	r4, [sp, #20]
 8001372:	e7d7      	b.n	8001324 <HAL_I2C_EV_IRQHandler+0x170>
        else if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8001374:	2e04      	cmp	r6, #4
 8001376:	d015      	beq.n	80013a4 <HAL_I2C_EV_IRQHandler+0x1f0>
 8001378:	2e08      	cmp	r6, #8
 800137a:	d013      	beq.n	80013a4 <HAL_I2C_EV_IRQHandler+0x1f0>
          && (Prev_State != I2C_STATE_MASTER_BUSY_RX))
 800137c:	f1be 0f12 	cmp.w	lr, #18
 8001380:	d010      	beq.n	80013a4 <HAL_I2C_EV_IRQHandler+0x1f0>
          if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8001382:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001384:	2c02      	cmp	r4, #2
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001386:	681c      	ldr	r4, [r3, #0]
 8001388:	bf14      	ite	ne
 800138a:	f424 6480 	bicne.w	r4, r4, #1024	; 0x400
            hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800138e:	f444 6480 	orreq.w	r4, r4, #1024	; 0x400
 8001392:	601c      	str	r4, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001394:	2400      	movs	r4, #0
 8001396:	9406      	str	r4, [sp, #24]
 8001398:	695c      	ldr	r4, [r3, #20]
 800139a:	9406      	str	r4, [sp, #24]
 800139c:	699c      	ldr	r4, [r3, #24]
 800139e:	9406      	str	r4, [sp, #24]
 80013a0:	9c06      	ldr	r4, [sp, #24]
 80013a2:	e7de      	b.n	8001362 <HAL_I2C_EV_IRQHandler+0x1ae>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80013a4:	681c      	ldr	r4, [r3, #0]
 80013a6:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 80013aa:	601c      	str	r4, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013ac:	2400      	movs	r4, #0
 80013ae:	9407      	str	r4, [sp, #28]
 80013b0:	695c      	ldr	r4, [r3, #20]
 80013b2:	9407      	str	r4, [sp, #28]
 80013b4:	699c      	ldr	r4, [r3, #24]
 80013b6:	9407      	str	r4, [sp, #28]
 80013b8:	9c07      	ldr	r4, [sp, #28]
 80013ba:	e7b3      	b.n	8001324 <HAL_I2C_EV_IRQHandler+0x170>
      else if(hi2c->XferCount == 2U)
 80013bc:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 80013be:	b2a4      	uxth	r4, r4
 80013c0:	2c02      	cmp	r4, #2
 80013c2:	d11c      	bne.n	80013fe <HAL_I2C_EV_IRQHandler+0x24a>
        if(hi2c->XferOptions != I2C_NEXT_FRAME)
 80013c4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80013c6:	2c02      	cmp	r4, #2
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80013c8:	681c      	ldr	r4, [r3, #0]
 80013ca:	bf1d      	ittte	ne
 80013cc:	f424 6480 	bicne.w	r4, r4, #1024	; 0x400
 80013d0:	601c      	strne	r4, [r3, #0]
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 80013d2:	681c      	ldrne	r4, [r3, #0]
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80013d4:	f444 6480 	orreq.w	r4, r4, #1024	; 0x400
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 80013d8:	bf18      	it	ne
 80013da:	f444 6400 	orrne.w	r4, r4, #2048	; 0x800
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80013de:	601c      	str	r4, [r3, #0]
        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80013e0:	685c      	ldr	r4, [r3, #4]
 80013e2:	0527      	lsls	r7, r4, #20
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 80013e4:	bf42      	ittt	mi
 80013e6:	685c      	ldrmi	r4, [r3, #4]
 80013e8:	f444 5480 	orrmi.w	r4, r4, #4096	; 0x1000
 80013ec:	605c      	strmi	r4, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013ee:	2400      	movs	r4, #0
 80013f0:	9408      	str	r4, [sp, #32]
 80013f2:	695c      	ldr	r4, [r3, #20]
 80013f4:	9408      	str	r4, [sp, #32]
 80013f6:	699c      	ldr	r4, [r3, #24]
 80013f8:	9408      	str	r4, [sp, #32]
 80013fa:	9c08      	ldr	r4, [sp, #32]
 80013fc:	e7b1      	b.n	8001362 <HAL_I2C_EV_IRQHandler+0x1ae>
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80013fe:	681c      	ldr	r4, [r3, #0]
 8001400:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8001404:	601c      	str	r4, [r3, #0]
        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001406:	685c      	ldr	r4, [r3, #4]
 8001408:	0526      	lsls	r6, r4, #20
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 800140a:	bf42      	ittt	mi
 800140c:	685c      	ldrmi	r4, [r3, #4]
 800140e:	f444 5480 	orrmi.w	r4, r4, #4096	; 0x1000
 8001412:	605c      	strmi	r4, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001414:	2400      	movs	r4, #0
 8001416:	9409      	str	r4, [sp, #36]	; 0x24
 8001418:	695c      	ldr	r4, [r3, #20]
 800141a:	9409      	str	r4, [sp, #36]	; 0x24
 800141c:	699c      	ldr	r4, [r3, #24]
 800141e:	9409      	str	r4, [sp, #36]	; 0x24
 8001420:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8001422:	e79e      	b.n	8001362 <HAL_I2C_EV_IRQHandler+0x1ae>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001424:	2400      	movs	r4, #0
 8001426:	940a      	str	r4, [sp, #40]	; 0x28
 8001428:	695c      	ldr	r4, [r3, #20]
 800142a:	940a      	str	r4, [sp, #40]	; 0x28
 800142c:	699c      	ldr	r4, [r3, #24]
 800142e:	940a      	str	r4, [sp, #40]	; 0x28
 8001430:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001432:	e6dd      	b.n	80011f0 <HAL_I2C_EV_IRQHandler+0x3c>
  else if((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001434:	2a21      	cmp	r2, #33	; 0x21
 8001436:	d003      	beq.n	8001440 <HAL_I2C_EV_IRQHandler+0x28c>
 8001438:	2940      	cmp	r1, #64	; 0x40
 800143a:	d108      	bne.n	800144e <HAL_I2C_EV_IRQHandler+0x29a>
    ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800143c:	2a22      	cmp	r2, #34	; 0x22
 800143e:	d106      	bne.n	800144e <HAL_I2C_EV_IRQHandler+0x29a>
    if(hi2c->XferCount == 0U)
 8001440:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001442:	b292      	uxth	r2, r2
 8001444:	b982      	cbnz	r2, 8001468 <HAL_I2C_EV_IRQHandler+0x2b4>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001446:	685a      	ldr	r2, [r3, #4]
 8001448:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800144c:	605a      	str	r2, [r3, #4]
}
 800144e:	b00d      	add	sp, #52	; 0x34
 8001450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001452:	bf00      	nop
 8001454:	00100004 	.word	0x00100004
 8001458:	00010004 	.word	0x00010004
 800145c:	00010080 	.word	0x00010080
 8001460:	00010008 	.word	0x00010008
 8001464:	00010002 	.word	0x00010002
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001468:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 800146c:	2a40      	cmp	r2, #64	; 0x40
 800146e:	d127      	bne.n	80014c0 <HAL_I2C_EV_IRQHandler+0x30c>
        if(hi2c->EventCount == 0)
 8001470:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001472:	b97a      	cbnz	r2, 8001494 <HAL_I2C_EV_IRQHandler+0x2e0>
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001474:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001476:	2a01      	cmp	r2, #1
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001478:	6c82      	ldr	r2, [r0, #72]	; 0x48
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800147a:	d105      	bne.n	8001488 <HAL_I2C_EV_IRQHandler+0x2d4>
 800147c:	b2d2      	uxtb	r2, r2
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800147e:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2;
 8001480:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001482:	3302      	adds	r3, #2
            hi2c->EventCount++;
 8001484:	6503      	str	r3, [r0, #80]	; 0x50
 8001486:	e7e2      	b.n	800144e <HAL_I2C_EV_IRQHandler+0x29a>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001488:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800148c:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 800148e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001490:	3301      	adds	r3, #1
 8001492:	e7f7      	b.n	8001484 <HAL_I2C_EV_IRQHandler+0x2d0>
        else if(hi2c->EventCount == 1)
 8001494:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001496:	2a01      	cmp	r2, #1
 8001498:	d102      	bne.n	80014a0 <HAL_I2C_EV_IRQHandler+0x2ec>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800149a:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800149c:	b2d2      	uxtb	r2, r2
 800149e:	e7f5      	b.n	800148c <HAL_I2C_EV_IRQHandler+0x2d8>
        else if(hi2c->EventCount == 2)
 80014a0:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80014a2:	2a02      	cmp	r2, #2
 80014a4:	d1d3      	bne.n	800144e <HAL_I2C_EV_IRQHandler+0x29a>
          if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80014a6:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80014aa:	2a22      	cmp	r2, #34	; 0x22
 80014ac:	d104      	bne.n	80014b8 <HAL_I2C_EV_IRQHandler+0x304>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	e7ca      	b.n	800144e <HAL_I2C_EV_IRQHandler+0x29a>
          else if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80014b8:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80014bc:	2a21      	cmp	r2, #33	; 0x21
 80014be:	d1c6      	bne.n	800144e <HAL_I2C_EV_IRQHandler+0x29a>
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80014c0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80014c2:	1c51      	adds	r1, r2, #1
 80014c4:	6241      	str	r1, [r0, #36]	; 0x24
 80014c6:	7812      	ldrb	r2, [r2, #0]
 80014c8:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 80014ca:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80014cc:	3b01      	subs	r3, #1
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 80014d2:	e7bc      	b.n	800144e <HAL_I2C_EV_IRQHandler+0x29a>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80014d4:	2c00      	cmp	r4, #0
 80014d6:	d0ba      	beq.n	800144e <HAL_I2C_EV_IRQHandler+0x29a>
 80014d8:	0594      	lsls	r4, r2, #22
 80014da:	d5b8      	bpl.n	800144e <HAL_I2C_EV_IRQHandler+0x29a>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80014dc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80014de:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80014e2:	2a21      	cmp	r2, #33	; 0x21
 80014e4:	d1b3      	bne.n	800144e <HAL_I2C_EV_IRQHandler+0x29a>
    if(hi2c->XferCount != 0U)
 80014e6:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80014e8:	b292      	uxth	r2, r2
 80014ea:	2a00      	cmp	r2, #0
 80014ec:	d1e8      	bne.n	80014c0 <HAL_I2C_EV_IRQHandler+0x30c>
      if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80014ee:	2904      	cmp	r1, #4
 80014f0:	d00d      	beq.n	800150e <HAL_I2C_EV_IRQHandler+0x35a>
 80014f2:	2908      	cmp	r1, #8
 80014f4:	d00b      	beq.n	800150e <HAL_I2C_EV_IRQHandler+0x35a>
 80014f6:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 80014fa:	d008      	beq.n	800150e <HAL_I2C_EV_IRQHandler+0x35a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80014fc:	6859      	ldr	r1, [r3, #4]
 80014fe:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8001502:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001504:	2311      	movs	r3, #17
 8001506:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001508:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
 800150c:	e6a2      	b.n	8001254 <HAL_I2C_EV_IRQHandler+0xa0>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800150e:	685a      	ldr	r2, [r3, #4]
 8001510:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001514:	605a      	str	r2, [r3, #4]
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800151c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800151e:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8001520:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001522:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001524:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001528:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800152c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001530:	2a40      	cmp	r2, #64	; 0x40
 8001532:	f47f ae92 	bne.w	800125a <HAL_I2C_EV_IRQHandler+0xa6>
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001536:	f7ff fda5 	bl	8001084 <HAL_I2C_MemTxCpltCallback>
 800153a:	e788      	b.n	800144e <HAL_I2C_EV_IRQHandler+0x29a>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 800153c:	4d90      	ldr	r5, [pc, #576]	; (8001780 <HAL_I2C_EV_IRQHandler+0x5cc>)
 800153e:	400d      	ands	r5, r1
 8001540:	2d00      	cmp	r5, #0
 8001542:	d041      	beq.n	80015c8 <HAL_I2C_EV_IRQHandler+0x414>
 8001544:	0551      	lsls	r1, r2, #21
 8001546:	d53f      	bpl.n	80015c8 <HAL_I2C_EV_IRQHandler+0x414>
 8001548:	2c00      	cmp	r4, #0
 800154a:	d13d      	bne.n	80015c8 <HAL_I2C_EV_IRQHandler+0x414>
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800154c:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8001550:	2a22      	cmp	r2, #34	; 0x22
 8001552:	f47f af7c 	bne.w	800144e <HAL_I2C_EV_IRQHandler+0x29a>
    tmp = hi2c->XferCount;
 8001556:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001558:	b292      	uxth	r2, r2
    if(tmp > 3U)
 800155a:	2a03      	cmp	r2, #3
 800155c:	d913      	bls.n	8001586 <HAL_I2C_EV_IRQHandler+0x3d2>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800155e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	1c51      	adds	r1, r2, #1
 8001564:	6241      	str	r1, [r0, #36]	; 0x24
 8001566:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8001568:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800156a:	3b01      	subs	r3, #1
 800156c:	b29b      	uxth	r3, r3
 800156e:	8543      	strh	r3, [r0, #42]	; 0x2a
      if(hi2c->XferCount == 3)
 8001570:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001572:	b29b      	uxth	r3, r3
 8001574:	2b03      	cmp	r3, #3
 8001576:	f47f af6a 	bne.w	800144e <HAL_I2C_EV_IRQHandler+0x29a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800157a:	6802      	ldr	r2, [r0, #0]
 800157c:	6853      	ldr	r3, [r2, #4]
 800157e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001582:	6053      	str	r3, [r2, #4]
 8001584:	e763      	b.n	800144e <HAL_I2C_EV_IRQHandler+0x29a>
    else if((tmp == 1U) || (tmp == 0U))
 8001586:	2a01      	cmp	r2, #1
 8001588:	f63f af61 	bhi.w	800144e <HAL_I2C_EV_IRQHandler+0x29a>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001592:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800159a:	605a      	str	r2, [r3, #4]
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800159c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800159e:	691b      	ldr	r3, [r3, #16]
 80015a0:	1c51      	adds	r1, r2, #1
 80015a2:	6241      	str	r1, [r0, #36]	; 0x24
 80015a4:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 80015a6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80015a8:	3b01      	subs	r3, #1
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 80015ae:	2320      	movs	r3, #32
 80015b0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->PreviousState = I2C_STATE_NONE;
 80015b4:	6304      	str	r4, [r0, #48]	; 0x30
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80015b6:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80015ba:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80015be:	2b40      	cmp	r3, #64	; 0x40
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80015c0:	d158      	bne.n	8001674 <HAL_I2C_EV_IRQHandler+0x4c0>
      HAL_I2C_MemRxCpltCallback(hi2c);
 80015c2:	f7ff fd60 	bl	8001086 <HAL_I2C_MemRxCpltCallback>
 80015c6:	e742      	b.n	800144e <HAL_I2C_EV_IRQHandler+0x29a>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80015c8:	2c00      	cmp	r4, #0
 80015ca:	f43f af40 	beq.w	800144e <HAL_I2C_EV_IRQHandler+0x29a>
 80015ce:	0597      	lsls	r7, r2, #22
 80015d0:	f57f af3d 	bpl.w	800144e <HAL_I2C_EV_IRQHandler+0x29a>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80015d4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  if(hi2c->XferCount == 4U)
 80015d6:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80015d8:	b292      	uxth	r2, r2
 80015da:	2a04      	cmp	r2, #4
 80015dc:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80015de:	d108      	bne.n	80015f2 <HAL_I2C_EV_IRQHandler+0x43e>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80015e0:	6859      	ldr	r1, [r3, #4]
 80015e2:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80015e6:	6059      	str	r1, [r3, #4]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80015e8:	1c51      	adds	r1, r2, #1
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	6241      	str	r1, [r0, #36]	; 0x24
 80015ee:	7013      	strb	r3, [r2, #0]
 80015f0:	e76b      	b.n	80014ca <HAL_I2C_EV_IRQHandler+0x316>
  else if(hi2c->XferCount == 3U)
 80015f2:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 80015f4:	b2a4      	uxth	r4, r4
 80015f6:	2c03      	cmp	r4, #3
 80015f8:	d108      	bne.n	800160c <HAL_I2C_EV_IRQHandler+0x458>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80015fa:	6859      	ldr	r1, [r3, #4]
 80015fc:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001600:	6059      	str	r1, [r3, #4]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001602:	6819      	ldr	r1, [r3, #0]
 8001604:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001608:	6019      	str	r1, [r3, #0]
 800160a:	e7ed      	b.n	80015e8 <HAL_I2C_EV_IRQHandler+0x434>
  else if(hi2c->XferCount == 2U)
 800160c:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 800160e:	b2a4      	uxth	r4, r4
 8001610:	2c02      	cmp	r4, #2
 8001612:	d1e9      	bne.n	80015e8 <HAL_I2C_EV_IRQHandler+0x434>
    if((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME))
 8001614:	3901      	subs	r1, #1
 8001616:	2901      	cmp	r1, #1
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001618:	6819      	ldr	r1, [r3, #0]
 800161a:	bf9d      	ittte	ls
 800161c:	f421 6180 	bicls.w	r1, r1, #1024	; 0x400
 8001620:	6019      	strls	r1, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001622:	6819      	ldrls	r1, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001624:	f441 7100 	orrhi.w	r1, r1, #512	; 0x200
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001628:	bf98      	it	ls
 800162a:	f441 7180 	orrls.w	r1, r1, #256	; 0x100
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800162e:	6019      	str	r1, [r3, #0]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	1c51      	adds	r1, r2, #1
 8001634:	6241      	str	r1, [r0, #36]	; 0x24
 8001636:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 8001638:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800163a:	3b01      	subs	r3, #1
 800163c:	b29b      	uxth	r3, r3
 800163e:	8543      	strh	r3, [r0, #42]	; 0x2a
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001640:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001642:	1c5a      	adds	r2, r3, #1
 8001644:	6242      	str	r2, [r0, #36]	; 0x24
 8001646:	6802      	ldr	r2, [r0, #0]
 8001648:	6912      	ldr	r2, [r2, #16]
 800164a:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 800164c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800164e:	6802      	ldr	r2, [r0, #0]
    hi2c->XferCount--;
 8001650:	3b01      	subs	r3, #1
 8001652:	b29b      	uxth	r3, r3
 8001654:	8543      	strh	r3, [r0, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001656:	6853      	ldr	r3, [r2, #4]
 8001658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800165c:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800165e:	2320      	movs	r3, #32
 8001660:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8001664:	2300      	movs	r3, #0
 8001666:	6303      	str	r3, [r0, #48]	; 0x30
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001668:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800166c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001670:	2a40      	cmp	r2, #64	; 0x40
 8001672:	e7a5      	b.n	80015c0 <HAL_I2C_EV_IRQHandler+0x40c>
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001674:	f7ff fd01 	bl	800107a <HAL_I2C_MasterRxCpltCallback>
 8001678:	e6e9      	b.n	800144e <HAL_I2C_EV_IRQHandler+0x29a>
    if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800167a:	4c42      	ldr	r4, [pc, #264]	; (8001784 <HAL_I2C_EV_IRQHandler+0x5d0>)
 800167c:	400c      	ands	r4, r1
 800167e:	b174      	cbz	r4, 800169e <HAL_I2C_EV_IRQHandler+0x4ea>
 8001680:	0596      	lsls	r6, r2, #22
 8001682:	d50c      	bpl.n	800169e <HAL_I2C_EV_IRQHandler+0x4ea>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 8001684:	6999      	ldr	r1, [r3, #24]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 8001686:	699b      	ldr	r3, [r3, #24]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 8001688:	f081 0104 	eor.w	r1, r1, #4
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 800168c:	061d      	lsls	r5, r3, #24
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800168e:	f3c1 0180 	ubfx	r1, r1, #2, #1
    SlaveAddrCode = hi2c->Init.OwnAddress1;
 8001692:	bf54      	ite	pl
 8001694:	8982      	ldrhpl	r2, [r0, #12]
    SlaveAddrCode = hi2c->Init.OwnAddress2;
 8001696:	8b02      	ldrhmi	r2, [r0, #24]
  HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8001698:	f7ff fcf2 	bl	8001080 <HAL_I2C_AddrCallback>
 800169c:	e6d7      	b.n	800144e <HAL_I2C_EV_IRQHandler+0x29a>
    else if(((sr1itflags & I2C_FLAG_STOPF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800169e:	4c3a      	ldr	r4, [pc, #232]	; (8001788 <HAL_I2C_EV_IRQHandler+0x5d4>)
 80016a0:	400c      	ands	r4, r1
 80016a2:	2c00      	cmp	r4, #0
 80016a4:	d074      	beq.n	8001790 <HAL_I2C_EV_IRQHandler+0x5dc>
 80016a6:	0594      	lsls	r4, r2, #22
 80016a8:	d572      	bpl.n	8001790 <HAL_I2C_EV_IRQHandler+0x5dc>
  uint32_t CurrentState = hi2c->State;
 80016aa:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80016ae:	6859      	ldr	r1, [r3, #4]
 80016b0:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80016b4:	6059      	str	r1, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80016b6:	2100      	movs	r1, #0
 80016b8:	910b      	str	r1, [sp, #44]	; 0x2c
 80016ba:	6959      	ldr	r1, [r3, #20]
 80016bc:	910b      	str	r1, [sp, #44]	; 0x2c
 80016be:	6819      	ldr	r1, [r3, #0]
 80016c0:	f041 0101 	orr.w	r1, r1, #1
 80016c4:	6019      	str	r1, [r3, #0]
 80016c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80016c8:	6819      	ldr	r1, [r3, #0]
 80016ca:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80016ce:	6019      	str	r1, [r3, #0]
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80016d0:	6859      	ldr	r1, [r3, #4]
 80016d2:	0509      	lsls	r1, r1, #20
  uint32_t CurrentState = hi2c->State;
 80016d4:	b2d2      	uxtb	r2, r2
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80016d6:	d50c      	bpl.n	80016f2 <HAL_I2C_EV_IRQHandler+0x53e>
    if((hi2c->State == HAL_I2C_STATE_BUSY_RX) || (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80016d8:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 80016dc:	2922      	cmp	r1, #34	; 0x22
 80016de:	d003      	beq.n	80016e8 <HAL_I2C_EV_IRQHandler+0x534>
 80016e0:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 80016e4:	292a      	cmp	r1, #42	; 0x2a
 80016e6:	d129      	bne.n	800173c <HAL_I2C_EV_IRQHandler+0x588>
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80016e8:	6b81      	ldr	r1, [r0, #56]	; 0x38
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80016ea:	6809      	ldr	r1, [r1, #0]
 80016ec:	6849      	ldr	r1, [r1, #4]
 80016ee:	b289      	uxth	r1, r1
 80016f0:	8541      	strh	r1, [r0, #42]	; 0x2a
  if(hi2c->XferCount != 0U)
 80016f2:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 80016f4:	b289      	uxth	r1, r1
 80016f6:	b1e1      	cbz	r1, 8001732 <HAL_I2C_EV_IRQHandler+0x57e>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80016f8:	6959      	ldr	r1, [r3, #20]
 80016fa:	074f      	lsls	r7, r1, #29
 80016fc:	d508      	bpl.n	8001710 <HAL_I2C_EV_IRQHandler+0x55c>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80016fe:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	1c4c      	adds	r4, r1, #1
 8001704:	6244      	str	r4, [r0, #36]	; 0x24
 8001706:	700b      	strb	r3, [r1, #0]
      hi2c->XferCount--;
 8001708:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800170a:	3b01      	subs	r3, #1
 800170c:	b29b      	uxth	r3, r3
 800170e:	8543      	strh	r3, [r0, #42]	; 0x2a
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001710:	6801      	ldr	r1, [r0, #0]
 8001712:	694b      	ldr	r3, [r1, #20]
 8001714:	065e      	lsls	r6, r3, #25
 8001716:	d508      	bpl.n	800172a <HAL_I2C_EV_IRQHandler+0x576>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001718:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800171a:	6909      	ldr	r1, [r1, #16]
 800171c:	1c5c      	adds	r4, r3, #1
 800171e:	6244      	str	r4, [r0, #36]	; 0x24
 8001720:	7019      	strb	r1, [r3, #0]
      hi2c->XferCount--;
 8001722:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001724:	3b01      	subs	r3, #1
 8001726:	b29b      	uxth	r3, r3
 8001728:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800172a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800172c:	f043 0304 	orr.w	r3, r3, #4
 8001730:	6403      	str	r3, [r0, #64]	; 0x40
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001732:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001734:	b123      	cbz	r3, 8001740 <HAL_I2C_EV_IRQHandler+0x58c>
    I2C_ITError(hi2c);
 8001736:	f7ff fca9 	bl	800108c <I2C_ITError>
 800173a:	e688      	b.n	800144e <HAL_I2C_EV_IRQHandler+0x29a>
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800173c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800173e:	e7d4      	b.n	80016ea <HAL_I2C_EV_IRQHandler+0x536>
    if((CurrentState == HAL_I2C_STATE_LISTEN ) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN) || \
 8001740:	f1a2 0128 	sub.w	r1, r2, #40	; 0x28
 8001744:	2902      	cmp	r1, #2
 8001746:	d80a      	bhi.n	800175e <HAL_I2C_EV_IRQHandler+0x5aa>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001748:	4a10      	ldr	r2, [pc, #64]	; (800178c <HAL_I2C_EV_IRQHandler+0x5d8>)
 800174a:	62c2      	str	r2, [r0, #44]	; 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 800174c:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 800174e:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001750:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001754:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8001758:	f7ff fc93 	bl	8001082 <HAL_I2C_ListenCpltCallback>
 800175c:	e677      	b.n	800144e <HAL_I2C_EV_IRQHandler+0x29a>
      if((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800175e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001760:	2b22      	cmp	r3, #34	; 0x22
 8001762:	d002      	beq.n	800176a <HAL_I2C_EV_IRQHandler+0x5b6>
 8001764:	2a22      	cmp	r2, #34	; 0x22
 8001766:	f47f ae72 	bne.w	800144e <HAL_I2C_EV_IRQHandler+0x29a>
        hi2c->PreviousState = I2C_STATE_NONE;
 800176a:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 800176c:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800176e:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001770:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001774:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001778:	f7ff fc81 	bl	800107e <HAL_I2C_SlaveRxCpltCallback>
 800177c:	e667      	b.n	800144e <HAL_I2C_EV_IRQHandler+0x29a>
 800177e:	bf00      	nop
 8001780:	00010040 	.word	0x00010040
 8001784:	00010002 	.word	0x00010002
 8001788:	00010010 	.word	0x00010010
 800178c:	ffff0000 	.word	0xffff0000
    else if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8001790:	4e39      	ldr	r6, [pc, #228]	; (8001878 <HAL_I2C_EV_IRQHandler+0x6c4>)
 8001792:	4c3a      	ldr	r4, [pc, #232]	; (800187c <HAL_I2C_EV_IRQHandler+0x6c8>)
 8001794:	402e      	ands	r6, r5
 8001796:	400c      	ands	r4, r1
 8001798:	2e00      	cmp	r6, #0
 800179a:	d036      	beq.n	800180a <HAL_I2C_EV_IRQHandler+0x656>
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 800179c:	4d38      	ldr	r5, [pc, #224]	; (8001880 <HAL_I2C_EV_IRQHandler+0x6cc>)
 800179e:	400d      	ands	r5, r1
 80017a0:	b33d      	cbz	r5, 80017f2 <HAL_I2C_EV_IRQHandler+0x63e>
 80017a2:	0555      	lsls	r5, r2, #21
 80017a4:	d525      	bpl.n	80017f2 <HAL_I2C_EV_IRQHandler+0x63e>
 80017a6:	bb24      	cbnz	r4, 80017f2 <HAL_I2C_EV_IRQHandler+0x63e>
  uint32_t CurrentState = hi2c->State;
 80017a8:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
  if(hi2c->XferCount != 0U)
 80017ac:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80017ae:	b292      	uxth	r2, r2
  uint32_t CurrentState = hi2c->State;
 80017b0:	b2c9      	uxtb	r1, r1
  if(hi2c->XferCount != 0U)
 80017b2:	2a00      	cmp	r2, #0
 80017b4:	f43f ae4b 	beq.w	800144e <HAL_I2C_EV_IRQHandler+0x29a>
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80017b8:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80017ba:	1c54      	adds	r4, r2, #1
 80017bc:	6244      	str	r4, [r0, #36]	; 0x24
 80017be:	7812      	ldrb	r2, [r2, #0]
 80017c0:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 80017c2:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80017c4:	3a01      	subs	r2, #1
 80017c6:	b292      	uxth	r2, r2
 80017c8:	8542      	strh	r2, [r0, #42]	; 0x2a
    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80017ca:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80017cc:	b292      	uxth	r2, r2
 80017ce:	2a00      	cmp	r2, #0
 80017d0:	f47f ae3d 	bne.w	800144e <HAL_I2C_EV_IRQHandler+0x29a>
 80017d4:	2929      	cmp	r1, #41	; 0x29
 80017d6:	f47f ae3a 	bne.w	800144e <HAL_I2C_EV_IRQHandler+0x29a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017e0:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80017e2:	2321      	movs	r3, #33	; 0x21
 80017e4:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80017e6:	2328      	movs	r3, #40	; 0x28
 80017e8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80017ec:	f7ff fc46 	bl	800107c <HAL_I2C_SlaveTxCpltCallback>
 80017f0:	e62d      	b.n	800144e <HAL_I2C_EV_IRQHandler+0x29a>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80017f2:	2c00      	cmp	r4, #0
 80017f4:	f43f ae2b 	beq.w	800144e <HAL_I2C_EV_IRQHandler+0x29a>
 80017f8:	0594      	lsls	r4, r2, #22
 80017fa:	f57f ae28 	bpl.w	800144e <HAL_I2C_EV_IRQHandler+0x29a>
  if(hi2c->XferCount != 0U)
 80017fe:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001800:	b292      	uxth	r2, r2
 8001802:	2a00      	cmp	r2, #0
 8001804:	f47f ae5c 	bne.w	80014c0 <HAL_I2C_EV_IRQHandler+0x30c>
 8001808:	e621      	b.n	800144e <HAL_I2C_EV_IRQHandler+0x29a>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 800180a:	4d1e      	ldr	r5, [pc, #120]	; (8001884 <HAL_I2C_EV_IRQHandler+0x6d0>)
 800180c:	400d      	ands	r5, r1
 800180e:	b335      	cbz	r5, 800185e <HAL_I2C_EV_IRQHandler+0x6aa>
 8001810:	0551      	lsls	r1, r2, #21
 8001812:	d524      	bpl.n	800185e <HAL_I2C_EV_IRQHandler+0x6aa>
 8001814:	bb1c      	cbnz	r4, 800185e <HAL_I2C_EV_IRQHandler+0x6aa>
  uint32_t CurrentState = hi2c->State;
 8001816:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if(hi2c->XferCount != 0U)
 800181a:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 800181c:	b289      	uxth	r1, r1
  uint32_t CurrentState = hi2c->State;
 800181e:	b2d2      	uxtb	r2, r2
  if(hi2c->XferCount != 0U)
 8001820:	2900      	cmp	r1, #0
 8001822:	f43f ae14 	beq.w	800144e <HAL_I2C_EV_IRQHandler+0x29a>
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001826:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	1c4c      	adds	r4, r1, #1
 800182c:	6244      	str	r4, [r0, #36]	; 0x24
 800182e:	700b      	strb	r3, [r1, #0]
    hi2c->XferCount--;
 8001830:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001832:	3b01      	subs	r3, #1
 8001834:	b29b      	uxth	r3, r3
 8001836:	8543      	strh	r3, [r0, #42]	; 0x2a
    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001838:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800183a:	b29b      	uxth	r3, r3
 800183c:	2b00      	cmp	r3, #0
 800183e:	f47f ae06 	bne.w	800144e <HAL_I2C_EV_IRQHandler+0x29a>
 8001842:	2a2a      	cmp	r2, #42	; 0x2a
 8001844:	f47f ae03 	bne.w	800144e <HAL_I2C_EV_IRQHandler+0x29a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001848:	6802      	ldr	r2, [r0, #0]
 800184a:	6853      	ldr	r3, [r2, #4]
 800184c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001850:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001852:	2322      	movs	r3, #34	; 0x22
 8001854:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001856:	2328      	movs	r3, #40	; 0x28
 8001858:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 800185c:	e78c      	b.n	8001778 <HAL_I2C_EV_IRQHandler+0x5c4>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800185e:	2c00      	cmp	r4, #0
 8001860:	f43f adf5 	beq.w	800144e <HAL_I2C_EV_IRQHandler+0x29a>
 8001864:	0592      	lsls	r2, r2, #22
 8001866:	f57f adf2 	bpl.w	800144e <HAL_I2C_EV_IRQHandler+0x29a>
  if(hi2c->XferCount != 0U)
 800186a:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800186c:	b292      	uxth	r2, r2
 800186e:	2a00      	cmp	r2, #0
 8001870:	f43f aded 	beq.w	800144e <HAL_I2C_EV_IRQHandler+0x29a>
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001874:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001876:	e6b7      	b.n	80015e8 <HAL_I2C_EV_IRQHandler+0x434>
 8001878:	00100004 	.word	0x00100004
 800187c:	00010004 	.word	0x00010004
 8001880:	00010080 	.word	0x00010080
 8001884:	00010040 	.word	0x00010040

08001888 <HAL_I2C_ER_IRQHandler>:
{
 8001888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800188a:	6803      	ldr	r3, [r0, #0]
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 800188c:	4a49      	ldr	r2, [pc, #292]	; (80019b4 <HAL_I2C_ER_IRQHandler+0x12c>)
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800188e:	695e      	ldr	r6, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001890:	685d      	ldr	r5, [r3, #4]
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8001892:	4216      	tst	r6, r2
{
 8001894:	4604      	mov	r4, r0
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8001896:	d008      	beq.n	80018aa <HAL_I2C_ER_IRQHandler+0x22>
 8001898:	05e8      	lsls	r0, r5, #23
 800189a:	d506      	bpl.n	80018aa <HAL_I2C_ER_IRQHandler+0x22>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800189c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800189e:	f042 0201 	orr.w	r2, r2, #1
 80018a2:	6422      	str	r2, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80018a4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80018a8:	615a      	str	r2, [r3, #20]
  if(((sr1itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 80018aa:	f416 3f81 	tst.w	r6, #66048	; 0x10200
 80018ae:	d008      	beq.n	80018c2 <HAL_I2C_ER_IRQHandler+0x3a>
 80018b0:	05e9      	lsls	r1, r5, #23
 80018b2:	d506      	bpl.n	80018c2 <HAL_I2C_ER_IRQHandler+0x3a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80018b4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80018b6:	f042 0202 	orr.w	r2, r2, #2
 80018ba:	6422      	str	r2, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80018bc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80018c0:	615a      	str	r2, [r3, #20]
  if(((sr1itflags & I2C_FLAG_AF) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 80018c2:	f416 3f82 	tst.w	r6, #66560	; 0x10400
 80018c6:	d036      	beq.n	8001936 <HAL_I2C_ER_IRQHandler+0xae>
 80018c8:	05ea      	lsls	r2, r5, #23
 80018ca:	d534      	bpl.n	8001936 <HAL_I2C_ER_IRQHandler+0xae>
    tmp1 = hi2c->Mode;
 80018cc:	f894 703e 	ldrb.w	r7, [r4, #62]	; 0x3e
    tmp2 = hi2c->XferCount;
 80018d0:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    tmp3 = hi2c->State;
 80018d2:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    tmp4 = hi2c->PreviousState;
 80018d6:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80018d8:	2f20      	cmp	r7, #32
    tmp2 = hi2c->XferCount;
 80018da:	b289      	uxth	r1, r1
    tmp3 = hi2c->State;
 80018dc:	b2d2      	uxtb	r2, r2
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80018de:	d158      	bne.n	8001992 <HAL_I2C_ER_IRQHandler+0x10a>
 80018e0:	2900      	cmp	r1, #0
 80018e2:	d156      	bne.n	8001992 <HAL_I2C_ER_IRQHandler+0x10a>
 80018e4:	f002 01f7 	and.w	r1, r2, #247	; 0xf7
 80018e8:	2921      	cmp	r1, #33	; 0x21
 80018ea:	d003      	beq.n	80018f4 <HAL_I2C_ER_IRQHandler+0x6c>
      ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80018ec:	2a28      	cmp	r2, #40	; 0x28
 80018ee:	d150      	bne.n	8001992 <HAL_I2C_ER_IRQHandler+0x10a>
      ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80018f0:	2821      	cmp	r0, #33	; 0x21
 80018f2:	d14e      	bne.n	8001992 <HAL_I2C_ER_IRQHandler+0x10a>
  uint32_t CurrentState       = hi2c->State;
 80018f4:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80018f8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if(((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80018fa:	2904      	cmp	r1, #4
  uint32_t CurrentState       = hi2c->State;
 80018fc:	b2d2      	uxtb	r2, r2
  if(((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80018fe:	d001      	beq.n	8001904 <HAL_I2C_ER_IRQHandler+0x7c>
 8001900:	2908      	cmp	r1, #8
 8001902:	d12c      	bne.n	800195e <HAL_I2C_ER_IRQHandler+0xd6>
 8001904:	2a28      	cmp	r2, #40	; 0x28
 8001906:	d12a      	bne.n	800195e <HAL_I2C_ER_IRQHandler+0xd6>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001908:	4a2b      	ldr	r2, [pc, #172]	; (80019b8 <HAL_I2C_ER_IRQHandler+0x130>)
 800190a:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800190c:	685a      	ldr	r2, [r3, #4]
 800190e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001912:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001914:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001918:	615a      	str	r2, [r3, #20]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001920:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001922:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001924:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8001926:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8001928:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 800192a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800192e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8001932:	f7ff fba6 	bl	8001082 <HAL_I2C_ListenCpltCallback>
  if(((sr1itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8001936:	f416 3f84 	tst.w	r6, #67584	; 0x10800
 800193a:	d009      	beq.n	8001950 <HAL_I2C_ER_IRQHandler+0xc8>
 800193c:	05eb      	lsls	r3, r5, #23
 800193e:	d507      	bpl.n	8001950 <HAL_I2C_ER_IRQHandler+0xc8>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001940:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001942:	f043 0308 	orr.w	r3, r3, #8
 8001946:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001948:	6823      	ldr	r3, [r4, #0]
 800194a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800194e:	615a      	str	r2, [r3, #20]
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001950:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001952:	b373      	cbz	r3, 80019b2 <HAL_I2C_ER_IRQHandler+0x12a>
    I2C_ITError(hi2c);
 8001954:	4620      	mov	r0, r4
}
 8001956:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 800195a:	f7ff bb97 	b.w	800108c <I2C_ITError>
  else if(CurrentState == HAL_I2C_STATE_BUSY_TX)
 800195e:	2a21      	cmp	r2, #33	; 0x21
 8001960:	d123      	bne.n	80019aa <HAL_I2C_ER_IRQHandler+0x122>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001962:	4915      	ldr	r1, [pc, #84]	; (80019b8 <HAL_I2C_ER_IRQHandler+0x130>)
 8001964:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001966:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 8001968:	2220      	movs	r2, #32
 800196a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800196e:	2200      	movs	r2, #0
 8001970:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800197a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800197c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001980:	615a      	str	r2, [r3, #20]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001988:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800198a:	4620      	mov	r0, r4
 800198c:	f7ff fb76 	bl	800107c <HAL_I2C_SlaveTxCpltCallback>
 8001990:	e7d1      	b.n	8001936 <HAL_I2C_ER_IRQHandler+0xae>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001992:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001994:	f042 0204 	orr.w	r2, r2, #4
 8001998:	6422      	str	r2, [r4, #64]	; 0x40
      if(hi2c->Mode == HAL_I2C_MODE_MASTER)
 800199a:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800199e:	2a10      	cmp	r2, #16
        SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
 80019a0:	bf02      	ittt	eq
 80019a2:	681a      	ldreq	r2, [r3, #0]
 80019a4:	f442 7200 	orreq.w	r2, r2, #512	; 0x200
 80019a8:	601a      	streq	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80019ae:	615a      	str	r2, [r3, #20]
 80019b0:	e7c1      	b.n	8001936 <HAL_I2C_ER_IRQHandler+0xae>
 80019b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019b4:	00010100 	.word	0x00010100
 80019b8:	ffff0000 	.word	0xffff0000

080019bc <I2C_DMAAbort>:
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
  I2C_HandleTypeDef* hi2c = ( I2C_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019bc:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80019be:	b508      	push	{r3, lr}
  
  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80019c0:	6803      	ldr	r3, [r0, #0]

  hi2c->XferCount = 0U;

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 80019c2:	6b41      	ldr	r1, [r0, #52]	; 0x34
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019ca:	601a      	str	r2, [r3, #0]
  hi2c->XferCount = 0U;
 80019cc:	2200      	movs	r2, #0
 80019ce:	8542      	strh	r2, [r0, #42]	; 0x2a
  hi2c->hdmatx->XferAbortCallback = NULL;
 80019d0:	650a      	str	r2, [r1, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 80019d2:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80019d4:	650a      	str	r2, [r1, #80]	; 0x50

  /* Check if come from abort from user */
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 80019d6:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 80019da:	2960      	cmp	r1, #96	; 0x60
 80019dc:	f04f 0120 	mov.w	r1, #32
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80019e0:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019e4:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 80019e8:	d107      	bne.n	80019fa <I2C_DMAAbort+0x3e>
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019ea:	6402      	str	r2, [r0, #64]	; 0x40

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	f022 0201 	bic.w	r2, r2, #1
 80019f2:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_AbortCpltCallback(hi2c);
 80019f4:	f7ff fb49 	bl	800108a <HAL_I2C_AbortCpltCallback>
 80019f8:	bd08      	pop	{r3, pc}
  {
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	f022 0201 	bic.w	r2, r2, #1
 8001a00:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_ErrorCallback(hi2c);
 8001a02:	f7ff fb41 	bl	8001088 <HAL_I2C_ErrorCallback>
 8001a06:	bd08      	pop	{r3, pc}

08001a08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a0c:	4604      	mov	r4, r0
 8001a0e:	b918      	cbnz	r0, 8001a18 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001a10:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001a12:	b002      	add	sp, #8
 8001a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a18:	6803      	ldr	r3, [r0, #0]
 8001a1a:	07dd      	lsls	r5, r3, #31
 8001a1c:	d410      	bmi.n	8001a40 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a1e:	6823      	ldr	r3, [r4, #0]
 8001a20:	0798      	lsls	r0, r3, #30
 8001a22:	d458      	bmi.n	8001ad6 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a24:	6823      	ldr	r3, [r4, #0]
 8001a26:	071a      	lsls	r2, r3, #28
 8001a28:	f100 809a 	bmi.w	8001b60 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a2c:	6823      	ldr	r3, [r4, #0]
 8001a2e:	075b      	lsls	r3, r3, #29
 8001a30:	f100 80b8 	bmi.w	8001ba4 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a34:	69a2      	ldr	r2, [r4, #24]
 8001a36:	2a00      	cmp	r2, #0
 8001a38:	f040 8119 	bne.w	8001c6e <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	e7e8      	b.n	8001a12 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a40:	4ba6      	ldr	r3, [pc, #664]	; (8001cdc <HAL_RCC_OscConfig+0x2d4>)
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	f002 020c 	and.w	r2, r2, #12
 8001a48:	2a04      	cmp	r2, #4
 8001a4a:	d007      	beq.n	8001a5c <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a4c:	689a      	ldr	r2, [r3, #8]
 8001a4e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a52:	2a08      	cmp	r2, #8
 8001a54:	d10a      	bne.n	8001a6c <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	0259      	lsls	r1, r3, #9
 8001a5a:	d507      	bpl.n	8001a6c <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a5c:	4b9f      	ldr	r3, [pc, #636]	; (8001cdc <HAL_RCC_OscConfig+0x2d4>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	039a      	lsls	r2, r3, #14
 8001a62:	d5dc      	bpl.n	8001a1e <HAL_RCC_OscConfig+0x16>
 8001a64:	6863      	ldr	r3, [r4, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1d9      	bne.n	8001a1e <HAL_RCC_OscConfig+0x16>
 8001a6a:	e7d1      	b.n	8001a10 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a6c:	6863      	ldr	r3, [r4, #4]
 8001a6e:	4d9b      	ldr	r5, [pc, #620]	; (8001cdc <HAL_RCC_OscConfig+0x2d4>)
 8001a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a74:	d111      	bne.n	8001a9a <HAL_RCC_OscConfig+0x92>
 8001a76:	682b      	ldr	r3, [r5, #0]
 8001a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a7c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001a7e:	f7fe fdd1 	bl	8000624 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a82:	4d96      	ldr	r5, [pc, #600]	; (8001cdc <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001a84:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a86:	682b      	ldr	r3, [r5, #0]
 8001a88:	039b      	lsls	r3, r3, #14
 8001a8a:	d4c8      	bmi.n	8001a1e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a8c:	f7fe fdca 	bl	8000624 <HAL_GetTick>
 8001a90:	1b80      	subs	r0, r0, r6
 8001a92:	2864      	cmp	r0, #100	; 0x64
 8001a94:	d9f7      	bls.n	8001a86 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8001a96:	2003      	movs	r0, #3
 8001a98:	e7bb      	b.n	8001a12 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a9e:	d104      	bne.n	8001aaa <HAL_RCC_OscConfig+0xa2>
 8001aa0:	682b      	ldr	r3, [r5, #0]
 8001aa2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aa6:	602b      	str	r3, [r5, #0]
 8001aa8:	e7e5      	b.n	8001a76 <HAL_RCC_OscConfig+0x6e>
 8001aaa:	682a      	ldr	r2, [r5, #0]
 8001aac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ab0:	602a      	str	r2, [r5, #0]
 8001ab2:	682a      	ldr	r2, [r5, #0]
 8001ab4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ab8:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1df      	bne.n	8001a7e <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8001abe:	f7fe fdb1 	bl	8000624 <HAL_GetTick>
 8001ac2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ac4:	682b      	ldr	r3, [r5, #0]
 8001ac6:	039f      	lsls	r7, r3, #14
 8001ac8:	d5a9      	bpl.n	8001a1e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aca:	f7fe fdab 	bl	8000624 <HAL_GetTick>
 8001ace:	1b80      	subs	r0, r0, r6
 8001ad0:	2864      	cmp	r0, #100	; 0x64
 8001ad2:	d9f7      	bls.n	8001ac4 <HAL_RCC_OscConfig+0xbc>
 8001ad4:	e7df      	b.n	8001a96 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ad6:	4b81      	ldr	r3, [pc, #516]	; (8001cdc <HAL_RCC_OscConfig+0x2d4>)
 8001ad8:	689a      	ldr	r2, [r3, #8]
 8001ada:	f012 0f0c 	tst.w	r2, #12
 8001ade:	d007      	beq.n	8001af0 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ae0:	689a      	ldr	r2, [r3, #8]
 8001ae2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ae6:	2a08      	cmp	r2, #8
 8001ae8:	d111      	bne.n	8001b0e <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	025e      	lsls	r6, r3, #9
 8001aee:	d40e      	bmi.n	8001b0e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001af0:	4b7a      	ldr	r3, [pc, #488]	; (8001cdc <HAL_RCC_OscConfig+0x2d4>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	0795      	lsls	r5, r2, #30
 8001af6:	d502      	bpl.n	8001afe <HAL_RCC_OscConfig+0xf6>
 8001af8:	68e2      	ldr	r2, [r4, #12]
 8001afa:	2a01      	cmp	r2, #1
 8001afc:	d188      	bne.n	8001a10 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	6921      	ldr	r1, [r4, #16]
 8001b02:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001b06:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001b0a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b0c:	e78a      	b.n	8001a24 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b0e:	68e2      	ldr	r2, [r4, #12]
 8001b10:	4b73      	ldr	r3, [pc, #460]	; (8001ce0 <HAL_RCC_OscConfig+0x2d8>)
 8001b12:	b1b2      	cbz	r2, 8001b42 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001b14:	2201      	movs	r2, #1
 8001b16:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b18:	f7fe fd84 	bl	8000624 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1c:	4d6f      	ldr	r5, [pc, #444]	; (8001cdc <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001b1e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b20:	682b      	ldr	r3, [r5, #0]
 8001b22:	0798      	lsls	r0, r3, #30
 8001b24:	d507      	bpl.n	8001b36 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b26:	682b      	ldr	r3, [r5, #0]
 8001b28:	6922      	ldr	r2, [r4, #16]
 8001b2a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001b2e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001b32:	602b      	str	r3, [r5, #0]
 8001b34:	e776      	b.n	8001a24 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b36:	f7fe fd75 	bl	8000624 <HAL_GetTick>
 8001b3a:	1b80      	subs	r0, r0, r6
 8001b3c:	2802      	cmp	r0, #2
 8001b3e:	d9ef      	bls.n	8001b20 <HAL_RCC_OscConfig+0x118>
 8001b40:	e7a9      	b.n	8001a96 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001b42:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b44:	f7fe fd6e 	bl	8000624 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b48:	4d64      	ldr	r5, [pc, #400]	; (8001cdc <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001b4a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b4c:	682b      	ldr	r3, [r5, #0]
 8001b4e:	0799      	lsls	r1, r3, #30
 8001b50:	f57f af68 	bpl.w	8001a24 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b54:	f7fe fd66 	bl	8000624 <HAL_GetTick>
 8001b58:	1b80      	subs	r0, r0, r6
 8001b5a:	2802      	cmp	r0, #2
 8001b5c:	d9f6      	bls.n	8001b4c <HAL_RCC_OscConfig+0x144>
 8001b5e:	e79a      	b.n	8001a96 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b60:	6962      	ldr	r2, [r4, #20]
 8001b62:	4b60      	ldr	r3, [pc, #384]	; (8001ce4 <HAL_RCC_OscConfig+0x2dc>)
 8001b64:	b17a      	cbz	r2, 8001b86 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001b66:	2201      	movs	r2, #1
 8001b68:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001b6a:	f7fe fd5b 	bl	8000624 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b6e:	4d5b      	ldr	r5, [pc, #364]	; (8001cdc <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001b70:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b72:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001b74:	079f      	lsls	r7, r3, #30
 8001b76:	f53f af59 	bmi.w	8001a2c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b7a:	f7fe fd53 	bl	8000624 <HAL_GetTick>
 8001b7e:	1b80      	subs	r0, r0, r6
 8001b80:	2802      	cmp	r0, #2
 8001b82:	d9f6      	bls.n	8001b72 <HAL_RCC_OscConfig+0x16a>
 8001b84:	e787      	b.n	8001a96 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001b86:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001b88:	f7fe fd4c 	bl	8000624 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b8c:	4d53      	ldr	r5, [pc, #332]	; (8001cdc <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001b8e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b90:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001b92:	0798      	lsls	r0, r3, #30
 8001b94:	f57f af4a 	bpl.w	8001a2c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b98:	f7fe fd44 	bl	8000624 <HAL_GetTick>
 8001b9c:	1b80      	subs	r0, r0, r6
 8001b9e:	2802      	cmp	r0, #2
 8001ba0:	d9f6      	bls.n	8001b90 <HAL_RCC_OscConfig+0x188>
 8001ba2:	e778      	b.n	8001a96 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ba4:	4b4d      	ldr	r3, [pc, #308]	; (8001cdc <HAL_RCC_OscConfig+0x2d4>)
 8001ba6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ba8:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001bac:	d128      	bne.n	8001c00 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bae:	9201      	str	r2, [sp, #4]
 8001bb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bb2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001bb6:	641a      	str	r2, [r3, #64]	; 0x40
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bbe:	9301      	str	r3, [sp, #4]
 8001bc0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001bc2:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc4:	4d48      	ldr	r5, [pc, #288]	; (8001ce8 <HAL_RCC_OscConfig+0x2e0>)
 8001bc6:	682b      	ldr	r3, [r5, #0]
 8001bc8:	05d9      	lsls	r1, r3, #23
 8001bca:	d51b      	bpl.n	8001c04 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bcc:	68a3      	ldr	r3, [r4, #8]
 8001bce:	4d43      	ldr	r5, [pc, #268]	; (8001cdc <HAL_RCC_OscConfig+0x2d4>)
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d127      	bne.n	8001c24 <HAL_RCC_OscConfig+0x21c>
 8001bd4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001bdc:	f7fe fd22 	bl	8000624 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be0:	4d3e      	ldr	r5, [pc, #248]	; (8001cdc <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001be2:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001be4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001bea:	079b      	lsls	r3, r3, #30
 8001bec:	d539      	bpl.n	8001c62 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8001bee:	2e00      	cmp	r6, #0
 8001bf0:	f43f af20 	beq.w	8001a34 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bf4:	4a39      	ldr	r2, [pc, #228]	; (8001cdc <HAL_RCC_OscConfig+0x2d4>)
 8001bf6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001bf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bfe:	e719      	b.n	8001a34 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8001c00:	2600      	movs	r6, #0
 8001c02:	e7df      	b.n	8001bc4 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c04:	682b      	ldr	r3, [r5, #0]
 8001c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c0a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001c0c:	f7fe fd0a 	bl	8000624 <HAL_GetTick>
 8001c10:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c12:	682b      	ldr	r3, [r5, #0]
 8001c14:	05da      	lsls	r2, r3, #23
 8001c16:	d4d9      	bmi.n	8001bcc <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c18:	f7fe fd04 	bl	8000624 <HAL_GetTick>
 8001c1c:	1bc0      	subs	r0, r0, r7
 8001c1e:	2802      	cmp	r0, #2
 8001c20:	d9f7      	bls.n	8001c12 <HAL_RCC_OscConfig+0x20a>
 8001c22:	e738      	b.n	8001a96 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c24:	2b05      	cmp	r3, #5
 8001c26:	d104      	bne.n	8001c32 <HAL_RCC_OscConfig+0x22a>
 8001c28:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001c2a:	f043 0304 	orr.w	r3, r3, #4
 8001c2e:	672b      	str	r3, [r5, #112]	; 0x70
 8001c30:	e7d0      	b.n	8001bd4 <HAL_RCC_OscConfig+0x1cc>
 8001c32:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001c34:	f022 0201 	bic.w	r2, r2, #1
 8001c38:	672a      	str	r2, [r5, #112]	; 0x70
 8001c3a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001c3c:	f022 0204 	bic.w	r2, r2, #4
 8001c40:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1ca      	bne.n	8001bdc <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001c46:	f7fe fced 	bl	8000624 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c4a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001c4e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c50:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001c52:	0798      	lsls	r0, r3, #30
 8001c54:	d5cb      	bpl.n	8001bee <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c56:	f7fe fce5 	bl	8000624 <HAL_GetTick>
 8001c5a:	1bc0      	subs	r0, r0, r7
 8001c5c:	4540      	cmp	r0, r8
 8001c5e:	d9f7      	bls.n	8001c50 <HAL_RCC_OscConfig+0x248>
 8001c60:	e719      	b.n	8001a96 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c62:	f7fe fcdf 	bl	8000624 <HAL_GetTick>
 8001c66:	1bc0      	subs	r0, r0, r7
 8001c68:	4540      	cmp	r0, r8
 8001c6a:	d9bd      	bls.n	8001be8 <HAL_RCC_OscConfig+0x1e0>
 8001c6c:	e713      	b.n	8001a96 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c6e:	4d1b      	ldr	r5, [pc, #108]	; (8001cdc <HAL_RCC_OscConfig+0x2d4>)
 8001c70:	68ab      	ldr	r3, [r5, #8]
 8001c72:	f003 030c 	and.w	r3, r3, #12
 8001c76:	2b08      	cmp	r3, #8
 8001c78:	f43f aeca 	beq.w	8001a10 <HAL_RCC_OscConfig+0x8>
 8001c7c:	4e1b      	ldr	r6, [pc, #108]	; (8001cec <HAL_RCC_OscConfig+0x2e4>)
 8001c7e:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c80:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001c82:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c84:	d134      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001c86:	f7fe fccd 	bl	8000624 <HAL_GetTick>
 8001c8a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c8c:	682b      	ldr	r3, [r5, #0]
 8001c8e:	0199      	lsls	r1, r3, #6
 8001c90:	d41e      	bmi.n	8001cd0 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c92:	6a22      	ldr	r2, [r4, #32]
 8001c94:	69e3      	ldr	r3, [r4, #28]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001c9a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001c9e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ca0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001ca4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ca6:	4c0d      	ldr	r4, [pc, #52]	; (8001cdc <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ca8:	0852      	lsrs	r2, r2, #1
 8001caa:	3a01      	subs	r2, #1
 8001cac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001cb0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001cb6:	f7fe fcb5 	bl	8000624 <HAL_GetTick>
 8001cba:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cbc:	6823      	ldr	r3, [r4, #0]
 8001cbe:	019a      	lsls	r2, r3, #6
 8001cc0:	f53f aebc 	bmi.w	8001a3c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cc4:	f7fe fcae 	bl	8000624 <HAL_GetTick>
 8001cc8:	1b40      	subs	r0, r0, r5
 8001cca:	2802      	cmp	r0, #2
 8001ccc:	d9f6      	bls.n	8001cbc <HAL_RCC_OscConfig+0x2b4>
 8001cce:	e6e2      	b.n	8001a96 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cd0:	f7fe fca8 	bl	8000624 <HAL_GetTick>
 8001cd4:	1bc0      	subs	r0, r0, r7
 8001cd6:	2802      	cmp	r0, #2
 8001cd8:	d9d8      	bls.n	8001c8c <HAL_RCC_OscConfig+0x284>
 8001cda:	e6dc      	b.n	8001a96 <HAL_RCC_OscConfig+0x8e>
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	42470000 	.word	0x42470000
 8001ce4:	42470e80 	.word	0x42470e80
 8001ce8:	40007000 	.word	0x40007000
 8001cec:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8001cf0:	f7fe fc98 	bl	8000624 <HAL_GetTick>
 8001cf4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cf6:	682b      	ldr	r3, [r5, #0]
 8001cf8:	019b      	lsls	r3, r3, #6
 8001cfa:	f57f ae9f 	bpl.w	8001a3c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cfe:	f7fe fc91 	bl	8000624 <HAL_GetTick>
 8001d02:	1b00      	subs	r0, r0, r4
 8001d04:	2802      	cmp	r0, #2
 8001d06:	d9f6      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x2ee>
 8001d08:	e6c5      	b.n	8001a96 <HAL_RCC_OscConfig+0x8e>
 8001d0a:	bf00      	nop

08001d0c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d0c:	4913      	ldr	r1, [pc, #76]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001d0e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d10:	688b      	ldr	r3, [r1, #8]
 8001d12:	f003 030c 	and.w	r3, r3, #12
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	d003      	beq.n	8001d22 <HAL_RCC_GetSysClockFreq+0x16>
 8001d1a:	2b08      	cmp	r3, #8
 8001d1c:	d003      	beq.n	8001d26 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d1e:	4810      	ldr	r0, [pc, #64]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001d20:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001d22:	4810      	ldr	r0, [pc, #64]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x58>)
 8001d24:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d26:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d28:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d2a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d2c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d30:	bf14      	ite	ne
 8001d32:	480c      	ldrne	r0, [pc, #48]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d34:	480a      	ldreq	r0, [pc, #40]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d36:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001d3a:	bf18      	it	ne
 8001d3c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d3e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d42:	fba1 0100 	umull	r0, r1, r1, r0
 8001d46:	f7fe fa9b 	bl	8000280 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d4a:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x50>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001d52:	3301      	adds	r3, #1
 8001d54:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001d56:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d5a:	bd08      	pop	{r3, pc}
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	00f42400 	.word	0x00f42400
 8001d64:	007a1200 	.word	0x007a1200

08001d68 <HAL_RCC_ClockConfig>:
{
 8001d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d6c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001d6e:	4604      	mov	r4, r0
 8001d70:	b910      	cbnz	r0, 8001d78 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001d72:	2001      	movs	r0, #1
 8001d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d78:	4b44      	ldr	r3, [pc, #272]	; (8001e8c <HAL_RCC_ClockConfig+0x124>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	f002 020f 	and.w	r2, r2, #15
 8001d80:	428a      	cmp	r2, r1
 8001d82:	d328      	bcc.n	8001dd6 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d84:	6821      	ldr	r1, [r4, #0]
 8001d86:	078f      	lsls	r7, r1, #30
 8001d88:	d42d      	bmi.n	8001de6 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d8a:	07c8      	lsls	r0, r1, #31
 8001d8c:	d440      	bmi.n	8001e10 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d8e:	4b3f      	ldr	r3, [pc, #252]	; (8001e8c <HAL_RCC_ClockConfig+0x124>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	f002 020f 	and.w	r2, r2, #15
 8001d96:	4295      	cmp	r5, r2
 8001d98:	d366      	bcc.n	8001e68 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d9a:	6822      	ldr	r2, [r4, #0]
 8001d9c:	0751      	lsls	r1, r2, #29
 8001d9e:	d46c      	bmi.n	8001e7a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da0:	0713      	lsls	r3, r2, #28
 8001da2:	d507      	bpl.n	8001db4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001da4:	4a3a      	ldr	r2, [pc, #232]	; (8001e90 <HAL_RCC_ClockConfig+0x128>)
 8001da6:	6921      	ldr	r1, [r4, #16]
 8001da8:	6893      	ldr	r3, [r2, #8]
 8001daa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001dae:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001db2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001db4:	f7ff ffaa 	bl	8001d0c <HAL_RCC_GetSysClockFreq>
 8001db8:	4b35      	ldr	r3, [pc, #212]	; (8001e90 <HAL_RCC_ClockConfig+0x128>)
 8001dba:	4a36      	ldr	r2, [pc, #216]	; (8001e94 <HAL_RCC_ClockConfig+0x12c>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001dc2:	5cd3      	ldrb	r3, [r2, r3]
 8001dc4:	40d8      	lsrs	r0, r3
 8001dc6:	4b34      	ldr	r3, [pc, #208]	; (8001e98 <HAL_RCC_ClockConfig+0x130>)
 8001dc8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001dca:	2000      	movs	r0, #0
 8001dcc:	f7fe fbe0 	bl	8000590 <HAL_InitTick>
  return HAL_OK;
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd6:	b2ca      	uxtb	r2, r1
 8001dd8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 030f 	and.w	r3, r3, #15
 8001de0:	4299      	cmp	r1, r3
 8001de2:	d1c6      	bne.n	8001d72 <HAL_RCC_ClockConfig+0xa>
 8001de4:	e7ce      	b.n	8001d84 <HAL_RCC_ClockConfig+0x1c>
 8001de6:	4b2a      	ldr	r3, [pc, #168]	; (8001e90 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de8:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dec:	bf1e      	ittt	ne
 8001dee:	689a      	ldrne	r2, [r3, #8]
 8001df0:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001df4:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df6:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001df8:	bf42      	ittt	mi
 8001dfa:	689a      	ldrmi	r2, [r3, #8]
 8001dfc:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001e00:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	68a0      	ldr	r0, [r4, #8]
 8001e06:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001e0a:	4302      	orrs	r2, r0
 8001e0c:	609a      	str	r2, [r3, #8]
 8001e0e:	e7bc      	b.n	8001d8a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e10:	6862      	ldr	r2, [r4, #4]
 8001e12:	4b1f      	ldr	r3, [pc, #124]	; (8001e90 <HAL_RCC_ClockConfig+0x128>)
 8001e14:	2a01      	cmp	r2, #1
 8001e16:	d11d      	bne.n	8001e54 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e1e:	d0a8      	beq.n	8001d72 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e20:	4e1b      	ldr	r6, [pc, #108]	; (8001e90 <HAL_RCC_ClockConfig+0x128>)
 8001e22:	68b3      	ldr	r3, [r6, #8]
 8001e24:	f023 0303 	bic.w	r3, r3, #3
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001e2c:	f7fe fbfa 	bl	8000624 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e30:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001e34:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e36:	68b3      	ldr	r3, [r6, #8]
 8001e38:	6862      	ldr	r2, [r4, #4]
 8001e3a:	f003 030c 	and.w	r3, r3, #12
 8001e3e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001e42:	d0a4      	beq.n	8001d8e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e44:	f7fe fbee 	bl	8000624 <HAL_GetTick>
 8001e48:	1bc0      	subs	r0, r0, r7
 8001e4a:	4540      	cmp	r0, r8
 8001e4c:	d9f3      	bls.n	8001e36 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001e4e:	2003      	movs	r0, #3
}
 8001e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e54:	1e91      	subs	r1, r2, #2
 8001e56:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e58:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e5a:	d802      	bhi.n	8001e62 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e5c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001e60:	e7dd      	b.n	8001e1e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e62:	f013 0f02 	tst.w	r3, #2
 8001e66:	e7da      	b.n	8001e1e <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e68:	b2ea      	uxtb	r2, r5
 8001e6a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	429d      	cmp	r5, r3
 8001e74:	f47f af7d 	bne.w	8001d72 <HAL_RCC_ClockConfig+0xa>
 8001e78:	e78f      	b.n	8001d9a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e7a:	4905      	ldr	r1, [pc, #20]	; (8001e90 <HAL_RCC_ClockConfig+0x128>)
 8001e7c:	68e0      	ldr	r0, [r4, #12]
 8001e7e:	688b      	ldr	r3, [r1, #8]
 8001e80:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001e84:	4303      	orrs	r3, r0
 8001e86:	608b      	str	r3, [r1, #8]
 8001e88:	e78a      	b.n	8001da0 <HAL_RCC_ClockConfig+0x38>
 8001e8a:	bf00      	nop
 8001e8c:	40023c00 	.word	0x40023c00
 8001e90:	40023800 	.word	0x40023800
 8001e94:	08004acb 	.word	0x08004acb
 8001e98:	20000014 	.word	0x20000014

08001e9c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e9c:	4b04      	ldr	r3, [pc, #16]	; (8001eb0 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001e9e:	4a05      	ldr	r2, [pc, #20]	; (8001eb4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001ea6:	5cd3      	ldrb	r3, [r2, r3]
 8001ea8:	4a03      	ldr	r2, [pc, #12]	; (8001eb8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001eaa:	6810      	ldr	r0, [r2, #0]
}
 8001eac:	40d8      	lsrs	r0, r3
 8001eae:	4770      	bx	lr
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	08004adb 	.word	0x08004adb
 8001eb8:	20000014 	.word	0x20000014

08001ebc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ebc:	4b04      	ldr	r3, [pc, #16]	; (8001ed0 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001ebe:	4a05      	ldr	r2, [pc, #20]	; (8001ed4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001ec6:	5cd3      	ldrb	r3, [r2, r3]
 8001ec8:	4a03      	ldr	r2, [pc, #12]	; (8001ed8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001eca:	6810      	ldr	r0, [r2, #0]
}
 8001ecc:	40d8      	lsrs	r0, r3
 8001ece:	4770      	bx	lr
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	08004adb 	.word	0x08004adb
 8001ed8:	20000014 	.word	0x20000014

08001edc <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001edc:	6a03      	ldr	r3, [r0, #32]
 8001ede:	f023 0301 	bic.w	r3, r3, #1
 8001ee2:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ee4:	6a03      	ldr	r3, [r0, #32]
{
 8001ee6:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001ee8:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001eea:	6982      	ldr	r2, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001eec:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001eee:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001ef2:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001ef4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001ef6:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001efa:	432b      	orrs	r3, r5

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001efc:	4d0a      	ldr	r5, [pc, #40]	; (8001f28 <TIM_OC1_SetConfig+0x4c>)
 8001efe:	42a8      	cmp	r0, r5
 8001f00:	d10b      	bne.n	8001f1a <TIM_OC1_SetConfig+0x3e>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001f02:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f04:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001f06:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001f0a:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f0c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001f0e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f12:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001f14:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f18:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f1a:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f1c:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001f1e:	684a      	ldr	r2, [r1, #4]
 8001f20:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001f22:	6203      	str	r3, [r0, #32]
 8001f24:	bd70      	pop	{r4, r5, r6, pc}
 8001f26:	bf00      	nop
 8001f28:	40010000 	.word	0x40010000

08001f2c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001f2c:	6a03      	ldr	r3, [r0, #32]
 8001f2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f32:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f34:	6a03      	ldr	r3, [r0, #32]
{
 8001f36:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001f38:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f3a:	69c2      	ldr	r2, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f3c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8001f3e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001f42:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001f44:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001f46:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001f4a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001f4e:	4d0b      	ldr	r5, [pc, #44]	; (8001f7c <TIM_OC3_SetConfig+0x50>)
 8001f50:	42a8      	cmp	r0, r5
 8001f52:	d10d      	bne.n	8001f70 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001f54:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001f56:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001f58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001f5c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001f60:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001f62:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001f66:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001f68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001f6c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f70:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001f72:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001f74:	684a      	ldr	r2, [r1, #4]
 8001f76:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f78:	6203      	str	r3, [r0, #32]
 8001f7a:	bd70      	pop	{r4, r5, r6, pc}
 8001f7c:	40010000 	.word	0x40010000

08001f80 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001f80:	6a03      	ldr	r3, [r0, #32]
 8001f82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f86:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f88:	6a03      	ldr	r3, [r0, #32]
{
 8001f8a:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001f8c:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f8e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f90:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001f92:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f96:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001f9a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001f9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001fa0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001fa4:	4d06      	ldr	r5, [pc, #24]	; (8001fc0 <TIM_OC4_SetConfig+0x40>)
 8001fa6:	42a8      	cmp	r0, r5
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001fa8:	bf02      	ittt	eq
 8001faa:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001fac:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001fb0:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fb4:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8001fb6:	61c2      	str	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001fb8:	684a      	ldr	r2, [r1, #4]
 8001fba:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fbc:	6203      	str	r3, [r0, #32]
 8001fbe:	bd30      	pop	{r4, r5, pc}
 8001fc0:	40010000 	.word	0x40010000

08001fc4 <HAL_TIM_PWM_MspInit>:
 8001fc4:	4770      	bx	lr

08001fc6 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001fc6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001fca:	2b01      	cmp	r3, #1
{
 8001fcc:	b570      	push	{r4, r5, r6, lr}
 8001fce:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001fd2:	d01c      	beq.n	800200e <HAL_TIM_ConfigClockSource+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8001fd4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 8001fd8:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 8001fe0:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fe2:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001fe6:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001fea:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8001fec:	680a      	ldr	r2, [r1, #0]
 8001fee:	2a40      	cmp	r2, #64	; 0x40
 8001ff0:	d079      	beq.n	80020e6 <HAL_TIM_ConfigClockSource+0x120>
 8001ff2:	d819      	bhi.n	8002028 <HAL_TIM_ConfigClockSource+0x62>
 8001ff4:	2a10      	cmp	r2, #16
 8001ff6:	f000 8093 	beq.w	8002120 <HAL_TIM_ConfigClockSource+0x15a>
 8001ffa:	d80a      	bhi.n	8002012 <HAL_TIM_ConfigClockSource+0x4c>
 8001ffc:	2a00      	cmp	r2, #0
 8001ffe:	f000 8089 	beq.w	8002114 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8002002:	2301      	movs	r3, #1
 8002004:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8002008:	2300      	movs	r3, #0
 800200a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 800200e:	4618      	mov	r0, r3
}
 8002010:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002012:	2a20      	cmp	r2, #32
 8002014:	f000 808a 	beq.w	800212c <HAL_TIM_ConfigClockSource+0x166>
 8002018:	2a30      	cmp	r2, #48	; 0x30
 800201a:	d1f2      	bne.n	8002002 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800201c:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800201e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002022:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8002026:	e036      	b.n	8002096 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8002028:	2a70      	cmp	r2, #112	; 0x70
 800202a:	d036      	beq.n	800209a <HAL_TIM_ConfigClockSource+0xd4>
 800202c:	d81b      	bhi.n	8002066 <HAL_TIM_ConfigClockSource+0xa0>
 800202e:	2a50      	cmp	r2, #80	; 0x50
 8002030:	d042      	beq.n	80020b8 <HAL_TIM_ConfigClockSource+0xf2>
 8002032:	2a60      	cmp	r2, #96	; 0x60
 8002034:	d1e5      	bne.n	8002002 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002036:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8002038:	684d      	ldr	r5, [r1, #4]
 800203a:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800203c:	f024 0410 	bic.w	r4, r4, #16
 8002040:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002042:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8002044:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002046:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800204a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800204e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002052:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002056:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8002058:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800205a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800205c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002060:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8002064:	e017      	b.n	8002096 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8002066:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800206a:	d011      	beq.n	8002090 <HAL_TIM_ConfigClockSource+0xca>
 800206c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002070:	d1c7      	bne.n	8002002 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002072:	688a      	ldr	r2, [r1, #8]
 8002074:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002076:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002078:	68c9      	ldr	r1, [r1, #12]
 800207a:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800207c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002080:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002084:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002086:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002088:	689a      	ldr	r2, [r3, #8]
 800208a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800208e:	e002      	b.n	8002096 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	e7b3      	b.n	8002002 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800209a:	688a      	ldr	r2, [r1, #8]
 800209c:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800209e:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80020a0:	68c9      	ldr	r1, [r1, #12]
 80020a2:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020a4:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80020a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80020ac:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 80020ae:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 80020b0:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020b2:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 80020b6:	e7ee      	b.n	8002096 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80020b8:	684c      	ldr	r4, [r1, #4]
 80020ba:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80020bc:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020be:	6a1d      	ldr	r5, [r3, #32]
 80020c0:	f025 0501 	bic.w	r5, r5, #1
 80020c4:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80020c6:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020c8:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020cc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020d0:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80020d4:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80020d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020d8:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80020da:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80020dc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80020e0:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 80020e4:	e7d7      	b.n	8002096 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80020e6:	684c      	ldr	r4, [r1, #4]
 80020e8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80020ea:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020ec:	6a1d      	ldr	r5, [r3, #32]
 80020ee:	f025 0501 	bic.w	r5, r5, #1
 80020f2:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80020f4:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020f6:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020fa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020fe:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002102:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8002104:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002106:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002108:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800210a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800210e:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8002112:	e7c0      	b.n	8002096 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002114:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002116:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800211a:	f042 0207 	orr.w	r2, r2, #7
 800211e:	e7ba      	b.n	8002096 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002120:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002122:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002126:	f042 0217 	orr.w	r2, r2, #23
 800212a:	e7b4      	b.n	8002096 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800212c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800212e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002132:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8002136:	e7ae      	b.n	8002096 <HAL_TIM_ConfigClockSource+0xd0>

08002138 <HAL_TIM_PeriodElapsedCallback>:
 8002138:	4770      	bx	lr

0800213a <HAL_TIM_OC_DelayElapsedCallback>:
 800213a:	4770      	bx	lr

0800213c <HAL_TIM_IC_CaptureCallback>:
 800213c:	4770      	bx	lr

0800213e <HAL_TIM_PWM_PulseFinishedCallback>:
 800213e:	4770      	bx	lr

08002140 <HAL_TIM_TriggerCallback>:
 8002140:	4770      	bx	lr

08002142 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002142:	6803      	ldr	r3, [r0, #0]
 8002144:	691a      	ldr	r2, [r3, #16]
 8002146:	0791      	lsls	r1, r2, #30
{
 8002148:	b510      	push	{r4, lr}
 800214a:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800214c:	d50e      	bpl.n	800216c <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800214e:	68da      	ldr	r2, [r3, #12]
 8002150:	0792      	lsls	r2, r2, #30
 8002152:	d50b      	bpl.n	800216c <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002154:	f06f 0202 	mvn.w	r2, #2
 8002158:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800215a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800215c:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800215e:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002160:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002162:	d077      	beq.n	8002254 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8002164:	f7ff ffea 	bl	800213c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002168:	2300      	movs	r3, #0
 800216a:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800216c:	6823      	ldr	r3, [r4, #0]
 800216e:	691a      	ldr	r2, [r3, #16]
 8002170:	0750      	lsls	r0, r2, #29
 8002172:	d510      	bpl.n	8002196 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002174:	68da      	ldr	r2, [r3, #12]
 8002176:	0751      	lsls	r1, r2, #29
 8002178:	d50d      	bpl.n	8002196 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800217a:	f06f 0204 	mvn.w	r2, #4
 800217e:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002180:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002182:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002184:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002188:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800218a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800218c:	d068      	beq.n	8002260 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800218e:	f7ff ffd5 	bl	800213c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002192:	2300      	movs	r3, #0
 8002194:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002196:	6823      	ldr	r3, [r4, #0]
 8002198:	691a      	ldr	r2, [r3, #16]
 800219a:	0712      	lsls	r2, r2, #28
 800219c:	d50f      	bpl.n	80021be <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800219e:	68da      	ldr	r2, [r3, #12]
 80021a0:	0710      	lsls	r0, r2, #28
 80021a2:	d50c      	bpl.n	80021be <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021a4:	f06f 0208 	mvn.w	r2, #8
 80021a8:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021aa:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021ac:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021ae:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021b0:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80021b2:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021b4:	d05a      	beq.n	800226c <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80021b6:	f7ff ffc1 	bl	800213c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ba:	2300      	movs	r3, #0
 80021bc:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021be:	6823      	ldr	r3, [r4, #0]
 80021c0:	691a      	ldr	r2, [r3, #16]
 80021c2:	06d2      	lsls	r2, r2, #27
 80021c4:	d510      	bpl.n	80021e8 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80021c6:	68da      	ldr	r2, [r3, #12]
 80021c8:	06d0      	lsls	r0, r2, #27
 80021ca:	d50d      	bpl.n	80021e8 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021cc:	f06f 0210 	mvn.w	r2, #16
 80021d0:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021d2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021d4:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021d6:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021da:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80021dc:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021de:	d04b      	beq.n	8002278 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80021e0:	f7ff ffac 	bl	800213c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021e4:	2300      	movs	r3, #0
 80021e6:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021e8:	6823      	ldr	r3, [r4, #0]
 80021ea:	691a      	ldr	r2, [r3, #16]
 80021ec:	07d1      	lsls	r1, r2, #31
 80021ee:	d508      	bpl.n	8002202 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80021f0:	68da      	ldr	r2, [r3, #12]
 80021f2:	07d2      	lsls	r2, r2, #31
 80021f4:	d505      	bpl.n	8002202 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021f6:	f06f 0201 	mvn.w	r2, #1
 80021fa:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80021fc:	4620      	mov	r0, r4
 80021fe:	f7ff ff9b 	bl	8002138 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002202:	6823      	ldr	r3, [r4, #0]
 8002204:	691a      	ldr	r2, [r3, #16]
 8002206:	0610      	lsls	r0, r2, #24
 8002208:	d508      	bpl.n	800221c <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800220a:	68da      	ldr	r2, [r3, #12]
 800220c:	0611      	lsls	r1, r2, #24
 800220e:	d505      	bpl.n	800221c <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002210:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002214:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002216:	4620      	mov	r0, r4
 8002218:	f000 f967 	bl	80024ea <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800221c:	6823      	ldr	r3, [r4, #0]
 800221e:	691a      	ldr	r2, [r3, #16]
 8002220:	0652      	lsls	r2, r2, #25
 8002222:	d508      	bpl.n	8002236 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002224:	68da      	ldr	r2, [r3, #12]
 8002226:	0650      	lsls	r0, r2, #25
 8002228:	d505      	bpl.n	8002236 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800222a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800222e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002230:	4620      	mov	r0, r4
 8002232:	f7ff ff85 	bl	8002140 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002236:	6823      	ldr	r3, [r4, #0]
 8002238:	691a      	ldr	r2, [r3, #16]
 800223a:	0691      	lsls	r1, r2, #26
 800223c:	d522      	bpl.n	8002284 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800223e:	68da      	ldr	r2, [r3, #12]
 8002240:	0692      	lsls	r2, r2, #26
 8002242:	d51f      	bpl.n	8002284 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002244:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002248:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800224a:	611a      	str	r2, [r3, #16]
}
 800224c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8002250:	f000 b94a 	b.w	80024e8 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002254:	f7ff ff71 	bl	800213a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002258:	4620      	mov	r0, r4
 800225a:	f7ff ff70 	bl	800213e <HAL_TIM_PWM_PulseFinishedCallback>
 800225e:	e783      	b.n	8002168 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002260:	f7ff ff6b 	bl	800213a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002264:	4620      	mov	r0, r4
 8002266:	f7ff ff6a 	bl	800213e <HAL_TIM_PWM_PulseFinishedCallback>
 800226a:	e792      	b.n	8002192 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800226c:	f7ff ff65 	bl	800213a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8002270:	4620      	mov	r0, r4
 8002272:	f7ff ff64 	bl	800213e <HAL_TIM_PWM_PulseFinishedCallback>
 8002276:	e7a0      	b.n	80021ba <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002278:	f7ff ff5f 	bl	800213a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800227c:	4620      	mov	r0, r4
 800227e:	f7ff ff5e 	bl	800213e <HAL_TIM_PWM_PulseFinishedCallback>
 8002282:	e7af      	b.n	80021e4 <HAL_TIM_IRQHandler+0xa2>
 8002284:	bd10      	pop	{r4, pc}
	...

08002288 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002288:	4a22      	ldr	r2, [pc, #136]	; (8002314 <TIM_Base_SetConfig+0x8c>)
  tmpcr1 = TIMx->CR1;
 800228a:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800228c:	4290      	cmp	r0, r2
 800228e:	d00e      	beq.n	80022ae <TIM_Base_SetConfig+0x26>
 8002290:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002294:	d00b      	beq.n	80022ae <TIM_Base_SetConfig+0x26>
 8002296:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800229a:	4290      	cmp	r0, r2
 800229c:	d007      	beq.n	80022ae <TIM_Base_SetConfig+0x26>
 800229e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022a2:	4290      	cmp	r0, r2
 80022a4:	d003      	beq.n	80022ae <TIM_Base_SetConfig+0x26>
 80022a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022aa:	4290      	cmp	r0, r2
 80022ac:	d119      	bne.n	80022e2 <TIM_Base_SetConfig+0x5a>
    tmpcr1 |= Structure->CounterMode;
 80022ae:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80022b4:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80022b6:	4a17      	ldr	r2, [pc, #92]	; (8002314 <TIM_Base_SetConfig+0x8c>)
 80022b8:	4290      	cmp	r0, r2
 80022ba:	d104      	bne.n	80022c6 <TIM_Base_SetConfig+0x3e>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022bc:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80022be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022c2:	4313      	orrs	r3, r2
 80022c4:	e018      	b.n	80022f8 <TIM_Base_SetConfig+0x70>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80022c6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80022ca:	d0f7      	beq.n	80022bc <TIM_Base_SetConfig+0x34>
 80022cc:	4a12      	ldr	r2, [pc, #72]	; (8002318 <TIM_Base_SetConfig+0x90>)
 80022ce:	4290      	cmp	r0, r2
 80022d0:	d0f4      	beq.n	80022bc <TIM_Base_SetConfig+0x34>
 80022d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022d6:	4290      	cmp	r0, r2
 80022d8:	d0f0      	beq.n	80022bc <TIM_Base_SetConfig+0x34>
 80022da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022de:	4290      	cmp	r0, r2
 80022e0:	d0ec      	beq.n	80022bc <TIM_Base_SetConfig+0x34>
 80022e2:	4a0e      	ldr	r2, [pc, #56]	; (800231c <TIM_Base_SetConfig+0x94>)
 80022e4:	4290      	cmp	r0, r2
 80022e6:	d0e9      	beq.n	80022bc <TIM_Base_SetConfig+0x34>
 80022e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022ec:	4290      	cmp	r0, r2
 80022ee:	d0e5      	beq.n	80022bc <TIM_Base_SetConfig+0x34>
 80022f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022f4:	4290      	cmp	r0, r2
 80022f6:	d0e1      	beq.n	80022bc <TIM_Base_SetConfig+0x34>
  TIMx->CR1 = tmpcr1;
 80022f8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022fa:	688b      	ldr	r3, [r1, #8]
 80022fc:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80022fe:	680b      	ldr	r3, [r1, #0]
 8002300:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002302:	4b04      	ldr	r3, [pc, #16]	; (8002314 <TIM_Base_SetConfig+0x8c>)
 8002304:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8002306:	bf04      	itt	eq
 8002308:	690b      	ldreq	r3, [r1, #16]
 800230a:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800230c:	2301      	movs	r3, #1
 800230e:	6143      	str	r3, [r0, #20]
}
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	40010000 	.word	0x40010000
 8002318:	40000400 	.word	0x40000400
 800231c:	40014000 	.word	0x40014000

08002320 <HAL_TIM_Base_Init>:
{ 
 8002320:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002322:	4604      	mov	r4, r0
 8002324:	b1a0      	cbz	r0, 8002350 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002326:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800232a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800232e:	b91b      	cbnz	r3, 8002338 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002330:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8002334:	f000 ffae 	bl	8003294 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002338:	2302      	movs	r3, #2
 800233a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800233e:	6820      	ldr	r0, [r4, #0]
 8002340:	1d21      	adds	r1, r4, #4
 8002342:	f7ff ffa1 	bl	8002288 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002346:	2301      	movs	r3, #1
 8002348:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 800234c:	2000      	movs	r0, #0
 800234e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002350:	2001      	movs	r0, #1
}
 8002352:	bd10      	pop	{r4, pc}

08002354 <HAL_TIM_PWM_Init>:
{
 8002354:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002356:	4604      	mov	r4, r0
 8002358:	b1a0      	cbz	r0, 8002384 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800235a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800235e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002362:	b91b      	cbnz	r3, 800236c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002364:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8002368:	f7ff fe2c 	bl	8001fc4 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 800236c:	2302      	movs	r3, #2
 800236e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002372:	6820      	ldr	r0, [r4, #0]
 8002374:	1d21      	adds	r1, r4, #4
 8002376:	f7ff ff87 	bl	8002288 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800237a:	2301      	movs	r3, #1
 800237c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8002380:	2000      	movs	r0, #0
 8002382:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002384:	2001      	movs	r0, #1
}  
 8002386:	bd10      	pop	{r4, pc}

08002388 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002388:	6a03      	ldr	r3, [r0, #32]
 800238a:	f023 0310 	bic.w	r3, r3, #16
 800238e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002390:	6a03      	ldr	r3, [r0, #32]
{
 8002392:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 = TIMx->CR2;
 8002394:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002396:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002398:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800239a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800239e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80023a2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80023a4:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80023a8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80023ac:	4d0b      	ldr	r5, [pc, #44]	; (80023dc <TIM_OC2_SetConfig+0x54>)
 80023ae:	42a8      	cmp	r0, r5
 80023b0:	d10d      	bne.n	80023ce <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80023b2:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80023b4:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 80023b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80023ba:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80023be:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80023c0:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80023c4:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80023c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80023ca:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80023ce:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80023d0:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80023d2:	684a      	ldr	r2, [r1, #4]
 80023d4:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80023d6:	6203      	str	r3, [r0, #32]
 80023d8:	bd70      	pop	{r4, r5, r6, pc}
 80023da:	bf00      	nop
 80023dc:	40010000 	.word	0x40010000

080023e0 <HAL_TIM_PWM_ConfigChannel>:
{
 80023e0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80023e2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80023e6:	2b01      	cmp	r3, #1
{
 80023e8:	4604      	mov	r4, r0
 80023ea:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80023ee:	d025      	beq.n	800243c <HAL_TIM_PWM_ConfigChannel+0x5c>
 80023f0:	2301      	movs	r3, #1
 80023f2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 80023f6:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 80023fa:	2a0c      	cmp	r2, #12
 80023fc:	d818      	bhi.n	8002430 <HAL_TIM_PWM_ConfigChannel+0x50>
 80023fe:	e8df f002 	tbb	[pc, r2]
 8002402:	1707      	.short	0x1707
 8002404:	171e1717 	.word	0x171e1717
 8002408:	172f1717 	.word	0x172f1717
 800240c:	1717      	.short	0x1717
 800240e:	40          	.byte	0x40
 800240f:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002410:	6820      	ldr	r0, [r4, #0]
 8002412:	f7ff fd63 	bl	8001edc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002416:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002418:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800241a:	699a      	ldr	r2, [r3, #24]
 800241c:	f042 0208 	orr.w	r2, r2, #8
 8002420:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002422:	699a      	ldr	r2, [r3, #24]
 8002424:	f022 0204 	bic.w	r2, r2, #4
 8002428:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800242a:	699a      	ldr	r2, [r3, #24]
 800242c:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800242e:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002430:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002432:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002434:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8002438:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 800243c:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800243e:	6820      	ldr	r0, [r4, #0]
 8002440:	f7ff ffa2 	bl	8002388 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002444:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002446:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002448:	699a      	ldr	r2, [r3, #24]
 800244a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800244e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002450:	699a      	ldr	r2, [r3, #24]
 8002452:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002456:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002458:	699a      	ldr	r2, [r3, #24]
 800245a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800245e:	e7e6      	b.n	800242e <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002460:	6820      	ldr	r0, [r4, #0]
 8002462:	f7ff fd63 	bl	8001f2c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002466:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002468:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800246a:	69da      	ldr	r2, [r3, #28]
 800246c:	f042 0208 	orr.w	r2, r2, #8
 8002470:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002472:	69da      	ldr	r2, [r3, #28]
 8002474:	f022 0204 	bic.w	r2, r2, #4
 8002478:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800247a:	69da      	ldr	r2, [r3, #28]
 800247c:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800247e:	61da      	str	r2, [r3, #28]
    break;
 8002480:	e7d6      	b.n	8002430 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002482:	6820      	ldr	r0, [r4, #0]
 8002484:	f7ff fd7c 	bl	8001f80 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002488:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800248a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800248c:	69da      	ldr	r2, [r3, #28]
 800248e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002492:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002494:	69da      	ldr	r2, [r3, #28]
 8002496:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800249a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800249c:	69da      	ldr	r2, [r3, #28]
 800249e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80024a2:	e7ec      	b.n	800247e <HAL_TIM_PWM_ConfigChannel+0x9e>

080024a4 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 80024a4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80024a8:	2b01      	cmp	r3, #1
{
 80024aa:	b510      	push	{r4, lr}
 80024ac:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80024b0:	d018      	beq.n	80024e4 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 80024b2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80024b6:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80024b8:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80024ba:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80024bc:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80024be:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80024c2:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	4322      	orrs	r2, r4
 80024c8:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024d0:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 80024d8:	2301      	movs	r3, #1
 80024da:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80024de:	2300      	movs	r3, #0
 80024e0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 80024e4:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 80024e6:	bd10      	pop	{r4, pc}

080024e8 <HAL_TIMEx_CommutationCallback>:
 80024e8:	4770      	bx	lr

080024ea <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024ea:	4770      	bx	lr

080024ec <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024ec:	6803      	ldr	r3, [r0, #0]
 80024ee:	68da      	ldr	r2, [r3, #12]
 80024f0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80024f4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024f6:	695a      	ldr	r2, [r3, #20]
 80024f8:	f022 0201 	bic.w	r2, r2, #1
 80024fc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80024fe:	2320      	movs	r3, #32
 8002500:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8002504:	4770      	bx	lr
	...

08002508 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 800250c:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800250e:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8002510:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002512:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8002514:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002518:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800251a:	6133      	str	r3, [r6, #16]
{
 800251c:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800251e:	6883      	ldr	r3, [r0, #8]
 8002520:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8002522:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002524:	4303      	orrs	r3, r0
 8002526:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002528:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800252c:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800252e:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002532:	430b      	orrs	r3, r1
 8002534:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8002536:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8002538:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800253a:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800253c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8002540:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002542:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8002546:	6173      	str	r3, [r6, #20]
 8002548:	4b7a      	ldr	r3, [pc, #488]	; (8002734 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800254a:	d17c      	bne.n	8002646 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800254c:	429e      	cmp	r6, r3
 800254e:	d003      	beq.n	8002558 <UART_SetConfig+0x50>
 8002550:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002554:	429e      	cmp	r6, r3
 8002556:	d144      	bne.n	80025e2 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002558:	f7ff fcb0 	bl	8001ebc <HAL_RCC_GetPCLK2Freq>
 800255c:	2519      	movs	r5, #25
 800255e:	fb05 f300 	mul.w	r3, r5, r0
 8002562:	6860      	ldr	r0, [r4, #4]
 8002564:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002568:	0040      	lsls	r0, r0, #1
 800256a:	fbb3 f3f0 	udiv	r3, r3, r0
 800256e:	fbb3 f3f9 	udiv	r3, r3, r9
 8002572:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002576:	f7ff fca1 	bl	8001ebc <HAL_RCC_GetPCLK2Freq>
 800257a:	6863      	ldr	r3, [r4, #4]
 800257c:	4368      	muls	r0, r5
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	fbb0 f7f3 	udiv	r7, r0, r3
 8002584:	f7ff fc9a 	bl	8001ebc <HAL_RCC_GetPCLK2Freq>
 8002588:	6863      	ldr	r3, [r4, #4]
 800258a:	4368      	muls	r0, r5
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002592:	fbb3 f3f9 	udiv	r3, r3, r9
 8002596:	fb09 7313 	mls	r3, r9, r3, r7
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	3332      	adds	r3, #50	; 0x32
 800259e:	fbb3 f3f9 	udiv	r3, r3, r9
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80025a8:	f7ff fc88 	bl	8001ebc <HAL_RCC_GetPCLK2Freq>
 80025ac:	6862      	ldr	r2, [r4, #4]
 80025ae:	4368      	muls	r0, r5
 80025b0:	0052      	lsls	r2, r2, #1
 80025b2:	fbb0 faf2 	udiv	sl, r0, r2
 80025b6:	f7ff fc81 	bl	8001ebc <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80025ba:	6863      	ldr	r3, [r4, #4]
 80025bc:	4368      	muls	r0, r5
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80025c4:	fbb3 f3f9 	udiv	r3, r3, r9
 80025c8:	fb09 a313 	mls	r3, r9, r3, sl
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	3332      	adds	r3, #50	; 0x32
 80025d0:	fbb3 f3f9 	udiv	r3, r3, r9
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80025da:	443b      	add	r3, r7
 80025dc:	60b3      	str	r3, [r6, #8]
 80025de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80025e2:	f7ff fc5b 	bl	8001e9c <HAL_RCC_GetPCLK1Freq>
 80025e6:	2519      	movs	r5, #25
 80025e8:	fb05 f300 	mul.w	r3, r5, r0
 80025ec:	6860      	ldr	r0, [r4, #4]
 80025ee:	f04f 0964 	mov.w	r9, #100	; 0x64
 80025f2:	0040      	lsls	r0, r0, #1
 80025f4:	fbb3 f3f0 	udiv	r3, r3, r0
 80025f8:	fbb3 f3f9 	udiv	r3, r3, r9
 80025fc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002600:	f7ff fc4c 	bl	8001e9c <HAL_RCC_GetPCLK1Freq>
 8002604:	6863      	ldr	r3, [r4, #4]
 8002606:	4368      	muls	r0, r5
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	fbb0 f7f3 	udiv	r7, r0, r3
 800260e:	f7ff fc45 	bl	8001e9c <HAL_RCC_GetPCLK1Freq>
 8002612:	6863      	ldr	r3, [r4, #4]
 8002614:	4368      	muls	r0, r5
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	fbb0 f3f3 	udiv	r3, r0, r3
 800261c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002620:	fb09 7313 	mls	r3, r9, r3, r7
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	3332      	adds	r3, #50	; 0x32
 8002628:	fbb3 f3f9 	udiv	r3, r3, r9
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8002632:	f7ff fc33 	bl	8001e9c <HAL_RCC_GetPCLK1Freq>
 8002636:	6862      	ldr	r2, [r4, #4]
 8002638:	4368      	muls	r0, r5
 800263a:	0052      	lsls	r2, r2, #1
 800263c:	fbb0 faf2 	udiv	sl, r0, r2
 8002640:	f7ff fc2c 	bl	8001e9c <HAL_RCC_GetPCLK1Freq>
 8002644:	e7b9      	b.n	80025ba <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002646:	429e      	cmp	r6, r3
 8002648:	d002      	beq.n	8002650 <UART_SetConfig+0x148>
 800264a:	4b3b      	ldr	r3, [pc, #236]	; (8002738 <UART_SetConfig+0x230>)
 800264c:	429e      	cmp	r6, r3
 800264e:	d140      	bne.n	80026d2 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002650:	f7ff fc34 	bl	8001ebc <HAL_RCC_GetPCLK2Freq>
 8002654:	6867      	ldr	r7, [r4, #4]
 8002656:	2519      	movs	r5, #25
 8002658:	f04f 0964 	mov.w	r9, #100	; 0x64
 800265c:	fb05 f300 	mul.w	r3, r5, r0
 8002660:	00bf      	lsls	r7, r7, #2
 8002662:	fbb3 f3f7 	udiv	r3, r3, r7
 8002666:	fbb3 f3f9 	udiv	r3, r3, r9
 800266a:	011f      	lsls	r7, r3, #4
 800266c:	f7ff fc26 	bl	8001ebc <HAL_RCC_GetPCLK2Freq>
 8002670:	6863      	ldr	r3, [r4, #4]
 8002672:	4368      	muls	r0, r5
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	fbb0 f8f3 	udiv	r8, r0, r3
 800267a:	f7ff fc1f 	bl	8001ebc <HAL_RCC_GetPCLK2Freq>
 800267e:	6863      	ldr	r3, [r4, #4]
 8002680:	4368      	muls	r0, r5
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	fbb0 f3f3 	udiv	r3, r0, r3
 8002688:	fbb3 f3f9 	udiv	r3, r3, r9
 800268c:	fb09 8313 	mls	r3, r9, r3, r8
 8002690:	011b      	lsls	r3, r3, #4
 8002692:	3332      	adds	r3, #50	; 0x32
 8002694:	fbb3 f3f9 	udiv	r3, r3, r9
 8002698:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800269c:	f7ff fc0e 	bl	8001ebc <HAL_RCC_GetPCLK2Freq>
 80026a0:	6862      	ldr	r2, [r4, #4]
 80026a2:	4368      	muls	r0, r5
 80026a4:	0092      	lsls	r2, r2, #2
 80026a6:	fbb0 faf2 	udiv	sl, r0, r2
 80026aa:	f7ff fc07 	bl	8001ebc <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80026ae:	6863      	ldr	r3, [r4, #4]
 80026b0:	4368      	muls	r0, r5
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80026b8:	fbb3 f3f9 	udiv	r3, r3, r9
 80026bc:	fb09 a313 	mls	r3, r9, r3, sl
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	3332      	adds	r3, #50	; 0x32
 80026c4:	fbb3 f3f9 	udiv	r3, r3, r9
 80026c8:	f003 030f 	and.w	r3, r3, #15
 80026cc:	ea43 0308 	orr.w	r3, r3, r8
 80026d0:	e783      	b.n	80025da <UART_SetConfig+0xd2>
 80026d2:	f7ff fbe3 	bl	8001e9c <HAL_RCC_GetPCLK1Freq>
 80026d6:	6867      	ldr	r7, [r4, #4]
 80026d8:	2519      	movs	r5, #25
 80026da:	f04f 0964 	mov.w	r9, #100	; 0x64
 80026de:	fb05 f300 	mul.w	r3, r5, r0
 80026e2:	00bf      	lsls	r7, r7, #2
 80026e4:	fbb3 f3f7 	udiv	r3, r3, r7
 80026e8:	fbb3 f3f9 	udiv	r3, r3, r9
 80026ec:	011f      	lsls	r7, r3, #4
 80026ee:	f7ff fbd5 	bl	8001e9c <HAL_RCC_GetPCLK1Freq>
 80026f2:	6863      	ldr	r3, [r4, #4]
 80026f4:	4368      	muls	r0, r5
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	fbb0 f8f3 	udiv	r8, r0, r3
 80026fc:	f7ff fbce 	bl	8001e9c <HAL_RCC_GetPCLK1Freq>
 8002700:	6863      	ldr	r3, [r4, #4]
 8002702:	4368      	muls	r0, r5
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	fbb0 f3f3 	udiv	r3, r0, r3
 800270a:	fbb3 f3f9 	udiv	r3, r3, r9
 800270e:	fb09 8313 	mls	r3, r9, r3, r8
 8002712:	011b      	lsls	r3, r3, #4
 8002714:	3332      	adds	r3, #50	; 0x32
 8002716:	fbb3 f3f9 	udiv	r3, r3, r9
 800271a:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800271e:	f7ff fbbd 	bl	8001e9c <HAL_RCC_GetPCLK1Freq>
 8002722:	6862      	ldr	r2, [r4, #4]
 8002724:	4368      	muls	r0, r5
 8002726:	0092      	lsls	r2, r2, #2
 8002728:	fbb0 faf2 	udiv	sl, r0, r2
 800272c:	f7ff fbb6 	bl	8001e9c <HAL_RCC_GetPCLK1Freq>
 8002730:	e7bd      	b.n	80026ae <UART_SetConfig+0x1a6>
 8002732:	bf00      	nop
 8002734:	40011000 	.word	0x40011000
 8002738:	40011400 	.word	0x40011400

0800273c <HAL_MultiProcessor_Init>:
{
 800273c:	b570      	push	{r4, r5, r6, lr}
 800273e:	460d      	mov	r5, r1
 8002740:	4616      	mov	r6, r2
  if(huart == NULL)
 8002742:	4604      	mov	r4, r0
 8002744:	2800      	cmp	r0, #0
 8002746:	d036      	beq.n	80027b6 <HAL_MultiProcessor_Init+0x7a>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002748:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800274c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002750:	b91b      	cbnz	r3, 800275a <HAL_MultiProcessor_Init+0x1e>
    huart->Lock = HAL_UNLOCKED;
 8002752:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002756:	f000 fef7 	bl	8003548 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800275a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800275c:	2324      	movs	r3, #36	; 0x24
 800275e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002762:	68d3      	ldr	r3, [r2, #12]
 8002764:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002768:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800276a:	4620      	mov	r0, r4
 800276c:	f7ff fecc 	bl	8002508 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002770:	6823      	ldr	r3, [r4, #0]
 8002772:	691a      	ldr	r2, [r3, #16]
 8002774:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002778:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800277a:	695a      	ldr	r2, [r3, #20]
 800277c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002780:	615a      	str	r2, [r3, #20]
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 8002782:	691a      	ldr	r2, [r3, #16]
 8002784:	f022 020f 	bic.w	r2, r2, #15
 8002788:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, Address);
 800278a:	691a      	ldr	r2, [r3, #16]
 800278c:	4315      	orrs	r5, r2
 800278e:	611d      	str	r5, [r3, #16]
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002796:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 8002798:	68da      	ldr	r2, [r3, #12]
 800279a:	4332      	orrs	r2, r6
 800279c:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE(huart);
 800279e:	68da      	ldr	r2, [r3, #12]
 80027a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027a4:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027a6:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80027a8:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027aa:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80027ac:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80027b0:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80027b4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80027b6:	2001      	movs	r0, #1
}
 80027b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080027bc <HAL_UART_Transmit_DMA>:
{
 80027bc:	b538      	push	{r3, r4, r5, lr}
 80027be:	4604      	mov	r4, r0
 80027c0:	4613      	mov	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80027c2:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80027c6:	2a20      	cmp	r2, #32
 80027c8:	d12a      	bne.n	8002820 <HAL_UART_Transmit_DMA+0x64>
    if((pData == NULL ) || (Size == 0))
 80027ca:	b339      	cbz	r1, 800281c <HAL_UART_Transmit_DMA+0x60>
 80027cc:	b333      	cbz	r3, 800281c <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 80027ce:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80027d2:	2a01      	cmp	r2, #1
 80027d4:	d024      	beq.n	8002820 <HAL_UART_Transmit_DMA+0x64>
 80027d6:	2201      	movs	r2, #1
 80027d8:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80027dc:	6b20      	ldr	r0, [r4, #48]	; 0x30
    huart->TxXferCount = Size;
 80027de:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027e0:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027e2:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027e4:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027e6:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80027ea:	4a0e      	ldr	r2, [pc, #56]	; (8002824 <HAL_UART_Transmit_DMA+0x68>)
    huart->TxXferSize = Size;
 80027ec:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->pTxBuffPtr = pData;
 80027ee:	6221      	str	r1, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80027f0:	63c2      	str	r2, [r0, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80027f2:	4a0d      	ldr	r2, [pc, #52]	; (8002828 <HAL_UART_Transmit_DMA+0x6c>)
 80027f4:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80027f6:	4a0d      	ldr	r2, [pc, #52]	; (800282c <HAL_UART_Transmit_DMA+0x70>)
 80027f8:	64c2      	str	r2, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 80027fa:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferAbortCallback = NULL;
 80027fc:	6505      	str	r5, [r0, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 80027fe:	3204      	adds	r2, #4
 8002800:	f7fe f9e6 	bl	8000bd0 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002804:	6823      	ldr	r3, [r4, #0]
 8002806:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800280a:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800280c:	695a      	ldr	r2, [r3, #20]
    __HAL_UNLOCK(huart);
 800280e:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002812:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002816:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 8002818:	4628      	mov	r0, r5
 800281a:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800281c:	2001      	movs	r0, #1
 800281e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8002820:	2002      	movs	r0, #2
}
 8002822:	bd38      	pop	{r3, r4, r5, pc}
 8002824:	080028c1 	.word	0x080028c1
 8002828:	080028ef 	.word	0x080028ef
 800282c:	080029b3 	.word	0x080029b3

08002830 <HAL_UART_Receive_DMA>:
{  
 8002830:	4613      	mov	r3, r2
  if(huart->RxState == HAL_UART_STATE_READY) 
 8002832:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 8002836:	2a20      	cmp	r2, #32
{  
 8002838:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800283a:	4605      	mov	r5, r0
  if(huart->RxState == HAL_UART_STATE_READY) 
 800283c:	d138      	bne.n	80028b0 <HAL_UART_Receive_DMA+0x80>
    if((pData == NULL ) || (Size == 0)) 
 800283e:	2900      	cmp	r1, #0
 8002840:	d034      	beq.n	80028ac <HAL_UART_Receive_DMA+0x7c>
 8002842:	2b00      	cmp	r3, #0
 8002844:	d032      	beq.n	80028ac <HAL_UART_Receive_DMA+0x7c>
    __HAL_LOCK(huart);
 8002846:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800284a:	2a01      	cmp	r2, #1
 800284c:	d030      	beq.n	80028b0 <HAL_UART_Receive_DMA+0x80>
 800284e:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002850:	2400      	movs	r4, #0
    __HAL_LOCK(huart);
 8002852:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002856:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002858:	63c4      	str	r4, [r0, #60]	; 0x3c
    huart->pRxBuffPtr = pData;
 800285a:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 800285c:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800285e:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002862:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8002864:	4a13      	ldr	r2, [pc, #76]	; (80028b4 <HAL_UART_Receive_DMA+0x84>)
 8002866:	63c2      	str	r2, [r0, #60]	; 0x3c
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8002868:	682e      	ldr	r6, [r5, #0]
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800286a:	4a13      	ldr	r2, [pc, #76]	; (80028b8 <HAL_UART_Receive_DMA+0x88>)
 800286c:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800286e:	4a13      	ldr	r2, [pc, #76]	; (80028bc <HAL_UART_Receive_DMA+0x8c>)
 8002870:	64c2      	str	r2, [r0, #76]	; 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 8002872:	6504      	str	r4, [r0, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8002874:	460a      	mov	r2, r1
 8002876:	1d31      	adds	r1, r6, #4
 8002878:	f7fe f9aa 	bl	8000bd0 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 800287c:	682b      	ldr	r3, [r5, #0]
 800287e:	9401      	str	r4, [sp, #4]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	9201      	str	r2, [sp, #4]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	9201      	str	r2, [sp, #4]
 8002888:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800288a:	68da      	ldr	r2, [r3, #12]
    __HAL_UNLOCK(huart);
 800288c:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002890:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002894:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002896:	695a      	ldr	r2, [r3, #20]
 8002898:	f042 0201 	orr.w	r2, r2, #1
 800289c:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800289e:	695a      	ldr	r2, [r3, #20]
 80028a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028a4:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 80028a6:	4620      	mov	r0, r4
}
 80028a8:	b002      	add	sp, #8
 80028aa:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80028ac:	2001      	movs	r0, #1
 80028ae:	e7fb      	b.n	80028a8 <HAL_UART_Receive_DMA+0x78>
    return HAL_BUSY; 
 80028b0:	2002      	movs	r0, #2
 80028b2:	e7f9      	b.n	80028a8 <HAL_UART_Receive_DMA+0x78>
 80028b4:	080028f9 	.word	0x080028f9
 80028b8:	080029a7 	.word	0x080029a7
 80028bc:	080029b3 	.word	0x080029b3

080028c0 <UART_DMATransmitCplt>:
{
 80028c0:	b508      	push	{r3, lr}
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80028c2:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028c4:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80028cc:	d10a      	bne.n	80028e4 <UART_DMATransmitCplt+0x24>
    huart->TxXferCount = 0U;
 80028ce:	84d3      	strh	r3, [r2, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80028d0:	6813      	ldr	r3, [r2, #0]
 80028d2:	695a      	ldr	r2, [r3, #20]
 80028d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028d8:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80028da:	68da      	ldr	r2, [r3, #12]
 80028dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028e0:	60da      	str	r2, [r3, #12]
 80028e2:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80028e4:	4610      	mov	r0, r2
 80028e6:	f000 f9ed 	bl	8002cc4 <HAL_UART_TxCpltCallback>
 80028ea:	bd08      	pop	{r3, pc}

080028ec <HAL_UART_TxHalfCpltCallback>:
 80028ec:	4770      	bx	lr

080028ee <UART_DMATxHalfCplt>:
{
 80028ee:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80028f0:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80028f2:	f7ff fffb 	bl	80028ec <HAL_UART_TxHalfCpltCallback>
 80028f6:	bd08      	pop	{r3, pc}

080028f8 <UART_DMAReceiveCplt>:
{
 80028f8:	b508      	push	{r3, lr}
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80028fa:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028fc:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8002904:	d110      	bne.n	8002928 <UART_DMAReceiveCplt+0x30>
    huart->RxXferCount = 0U;
 8002906:	85d3      	strh	r3, [r2, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002908:	6813      	ldr	r3, [r2, #0]
 800290a:	68d9      	ldr	r1, [r3, #12]
 800290c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002910:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002912:	6959      	ldr	r1, [r3, #20]
 8002914:	f021 0101 	bic.w	r1, r1, #1
 8002918:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800291a:	6959      	ldr	r1, [r3, #20]
 800291c:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8002920:	6159      	str	r1, [r3, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8002922:	2320      	movs	r3, #32
 8002924:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8002928:	4610      	mov	r0, r2
 800292a:	f000 f9e1 	bl	8002cf0 <HAL_UART_RxCpltCallback>
 800292e:	bd08      	pop	{r3, pc}

08002930 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8002930:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002934:	2b22      	cmp	r3, #34	; 0x22
{
 8002936:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8002938:	d132      	bne.n	80029a0 <UART_Receive_IT+0x70>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800293a:	6883      	ldr	r3, [r0, #8]
 800293c:	6901      	ldr	r1, [r0, #16]
 800293e:	6802      	ldr	r2, [r0, #0]
 8002940:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002944:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002946:	d11f      	bne.n	8002988 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002948:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800294a:	b9c9      	cbnz	r1, 8002980 <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800294c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002950:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8002954:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8002956:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8002958:	3c01      	subs	r4, #1
 800295a:	b2a4      	uxth	r4, r4
 800295c:	85c4      	strh	r4, [r0, #46]	; 0x2e
 800295e:	b96c      	cbnz	r4, 800297c <UART_Receive_IT+0x4c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002960:	6803      	ldr	r3, [r0, #0]
 8002962:	68da      	ldr	r2, [r3, #12]
 8002964:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002968:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800296a:	695a      	ldr	r2, [r3, #20]
 800296c:	f022 0201 	bic.w	r2, r2, #1
 8002970:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002972:	2320      	movs	r3, #32
 8002974:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002978:	f000 f9ba 	bl	8002cf0 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 800297c:	2000      	movs	r0, #0
}
 800297e:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002980:	b2d2      	uxtb	r2, r2
 8002982:	f823 2b01 	strh.w	r2, [r3], #1
 8002986:	e7e5      	b.n	8002954 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002988:	b921      	cbnz	r1, 8002994 <UART_Receive_IT+0x64>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800298a:	1c59      	adds	r1, r3, #1
 800298c:	6852      	ldr	r2, [r2, #4]
 800298e:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002990:	701a      	strb	r2, [r3, #0]
 8002992:	e7e0      	b.n	8002956 <UART_Receive_IT+0x26>
 8002994:	6852      	ldr	r2, [r2, #4]
 8002996:	1c59      	adds	r1, r3, #1
 8002998:	6281      	str	r1, [r0, #40]	; 0x28
 800299a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800299e:	e7f7      	b.n	8002990 <UART_Receive_IT+0x60>
    return HAL_BUSY;
 80029a0:	2002      	movs	r0, #2
 80029a2:	bd10      	pop	{r4, pc}

080029a4 <HAL_UART_RxHalfCpltCallback>:
 80029a4:	4770      	bx	lr

080029a6 <UART_DMARxHalfCplt>:
{
 80029a6:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart); 
 80029a8:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80029aa:	f7ff fffb 	bl	80029a4 <HAL_UART_RxHalfCpltCallback>
 80029ae:	bd08      	pop	{r3, pc}

080029b0 <HAL_UART_ErrorCallback>:
 80029b0:	4770      	bx	lr

080029b2 <UART_DMAError>:
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029b2:	6b81      	ldr	r1, [r0, #56]	; 0x38
{
 80029b4:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80029b6:	680b      	ldr	r3, [r1, #0]
 80029b8:	695a      	ldr	r2, [r3, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80029ba:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 80029be:	2821      	cmp	r0, #33	; 0x21
 80029c0:	d10a      	bne.n	80029d8 <UART_DMAError+0x26>
 80029c2:	0612      	lsls	r2, r2, #24
 80029c4:	d508      	bpl.n	80029d8 <UART_DMAError+0x26>
    huart->TxXferCount = 0U;
 80029c6:	2200      	movs	r2, #0
 80029c8:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80029ca:	68da      	ldr	r2, [r3, #12]
 80029cc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80029d0:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80029d2:	2220      	movs	r2, #32
 80029d4:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 80029d8:	695b      	ldr	r3, [r3, #20]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80029da:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 80029de:	2a22      	cmp	r2, #34	; 0x22
 80029e0:	d106      	bne.n	80029f0 <UART_DMAError+0x3e>
 80029e2:	065b      	lsls	r3, r3, #25
 80029e4:	d504      	bpl.n	80029f0 <UART_DMAError+0x3e>
    huart->RxXferCount = 0U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80029ea:	4608      	mov	r0, r1
 80029ec:	f7ff fd7e 	bl	80024ec <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80029f0:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80029f2:	f043 0310 	orr.w	r3, r3, #16
 80029f6:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 80029f8:	4608      	mov	r0, r1
 80029fa:	f7ff ffd9 	bl	80029b0 <HAL_UART_ErrorCallback>
 80029fe:	bd08      	pop	{r3, pc}

08002a00 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a00:	6803      	ldr	r3, [r0, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a04:	68d9      	ldr	r1, [r3, #12]
{
 8002a06:	b570      	push	{r4, r5, r6, lr}
  if(errorflags == RESET)
 8002a08:	0716      	lsls	r6, r2, #28
{
 8002a0a:	4604      	mov	r4, r0
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a0c:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8002a0e:	d107      	bne.n	8002a20 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a10:	0696      	lsls	r6, r2, #26
 8002a12:	d55a      	bpl.n	8002aca <HAL_UART_IRQHandler+0xca>
 8002a14:	068d      	lsls	r5, r1, #26
 8002a16:	d558      	bpl.n	8002aca <HAL_UART_IRQHandler+0xca>
}
 8002a18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002a1c:	f7ff bf88 	b.w	8002930 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a20:	f015 0501 	ands.w	r5, r5, #1
 8002a24:	d102      	bne.n	8002a2c <HAL_UART_IRQHandler+0x2c>
 8002a26:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002a2a:	d04e      	beq.n	8002aca <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a2c:	07d3      	lsls	r3, r2, #31
 8002a2e:	d505      	bpl.n	8002a3c <HAL_UART_IRQHandler+0x3c>
 8002a30:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a32:	bf42      	ittt	mi
 8002a34:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8002a36:	f043 0301 	orrmi.w	r3, r3, #1
 8002a3a:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a3c:	0750      	lsls	r0, r2, #29
 8002a3e:	d504      	bpl.n	8002a4a <HAL_UART_IRQHandler+0x4a>
 8002a40:	b11d      	cbz	r5, 8002a4a <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a42:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002a44:	f043 0302 	orr.w	r3, r3, #2
 8002a48:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a4a:	0793      	lsls	r3, r2, #30
 8002a4c:	d504      	bpl.n	8002a58 <HAL_UART_IRQHandler+0x58>
 8002a4e:	b11d      	cbz	r5, 8002a58 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002a52:	f043 0304 	orr.w	r3, r3, #4
 8002a56:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a58:	0716      	lsls	r6, r2, #28
 8002a5a:	d504      	bpl.n	8002a66 <HAL_UART_IRQHandler+0x66>
 8002a5c:	b11d      	cbz	r5, 8002a66 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a5e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002a60:	f043 0308 	orr.w	r3, r3, #8
 8002a64:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a66:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d066      	beq.n	8002b3a <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a6c:	0695      	lsls	r5, r2, #26
 8002a6e:	d504      	bpl.n	8002a7a <HAL_UART_IRQHandler+0x7a>
 8002a70:	0688      	lsls	r0, r1, #26
 8002a72:	d502      	bpl.n	8002a7a <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8002a74:	4620      	mov	r0, r4
 8002a76:	f7ff ff5b 	bl	8002930 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a7a:	6823      	ldr	r3, [r4, #0]
 8002a7c:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002a7e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002a80:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 8002a82:	4620      	mov	r0, r4
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002a84:	d402      	bmi.n	8002a8c <HAL_UART_IRQHandler+0x8c>
 8002a86:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002a8a:	d01a      	beq.n	8002ac2 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8002a8c:	f7ff fd2e 	bl	80024ec <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a90:	6823      	ldr	r3, [r4, #0]
 8002a92:	695a      	ldr	r2, [r3, #20]
 8002a94:	0652      	lsls	r2, r2, #25
 8002a96:	d510      	bpl.n	8002aba <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a98:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8002a9a:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002aa0:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8002aa2:	b150      	cbz	r0, 8002aba <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002aa4:	4b25      	ldr	r3, [pc, #148]	; (8002b3c <HAL_UART_IRQHandler+0x13c>)
 8002aa6:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002aa8:	f7fe f8d0 	bl	8000c4c <HAL_DMA_Abort_IT>
 8002aac:	2800      	cmp	r0, #0
 8002aae:	d044      	beq.n	8002b3a <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ab0:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8002ab2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ab6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002ab8:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002aba:	4620      	mov	r0, r4
 8002abc:	f7ff ff78 	bl	80029b0 <HAL_UART_ErrorCallback>
 8002ac0:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002ac2:	f7ff ff75 	bl	80029b0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ac6:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002ac8:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002aca:	0616      	lsls	r6, r2, #24
 8002acc:	d527      	bpl.n	8002b1e <HAL_UART_IRQHandler+0x11e>
 8002ace:	060d      	lsls	r5, r1, #24
 8002ad0:	d525      	bpl.n	8002b1e <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ad2:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002ad6:	2a21      	cmp	r2, #33	; 0x21
 8002ad8:	d12f      	bne.n	8002b3a <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002ada:	68a2      	ldr	r2, [r4, #8]
 8002adc:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002ae0:	6a22      	ldr	r2, [r4, #32]
 8002ae2:	d117      	bne.n	8002b14 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ae4:	8811      	ldrh	r1, [r2, #0]
 8002ae6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002aea:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002aec:	6921      	ldr	r1, [r4, #16]
 8002aee:	b979      	cbnz	r1, 8002b10 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8002af0:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8002af2:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8002af4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002af6:	3a01      	subs	r2, #1
 8002af8:	b292      	uxth	r2, r2
 8002afa:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002afc:	b9ea      	cbnz	r2, 8002b3a <HAL_UART_IRQHandler+0x13a>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002afe:	68da      	ldr	r2, [r3, #12]
 8002b00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b04:	60da      	str	r2, [r3, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002b06:	68da      	ldr	r2, [r3, #12]
 8002b08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b0c:	60da      	str	r2, [r3, #12]
 8002b0e:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8002b10:	3201      	adds	r2, #1
 8002b12:	e7ee      	b.n	8002af2 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b14:	1c51      	adds	r1, r2, #1
 8002b16:	6221      	str	r1, [r4, #32]
 8002b18:	7812      	ldrb	r2, [r2, #0]
 8002b1a:	605a      	str	r2, [r3, #4]
 8002b1c:	e7ea      	b.n	8002af4 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b1e:	0650      	lsls	r0, r2, #25
 8002b20:	d50b      	bpl.n	8002b3a <HAL_UART_IRQHandler+0x13a>
 8002b22:	064a      	lsls	r2, r1, #25
 8002b24:	d509      	bpl.n	8002b3a <HAL_UART_IRQHandler+0x13a>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002b26:	68da      	ldr	r2, [r3, #12]
 8002b28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b2c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002b2e:	2320      	movs	r3, #32
 8002b30:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002b34:	4620      	mov	r0, r4
 8002b36:	f000 f8c5 	bl	8002cc4 <HAL_UART_TxCpltCallback>
 8002b3a:	bd70      	pop	{r4, r5, r6, pc}
 8002b3c:	08002b41 	.word	0x08002b41

08002b40 <UART_DMAAbortOnError>:
{
 8002b40:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b42:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8002b48:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002b4a:	f7ff ff31 	bl	80029b0 <HAL_UART_ErrorCallback>
 8002b4e:	bd08      	pop	{r3, pc}

08002b50 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002b50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 8002b52:	2210      	movs	r2, #16
 8002b54:	2100      	movs	r1, #0
 8002b56:	4668      	mov	r0, sp
 8002b58:	f001 f86d 	bl	8003c36 <memset>

  /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8002b5c:	4812      	ldr	r0, [pc, #72]	; (8002ba8 <MX_ADC1_Init+0x58>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002b5e:	4b13      	ldr	r3, [pc, #76]	; (8002bac <MX_ADC1_Init+0x5c>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b60:	4a13      	ldr	r2, [pc, #76]	; (8002bb0 <MX_ADC1_Init+0x60>)
 8002b62:	6282      	str	r2, [r0, #40]	; 0x28
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002b64:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8002b68:	e880 0018 	stmia.w	r0, {r3, r4}
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002b6c:	2300      	movs	r3, #0
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 8002b6e:	2401      	movs	r4, #1
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002b70:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002b72:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002b74:	6183      	str	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b76:	6203      	str	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002b78:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b7a:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002b7c:	61c4      	str	r4, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002b7e:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b80:	6144      	str	r4, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b82:	f7fd fd55 	bl	8000630 <HAL_ADC_Init>
 8002b86:	b108      	cbz	r0, 8002b8c <MX_ADC1_Init+0x3c>
  {
    Error_Handler();
 8002b88:	f000 faa2 	bl	80030d0 <Error_Handler>
  }
  /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002b8c:	2306      	movs	r3, #6
  sConfig.Rank = 1;
 8002b8e:	e88d 0018 	stmia.w	sp, {r3, r4}
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b92:	4669      	mov	r1, sp
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002b94:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b96:	4804      	ldr	r0, [pc, #16]	; (8002ba8 <MX_ADC1_Init+0x58>)
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002b98:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b9a:	f7fd fe85 	bl	80008a8 <HAL_ADC_ConfigChannel>
 8002b9e:	b108      	cbz	r0, 8002ba4 <MX_ADC1_Init+0x54>
  {
    Error_Handler();
 8002ba0:	f000 fa96 	bl	80030d0 <Error_Handler>
  }

}
 8002ba4:	b004      	add	sp, #16
 8002ba6:	bd10      	pop	{r4, pc}
 8002ba8:	200000a8 	.word	0x200000a8
 8002bac:	40012000 	.word	0x40012000
 8002bb0:	0f000001 	.word	0x0f000001

08002bb4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002bb4:	b510      	push	{r4, lr}
 8002bb6:	4604      	mov	r4, r0
 8002bb8:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bba:	2214      	movs	r2, #20
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	a803      	add	r0, sp, #12
 8002bc0:	f001 f839 	bl	8003c36 <memset>
  if(adcHandle->Instance==ADC1)
 8002bc4:	6822      	ldr	r2, [r4, #0]
 8002bc6:	4b16      	ldr	r3, [pc, #88]	; (8002c20 <HAL_ADC_MspInit+0x6c>)
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d126      	bne.n	8002c1a <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002bcc:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8002bd0:	2400      	movs	r4, #0
 8002bd2:	9401      	str	r4, [sp, #4]
 8002bd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA6     ------> ADC1_IN6 
    */
    GPIO_InitStruct.Pin = ADC6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(ADC6_GPIO_Port, &GPIO_InitStruct);
 8002bd6:	4813      	ldr	r0, [pc, #76]	; (8002c24 <HAL_ADC_MspInit+0x70>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002bd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bdc:	645a      	str	r2, [r3, #68]	; 0x44
 8002bde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002be0:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002be4:	9201      	str	r2, [sp, #4]
 8002be6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be8:	9402      	str	r4, [sp, #8]
 8002bea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bec:	f042 0201 	orr.w	r2, r2, #1
 8002bf0:	631a      	str	r2, [r3, #48]	; 0x30
 8002bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	9302      	str	r3, [sp, #8]
 8002bfa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ADC6_Pin;
 8002bfc:	2340      	movs	r3, #64	; 0x40
 8002bfe:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(ADC6_GPIO_Port, &GPIO_InitStruct);
 8002c00:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c02:	2303      	movs	r3, #3
 8002c04:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(ADC6_GPIO_Port, &GPIO_InitStruct);
 8002c06:	f7fe f8ed 	bl	8000de4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002c0a:	2012      	movs	r0, #18
 8002c0c:	4622      	mov	r2, r4
 8002c0e:	4621      	mov	r1, r4
 8002c10:	f7fd fef4 	bl	80009fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002c14:	2012      	movs	r0, #18
 8002c16:	f7fd ff25 	bl	8000a64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002c1a:	b008      	add	sp, #32
 8002c1c:	bd10      	pop	{r4, pc}
 8002c1e:	bf00      	nop
 8002c20:	40012000 	.word	0x40012000
 8002c24:	40020000 	.word	0x40020000

08002c28 <uartSendChar>:
/** @brief Sends a character to serial port
 * @param ch Character to send
 * @retval Character sent
 */
int uartSendChar(int ch)
{
 8002c28:	b537      	push	{r0, r1, r2, r4, r5, lr}

	while ((uart2TXReady == 0) | (uart6TXReady == 0)) {
 8002c2a:	4911      	ldr	r1, [pc, #68]	; (8002c70 <uartSendChar+0x48>)
 8002c2c:	4a11      	ldr	r2, [pc, #68]	; (8002c74 <uartSendChar+0x4c>)
{
 8002c2e:	9001      	str	r0, [sp, #4]
 8002c30:	460c      	mov	r4, r1
 8002c32:	4615      	mov	r5, r2
	while ((uart2TXReady == 0) | (uart6TXReady == 0)) {
 8002c34:	6808      	ldr	r0, [r1, #0]
 8002c36:	6813      	ldr	r3, [r2, #0]
 8002c38:	2800      	cmp	r0, #0
 8002c3a:	d0fb      	beq.n	8002c34 <uartSendChar+0xc>
 8002c3c:	fab3 f383 	clz	r3, r3
 8002c40:	095b      	lsrs	r3, r3, #5
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f6      	bne.n	8002c34 <uartSendChar+0xc>
		;
	}

	uart2TXReady = 0;
 8002c46:	600b      	str	r3, [r1, #0]
	uart6TXReady = 0;

	HAL_UART_Transmit_DMA(&huart6, (uint8_t *)&ch, 1);
 8002c48:	480b      	ldr	r0, [pc, #44]	; (8002c78 <uartSendChar+0x50>)
	uart6TXReady = 0;
 8002c4a:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit_DMA(&huart6, (uint8_t *)&ch, 1);
 8002c4c:	a901      	add	r1, sp, #4
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f7ff fdb4 	bl	80027bc <HAL_UART_Transmit_DMA>
	HAL_UART_Transmit_DMA(&huart2, (uint8_t *)&ch, 1);
 8002c54:	2201      	movs	r2, #1
 8002c56:	a901      	add	r1, sp, #4
 8002c58:	4808      	ldr	r0, [pc, #32]	; (8002c7c <uartSendChar+0x54>)
 8002c5a:	f7ff fdaf 	bl	80027bc <HAL_UART_Transmit_DMA>

	while ((uart2TXReady == 0) | (uart6TXReady == 0)) {
 8002c5e:	6822      	ldr	r2, [r4, #0]
 8002c60:	682b      	ldr	r3, [r5, #0]
 8002c62:	2a00      	cmp	r2, #0
 8002c64:	d0fb      	beq.n	8002c5e <uartSendChar+0x36>
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0f9      	beq.n	8002c5e <uartSendChar+0x36>
		;
	}

	return ch;
}
 8002c6a:	9801      	ldr	r0, [sp, #4]
 8002c6c:	b003      	add	sp, #12
 8002c6e:	bd30      	pop	{r4, r5, pc}
 8002c70:	20000008 	.word	0x20000008
 8002c74:	2000000c 	.word	0x2000000c
 8002c78:	200003fc 	.word	0x200003fc
 8002c7c:	2000043c 	.word	0x2000043c

08002c80 <uartReceiveChar>:
 */
int uartReceiveChar(void)
{
  uint8_t ch;
  
	while (uartRXReady == 0) {
 8002c80:	4b0a      	ldr	r3, [pc, #40]	; (8002cac <uartReceiveChar+0x2c>)
{
 8002c82:	b513      	push	{r0, r1, r4, lr}
 8002c84:	461c      	mov	r4, r3
	while (uartRXReady == 0) {
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	2a00      	cmp	r2, #0
 8002c8a:	d0fc      	beq.n	8002c86 <uartReceiveChar+0x6>
		;
	}

  uartRXReady = 0;
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]

  HAL_UART_Receive_DMA(&huart6, &ch, 1);
 8002c90:	f10d 0107 	add.w	r1, sp, #7
 8002c94:	2201      	movs	r2, #1
 8002c96:	4806      	ldr	r0, [pc, #24]	; (8002cb0 <uartReceiveChar+0x30>)
 8002c98:	f7ff fdca 	bl	8002830 <HAL_UART_Receive_DMA>

  while (uartRXReady == 0) {
 8002c9c:	6823      	ldr	r3, [r4, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0fc      	beq.n	8002c9c <uartReceiveChar+0x1c>
	 ;
  }

  return ch;
}
 8002ca2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002ca6:	b002      	add	sp, #8
 8002ca8:	bd10      	pop	{r4, pc}
 8002caa:	bf00      	nop
 8002cac:	20000010 	.word	0x20000010
 8002cb0:	200003fc 	.word	0x200003fc

08002cb4 <__io_putchar>:
/** @brief putchar call for standard output implementation
 * @param ch Character to print
 * @retval Character printed
 */
int __io_putchar(int ch)
{
 8002cb4:	b508      	push	{r3, lr}
  uartSendChar(ch);
 8002cb6:	f7ff ffb7 	bl	8002c28 <uartSendChar>

  return 0;
}
 8002cba:	2000      	movs	r0, #0
 8002cbc:	bd08      	pop	{r3, pc}

08002cbe <__io_getchar>:
 * @param None
 * @retval Character acquired from standard input
 */
int __io_getchar(void)
{
  return uartReceiveChar();
 8002cbe:	f7ff bfdf 	b.w	8002c80 <uartReceiveChar>
	...

08002cc4 <HAL_UART_TxCpltCallback>:
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
  /* Set transmission flag: trasfer complete*/

  if (UartHandle->Instance == USART2) uart2TXReady = 1;
 8002cc4:	6803      	ldr	r3, [r0, #0]
 8002cc6:	4a06      	ldr	r2, [pc, #24]	; (8002ce0 <HAL_UART_TxCpltCallback+0x1c>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d103      	bne.n	8002cd4 <HAL_UART_TxCpltCallback+0x10>
 8002ccc:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <HAL_UART_TxCpltCallback+0x20>)
 8002cce:	2201      	movs	r2, #1
  if (UartHandle->Instance == USART6) uart6TXReady = 1;
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	4770      	bx	lr
 8002cd4:	4a04      	ldr	r2, [pc, #16]	; (8002ce8 <HAL_UART_TxCpltCallback+0x24>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d1fb      	bne.n	8002cd2 <HAL_UART_TxCpltCallback+0xe>
 8002cda:	2201      	movs	r2, #1
 8002cdc:	4b03      	ldr	r3, [pc, #12]	; (8002cec <HAL_UART_TxCpltCallback+0x28>)
 8002cde:	e7f7      	b.n	8002cd0 <HAL_UART_TxCpltCallback+0xc>
 8002ce0:	40004400 	.word	0x40004400
 8002ce4:	20000008 	.word	0x20000008
 8002ce8:	40011400 	.word	0x40011400
 8002cec:	2000000c 	.word	0x2000000c

08002cf0 <HAL_UART_RxCpltCallback>:
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
  /* Set transmission flag: trasfer complete*/
  uartRXReady = 1;
 8002cf0:	4b01      	ldr	r3, [pc, #4]	; (8002cf8 <HAL_UART_RxCpltCallback+0x8>)
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	4770      	bx	lr
 8002cf8:	20000010 	.word	0x20000010

08002cfc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8002cfc:	b513      	push	{r0, r1, r4, lr}
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002cfe:	4b24      	ldr	r3, [pc, #144]	; (8002d90 <MX_DMA_Init+0x94>)
 8002d00:	2400      	movs	r4, #0
 8002d02:	9400      	str	r4, [sp, #0]
 8002d04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d06:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002d0a:	631a      	str	r2, [r3, #48]	; 0x30
 8002d0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d0e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002d12:	9200      	str	r2, [sp, #0]
 8002d14:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002d16:	9401      	str	r4, [sp, #4]
 8002d18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d1a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002d1e:	631a      	str	r2, [r3, #48]	; 0x30
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002d26:	4622      	mov	r2, r4
 8002d28:	4621      	mov	r1, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002d2a:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002d2c:	200b      	movs	r0, #11
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002d2e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002d30:	f7fd fe64 	bl	80009fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002d34:	200b      	movs	r0, #11
 8002d36:	f7fd fe95 	bl	8000a64 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002d3a:	4622      	mov	r2, r4
 8002d3c:	4621      	mov	r1, r4
 8002d3e:	2010      	movs	r0, #16
 8002d40:	f7fd fe5c 	bl	80009fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002d44:	2010      	movs	r0, #16
 8002d46:	f7fd fe8d 	bl	8000a64 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002d4a:	4622      	mov	r2, r4
 8002d4c:	4621      	mov	r1, r4
 8002d4e:	2011      	movs	r0, #17
 8002d50:	f7fd fe54 	bl	80009fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002d54:	2011      	movs	r0, #17
 8002d56:	f7fd fe85 	bl	8000a64 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8002d5a:	4622      	mov	r2, r4
 8002d5c:	4621      	mov	r1, r4
 8002d5e:	202f      	movs	r0, #47	; 0x2f
 8002d60:	f7fd fe4c 	bl	80009fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002d64:	202f      	movs	r0, #47	; 0x2f
 8002d66:	f7fd fe7d 	bl	8000a64 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8002d6a:	4622      	mov	r2, r4
 8002d6c:	4621      	mov	r1, r4
 8002d6e:	2039      	movs	r0, #57	; 0x39
 8002d70:	f7fd fe44 	bl	80009fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002d74:	2039      	movs	r0, #57	; 0x39
 8002d76:	f7fd fe75 	bl	8000a64 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8002d7a:	4622      	mov	r2, r4
 8002d7c:	4621      	mov	r1, r4
 8002d7e:	2045      	movs	r0, #69	; 0x45
 8002d80:	f7fd fe3c 	bl	80009fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002d84:	2045      	movs	r0, #69	; 0x45
 8002d86:	f7fd fe6d 	bl	8000a64 <HAL_NVIC_EnableIRQ>

}
 8002d8a:	b002      	add	sp, #8
 8002d8c:	bd10      	pop	{r4, pc}
 8002d8e:	bf00      	nop
 8002d90:	40023800 	.word	0x40023800

08002d94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002d94:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d96:	2214      	movs	r2, #20
{
 8002d98:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d9a:	eb0d 0002 	add.w	r0, sp, r2
 8002d9e:	2100      	movs	r1, #0
 8002da0:	f000 ff49 	bl	8003c36 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002da4:	2400      	movs	r4, #0
 8002da6:	4b2b      	ldr	r3, [pc, #172]	; (8002e54 <MX_GPIO_Init+0xc0>)
 8002da8:	9401      	str	r4, [sp, #4]
 8002daa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_ENB_GPIO_Port, MOTOR_ENB_Pin, GPIO_PIN_RESET);
 8002dac:	4d2a      	ldr	r5, [pc, #168]	; (8002e58 <MX_GPIO_Init+0xc4>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MOTOR_ENA_Pin, GPIO_PIN_RESET);
 8002dae:	4e2b      	ldr	r6, [pc, #172]	; (8002e5c <MX_GPIO_Init+0xc8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002db0:	f042 0204 	orr.w	r2, r2, #4
 8002db4:	631a      	str	r2, [r3, #48]	; 0x30
 8002db6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002db8:	f002 0204 	and.w	r2, r2, #4
 8002dbc:	9201      	str	r2, [sp, #4]
 8002dbe:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002dc0:	9402      	str	r4, [sp, #8]
 8002dc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dc4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002dc8:	631a      	str	r2, [r3, #48]	; 0x30
 8002dca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dcc:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002dd0:	9202      	str	r2, [sp, #8]
 8002dd2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dd4:	9403      	str	r4, [sp, #12]
 8002dd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dd8:	f042 0201 	orr.w	r2, r2, #1
 8002ddc:	631a      	str	r2, [r3, #48]	; 0x30
 8002dde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002de0:	f002 0201 	and.w	r2, r2, #1
 8002de4:	9203      	str	r2, [sp, #12]
 8002de6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002de8:	9404      	str	r4, [sp, #16]
 8002dea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dec:	f042 0202 	orr.w	r2, r2, #2
 8002df0:	631a      	str	r2, [r3, #48]	; 0x30
 8002df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(MOTOR_ENB_GPIO_Port, MOTOR_ENB_Pin, GPIO_PIN_RESET);
 8002dfa:	4622      	mov	r2, r4
 8002dfc:	4628      	mov	r0, r5
 8002dfe:	2102      	movs	r1, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e00:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(MOTOR_ENB_GPIO_Port, MOTOR_ENB_Pin, GPIO_PIN_RESET);
 8002e02:	f7fe f8c5 	bl	8000f90 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MOTOR_ENA_Pin, GPIO_PIN_RESET);
 8002e06:	4622      	mov	r2, r4
 8002e08:	4630      	mov	r0, r6
 8002e0a:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8002e0e:	f7fe f8bf 	bl	8000f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002e12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e16:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e18:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002e1a:	4b11      	ldr	r3, [pc, #68]	; (8002e60 <MX_GPIO_Init+0xcc>)
 8002e1c:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e1e:	4628      	mov	r0, r5

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTOR_ENB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e20:	2701      	movs	r7, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e22:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e24:	f7fd ffde 	bl	8000de4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MOTOR_ENB_Pin;
 8002e28:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(MOTOR_ENB_GPIO_Port, &GPIO_InitStruct);
 8002e2a:	a905      	add	r1, sp, #20
 8002e2c:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = MOTOR_ENB_Pin;
 8002e2e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e30:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e32:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e34:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(MOTOR_ENB_GPIO_Port, &GPIO_InitStruct);
 8002e36:	f7fd ffd5 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|MOTOR_ENA_Pin;
 8002e3a:	f44f 6384 	mov.w	r3, #1056	; 0x420
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e3e:	a905      	add	r1, sp, #20
 8002e40:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = LD2_Pin|MOTOR_ENA_Pin;
 8002e42:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e44:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e46:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e48:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e4a:	f7fd ffcb 	bl	8000de4 <HAL_GPIO_Init>

}
 8002e4e:	b00b      	add	sp, #44	; 0x2c
 8002e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e52:	bf00      	nop
 8002e54:	40023800 	.word	0x40023800
 8002e58:	40020800 	.word	0x40020800
 8002e5c:	40020000 	.word	0x40020000
 8002e60:	10210000 	.word	0x10210000

08002e64 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002e64:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8002e66:	480c      	ldr	r0, [pc, #48]	; (8002e98 <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 100000;
 8002e68:	4b0c      	ldr	r3, [pc, #48]	; (8002e9c <MX_I2C1_Init+0x38>)
 8002e6a:	f8df e034 	ldr.w	lr, [pc, #52]	; 8002ea0 <MX_I2C1_Init+0x3c>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 8002e72:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e76:	2300      	movs	r3, #0
 8002e78:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002e7a:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e7c:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e7e:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002e80:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e82:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e84:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e86:	f7fe f889 	bl	8000f9c <HAL_I2C_Init>
 8002e8a:	b118      	cbz	r0, 8002e94 <MX_I2C1_Init+0x30>
  {
    Error_Handler();
  }

}
 8002e8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002e90:	f000 b91e 	b.w	80030d0 <Error_Handler>
 8002e94:	bd08      	pop	{r3, pc}
 8002e96:	bf00      	nop
 8002e98:	20000150 	.word	0x20000150
 8002e9c:	40005400 	.word	0x40005400
 8002ea0:	000186a0 	.word	0x000186a0

08002ea4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002ea4:	b570      	push	{r4, r5, r6, lr}
 8002ea6:	4606      	mov	r6, r0
 8002ea8:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eaa:	2214      	movs	r2, #20
 8002eac:	2100      	movs	r1, #0
 8002eae:	a803      	add	r0, sp, #12
 8002eb0:	f000 fec1 	bl	8003c36 <memset>
  if(i2cHandle->Instance==I2C1)
 8002eb4:	6832      	ldr	r2, [r6, #0]
 8002eb6:	4b36      	ldr	r3, [pc, #216]	; (8002f90 <HAL_I2C_MspInit+0xec>)
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d166      	bne.n	8002f8a <HAL_I2C_MspInit+0xe6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ebc:	2500      	movs	r5, #0
 8002ebe:	4c35      	ldr	r4, [pc, #212]	; (8002f94 <HAL_I2C_MspInit+0xf0>)
 8002ec0:	9501      	str	r5, [sp, #4]
 8002ec2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ec4:	4834      	ldr	r0, [pc, #208]	; (8002f98 <HAL_I2C_MspInit+0xf4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ec6:	f043 0302 	orr.w	r3, r3, #2
 8002eca:	6323      	str	r3, [r4, #48]	; 0x30
 8002ecc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	9301      	str	r3, [sp, #4]
 8002ed4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ed6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002eda:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002edc:	2312      	movs	r3, #18
 8002ede:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ee8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002eea:	2304      	movs	r3, #4
 8002eec:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eee:	f7fd ff79 	bl	8000de4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ef2:	9502      	str	r5, [sp, #8]
 8002ef4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ef6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002efa:	6423      	str	r3, [r4, #64]	; 0x40
 8002efc:	6c23      	ldr	r3, [r4, #64]	; 0x40
  
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8002efe:	4c27      	ldr	r4, [pc, #156]	; (8002f9c <HAL_I2C_MspInit+0xf8>)
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f04:	9302      	str	r3, [sp, #8]
 8002f06:	9b02      	ldr	r3, [sp, #8]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002f08:	4b25      	ldr	r3, [pc, #148]	; (8002fa0 <HAL_I2C_MspInit+0xfc>)
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f0a:	60a5      	str	r5, [r4, #8]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002f0c:	f04f 7c00 	mov.w	ip, #33554432	; 0x2000000
 8002f10:	e884 1008 	stmia.w	r4, {r3, ip}
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002f14:	4620      	mov	r0, r4
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f16:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f1a:	60e5      	str	r5, [r4, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f1c:	6123      	str	r3, [r4, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f1e:	6165      	str	r5, [r4, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f20:	61a5      	str	r5, [r4, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002f22:	61e5      	str	r5, [r4, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f24:	6225      	str	r5, [r4, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f26:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002f28:	f7fd fdd4 	bl	8000ad4 <HAL_DMA_Init>
 8002f2c:	b108      	cbz	r0, 8002f32 <HAL_I2C_MspInit+0x8e>
    {
      Error_Handler();
 8002f2e:	f000 f8cf 	bl	80030d0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002f32:	63b4      	str	r4, [r6, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f34:	4b1b      	ldr	r3, [pc, #108]	; (8002fa4 <HAL_I2C_MspInit+0x100>)
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002f36:	63a6      	str	r6, [r4, #56]	; 0x38
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 8002f38:	4c1b      	ldr	r4, [pc, #108]	; (8002fa8 <HAL_I2C_MspInit+0x104>)
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f3a:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8002f3e:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8002f42:	e884 4028 	stmia.w	r4, {r3, r5, lr}
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f46:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f4a:	2300      	movs	r3, #0
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002f4c:	4620      	mov	r0, r4
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f4e:	60e3      	str	r3, [r4, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f50:	6122      	str	r2, [r4, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f52:	6163      	str	r3, [r4, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f54:	61a3      	str	r3, [r4, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002f56:	61e3      	str	r3, [r4, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f58:	6223      	str	r3, [r4, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f5a:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002f5c:	f7fd fdba 	bl	8000ad4 <HAL_DMA_Init>
 8002f60:	b108      	cbz	r0, 8002f66 <HAL_I2C_MspInit+0xc2>
    {
      Error_Handler();
 8002f62:	f000 f8b5 	bl	80030d0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002f66:	2200      	movs	r2, #0
 8002f68:	4611      	mov	r1, r2
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002f6a:	6374      	str	r4, [r6, #52]	; 0x34
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002f6c:	201f      	movs	r0, #31
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002f6e:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002f70:	f7fd fd44 	bl	80009fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002f74:	201f      	movs	r0, #31
 8002f76:	f7fd fd75 	bl	8000a64 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	2020      	movs	r0, #32
 8002f7e:	4611      	mov	r1, r2
 8002f80:	f7fd fd3c 	bl	80009fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002f84:	2020      	movs	r0, #32
 8002f86:	f7fd fd6d 	bl	8000a64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002f8a:	b008      	add	sp, #32
 8002f8c:	bd70      	pop	{r4, r5, r6, pc}
 8002f8e:	bf00      	nop
 8002f90:	40005400 	.word	0x40005400
 8002f94:	40023800 	.word	0x40023800
 8002f98:	40020400 	.word	0x40020400
 8002f9c:	200001a4 	.word	0x200001a4
 8002fa0:	40026010 	.word	0x40026010
 8002fa4:	400260b8 	.word	0x400260b8
 8002fa8:	200000f0 	.word	0x200000f0

08002fac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fac:	b530      	push	{r4, r5, lr}
 8002fae:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fb0:	2230      	movs	r2, #48	; 0x30
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	a808      	add	r0, sp, #32
 8002fb6:	f000 fe3e 	bl	8003c36 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fba:	2100      	movs	r1, #0
 8002fbc:	2214      	movs	r2, #20
 8002fbe:	a803      	add	r0, sp, #12
 8002fc0:	f000 fe39 	bl	8003c36 <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fc4:	2400      	movs	r4, #0
 8002fc6:	4b1e      	ldr	r3, [pc, #120]	; (8003040 <SystemClock_Config+0x94>)
 8002fc8:	9401      	str	r4, [sp, #4]
 8002fca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fcc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002fd0:	641a      	str	r2, [r3, #64]	; 0x40
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002fd4:	4a1b      	ldr	r2, [pc, #108]	; (8003044 <SystemClock_Config+0x98>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fda:	9301      	str	r3, [sp, #4]
 8002fdc:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002fde:	9402      	str	r4, [sp, #8]
 8002fe0:	6813      	ldr	r3, [r2, #0]
 8002fe2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fea:	6013      	str	r3, [r2, #0]
 8002fec:	6813      	ldr	r3, [r2, #0]
 8002fee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002ff2:	9302      	str	r3, [sp, #8]
 8002ff4:	9b02      	ldr	r3, [sp, #8]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002ffa:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002ffe:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003000:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003004:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003006:	2308      	movs	r3, #8
 8003008:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800300a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800300e:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003010:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003012:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003014:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003016:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003018:	2307      	movs	r3, #7
 800301a:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800301c:	950e      	str	r5, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800301e:	f7fe fcf3 	bl	8001a08 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003022:	230f      	movs	r3, #15
 8003024:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003026:	4629      	mov	r1, r5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003028:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800302c:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800302e:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003030:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003032:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003034:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003036:	f7fe fe97 	bl	8001d68 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800303a:	b015      	add	sp, #84	; 0x54
 800303c:	bd30      	pop	{r4, r5, pc}
 800303e:	bf00      	nop
 8003040:	40023800 	.word	0x40023800
 8003044:	40007000 	.word	0x40007000

08003048 <main>:
{
 8003048:	b570      	push	{r4, r5, r6, lr}
  setvbuf(stdin, NULL, _IONBF, 0);
 800304a:	4c1e      	ldr	r4, [pc, #120]	; (80030c4 <main+0x7c>)
	  printf("OK -> %s",readline);
 800304c:	4e1e      	ldr	r6, [pc, #120]	; (80030c8 <main+0x80>)
  HAL_Init();
 800304e:	f7fd fac3 	bl	80005d8 <HAL_Init>
  SystemClock_Config();
 8003052:	f7ff ffab 	bl	8002fac <SystemClock_Config>
  MX_GPIO_Init();
 8003056:	f7ff fe9d 	bl	8002d94 <MX_GPIO_Init>
  MX_DMA_Init();
 800305a:	f7ff fe4f 	bl	8002cfc <MX_DMA_Init>
  MX_USART2_UART_Init();
 800305e:	f000 fa3b 	bl	80034d8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8003062:	f7ff feff 	bl	8002e64 <MX_I2C1_Init>
  MX_TIM2_Init();
 8003066:	f000 f98f 	bl	8003388 <MX_TIM2_Init>
  MX_TIM3_Init();
 800306a:	f000 f9e1 	bl	8003430 <MX_TIM3_Init>
  MX_ADC1_Init();
 800306e:	f7ff fd6f 	bl	8002b50 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 8003072:	f000 fa4d 	bl	8003510 <MX_USART6_UART_Init>
  setvbuf(stdin, NULL, _IONBF, 0);
 8003076:	6820      	ldr	r0, [r4, #0]
 8003078:	2300      	movs	r3, #0
 800307a:	4619      	mov	r1, r3
 800307c:	2202      	movs	r2, #2
 800307e:	6840      	ldr	r0, [r0, #4]
 8003080:	f000 ffae 	bl	8003fe0 <setvbuf>
  setvbuf(stdout, NULL, _IONBF, 0);
 8003084:	6820      	ldr	r0, [r4, #0]
 8003086:	2300      	movs	r3, #0
 8003088:	4619      	mov	r1, r3
 800308a:	2202      	movs	r2, #2
 800308c:	6880      	ldr	r0, [r0, #8]
 800308e:	f000 ffa7 	bl	8003fe0 <setvbuf>
  setvbuf(stderr, NULL, _IONBF, 0);
 8003092:	6820      	ldr	r0, [r4, #0]
 8003094:	2300      	movs	r3, #0
 8003096:	2202      	movs	r2, #2
 8003098:	4619      	mov	r1, r3
 800309a:	68c0      	ldr	r0, [r0, #12]
 800309c:	f000 ffa0 	bl	8003fe0 <setvbuf>
  printf("\r\nConsole ready ... \r\n");
 80030a0:	480a      	ldr	r0, [pc, #40]	; (80030cc <main+0x84>)
 80030a2:	f000 fef1 	bl	8003e88 <puts>
  uint8_t *readline = malloc(100 * sizeof(uint8_t));
 80030a6:	2064      	movs	r0, #100	; 0x64
 80030a8:	f000 fdb2 	bl	8003c10 <malloc>
 80030ac:	4605      	mov	r5, r0
	  fgets(readline,100,stdin);
 80030ae:	6823      	ldr	r3, [r4, #0]
 80030b0:	2164      	movs	r1, #100	; 0x64
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	4628      	mov	r0, r5
 80030b6:	f000 fc97 	bl	80039e8 <fgets>
	  printf("OK -> %s",readline);
 80030ba:	4629      	mov	r1, r5
 80030bc:	4630      	mov	r0, r6
 80030be:	f000 fe6f 	bl	8003da0 <iprintf>
 80030c2:	e7f4      	b.n	80030ae <main+0x66>
 80030c4:	20000018 	.word	0x20000018
 80030c8:	08004ac2 	.word	0x08004ac2
 80030cc:	08004aac 	.word	0x08004aac

080030d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030d0:	4770      	bx	lr
	...

080030d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030d4:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030d6:	4b0e      	ldr	r3, [pc, #56]	; (8003110 <HAL_MspInit+0x3c>)
 80030d8:	2100      	movs	r1, #0
 80030da:	9100      	str	r1, [sp, #0]
 80030dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030e2:	645a      	str	r2, [r3, #68]	; 0x44
 80030e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030e6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80030ea:	9200      	str	r2, [sp, #0]
 80030ec:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030ee:	9101      	str	r1, [sp, #4]
 80030f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030f2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80030f6:	641a      	str	r2, [r3, #64]	; 0x40
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030fe:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003100:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8003102:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003104:	f7fd fc68 	bl	80009d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003108:	b003      	add	sp, #12
 800310a:	f85d fb04 	ldr.w	pc, [sp], #4
 800310e:	bf00      	nop
 8003110:	40023800 	.word	0x40023800

08003114 <NMI_Handler>:
 8003114:	4770      	bx	lr

08003116 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003116:	e7fe      	b.n	8003116 <HardFault_Handler>

08003118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003118:	e7fe      	b.n	8003118 <MemManage_Handler>

0800311a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800311a:	e7fe      	b.n	800311a <BusFault_Handler>

0800311c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800311c:	e7fe      	b.n	800311c <UsageFault_Handler>

0800311e <SVC_Handler>:
 800311e:	4770      	bx	lr

08003120 <DebugMon_Handler>:
 8003120:	4770      	bx	lr

08003122 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003122:	4770      	bx	lr

08003124 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003124:	f7fd ba72 	b.w	800060c <HAL_IncTick>

08003128 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003128:	4801      	ldr	r0, [pc, #4]	; (8003130 <DMA1_Stream0_IRQHandler+0x8>)
 800312a:	f7fd bda1 	b.w	8000c70 <HAL_DMA_IRQHandler>
 800312e:	bf00      	nop
 8003130:	200001a4 	.word	0x200001a4

08003134 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003134:	4801      	ldr	r0, [pc, #4]	; (800313c <DMA1_Stream5_IRQHandler+0x8>)
 8003136:	f7fd bd9b 	b.w	8000c70 <HAL_DMA_IRQHandler>
 800313a:	bf00      	nop
 800313c:	2000027c 	.word	0x2000027c

08003140 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003140:	4801      	ldr	r0, [pc, #4]	; (8003148 <DMA1_Stream6_IRQHandler+0x8>)
 8003142:	f7fd bd95 	b.w	8000c70 <HAL_DMA_IRQHandler>
 8003146:	bf00      	nop
 8003148:	2000039c 	.word	0x2000039c

0800314c <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800314c:	4801      	ldr	r0, [pc, #4]	; (8003154 <ADC_IRQHandler+0x8>)
 800314e:	f7fd bb16 	b.w	800077e <HAL_ADC_IRQHandler>
 8003152:	bf00      	nop
 8003154:	200000a8 	.word	0x200000a8

08003158 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003158:	4801      	ldr	r0, [pc, #4]	; (8003160 <TIM2_IRQHandler+0x8>)
 800315a:	f7fe bff2 	b.w	8002142 <HAL_TIM_IRQHandler>
 800315e:	bf00      	nop
 8003160:	20000240 	.word	0x20000240

08003164 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003164:	4801      	ldr	r0, [pc, #4]	; (800316c <TIM3_IRQHandler+0x8>)
 8003166:	f7fe bfec 	b.w	8002142 <HAL_TIM_IRQHandler>
 800316a:	bf00      	nop
 800316c:	20000204 	.word	0x20000204

08003170 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003170:	4801      	ldr	r0, [pc, #4]	; (8003178 <I2C1_EV_IRQHandler+0x8>)
 8003172:	f7fe b81f 	b.w	80011b4 <HAL_I2C_EV_IRQHandler>
 8003176:	bf00      	nop
 8003178:	20000150 	.word	0x20000150

0800317c <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800317c:	4801      	ldr	r0, [pc, #4]	; (8003184 <I2C1_ER_IRQHandler+0x8>)
 800317e:	f7fe bb83 	b.w	8001888 <HAL_I2C_ER_IRQHandler>
 8003182:	bf00      	nop
 8003184:	20000150 	.word	0x20000150

08003188 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003188:	4801      	ldr	r0, [pc, #4]	; (8003190 <USART2_IRQHandler+0x8>)
 800318a:	f7ff bc39 	b.w	8002a00 <HAL_UART_IRQHandler>
 800318e:	bf00      	nop
 8003190:	2000043c 	.word	0x2000043c

08003194 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003194:	4801      	ldr	r0, [pc, #4]	; (800319c <DMA1_Stream7_IRQHandler+0x8>)
 8003196:	f7fd bd6b 	b.w	8000c70 <HAL_DMA_IRQHandler>
 800319a:	bf00      	nop
 800319c:	200000f0 	.word	0x200000f0

080031a0 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80031a0:	4801      	ldr	r0, [pc, #4]	; (80031a8 <DMA2_Stream1_IRQHandler+0x8>)
 80031a2:	f7fd bd65 	b.w	8000c70 <HAL_DMA_IRQHandler>
 80031a6:	bf00      	nop
 80031a8:	200002dc 	.word	0x200002dc

080031ac <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80031ac:	4801      	ldr	r0, [pc, #4]	; (80031b4 <DMA2_Stream6_IRQHandler+0x8>)
 80031ae:	f7fd bd5f 	b.w	8000c70 <HAL_DMA_IRQHandler>
 80031b2:	bf00      	nop
 80031b4:	2000033c 	.word	0x2000033c

080031b8 <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80031b8:	4801      	ldr	r0, [pc, #4]	; (80031c0 <USART6_IRQHandler+0x8>)
 80031ba:	f7ff bc21 	b.w	8002a00 <HAL_UART_IRQHandler>
 80031be:	bf00      	nop
 80031c0:	200003fc 	.word	0x200003fc

080031c4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 80031c4:	b570      	push	{r4, r5, r6, lr}
 80031c6:	460e      	mov	r6, r1
 80031c8:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ca:	460c      	mov	r4, r1
 80031cc:	1ba3      	subs	r3, r4, r6
 80031ce:	429d      	cmp	r5, r3
 80031d0:	dc01      	bgt.n	80031d6 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80031d2:	4628      	mov	r0, r5
 80031d4:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80031d6:	f7ff fd72 	bl	8002cbe <__io_getchar>
 80031da:	f804 0b01 	strb.w	r0, [r4], #1
 80031de:	e7f5      	b.n	80031cc <_read+0x8>

080031e0 <_write>:

int _write(int file, char *ptr, int len)
{
 80031e0:	b570      	push	{r4, r5, r6, lr}
 80031e2:	460e      	mov	r6, r1
 80031e4:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031e6:	460c      	mov	r4, r1
 80031e8:	1ba3      	subs	r3, r4, r6
 80031ea:	429d      	cmp	r5, r3
 80031ec:	dc01      	bgt.n	80031f2 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80031ee:	4628      	mov	r0, r5
 80031f0:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80031f2:	f814 0b01 	ldrb.w	r0, [r4], #1
 80031f6:	f7ff fd5d 	bl	8002cb4 <__io_putchar>
 80031fa:	e7f5      	b.n	80031e8 <_write+0x8>

080031fc <_sbrk>:

caddr_t _sbrk(int incr)
{
 80031fc:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80031fe:	4b0a      	ldr	r3, [pc, #40]	; (8003228 <_sbrk+0x2c>)
 8003200:	6819      	ldr	r1, [r3, #0]
{
 8003202:	4602      	mov	r2, r0
	if (heap_end == 0)
 8003204:	b909      	cbnz	r1, 800320a <_sbrk+0xe>
		heap_end = &end;
 8003206:	4909      	ldr	r1, [pc, #36]	; (800322c <_sbrk+0x30>)
 8003208:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800320a:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800320c:	4669      	mov	r1, sp
 800320e:	4402      	add	r2, r0
 8003210:	428a      	cmp	r2, r1
 8003212:	d906      	bls.n	8003222 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003214:	f000 fabc 	bl	8003790 <__errno>
 8003218:	230c      	movs	r3, #12
 800321a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800321c:	f04f 30ff 	mov.w	r0, #4294967295
 8003220:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8003222:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8003224:	bd08      	pop	{r3, pc}
 8003226:	bf00      	nop
 8003228:	20000098 	.word	0x20000098
 800322c:	20000480 	.word	0x20000480

08003230 <_close>:

int _close(int file)
{
	return -1;
}
 8003230:	f04f 30ff 	mov.w	r0, #4294967295
 8003234:	4770      	bx	lr

08003236 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003236:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800323a:	604b      	str	r3, [r1, #4]
	return 0;
}
 800323c:	2000      	movs	r0, #0
 800323e:	4770      	bx	lr

08003240 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8003240:	2001      	movs	r0, #1
 8003242:	4770      	bx	lr

08003244 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003244:	2000      	movs	r0, #0
 8003246:	4770      	bx	lr

08003248 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003248:	490f      	ldr	r1, [pc, #60]	; (8003288 <SystemInit+0x40>)
 800324a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800324e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003256:	4b0d      	ldr	r3, [pc, #52]	; (800328c <SystemInit+0x44>)
 8003258:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800325a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800325c:	f042 0201 	orr.w	r2, r2, #1
 8003260:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003262:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800326a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800326e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003270:	4a07      	ldr	r2, [pc, #28]	; (8003290 <SystemInit+0x48>)
 8003272:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800327a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800327c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800327e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003282:	608b      	str	r3, [r1, #8]
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	e000ed00 	.word	0xe000ed00
 800328c:	40023800 	.word	0x40023800
 8003290:	24003010 	.word	0x24003010

08003294 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8003294:	6803      	ldr	r3, [r0, #0]
 8003296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 800329a:	b507      	push	{r0, r1, r2, lr}
  if(tim_baseHandle->Instance==TIM2)
 800329c:	d116      	bne.n	80032cc <HAL_TIM_Base_MspInit+0x38>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800329e:	2200      	movs	r2, #0
 80032a0:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80032a4:	9200      	str	r2, [sp, #0]
 80032a6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80032a8:	f041 0101 	orr.w	r1, r1, #1
 80032ac:	6419      	str	r1, [r3, #64]	; 0x40
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	9300      	str	r3, [sp, #0]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80032b6:	201c      	movs	r0, #28
 80032b8:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032ba:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80032bc:	f7fd fb9e 	bl	80009fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80032c0:	201c      	movs	r0, #28
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80032c2:	f7fd fbcf 	bl	8000a64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80032c6:	b003      	add	sp, #12
 80032c8:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_baseHandle->Instance==TIM3)
 80032cc:	4a0a      	ldr	r2, [pc, #40]	; (80032f8 <HAL_TIM_Base_MspInit+0x64>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d1f9      	bne.n	80032c6 <HAL_TIM_Base_MspInit+0x32>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032d2:	2200      	movs	r2, #0
 80032d4:	4b09      	ldr	r3, [pc, #36]	; (80032fc <HAL_TIM_Base_MspInit+0x68>)
 80032d6:	9201      	str	r2, [sp, #4]
 80032d8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80032da:	f041 0102 	orr.w	r1, r1, #2
 80032de:	6419      	str	r1, [r3, #64]	; 0x40
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80032e8:	201d      	movs	r0, #29
 80032ea:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032ec:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80032ee:	f7fd fb85 	bl	80009fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80032f2:	201d      	movs	r0, #29
 80032f4:	e7e5      	b.n	80032c2 <HAL_TIM_Base_MspInit+0x2e>
 80032f6:	bf00      	nop
 80032f8:	40000400 	.word	0x40000400
 80032fc:	40023800 	.word	0x40023800

08003300 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003300:	b510      	push	{r4, lr}
 8003302:	4604      	mov	r4, r0
 8003304:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003306:	2214      	movs	r2, #20
 8003308:	2100      	movs	r1, #0
 800330a:	a803      	add	r0, sp, #12
 800330c:	f000 fc93 	bl	8003c36 <memset>
  if(timHandle->Instance==TIM2)
 8003310:	6823      	ldr	r3, [r4, #0]
 8003312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003316:	d117      	bne.n	8003348 <HAL_TIM_MspPostInit+0x48>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003318:	2300      	movs	r3, #0
 800331a:	9301      	str	r3, [sp, #4]
 800331c:	4b16      	ldr	r3, [pc, #88]	; (8003378 <HAL_TIM_MspPostInit+0x78>)
    GPIO_InitStruct.Pin = PWM_IN1B_TIM2CH1_Pin|PWM_IN2B_TIM2CH2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800331e:	4817      	ldr	r0, [pc, #92]	; (800337c <HAL_TIM_MspPostInit+0x7c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003320:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003322:	f042 0201 	orr.w	r2, r2, #1
 8003326:	631a      	str	r2, [r3, #48]	; 0x30
 8003328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	9301      	str	r3, [sp, #4]
 8003330:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = PWM_IN1B_TIM2CH1_Pin|PWM_IN2B_TIM2CH2_Pin;
 8003332:	2303      	movs	r3, #3
 8003334:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003336:	2302      	movs	r3, #2
 8003338:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800333a:	2301      	movs	r3, #1
 800333c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800333e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = PWM_IN1A_TIM3CH1_Pin|PWM_IN2A_TIM3CH2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003340:	f7fd fd50 	bl	8000de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003344:	b008      	add	sp, #32
 8003346:	bd10      	pop	{r4, pc}
  else if(timHandle->Instance==TIM3)
 8003348:	4a0d      	ldr	r2, [pc, #52]	; (8003380 <HAL_TIM_MspPostInit+0x80>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d1fa      	bne.n	8003344 <HAL_TIM_MspPostInit+0x44>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800334e:	2300      	movs	r3, #0
 8003350:	9302      	str	r3, [sp, #8]
 8003352:	4b09      	ldr	r3, [pc, #36]	; (8003378 <HAL_TIM_MspPostInit+0x78>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003354:	480b      	ldr	r0, [pc, #44]	; (8003384 <HAL_TIM_MspPostInit+0x84>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003356:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003358:	f042 0202 	orr.w	r2, r2, #2
 800335c:	631a      	str	r2, [r3, #48]	; 0x30
 800335e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	9302      	str	r3, [sp, #8]
 8003366:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = PWM_IN1A_TIM3CH1_Pin|PWM_IN2A_TIM3CH2_Pin;
 8003368:	2330      	movs	r3, #48	; 0x30
 800336a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800336c:	2302      	movs	r3, #2
 800336e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003370:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003372:	a903      	add	r1, sp, #12
 8003374:	e7e4      	b.n	8003340 <HAL_TIM_MspPostInit+0x40>
 8003376:	bf00      	nop
 8003378:	40023800 	.word	0x40023800
 800337c:	40020000 	.word	0x40020000
 8003380:	40000400 	.word	0x40000400
 8003384:	40020400 	.word	0x40020400

08003388 <MX_TIM2_Init>:
{
 8003388:	b510      	push	{r4, lr}
 800338a:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800338c:	2210      	movs	r2, #16
 800338e:	2100      	movs	r1, #0
 8003390:	a803      	add	r0, sp, #12
 8003392:	f000 fc50 	bl	8003c36 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003396:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003398:	221c      	movs	r2, #28
 800339a:	4621      	mov	r1, r4
 800339c:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033a0:	9401      	str	r4, [sp, #4]
 80033a2:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033a4:	f000 fc47 	bl	8003c36 <memset>
  htim2.Instance = TIM2;
 80033a8:	4820      	ldr	r0, [pc, #128]	; (800342c <MX_TIM2_Init+0xa4>)
 80033aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 0;
 80033ae:	e880 0018 	stmia.w	r0, {r3, r4}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033b2:	6084      	str	r4, [r0, #8]
  htim2.Init.Period = 0;
 80033b4:	60c4      	str	r4, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033b6:	6104      	str	r4, [r0, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80033b8:	f7fe ffb2 	bl	8002320 <HAL_TIM_Base_Init>
 80033bc:	b108      	cbz	r0, 80033c2 <MX_TIM2_Init+0x3a>
    Error_Handler();
 80033be:	f7ff fe87 	bl	80030d0 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80033c6:	a903      	add	r1, sp, #12
 80033c8:	4818      	ldr	r0, [pc, #96]	; (800342c <MX_TIM2_Init+0xa4>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033ca:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80033cc:	f7fe fdfb 	bl	8001fc6 <HAL_TIM_ConfigClockSource>
 80033d0:	b108      	cbz	r0, 80033d6 <MX_TIM2_Init+0x4e>
    Error_Handler();
 80033d2:	f7ff fe7d 	bl	80030d0 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80033d6:	4815      	ldr	r0, [pc, #84]	; (800342c <MX_TIM2_Init+0xa4>)
 80033d8:	f7fe ffbc 	bl	8002354 <HAL_TIM_PWM_Init>
 80033dc:	b108      	cbz	r0, 80033e2 <MX_TIM2_Init+0x5a>
    Error_Handler();
 80033de:	f7ff fe77 	bl	80030d0 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033e2:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80033e4:	a901      	add	r1, sp, #4
 80033e6:	4811      	ldr	r0, [pc, #68]	; (800342c <MX_TIM2_Init+0xa4>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033e8:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033ea:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80033ec:	f7ff f85a 	bl	80024a4 <HAL_TIMEx_MasterConfigSynchronization>
 80033f0:	b108      	cbz	r0, 80033f6 <MX_TIM2_Init+0x6e>
    Error_Handler();
 80033f2:	f7ff fe6d 	bl	80030d0 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033f6:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80033f8:	2200      	movs	r2, #0
 80033fa:	a907      	add	r1, sp, #28
 80033fc:	480b      	ldr	r0, [pc, #44]	; (800342c <MX_TIM2_Init+0xa4>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033fe:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 8003400:	9408      	str	r4, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003402:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003404:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003406:	f7fe ffeb 	bl	80023e0 <HAL_TIM_PWM_ConfigChannel>
 800340a:	b108      	cbz	r0, 8003410 <MX_TIM2_Init+0x88>
    Error_Handler();
 800340c:	f7ff fe60 	bl	80030d0 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003410:	2204      	movs	r2, #4
 8003412:	a907      	add	r1, sp, #28
 8003414:	4805      	ldr	r0, [pc, #20]	; (800342c <MX_TIM2_Init+0xa4>)
 8003416:	f7fe ffe3 	bl	80023e0 <HAL_TIM_PWM_ConfigChannel>
 800341a:	b108      	cbz	r0, 8003420 <MX_TIM2_Init+0x98>
    Error_Handler();
 800341c:	f7ff fe58 	bl	80030d0 <Error_Handler>
  HAL_TIM_MspPostInit(&htim2);
 8003420:	4802      	ldr	r0, [pc, #8]	; (800342c <MX_TIM2_Init+0xa4>)
 8003422:	f7ff ff6d 	bl	8003300 <HAL_TIM_MspPostInit>
}
 8003426:	b00e      	add	sp, #56	; 0x38
 8003428:	bd10      	pop	{r4, pc}
 800342a:	bf00      	nop
 800342c:	20000240 	.word	0x20000240

08003430 <MX_TIM3_Init>:
{
 8003430:	b510      	push	{r4, lr}
 8003432:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003434:	2210      	movs	r2, #16
 8003436:	2100      	movs	r1, #0
 8003438:	a803      	add	r0, sp, #12
 800343a:	f000 fbfc 	bl	8003c36 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800343e:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003440:	221c      	movs	r2, #28
 8003442:	4621      	mov	r1, r4
 8003444:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003448:	9401      	str	r4, [sp, #4]
 800344a:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800344c:	f000 fbf3 	bl	8003c36 <memset>
  htim3.Instance = TIM3;
 8003450:	481f      	ldr	r0, [pc, #124]	; (80034d0 <MX_TIM3_Init+0xa0>)
 8003452:	4b20      	ldr	r3, [pc, #128]	; (80034d4 <MX_TIM3_Init+0xa4>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003454:	6084      	str	r4, [r0, #8]
  htim3.Init.Prescaler = 0;
 8003456:	e880 0018 	stmia.w	r0, {r3, r4}
  htim3.Init.Period = 0;
 800345a:	60c4      	str	r4, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800345c:	6104      	str	r4, [r0, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800345e:	f7fe ff5f 	bl	8002320 <HAL_TIM_Base_Init>
 8003462:	b108      	cbz	r0, 8003468 <MX_TIM3_Init+0x38>
    Error_Handler();
 8003464:	f7ff fe34 	bl	80030d0 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003468:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800346c:	a903      	add	r1, sp, #12
 800346e:	4818      	ldr	r0, [pc, #96]	; (80034d0 <MX_TIM3_Init+0xa0>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003470:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003472:	f7fe fda8 	bl	8001fc6 <HAL_TIM_ConfigClockSource>
 8003476:	b108      	cbz	r0, 800347c <MX_TIM3_Init+0x4c>
    Error_Handler();
 8003478:	f7ff fe2a 	bl	80030d0 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800347c:	4814      	ldr	r0, [pc, #80]	; (80034d0 <MX_TIM3_Init+0xa0>)
 800347e:	f7fe ff69 	bl	8002354 <HAL_TIM_PWM_Init>
 8003482:	b108      	cbz	r0, 8003488 <MX_TIM3_Init+0x58>
    Error_Handler();
 8003484:	f7ff fe24 	bl	80030d0 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003488:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800348a:	a901      	add	r1, sp, #4
 800348c:	4810      	ldr	r0, [pc, #64]	; (80034d0 <MX_TIM3_Init+0xa0>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800348e:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003490:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003492:	f7ff f807 	bl	80024a4 <HAL_TIMEx_MasterConfigSynchronization>
 8003496:	b108      	cbz	r0, 800349c <MX_TIM3_Init+0x6c>
    Error_Handler();
 8003498:	f7ff fe1a 	bl	80030d0 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800349c:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800349e:	2200      	movs	r2, #0
 80034a0:	a907      	add	r1, sp, #28
 80034a2:	480b      	ldr	r0, [pc, #44]	; (80034d0 <MX_TIM3_Init+0xa0>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034a4:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 80034a6:	9408      	str	r4, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034a8:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034aa:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80034ac:	f7fe ff98 	bl	80023e0 <HAL_TIM_PWM_ConfigChannel>
 80034b0:	b108      	cbz	r0, 80034b6 <MX_TIM3_Init+0x86>
    Error_Handler();
 80034b2:	f7ff fe0d 	bl	80030d0 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80034b6:	2204      	movs	r2, #4
 80034b8:	a907      	add	r1, sp, #28
 80034ba:	4805      	ldr	r0, [pc, #20]	; (80034d0 <MX_TIM3_Init+0xa0>)
 80034bc:	f7fe ff90 	bl	80023e0 <HAL_TIM_PWM_ConfigChannel>
 80034c0:	b108      	cbz	r0, 80034c6 <MX_TIM3_Init+0x96>
    Error_Handler();
 80034c2:	f7ff fe05 	bl	80030d0 <Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 80034c6:	4802      	ldr	r0, [pc, #8]	; (80034d0 <MX_TIM3_Init+0xa0>)
 80034c8:	f7ff ff1a 	bl	8003300 <HAL_TIM_MspPostInit>
}
 80034cc:	b00e      	add	sp, #56	; 0x38
 80034ce:	bd10      	pop	{r4, pc}
 80034d0:	20000204 	.word	0x20000204
 80034d4:	40000400 	.word	0x40000400

080034d8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80034d8:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 80034da:	480b      	ldr	r0, [pc, #44]	; (8003508 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 80034dc:	4b0b      	ldr	r3, [pc, #44]	; (800350c <MX_USART2_UART_Init+0x34>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80034de:	2200      	movs	r2, #0
  huart2.Init.BaudRate = 115200;
 80034e0:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 80034e4:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_MultiProcessor_Init(&huart2, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 80034e8:	4611      	mov	r1, r2
  huart2.Init.Mode = UART_MODE_TX_RX;
 80034ea:	230c      	movs	r3, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80034ec:	6082      	str	r2, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80034ee:	60c2      	str	r2, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80034f0:	6102      	str	r2, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80034f2:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034f4:	6182      	str	r2, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80034f6:	61c2      	str	r2, [r0, #28]
  if (HAL_MultiProcessor_Init(&huart2, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 80034f8:	f7ff f920 	bl	800273c <HAL_MultiProcessor_Init>
 80034fc:	b118      	cbz	r0, 8003506 <MX_USART2_UART_Init+0x2e>
  {
    Error_Handler();
  }

}
 80034fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003502:	f7ff bde5 	b.w	80030d0 <Error_Handler>
 8003506:	bd08      	pop	{r3, pc}
 8003508:	2000043c 	.word	0x2000043c
 800350c:	40004400 	.word	0x40004400

08003510 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003510:	b508      	push	{r3, lr}

  huart6.Instance = USART6;
 8003512:	480b      	ldr	r0, [pc, #44]	; (8003540 <MX_USART6_UART_Init+0x30>)
  huart6.Init.BaudRate = 115200;
 8003514:	4b0b      	ldr	r3, [pc, #44]	; (8003544 <MX_USART6_UART_Init+0x34>)
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003516:	2200      	movs	r2, #0
  huart6.Init.BaudRate = 115200;
 8003518:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 800351c:	e880 4008 	stmia.w	r0, {r3, lr}
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_MultiProcessor_Init(&huart6, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8003520:	4611      	mov	r1, r2
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003522:	230c      	movs	r3, #12
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003524:	6082      	str	r2, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003526:	60c2      	str	r2, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003528:	6102      	str	r2, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800352a:	6143      	str	r3, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800352c:	6182      	str	r2, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800352e:	61c2      	str	r2, [r0, #28]
  if (HAL_MultiProcessor_Init(&huart6, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8003530:	f7ff f904 	bl	800273c <HAL_MultiProcessor_Init>
 8003534:	b118      	cbz	r0, 800353e <MX_USART6_UART_Init+0x2e>
  {
    Error_Handler();
  }

}
 8003536:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800353a:	f7ff bdc9 	b.w	80030d0 <Error_Handler>
 800353e:	bd08      	pop	{r3, pc}
 8003540:	200003fc 	.word	0x200003fc
 8003544:	40011400 	.word	0x40011400

08003548 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800354c:	2214      	movs	r2, #20
{
 800354e:	b08a      	sub	sp, #40	; 0x28
 8003550:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003552:	2100      	movs	r1, #0
 8003554:	eb0d 0002 	add.w	r0, sp, r2
 8003558:	f000 fb6d 	bl	8003c36 <memset>
  if(uartHandle->Instance==USART2)
 800355c:	682b      	ldr	r3, [r5, #0]
 800355e:	4a6a      	ldr	r2, [pc, #424]	; (8003708 <HAL_UART_MspInit+0x1c0>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d15b      	bne.n	800361c <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003564:	2600      	movs	r6, #0
 8003566:	4b69      	ldr	r3, [pc, #420]	; (800370c <HAL_UART_MspInit+0x1c4>)
 8003568:	9600      	str	r6, [sp, #0]
 800356a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800356c:	4868      	ldr	r0, [pc, #416]	; (8003710 <HAL_UART_MspInit+0x1c8>)

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800356e:	4c69      	ldr	r4, [pc, #420]	; (8003714 <HAL_UART_MspInit+0x1cc>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003570:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003574:	641a      	str	r2, [r3, #64]	; 0x40
 8003576:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003578:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800357c:	9200      	str	r2, [sp, #0]
 800357e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003580:	9601      	str	r6, [sp, #4]
 8003582:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003584:	f042 0201 	orr.w	r2, r2, #1
 8003588:	631a      	str	r2, [r3, #48]	; 0x30
 800358a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	9301      	str	r3, [sp, #4]
 8003592:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003594:	230c      	movs	r3, #12
 8003596:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003598:	2302      	movs	r3, #2
 800359a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800359c:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800359e:	2307      	movs	r3, #7
 80035a0:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035a2:	f7fd fc1f 	bl	8000de4 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80035a6:	4b5c      	ldr	r3, [pc, #368]	; (8003718 <HAL_UART_MspInit+0x1d0>)
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035a8:	60a6      	str	r6, [r4, #8]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80035aa:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
 80035ae:	e884 0088 	stmia.w	r4, {r3, r7}
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80035b2:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035b8:	60e6      	str	r6, [r4, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035ba:	6123      	str	r3, [r4, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035bc:	6166      	str	r6, [r4, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035be:	61a6      	str	r6, [r4, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80035c0:	61e6      	str	r6, [r4, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80035c2:	6226      	str	r6, [r4, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035c4:	6266      	str	r6, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80035c6:	f7fd fa85 	bl	8000ad4 <HAL_DMA_Init>
 80035ca:	b108      	cbz	r0, 80035d0 <HAL_UART_MspInit+0x88>
    {
      Error_Handler();
 80035cc:	f7ff fd80 	bl	80030d0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80035d0:	636c      	str	r4, [r5, #52]	; 0x34

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035d2:	4852      	ldr	r0, [pc, #328]	; (800371c <HAL_UART_MspInit+0x1d4>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80035d4:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80035d6:	4c52      	ldr	r4, [pc, #328]	; (8003720 <HAL_UART_MspInit+0x1d8>)
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035d8:	2340      	movs	r3, #64	; 0x40
 80035da:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80035de:	e884 000b 	stmia.w	r4, {r0, r1, r3}
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80035e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035e6:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80035e8:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035ea:	60e3      	str	r3, [r4, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80035ec:	6122      	str	r2, [r4, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035ee:	6163      	str	r3, [r4, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035f0:	61a3      	str	r3, [r4, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80035f2:	61e3      	str	r3, [r4, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80035f4:	6223      	str	r3, [r4, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035f6:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80035f8:	f7fd fa6c 	bl	8000ad4 <HAL_DMA_Init>
 80035fc:	b108      	cbz	r0, 8003602 <HAL_UART_MspInit+0xba>
    {
      Error_Handler();
 80035fe:	f7ff fd67 	bl	80030d0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003602:	2200      	movs	r2, #0
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8003604:	632c      	str	r4, [r5, #48]	; 0x30
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003606:	2026      	movs	r0, #38	; 0x26
 8003608:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800360a:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800360c:	f7fd f9f6 	bl	80009fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003610:	2026      	movs	r0, #38	; 0x26

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003612:	f7fd fa27 	bl	8000a64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003616:	b00a      	add	sp, #40	; 0x28
 8003618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(uartHandle->Instance==USART6)
 800361c:	4a41      	ldr	r2, [pc, #260]	; (8003724 <HAL_UART_MspInit+0x1dc>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d1f9      	bne.n	8003616 <HAL_UART_MspInit+0xce>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003622:	2600      	movs	r6, #0
 8003624:	4b39      	ldr	r3, [pc, #228]	; (800370c <HAL_UART_MspInit+0x1c4>)
 8003626:	9602      	str	r6, [sp, #8]
 8003628:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(RPI_USART6TX_GPIO_Port, &GPIO_InitStruct);
 800362a:	483f      	ldr	r0, [pc, #252]	; (8003728 <HAL_UART_MspInit+0x1e0>)
    __HAL_RCC_USART6_CLK_ENABLE();
 800362c:	f042 0220 	orr.w	r2, r2, #32
 8003630:	645a      	str	r2, [r3, #68]	; 0x44
 8003632:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003634:	f002 0220 	and.w	r2, r2, #32
 8003638:	9202      	str	r2, [sp, #8]
 800363a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800363c:	9603      	str	r6, [sp, #12]
 800363e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003640:	f042 0204 	orr.w	r2, r2, #4
 8003644:	631a      	str	r2, [r3, #48]	; 0x30
 8003646:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003648:	f002 0204 	and.w	r2, r2, #4
 800364c:	9203      	str	r2, [sp, #12]
 800364e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003650:	9604      	str	r6, [sp, #16]
 8003652:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003654:	f042 0201 	orr.w	r2, r2, #1
 8003658:	631a      	str	r2, [r3, #48]	; 0x30
 800365a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003662:	2408      	movs	r4, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003664:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003666:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = RPI_USART6TX_Pin;
 8003668:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800366a:	f04f 0802 	mov.w	r8, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800366e:	2703      	movs	r7, #3
    HAL_GPIO_Init(RPI_USART6TX_GPIO_Port, &GPIO_InitStruct);
 8003670:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = RPI_USART6TX_Pin;
 8003672:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003674:	f8cd 8018 	str.w	r8, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003678:	9708      	str	r7, [sp, #32]
    HAL_GPIO_Init(RPI_USART6TX_GPIO_Port, &GPIO_InitStruct);
 800367a:	f7fd fbb3 	bl	8000de4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RPI_USART6RX_Pin;
 800367e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    HAL_GPIO_Init(RPI_USART6RX_GPIO_Port, &GPIO_InitStruct);
 8003682:	4823      	ldr	r0, [pc, #140]	; (8003710 <HAL_UART_MspInit+0x1c8>)
    GPIO_InitStruct.Pin = RPI_USART6RX_Pin;
 8003684:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(RPI_USART6RX_GPIO_Port, &GPIO_InitStruct);
 8003686:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003688:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368a:	f8cd 8018 	str.w	r8, [sp, #24]
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800368e:	4c27      	ldr	r4, [pc, #156]	; (800372c <HAL_UART_MspInit+0x1e4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003690:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003692:	9708      	str	r7, [sp, #32]
    HAL_GPIO_Init(RPI_USART6RX_GPIO_Port, &GPIO_InitStruct);
 8003694:	f7fd fba6 	bl	8000de4 <HAL_GPIO_Init>
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003698:	4b25      	ldr	r3, [pc, #148]	; (8003730 <HAL_UART_MspInit+0x1e8>)
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800369a:	60a6      	str	r6, [r4, #8]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800369c:	f04f 6e20 	mov.w	lr, #167772160	; 0xa000000
 80036a0:	e884 4008 	stmia.w	r4, {r3, lr}
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80036a4:	4620      	mov	r0, r4
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80036a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036aa:	60e6      	str	r6, [r4, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80036ac:	6123      	str	r3, [r4, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036ae:	6166      	str	r6, [r4, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036b0:	61a6      	str	r6, [r4, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80036b2:	61e6      	str	r6, [r4, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80036b4:	6226      	str	r6, [r4, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036b6:	6266      	str	r6, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80036b8:	f7fd fa0c 	bl	8000ad4 <HAL_DMA_Init>
 80036bc:	b108      	cbz	r0, 80036c2 <HAL_UART_MspInit+0x17a>
      Error_Handler();
 80036be:	f7ff fd07 	bl	80030d0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80036c2:	636c      	str	r4, [r5, #52]	; 0x34
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036c4:	4b1b      	ldr	r3, [pc, #108]	; (8003734 <HAL_UART_MspInit+0x1ec>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80036c6:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80036c8:	4c1b      	ldr	r4, [pc, #108]	; (8003738 <HAL_UART_MspInit+0x1f0>)
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036ca:	f04f 6620 	mov.w	r6, #167772160	; 0xa000000
 80036ce:	2740      	movs	r7, #64	; 0x40
 80036d0:	e884 00c8 	stmia.w	r4, {r3, r6, r7}
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80036d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036d8:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80036da:	4620      	mov	r0, r4
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036dc:	60e3      	str	r3, [r4, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80036de:	6122      	str	r2, [r4, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036e0:	6163      	str	r3, [r4, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036e2:	61a3      	str	r3, [r4, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80036e4:	61e3      	str	r3, [r4, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80036e6:	6223      	str	r3, [r4, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036e8:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80036ea:	f7fd f9f3 	bl	8000ad4 <HAL_DMA_Init>
 80036ee:	b108      	cbz	r0, 80036f4 <HAL_UART_MspInit+0x1ac>
      Error_Handler();
 80036f0:	f7ff fcee 	bl	80030d0 <Error_Handler>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80036f4:	2200      	movs	r2, #0
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 80036f6:	632c      	str	r4, [r5, #48]	; 0x30
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80036f8:	2047      	movs	r0, #71	; 0x47
 80036fa:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 80036fc:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80036fe:	f7fd f97d 	bl	80009fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003702:	2047      	movs	r0, #71	; 0x47
 8003704:	e785      	b.n	8003612 <HAL_UART_MspInit+0xca>
 8003706:	bf00      	nop
 8003708:	40004400 	.word	0x40004400
 800370c:	40023800 	.word	0x40023800
 8003710:	40020000 	.word	0x40020000
 8003714:	2000027c 	.word	0x2000027c
 8003718:	40026088 	.word	0x40026088
 800371c:	400260a0 	.word	0x400260a0
 8003720:	2000039c 	.word	0x2000039c
 8003724:	40011400 	.word	0x40011400
 8003728:	40020800 	.word	0x40020800
 800372c:	200002dc 	.word	0x200002dc
 8003730:	40026428 	.word	0x40026428
 8003734:	400264a0 	.word	0x400264a0
 8003738:	2000033c 	.word	0x2000033c

0800373c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800373c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003774 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003740:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003742:	e003      	b.n	800374c <LoopCopyDataInit>

08003744 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003744:	4b0c      	ldr	r3, [pc, #48]	; (8003778 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003746:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003748:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800374a:	3104      	adds	r1, #4

0800374c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800374c:	480b      	ldr	r0, [pc, #44]	; (800377c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800374e:	4b0c      	ldr	r3, [pc, #48]	; (8003780 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003750:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003752:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003754:	d3f6      	bcc.n	8003744 <CopyDataInit>
  ldr  r2, =_sbss
 8003756:	4a0b      	ldr	r2, [pc, #44]	; (8003784 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003758:	e002      	b.n	8003760 <LoopFillZerobss>

0800375a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800375a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800375c:	f842 3b04 	str.w	r3, [r2], #4

08003760 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003760:	4b09      	ldr	r3, [pc, #36]	; (8003788 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003762:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003764:	d3f9      	bcc.n	800375a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003766:	f7ff fd6f 	bl	8003248 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800376a:	f000 fa2d 	bl	8003bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800376e:	f7ff fc6b 	bl	8003048 <main>
  bx  lr    
 8003772:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003774:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8003778:	08004b8c 	.word	0x08004b8c
  ldr  r0, =_sdata
 800377c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003780:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8003784:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8003788:	20000480 	.word	0x20000480

0800378c <DMA1_Stream1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800378c:	e7fe      	b.n	800378c <DMA1_Stream1_IRQHandler>
	...

08003790 <__errno>:
 8003790:	4b01      	ldr	r3, [pc, #4]	; (8003798 <__errno+0x8>)
 8003792:	6818      	ldr	r0, [r3, #0]
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	20000018 	.word	0x20000018

0800379c <__sflush_r>:
 800379c:	898a      	ldrh	r2, [r1, #12]
 800379e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037a2:	4605      	mov	r5, r0
 80037a4:	0710      	lsls	r0, r2, #28
 80037a6:	460c      	mov	r4, r1
 80037a8:	d45a      	bmi.n	8003860 <__sflush_r+0xc4>
 80037aa:	684b      	ldr	r3, [r1, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	dc05      	bgt.n	80037bc <__sflush_r+0x20>
 80037b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	dc02      	bgt.n	80037bc <__sflush_r+0x20>
 80037b6:	2000      	movs	r0, #0
 80037b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80037be:	2e00      	cmp	r6, #0
 80037c0:	d0f9      	beq.n	80037b6 <__sflush_r+0x1a>
 80037c2:	2300      	movs	r3, #0
 80037c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80037c8:	682f      	ldr	r7, [r5, #0]
 80037ca:	602b      	str	r3, [r5, #0]
 80037cc:	d033      	beq.n	8003836 <__sflush_r+0x9a>
 80037ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80037d0:	89a3      	ldrh	r3, [r4, #12]
 80037d2:	075a      	lsls	r2, r3, #29
 80037d4:	d505      	bpl.n	80037e2 <__sflush_r+0x46>
 80037d6:	6863      	ldr	r3, [r4, #4]
 80037d8:	1ac0      	subs	r0, r0, r3
 80037da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80037dc:	b10b      	cbz	r3, 80037e2 <__sflush_r+0x46>
 80037de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80037e0:	1ac0      	subs	r0, r0, r3
 80037e2:	2300      	movs	r3, #0
 80037e4:	4602      	mov	r2, r0
 80037e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80037e8:	6a21      	ldr	r1, [r4, #32]
 80037ea:	4628      	mov	r0, r5
 80037ec:	47b0      	blx	r6
 80037ee:	1c43      	adds	r3, r0, #1
 80037f0:	89a3      	ldrh	r3, [r4, #12]
 80037f2:	d106      	bne.n	8003802 <__sflush_r+0x66>
 80037f4:	6829      	ldr	r1, [r5, #0]
 80037f6:	291d      	cmp	r1, #29
 80037f8:	d84b      	bhi.n	8003892 <__sflush_r+0xf6>
 80037fa:	4a2b      	ldr	r2, [pc, #172]	; (80038a8 <__sflush_r+0x10c>)
 80037fc:	40ca      	lsrs	r2, r1
 80037fe:	07d6      	lsls	r6, r2, #31
 8003800:	d547      	bpl.n	8003892 <__sflush_r+0xf6>
 8003802:	2200      	movs	r2, #0
 8003804:	6062      	str	r2, [r4, #4]
 8003806:	04d9      	lsls	r1, r3, #19
 8003808:	6922      	ldr	r2, [r4, #16]
 800380a:	6022      	str	r2, [r4, #0]
 800380c:	d504      	bpl.n	8003818 <__sflush_r+0x7c>
 800380e:	1c42      	adds	r2, r0, #1
 8003810:	d101      	bne.n	8003816 <__sflush_r+0x7a>
 8003812:	682b      	ldr	r3, [r5, #0]
 8003814:	b903      	cbnz	r3, 8003818 <__sflush_r+0x7c>
 8003816:	6560      	str	r0, [r4, #84]	; 0x54
 8003818:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800381a:	602f      	str	r7, [r5, #0]
 800381c:	2900      	cmp	r1, #0
 800381e:	d0ca      	beq.n	80037b6 <__sflush_r+0x1a>
 8003820:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003824:	4299      	cmp	r1, r3
 8003826:	d002      	beq.n	800382e <__sflush_r+0x92>
 8003828:	4628      	mov	r0, r5
 800382a:	f000 fa0d 	bl	8003c48 <_free_r>
 800382e:	2000      	movs	r0, #0
 8003830:	6360      	str	r0, [r4, #52]	; 0x34
 8003832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003836:	6a21      	ldr	r1, [r4, #32]
 8003838:	2301      	movs	r3, #1
 800383a:	4628      	mov	r0, r5
 800383c:	47b0      	blx	r6
 800383e:	1c41      	adds	r1, r0, #1
 8003840:	d1c6      	bne.n	80037d0 <__sflush_r+0x34>
 8003842:	682b      	ldr	r3, [r5, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d0c3      	beq.n	80037d0 <__sflush_r+0x34>
 8003848:	2b1d      	cmp	r3, #29
 800384a:	d001      	beq.n	8003850 <__sflush_r+0xb4>
 800384c:	2b16      	cmp	r3, #22
 800384e:	d101      	bne.n	8003854 <__sflush_r+0xb8>
 8003850:	602f      	str	r7, [r5, #0]
 8003852:	e7b0      	b.n	80037b6 <__sflush_r+0x1a>
 8003854:	89a3      	ldrh	r3, [r4, #12]
 8003856:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800385a:	81a3      	strh	r3, [r4, #12]
 800385c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003860:	690f      	ldr	r7, [r1, #16]
 8003862:	2f00      	cmp	r7, #0
 8003864:	d0a7      	beq.n	80037b6 <__sflush_r+0x1a>
 8003866:	0793      	lsls	r3, r2, #30
 8003868:	680e      	ldr	r6, [r1, #0]
 800386a:	bf08      	it	eq
 800386c:	694b      	ldreq	r3, [r1, #20]
 800386e:	600f      	str	r7, [r1, #0]
 8003870:	bf18      	it	ne
 8003872:	2300      	movne	r3, #0
 8003874:	eba6 0807 	sub.w	r8, r6, r7
 8003878:	608b      	str	r3, [r1, #8]
 800387a:	f1b8 0f00 	cmp.w	r8, #0
 800387e:	dd9a      	ble.n	80037b6 <__sflush_r+0x1a>
 8003880:	4643      	mov	r3, r8
 8003882:	463a      	mov	r2, r7
 8003884:	6a21      	ldr	r1, [r4, #32]
 8003886:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003888:	4628      	mov	r0, r5
 800388a:	47b0      	blx	r6
 800388c:	2800      	cmp	r0, #0
 800388e:	dc07      	bgt.n	80038a0 <__sflush_r+0x104>
 8003890:	89a3      	ldrh	r3, [r4, #12]
 8003892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003896:	81a3      	strh	r3, [r4, #12]
 8003898:	f04f 30ff 	mov.w	r0, #4294967295
 800389c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038a0:	4407      	add	r7, r0
 80038a2:	eba8 0800 	sub.w	r8, r8, r0
 80038a6:	e7e8      	b.n	800387a <__sflush_r+0xde>
 80038a8:	20400001 	.word	0x20400001

080038ac <_fflush_r>:
 80038ac:	b538      	push	{r3, r4, r5, lr}
 80038ae:	690b      	ldr	r3, [r1, #16]
 80038b0:	4605      	mov	r5, r0
 80038b2:	460c      	mov	r4, r1
 80038b4:	b1db      	cbz	r3, 80038ee <_fflush_r+0x42>
 80038b6:	b118      	cbz	r0, 80038c0 <_fflush_r+0x14>
 80038b8:	6983      	ldr	r3, [r0, #24]
 80038ba:	b90b      	cbnz	r3, 80038c0 <_fflush_r+0x14>
 80038bc:	f000 f8de 	bl	8003a7c <__sinit>
 80038c0:	4b0c      	ldr	r3, [pc, #48]	; (80038f4 <_fflush_r+0x48>)
 80038c2:	429c      	cmp	r4, r3
 80038c4:	d109      	bne.n	80038da <_fflush_r+0x2e>
 80038c6:	686c      	ldr	r4, [r5, #4]
 80038c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038cc:	b17b      	cbz	r3, 80038ee <_fflush_r+0x42>
 80038ce:	4621      	mov	r1, r4
 80038d0:	4628      	mov	r0, r5
 80038d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038d6:	f7ff bf61 	b.w	800379c <__sflush_r>
 80038da:	4b07      	ldr	r3, [pc, #28]	; (80038f8 <_fflush_r+0x4c>)
 80038dc:	429c      	cmp	r4, r3
 80038de:	d101      	bne.n	80038e4 <_fflush_r+0x38>
 80038e0:	68ac      	ldr	r4, [r5, #8]
 80038e2:	e7f1      	b.n	80038c8 <_fflush_r+0x1c>
 80038e4:	4b05      	ldr	r3, [pc, #20]	; (80038fc <_fflush_r+0x50>)
 80038e6:	429c      	cmp	r4, r3
 80038e8:	bf08      	it	eq
 80038ea:	68ec      	ldreq	r4, [r5, #12]
 80038ec:	e7ec      	b.n	80038c8 <_fflush_r+0x1c>
 80038ee:	2000      	movs	r0, #0
 80038f0:	bd38      	pop	{r3, r4, r5, pc}
 80038f2:	bf00      	nop
 80038f4:	08004b04 	.word	0x08004b04
 80038f8:	08004b24 	.word	0x08004b24
 80038fc:	08004ae4 	.word	0x08004ae4

08003900 <fflush>:
 8003900:	4601      	mov	r1, r0
 8003902:	b920      	cbnz	r0, 800390e <fflush+0xe>
 8003904:	4b04      	ldr	r3, [pc, #16]	; (8003918 <fflush+0x18>)
 8003906:	4905      	ldr	r1, [pc, #20]	; (800391c <fflush+0x1c>)
 8003908:	6818      	ldr	r0, [r3, #0]
 800390a:	f000 b93f 	b.w	8003b8c <_fwalk_reent>
 800390e:	4b04      	ldr	r3, [pc, #16]	; (8003920 <fflush+0x20>)
 8003910:	6818      	ldr	r0, [r3, #0]
 8003912:	f7ff bfcb 	b.w	80038ac <_fflush_r>
 8003916:	bf00      	nop
 8003918:	08004b44 	.word	0x08004b44
 800391c:	080038ad 	.word	0x080038ad
 8003920:	20000018 	.word	0x20000018

08003924 <_fgets_r>:
 8003924:	2a01      	cmp	r2, #1
 8003926:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800392a:	4681      	mov	r9, r0
 800392c:	460e      	mov	r6, r1
 800392e:	4690      	mov	r8, r2
 8003930:	461c      	mov	r4, r3
 8003932:	dc02      	bgt.n	800393a <_fgets_r+0x16>
 8003934:	2000      	movs	r0, #0
 8003936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800393a:	b118      	cbz	r0, 8003944 <_fgets_r+0x20>
 800393c:	6983      	ldr	r3, [r0, #24]
 800393e:	b90b      	cbnz	r3, 8003944 <_fgets_r+0x20>
 8003940:	f000 f89c 	bl	8003a7c <__sinit>
 8003944:	4b25      	ldr	r3, [pc, #148]	; (80039dc <_fgets_r+0xb8>)
 8003946:	429c      	cmp	r4, r3
 8003948:	d110      	bne.n	800396c <_fgets_r+0x48>
 800394a:	f8d9 4004 	ldr.w	r4, [r9, #4]
 800394e:	f108 38ff 	add.w	r8, r8, #4294967295
 8003952:	4637      	mov	r7, r6
 8003954:	6865      	ldr	r5, [r4, #4]
 8003956:	b9b5      	cbnz	r5, 8003986 <_fgets_r+0x62>
 8003958:	4621      	mov	r1, r4
 800395a:	4648      	mov	r0, r9
 800395c:	f000 faa6 	bl	8003eac <__srefill_r>
 8003960:	b180      	cbz	r0, 8003984 <_fgets_r+0x60>
 8003962:	42b7      	cmp	r7, r6
 8003964:	d0e6      	beq.n	8003934 <_fgets_r+0x10>
 8003966:	2300      	movs	r3, #0
 8003968:	703b      	strb	r3, [r7, #0]
 800396a:	e025      	b.n	80039b8 <_fgets_r+0x94>
 800396c:	4b1c      	ldr	r3, [pc, #112]	; (80039e0 <_fgets_r+0xbc>)
 800396e:	429c      	cmp	r4, r3
 8003970:	d102      	bne.n	8003978 <_fgets_r+0x54>
 8003972:	f8d9 4008 	ldr.w	r4, [r9, #8]
 8003976:	e7ea      	b.n	800394e <_fgets_r+0x2a>
 8003978:	4b1a      	ldr	r3, [pc, #104]	; (80039e4 <_fgets_r+0xc0>)
 800397a:	429c      	cmp	r4, r3
 800397c:	bf08      	it	eq
 800397e:	f8d9 400c 	ldreq.w	r4, [r9, #12]
 8003982:	e7e4      	b.n	800394e <_fgets_r+0x2a>
 8003984:	6865      	ldr	r5, [r4, #4]
 8003986:	f8d4 a000 	ldr.w	sl, [r4]
 800398a:	4545      	cmp	r5, r8
 800398c:	bf28      	it	cs
 800398e:	4645      	movcs	r5, r8
 8003990:	462a      	mov	r2, r5
 8003992:	210a      	movs	r1, #10
 8003994:	4650      	mov	r0, sl
 8003996:	f7fc fc23 	bl	80001e0 <memchr>
 800399a:	6863      	ldr	r3, [r4, #4]
 800399c:	b178      	cbz	r0, 80039be <_fgets_r+0x9a>
 800399e:	3001      	adds	r0, #1
 80039a0:	eba0 050a 	sub.w	r5, r0, sl
 80039a4:	1b5b      	subs	r3, r3, r5
 80039a6:	e884 0009 	stmia.w	r4, {r0, r3}
 80039aa:	462a      	mov	r2, r5
 80039ac:	4651      	mov	r1, sl
 80039ae:	4638      	mov	r0, r7
 80039b0:	f000 f936 	bl	8003c20 <memcpy>
 80039b4:	2300      	movs	r3, #0
 80039b6:	557b      	strb	r3, [r7, r5]
 80039b8:	4630      	mov	r0, r6
 80039ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039be:	1b5b      	subs	r3, r3, r5
 80039c0:	6063      	str	r3, [r4, #4]
 80039c2:	6823      	ldr	r3, [r4, #0]
 80039c4:	442b      	add	r3, r5
 80039c6:	4638      	mov	r0, r7
 80039c8:	6023      	str	r3, [r4, #0]
 80039ca:	462a      	mov	r2, r5
 80039cc:	4651      	mov	r1, sl
 80039ce:	f000 f927 	bl	8003c20 <memcpy>
 80039d2:	ebb8 0805 	subs.w	r8, r8, r5
 80039d6:	442f      	add	r7, r5
 80039d8:	d1bc      	bne.n	8003954 <_fgets_r+0x30>
 80039da:	e7c4      	b.n	8003966 <_fgets_r+0x42>
 80039dc:	08004b04 	.word	0x08004b04
 80039e0:	08004b24 	.word	0x08004b24
 80039e4:	08004ae4 	.word	0x08004ae4

080039e8 <fgets>:
 80039e8:	4613      	mov	r3, r2
 80039ea:	460a      	mov	r2, r1
 80039ec:	4601      	mov	r1, r0
 80039ee:	4802      	ldr	r0, [pc, #8]	; (80039f8 <fgets+0x10>)
 80039f0:	6800      	ldr	r0, [r0, #0]
 80039f2:	f7ff bf97 	b.w	8003924 <_fgets_r>
 80039f6:	bf00      	nop
 80039f8:	20000018 	.word	0x20000018

080039fc <_cleanup_r>:
 80039fc:	4901      	ldr	r1, [pc, #4]	; (8003a04 <_cleanup_r+0x8>)
 80039fe:	f000 b8c5 	b.w	8003b8c <_fwalk_reent>
 8003a02:	bf00      	nop
 8003a04:	080038ad 	.word	0x080038ad

08003a08 <std.isra.0>:
 8003a08:	2300      	movs	r3, #0
 8003a0a:	b510      	push	{r4, lr}
 8003a0c:	4604      	mov	r4, r0
 8003a0e:	6003      	str	r3, [r0, #0]
 8003a10:	6043      	str	r3, [r0, #4]
 8003a12:	6083      	str	r3, [r0, #8]
 8003a14:	8181      	strh	r1, [r0, #12]
 8003a16:	6643      	str	r3, [r0, #100]	; 0x64
 8003a18:	81c2      	strh	r2, [r0, #14]
 8003a1a:	6103      	str	r3, [r0, #16]
 8003a1c:	6143      	str	r3, [r0, #20]
 8003a1e:	6183      	str	r3, [r0, #24]
 8003a20:	4619      	mov	r1, r3
 8003a22:	2208      	movs	r2, #8
 8003a24:	305c      	adds	r0, #92	; 0x5c
 8003a26:	f000 f906 	bl	8003c36 <memset>
 8003a2a:	4b05      	ldr	r3, [pc, #20]	; (8003a40 <std.isra.0+0x38>)
 8003a2c:	6263      	str	r3, [r4, #36]	; 0x24
 8003a2e:	4b05      	ldr	r3, [pc, #20]	; (8003a44 <std.isra.0+0x3c>)
 8003a30:	62a3      	str	r3, [r4, #40]	; 0x28
 8003a32:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <std.isra.0+0x40>)
 8003a34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003a36:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <std.isra.0+0x44>)
 8003a38:	6224      	str	r4, [r4, #32]
 8003a3a:	6323      	str	r3, [r4, #48]	; 0x30
 8003a3c:	bd10      	pop	{r4, pc}
 8003a3e:	bf00      	nop
 8003a40:	0800413d 	.word	0x0800413d
 8003a44:	0800415f 	.word	0x0800415f
 8003a48:	08004197 	.word	0x08004197
 8003a4c:	080041bb 	.word	0x080041bb

08003a50 <__sfmoreglue>:
 8003a50:	b570      	push	{r4, r5, r6, lr}
 8003a52:	1e4a      	subs	r2, r1, #1
 8003a54:	2568      	movs	r5, #104	; 0x68
 8003a56:	4355      	muls	r5, r2
 8003a58:	460e      	mov	r6, r1
 8003a5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003a5e:	f000 f941 	bl	8003ce4 <_malloc_r>
 8003a62:	4604      	mov	r4, r0
 8003a64:	b140      	cbz	r0, 8003a78 <__sfmoreglue+0x28>
 8003a66:	2100      	movs	r1, #0
 8003a68:	e880 0042 	stmia.w	r0, {r1, r6}
 8003a6c:	300c      	adds	r0, #12
 8003a6e:	60a0      	str	r0, [r4, #8]
 8003a70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003a74:	f000 f8df 	bl	8003c36 <memset>
 8003a78:	4620      	mov	r0, r4
 8003a7a:	bd70      	pop	{r4, r5, r6, pc}

08003a7c <__sinit>:
 8003a7c:	6983      	ldr	r3, [r0, #24]
 8003a7e:	b510      	push	{r4, lr}
 8003a80:	4604      	mov	r4, r0
 8003a82:	bb33      	cbnz	r3, 8003ad2 <__sinit+0x56>
 8003a84:	6483      	str	r3, [r0, #72]	; 0x48
 8003a86:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003a88:	6503      	str	r3, [r0, #80]	; 0x50
 8003a8a:	4b12      	ldr	r3, [pc, #72]	; (8003ad4 <__sinit+0x58>)
 8003a8c:	4a12      	ldr	r2, [pc, #72]	; (8003ad8 <__sinit+0x5c>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6282      	str	r2, [r0, #40]	; 0x28
 8003a92:	4298      	cmp	r0, r3
 8003a94:	bf04      	itt	eq
 8003a96:	2301      	moveq	r3, #1
 8003a98:	6183      	streq	r3, [r0, #24]
 8003a9a:	f000 f81f 	bl	8003adc <__sfp>
 8003a9e:	6060      	str	r0, [r4, #4]
 8003aa0:	4620      	mov	r0, r4
 8003aa2:	f000 f81b 	bl	8003adc <__sfp>
 8003aa6:	60a0      	str	r0, [r4, #8]
 8003aa8:	4620      	mov	r0, r4
 8003aaa:	f000 f817 	bl	8003adc <__sfp>
 8003aae:	2200      	movs	r2, #0
 8003ab0:	60e0      	str	r0, [r4, #12]
 8003ab2:	2104      	movs	r1, #4
 8003ab4:	6860      	ldr	r0, [r4, #4]
 8003ab6:	f7ff ffa7 	bl	8003a08 <std.isra.0>
 8003aba:	2201      	movs	r2, #1
 8003abc:	2109      	movs	r1, #9
 8003abe:	68a0      	ldr	r0, [r4, #8]
 8003ac0:	f7ff ffa2 	bl	8003a08 <std.isra.0>
 8003ac4:	2202      	movs	r2, #2
 8003ac6:	2112      	movs	r1, #18
 8003ac8:	68e0      	ldr	r0, [r4, #12]
 8003aca:	f7ff ff9d 	bl	8003a08 <std.isra.0>
 8003ace:	2301      	movs	r3, #1
 8003ad0:	61a3      	str	r3, [r4, #24]
 8003ad2:	bd10      	pop	{r4, pc}
 8003ad4:	08004b44 	.word	0x08004b44
 8003ad8:	080039fd 	.word	0x080039fd

08003adc <__sfp>:
 8003adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ade:	4b1c      	ldr	r3, [pc, #112]	; (8003b50 <__sfp+0x74>)
 8003ae0:	681e      	ldr	r6, [r3, #0]
 8003ae2:	69b3      	ldr	r3, [r6, #24]
 8003ae4:	4607      	mov	r7, r0
 8003ae6:	b913      	cbnz	r3, 8003aee <__sfp+0x12>
 8003ae8:	4630      	mov	r0, r6
 8003aea:	f7ff ffc7 	bl	8003a7c <__sinit>
 8003aee:	3648      	adds	r6, #72	; 0x48
 8003af0:	68b4      	ldr	r4, [r6, #8]
 8003af2:	6873      	ldr	r3, [r6, #4]
 8003af4:	3b01      	subs	r3, #1
 8003af6:	d503      	bpl.n	8003b00 <__sfp+0x24>
 8003af8:	6833      	ldr	r3, [r6, #0]
 8003afa:	b133      	cbz	r3, 8003b0a <__sfp+0x2e>
 8003afc:	6836      	ldr	r6, [r6, #0]
 8003afe:	e7f7      	b.n	8003af0 <__sfp+0x14>
 8003b00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003b04:	b16d      	cbz	r5, 8003b22 <__sfp+0x46>
 8003b06:	3468      	adds	r4, #104	; 0x68
 8003b08:	e7f4      	b.n	8003af4 <__sfp+0x18>
 8003b0a:	2104      	movs	r1, #4
 8003b0c:	4638      	mov	r0, r7
 8003b0e:	f7ff ff9f 	bl	8003a50 <__sfmoreglue>
 8003b12:	6030      	str	r0, [r6, #0]
 8003b14:	2800      	cmp	r0, #0
 8003b16:	d1f1      	bne.n	8003afc <__sfp+0x20>
 8003b18:	230c      	movs	r3, #12
 8003b1a:	603b      	str	r3, [r7, #0]
 8003b1c:	4604      	mov	r4, r0
 8003b1e:	4620      	mov	r0, r4
 8003b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b26:	81e3      	strh	r3, [r4, #14]
 8003b28:	2301      	movs	r3, #1
 8003b2a:	81a3      	strh	r3, [r4, #12]
 8003b2c:	6665      	str	r5, [r4, #100]	; 0x64
 8003b2e:	6025      	str	r5, [r4, #0]
 8003b30:	60a5      	str	r5, [r4, #8]
 8003b32:	6065      	str	r5, [r4, #4]
 8003b34:	6125      	str	r5, [r4, #16]
 8003b36:	6165      	str	r5, [r4, #20]
 8003b38:	61a5      	str	r5, [r4, #24]
 8003b3a:	2208      	movs	r2, #8
 8003b3c:	4629      	mov	r1, r5
 8003b3e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003b42:	f000 f878 	bl	8003c36 <memset>
 8003b46:	6365      	str	r5, [r4, #52]	; 0x34
 8003b48:	63a5      	str	r5, [r4, #56]	; 0x38
 8003b4a:	64a5      	str	r5, [r4, #72]	; 0x48
 8003b4c:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003b4e:	e7e6      	b.n	8003b1e <__sfp+0x42>
 8003b50:	08004b44 	.word	0x08004b44

08003b54 <_fwalk>:
 8003b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b58:	4688      	mov	r8, r1
 8003b5a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003b5e:	2600      	movs	r6, #0
 8003b60:	b914      	cbnz	r4, 8003b68 <_fwalk+0x14>
 8003b62:	4630      	mov	r0, r6
 8003b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b68:	68a5      	ldr	r5, [r4, #8]
 8003b6a:	6867      	ldr	r7, [r4, #4]
 8003b6c:	3f01      	subs	r7, #1
 8003b6e:	d501      	bpl.n	8003b74 <_fwalk+0x20>
 8003b70:	6824      	ldr	r4, [r4, #0]
 8003b72:	e7f5      	b.n	8003b60 <_fwalk+0xc>
 8003b74:	89ab      	ldrh	r3, [r5, #12]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d906      	bls.n	8003b88 <_fwalk+0x34>
 8003b7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003b7e:	3301      	adds	r3, #1
 8003b80:	d002      	beq.n	8003b88 <_fwalk+0x34>
 8003b82:	4628      	mov	r0, r5
 8003b84:	47c0      	blx	r8
 8003b86:	4306      	orrs	r6, r0
 8003b88:	3568      	adds	r5, #104	; 0x68
 8003b8a:	e7ef      	b.n	8003b6c <_fwalk+0x18>

08003b8c <_fwalk_reent>:
 8003b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b90:	4680      	mov	r8, r0
 8003b92:	4689      	mov	r9, r1
 8003b94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003b98:	2600      	movs	r6, #0
 8003b9a:	b914      	cbnz	r4, 8003ba2 <_fwalk_reent+0x16>
 8003b9c:	4630      	mov	r0, r6
 8003b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ba2:	68a5      	ldr	r5, [r4, #8]
 8003ba4:	6867      	ldr	r7, [r4, #4]
 8003ba6:	3f01      	subs	r7, #1
 8003ba8:	d501      	bpl.n	8003bae <_fwalk_reent+0x22>
 8003baa:	6824      	ldr	r4, [r4, #0]
 8003bac:	e7f5      	b.n	8003b9a <_fwalk_reent+0xe>
 8003bae:	89ab      	ldrh	r3, [r5, #12]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d907      	bls.n	8003bc4 <_fwalk_reent+0x38>
 8003bb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003bb8:	3301      	adds	r3, #1
 8003bba:	d003      	beq.n	8003bc4 <_fwalk_reent+0x38>
 8003bbc:	4629      	mov	r1, r5
 8003bbe:	4640      	mov	r0, r8
 8003bc0:	47c8      	blx	r9
 8003bc2:	4306      	orrs	r6, r0
 8003bc4:	3568      	adds	r5, #104	; 0x68
 8003bc6:	e7ee      	b.n	8003ba6 <_fwalk_reent+0x1a>

08003bc8 <__libc_init_array>:
 8003bc8:	b570      	push	{r4, r5, r6, lr}
 8003bca:	4e0d      	ldr	r6, [pc, #52]	; (8003c00 <__libc_init_array+0x38>)
 8003bcc:	4c0d      	ldr	r4, [pc, #52]	; (8003c04 <__libc_init_array+0x3c>)
 8003bce:	1ba4      	subs	r4, r4, r6
 8003bd0:	10a4      	asrs	r4, r4, #2
 8003bd2:	2500      	movs	r5, #0
 8003bd4:	42a5      	cmp	r5, r4
 8003bd6:	d109      	bne.n	8003bec <__libc_init_array+0x24>
 8003bd8:	4e0b      	ldr	r6, [pc, #44]	; (8003c08 <__libc_init_array+0x40>)
 8003bda:	4c0c      	ldr	r4, [pc, #48]	; (8003c0c <__libc_init_array+0x44>)
 8003bdc:	f000 ff56 	bl	8004a8c <_init>
 8003be0:	1ba4      	subs	r4, r4, r6
 8003be2:	10a4      	asrs	r4, r4, #2
 8003be4:	2500      	movs	r5, #0
 8003be6:	42a5      	cmp	r5, r4
 8003be8:	d105      	bne.n	8003bf6 <__libc_init_array+0x2e>
 8003bea:	bd70      	pop	{r4, r5, r6, pc}
 8003bec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003bf0:	4798      	blx	r3
 8003bf2:	3501      	adds	r5, #1
 8003bf4:	e7ee      	b.n	8003bd4 <__libc_init_array+0xc>
 8003bf6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003bfa:	4798      	blx	r3
 8003bfc:	3501      	adds	r5, #1
 8003bfe:	e7f2      	b.n	8003be6 <__libc_init_array+0x1e>
 8003c00:	08004b84 	.word	0x08004b84
 8003c04:	08004b84 	.word	0x08004b84
 8003c08:	08004b84 	.word	0x08004b84
 8003c0c:	08004b88 	.word	0x08004b88

08003c10 <malloc>:
 8003c10:	4b02      	ldr	r3, [pc, #8]	; (8003c1c <malloc+0xc>)
 8003c12:	4601      	mov	r1, r0
 8003c14:	6818      	ldr	r0, [r3, #0]
 8003c16:	f000 b865 	b.w	8003ce4 <_malloc_r>
 8003c1a:	bf00      	nop
 8003c1c:	20000018 	.word	0x20000018

08003c20 <memcpy>:
 8003c20:	b510      	push	{r4, lr}
 8003c22:	1e43      	subs	r3, r0, #1
 8003c24:	440a      	add	r2, r1
 8003c26:	4291      	cmp	r1, r2
 8003c28:	d100      	bne.n	8003c2c <memcpy+0xc>
 8003c2a:	bd10      	pop	{r4, pc}
 8003c2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c34:	e7f7      	b.n	8003c26 <memcpy+0x6>

08003c36 <memset>:
 8003c36:	4402      	add	r2, r0
 8003c38:	4603      	mov	r3, r0
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d100      	bne.n	8003c40 <memset+0xa>
 8003c3e:	4770      	bx	lr
 8003c40:	f803 1b01 	strb.w	r1, [r3], #1
 8003c44:	e7f9      	b.n	8003c3a <memset+0x4>
	...

08003c48 <_free_r>:
 8003c48:	b538      	push	{r3, r4, r5, lr}
 8003c4a:	4605      	mov	r5, r0
 8003c4c:	2900      	cmp	r1, #0
 8003c4e:	d045      	beq.n	8003cdc <_free_r+0x94>
 8003c50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c54:	1f0c      	subs	r4, r1, #4
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	bfb8      	it	lt
 8003c5a:	18e4      	addlt	r4, r4, r3
 8003c5c:	f000 fc0a 	bl	8004474 <__malloc_lock>
 8003c60:	4a1f      	ldr	r2, [pc, #124]	; (8003ce0 <_free_r+0x98>)
 8003c62:	6813      	ldr	r3, [r2, #0]
 8003c64:	4610      	mov	r0, r2
 8003c66:	b933      	cbnz	r3, 8003c76 <_free_r+0x2e>
 8003c68:	6063      	str	r3, [r4, #4]
 8003c6a:	6014      	str	r4, [r2, #0]
 8003c6c:	4628      	mov	r0, r5
 8003c6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c72:	f000 bc00 	b.w	8004476 <__malloc_unlock>
 8003c76:	42a3      	cmp	r3, r4
 8003c78:	d90c      	bls.n	8003c94 <_free_r+0x4c>
 8003c7a:	6821      	ldr	r1, [r4, #0]
 8003c7c:	1862      	adds	r2, r4, r1
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	bf04      	itt	eq
 8003c82:	681a      	ldreq	r2, [r3, #0]
 8003c84:	685b      	ldreq	r3, [r3, #4]
 8003c86:	6063      	str	r3, [r4, #4]
 8003c88:	bf04      	itt	eq
 8003c8a:	1852      	addeq	r2, r2, r1
 8003c8c:	6022      	streq	r2, [r4, #0]
 8003c8e:	6004      	str	r4, [r0, #0]
 8003c90:	e7ec      	b.n	8003c6c <_free_r+0x24>
 8003c92:	4613      	mov	r3, r2
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	b10a      	cbz	r2, 8003c9c <_free_r+0x54>
 8003c98:	42a2      	cmp	r2, r4
 8003c9a:	d9fa      	bls.n	8003c92 <_free_r+0x4a>
 8003c9c:	6819      	ldr	r1, [r3, #0]
 8003c9e:	1858      	adds	r0, r3, r1
 8003ca0:	42a0      	cmp	r0, r4
 8003ca2:	d10b      	bne.n	8003cbc <_free_r+0x74>
 8003ca4:	6820      	ldr	r0, [r4, #0]
 8003ca6:	4401      	add	r1, r0
 8003ca8:	1858      	adds	r0, r3, r1
 8003caa:	4282      	cmp	r2, r0
 8003cac:	6019      	str	r1, [r3, #0]
 8003cae:	d1dd      	bne.n	8003c6c <_free_r+0x24>
 8003cb0:	6810      	ldr	r0, [r2, #0]
 8003cb2:	6852      	ldr	r2, [r2, #4]
 8003cb4:	605a      	str	r2, [r3, #4]
 8003cb6:	4401      	add	r1, r0
 8003cb8:	6019      	str	r1, [r3, #0]
 8003cba:	e7d7      	b.n	8003c6c <_free_r+0x24>
 8003cbc:	d902      	bls.n	8003cc4 <_free_r+0x7c>
 8003cbe:	230c      	movs	r3, #12
 8003cc0:	602b      	str	r3, [r5, #0]
 8003cc2:	e7d3      	b.n	8003c6c <_free_r+0x24>
 8003cc4:	6820      	ldr	r0, [r4, #0]
 8003cc6:	1821      	adds	r1, r4, r0
 8003cc8:	428a      	cmp	r2, r1
 8003cca:	bf04      	itt	eq
 8003ccc:	6811      	ldreq	r1, [r2, #0]
 8003cce:	6852      	ldreq	r2, [r2, #4]
 8003cd0:	6062      	str	r2, [r4, #4]
 8003cd2:	bf04      	itt	eq
 8003cd4:	1809      	addeq	r1, r1, r0
 8003cd6:	6021      	streq	r1, [r4, #0]
 8003cd8:	605c      	str	r4, [r3, #4]
 8003cda:	e7c7      	b.n	8003c6c <_free_r+0x24>
 8003cdc:	bd38      	pop	{r3, r4, r5, pc}
 8003cde:	bf00      	nop
 8003ce0:	2000009c 	.word	0x2000009c

08003ce4 <_malloc_r>:
 8003ce4:	b570      	push	{r4, r5, r6, lr}
 8003ce6:	1ccd      	adds	r5, r1, #3
 8003ce8:	f025 0503 	bic.w	r5, r5, #3
 8003cec:	3508      	adds	r5, #8
 8003cee:	2d0c      	cmp	r5, #12
 8003cf0:	bf38      	it	cc
 8003cf2:	250c      	movcc	r5, #12
 8003cf4:	2d00      	cmp	r5, #0
 8003cf6:	4606      	mov	r6, r0
 8003cf8:	db01      	blt.n	8003cfe <_malloc_r+0x1a>
 8003cfa:	42a9      	cmp	r1, r5
 8003cfc:	d903      	bls.n	8003d06 <_malloc_r+0x22>
 8003cfe:	230c      	movs	r3, #12
 8003d00:	6033      	str	r3, [r6, #0]
 8003d02:	2000      	movs	r0, #0
 8003d04:	bd70      	pop	{r4, r5, r6, pc}
 8003d06:	f000 fbb5 	bl	8004474 <__malloc_lock>
 8003d0a:	4a23      	ldr	r2, [pc, #140]	; (8003d98 <_malloc_r+0xb4>)
 8003d0c:	6814      	ldr	r4, [r2, #0]
 8003d0e:	4621      	mov	r1, r4
 8003d10:	b991      	cbnz	r1, 8003d38 <_malloc_r+0x54>
 8003d12:	4c22      	ldr	r4, [pc, #136]	; (8003d9c <_malloc_r+0xb8>)
 8003d14:	6823      	ldr	r3, [r4, #0]
 8003d16:	b91b      	cbnz	r3, 8003d20 <_malloc_r+0x3c>
 8003d18:	4630      	mov	r0, r6
 8003d1a:	f000 f951 	bl	8003fc0 <_sbrk_r>
 8003d1e:	6020      	str	r0, [r4, #0]
 8003d20:	4629      	mov	r1, r5
 8003d22:	4630      	mov	r0, r6
 8003d24:	f000 f94c 	bl	8003fc0 <_sbrk_r>
 8003d28:	1c43      	adds	r3, r0, #1
 8003d2a:	d126      	bne.n	8003d7a <_malloc_r+0x96>
 8003d2c:	230c      	movs	r3, #12
 8003d2e:	6033      	str	r3, [r6, #0]
 8003d30:	4630      	mov	r0, r6
 8003d32:	f000 fba0 	bl	8004476 <__malloc_unlock>
 8003d36:	e7e4      	b.n	8003d02 <_malloc_r+0x1e>
 8003d38:	680b      	ldr	r3, [r1, #0]
 8003d3a:	1b5b      	subs	r3, r3, r5
 8003d3c:	d41a      	bmi.n	8003d74 <_malloc_r+0x90>
 8003d3e:	2b0b      	cmp	r3, #11
 8003d40:	d90f      	bls.n	8003d62 <_malloc_r+0x7e>
 8003d42:	600b      	str	r3, [r1, #0]
 8003d44:	50cd      	str	r5, [r1, r3]
 8003d46:	18cc      	adds	r4, r1, r3
 8003d48:	4630      	mov	r0, r6
 8003d4a:	f000 fb94 	bl	8004476 <__malloc_unlock>
 8003d4e:	f104 000b 	add.w	r0, r4, #11
 8003d52:	1d23      	adds	r3, r4, #4
 8003d54:	f020 0007 	bic.w	r0, r0, #7
 8003d58:	1ac3      	subs	r3, r0, r3
 8003d5a:	d01b      	beq.n	8003d94 <_malloc_r+0xb0>
 8003d5c:	425a      	negs	r2, r3
 8003d5e:	50e2      	str	r2, [r4, r3]
 8003d60:	bd70      	pop	{r4, r5, r6, pc}
 8003d62:	428c      	cmp	r4, r1
 8003d64:	bf0d      	iteet	eq
 8003d66:	6863      	ldreq	r3, [r4, #4]
 8003d68:	684b      	ldrne	r3, [r1, #4]
 8003d6a:	6063      	strne	r3, [r4, #4]
 8003d6c:	6013      	streq	r3, [r2, #0]
 8003d6e:	bf18      	it	ne
 8003d70:	460c      	movne	r4, r1
 8003d72:	e7e9      	b.n	8003d48 <_malloc_r+0x64>
 8003d74:	460c      	mov	r4, r1
 8003d76:	6849      	ldr	r1, [r1, #4]
 8003d78:	e7ca      	b.n	8003d10 <_malloc_r+0x2c>
 8003d7a:	1cc4      	adds	r4, r0, #3
 8003d7c:	f024 0403 	bic.w	r4, r4, #3
 8003d80:	42a0      	cmp	r0, r4
 8003d82:	d005      	beq.n	8003d90 <_malloc_r+0xac>
 8003d84:	1a21      	subs	r1, r4, r0
 8003d86:	4630      	mov	r0, r6
 8003d88:	f000 f91a 	bl	8003fc0 <_sbrk_r>
 8003d8c:	3001      	adds	r0, #1
 8003d8e:	d0cd      	beq.n	8003d2c <_malloc_r+0x48>
 8003d90:	6025      	str	r5, [r4, #0]
 8003d92:	e7d9      	b.n	8003d48 <_malloc_r+0x64>
 8003d94:	bd70      	pop	{r4, r5, r6, pc}
 8003d96:	bf00      	nop
 8003d98:	2000009c 	.word	0x2000009c
 8003d9c:	200000a0 	.word	0x200000a0

08003da0 <iprintf>:
 8003da0:	b40f      	push	{r0, r1, r2, r3}
 8003da2:	4b0a      	ldr	r3, [pc, #40]	; (8003dcc <iprintf+0x2c>)
 8003da4:	b513      	push	{r0, r1, r4, lr}
 8003da6:	681c      	ldr	r4, [r3, #0]
 8003da8:	b124      	cbz	r4, 8003db4 <iprintf+0x14>
 8003daa:	69a3      	ldr	r3, [r4, #24]
 8003dac:	b913      	cbnz	r3, 8003db4 <iprintf+0x14>
 8003dae:	4620      	mov	r0, r4
 8003db0:	f7ff fe64 	bl	8003a7c <__sinit>
 8003db4:	ab05      	add	r3, sp, #20
 8003db6:	9a04      	ldr	r2, [sp, #16]
 8003db8:	68a1      	ldr	r1, [r4, #8]
 8003dba:	9301      	str	r3, [sp, #4]
 8003dbc:	4620      	mov	r0, r4
 8003dbe:	f000 fb85 	bl	80044cc <_vfiprintf_r>
 8003dc2:	b002      	add	sp, #8
 8003dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dc8:	b004      	add	sp, #16
 8003dca:	4770      	bx	lr
 8003dcc:	20000018 	.word	0x20000018

08003dd0 <_puts_r>:
 8003dd0:	b570      	push	{r4, r5, r6, lr}
 8003dd2:	460e      	mov	r6, r1
 8003dd4:	4605      	mov	r5, r0
 8003dd6:	b118      	cbz	r0, 8003de0 <_puts_r+0x10>
 8003dd8:	6983      	ldr	r3, [r0, #24]
 8003dda:	b90b      	cbnz	r3, 8003de0 <_puts_r+0x10>
 8003ddc:	f7ff fe4e 	bl	8003a7c <__sinit>
 8003de0:	69ab      	ldr	r3, [r5, #24]
 8003de2:	68ac      	ldr	r4, [r5, #8]
 8003de4:	b913      	cbnz	r3, 8003dec <_puts_r+0x1c>
 8003de6:	4628      	mov	r0, r5
 8003de8:	f7ff fe48 	bl	8003a7c <__sinit>
 8003dec:	4b23      	ldr	r3, [pc, #140]	; (8003e7c <_puts_r+0xac>)
 8003dee:	429c      	cmp	r4, r3
 8003df0:	d117      	bne.n	8003e22 <_puts_r+0x52>
 8003df2:	686c      	ldr	r4, [r5, #4]
 8003df4:	89a3      	ldrh	r3, [r4, #12]
 8003df6:	071b      	lsls	r3, r3, #28
 8003df8:	d51d      	bpl.n	8003e36 <_puts_r+0x66>
 8003dfa:	6923      	ldr	r3, [r4, #16]
 8003dfc:	b1db      	cbz	r3, 8003e36 <_puts_r+0x66>
 8003dfe:	3e01      	subs	r6, #1
 8003e00:	68a3      	ldr	r3, [r4, #8]
 8003e02:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003e06:	3b01      	subs	r3, #1
 8003e08:	60a3      	str	r3, [r4, #8]
 8003e0a:	b9e9      	cbnz	r1, 8003e48 <_puts_r+0x78>
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	da2e      	bge.n	8003e6e <_puts_r+0x9e>
 8003e10:	4622      	mov	r2, r4
 8003e12:	210a      	movs	r1, #10
 8003e14:	4628      	mov	r0, r5
 8003e16:	f000 f9d5 	bl	80041c4 <__swbuf_r>
 8003e1a:	3001      	adds	r0, #1
 8003e1c:	d011      	beq.n	8003e42 <_puts_r+0x72>
 8003e1e:	200a      	movs	r0, #10
 8003e20:	bd70      	pop	{r4, r5, r6, pc}
 8003e22:	4b17      	ldr	r3, [pc, #92]	; (8003e80 <_puts_r+0xb0>)
 8003e24:	429c      	cmp	r4, r3
 8003e26:	d101      	bne.n	8003e2c <_puts_r+0x5c>
 8003e28:	68ac      	ldr	r4, [r5, #8]
 8003e2a:	e7e3      	b.n	8003df4 <_puts_r+0x24>
 8003e2c:	4b15      	ldr	r3, [pc, #84]	; (8003e84 <_puts_r+0xb4>)
 8003e2e:	429c      	cmp	r4, r3
 8003e30:	bf08      	it	eq
 8003e32:	68ec      	ldreq	r4, [r5, #12]
 8003e34:	e7de      	b.n	8003df4 <_puts_r+0x24>
 8003e36:	4621      	mov	r1, r4
 8003e38:	4628      	mov	r0, r5
 8003e3a:	f000 fa27 	bl	800428c <__swsetup_r>
 8003e3e:	2800      	cmp	r0, #0
 8003e40:	d0dd      	beq.n	8003dfe <_puts_r+0x2e>
 8003e42:	f04f 30ff 	mov.w	r0, #4294967295
 8003e46:	bd70      	pop	{r4, r5, r6, pc}
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	da04      	bge.n	8003e56 <_puts_r+0x86>
 8003e4c:	69a2      	ldr	r2, [r4, #24]
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	db06      	blt.n	8003e60 <_puts_r+0x90>
 8003e52:	290a      	cmp	r1, #10
 8003e54:	d004      	beq.n	8003e60 <_puts_r+0x90>
 8003e56:	6823      	ldr	r3, [r4, #0]
 8003e58:	1c5a      	adds	r2, r3, #1
 8003e5a:	6022      	str	r2, [r4, #0]
 8003e5c:	7019      	strb	r1, [r3, #0]
 8003e5e:	e7cf      	b.n	8003e00 <_puts_r+0x30>
 8003e60:	4622      	mov	r2, r4
 8003e62:	4628      	mov	r0, r5
 8003e64:	f000 f9ae 	bl	80041c4 <__swbuf_r>
 8003e68:	3001      	adds	r0, #1
 8003e6a:	d1c9      	bne.n	8003e00 <_puts_r+0x30>
 8003e6c:	e7e9      	b.n	8003e42 <_puts_r+0x72>
 8003e6e:	6823      	ldr	r3, [r4, #0]
 8003e70:	200a      	movs	r0, #10
 8003e72:	1c5a      	adds	r2, r3, #1
 8003e74:	6022      	str	r2, [r4, #0]
 8003e76:	7018      	strb	r0, [r3, #0]
 8003e78:	bd70      	pop	{r4, r5, r6, pc}
 8003e7a:	bf00      	nop
 8003e7c:	08004b04 	.word	0x08004b04
 8003e80:	08004b24 	.word	0x08004b24
 8003e84:	08004ae4 	.word	0x08004ae4

08003e88 <puts>:
 8003e88:	4b02      	ldr	r3, [pc, #8]	; (8003e94 <puts+0xc>)
 8003e8a:	4601      	mov	r1, r0
 8003e8c:	6818      	ldr	r0, [r3, #0]
 8003e8e:	f7ff bf9f 	b.w	8003dd0 <_puts_r>
 8003e92:	bf00      	nop
 8003e94:	20000018 	.word	0x20000018

08003e98 <lflush>:
 8003e98:	8983      	ldrh	r3, [r0, #12]
 8003e9a:	f003 0309 	and.w	r3, r3, #9
 8003e9e:	2b09      	cmp	r3, #9
 8003ea0:	d101      	bne.n	8003ea6 <lflush+0xe>
 8003ea2:	f7ff bd2d 	b.w	8003900 <fflush>
 8003ea6:	2000      	movs	r0, #0
 8003ea8:	4770      	bx	lr
	...

08003eac <__srefill_r>:
 8003eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eae:	460c      	mov	r4, r1
 8003eb0:	4605      	mov	r5, r0
 8003eb2:	b118      	cbz	r0, 8003ebc <__srefill_r+0x10>
 8003eb4:	6983      	ldr	r3, [r0, #24]
 8003eb6:	b90b      	cbnz	r3, 8003ebc <__srefill_r+0x10>
 8003eb8:	f7ff fde0 	bl	8003a7c <__sinit>
 8003ebc:	4b3b      	ldr	r3, [pc, #236]	; (8003fac <__srefill_r+0x100>)
 8003ebe:	429c      	cmp	r4, r3
 8003ec0:	d10a      	bne.n	8003ed8 <__srefill_r+0x2c>
 8003ec2:	686c      	ldr	r4, [r5, #4]
 8003ec4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ec8:	2300      	movs	r3, #0
 8003eca:	6063      	str	r3, [r4, #4]
 8003ecc:	b293      	uxth	r3, r2
 8003ece:	069e      	lsls	r6, r3, #26
 8003ed0:	d50c      	bpl.n	8003eec <__srefill_r+0x40>
 8003ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ed8:	4b35      	ldr	r3, [pc, #212]	; (8003fb0 <__srefill_r+0x104>)
 8003eda:	429c      	cmp	r4, r3
 8003edc:	d101      	bne.n	8003ee2 <__srefill_r+0x36>
 8003ede:	68ac      	ldr	r4, [r5, #8]
 8003ee0:	e7f0      	b.n	8003ec4 <__srefill_r+0x18>
 8003ee2:	4b34      	ldr	r3, [pc, #208]	; (8003fb4 <__srefill_r+0x108>)
 8003ee4:	429c      	cmp	r4, r3
 8003ee6:	bf08      	it	eq
 8003ee8:	68ec      	ldreq	r4, [r5, #12]
 8003eea:	e7eb      	b.n	8003ec4 <__srefill_r+0x18>
 8003eec:	0758      	lsls	r0, r3, #29
 8003eee:	d448      	bmi.n	8003f82 <__srefill_r+0xd6>
 8003ef0:	06d9      	lsls	r1, r3, #27
 8003ef2:	d405      	bmi.n	8003f00 <__srefill_r+0x54>
 8003ef4:	2309      	movs	r3, #9
 8003ef6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003efa:	602b      	str	r3, [r5, #0]
 8003efc:	81a2      	strh	r2, [r4, #12]
 8003efe:	e7e8      	b.n	8003ed2 <__srefill_r+0x26>
 8003f00:	071a      	lsls	r2, r3, #28
 8003f02:	d50b      	bpl.n	8003f1c <__srefill_r+0x70>
 8003f04:	4621      	mov	r1, r4
 8003f06:	4628      	mov	r0, r5
 8003f08:	f7ff fcd0 	bl	80038ac <_fflush_r>
 8003f0c:	2800      	cmp	r0, #0
 8003f0e:	d1e0      	bne.n	8003ed2 <__srefill_r+0x26>
 8003f10:	89a3      	ldrh	r3, [r4, #12]
 8003f12:	60a0      	str	r0, [r4, #8]
 8003f14:	f023 0308 	bic.w	r3, r3, #8
 8003f18:	81a3      	strh	r3, [r4, #12]
 8003f1a:	61a0      	str	r0, [r4, #24]
 8003f1c:	89a3      	ldrh	r3, [r4, #12]
 8003f1e:	f043 0304 	orr.w	r3, r3, #4
 8003f22:	81a3      	strh	r3, [r4, #12]
 8003f24:	6923      	ldr	r3, [r4, #16]
 8003f26:	b91b      	cbnz	r3, 8003f30 <__srefill_r+0x84>
 8003f28:	4621      	mov	r1, r4
 8003f2a:	4628      	mov	r0, r5
 8003f2c:	f000 fa62 	bl	80043f4 <__smakebuf_r>
 8003f30:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8003f34:	b2be      	uxth	r6, r7
 8003f36:	07b3      	lsls	r3, r6, #30
 8003f38:	d00f      	beq.n	8003f5a <__srefill_r+0xae>
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	81a3      	strh	r3, [r4, #12]
 8003f3e:	4b1e      	ldr	r3, [pc, #120]	; (8003fb8 <__srefill_r+0x10c>)
 8003f40:	491e      	ldr	r1, [pc, #120]	; (8003fbc <__srefill_r+0x110>)
 8003f42:	6818      	ldr	r0, [r3, #0]
 8003f44:	f006 0609 	and.w	r6, r6, #9
 8003f48:	f7ff fe04 	bl	8003b54 <_fwalk>
 8003f4c:	2e09      	cmp	r6, #9
 8003f4e:	81a7      	strh	r7, [r4, #12]
 8003f50:	d103      	bne.n	8003f5a <__srefill_r+0xae>
 8003f52:	4621      	mov	r1, r4
 8003f54:	4628      	mov	r0, r5
 8003f56:	f7ff fc21 	bl	800379c <__sflush_r>
 8003f5a:	6922      	ldr	r2, [r4, #16]
 8003f5c:	6022      	str	r2, [r4, #0]
 8003f5e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003f60:	6963      	ldr	r3, [r4, #20]
 8003f62:	6a21      	ldr	r1, [r4, #32]
 8003f64:	4628      	mov	r0, r5
 8003f66:	47b0      	blx	r6
 8003f68:	2800      	cmp	r0, #0
 8003f6a:	6060      	str	r0, [r4, #4]
 8003f6c:	dc1c      	bgt.n	8003fa8 <__srefill_r+0xfc>
 8003f6e:	89a3      	ldrh	r3, [r4, #12]
 8003f70:	bf17      	itett	ne
 8003f72:	2200      	movne	r2, #0
 8003f74:	f043 0320 	orreq.w	r3, r3, #32
 8003f78:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8003f7c:	6062      	strne	r2, [r4, #4]
 8003f7e:	81a3      	strh	r3, [r4, #12]
 8003f80:	e7a7      	b.n	8003ed2 <__srefill_r+0x26>
 8003f82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f84:	2900      	cmp	r1, #0
 8003f86:	d0cd      	beq.n	8003f24 <__srefill_r+0x78>
 8003f88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f8c:	4299      	cmp	r1, r3
 8003f8e:	d002      	beq.n	8003f96 <__srefill_r+0xea>
 8003f90:	4628      	mov	r0, r5
 8003f92:	f7ff fe59 	bl	8003c48 <_free_r>
 8003f96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f98:	6063      	str	r3, [r4, #4]
 8003f9a:	2000      	movs	r0, #0
 8003f9c:	6360      	str	r0, [r4, #52]	; 0x34
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d0c0      	beq.n	8003f24 <__srefill_r+0x78>
 8003fa2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003fa4:	6023      	str	r3, [r4, #0]
 8003fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fa8:	2000      	movs	r0, #0
 8003faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fac:	08004b04 	.word	0x08004b04
 8003fb0:	08004b24 	.word	0x08004b24
 8003fb4:	08004ae4 	.word	0x08004ae4
 8003fb8:	08004b44 	.word	0x08004b44
 8003fbc:	08003e99 	.word	0x08003e99

08003fc0 <_sbrk_r>:
 8003fc0:	b538      	push	{r3, r4, r5, lr}
 8003fc2:	4c06      	ldr	r4, [pc, #24]	; (8003fdc <_sbrk_r+0x1c>)
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	4605      	mov	r5, r0
 8003fc8:	4608      	mov	r0, r1
 8003fca:	6023      	str	r3, [r4, #0]
 8003fcc:	f7ff f916 	bl	80031fc <_sbrk>
 8003fd0:	1c43      	adds	r3, r0, #1
 8003fd2:	d102      	bne.n	8003fda <_sbrk_r+0x1a>
 8003fd4:	6823      	ldr	r3, [r4, #0]
 8003fd6:	b103      	cbz	r3, 8003fda <_sbrk_r+0x1a>
 8003fd8:	602b      	str	r3, [r5, #0]
 8003fda:	bd38      	pop	{r3, r4, r5, pc}
 8003fdc:	2000047c 	.word	0x2000047c

08003fe0 <setvbuf>:
 8003fe0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003fe4:	461d      	mov	r5, r3
 8003fe6:	4b51      	ldr	r3, [pc, #324]	; (800412c <setvbuf+0x14c>)
 8003fe8:	681e      	ldr	r6, [r3, #0]
 8003fea:	4604      	mov	r4, r0
 8003fec:	460f      	mov	r7, r1
 8003fee:	4690      	mov	r8, r2
 8003ff0:	b126      	cbz	r6, 8003ffc <setvbuf+0x1c>
 8003ff2:	69b3      	ldr	r3, [r6, #24]
 8003ff4:	b913      	cbnz	r3, 8003ffc <setvbuf+0x1c>
 8003ff6:	4630      	mov	r0, r6
 8003ff8:	f7ff fd40 	bl	8003a7c <__sinit>
 8003ffc:	4b4c      	ldr	r3, [pc, #304]	; (8004130 <setvbuf+0x150>)
 8003ffe:	429c      	cmp	r4, r3
 8004000:	d152      	bne.n	80040a8 <setvbuf+0xc8>
 8004002:	6874      	ldr	r4, [r6, #4]
 8004004:	f1b8 0f02 	cmp.w	r8, #2
 8004008:	d006      	beq.n	8004018 <setvbuf+0x38>
 800400a:	f1b8 0f01 	cmp.w	r8, #1
 800400e:	f200 8089 	bhi.w	8004124 <setvbuf+0x144>
 8004012:	2d00      	cmp	r5, #0
 8004014:	f2c0 8086 	blt.w	8004124 <setvbuf+0x144>
 8004018:	4621      	mov	r1, r4
 800401a:	4630      	mov	r0, r6
 800401c:	f7ff fc46 	bl	80038ac <_fflush_r>
 8004020:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004022:	b141      	cbz	r1, 8004036 <setvbuf+0x56>
 8004024:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004028:	4299      	cmp	r1, r3
 800402a:	d002      	beq.n	8004032 <setvbuf+0x52>
 800402c:	4630      	mov	r0, r6
 800402e:	f7ff fe0b 	bl	8003c48 <_free_r>
 8004032:	2300      	movs	r3, #0
 8004034:	6363      	str	r3, [r4, #52]	; 0x34
 8004036:	2300      	movs	r3, #0
 8004038:	61a3      	str	r3, [r4, #24]
 800403a:	6063      	str	r3, [r4, #4]
 800403c:	89a3      	ldrh	r3, [r4, #12]
 800403e:	061b      	lsls	r3, r3, #24
 8004040:	d503      	bpl.n	800404a <setvbuf+0x6a>
 8004042:	6921      	ldr	r1, [r4, #16]
 8004044:	4630      	mov	r0, r6
 8004046:	f7ff fdff 	bl	8003c48 <_free_r>
 800404a:	89a3      	ldrh	r3, [r4, #12]
 800404c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004050:	f023 0303 	bic.w	r3, r3, #3
 8004054:	f1b8 0f02 	cmp.w	r8, #2
 8004058:	81a3      	strh	r3, [r4, #12]
 800405a:	d05d      	beq.n	8004118 <setvbuf+0x138>
 800405c:	ab01      	add	r3, sp, #4
 800405e:	466a      	mov	r2, sp
 8004060:	4621      	mov	r1, r4
 8004062:	4630      	mov	r0, r6
 8004064:	f000 f9a2 	bl	80043ac <__swhatbuf_r>
 8004068:	89a3      	ldrh	r3, [r4, #12]
 800406a:	4318      	orrs	r0, r3
 800406c:	81a0      	strh	r0, [r4, #12]
 800406e:	bb2d      	cbnz	r5, 80040bc <setvbuf+0xdc>
 8004070:	9d00      	ldr	r5, [sp, #0]
 8004072:	4628      	mov	r0, r5
 8004074:	f7ff fdcc 	bl	8003c10 <malloc>
 8004078:	4607      	mov	r7, r0
 800407a:	2800      	cmp	r0, #0
 800407c:	d14e      	bne.n	800411c <setvbuf+0x13c>
 800407e:	f8dd 9000 	ldr.w	r9, [sp]
 8004082:	45a9      	cmp	r9, r5
 8004084:	d13c      	bne.n	8004100 <setvbuf+0x120>
 8004086:	f04f 30ff 	mov.w	r0, #4294967295
 800408a:	89a3      	ldrh	r3, [r4, #12]
 800408c:	f043 0302 	orr.w	r3, r3, #2
 8004090:	81a3      	strh	r3, [r4, #12]
 8004092:	2300      	movs	r3, #0
 8004094:	60a3      	str	r3, [r4, #8]
 8004096:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800409a:	6023      	str	r3, [r4, #0]
 800409c:	6123      	str	r3, [r4, #16]
 800409e:	2301      	movs	r3, #1
 80040a0:	6163      	str	r3, [r4, #20]
 80040a2:	b003      	add	sp, #12
 80040a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80040a8:	4b22      	ldr	r3, [pc, #136]	; (8004134 <setvbuf+0x154>)
 80040aa:	429c      	cmp	r4, r3
 80040ac:	d101      	bne.n	80040b2 <setvbuf+0xd2>
 80040ae:	68b4      	ldr	r4, [r6, #8]
 80040b0:	e7a8      	b.n	8004004 <setvbuf+0x24>
 80040b2:	4b21      	ldr	r3, [pc, #132]	; (8004138 <setvbuf+0x158>)
 80040b4:	429c      	cmp	r4, r3
 80040b6:	bf08      	it	eq
 80040b8:	68f4      	ldreq	r4, [r6, #12]
 80040ba:	e7a3      	b.n	8004004 <setvbuf+0x24>
 80040bc:	2f00      	cmp	r7, #0
 80040be:	d0d8      	beq.n	8004072 <setvbuf+0x92>
 80040c0:	69b3      	ldr	r3, [r6, #24]
 80040c2:	b913      	cbnz	r3, 80040ca <setvbuf+0xea>
 80040c4:	4630      	mov	r0, r6
 80040c6:	f7ff fcd9 	bl	8003a7c <__sinit>
 80040ca:	f1b8 0f01 	cmp.w	r8, #1
 80040ce:	bf08      	it	eq
 80040d0:	89a3      	ldrheq	r3, [r4, #12]
 80040d2:	6027      	str	r7, [r4, #0]
 80040d4:	bf04      	itt	eq
 80040d6:	f043 0301 	orreq.w	r3, r3, #1
 80040da:	81a3      	strheq	r3, [r4, #12]
 80040dc:	89a3      	ldrh	r3, [r4, #12]
 80040de:	6127      	str	r7, [r4, #16]
 80040e0:	f013 0008 	ands.w	r0, r3, #8
 80040e4:	6165      	str	r5, [r4, #20]
 80040e6:	d01b      	beq.n	8004120 <setvbuf+0x140>
 80040e8:	f013 0001 	ands.w	r0, r3, #1
 80040ec:	bf18      	it	ne
 80040ee:	426d      	negne	r5, r5
 80040f0:	f04f 0300 	mov.w	r3, #0
 80040f4:	bf1d      	ittte	ne
 80040f6:	60a3      	strne	r3, [r4, #8]
 80040f8:	61a5      	strne	r5, [r4, #24]
 80040fa:	4618      	movne	r0, r3
 80040fc:	60a5      	streq	r5, [r4, #8]
 80040fe:	e7d0      	b.n	80040a2 <setvbuf+0xc2>
 8004100:	4648      	mov	r0, r9
 8004102:	f7ff fd85 	bl	8003c10 <malloc>
 8004106:	4607      	mov	r7, r0
 8004108:	2800      	cmp	r0, #0
 800410a:	d0bc      	beq.n	8004086 <setvbuf+0xa6>
 800410c:	89a3      	ldrh	r3, [r4, #12]
 800410e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004112:	81a3      	strh	r3, [r4, #12]
 8004114:	464d      	mov	r5, r9
 8004116:	e7d3      	b.n	80040c0 <setvbuf+0xe0>
 8004118:	2000      	movs	r0, #0
 800411a:	e7b6      	b.n	800408a <setvbuf+0xaa>
 800411c:	46a9      	mov	r9, r5
 800411e:	e7f5      	b.n	800410c <setvbuf+0x12c>
 8004120:	60a0      	str	r0, [r4, #8]
 8004122:	e7be      	b.n	80040a2 <setvbuf+0xc2>
 8004124:	f04f 30ff 	mov.w	r0, #4294967295
 8004128:	e7bb      	b.n	80040a2 <setvbuf+0xc2>
 800412a:	bf00      	nop
 800412c:	20000018 	.word	0x20000018
 8004130:	08004b04 	.word	0x08004b04
 8004134:	08004b24 	.word	0x08004b24
 8004138:	08004ae4 	.word	0x08004ae4

0800413c <__sread>:
 800413c:	b510      	push	{r4, lr}
 800413e:	460c      	mov	r4, r1
 8004140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004144:	f000 fc6e 	bl	8004a24 <_read_r>
 8004148:	2800      	cmp	r0, #0
 800414a:	bfab      	itete	ge
 800414c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800414e:	89a3      	ldrhlt	r3, [r4, #12]
 8004150:	181b      	addge	r3, r3, r0
 8004152:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004156:	bfac      	ite	ge
 8004158:	6563      	strge	r3, [r4, #84]	; 0x54
 800415a:	81a3      	strhlt	r3, [r4, #12]
 800415c:	bd10      	pop	{r4, pc}

0800415e <__swrite>:
 800415e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004162:	461f      	mov	r7, r3
 8004164:	898b      	ldrh	r3, [r1, #12]
 8004166:	05db      	lsls	r3, r3, #23
 8004168:	4605      	mov	r5, r0
 800416a:	460c      	mov	r4, r1
 800416c:	4616      	mov	r6, r2
 800416e:	d505      	bpl.n	800417c <__swrite+0x1e>
 8004170:	2302      	movs	r3, #2
 8004172:	2200      	movs	r2, #0
 8004174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004178:	f000 f906 	bl	8004388 <_lseek_r>
 800417c:	89a3      	ldrh	r3, [r4, #12]
 800417e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004182:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004186:	81a3      	strh	r3, [r4, #12]
 8004188:	4632      	mov	r2, r6
 800418a:	463b      	mov	r3, r7
 800418c:	4628      	mov	r0, r5
 800418e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004192:	f000 b869 	b.w	8004268 <_write_r>

08004196 <__sseek>:
 8004196:	b510      	push	{r4, lr}
 8004198:	460c      	mov	r4, r1
 800419a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800419e:	f000 f8f3 	bl	8004388 <_lseek_r>
 80041a2:	1c43      	adds	r3, r0, #1
 80041a4:	89a3      	ldrh	r3, [r4, #12]
 80041a6:	bf15      	itete	ne
 80041a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80041aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80041ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80041b2:	81a3      	strheq	r3, [r4, #12]
 80041b4:	bf18      	it	ne
 80041b6:	81a3      	strhne	r3, [r4, #12]
 80041b8:	bd10      	pop	{r4, pc}

080041ba <__sclose>:
 80041ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041be:	f000 b8d3 	b.w	8004368 <_close_r>
	...

080041c4 <__swbuf_r>:
 80041c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041c6:	460e      	mov	r6, r1
 80041c8:	4614      	mov	r4, r2
 80041ca:	4605      	mov	r5, r0
 80041cc:	b118      	cbz	r0, 80041d6 <__swbuf_r+0x12>
 80041ce:	6983      	ldr	r3, [r0, #24]
 80041d0:	b90b      	cbnz	r3, 80041d6 <__swbuf_r+0x12>
 80041d2:	f7ff fc53 	bl	8003a7c <__sinit>
 80041d6:	4b21      	ldr	r3, [pc, #132]	; (800425c <__swbuf_r+0x98>)
 80041d8:	429c      	cmp	r4, r3
 80041da:	d12a      	bne.n	8004232 <__swbuf_r+0x6e>
 80041dc:	686c      	ldr	r4, [r5, #4]
 80041de:	69a3      	ldr	r3, [r4, #24]
 80041e0:	60a3      	str	r3, [r4, #8]
 80041e2:	89a3      	ldrh	r3, [r4, #12]
 80041e4:	071a      	lsls	r2, r3, #28
 80041e6:	d52e      	bpl.n	8004246 <__swbuf_r+0x82>
 80041e8:	6923      	ldr	r3, [r4, #16]
 80041ea:	b363      	cbz	r3, 8004246 <__swbuf_r+0x82>
 80041ec:	6923      	ldr	r3, [r4, #16]
 80041ee:	6820      	ldr	r0, [r4, #0]
 80041f0:	1ac0      	subs	r0, r0, r3
 80041f2:	6963      	ldr	r3, [r4, #20]
 80041f4:	b2f6      	uxtb	r6, r6
 80041f6:	4298      	cmp	r0, r3
 80041f8:	4637      	mov	r7, r6
 80041fa:	db04      	blt.n	8004206 <__swbuf_r+0x42>
 80041fc:	4621      	mov	r1, r4
 80041fe:	4628      	mov	r0, r5
 8004200:	f7ff fb54 	bl	80038ac <_fflush_r>
 8004204:	bb28      	cbnz	r0, 8004252 <__swbuf_r+0x8e>
 8004206:	68a3      	ldr	r3, [r4, #8]
 8004208:	3b01      	subs	r3, #1
 800420a:	60a3      	str	r3, [r4, #8]
 800420c:	6823      	ldr	r3, [r4, #0]
 800420e:	1c5a      	adds	r2, r3, #1
 8004210:	6022      	str	r2, [r4, #0]
 8004212:	701e      	strb	r6, [r3, #0]
 8004214:	6963      	ldr	r3, [r4, #20]
 8004216:	3001      	adds	r0, #1
 8004218:	4298      	cmp	r0, r3
 800421a:	d004      	beq.n	8004226 <__swbuf_r+0x62>
 800421c:	89a3      	ldrh	r3, [r4, #12]
 800421e:	07db      	lsls	r3, r3, #31
 8004220:	d519      	bpl.n	8004256 <__swbuf_r+0x92>
 8004222:	2e0a      	cmp	r6, #10
 8004224:	d117      	bne.n	8004256 <__swbuf_r+0x92>
 8004226:	4621      	mov	r1, r4
 8004228:	4628      	mov	r0, r5
 800422a:	f7ff fb3f 	bl	80038ac <_fflush_r>
 800422e:	b190      	cbz	r0, 8004256 <__swbuf_r+0x92>
 8004230:	e00f      	b.n	8004252 <__swbuf_r+0x8e>
 8004232:	4b0b      	ldr	r3, [pc, #44]	; (8004260 <__swbuf_r+0x9c>)
 8004234:	429c      	cmp	r4, r3
 8004236:	d101      	bne.n	800423c <__swbuf_r+0x78>
 8004238:	68ac      	ldr	r4, [r5, #8]
 800423a:	e7d0      	b.n	80041de <__swbuf_r+0x1a>
 800423c:	4b09      	ldr	r3, [pc, #36]	; (8004264 <__swbuf_r+0xa0>)
 800423e:	429c      	cmp	r4, r3
 8004240:	bf08      	it	eq
 8004242:	68ec      	ldreq	r4, [r5, #12]
 8004244:	e7cb      	b.n	80041de <__swbuf_r+0x1a>
 8004246:	4621      	mov	r1, r4
 8004248:	4628      	mov	r0, r5
 800424a:	f000 f81f 	bl	800428c <__swsetup_r>
 800424e:	2800      	cmp	r0, #0
 8004250:	d0cc      	beq.n	80041ec <__swbuf_r+0x28>
 8004252:	f04f 37ff 	mov.w	r7, #4294967295
 8004256:	4638      	mov	r0, r7
 8004258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800425a:	bf00      	nop
 800425c:	08004b04 	.word	0x08004b04
 8004260:	08004b24 	.word	0x08004b24
 8004264:	08004ae4 	.word	0x08004ae4

08004268 <_write_r>:
 8004268:	b538      	push	{r3, r4, r5, lr}
 800426a:	4c07      	ldr	r4, [pc, #28]	; (8004288 <_write_r+0x20>)
 800426c:	4605      	mov	r5, r0
 800426e:	4608      	mov	r0, r1
 8004270:	4611      	mov	r1, r2
 8004272:	2200      	movs	r2, #0
 8004274:	6022      	str	r2, [r4, #0]
 8004276:	461a      	mov	r2, r3
 8004278:	f7fe ffb2 	bl	80031e0 <_write>
 800427c:	1c43      	adds	r3, r0, #1
 800427e:	d102      	bne.n	8004286 <_write_r+0x1e>
 8004280:	6823      	ldr	r3, [r4, #0]
 8004282:	b103      	cbz	r3, 8004286 <_write_r+0x1e>
 8004284:	602b      	str	r3, [r5, #0]
 8004286:	bd38      	pop	{r3, r4, r5, pc}
 8004288:	2000047c 	.word	0x2000047c

0800428c <__swsetup_r>:
 800428c:	4b32      	ldr	r3, [pc, #200]	; (8004358 <__swsetup_r+0xcc>)
 800428e:	b570      	push	{r4, r5, r6, lr}
 8004290:	681d      	ldr	r5, [r3, #0]
 8004292:	4606      	mov	r6, r0
 8004294:	460c      	mov	r4, r1
 8004296:	b125      	cbz	r5, 80042a2 <__swsetup_r+0x16>
 8004298:	69ab      	ldr	r3, [r5, #24]
 800429a:	b913      	cbnz	r3, 80042a2 <__swsetup_r+0x16>
 800429c:	4628      	mov	r0, r5
 800429e:	f7ff fbed 	bl	8003a7c <__sinit>
 80042a2:	4b2e      	ldr	r3, [pc, #184]	; (800435c <__swsetup_r+0xd0>)
 80042a4:	429c      	cmp	r4, r3
 80042a6:	d10f      	bne.n	80042c8 <__swsetup_r+0x3c>
 80042a8:	686c      	ldr	r4, [r5, #4]
 80042aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	0715      	lsls	r5, r2, #28
 80042b2:	d42c      	bmi.n	800430e <__swsetup_r+0x82>
 80042b4:	06d0      	lsls	r0, r2, #27
 80042b6:	d411      	bmi.n	80042dc <__swsetup_r+0x50>
 80042b8:	2209      	movs	r2, #9
 80042ba:	6032      	str	r2, [r6, #0]
 80042bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042c0:	81a3      	strh	r3, [r4, #12]
 80042c2:	f04f 30ff 	mov.w	r0, #4294967295
 80042c6:	bd70      	pop	{r4, r5, r6, pc}
 80042c8:	4b25      	ldr	r3, [pc, #148]	; (8004360 <__swsetup_r+0xd4>)
 80042ca:	429c      	cmp	r4, r3
 80042cc:	d101      	bne.n	80042d2 <__swsetup_r+0x46>
 80042ce:	68ac      	ldr	r4, [r5, #8]
 80042d0:	e7eb      	b.n	80042aa <__swsetup_r+0x1e>
 80042d2:	4b24      	ldr	r3, [pc, #144]	; (8004364 <__swsetup_r+0xd8>)
 80042d4:	429c      	cmp	r4, r3
 80042d6:	bf08      	it	eq
 80042d8:	68ec      	ldreq	r4, [r5, #12]
 80042da:	e7e6      	b.n	80042aa <__swsetup_r+0x1e>
 80042dc:	0751      	lsls	r1, r2, #29
 80042de:	d512      	bpl.n	8004306 <__swsetup_r+0x7a>
 80042e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042e2:	b141      	cbz	r1, 80042f6 <__swsetup_r+0x6a>
 80042e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042e8:	4299      	cmp	r1, r3
 80042ea:	d002      	beq.n	80042f2 <__swsetup_r+0x66>
 80042ec:	4630      	mov	r0, r6
 80042ee:	f7ff fcab 	bl	8003c48 <_free_r>
 80042f2:	2300      	movs	r3, #0
 80042f4:	6363      	str	r3, [r4, #52]	; 0x34
 80042f6:	89a3      	ldrh	r3, [r4, #12]
 80042f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80042fc:	81a3      	strh	r3, [r4, #12]
 80042fe:	2300      	movs	r3, #0
 8004300:	6063      	str	r3, [r4, #4]
 8004302:	6923      	ldr	r3, [r4, #16]
 8004304:	6023      	str	r3, [r4, #0]
 8004306:	89a3      	ldrh	r3, [r4, #12]
 8004308:	f043 0308 	orr.w	r3, r3, #8
 800430c:	81a3      	strh	r3, [r4, #12]
 800430e:	6923      	ldr	r3, [r4, #16]
 8004310:	b94b      	cbnz	r3, 8004326 <__swsetup_r+0x9a>
 8004312:	89a3      	ldrh	r3, [r4, #12]
 8004314:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800431c:	d003      	beq.n	8004326 <__swsetup_r+0x9a>
 800431e:	4621      	mov	r1, r4
 8004320:	4630      	mov	r0, r6
 8004322:	f000 f867 	bl	80043f4 <__smakebuf_r>
 8004326:	89a2      	ldrh	r2, [r4, #12]
 8004328:	f012 0301 	ands.w	r3, r2, #1
 800432c:	d00c      	beq.n	8004348 <__swsetup_r+0xbc>
 800432e:	2300      	movs	r3, #0
 8004330:	60a3      	str	r3, [r4, #8]
 8004332:	6963      	ldr	r3, [r4, #20]
 8004334:	425b      	negs	r3, r3
 8004336:	61a3      	str	r3, [r4, #24]
 8004338:	6923      	ldr	r3, [r4, #16]
 800433a:	b953      	cbnz	r3, 8004352 <__swsetup_r+0xc6>
 800433c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004340:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004344:	d1ba      	bne.n	80042bc <__swsetup_r+0x30>
 8004346:	bd70      	pop	{r4, r5, r6, pc}
 8004348:	0792      	lsls	r2, r2, #30
 800434a:	bf58      	it	pl
 800434c:	6963      	ldrpl	r3, [r4, #20]
 800434e:	60a3      	str	r3, [r4, #8]
 8004350:	e7f2      	b.n	8004338 <__swsetup_r+0xac>
 8004352:	2000      	movs	r0, #0
 8004354:	e7f7      	b.n	8004346 <__swsetup_r+0xba>
 8004356:	bf00      	nop
 8004358:	20000018 	.word	0x20000018
 800435c:	08004b04 	.word	0x08004b04
 8004360:	08004b24 	.word	0x08004b24
 8004364:	08004ae4 	.word	0x08004ae4

08004368 <_close_r>:
 8004368:	b538      	push	{r3, r4, r5, lr}
 800436a:	4c06      	ldr	r4, [pc, #24]	; (8004384 <_close_r+0x1c>)
 800436c:	2300      	movs	r3, #0
 800436e:	4605      	mov	r5, r0
 8004370:	4608      	mov	r0, r1
 8004372:	6023      	str	r3, [r4, #0]
 8004374:	f7fe ff5c 	bl	8003230 <_close>
 8004378:	1c43      	adds	r3, r0, #1
 800437a:	d102      	bne.n	8004382 <_close_r+0x1a>
 800437c:	6823      	ldr	r3, [r4, #0]
 800437e:	b103      	cbz	r3, 8004382 <_close_r+0x1a>
 8004380:	602b      	str	r3, [r5, #0]
 8004382:	bd38      	pop	{r3, r4, r5, pc}
 8004384:	2000047c 	.word	0x2000047c

08004388 <_lseek_r>:
 8004388:	b538      	push	{r3, r4, r5, lr}
 800438a:	4c07      	ldr	r4, [pc, #28]	; (80043a8 <_lseek_r+0x20>)
 800438c:	4605      	mov	r5, r0
 800438e:	4608      	mov	r0, r1
 8004390:	4611      	mov	r1, r2
 8004392:	2200      	movs	r2, #0
 8004394:	6022      	str	r2, [r4, #0]
 8004396:	461a      	mov	r2, r3
 8004398:	f7fe ff54 	bl	8003244 <_lseek>
 800439c:	1c43      	adds	r3, r0, #1
 800439e:	d102      	bne.n	80043a6 <_lseek_r+0x1e>
 80043a0:	6823      	ldr	r3, [r4, #0]
 80043a2:	b103      	cbz	r3, 80043a6 <_lseek_r+0x1e>
 80043a4:	602b      	str	r3, [r5, #0]
 80043a6:	bd38      	pop	{r3, r4, r5, pc}
 80043a8:	2000047c 	.word	0x2000047c

080043ac <__swhatbuf_r>:
 80043ac:	b570      	push	{r4, r5, r6, lr}
 80043ae:	460e      	mov	r6, r1
 80043b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043b4:	2900      	cmp	r1, #0
 80043b6:	b090      	sub	sp, #64	; 0x40
 80043b8:	4614      	mov	r4, r2
 80043ba:	461d      	mov	r5, r3
 80043bc:	da07      	bge.n	80043ce <__swhatbuf_r+0x22>
 80043be:	2300      	movs	r3, #0
 80043c0:	602b      	str	r3, [r5, #0]
 80043c2:	89b3      	ldrh	r3, [r6, #12]
 80043c4:	061a      	lsls	r2, r3, #24
 80043c6:	d410      	bmi.n	80043ea <__swhatbuf_r+0x3e>
 80043c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043cc:	e00e      	b.n	80043ec <__swhatbuf_r+0x40>
 80043ce:	aa01      	add	r2, sp, #4
 80043d0:	f000 fb3a 	bl	8004a48 <_fstat_r>
 80043d4:	2800      	cmp	r0, #0
 80043d6:	dbf2      	blt.n	80043be <__swhatbuf_r+0x12>
 80043d8:	9a02      	ldr	r2, [sp, #8]
 80043da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80043de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80043e2:	425a      	negs	r2, r3
 80043e4:	415a      	adcs	r2, r3
 80043e6:	602a      	str	r2, [r5, #0]
 80043e8:	e7ee      	b.n	80043c8 <__swhatbuf_r+0x1c>
 80043ea:	2340      	movs	r3, #64	; 0x40
 80043ec:	2000      	movs	r0, #0
 80043ee:	6023      	str	r3, [r4, #0]
 80043f0:	b010      	add	sp, #64	; 0x40
 80043f2:	bd70      	pop	{r4, r5, r6, pc}

080043f4 <__smakebuf_r>:
 80043f4:	898b      	ldrh	r3, [r1, #12]
 80043f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80043f8:	079d      	lsls	r5, r3, #30
 80043fa:	4606      	mov	r6, r0
 80043fc:	460c      	mov	r4, r1
 80043fe:	d507      	bpl.n	8004410 <__smakebuf_r+0x1c>
 8004400:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004404:	6023      	str	r3, [r4, #0]
 8004406:	6123      	str	r3, [r4, #16]
 8004408:	2301      	movs	r3, #1
 800440a:	6163      	str	r3, [r4, #20]
 800440c:	b002      	add	sp, #8
 800440e:	bd70      	pop	{r4, r5, r6, pc}
 8004410:	ab01      	add	r3, sp, #4
 8004412:	466a      	mov	r2, sp
 8004414:	f7ff ffca 	bl	80043ac <__swhatbuf_r>
 8004418:	9900      	ldr	r1, [sp, #0]
 800441a:	4605      	mov	r5, r0
 800441c:	4630      	mov	r0, r6
 800441e:	f7ff fc61 	bl	8003ce4 <_malloc_r>
 8004422:	b948      	cbnz	r0, 8004438 <__smakebuf_r+0x44>
 8004424:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004428:	059a      	lsls	r2, r3, #22
 800442a:	d4ef      	bmi.n	800440c <__smakebuf_r+0x18>
 800442c:	f023 0303 	bic.w	r3, r3, #3
 8004430:	f043 0302 	orr.w	r3, r3, #2
 8004434:	81a3      	strh	r3, [r4, #12]
 8004436:	e7e3      	b.n	8004400 <__smakebuf_r+0xc>
 8004438:	4b0d      	ldr	r3, [pc, #52]	; (8004470 <__smakebuf_r+0x7c>)
 800443a:	62b3      	str	r3, [r6, #40]	; 0x28
 800443c:	89a3      	ldrh	r3, [r4, #12]
 800443e:	6020      	str	r0, [r4, #0]
 8004440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004444:	81a3      	strh	r3, [r4, #12]
 8004446:	9b00      	ldr	r3, [sp, #0]
 8004448:	6163      	str	r3, [r4, #20]
 800444a:	9b01      	ldr	r3, [sp, #4]
 800444c:	6120      	str	r0, [r4, #16]
 800444e:	b15b      	cbz	r3, 8004468 <__smakebuf_r+0x74>
 8004450:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004454:	4630      	mov	r0, r6
 8004456:	f000 fb09 	bl	8004a6c <_isatty_r>
 800445a:	b128      	cbz	r0, 8004468 <__smakebuf_r+0x74>
 800445c:	89a3      	ldrh	r3, [r4, #12]
 800445e:	f023 0303 	bic.w	r3, r3, #3
 8004462:	f043 0301 	orr.w	r3, r3, #1
 8004466:	81a3      	strh	r3, [r4, #12]
 8004468:	89a3      	ldrh	r3, [r4, #12]
 800446a:	431d      	orrs	r5, r3
 800446c:	81a5      	strh	r5, [r4, #12]
 800446e:	e7cd      	b.n	800440c <__smakebuf_r+0x18>
 8004470:	080039fd 	.word	0x080039fd

08004474 <__malloc_lock>:
 8004474:	4770      	bx	lr

08004476 <__malloc_unlock>:
 8004476:	4770      	bx	lr

08004478 <__sfputc_r>:
 8004478:	6893      	ldr	r3, [r2, #8]
 800447a:	3b01      	subs	r3, #1
 800447c:	2b00      	cmp	r3, #0
 800447e:	b410      	push	{r4}
 8004480:	6093      	str	r3, [r2, #8]
 8004482:	da09      	bge.n	8004498 <__sfputc_r+0x20>
 8004484:	6994      	ldr	r4, [r2, #24]
 8004486:	42a3      	cmp	r3, r4
 8004488:	db02      	blt.n	8004490 <__sfputc_r+0x18>
 800448a:	b2cb      	uxtb	r3, r1
 800448c:	2b0a      	cmp	r3, #10
 800448e:	d103      	bne.n	8004498 <__sfputc_r+0x20>
 8004490:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004494:	f7ff be96 	b.w	80041c4 <__swbuf_r>
 8004498:	6813      	ldr	r3, [r2, #0]
 800449a:	1c58      	adds	r0, r3, #1
 800449c:	6010      	str	r0, [r2, #0]
 800449e:	7019      	strb	r1, [r3, #0]
 80044a0:	b2c8      	uxtb	r0, r1
 80044a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <__sfputs_r>:
 80044a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044aa:	4606      	mov	r6, r0
 80044ac:	460f      	mov	r7, r1
 80044ae:	4614      	mov	r4, r2
 80044b0:	18d5      	adds	r5, r2, r3
 80044b2:	42ac      	cmp	r4, r5
 80044b4:	d101      	bne.n	80044ba <__sfputs_r+0x12>
 80044b6:	2000      	movs	r0, #0
 80044b8:	e007      	b.n	80044ca <__sfputs_r+0x22>
 80044ba:	463a      	mov	r2, r7
 80044bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044c0:	4630      	mov	r0, r6
 80044c2:	f7ff ffd9 	bl	8004478 <__sfputc_r>
 80044c6:	1c43      	adds	r3, r0, #1
 80044c8:	d1f3      	bne.n	80044b2 <__sfputs_r+0xa>
 80044ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080044cc <_vfiprintf_r>:
 80044cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044d0:	b09d      	sub	sp, #116	; 0x74
 80044d2:	460c      	mov	r4, r1
 80044d4:	4617      	mov	r7, r2
 80044d6:	9303      	str	r3, [sp, #12]
 80044d8:	4606      	mov	r6, r0
 80044da:	b118      	cbz	r0, 80044e4 <_vfiprintf_r+0x18>
 80044dc:	6983      	ldr	r3, [r0, #24]
 80044de:	b90b      	cbnz	r3, 80044e4 <_vfiprintf_r+0x18>
 80044e0:	f7ff facc 	bl	8003a7c <__sinit>
 80044e4:	4b7c      	ldr	r3, [pc, #496]	; (80046d8 <_vfiprintf_r+0x20c>)
 80044e6:	429c      	cmp	r4, r3
 80044e8:	d157      	bne.n	800459a <_vfiprintf_r+0xce>
 80044ea:	6874      	ldr	r4, [r6, #4]
 80044ec:	89a3      	ldrh	r3, [r4, #12]
 80044ee:	0718      	lsls	r0, r3, #28
 80044f0:	d55d      	bpl.n	80045ae <_vfiprintf_r+0xe2>
 80044f2:	6923      	ldr	r3, [r4, #16]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d05a      	beq.n	80045ae <_vfiprintf_r+0xe2>
 80044f8:	2300      	movs	r3, #0
 80044fa:	9309      	str	r3, [sp, #36]	; 0x24
 80044fc:	2320      	movs	r3, #32
 80044fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004502:	2330      	movs	r3, #48	; 0x30
 8004504:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004508:	f04f 0b01 	mov.w	fp, #1
 800450c:	46b8      	mov	r8, r7
 800450e:	4645      	mov	r5, r8
 8004510:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004514:	2b00      	cmp	r3, #0
 8004516:	d155      	bne.n	80045c4 <_vfiprintf_r+0xf8>
 8004518:	ebb8 0a07 	subs.w	sl, r8, r7
 800451c:	d00b      	beq.n	8004536 <_vfiprintf_r+0x6a>
 800451e:	4653      	mov	r3, sl
 8004520:	463a      	mov	r2, r7
 8004522:	4621      	mov	r1, r4
 8004524:	4630      	mov	r0, r6
 8004526:	f7ff ffbf 	bl	80044a8 <__sfputs_r>
 800452a:	3001      	adds	r0, #1
 800452c:	f000 80c4 	beq.w	80046b8 <_vfiprintf_r+0x1ec>
 8004530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004532:	4453      	add	r3, sl
 8004534:	9309      	str	r3, [sp, #36]	; 0x24
 8004536:	f898 3000 	ldrb.w	r3, [r8]
 800453a:	2b00      	cmp	r3, #0
 800453c:	f000 80bc 	beq.w	80046b8 <_vfiprintf_r+0x1ec>
 8004540:	2300      	movs	r3, #0
 8004542:	f04f 32ff 	mov.w	r2, #4294967295
 8004546:	9304      	str	r3, [sp, #16]
 8004548:	9307      	str	r3, [sp, #28]
 800454a:	9205      	str	r2, [sp, #20]
 800454c:	9306      	str	r3, [sp, #24]
 800454e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004552:	931a      	str	r3, [sp, #104]	; 0x68
 8004554:	2205      	movs	r2, #5
 8004556:	7829      	ldrb	r1, [r5, #0]
 8004558:	4860      	ldr	r0, [pc, #384]	; (80046dc <_vfiprintf_r+0x210>)
 800455a:	f7fb fe41 	bl	80001e0 <memchr>
 800455e:	f105 0801 	add.w	r8, r5, #1
 8004562:	9b04      	ldr	r3, [sp, #16]
 8004564:	2800      	cmp	r0, #0
 8004566:	d131      	bne.n	80045cc <_vfiprintf_r+0x100>
 8004568:	06d9      	lsls	r1, r3, #27
 800456a:	bf44      	itt	mi
 800456c:	2220      	movmi	r2, #32
 800456e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004572:	071a      	lsls	r2, r3, #28
 8004574:	bf44      	itt	mi
 8004576:	222b      	movmi	r2, #43	; 0x2b
 8004578:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800457c:	782a      	ldrb	r2, [r5, #0]
 800457e:	2a2a      	cmp	r2, #42	; 0x2a
 8004580:	d02c      	beq.n	80045dc <_vfiprintf_r+0x110>
 8004582:	9a07      	ldr	r2, [sp, #28]
 8004584:	2100      	movs	r1, #0
 8004586:	200a      	movs	r0, #10
 8004588:	46a8      	mov	r8, r5
 800458a:	3501      	adds	r5, #1
 800458c:	f898 3000 	ldrb.w	r3, [r8]
 8004590:	3b30      	subs	r3, #48	; 0x30
 8004592:	2b09      	cmp	r3, #9
 8004594:	d96d      	bls.n	8004672 <_vfiprintf_r+0x1a6>
 8004596:	b371      	cbz	r1, 80045f6 <_vfiprintf_r+0x12a>
 8004598:	e026      	b.n	80045e8 <_vfiprintf_r+0x11c>
 800459a:	4b51      	ldr	r3, [pc, #324]	; (80046e0 <_vfiprintf_r+0x214>)
 800459c:	429c      	cmp	r4, r3
 800459e:	d101      	bne.n	80045a4 <_vfiprintf_r+0xd8>
 80045a0:	68b4      	ldr	r4, [r6, #8]
 80045a2:	e7a3      	b.n	80044ec <_vfiprintf_r+0x20>
 80045a4:	4b4f      	ldr	r3, [pc, #316]	; (80046e4 <_vfiprintf_r+0x218>)
 80045a6:	429c      	cmp	r4, r3
 80045a8:	bf08      	it	eq
 80045aa:	68f4      	ldreq	r4, [r6, #12]
 80045ac:	e79e      	b.n	80044ec <_vfiprintf_r+0x20>
 80045ae:	4621      	mov	r1, r4
 80045b0:	4630      	mov	r0, r6
 80045b2:	f7ff fe6b 	bl	800428c <__swsetup_r>
 80045b6:	2800      	cmp	r0, #0
 80045b8:	d09e      	beq.n	80044f8 <_vfiprintf_r+0x2c>
 80045ba:	f04f 30ff 	mov.w	r0, #4294967295
 80045be:	b01d      	add	sp, #116	; 0x74
 80045c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045c4:	2b25      	cmp	r3, #37	; 0x25
 80045c6:	d0a7      	beq.n	8004518 <_vfiprintf_r+0x4c>
 80045c8:	46a8      	mov	r8, r5
 80045ca:	e7a0      	b.n	800450e <_vfiprintf_r+0x42>
 80045cc:	4a43      	ldr	r2, [pc, #268]	; (80046dc <_vfiprintf_r+0x210>)
 80045ce:	1a80      	subs	r0, r0, r2
 80045d0:	fa0b f000 	lsl.w	r0, fp, r0
 80045d4:	4318      	orrs	r0, r3
 80045d6:	9004      	str	r0, [sp, #16]
 80045d8:	4645      	mov	r5, r8
 80045da:	e7bb      	b.n	8004554 <_vfiprintf_r+0x88>
 80045dc:	9a03      	ldr	r2, [sp, #12]
 80045de:	1d11      	adds	r1, r2, #4
 80045e0:	6812      	ldr	r2, [r2, #0]
 80045e2:	9103      	str	r1, [sp, #12]
 80045e4:	2a00      	cmp	r2, #0
 80045e6:	db01      	blt.n	80045ec <_vfiprintf_r+0x120>
 80045e8:	9207      	str	r2, [sp, #28]
 80045ea:	e004      	b.n	80045f6 <_vfiprintf_r+0x12a>
 80045ec:	4252      	negs	r2, r2
 80045ee:	f043 0302 	orr.w	r3, r3, #2
 80045f2:	9207      	str	r2, [sp, #28]
 80045f4:	9304      	str	r3, [sp, #16]
 80045f6:	f898 3000 	ldrb.w	r3, [r8]
 80045fa:	2b2e      	cmp	r3, #46	; 0x2e
 80045fc:	d110      	bne.n	8004620 <_vfiprintf_r+0x154>
 80045fe:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004602:	2b2a      	cmp	r3, #42	; 0x2a
 8004604:	f108 0101 	add.w	r1, r8, #1
 8004608:	d137      	bne.n	800467a <_vfiprintf_r+0x1ae>
 800460a:	9b03      	ldr	r3, [sp, #12]
 800460c:	1d1a      	adds	r2, r3, #4
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	9203      	str	r2, [sp, #12]
 8004612:	2b00      	cmp	r3, #0
 8004614:	bfb8      	it	lt
 8004616:	f04f 33ff 	movlt.w	r3, #4294967295
 800461a:	f108 0802 	add.w	r8, r8, #2
 800461e:	9305      	str	r3, [sp, #20]
 8004620:	4d31      	ldr	r5, [pc, #196]	; (80046e8 <_vfiprintf_r+0x21c>)
 8004622:	f898 1000 	ldrb.w	r1, [r8]
 8004626:	2203      	movs	r2, #3
 8004628:	4628      	mov	r0, r5
 800462a:	f7fb fdd9 	bl	80001e0 <memchr>
 800462e:	b140      	cbz	r0, 8004642 <_vfiprintf_r+0x176>
 8004630:	2340      	movs	r3, #64	; 0x40
 8004632:	1b40      	subs	r0, r0, r5
 8004634:	fa03 f000 	lsl.w	r0, r3, r0
 8004638:	9b04      	ldr	r3, [sp, #16]
 800463a:	4303      	orrs	r3, r0
 800463c:	9304      	str	r3, [sp, #16]
 800463e:	f108 0801 	add.w	r8, r8, #1
 8004642:	f898 1000 	ldrb.w	r1, [r8]
 8004646:	4829      	ldr	r0, [pc, #164]	; (80046ec <_vfiprintf_r+0x220>)
 8004648:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800464c:	2206      	movs	r2, #6
 800464e:	f108 0701 	add.w	r7, r8, #1
 8004652:	f7fb fdc5 	bl	80001e0 <memchr>
 8004656:	2800      	cmp	r0, #0
 8004658:	d034      	beq.n	80046c4 <_vfiprintf_r+0x1f8>
 800465a:	4b25      	ldr	r3, [pc, #148]	; (80046f0 <_vfiprintf_r+0x224>)
 800465c:	bb03      	cbnz	r3, 80046a0 <_vfiprintf_r+0x1d4>
 800465e:	9b03      	ldr	r3, [sp, #12]
 8004660:	3307      	adds	r3, #7
 8004662:	f023 0307 	bic.w	r3, r3, #7
 8004666:	3308      	adds	r3, #8
 8004668:	9303      	str	r3, [sp, #12]
 800466a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800466c:	444b      	add	r3, r9
 800466e:	9309      	str	r3, [sp, #36]	; 0x24
 8004670:	e74c      	b.n	800450c <_vfiprintf_r+0x40>
 8004672:	fb00 3202 	mla	r2, r0, r2, r3
 8004676:	2101      	movs	r1, #1
 8004678:	e786      	b.n	8004588 <_vfiprintf_r+0xbc>
 800467a:	2300      	movs	r3, #0
 800467c:	9305      	str	r3, [sp, #20]
 800467e:	4618      	mov	r0, r3
 8004680:	250a      	movs	r5, #10
 8004682:	4688      	mov	r8, r1
 8004684:	3101      	adds	r1, #1
 8004686:	f898 2000 	ldrb.w	r2, [r8]
 800468a:	3a30      	subs	r2, #48	; 0x30
 800468c:	2a09      	cmp	r2, #9
 800468e:	d903      	bls.n	8004698 <_vfiprintf_r+0x1cc>
 8004690:	2b00      	cmp	r3, #0
 8004692:	d0c5      	beq.n	8004620 <_vfiprintf_r+0x154>
 8004694:	9005      	str	r0, [sp, #20]
 8004696:	e7c3      	b.n	8004620 <_vfiprintf_r+0x154>
 8004698:	fb05 2000 	mla	r0, r5, r0, r2
 800469c:	2301      	movs	r3, #1
 800469e:	e7f0      	b.n	8004682 <_vfiprintf_r+0x1b6>
 80046a0:	ab03      	add	r3, sp, #12
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	4622      	mov	r2, r4
 80046a6:	4b13      	ldr	r3, [pc, #76]	; (80046f4 <_vfiprintf_r+0x228>)
 80046a8:	a904      	add	r1, sp, #16
 80046aa:	4630      	mov	r0, r6
 80046ac:	f3af 8000 	nop.w
 80046b0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80046b4:	4681      	mov	r9, r0
 80046b6:	d1d8      	bne.n	800466a <_vfiprintf_r+0x19e>
 80046b8:	89a3      	ldrh	r3, [r4, #12]
 80046ba:	065b      	lsls	r3, r3, #25
 80046bc:	f53f af7d 	bmi.w	80045ba <_vfiprintf_r+0xee>
 80046c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046c2:	e77c      	b.n	80045be <_vfiprintf_r+0xf2>
 80046c4:	ab03      	add	r3, sp, #12
 80046c6:	9300      	str	r3, [sp, #0]
 80046c8:	4622      	mov	r2, r4
 80046ca:	4b0a      	ldr	r3, [pc, #40]	; (80046f4 <_vfiprintf_r+0x228>)
 80046cc:	a904      	add	r1, sp, #16
 80046ce:	4630      	mov	r0, r6
 80046d0:	f000 f888 	bl	80047e4 <_printf_i>
 80046d4:	e7ec      	b.n	80046b0 <_vfiprintf_r+0x1e4>
 80046d6:	bf00      	nop
 80046d8:	08004b04 	.word	0x08004b04
 80046dc:	08004b48 	.word	0x08004b48
 80046e0:	08004b24 	.word	0x08004b24
 80046e4:	08004ae4 	.word	0x08004ae4
 80046e8:	08004b4e 	.word	0x08004b4e
 80046ec:	08004b52 	.word	0x08004b52
 80046f0:	00000000 	.word	0x00000000
 80046f4:	080044a9 	.word	0x080044a9

080046f8 <_printf_common>:
 80046f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046fc:	4691      	mov	r9, r2
 80046fe:	461f      	mov	r7, r3
 8004700:	688a      	ldr	r2, [r1, #8]
 8004702:	690b      	ldr	r3, [r1, #16]
 8004704:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004708:	4293      	cmp	r3, r2
 800470a:	bfb8      	it	lt
 800470c:	4613      	movlt	r3, r2
 800470e:	f8c9 3000 	str.w	r3, [r9]
 8004712:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004716:	4606      	mov	r6, r0
 8004718:	460c      	mov	r4, r1
 800471a:	b112      	cbz	r2, 8004722 <_printf_common+0x2a>
 800471c:	3301      	adds	r3, #1
 800471e:	f8c9 3000 	str.w	r3, [r9]
 8004722:	6823      	ldr	r3, [r4, #0]
 8004724:	0699      	lsls	r1, r3, #26
 8004726:	bf42      	ittt	mi
 8004728:	f8d9 3000 	ldrmi.w	r3, [r9]
 800472c:	3302      	addmi	r3, #2
 800472e:	f8c9 3000 	strmi.w	r3, [r9]
 8004732:	6825      	ldr	r5, [r4, #0]
 8004734:	f015 0506 	ands.w	r5, r5, #6
 8004738:	d107      	bne.n	800474a <_printf_common+0x52>
 800473a:	f104 0a19 	add.w	sl, r4, #25
 800473e:	68e3      	ldr	r3, [r4, #12]
 8004740:	f8d9 2000 	ldr.w	r2, [r9]
 8004744:	1a9b      	subs	r3, r3, r2
 8004746:	429d      	cmp	r5, r3
 8004748:	db29      	blt.n	800479e <_printf_common+0xa6>
 800474a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800474e:	6822      	ldr	r2, [r4, #0]
 8004750:	3300      	adds	r3, #0
 8004752:	bf18      	it	ne
 8004754:	2301      	movne	r3, #1
 8004756:	0692      	lsls	r2, r2, #26
 8004758:	d42e      	bmi.n	80047b8 <_printf_common+0xc0>
 800475a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800475e:	4639      	mov	r1, r7
 8004760:	4630      	mov	r0, r6
 8004762:	47c0      	blx	r8
 8004764:	3001      	adds	r0, #1
 8004766:	d021      	beq.n	80047ac <_printf_common+0xb4>
 8004768:	6823      	ldr	r3, [r4, #0]
 800476a:	68e5      	ldr	r5, [r4, #12]
 800476c:	f8d9 2000 	ldr.w	r2, [r9]
 8004770:	f003 0306 	and.w	r3, r3, #6
 8004774:	2b04      	cmp	r3, #4
 8004776:	bf08      	it	eq
 8004778:	1aad      	subeq	r5, r5, r2
 800477a:	68a3      	ldr	r3, [r4, #8]
 800477c:	6922      	ldr	r2, [r4, #16]
 800477e:	bf0c      	ite	eq
 8004780:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004784:	2500      	movne	r5, #0
 8004786:	4293      	cmp	r3, r2
 8004788:	bfc4      	itt	gt
 800478a:	1a9b      	subgt	r3, r3, r2
 800478c:	18ed      	addgt	r5, r5, r3
 800478e:	f04f 0900 	mov.w	r9, #0
 8004792:	341a      	adds	r4, #26
 8004794:	454d      	cmp	r5, r9
 8004796:	d11b      	bne.n	80047d0 <_printf_common+0xd8>
 8004798:	2000      	movs	r0, #0
 800479a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800479e:	2301      	movs	r3, #1
 80047a0:	4652      	mov	r2, sl
 80047a2:	4639      	mov	r1, r7
 80047a4:	4630      	mov	r0, r6
 80047a6:	47c0      	blx	r8
 80047a8:	3001      	adds	r0, #1
 80047aa:	d103      	bne.n	80047b4 <_printf_common+0xbc>
 80047ac:	f04f 30ff 	mov.w	r0, #4294967295
 80047b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047b4:	3501      	adds	r5, #1
 80047b6:	e7c2      	b.n	800473e <_printf_common+0x46>
 80047b8:	18e1      	adds	r1, r4, r3
 80047ba:	1c5a      	adds	r2, r3, #1
 80047bc:	2030      	movs	r0, #48	; 0x30
 80047be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047c2:	4422      	add	r2, r4
 80047c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047cc:	3302      	adds	r3, #2
 80047ce:	e7c4      	b.n	800475a <_printf_common+0x62>
 80047d0:	2301      	movs	r3, #1
 80047d2:	4622      	mov	r2, r4
 80047d4:	4639      	mov	r1, r7
 80047d6:	4630      	mov	r0, r6
 80047d8:	47c0      	blx	r8
 80047da:	3001      	adds	r0, #1
 80047dc:	d0e6      	beq.n	80047ac <_printf_common+0xb4>
 80047de:	f109 0901 	add.w	r9, r9, #1
 80047e2:	e7d7      	b.n	8004794 <_printf_common+0x9c>

080047e4 <_printf_i>:
 80047e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80047e8:	4617      	mov	r7, r2
 80047ea:	7e0a      	ldrb	r2, [r1, #24]
 80047ec:	b085      	sub	sp, #20
 80047ee:	2a6e      	cmp	r2, #110	; 0x6e
 80047f0:	4698      	mov	r8, r3
 80047f2:	4606      	mov	r6, r0
 80047f4:	460c      	mov	r4, r1
 80047f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80047f8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80047fc:	f000 80bc 	beq.w	8004978 <_printf_i+0x194>
 8004800:	d81a      	bhi.n	8004838 <_printf_i+0x54>
 8004802:	2a63      	cmp	r2, #99	; 0x63
 8004804:	d02e      	beq.n	8004864 <_printf_i+0x80>
 8004806:	d80a      	bhi.n	800481e <_printf_i+0x3a>
 8004808:	2a00      	cmp	r2, #0
 800480a:	f000 80c8 	beq.w	800499e <_printf_i+0x1ba>
 800480e:	2a58      	cmp	r2, #88	; 0x58
 8004810:	f000 808a 	beq.w	8004928 <_printf_i+0x144>
 8004814:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004818:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800481c:	e02a      	b.n	8004874 <_printf_i+0x90>
 800481e:	2a64      	cmp	r2, #100	; 0x64
 8004820:	d001      	beq.n	8004826 <_printf_i+0x42>
 8004822:	2a69      	cmp	r2, #105	; 0x69
 8004824:	d1f6      	bne.n	8004814 <_printf_i+0x30>
 8004826:	6821      	ldr	r1, [r4, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800482e:	d023      	beq.n	8004878 <_printf_i+0x94>
 8004830:	1d11      	adds	r1, r2, #4
 8004832:	6019      	str	r1, [r3, #0]
 8004834:	6813      	ldr	r3, [r2, #0]
 8004836:	e027      	b.n	8004888 <_printf_i+0xa4>
 8004838:	2a73      	cmp	r2, #115	; 0x73
 800483a:	f000 80b4 	beq.w	80049a6 <_printf_i+0x1c2>
 800483e:	d808      	bhi.n	8004852 <_printf_i+0x6e>
 8004840:	2a6f      	cmp	r2, #111	; 0x6f
 8004842:	d02a      	beq.n	800489a <_printf_i+0xb6>
 8004844:	2a70      	cmp	r2, #112	; 0x70
 8004846:	d1e5      	bne.n	8004814 <_printf_i+0x30>
 8004848:	680a      	ldr	r2, [r1, #0]
 800484a:	f042 0220 	orr.w	r2, r2, #32
 800484e:	600a      	str	r2, [r1, #0]
 8004850:	e003      	b.n	800485a <_printf_i+0x76>
 8004852:	2a75      	cmp	r2, #117	; 0x75
 8004854:	d021      	beq.n	800489a <_printf_i+0xb6>
 8004856:	2a78      	cmp	r2, #120	; 0x78
 8004858:	d1dc      	bne.n	8004814 <_printf_i+0x30>
 800485a:	2278      	movs	r2, #120	; 0x78
 800485c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004860:	496e      	ldr	r1, [pc, #440]	; (8004a1c <_printf_i+0x238>)
 8004862:	e064      	b.n	800492e <_printf_i+0x14a>
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800486a:	1d11      	adds	r1, r2, #4
 800486c:	6019      	str	r1, [r3, #0]
 800486e:	6813      	ldr	r3, [r2, #0]
 8004870:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004874:	2301      	movs	r3, #1
 8004876:	e0a3      	b.n	80049c0 <_printf_i+0x1dc>
 8004878:	f011 0f40 	tst.w	r1, #64	; 0x40
 800487c:	f102 0104 	add.w	r1, r2, #4
 8004880:	6019      	str	r1, [r3, #0]
 8004882:	d0d7      	beq.n	8004834 <_printf_i+0x50>
 8004884:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004888:	2b00      	cmp	r3, #0
 800488a:	da03      	bge.n	8004894 <_printf_i+0xb0>
 800488c:	222d      	movs	r2, #45	; 0x2d
 800488e:	425b      	negs	r3, r3
 8004890:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004894:	4962      	ldr	r1, [pc, #392]	; (8004a20 <_printf_i+0x23c>)
 8004896:	220a      	movs	r2, #10
 8004898:	e017      	b.n	80048ca <_printf_i+0xe6>
 800489a:	6820      	ldr	r0, [r4, #0]
 800489c:	6819      	ldr	r1, [r3, #0]
 800489e:	f010 0f80 	tst.w	r0, #128	; 0x80
 80048a2:	d003      	beq.n	80048ac <_printf_i+0xc8>
 80048a4:	1d08      	adds	r0, r1, #4
 80048a6:	6018      	str	r0, [r3, #0]
 80048a8:	680b      	ldr	r3, [r1, #0]
 80048aa:	e006      	b.n	80048ba <_printf_i+0xd6>
 80048ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 80048b0:	f101 0004 	add.w	r0, r1, #4
 80048b4:	6018      	str	r0, [r3, #0]
 80048b6:	d0f7      	beq.n	80048a8 <_printf_i+0xc4>
 80048b8:	880b      	ldrh	r3, [r1, #0]
 80048ba:	4959      	ldr	r1, [pc, #356]	; (8004a20 <_printf_i+0x23c>)
 80048bc:	2a6f      	cmp	r2, #111	; 0x6f
 80048be:	bf14      	ite	ne
 80048c0:	220a      	movne	r2, #10
 80048c2:	2208      	moveq	r2, #8
 80048c4:	2000      	movs	r0, #0
 80048c6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80048ca:	6865      	ldr	r5, [r4, #4]
 80048cc:	60a5      	str	r5, [r4, #8]
 80048ce:	2d00      	cmp	r5, #0
 80048d0:	f2c0 809c 	blt.w	8004a0c <_printf_i+0x228>
 80048d4:	6820      	ldr	r0, [r4, #0]
 80048d6:	f020 0004 	bic.w	r0, r0, #4
 80048da:	6020      	str	r0, [r4, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d13f      	bne.n	8004960 <_printf_i+0x17c>
 80048e0:	2d00      	cmp	r5, #0
 80048e2:	f040 8095 	bne.w	8004a10 <_printf_i+0x22c>
 80048e6:	4675      	mov	r5, lr
 80048e8:	2a08      	cmp	r2, #8
 80048ea:	d10b      	bne.n	8004904 <_printf_i+0x120>
 80048ec:	6823      	ldr	r3, [r4, #0]
 80048ee:	07da      	lsls	r2, r3, #31
 80048f0:	d508      	bpl.n	8004904 <_printf_i+0x120>
 80048f2:	6923      	ldr	r3, [r4, #16]
 80048f4:	6862      	ldr	r2, [r4, #4]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	bfde      	ittt	le
 80048fa:	2330      	movle	r3, #48	; 0x30
 80048fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004900:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004904:	ebae 0305 	sub.w	r3, lr, r5
 8004908:	6123      	str	r3, [r4, #16]
 800490a:	f8cd 8000 	str.w	r8, [sp]
 800490e:	463b      	mov	r3, r7
 8004910:	aa03      	add	r2, sp, #12
 8004912:	4621      	mov	r1, r4
 8004914:	4630      	mov	r0, r6
 8004916:	f7ff feef 	bl	80046f8 <_printf_common>
 800491a:	3001      	adds	r0, #1
 800491c:	d155      	bne.n	80049ca <_printf_i+0x1e6>
 800491e:	f04f 30ff 	mov.w	r0, #4294967295
 8004922:	b005      	add	sp, #20
 8004924:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004928:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800492c:	493c      	ldr	r1, [pc, #240]	; (8004a20 <_printf_i+0x23c>)
 800492e:	6822      	ldr	r2, [r4, #0]
 8004930:	6818      	ldr	r0, [r3, #0]
 8004932:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004936:	f100 0504 	add.w	r5, r0, #4
 800493a:	601d      	str	r5, [r3, #0]
 800493c:	d001      	beq.n	8004942 <_printf_i+0x15e>
 800493e:	6803      	ldr	r3, [r0, #0]
 8004940:	e002      	b.n	8004948 <_printf_i+0x164>
 8004942:	0655      	lsls	r5, r2, #25
 8004944:	d5fb      	bpl.n	800493e <_printf_i+0x15a>
 8004946:	8803      	ldrh	r3, [r0, #0]
 8004948:	07d0      	lsls	r0, r2, #31
 800494a:	bf44      	itt	mi
 800494c:	f042 0220 	orrmi.w	r2, r2, #32
 8004950:	6022      	strmi	r2, [r4, #0]
 8004952:	b91b      	cbnz	r3, 800495c <_printf_i+0x178>
 8004954:	6822      	ldr	r2, [r4, #0]
 8004956:	f022 0220 	bic.w	r2, r2, #32
 800495a:	6022      	str	r2, [r4, #0]
 800495c:	2210      	movs	r2, #16
 800495e:	e7b1      	b.n	80048c4 <_printf_i+0xe0>
 8004960:	4675      	mov	r5, lr
 8004962:	fbb3 f0f2 	udiv	r0, r3, r2
 8004966:	fb02 3310 	mls	r3, r2, r0, r3
 800496a:	5ccb      	ldrb	r3, [r1, r3]
 800496c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004970:	4603      	mov	r3, r0
 8004972:	2800      	cmp	r0, #0
 8004974:	d1f5      	bne.n	8004962 <_printf_i+0x17e>
 8004976:	e7b7      	b.n	80048e8 <_printf_i+0x104>
 8004978:	6808      	ldr	r0, [r1, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	6949      	ldr	r1, [r1, #20]
 800497e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004982:	d004      	beq.n	800498e <_printf_i+0x1aa>
 8004984:	1d10      	adds	r0, r2, #4
 8004986:	6018      	str	r0, [r3, #0]
 8004988:	6813      	ldr	r3, [r2, #0]
 800498a:	6019      	str	r1, [r3, #0]
 800498c:	e007      	b.n	800499e <_printf_i+0x1ba>
 800498e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004992:	f102 0004 	add.w	r0, r2, #4
 8004996:	6018      	str	r0, [r3, #0]
 8004998:	6813      	ldr	r3, [r2, #0]
 800499a:	d0f6      	beq.n	800498a <_printf_i+0x1a6>
 800499c:	8019      	strh	r1, [r3, #0]
 800499e:	2300      	movs	r3, #0
 80049a0:	6123      	str	r3, [r4, #16]
 80049a2:	4675      	mov	r5, lr
 80049a4:	e7b1      	b.n	800490a <_printf_i+0x126>
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	1d11      	adds	r1, r2, #4
 80049aa:	6019      	str	r1, [r3, #0]
 80049ac:	6815      	ldr	r5, [r2, #0]
 80049ae:	6862      	ldr	r2, [r4, #4]
 80049b0:	2100      	movs	r1, #0
 80049b2:	4628      	mov	r0, r5
 80049b4:	f7fb fc14 	bl	80001e0 <memchr>
 80049b8:	b108      	cbz	r0, 80049be <_printf_i+0x1da>
 80049ba:	1b40      	subs	r0, r0, r5
 80049bc:	6060      	str	r0, [r4, #4]
 80049be:	6863      	ldr	r3, [r4, #4]
 80049c0:	6123      	str	r3, [r4, #16]
 80049c2:	2300      	movs	r3, #0
 80049c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049c8:	e79f      	b.n	800490a <_printf_i+0x126>
 80049ca:	6923      	ldr	r3, [r4, #16]
 80049cc:	462a      	mov	r2, r5
 80049ce:	4639      	mov	r1, r7
 80049d0:	4630      	mov	r0, r6
 80049d2:	47c0      	blx	r8
 80049d4:	3001      	adds	r0, #1
 80049d6:	d0a2      	beq.n	800491e <_printf_i+0x13a>
 80049d8:	6823      	ldr	r3, [r4, #0]
 80049da:	079b      	lsls	r3, r3, #30
 80049dc:	d507      	bpl.n	80049ee <_printf_i+0x20a>
 80049de:	2500      	movs	r5, #0
 80049e0:	f104 0919 	add.w	r9, r4, #25
 80049e4:	68e3      	ldr	r3, [r4, #12]
 80049e6:	9a03      	ldr	r2, [sp, #12]
 80049e8:	1a9b      	subs	r3, r3, r2
 80049ea:	429d      	cmp	r5, r3
 80049ec:	db05      	blt.n	80049fa <_printf_i+0x216>
 80049ee:	68e0      	ldr	r0, [r4, #12]
 80049f0:	9b03      	ldr	r3, [sp, #12]
 80049f2:	4298      	cmp	r0, r3
 80049f4:	bfb8      	it	lt
 80049f6:	4618      	movlt	r0, r3
 80049f8:	e793      	b.n	8004922 <_printf_i+0x13e>
 80049fa:	2301      	movs	r3, #1
 80049fc:	464a      	mov	r2, r9
 80049fe:	4639      	mov	r1, r7
 8004a00:	4630      	mov	r0, r6
 8004a02:	47c0      	blx	r8
 8004a04:	3001      	adds	r0, #1
 8004a06:	d08a      	beq.n	800491e <_printf_i+0x13a>
 8004a08:	3501      	adds	r5, #1
 8004a0a:	e7eb      	b.n	80049e4 <_printf_i+0x200>
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1a7      	bne.n	8004960 <_printf_i+0x17c>
 8004a10:	780b      	ldrb	r3, [r1, #0]
 8004a12:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a16:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a1a:	e765      	b.n	80048e8 <_printf_i+0x104>
 8004a1c:	08004b6a 	.word	0x08004b6a
 8004a20:	08004b59 	.word	0x08004b59

08004a24 <_read_r>:
 8004a24:	b538      	push	{r3, r4, r5, lr}
 8004a26:	4c07      	ldr	r4, [pc, #28]	; (8004a44 <_read_r+0x20>)
 8004a28:	4605      	mov	r5, r0
 8004a2a:	4608      	mov	r0, r1
 8004a2c:	4611      	mov	r1, r2
 8004a2e:	2200      	movs	r2, #0
 8004a30:	6022      	str	r2, [r4, #0]
 8004a32:	461a      	mov	r2, r3
 8004a34:	f7fe fbc6 	bl	80031c4 <_read>
 8004a38:	1c43      	adds	r3, r0, #1
 8004a3a:	d102      	bne.n	8004a42 <_read_r+0x1e>
 8004a3c:	6823      	ldr	r3, [r4, #0]
 8004a3e:	b103      	cbz	r3, 8004a42 <_read_r+0x1e>
 8004a40:	602b      	str	r3, [r5, #0]
 8004a42:	bd38      	pop	{r3, r4, r5, pc}
 8004a44:	2000047c 	.word	0x2000047c

08004a48 <_fstat_r>:
 8004a48:	b538      	push	{r3, r4, r5, lr}
 8004a4a:	4c07      	ldr	r4, [pc, #28]	; (8004a68 <_fstat_r+0x20>)
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	4605      	mov	r5, r0
 8004a50:	4608      	mov	r0, r1
 8004a52:	4611      	mov	r1, r2
 8004a54:	6023      	str	r3, [r4, #0]
 8004a56:	f7fe fbee 	bl	8003236 <_fstat>
 8004a5a:	1c43      	adds	r3, r0, #1
 8004a5c:	d102      	bne.n	8004a64 <_fstat_r+0x1c>
 8004a5e:	6823      	ldr	r3, [r4, #0]
 8004a60:	b103      	cbz	r3, 8004a64 <_fstat_r+0x1c>
 8004a62:	602b      	str	r3, [r5, #0]
 8004a64:	bd38      	pop	{r3, r4, r5, pc}
 8004a66:	bf00      	nop
 8004a68:	2000047c 	.word	0x2000047c

08004a6c <_isatty_r>:
 8004a6c:	b538      	push	{r3, r4, r5, lr}
 8004a6e:	4c06      	ldr	r4, [pc, #24]	; (8004a88 <_isatty_r+0x1c>)
 8004a70:	2300      	movs	r3, #0
 8004a72:	4605      	mov	r5, r0
 8004a74:	4608      	mov	r0, r1
 8004a76:	6023      	str	r3, [r4, #0]
 8004a78:	f7fe fbe2 	bl	8003240 <_isatty>
 8004a7c:	1c43      	adds	r3, r0, #1
 8004a7e:	d102      	bne.n	8004a86 <_isatty_r+0x1a>
 8004a80:	6823      	ldr	r3, [r4, #0]
 8004a82:	b103      	cbz	r3, 8004a86 <_isatty_r+0x1a>
 8004a84:	602b      	str	r3, [r5, #0]
 8004a86:	bd38      	pop	{r3, r4, r5, pc}
 8004a88:	2000047c 	.word	0x2000047c

08004a8c <_init>:
 8004a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8e:	bf00      	nop
 8004a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a92:	bc08      	pop	{r3}
 8004a94:	469e      	mov	lr, r3
 8004a96:	4770      	bx	lr

08004a98 <_fini>:
 8004a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a9a:	bf00      	nop
 8004a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a9e:	bc08      	pop	{r3}
 8004aa0:	469e      	mov	lr, r3
 8004aa2:	4770      	bx	lr
