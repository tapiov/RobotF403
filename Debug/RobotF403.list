
RobotF403.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d3e4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cf8  0801d588  0801d588  0002d588  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801e280  0801e280  0002e280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801e288  0801e288  0002e288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801e28c  0801e28c  0002e28c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00001674  20000000  0801e290  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002324  20001678  0801f904  00031678  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  2000399c  0801f904  0003399c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00031674  2**0
                  CONTENTS, READONLY
 10 .debug_info   0008be20  00000000  00000000  000316a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000a2b3  00000000  00000000  000bd4c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00028e17  00000000  00000000  000c7777  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000035a8  00000000  00000000  000f0590  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00003fb8  00000000  00000000  000f3b38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001abcf  00000000  00000000  000f7af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00017ca8  00000000  00000000  001126bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000fb  00000000  00000000  0012a367  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000bad0  00000000  00000000  0012a464  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20001678 	.word	0x20001678
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801d56c 	.word	0x0801d56c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000167c 	.word	0x2000167c
 80001dc:	0801d56c 	.word	0x0801d56c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f092 0f00 	teq	r2, #0
 800057a:	bf14      	ite	ne
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e720      	b.n	80003d4 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aedc 	beq.w	8000382 <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6c1      	b.n	8000382 <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2uiz>:
 8000bb0:	004a      	lsls	r2, r1, #1
 8000bb2:	d211      	bcs.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bb4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb8:	d211      	bcs.n	8000bde <__aeabi_d2uiz+0x2e>
 8000bba:	d50d      	bpl.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bbc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc4:	d40e      	bmi.n	8000be4 <__aeabi_d2uiz+0x34>
 8000bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d102      	bne.n	8000bea <__aeabi_d2uiz+0x3a>
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	4770      	bx	lr
 8000bea:	f04f 0000 	mov.w	r0, #0
 8000bee:	4770      	bx	lr

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_uldivmod>:
 8000c90:	b953      	cbnz	r3, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c92:	b94a      	cbnz	r2, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c94:	2900      	cmp	r1, #0
 8000c96:	bf08      	it	eq
 8000c98:	2800      	cmpeq	r0, #0
 8000c9a:	bf1c      	itt	ne
 8000c9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca4:	f000 b97a 	b.w	8000f9c <__aeabi_idiv0>
 8000ca8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb0:	f000 f806 	bl	8000cc0 <__udivmoddi4>
 8000cb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cbc:	b004      	add	sp, #16
 8000cbe:	4770      	bx	lr

08000cc0 <__udivmoddi4>:
 8000cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cc4:	468c      	mov	ip, r1
 8000cc6:	460d      	mov	r5, r1
 8000cc8:	4604      	mov	r4, r0
 8000cca:	9e08      	ldr	r6, [sp, #32]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d151      	bne.n	8000d74 <__udivmoddi4+0xb4>
 8000cd0:	428a      	cmp	r2, r1
 8000cd2:	4617      	mov	r7, r2
 8000cd4:	d96d      	bls.n	8000db2 <__udivmoddi4+0xf2>
 8000cd6:	fab2 fe82 	clz	lr, r2
 8000cda:	f1be 0f00 	cmp.w	lr, #0
 8000cde:	d00b      	beq.n	8000cf8 <__udivmoddi4+0x38>
 8000ce0:	f1ce 0c20 	rsb	ip, lr, #32
 8000ce4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000ce8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000cec:	fa02 f70e 	lsl.w	r7, r2, lr
 8000cf0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000cf4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000cf8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000cfc:	0c25      	lsrs	r5, r4, #16
 8000cfe:	fbbc f8fa 	udiv	r8, ip, sl
 8000d02:	fa1f f987 	uxth.w	r9, r7
 8000d06:	fb0a cc18 	mls	ip, sl, r8, ip
 8000d0a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d0e:	fb08 f309 	mul.w	r3, r8, r9
 8000d12:	42ab      	cmp	r3, r5
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x6c>
 8000d16:	19ed      	adds	r5, r5, r7
 8000d18:	f108 32ff 	add.w	r2, r8, #4294967295
 8000d1c:	f080 8123 	bcs.w	8000f66 <__udivmoddi4+0x2a6>
 8000d20:	42ab      	cmp	r3, r5
 8000d22:	f240 8120 	bls.w	8000f66 <__udivmoddi4+0x2a6>
 8000d26:	f1a8 0802 	sub.w	r8, r8, #2
 8000d2a:	443d      	add	r5, r7
 8000d2c:	1aed      	subs	r5, r5, r3
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d34:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d38:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d3c:	fb00 f909 	mul.w	r9, r0, r9
 8000d40:	45a1      	cmp	r9, r4
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x98>
 8000d44:	19e4      	adds	r4, r4, r7
 8000d46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4a:	f080 810a 	bcs.w	8000f62 <__udivmoddi4+0x2a2>
 8000d4e:	45a1      	cmp	r9, r4
 8000d50:	f240 8107 	bls.w	8000f62 <__udivmoddi4+0x2a2>
 8000d54:	3802      	subs	r0, #2
 8000d56:	443c      	add	r4, r7
 8000d58:	eba4 0409 	sub.w	r4, r4, r9
 8000d5c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d60:	2100      	movs	r1, #0
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d061      	beq.n	8000e2a <__udivmoddi4+0x16a>
 8000d66:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	6034      	str	r4, [r6, #0]
 8000d6e:	6073      	str	r3, [r6, #4]
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	428b      	cmp	r3, r1
 8000d76:	d907      	bls.n	8000d88 <__udivmoddi4+0xc8>
 8000d78:	2e00      	cmp	r6, #0
 8000d7a:	d054      	beq.n	8000e26 <__udivmoddi4+0x166>
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d82:	4608      	mov	r0, r1
 8000d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d88:	fab3 f183 	clz	r1, r3
 8000d8c:	2900      	cmp	r1, #0
 8000d8e:	f040 808e 	bne.w	8000eae <__udivmoddi4+0x1ee>
 8000d92:	42ab      	cmp	r3, r5
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xdc>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80fa 	bhi.w	8000f90 <__udivmoddi4+0x2d0>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb65 0503 	sbc.w	r5, r5, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	46ac      	mov	ip, r5
 8000da6:	2e00      	cmp	r6, #0
 8000da8:	d03f      	beq.n	8000e2a <__udivmoddi4+0x16a>
 8000daa:	e886 1010 	stmia.w	r6, {r4, ip}
 8000dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db2:	b912      	cbnz	r2, 8000dba <__udivmoddi4+0xfa>
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000dba:	fab7 fe87 	clz	lr, r7
 8000dbe:	f1be 0f00 	cmp.w	lr, #0
 8000dc2:	d134      	bne.n	8000e2e <__udivmoddi4+0x16e>
 8000dc4:	1beb      	subs	r3, r5, r7
 8000dc6:	0c3a      	lsrs	r2, r7, #16
 8000dc8:	fa1f fc87 	uxth.w	ip, r7
 8000dcc:	2101      	movs	r1, #1
 8000dce:	fbb3 f8f2 	udiv	r8, r3, r2
 8000dd2:	0c25      	lsrs	r5, r4, #16
 8000dd4:	fb02 3318 	mls	r3, r2, r8, r3
 8000dd8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000ddc:	fb0c f308 	mul.w	r3, ip, r8
 8000de0:	42ab      	cmp	r3, r5
 8000de2:	d907      	bls.n	8000df4 <__udivmoddi4+0x134>
 8000de4:	19ed      	adds	r5, r5, r7
 8000de6:	f108 30ff 	add.w	r0, r8, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x132>
 8000dec:	42ab      	cmp	r3, r5
 8000dee:	f200 80d1 	bhi.w	8000f94 <__udivmoddi4+0x2d4>
 8000df2:	4680      	mov	r8, r0
 8000df4:	1aed      	subs	r5, r5, r3
 8000df6:	b2a3      	uxth	r3, r4
 8000df8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000dfc:	fb02 5510 	mls	r5, r2, r0, r5
 8000e00:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000e04:	fb0c fc00 	mul.w	ip, ip, r0
 8000e08:	45a4      	cmp	ip, r4
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x15c>
 8000e0c:	19e4      	adds	r4, r4, r7
 8000e0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x15a>
 8000e14:	45a4      	cmp	ip, r4
 8000e16:	f200 80b8 	bhi.w	8000f8a <__udivmoddi4+0x2ca>
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	eba4 040c 	sub.w	r4, r4, ip
 8000e20:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e24:	e79d      	b.n	8000d62 <__udivmoddi4+0xa2>
 8000e26:	4631      	mov	r1, r6
 8000e28:	4630      	mov	r0, r6
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	f1ce 0420 	rsb	r4, lr, #32
 8000e32:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e36:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e3a:	fa20 f804 	lsr.w	r8, r0, r4
 8000e3e:	0c3a      	lsrs	r2, r7, #16
 8000e40:	fa25 f404 	lsr.w	r4, r5, r4
 8000e44:	ea48 0803 	orr.w	r8, r8, r3
 8000e48:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e4c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e50:	fb02 4411 	mls	r4, r2, r1, r4
 8000e54:	fa1f fc87 	uxth.w	ip, r7
 8000e58:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e5c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e60:	42ab      	cmp	r3, r5
 8000e62:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e66:	d909      	bls.n	8000e7c <__udivmoddi4+0x1bc>
 8000e68:	19ed      	adds	r5, r5, r7
 8000e6a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e6e:	f080 808a 	bcs.w	8000f86 <__udivmoddi4+0x2c6>
 8000e72:	42ab      	cmp	r3, r5
 8000e74:	f240 8087 	bls.w	8000f86 <__udivmoddi4+0x2c6>
 8000e78:	3902      	subs	r1, #2
 8000e7a:	443d      	add	r5, r7
 8000e7c:	1aeb      	subs	r3, r5, r3
 8000e7e:	fa1f f588 	uxth.w	r5, r8
 8000e82:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e86:	fb02 3310 	mls	r3, r2, r0, r3
 8000e8a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e8e:	fb00 f30c 	mul.w	r3, r0, ip
 8000e92:	42ab      	cmp	r3, r5
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x1e6>
 8000e96:	19ed      	adds	r5, r5, r7
 8000e98:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e9c:	d26f      	bcs.n	8000f7e <__udivmoddi4+0x2be>
 8000e9e:	42ab      	cmp	r3, r5
 8000ea0:	d96d      	bls.n	8000f7e <__udivmoddi4+0x2be>
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	443d      	add	r5, r7
 8000ea6:	1aeb      	subs	r3, r5, r3
 8000ea8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eac:	e78f      	b.n	8000dce <__udivmoddi4+0x10e>
 8000eae:	f1c1 0720 	rsb	r7, r1, #32
 8000eb2:	fa22 f807 	lsr.w	r8, r2, r7
 8000eb6:	408b      	lsls	r3, r1
 8000eb8:	fa05 f401 	lsl.w	r4, r5, r1
 8000ebc:	ea48 0303 	orr.w	r3, r8, r3
 8000ec0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000ec4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	ea4e 0e04 	orr.w	lr, lr, r4
 8000ece:	fbb5 f9fc 	udiv	r9, r5, ip
 8000ed2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000ed6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000eda:	fa1f f883 	uxth.w	r8, r3
 8000ede:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000ee2:	fb09 f408 	mul.w	r4, r9, r8
 8000ee6:	42ac      	cmp	r4, r5
 8000ee8:	fa02 f201 	lsl.w	r2, r2, r1
 8000eec:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x244>
 8000ef2:	18ed      	adds	r5, r5, r3
 8000ef4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ef8:	d243      	bcs.n	8000f82 <__udivmoddi4+0x2c2>
 8000efa:	42ac      	cmp	r4, r5
 8000efc:	d941      	bls.n	8000f82 <__udivmoddi4+0x2c2>
 8000efe:	f1a9 0902 	sub.w	r9, r9, #2
 8000f02:	441d      	add	r5, r3
 8000f04:	1b2d      	subs	r5, r5, r4
 8000f06:	fa1f fe8e 	uxth.w	lr, lr
 8000f0a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000f0e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000f12:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000f16:	fb00 f808 	mul.w	r8, r0, r8
 8000f1a:	45a0      	cmp	r8, r4
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x26e>
 8000f1e:	18e4      	adds	r4, r4, r3
 8000f20:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f24:	d229      	bcs.n	8000f7a <__udivmoddi4+0x2ba>
 8000f26:	45a0      	cmp	r8, r4
 8000f28:	d927      	bls.n	8000f7a <__udivmoddi4+0x2ba>
 8000f2a:	3802      	subs	r0, #2
 8000f2c:	441c      	add	r4, r3
 8000f2e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f32:	eba4 0408 	sub.w	r4, r4, r8
 8000f36:	fba0 8902 	umull	r8, r9, r0, r2
 8000f3a:	454c      	cmp	r4, r9
 8000f3c:	46c6      	mov	lr, r8
 8000f3e:	464d      	mov	r5, r9
 8000f40:	d315      	bcc.n	8000f6e <__udivmoddi4+0x2ae>
 8000f42:	d012      	beq.n	8000f6a <__udivmoddi4+0x2aa>
 8000f44:	b156      	cbz	r6, 8000f5c <__udivmoddi4+0x29c>
 8000f46:	ebba 030e 	subs.w	r3, sl, lr
 8000f4a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f4e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f52:	40cb      	lsrs	r3, r1
 8000f54:	431f      	orrs	r7, r3
 8000f56:	40cc      	lsrs	r4, r1
 8000f58:	6037      	str	r7, [r6, #0]
 8000f5a:	6074      	str	r4, [r6, #4]
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f62:	4618      	mov	r0, r3
 8000f64:	e6f8      	b.n	8000d58 <__udivmoddi4+0x98>
 8000f66:	4690      	mov	r8, r2
 8000f68:	e6e0      	b.n	8000d2c <__udivmoddi4+0x6c>
 8000f6a:	45c2      	cmp	sl, r8
 8000f6c:	d2ea      	bcs.n	8000f44 <__udivmoddi4+0x284>
 8000f6e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f72:	eb69 0503 	sbc.w	r5, r9, r3
 8000f76:	3801      	subs	r0, #1
 8000f78:	e7e4      	b.n	8000f44 <__udivmoddi4+0x284>
 8000f7a:	4628      	mov	r0, r5
 8000f7c:	e7d7      	b.n	8000f2e <__udivmoddi4+0x26e>
 8000f7e:	4640      	mov	r0, r8
 8000f80:	e791      	b.n	8000ea6 <__udivmoddi4+0x1e6>
 8000f82:	4681      	mov	r9, r0
 8000f84:	e7be      	b.n	8000f04 <__udivmoddi4+0x244>
 8000f86:	4601      	mov	r1, r0
 8000f88:	e778      	b.n	8000e7c <__udivmoddi4+0x1bc>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	443c      	add	r4, r7
 8000f8e:	e745      	b.n	8000e1c <__udivmoddi4+0x15c>
 8000f90:	4608      	mov	r0, r1
 8000f92:	e708      	b.n	8000da6 <__udivmoddi4+0xe6>
 8000f94:	f1a8 0802 	sub.w	r8, r8, #2
 8000f98:	443d      	add	r5, r7
 8000f9a:	e72b      	b.n	8000df4 <__udivmoddi4+0x134>

08000f9c <__aeabi_idiv0>:
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <HTS221_GetCapabilities>:
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	708b      	strb	r3, [r1, #2]
  Capabilities->Pressure    = 0;
  Capabilities->Temperature = 1;
 8000fa4:	700b      	strb	r3, [r1, #0]
  Capabilities->LowPower    = 0;
  Capabilities->HumMaxOdr   = 12.5f;
 8000fa6:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <HTS221_GetCapabilities+0x18>)
 8000fa8:	604b      	str	r3, [r1, #4]
  Capabilities->Pressure    = 0;
 8000faa:	2000      	movs	r0, #0
  Capabilities->TempMaxOdr  = 12.5f;
 8000fac:	608b      	str	r3, [r1, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8000fae:	2300      	movs	r3, #0
  Capabilities->Pressure    = 0;
 8000fb0:	7048      	strb	r0, [r1, #1]
  Capabilities->LowPower    = 0;
 8000fb2:	70c8      	strb	r0, [r1, #3]
  Capabilities->PressMaxOdr = 0.0f;
 8000fb4:	60cb      	str	r3, [r1, #12]
  return HTS221_OK;
}
 8000fb6:	4770      	bx	lr
 8000fb8:	41480000 	.word	0x41480000

08000fbc <HTS221_HUM_Enable>:
 * @brief  Enable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8000fbc:	b510      	push	{r4, lr}
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8000fbe:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8000fc2:	2b01      	cmp	r3, #1
{
 8000fc4:	4604      	mov	r4, r0
  if (pObj->hum_is_enabled == 1U)
 8000fc6:	d005      	beq.n	8000fd4 <HTS221_HUM_Enable+0x18>
    return HTS221_OK;
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8000fc8:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8000fcc:	b123      	cbz	r3, 8000fd8 <HTS221_HUM_Enable+0x1c>
    {
      return HTS221_ERROR;
    }
  }

  pObj->hum_is_enabled = 1;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    return HTS221_OK;
 8000fd4:	2000      	movs	r0, #0

  return HTS221_OK;
}
 8000fd6:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8000fd8:	2101      	movs	r1, #1
 8000fda:	301c      	adds	r0, #28
 8000fdc:	f000 fa38 	bl	8001450 <hts221_power_on_set>
 8000fe0:	2800      	cmp	r0, #0
 8000fe2:	d0f4      	beq.n	8000fce <HTS221_HUM_Enable+0x12>
      return HTS221_ERROR;
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe8:	bd10      	pop	{r4, pc}

08000fea <HTS221_TEMP_Enable>:
 * @brief  Enable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8000fea:	b510      	push	{r4, lr}
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8000fec:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8000ff0:	2b01      	cmp	r3, #1
{
 8000ff2:	4604      	mov	r4, r0
  if (pObj->temp_is_enabled == 1U)
 8000ff4:	d005      	beq.n	8001002 <HTS221_TEMP_Enable+0x18>
    return HTS221_OK;
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 8000ff6:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8000ffa:	b123      	cbz	r3, 8001006 <HTS221_TEMP_Enable+0x1c>
    {
      return HTS221_ERROR;
    }
  }

  pObj->temp_is_enabled = 1;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    return HTS221_OK;
 8001002:	2000      	movs	r0, #0

  return HTS221_OK;
}
 8001004:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001006:	2101      	movs	r1, #1
 8001008:	301c      	adds	r0, #28
 800100a:	f000 fa21 	bl	8001450 <hts221_power_on_set>
 800100e:	2800      	cmp	r0, #0
 8001010:	d0f4      	beq.n	8000ffc <HTS221_TEMP_Enable+0x12>
      return HTS221_ERROR;
 8001012:	f04f 30ff 	mov.w	r0, #4294967295
 8001016:	bd10      	pop	{r4, pc}

08001018 <HTS221_SetOutputDataRate>:
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8001018:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800101c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8001024:	b508      	push	{r3, lr}
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8001026:	d910      	bls.n	800104a <HTS221_SetOutputDataRate+0x32>
 8001028:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
 800102c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001034:	bf94      	ite	ls
 8001036:	2102      	movls	r1, #2
 8001038:	2103      	movhi	r1, #3
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 800103a:	301c      	adds	r0, #28
 800103c:	f000 f9ae 	bl	800139c <hts221_data_rate_set>
 8001040:	3000      	adds	r0, #0
 8001042:	bf18      	it	ne
 8001044:	2001      	movne	r0, #1
  {
    return HTS221_ERROR;
  }

  return HTS221_OK;
}
 8001046:	4240      	negs	r0, r0
 8001048:	bd08      	pop	{r3, pc}
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 800104a:	2101      	movs	r1, #1
 800104c:	e7f5      	b.n	800103a <HTS221_SetOutputDataRate+0x22>

0800104e <HTS221_Init>:
{
 800104e:	b538      	push	{r3, r4, r5, lr}
  if (pObj->is_initialized == 0U)
 8001050:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
{
 8001054:	4604      	mov	r4, r0
  if (pObj->is_initialized == 0U)
 8001056:	b121      	cbz	r1, 8001062 <HTS221_Init+0x14>
  pObj->is_initialized = 1;
 8001058:	2301      	movs	r3, #1
 800105a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  return HTS221_OK;
 800105e:	2000      	movs	r0, #0
 8001060:	bd38      	pop	{r3, r4, r5, pc}
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001062:	f100 051c 	add.w	r5, r0, #28
 8001066:	4628      	mov	r0, r5
 8001068:	f000 f9f2 	bl	8001450 <hts221_power_on_set>
 800106c:	b110      	cbz	r0, 8001074 <HTS221_Init+0x26>
      return HTS221_ERROR;
 800106e:	f04f 30ff 	mov.w	r0, #4294967295
 8001072:	bd38      	pop	{r3, r4, r5, pc}
  {
    return HTS221_ERROR;
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001074:	2101      	movs	r1, #1
 8001076:	4628      	mov	r0, r5
 8001078:	f000 f9c4 	bl	8001404 <hts221_block_data_update_set>
 800107c:	2800      	cmp	r0, #0
 800107e:	d1f6      	bne.n	800106e <HTS221_Init+0x20>
  {
    return HTS221_ERROR;
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8001080:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001084:	4620      	mov	r0, r4
 8001086:	f7ff ffc7 	bl	8001018 <HTS221_SetOutputDataRate>
 800108a:	2800      	cmp	r0, #0
 800108c:	d0e4      	beq.n	8001058 <HTS221_Init+0xa>
 800108e:	e7ee      	b.n	800106e <HTS221_Init+0x20>

08001090 <HTS221_TEMP_SetOutputDataRate>:
  return HTS221_SetOutputDataRate(pObj, Odr);
 8001090:	f7ff bfc2 	b.w	8001018 <HTS221_SetOutputDataRate>

08001094 <HTS221_ReadID>:
{
 8001094:	b508      	push	{r3, lr}
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8001096:	301c      	adds	r0, #28
 8001098:	f000 f9d5 	bl	8001446 <hts221_device_id_get>
 800109c:	3000      	adds	r0, #0
 800109e:	bf18      	it	ne
 80010a0:	2001      	movne	r0, #1
}
 80010a2:	4240      	negs	r0, r0
 80010a4:	bd08      	pop	{r3, pc}
	...

080010a8 <HTS221_GetOutputDataRate>:
{
 80010a8:	b513      	push	{r0, r1, r4, lr}
 80010aa:	460c      	mov	r4, r1
  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 80010ac:	301c      	adds	r0, #28
 80010ae:	f10d 0107 	add.w	r1, sp, #7
 80010b2:	f000 f98a 	bl	80013ca <hts221_data_rate_get>
 80010b6:	b990      	cbnz	r0, 80010de <HTS221_GetOutputDataRate+0x36>
  switch (odr_low_level)
 80010b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80010bc:	2b03      	cmp	r3, #3
 80010be:	d80e      	bhi.n	80010de <HTS221_GetOutputDataRate+0x36>
 80010c0:	e8df f003 	tbb	[pc, r3]
 80010c4:	0b090602 	.word	0x0b090602
      *Odr = 0.0f;
 80010c8:	2300      	movs	r3, #0
      *Odr = 12.5f;
 80010ca:	6023      	str	r3, [r4, #0]
}
 80010cc:	b002      	add	sp, #8
 80010ce:	bd10      	pop	{r4, pc}
      *Odr = 1.0f;
 80010d0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80010d4:	e7f9      	b.n	80010ca <HTS221_GetOutputDataRate+0x22>
      *Odr = 7.0f;
 80010d6:	4b03      	ldr	r3, [pc, #12]	; (80010e4 <HTS221_GetOutputDataRate+0x3c>)
 80010d8:	e7f7      	b.n	80010ca <HTS221_GetOutputDataRate+0x22>
      *Odr = 12.5f;
 80010da:	4b03      	ldr	r3, [pc, #12]	; (80010e8 <HTS221_GetOutputDataRate+0x40>)
 80010dc:	e7f5      	b.n	80010ca <HTS221_GetOutputDataRate+0x22>
      ret = HTS221_ERROR;
 80010de:	f04f 30ff 	mov.w	r0, #4294967295
 80010e2:	e7f3      	b.n	80010cc <HTS221_GetOutputDataRate+0x24>
 80010e4:	40e00000 	.word	0x40e00000
 80010e8:	41480000 	.word	0x41480000

080010ec <HTS221_TEMP_GetOutputDataRate>:
  return HTS221_GetOutputDataRate(pObj, Odr);
 80010ec:	f7ff bfdc 	b.w	80010a8 <HTS221_GetOutputDataRate>

080010f0 <HTS221_HUM_GetHumidity>:
{
 80010f0:	b570      	push	{r4, r5, r6, lr}
 80010f2:	ed2d 8b04 	vpush	{d8-d9}
  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 80010f6:	f100 041c 	add.w	r4, r0, #28
{
 80010fa:	b082      	sub	sp, #8
 80010fc:	460e      	mov	r6, r1
  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 80010fe:	4620      	mov	r0, r4
 8001100:	a901      	add	r1, sp, #4
 8001102:	f000 fa0c 	bl	800151e <hts221_hum_adc_point_0_get>
 8001106:	b128      	cbz	r0, 8001114 <HTS221_HUM_GetHumidity+0x24>
    return HTS221_ERROR;
 8001108:	f04f 30ff 	mov.w	r0, #4294967295
}
 800110c:	b002      	add	sp, #8
 800110e:	ecbd 8b04 	vpop	{d8-d9}
 8001112:	bd70      	pop	{r4, r5, r6, pc}
  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8001114:	a901      	add	r1, sp, #4
 8001116:	4620      	mov	r0, r4
  lin_hum.x0 = (float)coeff.i16bit;
 8001118:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 800111c:	f000 f9af 	bl	800147e <hts221_hum_rh_point_0_get>
 8001120:	2800      	cmp	r0, #0
 8001122:	d1f1      	bne.n	8001108 <HTS221_HUM_GetHumidity+0x18>
  lin_hum.y0 = (float)coeff.u8bit[0];
 8001124:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001128:	ee08 3a90 	vmov	s17, r3
  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 800112c:	a901      	add	r1, sp, #4
 800112e:	4620      	mov	r0, r4
  lin_hum.y0 = (float)coeff.u8bit[0];
 8001130:	eeb8 9a68 	vcvt.f32.u32	s18, s17
  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8001134:	f000 f9f8 	bl	8001528 <hts221_hum_adc_point_1_get>
 8001138:	2800      	cmp	r0, #0
 800113a:	d1e5      	bne.n	8001108 <HTS221_HUM_GetHumidity+0x18>
  lin_hum.x1 = (float)coeff.i16bit;
 800113c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8001140:	ee08 3a10 	vmov	s16, r3
  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8001144:	a901      	add	r1, sp, #4
 8001146:	4620      	mov	r0, r4
  lin_hum.x1 = (float)coeff.i16bit;
 8001148:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 800114c:	f000 f9a2 	bl	8001494 <hts221_hum_rh_point_1_get>
 8001150:	2800      	cmp	r0, #0
 8001152:	d1d9      	bne.n	8001108 <HTS221_HUM_GetHumidity+0x18>
  lin_hum.y1 = (float)coeff.u8bit[0];
 8001154:	f89d 3004 	ldrb.w	r3, [sp, #4]
  (void)memset(data_raw_humidity.u8bit, 0x00, sizeof(int16_t));
 8001158:	f8ad 0000 	strh.w	r0, [sp]
  lin_hum.y1 = (float)coeff.u8bit[0];
 800115c:	ee08 3a90 	vmov	s17, r3
  if (hts221_humidity_raw_get(&(pObj->Ctx), data_raw_humidity.u8bit) != HTS221_OK)
 8001160:	4669      	mov	r1, sp
 8001162:	4620      	mov	r0, r4
  lin_hum.y1 = (float)coeff.u8bit[0];
 8001164:	eef8 8a68 	vcvt.f32.u32	s17, s17
  if (hts221_humidity_raw_get(&(pObj->Ctx), data_raw_humidity.u8bit) != HTS221_OK)
 8001168:	f000 f963 	bl	8001432 <hts221_humidity_raw_get>
 800116c:	2800      	cmp	r0, #0
 800116e:	d1cb      	bne.n	8001108 <HTS221_HUM_GetHumidity+0x18>
  lin_hum.x0 = (float)coeff.i16bit;
 8001170:	ee07 5a90 	vmov	s15, r5
 8001174:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8001178:	f9bd 3000 	ldrsh.w	r3, [sp]
 * @param  Coeff the coefficient
 * @retval Calculation result
 */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 800117c:	ee68 7ac7 	vnmul.f32	s15, s17, s14
  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8001180:	ee06 3a90 	vmov	s13, r3
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8001184:	eee9 7a08 	vfma.f32	s15, s18, s16
  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8001188:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 800118c:	ee78 8ac9 	vsub.f32	s17, s17, s18
 8001190:	ee38 8a47 	vsub.f32	s16, s16, s14
 8001194:	eee6 7aa8 	vfma.f32	s15, s13, s17
 8001198:	ee87 7a88 	vdiv.f32	s14, s15, s16
  if (*Value < 0.0f)
 800119c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80011a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a4:	d409      	bmi.n	80011ba <HTS221_HUM_GetHumidity+0xca>
  if (*Value > 100.0f)
 80011a6:	eddf 7a08 	vldr	s15, [pc, #32]	; 80011c8 <HTS221_HUM_GetHumidity+0xd8>
 80011aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b2:	dc05      	bgt.n	80011c0 <HTS221_HUM_GetHumidity+0xd0>
 80011b4:	ed86 7a00 	vstr	s14, [r6]
 80011b8:	e7a8      	b.n	800110c <HTS221_HUM_GetHumidity+0x1c>
    *Value = 0.0f;
 80011ba:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80011cc <HTS221_HUM_GetHumidity+0xdc>
 80011be:	e7f9      	b.n	80011b4 <HTS221_HUM_GetHumidity+0xc4>
    *Value = 100.0f;
 80011c0:	edc6 7a00 	vstr	s15, [r6]
 80011c4:	e7a2      	b.n	800110c <HTS221_HUM_GetHumidity+0x1c>
 80011c6:	bf00      	nop
 80011c8:	42c80000 	.word	0x42c80000
 80011cc:	00000000 	.word	0x00000000

080011d0 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80011d0:	b430      	push	{r4, r5}
 80011d2:	4604      	mov	r4, r0
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80011d4:	6885      	ldr	r5, [r0, #8]
 80011d6:	6964      	ldr	r4, [r4, #20]
 80011d8:	7b00      	ldrb	r0, [r0, #12]
 80011da:	b925      	cbnz	r5, 80011e6 <ReadRegWrap+0x16>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80011dc:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80011e0:	46a4      	mov	ip, r4
  }
}
 80011e2:	bc30      	pop	{r4, r5}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80011e4:	4760      	bx	ip
 80011e6:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80011ea:	e7f9      	b.n	80011e0 <ReadRegWrap+0x10>

080011ec <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80011ec:	b430      	push	{r4, r5}
 80011ee:	4604      	mov	r4, r0
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80011f0:	6885      	ldr	r5, [r0, #8]
 80011f2:	6924      	ldr	r4, [r4, #16]
 80011f4:	7b00      	ldrb	r0, [r0, #12]
 80011f6:	b925      	cbnz	r5, 8001202 <WriteRegWrap+0x16>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80011f8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80011fc:	46a4      	mov	ip, r4
  }
}
 80011fe:	bc30      	pop	{r4, r5}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001200:	4760      	bx	ip
 8001202:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8001206:	e7f9      	b.n	80011fc <WriteRegWrap+0x10>

08001208 <HTS221_HUM_Disable>:
{
 8001208:	b510      	push	{r4, lr}
 800120a:	4604      	mov	r4, r0
  if (pObj->hum_is_enabled == 0U)
 800120c:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 8001210:	b170      	cbz	r0, 8001230 <HTS221_HUM_Disable+0x28>
  if (pObj->temp_is_enabled == 0U)
 8001212:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
 8001216:	b119      	cbz	r1, 8001220 <HTS221_HUM_Disable+0x18>
  pObj->hum_is_enabled = 0;
 8001218:	2000      	movs	r0, #0
 800121a:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 800121e:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001220:	f104 001c 	add.w	r0, r4, #28
 8001224:	f000 f914 	bl	8001450 <hts221_power_on_set>
 8001228:	2800      	cmp	r0, #0
 800122a:	d0f5      	beq.n	8001218 <HTS221_HUM_Disable+0x10>
      return HTS221_ERROR;
 800122c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001230:	bd10      	pop	{r4, pc}

08001232 <HTS221_TEMP_Disable>:
{
 8001232:	b510      	push	{r4, lr}
 8001234:	4604      	mov	r4, r0
  if (pObj->temp_is_enabled == 0U)
 8001236:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
 800123a:	b170      	cbz	r0, 800125a <HTS221_TEMP_Disable+0x28>
  if (pObj->hum_is_enabled == 0U)
 800123c:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
 8001240:	b119      	cbz	r1, 800124a <HTS221_TEMP_Disable+0x18>
  pObj->temp_is_enabled = 0;
 8001242:	2000      	movs	r0, #0
 8001244:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
 8001248:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 800124a:	f104 001c 	add.w	r0, r4, #28
 800124e:	f000 f8ff 	bl	8001450 <hts221_power_on_set>
 8001252:	2800      	cmp	r0, #0
 8001254:	d0f5      	beq.n	8001242 <HTS221_TEMP_Disable+0x10>
      return HTS221_ERROR;
 8001256:	f04f 30ff 	mov.w	r0, #4294967295
}
 800125a:	bd10      	pop	{r4, pc}

0800125c <HTS221_DeInit>:
{
 800125c:	b510      	push	{r4, lr}
  if (pObj->is_initialized == 1U)
 800125e:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8001262:	2b01      	cmp	r3, #1
{
 8001264:	4604      	mov	r4, r0
  if (pObj->is_initialized == 1U)
 8001266:	d003      	beq.n	8001270 <HTS221_DeInit+0x14>
  pObj->is_initialized = 0;
 8001268:	2000      	movs	r0, #0
 800126a:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
  return HTS221_OK;
 800126e:	bd10      	pop	{r4, pc}
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8001270:	f7ff ffca 	bl	8001208 <HTS221_HUM_Disable>
 8001274:	b110      	cbz	r0, 800127c <HTS221_DeInit+0x20>
      return HTS221_ERROR;
 8001276:	f04f 30ff 	mov.w	r0, #4294967295
 800127a:	bd10      	pop	{r4, pc}
    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 800127c:	4620      	mov	r0, r4
 800127e:	f7ff ffd8 	bl	8001232 <HTS221_TEMP_Disable>
 8001282:	2800      	cmp	r0, #0
 8001284:	d0f0      	beq.n	8001268 <HTS221_DeInit+0xc>
 8001286:	e7f6      	b.n	8001276 <HTS221_DeInit+0x1a>

08001288 <HTS221_HUM_SetOutputDataRate>:
 8001288:	f7ff bec6 	b.w	8001018 <HTS221_SetOutputDataRate>

0800128c <HTS221_HUM_GetOutputDataRate>:
 800128c:	f7ff bf0c 	b.w	80010a8 <HTS221_GetOutputDataRate>

08001290 <HTS221_TEMP_GetTemperature>:
{
 8001290:	b570      	push	{r4, r5, r6, lr}
 8001292:	ed2d 8b04 	vpush	{d8-d9}
  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8001296:	f100 041c 	add.w	r4, r0, #28
{
 800129a:	b082      	sub	sp, #8
 800129c:	460e      	mov	r6, r1
  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 800129e:	4620      	mov	r0, r4
 80012a0:	a901      	add	r1, sp, #4
 80012a2:	f000 f946 	bl	8001532 <hts221_temp_adc_point_0_get>
 80012a6:	b128      	cbz	r0, 80012b4 <HTS221_TEMP_GetTemperature+0x24>
    return HTS221_ERROR;
 80012a8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80012ac:	b002      	add	sp, #8
 80012ae:	ecbd 8b04 	vpop	{d8-d9}
 80012b2:	bd70      	pop	{r4, r5, r6, pc}
  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 80012b4:	a901      	add	r1, sp, #4
 80012b6:	4620      	mov	r0, r4
  lin_temp.x0 = (float)coeff.i16bit;
 80012b8:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 80012bc:	f000 f8f5 	bl	80014aa <hts221_temp_deg_point_0_get>
 80012c0:	2800      	cmp	r0, #0
 80012c2:	d1f1      	bne.n	80012a8 <HTS221_TEMP_GetTemperature+0x18>
  lin_temp.y0 = (float)coeff.u8bit[0];
 80012c4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80012c8:	ee08 3a90 	vmov	s17, r3
  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 80012cc:	a901      	add	r1, sp, #4
 80012ce:	4620      	mov	r0, r4
  lin_temp.y0 = (float)coeff.u8bit[0];
 80012d0:	eeb8 9a68 	vcvt.f32.u32	s18, s17
  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 80012d4:	f000 f932 	bl	800153c <hts221_temp_adc_point_1_get>
 80012d8:	2800      	cmp	r0, #0
 80012da:	d1e5      	bne.n	80012a8 <HTS221_TEMP_GetTemperature+0x18>
  lin_temp.x1 = (float)coeff.i16bit;
 80012dc:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80012e0:	ee08 3a10 	vmov	s16, r3
  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 80012e4:	a901      	add	r1, sp, #4
 80012e6:	4620      	mov	r0, r4
  lin_temp.x1 = (float)coeff.i16bit;
 80012e8:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 80012ec:	f000 f8fa 	bl	80014e4 <hts221_temp_deg_point_1_get>
 80012f0:	2800      	cmp	r0, #0
 80012f2:	d1d9      	bne.n	80012a8 <HTS221_TEMP_GetTemperature+0x18>
  lin_temp.y1 = (float)coeff.u8bit[0];
 80012f4:	f89d 3004 	ldrb.w	r3, [sp, #4]
  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 80012f8:	f8ad 0000 	strh.w	r0, [sp]
  lin_temp.y1 = (float)coeff.u8bit[0];
 80012fc:	ee08 3a90 	vmov	s17, r3
  if (hts221_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != HTS221_OK)
 8001300:	4669      	mov	r1, sp
 8001302:	4620      	mov	r0, r4
  lin_temp.y1 = (float)coeff.u8bit[0];
 8001304:	eef8 8a68 	vcvt.f32.u32	s17, s17
  if (hts221_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != HTS221_OK)
 8001308:	f000 f898 	bl	800143c <hts221_temperature_raw_get>
 800130c:	2800      	cmp	r0, #0
 800130e:	d1cb      	bne.n	80012a8 <HTS221_TEMP_GetTemperature+0x18>
  lin_temp.x0 = (float)coeff.i16bit;
 8001310:	ee07 5a90 	vmov	s15, r5
 8001314:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8001318:	f9bd 3000 	ldrsh.w	r3, [sp]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 800131c:	ee68 7ac7 	vnmul.f32	s15, s17, s14
  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8001320:	ee06 3a90 	vmov	s13, r3
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8001324:	eee9 7a08 	vfma.f32	s15, s18, s16
  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8001328:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 800132c:	ee78 8ac9 	vsub.f32	s17, s17, s18
 8001330:	ee38 8a47 	vsub.f32	s16, s16, s14
 8001334:	eee6 7aa8 	vfma.f32	s15, s13, s17
 8001338:	ee87 7a88 	vdiv.f32	s14, s15, s16
  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 800133c:	ed86 7a00 	vstr	s14, [r6]
  return HTS221_OK;
 8001340:	e7b4      	b.n	80012ac <HTS221_TEMP_GetTemperature+0x1c>
	...

08001344 <HTS221_RegisterBusIO>:
  if (pObj == NULL)
 8001344:	b1a0      	cbz	r0, 8001370 <HTS221_RegisterBusIO+0x2c>
    pObj->IO.DeInit    = pIO->DeInit;
 8001346:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8001348:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800134a:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 800134c:	688a      	ldr	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 800134e:	6003      	str	r3, [r0, #0]
    pObj->IO.BusType   = pIO->BusType;
 8001350:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 8001352:	7b0a      	ldrb	r2, [r1, #12]
 8001354:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001356:	690a      	ldr	r2, [r1, #16]
 8001358:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800135a:	694a      	ldr	r2, [r1, #20]
 800135c:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800135e:	698a      	ldr	r2, [r1, #24]
 8001360:	6182      	str	r2, [r0, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 8001362:	4a05      	ldr	r2, [pc, #20]	; (8001378 <HTS221_RegisterBusIO+0x34>)
 8001364:	6202      	str	r2, [r0, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8001366:	4a05      	ldr	r2, [pc, #20]	; (800137c <HTS221_RegisterBusIO+0x38>)
 8001368:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.handle   = pObj;
 800136a:	6240      	str	r0, [r0, #36]	; 0x24
    if (pObj->IO.Init != NULL)
 800136c:	b103      	cbz	r3, 8001370 <HTS221_RegisterBusIO+0x2c>
      ret = pObj->IO.Init();
 800136e:	4718      	bx	r3
}
 8001370:	f04f 30ff 	mov.w	r0, #4294967295
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	080011d1 	.word	0x080011d1
 800137c:	080011ed 	.word	0x080011ed

08001380 <hts221_read_reg>:
  * @param  uint16_t len: number of consecutive register to read
  *
  */
int32_t hts221_read_reg(hts221_ctx_t *ctx, uint8_t reg, uint8_t *data,
                        uint16_t len)
{
 8001380:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001382:	6844      	ldr	r4, [r0, #4]
 8001384:	6880      	ldr	r0, [r0, #8]
 8001386:	46a4      	mov	ip, r4
  return ret;
}
 8001388:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800138c:	4760      	bx	ip

0800138e <hts221_write_reg>:
  * @param  uint16_t len: number of consecutive register to write
  *
*/
int32_t hts221_write_reg(hts221_ctx_t *ctx, uint8_t reg, uint8_t *data,
                         uint16_t len)
{
 800138e:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001390:	6804      	ldr	r4, [r0, #0]
 8001392:	6880      	ldr	r0, [r0, #8]
 8001394:	46a4      	mov	ip, r4
  return ret;
}
 8001396:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800139a:	4760      	bx	ip

0800139c <hts221_data_rate_set>:
  * @param  hts221_ctx_t *ctx: read / write interface definitions
  * @param  hts221_odr_t: change the values of odr in reg CTRL_REG1
  *
  */
int32_t hts221_data_rate_set(hts221_ctx_t *ctx, hts221_odr_t val)
{
 800139c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_reg_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
 800139e:	2301      	movs	r3, #1
{
 80013a0:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
 80013a2:	aa01      	add	r2, sp, #4
 80013a4:	2120      	movs	r1, #32
{
 80013a6:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
 80013a8:	f7ff ffea 	bl	8001380 <hts221_read_reg>

  if (ret == 0)
 80013ac:	b958      	cbnz	r0, 80013c6 <hts221_data_rate_set+0x2a>
  {
    reg.ctrl_reg1.odr = (uint8_t)val;
 80013ae:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80013b2:	f365 0301 	bfi	r3, r5, #0, #2
 80013b6:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
 80013ba:	aa01      	add	r2, sp, #4
 80013bc:	2301      	movs	r3, #1
 80013be:	2120      	movs	r1, #32
 80013c0:	4620      	mov	r0, r4
 80013c2:	f7ff ffe4 	bl	800138e <hts221_write_reg>
  }

  return ret;
}
 80013c6:	b003      	add	sp, #12
 80013c8:	bd30      	pop	{r4, r5, pc}

080013ca <hts221_data_rate_get>:
  * @param  hts221_ctx_t *ctx: read / write interface definitions
  * @param  hts221_odr_t: Get the values of odr in reg CTRL_REG1
  *
  */
int32_t hts221_data_rate_get(hts221_ctx_t *ctx, hts221_odr_t *val)
{
 80013ca:	b513      	push	{r0, r1, r4, lr}
  hts221_reg_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
 80013cc:	2301      	movs	r3, #1
{
 80013ce:	460c      	mov	r4, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
 80013d0:	aa01      	add	r2, sp, #4
 80013d2:	2120      	movs	r1, #32
 80013d4:	f7ff ffd4 	bl	8001380 <hts221_read_reg>

  switch (reg.ctrl_reg1.odr)
 80013d8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80013dc:	f003 0303 	and.w	r3, r3, #3
 80013e0:	2b03      	cmp	r3, #3
 80013e2:	d80d      	bhi.n	8001400 <hts221_data_rate_get+0x36>
 80013e4:	e8df f003 	tbb	[pc, r3]
 80013e8:	0a080602 	.word	0x0a080602
  {
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 80013ec:	2300      	movs	r3, #0
      break;
    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
      break;
    default:
      *val = HTS221_ODR_ND;
 80013ee:	7023      	strb	r3, [r4, #0]
      break;
  }

  return ret;
}
 80013f0:	b002      	add	sp, #8
 80013f2:	bd10      	pop	{r4, pc}
      *val = HTS221_ODR_1Hz;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e7fa      	b.n	80013ee <hts221_data_rate_get+0x24>
      *val = HTS221_ODR_7Hz;
 80013f8:	2302      	movs	r3, #2
 80013fa:	e7f8      	b.n	80013ee <hts221_data_rate_get+0x24>
      *val = HTS221_ODR_12Hz5;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e7f6      	b.n	80013ee <hts221_data_rate_get+0x24>
      *val = HTS221_ODR_ND;
 8001400:	2304      	movs	r3, #4
 8001402:	e7f4      	b.n	80013ee <hts221_data_rate_get+0x24>

08001404 <hts221_block_data_update_set>:
  * @param  hts221_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t val: change the values of bdu in reg CTRL_REG1
  *
  */
int32_t hts221_block_data_update_set(hts221_ctx_t *ctx, uint8_t val)
{
 8001404:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_reg_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
 8001406:	2301      	movs	r3, #1
{
 8001408:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
 800140a:	aa01      	add	r2, sp, #4
 800140c:	2120      	movs	r1, #32
{
 800140e:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
 8001410:	f7ff ffb6 	bl	8001380 <hts221_read_reg>

  if (ret == 0)
 8001414:	b958      	cbnz	r0, 800142e <hts221_block_data_update_set+0x2a>
  {
    reg.ctrl_reg1.bdu = val;
 8001416:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800141a:	f365 0382 	bfi	r3, r5, #2, #1
 800141e:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
 8001422:	aa01      	add	r2, sp, #4
 8001424:	2301      	movs	r3, #1
 8001426:	2120      	movs	r1, #32
 8001428:	4620      	mov	r0, r4
 800142a:	f7ff ffb0 	bl	800138e <hts221_write_reg>
  }

  return ret;
}
 800142e:	b003      	add	sp, #12
 8001430:	bd30      	pop	{r4, r5, pc}

08001432 <hts221_humidity_raw_get>:
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t hts221_humidity_raw_get(hts221_ctx_t *ctx, uint8_t *buff)
{
  return hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8001432:	460a      	mov	r2, r1
 8001434:	2302      	movs	r3, #2
 8001436:	2128      	movs	r1, #40	; 0x28
 8001438:	f7ff bfa2 	b.w	8001380 <hts221_read_reg>

0800143c <hts221_temperature_raw_get>:
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t hts221_temperature_raw_get(hts221_ctx_t *ctx, uint8_t *buff)
{
  return hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 800143c:	460a      	mov	r2, r1
 800143e:	2302      	movs	r3, #2
 8001440:	212a      	movs	r1, #42	; 0x2a
 8001442:	f7ff bf9d 	b.w	8001380 <hts221_read_reg>

08001446 <hts221_device_id_get>:
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t hts221_device_id_get(hts221_ctx_t *ctx, uint8_t *buff)
{
  return hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8001446:	460a      	mov	r2, r1
 8001448:	2301      	movs	r3, #1
 800144a:	210f      	movs	r1, #15
 800144c:	f7ff bf98 	b.w	8001380 <hts221_read_reg>

08001450 <hts221_power_on_set>:
  * @param  hts221_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t val: change the values of pd in reg CTRL_REG1
  *
  */
int32_t hts221_power_on_set(hts221_ctx_t *ctx, uint8_t val)
{
 8001450:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_reg_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
 8001452:	2301      	movs	r3, #1
{
 8001454:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
 8001456:	aa01      	add	r2, sp, #4
 8001458:	2120      	movs	r1, #32
{
 800145a:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
 800145c:	f7ff ff90 	bl	8001380 <hts221_read_reg>

  if (ret == 0)
 8001460:	b958      	cbnz	r0, 800147a <hts221_power_on_set+0x2a>
  {
    reg.ctrl_reg1.pd = val;
 8001462:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001466:	f365 13c7 	bfi	r3, r5, #7, #1
 800146a:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
 800146e:	aa01      	add	r2, sp, #4
 8001470:	2301      	movs	r3, #1
 8001472:	2120      	movs	r1, #32
 8001474:	4620      	mov	r0, r4
 8001476:	f7ff ff8a 	bl	800138e <hts221_write_reg>
  }
  return ret;
}
 800147a:	b003      	add	sp, #12
 800147c:	bd30      	pop	{r4, r5, pc}

0800147e <hts221_hum_rh_point_0_get>:
  * @param  hts221_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t hts221_hum_rh_point_0_get(hts221_ctx_t *ctx, uint8_t *buff)
{
 800147e:	b510      	push	{r4, lr}
 8001480:	460c      	mov	r4, r1
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, buff, 1);
 8001482:	460a      	mov	r2, r1
 8001484:	2301      	movs	r3, #1
 8001486:	2130      	movs	r1, #48	; 0x30
 8001488:	f7ff ff7a 	bl	8001380 <hts221_read_reg>
  *buff = (uint8_t)(((uint16_t)(*buff) >> 1) & 0x7FFFu);
 800148c:	7823      	ldrb	r3, [r4, #0]
 800148e:	085b      	lsrs	r3, r3, #1
 8001490:	7023      	strb	r3, [r4, #0]

  return ret;
}
 8001492:	bd10      	pop	{r4, pc}

08001494 <hts221_hum_rh_point_1_get>:
  * @param  hts221_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t hts221_hum_rh_point_1_get(hts221_ctx_t *ctx, uint8_t *buff)
{
 8001494:	b510      	push	{r4, lr}
 8001496:	460c      	mov	r4, r1
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, buff, 1);
 8001498:	460a      	mov	r2, r1
 800149a:	2301      	movs	r3, #1
 800149c:	2131      	movs	r1, #49	; 0x31
 800149e:	f7ff ff6f 	bl	8001380 <hts221_read_reg>
  *buff = (uint8_t)(((uint16_t)(*buff) >> 1) & 0x7FFFu);
 80014a2:	7823      	ldrb	r3, [r4, #0]
 80014a4:	085b      	lsrs	r3, r3, #1
 80014a6:	7023      	strb	r3, [r4, #0]

  return ret;
}
 80014a8:	bd10      	pop	{r4, pc}

080014aa <hts221_temp_deg_point_0_get>:
  * @param  hts221_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t hts221_temp_deg_point_0_get(hts221_ctx_t *ctx, uint8_t *buff)
{
 80014aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_reg_t reg;
  int32_t ret;
  axis1bit16_t coeff;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, coeff.u8bit, 1);
 80014ac:	2301      	movs	r3, #1
{
 80014ae:	460c      	mov	r4, r1
  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, coeff.u8bit, 1);
 80014b0:	aa01      	add	r2, sp, #4
 80014b2:	2132      	movs	r1, #50	; 0x32
{
 80014b4:	4605      	mov	r5, r0
  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, coeff.u8bit, 1);
 80014b6:	f7ff ff63 	bl	8001380 <hts221_read_reg>

  if (ret == 0)
 80014ba:	b988      	cbnz	r0, 80014e0 <hts221_temp_deg_point_0_get+0x36>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, &reg.byte, 1);
 80014bc:	2301      	movs	r3, #1
 80014be:	466a      	mov	r2, sp
 80014c0:	2135      	movs	r1, #53	; 0x35
 80014c2:	4628      	mov	r0, r5
 80014c4:	f7ff ff5c 	bl	8001380 <hts221_read_reg>
    coeff.u8bit[1] = reg.t1_t0_msb.t0_msb;
 80014c8:	f89d 3000 	ldrb.w	r3, [sp]
 80014cc:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80014d0:	f88d 3005 	strb.w	r3, [sp, #5]
    coeff.i16bit = coeff.i16bit / 8;
 80014d4:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80014d8:	2208      	movs	r2, #8
 80014da:	fb93 f3f2 	sdiv	r3, r3, r2
    *(buff) = (uint8_t)coeff.i16bit;
 80014de:	7023      	strb	r3, [r4, #0]
  }

  return ret;
}
 80014e0:	b003      	add	sp, #12
 80014e2:	bd30      	pop	{r4, r5, pc}

080014e4 <hts221_temp_deg_point_1_get>:
  * @param  hts221_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t hts221_temp_deg_point_1_get(hts221_ctx_t *ctx, uint8_t *buff)
{
 80014e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_reg_t reg;
  int32_t ret;
  axis1bit16_t coeff;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, coeff.u8bit, 1);
 80014e6:	2301      	movs	r3, #1
{
 80014e8:	460c      	mov	r4, r1
  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, coeff.u8bit, 1);
 80014ea:	aa01      	add	r2, sp, #4
 80014ec:	2133      	movs	r1, #51	; 0x33
{
 80014ee:	4605      	mov	r5, r0
  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, coeff.u8bit, 1);
 80014f0:	f7ff ff46 	bl	8001380 <hts221_read_reg>

  if (ret == 0)
 80014f4:	b988      	cbnz	r0, 800151a <hts221_temp_deg_point_1_get+0x36>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, &reg.byte, 1);
 80014f6:	2301      	movs	r3, #1
 80014f8:	466a      	mov	r2, sp
 80014fa:	2135      	movs	r1, #53	; 0x35
 80014fc:	4628      	mov	r0, r5
 80014fe:	f7ff ff3f 	bl	8001380 <hts221_read_reg>
    coeff.u8bit[1] = reg.t1_t0_msb.t1_msb;
 8001502:	f89d 3000 	ldrb.w	r3, [sp]
 8001506:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800150a:	f88d 3005 	strb.w	r3, [sp, #5]
    coeff.i16bit = coeff.i16bit / 8;
 800150e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8001512:	2208      	movs	r2, #8
 8001514:	fb93 f3f2 	sdiv	r3, r3, r2
    *(buff) = (uint8_t)coeff.i16bit;
 8001518:	7023      	strb	r3, [r4, #0]
  }

  return ret;
}
 800151a:	b003      	add	sp, #12
 800151c:	bd30      	pop	{r4, r5, pc}

0800151e <hts221_hum_adc_point_0_get>:
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t hts221_hum_adc_point_0_get(hts221_ctx_t *ctx, uint8_t *buff)
{
  return hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, buff, 2);
 800151e:	460a      	mov	r2, r1
 8001520:	2302      	movs	r3, #2
 8001522:	2136      	movs	r1, #54	; 0x36
 8001524:	f7ff bf2c 	b.w	8001380 <hts221_read_reg>

08001528 <hts221_hum_adc_point_1_get>:
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t hts221_hum_adc_point_1_get(hts221_ctx_t *ctx, uint8_t *buff)
{
  return hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, buff, 2);
 8001528:	460a      	mov	r2, r1
 800152a:	2302      	movs	r3, #2
 800152c:	213a      	movs	r1, #58	; 0x3a
 800152e:	f7ff bf27 	b.w	8001380 <hts221_read_reg>

08001532 <hts221_temp_adc_point_0_get>:
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t hts221_temp_adc_point_0_get(hts221_ctx_t *ctx, uint8_t *buff)
{
  return hts221_read_reg(ctx, HTS221_T0_OUT_L, buff, 2);
 8001532:	460a      	mov	r2, r1
 8001534:	2302      	movs	r3, #2
 8001536:	213c      	movs	r1, #60	; 0x3c
 8001538:	f7ff bf22 	b.w	8001380 <hts221_read_reg>

0800153c <hts221_temp_adc_point_1_get>:
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t hts221_temp_adc_point_1_get(hts221_ctx_t *ctx, uint8_t *buff)
{
  return hts221_read_reg(ctx, HTS221_T1_OUT_L, buff, 2);
 800153c:	460a      	mov	r2, r1
 800153e:	2302      	movs	r3, #2
 8001540:	213e      	movs	r1, #62	; 0x3e
 8001542:	f7ff bf1d 	b.w	8001380 <hts221_read_reg>
	...

08001548 <L6206_AttachErrorHandler>:
* to the error Hanlder
* @retval None
**********************************************************/
void L6206_AttachErrorHandler(void (*callback)(uint16_t))
{
	errorHandlerCallback = (void (*)(uint16_t))callback;
 8001548:	4b01      	ldr	r3, [pc, #4]	; (8001550 <L6206_AttachErrorHandler+0x8>)
 800154a:	6018      	str	r0, [r3, #0]
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	20002728 	.word	0x20002728

08001554 <L6206_AttachFlagInterrupt>:
* to the Flag Interrupt
* @retval None
**********************************************************/
void L6206_AttachFlagInterrupt(void (*callback)(void))
{
	flagInterruptCallback = (void (*)())callback;
 8001554:	4b01      	ldr	r3, [pc, #4]	; (800155c <L6206_AttachFlagInterrupt+0x8>)
 8001556:	6018      	str	r0, [r3, #0]
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	2000272c 	.word	0x2000272c

08001560 <L6206_GetBridgeInputPwmFreq>:
* @param[in] bridgeId 0 for bridge A, 1 for bridge B
* @retval Freq in Hz
**********************************************************/
uint32_t L6206_GetBridgeInputPwmFreq(uint8_t bridgeId)
{
	return(devicePrm.pwmFreq[(bridgeId << 1)]);
 8001560:	4b02      	ldr	r3, [pc, #8]	; (800156c <L6206_GetBridgeInputPwmFreq+0xc>)
 8001562:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
}
 8001566:	6840      	ldr	r0, [r0, #4]
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	20002700 	.word	0x20002700

08001570 <L6206_GetFwVersion>:
* @retval L6206_FW_VERSION
**********************************************************/
uint32_t L6206_GetFwVersion(void)
{
	return(L6206_FW_VERSION);
}
 8001570:	2000      	movs	r0, #0
 8001572:	4770      	bx	lr

08001574 <L6206_ReadId>:
* @retval Id of the l6206 Driver Instance
**********************************************************/
uint16_t L6206_ReadId(void)
{
	return(l6206DriverInstance);
}
 8001574:	4b01      	ldr	r3, [pc, #4]	; (800157c <L6206_ReadId+0x8>)
 8001576:	8818      	ldrh	r0, [r3, #0]
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	2000248a 	.word	0x2000248a

08001580 <L6206_SetNbDevices>:
	if (nbDevices <= MAX_NUMBER_OF_DEVICES) {
		return TRUE;
	}else  {
		return FALSE;
	}
}
 8001580:	2801      	cmp	r0, #1
 8001582:	bf8c      	ite	hi
 8001584:	2000      	movhi	r0, #0
 8001586:	2001      	movls	r0, #1
 8001588:	4770      	bx	lr
	...

0800158c <L6206_ErrorHandler>:
* @param[in] error Number of the error
* @retval None
**********************************************************/
void L6206_ErrorHandler(uint16_t error)
{
	if (errorHandlerCallback != 0) {
 800158c:	4b02      	ldr	r3, [pc, #8]	; (8001598 <L6206_ErrorHandler+0xc>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	b103      	cbz	r3, 8001594 <L6206_ErrorHandler+0x8>
		(void)errorHandlerCallback(error);
 8001592:	4718      	bx	r3
 8001594:	e7fe      	b.n	8001594 <L6206_ErrorHandler+0x8>
 8001596:	bf00      	nop
 8001598:	20002728 	.word	0x20002728

0800159c <L6206_GetCurrentSpeed>:
{
 800159c:	b508      	push	{r3, lr}
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 800159e:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <L6206_GetCurrentSpeed+0x2c>)
 80015a0:	490a      	ldr	r1, [pc, #40]	; (80015cc <L6206_GetCurrentSpeed+0x30>)
 80015a2:	781a      	ldrb	r2, [r3, #0]
 80015a4:	5c8a      	ldrb	r2, [r1, r2]
 80015a6:	4282      	cmp	r2, r0
 80015a8:	d205      	bcs.n	80015b6 <L6206_GetCurrentSpeed+0x1a>
		L6206_ErrorHandler(L6206_ERROR_1);
 80015aa:	f248 0001 	movw	r0, #32769	; 0x8001
 80015ae:	f7ff ffed 	bl	800158c <L6206_ErrorHandler>
	uint16_t speed = 0;
 80015b2:	2000      	movs	r0, #0
}
 80015b4:	bd08      	pop	{r3, pc}
	}else if (devicePrm.motionState[motorId] != INACTIVE) {
 80015b6:	181a      	adds	r2, r3, r0
 80015b8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80015bc:	2a08      	cmp	r2, #8
 80015be:	d0f8      	beq.n	80015b2 <L6206_GetCurrentSpeed+0x16>
		speed = devicePrm.speed[motorId];
 80015c0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80015c4:	8a98      	ldrh	r0, [r3, #20]
 80015c6:	bd08      	pop	{r3, pc}
 80015c8:	20002700 	.word	0x20002700
 80015cc:	0801d76b 	.word	0x0801d76b

080015d0 <L6206_GetDeviceState>:
{
 80015d0:	b508      	push	{r3, lr}
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 80015d2:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <L6206_GetDeviceState+0x24>)
 80015d4:	4908      	ldr	r1, [pc, #32]	; (80015f8 <L6206_GetDeviceState+0x28>)
 80015d6:	781a      	ldrb	r2, [r3, #0]
 80015d8:	5c8a      	ldrb	r2, [r1, r2]
 80015da:	4282      	cmp	r2, r0
 80015dc:	d205      	bcs.n	80015ea <L6206_GetDeviceState+0x1a>
		L6206_ErrorHandler(L6206_ERROR_1);
 80015de:	f248 0001 	movw	r0, #32769	; 0x8001
 80015e2:	f7ff ffd3 	bl	800158c <L6206_ErrorHandler>
	motorState_t state = INACTIVE;
 80015e6:	2008      	movs	r0, #8
 80015e8:	bd08      	pop	{r3, pc}
		state = devicePrm.motionState[motorId];
 80015ea:	4403      	add	r3, r0
 80015ec:	f893 0020 	ldrb.w	r0, [r3, #32]
}
 80015f0:	bd08      	pop	{r3, pc}
 80015f2:	bf00      	nop
 80015f4:	20002700 	.word	0x20002700
 80015f8:	0801d76b 	.word	0x0801d76b

080015fc <L6206_GetMaxSpeed>:
{
 80015fc:	b508      	push	{r3, lr}
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 80015fe:	4b08      	ldr	r3, [pc, #32]	; (8001620 <L6206_GetMaxSpeed+0x24>)
 8001600:	4908      	ldr	r1, [pc, #32]	; (8001624 <L6206_GetMaxSpeed+0x28>)
 8001602:	781a      	ldrb	r2, [r3, #0]
 8001604:	5c8a      	ldrb	r2, [r1, r2]
 8001606:	4282      	cmp	r2, r0
 8001608:	d205      	bcs.n	8001616 <L6206_GetMaxSpeed+0x1a>
		L6206_ErrorHandler(L6206_ERROR_1);
 800160a:	f248 0001 	movw	r0, #32769	; 0x8001
 800160e:	f7ff ffbd 	bl	800158c <L6206_ErrorHandler>
	uint16_t speed = 0;
 8001612:	2000      	movs	r0, #0
 8001614:	bd08      	pop	{r3, pc}
		speed = devicePrm.speed[motorId];
 8001616:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800161a:	8a98      	ldrh	r0, [r3, #20]
}
 800161c:	bd08      	pop	{r3, pc}
 800161e:	bf00      	nop
 8001620:	20002700 	.word	0x20002700
 8001624:	0801d76b 	.word	0x0801d76b

08001628 <L6206_GetBridgeStatus>:
{
 8001628:	b508      	push	{r3, lr}
	uint16_t status = L6206_Board_GetFlagPinState(bridgeId);
 800162a:	f005 f9f7 	bl	8006a1c <L6206_Board_GetFlagPinState>
}
 800162e:	b280      	uxth	r0, r0
 8001630:	bd08      	pop	{r3, pc}
	...

08001634 <L6206_FlagInterruptHandler>:
/******************************************************//**
* @brief  Handlers of the flag interrupt which calls the user callback (if defined)
* @retval None
**********************************************************/
void L6206_FlagInterruptHandler(void)
{
 8001634:	b510      	push	{r4, lr}
	uint16_t status = L6206_Board_GetFlagPinState(bridgeId);
 8001636:	2000      	movs	r0, #0
 8001638:	f005 f9f0 	bl	8006a1c <L6206_Board_GetFlagPinState>
	bool status;

	status = L6206_GetBridgeStatus(BRIDGE_A);
	if (status != devicePrm.bridgeEnabled[BRIDGE_A]) {
 800163c:	4c0c      	ldr	r4, [pc, #48]	; (8001670 <L6206_FlagInterruptHandler+0x3c>)
 800163e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	status = L6206_GetBridgeStatus(BRIDGE_A);
 8001642:	b2c0      	uxtb	r0, r0
	if (status != devicePrm.bridgeEnabled[BRIDGE_A]) {
 8001644:	4283      	cmp	r3, r0
		devicePrm.bridgeEnabled[BRIDGE_A] = status;
 8001646:	bf18      	it	ne
 8001648:	f884 0024 	strbne.w	r0, [r4, #36]	; 0x24
	uint16_t status = L6206_Board_GetFlagPinState(bridgeId);
 800164c:	2001      	movs	r0, #1
 800164e:	f005 f9e5 	bl	8006a1c <L6206_Board_GetFlagPinState>
	}

	status = L6206_GetBridgeStatus(BRIDGE_B);
	if (status != devicePrm.bridgeEnabled[BRIDGE_B]) {
 8001652:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
	status = L6206_GetBridgeStatus(BRIDGE_B);
 8001656:	b2c0      	uxtb	r0, r0
	if (status != devicePrm.bridgeEnabled[BRIDGE_B]) {
 8001658:	4283      	cmp	r3, r0
		devicePrm.bridgeEnabled[BRIDGE_B] = status;
	}

	if (flagInterruptCallback != 0) {
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <L6206_FlagInterruptHandler+0x40>)
		devicePrm.bridgeEnabled[BRIDGE_B] = status;
 800165c:	bf18      	it	ne
 800165e:	f884 0025 	strbne.w	r0, [r4, #37]	; 0x25
	if (flagInterruptCallback != 0) {
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	b113      	cbz	r3, 800166c <L6206_FlagInterruptHandler+0x38>
		flagInterruptCallback();
	}
}
 8001666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flagInterruptCallback();
 800166a:	4718      	bx	r3
 800166c:	bd10      	pop	{r4, pc}
 800166e:	bf00      	nop
 8001670:	20002700 	.word	0x20002700
 8001674:	2000272c 	.word	0x2000272c

08001678 <L6206_SetDualFullBridgeConfig>:
{
 8001678:	b510      	push	{r4, lr}
	devicePrm.config = (dualFullBridgeConfig_t)newConfig;
 800167a:	4c2b      	ldr	r4, [pc, #172]	; (8001728 <L6206_SetDualFullBridgeConfig+0xb0>)
 800167c:	7020      	strb	r0, [r4, #0]
	L6206_Board_PwmDeInit(INPUT_1A);
 800167e:	2000      	movs	r0, #0
 8001680:	f005 fa38 	bl	8006af4 <L6206_Board_PwmDeInit>
	L6206_Board_PwmDeInit(INPUT_2A);
 8001684:	2001      	movs	r0, #1
 8001686:	f005 fa35 	bl	8006af4 <L6206_Board_PwmDeInit>
	L6206_Board_PwmDeInit(INPUT_1B);
 800168a:	2002      	movs	r0, #2
 800168c:	f005 fa32 	bl	8006af4 <L6206_Board_PwmDeInit>
	L6206_Board_PwmDeInit(INPUT_2B);
 8001690:	2003      	movs	r0, #3
 8001692:	f005 fa2f 	bl	8006af4 <L6206_Board_PwmDeInit>
	switch (devicePrm.config) {
 8001696:	7823      	ldrb	r3, [r4, #0]
 8001698:	2b0c      	cmp	r3, #12
 800169a:	d844      	bhi.n	8001726 <L6206_SetDualFullBridgeConfig+0xae>
 800169c:	e8df f003 	tbb	[pc, r3]
 80016a0:	07070707 	.word	0x07070707
 80016a4:	1a1a1515 	.word	0x1a1a1515
 80016a8:	2d2d2525 	.word	0x2d2d2525
 80016ac:	38          	.byte	0x38
 80016ad:	00          	.byte	0x00
		L6206_Board_PwmInit(INPUT_1A);
 80016ae:	2000      	movs	r0, #0
 80016b0:	f005 fa44 	bl	8006b3c <L6206_Board_PwmInit>
		L6206_Board_PwmInit(INPUT_2A);
 80016b4:	2001      	movs	r0, #1
		L6206_Board_PwmInit(INPUT_1A);
 80016b6:	f005 fa41 	bl	8006b3c <L6206_Board_PwmInit>
		L6206_Board_PwmInit(INPUT_1B);
 80016ba:	2002      	movs	r0, #2
 80016bc:	f005 fa3e 	bl	8006b3c <L6206_Board_PwmInit>
		L6206_Board_PwmInit(INPUT_2B);
 80016c0:	2003      	movs	r0, #3
}
 80016c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		L6206_Board_PwmInit(INPUT_1A);
 80016c6:	f005 ba39 	b.w	8006b3c <L6206_Board_PwmInit>
		L6206_Board_PwmDeInit(INPUT_2A);
 80016ca:	2001      	movs	r0, #1
 80016cc:	f005 fa12 	bl	8006af4 <L6206_Board_PwmDeInit>
		L6206_Board_PwmInit(INPUT_1A);
 80016d0:	2000      	movs	r0, #0
 80016d2:	e7f0      	b.n	80016b6 <L6206_SetDualFullBridgeConfig+0x3e>
		L6206_Board_PwmDeInit(INPUT_2B);
 80016d4:	2003      	movs	r0, #3
 80016d6:	f005 fa0d 	bl	8006af4 <L6206_Board_PwmDeInit>
		L6206_Board_PwmInit(INPUT_1A);
 80016da:	2000      	movs	r0, #0
 80016dc:	f005 fa2e 	bl	8006b3c <L6206_Board_PwmInit>
		L6206_Board_PwmInit(INPUT_2A);
 80016e0:	2001      	movs	r0, #1
		L6206_Board_PwmInit(INPUT_1A);
 80016e2:	f005 fa2b 	bl	8006b3c <L6206_Board_PwmInit>
		L6206_Board_PwmInit(INPUT_1B);
 80016e6:	2002      	movs	r0, #2
 80016e8:	e7eb      	b.n	80016c2 <L6206_SetDualFullBridgeConfig+0x4a>
		L6206_Board_PwmDeInit(INPUT_2A);
 80016ea:	2001      	movs	r0, #1
 80016ec:	f005 fa02 	bl	8006af4 <L6206_Board_PwmDeInit>
		L6206_Board_PwmDeInit(INPUT_2B);
 80016f0:	2003      	movs	r0, #3
 80016f2:	f005 f9ff 	bl	8006af4 <L6206_Board_PwmDeInit>
		L6206_Board_PwmInit(INPUT_1A);
 80016f6:	2000      	movs	r0, #0
 80016f8:	e7f3      	b.n	80016e2 <L6206_SetDualFullBridgeConfig+0x6a>
		L6206_Board_PwmDeInit(INPUT_1B);
 80016fa:	2002      	movs	r0, #2
 80016fc:	f005 f9fa 	bl	8006af4 <L6206_Board_PwmDeInit>
		L6206_Board_PwmDeInit(INPUT_2B);
 8001700:	2003      	movs	r0, #3
 8001702:	f005 f9f7 	bl	8006af4 <L6206_Board_PwmDeInit>
		L6206_Board_PwmInit(INPUT_1A);
 8001706:	2000      	movs	r0, #0
 8001708:	f005 fa18 	bl	8006b3c <L6206_Board_PwmInit>
		L6206_Board_PwmInit(INPUT_2A);
 800170c:	2001      	movs	r0, #1
 800170e:	e7d8      	b.n	80016c2 <L6206_SetDualFullBridgeConfig+0x4a>
		L6206_Board_PwmDeInit(INPUT_2A);
 8001710:	2001      	movs	r0, #1
 8001712:	f005 f9ef 	bl	8006af4 <L6206_Board_PwmDeInit>
		L6206_Board_PwmDeInit(INPUT_1B);
 8001716:	2002      	movs	r0, #2
 8001718:	f005 f9ec 	bl	8006af4 <L6206_Board_PwmDeInit>
		L6206_Board_PwmDeInit(INPUT_2B);
 800171c:	2003      	movs	r0, #3
 800171e:	f005 f9e9 	bl	8006af4 <L6206_Board_PwmDeInit>
		L6206_Board_PwmInit(INPUT_1A);
 8001722:	2000      	movs	r0, #0
 8001724:	e7cd      	b.n	80016c2 <L6206_SetDualFullBridgeConfig+0x4a>
 8001726:	bd10      	pop	{r4, pc}
 8001728:	20002700 	.word	0x20002700

0800172c <L6206_DisableBridge>:
{
 800172c:	b570      	push	{r4, r5, r6, lr}
	devicePrm.bridgeEnabled[bridgeId] = FALSE;
 800172e:	4c0c      	ldr	r4, [pc, #48]	; (8001760 <L6206_DisableBridge+0x34>)
{
 8001730:	4606      	mov	r6, r0
	L6206_Board_DisableBridge(bridgeId);
 8001732:	f005 f917 	bl	8006964 <L6206_Board_DisableBridge>
	devicePrm.bridgeEnabled[bridgeId] = FALSE;
 8001736:	19a3      	adds	r3, r4, r6
 8001738:	2500      	movs	r5, #0
 800173a:	f883 5024 	strb.w	r5, [r3, #36]	; 0x24
	if (devicePrm.config >= PARALLELING_IN1A_IN2A__IN1B_IN2B__1_BIDIR_MOTOR) {
 800173e:	7823      	ldrb	r3, [r4, #0]
 8001740:	2b08      	cmp	r3, #8
 8001742:	d90b      	bls.n	800175c <L6206_DisableBridge+0x30>
		if (bridgeId == BRIDGE_A) {
 8001744:	b92e      	cbnz	r6, 8001752 <L6206_DisableBridge+0x26>
			L6206_Board_DisableBridge(BRIDGE_B);
 8001746:	2001      	movs	r0, #1
 8001748:	f005 f90c 	bl	8006964 <L6206_Board_DisableBridge>
			devicePrm.bridgeEnabled[BRIDGE_B] = FALSE;
 800174c:	f884 6025 	strb.w	r6, [r4, #37]	; 0x25
 8001750:	bd70      	pop	{r4, r5, r6, pc}
			L6206_Board_DisableBridge(BRIDGE_A);
 8001752:	4628      	mov	r0, r5
 8001754:	f005 f906 	bl	8006964 <L6206_Board_DisableBridge>
			devicePrm.bridgeEnabled[BRIDGE_A] = FALSE;
 8001758:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
 800175c:	bd70      	pop	{r4, r5, r6, pc}
 800175e:	bf00      	nop
 8001760:	20002700 	.word	0x20002700

08001764 <L6206_EnableBridge>:
{
 8001764:	b570      	push	{r4, r5, r6, lr}
	devicePrm.bridgeEnabled[bridgeId] = TRUE;
 8001766:	4d0f      	ldr	r5, [pc, #60]	; (80017a4 <L6206_EnableBridge+0x40>)
 8001768:	182b      	adds	r3, r5, r0
 800176a:	2401      	movs	r4, #1
 800176c:	f883 4024 	strb.w	r4, [r3, #36]	; 0x24
	if (devicePrm.config >= PARALLELING_IN1A_IN2A__IN1B_IN2B__1_BIDIR_MOTOR) {
 8001770:	782b      	ldrb	r3, [r5, #0]
 8001772:	2b08      	cmp	r3, #8
{
 8001774:	4606      	mov	r6, r0
	if (devicePrm.config >= PARALLELING_IN1A_IN2A__IN1B_IN2B__1_BIDIR_MOTOR) {
 8001776:	d910      	bls.n	800179a <L6206_EnableBridge+0x36>
		L6206_Board_EnableBridge(bridgeId, 0);
 8001778:	2100      	movs	r1, #0
 800177a:	f005 f91b 	bl	80069b4 <L6206_Board_EnableBridge>
			L6206_Board_EnableBridge(BRIDGE_B, 1);
 800177e:	4621      	mov	r1, r4
		if (bridgeId == BRIDGE_A) {
 8001780:	b92e      	cbnz	r6, 800178e <L6206_EnableBridge+0x2a>
			L6206_Board_EnableBridge(BRIDGE_B, 1);
 8001782:	4620      	mov	r0, r4
 8001784:	f005 f916 	bl	80069b4 <L6206_Board_EnableBridge>
			devicePrm.bridgeEnabled[BRIDGE_B] = TRUE;
 8001788:	f885 4025 	strb.w	r4, [r5, #37]	; 0x25
 800178c:	bd70      	pop	{r4, r5, r6, pc}
			L6206_Board_EnableBridge(BRIDGE_A, 1);
 800178e:	2000      	movs	r0, #0
 8001790:	f005 f910 	bl	80069b4 <L6206_Board_EnableBridge>
			devicePrm.bridgeEnabled[BRIDGE_A] = TRUE;
 8001794:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
 8001798:	bd70      	pop	{r4, r5, r6, pc}
		L6206_Board_EnableBridge(bridgeId, 1);
 800179a:	4621      	mov	r1, r4
}
 800179c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		L6206_Board_EnableBridge(bridgeId, 1);
 80017a0:	f005 b908 	b.w	80069b4 <L6206_Board_EnableBridge>
 80017a4:	20002700 	.word	0x20002700

080017a8 <L6206_GetMotorHandle>:
}
 80017a8:	4800      	ldr	r0, [pc, #0]	; (80017ac <L6206_GetMotorHandle+0x4>)
 80017aa:	4770      	bx	lr
 80017ac:	200011f8 	.word	0x200011f8

080017b0 <L6206_GetBridgeIdUsedByMotorId>:
* @retval bridgeId 0 for bridge A , 1 for bridge B
**********************************************************/
uint8_t L6206_GetBridgeIdUsedByMotorId(uint8_t motorId)
{
	uint8_t bridgeId;
	switch (devicePrm.config) {
 80017b0:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <L6206_GetBridgeIdUsedByMotorId+0x30>)
 80017b2:	781a      	ldrb	r2, [r3, #0]
 80017b4:	2a08      	cmp	r2, #8
 80017b6:	d808      	bhi.n	80017ca <L6206_GetBridgeIdUsedByMotorId+0x1a>
 80017b8:	2301      	movs	r3, #1
 80017ba:	4093      	lsls	r3, r2
 80017bc:	f240 1273 	movw	r2, #371	; 0x173
 80017c0:	4213      	tst	r3, r2
 80017c2:	d104      	bne.n	80017ce <L6206_GetBridgeIdUsedByMotorId+0x1e>
 80017c4:	f013 038c 	ands.w	r3, r3, #140	; 0x8c
 80017c8:	d105      	bne.n	80017d6 <L6206_GetBridgeIdUsedByMotorId+0x26>
	case PARALLELING_IN1A_IN2A__IN1B_IN2B__1_BIDIR_MOTOR:
	case PARALLELING_IN1A_IN1B__IN2A_IN2B__1_UNDIR_MOTOR_BRIDGE_1A__1_UNDIR_MOTOR_BRIDGE_2A:
	case PARALLELING_IN1A_IN1B__IN2A_IN2B__1_BIDIR_MOTOR:
	case PARALLELING_ALL_WITH_IN1A___1_UNDIR_MOTOR:
	default:
		bridgeId = 0;
 80017ca:	2000      	movs	r0, #0
		break;
	}
	return(bridgeId);
}
 80017cc:	4770      	bx	lr
			bridgeId = 1;
 80017ce:	3000      	adds	r0, #0
 80017d0:	bf18      	it	ne
 80017d2:	2001      	movne	r0, #1
 80017d4:	4770      	bx	lr
 80017d6:	2801      	cmp	r0, #1
 80017d8:	bf94      	ite	ls
 80017da:	2000      	movls	r0, #0
 80017dc:	2001      	movhi	r0, #1
 80017de:	4770      	bx	lr
 80017e0:	20002700 	.word	0x20002700

080017e4 <L6206_GetMotorIdUsingbridgeInput>:
**********************************************************/
uint8_t L6206_GetMotorIdUsingbridgeInput(uint8_t bridgeInput)
{
	uint8_t motorId;

	switch (devicePrm.config) {
 80017e4:	4b13      	ldr	r3, [pc, #76]	; (8001834 <L6206_GetMotorIdUsingbridgeInput+0x50>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b0a      	cmp	r3, #10
 80017ea:	d81f      	bhi.n	800182c <L6206_GetMotorIdUsingbridgeInput+0x48>
 80017ec:	e8df f003 	tbb	[pc, r3]
 80017f0:	16120b06 	.word	0x16120b06
 80017f4:	12060b06 	.word	0x12060b06
 80017f8:	1e06      	.short	0x1e06
 80017fa:	1b          	.byte	0x1b
 80017fb:	00          	.byte	0x00
	case PARALLELING_IN1B_IN2B__1_BIDIR_MOTOR_BRIDGE_A__1_UNDIR_MOTOR_BRIDGE_B:
	case PARALLELING_IN1A_IN2A__IN1B_IN2B__1_UNDIR_MOTOR_BRIDGE_A__1_UNDIR_MOTOR_BRIDGE_B:
		if (bridgeInput >= INPUT_1B) {
			motorId = 1;
		}else  {
			motorId = 0;
 80017fc:	2801      	cmp	r0, #1
 80017fe:	bf94      	ite	ls
 8001800:	2000      	movls	r0, #0
 8001802:	2001      	movhi	r0, #1
 8001804:	4770      	bx	lr
		}
		break;
	case PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__2_UNDIR_MOTOR_BRIDGE_B:
	case   PARALLELING_IN1A_IN2A__1_UNDIR_MOTOR_BRIDGE_A__2_UNDIR_MOTOR_BRIDGE_B:
		if (bridgeInput == INPUT_2B) {
 8001806:	2803      	cmp	r0, #3
 8001808:	d012      	beq.n	8001830 <L6206_GetMotorIdUsingbridgeInput+0x4c>
			motorId = 0;
 800180a:	2802      	cmp	r0, #2
			motorId = 0;
		}
		break;
	case PARALLELING_NONE___2_UNDIR_MOTOR_BRIDGE_A__2_UNDIR_MOTOR_BRIDGE_B:
		if (bridgeInput == INPUT_2B) {
			motorId = 3;
 800180c:	bf14      	ite	ne
 800180e:	2000      	movne	r0, #0
 8001810:	2001      	moveq	r0, #1
 8001812:	4770      	bx	lr
		if (bridgeInput >= INPUT_1B) {
 8001814:	2801      	cmp	r0, #1
 8001816:	d80b      	bhi.n	8001830 <L6206_GetMotorIdUsingbridgeInput+0x4c>
			motorId = 3;
 8001818:	2801      	cmp	r0, #1
 800181a:	e7f7      	b.n	800180c <L6206_GetMotorIdUsingbridgeInput+0x28>
		if (bridgeInput == INPUT_2B) {
 800181c:	2803      	cmp	r0, #3
 800181e:	d008      	beq.n	8001832 <L6206_GetMotorIdUsingbridgeInput+0x4e>
		}else if (bridgeInput == INPUT_1B) {
 8001820:	2802      	cmp	r0, #2
 8001822:	d1f9      	bne.n	8001818 <L6206_GetMotorIdUsingbridgeInput+0x34>
 8001824:	4770      	bx	lr
		}else  {
			motorId = 0;
		}
		break;
	case PARALLELING_IN1A_IN1B__IN2A_IN2B__1_UNDIR_MOTOR_BRIDGE_1A__1_UNDIR_MOTOR_BRIDGE_2A:
		if ((bridgeInput == INPUT_2A) || (bridgeInput == INPUT_2B)) {
 8001826:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 800182a:	e7f5      	b.n	8001818 <L6206_GetMotorIdUsingbridgeInput+0x34>
		break;
	case   PARALLELING_IN1A_IN2A__IN1B_IN2B__1_BIDIR_MOTOR:
	case   PARALLELING_IN1A_IN1B__IN2A_IN2B__1_BIDIR_MOTOR:
	case   PARALLELING_ALL_WITH_IN1A___1_UNDIR_MOTOR:
	default:
		motorId = 0;
 800182c:	2000      	movs	r0, #0
 800182e:	4770      	bx	lr
			motorId = 2;
 8001830:	2002      	movs	r0, #2
		break;
	}

	return(motorId);
}
 8001832:	4770      	bx	lr
 8001834:	20002700 	.word	0x20002700

08001838 <L6206_GetBridgeInputUsedByMotorId>:
* @retval PWM input 0 for 1A, 1 for 2A, 2 for 1B, 3 for 3B
**********************************************************/
uint8_t L6206_GetBridgeInputUsedByMotorId(uint8_t motorId)
{
	uint8_t bridgeInput;
	switch (devicePrm.config) {
 8001838:	4b21      	ldr	r3, [pc, #132]	; (80018c0 <L6206_GetBridgeInputUsedByMotorId+0x88>)
 800183a:	781a      	ldrb	r2, [r3, #0]
 800183c:	2a0b      	cmp	r2, #11
 800183e:	d83d      	bhi.n	80018bc <L6206_GetBridgeInputUsedByMotorId+0x84>
 8001840:	e8df f002 	tbb	[pc, r2]
 8001844:	1a150e06 	.word	0x1a150e06
 8001848:	2b272421 	.word	0x2b272421
 800184c:	07383230 	.word	0x07383230
	case PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B:
		if (motorId == 0) {
 8001850:	b918      	cbnz	r0, 800185a <L6206_GetBridgeInputUsedByMotorId+0x22>
		}else  {
			bridgeInput = INPUT_2A;
		}
		break;
	case PARALLELING_IN1A_IN1B__IN2A_IN2B__1_BIDIR_MOTOR:
		if (devicePrm.direction[0] == FORWARD) {
 8001852:	7f18      	ldrb	r0, [r3, #28]
				bridgeInput = INPUT_1B;
 8001854:	f110 30ff 	adds.w	r0, r0, #4294967295
 8001858:	e02d      	b.n	80018b6 <L6206_GetBridgeInputUsedByMotorId+0x7e>
			if (devicePrm.direction[1] == FORWARD) {
 800185a:	7f5b      	ldrb	r3, [r3, #29]
			bridgeInput = INPUT_1B;
 800185c:	2b01      	cmp	r3, #1
 800185e:	e002      	b.n	8001866 <L6206_GetBridgeInputUsedByMotorId+0x2e>
		if (motorId == 0) {
 8001860:	2800      	cmp	r0, #0
 8001862:	d0f6      	beq.n	8001852 <L6206_GetBridgeInputUsedByMotorId+0x1a>
			bridgeInput = INPUT_1B;
 8001864:	2801      	cmp	r0, #1
 8001866:	bf14      	ite	ne
 8001868:	2003      	movne	r0, #3
 800186a:	2002      	moveq	r0, #2
 800186c:	4770      	bx	lr
		if (motorId == 0) {
 800186e:	b330      	cbz	r0, 80018be <L6206_GetBridgeInputUsedByMotorId+0x86>
		}else if (motorId == 1) {
 8001870:	2801      	cmp	r0, #1
 8001872:	d024      	beq.n	80018be <L6206_GetBridgeInputUsedByMotorId+0x86>
			if (devicePrm.direction[2] == FORWARD) {
 8001874:	7f9b      	ldrb	r3, [r3, #30]
 8001876:	e7f1      	b.n	800185c <L6206_GetBridgeInputUsedByMotorId+0x24>
		if (motorId == 0) {
 8001878:	b308      	cbz	r0, 80018be <L6206_GetBridgeInputUsedByMotorId+0x86>
		}else if (motorId == 1) {
 800187a:	2801      	cmp	r0, #1
 800187c:	d01f      	beq.n	80018be <L6206_GetBridgeInputUsedByMotorId+0x86>
				bridgeInput = INPUT_2B;
 800187e:	2802      	cmp	r0, #2
 8001880:	bf18      	it	ne
 8001882:	2003      	movne	r0, #3
 8001884:	4770      	bx	lr
		if (motorId == 0) {
 8001886:	2800      	cmp	r0, #0
 8001888:	d1e7      	bne.n	800185a <L6206_GetBridgeInputUsedByMotorId+0x22>
 800188a:	4770      	bx	lr
		if (motorId == 0) {
 800188c:	2800      	cmp	r0, #0
 800188e:	d1e9      	bne.n	8001864 <L6206_GetBridgeInputUsedByMotorId+0x2c>
 8001890:	4770      	bx	lr
		if (motorId == 0) {
 8001892:	2800      	cmp	r0, #0
 8001894:	d0dd      	beq.n	8001852 <L6206_GetBridgeInputUsedByMotorId+0x1a>
			bridgeInput = INPUT_1B;
 8001896:	2002      	movs	r0, #2
 8001898:	4770      	bx	lr
		if (motorId == 0) {
 800189a:	b180      	cbz	r0, 80018be <L6206_GetBridgeInputUsedByMotorId+0x86>
			bridgeInput = INPUT_1B;
 800189c:	2801      	cmp	r0, #1
 800189e:	bf18      	it	ne
 80018a0:	2002      	movne	r0, #2
 80018a2:	4770      	bx	lr
 80018a4:	2800      	cmp	r0, #0
 80018a6:	e7fa      	b.n	800189e <L6206_GetBridgeInputUsedByMotorId+0x66>
		if (devicePrm.direction[0] == FORWARD) {
 80018a8:	7f1b      	ldrb	r3, [r3, #28]
			bridgeInput = INPUT_1A;
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	bf14      	ite	ne
 80018ae:	2002      	movne	r0, #2
 80018b0:	2000      	moveq	r0, #0
 80018b2:	4770      	bx	lr
				bridgeInput = INPUT_1B;
 80018b4:	3000      	adds	r0, #0
 80018b6:	bf18      	it	ne
 80018b8:	2001      	movne	r0, #1
 80018ba:	4770      	bx	lr
			bridgeInput = INPUT_2A;
		}
		break;
	case PARALLELING_ALL_WITH_IN1A___1_UNDIR_MOTOR:
	default:
		bridgeInput = INPUT_1A;
 80018bc:	2000      	movs	r0, #0
		break;
	}
	return(bridgeInput);
}
 80018be:	4770      	bx	lr
 80018c0:	20002700 	.word	0x20002700

080018c4 <L6206_GetSecondBridgeInputUsedByMotorId>:
* @brief  Get the second PWM input used by a given bidirectionnal motor
* @param motorId from 0 to MAX_NUMBER_OF_BRUSH_DC_MOTORS
* @retval PWM input 0 for 1A, 1 for 2A, 2 for 1B, 3 for 3B
**********************************************************/
uint8_t L6206_GetSecondBridgeInputUsedByMotorId(uint8_t motorId)
{
 80018c4:	b508      	push	{r3, lr}
	uint8_t bridgeInput = 0xFF;

	switch (devicePrm.config) {
 80018c6:	4b17      	ldr	r3, [pc, #92]	; (8001924 <L6206_GetSecondBridgeInputUsedByMotorId+0x60>)
 80018c8:	781a      	ldrb	r2, [r3, #0]
 80018ca:	2a0b      	cmp	r2, #11
 80018cc:	d81d      	bhi.n	800190a <L6206_GetSecondBridgeInputUsedByMotorId+0x46>
 80018ce:	e8df f002 	tbb	[pc, r2]
 80018d2:	1a06      	.short	0x1a06
 80018d4:	1c111c0c 	.word	0x1c111c0c
 80018d8:	221c1c1a 	.word	0x221c1c1a
 80018dc:	071c      	.short	0x071c
	case PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B:
		if (motorId == 0) {
 80018de:	b958      	cbnz	r0, 80018f8 <L6206_GetSecondBridgeInputUsedByMotorId+0x34>
			bridgeInput = INPUT_1A;
		}
		break;

	case PARALLELING_IN1A_IN1B__IN2A_IN2B__1_BIDIR_MOTOR:
		if (devicePrm.direction[0] == FORWARD) {
 80018e0:	7f18      	ldrb	r0, [r3, #28]
			bridgeInput = INPUT_1B;
 80018e2:	1e43      	subs	r3, r0, #1
 80018e4:	4258      	negs	r0, r3
 80018e6:	4158      	adcs	r0, r3
 80018e8:	bd08      	pop	{r3, pc}
		if (motorId == 2) {
 80018ea:	2802      	cmp	r0, #2
 80018ec:	d10d      	bne.n	800190a <L6206_GetSecondBridgeInputUsedByMotorId+0x46>
			if (devicePrm.direction[2] == FORWARD) {
 80018ee:	7f9b      	ldrb	r3, [r3, #30]
				bridgeInput = INPUT_2B;
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	e005      	b.n	8001900 <L6206_GetSecondBridgeInputUsedByMotorId+0x3c>
		if (motorId == 1) {
 80018f4:	2801      	cmp	r0, #1
 80018f6:	d108      	bne.n	800190a <L6206_GetSecondBridgeInputUsedByMotorId+0x46>
			if (devicePrm.direction[1] == FORWARD) {
 80018f8:	7f5b      	ldrb	r3, [r3, #29]
				bridgeInput = INPUT_2B;
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	bf18      	it	ne
 80018fe:	2002      	movne	r0, #2
 8001900:	bf08      	it	eq
 8001902:	2003      	moveq	r0, #3
 8001904:	bd08      	pop	{r3, pc}
		if (motorId == 0) {
 8001906:	2800      	cmp	r0, #0
 8001908:	d0ea      	beq.n	80018e0 <L6206_GetSecondBridgeInputUsedByMotorId+0x1c>
	default:
		bridgeInput = 0XFF;
		break;
	}
	if (bridgeInput == 0XFF) {
		L6206_ErrorHandler(L6206_ERROR_2);
 800190a:	f248 0002 	movw	r0, #32770	; 0x8002
 800190e:	f7ff fe3d 	bl	800158c <L6206_ErrorHandler>
 8001912:	20ff      	movs	r0, #255	; 0xff
	}

	return(bridgeInput);
}
 8001914:	bd08      	pop	{r3, pc}
		if (devicePrm.direction[0] == FORWARD) {
 8001916:	7f1b      	ldrb	r3, [r3, #28]
			bridgeInput = INPUT_1A;
 8001918:	2b01      	cmp	r3, #1
 800191a:	bf0c      	ite	eq
 800191c:	2002      	moveq	r0, #2
 800191e:	2000      	movne	r0, #0
 8001920:	bd08      	pop	{r3, pc}
 8001922:	bf00      	nop
 8001924:	20002700 	.word	0x20002700

08001928 <L6206_IsBidirectionnalMotor>:
* @retval True if motor is bidirectionnal, else false
**********************************************************/
bool L6206_IsBidirectionnalMotor(uint8_t motorId)
{
	bool isBiDir = FALSE;
	switch (devicePrm.config) {
 8001928:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <L6206_IsBidirectionnalMotor+0x38>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b0b      	cmp	r3, #11
 800192e:	d814      	bhi.n	800195a <L6206_IsBidirectionnalMotor+0x32>
 8001930:	e8df f003 	tbb	[pc, r3]
 8001934:	130c0806 	.word	0x130c0806
 8001938:	13081311 	.word	0x13081311
 800193c:	06130613 	.word	0x06130613
	case PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B:
	case PARALLELING_IN1A_IN2A__IN1B_IN2B__1_BIDIR_MOTOR:
	case PARALLELING_IN1A_IN1B__IN2A_IN2B__1_BIDIR_MOTOR:
		isBiDir = TRUE;
 8001940:	2001      	movs	r0, #1
 8001942:	4770      	bx	lr
 8001944:	fab0 f080 	clz	r0, r0
 8001948:	0940      	lsrs	r0, r0, #5
 800194a:	4770      	bx	lr
 800194c:	2802      	cmp	r0, #2
 800194e:	bf14      	ite	ne
 8001950:	2000      	movne	r0, #0
 8001952:	2001      	moveq	r0, #1
 8001954:	4770      	bx	lr
 8001956:	2801      	cmp	r0, #1
 8001958:	e7f9      	b.n	800194e <L6206_IsBidirectionnalMotor+0x26>
	bool isBiDir = FALSE;
 800195a:	2000      	movs	r0, #0
	default:
		break;
	}

	return(isBiDir);
}
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	20002700 	.word	0x20002700

08001964 <L6206_HardStop>:
{
 8001964:	b570      	push	{r4, r5, r6, lr}
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 8001966:	4c13      	ldr	r4, [pc, #76]	; (80019b4 <L6206_HardStop+0x50>)
 8001968:	4a13      	ldr	r2, [pc, #76]	; (80019b8 <L6206_HardStop+0x54>)
 800196a:	7823      	ldrb	r3, [r4, #0]
 800196c:	5cd3      	ldrb	r3, [r2, r3]
 800196e:	4283      	cmp	r3, r0
{
 8001970:	4605      	mov	r5, r0
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 8001972:	d205      	bcs.n	8001980 <L6206_HardStop+0x1c>
		L6206_ErrorHandler(L6206_ERROR_1);
 8001974:	f248 0001 	movw	r0, #32769	; 0x8001
}
 8001978:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		L6206_ErrorHandler(L6206_ERROR_1);
 800197c:	f7ff be06 	b.w	800158c <L6206_ErrorHandler>
	}else if (devicePrm.motionState[motorId] != INACTIVE) {
 8001980:	1823      	adds	r3, r4, r0
 8001982:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001986:	2b08      	cmp	r3, #8
 8001988:	d012      	beq.n	80019b0 <L6206_HardStop+0x4c>
		bridgeInputFirstPWM = L6206_GetBridgeInputUsedByMotorId(motorId);
 800198a:	f7ff ff55 	bl	8001838 <L6206_GetBridgeInputUsedByMotorId>
 800198e:	4606      	mov	r6, r0
		if (L6206_IsBidirectionnalMotor(motorId)) {
 8001990:	4628      	mov	r0, r5
 8001992:	f7ff ffc9 	bl	8001928 <L6206_IsBidirectionnalMotor>
 8001996:	b120      	cbz	r0, 80019a2 <L6206_HardStop+0x3e>
			bridgeInputSecondPWM = L6206_GetSecondBridgeInputUsedByMotorId(motorId);
 8001998:	4628      	mov	r0, r5
 800199a:	f7ff ff93 	bl	80018c4 <L6206_GetSecondBridgeInputUsedByMotorId>
			L6206_Board_PwmStop(bridgeInputSecondPWM);
 800199e:	f005 f951 	bl	8006c44 <L6206_Board_PwmStop>
		L6206_Board_PwmStop(bridgeInputFirstPWM);
 80019a2:	4630      	mov	r0, r6
		devicePrm.motionState[motorId] = INACTIVE;
 80019a4:	442c      	add	r4, r5
		L6206_Board_PwmStop(bridgeInputFirstPWM);
 80019a6:	f005 f94d 	bl	8006c44 <L6206_Board_PwmStop>
		devicePrm.motionState[motorId] = INACTIVE;
 80019aa:	2308      	movs	r3, #8
 80019ac:	f884 3020 	strb.w	r3, [r4, #32]
 80019b0:	bd70      	pop	{r4, r5, r6, pc}
 80019b2:	bf00      	nop
 80019b4:	20002700 	.word	0x20002700
 80019b8:	0801d76b 	.word	0x0801d76b

080019bc <L6206_HardHiz>:
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 80019bc:	491c      	ldr	r1, [pc, #112]	; (8001a30 <L6206_HardHiz+0x74>)
{
 80019be:	b538      	push	{r3, r4, r5, lr}
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 80019c0:	780d      	ldrb	r5, [r1, #0]
 80019c2:	4b1c      	ldr	r3, [pc, #112]	; (8001a34 <L6206_HardHiz+0x78>)
 80019c4:	5d5b      	ldrb	r3, [r3, r5]
 80019c6:	4283      	cmp	r3, r0
{
 80019c8:	4604      	mov	r4, r0
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 80019ca:	d205      	bcs.n	80019d8 <L6206_HardHiz+0x1c>
		L6206_ErrorHandler(L6206_ERROR_1);
 80019cc:	f248 0001 	movw	r0, #32769	; 0x8001
}
 80019d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		L6206_ErrorHandler(L6206_ERROR_1);
 80019d4:	f7ff bdda 	b.w	800158c <L6206_ErrorHandler>
		uint8_t bridgeId = L6206_GetBridgeIdUsedByMotorId(motorId);
 80019d8:	f7ff feea 	bl	80017b0 <L6206_GetBridgeIdUsedByMotorId>
		if (devicePrm.bridgeEnabled[bridgeId] != FALSE) {
 80019dc:	180b      	adds	r3, r1, r0
 80019de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019e2:	b193      	cbz	r3, 8001a0a <L6206_HardHiz+0x4e>
			switch (devicePrm.config) {
 80019e4:	3d01      	subs	r5, #1
 80019e6:	2d09      	cmp	r5, #9
 80019e8:	d81f      	bhi.n	8001a2a <L6206_HardHiz+0x6e>
 80019ea:	e8df f005 	tbb	[pc, r5]
 80019ee:	1305      	.short	0x1305
 80019f0:	1e051e17 	.word	0x1e051e17
 80019f4:	151e1e13 	.word	0x151e1e13
				if ((motorId > 0) && (devicePrm.motionState[1] == STEADY) && (devicePrm.motionState[2] == STEADY)) {
 80019f8:	b1bc      	cbz	r4, 8001a2a <L6206_HardHiz+0x6e>
 80019fa:	6a0b      	ldr	r3, [r1, #32]
 80019fc:	4a0e      	ldr	r2, [pc, #56]	; (8001a38 <L6206_HardHiz+0x7c>)
 80019fe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001a02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a06:	4293      	cmp	r3, r2
				if ((devicePrm.motionState[0] == STEADY) && (devicePrm.motionState[1] == STEADY)) {
 8001a08:	d10f      	bne.n	8001a2a <L6206_HardHiz+0x6e>
		L6206_HardStop(motorId);
 8001a0a:	4620      	mov	r0, r4
}
 8001a0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		L6206_HardStop(motorId);
 8001a10:	f7ff bfa8 	b.w	8001964 <L6206_HardStop>
				if ((motorId < 2) && (devicePrm.motionState[0] == STEADY) && (devicePrm.motionState[1] == STEADY)) {
 8001a14:	2c01      	cmp	r4, #1
 8001a16:	d808      	bhi.n	8001a2a <L6206_HardHiz+0x6e>
				if ((devicePrm.motionState[0] == STEADY) && (devicePrm.motionState[1] == STEADY)) {
 8001a18:	8c0a      	ldrh	r2, [r1, #32]
 8001a1a:	e002      	b.n	8001a22 <L6206_HardHiz+0x66>
				if (((motorId < 2) && (devicePrm.motionState[0] == STEADY) && (devicePrm.motionState[1] == STEADY)) ||
 8001a1c:	2c01      	cmp	r4, #1
 8001a1e:	d9fb      	bls.n	8001a18 <L6206_HardHiz+0x5c>
				    ((motorId > 1) && (devicePrm.motionState[2] == STEADY) && (devicePrm.motionState[3] == STEADY))) {
 8001a20:	8c4a      	ldrh	r2, [r1, #34]	; 0x22
				if ((devicePrm.motionState[0] == STEADY) && (devicePrm.motionState[1] == STEADY)) {
 8001a22:	f240 3303 	movw	r3, #771	; 0x303
 8001a26:	429a      	cmp	r2, r3
 8001a28:	e7ee      	b.n	8001a08 <L6206_HardHiz+0x4c>
				L6206_DisableBridge(bridgeId);
 8001a2a:	f7ff fe7f 	bl	800172c <L6206_DisableBridge>
 8001a2e:	e7ec      	b.n	8001a0a <L6206_HardHiz+0x4e>
 8001a30:	20002700 	.word	0x20002700
 8001a34:	0801d76b 	.word	0x0801d76b
 8001a38:	00030300 	.word	0x00030300

08001a3c <L6206_Run>:
{
 8001a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 8001a3e:	4c25      	ldr	r4, [pc, #148]	; (8001ad4 <L6206_Run+0x98>)
 8001a40:	4a25      	ldr	r2, [pc, #148]	; (8001ad8 <L6206_Run+0x9c>)
 8001a42:	7823      	ldrb	r3, [r4, #0]
 8001a44:	5cd3      	ldrb	r3, [r2, r3]
 8001a46:	4283      	cmp	r3, r0
{
 8001a48:	4605      	mov	r5, r0
 8001a4a:	460e      	mov	r6, r1
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 8001a4c:	d205      	bcs.n	8001a5a <L6206_Run+0x1e>
		L6206_ErrorHandler(L6206_ERROR_1);
 8001a4e:	f248 0001 	movw	r0, #32769	; 0x8001
}
 8001a52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		L6206_ErrorHandler(L6206_ERROR_1);
 8001a56:	f7ff bd99 	b.w	800158c <L6206_ErrorHandler>
	}else if ((devicePrm.motionState[motorId] == INACTIVE) ||
 8001a5a:	1823      	adds	r3, r4, r0
 8001a5c:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001a60:	2a08      	cmp	r2, #8
 8001a62:	d004      	beq.n	8001a6e <L6206_Run+0x32>
 8001a64:	7f1b      	ldrb	r3, [r3, #28]
 8001a66:	428b      	cmp	r3, r1
 8001a68:	d033      	beq.n	8001ad2 <L6206_Run+0x96>
			L6206_HardStop(motorId);
 8001a6a:	f7ff ff7b 	bl	8001964 <L6206_HardStop>
		devicePrm.direction[motorId] = direction;
 8001a6e:	1963      	adds	r3, r4, r5
		devicePrm.motionState[motorId] = STEADY;
 8001a70:	2203      	movs	r2, #3
		bridgeId = L6206_GetBridgeIdUsedByMotorId(motorId);
 8001a72:	4628      	mov	r0, r5
		devicePrm.direction[motorId] = direction;
 8001a74:	771e      	strb	r6, [r3, #28]
		devicePrm.motionState[motorId] = STEADY;
 8001a76:	f883 2020 	strb.w	r2, [r3, #32]
		bridgeId = L6206_GetBridgeIdUsedByMotorId(motorId);
 8001a7a:	f7ff fe99 	bl	80017b0 <L6206_GetBridgeIdUsedByMotorId>
 8001a7e:	4607      	mov	r7, r0
		bridgeInput = L6206_GetBridgeInputUsedByMotorId(motorId);
 8001a80:	4628      	mov	r0, r5
 8001a82:	f7ff fed9 	bl	8001838 <L6206_GetBridgeInputUsedByMotorId>
 8001a86:	4606      	mov	r6, r0
		L6206_EnableBridge(bridgeId);
 8001a88:	4638      	mov	r0, r7
 8001a8a:	f7ff fe6b 	bl	8001764 <L6206_EnableBridge>
		if (L6206_IsBidirectionnalMotor(motorId)) {
 8001a8e:	4628      	mov	r0, r5
 8001a90:	f7ff ff4a 	bl	8001928 <L6206_IsBidirectionnalMotor>
 8001a94:	f105 0308 	add.w	r3, r5, #8
 8001a98:	00b1      	lsls	r1, r6, #2
			L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], (100 - devicePrm.speed[motorId]));
 8001a9a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		if (L6206_IsBidirectionnalMotor(motorId)) {
 8001a9e:	b198      	cbz	r0, 8001ac8 <L6206_Run+0x8c>
			L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], (100 - devicePrm.speed[motorId]));
 8001aa0:	791a      	ldrb	r2, [r3, #4]
 8001aa2:	4421      	add	r1, r4
 8001aa4:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	6849      	ldr	r1, [r1, #4]
 8001aac:	4630      	mov	r0, r6
 8001aae:	f005 f887 	bl	8006bc0 <L6206_Board_PwmSetFreq>
			bridgeInput = L6206_GetSecondBridgeInputUsedByMotorId(motorId);
 8001ab2:	4628      	mov	r0, r5
 8001ab4:	f7ff ff06 	bl	80018c4 <L6206_GetSecondBridgeInputUsedByMotorId>
			L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], 100);
 8001ab8:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8001abc:	2264      	movs	r2, #100	; 0x64
 8001abe:	6861      	ldr	r1, [r4, #4]
}
 8001ac0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], devicePrm.speed[motorId]);
 8001ac4:	f005 b87c 	b.w	8006bc0 <L6206_Board_PwmSetFreq>
 8001ac8:	440c      	add	r4, r1
 8001aca:	791a      	ldrb	r2, [r3, #4]
 8001acc:	6861      	ldr	r1, [r4, #4]
 8001ace:	4630      	mov	r0, r6
 8001ad0:	e7f6      	b.n	8001ac0 <L6206_Run+0x84>
 8001ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ad4:	20002700 	.word	0x20002700
 8001ad8:	0801d76b 	.word	0x0801d76b

08001adc <L6206_SetMaxSpeed>:
{
 8001adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 8001ade:	4c15      	ldr	r4, [pc, #84]	; (8001b34 <L6206_SetMaxSpeed+0x58>)
 8001ae0:	4a15      	ldr	r2, [pc, #84]	; (8001b38 <L6206_SetMaxSpeed+0x5c>)
 8001ae2:	7823      	ldrb	r3, [r4, #0]
 8001ae4:	5cd3      	ldrb	r3, [r2, r3]
 8001ae6:	4283      	cmp	r3, r0
{
 8001ae8:	4606      	mov	r6, r0
 8001aea:	460d      	mov	r5, r1
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 8001aec:	d205      	bcs.n	8001afa <L6206_SetMaxSpeed+0x1e>
		L6206_ErrorHandler(L6206_ERROR_1);
 8001aee:	f248 0001 	movw	r0, #32769	; 0x8001
 8001af2:	f7ff fd4b 	bl	800158c <L6206_ErrorHandler>
	bool cmdExecuted = FALSE;
 8001af6:	2000      	movs	r0, #0
 8001af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		devicePrm.speed[motorId] = newMaxSpeed;
 8001afa:	eb04 0340 	add.w	r3, r4, r0, lsl #1
 8001afe:	8299      	strh	r1, [r3, #20]
		if (devicePrm.motionState[motorId] != INACTIVE) {
 8001b00:	1823      	adds	r3, r4, r0
 8001b02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b06:	2b08      	cmp	r3, #8
 8001b08:	d00f      	beq.n	8001b2a <L6206_SetMaxSpeed+0x4e>
			bridgeInput = L6206_GetBridgeInputUsedByMotorId(motorId);
 8001b0a:	f7ff fe95 	bl	8001838 <L6206_GetBridgeInputUsedByMotorId>
 8001b0e:	4607      	mov	r7, r0
			if (L6206_IsBidirectionnalMotor(motorId)) {
 8001b10:	4630      	mov	r0, r6
 8001b12:	f7ff ff09 	bl	8001928 <L6206_IsBidirectionnalMotor>
 8001b16:	00bb      	lsls	r3, r7, #2
 8001b18:	b148      	cbz	r0, 8001b2e <L6206_SetMaxSpeed+0x52>
				L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], (100 - devicePrm.speed[motorId]));
 8001b1a:	f1c5 0264 	rsb	r2, r5, #100	; 0x64
 8001b1e:	441c      	add	r4, r3
 8001b20:	b2d2      	uxtb	r2, r2
				L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], devicePrm.speed[motorId]);
 8001b22:	6861      	ldr	r1, [r4, #4]
 8001b24:	4638      	mov	r0, r7
 8001b26:	f005 f84b 	bl	8006bc0 <L6206_Board_PwmSetFreq>
		cmdExecuted = TRUE;
 8001b2a:	2001      	movs	r0, #1
}
 8001b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], devicePrm.speed[motorId]);
 8001b2e:	441c      	add	r4, r3
 8001b30:	b2ea      	uxtb	r2, r5
 8001b32:	e7f6      	b.n	8001b22 <L6206_SetMaxSpeed+0x46>
 8001b34:	20002700 	.word	0x20002700
 8001b38:	0801d76b 	.word	0x0801d76b

08001b3c <L6206_SetBridgeInputPwmFreq>:
{
 8001b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b40:	4f1e      	ldr	r7, [pc, #120]	; (8001bbc <L6206_SetBridgeInputPwmFreq+0x80>)
		devicePrm.pwmFreq[bridgeInput] = newFreq;
 8001b42:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8001bc0 <L6206_SetBridgeInputPwmFreq+0x84>
 8001b46:	428f      	cmp	r7, r1
		uint8_t bridgeInput = (bridgeId << 1) + loop;
 8001b48:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8001b4c:	bf28      	it	cs
 8001b4e:	460f      	movcs	r7, r1
 8001b50:	fa5f f980 	uxtb.w	r9, r0
 8001b54:	2600      	movs	r6, #0
 8001b56:	eb09 0506 	add.w	r5, r9, r6
 8001b5a:	b2ed      	uxtb	r5, r5
		devicePrm.pwmFreq[bridgeInput] = newFreq;
 8001b5c:	eb08 0a85 	add.w	sl, r8, r5, lsl #2
		motorId = L6206_GetMotorIdUsingbridgeInput(bridgeInput);
 8001b60:	4628      	mov	r0, r5
		devicePrm.pwmFreq[bridgeInput] = newFreq;
 8001b62:	f8ca 7004 	str.w	r7, [sl, #4]
		motorId = L6206_GetMotorIdUsingbridgeInput(bridgeInput);
 8001b66:	f7ff fe3d 	bl	80017e4 <L6206_GetMotorIdUsingbridgeInput>
		if (devicePrm.motionState[motorId] != INACTIVE) {
 8001b6a:	eb08 0300 	add.w	r3, r8, r0
		motorId = L6206_GetMotorIdUsingbridgeInput(bridgeInput);
 8001b6e:	4604      	mov	r4, r0
		if (devicePrm.motionState[motorId] != INACTIVE) {
 8001b70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d016      	beq.n	8001ba6 <L6206_SetBridgeInputPwmFreq+0x6a>
			if (L6206_IsBidirectionnalMotor(motorId)) {
 8001b78:	f7ff fed6 	bl	8001928 <L6206_IsBidirectionnalMotor>
 8001b7c:	b1c0      	cbz	r0, 8001bb0 <L6206_SetBridgeInputPwmFreq+0x74>
				if (bridgeInput != L6206_GetSecondBridgeInputUsedByMotorId(motorId)) {
 8001b7e:	4620      	mov	r0, r4
 8001b80:	f7ff fea0 	bl	80018c4 <L6206_GetSecondBridgeInputUsedByMotorId>
 8001b84:	42a8      	cmp	r0, r5
 8001b86:	d009      	beq.n	8001b9c <L6206_SetBridgeInputPwmFreq+0x60>
					L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], (100 - devicePrm.speed[motorId]));
 8001b88:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8001b8c:	f8da 1004 	ldr.w	r1, [sl, #4]
 8001b90:	7d22      	ldrb	r2, [r4, #20]
 8001b92:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
 8001b96:	b2d2      	uxtb	r2, r2
				L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], devicePrm.speed[motorId]);
 8001b98:	4628      	mov	r0, r5
 8001b9a:	e002      	b.n	8001ba2 <L6206_SetBridgeInputPwmFreq+0x66>
					L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], 100);
 8001b9c:	f8da 1004 	ldr.w	r1, [sl, #4]
 8001ba0:	2264      	movs	r2, #100	; 0x64
				L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], devicePrm.speed[motorId]);
 8001ba2:	f005 f80d 	bl	8006bc0 <L6206_Board_PwmSetFreq>
 8001ba6:	3601      	adds	r6, #1
	for (loop = 0; loop < 2; loop++) {
 8001ba8:	2e02      	cmp	r6, #2
 8001baa:	d1d4      	bne.n	8001b56 <L6206_SetBridgeInputPwmFreq+0x1a>
}
 8001bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], devicePrm.speed[motorId]);
 8001bb0:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8001bb4:	4639      	mov	r1, r7
 8001bb6:	7d22      	ldrb	r2, [r4, #20]
 8001bb8:	e7ee      	b.n	8001b98 <L6206_SetBridgeInputPwmFreq+0x5c>
 8001bba:	bf00      	nop
 8001bbc:	000186a0 	.word	0x000186a0
 8001bc0:	20002700 	.word	0x20002700

08001bc4 <L6206_SetDeviceParamsToPredefinedValues>:
* @brief  Sets the parameters of the device to predefined values
* from l6206_target_config.h
* @retval None
**********************************************************/
void L6206_SetDeviceParamsToPredefinedValues(void)
{
 8001bc4:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;

	memset(&devicePrm, 0, sizeof(devicePrm));
 8001bc6:	4c0d      	ldr	r4, [pc, #52]	; (8001bfc <L6206_SetDeviceParamsToPredefinedValues+0x38>)
 8001bc8:	2228      	movs	r2, #40	; 0x28
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4620      	mov	r0, r4
 8001bce:	f019 f9d6 	bl	801af7e <memset>

	devicePrm.config = L6206_CONF_PARAM_PARALLE_BRIDGES;

	devicePrm.pwmFreq[INPUT_1A] = L6206_CONF_PARAM_FREQ_PWM1A;
 8001bd2:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001bd6:	6063      	str	r3, [r4, #4]
	devicePrm.pwmFreq[INPUT_2A] = L6206_CONF_PARAM_FREQ_PWM2A;
 8001bd8:	60a3      	str	r3, [r4, #8]
	devicePrm.pwmFreq[INPUT_1B] = L6206_CONF_PARAM_FREQ_PWM1B;
 8001bda:	60e3      	str	r3, [r4, #12]
	devicePrm.pwmFreq[INPUT_2B] = L6206_CONF_PARAM_FREQ_PWM2B;
 8001bdc:	6123      	str	r3, [r4, #16]
 8001bde:	f104 021b 	add.w	r2, r4, #27
 8001be2:	2300      	movs	r3, #0

	for (i = 0; i < MAX_NUMBER_OF_BRUSH_DC_MOTORS; i++) {
		devicePrm.speed[i] = 100;
 8001be4:	2664      	movs	r6, #100	; 0x64
		devicePrm.direction[i] = FORWARD;
 8001be6:	2001      	movs	r0, #1
		devicePrm.motionState[i] = INACTIVE;
 8001be8:	2108      	movs	r1, #8
		devicePrm.speed[i] = 100;
 8001bea:	18e5      	adds	r5, r4, r3
 8001bec:	3302      	adds	r3, #2
 8001bee:	82ae      	strh	r6, [r5, #20]
		devicePrm.direction[i] = FORWARD;
 8001bf0:	f802 0f01 	strb.w	r0, [r2, #1]!
	for (i = 0; i < MAX_NUMBER_OF_BRUSH_DC_MOTORS; i++) {
 8001bf4:	2b08      	cmp	r3, #8
		devicePrm.motionState[i] = INACTIVE;
 8001bf6:	7111      	strb	r1, [r2, #4]
	for (i = 0; i < MAX_NUMBER_OF_BRUSH_DC_MOTORS; i++) {
 8001bf8:	d1f7      	bne.n	8001bea <L6206_SetDeviceParamsToPredefinedValues+0x26>
	}
	for (i = 0; i < L6206_NB_MAX_BRIDGES; i++) {
		devicePrm.bridgeEnabled[i] = FALSE;
	}
}
 8001bfa:	bd70      	pop	{r4, r5, r6, pc}
 8001bfc:	20002700 	.word	0x20002700

08001c00 <L6206_SetDeviceParamsToGivenValues>:
* @param initDevicePrm structure containing values to initialize the device
* parameters
* @retval None
**********************************************************/
void L6206_SetDeviceParamsToGivenValues(L6206_InitTypeDef* initDevicePrm)
{
 8001c00:	b530      	push	{r4, r5, lr}
	memcpy(&devicePrm, initDevicePrm, sizeof(devicePrm));
 8001c02:	4c06      	ldr	r4, [pc, #24]	; (8001c1c <L6206_SetDeviceParamsToGivenValues+0x1c>)
{
 8001c04:	4603      	mov	r3, r0
	memcpy(&devicePrm, initDevicePrm, sizeof(devicePrm));
 8001c06:	f100 0528 	add.w	r5, r0, #40	; 0x28
 8001c0a:	6818      	ldr	r0, [r3, #0]
 8001c0c:	6859      	ldr	r1, [r3, #4]
 8001c0e:	4622      	mov	r2, r4
 8001c10:	c203      	stmia	r2!, {r0, r1}
 8001c12:	3308      	adds	r3, #8
 8001c14:	42ab      	cmp	r3, r5
 8001c16:	4614      	mov	r4, r2
 8001c18:	d1f7      	bne.n	8001c0a <L6206_SetDeviceParamsToGivenValues+0xa>
}
 8001c1a:	bd30      	pop	{r4, r5, pc}
 8001c1c:	20002700 	.word	0x20002700

08001c20 <L6206_Init>:
	l6206DriverInstance++;
 8001c20:	4a0a      	ldr	r2, [pc, #40]	; (8001c4c <L6206_Init+0x2c>)
 8001c22:	8813      	ldrh	r3, [r2, #0]
{
 8001c24:	b510      	push	{r4, lr}
	l6206DriverInstance++;
 8001c26:	3301      	adds	r3, #1
{
 8001c28:	4604      	mov	r4, r0
	l6206DriverInstance++;
 8001c2a:	8013      	strh	r3, [r2, #0]
	L6206_Board_GpioInit();
 8001c2c:	f004 ff08 	bl	8006a40 <L6206_Board_GpioInit>
	if (init == NULL) {
 8001c30:	b93c      	cbnz	r4, 8001c42 <L6206_Init+0x22>
		L6206_SetDeviceParamsToPredefinedValues();
 8001c32:	f7ff ffc7 	bl	8001bc4 <L6206_SetDeviceParamsToPredefinedValues>
	L6206_SetDualFullBridgeConfig(devicePrm.config);
 8001c36:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <L6206_Init+0x30>)
}
 8001c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	L6206_SetDualFullBridgeConfig(devicePrm.config);
 8001c3c:	7818      	ldrb	r0, [r3, #0]
 8001c3e:	f7ff bd1b 	b.w	8001678 <L6206_SetDualFullBridgeConfig>
		L6206_SetDeviceParamsToGivenValues((L6206_InitTypeDef*)init);
 8001c42:	4620      	mov	r0, r4
 8001c44:	f7ff ffdc 	bl	8001c00 <L6206_SetDeviceParamsToGivenValues>
 8001c48:	e7f5      	b.n	8001c36 <L6206_Init+0x16>
 8001c4a:	bf00      	nop
 8001c4c:	2000248a 	.word	0x2000248a
 8001c50:	20002700 	.word	0x20002700

08001c54 <LPS22HB_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
  Capabilities->Pressure    = 1;
 8001c54:	2301      	movs	r3, #1
 8001c56:	704b      	strb	r3, [r1, #1]
  Capabilities->Temperature = 1;
 8001c58:	700b      	strb	r3, [r1, #0]
  Capabilities->LowPower    = 0;
  Capabilities->HumMaxOdr   = 0.0f;
 8001c5a:	2300      	movs	r3, #0
  Capabilities->Humidity    = 0;
 8001c5c:	2000      	movs	r0, #0
  Capabilities->HumMaxOdr   = 0.0f;
 8001c5e:	604b      	str	r3, [r1, #4]
  Capabilities->TempMaxOdr  = 75.0f;
 8001c60:	4b02      	ldr	r3, [pc, #8]	; (8001c6c <LPS22HB_GetCapabilities+0x18>)
  Capabilities->Humidity    = 0;
 8001c62:	7088      	strb	r0, [r1, #2]
  Capabilities->LowPower    = 0;
 8001c64:	70c8      	strb	r0, [r1, #3]
  Capabilities->TempMaxOdr  = 75.0f;
 8001c66:	608b      	str	r3, [r1, #8]
  Capabilities->PressMaxOdr = 75.0f;
 8001c68:	60cb      	str	r3, [r1, #12]
  return LPS22HB_OK;
}
 8001c6a:	4770      	bx	lr
 8001c6c:	42960000 	.word	0x42960000

08001c70 <LPS22HB_Init>:
{
 8001c70:	b538      	push	{r3, r4, r5, lr}
  if (pObj->is_initialized == 0U)
 8001c72:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
{
 8001c76:	4605      	mov	r5, r0
  if (pObj->is_initialized == 0U)
 8001c78:	bb2b      	cbnz	r3, 8001cc6 <LPS22HB_Init+0x56>
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_Initialize(LPS22HB_Object_t *pObj)
{
  /* Set Power mode */
  if (lps22hb_low_power_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8001c7a:	f100 041c 	add.w	r4, r0, #28
 8001c7e:	2101      	movs	r1, #1
 8001c80:	4620      	mov	r0, r4
 8001c82:	f000 fabb 	bl	80021fc <lps22hb_low_power_set>
 8001c86:	4601      	mov	r1, r0
 8001c88:	b110      	cbz	r0, 8001c90 <LPS22HB_Init+0x20>
      return LPS22HB_ERROR;
 8001c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8001c8e:	bd38      	pop	{r3, r4, r5, pc}
  {
    return LPS22HB_ERROR;
  }

  /* Power down the device */
  if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8001c90:	4620      	mov	r0, r4
 8001c92:	f000 fa6b 	bl	800216c <lps22hb_data_rate_set>
 8001c96:	2800      	cmp	r0, #0
 8001c98:	d1f7      	bne.n	8001c8a <LPS22HB_Init+0x1a>
  {
    return LPS22HB_ERROR;
  }

  /* Disable low-pass filter on LPS22HB pressure data */
  if (lps22hb_low_pass_filter_mode_set(&(pObj->Ctx), LPS22HB_LPF_ODR_DIV_9) != LPS22HB_OK)
 8001c9a:	2102      	movs	r1, #2
 8001c9c:	4620      	mov	r0, r4
 8001c9e:	f000 fa4e 	bl	800213e <lps22hb_low_pass_filter_mode_set>
 8001ca2:	2800      	cmp	r0, #0
 8001ca4:	d1f1      	bne.n	8001c8a <LPS22HB_Init+0x1a>
  {
    return LPS22HB_ERROR;
  }

  if (lps22hb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	4620      	mov	r0, r4
 8001caa:	f000 fa31 	bl	8002110 <lps22hb_block_data_update_set>
 8001cae:	2800      	cmp	r0, #0
 8001cb0:	d1eb      	bne.n	8001c8a <LPS22HB_Init+0x1a>
  {
    return LPS22HB_ERROR;
  }

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8001cb2:	68a9      	ldr	r1, [r5, #8]
 8001cb4:	b961      	cbnz	r1, 8001cd0 <LPS22HB_Init+0x60>
      return LPS22HB_ERROR;
    }
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8001cb6:	4620      	mov	r0, r4
 8001cb8:	f000 fab7 	bl	800222a <lps22hb_auto_add_inc_set>
 8001cbc:	2800      	cmp	r0, #0
 8001cbe:	d1e4      	bne.n	8001c8a <LPS22HB_Init+0x1a>
    {
      return LPS22HB_ERROR;
    }
  }

  pObj->last_odr = LPS22HB_ODR_25_Hz;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
  pObj->is_initialized = 1U;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
  return LPS22HB_OK;
 8001ccc:	2000      	movs	r0, #0
}
 8001cce:	bd38      	pop	{r3, r4, r5, pc}
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	e7f0      	b.n	8001cb6 <LPS22HB_Init+0x46>

08001cd4 <LPS22HB_ReadID>:
{
 8001cd4:	b508      	push	{r3, lr}
  if (lps22hb_device_id_get(&(pObj->Ctx), Id) != LPS22HB_OK)
 8001cd6:	301c      	adds	r0, #28
 8001cd8:	f000 fa8b 	bl	80021f2 <lps22hb_device_id_get>
 8001cdc:	3000      	adds	r0, #0
 8001cde:	bf18      	it	ne
 8001ce0:	2001      	movne	r0, #1
}
 8001ce2:	4240      	negs	r0, r0
 8001ce4:	bd08      	pop	{r3, pc}
	...

08001ce8 <LPS22HB_GetOutputDataRate>:
{
 8001ce8:	b513      	push	{r0, r1, r4, lr}
 8001cea:	460c      	mov	r4, r1
  if (lps22hb_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HB_OK)
 8001cec:	301c      	adds	r0, #28
 8001cee:	f10d 0107 	add.w	r1, sp, #7
 8001cf2:	f000 fa52 	bl	800219a <lps22hb_data_rate_get>
 8001cf6:	b9b8      	cbnz	r0, 8001d28 <LPS22HB_GetOutputDataRate+0x40>
  switch (odr_low_level)
 8001cf8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001cfc:	2b05      	cmp	r3, #5
 8001cfe:	d813      	bhi.n	8001d28 <LPS22HB_GetOutputDataRate+0x40>
 8001d00:	e8df f003 	tbb	[pc, r3]
 8001d04:	0c0a0703 	.word	0x0c0a0703
 8001d08:	100e      	.short	0x100e
      *Odr = 0.0f;
 8001d0a:	2300      	movs	r3, #0
      *Odr = 75.0f;
 8001d0c:	6023      	str	r3, [r4, #0]
}
 8001d0e:	b002      	add	sp, #8
 8001d10:	bd10      	pop	{r4, pc}
      *Odr = 1.0f;
 8001d12:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001d16:	e7f9      	b.n	8001d0c <LPS22HB_GetOutputDataRate+0x24>
      *Odr = 10.0f;
 8001d18:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <LPS22HB_GetOutputDataRate+0x48>)
 8001d1a:	e7f7      	b.n	8001d0c <LPS22HB_GetOutputDataRate+0x24>
      *Odr = 25.0f;
 8001d1c:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <LPS22HB_GetOutputDataRate+0x4c>)
 8001d1e:	e7f5      	b.n	8001d0c <LPS22HB_GetOutputDataRate+0x24>
      *Odr = 50.0f;
 8001d20:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <LPS22HB_GetOutputDataRate+0x50>)
 8001d22:	e7f3      	b.n	8001d0c <LPS22HB_GetOutputDataRate+0x24>
      *Odr = 75.0f;
 8001d24:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <LPS22HB_GetOutputDataRate+0x54>)
 8001d26:	e7f1      	b.n	8001d0c <LPS22HB_GetOutputDataRate+0x24>
      ret = LPS22HB_ERROR;
 8001d28:	f04f 30ff 	mov.w	r0, #4294967295
 8001d2c:	e7ef      	b.n	8001d0e <LPS22HB_GetOutputDataRate+0x26>
 8001d2e:	bf00      	nop
 8001d30:	41200000 	.word	0x41200000
 8001d34:	41c80000 	.word	0x41c80000
 8001d38:	42480000 	.word	0x42480000
 8001d3c:	42960000 	.word	0x42960000

08001d40 <LPS22HB_TEMP_GetOutputDataRate>:
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 8001d40:	f7ff bfd2 	b.w	8001ce8 <LPS22HB_GetOutputDataRate>

08001d44 <LPS22HB_SetOutputDataRate_When_Enabled>:
            : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8001d44:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001d48:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8001d50:	b538      	push	{r3, r4, r5, lr}
 8001d52:	4605      	mov	r5, r0
            : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8001d54:	d926      	bls.n	8001da4 <LPS22HB_SetOutputDataRate_When_Enabled+0x60>
 8001d56:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8001d5a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d62:	d921      	bls.n	8001da8 <LPS22HB_SetOutputDataRate_When_Enabled+0x64>
 8001d64:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 8001d68:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d70:	d91c      	bls.n	8001dac <LPS22HB_SetOutputDataRate_When_Enabled+0x68>
 8001d72:	eddf 7a11 	vldr	s15, [pc, #68]	; 8001db8 <LPS22HB_SetOutputDataRate_When_Enabled+0x74>
 8001d76:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d7e:	bf94      	ite	ls
 8001d80:	2104      	movls	r1, #4
 8001d82:	2105      	movhi	r1, #5
  if (lps22hb_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HB_OK)
 8001d84:	f105 041c 	add.w	r4, r5, #28
 8001d88:	4620      	mov	r0, r4
 8001d8a:	f000 f9ef 	bl	800216c <lps22hb_data_rate_set>
 8001d8e:	b978      	cbnz	r0, 8001db0 <LPS22HB_SetOutputDataRate_When_Enabled+0x6c>
  if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8001d90:	f105 012b 	add.w	r1, r5, #43	; 0x2b
 8001d94:	4620      	mov	r0, r4
 8001d96:	f000 fa00 	bl	800219a <lps22hb_data_rate_get>
 8001d9a:	3000      	adds	r0, #0
 8001d9c:	bf18      	it	ne
 8001d9e:	2001      	movne	r0, #1
 8001da0:	4240      	negs	r0, r0
 8001da2:	bd38      	pop	{r3, r4, r5, pc}
            : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8001da4:	2101      	movs	r1, #1
 8001da6:	e7ed      	b.n	8001d84 <LPS22HB_SetOutputDataRate_When_Enabled+0x40>
 8001da8:	2102      	movs	r1, #2
 8001daa:	e7eb      	b.n	8001d84 <LPS22HB_SetOutputDataRate_When_Enabled+0x40>
 8001dac:	2103      	movs	r1, #3
 8001dae:	e7e9      	b.n	8001d84 <LPS22HB_SetOutputDataRate_When_Enabled+0x40>
    return LPS22HB_ERROR;
 8001db0:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001db4:	bd38      	pop	{r3, r4, r5, pc}
 8001db6:	bf00      	nop
 8001db8:	42480000 	.word	0x42480000

08001dbc <LPS22HB_PRESS_GetPressure>:
{
 8001dbc:	b513      	push	{r0, r1, r4, lr}
  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8001dbe:	2300      	movs	r3, #0
{
 8001dc0:	460c      	mov	r4, r1
  if (lps22hb_pressure_raw_get(&(pObj->Ctx), data_raw_pressure.u8bit) != LPS22HB_OK)
 8001dc2:	301c      	adds	r0, #28
 8001dc4:	a901      	add	r1, sp, #4
  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8001dc6:	9301      	str	r3, [sp, #4]
  if (lps22hb_pressure_raw_get(&(pObj->Ctx), data_raw_pressure.u8bit) != LPS22HB_OK)
 8001dc8:	f000 fa09 	bl	80021de <lps22hb_pressure_raw_get>
 8001dcc:	b938      	cbnz	r0, 8001dde <LPS22HB_PRESS_GetPressure+0x22>
  *Value = LPS22HB_FROM_LSB_TO_hPa((float)(data_raw_pressure.i32bit));
 8001dce:	eddd 7a01 	vldr	s15, [sp, #4]
 8001dd2:	eefa 7aca 	vcvt.f32.s32	s15, s15, #12
 8001dd6:	edc4 7a00 	vstr	s15, [r4]
}
 8001dda:	b002      	add	sp, #8
 8001ddc:	bd10      	pop	{r4, pc}
    return LPS22HB_ERROR;
 8001dde:	f04f 30ff 	mov.w	r0, #4294967295
 8001de2:	e7fa      	b.n	8001dda <LPS22HB_PRESS_GetPressure+0x1e>

08001de4 <LPS22HB_TEMP_GetTemperature>:
{
 8001de4:	b513      	push	{r0, r1, r4, lr}
  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8001de6:	2300      	movs	r3, #0
{
 8001de8:	460c      	mov	r4, r1
  if (lps22hb_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != LPS22HB_OK)
 8001dea:	301c      	adds	r0, #28
 8001dec:	a901      	add	r1, sp, #4
  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8001dee:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (lps22hb_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != LPS22HB_OK)
 8001df2:	f000 f9f9 	bl	80021e8 <lps22hb_temperature_raw_get>
 8001df6:	b968      	cbnz	r0, 8001e14 <LPS22HB_TEMP_GetTemperature+0x30>
  *Value = LPS22HB_FROM_LSB_TO_degC((float)(data_raw_temperature.i16bit));
 8001df8:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8001dfc:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001e1c <LPS22HB_TEMP_GetTemperature+0x38>
 8001e00:	ee07 3a90 	vmov	s15, r3
 8001e04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e08:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001e0c:	ed84 7a00 	vstr	s14, [r4]
}
 8001e10:	b002      	add	sp, #8
 8001e12:	bd10      	pop	{r4, pc}
    return LPS22HB_ERROR;
 8001e14:	f04f 30ff 	mov.w	r0, #4294967295
 8001e18:	e7fa      	b.n	8001e10 <LPS22HB_TEMP_GetTemperature+0x2c>
 8001e1a:	bf00      	nop
 8001e1c:	42c80000 	.word	0x42c80000

08001e20 <LPS22HB_TEMP_SetOutputDataRate>:
  if (pObj->temp_is_enabled == 1U)
 8001e20:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8001e24:	2b01      	cmp	r3, #1
{
 8001e26:	4602      	mov	r2, r0
  if (pObj->temp_is_enabled == 1U)
 8001e28:	d101      	bne.n	8001e2e <LPS22HB_TEMP_SetOutputDataRate+0xe>
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 8001e2a:	f7ff bf8b 	b.w	8001d44 <LPS22HB_SetOutputDataRate_When_Enabled>
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8001e2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e32:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8001e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e3a:	d91a      	bls.n	8001e72 <LPS22HB_TEMP_SetOutputDataRate+0x52>
 8001e3c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e40:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8001e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e48:	d915      	bls.n	8001e76 <LPS22HB_TEMP_SetOutputDataRate+0x56>
 8001e4a:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001e4e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8001e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e56:	d910      	bls.n	8001e7a <LPS22HB_TEMP_SetOutputDataRate+0x5a>
 8001e58:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001e80 <LPS22HB_TEMP_SetOutputDataRate+0x60>
 8001e5c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8001e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e64:	bf94      	ite	ls
 8001e66:	2304      	movls	r3, #4
 8001e68:	2305      	movhi	r3, #5
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 8001e6a:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
}
 8001e6e:	2000      	movs	r0, #0
 8001e70:	4770      	bx	lr
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8001e72:	2301      	movs	r3, #1
 8001e74:	e7f9      	b.n	8001e6a <LPS22HB_TEMP_SetOutputDataRate+0x4a>
 8001e76:	2302      	movs	r3, #2
 8001e78:	e7f7      	b.n	8001e6a <LPS22HB_TEMP_SetOutputDataRate+0x4a>
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e7f5      	b.n	8001e6a <LPS22HB_TEMP_SetOutputDataRate+0x4a>
 8001e7e:	bf00      	nop
 8001e80:	42480000 	.word	0x42480000

08001e84 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint16_t i;
  int32_t ret = LPS22HB_OK;
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8001e88:	6884      	ldr	r4, [r0, #8]
{
 8001e8a:	4605      	mov	r5, r0
 8001e8c:	460e      	mov	r6, r1
 8001e8e:	4691      	mov	r9, r2
 8001e90:	4698      	mov	r8, r3
  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8001e92:	b99c      	cbnz	r4, 8001ebc <ReadRegWrap+0x38>
  {
    for (i = 0; i < Length; i++)
 8001e94:	4544      	cmp	r4, r8
 8001e96:	d102      	bne.n	8001e9e <ReadRegWrap+0x1a>
      {
        return LPS22HB_ERROR;
      }
    }

    return ret;
 8001e98:	2000      	movs	r0, #0
 8001e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8001e9e:	1931      	adds	r1, r6, r4
 8001ea0:	eb09 0204 	add.w	r2, r9, r4
 8001ea4:	696f      	ldr	r7, [r5, #20]
 8001ea6:	7b28      	ldrb	r0, [r5, #12]
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	b289      	uxth	r1, r1
 8001eac:	47b8      	blx	r7
 8001eae:	3401      	adds	r4, #1
      if (ret != LPS22HB_OK)
 8001eb0:	2800      	cmp	r0, #0
 8001eb2:	d0ef      	beq.n	8001e94 <ReadRegWrap+0x10>
        return LPS22HB_ERROR;
 8001eb4:	f04f 30ff 	mov.w	r0, #4294967295
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
  }
}
 8001eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001ebc:	6944      	ldr	r4, [r0, #20]
 8001ebe:	7b00      	ldrb	r0, [r0, #12]
 8001ec0:	46a4      	mov	ip, r4
}
 8001ec2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001ec6:	4760      	bx	ip

08001ec8 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ecc:	4605      	mov	r5, r0
  uint16_t i;
  int32_t ret = LPS22HB_OK;
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8001ece:	6880      	ldr	r0, [r0, #8]
{
 8001ed0:	4614      	mov	r4, r2
 8001ed2:	4698      	mov	r8, r3
  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8001ed4:	b998      	cbnz	r0, 8001efe <WriteRegWrap+0x36>
 8001ed6:	4490      	add	r8, r2
  {
    for (i = 0; i < Length; i++)
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, Reg, &pData[i], 1);
 8001ed8:	b28e      	uxth	r6, r1
    for (i = 0; i < Length; i++)
 8001eda:	4544      	cmp	r4, r8
 8001edc:	d102      	bne.n	8001ee4 <WriteRegWrap+0x1c>
      {
        return LPS22HB_ERROR;
      }
    }

    return ret;
 8001ede:	2000      	movs	r0, #0
 8001ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ret = pObj->IO.WriteReg(pObj->IO.Address, Reg, &pData[i], 1);
 8001ee4:	4622      	mov	r2, r4
 8001ee6:	692f      	ldr	r7, [r5, #16]
 8001ee8:	7b28      	ldrb	r0, [r5, #12]
 8001eea:	2301      	movs	r3, #1
 8001eec:	4631      	mov	r1, r6
 8001eee:	47b8      	blx	r7
 8001ef0:	3401      	adds	r4, #1
      if (ret != LPS22HB_OK)
 8001ef2:	2800      	cmp	r0, #0
 8001ef4:	d0f1      	beq.n	8001eda <WriteRegWrap+0x12>
        return LPS22HB_ERROR;
 8001ef6:	f04f 30ff 	mov.w	r0, #4294967295
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
  }
}
 8001efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001efe:	692c      	ldr	r4, [r5, #16]
 8001f00:	7b28      	ldrb	r0, [r5, #12]
 8001f02:	46a4      	mov	ip, r4
}
 8001f04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001f08:	4760      	bx	ip

08001f0a <LPS22HB_PRESS_Enable>:
{
 8001f0a:	b510      	push	{r4, lr}
  if (pObj->press_is_enabled == 1U)
 8001f0c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8001f10:	2b01      	cmp	r3, #1
{
 8001f12:	4604      	mov	r4, r0
  if (pObj->press_is_enabled == 1U)
 8001f14:	d009      	beq.n	8001f2a <LPS22HB_PRESS_Enable+0x20>
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8001f16:	f890 102b 	ldrb.w	r1, [r0, #43]	; 0x2b
 8001f1a:	301c      	adds	r0, #28
 8001f1c:	f000 f926 	bl	800216c <lps22hb_data_rate_set>
 8001f20:	b928      	cbnz	r0, 8001f2e <LPS22HB_PRESS_Enable+0x24>
  pObj->press_is_enabled = 1;
 8001f22:	2301      	movs	r3, #1
 8001f24:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 8001f28:	bd10      	pop	{r4, pc}
    return LPS22HB_OK;
 8001f2a:	2000      	movs	r0, #0
 8001f2c:	bd10      	pop	{r4, pc}
    return LPS22HB_ERROR;
 8001f2e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001f32:	bd10      	pop	{r4, pc}

08001f34 <LPS22HB_TEMP_Enable>:
{
 8001f34:	b510      	push	{r4, lr}
  if (pObj->temp_is_enabled == 1U)
 8001f36:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8001f3a:	2b01      	cmp	r3, #1
{
 8001f3c:	4604      	mov	r4, r0
  if (pObj->temp_is_enabled == 1U)
 8001f3e:	d009      	beq.n	8001f54 <LPS22HB_TEMP_Enable+0x20>
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8001f40:	f890 102b 	ldrb.w	r1, [r0, #43]	; 0x2b
 8001f44:	301c      	adds	r0, #28
 8001f46:	f000 f911 	bl	800216c <lps22hb_data_rate_set>
 8001f4a:	b928      	cbnz	r0, 8001f58 <LPS22HB_TEMP_Enable+0x24>
  pObj->temp_is_enabled = 1;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
 8001f52:	bd10      	pop	{r4, pc}
    return LPS22HB_OK;
 8001f54:	2000      	movs	r0, #0
 8001f56:	bd10      	pop	{r4, pc}
    return LPS22HB_ERROR;
 8001f58:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001f5c:	bd10      	pop	{r4, pc}

08001f5e <LPS22HB_PRESS_Disable>:
{
 8001f5e:	b538      	push	{r3, r4, r5, lr}
 8001f60:	4604      	mov	r4, r0
  if (pObj->press_is_enabled == 0U)
 8001f62:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 8001f66:	b1c0      	cbz	r0, 8001f9a <LPS22HB_PRESS_Disable+0x3c>
  if (pObj->temp_is_enabled == 0U)
 8001f68:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8001f6c:	b11b      	cbz	r3, 8001f76 <LPS22HB_PRESS_Disable+0x18>
  pObj->press_is_enabled = 0;
 8001f6e:	2000      	movs	r0, #0
 8001f70:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 8001f74:	bd38      	pop	{r3, r4, r5, pc}
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8001f76:	f104 051c 	add.w	r5, r4, #28
 8001f7a:	f104 012b 	add.w	r1, r4, #43	; 0x2b
 8001f7e:	4628      	mov	r0, r5
 8001f80:	f000 f90b 	bl	800219a <lps22hb_data_rate_get>
 8001f84:	4601      	mov	r1, r0
 8001f86:	b110      	cbz	r0, 8001f8e <LPS22HB_PRESS_Disable+0x30>
      return LPS22HB_ERROR;
 8001f88:	f04f 30ff 	mov.w	r0, #4294967295
 8001f8c:	bd38      	pop	{r3, r4, r5, pc}
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8001f8e:	4628      	mov	r0, r5
 8001f90:	f000 f8ec 	bl	800216c <lps22hb_data_rate_set>
 8001f94:	2800      	cmp	r0, #0
 8001f96:	d0ea      	beq.n	8001f6e <LPS22HB_PRESS_Disable+0x10>
 8001f98:	e7f6      	b.n	8001f88 <LPS22HB_PRESS_Disable+0x2a>
}
 8001f9a:	bd38      	pop	{r3, r4, r5, pc}

08001f9c <LPS22HB_TEMP_Disable>:
{
 8001f9c:	b538      	push	{r3, r4, r5, lr}
 8001f9e:	4604      	mov	r4, r0
  if (pObj->temp_is_enabled == 0U)
 8001fa0:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
 8001fa4:	b1c0      	cbz	r0, 8001fd8 <LPS22HB_TEMP_Disable+0x3c>
  if (pObj->press_is_enabled == 0U)
 8001fa6:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8001faa:	b11b      	cbz	r3, 8001fb4 <LPS22HB_TEMP_Disable+0x18>
  pObj->temp_is_enabled = 0;
 8001fac:	2000      	movs	r0, #0
 8001fae:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
 8001fb2:	bd38      	pop	{r3, r4, r5, pc}
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8001fb4:	f104 051c 	add.w	r5, r4, #28
 8001fb8:	f104 012b 	add.w	r1, r4, #43	; 0x2b
 8001fbc:	4628      	mov	r0, r5
 8001fbe:	f000 f8ec 	bl	800219a <lps22hb_data_rate_get>
 8001fc2:	4601      	mov	r1, r0
 8001fc4:	b110      	cbz	r0, 8001fcc <LPS22HB_TEMP_Disable+0x30>
      return LPS22HB_ERROR;
 8001fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8001fca:	bd38      	pop	{r3, r4, r5, pc}
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8001fcc:	4628      	mov	r0, r5
 8001fce:	f000 f8cd 	bl	800216c <lps22hb_data_rate_set>
 8001fd2:	2800      	cmp	r0, #0
 8001fd4:	d0ea      	beq.n	8001fac <LPS22HB_TEMP_Disable+0x10>
 8001fd6:	e7f6      	b.n	8001fc6 <LPS22HB_TEMP_Disable+0x2a>
}
 8001fd8:	bd38      	pop	{r3, r4, r5, pc}

08001fda <LPS22HB_DeInit>:
{
 8001fda:	b510      	push	{r4, lr}
  if (pObj->is_initialized == 1U)
 8001fdc:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8001fe0:	2b01      	cmp	r3, #1
{
 8001fe2:	4604      	mov	r4, r0
  if (pObj->is_initialized == 1U)
 8001fe4:	d003      	beq.n	8001fee <LPS22HB_DeInit+0x14>
  pObj->is_initialized = 0;
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
  return LPS22HB_OK;
 8001fec:	bd10      	pop	{r4, pc}
    if (LPS22HB_PRESS_Disable(pObj) != LPS22HB_OK)
 8001fee:	f7ff ffb6 	bl	8001f5e <LPS22HB_PRESS_Disable>
 8001ff2:	b110      	cbz	r0, 8001ffa <LPS22HB_DeInit+0x20>
      return LPS22HB_ERROR;
 8001ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff8:	bd10      	pop	{r4, pc}
    if (LPS22HB_TEMP_Disable(pObj) != LPS22HB_OK)
 8001ffa:	4620      	mov	r0, r4
 8001ffc:	f7ff ffce 	bl	8001f9c <LPS22HB_TEMP_Disable>
 8002000:	2800      	cmp	r0, #0
 8002002:	d0f0      	beq.n	8001fe6 <LPS22HB_DeInit+0xc>
 8002004:	e7f6      	b.n	8001ff4 <LPS22HB_DeInit+0x1a>

08002006 <LPS22HB_PRESS_GetOutputDataRate>:
 8002006:	f7ff be6f 	b.w	8001ce8 <LPS22HB_GetOutputDataRate>
	...

0800200c <LPS22HB_PRESS_SetOutputDataRate>:
  if (pObj->press_is_enabled == 1U)
 800200c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8002010:	2b01      	cmp	r3, #1
{
 8002012:	4602      	mov	r2, r0
  if (pObj->press_is_enabled == 1U)
 8002014:	d101      	bne.n	800201a <LPS22HB_PRESS_SetOutputDataRate+0xe>
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 8002016:	f7ff be95 	b.w	8001d44 <LPS22HB_SetOutputDataRate_When_Enabled>
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 800201a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800201e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8002022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002026:	d91a      	bls.n	800205e <LPS22HB_PRESS_SetOutputDataRate+0x52>
 8002028:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800202c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8002030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002034:	d915      	bls.n	8002062 <LPS22HB_PRESS_SetOutputDataRate+0x56>
 8002036:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800203a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800203e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002042:	d910      	bls.n	8002066 <LPS22HB_PRESS_SetOutputDataRate+0x5a>
 8002044:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800206c <LPS22HB_PRESS_SetOutputDataRate+0x60>
 8002048:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800204c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002050:	bf94      	ite	ls
 8002052:	2304      	movls	r3, #4
 8002054:	2305      	movhi	r3, #5
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 8002056:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
}
 800205a:	2000      	movs	r0, #0
 800205c:	4770      	bx	lr
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 800205e:	2301      	movs	r3, #1
 8002060:	e7f9      	b.n	8002056 <LPS22HB_PRESS_SetOutputDataRate+0x4a>
 8002062:	2302      	movs	r3, #2
 8002064:	e7f7      	b.n	8002056 <LPS22HB_PRESS_SetOutputDataRate+0x4a>
 8002066:	2303      	movs	r3, #3
 8002068:	e7f5      	b.n	8002056 <LPS22HB_PRESS_SetOutputDataRate+0x4a>
 800206a:	bf00      	nop
 800206c:	42480000 	.word	0x42480000

08002070 <LPS22HB_Write_Reg>:
{
 8002070:	b513      	push	{r0, r1, r4, lr}
 8002072:	ac02      	add	r4, sp, #8
  if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
 8002074:	2301      	movs	r3, #1
{
 8002076:	f804 2d01 	strb.w	r2, [r4, #-1]!
  if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
 800207a:	301c      	adds	r0, #28
 800207c:	4622      	mov	r2, r4
 800207e:	f000 f840 	bl	8002102 <lps22hb_write_reg>
 8002082:	3000      	adds	r0, #0
 8002084:	bf18      	it	ne
 8002086:	2001      	movne	r0, #1
}
 8002088:	4240      	negs	r0, r0
 800208a:	b002      	add	sp, #8
 800208c:	bd10      	pop	{r4, pc}
	...

08002090 <LPS22HB_RegisterBusIO>:
{
 8002090:	b510      	push	{r4, lr}
  if (pObj == NULL)
 8002092:	4604      	mov	r4, r0
 8002094:	b910      	cbnz	r0, 800209c <LPS22HB_RegisterBusIO+0xc>
    ret = LPS22HB_ERROR;
 8002096:	f04f 30ff 	mov.w	r0, #4294967295
 800209a:	bd10      	pop	{r4, pc}
    pObj->IO.DeInit    = pIO->DeInit;
 800209c:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 800209e:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80020a0:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 80020a2:	688a      	ldr	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 80020a4:	6003      	str	r3, [r0, #0]
    pObj->IO.BusType   = pIO->BusType;
 80020a6:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 80020a8:	7b0a      	ldrb	r2, [r1, #12]
 80020aa:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80020ac:	690a      	ldr	r2, [r1, #16]
 80020ae:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80020b0:	694a      	ldr	r2, [r1, #20]
 80020b2:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80020b4:	698a      	ldr	r2, [r1, #24]
 80020b6:	6182      	str	r2, [r0, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 80020b8:	4a0c      	ldr	r2, [pc, #48]	; (80020ec <LPS22HB_RegisterBusIO+0x5c>)
 80020ba:	6202      	str	r2, [r0, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80020bc:	4a0c      	ldr	r2, [pc, #48]	; (80020f0 <LPS22HB_RegisterBusIO+0x60>)
 80020be:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.handle   = pObj;
 80020c0:	6260      	str	r0, [r4, #36]	; 0x24
    if (pObj->IO.Init == NULL)
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0e7      	beq.n	8002096 <LPS22HB_RegisterBusIO+0x6>
    else if (pObj->IO.Init() != LPS22HB_OK)
 80020c6:	4798      	blx	r3
 80020c8:	2800      	cmp	r0, #0
 80020ca:	d1e4      	bne.n	8002096 <LPS22HB_RegisterBusIO+0x6>
      if (pObj->IO.BusType == LPS22HB_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80020cc:	68a3      	ldr	r3, [r4, #8]
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d10b      	bne.n	80020ea <LPS22HB_RegisterBusIO+0x5a>
        if (pObj->is_initialized == 0U)
 80020d2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80020d6:	b943      	cbnz	r3, 80020ea <LPS22HB_RegisterBusIO+0x5a>
          if (LPS22HB_Write_Reg(pObj, LPS22HB_CTRL_REG1, data) != LPS22HB_OK)
 80020d8:	2201      	movs	r2, #1
 80020da:	2110      	movs	r1, #16
 80020dc:	4620      	mov	r0, r4
 80020de:	f7ff ffc7 	bl	8002070 <LPS22HB_Write_Reg>
 80020e2:	3000      	adds	r0, #0
 80020e4:	bf18      	it	ne
 80020e6:	2001      	movne	r0, #1
 80020e8:	4240      	negs	r0, r0
}
 80020ea:	bd10      	pop	{r4, pc}
 80020ec:	08001e85 	.word	0x08001e85
 80020f0:	08001ec9 	.word	0x08001ec9

080020f4 <lps22hb_read_reg>:
  * @param  uint16_t len: number of consecutive register to read
  *
  */
int32_t lps22hb_read_reg(lps22hb_ctx_t *ctx, uint8_t reg, uint8_t *data,
                         uint16_t len)
{
 80020f4:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80020f6:	6844      	ldr	r4, [r0, #4]
 80020f8:	6880      	ldr	r0, [r0, #8]
 80020fa:	46a4      	mov	ip, r4
  return ret;
}
 80020fc:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002100:	4760      	bx	ip

08002102 <lps22hb_write_reg>:
  * @param  uint16_t len: number of consecutive register to write
  *
*/
int32_t lps22hb_write_reg(lps22hb_ctx_t *ctx, uint8_t reg, uint8_t *data,
                          uint16_t len)
{
 8002102:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002104:	6804      	ldr	r4, [r0, #0]
 8002106:	6880      	ldr	r0, [r0, #8]
 8002108:	46a4      	mov	ip, r4
  return ret;
}
 800210a:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800210e:	4760      	bx	ip

08002110 <lps22hb_block_data_update_set>:
  * @param  lps22hb_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t val: change the values of bdu in reg CTRL_REG1
  *
  */
int32_t lps22hb_block_data_update_set(lps22hb_ctx_t *ctx, uint8_t val)
{
 8002110:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lps22hb_reg_t reg;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 8002112:	2301      	movs	r3, #1
{
 8002114:	460d      	mov	r5, r1
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 8002116:	aa01      	add	r2, sp, #4
 8002118:	2110      	movs	r1, #16
{
 800211a:	4604      	mov	r4, r0
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 800211c:	f7ff ffea 	bl	80020f4 <lps22hb_read_reg>
  if (ret == 0)
 8002120:	b958      	cbnz	r0, 800213a <lps22hb_block_data_update_set+0x2a>
  {
    reg.ctrl_reg1.bdu = val;
 8002122:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002126:	f365 0341 	bfi	r3, r5, #1, #1
 800212a:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 800212e:	aa01      	add	r2, sp, #4
 8002130:	2301      	movs	r3, #1
 8002132:	2110      	movs	r1, #16
 8002134:	4620      	mov	r0, r4
 8002136:	f7ff ffe4 	bl	8002102 <lps22hb_write_reg>
  }
  return ret;
}
 800213a:	b003      	add	sp, #12
 800213c:	bd30      	pop	{r4, r5, pc}

0800213e <lps22hb_low_pass_filter_mode_set>:
  * @param  lps22hb_lpfp_t: change the values of lpfp in reg CTRL_REG1
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(lps22hb_ctx_t *ctx,
                                         lps22hb_lpfp_t val)
{
 800213e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lps22hb_reg_t reg;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 8002140:	2301      	movs	r3, #1
{
 8002142:	460d      	mov	r5, r1
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 8002144:	aa01      	add	r2, sp, #4
 8002146:	2110      	movs	r1, #16
{
 8002148:	4604      	mov	r4, r0
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 800214a:	f7ff ffd3 	bl	80020f4 <lps22hb_read_reg>
  if (ret == 0)
 800214e:	b958      	cbnz	r0, 8002168 <lps22hb_low_pass_filter_mode_set+0x2a>
  {
    reg.ctrl_reg1.lpfp = (uint8_t) val;
 8002150:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002154:	f365 0383 	bfi	r3, r5, #2, #2
 8002158:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 800215c:	aa01      	add	r2, sp, #4
 800215e:	2301      	movs	r3, #1
 8002160:	2110      	movs	r1, #16
 8002162:	4620      	mov	r0, r4
 8002164:	f7ff ffcd 	bl	8002102 <lps22hb_write_reg>
  }
  return ret;
}
 8002168:	b003      	add	sp, #12
 800216a:	bd30      	pop	{r4, r5, pc}

0800216c <lps22hb_data_rate_set>:
  * @param  lps22hb_ctx_t *ctx: read / write interface definitions
  * @param  lps22hb_odr_t: change the values of odr in reg CTRL_REG1
  *
  */
int32_t lps22hb_data_rate_set(lps22hb_ctx_t *ctx, lps22hb_odr_t val)
{
 800216c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lps22hb_reg_t reg;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 800216e:	2301      	movs	r3, #1
{
 8002170:	460d      	mov	r5, r1
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 8002172:	aa01      	add	r2, sp, #4
 8002174:	2110      	movs	r1, #16
{
 8002176:	4604      	mov	r4, r0
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 8002178:	f7ff ffbc 	bl	80020f4 <lps22hb_read_reg>
  if (ret == 0)
 800217c:	b958      	cbnz	r0, 8002196 <lps22hb_data_rate_set+0x2a>
  {
    reg.ctrl_reg1.odr = (uint8_t)val;
 800217e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002182:	f365 1306 	bfi	r3, r5, #4, #3
 8002186:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 800218a:	aa01      	add	r2, sp, #4
 800218c:	2301      	movs	r3, #1
 800218e:	2110      	movs	r1, #16
 8002190:	4620      	mov	r0, r4
 8002192:	f7ff ffb6 	bl	8002102 <lps22hb_write_reg>
  }
  return ret;
}
 8002196:	b003      	add	sp, #12
 8002198:	bd30      	pop	{r4, r5, pc}

0800219a <lps22hb_data_rate_get>:
  * @param  lps22hb_ctx_t *ctx: read / write interface definitions
  * @param  lps22hb_odr_t: Get the values of odr in reg CTRL_REG1
  *
  */
int32_t lps22hb_data_rate_get(lps22hb_ctx_t *ctx, lps22hb_odr_t *val)
{
 800219a:	b513      	push	{r0, r1, r4, lr}
  lps22hb_reg_t reg;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 800219c:	2301      	movs	r3, #1
{
 800219e:	460c      	mov	r4, r1
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 80021a0:	aa01      	add	r2, sp, #4
 80021a2:	2110      	movs	r1, #16
 80021a4:	f7ff ffa6 	bl	80020f4 <lps22hb_read_reg>

  switch (reg.ctrl_reg1.odr)
 80021a8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80021ac:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80021b0:	2b05      	cmp	r3, #5
 80021b2:	d812      	bhi.n	80021da <lps22hb_data_rate_get+0x40>
 80021b4:	e8df f003 	tbb	[pc, r3]
 80021b8:	0b090703 	.word	0x0b090703
 80021bc:	0f0d      	.short	0x0f0d
  {
    case LPS22HB_POWER_DOWN:
      *val = LPS22HB_POWER_DOWN;
 80021be:	2300      	movs	r3, #0
      break;
    case LPS22HB_ODR_75_Hz:
      *val = LPS22HB_ODR_75_Hz;
      break;
    default:
      *val = LPS22HB_ODR_ND;
 80021c0:	7023      	strb	r3, [r4, #0]
      break;
  }
  return ret;
}
 80021c2:	b002      	add	sp, #8
 80021c4:	bd10      	pop	{r4, pc}
      *val = LPS22HB_ODR_1_Hz;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e7fa      	b.n	80021c0 <lps22hb_data_rate_get+0x26>
      *val = LPS22HB_ODR_10_Hz;
 80021ca:	2302      	movs	r3, #2
 80021cc:	e7f8      	b.n	80021c0 <lps22hb_data_rate_get+0x26>
      *val = LPS22HB_ODR_25_Hz;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e7f6      	b.n	80021c0 <lps22hb_data_rate_get+0x26>
      *val = LPS22HB_ODR_50_Hz;
 80021d2:	2304      	movs	r3, #4
 80021d4:	e7f4      	b.n	80021c0 <lps22hb_data_rate_get+0x26>
      *val = LPS22HB_ODR_75_Hz;
 80021d6:	2305      	movs	r3, #5
 80021d8:	e7f2      	b.n	80021c0 <lps22hb_data_rate_get+0x26>
      *val = LPS22HB_ODR_ND;
 80021da:	2306      	movs	r3, #6
 80021dc:	e7f0      	b.n	80021c0 <lps22hb_data_rate_get+0x26>

080021de <lps22hb_pressure_raw_get>:
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t lps22hb_pressure_raw_get(lps22hb_ctx_t *ctx, uint8_t *buff)
{
  return lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, buff, 3);
 80021de:	460a      	mov	r2, r1
 80021e0:	2303      	movs	r3, #3
 80021e2:	2128      	movs	r1, #40	; 0x28
 80021e4:	f7ff bf86 	b.w	80020f4 <lps22hb_read_reg>

080021e8 <lps22hb_temperature_raw_get>:
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t lps22hb_temperature_raw_get(lps22hb_ctx_t *ctx, uint8_t *buff)
{
  return lps22hb_read_reg(ctx, LPS22HB_TEMP_OUT_L, (uint8_t *) buff, 2);
 80021e8:	460a      	mov	r2, r1
 80021ea:	2302      	movs	r3, #2
 80021ec:	212b      	movs	r1, #43	; 0x2b
 80021ee:	f7ff bf81 	b.w	80020f4 <lps22hb_read_reg>

080021f2 <lps22hb_device_id_get>:
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t lps22hb_device_id_get(lps22hb_ctx_t *ctx, uint8_t *buff)
{
  return lps22hb_read_reg(ctx, LPS22HB_WHO_AM_I, (uint8_t *) buff, 1);
 80021f2:	460a      	mov	r2, r1
 80021f4:	2301      	movs	r3, #1
 80021f6:	210f      	movs	r1, #15
 80021f8:	f7ff bf7c 	b.w	80020f4 <lps22hb_read_reg>

080021fc <lps22hb_low_power_set>:
  * @param  lps22hb_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t val: change the values of lc_en in reg RES_CONF
  *
  */
int32_t lps22hb_low_power_set(lps22hb_ctx_t *ctx, uint8_t val)
{
 80021fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lps22hb_reg_t reg;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, &(reg.byte), 1);
 80021fe:	2301      	movs	r3, #1
{
 8002200:	460d      	mov	r5, r1
  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, &(reg.byte), 1);
 8002202:	aa01      	add	r2, sp, #4
 8002204:	211a      	movs	r1, #26
{
 8002206:	4604      	mov	r4, r0
  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, &(reg.byte), 1);
 8002208:	f7ff ff74 	bl	80020f4 <lps22hb_read_reg>
  if (ret == 0)
 800220c:	b958      	cbnz	r0, 8002226 <lps22hb_low_power_set+0x2a>
  {
    reg.res_conf.lc_en = val;
 800220e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002212:	f365 0300 	bfi	r3, r5, #0, #1
 8002216:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, &(reg.byte), 1);
 800221a:	aa01      	add	r2, sp, #4
 800221c:	2301      	movs	r3, #1
 800221e:	211a      	movs	r1, #26
 8002220:	4620      	mov	r0, r4
 8002222:	f7ff ff6e 	bl	8002102 <lps22hb_write_reg>
  }
  return ret;
}
 8002226:	b003      	add	sp, #12
 8002228:	bd30      	pop	{r4, r5, pc}

0800222a <lps22hb_auto_add_inc_set>:
  * @param  lps22hb_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t val: change the values of if_add_inc in reg CTRL_REG2
  *
  */
int32_t lps22hb_auto_add_inc_set(lps22hb_ctx_t *ctx, uint8_t val)
{
 800222a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lps22hb_reg_t reg;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, &(reg.byte), 1);
 800222c:	2301      	movs	r3, #1
{
 800222e:	460d      	mov	r5, r1
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, &(reg.byte), 1);
 8002230:	aa01      	add	r2, sp, #4
 8002232:	2111      	movs	r1, #17
{
 8002234:	4604      	mov	r4, r0
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, &(reg.byte), 1);
 8002236:	f7ff ff5d 	bl	80020f4 <lps22hb_read_reg>
  if (ret == 0)
 800223a:	b958      	cbnz	r0, 8002254 <lps22hb_auto_add_inc_set+0x2a>
  {
    reg.ctrl_reg2.if_add_inc = val;
 800223c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002240:	f365 1304 	bfi	r3, r5, #4, #1
 8002244:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, &(reg.byte), 1);
 8002248:	aa01      	add	r2, sp, #4
 800224a:	2301      	movs	r3, #1
 800224c:	2111      	movs	r1, #17
 800224e:	4620      	mov	r0, r4
 8002250:	f7ff ff57 	bl	8002102 <lps22hb_write_reg>
  }
  return ret;
}
 8002254:	b003      	add	sp, #12
 8002256:	bd30      	pop	{r4, r5, pc}

08002258 <LSM303AGR_ACC_GetCapabilities>:
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8002258:	2301      	movs	r3, #1
 800225a:	700b      	strb	r3, [r1, #0]
  Capabilities->Gyro         = 0;
  Capabilities->Magneto      = 0;
  Capabilities->LowPower     = 0;
  Capabilities->GyroMaxFS    = 0;
  Capabilities->AccMaxFS     = 16;
 800225c:	2310      	movs	r3, #16
  Capabilities->Gyro         = 0;
 800225e:	2000      	movs	r0, #0
  Capabilities->AccMaxFS     = 16;
 8002260:	608b      	str	r3, [r1, #8]
  Capabilities->MagMaxFS     = 0;
  Capabilities->GyroMaxOdr   = 0.0f;
  Capabilities->AccMaxOdr    = 400.0f;
 8002262:	4a05      	ldr	r2, [pc, #20]	; (8002278 <LSM303AGR_ACC_GetCapabilities+0x20>)
  Capabilities->Gyro         = 0;
 8002264:	7048      	strb	r0, [r1, #1]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002266:	2300      	movs	r3, #0
  Capabilities->Magneto      = 0;
 8002268:	7088      	strb	r0, [r1, #2]
  Capabilities->LowPower     = 0;
 800226a:	70c8      	strb	r0, [r1, #3]
  Capabilities->GyroMaxFS    = 0;
 800226c:	6048      	str	r0, [r1, #4]
  Capabilities->MagMaxFS     = 0;
 800226e:	60c8      	str	r0, [r1, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002270:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 8002272:	614a      	str	r2, [r1, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8002274:	618b      	str	r3, [r1, #24]
  return LSM303AGR_OK;
}
 8002276:	4770      	bx	lr
 8002278:	43c80000 	.word	0x43c80000

0800227c <LSM303AGR_MAG_GetCapabilities>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
  Capabilities->Gyro         = 0;
  Capabilities->Magneto      = 1;
 800227c:	2301      	movs	r3, #1
 800227e:	708b      	strb	r3, [r1, #2]
  Capabilities->LowPower     = 0;
  Capabilities->GyroMaxFS    = 0;
  Capabilities->AccMaxFS     = 0;
  Capabilities->MagMaxFS     = 50;
 8002280:	2332      	movs	r3, #50	; 0x32
 8002282:	60cb      	str	r3, [r1, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002284:	2300      	movs	r3, #0
  Capabilities->Acc          = 0;
 8002286:	2000      	movs	r0, #0
  Capabilities->GyroMaxOdr   = 0.0f;
 8002288:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 800228a:	614b      	str	r3, [r1, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 800228c:	4b03      	ldr	r3, [pc, #12]	; (800229c <LSM303AGR_MAG_GetCapabilities+0x20>)
  Capabilities->Acc          = 0;
 800228e:	7008      	strb	r0, [r1, #0]
  Capabilities->Gyro         = 0;
 8002290:	7048      	strb	r0, [r1, #1]
  Capabilities->LowPower     = 0;
 8002292:	70c8      	strb	r0, [r1, #3]
  Capabilities->GyroMaxFS    = 0;
 8002294:	6048      	str	r0, [r1, #4]
  Capabilities->AccMaxFS     = 0;
 8002296:	6088      	str	r0, [r1, #8]
  Capabilities->MagMaxOdr    = 100.0f;
 8002298:	618b      	str	r3, [r1, #24]
  return LSM303AGR_OK;
}
 800229a:	4770      	bx	lr
 800229c:	42c80000 	.word	0x42c80000

080022a0 <LSM303AGR_MAG_GetSensitivity>:
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 80022a0:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80022a4:	600b      	str	r3, [r1, #0]

  return LSM303AGR_OK;
}
 80022a6:	2000      	movs	r0, #0
 80022a8:	4770      	bx	lr

080022aa <LSM303AGR_MAG_GetFullScale>:
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
  *FullScale = 50;
 80022aa:	2332      	movs	r3, #50	; 0x32
 80022ac:	600b      	str	r3, [r1, #0]

  return LSM303AGR_OK;
}
 80022ae:	2000      	movs	r0, #0
 80022b0:	4770      	bx	lr

080022b2 <LSM303AGR_MAG_SetFullScale>:
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
  return LSM303AGR_OK;
}
 80022b2:	2000      	movs	r0, #0
 80022b4:	4770      	bx	lr

080022b6 <LSM303AGR_ACC_Init>:
{
 80022b6:	b538      	push	{r3, r4, r5, lr}
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 80022b8:	f100 041c 	add.w	r4, r0, #28
 80022bc:	2101      	movs	r1, #1
{
 80022be:	4605      	mov	r5, r0
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 80022c0:	4620      	mov	r0, r4
 80022c2:	f000 fc61 	bl	8002b88 <lsm303agr_xl_block_data_update_set>
 80022c6:	4601      	mov	r1, r0
 80022c8:	b110      	cbz	r0, 80022d0 <LSM303AGR_ACC_Init+0x1a>
    return LSM303AGR_ERROR;
 80022ca:	f04f 30ff 	mov.w	r0, #4294967295
 80022ce:	bd38      	pop	{r3, r4, r5, pc}
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 80022d0:	4620      	mov	r0, r4
 80022d2:	f000 fce9 	bl	8002ca8 <lsm303agr_xl_fifo_mode_set>
 80022d6:	4601      	mov	r1, r0
 80022d8:	2800      	cmp	r0, #0
 80022da:	d1f6      	bne.n	80022ca <LSM303AGR_ACC_Init+0x14>
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 80022dc:	2305      	movs	r3, #5
 80022de:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 80022e2:	4620      	mov	r0, r4
 80022e4:	f000 fc08 	bl	8002af8 <lsm303agr_xl_data_rate_set>
 80022e8:	4601      	mov	r1, r0
 80022ea:	2800      	cmp	r0, #0
 80022ec:	d1ed      	bne.n	80022ca <LSM303AGR_ACC_Init+0x14>
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 80022ee:	4620      	mov	r0, r4
 80022f0:	f000 fc26 	bl	8002b40 <lsm303agr_xl_full_scale_set>
 80022f4:	2800      	cmp	r0, #0
 80022f6:	d1e8      	bne.n	80022ca <LSM303AGR_ACC_Init+0x14>
  pObj->is_initialized = 1;
 80022f8:	2301      	movs	r3, #1
 80022fa:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
}
 80022fe:	bd38      	pop	{r3, r4, r5, pc}

08002300 <LSM303AGR_ACC_SetFullScale>:
           : (FullScale <= 4) ? LSM303AGR_4g
 8002300:	2902      	cmp	r1, #2
{
 8002302:	b508      	push	{r3, lr}
           : (FullScale <= 4) ? LSM303AGR_4g
 8002304:	dd0d      	ble.n	8002322 <LSM303AGR_ACC_SetFullScale+0x22>
 8002306:	2904      	cmp	r1, #4
 8002308:	dd0d      	ble.n	8002326 <LSM303AGR_ACC_SetFullScale+0x26>
 800230a:	2909      	cmp	r1, #9
 800230c:	bfb4      	ite	lt
 800230e:	2102      	movlt	r1, #2
 8002310:	2103      	movge	r1, #3
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 8002312:	301c      	adds	r0, #28
 8002314:	f000 fc14 	bl	8002b40 <lsm303agr_xl_full_scale_set>
 8002318:	3000      	adds	r0, #0
 800231a:	bf18      	it	ne
 800231c:	2001      	movne	r0, #1
}
 800231e:	4240      	negs	r0, r0
 8002320:	bd08      	pop	{r3, pc}
           : (FullScale <= 4) ? LSM303AGR_4g
 8002322:	2100      	movs	r1, #0
 8002324:	e7f5      	b.n	8002312 <LSM303AGR_ACC_SetFullScale+0x12>
 8002326:	2101      	movs	r1, #1
 8002328:	e7f3      	b.n	8002312 <LSM303AGR_ACC_SetFullScale+0x12>

0800232a <LSM303AGR_ACC_ReadID>:
{
 800232a:	b508      	push	{r3, lr}
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 800232c:	301c      	adds	r0, #28
 800232e:	f000 fc9b 	bl	8002c68 <lsm303agr_xl_device_id_get>
 8002332:	3000      	adds	r0, #0
 8002334:	bf18      	it	ne
 8002336:	2001      	movne	r0, #1
}
 8002338:	4240      	negs	r0, r0
 800233a:	bd08      	pop	{r3, pc}

0800233c <LSM303AGR_ACC_GetOutputDataRate>:
{
 800233c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 800233e:	f100 051c 	add.w	r5, r0, #28
{
 8002342:	460c      	mov	r4, r1
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8002344:	4628      	mov	r0, r5
 8002346:	f10d 0106 	add.w	r1, sp, #6
 800234a:	f000 fbb5 	bl	8002ab8 <lsm303agr_xl_operating_mode_get>
 800234e:	b110      	cbz	r0, 8002356 <LSM303AGR_ACC_GetOutputDataRate+0x1a>
        ret = LSM303AGR_ERROR;
 8002350:	f04f 30ff 	mov.w	r0, #4294967295
 8002354:	e017      	b.n	8002386 <LSM303AGR_ACC_GetOutputDataRate+0x4a>
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8002356:	f10d 0107 	add.w	r1, sp, #7
 800235a:	4628      	mov	r0, r5
 800235c:	f000 fbe2 	bl	8002b24 <lsm303agr_xl_data_rate_get>
 8002360:	2800      	cmp	r0, #0
 8002362:	d1f5      	bne.n	8002350 <LSM303AGR_ACC_GetOutputDataRate+0x14>
  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 8002364:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002368:	2b02      	cmp	r3, #2
 800236a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800236e:	d10e      	bne.n	800238e <LSM303AGR_ACC_GetOutputDataRate+0x52>
    switch (odr_low_level)
 8002370:	2b09      	cmp	r3, #9
 8002372:	d8ed      	bhi.n	8002350 <LSM303AGR_ACC_GetOutputDataRate+0x14>
 8002374:	e8df f003 	tbb	[pc, r3]
 8002378:	2b292624 	.word	0x2b292624
 800237c:	33312f2d 	.word	0x33312f2d
 8002380:	0905      	.short	0x0905
        *Odr = 1620.0f;
 8002382:	4b19      	ldr	r3, [pc, #100]	; (80023e8 <LSM303AGR_ACC_GetOutputDataRate+0xac>)
        *Odr = 1344.0f;
 8002384:	6023      	str	r3, [r4, #0]
}
 8002386:	b003      	add	sp, #12
 8002388:	bd30      	pop	{r4, r5, pc}
        *Odr = 5376.0f;
 800238a:	4b18      	ldr	r3, [pc, #96]	; (80023ec <LSM303AGR_ACC_GetOutputDataRate+0xb0>)
 800238c:	e7fa      	b.n	8002384 <LSM303AGR_ACC_GetOutputDataRate+0x48>
    switch (odr_low_level)
 800238e:	2b09      	cmp	r3, #9
 8002390:	d8de      	bhi.n	8002350 <LSM303AGR_ACC_GetOutputDataRate+0x14>
 8002392:	a201      	add	r2, pc, #4	; (adr r2, 8002398 <LSM303AGR_ACC_GetOutputDataRate+0x5c>)
 8002394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002398:	080023c1 	.word	0x080023c1
 800239c:	080023c5 	.word	0x080023c5
 80023a0:	080023cb 	.word	0x080023cb
 80023a4:	080023cf 	.word	0x080023cf
 80023a8:	080023d3 	.word	0x080023d3
 80023ac:	080023d7 	.word	0x080023d7
 80023b0:	080023db 	.word	0x080023db
 80023b4:	080023df 	.word	0x080023df
 80023b8:	08002351 	.word	0x08002351
 80023bc:	080023e3 	.word	0x080023e3
        *Odr = 0.0f;
 80023c0:	2300      	movs	r3, #0
 80023c2:	e7df      	b.n	8002384 <LSM303AGR_ACC_GetOutputDataRate+0x48>
        *Odr = 1.0f;
 80023c4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80023c8:	e7dc      	b.n	8002384 <LSM303AGR_ACC_GetOutputDataRate+0x48>
        *Odr = 10.0f;
 80023ca:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <LSM303AGR_ACC_GetOutputDataRate+0xb4>)
 80023cc:	e7da      	b.n	8002384 <LSM303AGR_ACC_GetOutputDataRate+0x48>
        *Odr = 25.0f;
 80023ce:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <LSM303AGR_ACC_GetOutputDataRate+0xb8>)
 80023d0:	e7d8      	b.n	8002384 <LSM303AGR_ACC_GetOutputDataRate+0x48>
        *Odr = 50.0f;
 80023d2:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <LSM303AGR_ACC_GetOutputDataRate+0xbc>)
 80023d4:	e7d6      	b.n	8002384 <LSM303AGR_ACC_GetOutputDataRate+0x48>
        *Odr = 100.0f;
 80023d6:	4b09      	ldr	r3, [pc, #36]	; (80023fc <LSM303AGR_ACC_GetOutputDataRate+0xc0>)
 80023d8:	e7d4      	b.n	8002384 <LSM303AGR_ACC_GetOutputDataRate+0x48>
        *Odr = 200.0f;
 80023da:	4b09      	ldr	r3, [pc, #36]	; (8002400 <LSM303AGR_ACC_GetOutputDataRate+0xc4>)
 80023dc:	e7d2      	b.n	8002384 <LSM303AGR_ACC_GetOutputDataRate+0x48>
        *Odr = 400.0f;
 80023de:	4b09      	ldr	r3, [pc, #36]	; (8002404 <LSM303AGR_ACC_GetOutputDataRate+0xc8>)
 80023e0:	e7d0      	b.n	8002384 <LSM303AGR_ACC_GetOutputDataRate+0x48>
        *Odr = 1344.0f;
 80023e2:	4b09      	ldr	r3, [pc, #36]	; (8002408 <LSM303AGR_ACC_GetOutputDataRate+0xcc>)
 80023e4:	e7ce      	b.n	8002384 <LSM303AGR_ACC_GetOutputDataRate+0x48>
 80023e6:	bf00      	nop
 80023e8:	44ca8000 	.word	0x44ca8000
 80023ec:	45a80000 	.word	0x45a80000
 80023f0:	41200000 	.word	0x41200000
 80023f4:	41c80000 	.word	0x41c80000
 80023f8:	42480000 	.word	0x42480000
 80023fc:	42c80000 	.word	0x42c80000
 8002400:	43480000 	.word	0x43480000
 8002404:	43c80000 	.word	0x43c80000
 8002408:	44a80000 	.word	0x44a80000

0800240c <LSM303AGR_ACC_GetFullScale>:
{
 800240c:	b513      	push	{r0, r1, r4, lr}
 800240e:	460c      	mov	r4, r1
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 8002410:	301c      	adds	r0, #28
 8002412:	f10d 0107 	add.w	r1, sp, #7
 8002416:	f000 fba9 	bl	8002b6c <lsm303agr_xl_full_scale_get>
 800241a:	b988      	cbnz	r0, 8002440 <LSM303AGR_ACC_GetFullScale+0x34>
  switch (fs_low_level)
 800241c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002420:	2b03      	cmp	r3, #3
 8002422:	d80d      	bhi.n	8002440 <LSM303AGR_ACC_GetFullScale+0x34>
 8002424:	e8df f003 	tbb	[pc, r3]
 8002428:	0a080602 	.word	0x0a080602
      *FullScale =  2;
 800242c:	2302      	movs	r3, #2
      *FullScale = 16;
 800242e:	6023      	str	r3, [r4, #0]
}
 8002430:	b002      	add	sp, #8
 8002432:	bd10      	pop	{r4, pc}
      *FullScale =  4;
 8002434:	2304      	movs	r3, #4
 8002436:	e7fa      	b.n	800242e <LSM303AGR_ACC_GetFullScale+0x22>
      *FullScale =  8;
 8002438:	2308      	movs	r3, #8
 800243a:	e7f8      	b.n	800242e <LSM303AGR_ACC_GetFullScale+0x22>
      *FullScale = 16;
 800243c:	2310      	movs	r3, #16
 800243e:	e7f6      	b.n	800242e <LSM303AGR_ACC_GetFullScale+0x22>
      ret = LSM303AGR_ERROR;
 8002440:	f04f 30ff 	mov.w	r0, #4294967295
 8002444:	e7f4      	b.n	8002430 <LSM303AGR_ACC_GetFullScale+0x24>
	...

08002448 <LSM303AGR_ACC_GetAxesRaw>:
{
 8002448:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 800244a:	f100 061c 	add.w	r6, r0, #28
{
 800244e:	460c      	mov	r4, r1
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8002450:	4630      	mov	r0, r6
 8002452:	f10d 0107 	add.w	r1, sp, #7
 8002456:	f000 fb2f 	bl	8002ab8 <lsm303agr_xl_operating_mode_get>
 800245a:	b118      	cbz	r0, 8002464 <LSM303AGR_ACC_GetAxesRaw+0x1c>
    return LSM303AGR_ERROR;
 800245c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002460:	b004      	add	sp, #16
 8002462:	bd70      	pop	{r4, r5, r6, pc}
  switch (op_mode)
 8002464:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002468:	2b02      	cmp	r3, #2
 800246a:	d8f7      	bhi.n	800245c <LSM303AGR_ACC_GetAxesRaw+0x14>
 800246c:	4a0c      	ldr	r2, [pc, #48]	; (80024a0 <LSM303AGR_ACC_GetAxesRaw+0x58>)
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 800246e:	a902      	add	r1, sp, #8
 8002470:	4630      	mov	r0, r6
 8002472:	f932 5013 	ldrsh.w	r5, [r2, r3, lsl #1]
 8002476:	f000 fb9d 	bl	8002bb4 <lsm303agr_acceleration_raw_get>
 800247a:	2800      	cmp	r0, #0
 800247c:	d1ee      	bne.n	800245c <LSM303AGR_ACC_GetAxesRaw+0x14>
  Value->x = (data_raw.i16bit[0] / divisor);
 800247e:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8002482:	fb93 f3f5 	sdiv	r3, r3, r5
 8002486:	8023      	strh	r3, [r4, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 8002488:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 800248c:	fb93 f3f5 	sdiv	r3, r3, r5
 8002490:	8063      	strh	r3, [r4, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 8002492:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8002496:	fb93 f3f5 	sdiv	r3, r3, r5
 800249a:	80a3      	strh	r3, [r4, #4]
  return ret;
 800249c:	e7e0      	b.n	8002460 <LSM303AGR_ACC_GetAxesRaw+0x18>
 800249e:	bf00      	nop
 80024a0:	0801d778 	.word	0x0801d778

080024a4 <LSM303AGR_MAG_SetOutputDataRate>:
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 80024a4:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80024a8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80024ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 80024b0:	b508      	push	{r3, lr}
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 80024b2:	d917      	bls.n	80024e4 <LSM303AGR_MAG_SetOutputDataRate+0x40>
 80024b4:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 80024b8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80024bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c0:	d912      	bls.n	80024e8 <LSM303AGR_MAG_SetOutputDataRate+0x44>
 80024c2:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80024ec <LSM303AGR_MAG_SetOutputDataRate+0x48>
 80024c6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80024ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ce:	bf94      	ite	ls
 80024d0:	2102      	movls	r1, #2
 80024d2:	2103      	movhi	r1, #3
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 80024d4:	301c      	adds	r0, #28
 80024d6:	f000 fb88 	bl	8002bea <lsm303agr_mag_data_rate_set>
 80024da:	3000      	adds	r0, #0
 80024dc:	bf18      	it	ne
 80024de:	2001      	movne	r0, #1
}
 80024e0:	4240      	negs	r0, r0
 80024e2:	bd08      	pop	{r3, pc}
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 80024e4:	2100      	movs	r1, #0
 80024e6:	e7f5      	b.n	80024d4 <LSM303AGR_MAG_SetOutputDataRate+0x30>
 80024e8:	2101      	movs	r1, #1
 80024ea:	e7f3      	b.n	80024d4 <LSM303AGR_MAG_SetOutputDataRate+0x30>
 80024ec:	42480000 	.word	0x42480000

080024f0 <LSM303AGR_MAG_Init>:
{
 80024f0:	b538      	push	{r3, r4, r5, lr}
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 80024f2:	f100 041c 	add.w	r4, r0, #28
{
 80024f6:	4605      	mov	r5, r0
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 80024f8:	2101      	movs	r1, #1
 80024fa:	4620      	mov	r0, r4
 80024fc:	f000 fb99 	bl	8002c32 <lsm303agr_mag_block_data_update_set>
 8002500:	b110      	cbz	r0, 8002508 <LSM303AGR_MAG_Init+0x18>
    return LSM303AGR_ERROR;
 8002502:	f04f 30ff 	mov.w	r0, #4294967295
 8002506:	bd38      	pop	{r3, r4, r5, pc}
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8002508:	2102      	movs	r1, #2
 800250a:	4620      	mov	r0, r4
 800250c:	f000 fb57 	bl	8002bbe <lsm303agr_mag_operating_mode_set>
 8002510:	2800      	cmp	r0, #0
 8002512:	d1f6      	bne.n	8002502 <LSM303AGR_MAG_Init+0x12>
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 8002514:	2103      	movs	r1, #3
 8002516:	4620      	mov	r0, r4
 8002518:	f000 fb67 	bl	8002bea <lsm303agr_mag_data_rate_set>
 800251c:	4601      	mov	r1, r0
 800251e:	2800      	cmp	r0, #0
 8002520:	d1ef      	bne.n	8002502 <LSM303AGR_MAG_Init+0x12>
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 8002522:	4620      	mov	r0, r4
 8002524:	f000 fbaa 	bl	8002c7c <lsm303agr_mag_self_test_set>
 8002528:	2800      	cmp	r0, #0
 800252a:	d1ea      	bne.n	8002502 <LSM303AGR_MAG_Init+0x12>
  pObj->is_initialized = 1;
 800252c:	2301      	movs	r3, #1
 800252e:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
}
 8002532:	bd38      	pop	{r3, r4, r5, pc}

08002534 <LSM303AGR_MAG_ReadID>:
{
 8002534:	b508      	push	{r3, lr}
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8002536:	301c      	adds	r0, #28
 8002538:	f000 fb9b 	bl	8002c72 <lsm303agr_mag_device_id_get>
 800253c:	3000      	adds	r0, #0
 800253e:	bf18      	it	ne
 8002540:	2001      	movne	r0, #1
}
 8002542:	4240      	negs	r0, r0
 8002544:	bd08      	pop	{r3, pc}
	...

08002548 <LSM303AGR_MAG_GetOutputDataRate>:
{
 8002548:	b513      	push	{r0, r1, r4, lr}
 800254a:	460c      	mov	r4, r1
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 800254c:	301c      	adds	r0, #28
 800254e:	f10d 0107 	add.w	r1, sp, #7
 8002552:	f000 fb60 	bl	8002c16 <lsm303agr_mag_data_rate_get>
 8002556:	b988      	cbnz	r0, 800257c <LSM303AGR_MAG_GetOutputDataRate+0x34>
  switch (odr_low_level)
 8002558:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800255c:	2b03      	cmp	r3, #3
 800255e:	d80d      	bhi.n	800257c <LSM303AGR_MAG_GetOutputDataRate+0x34>
 8002560:	e8df f003 	tbb	[pc, r3]
 8002564:	0a080602 	.word	0x0a080602
      *Odr = 10.0f;
 8002568:	4b06      	ldr	r3, [pc, #24]	; (8002584 <LSM303AGR_MAG_GetOutputDataRate+0x3c>)
      *Odr = 100.0f;
 800256a:	6023      	str	r3, [r4, #0]
}
 800256c:	b002      	add	sp, #8
 800256e:	bd10      	pop	{r4, pc}
      *Odr = 20.0f;
 8002570:	4b05      	ldr	r3, [pc, #20]	; (8002588 <LSM303AGR_MAG_GetOutputDataRate+0x40>)
 8002572:	e7fa      	b.n	800256a <LSM303AGR_MAG_GetOutputDataRate+0x22>
      *Odr = 50.0f;
 8002574:	4b05      	ldr	r3, [pc, #20]	; (800258c <LSM303AGR_MAG_GetOutputDataRate+0x44>)
 8002576:	e7f8      	b.n	800256a <LSM303AGR_MAG_GetOutputDataRate+0x22>
      *Odr = 100.0f;
 8002578:	4b05      	ldr	r3, [pc, #20]	; (8002590 <LSM303AGR_MAG_GetOutputDataRate+0x48>)
 800257a:	e7f6      	b.n	800256a <LSM303AGR_MAG_GetOutputDataRate+0x22>
      ret = LSM303AGR_ERROR;
 800257c:	f04f 30ff 	mov.w	r0, #4294967295
 8002580:	e7f4      	b.n	800256c <LSM303AGR_MAG_GetOutputDataRate+0x24>
 8002582:	bf00      	nop
 8002584:	41200000 	.word	0x41200000
 8002588:	41a00000 	.word	0x41a00000
 800258c:	42480000 	.word	0x42480000
 8002590:	42c80000 	.word	0x42c80000

08002594 <LSM303AGR_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxesRaw(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8002594:	b513      	push	{r0, r1, r4, lr}
 8002596:	460c      	mov	r4, r1
  axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 8002598:	301c      	adds	r0, #28
 800259a:	4669      	mov	r1, sp
 800259c:	f000 fb5f 	bl	8002c5e <lsm303agr_magnetic_raw_get>
 80025a0:	b950      	cbnz	r0, 80025b8 <LSM303AGR_MAG_GetAxesRaw+0x24>
  {
    return LSM303AGR_ERROR;
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80025a2:	f8bd 3000 	ldrh.w	r3, [sp]
 80025a6:	8023      	strh	r3, [r4, #0]
  Value->y = data_raw.i16bit[1];
 80025a8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80025ac:	8063      	strh	r3, [r4, #2]
  Value->z = data_raw.i16bit[2];
 80025ae:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80025b2:	80a3      	strh	r3, [r4, #4]

  return LSM303AGR_OK;
}
 80025b4:	b002      	add	sp, #8
 80025b6:	bd10      	pop	{r4, pc}
    return LSM303AGR_ERROR;
 80025b8:	f04f 30ff 	mov.w	r0, #4294967295
 80025bc:	e7fa      	b.n	80025b4 <LSM303AGR_MAG_GetAxesRaw+0x20>

080025be <LSM303AGR_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 80025be:	b513      	push	{r0, r1, r4, lr}
 80025c0:	460c      	mov	r4, r1
  axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 80025c2:	301c      	adds	r0, #28
 80025c4:	4669      	mov	r1, sp
 80025c6:	f000 fb4a 	bl	8002c5e <lsm303agr_magnetic_raw_get>
 80025ca:	bb38      	cbnz	r0, 800261c <LSM303AGR_MAG_GetAxes+0x5e>

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80025cc:	f9bd 3000 	ldrsh.w	r3, [sp]
 80025d0:	ee07 3a10 	vmov	s14, r3
 80025d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80025d8:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80025dc:	ee27 7a26 	vmul.f32	s14, s14, s13
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80025e0:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80025e4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80025e8:	ed84 7a00 	vstr	s14, [r4]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80025ec:	ee07 3a10 	vmov	s14, r3
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80025f0:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80025f4:	ee07 3a90 	vmov	s15, r3
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80025f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80025fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002600:	ee27 7a26 	vmul.f32	s14, s14, s13
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002604:	ee67 7aa6 	vmul.f32	s15, s15, s13
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002608:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800260c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002610:	ed84 7a01 	vstr	s14, [r4, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002614:	edc4 7a02 	vstr	s15, [r4, #8]

  return LSM303AGR_OK;
}
 8002618:	b002      	add	sp, #8
 800261a:	bd10      	pop	{r4, pc}
    return LSM303AGR_ERROR;
 800261c:	f04f 30ff 	mov.w	r0, #4294967295
 8002620:	e7fa      	b.n	8002618 <LSM303AGR_MAG_GetAxes+0x5a>
	...

08002624 <LSM303AGR_ACC_SetOutputDataRate>:
{
 8002624:	b508      	push	{r3, lr}
  if (pObj->acc_is_enabled == 1U)
 8002626:	f890 1029 	ldrb.w	r1, [r0, #41]	; 0x29
 800262a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800262e:	2901      	cmp	r1, #1
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Enabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
  lsm303agr_odr_a_t new_odr;

  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8002630:	eeb4 0ae7 	vcmpe.f32	s0, s15
  if (pObj->acc_is_enabled == 1U)
 8002634:	d137      	bne.n	80026a6 <LSM303AGR_ACC_SetOutputDataRate+0x82>
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8002636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800263a:	d924      	bls.n	8002686 <LSM303AGR_ACC_SetOutputDataRate+0x62>
 800263c:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8002640:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002648:	d925      	bls.n	8002696 <LSM303AGR_ACC_SetOutputDataRate+0x72>
 800264a:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 800264e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002656:	d920      	bls.n	800269a <LSM303AGR_ACC_SetOutputDataRate+0x76>
 8002658:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8002714 <LSM303AGR_ACC_SetOutputDataRate+0xf0>
 800265c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002664:	d91b      	bls.n	800269e <LSM303AGR_ACC_SetOutputDataRate+0x7a>
 8002666:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8002718 <LSM303AGR_ACC_SetOutputDataRate+0xf4>
 800266a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800266e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002672:	d916      	bls.n	80026a2 <LSM303AGR_ACC_SetOutputDataRate+0x7e>
 8002674:	eddf 7a29 	vldr	s15, [pc, #164]	; 800271c <LSM303AGR_ACC_SetOutputDataRate+0xf8>
 8002678:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800267c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002680:	bf94      	ite	ls
 8002682:	2106      	movls	r1, #6
 8002684:	2107      	movhi	r1, #7
            : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
            : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
            :                    LSM303AGR_XL_ODR_400Hz;

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8002686:	301c      	adds	r0, #28
 8002688:	f000 fa36 	bl	8002af8 <lsm303agr_xl_data_rate_set>
 800268c:	3000      	adds	r0, #0
 800268e:	bf18      	it	ne
 8002690:	2001      	movne	r0, #1
 8002692:	4240      	negs	r0, r0
 8002694:	bd08      	pop	{r3, pc}
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8002696:	2102      	movs	r1, #2
 8002698:	e7f5      	b.n	8002686 <LSM303AGR_ACC_SetOutputDataRate+0x62>
 800269a:	2103      	movs	r1, #3
 800269c:	e7f3      	b.n	8002686 <LSM303AGR_ACC_SetOutputDataRate+0x62>
 800269e:	2104      	movs	r1, #4
 80026a0:	e7f1      	b.n	8002686 <LSM303AGR_ACC_SetOutputDataRate+0x62>
 80026a2:	2105      	movs	r1, #5
 80026a4:	e7ef      	b.n	8002686 <LSM303AGR_ACC_SetOutputDataRate+0x62>
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 80026a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026aa:	d928      	bls.n	80026fe <LSM303AGR_ACC_SetOutputDataRate+0xda>
 80026ac:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80026b0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80026b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b8:	d923      	bls.n	8002702 <LSM303AGR_ACC_SetOutputDataRate+0xde>
 80026ba:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 80026be:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80026c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026c6:	d91e      	bls.n	8002706 <LSM303AGR_ACC_SetOutputDataRate+0xe2>
 80026c8:	eddf 7a12 	vldr	s15, [pc, #72]	; 8002714 <LSM303AGR_ACC_SetOutputDataRate+0xf0>
 80026cc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80026d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d4:	d919      	bls.n	800270a <LSM303AGR_ACC_SetOutputDataRate+0xe6>
 80026d6:	eddf 7a10 	vldr	s15, [pc, #64]	; 8002718 <LSM303AGR_ACC_SetOutputDataRate+0xf4>
 80026da:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80026de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026e2:	d914      	bls.n	800270e <LSM303AGR_ACC_SetOutputDataRate+0xea>
 80026e4:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800271c <LSM303AGR_ACC_SetOutputDataRate+0xf8>
 80026e8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80026ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f0:	bf94      	ite	ls
 80026f2:	2306      	movls	r3, #6
 80026f4:	2307      	movhi	r3, #7
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 80026f6:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80026fa:	2000      	movs	r0, #0
}
 80026fc:	bd08      	pop	{r3, pc}
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 80026fe:	2301      	movs	r3, #1
 8002700:	e7f9      	b.n	80026f6 <LSM303AGR_ACC_SetOutputDataRate+0xd2>
 8002702:	2302      	movs	r3, #2
 8002704:	e7f7      	b.n	80026f6 <LSM303AGR_ACC_SetOutputDataRate+0xd2>
 8002706:	2303      	movs	r3, #3
 8002708:	e7f5      	b.n	80026f6 <LSM303AGR_ACC_SetOutputDataRate+0xd2>
 800270a:	2304      	movs	r3, #4
 800270c:	e7f3      	b.n	80026f6 <LSM303AGR_ACC_SetOutputDataRate+0xd2>
 800270e:	2305      	movs	r3, #5
 8002710:	e7f1      	b.n	80026f6 <LSM303AGR_ACC_SetOutputDataRate+0xd2>
 8002712:	bf00      	nop
 8002714:	42480000 	.word	0x42480000
 8002718:	42c80000 	.word	0x42c80000
 800271c:	43480000 	.word	0x43480000

08002720 <ReadAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002720:	b430      	push	{r4, r5}
 8002722:	4604      	mov	r4, r0
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8002724:	6885      	ldr	r5, [r0, #8]
 8002726:	6964      	ldr	r4, [r4, #20]
 8002728:	7b00      	ldrb	r0, [r0, #12]
 800272a:	b925      	cbnz	r5, 8002736 <ReadAccRegWrap+0x16>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800272c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002730:	46a4      	mov	ip, r4
  }
}
 8002732:	bc30      	pop	{r4, r5}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002734:	4760      	bx	ip
 8002736:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800273a:	e7f9      	b.n	8002730 <ReadAccRegWrap+0x10>

0800273c <WriteAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800273c:	b430      	push	{r4, r5}
 800273e:	4604      	mov	r4, r0
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8002740:	6885      	ldr	r5, [r0, #8]
 8002742:	6924      	ldr	r4, [r4, #16]
 8002744:	7b00      	ldrb	r0, [r0, #12]
 8002746:	b925      	cbnz	r5, 8002752 <WriteAccRegWrap+0x16>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002748:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800274c:	46a4      	mov	ip, r4
  }
}
 800274e:	bc30      	pop	{r4, r5}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002750:	4760      	bx	ip
 8002752:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8002756:	e7f9      	b.n	800274c <WriteAccRegWrap+0x10>

08002758 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002758:	b430      	push	{r4, r5}
 800275a:	4604      	mov	r4, r0
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 800275c:	6885      	ldr	r5, [r0, #8]
 800275e:	6964      	ldr	r4, [r4, #20]
 8002760:	7b00      	ldrb	r0, [r0, #12]
 8002762:	b925      	cbnz	r5, 800276e <ReadMagRegWrap+0x16>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002764:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002768:	46a4      	mov	ip, r4
  }
}
 800276a:	bc30      	pop	{r4, r5}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800276c:	4760      	bx	ip
 800276e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8002772:	e7f9      	b.n	8002768 <ReadMagRegWrap+0x10>

08002774 <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002774:	b430      	push	{r4, r5}
 8002776:	4604      	mov	r4, r0
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8002778:	6885      	ldr	r5, [r0, #8]
 800277a:	6924      	ldr	r4, [r4, #16]
 800277c:	7b00      	ldrb	r0, [r0, #12]
 800277e:	b925      	cbnz	r5, 800278a <WriteMagRegWrap+0x16>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002780:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002784:	46a4      	mov	ip, r4
  }
}
 8002786:	bc30      	pop	{r4, r5}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002788:	4760      	bx	ip
 800278a:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800278e:	e7f9      	b.n	8002784 <WriteMagRegWrap+0x10>

08002790 <LSM303AGR_ACC_Enable>:
{
 8002790:	b510      	push	{r4, lr}
  if (pObj->acc_is_enabled == 1U)
 8002792:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8002796:	2b01      	cmp	r3, #1
{
 8002798:	4604      	mov	r4, r0
  if (pObj->acc_is_enabled == 1U)
 800279a:	d009      	beq.n	80027b0 <LSM303AGR_ACC_Enable+0x20>
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 800279c:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
 80027a0:	301c      	adds	r0, #28
 80027a2:	f000 f9a9 	bl	8002af8 <lsm303agr_xl_data_rate_set>
 80027a6:	b928      	cbnz	r0, 80027b4 <LSM303AGR_ACC_Enable+0x24>
  pObj->acc_is_enabled = 1;
 80027a8:	2301      	movs	r3, #1
 80027aa:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 80027ae:	bd10      	pop	{r4, pc}
    return LSM303AGR_OK;
 80027b0:	2000      	movs	r0, #0
 80027b2:	bd10      	pop	{r4, pc}
    return LSM303AGR_ERROR;
 80027b4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80027b8:	bd10      	pop	{r4, pc}

080027ba <LSM303AGR_ACC_Disable>:
{
 80027ba:	b538      	push	{r3, r4, r5, lr}
 80027bc:	4604      	mov	r4, r0
  if (pObj->acc_is_enabled == 0U)
 80027be:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 80027c2:	b190      	cbz	r0, 80027ea <LSM303AGR_ACC_Disable+0x30>
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 80027c4:	f104 051c 	add.w	r5, r4, #28
 80027c8:	f104 012a 	add.w	r1, r4, #42	; 0x2a
 80027cc:	4628      	mov	r0, r5
 80027ce:	f000 f9a9 	bl	8002b24 <lsm303agr_xl_data_rate_get>
 80027d2:	4601      	mov	r1, r0
 80027d4:	b110      	cbz	r0, 80027dc <LSM303AGR_ACC_Disable+0x22>
    return LSM303AGR_ERROR;
 80027d6:	f04f 30ff 	mov.w	r0, #4294967295
 80027da:	bd38      	pop	{r3, r4, r5, pc}
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 80027dc:	4628      	mov	r0, r5
 80027de:	f000 f98b 	bl	8002af8 <lsm303agr_xl_data_rate_set>
 80027e2:	2800      	cmp	r0, #0
 80027e4:	d1f7      	bne.n	80027d6 <LSM303AGR_ACC_Disable+0x1c>
  pObj->acc_is_enabled = 0;
 80027e6:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
}
 80027ea:	bd38      	pop	{r3, r4, r5, pc}

080027ec <LSM303AGR_ACC_DeInit>:
{
 80027ec:	b510      	push	{r4, lr}
 80027ee:	4604      	mov	r4, r0
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 80027f0:	f7ff ffe3 	bl	80027ba <LSM303AGR_ACC_Disable>
 80027f4:	b920      	cbnz	r0, 8002800 <LSM303AGR_ACC_DeInit+0x14>
  pObj->is_initialized = 0;
 80027f6:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 80027fa:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
  return LSM303AGR_OK;
 80027fe:	bd10      	pop	{r4, pc}
    return LSM303AGR_ERROR;
 8002800:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002804:	bd10      	pop	{r4, pc}
	...

08002808 <LSM303AGR_ACC_GetSensitivity>:
{
 8002808:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 800280a:	f100 051c 	add.w	r5, r0, #28
{
 800280e:	460c      	mov	r4, r1
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8002810:	4628      	mov	r0, r5
 8002812:	f10d 0106 	add.w	r1, sp, #6
 8002816:	f000 f94f 	bl	8002ab8 <lsm303agr_xl_operating_mode_get>
 800281a:	b930      	cbnz	r0, 800282a <LSM303AGR_ACC_GetSensitivity+0x22>
  switch (op_mode)
 800281c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d01c      	beq.n	800285e <LSM303AGR_ACC_GetSensitivity+0x56>
 8002824:	d304      	bcc.n	8002830 <LSM303AGR_ACC_GetSensitivity+0x28>
 8002826:	2b02      	cmp	r3, #2
 8002828:	d02e      	beq.n	8002888 <LSM303AGR_ACC_GetSensitivity+0x80>
        return LSM303AGR_ERROR;
 800282a:	f04f 30ff 	mov.w	r0, #4294967295
 800282e:	e010      	b.n	8002852 <LSM303AGR_ACC_GetSensitivity+0x4a>
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8002830:	f10d 0107 	add.w	r1, sp, #7
 8002834:	4628      	mov	r0, r5
 8002836:	f000 f999 	bl	8002b6c <lsm303agr_xl_full_scale_get>
 800283a:	2800      	cmp	r0, #0
 800283c:	d1f5      	bne.n	800282a <LSM303AGR_ACC_GetSensitivity+0x22>
  switch (fullscale)
 800283e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002842:	2b03      	cmp	r3, #3
 8002844:	d8f1      	bhi.n	800282a <LSM303AGR_ACC_GetSensitivity+0x22>
 8002846:	e8df f003 	tbb	[pc, r3]
 800284a:	0602      	.short	0x0602
 800284c:	0819      	.short	0x0819
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 800284e:	4b1a      	ldr	r3, [pc, #104]	; (80028b8 <LSM303AGR_ACC_GetSensitivity+0xb0>)
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 8002850:	6023      	str	r3, [r4, #0]
}
 8002852:	b003      	add	sp, #12
 8002854:	bd30      	pop	{r4, r5, pc}
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 8002856:	4b19      	ldr	r3, [pc, #100]	; (80028bc <LSM303AGR_ACC_GetSensitivity+0xb4>)
 8002858:	e7fa      	b.n	8002850 <LSM303AGR_ACC_GetSensitivity+0x48>
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 800285a:	4b19      	ldr	r3, [pc, #100]	; (80028c0 <LSM303AGR_ACC_GetSensitivity+0xb8>)
 800285c:	e7f8      	b.n	8002850 <LSM303AGR_ACC_GetSensitivity+0x48>
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 800285e:	f10d 0107 	add.w	r1, sp, #7
 8002862:	4628      	mov	r0, r5
 8002864:	f000 f982 	bl	8002b6c <lsm303agr_xl_full_scale_get>
 8002868:	2800      	cmp	r0, #0
 800286a:	d1de      	bne.n	800282a <LSM303AGR_ACC_GetSensitivity+0x22>
  switch (fullscale)
 800286c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002870:	2b03      	cmp	r3, #3
 8002872:	d8da      	bhi.n	800282a <LSM303AGR_ACC_GetSensitivity+0x22>
 8002874:	e8df f003 	tbb	[pc, r3]
 8002878:	06170402 	.word	0x06170402
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 800287c:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <LSM303AGR_ACC_GetSensitivity+0xbc>)
 800287e:	e7e7      	b.n	8002850 <LSM303AGR_ACC_GetSensitivity+0x48>
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 8002880:	4b11      	ldr	r3, [pc, #68]	; (80028c8 <LSM303AGR_ACC_GetSensitivity+0xc0>)
 8002882:	e7e5      	b.n	8002850 <LSM303AGR_ACC_GetSensitivity+0x48>
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 8002884:	4b11      	ldr	r3, [pc, #68]	; (80028cc <LSM303AGR_ACC_GetSensitivity+0xc4>)
 8002886:	e7e3      	b.n	8002850 <LSM303AGR_ACC_GetSensitivity+0x48>
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8002888:	f10d 0107 	add.w	r1, sp, #7
 800288c:	4628      	mov	r0, r5
 800288e:	f000 f96d 	bl	8002b6c <lsm303agr_xl_full_scale_get>
 8002892:	2800      	cmp	r0, #0
 8002894:	d1c9      	bne.n	800282a <LSM303AGR_ACC_GetSensitivity+0x22>
  switch (fullscale)
 8002896:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800289a:	2b03      	cmp	r3, #3
 800289c:	d8c5      	bhi.n	800282a <LSM303AGR_ACC_GetSensitivity+0x22>
 800289e:	e8df f003 	tbb	[pc, r3]
 80028a2:	0402      	.short	0x0402
 80028a4:	0806      	.short	0x0806
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 80028a6:	4b0a      	ldr	r3, [pc, #40]	; (80028d0 <LSM303AGR_ACC_GetSensitivity+0xc8>)
 80028a8:	e7d2      	b.n	8002850 <LSM303AGR_ACC_GetSensitivity+0x48>
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 80028aa:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <LSM303AGR_ACC_GetSensitivity+0xcc>)
 80028ac:	e7d0      	b.n	8002850 <LSM303AGR_ACC_GetSensitivity+0x48>
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 80028ae:	4b0a      	ldr	r3, [pc, #40]	; (80028d8 <LSM303AGR_ACC_GetSensitivity+0xd0>)
 80028b0:	e7ce      	b.n	8002850 <LSM303AGR_ACC_GetSensitivity+0x48>
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 80028b2:	4b0a      	ldr	r3, [pc, #40]	; (80028dc <LSM303AGR_ACC_GetSensitivity+0xd4>)
 80028b4:	e7cc      	b.n	8002850 <LSM303AGR_ACC_GetSensitivity+0x48>
 80028b6:	bf00      	nop
 80028b8:	3f7ae148 	.word	0x3f7ae148
 80028bc:	3ff9999a 	.word	0x3ff9999a
 80028c0:	413b851f 	.word	0x413b851f
 80028c4:	4079999a 	.word	0x4079999a
 80028c8:	40fa3d71 	.word	0x40fa3d71
 80028cc:	423b999a 	.word	0x423b999a
 80028d0:	417a147b 	.word	0x417a147b
 80028d4:	41fa147b 	.word	0x41fa147b
 80028d8:	427a147b 	.word	0x427a147b
 80028dc:	433b947b 	.word	0x433b947b

080028e0 <LSM303AGR_ACC_GetAxes>:
{
 80028e0:	b530      	push	{r4, r5, lr}
 80028e2:	b085      	sub	sp, #20
 80028e4:	460c      	mov	r4, r1
  float sensitivity = 0.0f;
 80028e6:	2300      	movs	r3, #0
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 80028e8:	a902      	add	r1, sp, #8
{
 80028ea:	4605      	mov	r5, r0
  float sensitivity = 0.0f;
 80028ec:	9301      	str	r3, [sp, #4]
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 80028ee:	f7ff fdab 	bl	8002448 <LSM303AGR_ACC_GetAxesRaw>
 80028f2:	b118      	cbz	r0, 80028fc <LSM303AGR_ACC_GetAxes+0x1c>
    return LSM303AGR_ERROR;
 80028f4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80028f8:	b005      	add	sp, #20
 80028fa:	bd30      	pop	{r4, r5, pc}
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 80028fc:	a901      	add	r1, sp, #4
 80028fe:	4628      	mov	r0, r5
 8002900:	f7ff ff82 	bl	8002808 <LSM303AGR_ACC_GetSensitivity>
 8002904:	2800      	cmp	r0, #0
 8002906:	d1f5      	bne.n	80028f4 <LSM303AGR_ACC_GetAxes+0x14>
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8002908:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 800290c:	eddd 6a01 	vldr	s13, [sp, #4]
 8002910:	ee07 3a10 	vmov	s14, r3
 8002914:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8002918:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 800291c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002920:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8002924:	ed84 7a00 	vstr	s14, [r4]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8002928:	ee07 3a10 	vmov	s14, r3
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 800292c:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8002930:	ee07 3a90 	vmov	s15, r3
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8002934:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8002938:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 800293c:	ee27 7a26 	vmul.f32	s14, s14, s13
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8002940:	ee67 7aa6 	vmul.f32	s15, s15, s13
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8002944:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8002948:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 800294c:	ed84 7a01 	vstr	s14, [r4, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8002950:	edc4 7a02 	vstr	s15, [r4, #8]
  return LSM303AGR_OK;
 8002954:	e7d0      	b.n	80028f8 <LSM303AGR_ACC_GetAxes+0x18>

08002956 <LSM303AGR_MAG_Enable>:
{
 8002956:	b510      	push	{r4, lr}
  if (pObj->mag_is_enabled == 1U)
 8002958:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800295c:	2b01      	cmp	r3, #1
{
 800295e:	4604      	mov	r4, r0
  if (pObj->mag_is_enabled == 1U)
 8002960:	d008      	beq.n	8002974 <LSM303AGR_MAG_Enable+0x1e>
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 8002962:	2100      	movs	r1, #0
 8002964:	301c      	adds	r0, #28
 8002966:	f000 f92a 	bl	8002bbe <lsm303agr_mag_operating_mode_set>
 800296a:	b928      	cbnz	r0, 8002978 <LSM303AGR_MAG_Enable+0x22>
  pObj->mag_is_enabled = 1;
 800296c:	2301      	movs	r3, #1
 800296e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 8002972:	bd10      	pop	{r4, pc}
    return LSM303AGR_OK;
 8002974:	2000      	movs	r0, #0
 8002976:	bd10      	pop	{r4, pc}
    return LSM303AGR_ERROR;
 8002978:	f04f 30ff 	mov.w	r0, #4294967295
}
 800297c:	bd10      	pop	{r4, pc}

0800297e <LSM303AGR_MAG_Disable>:
{
 800297e:	b510      	push	{r4, lr}
 8002980:	4604      	mov	r4, r0
  if (pObj->mag_is_enabled == 0U)
 8002982:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 8002986:	b150      	cbz	r0, 800299e <LSM303AGR_MAG_Disable+0x20>
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8002988:	2102      	movs	r1, #2
 800298a:	f104 001c 	add.w	r0, r4, #28
 800298e:	f000 f916 	bl	8002bbe <lsm303agr_mag_operating_mode_set>
 8002992:	b910      	cbnz	r0, 800299a <LSM303AGR_MAG_Disable+0x1c>
  pObj->mag_is_enabled = 0;
 8002994:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 8002998:	bd10      	pop	{r4, pc}
    return LSM303AGR_ERROR;
 800299a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800299e:	bd10      	pop	{r4, pc}

080029a0 <LSM303AGR_MAG_DeInit>:
{
 80029a0:	b510      	push	{r4, lr}
 80029a2:	4604      	mov	r4, r0
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 80029a4:	f7ff ffeb 	bl	800297e <LSM303AGR_MAG_Disable>
 80029a8:	b910      	cbnz	r0, 80029b0 <LSM303AGR_MAG_DeInit+0x10>
  pObj->is_initialized = 0;
 80029aa:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
  return LSM303AGR_OK;
 80029ae:	bd10      	pop	{r4, pc}
    return LSM303AGR_ERROR;
 80029b0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80029b4:	bd10      	pop	{r4, pc}

080029b6 <LSM303AGR_ACC_Write_Reg>:
{
 80029b6:	b513      	push	{r0, r1, r4, lr}
 80029b8:	ac02      	add	r4, sp, #8
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 80029ba:	2301      	movs	r3, #1
{
 80029bc:	f804 2d01 	strb.w	r2, [r4, #-1]!
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 80029c0:	301c      	adds	r0, #28
 80029c2:	4622      	mov	r2, r4
 80029c4:	f000 f871 	bl	8002aaa <lsm303agr_write_reg>
 80029c8:	3000      	adds	r0, #0
 80029ca:	bf18      	it	ne
 80029cc:	2001      	movne	r0, #1
}
 80029ce:	4240      	negs	r0, r0
 80029d0:	b002      	add	sp, #8
 80029d2:	bd10      	pop	{r4, pc}

080029d4 <LSM303AGR_ACC_RegisterBusIO>:
{
 80029d4:	b510      	push	{r4, lr}
  if (pObj == NULL)
 80029d6:	4604      	mov	r4, r0
 80029d8:	b910      	cbnz	r0, 80029e0 <LSM303AGR_ACC_RegisterBusIO+0xc>
    ret = LSM303AGR_ERROR;
 80029da:	f04f 30ff 	mov.w	r0, #4294967295
 80029de:	bd10      	pop	{r4, pc}
    pObj->IO.DeInit    = pIO->DeInit;
 80029e0:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 80029e2:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80029e4:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 80029e6:	688a      	ldr	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 80029e8:	6003      	str	r3, [r0, #0]
    pObj->IO.BusType   = pIO->BusType;
 80029ea:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 80029ec:	7b0a      	ldrb	r2, [r1, #12]
 80029ee:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80029f0:	690a      	ldr	r2, [r1, #16]
 80029f2:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80029f4:	694a      	ldr	r2, [r1, #20]
 80029f6:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80029f8:	698a      	ldr	r2, [r1, #24]
 80029fa:	6182      	str	r2, [r0, #24]
    pObj->Ctx.read_reg  = ReadAccRegWrap;
 80029fc:	4a0c      	ldr	r2, [pc, #48]	; (8002a30 <LSM303AGR_ACC_RegisterBusIO+0x5c>)
 80029fe:	6202      	str	r2, [r0, #32]
    pObj->Ctx.write_reg = WriteAccRegWrap;
 8002a00:	4a0c      	ldr	r2, [pc, #48]	; (8002a34 <LSM303AGR_ACC_RegisterBusIO+0x60>)
 8002a02:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.handle    = pObj;
 8002a04:	6260      	str	r0, [r4, #36]	; 0x24
    if (pObj->IO.Init == NULL)
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d0e7      	beq.n	80029da <LSM303AGR_ACC_RegisterBusIO+0x6>
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8002a0a:	4798      	blx	r3
 8002a0c:	2800      	cmp	r0, #0
 8002a0e:	d1e4      	bne.n	80029da <LSM303AGR_ACC_RegisterBusIO+0x6>
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002a10:	68a2      	ldr	r2, [r4, #8]
 8002a12:	2a01      	cmp	r2, #1
 8002a14:	d10a      	bne.n	8002a2c <LSM303AGR_ACC_RegisterBusIO+0x58>
        if (pObj->is_initialized == 0U)
 8002a16:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8002a1a:	b93b      	cbnz	r3, 8002a2c <LSM303AGR_ACC_RegisterBusIO+0x58>
          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 8002a1c:	2123      	movs	r1, #35	; 0x23
 8002a1e:	4620      	mov	r0, r4
 8002a20:	f7ff ffc9 	bl	80029b6 <LSM303AGR_ACC_Write_Reg>
 8002a24:	3000      	adds	r0, #0
 8002a26:	bf18      	it	ne
 8002a28:	2001      	movne	r0, #1
 8002a2a:	4240      	negs	r0, r0
}
 8002a2c:	bd10      	pop	{r4, pc}
 8002a2e:	bf00      	nop
 8002a30:	08002721 	.word	0x08002721
 8002a34:	0800273d 	.word	0x0800273d

08002a38 <LSM303AGR_MAG_RegisterBusIO>:
{
 8002a38:	b510      	push	{r4, lr}
  if (pObj == NULL)
 8002a3a:	4604      	mov	r4, r0
 8002a3c:	b910      	cbnz	r0, 8002a44 <LSM303AGR_MAG_RegisterBusIO+0xc>
    ret = LSM303AGR_ERROR;
 8002a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8002a42:	bd10      	pop	{r4, pc}
    pObj->IO.DeInit    = pIO->DeInit;
 8002a44:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8002a46:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002a48:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002a4a:	688a      	ldr	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 8002a4c:	6003      	str	r3, [r0, #0]
    pObj->IO.BusType   = pIO->BusType;
 8002a4e:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 8002a50:	7b0a      	ldrb	r2, [r1, #12]
 8002a52:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002a54:	690a      	ldr	r2, [r1, #16]
 8002a56:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002a58:	694a      	ldr	r2, [r1, #20]
 8002a5a:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002a5c:	698a      	ldr	r2, [r1, #24]
 8002a5e:	6182      	str	r2, [r0, #24]
    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8002a60:	4a0c      	ldr	r2, [pc, #48]	; (8002a94 <LSM303AGR_MAG_RegisterBusIO+0x5c>)
 8002a62:	6202      	str	r2, [r0, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8002a64:	4a0c      	ldr	r2, [pc, #48]	; (8002a98 <LSM303AGR_MAG_RegisterBusIO+0x60>)
 8002a66:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.handle    = pObj;
 8002a68:	6260      	str	r0, [r4, #36]	; 0x24
    if (pObj->IO.Init == NULL)
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0e7      	beq.n	8002a3e <LSM303AGR_MAG_RegisterBusIO+0x6>
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8002a6e:	4798      	blx	r3
 8002a70:	2800      	cmp	r0, #0
 8002a72:	d1e4      	bne.n	8002a3e <LSM303AGR_MAG_RegisterBusIO+0x6>
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 8002a74:	68a3      	ldr	r3, [r4, #8]
 8002a76:	b15b      	cbz	r3, 8002a90 <LSM303AGR_MAG_RegisterBusIO+0x58>
        if (pObj->is_initialized == 0U)
 8002a78:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8002a7c:	b943      	cbnz	r3, 8002a90 <LSM303AGR_MAG_RegisterBusIO+0x58>
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 8002a7e:	2101      	movs	r1, #1
 8002a80:	f104 001c 	add.w	r0, r4, #28
 8002a84:	f000 f926 	bl	8002cd4 <lsm303agr_mag_i2c_interface_set>
 8002a88:	3000      	adds	r0, #0
 8002a8a:	bf18      	it	ne
 8002a8c:	2001      	movne	r0, #1
 8002a8e:	4240      	negs	r0, r0
}
 8002a90:	bd10      	pop	{r4, pc}
 8002a92:	bf00      	nop
 8002a94:	08002759 	.word	0x08002759
 8002a98:	08002775 	.word	0x08002775

08002a9c <lsm303agr_read_reg>:
  * @param  uint16_t len: number of consecutive register to read
  *
  */
int32_t lsm303agr_read_reg(lsm303agr_ctx_t *ctx, uint8_t reg, uint8_t *data,
                           uint16_t len)
{
 8002a9c:	b410      	push	{r4}
  return ctx->read_reg(ctx->handle, reg, data, len);
 8002a9e:	6844      	ldr	r4, [r0, #4]
 8002aa0:	6880      	ldr	r0, [r0, #8]
 8002aa2:	46a4      	mov	ip, r4
}
 8002aa4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->read_reg(ctx->handle, reg, data, len);
 8002aa8:	4760      	bx	ip

08002aaa <lsm303agr_write_reg>:
  * @param  uint16_t len: number of consecutive register to write
  *
*/
int32_t lsm303agr_write_reg(lsm303agr_ctx_t *ctx, uint8_t reg, uint8_t *data,
                            uint16_t len)
{
 8002aaa:	b410      	push	{r4}
  return ctx->write_reg(ctx->handle, reg, data, len);
 8002aac:	6804      	ldr	r4, [r0, #0]
 8002aae:	6880      	ldr	r0, [r0, #8]
 8002ab0:	46a4      	mov	ip, r4
}
 8002ab2:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->write_reg(ctx->handle, reg, data, len);
 8002ab6:	4760      	bx	ip

08002ab8 <lsm303agr_xl_operating_mode_get>:
  *                                  reg CTRL_REG4_AG1_A
  *
  */
int32_t lsm303agr_xl_operating_mode_get(lsm303agr_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 8002ab8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  lsm303agr_reg_t reg;
  int32_t mm_error;
  uint8_t lpen, hr;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A, &reg.byte, 1);
 8002aba:	2301      	movs	r3, #1
 8002abc:	aa01      	add	r2, sp, #4
{
 8002abe:	460d      	mov	r5, r1
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A, &reg.byte, 1);
 8002ac0:	2120      	movs	r1, #32
{
 8002ac2:	4607      	mov	r7, r0
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A, &reg.byte, 1);
 8002ac4:	f7ff ffea 	bl	8002a9c <lsm303agr_read_reg>
  lpen = reg.ctrl_reg1_a.lpen;
 8002ac8:	f89d 4004 	ldrb.w	r4, [sp, #4]
 8002acc:	f3c4 04c0 	ubfx	r4, r4, #3, #1
 8002ad0:	b2e6      	uxtb	r6, r4
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A, &reg.byte, 1);
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	aa01      	add	r2, sp, #4
 8002ad6:	2123      	movs	r1, #35	; 0x23
 8002ad8:	4638      	mov	r0, r7
 8002ada:	f7ff ffdf 	bl	8002a9c <lsm303agr_read_reg>
  hr = reg.ctrl_reg4_a.hr;

  if (lpen)
 8002ade:	b116      	cbz	r6, 8002ae6 <lsm303agr_xl_operating_mode_get+0x2e>
  {
    *val = LSM303AGR_LP_8bit;
 8002ae0:	2302      	movs	r3, #2
  {
    *val = LSM303AGR_HR_12bit;
  }
  else
  {
    *val = LSM303AGR_NM_10bit;
 8002ae2:	702b      	strb	r3, [r5, #0]
  }

  return mm_error;
 8002ae4:	e004      	b.n	8002af0 <lsm303agr_xl_operating_mode_get+0x38>
  hr = reg.ctrl_reg4_a.hr;
 8002ae6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  else if (hr)
 8002aea:	071b      	lsls	r3, r3, #28
 8002aec:	d502      	bpl.n	8002af4 <lsm303agr_xl_operating_mode_get+0x3c>
    *val = LSM303AGR_HR_12bit;
 8002aee:	702c      	strb	r4, [r5, #0]
}
 8002af0:	b003      	add	sp, #12
 8002af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *val = LSM303AGR_NM_10bit;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e7f4      	b.n	8002ae2 <lsm303agr_xl_operating_mode_get+0x2a>

08002af8 <lsm303agr_xl_data_rate_set>:
  * @param  lsm303agr_odr_a_t: change the values of odr in reg CTRL_REG1_A
  *
  */
int32_t lsm303agr_xl_data_rate_set(lsm303agr_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 8002af8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8002afa:	2301      	movs	r3, #1
{
 8002afc:	460d      	mov	r5, r1
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8002afe:	aa01      	add	r2, sp, #4
 8002b00:	2120      	movs	r1, #32
{
 8002b02:	4604      	mov	r4, r0
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8002b04:	f7ff ffca 	bl	8002a9c <lsm303agr_read_reg>
                                &reg.byte, 1);
  reg.ctrl_reg1_a.odr = val;
 8002b08:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002b0c:	f365 1307 	bfi	r3, r5, #4, #4
 8002b10:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8002b14:	aa01      	add	r2, sp, #4
 8002b16:	2301      	movs	r3, #1
 8002b18:	2120      	movs	r1, #32
 8002b1a:	4620      	mov	r0, r4
 8002b1c:	f7ff ffc5 	bl	8002aaa <lsm303agr_write_reg>
                                 &reg.byte, 1);

  return mm_error;
}
 8002b20:	b003      	add	sp, #12
 8002b22:	bd30      	pop	{r4, r5, pc}

08002b24 <lsm303agr_xl_data_rate_get>:
  * @param  lsm303agr_odr_a_t: Get the values of odr in reg CTRL_REG1_A
  *
  */
int32_t lsm303agr_xl_data_rate_get(lsm303agr_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 8002b24:	b513      	push	{r0, r1, r4, lr}
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A, &reg.byte, 1);
 8002b26:	2301      	movs	r3, #1
{
 8002b28:	460c      	mov	r4, r1
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A, &reg.byte, 1);
 8002b2a:	aa01      	add	r2, sp, #4
 8002b2c:	2120      	movs	r1, #32
 8002b2e:	f7ff ffb5 	bl	8002a9c <lsm303agr_read_reg>
  *val = (lsm303agr_odr_a_t) reg.ctrl_reg1_a.odr;
 8002b32:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002b36:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002b3a:	7023      	strb	r3, [r4, #0]

  return mm_error;
}
 8002b3c:	b002      	add	sp, #8
 8002b3e:	bd10      	pop	{r4, pc}

08002b40 <lsm303agr_xl_full_scale_set>:
  * @param  lsm303agr_fs_a_t: change the values of fs in reg CTRL_REG4_A
  *
  */
int32_t lsm303agr_xl_full_scale_set(lsm303agr_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 8002b40:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A, &reg.byte, 1);
 8002b42:	2301      	movs	r3, #1
{
 8002b44:	460d      	mov	r5, r1
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A, &reg.byte, 1);
 8002b46:	aa01      	add	r2, sp, #4
 8002b48:	2123      	movs	r1, #35	; 0x23
{
 8002b4a:	4604      	mov	r4, r0
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A, &reg.byte, 1);
 8002b4c:	f7ff ffa6 	bl	8002a9c <lsm303agr_read_reg>
  reg.ctrl_reg4_a.fs = val;
 8002b50:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002b54:	f365 1305 	bfi	r3, r5, #4, #2
 8002b58:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A, &reg.byte, 1);
 8002b5c:	aa01      	add	r2, sp, #4
 8002b5e:	2301      	movs	r3, #1
 8002b60:	2123      	movs	r1, #35	; 0x23
 8002b62:	4620      	mov	r0, r4
 8002b64:	f7ff ffa1 	bl	8002aaa <lsm303agr_write_reg>

  return mm_error;
}
 8002b68:	b003      	add	sp, #12
 8002b6a:	bd30      	pop	{r4, r5, pc}

08002b6c <lsm303agr_xl_full_scale_get>:
  * @param  lsm303agr_fs_a_t: Get the values of fs in reg CTRL_REG4_A
  *
  */
int32_t lsm303agr_xl_full_scale_get(lsm303agr_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 8002b6c:	b513      	push	{r0, r1, r4, lr}
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A, &reg.byte, 1);
 8002b6e:	2301      	movs	r3, #1
{
 8002b70:	460c      	mov	r4, r1
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A, &reg.byte, 1);
 8002b72:	aa01      	add	r2, sp, #4
 8002b74:	2123      	movs	r1, #35	; 0x23
 8002b76:	f7ff ff91 	bl	8002a9c <lsm303agr_read_reg>
  *val = (lsm303agr_fs_a_t) reg.ctrl_reg4_a.fs;
 8002b7a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002b7e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8002b82:	7023      	strb	r3, [r4, #0]

  return mm_error;
}
 8002b84:	b002      	add	sp, #8
 8002b86:	bd10      	pop	{r4, pc}

08002b88 <lsm303agr_xl_block_data_update_set>:
  * @param  uint8_t val: change the values of bdu in reg CTRL_REG4_A
  *
  */
int32_t lsm303agr_xl_block_data_update_set(lsm303agr_ctx_t *ctx,
                                           uint8_t val)
{
 8002b88:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A, &reg.byte, 1);
 8002b8a:	2301      	movs	r3, #1
{
 8002b8c:	460d      	mov	r5, r1
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A, &reg.byte, 1);
 8002b8e:	aa01      	add	r2, sp, #4
 8002b90:	2123      	movs	r1, #35	; 0x23
{
 8002b92:	4604      	mov	r4, r0
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A, &reg.byte, 1);
 8002b94:	f7ff ff82 	bl	8002a9c <lsm303agr_read_reg>
  reg.ctrl_reg4_a.bdu = val;
 8002b98:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002b9c:	f365 13c7 	bfi	r3, r5, #7, #1
 8002ba0:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A, &reg.byte, 1);
 8002ba4:	aa01      	add	r2, sp, #4
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	2123      	movs	r1, #35	; 0x23
 8002baa:	4620      	mov	r0, r4
 8002bac:	f7ff ff7d 	bl	8002aaa <lsm303agr_write_reg>

  return mm_error;
}
 8002bb0:	b003      	add	sp, #12
 8002bb2:	bd30      	pop	{r4, r5, pc}

08002bb4 <lsm303agr_acceleration_raw_get>:
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t lsm303agr_acceleration_raw_get(lsm303agr_ctx_t *ctx, uint8_t *buff)
{
  return lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 8002bb4:	460a      	mov	r2, r1
 8002bb6:	2306      	movs	r3, #6
 8002bb8:	2128      	movs	r1, #40	; 0x28
 8002bba:	f7ff bf6f 	b.w	8002a9c <lsm303agr_read_reg>

08002bbe <lsm303agr_mag_operating_mode_set>:
  * @param  lsm303agr_md_t: change the values of md in reg CFG_REG_A_M
  *
  */
int32_t lsm303agr_mag_operating_mode_set(lsm303agr_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 8002bbe:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M, &reg.byte, 1);
 8002bc0:	2301      	movs	r3, #1
{
 8002bc2:	460d      	mov	r5, r1
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M, &reg.byte, 1);
 8002bc4:	aa01      	add	r2, sp, #4
 8002bc6:	2160      	movs	r1, #96	; 0x60
{
 8002bc8:	4604      	mov	r4, r0
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M, &reg.byte, 1);
 8002bca:	f7ff ff67 	bl	8002a9c <lsm303agr_read_reg>
  reg.cfg_reg_a_m.md = val;
 8002bce:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002bd2:	f365 0301 	bfi	r3, r5, #0, #2
 8002bd6:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M, &reg.byte, 1);
 8002bda:	aa01      	add	r2, sp, #4
 8002bdc:	2301      	movs	r3, #1
 8002bde:	2160      	movs	r1, #96	; 0x60
 8002be0:	4620      	mov	r0, r4
 8002be2:	f7ff ff62 	bl	8002aaa <lsm303agr_write_reg>

  return mm_error;
}
 8002be6:	b003      	add	sp, #12
 8002be8:	bd30      	pop	{r4, r5, pc}

08002bea <lsm303agr_mag_data_rate_set>:
  * @param  lsm303agr_mg_odr_m_t: change the values of odr in reg CFG_REG_A_M
  *
  */
int32_t lsm303agr_mag_data_rate_set(lsm303agr_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8002bea:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M, &reg.byte, 1);
 8002bec:	2301      	movs	r3, #1
{
 8002bee:	460d      	mov	r5, r1
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M, &reg.byte, 1);
 8002bf0:	aa01      	add	r2, sp, #4
 8002bf2:	2160      	movs	r1, #96	; 0x60
{
 8002bf4:	4604      	mov	r4, r0
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M, &reg.byte, 1);
 8002bf6:	f7ff ff51 	bl	8002a9c <lsm303agr_read_reg>
  reg.cfg_reg_a_m.odr = val;
 8002bfa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002bfe:	f365 0383 	bfi	r3, r5, #2, #2
 8002c02:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M, &reg.byte, 1);
 8002c06:	aa01      	add	r2, sp, #4
 8002c08:	2301      	movs	r3, #1
 8002c0a:	2160      	movs	r1, #96	; 0x60
 8002c0c:	4620      	mov	r0, r4
 8002c0e:	f7ff ff4c 	bl	8002aaa <lsm303agr_write_reg>

  return mm_error;
}
 8002c12:	b003      	add	sp, #12
 8002c14:	bd30      	pop	{r4, r5, pc}

08002c16 <lsm303agr_mag_data_rate_get>:
  * @param  lsm303agr_mg_odr_m_tv: Get the values of odr in reg CFG_REG_A_M
  *
  */
int32_t lsm303agr_mag_data_rate_get(lsm303agr_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 8002c16:	b513      	push	{r0, r1, r4, lr}
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M, &reg.byte, 1);
 8002c18:	2301      	movs	r3, #1
{
 8002c1a:	460c      	mov	r4, r1
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M, &reg.byte, 1);
 8002c1c:	aa01      	add	r2, sp, #4
 8002c1e:	2160      	movs	r1, #96	; 0x60
 8002c20:	f7ff ff3c 	bl	8002a9c <lsm303agr_read_reg>
  *val = (lsm303agr_mg_odr_m_t) reg.cfg_reg_a_m.odr;
 8002c24:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002c28:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002c2c:	7023      	strb	r3, [r4, #0]

  return mm_error;
}
 8002c2e:	b002      	add	sp, #8
 8002c30:	bd10      	pop	{r4, pc}

08002c32 <lsm303agr_mag_block_data_update_set>:
  * @param  uint8_t val: change the values of bdu in reg CFG_REG_C_M
  *
  */
int32_t lsm303agr_mag_block_data_update_set(lsm303agr_ctx_t *ctx,
                                            uint8_t val)
{
 8002c32:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 8002c34:	2301      	movs	r3, #1
{
 8002c36:	460d      	mov	r5, r1
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 8002c38:	aa01      	add	r2, sp, #4
 8002c3a:	2162      	movs	r1, #98	; 0x62
{
 8002c3c:	4604      	mov	r4, r0
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 8002c3e:	f7ff ff2d 	bl	8002a9c <lsm303agr_read_reg>
  reg.cfg_reg_c_m.bdu = val;
 8002c42:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002c46:	f365 1304 	bfi	r3, r5, #4, #1
 8002c4a:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 8002c4e:	aa01      	add	r2, sp, #4
 8002c50:	2301      	movs	r3, #1
 8002c52:	2162      	movs	r1, #98	; 0x62
 8002c54:	4620      	mov	r0, r4
 8002c56:	f7ff ff28 	bl	8002aaa <lsm303agr_write_reg>

  return mm_error;
}
 8002c5a:	b003      	add	sp, #12
 8002c5c:	bd30      	pop	{r4, r5, pc}

08002c5e <lsm303agr_magnetic_raw_get>:
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t lsm303agr_magnetic_raw_get(lsm303agr_ctx_t *ctx, uint8_t *buff)
{
  return lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 8002c5e:	460a      	mov	r2, r1
 8002c60:	2306      	movs	r3, #6
 8002c62:	2168      	movs	r1, #104	; 0x68
 8002c64:	f7ff bf1a 	b.w	8002a9c <lsm303agr_read_reg>

08002c68 <lsm303agr_xl_device_id_get>:
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t lsm303agr_xl_device_id_get(lsm303agr_ctx_t *ctx, uint8_t *buff)
{
  return lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 8002c68:	460a      	mov	r2, r1
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	210f      	movs	r1, #15
 8002c6e:	f7ff bf15 	b.w	8002a9c <lsm303agr_read_reg>

08002c72 <lsm303agr_mag_device_id_get>:
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t lsm303agr_mag_device_id_get(lsm303agr_ctx_t *ctx, uint8_t *buff)
{
  return lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 8002c72:	460a      	mov	r2, r1
 8002c74:	2301      	movs	r3, #1
 8002c76:	214f      	movs	r1, #79	; 0x4f
 8002c78:	f7ff bf10 	b.w	8002a9c <lsm303agr_read_reg>

08002c7c <lsm303agr_mag_self_test_set>:
  * @param  lsm303agr_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t val: change the values of self_test in reg CFG_REG_C_M
  *
  */
int32_t lsm303agr_mag_self_test_set(lsm303agr_ctx_t *ctx, uint8_t val)
{
 8002c7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 8002c7e:	2301      	movs	r3, #1
{
 8002c80:	460d      	mov	r5, r1
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 8002c82:	aa01      	add	r2, sp, #4
 8002c84:	2162      	movs	r1, #98	; 0x62
{
 8002c86:	4604      	mov	r4, r0
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 8002c88:	f7ff ff08 	bl	8002a9c <lsm303agr_read_reg>
  reg.cfg_reg_c_m.self_test = val;
 8002c8c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002c90:	f365 0341 	bfi	r3, r5, #1, #1
 8002c94:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 8002c98:	aa01      	add	r2, sp, #4
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	2162      	movs	r1, #98	; 0x62
 8002c9e:	4620      	mov	r0, r4
 8002ca0:	f7ff ff03 	bl	8002aaa <lsm303agr_write_reg>

  return mm_error;
}
 8002ca4:	b003      	add	sp, #12
 8002ca6:	bd30      	pop	{r4, r5, pc}

08002ca8 <lsm303agr_xl_fifo_mode_set>:
  * @param  lsm303agr_fm_a_t: change the values of fm in reg FIFO_CTRL_REG_A
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(lsm303agr_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 8002ca8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8002caa:	2301      	movs	r3, #1
{
 8002cac:	460d      	mov	r5, r1
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8002cae:	aa01      	add	r2, sp, #4
 8002cb0:	212e      	movs	r1, #46	; 0x2e
{
 8002cb2:	4604      	mov	r4, r0
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8002cb4:	f7ff fef2 	bl	8002a9c <lsm303agr_read_reg>
                                &reg.byte, 1);
  reg.fifo_ctrl_reg_a.fm = val;
 8002cb8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002cbc:	f365 1387 	bfi	r3, r5, #6, #2
 8002cc0:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8002cc4:	aa01      	add	r2, sp, #4
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	212e      	movs	r1, #46	; 0x2e
 8002cca:	4620      	mov	r0, r4
 8002ccc:	f7ff feed 	bl	8002aaa <lsm303agr_write_reg>
                                 &reg.byte, 1);

  return mm_error;
}
 8002cd0:	b003      	add	sp, #12
 8002cd2:	bd30      	pop	{r4, r5, pc}

08002cd4 <lsm303agr_mag_i2c_interface_set>:
  *                                reg CFG_REG_C_M
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(lsm303agr_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 8002cd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 8002cd6:	2301      	movs	r3, #1
{
 8002cd8:	460d      	mov	r5, r1
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 8002cda:	aa01      	add	r2, sp, #4
 8002cdc:	2162      	movs	r1, #98	; 0x62
{
 8002cde:	4604      	mov	r4, r0
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 8002ce0:	f7ff fedc 	bl	8002a9c <lsm303agr_read_reg>
  reg.cfg_reg_c_m.i2c_dis = val;
 8002ce4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002ce8:	f365 1345 	bfi	r3, r5, #5, #1
 8002cec:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 8002cf0:	aa01      	add	r2, sp, #4
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	2162      	movs	r1, #98	; 0x62
 8002cf6:	4620      	mov	r0, r4
 8002cf8:	f7ff fed7 	bl	8002aaa <lsm303agr_write_reg>

  return mm_error;
}
 8002cfc:	b003      	add	sp, #12
 8002cfe:	bd30      	pop	{r4, r5, pc}

08002d00 <LSM6DSL_GetCapabilities>:
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8002d00:	2301      	movs	r3, #1
 8002d02:	700b      	strb	r3, [r1, #0]
  Capabilities->Gyro         = 1;
 8002d04:	704b      	strb	r3, [r1, #1]
  Capabilities->Magneto      = 0;
  Capabilities->LowPower     = 0;
  Capabilities->GyroMaxFS    = 2000;
 8002d06:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002d0a:	604b      	str	r3, [r1, #4]
  Capabilities->AccMaxFS     = 16;
 8002d0c:	2310      	movs	r3, #16
 8002d0e:	608b      	str	r3, [r1, #8]
  Capabilities->MagMaxFS     = 0;
  Capabilities->GyroMaxOdr   = 6660.0f;
 8002d10:	4b04      	ldr	r3, [pc, #16]	; (8002d24 <LSM6DSL_GetCapabilities+0x24>)
 8002d12:	610b      	str	r3, [r1, #16]
  Capabilities->Magneto      = 0;
 8002d14:	2000      	movs	r0, #0
  Capabilities->AccMaxOdr    = 6660.0f;
 8002d16:	614b      	str	r3, [r1, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8002d18:	2300      	movs	r3, #0
  Capabilities->Magneto      = 0;
 8002d1a:	7088      	strb	r0, [r1, #2]
  Capabilities->LowPower     = 0;
 8002d1c:	70c8      	strb	r0, [r1, #3]
  Capabilities->MagMaxFS     = 0;
 8002d1e:	60c8      	str	r0, [r1, #12]
  Capabilities->MagMaxOdr    = 0.0f;
 8002d20:	618b      	str	r3, [r1, #24]
  return LSM6DSL_OK;
}
 8002d22:	4770      	bx	lr
 8002d24:	45d02000 	.word	0x45d02000

08002d28 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002d28:	b410      	push	{r4}
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002d2a:	6944      	ldr	r4, [r0, #20]
 8002d2c:	7b00      	ldrb	r0, [r0, #12]
 8002d2e:	46a4      	mov	ip, r4
}
 8002d30:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002d34:	4760      	bx	ip

08002d36 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002d36:	b410      	push	{r4}
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002d38:	6904      	ldr	r4, [r0, #16]
 8002d3a:	7b00      	ldrb	r0, [r0, #12]
 8002d3c:	46a4      	mov	ip, r4
}
 8002d3e:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002d42:	4760      	bx	ip

08002d44 <LSM6DSL_ACC_SetFullScale>:
           : (FullScale <= 4) ? LSM6DSL_4g
 8002d44:	2902      	cmp	r1, #2
{
 8002d46:	b508      	push	{r3, lr}
           : (FullScale <= 4) ? LSM6DSL_4g
 8002d48:	dd0d      	ble.n	8002d66 <LSM6DSL_ACC_SetFullScale+0x22>
 8002d4a:	2904      	cmp	r1, #4
 8002d4c:	dd0d      	ble.n	8002d6a <LSM6DSL_ACC_SetFullScale+0x26>
 8002d4e:	2909      	cmp	r1, #9
 8002d50:	bfb4      	ite	lt
 8002d52:	2103      	movlt	r1, #3
 8002d54:	2101      	movge	r1, #1
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8002d56:	301c      	adds	r0, #28
 8002d58:	f000 fc5e 	bl	8003618 <lsm6dsl_xl_full_scale_set>
 8002d5c:	3000      	adds	r0, #0
 8002d5e:	bf18      	it	ne
 8002d60:	2001      	movne	r0, #1
}
 8002d62:	4240      	negs	r0, r0
 8002d64:	bd08      	pop	{r3, pc}
           : (FullScale <= 4) ? LSM6DSL_4g
 8002d66:	2100      	movs	r1, #0
 8002d68:	e7f5      	b.n	8002d56 <LSM6DSL_ACC_SetFullScale+0x12>
 8002d6a:	2102      	movs	r1, #2
 8002d6c:	e7f3      	b.n	8002d56 <LSM6DSL_ACC_SetFullScale+0x12>

08002d6e <LSM6DSL_Init>:
{
 8002d6e:	b570      	push	{r4, r5, r6, lr}
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8002d70:	f100 041c 	add.w	r4, r0, #28
{
 8002d74:	4605      	mov	r5, r0
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8002d76:	2101      	movs	r1, #1
 8002d78:	4620      	mov	r0, r4
 8002d7a:	f000 fd6b 	bl	8003854 <lsm6dsl_auto_increment_set>
 8002d7e:	b110      	cbz	r0, 8002d86 <LSM6DSL_Init+0x18>
    return LSM6DSL_ERROR;
 8002d80:	f04f 30ff 	mov.w	r0, #4294967295
 8002d84:	bd70      	pop	{r4, r5, r6, pc}
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8002d86:	2101      	movs	r1, #1
 8002d88:	4620      	mov	r0, r4
 8002d8a:	f000 fd3d 	bl	8003808 <lsm6dsl_block_data_update_set>
 8002d8e:	4601      	mov	r1, r0
 8002d90:	2800      	cmp	r0, #0
 8002d92:	d1f5      	bne.n	8002d80 <LSM6DSL_Init+0x12>
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8002d94:	4620      	mov	r0, r4
 8002d96:	f000 fd74 	bl	8003882 <lsm6dsl_fifo_mode_set>
 8002d9a:	4601      	mov	r1, r0
 8002d9c:	2800      	cmp	r0, #0
 8002d9e:	d1ef      	bne.n	8002d80 <LSM6DSL_Init+0x12>
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8002da0:	2604      	movs	r6, #4
 8002da2:	f885 602b 	strb.w	r6, [r5, #43]	; 0x2b
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8002da6:	4620      	mov	r0, r4
 8002da8:	f000 fc6a 	bl	8003680 <lsm6dsl_xl_data_rate_set>
 8002dac:	4601      	mov	r1, r0
 8002dae:	2800      	cmp	r0, #0
 8002db0:	d1e6      	bne.n	8002d80 <LSM6DSL_Init+0x12>
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8002db2:	4620      	mov	r0, r4
 8002db4:	f000 fc30 	bl	8003618 <lsm6dsl_xl_full_scale_set>
 8002db8:	4601      	mov	r1, r0
 8002dba:	2800      	cmp	r0, #0
 8002dbc:	d1e0      	bne.n	8002d80 <LSM6DSL_Init+0x12>
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8002dbe:	f885 602c 	strb.w	r6, [r5, #44]	; 0x2c
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8002dc2:	4620      	mov	r0, r4
 8002dc4:	f000 fcdb 	bl	800377e <lsm6dsl_gy_data_rate_set>
 8002dc8:	2800      	cmp	r0, #0
 8002dca:	d1d9      	bne.n	8002d80 <LSM6DSL_Init+0x12>
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8002dcc:	2106      	movs	r1, #6
 8002dce:	4620      	mov	r0, r4
 8002dd0:	f000 fc9d 	bl	800370e <lsm6dsl_gy_full_scale_set>
 8002dd4:	2800      	cmp	r0, #0
 8002dd6:	d1d3      	bne.n	8002d80 <LSM6DSL_Init+0x12>
  pObj->is_initialized = 1;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
}
 8002dde:	bd70      	pop	{r4, r5, r6, pc}

08002de0 <LSM6DSL_GYRO_SetFullScale>:
           : (FullScale <= 250)  ? LSM6DSL_250dps
 8002de0:	297d      	cmp	r1, #125	; 0x7d
{
 8002de2:	b508      	push	{r3, lr}
           : (FullScale <= 250)  ? LSM6DSL_250dps
 8002de4:	dd11      	ble.n	8002e0a <LSM6DSL_GYRO_SetFullScale+0x2a>
 8002de6:	29fa      	cmp	r1, #250	; 0xfa
 8002de8:	dd11      	ble.n	8002e0e <LSM6DSL_GYRO_SetFullScale+0x2e>
 8002dea:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
 8002dee:	dd10      	ble.n	8002e12 <LSM6DSL_GYRO_SetFullScale+0x32>
 8002df0:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8002df4:	bfd4      	ite	le
 8002df6:	2104      	movle	r1, #4
 8002df8:	2106      	movgt	r1, #6
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8002dfa:	301c      	adds	r0, #28
 8002dfc:	f000 fc87 	bl	800370e <lsm6dsl_gy_full_scale_set>
 8002e00:	3000      	adds	r0, #0
 8002e02:	bf18      	it	ne
 8002e04:	2001      	movne	r0, #1
}
 8002e06:	4240      	negs	r0, r0
 8002e08:	bd08      	pop	{r3, pc}
           : (FullScale <= 250)  ? LSM6DSL_250dps
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	e7f5      	b.n	8002dfa <LSM6DSL_GYRO_SetFullScale+0x1a>
 8002e0e:	2100      	movs	r1, #0
 8002e10:	e7f3      	b.n	8002dfa <LSM6DSL_GYRO_SetFullScale+0x1a>
 8002e12:	2102      	movs	r1, #2
 8002e14:	e7f1      	b.n	8002dfa <LSM6DSL_GYRO_SetFullScale+0x1a>

08002e16 <LSM6DSL_ReadID>:
{
 8002e16:	b508      	push	{r3, lr}
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8002e18:	301c      	adds	r0, #28
 8002e1a:	f000 fd16 	bl	800384a <lsm6dsl_device_id_get>
 8002e1e:	3000      	adds	r0, #0
 8002e20:	bf18      	it	ne
 8002e22:	2001      	movne	r0, #1
}
 8002e24:	4240      	negs	r0, r0
 8002e26:	bd08      	pop	{r3, pc}

08002e28 <LSM6DSL_ACC_GetOutputDataRate>:
{
 8002e28:	b513      	push	{r0, r1, r4, lr}
 8002e2a:	460c      	mov	r4, r1
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8002e2c:	301c      	adds	r0, #28
 8002e2e:	f10d 0107 	add.w	r1, sp, #7
 8002e32:	f000 fc3c 	bl	80036ae <lsm6dsl_xl_data_rate_get>
 8002e36:	bb28      	cbnz	r0, 8002e84 <LSM6DSL_ACC_GetOutputDataRate+0x5c>
  switch (odr_low_level)
 8002e38:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002e3c:	2b0b      	cmp	r3, #11
 8002e3e:	d821      	bhi.n	8002e84 <LSM6DSL_ACC_GetOutputDataRate+0x5c>
 8002e40:	e8df f003 	tbb	[pc, r3]
 8002e44:	100e0c06 	.word	0x100e0c06
 8002e48:	18161412 	.word	0x18161412
 8002e4c:	0a1e1c1a 	.word	0x0a1e1c1a
      *Odr = 0.0f;
 8002e50:	2300      	movs	r3, #0
      *Odr = 6660.0f;
 8002e52:	6023      	str	r3, [r4, #0]
}
 8002e54:	b002      	add	sp, #8
 8002e56:	bd10      	pop	{r4, pc}
      *Odr = 1.6f;
 8002e58:	4b0c      	ldr	r3, [pc, #48]	; (8002e8c <LSM6DSL_ACC_GetOutputDataRate+0x64>)
 8002e5a:	e7fa      	b.n	8002e52 <LSM6DSL_ACC_GetOutputDataRate+0x2a>
      *Odr = 12.5f;
 8002e5c:	4b0c      	ldr	r3, [pc, #48]	; (8002e90 <LSM6DSL_ACC_GetOutputDataRate+0x68>)
 8002e5e:	e7f8      	b.n	8002e52 <LSM6DSL_ACC_GetOutputDataRate+0x2a>
      *Odr = 26.0f;
 8002e60:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <LSM6DSL_ACC_GetOutputDataRate+0x6c>)
 8002e62:	e7f6      	b.n	8002e52 <LSM6DSL_ACC_GetOutputDataRate+0x2a>
      *Odr = 52.0f;
 8002e64:	4b0c      	ldr	r3, [pc, #48]	; (8002e98 <LSM6DSL_ACC_GetOutputDataRate+0x70>)
 8002e66:	e7f4      	b.n	8002e52 <LSM6DSL_ACC_GetOutputDataRate+0x2a>
      *Odr = 104.0f;
 8002e68:	4b0c      	ldr	r3, [pc, #48]	; (8002e9c <LSM6DSL_ACC_GetOutputDataRate+0x74>)
 8002e6a:	e7f2      	b.n	8002e52 <LSM6DSL_ACC_GetOutputDataRate+0x2a>
      *Odr = 208.0f;
 8002e6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ea0 <LSM6DSL_ACC_GetOutputDataRate+0x78>)
 8002e6e:	e7f0      	b.n	8002e52 <LSM6DSL_ACC_GetOutputDataRate+0x2a>
      *Odr = 416.0f;
 8002e70:	4b0c      	ldr	r3, [pc, #48]	; (8002ea4 <LSM6DSL_ACC_GetOutputDataRate+0x7c>)
 8002e72:	e7ee      	b.n	8002e52 <LSM6DSL_ACC_GetOutputDataRate+0x2a>
      *Odr = 833.0f;
 8002e74:	4b0c      	ldr	r3, [pc, #48]	; (8002ea8 <LSM6DSL_ACC_GetOutputDataRate+0x80>)
 8002e76:	e7ec      	b.n	8002e52 <LSM6DSL_ACC_GetOutputDataRate+0x2a>
      *Odr = 1660.0f;
 8002e78:	4b0c      	ldr	r3, [pc, #48]	; (8002eac <LSM6DSL_ACC_GetOutputDataRate+0x84>)
 8002e7a:	e7ea      	b.n	8002e52 <LSM6DSL_ACC_GetOutputDataRate+0x2a>
      *Odr = 3330.0f;
 8002e7c:	4b0c      	ldr	r3, [pc, #48]	; (8002eb0 <LSM6DSL_ACC_GetOutputDataRate+0x88>)
 8002e7e:	e7e8      	b.n	8002e52 <LSM6DSL_ACC_GetOutputDataRate+0x2a>
      *Odr = 6660.0f;
 8002e80:	4b0c      	ldr	r3, [pc, #48]	; (8002eb4 <LSM6DSL_ACC_GetOutputDataRate+0x8c>)
 8002e82:	e7e6      	b.n	8002e52 <LSM6DSL_ACC_GetOutputDataRate+0x2a>
      ret = LSM6DSL_ERROR;
 8002e84:	f04f 30ff 	mov.w	r0, #4294967295
 8002e88:	e7e4      	b.n	8002e54 <LSM6DSL_ACC_GetOutputDataRate+0x2c>
 8002e8a:	bf00      	nop
 8002e8c:	3fcccccd 	.word	0x3fcccccd
 8002e90:	41480000 	.word	0x41480000
 8002e94:	41d00000 	.word	0x41d00000
 8002e98:	42500000 	.word	0x42500000
 8002e9c:	42d00000 	.word	0x42d00000
 8002ea0:	43500000 	.word	0x43500000
 8002ea4:	43d00000 	.word	0x43d00000
 8002ea8:	44504000 	.word	0x44504000
 8002eac:	44cf8000 	.word	0x44cf8000
 8002eb0:	45502000 	.word	0x45502000
 8002eb4:	45d02000 	.word	0x45d02000

08002eb8 <LSM6DSL_ACC_GetSensitivity>:
{
 8002eb8:	b513      	push	{r0, r1, r4, lr}
 8002eba:	460c      	mov	r4, r1
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8002ebc:	301c      	adds	r0, #28
 8002ebe:	f10d 0107 	add.w	r1, sp, #7
 8002ec2:	f000 fbc0 	bl	8003646 <lsm6dsl_xl_full_scale_get>
 8002ec6:	b988      	cbnz	r0, 8002eec <LSM6DSL_ACC_GetSensitivity+0x34>
  switch (full_scale)
 8002ec8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002ecc:	2b03      	cmp	r3, #3
 8002ece:	d80d      	bhi.n	8002eec <LSM6DSL_ACC_GetSensitivity+0x34>
 8002ed0:	e8df f003 	tbb	[pc, r3]
 8002ed4:	08060a02 	.word	0x08060a02
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8002ed8:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <LSM6DSL_ACC_GetSensitivity+0x3c>)
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8002eda:	6023      	str	r3, [r4, #0]
}
 8002edc:	b002      	add	sp, #8
 8002ede:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8002ee0:	4b05      	ldr	r3, [pc, #20]	; (8002ef8 <LSM6DSL_ACC_GetSensitivity+0x40>)
 8002ee2:	e7fa      	b.n	8002eda <LSM6DSL_ACC_GetSensitivity+0x22>
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8002ee4:	4b05      	ldr	r3, [pc, #20]	; (8002efc <LSM6DSL_ACC_GetSensitivity+0x44>)
 8002ee6:	e7f8      	b.n	8002eda <LSM6DSL_ACC_GetSensitivity+0x22>
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8002ee8:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <LSM6DSL_ACC_GetSensitivity+0x48>)
 8002eea:	e7f6      	b.n	8002eda <LSM6DSL_ACC_GetSensitivity+0x22>
      ret = LSM6DSL_ERROR;
 8002eec:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef0:	e7f4      	b.n	8002edc <LSM6DSL_ACC_GetSensitivity+0x24>
 8002ef2:	bf00      	nop
 8002ef4:	3d79db23 	.word	0x3d79db23
 8002ef8:	3df9db23 	.word	0x3df9db23
 8002efc:	3e79db23 	.word	0x3e79db23
 8002f00:	3ef9db23 	.word	0x3ef9db23

08002f04 <LSM6DSL_ACC_GetFullScale>:
{
 8002f04:	b513      	push	{r0, r1, r4, lr}
 8002f06:	460c      	mov	r4, r1
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8002f08:	301c      	adds	r0, #28
 8002f0a:	f10d 0107 	add.w	r1, sp, #7
 8002f0e:	f000 fb9a 	bl	8003646 <lsm6dsl_xl_full_scale_get>
 8002f12:	b988      	cbnz	r0, 8002f38 <LSM6DSL_ACC_GetFullScale+0x34>
  switch (fs_low_level)
 8002f14:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002f18:	2b03      	cmp	r3, #3
 8002f1a:	d80d      	bhi.n	8002f38 <LSM6DSL_ACC_GetFullScale+0x34>
 8002f1c:	e8df f003 	tbb	[pc, r3]
 8002f20:	08060a02 	.word	0x08060a02
      *FullScale =  2;
 8002f24:	2302      	movs	r3, #2
      *FullScale = 16;
 8002f26:	6023      	str	r3, [r4, #0]
}
 8002f28:	b002      	add	sp, #8
 8002f2a:	bd10      	pop	{r4, pc}
      *FullScale =  4;
 8002f2c:	2304      	movs	r3, #4
 8002f2e:	e7fa      	b.n	8002f26 <LSM6DSL_ACC_GetFullScale+0x22>
      *FullScale =  8;
 8002f30:	2308      	movs	r3, #8
 8002f32:	e7f8      	b.n	8002f26 <LSM6DSL_ACC_GetFullScale+0x22>
      *FullScale = 16;
 8002f34:	2310      	movs	r3, #16
 8002f36:	e7f6      	b.n	8002f26 <LSM6DSL_ACC_GetFullScale+0x22>
      ret = LSM6DSL_ERROR;
 8002f38:	f04f 30ff 	mov.w	r0, #4294967295
 8002f3c:	e7f4      	b.n	8002f28 <LSM6DSL_ACC_GetFullScale+0x24>

08002f3e <LSM6DSL_ACC_GetAxesRaw>:
{
 8002f3e:	b513      	push	{r0, r1, r4, lr}
 8002f40:	460c      	mov	r4, r1
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8002f42:	301c      	adds	r0, #28
 8002f44:	4669      	mov	r1, sp
 8002f46:	f000 fc7b 	bl	8003840 <lsm6dsl_acceleration_raw_get>
 8002f4a:	b950      	cbnz	r0, 8002f62 <LSM6DSL_ACC_GetAxesRaw+0x24>
  Value->x = data_raw.i16bit[0];
 8002f4c:	f8bd 3000 	ldrh.w	r3, [sp]
 8002f50:	8023      	strh	r3, [r4, #0]
  Value->y = data_raw.i16bit[1];
 8002f52:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8002f56:	8063      	strh	r3, [r4, #2]
  Value->z = data_raw.i16bit[2];
 8002f58:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8002f5c:	80a3      	strh	r3, [r4, #4]
}
 8002f5e:	b002      	add	sp, #8
 8002f60:	bd10      	pop	{r4, pc}
    return LSM6DSL_ERROR;
 8002f62:	f04f 30ff 	mov.w	r0, #4294967295
 8002f66:	e7fa      	b.n	8002f5e <LSM6DSL_ACC_GetAxesRaw+0x20>

08002f68 <LSM6DSL_ACC_GetAxes>:
{
 8002f68:	b530      	push	{r4, r5, lr}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	4605      	mov	r5, r0
 8002f6e:	460c      	mov	r4, r1
  float sensitivity = 0.0f;
 8002f70:	2300      	movs	r3, #0
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8002f72:	a902      	add	r1, sp, #8
 8002f74:	301c      	adds	r0, #28
  float sensitivity = 0.0f;
 8002f76:	9301      	str	r3, [sp, #4]
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8002f78:	f000 fc62 	bl	8003840 <lsm6dsl_acceleration_raw_get>
 8002f7c:	b118      	cbz	r0, 8002f86 <LSM6DSL_ACC_GetAxes+0x1e>
    return LSM6DSL_ERROR;
 8002f7e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002f82:	b005      	add	sp, #20
 8002f84:	bd30      	pop	{r4, r5, pc}
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8002f86:	a901      	add	r1, sp, #4
 8002f88:	4628      	mov	r0, r5
 8002f8a:	f7ff ff95 	bl	8002eb8 <LSM6DSL_ACC_GetSensitivity>
 8002f8e:	2800      	cmp	r0, #0
 8002f90:	d1f5      	bne.n	8002f7e <LSM6DSL_ACC_GetAxes+0x16>
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002f92:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8002f96:	eddd 6a01 	vldr	s13, [sp, #4]
 8002f9a:	ee07 3a10 	vmov	s14, r3
 8002f9e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002fa2:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002fa6:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002faa:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8002fae:	ed84 7a00 	vstr	s14, [r4]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002fb2:	ee07 3a10 	vmov	s14, r3
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002fb6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8002fba:	ee07 3a90 	vmov	s15, r3
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002fbe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002fc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002fc6:	ee27 7a26 	vmul.f32	s14, s14, s13
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002fca:	ee67 7aa6 	vmul.f32	s15, s15, s13
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002fce:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002fd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002fd6:	ed84 7a01 	vstr	s14, [r4, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002fda:	edc4 7a02 	vstr	s15, [r4, #8]
  return LSM6DSL_OK;
 8002fde:	e7d0      	b.n	8002f82 <LSM6DSL_ACC_GetAxes+0x1a>

08002fe0 <LSM6DSL_GYRO_GetOutputDataRate>:
{
 8002fe0:	b513      	push	{r0, r1, r4, lr}
 8002fe2:	460c      	mov	r4, r1
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8002fe4:	301c      	adds	r0, #28
 8002fe6:	f10d 0107 	add.w	r1, sp, #7
 8002fea:	f000 fbdf 	bl	80037ac <lsm6dsl_gy_data_rate_get>
 8002fee:	bb18      	cbnz	r0, 8003038 <LSM6DSL_GYRO_GetOutputDataRate+0x58>
  switch (odr_low_level)
 8002ff0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002ff4:	2b0a      	cmp	r3, #10
 8002ff6:	d81f      	bhi.n	8003038 <LSM6DSL_GYRO_GetOutputDataRate+0x58>
 8002ff8:	e8df f003 	tbb	[pc, r3]
 8002ffc:	0e0c0a06 	.word	0x0e0c0a06
 8003000:	16141210 	.word	0x16141210
 8003004:	1a18      	.short	0x1a18
 8003006:	1c          	.byte	0x1c
 8003007:	00          	.byte	0x00
      *Odr = 0.0f;
 8003008:	2300      	movs	r3, #0
      *Odr =  6660.0f;
 800300a:	6023      	str	r3, [r4, #0]
}
 800300c:	b002      	add	sp, #8
 800300e:	bd10      	pop	{r4, pc}
      *Odr = 12.5f;
 8003010:	4b0b      	ldr	r3, [pc, #44]	; (8003040 <LSM6DSL_GYRO_GetOutputDataRate+0x60>)
 8003012:	e7fa      	b.n	800300a <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
      *Odr = 26.0f;
 8003014:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <LSM6DSL_GYRO_GetOutputDataRate+0x64>)
 8003016:	e7f8      	b.n	800300a <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
      *Odr = 52.0f;
 8003018:	4b0b      	ldr	r3, [pc, #44]	; (8003048 <LSM6DSL_GYRO_GetOutputDataRate+0x68>)
 800301a:	e7f6      	b.n	800300a <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
      *Odr = 104.0f;
 800301c:	4b0b      	ldr	r3, [pc, #44]	; (800304c <LSM6DSL_GYRO_GetOutputDataRate+0x6c>)
 800301e:	e7f4      	b.n	800300a <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
      *Odr = 208.0f;
 8003020:	4b0b      	ldr	r3, [pc, #44]	; (8003050 <LSM6DSL_GYRO_GetOutputDataRate+0x70>)
 8003022:	e7f2      	b.n	800300a <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
      *Odr = 416.0f;
 8003024:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <LSM6DSL_GYRO_GetOutputDataRate+0x74>)
 8003026:	e7f0      	b.n	800300a <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
      *Odr = 833.0f;
 8003028:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <LSM6DSL_GYRO_GetOutputDataRate+0x78>)
 800302a:	e7ee      	b.n	800300a <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
      *Odr =  1660.0f;
 800302c:	4b0b      	ldr	r3, [pc, #44]	; (800305c <LSM6DSL_GYRO_GetOutputDataRate+0x7c>)
 800302e:	e7ec      	b.n	800300a <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
      *Odr =  3330.0f;
 8003030:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <LSM6DSL_GYRO_GetOutputDataRate+0x80>)
 8003032:	e7ea      	b.n	800300a <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
      *Odr =  6660.0f;
 8003034:	4b0b      	ldr	r3, [pc, #44]	; (8003064 <LSM6DSL_GYRO_GetOutputDataRate+0x84>)
 8003036:	e7e8      	b.n	800300a <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
      ret = LSM6DSL_ERROR;
 8003038:	f04f 30ff 	mov.w	r0, #4294967295
 800303c:	e7e6      	b.n	800300c <LSM6DSL_GYRO_GetOutputDataRate+0x2c>
 800303e:	bf00      	nop
 8003040:	41480000 	.word	0x41480000
 8003044:	41d00000 	.word	0x41d00000
 8003048:	42500000 	.word	0x42500000
 800304c:	42d00000 	.word	0x42d00000
 8003050:	43500000 	.word	0x43500000
 8003054:	43d00000 	.word	0x43d00000
 8003058:	44504000 	.word	0x44504000
 800305c:	44cf8000 	.word	0x44cf8000
 8003060:	45502000 	.word	0x45502000
 8003064:	45d02000 	.word	0x45d02000

08003068 <LSM6DSL_GYRO_GetSensitivity>:
{
 8003068:	b513      	push	{r0, r1, r4, lr}
 800306a:	460c      	mov	r4, r1
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 800306c:	301c      	adds	r0, #28
 800306e:	f10d 0107 	add.w	r1, sp, #7
 8003072:	f000 fb63 	bl	800373c <lsm6dsl_gy_full_scale_get>
 8003076:	b9a8      	cbnz	r0, 80030a4 <LSM6DSL_GYRO_GetSensitivity+0x3c>
  switch (full_scale)
 8003078:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800307c:	2b06      	cmp	r3, #6
 800307e:	d811      	bhi.n	80030a4 <LSM6DSL_GYRO_GetSensitivity+0x3c>
 8003080:	e8df f003 	tbb	[pc, r3]
 8003084:	100a0408 	.word	0x100a0408
 8003088:	100c      	.short	0x100c
 800308a:	0e          	.byte	0x0e
 800308b:	00          	.byte	0x00
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 800308c:	4b07      	ldr	r3, [pc, #28]	; (80030ac <LSM6DSL_GYRO_GetSensitivity+0x44>)
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 800308e:	6023      	str	r3, [r4, #0]
}
 8003090:	b002      	add	sp, #8
 8003092:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 8003094:	4b06      	ldr	r3, [pc, #24]	; (80030b0 <LSM6DSL_GYRO_GetSensitivity+0x48>)
 8003096:	e7fa      	b.n	800308e <LSM6DSL_GYRO_GetSensitivity+0x26>
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 8003098:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <LSM6DSL_GYRO_GetSensitivity+0x4c>)
 800309a:	e7f8      	b.n	800308e <LSM6DSL_GYRO_GetSensitivity+0x26>
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 800309c:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <LSM6DSL_GYRO_GetSensitivity+0x50>)
 800309e:	e7f6      	b.n	800308e <LSM6DSL_GYRO_GetSensitivity+0x26>
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 80030a0:	4b06      	ldr	r3, [pc, #24]	; (80030bc <LSM6DSL_GYRO_GetSensitivity+0x54>)
 80030a2:	e7f4      	b.n	800308e <LSM6DSL_GYRO_GetSensitivity+0x26>
      ret = LSM6DSL_ERROR;
 80030a4:	f04f 30ff 	mov.w	r0, #4294967295
 80030a8:	e7f2      	b.n	8003090 <LSM6DSL_GYRO_GetSensitivity+0x28>
 80030aa:	bf00      	nop
 80030ac:	408c0000 	.word	0x408c0000
 80030b0:	410c0000 	.word	0x410c0000
 80030b4:	418c0000 	.word	0x418c0000
 80030b8:	420c0000 	.word	0x420c0000
 80030bc:	428c0000 	.word	0x428c0000

080030c0 <LSM6DSL_GYRO_GetFullScale>:
{
 80030c0:	b513      	push	{r0, r1, r4, lr}
 80030c2:	460c      	mov	r4, r1
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 80030c4:	301c      	adds	r0, #28
 80030c6:	f10d 0107 	add.w	r1, sp, #7
 80030ca:	f000 fb37 	bl	800373c <lsm6dsl_gy_full_scale_get>
 80030ce:	b9c0      	cbnz	r0, 8003102 <LSM6DSL_GYRO_GetFullScale+0x42>
  switch (fs_low_level)
 80030d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80030d4:	2b06      	cmp	r3, #6
 80030d6:	d814      	bhi.n	8003102 <LSM6DSL_GYRO_GetFullScale+0x42>
 80030d8:	e8df f003 	tbb	[pc, r3]
 80030dc:	130a0408 	.word	0x130a0408
 80030e0:	130d      	.short	0x130d
 80030e2:	10          	.byte	0x10
 80030e3:	00          	.byte	0x00
      *FullScale =  125;
 80030e4:	237d      	movs	r3, #125	; 0x7d
      *FullScale = 2000;
 80030e6:	6023      	str	r3, [r4, #0]
}
 80030e8:	b002      	add	sp, #8
 80030ea:	bd10      	pop	{r4, pc}
      *FullScale =  250;
 80030ec:	23fa      	movs	r3, #250	; 0xfa
 80030ee:	e7fa      	b.n	80030e6 <LSM6DSL_GYRO_GetFullScale+0x26>
      *FullScale =  500;
 80030f0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80030f4:	e7f7      	b.n	80030e6 <LSM6DSL_GYRO_GetFullScale+0x26>
      *FullScale = 1000;
 80030f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030fa:	e7f4      	b.n	80030e6 <LSM6DSL_GYRO_GetFullScale+0x26>
      *FullScale = 2000;
 80030fc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003100:	e7f1      	b.n	80030e6 <LSM6DSL_GYRO_GetFullScale+0x26>
      ret = LSM6DSL_ERROR;
 8003102:	f04f 30ff 	mov.w	r0, #4294967295
 8003106:	e7ef      	b.n	80030e8 <LSM6DSL_GYRO_GetFullScale+0x28>

08003108 <LSM6DSL_GYRO_GetAxesRaw>:
{
 8003108:	b513      	push	{r0, r1, r4, lr}
 800310a:	460c      	mov	r4, r1
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 800310c:	301c      	adds	r0, #28
 800310e:	4669      	mov	r1, sp
 8003110:	f000 fb91 	bl	8003836 <lsm6dsl_angular_rate_raw_get>
 8003114:	b950      	cbnz	r0, 800312c <LSM6DSL_GYRO_GetAxesRaw+0x24>
  Value->x = data_raw.i16bit[0];
 8003116:	f8bd 3000 	ldrh.w	r3, [sp]
 800311a:	8023      	strh	r3, [r4, #0]
  Value->y = data_raw.i16bit[1];
 800311c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8003120:	8063      	strh	r3, [r4, #2]
  Value->z = data_raw.i16bit[2];
 8003122:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8003126:	80a3      	strh	r3, [r4, #4]
}
 8003128:	b002      	add	sp, #8
 800312a:	bd10      	pop	{r4, pc}
    return LSM6DSL_ERROR;
 800312c:	f04f 30ff 	mov.w	r0, #4294967295
 8003130:	e7fa      	b.n	8003128 <LSM6DSL_GYRO_GetAxesRaw+0x20>

08003132 <LSM6DSL_GYRO_GetAxes>:
{
 8003132:	b530      	push	{r4, r5, lr}
 8003134:	b085      	sub	sp, #20
 8003136:	4605      	mov	r5, r0
 8003138:	460c      	mov	r4, r1
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 800313a:	301c      	adds	r0, #28
 800313c:	a902      	add	r1, sp, #8
 800313e:	f000 fb7a 	bl	8003836 <lsm6dsl_angular_rate_raw_get>
 8003142:	b118      	cbz	r0, 800314c <LSM6DSL_GYRO_GetAxes+0x1a>
    return LSM6DSL_ERROR;
 8003144:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003148:	b005      	add	sp, #20
 800314a:	bd30      	pop	{r4, r5, pc}
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 800314c:	a901      	add	r1, sp, #4
 800314e:	4628      	mov	r0, r5
 8003150:	f7ff ff8a 	bl	8003068 <LSM6DSL_GYRO_GetSensitivity>
 8003154:	2800      	cmp	r0, #0
 8003156:	d1f5      	bne.n	8003144 <LSM6DSL_GYRO_GetAxes+0x12>
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003158:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 800315c:	eddd 6a01 	vldr	s13, [sp, #4]
 8003160:	ee07 3a10 	vmov	s14, r3
 8003164:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003168:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800316c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003170:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8003174:	ed84 7a00 	vstr	s14, [r4]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003178:	ee07 3a10 	vmov	s14, r3
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800317c:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8003180:	ee07 3a90 	vmov	s15, r3
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003184:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003188:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800318c:	ee27 7a26 	vmul.f32	s14, s14, s13
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003190:	ee67 7aa6 	vmul.f32	s15, s15, s13
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003194:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003198:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800319c:	ed84 7a01 	vstr	s14, [r4, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80031a0:	edc4 7a02 	vstr	s15, [r4, #8]
  return LSM6DSL_OK;
 80031a4:	e7d0      	b.n	8003148 <LSM6DSL_GYRO_GetAxes+0x16>
	...

080031a8 <LSM6DSL_ACC_SetOutputDataRate>:
{
 80031a8:	b508      	push	{r3, lr}
  if (pObj->acc_is_enabled == 1U)
 80031aa:	f890 1029 	ldrb.w	r1, [r0, #41]	; 0x29
 80031ae:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 80031b2:	2901      	cmp	r1, #1
            : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 80031b4:	eeb4 0ae7 	vcmpe.f32	s0, s15
  if (pObj->acc_is_enabled == 1U)
 80031b8:	d152      	bne.n	8003260 <LSM6DSL_ACC_SetOutputDataRate+0xb8>
            : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 80031ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031be:	d939      	bls.n	8003234 <LSM6DSL_ACC_SetOutputDataRate+0x8c>
 80031c0:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 80031c4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80031c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031cc:	d93a      	bls.n	8003244 <LSM6DSL_ACC_SetOutputDataRate+0x9c>
 80031ce:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8003304 <LSM6DSL_ACC_SetOutputDataRate+0x15c>
 80031d2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80031d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031da:	d935      	bls.n	8003248 <LSM6DSL_ACC_SetOutputDataRate+0xa0>
 80031dc:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8003308 <LSM6DSL_ACC_SetOutputDataRate+0x160>
 80031e0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80031e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031e8:	d930      	bls.n	800324c <LSM6DSL_ACC_SetOutputDataRate+0xa4>
 80031ea:	eddf 7a48 	vldr	s15, [pc, #288]	; 800330c <LSM6DSL_ACC_SetOutputDataRate+0x164>
 80031ee:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80031f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f6:	d92b      	bls.n	8003250 <LSM6DSL_ACC_SetOutputDataRate+0xa8>
 80031f8:	eddf 7a45 	vldr	s15, [pc, #276]	; 8003310 <LSM6DSL_ACC_SetOutputDataRate+0x168>
 80031fc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003204:	d926      	bls.n	8003254 <LSM6DSL_ACC_SetOutputDataRate+0xac>
 8003206:	eddf 7a43 	vldr	s15, [pc, #268]	; 8003314 <LSM6DSL_ACC_SetOutputDataRate+0x16c>
 800320a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800320e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003212:	d921      	bls.n	8003258 <LSM6DSL_ACC_SetOutputDataRate+0xb0>
 8003214:	eddf 7a40 	vldr	s15, [pc, #256]	; 8003318 <LSM6DSL_ACC_SetOutputDataRate+0x170>
 8003218:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800321c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003220:	d91c      	bls.n	800325c <LSM6DSL_ACC_SetOutputDataRate+0xb4>
 8003222:	eddf 7a3e 	vldr	s15, [pc, #248]	; 800331c <LSM6DSL_ACC_SetOutputDataRate+0x174>
 8003226:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800322a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800322e:	bf94      	ite	ls
 8003230:	2109      	movls	r1, #9
 8003232:	210a      	movhi	r1, #10
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8003234:	301c      	adds	r0, #28
 8003236:	f000 fa23 	bl	8003680 <lsm6dsl_xl_data_rate_set>
 800323a:	3000      	adds	r0, #0
 800323c:	bf18      	it	ne
 800323e:	2001      	movne	r0, #1
 8003240:	4240      	negs	r0, r0
 8003242:	bd08      	pop	{r3, pc}
            : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8003244:	2102      	movs	r1, #2
 8003246:	e7f5      	b.n	8003234 <LSM6DSL_ACC_SetOutputDataRate+0x8c>
 8003248:	2103      	movs	r1, #3
 800324a:	e7f3      	b.n	8003234 <LSM6DSL_ACC_SetOutputDataRate+0x8c>
 800324c:	2104      	movs	r1, #4
 800324e:	e7f1      	b.n	8003234 <LSM6DSL_ACC_SetOutputDataRate+0x8c>
 8003250:	2105      	movs	r1, #5
 8003252:	e7ef      	b.n	8003234 <LSM6DSL_ACC_SetOutputDataRate+0x8c>
 8003254:	2106      	movs	r1, #6
 8003256:	e7ed      	b.n	8003234 <LSM6DSL_ACC_SetOutputDataRate+0x8c>
 8003258:	2107      	movs	r1, #7
 800325a:	e7eb      	b.n	8003234 <LSM6DSL_ACC_SetOutputDataRate+0x8c>
 800325c:	2108      	movs	r1, #8
 800325e:	e7e9      	b.n	8003234 <LSM6DSL_ACC_SetOutputDataRate+0x8c>
                  : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8003260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003264:	d93d      	bls.n	80032e2 <LSM6DSL_ACC_SetOutputDataRate+0x13a>
 8003266:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 800326a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800326e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003272:	d938      	bls.n	80032e6 <LSM6DSL_ACC_SetOutputDataRate+0x13e>
 8003274:	eddf 7a23 	vldr	s15, [pc, #140]	; 8003304 <LSM6DSL_ACC_SetOutputDataRate+0x15c>
 8003278:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800327c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003280:	d933      	bls.n	80032ea <LSM6DSL_ACC_SetOutputDataRate+0x142>
 8003282:	eddf 7a21 	vldr	s15, [pc, #132]	; 8003308 <LSM6DSL_ACC_SetOutputDataRate+0x160>
 8003286:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800328a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800328e:	d92e      	bls.n	80032ee <LSM6DSL_ACC_SetOutputDataRate+0x146>
 8003290:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800330c <LSM6DSL_ACC_SetOutputDataRate+0x164>
 8003294:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800329c:	d929      	bls.n	80032f2 <LSM6DSL_ACC_SetOutputDataRate+0x14a>
 800329e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8003310 <LSM6DSL_ACC_SetOutputDataRate+0x168>
 80032a2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80032a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032aa:	d924      	bls.n	80032f6 <LSM6DSL_ACC_SetOutputDataRate+0x14e>
 80032ac:	eddf 7a19 	vldr	s15, [pc, #100]	; 8003314 <LSM6DSL_ACC_SetOutputDataRate+0x16c>
 80032b0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80032b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032b8:	d91f      	bls.n	80032fa <LSM6DSL_ACC_SetOutputDataRate+0x152>
 80032ba:	eddf 7a17 	vldr	s15, [pc, #92]	; 8003318 <LSM6DSL_ACC_SetOutputDataRate+0x170>
 80032be:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80032c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c6:	d91a      	bls.n	80032fe <LSM6DSL_ACC_SetOutputDataRate+0x156>
 80032c8:	eddf 7a14 	vldr	s15, [pc, #80]	; 800331c <LSM6DSL_ACC_SetOutputDataRate+0x174>
 80032cc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80032d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032d4:	bf94      	ite	ls
 80032d6:	2309      	movls	r3, #9
 80032d8:	230a      	movhi	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 80032da:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80032de:	2000      	movs	r0, #0
}
 80032e0:	bd08      	pop	{r3, pc}
                  : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 80032e2:	2301      	movs	r3, #1
 80032e4:	e7f9      	b.n	80032da <LSM6DSL_ACC_SetOutputDataRate+0x132>
 80032e6:	2302      	movs	r3, #2
 80032e8:	e7f7      	b.n	80032da <LSM6DSL_ACC_SetOutputDataRate+0x132>
 80032ea:	2303      	movs	r3, #3
 80032ec:	e7f5      	b.n	80032da <LSM6DSL_ACC_SetOutputDataRate+0x132>
 80032ee:	2304      	movs	r3, #4
 80032f0:	e7f3      	b.n	80032da <LSM6DSL_ACC_SetOutputDataRate+0x132>
 80032f2:	2305      	movs	r3, #5
 80032f4:	e7f1      	b.n	80032da <LSM6DSL_ACC_SetOutputDataRate+0x132>
 80032f6:	2306      	movs	r3, #6
 80032f8:	e7ef      	b.n	80032da <LSM6DSL_ACC_SetOutputDataRate+0x132>
 80032fa:	2307      	movs	r3, #7
 80032fc:	e7ed      	b.n	80032da <LSM6DSL_ACC_SetOutputDataRate+0x132>
 80032fe:	2308      	movs	r3, #8
 8003300:	e7eb      	b.n	80032da <LSM6DSL_ACC_SetOutputDataRate+0x132>
 8003302:	bf00      	nop
 8003304:	42500000 	.word	0x42500000
 8003308:	42d00000 	.word	0x42d00000
 800330c:	43500000 	.word	0x43500000
 8003310:	43d00000 	.word	0x43d00000
 8003314:	44504000 	.word	0x44504000
 8003318:	44cf8000 	.word	0x44cf8000
 800331c:	45502000 	.word	0x45502000

08003320 <LSM6DSL_GYRO_SetOutputDataRate>:
{
 8003320:	b508      	push	{r3, lr}
  if (pObj->gyro_is_enabled == 1U)
 8003322:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
 8003326:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 800332a:	2901      	cmp	r1, #1
            : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 800332c:	eeb4 0ae7 	vcmpe.f32	s0, s15
  if (pObj->gyro_is_enabled == 1U)
 8003330:	d152      	bne.n	80033d8 <LSM6DSL_GYRO_SetOutputDataRate+0xb8>
            : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8003332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003336:	d939      	bls.n	80033ac <LSM6DSL_GYRO_SetOutputDataRate+0x8c>
 8003338:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 800333c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003344:	d93a      	bls.n	80033bc <LSM6DSL_GYRO_SetOutputDataRate+0x9c>
 8003346:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800347c <LSM6DSL_GYRO_SetOutputDataRate+0x15c>
 800334a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800334e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003352:	d935      	bls.n	80033c0 <LSM6DSL_GYRO_SetOutputDataRate+0xa0>
 8003354:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8003480 <LSM6DSL_GYRO_SetOutputDataRate+0x160>
 8003358:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800335c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003360:	d930      	bls.n	80033c4 <LSM6DSL_GYRO_SetOutputDataRate+0xa4>
 8003362:	eddf 7a48 	vldr	s15, [pc, #288]	; 8003484 <LSM6DSL_GYRO_SetOutputDataRate+0x164>
 8003366:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800336a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800336e:	d92b      	bls.n	80033c8 <LSM6DSL_GYRO_SetOutputDataRate+0xa8>
 8003370:	eddf 7a45 	vldr	s15, [pc, #276]	; 8003488 <LSM6DSL_GYRO_SetOutputDataRate+0x168>
 8003374:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800337c:	d926      	bls.n	80033cc <LSM6DSL_GYRO_SetOutputDataRate+0xac>
 800337e:	eddf 7a43 	vldr	s15, [pc, #268]	; 800348c <LSM6DSL_GYRO_SetOutputDataRate+0x16c>
 8003382:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800338a:	d921      	bls.n	80033d0 <LSM6DSL_GYRO_SetOutputDataRate+0xb0>
 800338c:	eddf 7a40 	vldr	s15, [pc, #256]	; 8003490 <LSM6DSL_GYRO_SetOutputDataRate+0x170>
 8003390:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003398:	d91c      	bls.n	80033d4 <LSM6DSL_GYRO_SetOutputDataRate+0xb4>
 800339a:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8003494 <LSM6DSL_GYRO_SetOutputDataRate+0x174>
 800339e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80033a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a6:	bf94      	ite	ls
 80033a8:	2109      	movls	r1, #9
 80033aa:	210a      	movhi	r1, #10
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 80033ac:	301c      	adds	r0, #28
 80033ae:	f000 f9e6 	bl	800377e <lsm6dsl_gy_data_rate_set>
 80033b2:	3000      	adds	r0, #0
 80033b4:	bf18      	it	ne
 80033b6:	2001      	movne	r0, #1
 80033b8:	4240      	negs	r0, r0
 80033ba:	bd08      	pop	{r3, pc}
            : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 80033bc:	2102      	movs	r1, #2
 80033be:	e7f5      	b.n	80033ac <LSM6DSL_GYRO_SetOutputDataRate+0x8c>
 80033c0:	2103      	movs	r1, #3
 80033c2:	e7f3      	b.n	80033ac <LSM6DSL_GYRO_SetOutputDataRate+0x8c>
 80033c4:	2104      	movs	r1, #4
 80033c6:	e7f1      	b.n	80033ac <LSM6DSL_GYRO_SetOutputDataRate+0x8c>
 80033c8:	2105      	movs	r1, #5
 80033ca:	e7ef      	b.n	80033ac <LSM6DSL_GYRO_SetOutputDataRate+0x8c>
 80033cc:	2106      	movs	r1, #6
 80033ce:	e7ed      	b.n	80033ac <LSM6DSL_GYRO_SetOutputDataRate+0x8c>
 80033d0:	2107      	movs	r1, #7
 80033d2:	e7eb      	b.n	80033ac <LSM6DSL_GYRO_SetOutputDataRate+0x8c>
 80033d4:	2108      	movs	r1, #8
 80033d6:	e7e9      	b.n	80033ac <LSM6DSL_GYRO_SetOutputDataRate+0x8c>
                   : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 80033d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033dc:	d93d      	bls.n	800345a <LSM6DSL_GYRO_SetOutputDataRate+0x13a>
 80033de:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 80033e2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80033e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ea:	d938      	bls.n	800345e <LSM6DSL_GYRO_SetOutputDataRate+0x13e>
 80033ec:	eddf 7a23 	vldr	s15, [pc, #140]	; 800347c <LSM6DSL_GYRO_SetOutputDataRate+0x15c>
 80033f0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80033f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033f8:	d933      	bls.n	8003462 <LSM6DSL_GYRO_SetOutputDataRate+0x142>
 80033fa:	eddf 7a21 	vldr	s15, [pc, #132]	; 8003480 <LSM6DSL_GYRO_SetOutputDataRate+0x160>
 80033fe:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003406:	d92e      	bls.n	8003466 <LSM6DSL_GYRO_SetOutputDataRate+0x146>
 8003408:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8003484 <LSM6DSL_GYRO_SetOutputDataRate+0x164>
 800340c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003414:	d929      	bls.n	800346a <LSM6DSL_GYRO_SetOutputDataRate+0x14a>
 8003416:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8003488 <LSM6DSL_GYRO_SetOutputDataRate+0x168>
 800341a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800341e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003422:	d924      	bls.n	800346e <LSM6DSL_GYRO_SetOutputDataRate+0x14e>
 8003424:	eddf 7a19 	vldr	s15, [pc, #100]	; 800348c <LSM6DSL_GYRO_SetOutputDataRate+0x16c>
 8003428:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800342c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003430:	d91f      	bls.n	8003472 <LSM6DSL_GYRO_SetOutputDataRate+0x152>
 8003432:	eddf 7a17 	vldr	s15, [pc, #92]	; 8003490 <LSM6DSL_GYRO_SetOutputDataRate+0x170>
 8003436:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800343a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800343e:	d91a      	bls.n	8003476 <LSM6DSL_GYRO_SetOutputDataRate+0x156>
 8003440:	eddf 7a14 	vldr	s15, [pc, #80]	; 8003494 <LSM6DSL_GYRO_SetOutputDataRate+0x174>
 8003444:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800344c:	bf94      	ite	ls
 800344e:	2309      	movls	r3, #9
 8003450:	230a      	movhi	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8003452:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003456:	2000      	movs	r0, #0
}
 8003458:	bd08      	pop	{r3, pc}
                   : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 800345a:	2301      	movs	r3, #1
 800345c:	e7f9      	b.n	8003452 <LSM6DSL_GYRO_SetOutputDataRate+0x132>
 800345e:	2302      	movs	r3, #2
 8003460:	e7f7      	b.n	8003452 <LSM6DSL_GYRO_SetOutputDataRate+0x132>
 8003462:	2303      	movs	r3, #3
 8003464:	e7f5      	b.n	8003452 <LSM6DSL_GYRO_SetOutputDataRate+0x132>
 8003466:	2304      	movs	r3, #4
 8003468:	e7f3      	b.n	8003452 <LSM6DSL_GYRO_SetOutputDataRate+0x132>
 800346a:	2305      	movs	r3, #5
 800346c:	e7f1      	b.n	8003452 <LSM6DSL_GYRO_SetOutputDataRate+0x132>
 800346e:	2306      	movs	r3, #6
 8003470:	e7ef      	b.n	8003452 <LSM6DSL_GYRO_SetOutputDataRate+0x132>
 8003472:	2307      	movs	r3, #7
 8003474:	e7ed      	b.n	8003452 <LSM6DSL_GYRO_SetOutputDataRate+0x132>
 8003476:	2308      	movs	r3, #8
 8003478:	e7eb      	b.n	8003452 <LSM6DSL_GYRO_SetOutputDataRate+0x132>
 800347a:	bf00      	nop
 800347c:	42500000 	.word	0x42500000
 8003480:	42d00000 	.word	0x42d00000
 8003484:	43500000 	.word	0x43500000
 8003488:	43d00000 	.word	0x43d00000
 800348c:	44504000 	.word	0x44504000
 8003490:	44cf8000 	.word	0x44cf8000
 8003494:	45502000 	.word	0x45502000

08003498 <LSM6DSL_ACC_Enable>:
{
 8003498:	b510      	push	{r4, lr}
  if (pObj->acc_is_enabled == 1U)
 800349a:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800349e:	2b01      	cmp	r3, #1
{
 80034a0:	4604      	mov	r4, r0
  if (pObj->acc_is_enabled == 1U)
 80034a2:	d009      	beq.n	80034b8 <LSM6DSL_ACC_Enable+0x20>
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 80034a4:	f890 102b 	ldrb.w	r1, [r0, #43]	; 0x2b
 80034a8:	301c      	adds	r0, #28
 80034aa:	f000 f8e9 	bl	8003680 <lsm6dsl_xl_data_rate_set>
 80034ae:	b928      	cbnz	r0, 80034bc <LSM6DSL_ACC_Enable+0x24>
  pObj->acc_is_enabled = 1;
 80034b0:	2301      	movs	r3, #1
 80034b2:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 80034b6:	bd10      	pop	{r4, pc}
    return LSM6DSL_OK;
 80034b8:	2000      	movs	r0, #0
 80034ba:	bd10      	pop	{r4, pc}
    return LSM6DSL_ERROR;
 80034bc:	f04f 30ff 	mov.w	r0, #4294967295
}
 80034c0:	bd10      	pop	{r4, pc}

080034c2 <LSM6DSL_GYRO_Enable>:
{
 80034c2:	b510      	push	{r4, lr}
  if (pObj->gyro_is_enabled == 1U)
 80034c4:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 80034c8:	2b01      	cmp	r3, #1
{
 80034ca:	4604      	mov	r4, r0
  if (pObj->gyro_is_enabled == 1U)
 80034cc:	d009      	beq.n	80034e2 <LSM6DSL_GYRO_Enable+0x20>
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 80034ce:	f890 102c 	ldrb.w	r1, [r0, #44]	; 0x2c
 80034d2:	301c      	adds	r0, #28
 80034d4:	f000 f953 	bl	800377e <lsm6dsl_gy_data_rate_set>
 80034d8:	b928      	cbnz	r0, 80034e6 <LSM6DSL_GYRO_Enable+0x24>
  pObj->gyro_is_enabled = 1;
 80034da:	2301      	movs	r3, #1
 80034dc:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
 80034e0:	bd10      	pop	{r4, pc}
    return LSM6DSL_OK;
 80034e2:	2000      	movs	r0, #0
 80034e4:	bd10      	pop	{r4, pc}
    return LSM6DSL_ERROR;
 80034e6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80034ea:	bd10      	pop	{r4, pc}

080034ec <LSM6DSL_ACC_Disable>:
{
 80034ec:	b538      	push	{r3, r4, r5, lr}
 80034ee:	4604      	mov	r4, r0
  if (pObj->acc_is_enabled == 0U)
 80034f0:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 80034f4:	b190      	cbz	r0, 800351c <LSM6DSL_ACC_Disable+0x30>
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 80034f6:	f104 051c 	add.w	r5, r4, #28
 80034fa:	f104 012b 	add.w	r1, r4, #43	; 0x2b
 80034fe:	4628      	mov	r0, r5
 8003500:	f000 f8d5 	bl	80036ae <lsm6dsl_xl_data_rate_get>
 8003504:	4601      	mov	r1, r0
 8003506:	b110      	cbz	r0, 800350e <LSM6DSL_ACC_Disable+0x22>
    return LSM6DSL_ERROR;
 8003508:	f04f 30ff 	mov.w	r0, #4294967295
 800350c:	bd38      	pop	{r3, r4, r5, pc}
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 800350e:	4628      	mov	r0, r5
 8003510:	f000 f8b6 	bl	8003680 <lsm6dsl_xl_data_rate_set>
 8003514:	2800      	cmp	r0, #0
 8003516:	d1f7      	bne.n	8003508 <LSM6DSL_ACC_Disable+0x1c>
  pObj->acc_is_enabled = 0;
 8003518:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
}
 800351c:	bd38      	pop	{r3, r4, r5, pc}

0800351e <LSM6DSL_GYRO_Disable>:
{
 800351e:	b538      	push	{r3, r4, r5, lr}
 8003520:	4604      	mov	r4, r0
  if (pObj->gyro_is_enabled == 0U)
 8003522:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
 8003526:	b190      	cbz	r0, 800354e <LSM6DSL_GYRO_Disable+0x30>
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 8003528:	f104 051c 	add.w	r5, r4, #28
 800352c:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8003530:	4628      	mov	r0, r5
 8003532:	f000 f93b 	bl	80037ac <lsm6dsl_gy_data_rate_get>
 8003536:	4601      	mov	r1, r0
 8003538:	b110      	cbz	r0, 8003540 <LSM6DSL_GYRO_Disable+0x22>
    return LSM6DSL_ERROR;
 800353a:	f04f 30ff 	mov.w	r0, #4294967295
 800353e:	bd38      	pop	{r3, r4, r5, pc}
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8003540:	4628      	mov	r0, r5
 8003542:	f000 f91c 	bl	800377e <lsm6dsl_gy_data_rate_set>
 8003546:	2800      	cmp	r0, #0
 8003548:	d1f7      	bne.n	800353a <LSM6DSL_GYRO_Disable+0x1c>
  pObj->gyro_is_enabled = 0;
 800354a:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
}
 800354e:	bd38      	pop	{r3, r4, r5, pc}

08003550 <LSM6DSL_DeInit>:
{
 8003550:	b510      	push	{r4, lr}
 8003552:	4604      	mov	r4, r0
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 8003554:	f7ff ffca 	bl	80034ec <LSM6DSL_ACC_Disable>
 8003558:	b110      	cbz	r0, 8003560 <LSM6DSL_DeInit+0x10>
    return LSM6DSL_ERROR;
 800355a:	f04f 30ff 	mov.w	r0, #4294967295
 800355e:	bd10      	pop	{r4, pc}
  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 8003560:	4620      	mov	r0, r4
 8003562:	f7ff ffdc 	bl	800351e <LSM6DSL_GYRO_Disable>
 8003566:	2800      	cmp	r0, #0
 8003568:	d1f7      	bne.n	800355a <LSM6DSL_DeInit+0xa>
  pObj->is_initialized = 0;
 800356a:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 800356e:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 8003572:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
}
 8003576:	bd10      	pop	{r4, pc}

08003578 <LSM6DSL_Write_Reg>:
{
 8003578:	b513      	push	{r0, r1, r4, lr}
 800357a:	ac02      	add	r4, sp, #8
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 800357c:	2301      	movs	r3, #1
{
 800357e:	f804 2d01 	strb.w	r2, [r4, #-1]!
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8003582:	301c      	adds	r0, #28
 8003584:	4622      	mov	r2, r4
 8003586:	f000 f840 	bl	800360a <lsm6dsl_write_reg>
 800358a:	3000      	adds	r0, #0
 800358c:	bf18      	it	ne
 800358e:	2001      	movne	r0, #1
}
 8003590:	4240      	negs	r0, r0
 8003592:	b002      	add	sp, #8
 8003594:	bd10      	pop	{r4, pc}
	...

08003598 <LSM6DSL_RegisterBusIO>:
{
 8003598:	b510      	push	{r4, lr}
  if (pObj == NULL)
 800359a:	4604      	mov	r4, r0
 800359c:	b910      	cbnz	r0, 80035a4 <LSM6DSL_RegisterBusIO+0xc>
    ret = LSM6DSL_ERROR;
 800359e:	f04f 30ff 	mov.w	r0, #4294967295
 80035a2:	bd10      	pop	{r4, pc}
    pObj->IO.DeInit    = pIO->DeInit;
 80035a4:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 80035a6:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80035a8:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 80035aa:	688a      	ldr	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 80035ac:	6003      	str	r3, [r0, #0]
    pObj->IO.BusType   = pIO->BusType;
 80035ae:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 80035b0:	7b0a      	ldrb	r2, [r1, #12]
 80035b2:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80035b4:	690a      	ldr	r2, [r1, #16]
 80035b6:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80035b8:	694a      	ldr	r2, [r1, #20]
 80035ba:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80035bc:	698a      	ldr	r2, [r1, #24]
 80035be:	6182      	str	r2, [r0, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 80035c0:	4a0c      	ldr	r2, [pc, #48]	; (80035f4 <LSM6DSL_RegisterBusIO+0x5c>)
 80035c2:	6202      	str	r2, [r0, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80035c4:	4a0c      	ldr	r2, [pc, #48]	; (80035f8 <LSM6DSL_RegisterBusIO+0x60>)
 80035c6:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.handle   = pObj;
 80035c8:	6260      	str	r0, [r4, #36]	; 0x24
    if (pObj->IO.Init == NULL)
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0e7      	beq.n	800359e <LSM6DSL_RegisterBusIO+0x6>
    else if (pObj->IO.Init() != LSM6DSL_OK)
 80035ce:	4798      	blx	r3
 80035d0:	2800      	cmp	r0, #0
 80035d2:	d1e4      	bne.n	800359e <LSM6DSL_RegisterBusIO+0x6>
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80035d4:	68a3      	ldr	r3, [r4, #8]
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d10b      	bne.n	80035f2 <LSM6DSL_RegisterBusIO+0x5a>
        if (pObj->is_initialized == 0U)
 80035da:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80035de:	b943      	cbnz	r3, 80035f2 <LSM6DSL_RegisterBusIO+0x5a>
          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 80035e0:	220c      	movs	r2, #12
 80035e2:	2112      	movs	r1, #18
 80035e4:	4620      	mov	r0, r4
 80035e6:	f7ff ffc7 	bl	8003578 <LSM6DSL_Write_Reg>
 80035ea:	3000      	adds	r0, #0
 80035ec:	bf18      	it	ne
 80035ee:	2001      	movne	r0, #1
 80035f0:	4240      	negs	r0, r0
}
 80035f2:	bd10      	pop	{r4, pc}
 80035f4:	08002d29 	.word	0x08002d29
 80035f8:	08002d37 	.word	0x08002d37

080035fc <lsm6dsl_read_reg>:
  * @param  uint16_t len: number of consecutive register to read
  *
  */
int32_t lsm6dsl_read_reg(lsm6dsl_ctx_t *ctx, uint8_t reg, uint8_t *data,
                         uint16_t len)
{
 80035fc:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80035fe:	6844      	ldr	r4, [r0, #4]
 8003600:	6880      	ldr	r0, [r0, #8]
 8003602:	46a4      	mov	ip, r4
  return ret;
}
 8003604:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003608:	4760      	bx	ip

0800360a <lsm6dsl_write_reg>:
  * @param  uint16_t len: number of consecutive register to write
  *
*/
int32_t lsm6dsl_write_reg(lsm6dsl_ctx_t *ctx, uint8_t reg, uint8_t *data,
                          uint16_t len)
{
 800360a:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800360c:	6804      	ldr	r4, [r0, #0]
 800360e:	6880      	ldr	r0, [r0, #8]
 8003610:	46a4      	mov	ip, r4
  return ret;
}
 8003612:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003616:	4760      	bx	ip

08003618 <lsm6dsl_xl_full_scale_set>:
  * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
  * @param  lsm6dsl_fs_xl_t: change the values of fs_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dsl_xl_full_scale_set(lsm6dsl_ctx_t *ctx, lsm6dsl_fs_xl_t val)
{
 8003618:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm6dsl_reg_t reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, &reg.byte, 1);
 800361a:	2301      	movs	r3, #1
{
 800361c:	460d      	mov	r5, r1
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, &reg.byte, 1);
 800361e:	aa01      	add	r2, sp, #4
 8003620:	2110      	movs	r1, #16
{
 8003622:	4604      	mov	r4, r0
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, &reg.byte, 1);
 8003624:	f7ff ffea 	bl	80035fc <lsm6dsl_read_reg>
  if (ret == 0)
 8003628:	b958      	cbnz	r0, 8003642 <lsm6dsl_xl_full_scale_set+0x2a>
  {
    reg.ctrl1_xl.fs_xl = (uint8_t) val;
 800362a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800362e:	f365 0383 	bfi	r3, r5, #2, #2
 8003632:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, &reg.byte, 1);
 8003636:	aa01      	add	r2, sp, #4
 8003638:	2301      	movs	r3, #1
 800363a:	2110      	movs	r1, #16
 800363c:	4620      	mov	r0, r4
 800363e:	f7ff ffe4 	bl	800360a <lsm6dsl_write_reg>
  }
  return ret;
}
 8003642:	b003      	add	sp, #12
 8003644:	bd30      	pop	{r4, r5, pc}

08003646 <lsm6dsl_xl_full_scale_get>:
  * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
  * @param  lsm6dsl_fs_xl_t: Get the values of fs_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dsl_xl_full_scale_get(lsm6dsl_ctx_t *ctx, lsm6dsl_fs_xl_t *val)
{
 8003646:	b513      	push	{r0, r1, r4, lr}
  lsm6dsl_reg_t reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, &reg.byte, 1);
 8003648:	2301      	movs	r3, #1
{
 800364a:	460c      	mov	r4, r1
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, &reg.byte, 1);
 800364c:	aa01      	add	r2, sp, #4
 800364e:	2110      	movs	r1, #16
 8003650:	f7ff ffd4 	bl	80035fc <lsm6dsl_read_reg>
  switch (reg.ctrl1_xl.fs_xl)
 8003654:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003658:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800365c:	2b03      	cmp	r3, #3
 800365e:	d80d      	bhi.n	800367c <lsm6dsl_xl_full_scale_get+0x36>
 8003660:	e8df f003 	tbb	[pc, r3]
 8003664:	0a080602 	.word	0x0a080602
  {
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8003668:	2300      	movs	r3, #0
      break;
    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
      break;
    default:
      *val = LSM6DSL_XL_FS_ND;
 800366a:	7023      	strb	r3, [r4, #0]
      break;
  }

  return ret;
}
 800366c:	b002      	add	sp, #8
 800366e:	bd10      	pop	{r4, pc}
      *val = LSM6DSL_16g;
 8003670:	2301      	movs	r3, #1
 8003672:	e7fa      	b.n	800366a <lsm6dsl_xl_full_scale_get+0x24>
      *val = LSM6DSL_4g;
 8003674:	2302      	movs	r3, #2
 8003676:	e7f8      	b.n	800366a <lsm6dsl_xl_full_scale_get+0x24>
      *val = LSM6DSL_8g;
 8003678:	2303      	movs	r3, #3
 800367a:	e7f6      	b.n	800366a <lsm6dsl_xl_full_scale_get+0x24>
      *val = LSM6DSL_XL_FS_ND;
 800367c:	2304      	movs	r3, #4
 800367e:	e7f4      	b.n	800366a <lsm6dsl_xl_full_scale_get+0x24>

08003680 <lsm6dsl_xl_data_rate_set>:
  * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
  * @param  lsm6dsl_odr_xl_t: change the values of odr_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dsl_xl_data_rate_set(lsm6dsl_ctx_t *ctx, lsm6dsl_odr_xl_t val)
{
 8003680:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm6dsl_reg_t reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, &reg.byte, 1);
 8003682:	2301      	movs	r3, #1
{
 8003684:	460d      	mov	r5, r1
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, &reg.byte, 1);
 8003686:	aa01      	add	r2, sp, #4
 8003688:	2110      	movs	r1, #16
{
 800368a:	4604      	mov	r4, r0
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, &reg.byte, 1);
 800368c:	f7ff ffb6 	bl	80035fc <lsm6dsl_read_reg>
  if (ret == 0)
 8003690:	b958      	cbnz	r0, 80036aa <lsm6dsl_xl_data_rate_set+0x2a>
  {
    reg.ctrl1_xl.odr_xl = (uint8_t) val;
 8003692:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003696:	f365 1307 	bfi	r3, r5, #4, #4
 800369a:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, &reg.byte, 1);
 800369e:	aa01      	add	r2, sp, #4
 80036a0:	2301      	movs	r3, #1
 80036a2:	2110      	movs	r1, #16
 80036a4:	4620      	mov	r0, r4
 80036a6:	f7ff ffb0 	bl	800360a <lsm6dsl_write_reg>
  }
  return ret;
}
 80036aa:	b003      	add	sp, #12
 80036ac:	bd30      	pop	{r4, r5, pc}

080036ae <lsm6dsl_xl_data_rate_get>:
  * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
  * @param  lsm6dsl_odr_xl_t: Get the values of odr_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dsl_xl_data_rate_get(lsm6dsl_ctx_t *ctx, lsm6dsl_odr_xl_t *val)
{
 80036ae:	b513      	push	{r0, r1, r4, lr}
  lsm6dsl_reg_t reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, &reg.byte, 1);
 80036b0:	2301      	movs	r3, #1
{
 80036b2:	460c      	mov	r4, r1
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, &reg.byte, 1);
 80036b4:	aa01      	add	r2, sp, #4
 80036b6:	2110      	movs	r1, #16
 80036b8:	f7ff ffa0 	bl	80035fc <lsm6dsl_read_reg>
  switch (reg.ctrl1_xl.odr_xl)
 80036bc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80036c0:	091b      	lsrs	r3, r3, #4
 80036c2:	2b0b      	cmp	r3, #11
 80036c4:	d821      	bhi.n	800370a <lsm6dsl_xl_data_rate_get+0x5c>
 80036c6:	e8df f003 	tbb	[pc, r3]
 80036ca:	0a06      	.short	0x0a06
 80036cc:	12100e0c 	.word	0x12100e0c
 80036d0:	1a181614 	.word	0x1a181614
 80036d4:	1e1c      	.short	0x1e1c
  {
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 80036d6:	2300      	movs	r3, #0
      break;
    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
      break;
    default:
      *val = LSM6DSL_XL_ODR_ND;
 80036d8:	7023      	strb	r3, [r4, #0]
      break;
  }

  return ret;
}
 80036da:	b002      	add	sp, #8
 80036dc:	bd10      	pop	{r4, pc}
      *val = LSM6DSL_XL_ODR_12Hz5;
 80036de:	2301      	movs	r3, #1
 80036e0:	e7fa      	b.n	80036d8 <lsm6dsl_xl_data_rate_get+0x2a>
      *val = LSM6DSL_XL_ODR_26Hz;
 80036e2:	2302      	movs	r3, #2
 80036e4:	e7f8      	b.n	80036d8 <lsm6dsl_xl_data_rate_get+0x2a>
      *val = LSM6DSL_XL_ODR_52Hz;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e7f6      	b.n	80036d8 <lsm6dsl_xl_data_rate_get+0x2a>
      *val = LSM6DSL_XL_ODR_104Hz;
 80036ea:	2304      	movs	r3, #4
 80036ec:	e7f4      	b.n	80036d8 <lsm6dsl_xl_data_rate_get+0x2a>
      *val = LSM6DSL_XL_ODR_208Hz;
 80036ee:	2305      	movs	r3, #5
 80036f0:	e7f2      	b.n	80036d8 <lsm6dsl_xl_data_rate_get+0x2a>
      *val = LSM6DSL_XL_ODR_416Hz;
 80036f2:	2306      	movs	r3, #6
 80036f4:	e7f0      	b.n	80036d8 <lsm6dsl_xl_data_rate_get+0x2a>
      *val = LSM6DSL_XL_ODR_833Hz;
 80036f6:	2307      	movs	r3, #7
 80036f8:	e7ee      	b.n	80036d8 <lsm6dsl_xl_data_rate_get+0x2a>
      *val = LSM6DSL_XL_ODR_1k66Hz;
 80036fa:	2308      	movs	r3, #8
 80036fc:	e7ec      	b.n	80036d8 <lsm6dsl_xl_data_rate_get+0x2a>
      *val = LSM6DSL_XL_ODR_3k33Hz;
 80036fe:	2309      	movs	r3, #9
 8003700:	e7ea      	b.n	80036d8 <lsm6dsl_xl_data_rate_get+0x2a>
      *val = LSM6DSL_XL_ODR_6k66Hz;
 8003702:	230a      	movs	r3, #10
 8003704:	e7e8      	b.n	80036d8 <lsm6dsl_xl_data_rate_get+0x2a>
      *val = LSM6DSL_XL_ODR_1Hz6;
 8003706:	230b      	movs	r3, #11
 8003708:	e7e6      	b.n	80036d8 <lsm6dsl_xl_data_rate_get+0x2a>
      *val = LSM6DSL_XL_ODR_ND;
 800370a:	230c      	movs	r3, #12
 800370c:	e7e4      	b.n	80036d8 <lsm6dsl_xl_data_rate_get+0x2a>

0800370e <lsm6dsl_gy_full_scale_set>:
  * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
  * @param  lsm6dsl_fs_g_t: change the values of fs_g in reg CTRL2_G
  *
  */
int32_t lsm6dsl_gy_full_scale_set(lsm6dsl_ctx_t *ctx, lsm6dsl_fs_g_t val)
{
 800370e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm6dsl_reg_t reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, &reg.byte, 1);
 8003710:	2301      	movs	r3, #1
{
 8003712:	460d      	mov	r5, r1
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, &reg.byte, 1);
 8003714:	aa01      	add	r2, sp, #4
 8003716:	2111      	movs	r1, #17
{
 8003718:	4604      	mov	r4, r0
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, &reg.byte, 1);
 800371a:	f7ff ff6f 	bl	80035fc <lsm6dsl_read_reg>
  if (ret == 0)
 800371e:	b958      	cbnz	r0, 8003738 <lsm6dsl_gy_full_scale_set+0x2a>
  {
    reg.ctrl2_g.fs_g = (uint8_t) val;
 8003720:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003724:	f365 0343 	bfi	r3, r5, #1, #3
 8003728:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, &reg.byte, 1);
 800372c:	aa01      	add	r2, sp, #4
 800372e:	2301      	movs	r3, #1
 8003730:	2111      	movs	r1, #17
 8003732:	4620      	mov	r0, r4
 8003734:	f7ff ff69 	bl	800360a <lsm6dsl_write_reg>
  }
  return ret;
}
 8003738:	b003      	add	sp, #12
 800373a:	bd30      	pop	{r4, r5, pc}

0800373c <lsm6dsl_gy_full_scale_get>:
  * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
  * @param  lsm6dsl_fs_g_t: Get the values of fs_g in reg CTRL2_G
  *
  */
int32_t lsm6dsl_gy_full_scale_get(lsm6dsl_ctx_t *ctx, lsm6dsl_fs_g_t *val)
{
 800373c:	b513      	push	{r0, r1, r4, lr}
  lsm6dsl_reg_t reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, &reg.byte, 1);
 800373e:	2301      	movs	r3, #1
{
 8003740:	460c      	mov	r4, r1
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, &reg.byte, 1);
 8003742:	aa01      	add	r2, sp, #4
 8003744:	2111      	movs	r1, #17
 8003746:	f7ff ff59 	bl	80035fc <lsm6dsl_read_reg>
  switch (reg.ctrl2_g.fs_g)
 800374a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800374e:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8003752:	2b06      	cmp	r3, #6
 8003754:	d811      	bhi.n	800377a <lsm6dsl_gy_full_scale_get+0x3e>
 8003756:	e8df f003 	tbb	[pc, r3]
 800375a:	0804      	.short	0x0804
 800375c:	100c100a 	.word	0x100c100a
 8003760:	0e          	.byte	0x0e
 8003761:	00          	.byte	0x00
  {
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 8003762:	2300      	movs	r3, #0
      break;
    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
      break;
    default:
      *val = LSM6DSL_GY_FS_ND;
 8003764:	7023      	strb	r3, [r4, #0]
      break;
  }

  return ret;
}
 8003766:	b002      	add	sp, #8
 8003768:	bd10      	pop	{r4, pc}
      *val = LSM6DSL_125dps;
 800376a:	2301      	movs	r3, #1
 800376c:	e7fa      	b.n	8003764 <lsm6dsl_gy_full_scale_get+0x28>
      *val = LSM6DSL_500dps;
 800376e:	2302      	movs	r3, #2
 8003770:	e7f8      	b.n	8003764 <lsm6dsl_gy_full_scale_get+0x28>
      *val = LSM6DSL_1000dps;
 8003772:	2304      	movs	r3, #4
 8003774:	e7f6      	b.n	8003764 <lsm6dsl_gy_full_scale_get+0x28>
      *val = LSM6DSL_2000dps;
 8003776:	2306      	movs	r3, #6
 8003778:	e7f4      	b.n	8003764 <lsm6dsl_gy_full_scale_get+0x28>
      *val = LSM6DSL_GY_FS_ND;
 800377a:	2307      	movs	r3, #7
 800377c:	e7f2      	b.n	8003764 <lsm6dsl_gy_full_scale_get+0x28>

0800377e <lsm6dsl_gy_data_rate_set>:
  * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
  * @param  lsm6dsl_odr_g_t: change the values of odr_g in reg CTRL2_G
  *
  */
int32_t lsm6dsl_gy_data_rate_set(lsm6dsl_ctx_t *ctx, lsm6dsl_odr_g_t val)
{
 800377e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm6dsl_reg_t reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, &reg.byte, 1);
 8003780:	2301      	movs	r3, #1
{
 8003782:	460d      	mov	r5, r1
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, &reg.byte, 1);
 8003784:	aa01      	add	r2, sp, #4
 8003786:	2111      	movs	r1, #17
{
 8003788:	4604      	mov	r4, r0
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, &reg.byte, 1);
 800378a:	f7ff ff37 	bl	80035fc <lsm6dsl_read_reg>
  if (ret == 0)
 800378e:	b958      	cbnz	r0, 80037a8 <lsm6dsl_gy_data_rate_set+0x2a>
  {
    reg.ctrl2_g.odr_g = (uint8_t) val;
 8003790:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003794:	f365 1307 	bfi	r3, r5, #4, #4
 8003798:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, &reg.byte, 1);
 800379c:	aa01      	add	r2, sp, #4
 800379e:	2301      	movs	r3, #1
 80037a0:	2111      	movs	r1, #17
 80037a2:	4620      	mov	r0, r4
 80037a4:	f7ff ff31 	bl	800360a <lsm6dsl_write_reg>
  }
  return ret;
}
 80037a8:	b003      	add	sp, #12
 80037aa:	bd30      	pop	{r4, r5, pc}

080037ac <lsm6dsl_gy_data_rate_get>:
  * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
  * @param  lsm6dsl_odr_g_t: Get the values of odr_g in reg CTRL2_G
  *
  */
int32_t lsm6dsl_gy_data_rate_get(lsm6dsl_ctx_t *ctx, lsm6dsl_odr_g_t *val)
{
 80037ac:	b513      	push	{r0, r1, r4, lr}
  lsm6dsl_reg_t reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, &reg.byte, 1);
 80037ae:	2301      	movs	r3, #1
{
 80037b0:	460c      	mov	r4, r1
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, &reg.byte, 1);
 80037b2:	aa01      	add	r2, sp, #4
 80037b4:	2111      	movs	r1, #17
 80037b6:	f7ff ff21 	bl	80035fc <lsm6dsl_read_reg>
  switch (reg.ctrl2_g.odr_g)
 80037ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80037be:	091b      	lsrs	r3, r3, #4
 80037c0:	2b0a      	cmp	r3, #10
 80037c2:	d81f      	bhi.n	8003804 <lsm6dsl_gy_data_rate_get+0x58>
 80037c4:	e8df f003 	tbb	[pc, r3]
 80037c8:	0e0c0a06 	.word	0x0e0c0a06
 80037cc:	16141210 	.word	0x16141210
 80037d0:	1a18      	.short	0x1a18
 80037d2:	1c          	.byte	0x1c
 80037d3:	00          	.byte	0x00
  {
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 80037d4:	2300      	movs	r3, #0
      break;
    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
      break;
    default:
      *val = LSM6DSL_GY_ODR_ND;
 80037d6:	7023      	strb	r3, [r4, #0]
      break;
  }

  return ret;
}
 80037d8:	b002      	add	sp, #8
 80037da:	bd10      	pop	{r4, pc}
      *val = LSM6DSL_GY_ODR_12Hz5;
 80037dc:	2301      	movs	r3, #1
 80037de:	e7fa      	b.n	80037d6 <lsm6dsl_gy_data_rate_get+0x2a>
      *val = LSM6DSL_GY_ODR_26Hz;
 80037e0:	2302      	movs	r3, #2
 80037e2:	e7f8      	b.n	80037d6 <lsm6dsl_gy_data_rate_get+0x2a>
      *val = LSM6DSL_GY_ODR_52Hz;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e7f6      	b.n	80037d6 <lsm6dsl_gy_data_rate_get+0x2a>
      *val = LSM6DSL_GY_ODR_104Hz;
 80037e8:	2304      	movs	r3, #4
 80037ea:	e7f4      	b.n	80037d6 <lsm6dsl_gy_data_rate_get+0x2a>
      *val = LSM6DSL_GY_ODR_208Hz;
 80037ec:	2305      	movs	r3, #5
 80037ee:	e7f2      	b.n	80037d6 <lsm6dsl_gy_data_rate_get+0x2a>
      *val = LSM6DSL_GY_ODR_416Hz;
 80037f0:	2306      	movs	r3, #6
 80037f2:	e7f0      	b.n	80037d6 <lsm6dsl_gy_data_rate_get+0x2a>
      *val = LSM6DSL_GY_ODR_833Hz;
 80037f4:	2307      	movs	r3, #7
 80037f6:	e7ee      	b.n	80037d6 <lsm6dsl_gy_data_rate_get+0x2a>
      *val = LSM6DSL_GY_ODR_1k66Hz;
 80037f8:	2308      	movs	r3, #8
 80037fa:	e7ec      	b.n	80037d6 <lsm6dsl_gy_data_rate_get+0x2a>
      *val = LSM6DSL_GY_ODR_3k33Hz;
 80037fc:	2309      	movs	r3, #9
 80037fe:	e7ea      	b.n	80037d6 <lsm6dsl_gy_data_rate_get+0x2a>
      *val = LSM6DSL_GY_ODR_6k66Hz;
 8003800:	230a      	movs	r3, #10
 8003802:	e7e8      	b.n	80037d6 <lsm6dsl_gy_data_rate_get+0x2a>
      *val = LSM6DSL_GY_ODR_ND;
 8003804:	230b      	movs	r3, #11
 8003806:	e7e6      	b.n	80037d6 <lsm6dsl_gy_data_rate_get+0x2a>

08003808 <lsm6dsl_block_data_update_set>:
  * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t val: change the values of bdu in reg CTRL3_C
  *
  */
int32_t lsm6dsl_block_data_update_set(lsm6dsl_ctx_t *ctx, uint8_t val)
{
 8003808:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm6dsl_reg_t reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, &reg.byte, 1);
 800380a:	2301      	movs	r3, #1
{
 800380c:	460d      	mov	r5, r1
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, &reg.byte, 1);
 800380e:	aa01      	add	r2, sp, #4
 8003810:	2112      	movs	r1, #18
{
 8003812:	4604      	mov	r4, r0
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, &reg.byte, 1);
 8003814:	f7ff fef2 	bl	80035fc <lsm6dsl_read_reg>
  if (ret == 0)
 8003818:	b958      	cbnz	r0, 8003832 <lsm6dsl_block_data_update_set+0x2a>
  {
    reg.ctrl3_c.bdu = val;
 800381a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800381e:	f365 1386 	bfi	r3, r5, #6, #1
 8003822:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, &reg.byte, 1);
 8003826:	aa01      	add	r2, sp, #4
 8003828:	2301      	movs	r3, #1
 800382a:	2112      	movs	r1, #18
 800382c:	4620      	mov	r0, r4
 800382e:	f7ff feec 	bl	800360a <lsm6dsl_write_reg>
  }
  return ret;
}
 8003832:	b003      	add	sp, #12
 8003834:	bd30      	pop	{r4, r5, pc}

08003836 <lsm6dsl_angular_rate_raw_get>:
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(lsm6dsl_ctx_t *ctx, uint8_t *buff)
{
  return lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8003836:	460a      	mov	r2, r1
 8003838:	2306      	movs	r3, #6
 800383a:	2122      	movs	r1, #34	; 0x22
 800383c:	f7ff bede 	b.w	80035fc <lsm6dsl_read_reg>

08003840 <lsm6dsl_acceleration_raw_get>:
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t lsm6dsl_acceleration_raw_get(lsm6dsl_ctx_t *ctx, uint8_t *buff)
{
  return lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8003840:	460a      	mov	r2, r1
 8003842:	2306      	movs	r3, #6
 8003844:	2128      	movs	r1, #40	; 0x28
 8003846:	f7ff bed9 	b.w	80035fc <lsm6dsl_read_reg>

0800384a <lsm6dsl_device_id_get>:
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t lsm6dsl_device_id_get(lsm6dsl_ctx_t *ctx, uint8_t *buff)
{
  return lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 800384a:	460a      	mov	r2, r1
 800384c:	2301      	movs	r3, #1
 800384e:	210f      	movs	r1, #15
 8003850:	f7ff bed4 	b.w	80035fc <lsm6dsl_read_reg>

08003854 <lsm6dsl_auto_increment_set>:
  * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t val: change the values of if_inc in reg CTRL3_C
  *
  */
int32_t lsm6dsl_auto_increment_set(lsm6dsl_ctx_t *ctx, uint8_t val)
{
 8003854:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm6dsl_reg_t reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, &reg.byte, 1);
 8003856:	2301      	movs	r3, #1
{
 8003858:	460d      	mov	r5, r1
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, &reg.byte, 1);
 800385a:	aa01      	add	r2, sp, #4
 800385c:	2112      	movs	r1, #18
{
 800385e:	4604      	mov	r4, r0
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, &reg.byte, 1);
 8003860:	f7ff fecc 	bl	80035fc <lsm6dsl_read_reg>
  if (ret == 0)
 8003864:	b958      	cbnz	r0, 800387e <lsm6dsl_auto_increment_set+0x2a>
  {
    reg.ctrl3_c.if_inc = val;
 8003866:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800386a:	f365 0382 	bfi	r3, r5, #2, #1
 800386e:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, &reg.byte, 1);
 8003872:	aa01      	add	r2, sp, #4
 8003874:	2301      	movs	r3, #1
 8003876:	2112      	movs	r1, #18
 8003878:	4620      	mov	r0, r4
 800387a:	f7ff fec6 	bl	800360a <lsm6dsl_write_reg>
  }
  return ret;
}
 800387e:	b003      	add	sp, #12
 8003880:	bd30      	pop	{r4, r5, pc}

08003882 <lsm6dsl_fifo_mode_set>:
  * @param  lsm6dsl_fifo_mode_t: change the values of fifo_mode in
  *                              reg FIFO_CTRL5
  *
  */
int32_t lsm6dsl_fifo_mode_set(lsm6dsl_ctx_t *ctx, lsm6dsl_fifo_mode_t val)
{
 8003882:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm6dsl_reg_t reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, &reg.byte, 1);
 8003884:	2301      	movs	r3, #1
{
 8003886:	460d      	mov	r5, r1
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, &reg.byte, 1);
 8003888:	aa01      	add	r2, sp, #4
 800388a:	210a      	movs	r1, #10
{
 800388c:	4604      	mov	r4, r0
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, &reg.byte, 1);
 800388e:	f7ff feb5 	bl	80035fc <lsm6dsl_read_reg>
  if (ret == 0)
 8003892:	b958      	cbnz	r0, 80038ac <lsm6dsl_fifo_mode_set+0x2a>
  {
    reg.fifo_ctrl5.fifo_mode = (uint8_t)val;
 8003894:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003898:	f365 0302 	bfi	r3, r5, #0, #3
 800389c:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5, &reg.byte, 1);
 80038a0:	aa01      	add	r2, sp, #4
 80038a2:	2301      	movs	r3, #1
 80038a4:	210a      	movs	r1, #10
 80038a6:	4620      	mov	r0, r4
 80038a8:	f7ff feaf 	bl	800360a <lsm6dsl_write_reg>
  }
  return ret;
}
 80038ac:	b003      	add	sp, #12
 80038ae:	bd30      	pop	{r4, r5, pc}

080038b0 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
				  VL53L1_PresetModes PresetMode,
				  VL53L1_DistanceModes DistanceMode,
				  uint32_t inter_measurement_period_ms)
{
 80038b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t mm_config_timeout_us;
	uint32_t lld_range_config_timeout_us;

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 80038b4:	2903      	cmp	r1, #3
{
 80038b6:	b088      	sub	sp, #32
 80038b8:	4605      	mov	r5, r0
 80038ba:	460c      	mov	r4, r1
 80038bc:	461f      	mov	r7, r3
	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 80038be:	d030      	beq.n	8003922 <SetPresetMode+0x72>
 80038c0:	2908      	cmp	r1, #8
	    (PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 80038c2:	bf14      	ite	ne
 80038c4:	2620      	movne	r6, #32
 80038c6:	2640      	moveq	r6, #64	; 0x40
	VL53L1_DevicePresetModes LightModes[3] = {
 80038c8:	2302      	movs	r3, #2
 80038ca:	f88d 3014 	strb.w	r3, [sp, #20]
 80038ce:	2301      	movs	r3, #1
 80038d0:	f88d 3015 	strb.w	r3, [sp, #21]
 80038d4:	2303      	movs	r3, #3
 80038d6:	f88d 3016 	strb.w	r3, [sp, #22]
	VL53L1_DevicePresetModes TimedModes[3] = {
 80038da:	2307      	movs	r3, #7
 80038dc:	f88d 3018 	strb.w	r3, [sp, #24]
 80038e0:	2306      	movs	r3, #6
 80038e2:	f88d 3019 	strb.w	r3, [sp, #25]
 80038e6:	2308      	movs	r3, #8
 80038e8:	f88d 301a 	strb.w	r3, [sp, #26]
	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 80038ec:	2324      	movs	r3, #36	; 0x24
 80038ee:	f88d 301c 	strb.w	r3, [sp, #28]
 80038f2:	2325      	movs	r3, #37	; 0x25
 80038f4:	f88d 301d 	strb.w	r3, [sp, #29]
	switch (DistanceMode) {
 80038f8:	2a01      	cmp	r2, #1
	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 80038fa:	f04f 0326 	mov.w	r3, #38	; 0x26
 80038fe:	f88d 301e 	strb.w	r3, [sp, #30]
	switch (DistanceMode) {
 8003902:	d010      	beq.n	8003926 <SetPresetMode+0x76>
 8003904:	2a02      	cmp	r2, #2
		DistIdx = 2;
 8003906:	bf0c      	ite	eq
 8003908:	2301      	moveq	r3, #1
 800390a:	2302      	movne	r3, #2
	switch (PresetMode) {
 800390c:	2c04      	cmp	r4, #4
 800390e:	d00c      	beq.n	800392a <SetPresetMode+0x7a>
 8003910:	2c08      	cmp	r4, #8
 8003912:	d02d      	beq.n	8003970 <SetPresetMode+0xc0>
 8003914:	2c03      	cmp	r4, #3
 8003916:	d130      	bne.n	800397a <SetPresetMode+0xca>
		*pDevicePresetMode = TimedModes[DistIdx];
 8003918:	aa08      	add	r2, sp, #32
 800391a:	4413      	add	r3, r2
 800391c:	f813 8c08 	ldrb.w	r8, [r3, #-8]
 8003920:	e007      	b.n	8003932 <SetPresetMode+0x82>
		measurement_mode = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 8003922:	2640      	movs	r6, #64	; 0x40
 8003924:	e7d0      	b.n	80038c8 <SetPresetMode+0x18>
		DistIdx = 0;
 8003926:	2300      	movs	r3, #0
 8003928:	e7f0      	b.n	800390c <SetPresetMode+0x5c>
		*pDevicePresetMode = LightModes[DistIdx];
 800392a:	aa08      	add	r2, sp, #32
 800392c:	4413      	add	r3, r2
 800392e:	f813 8c0c 	ldrb.w	r8, [r3, #-12]

	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
					 &device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
		Status = VL53L1_get_preset_mode_timing_cfg(Dev,
 8003932:	ab07      	add	r3, sp, #28
 8003934:	9301      	str	r3, [sp, #4]
 8003936:	ab06      	add	r3, sp, #24
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	f10d 0212 	add.w	r2, sp, #18
 800393e:	ab05      	add	r3, sp, #20
 8003940:	4641      	mov	r1, r8
 8003942:	4628      	mov	r0, r5
 8003944:	f000 fc57 	bl	80041f6 <VL53L1_get_preset_mode_timing_cfg>
							   &dss_config__target_total_rate_mcps,
							   &phasecal_config_timeout_us,
							   &mm_config_timeout_us,
							   &lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 8003948:	b978      	cbnz	r0, 800396a <SetPresetMode+0xba>
		Status = VL53L1_set_preset_mode(
 800394a:	9b07      	ldr	r3, [sp, #28]
 800394c:	9301      	str	r3, [sp, #4]
 800394e:	9b06      	ldr	r3, [sp, #24]
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8003956:	9702      	str	r7, [sp, #8]
 8003958:	9b05      	ldr	r3, [sp, #20]
 800395a:	4641      	mov	r1, r8
 800395c:	4628      	mov	r0, r5
 800395e:	f000 fc83 	bl	8004268 <VL53L1_set_preset_mode>
			phasecal_config_timeout_us,
			mm_config_timeout_us,
			lld_range_config_timeout_us,
			inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8003962:	b910      	cbnz	r0, 800396a <SetPresetMode+0xba>
		VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8003964:	70ae      	strb	r6, [r5, #2]

	if (Status == VL53L1_ERROR_NONE)
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 8003966:	f885 437c 	strb.w	r4, [r5, #892]	; 0x37c

	LOG_FUNCTION_END(Status);
	return Status;
}
 800396a:	b008      	add	sp, #32
 800396c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 8003970:	aa08      	add	r2, sp, #32
 8003972:	4413      	add	r3, r2
 8003974:	f813 8c04 	ldrb.w	r8, [r3, #-4]
 8003978:	e7db      	b.n	8003932 <SetPresetMode+0x82>
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800397a:	f06f 0007 	mvn.w	r0, #7
 800397e:	e7f4      	b.n	800396a <SetPresetMode+0xba>

08003980 <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
				  FixPoint1616_t value)
{
 8003980:	b510      	push	{r4, lr}
	VL53L1_Error Status = VL53L1_ERROR_NONE;
	uint16_t tmpuint16; /* temporary variable */

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8003982:	b121      	cbz	r1, 800398e <SetLimitValue+0xe>
 8003984:	2901      	cmp	r1, #1
 8003986:	d008      	beq.n	800399a <SetLimitValue+0x1a>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
		break;
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8003988:	f06f 0003 	mvn.w	r0, #3
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 800398c:	bd10      	pop	{r4, pc}
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 800398e:	f3c2 318f 	ubfx	r1, r2, #14, #16
 8003992:	f000 fd7f 	bl	8004494 <VL53L1_set_lite_sigma_threshold>
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003996:	2000      	movs	r0, #0
		break;
 8003998:	bd10      	pop	{r4, pc}
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 800399a:	f3c2 214f 	ubfx	r1, r2, #9, #16
 800399e:	f000 fd82 	bl	80044a6 <VL53L1_set_lite_min_count_rate>
 80039a2:	e7f8      	b.n	8003996 <SetLimitValue+0x16>

080039a4 <VL53L1_SetDeviceAddress>:
	Status = VL53L1_WrByte(Dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
 80039a4:	084a      	lsrs	r2, r1, #1
 80039a6:	2101      	movs	r1, #1
 80039a8:	f009 bd9e 	b.w	800d4e8 <VL53L1_WrByte>

080039ac <VL53L1_WaitDeviceBooted>:
	Status = VL53L1_poll_for_boot_completion(Dev,
 80039ac:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80039b0:	f002 ba68 	b.w	8005e84 <VL53L1_poll_for_boot_completion>

080039b4 <VL53L1_SetDistanceMode>:
{
 80039b4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	    (DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 80039b8:	1e4b      	subs	r3, r1, #1
 80039ba:	b2db      	uxtb	r3, r3
	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 80039bc:	2b02      	cmp	r3, #2
{
 80039be:	4604      	mov	r4, r0
 80039c0:	460e      	mov	r6, r1
	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 80039c2:	f890 737c 	ldrb.w	r7, [r0, #892]	; 0x37c
	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 80039c6:	d82d      	bhi.n	8003a24 <VL53L1_SetDistanceMode+0x70>
 80039c8:	bf18      	it	ne
 80039ca:	460d      	movne	r5, r1
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 80039cc:	a903      	add	r1, sp, #12
			InternalDistanceMode = VL53L1_DISTANCEMODE_LONG;
 80039ce:	bf08      	it	eq
 80039d0:	2503      	moveq	r5, #3
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 80039d2:	f000 fba3 	bl	800411c <VL53L1_get_user_zone>
	if (Status == VL53L1_ERROR_NONE)
 80039d6:	bb10      	cbnz	r0, 8003a1e <VL53L1_SetDistanceMode+0x6a>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 80039d8:	466b      	mov	r3, sp
 80039da:	aa01      	add	r2, sp, #4
 80039dc:	a902      	add	r1, sp, #8
 80039de:	4620      	mov	r0, r4
	inter_measurement_period_ms = VL53L1DevDataGet(Dev,
 80039e0:	f8d4 8014 	ldr.w	r8, [r4, #20]
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 80039e4:	f000 fb3d 	bl	8004062 <VL53L1_get_timeouts_us>
	if (Status == VL53L1_ERROR_NONE)
 80039e8:	b9c8      	cbnz	r0, 8003a1e <VL53L1_SetDistanceMode+0x6a>
		Status = SetPresetMode(Dev,
 80039ea:	4643      	mov	r3, r8
 80039ec:	462a      	mov	r2, r5
 80039ee:	4639      	mov	r1, r7
 80039f0:	4620      	mov	r0, r4
 80039f2:	f7ff ff5d 	bl	80038b0 <SetPresetMode>
	if (Status == VL53L1_ERROR_NONE) {
 80039f6:	b990      	cbnz	r0, 8003a1e <VL53L1_SetDistanceMode+0x6a>
		VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 80039f8:	f884 537e 	strb.w	r5, [r4, #894]	; 0x37e
		VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 80039fc:	f884 537f 	strb.w	r5, [r4, #895]	; 0x37f
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 8003a00:	f884 637d 	strb.w	r6, [r4, #893]	; 0x37d
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8003a04:	9b00      	ldr	r3, [sp, #0]
 8003a06:	9a01      	ldr	r2, [sp, #4]
 8003a08:	9902      	ldr	r1, [sp, #8]
 8003a0a:	4620      	mov	r0, r4
 8003a0c:	f000 fb11 	bl	8004032 <VL53L1_set_timeouts_us>
		if (Status == VL53L1_ERROR_NONE)
 8003a10:	b928      	cbnz	r0, 8003a1e <VL53L1_SetDistanceMode+0x6a>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 8003a12:	9b00      	ldr	r3, [sp, #0]
 8003a14:	6123      	str	r3, [r4, #16]
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 8003a16:	a903      	add	r1, sp, #12
 8003a18:	4620      	mov	r0, r4
 8003a1a:	f000 fb6e 	bl	80040fa <VL53L1_set_user_zone>
}
 8003a1e:	b004      	add	sp, #16
 8003a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return VL53L1_ERROR_INVALID_PARAMS;
 8003a24:	f06f 0003 	mvn.w	r0, #3
 8003a28:	e7f9      	b.n	8003a1e <VL53L1_SetDistanceMode+0x6a>
	...

08003a2c <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:
{
 8003a2c:	b570      	push	{r4, r5, r6, lr}
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8003a2e:	4b3e      	ldr	r3, [pc, #248]	; (8003b28 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xfc>)
 8003a30:	4299      	cmp	r1, r3
{
 8003a32:	b086      	sub	sp, #24
 8003a34:	4604      	mov	r4, r0
 8003a36:	460d      	mov	r5, r1
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8003a38:	d93d      	bls.n	8003ab6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x8a>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8003a3a:	f06f 0003 	mvn.w	r0, #3
}
 8003a3e:	b006      	add	sp, #24
 8003a40:	bd70      	pop	{r4, r5, r6, pc}
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8003a42:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d064      	beq.n	8003b14 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe8>
 8003a4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8003a4e:	4837      	ldr	r0, [pc, #220]	; (8003b2c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x100>)
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a56:	f04f 0301 	mov.w	r3, #1
 8003a5a:	bf18      	it	ne
 8003a5c:	f44f 727a 	movne.w	r2, #1000	; 0x3e8
		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8003a60:	4295      	cmp	r5, r2
 8003a62:	d9ea      	bls.n	8003a3a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe>
					- TimingGuard);
 8003a64:	1aaa      	subs	r2, r5, r2
			if (TimingBudget > FDAMaxTimingBudgetUs)
 8003a66:	4282      	cmp	r2, r0
 8003a68:	d8e7      	bhi.n	8003a3a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe>
				TimingBudget /= divisor;
 8003a6a:	fbb2 f3f3 	udiv	r3, r2, r3
				Status = VL53L1_set_timeouts_us(
 8003a6e:	9904      	ldr	r1, [sp, #16]
 8003a70:	9a03      	ldr	r2, [sp, #12]
				TimingBudget /= divisor;
 8003a72:	9302      	str	r3, [sp, #8]
				Status = VL53L1_set_timeouts_us(
 8003a74:	4620      	mov	r0, r4
 8003a76:	f000 fadc 	bl	8004032 <VL53L1_set_timeouts_us>
			if (Status == VL53L1_ERROR_NONE)
 8003a7a:	2800      	cmp	r0, #0
 8003a7c:	d1df      	bne.n	8003a3e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12>
				VL53L1DevDataSet(Dev,
 8003a7e:	9b02      	ldr	r3, [sp, #8]
 8003a80:	6123      	str	r3, [r4, #16]
		VL53L1DevDataSet(Dev,
 8003a82:	f8c4 5380 	str.w	r5, [r4, #896]	; 0x380
 8003a86:	e7da      	b.n	8003a3e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12>
			VL53L1_get_tuning_parm(Dev,
 8003a88:	aa05      	add	r2, sp, #20
 8003a8a:	f248 0136 	movw	r1, #32822	; 0x8036
 8003a8e:	4620      	mov	r0, r4
 8003a90:	f000 ff36 	bl	8004900 <VL53L1_get_tuning_parm>
			if (vhv_loops > 0) {
 8003a94:	9b05      	ldr	r3, [sp, #20]
			FDAMaxTimingBudgetUs *= 2;
 8003a96:	4826      	ldr	r0, [pc, #152]	; (8003b30 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x104>)
			if (vhv_loops > 0) {
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f04f 02f5 	mov.w	r2, #245	; 0xf5
				vhv += vhv_loops *
 8003a9e:	bfc4      	itt	gt
 8003aa0:	435a      	mulgt	r2, r3
 8003aa2:	32f5      	addgt	r2, #245	; 0xf5
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8003aa4:	f602 52dc 	addw	r2, r2, #3548	; 0xddc
			divisor = 2;
 8003aa8:	2302      	movs	r3, #2
			break;
 8003aaa:	e7d9      	b.n	8003a60 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x34>
		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8003aac:	2d00      	cmp	r5, #0
 8003aae:	d0c4      	beq.n	8003a3a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe>
 8003ab0:	f06f 0007 	mvn.w	r0, #7
 8003ab4:	e7c3      	b.n	8003a3e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12>
{
	VL53L1_Error Status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 8003ab6:	f10d 0206 	add.w	r2, sp, #6
 8003aba:	2105      	movs	r1, #5
 8003abc:	f000 fb0a 	bl	80040d4 <VL53L1_get_sequence_config_bit>
	if (Status == VL53L1_ERROR_NONE) {
 8003ac0:	2800      	cmp	r0, #0
 8003ac2:	d1bc      	bne.n	8003a3e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12>
	Status = VL53L1_get_sequence_config_bit(Dev,
 8003ac4:	f10d 0207 	add.w	r2, sp, #7
 8003ac8:	2106      	movs	r1, #6
 8003aca:	4620      	mov	r0, r4
 8003acc:	f000 fb02 	bl	80040d4 <VL53L1_get_sequence_config_bit>
	if (Status == VL53L1_ERROR_NONE)
 8003ad0:	2800      	cmp	r0, #0
 8003ad2:	d1b4      	bne.n	8003a3e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12>
		Status = VL53L1_get_timeouts_us(Dev,
 8003ad4:	ab02      	add	r3, sp, #8
 8003ad6:	aa03      	add	r2, sp, #12
 8003ad8:	a904      	add	r1, sp, #16
 8003ada:	4620      	mov	r0, r4
 8003adc:	f000 fac1 	bl	8004062 <VL53L1_get_timeouts_us>
	if (Status == VL53L1_ERROR_NONE) {
 8003ae0:	2800      	cmp	r0, #0
 8003ae2:	d1ac      	bne.n	8003a3e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12>
		switch (PresetMode) {
 8003ae4:	f894 337c 	ldrb.w	r3, [r4, #892]	; 0x37c
 8003ae8:	2b04      	cmp	r3, #4
 8003aea:	d0aa      	beq.n	8003a42 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x16>
 8003aec:	2b08      	cmp	r3, #8
 8003aee:	d0cb      	beq.n	8003a88 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x5c>
 8003af0:	2b03      	cmp	r3, #3
 8003af2:	d1db      	bne.n	8003aac <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x80>
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8003af4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d00f      	beq.n	8003b1c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf0>
 8003afc:	f89d 6007 	ldrb.w	r6, [sp, #7]
			FDAMaxTimingBudgetUs *= 2;
 8003b00:	480b      	ldr	r0, [pc, #44]	; (8003b30 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x104>)
 8003b02:	f245 4260 	movw	r2, #21600	; 0x5460
 8003b06:	f246 71e8 	movw	r1, #26600	; 0x67e8
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	2e01      	cmp	r6, #1
 8003b0e:	bf08      	it	eq
 8003b10:	460a      	moveq	r2, r1
 8003b12:	e7a5      	b.n	8003a60 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x34>
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8003b14:	4805      	ldr	r0, [pc, #20]	; (8003b2c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x100>)
				TimingGuard = 5000;
 8003b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b1a:	e7a1      	b.n	8003a60 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x34>
			FDAMaxTimingBudgetUs *= 2;
 8003b1c:	4804      	ldr	r0, [pc, #16]	; (8003b30 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x104>)
			divisor = 2;
 8003b1e:	2302      	movs	r3, #2
				TimingGuard = 26600;
 8003b20:	f246 72e8 	movw	r2, #26600	; 0x67e8
 8003b24:	e79c      	b.n	8003a60 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x34>
 8003b26:	bf00      	nop
 8003b28:	00989680 	.word	0x00989680
 8003b2c:	00086470 	.word	0x00086470
 8003b30:	0010c8e0 	.word	0x0010c8e0

08003b34 <VL53L1_SetPresetMode>:
{
 8003b34:	b538      	push	{r3, r4, r5, lr}
	Status = SetPresetMode(Dev,
 8003b36:	2203      	movs	r2, #3
 8003b38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 8003b3c:	4604      	mov	r4, r0
 8003b3e:	460d      	mov	r5, r1
	Status = SetPresetMode(Dev,
 8003b40:	f7ff feb6 	bl	80038b0 <SetPresetMode>
	if (Status == VL53L1_ERROR_NONE) {
 8003b44:	b9c8      	cbnz	r0, 8003b7a <VL53L1_SetPresetMode+0x46>
		VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 8003b46:	2303      	movs	r3, #3
 8003b48:	f884 337e 	strb.w	r3, [r4, #894]	; 0x37e
		VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 8003b4c:	f884 337f 	strb.w	r3, [r4, #895]	; 0x37f
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 8003b50:	1eeb      	subs	r3, r5, #3
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d901      	bls.n	8003b5a <VL53L1_SetPresetMode+0x26>
		    (PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8003b56:	2d08      	cmp	r5, #8
 8003b58:	d10c      	bne.n	8003b74 <VL53L1_SetPresetMode+0x40>
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8003b5a:	f24a 0128 	movw	r1, #41000	; 0xa028
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8003b5e:	4620      	mov	r0, r4
 8003b60:	f7ff ff64 	bl	8003a2c <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
	if (Status == VL53L1_ERROR_NONE) {
 8003b64:	b948      	cbnz	r0, 8003b7a <VL53L1_SetPresetMode+0x46>
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 8003b66:	4620      	mov	r0, r4
 8003b68:	f44f 6185 	mov.w	r1, #1064	; 0x428
}
 8003b6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 8003b70:	f000 ba46 	b.w	8004000 <VL53L1_set_inter_measurement_period_ms>
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8003b74:	f248 2135 	movw	r1, #33333	; 0x8235
 8003b78:	e7f1      	b.n	8003b5e <VL53L1_SetPresetMode+0x2a>
}
 8003b7a:	bd38      	pop	{r3, r4, r5, pc}

08003b7c <VL53L1_StaticInit>:
	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8003b7c:	2203      	movs	r2, #3
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8003b7e:	2120      	movs	r1, #32
 8003b80:	7081      	strb	r1, [r0, #2]
	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8003b82:	f880 2378 	strb.w	r2, [r0, #888]	; 0x378
	VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 8003b86:	f880 237f 	strb.w	r2, [r0, #895]	; 0x37f
	VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 8003b8a:	f880 237e 	strb.w	r2, [r0, #894]	; 0x37e
	VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 8003b8e:	f880 237d 	strb.w	r2, [r0, #893]	; 0x37d
	Status = VL53L1_SetPresetMode(Dev,
 8003b92:	2108      	movs	r1, #8
 8003b94:	f7ff bfce 	b.w	8003b34 <VL53L1_SetPresetMode>

08003b98 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:
{
 8003b98:	b570      	push	{r4, r5, r6, lr}
	uint8_t Mm1Enabled = 0;
 8003b9a:	2300      	movs	r3, #0
{
 8003b9c:	b086      	sub	sp, #24
	*pMeasurementTimingBudgetMicroSeconds = 0;
 8003b9e:	600b      	str	r3, [r1, #0]
{
 8003ba0:	460c      	mov	r4, r1
	Status = VL53L1_get_sequence_config_bit(Dev,
 8003ba2:	f10d 0206 	add.w	r2, sp, #6
 8003ba6:	2105      	movs	r1, #5
{
 8003ba8:	4606      	mov	r6, r0
	uint8_t Mm1Enabled = 0;
 8003baa:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t Mm2Enabled = 0;
 8003bae:	f88d 3007 	strb.w	r3, [sp, #7]
	uint32_t MmTimeoutUs = 0;
 8003bb2:	9302      	str	r3, [sp, #8]
	uint32_t RangeTimeoutUs = 0;
 8003bb4:	9303      	str	r3, [sp, #12]
	uint32_t PhaseCalTimeoutUs = 0;
 8003bb6:	9304      	str	r3, [sp, #16]
	Status = VL53L1_get_sequence_config_bit(Dev,
 8003bb8:	f000 fa8c 	bl	80040d4 <VL53L1_get_sequence_config_bit>
	if (Status == VL53L1_ERROR_NONE)
 8003bbc:	4605      	mov	r5, r0
 8003bbe:	2800      	cmp	r0, #0
 8003bc0:	d151      	bne.n	8003c66 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xce>
	Status = VL53L1_get_sequence_config_bit(Dev,
 8003bc2:	f10d 0207 	add.w	r2, sp, #7
 8003bc6:	2106      	movs	r1, #6
 8003bc8:	4630      	mov	r0, r6
 8003bca:	f000 fa83 	bl	80040d4 <VL53L1_get_sequence_config_bit>
	if (Status == VL53L1_ERROR_NONE)
 8003bce:	4605      	mov	r5, r0
 8003bd0:	2800      	cmp	r0, #0
 8003bd2:	d148      	bne.n	8003c66 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xce>
		Status = VL53L1_get_timeouts_us(Dev,
 8003bd4:	ab03      	add	r3, sp, #12
 8003bd6:	aa02      	add	r2, sp, #8
 8003bd8:	a904      	add	r1, sp, #16
 8003bda:	4630      	mov	r0, r6
 8003bdc:	f000 fa41 	bl	8004062 <VL53L1_get_timeouts_us>
	if (Status == VL53L1_ERROR_NONE) {
 8003be0:	4605      	mov	r5, r0
 8003be2:	2800      	cmp	r0, #0
 8003be4:	d13f      	bne.n	8003c66 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xce>
		switch (PresetMode) {
 8003be6:	f896 337c 	ldrb.w	r3, [r6, #892]	; 0x37c
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	d011      	beq.n	8003c12 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x7a>
 8003bee:	2b08      	cmp	r3, #8
 8003bf0:	d024      	beq.n	8003c3c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xa4>
 8003bf2:	2b03      	cmp	r3, #3
 8003bf4:	d135      	bne.n	8003c62 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xca>
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8003bf6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	9b03      	ldr	r3, [sp, #12]
 8003bfe:	d003      	beq.n	8003c08 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x70>
 8003c00:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003c04:	2a01      	cmp	r2, #1
 8003c06:	d115      	bne.n	8003c34 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x9c>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 8003c08:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 8003c0c:	3334      	adds	r3, #52	; 0x34
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	e00b      	b.n	8003c2a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x92>
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8003c12:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	9b03      	ldr	r3, [sp, #12]
 8003c1a:	d003      	beq.n	8003c24 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x8c>
 8003c1c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003c20:	2a01      	cmp	r2, #1
 8003c22:	d104      	bne.n	8003c2e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x96>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 8003c24:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8003c28:	3308      	adds	r3, #8
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 8003c2a:	6023      	str	r3, [r4, #0]
	return Status;
 8003c2c:	e01b      	b.n	8003c66 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xce>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 8003c2e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8003c32:	e7fa      	b.n	8003c2a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x92>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 8003c34:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8003c38:	3330      	adds	r3, #48	; 0x30
 8003c3a:	e7e8      	b.n	8003c0e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x76>
			VL53L1_get_tuning_parm(Dev,
 8003c3c:	aa05      	add	r2, sp, #20
 8003c3e:	f248 0136 	movw	r1, #32822	; 0x8036
 8003c42:	4630      	mov	r0, r6
 8003c44:	f000 fe5c 	bl	8004900 <VL53L1_get_tuning_parm>
			if (vhv_loops > 0) {
 8003c48:	9a05      	ldr	r2, [sp, #20]
 8003c4a:	23f5      	movs	r3, #245	; 0xf5
 8003c4c:	2a00      	cmp	r2, #0
				vhv += vhv_loops *
 8003c4e:	bfc8      	it	gt
 8003c50:	4353      	mulgt	r3, r2
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 8003c52:	9a03      	ldr	r2, [sp, #12]
				vhv += vhv_loops *
 8003c54:	bfc8      	it	gt
 8003c56:	33f5      	addgt	r3, #245	; 0xf5
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 8003c58:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8003c5c:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
			break;
 8003c60:	e7e3      	b.n	8003c2a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x92>
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8003c62:	f06f 0507 	mvn.w	r5, #7
}
 8003c66:	4628      	mov	r0, r5
 8003c68:	b006      	add	sp, #24
 8003c6a:	bd70      	pop	{r4, r5, r6, pc}

08003c6c <VL53L1_SetInterMeasurementPeriodMilliSeconds>:
	adjustedIMP += (adjustedIMP * 64) / 1000;
 8003c6c:	018b      	lsls	r3, r1, #6
 8003c6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c72:	fbb3 f3f2 	udiv	r3, r3, r2
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 8003c76:	4419      	add	r1, r3
 8003c78:	f000 b9c2 	b.w	8004000 <VL53L1_set_inter_measurement_period_ms>

08003c7c <VL53L1_GetInterMeasurementPeriodMilliSeconds>:
{
 8003c7c:	b513      	push	{r0, r1, r4, lr}
 8003c7e:	460c      	mov	r4, r1
	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 8003c80:	a901      	add	r1, sp, #4
 8003c82:	f000 f9c9 	bl	8004018 <VL53L1_get_inter_measurement_period_ms>
	adjustedIMP -= (adjustedIMP * 64) / 1000;
 8003c86:	9b01      	ldr	r3, [sp, #4]
 8003c88:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003c8c:	019a      	lsls	r2, r3, #6
 8003c8e:	fbb2 f2f1 	udiv	r2, r2, r1
 8003c92:	1a9b      	subs	r3, r3, r2
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 8003c94:	6023      	str	r3, [r4, #0]
}
 8003c96:	b002      	add	sp, #8
 8003c98:	bd10      	pop	{r4, pc}

08003c9a <VL53L1_SetLimitCheckEnable>:
	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8003c9a:	2901      	cmp	r1, #1
{
 8003c9c:	b570      	push	{r4, r5, r6, lr}
 8003c9e:	4604      	mov	r4, r0
 8003ca0:	460e      	mov	r6, r1
 8003ca2:	4615      	mov	r5, r2
	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8003ca4:	d811      	bhi.n	8003cca <VL53L1_SetLimitCheckEnable+0x30>
		if (LimitCheckEnable == 0)
 8003ca6:	b17a      	cbz	r2, 8003cc8 <VL53L1_SetLimitCheckEnable+0x2e>
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003ca8:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8003cac:	f8d3 2388 	ldr.w	r2, [r3, #904]	; 0x388
		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 8003cb0:	4631      	mov	r1, r6
 8003cb2:	4620      	mov	r0, r4
 8003cb4:	f7ff fe64 	bl	8003980 <SetLimitValue>
	if (Status == VL53L1_ERROR_NONE)
 8003cb8:	b948      	cbnz	r0, 8003cce <VL53L1_SetLimitCheckEnable+0x34>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8003cba:	3500      	adds	r5, #0
 8003cbc:	4434      	add	r4, r6
 8003cbe:	bf18      	it	ne
 8003cc0:	2501      	movne	r5, #1
 8003cc2:	f884 5384 	strb.w	r5, [r4, #900]	; 0x384
 8003cc6:	bd70      	pop	{r4, r5, r6, pc}
 8003cc8:	e7f2      	b.n	8003cb0 <VL53L1_SetLimitCheckEnable+0x16>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8003cca:	f06f 0003 	mvn.w	r0, #3
}
 8003cce:	bd70      	pop	{r4, r5, r6, pc}

08003cd0 <VL53L1_SetLimitCheckValue>:
	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8003cd0:	2901      	cmp	r1, #1
{
 8003cd2:	b570      	push	{r4, r5, r6, lr}
 8003cd4:	4604      	mov	r4, r0
 8003cd6:	460d      	mov	r5, r1
 8003cd8:	4616      	mov	r6, r2
	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8003cda:	d811      	bhi.n	8003d00 <VL53L1_SetLimitCheckValue+0x30>
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003cdc:	1843      	adds	r3, r0, r1
		if (LimitChecksEnable == 0) {
 8003cde:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 8003ce2:	b92b      	cbnz	r3, 8003cf0 <VL53L1_SetLimitCheckValue+0x20>
			VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003ce4:	eb00 0481 	add.w	r4, r0, r1, lsl #2
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003ce8:	4618      	mov	r0, r3
			VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003cea:	f8c4 2388 	str.w	r2, [r4, #904]	; 0x388
 8003cee:	bd70      	pop	{r4, r5, r6, pc}
			Status = SetLimitValue(Dev, LimitCheckId,
 8003cf0:	f7ff fe46 	bl	8003980 <SetLimitValue>
			if (Status == VL53L1_ERROR_NONE) {
 8003cf4:	b930      	cbnz	r0, 8003d04 <VL53L1_SetLimitCheckValue+0x34>
				VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8003cf6:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8003cfa:	f8c4 6388 	str.w	r6, [r4, #904]	; 0x388
 8003cfe:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8003d00:	f06f 0003 	mvn.w	r0, #3
}
 8003d04:	bd70      	pop	{r4, r5, r6, pc}

08003d06 <VL53L1_DataInit>:
{
 8003d06:	b538      	push	{r3, r4, r5, lr}
		Status = VL53L1_data_init(Dev, 1);
 8003d08:	2101      	movs	r1, #1
{
 8003d0a:	4604      	mov	r4, r0
		Status = VL53L1_data_init(Dev, 1);
 8003d0c:	f000 fb64 	bl	80043d8 <VL53L1_data_init>
	if (Status == VL53L1_ERROR_NONE) {
 8003d10:	bb00      	cbnz	r0, 8003d54 <VL53L1_DataInit+0x4e>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 8003d12:	2501      	movs	r5, #1
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 8003d14:	2308      	movs	r3, #8
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 8003d16:	4601      	mov	r1, r0
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 8003d18:	f884 5378 	strb.w	r5, [r4, #888]	; 0x378
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 8003d1c:	f884 337c 	strb.w	r3, [r4, #892]	; 0x37c
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 8003d20:	462a      	mov	r2, r5
 8003d22:	4620      	mov	r0, r4
 8003d24:	f7ff ffb9 	bl	8003c9a <VL53L1_SetLimitCheckEnable>
		if (Status == VL53L1_ERROR_NONE)
 8003d28:	b9a0      	cbnz	r0, 8003d54 <VL53L1_DataInit+0x4e>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 8003d2a:	462a      	mov	r2, r5
 8003d2c:	4629      	mov	r1, r5
 8003d2e:	4620      	mov	r0, r4
 8003d30:	f7ff ffb3 	bl	8003c9a <VL53L1_SetLimitCheckEnable>
	if (Status == VL53L1_ERROR_NONE) {
 8003d34:	b970      	cbnz	r0, 8003d54 <VL53L1_DataInit+0x4e>
		Status = VL53L1_SetLimitCheckValue(Dev,
 8003d36:	4601      	mov	r1, r0
 8003d38:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8003d3c:	4620      	mov	r0, r4
 8003d3e:	f7ff ffc7 	bl	8003cd0 <VL53L1_SetLimitCheckValue>
	if (Status == VL53L1_ERROR_NONE) {
 8003d42:	b938      	cbnz	r0, 8003d54 <VL53L1_DataInit+0x4e>
		Status = VL53L1_SetLimitCheckValue(Dev,
 8003d44:	4629      	mov	r1, r5
 8003d46:	4620      	mov	r0, r4
 8003d48:	f44f 4280 	mov.w	r2, #16384	; 0x4000
}
 8003d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		Status = VL53L1_SetLimitCheckValue(Dev,
 8003d50:	f7ff bfbe 	b.w	8003cd0 <VL53L1_SetLimitCheckValue>
}
 8003d54:	bd38      	pop	{r3, r4, r5, pc}

08003d56 <VL53L1_GetLimitCheckValue>:
{
 8003d56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003d58:	4605      	mov	r5, r0
 8003d5a:	4616      	mov	r6, r2
	switch (LimitCheckId) {
 8003d5c:	460c      	mov	r4, r1
 8003d5e:	b121      	cbz	r1, 8003d6a <VL53L1_GetLimitCheckValue+0x14>
 8003d60:	2901      	cmp	r1, #1
 8003d62:	d016      	beq.n	8003d92 <VL53L1_GetLimitCheckValue+0x3c>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8003d64:	f06f 0003 	mvn.w	r0, #3
 8003d68:	e011      	b.n	8003d8e <VL53L1_GetLimitCheckValue+0x38>
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 8003d6a:	f10d 0106 	add.w	r1, sp, #6
 8003d6e:	f000 fb8c 	bl	800448a <VL53L1_get_lite_sigma_threshold>
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 8003d72:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003d76:	039b      	lsls	r3, r3, #14
	if (Status == VL53L1_ERROR_NONE) {
 8003d78:	b948      	cbnz	r0, 8003d8e <VL53L1_GetLimitCheckValue+0x38>
 8003d7a:	f104 02e0 	add.w	r2, r4, #224	; 0xe0
 8003d7e:	442c      	add	r4, r5
		if (TempFix1616 == 0) {
 8003d80:	b973      	cbnz	r3, 8003da0 <VL53L1_GetLimitCheckValue+0x4a>
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 8003d82:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 8003d86:	68ab      	ldr	r3, [r5, #8]
			*pLimitCheckValue = TempFix1616;
 8003d88:	6033      	str	r3, [r6, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8003d8a:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
}
 8003d8e:	b002      	add	sp, #8
 8003d90:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 8003d92:	a901      	add	r1, sp, #4
 8003d94:	f000 fb82 	bl	800449c <VL53L1_get_lite_min_count_rate>
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 8003d98:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8003d9c:	025b      	lsls	r3, r3, #9
		break;
 8003d9e:	e7eb      	b.n	8003d78 <VL53L1_GetLimitCheckValue+0x22>
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8003da0:	eb05 0582 	add.w	r5, r5, r2, lsl #2
			*pLimitCheckValue = TempFix1616;
 8003da4:	6033      	str	r3, [r6, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8003da6:	60ab      	str	r3, [r5, #8]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8003da8:	2301      	movs	r3, #1
 8003daa:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
 8003dae:	e7ee      	b.n	8003d8e <VL53L1_GetLimitCheckValue+0x38>

08003db0 <VL53L1_StartMeasurement>:
/* Group PAL Measurement Functions */



VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 8003db0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint32_t MTBus, IMPms;

	LOG_FUNCTION_START("");

	CurrPalState = VL53L1DevDataGet(Dev, PalState);
	switch (CurrPalState) {
 8003db2:	f890 3378 	ldrb.w	r3, [r0, #888]	; 0x378
 8003db6:	2b05      	cmp	r3, #5
{
 8003db8:	4604      	mov	r4, r0
	switch (CurrPalState) {
 8003dba:	d807      	bhi.n	8003dcc <VL53L1_StartMeasurement+0x1c>
 8003dbc:	2b04      	cmp	r3, #4
 8003dbe:	d201      	bcs.n	8003dc4 <VL53L1_StartMeasurement+0x14>
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d80c      	bhi.n	8003dde <VL53L1_StartMeasurement+0x2e>
 8003dc4:	f06f 000d 	mvn.w	r0, #13
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);


	LOG_FUNCTION_END(Status);
	return Status;
}
 8003dc8:	b003      	add	sp, #12
 8003dca:	bd30      	pop	{r4, r5, pc}
	switch (CurrPalState) {
 8003dcc:	3b62      	subs	r3, #98	; 0x62
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d9f8      	bls.n	8003dc4 <VL53L1_StartMeasurement+0x14>
		Status = VL53L1_ERROR_UNDEFINED;
 8003dd2:	f06f 0002 	mvn.w	r0, #2
 8003dd6:	e7f7      	b.n	8003dc8 <VL53L1_StartMeasurement+0x18>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8003dd8:	f06f 0003 	mvn.w	r0, #3
 8003ddc:	e7f4      	b.n	8003dc8 <VL53L1_StartMeasurement+0x18>
	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8003dde:	7885      	ldrb	r5, [r0, #2]
	if ((Status == VL53L1_ERROR_NONE) &&
 8003de0:	2d40      	cmp	r5, #64	; 0x40
 8003de2:	d111      	bne.n	8003e08 <VL53L1_StartMeasurement+0x58>
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8003de4:	4669      	mov	r1, sp
 8003de6:	f7ff fed7 	bl	8003b98 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 8003dea:	a901      	add	r1, sp, #4
 8003dec:	4620      	mov	r0, r4
		MTBus /= 1000;
 8003dee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003df2:	9b00      	ldr	r3, [sp, #0]
 8003df4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003df8:	9300      	str	r3, [sp, #0]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 8003dfa:	f7ff ff3f 	bl	8003c7c <VL53L1_GetInterMeasurementPeriodMilliSeconds>
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 8003dfe:	9b00      	ldr	r3, [sp, #0]
 8003e00:	9a01      	ldr	r2, [sp, #4]
 8003e02:	3304      	adds	r3, #4
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d8e7      	bhi.n	8003dd8 <VL53L1_StartMeasurement+0x28>
		Status = VL53L1_init_and_start_range(
 8003e08:	2206      	movs	r2, #6
 8003e0a:	4629      	mov	r1, r5
 8003e0c:	4620      	mov	r0, r4
 8003e0e:	f000 fb4f 	bl	80044b0 <VL53L1_init_and_start_range>
	if (Status == VL53L1_ERROR_NONE)
 8003e12:	2800      	cmp	r0, #0
 8003e14:	d1d8      	bne.n	8003dc8 <VL53L1_StartMeasurement+0x18>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 8003e16:	2304      	movs	r3, #4
 8003e18:	f884 3378 	strb.w	r3, [r4, #888]	; 0x378
 8003e1c:	e7d4      	b.n	8003dc8 <VL53L1_StartMeasurement+0x18>

08003e1e <VL53L1_ClearInterruptAndStartMeasurement>:
	return Status;
}


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 8003e1e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	InternalDistanceMode = VL53L1DevDataGet(Dev,
						CurrentParameters.InternalDistanceMode);
	NewDistanceMode = VL53L1DevDataGet(Dev,
					   CurrentParameters.NewDistanceMode);

	if (NewDistanceMode != InternalDistanceMode)
 8003e20:	f890 237e 	ldrb.w	r2, [r0, #894]	; 0x37e
 8003e24:	f890 337f 	ldrb.w	r3, [r0, #895]	; 0x37f
 8003e28:	429a      	cmp	r2, r3
{
 8003e2a:	4604      	mov	r4, r0
	if (NewDistanceMode != InternalDistanceMode)
 8003e2c:	d037      	beq.n	8003e9e <VL53L1_ClearInterruptAndStartMeasurement+0x80>
	Status = VL53L1_get_user_zone(Dev, &user_zone);
 8003e2e:	4669      	mov	r1, sp
 8003e30:	f000 f974 	bl	800411c <VL53L1_get_user_zone>
	if (Status == VL53L1_ERROR_NONE)
 8003e34:	bb88      	cbnz	r0, 8003e9a <VL53L1_ClearInterruptAndStartMeasurement+0x7c>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8003e36:	ab01      	add	r3, sp, #4
 8003e38:	aa02      	add	r2, sp, #8
 8003e3a:	a903      	add	r1, sp, #12
 8003e3c:	4620      	mov	r0, r4
	PresetMode = VL53L1DevDataGet(Dev,
 8003e3e:	f894 637c 	ldrb.w	r6, [r4, #892]	; 0x37c
	NewDistanceMode = VL53L1DevDataGet(Dev,
 8003e42:	f894 537f 	ldrb.w	r5, [r4, #895]	; 0x37f
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8003e46:	f000 f90c 	bl	8004062 <VL53L1_get_timeouts_us>
	if (Status == VL53L1_ERROR_NONE)
 8003e4a:	bb30      	cbnz	r0, 8003e9a <VL53L1_ClearInterruptAndStartMeasurement+0x7c>
		Status = VL53L1_stop_range(Dev);
 8003e4c:	4620      	mov	r0, r4
 8003e4e:	f000 fc09 	bl	8004664 <VL53L1_stop_range>
	if (Status == VL53L1_ERROR_NONE)
 8003e52:	bb10      	cbnz	r0, 8003e9a <VL53L1_ClearInterruptAndStartMeasurement+0x7c>
		Status = VL53L1_WaitUs(Dev, 500);
 8003e54:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003e58:	4620      	mov	r0, r4
 8003e5a:	f009 fb8d 	bl	800d578 <VL53L1_WaitUs>
	if (Status == VL53L1_ERROR_NONE) {
 8003e5e:	b9e0      	cbnz	r0, 8003e9a <VL53L1_ClearInterruptAndStartMeasurement+0x7c>
		Status = SetPresetMode(Dev,
 8003e60:	6963      	ldr	r3, [r4, #20]
 8003e62:	462a      	mov	r2, r5
 8003e64:	4631      	mov	r1, r6
 8003e66:	4620      	mov	r0, r4
 8003e68:	f7ff fd22 	bl	80038b0 <SetPresetMode>
	if (Status == VL53L1_ERROR_NONE) {
 8003e6c:	b9a8      	cbnz	r0, 8003e9a <VL53L1_ClearInterruptAndStartMeasurement+0x7c>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8003e6e:	9b01      	ldr	r3, [sp, #4]
 8003e70:	9a02      	ldr	r2, [sp, #8]
 8003e72:	9903      	ldr	r1, [sp, #12]
 8003e74:	4620      	mov	r0, r4
 8003e76:	f000 f8dc 	bl	8004032 <VL53L1_set_timeouts_us>
		if (Status == VL53L1_ERROR_NONE)
 8003e7a:	b970      	cbnz	r0, 8003e9a <VL53L1_ClearInterruptAndStartMeasurement+0x7c>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 8003e7c:	9b01      	ldr	r3, [sp, #4]
 8003e7e:	6123      	str	r3, [r4, #16]
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 8003e80:	4669      	mov	r1, sp
 8003e82:	4620      	mov	r0, r4
 8003e84:	f000 f939 	bl	80040fa <VL53L1_set_user_zone>
	if (Status == VL53L1_ERROR_NONE) {
 8003e88:	b938      	cbnz	r0, 8003e9a <VL53L1_ClearInterruptAndStartMeasurement+0x7c>
		Status = VL53L1_init_and_start_range(
 8003e8a:	2206      	movs	r2, #6
 8003e8c:	78a1      	ldrb	r1, [r4, #2]
 8003e8e:	4620      	mov	r0, r4
 8003e90:	f000 fb0e 	bl	80044b0 <VL53L1_init_and_start_range>
	if (Status == VL53L1_ERROR_NONE)
 8003e94:	b908      	cbnz	r0, 8003e9a <VL53L1_ClearInterruptAndStartMeasurement+0x7c>
		VL53L1DevDataSet(Dev,
 8003e96:	f884 537e 	strb.w	r5, [r4, #894]	; 0x37e
			Dev,
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
}
 8003e9a:	b004      	add	sp, #16
 8003e9c:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L1_clear_interrupt_and_enable_next_range(
 8003e9e:	7881      	ldrb	r1, [r0, #2]
 8003ea0:	f000 fc30 	bl	8004704 <VL53L1_clear_interrupt_and_enable_next_range>
 8003ea4:	e7f9      	b.n	8003e9a <VL53L1_ClearInterruptAndStartMeasurement+0x7c>

08003ea6 <VL53L1_WaitMeasurementDataReady>:

	/* Note that the timeout is given by:
	 * VL53L1_RANGE_COMPLETION_POLLING_TIMEOUT_MS defined in def.h
	 */

	Status = VL53L1_poll_for_range_completion(Dev,
 8003ea6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003eaa:	f002 b805 	b.w	8005eb8 <VL53L1_poll_for_range_completion>
	...

08003eb0 <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
					      VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 8003eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eb2:	460c      	mov	r4, r1
 8003eb4:	b0a3      	sub	sp, #140	; 0x8c
 8003eb6:	4605      	mov	r5, r0

	LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 8003eb8:	221c      	movs	r2, #28
 8003eba:	21ff      	movs	r1, #255	; 0xff
 8003ebc:	4620      	mov	r0, r4
 8003ebe:	f017 f85e 	bl	801af7e <memset>
	       sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 8003ec2:	aa01      	add	r2, sp, #4
 8003ec4:	2102      	movs	r1, #2
 8003ec6:	4628      	mov	r0, r5
 8003ec8:	f000 fcd4 	bl	8004874 <VL53L1_get_device_results>
		Dev,
		VL53L1_DEVICERESULTSLEVEL_FULL,
		presults);

	if (Status == VL53L1_ERROR_NONE) {
 8003ecc:	2800      	cmp	r0, #0
 8003ece:	f040 8088 	bne.w	8003fe2 <VL53L1_GetRangingMeasurementData+0x132>
	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8003ed2:	f89d 6046 	ldrb.w	r6, [sp, #70]	; 0x46
		pRangingMeasurementData->StreamCount = presults->stream_count;
 8003ed6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003eda:	7123      	strb	r3, [r4, #4]
	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8003edc:	f006 061f 	and.w	r6, r6, #31
	pRangeData->TimeStamp = presults_data->time_stamp;
 8003ee0:	9b03      	ldr	r3, [sp, #12]

		/* in case of lite ranging or autonomous the following function
		 * returns index = 0
		 */
		presults_data = &(presults->data[0]);
		Status = SetSimpleData(Dev, 1,
 8003ee2:	f89d 1007 	ldrb.w	r1, [sp, #7]
	pRangeData->TimeStamp = presults_data->time_stamp;
 8003ee6:	6023      	str	r3, [r4, #0]
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 8003ee8:	2e07      	cmp	r6, #7
 8003eea:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 8003eee:	d039      	beq.n	8003f64 <VL53L1_GetRangingMeasurementData+0xb4>
		if (presults_data->median_range_mm < SRL)
 8003ef0:	f9bd 2044 	ldrsh.w	r2, [sp, #68]	; 0x44
 8003ef4:	f5b2 7f96 	cmp.w	r2, #300	; 0x12c
			RAS = LRAP * presults_data->median_range_mm;
 8003ef8:	bfa6      	itte	ge
 8003efa:	f641 139a 	movwge	r3, #6554	; 0x199a
 8003efe:	fb12 f203 	smulbbge	r2, r2, r3
			RAS = SRAS * 65536;
 8003f02:	f44f 12f0 	movlt.w	r2, #1966080	; 0x1e0000
			partial = partial + (RAS >> 1);
 8003f06:	4b3a      	ldr	r3, [pc, #232]	; (8003ff0 <VL53L1_GetRangingMeasurementData+0x140>)
 8003f08:	0857      	lsrs	r7, r2, #1
 8003f0a:	fb03 7300 	mla	r3, r3, r0, r7
			partial = partial / RAS;
 8003f0e:	fbb3 f3f2 	udiv	r3, r3, r2
			partial = partial * 65536;
 8003f12:	041a      	lsls	r2, r3, #16
			if (partial <= GI)
 8003f14:	4b37      	ldr	r3, [pc, #220]	; (8003ff4 <VL53L1_GetRangingMeasurementData+0x144>)
 8003f16:	429a      	cmp	r2, r3
				SRQL = GI - partial;
 8003f18:	bf94      	ite	ls
 8003f1a:	1a9b      	subls	r3, r3, r2
				SRQL = 50 * 65536;
 8003f1c:	f44f 1348 	movhi.w	r3, #3276800	; 0x320000
		finalvalue = (uint8_t)(SRQL >> 16);
 8003f20:	0c1b      	lsrs	r3, r3, #16
		returnvalue = MAX(50, MIN(100, finalvalue));
 8003f22:	2b32      	cmp	r3, #50	; 0x32
 8003f24:	d91e      	bls.n	8003f64 <VL53L1_GetRangingMeasurementData+0xb4>
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b64      	cmp	r3, #100	; 0x64
 8003f2a:	bf28      	it	cs
 8003f2c:	2364      	movcs	r3, #100	; 0x64
	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8003f2e:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 8003f32:	7163      	strb	r3, [r4, #5]
	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8003f34:	0252      	lsls	r2, r2, #9
	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8003f36:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8003f3a:	60e2      	str	r2, [r4, #12]
	pRangeData->EffectiveSpadRtnCount =
 8003f3c:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8003f40:	8222      	strh	r2, [r4, #16]
	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8003f42:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 8003f46:	8322      	strh	r2, [r4, #24]
	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8003f48:	025b      	lsls	r3, r3, #9
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8003f4a:	0240      	lsls	r0, r0, #9
	pRangeData->RangeFractionalPart = 0;
 8003f4c:	2200      	movs	r2, #0
	switch (device_status) {
 8003f4e:	290d      	cmp	r1, #13
		= SignalRate;
 8003f50:	60a3      	str	r3, [r4, #8]
	pRangeData->SigmaMilliMeter = TempFix1616;
 8003f52:	6160      	str	r0, [r4, #20]
	pRangeData->RangeFractionalPart = 0;
 8003f54:	76a2      	strb	r2, [r4, #26]
	switch (device_status) {
 8003f56:	d00b      	beq.n	8003f70 <VL53L1_GetRangingMeasurementData+0xc0>
 8003f58:	d806      	bhi.n	8003f68 <VL53L1_GetRangingMeasurementData+0xb8>
 8003f5a:	3901      	subs	r1, #1
 8003f5c:	2902      	cmp	r1, #2
 8003f5e:	d805      	bhi.n	8003f6c <VL53L1_GetRangingMeasurementData+0xbc>
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 8003f60:	2205      	movs	r2, #5
 8003f62:	e003      	b.n	8003f6c <VL53L1_GetRangingMeasurementData+0xbc>
		returnvalue = 50;
 8003f64:	2332      	movs	r3, #50	; 0x32
 8003f66:	e7e2      	b.n	8003f2e <VL53L1_GetRangingMeasurementData+0x7e>
	switch (device_status) {
 8003f68:	2911      	cmp	r1, #17
 8003f6a:	d0f9      	beq.n	8003f60 <VL53L1_GetRangingMeasurementData+0xb0>
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8003f6c:	76e2      	strb	r2, [r4, #27]
 8003f6e:	e000      	b.n	8003f72 <VL53L1_GetRangingMeasurementData+0xc2>
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 8003f70:	76e1      	strb	r1, [r4, #27]
	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 8003f72:	7ee2      	ldrb	r2, [r4, #27]
 8003f74:	b93a      	cbnz	r2, 8003f86 <VL53L1_GetRangingMeasurementData+0xd6>
 8003f76:	1f32      	subs	r2, r6, #4
 8003f78:	b2d2      	uxtb	r2, r2
 8003f7a:	2a0f      	cmp	r2, #15
 8003f7c:	bf96      	itet	ls
 8003f7e:	491e      	ldrls	r1, [pc, #120]	; (8003ff8 <VL53L1_GetRangingMeasurementData+0x148>)
 8003f80:	22ff      	movhi	r2, #255	; 0xff
 8003f82:	5c8a      	ldrbls	r2, [r1, r2]
		pRangeData->RangeStatus =
 8003f84:	76e2      	strb	r2, [r4, #27]
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8003f86:	f8c5 0390 	str.w	r0, [r5, #912]	; 0x390
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8003f8a:	f8c5 3394 	str.w	r3, [r5, #916]	; 0x394
	VL53L1_GetLimitCheckValue(Dev,
 8003f8e:	466a      	mov	r2, sp
 8003f90:	2100      	movs	r1, #0
 8003f92:	4628      	mov	r0, r5
 8003f94:	f7ff fedf 	bl	8003d56 <VL53L1_GetLimitCheckValue>
	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 8003f98:	f895 3384 	ldrb.w	r3, [r5, #900]	; 0x384
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d122      	bne.n	8003fe6 <VL53L1_GetRangingMeasurementData+0x136>
 8003fa0:	1fb2      	subs	r2, r6, #6
 8003fa2:	4253      	negs	r3, r2
 8003fa4:	4153      	adcs	r3, r2
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8003fa6:	f885 3386 	strb.w	r3, [r5, #902]	; 0x386
	VL53L1_GetLimitCheckValue(Dev,
 8003faa:	466a      	mov	r2, sp
 8003fac:	2101      	movs	r1, #1
 8003fae:	4628      	mov	r0, r5
 8003fb0:	f7ff fed1 	bl	8003d56 <VL53L1_GetLimitCheckValue>
	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 8003fb4:	f895 3385 	ldrb.w	r3, [r5, #901]	; 0x385
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d116      	bne.n	8003fea <VL53L1_GetRangingMeasurementData+0x13a>
 8003fbc:	1f33      	subs	r3, r6, #4
 8003fbe:	425e      	negs	r6, r3
 8003fc0:	415e      	adcs	r6, r3
 8003fc2:	f885 6387 	strb.w	r6, [r5, #903]	; 0x387
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8003fc6:	7ee3      	ldrb	r3, [r4, #27]
 8003fc8:	b953      	cbnz	r3, 8003fe0 <VL53L1_GetRangingMeasurementData+0x130>
	Range = pRangeData->RangeMilliMeter;
 8003fca:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8003fce:	2a00      	cmp	r2, #0
 8003fd0:	da06      	bge.n	8003fe0 <VL53L1_GetRangingMeasurementData+0x130>
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 8003fd2:	490a      	ldr	r1, [pc, #40]	; (8003ffc <VL53L1_GetRangingMeasurementData+0x14c>)
 8003fd4:	6849      	ldr	r1, [r1, #4]
 8003fd6:	428a      	cmp	r2, r1
			pRangeData->RangeStatus =
 8003fd8:	bfba      	itte	lt
 8003fda:	230e      	movlt	r3, #14
 8003fdc:	76e3      	strblt	r3, [r4, #27]
			pRangeData->RangeMilliMeter = 0;
 8003fde:	8323      	strhge	r3, [r4, #24]
		Status = SetSimpleData(Dev, 1,
 8003fe0:	2000      	movs	r0, #0
				       pRangingMeasurementData);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8003fe2:	b023      	add	sp, #140	; 0x8c
 8003fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	e7dd      	b.n	8003fa6 <VL53L1_GetRangingMeasurementData+0xf6>
	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 8003fea:	2600      	movs	r6, #0
 8003fec:	e7e9      	b.n	8003fc2 <VL53L1_GetRangingMeasurementData+0x112>
 8003fee:	bf00      	nop
 8003ff0:	0030cccd 	.word	0x0030cccd
 8003ff4:	0075b333 	.word	0x0075b333
 8003ff8:	0801d77e 	.word	0x0801d77e
 8003ffc:	20001454 	.word	0x20001454

08004000 <VL53L1_set_inter_measurement_period_ms>:
	VL53L1_Error status = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8004000:	f8b0 32b4 	ldrh.w	r3, [r0, #692]	; 0x2b4
 8004004:	b913      	cbnz	r3, 800400c <VL53L1_set_inter_measurement_period_ms+0xc>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004006:	f06f 000e 	mvn.w	r0, #14
 800400a:	4770      	bx	lr

	if (status == VL53L1_ERROR_NONE) {
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 800400c:	6141      	str	r1, [r0, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
 800400e:	4359      	muls	r1, r3
		pdev->tim_cfg.system__intermeasurement_period = \
 8004010:	f8c0 11ac 	str.w	r1, [r0, #428]	; 0x1ac
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8004014:	2000      	movs	r0, #0
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8004016:	4770      	bx	lr

08004018 <VL53L1_get_inter_measurement_period_ms>:
	VL53L1_Error status = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8004018:	f8b0 22b4 	ldrh.w	r2, [r0, #692]	; 0x2b4
 800401c:	b912      	cbnz	r2, 8004024 <VL53L1_get_inter_measurement_period_ms+0xc>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800401e:	f06f 000e 	mvn.w	r0, #14
 8004022:	4770      	bx	lr

	if (status == VL53L1_ERROR_NONE)
		*pinter_measurement_period_ms = \
			pdev->tim_cfg.system__intermeasurement_period /
 8004024:	f8d0 31ac 	ldr.w	r3, [r0, #428]	; 0x1ac
 8004028:	fbb3 f3f2 	udiv	r3, r3, r2
	VL53L1_Error status = VL53L1_ERROR_NONE;
 800402c:	2000      	movs	r0, #0
		*pinter_measurement_period_ms = \
 800402e:	600b      	str	r3, [r1, #0]


	LOG_FUNCTION_END(status);

	return status;
}
 8004030:	4770      	bx	lr

08004032 <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV Dev,
	uint32_t phasecal_config_timeout_us,
	uint32_t mm_config_timeout_us,
	uint32_t range_config_timeout_us)
{
 8004032:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004034:	460d      	mov	r5, r1
 8004036:	4611      	mov	r1, r2
 8004038:	461a      	mov	r2, r3
	VL53L1_LLDriverData_t *pdev =
		VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 800403a:	f8b0 315e 	ldrh.w	r3, [r0, #350]	; 0x15e
 800403e:	b91b      	cbnz	r3, 8004048 <VL53L1_set_timeouts_us+0x16>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004040:	f06f 000e 	mvn.w	r0, #14
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8004044:	b003      	add	sp, #12
 8004046:	bd30      	pop	{r4, r5, pc}
		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8004048:	6085      	str	r5, [r0, #8]
		pdev->mm_config_timeout_us = mm_config_timeout_us;
 800404a:	60c1      	str	r1, [r0, #12]
		pdev->range_config_timeout_us = range_config_timeout_us;
 800404c:	6102      	str	r2, [r0, #16]
			VL53L1_calc_timeout_register_values(
 800404e:	f500 74ce 	add.w	r4, r0, #412	; 0x19c
 8004052:	f500 70c2 	add.w	r0, r0, #388	; 0x184
		status =
 8004056:	9000      	str	r0, [sp, #0]
 8004058:	9401      	str	r4, [sp, #4]
 800405a:	4628      	mov	r0, r5
 800405c:	f001 f94d 	bl	80052fa <VL53L1_calc_timeout_register_values>
	return status;
 8004060:	e7f0      	b.n	8004044 <VL53L1_set_timeouts_us+0x12>

08004062 <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t                        *prange_config_timeout_us)
{
 8004062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004066:	4604      	mov	r4, r0
	uint32_t macro_period_us = 0;
	uint16_t timeout_encoded = 0;

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8004068:	f8b0 015e 	ldrh.w	r0, [r0, #350]	; 0x15e
{
 800406c:	460f      	mov	r7, r1
 800406e:	4690      	mov	r8, r2
 8004070:	461e      	mov	r6, r3
	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8004072:	b918      	cbnz	r0, 800407c <VL53L1_get_timeouts_us+0x1a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004074:	f06f 000e 	mvn.w	r0, #14
 8004078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (status == VL53L1_ERROR_NONE) {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
 800407c:	f894 11a2 	ldrb.w	r1, [r4, #418]	; 0x1a2
 8004080:	f001 f8d6 	bl	8005230 <VL53L1_calc_macro_period_us>
 8004084:	4605      	mov	r5, r0
				pdev->tim_cfg.range_config__vcsel_period_a);

		/*  Get Phase Cal Timing A timeout */

		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
 8004086:	4601      	mov	r1, r0
 8004088:	f894 018b 	ldrb.w	r0, [r4, #395]	; 0x18b
 800408c:	f001 f904 	bl	8005298 <VL53L1_calc_timeout_us>
		*pphasecal_config_timeout_us =
 8004090:	6038      	str	r0, [r7, #0]
				(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
				macro_period_us);

		/*  Get MM Timing A timeout */

		timeout_encoded =
 8004092:	f894 319c 	ldrb.w	r3, [r4, #412]	; 0x19c
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
		timeout_encoded = (timeout_encoded << 8) +
				  (uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8004096:	f894 019d 	ldrb.w	r0, [r4, #413]	; 0x19d
		timeout_encoded = (timeout_encoded << 8) +
 800409a:	eb00 2003 	add.w	r0, r0, r3, lsl #8

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 800409e:	4629      	mov	r1, r5
 80040a0:	b280      	uxth	r0, r0
 80040a2:	f001 f91e 	bl	80052e2 <VL53L1_calc_decoded_timeout_us>
		*pmm_config_timeout_us =
 80040a6:	f8c8 0000 	str.w	r0, [r8]
				timeout_encoded,
				macro_period_us);

		/* Get Range Timing A timeout */

		timeout_encoded =
 80040aa:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
		timeout_encoded = (timeout_encoded << 8) +
				  (uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 80040ae:	f894 01a1 	ldrb.w	r0, [r4, #417]	; 0x1a1
		timeout_encoded = (timeout_encoded << 8) +
 80040b2:	eb00 2003 	add.w	r0, r0, r3, lsl #8

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 80040b6:	4629      	mov	r1, r5
 80040b8:	b280      	uxth	r0, r0
 80040ba:	f001 f912 	bl	80052e2 <VL53L1_calc_decoded_timeout_us>
		*prange_config_timeout_us =
 80040be:	6030      	str	r0, [r6, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	60a3      	str	r3, [r4, #8]
		pdev->mm_config_timeout_us = *pmm_config_timeout_us;
 80040c4:	f8d8 3000 	ldr.w	r3, [r8]
 80040c8:	60e3      	str	r3, [r4, #12]
		pdev->range_config_timeout_us = *prange_config_timeout_us;
 80040ca:	6833      	ldr	r3, [r6, #0]
 80040cc:	6123      	str	r3, [r4, #16]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 80040ce:	2000      	movs	r0, #0
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80040d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080040d4 <VL53L1_get_sequence_config_bit>:
	VL53L1_LLDriverData_t *pdev =
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t bit_mask = 0x01;

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 80040d4:	2907      	cmp	r1, #7
 80040d6:	d80d      	bhi.n	80040f4 <VL53L1_get_sequence_config_bit+0x20>
 80040d8:	2301      	movs	r3, #1
		if (bit_id > 0) {
 80040da:	b101      	cbz	r1, 80040de <VL53L1_get_sequence_config_bit+0xa>
			bit_mask = 0x01 << bit_id;
 80040dc:	408b      	lsls	r3, r1
		}

		*pvalue =
 80040de:	f890 01c5 	ldrb.w	r0, [r0, #453]	; 0x1c5
 80040e2:	4018      	ands	r0, r3
			pdev->dyn_cfg.system__sequence_config & bit_mask;

		if (bit_id > 0) {
 80040e4:	b911      	cbnz	r1, 80040ec <VL53L1_get_sequence_config_bit+0x18>
		*pvalue =
 80040e6:	7010      	strb	r0, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 80040e8:	2000      	movs	r0, #0
 80040ea:	4770      	bx	lr
			*pvalue = *pvalue >> bit_id;
 80040ec:	fa40 f101 	asr.w	r1, r0, r1
 80040f0:	7011      	strb	r1, [r2, #0]
 80040f2:	e7f9      	b.n	80040e8 <VL53L1_get_sequence_config_bit+0x14>
		}
	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 80040f4:	f06f 0003 	mvn.w	r0, #3
	}

	return status;
}
 80040f8:	4770      	bx	lr

080040fa <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 80040fa:	b538      	push	{r3, r4, r5, lr}
 80040fc:	460c      	mov	r4, r1
 80040fe:	4605      	mov	r5, r0
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 8004100:	f200 12c3 	addw	r2, r0, #451	; 0x1c3
 8004104:	7809      	ldrb	r1, [r1, #0]
 8004106:	7860      	ldrb	r0, [r4, #1]
 8004108:	f001 f936 	bl	8005378 <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 800410c:	78a0      	ldrb	r0, [r4, #2]
 800410e:	78e1      	ldrb	r1, [r4, #3]
 8004110:	f505 72e2 	add.w	r2, r5, #452	; 0x1c4
 8004114:	f001 f941 	bl	800539a <VL53L1_encode_zone_size>
	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
}
 8004118:	2000      	movs	r0, #0
 800411a:	bd38      	pop	{r3, r4, r5, pc}

0800411c <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 800411c:	b538      	push	{r3, r4, r5, lr}
 800411e:	4605      	mov	r5, r0
 8004120:	460c      	mov	r4, r1
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 8004122:	460a      	mov	r2, r1
 8004124:	f890 01c3 	ldrb.w	r0, [r0, #451]	; 0x1c3
 8004128:	3101      	adds	r1, #1
 800412a:	f001 f9c7 	bl	80054bc <VL53L1_decode_row_col>
		pdev->dyn_cfg.roi_config__user_roi_centre_spad,
		&(puser_zone->y_centre),
		&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 800412e:	f895 01c4 	ldrb.w	r0, [r5, #452]	; 0x1c4
 8004132:	1ce2      	adds	r2, r4, #3
 8004134:	1ca1      	adds	r1, r4, #2
 8004136:	f001 f92a 	bl	800538e <VL53L1_decode_zone_size>
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
}
 800413a:	2000      	movs	r0, #0
 800413c:	bd38      	pop	{r3, r4, r5, pc}

0800413e <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 800413e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004140:	460c      	mov	r4, r1
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t x = 0;
 8004142:	2500      	movs	r5, #0
{
 8004144:	4606      	mov	r6, r0
	uint8_t xy_size = 0;

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 8004146:	f10d 0206 	add.w	r2, sp, #6
 800414a:	f10d 0107 	add.w	r1, sp, #7
 800414e:	f890 022a 	ldrb.w	r0, [r0, #554]	; 0x22a
	uint8_t x = 0;
 8004152:	f88d 5006 	strb.w	r5, [sp, #6]
	uint8_t y = 0;
 8004156:	f88d 5007 	strb.w	r5, [sp, #7]
	VL53L1_decode_row_col(
 800415a:	f001 f9af 	bl	80054bc <VL53L1_decode_row_col>
		pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
		&y,
		&x);

	pmm_roi->x_centre = x;
 800415e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004162:	7023      	strb	r3, [r4, #0]
	pmm_roi->y_centre = y;
 8004164:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004168:	7063      	strb	r3, [r4, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 800416a:	f896 322b 	ldrb.w	r3, [r6, #555]	; 0x22b
	pmm_roi->width = xy_size & 0x0F;

	LOG_FUNCTION_END(status);

	return status;
}
 800416e:	4628      	mov	r0, r5
	pmm_roi->height = xy_size >> 4;
 8004170:	091a      	lsrs	r2, r3, #4
	pmm_roi->width = xy_size & 0x0F;
 8004172:	f003 030f 	and.w	r3, r3, #15
	pmm_roi->height = xy_size >> 4;
 8004176:	70e2      	strb	r2, [r4, #3]
	pmm_roi->width = xy_size & 0x0F;
 8004178:	70a3      	strb	r3, [r4, #2]
}
 800417a:	b002      	add	sp, #8
 800417c:	bd70      	pop	{r4, r5, r6, pc}

0800417e <VL53L1_read_p2p_data>:
{
 800417e:	b538      	push	{r3, r4, r5, lr}
		status = VL53L1_get_static_nvm_managed(
 8004180:	f500 71ac 	add.w	r1, r0, #344	; 0x158
{
 8004184:	4604      	mov	r4, r0
		status = VL53L1_get_static_nvm_managed(
 8004186:	f001 fa06 	bl	8005596 <VL53L1_get_static_nvm_managed>
	if (status == VL53L1_ERROR_NONE)
 800418a:	b9b8      	cbnz	r0, 80041bc <VL53L1_read_p2p_data+0x3e>
		status = VL53L1_get_customer_nvm_managed(
 800418c:	f104 0142 	add.w	r1, r4, #66	; 0x42
 8004190:	4620      	mov	r0, r4
 8004192:	f001 faad 	bl	80056f0 <VL53L1_get_customer_nvm_managed>
	if (status == VL53L1_ERROR_NONE) {
 8004196:	b988      	cbnz	r0, 80041bc <VL53L1_read_p2p_data+0x3e>
		status = VL53L1_get_nvm_copy_data(
 8004198:	f504 75fd 	add.w	r5, r4, #506	; 0x1fa
 800419c:	4629      	mov	r1, r5
 800419e:	4620      	mov	r0, r4
 80041a0:	f001 fe5f 	bl	8005e62 <VL53L1_get_nvm_copy_data>
		if (status == VL53L1_ERROR_NONE)
 80041a4:	b950      	cbnz	r0, 80041bc <VL53L1_read_p2p_data+0x3e>
			VL53L1_copy_rtn_good_spads_to_buffer(
 80041a6:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
 80041aa:	4628      	mov	r0, r5
 80041ac:	f000 ffa7 	bl	80050fe <VL53L1_copy_rtn_good_spads_to_buffer>
		status =
 80041b0:	f504 722d 	add.w	r2, r4, #692	; 0x2b4
 80041b4:	21de      	movs	r1, #222	; 0xde
 80041b6:	4620      	mov	r0, r4
 80041b8:	f009 f9c0 	bl	800d53c <VL53L1_RdWord>
	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 80041bc:	f8b4 315e 	ldrh.w	r3, [r4, #350]	; 0x15e
 80041c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 80041c4:	bf3c      	itt	cc
 80041c6:	f64b 43cc 	movwcc	r3, #48332	; 0xbccc
 80041ca:	f8a4 315e 	strhcc.w	r3, [r4, #350]	; 0x15e
	if (status == VL53L1_ERROR_NONE)
 80041ce:	b920      	cbnz	r0, 80041da <VL53L1_read_p2p_data+0x5c>
		status =
 80041d0:	f104 019e 	add.w	r1, r4, #158	; 0x9e
 80041d4:	4620      	mov	r0, r4
 80041d6:	f7ff ffb2 	bl	800413e <VL53L1_get_mode_mitigation_roi>
	if (pdev->optical_centre.x_centre == 0 &&
 80041da:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
 80041de:	b94b      	cbnz	r3, 80041f4 <VL53L1_read_p2p_data+0x76>
			pdev->mm_roi.x_centre << 4;
 80041e0:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
 80041e4:	011b      	lsls	r3, r3, #4
		pdev->optical_centre.x_centre =
 80041e6:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
			pdev->mm_roi.y_centre << 4;
 80041ea:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
 80041ee:	011b      	lsls	r3, r3, #4
		pdev->optical_centre.y_centre =
 80041f0:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
}
 80041f4:	bd38      	pop	{r3, r4, r5, pc}

080041f6 <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 80041f6:	b530      	push	{r4, r5, lr}
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 80041f8:	2908      	cmp	r1, #8
{
 80041fa:	9d03      	ldr	r5, [sp, #12]
 80041fc:	9c04      	ldr	r4, [sp, #16]
	switch (device_preset_mode) {
 80041fe:	d810      	bhi.n	8004222 <VL53L1_get_preset_mode_timing_cfg+0x2c>
 8004200:	2906      	cmp	r1, #6
 8004202:	d225      	bcs.n	8004250 <VL53L1_get_preset_mode_timing_cfg+0x5a>
 8004204:	b191      	cbz	r1, 800422c <VL53L1_get_preset_mode_timing_cfg+0x36>
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_lite_mcps;
 8004206:	f8b0 10ca 	ldrh.w	r1, [r0, #202]	; 0xca
		*pdss_config__target_total_rate_mcps =
 800420a:	8011      	strh	r1, [r2, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800420c:	f8d0 20d0 	ldr.w	r2, [r0, #208]	; 0xd0
		*pphasecal_config_timeout_us =
 8004210:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_lite_us;
 8004212:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
		*pmm_config_timeout_us =
 8004216:	602b      	str	r3, [r5, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_lite_us;
 8004218:	f8d0 30e4 	ldr.w	r3, [r0, #228]	; 0xe4
			pdev->tuning_parms.tp_dss_target_timed_mcps;
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_lpa_us;
		*prange_config_timeout_us =
 800421c:	6023      	str	r3, [r4, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 800421e:	2000      	movs	r0, #0
			pdev->tuning_parms.tp_range_timeout_lpa_us;
		break;
 8004220:	bd30      	pop	{r4, r5, pc}
	switch (device_preset_mode) {
 8004222:	2912      	cmp	r1, #18
 8004224:	d014      	beq.n	8004250 <VL53L1_get_preset_mode_timing_cfg+0x5a>
 8004226:	d804      	bhi.n	8004232 <VL53L1_get_preset_mode_timing_cfg+0x3c>
 8004228:	2911      	cmp	r1, #17
 800422a:	d0ec      	beq.n	8004206 <VL53L1_get_preset_mode_timing_cfg+0x10>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800422c:	f06f 0003 	mvn.w	r0, #3
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8004230:	bd30      	pop	{r4, r5, pc}
	switch (device_preset_mode) {
 8004232:	3924      	subs	r1, #36	; 0x24
 8004234:	2902      	cmp	r1, #2
 8004236:	d8f9      	bhi.n	800422c <VL53L1_get_preset_mode_timing_cfg+0x36>
			pdev->tuning_parms.tp_dss_target_timed_mcps;
 8004238:	f8b0 10cc 	ldrh.w	r1, [r0, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 800423c:	8011      	strh	r1, [r2, #0]
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800423e:	f8d0 20d4 	ldr.w	r2, [r0, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 8004242:	601a      	str	r2, [r3, #0]
			pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8004244:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
		*pmm_config_timeout_us =
 8004248:	602b      	str	r3, [r5, #0]
			pdev->tuning_parms.tp_range_timeout_lpa_us;
 800424a:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 800424e:	e7e5      	b.n	800421c <VL53L1_get_preset_mode_timing_cfg+0x26>
			pdev->tuning_parms.tp_dss_target_timed_mcps;
 8004250:	f8b0 10cc 	ldrh.w	r1, [r0, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 8004254:	8011      	strh	r1, [r2, #0]
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8004256:	f8d0 20d4 	ldr.w	r2, [r0, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 800425a:	601a      	str	r2, [r3, #0]
			pdev->tuning_parms.tp_mm_timeout_timed_us;
 800425c:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
		*pmm_config_timeout_us =
 8004260:	602b      	str	r3, [r5, #0]
			pdev->tuning_parms.tp_range_timeout_timed_us;
 8004262:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
 8004266:	e7d9      	b.n	800421c <VL53L1_get_preset_mode_timing_cfg+0x26>

08004268 <VL53L1_set_preset_mode>:
	uint16_t dss_config__target_total_rate_mcps,
	uint32_t phasecal_config_timeout_us,
	uint32_t mm_config_timeout_us,
	uint32_t range_config_timeout_us,
	uint32_t inter_measurement_period_ms)
{
 8004268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800426c:	b08b      	sub	sp, #44	; 0x2c
 800426e:	4604      	mov	r4, r0
 8004270:	9307      	str	r3, [sp, #28]
 8004272:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004274:	9304      	str	r3, [sp, #16]
 8004276:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004278:	9305      	str	r3, [sp, #20]
 800427a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800427c:	9306      	str	r3, [sp, #24]
		VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic = &(pdev->stat_cfg);
	VL53L1_general_config_t       *pgeneral = &(pdev->gen_cfg);
	VL53L1_timing_config_t        *ptiming = &(pdev->tim_cfg);
	VL53L1_dynamic_config_t       *pdynamic = &(pdev->dyn_cfg);
 800427e:	f500 73da 	add.w	r3, r0, #436	; 0x1b4
 8004282:	9308      	str	r3, [sp, #32]

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode = device_preset_mode;
	pdev->mm_config_timeout_us = mm_config_timeout_us;
 8004284:	9b04      	ldr	r3, [sp, #16]
	pdev->preset_mode = device_preset_mode;
 8004286:	7061      	strb	r1, [r4, #1]
	pdev->mm_config_timeout_us = mm_config_timeout_us;
 8004288:	60c3      	str	r3, [r0, #12]
	pdev->range_config_timeout_us = range_config_timeout_us;
 800428a:	9b05      	ldr	r3, [sp, #20]
 800428c:	6103      	str	r3, [r0, #16]
{
 800428e:	4688      	mov	r8, r1
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8004290:	9b06      	ldr	r3, [sp, #24]
 8004292:	6143      	str	r3, [r0, #20]
{
 8004294:	4691      	mov	r9, r2

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 8004296:	2103      	movs	r1, #3
	VL53L1_timing_config_t        *ptiming = &(pdev->tim_cfg);
 8004298:	f500 72ce 	add.w	r2, r0, #412	; 0x19c
		Dev,
		VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 800429c:	f108 38ff 	add.w	r8, r8, #4294967295
	VL53L1_timing_config_t        *ptiming = &(pdev->tim_cfg);
 80042a0:	9209      	str	r2, [sp, #36]	; 0x24
	VL53L1_static_config_t        *pstatic = &(pdev->stat_cfg);
 80042a2:	f500 75b2 	add.w	r5, r0, #356	; 0x164
	VL53L1_general_config_t       *pgeneral = &(pdev->gen_cfg);
 80042a6:	f500 76c2 	add.w	r6, r0, #388	; 0x184
	VL53L1_system_control_t       *psystem = &(pdev->sys_ctrl);
 80042aa:	f500 77e4 	add.w	r7, r0, #456	; 0x1c8
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 80042ae:	f100 0aa4 	add.w	sl, r0, #164	; 0xa4
	VL53L1_low_power_auto_data_t  *plpadata =
 80042b2:	f500 7b39 	add.w	fp, r0, #740	; 0x2e4
	VL53L1_init_ll_driver_state(
 80042b6:	f000 fe5f 	bl	8004f78 <VL53L1_init_ll_driver_state>
	switch (device_preset_mode) {
 80042ba:	9b08      	ldr	r3, [sp, #32]
 80042bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042be:	f1b8 0f25 	cmp.w	r8, #37	; 0x25
 80042c2:	f200 8084 	bhi.w	80043ce <VL53L1_set_preset_mode+0x166>
 80042c6:	e8df f008 	tbb	[pc, r8]
 80042ca:	2e13      	.short	0x2e13
 80042cc:	4a433c35 	.word	0x4a433c35
 80042d0:	82825851 	.word	0x82825851
 80042d4:	82828282 	.word	0x82828282
 80042d8:	665f8282 	.word	0x665f8282
 80042dc:	82828282 	.word	0x82828282
 80042e0:	82828282 	.word	0x82828282
 80042e4:	82828282 	.word	0x82828282
 80042e8:	82828282 	.word	0x82828282
 80042ec:	7b746d82 	.word	0x7b746d82
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 80042f0:	e88d 0480 	stmia.w	sp, {r7, sl}
 80042f4:	4631      	mov	r1, r6
 80042f6:	4628      	mov	r0, r5
 80042f8:	f000 fc7c 	bl	8004bf4 <VL53L1_preset_mode_standard_ranging>
		break;
	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 80042fc:	2800      	cmp	r0, #0
 80042fe:	d168      	bne.n	80043d2 <VL53L1_set_preset_mode+0x16a>
		pstatic->dss_config__target_total_rate_mcps =
 8004300:	f8a4 9164 	strh.w	r9, [r4, #356]	; 0x164
			dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps =
 8004304:	f8a4 9018 	strh.w	r9, [r4, #24]
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
		status =
 8004308:	9b05      	ldr	r3, [sp, #20]
 800430a:	9a04      	ldr	r2, [sp, #16]
 800430c:	9907      	ldr	r1, [sp, #28]
 800430e:	4620      	mov	r0, r4
 8004310:	f7ff fe8f 	bl	8004032 <VL53L1_set_timeouts_us>
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 8004314:	2800      	cmp	r0, #0
 8004316:	d15c      	bne.n	80043d2 <VL53L1_set_preset_mode+0x16a>
		status =
 8004318:	9906      	ldr	r1, [sp, #24]
 800431a:	4620      	mov	r0, r4
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
}
 800431c:	b00b      	add	sp, #44	; 0x2c
 800431e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		status =
 8004322:	f7ff be6d 	b.w	8004000 <VL53L1_set_inter_measurement_period_ms>
		status = VL53L1_preset_mode_standard_ranging_short_range(
 8004326:	e88d 0480 	stmia.w	sp, {r7, sl}
 800432a:	4631      	mov	r1, r6
 800432c:	4628      	mov	r0, r5
 800432e:	f000 fd05 	bl	8004d3c <VL53L1_preset_mode_standard_ranging_short_range>
		break;
 8004332:	e7e3      	b.n	80042fc <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_standard_ranging_long_range(
 8004334:	e88d 0480 	stmia.w	sp, {r7, sl}
 8004338:	4631      	mov	r1, r6
 800433a:	4628      	mov	r0, r5
 800433c:	f000 fd1c 	bl	8004d78 <VL53L1_preset_mode_standard_ranging_long_range>
		break;
 8004340:	e7dc      	b.n	80042fc <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 8004342:	e88d 0480 	stmia.w	sp, {r7, sl}
 8004346:	4631      	mov	r1, r6
 8004348:	4628      	mov	r0, r5
 800434a:	f000 fd33 	bl	8004db4 <VL53L1_preset_mode_standard_ranging_mm1_cal>
		break;
 800434e:	e7d5      	b.n	80042fc <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 8004350:	e88d 0480 	stmia.w	sp, {r7, sl}
 8004354:	4631      	mov	r1, r6
 8004356:	4628      	mov	r0, r5
 8004358:	f000 fd3c 	bl	8004dd4 <VL53L1_preset_mode_standard_ranging_mm2_cal>
		break;
 800435c:	e7ce      	b.n	80042fc <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_timed_ranging(
 800435e:	e88d 0480 	stmia.w	sp, {r7, sl}
 8004362:	4631      	mov	r1, r6
 8004364:	4628      	mov	r0, r5
 8004366:	f000 fd45 	bl	8004df4 <VL53L1_preset_mode_timed_ranging>
		break;
 800436a:	e7c7      	b.n	80042fc <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_timed_ranging_short_range(
 800436c:	e88d 0480 	stmia.w	sp, {r7, sl}
 8004370:	4631      	mov	r1, r6
 8004372:	4628      	mov	r0, r5
 8004374:	f000 fd59 	bl	8004e2a <VL53L1_preset_mode_timed_ranging_short_range>
		break;
 8004378:	e7c0      	b.n	80042fc <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_timed_ranging_long_range(
 800437a:	e88d 0480 	stmia.w	sp, {r7, sl}
 800437e:	4631      	mov	r1, r6
 8004380:	4628      	mov	r0, r5
 8004382:	f000 fd6e 	bl	8004e62 <VL53L1_preset_mode_timed_ranging_long_range>
		break;
 8004386:	e7b9      	b.n	80042fc <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_olt(
 8004388:	e88d 0480 	stmia.w	sp, {r7, sl}
 800438c:	4631      	mov	r1, r6
 800438e:	4628      	mov	r0, r5
 8004390:	f000 fdd9 	bl	8004f46 <VL53L1_preset_mode_olt>
		break;
 8004394:	e7b2      	b.n	80042fc <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_singleshot_ranging(
 8004396:	e88d 0480 	stmia.w	sp, {r7, sl}
 800439a:	4631      	mov	r1, r6
 800439c:	4628      	mov	r0, r5
 800439e:	f000 fdba 	bl	8004f16 <VL53L1_preset_mode_singleshot_ranging>
		break;
 80043a2:	e7ab      	b.n	80042fc <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 80043a4:	e88d 0c80 	stmia.w	sp, {r7, sl, fp}
 80043a8:	4631      	mov	r1, r6
 80043aa:	4628      	mov	r0, r5
 80043ac:	f000 fd89 	bl	8004ec2 <VL53L1_preset_mode_low_power_auto_short_ranging>
		break;
 80043b0:	e7a4      	b.n	80042fc <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_low_power_auto_ranging(
 80043b2:	e88d 0c80 	stmia.w	sp, {r7, sl, fp}
 80043b6:	4631      	mov	r1, r6
 80043b8:	4628      	mov	r0, r5
 80043ba:	f000 fd6d 	bl	8004e98 <VL53L1_preset_mode_low_power_auto_ranging>
		break;
 80043be:	e79d      	b.n	80042fc <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 80043c0:	e88d 0c80 	stmia.w	sp, {r7, sl, fp}
 80043c4:	4631      	mov	r1, r6
 80043c6:	4628      	mov	r0, r5
 80043c8:	f000 fd90 	bl	8004eec <VL53L1_preset_mode_low_power_auto_long_ranging>
		break;
 80043cc:	e796      	b.n	80042fc <VL53L1_set_preset_mode+0x94>
		status = VL53L1_ERROR_INVALID_PARAMS;
 80043ce:	f06f 0003 	mvn.w	r0, #3
}
 80043d2:	b00b      	add	sp, #44	; 0x2c
 80043d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080043d8 <VL53L1_data_init>:
{
 80043d8:	b530      	push	{r4, r5, lr}
 80043da:	4604      	mov	r4, r0
 80043dc:	b085      	sub	sp, #20
 80043de:	460d      	mov	r5, r1
	VL53L1_init_ll_driver_state(
 80043e0:	2162      	movs	r1, #98	; 0x62
 80043e2:	f000 fdc9 	bl	8004f78 <VL53L1_init_ll_driver_state>
	pdev->preset_mode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 80043e6:	2201      	movs	r2, #1
 80043e8:	7062      	strb	r2, [r4, #1]
	pdev->offset_calibration_mode =
 80043ea:	70e2      	strb	r2, [r4, #3]
	pdev->offset_correction_mode =
 80043ec:	7122      	strb	r2, [r4, #4]
	pdev->phasecal_config_timeout_us = 1000;
 80043ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80043f2:	60a2      	str	r2, [r4, #8]
	pdev->mm_config_timeout_us = 2000;
 80043f4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80043f8:	60e2      	str	r2, [r4, #12]
	pdev->range_config_timeout_us = 13000;
 80043fa:	f243 22c8 	movw	r2, #13000	; 0x32c8
	pdev->wait_method = VL53L1_WAIT_METHOD_BLOCKING;
 80043fe:	2300      	movs	r3, #0
	pdev->range_config_timeout_us = 13000;
 8004400:	6122      	str	r2, [r4, #16]
	pdev->inter_measurement_period_ms = 100;
 8004402:	2264      	movs	r2, #100	; 0x64
	pdev->wait_method = VL53L1_WAIT_METHOD_BLOCKING;
 8004404:	7023      	strb	r3, [r4, #0]
	pdev->measurement_mode = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 8004406:	70a3      	strb	r3, [r4, #2]
	pdev->inter_measurement_period_ms = 100;
 8004408:	6162      	str	r2, [r4, #20]
	pdev->debug_mode = 0x00;
 800440a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 800440e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
	pdev->gain_cal.standard_ranging_gain_factor =
 8004412:	f240 73db 	movw	r3, #2011	; 0x7db
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8004416:	8322      	strh	r2, [r4, #24]
	pdev->gain_cal.standard_ranging_gain_factor =
 8004418:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
	VL53L1_init_version(Dev);
 800441c:	4620      	mov	r0, r4
 800441e:	f000 fd9e 	bl	8004f5e <VL53L1_init_version>
	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8004422:	b115      	cbz	r5, 800442a <VL53L1_data_init+0x52>
		status = VL53L1_read_p2p_data(Dev);
 8004424:	4620      	mov	r0, r4
 8004426:	f7ff feaa 	bl	800417e <VL53L1_read_p2p_data>
	status =
 800442a:	f504 7088 	add.w	r0, r4, #272	; 0x110
 800442e:	f000 fb3e 	bl	8004aae <VL53L1_init_refspadchar_config_struct>
	status =
 8004432:	f504 7090 	add.w	r0, r4, #288	; 0x120
 8004436:	f000 fb4c 	bl	8004ad2 <VL53L1_init_ssc_config_struct>
	status =
 800443a:	f504 7196 	add.w	r1, r4, #300	; 0x12c
 800443e:	f104 0042 	add.w	r0, r4, #66	; 0x42
 8004442:	f000 fb55 	bl	8004af0 <VL53L1_init_xtalk_config_struct>
	status =
 8004446:	f504 70a2 	add.w	r0, r4, #324	; 0x144
 800444a:	f000 fb76 	bl	8004b3a <VL53L1_init_offset_cal_config_struct>
	status =
 800444e:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
 8004452:	f000 fb84 	bl	8004b5e <VL53L1_init_tuning_parm_storage_struct>
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8004456:	f894 3160 	ldrb.w	r3, [r4, #352]	; 0x160
		status = VL53L1_set_preset_mode(
 800445a:	8b22      	ldrh	r2, [r4, #24]
 800445c:	7861      	ldrb	r1, [r4, #1]
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800445e:	f003 0303 	and.w	r3, r3, #3
 8004462:	3b80      	subs	r3, #128	; 0x80
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8004464:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
		status = VL53L1_set_preset_mode(
 8004468:	6963      	ldr	r3, [r4, #20]
 800446a:	9302      	str	r3, [sp, #8]
 800446c:	6923      	ldr	r3, [r4, #16]
 800446e:	9301      	str	r3, [sp, #4]
 8004470:	68e3      	ldr	r3, [r4, #12]
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	4620      	mov	r0, r4
 8004476:	68a3      	ldr	r3, [r4, #8]
 8004478:	f7ff fef6 	bl	8004268 <VL53L1_set_preset_mode>
 800447c:	4605      	mov	r5, r0
	VL53L1_low_power_auto_data_init(
 800447e:	4620      	mov	r0, r4
 8004480:	f000 ff8f 	bl	80053a2 <VL53L1_low_power_auto_data_init>
}
 8004484:	4628      	mov	r0, r5
 8004486:	b005      	add	sp, #20
 8004488:	bd30      	pop	{r4, r5, pc}

0800448a <VL53L1_get_lite_sigma_threshold>:
		pdev->tim_cfg.range_config__sigma_thresh;
 800448a:	f8b0 31a6 	ldrh.w	r3, [r0, #422]	; 0x1a6
	*plite_sigma =
 800448e:	800b      	strh	r3, [r1, #0]
}
 8004490:	2000      	movs	r0, #0
 8004492:	4770      	bx	lr

08004494 <VL53L1_set_lite_sigma_threshold>:
	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 8004494:	f8a0 11a6 	strh.w	r1, [r0, #422]	; 0x1a6
}
 8004498:	2000      	movs	r0, #0
 800449a:	4770      	bx	lr

0800449c <VL53L1_get_lite_min_count_rate>:
		pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 800449c:	f8b0 31a8 	ldrh.w	r3, [r0, #424]	; 0x1a8
	*plite_mincountrate =
 80044a0:	800b      	strh	r3, [r1, #0]
}
 80044a2:	2000      	movs	r0, #0
 80044a4:	4770      	bx	lr

080044a6 <VL53L1_set_lite_min_count_rate>:
	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 80044a6:	f8a0 11a8 	strh.w	r1, [r0, #424]	; 0x1a8
}
 80044aa:	2000      	movs	r0, #0
 80044ac:	4770      	bx	lr
	...

080044b0 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV Dev,
	uint8_t measurement_mode,
	VL53L1_DeviceConfigLevel device_config_level)
{
 80044b0:	b570      	push	{r4, r5, r6, lr}
	pdev->measurement_mode = measurement_mode;

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 80044b2:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
	pdev->measurement_mode = measurement_mode;
 80044b6:	7081      	strb	r1, [r0, #2]
		(psystem->system__mode_start &
 80044b8:	f003 030f 	and.w	r3, r3, #15
		 VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 80044bc:	4319      	orrs	r1, r3
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 80044be:	f8b0 3142 	ldrh.w	r3, [r0, #322]	; 0x142
 80044c2:	f8a0 317c 	strh.w	r3, [r0, #380]	; 0x17c
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 80044c6:	f890 32e6 	ldrb.w	r3, [r0, #742]	; 0x2e6
	psystem->system__mode_start =
 80044ca:	f880 11cc 	strb.w	r1, [r0, #460]	; 0x1cc
	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 80044ce:	2bff      	cmp	r3, #255	; 0xff
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 80044d0:	bf04      	itt	eq
 80044d2:	2300      	moveq	r3, #0
 80044d4:	f880 32e6 	strbeq.w	r3, [r0, #742]	; 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80044d8:	f8d0 32e4 	ldr.w	r3, [r0, #740]	; 0x2e4
 80044dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80044e0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
{
 80044e8:	b0c0      	sub	sp, #256	; 0x100
 80044ea:	4604      	mov	r4, r0
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80044ec:	d114      	bne.n	8004518 <VL53L1_init_and_start_range+0x68>
	    (pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
		/* save interrupt config */
		pdev->low_power_auto_data.saved_interrupt_config =
 80044ee:	f890 3186 	ldrb.w	r3, [r0, #390]	; 0x186
 80044f2:	f880 32e7 	strb.w	r3, [r0, #743]	; 0x2e7
			pdev->gen_cfg.system__interrupt_config_gpio;
		/* set intr_new_measure_ready */
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 80044f6:	2320      	movs	r3, #32
 80044f8:	f880 3186 	strb.w	r3, [r0, #390]	; 0x186
		/* check MM1/MM2 disabled? */
		if ((pdev->dyn_cfg.system__sequence_config & (
 80044fc:	f890 31c5 	ldrb.w	r3, [r0, #453]	; 0x1c5
 8004500:	f013 0f60 	tst.w	r3, #96	; 0x60
			     VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
		    0x0) {
			pdev->customer.algo__part_to_part_range_offset_mm =
				pdev->customer.mm_config__outer_offset_mm * 4;
 8004504:	bf0a      	itet	eq
 8004506:	f8b0 3058 	ldrheq.w	r3, [r0, #88]	; 0x58
		} else {
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 800450a:	2300      	movne	r3, #0
				pdev->customer.mm_config__outer_offset_mm * 4;
 800450c:	009b      	lsleq	r3, r3, #2
 800450e:	2a05      	cmp	r2, #5
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 8004510:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
 8004514:	bf38      	it	cc
 8004516:	2205      	movcc	r2, #5
			device_config_level =
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8004518:	f8d4 32e4 	ldr.w	r3, [r4, #740]	; 0x2e4
 800451c:	494f      	ldr	r1, [pc, #316]	; (800465c <VL53L1_init_and_start_range+0x1ac>)
 800451e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004522:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004526:	428b      	cmp	r3, r1
	    (pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
		/* restore interrupt config */
		pdev->gen_cfg.system__interrupt_config_gpio =
 8004528:	bf02      	ittt	eq
 800452a:	f894 32e7 	ldrbeq.w	r3, [r4, #743]	; 0x2e7
 800452e:	f884 3186 	strbeq.w	r3, [r4, #390]	; 0x186
			pdev->low_power_auto_data.saved_interrupt_config;

		/* make sure config gets written out including VHV config */
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 8004532:	2206      	moveq	r2, #6
 8004534:	1e53      	subs	r3, r2, #1
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b05      	cmp	r3, #5
 800453a:	bf9a      	itte	ls
 800453c:	4948      	ldrls	r1, [pc, #288]	; (8004660 <VL53L1_init_and_start_range+0x1b0>)
 800453e:	5ccd      	ldrbls	r5, [r1, r3]
 8004540:	2583      	movhi	r5, #131	; 0x83
 8004542:	b2ad      	uxth	r5, r5
		break;
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 8004544:	f1c5 0688 	rsb	r6, r5, #136	; 0x88
		i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
	for (i = 0; i < i2c_buffer_size_bytes; i++) {
 8004548:	2300      	movs	r3, #0
	i2c_buffer_size_bytes = \
 800454a:	b2b6      	uxth	r6, r6
		*pbuffer++ = 0;
 800454c:	4618      	mov	r0, r3
	for (i = 0; i < i2c_buffer_size_bytes; i++) {
 800454e:	b299      	uxth	r1, r3
 8004550:	42b1      	cmp	r1, r6
 8004552:	d325      	bcc.n	80045a0 <VL53L1_init_and_start_range+0xf0>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 8004554:	2a05      	cmp	r2, #5
 8004556:	d953      	bls.n	8004600 <VL53L1_init_and_start_range+0x150>
	    status == VL53L1_ERROR_NONE) {
		i2c_buffer_offset_bytes = \
 8004558:	f1c5 0201 	rsb	r2, r5, #1
			VL53L1_STATIC_NVM_MANAGED_I2C_INDEX - i2c_index;

		status =
 800455c:	466b      	mov	r3, sp
 800455e:	fa13 f282 	uxtah	r2, r3, r2
 8004562:	210b      	movs	r1, #11
 8004564:	f504 70ac 	add.w	r0, r4, #344	; 0x158
 8004568:	f000 ffbb 	bl	80054e2 <VL53L1_i2c_encode_static_nvm_managed>
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 800456c:	b9b0      	cbnz	r0, 800459c <VL53L1_init_and_start_range+0xec>
	    status == VL53L1_ERROR_NONE) {
		i2c_buffer_offset_bytes = \
 800456e:	f1c5 020d 	rsb	r2, r5, #13
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX - i2c_index;

		status =
 8004572:	466b      	mov	r3, sp
 8004574:	fa13 f282 	uxtah	r2, r3, r2
 8004578:	2117      	movs	r1, #23
 800457a:	f104 0042 	add.w	r0, r4, #66	; 0x42
 800457e:	f001 f819 	bl	80055b4 <VL53L1_i2c_encode_customer_nvm_managed>
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8004582:	b958      	cbnz	r0, 800459c <VL53L1_init_and_start_range+0xec>
	    status == VL53L1_ERROR_NONE) {
		i2c_buffer_offset_bytes = \
 8004584:	f1c5 0224 	rsb	r2, r5, #36	; 0x24
			VL53L1_STATIC_CONFIG_I2C_INDEX - i2c_index;

		status =
 8004588:	466b      	mov	r3, sp
 800458a:	fa13 f282 	uxtah	r2, r3, r2
 800458e:	2120      	movs	r1, #32
 8004590:	f504 70b2 	add.w	r0, r4, #356	; 0x164
 8004594:	f001 f8bc 	bl	8005710 <VL53L1_i2c_encode_static_config>
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8004598:	2800      	cmp	r0, #0
 800459a:	d036      	beq.n	800460a <VL53L1_init_and_start_range+0x15a>
		status = VL53L1_update_ll_driver_cfg_state(Dev);

	LOG_FUNCTION_END(status);

	return status;
}
 800459c:	b040      	add	sp, #256	; 0x100
 800459e:	bd70      	pop	{r4, r5, r6, pc}
		*pbuffer++ = 0;
 80045a0:	f80d 0003 	strb.w	r0, [sp, r3]
 80045a4:	3301      	adds	r3, #1
 80045a6:	e7d2      	b.n	800454e <VL53L1_init_and_start_range+0x9e>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 80045a8:	2a02      	cmp	r2, #2
 80045aa:	d03a      	beq.n	8004622 <VL53L1_init_and_start_range+0x172>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 80045ac:	2a00      	cmp	r2, #0
 80045ae:	d144      	bne.n	800463a <VL53L1_init_and_start_range+0x18a>
		i2c_buffer_offset_bytes = \
 80045b0:	f1c5 0283 	rsb	r2, r5, #131	; 0x83
		status =
 80045b4:	466b      	mov	r3, sp
 80045b6:	fa13 f282 	uxtah	r2, r3, r2
 80045ba:	2105      	movs	r1, #5
 80045bc:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
 80045c0:	f001 f9de 	bl	8005980 <VL53L1_i2c_encode_system_control>
	if (status == VL53L1_ERROR_NONE) {
 80045c4:	2800      	cmp	r0, #0
 80045c6:	d1e9      	bne.n	800459c <VL53L1_init_and_start_range+0xec>
		status =
 80045c8:	4633      	mov	r3, r6
 80045ca:	466a      	mov	r2, sp
 80045cc:	4629      	mov	r1, r5
 80045ce:	4620      	mov	r0, r4
 80045d0:	f008 ff52 	bl	800d478 <VL53L1_WriteMulti>
	if (status == VL53L1_ERROR_NONE)
 80045d4:	2800      	cmp	r0, #0
 80045d6:	d1e1      	bne.n	800459c <VL53L1_init_and_start_range+0xec>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 80045d8:	4620      	mov	r0, r4
 80045da:	f000 fce0 	bl	8004f9e <VL53L1_update_ll_driver_rd_state>
	if (status == VL53L1_ERROR_NONE)
 80045de:	2800      	cmp	r0, #0
 80045e0:	d1dc      	bne.n	800459c <VL53L1_init_and_start_range+0xec>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 80045e2:	4620      	mov	r0, r4
 80045e4:	f000 fd4f 	bl	8005086 <VL53L1_update_ll_driver_cfg_state>
	return status;
 80045e8:	e7d8      	b.n	800459c <VL53L1_init_and_start_range+0xec>
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 80045ea:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
			pdynamic->system__grouped_parameter_hold = pstate->cfg_gph_id;
 80045ee:	f884 31c6 	strb.w	r3, [r4, #454]	; 0x1c6
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 80045f2:	f043 0101 	orr.w	r1, r3, #1
 80045f6:	f884 11b4 	strb.w	r1, [r4, #436]	; 0x1b4
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 80045fa:	f884 11c0 	strb.w	r1, [r4, #448]	; 0x1c0
 80045fe:	e023      	b.n	8004648 <VL53L1_init_and_start_range+0x198>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8004600:	d0b5      	beq.n	800456e <VL53L1_init_and_start_range+0xbe>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8004602:	2a04      	cmp	r2, #4
 8004604:	d0be      	beq.n	8004584 <VL53L1_init_and_start_range+0xd4>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8004606:	2a03      	cmp	r2, #3
 8004608:	d1ce      	bne.n	80045a8 <VL53L1_init_and_start_range+0xf8>
		i2c_buffer_offset_bytes =
 800460a:	f1c5 0244 	rsb	r2, r5, #68	; 0x44
		status =
 800460e:	466b      	mov	r3, sp
 8004610:	fa13 f282 	uxtah	r2, r3, r2
 8004614:	2116      	movs	r1, #22
 8004616:	f504 70c2 	add.w	r0, r4, #388	; 0x184
 800461a:	f001 f8e7 	bl	80057ec <VL53L1_i2c_encode_general_config>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 800461e:	2800      	cmp	r0, #0
 8004620:	d1bc      	bne.n	800459c <VL53L1_init_and_start_range+0xec>
		i2c_buffer_offset_bytes = \
 8004622:	f1c5 025a 	rsb	r2, r5, #90	; 0x5a
		status =
 8004626:	466b      	mov	r3, sp
 8004628:	fa13 f282 	uxtah	r2, r3, r2
 800462c:	2117      	movs	r1, #23
 800462e:	f504 70ce 	add.w	r0, r4, #412	; 0x19c
 8004632:	f001 f920 	bl	8005876 <VL53L1_i2c_encode_timing_config>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8004636:	2800      	cmp	r0, #0
 8004638:	d1b0      	bne.n	800459c <VL53L1_init_and_start_range+0xec>
		if ((psystem->system__mode_start &
 800463a:	f894 31cc 	ldrb.w	r3, [r4, #460]	; 0x1cc
		i2c_buffer_offset_bytes = \
 800463e:	f1c5 0271 	rsb	r2, r5, #113	; 0x71
		if ((psystem->system__mode_start &
 8004642:	069b      	lsls	r3, r3, #26
		i2c_buffer_offset_bytes = \
 8004644:	b292      	uxth	r2, r2
		if ((psystem->system__mode_start &
 8004646:	d4d0      	bmi.n	80045ea <VL53L1_init_and_start_range+0x13a>
		status =
 8004648:	446a      	add	r2, sp
 800464a:	2112      	movs	r1, #18
 800464c:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
 8004650:	f001 f954 	bl	80058fc <VL53L1_i2c_encode_dynamic_config>
	if (status == VL53L1_ERROR_NONE) {
 8004654:	2800      	cmp	r0, #0
 8004656:	d1a1      	bne.n	800459c <VL53L1_init_and_start_range+0xec>
 8004658:	e7aa      	b.n	80045b0 <VL53L1_init_and_start_range+0x100>
 800465a:	bf00      	nop
 800465c:	00010100 	.word	0x00010100
 8004660:	0801d78e 	.word	0x0801d78e

08004664 <VL53L1_stop_range>:


VL53L1_Error VL53L1_stop_range(
	VL53L1_DEV Dev)
{
 8004664:	b538      	push	{r3, r4, r5, lr}
		VL53L1DevStructGetLLDriverHandle(Dev);

	/* Merge ABORT mode with mode_start */

	pdev->sys_ctrl.system__mode_start =
		(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8004666:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
 800466a:	f003 030f 	and.w	r3, r3, #15
{
 800466e:	4604      	mov	r4, r0
		(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8004670:	f063 037f 	orn	r3, r3, #127	; 0x7f
	pdev->sys_ctrl.system__mode_start =
 8004674:	f880 31cc 	strb.w	r3, [r0, #460]	; 0x1cc
		VL53L1_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53L1_set_system_control(
 8004678:	f500 71e4 	add.w	r1, r0, #456	; 0x1c8
 800467c:	f001 f999 	bl	80059b2 <VL53L1_set_system_control>
		Dev,
		&pdev->sys_ctrl);

	/* Abort bit is auto clear so clear register group structure to match */
	pdev->sys_ctrl.system__mode_start =
		(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK);
 8004680:	f894 31cc 	ldrb.w	r3, [r4, #460]	; 0x1cc
 8004684:	f003 030f 	and.w	r3, r3, #15
	pdev->sys_ctrl.system__mode_start =
 8004688:	f884 31cc 	strb.w	r3, [r4, #460]	; 0x1cc
	status = VL53L1_set_system_control(
 800468c:	4605      	mov	r5, r0

	/* reset zone dynamic info */
	VL53L1_init_ll_driver_state(
 800468e:	2103      	movs	r1, #3
 8004690:	4620      	mov	r0, r4
 8004692:	f000 fc71 	bl	8004f78 <VL53L1_init_ll_driver_state>
		Dev,
		VL53L1_DEVICESTATE_SW_STANDBY);

	/* reset low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 8004696:	f894 32e5 	ldrb.w	r3, [r4, #741]	; 0x2e5
 800469a:	2b01      	cmp	r3, #1
 800469c:	d102      	bne.n	80046a4 <VL53L1_stop_range+0x40>
		VL53L1_low_power_auto_data_stop_range(Dev);
 800469e:	4620      	mov	r0, r4
 80046a0:	f000 fe95 	bl	80053ce <VL53L1_low_power_auto_data_stop_range>

	return status;
}
 80046a4:	4628      	mov	r0, r5
 80046a6:	bd38      	pop	{r3, r4, r5, pc}

080046a8 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV Dev,
	VL53L1_DeviceResultsLevel device_results_level)
{
 80046a8:	b530      	push	{r4, r5, lr}

	LOG_FUNCTION_START("");

	/* Determine multi byte read transaction size */

	switch (device_results_level) {
 80046aa:	2901      	cmp	r1, #1
{
 80046ac:	b0c1      	sub	sp, #260	; 0x104
 80046ae:	4604      	mov	r4, r0
 80046b0:	460d      	mov	r5, r1
	switch (device_results_level) {
 80046b2:	d01a      	beq.n	80046ea <VL53L1_get_measurement_results+0x42>
			(VL53L1_CORE_RESULTS_I2C_INDEX +
			 VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
			i2c_index;
		break;
	default:
		i2c_buffer_size_bytes =
 80046b4:	2902      	cmp	r1, #2
 80046b6:	bf0c      	ite	eq
 80046b8:	2386      	moveq	r3, #134	; 0x86
 80046ba:	232c      	movne	r3, #44	; 0x2c
	}

	/* Read  Result Data */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status =
 80046bc:	466a      	mov	r2, sp
 80046be:	2188      	movs	r1, #136	; 0x88
 80046c0:	4620      	mov	r0, r4
 80046c2:	f008 fef9 	bl	800d4b8 <VL53L1_ReadMulti>
				buffer,
				(uint32_t)i2c_buffer_size_bytes);

	/* Decode  I2C buffer */

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 80046c6:	2d01      	cmp	r5, #1
 80046c8:	d911      	bls.n	80046ee <VL53L1_get_measurement_results+0x46>
 80046ca:	b9c8      	cbnz	r0, 8004700 <VL53L1_get_measurement_results+0x58>
	    status == VL53L1_ERROR_NONE) {
		i2c_buffer_offset_bytes =
			VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
 80046cc:	f504 722b 	add.w	r2, r4, #684	; 0x2ac
 80046d0:	f10d 014e 	add.w	r1, sp, #78	; 0x4e
 80046d4:	2038      	movs	r0, #56	; 0x38
 80046d6:	f001 fa46 	bl	8005b66 <VL53L1_i2c_decode_debug_results>
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 80046da:	b988      	cbnz	r0, 8004700 <VL53L1_get_measurement_results+0x58>
	    status == VL53L1_ERROR_NONE) {
		i2c_buffer_offset_bytes =
			VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
 80046dc:	f504 7222 	add.w	r2, r4, #648	; 0x288
 80046e0:	a90b      	add	r1, sp, #44	; 0x2c
 80046e2:	2021      	movs	r0, #33	; 0x21
 80046e4:	f001 fa04 	bl	8005af0 <VL53L1_i2c_decode_core_results>
 80046e8:	e003      	b.n	80046f2 <VL53L1_get_measurement_results+0x4a>
		i2c_buffer_size_bytes =
 80046ea:	234d      	movs	r3, #77	; 0x4d
 80046ec:	e7e6      	b.n	80046bc <VL53L1_get_measurement_results+0x14>
	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 80046ee:	2d00      	cmp	r5, #0
 80046f0:	d1f3      	bne.n	80046da <VL53L1_get_measurement_results+0x32>
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 80046f2:	b928      	cbnz	r0, 8004700 <VL53L1_get_measurement_results+0x58>
		i2c_buffer_offset_bytes = 0;
		status =
 80046f4:	f504 72e7 	add.w	r2, r4, #462	; 0x1ce
 80046f8:	4669      	mov	r1, sp
 80046fa:	202c      	movs	r0, #44	; 0x2c
 80046fc:	f001 f969 	bl	80059d2 <VL53L1_i2c_decode_system_results>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8004700:	b041      	add	sp, #260	; 0x104
 8004702:	bd30      	pop	{r4, r5, pc}

08004704 <VL53L1_clear_interrupt_and_enable_next_range>:
	/* Setup GPH absorption point and config values for next measurement */

	/* Update GPH registers, clear interrupt and set measurement mode */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status = VL53L1_init_and_start_range(
 8004704:	2203      	movs	r2, #3
 8004706:	f7ff bed3 	b.w	80044b0 <VL53L1_init_and_start_range>
	...

0800470c <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 800470c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count = psys->result__stream_count;
 8004710:	2500      	movs	r5, #0
 8004712:	78cf      	ldrb	r7, [r1, #3]
{
 8004714:	9001      	str	r0, [sp, #4]
	presults->stream_count = psys->result__stream_count;
 8004716:	709f      	strb	r7, [r3, #2]
 8004718:	f103 0444 	add.w	r4, r3, #68	; 0x44

	pdata = &(presults->data[0]);

	for (i = 0; i < 2; i++) {
		pdata->range_id = i;
		pdata->time_stamp = 0;
 800471c:	46ac      	mov	ip, r5

		if ((psys->result__stream_count == 0) &&
		    ((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
		     VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800471e:	f04f 0813 	mov.w	r8, #19

			pdata->actual_effective_spads =
				psys->result__dss_actual_effective_spads_sd1;
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
			pdata->avg_signal_count_rate_mcps =
 8004722:	f64f 76ff 	movw	r6, #65535	; 0xffff
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd1;

			/* apply correction gain */
			range_mm *= gain_factor;
			range_mm += 0x0400;
			range_mm /= 0x0800;
 8004726:	f44f 6e00 	mov.w	lr, #2048	; 0x800
 800472a:	fa5f fa85 	uxtb.w	sl, r5
		pdata->range_id = i;
 800472e:	f804 ac40 	strb.w	sl, [r4, #-64]
		pdata->time_stamp = 0;
 8004732:	f844 cc3c 	str.w	ip, [r4, #-60]
 8004736:	f891 9001 	ldrb.w	r9, [r1, #1]
		if ((psys->result__stream_count == 0) &&
 800473a:	2f00      	cmp	r7, #0
 800473c:	d159      	bne.n	80047f2 <VL53L1_copy_sys_and_core_results_to_range_results+0xe6>
 800473e:	f009 0b1f 	and.w	fp, r9, #31
 8004742:	f1bb 0f09 	cmp.w	fp, #9
 8004746:	d154      	bne.n	80047f2 <VL53L1_copy_sys_and_core_results_to_range_results+0xe6>
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 8004748:	f804 8c02 	strb.w	r8, [r4, #-2]
		switch (i) {
 800474c:	f1ba 0f01 	cmp.w	sl, #1
 8004750:	d05c      	beq.n	800480c <VL53L1_copy_sys_and_core_results_to_range_results+0x100>
			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 8004752:	f891 9002 	ldrb.w	r9, [r1, #2]
 8004756:	f1b9 0f07 	cmp.w	r9, #7
 800475a:	d14f      	bne.n	80047fc <VL53L1_copy_sys_and_core_results_to_range_results+0xf0>
					psys->result__mm_inner_actual_effective_spads_sd0;
 800475c:	f8b1 9012 	ldrh.w	r9, [r1, #18]
				pdata->actual_effective_spads =
 8004760:	f824 9c30 	strh.w	r9, [r4, #-48]
				psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
 8004764:	f8b1 9010 	ldrh.w	r9, [r1, #16]
			pdata->peak_signal_count_rate_mcps =
 8004768:	f824 9c14 	strh.w	r9, [r4, #-20]
				psys->result__avg_signal_count_rate_mcps_sd0;
 800476c:	f8b1 9016 	ldrh.w	r9, [r1, #22]
			pdata->avg_signal_count_rate_mcps =
 8004770:	f824 9c12 	strh.w	r9, [r4, #-18]
				psys->result__ambient_count_rate_mcps_sd0;
 8004774:	f8b1 9008 	ldrh.w	r9, [r1, #8]
			pdata->ambient_count_rate_mcps =
 8004778:	f824 9c10 	strh.w	r9, [r4, #-16]
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 800477c:	f8b1 900a 	ldrh.w	r9, [r1, #10]
			range_mm *= gain_factor;
 8004780:	9801      	ldr	r0, [sp, #4]
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 8004782:	ea4f 1949 	mov.w	r9, r9, lsl #5
			pdata->sigma_mm = (uint16_t)tmpu32;
 8004786:	45b1      	cmp	r9, r6
 8004788:	bf28      	it	cs
 800478a:	46b1      	movcs	r9, r6
 800478c:	f824 9c08 	strh.w	r9, [r4, #-8]
				psys->result__phase_sd0;
 8004790:	f8b1 900c 	ldrh.w	r9, [r1, #12]
			pdata->median_phase =
 8004794:	f824 9c06 	strh.w	r9, [r4, #-6]
			range_mm =
 8004798:	f8b1 900e 	ldrh.w	r9, [r1, #14]
			range_mm *= gain_factor;
 800479c:	fb00 f909 	mul.w	r9, r0, r9
			pdata->ranging_total_events =
 80047a0:	6850      	ldr	r0, [r2, #4]
 80047a2:	f844 0c1c 	str.w	r0, [r4, #-28]
			pdata->signal_total_events =
 80047a6:	6890      	ldr	r0, [r2, #8]
 80047a8:	f844 0c18 	str.w	r0, [r4, #-24]
			pdata->total_periods_elapsed =
 80047ac:	68d0      	ldr	r0, [r2, #12]
 80047ae:	f844 0c2c 	str.w	r0, [r4, #-44]
			pdata->ambient_window_events =
 80047b2:	6810      	ldr	r0, [r2, #0]
			range_mm += 0x0400;
 80047b4:	f509 6980 	add.w	r9, r9, #1024	; 0x400
			range_mm /= 0x0800;
 80047b8:	fb99 f9fe 	sdiv	r9, r9, lr
			pdata->median_range_mm = (int16_t)range_mm;
 80047bc:	f824 9c04 	strh.w	r9, [r4, #-4]
 80047c0:	3501      	adds	r5, #1
	for (i = 0; i < 2; i++) {
 80047c2:	2d02      	cmp	r5, #2
				pcore->result_core__ranging_total_events_sd1;
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd1;
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd1;
			pdata->ambient_window_events =
 80047c4:	f844 0c20 	str.w	r0, [r4, #-32]
 80047c8:	f104 0440 	add.w	r4, r4, #64	; 0x40
	for (i = 0; i < 2; i++) {
 80047cc:	d1ad      	bne.n	800472a <VL53L1_copy_sys_and_core_results_to_range_results+0x1e>

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 80047ce:	2000      	movs	r0, #0
 80047d0:	70d8      	strb	r0, [r3, #3]
 80047d2:	784a      	ldrb	r2, [r1, #1]
 80047d4:	f002 021f 	and.w	r2, r2, #31
 80047d8:	2a11      	cmp	r2, #17
 80047da:	d807      	bhi.n	80047ec <VL53L1_copy_sys_and_core_results_to_range_results+0xe0>
 80047dc:	2101      	movs	r1, #1
 80047de:	4c24      	ldr	r4, [pc, #144]	; (8004870 <VL53L1_copy_sys_and_core_results_to_range_results+0x164>)
 80047e0:	4091      	lsls	r1, r2
 80047e2:	4221      	tst	r1, r4
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 80047e4:	bf1c      	itt	ne
 80047e6:	70da      	strbne	r2, [r3, #3]
					   VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 80047e8:	f883 0042 	strbne.w	r0, [r3, #66]	; 0x42
		break;
	}

	LOG_FUNCTION_END(0);
}
 80047ec:	b003      	add	sp, #12
 80047ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
 80047f2:	f009 091f 	and.w	r9, r9, #31
			pdata->range_status =
 80047f6:	f804 9c02 	strb.w	r9, [r4, #-2]
 80047fa:	e7a7      	b.n	800474c <VL53L1_copy_sys_and_core_results_to_range_results+0x40>
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 80047fc:	f1b9 0f08 	cmp.w	r9, #8
					psys->result__mm_outer_actual_effective_spads_sd0;
 8004800:	bf0c      	ite	eq
 8004802:	f8b1 9014 	ldrheq.w	r9, [r1, #20]
					psys->result__dss_actual_effective_spads_sd0;
 8004806:	f8b1 9004 	ldrhne.w	r9, [r1, #4]
 800480a:	e7a9      	b.n	8004760 <VL53L1_copy_sys_and_core_results_to_range_results+0x54>
				psys->result__dss_actual_effective_spads_sd1;
 800480c:	f8b1 9018 	ldrh.w	r9, [r1, #24]
			pdata->actual_effective_spads =
 8004810:	f824 9c30 	strh.w	r9, [r4, #-48]
				psys->result__peak_signal_count_rate_mcps_sd1;
 8004814:	f8b1 901a 	ldrh.w	r9, [r1, #26]
			pdata->peak_signal_count_rate_mcps =
 8004818:	f824 9c14 	strh.w	r9, [r4, #-20]
			pdata->avg_signal_count_rate_mcps =
 800481c:	f824 6c12 	strh.w	r6, [r4, #-18]
				psys->result__ambient_count_rate_mcps_sd1;
 8004820:	f8b1 901c 	ldrh.w	r9, [r1, #28]
			pdata->ambient_count_rate_mcps =
 8004824:	f824 9c10 	strh.w	r9, [r4, #-16]
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 8004828:	f8b1 901e 	ldrh.w	r9, [r1, #30]
			range_mm *= gain_factor;
 800482c:	9801      	ldr	r0, [sp, #4]
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 800482e:	ea4f 1949 	mov.w	r9, r9, lsl #5
			pdata->sigma_mm = (uint16_t)tmpu32;
 8004832:	45b1      	cmp	r9, r6
 8004834:	bf28      	it	cs
 8004836:	46b1      	movcs	r9, r6
 8004838:	f824 9c08 	strh.w	r9, [r4, #-8]
				psys->result__phase_sd1;
 800483c:	f8b1 9020 	ldrh.w	r9, [r1, #32]
			pdata->median_phase =
 8004840:	f824 9c06 	strh.w	r9, [r4, #-6]
			range_mm =
 8004844:	f8b1 9022 	ldrh.w	r9, [r1, #34]	; 0x22
			range_mm *= gain_factor;
 8004848:	fb09 f900 	mul.w	r9, r9, r0
			pdata->ranging_total_events =
 800484c:	6950      	ldr	r0, [r2, #20]
 800484e:	f844 0c1c 	str.w	r0, [r4, #-28]
			pdata->signal_total_events =
 8004852:	6990      	ldr	r0, [r2, #24]
 8004854:	f844 0c18 	str.w	r0, [r4, #-24]
			pdata->total_periods_elapsed =
 8004858:	69d0      	ldr	r0, [r2, #28]
 800485a:	f844 0c2c 	str.w	r0, [r4, #-44]
			range_mm += 0x0400;
 800485e:	f509 6980 	add.w	r9, r9, #1024	; 0x400
			pdata->ambient_window_events =
 8004862:	6910      	ldr	r0, [r2, #16]
			range_mm /= 0x0800;
 8004864:	fb99 f9fe 	sdiv	r9, r9, lr
			pdata->median_range_mm = (int16_t)range_mm;
 8004868:	f824 9c04 	strh.w	r9, [r4, #-4]
 800486c:	e7a8      	b.n	80047c0 <VL53L1_copy_sys_and_core_results_to_range_results+0xb4>
 800486e:	bf00      	nop
 8004870:	0002200e 	.word	0x0002200e

08004874 <VL53L1_get_device_results>:
{
 8004874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004878:	4604      	mov	r4, r0
 800487a:	4690      	mov	r8, r2
	VL53L1_range_results_t   *presults = &(pres->range_results);
 800487c:	f500 763d 	add.w	r6, r0, #756	; 0x2f4
		status = VL53L1_get_measurement_results(
 8004880:	f7ff ff12 	bl	80046a8 <VL53L1_get_measurement_results>
	if (status == VL53L1_ERROR_NONE)
 8004884:	4605      	mov	r5, r0
 8004886:	b940      	cbnz	r0, 800489a <VL53L1_get_device_results+0x26>
		VL53L1_copy_sys_and_core_results_to_range_results(
 8004888:	4633      	mov	r3, r6
 800488a:	f504 7222 	add.w	r2, r4, #648	; 0x288
 800488e:	f504 71e7 	add.w	r1, r4, #462	; 0x1ce
 8004892:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
 8004896:	f7ff ff39 	bl	800470c <VL53L1_copy_sys_and_core_results_to_range_results>
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 800489a:	f894 72e5 	ldrb.w	r7, [r4, #741]	; 0x2e5
 800489e:	2f01      	cmp	r7, #1
 80048a0:	d112      	bne.n	80048c8 <VL53L1_get_device_results+0x54>
		if ((status == VL53L1_ERROR_NONE) &&
 80048a2:	b945      	cbnz	r5, 80048b6 <VL53L1_get_device_results+0x42>
		    (pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 80048a4:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 80048a8:	bb0b      	cbnz	r3, 80048ee <VL53L1_get_device_results+0x7a>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 80048aa:	4620      	mov	r0, r4
 80048ac:	f000 fdb5 	bl	800541a <VL53L1_low_power_auto_setup_manual_calibration>
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 80048b0:	f884 72e6 	strb.w	r7, [r4, #742]	; 0x2e6
			status = VL53L1_low_power_auto_setup_manual_calibration(
 80048b4:	4605      	mov	r5, r0
		if ((pdev->low_power_auto_data.low_power_auto_range_count != 0xFF) &&
 80048b6:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
 80048ba:	2bff      	cmp	r3, #255	; 0xff
 80048bc:	d004      	beq.n	80048c8 <VL53L1_get_device_results+0x54>
 80048be:	b91d      	cbnz	r5, 80048c8 <VL53L1_get_device_results+0x54>
			status = VL53L1_low_power_auto_update_DSS(
 80048c0:	4620      	mov	r0, r4
 80048c2:	f000 fdc9 	bl	8005458 <VL53L1_low_power_auto_update_DSS>
 80048c6:	4605      	mov	r5, r0
	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 80048c8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80048cc:	f884 32f4 	strb.w	r3, [r4, #756]	; 0x2f4
	presults->rd_device_state = pdev->ll_state.rd_device_state;
 80048d0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80048d4:	f884 32f5 	strb.w	r3, [r4, #757]	; 0x2f5
	memcpy(
 80048d8:	2284      	movs	r2, #132	; 0x84
 80048da:	4631      	mov	r1, r6
 80048dc:	4640      	mov	r0, r8
 80048de:	f016 fb43 	bl	801af68 <memcpy>
	if (status == VL53L1_ERROR_NONE)
 80048e2:	b955      	cbnz	r5, 80048fa <VL53L1_get_device_results+0x86>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 80048e4:	4620      	mov	r0, r4
}
 80048e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		status = VL53L1_check_ll_driver_rd_state(Dev);
 80048ea:	f000 bba0 	b.w	800502e <VL53L1_check_ll_driver_rd_state>
		} else if ((status == VL53L1_ERROR_NONE) &&
 80048ee:	2b01      	cmp	r3, #1
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 80048f0:	bf04      	itt	eq
 80048f2:	2302      	moveq	r3, #2
 80048f4:	f884 32e6 	strbeq.w	r3, [r4, #742]	; 0x2e6
 80048f8:	e7dd      	b.n	80048b6 <VL53L1_get_device_results+0x42>
}
 80048fa:	4628      	mov	r0, r5
 80048fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004900 <VL53L1_get_tuning_parm>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 8004900:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 8004904:	2938      	cmp	r1, #56	; 0x38
 8004906:	f200 80cc 	bhi.w	8004aa2 <VL53L1_get_tuning_parm+0x1a2>
 800490a:	e8df f001 	tbb	[pc, r1]
 800490e:	221d      	.short	0x221d
 8004910:	2e2b2825 	.word	0x2e2b2825
 8004914:	3a373431 	.word	0x3a373431
 8004918:	4643403d 	.word	0x4643403d
 800491c:	524f4c49 	.word	0x524f4c49
 8004920:	5e5b5855 	.word	0x5e5b5855
 8004924:	6a676461 	.word	0x6a676461
 8004928:	7673706d 	.word	0x7673706d
 800492c:	827f7c79 	.word	0x827f7c79
 8004930:	8e8b8885 	.word	0x8e8b8885
 8004934:	9a979491 	.word	0x9a979491
 8004938:	a6a3a09d 	.word	0xa6a3a09d
 800493c:	b2afaca9 	.word	0xb2afaca9
 8004940:	bebbb8b5 	.word	0xbebbb8b5
 8004944:	c4c1      	.short	0xc4c1
 8004946:	c7          	.byte	0xc7
 8004947:	00          	.byte	0x00
	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 8004948:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
		break;
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 800494c:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 800494e:	2000      	movs	r0, #0
		break;
 8004950:	4770      	bx	lr
			(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 8004952:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 8004956:	e7f9      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 8004958:	f8b0 30a8 	ldrh.w	r3, [r0, #168]	; 0xa8
 800495c:	e7f6      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 800495e:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 8004962:	e7f3      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8004964:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
 8004968:	e7f0      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 800496a:	f8b0 30b2 	ldrh.w	r3, [r0, #178]	; 0xb2
 800496e:	e7ed      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
			(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 8004970:	f8b0 309c 	ldrh.w	r3, [r0, #156]	; 0x9c
 8004974:	e7ea      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 8004976:	f890 30b4 	ldrb.w	r3, [r0, #180]	; 0xb4
 800497a:	e7e7      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 800497c:	f8b0 30b6 	ldrh.w	r3, [r0, #182]	; 0xb6
 8004980:	e7e4      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8004982:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
 8004986:	e7e1      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8004988:	f8b0 30ba 	ldrh.w	r3, [r0, #186]	; 0xba
 800498c:	e7de      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps;
 800498e:	f8b0 30bc 	ldrh.w	r3, [r0, #188]	; 0xbc
 8004992:	e7db      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8004994:	f8b0 30be 	ldrh.w	r3, [r0, #190]	; 0xbe
 8004998:	e7d8      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps;
 800499a:	f8b0 30c0 	ldrh.w	r3, [r0, #192]	; 0xc0
 800499e:	e7d5      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 80049a0:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
 80049a4:	e7d2      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 80049a6:	f890 30c3 	ldrb.w	r3, [r0, #195]	; 0xc3
 80049aa:	e7cf      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 80049ac:	f890 30c4 	ldrb.w	r3, [r0, #196]	; 0xc4
 80049b0:	e7cc      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
			(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 80049b2:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 80049b6:	e7c9      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_seed_cfg;
 80049b8:	f890 30c5 	ldrb.w	r3, [r0, #197]	; 0xc5
 80049bc:	e7c6      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 80049be:	f890 30c7 	ldrb.w	r3, [r0, #199]	; 0xc7
 80049c2:	e7c3      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 80049c4:	f890 30c8 	ldrb.w	r3, [r0, #200]	; 0xc8
 80049c8:	e7c0      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
			(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 80049ca:	f9b0 313e 	ldrsh.w	r3, [r0, #318]	; 0x13e
 80049ce:	e7bd      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 80049d0:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
 80049d4:	e7ba      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 80049d6:	f890 30ab 	ldrb.w	r3, [r0, #171]	; 0xab
 80049da:	e7b7      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 80049dc:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 80049e0:	e7b4      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 80049e2:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
 80049e6:	e7b1      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 80049e8:	f890 30ae 	ldrb.w	r3, [r0, #174]	; 0xae
 80049ec:	e7ae      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 80049ee:	f890 30af 	ldrb.w	r3, [r0, #175]	; 0xaf
 80049f2:	e7ab      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 80049f4:	f890 30c6 	ldrb.w	r3, [r0, #198]	; 0xc6
 80049f8:	e7a8      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
			(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 80049fa:	f890 3160 	ldrb.w	r3, [r0, #352]	; 0x160
 80049fe:	e7a5      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
			(int32_t)pdev->refspadchar.device_test_mode;
 8004a00:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
 8004a04:	e7a2      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
			(int32_t)pdev->refspadchar.vcsel_period;
 8004a06:	f890 3111 	ldrb.w	r3, [r0, #273]	; 0x111
 8004a0a:	e79f      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
 8004a0c:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8004a10:	e79c      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
			(int32_t)pdev->refspadchar.timeout_us;
		break;
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
			(int32_t)pdev->refspadchar.target_count_rate_mcps;
 8004a12:	f8b0 3118 	ldrh.w	r3, [r0, #280]	; 0x118
 8004a16:	e799      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
			(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8004a18:	f8b0 311a 	ldrh.w	r3, [r0, #282]	; 0x11a
 8004a1c:	e796      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
			(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 8004a1e:	f8b0 311c 	ldrh.w	r3, [r0, #284]	; 0x11c
 8004a22:	e793      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;;
 8004a24:	f8b0 3144 	ldrh.w	r3, [r0, #324]	; 0x144
 8004a28:	e790      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
 8004a2a:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
 8004a2e:	e78d      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
			(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
		break;
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
 8004a30:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
 8004a34:	e78a      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
			(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
		break;
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
 8004a36:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8004a3a:	e787      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
			(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
		break;
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 8004a3c:	f890 3154 	ldrb.w	r3, [r0, #340]	; 0x154
 8004a40:	e784      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 8004a42:	f890 3155 	ldrb.w	r3, [r0, #341]	; 0x155
 8004a46:	e781      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8004a48:	f890 3156 	ldrb.w	r3, [r0, #342]	; 0x156
 8004a4c:	e77e      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
			(int32_t)pdev->ssc_cfg.vcsel_period;
 8004a4e:	f890 3121 	ldrb.w	r3, [r0, #289]	; 0x121
 8004a52:	e77b      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
			(int32_t)pdev->ssc_cfg.vcsel_start;
 8004a54:	f890 3122 	ldrb.w	r3, [r0, #290]	; 0x122
 8004a58:	e778      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
			(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 8004a5a:	f8b0 3128 	ldrh.w	r3, [r0, #296]	; 0x128
 8004a5e:	e775      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 8004a60:	f8b0 30ca 	ldrh.w	r3, [r0, #202]	; 0xca
 8004a64:	e772      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 8004a66:	f8b0 30cc 	ldrh.w	r3, [r0, #204]	; 0xcc
 8004a6a:	e76f      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8004a6c:	f8d0 30d0 	ldr.w	r3, [r0, #208]	; 0xd0
 8004a70:	e76c      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
			(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
		break;
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8004a72:	f8d0 30d4 	ldr.w	r3, [r0, #212]	; 0xd4
 8004a76:	e769      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
			(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
		break;
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8004a78:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 8004a7c:	e766      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
			(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
		break;
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8004a7e:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 8004a82:	e763      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
			(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
		break;
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8004a84:	f8d0 30e4 	ldr.w	r3, [r0, #228]	; 0xe4
 8004a88:	e760      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
			(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
		break;
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8004a8a:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
 8004a8e:	e75d      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
			(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
		break;
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
			(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 8004a90:	f890 32e4 	ldrb.w	r3, [r0, #740]	; 0x2e4
 8004a94:	e75a      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8004a96:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 8004a9a:	e757      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
			(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
		break;
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8004a9c:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8004aa0:	e754      	b.n	800494c <VL53L1_get_tuning_parm+0x4c>
			(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
		break;


	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 8004aa2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8004aa6:	6013      	str	r3, [r2, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 8004aa8:	f06f 0003 	mvn.w	r0, #3
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8004aac:	4770      	bx	lr

08004aae <VL53L1_init_refspadchar_config_struct>:
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 8004aae:	2308      	movs	r3, #8
 8004ab0:	7003      	strb	r3, [r0, #0]
		VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period =
 8004ab2:	230b      	movs	r3, #11
 8004ab4:	7043      	strb	r3, [r0, #1]
		VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us =
 8004ab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004aba:	6043      	str	r3, [r0, #4]
		VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps =
 8004abc:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8004ac0:	8103      	strh	r3, [r0, #8]
		VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 8004ac2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8004ac6:	8143      	strh	r3, [r0, #10]
		VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 8004ac8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004acc:	8183      	strh	r3, [r0, #12]
		VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 8004ace:	2000      	movs	r0, #0
 8004ad0:	4770      	bx	lr

08004ad2 <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 8004ad2:	4603      	mov	r3, r0
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 8004ad4:	2212      	movs	r2, #18
 8004ad6:	705a      	strb	r2, [r3, #1]
		VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start =
 8004ad8:	220f      	movs	r2, #15
 8004ada:	709a      	strb	r2, [r3, #2]
		VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width = 0x02;
 8004adc:	2202      	movs	r2, #2
 8004ade:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us = 36000;
 8004ae0:	f648 42a0 	movw	r2, #36000	; 0x8ca0
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 8004ae4:	2000      	movs	r0, #0
	pdata->timeout_us = 36000;
 8004ae6:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 8004ae8:	220c      	movs	r2, #12
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 8004aea:	7018      	strb	r0, [r3, #0]
	pdata->rate_limit_mcps =
 8004aec:	811a      	strh	r2, [r3, #8]
		VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 8004aee:	4770      	bx	lr

08004af0 <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 8004af0:	4603      	mov	r3, r0
 8004af2:	b510      	push	{r4, lr}
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8004af4:	8940      	ldrh	r0, [r0, #10]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 8004af6:	6008      	str	r0, [r1, #0]
{
 8004af8:	460c      	mov	r4, r1
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8004afa:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8004afe:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8004b02:	80a1      	strh	r1, [r4, #4]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;

	pdata->lite_mode_crosstalk_margin_kcps =
 8004b04:	2300      	movs	r3, #0
 8004b06:	8263      	strh	r3, [r4, #18]
		VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 8004b08:	2340      	movs	r3, #64	; 0x40
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8004b0a:	80e2      	strh	r2, [r4, #6]
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps =
 8004b0c:	60a0      	str	r0, [r4, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps =
 8004b0e:	81a1      	strh	r1, [r4, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps =
 8004b10:	81e2      	strh	r2, [r4, #14]
	pdata->crosstalk_range_ignore_threshold_mult =
 8004b12:	7523      	strb	r3, [r4, #20]
		VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 8004b14:	b958      	cbnz	r0, 8004b2e <VL53L1_init_xtalk_config_struct+0x3e>
	    && (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
	    && (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 8004b16:	6863      	ldr	r3, [r4, #4]
 8004b18:	b94b      	cbnz	r3, 8004b2e <VL53L1_init_xtalk_config_struct+0x3e>
		pdata->global_crosstalk_compensation_enable = 0x00;
 8004b1a:	7420      	strb	r0, [r4, #16]
	else
		pdata->global_crosstalk_compensation_enable = 0x01;


	if ((status == VL53L1_ERROR_NONE) &&
 8004b1c:	7c23      	ldrb	r3, [r4, #16]
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d108      	bne.n	8004b34 <VL53L1_init_xtalk_config_struct+0x44>
	    (pdata->global_crosstalk_compensation_enable == 0x01)) {
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 8004b22:	2340      	movs	r3, #64	; 0x40
 8004b24:	f000 fb93 	bl	800524e <VL53L1_calc_range_ignore_threshold>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 8004b28:	82e0      	strh	r0, [r4, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8004b2a:	2000      	movs	r0, #0
 8004b2c:	bd10      	pop	{r4, pc}
		pdata->global_crosstalk_compensation_enable = 0x01;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	7423      	strb	r3, [r4, #16]
 8004b32:	e7f3      	b.n	8004b1c <VL53L1_init_xtalk_config_struct+0x2c>
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 8004b34:	2300      	movs	r3, #0
 8004b36:	82e3      	strh	r3, [r4, #22]
 8004b38:	e7f7      	b.n	8004b2a <VL53L1_init_xtalk_config_struct+0x3a>

08004b3a <VL53L1_init_offset_cal_config_struct>:

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps =
 8004b3a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8004b3e:	8003      	strh	r3, [r0, #0]
		VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us =
 8004b40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b44:	6043      	str	r3, [r0, #4]
		VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us =
 8004b46:	f243 23c8 	movw	r3, #13000	; 0x32c8
 8004b4a:	6083      	str	r3, [r0, #8]
		VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us =
 8004b4c:	60c3      	str	r3, [r0, #12]
		VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples =
 8004b4e:	2308      	movs	r3, #8
 8004b50:	7403      	strb	r3, [r0, #16]
		VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples =
 8004b52:	2328      	movs	r3, #40	; 0x28
 8004b54:	7443      	strb	r3, [r0, #17]
		VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples =
 8004b56:	2309      	movs	r3, #9
 8004b58:	7483      	strb	r3, [r0, #18]
		VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 8004b5a:	2000      	movs	r0, #0
 8004b5c:	4770      	bx	lr

08004b5e <VL53L1_init_tuning_parm_storage_struct>:
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version =
 8004b5e:	f248 0203 	movw	r2, #32771	; 0x8003
 8004b62:	8002      	strh	r2, [r0, #0]
		VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version =
 8004b64:	f248 0201 	movw	r2, #32769	; 0x8001
{
 8004b68:	4603      	mov	r3, r0
	pdata->tp_tuning_parm_key_table_version =
 8004b6a:	8042      	strh	r2, [r0, #2]
		VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version =
 8004b6c:	f248 0241 	movw	r2, #32833	; 0x8041
 8004b70:	8082      	strh	r2, [r0, #4]
		VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long =
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med =
 8004b72:	210a      	movs	r1, #10
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short =
 8004b74:	2206      	movs	r2, #6
	pdata->tp_init_phase_rtn_lite_med =
 8004b76:	71d9      	strb	r1, [r3, #7]
	pdata->tp_init_phase_rtn_lite_short =
 8004b78:	721a      	strb	r2, [r3, #8]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long =
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med =
 8004b7a:	7299      	strb	r1, [r3, #10]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short =
 8004b7c:	72da      	strb	r2, [r3, #11]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 8004b7e:	2102      	movs	r1, #2
		VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target =
 8004b80:	2221      	movs	r2, #33	; 0x21
	pdata->tp_consistency_lite_phase_tolerance =
 8004b82:	7319      	strb	r1, [r3, #12]
	pdata->tp_phasecal_target =
 8004b84:	735a      	strb	r2, [r3, #13]
		VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns =
		VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm =
		VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg =
 8004b86:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
	pdata->tp_lite_long_sigma_thresh_mm =
 8004b8a:	f44f 72b4 	mov.w	r2, #360	; 0x168
		VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg =
		VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier =
 8004b8e:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
		VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps =
 8004b92:	f44f 6120 	mov.w	r1, #2560	; 0xa00
	pdata->tp_lite_long_sigma_thresh_mm =
 8004b96:	825a      	strh	r2, [r3, #18]
	pdata->tp_lite_med_sigma_thresh_mm =
 8004b98:	829a      	strh	r2, [r3, #20]
	pdata->tp_lite_short_sigma_thresh_mm =
 8004b9a:	82da      	strh	r2, [r3, #22]
	pdata->tp_dss_target_lite_mcps =
 8004b9c:	84d9      	strh	r1, [r3, #38]	; 0x26
	pdata->tp_lite_long_min_count_rate_rtn_mcps =
 8004b9e:	22c0      	movs	r2, #192	; 0xc0
		VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps =
 8004ba0:	8519      	strh	r1, [r3, #40]	; 0x28
		VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us =
 8004ba2:	f248 0130 	movw	r1, #32816	; 0x8030
	pdata->tp_lite_long_min_count_rate_rtn_mcps =
 8004ba6:	831a      	strh	r2, [r3, #24]
	pdata->tp_lite_med_min_count_rate_rtn_mcps =
 8004ba8:	835a      	strh	r2, [r3, #26]
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 8004baa:	839a      	strh	r2, [r3, #28]
	pdata->tp_phasecal_timeout_lite_us =
 8004bac:	62d9      	str	r1, [r3, #44]	; 0x2c
	pdata->tp_lite_sigma_est_pulse_width_ns =
 8004bae:	2208      	movs	r2, #8
		VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us =
 8004bb0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	pdata->tp_init_phase_rtn_lite_long =
 8004bb4:	200e      	movs	r0, #14
	pdata->tp_lite_sigma_est_pulse_width_ns =
 8004bb6:	779a      	strb	r2, [r3, #30]
	pdata->tp_phasecal_timeout_timed_us =
 8004bb8:	6319      	str	r1, [r3, #48]	; 0x30
	pdata->tp_lite_sigma_est_amb_width_ns =
 8004bba:	2210      	movs	r2, #16
		VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us =
 8004bbc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
	pdata->tp_init_phase_rtn_lite_long =
 8004bc0:	7198      	strb	r0, [r3, #6]
	pdata->tp_init_phase_ref_lite_long =
 8004bc2:	7258      	strb	r0, [r3, #9]
	pdata->tp_lite_sigma_est_amb_width_ns =
 8004bc4:	77da      	strb	r2, [r3, #31]
	pdata->tp_cal_repeat_rate =
 8004bc6:	2000      	movs	r0, #0
	pdata->tp_lite_sigma_ref_mm =
 8004bc8:	2201      	movs	r2, #1
	pdata->tp_mm_timeout_lite_us =
 8004bca:	6359      	str	r1, [r3, #52]	; 0x34
		VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us =
 8004bcc:	6399      	str	r1, [r3, #56]	; 0x38
		VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us =
 8004bce:	f24f 6118 	movw	r1, #63000	; 0xf618
	pdata->tp_lite_sigma_ref_mm =
 8004bd2:	f883 2020 	strb.w	r2, [r3, #32]
	pdata->tp_timed_seed_cfg =
 8004bd6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	pdata->tp_cal_repeat_rate =
 8004bda:	81d8      	strh	r0, [r3, #14]
	pdata->tp_lite_min_clip =
 8004bdc:	7418      	strb	r0, [r3, #16]
	pdata->tp_lite_first_order_select =
 8004bde:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
	pdata->tp_range_timeout_lite_us =
 8004be2:	6419      	str	r1, [r3, #64]	; 0x40
		VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us =
 8004be4:	f243 21c8 	movw	r1, #13000	; 0x32c8
		VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 8004be8:	63da      	str	r2, [r3, #60]	; 0x3c
		VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 8004bea:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
	pdata->tp_range_timeout_timed_us =
 8004bee:	6459      	str	r1, [r3, #68]	; 0x44
	pdata->tp_range_timeout_lpa_us =
 8004bf0:	649a      	str	r2, [r3, #72]	; 0x48


	LOG_FUNCTION_END(status);

	return status;
}
 8004bf2:	4770      	bx	lr

08004bf4 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8004bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bf8:	4604      	mov	r4, r0
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 8004bfa:	f44f 6020 	mov.w	r0, #2560	; 0xa00
{
 8004bfe:	9d09      	ldr	r5, [sp, #36]	; 0x24
	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 8004c00:	8020      	strh	r0, [r4, #0]
	 */
	pstatic->gpio_hv_mux__ctrl = \
		VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
		VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status = 0x02;
 8004c02:	f04f 0e02 	mov.w	lr, #2
	pstatic->debug__ctrl = 0x00;
 8004c06:	2000      	movs	r0, #0
	pstatic->gpio__fio_hv_status = 0x00;
	pstatic->ana_config__spad_sel_pswidth = 0x02;
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 8004c08:	f04f 0808 	mov.w	r8, #8
	pstatic->gpio_hv_mux__ctrl = \
 8004c0c:	2611      	movs	r6, #17
	pstatic->debug__ctrl = 0x00;
 8004c0e:	70a0      	strb	r0, [r4, #2]
	pstatic->test_mode__ctrl = 0x00;
 8004c10:	70e0      	strb	r0, [r4, #3]
	pstatic->clk_gating__ctrl = 0x00;
 8004c12:	7120      	strb	r0, [r4, #4]
	pstatic->nvm_bist__ctrl = 0x00;
 8004c14:	7160      	strb	r0, [r4, #5]
	pstatic->nvm_bist__num_nvm_words = 0x00;
 8004c16:	71a0      	strb	r0, [r4, #6]
	pstatic->nvm_bist__start_address = 0x00;
 8004c18:	71e0      	strb	r0, [r4, #7]
	pstatic->host_if__status = 0x00;
 8004c1a:	7220      	strb	r0, [r4, #8]
	pstatic->pad_i2c_hv__config = 0x00;
 8004c1c:	7260      	strb	r0, [r4, #9]
	pstatic->pad_i2c_hv__extsup_config = 0x00;
 8004c1e:	72a0      	strb	r0, [r4, #10]
	pstatic->gpio_hv_pad__ctrl = 0x00;
 8004c20:	72e0      	strb	r0, [r4, #11]
	pstatic->gpio__tio_hv_status = 0x02;
 8004c22:	f884 e00d 	strb.w	lr, [r4, #13]
	pstatic->gpio__fio_hv_status = 0x00;
 8004c26:	73a0      	strb	r0, [r4, #14]
	pstatic->ana_config__spad_sel_pswidth = 0x02;
 8004c28:	f884 e00f 	strb.w	lr, [r4, #15]
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 8004c2c:	f884 8010 	strb.w	r8, [r4, #16]
	pstatic->ana_config__fast_osc__config_ctrl = 0x00;
 8004c30:	7460      	strb	r0, [r4, #17]
	pstatic->gpio_hv_mux__ctrl = \
 8004c32:	7326      	strb	r6, [r4, #12]

	pstatic->sigma_estimator__effective_pulse_width_ns =
 8004c34:	7fae      	ldrb	r6, [r5, #30]
 8004c36:	74a6      	strb	r6, [r4, #18]
		ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
	pstatic->sigma_estimator__effective_ambient_width_ns =
 8004c38:	7fee      	ldrb	r6, [r5, #31]
 8004c3a:	74e6      	strb	r6, [r4, #19]
		ptuning_parms->tp_lite_sigma_est_amb_width_ns;
	pstatic->sigma_estimator__sigma_ref_mm =
 8004c3c:	f895 6020 	ldrb.w	r6, [r5, #32]
 8004c40:	7526      	strb	r6, [r4, #20]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;

	pstatic->algo__range_ignore_threshold_mcps = 0x0000;

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 8004c42:	f04f 0cff 	mov.w	ip, #255	; 0xff
	pstatic->algo__crosstalk_compensation_valid_height_mm = 0x01;
 8004c46:	2601      	movs	r6, #1
 8004c48:	7566      	strb	r6, [r4, #21]
	pstatic->spare_host_config__static_config_spare_0 = 0x00;
 8004c4a:	75a0      	strb	r0, [r4, #22]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;
 8004c4c:	75e0      	strb	r0, [r4, #23]
	pstatic->algo__range_ignore_threshold_mcps = 0x0000;
 8004c4e:	8320      	strh	r0, [r4, #24]
	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 8004c50:	f884 c01a 	strb.w	ip, [r4, #26]
	pstatic->algo__range_min_clip =
 8004c54:	f895 9010 	ldrb.w	r9, [r5, #16]
{
 8004c58:	9f08      	ldr	r7, [sp, #32]
	pstatic->algo__range_min_clip =
 8004c5a:	f884 901b 	strb.w	r9, [r4, #27]
	/*
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance =
 8004c5e:	f895 900c 	ldrb.w	r9, [r5, #12]
 8004c62:	f884 901c 	strb.w	r9, [r4, #28]
		ptuning_parms->tp_consistency_lite_phase_tolerance;
	pstatic->spare_host_config__static_config_spare_2 = 0x00;
 8004c66:	7760      	strb	r0, [r4, #29]
	pstatic->sd_config__reset_stages_msb = 0x00;
 8004c68:	77a0      	strb	r0, [r4, #30]
	pstatic->sd_config__reset_stages_lsb = 0x00;
 8004c6a:	77e0      	strb	r0, [r4, #31]

	pgeneral->gph_config__stream_count_update_value = 0x00;
	pgeneral->global_config__stream_divider = 0x00;
	pgeneral->system__interrupt_config_gpio =
 8004c6c:	f04f 0920 	mov.w	r9, #32
		VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start = 0x0B;
 8004c70:	240b      	movs	r4, #11
	pgeneral->gph_config__stream_count_update_value = 0x00;
 8004c72:	7008      	strb	r0, [r1, #0]
	pgeneral->global_config__stream_divider = 0x00;
 8004c74:	7048      	strb	r0, [r1, #1]
	pgeneral->system__interrupt_config_gpio =
 8004c76:	f881 9002 	strb.w	r9, [r1, #2]
	pgeneral->cal_config__vcsel_start = 0x0B;
 8004c7a:	70cc      	strb	r4, [r1, #3]
	 * Set VHV / Phase Cal repeat rate to 1 every
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate =
 8004c7c:	f8b5 a00e 	ldrh.w	sl, [r5, #14]
 8004c80:	f8a1 a004 	strh.w	sl, [r1, #4]
		ptuning_parms->tp_cal_repeat_rate;
	pgeneral->global_config__vcsel_width = 0x02;
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop = 0x0D;
 8004c84:	f04f 0a0d 	mov.w	sl, #13
	pgeneral->global_config__vcsel_width = 0x02;
 8004c88:	f881 e006 	strb.w	lr, [r1, #6]
	pgeneral->phasecal_config__timeout_macrop = 0x0D;
 8004c8c:	f881 a007 	strb.w	sl, [r1, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target =
 8004c90:	f895 a00d 	ldrb.w	sl, [r5, #13]
 8004c94:	f881 a008 	strb.w	sl, [r1, #8]
		VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high = 0x0000;
	pgeneral->system__thresh_rate_low = 0x0000;
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select = 0x8C00;
 8004c98:	f44f 4a0c 	mov.w	sl, #35840	; 0x8c00
 8004c9c:	f8a1 a010 	strh.w	sl, [r1, #16]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation = 0x38;
 8004ca0:	f04f 0a38 	mov.w	sl, #56	; 0x38
	pgeneral->phasecal_config__override = 0x00;
 8004ca4:	7248      	strb	r0, [r1, #9]
	pgeneral->dss_config__roi_mode_control =
 8004ca6:	728e      	strb	r6, [r1, #10]
	pgeneral->system__thresh_rate_high = 0x0000;
 8004ca8:	8188      	strh	r0, [r1, #12]
	pgeneral->system__thresh_rate_low = 0x0000;
 8004caa:	81c8      	strh	r0, [r1, #14]
	pgeneral->dss_config__manual_block_select = 0x00;
 8004cac:	7488      	strb	r0, [r1, #18]
	pgeneral->dss_config__aperture_attenuation = 0x38;
 8004cae:	f881 a013 	strb.w	sl, [r1, #19]
	pgeneral->dss_config__max_spads_limit = 0xFF;
 8004cb2:	f881 c014 	strb.w	ip, [r1, #20]
	pgeneral->dss_config__min_spads_limit = 0x01;
 8004cb6:	754e      	strb	r6, [r1, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
	ptiming->mm_config__timeout_macrop_a_lo = 0x1a;
 8004cb8:	211a      	movs	r1, #26
 8004cba:	7051      	strb	r1, [r2, #1]
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi = 0x01;
	ptiming->range_config__timeout_macrop_a_lo = 0xCC;
 8004cbc:	21cc      	movs	r1, #204	; 0xcc
 8004cbe:	7151      	strb	r1, [r2, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a = 0x0B;
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi = 0x01;
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 8004cc0:	21f5      	movs	r1, #245	; 0xf5
	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8004cc2:	7010      	strb	r0, [r2, #0]
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8004cc4:	7090      	strb	r0, [r2, #2]
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;
 8004cc6:	f882 9003 	strb.w	r9, [r2, #3]
	ptiming->range_config__timeout_macrop_a_hi = 0x01;
 8004cca:	7116      	strb	r6, [r2, #4]
	ptiming->range_config__vcsel_period_a = 0x0B;
 8004ccc:	7194      	strb	r4, [r2, #6]
	ptiming->range_config__timeout_macrop_b_hi = 0x01;
 8004cce:	71d6      	strb	r6, [r2, #7]
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 8004cd0:	7211      	strb	r1, [r2, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b = 0x09;
 8004cd2:	2109      	movs	r1, #9
 8004cd4:	7251      	strb	r1, [r2, #9]
	 * Sigma thresh register - format 14.2
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh =
 8004cd6:	f8b5 9014 	ldrh.w	r9, [r5, #20]
 8004cda:	f8a2 900a 	strh.w	r9, [r2, #10]
	/*
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8004cde:	f8b5 901a 	ldrh.w	r9, [r5, #26]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low = 0x08;
 8004ce2:	f882 800e 	strb.w	r8, [r2, #14]
	ptiming->range_config__valid_phase_high = 0x78;
 8004ce6:	f04f 0878 	mov.w	r8, #120	; 0x78
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8004cea:	f8a2 900c 	strh.w	r9, [r2, #12]
	ptiming->range_config__valid_phase_high = 0x78;
 8004cee:	f882 800f 	strb.w	r8, [r2, #15]
	ptiming->system__intermeasurement_period = 0x00000000;
 8004cf2:	6110      	str	r0, [r2, #16]
	ptiming->system__fractional_enable = 0x00;
 8004cf4:	7510      	strb	r0, [r2, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0 = 0x01;
 8004cf6:	701e      	strb	r6, [r3, #0]

	pdynamic->system__thresh_high = 0x0000;
 8004cf8:	8058      	strh	r0, [r3, #2]
	pdynamic->system__thresh_low = 0x0000;
 8004cfa:	8098      	strh	r0, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant = 0x00;
 8004cfc:	7198      	strb	r0, [r3, #6]
	pdynamic->system__seed_config =
 8004cfe:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
 8004d02:	71da      	strb	r2, [r3, #7]
		ptuning_parms->tp_lite_seed_cfg;

	/* Timing A */
	pdynamic->sd_config__woi_sd0 = 0x0B;
 8004d04:	721c      	strb	r4, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1 = 0x09;
 8004d06:	7259      	strb	r1, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0 =
 8004d08:	79ea      	ldrb	r2, [r5, #7]
 8004d0a:	729a      	strb	r2, [r3, #10]
		ptuning_parms->tp_init_phase_rtn_lite_med;
	pdynamic->sd_config__initial_phase_sd1 =
 8004d0c:	7aaa      	ldrb	r2, [r5, #10]
 8004d0e:	72da      	strb	r2, [r3, #11]
		ptuning_parms->tp_init_phase_ref_lite_med;;

	pdynamic->system__grouped_parameter_hold_1 = 0x01;
 8004d10:	731e      	strb	r6, [r3, #12]
	 *        3  -> 4095
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
 8004d12:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
 8004d16:	735a      	strb	r2, [r3, #13]
		ptuning_parms->tp_lite_first_order_select;
	pdynamic->sd_config__quantifier =
 8004d18:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
 8004d1c:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad = 0xC7;
 8004d1e:	22c7      	movs	r2, #199	; 0xc7
 8004d20:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;


	pdynamic->system__sequence_config = \
 8004d22:	22db      	movs	r2, #219	; 0xdb
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8004d24:	f883 c010 	strb.w	ip, [r3, #16]
	pdynamic->system__sequence_config = \
 8004d28:	745a      	strb	r2, [r3, #17]
		VL53L1_SEQUENCE_DSS1_EN | \
		VL53L1_SEQUENCE_DSS2_EN | \
		VL53L1_SEQUENCE_MM2_EN | \
		VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold = 0x02;
 8004d2a:	f883 e012 	strb.w	lr, [r3, #18]
	psystem->system__stream_count_ctrl = 0x00;
	psystem->firmware__enable = 0x01;
	psystem->system__interrupt_clear = \
		VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start = \
 8004d2e:	2321      	movs	r3, #33	; 0x21
	psystem->system__stream_count_ctrl = 0x00;
 8004d30:	7078      	strb	r0, [r7, #1]
	psystem->firmware__enable = 0x01;
 8004d32:	70be      	strb	r6, [r7, #2]
	psystem->system__interrupt_clear = \
 8004d34:	70fe      	strb	r6, [r7, #3]
	psystem->system__mode_start = \
 8004d36:	713b      	strb	r3, [r7, #4]
		VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
}
 8004d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004d3c <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8004d3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d3e:	9d09      	ldr	r5, [sp, #36]	; 0x24

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8004d40:	9f08      	ldr	r7, [sp, #32]
 8004d42:	9501      	str	r5, [sp, #4]
 8004d44:	9700      	str	r7, [sp, #0]
{
 8004d46:	4614      	mov	r4, r2
 8004d48:	461e      	mov	r6, r3
	status = VL53L1_preset_mode_standard_ranging(
 8004d4a:	f7ff ff53 	bl	8004bf4 <VL53L1_preset_mode_standard_ranging>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8004d4e:	b988      	cbnz	r0, 8004d74 <VL53L1_preset_mode_standard_ranging_short_range+0x38>
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a = 0x07;
		ptiming->range_config__vcsel_period_b = 0x05;
 8004d50:	2305      	movs	r3, #5
		ptiming->range_config__vcsel_period_a = 0x07;
 8004d52:	2207      	movs	r2, #7
 8004d54:	71a2      	strb	r2, [r4, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 8004d56:	7263      	strb	r3, [r4, #9]
		ptiming->range_config__sigma_thresh =
 8004d58:	8ae9      	ldrh	r1, [r5, #22]
 8004d5a:	8161      	strh	r1, [r4, #10]
			ptuning_parms->tp_lite_short_sigma_thresh_mm;
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8004d5c:	8ba9      	ldrh	r1, [r5, #28]
 8004d5e:	81a1      	strh	r1, [r4, #12]
			ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
		ptiming->range_config__valid_phase_low = 0x08;
 8004d60:	2108      	movs	r1, #8
 8004d62:	73a1      	strb	r1, [r4, #14]
		ptiming->range_config__valid_phase_high = 0x38;
 8004d64:	2138      	movs	r1, #56	; 0x38
 8004d66:	73e1      	strb	r1, [r4, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0 = 0x07;
 8004d68:	7232      	strb	r2, [r6, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 8004d6a:	7273      	strb	r3, [r6, #9]
		pdynamic->sd_config__initial_phase_sd0 =
 8004d6c:	7a2b      	ldrb	r3, [r5, #8]
 8004d6e:	72b3      	strb	r3, [r6, #10]
			ptuning_parms->tp_init_phase_rtn_lite_short;
		pdynamic->sd_config__initial_phase_sd1 =
 8004d70:	7aeb      	ldrb	r3, [r5, #11]
 8004d72:	72f3      	strb	r3, [r6, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8004d74:	b003      	add	sp, #12
 8004d76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d78 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8004d78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d7a:	9d09      	ldr	r5, [sp, #36]	; 0x24

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8004d7c:	9f08      	ldr	r7, [sp, #32]
 8004d7e:	9501      	str	r5, [sp, #4]
 8004d80:	9700      	str	r7, [sp, #0]
{
 8004d82:	4614      	mov	r4, r2
 8004d84:	461e      	mov	r6, r3
	status = VL53L1_preset_mode_standard_ranging(
 8004d86:	f7ff ff35 	bl	8004bf4 <VL53L1_preset_mode_standard_ranging>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8004d8a:	b988      	cbnz	r0, 8004db0 <VL53L1_preset_mode_standard_ranging_long_range+0x38>
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a = 0x0F;
		ptiming->range_config__vcsel_period_b = 0x0D;
 8004d8c:	230d      	movs	r3, #13
		ptiming->range_config__vcsel_period_a = 0x0F;
 8004d8e:	220f      	movs	r2, #15
 8004d90:	71a2      	strb	r2, [r4, #6]
		ptiming->range_config__vcsel_period_b = 0x0D;
 8004d92:	7263      	strb	r3, [r4, #9]
		ptiming->range_config__sigma_thresh =
 8004d94:	8a69      	ldrh	r1, [r5, #18]
 8004d96:	8161      	strh	r1, [r4, #10]
			ptuning_parms->tp_lite_long_sigma_thresh_mm;
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8004d98:	8b29      	ldrh	r1, [r5, #24]
 8004d9a:	81a1      	strh	r1, [r4, #12]
			ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
		ptiming->range_config__valid_phase_low = 0x08;
 8004d9c:	2108      	movs	r1, #8
 8004d9e:	73a1      	strb	r1, [r4, #14]
		ptiming->range_config__valid_phase_high = 0xB8;
 8004da0:	21b8      	movs	r1, #184	; 0xb8
 8004da2:	73e1      	strb	r1, [r4, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0 = 0x0F;
 8004da4:	7232      	strb	r2, [r6, #8]
		pdynamic->sd_config__woi_sd1 = 0x0D;
 8004da6:	7273      	strb	r3, [r6, #9]
		pdynamic->sd_config__initial_phase_sd0 =
 8004da8:	79ab      	ldrb	r3, [r5, #6]
 8004daa:	72b3      	strb	r3, [r6, #10]
			ptuning_parms->tp_init_phase_rtn_lite_long;
		pdynamic->sd_config__initial_phase_sd1 =
 8004dac:	7a6b      	ldrb	r3, [r5, #9]
 8004dae:	72f3      	strb	r3, [r6, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8004db0:	b003      	add	sp, #12
 8004db2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004db4 <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8004db4:	b573      	push	{r0, r1, r4, r5, r6, lr}

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8004db6:	9e07      	ldr	r6, [sp, #28]
 8004db8:	9601      	str	r6, [sp, #4]
 8004dba:	9e06      	ldr	r6, [sp, #24]
 8004dbc:	9600      	str	r6, [sp, #0]
{
 8004dbe:	460d      	mov	r5, r1
 8004dc0:	461c      	mov	r4, r3
	status = VL53L1_preset_mode_standard_ranging(
 8004dc2:	f7ff ff17 	bl	8004bf4 <VL53L1_preset_mode_standard_ranging>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8004dc6:	b918      	cbnz	r0, 8004dd0 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x1c>
		pgeneral->dss_config__roi_mode_control =
 8004dc8:	2302      	movs	r3, #2
 8004dca:	72ab      	strb	r3, [r5, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config = \
 8004dcc:	233b      	movs	r3, #59	; 0x3b
 8004dce:	7463      	strb	r3, [r4, #17]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8004dd0:	b002      	add	sp, #8
 8004dd2:	bd70      	pop	{r4, r5, r6, pc}

08004dd4 <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8004dd4:	b573      	push	{r0, r1, r4, r5, r6, lr}

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8004dd6:	9e07      	ldr	r6, [sp, #28]
 8004dd8:	9601      	str	r6, [sp, #4]
 8004dda:	9e06      	ldr	r6, [sp, #24]
 8004ddc:	9600      	str	r6, [sp, #0]
{
 8004dde:	460d      	mov	r5, r1
 8004de0:	461c      	mov	r4, r3
	status = VL53L1_preset_mode_standard_ranging(
 8004de2:	f7ff ff07 	bl	8004bf4 <VL53L1_preset_mode_standard_ranging>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8004de6:	b918      	cbnz	r0, 8004df0 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x1c>
		pgeneral->dss_config__roi_mode_control =
 8004de8:	2302      	movs	r3, #2
 8004dea:	72ab      	strb	r3, [r5, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config = \
 8004dec:	235b      	movs	r3, #91	; 0x5b
 8004dee:	7463      	strb	r3, [r4, #17]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8004df0:	b002      	add	sp, #8
 8004df2:	bd70      	pop	{r4, r5, r6, pc}

08004df4 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8004df4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004df6:	9d08      	ldr	r5, [sp, #32]
 8004df8:	9f09      	ldr	r7, [sp, #36]	; 0x24

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8004dfa:	e88d 00a0 	stmia.w	sp, {r5, r7}
{
 8004dfe:	4614      	mov	r4, r2
 8004e00:	461e      	mov	r6, r3
	status = VL53L1_preset_mode_standard_ranging(
 8004e02:	f7ff fef7 	bl	8004bf4 <VL53L1_preset_mode_standard_ranging>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8004e06:	b970      	cbnz	r0, 8004e26 <VL53L1_preset_mode_timed_ranging+0x32>
		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 8004e08:	23b1      	movs	r3, #177	; 0xb1
		pdynamic->system__grouped_parameter_hold = 0x00;
 8004e0a:	74b0      	strb	r0, [r6, #18]
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 8004e0c:	7163      	strb	r3, [r4, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 8004e0e:	23d4      	movs	r3, #212	; 0xd4
 8004e10:	7223      	strb	r3, [r4, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 8004e12:	f44f 63c0 	mov.w	r3, #1536	; 0x600
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8004e16:	7120      	strb	r0, [r4, #4]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8004e18:	71e0      	strb	r0, [r4, #7]
		ptiming->system__intermeasurement_period = 0x00000600;
 8004e1a:	6123      	str	r3, [r4, #16]
		pdynamic->system__seed_config =
 8004e1c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004e20:	71f3      	strb	r3, [r6, #7]
			ptuning_parms->tp_timed_seed_cfg;

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 8004e22:	2340      	movs	r3, #64	; 0x40
 8004e24:	712b      	strb	r3, [r5, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8004e26:	b003      	add	sp, #12
 8004e28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e2a <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8004e2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e2c:	9d08      	ldr	r5, [sp, #32]
 8004e2e:	9f09      	ldr	r7, [sp, #36]	; 0x24

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 8004e30:	e88d 00a0 	stmia.w	sp, {r5, r7}
{
 8004e34:	4614      	mov	r4, r2
 8004e36:	461e      	mov	r6, r3
	status = VL53L1_preset_mode_standard_ranging_short_range(
 8004e38:	f7ff ff80 	bl	8004d3c <VL53L1_preset_mode_standard_ranging_short_range>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8004e3c:	b978      	cbnz	r0, 8004e5e <VL53L1_preset_mode_timed_ranging_short_range+0x34>


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi = 0x01;
 8004e3e:	2301      	movs	r3, #1
		pdynamic->system__grouped_parameter_hold = 0x00;
 8004e40:	74b0      	strb	r0, [r6, #18]
		ptiming->range_config__timeout_macrop_a_hi = 0x01;
 8004e42:	7123      	strb	r3, [r4, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x84;
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi = 0x01;
 8004e44:	71e3      	strb	r3, [r4, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xB1;
 8004e46:	23b1      	movs	r3, #177	; 0xb1
 8004e48:	7223      	strb	r3, [r4, #8]
		ptiming->range_config__timeout_macrop_a_lo = 0x84;
 8004e4a:	2284      	movs	r2, #132	; 0x84

		ptiming->system__intermeasurement_period = 0x00000600;
 8004e4c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
		ptiming->range_config__timeout_macrop_a_lo = 0x84;
 8004e50:	7162      	strb	r2, [r4, #5]
		ptiming->system__intermeasurement_period = 0x00000600;
 8004e52:	6123      	str	r3, [r4, #16]
		pdynamic->system__seed_config =
 8004e54:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004e58:	71f3      	strb	r3, [r6, #7]
			ptuning_parms->tp_timed_seed_cfg;

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 8004e5a:	2340      	movs	r3, #64	; 0x40
 8004e5c:	712b      	strb	r3, [r5, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8004e5e:	b003      	add	sp, #12
 8004e60:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e62 <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8004e62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e64:	9d08      	ldr	r5, [sp, #32]
 8004e66:	9f09      	ldr	r7, [sp, #36]	; 0x24

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 8004e68:	e88d 00a0 	stmia.w	sp, {r5, r7}
{
 8004e6c:	4614      	mov	r4, r2
 8004e6e:	461e      	mov	r6, r3
	status = VL53L1_preset_mode_standard_ranging_long_range(
 8004e70:	f7ff ff82 	bl	8004d78 <VL53L1_preset_mode_standard_ranging_long_range>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8004e74:	b970      	cbnz	r0, 8004e94 <VL53L1_preset_mode_timed_ranging_long_range+0x32>

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
		ptiming->range_config__timeout_macrop_a_lo = 0x97;
 8004e76:	2397      	movs	r3, #151	; 0x97
		pdynamic->system__grouped_parameter_hold = 0x00;
 8004e78:	74b0      	strb	r0, [r6, #18]
		ptiming->range_config__timeout_macrop_a_lo = 0x97;
 8004e7a:	7163      	strb	r3, [r4, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
		ptiming->range_config__timeout_macrop_b_lo = 0xB1;
 8004e7c:	23b1      	movs	r3, #177	; 0xb1
 8004e7e:	7223      	strb	r3, [r4, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 8004e80:	f44f 63c0 	mov.w	r3, #1536	; 0x600
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8004e84:	7120      	strb	r0, [r4, #4]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8004e86:	71e0      	strb	r0, [r4, #7]
		ptiming->system__intermeasurement_period = 0x00000600;
 8004e88:	6123      	str	r3, [r4, #16]
		pdynamic->system__seed_config =
 8004e8a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004e8e:	71f3      	strb	r3, [r6, #7]
			ptuning_parms->tp_timed_seed_cfg;

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 8004e90:	2340      	movs	r3, #64	; 0x40
 8004e92:	712b      	strb	r3, [r5, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8004e94:	b003      	add	sp, #12
 8004e96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e98 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8004e98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 8004e9a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004e9c:	9701      	str	r7, [sp, #4]
 8004e9e:	9f08      	ldr	r7, [sp, #32]
 8004ea0:	9700      	str	r7, [sp, #0]
{
 8004ea2:	460c      	mov	r4, r1
 8004ea4:	461d      	mov	r5, r3
 8004ea6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	status = VL53L1_preset_mode_timed_ranging(
 8004ea8:	f7ff ffa4 	bl	8004df4 <VL53L1_preset_mode_timed_ranging>
		psystem,
		ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8004eac:	b938      	cbnz	r0, 8004ebe <VL53L1_preset_mode_low_power_auto_ranging+0x26>
		status = VL53L1_config_low_power_auto_mode(
 8004eae:	4632      	mov	r2, r6
 8004eb0:	4629      	mov	r1, r5
 8004eb2:	4620      	mov	r0, r4
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8004eb4:	b003      	add	sp, #12
 8004eb6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		status = VL53L1_config_low_power_auto_mode(
 8004eba:	f000 baa1 	b.w	8005400 <VL53L1_config_low_power_auto_mode>
}
 8004ebe:	b003      	add	sp, #12
 8004ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ec2 <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8004ec2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 8004ec4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004ec6:	9701      	str	r7, [sp, #4]
 8004ec8:	9f08      	ldr	r7, [sp, #32]
 8004eca:	9700      	str	r7, [sp, #0]
{
 8004ecc:	460c      	mov	r4, r1
 8004ece:	461d      	mov	r5, r3
 8004ed0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	status = VL53L1_preset_mode_timed_ranging_short_range(
 8004ed2:	f7ff ffaa 	bl	8004e2a <VL53L1_preset_mode_timed_ranging_short_range>
		psystem,
		ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8004ed6:	b938      	cbnz	r0, 8004ee8 <VL53L1_preset_mode_low_power_auto_short_ranging+0x26>
		status = VL53L1_config_low_power_auto_mode(
 8004ed8:	4632      	mov	r2, r6
 8004eda:	4629      	mov	r1, r5
 8004edc:	4620      	mov	r0, r4
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8004ede:	b003      	add	sp, #12
 8004ee0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		status = VL53L1_config_low_power_auto_mode(
 8004ee4:	f000 ba8c 	b.w	8005400 <VL53L1_config_low_power_auto_mode>
}
 8004ee8:	b003      	add	sp, #12
 8004eea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004eec <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8004eec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 8004eee:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004ef0:	9701      	str	r7, [sp, #4]
 8004ef2:	9f08      	ldr	r7, [sp, #32]
 8004ef4:	9700      	str	r7, [sp, #0]
{
 8004ef6:	460c      	mov	r4, r1
 8004ef8:	461d      	mov	r5, r3
 8004efa:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	status = VL53L1_preset_mode_timed_ranging_long_range(
 8004efc:	f7ff ffb1 	bl	8004e62 <VL53L1_preset_mode_timed_ranging_long_range>
		psystem,
		ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8004f00:	b938      	cbnz	r0, 8004f12 <VL53L1_preset_mode_low_power_auto_long_ranging+0x26>
		status = VL53L1_config_low_power_auto_mode(
 8004f02:	4632      	mov	r2, r6
 8004f04:	4629      	mov	r1, r5
 8004f06:	4620      	mov	r0, r4
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8004f08:	b003      	add	sp, #12
 8004f0a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		status = VL53L1_config_low_power_auto_mode(
 8004f0e:	f000 ba77 	b.w	8005400 <VL53L1_config_low_power_auto_mode>
}
 8004f12:	b003      	add	sp, #12
 8004f14:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f16 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8004f16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f18:	9d08      	ldr	r5, [sp, #32]
 8004f1a:	9f09      	ldr	r7, [sp, #36]	; 0x24

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8004f1c:	e88d 00a0 	stmia.w	sp, {r5, r7}
{
 8004f20:	4614      	mov	r4, r2
 8004f22:	461e      	mov	r6, r3
	status = VL53L1_preset_mode_standard_ranging(
 8004f24:	f7ff fe66 	bl	8004bf4 <VL53L1_preset_mode_standard_ranging>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8004f28:	b958      	cbnz	r0, 8004f42 <VL53L1_preset_mode_singleshot_ranging+0x2c>

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 8004f2a:	23b1      	movs	r3, #177	; 0xb1
		pdynamic->system__grouped_parameter_hold = 0x00;
 8004f2c:	74b0      	strb	r0, [r6, #18]
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 8004f2e:	7163      	strb	r3, [r4, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 8004f30:	23d4      	movs	r3, #212	; 0xd4
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8004f32:	7120      	strb	r0, [r4, #4]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8004f34:	71e0      	strb	r0, [r4, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 8004f36:	7223      	strb	r3, [r4, #8]

		pdynamic->system__seed_config =
 8004f38:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004f3c:	71f3      	strb	r3, [r6, #7]
			ptuning_parms->tp_timed_seed_cfg;

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 8004f3e:	2310      	movs	r3, #16
 8004f40:	712b      	strb	r3, [r5, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8004f42:	b003      	add	sp, #12
 8004f44:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f46 <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8004f46:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f48:	9c06      	ldr	r4, [sp, #24]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8004f4a:	9d07      	ldr	r5, [sp, #28]
 8004f4c:	e88d 0030 	stmia.w	sp, {r4, r5}
 8004f50:	f7ff fe50 	bl	8004bf4 <VL53L1_preset_mode_standard_ranging>
		psystem,
		ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8004f54:	b908      	cbnz	r0, 8004f5a <VL53L1_preset_mode_olt+0x14>
		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl = 0x01;
 8004f56:	2301      	movs	r3, #1
 8004f58:	7063      	strb	r3, [r4, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8004f5a:	b003      	add	sp, #12
 8004f5c:	bd30      	pop	{r4, r5, pc}

08004f5e <VL53L1_init_version>:
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	pdev->version.ll_major = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
	pdev->version.ll_minor = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 8004f64:	2302      	movs	r3, #2
 8004f66:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
	pdev->version.ll_build = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 8004f6a:	230a      	movs	r3, #10
 8004f6c:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 8004f70:	f44f 63e6 	mov.w	r3, #1840	; 0x730
 8004f74:	6243      	str	r3, [r0, #36]	; 0x24
 8004f76:	4770      	bx	lr

08004f78 <VL53L1_init_ll_driver_state>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);

	pstate->cfg_device_state = device_state;
	pstate->cfg_stream_count = 0;
 8004f78:	2300      	movs	r3, #0
	pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8004f7a:	2202      	movs	r2, #2
	pstate->cfg_device_state = device_state;
 8004f7c:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
	pstate->cfg_stream_count = 0;
 8004f80:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
	pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8004f84:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
	pstate->cfg_timing_status = 0;
 8004f88:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f

	pstate->rd_device_state = device_state;
 8004f8c:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
	pstate->rd_stream_count = 0;
 8004f90:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
	pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8004f94:	f880 2032 	strb.w	r2, [r0, #50]	; 0x32
	pstate->rd_timing_status = 0;
 8004f98:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
 8004f9c:	4770      	bx	lr

08004f9e <VL53L1_update_ll_driver_rd_state>:

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 8004f9e:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
 8004fa2:	f013 03f0 	ands.w	r3, r3, #240	; 0xf0
 8004fa6:	d108      	bne.n	8004fba <VL53L1_update_ll_driver_rd_state+0x1c>
	     VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {
		pstate->rd_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 8004fa8:	2203      	movs	r2, #3
 8004faa:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
		default:

			pstate->rd_device_state =
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count = 0;
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8004fae:	2202      	movs	r2, #2
			pstate->rd_stream_count = 0;
 8004fb0:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8004fb4:	f880 2032 	strb.w	r2, [r0, #50]	; 0x32
 8004fb8:	e022      	b.n	8005000 <VL53L1_update_ll_driver_rd_state+0x62>
		if (pstate->rd_stream_count == 0xFF) {
 8004fba:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8004fbe:	2bff      	cmp	r3, #255	; 0xff
			pstate->rd_stream_count = 0x80;
 8004fc0:	bf0c      	ite	eq
 8004fc2:	2380      	moveq	r3, #128	; 0x80
			pstate->rd_stream_count++;
 8004fc4:	3301      	addne	r3, #1
 8004fc6:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8004fca:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 8004fce:	f083 0302 	eor.w	r3, r3, #2
 8004fd2:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
		switch (pstate->rd_device_state) {
 8004fd6:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8004fda:	3b03      	subs	r3, #3
 8004fdc:	2b05      	cmp	r3, #5
 8004fde:	d821      	bhi.n	8005024 <VL53L1_update_ll_driver_rd_state+0x86>
 8004fe0:	e8df f003 	tbb	[pc, r3]
 8004fe4:	11202003 	.word	0x11202003
 8004fe8:	1914      	.short	0x1914
			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 8004fea:	f890 31c6 	ldrb.w	r3, [r0, #454]	; 0x1c6
 8004fee:	079b      	lsls	r3, r3, #30
				pstate->rd_device_state =
 8004ff0:	bf4c      	ite	mi
 8004ff2:	2306      	movmi	r3, #6
				pstate->rd_device_state =
 8004ff4:	2308      	movpl	r3, #8
 8004ff6:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
			pstate->rd_stream_count = 0;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
			pstate->rd_timing_status = 0;
 8005000:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33

			break;
 8005004:	e005      	b.n	8005012 <VL53L1_update_ll_driver_rd_state+0x74>
			pstate->rd_stream_count = 0;
 8005006:	2300      	movs	r3, #0
 8005008:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
			pstate->rd_device_state =
 800500c:	2308      	movs	r3, #8
 800500e:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
#endif

	LOG_FUNCTION_END(status);

	return status;
}
 8005012:	2000      	movs	r0, #0
 8005014:	4770      	bx	lr
			pstate->rd_timing_status ^= 0x01;
 8005016:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 800501a:	f083 0301 	eor.w	r3, r3, #1
 800501e:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
 8005022:	e7f3      	b.n	800500c <VL53L1_update_ll_driver_rd_state+0x6e>
			pstate->rd_device_state =
 8005024:	2303      	movs	r3, #3
 8005026:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
			pstate->rd_stream_count = 0;
 800502a:	2300      	movs	r3, #0
 800502c:	e7bf      	b.n	8004fae <VL53L1_update_ll_driver_rd_state+0x10>

0800502e <VL53L1_check_ll_driver_rd_state>:
	device_gph_id = (psys_results->result__interrupt_status &
			 VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 800502e:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
 8005032:	f013 0320 	ands.w	r3, r3, #32
{
 8005036:	4602      	mov	r2, r0
	if ((pdev->sys_ctrl.system__mode_start &
 8005038:	d023      	beq.n	8005082 <VL53L1_check_ll_driver_rd_state+0x54>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 800503a:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
		psys_results->result__range_status &
 800503e:	f890 31cf 	ldrb.w	r3, [r0, #463]	; 0x1cf
		if (pstate->rd_device_state ==
 8005042:	2906      	cmp	r1, #6
 8005044:	d107      	bne.n	8005056 <VL53L1_check_ll_driver_rd_state+0x28>
		    VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {
			if (device_range_status !=
 8005046:	f003 031f 	and.w	r3, r3, #31
 800504a:	2b12      	cmp	r3, #18
			    VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 800504c:	bf0c      	ite	eq
 800504e:	2000      	moveq	r0, #0
 8005050:	f06f 0010 	mvnne.w	r0, #16
 8005054:	4770      	bx	lr
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 8005056:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 800505a:	f890 11d1 	ldrb.w	r1, [r0, #465]	; 0x1d1
 800505e:	4299      	cmp	r1, r3
			 VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8005060:	f892 31ce 	ldrb.w	r3, [r2, #462]	; 0x1ce

			/*
			 * Check Read state GPH ID
			 */

			if (pstate->rd_gph_id != device_gph_id) {
 8005064:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
			 VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8005068:	ea4f 1323 	mov.w	r3, r3, asr #4
			if (pstate->rd_gph_id != device_gph_id) {
 800506c:	f003 0302 	and.w	r3, r3, #2
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 8005070:	bf14      	ite	ne
 8005072:	f06f 0011 	mvnne.w	r0, #17
 8005076:	2000      	moveq	r0, #0
			if (pstate->rd_gph_id != device_gph_id) {
 8005078:	429a      	cmp	r2, r3
				status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 800507a:	bf18      	it	ne
 800507c:	f06f 0012 	mvnne.w	r0, #18
 8005080:	4770      	bx	lr
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005082:	4618      	mov	r0, r3
	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
}
 8005084:	4770      	bx	lr

08005086 <VL53L1_update_ll_driver_cfg_state>:
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 8005086:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
 800508a:	f013 03f0 	ands.w	r3, r3, #240	; 0xf0
 800508e:	d108      	bne.n	80050a2 <VL53L1_update_ll_driver_cfg_state+0x1c>
	     VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {
		pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 8005090:	2203      	movs	r2, #3
 8005092:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->cfg_stream_count = 0;
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8005096:	2202      	movs	r2, #2
			pstate->cfg_stream_count = 0;
 8005098:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800509c:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 80050a0:	e02a      	b.n	80050f8 <VL53L1_update_ll_driver_cfg_state+0x72>
		if (pstate->cfg_stream_count == 0xFF) {
 80050a2:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 80050a6:	2bff      	cmp	r3, #255	; 0xff
			pstate->cfg_stream_count = 0x80;
 80050a8:	bf0c      	ite	eq
 80050aa:	2380      	moveq	r3, #128	; 0x80
			pstate->cfg_stream_count++;
 80050ac:	3301      	addne	r3, #1
 80050ae:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 80050b2:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 80050b6:	f083 0302 	eor.w	r3, r3, #2
 80050ba:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
		switch (pstate->cfg_device_state) {
 80050be:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80050c2:	2b03      	cmp	r3, #3
 80050c4:	d006      	beq.n	80050d4 <VL53L1_update_ll_driver_cfg_state+0x4e>
 80050c6:	2b04      	cmp	r3, #4
 80050c8:	d012      	beq.n	80050f0 <VL53L1_update_ll_driver_cfg_state+0x6a>
			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 80050ca:	2303      	movs	r3, #3
 80050cc:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
			pstate->cfg_stream_count = 0;
 80050d0:	2300      	movs	r3, #0
 80050d2:	e7e0      	b.n	8005096 <VL53L1_update_ll_driver_cfg_state+0x10>
			pstate->cfg_timing_status ^= 0x01;
 80050d4:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 80050d8:	f083 0301 	eor.w	r3, r3, #1
 80050dc:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
			pstate->cfg_stream_count = 1;
 80050e0:	2301      	movs	r3, #1
 80050e2:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 80050e6:	2304      	movs	r3, #4
 80050e8:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
#endif

	LOG_FUNCTION_END(status);

	return status;
}
 80050ec:	2000      	movs	r0, #0
 80050ee:	4770      	bx	lr
			pstate->cfg_timing_status ^= 0x01;
 80050f0:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 80050f4:	f083 0301 	eor.w	r3, r3, #1
			pstate->cfg_timing_status = 0;
 80050f8:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
			break;
 80050fc:	e7f6      	b.n	80050ec <VL53L1_update_ll_driver_cfg_state+0x66>

080050fe <VL53L1_copy_rtn_good_spads_to_buffer>:
{
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer + 0) = pdata->global_config__spad_enables_rtn_0;
 80050fe:	7c03      	ldrb	r3, [r0, #16]
 8005100:	700b      	strb	r3, [r1, #0]
	*(pbuffer + 1) = pdata->global_config__spad_enables_rtn_1;
 8005102:	7c43      	ldrb	r3, [r0, #17]
 8005104:	704b      	strb	r3, [r1, #1]
	*(pbuffer + 2) = pdata->global_config__spad_enables_rtn_2;
 8005106:	7c83      	ldrb	r3, [r0, #18]
 8005108:	708b      	strb	r3, [r1, #2]
	*(pbuffer + 3) = pdata->global_config__spad_enables_rtn_3;
 800510a:	7cc3      	ldrb	r3, [r0, #19]
 800510c:	70cb      	strb	r3, [r1, #3]
	*(pbuffer + 4) = pdata->global_config__spad_enables_rtn_4;
 800510e:	7d03      	ldrb	r3, [r0, #20]
 8005110:	710b      	strb	r3, [r1, #4]
	*(pbuffer + 5) = pdata->global_config__spad_enables_rtn_5;
 8005112:	7d43      	ldrb	r3, [r0, #21]
 8005114:	714b      	strb	r3, [r1, #5]
	*(pbuffer + 6) = pdata->global_config__spad_enables_rtn_6;
 8005116:	7d83      	ldrb	r3, [r0, #22]
 8005118:	718b      	strb	r3, [r1, #6]
	*(pbuffer + 7) = pdata->global_config__spad_enables_rtn_7;
 800511a:	7dc3      	ldrb	r3, [r0, #23]
 800511c:	71cb      	strb	r3, [r1, #7]
	*(pbuffer + 8) = pdata->global_config__spad_enables_rtn_8;
 800511e:	7e03      	ldrb	r3, [r0, #24]
 8005120:	720b      	strb	r3, [r1, #8]
	*(pbuffer + 9) = pdata->global_config__spad_enables_rtn_9;
 8005122:	7e43      	ldrb	r3, [r0, #25]
 8005124:	724b      	strb	r3, [r1, #9]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 8005126:	7e83      	ldrb	r3, [r0, #26]
 8005128:	728b      	strb	r3, [r1, #10]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 800512a:	7ec3      	ldrb	r3, [r0, #27]
 800512c:	72cb      	strb	r3, [r1, #11]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800512e:	7f03      	ldrb	r3, [r0, #28]
 8005130:	730b      	strb	r3, [r1, #12]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 8005132:	7f43      	ldrb	r3, [r0, #29]
 8005134:	734b      	strb	r3, [r1, #13]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 8005136:	7f83      	ldrb	r3, [r0, #30]
 8005138:	738b      	strb	r3, [r1, #14]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 800513a:	7fc3      	ldrb	r3, [r0, #31]
 800513c:	73cb      	strb	r3, [r1, #15]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 800513e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8005142:	740b      	strb	r3, [r1, #16]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 8005144:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8005148:	744b      	strb	r3, [r1, #17]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 800514a:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800514e:	748b      	strb	r3, [r1, #18]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 8005150:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8005154:	74cb      	strb	r3, [r1, #19]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 8005156:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800515a:	750b      	strb	r3, [r1, #20]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800515c:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8005160:	754b      	strb	r3, [r1, #21]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 8005162:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 8005166:	758b      	strb	r3, [r1, #22]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 8005168:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 800516c:	75cb      	strb	r3, [r1, #23]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 800516e:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8005172:	760b      	strb	r3, [r1, #24]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 8005174:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8005178:	764b      	strb	r3, [r1, #25]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800517a:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 800517e:	768b      	strb	r3, [r1, #26]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 8005180:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8005184:	76cb      	strb	r3, [r1, #27]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 8005186:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800518a:	770b      	strb	r3, [r1, #28]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800518c:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8005190:	774b      	strb	r3, [r1, #29]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 8005192:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 8005196:	778b      	strb	r3, [r1, #30]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 8005198:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 800519c:	77cb      	strb	r3, [r1, #31]
 800519e:	4770      	bx	lr

080051a0 <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t ip_value,
	uint16_t count,
	uint8_t    *pbuffer)
{
 80051a0:	4411      	add	r1, r2
	uint16_t i = 0;
	uint16_t data = 0;

	data = ip_value;

	for (i = 0; i < count; i++) {
 80051a2:	4291      	cmp	r1, r2
 80051a4:	d100      	bne.n	80051a8 <VL53L1_i2c_encode_uint16_t+0x8>
		pbuffer[count - i - 1] = (uint8_t)(data & 0x00FF);
		data = data >> 8;
	}
}
 80051a6:	4770      	bx	lr
		pbuffer[count - i - 1] = (uint8_t)(data & 0x00FF);
 80051a8:	f801 0d01 	strb.w	r0, [r1, #-1]!
		data = data >> 8;
 80051ac:	0a00      	lsrs	r0, r0, #8
 80051ae:	e7f8      	b.n	80051a2 <VL53L1_i2c_encode_uint16_t+0x2>

080051b0 <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t count,
	uint8_t    *pbuffer)
{
 80051b0:	180b      	adds	r3, r1, r0
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t value = 0x00;
 80051b2:	2000      	movs	r0, #0

	while (count-- > 0) {
 80051b4:	4299      	cmp	r1, r3
 80051b6:	d100      	bne.n	80051ba <VL53L1_i2c_decode_uint16_t+0xa>
		value = (value << 8) | (uint16_t)*pbuffer++;
	}

	return value;
}
 80051b8:	4770      	bx	lr
		value = (value << 8) | (uint16_t)*pbuffer++;
 80051ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051be:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 80051c2:	b280      	uxth	r0, r0
 80051c4:	e7f6      	b.n	80051b4 <VL53L1_i2c_decode_uint16_t+0x4>

080051c6 <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t ip_value,
	uint16_t count,
	uint8_t    *pbuffer)
{
 80051c6:	4411      	add	r1, r2
	uint16_t i = 0;
	int16_t data = 0;

	data = ip_value;

	for (i = 0; i < count; i++) {
 80051c8:	4291      	cmp	r1, r2
 80051ca:	d100      	bne.n	80051ce <VL53L1_i2c_encode_int16_t+0x8>
		pbuffer[count - i - 1] = (uint8_t)(data & 0x00FF);
		data = data >> 8;
	}
}
 80051cc:	4770      	bx	lr
		pbuffer[count - i - 1] = (uint8_t)(data & 0x00FF);
 80051ce:	f801 0d01 	strb.w	r0, [r1, #-1]!
		data = data >> 8;
 80051d2:	1200      	asrs	r0, r0, #8
 80051d4:	e7f8      	b.n	80051c8 <VL53L1_i2c_encode_int16_t+0x2>

080051d6 <VL53L1_i2c_decode_int16_t>:
	 */

	int16_t value = 0x00;

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 80051d6:	f991 3000 	ldrsb.w	r3, [r1]
 80051da:	4408      	add	r0, r1
 80051dc:	17db      	asrs	r3, r3, #31
		value = 0xFFFF;
	}

	while (count-- > 0) {
 80051de:	4281      	cmp	r1, r0
 80051e0:	d101      	bne.n	80051e6 <VL53L1_i2c_decode_int16_t+0x10>
		value = (value << 8) | (int16_t)*pbuffer++;
	}

	return value;
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	4770      	bx	lr
		value = (value << 8) | (int16_t)*pbuffer++;
 80051e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051ea:	b25b      	sxtb	r3, r3
 80051ec:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80051f0:	e7f5      	b.n	80051de <VL53L1_i2c_decode_int16_t+0x8>

080051f2 <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t ip_value,
	uint16_t count,
	uint8_t    *pbuffer)
{
 80051f2:	4411      	add	r1, r2
	uint16_t i = 0;
	uint32_t data = 0;

	data = ip_value;

	for (i = 0; i < count; i++) {
 80051f4:	4291      	cmp	r1, r2
 80051f6:	d100      	bne.n	80051fa <VL53L1_i2c_encode_uint32_t+0x8>
		pbuffer[count - i - 1] = (uint8_t)(data & 0x00FF);
		data = data >> 8;
	}
}
 80051f8:	4770      	bx	lr
		pbuffer[count - i - 1] = (uint8_t)(data & 0x00FF);
 80051fa:	f801 0d01 	strb.w	r0, [r1, #-1]!
		data = data >> 8;
 80051fe:	0a00      	lsrs	r0, r0, #8
 8005200:	e7f8      	b.n	80051f4 <VL53L1_i2c_encode_uint32_t+0x2>

08005202 <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t count,
	uint8_t    *pbuffer)
{
 8005202:	180b      	adds	r3, r1, r0
	/*
	 * Decodes a uint32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint32_t value = 0x00;
 8005204:	2000      	movs	r0, #0

	while (count-- > 0) {
 8005206:	4299      	cmp	r1, r3
 8005208:	d100      	bne.n	800520c <VL53L1_i2c_decode_uint32_t+0xa>
		value = (value << 8) | (uint32_t)*pbuffer++;
	}

	return value;
}
 800520a:	4770      	bx	lr
		value = (value << 8) | (uint32_t)*pbuffer++;
 800520c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005210:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8005214:	e7f7      	b.n	8005206 <VL53L1_i2c_decode_uint32_t+0x4>

08005216 <VL53L1_i2c_decode_int32_t>:
	 */

	int32_t value = 0x00;

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 8005216:	f991 3000 	ldrsb.w	r3, [r1]
 800521a:	4408      	add	r0, r1
 800521c:	17db      	asrs	r3, r3, #31
		value = 0xFFFFFFFF;
	}

	while (count-- > 0) {
 800521e:	4281      	cmp	r1, r0
 8005220:	d101      	bne.n	8005226 <VL53L1_i2c_decode_int32_t+0x10>
		value = (value << 8) | (int32_t)*pbuffer++;
	}

	return value;
}
 8005222:	4618      	mov	r0, r3
 8005224:	4770      	bx	lr
		value = (value << 8) | (int32_t)*pbuffer++;
 8005226:	f811 2b01 	ldrb.w	r2, [r1], #1
 800522a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800522e:	e7f6      	b.n	800521e <VL53L1_i2c_decode_int32_t+0x8>

08005230 <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t fast_osc_frequency,
	uint8_t vcsel_period)
{
 8005230:	b538      	push	{r3, r4, r5, lr}
 8005232:	460d      	mov	r5, r1

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 8005234:	f000 f938 	bl	80054a8 <VL53L1_calc_pll_period_us>
 8005238:	4604      	mov	r4, r0

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 800523a:	4628      	mov	r0, r5
 800523c:	f000 f939 	bl	80054b2 <VL53L1_decode_vcsel_period>
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 8005240:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8005244:	4363      	muls	r3, r4
		(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
		pll_period_us;
	macro_period_us = macro_period_us >> 6;
 8005246:	099b      	lsrs	r3, r3, #6

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 8005248:	4358      	muls	r0, r3
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
}
 800524a:	0980      	lsrs	r0, r0, #6
 800524c:	bd38      	pop	{r3, r4, r5, pc}

0800524e <VL53L1_calc_range_ignore_threshold>:

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);

	if (x_gradient < 0) {
 800524e:	2900      	cmp	r1, #0
		x_gradient_int = x_gradient * -1;
 8005250:	bfba      	itte	lt
 8005252:	4249      	neglt	r1, r1
 8005254:	b289      	uxthlt	r1, r1
 8005256:	2100      	movge	r1, #0
	}

	if (y_gradient < 0) {
 8005258:	2a00      	cmp	r2, #0
		y_gradient_int = y_gradient * -1;
 800525a:	bfba      	itte	lt
 800525c:	4252      	neglt	r2, r2
 800525e:	b292      	uxthlt	r2, r2
 8005260:	2200      	movge	r2, #0
 8005262:	b209      	sxth	r1, r1

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 8005264:	fa01 f282 	sxtah	r2, r1, r2
{
 8005268:	b510      	push	{r4, lr}

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800526a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800526e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8005272:	0100      	lsls	r0, r0, #4
	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 8005274:	0152      	lsls	r2, r2, #5
	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 8005276:	fb90 f0f4 	sdiv	r0, r0, r4
	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800527a:	fb92 f2f1 	sdiv	r2, r2, r1

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800527e:	4410      	add	r0, r2

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 8005280:	4358      	muls	r0, r3

	range_ignore_thresh_int = (range_ignore_thresh_int + (1 << 4)) / (1 << 5);
 8005282:	3010      	adds	r0, #16
 8005284:	2320      	movs	r3, #32
 8005286:	fb90 f0f3 	sdiv	r0, r0, r3
		    range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 800528a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800528e:	4298      	cmp	r0, r3
 8005290:	bfa8      	it	ge
 8005292:	4618      	movge	r0, r3
}
 8005294:	b280      	uxth	r0, r0
 8005296:	bd10      	pop	{r4, pc}

08005298 <VL53L1_calc_timeout_us>:
	uint64_t tmp = 0;

	LOG_FUNCTION_START("");

	tmp = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
	tmp += 0x00800;
 8005298:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800529c:	2300      	movs	r3, #0
 800529e:	fbe1 2300 	umlal	r2, r3, r1, r0
	tmp = tmp >> 12;
 80052a2:	0b10      	lsrs	r0, r2, #12
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
}
 80052a4:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 80052a8:	4770      	bx	lr

080052aa <VL53L1_encode_timeout>:

	uint16_t encoded_timeout = 0;
	uint32_t ls_byte = 0;
	uint16_t ms_byte = 0;

	if (timeout_mclks > 0) {
 80052aa:	b150      	cbz	r0, 80052c2 <VL53L1_encode_timeout+0x18>
		ls_byte = timeout_mclks - 1;
 80052ac:	3801      	subs	r0, #1
 80052ae:	2300      	movs	r3, #0

		while ((ls_byte & 0xFFFFFF00) > 0) {
 80052b0:	f030 01ff 	bics.w	r1, r0, #255	; 0xff
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	f103 0301 	add.w	r3, r3, #1
 80052ba:	d103      	bne.n	80052c4 <VL53L1_encode_timeout+0x1a>
			ls_byte = ls_byte >> 1;
			ms_byte++;
		}

		encoded_timeout = (ms_byte << 8)
 80052bc:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 80052c0:	b280      	uxth	r0, r0
				  + (uint16_t)(ls_byte & 0x000000FF);
	}

	return encoded_timeout;
}
 80052c2:	4770      	bx	lr
			ls_byte = ls_byte >> 1;
 80052c4:	0840      	lsrs	r0, r0, #1
 80052c6:	e7f3      	b.n	80052b0 <VL53L1_encode_timeout+0x6>

080052c8 <VL53L1_calc_encoded_timeout>:
		((timeout_us << 12) + (macro_period_us >> 1)) /
 80052c8:	0300      	lsls	r0, r0, #12
 80052ca:	eb00 0051 	add.w	r0, r0, r1, lsr #1
	timeout_encoded =
 80052ce:	fbb0 f0f1 	udiv	r0, r0, r1
 80052d2:	f7ff bfea 	b.w	80052aa <VL53L1_encode_timeout>

080052d6 <VL53L1_decode_timeout>:
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;

	timeout_macro_clks = ((uint32_t)(encoded_timeout & 0x00FF)
 80052d6:	b2c3      	uxtb	r3, r0
			      << (uint32_t)((encoded_timeout & 0xFF00) >> 8)) + 1;
 80052d8:	0a00      	lsrs	r0, r0, #8
 80052da:	fa03 f000 	lsl.w	r0, r3, r0

	return timeout_macro_clks;
}
 80052de:	3001      	adds	r0, #1
 80052e0:	4770      	bx	lr

080052e2 <VL53L1_calc_decoded_timeout_us>:
{
 80052e2:	b508      	push	{r3, lr}
	timeout_mclks =
 80052e4:	f7ff fff7 	bl	80052d6 <VL53L1_decode_timeout>
	tmp += 0x00800;
 80052e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052ec:	2300      	movs	r3, #0
 80052ee:	fbe0 2301 	umlal	r2, r3, r0, r1
	tmp = tmp >> 12;
 80052f2:	0b10      	lsrs	r0, r2, #12
}
 80052f4:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 80052f8:	bd08      	pop	{r3, pc}

080052fa <VL53L1_calc_timeout_register_values>:
	uint32_t mm_config_timeout_us,
	uint32_t range_config_timeout_us,
	uint16_t fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 80052fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052fe:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005300:	4605      	mov	r5, r0
 8005302:	4688      	mov	r8, r1
 8005304:	4617      	mov	r7, r2
	uint32_t timeout_mclks = 0;
	uint16_t timeout_encoded = 0;

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 8005306:	4699      	mov	r9, r3
 8005308:	b393      	cbz	r3, 8005370 <VL53L1_calc_timeout_register_values+0x76>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
 800530a:	79a1      	ldrb	r1, [r4, #6]
 800530c:	4618      	mov	r0, r3
 800530e:	f7ff ff8f 	bl	8005230 <VL53L1_calc_macro_period_us>
 8005312:	4606      	mov	r6, r0
		((timeout_us << 12) + (macro_period_us >> 1)) /
 8005314:	0328      	lsls	r0, r5, #12
		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
			timeout_mclks = 0xFF;

		pgeneral->phasecal_config__timeout_macrop =
			(uint8_t)timeout_mclks;
 8005316:	9b08      	ldr	r3, [sp, #32]
		((timeout_us << 12) + (macro_period_us >> 1)) /
 8005318:	eb00 0056 	add.w	r0, r0, r6, lsr #1
	timeout_mclks =
 800531c:	fbb0 f0f6 	udiv	r0, r0, r6
			(uint8_t)timeout_mclks;
 8005320:	28ff      	cmp	r0, #255	; 0xff
 8005322:	bf28      	it	cs
 8005324:	20ff      	movcs	r0, #255	; 0xff
 8005326:	71d8      	strb	r0, [r3, #7]

		/*  Update MM Timing A timeout */
		timeout_encoded =
 8005328:	4631      	mov	r1, r6
 800532a:	4640      	mov	r0, r8
 800532c:	f7ff ffcc 	bl	80052c8 <VL53L1_calc_encoded_timeout>
			VL53L1_calc_encoded_timeout(
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
			(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8005330:	0a03      	lsrs	r3, r0, #8
 8005332:	7023      	strb	r3, [r4, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
			(uint8_t)(timeout_encoded & 0x00FF);
 8005334:	7060      	strb	r0, [r4, #1]

		/* Update Range Timing A timeout */
		timeout_encoded =
 8005336:	4631      	mov	r1, r6
 8005338:	4638      	mov	r0, r7
 800533a:	f7ff ffc5 	bl	80052c8 <VL53L1_calc_encoded_timeout>
			VL53L1_calc_encoded_timeout(
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
			(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800533e:	0a03      	lsrs	r3, r0, #8
 8005340:	7123      	strb	r3, [r4, #4]
		ptiming->range_config__timeout_macrop_a_lo =
			(uint8_t)(timeout_encoded & 0x00FF);
 8005342:	7160      	strb	r0, [r4, #5]

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
 8005344:	7a61      	ldrb	r1, [r4, #9]
 8005346:	4648      	mov	r0, r9
 8005348:	f7ff ff72 	bl	8005230 <VL53L1_calc_macro_period_us>
 800534c:	4605      	mov	r5, r0
			VL53L1_calc_macro_period_us(
				fast_osc_frequency,
				ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
 800534e:	4601      	mov	r1, r0
 8005350:	4640      	mov	r0, r8
 8005352:	f7ff ffb9 	bl	80052c8 <VL53L1_calc_encoded_timeout>
			VL53L1_calc_encoded_timeout(
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
			(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8005356:	0a03      	lsrs	r3, r0, #8
 8005358:	70a3      	strb	r3, [r4, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
			(uint8_t)(timeout_encoded & 0x00FF);
 800535a:	70e0      	strb	r0, [r4, #3]

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 800535c:	4629      	mov	r1, r5
 800535e:	4638      	mov	r0, r7
 8005360:	f7ff ffb2 	bl	80052c8 <VL53L1_calc_encoded_timeout>
			range_config_timeout_us,
			macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
			(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8005364:	0a03      	lsrs	r3, r0, #8
		ptiming->range_config__timeout_macrop_b_lo =
			(uint8_t)(timeout_encoded & 0x00FF);
 8005366:	7220      	strb	r0, [r4, #8]
			(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8005368:	71e3      	strb	r3, [r4, #7]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 800536a:	2000      	movs	r0, #0
 800536c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8005370:	f06f 000e 	mvn.w	r0, #14
	}

	LOG_FUNCTION_END(0);

	return status;
}
 8005374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005378 <VL53L1_encode_row_col>:
{
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 8005378:	2807      	cmp	r0, #7
		*pspad_number = 128 + (col << 3) + (15 - row);
 800537a:	bf8b      	itete	hi
 800537c:	ebc0 00c1 	rsbhi	r0, r0, r1, lsl #3
	} else {
		*pspad_number = ((15 - col) << 3) + row;
 8005380:	f1c1 010f 	rsbls	r1, r1, #15
		*pspad_number = 128 + (col << 3) + (15 - row);
 8005384:	3871      	subhi	r0, #113	; 0x71
		*pspad_number = ((15 - col) << 3) + row;
 8005386:	eb00 00c1 	addls.w	r0, r0, r1, lsl #3
 800538a:	7010      	strb	r0, [r2, #0]
 800538c:	4770      	bx	lr

0800538e <VL53L1_decode_zone_size>:
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 800538e:	0903      	lsrs	r3, r0, #4
	*pwidth = encoded_xy_size & 0x0F;
 8005390:	f000 000f 	and.w	r0, r0, #15
	*pheight = encoded_xy_size >> 4;
 8005394:	7013      	strb	r3, [r2, #0]
	*pwidth = encoded_xy_size & 0x0F;
 8005396:	7008      	strb	r0, [r1, #0]
 8005398:	4770      	bx	lr

0800539a <VL53L1_encode_zone_size>:
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 800539a:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800539e:	7011      	strb	r1, [r2, #0]
 80053a0:	4770      	bx	lr

080053a2 <VL53L1_low_power_auto_data_init>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 80053a2:	2303      	movs	r3, #3
 80053a4:	f880 32e4 	strb.w	r3, [r0, #740]	; 0x2e4
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 80053a8:	2300      	movs	r3, #0
 80053aa:	f880 32e5 	strb.w	r3, [r0, #741]	; 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 80053ae:	f880 32e6 	strb.w	r3, [r0, #742]	; 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 80053b2:	f880 32e7 	strb.w	r3, [r0, #743]	; 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 80053b6:	f880 32e8 	strb.w	r3, [r0, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 80053ba:	f880 32e9 	strb.w	r3, [r0, #745]	; 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 80053be:	f880 32ea 	strb.w	r3, [r0, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 80053c2:	f8c0 32ec 	str.w	r3, [r0, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 80053c6:	f8a0 32f0 	strh.w	r3, [r0, #752]	; 0x2f0

	LOG_FUNCTION_END(status);

	return status;
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	4770      	bx	lr

080053ce <VL53L1_low_power_auto_data_stop_range>:
	LOG_FUNCTION_START("");

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 80053ce:	22ff      	movs	r2, #255	; 0xff
 80053d0:	f880 22e6 	strb.w	r2, [r0, #742]	; 0x2e6

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 80053d4:	2200      	movs	r2, #0
 80053d6:	f880 22ea 	strb.w	r2, [r0, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 80053da:	f8c0 22ec 	str.w	r2, [r0, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 80053de:	f8a0 22f0 	strh.w	r2, [r0, #752]	; 0x2f0

	/* restore vhv configs */
	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 80053e2:	f890 22e8 	ldrb.w	r2, [r0, #744]	; 0x2e8
{
 80053e6:	4603      	mov	r3, r0
	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 80053e8:	b10a      	cbz	r2, 80053ee <VL53L1_low_power_auto_data_stop_range+0x20>
		pdev->stat_nvm.vhv_config__init =
 80053ea:	f880 2163 	strb.w	r2, [r0, #355]	; 0x163
			pdev->low_power_auto_data.saved_vhv_init;
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 80053ee:	f893 22e9 	ldrb.w	r2, [r3, #745]	; 0x2e9
 80053f2:	b10a      	cbz	r2, 80053f8 <VL53L1_low_power_auto_data_stop_range+0x2a>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 80053f4:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
			pdev->low_power_auto_data.saved_vhv_timeout;

	/* remove phasecal override */
	pdev->gen_cfg.phasecal_config__override = 0x00;
 80053f8:	2000      	movs	r0, #0
 80053fa:	f883 018d 	strb.w	r0, [r3, #397]	; 0x18d

	LOG_FUNCTION_END(status);

	return status;
}
 80053fe:	4770      	bx	lr

08005400 <VL53L1_config_low_power_auto_mode>:
	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 8005400:	2301      	movs	r3, #1
 8005402:	7053      	strb	r3, [r2, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 8005404:	2300      	movs	r3, #0
 8005406:	7093      	strb	r3, [r2, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 8005408:	228b      	movs	r2, #139	; 0x8b
 800540a:	744a      	strb	r2, [r1, #17]
		/* VL53L1_SEQUENCE_MM1_EN | \*/
		/* VL53L1_SEQUENCE_MM2_EN | \*/
		VL53L1_SEQUENCE_RANGE_EN;

	/* Set DSS to manual/expected SPADs */
	pgeneral->dss_config__manual_effective_spads_select = 200 << 8;
 800540c:	f44f 4248 	mov.w	r2, #51200	; 0xc800
 8005410:	8202      	strh	r2, [r0, #16]
	pgeneral->dss_config__roi_mode_control =
 8005412:	2202      	movs	r2, #2
 8005414:	7282      	strb	r2, [r0, #10]
		VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

	LOG_FUNCTION_END(status);

	return status;
}
 8005416:	4618      	mov	r0, r3
 8005418:	4770      	bx	lr

0800541a <VL53L1_low_power_auto_setup_manual_calibration>:

	LOG_FUNCTION_START("");

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800541a:	f890 2163 	ldrb.w	r2, [r0, #355]	; 0x163
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800541e:	f890 3160 	ldrb.w	r3, [r0, #352]	; 0x160
	pdev->low_power_auto_data.saved_vhv_init =
 8005422:	f880 22e8 	strb.w	r2, [r0, #744]	; 0x2e8

	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 8005426:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800542a:	f880 2163 	strb.w	r2, [r0, #355]	; 0x163
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800542e:	f890 22e4 	ldrb.w	r2, [r0, #740]	; 0x2e4
	pdev->low_power_auto_data.saved_vhv_timeout =
 8005432:	f880 32e9 	strb.w	r3, [r0, #745]	; 0x2e9
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8005436:	f003 0303 	and.w	r3, r3, #3
 800543a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800543e:	f880 3160 	strb.w	r3, [r0, #352]	; 0x160
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
 8005442:	2301      	movs	r3, #1
 8005444:	f880 318d 	strb.w	r3, [r0, #397]	; 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 8005448:	f890 32ae 	ldrb.w	r3, [r0, #686]	; 0x2ae
	pdev->low_power_auto_data.first_run_phasecal_result =
 800544c:	f880 32ea 	strb.w	r3, [r0, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 8005450:	f880 3187 	strb.w	r3, [r0, #391]	; 0x187
		pdev->low_power_auto_data.first_run_phasecal_result;

	LOG_FUNCTION_END(status);

	return status;
}
 8005454:	2000      	movs	r0, #0
 8005456:	4770      	bx	lr

08005458 <VL53L1_low_power_auto_update_DSS>:
	/* shift up to take advantage of 32 bits */
	/* 9.23 format */
	utemp32a = utemp32a << 16;

	/* check SPAD count */
	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 8005458:	f8b0 31d2 	ldrh.w	r3, [r0, #466]	; 0x1d2
 800545c:	b30b      	cbz	r3, 80054a2 <VL53L1_low_power_auto_update_DSS+0x4a>
		   pdev->sys_results.result__ambient_count_rate_mcps_sd0;
 800545e:	f8b0 11d6 	ldrh.w	r1, [r0, #470]	; 0x1d6
	utemp32a = pdev->sys_results.result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
 8005462:	f8b0 21de 	ldrh.w	r2, [r0, #478]	; 0x1de
 8005466:	440a      	add	r2, r1
 8005468:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800546c:	428a      	cmp	r2, r1
 800546e:	bfa8      	it	ge
 8005470:	460a      	movge	r2, r1
	utemp32a = utemp32a << 16;
 8005472:	0412      	lsls	r2, r2, #16
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
	else {
		/* format 17.15 */
		utemp32a = utemp32a /
 8005474:	fbb2 f3f3 	udiv	r3, r2, r3
			   pdev->sys_results.result__dss_actual_effective_spads_sd0;
		/* save intermediate result */
		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 8005478:	f8c0 32ec 	str.w	r3, [r0, #748]	; 0x2ec
		 * format 9.23 */
		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
			   16;

		/* check for divide by zero */
		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps == 0)
 800547c:	b18b      	cbz	r3, 80054a2 <VL53L1_low_power_auto_update_DSS+0x4a>
		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 800547e:	f8b0 2164 	ldrh.w	r2, [r0, #356]	; 0x164
 8005482:	0412      	lsls	r2, r2, #16
			status = VL53L1_ERROR_DIVISION_BY_ZERO;
		else {
			/* divide by rate per spad
			 * format 24.8 */
			utemp32a = utemp32a /
 8005484:	fbb2 f3f3 	udiv	r3, r2, r3
			if (utemp32a > 0xFFFF)
				utemp32a = 0xFFFF;

			/* save result in low power auto data */
			pdev->low_power_auto_data.dss__required_spads =
				(uint16_t)utemp32a;
 8005488:	428b      	cmp	r3, r1
 800548a:	bf28      	it	cs
 800548c:	460b      	movcs	r3, r1
 800548e:	b29b      	uxth	r3, r3
	if (status == VL53L1_ERROR_DIVISION_BY_ZERO) {
		/* We want to gracefully set a spad target, not just exit with
		 * an error */

		/* set target to mid point */
		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 8005490:	f8a0 32f0 	strh.w	r3, [r0, #752]	; 0x2f0

		/* override DSS config */
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 8005494:	f8a0 3194 	strh.w	r3, [r0, #404]	; 0x194
			pdev->low_power_auto_data.dss__required_spads;
		pdev->gen_cfg.dss_config__roi_mode_control =
 8005498:	2302      	movs	r3, #2
 800549a:	f880 318e 	strb.w	r3, [r0, #398]	; 0x18e
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800549e:	2000      	movs	r0, #0
 80054a0:	4770      	bx	lr
		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 80054a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054a6:	e7f3      	b.n	8005490 <VL53L1_low_power_auto_update_DSS+0x38>

080054a8 <VL53L1_calc_pll_period_us>:
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
}
 80054a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80054ac:	fb93 f0f0 	sdiv	r0, r3, r0
 80054b0:	4770      	bx	lr

080054b2 <VL53L1_decode_vcsel_period>:
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 80054b2:	3001      	adds	r0, #1
 80054b4:	0040      	lsls	r0, r0, #1

	return vcsel_period_pclks;
}
 80054b6:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 80054ba:	4770      	bx	lr

080054bc <VL53L1_decode_row_col>:
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 80054bc:	0603      	lsls	r3, r0, #24
		*prow = 8 + ((255 - spad_number) & 0x07);
 80054be:	bf49      	itett	mi
 80054c0:	43c3      	mvnmi	r3, r0
		*pcol = (spad_number - 128) >> 3;
	} else {
		*prow = spad_number & 0x07;
 80054c2:	f000 0307 	andpl.w	r3, r0, #7
		*prow = 8 + ((255 - spad_number) & 0x07);
 80054c6:	f003 0307 	andmi.w	r3, r3, #7
		*pcol = (spad_number - 128) >> 3;
 80054ca:	3880      	submi	r0, #128	; 0x80
		*pcol = (127 - spad_number) >> 3;
 80054cc:	bf54      	ite	pl
 80054ce:	f1c0 007f 	rsbpl	r0, r0, #127	; 0x7f
		*prow = 8 + ((255 - spad_number) & 0x07);
 80054d2:	3308      	addmi	r3, #8
		*pcol = (127 - spad_number) >> 3;
 80054d4:	ea4f 00e0 	mov.w	r0, r0, asr #3
		*prow = 8 + ((255 - spad_number) & 0x07);
 80054d8:	bf4c      	ite	mi
 80054da:	700b      	strbmi	r3, [r1, #0]
		*prow = spad_number & 0x07;
 80054dc:	700b      	strbpl	r3, [r1, #0]
		*pcol = (127 - spad_number) >> 3;
 80054de:	7010      	strb	r0, [r2, #0]
 80054e0:	4770      	bx	lr

080054e2 <VL53L1_i2c_encode_static_nvm_managed>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 80054e2:	290a      	cmp	r1, #10
{
 80054e4:	b538      	push	{r3, r4, r5, lr}
 80054e6:	4605      	mov	r5, r0
 80054e8:	4614      	mov	r4, r2
	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 80054ea:	d924      	bls.n	8005536 <VL53L1_i2c_encode_static_nvm_managed+0x54>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer + 0) =
		pdata->i2c_slave__device_address & 0x7F;
 80054ec:	7803      	ldrb	r3, [r0, #0]
 80054ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer + 0) =
 80054f2:	7013      	strb	r3, [r2, #0]
	*(pbuffer + 1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 80054f4:	7843      	ldrb	r3, [r0, #1]
 80054f6:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer + 1) =
 80054fa:	7053      	strb	r3, [r2, #1]
	*(pbuffer + 2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 80054fc:	7883      	ldrb	r3, [r0, #2]
 80054fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer + 2) =
 8005502:	7093      	strb	r3, [r2, #2]
	*(pbuffer + 3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8005504:	78c3      	ldrb	r3, [r0, #3]
 8005506:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer + 3) =
 800550a:	70d3      	strb	r3, [r2, #3]
	*(pbuffer + 4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 800550c:	7903      	ldrb	r3, [r0, #4]
 800550e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer + 4) =
 8005512:	7113      	strb	r3, [r2, #4]
	VL53L1_i2c_encode_uint16_t(
 8005514:	2102      	movs	r1, #2
 8005516:	3205      	adds	r2, #5
 8005518:	88c0      	ldrh	r0, [r0, #6]
 800551a:	f7ff fe41 	bl	80051a0 <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer + 5);
	*(pbuffer + 7) =
		pdata->vhv_config__timeout_macrop_loop_bound;
 800551e:	7a2b      	ldrb	r3, [r5, #8]
	*(pbuffer + 7) =
 8005520:	71e3      	strb	r3, [r4, #7]
	*(pbuffer + 8) =
		pdata->vhv_config__count_thresh;
 8005522:	7a6b      	ldrb	r3, [r5, #9]
	*(pbuffer + 8) =
 8005524:	7223      	strb	r3, [r4, #8]
	*(pbuffer + 9) =
		pdata->vhv_config__offset & 0x3F;
 8005526:	7aab      	ldrb	r3, [r5, #10]
 8005528:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer + 9) =
 800552c:	7263      	strb	r3, [r4, #9]
	*(pbuffer + 10) =
		pdata->vhv_config__init;
 800552e:	7aeb      	ldrb	r3, [r5, #11]
	*(pbuffer + 10) =
 8005530:	72a3      	strb	r3, [r4, #10]
	LOG_FUNCTION_END(status);


	return status;
 8005532:	2000      	movs	r0, #0
 8005534:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8005536:	f06f 0009 	mvn.w	r0, #9
}
 800553a:	bd38      	pop	{r3, r4, r5, pc}

0800553c <VL53L1_i2c_decode_static_nvm_managed>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800553c:	280a      	cmp	r0, #10
{
 800553e:	b538      	push	{r3, r4, r5, lr}
 8005540:	460d      	mov	r5, r1
 8005542:	4614      	mov	r4, r2
	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8005544:	d924      	bls.n	8005590 <VL53L1_i2c_decode_static_nvm_managed+0x54>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->i2c_slave__device_address =
		(*(pbuffer + 0)) & 0x7F;
 8005546:	780b      	ldrb	r3, [r1, #0]
 8005548:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->i2c_slave__device_address =
 800554c:	7013      	strb	r3, [r2, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer + 1)) & 0xF;
 800554e:	784b      	ldrb	r3, [r1, #1]
 8005550:	f003 030f 	and.w	r3, r3, #15
	pdata->ana_config__vhv_ref_sel_vddpix =
 8005554:	7053      	strb	r3, [r2, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer + 2)) & 0x7F;
 8005556:	788b      	ldrb	r3, [r1, #2]
 8005558:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->ana_config__vhv_ref_sel_vquench =
 800555c:	7093      	strb	r3, [r2, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer + 3)) & 0x3;
 800555e:	78cb      	ldrb	r3, [r1, #3]
 8005560:	f003 0303 	and.w	r3, r3, #3
	pdata->ana_config__reg_avdd1v2_sel =
 8005564:	70d3      	strb	r3, [r2, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer + 4)) & 0x7F;
 8005566:	790b      	ldrb	r3, [r1, #4]
 8005568:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->ana_config__fast_osc__trim =
 800556c:	7113      	strb	r3, [r2, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 5));
 800556e:	3105      	adds	r1, #5
 8005570:	2002      	movs	r0, #2
 8005572:	f7ff fe1d 	bl	80051b0 <VL53L1_i2c_decode_uint16_t>
	pdata->osc_measured__fast_osc__frequency =
 8005576:	80e0      	strh	r0, [r4, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 8005578:	79eb      	ldrb	r3, [r5, #7]
 800557a:	7223      	strb	r3, [r4, #8]
		(*(pbuffer + 7));
	pdata->vhv_config__count_thresh =
 800557c:	7a2b      	ldrb	r3, [r5, #8]
 800557e:	7263      	strb	r3, [r4, #9]
		(*(pbuffer + 8));
	pdata->vhv_config__offset =
		(*(pbuffer + 9)) & 0x3F;
 8005580:	7a6b      	ldrb	r3, [r5, #9]
 8005582:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->vhv_config__offset =
 8005586:	72a3      	strb	r3, [r4, #10]
	pdata->vhv_config__init =
 8005588:	7aab      	ldrb	r3, [r5, #10]
 800558a:	72e3      	strb	r3, [r4, #11]
		(*(pbuffer + 10));

	LOG_FUNCTION_END(status);

	return status;
 800558c:	2000      	movs	r0, #0
 800558e:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8005590:	f06f 0009 	mvn.w	r0, #9
}
 8005594:	bd38      	pop	{r3, r4, r5, pc}

08005596 <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 8005596:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005598:	460c      	mov	r4, r1
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status = VL53L1_ReadMulti(
 800559a:	230b      	movs	r3, #11
 800559c:	aa01      	add	r2, sp, #4
 800559e:	2101      	movs	r1, #1
 80055a0:	f007 ff8a 	bl	800d4b8 <VL53L1_ReadMulti>
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 80055a4:	b920      	cbnz	r0, 80055b0 <VL53L1_get_static_nvm_managed+0x1a>
		status = VL53L1_i2c_decode_static_nvm_managed(
 80055a6:	4622      	mov	r2, r4
 80055a8:	a901      	add	r1, sp, #4
 80055aa:	200b      	movs	r0, #11
 80055ac:	f7ff ffc6 	bl	800553c <VL53L1_i2c_decode_static_nvm_managed>
			pdata);

	LOG_FUNCTION_END(status);

	return status;
}
 80055b0:	b004      	add	sp, #16
 80055b2:	bd10      	pop	{r4, pc}

080055b4 <VL53L1_i2c_encode_customer_nvm_managed>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 80055b4:	2916      	cmp	r1, #22
{
 80055b6:	b538      	push	{r3, r4, r5, lr}
 80055b8:	4604      	mov	r4, r0
 80055ba:	4615      	mov	r5, r2
	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 80055bc:	d948      	bls.n	8005650 <VL53L1_i2c_encode_customer_nvm_managed+0x9c>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer + 0) =
		pdata->global_config__spad_enables_ref_0;
 80055be:	7803      	ldrb	r3, [r0, #0]
	*(pbuffer + 0) =
 80055c0:	7013      	strb	r3, [r2, #0]
	*(pbuffer + 1) =
		pdata->global_config__spad_enables_ref_1;
 80055c2:	7843      	ldrb	r3, [r0, #1]
	*(pbuffer + 1) =
 80055c4:	7053      	strb	r3, [r2, #1]
	*(pbuffer + 2) =
		pdata->global_config__spad_enables_ref_2;
 80055c6:	7883      	ldrb	r3, [r0, #2]
	*(pbuffer + 2) =
 80055c8:	7093      	strb	r3, [r2, #2]
	*(pbuffer + 3) =
		pdata->global_config__spad_enables_ref_3;
 80055ca:	78c3      	ldrb	r3, [r0, #3]
	*(pbuffer + 3) =
 80055cc:	70d3      	strb	r3, [r2, #3]
	*(pbuffer + 4) =
		pdata->global_config__spad_enables_ref_4;
 80055ce:	7903      	ldrb	r3, [r0, #4]
	*(pbuffer + 4) =
 80055d0:	7113      	strb	r3, [r2, #4]
	*(pbuffer + 5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 80055d2:	7943      	ldrb	r3, [r0, #5]
 80055d4:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer + 5) =
 80055d8:	7153      	strb	r3, [r2, #5]
	*(pbuffer + 6) =
		pdata->global_config__ref_en_start_select;
 80055da:	7983      	ldrb	r3, [r0, #6]
	*(pbuffer + 6) =
 80055dc:	7193      	strb	r3, [r2, #6]
	*(pbuffer + 7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 80055de:	79c3      	ldrb	r3, [r0, #7]
 80055e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer + 7) =
 80055e4:	71d3      	strb	r3, [r2, #7]
	*(pbuffer + 8) =
		pdata->ref_spad_man__ref_location & 0x3;
 80055e6:	7a03      	ldrb	r3, [r0, #8]
 80055e8:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer + 8) =
 80055ec:	7213      	strb	r3, [r2, #8]
	VL53L1_i2c_encode_uint16_t(
 80055ee:	2102      	movs	r1, #2
 80055f0:	3209      	adds	r2, #9
 80055f2:	8940      	ldrh	r0, [r0, #10]
 80055f4:	f7ff fdd4 	bl	80051a0 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer + 9);
	VL53L1_i2c_encode_int16_t(
 80055f8:	f105 020b 	add.w	r2, r5, #11
 80055fc:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8005600:	2102      	movs	r1, #2
 8005602:	f7ff fde0 	bl	80051c6 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer + 11);
	VL53L1_i2c_encode_int16_t(
 8005606:	f105 020d 	add.w	r2, r5, #13
 800560a:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 800560e:	2102      	movs	r1, #2
 8005610:	f7ff fdd9 	bl	80051c6 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer + 13);
	VL53L1_i2c_encode_uint16_t(
 8005614:	f105 020f 	add.w	r2, r5, #15
 8005618:	8a20      	ldrh	r0, [r4, #16]
 800561a:	2102      	movs	r1, #2
 800561c:	f7ff fdc0 	bl	80051a0 <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer + 15);
	VL53L1_i2c_encode_int16_t(
 8005620:	8a60      	ldrh	r0, [r4, #18]
 8005622:	f105 0211 	add.w	r2, r5, #17
 8005626:	2102      	movs	r1, #2
 8005628:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800562c:	f7ff fdcb 	bl	80051c6 <VL53L1_i2c_encode_int16_t>
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
		2,
		pbuffer + 17);
	VL53L1_i2c_encode_int16_t(
 8005630:	f105 0213 	add.w	r2, r5, #19
 8005634:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8005638:	2102      	movs	r1, #2
 800563a:	f7ff fdc4 	bl	80051c6 <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer + 19);
	VL53L1_i2c_encode_int16_t(
 800563e:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8005642:	f105 0215 	add.w	r2, r5, #21
 8005646:	2102      	movs	r1, #2
 8005648:	f7ff fdbd 	bl	80051c6 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer + 21);
	LOG_FUNCTION_END(status);


	return status;
 800564c:	2000      	movs	r0, #0
 800564e:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8005650:	f06f 0009 	mvn.w	r0, #9
}
 8005654:	bd38      	pop	{r3, r4, r5, pc}

08005656 <VL53L1_i2c_decode_customer_nvm_managed>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8005656:	2816      	cmp	r0, #22
{
 8005658:	b538      	push	{r3, r4, r5, lr}
 800565a:	460d      	mov	r5, r1
 800565c:	4614      	mov	r4, r2
	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800565e:	d944      	bls.n	80056ea <VL53L1_i2c_decode_customer_nvm_managed+0x94>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer + 0));
 8005660:	780b      	ldrb	r3, [r1, #0]
	pdata->global_config__spad_enables_ref_0 =
 8005662:	7013      	strb	r3, [r2, #0]
	pdata->global_config__spad_enables_ref_1 =
 8005664:	784b      	ldrb	r3, [r1, #1]
 8005666:	7053      	strb	r3, [r2, #1]
		(*(pbuffer + 1));
	pdata->global_config__spad_enables_ref_2 =
 8005668:	788b      	ldrb	r3, [r1, #2]
 800566a:	7093      	strb	r3, [r2, #2]
		(*(pbuffer + 2));
	pdata->global_config__spad_enables_ref_3 =
 800566c:	78cb      	ldrb	r3, [r1, #3]
 800566e:	70d3      	strb	r3, [r2, #3]
		(*(pbuffer + 3));
	pdata->global_config__spad_enables_ref_4 =
 8005670:	790b      	ldrb	r3, [r1, #4]
 8005672:	7113      	strb	r3, [r2, #4]
		(*(pbuffer + 4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer + 5)) & 0xF;
 8005674:	794b      	ldrb	r3, [r1, #5]
 8005676:	f003 030f 	and.w	r3, r3, #15
	pdata->global_config__spad_enables_ref_5 =
 800567a:	7153      	strb	r3, [r2, #5]
	pdata->global_config__ref_en_start_select =
 800567c:	798b      	ldrb	r3, [r1, #6]
 800567e:	7193      	strb	r3, [r2, #6]
		(*(pbuffer + 6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer + 7)) & 0x3F;
 8005680:	79cb      	ldrb	r3, [r1, #7]
 8005682:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->ref_spad_man__num_requested_ref_spads =
 8005686:	71d3      	strb	r3, [r2, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer + 8)) & 0x3;
 8005688:	7a0b      	ldrb	r3, [r1, #8]
 800568a:	f003 0303 	and.w	r3, r3, #3
	pdata->ref_spad_man__ref_location =
 800568e:	7213      	strb	r3, [r2, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 9));
 8005690:	3109      	adds	r1, #9
 8005692:	2002      	movs	r0, #2
 8005694:	f7ff fd8c 	bl	80051b0 <VL53L1_i2c_decode_uint16_t>
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer + 11));
 8005698:	f105 010b 	add.w	r1, r5, #11
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 800569c:	8160      	strh	r0, [r4, #10]
		(VL53L1_i2c_decode_int16_t(2, pbuffer + 11));
 800569e:	2002      	movs	r0, #2
 80056a0:	f7ff fd99 	bl	80051d6 <VL53L1_i2c_decode_int16_t>
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer + 13));
 80056a4:	f105 010d 	add.w	r1, r5, #13
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 80056a8:	81a0      	strh	r0, [r4, #12]
		(VL53L1_i2c_decode_int16_t(2, pbuffer + 13));
 80056aa:	2002      	movs	r0, #2
 80056ac:	f7ff fd93 	bl	80051d6 <VL53L1_i2c_decode_int16_t>
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 15));
 80056b0:	f105 010f 	add.w	r1, r5, #15
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 80056b4:	81e0      	strh	r0, [r4, #14]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 15));
 80056b6:	2002      	movs	r0, #2
 80056b8:	f7ff fd7a 	bl	80051b0 <VL53L1_i2c_decode_uint16_t>
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer + 17)) & 0x1FFF;
 80056bc:	f105 0111 	add.w	r1, r5, #17
	pdata->ref_spad_char__total_rate_target_mcps =
 80056c0:	8220      	strh	r0, [r4, #16]
		(VL53L1_i2c_decode_int16_t(2, pbuffer + 17)) & 0x1FFF;
 80056c2:	2002      	movs	r0, #2
 80056c4:	f7ff fd87 	bl	80051d6 <VL53L1_i2c_decode_int16_t>
 80056c8:	f3c0 000c 	ubfx	r0, r0, #0, #13
	pdata->algo__part_to_part_range_offset_mm =
 80056cc:	8260      	strh	r0, [r4, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer + 19));
 80056ce:	f105 0113 	add.w	r1, r5, #19
 80056d2:	2002      	movs	r0, #2
 80056d4:	f7ff fd7f 	bl	80051d6 <VL53L1_i2c_decode_int16_t>
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer + 21));
 80056d8:	f105 0115 	add.w	r1, r5, #21
	pdata->mm_config__inner_offset_mm =
 80056dc:	82a0      	strh	r0, [r4, #20]
		(VL53L1_i2c_decode_int16_t(2, pbuffer + 21));
 80056de:	2002      	movs	r0, #2
 80056e0:	f7ff fd79 	bl	80051d6 <VL53L1_i2c_decode_int16_t>
	pdata->mm_config__outer_offset_mm =
 80056e4:	82e0      	strh	r0, [r4, #22]

	LOG_FUNCTION_END(status);

	return status;
 80056e6:	2000      	movs	r0, #0
 80056e8:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80056ea:	f06f 0009 	mvn.w	r0, #9
}
 80056ee:	bd38      	pop	{r3, r4, r5, pc}

080056f0 <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 80056f0:	b510      	push	{r4, lr}
 80056f2:	b086      	sub	sp, #24
 80056f4:	460c      	mov	r4, r1
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status = VL53L1_ReadMulti(
 80056f6:	2317      	movs	r3, #23
 80056f8:	466a      	mov	r2, sp
 80056fa:	210d      	movs	r1, #13
 80056fc:	f007 fedc 	bl	800d4b8 <VL53L1_ReadMulti>
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8005700:	b920      	cbnz	r0, 800570c <VL53L1_get_customer_nvm_managed+0x1c>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 8005702:	4622      	mov	r2, r4
 8005704:	4669      	mov	r1, sp
 8005706:	2017      	movs	r0, #23
 8005708:	f7ff ffa5 	bl	8005656 <VL53L1_i2c_decode_customer_nvm_managed>
			pdata);

	LOG_FUNCTION_END(status);

	return status;
}
 800570c:	b006      	add	sp, #24
 800570e:	bd10      	pop	{r4, pc}

08005710 <VL53L1_i2c_encode_static_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8005710:	291f      	cmp	r1, #31
{
 8005712:	b538      	push	{r3, r4, r5, lr}
 8005714:	4604      	mov	r4, r0
 8005716:	4615      	mov	r5, r2
	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8005718:	d965      	bls.n	80057e6 <VL53L1_i2c_encode_static_config+0xd6>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	VL53L1_i2c_encode_uint16_t(
 800571a:	2102      	movs	r1, #2
 800571c:	8800      	ldrh	r0, [r0, #0]
 800571e:	f7ff fd3f 	bl	80051a0 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer + 0);
	*(pbuffer + 2) =
		pdata->debug__ctrl & 0x1;
 8005722:	78a3      	ldrb	r3, [r4, #2]
 8005724:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer + 2) =
 8005728:	70ab      	strb	r3, [r5, #2]
	*(pbuffer + 3) =
		pdata->test_mode__ctrl & 0xF;
 800572a:	78e3      	ldrb	r3, [r4, #3]
 800572c:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer + 3) =
 8005730:	70eb      	strb	r3, [r5, #3]
	*(pbuffer + 4) =
		pdata->clk_gating__ctrl & 0xF;
 8005732:	7923      	ldrb	r3, [r4, #4]
 8005734:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer + 4) =
 8005738:	712b      	strb	r3, [r5, #4]
	*(pbuffer + 5) =
		pdata->nvm_bist__ctrl & 0x1F;
 800573a:	7963      	ldrb	r3, [r4, #5]
 800573c:	f003 031f 	and.w	r3, r3, #31
	*(pbuffer + 5) =
 8005740:	716b      	strb	r3, [r5, #5]
	*(pbuffer + 6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8005742:	79a3      	ldrb	r3, [r4, #6]
 8005744:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer + 6) =
 8005748:	71ab      	strb	r3, [r5, #6]
	*(pbuffer + 7) =
		pdata->nvm_bist__start_address & 0x7F;
 800574a:	79e3      	ldrb	r3, [r4, #7]
 800574c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer + 7) =
 8005750:	71eb      	strb	r3, [r5, #7]
	*(pbuffer + 8) =
		pdata->host_if__status & 0x1;
 8005752:	7a23      	ldrb	r3, [r4, #8]
 8005754:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer + 8) =
 8005758:	722b      	strb	r3, [r5, #8]
	*(pbuffer + 9) =
		pdata->pad_i2c_hv__config;
 800575a:	7a63      	ldrb	r3, [r4, #9]
	*(pbuffer + 9) =
 800575c:	726b      	strb	r3, [r5, #9]
	*(pbuffer + 10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800575e:	7aa3      	ldrb	r3, [r4, #10]
 8005760:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer + 10) =
 8005764:	72ab      	strb	r3, [r5, #10]
	*(pbuffer + 11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 8005766:	7ae3      	ldrb	r3, [r4, #11]
 8005768:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer + 11) =
 800576c:	72eb      	strb	r3, [r5, #11]
	*(pbuffer + 12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800576e:	7b23      	ldrb	r3, [r4, #12]
 8005770:	f003 031f 	and.w	r3, r3, #31
	*(pbuffer + 12) =
 8005774:	732b      	strb	r3, [r5, #12]
	*(pbuffer + 13) =
		pdata->gpio__tio_hv_status & 0x3;
 8005776:	7b63      	ldrb	r3, [r4, #13]
 8005778:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer + 13) =
 800577c:	736b      	strb	r3, [r5, #13]
	*(pbuffer + 14) =
		pdata->gpio__fio_hv_status & 0x3;
 800577e:	7ba3      	ldrb	r3, [r4, #14]
 8005780:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer + 14) =
 8005784:	73ab      	strb	r3, [r5, #14]
	*(pbuffer + 15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8005786:	7be3      	ldrb	r3, [r4, #15]
 8005788:	f003 0307 	and.w	r3, r3, #7
	*(pbuffer + 15) =
 800578c:	73eb      	strb	r3, [r5, #15]
	*(pbuffer + 16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800578e:	7c23      	ldrb	r3, [r4, #16]
 8005790:	f003 031f 	and.w	r3, r3, #31
	*(pbuffer + 16) =
 8005794:	742b      	strb	r3, [r5, #16]
	*(pbuffer + 17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8005796:	7c63      	ldrb	r3, [r4, #17]
 8005798:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer + 17) =
 800579c:	746b      	strb	r3, [r5, #17]
	*(pbuffer + 18) =
		pdata->sigma_estimator__effective_pulse_width_ns;
 800579e:	7ca3      	ldrb	r3, [r4, #18]
	*(pbuffer + 18) =
 80057a0:	74ab      	strb	r3, [r5, #18]
	*(pbuffer + 19) =
		pdata->sigma_estimator__effective_ambient_width_ns;
 80057a2:	7ce3      	ldrb	r3, [r4, #19]
	*(pbuffer + 19) =
 80057a4:	74eb      	strb	r3, [r5, #19]
	*(pbuffer + 20) =
		pdata->sigma_estimator__sigma_ref_mm;
 80057a6:	7d23      	ldrb	r3, [r4, #20]
	*(pbuffer + 20) =
 80057a8:	752b      	strb	r3, [r5, #20]
	*(pbuffer + 21) =
		pdata->algo__crosstalk_compensation_valid_height_mm;
 80057aa:	7d63      	ldrb	r3, [r4, #21]
	*(pbuffer + 21) =
 80057ac:	756b      	strb	r3, [r5, #21]
	*(pbuffer + 22) =
		pdata->spare_host_config__static_config_spare_0;
 80057ae:	7da3      	ldrb	r3, [r4, #22]
	*(pbuffer + 22) =
 80057b0:	75ab      	strb	r3, [r5, #22]
	*(pbuffer + 23) =
		pdata->spare_host_config__static_config_spare_1;
 80057b2:	7de3      	ldrb	r3, [r4, #23]
	*(pbuffer + 23) =
 80057b4:	75eb      	strb	r3, [r5, #23]
	VL53L1_i2c_encode_uint16_t(
 80057b6:	8b20      	ldrh	r0, [r4, #24]
 80057b8:	f105 0218 	add.w	r2, r5, #24
 80057bc:	2102      	movs	r1, #2
 80057be:	f7ff fcef 	bl	80051a0 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer + 24);
	*(pbuffer + 26) =
		pdata->algo__range_ignore_valid_height_mm;
 80057c2:	7ea3      	ldrb	r3, [r4, #26]
	*(pbuffer + 26) =
 80057c4:	76ab      	strb	r3, [r5, #26]
	*(pbuffer + 27) =
		pdata->algo__range_min_clip;
 80057c6:	7ee3      	ldrb	r3, [r4, #27]
	*(pbuffer + 27) =
 80057c8:	76eb      	strb	r3, [r5, #27]
	*(pbuffer + 28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 80057ca:	7f23      	ldrb	r3, [r4, #28]
 80057cc:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer + 28) =
 80057d0:	772b      	strb	r3, [r5, #28]
	*(pbuffer + 29) =
		pdata->spare_host_config__static_config_spare_2;
 80057d2:	7f63      	ldrb	r3, [r4, #29]
	*(pbuffer + 29) =
 80057d4:	776b      	strb	r3, [r5, #29]
	*(pbuffer + 30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 80057d6:	7fa3      	ldrb	r3, [r4, #30]
 80057d8:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer + 30) =
 80057dc:	77ab      	strb	r3, [r5, #30]
	*(pbuffer + 31) =
		pdata->sd_config__reset_stages_lsb;
 80057de:	7fe3      	ldrb	r3, [r4, #31]
	*(pbuffer + 31) =
 80057e0:	77eb      	strb	r3, [r5, #31]
	LOG_FUNCTION_END(status);


	return status;
 80057e2:	2000      	movs	r0, #0
 80057e4:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80057e6:	f06f 0009 	mvn.w	r0, #9
}
 80057ea:	bd38      	pop	{r3, r4, r5, pc}

080057ec <VL53L1_i2c_encode_general_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 80057ec:	2915      	cmp	r1, #21
{
 80057ee:	b538      	push	{r3, r4, r5, lr}
 80057f0:	4605      	mov	r5, r0
 80057f2:	4614      	mov	r4, r2
	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 80057f4:	d93c      	bls.n	8005870 <VL53L1_i2c_encode_general_config+0x84>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer + 0) =
		pdata->gph_config__stream_count_update_value;
 80057f6:	7803      	ldrb	r3, [r0, #0]
	*(pbuffer + 0) =
 80057f8:	7013      	strb	r3, [r2, #0]
	*(pbuffer + 1) =
		pdata->global_config__stream_divider;
 80057fa:	7843      	ldrb	r3, [r0, #1]
	*(pbuffer + 1) =
 80057fc:	7053      	strb	r3, [r2, #1]
	*(pbuffer + 2) =
		pdata->system__interrupt_config_gpio;
 80057fe:	7883      	ldrb	r3, [r0, #2]
	*(pbuffer + 2) =
 8005800:	7093      	strb	r3, [r2, #2]
	*(pbuffer + 3) =
		pdata->cal_config__vcsel_start & 0x7F;
 8005802:	78c3      	ldrb	r3, [r0, #3]
 8005804:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer + 3) =
 8005808:	70d3      	strb	r3, [r2, #3]
	VL53L1_i2c_encode_uint16_t(
 800580a:	8880      	ldrh	r0, [r0, #4]
 800580c:	3204      	adds	r2, #4
 800580e:	2102      	movs	r1, #2
 8005810:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8005814:	f7ff fcc4 	bl	80051a0 <VL53L1_i2c_encode_uint16_t>
		pdata->cal_config__repeat_rate & 0xFFF,
		2,
		pbuffer + 4);
	*(pbuffer + 6) =
		pdata->global_config__vcsel_width & 0x7F;
 8005818:	79ab      	ldrb	r3, [r5, #6]
 800581a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer + 6) =
 800581e:	71a3      	strb	r3, [r4, #6]
	*(pbuffer + 7) =
		pdata->phasecal_config__timeout_macrop;
 8005820:	79eb      	ldrb	r3, [r5, #7]
	*(pbuffer + 7) =
 8005822:	71e3      	strb	r3, [r4, #7]
	*(pbuffer + 8) =
		pdata->phasecal_config__target;
 8005824:	7a2b      	ldrb	r3, [r5, #8]
	*(pbuffer + 8) =
 8005826:	7223      	strb	r3, [r4, #8]
	*(pbuffer + 9) =
		pdata->phasecal_config__override & 0x1;
 8005828:	7a6b      	ldrb	r3, [r5, #9]
 800582a:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer + 9) =
 800582e:	7263      	strb	r3, [r4, #9]
	*(pbuffer + 11) =
		pdata->dss_config__roi_mode_control & 0x7;
 8005830:	7aab      	ldrb	r3, [r5, #10]
 8005832:	f003 0307 	and.w	r3, r3, #7
	*(pbuffer + 11) =
 8005836:	72e3      	strb	r3, [r4, #11]
	VL53L1_i2c_encode_uint16_t(
 8005838:	f104 020c 	add.w	r2, r4, #12
 800583c:	89a8      	ldrh	r0, [r5, #12]
 800583e:	2102      	movs	r1, #2
 8005840:	f7ff fcae 	bl	80051a0 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer + 12);
	VL53L1_i2c_encode_uint16_t(
 8005844:	f104 020e 	add.w	r2, r4, #14
 8005848:	89e8      	ldrh	r0, [r5, #14]
 800584a:	2102      	movs	r1, #2
 800584c:	f7ff fca8 	bl	80051a0 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer + 14);
	VL53L1_i2c_encode_uint16_t(
 8005850:	8a28      	ldrh	r0, [r5, #16]
 8005852:	f104 0210 	add.w	r2, r4, #16
 8005856:	2102      	movs	r1, #2
 8005858:	f7ff fca2 	bl	80051a0 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer + 16);
	*(pbuffer + 18) =
		pdata->dss_config__manual_block_select;
 800585c:	7cab      	ldrb	r3, [r5, #18]
	*(pbuffer + 18) =
 800585e:	74a3      	strb	r3, [r4, #18]
	*(pbuffer + 19) =
		pdata->dss_config__aperture_attenuation;
 8005860:	7ceb      	ldrb	r3, [r5, #19]
	*(pbuffer + 19) =
 8005862:	74e3      	strb	r3, [r4, #19]
	*(pbuffer + 20) =
		pdata->dss_config__max_spads_limit;
 8005864:	7d2b      	ldrb	r3, [r5, #20]
	*(pbuffer + 20) =
 8005866:	7523      	strb	r3, [r4, #20]
	*(pbuffer + 21) =
		pdata->dss_config__min_spads_limit;
 8005868:	7d6b      	ldrb	r3, [r5, #21]
	*(pbuffer + 21) =
 800586a:	7563      	strb	r3, [r4, #21]
	LOG_FUNCTION_END(status);


	return status;
 800586c:	2000      	movs	r0, #0
 800586e:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8005870:	f06f 0009 	mvn.w	r0, #9
}
 8005874:	bd38      	pop	{r3, r4, r5, pc}

08005876 <VL53L1_i2c_encode_timing_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 8005876:	2916      	cmp	r1, #22
{
 8005878:	b538      	push	{r3, r4, r5, lr}
 800587a:	4605      	mov	r5, r0
 800587c:	4614      	mov	r4, r2
	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 800587e:	d93a      	bls.n	80058f6 <VL53L1_i2c_encode_timing_config+0x80>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer + 0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 8005880:	7803      	ldrb	r3, [r0, #0]
 8005882:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer + 0) =
 8005886:	7013      	strb	r3, [r2, #0]
	*(pbuffer + 1) =
		pdata->mm_config__timeout_macrop_a_lo;
 8005888:	7843      	ldrb	r3, [r0, #1]
	*(pbuffer + 1) =
 800588a:	7053      	strb	r3, [r2, #1]
	*(pbuffer + 2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800588c:	7883      	ldrb	r3, [r0, #2]
 800588e:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer + 2) =
 8005892:	7093      	strb	r3, [r2, #2]
	*(pbuffer + 3) =
		pdata->mm_config__timeout_macrop_b_lo;
 8005894:	78c3      	ldrb	r3, [r0, #3]
	*(pbuffer + 3) =
 8005896:	70d3      	strb	r3, [r2, #3]
	*(pbuffer + 4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8005898:	7903      	ldrb	r3, [r0, #4]
 800589a:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer + 4) =
 800589e:	7113      	strb	r3, [r2, #4]
	*(pbuffer + 5) =
		pdata->range_config__timeout_macrop_a_lo;
 80058a0:	7943      	ldrb	r3, [r0, #5]
	*(pbuffer + 5) =
 80058a2:	7153      	strb	r3, [r2, #5]
	*(pbuffer + 6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 80058a4:	7983      	ldrb	r3, [r0, #6]
 80058a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer + 6) =
 80058aa:	7193      	strb	r3, [r2, #6]
	*(pbuffer + 7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 80058ac:	79c3      	ldrb	r3, [r0, #7]
 80058ae:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer + 7) =
 80058b2:	71d3      	strb	r3, [r2, #7]
	*(pbuffer + 8) =
		pdata->range_config__timeout_macrop_b_lo;
 80058b4:	7a03      	ldrb	r3, [r0, #8]
	*(pbuffer + 8) =
 80058b6:	7213      	strb	r3, [r2, #8]
	*(pbuffer + 9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 80058b8:	7a43      	ldrb	r3, [r0, #9]
 80058ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer + 9) =
 80058be:	7253      	strb	r3, [r2, #9]
	VL53L1_i2c_encode_uint16_t(
 80058c0:	2102      	movs	r1, #2
 80058c2:	320a      	adds	r2, #10
 80058c4:	8940      	ldrh	r0, [r0, #10]
 80058c6:	f7ff fc6b 	bl	80051a0 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer + 10);
	VL53L1_i2c_encode_uint16_t(
 80058ca:	f104 020c 	add.w	r2, r4, #12
 80058ce:	89a8      	ldrh	r0, [r5, #12]
 80058d0:	2102      	movs	r1, #2
 80058d2:	f7ff fc65 	bl	80051a0 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer + 12);
	*(pbuffer + 14) =
		pdata->range_config__valid_phase_low;
 80058d6:	7bab      	ldrb	r3, [r5, #14]
	*(pbuffer + 14) =
 80058d8:	73a3      	strb	r3, [r4, #14]
	*(pbuffer + 15) =
		pdata->range_config__valid_phase_high;
 80058da:	7beb      	ldrb	r3, [r5, #15]
	*(pbuffer + 15) =
 80058dc:	73e3      	strb	r3, [r4, #15]
	VL53L1_i2c_encode_uint32_t(
 80058de:	6928      	ldr	r0, [r5, #16]
 80058e0:	f104 0212 	add.w	r2, r4, #18
 80058e4:	2104      	movs	r1, #4
 80058e6:	f7ff fc84 	bl	80051f2 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer + 18);
	*(pbuffer + 22) =
		pdata->system__fractional_enable & 0x1;
 80058ea:	7d2b      	ldrb	r3, [r5, #20]
 80058ec:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer + 22) =
 80058f0:	75a3      	strb	r3, [r4, #22]
	LOG_FUNCTION_END(status);


	return status;
 80058f2:	2000      	movs	r0, #0
 80058f4:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80058f6:	f06f 0009 	mvn.w	r0, #9
}
 80058fa:	bd38      	pop	{r3, r4, r5, pc}

080058fc <VL53L1_i2c_encode_dynamic_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 80058fc:	2911      	cmp	r1, #17
{
 80058fe:	b538      	push	{r3, r4, r5, lr}
 8005900:	4604      	mov	r4, r0
 8005902:	4615      	mov	r5, r2
	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8005904:	d939      	bls.n	800597a <VL53L1_i2c_encode_dynamic_config+0x7e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer + 0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 8005906:	7803      	ldrb	r3, [r0, #0]
 8005908:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer + 0) =
 800590c:	f802 3b01 	strb.w	r3, [r2], #1
	VL53L1_i2c_encode_uint16_t(
 8005910:	2102      	movs	r1, #2
 8005912:	8840      	ldrh	r0, [r0, #2]
 8005914:	f7ff fc44 	bl	80051a0 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer + 1);
	VL53L1_i2c_encode_uint16_t(
 8005918:	88a0      	ldrh	r0, [r4, #4]
 800591a:	1cea      	adds	r2, r5, #3
 800591c:	2102      	movs	r1, #2
 800591e:	f7ff fc3f 	bl	80051a0 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer + 3);
	*(pbuffer + 5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8005922:	79a3      	ldrb	r3, [r4, #6]
 8005924:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer + 5) =
 8005928:	716b      	strb	r3, [r5, #5]
	*(pbuffer + 6) =
		pdata->system__seed_config & 0x7;
 800592a:	79e3      	ldrb	r3, [r4, #7]
 800592c:	f003 0307 	and.w	r3, r3, #7
	*(pbuffer + 6) =
 8005930:	71ab      	strb	r3, [r5, #6]
	*(pbuffer + 7) =
		pdata->sd_config__woi_sd0;
 8005932:	7a23      	ldrb	r3, [r4, #8]
	*(pbuffer + 7) =
 8005934:	71eb      	strb	r3, [r5, #7]
	*(pbuffer + 8) =
		pdata->sd_config__woi_sd1;
 8005936:	7a63      	ldrb	r3, [r4, #9]
	*(pbuffer + 8) =
 8005938:	722b      	strb	r3, [r5, #8]
	*(pbuffer + 9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800593a:	7aa3      	ldrb	r3, [r4, #10]
 800593c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer + 9) =
 8005940:	726b      	strb	r3, [r5, #9]
	*(pbuffer + 10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8005942:	7ae3      	ldrb	r3, [r4, #11]
 8005944:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer + 10) =
 8005948:	72ab      	strb	r3, [r5, #10]
	*(pbuffer + 11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800594a:	7b23      	ldrb	r3, [r4, #12]
 800594c:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer + 11) =
 8005950:	72eb      	strb	r3, [r5, #11]
	*(pbuffer + 12) =
		pdata->sd_config__first_order_select & 0x3;
 8005952:	7b63      	ldrb	r3, [r4, #13]
 8005954:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer + 12) =
 8005958:	732b      	strb	r3, [r5, #12]
	*(pbuffer + 13) =
		pdata->sd_config__quantifier & 0xF;
 800595a:	7ba3      	ldrb	r3, [r4, #14]
 800595c:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer + 13) =
 8005960:	736b      	strb	r3, [r5, #13]
	*(pbuffer + 14) =
		pdata->roi_config__user_roi_centre_spad;
 8005962:	7be3      	ldrb	r3, [r4, #15]
	*(pbuffer + 14) =
 8005964:	73ab      	strb	r3, [r5, #14]
	*(pbuffer + 15) =
		pdata->roi_config__user_roi_requested_global_xy_size;
 8005966:	7c23      	ldrb	r3, [r4, #16]
	*(pbuffer + 15) =
 8005968:	73eb      	strb	r3, [r5, #15]
	*(pbuffer + 16) =
		pdata->system__sequence_config;
 800596a:	7c63      	ldrb	r3, [r4, #17]
	*(pbuffer + 16) =
 800596c:	742b      	strb	r3, [r5, #16]
	*(pbuffer + 17) =
		pdata->system__grouped_parameter_hold & 0x3;
 800596e:	7ca3      	ldrb	r3, [r4, #18]
 8005970:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer + 17) =
 8005974:	746b      	strb	r3, [r5, #17]
	LOG_FUNCTION_END(status);


	return status;
 8005976:	2000      	movs	r0, #0
 8005978:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800597a:	f06f 0009 	mvn.w	r0, #9
}
 800597e:	bd38      	pop	{r3, r4, r5, pc}

08005980 <VL53L1_i2c_encode_system_control>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 8005980:	2904      	cmp	r1, #4
 8005982:	d913      	bls.n	80059ac <VL53L1_i2c_encode_system_control+0x2c>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer + 0) =
		pdata->power_management__go1_power_force & 0x1;
 8005984:	7803      	ldrb	r3, [r0, #0]
 8005986:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer + 0) =
 800598a:	7013      	strb	r3, [r2, #0]
	*(pbuffer + 1) =
		pdata->system__stream_count_ctrl & 0x1;
 800598c:	7843      	ldrb	r3, [r0, #1]
 800598e:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer + 1) =
 8005992:	7053      	strb	r3, [r2, #1]
	*(pbuffer + 2) =
		pdata->firmware__enable & 0x1;
 8005994:	7883      	ldrb	r3, [r0, #2]
 8005996:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer + 2) =
 800599a:	7093      	strb	r3, [r2, #2]
	*(pbuffer + 3) =
		pdata->system__interrupt_clear & 0x3;
 800599c:	78c3      	ldrb	r3, [r0, #3]
 800599e:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer + 3) =
 80059a2:	70d3      	strb	r3, [r2, #3]
	*(pbuffer + 4) =
		pdata->system__mode_start;
 80059a4:	7903      	ldrb	r3, [r0, #4]
	*(pbuffer + 4) =
 80059a6:	7113      	strb	r3, [r2, #4]
	LOG_FUNCTION_END(status);


	return status;
 80059a8:	2000      	movs	r0, #0
 80059aa:	4770      	bx	lr
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80059ac:	f06f 0009 	mvn.w	r0, #9
}
 80059b0:	4770      	bx	lr

080059b2 <VL53L1_set_system_control>:


VL53L1_Error VL53L1_set_system_control(
	VL53L1_DEV Dev,
	VL53L1_system_control_t   *pdata)
{
 80059b2:	b513      	push	{r0, r1, r4, lr}
 80059b4:	4604      	mov	r4, r0
	uint8_t comms_buffer[VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status = VL53L1_i2c_encode_system_control(
 80059b6:	466a      	mov	r2, sp
{
 80059b8:	4608      	mov	r0, r1
		status = VL53L1_i2c_encode_system_control(
 80059ba:	2105      	movs	r1, #5
 80059bc:	f7ff ffe0 	bl	8005980 <VL53L1_i2c_encode_system_control>
			pdata,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53L1_ERROR_NONE)
 80059c0:	b928      	cbnz	r0, 80059ce <VL53L1_set_system_control+0x1c>
		status = VL53L1_WriteMulti(
 80059c2:	2305      	movs	r3, #5
 80059c4:	466a      	mov	r2, sp
 80059c6:	2183      	movs	r1, #131	; 0x83
 80059c8:	4620      	mov	r0, r4
 80059ca:	f007 fd55 	bl	800d478 <VL53L1_WriteMulti>
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
}
 80059ce:	b002      	add	sp, #8
 80059d0:	bd10      	pop	{r4, pc}

080059d2 <VL53L1_i2c_decode_system_results>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 80059d2:	282b      	cmp	r0, #43	; 0x2b
{
 80059d4:	b538      	push	{r3, r4, r5, lr}
 80059d6:	460d      	mov	r5, r1
 80059d8:	4614      	mov	r4, r2
	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 80059da:	f240 8086 	bls.w	8005aea <VL53L1_i2c_decode_system_results+0x118>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->result__interrupt_status =
		(*(pbuffer + 0)) & 0x3F;
 80059de:	780b      	ldrb	r3, [r1, #0]
 80059e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->result__interrupt_status =
 80059e4:	7013      	strb	r3, [r2, #0]
	pdata->result__range_status =
 80059e6:	784b      	ldrb	r3, [r1, #1]
 80059e8:	7053      	strb	r3, [r2, #1]
		(*(pbuffer + 1));
	pdata->result__report_status =
		(*(pbuffer + 2)) & 0xF;
 80059ea:	788b      	ldrb	r3, [r1, #2]
 80059ec:	f003 030f 	and.w	r3, r3, #15
	pdata->result__report_status =
 80059f0:	7093      	strb	r3, [r2, #2]
	pdata->result__stream_count =
 80059f2:	78cb      	ldrb	r3, [r1, #3]
 80059f4:	70d3      	strb	r3, [r2, #3]
		(*(pbuffer + 3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 4));
 80059f6:	3104      	adds	r1, #4
 80059f8:	2002      	movs	r0, #2
 80059fa:	f7ff fbd9 	bl	80051b0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 6));
 80059fe:	1da9      	adds	r1, r5, #6
	pdata->result__dss_actual_effective_spads_sd0 =
 8005a00:	80a0      	strh	r0, [r4, #4]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 6));
 8005a02:	2002      	movs	r0, #2
 8005a04:	f7ff fbd4 	bl	80051b0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 8));
 8005a08:	f105 0108 	add.w	r1, r5, #8
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 8005a0c:	80e0      	strh	r0, [r4, #6]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 8));
 8005a0e:	2002      	movs	r0, #2
 8005a10:	f7ff fbce 	bl	80051b0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 10));
 8005a14:	f105 010a 	add.w	r1, r5, #10
	pdata->result__ambient_count_rate_mcps_sd0 =
 8005a18:	8120      	strh	r0, [r4, #8]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 10));
 8005a1a:	2002      	movs	r0, #2
 8005a1c:	f7ff fbc8 	bl	80051b0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 12));
 8005a20:	f105 010c 	add.w	r1, r5, #12
	pdata->result__sigma_sd0 =
 8005a24:	8160      	strh	r0, [r4, #10]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 12));
 8005a26:	2002      	movs	r0, #2
 8005a28:	f7ff fbc2 	bl	80051b0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 14));
 8005a2c:	f105 010e 	add.w	r1, r5, #14
	pdata->result__phase_sd0 =
 8005a30:	81a0      	strh	r0, [r4, #12]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 14));
 8005a32:	2002      	movs	r0, #2
 8005a34:	f7ff fbbc 	bl	80051b0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 16));
 8005a38:	f105 0110 	add.w	r1, r5, #16
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 8005a3c:	81e0      	strh	r0, [r4, #14]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 16));
 8005a3e:	2002      	movs	r0, #2
 8005a40:	f7ff fbb6 	bl	80051b0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 18));
 8005a44:	f105 0112 	add.w	r1, r5, #18
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8005a48:	8220      	strh	r0, [r4, #16]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 18));
 8005a4a:	2002      	movs	r0, #2
 8005a4c:	f7ff fbb0 	bl	80051b0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 20));
 8005a50:	f105 0114 	add.w	r1, r5, #20
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 8005a54:	8260      	strh	r0, [r4, #18]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 20));
 8005a56:	2002      	movs	r0, #2
 8005a58:	f7ff fbaa 	bl	80051b0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 22));
 8005a5c:	f105 0116 	add.w	r1, r5, #22
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 8005a60:	82a0      	strh	r0, [r4, #20]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 22));
 8005a62:	2002      	movs	r0, #2
 8005a64:	f7ff fba4 	bl	80051b0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 24));
 8005a68:	f105 0118 	add.w	r1, r5, #24
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 8005a6c:	82e0      	strh	r0, [r4, #22]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 24));
 8005a6e:	2002      	movs	r0, #2
 8005a70:	f7ff fb9e 	bl	80051b0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 26));
 8005a74:	f105 011a 	add.w	r1, r5, #26
	pdata->result__dss_actual_effective_spads_sd1 =
 8005a78:	8320      	strh	r0, [r4, #24]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 26));
 8005a7a:	2002      	movs	r0, #2
 8005a7c:	f7ff fb98 	bl	80051b0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 28));
 8005a80:	f105 011c 	add.w	r1, r5, #28
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 8005a84:	8360      	strh	r0, [r4, #26]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 28));
 8005a86:	2002      	movs	r0, #2
 8005a88:	f7ff fb92 	bl	80051b0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 30));
 8005a8c:	f105 011e 	add.w	r1, r5, #30
	pdata->result__ambient_count_rate_mcps_sd1 =
 8005a90:	83a0      	strh	r0, [r4, #28]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 30));
 8005a92:	2002      	movs	r0, #2
 8005a94:	f7ff fb8c 	bl	80051b0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 32));
 8005a98:	f105 0120 	add.w	r1, r5, #32
	pdata->result__sigma_sd1 =
 8005a9c:	83e0      	strh	r0, [r4, #30]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 32));
 8005a9e:	2002      	movs	r0, #2
 8005aa0:	f7ff fb86 	bl	80051b0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 34));
 8005aa4:	f105 0122 	add.w	r1, r5, #34	; 0x22
	pdata->result__phase_sd1 =
 8005aa8:	8420      	strh	r0, [r4, #32]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 34));
 8005aaa:	2002      	movs	r0, #2
 8005aac:	f7ff fb80 	bl	80051b0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 36));
 8005ab0:	f105 0124 	add.w	r1, r5, #36	; 0x24
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 8005ab4:	8460      	strh	r0, [r4, #34]	; 0x22
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 36));
 8005ab6:	2002      	movs	r0, #2
 8005ab8:	f7ff fb7a 	bl	80051b0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 38));
 8005abc:	f105 0126 	add.w	r1, r5, #38	; 0x26
	pdata->result__spare_0_sd1 =
 8005ac0:	84a0      	strh	r0, [r4, #36]	; 0x24
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 38));
 8005ac2:	2002      	movs	r0, #2
 8005ac4:	f7ff fb74 	bl	80051b0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 40));
 8005ac8:	f105 0128 	add.w	r1, r5, #40	; 0x28
	pdata->result__spare_1_sd1 =
 8005acc:	84e0      	strh	r0, [r4, #38]	; 0x26
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 40));
 8005ace:	2002      	movs	r0, #2
 8005ad0:	f7ff fb6e 	bl	80051b0 <VL53L1_i2c_decode_uint16_t>
	pdata->result__spare_2_sd1 =
 8005ad4:	8520      	strh	r0, [r4, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 8005ad6:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 8005ada:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
		(*(pbuffer + 42));
	pdata->result__thresh_info =
 8005ade:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 8005ae2:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
		(*(pbuffer + 43));

	LOG_FUNCTION_END(status);

	return status;
 8005ae6:	2000      	movs	r0, #0
 8005ae8:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8005aea:	f06f 0009 	mvn.w	r0, #9
}
 8005aee:	bd38      	pop	{r3, r4, r5, pc}

08005af0 <VL53L1_i2c_decode_core_results>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 8005af0:	2820      	cmp	r0, #32
{
 8005af2:	b538      	push	{r3, r4, r5, lr}
 8005af4:	460d      	mov	r5, r1
 8005af6:	4614      	mov	r4, r2
	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 8005af8:	d932      	bls.n	8005b60 <VL53L1_i2c_decode_core_results+0x70>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 0));
 8005afa:	2004      	movs	r0, #4
 8005afc:	f7ff fb81 	bl	8005202 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 4));
 8005b00:	1d29      	adds	r1, r5, #4
	pdata->result_core__ambient_window_events_sd0 =
 8005b02:	6020      	str	r0, [r4, #0]
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 4));
 8005b04:	2004      	movs	r0, #4
 8005b06:	f7ff fb7c 	bl	8005202 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer + 8));
 8005b0a:	f105 0108 	add.w	r1, r5, #8
	pdata->result_core__ranging_total_events_sd0 =
 8005b0e:	6060      	str	r0, [r4, #4]
		(VL53L1_i2c_decode_int32_t(4, pbuffer + 8));
 8005b10:	2004      	movs	r0, #4
 8005b12:	f7ff fb80 	bl	8005216 <VL53L1_i2c_decode_int32_t>
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 12));
 8005b16:	f105 010c 	add.w	r1, r5, #12
	pdata->result_core__signal_total_events_sd0 =
 8005b1a:	60a0      	str	r0, [r4, #8]
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 12));
 8005b1c:	2004      	movs	r0, #4
 8005b1e:	f7ff fb70 	bl	8005202 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 16));
 8005b22:	f105 0110 	add.w	r1, r5, #16
	pdata->result_core__total_periods_elapsed_sd0 =
 8005b26:	60e0      	str	r0, [r4, #12]
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 16));
 8005b28:	2004      	movs	r0, #4
 8005b2a:	f7ff fb6a 	bl	8005202 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 20));
 8005b2e:	f105 0114 	add.w	r1, r5, #20
	pdata->result_core__ambient_window_events_sd1 =
 8005b32:	6120      	str	r0, [r4, #16]
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 20));
 8005b34:	2004      	movs	r0, #4
 8005b36:	f7ff fb64 	bl	8005202 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer + 24));
 8005b3a:	f105 0118 	add.w	r1, r5, #24
	pdata->result_core__ranging_total_events_sd1 =
 8005b3e:	6160      	str	r0, [r4, #20]
		(VL53L1_i2c_decode_int32_t(4, pbuffer + 24));
 8005b40:	2004      	movs	r0, #4
 8005b42:	f7ff fb68 	bl	8005216 <VL53L1_i2c_decode_int32_t>
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 28));
 8005b46:	f105 011c 	add.w	r1, r5, #28
	pdata->result_core__signal_total_events_sd1 =
 8005b4a:	61a0      	str	r0, [r4, #24]
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 28));
 8005b4c:	2004      	movs	r0, #4
 8005b4e:	f7ff fb58 	bl	8005202 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__total_periods_elapsed_sd1 =
 8005b52:	61e0      	str	r0, [r4, #28]
	pdata->result_core__spare_0 =
 8005b54:	f895 3020 	ldrb.w	r3, [r5, #32]
 8005b58:	f884 3020 	strb.w	r3, [r4, #32]
		(*(pbuffer + 32));

	LOG_FUNCTION_END(status);

	return status;
 8005b5c:	2000      	movs	r0, #0
 8005b5e:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8005b60:	f06f 0009 	mvn.w	r0, #9
}
 8005b64:	bd38      	pop	{r3, r4, r5, pc}

08005b66 <VL53L1_i2c_decode_debug_results>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 8005b66:	2837      	cmp	r0, #55	; 0x37
{
 8005b68:	b538      	push	{r3, r4, r5, lr}
 8005b6a:	460d      	mov	r5, r1
 8005b6c:	4614      	mov	r4, r2
	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 8005b6e:	f240 80d0 	bls.w	8005d12 <VL53L1_i2c_decode_debug_results+0x1ac>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 0));
 8005b72:	2002      	movs	r0, #2
 8005b74:	f7ff fb1c 	bl	80051b0 <VL53L1_i2c_decode_uint16_t>
	pdata->phasecal_result__reference_phase =
 8005b78:	8020      	strh	r0, [r4, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer + 2)) & 0x7F;
 8005b7a:	78ab      	ldrb	r3, [r5, #2]
 8005b7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->phasecal_result__vcsel_start =
 8005b80:	70a3      	strb	r3, [r4, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer + 3)) & 0x3F;
 8005b82:	78eb      	ldrb	r3, [r5, #3]
 8005b84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->ref_spad_char_result__num_actual_ref_spads =
 8005b88:	70e3      	strb	r3, [r4, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer + 4)) & 0x3;
 8005b8a:	792b      	ldrb	r3, [r5, #4]
 8005b8c:	f003 0303 	and.w	r3, r3, #3
	pdata->ref_spad_char_result__ref_location =
 8005b90:	7123      	strb	r3, [r4, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer + 5)) & 0x1;
 8005b92:	796b      	ldrb	r3, [r5, #5]
 8005b94:	f003 0301 	and.w	r3, r3, #1
	pdata->vhv_result__coldboot_status =
 8005b98:	7163      	strb	r3, [r4, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer + 6)) & 0x3F;
 8005b9a:	79ab      	ldrb	r3, [r5, #6]
 8005b9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->vhv_result__search_result =
 8005ba0:	71a3      	strb	r3, [r4, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer + 7)) & 0x3F;
 8005ba2:	79eb      	ldrb	r3, [r5, #7]
 8005ba4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->vhv_result__latest_setting =
 8005ba8:	71e3      	strb	r3, [r4, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 8)) & 0x3FF;
 8005baa:	f105 0108 	add.w	r1, r5, #8
 8005bae:	2002      	movs	r0, #2
 8005bb0:	f7ff fafe 	bl	80051b0 <VL53L1_i2c_decode_uint16_t>
 8005bb4:	f3c0 0009 	ubfx	r0, r0, #0, #10
	pdata->result__osc_calibrate_val =
 8005bb8:	8120      	strh	r0, [r4, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer + 10)) & 0x3;
 8005bba:	7aab      	ldrb	r3, [r5, #10]
 8005bbc:	f003 0303 	and.w	r3, r3, #3
	pdata->ana_config__powerdown_go1 =
 8005bc0:	72a3      	strb	r3, [r4, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer + 11)) & 0x3;
 8005bc2:	7aeb      	ldrb	r3, [r5, #11]
 8005bc4:	f003 0303 	and.w	r3, r3, #3
	pdata->ana_config__ref_bg_ctrl =
 8005bc8:	72e3      	strb	r3, [r4, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer + 12)) & 0xF;
 8005bca:	7b2b      	ldrb	r3, [r5, #12]
 8005bcc:	f003 030f 	and.w	r3, r3, #15
	pdata->ana_config__regdvdd1v2_ctrl =
 8005bd0:	7323      	strb	r3, [r4, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer + 13)) & 0x7;
 8005bd2:	7b6b      	ldrb	r3, [r5, #13]
 8005bd4:	f003 0307 	and.w	r3, r3, #7
	pdata->ana_config__osc_slow_ctrl =
 8005bd8:	7363      	strb	r3, [r4, #13]
	pdata->test_mode__status =
		(*(pbuffer + 14)) & 0x1;
 8005bda:	7bab      	ldrb	r3, [r5, #14]
 8005bdc:	f003 0301 	and.w	r3, r3, #1
	pdata->test_mode__status =
 8005be0:	73a3      	strb	r3, [r4, #14]
	pdata->firmware__system_status =
		(*(pbuffer + 15)) & 0x3;
 8005be2:	7beb      	ldrb	r3, [r5, #15]
 8005be4:	f003 0303 	and.w	r3, r3, #3
	pdata->firmware__system_status =
 8005be8:	73e3      	strb	r3, [r4, #15]
	pdata->firmware__mode_status =
 8005bea:	7c2b      	ldrb	r3, [r5, #16]
 8005bec:	7423      	strb	r3, [r4, #16]
		(*(pbuffer + 16));
	pdata->firmware__secondary_mode_status =
 8005bee:	7c6b      	ldrb	r3, [r5, #17]
 8005bf0:	7463      	strb	r3, [r4, #17]
		(*(pbuffer + 17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 18)) & 0xFFF;
 8005bf2:	f105 0112 	add.w	r1, r5, #18
 8005bf6:	2002      	movs	r0, #2
 8005bf8:	f7ff fada 	bl	80051b0 <VL53L1_i2c_decode_uint16_t>
 8005bfc:	f3c0 000b 	ubfx	r0, r0, #0, #12
	pdata->firmware__cal_repeat_rate_counter =
 8005c00:	8260      	strh	r0, [r4, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 22));
 8005c02:	f105 0116 	add.w	r1, r5, #22
 8005c06:	2002      	movs	r0, #2
 8005c08:	f7ff fad2 	bl	80051b0 <VL53L1_i2c_decode_uint16_t>
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 24));
 8005c0c:	f105 0118 	add.w	r1, r5, #24
	pdata->gph__system__thresh_high =
 8005c10:	82a0      	strh	r0, [r4, #20]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 24));
 8005c12:	2002      	movs	r0, #2
 8005c14:	f7ff facc 	bl	80051b0 <VL53L1_i2c_decode_uint16_t>
	pdata->gph__system__thresh_low =
 8005c18:	82e0      	strh	r0, [r4, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer + 26)) & 0x1;
 8005c1a:	7eab      	ldrb	r3, [r5, #26]
 8005c1c:	f003 0301 	and.w	r3, r3, #1
	pdata->gph__system__enable_xtalk_per_quadrant =
 8005c20:	7623      	strb	r3, [r4, #24]
	pdata->gph__spare_0 =
		(*(pbuffer + 27)) & 0x7;
 8005c22:	7eeb      	ldrb	r3, [r5, #27]
 8005c24:	f003 0307 	and.w	r3, r3, #7
	pdata->gph__spare_0 =
 8005c28:	7663      	strb	r3, [r4, #25]
	pdata->gph__sd_config__woi_sd0 =
 8005c2a:	7f2b      	ldrb	r3, [r5, #28]
 8005c2c:	76a3      	strb	r3, [r4, #26]
		(*(pbuffer + 28));
	pdata->gph__sd_config__woi_sd1 =
 8005c2e:	7f6b      	ldrb	r3, [r5, #29]
 8005c30:	76e3      	strb	r3, [r4, #27]
		(*(pbuffer + 29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer + 30)) & 0x7F;
 8005c32:	7fab      	ldrb	r3, [r5, #30]
 8005c34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->gph__sd_config__initial_phase_sd0 =
 8005c38:	7723      	strb	r3, [r4, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer + 31)) & 0x7F;
 8005c3a:	7feb      	ldrb	r3, [r5, #31]
 8005c3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->gph__sd_config__initial_phase_sd1 =
 8005c40:	7763      	strb	r3, [r4, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer + 32)) & 0x3;
 8005c42:	f895 3020 	ldrb.w	r3, [r5, #32]
 8005c46:	f003 0303 	and.w	r3, r3, #3
	pdata->gph__sd_config__first_order_select =
 8005c4a:	77a3      	strb	r3, [r4, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer + 33)) & 0xF;
 8005c4c:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8005c50:	f003 030f 	and.w	r3, r3, #15
	pdata->gph__sd_config__quantifier =
 8005c54:	77e3      	strb	r3, [r4, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 8005c56:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8005c5a:	f884 3020 	strb.w	r3, [r4, #32]
		(*(pbuffer + 34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 8005c5e:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 8005c62:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
		(*(pbuffer + 35));
	pdata->gph__system__sequence_config =
 8005c66:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8005c6a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
		(*(pbuffer + 36));
	pdata->gph__gph_id =
		(*(pbuffer + 37)) & 0x1;
 8005c6e:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 8005c72:	f003 0301 	and.w	r3, r3, #1
	pdata->gph__gph_id =
 8005c76:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer + 38)) & 0x3;
 8005c7a:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 8005c7e:	f003 0303 	and.w	r3, r3, #3
	pdata->system__interrupt_set =
 8005c82:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer + 39)) & 0x1F;
 8005c86:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
 8005c8a:	f003 031f 	and.w	r3, r3, #31
	pdata->interrupt_manager__enables =
 8005c8e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer + 40)) & 0x1F;
 8005c92:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8005c96:	f003 031f 	and.w	r3, r3, #31
	pdata->interrupt_manager__clear =
 8005c9a:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer + 41)) & 0x1F;
 8005c9e:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 8005ca2:	f003 031f 	and.w	r3, r3, #31
	pdata->interrupt_manager__status =
 8005ca6:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer + 42)) & 0x1;
 8005caa:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 8005cae:	f003 0301 	and.w	r3, r3, #1
	pdata->mcu_to_host_bank__wr_access_en =
 8005cb2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer + 43)) & 0x1;
 8005cb6:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 8005cba:	f003 0301 	and.w	r3, r3, #1
	pdata->power_management__go1_reset_status =
 8005cbe:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer + 44)) & 0x3;
 8005cc2:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8005cc6:	f003 0303 	and.w	r3, r3, #3
	pdata->pad_startup_mode__value_ro =
 8005cca:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer + 45)) & 0x3F;
 8005cce:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 8005cd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->pad_startup_mode__value_ctrl =
 8005cd6:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 46)) & 0x3FFFF;
 8005cda:	f105 012e 	add.w	r1, r5, #46	; 0x2e
 8005cde:	2004      	movs	r0, #4
 8005ce0:	f7ff fa8f 	bl	8005202 <VL53L1_i2c_decode_uint32_t>
 8005ce4:	f3c0 0011 	ubfx	r0, r0, #0, #18
	pdata->pll_period_us =
 8005ce8:	62e0      	str	r0, [r4, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 50));
 8005cea:	f105 0132 	add.w	r1, r5, #50	; 0x32
 8005cee:	2004      	movs	r0, #4
 8005cf0:	f7ff fa87 	bl	8005202 <VL53L1_i2c_decode_uint32_t>
	pdata->interrupt_scheduler__data_out =
 8005cf4:	6320      	str	r0, [r4, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer + 54)) & 0x1;
 8005cf6:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
 8005cfa:	f003 0301 	and.w	r3, r3, #1
	pdata->nvm_bist__complete =
 8005cfe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer + 55)) & 0x1;
 8005d02:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
 8005d06:	f003 0301 	and.w	r3, r3, #1
	pdata->nvm_bist__status =
 8005d0a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 8005d0e:	2000      	movs	r0, #0
 8005d10:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8005d12:	f06f 0009 	mvn.w	r0, #9
}
 8005d16:	bd38      	pop	{r3, r4, r5, pc}

08005d18 <VL53L1_i2c_decode_nvm_copy_data>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 8005d18:	2830      	cmp	r0, #48	; 0x30
{
 8005d1a:	b538      	push	{r3, r4, r5, lr}
 8005d1c:	460d      	mov	r5, r1
 8005d1e:	4614      	mov	r4, r2
	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 8005d20:	f240 809c 	bls.w	8005e5c <VL53L1_i2c_decode_nvm_copy_data+0x144>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->identification__model_id =
		(*(pbuffer + 0));
 8005d24:	780b      	ldrb	r3, [r1, #0]
	pdata->identification__model_id =
 8005d26:	7013      	strb	r3, [r2, #0]
	pdata->identification__module_type =
 8005d28:	784b      	ldrb	r3, [r1, #1]
 8005d2a:	7053      	strb	r3, [r2, #1]
		(*(pbuffer + 1));
	pdata->identification__revision_id =
 8005d2c:	788b      	ldrb	r3, [r1, #2]
 8005d2e:	7093      	strb	r3, [r2, #2]
		(*(pbuffer + 2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 3));
 8005d30:	3103      	adds	r1, #3
 8005d32:	2002      	movs	r0, #2
 8005d34:	f7ff fa3c 	bl	80051b0 <VL53L1_i2c_decode_uint16_t>
	pdata->identification__module_id =
 8005d38:	80a0      	strh	r0, [r4, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer + 5)) & 0x7F;
 8005d3a:	796b      	ldrb	r3, [r5, #5]
 8005d3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->ana_config__fast_osc__trim_max =
 8005d40:	71a3      	strb	r3, [r4, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer + 6)) & 0x7;
 8005d42:	79ab      	ldrb	r3, [r5, #6]
 8005d44:	f003 0307 	and.w	r3, r3, #7
	pdata->ana_config__fast_osc__freq_set =
 8005d48:	71e3      	strb	r3, [r4, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer + 7)) & 0x7;
 8005d4a:	79eb      	ldrb	r3, [r5, #7]
 8005d4c:	f003 0307 	and.w	r3, r3, #7
	pdata->ana_config__vcsel_trim =
 8005d50:	7223      	strb	r3, [r4, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer + 8)) & 0x3F;
 8005d52:	7a2b      	ldrb	r3, [r5, #8]
 8005d54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->ana_config__vcsel_selion =
 8005d58:	7263      	strb	r3, [r4, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer + 9)) & 0x3F;
 8005d5a:	7a6b      	ldrb	r3, [r5, #9]
 8005d5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->ana_config__vcsel_selion_max =
 8005d60:	72a3      	strb	r3, [r4, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer + 10)) & 0x1;
 8005d62:	7aab      	ldrb	r3, [r5, #10]
 8005d64:	f003 0301 	and.w	r3, r3, #1
	pdata->protected_laser_safety__lock_bit =
 8005d68:	72e3      	strb	r3, [r4, #11]
	pdata->laser_safety__key =
		(*(pbuffer + 11)) & 0x7F;
 8005d6a:	7aeb      	ldrb	r3, [r5, #11]
 8005d6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->laser_safety__key =
 8005d70:	7323      	strb	r3, [r4, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer + 12)) & 0x1;
 8005d72:	7b2b      	ldrb	r3, [r5, #12]
 8005d74:	f003 0301 	and.w	r3, r3, #1
	pdata->laser_safety__key_ro =
 8005d78:	7363      	strb	r3, [r4, #13]
	pdata->laser_safety__clip =
		(*(pbuffer + 13)) & 0x3F;
 8005d7a:	7b6b      	ldrb	r3, [r5, #13]
 8005d7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->laser_safety__clip =
 8005d80:	73a3      	strb	r3, [r4, #14]
	pdata->laser_safety__mult =
		(*(pbuffer + 14)) & 0x3F;
 8005d82:	7bab      	ldrb	r3, [r5, #14]
 8005d84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->laser_safety__mult =
 8005d88:	73e3      	strb	r3, [r4, #15]
	pdata->global_config__spad_enables_rtn_0 =
 8005d8a:	7beb      	ldrb	r3, [r5, #15]
 8005d8c:	7423      	strb	r3, [r4, #16]
		(*(pbuffer + 15));
	pdata->global_config__spad_enables_rtn_1 =
 8005d8e:	7c2b      	ldrb	r3, [r5, #16]
 8005d90:	7463      	strb	r3, [r4, #17]
		(*(pbuffer + 16));
	pdata->global_config__spad_enables_rtn_2 =
 8005d92:	7c6b      	ldrb	r3, [r5, #17]
 8005d94:	74a3      	strb	r3, [r4, #18]
		(*(pbuffer + 17));
	pdata->global_config__spad_enables_rtn_3 =
 8005d96:	7cab      	ldrb	r3, [r5, #18]
 8005d98:	74e3      	strb	r3, [r4, #19]
		(*(pbuffer + 18));
	pdata->global_config__spad_enables_rtn_4 =
 8005d9a:	7ceb      	ldrb	r3, [r5, #19]
 8005d9c:	7523      	strb	r3, [r4, #20]
		(*(pbuffer + 19));
	pdata->global_config__spad_enables_rtn_5 =
 8005d9e:	7d2b      	ldrb	r3, [r5, #20]
 8005da0:	7563      	strb	r3, [r4, #21]
		(*(pbuffer + 20));
	pdata->global_config__spad_enables_rtn_6 =
 8005da2:	7d6b      	ldrb	r3, [r5, #21]
 8005da4:	75a3      	strb	r3, [r4, #22]
		(*(pbuffer + 21));
	pdata->global_config__spad_enables_rtn_7 =
 8005da6:	7dab      	ldrb	r3, [r5, #22]
 8005da8:	75e3      	strb	r3, [r4, #23]
		(*(pbuffer + 22));
	pdata->global_config__spad_enables_rtn_8 =
 8005daa:	7deb      	ldrb	r3, [r5, #23]
 8005dac:	7623      	strb	r3, [r4, #24]
		(*(pbuffer + 23));
	pdata->global_config__spad_enables_rtn_9 =
 8005dae:	7e2b      	ldrb	r3, [r5, #24]
 8005db0:	7663      	strb	r3, [r4, #25]
		(*(pbuffer + 24));
	pdata->global_config__spad_enables_rtn_10 =
 8005db2:	7e6b      	ldrb	r3, [r5, #25]
 8005db4:	76a3      	strb	r3, [r4, #26]
		(*(pbuffer + 25));
	pdata->global_config__spad_enables_rtn_11 =
 8005db6:	7eab      	ldrb	r3, [r5, #26]
 8005db8:	76e3      	strb	r3, [r4, #27]
		(*(pbuffer + 26));
	pdata->global_config__spad_enables_rtn_12 =
 8005dba:	7eeb      	ldrb	r3, [r5, #27]
 8005dbc:	7723      	strb	r3, [r4, #28]
		(*(pbuffer + 27));
	pdata->global_config__spad_enables_rtn_13 =
 8005dbe:	7f2b      	ldrb	r3, [r5, #28]
 8005dc0:	7763      	strb	r3, [r4, #29]
		(*(pbuffer + 28));
	pdata->global_config__spad_enables_rtn_14 =
 8005dc2:	7f6b      	ldrb	r3, [r5, #29]
 8005dc4:	77a3      	strb	r3, [r4, #30]
		(*(pbuffer + 29));
	pdata->global_config__spad_enables_rtn_15 =
 8005dc6:	7fab      	ldrb	r3, [r5, #30]
 8005dc8:	77e3      	strb	r3, [r4, #31]
		(*(pbuffer + 30));
	pdata->global_config__spad_enables_rtn_16 =
 8005dca:	7feb      	ldrb	r3, [r5, #31]
 8005dcc:	f884 3020 	strb.w	r3, [r4, #32]
		(*(pbuffer + 31));
	pdata->global_config__spad_enables_rtn_17 =
 8005dd0:	f895 3020 	ldrb.w	r3, [r5, #32]
 8005dd4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
		(*(pbuffer + 32));
	pdata->global_config__spad_enables_rtn_18 =
 8005dd8:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8005ddc:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
		(*(pbuffer + 33));
	pdata->global_config__spad_enables_rtn_19 =
 8005de0:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8005de4:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
		(*(pbuffer + 34));
	pdata->global_config__spad_enables_rtn_20 =
 8005de8:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 8005dec:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
		(*(pbuffer + 35));
	pdata->global_config__spad_enables_rtn_21 =
 8005df0:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8005df4:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		(*(pbuffer + 36));
	pdata->global_config__spad_enables_rtn_22 =
 8005df8:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 8005dfc:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
		(*(pbuffer + 37));
	pdata->global_config__spad_enables_rtn_23 =
 8005e00:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 8005e04:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
		(*(pbuffer + 38));
	pdata->global_config__spad_enables_rtn_24 =
 8005e08:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
 8005e0c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		(*(pbuffer + 39));
	pdata->global_config__spad_enables_rtn_25 =
 8005e10:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8005e14:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
		(*(pbuffer + 40));
	pdata->global_config__spad_enables_rtn_26 =
 8005e18:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 8005e1c:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
		(*(pbuffer + 41));
	pdata->global_config__spad_enables_rtn_27 =
 8005e20:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 8005e24:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
		(*(pbuffer + 42));
	pdata->global_config__spad_enables_rtn_28 =
 8005e28:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 8005e2c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		(*(pbuffer + 43));
	pdata->global_config__spad_enables_rtn_29 =
 8005e30:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8005e34:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
		(*(pbuffer + 44));
	pdata->global_config__spad_enables_rtn_30 =
 8005e38:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 8005e3c:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
		(*(pbuffer + 45));
	pdata->global_config__spad_enables_rtn_31 =
 8005e40:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
 8005e44:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		(*(pbuffer + 46));
	pdata->roi_config__mode_roi_centre_spad =
 8005e48:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8005e4c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		(*(pbuffer + 47));
	pdata->roi_config__mode_roi_xy_size =
 8005e50:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8005e54:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
		(*(pbuffer + 48));

	LOG_FUNCTION_END(status);

	return status;
 8005e58:	2000      	movs	r0, #0
 8005e5a:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8005e5c:	f06f 0009 	mvn.w	r0, #9
}
 8005e60:	bd38      	pop	{r3, r4, r5, pc}

08005e62 <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8005e62:	b510      	push	{r4, lr}
 8005e64:	b08e      	sub	sp, #56	; 0x38
 8005e66:	460c      	mov	r4, r1
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status = VL53L1_ReadMulti(
 8005e68:	2331      	movs	r3, #49	; 0x31
 8005e6a:	aa01      	add	r2, sp, #4
 8005e6c:	f240 110f 	movw	r1, #271	; 0x10f
 8005e70:	f007 fb22 	bl	800d4b8 <VL53L1_ReadMulti>
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8005e74:	b920      	cbnz	r0, 8005e80 <VL53L1_get_nvm_copy_data+0x1e>
		status = VL53L1_i2c_decode_nvm_copy_data(
 8005e76:	4622      	mov	r2, r4
 8005e78:	a901      	add	r1, sp, #4
 8005e7a:	2031      	movs	r0, #49	; 0x31
 8005e7c:	f7ff ff4c 	bl	8005d18 <VL53L1_i2c_decode_nvm_copy_data>
			pdata);

	LOG_FUNCTION_END(status);

	return status;
}
 8005e80:	b00e      	add	sp, #56	; 0x38
 8005e82:	bd10      	pop	{r4, pc}

08005e84 <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV Dev,
	uint32_t timeout_ms)
{
 8005e84:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e86:	460e      	mov	r6, r1
	 * it copies the NVM data into the G02 host register banks
	 * The host must wait the required time to allow the copy
	 * to complete before attempting to read the firmware status
	 */

	status = VL53L1_WaitUs(
 8005e88:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
{
 8005e8c:	4605      	mov	r5, r0
	status = VL53L1_WaitUs(
 8005e8e:	f007 fb73 	bl	800d578 <VL53L1_WaitUs>
		Dev,
		VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 8005e92:	4604      	mov	r4, r0
 8005e94:	b968      	cbnz	r0, 8005eb2 <VL53L1_poll_for_boot_completion+0x2e>
		status =
 8005e96:	2301      	movs	r3, #1
 8005e98:	9301      	str	r3, [sp, #4]
 8005e9a:	9300      	str	r3, [sp, #0]
 8005e9c:	22e5      	movs	r2, #229	; 0xe5
 8005e9e:	4631      	mov	r1, r6
 8005ea0:	4628      	mov	r0, r5
 8005ea2:	f007 fb73 	bl	800d58c <VL53L1_WaitValueMaskEx>
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 8005ea6:	4604      	mov	r4, r0
 8005ea8:	b918      	cbnz	r0, 8005eb2 <VL53L1_poll_for_boot_completion+0x2e>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 8005eaa:	2103      	movs	r1, #3
 8005eac:	4628      	mov	r0, r5
 8005eae:	f7ff f863 	bl	8004f78 <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
}
 8005eb2:	4620      	mov	r0, r4
 8005eb4:	b002      	add	sp, #8
 8005eb6:	bd70      	pop	{r4, r5, r6, pc}

08005eb8 <VL53L1_poll_for_range_completion>:


VL53L1_Error VL53L1_poll_for_range_completion(
	VL53L1_DEV Dev,
	uint32_t timeout_ms)
{
 8005eb8:	b507      	push	{r0, r1, r2, lr}

	gpio__mux_active_high_hv =
		pdev->stat_cfg.gpio_hv_mux__ctrl &
		VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8005eba:	f890 3170 	ldrb.w	r3, [r0, #368]	; 0x170
		interrupt_ready = 0x01;
	else
		interrupt_ready = 0x00;

	status =
 8005ebe:	2201      	movs	r2, #1
	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8005ec0:	f083 0310 	eor.w	r3, r3, #16
	status =
 8005ec4:	9201      	str	r2, [sp, #4]
 8005ec6:	9200      	str	r2, [sp, #0]
 8005ec8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005ecc:	2231      	movs	r2, #49	; 0x31
 8005ece:	f007 fb5d 	bl	800d58c <VL53L1_WaitValueMaskEx>
			VL53L1_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
}
 8005ed2:	b003      	add	sp, #12
 8005ed4:	f85d fb04 	ldr.w	pc, [sp], #4

08005ed8 <IKS01A2_ENV_SENSOR_Init>:
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY for instance 0
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8005ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005edc:	460f      	mov	r7, r1
 8005ede:	b08d      	sub	sp, #52	; 0x34
  uint32_t function = ENV_TEMPERATURE;
  uint32_t i;
  uint32_t component_functions = 0;
  IKS01A2_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 8005ee0:	4606      	mov	r6, r0
 8005ee2:	b120      	cbz	r0, 8005eee <IKS01A2_ENV_SENSOR_Init+0x16>
 8005ee4:	2801      	cmp	r0, #1
 8005ee6:	d068      	beq.n	8005fba <IKS01A2_ENV_SENSOR_Init+0xe2>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8005ee8:	f06f 0001 	mvn.w	r0, #1
 8005eec:	e062      	b.n	8005fb4 <IKS01A2_ENV_SENSOR_Init+0xdc>
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 8005eee:	23bf      	movs	r3, #191	; 0xbf
 8005ef0:	f88d 3020 	strb.w	r3, [sp, #32]
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005ef4:	4b7b      	ldr	r3, [pc, #492]	; (80060e4 <IKS01A2_ENV_SENSOR_Init+0x20c>)
 8005ef6:	9305      	str	r3, [sp, #20]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005ef8:	4b7b      	ldr	r3, [pc, #492]	; (80060e8 <IKS01A2_ENV_SENSOR_Init+0x210>)
 8005efa:	9306      	str	r3, [sp, #24]
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
  io_ctx.GetTick     = IKS01A2_GetTick;

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8005efc:	f8df 8220 	ldr.w	r8, [pc, #544]	; 8006120 <IKS01A2_ENV_SENSOR_Init+0x248>
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005f00:	4b7a      	ldr	r3, [pc, #488]	; (80060ec <IKS01A2_ENV_SENSOR_Init+0x214>)
 8005f02:	930a      	str	r3, [sp, #40]	; 0x28
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005f04:	4b7a      	ldr	r3, [pc, #488]	; (80060f0 <IKS01A2_ENV_SENSOR_Init+0x218>)
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 8005f06:	9007      	str	r0, [sp, #28]
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005f08:	9309      	str	r3, [sp, #36]	; 0x24
  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8005f0a:	a905      	add	r1, sp, #20
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005f0c:	4b79      	ldr	r3, [pc, #484]	; (80060f4 <IKS01A2_ENV_SENSOR_Init+0x21c>)
 8005f0e:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8005f10:	4640      	mov	r0, r8
 8005f12:	f7fb fa17 	bl	8001344 <HTS221_RegisterBusIO>
 8005f16:	2800      	cmp	r0, #0
 8005f18:	d13d      	bne.n	8005f96 <IKS01A2_ENV_SENSOR_Init+0xbe>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 8005f1a:	f10d 0103 	add.w	r1, sp, #3
 8005f1e:	4640      	mov	r0, r8
 8005f20:	f7fb f8b8 	bl	8001094 <HTS221_ReadID>
 8005f24:	4681      	mov	r9, r0
 8005f26:	2800      	cmp	r0, #0
 8005f28:	d135      	bne.n	8005f96 <IKS01A2_ENV_SENSOR_Init+0xbe>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != HTS221_ID)
 8005f2a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005f2e:	2bbc      	cmp	r3, #188	; 0xbc
 8005f30:	d131      	bne.n	8005f96 <IKS01A2_ENV_SENSOR_Init+0xbe>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 8005f32:	a901      	add	r1, sp, #4
 8005f34:	4640      	mov	r0, r8
 8005f36:	f7fb f833 	bl	8000fa0 <HTS221_GetCapabilities>
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8005f3a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005f3e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8005f42:	f89d 2004 	ldrb.w	r2, [sp, #4]
                                           uint32_t)cap.Humidity << 2);

    EnvCompObj[IKS01A2_HTS221_0] = &hts221_obj_0;
 8005f46:	4d6c      	ldr	r5, [pc, #432]	; (80060f8 <IKS01A2_ENV_SENSOR_Init+0x220>)
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 8005f48:	4c6c      	ldr	r4, [pc, #432]	; (80060fc <IKS01A2_ENV_SENSOR_Init+0x224>)
    EnvCompObj[IKS01A2_HTS221_0] = &hts221_obj_0;
 8005f4a:	f8c5 8000 	str.w	r8, [r5]
                                           uint32_t)cap.Humidity << 2);
 8005f4e:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8005f50:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8005f54:	496a      	ldr	r1, [pc, #424]	; (8006100 <IKS01A2_ENV_SENSOR_Init+0x228>)
 8005f56:	4313      	orrs	r3, r2
 8005f58:	600b      	str	r3, [r1, #0]
    EnvDrv[IKS01A2_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 8005f5a:	4b6a      	ldr	r3, [pc, #424]	; (8006104 <IKS01A2_ENV_SENSOR_Init+0x22c>)
 8005f5c:	6023      	str	r3, [r4, #0]

    if (((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8005f5e:	07f9      	lsls	r1, r7, #31
 8005f60:	d50b      	bpl.n	8005f7a <IKS01A2_ENV_SENSOR_Init+0xa2>
 8005f62:	2a01      	cmp	r2, #1
 8005f64:	d109      	bne.n	8005f7a <IKS01A2_ENV_SENSOR_Init+0xa2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8005f66:	4a68      	ldr	r2, [pc, #416]	; (8006108 <IKS01A2_ENV_SENSOR_Init+0x230>)
 8005f68:	4968      	ldr	r1, [pc, #416]	; (800610c <IKS01A2_ENV_SENSOR_Init+0x234>)

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 8005f6a:	681b      	ldr	r3, [r3, #0]
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8005f6c:	6011      	str	r1, [r2, #0]
      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 8005f6e:	4640      	mov	r0, r8
 8005f70:	4798      	blx	r3
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005f72:	2800      	cmp	r0, #0
 8005f74:	bf18      	it	ne
 8005f76:	f06f 0904 	mvnne.w	r9, #4
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8005f7a:	0778      	lsls	r0, r7, #29
 8005f7c:	d50e      	bpl.n	8005f9c <IKS01A2_ENV_SENSOR_Init+0xc4>
 8005f7e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d10a      	bne.n	8005f9c <IKS01A2_ENV_SENSOR_Init+0xc4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 8005f86:	4b60      	ldr	r3, [pc, #384]	; (8006108 <IKS01A2_ENV_SENSOR_Init+0x230>)
 8005f88:	4a61      	ldr	r2, [pc, #388]	; (8006110 <IKS01A2_ENV_SENSOR_Init+0x238>)
 8005f8a:	609a      	str	r2, [r3, #8]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 8005f8c:	6823      	ldr	r3, [r4, #0]
 8005f8e:	6828      	ldr	r0, [r5, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4798      	blx	r3
 8005f94:	b128      	cbz	r0, 8005fa2 <IKS01A2_ENV_SENSOR_Init+0xca>
        return BSP_ERROR_NO_INIT;
 8005f96:	f04f 30ff 	mov.w	r0, #4294967295
 8005f9a:	e00b      	b.n	8005fb4 <IKS01A2_ENV_SENSOR_Init+0xdc>
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 8005f9c:	f1b9 0f00 	cmp.w	r9, #0
 8005fa0:	d1f9      	bne.n	8005f96 <IKS01A2_ENV_SENSOR_Init+0xbe>
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005fa2:	6823      	ldr	r3, [r4, #0]
 8005fa4:	6828      	ldr	r0, [r5, #0]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	a905      	add	r1, sp, #20
 8005faa:	4798      	blx	r3
 8005fac:	2800      	cmp	r0, #0
 8005fae:	d063      	beq.n	8006078 <IKS01A2_ENV_SENSOR_Init+0x1a0>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005fb0:	f06f 0006 	mvn.w	r0, #6
}
 8005fb4:	b00d      	add	sp, #52	; 0x34
 8005fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  int32_t                 ret = BSP_ERROR_NONE;
  static LPS22HB_Object_t lps22hb_obj_0;
  LPS22HB_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HB_I2C_BUS; /* I2C */
 8005fba:	2300      	movs	r3, #0
 8005fbc:	9307      	str	r3, [sp, #28]
  io_ctx.Address     = LPS22HB_I2C_ADD_H;
 8005fbe:	23bb      	movs	r3, #187	; 0xbb
 8005fc0:	f88d 3020 	strb.w	r3, [sp, #32]
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005fc4:	4b47      	ldr	r3, [pc, #284]	; (80060e4 <IKS01A2_ENV_SENSOR_Init+0x20c>)
 8005fc6:	9305      	str	r3, [sp, #20]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005fc8:	4b47      	ldr	r3, [pc, #284]	; (80060e8 <IKS01A2_ENV_SENSOR_Init+0x210>)
 8005fca:	9306      	str	r3, [sp, #24]
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
  io_ctx.GetTick     = IKS01A2_GetTick;

  if (LPS22HB_RegisterBusIO(&lps22hb_obj_0, &io_ctx) != LPS22HB_OK)
 8005fcc:	f8df 8154 	ldr.w	r8, [pc, #340]	; 8006124 <IKS01A2_ENV_SENSOR_Init+0x24c>
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005fd0:	4b46      	ldr	r3, [pc, #280]	; (80060ec <IKS01A2_ENV_SENSOR_Init+0x214>)
 8005fd2:	930a      	str	r3, [sp, #40]	; 0x28
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005fd4:	4b46      	ldr	r3, [pc, #280]	; (80060f0 <IKS01A2_ENV_SENSOR_Init+0x218>)
 8005fd6:	9309      	str	r3, [sp, #36]	; 0x24
  if (LPS22HB_RegisterBusIO(&lps22hb_obj_0, &io_ctx) != LPS22HB_OK)
 8005fd8:	a905      	add	r1, sp, #20
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005fda:	4b46      	ldr	r3, [pc, #280]	; (80060f4 <IKS01A2_ENV_SENSOR_Init+0x21c>)
 8005fdc:	930b      	str	r3, [sp, #44]	; 0x2c
  if (LPS22HB_RegisterBusIO(&lps22hb_obj_0, &io_ctx) != LPS22HB_OK)
 8005fde:	4640      	mov	r0, r8
 8005fe0:	f7fc f856 	bl	8002090 <LPS22HB_RegisterBusIO>
 8005fe4:	2800      	cmp	r0, #0
 8005fe6:	d1d6      	bne.n	8005f96 <IKS01A2_ENV_SENSOR_Init+0xbe>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (LPS22HB_ReadID(&lps22hb_obj_0, &id) != LPS22HB_OK)
 8005fe8:	f10d 0103 	add.w	r1, sp, #3
 8005fec:	4640      	mov	r0, r8
 8005fee:	f7fb fe71 	bl	8001cd4 <LPS22HB_ReadID>
 8005ff2:	4681      	mov	r9, r0
 8005ff4:	2800      	cmp	r0, #0
 8005ff6:	d1ce      	bne.n	8005f96 <IKS01A2_ENV_SENSOR_Init+0xbe>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != LPS22HB_ID)
 8005ff8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005ffc:	2bb1      	cmp	r3, #177	; 0xb1
 8005ffe:	d1ca      	bne.n	8005f96 <IKS01A2_ENV_SENSOR_Init+0xbe>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)LPS22HB_GetCapabilities(&lps22hb_obj_0, &cap);
 8006000:	a901      	add	r1, sp, #4
 8006002:	4640      	mov	r0, r8
 8006004:	f7fb fe26 	bl	8001c54 <LPS22HB_GetCapabilities>

    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8006008:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800600c:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8006010:	f89d 2004 	ldrb.w	r2, [sp, #4]
                                            uint32_t)cap.Humidity << 2);

    EnvCompObj[IKS01A2_LPS22HB_0] = &lps22hb_obj_0;
 8006014:	4c38      	ldr	r4, [pc, #224]	; (80060f8 <IKS01A2_ENV_SENSOR_Init+0x220>)
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_LPS22HB_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HB_COMMON_Driver;
 8006016:	4d39      	ldr	r5, [pc, #228]	; (80060fc <IKS01A2_ENV_SENSOR_Init+0x224>)
    EnvCompObj[IKS01A2_LPS22HB_0] = &lps22hb_obj_0;
 8006018:	f8c4 8004 	str.w	r8, [r4, #4]
                                            uint32_t)cap.Humidity << 2);
 800601c:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800601e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8006022:	4937      	ldr	r1, [pc, #220]	; (8006100 <IKS01A2_ENV_SENSOR_Init+0x228>)
 8006024:	4313      	orrs	r3, r2
 8006026:	604b      	str	r3, [r1, #4]
    EnvDrv[IKS01A2_LPS22HB_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HB_COMMON_Driver;
 8006028:	4b3a      	ldr	r3, [pc, #232]	; (8006114 <IKS01A2_ENV_SENSOR_Init+0x23c>)
 800602a:	606b      	str	r3, [r5, #4]

    if (((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800602c:	07f9      	lsls	r1, r7, #31
 800602e:	d50b      	bpl.n	8006048 <IKS01A2_ENV_SENSOR_Init+0x170>
 8006030:	2a01      	cmp	r2, #1
 8006032:	d109      	bne.n	8006048 <IKS01A2_ENV_SENSOR_Init+0x170>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_TEMP_Driver;
 8006034:	4a34      	ldr	r2, [pc, #208]	; (8006108 <IKS01A2_ENV_SENSOR_Init+0x230>)
 8006036:	4938      	ldr	r1, [pc, #224]	; (8006118 <IKS01A2_ENV_SENSOR_Init+0x240>)

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 8006038:	681b      	ldr	r3, [r3, #0]
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_TEMP_Driver;
 800603a:	60d1      	str	r1, [r2, #12]
      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 800603c:	4640      	mov	r0, r8
 800603e:	4798      	blx	r3
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006040:	2800      	cmp	r0, #0
 8006042:	bf18      	it	ne
 8006044:	f06f 0904 	mvnne.w	r9, #4
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 8006048:	07ba      	lsls	r2, r7, #30
 800604a:	d511      	bpl.n	8006070 <IKS01A2_ENV_SENSOR_Init+0x198>
 800604c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d10d      	bne.n	8006070 <IKS01A2_ENV_SENSOR_Init+0x198>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_PRESS_Driver;
 8006054:	4b2c      	ldr	r3, [pc, #176]	; (8006108 <IKS01A2_ENV_SENSOR_Init+0x230>)
 8006056:	4a31      	ldr	r2, [pc, #196]	; (800611c <IKS01A2_ENV_SENSOR_Init+0x244>)
 8006058:	611a      	str	r2, [r3, #16]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 800605a:	686b      	ldr	r3, [r5, #4]
 800605c:	6860      	ldr	r0, [r4, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4798      	blx	r3
 8006062:	2800      	cmp	r0, #0
 8006064:	d197      	bne.n	8005f96 <IKS01A2_ENV_SENSOR_Init+0xbe>
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006066:	686b      	ldr	r3, [r5, #4]
 8006068:	6860      	ldr	r0, [r4, #4]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	a905      	add	r1, sp, #20
 800606e:	e79c      	b.n	8005faa <IKS01A2_ENV_SENSOR_Init+0xd2>
      if (LPS22HB_0_Probe(Functions) != BSP_ERROR_NONE)
 8006070:	f1b9 0f00 	cmp.w	r9, #0
 8006074:	d0f7      	beq.n	8006066 <IKS01A2_ENV_SENSOR_Init+0x18e>
 8006076:	e78e      	b.n	8005f96 <IKS01A2_ENV_SENSOR_Init+0xbe>
      if (cap.Temperature == 1U)
 8006078:	f89d 4014 	ldrb.w	r4, [sp, #20]
 800607c:	1e63      	subs	r3, r4, #1
 800607e:	425c      	negs	r4, r3
 8006080:	415c      	adcs	r4, r3
      if (cap.Humidity == 1U)
 8006082:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8006086:	2b01      	cmp	r3, #1
      if (cap.Pressure == 1U)
 8006088:	f89d 3015 	ldrb.w	r3, [sp, #21]
        component_functions |= ENV_HUMIDITY;
 800608c:	bf08      	it	eq
 800608e:	f044 0404 	orreq.w	r4, r4, #4
      if (cap.Pressure == 1U)
 8006092:	2b01      	cmp	r3, #1
 8006094:	d101      	bne.n	800609a <IKS01A2_ENV_SENSOR_Init+0x1c2>
        component_functions |= ENV_PRESSURE;
 8006096:	f044 0402 	orr.w	r4, r4, #2
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800609a:	f8df b05c 	ldr.w	fp, [pc, #92]	; 80060f8 <IKS01A2_ENV_SENSOR_Init+0x220>
 800609e:	f8df a068 	ldr.w	sl, [pc, #104]	; 8006108 <IKS01A2_ENV_SENSOR_Init+0x230>
 80060a2:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8006128 <IKS01A2_ENV_SENSOR_Init+0x250>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80060a6:	2503      	movs	r5, #3
 80060a8:	f04f 0801 	mov.w	r8, #1
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80060ac:	ea38 0307 	bics.w	r3, r8, r7
 80060b0:	d005      	beq.n	80060be <IKS01A2_ENV_SENSOR_Init+0x1e6>
  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 80060b2:	3d01      	subs	r5, #1
    function = function << 1;
 80060b4:	ea4f 0848 	mov.w	r8, r8, lsl #1
  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 80060b8:	d1f8      	bne.n	80060ac <IKS01A2_ENV_SENSOR_Init+0x1d4>
 80060ba:	4628      	mov	r0, r5
 80060bc:	e77a      	b.n	8005fb4 <IKS01A2_ENV_SENSOR_Init+0xdc>
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80060be:	ea38 0304 	bics.w	r3, r8, r4
 80060c2:	d1f6      	bne.n	80060b2 <IKS01A2_ENV_SENSOR_Init+0x1da>
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 80060c4:	f859 2028 	ldr.w	r2, [r9, r8, lsl #2]
 80060c8:	f85b 0026 	ldr.w	r0, [fp, r6, lsl #2]
 80060cc:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80060d0:	4413      	add	r3, r2
 80060d2:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4798      	blx	r3
 80060da:	2800      	cmp	r0, #0
 80060dc:	d0e9      	beq.n	80060b2 <IKS01A2_ENV_SENSOR_Init+0x1da>
        return BSP_ERROR_COMPONENT_FAILURE;
 80060de:	f06f 0004 	mvn.w	r0, #4
 80060e2:	e767      	b.n	8005fb4 <IKS01A2_ENV_SENSOR_Init+0xdc>
 80060e4:	0800cc6d 	.word	0x0800cc6d
 80060e8:	0800cbe5 	.word	0x0800cbe5
 80060ec:	0800cc41 	.word	0x0800cc41
 80060f0:	0800cc19 	.word	0x0800cc19
 80060f4:	0800cc69 	.word	0x0800cc69
 80060f8:	20002730 	.word	0x20002730
 80060fc:	20002494 	.word	0x20002494
 8006100:	2000248c 	.word	0x2000248c
 8006104:	200011c0 	.word	0x200011c0
 8006108:	2000249c 	.word	0x2000249c
 800610c:	200011e4 	.word	0x200011e4
 8006110:	200011d0 	.word	0x200011d0
 8006114:	2000135c 	.word	0x2000135c
 8006118:	20001380 	.word	0x20001380
 800611c:	2000136c 	.word	0x2000136c
 8006120:	200024b4 	.word	0x200024b4
 8006124:	200024e0 	.word	0x200024e0
 8006128:	0801d794 	.word	0x0801d794

0800612c <IKS01A2_ENV_SENSOR_Enable>:
  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 800612c:	2801      	cmp	r0, #1
{
 800612e:	b508      	push	{r3, lr}
  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 8006130:	d818      	bhi.n	8006164 <IKS01A2_ENV_SENSOR_Enable+0x38>
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8006132:	4b0e      	ldr	r3, [pc, #56]	; (800616c <IKS01A2_ENV_SENSOR_Enable+0x40>)
 8006134:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006138:	ea31 0303 	bics.w	r3, r1, r3
 800613c:	d112      	bne.n	8006164 <IKS01A2_ENV_SENSOR_Enable+0x38>
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800613e:	4a0c      	ldr	r2, [pc, #48]	; (8006170 <IKS01A2_ENV_SENSOR_Enable+0x44>)
 8006140:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8006144:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8006148:	4413      	add	r3, r2
 800614a:	4a0a      	ldr	r2, [pc, #40]	; (8006174 <IKS01A2_ENV_SENSOR_Enable+0x48>)
 800614c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006150:	4a09      	ldr	r2, [pc, #36]	; (8006178 <IKS01A2_ENV_SENSOR_Enable+0x4c>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8006158:	4798      	blx	r3
 800615a:	2800      	cmp	r0, #0
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800615c:	bf18      	it	ne
 800615e:	f06f 0004 	mvnne.w	r0, #4
 8006162:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8006164:	f06f 0001 	mvn.w	r0, #1
}
 8006168:	bd08      	pop	{r3, pc}
 800616a:	bf00      	nop
 800616c:	2000248c 	.word	0x2000248c
 8006170:	0801d794 	.word	0x0801d794
 8006174:	2000249c 	.word	0x2000249c
 8006178:	20002730 	.word	0x20002730

0800617c <IKS01A2_ENV_SENSOR_GetValue>:
  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 800617c:	2801      	cmp	r0, #1
{
 800617e:	b510      	push	{r4, lr}
  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 8006180:	d819      	bhi.n	80061b6 <IKS01A2_ENV_SENSOR_GetValue+0x3a>
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8006182:	4b0e      	ldr	r3, [pc, #56]	; (80061bc <IKS01A2_ENV_SENSOR_GetValue+0x40>)
 8006184:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006188:	ea31 0303 	bics.w	r3, r1, r3
 800618c:	d113      	bne.n	80061b6 <IKS01A2_ENV_SENSOR_GetValue+0x3a>
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 800618e:	4c0c      	ldr	r4, [pc, #48]	; (80061c0 <IKS01A2_ENV_SENSOR_GetValue+0x44>)
 8006190:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8006194:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8006198:	440b      	add	r3, r1
 800619a:	490a      	ldr	r1, [pc, #40]	; (80061c4 <IKS01A2_ENV_SENSOR_GetValue+0x48>)
 800619c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80061a0:	4611      	mov	r1, r2
 80061a2:	4a09      	ldr	r2, [pc, #36]	; (80061c8 <IKS01A2_ENV_SENSOR_GetValue+0x4c>)
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80061aa:	4798      	blx	r3
 80061ac:	2800      	cmp	r0, #0
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80061ae:	bf18      	it	ne
 80061b0:	f06f 0004 	mvnne.w	r0, #4
 80061b4:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 80061b6:	f06f 0001 	mvn.w	r0, #1
}
 80061ba:	bd10      	pop	{r4, pc}
 80061bc:	2000248c 	.word	0x2000248c
 80061c0:	0801d794 	.word	0x0801d794
 80061c4:	2000249c 	.word	0x2000249c
 80061c8:	20002730 	.word	0x20002730

080061cc <IKS01A2_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80061cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t function = MOTION_GYRO;
  uint32_t i;
  uint32_t component_functions = 0;
  IKS01A2_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 80061d0:	2801      	cmp	r0, #1
{
 80061d2:	b091      	sub	sp, #68	; 0x44
 80061d4:	4606      	mov	r6, r0
 80061d6:	460f      	mov	r7, r1
  switch (Instance)
 80061d8:	f000 8093 	beq.w	8006302 <IKS01A2_MOTION_SENSOR_Init+0x136>
 80061dc:	d305      	bcc.n	80061ea <IKS01A2_MOTION_SENSOR_Init+0x1e>
 80061de:	2802      	cmp	r0, #2
 80061e0:	f000 80e1 	beq.w	80063a6 <IKS01A2_MOTION_SENSOR_Init+0x1da>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80061e4:	f06f 0001 	mvn.w	r0, #1
 80061e8:	e062      	b.n	80062b0 <IKS01A2_MOTION_SENSOR_Init+0xe4>
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 80061ea:	2300      	movs	r3, #0
 80061ec:	9304      	str	r3, [sp, #16]
  io_ctx.Address     = LSM6DSL_I2C_ADD_H;
 80061ee:	23d7      	movs	r3, #215	; 0xd7
 80061f0:	f88d 3014 	strb.w	r3, [sp, #20]
  io_ctx.Init        = IKS01A2_I2C_Init;
 80061f4:	4b9d      	ldr	r3, [pc, #628]	; (800646c <IKS01A2_MOTION_SENSOR_Init+0x2a0>)
 80061f6:	9302      	str	r3, [sp, #8]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 80061f8:	4b9d      	ldr	r3, [pc, #628]	; (8006470 <IKS01A2_MOTION_SENSOR_Init+0x2a4>)
 80061fa:	9303      	str	r3, [sp, #12]
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
  io_ctx.GetTick     = IKS01A2_GetTick;

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 80061fc:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 80064b4 <IKS01A2_MOTION_SENSOR_Init+0x2e8>
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8006200:	4b9c      	ldr	r3, [pc, #624]	; (8006474 <IKS01A2_MOTION_SENSOR_Init+0x2a8>)
 8006202:	9307      	str	r3, [sp, #28]
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8006204:	4b9c      	ldr	r3, [pc, #624]	; (8006478 <IKS01A2_MOTION_SENSOR_Init+0x2ac>)
 8006206:	9306      	str	r3, [sp, #24]
  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 8006208:	a902      	add	r1, sp, #8
  io_ctx.GetTick     = IKS01A2_GetTick;
 800620a:	4b9c      	ldr	r3, [pc, #624]	; (800647c <IKS01A2_MOTION_SENSOR_Init+0x2b0>)
 800620c:	9308      	str	r3, [sp, #32]
  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 800620e:	4640      	mov	r0, r8
 8006210:	f7fd f9c2 	bl	8003598 <LSM6DSL_RegisterBusIO>
 8006214:	2800      	cmp	r0, #0
 8006216:	d13d      	bne.n	8006294 <IKS01A2_MOTION_SENSOR_Init+0xc8>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 8006218:	f10d 0107 	add.w	r1, sp, #7
 800621c:	4640      	mov	r0, r8
 800621e:	f7fc fdfa 	bl	8002e16 <LSM6DSL_ReadID>
 8006222:	4681      	mov	r9, r0
 8006224:	2800      	cmp	r0, #0
 8006226:	d135      	bne.n	8006294 <IKS01A2_MOTION_SENSOR_Init+0xc8>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != LSM6DSL_ID)
 8006228:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800622c:	2b6a      	cmp	r3, #106	; 0x6a
 800622e:	d131      	bne.n	8006294 <IKS01A2_MOTION_SENSOR_Init+0xc8>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 8006230:	a909      	add	r1, sp, #36	; 0x24
 8006232:	4640      	mov	r0, r8
 8006234:	f7fc fd64 	bl	8002d00 <LSM6DSL_GetCapabilities>
    MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006238:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 800623c:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
 8006240:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25

    MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 8006244:	4c8e      	ldr	r4, [pc, #568]	; (8006480 <IKS01A2_MOTION_SENSOR_Init+0x2b4>)
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 8006246:	4d8f      	ldr	r5, [pc, #572]	; (8006484 <IKS01A2_MOTION_SENSOR_Init+0x2b8>)
    MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 8006248:	f8c4 8000 	str.w	r8, [r4]
    MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8006252:	498d      	ldr	r1, [pc, #564]	; (8006488 <IKS01A2_MOTION_SENSOR_Init+0x2bc>)
 8006254:	4313      	orrs	r3, r2
 8006256:	600b      	str	r3, [r1, #0]
    MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 8006258:	4b8c      	ldr	r3, [pc, #560]	; (800648c <IKS01A2_MOTION_SENSOR_Init+0x2c0>)
 800625a:	602b      	str	r3, [r5, #0]

    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800625c:	07f9      	lsls	r1, r7, #31
 800625e:	d50b      	bpl.n	8006278 <IKS01A2_MOTION_SENSOR_Init+0xac>
 8006260:	2a01      	cmp	r2, #1
 8006262:	d109      	bne.n	8006278 <IKS01A2_MOTION_SENSOR_Init+0xac>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 8006264:	4a8a      	ldr	r2, [pc, #552]	; (8006490 <IKS01A2_MOTION_SENSOR_Init+0x2c4>)
 8006266:	498b      	ldr	r1, [pc, #556]	; (8006494 <IKS01A2_MOTION_SENSOR_Init+0x2c8>)

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8006268:	681b      	ldr	r3, [r3, #0]
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 800626a:	6011      	str	r1, [r2, #0]
      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 800626c:	4640      	mov	r0, r8
 800626e:	4798      	blx	r3
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006270:	2800      	cmp	r0, #0
 8006272:	bf18      	it	ne
 8006274:	f06f 0904 	mvnne.w	r9, #4
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8006278:	07bb      	lsls	r3, r7, #30
 800627a:	d50e      	bpl.n	800629a <IKS01A2_MOTION_SENSOR_Init+0xce>
 800627c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8006280:	2b01      	cmp	r3, #1
 8006282:	d10a      	bne.n	800629a <IKS01A2_MOTION_SENSOR_Init+0xce>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8006284:	4b82      	ldr	r3, [pc, #520]	; (8006490 <IKS01A2_MOTION_SENSOR_Init+0x2c4>)
 8006286:	4a84      	ldr	r2, [pc, #528]	; (8006498 <IKS01A2_MOTION_SENSOR_Init+0x2cc>)
 8006288:	605a      	str	r2, [r3, #4]
            void *)&LSM6DSL_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 800628a:	682b      	ldr	r3, [r5, #0]
 800628c:	6820      	ldr	r0, [r4, #0]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4798      	blx	r3
 8006292:	b128      	cbz	r0, 80062a0 <IKS01A2_MOTION_SENSOR_Init+0xd4>
        return BSP_ERROR_NO_INIT;
 8006294:	f04f 30ff 	mov.w	r0, #4294967295
 8006298:	e00a      	b.n	80062b0 <IKS01A2_MOTION_SENSOR_Init+0xe4>
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 800629a:	f1b9 0f00 	cmp.w	r9, #0
 800629e:	d1f9      	bne.n	8006294 <IKS01A2_MOTION_SENSOR_Init+0xc8>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80062a0:	682b      	ldr	r3, [r5, #0]
 80062a2:	6820      	ldr	r0, [r4, #0]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	a909      	add	r1, sp, #36	; 0x24
 80062a8:	4798      	blx	r3
 80062aa:	b120      	cbz	r0, 80062b6 <IKS01A2_MOTION_SENSOR_Init+0xea>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80062ac:	f06f 0006 	mvn.w	r0, #6
}
 80062b0:	b011      	add	sp, #68	; 0x44
 80062b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (cap.Acc == 1U)
 80062b6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
        component_functions |= MOTION_ACCELERO;
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	bf18      	it	ne
 80062be:	4634      	movne	r4, r6
      if (cap.Gyro == 1U)
 80062c0:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
        component_functions |= MOTION_ACCELERO;
 80062c4:	bf08      	it	eq
 80062c6:	2402      	moveq	r4, #2
      if (cap.Gyro == 1U)
 80062c8:	2b01      	cmp	r3, #1
      if (cap.Magneto == 1U)
 80062ca:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
        component_functions |= MOTION_GYRO;
 80062ce:	bf08      	it	eq
 80062d0:	f044 0401 	orreq.w	r4, r4, #1
      if (cap.Magneto == 1U)
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d101      	bne.n	80062dc <IKS01A2_MOTION_SENSOR_Init+0x110>
        component_functions |= MOTION_MAGNETO;
 80062d8:	f044 0404 	orr.w	r4, r4, #4
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80062dc:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 8006480 <IKS01A2_MOTION_SENSOR_Init+0x2b4>
 80062e0:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 8006490 <IKS01A2_MOTION_SENSOR_Init+0x2c4>
 80062e4:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80064b8 <IKS01A2_MOTION_SENSOR_Init+0x2ec>
        component_functions |= MOTION_ACCELERO;
 80062e8:	2503      	movs	r5, #3
 80062ea:	f04f 0801 	mov.w	r8, #1
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80062ee:	ea38 0307 	bics.w	r3, r8, r7
 80062f2:	f000 80a6 	beq.w	8006442 <IKS01A2_MOTION_SENSOR_Init+0x276>
  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 80062f6:	3d01      	subs	r5, #1
    function = function << 1;
 80062f8:	ea4f 0848 	mov.w	r8, r8, lsl #1
  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 80062fc:	d1f7      	bne.n	80062ee <IKS01A2_MOTION_SENSOR_Init+0x122>
 80062fe:	4628      	mov	r0, r5
 8006300:	e7d6      	b.n	80062b0 <IKS01A2_MOTION_SENSOR_Init+0xe4>
  static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8006302:	2300      	movs	r3, #0
 8006304:	9304      	str	r3, [sp, #16]
  io_ctx.Address     = LSM303AGR_I2C_ADD_XL;
 8006306:	2333      	movs	r3, #51	; 0x33
 8006308:	f88d 3014 	strb.w	r3, [sp, #20]
  io_ctx.Init        = IKS01A2_I2C_Init;
 800630c:	4b57      	ldr	r3, [pc, #348]	; (800646c <IKS01A2_MOTION_SENSOR_Init+0x2a0>)
 800630e:	9302      	str	r3, [sp, #8]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8006310:	4b57      	ldr	r3, [pc, #348]	; (8006470 <IKS01A2_MOTION_SENSOR_Init+0x2a4>)
 8006312:	9303      	str	r3, [sp, #12]
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
  io_ctx.GetTick     = IKS01A2_GetTick;

  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 8006314:	4c61      	ldr	r4, [pc, #388]	; (800649c <IKS01A2_MOTION_SENSOR_Init+0x2d0>)
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8006316:	4b57      	ldr	r3, [pc, #348]	; (8006474 <IKS01A2_MOTION_SENSOR_Init+0x2a8>)
 8006318:	9307      	str	r3, [sp, #28]
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800631a:	4b57      	ldr	r3, [pc, #348]	; (8006478 <IKS01A2_MOTION_SENSOR_Init+0x2ac>)
 800631c:	9306      	str	r3, [sp, #24]
  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 800631e:	a902      	add	r1, sp, #8
  io_ctx.GetTick     = IKS01A2_GetTick;
 8006320:	4b56      	ldr	r3, [pc, #344]	; (800647c <IKS01A2_MOTION_SENSOR_Init+0x2b0>)
 8006322:	9308      	str	r3, [sp, #32]
  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 8006324:	4620      	mov	r0, r4
 8006326:	f7fc fb55 	bl	80029d4 <LSM303AGR_ACC_RegisterBusIO>
 800632a:	2800      	cmp	r0, #0
 800632c:	d1b2      	bne.n	8006294 <IKS01A2_MOTION_SENSOR_Init+0xc8>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK)
 800632e:	f10d 0107 	add.w	r1, sp, #7
 8006332:	4620      	mov	r0, r4
 8006334:	f7fb fff9 	bl	800232a <LSM303AGR_ACC_ReadID>
 8006338:	2800      	cmp	r0, #0
 800633a:	d1ab      	bne.n	8006294 <IKS01A2_MOTION_SENSOR_Init+0xc8>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != (uint8_t)LSM303AGR_ID_XL)
 800633c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006340:	2b33      	cmp	r3, #51	; 0x33
 8006342:	d1a7      	bne.n	8006294 <IKS01A2_MOTION_SENSOR_Init+0xc8>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 8006344:	a909      	add	r1, sp, #36	; 0x24
 8006346:	4620      	mov	r0, r4
 8006348:	f7fb ff86 	bl	8002258 <LSM303AGR_ACC_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 800634c:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 8006350:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
                                                     uint32_t)cap.Magneto << 2);

    MotionCompObj[IKS01A2_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 8006354:	494a      	ldr	r1, [pc, #296]	; (8006480 <IKS01A2_MOTION_SENSOR_Init+0x2b4>)
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 8006356:	4d4b      	ldr	r5, [pc, #300]	; (8006484 <IKS01A2_MOTION_SENSOR_Init+0x2b8>)
    MotionCompObj[IKS01A2_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 8006358:	604c      	str	r4, [r1, #4]
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 800635a:	0043      	lsls	r3, r0, #1
 800635c:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8006360:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 8006364:	4313      	orrs	r3, r2
 8006366:	4a48      	ldr	r2, [pc, #288]	; (8006488 <IKS01A2_MOTION_SENSOR_Init+0x2bc>)

    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8006368:	f017 0f02 	tst.w	r7, #2
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 800636c:	6053      	str	r3, [r2, #4]
    MotionDrv[IKS01A2_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 800636e:	4a4c      	ldr	r2, [pc, #304]	; (80064a0 <IKS01A2_MOTION_SENSOR_Init+0x2d4>)
 8006370:	606a      	str	r2, [r5, #4]
 8006372:	4688      	mov	r8, r1
    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8006374:	d009      	beq.n	800638a <IKS01A2_MOTION_SENSOR_Init+0x1be>
 8006376:	2801      	cmp	r0, #1
 8006378:	d107      	bne.n	800638a <IKS01A2_MOTION_SENSOR_Init+0x1be>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_ACC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800637a:	4b45      	ldr	r3, [pc, #276]	; (8006490 <IKS01A2_MOTION_SENSOR_Init+0x2c4>)
 800637c:	4949      	ldr	r1, [pc, #292]	; (80064a4 <IKS01A2_MOTION_SENSOR_Init+0x2d8>)
 800637e:	6119      	str	r1, [r3, #16]
            void *)&LSM303AGR_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_ACC_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_ACC_0]) != LSM303AGR_OK)
 8006380:	4620      	mov	r0, r4
 8006382:	6813      	ldr	r3, [r2, #0]
 8006384:	4798      	blx	r3
 8006386:	2800      	cmp	r0, #0
 8006388:	d184      	bne.n	8006294 <IKS01A2_MOTION_SENSOR_Init+0xc8>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800638a:	686b      	ldr	r3, [r5, #4]
 800638c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	a909      	add	r1, sp, #36	; 0x24
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006394:	4798      	blx	r3
 8006396:	2800      	cmp	r0, #0
 8006398:	d188      	bne.n	80062ac <IKS01A2_MOTION_SENSOR_Init+0xe0>
      if (cap.Acc == 1U)
 800639a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
        component_functions |= MOTION_ACCELERO;
 800639e:	2b01      	cmp	r3, #1
 80063a0:	bf18      	it	ne
 80063a2:	2400      	movne	r4, #0
 80063a4:	e78c      	b.n	80062c0 <IKS01A2_MOTION_SENSOR_Init+0xf4>
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 80063a6:	2300      	movs	r3, #0
 80063a8:	9304      	str	r3, [sp, #16]
  io_ctx.Address     = LSM303AGR_I2C_ADD_MG;
 80063aa:	233d      	movs	r3, #61	; 0x3d
 80063ac:	f88d 3014 	strb.w	r3, [sp, #20]
  io_ctx.Init        = IKS01A2_I2C_Init;
 80063b0:	4b2e      	ldr	r3, [pc, #184]	; (800646c <IKS01A2_MOTION_SENSOR_Init+0x2a0>)
 80063b2:	9302      	str	r3, [sp, #8]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 80063b4:	4b2e      	ldr	r3, [pc, #184]	; (8006470 <IKS01A2_MOTION_SENSOR_Init+0x2a4>)
 80063b6:	9303      	str	r3, [sp, #12]
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
  io_ctx.GetTick     = IKS01A2_GetTick;

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 80063b8:	4c3b      	ldr	r4, [pc, #236]	; (80064a8 <IKS01A2_MOTION_SENSOR_Init+0x2dc>)
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 80063ba:	4b2e      	ldr	r3, [pc, #184]	; (8006474 <IKS01A2_MOTION_SENSOR_Init+0x2a8>)
 80063bc:	9307      	str	r3, [sp, #28]
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 80063be:	4b2e      	ldr	r3, [pc, #184]	; (8006478 <IKS01A2_MOTION_SENSOR_Init+0x2ac>)
 80063c0:	9306      	str	r3, [sp, #24]
  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 80063c2:	a902      	add	r1, sp, #8
  io_ctx.GetTick     = IKS01A2_GetTick;
 80063c4:	4b2d      	ldr	r3, [pc, #180]	; (800647c <IKS01A2_MOTION_SENSOR_Init+0x2b0>)
 80063c6:	9308      	str	r3, [sp, #32]
  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 80063c8:	4620      	mov	r0, r4
 80063ca:	f7fc fb35 	bl	8002a38 <LSM303AGR_MAG_RegisterBusIO>
 80063ce:	2800      	cmp	r0, #0
 80063d0:	f47f af60 	bne.w	8006294 <IKS01A2_MOTION_SENSOR_Init+0xc8>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 80063d4:	f10d 0107 	add.w	r1, sp, #7
 80063d8:	4620      	mov	r0, r4
 80063da:	f7fc f8ab 	bl	8002534 <LSM303AGR_MAG_ReadID>
 80063de:	2800      	cmp	r0, #0
 80063e0:	f47f af58 	bne.w	8006294 <IKS01A2_MOTION_SENSOR_Init+0xc8>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 80063e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80063e8:	2b40      	cmp	r3, #64	; 0x40
 80063ea:	f47f af53 	bne.w	8006294 <IKS01A2_MOTION_SENSOR_Init+0xc8>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 80063ee:	a909      	add	r1, sp, #36	; 0x24
 80063f0:	4620      	mov	r0, r4
 80063f2:	f7fb ff43 	bl	800227c <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
                                                     uint32_t)cap.Magneto << 2);
 80063f6:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 80063fa:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24

    MotionCompObj[IKS01A2_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 80063fe:	4920      	ldr	r1, [pc, #128]	; (8006480 <IKS01A2_MOTION_SENSOR_Init+0x2b4>)
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 8006400:	4d20      	ldr	r5, [pc, #128]	; (8006484 <IKS01A2_MOTION_SENSOR_Init+0x2b8>)
    MotionCompObj[IKS01A2_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 8006402:	608c      	str	r4, [r1, #8]
                                                     uint32_t)cap.Magneto << 2);
 8006404:	0083      	lsls	r3, r0, #2
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8006406:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 800640a:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 800640e:	4313      	orrs	r3, r2
 8006410:	4a1d      	ldr	r2, [pc, #116]	; (8006488 <IKS01A2_MOTION_SENSOR_Init+0x2bc>)

    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8006412:	f017 0f04 	tst.w	r7, #4
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8006416:	6093      	str	r3, [r2, #8]
    MotionDrv[IKS01A2_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 8006418:	4a24      	ldr	r2, [pc, #144]	; (80064ac <IKS01A2_MOTION_SENSOR_Init+0x2e0>)
 800641a:	60aa      	str	r2, [r5, #8]
 800641c:	4688      	mov	r8, r1
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 800641e:	d00a      	beq.n	8006436 <IKS01A2_MOTION_SENSOR_Init+0x26a>
 8006420:	2801      	cmp	r0, #1
 8006422:	d108      	bne.n	8006436 <IKS01A2_MOTION_SENSOR_Init+0x26a>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8006424:	4b1a      	ldr	r3, [pc, #104]	; (8006490 <IKS01A2_MOTION_SENSOR_Init+0x2c4>)
 8006426:	4922      	ldr	r1, [pc, #136]	; (80064b0 <IKS01A2_MOTION_SENSOR_Init+0x2e4>)
 8006428:	6219      	str	r1, [r3, #32]
            void *)&LSM303AGR_MAG_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_MAG_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_MAG_0]) != LSM303AGR_OK)
 800642a:	4620      	mov	r0, r4
 800642c:	6813      	ldr	r3, [r2, #0]
 800642e:	4798      	blx	r3
 8006430:	2800      	cmp	r0, #0
 8006432:	f47f af2f 	bne.w	8006294 <IKS01A2_MOTION_SENSOR_Init+0xc8>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006436:	68ab      	ldr	r3, [r5, #8]
 8006438:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	a909      	add	r1, sp, #36	; 0x24
 8006440:	e7a8      	b.n	8006394 <IKS01A2_MOTION_SENSOR_Init+0x1c8>
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8006442:	ea38 0304 	bics.w	r3, r8, r4
 8006446:	f47f af56 	bne.w	80062f6 <IKS01A2_MOTION_SENSOR_Init+0x12a>
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800644a:	f859 2028 	ldr.w	r2, [r9, r8, lsl #2]
 800644e:	f85b 0026 	ldr.w	r0, [fp, r6, lsl #2]
 8006452:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8006456:	4413      	add	r3, r2
 8006458:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4798      	blx	r3
 8006460:	2800      	cmp	r0, #0
 8006462:	f43f af48 	beq.w	80062f6 <IKS01A2_MOTION_SENSOR_Init+0x12a>
        return BSP_ERROR_COMPONENT_FAILURE;
 8006466:	f06f 0004 	mvn.w	r0, #4
 800646a:	e721      	b.n	80062b0 <IKS01A2_MOTION_SENSOR_Init+0xe4>
 800646c:	0800cc6d 	.word	0x0800cc6d
 8006470:	0800cbe5 	.word	0x0800cbe5
 8006474:	0800cc41 	.word	0x0800cc41
 8006478:	0800cc19 	.word	0x0800cc19
 800647c:	0800cc69 	.word	0x0800cc69
 8006480:	20002738 	.word	0x20002738
 8006484:	20002518 	.word	0x20002518
 8006488:	2000250c 	.word	0x2000250c
 800648c:	20001420 	.word	0x20001420
 8006490:	20002524 	.word	0x20002524
 8006494:	20001430 	.word	0x20001430
 8006498:	200013fc 	.word	0x200013fc
 800649c:	20002548 	.word	0x20002548
 80064a0:	20001394 	.word	0x20001394
 80064a4:	200013a4 	.word	0x200013a4
 80064a8:	20002574 	.word	0x20002574
 80064ac:	200013c8 	.word	0x200013c8
 80064b0:	200013d8 	.word	0x200013d8
 80064b4:	200025a0 	.word	0x200025a0
 80064b8:	0801d7a8 	.word	0x0801d7a8

080064bc <IKS01A2_MOTION_SENSOR_Enable>:
  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 80064bc:	2802      	cmp	r0, #2
{
 80064be:	b508      	push	{r3, lr}
  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 80064c0:	d818      	bhi.n	80064f4 <IKS01A2_MOTION_SENSOR_Enable+0x38>
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80064c2:	4b0e      	ldr	r3, [pc, #56]	; (80064fc <IKS01A2_MOTION_SENSOR_Enable+0x40>)
 80064c4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80064c8:	ea31 0303 	bics.w	r3, r1, r3
 80064cc:	d112      	bne.n	80064f4 <IKS01A2_MOTION_SENSOR_Enable+0x38>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80064ce:	4a0c      	ldr	r2, [pc, #48]	; (8006500 <IKS01A2_MOTION_SENSOR_Enable+0x44>)
 80064d0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80064d4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80064d8:	4413      	add	r3, r2
 80064da:	4a0a      	ldr	r2, [pc, #40]	; (8006504 <IKS01A2_MOTION_SENSOR_Enable+0x48>)
 80064dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064e0:	4a09      	ldr	r2, [pc, #36]	; (8006508 <IKS01A2_MOTION_SENSOR_Enable+0x4c>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80064e8:	4798      	blx	r3
 80064ea:	2800      	cmp	r0, #0
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80064ec:	bf18      	it	ne
 80064ee:	f06f 0004 	mvnne.w	r0, #4
 80064f2:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 80064f4:	f06f 0001 	mvn.w	r0, #1
}
 80064f8:	bd08      	pop	{r3, pc}
 80064fa:	bf00      	nop
 80064fc:	2000250c 	.word	0x2000250c
 8006500:	0801d7a8 	.word	0x0801d7a8
 8006504:	20002524 	.word	0x20002524
 8006508:	20002738 	.word	0x20002738

0800650c <IKS01A2_MOTION_SENSOR_GetAxes>:
  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 800650c:	2802      	cmp	r0, #2
{
 800650e:	b510      	push	{r4, lr}
  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8006510:	d819      	bhi.n	8006546 <IKS01A2_MOTION_SENSOR_GetAxes+0x3a>
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8006512:	4b0e      	ldr	r3, [pc, #56]	; (800654c <IKS01A2_MOTION_SENSOR_GetAxes+0x40>)
 8006514:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006518:	ea31 0303 	bics.w	r3, r1, r3
 800651c:	d113      	bne.n	8006546 <IKS01A2_MOTION_SENSOR_GetAxes+0x3a>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 800651e:	4c0c      	ldr	r4, [pc, #48]	; (8006550 <IKS01A2_MOTION_SENSOR_GetAxes+0x44>)
 8006520:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8006524:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8006528:	440b      	add	r3, r1
 800652a:	490a      	ldr	r1, [pc, #40]	; (8006554 <IKS01A2_MOTION_SENSOR_GetAxes+0x48>)
 800652c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006530:	4611      	mov	r1, r2
 8006532:	4a09      	ldr	r2, [pc, #36]	; (8006558 <IKS01A2_MOTION_SENSOR_GetAxes+0x4c>)
 8006534:	69db      	ldr	r3, [r3, #28]
 8006536:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800653a:	4798      	blx	r3
 800653c:	2800      	cmp	r0, #0
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800653e:	bf18      	it	ne
 8006540:	f06f 0004 	mvnne.w	r0, #4
 8006544:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8006546:	f06f 0001 	mvn.w	r0, #1
}
 800654a:	bd10      	pop	{r4, pc}
 800654c:	2000250c 	.word	0x2000250c
 8006550:	0801d7a8 	.word	0x0801d7a8
 8006554:	20002524 	.word	0x20002524
 8006558:	20002738 	.word	0x20002738

0800655c <BSP_LED_Init>:
 * @param  Led: Specifies the Led to be configured.
 *   This parameter can be one of following parameters:
 *     @arg LED2
 */
void BSP_LED_Init(Led_TypeDef Led)
{
 800655c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800655e:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Enable the GPIO_LED Clock */
	LEDx_GPIO_CLK_ENABLE(Led);
 8006560:	2400      	movs	r4, #0
 8006562:	4b10      	ldr	r3, [pc, #64]	; (80065a4 <BSP_LED_Init+0x48>)
 8006564:	9400      	str	r4, [sp, #0]
 8006566:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	GPIO_InitStruct.Pin = GPIO_PIN[Led];
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;

	HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8006568:	4d0f      	ldr	r5, [pc, #60]	; (80065a8 <BSP_LED_Init+0x4c>)
	LEDx_GPIO_CLK_ENABLE(Led);
 800656a:	f042 0201 	orr.w	r2, r2, #1
 800656e:	631a      	str	r2, [r3, #48]	; 0x30
 8006570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006572:	9403      	str	r4, [sp, #12]
	LEDx_GPIO_CLK_ENABLE(Led);
 8006574:	f003 0301 	and.w	r3, r3, #1
 8006578:	9300      	str	r3, [sp, #0]
{
 800657a:	4606      	mov	r6, r0
	LEDx_GPIO_CLK_ENABLE(Led);
 800657c:	9b00      	ldr	r3, [sp, #0]
	HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800657e:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006582:	2301      	movs	r3, #1
	GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8006584:	2720      	movs	r7, #32
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006586:	9302      	str	r3, [sp, #8]
	HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8006588:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800658a:	2302      	movs	r3, #2
 800658c:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800658e:	9701      	str	r7, [sp, #4]
	HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8006590:	f001 fabe 	bl	8007b10 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8006594:	4622      	mov	r2, r4
 8006596:	4639      	mov	r1, r7
 8006598:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 800659c:	f001 fc8c 	bl	8007eb8 <HAL_GPIO_WritePin>
}
 80065a0:	b007      	add	sp, #28
 80065a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065a4:	40023800 	.word	0x40023800
 80065a8:	20001478 	.word	0x20001478

080065ac <BSP_LED_On>:
 *   This parameter can be one of following parameters:
 *     @arg LED2
 */
void BSP_LED_On(Led_TypeDef Led)
{
	HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 80065ac:	4b03      	ldr	r3, [pc, #12]	; (80065bc <BSP_LED_On+0x10>)
 80065ae:	2201      	movs	r2, #1
 80065b0:	2120      	movs	r1, #32
 80065b2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80065b6:	f001 bc7f 	b.w	8007eb8 <HAL_GPIO_WritePin>
 80065ba:	bf00      	nop
 80065bc:	20001478 	.word	0x20001478

080065c0 <BSP_LED_Off>:
 *   This parameter can be one of following parameters:
 *     @arg LED2
 */
void BSP_LED_Off(Led_TypeDef Led)
{
	HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 80065c0:	4b03      	ldr	r3, [pc, #12]	; (80065d0 <BSP_LED_Off+0x10>)
 80065c2:	2200      	movs	r2, #0
 80065c4:	2120      	movs	r1, #32
 80065c6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80065ca:	f001 bc75 	b.w	8007eb8 <HAL_GPIO_WritePin>
 80065ce:	bf00      	nop
 80065d0:	20001478 	.word	0x20001478

080065d4 <BSP_PB_Init>:
 *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO
 *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
 *                            generation capability
 */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80065d4:	b510      	push	{r4, lr}
 80065d6:	b086      	sub	sp, #24
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Enable the BUTTON Clock */
	BUTTONx_GPIO_CLK_ENABLE(Button);
 80065d8:	4b19      	ldr	r3, [pc, #100]	; (8006640 <BSP_PB_Init+0x6c>)
 80065da:	2400      	movs	r4, #0
 80065dc:	9400      	str	r4, [sp, #0]
 80065de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065e0:	f042 0204 	orr.w	r2, r2, #4
 80065e4:	631a      	str	r2, [r3, #48]	; 0x30
 80065e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e8:	f003 0304 	and.w	r3, r3, #4
 80065ec:	9300      	str	r3, [sp, #0]
 80065ee:	9b00      	ldr	r3, [sp, #0]

	if (ButtonMode == BUTTON_MODE_GPIO) {
 80065f0:	b971      	cbnz	r1, 8006610 <BSP_PB_Init+0x3c>
		/* Configure Button pin as input */
		GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80065f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80065f6:	9301      	str	r3, [sp, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80065f8:	2302      	movs	r3, #2
 80065fa:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80065fc:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80065fe:	4b11      	ldr	r3, [pc, #68]	; (8006644 <BSP_PB_Init+0x70>)
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006600:	9102      	str	r1, [sp, #8]
		HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8006602:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006606:	a901      	add	r1, sp, #4
 8006608:	f001 fa82 	bl	8007b10 <HAL_GPIO_Init>

		/* Enable and set Button EXTI Interrupt to the lowest priority */
		HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
		HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
	}
}
 800660c:	b006      	add	sp, #24
 800660e:	bd10      	pop	{r4, pc}
	if (ButtonMode == BUTTON_MODE_EXTI) {
 8006610:	2901      	cmp	r1, #1
 8006612:	d1fb      	bne.n	800660c <BSP_PB_Init+0x38>
		GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8006614:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006618:	9301      	str	r3, [sp, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800661a:	4b0b      	ldr	r3, [pc, #44]	; (8006648 <BSP_PB_Init+0x74>)
 800661c:	9302      	str	r3, [sp, #8]
		HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800661e:	4b09      	ldr	r3, [pc, #36]	; (8006644 <BSP_PB_Init+0x70>)
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006620:	9403      	str	r4, [sp, #12]
		HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8006622:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006626:	a901      	add	r1, sp, #4
 8006628:	f001 fa72 	bl	8007b10 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800662c:	4622      	mov	r2, r4
 800662e:	210f      	movs	r1, #15
 8006630:	2028      	movs	r0, #40	; 0x28
 8006632:	f000 ff0f 	bl	8007454 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8006636:	2028      	movs	r0, #40	; 0x28
 8006638:	f000 ff4e 	bl	80074d8 <HAL_NVIC_EnableIRQ>
}
 800663c:	e7e6      	b.n	800660c <BSP_PB_Init+0x38>
 800663e:	bf00      	nop
 8006640:	40023800 	.word	0x40023800
 8006644:	20001474 	.word	0x20001474
 8006648:	10210000 	.word	0x10210000

0800664c <_ExpanderRd>:
 * @param data       read data buffer
 * @param n_data     number of byte to read
 * @return           of if ok else i2c I/O operation status
 */
static int _ExpanderRd(int I2cExpAddr, int index, uint8_t *data, int n_data)
{
 800664c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800664e:	b085      	sub	sp, #20
 8006650:	4617      	mov	r7, r2
	int status;
	uint8_t RegAddr;
	RegAddr = index;
 8006652:	aa04      	add	r2, sp, #16
	XNUCLEO53L1A1_GetI2cBus();
	do {
		status = HAL_I2C_Master_Transmit(&XNUCLEO53L1A1_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 8006654:	b285      	uxth	r5, r0
 8006656:	2464      	movs	r4, #100	; 0x64
	RegAddr = index;
 8006658:	f802 1d01 	strb.w	r1, [r2, #-1]!
{
 800665c:	461e      	mov	r6, r3
		status = HAL_I2C_Master_Transmit(&XNUCLEO53L1A1_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 800665e:	9400      	str	r4, [sp, #0]
 8006660:	2301      	movs	r3, #1
 8006662:	4629      	mov	r1, r5
 8006664:	4806      	ldr	r0, [pc, #24]	; (8006680 <_ExpanderRd+0x34>)
 8006666:	f001 ff19 	bl	800849c <HAL_I2C_Master_Transmit>
		if (status)
 800666a:	b938      	cbnz	r0, 800667c <_ExpanderRd+0x30>
			break;
		status = HAL_I2C_Master_Receive(&XNUCLEO53L1A1_hi2c, I2cExpAddr, data, n_data, n_data * 100);
 800666c:	4374      	muls	r4, r6
 800666e:	9400      	str	r4, [sp, #0]
 8006670:	b2b3      	uxth	r3, r6
 8006672:	463a      	mov	r2, r7
 8006674:	4629      	mov	r1, r5
 8006676:	4802      	ldr	r0, [pc, #8]	; (8006680 <_ExpanderRd+0x34>)
 8006678:	f001 ffe6 	bl	8008648 <HAL_I2C_Master_Receive>
	} while (0);
	XNUCLEO53L1A1_PutI2cBus();
	return status;
}
 800667c:	b005      	add	sp, #20
 800667e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006680:	20002744 	.word	0x20002744

08006684 <_ExpanderWR>:
 * @param data       data buffer
 * @param n_data     number of byte to write
 * @return           of if ok else i2c I/O operation status
 */
static int _ExpanderWR(int I2cExpAddr, int index, uint8_t *data, int n_data)
{
 8006684:	b570      	push	{r4, r5, r6, lr}
 8006686:	b086      	sub	sp, #24
	int status;
	uint8_t RegAddr[0x10];
	RegAddr[0] = index;
 8006688:	ad06      	add	r5, sp, #24
{
 800668a:	4606      	mov	r6, r0
 800668c:	4610      	mov	r0, r2
	RegAddr[0] = index;
 800668e:	f805 1d10 	strb.w	r1, [r5, #-16]!
{
 8006692:	461c      	mov	r4, r3
	memcpy(RegAddr + 1, data, n_data);
 8006694:	461a      	mov	r2, r3
 8006696:	4601      	mov	r1, r0
 8006698:	f10d 0009 	add.w	r0, sp, #9
 800669c:	f014 fc64 	bl	801af68 <memcpy>
	XNUCLEO53L1A1_GetI2cBus();
	status = HAL_I2C_Master_Transmit(&XNUCLEO53L1A1_hi2c, I2cExpAddr, RegAddr, n_data + 1, 100);
 80066a0:	1c63      	adds	r3, r4, #1
 80066a2:	2264      	movs	r2, #100	; 0x64
 80066a4:	9200      	str	r2, [sp, #0]
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	462a      	mov	r2, r5
 80066aa:	b2b1      	uxth	r1, r6
 80066ac:	4802      	ldr	r0, [pc, #8]	; (80066b8 <_ExpanderWR+0x34>)
 80066ae:	f001 fef5 	bl	800849c <HAL_I2C_Master_Transmit>
	XNUCLEO53L1A1_PutI2cBus();
	return status;
}
 80066b2:	b006      	add	sp, #24
 80066b4:	bd70      	pop	{r4, r5, r6, pc}
 80066b6:	bf00      	nop
 80066b8:	20002744 	.word	0x20002744

080066bc <_ExpandersSetAllIO>:
{
 80066bc:	b510      	push	{r4, lr}
	status = _ExpanderWR(I2cExpAddr0, GPSR, &CurIOVal.bytes[0], 2);
 80066be:	2302      	movs	r3, #2
 80066c0:	4a07      	ldr	r2, [pc, #28]	; (80066e0 <_ExpandersSetAllIO+0x24>)
 80066c2:	2112      	movs	r1, #18
 80066c4:	2086      	movs	r0, #134	; 0x86
 80066c6:	f7ff ffdd 	bl	8006684 <_ExpanderWR>
	if (status) {
 80066ca:	b938      	cbnz	r0, 80066dc <_ExpandersSetAllIO+0x20>
	status = _ExpanderWR(I2cExpAddr1, GPSR, &CurIOVal.bytes[2], 2);
 80066cc:	2302      	movs	r3, #2
 80066ce:	4a05      	ldr	r2, [pc, #20]	; (80066e4 <_ExpandersSetAllIO+0x28>)
 80066d0:	2112      	movs	r1, #18
 80066d2:	2084      	movs	r0, #132	; 0x84
}
 80066d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	status = _ExpanderWR(I2cExpAddr1, GPSR, &CurIOVal.bytes[2], 2);
 80066d8:	f7ff bfd4 	b.w	8006684 <_ExpanderWR>
}
 80066dc:	bd10      	pop	{r4, pc}
 80066de:	bf00      	nop
 80066e0:	200025d0 	.word	0x200025d0
 80066e4:	200025d2 	.word	0x200025d2

080066e8 <XNUCLEO53L1A1_I2C1Configure>:
{
 80066e8:	b570      	push	{r4, r5, r6, lr}
 80066ea:	b088      	sub	sp, #32
	__GPIOB_CLK_ENABLE();
 80066ec:	2300      	movs	r3, #0
 80066ee:	9301      	str	r3, [sp, #4]
 80066f0:	4b54      	ldr	r3, [pc, #336]	; (8006844 <XNUCLEO53L1A1_I2C1Configure+0x15c>)
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80066f2:	4855      	ldr	r0, [pc, #340]	; (8006848 <XNUCLEO53L1A1_I2C1Configure+0x160>)
	__GPIOB_CLK_ENABLE();
 80066f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80066f6:	4d54      	ldr	r5, [pc, #336]	; (8006848 <XNUCLEO53L1A1_I2C1Configure+0x160>)
	__GPIOB_CLK_ENABLE();
 80066f8:	f042 0202 	orr.w	r2, r2, #2
 80066fc:	631a      	str	r2, [r3, #48]	; 0x30
 80066fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006700:	f003 0302 	and.w	r3, r3, #2
 8006704:	9301      	str	r3, [sp, #4]
 8006706:	9b01      	ldr	r3, [sp, #4]
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8006708:	f44f 7340 	mov.w	r3, #768	; 0x300
 800670c:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800670e:	2312      	movs	r3, #18
 8006710:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006712:	2301      	movs	r3, #1
 8006714:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006716:	2303      	movs	r3, #3
 8006718:	9306      	str	r3, [sp, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800671a:	a903      	add	r1, sp, #12
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800671c:	2304      	movs	r3, #4
 800671e:	9307      	str	r3, [sp, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006720:	f001 f9f6 	bl	8007b10 <HAL_GPIO_Init>
 8006724:	2408      	movs	r4, #8
 8006726:	260a      	movs	r6, #10
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8006728:	2200      	movs	r2, #0
 800672a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800672e:	4628      	mov	r0, r5
 8006730:	f001 fbc2 	bl	8007eb8 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8006734:	2001      	movs	r0, #1
 8006736:	f000 fbc1 	bl	8006ebc <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800673a:	2201      	movs	r2, #1
 800673c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006740:	4628      	mov	r0, r5
 8006742:	f001 fbb9 	bl	8007eb8 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8006746:	2001      	movs	r0, #1
 8006748:	f000 fbb8 	bl	8006ebc <HAL_Delay>
		for (i = 0; i < 10; i++) {
 800674c:	3e01      	subs	r6, #1
 800674e:	d1eb      	bne.n	8006728 <XNUCLEO53L1A1_I2C1Configure+0x40>
	} while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0 && nRetry++ < 7);
 8006750:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006754:	4628      	mov	r0, r5
 8006756:	f001 fb9d 	bl	8007e94 <HAL_GPIO_ReadPin>
 800675a:	b908      	cbnz	r0, 8006760 <XNUCLEO53L1A1_I2C1Configure+0x78>
 800675c:	3c01      	subs	r4, #1
 800675e:	d1e2      	bne.n	8006726 <XNUCLEO53L1A1_I2C1Configure+0x3e>
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0) {
 8006760:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006764:	4838      	ldr	r0, [pc, #224]	; (8006848 <XNUCLEO53L1A1_I2C1Configure+0x160>)
 8006766:	f001 fb95 	bl	8007e94 <HAL_GPIO_ReadPin>
 800676a:	4b36      	ldr	r3, [pc, #216]	; (8006844 <XNUCLEO53L1A1_I2C1Configure+0x15c>)
 800676c:	2800      	cmp	r0, #0
 800676e:	d135      	bne.n	80067dc <XNUCLEO53L1A1_I2C1Configure+0xf4>
		__GPIOA_CLK_ENABLE();
 8006770:	9002      	str	r0, [sp, #8]
 8006772:	6b1a      	ldr	r2, [r3, #48]	; 0x30
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8006774:	4c35      	ldr	r4, [pc, #212]	; (800684c <XNUCLEO53L1A1_I2C1Configure+0x164>)
		__GPIOA_CLK_ENABLE();
 8006776:	f042 0201 	orr.w	r2, r2, #1
 800677a:	631a      	str	r2, [r3, #48]	; 0x30
 800677c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800677e:	9005      	str	r0, [sp, #20]
		__GPIOA_CLK_ENABLE();
 8006780:	f003 0301 	and.w	r3, r3, #1
 8006784:	9302      	str	r3, [sp, #8]
 8006786:	9b02      	ldr	r3, [sp, #8]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006788:	4830      	ldr	r0, [pc, #192]	; (800684c <XNUCLEO53L1A1_I2C1Configure+0x164>)
		GPIO_InitStruct.Pin = GPIO_PIN_5;
 800678a:	2320      	movs	r3, #32
 800678c:	9303      	str	r3, [sp, #12]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800678e:	a903      	add	r1, sp, #12
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006790:	2301      	movs	r3, #1
 8006792:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006794:	f001 f9bc 	bl	8007b10 <HAL_GPIO_Init>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8006798:	2201      	movs	r2, #1
 800679a:	2120      	movs	r1, #32
 800679c:	4620      	mov	r0, r4
 800679e:	f001 fb8b 	bl	8007eb8 <HAL_GPIO_WritePin>
			HAL_Delay(33);
 80067a2:	2021      	movs	r0, #33	; 0x21
 80067a4:	f000 fb8a 	bl	8006ebc <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80067a8:	2200      	movs	r2, #0
 80067aa:	2120      	movs	r1, #32
 80067ac:	4620      	mov	r0, r4
 80067ae:	f001 fb83 	bl	8007eb8 <HAL_GPIO_WritePin>
			HAL_Delay(33);
 80067b2:	2021      	movs	r0, #33	; 0x21
 80067b4:	f000 fb82 	bl	8006ebc <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80067b8:	2201      	movs	r2, #1
 80067ba:	2120      	movs	r1, #32
 80067bc:	4620      	mov	r0, r4
 80067be:	f001 fb7b 	bl	8007eb8 <HAL_GPIO_WritePin>
			HAL_Delay(33);
 80067c2:	2021      	movs	r0, #33	; 0x21
 80067c4:	f000 fb7a 	bl	8006ebc <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80067c8:	4620      	mov	r0, r4
 80067ca:	2200      	movs	r2, #0
 80067cc:	2120      	movs	r1, #32
 80067ce:	f001 fb73 	bl	8007eb8 <HAL_GPIO_WritePin>
			HAL_Delay(33 * 20);
 80067d2:	f44f 7025 	mov.w	r0, #660	; 0x294
 80067d6:	f000 fb71 	bl	8006ebc <HAL_Delay>
 80067da:	e7dd      	b.n	8006798 <XNUCLEO53L1A1_I2C1Configure+0xb0>
	__GPIOB_CLK_ENABLE();
 80067dc:	2400      	movs	r4, #0
 80067de:	9400      	str	r4, [sp, #0]
 80067e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80067e2:	4819      	ldr	r0, [pc, #100]	; (8006848 <XNUCLEO53L1A1_I2C1Configure+0x160>)
	__GPIOB_CLK_ENABLE();
 80067e4:	f042 0202 	orr.w	r2, r2, #2
 80067e8:	631a      	str	r2, [r3, #48]	; 0x30
 80067ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067ec:	f002 0202 	and.w	r2, r2, #2
 80067f0:	9200      	str	r2, [sp, #0]
 80067f2:	9a00      	ldr	r2, [sp, #0]
	__I2C1_CLK_ENABLE();
 80067f4:	9402      	str	r4, [sp, #8]
 80067f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067f8:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80067fc:	641a      	str	r2, [r3, #64]	; 0x40
 80067fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006800:	9405      	str	r4, [sp, #20]
	__I2C1_CLK_ENABLE();
 8006802:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006806:	9302      	str	r3, [sp, #8]
 8006808:	9b02      	ldr	r3, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800680a:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 800680c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006810:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006812:	2312      	movs	r3, #18
 8006814:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006816:	a903      	add	r1, sp, #12
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006818:	2304      	movs	r3, #4
 800681a:	9307      	str	r3, [sp, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800681c:	f001 f978 	bl	8007b10 <HAL_GPIO_Init>
	XNUCLEO53L1A1_hi2c.Instance = I2C1;
 8006820:	480b      	ldr	r0, [pc, #44]	; (8006850 <XNUCLEO53L1A1_I2C1Configure+0x168>)
	XNUCLEO53L1A1_hi2c.Init.ClockSpeed = 400000;
 8006822:	4a0c      	ldr	r2, [pc, #48]	; (8006854 <XNUCLEO53L1A1_I2C1Configure+0x16c>)
 8006824:	4b0c      	ldr	r3, [pc, #48]	; (8006858 <XNUCLEO53L1A1_I2C1Configure+0x170>)
	XNUCLEO53L1A1_hi2c.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006826:	6084      	str	r4, [r0, #8]
	XNUCLEO53L1A1_hi2c.Init.ClockSpeed = 400000;
 8006828:	e880 000c 	stmia.w	r0, {r2, r3}
	XNUCLEO53L1A1_hi2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800682c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	XNUCLEO53L1A1_hi2c.Init.OwnAddress1 = 0;
 8006830:	60c4      	str	r4, [r0, #12]
	XNUCLEO53L1A1_hi2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006832:	6103      	str	r3, [r0, #16]
	XNUCLEO53L1A1_hi2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8006834:	6144      	str	r4, [r0, #20]
	XNUCLEO53L1A1_hi2c.Init.OwnAddress2 = 0;
 8006836:	6184      	str	r4, [r0, #24]
	XNUCLEO53L1A1_hi2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8006838:	61c4      	str	r4, [r0, #28]
	XNUCLEO53L1A1_hi2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 800683a:	6204      	str	r4, [r0, #32]
	status = HAL_I2C_Init(&XNUCLEO53L1A1_hi2c);
 800683c:	f001 fd2c 	bl	8008298 <HAL_I2C_Init>
}
 8006840:	b008      	add	sp, #32
 8006842:	bd70      	pop	{r4, r5, r6, pc}
 8006844:	40023800 	.word	0x40023800
 8006848:	40020400 	.word	0x40020400
 800684c:	40020000 	.word	0x40020000
 8006850:	20002744 	.word	0x20002744
 8006854:	40005400 	.word	0x40005400
 8006858:	00061a80 	.word	0x00061a80

0800685c <XNUCLEO53L1A1_Init>:
{
 800685c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	XNUCLEO53L1A1_I2C1Configure();
 800685e:	f7ff ff43 	bl	80066e8 <XNUCLEO53L1A1_I2C1Configure>
	status = _ExpanderRd(I2cExpAddr0, 0, ExpanderData, 2);
 8006862:	2302      	movs	r3, #2
 8006864:	aa01      	add	r2, sp, #4
 8006866:	2100      	movs	r1, #0
 8006868:	2086      	movs	r0, #134	; 0x86
 800686a:	f7ff feef 	bl	800664c <_ExpanderRd>
	if (status != 0 || ExpanderData[0] != 0x00 || ExpanderData[1] != 0x16) {
 800686e:	4604      	mov	r4, r0
 8006870:	bbb0      	cbnz	r0, 80068e0 <XNUCLEO53L1A1_Init+0x84>
 8006872:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006876:	bb9b      	cbnz	r3, 80068e0 <XNUCLEO53L1A1_Init+0x84>
 8006878:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800687c:	2b16      	cmp	r3, #22
 800687e:	d12f      	bne.n	80068e0 <XNUCLEO53L1A1_Init+0x84>
	status = _ExpanderRd(I2cExpAddr1, 0, ExpanderData, 2);
 8006880:	4601      	mov	r1, r0
 8006882:	2302      	movs	r3, #2
 8006884:	aa01      	add	r2, sp, #4
 8006886:	2084      	movs	r0, #132	; 0x84
 8006888:	f7ff fee0 	bl	800664c <_ExpanderRd>
	if (status != 0 || ExpanderData[0] != 0x00 || ExpanderData[1] != 0x16) {
 800688c:	bb38      	cbnz	r0, 80068de <XNUCLEO53L1A1_Init+0x82>
 800688e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006892:	bb2b      	cbnz	r3, 80068e0 <XNUCLEO53L1A1_Init+0x84>
 8006894:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006898:	2b16      	cmp	r3, #22
 800689a:	d121      	bne.n	80068e0 <XNUCLEO53L1A1_Init+0x84>
	CurIOVal.u32 = 0x0;
 800689c:	4e12      	ldr	r6, [pc, #72]	; (80068e8 <XNUCLEO53L1A1_Init+0x8c>)
	ExpanderData[0] = 0xFF;
 800689e:	25ff      	movs	r5, #255	; 0xff
	status = _ExpanderWR(I2cExpAddr0, GPDR, ExpanderData, 2);
 80068a0:	2302      	movs	r3, #2
 80068a2:	aa01      	add	r2, sp, #4
 80068a4:	2114      	movs	r1, #20
 80068a6:	2086      	movs	r0, #134	; 0x86
	CurIOVal.u32 = 0x0;
 80068a8:	6034      	str	r4, [r6, #0]
	ExpanderData[0] = 0xFF;
 80068aa:	f88d 5004 	strb.w	r5, [sp, #4]
	ExpanderData[1] = 0xFF;
 80068ae:	f88d 5005 	strb.w	r5, [sp, #5]
	status = _ExpanderWR(I2cExpAddr0, GPDR, ExpanderData, 2);
 80068b2:	f7ff fee7 	bl	8006684 <_ExpanderWR>
	if (status) {
 80068b6:	4604      	mov	r4, r0
 80068b8:	b990      	cbnz	r0, 80068e0 <XNUCLEO53L1A1_Init+0x84>
	ExpanderData[1] = 0xBF; // all but bit 14-15 that is pb1 and xhurt
 80068ba:	23bf      	movs	r3, #191	; 0xbf
 80068bc:	f88d 3005 	strb.w	r3, [sp, #5]
	status = _ExpanderWR(I2cExpAddr1, GPDR, ExpanderData, 2);
 80068c0:	aa01      	add	r2, sp, #4
 80068c2:	2302      	movs	r3, #2
 80068c4:	2114      	movs	r1, #20
 80068c6:	2084      	movs	r0, #132	; 0x84
	ExpanderData[0] = 0xFF;
 80068c8:	f88d 5004 	strb.w	r5, [sp, #4]
	status = _ExpanderWR(I2cExpAddr1, GPDR, ExpanderData, 2);
 80068cc:	f7ff feda 	bl	8006684 <_ExpanderWR>
	if (status) {
 80068d0:	4604      	mov	r4, r0
 80068d2:	b928      	cbnz	r0, 80068e0 <XNUCLEO53L1A1_Init+0x84>
	CurIOVal.u32 = 0x7F + (0x7F << 7) + (0x7F << 16) + (0x7F << (16 + 7));
 80068d4:	f06f 23c0 	mvn.w	r3, #3221274624	; 0xc000c000
 80068d8:	6033      	str	r3, [r6, #0]
	status = _ExpandersSetAllIO();
 80068da:	f7ff feef 	bl	80066bc <_ExpandersSetAllIO>
 80068de:	4604      	mov	r4, r0
}
 80068e0:	4620      	mov	r0, r4
 80068e2:	b002      	add	sp, #8
 80068e4:	bd70      	pop	{r4, r5, r6, pc}
 80068e6:	bf00      	nop
 80068e8:	200025d0 	.word	0x200025d0

080068ec <XNUCLEO53L1A1_ResetId>:
	switch (DevNo) {
 80068ec:	2802      	cmp	r0, #2
 80068ee:	d026      	beq.n	800693e <XNUCLEO53L1A1_ResetId+0x52>
 80068f0:	dc0e      	bgt.n	8006910 <XNUCLEO53L1A1_ResetId+0x24>
 80068f2:	b1b0      	cbz	r0, 8006922 <XNUCLEO53L1A1_ResetId+0x36>
 80068f4:	2801      	cmp	r0, #1
 80068f6:	d12b      	bne.n	8006950 <XNUCLEO53L1A1_ResetId+0x64>
		CurIOVal.bytes[3] &= ~0x80; /* bit 15 expender 1  => byte #3 */
 80068f8:	4a17      	ldr	r2, [pc, #92]	; (8006958 <XNUCLEO53L1A1_ResetId+0x6c>)
 80068fa:	78d3      	ldrb	r3, [r2, #3]
 80068fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		if (state)
 8006900:	b961      	cbnz	r1, 800691c <XNUCLEO53L1A1_ResetId+0x30>
			CurIOVal.bytes[3] |= 0x80; /* bit 15 expender 1  => byte #3 */
 8006902:	70d3      	strb	r3, [r2, #3]
		status = _ExpanderWR(I2cExpAddr1, GPSR + 1, &CurIOVal.bytes[3], 1);
 8006904:	4a15      	ldr	r2, [pc, #84]	; (800695c <XNUCLEO53L1A1_ResetId+0x70>)
 8006906:	2301      	movs	r3, #1
 8006908:	2113      	movs	r1, #19
 800690a:	2084      	movs	r0, #132	; 0x84
		status = _ExpanderWR(I2cExpAddr0, GPSR + 1, &CurIOVal.bytes[1], 1);
 800690c:	f7ff beba 	b.w	8006684 <_ExpanderWR>
	switch (DevNo) {
 8006910:	286c      	cmp	r0, #108	; 0x6c
 8006912:	d006      	beq.n	8006922 <XNUCLEO53L1A1_ResetId+0x36>
 8006914:	2872      	cmp	r0, #114	; 0x72
 8006916:	d012      	beq.n	800693e <XNUCLEO53L1A1_ResetId+0x52>
 8006918:	2863      	cmp	r0, #99	; 0x63
 800691a:	e7ec      	b.n	80068f6 <XNUCLEO53L1A1_ResetId+0xa>
			CurIOVal.bytes[3] |= 0x80; /* bit 15 expender 1  => byte #3 */
 800691c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006920:	e7ef      	b.n	8006902 <XNUCLEO53L1A1_ResetId+0x16>
		CurIOVal.bytes[1] &= ~0x40; /* bit 14 expender 0 => byte #1*/
 8006922:	4a0d      	ldr	r2, [pc, #52]	; (8006958 <XNUCLEO53L1A1_ResetId+0x6c>)
 8006924:	7853      	ldrb	r3, [r2, #1]
 8006926:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
		if (state)
 800692a:	b929      	cbnz	r1, 8006938 <XNUCLEO53L1A1_ResetId+0x4c>
			CurIOVal.bytes[1] |= 0x80; /* bit 15 expender 0 => byte #1*/
 800692c:	7053      	strb	r3, [r2, #1]
		status = _ExpanderWR(I2cExpAddr0, GPSR + 1, &CurIOVal.bytes[1], 1);
 800692e:	2113      	movs	r1, #19
 8006930:	2301      	movs	r3, #1
 8006932:	4a0b      	ldr	r2, [pc, #44]	; (8006960 <XNUCLEO53L1A1_ResetId+0x74>)
 8006934:	2086      	movs	r0, #134	; 0x86
 8006936:	e7e9      	b.n	800690c <XNUCLEO53L1A1_ResetId+0x20>
			CurIOVal.bytes[1] |= 0x40; /* bit 14 expender 0 => byte #1*/
 8006938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800693c:	e7f6      	b.n	800692c <XNUCLEO53L1A1_ResetId+0x40>
		CurIOVal.bytes[1] &= ~0x80; /* bit 15 expender 0  => byte #1 */
 800693e:	4a06      	ldr	r2, [pc, #24]	; (8006958 <XNUCLEO53L1A1_ResetId+0x6c>)
 8006940:	7853      	ldrb	r3, [r2, #1]
 8006942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		if (state)
 8006946:	2900      	cmp	r1, #0
 8006948:	d0f0      	beq.n	800692c <XNUCLEO53L1A1_ResetId+0x40>
			CurIOVal.bytes[1] |= 0x80; /* bit 15 expender 0 => byte #1*/
 800694a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800694e:	e7ed      	b.n	800692c <XNUCLEO53L1A1_ResetId+0x40>
}
 8006950:	f04f 30ff 	mov.w	r0, #4294967295
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	200025d0 	.word	0x200025d0
 800695c:	200025d3 	.word	0x200025d3
 8006960:	200025d1 	.word	0x200025d1

08006964 <L6206_Board_DisableBridge>:
* @brief Disable the power bridges (leave the output bridges HiZ)
* @param[in]  bridgeId (from 0 for bridge A to 1 for bridge B)
* @retval None
**********************************************************/
void L6206_Board_DisableBridge(uint8_t bridgeId)
{
 8006964:	b570      	push	{r4, r5, r6, lr}
	if (bridgeId == 0) {
		gpioPin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN;
		gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT;
	}else  {
		gpioPin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
		gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT;
 8006966:	4b10      	ldr	r3, [pc, #64]	; (80069a8 <L6206_Board_DisableBridge+0x44>)
 8006968:	4c10      	ldr	r4, [pc, #64]	; (80069ac <L6206_Board_DisableBridge+0x48>)
	if (bridgeId == 0) {
 800696a:	2800      	cmp	r0, #0
{
 800696c:	b086      	sub	sp, #24
		gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT;
 800696e:	bf14      	ite	ne
 8006970:	461c      	movne	r4, r3
 8006972:	f44f 6580 	moveq.w	r5, #1024	; 0x400
	}

	/* Configure the GPIO connected to EN pin as an output */
	GPIO_InitStruct.Pin = gpioPin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006976:	f04f 0301 	mov.w	r3, #1
		gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT;
 800697a:	bf18      	it	ne
 800697c:	2502      	movne	r5, #2
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800697e:	2600      	movs	r6, #0
	GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
	HAL_GPIO_Init(gpioPort, &GPIO_InitStruct);
 8006980:	a901      	add	r1, sp, #4
 8006982:	4620      	mov	r0, r4
	GPIO_InitStruct.Pin = gpioPin;
 8006984:	9501      	str	r5, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006986:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006988:	9603      	str	r6, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 800698a:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(gpioPort, &GPIO_InitStruct);
 800698c:	f001 f8c0 	bl	8007b10 <HAL_GPIO_Init>
   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
   Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
	__ASM volatile ("cpsid i" : : : "memory");
 8006990:	b672      	cpsid	i

	__disable_irq();
	HAL_GPIO_WritePin(gpioPort, gpioPin, GPIO_PIN_RESET);
 8006992:	4632      	mov	r2, r6
 8006994:	4629      	mov	r1, r5
 8006996:	4620      	mov	r0, r4
 8006998:	f001 fa8e 	bl	8007eb8 <HAL_GPIO_WritePin>
	__HAL_GPIO_EXTI_CLEAR_IT(gpioPin);
 800699c:	4b04      	ldr	r3, [pc, #16]	; (80069b0 <L6206_Board_DisableBridge+0x4c>)
 800699e:	615d      	str	r5, [r3, #20]
	__ASM volatile ("cpsie i" : : : "memory");
 80069a0:	b662      	cpsie	i
	__enable_irq();
}
 80069a2:	b006      	add	sp, #24
 80069a4:	bd70      	pop	{r4, r5, r6, pc}
 80069a6:	bf00      	nop
 80069a8:	40020800 	.word	0x40020800
 80069ac:	40020000 	.word	0x40020000
 80069b0:	40013c00 	.word	0x40013c00

080069b4 <L6206_Board_EnableBridge>:
* @param[in]  bridgeId (from 0 for bridge A to 1 for bridge B)
* @param[in]  addDelay if different from 0, a delay is added after bridge activation
* @retval None
**********************************************************/
void L6206_Board_EnableBridge(uint8_t bridgeId, uint8_t addDelay)
{
 80069b4:	b5f0      	push	{r4, r5, r6, r7, lr}
		gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT;
		flagIrqn = EXTI_FLAG_A_IRQn;
	}else  {
		gpioPin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
		gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT;
		flagIrqn = EXTI_FLAG_B_IRQn;
 80069b6:	4b15      	ldr	r3, [pc, #84]	; (8006a0c <L6206_Board_EnableBridge+0x58>)
 80069b8:	4c15      	ldr	r4, [pc, #84]	; (8006a10 <L6206_Board_EnableBridge+0x5c>)
 80069ba:	2800      	cmp	r0, #0
 80069bc:	bf16      	itet	ne
 80069be:	461c      	movne	r4, r3
 80069c0:	f44f 6580 	moveq.w	r5, #1024	; 0x400
 80069c4:	2502      	movne	r5, #2
{
 80069c6:	460f      	mov	r7, r1
 80069c8:	b087      	sub	sp, #28
	}

	HAL_GPIO_WritePin(gpioPort, gpioPin, GPIO_PIN_SET);
 80069ca:	f04f 0201 	mov.w	r2, #1
 80069ce:	4629      	mov	r1, r5
 80069d0:	4620      	mov	r0, r4
		flagIrqn = EXTI_FLAG_B_IRQn;
 80069d2:	bf0c      	ite	eq
 80069d4:	2628      	moveq	r6, #40	; 0x28
 80069d6:	2607      	movne	r6, #7
	HAL_GPIO_WritePin(gpioPort, gpioPin, GPIO_PIN_SET);
 80069d8:	f001 fa6e 	bl	8007eb8 <HAL_GPIO_WritePin>
	if (addDelay != 0) {
 80069dc:	b117      	cbz	r7, 80069e4 <L6206_Board_EnableBridge+0x30>
		HAL_Delay(BSP_MOTOR_CONTROL_BOARD_BRIDGE_TURN_ON_DELAY);
 80069de:	2014      	movs	r0, #20
 80069e0:	f000 fa6c 	bl	8006ebc <HAL_Delay>
	}
	/* Configure the GPIO connected to EN pin to take interrupt */
	GPIO_InitStruct.Pin = gpioPin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80069e4:	4b0b      	ldr	r3, [pc, #44]	; (8006a14 <L6206_Board_EnableBridge+0x60>)
 80069e6:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
	HAL_GPIO_Init(gpioPort, &GPIO_InitStruct);
 80069e8:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80069ea:	2301      	movs	r3, #1
	HAL_GPIO_Init(gpioPort, &GPIO_InitStruct);
 80069ec:	4620      	mov	r0, r4
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80069ee:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80069f0:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Pin = gpioPin;
 80069f2:	9501      	str	r5, [sp, #4]
	HAL_GPIO_Init(gpioPort, &GPIO_InitStruct);
 80069f4:	f001 f88c 	bl	8007b10 <HAL_GPIO_Init>

	__HAL_GPIO_EXTI_CLEAR_IT(gpioPin);
 80069f8:	4b07      	ldr	r3, [pc, #28]	; (8006a18 <L6206_Board_EnableBridge+0x64>)
	HAL_NVIC_ClearPendingIRQ(flagIrqn);
 80069fa:	4630      	mov	r0, r6
	__HAL_GPIO_EXTI_CLEAR_IT(gpioPin);
 80069fc:	615d      	str	r5, [r3, #20]
	HAL_NVIC_ClearPendingIRQ(flagIrqn);
 80069fe:	f000 fdad 	bl	800755c <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(flagIrqn);
 8006a02:	4630      	mov	r0, r6
 8006a04:	f000 fd68 	bl	80074d8 <HAL_NVIC_EnableIRQ>
}
 8006a08:	b007      	add	sp, #28
 8006a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a0c:	40020800 	.word	0x40020800
 8006a10:	40020000 	.word	0x40020000
 8006a14:	10210000 	.word	0x10210000
 8006a18:	40013c00 	.word	0x40013c00

08006a1c <L6206_Board_GetFlagPinState>:
* @brief  Returns the FLAG pin state.
* @param[in]  bridgeId (from 0 for bridge A to 1 for bridge B)
* @retval The FLAG pin value.
**********************************************************/
uint32_t L6206_Board_GetFlagPinState(uint8_t bridgeId)
{
 8006a1c:	b508      	push	{r3, lr}
		gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT;
	}else  {
		gpioPin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
		gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT;
	}
	return HAL_GPIO_ReadPin(gpioPort, gpioPin);
 8006a1e:	4b06      	ldr	r3, [pc, #24]	; (8006a38 <L6206_Board_GetFlagPinState+0x1c>)
	if (bridgeId == 0) {
 8006a20:	2800      	cmp	r0, #0
	return HAL_GPIO_ReadPin(gpioPort, gpioPin);
 8006a22:	bf0c      	ite	eq
 8006a24:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 8006a28:	2102      	movne	r1, #2
 8006a2a:	4804      	ldr	r0, [pc, #16]	; (8006a3c <L6206_Board_GetFlagPinState+0x20>)
 8006a2c:	bf18      	it	ne
 8006a2e:	4618      	movne	r0, r3
 8006a30:	f001 fa30 	bl	8007e94 <HAL_GPIO_ReadPin>
}
 8006a34:	bd08      	pop	{r3, pc}
 8006a36:	bf00      	nop
 8006a38:	40020800 	.word	0x40020800
 8006a3c:	40020000 	.word	0x40020000

08006a40 <L6206_Board_GpioInit>:
/******************************************************//**
* @brief  Initiliases the GPIOs used by the L6206s
* @retval None
**********************************************************/
void L6206_Board_GpioInit(void)
{
 8006a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a42:	b089      	sub	sp, #36	; 0x24
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__GPIOC_CLK_ENABLE();
 8006a44:	2400      	movs	r4, #0
 8006a46:	4b28      	ldr	r3, [pc, #160]	; (8006ae8 <L6206_Board_GpioInit+0xa8>)
 8006a48:	9400      	str	r4, [sp, #0]
 8006a4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	/* This pin is reconfigured later for OCD and OVT as GPIO_MODE_IT_FALLING with GPIO_PULLUP */
	GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
	HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT, &GPIO_InitStruct);
 8006a4c:	4e27      	ldr	r6, [pc, #156]	; (8006aec <L6206_Board_GpioInit+0xac>)
	__GPIOC_CLK_ENABLE();
 8006a4e:	f042 0204 	orr.w	r2, r2, #4
 8006a52:	631a      	str	r2, [r3, #48]	; 0x30
 8006a54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a56:	f002 0204 	and.w	r2, r2, #4
 8006a5a:	9200      	str	r2, [sp, #0]
 8006a5c:	9a00      	ldr	r2, [sp, #0]
	__GPIOA_CLK_ENABLE();
 8006a5e:	9401      	str	r4, [sp, #4]
 8006a60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a62:	f042 0201 	orr.w	r2, r2, #1
 8006a66:	631a      	str	r2, [r3, #48]	; 0x30
 8006a68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a6a:	f002 0201 	and.w	r2, r2, #1
 8006a6e:	9201      	str	r2, [sp, #4]
 8006a70:	9a01      	ldr	r2, [sp, #4]
	__GPIOB_CLK_ENABLE();
 8006a72:	9402      	str	r4, [sp, #8]
 8006a74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a76:	f042 0202 	orr.w	r2, r2, #2
 8006a7a:	631a      	str	r2, [r3, #48]	; 0x30
 8006a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a7e:	9405      	str	r4, [sp, #20]
	__GPIOB_CLK_ENABLE();
 8006a80:	f003 0302 	and.w	r3, r3, #2
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a84:	2501      	movs	r5, #1
	__GPIOB_CLK_ENABLE();
 8006a86:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN;
 8006a88:	f44f 6780 	mov.w	r7, #1024	; 0x400
	HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT, &GPIO_InitStruct);
 8006a8c:	a903      	add	r1, sp, #12
 8006a8e:	4630      	mov	r0, r6
	__GPIOB_CLK_ENABLE();
 8006a90:	9b02      	ldr	r3, [sp, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a92:	9504      	str	r5, [sp, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8006a94:	9506      	str	r5, [sp, #24]
	GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN;
 8006a96:	9703      	str	r7, [sp, #12]
	HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT, &GPIO_InitStruct);
 8006a98:	f001 f83a 	bl	8007b10 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT, BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN, GPIO_PIN_RESET);
 8006a9c:	4622      	mov	r2, r4
 8006a9e:	4639      	mov	r1, r7
 8006aa0:	4630      	mov	r0, r6
 8006aa2:	f001 fa09 	bl	8007eb8 <HAL_GPIO_WritePin>

	/* Set Priority of External Line Interrupt used for the OCD OVT interrupt*/
	HAL_NVIC_SetPriority(EXTI_FLAG_A_IRQn, BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PRIORITY, 0);
 8006aa6:	4622      	mov	r2, r4
 8006aa8:	2104      	movs	r1, #4
 8006aaa:	2028      	movs	r0, #40	; 0x28
 8006aac:	f000 fcd2 	bl	8007454 <HAL_NVIC_SetPriority>

	/* Enable the External Line Interrupt used for the OCD OVT interrupt*/
	HAL_NVIC_EnableIRQ(EXTI_FLAG_A_IRQn);
 8006ab0:	2028      	movs	r0, #40	; 0x28
 8006ab2:	f000 fd11 	bl	80074d8 <HAL_NVIC_EnableIRQ>

/* Configure L6206 Enable pin of Bridge B ------------------------------*/
	/* This pin is reconfigured later for OCD and OVT as GPIO_MODE_IT_FALLING with GPIO_PULLUP */
	GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006ab6:	9504      	str	r5, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8006ab8:	9506      	str	r5, [sp, #24]
	HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT, &GPIO_InitStruct);
 8006aba:	4d0d      	ldr	r5, [pc, #52]	; (8006af0 <L6206_Board_GpioInit+0xb0>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006abc:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
 8006abe:	2602      	movs	r6, #2
	HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT, &GPIO_InitStruct);
 8006ac0:	a903      	add	r1, sp, #12
 8006ac2:	4628      	mov	r0, r5
	GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
 8006ac4:	9603      	str	r6, [sp, #12]
	HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT, &GPIO_InitStruct);
 8006ac6:	f001 f823 	bl	8007b10 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT, BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN, GPIO_PIN_RESET);
 8006aca:	4622      	mov	r2, r4
 8006acc:	4631      	mov	r1, r6
 8006ace:	4628      	mov	r0, r5
 8006ad0:	f001 f9f2 	bl	8007eb8 <HAL_GPIO_WritePin>

	/* Set Priority of External Line Interrupt used for the OCD OVT interrupt*/
	HAL_NVIC_SetPriority(EXTI_FLAG_B_IRQn, BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PRIORITY, 0);
 8006ad4:	4622      	mov	r2, r4
 8006ad6:	2104      	movs	r1, #4
 8006ad8:	2007      	movs	r0, #7
 8006ada:	f000 fcbb 	bl	8007454 <HAL_NVIC_SetPriority>

	/* Enable the External Line Interrupt used for the OCD OVT interrupt*/
	HAL_NVIC_EnableIRQ(EXTI_FLAG_B_IRQn);
 8006ade:	2007      	movs	r0, #7
 8006ae0:	f000 fcfa 	bl	80074d8 <HAL_NVIC_EnableIRQ>
}
 8006ae4:	b009      	add	sp, #36	; 0x24
 8006ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ae8:	40023800 	.word	0x40023800
 8006aec:	40020000 	.word	0x40020000
 8006af0:	40020800 	.word	0x40020800

08006af4 <L6206_Board_PwmDeInit>:
**********************************************************/
void L6206_Board_PwmDeInit(uint8_t bridgeInput)
{
	TIM_HandleTypeDef *pHTim;

	switch (bridgeInput) {
 8006af4:	2802      	cmp	r0, #2
 8006af6:	d00e      	beq.n	8006b16 <L6206_Board_PwmDeInit+0x22>
 8006af8:	2803      	cmp	r0, #3
 8006afa:	d010      	beq.n	8006b1e <L6206_Board_PwmDeInit+0x2a>
 8006afc:	2801      	cmp	r0, #1
 8006afe:	4b0a      	ldr	r3, [pc, #40]	; (8006b28 <L6206_Board_PwmDeInit+0x34>)
 8006b00:	d005      	beq.n	8006b0e <L6206_Board_PwmDeInit+0x1a>
	case 0:
	default:
		pHTim = &hTimPwm1A;
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1A;
 8006b02:	480a      	ldr	r0, [pc, #40]	; (8006b2c <L6206_Board_PwmDeInit+0x38>)
		pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2A;

		break;
	case 2:
		pHTim = &hTimPwm1B;
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B;
 8006b04:	6003      	str	r3, [r0, #0]
		pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM1B;
 8006b06:	2301      	movs	r3, #1

		break;
	case 3:
		pHTim = &hTimPwm2B;
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
		pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2B;
 8006b08:	7603      	strb	r3, [r0, #24]

		break;
	}
	HAL_TIM_PWM_DeInit(pHTim);
 8006b0a:	f003 bda7 	b.w	800a65c <HAL_TIM_PWM_DeInit>
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2A;
 8006b0e:	4808      	ldr	r0, [pc, #32]	; (8006b30 <L6206_Board_PwmDeInit+0x3c>)
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
 8006b10:	6003      	str	r3, [r0, #0]
		pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2B;
 8006b12:	2302      	movs	r3, #2
 8006b14:	e7f8      	b.n	8006b08 <L6206_Board_PwmDeInit+0x14>
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B;
 8006b16:	4807      	ldr	r0, [pc, #28]	; (8006b34 <L6206_Board_PwmDeInit+0x40>)
 8006b18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006b1c:	e7f2      	b.n	8006b04 <L6206_Board_PwmDeInit+0x10>
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
 8006b1e:	4806      	ldr	r0, [pc, #24]	; (8006b38 <L6206_Board_PwmDeInit+0x44>)
 8006b20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006b24:	e7f4      	b.n	8006b10 <L6206_Board_PwmDeInit+0x1c>
 8006b26:	bf00      	nop
 8006b28:	40000400 	.word	0x40000400
 8006b2c:	2000284c 	.word	0x2000284c
 8006b30:	20002798 	.word	0x20002798
 8006b34:	200027d4 	.word	0x200027d4
 8006b38:	20002810 	.word	0x20002810

08006b3c <L6206_Board_PwmInit>:
* @param[in] bridgeInput 0 for input 1A, 1 for input 2A,
* 2 for input 1B, 3 for input 2B
* @retval None
**********************************************************/
void L6206_Board_PwmInit(uint8_t bridgeInput)
{
 8006b3c:	b570      	push	{r4, r5, r6, lr}
	TIM_OC_InitTypeDef sConfigOC;
	TIM_MasterConfigTypeDef sMasterConfig;
	TIM_HandleTypeDef *pHTim;
	uint32_t channel;

	switch (bridgeInput) {
 8006b3e:	2802      	cmp	r0, #2
{
 8006b40:	b08a      	sub	sp, #40	; 0x28
	switch (bridgeInput) {
 8006b42:	d02a      	beq.n	8006b9a <L6206_Board_PwmInit+0x5e>
 8006b44:	2803      	cmp	r0, #3
 8006b46:	d02c      	beq.n	8006ba2 <L6206_Board_PwmInit+0x66>
 8006b48:	2801      	cmp	r0, #1
 8006b4a:	4b18      	ldr	r3, [pc, #96]	; (8006bac <L6206_Board_PwmInit+0x70>)
 8006b4c:	d01f      	beq.n	8006b8e <L6206_Board_PwmInit+0x52>
	case 0:
	default:
		pHTim = &hTimPwm1A;
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1A;
 8006b4e:	4c18      	ldr	r4, [pc, #96]	; (8006bb0 <L6206_Board_PwmInit+0x74>)
		pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2A;
		channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2A;
		break;
	case 2:
		pHTim = &hTimPwm1B;
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B;
 8006b50:	6023      	str	r3, [r4, #0]
		pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM1B;
 8006b52:	2301      	movs	r3, #1
 8006b54:	7623      	strb	r3, [r4, #24]
		channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1B;
 8006b56:	2600      	movs	r6, #0
		pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2B;
		channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2B;
		break;
	}
	pHTim->Init.Prescaler = TIMER_PRESCALER - 1;
	pHTim->Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b58:	2500      	movs	r5, #0
	pHTim->Init.Prescaler = TIMER_PRESCALER - 1;
 8006b5a:	233f      	movs	r3, #63	; 0x3f
 8006b5c:	6063      	str	r3, [r4, #4]
	pHTim->Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b5e:	60a5      	str	r5, [r4, #8]
	pHTim->Init.Period = 0;
 8006b60:	60e5      	str	r5, [r4, #12]
	pHTim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006b62:	6125      	str	r5, [r4, #16]
	HAL_TIM_PWM_Init(pHTim);
 8006b64:	4620      	mov	r0, r4
 8006b66:	f004 f991 	bl	800ae8c <HAL_TIM_PWM_Init>

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006b6a:	2360      	movs	r3, #96	; 0x60
	sConfigOC.Pulse = 0;
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	HAL_TIM_PWM_ConfigChannel(pHTim, &sConfigOC, channel);
 8006b6c:	4632      	mov	r2, r6
 8006b6e:	a903      	add	r1, sp, #12
 8006b70:	4620      	mov	r0, r4
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006b72:	9303      	str	r3, [sp, #12]
	sConfigOC.Pulse = 0;
 8006b74:	9504      	str	r5, [sp, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006b76:	9505      	str	r5, [sp, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006b78:	9507      	str	r5, [sp, #28]
	HAL_TIM_PWM_ConfigChannel(pHTim, &sConfigOC, channel);
 8006b7a:	f004 fa23 	bl	800afc4 <HAL_TIM_PWM_ConfigChannel>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	HAL_TIMEx_MasterConfigSynchronization(pHTim, &sMasterConfig);
 8006b7e:	a901      	add	r1, sp, #4
 8006b80:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006b82:	9501      	str	r5, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006b84:	9502      	str	r5, [sp, #8]
	HAL_TIMEx_MasterConfigSynchronization(pHTim, &sMasterConfig);
 8006b86:	f004 fc17 	bl	800b3b8 <HAL_TIMEx_MasterConfigSynchronization>
}
 8006b8a:	b00a      	add	sp, #40	; 0x28
 8006b8c:	bd70      	pop	{r4, r5, r6, pc}
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2A;
 8006b8e:	4c09      	ldr	r4, [pc, #36]	; (8006bb4 <L6206_Board_PwmInit+0x78>)
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
 8006b90:	6023      	str	r3, [r4, #0]
		pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2B;
 8006b92:	2302      	movs	r3, #2
 8006b94:	7623      	strb	r3, [r4, #24]
		channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2B;
 8006b96:	2604      	movs	r6, #4
		break;
 8006b98:	e7de      	b.n	8006b58 <L6206_Board_PwmInit+0x1c>
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B;
 8006b9a:	4c07      	ldr	r4, [pc, #28]	; (8006bb8 <L6206_Board_PwmInit+0x7c>)
 8006b9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006ba0:	e7d6      	b.n	8006b50 <L6206_Board_PwmInit+0x14>
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
 8006ba2:	4c06      	ldr	r4, [pc, #24]	; (8006bbc <L6206_Board_PwmInit+0x80>)
 8006ba4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006ba8:	e7f2      	b.n	8006b90 <L6206_Board_PwmInit+0x54>
 8006baa:	bf00      	nop
 8006bac:	40000400 	.word	0x40000400
 8006bb0:	2000284c 	.word	0x2000284c
 8006bb4:	20002798 	.word	0x20002798
 8006bb8:	200027d4 	.word	0x200027d4
 8006bbc:	20002810 	.word	0x20002810

08006bc0 <L6206_Board_PwmSetFreq>:
* @param[in] duty Duty cycle
* @retval None
* @note The frequency is directly the current speed of the device
**********************************************************/
void L6206_Board_PwmSetFreq(uint8_t bridgeInput, uint32_t newFreq, uint8_t duty)
{
 8006bc0:	b570      	push	{r4, r5, r6, lr}
 8006bc2:	4605      	mov	r5, r0
 8006bc4:	460c      	mov	r4, r1
 8006bc6:	4616      	mov	r6, r2
	uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 8006bc8:	f002 ff78 	bl	8009abc <HAL_RCC_GetSysClockFreq>
	TIM_HandleTypeDef *pHTim;
	uint32_t period;
	uint32_t pulse;
	uint32_t channel;

	switch (bridgeInput) {
 8006bcc:	2d02      	cmp	r5, #2
 8006bce:	d026      	beq.n	8006c1e <L6206_Board_PwmSetFreq+0x5e>
 8006bd0:	2d03      	cmp	r5, #3
 8006bd2:	d028      	beq.n	8006c26 <L6206_Board_PwmSetFreq+0x66>
 8006bd4:	2d01      	cmp	r5, #1
 8006bd6:	4a16      	ldr	r2, [pc, #88]	; (8006c30 <L6206_Board_PwmSetFreq+0x70>)
 8006bd8:	d01d      	beq.n	8006c16 <L6206_Board_PwmSetFreq+0x56>
	case 0:
	default:
		pHTim = &hTimPwm1A;
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1A;
 8006bda:	4b16      	ldr	r3, [pc, #88]	; (8006c34 <L6206_Board_PwmSetFreq+0x74>)
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2A;
		channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2A;
		break;
	case 2:
		pHTim = &hTimPwm1B;
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B;
 8006bdc:	601a      	str	r2, [r3, #0]
		channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1B;
 8006bde:	2500      	movs	r5, #0
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
		channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2B;
		break;
	}

	period = (uint32_t)((uint32_t)sysFreq / (uint32_t)(TIMER_PRESCALER * newFreq)) - 1;
 8006be0:	01a4      	lsls	r4, r4, #6
 8006be2:	fbb0 f0f4 	udiv	r0, r0, r4


	__HAL_TIM_SetAutoreload(pHTim, period);
 8006be6:	681c      	ldr	r4, [r3, #0]
	period = (uint32_t)((uint32_t)sysFreq / (uint32_t)(TIMER_PRESCALER * newFreq)) - 1;
 8006be8:	3801      	subs	r0, #1
	__HAL_TIM_SetAutoreload(pHTim, period);
 8006bea:	62e0      	str	r0, [r4, #44]	; 0x2c
 8006bec:	60d8      	str	r0, [r3, #12]

	if (duty == 0) {
 8006bee:	b146      	cbz	r6, 8006c02 <L6206_Board_PwmSetFreq+0x42>
		pulse = 0;
	}else  {
		if (duty > 100) duty = 100;
		pulse = (uint32_t)(((uint32_t)period * (uint32_t)duty) / 100) + 1;
 8006bf0:	2e64      	cmp	r6, #100	; 0x64
 8006bf2:	4632      	mov	r2, r6
 8006bf4:	bf28      	it	cs
 8006bf6:	2264      	movcs	r2, #100	; 0x64
 8006bf8:	4350      	muls	r0, r2
 8006bfa:	2264      	movs	r2, #100	; 0x64
 8006bfc:	fbb0 f2f2 	udiv	r2, r0, r2
 8006c00:	1c56      	adds	r6, r2, #1
	}
	__HAL_TIM_SetCompare(pHTim, channel, pulse);
 8006c02:	08a9      	lsrs	r1, r5, #2
 8006c04:	3434      	adds	r4, #52	; 0x34
	HAL_TIM_PWM_Start(pHTim, channel);
 8006c06:	4618      	mov	r0, r3
	__HAL_TIM_SetCompare(pHTim, channel, pulse);
 8006c08:	f844 6021 	str.w	r6, [r4, r1, lsl #2]
	HAL_TIM_PWM_Start(pHTim, channel);
 8006c0c:	4629      	mov	r1, r5
}
 8006c0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_TIM_PWM_Start(pHTim, channel);
 8006c12:	f004 bb23 	b.w	800b25c <HAL_TIM_PWM_Start>
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2A;
 8006c16:	4b08      	ldr	r3, [pc, #32]	; (8006c38 <L6206_Board_PwmSetFreq+0x78>)
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
 8006c18:	601a      	str	r2, [r3, #0]
		channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2B;
 8006c1a:	2504      	movs	r5, #4
		break;
 8006c1c:	e7e0      	b.n	8006be0 <L6206_Board_PwmSetFreq+0x20>
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B;
 8006c1e:	4b07      	ldr	r3, [pc, #28]	; (8006c3c <L6206_Board_PwmSetFreq+0x7c>)
 8006c20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006c24:	e7da      	b.n	8006bdc <L6206_Board_PwmSetFreq+0x1c>
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
 8006c26:	4b06      	ldr	r3, [pc, #24]	; (8006c40 <L6206_Board_PwmSetFreq+0x80>)
 8006c28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006c2c:	e7f4      	b.n	8006c18 <L6206_Board_PwmSetFreq+0x58>
 8006c2e:	bf00      	nop
 8006c30:	40000400 	.word	0x40000400
 8006c34:	2000284c 	.word	0x2000284c
 8006c38:	20002798 	.word	0x20002798
 8006c3c:	200027d4 	.word	0x200027d4
 8006c40:	20002810 	.word	0x20002810

08006c44 <L6206_Board_PwmStop>:
* 2 for input 1B, 3 for input 2B
* @retval None
**********************************************************/
void L6206_Board_PwmStop(uint8_t bridgeInput)
{
	switch (bridgeInput) {
 8006c44:	2803      	cmp	r0, #3
 8006c46:	d810      	bhi.n	8006c6a <L6206_Board_PwmStop+0x26>
 8006c48:	e8df f000 	tbb	[pc, r0]
 8006c4c:	0c090602 	.word	0x0c090602
	case 0:
		HAL_TIM_PWM_Stop(&hTimPwm1A, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1A);
 8006c50:	4806      	ldr	r0, [pc, #24]	; (8006c6c <L6206_Board_PwmStop+0x28>)
 8006c52:	2100      	movs	r1, #0
		break;
	case  2:
		HAL_TIM_PWM_Stop(&hTimPwm1B, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1B);
		break;
	case  3:
		HAL_TIM_PWM_Stop(&hTimPwm2B, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2B);
 8006c54:	f004 bb4e 	b.w	800b2f4 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&hTimPwm2A, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2A);
 8006c58:	2104      	movs	r1, #4
 8006c5a:	4805      	ldr	r0, [pc, #20]	; (8006c70 <L6206_Board_PwmStop+0x2c>)
 8006c5c:	e7fa      	b.n	8006c54 <L6206_Board_PwmStop+0x10>
		HAL_TIM_PWM_Stop(&hTimPwm1B, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1B);
 8006c5e:	2100      	movs	r1, #0
 8006c60:	4804      	ldr	r0, [pc, #16]	; (8006c74 <L6206_Board_PwmStop+0x30>)
 8006c62:	e7f7      	b.n	8006c54 <L6206_Board_PwmStop+0x10>
		HAL_TIM_PWM_Stop(&hTimPwm2B, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2B);
 8006c64:	2104      	movs	r1, #4
 8006c66:	4804      	ldr	r0, [pc, #16]	; (8006c78 <L6206_Board_PwmStop+0x34>)
 8006c68:	e7f4      	b.n	8006c54 <L6206_Board_PwmStop+0x10>
 8006c6a:	4770      	bx	lr
 8006c6c:	2000284c 	.word	0x2000284c
 8006c70:	20002798 	.word	0x20002798
 8006c74:	200027d4 	.word	0x200027d4
 8006c78:	20002810 	.word	0x20002810

08006c7c <L6474_GetMotorHandle>:
 8006c7c:	2000      	movs	r0, #0
 8006c7e:	4770      	bx	lr

08006c80 <l647x_GetMotorHandle>:
 8006c80:	2000      	movs	r0, #0
 8006c82:	4770      	bx	lr

08006c84 <l648x_GetMotorHandle>:
 8006c84:	2000      	movs	r0, #0
 8006c86:	4770      	bx	lr

08006c88 <Powerstep01_GetMotorHandle>:
 8006c88:	2000      	movs	r0, #0
 8006c8a:	4770      	bx	lr

08006c8c <L6208_GetMotorHandle>:
 8006c8c:	2000      	movs	r0, #0
 8006c8e:	4770      	bx	lr

08006c90 <Stspin220_GetMotorHandle>:
 8006c90:	2000      	movs	r0, #0
 8006c92:	4770      	bx	lr

08006c94 <Stspin240_250_GetMotorHandle>:
}
/// Get motor handle for STSPIN240
__weak motorDrv_t* Stspin240_250_GetMotorHandle(void)
{
	return((motorDrv_t* )0);
}
 8006c94:	2000      	movs	r0, #0
 8006c96:	4770      	bx	lr

08006c98 <BSP_MotorControl_ErrorHandler>:
* @param[in] error number of the error
* @retval None
**********************************************************/
void BSP_MotorControl_ErrorHandler(uint16_t error)
{
	if ((motorDrvHandle != 0) && (motorDrvHandle->ErrorHandler != 0)) {
 8006c98:	4b03      	ldr	r3, [pc, #12]	; (8006ca8 <BSP_MotorControl_ErrorHandler+0x10>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	b11b      	cbz	r3, 8006ca6 <BSP_MotorControl_ErrorHandler+0xe>
 8006c9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ca2:	b103      	cbz	r3, 8006ca6 <BSP_MotorControl_ErrorHandler+0xe>
		motorDrvHandle->ErrorHandler(error);
 8006ca4:	4718      	bx	r3
 8006ca6:	e7fe      	b.n	8006ca6 <BSP_MotorControl_ErrorHandler+0xe>
 8006ca8:	200025d8 	.word	0x200025d8

08006cac <BSP_MotorControl_AttachErrorHandler>:
	if ((motorDrvHandle != 0) && (motorDrvHandle->AttachErrorHandler != 0)) {
 8006cac:	4b04      	ldr	r3, [pc, #16]	; (8006cc0 <BSP_MotorControl_AttachErrorHandler+0x14>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	b113      	cbz	r3, 8006cb8 <BSP_MotorControl_AttachErrorHandler+0xc>
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	b103      	cbz	r3, 8006cb8 <BSP_MotorControl_AttachErrorHandler+0xc>
		motorDrvHandle->AttachErrorHandler(callback);
 8006cb6:	4718      	bx	r3
		MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(2);
 8006cb8:	f640 0002 	movw	r0, #2050	; 0x802
 8006cbc:	f7ff bfec 	b.w	8006c98 <BSP_MotorControl_ErrorHandler>
 8006cc0:	200025d8 	.word	0x200025d8

08006cc4 <BSP_MotorControl_AttachFlagInterrupt>:
	if ((motorDrvHandle != 0) && (motorDrvHandle->AttachFlagInterrupt != 0)) {
 8006cc4:	4b04      	ldr	r3, [pc, #16]	; (8006cd8 <BSP_MotorControl_AttachFlagInterrupt+0x14>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	b113      	cbz	r3, 8006cd0 <BSP_MotorControl_AttachFlagInterrupt+0xc>
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	b103      	cbz	r3, 8006cd0 <BSP_MotorControl_AttachFlagInterrupt+0xc>
		motorDrvHandle->AttachFlagInterrupt(callback);
 8006cce:	4718      	bx	r3
		MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(3);
 8006cd0:	f640 0003 	movw	r0, #2051	; 0x803
 8006cd4:	f7ff bfe0 	b.w	8006c98 <BSP_MotorControl_ErrorHandler>
 8006cd8:	200025d8 	.word	0x200025d8

08006cdc <BSP_MotorControl_Init>:
* @param[in] initDeviceParameters Initialization structure for one device
* @retval None
**********************************************************/
void BSP_MotorControl_Init(uint16_t id, void* initDeviceParameters)
{
	if ((motorDrvHandle != 0) && (motorDrvHandle->Init != 0)) {
 8006cdc:	4b05      	ldr	r3, [pc, #20]	; (8006cf4 <BSP_MotorControl_Init+0x18>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	b11b      	cbz	r3, 8006cea <BSP_MotorControl_Init+0xe>
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	b10b      	cbz	r3, 8006cea <BSP_MotorControl_Init+0xe>
		motorDrvHandle->Init(initDeviceParameters);
 8006ce6:	4608      	mov	r0, r1
 8006ce8:	4718      	bx	r3
	}else  {
		MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(0);
 8006cea:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006cee:	f7ff bfd3 	b.w	8006c98 <BSP_MotorControl_ErrorHandler>
 8006cf2:	bf00      	nop
 8006cf4:	200025d8 	.word	0x200025d8

08006cf8 <BSP_MotorControl_GetDeviceState>:
**********************************************************/
motorState_t BSP_MotorControl_GetDeviceState(uint8_t deviceId)
{
	motorState_t state = INACTIVE;

	if ((motorDrvHandle != 0) && (motorDrvHandle->GetDeviceState != 0)) {
 8006cf8:	4b07      	ldr	r3, [pc, #28]	; (8006d18 <BSP_MotorControl_GetDeviceState+0x20>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
{
 8006cfc:	b510      	push	{r4, lr}
	if ((motorDrvHandle != 0) && (motorDrvHandle->GetDeviceState != 0)) {
 8006cfe:	b123      	cbz	r3, 8006d0a <BSP_MotorControl_GetDeviceState+0x12>
 8006d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d02:	b113      	cbz	r3, 8006d0a <BSP_MotorControl_GetDeviceState+0x12>
		state = motorDrvHandle->GetDeviceState(deviceId);
	}else  {
		MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(9);
	}
	return(state);
}
 8006d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		state = motorDrvHandle->GetDeviceState(deviceId);
 8006d08:	4718      	bx	r3
		MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(9);
 8006d0a:	f640 0009 	movw	r0, #2057	; 0x809
 8006d0e:	f7ff ffc3 	bl	8006c98 <BSP_MotorControl_ErrorHandler>
}
 8006d12:	2008      	movs	r0, #8
 8006d14:	bd10      	pop	{r4, pc}
 8006d16:	bf00      	nop
 8006d18:	200025d8 	.word	0x200025d8

08006d1c <BSP_MotorControl_CmdGetStatus>:
* GetParam command (via the functions ReadStatusRegister or CmdGetParam).
**********************************************************/
uint16_t BSP_MotorControl_CmdGetStatus(uint8_t deviceId)
{
	uint16_t status = 0;
	if ((motorDrvHandle != 0) && (motorDrvHandle->CmdGetStatus != 0)) {
 8006d1c:	4b07      	ldr	r3, [pc, #28]	; (8006d3c <BSP_MotorControl_CmdGetStatus+0x20>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
{
 8006d20:	b510      	push	{r4, lr}
	if ((motorDrvHandle != 0) && (motorDrvHandle->CmdGetStatus != 0)) {
 8006d22:	b12b      	cbz	r3, 8006d30 <BSP_MotorControl_CmdGetStatus+0x14>
 8006d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d28:	b113      	cbz	r3, 8006d30 <BSP_MotorControl_CmdGetStatus+0x14>
		status = motorDrvHandle->CmdGetStatus(deviceId);
	}else  {
		MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(34);
	}
	return(status);
}
 8006d2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		status = motorDrvHandle->CmdGetStatus(deviceId);
 8006d2e:	4718      	bx	r3
		MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(34);
 8006d30:	f640 0022 	movw	r0, #2082	; 0x822
 8006d34:	f7ff ffb0 	bl	8006c98 <BSP_MotorControl_ErrorHandler>
}
 8006d38:	2000      	movs	r0, #0
 8006d3a:	bd10      	pop	{r4, pc}
 8006d3c:	200025d8 	.word	0x200025d8

08006d40 <BSP_MotorControl_SetDualFullBridgeConfig>:
* for Stspin250, 0 only as no dual brush DC configuration is supported
* @retval None
**********************************************************/
void BSP_MotorControl_SetDualFullBridgeConfig(uint8_t config)
{
	if ((motorDrvHandle != 0) && (motorDrvHandle->SetDualFullBridgeConfig != 0)) {
 8006d40:	4b05      	ldr	r3, [pc, #20]	; (8006d58 <BSP_MotorControl_SetDualFullBridgeConfig+0x18>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	b11b      	cbz	r3, 8006d4e <BSP_MotorControl_SetDualFullBridgeConfig+0xe>
 8006d46:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8006d4a:	b103      	cbz	r3, 8006d4e <BSP_MotorControl_SetDualFullBridgeConfig+0xe>
		motorDrvHandle->SetDualFullBridgeConfig(config);
 8006d4c:	4718      	bx	r3
	}else  {
		MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(65);
 8006d4e:	f640 0041 	movw	r0, #2113	; 0x841
 8006d52:	f7ff bfa1 	b.w	8006c98 <BSP_MotorControl_ErrorHandler>
 8006d56:	bf00      	nop
 8006d58:	200025d8 	.word	0x200025d8

08006d5c <BSP_MotorControl_SetBridgeInputPwmFreq>:
* @param[in] newFreq in Hz up to 100000Hz
* @retval None
**********************************************************/
void BSP_MotorControl_SetBridgeInputPwmFreq(uint8_t bridgeId, uint32_t newFreq)
{
	if ((motorDrvHandle != 0) && (motorDrvHandle->SetBridgeInputPwmFreq != 0)) {
 8006d5c:	4b05      	ldr	r3, [pc, #20]	; (8006d74 <BSP_MotorControl_SetBridgeInputPwmFreq+0x18>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	b11b      	cbz	r3, 8006d6a <BSP_MotorControl_SetBridgeInputPwmFreq+0xe>
 8006d62:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8006d66:	b103      	cbz	r3, 8006d6a <BSP_MotorControl_SetBridgeInputPwmFreq+0xe>
		motorDrvHandle->SetBridgeInputPwmFreq(bridgeId, newFreq);
 8006d68:	4718      	bx	r3
	}else  {
		MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(67);
 8006d6a:	f640 0043 	movw	r0, #2115	; 0x843
 8006d6e:	f7ff bf93 	b.w	8006c98 <BSP_MotorControl_ErrorHandler>
 8006d72:	bf00      	nop
 8006d74:	200025d8 	.word	0x200025d8

08006d78 <BSP_MotorControl_SetNbDevices>:
* @retval TRUE if successfull, FALSE if failure, attempt
* to set a number of devices greater than MAX_NUMBER_OF_DEVICES
**********************************************************/
bool BSP_MotorControl_SetNbDevices(uint16_t id, uint8_t nbDevices)
{
	MotorControlBoardId = id;
 8006d78:	4b26      	ldr	r3, [pc, #152]	; (8006e14 <BSP_MotorControl_SetNbDevices+0x9c>)
{
 8006d7a:	b570      	push	{r4, r5, r6, lr}
	MotorControlBoardId = id;
 8006d7c:	8018      	strh	r0, [r3, #0]
	bool status = FALSE;
	if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6474) {
 8006d7e:	f641 134a 	movw	r3, #6474	; 0x194a
 8006d82:	4298      	cmp	r0, r3
{
 8006d84:	460d      	mov	r5, r1
 8006d86:	4c24      	ldr	r4, [pc, #144]	; (8006e18 <BSP_MotorControl_SetNbDevices+0xa0>)
	if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6474) {
 8006d88:	d10c      	bne.n	8006da4 <BSP_MotorControl_SetNbDevices+0x2c>
		motorDrvHandle = L6474_GetMotorHandle();
 8006d8a:	f7ff ff77 	bl	8006c7c <L6474_GetMotorHandle>
	}else if (id == BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01) {
		motorDrvHandle = Powerstep01_GetMotorHandle();
 8006d8e:	6020      	str	r0, [r4, #0]
		  (id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN250)) {
		motorDrvHandle = Stspin240_250_GetMotorHandle();
	}else  {
		motorDrvHandle = 0;
	}
	if ((motorDrvHandle != 0) &&
 8006d90:	6823      	ldr	r3, [r4, #0]
 8006d92:	b3e3      	cbz	r3, 8006e0e <BSP_MotorControl_SetNbDevices+0x96>
	    (motorDrvHandle->SetNbDevices != 0) &&
 8006d94:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	if ((motorDrvHandle != 0) &&
 8006d98:	b3cb      	cbz	r3, 8006e0e <BSP_MotorControl_SetNbDevices+0x96>
	    (motorDrvHandle->SetNbDevices != 0) &&
 8006d9a:	b3c5      	cbz	r5, 8006e0e <BSP_MotorControl_SetNbDevices+0x96>
	    (nbDevices != 0)) {
		status = motorDrvHandle->SetNbDevices(nbDevices);
 8006d9c:	4628      	mov	r0, r5
	}
	return(status);
}
 8006d9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		status = motorDrvHandle->SetNbDevices(nbDevices);
 8006da2:	4718      	bx	r3
	}else if (id == BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01) {
 8006da4:	2801      	cmp	r0, #1
 8006da6:	d102      	bne.n	8006dae <BSP_MotorControl_SetNbDevices+0x36>
		motorDrvHandle = Powerstep01_GetMotorHandle();
 8006da8:	f7ff ff6e 	bl	8006c88 <Powerstep01_GetMotorHandle>
 8006dac:	e7ef      	b.n	8006d8e <BSP_MotorControl_SetNbDevices+0x16>
	}else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6206) {
 8006dae:	f641 033e 	movw	r3, #6206	; 0x183e
 8006db2:	4298      	cmp	r0, r3
 8006db4:	d102      	bne.n	8006dbc <BSP_MotorControl_SetNbDevices+0x44>
		motorDrvHandle = L6206_GetMotorHandle();
 8006db6:	f7fa fcf7 	bl	80017a8 <L6206_GetMotorHandle>
 8006dba:	e7e8      	b.n	8006d8e <BSP_MotorControl_SetNbDevices+0x16>
	}else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6208) {
 8006dbc:	f5b0 5fc2 	cmp.w	r0, #6208	; 0x1840
 8006dc0:	d102      	bne.n	8006dc8 <BSP_MotorControl_SetNbDevices+0x50>
		motorDrvHandle = L6208_GetMotorHandle();
 8006dc2:	f7ff ff63 	bl	8006c8c <L6208_GetMotorHandle>
 8006dc6:	e7e2      	b.n	8006d8e <BSP_MotorControl_SetNbDevices+0x16>
	}else if (id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN220) {
 8006dc8:	28dc      	cmp	r0, #220	; 0xdc
 8006dca:	d102      	bne.n	8006dd2 <BSP_MotorControl_SetNbDevices+0x5a>
		motorDrvHandle = Stspin220_GetMotorHandle();
 8006dcc:	f7ff ff60 	bl	8006c90 <Stspin220_GetMotorHandle>
 8006dd0:	e7dd      	b.n	8006d8e <BSP_MotorControl_SetNbDevices+0x16>
	}else if ((id == BSP_MOTOR_CONTROL_BOARD_ID_L6470) ||
 8006dd2:	f641 1346 	movw	r3, #6470	; 0x1946
 8006dd6:	4298      	cmp	r0, r3
 8006dd8:	d003      	beq.n	8006de2 <BSP_MotorControl_SetNbDevices+0x6a>
 8006dda:	f641 1348 	movw	r3, #6472	; 0x1948
 8006dde:	4298      	cmp	r0, r3
 8006de0:	d102      	bne.n	8006de8 <BSP_MotorControl_SetNbDevices+0x70>
		motorDrvHandle = l647x_GetMotorHandle();
 8006de2:	f7ff ff4d 	bl	8006c80 <l647x_GetMotorHandle>
 8006de6:	e7d2      	b.n	8006d8e <BSP_MotorControl_SetNbDevices+0x16>
	}else if ((id == BSP_MOTOR_CONTROL_BOARD_ID_L6480) ||
 8006de8:	f020 0302 	bic.w	r3, r0, #2
 8006dec:	f641 1250 	movw	r2, #6480	; 0x1950
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d102      	bne.n	8006dfa <BSP_MotorControl_SetNbDevices+0x82>
		motorDrvHandle = l648x_GetMotorHandle();
 8006df4:	f7ff ff46 	bl	8006c84 <l648x_GetMotorHandle>
 8006df8:	e7c9      	b.n	8006d8e <BSP_MotorControl_SetNbDevices+0x16>
	}else if ((id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN240) ||
 8006dfa:	28f0      	cmp	r0, #240	; 0xf0
 8006dfc:	d001      	beq.n	8006e02 <BSP_MotorControl_SetNbDevices+0x8a>
 8006dfe:	28fa      	cmp	r0, #250	; 0xfa
 8006e00:	d102      	bne.n	8006e08 <BSP_MotorControl_SetNbDevices+0x90>
		motorDrvHandle = Stspin240_250_GetMotorHandle();
 8006e02:	f7ff ff47 	bl	8006c94 <Stspin240_250_GetMotorHandle>
 8006e06:	e7c2      	b.n	8006d8e <BSP_MotorControl_SetNbDevices+0x16>
		motorDrvHandle = 0;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	6023      	str	r3, [r4, #0]
 8006e0c:	e7c0      	b.n	8006d90 <BSP_MotorControl_SetNbDevices+0x18>
}
 8006e0e:	2000      	movs	r0, #0
 8006e10:	bd70      	pop	{r4, r5, r6, pc}
 8006e12:	bf00      	nop
 8006e14:	200025d4 	.word	0x200025d4
 8006e18:	200025d8 	.word	0x200025d8

08006e1c <HAL_InitTick>:
 *       implementation  in user file.
 * @param TickPriority Tick interrupt priority.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006e1c:	b538      	push	{r3, r4, r5, lr}
	/* Configure the SysTick to have interrupt in 1ms time basis*/
	if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U) {
 8006e1e:	4a0e      	ldr	r2, [pc, #56]	; (8006e58 <HAL_InitTick+0x3c>)
 8006e20:	4b0e      	ldr	r3, [pc, #56]	; (8006e5c <HAL_InitTick+0x40>)
{
 8006e22:	4605      	mov	r5, r0
	if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U) {
 8006e24:	7818      	ldrb	r0, [r3, #0]
 8006e26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006e2a:	fbb3 f3f0 	udiv	r3, r3, r0
 8006e2e:	6810      	ldr	r0, [r2, #0]
 8006e30:	fbb0 f0f3 	udiv	r0, r0, r3
 8006e34:	f000 fb7c 	bl	8007530 <HAL_SYSTICK_Config>
 8006e38:	4604      	mov	r4, r0
 8006e3a:	b958      	cbnz	r0, 8006e54 <HAL_InitTick+0x38>
		return HAL_ERROR;
	}

	/* Configure the SysTick IRQ priority */
	if (TickPriority < (1UL << __NVIC_PRIO_BITS)) {
 8006e3c:	2d0f      	cmp	r5, #15
 8006e3e:	d809      	bhi.n	8006e54 <HAL_InitTick+0x38>
		HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006e40:	4602      	mov	r2, r0
 8006e42:	4629      	mov	r1, r5
 8006e44:	f04f 30ff 	mov.w	r0, #4294967295
 8006e48:	f000 fb04 	bl	8007454 <HAL_NVIC_SetPriority>
		uwTickPrio = TickPriority;
 8006e4c:	4b04      	ldr	r3, [pc, #16]	; (8006e60 <HAL_InitTick+0x44>)
 8006e4e:	4620      	mov	r0, r4
 8006e50:	601d      	str	r5, [r3, #0]
 8006e52:	bd38      	pop	{r3, r4, r5, pc}
		return HAL_ERROR;
 8006e54:	2001      	movs	r0, #1
		return HAL_ERROR;
	}

	/* Return function status */
	return HAL_OK;
}
 8006e56:	bd38      	pop	{r3, r4, r5, pc}
 8006e58:	2000149c 	.word	0x2000149c
 8006e5c:	2000147c 	.word	0x2000147c
 8006e60:	20001480 	.word	0x20001480

08006e64 <HAL_Init>:
{
 8006e64:	b508      	push	{r3, lr}
	__HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006e66:	4b0b      	ldr	r3, [pc, #44]	; (8006e94 <HAL_Init+0x30>)
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e6e:	601a      	str	r2, [r3, #0]
	__HAL_FLASH_DATA_CACHE_ENABLE();
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e76:	601a      	str	r2, [r3, #0]
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e7e:	601a      	str	r2, [r3, #0]
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006e80:	2003      	movs	r0, #3
 8006e82:	f000 fac9 	bl	8007418 <HAL_NVIC_SetPriorityGrouping>
	HAL_InitTick(TICK_INT_PRIORITY);
 8006e86:	2000      	movs	r0, #0
 8006e88:	f7ff ffc8 	bl	8006e1c <HAL_InitTick>
	HAL_MspInit();
 8006e8c:	f005 ff80 	bl	800cd90 <HAL_MspInit>
}
 8006e90:	2000      	movs	r0, #0
 8006e92:	bd08      	pop	{r3, pc}
 8006e94:	40023c00 	.word	0x40023c00

08006e98 <HAL_IncTick>:
 *      implementations in user file.
 * @retval None
 */
__weak void HAL_IncTick(void)
{
	uwTick += uwTickFreq;
 8006e98:	4a03      	ldr	r2, [pc, #12]	; (8006ea8 <HAL_IncTick+0x10>)
 8006e9a:	4b04      	ldr	r3, [pc, #16]	; (8006eac <HAL_IncTick+0x14>)
 8006e9c:	6811      	ldr	r1, [r2, #0]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	440b      	add	r3, r1
 8006ea2:	6013      	str	r3, [r2, #0]
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	20002888 	.word	0x20002888
 8006eac:	2000147c 	.word	0x2000147c

08006eb0 <HAL_GetTick>:
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void)
{
	return uwTick;
 8006eb0:	4b01      	ldr	r3, [pc, #4]	; (8006eb8 <HAL_GetTick+0x8>)
 8006eb2:	6818      	ldr	r0, [r3, #0]
}
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop
 8006eb8:	20002888 	.word	0x20002888

08006ebc <HAL_Delay>:
 *       implementations in user file.
 * @param Delay specifies the delay time length, in milliseconds.
 * @retval None
 */
__weak void HAL_Delay(uint32_t Delay)
{
 8006ebc:	b538      	push	{r3, r4, r5, lr}
 8006ebe:	4604      	mov	r4, r0
	uint32_t tickstart = HAL_GetTick();
 8006ec0:	f7ff fff6 	bl	8006eb0 <HAL_GetTick>
	uint32_t wait = Delay;

	/* Add a freq to guarantee minimum wait */
	if (wait < HAL_MAX_DELAY) {
 8006ec4:	1c63      	adds	r3, r4, #1
		wait += (uint32_t)(uwTickFreq);
 8006ec6:	bf1c      	itt	ne
 8006ec8:	4b05      	ldrne	r3, [pc, #20]	; (8006ee0 <HAL_Delay+0x24>)
 8006eca:	781b      	ldrbne	r3, [r3, #0]
	uint32_t tickstart = HAL_GetTick();
 8006ecc:	4605      	mov	r5, r0
		wait += (uint32_t)(uwTickFreq);
 8006ece:	bf18      	it	ne
 8006ed0:	18e4      	addne	r4, r4, r3
	}

	while ((HAL_GetTick() - tickstart) < wait) {
 8006ed2:	f7ff ffed 	bl	8006eb0 <HAL_GetTick>
 8006ed6:	1b40      	subs	r0, r0, r5
 8006ed8:	4284      	cmp	r4, r0
 8006eda:	d8fa      	bhi.n	8006ed2 <HAL_Delay+0x16>
	}
}
 8006edc:	bd38      	pop	{r3, r4, r5, pc}
 8006ede:	bf00      	nop
 8006ee0:	2000147c 	.word	0x2000147c

08006ee4 <HAL_ADC_Init>:
 * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 *         the configuration information for the specified ADC.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006ee4:	b510      	push	{r4, lr}
	HAL_StatusTypeDef tmp_hal_status = HAL_OK;

	/* Check ADC handle */
	if (hadc == NULL) {
 8006ee6:	4604      	mov	r4, r0
 8006ee8:	2800      	cmp	r0, #0
 8006eea:	f000 8122 	beq.w	8007132 <HAL_ADC_Init+0x24e>
		return HAL_ERROR;
	}

	/* Check the parameters */
	assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8006eee:	6802      	ldr	r2, [r0, #0]
 8006ef0:	4b91      	ldr	r3, [pc, #580]	; (8007138 <HAL_ADC_Init+0x254>)
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d004      	beq.n	8006f00 <HAL_ADC_Init+0x1c>
 8006ef6:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8006efa:	4890      	ldr	r0, [pc, #576]	; (800713c <HAL_ADC_Init+0x258>)
 8006efc:	f005 fe28 	bl	800cb50 <assert_failed>
	assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8006f00:	6863      	ldr	r3, [r4, #4]
 8006f02:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8006f06:	d004      	beq.n	8006f12 <HAL_ADC_Init+0x2e>
 8006f08:	f240 110b 	movw	r1, #267	; 0x10b
 8006f0c:	488b      	ldr	r0, [pc, #556]	; (800713c <HAL_ADC_Init+0x258>)
 8006f0e:	f005 fe1f 	bl	800cb50 <assert_failed>
	assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8006f12:	68a3      	ldr	r3, [r4, #8]
 8006f14:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 8006f18:	d004      	beq.n	8006f24 <HAL_ADC_Init+0x40>
 8006f1a:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8006f1e:	4887      	ldr	r0, [pc, #540]	; (800713c <HAL_ADC_Init+0x258>)
 8006f20:	f005 fe16 	bl	800cb50 <assert_failed>
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 8006f24:	6923      	ldr	r3, [r4, #16]
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d904      	bls.n	8006f34 <HAL_ADC_Init+0x50>
 8006f2a:	f240 110d 	movw	r1, #269	; 0x10d
 8006f2e:	4883      	ldr	r0, [pc, #524]	; (800713c <HAL_ADC_Init+0x258>)
 8006f30:	f005 fe0e 	bl	800cb50 <assert_failed>
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8006f34:	69a3      	ldr	r3, [r4, #24]
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d904      	bls.n	8006f44 <HAL_ADC_Init+0x60>
 8006f3a:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8006f3e:	487f      	ldr	r0, [pc, #508]	; (800713c <HAL_ADC_Init+0x258>)
 8006f40:	f005 fe06 	bl	800cb50 <assert_failed>
	assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8006f44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006f46:	f033 7240 	bics.w	r2, r3, #50331648	; 0x3000000
 8006f4a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006f4e:	d014      	beq.n	8006f7a <HAL_ADC_Init+0x96>
 8006f50:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8006f54:	d011      	beq.n	8006f7a <HAL_ADC_Init+0x96>
 8006f56:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 8006f5a:	d00e      	beq.n	8006f7a <HAL_ADC_Init+0x96>
 8006f5c:	f1b1 6f40 	cmp.w	r1, #201326592	; 0xc000000
 8006f60:	d00b      	beq.n	8006f7a <HAL_ADC_Init+0x96>
 8006f62:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8006f66:	d008      	beq.n	8006f7a <HAL_ADC_Init+0x96>
 8006f68:	f103 4371 	add.w	r3, r3, #4043309056	; 0xf1000000
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d904      	bls.n	8006f7a <HAL_ADC_Init+0x96>
 8006f70:	f240 110f 	movw	r1, #271	; 0x10f
 8006f74:	4871      	ldr	r0, [pc, #452]	; (800713c <HAL_ADC_Init+0x258>)
 8006f76:	f005 fdeb 	bl	800cb50 <assert_failed>
	assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8006f7a:	68e3      	ldr	r3, [r4, #12]
 8006f7c:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8006f80:	d004      	beq.n	8006f8c <HAL_ADC_Init+0xa8>
 8006f82:	f44f 7188 	mov.w	r1, #272	; 0x110
 8006f86:	486d      	ldr	r0, [pc, #436]	; (800713c <HAL_ADC_Init+0x258>)
 8006f88:	f005 fde2 	bl	800cb50 <assert_failed>
	assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8006f8c:	69e3      	ldr	r3, [r4, #28]
 8006f8e:	3b01      	subs	r3, #1
 8006f90:	2b0f      	cmp	r3, #15
 8006f92:	d904      	bls.n	8006f9e <HAL_ADC_Init+0xba>
 8006f94:	f240 1111 	movw	r1, #273	; 0x111
 8006f98:	4868      	ldr	r0, [pc, #416]	; (800713c <HAL_ADC_Init+0x258>)
 8006f9a:	f005 fdd9 	bl	800cb50 <assert_failed>
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8006f9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d904      	bls.n	8006fae <HAL_ADC_Init+0xca>
 8006fa4:	f44f 7189 	mov.w	r1, #274	; 0x112
 8006fa8:	4864      	ldr	r0, [pc, #400]	; (800713c <HAL_ADC_Init+0x258>)
 8006faa:	f005 fdd1 	bl	800cb50 <assert_failed>
	assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8006fae:	6963      	ldr	r3, [r4, #20]
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	d904      	bls.n	8006fbe <HAL_ADC_Init+0xda>
 8006fb4:	f240 1113 	movw	r1, #275	; 0x113
 8006fb8:	4860      	ldr	r0, [pc, #384]	; (800713c <HAL_ADC_Init+0x258>)
 8006fba:	f005 fdc9 	bl	800cb50 <assert_failed>
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8006fbe:	6a23      	ldr	r3, [r4, #32]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d904      	bls.n	8006fce <HAL_ADC_Init+0xea>
 8006fc4:	f44f 718a 	mov.w	r1, #276	; 0x114
 8006fc8:	485c      	ldr	r0, [pc, #368]	; (800713c <HAL_ADC_Init+0x258>)
 8006fca:	f005 fdc1 	bl	800cb50 <assert_failed>

	if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START) {
 8006fce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006fd0:	4b5b      	ldr	r3, [pc, #364]	; (8007140 <HAL_ADC_Init+0x25c>)
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d008      	beq.n	8006fe8 <HAL_ADC_Init+0x104>
		assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8006fd6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006fd8:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 8006fdc:	d004      	beq.n	8006fe8 <HAL_ADC_Init+0x104>
 8006fde:	f240 1117 	movw	r1, #279	; 0x117
 8006fe2:	4856      	ldr	r0, [pc, #344]	; (800713c <HAL_ADC_Init+0x258>)
 8006fe4:	f005 fdb4 	bl	800cb50 <assert_failed>
	}

	if (hadc->State == HAL_ADC_STATE_RESET) {
 8006fe8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006fea:	b92b      	cbnz	r3, 8006ff8 <HAL_ADC_Init+0x114>
		/* Initialize ADC error code */
		ADC_CLEAR_ERRORCODE(hadc);
 8006fec:	6463      	str	r3, [r4, #68]	; 0x44

		/* Allocate lock resource and initialize it */
		hadc->Lock = HAL_UNLOCKED;
 8006fee:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

		/* Init the low level hardware */
		HAL_ADC_MspInit(hadc);
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	f004 fe8c 	bl	800bd10 <HAL_ADC_MspInit>
	}

	/* Configuration of ADC parameters if previous preliminary actions are      */
	/* correctly completed.                                                     */
	if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL)) {
 8006ff8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ffa:	06db      	lsls	r3, r3, #27
 8006ffc:	f100 8097 	bmi.w	800712e <HAL_ADC_Init+0x24a>
		/* Set ADC state */
		ADC_STATE_CLR_SET(hadc->State,
 8007000:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007002:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007006:	f023 0302 	bic.w	r3, r3, #2
 800700a:	f043 0302 	orr.w	r3, r3, #2
 800700e:	6423      	str	r3, [r4, #64]	; 0x40
	/* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
	/* control register)                                                    */
	tmpADC_Common = ADC_COMMON_REGISTER(hadc);

	/* Set the ADC clock prescaler */
	tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007010:	4b4c      	ldr	r3, [pc, #304]	; (8007144 <HAL_ADC_Init+0x260>)
 8007012:	685a      	ldr	r2, [r3, #4]
 8007014:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8007018:	605a      	str	r2, [r3, #4]
	tmpADC_Common->CCR |= hadc->Init.ClockPrescaler;
 800701a:	685a      	ldr	r2, [r3, #4]
 800701c:	6861      	ldr	r1, [r4, #4]
 800701e:	430a      	orrs	r2, r1
 8007020:	605a      	str	r2, [r3, #4]

	/* Set ADC scan mode */
	hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007022:	6823      	ldr	r3, [r4, #0]
	hadc->Instance->CR1 |= ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007024:	6921      	ldr	r1, [r4, #16]
	hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007026:	685a      	ldr	r2, [r3, #4]
 8007028:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800702c:	605a      	str	r2, [r3, #4]
	hadc->Instance->CR1 |= ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800702e:	685a      	ldr	r2, [r3, #4]
 8007030:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007034:	605a      	str	r2, [r3, #4]

	/* Set ADC resolution */
	hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007036:	685a      	ldr	r2, [r3, #4]
	hadc->Instance->CR1 |= hadc->Init.Resolution;
 8007038:	68a1      	ldr	r1, [r4, #8]
	hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800703a:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800703e:	605a      	str	r2, [r3, #4]
	hadc->Instance->CR1 |= hadc->Init.Resolution;
 8007040:	685a      	ldr	r2, [r3, #4]
 8007042:	430a      	orrs	r2, r1
 8007044:	605a      	str	r2, [r3, #4]

	/* Set ADC data alignment */
	hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007046:	689a      	ldr	r2, [r3, #8]
	hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007048:	68e1      	ldr	r1, [r4, #12]
	hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800704a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800704e:	609a      	str	r2, [r3, #8]
	hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007050:	689a      	ldr	r2, [r3, #8]
 8007052:	430a      	orrs	r2, r1
 8007054:	609a      	str	r2, [r3, #8]
	/* Enable external trigger if trigger selection is different of software  */
	/* start.                                                                 */
	/* Note: This configuration keeps the hardware feature of parameter       */
	/*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
	/*       software start.                                                  */
	if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START) {
 8007056:	493a      	ldr	r1, [pc, #232]	; (8007140 <HAL_ADC_Init+0x25c>)
 8007058:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800705a:	428a      	cmp	r2, r1
 800705c:	d05b      	beq.n	8007116 <HAL_ADC_Init+0x232>
		/* Select external trigger to start conversion */
		hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800705e:	6899      	ldr	r1, [r3, #8]
 8007060:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8007064:	6099      	str	r1, [r3, #8]
		hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007066:	6899      	ldr	r1, [r3, #8]
 8007068:	430a      	orrs	r2, r1
 800706a:	609a      	str	r2, [r3, #8]

		/* Select external trigger polarity */
		hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800706c:	689a      	ldr	r2, [r3, #8]
		hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800706e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
		hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007070:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007074:	609a      	str	r2, [r3, #8]
		hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007076:	689a      	ldr	r2, [r3, #8]
 8007078:	430a      	orrs	r2, r1
	}else  {
		/* Reset the external trigger */
		hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
		hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800707a:	609a      	str	r2, [r3, #8]
	}

	/* Enable or disable ADC continuous conversion mode */
	hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800707c:	689a      	ldr	r2, [r3, #8]
	hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800707e:	69a1      	ldr	r1, [r4, #24]
	hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007080:	f022 0202 	bic.w	r2, r2, #2
 8007084:	609a      	str	r2, [r3, #8]
	hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8007086:	689a      	ldr	r2, [r3, #8]
 8007088:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800708c:	609a      	str	r2, [r3, #8]

	if (hadc->Init.DiscontinuousConvMode != DISABLE) {
 800708e:	6a22      	ldr	r2, [r4, #32]
 8007090:	2a00      	cmp	r2, #0
 8007092:	d048      	beq.n	8007126 <HAL_ADC_Init+0x242>
		assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8007094:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007096:	3b01      	subs	r3, #1
 8007098:	2b07      	cmp	r3, #7
 800709a:	d904      	bls.n	80070a6 <HAL_ADC_Init+0x1c2>
 800709c:	f240 51d1 	movw	r1, #1489	; 0x5d1
 80070a0:	4826      	ldr	r0, [pc, #152]	; (800713c <HAL_ADC_Init+0x258>)
 80070a2:	f005 fd55 	bl	800cb50 <assert_failed>

		/* Enable the selected ADC regular discontinuous mode */
		hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80070a6:	6823      	ldr	r3, [r4, #0]

		/* Set the number of channels to be converted in discontinuous mode */
		hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
		hadc->Instance->CR1 |= ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80070a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
		hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80070aa:	685a      	ldr	r2, [r3, #4]
 80070ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070b0:	605a      	str	r2, [r3, #4]
		hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80070b2:	685a      	ldr	r2, [r3, #4]
 80070b4:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80070b8:	605a      	str	r2, [r3, #4]
		hadc->Instance->CR1 |= ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80070ba:	685a      	ldr	r2, [r3, #4]
 80070bc:	3901      	subs	r1, #1
 80070be:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
	}else  {
		/* Disable the selected ADC regular discontinuous mode */
		hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80070c2:	605a      	str	r2, [r3, #4]
	}

	/* Set ADC number of conversion */
	hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80070c4:	6823      	ldr	r3, [r4, #0]
	hadc->Instance->SQR1 |= ADC_SQR1(hadc->Init.NbrOfConversion);
 80070c6:	69e1      	ldr	r1, [r4, #28]
	hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80070c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80070ce:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc->Instance->SQR1 |= ADC_SQR1(hadc->Init.NbrOfConversion);
 80070d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070d2:	3901      	subs	r1, #1
 80070d4:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80070d8:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Enable or disable ADC DMA continuous request */
	hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80070da:	689a      	ldr	r2, [r3, #8]
	hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80070dc:	6b21      	ldr	r1, [r4, #48]	; 0x30
	hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80070de:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80070e2:	609a      	str	r2, [r3, #8]
	hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80070e4:	689a      	ldr	r2, [r3, #8]
 80070e6:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 80070ea:	609a      	str	r2, [r3, #8]

	/* Enable or disable ADC end of conversion selection */
	hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80070ec:	689a      	ldr	r2, [r3, #8]
	hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80070ee:	6961      	ldr	r1, [r4, #20]
	hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80070f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070f4:	609a      	str	r2, [r3, #8]
	hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80070f6:	689a      	ldr	r2, [r3, #8]
		ADC_CLEAR_ERRORCODE(hadc);
 80070f8:	2000      	movs	r0, #0
	hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80070fa:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80070fe:	609a      	str	r2, [r3, #8]
		ADC_CLEAR_ERRORCODE(hadc);
 8007100:	6460      	str	r0, [r4, #68]	; 0x44
		ADC_STATE_CLR_SET(hadc->State,
 8007102:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007104:	f023 0303 	bic.w	r3, r3, #3
 8007108:	f043 0301 	orr.w	r3, r3, #1
 800710c:	6423      	str	r3, [r4, #64]	; 0x40
	__HAL_UNLOCK(hadc);
 800710e:	2300      	movs	r3, #0
 8007110:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	return tmp_hal_status;
 8007114:	bd10      	pop	{r4, pc}
		hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007116:	689a      	ldr	r2, [r3, #8]
 8007118:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800711c:	609a      	str	r2, [r3, #8]
		hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800711e:	689a      	ldr	r2, [r3, #8]
 8007120:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007124:	e7a9      	b.n	800707a <HAL_ADC_Init+0x196>
		hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007126:	685a      	ldr	r2, [r3, #4]
 8007128:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800712c:	e7c9      	b.n	80070c2 <HAL_ADC_Init+0x1de>
		tmp_hal_status = HAL_ERROR;
 800712e:	2001      	movs	r0, #1
 8007130:	e7ed      	b.n	800710e <HAL_ADC_Init+0x22a>
		return HAL_ERROR;
 8007132:	2001      	movs	r0, #1
}
 8007134:	bd10      	pop	{r4, pc}
 8007136:	bf00      	nop
 8007138:	40012000 	.word	0x40012000
 800713c:	0801d7bc 	.word	0x0801d7bc
 8007140:	0f000001 	.word	0x0f000001
 8007144:	40012300 	.word	0x40012300

08007148 <HAL_ADC_ConvCpltCallback>:
 8007148:	4770      	bx	lr

0800714a <HAL_ADC_LevelOutOfWindowCallback>:
 800714a:	4770      	bx	lr

0800714c <HAL_ADC_ErrorCallback>:
{
 800714c:	4770      	bx	lr
	...

08007150 <HAL_ADC_IRQHandler>:
{
 8007150:	b538      	push	{r3, r4, r5, lr}
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8007152:	6983      	ldr	r3, [r0, #24]
 8007154:	2b01      	cmp	r3, #1
{
 8007156:	4604      	mov	r4, r0
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8007158:	d904      	bls.n	8007164 <HAL_ADC_IRQHandler+0x14>
 800715a:	f240 3146 	movw	r1, #838	; 0x346
 800715e:	4853      	ldr	r0, [pc, #332]	; (80072ac <HAL_ADC_IRQHandler+0x15c>)
 8007160:	f005 fcf6 	bl	800cb50 <assert_failed>
	assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8007164:	69e3      	ldr	r3, [r4, #28]
 8007166:	3b01      	subs	r3, #1
 8007168:	2b0f      	cmp	r3, #15
 800716a:	d904      	bls.n	8007176 <HAL_ADC_IRQHandler+0x26>
 800716c:	f240 3147 	movw	r1, #839	; 0x347
 8007170:	484e      	ldr	r0, [pc, #312]	; (80072ac <HAL_ADC_IRQHandler+0x15c>)
 8007172:	f005 fced 	bl	800cb50 <assert_failed>
	assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8007176:	6963      	ldr	r3, [r4, #20]
 8007178:	2b02      	cmp	r3, #2
 800717a:	d904      	bls.n	8007186 <HAL_ADC_IRQHandler+0x36>
 800717c:	f44f 7152 	mov.w	r1, #840	; 0x348
 8007180:	484a      	ldr	r0, [pc, #296]	; (80072ac <HAL_ADC_IRQHandler+0x15c>)
 8007182:	f005 fce5 	bl	800cb50 <assert_failed>
	tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8007186:	6823      	ldr	r3, [r4, #0]
 8007188:	6819      	ldr	r1, [r3, #0]
	tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800718a:	685a      	ldr	r2, [r3, #4]
	if (tmp1 && tmp2) {
 800718c:	078d      	lsls	r5, r1, #30
 800718e:	d52b      	bpl.n	80071e8 <HAL_ADC_IRQHandler+0x98>
 8007190:	0690      	lsls	r0, r2, #26
 8007192:	d529      	bpl.n	80071e8 <HAL_ADC_IRQHandler+0x98>
		if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL)) {
 8007194:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007196:	06d1      	lsls	r1, r2, #27
			SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007198:	bf5e      	ittt	pl
 800719a:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 800719c:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 80071a0:	6422      	strpl	r2, [r4, #64]	; 0x40
		if (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80071a2:	689a      	ldr	r2, [r3, #8]
 80071a4:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80071a8:	d117      	bne.n	80071da <HAL_ADC_IRQHandler+0x8a>
 80071aa:	69a2      	ldr	r2, [r4, #24]
 80071ac:	b9aa      	cbnz	r2, 80071da <HAL_ADC_IRQHandler+0x8a>
		    (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80071ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		    (hadc->Init.ContinuousConvMode == DISABLE) &&
 80071b0:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 80071b4:	d002      	beq.n	80071bc <HAL_ADC_IRQHandler+0x6c>
		     HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS))) {
 80071b6:	689a      	ldr	r2, [r3, #8]
		    (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80071b8:	0552      	lsls	r2, r2, #21
 80071ba:	d40e      	bmi.n	80071da <HAL_ADC_IRQHandler+0x8a>
			__HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80071bc:	685a      	ldr	r2, [r3, #4]
 80071be:	f022 0220 	bic.w	r2, r2, #32
 80071c2:	605a      	str	r2, [r3, #4]
			CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80071c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80071c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071ca:	6423      	str	r3, [r4, #64]	; 0x40
			if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY)) {
 80071cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80071ce:	04db      	lsls	r3, r3, #19
				SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80071d0:	bf5e      	ittt	pl
 80071d2:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 80071d4:	f043 0301 	orrpl.w	r3, r3, #1
 80071d8:	6423      	strpl	r3, [r4, #64]	; 0x40
		HAL_ADC_ConvCpltCallback(hadc);
 80071da:	4620      	mov	r0, r4
 80071dc:	f7ff ffb4 	bl	8007148 <HAL_ADC_ConvCpltCallback>
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80071e0:	6823      	ldr	r3, [r4, #0]
 80071e2:	f06f 0212 	mvn.w	r2, #18
 80071e6:	601a      	str	r2, [r3, #0]
	tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80071e8:	6823      	ldr	r3, [r4, #0]
 80071ea:	6819      	ldr	r1, [r3, #0]
	tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);
 80071ec:	685a      	ldr	r2, [r3, #4]
	if (tmp1 && tmp2) {
 80071ee:	074d      	lsls	r5, r1, #29
 80071f0:	d532      	bpl.n	8007258 <HAL_ADC_IRQHandler+0x108>
 80071f2:	0610      	lsls	r0, r2, #24
 80071f4:	d530      	bpl.n	8007258 <HAL_ADC_IRQHandler+0x108>
		if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL)) {
 80071f6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80071f8:	06d1      	lsls	r1, r2, #27
			SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80071fa:	bf5e      	ittt	pl
 80071fc:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 80071fe:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8007202:	6422      	strpl	r2, [r4, #64]	; 0x40
		if (ADC_IS_SOFTWARE_START_INJECTED(hadc) &&
 8007204:	689a      	ldr	r2, [r3, #8]
 8007206:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800720a:	d11e      	bne.n	800724a <HAL_ADC_IRQHandler+0xfa>
		    (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800720c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if (ADC_IS_SOFTWARE_START_INJECTED(hadc) &&
 800720e:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8007212:	d002      	beq.n	800721a <HAL_ADC_IRQHandler+0xca>
		     HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8007214:	689a      	ldr	r2, [r3, #8]
		    (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8007216:	0552      	lsls	r2, r2, #21
 8007218:	d417      	bmi.n	800724a <HAL_ADC_IRQHandler+0xfa>
		    (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800721a:	685a      	ldr	r2, [r3, #4]
		     HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800721c:	0555      	lsls	r5, r2, #21
 800721e:	d414      	bmi.n	800724a <HAL_ADC_IRQHandler+0xfa>
		     (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8007220:	689a      	ldr	r2, [r3, #8]
		    (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8007222:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8007226:	d110      	bne.n	800724a <HAL_ADC_IRQHandler+0xfa>
		     (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8007228:	69a2      	ldr	r2, [r4, #24]
 800722a:	b972      	cbnz	r2, 800724a <HAL_ADC_IRQHandler+0xfa>
			__HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800722c:	685a      	ldr	r2, [r3, #4]
 800722e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007232:	605a      	str	r2, [r3, #4]
			CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8007234:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007236:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800723a:	6423      	str	r3, [r4, #64]	; 0x40
			if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY)) {
 800723c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800723e:	05d8      	lsls	r0, r3, #23
				SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007240:	bf5e      	ittt	pl
 8007242:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 8007244:	f043 0301 	orrpl.w	r3, r3, #1
 8007248:	6423      	strpl	r3, [r4, #64]	; 0x40
		HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800724a:	4620      	mov	r0, r4
 800724c:	f000 f8e2 	bl	8007414 <HAL_ADCEx_InjectedConvCpltCallback>
		__HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8007250:	6823      	ldr	r3, [r4, #0]
 8007252:	f06f 020c 	mvn.w	r2, #12
 8007256:	601a      	str	r2, [r3, #0]
	tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8007258:	6823      	ldr	r3, [r4, #0]
 800725a:	6819      	ldr	r1, [r3, #0]
	tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);
 800725c:	685a      	ldr	r2, [r3, #4]
	if (tmp1 && tmp2) {
 800725e:	07c9      	lsls	r1, r1, #31
 8007260:	d50f      	bpl.n	8007282 <HAL_ADC_IRQHandler+0x132>
 8007262:	0655      	lsls	r5, r2, #25
 8007264:	d50d      	bpl.n	8007282 <HAL_ADC_IRQHandler+0x132>
		if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD)) {
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	07d8      	lsls	r0, r3, #31
 800726a:	d50a      	bpl.n	8007282 <HAL_ADC_IRQHandler+0x132>
			SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800726c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800726e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007272:	6423      	str	r3, [r4, #64]	; 0x40
			HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007274:	4620      	mov	r0, r4
 8007276:	f7ff ff68 	bl	800714a <HAL_ADC_LevelOutOfWindowCallback>
			__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800727a:	6823      	ldr	r3, [r4, #0]
 800727c:	f06f 0201 	mvn.w	r2, #1
 8007280:	601a      	str	r2, [r3, #0]
	tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8007282:	6823      	ldr	r3, [r4, #0]
 8007284:	6819      	ldr	r1, [r3, #0]
	tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8007286:	685a      	ldr	r2, [r3, #4]
	if (tmp1 && tmp2) {
 8007288:	0689      	lsls	r1, r1, #26
 800728a:	d50d      	bpl.n	80072a8 <HAL_ADC_IRQHandler+0x158>
 800728c:	0152      	lsls	r2, r2, #5
 800728e:	d50b      	bpl.n	80072a8 <HAL_ADC_IRQHandler+0x158>
		SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007290:	6c62      	ldr	r2, [r4, #68]	; 0x44
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007292:	f06f 0520 	mvn.w	r5, #32
		SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007296:	f042 0202 	orr.w	r2, r2, #2
 800729a:	6462      	str	r2, [r4, #68]	; 0x44
		HAL_ADC_ErrorCallback(hadc);
 800729c:	4620      	mov	r0, r4
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800729e:	601d      	str	r5, [r3, #0]
		HAL_ADC_ErrorCallback(hadc);
 80072a0:	f7ff ff54 	bl	800714c <HAL_ADC_ErrorCallback>
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80072a4:	6823      	ldr	r3, [r4, #0]
 80072a6:	601d      	str	r5, [r3, #0]
 80072a8:	bd38      	pop	{r3, r4, r5, pc}
 80072aa:	bf00      	nop
 80072ac:	0801d7bc 	.word	0x0801d7bc

080072b0 <HAL_ADC_ConfigChannel>:
{
 80072b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	__IO uint32_t counter = 0U;
 80072b2:	2300      	movs	r3, #0
 80072b4:	9301      	str	r3, [sp, #4]
	assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80072b6:	680b      	ldr	r3, [r1, #0]
 80072b8:	2b12      	cmp	r3, #18
{
 80072ba:	4604      	mov	r4, r0
 80072bc:	460f      	mov	r7, r1
	assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80072be:	d904      	bls.n	80072ca <HAL_ADC_ConfigChannel+0x1a>
 80072c0:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
 80072c4:	484e      	ldr	r0, [pc, #312]	; (8007400 <HAL_ADC_ConfigChannel+0x150>)
 80072c6:	f005 fc43 	bl	800cb50 <assert_failed>
	assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	3b01      	subs	r3, #1
 80072ce:	2b0f      	cmp	r3, #15
 80072d0:	d904      	bls.n	80072dc <HAL_ADC_ConfigChannel+0x2c>
 80072d2:	f240 41d1 	movw	r1, #1233	; 0x4d1
 80072d6:	484a      	ldr	r0, [pc, #296]	; (8007400 <HAL_ADC_ConfigChannel+0x150>)
 80072d8:	f005 fc3a 	bl	800cb50 <assert_failed>
	assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	2b07      	cmp	r3, #7
 80072e0:	d904      	bls.n	80072ec <HAL_ADC_ConfigChannel+0x3c>
 80072e2:	f240 41d2 	movw	r1, #1234	; 0x4d2
 80072e6:	4846      	ldr	r0, [pc, #280]	; (8007400 <HAL_ADC_ConfigChannel+0x150>)
 80072e8:	f005 fc32 	bl	800cb50 <assert_failed>
	__HAL_LOCK(hadc);
 80072ec:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	f000 8082 	beq.w	80073fa <HAL_ADC_ConfigChannel+0x14a>
	if (sConfig->Channel > ADC_CHANNEL_9) {
 80072f6:	683d      	ldr	r5, [r7, #0]
 80072f8:	68ba      	ldr	r2, [r7, #8]
 80072fa:	6820      	ldr	r0, [r4, #0]
	__HAL_LOCK(hadc);
 80072fc:	2301      	movs	r3, #1
	if (sConfig->Channel > ADC_CHANNEL_9) {
 80072fe:	2d09      	cmp	r5, #9
	__HAL_LOCK(hadc);
 8007300:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8007304:	b2ae      	uxth	r6, r5
	if (sConfig->Channel > ADC_CHANNEL_9) {
 8007306:	d929      	bls.n	800735c <HAL_ADC_ConfigChannel+0xac>
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007308:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800730c:	68c1      	ldr	r1, [r0, #12]
 800730e:	3b1e      	subs	r3, #30
 8007310:	f04f 0e07 	mov.w	lr, #7
 8007314:	fa0e fe03 	lsl.w	lr, lr, r3
 8007318:	ea21 010e 	bic.w	r1, r1, lr
 800731c:	60c1      	str	r1, [r0, #12]
		hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800731e:	68c1      	ldr	r1, [r0, #12]
 8007320:	fa02 f303 	lsl.w	r3, r2, r3
 8007324:	430b      	orrs	r3, r1
 8007326:	60c3      	str	r3, [r0, #12]
	if (sConfig->Rank < 7U) {
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	2a06      	cmp	r2, #6
 800732c:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8007330:	d824      	bhi.n	800737c <HAL_ADC_ConfigChannel+0xcc>
		hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007332:	4413      	add	r3, r2
 8007334:	6b47      	ldr	r7, [r0, #52]	; 0x34
 8007336:	1f59      	subs	r1, r3, #5
 8007338:	231f      	movs	r3, #31
 800733a:	408b      	lsls	r3, r1
 800733c:	ea27 0303 	bic.w	r3, r7, r3
 8007340:	6343      	str	r3, [r0, #52]	; 0x34
		hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007342:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007344:	fa06 f101 	lsl.w	r1, r6, r1
 8007348:	4311      	orrs	r1, r2
 800734a:	6341      	str	r1, [r0, #52]	; 0x34
	if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT)) {
 800734c:	4b2d      	ldr	r3, [pc, #180]	; (8007404 <HAL_ADC_ConfigChannel+0x154>)
 800734e:	4298      	cmp	r0, r3
 8007350:	d033      	beq.n	80073ba <HAL_ADC_ConfigChannel+0x10a>
	__HAL_UNLOCK(hadc);
 8007352:	2000      	movs	r0, #0
 8007354:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8007358:	b003      	add	sp, #12
 800735a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800735c:	6901      	ldr	r1, [r0, #16]
 800735e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8007362:	f04f 0e07 	mov.w	lr, #7
 8007366:	fa0e fe03 	lsl.w	lr, lr, r3
 800736a:	ea21 010e 	bic.w	r1, r1, lr
 800736e:	6101      	str	r1, [r0, #16]
		hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007370:	6901      	ldr	r1, [r0, #16]
 8007372:	fa02 f303 	lsl.w	r3, r2, r3
 8007376:	430b      	orrs	r3, r1
 8007378:	6103      	str	r3, [r0, #16]
 800737a:	e7d5      	b.n	8007328 <HAL_ADC_ConfigChannel+0x78>
	else if (sConfig->Rank < 13U) {
 800737c:	2a0c      	cmp	r2, #12
 800737e:	d80e      	bhi.n	800739e <HAL_ADC_ConfigChannel+0xee>
		hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007380:	4413      	add	r3, r2
 8007382:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8007384:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8007388:	231f      	movs	r3, #31
 800738a:	4093      	lsls	r3, r2
 800738c:	ea21 0303 	bic.w	r3, r1, r3
 8007390:	6303      	str	r3, [r0, #48]	; 0x30
		hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007392:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8007394:	fa06 f202 	lsl.w	r2, r6, r2
 8007398:	431a      	orrs	r2, r3
 800739a:	6302      	str	r2, [r0, #48]	; 0x30
 800739c:	e7d6      	b.n	800734c <HAL_ADC_ConfigChannel+0x9c>
		hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800739e:	4413      	add	r3, r2
 80073a0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80073a2:	3b41      	subs	r3, #65	; 0x41
 80073a4:	221f      	movs	r2, #31
 80073a6:	409a      	lsls	r2, r3
 80073a8:	ea21 0202 	bic.w	r2, r1, r2
 80073ac:	62c2      	str	r2, [r0, #44]	; 0x2c
		hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80073ae:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80073b0:	fa06 f103 	lsl.w	r1, r6, r3
 80073b4:	4311      	orrs	r1, r2
 80073b6:	62c1      	str	r1, [r0, #44]	; 0x2c
 80073b8:	e7c8      	b.n	800734c <HAL_ADC_ConfigChannel+0x9c>
	if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT)) {
 80073ba:	2d12      	cmp	r5, #18
 80073bc:	d104      	bne.n	80073c8 <HAL_ADC_ConfigChannel+0x118>
		tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80073be:	4a12      	ldr	r2, [pc, #72]	; (8007408 <HAL_ADC_ConfigChannel+0x158>)
 80073c0:	6853      	ldr	r3, [r2, #4]
 80073c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80073c6:	6053      	str	r3, [r2, #4]
	if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT))) {
 80073c8:	f1a5 0310 	sub.w	r3, r5, #16
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d8c0      	bhi.n	8007352 <HAL_ADC_ConfigChannel+0xa2>
		tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80073d0:	4a0d      	ldr	r2, [pc, #52]	; (8007408 <HAL_ADC_ConfigChannel+0x158>)
 80073d2:	6853      	ldr	r3, [r2, #4]
		if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)) {
 80073d4:	2d10      	cmp	r5, #16
		tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80073d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80073da:	6053      	str	r3, [r2, #4]
		if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)) {
 80073dc:	d1b9      	bne.n	8007352 <HAL_ADC_ConfigChannel+0xa2>
			counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80073de:	4b0b      	ldr	r3, [pc, #44]	; (800740c <HAL_ADC_ConfigChannel+0x15c>)
 80073e0:	4a0b      	ldr	r2, [pc, #44]	; (8007410 <HAL_ADC_ConfigChannel+0x160>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	fbb3 f2f2 	udiv	r2, r3, r2
 80073e8:	230a      	movs	r3, #10
 80073ea:	4353      	muls	r3, r2
				counter--;
 80073ec:	9301      	str	r3, [sp, #4]
			while (counter != 0U) {
 80073ee:	9b01      	ldr	r3, [sp, #4]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d0ae      	beq.n	8007352 <HAL_ADC_ConfigChannel+0xa2>
				counter--;
 80073f4:	9b01      	ldr	r3, [sp, #4]
 80073f6:	3b01      	subs	r3, #1
 80073f8:	e7f8      	b.n	80073ec <HAL_ADC_ConfigChannel+0x13c>
	__HAL_LOCK(hadc);
 80073fa:	2002      	movs	r0, #2
 80073fc:	e7ac      	b.n	8007358 <HAL_ADC_ConfigChannel+0xa8>
 80073fe:	bf00      	nop
 8007400:	0801d7bc 	.word	0x0801d7bc
 8007404:	40012000 	.word	0x40012000
 8007408:	40012300 	.word	0x40012300
 800740c:	2000149c 	.word	0x2000149c
 8007410:	000f4240 	.word	0x000f4240

08007414 <HAL_ADCEx_InjectedConvCpltCallback>:
 * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 *         the configuration information for the specified ADC.
 * @retval None
 */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007414:	4770      	bx	lr
	...

08007418 <HAL_NVIC_SetPriorityGrouping>:
 * @retval None
 */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
	/* Check the parameters */
	assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8007418:	1ec3      	subs	r3, r0, #3
 800741a:	2b04      	cmp	r3, #4
{
 800741c:	b510      	push	{r4, lr}
 800741e:	4604      	mov	r4, r0
	assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8007420:	d903      	bls.n	800742a <HAL_NVIC_SetPriorityGrouping+0x12>
 8007422:	21a2      	movs	r1, #162	; 0xa2
 8007424:	4809      	ldr	r0, [pc, #36]	; (800744c <HAL_NVIC_SetPriorityGrouping+0x34>)
 8007426:	f005 fb93 	bl	800cb50 <assert_failed>
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
	uint32_t reg_value;
	uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);       /* only values 0..7 are used          */

	reg_value = SCB->AIRCR;                                               /* read old register configuration    */
 800742a:	4a09      	ldr	r2, [pc, #36]	; (8007450 <HAL_NVIC_SetPriorityGrouping+0x38>)
 800742c:	68d3      	ldr	r3, [r2, #12]
	reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800742e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007432:	041b      	lsls	r3, r3, #16
 8007434:	0c1b      	lsrs	r3, r3, #16
 8007436:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
	reg_value = (reg_value |
		     ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
		     (PriorityGroupTmp << 8U));                               /* Insert write key and priorty group */
 800743a:	0224      	lsls	r4, r4, #8
 800743c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007440:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
	reg_value = (reg_value |
 8007444:	431c      	orrs	r4, r3
	SCB->AIRCR = reg_value;
 8007446:	60d4      	str	r4, [r2, #12]
 8007448:	bd10      	pop	{r4, pc}
 800744a:	bf00      	nop
 800744c:	0801d7f4 	.word	0x0801d7f4
 8007450:	e000ed00 	.word	0xe000ed00

08007454 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
	uint32_t prioritygroup = 0x00U;

	/* Check the parameters */
	assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8007454:	2a0f      	cmp	r2, #15
{
 8007456:	b570      	push	{r4, r5, r6, lr}
 8007458:	4604      	mov	r4, r0
 800745a:	460e      	mov	r6, r1
 800745c:	4615      	mov	r5, r2
	assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800745e:	d903      	bls.n	8007468 <HAL_NVIC_SetPriority+0x14>
 8007460:	21ba      	movs	r1, #186	; 0xba
 8007462:	481a      	ldr	r0, [pc, #104]	; (80074cc <HAL_NVIC_SetPriority+0x78>)
 8007464:	f005 fb74 	bl	800cb50 <assert_failed>
	assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8007468:	2e0f      	cmp	r6, #15
 800746a:	d903      	bls.n	8007474 <HAL_NVIC_SetPriority+0x20>
 800746c:	21bb      	movs	r1, #187	; 0xbb
 800746e:	4817      	ldr	r0, [pc, #92]	; (80074cc <HAL_NVIC_SetPriority+0x78>)
 8007470:	f005 fb6e 	bl	800cb50 <assert_failed>
   \details Reads the priority grouping field from the NVIC Interrupt Controller.
   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
	return((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007474:	4b16      	ldr	r3, [pc, #88]	; (80074d0 <HAL_NVIC_SetPriority+0x7c>)
 8007476:	68d9      	ldr	r1, [r3, #12]
 8007478:	f3c1 2102 	ubfx	r1, r1, #8, #3
{
	uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL); /* only values 0..7 are used          */
	uint32_t PreemptPriorityBits;
	uint32_t SubPriorityBits;

	PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800747c:	f1c1 0307 	rsb	r3, r1, #7
	SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007480:	1d0a      	adds	r2, r1, #4
	PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007482:	2b04      	cmp	r3, #4
 8007484:	bf28      	it	cs
 8007486:	2304      	movcs	r3, #4

	return(
		((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007488:	2001      	movs	r0, #1
	SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800748a:	2a06      	cmp	r2, #6
 800748c:	bf8c      	ite	hi
 800748e:	3903      	subhi	r1, #3
 8007490:	2100      	movls	r1, #0
		((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007492:	fa00 f203 	lsl.w	r2, r0, r3
 8007496:	3a01      	subs	r2, #1
		((SubPriority & (uint32_t)((1UL << (SubPriorityBits)) - 1UL)))
 8007498:	4088      	lsls	r0, r1
		((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800749a:	4032      	ands	r2, r6
		((SubPriority & (uint32_t)((1UL << (SubPriorityBits)) - 1UL)))
 800749c:	3801      	subs	r0, #1
		((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800749e:	408a      	lsls	r2, r1
		((SubPriority & (uint32_t)((1UL << (SubPriorityBits)) - 1UL)))
 80074a0:	4005      	ands	r5, r0
	if ((int32_t)(IRQn) < 0) {
 80074a2:	2c00      	cmp	r4, #0
		((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80074a4:	ea42 0205 	orr.w	r2, r2, r5
 80074a8:	ea4f 1202 	mov.w	r2, r2, lsl #4
		NVIC->IP[((uint32_t)(int32_t)IRQn)] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074ac:	bfaf      	iteee	ge
 80074ae:	f104 4460 	addge.w	r4, r4, #3758096384	; 0xe0000000
		SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL) - 4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074b2:	f004 040f 	andlt.w	r4, r4, #15
 80074b6:	4b07      	ldrlt	r3, [pc, #28]	; (80074d4 <HAL_NVIC_SetPriority+0x80>)
 80074b8:	b2d2      	uxtblt	r2, r2
		NVIC->IP[((uint32_t)(int32_t)IRQn)] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074ba:	bfa5      	ittet	ge
 80074bc:	f504 4461 	addge.w	r4, r4, #57600	; 0xe100
 80074c0:	b2d2      	uxtbge	r2, r2
		SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL) - 4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074c2:	551a      	strblt	r2, [r3, r4]
		NVIC->IP[((uint32_t)(int32_t)IRQn)] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074c4:	f884 2300 	strbge.w	r2, [r4, #768]	; 0x300
 80074c8:	bd70      	pop	{r4, r5, r6, pc}
 80074ca:	bf00      	nop
 80074cc:	0801d7f4 	.word	0x0801d7f4
 80074d0:	e000ed00 	.word	0xe000ed00
 80074d4:	e000ed14 	.word	0xe000ed14

080074d8 <HAL_NVIC_EnableIRQ>:
 *         This parameter can be an enumerator of IRQn_Type enumeration
 *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
 * @retval None
 */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80074d8:	b510      	push	{r4, lr}
	/* Check the parameters */
	assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80074da:	1e04      	subs	r4, r0, #0
 80074dc:	da03      	bge.n	80074e6 <HAL_NVIC_EnableIRQ+0xe>
 80074de:	21ce      	movs	r1, #206	; 0xce
 80074e0:	4806      	ldr	r0, [pc, #24]	; (80074fc <HAL_NVIC_EnableIRQ+0x24>)
 80074e2:	f005 fb35 	bl	800cb50 <assert_failed>
	NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80074e6:	0962      	lsrs	r2, r4, #5
 80074e8:	2301      	movs	r3, #1
 80074ea:	f004 041f 	and.w	r4, r4, #31
 80074ee:	fa03 f404 	lsl.w	r4, r3, r4
 80074f2:	4b03      	ldr	r3, [pc, #12]	; (8007500 <HAL_NVIC_EnableIRQ+0x28>)
 80074f4:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80074f8:	bd10      	pop	{r4, pc}
 80074fa:	bf00      	nop
 80074fc:	0801d7f4 	.word	0x0801d7f4
 8007500:	e000e100 	.word	0xe000e100

08007504 <HAL_NVIC_DisableIRQ>:
 *         This parameter can be an enumerator of IRQn_Type enumeration
 *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
 * @retval None
 */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007504:	b510      	push	{r4, lr}
	/* Check the parameters */
	assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8007506:	1e04      	subs	r4, r0, #0
 8007508:	da03      	bge.n	8007512 <HAL_NVIC_DisableIRQ+0xe>
 800750a:	21de      	movs	r1, #222	; 0xde
 800750c:	4806      	ldr	r0, [pc, #24]	; (8007528 <HAL_NVIC_DisableIRQ+0x24>)
 800750e:	f005 fb1f 	bl	800cb50 <assert_failed>
	NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8007512:	0963      	lsrs	r3, r4, #5
 8007514:	2201      	movs	r2, #1
 8007516:	f004 041f 	and.w	r4, r4, #31
 800751a:	fa02 f404 	lsl.w	r4, r2, r4
 800751e:	3320      	adds	r3, #32
 8007520:	4a02      	ldr	r2, [pc, #8]	; (800752c <HAL_NVIC_DisableIRQ+0x28>)
 8007522:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8007526:	bd10      	pop	{r4, pc}
 8007528:	0801d7f4 	.word	0x0801d7f4
 800752c:	e000e100 	.word	0xe000e100

08007530 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
	if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) {
 8007530:	3801      	subs	r0, #1
 8007532:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8007536:	d20a      	bcs.n	800754e <HAL_SYSTICK_Config+0x1e>
		return(1UL);                                        /* Reload value impossible */
	}

	SysTick->LOAD = (uint32_t)(ticks - 1UL);                    /* set reload register */
 8007538:	4b06      	ldr	r3, [pc, #24]	; (8007554 <HAL_SYSTICK_Config+0x24>)
		SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL) - 4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800753a:	4a07      	ldr	r2, [pc, #28]	; (8007558 <HAL_SYSTICK_Config+0x28>)
	SysTick->LOAD = (uint32_t)(ticks - 1UL);                    /* set reload register */
 800753c:	6058      	str	r0, [r3, #4]
		SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL) - 4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800753e:	21f0      	movs	r1, #240	; 0xf0
 8007540:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
	NVIC_SetPriority(SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
	SysTick->VAL = 0UL;                                         /* Load the SysTick Counter Value */
 8007544:	2000      	movs	r0, #0
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 8007546:	2207      	movs	r2, #7
	SysTick->VAL = 0UL;                                         /* Load the SysTick Counter Value */
 8007548:	6098      	str	r0, [r3, #8]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 800754a:	601a      	str	r2, [r3, #0]
 800754c:	4770      	bx	lr
		return(1UL);                                        /* Reload value impossible */
 800754e:	2001      	movs	r0, #1
 *                  - 1  Function failed.
 */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
	return SysTick_Config(TicksNumb);
}
 8007550:	4770      	bx	lr
 8007552:	bf00      	nop
 8007554:	e000e010 	.word	0xe000e010
 8007558:	e000ed00 	.word	0xe000ed00

0800755c <HAL_NVIC_ClearPendingIRQ>:
 *         This parameter can be an enumerator of IRQn_Type enumeration
 *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
 * @retval None
 */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800755c:	b510      	push	{r4, lr}
	/* Check the parameters */
	assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800755e:	1e04      	subs	r4, r0, #0
 8007560:	da04      	bge.n	800756c <HAL_NVIC_ClearPendingIRQ+0x10>
 8007562:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8007566:	4807      	ldr	r0, [pc, #28]	; (8007584 <HAL_NVIC_ClearPendingIRQ+0x28>)
 8007568:	f005 faf2 	bl	800cb50 <assert_failed>
	NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800756c:	0963      	lsrs	r3, r4, #5
 800756e:	2201      	movs	r2, #1
 8007570:	f004 041f 	and.w	r4, r4, #31
 8007574:	fa02 f404 	lsl.w	r4, r2, r4
 8007578:	3360      	adds	r3, #96	; 0x60
 800757a:	4a03      	ldr	r2, [pc, #12]	; (8007588 <HAL_NVIC_ClearPendingIRQ+0x2c>)
 800757c:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8007580:	bd10      	pop	{r4, pc}
 8007582:	bf00      	nop
 8007584:	0801d7f4 	.word	0x0801d7f4
 8007588:	e000e100 	.word	0xe000e100

0800758c <DMA_CalcBaseAndBitshift>:
 *                     the configuration information for the specified DMA Stream.
 * @retval Stream base address
 */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
	uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800758c:	6803      	ldr	r3, [r0, #0]
 800758e:	b2da      	uxtb	r2, r3
 8007590:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007594:	f023 0303 	bic.w	r3, r3, #3
 8007598:	2118      	movs	r1, #24
 800759a:	3a10      	subs	r2, #16
 800759c:	fbb2 f2f1 	udiv	r2, r2, r1

	/* lookup table for necessary bitshift of flags within status registers */
	static const uint8_t flagBitshiftOffset[8U] = { 0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U };
	hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80075a0:	4904      	ldr	r1, [pc, #16]	; (80075b4 <DMA_CalcBaseAndBitshift+0x28>)

	if (stream_number > 3U) {
 80075a2:	2a03      	cmp	r2, #3
		/* return pointer to HISR and HIFCR */
		hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80075a4:	bf88      	it	hi
 80075a6:	3304      	addhi	r3, #4
	hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80075a8:	5c89      	ldrb	r1, [r1, r2]
	}else  {
		/* return pointer to LISR and LIFCR */
		hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80075aa:	6583      	str	r3, [r0, #88]	; 0x58
	hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80075ac:	65c1      	str	r1, [r0, #92]	; 0x5c
	}

	return hdma->StreamBaseAddress;
}
 80075ae:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80075b0:	4770      	bx	lr
 80075b2:	bf00      	nop
 80075b4:	0801d867 	.word	0x0801d867

080075b8 <HAL_DMA_Init>:
{
 80075b8:	b570      	push	{r4, r5, r6, lr}
 80075ba:	4604      	mov	r4, r0
	uint32_t tickstart = HAL_GetTick();
 80075bc:	f7ff fc78 	bl	8006eb0 <HAL_GetTick>
 80075c0:	4605      	mov	r5, r0
	if (hdma == NULL) {
 80075c2:	2c00      	cmp	r4, #0
 80075c4:	f000 8117 	beq.w	80077f6 <HAL_DMA_Init+0x23e>
	assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80075c8:	6823      	ldr	r3, [r4, #0]
 80075ca:	4a8c      	ldr	r2, [pc, #560]	; (80077fc <HAL_DMA_Init+0x244>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d031      	beq.n	8007634 <HAL_DMA_Init+0x7c>
 80075d0:	3218      	adds	r2, #24
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d02e      	beq.n	8007634 <HAL_DMA_Init+0x7c>
 80075d6:	3218      	adds	r2, #24
 80075d8:	4293      	cmp	r3, r2
 80075da:	d02b      	beq.n	8007634 <HAL_DMA_Init+0x7c>
 80075dc:	3218      	adds	r2, #24
 80075de:	4293      	cmp	r3, r2
 80075e0:	d028      	beq.n	8007634 <HAL_DMA_Init+0x7c>
 80075e2:	3218      	adds	r2, #24
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d025      	beq.n	8007634 <HAL_DMA_Init+0x7c>
 80075e8:	3218      	adds	r2, #24
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d022      	beq.n	8007634 <HAL_DMA_Init+0x7c>
 80075ee:	3218      	adds	r2, #24
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d01f      	beq.n	8007634 <HAL_DMA_Init+0x7c>
 80075f4:	3218      	adds	r2, #24
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d01c      	beq.n	8007634 <HAL_DMA_Init+0x7c>
 80075fa:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80075fe:	4293      	cmp	r3, r2
 8007600:	d018      	beq.n	8007634 <HAL_DMA_Init+0x7c>
 8007602:	3218      	adds	r2, #24
 8007604:	4293      	cmp	r3, r2
 8007606:	d015      	beq.n	8007634 <HAL_DMA_Init+0x7c>
 8007608:	3218      	adds	r2, #24
 800760a:	4293      	cmp	r3, r2
 800760c:	d012      	beq.n	8007634 <HAL_DMA_Init+0x7c>
 800760e:	3218      	adds	r2, #24
 8007610:	4293      	cmp	r3, r2
 8007612:	d00f      	beq.n	8007634 <HAL_DMA_Init+0x7c>
 8007614:	3218      	adds	r2, #24
 8007616:	4293      	cmp	r3, r2
 8007618:	d00c      	beq.n	8007634 <HAL_DMA_Init+0x7c>
 800761a:	3218      	adds	r2, #24
 800761c:	4293      	cmp	r3, r2
 800761e:	d009      	beq.n	8007634 <HAL_DMA_Init+0x7c>
 8007620:	3218      	adds	r2, #24
 8007622:	4293      	cmp	r3, r2
 8007624:	d006      	beq.n	8007634 <HAL_DMA_Init+0x7c>
 8007626:	3218      	adds	r2, #24
 8007628:	4293      	cmp	r3, r2
 800762a:	d003      	beq.n	8007634 <HAL_DMA_Init+0x7c>
 800762c:	21c6      	movs	r1, #198	; 0xc6
 800762e:	4874      	ldr	r0, [pc, #464]	; (8007800 <HAL_DMA_Init+0x248>)
 8007630:	f005 fa8e 	bl	800cb50 <assert_failed>
	assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8007634:	6863      	ldr	r3, [r4, #4]
 8007636:	f033 63c0 	bics.w	r3, r3, #100663296	; 0x6000000
 800763a:	d006      	beq.n	800764a <HAL_DMA_Init+0x92>
 800763c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007640:	d003      	beq.n	800764a <HAL_DMA_Init+0x92>
 8007642:	21c7      	movs	r1, #199	; 0xc7
 8007644:	486e      	ldr	r0, [pc, #440]	; (8007800 <HAL_DMA_Init+0x248>)
 8007646:	f005 fa83 	bl	800cb50 <assert_failed>
	assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800764a:	68a3      	ldr	r3, [r4, #8]
 800764c:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 8007650:	d005      	beq.n	800765e <HAL_DMA_Init+0xa6>
 8007652:	2b80      	cmp	r3, #128	; 0x80
 8007654:	d003      	beq.n	800765e <HAL_DMA_Init+0xa6>
 8007656:	21c8      	movs	r1, #200	; 0xc8
 8007658:	4869      	ldr	r0, [pc, #420]	; (8007800 <HAL_DMA_Init+0x248>)
 800765a:	f005 fa79 	bl	800cb50 <assert_failed>
	assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800765e:	68e3      	ldr	r3, [r4, #12]
 8007660:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8007664:	d003      	beq.n	800766e <HAL_DMA_Init+0xb6>
 8007666:	21c9      	movs	r1, #201	; 0xc9
 8007668:	4865      	ldr	r0, [pc, #404]	; (8007800 <HAL_DMA_Init+0x248>)
 800766a:	f005 fa71 	bl	800cb50 <assert_failed>
	assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800766e:	6923      	ldr	r3, [r4, #16]
 8007670:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8007674:	d003      	beq.n	800767e <HAL_DMA_Init+0xc6>
 8007676:	21ca      	movs	r1, #202	; 0xca
 8007678:	4861      	ldr	r0, [pc, #388]	; (8007800 <HAL_DMA_Init+0x248>)
 800767a:	f005 fa69 	bl	800cb50 <assert_failed>
	assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800767e:	6963      	ldr	r3, [r4, #20]
 8007680:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8007684:	d006      	beq.n	8007694 <HAL_DMA_Init+0xdc>
 8007686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800768a:	d003      	beq.n	8007694 <HAL_DMA_Init+0xdc>
 800768c:	21cb      	movs	r1, #203	; 0xcb
 800768e:	485c      	ldr	r0, [pc, #368]	; (8007800 <HAL_DMA_Init+0x248>)
 8007690:	f005 fa5e 	bl	800cb50 <assert_failed>
	assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8007694:	69a3      	ldr	r3, [r4, #24]
 8007696:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 800769a:	d006      	beq.n	80076aa <HAL_DMA_Init+0xf2>
 800769c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076a0:	d003      	beq.n	80076aa <HAL_DMA_Init+0xf2>
 80076a2:	21cc      	movs	r1, #204	; 0xcc
 80076a4:	4856      	ldr	r0, [pc, #344]	; (8007800 <HAL_DMA_Init+0x248>)
 80076a6:	f005 fa53 	bl	800cb50 <assert_failed>
	assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80076aa:	69e3      	ldr	r3, [r4, #28]
 80076ac:	f033 0220 	bics.w	r2, r3, #32
 80076b0:	d006      	beq.n	80076c0 <HAL_DMA_Init+0x108>
 80076b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076b6:	d003      	beq.n	80076c0 <HAL_DMA_Init+0x108>
 80076b8:	21cd      	movs	r1, #205	; 0xcd
 80076ba:	4851      	ldr	r0, [pc, #324]	; (8007800 <HAL_DMA_Init+0x248>)
 80076bc:	f005 fa48 	bl	800cb50 <assert_failed>
	assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80076c0:	6a23      	ldr	r3, [r4, #32]
 80076c2:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 80076c6:	d003      	beq.n	80076d0 <HAL_DMA_Init+0x118>
 80076c8:	21ce      	movs	r1, #206	; 0xce
 80076ca:	484d      	ldr	r0, [pc, #308]	; (8007800 <HAL_DMA_Init+0x248>)
 80076cc:	f005 fa40 	bl	800cb50 <assert_failed>
	assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 80076d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076d2:	f033 0304 	bics.w	r3, r3, #4
 80076d6:	d003      	beq.n	80076e0 <HAL_DMA_Init+0x128>
 80076d8:	21cf      	movs	r1, #207	; 0xcf
 80076da:	4849      	ldr	r0, [pc, #292]	; (8007800 <HAL_DMA_Init+0x248>)
 80076dc:	f005 fa38 	bl	800cb50 <assert_failed>
	if (hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE) {
 80076e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076e2:	b1b3      	cbz	r3, 8007712 <HAL_DMA_Init+0x15a>
		assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 80076e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80076e6:	2b03      	cmp	r3, #3
 80076e8:	d903      	bls.n	80076f2 <HAL_DMA_Init+0x13a>
 80076ea:	21d3      	movs	r1, #211	; 0xd3
 80076ec:	4844      	ldr	r0, [pc, #272]	; (8007800 <HAL_DMA_Init+0x248>)
 80076ee:	f005 fa2f 	bl	800cb50 <assert_failed>
		assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 80076f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80076f4:	f033 73c0 	bics.w	r3, r3, #25165824	; 0x1800000
 80076f8:	d003      	beq.n	8007702 <HAL_DMA_Init+0x14a>
 80076fa:	21d4      	movs	r1, #212	; 0xd4
 80076fc:	4840      	ldr	r0, [pc, #256]	; (8007800 <HAL_DMA_Init+0x248>)
 80076fe:	f005 fa27 	bl	800cb50 <assert_failed>
		assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8007702:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007704:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 8007708:	d003      	beq.n	8007712 <HAL_DMA_Init+0x15a>
 800770a:	21d5      	movs	r1, #213	; 0xd5
 800770c:	483c      	ldr	r0, [pc, #240]	; (8007800 <HAL_DMA_Init+0x248>)
 800770e:	f005 fa1f 	bl	800cb50 <assert_failed>
	__HAL_UNLOCK(hdma);
 8007712:	2300      	movs	r3, #0
 8007714:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	__HAL_DMA_DISABLE(hdma);
 8007718:	6822      	ldr	r2, [r4, #0]
	hdma->State = HAL_DMA_STATE_BUSY;
 800771a:	2302      	movs	r3, #2
 800771c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	__HAL_DMA_DISABLE(hdma);
 8007720:	6813      	ldr	r3, [r2, #0]
 8007722:	f023 0301 	bic.w	r3, r3, #1
 8007726:	6013      	str	r3, [r2, #0]
	while ((hdma->Instance->CR & DMA_SxCR_EN) != RESET) {
 8007728:	6821      	ldr	r1, [r4, #0]
 800772a:	680b      	ldr	r3, [r1, #0]
 800772c:	07d8      	lsls	r0, r3, #31
 800772e:	d43c      	bmi.n	80077aa <HAL_DMA_Init+0x1f2>
	tmp = hdma->Instance->CR;
 8007730:	680b      	ldr	r3, [r1, #0]
	tmp &= ((uint32_t) ~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007732:	4d34      	ldr	r5, [pc, #208]	; (8007804 <HAL_DMA_Init+0x24c>)
	tmp |= hdma->Init.Channel | hdma->Init.Direction |
 8007734:	6862      	ldr	r2, [r4, #4]
	       hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007736:	69a0      	ldr	r0, [r4, #24]
	tmp &= ((uint32_t) ~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007738:	401d      	ands	r5, r3
	tmp |= hdma->Init.Channel | hdma->Init.Direction |
 800773a:	68a3      	ldr	r3, [r4, #8]
 800773c:	4313      	orrs	r3, r2
 800773e:	68e2      	ldr	r2, [r4, #12]
 8007740:	4313      	orrs	r3, r2
	       hdma->Init.PeriphInc | hdma->Init.MemInc |
 8007742:	6922      	ldr	r2, [r4, #16]
 8007744:	4313      	orrs	r3, r2
 8007746:	6962      	ldr	r2, [r4, #20]
 8007748:	4313      	orrs	r3, r2
	       hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800774a:	69e2      	ldr	r2, [r4, #28]
 800774c:	4303      	orrs	r3, r0
 800774e:	4313      	orrs	r3, r2
	       hdma->Init.Mode | hdma->Init.Priority;
 8007750:	6a22      	ldr	r2, [r4, #32]
 8007752:	4313      	orrs	r3, r2
	if (hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE) {
 8007754:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007756:	2a04      	cmp	r2, #4
	tmp |= hdma->Init.Channel | hdma->Init.Direction |
 8007758:	ea43 0305 	orr.w	r3, r3, r5
		tmp |= hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800775c:	bf01      	itttt	eq
 800775e:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8007760:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8007762:	4335      	orreq	r5, r6
 8007764:	432b      	orreq	r3, r5
	hdma->Instance->CR = tmp;
 8007766:	600b      	str	r3, [r1, #0]
	tmp = hdma->Instance->FCR;
 8007768:	694b      	ldr	r3, [r1, #20]
	if (hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE) {
 800776a:	2a04      	cmp	r2, #4
	tmp &= (uint32_t) ~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800776c:	f023 0307 	bic.w	r3, r3, #7
	tmp |= hdma->Init.FIFOMode;
 8007770:	ea43 0302 	orr.w	r3, r3, r2
	if (hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE) {
 8007774:	d10b      	bne.n	800778e <HAL_DMA_Init+0x1d6>
		tmp |= hdma->Init.FIFOThreshold;
 8007776:	6aa2      	ldr	r2, [r4, #40]	; 0x28
		if (hdma->Init.MemBurst != DMA_MBURST_SINGLE) {
 8007778:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
		tmp |= hdma->Init.FIFOThreshold;
 800777a:	4313      	orrs	r3, r2
		if (hdma->Init.MemBurst != DMA_MBURST_SINGLE) {
 800777c:	b13d      	cbz	r5, 800778e <HAL_DMA_Init+0x1d6>
{
	HAL_StatusTypeDef status = HAL_OK;
	uint32_t tmp = hdma->Init.FIFOThreshold;

	/* Memory Data size equal to Byte */
	if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE) {
 800777e:	b9f8      	cbnz	r0, 80077c0 <HAL_DMA_Init+0x208>
		switch (tmp) {
 8007780:	2a01      	cmp	r2, #1
 8007782:	d02d      	beq.n	80077e0 <HAL_DMA_Init+0x228>
 8007784:	d301      	bcc.n	800778a <HAL_DMA_Init+0x1d2>
 8007786:	2a02      	cmp	r2, #2
			break;
		}
	}
	/* Memory Data size equal to Word */
	else{
		switch (tmp) {
 8007788:	d101      	bne.n	800778e <HAL_DMA_Init+0x1d6>
		case DMA_FIFO_THRESHOLD_HALFFULL:
		case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
			status = HAL_ERROR;
			break;
		case DMA_FIFO_THRESHOLD_FULL:
			if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1) {
 800778a:	01ea      	lsls	r2, r5, #7
 800778c:	d42b      	bmi.n	80077e6 <HAL_DMA_Init+0x22e>
	hdma->Instance->FCR = tmp;
 800778e:	614b      	str	r3, [r1, #20]
	regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007790:	4620      	mov	r0, r4
 8007792:	f7ff fefb 	bl	800758c <DMA_CalcBaseAndBitshift>
	regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007796:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007798:	233f      	movs	r3, #63	; 0x3f
 800779a:	4093      	lsls	r3, r2
 800779c:	6083      	str	r3, [r0, #8]
	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800779e:	2000      	movs	r0, #0
	hdma->State = HAL_DMA_STATE_READY;
 80077a0:	2301      	movs	r3, #1
	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80077a2:	6560      	str	r0, [r4, #84]	; 0x54
	hdma->State = HAL_DMA_STATE_READY;
 80077a4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	return HAL_OK;
 80077a8:	bd70      	pop	{r4, r5, r6, pc}
		if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT) {
 80077aa:	f7ff fb81 	bl	8006eb0 <HAL_GetTick>
 80077ae:	1b40      	subs	r0, r0, r5
 80077b0:	2805      	cmp	r0, #5
 80077b2:	d9b9      	bls.n	8007728 <HAL_DMA_Init+0x170>
			hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80077b4:	2320      	movs	r3, #32
 80077b6:	6563      	str	r3, [r4, #84]	; 0x54
			hdma->State = HAL_DMA_STATE_TIMEOUT;
 80077b8:	2003      	movs	r0, #3
				hdma->State = HAL_DMA_STATE_READY;
 80077ba:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80077be:	bd70      	pop	{r4, r5, r6, pc}
	else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD) {
 80077c0:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80077c4:	d113      	bne.n	80077ee <HAL_DMA_Init+0x236>
		switch (tmp) {
 80077c6:	2a03      	cmp	r2, #3
 80077c8:	d8e1      	bhi.n	800778e <HAL_DMA_Init+0x1d6>
 80077ca:	a001      	add	r0, pc, #4	; (adr r0, 80077d0 <HAL_DMA_Init+0x218>)
 80077cc:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80077d0:	080077e7 	.word	0x080077e7
 80077d4:	0800778b 	.word	0x0800778b
 80077d8:	080077e7 	.word	0x080077e7
 80077dc:	080077e1 	.word	0x080077e1
			if (hdma->Init.MemBurst == DMA_MBURST_INC16) {
 80077e0:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80077e4:	d1d3      	bne.n	800778e <HAL_DMA_Init+0x1d6>
				hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80077e6:	2340      	movs	r3, #64	; 0x40
 80077e8:	6563      	str	r3, [r4, #84]	; 0x54
				hdma->State = HAL_DMA_STATE_READY;
 80077ea:	2001      	movs	r0, #1
 80077ec:	e7e5      	b.n	80077ba <HAL_DMA_Init+0x202>
		switch (tmp) {
 80077ee:	2a02      	cmp	r2, #2
 80077f0:	d9f9      	bls.n	80077e6 <HAL_DMA_Init+0x22e>
 80077f2:	2a03      	cmp	r2, #3
 80077f4:	e7c8      	b.n	8007788 <HAL_DMA_Init+0x1d0>
		return HAL_ERROR;
 80077f6:	2001      	movs	r0, #1
 80077f8:	bd70      	pop	{r4, r5, r6, pc}
 80077fa:	bf00      	nop
 80077fc:	40026010 	.word	0x40026010
 8007800:	0801d82f 	.word	0x0801d82f
 8007804:	f010803f 	.word	0xf010803f

08007808 <HAL_DMA_DeInit>:
{
 8007808:	b538      	push	{r3, r4, r5, lr}
	if (hdma == NULL) {
 800780a:	4605      	mov	r5, r0
 800780c:	2800      	cmp	r0, #0
 800780e:	d056      	beq.n	80078be <HAL_DMA_DeInit+0xb6>
	if (hdma->State == HAL_DMA_STATE_BUSY) {
 8007810:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
 8007814:	b2c0      	uxtb	r0, r0
 8007816:	2802      	cmp	r0, #2
 8007818:	d052      	beq.n	80078c0 <HAL_DMA_DeInit+0xb8>
	assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 800781a:	682b      	ldr	r3, [r5, #0]
 800781c:	4a29      	ldr	r2, [pc, #164]	; (80078c4 <HAL_DMA_DeInit+0xbc>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d032      	beq.n	8007888 <HAL_DMA_DeInit+0x80>
 8007822:	3218      	adds	r2, #24
 8007824:	4293      	cmp	r3, r2
 8007826:	d02f      	beq.n	8007888 <HAL_DMA_DeInit+0x80>
 8007828:	3218      	adds	r2, #24
 800782a:	4293      	cmp	r3, r2
 800782c:	d02c      	beq.n	8007888 <HAL_DMA_DeInit+0x80>
 800782e:	3218      	adds	r2, #24
 8007830:	4293      	cmp	r3, r2
 8007832:	d029      	beq.n	8007888 <HAL_DMA_DeInit+0x80>
 8007834:	3218      	adds	r2, #24
 8007836:	4293      	cmp	r3, r2
 8007838:	d026      	beq.n	8007888 <HAL_DMA_DeInit+0x80>
 800783a:	3218      	adds	r2, #24
 800783c:	4293      	cmp	r3, r2
 800783e:	d023      	beq.n	8007888 <HAL_DMA_DeInit+0x80>
 8007840:	3218      	adds	r2, #24
 8007842:	4293      	cmp	r3, r2
 8007844:	d020      	beq.n	8007888 <HAL_DMA_DeInit+0x80>
 8007846:	3218      	adds	r2, #24
 8007848:	4293      	cmp	r3, r2
 800784a:	d01d      	beq.n	8007888 <HAL_DMA_DeInit+0x80>
 800784c:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8007850:	4293      	cmp	r3, r2
 8007852:	d019      	beq.n	8007888 <HAL_DMA_DeInit+0x80>
 8007854:	3218      	adds	r2, #24
 8007856:	4293      	cmp	r3, r2
 8007858:	d016      	beq.n	8007888 <HAL_DMA_DeInit+0x80>
 800785a:	3218      	adds	r2, #24
 800785c:	4293      	cmp	r3, r2
 800785e:	d013      	beq.n	8007888 <HAL_DMA_DeInit+0x80>
 8007860:	3218      	adds	r2, #24
 8007862:	4293      	cmp	r3, r2
 8007864:	d010      	beq.n	8007888 <HAL_DMA_DeInit+0x80>
 8007866:	3218      	adds	r2, #24
 8007868:	4293      	cmp	r3, r2
 800786a:	d00d      	beq.n	8007888 <HAL_DMA_DeInit+0x80>
 800786c:	3218      	adds	r2, #24
 800786e:	4293      	cmp	r3, r2
 8007870:	d00a      	beq.n	8007888 <HAL_DMA_DeInit+0x80>
 8007872:	3218      	adds	r2, #24
 8007874:	4293      	cmp	r3, r2
 8007876:	d007      	beq.n	8007888 <HAL_DMA_DeInit+0x80>
 8007878:	3218      	adds	r2, #24
 800787a:	4293      	cmp	r3, r2
 800787c:	d004      	beq.n	8007888 <HAL_DMA_DeInit+0x80>
 800787e:	f240 114d 	movw	r1, #333	; 0x14d
 8007882:	4811      	ldr	r0, [pc, #68]	; (80078c8 <HAL_DMA_DeInit+0xc0>)
 8007884:	f005 f964 	bl	800cb50 <assert_failed>
	__HAL_DMA_DISABLE(hdma);
 8007888:	682b      	ldr	r3, [r5, #0]
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	f022 0201 	bic.w	r2, r2, #1
	hdma->Instance->CR = 0U;
 8007890:	2400      	movs	r4, #0
	__HAL_DMA_DISABLE(hdma);
 8007892:	601a      	str	r2, [r3, #0]
	hdma->Instance->FCR = 0x00000021U;
 8007894:	2221      	movs	r2, #33	; 0x21
	hdma->Instance->CR = 0U;
 8007896:	601c      	str	r4, [r3, #0]
	regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007898:	4628      	mov	r0, r5
	hdma->Instance->NDTR = 0U;
 800789a:	605c      	str	r4, [r3, #4]
	hdma->Instance->PAR = 0U;
 800789c:	609c      	str	r4, [r3, #8]
	hdma->Instance->M0AR = 0U;
 800789e:	60dc      	str	r4, [r3, #12]
	hdma->Instance->M1AR = 0U;
 80078a0:	611c      	str	r4, [r3, #16]
	hdma->Instance->FCR = 0x00000021U;
 80078a2:	615a      	str	r2, [r3, #20]
	regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80078a4:	f7ff fe72 	bl	800758c <DMA_CalcBaseAndBitshift>
	regs->IFCR = 0x3FU << hdma->StreamIndex;
 80078a8:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80078aa:	233f      	movs	r3, #63	; 0x3f
 80078ac:	4093      	lsls	r3, r2
 80078ae:	6083      	str	r3, [r0, #8]
	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80078b0:	656c      	str	r4, [r5, #84]	; 0x54
	__HAL_UNLOCK(hdma);
 80078b2:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
	hdma->State = HAL_DMA_STATE_RESET;
 80078b6:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
	return HAL_OK;
 80078ba:	4620      	mov	r0, r4
 80078bc:	bd38      	pop	{r3, r4, r5, pc}
		return HAL_ERROR;
 80078be:	2001      	movs	r0, #1
}
 80078c0:	bd38      	pop	{r3, r4, r5, pc}
 80078c2:	bf00      	nop
 80078c4:	40026010 	.word	0x40026010
 80078c8:	0801d82f 	.word	0x0801d82f

080078cc <HAL_DMA_Start_IT>:
{
 80078cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078d0:	4617      	mov	r7, r2
 80078d2:	4698      	mov	r8, r3
	assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80078d4:	1e5a      	subs	r2, r3, #1
 80078d6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80078da:	429a      	cmp	r2, r3
{
 80078dc:	4604      	mov	r4, r0
 80078de:	460d      	mov	r5, r1
	DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80078e0:	6d86      	ldr	r6, [r0, #88]	; 0x58
	assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80078e2:	d904      	bls.n	80078ee <HAL_DMA_Start_IT+0x22>
 80078e4:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80078e8:	4822      	ldr	r0, [pc, #136]	; (8007974 <HAL_DMA_Start_IT+0xa8>)
 80078ea:	f005 f931 	bl	800cb50 <assert_failed>
	__HAL_LOCK(hdma);
 80078ee:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d03a      	beq.n	800796c <HAL_DMA_Start_IT+0xa0>
 80078f6:	2301      	movs	r3, #1
 80078f8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	if (HAL_DMA_STATE_READY == hdma->State) {
 80078fc:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8007900:	2b01      	cmp	r3, #1
 8007902:	f04f 0002 	mov.w	r0, #2
 8007906:	f04f 0100 	mov.w	r1, #0
 800790a:	d12b      	bne.n	8007964 <HAL_DMA_Start_IT+0x98>
		hdma->State = HAL_DMA_STATE_BUSY;
 800790c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
		hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007910:	6561      	str	r1, [r4, #84]	; 0x54
	hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007912:	6821      	ldr	r1, [r4, #0]
	if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH) {
 8007914:	68a3      	ldr	r3, [r4, #8]
	hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007916:	6808      	ldr	r0, [r1, #0]
		regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007918:	6de2      	ldr	r2, [r4, #92]	; 0x5c
	if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH) {
 800791a:	2b40      	cmp	r3, #64	; 0x40
		regs->IFCR = 0x3FU << hdma->StreamIndex;
 800791c:	f04f 033f 	mov.w	r3, #63	; 0x3f
 8007920:	fa03 f302 	lsl.w	r3, r3, r2
	hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007924:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8007928:	6008      	str	r0, [r1, #0]
	hdma->Instance->NDTR = DataLength;
 800792a:	f8c1 8004 	str.w	r8, [r1, #4]
		hdma->Instance->PAR = DstAddress;
 800792e:	bf0b      	itete	eq
 8007930:	608f      	streq	r7, [r1, #8]
		hdma->Instance->PAR = SrcAddress;
 8007932:	608d      	strne	r5, [r1, #8]
		hdma->Instance->M0AR = SrcAddress;
 8007934:	60cd      	streq	r5, [r1, #12]
		hdma->Instance->M0AR = DstAddress;
 8007936:	60cf      	strne	r7, [r1, #12]
		regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007938:	60b3      	str	r3, [r6, #8]
		hdma->Instance->CR |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800793a:	680b      	ldr	r3, [r1, #0]
 800793c:	f043 0316 	orr.w	r3, r3, #22
 8007940:	600b      	str	r3, [r1, #0]
		hdma->Instance->FCR |= DMA_IT_FE;
 8007942:	694b      	ldr	r3, [r1, #20]
 8007944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007948:	614b      	str	r3, [r1, #20]
		if (hdma->XferHalfCpltCallback != NULL) {
 800794a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800794c:	b11b      	cbz	r3, 8007956 <HAL_DMA_Start_IT+0x8a>
			hdma->Instance->CR |= DMA_IT_HT;
 800794e:	680b      	ldr	r3, [r1, #0]
 8007950:	f043 0308 	orr.w	r3, r3, #8
 8007954:	600b      	str	r3, [r1, #0]
		__HAL_DMA_ENABLE(hdma);
 8007956:	680b      	ldr	r3, [r1, #0]
 8007958:	f043 0301 	orr.w	r3, r3, #1
 800795c:	600b      	str	r3, [r1, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800795e:	2000      	movs	r0, #0
 8007960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		__HAL_UNLOCK(hdma);
 8007964:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 8007968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__HAL_LOCK(hdma);
 800796c:	2002      	movs	r0, #2
}
 800796e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007972:	bf00      	nop
 8007974:	0801d82f 	.word	0x0801d82f

08007978 <HAL_DMA_Abort_IT>:
	if (hdma->State != HAL_DMA_STATE_BUSY) {
 8007978:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800797c:	2b02      	cmp	r3, #2
 800797e:	d003      	beq.n	8007988 <HAL_DMA_Abort_IT+0x10>
		hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007980:	2380      	movs	r3, #128	; 0x80
 8007982:	6543      	str	r3, [r0, #84]	; 0x54
		return HAL_ERROR;
 8007984:	2001      	movs	r0, #1
 8007986:	4770      	bx	lr
		__HAL_DMA_DISABLE(hdma);
 8007988:	6802      	ldr	r2, [r0, #0]
		hdma->State = HAL_DMA_STATE_ABORT;
 800798a:	2305      	movs	r3, #5
 800798c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
		__HAL_DMA_DISABLE(hdma);
 8007990:	6813      	ldr	r3, [r2, #0]
 8007992:	f023 0301 	bic.w	r3, r3, #1
 8007996:	6013      	str	r3, [r2, #0]
	return HAL_OK;
 8007998:	2000      	movs	r0, #0
}
 800799a:	4770      	bx	lr

0800799c <HAL_DMA_IRQHandler>:
{
 800799c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	__IO uint32_t count = 0U;
 800799e:	2300      	movs	r3, #0
 80079a0:	9301      	str	r3, [sp, #4]
	uint32_t timeout = SystemCoreClock / 9600U;
 80079a2:	4b5a      	ldr	r3, [pc, #360]	; (8007b0c <HAL_DMA_IRQHandler+0x170>)
	DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80079a4:	6d85      	ldr	r5, [r0, #88]	; 0x58
	uint32_t timeout = SystemCoreClock / 9600U;
 80079a6:	681f      	ldr	r7, [r3, #0]
	if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET) {
 80079a8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
	tmpisr = regs->ISR;
 80079aa:	682e      	ldr	r6, [r5, #0]
	if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET) {
 80079ac:	2208      	movs	r2, #8
 80079ae:	409a      	lsls	r2, r3
 80079b0:	4216      	tst	r6, r2
{
 80079b2:	4604      	mov	r4, r0
	if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET) {
 80079b4:	d00c      	beq.n	80079d0 <HAL_DMA_IRQHandler+0x34>
		if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET) {
 80079b6:	6801      	ldr	r1, [r0, #0]
 80079b8:	6808      	ldr	r0, [r1, #0]
 80079ba:	0740      	lsls	r0, r0, #29
 80079bc:	d508      	bpl.n	80079d0 <HAL_DMA_IRQHandler+0x34>
			hdma->Instance->CR &= ~(DMA_IT_TE);
 80079be:	6808      	ldr	r0, [r1, #0]
 80079c0:	f020 0004 	bic.w	r0, r0, #4
 80079c4:	6008      	str	r0, [r1, #0]
			regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80079c6:	60aa      	str	r2, [r5, #8]
			hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80079c8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80079ca:	f042 0201 	orr.w	r2, r2, #1
 80079ce:	6562      	str	r2, [r4, #84]	; 0x54
	if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET) {
 80079d0:	2201      	movs	r2, #1
 80079d2:	409a      	lsls	r2, r3
 80079d4:	4216      	tst	r6, r2
 80079d6:	d008      	beq.n	80079ea <HAL_DMA_IRQHandler+0x4e>
		if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET) {
 80079d8:	6821      	ldr	r1, [r4, #0]
 80079da:	6949      	ldr	r1, [r1, #20]
 80079dc:	0609      	lsls	r1, r1, #24
			regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80079de:	bf41      	itttt	mi
 80079e0:	60aa      	strmi	r2, [r5, #8]
			hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80079e2:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80079e4:	f042 0202 	orrmi.w	r2, r2, #2
 80079e8:	6562      	strmi	r2, [r4, #84]	; 0x54
	if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET) {
 80079ea:	2204      	movs	r2, #4
 80079ec:	409a      	lsls	r2, r3
 80079ee:	4216      	tst	r6, r2
 80079f0:	d008      	beq.n	8007a04 <HAL_DMA_IRQHandler+0x68>
		if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET) {
 80079f2:	6821      	ldr	r1, [r4, #0]
 80079f4:	6809      	ldr	r1, [r1, #0]
 80079f6:	0788      	lsls	r0, r1, #30
			regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80079f8:	bf41      	itttt	mi
 80079fa:	60aa      	strmi	r2, [r5, #8]
			hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80079fc:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80079fe:	f042 0204 	orrmi.w	r2, r2, #4
 8007a02:	6562      	strmi	r2, [r4, #84]	; 0x54
	if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET) {
 8007a04:	2210      	movs	r2, #16
 8007a06:	409a      	lsls	r2, r3
 8007a08:	4216      	tst	r6, r2
 8007a0a:	d010      	beq.n	8007a2e <HAL_DMA_IRQHandler+0x92>
		if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET) {
 8007a0c:	6823      	ldr	r3, [r4, #0]
 8007a0e:	6819      	ldr	r1, [r3, #0]
 8007a10:	0709      	lsls	r1, r1, #28
 8007a12:	d50c      	bpl.n	8007a2e <HAL_DMA_IRQHandler+0x92>
			regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007a14:	60aa      	str	r2, [r5, #8]
			if (((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET) {
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	0350      	lsls	r0, r2, #13
 8007a1a:	d535      	bpl.n	8007a88 <HAL_DMA_IRQHandler+0xec>
				if ((hdma->Instance->CR & DMA_SxCR_CT) == RESET) {
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	0319      	lsls	r1, r3, #12
 8007a20:	d401      	bmi.n	8007a26 <HAL_DMA_IRQHandler+0x8a>
				if (hdma->XferHalfCpltCallback != NULL) {
 8007a22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a24:	e000      	b.n	8007a28 <HAL_DMA_IRQHandler+0x8c>
					if (hdma->XferM1HalfCpltCallback != NULL) {
 8007a26:	6ca3      	ldr	r3, [r4, #72]	; 0x48
				if (hdma->XferHalfCpltCallback != NULL) {
 8007a28:	b10b      	cbz	r3, 8007a2e <HAL_DMA_IRQHandler+0x92>
					hdma->XferHalfCpltCallback(hdma);
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	4798      	blx	r3
	if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET) {
 8007a2e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007a30:	2220      	movs	r2, #32
 8007a32:	408a      	lsls	r2, r1
 8007a34:	4216      	tst	r6, r2
 8007a36:	d038      	beq.n	8007aaa <HAL_DMA_IRQHandler+0x10e>
		if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET) {
 8007a38:	6823      	ldr	r3, [r4, #0]
 8007a3a:	6818      	ldr	r0, [r3, #0]
 8007a3c:	06c6      	lsls	r6, r0, #27
 8007a3e:	d534      	bpl.n	8007aaa <HAL_DMA_IRQHandler+0x10e>
			regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007a40:	60aa      	str	r2, [r5, #8]
			if (HAL_DMA_STATE_ABORT == hdma->State) {
 8007a42:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8007a46:	2a05      	cmp	r2, #5
				hdma->Instance->CR &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007a48:	681a      	ldr	r2, [r3, #0]
			if (HAL_DMA_STATE_ABORT == hdma->State) {
 8007a4a:	d125      	bne.n	8007a98 <HAL_DMA_IRQHandler+0xfc>
				hdma->Instance->CR &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007a4c:	f022 0216 	bic.w	r2, r2, #22
 8007a50:	601a      	str	r2, [r3, #0]
				hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007a52:	695a      	ldr	r2, [r3, #20]
 8007a54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a58:	615a      	str	r2, [r3, #20]
				if ((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL)) {
 8007a5a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007a5c:	b90a      	cbnz	r2, 8007a62 <HAL_DMA_IRQHandler+0xc6>
 8007a5e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8007a60:	b11a      	cbz	r2, 8007a6a <HAL_DMA_IRQHandler+0xce>
					hdma->Instance->CR &= ~(DMA_IT_HT);
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	f022 0208 	bic.w	r2, r2, #8
 8007a68:	601a      	str	r2, [r3, #0]
				regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007a6a:	233f      	movs	r3, #63	; 0x3f
 8007a6c:	408b      	lsls	r3, r1
 8007a6e:	60ab      	str	r3, [r5, #8]
				__HAL_UNLOCK(hdma);
 8007a70:	2300      	movs	r3, #0
 8007a72:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
				hdma->State = HAL_DMA_STATE_READY;
 8007a76:	2301      	movs	r3, #1
 8007a78:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
				if (hdma->XferAbortCallback != NULL) {
 8007a7c:	6d23      	ldr	r3, [r4, #80]	; 0x50
		if (hdma->XferErrorCallback != NULL) {
 8007a7e:	b10b      	cbz	r3, 8007a84 <HAL_DMA_IRQHandler+0xe8>
			hdma->XferErrorCallback(hdma);
 8007a80:	4620      	mov	r0, r4
 8007a82:	4798      	blx	r3
}
 8007a84:	b003      	add	sp, #12
 8007a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if ((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET) {
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	05d2      	lsls	r2, r2, #23
					hdma->Instance->CR &= ~(DMA_IT_HT);
 8007a8c:	bf5e      	ittt	pl
 8007a8e:	681a      	ldrpl	r2, [r3, #0]
 8007a90:	f022 0208 	bicpl.w	r2, r2, #8
 8007a94:	601a      	strpl	r2, [r3, #0]
 8007a96:	e7c4      	b.n	8007a22 <HAL_DMA_IRQHandler+0x86>
			if (((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET) {
 8007a98:	0350      	lsls	r0, r2, #13
 8007a9a:	d528      	bpl.n	8007aee <HAL_DMA_IRQHandler+0x152>
				if ((hdma->Instance->CR & DMA_SxCR_CT) == RESET) {
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	0319      	lsls	r1, r3, #12
 8007aa0:	d432      	bmi.n	8007b08 <HAL_DMA_IRQHandler+0x16c>
					if (hdma->XferM1CpltCallback != NULL) {
 8007aa2:	6c63      	ldr	r3, [r4, #68]	; 0x44
				if (hdma->XferCpltCallback != NULL) {
 8007aa4:	b10b      	cbz	r3, 8007aaa <HAL_DMA_IRQHandler+0x10e>
					hdma->XferCpltCallback(hdma);
 8007aa6:	4620      	mov	r0, r4
 8007aa8:	4798      	blx	r3
	if (hdma->ErrorCode != HAL_DMA_ERROR_NONE) {
 8007aaa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d0e9      	beq.n	8007a84 <HAL_DMA_IRQHandler+0xe8>
		if ((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET) {
 8007ab0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007ab2:	07da      	lsls	r2, r3, #31
 8007ab4:	d519      	bpl.n	8007aea <HAL_DMA_IRQHandler+0x14e>
			hdma->State = HAL_DMA_STATE_ABORT;
 8007ab6:	2305      	movs	r3, #5
			__HAL_DMA_DISABLE(hdma);
 8007ab8:	6822      	ldr	r2, [r4, #0]
			hdma->State = HAL_DMA_STATE_ABORT;
 8007aba:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			__HAL_DMA_DISABLE(hdma);
 8007abe:	6813      	ldr	r3, [r2, #0]
 8007ac0:	f023 0301 	bic.w	r3, r3, #1
 8007ac4:	6013      	str	r3, [r2, #0]
	uint32_t timeout = SystemCoreClock / 9600U;
 8007ac6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8007aca:	fbb7 f7f3 	udiv	r7, r7, r3
				if (++count > timeout) {
 8007ace:	9b01      	ldr	r3, [sp, #4]
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	429f      	cmp	r7, r3
 8007ad4:	9301      	str	r3, [sp, #4]
 8007ad6:	d302      	bcc.n	8007ade <HAL_DMA_IRQHandler+0x142>
			} while ((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007ad8:	6813      	ldr	r3, [r2, #0]
 8007ada:	07db      	lsls	r3, r3, #31
 8007adc:	d4f7      	bmi.n	8007ace <HAL_DMA_IRQHandler+0x132>
			__HAL_UNLOCK(hdma);
 8007ade:	2300      	movs	r3, #0
 8007ae0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			hdma->State = HAL_DMA_STATE_READY;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
		if (hdma->XferErrorCallback != NULL) {
 8007aea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007aec:	e7c7      	b.n	8007a7e <HAL_DMA_IRQHandler+0xe2>
				if ((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET) {
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8007af4:	d108      	bne.n	8007b08 <HAL_DMA_IRQHandler+0x16c>
					hdma->Instance->CR &= ~(DMA_IT_TC);
 8007af6:	6819      	ldr	r1, [r3, #0]
 8007af8:	f021 0110 	bic.w	r1, r1, #16
 8007afc:	6019      	str	r1, [r3, #0]
					hdma->State = HAL_DMA_STATE_READY;
 8007afe:	2301      	movs	r3, #1
					__HAL_UNLOCK(hdma);
 8007b00:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
					hdma->State = HAL_DMA_STATE_READY;
 8007b04:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
				if (hdma->XferCpltCallback != NULL) {
 8007b08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007b0a:	e7cb      	b.n	8007aa4 <HAL_DMA_IRQHandler+0x108>
 8007b0c:	2000149c 	.word	0x2000149c

08007b10 <HAL_GPIO_Init>:
	uint32_t ioposition = 0x00U;
	uint32_t iocurrent = 0x00U;
	uint32_t temp = 0x00U;

	/* Check the parameters */
	assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8007b10:	4b8f      	ldr	r3, [pc, #572]	; (8007d50 <HAL_GPIO_Init+0x240>)
 8007b12:	4298      	cmp	r0, r3
{
 8007b14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b18:	4604      	mov	r4, r0
 8007b1a:	460d      	mov	r5, r1
	assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8007b1c:	d017      	beq.n	8007b4e <HAL_GPIO_Init+0x3e>
 8007b1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b22:	4298      	cmp	r0, r3
 8007b24:	d013      	beq.n	8007b4e <HAL_GPIO_Init+0x3e>
 8007b26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b2a:	4298      	cmp	r0, r3
 8007b2c:	d00f      	beq.n	8007b4e <HAL_GPIO_Init+0x3e>
 8007b2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b32:	4298      	cmp	r0, r3
 8007b34:	d00b      	beq.n	8007b4e <HAL_GPIO_Init+0x3e>
 8007b36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b3a:	4298      	cmp	r0, r3
 8007b3c:	d007      	beq.n	8007b4e <HAL_GPIO_Init+0x3e>
 8007b3e:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8007b42:	4298      	cmp	r0, r3
 8007b44:	d003      	beq.n	8007b4e <HAL_GPIO_Init+0x3e>
 8007b46:	21c3      	movs	r1, #195	; 0xc3
 8007b48:	4882      	ldr	r0, [pc, #520]	; (8007d54 <HAL_GPIO_Init+0x244>)
 8007b4a:	f005 f801 	bl	800cb50 <assert_failed>
	assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8007b4e:	682b      	ldr	r3, [r5, #0]
 8007b50:	b29a      	uxth	r2, r3
 8007b52:	b112      	cbz	r2, 8007b5a <HAL_GPIO_Init+0x4a>
 8007b54:	0c1b      	lsrs	r3, r3, #16
 8007b56:	041b      	lsls	r3, r3, #16
 8007b58:	b11b      	cbz	r3, 8007b62 <HAL_GPIO_Init+0x52>
 8007b5a:	21c4      	movs	r1, #196	; 0xc4
 8007b5c:	487d      	ldr	r0, [pc, #500]	; (8007d54 <HAL_GPIO_Init+0x244>)
 8007b5e:	f004 fff7 	bl	800cb50 <assert_failed>
	assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8007b62:	686b      	ldr	r3, [r5, #4]
 8007b64:	2b03      	cmp	r3, #3
 8007b66:	d917      	bls.n	8007b98 <HAL_GPIO_Init+0x88>
 8007b68:	f1a3 0211 	sub.w	r2, r3, #17
 8007b6c:	2a01      	cmp	r2, #1
 8007b6e:	d913      	bls.n	8007b98 <HAL_GPIO_Init+0x88>
 8007b70:	4979      	ldr	r1, [pc, #484]	; (8007d58 <HAL_GPIO_Init+0x248>)
 8007b72:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007b76:	428a      	cmp	r2, r1
 8007b78:	d00e      	beq.n	8007b98 <HAL_GPIO_Init+0x88>
 8007b7a:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 8007b7e:	428b      	cmp	r3, r1
 8007b80:	d00a      	beq.n	8007b98 <HAL_GPIO_Init+0x88>
 8007b82:	f5a1 2170 	sub.w	r1, r1, #983040	; 0xf0000
 8007b86:	428a      	cmp	r2, r1
 8007b88:	d006      	beq.n	8007b98 <HAL_GPIO_Init+0x88>
 8007b8a:	4a74      	ldr	r2, [pc, #464]	; (8007d5c <HAL_GPIO_Init+0x24c>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d003      	beq.n	8007b98 <HAL_GPIO_Init+0x88>
 8007b90:	21c5      	movs	r1, #197	; 0xc5
 8007b92:	4870      	ldr	r0, [pc, #448]	; (8007d54 <HAL_GPIO_Init+0x244>)
 8007b94:	f004 ffdc 	bl	800cb50 <assert_failed>
	assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8007b98:	68ab      	ldr	r3, [r5, #8]
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	d903      	bls.n	8007ba6 <HAL_GPIO_Init+0x96>
 8007b9e:	21c6      	movs	r1, #198	; 0xc6
 8007ba0:	486c      	ldr	r0, [pc, #432]	; (8007d54 <HAL_GPIO_Init+0x244>)
 8007ba2:	f004 ffd5 	bl	800cb50 <assert_failed>
				temp &= ~(0x0FU << (4U * (position & 0x03U)));
				temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
				SYSCFG->EXTICR[position >> 2U] = temp;

				/* Clear EXTI line configuration */
				temp = EXTI->IMR;
 8007ba6:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007d64 <HAL_GPIO_Init+0x254>
{
 8007baa:	2600      	movs	r6, #0
		ioposition = 0x01U << position;
 8007bac:	2301      	movs	r3, #1
		iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007bae:	682a      	ldr	r2, [r5, #0]
		ioposition = 0x01U << position;
 8007bb0:	fa03 f706 	lsl.w	r7, r3, r6
		iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007bb4:	ea07 0902 	and.w	r9, r7, r2
		if (iocurrent == ioposition) {
 8007bb8:	454f      	cmp	r7, r9
 8007bba:	f040 80bb 	bne.w	8007d34 <HAL_GPIO_Init+0x224>
			if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) {
 8007bbe:	686a      	ldr	r2, [r5, #4]
 8007bc0:	f022 0210 	bic.w	r2, r2, #16
 8007bc4:	2a02      	cmp	r2, #2
 8007bc6:	d11b      	bne.n	8007c00 <HAL_GPIO_Init+0xf0>
				assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8007bc8:	6929      	ldr	r1, [r5, #16]
 8007bca:	290f      	cmp	r1, #15
 8007bcc:	d804      	bhi.n	8007bd8 <HAL_GPIO_Init+0xc8>
 8007bce:	f249 72f7 	movw	r2, #38903	; 0x97f7
 8007bd2:	40ca      	lsrs	r2, r1
 8007bd4:	07d2      	lsls	r2, r2, #31
 8007bd6:	d403      	bmi.n	8007be0 <HAL_GPIO_Init+0xd0>
 8007bd8:	21d4      	movs	r1, #212	; 0xd4
 8007bda:	485e      	ldr	r0, [pc, #376]	; (8007d54 <HAL_GPIO_Init+0x244>)
 8007bdc:	f004 ffb8 	bl	800cb50 <assert_failed>
				temp = GPIOx->AFR[position >> 3U];
 8007be0:	08f1      	lsrs	r1, r6, #3
 8007be2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
				temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U));
 8007be6:	f006 0207 	and.w	r2, r6, #7
 8007bea:	0090      	lsls	r0, r2, #2
				temp = GPIOx->AFR[position >> 3U];
 8007bec:	6a0b      	ldr	r3, [r1, #32]
				temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U));
 8007bee:	220f      	movs	r2, #15
 8007bf0:	4082      	lsls	r2, r0
 8007bf2:	ea23 0e02 	bic.w	lr, r3, r2
				temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007bf6:	692a      	ldr	r2, [r5, #16]
 8007bf8:	4082      	lsls	r2, r0
 8007bfa:	ea42 020e 	orr.w	r2, r2, lr
				GPIOx->AFR[position >> 3U] = temp;
 8007bfe:	620a      	str	r2, [r1, #32]
			temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007c00:	686a      	ldr	r2, [r5, #4]
			temp = GPIOx->MODER;
 8007c02:	6820      	ldr	r0, [r4, #0]
 8007c04:	ea4f 0b46 	mov.w	fp, r6, lsl #1
			temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007c08:	f04f 0a03 	mov.w	sl, #3
 8007c0c:	fa0a fa0b 	lsl.w	sl, sl, fp
			temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007c10:	f002 0103 	and.w	r1, r2, #3
			temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007c14:	ea6f 0a0a 	mvn.w	sl, sl
			if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007c18:	f022 0210 	bic.w	r2, r2, #16
			temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007c1c:	ea00 000a 	and.w	r0, r0, sl
			temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007c20:	fa01 f10b 	lsl.w	r1, r1, fp
			if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007c24:	3a01      	subs	r2, #1
			temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007c26:	4301      	orrs	r1, r0
			if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007c28:	2a01      	cmp	r2, #1
			GPIOx->MODER = temp;
 8007c2a:	6021      	str	r1, [r4, #0]
			if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007c2c:	d817      	bhi.n	8007c5e <HAL_GPIO_Init+0x14e>
				assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8007c2e:	68ea      	ldr	r2, [r5, #12]
 8007c30:	2a03      	cmp	r2, #3
 8007c32:	d903      	bls.n	8007c3c <HAL_GPIO_Init+0x12c>
 8007c34:	21e6      	movs	r1, #230	; 0xe6
 8007c36:	4847      	ldr	r0, [pc, #284]	; (8007d54 <HAL_GPIO_Init+0x244>)
 8007c38:	f004 ff8a 	bl	800cb50 <assert_failed>
				temp = GPIOx->OSPEEDR;
 8007c3c:	68a1      	ldr	r1, [r4, #8]
				temp |= (GPIO_Init->Speed << (position * 2U));
 8007c3e:	68ea      	ldr	r2, [r5, #12]
				temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007c40:	686b      	ldr	r3, [r5, #4]
				temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007c42:	ea0a 0101 	and.w	r1, sl, r1
				temp |= (GPIO_Init->Speed << (position * 2U));
 8007c46:	fa02 f20b 	lsl.w	r2, r2, fp
 8007c4a:	430a      	orrs	r2, r1
				GPIOx->OSPEEDR = temp;
 8007c4c:	60a2      	str	r2, [r4, #8]
				temp = GPIOx->OTYPER;
 8007c4e:	6862      	ldr	r2, [r4, #4]
				temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007c50:	f3c3 1300 	ubfx	r3, r3, #4, #1
				temp &= ~(GPIO_OTYPER_OT_0 << position);
 8007c54:	ea22 0207 	bic.w	r2, r2, r7
				temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007c58:	40b3      	lsls	r3, r6
 8007c5a:	4313      	orrs	r3, r2
				GPIOx->OTYPER = temp;
 8007c5c:	6063      	str	r3, [r4, #4]
			temp = GPIOx->PUPDR;
 8007c5e:	68e3      	ldr	r3, [r4, #12]
			if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) {
 8007c60:	6868      	ldr	r0, [r5, #4]
			temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007c62:	ea0a 0a03 	and.w	sl, sl, r3
			temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007c66:	68ab      	ldr	r3, [r5, #8]
 8007c68:	fa03 f30b 	lsl.w	r3, r3, fp
 8007c6c:	ea43 030a 	orr.w	r3, r3, sl
			GPIOx->PUPDR = temp;
 8007c70:	60e3      	str	r3, [r4, #12]
			if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) {
 8007c72:	00c3      	lsls	r3, r0, #3
 8007c74:	d55e      	bpl.n	8007d34 <HAL_GPIO_Init+0x224>
				__HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c76:	4a3a      	ldr	r2, [pc, #232]	; (8007d60 <HAL_GPIO_Init+0x250>)
 8007c78:	2300      	movs	r3, #0
 8007c7a:	9301      	str	r3, [sp, #4]
 8007c7c:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8007c7e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8007c82:	6451      	str	r1, [r2, #68]	; 0x44
 8007c84:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007c86:	f026 0103 	bic.w	r1, r6, #3
 8007c8a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8007c8e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8007c92:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 8007c96:	9201      	str	r2, [sp, #4]
				temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007c98:	f006 0e03 	and.w	lr, r6, #3
				__HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c9c:	9a01      	ldr	r2, [sp, #4]
				temp = SYSCFG->EXTICR[position >> 2U];
 8007c9e:	f8d1 c008 	ldr.w	ip, [r1, #8]
				temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007ca2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8007ca6:	220f      	movs	r2, #15
 8007ca8:	fa02 f20e 	lsl.w	r2, r2, lr
 8007cac:	ea2c 0c02 	bic.w	ip, ip, r2
				temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007cb0:	4a27      	ldr	r2, [pc, #156]	; (8007d50 <HAL_GPIO_Init+0x240>)
 8007cb2:	4294      	cmp	r4, r2
 8007cb4:	d013      	beq.n	8007cde <HAL_GPIO_Init+0x1ce>
 8007cb6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007cba:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
 8007cbe:	429c      	cmp	r4, r3
 8007cc0:	d03f      	beq.n	8007d42 <HAL_GPIO_Init+0x232>
 8007cc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cc6:	429c      	cmp	r4, r3
 8007cc8:	d03d      	beq.n	8007d46 <HAL_GPIO_Init+0x236>
 8007cca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cce:	429c      	cmp	r4, r3
 8007cd0:	d03b      	beq.n	8007d4a <HAL_GPIO_Init+0x23a>
 8007cd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cd6:	429c      	cmp	r4, r3
 8007cd8:	bf14      	ite	ne
 8007cda:	2307      	movne	r3, #7
 8007cdc:	2304      	moveq	r3, #4
 8007cde:	fa03 f30e 	lsl.w	r3, r3, lr
 8007ce2:	ea43 030c 	orr.w	r3, r3, ip
				SYSCFG->EXTICR[position >> 2U] = temp;
 8007ce6:	608b      	str	r3, [r1, #8]
				temp = EXTI->IMR;
 8007ce8:	f8d8 2000 	ldr.w	r2, [r8]
				temp &= ~((uint32_t)iocurrent);
 8007cec:	ea6f 0109 	mvn.w	r1, r9
				if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT) {
 8007cf0:	03c7      	lsls	r7, r0, #15
				temp &= ~((uint32_t)iocurrent);
 8007cf2:	bf54      	ite	pl
 8007cf4:	400a      	andpl	r2, r1
					temp |= iocurrent;
 8007cf6:	ea49 0202 	orrmi.w	r2, r9, r2
				}
				EXTI->IMR = temp;
 8007cfa:	f8c8 2000 	str.w	r2, [r8]

				temp = EXTI->EMR;
 8007cfe:	f8d8 2004 	ldr.w	r2, [r8, #4]
				temp &= ~((uint32_t)iocurrent);
				if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT) {
 8007d02:	0383      	lsls	r3, r0, #14
				temp &= ~((uint32_t)iocurrent);
 8007d04:	bf54      	ite	pl
 8007d06:	400a      	andpl	r2, r1
					temp |= iocurrent;
 8007d08:	ea49 0202 	orrmi.w	r2, r9, r2
				}
				EXTI->EMR = temp;
 8007d0c:	f8c8 2004 	str.w	r2, [r8, #4]

				/* Clear Rising Falling edge configuration */
				temp = EXTI->RTSR;
 8007d10:	f8d8 2008 	ldr.w	r2, [r8, #8]
				temp &= ~((uint32_t)iocurrent);
				if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE) {
 8007d14:	02c7      	lsls	r7, r0, #11
				temp &= ~((uint32_t)iocurrent);
 8007d16:	bf54      	ite	pl
 8007d18:	400a      	andpl	r2, r1
					temp |= iocurrent;
 8007d1a:	ea49 0202 	orrmi.w	r2, r9, r2
				}
				EXTI->RTSR = temp;
 8007d1e:	f8c8 2008 	str.w	r2, [r8, #8]

				temp = EXTI->FTSR;
 8007d22:	f8d8 300c 	ldr.w	r3, [r8, #12]
				temp &= ~((uint32_t)iocurrent);
				if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE) {
 8007d26:	0282      	lsls	r2, r0, #10
				temp &= ~((uint32_t)iocurrent);
 8007d28:	bf54      	ite	pl
 8007d2a:	400b      	andpl	r3, r1
					temp |= iocurrent;
 8007d2c:	ea49 0303 	orrmi.w	r3, r9, r3
				}
				EXTI->FTSR = temp;
 8007d30:	f8c8 300c 	str.w	r3, [r8, #12]
	for (position = 0U; position < GPIO_NUMBER; position++) {
 8007d34:	3601      	adds	r6, #1
 8007d36:	2e10      	cmp	r6, #16
 8007d38:	f47f af38 	bne.w	8007bac <HAL_GPIO_Init+0x9c>
			}
		}
	}
}
 8007d3c:	b003      	add	sp, #12
 8007d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007d42:	2301      	movs	r3, #1
 8007d44:	e7cb      	b.n	8007cde <HAL_GPIO_Init+0x1ce>
 8007d46:	2302      	movs	r3, #2
 8007d48:	e7c9      	b.n	8007cde <HAL_GPIO_Init+0x1ce>
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	e7c7      	b.n	8007cde <HAL_GPIO_Init+0x1ce>
 8007d4e:	bf00      	nop
 8007d50:	40020000 	.word	0x40020000
 8007d54:	0801d86f 	.word	0x0801d86f
 8007d58:	10110000 	.word	0x10110000
 8007d5c:	10220000 	.word	0x10220000
 8007d60:	40023800 	.word	0x40023800
 8007d64:	40013c00 	.word	0x40013c00

08007d68 <HAL_GPIO_DeInit>:
 * @param  GPIO_Pin specifies the port bit to be written.
 *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
 * @retval None
 */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007d68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t ioposition = 0x00U;
	uint32_t iocurrent = 0x00U;
	uint32_t tmp = 0x00U;

	/* Check the parameters */
	assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8007d6c:	4b45      	ldr	r3, [pc, #276]	; (8007e84 <HAL_GPIO_DeInit+0x11c>)
 8007d6e:	4298      	cmp	r0, r3
{
 8007d70:	4604      	mov	r4, r0
 8007d72:	4688      	mov	r8, r1
	assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8007d74:	d018      	beq.n	8007da8 <HAL_GPIO_DeInit+0x40>
 8007d76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d7a:	4298      	cmp	r0, r3
 8007d7c:	d014      	beq.n	8007da8 <HAL_GPIO_DeInit+0x40>
 8007d7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d82:	4298      	cmp	r0, r3
 8007d84:	d010      	beq.n	8007da8 <HAL_GPIO_DeInit+0x40>
 8007d86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d8a:	4298      	cmp	r0, r3
 8007d8c:	d00c      	beq.n	8007da8 <HAL_GPIO_DeInit+0x40>
 8007d8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d92:	4298      	cmp	r0, r3
 8007d94:	d008      	beq.n	8007da8 <HAL_GPIO_DeInit+0x40>
 8007d96:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8007d9a:	4298      	cmp	r0, r3
 8007d9c:	d004      	beq.n	8007da8 <HAL_GPIO_DeInit+0x40>
 8007d9e:	f240 1137 	movw	r1, #311	; 0x137
 8007da2:	4839      	ldr	r0, [pc, #228]	; (8007e88 <HAL_GPIO_DeInit+0x120>)
 8007da4:	f004 fed4 	bl	800cb50 <assert_failed>
				/* Configure the External Interrupt or event for the current IO */
				tmp = 0x0FU << (4U * (position & 0x03U));
				SYSCFG->EXTICR[position >> 2U] &= ~tmp;

				/* Clear EXTI line configuration */
				EXTI->IMR &= ~((uint32_t)iocurrent);
 8007da8:	4938      	ldr	r1, [pc, #224]	; (8007e8c <HAL_GPIO_DeInit+0x124>)
			if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)))) {
 8007daa:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 8007e90 <HAL_GPIO_DeInit+0x128>
{
 8007dae:	2200      	movs	r2, #0
		ioposition = 0x01U << position;
 8007db0:	f04f 0901 	mov.w	r9, #1
			GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007db4:	f04f 0a03 	mov.w	sl, #3
			GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U));
 8007db8:	f04f 0e0f 	mov.w	lr, #15
		ioposition = 0x01U << position;
 8007dbc:	fa09 f302 	lsl.w	r3, r9, r2
		if (iocurrent == ioposition) {
 8007dc0:	ea33 0008 	bics.w	r0, r3, r8
 8007dc4:	d150      	bne.n	8007e68 <HAL_GPIO_DeInit+0x100>
			GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007dc6:	0050      	lsls	r0, r2, #1
 8007dc8:	6825      	ldr	r5, [r4, #0]
 8007dca:	fa0a f000 	lsl.w	r0, sl, r0
 8007dce:	43c0      	mvns	r0, r0
			GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U));
 8007dd0:	08d6      	lsrs	r6, r2, #3
			GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007dd2:	4005      	ands	r5, r0
 8007dd4:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007dd8:	6025      	str	r5, [r4, #0]
			GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U));
 8007dda:	f002 0507 	and.w	r5, r2, #7
 8007dde:	6a37      	ldr	r7, [r6, #32]
 8007de0:	00ad      	lsls	r5, r5, #2
 8007de2:	fa0e f505 	lsl.w	r5, lr, r5
 8007de6:	ea27 0505 	bic.w	r5, r7, r5
 8007dea:	6235      	str	r5, [r6, #32]
			GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007dec:	68a5      	ldr	r5, [r4, #8]
 8007dee:	4005      	ands	r5, r0
 8007df0:	60a5      	str	r5, [r4, #8]
			GPIOx->OTYPER &= ~(GPIO_OTYPER_OT_0 << position);
 8007df2:	6865      	ldr	r5, [r4, #4]
 8007df4:	43db      	mvns	r3, r3
 8007df6:	401d      	ands	r5, r3
 8007df8:	6065      	str	r5, [r4, #4]
			GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007dfa:	68e5      	ldr	r5, [r4, #12]
 8007dfc:	4028      	ands	r0, r5
 8007dfe:	60e0      	str	r0, [r4, #12]
 8007e00:	f022 0003 	bic.w	r0, r2, #3
 8007e04:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8007e08:	f500 309c 	add.w	r0, r0, #79872	; 0x13800
			tmp &= (0x0FU << (4U * (position & 0x03U)));
 8007e0c:	f002 0603 	and.w	r6, r2, #3
			if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)))) {
 8007e10:	4d1c      	ldr	r5, [pc, #112]	; (8007e84 <HAL_GPIO_DeInit+0x11c>)
			tmp = SYSCFG->EXTICR[position >> 2U];
 8007e12:	6887      	ldr	r7, [r0, #8]
			tmp &= (0x0FU << (4U * (position & 0x03U)));
 8007e14:	00b6      	lsls	r6, r6, #2
 8007e16:	fa0e fc06 	lsl.w	ip, lr, r6
			if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)))) {
 8007e1a:	42ac      	cmp	r4, r5
			tmp &= (0x0FU << (4U * (position & 0x03U)));
 8007e1c:	ea07 070c 	and.w	r7, r7, ip
			if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)))) {
 8007e20:	d027      	beq.n	8007e72 <HAL_GPIO_DeInit+0x10a>
 8007e22:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007e26:	42ac      	cmp	r4, r5
 8007e28:	d025      	beq.n	8007e76 <HAL_GPIO_DeInit+0x10e>
 8007e2a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007e2e:	42ac      	cmp	r4, r5
 8007e30:	d023      	beq.n	8007e7a <HAL_GPIO_DeInit+0x112>
 8007e32:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007e36:	42ac      	cmp	r4, r5
 8007e38:	d021      	beq.n	8007e7e <HAL_GPIO_DeInit+0x116>
 8007e3a:	455c      	cmp	r4, fp
 8007e3c:	bf0c      	ite	eq
 8007e3e:	2504      	moveq	r5, #4
 8007e40:	2507      	movne	r5, #7
 8007e42:	40b5      	lsls	r5, r6
 8007e44:	42af      	cmp	r7, r5
 8007e46:	d10f      	bne.n	8007e68 <HAL_GPIO_DeInit+0x100>
				SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007e48:	6885      	ldr	r5, [r0, #8]
 8007e4a:	ea25 050c 	bic.w	r5, r5, ip
 8007e4e:	6085      	str	r5, [r0, #8]
				EXTI->IMR &= ~((uint32_t)iocurrent);
 8007e50:	6808      	ldr	r0, [r1, #0]
 8007e52:	4018      	ands	r0, r3
 8007e54:	6008      	str	r0, [r1, #0]
				EXTI->EMR &= ~((uint32_t)iocurrent);
 8007e56:	6848      	ldr	r0, [r1, #4]
 8007e58:	4018      	ands	r0, r3
 8007e5a:	6048      	str	r0, [r1, #4]

				/* Clear Rising Falling edge configuration */
				EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007e5c:	6888      	ldr	r0, [r1, #8]
 8007e5e:	4018      	ands	r0, r3
 8007e60:	6088      	str	r0, [r1, #8]
				EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007e62:	68c8      	ldr	r0, [r1, #12]
 8007e64:	4003      	ands	r3, r0
 8007e66:	60cb      	str	r3, [r1, #12]
	for (position = 0U; position < GPIO_NUMBER; position++) {
 8007e68:	3201      	adds	r2, #1
 8007e6a:	2a10      	cmp	r2, #16
 8007e6c:	d1a6      	bne.n	8007dbc <HAL_GPIO_DeInit+0x54>
			}
		}
	}
}
 8007e6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)))) {
 8007e72:	2500      	movs	r5, #0
 8007e74:	e7e5      	b.n	8007e42 <HAL_GPIO_DeInit+0xda>
 8007e76:	2501      	movs	r5, #1
 8007e78:	e7e3      	b.n	8007e42 <HAL_GPIO_DeInit+0xda>
 8007e7a:	2502      	movs	r5, #2
 8007e7c:	e7e1      	b.n	8007e42 <HAL_GPIO_DeInit+0xda>
 8007e7e:	2503      	movs	r5, #3
 8007e80:	e7df      	b.n	8007e42 <HAL_GPIO_DeInit+0xda>
 8007e82:	bf00      	nop
 8007e84:	40020000 	.word	0x40020000
 8007e88:	0801d86f 	.word	0x0801d86f
 8007e8c:	40013c00 	.word	0x40013c00
 8007e90:	40021000 	.word	0x40021000

08007e94 <HAL_GPIO_ReadPin>:
 * @param  GPIO_Pin specifies the port bit to read.
 *         This parameter can be GPIO_PIN_x where x can be (0..15).
 * @retval The input port pin value.
 */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007e94:	b538      	push	{r3, r4, r5, lr}
 8007e96:	4605      	mov	r5, r0
	GPIO_PinState bitstatus;

	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));
 8007e98:	460c      	mov	r4, r1
 8007e9a:	b921      	cbnz	r1, 8007ea6 <HAL_GPIO_ReadPin+0x12>
 8007e9c:	f44f 71c1 	mov.w	r1, #386	; 0x182
 8007ea0:	4804      	ldr	r0, [pc, #16]	; (8007eb4 <HAL_GPIO_ReadPin+0x20>)
 8007ea2:	f004 fe55 	bl	800cb50 <assert_failed>

	if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET) {
 8007ea6:	692b      	ldr	r3, [r5, #16]
 8007ea8:	421c      	tst	r4, r3
		bitstatus = GPIO_PIN_SET;
	}else  {
		bitstatus = GPIO_PIN_RESET;
	}
	return bitstatus;
}
 8007eaa:	bf14      	ite	ne
 8007eac:	2001      	movne	r0, #1
 8007eae:	2000      	moveq	r0, #0
 8007eb0:	bd38      	pop	{r3, r4, r5, pc}
 8007eb2:	bf00      	nop
 8007eb4:	0801d86f 	.word	0x0801d86f

08007eb8 <HAL_GPIO_WritePin>:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007eb8:	b570      	push	{r4, r5, r6, lr}
 8007eba:	4605      	mov	r5, r0
 8007ebc:	4616      	mov	r6, r2
	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));
 8007ebe:	460c      	mov	r4, r1
 8007ec0:	b921      	cbnz	r1, 8007ecc <HAL_GPIO_WritePin+0x14>
 8007ec2:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8007ec6:	4808      	ldr	r0, [pc, #32]	; (8007ee8 <HAL_GPIO_WritePin+0x30>)
 8007ec8:	f004 fe42 	bl	800cb50 <assert_failed>
	assert_param(IS_GPIO_PIN_ACTION(PinState));
 8007ecc:	2e01      	cmp	r6, #1
 8007ece:	d906      	bls.n	8007ede <HAL_GPIO_WritePin+0x26>
 8007ed0:	f240 11a1 	movw	r1, #417	; 0x1a1
 8007ed4:	4804      	ldr	r0, [pc, #16]	; (8007ee8 <HAL_GPIO_WritePin+0x30>)
 8007ed6:	f004 fe3b 	bl	800cb50 <assert_failed>

	if (PinState != GPIO_PIN_RESET) {
		GPIOx->BSRR = GPIO_Pin;
	}else  {
		GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007eda:	61ac      	str	r4, [r5, #24]
 8007edc:	bd70      	pop	{r4, r5, r6, pc}
	if (PinState != GPIO_PIN_RESET) {
 8007ede:	2e00      	cmp	r6, #0
 8007ee0:	d1fb      	bne.n	8007eda <HAL_GPIO_WritePin+0x22>
		GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007ee2:	0424      	lsls	r4, r4, #16
 8007ee4:	e7f9      	b.n	8007eda <HAL_GPIO_WritePin+0x22>
 8007ee6:	bf00      	nop
 8007ee8:	0801d86f 	.word	0x0801d86f

08007eec <HAL_GPIO_EXTI_IRQHandler>:
 * @brief  This function handles EXTI interrupt request.
 * @param  GPIO_Pin Specifies the pins connected EXTI line
 * @retval None
 */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007eec:	b508      	push	{r3, lr}
	/* EXTI line interrupt detected */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) {
 8007eee:	4b04      	ldr	r3, [pc, #16]	; (8007f00 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8007ef0:	6959      	ldr	r1, [r3, #20]
 8007ef2:	4201      	tst	r1, r0
 8007ef4:	d002      	beq.n	8007efc <HAL_GPIO_EXTI_IRQHandler+0x10>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007ef6:	6158      	str	r0, [r3, #20]
		HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007ef8:	f004 f932 	bl	800c160 <HAL_GPIO_EXTI_Callback>
 8007efc:	bd08      	pop	{r3, pc}
 8007efe:	bf00      	nop
 8007f00:	40013c00 	.word	0x40013c00

08007f04 <I2C_IsAcknowledgeFailed>:
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
	if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) {
 8007f04:	6802      	ldr	r2, [r0, #0]
 8007f06:	6953      	ldr	r3, [r2, #20]
 8007f08:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8007f0c:	d00d      	beq.n	8007f2a <I2C_IsAcknowledgeFailed+0x26>
		/* Clear NACKF Flag */
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f0e:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8007f12:	6153      	str	r3, [r2, #20]

		hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007f14:	2304      	movs	r3, #4
 8007f16:	6403      	str	r3, [r0, #64]	; 0x40
		hi2c->PreviousState = I2C_STATE_NONE;
		hi2c->State = HAL_I2C_STATE_READY;
 8007f18:	2220      	movs	r2, #32
		hi2c->PreviousState = I2C_STATE_NONE;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	6303      	str	r3, [r0, #48]	; 0x30

		/* Process Unlocked */
		__HAL_UNLOCK(hi2c);
 8007f1e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
		hi2c->State = HAL_I2C_STATE_READY;
 8007f22:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

		return HAL_ERROR;
 8007f26:	2001      	movs	r0, #1
 8007f28:	4770      	bx	lr
	}
	return HAL_OK;
 8007f2a:	4618      	mov	r0, r3
}
 8007f2c:	4770      	bx	lr

08007f2e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8007f2e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f32:	4604      	mov	r4, r0
 8007f34:	4617      	mov	r7, r2
 8007f36:	4699      	mov	r9, r3
	while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET) {
 8007f38:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8007f3c:	b28e      	uxth	r6, r1
 8007f3e:	6825      	ldr	r5, [r4, #0]
 8007f40:	f1b8 0f01 	cmp.w	r8, #1
 8007f44:	bf0c      	ite	eq
 8007f46:	696b      	ldreq	r3, [r5, #20]
 8007f48:	69ab      	ldrne	r3, [r5, #24]
 8007f4a:	ea36 0303 	bics.w	r3, r6, r3
 8007f4e:	bf14      	ite	ne
 8007f50:	2001      	movne	r0, #1
 8007f52:	2000      	moveq	r0, #0
 8007f54:	b908      	cbnz	r0, 8007f5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8007f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) {
 8007f5a:	696b      	ldr	r3, [r5, #20]
 8007f5c:	055a      	lsls	r2, r3, #21
 8007f5e:	d512      	bpl.n	8007f86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
			hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8007f60:	682b      	ldr	r3, [r5, #0]
 8007f62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007f66:	602b      	str	r3, [r5, #0]
			__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f68:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8007f6c:	616b      	str	r3, [r5, #20]
			hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007f6e:	2304      	movs	r3, #4
 8007f70:	6423      	str	r3, [r4, #64]	; 0x40
			hi2c->State = HAL_I2C_STATE_READY;
 8007f72:	2220      	movs	r2, #32
			hi2c->PreviousState = I2C_STATE_NONE;
 8007f74:	2300      	movs	r3, #0
 8007f76:	6323      	str	r3, [r4, #48]	; 0x30
			__HAL_UNLOCK(hi2c);
 8007f78:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			hi2c->State = HAL_I2C_STATE_READY;
 8007f7c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
			return HAL_ERROR;
 8007f80:	2001      	movs	r0, #1
 8007f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (Timeout != HAL_MAX_DELAY) {
 8007f86:	1c7b      	adds	r3, r7, #1
 8007f88:	d0d9      	beq.n	8007f3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
			if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 8007f8a:	b94f      	cbnz	r7, 8007fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
				hi2c->PreviousState = I2C_STATE_NONE;
 8007f8c:	2300      	movs	r3, #0
				hi2c->State = HAL_I2C_STATE_READY;
 8007f8e:	2220      	movs	r2, #32
				hi2c->PreviousState = I2C_STATE_NONE;
 8007f90:	6323      	str	r3, [r4, #48]	; 0x30
				__HAL_UNLOCK(hi2c);
 8007f92:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
				hi2c->State = HAL_I2C_STATE_READY;
 8007f96:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
				return HAL_TIMEOUT;
 8007f9a:	2003      	movs	r0, #3
 8007f9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 8007fa0:	f7fe ff86 	bl	8006eb0 <HAL_GetTick>
 8007fa4:	eba0 0009 	sub.w	r0, r0, r9
 8007fa8:	4287      	cmp	r7, r0
 8007faa:	d2c8      	bcs.n	8007f3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8007fac:	e7ee      	b.n	8007f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08007fae <I2C_WaitOnFlagUntilTimeout>:
{
 8007fae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fb2:	9e08      	ldr	r6, [sp, #32]
 8007fb4:	4604      	mov	r4, r0
 8007fb6:	4690      	mov	r8, r2
 8007fb8:	461f      	mov	r7, r3
	while ((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) {
 8007fba:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8007fbe:	b28d      	uxth	r5, r1
 8007fc0:	6823      	ldr	r3, [r4, #0]
 8007fc2:	f1b9 0f01 	cmp.w	r9, #1
 8007fc6:	bf0c      	ite	eq
 8007fc8:	695b      	ldreq	r3, [r3, #20]
 8007fca:	699b      	ldrne	r3, [r3, #24]
 8007fcc:	ea35 0303 	bics.w	r3, r5, r3
 8007fd0:	bf0c      	ite	eq
 8007fd2:	2301      	moveq	r3, #1
 8007fd4:	2300      	movne	r3, #0
 8007fd6:	4543      	cmp	r3, r8
 8007fd8:	d002      	beq.n	8007fe0 <I2C_WaitOnFlagUntilTimeout+0x32>
	return HAL_OK;
 8007fda:	2000      	movs	r0, #0
}
 8007fdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (Timeout != HAL_MAX_DELAY) {
 8007fe0:	1c7b      	adds	r3, r7, #1
 8007fe2:	d0ed      	beq.n	8007fc0 <I2C_WaitOnFlagUntilTimeout+0x12>
			if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 8007fe4:	b95f      	cbnz	r7, 8007ffe <I2C_WaitOnFlagUntilTimeout+0x50>
				hi2c->PreviousState = I2C_STATE_NONE;
 8007fe6:	2300      	movs	r3, #0
				hi2c->State = HAL_I2C_STATE_READY;
 8007fe8:	2220      	movs	r2, #32
				hi2c->PreviousState = I2C_STATE_NONE;
 8007fea:	6323      	str	r3, [r4, #48]	; 0x30
				__HAL_UNLOCK(hi2c);
 8007fec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
				hi2c->State = HAL_I2C_STATE_READY;
 8007ff0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
				__HAL_UNLOCK(hi2c);
 8007ff4:	2003      	movs	r0, #3
				hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ff6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8007ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 8007ffe:	f7fe ff57 	bl	8006eb0 <HAL_GetTick>
 8008002:	1b80      	subs	r0, r0, r6
 8008004:	4287      	cmp	r7, r0
 8008006:	d2db      	bcs.n	8007fc0 <I2C_WaitOnFlagUntilTimeout+0x12>
 8008008:	e7ed      	b.n	8007fe6 <I2C_WaitOnFlagUntilTimeout+0x38>

0800800a <I2C_WaitOnTXEFlagUntilTimeout>:
{
 800800a:	b570      	push	{r4, r5, r6, lr}
 800800c:	4604      	mov	r4, r0
 800800e:	460d      	mov	r5, r1
 8008010:	4616      	mov	r6, r2
	while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET) {
 8008012:	6823      	ldr	r3, [r4, #0]
 8008014:	695b      	ldr	r3, [r3, #20]
 8008016:	061b      	lsls	r3, r3, #24
 8008018:	d501      	bpl.n	800801e <I2C_WaitOnTXEFlagUntilTimeout+0x14>
	return HAL_OK;
 800801a:	2000      	movs	r0, #0
 800801c:	bd70      	pop	{r4, r5, r6, pc}
		if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK) {
 800801e:	4620      	mov	r0, r4
 8008020:	f7ff ff70 	bl	8007f04 <I2C_IsAcknowledgeFailed>
 8008024:	b9a8      	cbnz	r0, 8008052 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
		if (Timeout != HAL_MAX_DELAY) {
 8008026:	1c6a      	adds	r2, r5, #1
 8008028:	d0f3      	beq.n	8008012 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
			if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 800802a:	b965      	cbnz	r5, 8008046 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
				hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800802c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800802e:	f043 0320 	orr.w	r3, r3, #32
 8008032:	6423      	str	r3, [r4, #64]	; 0x40
				hi2c->State = HAL_I2C_STATE_READY;
 8008034:	2220      	movs	r2, #32
				hi2c->PreviousState = I2C_STATE_NONE;
 8008036:	2300      	movs	r3, #0
 8008038:	6323      	str	r3, [r4, #48]	; 0x30
				__HAL_UNLOCK(hi2c);
 800803a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
				hi2c->State = HAL_I2C_STATE_READY;
 800803e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
				__HAL_UNLOCK(hi2c);
 8008042:	2003      	movs	r0, #3
 8008044:	bd70      	pop	{r4, r5, r6, pc}
			if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 8008046:	f7fe ff33 	bl	8006eb0 <HAL_GetTick>
 800804a:	1b80      	subs	r0, r0, r6
 800804c:	4285      	cmp	r5, r0
 800804e:	d2e0      	bcs.n	8008012 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8008050:	e7ec      	b.n	800802c <I2C_WaitOnTXEFlagUntilTimeout+0x22>
			return HAL_ERROR;
 8008052:	2001      	movs	r0, #1
}
 8008054:	bd70      	pop	{r4, r5, r6, pc}
	...

08008058 <I2C_RequestMemoryWrite>:
{
 8008058:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800805c:	4615      	mov	r5, r2
	hi2c->Instance->CR1 |= I2C_CR1_START;
 800805e:	6802      	ldr	r2, [r0, #0]
{
 8008060:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008062:	4698      	mov	r8, r3
	hi2c->Instance->CR1 |= I2C_CR1_START;
 8008064:	6813      	ldr	r3, [r2, #0]
 8008066:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800806a:	6013      	str	r3, [r2, #0]
{
 800806c:	460f      	mov	r7, r1
	if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 800806e:	9600      	str	r6, [sp, #0]
 8008070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008072:	2200      	movs	r2, #0
 8008074:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8008078:	4604      	mov	r4, r0
	if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 800807a:	f7ff ff98 	bl	8007fae <I2C_WaitOnFlagUntilTimeout>
 800807e:	b968      	cbnz	r0, 800809c <I2C_RequestMemoryWrite+0x44>
	hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008080:	6823      	ldr	r3, [r4, #0]
	if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 8008082:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008084:	491c      	ldr	r1, [pc, #112]	; (80080f8 <I2C_RequestMemoryWrite+0xa0>)
	hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008086:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 800808a:	611f      	str	r7, [r3, #16]
	if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 800808c:	4620      	mov	r0, r4
 800808e:	4633      	mov	r3, r6
 8008090:	f7ff ff4d 	bl	8007f2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008094:	b130      	cbz	r0, 80080a4 <I2C_RequestMemoryWrite+0x4c>
		if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8008096:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008098:	2b04      	cmp	r3, #4
 800809a:	d018      	beq.n	80080ce <I2C_RequestMemoryWrite+0x76>
			return HAL_TIMEOUT;
 800809c:	2003      	movs	r0, #3
}
 800809e:	b004      	add	sp, #16
 80080a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080a4:	6823      	ldr	r3, [r4, #0]
 80080a6:	9003      	str	r0, [sp, #12]
 80080a8:	695a      	ldr	r2, [r3, #20]
 80080aa:	9203      	str	r2, [sp, #12]
 80080ac:	699b      	ldr	r3, [r3, #24]
 80080ae:	9303      	str	r3, [sp, #12]
	if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 80080b0:	4632      	mov	r2, r6
 80080b2:	990a      	ldr	r1, [sp, #40]	; 0x28
	__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080b4:	9b03      	ldr	r3, [sp, #12]
	if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 80080b6:	4620      	mov	r0, r4
 80080b8:	f7ff ffa7 	bl	800800a <I2C_WaitOnTXEFlagUntilTimeout>
 80080bc:	b148      	cbz	r0, 80080d2 <I2C_RequestMemoryWrite+0x7a>
			if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 80080be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080c0:	2b04      	cmp	r3, #4
 80080c2:	d1eb      	bne.n	800809c <I2C_RequestMemoryWrite+0x44>
				hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80080c4:	6822      	ldr	r2, [r4, #0]
 80080c6:	6813      	ldr	r3, [r2, #0]
 80080c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80080cc:	6013      	str	r3, [r2, #0]
			return HAL_ERROR;
 80080ce:	2001      	movs	r0, #1
 80080d0:	e7e5      	b.n	800809e <I2C_RequestMemoryWrite+0x46>
	if (MemAddSize == I2C_MEMADD_SIZE_8BIT) {
 80080d2:	f1b8 0f01 	cmp.w	r8, #1
 80080d6:	6823      	ldr	r3, [r4, #0]
 80080d8:	d102      	bne.n	80080e0 <I2C_RequestMemoryWrite+0x88>
		hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80080da:	b2ed      	uxtb	r5, r5
 80080dc:	611d      	str	r5, [r3, #16]
 80080de:	e7de      	b.n	800809e <I2C_RequestMemoryWrite+0x46>
		hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80080e0:	0a2a      	lsrs	r2, r5, #8
 80080e2:	611a      	str	r2, [r3, #16]
		if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 80080e4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80080e6:	4632      	mov	r2, r6
 80080e8:	4620      	mov	r0, r4
 80080ea:	f7ff ff8e 	bl	800800a <I2C_WaitOnTXEFlagUntilTimeout>
 80080ee:	2800      	cmp	r0, #0
 80080f0:	d1e5      	bne.n	80080be <I2C_RequestMemoryWrite+0x66>
		hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80080f2:	6823      	ldr	r3, [r4, #0]
 80080f4:	e7f1      	b.n	80080da <I2C_RequestMemoryWrite+0x82>
 80080f6:	bf00      	nop
 80080f8:	00010002 	.word	0x00010002

080080fc <I2C_RequestMemoryRead>:
{
 80080fc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008100:	4698      	mov	r8, r3
	hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8008102:	6803      	ldr	r3, [r0, #0]
{
 8008104:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008106:	4616      	mov	r6, r2
	hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800810e:	601a      	str	r2, [r3, #0]
	hi2c->Instance->CR1 |= I2C_CR1_START;
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008116:	601a      	str	r2, [r3, #0]
{
 8008118:	460f      	mov	r7, r1
	if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 800811a:	9500      	str	r5, [sp, #0]
 800811c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800811e:	2200      	movs	r2, #0
 8008120:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8008124:	4604      	mov	r4, r0
	if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 8008126:	f7ff ff42 	bl	8007fae <I2C_WaitOnFlagUntilTimeout>
 800812a:	b980      	cbnz	r0, 800814e <I2C_RequestMemoryRead+0x52>
	hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800812c:	6823      	ldr	r3, [r4, #0]
	if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 800812e:	492f      	ldr	r1, [pc, #188]	; (80081ec <I2C_RequestMemoryRead+0xf0>)
	hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008130:	b2ff      	uxtb	r7, r7
 8008132:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 8008136:	611a      	str	r2, [r3, #16]
	if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 8008138:	4620      	mov	r0, r4
 800813a:	462b      	mov	r3, r5
 800813c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800813e:	f7ff fef6 	bl	8007f2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008142:	b140      	cbz	r0, 8008156 <I2C_RequestMemoryRead+0x5a>
		if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8008144:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008146:	2b04      	cmp	r3, #4
 8008148:	d101      	bne.n	800814e <I2C_RequestMemoryRead+0x52>
			return HAL_ERROR;
 800814a:	2001      	movs	r0, #1
 800814c:	e000      	b.n	8008150 <I2C_RequestMemoryRead+0x54>
			return HAL_TIMEOUT;
 800814e:	2003      	movs	r0, #3
}
 8008150:	b004      	add	sp, #16
 8008152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008156:	6823      	ldr	r3, [r4, #0]
 8008158:	9003      	str	r0, [sp, #12]
 800815a:	695a      	ldr	r2, [r3, #20]
 800815c:	9203      	str	r2, [sp, #12]
 800815e:	699b      	ldr	r3, [r3, #24]
 8008160:	9303      	str	r3, [sp, #12]
	if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 8008162:	462a      	mov	r2, r5
 8008164:	990a      	ldr	r1, [sp, #40]	; 0x28
	__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008166:	9b03      	ldr	r3, [sp, #12]
	if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 8008168:	4620      	mov	r0, r4
 800816a:	f7ff ff4e 	bl	800800a <I2C_WaitOnTXEFlagUntilTimeout>
 800816e:	b140      	cbz	r0, 8008182 <I2C_RequestMemoryRead+0x86>
		if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8008170:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008172:	2b04      	cmp	r3, #4
 8008174:	d1eb      	bne.n	800814e <I2C_RequestMemoryRead+0x52>
			hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8008176:	6822      	ldr	r2, [r4, #0]
 8008178:	6813      	ldr	r3, [r2, #0]
 800817a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800817e:	6013      	str	r3, [r2, #0]
 8008180:	e7e3      	b.n	800814a <I2C_RequestMemoryRead+0x4e>
	if (MemAddSize == I2C_MEMADD_SIZE_8BIT) {
 8008182:	f1b8 0f01 	cmp.w	r8, #1
 8008186:	6823      	ldr	r3, [r4, #0]
 8008188:	d124      	bne.n	80081d4 <I2C_RequestMemoryRead+0xd8>
		hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800818a:	b2f6      	uxtb	r6, r6
 800818c:	611e      	str	r6, [r3, #16]
	if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 800818e:	462a      	mov	r2, r5
 8008190:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008192:	4620      	mov	r0, r4
 8008194:	f7ff ff39 	bl	800800a <I2C_WaitOnTXEFlagUntilTimeout>
 8008198:	4602      	mov	r2, r0
 800819a:	2800      	cmp	r0, #0
 800819c:	d1e8      	bne.n	8008170 <I2C_RequestMemoryRead+0x74>
	hi2c->Instance->CR1 |= I2C_CR1_START;
 800819e:	6821      	ldr	r1, [r4, #0]
 80081a0:	680b      	ldr	r3, [r1, #0]
 80081a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081a6:	600b      	str	r3, [r1, #0]
	if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 80081a8:	4620      	mov	r0, r4
 80081aa:	9500      	str	r5, [sp, #0]
 80081ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80081b2:	f7ff fefc 	bl	8007fae <I2C_WaitOnFlagUntilTimeout>
 80081b6:	2800      	cmp	r0, #0
 80081b8:	d1c9      	bne.n	800814e <I2C_RequestMemoryRead+0x52>
	hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80081ba:	6823      	ldr	r3, [r4, #0]
	if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 80081bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081be:	490b      	ldr	r1, [pc, #44]	; (80081ec <I2C_RequestMemoryRead+0xf0>)
	hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80081c0:	f047 0701 	orr.w	r7, r7, #1
 80081c4:	611f      	str	r7, [r3, #16]
	if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 80081c6:	4620      	mov	r0, r4
 80081c8:	462b      	mov	r3, r5
 80081ca:	f7ff feb0 	bl	8007f2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80081ce:	2800      	cmp	r0, #0
 80081d0:	d1b8      	bne.n	8008144 <I2C_RequestMemoryRead+0x48>
 80081d2:	e7bd      	b.n	8008150 <I2C_RequestMemoryRead+0x54>
		hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80081d4:	0a32      	lsrs	r2, r6, #8
 80081d6:	611a      	str	r2, [r3, #16]
		if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 80081d8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80081da:	462a      	mov	r2, r5
 80081dc:	4620      	mov	r0, r4
 80081de:	f7ff ff14 	bl	800800a <I2C_WaitOnTXEFlagUntilTimeout>
 80081e2:	2800      	cmp	r0, #0
 80081e4:	d1c4      	bne.n	8008170 <I2C_RequestMemoryRead+0x74>
		hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80081e6:	6823      	ldr	r3, [r4, #0]
 80081e8:	e7cf      	b.n	800818a <I2C_RequestMemoryRead+0x8e>
 80081ea:	bf00      	nop
 80081ec:	00010002 	.word	0x00010002

080081f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80081f0:	b570      	push	{r4, r5, r6, lr}
 80081f2:	4604      	mov	r4, r0
 80081f4:	460d      	mov	r5, r1
 80081f6:	4616      	mov	r6, r2
	while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) {
 80081f8:	6820      	ldr	r0, [r4, #0]
 80081fa:	6943      	ldr	r3, [r0, #20]
 80081fc:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8008200:	d001      	beq.n	8008206 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
	return HAL_OK;
 8008202:	2000      	movs	r0, #0
}
 8008204:	bd70      	pop	{r4, r5, r6, pc}
		if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) {
 8008206:	6942      	ldr	r2, [r0, #20]
 8008208:	06d2      	lsls	r2, r2, #27
 800820a:	d50b      	bpl.n	8008224 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
			__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800820c:	f06f 0210 	mvn.w	r2, #16
 8008210:	6142      	str	r2, [r0, #20]
			hi2c->State = HAL_I2C_STATE_READY;
 8008212:	2220      	movs	r2, #32
			hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008214:	6423      	str	r3, [r4, #64]	; 0x40
			__HAL_UNLOCK(hi2c);
 8008216:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			hi2c->PreviousState = I2C_STATE_NONE;
 800821a:	6323      	str	r3, [r4, #48]	; 0x30
			return HAL_ERROR;
 800821c:	2001      	movs	r0, #1
			hi2c->State = HAL_I2C_STATE_READY;
 800821e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
			return HAL_ERROR;
 8008222:	bd70      	pop	{r4, r5, r6, pc}
		if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 8008224:	b95d      	cbnz	r5, 800823e <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
			hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008226:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008228:	f043 0320 	orr.w	r3, r3, #32
 800822c:	6423      	str	r3, [r4, #64]	; 0x40
			hi2c->State = HAL_I2C_STATE_READY;
 800822e:	2320      	movs	r3, #32
 8008230:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
			__HAL_UNLOCK(hi2c);
 8008234:	2300      	movs	r3, #0
 8008236:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800823a:	2003      	movs	r0, #3
 800823c:	bd70      	pop	{r4, r5, r6, pc}
		if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 800823e:	f7fe fe37 	bl	8006eb0 <HAL_GetTick>
 8008242:	1b80      	subs	r0, r0, r6
 8008244:	4285      	cmp	r5, r0
 8008246:	d2d7      	bcs.n	80081f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8008248:	e7ed      	b.n	8008226 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

0800824a <I2C_WaitOnBTFFlagUntilTimeout>:
{
 800824a:	b570      	push	{r4, r5, r6, lr}
 800824c:	4604      	mov	r4, r0
 800824e:	460d      	mov	r5, r1
 8008250:	4616      	mov	r6, r2
	while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET) {
 8008252:	6823      	ldr	r3, [r4, #0]
 8008254:	695b      	ldr	r3, [r3, #20]
 8008256:	075b      	lsls	r3, r3, #29
 8008258:	d501      	bpl.n	800825e <I2C_WaitOnBTFFlagUntilTimeout+0x14>
	return HAL_OK;
 800825a:	2000      	movs	r0, #0
 800825c:	bd70      	pop	{r4, r5, r6, pc}
		if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK) {
 800825e:	4620      	mov	r0, r4
 8008260:	f7ff fe50 	bl	8007f04 <I2C_IsAcknowledgeFailed>
 8008264:	b9a8      	cbnz	r0, 8008292 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
		if (Timeout != HAL_MAX_DELAY) {
 8008266:	1c6a      	adds	r2, r5, #1
 8008268:	d0f3      	beq.n	8008252 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
			if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 800826a:	b965      	cbnz	r5, 8008286 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
				hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800826c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800826e:	f043 0320 	orr.w	r3, r3, #32
 8008272:	6423      	str	r3, [r4, #64]	; 0x40
				hi2c->State = HAL_I2C_STATE_READY;
 8008274:	2220      	movs	r2, #32
				hi2c->PreviousState = I2C_STATE_NONE;
 8008276:	2300      	movs	r3, #0
 8008278:	6323      	str	r3, [r4, #48]	; 0x30
				__HAL_UNLOCK(hi2c);
 800827a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
				hi2c->State = HAL_I2C_STATE_READY;
 800827e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
				__HAL_UNLOCK(hi2c);
 8008282:	2003      	movs	r0, #3
 8008284:	bd70      	pop	{r4, r5, r6, pc}
			if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 8008286:	f7fe fe13 	bl	8006eb0 <HAL_GetTick>
 800828a:	1b80      	subs	r0, r0, r6
 800828c:	4285      	cmp	r5, r0
 800828e:	d2e0      	bcs.n	8008252 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8008290:	e7ec      	b.n	800826c <I2C_WaitOnBTFFlagUntilTimeout+0x22>
			return HAL_ERROR;
 8008292:	2001      	movs	r0, #1
}
 8008294:	bd70      	pop	{r4, r5, r6, pc}
	...

08008298 <HAL_I2C_Init>:
{
 8008298:	b570      	push	{r4, r5, r6, lr}
	if (hi2c == NULL) {
 800829a:	4604      	mov	r4, r0
 800829c:	2800      	cmp	r0, #0
 800829e:	f000 80c1 	beq.w	8008424 <HAL_I2C_Init+0x18c>
	assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80082a2:	6803      	ldr	r3, [r0, #0]
 80082a4:	4a60      	ldr	r2, [pc, #384]	; (8008428 <HAL_I2C_Init+0x190>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d00c      	beq.n	80082c4 <HAL_I2C_Init+0x2c>
 80082aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d008      	beq.n	80082c4 <HAL_I2C_Init+0x2c>
 80082b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d004      	beq.n	80082c4 <HAL_I2C_Init+0x2c>
 80082ba:	f240 116d 	movw	r1, #365	; 0x16d
 80082be:	485b      	ldr	r0, [pc, #364]	; (800842c <HAL_I2C_Init+0x194>)
 80082c0:	f004 fc46 	bl	800cb50 <assert_failed>
	assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80082c4:	6863      	ldr	r3, [r4, #4]
 80082c6:	4a5a      	ldr	r2, [pc, #360]	; (8008430 <HAL_I2C_Init+0x198>)
 80082c8:	3b01      	subs	r3, #1
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d904      	bls.n	80082d8 <HAL_I2C_Init+0x40>
 80082ce:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 80082d2:	4856      	ldr	r0, [pc, #344]	; (800842c <HAL_I2C_Init+0x194>)
 80082d4:	f004 fc3c 	bl	800cb50 <assert_failed>
	assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 80082d8:	68a3      	ldr	r3, [r4, #8]
 80082da:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 80082de:	d004      	beq.n	80082ea <HAL_I2C_Init+0x52>
 80082e0:	f240 116f 	movw	r1, #367	; 0x16f
 80082e4:	4851      	ldr	r0, [pc, #324]	; (800842c <HAL_I2C_Init+0x194>)
 80082e6:	f004 fc33 	bl	800cb50 <assert_failed>
	assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80082ea:	68e3      	ldr	r3, [r4, #12]
 80082ec:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80082f0:	f023 0303 	bic.w	r3, r3, #3
 80082f4:	b123      	cbz	r3, 8008300 <HAL_I2C_Init+0x68>
 80082f6:	f44f 71b8 	mov.w	r1, #368	; 0x170
 80082fa:	484c      	ldr	r0, [pc, #304]	; (800842c <HAL_I2C_Init+0x194>)
 80082fc:	f004 fc28 	bl	800cb50 <assert_failed>
	assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8008300:	6923      	ldr	r3, [r4, #16]
 8008302:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008306:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800830a:	d004      	beq.n	8008316 <HAL_I2C_Init+0x7e>
 800830c:	f240 1171 	movw	r1, #369	; 0x171
 8008310:	4846      	ldr	r0, [pc, #280]	; (800842c <HAL_I2C_Init+0x194>)
 8008312:	f004 fc1d 	bl	800cb50 <assert_failed>
	assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8008316:	6963      	ldr	r3, [r4, #20]
 8008318:	2b01      	cmp	r3, #1
 800831a:	d904      	bls.n	8008326 <HAL_I2C_Init+0x8e>
 800831c:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8008320:	4842      	ldr	r0, [pc, #264]	; (800842c <HAL_I2C_Init+0x194>)
 8008322:	f004 fc15 	bl	800cb50 <assert_failed>
	assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8008326:	69a3      	ldr	r3, [r4, #24]
 8008328:	f033 03fe 	bics.w	r3, r3, #254	; 0xfe
 800832c:	d004      	beq.n	8008338 <HAL_I2C_Init+0xa0>
 800832e:	f240 1173 	movw	r1, #371	; 0x173
 8008332:	483e      	ldr	r0, [pc, #248]	; (800842c <HAL_I2C_Init+0x194>)
 8008334:	f004 fc0c 	bl	800cb50 <assert_failed>
	assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8008338:	69e3      	ldr	r3, [r4, #28]
 800833a:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 800833e:	d004      	beq.n	800834a <HAL_I2C_Init+0xb2>
 8008340:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8008344:	4839      	ldr	r0, [pc, #228]	; (800842c <HAL_I2C_Init+0x194>)
 8008346:	f004 fc03 	bl	800cb50 <assert_failed>
	assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800834a:	6a23      	ldr	r3, [r4, #32]
 800834c:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8008350:	d004      	beq.n	800835c <HAL_I2C_Init+0xc4>
 8008352:	f240 1175 	movw	r1, #373	; 0x175
 8008356:	4835      	ldr	r0, [pc, #212]	; (800842c <HAL_I2C_Init+0x194>)
 8008358:	f004 fbfa 	bl	800cb50 <assert_failed>
	if (hi2c->State == HAL_I2C_STATE_RESET) {
 800835c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8008360:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008364:	b923      	cbnz	r3, 8008370 <HAL_I2C_Init+0xd8>
		hi2c->Lock = HAL_UNLOCKED;
 8008366:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
		HAL_I2C_MspInit(hi2c);
 800836a:	4620      	mov	r0, r4
 800836c:	f003 fe4e 	bl	800c00c <HAL_I2C_MspInit>
	__HAL_I2C_DISABLE(hi2c);
 8008370:	6822      	ldr	r2, [r4, #0]
	hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8008372:	4e30      	ldr	r6, [pc, #192]	; (8008434 <HAL_I2C_Init+0x19c>)
	freqrange = I2C_FREQRANGE(pclk1);
 8008374:	4d30      	ldr	r5, [pc, #192]	; (8008438 <HAL_I2C_Init+0x1a0>)
	hi2c->State = HAL_I2C_STATE_BUSY;
 8008376:	2324      	movs	r3, #36	; 0x24
 8008378:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	__HAL_I2C_DISABLE(hi2c);
 800837c:	6813      	ldr	r3, [r2, #0]
 800837e:	f023 0301 	bic.w	r3, r3, #1
 8008382:	6013      	str	r3, [r2, #0]
	pclk1 = HAL_RCC_GetPCLK1Freq();
 8008384:	f001 fcbc 	bl	8009d00 <HAL_RCC_GetPCLK1Freq>
	hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8008388:	6863      	ldr	r3, [r4, #4]
	hi2c->Instance->CR2 = freqrange;
 800838a:	6822      	ldr	r2, [r4, #0]
	freqrange = I2C_FREQRANGE(pclk1);
 800838c:	fbb0 f5f5 	udiv	r5, r0, r5
	hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8008390:	42b3      	cmp	r3, r6
 8008392:	bf84      	itt	hi
 8008394:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 8008398:	4369      	mulhi	r1, r5
	hi2c->Instance->CR2 = freqrange;
 800839a:	6055      	str	r5, [r2, #4]
	hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800839c:	bf91      	iteee	ls
 800839e:	1c69      	addls	r1, r5, #1
 80083a0:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 80083a4:	fbb1 f1f5 	udivhi	r1, r1, r5
 80083a8:	3101      	addhi	r1, #1
	hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80083aa:	42b3      	cmp	r3, r6
	hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80083ac:	6211      	str	r1, [r2, #32]
	hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80083ae:	d821      	bhi.n	80083f4 <HAL_I2C_Init+0x15c>
 80083b0:	005b      	lsls	r3, r3, #1
 80083b2:	fbb0 f0f3 	udiv	r0, r0, r3
 80083b6:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80083ba:	2b03      	cmp	r3, #3
 80083bc:	bf98      	it	ls
 80083be:	2004      	movls	r0, #4
	hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80083c0:	6a21      	ldr	r1, [r4, #32]
 80083c2:	69e3      	ldr	r3, [r4, #28]
	hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80083c4:	61d0      	str	r0, [r2, #28]
	hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80083c6:	430b      	orrs	r3, r1
 80083c8:	6013      	str	r3, [r2, #0]
	hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80083ca:	68e1      	ldr	r1, [r4, #12]
 80083cc:	6923      	ldr	r3, [r4, #16]
 80083ce:	430b      	orrs	r3, r1
 80083d0:	6093      	str	r3, [r2, #8]
	hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80083d2:	69a1      	ldr	r1, [r4, #24]
 80083d4:	6963      	ldr	r3, [r4, #20]
 80083d6:	430b      	orrs	r3, r1
 80083d8:	60d3      	str	r3, [r2, #12]
	__HAL_I2C_ENABLE(hi2c);
 80083da:	6813      	ldr	r3, [r2, #0]
 80083dc:	f043 0301 	orr.w	r3, r3, #1
 80083e0:	6013      	str	r3, [r2, #0]
	hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80083e2:	2000      	movs	r0, #0
	hi2c->State = HAL_I2C_STATE_READY;
 80083e4:	2320      	movs	r3, #32
	hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80083e6:	6420      	str	r0, [r4, #64]	; 0x40
	hi2c->State = HAL_I2C_STATE_READY;
 80083e8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	hi2c->PreviousState = I2C_STATE_NONE;
 80083ec:	6320      	str	r0, [r4, #48]	; 0x30
	hi2c->Mode = HAL_I2C_MODE_NONE;
 80083ee:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
	return HAL_OK;
 80083f2:	bd70      	pop	{r4, r5, r6, pc}
	hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80083f4:	68a1      	ldr	r1, [r4, #8]
 80083f6:	b949      	cbnz	r1, 800840c <HAL_I2C_Init+0x174>
 80083f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80083fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8008400:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8008404:	b163      	cbz	r3, 8008420 <HAL_I2C_Init+0x188>
 8008406:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 800840a:	e7d9      	b.n	80083c0 <HAL_I2C_Init+0x128>
 800840c:	2119      	movs	r1, #25
 800840e:	434b      	muls	r3, r1
 8008410:	fbb0 f0f3 	udiv	r0, r0, r3
 8008414:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8008418:	b113      	cbz	r3, 8008420 <HAL_I2C_Init+0x188>
 800841a:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 800841e:	e7cf      	b.n	80083c0 <HAL_I2C_Init+0x128>
 8008420:	2001      	movs	r0, #1
 8008422:	e7cd      	b.n	80083c0 <HAL_I2C_Init+0x128>
		return HAL_ERROR;
 8008424:	2001      	movs	r0, #1
}
 8008426:	bd70      	pop	{r4, r5, r6, pc}
 8008428:	40005400 	.word	0x40005400
 800842c:	0801d8a8 	.word	0x0801d8a8
 8008430:	00061a7f 	.word	0x00061a7f
 8008434:	000186a0 	.word	0x000186a0
 8008438:	000f4240 	.word	0x000f4240

0800843c <HAL_I2C_DeInit>:
{
 800843c:	b510      	push	{r4, lr}
	if (hi2c == NULL) {
 800843e:	4604      	mov	r4, r0
 8008440:	b328      	cbz	r0, 800848e <HAL_I2C_DeInit+0x52>
	assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8008442:	6803      	ldr	r3, [r0, #0]
 8008444:	4a13      	ldr	r2, [pc, #76]	; (8008494 <HAL_I2C_DeInit+0x58>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d00c      	beq.n	8008464 <HAL_I2C_DeInit+0x28>
 800844a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800844e:	4293      	cmp	r3, r2
 8008450:	d008      	beq.n	8008464 <HAL_I2C_DeInit+0x28>
 8008452:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008456:	4293      	cmp	r3, r2
 8008458:	d004      	beq.n	8008464 <HAL_I2C_DeInit+0x28>
 800845a:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
 800845e:	480e      	ldr	r0, [pc, #56]	; (8008498 <HAL_I2C_DeInit+0x5c>)
 8008460:	f004 fb76 	bl	800cb50 <assert_failed>
	__HAL_I2C_DISABLE(hi2c);
 8008464:	6822      	ldr	r2, [r4, #0]
	hi2c->State = HAL_I2C_STATE_BUSY;
 8008466:	2324      	movs	r3, #36	; 0x24
 8008468:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	__HAL_I2C_DISABLE(hi2c);
 800846c:	6813      	ldr	r3, [r2, #0]
 800846e:	f023 0301 	bic.w	r3, r3, #1
	HAL_I2C_MspDeInit(hi2c);
 8008472:	4620      	mov	r0, r4
	__HAL_I2C_DISABLE(hi2c);
 8008474:	6013      	str	r3, [r2, #0]
	HAL_I2C_MspDeInit(hi2c);
 8008476:	f003 fe4d 	bl	800c114 <HAL_I2C_MspDeInit>
	hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800847a:	2000      	movs	r0, #0
 800847c:	6420      	str	r0, [r4, #64]	; 0x40
	__HAL_UNLOCK(hi2c);
 800847e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
	hi2c->State = HAL_I2C_STATE_RESET;
 8008482:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
	hi2c->PreviousState = I2C_STATE_NONE;
 8008486:	6320      	str	r0, [r4, #48]	; 0x30
	hi2c->Mode = HAL_I2C_MODE_NONE;
 8008488:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
	return HAL_OK;
 800848c:	bd10      	pop	{r4, pc}
		return HAL_ERROR;
 800848e:	2001      	movs	r0, #1
}
 8008490:	bd10      	pop	{r4, pc}
 8008492:	bf00      	nop
 8008494:	40005400 	.word	0x40005400
 8008498:	0801d8a8 	.word	0x0801d8a8

0800849c <HAL_I2C_Master_Transmit>:
{
 800849c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80084a0:	4604      	mov	r4, r0
 80084a2:	461f      	mov	r7, r3
 80084a4:	460d      	mov	r5, r1
 80084a6:	4690      	mov	r8, r2
	tickstart = HAL_GetTick();
 80084a8:	f7fe fd02 	bl	8006eb0 <HAL_GetTick>
	if (hi2c->State == HAL_I2C_STATE_READY) {
 80084ac:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80084b0:	2b20      	cmp	r3, #32
	tickstart = HAL_GetTick();
 80084b2:	4606      	mov	r6, r0
	if (hi2c->State == HAL_I2C_STATE_READY) {
 80084b4:	d004      	beq.n	80084c0 <HAL_I2C_Master_Transmit+0x24>
		return HAL_BUSY;
 80084b6:	2502      	movs	r5, #2
}
 80084b8:	4628      	mov	r0, r5
 80084ba:	b004      	add	sp, #16
 80084bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK) {
 80084c0:	9000      	str	r0, [sp, #0]
 80084c2:	2319      	movs	r3, #25
 80084c4:	2201      	movs	r2, #1
 80084c6:	495d      	ldr	r1, [pc, #372]	; (800863c <HAL_I2C_Master_Transmit+0x1a0>)
 80084c8:	4620      	mov	r0, r4
 80084ca:	f7ff fd70 	bl	8007fae <I2C_WaitOnFlagUntilTimeout>
 80084ce:	2800      	cmp	r0, #0
 80084d0:	d1f1      	bne.n	80084b6 <HAL_I2C_Master_Transmit+0x1a>
		__HAL_LOCK(hi2c);
 80084d2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d0ed      	beq.n	80084b6 <HAL_I2C_Master_Transmit+0x1a>
 80084da:	2301      	movs	r3, #1
 80084dc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE) {
 80084e0:	6823      	ldr	r3, [r4, #0]
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	07d2      	lsls	r2, r2, #31
			__HAL_I2C_ENABLE(hi2c);
 80084e6:	bf5e      	ittt	pl
 80084e8:	681a      	ldrpl	r2, [r3, #0]
 80084ea:	f042 0201 	orrpl.w	r2, r2, #1
 80084ee:	601a      	strpl	r2, [r3, #0]
		hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80084f6:	601a      	str	r2, [r3, #0]
		hi2c->State = HAL_I2C_STATE_BUSY_TX;
 80084f8:	2221      	movs	r2, #33	; 0x21
 80084fa:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_MASTER;
 80084fe:	2210      	movs	r2, #16
 8008500:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
		hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008504:	2200      	movs	r2, #0
 8008506:	6422      	str	r2, [r4, #64]	; 0x40
		hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008508:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
		hi2c->XferCount = Size;
 800850c:	8567      	strh	r7, [r4, #42]	; 0x2a
		hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800850e:	62e2      	str	r2, [r4, #44]	; 0x2c
		hi2c->XferSize = hi2c->XferCount;
 8008510:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8008512:	8522      	strh	r2, [r4, #40]	; 0x28
	uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008514:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		hi2c->pBuffPtr = pData;
 8008516:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
	if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME)) {
 800851a:	2a04      	cmp	r2, #4
 800851c:	d004      	beq.n	8008528 <HAL_I2C_Master_Transmit+0x8c>
 800851e:	2a01      	cmp	r2, #1
 8008520:	d002      	beq.n	8008528 <HAL_I2C_Master_Transmit+0x8c>
 8008522:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8008526:	d104      	bne.n	8008532 <HAL_I2C_Master_Transmit+0x96>
		hi2c->Instance->CR1 |= I2C_CR1_START;
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800852e:	601a      	str	r2, [r3, #0]
 8008530:	e002      	b.n	8008538 <HAL_I2C_Master_Transmit+0x9c>
	}else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) {
 8008532:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008534:	2a12      	cmp	r2, #18
 8008536:	d0f7      	beq.n	8008528 <HAL_I2C_Master_Transmit+0x8c>
	if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 8008538:	9600      	str	r6, [sp, #0]
 800853a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800853c:	2200      	movs	r2, #0
 800853e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008542:	4620      	mov	r0, r4
 8008544:	f7ff fd33 	bl	8007fae <I2C_WaitOnFlagUntilTimeout>
 8008548:	bb28      	cbnz	r0, 8008596 <HAL_I2C_Master_Transmit+0xfa>
	if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT) {
 800854a:	6923      	ldr	r3, [r4, #16]
 800854c:	6822      	ldr	r2, [r4, #0]
 800854e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008552:	d112      	bne.n	800857a <HAL_I2C_Master_Transmit+0xde>
		hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008554:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8008558:	6115      	str	r5, [r2, #16]
	if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 800855a:	4633      	mov	r3, r6
 800855c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800855e:	4938      	ldr	r1, [pc, #224]	; (8008640 <HAL_I2C_Master_Transmit+0x1a4>)
 8008560:	4620      	mov	r0, r4
 8008562:	f7ff fce4 	bl	8007f2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008566:	4605      	mov	r5, r0
 8008568:	b9a0      	cbnz	r0, 8008594 <HAL_I2C_Master_Transmit+0xf8>
		__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800856a:	6823      	ldr	r3, [r4, #0]
 800856c:	9003      	str	r0, [sp, #12]
 800856e:	695a      	ldr	r2, [r3, #20]
 8008570:	9203      	str	r2, [sp, #12]
 8008572:	699b      	ldr	r3, [r3, #24]
 8008574:	9303      	str	r3, [sp, #12]
 8008576:	9b03      	ldr	r3, [sp, #12]
		while (hi2c->XferSize > 0U) {
 8008578:	e050      	b.n	800861c <HAL_I2C_Master_Transmit+0x180>
		hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800857a:	11eb      	asrs	r3, r5, #7
 800857c:	f003 0306 	and.w	r3, r3, #6
 8008580:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8008584:	6113      	str	r3, [r2, #16]
		if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK) {
 8008586:	492f      	ldr	r1, [pc, #188]	; (8008644 <HAL_I2C_Master_Transmit+0x1a8>)
 8008588:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800858a:	4633      	mov	r3, r6
 800858c:	4620      	mov	r0, r4
 800858e:	f7ff fcce 	bl	8007f2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008592:	b148      	cbz	r0, 80085a8 <HAL_I2C_Master_Transmit+0x10c>
		if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8008594:	6c23      	ldr	r3, [r4, #64]	; 0x40
			if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8008596:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008598:	2b04      	cmp	r3, #4
 800859a:	f04f 0300 	mov.w	r3, #0
 800859e:	d107      	bne.n	80085b0 <HAL_I2C_Master_Transmit+0x114>
				__HAL_UNLOCK(hi2c);
 80085a0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
					return HAL_ERROR;
 80085a4:	2501      	movs	r5, #1
 80085a6:	e787      	b.n	80084b8 <HAL_I2C_Master_Transmit+0x1c>
		hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80085a8:	6823      	ldr	r3, [r4, #0]
 80085aa:	b2ed      	uxtb	r5, r5
 80085ac:	611d      	str	r5, [r3, #16]
 80085ae:	e7d4      	b.n	800855a <HAL_I2C_Master_Transmit+0xbe>
				__HAL_UNLOCK(hi2c);
 80085b0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
					return HAL_TIMEOUT;
 80085b4:	2503      	movs	r5, #3
 80085b6:	e77f      	b.n	80084b8 <HAL_I2C_Master_Transmit+0x1c>
			if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 80085b8:	4632      	mov	r2, r6
 80085ba:	990a      	ldr	r1, [sp, #40]	; 0x28
 80085bc:	4620      	mov	r0, r4
 80085be:	f7ff fd24 	bl	800800a <I2C_WaitOnTXEFlagUntilTimeout>
 80085c2:	b140      	cbz	r0, 80085d6 <HAL_I2C_Master_Transmit+0x13a>
				if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 80085c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80085c6:	2b04      	cmp	r3, #4
 80085c8:	d1f4      	bne.n	80085b4 <HAL_I2C_Master_Transmit+0x118>
					hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80085ca:	6822      	ldr	r2, [r4, #0]
 80085cc:	6813      	ldr	r3, [r2, #0]
 80085ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80085d2:	6013      	str	r3, [r2, #0]
 80085d4:	e7e6      	b.n	80085a4 <HAL_I2C_Master_Transmit+0x108>
			hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80085d6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80085d8:	6820      	ldr	r0, [r4, #0]
			hi2c->XferSize--;
 80085da:	8d22      	ldrh	r2, [r4, #40]	; 0x28
			hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80085dc:	1c4b      	adds	r3, r1, #1
 80085de:	6263      	str	r3, [r4, #36]	; 0x24
 80085e0:	780b      	ldrb	r3, [r1, #0]
 80085e2:	6103      	str	r3, [r0, #16]
			hi2c->XferCount--;
 80085e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80085e6:	3b01      	subs	r3, #1
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	8563      	strh	r3, [r4, #42]	; 0x2a
			if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U)) {
 80085ec:	6947      	ldr	r7, [r0, #20]
			hi2c->XferSize--;
 80085ee:	1e53      	subs	r3, r2, #1
 80085f0:	b29b      	uxth	r3, r3
			if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U)) {
 80085f2:	077f      	lsls	r7, r7, #29
			hi2c->XferSize--;
 80085f4:	8523      	strh	r3, [r4, #40]	; 0x28
			if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U)) {
 80085f6:	d50a      	bpl.n	800860e <HAL_I2C_Master_Transmit+0x172>
 80085f8:	b14b      	cbz	r3, 800860e <HAL_I2C_Master_Transmit+0x172>
				hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80085fa:	1c8b      	adds	r3, r1, #2
 80085fc:	6263      	str	r3, [r4, #36]	; 0x24
 80085fe:	784b      	ldrb	r3, [r1, #1]
 8008600:	6103      	str	r3, [r0, #16]
				hi2c->XferCount--;
 8008602:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008604:	3b01      	subs	r3, #1
 8008606:	b29b      	uxth	r3, r3
				hi2c->XferSize--;
 8008608:	3a02      	subs	r2, #2
				hi2c->XferCount--;
 800860a:	8563      	strh	r3, [r4, #42]	; 0x2a
				hi2c->XferSize--;
 800860c:	8522      	strh	r2, [r4, #40]	; 0x28
			if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 800860e:	4632      	mov	r2, r6
 8008610:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008612:	4620      	mov	r0, r4
 8008614:	f7ff fe19 	bl	800824a <I2C_WaitOnBTFFlagUntilTimeout>
 8008618:	2800      	cmp	r0, #0
 800861a:	d1d3      	bne.n	80085c4 <HAL_I2C_Master_Transmit+0x128>
		while (hi2c->XferSize > 0U) {
 800861c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800861e:	2b00      	cmp	r3, #0
 8008620:	d1ca      	bne.n	80085b8 <HAL_I2C_Master_Transmit+0x11c>
		hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8008622:	6821      	ldr	r1, [r4, #0]
 8008624:	680a      	ldr	r2, [r1, #0]
 8008626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800862a:	600a      	str	r2, [r1, #0]
		hi2c->State = HAL_I2C_STATE_READY;
 800862c:	2220      	movs	r2, #32
 800862e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
		__HAL_UNLOCK(hi2c);
 8008632:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		hi2c->Mode = HAL_I2C_MODE_NONE;
 8008636:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		return HAL_OK;
 800863a:	e73d      	b.n	80084b8 <HAL_I2C_Master_Transmit+0x1c>
 800863c:	00100002 	.word	0x00100002
 8008640:	00010002 	.word	0x00010002
 8008644:	00010008 	.word	0x00010008

08008648 <HAL_I2C_Master_Receive>:
{
 8008648:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800864c:	4604      	mov	r4, r0
 800864e:	b089      	sub	sp, #36	; 0x24
 8008650:	4698      	mov	r8, r3
 8008652:	460d      	mov	r5, r1
 8008654:	4691      	mov	r9, r2
 8008656:	9f10      	ldr	r7, [sp, #64]	; 0x40
	tickstart = HAL_GetTick();
 8008658:	f7fe fc2a 	bl	8006eb0 <HAL_GetTick>
	if (hi2c->State == HAL_I2C_STATE_READY) {
 800865c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8008660:	2b20      	cmp	r3, #32
	tickstart = HAL_GetTick();
 8008662:	4606      	mov	r6, r0
	if (hi2c->State == HAL_I2C_STATE_READY) {
 8008664:	d004      	beq.n	8008670 <HAL_I2C_Master_Receive+0x28>
		return HAL_BUSY;
 8008666:	2502      	movs	r5, #2
}
 8008668:	4628      	mov	r0, r5
 800866a:	b009      	add	sp, #36	; 0x24
 800866c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK) {
 8008670:	9000      	str	r0, [sp, #0]
 8008672:	2319      	movs	r3, #25
 8008674:	2201      	movs	r2, #1
 8008676:	499c      	ldr	r1, [pc, #624]	; (80088e8 <HAL_I2C_Master_Receive+0x2a0>)
 8008678:	4620      	mov	r0, r4
 800867a:	f7ff fc98 	bl	8007fae <I2C_WaitOnFlagUntilTimeout>
 800867e:	2800      	cmp	r0, #0
 8008680:	d1f1      	bne.n	8008666 <HAL_I2C_Master_Receive+0x1e>
		__HAL_LOCK(hi2c);
 8008682:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8008686:	2b01      	cmp	r3, #1
 8008688:	d0ed      	beq.n	8008666 <HAL_I2C_Master_Receive+0x1e>
 800868a:	2301      	movs	r3, #1
 800868c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE) {
 8008690:	6823      	ldr	r3, [r4, #0]
 8008692:	681a      	ldr	r2, [r3, #0]
 8008694:	07d2      	lsls	r2, r2, #31
			__HAL_I2C_ENABLE(hi2c);
 8008696:	bf5e      	ittt	pl
 8008698:	681a      	ldrpl	r2, [r3, #0]
 800869a:	f042 0201 	orrpl.w	r2, r2, #1
 800869e:	601a      	strpl	r2, [r3, #0]
		hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80086a0:	681a      	ldr	r2, [r3, #0]
 80086a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80086a6:	601a      	str	r2, [r3, #0]
		hi2c->State = HAL_I2C_STATE_BUSY_RX;
 80086a8:	2222      	movs	r2, #34	; 0x22
 80086aa:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_MASTER;
 80086ae:	2210      	movs	r2, #16
 80086b0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
		hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80086b4:	2200      	movs	r2, #0
 80086b6:	6422      	str	r2, [r4, #64]	; 0x40
		hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80086b8:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
		hi2c->XferCount = Size;
 80086bc:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
		hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80086c0:	62e2      	str	r2, [r4, #44]	; 0x2c
		hi2c->XferSize = hi2c->XferCount;
 80086c2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80086c4:	8522      	strh	r2, [r4, #40]	; 0x28
	uint32_t CurrentXferOptions = hi2c->XferOptions;
 80086c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80086c8:	6819      	ldr	r1, [r3, #0]
		hi2c->pBuffPtr = pData;
 80086ca:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
	hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80086ce:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
	if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME)) {
 80086d2:	2a04      	cmp	r2, #4
	hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80086d4:	6019      	str	r1, [r3, #0]
	if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME)) {
 80086d6:	d004      	beq.n	80086e2 <HAL_I2C_Master_Receive+0x9a>
 80086d8:	2a01      	cmp	r2, #1
 80086da:	d002      	beq.n	80086e2 <HAL_I2C_Master_Receive+0x9a>
 80086dc:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80086e0:	d104      	bne.n	80086ec <HAL_I2C_Master_Receive+0xa4>
		hi2c->Instance->CR1 |= I2C_CR1_START;
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086e8:	601a      	str	r2, [r3, #0]
 80086ea:	e002      	b.n	80086f2 <HAL_I2C_Master_Receive+0xaa>
	}else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) {
 80086ec:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80086ee:	2a11      	cmp	r2, #17
 80086f0:	d0f7      	beq.n	80086e2 <HAL_I2C_Master_Receive+0x9a>
	if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 80086f2:	9600      	str	r6, [sp, #0]
 80086f4:	463b      	mov	r3, r7
 80086f6:	2200      	movs	r2, #0
 80086f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80086fc:	4620      	mov	r0, r4
 80086fe:	f7ff fc56 	bl	8007fae <I2C_WaitOnFlagUntilTimeout>
 8008702:	2800      	cmp	r0, #0
 8008704:	d14a      	bne.n	800879c <HAL_I2C_Master_Receive+0x154>
	if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT) {
 8008706:	6923      	ldr	r3, [r4, #16]
 8008708:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800870c:	6823      	ldr	r3, [r4, #0]
 800870e:	d136      	bne.n	800877e <HAL_I2C_Master_Receive+0x136>
		hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008710:	f045 0501 	orr.w	r5, r5, #1
 8008714:	b2ed      	uxtb	r5, r5
 8008716:	611d      	str	r5, [r3, #16]
	if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 8008718:	4633      	mov	r3, r6
 800871a:	463a      	mov	r2, r7
 800871c:	4973      	ldr	r1, [pc, #460]	; (80088ec <HAL_I2C_Master_Receive+0x2a4>)
 800871e:	4620      	mov	r0, r4
 8008720:	f7ff fc05 	bl	8007f2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008724:	4605      	mov	r5, r0
 8008726:	2800      	cmp	r0, #0
 8008728:	d137      	bne.n	800879a <HAL_I2C_Master_Receive+0x152>
		if (hi2c->XferSize == 0U) {
 800872a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800872c:	6823      	ldr	r3, [r4, #0]
 800872e:	2a00      	cmp	r2, #0
 8008730:	d066      	beq.n	8008800 <HAL_I2C_Master_Receive+0x1b8>
		}else if (hi2c->XferSize == 1U) {
 8008732:	2a01      	cmp	r2, #1
 8008734:	d177      	bne.n	8008826 <HAL_I2C_Master_Receive+0x1de>
			hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800873c:	601a      	str	r2, [r3, #0]
			__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800873e:	9504      	str	r5, [sp, #16]
 8008740:	695a      	ldr	r2, [r3, #20]
 8008742:	9204      	str	r2, [sp, #16]
 8008744:	699a      	ldr	r2, [r3, #24]
 8008746:	9204      	str	r2, [sp, #16]
 8008748:	9a04      	ldr	r2, [sp, #16]
			hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008750:	601a      	str	r2, [r3, #0]
					if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 8008752:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80088f4 <HAL_I2C_Master_Receive+0x2ac>
		while (hi2c->XferSize > 0U) {
 8008756:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008758:	2b00      	cmp	r3, #0
 800875a:	d05b      	beq.n	8008814 <HAL_I2C_Master_Receive+0x1cc>
			if (hi2c->XferSize <= 3U) {
 800875c:	2b03      	cmp	r3, #3
 800875e:	f200 80cb 	bhi.w	80088f8 <HAL_I2C_Master_Receive+0x2b0>
				if (hi2c->XferSize == 1U) {
 8008762:	2b01      	cmp	r3, #1
 8008764:	d17a      	bne.n	800885c <HAL_I2C_Master_Receive+0x214>
					if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8008766:	4632      	mov	r2, r6
 8008768:	4639      	mov	r1, r7
 800876a:	4620      	mov	r0, r4
 800876c:	f7ff fd40 	bl	80081f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008770:	2800      	cmp	r0, #0
 8008772:	f000 8090 	beq.w	8008896 <HAL_I2C_Master_Receive+0x24e>
						if (hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT) {
 8008776:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008778:	2b20      	cmp	r3, #32
 800877a:	d116      	bne.n	80087aa <HAL_I2C_Master_Receive+0x162>
 800877c:	e03e      	b.n	80087fc <HAL_I2C_Master_Receive+0x1b4>
		hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800877e:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8008782:	f008 0806 	and.w	r8, r8, #6
 8008786:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 800878a:	611a      	str	r2, [r3, #16]
		if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK) {
 800878c:	4958      	ldr	r1, [pc, #352]	; (80088f0 <HAL_I2C_Master_Receive+0x2a8>)
 800878e:	4633      	mov	r3, r6
 8008790:	463a      	mov	r2, r7
 8008792:	4620      	mov	r0, r4
 8008794:	f7ff fbcb 	bl	8007f2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008798:	b148      	cbz	r0, 80087ae <HAL_I2C_Master_Receive+0x166>
		if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 800879a:	6c23      	ldr	r3, [r4, #64]	; 0x40
			if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 800879c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800879e:	2b04      	cmp	r3, #4
 80087a0:	f04f 0300 	mov.w	r3, #0
 80087a4:	d128      	bne.n	80087f8 <HAL_I2C_Master_Receive+0x1b0>
				__HAL_UNLOCK(hi2c);
 80087a6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
							return HAL_ERROR;
 80087aa:	2501      	movs	r5, #1
 80087ac:	e75c      	b.n	8008668 <HAL_I2C_Master_Receive+0x20>
		hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80087ae:	6823      	ldr	r3, [r4, #0]
		if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 80087b0:	494e      	ldr	r1, [pc, #312]	; (80088ec <HAL_I2C_Master_Receive+0x2a4>)
		hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80087b2:	b2ed      	uxtb	r5, r5
 80087b4:	611d      	str	r5, [r3, #16]
		if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 80087b6:	463a      	mov	r2, r7
 80087b8:	4633      	mov	r3, r6
 80087ba:	4620      	mov	r0, r4
 80087bc:	f7ff fbb7 	bl	8007f2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80087c0:	4602      	mov	r2, r0
 80087c2:	2800      	cmp	r0, #0
 80087c4:	d1e9      	bne.n	800879a <HAL_I2C_Master_Receive+0x152>
		__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087c6:	6823      	ldr	r3, [r4, #0]
 80087c8:	9007      	str	r0, [sp, #28]
 80087ca:	6959      	ldr	r1, [r3, #20]
 80087cc:	9107      	str	r1, [sp, #28]
 80087ce:	6999      	ldr	r1, [r3, #24]
 80087d0:	9107      	str	r1, [sp, #28]
 80087d2:	9907      	ldr	r1, [sp, #28]
		hi2c->Instance->CR1 |= I2C_CR1_START;
 80087d4:	6819      	ldr	r1, [r3, #0]
 80087d6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80087da:	6019      	str	r1, [r3, #0]
		if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 80087dc:	4620      	mov	r0, r4
 80087de:	9600      	str	r6, [sp, #0]
 80087e0:	463b      	mov	r3, r7
 80087e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80087e6:	f7ff fbe2 	bl	8007fae <I2C_WaitOnFlagUntilTimeout>
 80087ea:	2800      	cmp	r0, #0
 80087ec:	d1d6      	bne.n	800879c <HAL_I2C_Master_Receive+0x154>
		hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80087ee:	6822      	ldr	r2, [r4, #0]
 80087f0:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 80087f4:	6113      	str	r3, [r2, #16]
 80087f6:	e78f      	b.n	8008718 <HAL_I2C_Master_Receive+0xd0>
				__HAL_UNLOCK(hi2c);
 80087f8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
							return HAL_TIMEOUT;
 80087fc:	2503      	movs	r5, #3
 80087fe:	e733      	b.n	8008668 <HAL_I2C_Master_Receive+0x20>
			__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008800:	9503      	str	r5, [sp, #12]
 8008802:	695a      	ldr	r2, [r3, #20]
 8008804:	9203      	str	r2, [sp, #12]
 8008806:	699a      	ldr	r2, [r3, #24]
 8008808:	9203      	str	r2, [sp, #12]
 800880a:	9a03      	ldr	r2, [sp, #12]
			hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008812:	601a      	str	r2, [r3, #0]
		hi2c->State = HAL_I2C_STATE_READY;
 8008814:	2320      	movs	r3, #32
 8008816:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_NONE;
 800881a:	2300      	movs	r3, #0
 800881c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		__HAL_UNLOCK(hi2c);
 8008820:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		return HAL_OK;
 8008824:	e720      	b.n	8008668 <HAL_I2C_Master_Receive+0x20>
		}else if (hi2c->XferSize == 2U) {
 8008826:	2a02      	cmp	r2, #2
			hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8008828:	681a      	ldr	r2, [r3, #0]
		}else if (hi2c->XferSize == 2U) {
 800882a:	d10d      	bne.n	8008848 <HAL_I2C_Master_Receive+0x200>
			hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800882c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008830:	601a      	str	r2, [r3, #0]
			hi2c->Instance->CR1 |= I2C_CR1_POS;
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008838:	601a      	str	r2, [r3, #0]
			__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800883a:	9505      	str	r5, [sp, #20]
 800883c:	695a      	ldr	r2, [r3, #20]
 800883e:	9205      	str	r2, [sp, #20]
 8008840:	699b      	ldr	r3, [r3, #24]
 8008842:	9305      	str	r3, [sp, #20]
 8008844:	9b05      	ldr	r3, [sp, #20]
 8008846:	e784      	b.n	8008752 <HAL_I2C_Master_Receive+0x10a>
			hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8008848:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800884c:	601a      	str	r2, [r3, #0]
			__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800884e:	9506      	str	r5, [sp, #24]
 8008850:	695a      	ldr	r2, [r3, #20]
 8008852:	9206      	str	r2, [sp, #24]
 8008854:	699b      	ldr	r3, [r3, #24]
 8008856:	9306      	str	r3, [sp, #24]
 8008858:	9b06      	ldr	r3, [sp, #24]
 800885a:	e77a      	b.n	8008752 <HAL_I2C_Master_Receive+0x10a>
				else if (hi2c->XferSize == 2U) {
 800885c:	2b02      	cmp	r3, #2
					if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 800885e:	9600      	str	r6, [sp, #0]
 8008860:	463b      	mov	r3, r7
 8008862:	f04f 0200 	mov.w	r2, #0
 8008866:	4641      	mov	r1, r8
 8008868:	4620      	mov	r0, r4
				else if (hi2c->XferSize == 2U) {
 800886a:	d122      	bne.n	80088b2 <HAL_I2C_Master_Receive+0x26a>
					if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 800886c:	f7ff fb9f 	bl	8007fae <I2C_WaitOnFlagUntilTimeout>
 8008870:	2800      	cmp	r0, #0
 8008872:	d1c3      	bne.n	80087fc <HAL_I2C_Master_Receive+0x1b4>
					hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8008874:	6823      	ldr	r3, [r4, #0]
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800887c:	601a      	str	r2, [r3, #0]
					(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800887e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008880:	691b      	ldr	r3, [r3, #16]
 8008882:	1c51      	adds	r1, r2, #1
 8008884:	6261      	str	r1, [r4, #36]	; 0x24
 8008886:	7013      	strb	r3, [r2, #0]
					hi2c->XferSize--;
 8008888:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800888a:	3b01      	subs	r3, #1
 800888c:	8523      	strh	r3, [r4, #40]	; 0x28
					hi2c->XferCount--;
 800888e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008890:	3b01      	subs	r3, #1
 8008892:	b29b      	uxth	r3, r3
 8008894:	8563      	strh	r3, [r4, #42]	; 0x2a
					(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8008896:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008898:	1c5a      	adds	r2, r3, #1
 800889a:	6262      	str	r2, [r4, #36]	; 0x24
 800889c:	6822      	ldr	r2, [r4, #0]
					(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800889e:	6912      	ldr	r2, [r2, #16]
 80088a0:	701a      	strb	r2, [r3, #0]
					hi2c->XferSize--;
 80088a2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80088a4:	3b01      	subs	r3, #1
 80088a6:	8523      	strh	r3, [r4, #40]	; 0x28
					hi2c->XferCount--;
 80088a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80088aa:	3b01      	subs	r3, #1
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	8563      	strh	r3, [r4, #42]	; 0x2a
 80088b0:	e751      	b.n	8008756 <HAL_I2C_Master_Receive+0x10e>
					if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 80088b2:	f7ff fb7c 	bl	8007fae <I2C_WaitOnFlagUntilTimeout>
 80088b6:	4602      	mov	r2, r0
 80088b8:	2800      	cmp	r0, #0
 80088ba:	d19f      	bne.n	80087fc <HAL_I2C_Master_Receive+0x1b4>
					hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80088bc:	6823      	ldr	r3, [r4, #0]
 80088be:	6819      	ldr	r1, [r3, #0]
 80088c0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80088c4:	6019      	str	r1, [r3, #0]
					(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80088c6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80088c8:	691b      	ldr	r3, [r3, #16]
 80088ca:	1c48      	adds	r0, r1, #1
 80088cc:	6260      	str	r0, [r4, #36]	; 0x24
 80088ce:	700b      	strb	r3, [r1, #0]
					hi2c->XferSize--;
 80088d0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
					if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 80088d2:	9600      	str	r6, [sp, #0]
					hi2c->XferSize--;
 80088d4:	3b01      	subs	r3, #1
 80088d6:	8523      	strh	r3, [r4, #40]	; 0x28
					hi2c->XferCount--;
 80088d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80088da:	3b01      	subs	r3, #1
 80088dc:	b29b      	uxth	r3, r3
 80088de:	8563      	strh	r3, [r4, #42]	; 0x2a
					if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 80088e0:	4641      	mov	r1, r8
 80088e2:	463b      	mov	r3, r7
 80088e4:	4620      	mov	r0, r4
 80088e6:	e7c1      	b.n	800886c <HAL_I2C_Master_Receive+0x224>
 80088e8:	00100002 	.word	0x00100002
 80088ec:	00010002 	.word	0x00010002
 80088f0:	00010008 	.word	0x00010008
 80088f4:	00010004 	.word	0x00010004
				if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 80088f8:	4632      	mov	r2, r6
 80088fa:	4639      	mov	r1, r7
 80088fc:	4620      	mov	r0, r4
 80088fe:	f7ff fc77 	bl	80081f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008902:	2800      	cmp	r0, #0
 8008904:	f47f af37 	bne.w	8008776 <HAL_I2C_Master_Receive+0x12e>
				(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8008908:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800890a:	1c5a      	adds	r2, r3, #1
 800890c:	6262      	str	r2, [r4, #36]	; 0x24
 800890e:	6822      	ldr	r2, [r4, #0]
 8008910:	6912      	ldr	r2, [r2, #16]
 8008912:	701a      	strb	r2, [r3, #0]
				hi2c->XferSize--;
 8008914:	8d23      	ldrh	r3, [r4, #40]	; 0x28
				if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) {
 8008916:	6822      	ldr	r2, [r4, #0]
				hi2c->XferSize--;
 8008918:	3b01      	subs	r3, #1
 800891a:	8523      	strh	r3, [r4, #40]	; 0x28
				hi2c->XferCount--;
 800891c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800891e:	3b01      	subs	r3, #1
 8008920:	b29b      	uxth	r3, r3
 8008922:	8563      	strh	r3, [r4, #42]	; 0x2a
				if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) {
 8008924:	6953      	ldr	r3, [r2, #20]
 8008926:	075b      	lsls	r3, r3, #29
 8008928:	f57f af15 	bpl.w	8008756 <HAL_I2C_Master_Receive+0x10e>
					(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800892c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800892e:	1c59      	adds	r1, r3, #1
 8008930:	6261      	str	r1, [r4, #36]	; 0x24
 8008932:	e7b4      	b.n	800889e <HAL_I2C_Master_Receive+0x256>

08008934 <HAL_I2C_Mem_Write>:
{
 8008934:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8008938:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800893a:	4698      	mov	r8, r3
 800893c:	4604      	mov	r4, r0
 800893e:	4689      	mov	r9, r1
 8008940:	4692      	mov	sl, r2
	tickstart = HAL_GetTick();
 8008942:	f7fe fab5 	bl	8006eb0 <HAL_GetTick>
	assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8008946:	f1b8 0f01 	cmp.w	r8, #1
	tickstart = HAL_GetTick();
 800894a:	4605      	mov	r5, r0
	assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800894c:	d007      	beq.n	800895e <HAL_I2C_Mem_Write+0x2a>
 800894e:	f1b8 0f10 	cmp.w	r8, #16
 8008952:	d004      	beq.n	800895e <HAL_I2C_Mem_Write+0x2a>
 8008954:	f640 01a5 	movw	r1, #2213	; 0x8a5
 8008958:	4844      	ldr	r0, [pc, #272]	; (8008a6c <HAL_I2C_Mem_Write+0x138>)
 800895a:	f004 f8f9 	bl	800cb50 <assert_failed>
	if (hi2c->State == HAL_I2C_STATE_READY) {
 800895e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8008962:	2b20      	cmp	r3, #32
 8008964:	d003      	beq.n	800896e <HAL_I2C_Mem_Write+0x3a>
		return HAL_BUSY;
 8008966:	2002      	movs	r0, #2
}
 8008968:	b002      	add	sp, #8
 800896a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK) {
 800896e:	9500      	str	r5, [sp, #0]
 8008970:	2319      	movs	r3, #25
 8008972:	2201      	movs	r2, #1
 8008974:	493e      	ldr	r1, [pc, #248]	; (8008a70 <HAL_I2C_Mem_Write+0x13c>)
 8008976:	4620      	mov	r0, r4
 8008978:	f7ff fb19 	bl	8007fae <I2C_WaitOnFlagUntilTimeout>
 800897c:	2800      	cmp	r0, #0
 800897e:	d1f2      	bne.n	8008966 <HAL_I2C_Mem_Write+0x32>
		__HAL_LOCK(hi2c);
 8008980:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8008984:	2b01      	cmp	r3, #1
 8008986:	d0ee      	beq.n	8008966 <HAL_I2C_Mem_Write+0x32>
 8008988:	2301      	movs	r3, #1
 800898a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE) {
 800898e:	6823      	ldr	r3, [r4, #0]
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	07d2      	lsls	r2, r2, #31
			__HAL_I2C_ENABLE(hi2c);
 8008994:	bf5e      	ittt	pl
 8008996:	681a      	ldrpl	r2, [r3, #0]
 8008998:	f042 0201 	orrpl.w	r2, r2, #1
 800899c:	601a      	strpl	r2, [r3, #0]
		hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80089a4:	601a      	str	r2, [r3, #0]
		hi2c->State = HAL_I2C_STATE_BUSY_TX;
 80089a6:	2321      	movs	r3, #33	; 0x21
 80089a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_MEM;
 80089ac:	2340      	movs	r3, #64	; 0x40
 80089ae:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		hi2c->pBuffPtr = pData;
 80089b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089b4:	6263      	str	r3, [r4, #36]	; 0x24
		hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80089b6:	2700      	movs	r7, #0
		hi2c->XferCount = Size;
 80089b8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
		hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80089bc:	6427      	str	r7, [r4, #64]	; 0x40
		hi2c->XferCount = Size;
 80089be:	8563      	strh	r3, [r4, #42]	; 0x2a
		hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80089c0:	4b2c      	ldr	r3, [pc, #176]	; (8008a74 <HAL_I2C_Mem_Write+0x140>)
 80089c2:	62e3      	str	r3, [r4, #44]	; 0x2c
		hi2c->XferSize = hi2c->XferCount;
 80089c4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80089c6:	8523      	strh	r3, [r4, #40]	; 0x28
		if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK) {
 80089c8:	9501      	str	r5, [sp, #4]
 80089ca:	9600      	str	r6, [sp, #0]
 80089cc:	4643      	mov	r3, r8
 80089ce:	4652      	mov	r2, sl
 80089d0:	4649      	mov	r1, r9
 80089d2:	4620      	mov	r0, r4
 80089d4:	f7ff fb40 	bl	8008058 <I2C_RequestMemoryWrite>
 80089d8:	2800      	cmp	r0, #0
 80089da:	d02a      	beq.n	8008a32 <HAL_I2C_Mem_Write+0xfe>
			if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 80089dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
				__HAL_UNLOCK(hi2c);
 80089de:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
			if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 80089e2:	2b04      	cmp	r3, #4
 80089e4:	d107      	bne.n	80089f6 <HAL_I2C_Mem_Write+0xc2>
				return HAL_ERROR;
 80089e6:	2001      	movs	r0, #1
 80089e8:	e7be      	b.n	8008968 <HAL_I2C_Mem_Write+0x34>
			if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 80089ea:	f7ff fb0e 	bl	800800a <I2C_WaitOnTXEFlagUntilTimeout>
 80089ee:	b120      	cbz	r0, 80089fa <HAL_I2C_Mem_Write+0xc6>
				if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 80089f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80089f2:	2b04      	cmp	r3, #4
 80089f4:	d034      	beq.n	8008a60 <HAL_I2C_Mem_Write+0x12c>
					return HAL_TIMEOUT;
 80089f6:	2003      	movs	r0, #3
 80089f8:	e7b6      	b.n	8008968 <HAL_I2C_Mem_Write+0x34>
			hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80089fa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80089fc:	6827      	ldr	r7, [r4, #0]
			hi2c->XferSize--;
 80089fe:	8d22      	ldrh	r2, [r4, #40]	; 0x28
			hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8008a00:	1c4b      	adds	r3, r1, #1
 8008a02:	6263      	str	r3, [r4, #36]	; 0x24
 8008a04:	780b      	ldrb	r3, [r1, #0]
 8008a06:	613b      	str	r3, [r7, #16]
			hi2c->XferCount--;
 8008a08:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	8563      	strh	r3, [r4, #42]	; 0x2a
			if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U)) {
 8008a10:	697b      	ldr	r3, [r7, #20]
			hi2c->XferSize--;
 8008a12:	1e50      	subs	r0, r2, #1
 8008a14:	b280      	uxth	r0, r0
			if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U)) {
 8008a16:	075b      	lsls	r3, r3, #29
			hi2c->XferSize--;
 8008a18:	8520      	strh	r0, [r4, #40]	; 0x28
			if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U)) {
 8008a1a:	d50a      	bpl.n	8008a32 <HAL_I2C_Mem_Write+0xfe>
 8008a1c:	b148      	cbz	r0, 8008a32 <HAL_I2C_Mem_Write+0xfe>
				hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8008a1e:	1c8b      	adds	r3, r1, #2
 8008a20:	6263      	str	r3, [r4, #36]	; 0x24
 8008a22:	784b      	ldrb	r3, [r1, #1]
 8008a24:	613b      	str	r3, [r7, #16]
				hi2c->XferCount--;
 8008a26:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008a28:	3b01      	subs	r3, #1
				hi2c->XferSize--;
 8008a2a:	3a02      	subs	r2, #2
				hi2c->XferCount--;
 8008a2c:	b29b      	uxth	r3, r3
				hi2c->XferSize--;
 8008a2e:	8522      	strh	r2, [r4, #40]	; 0x28
				hi2c->XferCount--;
 8008a30:	8563      	strh	r3, [r4, #42]	; 0x2a
		while (hi2c->XferSize > 0U) {
 8008a32:	8d23      	ldrh	r3, [r4, #40]	; 0x28
			if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8008a34:	462a      	mov	r2, r5
 8008a36:	4631      	mov	r1, r6
 8008a38:	4620      	mov	r0, r4
		while (hi2c->XferSize > 0U) {
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d1d5      	bne.n	80089ea <HAL_I2C_Mem_Write+0xb6>
		if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8008a3e:	f7ff fc04 	bl	800824a <I2C_WaitOnBTFFlagUntilTimeout>
 8008a42:	2800      	cmp	r0, #0
 8008a44:	d1d4      	bne.n	80089f0 <HAL_I2C_Mem_Write+0xbc>
		hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8008a46:	6822      	ldr	r2, [r4, #0]
 8008a48:	6813      	ldr	r3, [r2, #0]
 8008a4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008a4e:	6013      	str	r3, [r2, #0]
		hi2c->State = HAL_I2C_STATE_READY;
 8008a50:	2320      	movs	r3, #32
 8008a52:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		__HAL_UNLOCK(hi2c);
 8008a56:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
		hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a5a:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
		return HAL_OK;
 8008a5e:	e783      	b.n	8008968 <HAL_I2C_Mem_Write+0x34>
				hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8008a60:	6822      	ldr	r2, [r4, #0]
 8008a62:	6813      	ldr	r3, [r2, #0]
 8008a64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008a68:	6013      	str	r3, [r2, #0]
 8008a6a:	e7bc      	b.n	80089e6 <HAL_I2C_Mem_Write+0xb2>
 8008a6c:	0801d8a8 	.word	0x0801d8a8
 8008a70:	00100002 	.word	0x00100002
 8008a74:	ffff0000 	.word	0xffff0000

08008a78 <HAL_I2C_Mem_Read>:
{
 8008a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a7c:	b086      	sub	sp, #24
 8008a7e:	461d      	mov	r5, r3
 8008a80:	4604      	mov	r4, r0
 8008a82:	4689      	mov	r9, r1
 8008a84:	4692      	mov	sl, r2
 8008a86:	9f10      	ldr	r7, [sp, #64]	; 0x40
	tickstart = HAL_GetTick();
 8008a88:	f7fe fa12 	bl	8006eb0 <HAL_GetTick>
	assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8008a8c:	2d01      	cmp	r5, #1
	tickstart = HAL_GetTick();
 8008a8e:	4606      	mov	r6, r0
	assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8008a90:	d006      	beq.n	8008aa0 <HAL_I2C_Mem_Read+0x28>
 8008a92:	2d10      	cmp	r5, #16
 8008a94:	d004      	beq.n	8008aa0 <HAL_I2C_Mem_Read+0x28>
 8008a96:	f640 1117 	movw	r1, #2327	; 0x917
 8008a9a:	4881      	ldr	r0, [pc, #516]	; (8008ca0 <HAL_I2C_Mem_Read+0x228>)
 8008a9c:	f004 f858 	bl	800cb50 <assert_failed>
	if (hi2c->State == HAL_I2C_STATE_READY) {
 8008aa0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8008aa4:	2b20      	cmp	r3, #32
 8008aa6:	d004      	beq.n	8008ab2 <HAL_I2C_Mem_Read+0x3a>
		return HAL_BUSY;
 8008aa8:	2502      	movs	r5, #2
}
 8008aaa:	4628      	mov	r0, r5
 8008aac:	b006      	add	sp, #24
 8008aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK) {
 8008ab2:	9600      	str	r6, [sp, #0]
 8008ab4:	2319      	movs	r3, #25
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	497a      	ldr	r1, [pc, #488]	; (8008ca4 <HAL_I2C_Mem_Read+0x22c>)
 8008aba:	4620      	mov	r0, r4
 8008abc:	f7ff fa77 	bl	8007fae <I2C_WaitOnFlagUntilTimeout>
 8008ac0:	2800      	cmp	r0, #0
 8008ac2:	d1f1      	bne.n	8008aa8 <HAL_I2C_Mem_Read+0x30>
		__HAL_LOCK(hi2c);
 8008ac4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d0ed      	beq.n	8008aa8 <HAL_I2C_Mem_Read+0x30>
 8008acc:	2301      	movs	r3, #1
 8008ace:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE) {
 8008ad2:	6823      	ldr	r3, [r4, #0]
 8008ad4:	681a      	ldr	r2, [r3, #0]
 8008ad6:	07d2      	lsls	r2, r2, #31
			__HAL_I2C_ENABLE(hi2c);
 8008ad8:	bf5e      	ittt	pl
 8008ada:	681a      	ldrpl	r2, [r3, #0]
 8008adc:	f042 0201 	orrpl.w	r2, r2, #1
 8008ae0:	601a      	strpl	r2, [r3, #0]
		hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008ae2:	681a      	ldr	r2, [r3, #0]
 8008ae4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ae8:	601a      	str	r2, [r3, #0]
		hi2c->State = HAL_I2C_STATE_BUSY_RX;
 8008aea:	2322      	movs	r3, #34	; 0x22
 8008aec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_MEM;
 8008af0:	2340      	movs	r3, #64	; 0x40
 8008af2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		hi2c->pBuffPtr = pData;
 8008af6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008af8:	6263      	str	r3, [r4, #36]	; 0x24
		hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008afa:	f04f 0800 	mov.w	r8, #0
		hi2c->XferCount = Size;
 8008afe:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
		hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b02:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
		hi2c->XferCount = Size;
 8008b06:	8563      	strh	r3, [r4, #42]	; 0x2a
		hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008b08:	4b67      	ldr	r3, [pc, #412]	; (8008ca8 <HAL_I2C_Mem_Read+0x230>)
 8008b0a:	62e3      	str	r3, [r4, #44]	; 0x2c
		hi2c->XferSize = hi2c->XferCount;
 8008b0c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008b0e:	8523      	strh	r3, [r4, #40]	; 0x28
		if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK) {
 8008b10:	9601      	str	r6, [sp, #4]
 8008b12:	462b      	mov	r3, r5
 8008b14:	9700      	str	r7, [sp, #0]
 8008b16:	4652      	mov	r2, sl
 8008b18:	4649      	mov	r1, r9
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	f7ff faee 	bl	80080fc <I2C_RequestMemoryRead>
 8008b20:	4605      	mov	r5, r0
 8008b22:	b130      	cbz	r0, 8008b32 <HAL_I2C_Mem_Read+0xba>
			if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8008b24:	6c23      	ldr	r3, [r4, #64]	; 0x40
				__HAL_UNLOCK(hi2c);
 8008b26:	f884 803c 	strb.w	r8, [r4, #60]	; 0x3c
			if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8008b2a:	2b04      	cmp	r3, #4
 8008b2c:	d13a      	bne.n	8008ba4 <HAL_I2C_Mem_Read+0x12c>
							return HAL_ERROR;
 8008b2e:	2501      	movs	r5, #1
 8008b30:	e7bb      	b.n	8008aaa <HAL_I2C_Mem_Read+0x32>
		if (hi2c->XferSize == 0U) {
 8008b32:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8008b34:	6823      	ldr	r3, [r4, #0]
 8008b36:	b992      	cbnz	r2, 8008b5e <HAL_I2C_Mem_Read+0xe6>
			__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b38:	9002      	str	r0, [sp, #8]
 8008b3a:	695a      	ldr	r2, [r3, #20]
 8008b3c:	9202      	str	r2, [sp, #8]
 8008b3e:	699a      	ldr	r2, [r3, #24]
 8008b40:	9202      	str	r2, [sp, #8]
 8008b42:	9a02      	ldr	r2, [sp, #8]
			hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b4a:	601a      	str	r2, [r3, #0]
		hi2c->State = HAL_I2C_STATE_READY;
 8008b4c:	2320      	movs	r3, #32
 8008b4e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b52:	2300      	movs	r3, #0
 8008b54:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		__HAL_UNLOCK(hi2c);
 8008b58:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		return HAL_OK;
 8008b5c:	e7a5      	b.n	8008aaa <HAL_I2C_Mem_Read+0x32>
		}else if (hi2c->XferSize == 1U) {
 8008b5e:	2a01      	cmp	r2, #1
 8008b60:	d122      	bne.n	8008ba8 <HAL_I2C_Mem_Read+0x130>
			hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b68:	601a      	str	r2, [r3, #0]
			__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b6a:	9003      	str	r0, [sp, #12]
 8008b6c:	695a      	ldr	r2, [r3, #20]
 8008b6e:	9203      	str	r2, [sp, #12]
 8008b70:	699a      	ldr	r2, [r3, #24]
 8008b72:	9203      	str	r2, [sp, #12]
 8008b74:	9a03      	ldr	r2, [sp, #12]
			hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b7c:	601a      	str	r2, [r3, #0]
					if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 8008b7e:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8008cac <HAL_I2C_Mem_Read+0x234>
		while (hi2c->XferSize > 0U) {
 8008b82:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d0e1      	beq.n	8008b4c <HAL_I2C_Mem_Read+0xd4>
			if (hi2c->XferSize <= 3U) {
 8008b88:	2b03      	cmp	r3, #3
 8008b8a:	d86b      	bhi.n	8008c64 <HAL_I2C_Mem_Read+0x1ec>
				if (hi2c->XferSize == 1U) {
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d123      	bne.n	8008bd8 <HAL_I2C_Mem_Read+0x160>
					if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8008b90:	4632      	mov	r2, r6
 8008b92:	4639      	mov	r1, r7
 8008b94:	4620      	mov	r0, r4
 8008b96:	f7ff fb2b 	bl	80081f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008b9a:	2800      	cmp	r0, #0
 8008b9c:	d039      	beq.n	8008c12 <HAL_I2C_Mem_Read+0x19a>
						if (hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT) {
 8008b9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ba0:	2b20      	cmp	r3, #32
 8008ba2:	d1c4      	bne.n	8008b2e <HAL_I2C_Mem_Read+0xb6>
							return HAL_TIMEOUT;
 8008ba4:	2503      	movs	r5, #3
 8008ba6:	e780      	b.n	8008aaa <HAL_I2C_Mem_Read+0x32>
		}else if (hi2c->XferSize == 2U) {
 8008ba8:	2a02      	cmp	r2, #2
 8008baa:	d10e      	bne.n	8008bca <HAL_I2C_Mem_Read+0x152>
			hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008bb2:	601a      	str	r2, [r3, #0]
			hi2c->Instance->CR1 |= I2C_CR1_POS;
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008bba:	601a      	str	r2, [r3, #0]
			__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008bbc:	9004      	str	r0, [sp, #16]
 8008bbe:	695a      	ldr	r2, [r3, #20]
 8008bc0:	9204      	str	r2, [sp, #16]
 8008bc2:	699b      	ldr	r3, [r3, #24]
 8008bc4:	9304      	str	r3, [sp, #16]
 8008bc6:	9b04      	ldr	r3, [sp, #16]
 8008bc8:	e7d9      	b.n	8008b7e <HAL_I2C_Mem_Read+0x106>
			__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008bca:	9005      	str	r0, [sp, #20]
 8008bcc:	695a      	ldr	r2, [r3, #20]
 8008bce:	9205      	str	r2, [sp, #20]
 8008bd0:	699b      	ldr	r3, [r3, #24]
 8008bd2:	9305      	str	r3, [sp, #20]
 8008bd4:	9b05      	ldr	r3, [sp, #20]
 8008bd6:	e7d2      	b.n	8008b7e <HAL_I2C_Mem_Read+0x106>
				else if (hi2c->XferSize == 2U) {
 8008bd8:	2b02      	cmp	r3, #2
					if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 8008bda:	9600      	str	r6, [sp, #0]
 8008bdc:	463b      	mov	r3, r7
 8008bde:	f04f 0200 	mov.w	r2, #0
 8008be2:	4641      	mov	r1, r8
 8008be4:	4620      	mov	r0, r4
				else if (hi2c->XferSize == 2U) {
 8008be6:	d122      	bne.n	8008c2e <HAL_I2C_Mem_Read+0x1b6>
					if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 8008be8:	f7ff f9e1 	bl	8007fae <I2C_WaitOnFlagUntilTimeout>
 8008bec:	2800      	cmp	r0, #0
 8008bee:	d1d9      	bne.n	8008ba4 <HAL_I2C_Mem_Read+0x12c>
					hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8008bf0:	6823      	ldr	r3, [r4, #0]
 8008bf2:	681a      	ldr	r2, [r3, #0]
 8008bf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bf8:	601a      	str	r2, [r3, #0]
					(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8008bfa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008bfc:	691b      	ldr	r3, [r3, #16]
 8008bfe:	1c51      	adds	r1, r2, #1
 8008c00:	6261      	str	r1, [r4, #36]	; 0x24
 8008c02:	7013      	strb	r3, [r2, #0]
					hi2c->XferSize--;
 8008c04:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008c06:	3b01      	subs	r3, #1
 8008c08:	8523      	strh	r3, [r4, #40]	; 0x28
					hi2c->XferCount--;
 8008c0a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008c0c:	3b01      	subs	r3, #1
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	8563      	strh	r3, [r4, #42]	; 0x2a
					(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8008c12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c14:	1c5a      	adds	r2, r3, #1
 8008c16:	6262      	str	r2, [r4, #36]	; 0x24
 8008c18:	6822      	ldr	r2, [r4, #0]
					(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8008c1a:	6912      	ldr	r2, [r2, #16]
 8008c1c:	701a      	strb	r2, [r3, #0]
					hi2c->XferSize--;
 8008c1e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008c20:	3b01      	subs	r3, #1
 8008c22:	8523      	strh	r3, [r4, #40]	; 0x28
					hi2c->XferCount--;
 8008c24:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008c26:	3b01      	subs	r3, #1
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	8563      	strh	r3, [r4, #42]	; 0x2a
 8008c2c:	e7a9      	b.n	8008b82 <HAL_I2C_Mem_Read+0x10a>
					if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 8008c2e:	f7ff f9be 	bl	8007fae <I2C_WaitOnFlagUntilTimeout>
 8008c32:	4602      	mov	r2, r0
 8008c34:	2800      	cmp	r0, #0
 8008c36:	d1b5      	bne.n	8008ba4 <HAL_I2C_Mem_Read+0x12c>
					hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8008c38:	6823      	ldr	r3, [r4, #0]
 8008c3a:	6819      	ldr	r1, [r3, #0]
 8008c3c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8008c40:	6019      	str	r1, [r3, #0]
					(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8008c42:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008c44:	691b      	ldr	r3, [r3, #16]
 8008c46:	1c48      	adds	r0, r1, #1
 8008c48:	6260      	str	r0, [r4, #36]	; 0x24
 8008c4a:	700b      	strb	r3, [r1, #0]
					hi2c->XferSize--;
 8008c4c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
					if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 8008c4e:	9600      	str	r6, [sp, #0]
					hi2c->XferSize--;
 8008c50:	3b01      	subs	r3, #1
 8008c52:	8523      	strh	r3, [r4, #40]	; 0x28
					hi2c->XferCount--;
 8008c54:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008c56:	3b01      	subs	r3, #1
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	8563      	strh	r3, [r4, #42]	; 0x2a
					if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 8008c5c:	4641      	mov	r1, r8
 8008c5e:	463b      	mov	r3, r7
 8008c60:	4620      	mov	r0, r4
 8008c62:	e7c1      	b.n	8008be8 <HAL_I2C_Mem_Read+0x170>
				if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8008c64:	4632      	mov	r2, r6
 8008c66:	4639      	mov	r1, r7
 8008c68:	4620      	mov	r0, r4
 8008c6a:	f7ff fac1 	bl	80081f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008c6e:	2800      	cmp	r0, #0
 8008c70:	d195      	bne.n	8008b9e <HAL_I2C_Mem_Read+0x126>
				(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8008c72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c74:	1c5a      	adds	r2, r3, #1
 8008c76:	6262      	str	r2, [r4, #36]	; 0x24
 8008c78:	6822      	ldr	r2, [r4, #0]
 8008c7a:	6912      	ldr	r2, [r2, #16]
 8008c7c:	701a      	strb	r2, [r3, #0]
				hi2c->XferSize--;
 8008c7e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
				if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) {
 8008c80:	6822      	ldr	r2, [r4, #0]
				hi2c->XferSize--;
 8008c82:	3b01      	subs	r3, #1
 8008c84:	8523      	strh	r3, [r4, #40]	; 0x28
				hi2c->XferCount--;
 8008c86:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008c88:	3b01      	subs	r3, #1
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	8563      	strh	r3, [r4, #42]	; 0x2a
				if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) {
 8008c8e:	6953      	ldr	r3, [r2, #20]
 8008c90:	075b      	lsls	r3, r3, #29
 8008c92:	f57f af76 	bpl.w	8008b82 <HAL_I2C_Mem_Read+0x10a>
					(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8008c96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c98:	1c59      	adds	r1, r3, #1
 8008c9a:	6261      	str	r1, [r4, #36]	; 0x24
 8008c9c:	e7bd      	b.n	8008c1a <HAL_I2C_Mem_Read+0x1a2>
 8008c9e:	bf00      	nop
 8008ca0:	0801d8a8 	.word	0x0801d8a8
 8008ca4:	00100002 	.word	0x00100002
 8008ca8:	ffff0000 	.word	0xffff0000
 8008cac:	00010004 	.word	0x00010004

08008cb0 <HAL_I2C_MasterTxCpltCallback>:
 8008cb0:	4770      	bx	lr

08008cb2 <HAL_I2C_MasterRxCpltCallback>:
 8008cb2:	4770      	bx	lr

08008cb4 <HAL_I2C_SlaveTxCpltCallback>:
 8008cb4:	4770      	bx	lr

08008cb6 <HAL_I2C_SlaveRxCpltCallback>:
 8008cb6:	4770      	bx	lr

08008cb8 <HAL_I2C_AddrCallback>:
{
 8008cb8:	4770      	bx	lr

08008cba <HAL_I2C_ListenCpltCallback>:
 8008cba:	4770      	bx	lr

08008cbc <HAL_I2C_MemTxCpltCallback>:
 8008cbc:	4770      	bx	lr

08008cbe <HAL_I2C_MemRxCpltCallback>:
 8008cbe:	4770      	bx	lr

08008cc0 <HAL_I2C_ErrorCallback>:
 8008cc0:	4770      	bx	lr

08008cc2 <HAL_I2C_AbortCpltCallback>:
{
 8008cc2:	4770      	bx	lr

08008cc4 <I2C_ITError>:
	uint32_t CurrentState = hi2c->State;
 8008cc4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
	if ((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)) {
 8008cc8:	3b29      	subs	r3, #41	; 0x29
 8008cca:	2b01      	cmp	r3, #1
{
 8008ccc:	b510      	push	{r4, lr}
 8008cce:	6803      	ldr	r3, [r0, #0]
 8008cd0:	4604      	mov	r4, r0
	if ((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)) {
 8008cd2:	d839      	bhi.n	8008d48 <I2C_ITError+0x84>
		hi2c->PreviousState = I2C_STATE_NONE;
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	6302      	str	r2, [r0, #48]	; 0x30
		hi2c->State = HAL_I2C_STATE_LISTEN;
 8008cd8:	2228      	movs	r2, #40	; 0x28
 8008cda:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
	hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008cde:	681a      	ldr	r2, [r3, #0]
 8008ce0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ce4:	601a      	str	r2, [r3, #0]
	if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) {
 8008ce6:	685a      	ldr	r2, [r3, #4]
 8008ce8:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8008cec:	d054      	beq.n	8008d98 <I2C_ITError+0xd4>
		hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008cee:	685a      	ldr	r2, [r3, #4]
		if (hi2c->hdmatx->State != HAL_DMA_STATE_READY) {
 8008cf0:	6b60      	ldr	r0, [r4, #52]	; 0x34
		hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008cf2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008cf6:	605a      	str	r2, [r3, #4]
		if (hi2c->hdmatx->State != HAL_DMA_STATE_READY) {
 8008cf8:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	4b39      	ldr	r3, [pc, #228]	; (8008de4 <I2C_ITError+0x120>)
 8008d00:	d031      	beq.n	8008d66 <I2C_ITError+0xa2>
			hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008d02:	6503      	str	r3, [r0, #80]	; 0x50
			if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK) {
 8008d04:	f7fe fe38 	bl	8007978 <HAL_DMA_Abort_IT>
 8008d08:	b150      	cbz	r0, 8008d20 <I2C_ITError+0x5c>
				__HAL_I2C_DISABLE(hi2c);
 8008d0a:	6822      	ldr	r2, [r4, #0]
				hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008d0c:	6b60      	ldr	r0, [r4, #52]	; 0x34
				__HAL_I2C_DISABLE(hi2c);
 8008d0e:	6813      	ldr	r3, [r2, #0]
 8008d10:	f023 0301 	bic.w	r3, r3, #1
 8008d14:	6013      	str	r3, [r2, #0]
				hi2c->State = HAL_I2C_STATE_READY;
 8008d16:	2320      	movs	r3, #32
 8008d18:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
				hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008d1c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008d1e:	4798      	blx	r3
	if ((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)) {
 8008d20:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8008d24:	2b28      	cmp	r3, #40	; 0x28
 8008d26:	d10e      	bne.n	8008d46 <I2C_ITError+0x82>
 8008d28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d2a:	075b      	lsls	r3, r3, #29
 8008d2c:	d50b      	bpl.n	8008d46 <I2C_ITError+0x82>
		hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008d2e:	4b2e      	ldr	r3, [pc, #184]	; (8008de8 <I2C_ITError+0x124>)
 8008d30:	62e3      	str	r3, [r4, #44]	; 0x2c
		hi2c->State = HAL_I2C_STATE_READY;
 8008d32:	2220      	movs	r2, #32
		hi2c->PreviousState = I2C_STATE_NONE;
 8008d34:	2300      	movs	r3, #0
 8008d36:	6323      	str	r3, [r4, #48]	; 0x30
		HAL_I2C_ListenCpltCallback(hi2c);
 8008d38:	4620      	mov	r0, r4
		hi2c->State = HAL_I2C_STATE_READY;
 8008d3a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d3e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		HAL_I2C_ListenCpltCallback(hi2c);
 8008d42:	f7ff ffba 	bl	8008cba <HAL_I2C_ListenCpltCallback>
 8008d46:	bd10      	pop	{r4, pc}
		if ((hi2c->State != HAL_I2C_STATE_ABORT) && ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) != I2C_CR2_DMAEN)) {
 8008d48:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8008d4c:	2a60      	cmp	r2, #96	; 0x60
 8008d4e:	d005      	beq.n	8008d5c <I2C_ITError+0x98>
 8008d50:	685a      	ldr	r2, [r3, #4]
 8008d52:	0512      	lsls	r2, r2, #20
			hi2c->State = HAL_I2C_STATE_READY;
 8008d54:	bf5c      	itt	pl
 8008d56:	2220      	movpl	r2, #32
 8008d58:	f880 203d 	strbpl.w	r2, [r0, #61]	; 0x3d
		hi2c->PreviousState = I2C_STATE_NONE;
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	6322      	str	r2, [r4, #48]	; 0x30
		hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d60:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 8008d64:	e7bb      	b.n	8008cde <I2C_ITError+0x1a>
			hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008d66:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008d68:	6503      	str	r3, [r0, #80]	; 0x50
			if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK) {
 8008d6a:	f7fe fe05 	bl	8007978 <HAL_DMA_Abort_IT>
 8008d6e:	2800      	cmp	r0, #0
 8008d70:	d0d6      	beq.n	8008d20 <I2C_ITError+0x5c>
				if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) {
 8008d72:	6822      	ldr	r2, [r4, #0]
 8008d74:	6953      	ldr	r3, [r2, #20]
 8008d76:	0658      	lsls	r0, r3, #25
 8008d78:	d504      	bpl.n	8008d84 <I2C_ITError+0xc0>
					(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8008d7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d7c:	6912      	ldr	r2, [r2, #16]
 8008d7e:	1c59      	adds	r1, r3, #1
 8008d80:	6261      	str	r1, [r4, #36]	; 0x24
 8008d82:	701a      	strb	r2, [r3, #0]
				__HAL_I2C_DISABLE(hi2c);
 8008d84:	6822      	ldr	r2, [r4, #0]
				hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008d86:	6ba0      	ldr	r0, [r4, #56]	; 0x38
				__HAL_I2C_DISABLE(hi2c);
 8008d88:	6813      	ldr	r3, [r2, #0]
 8008d8a:	f023 0301 	bic.w	r3, r3, #1
 8008d8e:	6013      	str	r3, [r2, #0]
				hi2c->State = HAL_I2C_STATE_READY;
 8008d90:	2320      	movs	r3, #32
 8008d92:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8008d96:	e7c1      	b.n	8008d1c <I2C_ITError+0x58>
	}else if (hi2c->State == HAL_I2C_STATE_ABORT) {
 8008d98:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8008d9c:	2960      	cmp	r1, #96	; 0x60
 8008d9e:	d114      	bne.n	8008dca <I2C_ITError+0x106>
		hi2c->State = HAL_I2C_STATE_READY;
 8008da0:	2120      	movs	r1, #32
 8008da2:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
		hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008da6:	6422      	str	r2, [r4, #64]	; 0x40
		if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) {
 8008da8:	695a      	ldr	r2, [r3, #20]
 8008daa:	0651      	lsls	r1, r2, #25
 8008dac:	d504      	bpl.n	8008db8 <I2C_ITError+0xf4>
			(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8008dae:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008db0:	691b      	ldr	r3, [r3, #16]
 8008db2:	1c51      	adds	r1, r2, #1
 8008db4:	6261      	str	r1, [r4, #36]	; 0x24
 8008db6:	7013      	strb	r3, [r2, #0]
		__HAL_I2C_DISABLE(hi2c);
 8008db8:	6822      	ldr	r2, [r4, #0]
 8008dba:	6813      	ldr	r3, [r2, #0]
 8008dbc:	f023 0301 	bic.w	r3, r3, #1
 8008dc0:	6013      	str	r3, [r2, #0]
		HAL_I2C_AbortCpltCallback(hi2c);
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	f7ff ff7d 	bl	8008cc2 <HAL_I2C_AbortCpltCallback>
 8008dc8:	e7aa      	b.n	8008d20 <I2C_ITError+0x5c>
		if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) {
 8008dca:	695a      	ldr	r2, [r3, #20]
 8008dcc:	0652      	lsls	r2, r2, #25
 8008dce:	d504      	bpl.n	8008dda <I2C_ITError+0x116>
			(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8008dd0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	1c51      	adds	r1, r2, #1
 8008dd6:	6261      	str	r1, [r4, #36]	; 0x24
 8008dd8:	7013      	strb	r3, [r2, #0]
		HAL_I2C_ErrorCallback(hi2c);
 8008dda:	4620      	mov	r0, r4
 8008ddc:	f7ff ff70 	bl	8008cc0 <HAL_I2C_ErrorCallback>
 8008de0:	e79e      	b.n	8008d20 <I2C_ITError+0x5c>
 8008de2:	bf00      	nop
 8008de4:	080095f5 	.word	0x080095f5
 8008de8:	ffff0000 	.word	0xffff0000

08008dec <HAL_I2C_EV_IRQHandler>:
	uint32_t sr2itflags = READ_REG(hi2c->Instance->SR2);
 8008dec:	6803      	ldr	r3, [r0, #0]
{
 8008dee:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t sr2itflags = READ_REG(hi2c->Instance->SR2);
 8008df0:	699d      	ldr	r5, [r3, #24]
	uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8008df2:	6959      	ldr	r1, [r3, #20]
	uint32_t itsources = READ_REG(hi2c->Instance->CR2);
 8008df4:	685a      	ldr	r2, [r3, #4]
	uint32_t CurrentMode = hi2c->Mode;
 8008df6:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
 8008dfa:	b2e4      	uxtb	r4, r4
	if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) {
 8008dfc:	2c10      	cmp	r4, #16
{
 8008dfe:	b08d      	sub	sp, #52	; 0x34
	if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) {
 8008e00:	d002      	beq.n	8008e08 <HAL_I2C_EV_IRQHandler+0x1c>
 8008e02:	2c40      	cmp	r4, #64	; 0x40
 8008e04:	f040 8255 	bne.w	80092b2 <HAL_I2C_EV_IRQHandler+0x4c6>
		if (((sr1itflags & I2C_FLAG_SB) != RESET) && ((itsources & I2C_IT_EVT) != RESET)) {
 8008e08:	f011 1f01 	tst.w	r1, #65537	; 0x10001
 8008e0c:	d066      	beq.n	8008edc <HAL_I2C_EV_IRQHandler+0xf0>
 8008e0e:	0597      	lsls	r7, r2, #22
 8008e10:	d564      	bpl.n	8008edc <HAL_I2C_EV_IRQHandler+0xf0>
	if (hi2c->Mode == HAL_I2C_MODE_MEM) {
 8008e12:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
 8008e16:	2c40      	cmp	r4, #64	; 0x40
 8008e18:	d143      	bne.n	8008ea2 <HAL_I2C_EV_IRQHandler+0xb6>
		if (hi2c->EventCount == 0U) {
 8008e1a:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8008e1c:	2c00      	cmp	r4, #0
 8008e1e:	d13b      	bne.n	8008e98 <HAL_I2C_EV_IRQHandler+0xac>
			hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008e20:	6c44      	ldr	r4, [r0, #68]	; 0x44
				hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008e22:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
				hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8008e26:	611c      	str	r4, [r3, #16]
		if ((sr2itflags & I2C_FLAG_TRA) != RESET) {
 8008e28:	4e98      	ldr	r6, [pc, #608]	; (800908c <HAL_I2C_EV_IRQHandler+0x2a0>)
 8008e2a:	4c99      	ldr	r4, [pc, #612]	; (8009090 <HAL_I2C_EV_IRQHandler+0x2a4>)
 8008e2c:	402e      	ands	r6, r5
 8008e2e:	400c      	ands	r4, r1
 8008e30:	2e00      	cmp	r6, #0
 8008e32:	f000 819f 	beq.w	8009174 <HAL_I2C_EV_IRQHandler+0x388>
			if (((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET)) {
 8008e36:	4d97      	ldr	r5, [pc, #604]	; (8009094 <HAL_I2C_EV_IRQHandler+0x2a8>)
 8008e38:	400d      	ands	r5, r1
 8008e3a:	2d00      	cmp	r5, #0
 8008e3c:	f000 8166 	beq.w	800910c <HAL_I2C_EV_IRQHandler+0x320>
 8008e40:	0555      	lsls	r5, r2, #21
 8008e42:	f140 8163 	bpl.w	800910c <HAL_I2C_EV_IRQHandler+0x320>
 8008e46:	2c00      	cmp	r4, #0
 8008e48:	f040 8160 	bne.w	800910c <HAL_I2C_EV_IRQHandler+0x320>
	uint32_t CurrentState = hi2c->State;
 8008e4c:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
	if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX)) {
 8008e50:	8d05      	ldrh	r5, [r0, #40]	; 0x28
	uint32_t CurrentMode = hi2c->Mode;
 8008e52:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
	uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008e56:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
	uint32_t CurrentState = hi2c->State;
 8008e58:	b2d2      	uxtb	r2, r2
	uint32_t CurrentMode = hi2c->Mode;
 8008e5a:	b2c9      	uxtb	r1, r1
	if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX)) {
 8008e5c:	2d00      	cmp	r5, #0
 8008e5e:	f040 8105 	bne.w	800906c <HAL_I2C_EV_IRQHandler+0x280>
 8008e62:	2a21      	cmp	r2, #33	; 0x21
 8008e64:	f040 8104 	bne.w	8009070 <HAL_I2C_EV_IRQHandler+0x284>
		if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME)) {
 8008e68:	2c04      	cmp	r4, #4
 8008e6a:	f000 816c 	beq.w	8009146 <HAL_I2C_EV_IRQHandler+0x35a>
 8008e6e:	2c08      	cmp	r4, #8
 8008e70:	f000 8169 	beq.w	8009146 <HAL_I2C_EV_IRQHandler+0x35a>
 8008e74:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
 8008e78:	f000 8165 	beq.w	8009146 <HAL_I2C_EV_IRQHandler+0x35a>
			__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008e7c:	685a      	ldr	r2, [r3, #4]
 8008e7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008e82:	605a      	str	r2, [r3, #4]
			hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008e84:	2311      	movs	r3, #17
 8008e86:	6303      	str	r3, [r0, #48]	; 0x30
			hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e88:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
				hi2c->State = HAL_I2C_STATE_READY;
 8008e8c:	2320      	movs	r3, #32
 8008e8e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
				HAL_I2C_MasterTxCpltCallback(hi2c);
 8008e92:	f7ff ff0d 	bl	8008cb0 <HAL_I2C_MasterTxCpltCallback>
 8008e96:	e0f6      	b.n	8009086 <HAL_I2C_EV_IRQHandler+0x29a>
			hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008e98:	6c44      	ldr	r4, [r0, #68]	; 0x44
				hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008e9a:	f044 0401 	orr.w	r4, r4, #1
 8008e9e:	b2e4      	uxtb	r4, r4
 8008ea0:	e7c1      	b.n	8008e26 <HAL_I2C_EV_IRQHandler+0x3a>
		if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT) {
 8008ea2:	6904      	ldr	r4, [r0, #16]
 8008ea4:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 8008ea8:	d105      	bne.n	8008eb6 <HAL_I2C_EV_IRQHandler+0xca>
			if (hi2c->State == HAL_I2C_STATE_BUSY_TX) {
 8008eaa:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8008eae:	2c21      	cmp	r4, #33	; 0x21
				hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008eb0:	6c44      	ldr	r4, [r0, #68]	; 0x44
			if (hi2c->State == HAL_I2C_STATE_BUSY_TX) {
 8008eb2:	d1f2      	bne.n	8008e9a <HAL_I2C_EV_IRQHandler+0xae>
 8008eb4:	e7b5      	b.n	8008e22 <HAL_I2C_EV_IRQHandler+0x36>
			if (hi2c->EventCount == 0U) {
 8008eb6:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8008eb8:	b934      	cbnz	r4, 8008ec8 <HAL_I2C_EV_IRQHandler+0xdc>
				hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8008eba:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8008ebc:	11e4      	asrs	r4, r4, #7
 8008ebe:	f004 0406 	and.w	r4, r4, #6
 8008ec2:	f044 04f0 	orr.w	r4, r4, #240	; 0xf0
 8008ec6:	e7ae      	b.n	8008e26 <HAL_I2C_EV_IRQHandler+0x3a>
			}else if (hi2c->EventCount == 1U) {
 8008ec8:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8008eca:	2c01      	cmp	r4, #1
 8008ecc:	d1ac      	bne.n	8008e28 <HAL_I2C_EV_IRQHandler+0x3c>
				hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8008ece:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8008ed0:	11e4      	asrs	r4, r4, #7
 8008ed2:	f004 0406 	and.w	r4, r4, #6
 8008ed6:	f044 04f1 	orr.w	r4, r4, #241	; 0xf1
 8008eda:	e7a4      	b.n	8008e26 <HAL_I2C_EV_IRQHandler+0x3a>
		else if (((sr1itflags & I2C_FLAG_ADD10) != RESET) && ((itsources & I2C_IT_EVT) != RESET)) {
 8008edc:	4c6e      	ldr	r4, [pc, #440]	; (8009098 <HAL_I2C_EV_IRQHandler+0x2ac>)
 8008ede:	400c      	ands	r4, r1
 8008ee0:	b11c      	cbz	r4, 8008eea <HAL_I2C_EV_IRQHandler+0xfe>
 8008ee2:	0596      	lsls	r6, r2, #22
 8008ee4:	d501      	bpl.n	8008eea <HAL_I2C_EV_IRQHandler+0xfe>
	hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8008ee6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8008ee8:	e7d9      	b.n	8008e9e <HAL_I2C_EV_IRQHandler+0xb2>
		else if (((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET)) {
 8008eea:	4c6c      	ldr	r4, [pc, #432]	; (800909c <HAL_I2C_EV_IRQHandler+0x2b0>)
 8008eec:	400c      	ands	r4, r1
 8008eee:	2c00      	cmp	r4, #0
 8008ef0:	d09a      	beq.n	8008e28 <HAL_I2C_EV_IRQHandler+0x3c>
 8008ef2:	0594      	lsls	r4, r2, #22
 8008ef4:	d598      	bpl.n	8008e28 <HAL_I2C_EV_IRQHandler+0x3c>
	uint32_t CurrentMode = hi2c->Mode;
 8008ef6:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
	uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008efa:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
	uint32_t Prev_State = hi2c->PreviousState;
 8008efc:	f8d0 e030 	ldr.w	lr, [r0, #48]	; 0x30
	if (hi2c->State == HAL_I2C_STATE_BUSY_RX) {
 8008f00:	f890 703d 	ldrb.w	r7, [r0, #61]	; 0x3d
 8008f04:	2f22      	cmp	r7, #34	; 0x22
	uint32_t CurrentMode = hi2c->Mode;
 8008f06:	b2e4      	uxtb	r4, r4
	if (hi2c->State == HAL_I2C_STATE_BUSY_RX) {
 8008f08:	f040 80a8 	bne.w	800905c <HAL_I2C_EV_IRQHandler+0x270>
		if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM)) {
 8008f0c:	6d07      	ldr	r7, [r0, #80]	; 0x50
 8008f0e:	b947      	cbnz	r7, 8008f22 <HAL_I2C_EV_IRQHandler+0x136>
 8008f10:	2c40      	cmp	r4, #64	; 0x40
 8008f12:	d106      	bne.n	8008f22 <HAL_I2C_EV_IRQHandler+0x136>
			__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f14:	9701      	str	r7, [sp, #4]
 8008f16:	695c      	ldr	r4, [r3, #20]
 8008f18:	9401      	str	r4, [sp, #4]
 8008f1a:	699c      	ldr	r4, [r3, #24]
 8008f1c:	9401      	str	r4, [sp, #4]
 8008f1e:	9c01      	ldr	r4, [sp, #4]
 8008f20:	e782      	b.n	8008e28 <HAL_I2C_EV_IRQHandler+0x3c>
		}else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)) {
 8008f22:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8008f24:	b98c      	cbnz	r4, 8008f4a <HAL_I2C_EV_IRQHandler+0x15e>
 8008f26:	6907      	ldr	r7, [r0, #16]
 8008f28:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
 8008f2c:	d10d      	bne.n	8008f4a <HAL_I2C_EV_IRQHandler+0x15e>
			__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f2e:	9402      	str	r4, [sp, #8]
 8008f30:	695c      	ldr	r4, [r3, #20]
 8008f32:	9402      	str	r4, [sp, #8]
 8008f34:	699c      	ldr	r4, [r3, #24]
 8008f36:	9402      	str	r4, [sp, #8]
 8008f38:	9c02      	ldr	r4, [sp, #8]
			hi2c->Instance->CR1 |= I2C_CR1_START;
 8008f3a:	681c      	ldr	r4, [r3, #0]
 8008f3c:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8008f40:	601c      	str	r4, [r3, #0]
			hi2c->EventCount++;
 8008f42:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8008f44:	3401      	adds	r4, #1
			hi2c->EventCount = 0U;
 8008f46:	6504      	str	r4, [r0, #80]	; 0x50
 8008f48:	e76e      	b.n	8008e28 <HAL_I2C_EV_IRQHandler+0x3c>
			if (hi2c->XferCount == 0U) {
 8008f4a:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8008f4c:	b2a4      	uxth	r4, r4
 8008f4e:	b954      	cbnz	r4, 8008f66 <HAL_I2C_EV_IRQHandler+0x17a>
				__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f50:	9403      	str	r4, [sp, #12]
 8008f52:	695c      	ldr	r4, [r3, #20]
 8008f54:	9403      	str	r4, [sp, #12]
 8008f56:	699c      	ldr	r4, [r3, #24]
 8008f58:	9403      	str	r4, [sp, #12]
 8008f5a:	9c03      	ldr	r4, [sp, #12]
						hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8008f5c:	681c      	ldr	r4, [r3, #0]
 8008f5e:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8008f62:	601c      	str	r4, [r3, #0]
 8008f64:	e019      	b.n	8008f9a <HAL_I2C_EV_IRQHandler+0x1ae>
			}else if (hi2c->XferCount == 1U) {
 8008f66:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8008f68:	b2a4      	uxth	r4, r4
 8008f6a:	2c01      	cmp	r4, #1
 8008f6c:	d142      	bne.n	8008ff4 <HAL_I2C_EV_IRQHandler+0x208>
				if (CurrentXferOptions == I2C_NO_OPTION_FRAME) {
 8008f6e:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 8008f72:	d11b      	bne.n	8008fac <HAL_I2C_EV_IRQHandler+0x1c0>
					hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8008f74:	681c      	ldr	r4, [r3, #0]
 8008f76:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8008f7a:	601c      	str	r4, [r3, #0]
					if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) {
 8008f7c:	685c      	ldr	r4, [r3, #4]
 8008f7e:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
 8008f82:	d00c      	beq.n	8008f9e <HAL_I2C_EV_IRQHandler+0x1b2>
						hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8008f84:	681c      	ldr	r4, [r3, #0]
 8008f86:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8008f8a:	601c      	str	r4, [r3, #0]
						__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f8c:	2400      	movs	r4, #0
 8008f8e:	9404      	str	r4, [sp, #16]
 8008f90:	695c      	ldr	r4, [r3, #20]
 8008f92:	9404      	str	r4, [sp, #16]
 8008f94:	699c      	ldr	r4, [r3, #24]
 8008f96:	9404      	str	r4, [sp, #16]
 8008f98:	9c04      	ldr	r4, [sp, #16]
			hi2c->EventCount = 0U;
 8008f9a:	2400      	movs	r4, #0
 8008f9c:	e7d3      	b.n	8008f46 <HAL_I2C_EV_IRQHandler+0x15a>
						__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f9e:	9405      	str	r4, [sp, #20]
 8008fa0:	695c      	ldr	r4, [r3, #20]
 8008fa2:	9405      	str	r4, [sp, #20]
 8008fa4:	699c      	ldr	r4, [r3, #24]
 8008fa6:	9405      	str	r4, [sp, #20]
 8008fa8:	9c05      	ldr	r4, [sp, #20]
 8008faa:	e7d7      	b.n	8008f5c <HAL_I2C_EV_IRQHandler+0x170>
				else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8008fac:	2e04      	cmp	r6, #4
 8008fae:	d015      	beq.n	8008fdc <HAL_I2C_EV_IRQHandler+0x1f0>
 8008fb0:	2e08      	cmp	r6, #8
 8008fb2:	d013      	beq.n	8008fdc <HAL_I2C_EV_IRQHandler+0x1f0>
					 && (Prev_State != I2C_STATE_MASTER_BUSY_RX)) {
 8008fb4:	f1be 0f12 	cmp.w	lr, #18
 8008fb8:	d010      	beq.n	8008fdc <HAL_I2C_EV_IRQHandler+0x1f0>
					if (hi2c->XferOptions != I2C_NEXT_FRAME) {
 8008fba:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8008fbc:	2c02      	cmp	r4, #2
						hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8008fbe:	681c      	ldr	r4, [r3, #0]
 8008fc0:	bf14      	ite	ne
 8008fc2:	f424 6480 	bicne.w	r4, r4, #1024	; 0x400
						hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8008fc6:	f444 6480 	orreq.w	r4, r4, #1024	; 0x400
 8008fca:	601c      	str	r4, [r3, #0]
					__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008fcc:	2400      	movs	r4, #0
 8008fce:	9406      	str	r4, [sp, #24]
 8008fd0:	695c      	ldr	r4, [r3, #20]
 8008fd2:	9406      	str	r4, [sp, #24]
 8008fd4:	699c      	ldr	r4, [r3, #24]
 8008fd6:	9406      	str	r4, [sp, #24]
 8008fd8:	9c06      	ldr	r4, [sp, #24]
 8008fda:	e7de      	b.n	8008f9a <HAL_I2C_EV_IRQHandler+0x1ae>
					hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8008fdc:	681c      	ldr	r4, [r3, #0]
 8008fde:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8008fe2:	601c      	str	r4, [r3, #0]
					__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008fe4:	2400      	movs	r4, #0
 8008fe6:	9407      	str	r4, [sp, #28]
 8008fe8:	695c      	ldr	r4, [r3, #20]
 8008fea:	9407      	str	r4, [sp, #28]
 8008fec:	699c      	ldr	r4, [r3, #24]
 8008fee:	9407      	str	r4, [sp, #28]
 8008ff0:	9c07      	ldr	r4, [sp, #28]
 8008ff2:	e7b3      	b.n	8008f5c <HAL_I2C_EV_IRQHandler+0x170>
			}else if (hi2c->XferCount == 2U) {
 8008ff4:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8008ff6:	b2a4      	uxth	r4, r4
 8008ff8:	2c02      	cmp	r4, #2
 8008ffa:	d11c      	bne.n	8009036 <HAL_I2C_EV_IRQHandler+0x24a>
				if (hi2c->XferOptions != I2C_NEXT_FRAME) {
 8008ffc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8008ffe:	2c02      	cmp	r4, #2
					hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8009000:	681c      	ldr	r4, [r3, #0]
 8009002:	bf1d      	ittte	ne
 8009004:	f424 6480 	bicne.w	r4, r4, #1024	; 0x400
 8009008:	601c      	strne	r4, [r3, #0]
					hi2c->Instance->CR1 |= I2C_CR1_POS;
 800900a:	681c      	ldrne	r4, [r3, #0]
					hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800900c:	f444 6480 	orreq.w	r4, r4, #1024	; 0x400
					hi2c->Instance->CR1 |= I2C_CR1_POS;
 8009010:	bf18      	it	ne
 8009012:	f444 6400 	orrne.w	r4, r4, #2048	; 0x800
					hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8009016:	601c      	str	r4, [r3, #0]
				if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) {
 8009018:	685c      	ldr	r4, [r3, #4]
 800901a:	0527      	lsls	r7, r4, #20
					hi2c->Instance->CR2 |= I2C_CR2_LAST;
 800901c:	bf42      	ittt	mi
 800901e:	685c      	ldrmi	r4, [r3, #4]
 8009020:	f444 5480 	orrmi.w	r4, r4, #4096	; 0x1000
 8009024:	605c      	strmi	r4, [r3, #4]
				__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009026:	2400      	movs	r4, #0
 8009028:	9408      	str	r4, [sp, #32]
 800902a:	695c      	ldr	r4, [r3, #20]
 800902c:	9408      	str	r4, [sp, #32]
 800902e:	699c      	ldr	r4, [r3, #24]
 8009030:	9408      	str	r4, [sp, #32]
 8009032:	9c08      	ldr	r4, [sp, #32]
 8009034:	e7b1      	b.n	8008f9a <HAL_I2C_EV_IRQHandler+0x1ae>
				hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8009036:	681c      	ldr	r4, [r3, #0]
 8009038:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 800903c:	601c      	str	r4, [r3, #0]
				if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) {
 800903e:	685c      	ldr	r4, [r3, #4]
 8009040:	0526      	lsls	r6, r4, #20
					hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8009042:	bf42      	ittt	mi
 8009044:	685c      	ldrmi	r4, [r3, #4]
 8009046:	f444 5480 	orrmi.w	r4, r4, #4096	; 0x1000
 800904a:	605c      	strmi	r4, [r3, #4]
				__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800904c:	2400      	movs	r4, #0
 800904e:	9409      	str	r4, [sp, #36]	; 0x24
 8009050:	695c      	ldr	r4, [r3, #20]
 8009052:	9409      	str	r4, [sp, #36]	; 0x24
 8009054:	699c      	ldr	r4, [r3, #24]
 8009056:	9409      	str	r4, [sp, #36]	; 0x24
 8009058:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800905a:	e79e      	b.n	8008f9a <HAL_I2C_EV_IRQHandler+0x1ae>
		__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800905c:	2400      	movs	r4, #0
 800905e:	940a      	str	r4, [sp, #40]	; 0x28
 8009060:	695c      	ldr	r4, [r3, #20]
 8009062:	940a      	str	r4, [sp, #40]	; 0x28
 8009064:	699c      	ldr	r4, [r3, #24]
 8009066:	940a      	str	r4, [sp, #40]	; 0x28
 8009068:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800906a:	e6dd      	b.n	8008e28 <HAL_I2C_EV_IRQHandler+0x3c>
	}else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800906c:	2a21      	cmp	r2, #33	; 0x21
 800906e:	d003      	beq.n	8009078 <HAL_I2C_EV_IRQHandler+0x28c>
 8009070:	2940      	cmp	r1, #64	; 0x40
 8009072:	d108      	bne.n	8009086 <HAL_I2C_EV_IRQHandler+0x29a>
		  ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX))) {
 8009074:	2a22      	cmp	r2, #34	; 0x22
 8009076:	d106      	bne.n	8009086 <HAL_I2C_EV_IRQHandler+0x29a>
		if (hi2c->XferCount == 0U) {
 8009078:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800907a:	b292      	uxth	r2, r2
 800907c:	b982      	cbnz	r2, 80090a0 <HAL_I2C_EV_IRQHandler+0x2b4>
			__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800907e:	685a      	ldr	r2, [r3, #4]
 8009080:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009084:	605a      	str	r2, [r3, #4]
}
 8009086:	b00d      	add	sp, #52	; 0x34
 8009088:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800908a:	bf00      	nop
 800908c:	00100004 	.word	0x00100004
 8009090:	00010004 	.word	0x00010004
 8009094:	00010080 	.word	0x00010080
 8009098:	00010008 	.word	0x00010008
 800909c:	00010002 	.word	0x00010002
			if (hi2c->Mode == HAL_I2C_MODE_MEM) {
 80090a0:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 80090a4:	2a40      	cmp	r2, #64	; 0x40
 80090a6:	d127      	bne.n	80090f8 <HAL_I2C_EV_IRQHandler+0x30c>
				if (hi2c->EventCount == 0) {
 80090a8:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80090aa:	b97a      	cbnz	r2, 80090cc <HAL_I2C_EV_IRQHandler+0x2e0>
					if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT) {
 80090ac:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80090ae:	2a01      	cmp	r2, #1
						hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80090b0:	6c82      	ldr	r2, [r0, #72]	; 0x48
					if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT) {
 80090b2:	d105      	bne.n	80090c0 <HAL_I2C_EV_IRQHandler+0x2d4>
 80090b4:	b2d2      	uxtb	r2, r2
						hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80090b6:	611a      	str	r2, [r3, #16]
						hi2c->EventCount += 2;
 80090b8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80090ba:	3302      	adds	r3, #2
						hi2c->EventCount++;
 80090bc:	6503      	str	r3, [r0, #80]	; 0x50
 80090be:	e7e2      	b.n	8009086 <HAL_I2C_EV_IRQHandler+0x29a>
						hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80090c0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80090c4:	611a      	str	r2, [r3, #16]
						hi2c->EventCount++;
 80090c6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80090c8:	3301      	adds	r3, #1
 80090ca:	e7f7      	b.n	80090bc <HAL_I2C_EV_IRQHandler+0x2d0>
				}else if (hi2c->EventCount == 1) {
 80090cc:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80090ce:	2a01      	cmp	r2, #1
 80090d0:	d102      	bne.n	80090d8 <HAL_I2C_EV_IRQHandler+0x2ec>
					hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80090d2:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80090d4:	b2d2      	uxtb	r2, r2
 80090d6:	e7f5      	b.n	80090c4 <HAL_I2C_EV_IRQHandler+0x2d8>
				}else if (hi2c->EventCount == 2) {
 80090d8:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80090da:	2a02      	cmp	r2, #2
 80090dc:	d1d3      	bne.n	8009086 <HAL_I2C_EV_IRQHandler+0x29a>
					if (hi2c->State == HAL_I2C_STATE_BUSY_RX) {
 80090de:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80090e2:	2a22      	cmp	r2, #34	; 0x22
 80090e4:	d104      	bne.n	80090f0 <HAL_I2C_EV_IRQHandler+0x304>
						hi2c->Instance->CR1 |= I2C_CR1_START;
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090ec:	601a      	str	r2, [r3, #0]
 80090ee:	e7ca      	b.n	8009086 <HAL_I2C_EV_IRQHandler+0x29a>
					}else if (hi2c->State == HAL_I2C_STATE_BUSY_TX) {
 80090f0:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80090f4:	2a21      	cmp	r2, #33	; 0x21
 80090f6:	d1c6      	bne.n	8009086 <HAL_I2C_EV_IRQHandler+0x29a>
		hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80090f8:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80090fa:	1c51      	adds	r1, r2, #1
 80090fc:	6241      	str	r1, [r0, #36]	; 0x24
 80090fe:	7812      	ldrb	r2, [r2, #0]
 8009100:	611a      	str	r2, [r3, #16]
		hi2c->XferCount--;
 8009102:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8009104:	3b01      	subs	r3, #1
 8009106:	b29b      	uxth	r3, r3
 8009108:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 800910a:	e7bc      	b.n	8009086 <HAL_I2C_EV_IRQHandler+0x29a>
			else if (((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET)) {
 800910c:	2c00      	cmp	r4, #0
 800910e:	d0ba      	beq.n	8009086 <HAL_I2C_EV_IRQHandler+0x29a>
 8009110:	0594      	lsls	r4, r2, #22
 8009112:	d5b8      	bpl.n	8009086 <HAL_I2C_EV_IRQHandler+0x29a>
	uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009114:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	if (hi2c->State == HAL_I2C_STATE_BUSY_TX) {
 8009116:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 800911a:	2a21      	cmp	r2, #33	; 0x21
 800911c:	d1b3      	bne.n	8009086 <HAL_I2C_EV_IRQHandler+0x29a>
		if (hi2c->XferCount != 0U) {
 800911e:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8009120:	b292      	uxth	r2, r2
 8009122:	2a00      	cmp	r2, #0
 8009124:	d1e8      	bne.n	80090f8 <HAL_I2C_EV_IRQHandler+0x30c>
			if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME)) {
 8009126:	2904      	cmp	r1, #4
 8009128:	d00d      	beq.n	8009146 <HAL_I2C_EV_IRQHandler+0x35a>
 800912a:	2908      	cmp	r1, #8
 800912c:	d00b      	beq.n	8009146 <HAL_I2C_EV_IRQHandler+0x35a>
 800912e:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8009132:	d008      	beq.n	8009146 <HAL_I2C_EV_IRQHandler+0x35a>
				__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009134:	6859      	ldr	r1, [r3, #4]
 8009136:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 800913a:	6059      	str	r1, [r3, #4]
				hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800913c:	2311      	movs	r3, #17
 800913e:	6303      	str	r3, [r0, #48]	; 0x30
				hi2c->Mode = HAL_I2C_MODE_NONE;
 8009140:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
 8009144:	e6a2      	b.n	8008e8c <HAL_I2C_EV_IRQHandler+0xa0>
				__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009146:	685a      	ldr	r2, [r3, #4]
 8009148:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800914c:	605a      	str	r2, [r3, #4]
				hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009154:	601a      	str	r2, [r3, #0]
				hi2c->PreviousState = I2C_STATE_NONE;
 8009156:	2300      	movs	r3, #0
				hi2c->State = HAL_I2C_STATE_READY;
 8009158:	2220      	movs	r2, #32
				hi2c->PreviousState = I2C_STATE_NONE;
 800915a:	6303      	str	r3, [r0, #48]	; 0x30
				hi2c->State = HAL_I2C_STATE_READY;
 800915c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
				if (hi2c->Mode == HAL_I2C_MODE_MEM) {
 8009160:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
					hi2c->Mode = HAL_I2C_MODE_NONE;
 8009164:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
				if (hi2c->Mode == HAL_I2C_MODE_MEM) {
 8009168:	2a40      	cmp	r2, #64	; 0x40
 800916a:	f47f ae92 	bne.w	8008e92 <HAL_I2C_EV_IRQHandler+0xa6>
					HAL_I2C_MemTxCpltCallback(hi2c);
 800916e:	f7ff fda5 	bl	8008cbc <HAL_I2C_MemTxCpltCallback>
 8009172:	e788      	b.n	8009086 <HAL_I2C_EV_IRQHandler+0x29a>
			if (((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET)) {
 8009174:	4d90      	ldr	r5, [pc, #576]	; (80093b8 <HAL_I2C_EV_IRQHandler+0x5cc>)
 8009176:	400d      	ands	r5, r1
 8009178:	2d00      	cmp	r5, #0
 800917a:	d041      	beq.n	8009200 <HAL_I2C_EV_IRQHandler+0x414>
 800917c:	0551      	lsls	r1, r2, #21
 800917e:	d53f      	bpl.n	8009200 <HAL_I2C_EV_IRQHandler+0x414>
 8009180:	2c00      	cmp	r4, #0
 8009182:	d13d      	bne.n	8009200 <HAL_I2C_EV_IRQHandler+0x414>
	if (hi2c->State == HAL_I2C_STATE_BUSY_RX) {
 8009184:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8009188:	2a22      	cmp	r2, #34	; 0x22
 800918a:	f47f af7c 	bne.w	8009086 <HAL_I2C_EV_IRQHandler+0x29a>
		tmp = hi2c->XferCount;
 800918e:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8009190:	b292      	uxth	r2, r2
		if (tmp > 3U) {
 8009192:	2a03      	cmp	r2, #3
 8009194:	d913      	bls.n	80091be <HAL_I2C_EV_IRQHandler+0x3d2>
			(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8009196:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8009198:	691b      	ldr	r3, [r3, #16]
 800919a:	1c51      	adds	r1, r2, #1
 800919c:	6241      	str	r1, [r0, #36]	; 0x24
 800919e:	7013      	strb	r3, [r2, #0]
			hi2c->XferCount--;
 80091a0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80091a2:	3b01      	subs	r3, #1
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	8543      	strh	r3, [r0, #42]	; 0x2a
			if (hi2c->XferCount == 3) {
 80091a8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	2b03      	cmp	r3, #3
 80091ae:	f47f af6a 	bne.w	8009086 <HAL_I2C_EV_IRQHandler+0x29a>
				__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80091b2:	6802      	ldr	r2, [r0, #0]
 80091b4:	6853      	ldr	r3, [r2, #4]
 80091b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80091ba:	6053      	str	r3, [r2, #4]
 80091bc:	e763      	b.n	8009086 <HAL_I2C_EV_IRQHandler+0x29a>
		}else if ((tmp == 1U) || (tmp == 0U)) {
 80091be:	2a01      	cmp	r2, #1
 80091c0:	f63f af61 	bhi.w	8009086 <HAL_I2C_EV_IRQHandler+0x29a>
			hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091ca:	601a      	str	r2, [r3, #0]
			__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80091cc:	685a      	ldr	r2, [r3, #4]
 80091ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80091d2:	605a      	str	r2, [r3, #4]
			(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80091d4:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80091d6:	691b      	ldr	r3, [r3, #16]
 80091d8:	1c51      	adds	r1, r2, #1
 80091da:	6241      	str	r1, [r0, #36]	; 0x24
 80091dc:	7013      	strb	r3, [r2, #0]
			hi2c->XferCount--;
 80091de:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80091e0:	3b01      	subs	r3, #1
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	8543      	strh	r3, [r0, #42]	; 0x2a
			hi2c->State = HAL_I2C_STATE_READY;
 80091e6:	2320      	movs	r3, #32
 80091e8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
			hi2c->PreviousState = I2C_STATE_NONE;
 80091ec:	6304      	str	r4, [r0, #48]	; 0x30
			if (hi2c->Mode == HAL_I2C_MODE_MEM) {
 80091ee:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
				hi2c->Mode = HAL_I2C_MODE_NONE;
 80091f2:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
			if (hi2c->Mode == HAL_I2C_MODE_MEM) {
 80091f6:	2b40      	cmp	r3, #64	; 0x40
		if (hi2c->Mode == HAL_I2C_MODE_MEM) {
 80091f8:	d158      	bne.n	80092ac <HAL_I2C_EV_IRQHandler+0x4c0>
			HAL_I2C_MemRxCpltCallback(hi2c);
 80091fa:	f7ff fd60 	bl	8008cbe <HAL_I2C_MemRxCpltCallback>
 80091fe:	e742      	b.n	8009086 <HAL_I2C_EV_IRQHandler+0x29a>
			else if (((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET)) {
 8009200:	2c00      	cmp	r4, #0
 8009202:	f43f af40 	beq.w	8009086 <HAL_I2C_EV_IRQHandler+0x29a>
 8009206:	0597      	lsls	r7, r2, #22
 8009208:	f57f af3d 	bpl.w	8009086 <HAL_I2C_EV_IRQHandler+0x29a>
	uint32_t CurrentXferOptions = hi2c->XferOptions;
 800920c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	if (hi2c->XferCount == 4U) {
 800920e:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8009210:	b292      	uxth	r2, r2
 8009212:	2a04      	cmp	r2, #4
 8009214:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8009216:	d108      	bne.n	800922a <HAL_I2C_EV_IRQHandler+0x43e>
		__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009218:	6859      	ldr	r1, [r3, #4]
 800921a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800921e:	6059      	str	r1, [r3, #4]
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8009220:	1c51      	adds	r1, r2, #1
 8009222:	691b      	ldr	r3, [r3, #16]
 8009224:	6241      	str	r1, [r0, #36]	; 0x24
 8009226:	7013      	strb	r3, [r2, #0]
 8009228:	e76b      	b.n	8009102 <HAL_I2C_EV_IRQHandler+0x316>
	}else if (hi2c->XferCount == 3U) {
 800922a:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 800922c:	b2a4      	uxth	r4, r4
 800922e:	2c03      	cmp	r4, #3
 8009230:	d108      	bne.n	8009244 <HAL_I2C_EV_IRQHandler+0x458>
		__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009232:	6859      	ldr	r1, [r3, #4]
 8009234:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8009238:	6059      	str	r1, [r3, #4]
		hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800923a:	6819      	ldr	r1, [r3, #0]
 800923c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8009240:	6019      	str	r1, [r3, #0]
 8009242:	e7ed      	b.n	8009220 <HAL_I2C_EV_IRQHandler+0x434>
	}else if (hi2c->XferCount == 2U) {
 8009244:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8009246:	b2a4      	uxth	r4, r4
 8009248:	2c02      	cmp	r4, #2
 800924a:	d1e9      	bne.n	8009220 <HAL_I2C_EV_IRQHandler+0x434>
		if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)) {
 800924c:	3901      	subs	r1, #1
 800924e:	2901      	cmp	r1, #1
			hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8009250:	6819      	ldr	r1, [r3, #0]
 8009252:	bf9d      	ittte	ls
 8009254:	f421 6180 	bicls.w	r1, r1, #1024	; 0x400
 8009258:	6019      	strls	r1, [r3, #0]
			hi2c->Instance->CR1 |= I2C_CR1_START;
 800925a:	6819      	ldrls	r1, [r3, #0]
			hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800925c:	f441 7100 	orrhi.w	r1, r1, #512	; 0x200
			hi2c->Instance->CR1 |= I2C_CR1_START;
 8009260:	bf98      	it	ls
 8009262:	f441 7180 	orrls.w	r1, r1, #256	; 0x100
			hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8009266:	6019      	str	r1, [r3, #0]
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8009268:	691b      	ldr	r3, [r3, #16]
 800926a:	1c51      	adds	r1, r2, #1
 800926c:	6241      	str	r1, [r0, #36]	; 0x24
 800926e:	7013      	strb	r3, [r2, #0]
		hi2c->XferCount--;
 8009270:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8009272:	3b01      	subs	r3, #1
 8009274:	b29b      	uxth	r3, r3
 8009276:	8543      	strh	r3, [r0, #42]	; 0x2a
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8009278:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800927a:	1c5a      	adds	r2, r3, #1
 800927c:	6242      	str	r2, [r0, #36]	; 0x24
 800927e:	6802      	ldr	r2, [r0, #0]
 8009280:	6912      	ldr	r2, [r2, #16]
 8009282:	701a      	strb	r2, [r3, #0]
		hi2c->XferCount--;
 8009284:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
		__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009286:	6802      	ldr	r2, [r0, #0]
		hi2c->XferCount--;
 8009288:	3b01      	subs	r3, #1
 800928a:	b29b      	uxth	r3, r3
 800928c:	8543      	strh	r3, [r0, #42]	; 0x2a
		__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800928e:	6853      	ldr	r3, [r2, #4]
 8009290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009294:	6053      	str	r3, [r2, #4]
		hi2c->State = HAL_I2C_STATE_READY;
 8009296:	2320      	movs	r3, #32
 8009298:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
		hi2c->PreviousState = I2C_STATE_NONE;
 800929c:	2300      	movs	r3, #0
 800929e:	6303      	str	r3, [r0, #48]	; 0x30
		if (hi2c->Mode == HAL_I2C_MODE_MEM) {
 80092a0:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
			hi2c->Mode = HAL_I2C_MODE_NONE;
 80092a4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
		if (hi2c->Mode == HAL_I2C_MODE_MEM) {
 80092a8:	2a40      	cmp	r2, #64	; 0x40
 80092aa:	e7a5      	b.n	80091f8 <HAL_I2C_EV_IRQHandler+0x40c>
			HAL_I2C_MasterRxCpltCallback(hi2c);
 80092ac:	f7ff fd01 	bl	8008cb2 <HAL_I2C_MasterRxCpltCallback>
 80092b0:	e6e9      	b.n	8009086 <HAL_I2C_EV_IRQHandler+0x29a>
		if (((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET)) {
 80092b2:	4c42      	ldr	r4, [pc, #264]	; (80093bc <HAL_I2C_EV_IRQHandler+0x5d0>)
 80092b4:	400c      	ands	r4, r1
 80092b6:	b174      	cbz	r4, 80092d6 <HAL_I2C_EV_IRQHandler+0x4ea>
 80092b8:	0596      	lsls	r6, r2, #22
 80092ba:	d50c      	bpl.n	80092d6 <HAL_I2C_EV_IRQHandler+0x4ea>
	if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET) {
 80092bc:	6999      	ldr	r1, [r3, #24]
	if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET) {
 80092be:	699b      	ldr	r3, [r3, #24]
	if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET) {
 80092c0:	f081 0104 	eor.w	r1, r1, #4
	if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET) {
 80092c4:	061d      	lsls	r5, r3, #24
	uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80092c6:	f3c1 0180 	ubfx	r1, r1, #2, #1
		SlaveAddrCode = hi2c->Init.OwnAddress1;
 80092ca:	bf54      	ite	pl
 80092cc:	8982      	ldrhpl	r2, [r0, #12]
		SlaveAddrCode = hi2c->Init.OwnAddress2;
 80092ce:	8b02      	ldrhmi	r2, [r0, #24]
	HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80092d0:	f7ff fcf2 	bl	8008cb8 <HAL_I2C_AddrCallback>
 80092d4:	e6d7      	b.n	8009086 <HAL_I2C_EV_IRQHandler+0x29a>
		else if (((sr1itflags & I2C_FLAG_STOPF) != RESET) && ((itsources & I2C_IT_EVT) != RESET)) {
 80092d6:	4c3a      	ldr	r4, [pc, #232]	; (80093c0 <HAL_I2C_EV_IRQHandler+0x5d4>)
 80092d8:	400c      	ands	r4, r1
 80092da:	2c00      	cmp	r4, #0
 80092dc:	d074      	beq.n	80093c8 <HAL_I2C_EV_IRQHandler+0x5dc>
 80092de:	0594      	lsls	r4, r2, #22
 80092e0:	d572      	bpl.n	80093c8 <HAL_I2C_EV_IRQHandler+0x5dc>
	uint32_t CurrentState = hi2c->State;
 80092e2:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
	__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80092e6:	6859      	ldr	r1, [r3, #4]
 80092e8:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80092ec:	6059      	str	r1, [r3, #4]
	__HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80092ee:	2100      	movs	r1, #0
 80092f0:	910b      	str	r1, [sp, #44]	; 0x2c
 80092f2:	6959      	ldr	r1, [r3, #20]
 80092f4:	910b      	str	r1, [sp, #44]	; 0x2c
 80092f6:	6819      	ldr	r1, [r3, #0]
 80092f8:	f041 0101 	orr.w	r1, r1, #1
 80092fc:	6019      	str	r1, [r3, #0]
 80092fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
	hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8009300:	6819      	ldr	r1, [r3, #0]
 8009302:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8009306:	6019      	str	r1, [r3, #0]
	if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) {
 8009308:	6859      	ldr	r1, [r3, #4]
 800930a:	0509      	lsls	r1, r1, #20
	uint32_t CurrentState = hi2c->State;
 800930c:	b2d2      	uxtb	r2, r2
	if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) {
 800930e:	d50c      	bpl.n	800932a <HAL_I2C_EV_IRQHandler+0x53e>
		if ((hi2c->State == HAL_I2C_STATE_BUSY_RX) || (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)) {
 8009310:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8009314:	2922      	cmp	r1, #34	; 0x22
 8009316:	d003      	beq.n	8009320 <HAL_I2C_EV_IRQHandler+0x534>
 8009318:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 800931c:	292a      	cmp	r1, #42	; 0x2a
 800931e:	d129      	bne.n	8009374 <HAL_I2C_EV_IRQHandler+0x588>
			hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8009320:	6b81      	ldr	r1, [r0, #56]	; 0x38
			hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8009322:	6809      	ldr	r1, [r1, #0]
 8009324:	6849      	ldr	r1, [r1, #4]
 8009326:	b289      	uxth	r1, r1
 8009328:	8541      	strh	r1, [r0, #42]	; 0x2a
	if (hi2c->XferCount != 0U) {
 800932a:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 800932c:	b289      	uxth	r1, r1
 800932e:	b1e1      	cbz	r1, 800936a <HAL_I2C_EV_IRQHandler+0x57e>
		if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) {
 8009330:	6959      	ldr	r1, [r3, #20]
 8009332:	074f      	lsls	r7, r1, #29
 8009334:	d508      	bpl.n	8009348 <HAL_I2C_EV_IRQHandler+0x55c>
			(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8009336:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8009338:	691b      	ldr	r3, [r3, #16]
 800933a:	1c4c      	adds	r4, r1, #1
 800933c:	6244      	str	r4, [r0, #36]	; 0x24
 800933e:	700b      	strb	r3, [r1, #0]
			hi2c->XferCount--;
 8009340:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8009342:	3b01      	subs	r3, #1
 8009344:	b29b      	uxth	r3, r3
 8009346:	8543      	strh	r3, [r0, #42]	; 0x2a
		if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) {
 8009348:	6801      	ldr	r1, [r0, #0]
 800934a:	694b      	ldr	r3, [r1, #20]
 800934c:	065e      	lsls	r6, r3, #25
 800934e:	d508      	bpl.n	8009362 <HAL_I2C_EV_IRQHandler+0x576>
			(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8009350:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009352:	6909      	ldr	r1, [r1, #16]
 8009354:	1c5c      	adds	r4, r3, #1
 8009356:	6244      	str	r4, [r0, #36]	; 0x24
 8009358:	7019      	strb	r1, [r3, #0]
			hi2c->XferCount--;
 800935a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800935c:	3b01      	subs	r3, #1
 800935e:	b29b      	uxth	r3, r3
 8009360:	8543      	strh	r3, [r0, #42]	; 0x2a
		hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009362:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009364:	f043 0304 	orr.w	r3, r3, #4
 8009368:	6403      	str	r3, [r0, #64]	; 0x40
	if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE) {
 800936a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800936c:	b123      	cbz	r3, 8009378 <HAL_I2C_EV_IRQHandler+0x58c>
		I2C_ITError(hi2c);
 800936e:	f7ff fca9 	bl	8008cc4 <I2C_ITError>
 8009372:	e688      	b.n	8009086 <HAL_I2C_EV_IRQHandler+0x29a>
			hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8009374:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8009376:	e7d4      	b.n	8009322 <HAL_I2C_EV_IRQHandler+0x536>
		if ((CurrentState == HAL_I2C_STATE_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN) || \
 8009378:	f1a2 0128 	sub.w	r1, r2, #40	; 0x28
 800937c:	2902      	cmp	r1, #2
 800937e:	d80a      	bhi.n	8009396 <HAL_I2C_EV_IRQHandler+0x5aa>
			hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009380:	4a10      	ldr	r2, [pc, #64]	; (80093c4 <HAL_I2C_EV_IRQHandler+0x5d8>)
 8009382:	62c2      	str	r2, [r0, #44]	; 0x2c
			hi2c->State = HAL_I2C_STATE_READY;
 8009384:	2220      	movs	r2, #32
			hi2c->PreviousState = I2C_STATE_NONE;
 8009386:	6303      	str	r3, [r0, #48]	; 0x30
			hi2c->State = HAL_I2C_STATE_READY;
 8009388:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
			hi2c->Mode = HAL_I2C_MODE_NONE;
 800938c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
			HAL_I2C_ListenCpltCallback(hi2c);
 8009390:	f7ff fc93 	bl	8008cba <HAL_I2C_ListenCpltCallback>
 8009394:	e677      	b.n	8009086 <HAL_I2C_EV_IRQHandler+0x29a>
			if ((hi2c->PreviousState == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX)) {
 8009396:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009398:	2b22      	cmp	r3, #34	; 0x22
 800939a:	d002      	beq.n	80093a2 <HAL_I2C_EV_IRQHandler+0x5b6>
 800939c:	2a22      	cmp	r2, #34	; 0x22
 800939e:	f47f ae72 	bne.w	8009086 <HAL_I2C_EV_IRQHandler+0x29a>
				hi2c->PreviousState = I2C_STATE_NONE;
 80093a2:	2300      	movs	r3, #0
				hi2c->State = HAL_I2C_STATE_READY;
 80093a4:	2220      	movs	r2, #32
				hi2c->PreviousState = I2C_STATE_NONE;
 80093a6:	6303      	str	r3, [r0, #48]	; 0x30
				hi2c->State = HAL_I2C_STATE_READY;
 80093a8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
				hi2c->Mode = HAL_I2C_MODE_NONE;
 80093ac:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
			HAL_I2C_SlaveRxCpltCallback(hi2c);
 80093b0:	f7ff fc81 	bl	8008cb6 <HAL_I2C_SlaveRxCpltCallback>
 80093b4:	e667      	b.n	8009086 <HAL_I2C_EV_IRQHandler+0x29a>
 80093b6:	bf00      	nop
 80093b8:	00010040 	.word	0x00010040
 80093bc:	00010002 	.word	0x00010002
 80093c0:	00010010 	.word	0x00010010
 80093c4:	ffff0000 	.word	0xffff0000
		else if ((sr2itflags & I2C_FLAG_TRA) != RESET) {
 80093c8:	4e39      	ldr	r6, [pc, #228]	; (80094b0 <HAL_I2C_EV_IRQHandler+0x6c4>)
 80093ca:	4c3a      	ldr	r4, [pc, #232]	; (80094b4 <HAL_I2C_EV_IRQHandler+0x6c8>)
 80093cc:	402e      	ands	r6, r5
 80093ce:	400c      	ands	r4, r1
 80093d0:	2e00      	cmp	r6, #0
 80093d2:	d036      	beq.n	8009442 <HAL_I2C_EV_IRQHandler+0x656>
			if (((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET)) {
 80093d4:	4d38      	ldr	r5, [pc, #224]	; (80094b8 <HAL_I2C_EV_IRQHandler+0x6cc>)
 80093d6:	400d      	ands	r5, r1
 80093d8:	b33d      	cbz	r5, 800942a <HAL_I2C_EV_IRQHandler+0x63e>
 80093da:	0555      	lsls	r5, r2, #21
 80093dc:	d525      	bpl.n	800942a <HAL_I2C_EV_IRQHandler+0x63e>
 80093de:	bb24      	cbnz	r4, 800942a <HAL_I2C_EV_IRQHandler+0x63e>
	uint32_t CurrentState = hi2c->State;
 80093e0:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
	if (hi2c->XferCount != 0U) {
 80093e4:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80093e6:	b292      	uxth	r2, r2
	uint32_t CurrentState = hi2c->State;
 80093e8:	b2c9      	uxtb	r1, r1
	if (hi2c->XferCount != 0U) {
 80093ea:	2a00      	cmp	r2, #0
 80093ec:	f43f ae4b 	beq.w	8009086 <HAL_I2C_EV_IRQHandler+0x29a>
		hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80093f0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80093f2:	1c54      	adds	r4, r2, #1
 80093f4:	6244      	str	r4, [r0, #36]	; 0x24
 80093f6:	7812      	ldrb	r2, [r2, #0]
 80093f8:	611a      	str	r2, [r3, #16]
		hi2c->XferCount--;
 80093fa:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80093fc:	3a01      	subs	r2, #1
 80093fe:	b292      	uxth	r2, r2
 8009400:	8542      	strh	r2, [r0, #42]	; 0x2a
		if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)) {
 8009402:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8009404:	b292      	uxth	r2, r2
 8009406:	2a00      	cmp	r2, #0
 8009408:	f47f ae3d 	bne.w	8009086 <HAL_I2C_EV_IRQHandler+0x29a>
 800940c:	2929      	cmp	r1, #41	; 0x29
 800940e:	f47f ae3a 	bne.w	8009086 <HAL_I2C_EV_IRQHandler+0x29a>
			__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009412:	685a      	ldr	r2, [r3, #4]
 8009414:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009418:	605a      	str	r2, [r3, #4]
			hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800941a:	2321      	movs	r3, #33	; 0x21
 800941c:	6303      	str	r3, [r0, #48]	; 0x30
			hi2c->State = HAL_I2C_STATE_LISTEN;
 800941e:	2328      	movs	r3, #40	; 0x28
 8009420:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
			HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009424:	f7ff fc46 	bl	8008cb4 <HAL_I2C_SlaveTxCpltCallback>
 8009428:	e62d      	b.n	8009086 <HAL_I2C_EV_IRQHandler+0x29a>
			else if (((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET)) {
 800942a:	2c00      	cmp	r4, #0
 800942c:	f43f ae2b 	beq.w	8009086 <HAL_I2C_EV_IRQHandler+0x29a>
 8009430:	0594      	lsls	r4, r2, #22
 8009432:	f57f ae28 	bpl.w	8009086 <HAL_I2C_EV_IRQHandler+0x29a>
	if (hi2c->XferCount != 0U) {
 8009436:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8009438:	b292      	uxth	r2, r2
 800943a:	2a00      	cmp	r2, #0
 800943c:	f47f ae5c 	bne.w	80090f8 <HAL_I2C_EV_IRQHandler+0x30c>
 8009440:	e621      	b.n	8009086 <HAL_I2C_EV_IRQHandler+0x29a>
			if (((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET)) {
 8009442:	4d1e      	ldr	r5, [pc, #120]	; (80094bc <HAL_I2C_EV_IRQHandler+0x6d0>)
 8009444:	400d      	ands	r5, r1
 8009446:	b335      	cbz	r5, 8009496 <HAL_I2C_EV_IRQHandler+0x6aa>
 8009448:	0551      	lsls	r1, r2, #21
 800944a:	d524      	bpl.n	8009496 <HAL_I2C_EV_IRQHandler+0x6aa>
 800944c:	bb1c      	cbnz	r4, 8009496 <HAL_I2C_EV_IRQHandler+0x6aa>
	uint32_t CurrentState = hi2c->State;
 800944e:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
	if (hi2c->XferCount != 0U) {
 8009452:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8009454:	b289      	uxth	r1, r1
	uint32_t CurrentState = hi2c->State;
 8009456:	b2d2      	uxtb	r2, r2
	if (hi2c->XferCount != 0U) {
 8009458:	2900      	cmp	r1, #0
 800945a:	f43f ae14 	beq.w	8009086 <HAL_I2C_EV_IRQHandler+0x29a>
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800945e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	1c4c      	adds	r4, r1, #1
 8009464:	6244      	str	r4, [r0, #36]	; 0x24
 8009466:	700b      	strb	r3, [r1, #0]
		hi2c->XferCount--;
 8009468:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800946a:	3b01      	subs	r3, #1
 800946c:	b29b      	uxth	r3, r3
 800946e:	8543      	strh	r3, [r0, #42]	; 0x2a
		if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)) {
 8009470:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8009472:	b29b      	uxth	r3, r3
 8009474:	2b00      	cmp	r3, #0
 8009476:	f47f ae06 	bne.w	8009086 <HAL_I2C_EV_IRQHandler+0x29a>
 800947a:	2a2a      	cmp	r2, #42	; 0x2a
 800947c:	f47f ae03 	bne.w	8009086 <HAL_I2C_EV_IRQHandler+0x29a>
			__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009480:	6802      	ldr	r2, [r0, #0]
 8009482:	6853      	ldr	r3, [r2, #4]
 8009484:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009488:	6053      	str	r3, [r2, #4]
			hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800948a:	2322      	movs	r3, #34	; 0x22
 800948c:	6303      	str	r3, [r0, #48]	; 0x30
			hi2c->State = HAL_I2C_STATE_LISTEN;
 800948e:	2328      	movs	r3, #40	; 0x28
 8009490:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8009494:	e78c      	b.n	80093b0 <HAL_I2C_EV_IRQHandler+0x5c4>
			else if (((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET)) {
 8009496:	2c00      	cmp	r4, #0
 8009498:	f43f adf5 	beq.w	8009086 <HAL_I2C_EV_IRQHandler+0x29a>
 800949c:	0592      	lsls	r2, r2, #22
 800949e:	f57f adf2 	bpl.w	8009086 <HAL_I2C_EV_IRQHandler+0x29a>
	if (hi2c->XferCount != 0U) {
 80094a2:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80094a4:	b292      	uxth	r2, r2
 80094a6:	2a00      	cmp	r2, #0
 80094a8:	f43f aded 	beq.w	8009086 <HAL_I2C_EV_IRQHandler+0x29a>
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80094ac:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80094ae:	e6b7      	b.n	8009220 <HAL_I2C_EV_IRQHandler+0x434>
 80094b0:	00100004 	.word	0x00100004
 80094b4:	00010004 	.word	0x00010004
 80094b8:	00010080 	.word	0x00010080
 80094bc:	00010040 	.word	0x00010040

080094c0 <HAL_I2C_ER_IRQHandler>:
{
 80094c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80094c2:	6803      	ldr	r3, [r0, #0]
	if (((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET)) {
 80094c4:	4a49      	ldr	r2, [pc, #292]	; (80095ec <HAL_I2C_ER_IRQHandler+0x12c>)
	uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80094c6:	695e      	ldr	r6, [r3, #20]
	uint32_t itsources = READ_REG(hi2c->Instance->CR2);
 80094c8:	685d      	ldr	r5, [r3, #4]
	if (((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET)) {
 80094ca:	4216      	tst	r6, r2
{
 80094cc:	4604      	mov	r4, r0
	if (((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET)) {
 80094ce:	d008      	beq.n	80094e2 <HAL_I2C_ER_IRQHandler+0x22>
 80094d0:	05e8      	lsls	r0, r5, #23
 80094d2:	d506      	bpl.n	80094e2 <HAL_I2C_ER_IRQHandler+0x22>
		hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80094d4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80094d6:	f042 0201 	orr.w	r2, r2, #1
 80094da:	6422      	str	r2, [r4, #64]	; 0x40
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80094dc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80094e0:	615a      	str	r2, [r3, #20]
	if (((sr1itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERR) != RESET)) {
 80094e2:	f416 3f81 	tst.w	r6, #66048	; 0x10200
 80094e6:	d008      	beq.n	80094fa <HAL_I2C_ER_IRQHandler+0x3a>
 80094e8:	05e9      	lsls	r1, r5, #23
 80094ea:	d506      	bpl.n	80094fa <HAL_I2C_ER_IRQHandler+0x3a>
		hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80094ec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80094ee:	f042 0202 	orr.w	r2, r2, #2
 80094f2:	6422      	str	r2, [r4, #64]	; 0x40
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80094f4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80094f8:	615a      	str	r2, [r3, #20]
	if (((sr1itflags & I2C_FLAG_AF) != RESET) && ((itsources & I2C_IT_ERR) != RESET)) {
 80094fa:	f416 3f82 	tst.w	r6, #66560	; 0x10400
 80094fe:	d036      	beq.n	800956e <HAL_I2C_ER_IRQHandler+0xae>
 8009500:	05ea      	lsls	r2, r5, #23
 8009502:	d534      	bpl.n	800956e <HAL_I2C_ER_IRQHandler+0xae>
		tmp1 = hi2c->Mode;
 8009504:	f894 703e 	ldrb.w	r7, [r4, #62]	; 0x3e
		tmp2 = hi2c->XferCount;
 8009508:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
		tmp3 = hi2c->State;
 800950a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
		tmp4 = hi2c->PreviousState;
 800950e:	6b20      	ldr	r0, [r4, #48]	; 0x30
		if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8009510:	2f20      	cmp	r7, #32
		tmp2 = hi2c->XferCount;
 8009512:	b289      	uxth	r1, r1
		tmp3 = hi2c->State;
 8009514:	b2d2      	uxtb	r2, r2
		if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8009516:	d158      	bne.n	80095ca <HAL_I2C_ER_IRQHandler+0x10a>
 8009518:	2900      	cmp	r1, #0
 800951a:	d156      	bne.n	80095ca <HAL_I2C_ER_IRQHandler+0x10a>
 800951c:	f002 01f7 	and.w	r1, r2, #247	; 0xf7
 8009520:	2921      	cmp	r1, #33	; 0x21
 8009522:	d003      	beq.n	800952c <HAL_I2C_ER_IRQHandler+0x6c>
		    ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8009524:	2a28      	cmp	r2, #40	; 0x28
 8009526:	d150      	bne.n	80095ca <HAL_I2C_ER_IRQHandler+0x10a>
		     ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX)))) {
 8009528:	2821      	cmp	r0, #33	; 0x21
 800952a:	d14e      	bne.n	80095ca <HAL_I2C_ER_IRQHandler+0x10a>
	uint32_t CurrentState = hi2c->State;
 800952c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
	uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009530:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	if (((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8009532:	2904      	cmp	r1, #4
	uint32_t CurrentState = hi2c->State;
 8009534:	b2d2      	uxtb	r2, r2
	if (((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8009536:	d001      	beq.n	800953c <HAL_I2C_ER_IRQHandler+0x7c>
 8009538:	2908      	cmp	r1, #8
 800953a:	d12c      	bne.n	8009596 <HAL_I2C_ER_IRQHandler+0xd6>
 800953c:	2a28      	cmp	r2, #40	; 0x28
 800953e:	d12a      	bne.n	8009596 <HAL_I2C_ER_IRQHandler+0xd6>
		hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009540:	4a2b      	ldr	r2, [pc, #172]	; (80095f0 <HAL_I2C_ER_IRQHandler+0x130>)
 8009542:	62e2      	str	r2, [r4, #44]	; 0x2c
		__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009544:	685a      	ldr	r2, [r3, #4]
 8009546:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800954a:	605a      	str	r2, [r3, #4]
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800954c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009550:	615a      	str	r2, [r3, #20]
		hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009558:	601a      	str	r2, [r3, #0]
		hi2c->PreviousState = I2C_STATE_NONE;
 800955a:	2300      	movs	r3, #0
		hi2c->State = HAL_I2C_STATE_READY;
 800955c:	2220      	movs	r2, #32
		hi2c->PreviousState = I2C_STATE_NONE;
 800955e:	6323      	str	r3, [r4, #48]	; 0x30
		HAL_I2C_ListenCpltCallback(hi2c);
 8009560:	4620      	mov	r0, r4
		hi2c->State = HAL_I2C_STATE_READY;
 8009562:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_NONE;
 8009566:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		HAL_I2C_ListenCpltCallback(hi2c);
 800956a:	f7ff fba6 	bl	8008cba <HAL_I2C_ListenCpltCallback>
	if (((sr1itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERR) != RESET)) {
 800956e:	f416 3f84 	tst.w	r6, #67584	; 0x10800
 8009572:	d009      	beq.n	8009588 <HAL_I2C_ER_IRQHandler+0xc8>
 8009574:	05eb      	lsls	r3, r5, #23
 8009576:	d507      	bpl.n	8009588 <HAL_I2C_ER_IRQHandler+0xc8>
		hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8009578:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800957a:	f043 0308 	orr.w	r3, r3, #8
 800957e:	6423      	str	r3, [r4, #64]	; 0x40
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009580:	6823      	ldr	r3, [r4, #0]
 8009582:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8009586:	615a      	str	r2, [r3, #20]
	if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE) {
 8009588:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800958a:	b373      	cbz	r3, 80095ea <HAL_I2C_ER_IRQHandler+0x12a>
		I2C_ITError(hi2c);
 800958c:	4620      	mov	r0, r4
}
 800958e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		I2C_ITError(hi2c);
 8009592:	f7ff bb97 	b.w	8008cc4 <I2C_ITError>
	}else if (CurrentState == HAL_I2C_STATE_BUSY_TX) {
 8009596:	2a21      	cmp	r2, #33	; 0x21
 8009598:	d123      	bne.n	80095e2 <HAL_I2C_ER_IRQHandler+0x122>
		hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800959a:	4915      	ldr	r1, [pc, #84]	; (80095f0 <HAL_I2C_ER_IRQHandler+0x130>)
 800959c:	62e1      	str	r1, [r4, #44]	; 0x2c
		hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800959e:	6322      	str	r2, [r4, #48]	; 0x30
		hi2c->State = HAL_I2C_STATE_READY;
 80095a0:	2220      	movs	r2, #32
 80095a2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_NONE;
 80095a6:	2200      	movs	r2, #0
 80095a8:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
		__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80095ac:	685a      	ldr	r2, [r3, #4]
 80095ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80095b2:	605a      	str	r2, [r3, #4]
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80095b8:	615a      	str	r2, [r3, #20]
		hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095c0:	601a      	str	r2, [r3, #0]
		HAL_I2C_SlaveTxCpltCallback(hi2c);
 80095c2:	4620      	mov	r0, r4
 80095c4:	f7ff fb76 	bl	8008cb4 <HAL_I2C_SlaveTxCpltCallback>
 80095c8:	e7d1      	b.n	800956e <HAL_I2C_ER_IRQHandler+0xae>
			hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80095ca:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80095cc:	f042 0204 	orr.w	r2, r2, #4
 80095d0:	6422      	str	r2, [r4, #64]	; 0x40
			if (hi2c->Mode == HAL_I2C_MODE_MASTER) {
 80095d2:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80095d6:	2a10      	cmp	r2, #16
				SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095d8:	bf02      	ittt	eq
 80095da:	681a      	ldreq	r2, [r3, #0]
 80095dc:	f442 7200 	orreq.w	r2, r2, #512	; 0x200
 80095e0:	601a      	streq	r2, [r3, #0]
			__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80095e6:	615a      	str	r2, [r3, #20]
 80095e8:	e7c1      	b.n	800956e <HAL_I2C_ER_IRQHandler+0xae>
 80095ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095ec:	00010100 	.word	0x00010100
 80095f0:	ffff0000 	.word	0xffff0000

080095f4 <I2C_DMAAbort>:
	I2C_HandleTypeDef* hi2c = ( I2C_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80095f4:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80095f6:	b508      	push	{r3, lr}
	hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80095f8:	6803      	ldr	r3, [r0, #0]
	hi2c->hdmatx->XferAbortCallback = NULL;
 80095fa:	6b41      	ldr	r1, [r0, #52]	; 0x34
	hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009602:	601a      	str	r2, [r3, #0]
	hi2c->XferCount = 0U;
 8009604:	2200      	movs	r2, #0
 8009606:	8542      	strh	r2, [r0, #42]	; 0x2a
	hi2c->hdmatx->XferAbortCallback = NULL;
 8009608:	650a      	str	r2, [r1, #80]	; 0x50
	hi2c->hdmarx->XferAbortCallback = NULL;
 800960a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800960c:	650a      	str	r2, [r1, #80]	; 0x50
	if (hi2c->State == HAL_I2C_STATE_ABORT) {
 800960e:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8009612:	2960      	cmp	r1, #96	; 0x60
 8009614:	f04f 0120 	mov.w	r1, #32
		hi2c->State = HAL_I2C_STATE_READY;
 8009618:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_NONE;
 800961c:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
	if (hi2c->State == HAL_I2C_STATE_ABORT) {
 8009620:	d107      	bne.n	8009632 <I2C_DMAAbort+0x3e>
		hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009622:	6402      	str	r2, [r0, #64]	; 0x40
		__HAL_I2C_DISABLE(hi2c);
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	f022 0201 	bic.w	r2, r2, #1
 800962a:	601a      	str	r2, [r3, #0]
		HAL_I2C_AbortCpltCallback(hi2c);
 800962c:	f7ff fb49 	bl	8008cc2 <HAL_I2C_AbortCpltCallback>
 8009630:	bd08      	pop	{r3, pc}
		__HAL_I2C_DISABLE(hi2c);
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	f022 0201 	bic.w	r2, r2, #1
 8009638:	601a      	str	r2, [r3, #0]
		HAL_I2C_ErrorCallback(hi2c);
 800963a:	f7ff fb41 	bl	8008cc0 <HAL_I2C_ErrorCallback>
 800963e:	bd08      	pop	{r3, pc}

08009640 <HAL_I2C_GetState>:
	return hi2c->State;
 8009640:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8009644:	4770      	bx	lr
	...

08009648 <HAL_I2CEx_ConfigAnalogFilter>:
 *                the configuration information for the specified I2Cx peripheral.
 * @param  AnalogFilter new state of the Analog filter.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009648:	b538      	push	{r3, r4, r5, lr}
	/* Check the parameters */
	assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800964a:	4a1b      	ldr	r2, [pc, #108]	; (80096b8 <HAL_I2CEx_ConfigAnalogFilter+0x70>)
 800964c:	6803      	ldr	r3, [r0, #0]
 800964e:	4293      	cmp	r3, r2
{
 8009650:	4604      	mov	r4, r0
 8009652:	460d      	mov	r5, r1
	assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8009654:	d00b      	beq.n	800966e <HAL_I2CEx_ConfigAnalogFilter+0x26>
 8009656:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800965a:	4293      	cmp	r3, r2
 800965c:	d007      	beq.n	800966e <HAL_I2CEx_ConfigAnalogFilter+0x26>
 800965e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009662:	4293      	cmp	r3, r2
 8009664:	d003      	beq.n	800966e <HAL_I2CEx_ConfigAnalogFilter+0x26>
 8009666:	216e      	movs	r1, #110	; 0x6e
 8009668:	4814      	ldr	r0, [pc, #80]	; (80096bc <HAL_I2CEx_ConfigAnalogFilter+0x74>)
 800966a:	f003 fa71 	bl	800cb50 <assert_failed>
	assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800966e:	f035 0310 	bics.w	r3, r5, #16
 8009672:	d003      	beq.n	800967c <HAL_I2CEx_ConfigAnalogFilter+0x34>
 8009674:	216f      	movs	r1, #111	; 0x6f
 8009676:	4811      	ldr	r0, [pc, #68]	; (80096bc <HAL_I2CEx_ConfigAnalogFilter+0x74>)
 8009678:	f003 fa6a 	bl	800cb50 <assert_failed>

	if (hi2c->State == HAL_I2C_STATE_READY) {
 800967c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8009680:	b2d2      	uxtb	r2, r2
 8009682:	2a20      	cmp	r2, #32
 8009684:	d116      	bne.n	80096b4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
		hi2c->State = HAL_I2C_STATE_BUSY;
 8009686:	2324      	movs	r3, #36	; 0x24
 8009688:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

		/* Disable the selected I2C peripheral */
		__HAL_I2C_DISABLE(hi2c);
 800968c:	6823      	ldr	r3, [r4, #0]
 800968e:	6819      	ldr	r1, [r3, #0]
 8009690:	f021 0101 	bic.w	r1, r1, #1
 8009694:	6019      	str	r1, [r3, #0]

		/* Reset I2Cx ANOFF bit */
		hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8009696:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009698:	f021 0110 	bic.w	r1, r1, #16
 800969c:	6259      	str	r1, [r3, #36]	; 0x24

		/* Disable the analog filter */
		hi2c->Instance->FLTR |= AnalogFilter;
 800969e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80096a0:	430d      	orrs	r5, r1
 80096a2:	625d      	str	r5, [r3, #36]	; 0x24

		__HAL_I2C_ENABLE(hi2c);
 80096a4:	6819      	ldr	r1, [r3, #0]
 80096a6:	f041 0101 	orr.w	r1, r1, #1
 80096aa:	6019      	str	r1, [r3, #0]

		hi2c->State = HAL_I2C_STATE_READY;

		return HAL_OK;
 80096ac:	2000      	movs	r0, #0
		hi2c->State = HAL_I2C_STATE_READY;
 80096ae:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
		return HAL_OK;
 80096b2:	bd38      	pop	{r3, r4, r5, pc}
	}else  {
		return HAL_BUSY;
 80096b4:	2002      	movs	r0, #2
	}
}
 80096b6:	bd38      	pop	{r3, r4, r5, pc}
 80096b8:	40005400 	.word	0x40005400
 80096bc:	0801d8e0 	.word	0x0801d8e0

080096c0 <HAL_PWR_EnableBkUpAccess>:
 *         Backup Domain Access should be kept enabled.
 * @retval None
 */
void HAL_PWR_EnableBkUpAccess(void)
{
	*(__IO uint32_t *)CR_DBP_BB = (uint32_t)ENABLE;
 80096c0:	4b01      	ldr	r3, [pc, #4]	; (80096c8 <HAL_PWR_EnableBkUpAccess+0x8>)
 80096c2:	2201      	movs	r2, #1
 80096c4:	601a      	str	r2, [r3, #0]
 80096c6:	4770      	bx	lr
 80096c8:	420e0020 	.word	0x420e0020

080096cc <HAL_RCC_OscConfig>:
 *         supported by this API. User should request a transition to HSE Off
 *         first and then HSE On or HSE Bypass.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80096cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t tickstart;

	/* Check Null pointer */
	if (RCC_OscInitStruct == NULL) {
 80096d0:	4604      	mov	r4, r0
 80096d2:	b918      	cbnz	r0, 80096dc <HAL_RCC_OscConfig+0x10>
		return HAL_ERROR;
 80096d4:	2001      	movs	r0, #1
		}else  {
			return HAL_ERROR;
		}
	}
	return HAL_OK;
}
 80096d6:	b002      	add	sp, #8
 80096d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80096dc:	6803      	ldr	r3, [r0, #0]
 80096de:	2b0f      	cmp	r3, #15
 80096e0:	d903      	bls.n	80096ea <HAL_RCC_OscConfig+0x1e>
 80096e2:	21f7      	movs	r1, #247	; 0xf7
 80096e4:	48a2      	ldr	r0, [pc, #648]	; (8009970 <HAL_RCC_OscConfig+0x2a4>)
 80096e6:	f003 fa33 	bl	800cb50 <assert_failed>
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE) {
 80096ea:	6823      	ldr	r3, [r4, #0]
 80096ec:	07d8      	lsls	r0, r3, #31
 80096ee:	d418      	bmi.n	8009722 <HAL_RCC_OscConfig+0x56>
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI) {
 80096f0:	6823      	ldr	r3, [r4, #0]
 80096f2:	0799      	lsls	r1, r3, #30
 80096f4:	d46b      	bmi.n	80097ce <HAL_RCC_OscConfig+0x102>
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI) {
 80096f6:	6823      	ldr	r3, [r4, #0]
 80096f8:	0719      	lsls	r1, r3, #28
 80096fa:	f100 80be 	bmi.w	800987a <HAL_RCC_OscConfig+0x1ae>
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE) {
 80096fe:	6823      	ldr	r3, [r4, #0]
 8009700:	075a      	lsls	r2, r3, #29
 8009702:	f100 80e4 	bmi.w	80098ce <HAL_RCC_OscConfig+0x202>
	assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8009706:	69a3      	ldr	r3, [r4, #24]
 8009708:	2b02      	cmp	r3, #2
 800970a:	d904      	bls.n	8009716 <HAL_RCC_OscConfig+0x4a>
 800970c:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8009710:	4897      	ldr	r0, [pc, #604]	; (8009970 <HAL_RCC_OscConfig+0x2a4>)
 8009712:	f003 fa1d 	bl	800cb50 <assert_failed>
	if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE) {
 8009716:	69a2      	ldr	r2, [r4, #24]
 8009718:	2a00      	cmp	r2, #0
 800971a:	f040 8151 	bne.w	80099c0 <HAL_RCC_OscConfig+0x2f4>
	return HAL_OK;
 800971e:	2000      	movs	r0, #0
 8009720:	e7d9      	b.n	80096d6 <HAL_RCC_OscConfig+0xa>
		assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8009722:	6863      	ldr	r3, [r4, #4]
 8009724:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 8009728:	d006      	beq.n	8009738 <HAL_RCC_OscConfig+0x6c>
 800972a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800972e:	d003      	beq.n	8009738 <HAL_RCC_OscConfig+0x6c>
 8009730:	21fb      	movs	r1, #251	; 0xfb
 8009732:	488f      	ldr	r0, [pc, #572]	; (8009970 <HAL_RCC_OscConfig+0x2a4>)
 8009734:	f003 fa0c 	bl	800cb50 <assert_failed>
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8009738:	4b8e      	ldr	r3, [pc, #568]	; (8009974 <HAL_RCC_OscConfig+0x2a8>)
 800973a:	689a      	ldr	r2, [r3, #8]
 800973c:	f002 020c 	and.w	r2, r2, #12
 8009740:	2a04      	cmp	r2, #4
 8009742:	d007      	beq.n	8009754 <HAL_RCC_OscConfig+0x88>
		    ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE))) {
 8009744:	689a      	ldr	r2, [r3, #8]
 8009746:	f002 020c 	and.w	r2, r2, #12
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800974a:	2a08      	cmp	r2, #8
 800974c:	d10a      	bne.n	8009764 <HAL_RCC_OscConfig+0x98>
		    ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE))) {
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	025a      	lsls	r2, r3, #9
 8009752:	d507      	bpl.n	8009764 <HAL_RCC_OscConfig+0x98>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 8009754:	4b87      	ldr	r3, [pc, #540]	; (8009974 <HAL_RCC_OscConfig+0x2a8>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	039b      	lsls	r3, r3, #14
 800975a:	d5c9      	bpl.n	80096f0 <HAL_RCC_OscConfig+0x24>
 800975c:	6863      	ldr	r3, [r4, #4]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d1c6      	bne.n	80096f0 <HAL_RCC_OscConfig+0x24>
 8009762:	e7b7      	b.n	80096d4 <HAL_RCC_OscConfig+0x8>
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009764:	6863      	ldr	r3, [r4, #4]
 8009766:	4d83      	ldr	r5, [pc, #524]	; (8009974 <HAL_RCC_OscConfig+0x2a8>)
 8009768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800976c:	d111      	bne.n	8009792 <HAL_RCC_OscConfig+0xc6>
 800976e:	682b      	ldr	r3, [r5, #0]
 8009770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009774:	602b      	str	r3, [r5, #0]
				tickstart = HAL_GetTick();
 8009776:	f7fd fb9b 	bl	8006eb0 <HAL_GetTick>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 800977a:	4d7e      	ldr	r5, [pc, #504]	; (8009974 <HAL_RCC_OscConfig+0x2a8>)
				tickstart = HAL_GetTick();
 800977c:	4606      	mov	r6, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 800977e:	682b      	ldr	r3, [r5, #0]
 8009780:	039f      	lsls	r7, r3, #14
 8009782:	d4b5      	bmi.n	80096f0 <HAL_RCC_OscConfig+0x24>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8009784:	f7fd fb94 	bl	8006eb0 <HAL_GetTick>
 8009788:	1b80      	subs	r0, r0, r6
 800978a:	2864      	cmp	r0, #100	; 0x64
 800978c:	d9f7      	bls.n	800977e <HAL_RCC_OscConfig+0xb2>
						return HAL_TIMEOUT;
 800978e:	2003      	movs	r0, #3
 8009790:	e7a1      	b.n	80096d6 <HAL_RCC_OscConfig+0xa>
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009792:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009796:	d104      	bne.n	80097a2 <HAL_RCC_OscConfig+0xd6>
 8009798:	682b      	ldr	r3, [r5, #0]
 800979a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800979e:	602b      	str	r3, [r5, #0]
 80097a0:	e7e5      	b.n	800976e <HAL_RCC_OscConfig+0xa2>
 80097a2:	682a      	ldr	r2, [r5, #0]
 80097a4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80097a8:	602a      	str	r2, [r5, #0]
 80097aa:	682a      	ldr	r2, [r5, #0]
 80097ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80097b0:	602a      	str	r2, [r5, #0]
			if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF) {
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d1df      	bne.n	8009776 <HAL_RCC_OscConfig+0xaa>
				tickstart = HAL_GetTick();
 80097b6:	f7fd fb7b 	bl	8006eb0 <HAL_GetTick>
 80097ba:	4606      	mov	r6, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 80097bc:	682b      	ldr	r3, [r5, #0]
 80097be:	0398      	lsls	r0, r3, #14
 80097c0:	d596      	bpl.n	80096f0 <HAL_RCC_OscConfig+0x24>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 80097c2:	f7fd fb75 	bl	8006eb0 <HAL_GetTick>
 80097c6:	1b80      	subs	r0, r0, r6
 80097c8:	2864      	cmp	r0, #100	; 0x64
 80097ca:	d9f7      	bls.n	80097bc <HAL_RCC_OscConfig+0xf0>
 80097cc:	e7df      	b.n	800978e <HAL_RCC_OscConfig+0xc2>
		assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80097ce:	68e3      	ldr	r3, [r4, #12]
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d904      	bls.n	80097de <HAL_RCC_OscConfig+0x112>
 80097d4:	f240 1121 	movw	r1, #289	; 0x121
 80097d8:	4865      	ldr	r0, [pc, #404]	; (8009970 <HAL_RCC_OscConfig+0x2a4>)
 80097da:	f003 f9b9 	bl	800cb50 <assert_failed>
		assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80097de:	6923      	ldr	r3, [r4, #16]
 80097e0:	2b1f      	cmp	r3, #31
 80097e2:	d904      	bls.n	80097ee <HAL_RCC_OscConfig+0x122>
 80097e4:	f44f 7191 	mov.w	r1, #290	; 0x122
 80097e8:	4861      	ldr	r0, [pc, #388]	; (8009970 <HAL_RCC_OscConfig+0x2a4>)
 80097ea:	f003 f9b1 	bl	800cb50 <assert_failed>
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80097ee:	4b61      	ldr	r3, [pc, #388]	; (8009974 <HAL_RCC_OscConfig+0x2a8>)
 80097f0:	689a      	ldr	r2, [r3, #8]
 80097f2:	f012 0f0c 	tst.w	r2, #12
 80097f6:	d007      	beq.n	8009808 <HAL_RCC_OscConfig+0x13c>
		    ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI))) {
 80097f8:	689a      	ldr	r2, [r3, #8]
 80097fa:	f002 020c 	and.w	r2, r2, #12
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80097fe:	2a08      	cmp	r2, #8
 8009800:	d112      	bne.n	8009828 <HAL_RCC_OscConfig+0x15c>
		    ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI))) {
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	0259      	lsls	r1, r3, #9
 8009806:	d40f      	bmi.n	8009828 <HAL_RCC_OscConfig+0x15c>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 8009808:	4b5a      	ldr	r3, [pc, #360]	; (8009974 <HAL_RCC_OscConfig+0x2a8>)
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	0792      	lsls	r2, r2, #30
 800980e:	d503      	bpl.n	8009818 <HAL_RCC_OscConfig+0x14c>
 8009810:	68e2      	ldr	r2, [r4, #12]
 8009812:	2a01      	cmp	r2, #1
 8009814:	f47f af5e 	bne.w	80096d4 <HAL_RCC_OscConfig+0x8>
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009818:	681a      	ldr	r2, [r3, #0]
 800981a:	6921      	ldr	r1, [r4, #16]
 800981c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8009820:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8009824:	601a      	str	r2, [r3, #0]
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 8009826:	e766      	b.n	80096f6 <HAL_RCC_OscConfig+0x2a>
			if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF) {
 8009828:	68e2      	ldr	r2, [r4, #12]
 800982a:	4b53      	ldr	r3, [pc, #332]	; (8009978 <HAL_RCC_OscConfig+0x2ac>)
 800982c:	b1b2      	cbz	r2, 800985c <HAL_RCC_OscConfig+0x190>
				__HAL_RCC_HSI_ENABLE();
 800982e:	2201      	movs	r2, #1
 8009830:	601a      	str	r2, [r3, #0]
				tickstart = HAL_GetTick();
 8009832:	f7fd fb3d 	bl	8006eb0 <HAL_GetTick>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8009836:	4d4f      	ldr	r5, [pc, #316]	; (8009974 <HAL_RCC_OscConfig+0x2a8>)
				tickstart = HAL_GetTick();
 8009838:	4606      	mov	r6, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 800983a:	682b      	ldr	r3, [r5, #0]
 800983c:	079f      	lsls	r7, r3, #30
 800983e:	d507      	bpl.n	8009850 <HAL_RCC_OscConfig+0x184>
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009840:	682b      	ldr	r3, [r5, #0]
 8009842:	6922      	ldr	r2, [r4, #16]
 8009844:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009848:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800984c:	602b      	str	r3, [r5, #0]
 800984e:	e752      	b.n	80096f6 <HAL_RCC_OscConfig+0x2a>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8009850:	f7fd fb2e 	bl	8006eb0 <HAL_GetTick>
 8009854:	1b80      	subs	r0, r0, r6
 8009856:	2802      	cmp	r0, #2
 8009858:	d9ef      	bls.n	800983a <HAL_RCC_OscConfig+0x16e>
 800985a:	e798      	b.n	800978e <HAL_RCC_OscConfig+0xc2>
				__HAL_RCC_HSI_DISABLE();
 800985c:	601a      	str	r2, [r3, #0]
				tickstart = HAL_GetTick();
 800985e:	f7fd fb27 	bl	8006eb0 <HAL_GetTick>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 8009862:	4d44      	ldr	r5, [pc, #272]	; (8009974 <HAL_RCC_OscConfig+0x2a8>)
				tickstart = HAL_GetTick();
 8009864:	4606      	mov	r6, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 8009866:	682b      	ldr	r3, [r5, #0]
 8009868:	0798      	lsls	r0, r3, #30
 800986a:	f57f af44 	bpl.w	80096f6 <HAL_RCC_OscConfig+0x2a>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 800986e:	f7fd fb1f 	bl	8006eb0 <HAL_GetTick>
 8009872:	1b80      	subs	r0, r0, r6
 8009874:	2802      	cmp	r0, #2
 8009876:	d9f6      	bls.n	8009866 <HAL_RCC_OscConfig+0x19a>
 8009878:	e789      	b.n	800978e <HAL_RCC_OscConfig+0xc2>
		assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800987a:	6963      	ldr	r3, [r4, #20]
 800987c:	2b01      	cmp	r3, #1
 800987e:	d904      	bls.n	800988a <HAL_RCC_OscConfig+0x1be>
 8009880:	f240 1155 	movw	r1, #341	; 0x155
 8009884:	483a      	ldr	r0, [pc, #232]	; (8009970 <HAL_RCC_OscConfig+0x2a4>)
 8009886:	f003 f963 	bl	800cb50 <assert_failed>
		if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF) {
 800988a:	6962      	ldr	r2, [r4, #20]
 800988c:	4b3b      	ldr	r3, [pc, #236]	; (800997c <HAL_RCC_OscConfig+0x2b0>)
 800988e:	b17a      	cbz	r2, 80098b0 <HAL_RCC_OscConfig+0x1e4>
			__HAL_RCC_LSI_ENABLE();
 8009890:	2201      	movs	r2, #1
 8009892:	601a      	str	r2, [r3, #0]
			tickstart = HAL_GetTick();
 8009894:	f7fd fb0c 	bl	8006eb0 <HAL_GetTick>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 8009898:	4d36      	ldr	r5, [pc, #216]	; (8009974 <HAL_RCC_OscConfig+0x2a8>)
			tickstart = HAL_GetTick();
 800989a:	4606      	mov	r6, r0
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 800989c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800989e:	079b      	lsls	r3, r3, #30
 80098a0:	f53f af2d 	bmi.w	80096fe <HAL_RCC_OscConfig+0x32>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 80098a4:	f7fd fb04 	bl	8006eb0 <HAL_GetTick>
 80098a8:	1b80      	subs	r0, r0, r6
 80098aa:	2802      	cmp	r0, #2
 80098ac:	d9f6      	bls.n	800989c <HAL_RCC_OscConfig+0x1d0>
 80098ae:	e76e      	b.n	800978e <HAL_RCC_OscConfig+0xc2>
			__HAL_RCC_LSI_DISABLE();
 80098b0:	601a      	str	r2, [r3, #0]
			tickstart = HAL_GetTick();
 80098b2:	f7fd fafd 	bl	8006eb0 <HAL_GetTick>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 80098b6:	4d2f      	ldr	r5, [pc, #188]	; (8009974 <HAL_RCC_OscConfig+0x2a8>)
			tickstart = HAL_GetTick();
 80098b8:	4606      	mov	r6, r0
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 80098ba:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80098bc:	079f      	lsls	r7, r3, #30
 80098be:	f57f af1e 	bpl.w	80096fe <HAL_RCC_OscConfig+0x32>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 80098c2:	f7fd faf5 	bl	8006eb0 <HAL_GetTick>
 80098c6:	1b80      	subs	r0, r0, r6
 80098c8:	2802      	cmp	r0, #2
 80098ca:	d9f6      	bls.n	80098ba <HAL_RCC_OscConfig+0x1ee>
 80098cc:	e75f      	b.n	800978e <HAL_RCC_OscConfig+0xc2>
		assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80098ce:	68a3      	ldr	r3, [r4, #8]
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	d906      	bls.n	80098e2 <HAL_RCC_OscConfig+0x216>
 80098d4:	2b05      	cmp	r3, #5
 80098d6:	d004      	beq.n	80098e2 <HAL_RCC_OscConfig+0x216>
 80098d8:	f240 1179 	movw	r1, #377	; 0x179
 80098dc:	4824      	ldr	r0, [pc, #144]	; (8009970 <HAL_RCC_OscConfig+0x2a4>)
 80098de:	f003 f937 	bl	800cb50 <assert_failed>
		if (__HAL_RCC_PWR_IS_CLK_DISABLED()) {
 80098e2:	4b24      	ldr	r3, [pc, #144]	; (8009974 <HAL_RCC_OscConfig+0x2a8>)
 80098e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80098e6:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80098ea:	d128      	bne.n	800993e <HAL_RCC_OscConfig+0x272>
			__HAL_RCC_PWR_CLK_ENABLE();
 80098ec:	9201      	str	r2, [sp, #4]
 80098ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80098f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80098f4:	641a      	str	r2, [r3, #64]	; 0x40
 80098f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098fc:	9301      	str	r3, [sp, #4]
 80098fe:	9b01      	ldr	r3, [sp, #4]
			pwrclkchanged = SET;
 8009900:	2601      	movs	r6, #1
		if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8009902:	4d1f      	ldr	r5, [pc, #124]	; (8009980 <HAL_RCC_OscConfig+0x2b4>)
 8009904:	682b      	ldr	r3, [r5, #0]
 8009906:	05d8      	lsls	r0, r3, #23
 8009908:	d51b      	bpl.n	8009942 <HAL_RCC_OscConfig+0x276>
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800990a:	68a3      	ldr	r3, [r4, #8]
 800990c:	4d19      	ldr	r5, [pc, #100]	; (8009974 <HAL_RCC_OscConfig+0x2a8>)
 800990e:	2b01      	cmp	r3, #1
 8009910:	d127      	bne.n	8009962 <HAL_RCC_OscConfig+0x296>
 8009912:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8009914:	f043 0301 	orr.w	r3, r3, #1
 8009918:	672b      	str	r3, [r5, #112]	; 0x70
			tickstart = HAL_GetTick();
 800991a:	f7fd fac9 	bl	8006eb0 <HAL_GetTick>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 800991e:	4d15      	ldr	r5, [pc, #84]	; (8009974 <HAL_RCC_OscConfig+0x2a8>)
			tickstart = HAL_GetTick();
 8009920:	4607      	mov	r7, r0
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8009922:	f241 3888 	movw	r8, #5000	; 0x1388
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8009926:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8009928:	079a      	lsls	r2, r3, #30
 800992a:	d543      	bpl.n	80099b4 <HAL_RCC_OscConfig+0x2e8>
		if (pwrclkchanged == SET) {
 800992c:	2e00      	cmp	r6, #0
 800992e:	f43f aeea 	beq.w	8009706 <HAL_RCC_OscConfig+0x3a>
			__HAL_RCC_PWR_CLK_DISABLE();
 8009932:	4a10      	ldr	r2, [pc, #64]	; (8009974 <HAL_RCC_OscConfig+0x2a8>)
 8009934:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009936:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800993a:	6413      	str	r3, [r2, #64]	; 0x40
 800993c:	e6e3      	b.n	8009706 <HAL_RCC_OscConfig+0x3a>
		FlagStatus pwrclkchanged = RESET;
 800993e:	2600      	movs	r6, #0
 8009940:	e7df      	b.n	8009902 <HAL_RCC_OscConfig+0x236>
			SET_BIT(PWR->CR, PWR_CR_DBP);
 8009942:	682b      	ldr	r3, [r5, #0]
 8009944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009948:	602b      	str	r3, [r5, #0]
			tickstart = HAL_GetTick();
 800994a:	f7fd fab1 	bl	8006eb0 <HAL_GetTick>
 800994e:	4607      	mov	r7, r0
			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8009950:	682b      	ldr	r3, [r5, #0]
 8009952:	05d9      	lsls	r1, r3, #23
 8009954:	d4d9      	bmi.n	800990a <HAL_RCC_OscConfig+0x23e>
				if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 8009956:	f7fd faab 	bl	8006eb0 <HAL_GetTick>
 800995a:	1bc0      	subs	r0, r0, r7
 800995c:	2802      	cmp	r0, #2
 800995e:	d9f7      	bls.n	8009950 <HAL_RCC_OscConfig+0x284>
 8009960:	e715      	b.n	800978e <HAL_RCC_OscConfig+0xc2>
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009962:	2b05      	cmp	r3, #5
 8009964:	d10e      	bne.n	8009984 <HAL_RCC_OscConfig+0x2b8>
 8009966:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8009968:	f043 0304 	orr.w	r3, r3, #4
 800996c:	672b      	str	r3, [r5, #112]	; 0x70
 800996e:	e7d0      	b.n	8009912 <HAL_RCC_OscConfig+0x246>
 8009970:	0801d91b 	.word	0x0801d91b
 8009974:	40023800 	.word	0x40023800
 8009978:	42470000 	.word	0x42470000
 800997c:	42470e80 	.word	0x42470e80
 8009980:	40007000 	.word	0x40007000
 8009984:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8009986:	f022 0201 	bic.w	r2, r2, #1
 800998a:	672a      	str	r2, [r5, #112]	; 0x70
 800998c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800998e:	f022 0204 	bic.w	r2, r2, #4
 8009992:	672a      	str	r2, [r5, #112]	; 0x70
		if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF) {
 8009994:	2b00      	cmp	r3, #0
 8009996:	d1c0      	bne.n	800991a <HAL_RCC_OscConfig+0x24e>
			tickstart = HAL_GetTick();
 8009998:	f7fd fa8a 	bl	8006eb0 <HAL_GetTick>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 800999c:	f241 3888 	movw	r8, #5000	; 0x1388
			tickstart = HAL_GetTick();
 80099a0:	4607      	mov	r7, r0
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 80099a2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80099a4:	079b      	lsls	r3, r3, #30
 80099a6:	d5c1      	bpl.n	800992c <HAL_RCC_OscConfig+0x260>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 80099a8:	f7fd fa82 	bl	8006eb0 <HAL_GetTick>
 80099ac:	1bc0      	subs	r0, r0, r7
 80099ae:	4540      	cmp	r0, r8
 80099b0:	d9f7      	bls.n	80099a2 <HAL_RCC_OscConfig+0x2d6>
 80099b2:	e6ec      	b.n	800978e <HAL_RCC_OscConfig+0xc2>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 80099b4:	f7fd fa7c 	bl	8006eb0 <HAL_GetTick>
 80099b8:	1bc0      	subs	r0, r0, r7
 80099ba:	4540      	cmp	r0, r8
 80099bc:	d9b3      	bls.n	8009926 <HAL_RCC_OscConfig+0x25a>
 80099be:	e6e6      	b.n	800978e <HAL_RCC_OscConfig+0xc2>
		if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL) {
 80099c0:	4e3b      	ldr	r6, [pc, #236]	; (8009ab0 <HAL_RCC_OscConfig+0x3e4>)
 80099c2:	68b3      	ldr	r3, [r6, #8]
 80099c4:	f003 030c 	and.w	r3, r3, #12
 80099c8:	2b08      	cmp	r3, #8
 80099ca:	f43f ae83 	beq.w	80096d4 <HAL_RCC_OscConfig+0x8>
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 80099ce:	2a02      	cmp	r2, #2
 80099d0:	4d38      	ldr	r5, [pc, #224]	; (8009ab4 <HAL_RCC_OscConfig+0x3e8>)
 80099d2:	d15e      	bne.n	8009a92 <HAL_RCC_OscConfig+0x3c6>
				assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80099d4:	69e3      	ldr	r3, [r4, #28]
 80099d6:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 80099da:	d004      	beq.n	80099e6 <HAL_RCC_OscConfig+0x31a>
 80099dc:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 80099e0:	4835      	ldr	r0, [pc, #212]	; (8009ab8 <HAL_RCC_OscConfig+0x3ec>)
 80099e2:	f003 f8b5 	bl	800cb50 <assert_failed>
				assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80099e6:	6a23      	ldr	r3, [r4, #32]
 80099e8:	2b3f      	cmp	r3, #63	; 0x3f
 80099ea:	d904      	bls.n	80099f6 <HAL_RCC_OscConfig+0x32a>
 80099ec:	f240 11b7 	movw	r1, #439	; 0x1b7
 80099f0:	4831      	ldr	r0, [pc, #196]	; (8009ab8 <HAL_RCC_OscConfig+0x3ec>)
 80099f2:	f003 f8ad 	bl	800cb50 <assert_failed>
				assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80099f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099f8:	3b32      	subs	r3, #50	; 0x32
 80099fa:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 80099fe:	d904      	bls.n	8009a0a <HAL_RCC_OscConfig+0x33e>
 8009a00:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8009a04:	482c      	ldr	r0, [pc, #176]	; (8009ab8 <HAL_RCC_OscConfig+0x3ec>)
 8009a06:	f003 f8a3 	bl	800cb50 <assert_failed>
				assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8009a0a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009a0c:	2a08      	cmp	r2, #8
 8009a0e:	d804      	bhi.n	8009a1a <HAL_RCC_OscConfig+0x34e>
 8009a10:	f44f 73aa 	mov.w	r3, #340	; 0x154
 8009a14:	40d3      	lsrs	r3, r2
 8009a16:	07d8      	lsls	r0, r3, #31
 8009a18:	d404      	bmi.n	8009a24 <HAL_RCC_OscConfig+0x358>
 8009a1a:	f240 11b9 	movw	r1, #441	; 0x1b9
 8009a1e:	4826      	ldr	r0, [pc, #152]	; (8009ab8 <HAL_RCC_OscConfig+0x3ec>)
 8009a20:	f003 f896 	bl	800cb50 <assert_failed>
				assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8009a24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009a26:	3b02      	subs	r3, #2
 8009a28:	2b0d      	cmp	r3, #13
 8009a2a:	d904      	bls.n	8009a36 <HAL_RCC_OscConfig+0x36a>
 8009a2c:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
 8009a30:	4821      	ldr	r0, [pc, #132]	; (8009ab8 <HAL_RCC_OscConfig+0x3ec>)
 8009a32:	f003 f88d 	bl	800cb50 <assert_failed>
				__HAL_RCC_PLL_DISABLE();
 8009a36:	2300      	movs	r3, #0
 8009a38:	602b      	str	r3, [r5, #0]
				tickstart = HAL_GetTick();
 8009a3a:	f7fd fa39 	bl	8006eb0 <HAL_GetTick>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8009a3e:	4e1c      	ldr	r6, [pc, #112]	; (8009ab0 <HAL_RCC_OscConfig+0x3e4>)
				tickstart = HAL_GetTick();
 8009a40:	4607      	mov	r7, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8009a42:	6833      	ldr	r3, [r6, #0]
 8009a44:	0199      	lsls	r1, r3, #6
 8009a46:	d41e      	bmi.n	8009a86 <HAL_RCC_OscConfig+0x3ba>
				WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource | \
 8009a48:	6a22      	ldr	r2, [r4, #32]
 8009a4a:	69e3      	ldr	r3, [r4, #28]
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009a50:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8009a54:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009a56:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009a5a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8009a5c:	4c14      	ldr	r4, [pc, #80]	; (8009ab0 <HAL_RCC_OscConfig+0x3e4>)
				WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource | \
 8009a5e:	0852      	lsrs	r2, r2, #1
 8009a60:	3a01      	subs	r2, #1
 8009a62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a66:	6073      	str	r3, [r6, #4]
				__HAL_RCC_PLL_ENABLE();
 8009a68:	2301      	movs	r3, #1
 8009a6a:	602b      	str	r3, [r5, #0]
				tickstart = HAL_GetTick();
 8009a6c:	f7fd fa20 	bl	8006eb0 <HAL_GetTick>
 8009a70:	4605      	mov	r5, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8009a72:	6823      	ldr	r3, [r4, #0]
 8009a74:	019a      	lsls	r2, r3, #6
 8009a76:	f53f ae52 	bmi.w	800971e <HAL_RCC_OscConfig+0x52>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8009a7a:	f7fd fa19 	bl	8006eb0 <HAL_GetTick>
 8009a7e:	1b40      	subs	r0, r0, r5
 8009a80:	2802      	cmp	r0, #2
 8009a82:	d9f6      	bls.n	8009a72 <HAL_RCC_OscConfig+0x3a6>
 8009a84:	e683      	b.n	800978e <HAL_RCC_OscConfig+0xc2>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8009a86:	f7fd fa13 	bl	8006eb0 <HAL_GetTick>
 8009a8a:	1bc0      	subs	r0, r0, r7
 8009a8c:	2802      	cmp	r0, #2
 8009a8e:	d9d8      	bls.n	8009a42 <HAL_RCC_OscConfig+0x376>
 8009a90:	e67d      	b.n	800978e <HAL_RCC_OscConfig+0xc2>
				__HAL_RCC_PLL_DISABLE();
 8009a92:	2300      	movs	r3, #0
 8009a94:	602b      	str	r3, [r5, #0]
				tickstart = HAL_GetTick();
 8009a96:	f7fd fa0b 	bl	8006eb0 <HAL_GetTick>
 8009a9a:	4604      	mov	r4, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8009a9c:	6833      	ldr	r3, [r6, #0]
 8009a9e:	019b      	lsls	r3, r3, #6
 8009aa0:	f57f ae3d 	bpl.w	800971e <HAL_RCC_OscConfig+0x52>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8009aa4:	f7fd fa04 	bl	8006eb0 <HAL_GetTick>
 8009aa8:	1b00      	subs	r0, r0, r4
 8009aaa:	2802      	cmp	r0, #2
 8009aac:	d9f6      	bls.n	8009a9c <HAL_RCC_OscConfig+0x3d0>
 8009aae:	e66e      	b.n	800978e <HAL_RCC_OscConfig+0xc2>
 8009ab0:	40023800 	.word	0x40023800
 8009ab4:	42470060 	.word	0x42470060
 8009ab8:	0801d91b 	.word	0x0801d91b

08009abc <HAL_RCC_GetSysClockFreq>:
{
	uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
	uint32_t sysclockfreq = 0U;

	/* Get SYSCLK source -------------------------------------------------------*/
	switch (RCC->CFGR & RCC_CFGR_SWS) {
 8009abc:	4913      	ldr	r1, [pc, #76]	; (8009b0c <HAL_RCC_GetSysClockFreq+0x50>)
{
 8009abe:	b508      	push	{r3, lr}
	switch (RCC->CFGR & RCC_CFGR_SWS) {
 8009ac0:	688b      	ldr	r3, [r1, #8]
 8009ac2:	f003 030c 	and.w	r3, r3, #12
 8009ac6:	2b04      	cmp	r3, #4
 8009ac8:	d003      	beq.n	8009ad2 <HAL_RCC_GetSysClockFreq+0x16>
 8009aca:	2b08      	cmp	r3, #8
 8009acc:	d003      	beq.n	8009ad6 <HAL_RCC_GetSysClockFreq+0x1a>
	case RCC_CFGR_SWS_HSI: /* HSI used as system clock source */
	{
		sysclockfreq = HSI_VALUE;
 8009ace:	4810      	ldr	r0, [pc, #64]	; (8009b10 <HAL_RCC_GetSysClockFreq+0x54>)
		sysclockfreq = HSI_VALUE;
		break;
	}
	}
	return sysclockfreq;
}
 8009ad0:	bd08      	pop	{r3, pc}
		sysclockfreq = HSE_VALUE;
 8009ad2:	4810      	ldr	r0, [pc, #64]	; (8009b14 <HAL_RCC_GetSysClockFreq+0x58>)
 8009ad4:	bd08      	pop	{r3, pc}
		pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009ad6:	684a      	ldr	r2, [r1, #4]
		if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI) {
 8009ad8:	684b      	ldr	r3, [r1, #4]
			pllvco = (uint32_t)((((uint64_t)HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009ada:	6849      	ldr	r1, [r1, #4]
		if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI) {
 8009adc:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
			pllvco = (uint32_t)((((uint64_t)HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009ae0:	bf14      	ite	ne
 8009ae2:	480c      	ldrne	r0, [pc, #48]	; (8009b14 <HAL_RCC_GetSysClockFreq+0x58>)
			pllvco = (uint32_t)((((uint64_t)HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009ae4:	480a      	ldreq	r0, [pc, #40]	; (8009b10 <HAL_RCC_GetSysClockFreq+0x54>)
			pllvco = (uint32_t)((((uint64_t)HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009ae6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8009aea:	bf18      	it	ne
 8009aec:	2300      	movne	r3, #0
		pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009aee:	f002 023f 	and.w	r2, r2, #63	; 0x3f
			pllvco = (uint32_t)((((uint64_t)HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009af2:	fba1 0100 	umull	r0, r1, r1, r0
 8009af6:	f7f7 f8cb 	bl	8000c90 <__aeabi_uldivmod>
		pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8009afa:	4b04      	ldr	r3, [pc, #16]	; (8009b0c <HAL_RCC_GetSysClockFreq+0x50>)
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8009b02:	3301      	adds	r3, #1
 8009b04:	005b      	lsls	r3, r3, #1
		sysclockfreq = pllvco / pllp;
 8009b06:	fbb0 f0f3 	udiv	r0, r0, r3
 8009b0a:	bd08      	pop	{r3, pc}
 8009b0c:	40023800 	.word	0x40023800
 8009b10:	00f42400 	.word	0x00f42400
 8009b14:	007a1200 	.word	0x007a1200

08009b18 <HAL_RCC_ClockConfig>:
{
 8009b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b1c:	460d      	mov	r5, r1
	if (RCC_ClkInitStruct == NULL) {
 8009b1e:	4604      	mov	r4, r0
 8009b20:	b910      	cbnz	r0, 8009b28 <HAL_RCC_ClockConfig+0x10>
		return HAL_ERROR;
 8009b22:	2001      	movs	r0, #1
 8009b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8009b28:	6803      	ldr	r3, [r0, #0]
 8009b2a:	3b01      	subs	r3, #1
 8009b2c:	2b0e      	cmp	r3, #14
 8009b2e:	d904      	bls.n	8009b3a <HAL_RCC_ClockConfig+0x22>
 8009b30:	f240 2113 	movw	r1, #531	; 0x213
 8009b34:	486d      	ldr	r0, [pc, #436]	; (8009cec <HAL_RCC_ClockConfig+0x1d4>)
 8009b36:	f003 f80b 	bl	800cb50 <assert_failed>
	assert_param(IS_FLASH_LATENCY(FLatency));
 8009b3a:	2d07      	cmp	r5, #7
 8009b3c:	d904      	bls.n	8009b48 <HAL_RCC_ClockConfig+0x30>
 8009b3e:	f44f 7105 	mov.w	r1, #532	; 0x214
 8009b42:	486a      	ldr	r0, [pc, #424]	; (8009cec <HAL_RCC_ClockConfig+0x1d4>)
 8009b44:	f003 f804 	bl	800cb50 <assert_failed>
	if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 8009b48:	4b69      	ldr	r3, [pc, #420]	; (8009cf0 <HAL_RCC_ClockConfig+0x1d8>)
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	f002 020f 	and.w	r2, r2, #15
 8009b50:	4295      	cmp	r5, r2
 8009b52:	d83d      	bhi.n	8009bd0 <HAL_RCC_ClockConfig+0xb8>
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) {
 8009b54:	6822      	ldr	r2, [r4, #0]
 8009b56:	0796      	lsls	r6, r2, #30
 8009b58:	d442      	bmi.n	8009be0 <HAL_RCC_ClockConfig+0xc8>
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK) {
 8009b5a:	6823      	ldr	r3, [r4, #0]
 8009b5c:	07d9      	lsls	r1, r3, #31
 8009b5e:	d46c      	bmi.n	8009c3a <HAL_RCC_ClockConfig+0x122>
	if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 8009b60:	4b63      	ldr	r3, [pc, #396]	; (8009cf0 <HAL_RCC_ClockConfig+0x1d8>)
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	f002 020f 	and.w	r2, r2, #15
 8009b68:	4295      	cmp	r5, r2
 8009b6a:	f0c0 809c 	bcc.w	8009ca6 <HAL_RCC_ClockConfig+0x18e>
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1) {
 8009b6e:	6823      	ldr	r3, [r4, #0]
 8009b70:	075a      	lsls	r2, r3, #29
 8009b72:	f100 80a1 	bmi.w	8009cb8 <HAL_RCC_ClockConfig+0x1a0>
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2) {
 8009b76:	6823      	ldr	r3, [r4, #0]
 8009b78:	071b      	lsls	r3, r3, #28
 8009b7a:	d518      	bpl.n	8009bae <HAL_RCC_ClockConfig+0x96>
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8009b7c:	6923      	ldr	r3, [r4, #16]
 8009b7e:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 8009b82:	d00c      	beq.n	8009b9e <HAL_RCC_ClockConfig+0x86>
 8009b84:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009b88:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8009b8c:	d007      	beq.n	8009b9e <HAL_RCC_ClockConfig+0x86>
 8009b8e:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8009b92:	d004      	beq.n	8009b9e <HAL_RCC_ClockConfig+0x86>
 8009b94:	f240 2171 	movw	r1, #625	; 0x271
 8009b98:	4854      	ldr	r0, [pc, #336]	; (8009cec <HAL_RCC_ClockConfig+0x1d4>)
 8009b9a:	f002 ffd9 	bl	800cb50 <assert_failed>
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009b9e:	4a55      	ldr	r2, [pc, #340]	; (8009cf4 <HAL_RCC_ClockConfig+0x1dc>)
 8009ba0:	6921      	ldr	r1, [r4, #16]
 8009ba2:	6893      	ldr	r3, [r2, #8]
 8009ba4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009ba8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8009bac:	6093      	str	r3, [r2, #8]
	SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009bae:	f7ff ff85 	bl	8009abc <HAL_RCC_GetSysClockFreq>
 8009bb2:	4b50      	ldr	r3, [pc, #320]	; (8009cf4 <HAL_RCC_ClockConfig+0x1dc>)
 8009bb4:	4a50      	ldr	r2, [pc, #320]	; (8009cf8 <HAL_RCC_ClockConfig+0x1e0>)
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009bbc:	5cd3      	ldrb	r3, [r2, r3]
 8009bbe:	40d8      	lsrs	r0, r3
 8009bc0:	4b4e      	ldr	r3, [pc, #312]	; (8009cfc <HAL_RCC_ClockConfig+0x1e4>)
 8009bc2:	6018      	str	r0, [r3, #0]
	HAL_InitTick(TICK_INT_PRIORITY);
 8009bc4:	2000      	movs	r0, #0
 8009bc6:	f7fd f929 	bl	8006e1c <HAL_InitTick>
	return HAL_OK;
 8009bca:	2000      	movs	r0, #0
 8009bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		__HAL_FLASH_SET_LATENCY(FLatency);
 8009bd0:	b2ea      	uxtb	r2, r5
 8009bd2:	701a      	strb	r2, [r3, #0]
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f003 030f 	and.w	r3, r3, #15
 8009bda:	429d      	cmp	r5, r3
 8009bdc:	d1a1      	bne.n	8009b22 <HAL_RCC_ClockConfig+0xa>
 8009bde:	e7b9      	b.n	8009b54 <HAL_RCC_ClockConfig+0x3c>
 8009be0:	4b44      	ldr	r3, [pc, #272]	; (8009cf4 <HAL_RCC_ClockConfig+0x1dc>)
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1) {
 8009be2:	f012 0f04 	tst.w	r2, #4
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009be6:	bf1e      	ittt	ne
 8009be8:	6899      	ldrne	r1, [r3, #8]
 8009bea:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8009bee:	6099      	strne	r1, [r3, #8]
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2) {
 8009bf0:	0710      	lsls	r0, r2, #28
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009bf2:	bf42      	ittt	mi
 8009bf4:	689a      	ldrmi	r2, [r3, #8]
 8009bf6:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8009bfa:	609a      	strmi	r2, [r3, #8]
		assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8009bfc:	68a3      	ldr	r3, [r4, #8]
 8009bfe:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 8009c02:	d012      	beq.n	8009c2a <HAL_RCC_ClockConfig+0x112>
 8009c04:	f023 0220 	bic.w	r2, r3, #32
 8009c08:	2a90      	cmp	r2, #144	; 0x90
 8009c0a:	d00e      	beq.n	8009c2a <HAL_RCC_ClockConfig+0x112>
 8009c0c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009c10:	2aa0      	cmp	r2, #160	; 0xa0
 8009c12:	d00a      	beq.n	8009c2a <HAL_RCC_ClockConfig+0x112>
 8009c14:	f023 0210 	bic.w	r2, r3, #16
 8009c18:	2ac0      	cmp	r2, #192	; 0xc0
 8009c1a:	d006      	beq.n	8009c2a <HAL_RCC_ClockConfig+0x112>
 8009c1c:	2bf0      	cmp	r3, #240	; 0xf0
 8009c1e:	d004      	beq.n	8009c2a <HAL_RCC_ClockConfig+0x112>
 8009c20:	f240 2132 	movw	r1, #562	; 0x232
 8009c24:	4831      	ldr	r0, [pc, #196]	; (8009cec <HAL_RCC_ClockConfig+0x1d4>)
 8009c26:	f002 ff93 	bl	800cb50 <assert_failed>
		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009c2a:	4a32      	ldr	r2, [pc, #200]	; (8009cf4 <HAL_RCC_ClockConfig+0x1dc>)
 8009c2c:	68a1      	ldr	r1, [r4, #8]
 8009c2e:	6893      	ldr	r3, [r2, #8]
 8009c30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009c34:	430b      	orrs	r3, r1
 8009c36:	6093      	str	r3, [r2, #8]
 8009c38:	e78f      	b.n	8009b5a <HAL_RCC_ClockConfig+0x42>
		assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8009c3a:	6863      	ldr	r3, [r4, #4]
 8009c3c:	2b03      	cmp	r3, #3
 8009c3e:	d904      	bls.n	8009c4a <HAL_RCC_ClockConfig+0x132>
 8009c40:	f44f 710e 	mov.w	r1, #568	; 0x238
 8009c44:	4829      	ldr	r0, [pc, #164]	; (8009cec <HAL_RCC_ClockConfig+0x1d4>)
 8009c46:	f002 ff83 	bl	800cb50 <assert_failed>
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 8009c4a:	6862      	ldr	r2, [r4, #4]
 8009c4c:	4b29      	ldr	r3, [pc, #164]	; (8009cf4 <HAL_RCC_ClockConfig+0x1dc>)
 8009c4e:	2a01      	cmp	r2, #1
 8009c50:	d11f      	bne.n	8009c92 <HAL_RCC_ClockConfig+0x17a>
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f413 3f00 	tst.w	r3, #131072	; 0x20000
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8009c58:	f43f af63 	beq.w	8009b22 <HAL_RCC_ClockConfig+0xa>
		__HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009c5c:	4e25      	ldr	r6, [pc, #148]	; (8009cf4 <HAL_RCC_ClockConfig+0x1dc>)
 8009c5e:	68b3      	ldr	r3, [r6, #8]
 8009c60:	f023 0303 	bic.w	r3, r3, #3
 8009c64:	4313      	orrs	r3, r2
 8009c66:	60b3      	str	r3, [r6, #8]
		tickstart = HAL_GetTick();
 8009c68:	f7fd f922 	bl	8006eb0 <HAL_GetTick>
			if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8009c6c:	f241 3888 	movw	r8, #5000	; 0x1388
		tickstart = HAL_GetTick();
 8009c70:	4607      	mov	r7, r0
		while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 8009c72:	68b3      	ldr	r3, [r6, #8]
 8009c74:	6862      	ldr	r2, [r4, #4]
 8009c76:	f003 030c 	and.w	r3, r3, #12
 8009c7a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8009c7e:	f43f af6f 	beq.w	8009b60 <HAL_RCC_ClockConfig+0x48>
			if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8009c82:	f7fd f915 	bl	8006eb0 <HAL_GetTick>
 8009c86:	1bc0      	subs	r0, r0, r7
 8009c88:	4540      	cmp	r0, r8
 8009c8a:	d9f2      	bls.n	8009c72 <HAL_RCC_ClockConfig+0x15a>
				return HAL_TIMEOUT;
 8009c8c:	2003      	movs	r0, #3
}
 8009c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) ||
 8009c92:	1e91      	subs	r1, r2, #2
 8009c94:	2901      	cmp	r1, #1
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8009c96:	681b      	ldr	r3, [r3, #0]
		else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) ||
 8009c98:	d802      	bhi.n	8009ca0 <HAL_RCC_ClockConfig+0x188>
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8009c9a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8009c9e:	e7db      	b.n	8009c58 <HAL_RCC_ClockConfig+0x140>
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8009ca0:	f013 0f02 	tst.w	r3, #2
 8009ca4:	e7d8      	b.n	8009c58 <HAL_RCC_ClockConfig+0x140>
		__HAL_FLASH_SET_LATENCY(FLatency);
 8009ca6:	b2ea      	uxtb	r2, r5
 8009ca8:	701a      	strb	r2, [r3, #0]
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f003 030f 	and.w	r3, r3, #15
 8009cb0:	429d      	cmp	r5, r3
 8009cb2:	f47f af36 	bne.w	8009b22 <HAL_RCC_ClockConfig+0xa>
 8009cb6:	e75a      	b.n	8009b6e <HAL_RCC_ClockConfig+0x56>
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8009cb8:	68e3      	ldr	r3, [r4, #12]
 8009cba:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 8009cbe:	d00c      	beq.n	8009cda <HAL_RCC_ClockConfig+0x1c2>
 8009cc0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009cc4:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8009cc8:	d007      	beq.n	8009cda <HAL_RCC_ClockConfig+0x1c2>
 8009cca:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8009cce:	d004      	beq.n	8009cda <HAL_RCC_ClockConfig+0x1c2>
 8009cd0:	f240 216b 	movw	r1, #619	; 0x26b
 8009cd4:	4805      	ldr	r0, [pc, #20]	; (8009cec <HAL_RCC_ClockConfig+0x1d4>)
 8009cd6:	f002 ff3b 	bl	800cb50 <assert_failed>
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009cda:	4a06      	ldr	r2, [pc, #24]	; (8009cf4 <HAL_RCC_ClockConfig+0x1dc>)
 8009cdc:	68e1      	ldr	r1, [r4, #12]
 8009cde:	6893      	ldr	r3, [r2, #8]
 8009ce0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8009ce4:	430b      	orrs	r3, r1
 8009ce6:	6093      	str	r3, [r2, #8]
 8009ce8:	e745      	b.n	8009b76 <HAL_RCC_ClockConfig+0x5e>
 8009cea:	bf00      	nop
 8009cec:	0801d91b 	.word	0x0801d91b
 8009cf0:	40023c00 	.word	0x40023c00
 8009cf4:	40023800 	.word	0x40023800
 8009cf8:	0801db7d 	.word	0x0801db7d
 8009cfc:	2000149c 	.word	0x2000149c

08009d00 <HAL_RCC_GetPCLK1Freq>:
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return(HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009d00:	4b04      	ldr	r3, [pc, #16]	; (8009d14 <HAL_RCC_GetPCLK1Freq+0x14>)
 8009d02:	4a05      	ldr	r2, [pc, #20]	; (8009d18 <HAL_RCC_GetPCLK1Freq+0x18>)
 8009d04:	689b      	ldr	r3, [r3, #8]
 8009d06:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8009d0a:	5cd3      	ldrb	r3, [r2, r3]
 8009d0c:	4a03      	ldr	r2, [pc, #12]	; (8009d1c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8009d0e:	6810      	ldr	r0, [r2, #0]
}
 8009d10:	40d8      	lsrs	r0, r3
 8009d12:	4770      	bx	lr
 8009d14:	40023800 	.word	0x40023800
 8009d18:	0801db8d 	.word	0x0801db8d
 8009d1c:	2000149c 	.word	0x2000149c

08009d20 <HAL_RCC_GetPCLK2Freq>:
 * @retval PCLK2 frequency
 */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return(HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009d20:	4b04      	ldr	r3, [pc, #16]	; (8009d34 <HAL_RCC_GetPCLK2Freq+0x14>)
 8009d22:	4a05      	ldr	r2, [pc, #20]	; (8009d38 <HAL_RCC_GetPCLK2Freq+0x18>)
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8009d2a:	5cd3      	ldrb	r3, [r2, r3]
 8009d2c:	4a03      	ldr	r2, [pc, #12]	; (8009d3c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8009d2e:	6810      	ldr	r0, [r2, #0]
}
 8009d30:	40d8      	lsrs	r0, r3
 8009d32:	4770      	bx	lr
 8009d34:	40023800 	.word	0x40023800
 8009d38:	0801db8d 	.word	0x0801db8d
 8009d3c:	2000149c 	.word	0x2000149c

08009d40 <HAL_RCCEx_PeriphCLKConfig>:
{
	uint32_t tickstart = 0U;
	uint32_t tmpreg1 = 0U;

	/* Check the parameters */
	assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8009d40:	6803      	ldr	r3, [r0, #0]
 8009d42:	3b01      	subs	r3, #1
 8009d44:	2b0e      	cmp	r3, #14
{
 8009d46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d48:	4604      	mov	r4, r0
	assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8009d4a:	d904      	bls.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0x16>
 8009d4c:	f640 01f6 	movw	r1, #2294	; 0x8f6
 8009d50:	486d      	ldr	r0, [pc, #436]	; (8009f08 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8009d52:	f002 fefd 	bl	800cb50 <assert_failed>

	/*---------------------------- I2S configuration ---------------------------*/
	if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009d56:	6823      	ldr	r3, [r4, #0]
 8009d58:	f013 0f05 	tst.w	r3, #5
 8009d5c:	d10b      	bne.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0x36>
			}
		}
	}

	/*---------------------------- RTC configuration ---------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC)) {
 8009d5e:	6823      	ldr	r3, [r4, #0]
 8009d60:	079a      	lsls	r2, r3, #30
 8009d62:	d443      	bmi.n	8009dec <HAL_RCCEx_PeriphCLKConfig+0xac>
		}
		__HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
	}
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
	/*---------------------------- TIM configuration ---------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM)) {
 8009d64:	6820      	ldr	r0, [r4, #0]
 8009d66:	f010 0008 	ands.w	r0, r0, #8
		__HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009d6a:	bf1f      	itttt	ne
 8009d6c:	4b67      	ldrne	r3, [pc, #412]	; (8009f0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009d6e:	7c22      	ldrbne	r2, [r4, #16]
 8009d70:	601a      	strne	r2, [r3, #0]
	}
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
	return HAL_OK;
 8009d72:	2000      	movne	r0, #0
 8009d74:	e038      	b.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0xa8>
		assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8009d76:	68a3      	ldr	r3, [r4, #8]
 8009d78:	3b02      	subs	r3, #2
 8009d7a:	2b05      	cmp	r3, #5
 8009d7c:	d904      	bls.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8009d7e:	f640 01fc 	movw	r1, #2300	; 0x8fc
 8009d82:	4861      	ldr	r0, [pc, #388]	; (8009f08 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8009d84:	f002 fee4 	bl	800cb50 <assert_failed>
		assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8009d88:	6863      	ldr	r3, [r4, #4]
 8009d8a:	3b32      	subs	r3, #50	; 0x32
 8009d8c:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 8009d90:	d904      	bls.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8009d92:	f640 01fd 	movw	r1, #2301	; 0x8fd
 8009d96:	485c      	ldr	r0, [pc, #368]	; (8009f08 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8009d98:	f002 feda 	bl	800cb50 <assert_failed>
		__HAL_RCC_PLLI2S_DISABLE();
 8009d9c:	4d5c      	ldr	r5, [pc, #368]	; (8009f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET) {
 8009d9e:	4e5d      	ldr	r6, [pc, #372]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
		__HAL_RCC_PLLI2S_DISABLE();
 8009da0:	2300      	movs	r3, #0
 8009da2:	602b      	str	r3, [r5, #0]
		tickstart = HAL_GetTick();
 8009da4:	f7fd f884 	bl	8006eb0 <HAL_GetTick>
 8009da8:	4607      	mov	r7, r0
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET) {
 8009daa:	6833      	ldr	r3, [r6, #0]
 8009dac:	011b      	lsls	r3, r3, #4
 8009dae:	d415      	bmi.n	8009ddc <HAL_RCCEx_PeriphCLKConfig+0x9c>
		__HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8009db0:	68a3      	ldr	r3, [r4, #8]
 8009db2:	6862      	ldr	r2, [r4, #4]
 8009db4:	071b      	lsls	r3, r3, #28
 8009db6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8009dba:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
		__HAL_RCC_PLLI2S_ENABLE();
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	602b      	str	r3, [r5, #0]
		tickstart = HAL_GetTick();
 8009dc2:	f7fd f875 	bl	8006eb0 <HAL_GetTick>
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET) {
 8009dc6:	4d53      	ldr	r5, [pc, #332]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
		tickstart = HAL_GetTick();
 8009dc8:	4606      	mov	r6, r0
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET) {
 8009dca:	682b      	ldr	r3, [r5, #0]
 8009dcc:	0118      	lsls	r0, r3, #4
 8009dce:	d4c6      	bmi.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x1e>
			if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE) {
 8009dd0:	f7fd f86e 	bl	8006eb0 <HAL_GetTick>
 8009dd4:	1b80      	subs	r0, r0, r6
 8009dd6:	2802      	cmp	r0, #2
 8009dd8:	d9f7      	bls.n	8009dca <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8009dda:	e004      	b.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
			if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE) {
 8009ddc:	f7fd f868 	bl	8006eb0 <HAL_GetTick>
 8009de0:	1bc0      	subs	r0, r0, r7
 8009de2:	2802      	cmp	r0, #2
 8009de4:	d9e1      	bls.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0x6a>
				return HAL_TIMEOUT;
 8009de6:	2003      	movs	r0, #3
}
 8009de8:	b003      	add	sp, #12
 8009dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8009dec:	68e3      	ldr	r3, [r4, #12]
 8009dee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009df2:	d02e      	beq.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8009df4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009df8:	d02b      	beq.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8009dfa:	4a47      	ldr	r2, [pc, #284]	; (8009f18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009dfc:	f423 20a0 	bic.w	r0, r3, #327680	; 0x50000
 8009e00:	4290      	cmp	r0, r2
 8009e02:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009e06:	d024      	beq.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8009e08:	f423 2010 	bic.w	r0, r3, #589824	; 0x90000
 8009e0c:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
 8009e10:	4290      	cmp	r0, r2
 8009e12:	d01e      	beq.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8009e14:	4841      	ldr	r0, [pc, #260]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8009e16:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009e1a:	4282      	cmp	r2, r0
 8009e1c:	d019      	beq.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8009e1e:	f423 1388 	bic.w	r3, r3, #1114112	; 0x110000
 8009e22:	f500 20c0 	add.w	r0, r0, #393216	; 0x60000
 8009e26:	4283      	cmp	r3, r0
 8009e28:	d013      	beq.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8009e2a:	4b3d      	ldr	r3, [pc, #244]	; (8009f20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d010      	beq.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8009e30:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d00c      	beq.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8009e38:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d008      	beq.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8009e40:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8009e44:	4299      	cmp	r1, r3
 8009e46:	d004      	beq.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8009e48:	f640 1129 	movw	r1, #2345	; 0x929
 8009e4c:	482e      	ldr	r0, [pc, #184]	; (8009f08 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8009e4e:	f002 fe7f 	bl	800cb50 <assert_failed>
		__HAL_RCC_PWR_CLK_ENABLE();
 8009e52:	2300      	movs	r3, #0
 8009e54:	9301      	str	r3, [sp, #4]
 8009e56:	4b2f      	ldr	r3, [pc, #188]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
		PWR->CR |= PWR_CR_DBP;
 8009e58:	4d32      	ldr	r5, [pc, #200]	; (8009f24 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
		__HAL_RCC_PWR_CLK_ENABLE();
 8009e5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e5c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009e60:	641a      	str	r2, [r3, #64]	; 0x40
 8009e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e68:	9301      	str	r3, [sp, #4]
 8009e6a:	9b01      	ldr	r3, [sp, #4]
		PWR->CR |= PWR_CR_DBP;
 8009e6c:	682b      	ldr	r3, [r5, #0]
 8009e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e72:	602b      	str	r3, [r5, #0]
		tickstart = HAL_GetTick();
 8009e74:	f7fd f81c 	bl	8006eb0 <HAL_GetTick>
 8009e78:	4606      	mov	r6, r0
		while ((PWR->CR & PWR_CR_DBP) == RESET) {
 8009e7a:	682b      	ldr	r3, [r5, #0]
 8009e7c:	05d9      	lsls	r1, r3, #23
 8009e7e:	d51a      	bpl.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x176>
		tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009e80:	4d24      	ldr	r5, [pc, #144]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009e82:	6f2b      	ldr	r3, [r5, #112]	; 0x70
		if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))) {
 8009e84:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8009e88:	d11b      	bne.n	8009ec2 <HAL_RCCEx_PeriphCLKConfig+0x182>
		__HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009e8a:	68e3      	ldr	r3, [r4, #12]
 8009e8c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8009e90:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8009e94:	4a1f      	ldr	r2, [pc, #124]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009e96:	d133      	bne.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8009e98:	6891      	ldr	r1, [r2, #8]
 8009e9a:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8009e9e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8009ea2:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8009ea6:	4301      	orrs	r1, r0
 8009ea8:	6091      	str	r1, [r2, #8]
 8009eaa:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8009eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009eb0:	430b      	orrs	r3, r1
 8009eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8009eb4:	e756      	b.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x24>
			if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 8009eb6:	f7fc fffb 	bl	8006eb0 <HAL_GetTick>
 8009eba:	1b80      	subs	r0, r0, r6
 8009ebc:	2802      	cmp	r0, #2
 8009ebe:	d9dc      	bls.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x13a>
 8009ec0:	e791      	b.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
		if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))) {
 8009ec2:	68e2      	ldr	r2, [r4, #12]
 8009ec4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d0de      	beq.n	8009e8a <HAL_RCCEx_PeriphCLKConfig+0x14a>
			tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009ecc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
			__HAL_RCC_BACKUPRESET_FORCE();
 8009ece:	4a16      	ldr	r2, [pc, #88]	; (8009f28 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8009ed0:	2101      	movs	r1, #1
 8009ed2:	6011      	str	r1, [r2, #0]
			tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
			__HAL_RCC_BACKUPRESET_RELEASE();
 8009ed8:	2100      	movs	r1, #0
 8009eda:	6011      	str	r1, [r2, #0]
			RCC->BDCR = tmpreg1;
 8009edc:	672b      	str	r3, [r5, #112]	; 0x70
			if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON)) {
 8009ede:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8009ee0:	07da      	lsls	r2, r3, #31
 8009ee2:	d5d2      	bpl.n	8009e8a <HAL_RCCEx_PeriphCLKConfig+0x14a>
				tickstart = HAL_GetTick();
 8009ee4:	f7fc ffe4 	bl	8006eb0 <HAL_GetTick>
					if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8009ee8:	f241 3788 	movw	r7, #5000	; 0x1388
				tickstart = HAL_GetTick();
 8009eec:	4606      	mov	r6, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8009eee:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8009ef0:	079b      	lsls	r3, r3, #30
 8009ef2:	d4ca      	bmi.n	8009e8a <HAL_RCCEx_PeriphCLKConfig+0x14a>
					if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8009ef4:	f7fc ffdc 	bl	8006eb0 <HAL_GetTick>
 8009ef8:	1b80      	subs	r0, r0, r6
 8009efa:	42b8      	cmp	r0, r7
 8009efc:	d9f7      	bls.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8009efe:	e772      	b.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
		__HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009f00:	6891      	ldr	r1, [r2, #8]
 8009f02:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8009f06:	e7cf      	b.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8009f08:	0801d953 	.word	0x0801d953
 8009f0c:	424711e0 	.word	0x424711e0
 8009f10:	42470068 	.word	0x42470068
 8009f14:	40023800 	.word	0x40023800
 8009f18:	00020300 	.word	0x00020300
 8009f1c:	00080300 	.word	0x00080300
 8009f20:	00100300 	.word	0x00100300
 8009f24:	40007000 	.word	0x40007000
 8009f28:	42470e40 	.word	0x42470e40

08009f2c <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009f2c:	6802      	ldr	r2, [r0, #0]
{
 8009f2e:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009f30:	68d3      	ldr	r3, [r2, #12]
 8009f32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009f36:	60d3      	str	r3, [r2, #12]
{
 8009f38:	4604      	mov	r4, r0

    /* Get tick */
    tickstart = HAL_GetTick();
 8009f3a:	f7fc ffb9 	bl	8006eb0 <HAL_GetTick>
 8009f3e:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009f40:	6823      	ldr	r3, [r4, #0]
 8009f42:	68db      	ldr	r3, [r3, #12]
 8009f44:	069b      	lsls	r3, r3, #26
 8009f46:	d501      	bpl.n	8009f4c <HAL_RTC_WaitForSynchro+0x20>
    {       
      return HAL_TIMEOUT;
    } 
  }

  return HAL_OK;
 8009f48:	2000      	movs	r0, #0
 8009f4a:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009f4c:	f7fc ffb0 	bl	8006eb0 <HAL_GetTick>
 8009f50:	1b40      	subs	r0, r0, r5
 8009f52:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8009f56:	d9f3      	bls.n	8009f40 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8009f58:	2003      	movs	r0, #3
}
 8009f5a:	bd38      	pop	{r3, r4, r5, pc}

08009f5c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009f5c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U; 
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009f5e:	6803      	ldr	r3, [r0, #0]
 8009f60:	68da      	ldr	r2, [r3, #12]
 8009f62:	0652      	lsls	r2, r2, #25
{
 8009f64:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009f66:	d501      	bpl.n	8009f6c <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8009f68:	2000      	movs	r0, #0
 8009f6a:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8009f70:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8009f72:	f7fc ff9d 	bl	8006eb0 <HAL_GetTick>
 8009f76:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009f78:	6823      	ldr	r3, [r4, #0]
 8009f7a:	68db      	ldr	r3, [r3, #12]
 8009f7c:	065b      	lsls	r3, r3, #25
 8009f7e:	d4f3      	bmi.n	8009f68 <RTC_EnterInitMode+0xc>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009f80:	f7fc ff96 	bl	8006eb0 <HAL_GetTick>
 8009f84:	1b40      	subs	r0, r0, r5
 8009f86:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8009f8a:	d9f5      	bls.n	8009f78 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8009f8c:	2003      	movs	r0, #3
}
 8009f8e:	bd38      	pop	{r3, r4, r5, pc}

08009f90 <HAL_RTC_Init>:
{
 8009f90:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8009f92:	4604      	mov	r4, r0
 8009f94:	2800      	cmp	r0, #0
 8009f96:	d047      	beq.n	800a028 <HAL_RTC_Init+0x98>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 8009f98:	6843      	ldr	r3, [r0, #4]
 8009f9a:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 8009f9e:	d003      	beq.n	8009fa8 <HAL_RTC_Init+0x18>
 8009fa0:	21d2      	movs	r1, #210	; 0xd2
 8009fa2:	483b      	ldr	r0, [pc, #236]	; (800a090 <HAL_RTC_Init+0x100>)
 8009fa4:	f002 fdd4 	bl	800cb50 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8009fa8:	68a3      	ldr	r3, [r4, #8]
 8009faa:	2b7f      	cmp	r3, #127	; 0x7f
 8009fac:	d903      	bls.n	8009fb6 <HAL_RTC_Init+0x26>
 8009fae:	21d3      	movs	r1, #211	; 0xd3
 8009fb0:	4837      	ldr	r0, [pc, #220]	; (800a090 <HAL_RTC_Init+0x100>)
 8009fb2:	f002 fdcd 	bl	800cb50 <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8009fb6:	68e3      	ldr	r3, [r4, #12]
 8009fb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fbc:	d303      	bcc.n	8009fc6 <HAL_RTC_Init+0x36>
 8009fbe:	21d4      	movs	r1, #212	; 0xd4
 8009fc0:	4833      	ldr	r0, [pc, #204]	; (800a090 <HAL_RTC_Init+0x100>)
 8009fc2:	f002 fdc5 	bl	800cb50 <assert_failed>
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
 8009fc6:	6923      	ldr	r3, [r4, #16]
 8009fc8:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 8009fcc:	d003      	beq.n	8009fd6 <HAL_RTC_Init+0x46>
 8009fce:	21d5      	movs	r1, #213	; 0xd5
 8009fd0:	482f      	ldr	r0, [pc, #188]	; (800a090 <HAL_RTC_Init+0x100>)
 8009fd2:	f002 fdbd 	bl	800cb50 <assert_failed>
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 8009fd6:	6963      	ldr	r3, [r4, #20]
 8009fd8:	f433 1380 	bics.w	r3, r3, #1048576	; 0x100000
 8009fdc:	d003      	beq.n	8009fe6 <HAL_RTC_Init+0x56>
 8009fde:	21d6      	movs	r1, #214	; 0xd6
 8009fe0:	482b      	ldr	r0, [pc, #172]	; (800a090 <HAL_RTC_Init+0x100>)
 8009fe2:	f002 fdb5 	bl	800cb50 <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 8009fe6:	69a3      	ldr	r3, [r4, #24]
 8009fe8:	f433 2380 	bics.w	r3, r3, #262144	; 0x40000
 8009fec:	d003      	beq.n	8009ff6 <HAL_RTC_Init+0x66>
 8009fee:	21d7      	movs	r1, #215	; 0xd7
 8009ff0:	4827      	ldr	r0, [pc, #156]	; (800a090 <HAL_RTC_Init+0x100>)
 8009ff2:	f002 fdad 	bl	800cb50 <assert_failed>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8009ff6:	7f63      	ldrb	r3, [r4, #29]
 8009ff8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009ffc:	b91b      	cbnz	r3, 800a006 <HAL_RTC_Init+0x76>
    hrtc->Lock = HAL_UNLOCKED;
 8009ffe:	7722      	strb	r2, [r4, #28]
    HAL_RTC_MspInit(hrtc);
 800a000:	4620      	mov	r0, r4
 800a002:	f002 fe79 	bl	800ccf8 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 800a006:	2302      	movs	r3, #2
 800a008:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a00a:	6823      	ldr	r3, [r4, #0]
 800a00c:	22ca      	movs	r2, #202	; 0xca
 800a00e:	625a      	str	r2, [r3, #36]	; 0x24
 800a010:	2253      	movs	r2, #83	; 0x53
 800a012:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a014:	4620      	mov	r0, r4
 800a016:	f7ff ffa1 	bl	8009f5c <RTC_EnterInitMode>
 800a01a:	6823      	ldr	r3, [r4, #0]
 800a01c:	4605      	mov	r5, r0
 800a01e:	b128      	cbz	r0, 800a02c <HAL_RTC_Init+0x9c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a020:	22ff      	movs	r2, #255	; 0xff
 800a022:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800a024:	2304      	movs	r3, #4
 800a026:	7763      	strb	r3, [r4, #29]
     return HAL_ERROR;
 800a028:	2501      	movs	r5, #1
 800a02a:	e02e      	b.n	800a08a <HAL_RTC_Init+0xfa>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a02c:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a02e:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a030:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800a034:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a038:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a03a:	6862      	ldr	r2, [r4, #4]
 800a03c:	6899      	ldr	r1, [r3, #8]
 800a03e:	4302      	orrs	r2, r0
 800a040:	6960      	ldr	r0, [r4, #20]
 800a042:	4302      	orrs	r2, r0
 800a044:	430a      	orrs	r2, r1
 800a046:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a048:	68e2      	ldr	r2, [r4, #12]
 800a04a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800a04c:	691a      	ldr	r2, [r3, #16]
 800a04e:	68a1      	ldr	r1, [r4, #8]
 800a050:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800a054:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 800a056:	68da      	ldr	r2, [r3, #12]
 800a058:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a05c:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a05e:	689b      	ldr	r3, [r3, #8]
 800a060:	069b      	lsls	r3, r3, #26
 800a062:	d405      	bmi.n	800a070 <HAL_RTC_Init+0xe0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a064:	4620      	mov	r0, r4
 800a066:	f7ff ff61 	bl	8009f2c <HAL_RTC_WaitForSynchro>
 800a06a:	b108      	cbz	r0, 800a070 <HAL_RTC_Init+0xe0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a06c:	6823      	ldr	r3, [r4, #0]
 800a06e:	e7d7      	b.n	800a020 <HAL_RTC_Init+0x90>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800a070:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 800a072:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800a074:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a076:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a07a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 800a07c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a07e:	430a      	orrs	r2, r1
 800a080:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 800a082:	22ff      	movs	r2, #255	; 0xff
 800a084:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 800a086:	2301      	movs	r3, #1
 800a088:	7763      	strb	r3, [r4, #29]
}
 800a08a:	4628      	mov	r0, r5
 800a08c:	bd38      	pop	{r3, r4, r5, pc}
 800a08e:	bf00      	nop
 800a090:	0801d98e 	.word	0x0801d98e

0800a094 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 800a094:	2300      	movs	r3, #0
  
  while(Value >= 10U)
 800a096:	2809      	cmp	r0, #9
 800a098:	d803      	bhi.n	800a0a2 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800a09a:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 800a09e:	b2c0      	uxtb	r0, r0
 800a0a0:	4770      	bx	lr
    Value -= 10U;
 800a0a2:	380a      	subs	r0, #10
    bcdhigh++;
 800a0a4:	3301      	adds	r3, #1
    Value -= 10U;
 800a0a6:	b2c0      	uxtb	r0, r0
 800a0a8:	e7f5      	b.n	800a096 <RTC_ByteToBcd2+0x2>

0800a0aa <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800a0aa:	0903      	lsrs	r3, r0, #4
 800a0ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 800a0b0:	f000 000f 	and.w	r0, r0, #15
 800a0b4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 800a0b8:	b2c0      	uxtb	r0, r0
 800a0ba:	4770      	bx	lr

0800a0bc <HAL_RTC_SetTime>:
  assert_param(IS_RTC_FORMAT(Format));
 800a0bc:	2a01      	cmp	r2, #1
{
 800a0be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0c0:	4606      	mov	r6, r0
 800a0c2:	460c      	mov	r4, r1
 800a0c4:	4615      	mov	r5, r2
  assert_param(IS_RTC_FORMAT(Format));
 800a0c6:	d904      	bls.n	800a0d2 <HAL_RTC_SetTime+0x16>
 800a0c8:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800a0cc:	486d      	ldr	r0, [pc, #436]	; (800a284 <HAL_RTC_SetTime+0x1c8>)
 800a0ce:	f002 fd3f 	bl	800cb50 <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 800a0d2:	68e3      	ldr	r3, [r4, #12]
 800a0d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a0d8:	d007      	beq.n	800a0ea <HAL_RTC_SetTime+0x2e>
 800a0da:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800a0de:	d004      	beq.n	800a0ea <HAL_RTC_SetTime+0x2e>
 800a0e0:	f240 11c1 	movw	r1, #449	; 0x1c1
 800a0e4:	4867      	ldr	r0, [pc, #412]	; (800a284 <HAL_RTC_SetTime+0x1c8>)
 800a0e6:	f002 fd33 	bl	800cb50 <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 800a0ea:	6923      	ldr	r3, [r4, #16]
 800a0ec:	f433 2380 	bics.w	r3, r3, #262144	; 0x40000
 800a0f0:	d004      	beq.n	800a0fc <HAL_RTC_SetTime+0x40>
 800a0f2:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800a0f6:	4863      	ldr	r0, [pc, #396]	; (800a284 <HAL_RTC_SetTime+0x1c8>)
 800a0f8:	f002 fd2a 	bl	800cb50 <assert_failed>
  __HAL_LOCK(hrtc);
 800a0fc:	7f33      	ldrb	r3, [r6, #28]
 800a0fe:	2b01      	cmp	r3, #1
 800a100:	f04f 0702 	mov.w	r7, #2
 800a104:	d04f      	beq.n	800a1a6 <HAL_RTC_SetTime+0xea>
 800a106:	2301      	movs	r3, #1
 800a108:	7733      	strb	r3, [r6, #28]
 800a10a:	6833      	ldr	r3, [r6, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a10c:	7777      	strb	r7, [r6, #29]
 800a10e:	7820      	ldrb	r0, [r4, #0]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a110:	689b      	ldr	r3, [r3, #8]
  if(Format == RTC_FORMAT_BIN)
 800a112:	2d00      	cmp	r5, #0
 800a114:	d14f      	bne.n	800a1b6 <HAL_RTC_SetTime+0xfa>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a116:	065a      	lsls	r2, r3, #25
 800a118:	d547      	bpl.n	800a1aa <HAL_RTC_SetTime+0xee>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 800a11a:	3801      	subs	r0, #1
 800a11c:	280b      	cmp	r0, #11
 800a11e:	d904      	bls.n	800a12a <HAL_RTC_SetTime+0x6e>
 800a120:	f240 11cd 	movw	r1, #461	; 0x1cd
 800a124:	4857      	ldr	r0, [pc, #348]	; (800a284 <HAL_RTC_SetTime+0x1c8>)
 800a126:	f002 fd13 	bl	800cb50 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 800a12a:	78e3      	ldrb	r3, [r4, #3]
 800a12c:	f013 0fbf 	tst.w	r3, #191	; 0xbf
 800a130:	d004      	beq.n	800a13c <HAL_RTC_SetTime+0x80>
 800a132:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 800a136:	4853      	ldr	r0, [pc, #332]	; (800a284 <HAL_RTC_SetTime+0x1c8>)
 800a138:	f002 fd0a 	bl	800cb50 <assert_failed>
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 800a13c:	7863      	ldrb	r3, [r4, #1]
 800a13e:	2b3b      	cmp	r3, #59	; 0x3b
 800a140:	d904      	bls.n	800a14c <HAL_RTC_SetTime+0x90>
 800a142:	f240 11d5 	movw	r1, #469	; 0x1d5
 800a146:	484f      	ldr	r0, [pc, #316]	; (800a284 <HAL_RTC_SetTime+0x1c8>)
 800a148:	f002 fd02 	bl	800cb50 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 800a14c:	78a3      	ldrb	r3, [r4, #2]
 800a14e:	2b3b      	cmp	r3, #59	; 0x3b
 800a150:	d904      	bls.n	800a15c <HAL_RTC_SetTime+0xa0>
 800a152:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 800a156:	484b      	ldr	r0, [pc, #300]	; (800a284 <HAL_RTC_SetTime+0x1c8>)
 800a158:	f002 fcfa 	bl	800cb50 <assert_failed>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800a15c:	7820      	ldrb	r0, [r4, #0]
 800a15e:	f7ff ff99 	bl	800a094 <RTC_ByteToBcd2>
 800a162:	4602      	mov	r2, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800a164:	7860      	ldrb	r0, [r4, #1]
 800a166:	f7ff ff95 	bl	800a094 <RTC_ByteToBcd2>
 800a16a:	4605      	mov	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800a16c:	78a0      	ldrb	r0, [r4, #2]
 800a16e:	f7ff ff91 	bl	800a094 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 800a172:	78e3      	ldrb	r3, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800a174:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800a178:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800a17c:	ea40 2505 	orr.w	r5, r0, r5, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a180:	6833      	ldr	r3, [r6, #0]
 800a182:	22ca      	movs	r2, #202	; 0xca
 800a184:	625a      	str	r2, [r3, #36]	; 0x24
 800a186:	2253      	movs	r2, #83	; 0x53
 800a188:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a18a:	4630      	mov	r0, r6
 800a18c:	f7ff fee6 	bl	8009f5c <RTC_EnterInitMode>
 800a190:	6833      	ldr	r3, [r6, #0]
 800a192:	4607      	mov	r7, r0
 800a194:	2800      	cmp	r0, #0
 800a196:	d04b      	beq.n	800a230 <HAL_RTC_SetTime+0x174>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 800a198:	22ff      	movs	r2, #255	; 0xff
 800a19a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a19c:	2304      	movs	r3, #4
 800a19e:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	7733      	strb	r3, [r6, #28]
        return HAL_ERROR;
 800a1a4:	2701      	movs	r7, #1
}
 800a1a6:	4638      	mov	r0, r7
 800a1a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 800a1aa:	2817      	cmp	r0, #23
      sTime->TimeFormat = 0x00U;
 800a1ac:	70e5      	strb	r5, [r4, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 800a1ae:	d9c5      	bls.n	800a13c <HAL_RTC_SetTime+0x80>
 800a1b0:	f240 11d3 	movw	r1, #467	; 0x1d3
 800a1b4:	e7bf      	b.n	800a136 <HAL_RTC_SetTime+0x7a>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a1b6:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800a1ba:	d031      	beq.n	800a220 <HAL_RTC_SetTime+0x164>
      tmpreg = RTC_Bcd2ToByte(sTime->Hours);
 800a1bc:	f7ff ff75 	bl	800a0aa <RTC_Bcd2ToByte>
      assert_param(IS_RTC_HOUR12(tmpreg));
 800a1c0:	3801      	subs	r0, #1
 800a1c2:	280b      	cmp	r0, #11
 800a1c4:	d904      	bls.n	800a1d0 <HAL_RTC_SetTime+0x114>
 800a1c6:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800a1ca:	482e      	ldr	r0, [pc, #184]	; (800a284 <HAL_RTC_SetTime+0x1c8>)
 800a1cc:	f002 fcc0 	bl	800cb50 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat)); 
 800a1d0:	78e3      	ldrb	r3, [r4, #3]
 800a1d2:	f013 0fbf 	tst.w	r3, #191	; 0xbf
 800a1d6:	d004      	beq.n	800a1e2 <HAL_RTC_SetTime+0x126>
 800a1d8:	f240 11e3 	movw	r1, #483	; 0x1e3
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 800a1dc:	4829      	ldr	r0, [pc, #164]	; (800a284 <HAL_RTC_SetTime+0x1c8>)
 800a1de:	f002 fcb7 	bl	800cb50 <assert_failed>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 800a1e2:	7860      	ldrb	r0, [r4, #1]
 800a1e4:	f7ff ff61 	bl	800a0aa <RTC_Bcd2ToByte>
 800a1e8:	283b      	cmp	r0, #59	; 0x3b
 800a1ea:	d904      	bls.n	800a1f6 <HAL_RTC_SetTime+0x13a>
 800a1ec:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 800a1f0:	4824      	ldr	r0, [pc, #144]	; (800a284 <HAL_RTC_SetTime+0x1c8>)
 800a1f2:	f002 fcad 	bl	800cb50 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 800a1f6:	78a0      	ldrb	r0, [r4, #2]
 800a1f8:	f7ff ff57 	bl	800a0aa <RTC_Bcd2ToByte>
 800a1fc:	283b      	cmp	r0, #59	; 0x3b
 800a1fe:	d904      	bls.n	800a20a <HAL_RTC_SetTime+0x14e>
 800a200:	f240 11eb 	movw	r1, #491	; 0x1eb
 800a204:	481f      	ldr	r0, [pc, #124]	; (800a284 <HAL_RTC_SetTime+0x1c8>)
 800a206:	f002 fca3 	bl	800cb50 <assert_failed>
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800a20a:	7860      	ldrb	r0, [r4, #1]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800a20c:	7825      	ldrb	r5, [r4, #0]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800a20e:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800a210:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
              ((uint32_t)sTime->Seconds) | \
 800a214:	78a5      	ldrb	r5, [r4, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800a216:	4328      	orrs	r0, r5
              ((uint32_t)(sTime->TimeFormat) << 16U));   
 800a218:	78e5      	ldrb	r5, [r4, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800a21a:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800a21e:	e7af      	b.n	800a180 <HAL_RTC_SetTime+0xc4>
      sTime->TimeFormat = 0x00U;
 800a220:	70e3      	strb	r3, [r4, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 800a222:	f7ff ff42 	bl	800a0aa <RTC_Bcd2ToByte>
 800a226:	2817      	cmp	r0, #23
 800a228:	d9db      	bls.n	800a1e2 <HAL_RTC_SetTime+0x126>
 800a22a:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 800a22e:	e7d5      	b.n	800a1dc <HAL_RTC_SetTime+0x120>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a230:	f005 357f 	and.w	r5, r5, #2139062143	; 0x7f7f7f7f
 800a234:	f025 45fe 	bic.w	r5, r5, #2130706432	; 0x7f000000
 800a238:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800a23a:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a23c:	68e1      	ldr	r1, [r4, #12]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800a23e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a242:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a244:	689a      	ldr	r2, [r3, #8]
 800a246:	430a      	orrs	r2, r1
 800a248:	6921      	ldr	r1, [r4, #16]
 800a24a:	430a      	orrs	r2, r1
 800a24c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 800a24e:	68da      	ldr	r2, [r3, #12]
 800a250:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a254:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a256:	689b      	ldr	r3, [r3, #8]
 800a258:	069b      	lsls	r3, r3, #26
 800a25a:	d40a      	bmi.n	800a272 <HAL_RTC_SetTime+0x1b6>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a25c:	4630      	mov	r0, r6
 800a25e:	f7ff fe65 	bl	8009f2c <HAL_RTC_WaitForSynchro>
 800a262:	b130      	cbz	r0, 800a272 <HAL_RTC_SetTime+0x1b6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800a264:	6833      	ldr	r3, [r6, #0]
 800a266:	22ff      	movs	r2, #255	; 0xff
 800a268:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800a26a:	2304      	movs	r3, #4
 800a26c:	7773      	strb	r3, [r6, #29]
        __HAL_UNLOCK(hrtc);
 800a26e:	7737      	strb	r7, [r6, #28]
 800a270:	e798      	b.n	800a1a4 <HAL_RTC_SetTime+0xe8>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a272:	6833      	ldr	r3, [r6, #0]
 800a274:	22ff      	movs	r2, #255	; 0xff
 800a276:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 800a278:	2301      	movs	r3, #1
 800a27a:	7773      	strb	r3, [r6, #29]
   __HAL_UNLOCK(hrtc); 
 800a27c:	2300      	movs	r3, #0
 800a27e:	7733      	strb	r3, [r6, #28]
   return HAL_OK;
 800a280:	e791      	b.n	800a1a6 <HAL_RTC_SetTime+0xea>
 800a282:	bf00      	nop
 800a284:	0801d98e 	.word	0x0801d98e

0800a288 <HAL_RTC_GetTime>:
  assert_param(IS_RTC_FORMAT(Format));
 800a288:	2a01      	cmp	r2, #1
{
 800a28a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a28c:	4605      	mov	r5, r0
 800a28e:	460c      	mov	r4, r1
 800a290:	4617      	mov	r7, r2
  assert_param(IS_RTC_FORMAT(Format));
 800a292:	d904      	bls.n	800a29e <HAL_RTC_GetTime+0x16>
 800a294:	f44f 7111 	mov.w	r1, #580	; 0x244
 800a298:	4814      	ldr	r0, [pc, #80]	; (800a2ec <HAL_RTC_GetTime+0x64>)
 800a29a:	f002 fc59 	bl	800cb50 <assert_failed>
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800a29e:	682b      	ldr	r3, [r5, #0]
 800a2a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800a2a2:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 800a2a4:	681d      	ldr	r5, [r3, #0]
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800a2a6:	6062      	str	r2, [r4, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 800a2a8:	f005 337f 	and.w	r3, r5, #2139062143	; 0x7f7f7f7f
 800a2ac:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800a2b0:	f3c1 010e 	ubfx	r1, r1, #0, #15
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800a2b4:	0c1e      	lsrs	r6, r3, #16
 800a2b6:	f006 003f 	and.w	r0, r6, #63	; 0x3f
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800a2ba:	60a1      	str	r1, [r4, #8]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800a2bc:	f005 057f 	and.w	r5, r5, #127	; 0x7f
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800a2c0:	f3c3 2106 	ubfx	r1, r3, #8, #7
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 800a2c4:	f006 0640 	and.w	r6, r6, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800a2c8:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800a2ca:	7061      	strb	r1, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800a2cc:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 800a2ce:	70e6      	strb	r6, [r4, #3]
  if(Format == RTC_FORMAT_BIN)
 800a2d0:	b957      	cbnz	r7, 800a2e8 <HAL_RTC_GetTime+0x60>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800a2d2:	f7ff feea 	bl	800a0aa <RTC_Bcd2ToByte>
 800a2d6:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800a2d8:	4608      	mov	r0, r1
 800a2da:	f7ff fee6 	bl	800a0aa <RTC_Bcd2ToByte>
 800a2de:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 800a2e0:	4628      	mov	r0, r5
 800a2e2:	f7ff fee2 	bl	800a0aa <RTC_Bcd2ToByte>
 800a2e6:	70a0      	strb	r0, [r4, #2]
}
 800a2e8:	2000      	movs	r0, #0
 800a2ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2ec:	0801d98e 	.word	0x0801d98e

0800a2f0 <HAL_RTC_SetDate>:
  assert_param(IS_RTC_FORMAT(Format));
 800a2f0:	2a01      	cmp	r2, #1
{
 800a2f2:	b570      	push	{r4, r5, r6, lr}
 800a2f4:	4605      	mov	r5, r0
 800a2f6:	460e      	mov	r6, r1
 800a2f8:	4614      	mov	r4, r2
  assert_param(IS_RTC_FORMAT(Format));
 800a2fa:	d904      	bls.n	800a306 <HAL_RTC_SetDate+0x16>
 800a2fc:	f240 2171 	movw	r1, #625	; 0x271
 800a300:	484e      	ldr	r0, [pc, #312]	; (800a43c <HAL_RTC_SetDate+0x14c>)
 800a302:	f002 fc25 	bl	800cb50 <assert_failed>
 __HAL_LOCK(hrtc);
 800a306:	7f2b      	ldrb	r3, [r5, #28]
 800a308:	2b01      	cmp	r3, #1
 800a30a:	f04f 0302 	mov.w	r3, #2
 800a30e:	f000 8093 	beq.w	800a438 <HAL_RTC_SetDate+0x148>
 800a312:	2201      	movs	r2, #1
 800a314:	772a      	strb	r2, [r5, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 800a316:	776b      	strb	r3, [r5, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a318:	b934      	cbnz	r4, 800a328 <HAL_RTC_SetDate+0x38>
 800a31a:	7873      	ldrb	r3, [r6, #1]
 800a31c:	06da      	lsls	r2, r3, #27
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a31e:	bf42      	ittt	mi
 800a320:	f023 0310 	bicmi.w	r3, r3, #16
 800a324:	330a      	addmi	r3, #10
 800a326:	7073      	strbmi	r3, [r6, #1]
  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 800a328:	7833      	ldrb	r3, [r6, #0]
 800a32a:	3b01      	subs	r3, #1
 800a32c:	2b06      	cmp	r3, #6
 800a32e:	d904      	bls.n	800a33a <HAL_RTC_SetDate+0x4a>
 800a330:	f240 217d 	movw	r1, #637	; 0x27d
 800a334:	4841      	ldr	r0, [pc, #260]	; (800a43c <HAL_RTC_SetDate+0x14c>)
 800a336:	f002 fc0b 	bl	800cb50 <assert_failed>
 800a33a:	78f0      	ldrb	r0, [r6, #3]
  if(Format == RTC_FORMAT_BIN)
 800a33c:	2c00      	cmp	r4, #0
 800a33e:	d13e      	bne.n	800a3be <HAL_RTC_SetDate+0xce>
    assert_param(IS_RTC_YEAR(sDate->Year));
 800a340:	2863      	cmp	r0, #99	; 0x63
 800a342:	d904      	bls.n	800a34e <HAL_RTC_SetDate+0x5e>
 800a344:	f240 2181 	movw	r1, #641	; 0x281
 800a348:	483c      	ldr	r0, [pc, #240]	; (800a43c <HAL_RTC_SetDate+0x14c>)
 800a34a:	f002 fc01 	bl	800cb50 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 800a34e:	7873      	ldrb	r3, [r6, #1]
 800a350:	3b01      	subs	r3, #1
 800a352:	2b0b      	cmp	r3, #11
 800a354:	d904      	bls.n	800a360 <HAL_RTC_SetDate+0x70>
 800a356:	f240 2182 	movw	r1, #642	; 0x282
 800a35a:	4838      	ldr	r0, [pc, #224]	; (800a43c <HAL_RTC_SetDate+0x14c>)
 800a35c:	f002 fbf8 	bl	800cb50 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date)); 
 800a360:	78b3      	ldrb	r3, [r6, #2]
 800a362:	3b01      	subs	r3, #1
 800a364:	2b1e      	cmp	r3, #30
 800a366:	d904      	bls.n	800a372 <HAL_RTC_SetDate+0x82>
 800a368:	f240 2183 	movw	r1, #643	; 0x283
 800a36c:	4833      	ldr	r0, [pc, #204]	; (800a43c <HAL_RTC_SetDate+0x14c>)
 800a36e:	f002 fbef 	bl	800cb50 <assert_failed>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800a372:	78f0      	ldrb	r0, [r6, #3]
 800a374:	f7ff fe8e 	bl	800a094 <RTC_ByteToBcd2>
 800a378:	4602      	mov	r2, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800a37a:	7870      	ldrb	r0, [r6, #1]
 800a37c:	f7ff fe8a 	bl	800a094 <RTC_ByteToBcd2>
 800a380:	4604      	mov	r4, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800a382:	78b0      	ldrb	r0, [r6, #2]
 800a384:	f7ff fe86 	bl	800a094 <RTC_ByteToBcd2>
                 ((uint32_t)sDate->WeekDay << 13U));   
 800a388:	7833      	ldrb	r3, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800a38a:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 800a38e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800a392:	ea40 2404 	orr.w	r4, r0, r4, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a396:	682b      	ldr	r3, [r5, #0]
 800a398:	22ca      	movs	r2, #202	; 0xca
 800a39a:	625a      	str	r2, [r3, #36]	; 0x24
 800a39c:	2253      	movs	r2, #83	; 0x53
 800a39e:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a3a0:	4628      	mov	r0, r5
 800a3a2:	f7ff fddb 	bl	8009f5c <RTC_EnterInitMode>
 800a3a6:	682b      	ldr	r3, [r5, #0]
 800a3a8:	4606      	mov	r6, r0
 800a3aa:	b330      	cbz	r0, 800a3fa <HAL_RTC_SetDate+0x10a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 800a3ac:	22ff      	movs	r2, #255	; 0xff
 800a3ae:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a3b0:	2304      	movs	r3, #4
 800a3b2:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	772b      	strb	r3, [r5, #28]
        return HAL_ERROR;
 800a3b8:	2601      	movs	r6, #1
}
 800a3ba:	4630      	mov	r0, r6
 800a3bc:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 800a3be:	f7ff fe74 	bl	800a0aa <RTC_Bcd2ToByte>
 800a3c2:	2863      	cmp	r0, #99	; 0x63
 800a3c4:	d904      	bls.n	800a3d0 <HAL_RTC_SetDate+0xe0>
 800a3c6:	f44f 7123 	mov.w	r1, #652	; 0x28c
 800a3ca:	481c      	ldr	r0, [pc, #112]	; (800a43c <HAL_RTC_SetDate+0x14c>)
 800a3cc:	f002 fbc0 	bl	800cb50 <assert_failed>
    assert_param(IS_RTC_MONTH(datetmpreg));
 800a3d0:	f240 218d 	movw	r1, #653	; 0x28d
 800a3d4:	4819      	ldr	r0, [pc, #100]	; (800a43c <HAL_RTC_SetDate+0x14c>)
 800a3d6:	f002 fbbb 	bl	800cb50 <assert_failed>
    assert_param(IS_RTC_DATE(datetmpreg));
 800a3da:	4818      	ldr	r0, [pc, #96]	; (800a43c <HAL_RTC_SetDate+0x14c>)
 800a3dc:	f240 218e 	movw	r1, #654	; 0x28e
 800a3e0:	f002 fbb6 	bl	800cb50 <assert_failed>
                  (((uint32_t)sDate->Month) << 8U) | \
 800a3e4:	7870      	ldrb	r0, [r6, #1]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800a3e6:	78f4      	ldrb	r4, [r6, #3]
                  (((uint32_t)sDate->Month) << 8U) | \
 800a3e8:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800a3ea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
                  ((uint32_t)sDate->Date) | \
 800a3ee:	78b4      	ldrb	r4, [r6, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800a3f0:	4320      	orrs	r0, r4
                  (((uint32_t)sDate->WeekDay) << 13U));  
 800a3f2:	7834      	ldrb	r4, [r6, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800a3f4:	ea40 3444 	orr.w	r4, r0, r4, lsl #13
 800a3f8:	e7cd      	b.n	800a396 <HAL_RTC_SetDate+0xa6>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a3fa:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 800a3fe:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 800a402:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 800a404:	68da      	ldr	r2, [r3, #12]
 800a406:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a40a:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a40c:	689b      	ldr	r3, [r3, #8]
 800a40e:	069b      	lsls	r3, r3, #26
 800a410:	d40a      	bmi.n	800a428 <HAL_RTC_SetDate+0x138>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a412:	4628      	mov	r0, r5
 800a414:	f7ff fd8a 	bl	8009f2c <HAL_RTC_WaitForSynchro>
 800a418:	b130      	cbz	r0, 800a428 <HAL_RTC_SetDate+0x138>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800a41a:	682b      	ldr	r3, [r5, #0]
 800a41c:	22ff      	movs	r2, #255	; 0xff
 800a41e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800a420:	2304      	movs	r3, #4
 800a422:	776b      	strb	r3, [r5, #29]
        __HAL_UNLOCK(hrtc);
 800a424:	772e      	strb	r6, [r5, #28]
 800a426:	e7c7      	b.n	800a3b8 <HAL_RTC_SetDate+0xc8>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800a428:	682b      	ldr	r3, [r5, #0]
 800a42a:	22ff      	movs	r2, #255	; 0xff
 800a42c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 800a42e:	2301      	movs	r3, #1
 800a430:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 800a432:	2300      	movs	r3, #0
 800a434:	772b      	strb	r3, [r5, #28]
    return HAL_OK;    
 800a436:	e7c0      	b.n	800a3ba <HAL_RTC_SetDate+0xca>
 __HAL_LOCK(hrtc);
 800a438:	461e      	mov	r6, r3
 800a43a:	e7be      	b.n	800a3ba <HAL_RTC_SetDate+0xca>
 800a43c:	0801d98e 	.word	0x0801d98e

0800a440 <HAL_RTC_GetDate>:
  assert_param(IS_RTC_FORMAT(Format));
 800a440:	2a01      	cmp	r2, #1
{
 800a442:	b570      	push	{r4, r5, r6, lr}
 800a444:	4605      	mov	r5, r0
 800a446:	460c      	mov	r4, r1
 800a448:	4616      	mov	r6, r2
  assert_param(IS_RTC_FORMAT(Format));
 800a44a:	d904      	bls.n	800a456 <HAL_RTC_GetDate+0x16>
 800a44c:	f240 21df 	movw	r1, #735	; 0x2df
 800a450:	4810      	ldr	r0, [pc, #64]	; (800a494 <HAL_RTC_GetDate+0x54>)
 800a452:	f002 fb7d 	bl	800cb50 <assert_failed>
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 800a456:	682b      	ldr	r3, [r5, #0]
 800a458:	6859      	ldr	r1, [r3, #4]
 800a45a:	f021 437f 	bic.w	r3, r1, #4278190080	; 0xff000000
 800a45e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800a462:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800a464:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800a468:	f001 013f 	and.w	r1, r1, #63	; 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 800a46c:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800a470:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800a472:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800a474:	70a1      	strb	r1, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 800a476:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 800a478:	b956      	cbnz	r6, 800a490 <HAL_RTC_GetDate+0x50>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800a47a:	f7ff fe16 	bl	800a0aa <RTC_Bcd2ToByte>
 800a47e:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800a480:	4628      	mov	r0, r5
 800a482:	f7ff fe12 	bl	800a0aa <RTC_Bcd2ToByte>
 800a486:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 800a488:	4608      	mov	r0, r1
 800a48a:	f7ff fe0e 	bl	800a0aa <RTC_Bcd2ToByte>
 800a48e:	70a0      	strb	r0, [r4, #2]
}
 800a490:	2000      	movs	r0, #0
 800a492:	bd70      	pop	{r4, r5, r6, pc}
 800a494:	0801d98e 	.word	0x0801d98e

0800a498 <TIM_OC1_SetConfig>:
	uint32_t tmpccmrx = 0U;
	uint32_t tmpccer = 0U;
	uint32_t tmpcr2 = 0U;

	/* Disable the Channel 1: Reset the CC1E Bit */
	TIMx->CCER &= ~TIM_CCER_CC1E;
 800a498:	6a03      	ldr	r3, [r0, #32]
 800a49a:	f023 0301 	bic.w	r3, r3, #1
 800a49e:	6203      	str	r3, [r0, #32]

	/* Get the TIMx CCER register value */
	tmpccer = TIMx->CCER;
 800a4a0:	6a03      	ldr	r3, [r0, #32]
{
 800a4a2:	b570      	push	{r4, r5, r6, lr}
	/* Get the TIMx CR2 register value */
	tmpcr2 = TIMx->CR2;
 800a4a4:	6844      	ldr	r4, [r0, #4]

	/* Get the TIMx CCMR1 register value */
	tmpccmrx = TIMx->CCMR1;
 800a4a6:	6982      	ldr	r2, [r0, #24]

	/* Reset the Output Compare Mode Bits */
	tmpccmrx &= ~TIM_CCMR1_OC1M;
	tmpccmrx &= ~TIM_CCMR1_CC1S;
	/* Select the Output Compare Mode */
	tmpccmrx |= OC_Config->OCMode;
 800a4a8:	680d      	ldr	r5, [r1, #0]
	tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a4aa:	f022 0273 	bic.w	r2, r2, #115	; 0x73
	tmpccmrx |= OC_Config->OCMode;
 800a4ae:	432a      	orrs	r2, r5

	/* Reset the Output Polarity level */
	tmpccer &= ~TIM_CCER_CC1P;
	/* Set the Output Compare Polarity */
	tmpccer |= OC_Config->OCPolarity;
 800a4b0:	688d      	ldr	r5, [r1, #8]
	tmpccer &= ~TIM_CCER_CC1P;
 800a4b2:	f023 0302 	bic.w	r3, r3, #2
	tmpccer |= OC_Config->OCPolarity;
 800a4b6:	432b      	orrs	r3, r5


	if (IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET) {
 800a4b8:	4d0a      	ldr	r5, [pc, #40]	; (800a4e4 <TIM_OC1_SetConfig+0x4c>)
 800a4ba:	42a8      	cmp	r0, r5
 800a4bc:	d10b      	bne.n	800a4d6 <TIM_OC1_SetConfig+0x3e>
		/* Reset the Output N Polarity level */
		tmpccer &= ~TIM_CCER_CC1NP;
		/* Set the Output N Polarity */
		tmpccer |= OC_Config->OCNPolarity;
 800a4be:	68cd      	ldr	r5, [r1, #12]
		tmpcr2 &= ~TIM_CR2_OIS1;
		tmpcr2 &= ~TIM_CR2_OIS1N;
		/* Set the Output Idle state */
		tmpcr2 |= OC_Config->OCIdleState;
		/* Set the Output N Idle state */
		tmpcr2 |= OC_Config->OCNIdleState;
 800a4c0:	698e      	ldr	r6, [r1, #24]
		tmpccer &= ~TIM_CCER_CC1NP;
 800a4c2:	f023 0308 	bic.w	r3, r3, #8
		tmpccer |= OC_Config->OCNPolarity;
 800a4c6:	432b      	orrs	r3, r5
		tmpcr2 |= OC_Config->OCNIdleState;
 800a4c8:	694d      	ldr	r5, [r1, #20]
		tmpcr2 &= ~TIM_CR2_OIS1N;
 800a4ca:	f424 7440 	bic.w	r4, r4, #768	; 0x300
		tmpcr2 |= OC_Config->OCNIdleState;
 800a4ce:	4335      	orrs	r5, r6
		tmpccer &= ~TIM_CCER_CC1NE;
 800a4d0:	f023 0304 	bic.w	r3, r3, #4
		tmpcr2 |= OC_Config->OCNIdleState;
 800a4d4:	432c      	orrs	r4, r5
	}
	/* Write to TIMx CR2 */
	TIMx->CR2 = tmpcr2;
 800a4d6:	6044      	str	r4, [r0, #4]

	/* Write to TIMx CCMR1 */
	TIMx->CCMR1 = tmpccmrx;
 800a4d8:	6182      	str	r2, [r0, #24]

	/* Set the Capture Compare Register value */
	TIMx->CCR1 = OC_Config->Pulse;
 800a4da:	684a      	ldr	r2, [r1, #4]
 800a4dc:	6342      	str	r2, [r0, #52]	; 0x34

	/* Write to TIMx CCER */
	TIMx->CCER = tmpccer;
 800a4de:	6203      	str	r3, [r0, #32]
 800a4e0:	bd70      	pop	{r4, r5, r6, pc}
 800a4e2:	bf00      	nop
 800a4e4:	40010000 	.word	0x40010000

0800a4e8 <TIM_OC3_SetConfig>:
	uint32_t tmpccmrx = 0U;
	uint32_t tmpccer = 0U;
	uint32_t tmpcr2 = 0U;

	/* Disable the Channel 3: Reset the CC2E Bit */
	TIMx->CCER &= ~TIM_CCER_CC3E;
 800a4e8:	6a03      	ldr	r3, [r0, #32]
 800a4ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 800a4ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	TIMx->CCER &= ~TIM_CCER_CC3E;
 800a4f2:	6203      	str	r3, [r0, #32]

	/* Get the TIMx CCER register value */
	tmpccer = TIMx->CCER;
 800a4f4:	6a04      	ldr	r4, [r0, #32]
	/* Get the TIMx CR2 register value */
	tmpcr2 = TIMx->CR2;
 800a4f6:	f8d0 8004 	ldr.w	r8, [r0, #4]

	/* Get the TIMx CCMR2 register value */
	tmpccmrx = TIMx->CCMR2;
 800a4fa:	69c6      	ldr	r6, [r0, #28]

	/* Reset the Output Compare mode and Capture/Compare selection Bits */
	tmpccmrx &= ~TIM_CCMR2_OC3M;
	tmpccmrx &= ~TIM_CCMR2_CC3S;
	/* Select the Output Compare Mode */
	tmpccmrx |= OC_Config->OCMode;
 800a4fc:	680b      	ldr	r3, [r1, #0]
	tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a4fe:	f026 0673 	bic.w	r6, r6, #115	; 0x73
	tmpccmrx |= OC_Config->OCMode;
 800a502:	431e      	orrs	r6, r3

	/* Reset the Output Polarity level */
	tmpccer &= ~TIM_CCER_CC3P;
	/* Set the Output Compare Polarity */
	tmpccer |= (OC_Config->OCPolarity << 8U);
 800a504:	688b      	ldr	r3, [r1, #8]
	tmpccer &= ~TIM_CCER_CC3P;
 800a506:	f424 7400 	bic.w	r4, r4, #512	; 0x200
	tmpccer |= (OC_Config->OCPolarity << 8U);
 800a50a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8

	if (IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET) {
 800a50e:	4b1b      	ldr	r3, [pc, #108]	; (800a57c <TIM_OC3_SetConfig+0x94>)
 800a510:	4298      	cmp	r0, r3
{
 800a512:	4605      	mov	r5, r0
 800a514:	460f      	mov	r7, r1
	if (IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET) {
 800a516:	d128      	bne.n	800a56a <TIM_OC3_SetConfig+0x82>
		assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800a518:	68cb      	ldr	r3, [r1, #12]
 800a51a:	f033 0308 	bics.w	r3, r3, #8
 800a51e:	d004      	beq.n	800a52a <TIM_OC3_SetConfig+0x42>
 800a520:	f241 2166 	movw	r1, #4710	; 0x1266
 800a524:	4816      	ldr	r0, [pc, #88]	; (800a580 <TIM_OC3_SetConfig+0x98>)
 800a526:	f002 fb13 	bl	800cb50 <assert_failed>
		assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800a52a:	69bb      	ldr	r3, [r7, #24]
 800a52c:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800a530:	d004      	beq.n	800a53c <TIM_OC3_SetConfig+0x54>
 800a532:	f241 2167 	movw	r1, #4711	; 0x1267
 800a536:	4812      	ldr	r0, [pc, #72]	; (800a580 <TIM_OC3_SetConfig+0x98>)
 800a538:	f002 fb0a 	bl	800cb50 <assert_failed>
		assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 800a542:	d004      	beq.n	800a54e <TIM_OC3_SetConfig+0x66>
 800a544:	f241 2168 	movw	r1, #4712	; 0x1268
 800a548:	480d      	ldr	r0, [pc, #52]	; (800a580 <TIM_OC3_SetConfig+0x98>)
 800a54a:	f002 fb01 	bl	800cb50 <assert_failed>

		/* Reset the Output N Polarity level */
		tmpccer &= ~TIM_CCER_CC3NP;
		/* Set the Output N Polarity */
		tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a54e:	68fb      	ldr	r3, [r7, #12]
		tmpcr2 &= ~TIM_CR2_OIS3;
		tmpcr2 &= ~TIM_CR2_OIS3N;
		/* Set the Output Idle state */
		tmpcr2 |= (OC_Config->OCIdleState << 4U);
		/* Set the Output N Idle state */
		tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a550:	69ba      	ldr	r2, [r7, #24]
		tmpccer &= ~TIM_CCER_CC3NP;
 800a552:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
		tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a556:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
		tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a55a:	697b      	ldr	r3, [r7, #20]
		tmpcr2 &= ~TIM_CR2_OIS3N;
 800a55c:	f428 5840 	bic.w	r8, r8, #12288	; 0x3000
		tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a560:	4313      	orrs	r3, r2
		tmpccer &= ~TIM_CCER_CC3NE;
 800a562:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
		tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a566:	ea48 1803 	orr.w	r8, r8, r3, lsl #4

	/* Write to TIMx CCMR2 */
	TIMx->CCMR2 = tmpccmrx;

	/* Set the Capture Compare Register value */
	TIMx->CCR3 = OC_Config->Pulse;
 800a56a:	687b      	ldr	r3, [r7, #4]
	TIMx->CR2 = tmpcr2;
 800a56c:	f8c5 8004 	str.w	r8, [r5, #4]
	TIMx->CCMR2 = tmpccmrx;
 800a570:	61ee      	str	r6, [r5, #28]
	TIMx->CCR3 = OC_Config->Pulse;
 800a572:	63eb      	str	r3, [r5, #60]	; 0x3c

	/* Write to TIMx CCER */
	TIMx->CCER = tmpccer;
 800a574:	622c      	str	r4, [r5, #32]
 800a576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a57a:	bf00      	nop
 800a57c:	40010000 	.word	0x40010000
 800a580:	0801d9c6 	.word	0x0801d9c6

0800a584 <TIM_OC4_SetConfig>:
	uint32_t tmpccmrx = 0U;
	uint32_t tmpccer = 0U;
	uint32_t tmpcr2 = 0U;

	/* Disable the Channel 4: Reset the CC4E Bit */
	TIMx->CCER &= ~TIM_CCER_CC4E;
 800a584:	6a03      	ldr	r3, [r0, #32]
 800a586:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 800a58a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	TIMx->CCER &= ~TIM_CCER_CC4E;
 800a58e:	6203      	str	r3, [r0, #32]

	/* Get the TIMx CCER register value */
	tmpccer = TIMx->CCER;
 800a590:	6a05      	ldr	r5, [r0, #32]
	/* Get the TIMx CR2 register value */
	tmpcr2 = TIMx->CR2;
 800a592:	f8d0 8004 	ldr.w	r8, [r0, #4]

	/* Get the TIMx CCMR2 register value */
	tmpccmrx = TIMx->CCMR2;
 800a596:	69c7      	ldr	r7, [r0, #28]
	/* Reset the Output Compare mode and Capture/Compare selection Bits */
	tmpccmrx &= ~TIM_CCMR2_OC4M;
	tmpccmrx &= ~TIM_CCMR2_CC4S;

	/* Select the Output Compare Mode */
	tmpccmrx |= (OC_Config->OCMode << 8U);
 800a598:	680b      	ldr	r3, [r1, #0]
	tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a59a:	f427 47e6 	bic.w	r7, r7, #29440	; 0x7300
	tmpccmrx |= (OC_Config->OCMode << 8U);
 800a59e:	ea47 2703 	orr.w	r7, r7, r3, lsl #8

	/* Reset the Output Polarity level */
	tmpccer &= ~TIM_CCER_CC4P;
	/* Set the Output Compare Polarity */
	tmpccer |= (OC_Config->OCPolarity << 12U);
 800a5a2:	688b      	ldr	r3, [r1, #8]
	tmpccer &= ~TIM_CCER_CC4P;
 800a5a4:	f425 5500 	bic.w	r5, r5, #8192	; 0x2000
	tmpccer |= (OC_Config->OCPolarity << 12U);
 800a5a8:	ea45 3503 	orr.w	r5, r5, r3, lsl #12

	/*if((TIMx == TIM1) || (TIMx == TIM8))*/
	if (IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET) {
 800a5ac:	4b0d      	ldr	r3, [pc, #52]	; (800a5e4 <TIM_OC4_SetConfig+0x60>)
 800a5ae:	4298      	cmp	r0, r3
{
 800a5b0:	4604      	mov	r4, r0
 800a5b2:	460e      	mov	r6, r1
	if (IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET) {
 800a5b4:	d10d      	bne.n	800a5d2 <TIM_OC4_SetConfig+0x4e>
		assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a5b6:	694b      	ldr	r3, [r1, #20]
 800a5b8:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 800a5bc:	d004      	beq.n	800a5c8 <TIM_OC4_SetConfig+0x44>
 800a5be:	f241 21ab 	movw	r1, #4779	; 0x12ab
 800a5c2:	4809      	ldr	r0, [pc, #36]	; (800a5e8 <TIM_OC4_SetConfig+0x64>)
 800a5c4:	f002 fac4 	bl	800cb50 <assert_failed>
		/* Reset the Output Compare IDLE State */
		tmpcr2 &= ~TIM_CR2_OIS4;
		/* Set the Output Idle state */
		tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a5c8:	6973      	ldr	r3, [r6, #20]
		tmpcr2 &= ~TIM_CR2_OIS4;
 800a5ca:	f428 4880 	bic.w	r8, r8, #16384	; 0x4000
		tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a5ce:	ea48 1883 	orr.w	r8, r8, r3, lsl #6

	/* Write to TIMx CCMR2 */
	TIMx->CCMR2 = tmpccmrx;

	/* Set the Capture Compare Register value */
	TIMx->CCR4 = OC_Config->Pulse;
 800a5d2:	6873      	ldr	r3, [r6, #4]
	TIMx->CR2 = tmpcr2;
 800a5d4:	f8c4 8004 	str.w	r8, [r4, #4]
	TIMx->CCMR2 = tmpccmrx;
 800a5d8:	61e7      	str	r7, [r4, #28]
	TIMx->CCR4 = OC_Config->Pulse;
 800a5da:	6423      	str	r3, [r4, #64]	; 0x40

	/* Write to TIMx CCER */
	TIMx->CCER = tmpccer;
 800a5dc:	6225      	str	r5, [r4, #32]
 800a5de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5e2:	bf00      	nop
 800a5e4:	40010000 	.word	0x40010000
 800a5e8:	0801d9c6 	.word	0x0801d9c6

0800a5ec <HAL_TIM_Base_Start_IT>:
	assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a5ec:	6803      	ldr	r3, [r0, #0]
 800a5ee:	4a18      	ldr	r2, [pc, #96]	; (800a650 <HAL_TIM_Base_Start_IT+0x64>)
 800a5f0:	4293      	cmp	r3, r2
{
 800a5f2:	b510      	push	{r4, lr}
 800a5f4:	4604      	mov	r4, r0
	assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a5f6:	d01f      	beq.n	800a638 <HAL_TIM_Base_Start_IT+0x4c>
 800a5f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5fc:	d01c      	beq.n	800a638 <HAL_TIM_Base_Start_IT+0x4c>
 800a5fe:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800a602:	4293      	cmp	r3, r2
 800a604:	d018      	beq.n	800a638 <HAL_TIM_Base_Start_IT+0x4c>
 800a606:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d014      	beq.n	800a638 <HAL_TIM_Base_Start_IT+0x4c>
 800a60e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a612:	4293      	cmp	r3, r2
 800a614:	d010      	beq.n	800a638 <HAL_TIM_Base_Start_IT+0x4c>
 800a616:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d00c      	beq.n	800a638 <HAL_TIM_Base_Start_IT+0x4c>
 800a61e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a622:	4293      	cmp	r3, r2
 800a624:	d008      	beq.n	800a638 <HAL_TIM_Base_Start_IT+0x4c>
 800a626:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d004      	beq.n	800a638 <HAL_TIM_Base_Start_IT+0x4c>
 800a62e:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800a632:	4808      	ldr	r0, [pc, #32]	; (800a654 <HAL_TIM_Base_Start_IT+0x68>)
 800a634:	f002 fa8c 	bl	800cb50 <assert_failed>
	__HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a638:	6823      	ldr	r3, [r4, #0]
 800a63a:	68da      	ldr	r2, [r3, #12]
 800a63c:	f042 0201 	orr.w	r2, r2, #1
 800a640:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE(htim);
 800a642:	681a      	ldr	r2, [r3, #0]
 800a644:	f042 0201 	orr.w	r2, r2, #1
 800a648:	601a      	str	r2, [r3, #0]
}
 800a64a:	2000      	movs	r0, #0
 800a64c:	bd10      	pop	{r4, pc}
 800a64e:	bf00      	nop
 800a650:	40010000 	.word	0x40010000
 800a654:	0801d9c6 	.word	0x0801d9c6

0800a658 <HAL_TIM_PWM_MspInit>:
 800a658:	4770      	bx	lr

0800a65a <HAL_TIM_PWM_MspDeInit>:
 800a65a:	4770      	bx	lr

0800a65c <HAL_TIM_PWM_DeInit>:
	assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a65c:	6803      	ldr	r3, [r0, #0]
 800a65e:	4a20      	ldr	r2, [pc, #128]	; (800a6e0 <HAL_TIM_PWM_DeInit+0x84>)
 800a660:	4293      	cmp	r3, r2
{
 800a662:	b510      	push	{r4, lr}
 800a664:	4604      	mov	r4, r0
	assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a666:	d01f      	beq.n	800a6a8 <HAL_TIM_PWM_DeInit+0x4c>
 800a668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a66c:	d01c      	beq.n	800a6a8 <HAL_TIM_PWM_DeInit+0x4c>
 800a66e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800a672:	4293      	cmp	r3, r2
 800a674:	d018      	beq.n	800a6a8 <HAL_TIM_PWM_DeInit+0x4c>
 800a676:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d014      	beq.n	800a6a8 <HAL_TIM_PWM_DeInit+0x4c>
 800a67e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a682:	4293      	cmp	r3, r2
 800a684:	d010      	beq.n	800a6a8 <HAL_TIM_PWM_DeInit+0x4c>
 800a686:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d00c      	beq.n	800a6a8 <HAL_TIM_PWM_DeInit+0x4c>
 800a68e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a692:	4293      	cmp	r3, r2
 800a694:	d008      	beq.n	800a6a8 <HAL_TIM_PWM_DeInit+0x4c>
 800a696:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d004      	beq.n	800a6a8 <HAL_TIM_PWM_DeInit+0x4c>
 800a69e:	f240 31f6 	movw	r1, #1014	; 0x3f6
 800a6a2:	4810      	ldr	r0, [pc, #64]	; (800a6e4 <HAL_TIM_PWM_DeInit+0x88>)
 800a6a4:	f002 fa54 	bl	800cb50 <assert_failed>
	htim->State = HAL_TIM_STATE_BUSY;
 800a6a8:	2302      	movs	r3, #2
 800a6aa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	__HAL_TIM_DISABLE(htim);
 800a6ae:	6823      	ldr	r3, [r4, #0]
 800a6b0:	6a19      	ldr	r1, [r3, #32]
 800a6b2:	f241 1211 	movw	r2, #4369	; 0x1111
 800a6b6:	4211      	tst	r1, r2
 800a6b8:	d108      	bne.n	800a6cc <HAL_TIM_PWM_DeInit+0x70>
 800a6ba:	6a19      	ldr	r1, [r3, #32]
 800a6bc:	f240 4244 	movw	r2, #1092	; 0x444
 800a6c0:	4211      	tst	r1, r2
 800a6c2:	bf02      	ittt	eq
 800a6c4:	681a      	ldreq	r2, [r3, #0]
 800a6c6:	f022 0201 	biceq.w	r2, r2, #1
 800a6ca:	601a      	streq	r2, [r3, #0]
	HAL_TIM_PWM_MspDeInit(htim);
 800a6cc:	4620      	mov	r0, r4
 800a6ce:	f7ff ffc4 	bl	800a65a <HAL_TIM_PWM_MspDeInit>
	htim->State = HAL_TIM_STATE_RESET;
 800a6d2:	2000      	movs	r0, #0
 800a6d4:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
	__HAL_UNLOCK(htim);
 800a6d8:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 800a6dc:	bd10      	pop	{r4, pc}
 800a6de:	bf00      	nop
 800a6e0:	40010000 	.word	0x40010000
 800a6e4:	0801d9c6 	.word	0x0801d9c6

0800a6e8 <HAL_TIM_ConfigClockSource>:
	__HAL_LOCK(htim);
 800a6e8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800a6ec:	2b01      	cmp	r3, #1
{
 800a6ee:	b570      	push	{r4, r5, r6, lr}
 800a6f0:	4605      	mov	r5, r0
 800a6f2:	460c      	mov	r4, r1
 800a6f4:	f04f 0002 	mov.w	r0, #2
	__HAL_LOCK(htim);
 800a6f8:	d02e      	beq.n	800a758 <HAL_TIM_ConfigClockSource+0x70>
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
	assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800a700:	680b      	ldr	r3, [r1, #0]
	htim->State = HAL_TIM_STATE_BUSY;
 800a702:	f885 0039 	strb.w	r0, [r5, #57]	; 0x39
	assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800a706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a70a:	d00c      	beq.n	800a726 <HAL_TIM_ConfigClockSource+0x3e>
 800a70c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a710:	d009      	beq.n	800a726 <HAL_TIM_ConfigClockSource+0x3e>
 800a712:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800a716:	d006      	beq.n	800a726 <HAL_TIM_ConfigClockSource+0x3e>
 800a718:	2b40      	cmp	r3, #64	; 0x40
 800a71a:	d004      	beq.n	800a726 <HAL_TIM_ConfigClockSource+0x3e>
 800a71c:	f640 61df 	movw	r1, #3807	; 0xedf
 800a720:	48a9      	ldr	r0, [pc, #676]	; (800a9c8 <HAL_TIM_ConfigClockSource+0x2e0>)
 800a722:	f002 fa15 	bl	800cb50 <assert_failed>
	tmpsmcr = htim->Instance->SMCR;
 800a726:	682b      	ldr	r3, [r5, #0]
 800a728:	689a      	ldr	r2, [r3, #8]
	tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a72a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800a72e:	f022 0277 	bic.w	r2, r2, #119	; 0x77
	htim->Instance->SMCR = tmpsmcr;
 800a732:	609a      	str	r2, [r3, #8]
	switch (sClockSourceConfig->ClockSource) {
 800a734:	6822      	ldr	r2, [r4, #0]
 800a736:	2a40      	cmp	r2, #64	; 0x40
 800a738:	f000 819c 	beq.w	800aa74 <HAL_TIM_ConfigClockSource+0x38c>
 800a73c:	d834      	bhi.n	800a7a8 <HAL_TIM_ConfigClockSource+0xc0>
 800a73e:	2a10      	cmp	r2, #16
 800a740:	f000 820b 	beq.w	800ab5a <HAL_TIM_ConfigClockSource+0x472>
 800a744:	d809      	bhi.n	800a75a <HAL_TIM_ConfigClockSource+0x72>
 800a746:	2a00      	cmp	r2, #0
 800a748:	f000 81e5 	beq.w	800ab16 <HAL_TIM_ConfigClockSource+0x42e>
	htim->State = HAL_TIM_STATE_READY;
 800a74c:	2301      	movs	r3, #1
	__HAL_UNLOCK(htim);
 800a74e:	2000      	movs	r0, #0
	htim->State = HAL_TIM_STATE_READY;
 800a750:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
	__HAL_UNLOCK(htim);
 800a754:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
}
 800a758:	bd70      	pop	{r4, r5, r6, pc}
	switch (sClockSourceConfig->ClockSource) {
 800a75a:	2a20      	cmp	r2, #32
 800a75c:	f000 821f 	beq.w	800ab9e <HAL_TIM_ConfigClockSource+0x4b6>
 800a760:	2a30      	cmp	r2, #48	; 0x30
 800a762:	d1f3      	bne.n	800a74c <HAL_TIM_ConfigClockSource+0x64>
		assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800a764:	4a99      	ldr	r2, [pc, #612]	; (800a9cc <HAL_TIM_ConfigClockSource+0x2e4>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d017      	beq.n	800a79a <HAL_TIM_ConfigClockSource+0xb2>
 800a76a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a76e:	d014      	beq.n	800a79a <HAL_TIM_ConfigClockSource+0xb2>
 800a770:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800a774:	4293      	cmp	r3, r2
 800a776:	d010      	beq.n	800a79a <HAL_TIM_ConfigClockSource+0xb2>
 800a778:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d00c      	beq.n	800a79a <HAL_TIM_ConfigClockSource+0xb2>
 800a780:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a784:	4293      	cmp	r3, r2
 800a786:	d008      	beq.n	800a79a <HAL_TIM_ConfigClockSource+0xb2>
 800a788:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d004      	beq.n	800a79a <HAL_TIM_ConfigClockSource+0xb2>
 800a790:	f640 7159 	movw	r1, #3929	; 0xf59
 800a794:	488c      	ldr	r0, [pc, #560]	; (800a9c8 <HAL_TIM_ConfigClockSource+0x2e0>)
 800a796:	f002 f9db 	bl	800cb50 <assert_failed>
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 800a79a:	682a      	ldr	r2, [r5, #0]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
	uint32_t tmpsmcr = 0U;

	/* Get the TIMx SMCR register value */
	tmpsmcr = TIMx->SMCR;
 800a79c:	6893      	ldr	r3, [r2, #8]
	/* Reset the TS Bits */
	tmpsmcr &= ~TIM_SMCR_TS;
 800a79e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	/* Set the Input Trigger source and the slave mode*/
	tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800a7a2:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 800a7a6:	e0c6      	b.n	800a936 <HAL_TIM_ConfigClockSource+0x24e>
	switch (sClockSourceConfig->ClockSource) {
 800a7a8:	2a70      	cmp	r2, #112	; 0x70
 800a7aa:	f000 80c6 	beq.w	800a93a <HAL_TIM_ConfigClockSource+0x252>
 800a7ae:	d84e      	bhi.n	800a84e <HAL_TIM_ConfigClockSource+0x166>
 800a7b0:	2a50      	cmp	r2, #80	; 0x50
 800a7b2:	f000 810d 	beq.w	800a9d0 <HAL_TIM_ConfigClockSource+0x2e8>
 800a7b6:	2a60      	cmp	r2, #96	; 0x60
 800a7b8:	d1c8      	bne.n	800a74c <HAL_TIM_ConfigClockSource+0x64>
		assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800a7ba:	4a84      	ldr	r2, [pc, #528]	; (800a9cc <HAL_TIM_ConfigClockSource+0x2e4>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d017      	beq.n	800a7f0 <HAL_TIM_ConfigClockSource+0x108>
 800a7c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7c4:	d014      	beq.n	800a7f0 <HAL_TIM_ConfigClockSource+0x108>
 800a7c6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d010      	beq.n	800a7f0 <HAL_TIM_ConfigClockSource+0x108>
 800a7ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d00c      	beq.n	800a7f0 <HAL_TIM_ConfigClockSource+0x108>
 800a7d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d008      	beq.n	800a7f0 <HAL_TIM_ConfigClockSource+0x108>
 800a7de:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d004      	beq.n	800a7f0 <HAL_TIM_ConfigClockSource+0x108>
 800a7e6:	f640 712b 	movw	r1, #3883	; 0xf2b
 800a7ea:	4877      	ldr	r0, [pc, #476]	; (800a9c8 <HAL_TIM_ConfigClockSource+0x2e0>)
 800a7ec:	f002 f9b0 	bl	800cb50 <assert_failed>
		assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a7f0:	6863      	ldr	r3, [r4, #4]
 800a7f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7f6:	d009      	beq.n	800a80c <HAL_TIM_ConfigClockSource+0x124>
 800a7f8:	f033 0202 	bics.w	r2, r3, #2
 800a7fc:	d006      	beq.n	800a80c <HAL_TIM_ConfigClockSource+0x124>
 800a7fe:	2b0a      	cmp	r3, #10
 800a800:	d004      	beq.n	800a80c <HAL_TIM_ConfigClockSource+0x124>
 800a802:	f640 712e 	movw	r1, #3886	; 0xf2e
 800a806:	4870      	ldr	r0, [pc, #448]	; (800a9c8 <HAL_TIM_ConfigClockSource+0x2e0>)
 800a808:	f002 f9a2 	bl	800cb50 <assert_failed>
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a80c:	68e3      	ldr	r3, [r4, #12]
 800a80e:	2b0f      	cmp	r3, #15
 800a810:	d904      	bls.n	800a81c <HAL_TIM_ConfigClockSource+0x134>
 800a812:	f640 712f 	movw	r1, #3887	; 0xf2f
 800a816:	486c      	ldr	r0, [pc, #432]	; (800a9c8 <HAL_TIM_ConfigClockSource+0x2e0>)
 800a818:	f002 f99a 	bl	800cb50 <assert_failed>
		TIM_TI2_ConfigInputStage(htim->Instance,
 800a81c:	682b      	ldr	r3, [r5, #0]
 800a81e:	6866      	ldr	r6, [r4, #4]
	TIMx->CCER &= ~TIM_CCER_CC2E;
 800a820:	6a18      	ldr	r0, [r3, #32]
		TIM_TI2_ConfigInputStage(htim->Instance,
 800a822:	68e4      	ldr	r4, [r4, #12]
	TIMx->CCER &= ~TIM_CCER_CC2E;
 800a824:	f020 0010 	bic.w	r0, r0, #16
 800a828:	6218      	str	r0, [r3, #32]
	tmpccmr1 = TIMx->CCMR1;
 800a82a:	6999      	ldr	r1, [r3, #24]
	tmpccer = TIMx->CCER;
 800a82c:	6a1a      	ldr	r2, [r3, #32]
	tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a82e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
	tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a832:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
	tmpccer |= (TIM_ICPolarity << 4U);
 800a836:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
	tmpccmr1 |= (TIM_ICFilter << 12U);
 800a83a:	ea41 3104 	orr.w	r1, r1, r4, lsl #12
	TIMx->CCMR1 = tmpccmr1;
 800a83e:	6199      	str	r1, [r3, #24]
	TIMx->CCER = tmpccer;
 800a840:	621a      	str	r2, [r3, #32]
	tmpsmcr = TIMx->SMCR;
 800a842:	689a      	ldr	r2, [r3, #8]
	tmpsmcr &= ~TIM_SMCR_TS;
 800a844:	f022 0270 	bic.w	r2, r2, #112	; 0x70
	tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800a848:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 800a84c:	e110      	b.n	800aa70 <HAL_TIM_ConfigClockSource+0x388>
	switch (sClockSourceConfig->ClockSource) {
 800a84e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800a852:	d049      	beq.n	800a8e8 <HAL_TIM_ConfigClockSource+0x200>
 800a854:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800a858:	f47f af78 	bne.w	800a74c <HAL_TIM_ConfigClockSource+0x64>
		assert_param(IS_TIM_ETR_INSTANCE(htim->Instance));
 800a85c:	4a5b      	ldr	r2, [pc, #364]	; (800a9cc <HAL_TIM_ConfigClockSource+0x2e4>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d013      	beq.n	800a88a <HAL_TIM_ConfigClockSource+0x1a2>
 800a862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a866:	d010      	beq.n	800a88a <HAL_TIM_ConfigClockSource+0x1a2>
 800a868:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800a86c:	4293      	cmp	r3, r2
 800a86e:	d00c      	beq.n	800a88a <HAL_TIM_ConfigClockSource+0x1a2>
 800a870:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a874:	4293      	cmp	r3, r2
 800a876:	d008      	beq.n	800a88a <HAL_TIM_ConfigClockSource+0x1a2>
 800a878:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d004      	beq.n	800a88a <HAL_TIM_ConfigClockSource+0x1a2>
 800a880:	f640 710b 	movw	r1, #3851	; 0xf0b
 800a884:	4850      	ldr	r0, [pc, #320]	; (800a9c8 <HAL_TIM_ConfigClockSource+0x2e0>)
 800a886:	f002 f963 	bl	800cb50 <assert_failed>
		assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a88a:	6863      	ldr	r3, [r4, #4]
 800a88c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a890:	d009      	beq.n	800a8a6 <HAL_TIM_ConfigClockSource+0x1be>
 800a892:	f033 0202 	bics.w	r2, r3, #2
 800a896:	d006      	beq.n	800a8a6 <HAL_TIM_ConfigClockSource+0x1be>
 800a898:	2b0a      	cmp	r3, #10
 800a89a:	d004      	beq.n	800a8a6 <HAL_TIM_ConfigClockSource+0x1be>
 800a89c:	f640 710d 	movw	r1, #3853	; 0xf0d
 800a8a0:	4849      	ldr	r0, [pc, #292]	; (800a9c8 <HAL_TIM_ConfigClockSource+0x2e0>)
 800a8a2:	f002 f955 	bl	800cb50 <assert_failed>
		assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800a8a6:	68a3      	ldr	r3, [r4, #8]
 800a8a8:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800a8ac:	d004      	beq.n	800a8b8 <HAL_TIM_ConfigClockSource+0x1d0>
 800a8ae:	f640 710e 	movw	r1, #3854	; 0xf0e
 800a8b2:	4845      	ldr	r0, [pc, #276]	; (800a9c8 <HAL_TIM_ConfigClockSource+0x2e0>)
 800a8b4:	f002 f94c 	bl	800cb50 <assert_failed>
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a8b8:	68e3      	ldr	r3, [r4, #12]
 800a8ba:	2b0f      	cmp	r3, #15
 800a8bc:	d904      	bls.n	800a8c8 <HAL_TIM_ConfigClockSource+0x1e0>
 800a8be:	f640 710f 	movw	r1, #3855	; 0xf0f
 800a8c2:	4841      	ldr	r0, [pc, #260]	; (800a9c8 <HAL_TIM_ConfigClockSource+0x2e0>)
 800a8c4:	f002 f944 	bl	800cb50 <assert_failed>
		TIM_ETR_SetConfig(htim->Instance,
 800a8c8:	682a      	ldr	r2, [r5, #0]

	/* Reset the ETR Bits */
	tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

	/* Set the Prescaler, the Filter value and the Polarity */
	tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800a8ca:	6860      	ldr	r0, [r4, #4]
 800a8cc:	68a3      	ldr	r3, [r4, #8]
	tmpsmcr = TIMx->SMCR;
 800a8ce:	6891      	ldr	r1, [r2, #8]
	tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800a8d0:	4303      	orrs	r3, r0
 800a8d2:	68e0      	ldr	r0, [r4, #12]
	tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a8d4:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
	tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800a8d8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800a8dc:	430b      	orrs	r3, r1

	/* Write to TIMx SMCR */
	TIMx->SMCR = tmpsmcr;
 800a8de:	6093      	str	r3, [r2, #8]
		htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a8e0:	6893      	ldr	r3, [r2, #8]
 800a8e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a8e6:	e026      	b.n	800a936 <HAL_TIM_ConfigClockSource+0x24e>
		assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a8e8:	4a38      	ldr	r2, [pc, #224]	; (800a9cc <HAL_TIM_ConfigClockSource+0x2e4>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d01f      	beq.n	800a92e <HAL_TIM_ConfigClockSource+0x246>
 800a8ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8f2:	d01c      	beq.n	800a92e <HAL_TIM_ConfigClockSource+0x246>
 800a8f4:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d018      	beq.n	800a92e <HAL_TIM_ConfigClockSource+0x246>
 800a8fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a900:	4293      	cmp	r3, r2
 800a902:	d014      	beq.n	800a92e <HAL_TIM_ConfigClockSource+0x246>
 800a904:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a908:	4293      	cmp	r3, r2
 800a90a:	d010      	beq.n	800a92e <HAL_TIM_ConfigClockSource+0x246>
 800a90c:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800a910:	4293      	cmp	r3, r2
 800a912:	d00c      	beq.n	800a92e <HAL_TIM_ConfigClockSource+0x246>
 800a914:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a918:	4293      	cmp	r3, r2
 800a91a:	d008      	beq.n	800a92e <HAL_TIM_ConfigClockSource+0x246>
 800a91c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a920:	4293      	cmp	r3, r2
 800a922:	d004      	beq.n	800a92e <HAL_TIM_ConfigClockSource+0x246>
 800a924:	f640 61ea 	movw	r1, #3818	; 0xeea
 800a928:	4827      	ldr	r0, [pc, #156]	; (800a9c8 <HAL_TIM_ConfigClockSource+0x2e0>)
 800a92a:	f002 f911 	bl	800cb50 <assert_failed>
		htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800a92e:	682a      	ldr	r2, [r5, #0]
 800a930:	6893      	ldr	r3, [r2, #8]
 800a932:	f023 0307 	bic.w	r3, r3, #7
	TIMx->SMCR = tmpsmcr;
 800a936:	6093      	str	r3, [r2, #8]
 800a938:	e708      	b.n	800a74c <HAL_TIM_ConfigClockSource+0x64>
		assert_param(IS_TIM_ETR_INSTANCE(htim->Instance));
 800a93a:	4a24      	ldr	r2, [pc, #144]	; (800a9cc <HAL_TIM_ConfigClockSource+0x2e4>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d013      	beq.n	800a968 <HAL_TIM_ConfigClockSource+0x280>
 800a940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a944:	d010      	beq.n	800a968 <HAL_TIM_ConfigClockSource+0x280>
 800a946:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d00c      	beq.n	800a968 <HAL_TIM_ConfigClockSource+0x280>
 800a94e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a952:	4293      	cmp	r3, r2
 800a954:	d008      	beq.n	800a968 <HAL_TIM_ConfigClockSource+0x280>
 800a956:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d004      	beq.n	800a968 <HAL_TIM_ConfigClockSource+0x280>
 800a95e:	f640 61f3 	movw	r1, #3827	; 0xef3
 800a962:	4819      	ldr	r0, [pc, #100]	; (800a9c8 <HAL_TIM_ConfigClockSource+0x2e0>)
 800a964:	f002 f8f4 	bl	800cb50 <assert_failed>
		assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a968:	6863      	ldr	r3, [r4, #4]
 800a96a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a96e:	d009      	beq.n	800a984 <HAL_TIM_ConfigClockSource+0x29c>
 800a970:	f033 0202 	bics.w	r2, r3, #2
 800a974:	d006      	beq.n	800a984 <HAL_TIM_ConfigClockSource+0x29c>
 800a976:	2b0a      	cmp	r3, #10
 800a978:	d004      	beq.n	800a984 <HAL_TIM_ConfigClockSource+0x29c>
 800a97a:	f640 61f5 	movw	r1, #3829	; 0xef5
 800a97e:	4812      	ldr	r0, [pc, #72]	; (800a9c8 <HAL_TIM_ConfigClockSource+0x2e0>)
 800a980:	f002 f8e6 	bl	800cb50 <assert_failed>
		assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800a984:	68a3      	ldr	r3, [r4, #8]
 800a986:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800a98a:	d004      	beq.n	800a996 <HAL_TIM_ConfigClockSource+0x2ae>
 800a98c:	f640 61f6 	movw	r1, #3830	; 0xef6
 800a990:	480d      	ldr	r0, [pc, #52]	; (800a9c8 <HAL_TIM_ConfigClockSource+0x2e0>)
 800a992:	f002 f8dd 	bl	800cb50 <assert_failed>
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a996:	68e3      	ldr	r3, [r4, #12]
 800a998:	2b0f      	cmp	r3, #15
 800a99a:	d904      	bls.n	800a9a6 <HAL_TIM_ConfigClockSource+0x2be>
 800a99c:	f640 61f7 	movw	r1, #3831	; 0xef7
 800a9a0:	4809      	ldr	r0, [pc, #36]	; (800a9c8 <HAL_TIM_ConfigClockSource+0x2e0>)
 800a9a2:	f002 f8d5 	bl	800cb50 <assert_failed>
		TIM_ETR_SetConfig(htim->Instance,
 800a9a6:	682a      	ldr	r2, [r5, #0]
	tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800a9a8:	6860      	ldr	r0, [r4, #4]
 800a9aa:	68a3      	ldr	r3, [r4, #8]
	tmpsmcr = TIMx->SMCR;
 800a9ac:	6891      	ldr	r1, [r2, #8]
	tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800a9ae:	4303      	orrs	r3, r0
 800a9b0:	68e0      	ldr	r0, [r4, #12]
	tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a9b2:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
	tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800a9b6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800a9ba:	430b      	orrs	r3, r1
	TIMx->SMCR = tmpsmcr;
 800a9bc:	6093      	str	r3, [r2, #8]
		tmpsmcr = htim->Instance->SMCR;
 800a9be:	6893      	ldr	r3, [r2, #8]
		tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a9c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a9c4:	e7b7      	b.n	800a936 <HAL_TIM_ConfigClockSource+0x24e>
 800a9c6:	bf00      	nop
 800a9c8:	0801d9c6 	.word	0x0801d9c6
 800a9cc:	40010000 	.word	0x40010000
		assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800a9d0:	4a84      	ldr	r2, [pc, #528]	; (800abe4 <HAL_TIM_ConfigClockSource+0x4fc>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d01f      	beq.n	800aa16 <HAL_TIM_ConfigClockSource+0x32e>
 800a9d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9da:	d01c      	beq.n	800aa16 <HAL_TIM_ConfigClockSource+0x32e>
 800a9dc:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	d018      	beq.n	800aa16 <HAL_TIM_ConfigClockSource+0x32e>
 800a9e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d014      	beq.n	800aa16 <HAL_TIM_ConfigClockSource+0x32e>
 800a9ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d010      	beq.n	800aa16 <HAL_TIM_ConfigClockSource+0x32e>
 800a9f4:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d00c      	beq.n	800aa16 <HAL_TIM_ConfigClockSource+0x32e>
 800a9fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d008      	beq.n	800aa16 <HAL_TIM_ConfigClockSource+0x32e>
 800aa04:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d004      	beq.n	800aa16 <HAL_TIM_ConfigClockSource+0x32e>
 800aa0c:	f640 711d 	movw	r1, #3869	; 0xf1d
 800aa10:	4875      	ldr	r0, [pc, #468]	; (800abe8 <HAL_TIM_ConfigClockSource+0x500>)
 800aa12:	f002 f89d 	bl	800cb50 <assert_failed>
		assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800aa16:	6863      	ldr	r3, [r4, #4]
 800aa18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa1c:	d009      	beq.n	800aa32 <HAL_TIM_ConfigClockSource+0x34a>
 800aa1e:	f033 0202 	bics.w	r2, r3, #2
 800aa22:	d006      	beq.n	800aa32 <HAL_TIM_ConfigClockSource+0x34a>
 800aa24:	2b0a      	cmp	r3, #10
 800aa26:	d004      	beq.n	800aa32 <HAL_TIM_ConfigClockSource+0x34a>
 800aa28:	f44f 6172 	mov.w	r1, #3872	; 0xf20
 800aa2c:	486e      	ldr	r0, [pc, #440]	; (800abe8 <HAL_TIM_ConfigClockSource+0x500>)
 800aa2e:	f002 f88f 	bl	800cb50 <assert_failed>
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800aa32:	68e3      	ldr	r3, [r4, #12]
 800aa34:	2b0f      	cmp	r3, #15
 800aa36:	d904      	bls.n	800aa42 <HAL_TIM_ConfigClockSource+0x35a>
 800aa38:	f640 7121 	movw	r1, #3873	; 0xf21
 800aa3c:	486a      	ldr	r0, [pc, #424]	; (800abe8 <HAL_TIM_ConfigClockSource+0x500>)
 800aa3e:	f002 f887 	bl	800cb50 <assert_failed>
		TIM_TI1_ConfigInputStage(htim->Instance,
 800aa42:	682b      	ldr	r3, [r5, #0]
 800aa44:	6861      	ldr	r1, [r4, #4]
	tmpccer = TIMx->CCER;
 800aa46:	6a18      	ldr	r0, [r3, #32]
		TIM_TI1_ConfigInputStage(htim->Instance,
 800aa48:	68e6      	ldr	r6, [r4, #12]
	TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa4a:	6a1c      	ldr	r4, [r3, #32]
 800aa4c:	f024 0401 	bic.w	r4, r4, #1
 800aa50:	621c      	str	r4, [r3, #32]
	tmpccmr1 = TIMx->CCMR1;
 800aa52:	699a      	ldr	r2, [r3, #24]
	tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aa54:	f020 000a 	bic.w	r0, r0, #10
	tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aa58:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
	tmpccmr1 |= (TIM_ICFilter << 4U);
 800aa5c:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
	tmpccer |= TIM_ICPolarity;
 800aa60:	4301      	orrs	r1, r0
	TIMx->CCMR1 = tmpccmr1;
 800aa62:	619a      	str	r2, [r3, #24]
	TIMx->CCER = tmpccer;
 800aa64:	6219      	str	r1, [r3, #32]
	tmpsmcr = TIMx->SMCR;
 800aa66:	689a      	ldr	r2, [r3, #8]
	tmpsmcr &= ~TIM_SMCR_TS;
 800aa68:	f022 0270 	bic.w	r2, r2, #112	; 0x70
	tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800aa6c:	f042 0257 	orr.w	r2, r2, #87	; 0x57
	TIMx->SMCR = tmpsmcr;
 800aa70:	609a      	str	r2, [r3, #8]
 800aa72:	e66b      	b.n	800a74c <HAL_TIM_ConfigClockSource+0x64>
		assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800aa74:	4a5b      	ldr	r2, [pc, #364]	; (800abe4 <HAL_TIM_ConfigClockSource+0x4fc>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d01f      	beq.n	800aaba <HAL_TIM_ConfigClockSource+0x3d2>
 800aa7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa7e:	d01c      	beq.n	800aaba <HAL_TIM_ConfigClockSource+0x3d2>
 800aa80:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800aa84:	4293      	cmp	r3, r2
 800aa86:	d018      	beq.n	800aaba <HAL_TIM_ConfigClockSource+0x3d2>
 800aa88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d014      	beq.n	800aaba <HAL_TIM_ConfigClockSource+0x3d2>
 800aa90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d010      	beq.n	800aaba <HAL_TIM_ConfigClockSource+0x3d2>
 800aa98:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d00c      	beq.n	800aaba <HAL_TIM_ConfigClockSource+0x3d2>
 800aaa0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d008      	beq.n	800aaba <HAL_TIM_ConfigClockSource+0x3d2>
 800aaa8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d004      	beq.n	800aaba <HAL_TIM_ConfigClockSource+0x3d2>
 800aab0:	f640 7139 	movw	r1, #3897	; 0xf39
 800aab4:	484c      	ldr	r0, [pc, #304]	; (800abe8 <HAL_TIM_ConfigClockSource+0x500>)
 800aab6:	f002 f84b 	bl	800cb50 <assert_failed>
		assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800aaba:	6863      	ldr	r3, [r4, #4]
 800aabc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aac0:	d009      	beq.n	800aad6 <HAL_TIM_ConfigClockSource+0x3ee>
 800aac2:	f033 0202 	bics.w	r2, r3, #2
 800aac6:	d006      	beq.n	800aad6 <HAL_TIM_ConfigClockSource+0x3ee>
 800aac8:	2b0a      	cmp	r3, #10
 800aaca:	d004      	beq.n	800aad6 <HAL_TIM_ConfigClockSource+0x3ee>
 800aacc:	f640 713c 	movw	r1, #3900	; 0xf3c
 800aad0:	4845      	ldr	r0, [pc, #276]	; (800abe8 <HAL_TIM_ConfigClockSource+0x500>)
 800aad2:	f002 f83d 	bl	800cb50 <assert_failed>
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800aad6:	68e3      	ldr	r3, [r4, #12]
 800aad8:	2b0f      	cmp	r3, #15
 800aada:	d904      	bls.n	800aae6 <HAL_TIM_ConfigClockSource+0x3fe>
 800aadc:	f640 713d 	movw	r1, #3901	; 0xf3d
 800aae0:	4841      	ldr	r0, [pc, #260]	; (800abe8 <HAL_TIM_ConfigClockSource+0x500>)
 800aae2:	f002 f835 	bl	800cb50 <assert_failed>
		TIM_TI1_ConfigInputStage(htim->Instance,
 800aae6:	682b      	ldr	r3, [r5, #0]
 800aae8:	6861      	ldr	r1, [r4, #4]
	tmpccer = TIMx->CCER;
 800aaea:	6a18      	ldr	r0, [r3, #32]
		TIM_TI1_ConfigInputStage(htim->Instance,
 800aaec:	68e6      	ldr	r6, [r4, #12]
	TIMx->CCER &= ~TIM_CCER_CC1E;
 800aaee:	6a1c      	ldr	r4, [r3, #32]
 800aaf0:	f024 0401 	bic.w	r4, r4, #1
 800aaf4:	621c      	str	r4, [r3, #32]
	tmpccmr1 = TIMx->CCMR1;
 800aaf6:	699a      	ldr	r2, [r3, #24]
	tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aaf8:	f020 000a 	bic.w	r0, r0, #10
	tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aafc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
	tmpccmr1 |= (TIM_ICFilter << 4U);
 800ab00:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
	tmpccer |= TIM_ICPolarity;
 800ab04:	4301      	orrs	r1, r0
	TIMx->CCMR1 = tmpccmr1;
 800ab06:	619a      	str	r2, [r3, #24]
	TIMx->CCER = tmpccer;
 800ab08:	6219      	str	r1, [r3, #32]
	tmpsmcr = TIMx->SMCR;
 800ab0a:	689a      	ldr	r2, [r3, #8]
	tmpsmcr &= ~TIM_SMCR_TS;
 800ab0c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
	tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800ab10:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 800ab14:	e7ac      	b.n	800aa70 <HAL_TIM_ConfigClockSource+0x388>
		assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800ab16:	4a33      	ldr	r2, [pc, #204]	; (800abe4 <HAL_TIM_ConfigClockSource+0x4fc>)
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d017      	beq.n	800ab4c <HAL_TIM_ConfigClockSource+0x464>
 800ab1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab20:	d014      	beq.n	800ab4c <HAL_TIM_ConfigClockSource+0x464>
 800ab22:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d010      	beq.n	800ab4c <HAL_TIM_ConfigClockSource+0x464>
 800ab2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d00c      	beq.n	800ab4c <HAL_TIM_ConfigClockSource+0x464>
 800ab32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d008      	beq.n	800ab4c <HAL_TIM_ConfigClockSource+0x464>
 800ab3a:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d004      	beq.n	800ab4c <HAL_TIM_ConfigClockSource+0x464>
 800ab42:	f640 7147 	movw	r1, #3911	; 0xf47
 800ab46:	4828      	ldr	r0, [pc, #160]	; (800abe8 <HAL_TIM_ConfigClockSource+0x500>)
 800ab48:	f002 f802 	bl	800cb50 <assert_failed>
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 800ab4c:	682a      	ldr	r2, [r5, #0]
	tmpsmcr = TIMx->SMCR;
 800ab4e:	6893      	ldr	r3, [r2, #8]
	tmpsmcr &= ~TIM_SMCR_TS;
 800ab50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800ab54:	f043 0307 	orr.w	r3, r3, #7
 800ab58:	e6ed      	b.n	800a936 <HAL_TIM_ConfigClockSource+0x24e>
		assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800ab5a:	4a22      	ldr	r2, [pc, #136]	; (800abe4 <HAL_TIM_ConfigClockSource+0x4fc>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d017      	beq.n	800ab90 <HAL_TIM_ConfigClockSource+0x4a8>
 800ab60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab64:	d014      	beq.n	800ab90 <HAL_TIM_ConfigClockSource+0x4a8>
 800ab66:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d010      	beq.n	800ab90 <HAL_TIM_ConfigClockSource+0x4a8>
 800ab6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d00c      	beq.n	800ab90 <HAL_TIM_ConfigClockSource+0x4a8>
 800ab76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d008      	beq.n	800ab90 <HAL_TIM_ConfigClockSource+0x4a8>
 800ab7e:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d004      	beq.n	800ab90 <HAL_TIM_ConfigClockSource+0x4a8>
 800ab86:	f640 714d 	movw	r1, #3917	; 0xf4d
 800ab8a:	4817      	ldr	r0, [pc, #92]	; (800abe8 <HAL_TIM_ConfigClockSource+0x500>)
 800ab8c:	f001 ffe0 	bl	800cb50 <assert_failed>
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 800ab90:	682a      	ldr	r2, [r5, #0]
	tmpsmcr = TIMx->SMCR;
 800ab92:	6893      	ldr	r3, [r2, #8]
	tmpsmcr &= ~TIM_SMCR_TS;
 800ab94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800ab98:	f043 0317 	orr.w	r3, r3, #23
 800ab9c:	e6cb      	b.n	800a936 <HAL_TIM_ConfigClockSource+0x24e>
		assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800ab9e:	4a11      	ldr	r2, [pc, #68]	; (800abe4 <HAL_TIM_ConfigClockSource+0x4fc>)
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d017      	beq.n	800abd4 <HAL_TIM_ConfigClockSource+0x4ec>
 800aba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aba8:	d014      	beq.n	800abd4 <HAL_TIM_ConfigClockSource+0x4ec>
 800abaa:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800abae:	4293      	cmp	r3, r2
 800abb0:	d010      	beq.n	800abd4 <HAL_TIM_ConfigClockSource+0x4ec>
 800abb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d00c      	beq.n	800abd4 <HAL_TIM_ConfigClockSource+0x4ec>
 800abba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d008      	beq.n	800abd4 <HAL_TIM_ConfigClockSource+0x4ec>
 800abc2:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d004      	beq.n	800abd4 <HAL_TIM_ConfigClockSource+0x4ec>
 800abca:	f640 7153 	movw	r1, #3923	; 0xf53
 800abce:	4806      	ldr	r0, [pc, #24]	; (800abe8 <HAL_TIM_ConfigClockSource+0x500>)
 800abd0:	f001 ffbe 	bl	800cb50 <assert_failed>
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 800abd4:	682a      	ldr	r2, [r5, #0]
	tmpsmcr = TIMx->SMCR;
 800abd6:	6893      	ldr	r3, [r2, #8]
	tmpsmcr &= ~TIM_SMCR_TS;
 800abd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800abdc:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 800abe0:	e6a9      	b.n	800a936 <HAL_TIM_ConfigClockSource+0x24e>
 800abe2:	bf00      	nop
 800abe4:	40010000 	.word	0x40010000
 800abe8:	0801d9c6 	.word	0x0801d9c6

0800abec <HAL_TIM_PeriodElapsedCallback>:
 800abec:	4770      	bx	lr

0800abee <HAL_TIM_OC_DelayElapsedCallback>:
 800abee:	4770      	bx	lr

0800abf0 <HAL_TIM_IC_CaptureCallback>:
 800abf0:	4770      	bx	lr

0800abf2 <HAL_TIM_PWM_PulseFinishedCallback>:
 800abf2:	4770      	bx	lr

0800abf4 <HAL_TIM_TriggerCallback>:
 800abf4:	4770      	bx	lr

0800abf6 <HAL_TIM_IRQHandler>:
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET) {
 800abf6:	6803      	ldr	r3, [r0, #0]
 800abf8:	691a      	ldr	r2, [r3, #16]
 800abfa:	0791      	lsls	r1, r2, #30
{
 800abfc:	b510      	push	{r4, lr}
 800abfe:	4604      	mov	r4, r0
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET) {
 800ac00:	d50e      	bpl.n	800ac20 <HAL_TIM_IRQHandler+0x2a>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET) {
 800ac02:	68da      	ldr	r2, [r3, #12]
 800ac04:	0792      	lsls	r2, r2, #30
 800ac06:	d50b      	bpl.n	800ac20 <HAL_TIM_IRQHandler+0x2a>
				__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ac08:	f06f 0202 	mvn.w	r2, #2
 800ac0c:	611a      	str	r2, [r3, #16]
				if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U) {
 800ac0e:	699b      	ldr	r3, [r3, #24]
				htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ac10:	2201      	movs	r2, #1
				if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U) {
 800ac12:	079b      	lsls	r3, r3, #30
				htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ac14:	7602      	strb	r2, [r0, #24]
				if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U) {
 800ac16:	d077      	beq.n	800ad08 <HAL_TIM_IRQHandler+0x112>
					HAL_TIM_IC_CaptureCallback(htim);
 800ac18:	f7ff ffea 	bl	800abf0 <HAL_TIM_IC_CaptureCallback>
				htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	7623      	strb	r3, [r4, #24]
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET) {
 800ac20:	6823      	ldr	r3, [r4, #0]
 800ac22:	691a      	ldr	r2, [r3, #16]
 800ac24:	0750      	lsls	r0, r2, #29
 800ac26:	d510      	bpl.n	800ac4a <HAL_TIM_IRQHandler+0x54>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET) {
 800ac28:	68da      	ldr	r2, [r3, #12]
 800ac2a:	0751      	lsls	r1, r2, #29
 800ac2c:	d50d      	bpl.n	800ac4a <HAL_TIM_IRQHandler+0x54>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ac2e:	f06f 0204 	mvn.w	r2, #4
 800ac32:	611a      	str	r2, [r3, #16]
			if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U) {
 800ac34:	699b      	ldr	r3, [r3, #24]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ac36:	2202      	movs	r2, #2
			if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U) {
 800ac38:	f413 7f40 	tst.w	r3, #768	; 0x300
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ac3c:	7622      	strb	r2, [r4, #24]
				HAL_TIM_IC_CaptureCallback(htim);
 800ac3e:	4620      	mov	r0, r4
			if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U) {
 800ac40:	d068      	beq.n	800ad14 <HAL_TIM_IRQHandler+0x11e>
				HAL_TIM_IC_CaptureCallback(htim);
 800ac42:	f7ff ffd5 	bl	800abf0 <HAL_TIM_IC_CaptureCallback>
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac46:	2300      	movs	r3, #0
 800ac48:	7623      	strb	r3, [r4, #24]
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET) {
 800ac4a:	6823      	ldr	r3, [r4, #0]
 800ac4c:	691a      	ldr	r2, [r3, #16]
 800ac4e:	0712      	lsls	r2, r2, #28
 800ac50:	d50f      	bpl.n	800ac72 <HAL_TIM_IRQHandler+0x7c>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET) {
 800ac52:	68da      	ldr	r2, [r3, #12]
 800ac54:	0710      	lsls	r0, r2, #28
 800ac56:	d50c      	bpl.n	800ac72 <HAL_TIM_IRQHandler+0x7c>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ac58:	f06f 0208 	mvn.w	r2, #8
 800ac5c:	611a      	str	r2, [r3, #16]
			if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U) {
 800ac5e:	69db      	ldr	r3, [r3, #28]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ac60:	2204      	movs	r2, #4
			if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U) {
 800ac62:	0799      	lsls	r1, r3, #30
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ac64:	7622      	strb	r2, [r4, #24]
				HAL_TIM_IC_CaptureCallback(htim);
 800ac66:	4620      	mov	r0, r4
			if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U) {
 800ac68:	d05a      	beq.n	800ad20 <HAL_TIM_IRQHandler+0x12a>
				HAL_TIM_IC_CaptureCallback(htim);
 800ac6a:	f7ff ffc1 	bl	800abf0 <HAL_TIM_IC_CaptureCallback>
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	7623      	strb	r3, [r4, #24]
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET) {
 800ac72:	6823      	ldr	r3, [r4, #0]
 800ac74:	691a      	ldr	r2, [r3, #16]
 800ac76:	06d2      	lsls	r2, r2, #27
 800ac78:	d510      	bpl.n	800ac9c <HAL_TIM_IRQHandler+0xa6>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET) {
 800ac7a:	68da      	ldr	r2, [r3, #12]
 800ac7c:	06d0      	lsls	r0, r2, #27
 800ac7e:	d50d      	bpl.n	800ac9c <HAL_TIM_IRQHandler+0xa6>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ac80:	f06f 0210 	mvn.w	r2, #16
 800ac84:	611a      	str	r2, [r3, #16]
			if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U) {
 800ac86:	69db      	ldr	r3, [r3, #28]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ac88:	2208      	movs	r2, #8
			if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U) {
 800ac8a:	f413 7f40 	tst.w	r3, #768	; 0x300
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ac8e:	7622      	strb	r2, [r4, #24]
				HAL_TIM_IC_CaptureCallback(htim);
 800ac90:	4620      	mov	r0, r4
			if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U) {
 800ac92:	d04b      	beq.n	800ad2c <HAL_TIM_IRQHandler+0x136>
				HAL_TIM_IC_CaptureCallback(htim);
 800ac94:	f7ff ffac 	bl	800abf0 <HAL_TIM_IC_CaptureCallback>
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	7623      	strb	r3, [r4, #24]
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET) {
 800ac9c:	6823      	ldr	r3, [r4, #0]
 800ac9e:	691a      	ldr	r2, [r3, #16]
 800aca0:	07d1      	lsls	r1, r2, #31
 800aca2:	d508      	bpl.n	800acb6 <HAL_TIM_IRQHandler+0xc0>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET) {
 800aca4:	68da      	ldr	r2, [r3, #12]
 800aca6:	07d2      	lsls	r2, r2, #31
 800aca8:	d505      	bpl.n	800acb6 <HAL_TIM_IRQHandler+0xc0>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800acaa:	f06f 0201 	mvn.w	r2, #1
 800acae:	611a      	str	r2, [r3, #16]
			HAL_TIM_PeriodElapsedCallback(htim);
 800acb0:	4620      	mov	r0, r4
 800acb2:	f7ff ff9b 	bl	800abec <HAL_TIM_PeriodElapsedCallback>
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET) {
 800acb6:	6823      	ldr	r3, [r4, #0]
 800acb8:	691a      	ldr	r2, [r3, #16]
 800acba:	0610      	lsls	r0, r2, #24
 800acbc:	d508      	bpl.n	800acd0 <HAL_TIM_IRQHandler+0xda>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET) {
 800acbe:	68da      	ldr	r2, [r3, #12]
 800acc0:	0611      	lsls	r1, r2, #24
 800acc2:	d505      	bpl.n	800acd0 <HAL_TIM_IRQHandler+0xda>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800acc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800acc8:	611a      	str	r2, [r3, #16]
			HAL_TIMEx_BreakCallback(htim);
 800acca:	4620      	mov	r0, r4
 800accc:	f000 fbc9 	bl	800b462 <HAL_TIMEx_BreakCallback>
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET) {
 800acd0:	6823      	ldr	r3, [r4, #0]
 800acd2:	691a      	ldr	r2, [r3, #16]
 800acd4:	0652      	lsls	r2, r2, #25
 800acd6:	d508      	bpl.n	800acea <HAL_TIM_IRQHandler+0xf4>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET) {
 800acd8:	68da      	ldr	r2, [r3, #12]
 800acda:	0650      	lsls	r0, r2, #25
 800acdc:	d505      	bpl.n	800acea <HAL_TIM_IRQHandler+0xf4>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800acde:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ace2:	611a      	str	r2, [r3, #16]
			HAL_TIM_TriggerCallback(htim);
 800ace4:	4620      	mov	r0, r4
 800ace6:	f7ff ff85 	bl	800abf4 <HAL_TIM_TriggerCallback>
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET) {
 800acea:	6823      	ldr	r3, [r4, #0]
 800acec:	691a      	ldr	r2, [r3, #16]
 800acee:	0691      	lsls	r1, r2, #26
 800acf0:	d522      	bpl.n	800ad38 <HAL_TIM_IRQHandler+0x142>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET) {
 800acf2:	68da      	ldr	r2, [r3, #12]
 800acf4:	0692      	lsls	r2, r2, #26
 800acf6:	d51f      	bpl.n	800ad38 <HAL_TIM_IRQHandler+0x142>
			__HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800acf8:	f06f 0220 	mvn.w	r2, #32
			HAL_TIMEx_CommutationCallback(htim);
 800acfc:	4620      	mov	r0, r4
			__HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800acfe:	611a      	str	r2, [r3, #16]
}
 800ad00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			HAL_TIMEx_CommutationCallback(htim);
 800ad04:	f000 bbac 	b.w	800b460 <HAL_TIMEx_CommutationCallback>
					HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad08:	f7ff ff71 	bl	800abee <HAL_TIM_OC_DelayElapsedCallback>
					HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad0c:	4620      	mov	r0, r4
 800ad0e:	f7ff ff70 	bl	800abf2 <HAL_TIM_PWM_PulseFinishedCallback>
 800ad12:	e783      	b.n	800ac1c <HAL_TIM_IRQHandler+0x26>
				HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad14:	f7ff ff6b 	bl	800abee <HAL_TIM_OC_DelayElapsedCallback>
				HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad18:	4620      	mov	r0, r4
 800ad1a:	f7ff ff6a 	bl	800abf2 <HAL_TIM_PWM_PulseFinishedCallback>
 800ad1e:	e792      	b.n	800ac46 <HAL_TIM_IRQHandler+0x50>
				HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad20:	f7ff ff65 	bl	800abee <HAL_TIM_OC_DelayElapsedCallback>
				HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad24:	4620      	mov	r0, r4
 800ad26:	f7ff ff64 	bl	800abf2 <HAL_TIM_PWM_PulseFinishedCallback>
 800ad2a:	e7a0      	b.n	800ac6e <HAL_TIM_IRQHandler+0x78>
				HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad2c:	f7ff ff5f 	bl	800abee <HAL_TIM_OC_DelayElapsedCallback>
				HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad30:	4620      	mov	r0, r4
 800ad32:	f7ff ff5e 	bl	800abf2 <HAL_TIM_PWM_PulseFinishedCallback>
 800ad36:	e7af      	b.n	800ac98 <HAL_TIM_IRQHandler+0xa2>
 800ad38:	bd10      	pop	{r4, pc}
	...

0800ad3c <TIM_Base_SetConfig>:
	if (IS_TIM_CC3_INSTANCE(TIMx) != RESET) {
 800ad3c:	4a22      	ldr	r2, [pc, #136]	; (800adc8 <TIM_Base_SetConfig+0x8c>)
	tmpcr1 = TIMx->CR1;
 800ad3e:	6803      	ldr	r3, [r0, #0]
	if (IS_TIM_CC3_INSTANCE(TIMx) != RESET) {
 800ad40:	4290      	cmp	r0, r2
 800ad42:	d00e      	beq.n	800ad62 <TIM_Base_SetConfig+0x26>
 800ad44:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800ad48:	d00b      	beq.n	800ad62 <TIM_Base_SetConfig+0x26>
 800ad4a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800ad4e:	4290      	cmp	r0, r2
 800ad50:	d007      	beq.n	800ad62 <TIM_Base_SetConfig+0x26>
 800ad52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ad56:	4290      	cmp	r0, r2
 800ad58:	d003      	beq.n	800ad62 <TIM_Base_SetConfig+0x26>
 800ad5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ad5e:	4290      	cmp	r0, r2
 800ad60:	d119      	bne.n	800ad96 <TIM_Base_SetConfig+0x5a>
		tmpcr1 |= Structure->CounterMode;
 800ad62:	684a      	ldr	r2, [r1, #4]
		tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ad64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
		tmpcr1 |= Structure->CounterMode;
 800ad68:	4313      	orrs	r3, r2
	if (IS_TIM_CC1_INSTANCE(TIMx) != RESET) {
 800ad6a:	4a17      	ldr	r2, [pc, #92]	; (800adc8 <TIM_Base_SetConfig+0x8c>)
 800ad6c:	4290      	cmp	r0, r2
 800ad6e:	d104      	bne.n	800ad7a <TIM_Base_SetConfig+0x3e>
		tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad70:	68ca      	ldr	r2, [r1, #12]
		tmpcr1 &= ~TIM_CR1_CKD;
 800ad72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
		tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad76:	4313      	orrs	r3, r2
 800ad78:	e018      	b.n	800adac <TIM_Base_SetConfig+0x70>
	if (IS_TIM_CC1_INSTANCE(TIMx) != RESET) {
 800ad7a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800ad7e:	d0f7      	beq.n	800ad70 <TIM_Base_SetConfig+0x34>
 800ad80:	4a12      	ldr	r2, [pc, #72]	; (800adcc <TIM_Base_SetConfig+0x90>)
 800ad82:	4290      	cmp	r0, r2
 800ad84:	d0f4      	beq.n	800ad70 <TIM_Base_SetConfig+0x34>
 800ad86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ad8a:	4290      	cmp	r0, r2
 800ad8c:	d0f0      	beq.n	800ad70 <TIM_Base_SetConfig+0x34>
 800ad8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ad92:	4290      	cmp	r0, r2
 800ad94:	d0ec      	beq.n	800ad70 <TIM_Base_SetConfig+0x34>
 800ad96:	4a0e      	ldr	r2, [pc, #56]	; (800add0 <TIM_Base_SetConfig+0x94>)
 800ad98:	4290      	cmp	r0, r2
 800ad9a:	d0e9      	beq.n	800ad70 <TIM_Base_SetConfig+0x34>
 800ad9c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ada0:	4290      	cmp	r0, r2
 800ada2:	d0e5      	beq.n	800ad70 <TIM_Base_SetConfig+0x34>
 800ada4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ada8:	4290      	cmp	r0, r2
 800adaa:	d0e1      	beq.n	800ad70 <TIM_Base_SetConfig+0x34>
	TIMx->CR1 = tmpcr1;
 800adac:	6003      	str	r3, [r0, #0]
	TIMx->ARR = (uint32_t)Structure->Period;
 800adae:	688b      	ldr	r3, [r1, #8]
 800adb0:	62c3      	str	r3, [r0, #44]	; 0x2c
	TIMx->PSC = (uint32_t)Structure->Prescaler;
 800adb2:	680b      	ldr	r3, [r1, #0]
 800adb4:	6283      	str	r3, [r0, #40]	; 0x28
	if (IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET) {
 800adb6:	4b04      	ldr	r3, [pc, #16]	; (800adc8 <TIM_Base_SetConfig+0x8c>)
 800adb8:	4298      	cmp	r0, r3
		TIMx->RCR = Structure->RepetitionCounter;
 800adba:	bf04      	itt	eq
 800adbc:	690b      	ldreq	r3, [r1, #16]
 800adbe:	6303      	streq	r3, [r0, #48]	; 0x30
	TIMx->EGR = TIM_EGR_UG;
 800adc0:	2301      	movs	r3, #1
 800adc2:	6143      	str	r3, [r0, #20]
}
 800adc4:	4770      	bx	lr
 800adc6:	bf00      	nop
 800adc8:	40010000 	.word	0x40010000
 800adcc:	40000400 	.word	0x40000400
 800add0:	40014000 	.word	0x40014000

0800add4 <HAL_TIM_Base_Init>:
{
 800add4:	b510      	push	{r4, lr}
	if (htim == NULL) {
 800add6:	4604      	mov	r4, r0
 800add8:	2800      	cmp	r0, #0
 800adda:	d051      	beq.n	800ae80 <HAL_TIM_Base_Init+0xac>
	assert_param(IS_TIM_INSTANCE(htim->Instance));
 800addc:	6803      	ldr	r3, [r0, #0]
 800adde:	4a29      	ldr	r2, [pc, #164]	; (800ae84 <HAL_TIM_Base_Init+0xb0>)
 800ade0:	4293      	cmp	r3, r2
 800ade2:	d01e      	beq.n	800ae22 <HAL_TIM_Base_Init+0x4e>
 800ade4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ade8:	d01b      	beq.n	800ae22 <HAL_TIM_Base_Init+0x4e>
 800adea:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800adee:	4293      	cmp	r3, r2
 800adf0:	d017      	beq.n	800ae22 <HAL_TIM_Base_Init+0x4e>
 800adf2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d013      	beq.n	800ae22 <HAL_TIM_Base_Init+0x4e>
 800adfa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d00f      	beq.n	800ae22 <HAL_TIM_Base_Init+0x4e>
 800ae02:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d00b      	beq.n	800ae22 <HAL_TIM_Base_Init+0x4e>
 800ae0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d007      	beq.n	800ae22 <HAL_TIM_Base_Init+0x4e>
 800ae12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ae16:	4293      	cmp	r3, r2
 800ae18:	d003      	beq.n	800ae22 <HAL_TIM_Base_Init+0x4e>
 800ae1a:	21d6      	movs	r1, #214	; 0xd6
 800ae1c:	481a      	ldr	r0, [pc, #104]	; (800ae88 <HAL_TIM_Base_Init+0xb4>)
 800ae1e:	f001 fe97 	bl	800cb50 <assert_failed>
	assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800ae22:	68a3      	ldr	r3, [r4, #8]
 800ae24:	f033 0210 	bics.w	r2, r3, #16
 800ae28:	d009      	beq.n	800ae3e <HAL_TIM_Base_Init+0x6a>
 800ae2a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800ae2e:	2a20      	cmp	r2, #32
 800ae30:	d005      	beq.n	800ae3e <HAL_TIM_Base_Init+0x6a>
 800ae32:	2b40      	cmp	r3, #64	; 0x40
 800ae34:	d003      	beq.n	800ae3e <HAL_TIM_Base_Init+0x6a>
 800ae36:	21d7      	movs	r1, #215	; 0xd7
 800ae38:	4813      	ldr	r0, [pc, #76]	; (800ae88 <HAL_TIM_Base_Init+0xb4>)
 800ae3a:	f001 fe89 	bl	800cb50 <assert_failed>
	assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800ae3e:	6923      	ldr	r3, [r4, #16]
 800ae40:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800ae44:	d006      	beq.n	800ae54 <HAL_TIM_Base_Init+0x80>
 800ae46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae4a:	d003      	beq.n	800ae54 <HAL_TIM_Base_Init+0x80>
 800ae4c:	21d8      	movs	r1, #216	; 0xd8
 800ae4e:	480e      	ldr	r0, [pc, #56]	; (800ae88 <HAL_TIM_Base_Init+0xb4>)
 800ae50:	f001 fe7e 	bl	800cb50 <assert_failed>
	if (htim->State == HAL_TIM_STATE_RESET) {
 800ae54:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800ae58:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ae5c:	b923      	cbnz	r3, 800ae68 <HAL_TIM_Base_Init+0x94>
		htim->Lock = HAL_UNLOCKED;
 800ae5e:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
		HAL_TIM_Base_MspInit(htim);
 800ae62:	4620      	mov	r0, r4
 800ae64:	f002 f87e 	bl	800cf64 <HAL_TIM_Base_MspInit>
	htim->State = HAL_TIM_STATE_BUSY;
 800ae68:	2302      	movs	r3, #2
 800ae6a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae6e:	6820      	ldr	r0, [r4, #0]
 800ae70:	1d21      	adds	r1, r4, #4
 800ae72:	f7ff ff63 	bl	800ad3c <TIM_Base_SetConfig>
	htim->State = HAL_TIM_STATE_READY;
 800ae76:	2301      	movs	r3, #1
 800ae78:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	return HAL_OK;
 800ae7c:	2000      	movs	r0, #0
 800ae7e:	bd10      	pop	{r4, pc}
		return HAL_ERROR;
 800ae80:	2001      	movs	r0, #1
}
 800ae82:	bd10      	pop	{r4, pc}
 800ae84:	40010000 	.word	0x40010000
 800ae88:	0801d9c6 	.word	0x0801d9c6

0800ae8c <HAL_TIM_PWM_Init>:
{
 800ae8c:	b510      	push	{r4, lr}
	if (htim == NULL) {
 800ae8e:	4604      	mov	r4, r0
 800ae90:	2800      	cmp	r0, #0
 800ae92:	d054      	beq.n	800af3e <HAL_TIM_PWM_Init+0xb2>
	assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ae94:	6803      	ldr	r3, [r0, #0]
 800ae96:	4a2b      	ldr	r2, [pc, #172]	; (800af44 <HAL_TIM_PWM_Init+0xb8>)
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d01f      	beq.n	800aedc <HAL_TIM_PWM_Init+0x50>
 800ae9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aea0:	d01c      	beq.n	800aedc <HAL_TIM_PWM_Init+0x50>
 800aea2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d018      	beq.n	800aedc <HAL_TIM_PWM_Init+0x50>
 800aeaa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aeae:	4293      	cmp	r3, r2
 800aeb0:	d014      	beq.n	800aedc <HAL_TIM_PWM_Init+0x50>
 800aeb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d010      	beq.n	800aedc <HAL_TIM_PWM_Init+0x50>
 800aeba:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800aebe:	4293      	cmp	r3, r2
 800aec0:	d00c      	beq.n	800aedc <HAL_TIM_PWM_Init+0x50>
 800aec2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aec6:	4293      	cmp	r3, r2
 800aec8:	d008      	beq.n	800aedc <HAL_TIM_PWM_Init+0x50>
 800aeca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aece:	4293      	cmp	r3, r2
 800aed0:	d004      	beq.n	800aedc <HAL_TIM_PWM_Init+0x50>
 800aed2:	f240 31d6 	movw	r1, #982	; 0x3d6
 800aed6:	481c      	ldr	r0, [pc, #112]	; (800af48 <HAL_TIM_PWM_Init+0xbc>)
 800aed8:	f001 fe3a 	bl	800cb50 <assert_failed>
	assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800aedc:	68a3      	ldr	r3, [r4, #8]
 800aede:	f033 0210 	bics.w	r2, r3, #16
 800aee2:	d00a      	beq.n	800aefa <HAL_TIM_PWM_Init+0x6e>
 800aee4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800aee8:	2a20      	cmp	r2, #32
 800aeea:	d006      	beq.n	800aefa <HAL_TIM_PWM_Init+0x6e>
 800aeec:	2b40      	cmp	r3, #64	; 0x40
 800aeee:	d004      	beq.n	800aefa <HAL_TIM_PWM_Init+0x6e>
 800aef0:	f240 31d7 	movw	r1, #983	; 0x3d7
 800aef4:	4814      	ldr	r0, [pc, #80]	; (800af48 <HAL_TIM_PWM_Init+0xbc>)
 800aef6:	f001 fe2b 	bl	800cb50 <assert_failed>
	assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800aefa:	6923      	ldr	r3, [r4, #16]
 800aefc:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800af00:	d007      	beq.n	800af12 <HAL_TIM_PWM_Init+0x86>
 800af02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af06:	d004      	beq.n	800af12 <HAL_TIM_PWM_Init+0x86>
 800af08:	f44f 7176 	mov.w	r1, #984	; 0x3d8
 800af0c:	480e      	ldr	r0, [pc, #56]	; (800af48 <HAL_TIM_PWM_Init+0xbc>)
 800af0e:	f001 fe1f 	bl	800cb50 <assert_failed>
	if (htim->State == HAL_TIM_STATE_RESET) {
 800af12:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800af16:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800af1a:	b923      	cbnz	r3, 800af26 <HAL_TIM_PWM_Init+0x9a>
		htim->Lock = HAL_UNLOCKED;
 800af1c:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
		HAL_TIM_PWM_MspInit(htim);
 800af20:	4620      	mov	r0, r4
 800af22:	f7ff fb99 	bl	800a658 <HAL_TIM_PWM_MspInit>
	htim->State = HAL_TIM_STATE_BUSY;
 800af26:	2302      	movs	r3, #2
 800af28:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af2c:	6820      	ldr	r0, [r4, #0]
 800af2e:	1d21      	adds	r1, r4, #4
 800af30:	f7ff ff04 	bl	800ad3c <TIM_Base_SetConfig>
	htim->State = HAL_TIM_STATE_READY;
 800af34:	2301      	movs	r3, #1
 800af36:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	return HAL_OK;
 800af3a:	2000      	movs	r0, #0
 800af3c:	bd10      	pop	{r4, pc}
		return HAL_ERROR;
 800af3e:	2001      	movs	r0, #1
}
 800af40:	bd10      	pop	{r4, pc}
 800af42:	bf00      	nop
 800af44:	40010000 	.word	0x40010000
 800af48:	0801d9c6 	.word	0x0801d9c6

0800af4c <TIM_OC2_SetConfig>:
	TIMx->CCER &= ~TIM_CCER_CC2E;
 800af4c:	6a03      	ldr	r3, [r0, #32]
 800af4e:	f023 0310 	bic.w	r3, r3, #16
{
 800af52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	TIMx->CCER &= ~TIM_CCER_CC2E;
 800af56:	6203      	str	r3, [r0, #32]
	tmpccer = TIMx->CCER;
 800af58:	6a04      	ldr	r4, [r0, #32]
	tmpcr2 = TIMx->CR2;
 800af5a:	f8d0 8004 	ldr.w	r8, [r0, #4]
	tmpccmrx = TIMx->CCMR1;
 800af5e:	6987      	ldr	r7, [r0, #24]
	tmpccmrx |= (OC_Config->OCMode << 8U);
 800af60:	680b      	ldr	r3, [r1, #0]
	tmpccmrx &= ~TIM_CCMR1_CC2S;
 800af62:	f427 47e6 	bic.w	r7, r7, #29440	; 0x7300
	tmpccmrx |= (OC_Config->OCMode << 8U);
 800af66:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
	tmpccer |= (OC_Config->OCPolarity << 4U);
 800af6a:	688b      	ldr	r3, [r1, #8]
	tmpccer &= ~TIM_CCER_CC2P;
 800af6c:	f024 0420 	bic.w	r4, r4, #32
	tmpccer |= (OC_Config->OCPolarity << 4U);
 800af70:	ea44 1403 	orr.w	r4, r4, r3, lsl #4
	if (IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET) {
 800af74:	4b11      	ldr	r3, [pc, #68]	; (800afbc <TIM_OC2_SetConfig+0x70>)
 800af76:	4298      	cmp	r0, r3
{
 800af78:	4605      	mov	r5, r0
 800af7a:	460e      	mov	r6, r1
	if (IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET) {
 800af7c:	d116      	bne.n	800afac <TIM_OC2_SetConfig+0x60>
		assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800af7e:	68cb      	ldr	r3, [r1, #12]
 800af80:	f033 0308 	bics.w	r3, r3, #8
 800af84:	d004      	beq.n	800af90 <TIM_OC2_SetConfig+0x44>
 800af86:	f241 1164 	movw	r1, #4452	; 0x1164
 800af8a:	480d      	ldr	r0, [pc, #52]	; (800afc0 <TIM_OC2_SetConfig+0x74>)
 800af8c:	f001 fde0 	bl	800cb50 <assert_failed>
		tmpccer |= (OC_Config->OCNPolarity << 4U);
 800af90:	68f3      	ldr	r3, [r6, #12]
		tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800af92:	69b2      	ldr	r2, [r6, #24]
		tmpccer &= ~TIM_CCER_CC2NP;
 800af94:	f024 0480 	bic.w	r4, r4, #128	; 0x80
		tmpccer |= (OC_Config->OCNPolarity << 4U);
 800af98:	ea44 1403 	orr.w	r4, r4, r3, lsl #4
		tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800af9c:	6973      	ldr	r3, [r6, #20]
		tmpcr2 &= ~TIM_CR2_OIS2N;
 800af9e:	f428 6840 	bic.w	r8, r8, #3072	; 0xc00
		tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800afa2:	4313      	orrs	r3, r2
		tmpccer &= ~TIM_CCER_CC2NE;
 800afa4:	f024 0440 	bic.w	r4, r4, #64	; 0x40
		tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800afa8:	ea48 0883 	orr.w	r8, r8, r3, lsl #2
	TIMx->CCR2 = OC_Config->Pulse;
 800afac:	6873      	ldr	r3, [r6, #4]
	TIMx->CR2 = tmpcr2;
 800afae:	f8c5 8004 	str.w	r8, [r5, #4]
	TIMx->CCMR1 = tmpccmrx;
 800afb2:	61af      	str	r7, [r5, #24]
	TIMx->CCR2 = OC_Config->Pulse;
 800afb4:	63ab      	str	r3, [r5, #56]	; 0x38
	TIMx->CCER = tmpccer;
 800afb6:	622c      	str	r4, [r5, #32]
 800afb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afbc:	40010000 	.word	0x40010000
 800afc0:	0801d9c6 	.word	0x0801d9c6

0800afc4 <HAL_TIM_PWM_ConfigChannel>:
	__HAL_LOCK(htim);
 800afc4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800afc8:	2b01      	cmp	r3, #1
{
 800afca:	b570      	push	{r4, r5, r6, lr}
 800afcc:	4604      	mov	r4, r0
 800afce:	460d      	mov	r5, r1
 800afd0:	4616      	mov	r6, r2
	__HAL_LOCK(htim);
 800afd2:	f000 80f6 	beq.w	800b1c2 <HAL_TIM_PWM_ConfigChannel+0x1fe>
 800afd6:	2301      	movs	r3, #1
	assert_param(IS_TIM_CHANNELS(Channel));
 800afd8:	2a18      	cmp	r2, #24
	__HAL_LOCK(htim);
 800afda:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	assert_param(IS_TIM_CHANNELS(Channel));
 800afde:	d803      	bhi.n	800afe8 <HAL_TIM_PWM_ConfigChannel+0x24>
 800afe0:	4b79      	ldr	r3, [pc, #484]	; (800b1c8 <HAL_TIM_PWM_ConfigChannel+0x204>)
 800afe2:	40d3      	lsrs	r3, r2
 800afe4:	07db      	lsls	r3, r3, #31
 800afe6:	d404      	bmi.n	800aff2 <HAL_TIM_PWM_ConfigChannel+0x2e>
 800afe8:	f640 31d4 	movw	r1, #3028	; 0xbd4
 800afec:	4877      	ldr	r0, [pc, #476]	; (800b1cc <HAL_TIM_PWM_ConfigChannel+0x208>)
 800afee:	f001 fdaf 	bl	800cb50 <assert_failed>
	assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800aff2:	682b      	ldr	r3, [r5, #0]
 800aff4:	f023 0310 	bic.w	r3, r3, #16
 800aff8:	2b60      	cmp	r3, #96	; 0x60
 800affa:	d004      	beq.n	800b006 <HAL_TIM_PWM_ConfigChannel+0x42>
 800affc:	f640 31d5 	movw	r1, #3029	; 0xbd5
 800b000:	4872      	ldr	r0, [pc, #456]	; (800b1cc <HAL_TIM_PWM_ConfigChannel+0x208>)
 800b002:	f001 fda5 	bl	800cb50 <assert_failed>
	assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800b006:	68ab      	ldr	r3, [r5, #8]
 800b008:	f033 0302 	bics.w	r3, r3, #2
 800b00c:	d004      	beq.n	800b018 <HAL_TIM_PWM_ConfigChannel+0x54>
 800b00e:	f640 31d6 	movw	r1, #3030	; 0xbd6
 800b012:	486e      	ldr	r0, [pc, #440]	; (800b1cc <HAL_TIM_PWM_ConfigChannel+0x208>)
 800b014:	f001 fd9c 	bl	800cb50 <assert_failed>
	assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800b018:	692b      	ldr	r3, [r5, #16]
 800b01a:	f033 0304 	bics.w	r3, r3, #4
 800b01e:	d004      	beq.n	800b02a <HAL_TIM_PWM_ConfigChannel+0x66>
 800b020:	f640 31d7 	movw	r1, #3031	; 0xbd7
 800b024:	4869      	ldr	r0, [pc, #420]	; (800b1cc <HAL_TIM_PWM_ConfigChannel+0x208>)
 800b026:	f001 fd93 	bl	800cb50 <assert_failed>
	htim->State = HAL_TIM_STATE_BUSY;
 800b02a:	2302      	movs	r3, #2
 800b02c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	switch (Channel) {
 800b030:	2e0c      	cmp	r6, #12
 800b032:	d83d      	bhi.n	800b0b0 <HAL_TIM_PWM_ConfigChannel+0xec>
 800b034:	e8df f006 	tbb	[pc, r6]
 800b038:	3c3c3c07 	.word	0x3c3c3c07
 800b03c:	3c3c3c43 	.word	0x3c3c3c43
 800b040:	3c3c3c71 	.word	0x3c3c3c71
 800b044:	9b          	.byte	0x9b
 800b045:	00          	.byte	0x00
		assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800b046:	6823      	ldr	r3, [r4, #0]
 800b048:	4a61      	ldr	r2, [pc, #388]	; (800b1d0 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d01f      	beq.n	800b08e <HAL_TIM_PWM_ConfigChannel+0xca>
 800b04e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b052:	d01c      	beq.n	800b08e <HAL_TIM_PWM_ConfigChannel+0xca>
 800b054:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b058:	4293      	cmp	r3, r2
 800b05a:	d018      	beq.n	800b08e <HAL_TIM_PWM_ConfigChannel+0xca>
 800b05c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b060:	4293      	cmp	r3, r2
 800b062:	d014      	beq.n	800b08e <HAL_TIM_PWM_ConfigChannel+0xca>
 800b064:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b068:	4293      	cmp	r3, r2
 800b06a:	d010      	beq.n	800b08e <HAL_TIM_PWM_ConfigChannel+0xca>
 800b06c:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800b070:	4293      	cmp	r3, r2
 800b072:	d00c      	beq.n	800b08e <HAL_TIM_PWM_ConfigChannel+0xca>
 800b074:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b078:	4293      	cmp	r3, r2
 800b07a:	d008      	beq.n	800b08e <HAL_TIM_PWM_ConfigChannel+0xca>
 800b07c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b080:	4293      	cmp	r3, r2
 800b082:	d004      	beq.n	800b08e <HAL_TIM_PWM_ConfigChannel+0xca>
 800b084:	f640 31de 	movw	r1, #3038	; 0xbde
 800b088:	4850      	ldr	r0, [pc, #320]	; (800b1cc <HAL_TIM_PWM_ConfigChannel+0x208>)
 800b08a:	f001 fd61 	bl	800cb50 <assert_failed>
		TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b08e:	4629      	mov	r1, r5
 800b090:	6820      	ldr	r0, [r4, #0]
 800b092:	f7ff fa01 	bl	800a498 <TIM_OC1_SetConfig>
		htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b096:	6823      	ldr	r3, [r4, #0]
		htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b098:	6929      	ldr	r1, [r5, #16]
		htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b09a:	699a      	ldr	r2, [r3, #24]
 800b09c:	f042 0208 	orr.w	r2, r2, #8
 800b0a0:	619a      	str	r2, [r3, #24]
		htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b0a2:	699a      	ldr	r2, [r3, #24]
 800b0a4:	f022 0204 	bic.w	r2, r2, #4
 800b0a8:	619a      	str	r2, [r3, #24]
		htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b0aa:	699a      	ldr	r2, [r3, #24]
 800b0ac:	430a      	orrs	r2, r1
		htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b0ae:	619a      	str	r2, [r3, #24]
	htim->State = HAL_TIM_STATE_READY;
 800b0b0:	2301      	movs	r3, #1
	__HAL_UNLOCK(htim);
 800b0b2:	2000      	movs	r0, #0
	htim->State = HAL_TIM_STATE_READY;
 800b0b4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	__HAL_UNLOCK(htim);
 800b0b8:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
	return HAL_OK;
 800b0bc:	bd70      	pop	{r4, r5, r6, pc}
		assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800b0be:	6823      	ldr	r3, [r4, #0]
 800b0c0:	4a43      	ldr	r2, [pc, #268]	; (800b1d0 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d017      	beq.n	800b0f6 <HAL_TIM_PWM_ConfigChannel+0x132>
 800b0c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0ca:	d014      	beq.n	800b0f6 <HAL_TIM_PWM_ConfigChannel+0x132>
 800b0cc:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b0d0:	4293      	cmp	r3, r2
 800b0d2:	d010      	beq.n	800b0f6 <HAL_TIM_PWM_ConfigChannel+0x132>
 800b0d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b0d8:	4293      	cmp	r3, r2
 800b0da:	d00c      	beq.n	800b0f6 <HAL_TIM_PWM_ConfigChannel+0x132>
 800b0dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d008      	beq.n	800b0f6 <HAL_TIM_PWM_ConfigChannel+0x132>
 800b0e4:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	d004      	beq.n	800b0f6 <HAL_TIM_PWM_ConfigChannel+0x132>
 800b0ec:	f640 31ed 	movw	r1, #3053	; 0xbed
 800b0f0:	4836      	ldr	r0, [pc, #216]	; (800b1cc <HAL_TIM_PWM_ConfigChannel+0x208>)
 800b0f2:	f001 fd2d 	bl	800cb50 <assert_failed>
		TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b0f6:	4629      	mov	r1, r5
 800b0f8:	6820      	ldr	r0, [r4, #0]
 800b0fa:	f7ff ff27 	bl	800af4c <TIM_OC2_SetConfig>
		htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b0fe:	6823      	ldr	r3, [r4, #0]
		htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b100:	6929      	ldr	r1, [r5, #16]
		htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b102:	699a      	ldr	r2, [r3, #24]
 800b104:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b108:	619a      	str	r2, [r3, #24]
		htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b10a:	699a      	ldr	r2, [r3, #24]
 800b10c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b110:	619a      	str	r2, [r3, #24]
		htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b112:	699a      	ldr	r2, [r3, #24]
 800b114:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800b118:	e7c9      	b.n	800b0ae <HAL_TIM_PWM_ConfigChannel+0xea>
		assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800b11a:	6823      	ldr	r3, [r4, #0]
 800b11c:	4a2c      	ldr	r2, [pc, #176]	; (800b1d0 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 800b11e:	4293      	cmp	r3, r2
 800b120:	d013      	beq.n	800b14a <HAL_TIM_PWM_ConfigChannel+0x186>
 800b122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b126:	d010      	beq.n	800b14a <HAL_TIM_PWM_ConfigChannel+0x186>
 800b128:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b12c:	4293      	cmp	r3, r2
 800b12e:	d00c      	beq.n	800b14a <HAL_TIM_PWM_ConfigChannel+0x186>
 800b130:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b134:	4293      	cmp	r3, r2
 800b136:	d008      	beq.n	800b14a <HAL_TIM_PWM_ConfigChannel+0x186>
 800b138:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b13c:	4293      	cmp	r3, r2
 800b13e:	d004      	beq.n	800b14a <HAL_TIM_PWM_ConfigChannel+0x186>
 800b140:	f640 31fc 	movw	r1, #3068	; 0xbfc
 800b144:	4821      	ldr	r0, [pc, #132]	; (800b1cc <HAL_TIM_PWM_ConfigChannel+0x208>)
 800b146:	f001 fd03 	bl	800cb50 <assert_failed>
		TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b14a:	4629      	mov	r1, r5
 800b14c:	6820      	ldr	r0, [r4, #0]
 800b14e:	f7ff f9cb 	bl	800a4e8 <TIM_OC3_SetConfig>
		htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b152:	6823      	ldr	r3, [r4, #0]
		htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b154:	6929      	ldr	r1, [r5, #16]
		htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b156:	69da      	ldr	r2, [r3, #28]
 800b158:	f042 0208 	orr.w	r2, r2, #8
 800b15c:	61da      	str	r2, [r3, #28]
		htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b15e:	69da      	ldr	r2, [r3, #28]
 800b160:	f022 0204 	bic.w	r2, r2, #4
 800b164:	61da      	str	r2, [r3, #28]
		htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b166:	69da      	ldr	r2, [r3, #28]
 800b168:	430a      	orrs	r2, r1
		htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b16a:	61da      	str	r2, [r3, #28]
	break;
 800b16c:	e7a0      	b.n	800b0b0 <HAL_TIM_PWM_ConfigChannel+0xec>
		assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800b16e:	6823      	ldr	r3, [r4, #0]
 800b170:	4a17      	ldr	r2, [pc, #92]	; (800b1d0 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 800b172:	4293      	cmp	r3, r2
 800b174:	d013      	beq.n	800b19e <HAL_TIM_PWM_ConfigChannel+0x1da>
 800b176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b17a:	d010      	beq.n	800b19e <HAL_TIM_PWM_ConfigChannel+0x1da>
 800b17c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b180:	4293      	cmp	r3, r2
 800b182:	d00c      	beq.n	800b19e <HAL_TIM_PWM_ConfigChannel+0x1da>
 800b184:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b188:	4293      	cmp	r3, r2
 800b18a:	d008      	beq.n	800b19e <HAL_TIM_PWM_ConfigChannel+0x1da>
 800b18c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b190:	4293      	cmp	r3, r2
 800b192:	d004      	beq.n	800b19e <HAL_TIM_PWM_ConfigChannel+0x1da>
 800b194:	f640 410b 	movw	r1, #3083	; 0xc0b
 800b198:	480c      	ldr	r0, [pc, #48]	; (800b1cc <HAL_TIM_PWM_ConfigChannel+0x208>)
 800b19a:	f001 fcd9 	bl	800cb50 <assert_failed>
		TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b19e:	4629      	mov	r1, r5
 800b1a0:	6820      	ldr	r0, [r4, #0]
 800b1a2:	f7ff f9ef 	bl	800a584 <TIM_OC4_SetConfig>
		htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b1a6:	6823      	ldr	r3, [r4, #0]
		htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b1a8:	6929      	ldr	r1, [r5, #16]
		htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b1aa:	69da      	ldr	r2, [r3, #28]
 800b1ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b1b0:	61da      	str	r2, [r3, #28]
		htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b1b2:	69da      	ldr	r2, [r3, #28]
 800b1b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b1b8:	61da      	str	r2, [r3, #28]
		htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b1ba:	69da      	ldr	r2, [r3, #28]
 800b1bc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800b1c0:	e7d3      	b.n	800b16a <HAL_TIM_PWM_ConfigChannel+0x1a6>
	__HAL_LOCK(htim);
 800b1c2:	2002      	movs	r0, #2
}
 800b1c4:	bd70      	pop	{r4, r5, r6, pc}
 800b1c6:	bf00      	nop
 800b1c8:	01001111 	.word	0x01001111
 800b1cc:	0801d9c6 	.word	0x0801d9c6
 800b1d0:	40010000 	.word	0x40010000

0800b1d4 <TIM_CCxChannelCmd>:
	assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800b1d4:	4b1e      	ldr	r3, [pc, #120]	; (800b250 <TIM_CCxChannelCmd+0x7c>)
 800b1d6:	4298      	cmp	r0, r3
{
 800b1d8:	b570      	push	{r4, r5, r6, lr}
 800b1da:	4604      	mov	r4, r0
 800b1dc:	460e      	mov	r6, r1
 800b1de:	4615      	mov	r5, r2
	assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800b1e0:	d01f      	beq.n	800b222 <TIM_CCxChannelCmd+0x4e>
 800b1e2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b1e6:	d01c      	beq.n	800b222 <TIM_CCxChannelCmd+0x4e>
 800b1e8:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 800b1ec:	4298      	cmp	r0, r3
 800b1ee:	d018      	beq.n	800b222 <TIM_CCxChannelCmd+0x4e>
 800b1f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b1f4:	4298      	cmp	r0, r3
 800b1f6:	d014      	beq.n	800b222 <TIM_CCxChannelCmd+0x4e>
 800b1f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b1fc:	4298      	cmp	r0, r3
 800b1fe:	d010      	beq.n	800b222 <TIM_CCxChannelCmd+0x4e>
 800b200:	f503 339a 	add.w	r3, r3, #78848	; 0x13400
 800b204:	4298      	cmp	r0, r3
 800b206:	d00c      	beq.n	800b222 <TIM_CCxChannelCmd+0x4e>
 800b208:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b20c:	4298      	cmp	r0, r3
 800b20e:	d008      	beq.n	800b222 <TIM_CCxChannelCmd+0x4e>
 800b210:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b214:	4298      	cmp	r0, r3
 800b216:	d004      	beq.n	800b222 <TIM_CCxChannelCmd+0x4e>
 800b218:	f241 11d9 	movw	r1, #4569	; 0x11d9
 800b21c:	480d      	ldr	r0, [pc, #52]	; (800b254 <TIM_CCxChannelCmd+0x80>)
 800b21e:	f001 fc97 	bl	800cb50 <assert_failed>
	assert_param(IS_TIM_CHANNELS(Channel));
 800b222:	2e18      	cmp	r6, #24
 800b224:	d803      	bhi.n	800b22e <TIM_CCxChannelCmd+0x5a>
 800b226:	4b0c      	ldr	r3, [pc, #48]	; (800b258 <TIM_CCxChannelCmd+0x84>)
 800b228:	40f3      	lsrs	r3, r6
 800b22a:	07db      	lsls	r3, r3, #31
 800b22c:	d404      	bmi.n	800b238 <TIM_CCxChannelCmd+0x64>
 800b22e:	f241 11da 	movw	r1, #4570	; 0x11da
 800b232:	4808      	ldr	r0, [pc, #32]	; (800b254 <TIM_CCxChannelCmd+0x80>)
 800b234:	f001 fc8c 	bl	800cb50 <assert_failed>
	TIMx->CCER &= ~tmp;
 800b238:	6a23      	ldr	r3, [r4, #32]
	tmp = TIM_CCER_CC1E << Channel;
 800b23a:	2201      	movs	r2, #1
 800b23c:	40b2      	lsls	r2, r6
	TIMx->CCER &= ~tmp;
 800b23e:	ea23 0302 	bic.w	r3, r3, r2
 800b242:	6223      	str	r3, [r4, #32]
	TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800b244:	6a23      	ldr	r3, [r4, #32]
 800b246:	40b5      	lsls	r5, r6
 800b248:	431d      	orrs	r5, r3
 800b24a:	6225      	str	r5, [r4, #32]
 800b24c:	bd70      	pop	{r4, r5, r6, pc}
 800b24e:	bf00      	nop
 800b250:	40010000 	.word	0x40010000
 800b254:	0801d9c6 	.word	0x0801d9c6
 800b258:	01001111 	.word	0x01001111

0800b25c <HAL_TIM_PWM_Start>:
{
 800b25c:	b538      	push	{r3, r4, r5, lr}
	assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800b25e:	4a20      	ldr	r2, [pc, #128]	; (800b2e0 <HAL_TIM_PWM_Start+0x84>)
 800b260:	6803      	ldr	r3, [r0, #0]
 800b262:	4293      	cmp	r3, r2
{
 800b264:	4605      	mov	r5, r0
 800b266:	460c      	mov	r4, r1
	assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800b268:	d00e      	beq.n	800b288 <HAL_TIM_PWM_Start+0x2c>
 800b26a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b26e:	d00b      	beq.n	800b288 <HAL_TIM_PWM_Start+0x2c>
 800b270:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b274:	4293      	cmp	r3, r2
 800b276:	d007      	beq.n	800b288 <HAL_TIM_PWM_Start+0x2c>
 800b278:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d003      	beq.n	800b288 <HAL_TIM_PWM_Start+0x2c>
 800b280:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b284:	4293      	cmp	r3, r2
 800b286:	d102      	bne.n	800b28e <HAL_TIM_PWM_Start+0x32>
 800b288:	f034 020c 	bics.w	r2, r4, #12
 800b28c:	d005      	beq.n	800b29a <HAL_TIM_PWM_Start+0x3e>
 800b28e:	4a15      	ldr	r2, [pc, #84]	; (800b2e4 <HAL_TIM_PWM_Start+0x88>)
 800b290:	4293      	cmp	r3, r2
 800b292:	d115      	bne.n	800b2c0 <HAL_TIM_PWM_Start+0x64>
 800b294:	f034 0304 	bics.w	r3, r4, #4
 800b298:	d117      	bne.n	800b2ca <HAL_TIM_PWM_Start+0x6e>
	TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b29a:	6828      	ldr	r0, [r5, #0]
 800b29c:	2201      	movs	r2, #1
 800b29e:	4621      	mov	r1, r4
 800b2a0:	f7ff ff98 	bl	800b1d4 <TIM_CCxChannelCmd>
	if (IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET) {
 800b2a4:	682b      	ldr	r3, [r5, #0]
 800b2a6:	4a0e      	ldr	r2, [pc, #56]	; (800b2e0 <HAL_TIM_PWM_Start+0x84>)
 800b2a8:	4293      	cmp	r3, r2
		__HAL_TIM_MOE_ENABLE(htim);
 800b2aa:	bf02      	ittt	eq
 800b2ac:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 800b2ae:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 800b2b2:	645a      	streq	r2, [r3, #68]	; 0x44
	__HAL_TIM_ENABLE(htim);
 800b2b4:	681a      	ldr	r2, [r3, #0]
 800b2b6:	f042 0201 	orr.w	r2, r2, #1
 800b2ba:	601a      	str	r2, [r3, #0]
}
 800b2bc:	2000      	movs	r0, #0
 800b2be:	bd38      	pop	{r3, r4, r5, pc}
	assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800b2c0:	4a09      	ldr	r2, [pc, #36]	; (800b2e8 <HAL_TIM_PWM_Start+0x8c>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d107      	bne.n	800b2d6 <HAL_TIM_PWM_Start+0x7a>
 800b2c6:	2c00      	cmp	r4, #0
 800b2c8:	d0e7      	beq.n	800b29a <HAL_TIM_PWM_Start+0x3e>
 800b2ca:	f240 4136 	movw	r1, #1078	; 0x436
 800b2ce:	4807      	ldr	r0, [pc, #28]	; (800b2ec <HAL_TIM_PWM_Start+0x90>)
 800b2d0:	f001 fc3e 	bl	800cb50 <assert_failed>
 800b2d4:	e7e1      	b.n	800b29a <HAL_TIM_PWM_Start+0x3e>
 800b2d6:	4a06      	ldr	r2, [pc, #24]	; (800b2f0 <HAL_TIM_PWM_Start+0x94>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d1f6      	bne.n	800b2ca <HAL_TIM_PWM_Start+0x6e>
 800b2dc:	e7f3      	b.n	800b2c6 <HAL_TIM_PWM_Start+0x6a>
 800b2de:	bf00      	nop
 800b2e0:	40010000 	.word	0x40010000
 800b2e4:	40014000 	.word	0x40014000
 800b2e8:	40014400 	.word	0x40014400
 800b2ec:	0801d9c6 	.word	0x0801d9c6
 800b2f0:	40014800 	.word	0x40014800

0800b2f4 <HAL_TIM_PWM_Stop>:
{
 800b2f4:	b538      	push	{r3, r4, r5, lr}
	assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800b2f6:	4a2b      	ldr	r2, [pc, #172]	; (800b3a4 <HAL_TIM_PWM_Stop+0xb0>)
 800b2f8:	6803      	ldr	r3, [r0, #0]
 800b2fa:	4293      	cmp	r3, r2
{
 800b2fc:	4604      	mov	r4, r0
 800b2fe:	460d      	mov	r5, r1
	assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800b300:	d00e      	beq.n	800b320 <HAL_TIM_PWM_Stop+0x2c>
 800b302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b306:	d00b      	beq.n	800b320 <HAL_TIM_PWM_Stop+0x2c>
 800b308:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b30c:	4293      	cmp	r3, r2
 800b30e:	d007      	beq.n	800b320 <HAL_TIM_PWM_Stop+0x2c>
 800b310:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b314:	4293      	cmp	r3, r2
 800b316:	d003      	beq.n	800b320 <HAL_TIM_PWM_Stop+0x2c>
 800b318:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d102      	bne.n	800b326 <HAL_TIM_PWM_Stop+0x32>
 800b320:	f035 020c 	bics.w	r2, r5, #12
 800b324:	d005      	beq.n	800b332 <HAL_TIM_PWM_Stop+0x3e>
 800b326:	4a20      	ldr	r2, [pc, #128]	; (800b3a8 <HAL_TIM_PWM_Stop+0xb4>)
 800b328:	4293      	cmp	r3, r2
 800b32a:	d12c      	bne.n	800b386 <HAL_TIM_PWM_Stop+0x92>
 800b32c:	f035 0304 	bics.w	r3, r5, #4
 800b330:	d12e      	bne.n	800b390 <HAL_TIM_PWM_Stop+0x9c>
	TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b332:	2200      	movs	r2, #0
 800b334:	4629      	mov	r1, r5
 800b336:	6820      	ldr	r0, [r4, #0]
 800b338:	f7ff ff4c 	bl	800b1d4 <TIM_CCxChannelCmd>
	if (IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET) {
 800b33c:	6823      	ldr	r3, [r4, #0]
 800b33e:	4a19      	ldr	r2, [pc, #100]	; (800b3a4 <HAL_TIM_PWM_Stop+0xb0>)
 800b340:	4293      	cmp	r3, r2
 800b342:	d10d      	bne.n	800b360 <HAL_TIM_PWM_Stop+0x6c>
		__HAL_TIM_MOE_DISABLE(htim);
 800b344:	6a19      	ldr	r1, [r3, #32]
 800b346:	f241 1211 	movw	r2, #4369	; 0x1111
 800b34a:	4211      	tst	r1, r2
 800b34c:	d108      	bne.n	800b360 <HAL_TIM_PWM_Stop+0x6c>
 800b34e:	6a19      	ldr	r1, [r3, #32]
 800b350:	f240 4244 	movw	r2, #1092	; 0x444
 800b354:	4211      	tst	r1, r2
 800b356:	bf02      	ittt	eq
 800b358:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 800b35a:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 800b35e:	645a      	streq	r2, [r3, #68]	; 0x44
	__HAL_TIM_DISABLE(htim);
 800b360:	6a19      	ldr	r1, [r3, #32]
 800b362:	f241 1211 	movw	r2, #4369	; 0x1111
 800b366:	4211      	tst	r1, r2
 800b368:	d108      	bne.n	800b37c <HAL_TIM_PWM_Stop+0x88>
 800b36a:	6a19      	ldr	r1, [r3, #32]
 800b36c:	f240 4244 	movw	r2, #1092	; 0x444
 800b370:	4211      	tst	r1, r2
 800b372:	bf02      	ittt	eq
 800b374:	681a      	ldreq	r2, [r3, #0]
 800b376:	f022 0201 	biceq.w	r2, r2, #1
 800b37a:	601a      	streq	r2, [r3, #0]
	htim->State = HAL_TIM_STATE_READY;
 800b37c:	2301      	movs	r3, #1
 800b37e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 800b382:	2000      	movs	r0, #0
 800b384:	bd38      	pop	{r3, r4, r5, pc}
	assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800b386:	4a09      	ldr	r2, [pc, #36]	; (800b3ac <HAL_TIM_PWM_Stop+0xb8>)
 800b388:	4293      	cmp	r3, r2
 800b38a:	d107      	bne.n	800b39c <HAL_TIM_PWM_Stop+0xa8>
 800b38c:	2d00      	cmp	r5, #0
 800b38e:	d0d0      	beq.n	800b332 <HAL_TIM_PWM_Stop+0x3e>
 800b390:	f240 4156 	movw	r1, #1110	; 0x456
 800b394:	4806      	ldr	r0, [pc, #24]	; (800b3b0 <HAL_TIM_PWM_Stop+0xbc>)
 800b396:	f001 fbdb 	bl	800cb50 <assert_failed>
 800b39a:	e7ca      	b.n	800b332 <HAL_TIM_PWM_Stop+0x3e>
 800b39c:	4a05      	ldr	r2, [pc, #20]	; (800b3b4 <HAL_TIM_PWM_Stop+0xc0>)
 800b39e:	4293      	cmp	r3, r2
 800b3a0:	d1f6      	bne.n	800b390 <HAL_TIM_PWM_Stop+0x9c>
 800b3a2:	e7f3      	b.n	800b38c <HAL_TIM_PWM_Stop+0x98>
 800b3a4:	40010000 	.word	0x40010000
 800b3a8:	40014000 	.word	0x40014000
 800b3ac:	40014400 	.word	0x40014400
 800b3b0:	0801d9c6 	.word	0x0801d9c6
 800b3b4:	40014800 	.word	0x40014800

0800b3b8 <HAL_TIMEx_MasterConfigSynchronization>:
 *         contains the selected trigger output (TRGO) and the Master/Slave
 *         mode.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 800b3b8:	b538      	push	{r3, r4, r5, lr}
	/* Check the parameters */
	assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800b3ba:	4a27      	ldr	r2, [pc, #156]	; (800b458 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 800b3bc:	6803      	ldr	r3, [r0, #0]
 800b3be:	4293      	cmp	r3, r2
{
 800b3c0:	4604      	mov	r4, r0
 800b3c2:	460d      	mov	r5, r1
	assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800b3c4:	d013      	beq.n	800b3ee <HAL_TIMEx_MasterConfigSynchronization+0x36>
 800b3c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3ca:	d010      	beq.n	800b3ee <HAL_TIMEx_MasterConfigSynchronization+0x36>
 800b3cc:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	d00c      	beq.n	800b3ee <HAL_TIMEx_MasterConfigSynchronization+0x36>
 800b3d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	d008      	beq.n	800b3ee <HAL_TIMEx_MasterConfigSynchronization+0x36>
 800b3dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	d004      	beq.n	800b3ee <HAL_TIMEx_MasterConfigSynchronization+0x36>
 800b3e4:	f240 6129 	movw	r1, #1577	; 0x629
 800b3e8:	481c      	ldr	r0, [pc, #112]	; (800b45c <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 800b3ea:	f001 fbb1 	bl	800cb50 <assert_failed>
	assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800b3ee:	682b      	ldr	r3, [r5, #0]
 800b3f0:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800b3f4:	d006      	beq.n	800b404 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b3f6:	2b40      	cmp	r3, #64	; 0x40
 800b3f8:	d004      	beq.n	800b404 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b3fa:	f240 612a 	movw	r1, #1578	; 0x62a
 800b3fe:	4817      	ldr	r0, [pc, #92]	; (800b45c <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 800b400:	f001 fba6 	bl	800cb50 <assert_failed>
	assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800b404:	686b      	ldr	r3, [r5, #4]
 800b406:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800b40a:	d004      	beq.n	800b416 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 800b40c:	f240 612b 	movw	r1, #1579	; 0x62b
 800b410:	4812      	ldr	r0, [pc, #72]	; (800b45c <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 800b412:	f001 fb9d 	bl	800cb50 <assert_failed>

	__HAL_LOCK(htim);
 800b416:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800b41a:	2b01      	cmp	r3, #1
 800b41c:	f04f 0002 	mov.w	r0, #2
 800b420:	d018      	beq.n	800b454 <HAL_TIMEx_MasterConfigSynchronization+0x9c>

	htim->State = HAL_TIM_STATE_BUSY;

	/* Reset the MMS Bits */
	htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800b422:	6823      	ldr	r3, [r4, #0]
	htim->State = HAL_TIM_STATE_BUSY;
 800b424:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
	htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800b428:	685a      	ldr	r2, [r3, #4]
	/* Select the TRGO source */
	htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 800b42a:	6829      	ldr	r1, [r5, #0]
	htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800b42c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b430:	605a      	str	r2, [r3, #4]
	htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 800b432:	685a      	ldr	r2, [r3, #4]
 800b434:	430a      	orrs	r2, r1
 800b436:	605a      	str	r2, [r3, #4]

	/* Reset the MSM Bit */
	htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800b438:	689a      	ldr	r2, [r3, #8]
	/* Set or Reset the MSM Bit */
	htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800b43a:	6869      	ldr	r1, [r5, #4]
	htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800b43c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b440:	609a      	str	r2, [r3, #8]
	htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800b442:	689a      	ldr	r2, [r3, #8]
 800b444:	430a      	orrs	r2, r1
 800b446:	609a      	str	r2, [r3, #8]

	htim->State = HAL_TIM_STATE_READY;

	__HAL_UNLOCK(htim);
 800b448:	2000      	movs	r0, #0
	htim->State = HAL_TIM_STATE_READY;
 800b44a:	2301      	movs	r3, #1
 800b44c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	__HAL_UNLOCK(htim);
 800b450:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38

	return HAL_OK;
}
 800b454:	bd38      	pop	{r3, r4, r5, pc}
 800b456:	bf00      	nop
 800b458:	40010000 	.word	0x40010000
 800b45c:	0801d9fe 	.word	0x0801d9fe

0800b460 <HAL_TIMEx_CommutationCallback>:
 800b460:	4770      	bx	lr

0800b462 <HAL_TIMEx_BreakCallback>:
 * @param  htim pointer to a TIM_HandleTypeDef structure that contains
 *                the configuration information for TIM module.
 * @retval None
 */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b462:	4770      	bx	lr

0800b464 <UART_EndRxTransfer>:
 * @retval None
 */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
	/* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
	CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b464:	6803      	ldr	r3, [r0, #0]
 800b466:	68da      	ldr	r2, [r3, #12]
 800b468:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b46c:	60da      	str	r2, [r3, #12]
	CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b46e:	695a      	ldr	r2, [r3, #20]
 800b470:	f022 0201 	bic.w	r2, r2, #1
 800b474:	615a      	str	r2, [r3, #20]

	/* At end of Rx process, restore huart->RxState to Ready */
	huart->RxState = HAL_UART_STATE_READY;
 800b476:	2320      	movs	r3, #32
 800b478:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 800b47c:	4770      	bx	lr
	...

0800b480 <UART_SetConfig>:
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
	uint32_t tmpreg = 0x00U;

	/* Check the parameters */
	assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800b480:	6842      	ldr	r2, [r0, #4]
 800b482:	4b9e      	ldr	r3, [pc, #632]	; (800b6fc <UART_SetConfig+0x27c>)
 800b484:	429a      	cmp	r2, r3
{
 800b486:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b48a:	4604      	mov	r4, r0
	assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800b48c:	d904      	bls.n	800b498 <UART_SetConfig+0x18>
 800b48e:	f640 01df 	movw	r1, #2271	; 0x8df
 800b492:	489b      	ldr	r0, [pc, #620]	; (800b700 <UART_SetConfig+0x280>)
 800b494:	f001 fb5c 	bl	800cb50 <assert_failed>
	assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800b498:	68e3      	ldr	r3, [r4, #12]
 800b49a:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800b49e:	d004      	beq.n	800b4aa <UART_SetConfig+0x2a>
 800b4a0:	f44f 610e 	mov.w	r1, #2272	; 0x8e0
 800b4a4:	4896      	ldr	r0, [pc, #600]	; (800b700 <UART_SetConfig+0x280>)
 800b4a6:	f001 fb53 	bl	800cb50 <assert_failed>
	assert_param(IS_UART_PARITY(huart->Init.Parity));
 800b4aa:	6923      	ldr	r3, [r4, #16]
 800b4ac:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800b4b0:	d007      	beq.n	800b4c2 <UART_SetConfig+0x42>
 800b4b2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b4b6:	d004      	beq.n	800b4c2 <UART_SetConfig+0x42>
 800b4b8:	f640 01e1 	movw	r1, #2273	; 0x8e1
 800b4bc:	4890      	ldr	r0, [pc, #576]	; (800b700 <UART_SetConfig+0x280>)
 800b4be:	f001 fb47 	bl	800cb50 <assert_failed>
	assert_param(IS_UART_MODE(huart->Init.Mode));
 800b4c2:	6963      	ldr	r3, [r4, #20]
 800b4c4:	f64f 72f3 	movw	r2, #65523	; 0xfff3
 800b4c8:	4213      	tst	r3, r2
 800b4ca:	d100      	bne.n	800b4ce <UART_SetConfig+0x4e>
 800b4cc:	b923      	cbnz	r3, 800b4d8 <UART_SetConfig+0x58>
 800b4ce:	f640 01e2 	movw	r1, #2274	; 0x8e2
 800b4d2:	488b      	ldr	r0, [pc, #556]	; (800b700 <UART_SetConfig+0x280>)
 800b4d4:	f001 fb3c 	bl	800cb50 <assert_failed>

	/*-------------------------- USART CR2 Configuration -----------------------*/
	tmpreg = huart->Instance->CR2;
 800b4d8:	6826      	ldr	r6, [r4, #0]

	/* Clear STOP[13:12] bits */
	tmpreg &= (uint32_t) ~((uint32_t)USART_CR2_STOP);

	/* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
	tmpreg |= (uint32_t)huart->Init.StopBits;
 800b4da:	68e2      	ldr	r2, [r4, #12]
	tmpreg = huart->Instance->CR2;
 800b4dc:	6933      	ldr	r3, [r6, #16]
	/* Configure the UART Word Length, Parity and mode:
	   Set the M bits according to huart->Init.WordLength value
	   Set PCE and PS bits according to huart->Init.Parity value
	   Set TE and RE bits according to huart->Init.Mode value
	   Set OVER8 bit according to huart->Init.OverSampling value */
	tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b4de:	6920      	ldr	r0, [r4, #16]
 800b4e0:	69e1      	ldr	r1, [r4, #28]
	tmpreg &= (uint32_t) ~((uint32_t)USART_CR2_STOP);
 800b4e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
	tmpreg |= (uint32_t)huart->Init.StopBits;
 800b4e6:	4313      	orrs	r3, r2
	WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800b4e8:	6133      	str	r3, [r6, #16]
	tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b4ea:	68a3      	ldr	r3, [r4, #8]
	tmpreg = huart->Instance->CR1;
 800b4ec:	68f2      	ldr	r2, [r6, #12]
	tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b4ee:	4303      	orrs	r3, r0
 800b4f0:	6960      	ldr	r0, [r4, #20]
	tmpreg &= (uint32_t) ~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800b4f2:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
	tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b4f6:	4303      	orrs	r3, r0
	tmpreg &= (uint32_t) ~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800b4f8:	f022 020c 	bic.w	r2, r2, #12
	tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b4fc:	430b      	orrs	r3, r1
 800b4fe:	4313      	orrs	r3, r2

	/* Write to USART CR1 */
	WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800b500:	60f3      	str	r3, [r6, #12]

	/*-------------------------- USART CR3 Configuration -----------------------*/
	tmpreg = huart->Instance->CR3;
 800b502:	6973      	ldr	r3, [r6, #20]

	/* Clear CTSE and RTSE bits */
	tmpreg &= (uint32_t) ~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));

	/* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
	tmpreg |= huart->Init.HwFlowCtl;
 800b504:	69a2      	ldr	r2, [r4, #24]
	tmpreg &= (uint32_t) ~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800b506:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmpreg |= huart->Init.HwFlowCtl;
 800b50a:	4313      	orrs	r3, r2

	/* Write to USART CR3 */
	WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);

	/* Check the Over Sampling */
	if (huart->Init.OverSampling == UART_OVERSAMPLING_8) {
 800b50c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
	WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800b510:	6173      	str	r3, [r6, #20]
 800b512:	4b7c      	ldr	r3, [pc, #496]	; (800b704 <UART_SetConfig+0x284>)
	if (huart->Init.OverSampling == UART_OVERSAMPLING_8) {
 800b514:	d17c      	bne.n	800b610 <UART_SetConfig+0x190>
		/*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
		if ((huart->Instance == USART1) || (huart->Instance == USART6)) {
 800b516:	429e      	cmp	r6, r3
 800b518:	d003      	beq.n	800b522 <UART_SetConfig+0xa2>
 800b51a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b51e:	429e      	cmp	r6, r3
 800b520:	d144      	bne.n	800b5ac <UART_SetConfig+0x12c>
			huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800b522:	f7fe fbfd 	bl	8009d20 <HAL_RCC_GetPCLK2Freq>
 800b526:	2519      	movs	r5, #25
 800b528:	fb05 f300 	mul.w	r3, r5, r0
 800b52c:	6860      	ldr	r0, [r4, #4]
 800b52e:	f04f 0964 	mov.w	r9, #100	; 0x64
 800b532:	0040      	lsls	r0, r0, #1
 800b534:	fbb3 f3f0 	udiv	r3, r3, r0
 800b538:	fbb3 f3f9 	udiv	r3, r3, r9
 800b53c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b540:	f7fe fbee 	bl	8009d20 <HAL_RCC_GetPCLK2Freq>
 800b544:	6863      	ldr	r3, [r4, #4]
 800b546:	4368      	muls	r0, r5
 800b548:	005b      	lsls	r3, r3, #1
 800b54a:	fbb0 f7f3 	udiv	r7, r0, r3
 800b54e:	f7fe fbe7 	bl	8009d20 <HAL_RCC_GetPCLK2Freq>
 800b552:	6863      	ldr	r3, [r4, #4]
 800b554:	4368      	muls	r0, r5
 800b556:	005b      	lsls	r3, r3, #1
 800b558:	fbb0 f3f3 	udiv	r3, r0, r3
 800b55c:	fbb3 f3f9 	udiv	r3, r3, r9
 800b560:	fb09 7313 	mls	r3, r9, r3, r7
 800b564:	00db      	lsls	r3, r3, #3
 800b566:	3332      	adds	r3, #50	; 0x32
 800b568:	fbb3 f3f9 	udiv	r3, r3, r9
 800b56c:	005b      	lsls	r3, r3, #1
 800b56e:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800b572:	f7fe fbd5 	bl	8009d20 <HAL_RCC_GetPCLK2Freq>
 800b576:	6862      	ldr	r2, [r4, #4]
 800b578:	4368      	muls	r0, r5
 800b57a:	0052      	lsls	r2, r2, #1
 800b57c:	fbb0 faf2 	udiv	sl, r0, r2
 800b580:	f7fe fbce 	bl	8009d20 <HAL_RCC_GetPCLK2Freq>
		if (huart->Instance == USART1) {
			huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
		}
#endif /* USART6 */
		else{
			huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800b584:	6863      	ldr	r3, [r4, #4]
 800b586:	4368      	muls	r0, r5
 800b588:	005b      	lsls	r3, r3, #1
 800b58a:	fbb0 f3f3 	udiv	r3, r0, r3
 800b58e:	fbb3 f3f9 	udiv	r3, r3, r9
 800b592:	fb09 a313 	mls	r3, r9, r3, sl
 800b596:	00db      	lsls	r3, r3, #3
 800b598:	3332      	adds	r3, #50	; 0x32
 800b59a:	fbb3 f3f9 	udiv	r3, r3, r9
 800b59e:	f003 0307 	and.w	r3, r3, #7
 800b5a2:	4443      	add	r3, r8
		if (huart->Instance == USART1) {
			huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
		}
#endif /* USART6 */
		else{
			huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800b5a4:	443b      	add	r3, r7
 800b5a6:	60b3      	str	r3, [r6, #8]
 800b5a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800b5ac:	f7fe fba8 	bl	8009d00 <HAL_RCC_GetPCLK1Freq>
 800b5b0:	2519      	movs	r5, #25
 800b5b2:	fb05 f300 	mul.w	r3, r5, r0
 800b5b6:	6860      	ldr	r0, [r4, #4]
 800b5b8:	f04f 0964 	mov.w	r9, #100	; 0x64
 800b5bc:	0040      	lsls	r0, r0, #1
 800b5be:	fbb3 f3f0 	udiv	r3, r3, r0
 800b5c2:	fbb3 f3f9 	udiv	r3, r3, r9
 800b5c6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b5ca:	f7fe fb99 	bl	8009d00 <HAL_RCC_GetPCLK1Freq>
 800b5ce:	6863      	ldr	r3, [r4, #4]
 800b5d0:	4368      	muls	r0, r5
 800b5d2:	005b      	lsls	r3, r3, #1
 800b5d4:	fbb0 f7f3 	udiv	r7, r0, r3
 800b5d8:	f7fe fb92 	bl	8009d00 <HAL_RCC_GetPCLK1Freq>
 800b5dc:	6863      	ldr	r3, [r4, #4]
 800b5de:	4368      	muls	r0, r5
 800b5e0:	005b      	lsls	r3, r3, #1
 800b5e2:	fbb0 f3f3 	udiv	r3, r0, r3
 800b5e6:	fbb3 f3f9 	udiv	r3, r3, r9
 800b5ea:	fb09 7313 	mls	r3, r9, r3, r7
 800b5ee:	00db      	lsls	r3, r3, #3
 800b5f0:	3332      	adds	r3, #50	; 0x32
 800b5f2:	fbb3 f3f9 	udiv	r3, r3, r9
 800b5f6:	005b      	lsls	r3, r3, #1
 800b5f8:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800b5fc:	f7fe fb80 	bl	8009d00 <HAL_RCC_GetPCLK1Freq>
 800b600:	6862      	ldr	r2, [r4, #4]
 800b602:	4368      	muls	r0, r5
 800b604:	0052      	lsls	r2, r2, #1
 800b606:	fbb0 faf2 	udiv	sl, r0, r2
 800b60a:	f7fe fb79 	bl	8009d00 <HAL_RCC_GetPCLK1Freq>
 800b60e:	e7b9      	b.n	800b584 <UART_SetConfig+0x104>
		if ((huart->Instance == USART1) || (huart->Instance == USART6)) {
 800b610:	429e      	cmp	r6, r3
 800b612:	d002      	beq.n	800b61a <UART_SetConfig+0x19a>
 800b614:	4b3c      	ldr	r3, [pc, #240]	; (800b708 <UART_SetConfig+0x288>)
 800b616:	429e      	cmp	r6, r3
 800b618:	d140      	bne.n	800b69c <UART_SetConfig+0x21c>
			huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800b61a:	f7fe fb81 	bl	8009d20 <HAL_RCC_GetPCLK2Freq>
 800b61e:	6867      	ldr	r7, [r4, #4]
 800b620:	2519      	movs	r5, #25
 800b622:	f04f 0964 	mov.w	r9, #100	; 0x64
 800b626:	fb05 f300 	mul.w	r3, r5, r0
 800b62a:	00bf      	lsls	r7, r7, #2
 800b62c:	fbb3 f3f7 	udiv	r3, r3, r7
 800b630:	fbb3 f3f9 	udiv	r3, r3, r9
 800b634:	011f      	lsls	r7, r3, #4
 800b636:	f7fe fb73 	bl	8009d20 <HAL_RCC_GetPCLK2Freq>
 800b63a:	6863      	ldr	r3, [r4, #4]
 800b63c:	4368      	muls	r0, r5
 800b63e:	009b      	lsls	r3, r3, #2
 800b640:	fbb0 f8f3 	udiv	r8, r0, r3
 800b644:	f7fe fb6c 	bl	8009d20 <HAL_RCC_GetPCLK2Freq>
 800b648:	6863      	ldr	r3, [r4, #4]
 800b64a:	4368      	muls	r0, r5
 800b64c:	009b      	lsls	r3, r3, #2
 800b64e:	fbb0 f3f3 	udiv	r3, r0, r3
 800b652:	fbb3 f3f9 	udiv	r3, r3, r9
 800b656:	fb09 8313 	mls	r3, r9, r3, r8
 800b65a:	011b      	lsls	r3, r3, #4
 800b65c:	3332      	adds	r3, #50	; 0x32
 800b65e:	fbb3 f3f9 	udiv	r3, r3, r9
 800b662:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800b666:	f7fe fb5b 	bl	8009d20 <HAL_RCC_GetPCLK2Freq>
 800b66a:	6862      	ldr	r2, [r4, #4]
 800b66c:	4368      	muls	r0, r5
 800b66e:	0092      	lsls	r2, r2, #2
 800b670:	fbb0 faf2 	udiv	sl, r0, r2
 800b674:	f7fe fb54 	bl	8009d20 <HAL_RCC_GetPCLK2Freq>
			huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800b678:	6863      	ldr	r3, [r4, #4]
 800b67a:	4368      	muls	r0, r5
 800b67c:	009b      	lsls	r3, r3, #2
 800b67e:	fbb0 f3f3 	udiv	r3, r0, r3
 800b682:	fbb3 f3f9 	udiv	r3, r3, r9
 800b686:	fb09 a313 	mls	r3, r9, r3, sl
 800b68a:	011b      	lsls	r3, r3, #4
 800b68c:	3332      	adds	r3, #50	; 0x32
 800b68e:	fbb3 f3f9 	udiv	r3, r3, r9
 800b692:	f003 030f 	and.w	r3, r3, #15
 800b696:	ea43 0308 	orr.w	r3, r3, r8
 800b69a:	e783      	b.n	800b5a4 <UART_SetConfig+0x124>
 800b69c:	f7fe fb30 	bl	8009d00 <HAL_RCC_GetPCLK1Freq>
 800b6a0:	6867      	ldr	r7, [r4, #4]
 800b6a2:	2519      	movs	r5, #25
 800b6a4:	f04f 0964 	mov.w	r9, #100	; 0x64
 800b6a8:	fb05 f300 	mul.w	r3, r5, r0
 800b6ac:	00bf      	lsls	r7, r7, #2
 800b6ae:	fbb3 f3f7 	udiv	r3, r3, r7
 800b6b2:	fbb3 f3f9 	udiv	r3, r3, r9
 800b6b6:	011f      	lsls	r7, r3, #4
 800b6b8:	f7fe fb22 	bl	8009d00 <HAL_RCC_GetPCLK1Freq>
 800b6bc:	6863      	ldr	r3, [r4, #4]
 800b6be:	4368      	muls	r0, r5
 800b6c0:	009b      	lsls	r3, r3, #2
 800b6c2:	fbb0 f8f3 	udiv	r8, r0, r3
 800b6c6:	f7fe fb1b 	bl	8009d00 <HAL_RCC_GetPCLK1Freq>
 800b6ca:	6863      	ldr	r3, [r4, #4]
 800b6cc:	4368      	muls	r0, r5
 800b6ce:	009b      	lsls	r3, r3, #2
 800b6d0:	fbb0 f3f3 	udiv	r3, r0, r3
 800b6d4:	fbb3 f3f9 	udiv	r3, r3, r9
 800b6d8:	fb09 8313 	mls	r3, r9, r3, r8
 800b6dc:	011b      	lsls	r3, r3, #4
 800b6de:	3332      	adds	r3, #50	; 0x32
 800b6e0:	fbb3 f3f9 	udiv	r3, r3, r9
 800b6e4:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800b6e8:	f7fe fb0a 	bl	8009d00 <HAL_RCC_GetPCLK1Freq>
 800b6ec:	6862      	ldr	r2, [r4, #4]
 800b6ee:	4368      	muls	r0, r5
 800b6f0:	0092      	lsls	r2, r2, #2
 800b6f2:	fbb0 faf2 	udiv	sl, r0, r2
 800b6f6:	f7fe fb03 	bl	8009d00 <HAL_RCC_GetPCLK1Freq>
 800b6fa:	e7bd      	b.n	800b678 <UART_SetConfig+0x1f8>
 800b6fc:	00a037a0 	.word	0x00a037a0
 800b700:	0801da39 	.word	0x0801da39
 800b704:	40011000 	.word	0x40011000
 800b708:	40011400 	.word	0x40011400

0800b70c <HAL_MultiProcessor_Init>:
{
 800b70c:	b570      	push	{r4, r5, r6, lr}
 800b70e:	460e      	mov	r6, r1
 800b710:	4615      	mov	r5, r2
	if (huart == NULL) {
 800b712:	4604      	mov	r4, r0
 800b714:	2800      	cmp	r0, #0
 800b716:	d069      	beq.n	800b7ec <HAL_MultiProcessor_Init+0xe0>
	assert_param(IS_UART_INSTANCE(huart->Instance));
 800b718:	6803      	ldr	r3, [r0, #0]
 800b71a:	4a35      	ldr	r2, [pc, #212]	; (800b7f0 <HAL_MultiProcessor_Init+0xe4>)
 800b71c:	4293      	cmp	r3, r2
 800b71e:	d00c      	beq.n	800b73a <HAL_MultiProcessor_Init+0x2e>
 800b720:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 800b724:	4293      	cmp	r3, r2
 800b726:	d008      	beq.n	800b73a <HAL_MultiProcessor_Init+0x2e>
 800b728:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d004      	beq.n	800b73a <HAL_MultiProcessor_Init+0x2e>
 800b730:	f240 11af 	movw	r1, #431	; 0x1af
 800b734:	482f      	ldr	r0, [pc, #188]	; (800b7f4 <HAL_MultiProcessor_Init+0xe8>)
 800b736:	f001 fa0b 	bl	800cb50 <assert_failed>
	assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 800b73a:	f435 6300 	bics.w	r3, r5, #2048	; 0x800
 800b73e:	d004      	beq.n	800b74a <HAL_MultiProcessor_Init+0x3e>
 800b740:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800b744:	482b      	ldr	r0, [pc, #172]	; (800b7f4 <HAL_MultiProcessor_Init+0xe8>)
 800b746:	f001 fa03 	bl	800cb50 <assert_failed>
	assert_param(IS_UART_ADDRESS(Address));
 800b74a:	2e0f      	cmp	r6, #15
 800b74c:	d904      	bls.n	800b758 <HAL_MultiProcessor_Init+0x4c>
 800b74e:	f240 11b1 	movw	r1, #433	; 0x1b1
 800b752:	4828      	ldr	r0, [pc, #160]	; (800b7f4 <HAL_MultiProcessor_Init+0xe8>)
 800b754:	f001 f9fc 	bl	800cb50 <assert_failed>
	assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800b758:	68a3      	ldr	r3, [r4, #8]
 800b75a:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800b75e:	d004      	beq.n	800b76a <HAL_MultiProcessor_Init+0x5e>
 800b760:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 800b764:	4823      	ldr	r0, [pc, #140]	; (800b7f4 <HAL_MultiProcessor_Init+0xe8>)
 800b766:	f001 f9f3 	bl	800cb50 <assert_failed>
	assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800b76a:	69e3      	ldr	r3, [r4, #28]
 800b76c:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800b770:	d004      	beq.n	800b77c <HAL_MultiProcessor_Init+0x70>
 800b772:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b776:	481f      	ldr	r0, [pc, #124]	; (800b7f4 <HAL_MultiProcessor_Init+0xe8>)
 800b778:	f001 f9ea 	bl	800cb50 <assert_failed>
	if (huart->gState == HAL_UART_STATE_RESET) {
 800b77c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800b780:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b784:	b923      	cbnz	r3, 800b790 <HAL_MultiProcessor_Init+0x84>
		huart->Lock = HAL_UNLOCKED;
 800b786:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
		HAL_UART_MspInit(huart);
 800b78a:	4620      	mov	r0, r4
 800b78c:	f001 fd5a 	bl	800d244 <HAL_UART_MspInit>
	__HAL_UART_DISABLE(huart);
 800b790:	6822      	ldr	r2, [r4, #0]
	huart->gState = HAL_UART_STATE_BUSY;
 800b792:	2324      	movs	r3, #36	; 0x24
 800b794:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	__HAL_UART_DISABLE(huart);
 800b798:	68d3      	ldr	r3, [r2, #12]
 800b79a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b79e:	60d3      	str	r3, [r2, #12]
	UART_SetConfig(huart);
 800b7a0:	4620      	mov	r0, r4
 800b7a2:	f7ff fe6d 	bl	800b480 <UART_SetConfig>
	CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b7a6:	6823      	ldr	r3, [r4, #0]
 800b7a8:	691a      	ldr	r2, [r3, #16]
 800b7aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b7ae:	611a      	str	r2, [r3, #16]
	CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b7b0:	695a      	ldr	r2, [r3, #20]
 800b7b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b7b6:	615a      	str	r2, [r3, #20]
	CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 800b7b8:	691a      	ldr	r2, [r3, #16]
 800b7ba:	f022 020f 	bic.w	r2, r2, #15
 800b7be:	611a      	str	r2, [r3, #16]
	SET_BIT(huart->Instance->CR2, Address);
 800b7c0:	691a      	ldr	r2, [r3, #16]
 800b7c2:	4316      	orrs	r6, r2
 800b7c4:	611e      	str	r6, [r3, #16]
	CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 800b7c6:	68da      	ldr	r2, [r3, #12]
 800b7c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b7cc:	60da      	str	r2, [r3, #12]
	SET_BIT(huart->Instance->CR1, WakeUpMethod);
 800b7ce:	68da      	ldr	r2, [r3, #12]
 800b7d0:	4315      	orrs	r5, r2
 800b7d2:	60dd      	str	r5, [r3, #12]
	__HAL_UART_ENABLE(huart);
 800b7d4:	68da      	ldr	r2, [r3, #12]
 800b7d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b7da:	60da      	str	r2, [r3, #12]
	huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7dc:	2000      	movs	r0, #0
	huart->gState = HAL_UART_STATE_READY;
 800b7de:	2320      	movs	r3, #32
	huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7e0:	63e0      	str	r0, [r4, #60]	; 0x3c
	huart->gState = HAL_UART_STATE_READY;
 800b7e2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	huart->RxState = HAL_UART_STATE_READY;
 800b7e6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	return HAL_OK;
 800b7ea:	bd70      	pop	{r4, r5, r6, pc}
		return HAL_ERROR;
 800b7ec:	2001      	movs	r0, #1
}
 800b7ee:	bd70      	pop	{r4, r5, r6, pc}
 800b7f0:	40011000 	.word	0x40011000
 800b7f4:	0801da39 	.word	0x0801da39

0800b7f8 <HAL_UART_Transmit_DMA>:
{
 800b7f8:	b538      	push	{r3, r4, r5, lr}
 800b7fa:	4604      	mov	r4, r0
 800b7fc:	4613      	mov	r3, r2
	if (huart->gState == HAL_UART_STATE_READY) {
 800b7fe:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800b802:	2a20      	cmp	r2, #32
 800b804:	d12a      	bne.n	800b85c <HAL_UART_Transmit_DMA+0x64>
		if ((pData == NULL) || (Size == 0)) {
 800b806:	b339      	cbz	r1, 800b858 <HAL_UART_Transmit_DMA+0x60>
 800b808:	b333      	cbz	r3, 800b858 <HAL_UART_Transmit_DMA+0x60>
		__HAL_LOCK(huart);
 800b80a:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 800b80e:	2a01      	cmp	r2, #1
 800b810:	d024      	beq.n	800b85c <HAL_UART_Transmit_DMA+0x64>
 800b812:	2201      	movs	r2, #1
 800b814:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
		huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b818:	6b20      	ldr	r0, [r4, #48]	; 0x30
		huart->TxXferCount = Size;
 800b81a:	84e3      	strh	r3, [r4, #38]	; 0x26
		huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b81c:	2500      	movs	r5, #0
		huart->gState = HAL_UART_STATE_BUSY_TX;
 800b81e:	2221      	movs	r2, #33	; 0x21
		huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b820:	63e5      	str	r5, [r4, #60]	; 0x3c
		huart->gState = HAL_UART_STATE_BUSY_TX;
 800b822:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
		huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b826:	4a0e      	ldr	r2, [pc, #56]	; (800b860 <HAL_UART_Transmit_DMA+0x68>)
		huart->TxXferSize = Size;
 800b828:	84a3      	strh	r3, [r4, #36]	; 0x24
		huart->pTxBuffPtr = pData;
 800b82a:	6221      	str	r1, [r4, #32]
		huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b82c:	63c2      	str	r2, [r0, #60]	; 0x3c
		huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b82e:	4a0d      	ldr	r2, [pc, #52]	; (800b864 <HAL_UART_Transmit_DMA+0x6c>)
 800b830:	6402      	str	r2, [r0, #64]	; 0x40
		huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b832:	4a0d      	ldr	r2, [pc, #52]	; (800b868 <HAL_UART_Transmit_DMA+0x70>)
 800b834:	64c2      	str	r2, [r0, #76]	; 0x4c
		HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 800b836:	6822      	ldr	r2, [r4, #0]
		huart->hdmatx->XferAbortCallback = NULL;
 800b838:	6505      	str	r5, [r0, #80]	; 0x50
		HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 800b83a:	3204      	adds	r2, #4
 800b83c:	f7fc f846 	bl	80078cc <HAL_DMA_Start_IT>
		__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800b840:	6823      	ldr	r3, [r4, #0]
 800b842:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b846:	601a      	str	r2, [r3, #0]
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b848:	695a      	ldr	r2, [r3, #20]
		__HAL_UNLOCK(huart);
 800b84a:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b84e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b852:	615a      	str	r2, [r3, #20]
		return HAL_OK;
 800b854:	4628      	mov	r0, r5
 800b856:	bd38      	pop	{r3, r4, r5, pc}
			return HAL_ERROR;
 800b858:	2001      	movs	r0, #1
 800b85a:	bd38      	pop	{r3, r4, r5, pc}
		return HAL_BUSY;
 800b85c:	2002      	movs	r0, #2
}
 800b85e:	bd38      	pop	{r3, r4, r5, pc}
 800b860:	0800b8fd 	.word	0x0800b8fd
 800b864:	0800b92b 	.word	0x0800b92b
 800b868:	0800b9ef 	.word	0x0800b9ef

0800b86c <HAL_UART_Receive_DMA>:
{
 800b86c:	4613      	mov	r3, r2
	if (huart->RxState == HAL_UART_STATE_READY) {
 800b86e:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 800b872:	2a20      	cmp	r2, #32
{
 800b874:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b876:	4605      	mov	r5, r0
	if (huart->RxState == HAL_UART_STATE_READY) {
 800b878:	d138      	bne.n	800b8ec <HAL_UART_Receive_DMA+0x80>
		if ((pData == NULL) || (Size == 0)) {
 800b87a:	2900      	cmp	r1, #0
 800b87c:	d034      	beq.n	800b8e8 <HAL_UART_Receive_DMA+0x7c>
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d032      	beq.n	800b8e8 <HAL_UART_Receive_DMA+0x7c>
		__HAL_LOCK(huart);
 800b882:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800b886:	2a01      	cmp	r2, #1
 800b888:	d030      	beq.n	800b8ec <HAL_UART_Receive_DMA+0x80>
 800b88a:	2201      	movs	r2, #1
		huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b88c:	2400      	movs	r4, #0
		__HAL_LOCK(huart);
 800b88e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b892:	2222      	movs	r2, #34	; 0x22
		huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b894:	63c4      	str	r4, [r0, #60]	; 0x3c
		huart->pRxBuffPtr = pData;
 800b896:	6281      	str	r1, [r0, #40]	; 0x28
		huart->RxXferSize = Size;
 800b898:	8583      	strh	r3, [r0, #44]	; 0x2c
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b89a:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
		huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b89e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800b8a0:	4a13      	ldr	r2, [pc, #76]	; (800b8f0 <HAL_UART_Receive_DMA+0x84>)
 800b8a2:	63c2      	str	r2, [r0, #60]	; 0x3c
		HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 800b8a4:	682e      	ldr	r6, [r5, #0]
		huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b8a6:	4a13      	ldr	r2, [pc, #76]	; (800b8f4 <HAL_UART_Receive_DMA+0x88>)
 800b8a8:	6402      	str	r2, [r0, #64]	; 0x40
		huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b8aa:	4a13      	ldr	r2, [pc, #76]	; (800b8f8 <HAL_UART_Receive_DMA+0x8c>)
 800b8ac:	64c2      	str	r2, [r0, #76]	; 0x4c
		huart->hdmarx->XferAbortCallback = NULL;
 800b8ae:	6504      	str	r4, [r0, #80]	; 0x50
		HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 800b8b0:	460a      	mov	r2, r1
 800b8b2:	1d31      	adds	r1, r6, #4
 800b8b4:	f7fc f80a 	bl	80078cc <HAL_DMA_Start_IT>
		__HAL_UART_CLEAR_OREFLAG(huart);
 800b8b8:	682b      	ldr	r3, [r5, #0]
 800b8ba:	9401      	str	r4, [sp, #4]
 800b8bc:	681a      	ldr	r2, [r3, #0]
 800b8be:	9201      	str	r2, [sp, #4]
 800b8c0:	685a      	ldr	r2, [r3, #4]
 800b8c2:	9201      	str	r2, [sp, #4]
 800b8c4:	9a01      	ldr	r2, [sp, #4]
		SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b8c6:	68da      	ldr	r2, [r3, #12]
		__HAL_UNLOCK(huart);
 800b8c8:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
		SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b8cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b8d0:	60da      	str	r2, [r3, #12]
		SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8d2:	695a      	ldr	r2, [r3, #20]
 800b8d4:	f042 0201 	orr.w	r2, r2, #1
 800b8d8:	615a      	str	r2, [r3, #20]
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8da:	695a      	ldr	r2, [r3, #20]
 800b8dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b8e0:	615a      	str	r2, [r3, #20]
		return HAL_OK;
 800b8e2:	4620      	mov	r0, r4
}
 800b8e4:	b002      	add	sp, #8
 800b8e6:	bd70      	pop	{r4, r5, r6, pc}
			return HAL_ERROR;
 800b8e8:	2001      	movs	r0, #1
 800b8ea:	e7fb      	b.n	800b8e4 <HAL_UART_Receive_DMA+0x78>
		return HAL_BUSY;
 800b8ec:	2002      	movs	r0, #2
 800b8ee:	e7f9      	b.n	800b8e4 <HAL_UART_Receive_DMA+0x78>
 800b8f0:	0800b935 	.word	0x0800b935
 800b8f4:	0800b9e3 	.word	0x0800b9e3
 800b8f8:	0800b9ef 	.word	0x0800b9ef

0800b8fc <UART_DMATransmitCplt>:
{
 800b8fc:	b508      	push	{r3, lr}
	if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U) {
 800b8fe:	6803      	ldr	r3, [r0, #0]
	UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800b900:	6b82      	ldr	r2, [r0, #56]	; 0x38
	if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U) {
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800b908:	d10a      	bne.n	800b920 <UART_DMATransmitCplt+0x24>
		huart->TxXferCount = 0U;
 800b90a:	84d3      	strh	r3, [r2, #38]	; 0x26
		CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b90c:	6813      	ldr	r3, [r2, #0]
 800b90e:	695a      	ldr	r2, [r3, #20]
 800b910:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b914:	615a      	str	r2, [r3, #20]
		SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b916:	68da      	ldr	r2, [r3, #12]
 800b918:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b91c:	60da      	str	r2, [r3, #12]
 800b91e:	bd08      	pop	{r3, pc}
		HAL_UART_TxCpltCallback(huart);
 800b920:	4610      	mov	r0, r2
 800b922:	f000 fa7d 	bl	800be20 <HAL_UART_TxCpltCallback>
 800b926:	bd08      	pop	{r3, pc}

0800b928 <HAL_UART_TxHalfCpltCallback>:
 800b928:	4770      	bx	lr

0800b92a <UART_DMATxHalfCplt>:
{
 800b92a:	b508      	push	{r3, lr}
	HAL_UART_TxHalfCpltCallback(huart);
 800b92c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800b92e:	f7ff fffb 	bl	800b928 <HAL_UART_TxHalfCpltCallback>
 800b932:	bd08      	pop	{r3, pc}

0800b934 <UART_DMAReceiveCplt>:
{
 800b934:	b508      	push	{r3, lr}
	if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U) {
 800b936:	6803      	ldr	r3, [r0, #0]
	UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800b938:	6b82      	ldr	r2, [r0, #56]	; 0x38
	if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U) {
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800b940:	d110      	bne.n	800b964 <UART_DMAReceiveCplt+0x30>
		huart->RxXferCount = 0U;
 800b942:	85d3      	strh	r3, [r2, #46]	; 0x2e
		CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b944:	6813      	ldr	r3, [r2, #0]
 800b946:	68d9      	ldr	r1, [r3, #12]
 800b948:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800b94c:	60d9      	str	r1, [r3, #12]
		CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b94e:	6959      	ldr	r1, [r3, #20]
 800b950:	f021 0101 	bic.w	r1, r1, #1
 800b954:	6159      	str	r1, [r3, #20]
		CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b956:	6959      	ldr	r1, [r3, #20]
 800b958:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800b95c:	6159      	str	r1, [r3, #20]
		huart->RxState = HAL_UART_STATE_READY;
 800b95e:	2320      	movs	r3, #32
 800b960:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
	HAL_UART_RxCpltCallback(huart);
 800b964:	4610      	mov	r0, r2
 800b966:	f000 fa71 	bl	800be4c <HAL_UART_RxCpltCallback>
 800b96a:	bd08      	pop	{r3, pc}

0800b96c <UART_Receive_IT>:
	if (huart->RxState == HAL_UART_STATE_BUSY_RX) {
 800b96c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800b970:	2b22      	cmp	r3, #34	; 0x22
{
 800b972:	b510      	push	{r4, lr}
	if (huart->RxState == HAL_UART_STATE_BUSY_RX) {
 800b974:	d132      	bne.n	800b9dc <UART_Receive_IT+0x70>
		if (huart->Init.WordLength == UART_WORDLENGTH_9B) {
 800b976:	6883      	ldr	r3, [r0, #8]
 800b978:	6901      	ldr	r1, [r0, #16]
 800b97a:	6802      	ldr	r2, [r0, #0]
 800b97c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b980:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b982:	d11f      	bne.n	800b9c4 <UART_Receive_IT+0x58>
				*tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b984:	6852      	ldr	r2, [r2, #4]
			if (huart->Init.Parity == UART_PARITY_NONE) {
 800b986:	b9c9      	cbnz	r1, 800b9bc <UART_Receive_IT+0x50>
				*tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b988:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b98c:	f823 2b02 	strh.w	r2, [r3], #2
				huart->pRxBuffPtr += 1U;
 800b990:	6283      	str	r3, [r0, #40]	; 0x28
		if (--huart->RxXferCount == 0U) {
 800b992:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 800b994:	3c01      	subs	r4, #1
 800b996:	b2a4      	uxth	r4, r4
 800b998:	85c4      	strh	r4, [r0, #46]	; 0x2e
 800b99a:	b96c      	cbnz	r4, 800b9b8 <UART_Receive_IT+0x4c>
			CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b99c:	6803      	ldr	r3, [r0, #0]
 800b99e:	68da      	ldr	r2, [r3, #12]
 800b9a0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b9a4:	60da      	str	r2, [r3, #12]
			CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9a6:	695a      	ldr	r2, [r3, #20]
 800b9a8:	f022 0201 	bic.w	r2, r2, #1
 800b9ac:	615a      	str	r2, [r3, #20]
			huart->RxState = HAL_UART_STATE_READY;
 800b9ae:	2320      	movs	r3, #32
 800b9b0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
			HAL_UART_RxCpltCallback(huart);
 800b9b4:	f000 fa4a 	bl	800be4c <HAL_UART_RxCpltCallback>
		if (--huart->RxXferCount == 0U) {
 800b9b8:	2000      	movs	r0, #0
}
 800b9ba:	bd10      	pop	{r4, pc}
				*tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800b9bc:	b2d2      	uxtb	r2, r2
 800b9be:	f823 2b01 	strh.w	r2, [r3], #1
 800b9c2:	e7e5      	b.n	800b990 <UART_Receive_IT+0x24>
			if (huart->Init.Parity == UART_PARITY_NONE) {
 800b9c4:	b921      	cbnz	r1, 800b9d0 <UART_Receive_IT+0x64>
				*huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b9c6:	1c59      	adds	r1, r3, #1
 800b9c8:	6852      	ldr	r2, [r2, #4]
 800b9ca:	6281      	str	r1, [r0, #40]	; 0x28
				*huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b9cc:	701a      	strb	r2, [r3, #0]
 800b9ce:	e7e0      	b.n	800b992 <UART_Receive_IT+0x26>
 800b9d0:	6852      	ldr	r2, [r2, #4]
 800b9d2:	1c59      	adds	r1, r3, #1
 800b9d4:	6281      	str	r1, [r0, #40]	; 0x28
 800b9d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b9da:	e7f7      	b.n	800b9cc <UART_Receive_IT+0x60>
		return HAL_BUSY;
 800b9dc:	2002      	movs	r0, #2
 800b9de:	bd10      	pop	{r4, pc}

0800b9e0 <HAL_UART_RxHalfCpltCallback>:
 800b9e0:	4770      	bx	lr

0800b9e2 <UART_DMARxHalfCplt>:
{
 800b9e2:	b508      	push	{r3, lr}
	HAL_UART_RxHalfCpltCallback(huart);
 800b9e4:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800b9e6:	f7ff fffb 	bl	800b9e0 <HAL_UART_RxHalfCpltCallback>
 800b9ea:	bd08      	pop	{r3, pc}

0800b9ec <HAL_UART_ErrorCallback>:
 800b9ec:	4770      	bx	lr

0800b9ee <UART_DMAError>:
	UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800b9ee:	6b81      	ldr	r1, [r0, #56]	; 0x38
{
 800b9f0:	b508      	push	{r3, lr}
	dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b9f2:	680b      	ldr	r3, [r1, #0]
 800b9f4:	695a      	ldr	r2, [r3, #20]
	if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest) {
 800b9f6:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 800b9fa:	2821      	cmp	r0, #33	; 0x21
 800b9fc:	d10a      	bne.n	800ba14 <UART_DMAError+0x26>
 800b9fe:	0612      	lsls	r2, r2, #24
 800ba00:	d508      	bpl.n	800ba14 <UART_DMAError+0x26>
		huart->TxXferCount = 0U;
 800ba02:	2200      	movs	r2, #0
 800ba04:	84ca      	strh	r2, [r1, #38]	; 0x26
	CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ba06:	68da      	ldr	r2, [r3, #12]
 800ba08:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800ba0c:	60da      	str	r2, [r3, #12]
	huart->gState = HAL_UART_STATE_READY;
 800ba0e:	2220      	movs	r2, #32
 800ba10:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
	dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ba14:	695b      	ldr	r3, [r3, #20]
	if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest) {
 800ba16:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 800ba1a:	2a22      	cmp	r2, #34	; 0x22
 800ba1c:	d106      	bne.n	800ba2c <UART_DMAError+0x3e>
 800ba1e:	065b      	lsls	r3, r3, #25
 800ba20:	d504      	bpl.n	800ba2c <UART_DMAError+0x3e>
		huart->RxXferCount = 0U;
 800ba22:	2300      	movs	r3, #0
 800ba24:	85cb      	strh	r3, [r1, #46]	; 0x2e
		UART_EndRxTransfer(huart);
 800ba26:	4608      	mov	r0, r1
 800ba28:	f7ff fd1c 	bl	800b464 <UART_EndRxTransfer>
	huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ba2c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800ba2e:	f043 0310 	orr.w	r3, r3, #16
 800ba32:	63cb      	str	r3, [r1, #60]	; 0x3c
	HAL_UART_ErrorCallback(huart);
 800ba34:	4608      	mov	r0, r1
 800ba36:	f7ff ffd9 	bl	800b9ec <HAL_UART_ErrorCallback>
 800ba3a:	bd08      	pop	{r3, pc}

0800ba3c <HAL_UART_IRQHandler>:
	uint32_t isrflags = READ_REG(huart->Instance->SR);
 800ba3c:	6803      	ldr	r3, [r0, #0]
 800ba3e:	681a      	ldr	r2, [r3, #0]
	uint32_t cr1its = READ_REG(huart->Instance->CR1);
 800ba40:	68d9      	ldr	r1, [r3, #12]
{
 800ba42:	b570      	push	{r4, r5, r6, lr}
	if (errorflags == RESET) {
 800ba44:	0716      	lsls	r6, r2, #28
{
 800ba46:	4604      	mov	r4, r0
	uint32_t cr3its = READ_REG(huart->Instance->CR3);
 800ba48:	695d      	ldr	r5, [r3, #20]
	if (errorflags == RESET) {
 800ba4a:	d107      	bne.n	800ba5c <HAL_UART_IRQHandler+0x20>
		if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET)) {
 800ba4c:	0696      	lsls	r6, r2, #26
 800ba4e:	d55a      	bpl.n	800bb06 <HAL_UART_IRQHandler+0xca>
 800ba50:	068d      	lsls	r5, r1, #26
 800ba52:	d558      	bpl.n	800bb06 <HAL_UART_IRQHandler+0xca>
}
 800ba54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			UART_Receive_IT(huart);
 800ba58:	f7ff bf88 	b.w	800b96c <UART_Receive_IT>
	if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET))) {
 800ba5c:	f015 0501 	ands.w	r5, r5, #1
 800ba60:	d102      	bne.n	800ba68 <HAL_UART_IRQHandler+0x2c>
 800ba62:	f411 7f90 	tst.w	r1, #288	; 0x120
 800ba66:	d04e      	beq.n	800bb06 <HAL_UART_IRQHandler+0xca>
		if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET)) {
 800ba68:	07d3      	lsls	r3, r2, #31
 800ba6a:	d505      	bpl.n	800ba78 <HAL_UART_IRQHandler+0x3c>
 800ba6c:	05ce      	lsls	r6, r1, #23
			huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ba6e:	bf42      	ittt	mi
 800ba70:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 800ba72:	f043 0301 	orrmi.w	r3, r3, #1
 800ba76:	63e3      	strmi	r3, [r4, #60]	; 0x3c
		if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET)) {
 800ba78:	0750      	lsls	r0, r2, #29
 800ba7a:	d504      	bpl.n	800ba86 <HAL_UART_IRQHandler+0x4a>
 800ba7c:	b11d      	cbz	r5, 800ba86 <HAL_UART_IRQHandler+0x4a>
			huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ba7e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ba80:	f043 0302 	orr.w	r3, r3, #2
 800ba84:	63e3      	str	r3, [r4, #60]	; 0x3c
		if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET)) {
 800ba86:	0793      	lsls	r3, r2, #30
 800ba88:	d504      	bpl.n	800ba94 <HAL_UART_IRQHandler+0x58>
 800ba8a:	b11d      	cbz	r5, 800ba94 <HAL_UART_IRQHandler+0x58>
			huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ba8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ba8e:	f043 0304 	orr.w	r3, r3, #4
 800ba92:	63e3      	str	r3, [r4, #60]	; 0x3c
		if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET)) {
 800ba94:	0716      	lsls	r6, r2, #28
 800ba96:	d504      	bpl.n	800baa2 <HAL_UART_IRQHandler+0x66>
 800ba98:	b11d      	cbz	r5, 800baa2 <HAL_UART_IRQHandler+0x66>
			huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ba9a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ba9c:	f043 0308 	orr.w	r3, r3, #8
 800baa0:	63e3      	str	r3, [r4, #60]	; 0x3c
		if (huart->ErrorCode != HAL_UART_ERROR_NONE) {
 800baa2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d066      	beq.n	800bb76 <HAL_UART_IRQHandler+0x13a>
			if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET)) {
 800baa8:	0695      	lsls	r5, r2, #26
 800baaa:	d504      	bpl.n	800bab6 <HAL_UART_IRQHandler+0x7a>
 800baac:	0688      	lsls	r0, r1, #26
 800baae:	d502      	bpl.n	800bab6 <HAL_UART_IRQHandler+0x7a>
				UART_Receive_IT(huart);
 800bab0:	4620      	mov	r0, r4
 800bab2:	f7ff ff5b 	bl	800b96c <UART_Receive_IT>
			dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bab6:	6823      	ldr	r3, [r4, #0]
 800bab8:	695d      	ldr	r5, [r3, #20]
			if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest) {
 800baba:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800babc:	0711      	lsls	r1, r2, #28
				UART_EndRxTransfer(huart);
 800babe:	4620      	mov	r0, r4
			if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest) {
 800bac0:	d402      	bmi.n	800bac8 <HAL_UART_IRQHandler+0x8c>
 800bac2:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800bac6:	d01a      	beq.n	800bafe <HAL_UART_IRQHandler+0xc2>
				UART_EndRxTransfer(huart);
 800bac8:	f7ff fccc 	bl	800b464 <UART_EndRxTransfer>
				if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 800bacc:	6823      	ldr	r3, [r4, #0]
 800bace:	695a      	ldr	r2, [r3, #20]
 800bad0:	0652      	lsls	r2, r2, #25
 800bad2:	d510      	bpl.n	800baf6 <HAL_UART_IRQHandler+0xba>
					CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bad4:	695a      	ldr	r2, [r3, #20]
					if (huart->hdmarx != NULL) {
 800bad6:	6b60      	ldr	r0, [r4, #52]	; 0x34
					CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bad8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800badc:	615a      	str	r2, [r3, #20]
					if (huart->hdmarx != NULL) {
 800bade:	b150      	cbz	r0, 800baf6 <HAL_UART_IRQHandler+0xba>
						huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bae0:	4b25      	ldr	r3, [pc, #148]	; (800bb78 <HAL_UART_IRQHandler+0x13c>)
 800bae2:	6503      	str	r3, [r0, #80]	; 0x50
						if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK) {
 800bae4:	f7fb ff48 	bl	8007978 <HAL_DMA_Abort_IT>
 800bae8:	2800      	cmp	r0, #0
 800baea:	d044      	beq.n	800bb76 <HAL_UART_IRQHandler+0x13a>
							huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800baec:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800baee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
							huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800baf2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800baf4:	4718      	bx	r3
						HAL_UART_ErrorCallback(huart);
 800baf6:	4620      	mov	r0, r4
 800baf8:	f7ff ff78 	bl	800b9ec <HAL_UART_ErrorCallback>
 800bafc:	bd70      	pop	{r4, r5, r6, pc}
				HAL_UART_ErrorCallback(huart);
 800bafe:	f7ff ff75 	bl	800b9ec <HAL_UART_ErrorCallback>
				huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb02:	63e5      	str	r5, [r4, #60]	; 0x3c
 800bb04:	bd70      	pop	{r4, r5, r6, pc}
	if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET)) {
 800bb06:	0616      	lsls	r6, r2, #24
 800bb08:	d527      	bpl.n	800bb5a <HAL_UART_IRQHandler+0x11e>
 800bb0a:	060d      	lsls	r5, r1, #24
 800bb0c:	d525      	bpl.n	800bb5a <HAL_UART_IRQHandler+0x11e>
	if (huart->gState == HAL_UART_STATE_BUSY_TX) {
 800bb0e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800bb12:	2a21      	cmp	r2, #33	; 0x21
 800bb14:	d12f      	bne.n	800bb76 <HAL_UART_IRQHandler+0x13a>
		if (huart->Init.WordLength == UART_WORDLENGTH_9B) {
 800bb16:	68a2      	ldr	r2, [r4, #8]
 800bb18:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800bb1c:	6a22      	ldr	r2, [r4, #32]
 800bb1e:	d117      	bne.n	800bb50 <HAL_UART_IRQHandler+0x114>
			huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bb20:	8811      	ldrh	r1, [r2, #0]
 800bb22:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800bb26:	6059      	str	r1, [r3, #4]
			if (huart->Init.Parity == UART_PARITY_NONE) {
 800bb28:	6921      	ldr	r1, [r4, #16]
 800bb2a:	b979      	cbnz	r1, 800bb4c <HAL_UART_IRQHandler+0x110>
				huart->pTxBuffPtr += 2U;
 800bb2c:	3202      	adds	r2, #2
				huart->pTxBuffPtr += 1U;
 800bb2e:	6222      	str	r2, [r4, #32]
		if (--huart->TxXferCount == 0U) {
 800bb30:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800bb32:	3a01      	subs	r2, #1
 800bb34:	b292      	uxth	r2, r2
 800bb36:	84e2      	strh	r2, [r4, #38]	; 0x26
 800bb38:	b9ea      	cbnz	r2, 800bb76 <HAL_UART_IRQHandler+0x13a>
			CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800bb3a:	68da      	ldr	r2, [r3, #12]
 800bb3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bb40:	60da      	str	r2, [r3, #12]
			SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bb42:	68da      	ldr	r2, [r3, #12]
 800bb44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bb48:	60da      	str	r2, [r3, #12]
 800bb4a:	bd70      	pop	{r4, r5, r6, pc}
				huart->pTxBuffPtr += 1U;
 800bb4c:	3201      	adds	r2, #1
 800bb4e:	e7ee      	b.n	800bb2e <HAL_UART_IRQHandler+0xf2>
			huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bb50:	1c51      	adds	r1, r2, #1
 800bb52:	6221      	str	r1, [r4, #32]
 800bb54:	7812      	ldrb	r2, [r2, #0]
 800bb56:	605a      	str	r2, [r3, #4]
 800bb58:	e7ea      	b.n	800bb30 <HAL_UART_IRQHandler+0xf4>
	if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET)) {
 800bb5a:	0650      	lsls	r0, r2, #25
 800bb5c:	d50b      	bpl.n	800bb76 <HAL_UART_IRQHandler+0x13a>
 800bb5e:	064a      	lsls	r2, r1, #25
 800bb60:	d509      	bpl.n	800bb76 <HAL_UART_IRQHandler+0x13a>
	CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bb62:	68da      	ldr	r2, [r3, #12]
 800bb64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb68:	60da      	str	r2, [r3, #12]
	huart->gState = HAL_UART_STATE_READY;
 800bb6a:	2320      	movs	r3, #32
 800bb6c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	HAL_UART_TxCpltCallback(huart);
 800bb70:	4620      	mov	r0, r4
 800bb72:	f000 f955 	bl	800be20 <HAL_UART_TxCpltCallback>
 800bb76:	bd70      	pop	{r4, r5, r6, pc}
 800bb78:	0800bb7d 	.word	0x0800bb7d

0800bb7c <UART_DMAAbortOnError>:
{
 800bb7c:	b508      	push	{r3, lr}
	UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800bb7e:	6b80      	ldr	r0, [r0, #56]	; 0x38
	huart->RxXferCount = 0U;
 800bb80:	2300      	movs	r3, #0
 800bb82:	85c3      	strh	r3, [r0, #46]	; 0x2e
	huart->TxXferCount = 0U;
 800bb84:	84c3      	strh	r3, [r0, #38]	; 0x26
	HAL_UART_ErrorCallback(huart);
 800bb86:	f7ff ff31 	bl	800b9ec <HAL_UART_ErrorCallback>
 800bb8a:	bd08      	pop	{r3, pc}

0800bb8c <MotionFX_manager_init>:
 * @brief  Initialises MotionFX algorithm
 * @param  None
 * @retval None
 */
void MotionFX_manager_init(void)
{
 800bb8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}

#if ((defined (USE_STM32F4XX_NUCLEO)) || (defined (USE_STM32L4XX_NUCLEO)) || (defined (USE_STM32L1XX_NUCLEO)))

  MotionFX_initialize();

  MotionFX_getKnobs(ipKnobs);
 800bb8e:	4c23      	ldr	r4, [pc, #140]	; (800bc1c <MotionFX_manager_init+0x90>)
  acc_orientation[0] = 'n';
 800bb90:	226e      	movs	r2, #110	; 0x6e
  acc_orientation[2] = 'u';
 800bb92:	2375      	movs	r3, #117	; 0x75
  acc_orientation[1] = 'w';
 800bb94:	2177      	movs	r1, #119	; 0x77
  acc_orientation[0] = 'n';
 800bb96:	f88d 2004 	strb.w	r2, [sp, #4]
  gyro_orientation[0] = 'n';
 800bb9a:	f88d 2008 	strb.w	r2, [sp, #8]
  mag_orientation[0] = 'n';
 800bb9e:	f88d 200c 	strb.w	r2, [sp, #12]
  mag_orientation[1] = 'e';
 800bba2:	2265      	movs	r2, #101	; 0x65
  acc_orientation[2] = 'u';
 800bba4:	f88d 3006 	strb.w	r3, [sp, #6]
  gyro_orientation[2] = 'u';
 800bba8:	f88d 300a 	strb.w	r3, [sp, #10]
  mag_orientation[1] = 'e';
 800bbac:	f88d 200d 	strb.w	r2, [sp, #13]
  mag_orientation[2] = 'u';
 800bbb0:	f88d 300e 	strb.w	r3, [sp, #14]
  acc_orientation[1] = 'w';
 800bbb4:	f88d 1005 	strb.w	r1, [sp, #5]
  gyro_orientation[1] = 'w';
 800bbb8:	f88d 1009 	strb.w	r1, [sp, #9]
  MotionFX_initialize();
 800bbbc:	f00b f994 	bl	8016ee8 <MotionFX_initialize>
  MotionFX_getKnobs(ipKnobs);
 800bbc0:	4620      	mov	r0, r4
 800bbc2:	f00b fc1f 	bl	8017404 <MotionFX_getKnobs>

  (void)strcpy(ipKnobs->acc_orientation, acc_orientation);
 800bbc6:	a901      	add	r1, sp, #4
 800bbc8:	f104 0029 	add.w	r0, r4, #41	; 0x29
 800bbcc:	f010 f875 	bl	801bcba <strcpy>
  (void)strcpy(ipKnobs->gyro_orientation, gyro_orientation);
 800bbd0:	a902      	add	r1, sp, #8
 800bbd2:	f104 002d 	add.w	r0, r4, #45	; 0x2d
 800bbd6:	f010 f870 	bl	801bcba <strcpy>
  (void)strcpy(ipKnobs->mag_orientation, mag_orientation);
 800bbda:	a903      	add	r1, sp, #12
 800bbdc:	f104 0031 	add.w	r0, r4, #49	; 0x31
 800bbe0:	f010 f86b 	bl	801bcba <strcpy>

  ipKnobs->gbias_acc_th_sc_6X = GBIAS_ACC_TH_SC_6X;
  ipKnobs->gbias_gyro_th_sc_6X = GBIAS_GYRO_TH_SC_6X;
  ipKnobs->gbias_mag_th_sc_6X = GBIAS_MAG_TH_SC_6X;
 800bbe4:	4b0e      	ldr	r3, [pc, #56]	; (800bc20 <MotionFX_manager_init+0x94>)
  ipKnobs->gbias_acc_th_sc_6X = GBIAS_ACC_TH_SC_6X;
 800bbe6:	490f      	ldr	r1, [pc, #60]	; (800bc24 <MotionFX_manager_init+0x98>)
  ipKnobs->gbias_gyro_th_sc_6X = GBIAS_GYRO_TH_SC_6X;
 800bbe8:	4a0f      	ldr	r2, [pc, #60]	; (800bc28 <MotionFX_manager_init+0x9c>)
  ipKnobs->gbias_mag_th_sc_6X = GBIAS_MAG_TH_SC_6X;
 800bbea:	6123      	str	r3, [r4, #16]

  ipKnobs->gbias_acc_th_sc_9X = GBIAS_ACC_TH_SC_9X;
  ipKnobs->gbias_gyro_th_sc_9X = GBIAS_GYRO_TH_SC_9X;
  ipKnobs->gbias_mag_th_sc_9X = GBIAS_MAG_TH_SC_9X;
 800bbec:	61e3      	str	r3, [r4, #28]

  ipKnobs->output_type = MFX_ENGINE_OUTPUT_ENU;
  ipKnobs->LMode = 1;
  ipKnobs->modx = DECIMATION;

  MotionFX_setKnobs(ipKnobs);
 800bbee:	4620      	mov	r0, r4
  ipKnobs->output_type = MFX_ENGINE_OUTPUT_ENU;
 800bbf0:	2301      	movs	r3, #1
  ipKnobs->gbias_acc_th_sc_6X = GBIAS_ACC_TH_SC_6X;
 800bbf2:	6161      	str	r1, [r4, #20]
  ipKnobs->gbias_gyro_th_sc_6X = GBIAS_GYRO_TH_SC_6X;
 800bbf4:	61a2      	str	r2, [r4, #24]
  ipKnobs->gbias_acc_th_sc_9X = GBIAS_ACC_TH_SC_9X;
 800bbf6:	6221      	str	r1, [r4, #32]
  ipKnobs->gbias_gyro_th_sc_9X = GBIAS_GYRO_TH_SC_9X;
 800bbf8:	6262      	str	r2, [r4, #36]	; 0x24
  ipKnobs->output_type = MFX_ENGINE_OUTPUT_ENU;
 800bbfa:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  ipKnobs->LMode = 1;
 800bbfe:	7323      	strb	r3, [r4, #12]
  ipKnobs->modx = DECIMATION;
 800bc00:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  MotionFX_setKnobs(ipKnobs);
 800bc04:	f00b fb9a 	bl	801733c <MotionFX_setKnobs>

  MotionFX_enable_6X(MFX_ENGINE_DISABLE);
 800bc08:	2000      	movs	r0, #0
 800bc0a:	f00b fc51 	bl	80174b0 <MotionFX_enable_6X>
  MotionFX_enable_9X(MFX_ENGINE_DISABLE);
 800bc0e:	2000      	movs	r0, #0
  MotionFX_CM0P_enable_euler(MFX_CM0P_ENGINE_ENABLE);
  MotionFX_CM0P_enable_6X(MFX_CM0P_ENGINE_DISABLE);
  MotionFX_CM0P_enable_9X(MFX_CM0P_ENGINE_DISABLE);

#endif
}
 800bc10:	b004      	add	sp, #16
 800bc12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MotionFX_enable_9X(MFX_ENGINE_DISABLE);
 800bc16:	f00b bc6f 	b.w	80174f8 <MotionFX_enable_9X>
 800bc1a:	bf00      	nop
 800bc1c:	200025e4 	.word	0x200025e4
 800bc20:	3b449ba6 	.word	0x3b449ba6
 800bc24:	3ac88a48 	.word	0x3ac88a48
 800bc28:	3b83126f 	.word	0x3b83126f

0800bc2c <MotionFX_manager_run>:
 * @param  None
 * @retval None
 */
#if ((defined (USE_STM32F4XX_NUCLEO)) || (defined (USE_STM32L4XX_NUCLEO)) || (defined (USE_STM32L1XX_NUCLEO)))
void MotionFX_manager_run(MFX_input_t *data_in, MFX_output_t *data_out, float delta_time)
{
 800bc2c:	b538      	push	{r3, r4, r5, lr}
  if (discardedCount == sampleToDiscard)
 800bc2e:	4a10      	ldr	r2, [pc, #64]	; (800bc70 <MotionFX_manager_run+0x44>)
{
 800bc30:	460c      	mov	r4, r1
  if (discardedCount == sampleToDiscard)
 800bc32:	4910      	ldr	r1, [pc, #64]	; (800bc74 <MotionFX_manager_run+0x48>)
 800bc34:	6813      	ldr	r3, [r2, #0]
 800bc36:	6809      	ldr	r1, [r1, #0]
 800bc38:	428b      	cmp	r3, r1
{
 800bc3a:	ed2d 8b02 	vpush	{d8}
 800bc3e:	4605      	mov	r5, r0
 800bc40:	eeb0 8a40 	vmov.f32	s16, s0
  if (discardedCount == sampleToDiscard)
 800bc44:	d10e      	bne.n	800bc64 <MotionFX_manager_run+0x38>
  {
    MotionFX_propagate(data_out, data_in, delta_time);
 800bc46:	4601      	mov	r1, r0
 800bc48:	4620      	mov	r0, r4
 800bc4a:	f00b fe51 	bl	80178f0 <MotionFX_propagate>
    MotionFX_update(data_out, data_in, delta_time, NULL);
 800bc4e:	eeb0 0a48 	vmov.f32	s0, s16
  }
  else
  {
    discardedCount++;
  }
}
 800bc52:	ecbd 8b02 	vpop	{d8}
    MotionFX_update(data_out, data_in, delta_time, NULL);
 800bc56:	4629      	mov	r1, r5
 800bc58:	4620      	mov	r0, r4
 800bc5a:	2200      	movs	r2, #0
}
 800bc5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    MotionFX_update(data_out, data_in, delta_time, NULL);
 800bc60:	f00b bc76 	b.w	8017550 <MotionFX_update>
}
 800bc64:	ecbd 8b02 	vpop	{d8}
    discardedCount++;
 800bc68:	3301      	adds	r3, #1
 800bc6a:	6013      	str	r3, [r2, #0]
}
 800bc6c:	bd38      	pop	{r3, r4, r5, pc}
 800bc6e:	bf00      	nop
 800bc70:	200025e0 	.word	0x200025e0
 800bc74:	20001484 	.word	0x20001484

0800bc78 <MotionFX_manager_get_version>:
 * @param  version  Library version string (must be array of 35 char)
 * @param  length  Library version string length
 * @retval None
 */
void MotionFX_manager_get_version(char *version, int *length)
{
 800bc78:	b510      	push	{r4, lr}
 800bc7a:	460c      	mov	r4, r1
#if ((defined (USE_STM32F4XX_NUCLEO)) || (defined (USE_STM32L4XX_NUCLEO)) || (defined (USE_STM32L1XX_NUCLEO)))
  *length = (int)MotionFX_GetLibVersion(version);
 800bc7c:	f00d f81a 	bl	8018cb4 <MotionFX_GetLibVersion>
 800bc80:	6020      	str	r0, [r4, #0]
 800bc82:	bd10      	pop	{r4, pc}

0800bc84 <MotionFX_manager_MagCal_run>:
 * @param  None
 * @retval None
 */
#if ((defined (USE_STM32F4XX_NUCLEO)) || (defined (USE_STM32L4XX_NUCLEO)) || (defined (USE_STM32L1XX_NUCLEO)))
void MotionFX_manager_MagCal_run(MFX_MagCal_input_t *data_in, MFX_MagCal_output_t *data_out)
{
 800bc84:	b510      	push	{r4, lr}
 800bc86:	460c      	mov	r4, r1
  MotionFX_MagCal_run(data_in);
 800bc88:	f00c fec8 	bl	8018a1c <MotionFX_MagCal_run>
  MotionFX_MagCal_getParams(data_out);
 800bc8c:	4620      	mov	r0, r4
}
 800bc8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MotionFX_MagCal_getParams(data_out);
 800bc92:	f00c bfe1 	b.w	8018c58 <MotionFX_MagCal_getParams>

0800bc96 <MotionFX_manager_MagCal_start>:
 * @retval None
 */
void MotionFX_manager_MagCal_start(int sampletime)
{
#if ((defined (USE_STM32F4XX_NUCLEO)) || (defined (USE_STM32L4XX_NUCLEO)) || (defined (USE_STM32L1XX_NUCLEO)))
  MotionFX_MagCal_init(sampletime, 1);
 800bc96:	2101      	movs	r1, #1
 800bc98:	f00c bdc2 	b.w	8018820 <MotionFX_MagCal_init>

0800bc9c <MotionFX_manager_MagCal_stop>:
 * @retval None
 */
void MotionFX_manager_MagCal_stop(int sampletime)
{
#if ((defined (USE_STM32F4XX_NUCLEO)) || (defined (USE_STM32L4XX_NUCLEO)) || (defined (USE_STM32L1XX_NUCLEO)))
  MotionFX_MagCal_init(sampletime, 0);
 800bc9c:	2100      	movs	r1, #0
 800bc9e:	f00c bdbf 	b.w	8018820 <MotionFX_MagCal_init>

0800bca2 <MotionFX_LoadMagCalFromNVM>:
 800bca2:	2001      	movs	r0, #1
 800bca4:	4770      	bx	lr

0800bca6 <MotionFX_SaveMagCalInNVM>:
  SaveCalibrationToMemory(dataSize / 4, (uint32_t *) data);
  return (char)0;
#else
  return (char)1;
#endif
}
 800bca6:	2001      	movs	r0, #1
 800bca8:	4770      	bx	lr
	...

0800bcac <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800bcac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800bcae:	2210      	movs	r2, #16
 800bcb0:	2100      	movs	r1, #0
 800bcb2:	4668      	mov	r0, sp
 800bcb4:	f00f f963 	bl	801af7e <memset>

	/**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800bcb8:	4812      	ldr	r0, [pc, #72]	; (800bd04 <MX_ADC1_Init+0x58>)
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800bcba:	4b13      	ldr	r3, [pc, #76]	; (800bd08 <MX_ADC1_Init+0x5c>)
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
	hadc1.Init.ScanConvMode = DISABLE;
	hadc1.Init.ContinuousConvMode = DISABLE;
	hadc1.Init.DiscontinuousConvMode = DISABLE;
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800bcbc:	4a13      	ldr	r2, [pc, #76]	; (800bd0c <MX_ADC1_Init+0x60>)
 800bcbe:	6282      	str	r2, [r0, #40]	; 0x28
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800bcc0:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800bcc4:	e880 0018 	stmia.w	r0, {r3, r4}
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800bcc8:	2300      	movs	r3, #0
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	hadc1.Init.NbrOfConversion = 1;
 800bcca:	2401      	movs	r4, #1
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800bccc:	6083      	str	r3, [r0, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 800bcce:	6103      	str	r3, [r0, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800bcd0:	6183      	str	r3, [r0, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800bcd2:	6203      	str	r3, [r0, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800bcd4:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800bcd6:	60c3      	str	r3, [r0, #12]
	hadc1.Init.NbrOfConversion = 1;
 800bcd8:	61c4      	str	r4, [r0, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800bcda:	6303      	str	r3, [r0, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800bcdc:	6144      	str	r4, [r0, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800bcde:	f7fb f901 	bl	8006ee4 <HAL_ADC_Init>
 800bce2:	b108      	cbz	r0, 800bce8 <MX_ADC1_Init+0x3c>
		Error_Handler();
 800bce4:	f000 fa92 	bl	800c20c <Error_Handler>
	}
	/**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 800bce8:	2306      	movs	r3, #6
	sConfig.Rank = 1;
 800bcea:	e88d 0018 	stmia.w	sp, {r3, r4}
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800bcee:	4669      	mov	r1, sp
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800bcf0:	2300      	movs	r3, #0
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800bcf2:	4804      	ldr	r0, [pc, #16]	; (800bd04 <MX_ADC1_Init+0x58>)
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800bcf4:	9302      	str	r3, [sp, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800bcf6:	f7fb fadb 	bl	80072b0 <HAL_ADC_ConfigChannel>
 800bcfa:	b108      	cbz	r0, 800bd00 <MX_ADC1_Init+0x54>
		Error_Handler();
 800bcfc:	f000 fa86 	bl	800c20c <Error_Handler>
	}
}
 800bd00:	b004      	add	sp, #16
 800bd02:	bd10      	pop	{r4, pc}
 800bd04:	2000288c 	.word	0x2000288c
 800bd08:	40012000 	.word	0x40012000
 800bd0c:	0f000001 	.word	0x0f000001

0800bd10 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800bd10:	b510      	push	{r4, lr}
 800bd12:	4604      	mov	r4, r0
 800bd14:	b088      	sub	sp, #32
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800bd16:	2214      	movs	r2, #20
 800bd18:	2100      	movs	r1, #0
 800bd1a:	a803      	add	r0, sp, #12
 800bd1c:	f00f f92f 	bl	801af7e <memset>
	if (adcHandle->Instance == ADC1) {
 800bd20:	6822      	ldr	r2, [r4, #0]
 800bd22:	4b16      	ldr	r3, [pc, #88]	; (800bd7c <HAL_ADC_MspInit+0x6c>)
 800bd24:	429a      	cmp	r2, r3
 800bd26:	d126      	bne.n	800bd76 <HAL_ADC_MspInit+0x66>
		/* USER CODE BEGIN ADC1_MspInit 0 */

		/* USER CODE END ADC1_MspInit 0 */
		/* ADC1 clock enable */
		__HAL_RCC_ADC1_CLK_ENABLE();
 800bd28:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 800bd2c:	2400      	movs	r4, #0
 800bd2e:	9401      	str	r4, [sp, #4]
 800bd30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
		   PA6     ------> ADC1_IN6
		 */
		GPIO_InitStruct.Pin = ADC6_Pin;
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		HAL_GPIO_Init(ADC6_GPIO_Port, &GPIO_InitStruct);
 800bd32:	4813      	ldr	r0, [pc, #76]	; (800bd80 <HAL_ADC_MspInit+0x70>)
		__HAL_RCC_ADC1_CLK_ENABLE();
 800bd34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bd38:	645a      	str	r2, [r3, #68]	; 0x44
 800bd3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd3c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800bd40:	9201      	str	r2, [sp, #4]
 800bd42:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800bd44:	9402      	str	r4, [sp, #8]
 800bd46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd48:	f042 0201 	orr.w	r2, r2, #1
 800bd4c:	631a      	str	r2, [r3, #48]	; 0x30
 800bd4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd50:	f003 0301 	and.w	r3, r3, #1
 800bd54:	9302      	str	r3, [sp, #8]
 800bd56:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Pin = ADC6_Pin;
 800bd58:	2340      	movs	r3, #64	; 0x40
 800bd5a:	9303      	str	r3, [sp, #12]
		HAL_GPIO_Init(ADC6_GPIO_Port, &GPIO_InitStruct);
 800bd5c:	a903      	add	r1, sp, #12
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bd5e:	2303      	movs	r3, #3
 800bd60:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(ADC6_GPIO_Port, &GPIO_InitStruct);
 800bd62:	f7fb fed5 	bl	8007b10 <HAL_GPIO_Init>

		/* ADC1 interrupt Init */
		HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800bd66:	2012      	movs	r0, #18
 800bd68:	4622      	mov	r2, r4
 800bd6a:	4621      	mov	r1, r4
 800bd6c:	f7fb fb72 	bl	8007454 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(ADC_IRQn);
 800bd70:	2012      	movs	r0, #18
 800bd72:	f7fb fbb1 	bl	80074d8 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN ADC1_MspInit 1 */

		/* USER CODE END ADC1_MspInit 1 */
	}
}
 800bd76:	b008      	add	sp, #32
 800bd78:	bd10      	pop	{r4, pc}
 800bd7a:	bf00      	nop
 800bd7c:	40012000 	.word	0x40012000
 800bd80:	40020000 	.word	0x40020000

0800bd84 <uartSendChar>:
/** @brief Sends a character to serial port
 * @param ch Character to send
 * @retval Character sent
 */
int uartSendChar(int ch)
{
 800bd84:	b537      	push	{r0, r1, r2, r4, r5, lr}
	while ((uart2TXReady == 0) | (uart6TXReady == 0)) {
 800bd86:	4911      	ldr	r1, [pc, #68]	; (800bdcc <uartSendChar+0x48>)
 800bd88:	4a11      	ldr	r2, [pc, #68]	; (800bdd0 <uartSendChar+0x4c>)
{
 800bd8a:	9001      	str	r0, [sp, #4]
 800bd8c:	460c      	mov	r4, r1
 800bd8e:	4615      	mov	r5, r2
	while ((uart2TXReady == 0) | (uart6TXReady == 0)) {
 800bd90:	6808      	ldr	r0, [r1, #0]
 800bd92:	6813      	ldr	r3, [r2, #0]
 800bd94:	2800      	cmp	r0, #0
 800bd96:	d0fb      	beq.n	800bd90 <uartSendChar+0xc>
 800bd98:	fab3 f383 	clz	r3, r3
 800bd9c:	095b      	lsrs	r3, r3, #5
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d1f6      	bne.n	800bd90 <uartSendChar+0xc>
		;
	}

	uart2TXReady = 0;
 800bda2:	600b      	str	r3, [r1, #0]
	uart6TXReady = 0;

	HAL_UART_Transmit_DMA(&huart6, (uint8_t *)&ch, 1);
 800bda4:	480b      	ldr	r0, [pc, #44]	; (800bdd4 <uartSendChar+0x50>)
	uart6TXReady = 0;
 800bda6:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit_DMA(&huart6, (uint8_t *)&ch, 1);
 800bda8:	a901      	add	r1, sp, #4
 800bdaa:	2201      	movs	r2, #1
 800bdac:	f7ff fd24 	bl	800b7f8 <HAL_UART_Transmit_DMA>

	while (uart6TXReady == 0) {
 800bdb0:	682b      	ldr	r3, [r5, #0]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d0fc      	beq.n	800bdb0 <uartSendChar+0x2c>
		;
	}

	HAL_UART_Transmit_DMA(&huart2, (uint8_t *)&ch, 1);
 800bdb6:	2201      	movs	r2, #1
 800bdb8:	a901      	add	r1, sp, #4
 800bdba:	4807      	ldr	r0, [pc, #28]	; (800bdd8 <uartSendChar+0x54>)
 800bdbc:	f7ff fd1c 	bl	800b7f8 <HAL_UART_Transmit_DMA>

	while (uart2TXReady == 0) {
 800bdc0:	6823      	ldr	r3, [r4, #0]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d0fc      	beq.n	800bdc0 <uartSendChar+0x3c>
		;
	}

	return ch;
}
 800bdc6:	9801      	ldr	r0, [sp, #4]
 800bdc8:	b003      	add	sp, #12
 800bdca:	bd30      	pop	{r4, r5, pc}
 800bdcc:	20001488 	.word	0x20001488
 800bdd0:	2000148c 	.word	0x2000148c
 800bdd4:	20003858 	.word	0x20003858
 800bdd8:	2000358c 	.word	0x2000358c

0800bddc <uartReceiveChar>:
 */
int uartReceiveChar(void)
{
	uint8_t ch;

	while (uartRXReady == 0) {
 800bddc:	4b0a      	ldr	r3, [pc, #40]	; (800be08 <uartReceiveChar+0x2c>)
{
 800bdde:	b513      	push	{r0, r1, r4, lr}
 800bde0:	461c      	mov	r4, r3
	while (uartRXReady == 0) {
 800bde2:	681a      	ldr	r2, [r3, #0]
 800bde4:	2a00      	cmp	r2, #0
 800bde6:	d0fc      	beq.n	800bde2 <uartReceiveChar+0x6>
		;
	}

	uartRXReady = 0;
 800bde8:	2200      	movs	r2, #0
 800bdea:	601a      	str	r2, [r3, #0]

	HAL_UART_Receive_DMA(&huart6, &ch, 1);
 800bdec:	f10d 0107 	add.w	r1, sp, #7
 800bdf0:	2201      	movs	r2, #1
 800bdf2:	4806      	ldr	r0, [pc, #24]	; (800be0c <uartReceiveChar+0x30>)
 800bdf4:	f7ff fd3a 	bl	800b86c <HAL_UART_Receive_DMA>

	while (uartRXReady == 0) {
 800bdf8:	6823      	ldr	r3, [r4, #0]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d0fc      	beq.n	800bdf8 <uartReceiveChar+0x1c>
		;
	}

	return ch;
}
 800bdfe:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800be02:	b002      	add	sp, #8
 800be04:	bd10      	pop	{r4, pc}
 800be06:	bf00      	nop
 800be08:	20001490 	.word	0x20001490
 800be0c:	20003858 	.word	0x20003858

0800be10 <__io_putchar>:
/** @brief putchar call for standard output implementation
 * @param ch Character to print
 * @retval Character printed
 */
int __io_putchar(int ch)
{
 800be10:	b508      	push	{r3, lr}
	uartSendChar(ch);
 800be12:	f7ff ffb7 	bl	800bd84 <uartSendChar>

	return 0;
}
 800be16:	2000      	movs	r0, #0
 800be18:	bd08      	pop	{r3, pc}

0800be1a <__io_getchar>:
 * @param None
 * @retval Character acquired from standard input
 */
int __io_getchar(void)
{
	return uartReceiveChar();
 800be1a:	f7ff bfdf 	b.w	800bddc <uartReceiveChar>
	...

0800be20 <HAL_UART_TxCpltCallback>:
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
	/* Set transmission flag: trasfer complete*/

	if (UartHandle->Instance == USART2) uart2TXReady = 1;
 800be20:	6803      	ldr	r3, [r0, #0]
 800be22:	4a06      	ldr	r2, [pc, #24]	; (800be3c <HAL_UART_TxCpltCallback+0x1c>)
 800be24:	4293      	cmp	r3, r2
 800be26:	d103      	bne.n	800be30 <HAL_UART_TxCpltCallback+0x10>
 800be28:	4b05      	ldr	r3, [pc, #20]	; (800be40 <HAL_UART_TxCpltCallback+0x20>)
 800be2a:	2201      	movs	r2, #1
	if (UartHandle->Instance == USART6) uart6TXReady = 1;
 800be2c:	601a      	str	r2, [r3, #0]
 800be2e:	4770      	bx	lr
 800be30:	4a04      	ldr	r2, [pc, #16]	; (800be44 <HAL_UART_TxCpltCallback+0x24>)
 800be32:	4293      	cmp	r3, r2
 800be34:	d1fb      	bne.n	800be2e <HAL_UART_TxCpltCallback+0xe>
 800be36:	2201      	movs	r2, #1
 800be38:	4b03      	ldr	r3, [pc, #12]	; (800be48 <HAL_UART_TxCpltCallback+0x28>)
 800be3a:	e7f7      	b.n	800be2c <HAL_UART_TxCpltCallback+0xc>
 800be3c:	40004400 	.word	0x40004400
 800be40:	20001488 	.word	0x20001488
 800be44:	40011400 	.word	0x40011400
 800be48:	2000148c 	.word	0x2000148c

0800be4c <HAL_UART_RxCpltCallback>:
 * @retval None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
	/* Set transmission flag: trasfer complete*/
	uartRXReady = 1;
 800be4c:	4b01      	ldr	r3, [pc, #4]	; (800be54 <HAL_UART_RxCpltCallback+0x8>)
 800be4e:	2201      	movs	r2, #1
 800be50:	601a      	str	r2, [r3, #0]
 800be52:	4770      	bx	lr
 800be54:	20001490 	.word	0x20001490

0800be58 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
void MX_DMA_Init(void)
{
 800be58:	b513      	push	{r0, r1, r4, lr}
	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800be5a:	4b24      	ldr	r3, [pc, #144]	; (800beec <MX_DMA_Init+0x94>)
 800be5c:	2400      	movs	r4, #0
 800be5e:	9400      	str	r4, [sp, #0]
 800be60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be62:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800be66:	631a      	str	r2, [r3, #48]	; 0x30
 800be68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be6a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800be6e:	9200      	str	r2, [sp, #0]
 800be70:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_DMA2_CLK_ENABLE();
 800be72:	9401      	str	r4, [sp, #4]
 800be74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be76:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800be7a:	631a      	str	r2, [r3, #48]	; 0x30
 800be7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800be82:	4622      	mov	r2, r4
 800be84:	4621      	mov	r1, r4
	__HAL_RCC_DMA2_CLK_ENABLE();
 800be86:	9301      	str	r3, [sp, #4]
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800be88:	200b      	movs	r0, #11
	__HAL_RCC_DMA2_CLK_ENABLE();
 800be8a:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800be8c:	f7fb fae2 	bl	8007454 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800be90:	200b      	movs	r0, #11
 800be92:	f7fb fb21 	bl	80074d8 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800be96:	4622      	mov	r2, r4
 800be98:	4621      	mov	r1, r4
 800be9a:	2010      	movs	r0, #16
 800be9c:	f7fb fada 	bl	8007454 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800bea0:	2010      	movs	r0, #16
 800bea2:	f7fb fb19 	bl	80074d8 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800bea6:	4622      	mov	r2, r4
 800bea8:	4621      	mov	r1, r4
 800beaa:	2011      	movs	r0, #17
 800beac:	f7fb fad2 	bl	8007454 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800beb0:	2011      	movs	r0, #17
 800beb2:	f7fb fb11 	bl	80074d8 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800beb6:	4622      	mov	r2, r4
 800beb8:	4621      	mov	r1, r4
 800beba:	202f      	movs	r0, #47	; 0x2f
 800bebc:	f7fb faca 	bl	8007454 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800bec0:	202f      	movs	r0, #47	; 0x2f
 800bec2:	f7fb fb09 	bl	80074d8 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800bec6:	4622      	mov	r2, r4
 800bec8:	4621      	mov	r1, r4
 800beca:	2039      	movs	r0, #57	; 0x39
 800becc:	f7fb fac2 	bl	8007454 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800bed0:	2039      	movs	r0, #57	; 0x39
 800bed2:	f7fb fb01 	bl	80074d8 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800bed6:	4622      	mov	r2, r4
 800bed8:	4621      	mov	r1, r4
 800beda:	2045      	movs	r0, #69	; 0x45
 800bedc:	f7fb faba 	bl	8007454 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800bee0:	2045      	movs	r0, #69	; 0x45
 800bee2:	f7fb faf9 	bl	80074d8 <HAL_NVIC_EnableIRQ>
}
 800bee6:	b002      	add	sp, #8
 800bee8:	bd10      	pop	{r4, pc}
 800beea:	bf00      	nop
 800beec:	40023800 	.word	0x40023800

0800bef0 <MX_GPIO_Init>:
 * Output
 * EVENT_OUT
 * EXTI
 */
void MX_GPIO_Init(void)
{
 800bef0:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800bef2:	2214      	movs	r2, #20
{
 800bef4:	b08b      	sub	sp, #44	; 0x2c
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800bef6:	eb0d 0002 	add.w	r0, sp, r2
 800befa:	2100      	movs	r1, #0
 800befc:	f00f f83f 	bl	801af7e <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800bf00:	2400      	movs	r4, #0
 800bf02:	4b2e      	ldr	r3, [pc, #184]	; (800bfbc <MX_GPIO_Init+0xcc>)
 800bf04:	9401      	str	r4, [sp, #4]
 800bf06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	__HAL_RCC_GPIOH_CLK_ENABLE();
	__HAL_RCC_GPIOA_CLK_ENABLE();
	__HAL_RCC_GPIOB_CLK_ENABLE();

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(MOTOR_ENB_GPIO_Port, MOTOR_ENB_Pin, GPIO_PIN_RESET);
 800bf08:	4e2d      	ldr	r6, [pc, #180]	; (800bfc0 <MX_GPIO_Init+0xd0>)

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | MOTOR_ENA_Pin, GPIO_PIN_RESET);
 800bf0a:	4f2e      	ldr	r7, [pc, #184]	; (800bfc4 <MX_GPIO_Init+0xd4>)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800bf0c:	f042 0204 	orr.w	r2, r2, #4
 800bf10:	631a      	str	r2, [r3, #48]	; 0x30
 800bf12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf14:	f002 0204 	and.w	r2, r2, #4
 800bf18:	9201      	str	r2, [sp, #4]
 800bf1a:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800bf1c:	9402      	str	r4, [sp, #8]
 800bf1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bf24:	631a      	str	r2, [r3, #48]	; 0x30
 800bf26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf28:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800bf2c:	9202      	str	r2, [sp, #8]
 800bf2e:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800bf30:	9403      	str	r4, [sp, #12]
 800bf32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf34:	f042 0201 	orr.w	r2, r2, #1
 800bf38:	631a      	str	r2, [r3, #48]	; 0x30
 800bf3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf3c:	f002 0201 	and.w	r2, r2, #1
 800bf40:	9203      	str	r2, [sp, #12]
 800bf42:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800bf44:	9404      	str	r4, [sp, #16]
 800bf46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf48:	f042 0202 	orr.w	r2, r2, #2
 800bf4c:	631a      	str	r2, [r3, #48]	; 0x30
 800bf4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf50:	f003 0302 	and.w	r3, r3, #2
 800bf54:	9304      	str	r3, [sp, #16]
	HAL_GPIO_WritePin(MOTOR_ENB_GPIO_Port, MOTOR_ENB_Pin, GPIO_PIN_RESET);
 800bf56:	4622      	mov	r2, r4
 800bf58:	4630      	mov	r0, r6
 800bf5a:	2102      	movs	r1, #2
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800bf5c:	9b04      	ldr	r3, [sp, #16]
	HAL_GPIO_WritePin(MOTOR_ENB_GPIO_Port, MOTOR_ENB_Pin, GPIO_PIN_RESET);
 800bf5e:	f7fb ffab 	bl	8007eb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | MOTOR_ENA_Pin, GPIO_PIN_RESET);
 800bf62:	4622      	mov	r2, r4
 800bf64:	4638      	mov	r0, r7
 800bf66:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800bf6a:	f7fb ffa5 	bl	8007eb8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = B1_Pin;
 800bf6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bf72:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800bf74:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800bf76:	4b14      	ldr	r3, [pc, #80]	; (800bfc8 <MX_GPIO_Init+0xd8>)
 800bf78:	9306      	str	r3, [sp, #24]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800bf7a:	4630      	mov	r0, r6

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = MOTOR_ENB_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bf7c:	2501      	movs	r5, #1
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf7e:	9407      	str	r4, [sp, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800bf80:	f7fb fdc6 	bl	8007b10 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = MOTOR_ENB_Pin;
 800bf84:	2302      	movs	r3, #2
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(MOTOR_ENB_GPIO_Port, &GPIO_InitStruct);
 800bf86:	a905      	add	r1, sp, #20
 800bf88:	4630      	mov	r0, r6
	GPIO_InitStruct.Pin = MOTOR_ENB_Pin;
 800bf8a:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bf8c:	9506      	str	r5, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf8e:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bf90:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(MOTOR_ENB_GPIO_Port, &GPIO_InitStruct);
 800bf92:	f7fb fdbd 	bl	8007b10 <HAL_GPIO_Init>

	/*Configure GPIO pins : PAPin PAPin */
	GPIO_InitStruct.Pin = LD2_Pin | MOTOR_ENA_Pin;
 800bf96:	f44f 6384 	mov.w	r3, #1056	; 0x420
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bf9a:	a905      	add	r1, sp, #20
 800bf9c:	4638      	mov	r0, r7
	GPIO_InitStruct.Pin = LD2_Pin | MOTOR_ENA_Pin;
 800bf9e:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bfa0:	9506      	str	r5, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfa2:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bfa4:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bfa6:	f7fb fdb3 	bl	8007b10 <HAL_GPIO_Init>

	/* Initialize LED */
	BSP_LED_Init(LED2);
 800bfaa:	4620      	mov	r0, r4
 800bfac:	f7fa fad6 	bl	800655c <BSP_LED_Init>

	/* Initialize push button */
	BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 800bfb0:	4629      	mov	r1, r5
 800bfb2:	4620      	mov	r0, r4
 800bfb4:	f7fa fb0e 	bl	80065d4 <BSP_PB_Init>
}
 800bfb8:	b00b      	add	sp, #44	; 0x2c
 800bfba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfbc:	40023800 	.word	0x40023800
 800bfc0:	40020800 	.word	0x40020800
 800bfc4:	40020000 	.word	0x40020000
 800bfc8:	10210000 	.word	0x10210000

0800bfcc <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800bfcc:	b508      	push	{r3, lr}
	hi2c1.Instance = I2C1;
 800bfce:	480c      	ldr	r0, [pc, #48]	; (800c000 <MX_I2C1_Init+0x34>)
	hi2c1.Init.ClockSpeed = 100000;
 800bfd0:	4b0c      	ldr	r3, [pc, #48]	; (800c004 <MX_I2C1_Init+0x38>)
 800bfd2:	f8df e034 	ldr.w	lr, [pc, #52]	; 800c008 <MX_I2C1_Init+0x3c>
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
	hi2c1.Init.OwnAddress1 = 0;
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800bfd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
	hi2c1.Init.ClockSpeed = 100000;
 800bfda:	e880 4008 	stmia.w	r0, {r3, lr}
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	6083      	str	r3, [r0, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800bfe2:	60c3      	str	r3, [r0, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800bfe4:	6102      	str	r2, [r0, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800bfe6:	6143      	str	r3, [r0, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800bfe8:	6183      	str	r3, [r0, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800bfea:	61c3      	str	r3, [r0, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800bfec:	6203      	str	r3, [r0, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800bfee:	f7fc f953 	bl	8008298 <HAL_I2C_Init>
 800bff2:	b118      	cbz	r0, 800bffc <MX_I2C1_Init+0x30>
		Error_Handler();
	}
}
 800bff4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 800bff8:	f000 b908 	b.w	800c20c <Error_Handler>
 800bffc:	bd08      	pop	{r3, pc}
 800bffe:	bf00      	nop
 800c000:	20002934 	.word	0x20002934
 800c004:	40005400 	.word	0x40005400
 800c008:	000186a0 	.word	0x000186a0

0800c00c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800c00c:	b570      	push	{r4, r5, r6, lr}
 800c00e:	4606      	mov	r6, r0
 800c010:	b088      	sub	sp, #32
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800c012:	2214      	movs	r2, #20
 800c014:	2100      	movs	r1, #0
 800c016:	a803      	add	r0, sp, #12
 800c018:	f00e ffb1 	bl	801af7e <memset>
	if (i2cHandle->Instance == I2C1) {
 800c01c:	6832      	ldr	r2, [r6, #0]
 800c01e:	4b36      	ldr	r3, [pc, #216]	; (800c0f8 <HAL_I2C_MspInit+0xec>)
 800c020:	429a      	cmp	r2, r3
 800c022:	d166      	bne.n	800c0f2 <HAL_I2C_MspInit+0xe6>
		/* USER CODE BEGIN I2C1_MspInit 0 */

		/* USER CODE END I2C1_MspInit 0 */

		__HAL_RCC_GPIOB_CLK_ENABLE();
 800c024:	2500      	movs	r5, #0
 800c026:	4c35      	ldr	r4, [pc, #212]	; (800c0fc <HAL_I2C_MspInit+0xf0>)
 800c028:	9501      	str	r5, [sp, #4]
 800c02a:	6b23      	ldr	r3, [r4, #48]	; 0x30
		GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
		GPIO_InitStruct.Pull = GPIO_PULLUP;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c02c:	4834      	ldr	r0, [pc, #208]	; (800c100 <HAL_I2C_MspInit+0xf4>)
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800c02e:	f043 0302 	orr.w	r3, r3, #2
 800c032:	6323      	str	r3, [r4, #48]	; 0x30
 800c034:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c036:	f003 0302 	and.w	r3, r3, #2
 800c03a:	9301      	str	r3, [sp, #4]
 800c03c:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 800c03e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c042:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c044:	2312      	movs	r3, #18
 800c046:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c048:	2301      	movs	r3, #1
 800c04a:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c04c:	2303      	movs	r3, #3
 800c04e:	9306      	str	r3, [sp, #24]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c050:	a903      	add	r1, sp, #12
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800c052:	2304      	movs	r3, #4
 800c054:	9307      	str	r3, [sp, #28]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c056:	f7fb fd5b 	bl	8007b10 <HAL_GPIO_Init>

		/* I2C1 clock enable */
		__HAL_RCC_I2C1_CLK_ENABLE();
 800c05a:	9502      	str	r5, [sp, #8]
 800c05c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c05e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c062:	6423      	str	r3, [r4, #64]	; 0x40
 800c064:	6c23      	ldr	r3, [r4, #64]	; 0x40

		/* I2C1 DMA Init */
		/* I2C1_RX Init */
		hdma_i2c1_rx.Instance = DMA1_Stream0;
 800c066:	4c27      	ldr	r4, [pc, #156]	; (800c104 <HAL_I2C_MspInit+0xf8>)
		__HAL_RCC_I2C1_CLK_ENABLE();
 800c068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c06c:	9302      	str	r3, [sp, #8]
 800c06e:	9b02      	ldr	r3, [sp, #8]
		hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800c070:	4b25      	ldr	r3, [pc, #148]	; (800c108 <HAL_I2C_MspInit+0xfc>)
		hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c072:	60a5      	str	r5, [r4, #8]
		hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800c074:	f04f 7c00 	mov.w	ip, #33554432	; 0x2000000
 800c078:	e884 1008 	stmia.w	r4, {r3, ip}
		hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
		hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
		hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
		hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
		hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
		if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK) {
 800c07c:	4620      	mov	r0, r4
		hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c07e:	f44f 6380 	mov.w	r3, #1024	; 0x400
		hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c082:	60e5      	str	r5, [r4, #12]
		hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c084:	6123      	str	r3, [r4, #16]
		hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c086:	6165      	str	r5, [r4, #20]
		hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c088:	61a5      	str	r5, [r4, #24]
		hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800c08a:	61e5      	str	r5, [r4, #28]
		hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c08c:	6225      	str	r5, [r4, #32]
		hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c08e:	6265      	str	r5, [r4, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK) {
 800c090:	f7fb fa92 	bl	80075b8 <HAL_DMA_Init>
 800c094:	b108      	cbz	r0, 800c09a <HAL_I2C_MspInit+0x8e>
			Error_Handler();
 800c096:	f000 f8b9 	bl	800c20c <Error_Handler>
		}

		__HAL_LINKDMA(i2cHandle, hdmarx, hdma_i2c1_rx);
 800c09a:	63b4      	str	r4, [r6, #56]	; 0x38

		/* I2C1_TX Init */
		hdma_i2c1_tx.Instance = DMA1_Stream7;
		hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
		hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c09c:	4b1b      	ldr	r3, [pc, #108]	; (800c10c <HAL_I2C_MspInit+0x100>)
		__HAL_LINKDMA(i2cHandle, hdmarx, hdma_i2c1_rx);
 800c09e:	63a6      	str	r6, [r4, #56]	; 0x38
		hdma_i2c1_tx.Instance = DMA1_Stream7;
 800c0a0:	4c1b      	ldr	r4, [pc, #108]	; (800c110 <HAL_I2C_MspInit+0x104>)
		hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c0a2:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 800c0a6:	f04f 0e40 	mov.w	lr, #64	; 0x40
 800c0aa:	e884 4028 	stmia.w	r4, {r3, r5, lr}
		hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
		hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800c0ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
		hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c0b2:	2300      	movs	r3, #0
		hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
		hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
		hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
		hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
		hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
		if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK) {
 800c0b4:	4620      	mov	r0, r4
		hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c0b6:	60e3      	str	r3, [r4, #12]
		hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800c0b8:	6122      	str	r2, [r4, #16]
		hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c0ba:	6163      	str	r3, [r4, #20]
		hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c0bc:	61a3      	str	r3, [r4, #24]
		hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800c0be:	61e3      	str	r3, [r4, #28]
		hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800c0c0:	6223      	str	r3, [r4, #32]
		hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c0c2:	6263      	str	r3, [r4, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK) {
 800c0c4:	f7fb fa78 	bl	80075b8 <HAL_DMA_Init>
 800c0c8:	b108      	cbz	r0, 800c0ce <HAL_I2C_MspInit+0xc2>
			Error_Handler();
 800c0ca:	f000 f89f 	bl	800c20c <Error_Handler>
		}

		__HAL_LINKDMA(i2cHandle, hdmatx, hdma_i2c1_tx);

		/* I2C1 interrupt Init */
		HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	4611      	mov	r1, r2
		__HAL_LINKDMA(i2cHandle, hdmatx, hdma_i2c1_tx);
 800c0d2:	6374      	str	r4, [r6, #52]	; 0x34
		HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800c0d4:	201f      	movs	r0, #31
		__HAL_LINKDMA(i2cHandle, hdmatx, hdma_i2c1_tx);
 800c0d6:	63a6      	str	r6, [r4, #56]	; 0x38
		HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800c0d8:	f7fb f9bc 	bl	8007454 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800c0dc:	201f      	movs	r0, #31
 800c0de:	f7fb f9fb 	bl	80074d8 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	2020      	movs	r0, #32
 800c0e6:	4611      	mov	r1, r2
 800c0e8:	f7fb f9b4 	bl	8007454 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800c0ec:	2020      	movs	r0, #32
 800c0ee:	f7fb f9f3 	bl	80074d8 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN I2C1_MspInit 1 */

		/* USER CODE END I2C1_MspInit 1 */
	}
}
 800c0f2:	b008      	add	sp, #32
 800c0f4:	bd70      	pop	{r4, r5, r6, pc}
 800c0f6:	bf00      	nop
 800c0f8:	40005400 	.word	0x40005400
 800c0fc:	40023800 	.word	0x40023800
 800c100:	40020400 	.word	0x40020400
 800c104:	20002988 	.word	0x20002988
 800c108:	40026010 	.word	0x40026010
 800c10c:	400260b8 	.word	0x400260b8
 800c110:	200028d4 	.word	0x200028d4

0800c114 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
	if (i2cHandle->Instance == I2C1) {
 800c114:	6802      	ldr	r2, [r0, #0]
 800c116:	4b0f      	ldr	r3, [pc, #60]	; (800c154 <HAL_I2C_MspDeInit+0x40>)
 800c118:	429a      	cmp	r2, r3
{
 800c11a:	b510      	push	{r4, lr}
 800c11c:	4604      	mov	r4, r0
	if (i2cHandle->Instance == I2C1) {
 800c11e:	d117      	bne.n	800c150 <HAL_I2C_MspDeInit+0x3c>
		/* USER CODE BEGIN I2C1_MspDeInit 0 */

		/* USER CODE END I2C1_MspDeInit 0 */
		/* Peripheral clock disable */
		__HAL_RCC_I2C1_CLK_DISABLE();
 800c120:	4a0d      	ldr	r2, [pc, #52]	; (800c158 <HAL_I2C_MspDeInit+0x44>)

		/**I2C1 GPIO Configuration
		   PB8     ------> I2C1_SCL
		   PB9     ------> I2C1_SDA
		 */
		HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8 | GPIO_PIN_9);
 800c122:	480e      	ldr	r0, [pc, #56]	; (800c15c <HAL_I2C_MspDeInit+0x48>)
		__HAL_RCC_I2C1_CLK_DISABLE();
 800c124:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800c126:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c12a:	6413      	str	r3, [r2, #64]	; 0x40
		HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8 | GPIO_PIN_9);
 800c12c:	f44f 7140 	mov.w	r1, #768	; 0x300
 800c130:	f7fb fe1a 	bl	8007d68 <HAL_GPIO_DeInit>

		/* I2C1 DMA DeInit */
		HAL_DMA_DeInit(i2cHandle->hdmarx);
 800c134:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800c136:	f7fb fb67 	bl	8007808 <HAL_DMA_DeInit>
		HAL_DMA_DeInit(i2cHandle->hdmatx);
 800c13a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800c13c:	f7fb fb64 	bl	8007808 <HAL_DMA_DeInit>

		/* I2C1 interrupt Deinit */
		HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 800c140:	201f      	movs	r0, #31
 800c142:	f7fb f9df 	bl	8007504 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 800c146:	2020      	movs	r0, #32
		/* USER CODE BEGIN I2C1_MspDeInit 1 */

		/* USER CODE END I2C1_MspDeInit 1 */
	}
}
 800c148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 800c14c:	f7fb b9da 	b.w	8007504 <HAL_NVIC_DisableIRQ>
 800c150:	bd10      	pop	{r4, pc}
 800c152:	bf00      	nop
 800c154:	40005400 	.word	0x40005400
 800c158:	40023800 	.word	0x40023800
 800c15c:	40020400 	.word	0x40020400

0800c160 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if (GPIO_Pin == VL53L1X_INT_Pin) {
 800c160:	2810      	cmp	r0, #16
		IntCount++;
 800c162:	bf01      	itttt	eq
 800c164:	4a02      	ldreq	r2, [pc, #8]	; (800c170 <HAL_GPIO_EXTI_Callback+0x10>)
 800c166:	6813      	ldreq	r3, [r2, #0]
 800c168:	3301      	addeq	r3, #1
 800c16a:	6013      	streq	r3, [r2, #0]
 800c16c:	4770      	bx	lr
 800c16e:	bf00      	nop
 800c170:	20003130 	.word	0x20003130

0800c174 <MeasureSensors>:

/* USER CODE BEGIN 4 */

/* Private functions --------------------------------- */

VL53L1_RangingMeasurementData_t* MeasureSensors(void) {
 800c174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c178:	4e1d      	ldr	r6, [pc, #116]	; (800c1f0 <MeasureSensors+0x7c>)
		switch (ToFSensor) {
		case 0:
			Dev = &devLeft;
			break;
		case 1:
			Dev = &devCenter;
 800c17a:	f8df 9084 	ldr.w	r9, [pc, #132]	; 800c200 <MeasureSensors+0x8c>
			break;
		case 2:
			Dev = &devRight;
 800c17e:	f8df a084 	ldr.w	sl, [pc, #132]	; 800c204 <MeasureSensors+0x90>
VL53L1_RangingMeasurementData_t* MeasureSensors(void) {
 800c182:	2700      	movs	r7, #0
		switch (ToFSensor) {
 800c184:	b2fb      	uxtb	r3, r7
 800c186:	2b01      	cmp	r3, #1
 800c188:	d02c      	beq.n	800c1e4 <MeasureSensors+0x70>
 800c18a:	2b02      	cmp	r3, #2
 800c18c:	d02d      	beq.n	800c1ea <MeasureSensors+0x76>
			Dev = &devLeft;
 800c18e:	4b19      	ldr	r3, [pc, #100]	; (800c1f4 <MeasureSensors+0x80>)
 800c190:	6033      	str	r3, [r6, #0]
			break;
		}

		status = VL53L1_StartMeasurement(Dev);
 800c192:	6830      	ldr	r0, [r6, #0]
 800c194:	f8df 8070 	ldr.w	r8, [pc, #112]	; 800c208 <MeasureSensors+0x94>
 800c198:	f7f7 fe0a 	bl	8003db0 <VL53L1_StartMeasurement>
 800c19c:	f8c8 0000 	str.w	r0, [r8]
		status = VL53L1_WaitMeasurementDataReady(Dev);
 800c1a0:	6830      	ldr	r0, [r6, #0]
 800c1a2:	f7f7 fe80 	bl	8003ea6 <VL53L1_WaitMeasurementDataReady>
 800c1a6:	f8c8 0000 	str.w	r0, [r8]
		if (!status) {
 800c1aa:	b9a8      	cbnz	r0, 800c1d8 <MeasureSensors+0x64>
			status = VL53L1_GetRangingMeasurementData(Dev, &RangingData);
 800c1ac:	4912      	ldr	r1, [pc, #72]	; (800c1f8 <MeasureSensors+0x84>)
 800c1ae:	6830      	ldr	r0, [r6, #0]

			RangeData[ToFSensor] = RangingData;
 800c1b0:	4d11      	ldr	r5, [pc, #68]	; (800c1f8 <MeasureSensors+0x84>)
			status = VL53L1_GetRangingMeasurementData(Dev, &RangingData);
 800c1b2:	f7f7 fe7d 	bl	8003eb0 <VL53L1_GetRangingMeasurementData>
			RangeData[ToFSensor] = RangingData;
 800c1b6:	4b11      	ldr	r3, [pc, #68]	; (800c1fc <MeasureSensors+0x88>)
			status = VL53L1_GetRangingMeasurementData(Dev, &RangingData);
 800c1b8:	f8c8 0000 	str.w	r0, [r8]
			RangeData[ToFSensor] = RangingData;
 800c1bc:	241c      	movs	r4, #28
 800c1be:	fb04 3407 	mla	r4, r4, r7, r3
 800c1c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c1c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c1c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c1ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		status = VL53L1_ClearInterruptAndStartMeasurement(Dev);
 800c1ce:	6830      	ldr	r0, [r6, #0]
 800c1d0:	f7f7 fe25 	bl	8003e1e <VL53L1_ClearInterruptAndStartMeasurement>
 800c1d4:	f8c8 0000 	str.w	r0, [r8]
 800c1d8:	3701      	adds	r7, #1
	for (ToFSensor = 0; ToFSensor < 3; ToFSensor++) {
 800c1da:	2f03      	cmp	r7, #3
 800c1dc:	d1d2      	bne.n	800c184 <MeasureSensors+0x10>
		}

	}

	return RangeData;
}
 800c1de:	4807      	ldr	r0, [pc, #28]	; (800c1fc <MeasureSensors+0x88>)
 800c1e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			Dev = &devCenter;
 800c1e4:	f8c6 9000 	str.w	r9, [r6]
			break;
 800c1e8:	e7d3      	b.n	800c192 <MeasureSensors+0x1e>
			Dev = &devRight;
 800c1ea:	f8c6 a000 	str.w	sl, [r6]
			break;
 800c1ee:	e7d0      	b.n	800c192 <MeasureSensors+0x1e>
 800c1f0:	20001494 	.word	0x20001494
 800c1f4:	200029e8 	.word	0x200029e8
 800c1f8:	200026b0 	.word	0x200026b0
 800c1fc:	2000265c 	.word	0x2000265c
 800c200:	20002d8c 	.word	0x20002d8c
 800c204:	20003134 	.word	0x20003134
 800c208:	200035cc 	.word	0x200035cc

0800c20c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800c20c:	b508      	push	{r3, lr}
	/* USER CODE BEGIN Error_Handler_Debug */

	for (;;)
	  {
	    BSP_LED_On(LED2);
 800c20e:	2000      	movs	r0, #0
 800c210:	f7fa f9cc 	bl	80065ac <BSP_LED_On>
	    HAL_Delay(100);
 800c214:	2064      	movs	r0, #100	; 0x64
 800c216:	f7fa fe51 	bl	8006ebc <HAL_Delay>
	    BSP_LED_Off(LED2);
 800c21a:	2000      	movs	r0, #0
 800c21c:	f7fa f9d0 	bl	80065c0 <BSP_LED_Off>
	    HAL_Delay(100);
 800c220:	2064      	movs	r0, #100	; 0x64
 800c222:	f7fa fe4b 	bl	8006ebc <HAL_Delay>
 800c226:	e7f2      	b.n	800c20e <Error_Handler+0x2>

0800c228 <SystemClock_Config>:
{
 800c228:	b510      	push	{r4, lr}
 800c22a:	b094      	sub	sp, #80	; 0x50
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800c22c:	2230      	movs	r2, #48	; 0x30
 800c22e:	2100      	movs	r1, #0
 800c230:	a808      	add	r0, sp, #32
 800c232:	f00e fea4 	bl	801af7e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800c236:	2214      	movs	r2, #20
 800c238:	2100      	movs	r1, #0
 800c23a:	a803      	add	r0, sp, #12
 800c23c:	f00e fe9f 	bl	801af7e <memset>
	__HAL_RCC_PWR_CLK_ENABLE();
 800c240:	4b20      	ldr	r3, [pc, #128]	; (800c2c4 <SystemClock_Config+0x9c>)
 800c242:	2100      	movs	r1, #0
 800c244:	9101      	str	r1, [sp, #4]
 800c246:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c248:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800c24c:	641a      	str	r2, [r3, #64]	; 0x40
 800c24e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800c250:	4a1d      	ldr	r2, [pc, #116]	; (800c2c8 <SystemClock_Config+0xa0>)
	__HAL_RCC_PWR_CLK_ENABLE();
 800c252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c256:	9301      	str	r3, [sp, #4]
 800c258:	9b01      	ldr	r3, [sp, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800c25a:	9102      	str	r1, [sp, #8]
 800c25c:	6813      	ldr	r3, [r2, #0]
 800c25e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800c262:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c266:	6013      	str	r3, [r2, #0]
 800c268:	6813      	ldr	r3, [r2, #0]
 800c26a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c26e:	9302      	str	r3, [sp, #8]
 800c270:	9b02      	ldr	r3, [sp, #8]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800c272:	2301      	movs	r3, #1
 800c274:	9308      	str	r3, [sp, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800c276:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800c27a:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800c27c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c280:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800c282:	2308      	movs	r3, #8
 800c284:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 800c286:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800c28a:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800c28c:	2304      	movs	r3, #4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c28e:	2402      	movs	r4, #2
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800c290:	9312      	str	r3, [sp, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800c292:	a808      	add	r0, sp, #32
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800c294:	2307      	movs	r3, #7
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c296:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800c298:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800c29a:	f7fd fa17 	bl	80096cc <HAL_RCC_OscConfig>
 800c29e:	b108      	cbz	r0, 800c2a4 <SystemClock_Config+0x7c>
		Error_Handler();
 800c2a0:	f7ff ffb4 	bl	800c20c <Error_Handler>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800c2a4:	230f      	movs	r3, #15
 800c2a6:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c2a8:	9005      	str	r0, [sp, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800c2aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800c2ae:	9007      	str	r0, [sp, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800c2b0:	4621      	mov	r1, r4
 800c2b2:	a803      	add	r0, sp, #12
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c2b4:	9404      	str	r4, [sp, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800c2b6:	9306      	str	r3, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800c2b8:	f7fd fc2e 	bl	8009b18 <HAL_RCC_ClockConfig>
 800c2bc:	2800      	cmp	r0, #0
 800c2be:	d1ef      	bne.n	800c2a0 <SystemClock_Config+0x78>
}
 800c2c0:	b014      	add	sp, #80	; 0x50
 800c2c2:	bd10      	pop	{r4, pc}
 800c2c4:	40023800 	.word	0x40023800
 800c2c8:	40007000 	.word	0x40007000

0800c2cc <main>:
{
 800c2cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2d0:	f5ad 7d27 	sub.w	sp, sp, #668	; 0x29c
	HAL_Init();
 800c2d4:	f7fa fdc6 	bl	8006e64 <HAL_Init>
  __CRC_CLK_ENABLE();
 800c2d8:	2400      	movs	r4, #0
	SystemClock_Config();
 800c2da:	f7ff ffa5 	bl	800c228 <SystemClock_Config>
	MX_GPIO_Init();
 800c2de:	f7ff fe07 	bl	800bef0 <MX_GPIO_Init>
	MX_DMA_Init();
 800c2e2:	f7ff fdb9 	bl	800be58 <MX_DMA_Init>
	MX_USART2_UART_Init();
 800c2e6:	f000 ff75 	bl	800d1d4 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 800c2ea:	f7ff fe6f 	bl	800bfcc <MX_I2C1_Init>
	MX_TIM2_Init();
 800c2ee:	f000 fec9 	bl	800d084 <MX_TIM2_Init>
	MX_TIM3_Init();
 800c2f2:	f000 ff1b 	bl	800d12c <MX_TIM3_Init>
	MX_ADC1_Init();
 800c2f6:	f7ff fcd9 	bl	800bcac <MX_ADC1_Init>
	MX_USART6_UART_Init();
 800c2fa:	f000 ff87 	bl	800d20c <MX_USART6_UART_Init>
  __CRC_CLK_ENABLE();
 800c2fe:	4b95      	ldr	r3, [pc, #596]	; (800c554 <main+0x288>)
 800c300:	9412      	str	r4, [sp, #72]	; 0x48
 800c302:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	setvbuf(stdin, NULL, _IONBF, 0);
 800c304:	4d94      	ldr	r5, [pc, #592]	; (800c558 <main+0x28c>)
  __CRC_CLK_ENABLE();
 800c306:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c30a:	631a      	str	r2, [r3, #48]	; 0x30
 800c30c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	setvbuf(stdin, NULL, _IONBF, 0);
 800c30e:	6828      	ldr	r0, [r5, #0]
  __CRC_CLK_ENABLE();
 800c310:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800c314:	9212      	str	r2, [sp, #72]	; 0x48
 800c316:	9a12      	ldr	r2, [sp, #72]	; 0x48
	__HAL_RCC_CRC_CLK_ENABLE();
 800c318:	9411      	str	r4, [sp, #68]	; 0x44
 800c31a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	setvbuf(stdin, NULL, _IONBF, 0);
 800c31c:	6840      	ldr	r0, [r0, #4]
	__HAL_RCC_CRC_CLK_ENABLE();
 800c31e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c322:	631a      	str	r2, [r3, #48]	; 0x30
 800c324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c326:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c32a:	9311      	str	r3, [sp, #68]	; 0x44
	setvbuf(stdin, NULL, _IONBF, 0);
 800c32c:	4621      	mov	r1, r4
	__HAL_RCC_CRC_CLK_ENABLE();
 800c32e:	9b11      	ldr	r3, [sp, #68]	; 0x44
	setvbuf(stdin, NULL, _IONBF, 0);
 800c330:	2202      	movs	r2, #2
 800c332:	4623      	mov	r3, r4
 800c334:	f00f fbd0 	bl	801bad8 <setvbuf>
	setvbuf(stdout, NULL, _IONBF, 0);
 800c338:	6828      	ldr	r0, [r5, #0]
 800c33a:	4623      	mov	r3, r4
 800c33c:	4621      	mov	r1, r4
 800c33e:	2202      	movs	r2, #2
 800c340:	6880      	ldr	r0, [r0, #8]
 800c342:	f00f fbc9 	bl	801bad8 <setvbuf>
	setvbuf(stderr, NULL, _IONBF, 0);
 800c346:	6828      	ldr	r0, [r5, #0]
 800c348:	4623      	mov	r3, r4
 800c34a:	2202      	movs	r2, #2
 800c34c:	4621      	mov	r1, r4
 800c34e:	68c0      	ldr	r0, [r0, #12]
 800c350:	f00f fbc2 	bl	801bad8 <setvbuf>
	printf("\r\nInitializing sensors ... \r\n");
 800c354:	4881      	ldr	r0, [pc, #516]	; (800c55c <main+0x290>)
 800c356:	f00f fba7 	bl	801baa8 <puts>
	XNUCLEO53L1A1_Init();
 800c35a:	f7fa fa7f 	bl	800685c <XNUCLEO53L1A1_Init>
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_ACCELERO | MOTION_GYRO);
 800c35e:	2103      	movs	r1, #3
 800c360:	4620      	mov	r0, r4
 800c362:	f7f9 ff33 	bl	80061cc <IKS01A2_MOTION_SENSOR_Init>
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 800c366:	2104      	movs	r1, #4
 800c368:	2002      	movs	r0, #2
 800c36a:	f7f9 ff2f 	bl	80061cc <IKS01A2_MOTION_SENSOR_Init>
  (void)IKS01A2_ENV_SENSOR_Init(IKS01A2_HTS221_0, ENV_TEMPERATURE | ENV_HUMIDITY);
 800c36e:	2105      	movs	r1, #5
 800c370:	4620      	mov	r0, r4
   if ((SensorsEnabled & PRESSURE_SENSOR) == PRESSURE_SENSOR)
 800c372:	4c7b      	ldr	r4, [pc, #492]	; (800c560 <main+0x294>)
  (void)IKS01A2_ENV_SENSOR_Init(IKS01A2_HTS221_0, ENV_TEMPERATURE | ENV_HUMIDITY);
 800c374:	f7f9 fdb0 	bl	8005ed8 <IKS01A2_ENV_SENSOR_Init>
  (void)IKS01A2_ENV_SENSOR_Init(IKS01A2_LPS22HB_0, ENV_PRESSURE);
 800c378:	2102      	movs	r1, #2
 800c37a:	2001      	movs	r0, #1
 800c37c:	f7f9 fdac 	bl	8005ed8 <IKS01A2_ENV_SENSOR_Init>
   if ((SensorsEnabled & PRESSURE_SENSOR) == PRESSURE_SENSOR)
 800c380:	6823      	ldr	r3, [r4, #0]
 800c382:	07da      	lsls	r2, r3, #31
 800c384:	d503      	bpl.n	800c38e <main+0xc2>
     (void)IKS01A2_ENV_SENSOR_Enable(IKS01A2_LPS22HB_0, ENV_PRESSURE);
 800c386:	2102      	movs	r1, #2
 800c388:	2001      	movs	r0, #1
 800c38a:	f7f9 fecf 	bl	800612c <IKS01A2_ENV_SENSOR_Enable>
   if ((SensorsEnabled & TEMPERATURE_SENSOR) == TEMPERATURE_SENSOR)
 800c38e:	6823      	ldr	r3, [r4, #0]
 800c390:	079b      	lsls	r3, r3, #30
 800c392:	d503      	bpl.n	800c39c <main+0xd0>
     (void)IKS01A2_ENV_SENSOR_Enable(IKS01A2_HTS221_0, ENV_TEMPERATURE);
 800c394:	2101      	movs	r1, #1
 800c396:	2000      	movs	r0, #0
 800c398:	f7f9 fec8 	bl	800612c <IKS01A2_ENV_SENSOR_Enable>
   if ((SensorsEnabled & HUMIDITY_SENSOR) == HUMIDITY_SENSOR)
 800c39c:	6823      	ldr	r3, [r4, #0]
 800c39e:	075f      	lsls	r7, r3, #29
 800c3a0:	d503      	bpl.n	800c3aa <main+0xde>
     (void)IKS01A2_ENV_SENSOR_Enable(IKS01A2_HTS221_0, ENV_HUMIDITY);
 800c3a2:	2104      	movs	r1, #4
 800c3a4:	2000      	movs	r0, #0
 800c3a6:	f7f9 fec1 	bl	800612c <IKS01A2_ENV_SENSOR_Enable>
   if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 800c3aa:	6823      	ldr	r3, [r4, #0]
 800c3ac:	06de      	lsls	r6, r3, #27
 800c3ae:	d503      	bpl.n	800c3b8 <main+0xec>
     (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 800c3b0:	2102      	movs	r1, #2
 800c3b2:	2000      	movs	r0, #0
 800c3b4:	f7fa f882 	bl	80064bc <IKS01A2_MOTION_SENSOR_Enable>
   if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
 800c3b8:	6823      	ldr	r3, [r4, #0]
 800c3ba:	069d      	lsls	r5, r3, #26
 800c3bc:	d503      	bpl.n	800c3c6 <main+0xfa>
     (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 800c3be:	2101      	movs	r1, #1
 800c3c0:	2000      	movs	r0, #0
 800c3c2:	f7fa f87b 	bl	80064bc <IKS01A2_MOTION_SENSOR_Enable>
   if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
 800c3c6:	6823      	ldr	r3, [r4, #0]
 800c3c8:	0658      	lsls	r0, r3, #25
 800c3ca:	d503      	bpl.n	800c3d4 <main+0x108>
     (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 800c3cc:	2104      	movs	r1, #4
 800c3ce:	2002      	movs	r0, #2
 800c3d0:	f7fa f874 	bl	80064bc <IKS01A2_MOTION_SENSOR_Enable>
   (void)HAL_TIM_Base_Start_IT(&AlgoTimHandle);
 800c3d4:	4863      	ldr	r0, [pc, #396]	; (800c564 <main+0x298>)
 800c3d6:	4d64      	ldr	r5, [pc, #400]	; (800c568 <main+0x29c>)
 800c3d8:	f7fe f908 	bl	800a5ec <HAL_TIM_Base_Start_IT>
   DataLoggerActive = 1;
 800c3dc:	4b63      	ldr	r3, [pc, #396]	; (800c56c <main+0x2a0>)
 800c3de:	2601      	movs	r6, #1
 800c3e0:	701e      	strb	r6, [r3, #0]
	MotionFX_manager_init();
 800c3e2:	f7ff fbd3 	bl	800bb8c <MotionFX_manager_init>
	MotionFX_manager_get_version(lib_version, &lib_version_len);
 800c3e6:	a910      	add	r1, sp, #64	; 0x40
 800c3e8:	a817      	add	r0, sp, #92	; 0x5c
 800c3ea:	f7ff fc45 	bl	800bc78 <MotionFX_manager_get_version>
  rcc_osc_init_struct.OscillatorType =  RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_LSE;
 800c3ee:	230c      	movs	r3, #12
 800c3f0:	9365      	str	r3, [sp, #404]	; 0x194
  if (HAL_RCC_OscConfig(&rcc_osc_init_struct) != HAL_OK)
 800c3f2:	a865      	add	r0, sp, #404	; 0x194
  rcc_osc_init_struct.PLL.PLLState = RCC_PLL_NONE;
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	936b      	str	r3, [sp, #428]	; 0x1ac
  rcc_osc_init_struct.LSIState = RCC_LSI_OFF;
 800c3f8:	936a      	str	r3, [sp, #424]	; 0x1a8
  rcc_osc_init_struct.LSEState = RCC_LSE_ON;
 800c3fa:	9667      	str	r6, [sp, #412]	; 0x19c
  if (HAL_RCC_OscConfig(&rcc_osc_init_struct) != HAL_OK)
 800c3fc:	f7fd f966 	bl	80096cc <HAL_RCC_OscConfig>
 800c400:	495b      	ldr	r1, [pc, #364]	; (800c570 <main+0x2a4>)
 800c402:	4b5c      	ldr	r3, [pc, #368]	; (800c574 <main+0x2a8>)
 800c404:	227f      	movs	r2, #127	; 0x7f
 800c406:	b190      	cbz	r0, 800c42e <main+0x162>
    RtcHandle.Init.AsynchPrediv = RTC_ASYNCH_PREDIV_LSI;
 800c408:	609a      	str	r2, [r3, #8]
    UseLSI = 1;
 800c40a:	600e      	str	r6, [r1, #0]
    RtcHandle.Init.SynchPrediv = RTC_SYNCH_PREDIV_LSI;
 800c40c:	22f9      	movs	r2, #249	; 0xf9
  RtcHandle.Init.HourFormat     = RTC_HOURFORMAT_12;
 800c40e:	495a      	ldr	r1, [pc, #360]	; (800c578 <main+0x2ac>)
    RtcHandle.Init.SynchPrediv = RTC_SYNCH_PREDIV_LSE;
 800c410:	60da      	str	r2, [r3, #12]
    RtcSynchPrediv = RTC_SYNCH_PREDIV_LSE;
 800c412:	602a      	str	r2, [r5, #0]
  RtcHandle.Init.HourFormat     = RTC_HOURFORMAT_12;
 800c414:	2240      	movs	r2, #64	; 0x40
 800c416:	e883 0006 	stmia.w	r3, {r1, r2}
  if (HAL_RTC_Init(&RtcHandle) != HAL_OK)
 800c41a:	4856      	ldr	r0, [pc, #344]	; (800c574 <main+0x2a8>)
  RtcHandle.Init.OutPut         = RTC_OUTPUT_DISABLE;
 800c41c:	2200      	movs	r2, #0
 800c41e:	611a      	str	r2, [r3, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800c420:	615a      	str	r2, [r3, #20]
  RtcHandle.Init.OutPutType     = RTC_OUTPUT_TYPE_OPENDRAIN;
 800c422:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&RtcHandle) != HAL_OK)
 800c424:	f7fd fdb4 	bl	8009f90 <HAL_RTC_Init>
 800c428:	b128      	cbz	r0, 800c436 <main+0x16a>
    Error_Handler();
 800c42a:	f7ff feef 	bl	800c20c <Error_Handler>
    RtcHandle.Init.AsynchPrediv = RTC_ASYNCH_PREDIV_LSE;
 800c42e:	609a      	str	r2, [r3, #8]
    UseLSI = 0;
 800c430:	6008      	str	r0, [r1, #0]
    RtcHandle.Init.SynchPrediv = RTC_SYNCH_PREDIV_LSE;
 800c432:	22ff      	movs	r2, #255	; 0xff
 800c434:	e7eb      	b.n	800c40e <main+0x142>
  sdatestructure.Year = 0x01;
 800c436:	2701      	movs	r7, #1
  if (HAL_RTC_SetDate(&RtcHandle, &sdatestructure, FORMAT_BCD) != HAL_OK)
 800c438:	463a      	mov	r2, r7
 800c43a:	a929      	add	r1, sp, #164	; 0xa4
 800c43c:	484d      	ldr	r0, [pc, #308]	; (800c574 <main+0x2a8>)
  sdatestructure.Year = 0x01;
 800c43e:	f88d 70a7 	strb.w	r7, [sp, #167]	; 0xa7
  sdatestructure.Month = RTC_MONTH_JANUARY;
 800c442:	f88d 70a5 	strb.w	r7, [sp, #165]	; 0xa5
  sdatestructure.Date = 0x01;
 800c446:	f88d 70a6 	strb.w	r7, [sp, #166]	; 0xa6
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;
 800c44a:	f88d 70a4 	strb.w	r7, [sp, #164]	; 0xa4
  if (HAL_RTC_SetDate(&RtcHandle, &sdatestructure, FORMAT_BCD) != HAL_OK)
 800c44e:	f7fd ff4f 	bl	800a2f0 <HAL_RTC_SetDate>
 800c452:	2800      	cmp	r0, #0
 800c454:	d1e9      	bne.n	800c42a <main+0x15e>
  stimestructure.Hours = 0x00;
 800c456:	f88d 011c 	strb.w	r0, [sp, #284]	; 0x11c
  stimestructure.Minutes = 0x00;
 800c45a:	f88d 011d 	strb.w	r0, [sp, #285]	; 0x11d
  stimestructure.Seconds = 0x00;
 800c45e:	f88d 011e 	strb.w	r0, [sp, #286]	; 0x11e
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800c462:	f88d 011f 	strb.w	r0, [sp, #287]	; 0x11f
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 800c466:	904a      	str	r0, [sp, #296]	; 0x128
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800c468:	904b      	str	r0, [sp, #300]	; 0x12c
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, FORMAT_BCD) != HAL_OK)
 800c46a:	463a      	mov	r2, r7
 800c46c:	a947      	add	r1, sp, #284	; 0x11c
 800c46e:	4841      	ldr	r0, [pc, #260]	; (800c574 <main+0x2a8>)
 800c470:	f7fd fe24 	bl	800a0bc <HAL_RTC_SetTime>
 800c474:	4680      	mov	r8, r0
 800c476:	2800      	cmp	r0, #0
 800c478:	d1d7      	bne.n	800c42a <main+0x15e>
  AlgoTimHandle.Init.Prescaler     = prescaler;
 800c47a:	4a40      	ldr	r2, [pc, #256]	; (800c57c <main+0x2b0>)
  AlgoTimHandle.Instance           = TIM_ALGO;
 800c47c:	4e39      	ldr	r6, [pc, #228]	; (800c564 <main+0x298>)
  AlgoTimHandle.Init.Prescaler     = prescaler;
 800c47e:	f24a 430f 	movw	r3, #41999	; 0xa40f
 800c482:	e886 000c 	stmia.w	r6, {r2, r3}
  AlgoTimHandle.Init.CounterMode   = TIM_COUNTERMODE_UP;
 800c486:	60b0      	str	r0, [r6, #8]
  AlgoTimHandle.Init.Period        = tim_period;
 800c488:	2313      	movs	r3, #19
  AlgoTimHandle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c48a:	6130      	str	r0, [r6, #16]
  (void)HAL_TIM_Base_Init(&AlgoTimHandle);
 800c48c:	4630      	mov	r0, r6
  AlgoTimHandle.Init.Period        = tim_period;
 800c48e:	60f3      	str	r3, [r6, #12]
  (void)HAL_TIM_Base_Init(&AlgoTimHandle);
 800c490:	f7fe fca0 	bl	800add4 <HAL_TIM_Base_Init>
  s_clock_source_config.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c494:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  (void)HAL_TIM_ConfigClockSource(&AlgoTimHandle, &s_clock_source_config);
 800c498:	a965      	add	r1, sp, #404	; 0x194
 800c49a:	4630      	mov	r0, r6
  s_clock_source_config.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c49c:	9365      	str	r3, [sp, #404]	; 0x194
  (void)HAL_TIM_ConfigClockSource(&AlgoTimHandle, &s_clock_source_config);
 800c49e:	f7fe f923 	bl	800a6e8 <HAL_TIM_ConfigClockSource>
  (void)HAL_TIMEx_MasterConfigSynchronization(&AlgoTimHandle, &s_master_config);
 800c4a2:	a947      	add	r1, sp, #284	; 0x11c
 800c4a4:	4630      	mov	r0, r6
  s_master_config.MasterOutputTrigger = TIM_TRGO_RESET;
 800c4a6:	f8cd 811c 	str.w	r8, [sp, #284]	; 0x11c
  s_master_config.MasterSlaveMode     = TIM_MASTERSLAVEMODE_DISABLE;
 800c4aa:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
  (void)HAL_TIMEx_MasterConfigSynchronization(&AlgoTimHandle, &s_master_config);
 800c4ae:	f7fe ff83 	bl	800b3b8 <HAL_TIMEx_MasterConfigSynchronization>
	BSP_LED_On(LED2);
 800c4b2:	4640      	mov	r0, r8
 800c4b4:	f7fa f87a 	bl	80065ac <BSP_LED_On>
	HAL_Delay(500);
 800c4b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c4bc:	f7fa fcfe 	bl	8006ebc <HAL_Delay>
	BSP_LED_Off(LED2);
 800c4c0:	4640      	mov	r0, r8
 800c4c2:	f7fa f87d 	bl	80065c0 <BSP_LED_Off>
	MotionFX_manager_MagCal_start(ALGO_PERIOD);
 800c4c6:	200a      	movs	r0, #10
 800c4c8:	f7ff fbe5 	bl	800bc96 <MotionFX_manager_MagCal_start>
	MotionFX_MagCal_getParams(&mag_cal_test);
 800c4cc:	a813      	add	r0, sp, #76	; 0x4c
 800c4ce:	f00c fbc3 	bl	8018c58 <MotionFX_MagCal_getParams>
	if (mag_cal_test.cal_quality == MFX_MAGCALGOOD)
 800c4d2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800c4d6:	2b03      	cmp	r3, #3
 800c4d8:	d11c      	bne.n	800c514 <main+0x248>
		ans_float = (mag_cal_test.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 800c4da:	eddf 6a29 	vldr	s13, [pc, #164]	; 800c580 <main+0x2b4>
 800c4de:	ed9d 7a13 	vldr	s14, [sp, #76]	; 0x4c
		MagOffset.x = (int32_t)ans_float;
 800c4e2:	4b28      	ldr	r3, [pc, #160]	; (800c584 <main+0x2b8>)
		ans_float = (mag_cal_test.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 800c4e4:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
		ans_float = (mag_cal_test.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 800c4e8:	ee27 7a26 	vmul.f32	s14, s14, s13
		ans_float = (mag_cal_test.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 800c4ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
		MagOffset.x = (int32_t)ans_float;
 800c4f0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
		MagOffset.z = (int32_t)ans_float;
 800c4f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		MagOffset.x = (int32_t)ans_float;
 800c4f8:	ed83 7a00 	vstr	s14, [r3]
		ans_float = (mag_cal_test.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 800c4fc:	ed9d 7a14 	vldr	s14, [sp, #80]	; 0x50
		MagOffset.z = (int32_t)ans_float;
 800c500:	edc3 7a02 	vstr	s15, [r3, #8]
		ans_float = (mag_cal_test.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 800c504:	ee27 7a26 	vmul.f32	s14, s14, s13
		MagOffset.y = (int32_t)ans_float;
 800c508:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800c50c:	ed83 7a01 	vstr	s14, [r3, #4]
		MagCalStatus = 1;
 800c510:	4b1d      	ldr	r3, [pc, #116]	; (800c588 <main+0x2bc>)
 800c512:	701f      	strb	r7, [r3, #0]
			status = XNUCLEO53L1A1_ResetId(ToFSensor, 0);
 800c514:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800c594 <main+0x2c8>
{
 800c518:	2600      	movs	r6, #0
 800c51a:	4647      	mov	r7, r8
			status = XNUCLEO53L1A1_ResetId(ToFSensor, 0);
 800c51c:	4630      	mov	r0, r6
 800c51e:	2100      	movs	r1, #0
 800c520:	f7fa f9e4 	bl	80068ec <XNUCLEO53L1A1_ResetId>
 800c524:	3601      	adds	r6, #1
		for (ToFSensor = 0; ToFSensor < 3; ToFSensor++) {
 800c526:	2e03      	cmp	r6, #3
			status = XNUCLEO53L1A1_ResetId(ToFSensor, 0);
 800c528:	f8c8 0000 	str.w	r0, [r8]
		for (ToFSensor = 0; ToFSensor < 3; ToFSensor++) {
 800c52c:	d1f6      	bne.n	800c51c <main+0x250>
 800c52e:	4e17      	ldr	r6, [pc, #92]	; (800c58c <main+0x2c0>)
				Dev = &devCenter;
 800c530:	f8df b064 	ldr.w	fp, [pc, #100]	; 800c598 <main+0x2cc>
			printf("VL53L1X: %02X\n\r", wordData);
 800c534:	f8df a064 	ldr.w	sl, [pc, #100]	; 800c59c <main+0x2d0>
 800c538:	f04f 0900 	mov.w	r9, #0
 800c53c:	fa5f f889 	uxtb.w	r8, r9
			switch (ToFSensor) {
 800c540:	f1b8 0f01 	cmp.w	r8, #1
 800c544:	d02c      	beq.n	800c5a0 <main+0x2d4>
 800c546:	f1b8 0f02 	cmp.w	r8, #2
 800c54a:	f000 82ca 	beq.w	800cae2 <main+0x816>
				Dev = &devLeft;
 800c54e:	4b10      	ldr	r3, [pc, #64]	; (800c590 <main+0x2c4>)
				Dev = &devRight;
 800c550:	6033      	str	r3, [r6, #0]
				break;
 800c552:	e027      	b.n	800c5a4 <main+0x2d8>
 800c554:	40023800 	.word	0x40023800
 800c558:	200014a4 	.word	0x200014a4
 800c55c:	0801da9f 	.word	0x0801da9f
 800c560:	20001498 	.word	0x20001498
 800c564:	20003550 	.word	0x20003550
 800c568:	200026ec 	.word	0x200026ec
 800c56c:	2000262c 	.word	0x2000262c
 800c570:	200026f0 	.word	0x200026f0
 800c574:	200026cc 	.word	0x200026cc
 800c578:	40002800 	.word	0x40002800
 800c57c:	40000c00 	.word	0x40000c00
 800c580:	43fa0000 	.word	0x43fa0000
 800c584:	20002640 	.word	0x20002640
 800c588:	2000263c 	.word	0x2000263c
 800c58c:	20001494 	.word	0x20001494
 800c590:	200029e8 	.word	0x200029e8
 800c594:	200035cc 	.word	0x200035cc
 800c598:	20002d8c 	.word	0x20002d8c
 800c59c:	0801dabc 	.word	0x0801dabc
				Dev = &devCenter;
 800c5a0:	f8c6 b000 	str.w	fp, [r6]
			status = XNUCLEO53L1A1_ResetId(ToFSensor, 1);
 800c5a4:	2101      	movs	r1, #1
 800c5a6:	4648      	mov	r0, r9
 800c5a8:	f7fa f9a0 	bl	80068ec <XNUCLEO53L1A1_ResetId>
 800c5ac:	6038      	str	r0, [r7, #0]
			Dev->comms_speed_khz = 400;
 800c5ae:	6830      	ldr	r0, [r6, #0]
 800c5b0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800c5b4:	f8a0 339a 	strh.w	r3, [r0, #922]	; 0x39a
			Dev->I2cHandle = &hi2c1;
 800c5b8:	4bdb      	ldr	r3, [pc, #876]	; (800c928 <main+0x65c>)
 800c5ba:	f8c0 33a0 	str.w	r3, [r0, #928]	; 0x3a0
			Dev->comms_type = 1;
 800c5be:	2301      	movs	r3, #1
 800c5c0:	f880 3399 	strb.w	r3, [r0, #921]	; 0x399
			Dev->I2cDevAddr = 0x52; /* default ToF sensor I2C address*/
 800c5c4:	2352      	movs	r3, #82	; 0x52
			VL53L1_RdWord(Dev, 0x010F, &wordData);
 800c5c6:	f10d 023e 	add.w	r2, sp, #62	; 0x3e
			Dev->I2cDevAddr = 0x52; /* default ToF sensor I2C address*/
 800c5ca:	f880 3398 	strb.w	r3, [r0, #920]	; 0x398
			VL53L1_RdWord(Dev, 0x010F, &wordData);
 800c5ce:	f240 110f 	movw	r1, #271	; 0x10f
 800c5d2:	f000 ffb3 	bl	800d53c <VL53L1_RdWord>
			printf("VL53L1X: %02X\n\r", wordData);
 800c5d6:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
 800c5da:	4650      	mov	r0, sl
 800c5dc:	f00f f9f0 	bl	801b9c0 <iprintf>
			newI2C = Dev->I2cDevAddr + (ToFSensor + 1) * 2;
 800c5e0:	6830      	ldr	r0, [r6, #0]
 800c5e2:	f108 0301 	add.w	r3, r8, #1
 800c5e6:	f890 8398 	ldrb.w	r8, [r0, #920]	; 0x398
 800c5ea:	eb08 0843 	add.w	r8, r8, r3, lsl #1
 800c5ee:	fa5f f888 	uxtb.w	r8, r8
			status = VL53L1_SetDeviceAddress(Dev, newI2C);
 800c5f2:	4641      	mov	r1, r8
 800c5f4:	f7f7 f9d6 	bl	80039a4 <VL53L1_SetDeviceAddress>
 800c5f8:	6038      	str	r0, [r7, #0]
			Dev->I2cDevAddr = newI2C;
 800c5fa:	6830      	ldr	r0, [r6, #0]
			VL53L1_RdWord(Dev, 0x010F, &wordData);
 800c5fc:	f10d 023e 	add.w	r2, sp, #62	; 0x3e
 800c600:	f240 110f 	movw	r1, #271	; 0x10f
			Dev->I2cDevAddr = newI2C;
 800c604:	f880 8398 	strb.w	r8, [r0, #920]	; 0x398
			VL53L1_RdWord(Dev, 0x010F, &wordData);
 800c608:	f000 ff98 	bl	800d53c <VL53L1_RdWord>
			printf("VL53L1X: %02X\n\r", wordData);
 800c60c:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
 800c610:	4650      	mov	r0, sl
 800c612:	f00f f9d5 	bl	801b9c0 <iprintf>
			status = VL53L1_WaitDeviceBooted(Dev);
 800c616:	6830      	ldr	r0, [r6, #0]
 800c618:	f7f7 f9c8 	bl	80039ac <VL53L1_WaitDeviceBooted>
 800c61c:	6038      	str	r0, [r7, #0]
			status = VL53L1_DataInit(Dev);
 800c61e:	6830      	ldr	r0, [r6, #0]
 800c620:	f7f7 fb71 	bl	8003d06 <VL53L1_DataInit>
 800c624:	6038      	str	r0, [r7, #0]
			status = VL53L1_StaticInit(Dev);
 800c626:	6830      	ldr	r0, [r6, #0]
 800c628:	f7f7 faa8 	bl	8003b7c <VL53L1_StaticInit>
			status = VL53L1_SetDistanceMode(Dev, VL53L1_DISTANCEMODE_LONG);
 800c62c:	2103      	movs	r1, #3
			status = VL53L1_StaticInit(Dev);
 800c62e:	6038      	str	r0, [r7, #0]
			status = VL53L1_SetDistanceMode(Dev, VL53L1_DISTANCEMODE_LONG);
 800c630:	6830      	ldr	r0, [r6, #0]
 800c632:	f7f7 f9bf 	bl	80039b4 <VL53L1_SetDistanceMode>
			status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(Dev, 50000);
 800c636:	f24c 3150 	movw	r1, #50000	; 0xc350
			status = VL53L1_SetDistanceMode(Dev, VL53L1_DISTANCEMODE_LONG);
 800c63a:	6038      	str	r0, [r7, #0]
			status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(Dev, 50000);
 800c63c:	6830      	ldr	r0, [r6, #0]
 800c63e:	f7f7 f9f5 	bl	8003a2c <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
			status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev, 100);
 800c642:	2164      	movs	r1, #100	; 0x64
			status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(Dev, 50000);
 800c644:	6038      	str	r0, [r7, #0]
			status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev, 100);
 800c646:	6830      	ldr	r0, [r6, #0]
 800c648:	f7f7 fb10 	bl	8003c6c <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 800c64c:	f109 0901 	add.w	r9, r9, #1
		for (ToFSensor = 0; ToFSensor < 3; ToFSensor++) {
 800c650:	f1b9 0f03 	cmp.w	r9, #3
			status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev, 100);
 800c654:	6038      	str	r0, [r7, #0]
		for (ToFSensor = 0; ToFSensor < 3; ToFSensor++) {
 800c656:	f47f af71 	bne.w	800c53c <main+0x270>
		printf("\r\nSensors initialized \r\n");
 800c65a:	48b4      	ldr	r0, [pc, #720]	; (800c92c <main+0x660>)
  (void)HAL_RTC_GetTime(&RtcHandle, &stimestructure, FORMAT_BIN);
 800c65c:	4fb4      	ldr	r7, [pc, #720]	; (800c930 <main+0x664>)
  printf("ROT XYZ: %0.2f %0.2f %0.2f ACC XYZ: %0.2f %0.2f %0.2f HDG = %0.2f HDGe = %0.2f \r\n",
 800c65e:	4eb5      	ldr	r6, [pc, #724]	; (800c934 <main+0x668>)
		printf("\r\nSensors initialized \r\n");
 800c660:	f00f fa22 	bl	801baa8 <puts>
		printf("\r\nInitialing motors ... \r\n");
 800c664:	48b4      	ldr	r0, [pc, #720]	; (800c938 <main+0x66c>)
 800c666:	f00f fa1f 	bl	801baa8 <puts>
		motor_init();
 800c66a:	f000 fa89 	bl	800cb80 <motor_init>
		printf("\r\nMotors initialized \r\n");
 800c66e:	48b3      	ldr	r0, [pc, #716]	; (800c93c <main+0x670>)
 800c670:	f00f fa1a 	bl	801baa8 <puts>
		printf("\r\nConsole ready ... \r\n");
 800c674:	48b2      	ldr	r0, [pc, #712]	; (800c940 <main+0x674>)
 800c676:	f00f fa17 	bl	801baa8 <puts>
		  	RangeData = MeasureSensors();
 800c67a:	f7ff fd7b 	bl	800c174 <MeasureSensors>
  (void)HAL_RTC_GetTime(&RtcHandle, &stimestructure, FORMAT_BIN);
 800c67e:	2200      	movs	r2, #0
 800c680:	a929      	add	r1, sp, #164	; 0xa4
 800c682:	4638      	mov	r0, r7
 800c684:	f7fd fe00 	bl	800a288 <HAL_RTC_GetTime>
  (void)HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, FORMAT_BIN);
 800c688:	2200      	movs	r2, #0
 800c68a:	a920      	add	r1, sp, #128	; 0x80
 800c68c:	4638      	mov	r0, r7
 800c68e:	f7fd fed7 	bl	800a440 <HAL_RTC_GetDate>
  ans_int32 = (RtcSynchPrediv - (int32_t)stimestructure.SubSeconds) * 100;
 800c692:	682a      	ldr	r2, [r5, #0]
 800c694:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800c696:	1ad1      	subs	r1, r2, r3
 800c698:	2364      	movs	r3, #100	; 0x64
 800c69a:	434b      	muls	r3, r1
  ans_int32 /= RtcSynchPrediv + 1;
 800c69c:	3201      	adds	r2, #1
  Msg->Data[3] = (uint8_t)stimestructure.Hours;
 800c69e:	f89d 10a4 	ldrb.w	r1, [sp, #164]	; 0xa4
  ans_int32 /= RtcSynchPrediv + 1;
 800c6a2:	fb93 f3f2 	sdiv	r3, r3, r2
  sub_sec = (uint8_t)ans_uint32;
 800c6a6:	f88d 319e 	strb.w	r3, [sp, #414]	; 0x19e
  if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 800c6aa:	6823      	ldr	r3, [r4, #0]
  Msg->Data[3] = (uint8_t)stimestructure.Hours;
 800c6ac:	f88d 119b 	strb.w	r1, [sp, #411]	; 0x19b
  Msg->Data[4] = (uint8_t)stimestructure.Minutes;
 800c6b0:	f89d 10a5 	ldrb.w	r1, [sp, #165]	; 0xa5
 800c6b4:	f88d 119c 	strb.w	r1, [sp, #412]	; 0x19c
  if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 800c6b8:	06db      	lsls	r3, r3, #27
  Msg->Data[5] = (uint8_t)stimestructure.Seconds;
 800c6ba:	f89d 10a6 	ldrb.w	r1, [sp, #166]	; 0xa6
 800c6be:	f88d 119d 	strb.w	r1, [sp, #413]	; 0x19d
  if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 800c6c2:	d51b      	bpl.n	800c6fc <main+0x430>
    (void)IKS01A2_MOTION_SENSOR_GetAxes(Instance, MOTION_ACCELERO, &AccValue);
 800c6c4:	f8df 8290 	ldr.w	r8, [pc, #656]	; 800c958 <main+0x68c>
 800c6c8:	2102      	movs	r1, #2
 800c6ca:	4642      	mov	r2, r8
 800c6cc:	2000      	movs	r0, #0
 800c6ce:	f7f9 ff1d 	bl	800650c <IKS01A2_MOTION_SENSOR_GetAxes>
    Serialize_s32(&Msg->Data[19], (int32_t)AccValue.x, 4);
 800c6d2:	2204      	movs	r2, #4
 800c6d4:	f8d8 1000 	ldr.w	r1, [r8]
 800c6d8:	f20d 10ab 	addw	r0, sp, #427	; 0x1ab
 800c6dc:	f000 fb04 	bl	800cce8 <Serialize_s32>
    Serialize_s32(&Msg->Data[23], (int32_t)AccValue.y, 4);
 800c6e0:	2204      	movs	r2, #4
 800c6e2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c6e6:	f20d 10af 	addw	r0, sp, #431	; 0x1af
 800c6ea:	f000 fafd 	bl	800cce8 <Serialize_s32>
    Serialize_s32(&Msg->Data[27], (int32_t)AccValue.z, 4);
 800c6ee:	2204      	movs	r2, #4
 800c6f0:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800c6f4:	f20d 10b3 	addw	r0, sp, #435	; 0x1b3
 800c6f8:	f000 faf6 	bl	800cce8 <Serialize_s32>
  if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
 800c6fc:	6823      	ldr	r3, [r4, #0]
 800c6fe:	0698      	lsls	r0, r3, #26
 800c700:	d51b      	bpl.n	800c73a <main+0x46e>
    (void)IKS01A2_MOTION_SENSOR_GetAxes(Instance, MOTION_GYRO, &GyrValue);
 800c702:	f8df 824c 	ldr.w	r8, [pc, #588]	; 800c950 <main+0x684>
 800c706:	2101      	movs	r1, #1
 800c708:	4642      	mov	r2, r8
 800c70a:	2000      	movs	r0, #0
 800c70c:	f7f9 fefe 	bl	800650c <IKS01A2_MOTION_SENSOR_GetAxes>
    Serialize_s32(&Msg->Data[31], GyrValue.x, 4);
 800c710:	2204      	movs	r2, #4
 800c712:	f8d8 1000 	ldr.w	r1, [r8]
 800c716:	f20d 10b7 	addw	r0, sp, #439	; 0x1b7
 800c71a:	f000 fae5 	bl	800cce8 <Serialize_s32>
    Serialize_s32(&Msg->Data[35], GyrValue.y, 4);
 800c71e:	2204      	movs	r2, #4
 800c720:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c724:	f20d 10bb 	addw	r0, sp, #443	; 0x1bb
 800c728:	f000 fade 	bl	800cce8 <Serialize_s32>
    Serialize_s32(&Msg->Data[39], GyrValue.z, 4);
 800c72c:	2204      	movs	r2, #4
 800c72e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800c732:	f20d 10bf 	addw	r0, sp, #447	; 0x1bf
 800c736:	f000 fad7 	bl	800cce8 <Serialize_s32>
  if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
 800c73a:	6823      	ldr	r3, [r4, #0]
 800c73c:	0659      	lsls	r1, r3, #25
 800c73e:	d57d      	bpl.n	800c83c <main+0x570>
    (void)IKS01A2_MOTION_SENSOR_GetAxes(Instance, MOTION_MAGNETO, &MagValue);
 800c740:	f8df 8218 	ldr.w	r8, [pc, #536]	; 800c95c <main+0x690>
    if (MagCalStatus == 0U)
 800c744:	f8df a218 	ldr.w	sl, [pc, #536]	; 800c960 <main+0x694>
 800c748:	f8df 9218 	ldr.w	r9, [pc, #536]	; 800c964 <main+0x698>
    (void)IKS01A2_MOTION_SENSOR_GetAxes(Instance, MOTION_MAGNETO, &MagValue);
 800c74c:	4642      	mov	r2, r8
 800c74e:	2104      	movs	r1, #4
 800c750:	2002      	movs	r0, #2
 800c752:	f7f9 fedb 	bl	800650c <IKS01A2_MOTION_SENSOR_GetAxes>
    if (MagCalStatus == 0U)
 800c756:	f89a 3000 	ldrb.w	r3, [sl]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d146      	bne.n	800c7ec <main+0x520>
      mag_data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 800c75e:	edd8 7a00 	vldr	s15, [r8]
 800c762:	eddf 6a78 	vldr	s13, [pc, #480]	; 800c944 <main+0x678>
      mag_data_in.time_stamp = (int)MagTimeStamp;
 800c766:	4a78      	ldr	r2, [pc, #480]	; (800c948 <main+0x67c>)
      mag_data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 800c768:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      mag_data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 800c76c:	edd8 7a01 	vldr	s15, [r8, #4]
      mag_data_in.time_stamp = (int)MagTimeStamp;
 800c770:	6813      	ldr	r3, [r2, #0]
 800c772:	9323      	str	r3, [sp, #140]	; 0x8c
      mag_data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 800c774:	ee27 7a26 	vmul.f32	s14, s14, s13
      MagTimeStamp += (uint32_t)ALGO_PERIOD;
 800c778:	330a      	adds	r3, #10
      mag_data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 800c77a:	ed8d 7a20 	vstr	s14, [sp, #128]	; 0x80
      mag_data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 800c77e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      mag_data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 800c782:	edd8 7a02 	vldr	s15, [r8, #8]
      MagTimeStamp += (uint32_t)ALGO_PERIOD;
 800c786:	6013      	str	r3, [r2, #0]
      mag_data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 800c788:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      mag_data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 800c78c:	ee27 7a26 	vmul.f32	s14, s14, s13
      mag_data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 800c790:	ee67 7aa6 	vmul.f32	s15, s15, s13
      MotionFX_manager_MagCal_run(&mag_data_in, &mag_data_out);
 800c794:	a929      	add	r1, sp, #164	; 0xa4
 800c796:	a820      	add	r0, sp, #128	; 0x80
      mag_data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 800c798:	ed8d 7a21 	vstr	s14, [sp, #132]	; 0x84
      mag_data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 800c79c:	edcd 7a22 	vstr	s15, [sp, #136]	; 0x88
      MotionFX_manager_MagCal_run(&mag_data_in, &mag_data_out);
 800c7a0:	f7ff fa70 	bl	800bc84 <MotionFX_manager_MagCal_run>
      if (mag_data_out.cal_quality == MFX_MAGCALGOOD)
 800c7a4:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 800c7a8:	2b03      	cmp	r3, #3
 800c7aa:	d11f      	bne.n	800c7ec <main+0x520>
        ans_float = (mag_data_out.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 800c7ac:	eddf 6a67 	vldr	s13, [pc, #412]	; 800c94c <main+0x680>
 800c7b0:	ed9d 7a29 	vldr	s14, [sp, #164]	; 0xa4
        ans_float = (mag_data_out.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 800c7b4:	eddd 7a2b 	vldr	s15, [sp, #172]	; 0xac
        ans_float = (mag_data_out.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 800c7b8:	ee27 7a26 	vmul.f32	s14, s14, s13
        ans_float = (mag_data_out.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 800c7bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
        MagOffset.x = (int32_t)ans_float;
 800c7c0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
        MagOffset.z = (int32_t)ans_float;
 800c7c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
        MagOffset.x = (int32_t)ans_float;
 800c7c8:	ed89 7a00 	vstr	s14, [r9]
        ans_float = (mag_data_out.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 800c7cc:	ed9d 7a2a 	vldr	s14, [sp, #168]	; 0xa8
        MagOffset.z = (int32_t)ans_float;
 800c7d0:	edc9 7a02 	vstr	s15, [r9, #8]
        ans_float = (mag_data_out.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 800c7d4:	ee27 7a26 	vmul.f32	s14, s14, s13
        MagCalStatus = 1;
 800c7d8:	2301      	movs	r3, #1
        MagOffset.y = (int32_t)ans_float;
 800c7da:	eebd 7ac7 	vcvt.s32.f32	s14, s14
        MotionFX_manager_MagCal_stop(ALGO_PERIOD);
 800c7de:	200a      	movs	r0, #10
        MagCalStatus = 1;
 800c7e0:	f88a 3000 	strb.w	r3, [sl]
        MagOffset.y = (int32_t)ans_float;
 800c7e4:	ed89 7a01 	vstr	s14, [r9, #4]
        MotionFX_manager_MagCal_stop(ALGO_PERIOD);
 800c7e8:	f7ff fa58 	bl	800bc9c <MotionFX_manager_MagCal_stop>
    MagValue.x = (int32_t)(MagValue.x - MagOffset.x);
 800c7ec:	f8d8 1000 	ldr.w	r1, [r8]
 800c7f0:	f8d9 3000 	ldr.w	r3, [r9]
    MagValue.y = (int32_t)(MagValue.y - MagOffset.y);
 800c7f4:	f8d9 2004 	ldr.w	r2, [r9, #4]
    MagValue.x = (int32_t)(MagValue.x - MagOffset.x);
 800c7f8:	1ac9      	subs	r1, r1, r3
    MagValue.y = (int32_t)(MagValue.y - MagOffset.y);
 800c7fa:	f8d8 3004 	ldr.w	r3, [r8, #4]
    MagValue.x = (int32_t)(MagValue.x - MagOffset.x);
 800c7fe:	f8c8 1000 	str.w	r1, [r8]
    MagValue.y = (int32_t)(MagValue.y - MagOffset.y);
 800c802:	1a9b      	subs	r3, r3, r2
 800c804:	f8c8 3004 	str.w	r3, [r8, #4]
    MagValue.z = (int32_t)(MagValue.z - MagOffset.z);
 800c808:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800c80c:	f8d8 3008 	ldr.w	r3, [r8, #8]
    Serialize_s32(&Msg->Data[43], MagValue.x, 4);
 800c810:	f20d 10c3 	addw	r0, sp, #451	; 0x1c3
    MagValue.z = (int32_t)(MagValue.z - MagOffset.z);
 800c814:	1a9b      	subs	r3, r3, r2
    Serialize_s32(&Msg->Data[43], MagValue.x, 4);
 800c816:	2204      	movs	r2, #4
    MagValue.z = (int32_t)(MagValue.z - MagOffset.z);
 800c818:	f8c8 3008 	str.w	r3, [r8, #8]
    Serialize_s32(&Msg->Data[43], MagValue.x, 4);
 800c81c:	f000 fa64 	bl	800cce8 <Serialize_s32>
    Serialize_s32(&Msg->Data[47], MagValue.y, 4);
 800c820:	2204      	movs	r2, #4
 800c822:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c826:	f20d 10c7 	addw	r0, sp, #455	; 0x1c7
 800c82a:	f000 fa5d 	bl	800cce8 <Serialize_s32>
    Serialize_s32(&Msg->Data[51], MagValue.z, 4);
 800c82e:	2204      	movs	r2, #4
 800c830:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800c834:	f20d 10cb 	addw	r0, sp, #459	; 0x1cb
 800c838:	f000 fa56 	bl	800cce8 <Serialize_s32>
  if ((SensorsEnabled & HUMIDITY_SENSOR) == HUMIDITY_SENSOR)
 800c83c:	6823      	ldr	r3, [r4, #0]
 800c83e:	075a      	lsls	r2, r3, #29
 800c840:	d507      	bpl.n	800c852 <main+0x586>
    (void)IKS01A2_ENV_SENSOR_GetValue(Instance, ENV_HUMIDITY, &hum_value);
 800c842:	aa29      	add	r2, sp, #164	; 0xa4
 800c844:	2104      	movs	r1, #4
 800c846:	2000      	movs	r0, #0
 800c848:	f7f9 fc98 	bl	800617c <IKS01A2_ENV_SENSOR_GetValue>
    (void)memcpy(&Msg->Data[15], (void *)&hum_value, sizeof(float));;
 800c84c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800c84e:	f8cd 31a7 	str.w	r3, [sp, #423]	; 0x1a7
  if ((SensorsEnabled & TEMPERATURE_SENSOR) == TEMPERATURE_SENSOR)
 800c852:	6823      	ldr	r3, [r4, #0]
 800c854:	079b      	lsls	r3, r3, #30
 800c856:	d507      	bpl.n	800c868 <main+0x59c>
    (void)IKS01A2_ENV_SENSOR_GetValue(Instance, ENV_TEMPERATURE, &temp_value);
 800c858:	aa29      	add	r2, sp, #164	; 0xa4
 800c85a:	2101      	movs	r1, #1
 800c85c:	2000      	movs	r0, #0
 800c85e:	f7f9 fc8d 	bl	800617c <IKS01A2_ENV_SENSOR_GetValue>
    (void)memcpy(&Msg->Data[11], (void *)&temp_value, sizeof(float));
 800c862:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800c864:	f8cd 31a3 	str.w	r3, [sp, #419]	; 0x1a3
  if ((SensorsEnabled & PRESSURE_SENSOR) == PRESSURE_SENSOR)
 800c868:	6823      	ldr	r3, [r4, #0]
 800c86a:	07d8      	lsls	r0, r3, #31
 800c86c:	d507      	bpl.n	800c87e <main+0x5b2>
    (void)IKS01A2_ENV_SENSOR_GetValue(Instance, ENV_PRESSURE, &press_value);
 800c86e:	aa29      	add	r2, sp, #164	; 0xa4
 800c870:	2102      	movs	r1, #2
 800c872:	2001      	movs	r0, #1
 800c874:	f7f9 fc82 	bl	800617c <IKS01A2_ENV_SENSOR_GetValue>
    (void)memcpy(&Msg->Data[7], (void *)&press_value, sizeof(float));
 800c878:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800c87a:	f8cd 319f 	str.w	r3, [sp, #415]	; 0x19f
  if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 800c87e:	6823      	ldr	r3, [r4, #0]
 800c880:	06d9      	lsls	r1, r3, #27
 800c882:	f140 80bb 	bpl.w	800c9fc <main+0x730>
    if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
 800c886:	6823      	ldr	r3, [r4, #0]
 800c888:	069a      	lsls	r2, r3, #26
 800c88a:	f140 80b7 	bpl.w	800c9fc <main+0x730>
      if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
 800c88e:	6823      	ldr	r3, [r4, #0]
 800c890:	065b      	lsls	r3, r3, #25
 800c892:	f140 80b3 	bpl.w	800c9fc <main+0x730>
        data_in.gyro[0] = (float)GyrValue.x * FROM_MDPS_TO_DPS;
 800c896:	4b2e      	ldr	r3, [pc, #184]	; (800c950 <main+0x684>)
        data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 800c898:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800c944 <main+0x678>
        data_in.gyro[0] = (float)GyrValue.x * FROM_MDPS_TO_DPS;
 800c89c:	edd3 7a00 	vldr	s15, [r3]
 800c8a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c8a4:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800c954 <main+0x688>
 800c8a8:	ee27 7a27 	vmul.f32	s14, s14, s15
        BSP_LED_On(LED2);
 800c8ac:	2000      	movs	r0, #0
        data_in.gyro[0] = (float)GyrValue.x * FROM_MDPS_TO_DPS;
 800c8ae:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
        data_in.gyro[1] = (float)GyrValue.y * FROM_MDPS_TO_DPS;
 800c8b2:	ed93 7a01 	vldr	s14, [r3, #4]
 800c8b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c8ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8be:	ed8d 7a27 	vstr	s14, [sp, #156]	; 0x9c
        data_in.gyro[2] = (float)GyrValue.z * FROM_MDPS_TO_DPS;
 800c8c2:	ed93 7a02 	vldr	s14, [r3, #8]
        data_in.acc[0] = (float)AccValue.x * FROM_MG_TO_G;
 800c8c6:	4b24      	ldr	r3, [pc, #144]	; (800c958 <main+0x68c>)
        data_in.gyro[2] = (float)GyrValue.z * FROM_MDPS_TO_DPS;
 800c8c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c8cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8d0:	ed8d 7a28 	vstr	s14, [sp, #160]	; 0xa0
        data_in.acc[0] = (float)AccValue.x * FROM_MG_TO_G;
 800c8d4:	ed93 7a00 	vldr	s14, [r3]
 800c8d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c8dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8e0:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
        data_in.acc[1] = (float)AccValue.y * FROM_MG_TO_G;
 800c8e4:	ed93 7a01 	vldr	s14, [r3, #4]
 800c8e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c8ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8f0:	ed8d 7a24 	vstr	s14, [sp, #144]	; 0x90
        data_in.acc[2] = (float)AccValue.z * FROM_MG_TO_G;
 800c8f4:	ed93 7a02 	vldr	s14, [r3, #8]
        data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 800c8f8:	4b18      	ldr	r3, [pc, #96]	; (800c95c <main+0x690>)
        data_in.acc[2] = (float)AccValue.z * FROM_MG_TO_G;
 800c8fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c8fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c902:	edcd 7a25 	vstr	s15, [sp, #148]	; 0x94
        data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 800c906:	edd3 7a00 	vldr	s15, [r3]
 800c90a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 800c90e:	edd3 7a01 	vldr	s15, [r3, #4]
        data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 800c912:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c916:	ed8d 7a20 	vstr	s14, [sp, #128]	; 0x80
        data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 800c91a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 800c91e:	edd3 7a02 	vldr	s15, [r3, #8]
 800c922:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c926:	e021      	b.n	800c96c <main+0x6a0>
 800c928:	20002934 	.word	0x20002934
 800c92c:	0801dacc 	.word	0x0801dacc
 800c930:	200026cc 	.word	0x200026cc
 800c934:	0801db2b 	.word	0x0801db2b
 800c938:	0801dae4 	.word	0x0801dae4
 800c93c:	0801dafe 	.word	0x0801dafe
 800c940:	0801db15 	.word	0x0801db15
 800c944:	3b03126f 	.word	0x3b03126f
 800c948:	2000264c 	.word	0x2000264c
 800c94c:	43fa0000 	.word	0x43fa0000
 800c950:	20002630 	.word	0x20002630
 800c954:	3a83126f 	.word	0x3a83126f
 800c958:	20002620 	.word	0x20002620
 800c95c:	20002650 	.word	0x20002650
 800c960:	2000263c 	.word	0x2000263c
 800c964:	20002640 	.word	0x20002640
 800c968:	3c23d70a 	.word	0x3c23d70a
        data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 800c96c:	ee27 7a26 	vmul.f32	s14, s14, s13
        data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 800c970:	ee67 7aa6 	vmul.f32	s15, s15, s13
        data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 800c974:	ed8d 7a21 	vstr	s14, [sp, #132]	; 0x84
        data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 800c978:	edcd 7a22 	vstr	s15, [sp, #136]	; 0x88
        BSP_LED_On(LED2);
 800c97c:	f7f9 fe16 	bl	80065ac <BSP_LED_On>
        MotionFX_manager_run(pdata_in, pdata_out, MOTIONFX_ENGINE_DELTATIME);
 800c980:	ed1f 0a07 	vldr	s0, [pc, #-28]	; 800c968 <main+0x69c>
 800c984:	a929      	add	r1, sp, #164	; 0xa4
 800c986:	a820      	add	r0, sp, #128	; 0x80
 800c988:	f7ff f950 	bl	800bc2c <MotionFX_manager_run>
        BSP_LED_Off(LED2);
 800c98c:	2000      	movs	r0, #0
 800c98e:	f7f9 fe17 	bl	80065c0 <BSP_LED_Off>
        if (Enabled6X == 1U)
 800c992:	4b6c      	ldr	r3, [pc, #432]	; (800cb44 <main+0x878>)
 800c994:	781b      	ldrb	r3, [r3, #0]
 800c996:	2b01      	cmp	r3, #1
 800c998:	f040 80a5 	bne.w	800cae6 <main+0x81a>
          (void)memcpy(&Msg->Data[55], (void *)pdata_out->quaternion_6X, 4U * sizeof(float));
 800c99c:	f10d 0cec 	add.w	ip, sp, #236	; 0xec
 800c9a0:	f20d 1ecf 	addw	lr, sp, #463	; 0x1cf
 800c9a4:	ab3f      	add	r3, sp, #252	; 0xfc
 800c9a6:	4662      	mov	r2, ip
 800c9a8:	ca03      	ldmia	r2!, {r0, r1}
 800c9aa:	429a      	cmp	r2, r3
 800c9ac:	f8ce 0000 	str.w	r0, [lr]
 800c9b0:	f8ce 1004 	str.w	r1, [lr, #4]
 800c9b4:	4694      	mov	ip, r2
 800c9b6:	f10e 0e08 	add.w	lr, lr, #8
 800c9ba:	d1f4      	bne.n	800c9a6 <main+0x6da>
          (void)memcpy(&Msg->Data[71], (void *)pdata_out->rotation_6X, 3U * sizeof(float));
 800c9bc:	aa38      	add	r2, sp, #224	; 0xe0
 800c9be:	ca03      	ldmia	r2!, {r0, r1}
 800c9c0:	f8cd 01df 	str.w	r0, [sp, #479]	; 0x1df
 800c9c4:	6810      	ldr	r0, [r2, #0]
 800c9c6:	f8cd 11e3 	str.w	r1, [sp, #483]	; 0x1e3
 800c9ca:	f8cd 01e7 	str.w	r0, [sp, #487]	; 0x1e7
          (void)memcpy(&Msg->Data[83], (void *)pdata_out->gravity_6X, 3U * sizeof(float));
 800c9ce:	cb03      	ldmia	r3!, {r0, r1}
 800c9d0:	f8cd 01eb 	str.w	r0, [sp, #491]	; 0x1eb
 800c9d4:	6818      	ldr	r0, [r3, #0]
 800c9d6:	f8cd 11ef 	str.w	r1, [sp, #495]	; 0x1ef
          (void)memcpy(&Msg->Data[95], (void *)pdata_out->linear_acceleration_6X, 3U * sizeof(float));
 800c9da:	ab42      	add	r3, sp, #264	; 0x108
          (void)memcpy(&Msg->Data[83], (void *)pdata_out->gravity_6X, 3U * sizeof(float));
 800c9dc:	f8cd 01f3 	str.w	r0, [sp, #499]	; 0x1f3
          (void)memcpy(&Msg->Data[95], (void *)pdata_out->linear_acceleration_6X, 3U * sizeof(float));
 800c9e0:	cb03      	ldmia	r3!, {r0, r1}
 800c9e2:	f8cd 01f7 	str.w	r0, [sp, #503]	; 0x1f7
 800c9e6:	6818      	ldr	r0, [r3, #0]
          (void)memcpy(&Msg->Data[107], (void *) & (pdata_out->heading_6X), sizeof(float));
 800c9e8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c9ea:	f8cd 3203 	str.w	r3, [sp, #515]	; 0x203
          (void)memcpy(&Msg->Data[111], (void *) & (pdata_out->headingErr_6X), sizeof(float));
 800c9ee:	9b46      	ldr	r3, [sp, #280]	; 0x118
          (void)memcpy(&Msg->Data[95], (void *)pdata_out->linear_acceleration_6X, 3U * sizeof(float));
 800c9f0:	f8cd 11fb 	str.w	r1, [sp, #507]	; 0x1fb
 800c9f4:	f8cd 01ff 	str.w	r0, [sp, #511]	; 0x1ff
          (void)memcpy(&Msg->Data[111], (void *) & (pdata_out->headingErr_9X), sizeof(float));
 800c9f8:	f8cd 3207 	str.w	r3, [sp, #519]	; 0x207
  printf("ROT XYZ: %0.2f %0.2f %0.2f ACC XYZ: %0.2f %0.2f %0.2f HDG = %0.2f HDGe = %0.2f \r\n",
 800c9fc:	9829      	ldr	r0, [sp, #164]	; 0xa4
		      data_out = FX_Data_Handler(&msg_dat);
 800c9fe:	f8df a14c 	ldr.w	sl, [pc, #332]	; 800cb4c <main+0x880>
  printf("ROT XYZ: %0.2f %0.2f %0.2f ACC XYZ: %0.2f %0.2f %0.2f HDG = %0.2f HDGe = %0.2f \r\n",
 800ca02:	f7f3 fda9 	bl	8000558 <__aeabi_f2d>
 800ca06:	4680      	mov	r8, r0
 800ca08:	9837      	ldr	r0, [sp, #220]	; 0xdc
 800ca0a:	4689      	mov	r9, r1
 800ca0c:	f7f3 fda4 	bl	8000558 <__aeabi_f2d>
 800ca10:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ca14:	9836      	ldr	r0, [sp, #216]	; 0xd8
 800ca16:	f7f3 fd9f 	bl	8000558 <__aeabi_f2d>
 800ca1a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ca1e:	9835      	ldr	r0, [sp, #212]	; 0xd4
 800ca20:	f7f3 fd9a 	bl	8000558 <__aeabi_f2d>
 800ca24:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ca28:	9834      	ldr	r0, [sp, #208]	; 0xd0
 800ca2a:	f7f3 fd95 	bl	8000558 <__aeabi_f2d>
 800ca2e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ca32:	9833      	ldr	r0, [sp, #204]	; 0xcc
 800ca34:	f7f3 fd90 	bl	8000558 <__aeabi_f2d>
 800ca38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca3c:	982b      	ldr	r0, [sp, #172]	; 0xac
 800ca3e:	f7f3 fd8b 	bl	8000558 <__aeabi_f2d>
 800ca42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca46:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800ca48:	f7f3 fd86 	bl	8000558 <__aeabi_f2d>
 800ca4c:	464b      	mov	r3, r9
 800ca4e:	e9cd 0100 	strd	r0, r1, [sp]
 800ca52:	4642      	mov	r2, r8
 800ca54:	4630      	mov	r0, r6
 800ca56:	f00e ffb3 	bl	801b9c0 <iprintf>
return data_out;
 800ca5a:	a929      	add	r1, sp, #164	; 0xa4
 800ca5c:	2278      	movs	r2, #120	; 0x78
 800ca5e:	a847      	add	r0, sp, #284	; 0x11c
 800ca60:	f00e fa82 	bl	801af68 <memcpy>
		      data_out = FX_Data_Handler(&msg_dat);
 800ca64:	2278      	movs	r2, #120	; 0x78
 800ca66:	a947      	add	r1, sp, #284	; 0x11c
 800ca68:	4650      	mov	r0, sl
 800ca6a:	f00e fa7d 	bl	801af68 <memcpy>
		      printf("ROT XYZ: %0.2f %0.2f %0.2f ACC XYZ: %0.2f %0.2f %0.2f HDG = %0.2f HDGe = %0.2f \r\n",
 800ca6e:	f8da 0000 	ldr.w	r0, [sl]
 800ca72:	f7f3 fd71 	bl	8000558 <__aeabi_f2d>
 800ca76:	4680      	mov	r8, r0
 800ca78:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 800ca7c:	4689      	mov	r9, r1
 800ca7e:	f7f3 fd6b 	bl	8000558 <__aeabi_f2d>
 800ca82:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ca86:	f8da 0034 	ldr.w	r0, [sl, #52]	; 0x34
 800ca8a:	f7f3 fd65 	bl	8000558 <__aeabi_f2d>
 800ca8e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ca92:	f8da 0030 	ldr.w	r0, [sl, #48]	; 0x30
 800ca96:	f7f3 fd5f 	bl	8000558 <__aeabi_f2d>
 800ca9a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ca9e:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
 800caa2:	f7f3 fd59 	bl	8000558 <__aeabi_f2d>
 800caa6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800caaa:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 800caae:	f7f3 fd53 	bl	8000558 <__aeabi_f2d>
 800cab2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cab6:	f8da 0008 	ldr.w	r0, [sl, #8]
 800caba:	f7f3 fd4d 	bl	8000558 <__aeabi_f2d>
 800cabe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cac2:	f8da 0004 	ldr.w	r0, [sl, #4]
 800cac6:	f7f3 fd47 	bl	8000558 <__aeabi_f2d>
 800caca:	4642      	mov	r2, r8
 800cacc:	e9cd 0100 	strd	r0, r1, [sp]
 800cad0:	464b      	mov	r3, r9
 800cad2:	4630      	mov	r0, r6
 800cad4:	f00e ff74 	bl	801b9c0 <iprintf>
		 HAL_Delay(2000);
 800cad8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800cadc:	f7fa f9ee 	bl	8006ebc <HAL_Delay>
 800cae0:	e5cb      	b.n	800c67a <main+0x3ae>
				Dev = &devRight;
 800cae2:	4b19      	ldr	r3, [pc, #100]	; (800cb48 <main+0x87c>)
 800cae4:	e534      	b.n	800c550 <main+0x284>
          (void)memcpy(&Msg->Data[55], (void *)pdata_out->quaternion_9X, 4U * sizeof(float));
 800cae6:	f10d 0cb0 	add.w	ip, sp, #176	; 0xb0
 800caea:	f20d 12cf 	addw	r2, sp, #463	; 0x1cf
 800caee:	ab30      	add	r3, sp, #192	; 0xc0
 800caf0:	46e6      	mov	lr, ip
 800caf2:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 800caf6:	459e      	cmp	lr, r3
 800caf8:	6010      	str	r0, [r2, #0]
 800cafa:	6051      	str	r1, [r2, #4]
 800cafc:	46f4      	mov	ip, lr
 800cafe:	f102 0208 	add.w	r2, r2, #8
 800cb02:	d1f5      	bne.n	800caf0 <main+0x824>
          (void)memcpy(&Msg->Data[71], (void *)pdata_out->rotation_9X, 3U * sizeof(float));
 800cb04:	aa29      	add	r2, sp, #164	; 0xa4
 800cb06:	ca03      	ldmia	r2!, {r0, r1}
 800cb08:	f8cd 01df 	str.w	r0, [sp, #479]	; 0x1df
 800cb0c:	6810      	ldr	r0, [r2, #0]
 800cb0e:	f8cd 11e3 	str.w	r1, [sp, #483]	; 0x1e3
 800cb12:	f8cd 01e7 	str.w	r0, [sp, #487]	; 0x1e7
          (void)memcpy(&Msg->Data[83], (void *)pdata_out->gravity_9X, 3U * sizeof(float));
 800cb16:	cb03      	ldmia	r3!, {r0, r1}
 800cb18:	f8cd 01eb 	str.w	r0, [sp, #491]	; 0x1eb
 800cb1c:	6818      	ldr	r0, [r3, #0]
 800cb1e:	f8cd 11ef 	str.w	r1, [sp, #495]	; 0x1ef
          (void)memcpy(&Msg->Data[95], (void *)pdata_out->linear_acceleration_9X, 3U * sizeof(float));
 800cb22:	ab33      	add	r3, sp, #204	; 0xcc
          (void)memcpy(&Msg->Data[83], (void *)pdata_out->gravity_9X, 3U * sizeof(float));
 800cb24:	f8cd 01f3 	str.w	r0, [sp, #499]	; 0x1f3
          (void)memcpy(&Msg->Data[95], (void *)pdata_out->linear_acceleration_9X, 3U * sizeof(float));
 800cb28:	cb03      	ldmia	r3!, {r0, r1}
 800cb2a:	f8cd 01f7 	str.w	r0, [sp, #503]	; 0x1f7
 800cb2e:	6818      	ldr	r0, [r3, #0]
          (void)memcpy(&Msg->Data[107], (void *) & (pdata_out->heading_9X), sizeof(float));
 800cb30:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800cb32:	f8cd 3203 	str.w	r3, [sp, #515]	; 0x203
          (void)memcpy(&Msg->Data[95], (void *)pdata_out->linear_acceleration_9X, 3U * sizeof(float));
 800cb36:	f8cd 11fb 	str.w	r1, [sp, #507]	; 0x1fb
 800cb3a:	f8cd 01ff 	str.w	r0, [sp, #511]	; 0x1ff
          (void)memcpy(&Msg->Data[111], (void *) & (pdata_out->headingErr_9X), sizeof(float));
 800cb3e:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800cb40:	e75a      	b.n	800c9f8 <main+0x72c>
 800cb42:	bf00      	nop
 800cb44:	200025dc 	.word	0x200025dc
 800cb48:	20003134 	.word	0x20003134
 800cb4c:	200034d8 	.word	0x200034d8

0800cb50 <assert_failed>:
 */
void assert_failed(uint8_t *file, uint32_t line)
{
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number */
	printf("Wrong parameters value: file %s on line %d\r\n", file, line);
 800cb50:	460a      	mov	r2, r1
 800cb52:	4601      	mov	r1, r0
 800cb54:	4801      	ldr	r0, [pc, #4]	; (800cb5c <assert_failed+0xc>)
 800cb56:	f00e bf33 	b.w	801b9c0 <iprintf>
 800cb5a:	bf00      	nop
 800cb5c:	0801da72 	.word	0x0801da72

0800cb60 <MyFlagInterruptHandler>:
 * @brief  This function is the User handler for the flag interrupt
 * @param  None
 * @retval None
 */
void MyFlagInterruptHandler(void)
{
 800cb60:	b508      	push	{r3, lr}
	/* Code to be customised */
	/************************/
	/* Get the state of bridge A */
	uint16_t bridgeState = BSP_MotorControl_CmdGetStatus(0);
 800cb62:	2000      	movs	r0, #0
 800cb64:	f7fa f8da 	bl	8006d1c <BSP_MotorControl_CmdGetStatus>

	if (bridgeState == 0) {
 800cb68:	b948      	cbnz	r0, 800cb7e <MyFlagInterruptHandler+0x1e>
		if (BSP_MotorControl_GetDeviceState(0) != INACTIVE) {
 800cb6a:	f7fa f8c5 	bl	8006cf8 <BSP_MotorControl_GetDeviceState>
 800cb6e:	2808      	cmp	r0, #8
 800cb70:	d005      	beq.n	800cb7e <MyFlagInterruptHandler+0x1e>
			/* Bridge A was disabling due to overcurrent or over temperature */
			/* When  motor was running */
			Error_Handler(0XBAD0);
 800cb72:	f64b 20d0 	movw	r0, #47824	; 0xbad0
		}
	}
}
 800cb76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			Error_Handler(0XBAD0);
 800cb7a:	f7ff bb47 	b.w	800c20c <Error_Handler>
 800cb7e:	bd08      	pop	{r3, pc}

0800cb80 <motor_init>:
{
 800cb80:	b530      	push	{r4, r5, lr}
	deviceParams_t initDeviceParameters =
 800cb82:	4d15      	ldr	r5, [pc, #84]	; (800cbd8 <motor_init+0x58>)
 800cb84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
 800cb86:	b08b      	sub	sp, #44	; 0x2c
	deviceParams_t initDeviceParameters =
 800cb88:	466c      	mov	r4, sp
 800cb8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cb8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cb8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cb90:	e895 0003 	ldmia.w	r5, {r0, r1}
 800cb94:	e884 0003 	stmia.w	r4, {r0, r1}
	BSP_MotorControl_SetNbDevices(BSP_MOTOR_CONTROL_BOARD_ID_L6206, 2);
 800cb98:	2102      	movs	r1, #2
 800cb9a:	f641 003e 	movw	r0, #6206	; 0x183e
 800cb9e:	f7fa f8eb 	bl	8006d78 <BSP_MotorControl_SetNbDevices>
	BSP_MotorControl_Init(BSP_MOTOR_CONTROL_BOARD_ID_L6206, &initDeviceParameters);
 800cba2:	4669      	mov	r1, sp
 800cba4:	f641 003e 	movw	r0, #6206	; 0x183e
 800cba8:	f7fa f898 	bl	8006cdc <BSP_MotorControl_Init>
	BSP_MotorControl_SetDualFullBridgeConfig(PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B);
 800cbac:	2000      	movs	r0, #0
 800cbae:	f7fa f8c7 	bl	8006d40 <BSP_MotorControl_SetDualFullBridgeConfig>
	BSP_MotorControl_AttachFlagInterrupt(MyFlagInterruptHandler);
 800cbb2:	480a      	ldr	r0, [pc, #40]	; (800cbdc <motor_init+0x5c>)
 800cbb4:	f7fa f886 	bl	8006cc4 <BSP_MotorControl_AttachFlagInterrupt>
	BSP_MotorControl_AttachErrorHandler(Error_Handler);
 800cbb8:	4809      	ldr	r0, [pc, #36]	; (800cbe0 <motor_init+0x60>)
 800cbba:	f7fa f877 	bl	8006cac <BSP_MotorControl_AttachErrorHandler>
	BSP_MotorControl_SetBridgeInputPwmFreq(0, 10000);
 800cbbe:	f242 7110 	movw	r1, #10000	; 0x2710
 800cbc2:	2000      	movs	r0, #0
 800cbc4:	f7fa f8ca 	bl	8006d5c <BSP_MotorControl_SetBridgeInputPwmFreq>
	BSP_MotorControl_SetBridgeInputPwmFreq(1, 10000);
 800cbc8:	f242 7110 	movw	r1, #10000	; 0x2710
 800cbcc:	2001      	movs	r0, #1
 800cbce:	f7fa f8c5 	bl	8006d5c <BSP_MotorControl_SetBridgeInputPwmFreq>
}
 800cbd2:	b00b      	add	sp, #44	; 0x2c
 800cbd4:	bd30      	pop	{r4, r5, pc}
 800cbd6:	bf00      	nop
 800cbd8:	0801d588 	.word	0x0801d588
 800cbdc:	0800cb61 	.word	0x0800cb61
 800cbe0:	0800c20d 	.word	0x0800c20d

0800cbe4 <BSP_I2C1_DeInit>:
{
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
  /* Peripheral clock disable */
  __HAL_RCC_I2C1_CLK_DISABLE();
 800cbe4:	4a09      	ldr	r2, [pc, #36]	; (800cc0c <BSP_I2C1_DeInit+0x28>)

  /**I2C1 GPIO Configuration
  PB8     ------> I2C1_SCL
  PB9     ------> I2C1_SDA
  */
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8 | GPIO_PIN_9);
 800cbe6:	480a      	ldr	r0, [pc, #40]	; (800cc10 <BSP_I2C1_DeInit+0x2c>)
{
 800cbe8:	b508      	push	{r3, lr}
  __HAL_RCC_I2C1_CLK_DISABLE();
 800cbea:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800cbec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cbf0:	6413      	str	r3, [r2, #64]	; 0x40
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8 | GPIO_PIN_9);
 800cbf2:	f44f 7140 	mov.w	r1, #768	; 0x300
 800cbf6:	f7fb f8b7 	bl	8007d68 <HAL_GPIO_DeInit>
  if (HAL_I2C_DeInit(&hbusi2c1) == HAL_OK)
 800cbfa:	4806      	ldr	r0, [pc, #24]	; (800cc14 <BSP_I2C1_DeInit+0x30>)
 800cbfc:	f7fb fc1e 	bl	800843c <HAL_I2C_DeInit>
 800cc00:	2800      	cmp	r0, #0
}
 800cc02:	bf14      	ite	ne
 800cc04:	f06f 0007 	mvnne.w	r0, #7
 800cc08:	2000      	moveq	r0, #0
 800cc0a:	bd08      	pop	{r3, pc}
 800cc0c:	40023800 	.word	0x40023800
 800cc10:	40020400 	.word	0x40020400
 800cc14:	200035d0 	.word	0x200035d0

0800cc18 <BSP_I2C1_WriteReg>:
{
 800cc18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (HAL_I2C_Mem_Write(&hbusi2c1, (uint8_t)DevAddr,
 800cc1a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800cc1e:	e88d 001c 	stmia.w	sp, {r2, r3, r4}
 800cc22:	460a      	mov	r2, r1
 800cc24:	2301      	movs	r3, #1
 800cc26:	b2c1      	uxtb	r1, r0
 800cc28:	4804      	ldr	r0, [pc, #16]	; (800cc3c <BSP_I2C1_WriteReg+0x24>)
 800cc2a:	f7fb fe83 	bl	8008934 <HAL_I2C_Mem_Write>
 800cc2e:	2800      	cmp	r0, #0
}
 800cc30:	bf14      	ite	ne
 800cc32:	f06f 0007 	mvnne.w	r0, #7
 800cc36:	2000      	moveq	r0, #0
 800cc38:	b004      	add	sp, #16
 800cc3a:	bd10      	pop	{r4, pc}
 800cc3c:	200035d0 	.word	0x200035d0

0800cc40 <BSP_I2C1_ReadReg>:
{
 800cc40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (HAL_I2C_Mem_Read(&hbusi2c1, DevAddr, (uint16_t)Reg,
 800cc42:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800cc46:	e88d 001c 	stmia.w	sp, {r2, r3, r4}
 800cc4a:	460a      	mov	r2, r1
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	4601      	mov	r1, r0
 800cc50:	4804      	ldr	r0, [pc, #16]	; (800cc64 <BSP_I2C1_ReadReg+0x24>)
 800cc52:	f7fb ff11 	bl	8008a78 <HAL_I2C_Mem_Read>
 800cc56:	2800      	cmp	r0, #0
}
 800cc58:	bf14      	ite	ne
 800cc5a:	f06f 0007 	mvnne.w	r0, #7
 800cc5e:	2000      	moveq	r0, #0
 800cc60:	b004      	add	sp, #16
 800cc62:	bd10      	pop	{r4, pc}
 800cc64:	200035d0 	.word	0x200035d0

0800cc68 <BSP_GetTick>:
  return HAL_GetTick();
 800cc68:	f7fa b922 	b.w	8006eb0 <HAL_GetTick>

0800cc6c <BSP_I2C1_Init>:
{
 800cc6c:	b530      	push	{r4, r5, lr}
  hbusi2c1.Instance  = I2C1;
 800cc6e:	4c1a      	ldr	r4, [pc, #104]	; (800ccd8 <BSP_I2C1_Init+0x6c>)
 800cc70:	4b1a      	ldr	r3, [pc, #104]	; (800ccdc <BSP_I2C1_Init+0x70>)
 800cc72:	6023      	str	r3, [r4, #0]
{
 800cc74:	b087      	sub	sp, #28
  if (HAL_I2C_GetState(&hbusi2c1) == HAL_I2C_STATE_RESET)
 800cc76:	4620      	mov	r0, r4
 800cc78:	f7fc fce2 	bl	8009640 <HAL_I2C_GetState>
 800cc7c:	4605      	mov	r5, r0
 800cc7e:	bb40      	cbnz	r0, 800ccd2 <BSP_I2C1_Init+0x66>
  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 800cc80:	f44f 7340 	mov.w	r3, #768	; 0x300
 800cc84:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800cc86:	2312      	movs	r3, #18
 800cc88:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cc8e:	2303      	movs	r3, #3
 800cc90:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800cc92:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cc94:	eb0d 0103 	add.w	r1, sp, r3
 800cc98:	4811      	ldr	r0, [pc, #68]	; (800cce0 <BSP_I2C1_Init+0x74>)
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800cc9a:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cc9c:	f7fa ff38 	bl	8007b10 <HAL_GPIO_Init>
  __HAL_RCC_I2C1_CLK_ENABLE();
 800cca0:	4b10      	ldr	r3, [pc, #64]	; (800cce4 <BSP_I2C1_Init+0x78>)
 800cca2:	9500      	str	r5, [sp, #0]
 800cca4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cca6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800ccaa:	641a      	str	r2, [r3, #64]	; 0x40
 800ccac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ccb2:	9300      	str	r3, [sp, #0]
    if (MX_I2C1_Init(&hbusi2c1) != HAL_OK)
 800ccb4:	4620      	mov	r0, r4
  __HAL_RCC_I2C1_CLK_ENABLE();
 800ccb6:	9b00      	ldr	r3, [sp, #0]
    if (MX_I2C1_Init(&hbusi2c1) != HAL_OK)
 800ccb8:	f7ff f988 	bl	800bfcc <MX_I2C1_Init>
 800ccbc:	4601      	mov	r1, r0
 800ccbe:	b118      	cbz	r0, 800ccc8 <BSP_I2C1_Init+0x5c>
      ret = BSP_ERROR_BUS_FAILURE;
 800ccc0:	f06f 0007 	mvn.w	r0, #7
}
 800ccc4:	b007      	add	sp, #28
 800ccc6:	bd30      	pop	{r4, r5, pc}
    else if (HAL_I2CEx_ConfigAnalogFilter(&hbusi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800ccc8:	4620      	mov	r0, r4
 800ccca:	f7fc fcbd 	bl	8009648 <HAL_I2CEx_ConfigAnalogFilter>
 800ccce:	2800      	cmp	r0, #0
 800ccd0:	d1f6      	bne.n	800ccc0 <BSP_I2C1_Init+0x54>
      ret = BSP_ERROR_NONE;
 800ccd2:	2000      	movs	r0, #0
  return ret;
 800ccd4:	e7f6      	b.n	800ccc4 <BSP_I2C1_Init+0x58>
 800ccd6:	bf00      	nop
 800ccd8:	200035d0 	.word	0x200035d0
 800ccdc:	40005400 	.word	0x40005400
 800cce0:	40020400 	.word	0x40020400
 800cce4:	40023800 	.word	0x40023800

0800cce8 <Serialize_s32>:
 * @param  Source source
 * @param  Len number of bytes
 * @retval None
 */
void Serialize_s32(uint8_t *Dest, int32_t Source, uint32_t Len)
{
 800cce8:	4402      	add	r2, r0
  uint32_t i;
  uint32_t source_uint32;

  for (i = 0; i < Len; i++)
 800ccea:	4290      	cmp	r0, r2
 800ccec:	d100      	bne.n	800ccf0 <Serialize_s32+0x8>
    source_uint32 = (uint32_t)Source;
    Dest[i] = (uint8_t)(source_uint32 & 0xFFU);
    source_uint32 >>= 8;
    Source = (int32_t)source_uint32;
  }
}
 800ccee:	4770      	bx	lr
    Dest[i] = (uint8_t)(source_uint32 & 0xFFU);
 800ccf0:	f800 1b01 	strb.w	r1, [r0], #1
    source_uint32 >>= 8;
 800ccf4:	0a09      	lsrs	r1, r1, #8
 800ccf6:	e7f8      	b.n	800ccea <Serialize_s32+0x2>

0800ccf8 <HAL_RTC_MspInit>:
 *         the backup registers) and RCC_BDCR register are set to their reset values.
 *
 * @retval None
 */
void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
 800ccf8:	b510      	push	{r4, lr}
 800ccfa:	b092      	sub	sp, #72	; 0x48
     - Enable write access using HAL_PWR_EnableBkUpAccess() function before to
       configure the RTC clock source (to be done once after reset).
     - Reset the Back up Domain using __HAL_RCC_BACKUPRESET_FORCE() and
       __HAL_RCC_BACKUPRESET_RELEASE().
     - Configure the needed RTC clock source */
  __HAL_RCC_PWR_CLK_ENABLE();
 800ccfc:	4b21      	ldr	r3, [pc, #132]	; (800cd84 <HAL_RTC_MspInit+0x8c>)
 800ccfe:	2400      	movs	r4, #0
 800cd00:	9400      	str	r4, [sp, #0]
 800cd02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cd04:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800cd08:	641a      	str	r2, [r3, #64]	; 0x40
 800cd0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cd10:	9300      	str	r3, [sp, #0]
 800cd12:	9b00      	ldr	r3, [sp, #0]
  HAL_PWR_EnableBkUpAccess();
 800cd14:	f7fc fcd4 	bl	80096c0 <HAL_PWR_EnableBkUpAccess>

  /*##-2- Configue LSE/LSI as RTC clock soucre ###############################*/
  if (UseLSI == 0)
 800cd18:	4b1b      	ldr	r3, [pc, #108]	; (800cd88 <HAL_RTC_MspInit+0x90>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	210c      	movs	r1, #12
 800cd1e:	2201      	movs	r2, #1
  {
    RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_LSE;
 800cd20:	9106      	str	r1, [sp, #24]
  if (UseLSI == 0)
 800cd22:	bb03      	cbnz	r3, 800cd66 <HAL_RTC_MspInit+0x6e>
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
    RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800cd24:	a806      	add	r0, sp, #24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800cd26:	930c      	str	r3, [sp, #48]	; 0x30
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800cd28:	9208      	str	r2, [sp, #32]
    RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
 800cd2a:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800cd2c:	f7fc fcce 	bl	80096cc <HAL_RCC_OscConfig>
 800cd30:	b108      	cbz	r0, 800cd36 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800cd32:	f7ff fa6b 	bl	800c20c <Error_Handler>
    }

    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800cd36:	2302      	movs	r3, #2
 800cd38:	9301      	str	r3, [sp, #4]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800cd3a:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800cd3e:	a801      	add	r0, sp, #4
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800cd40:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800cd42:	f7fc fffd 	bl	8009d40 <HAL_RCCEx_PeriphCLKConfig>
 800cd46:	b108      	cbz	r0, 800cd4c <HAL_RTC_MspInit+0x54>
    {
      Error_Handler();
 800cd48:	f7ff fa60 	bl	800c20c <Error_Handler>
    }
  }

  /*##-2- Enable RTC peripheral Clocks #######################################*/
  /* Enable RTC Clock */
  __HAL_RCC_RTC_ENABLE();
 800cd4c:	4b0f      	ldr	r3, [pc, #60]	; (800cd8c <HAL_RTC_MspInit+0x94>)
 800cd4e:	2201      	movs	r2, #1
 800cd50:	601a      	str	r2, [r3, #0]

  /*##-4- Configure the NVIC for RTC Alarm ###################################*/
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0x0F, 0);
 800cd52:	210f      	movs	r1, #15
 800cd54:	2200      	movs	r2, #0
 800cd56:	2029      	movs	r0, #41	; 0x29
 800cd58:	f7fa fb7c 	bl	8007454 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800cd5c:	2029      	movs	r0, #41	; 0x29
 800cd5e:	f7fa fbbb 	bl	80074d8 <HAL_NVIC_EnableIRQ>
}
 800cd62:	b012      	add	sp, #72	; 0x48
 800cd64:	bd10      	pop	{r4, pc}
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800cd66:	a806      	add	r0, sp, #24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800cd68:	940c      	str	r4, [sp, #48]	; 0x30
    RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800cd6a:	920b      	str	r2, [sp, #44]	; 0x2c
    RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 800cd6c:	9408      	str	r4, [sp, #32]
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800cd6e:	f7fc fcad 	bl	80096cc <HAL_RCC_OscConfig>
 800cd72:	b108      	cbz	r0, 800cd78 <HAL_RTC_MspInit+0x80>
      Error_Handler();
 800cd74:	f7ff fa4a 	bl	800c20c <Error_Handler>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800cd78:	2302      	movs	r3, #2
 800cd7a:	9301      	str	r3, [sp, #4]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800cd7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cd80:	e7dd      	b.n	800cd3e <HAL_RTC_MspInit+0x46>
 800cd82:	bf00      	nop
 800cd84:	40023800 	.word	0x40023800
 800cd88:	200026f0 	.word	0x200026f0
 800cd8c:	42470e3c 	.word	0x42470e3c

0800cd90 <HAL_MspInit>:

/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void)
{
 800cd90:	b507      	push	{r0, r1, r2, lr}
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 800cd92:	4b0e      	ldr	r3, [pc, #56]	; (800cdcc <HAL_MspInit+0x3c>)
 800cd94:	2100      	movs	r1, #0
 800cd96:	9100      	str	r1, [sp, #0]
 800cd98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cd9e:	645a      	str	r2, [r3, #68]	; 0x44
 800cda0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cda2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800cda6:	9200      	str	r2, [sp, #0]
 800cda8:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_PWR_CLK_ENABLE();
 800cdaa:	9101      	str	r1, [sp, #4]
 800cdac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cdae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800cdb2:	641a      	str	r2, [r3, #64]	; 0x40
 800cdb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cdba:	9301      	str	r3, [sp, #4]

	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800cdbc:	2007      	movs	r0, #7
	__HAL_RCC_PWR_CLK_ENABLE();
 800cdbe:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800cdc0:	f7fa fb2a 	bl	8007418 <HAL_NVIC_SetPriorityGrouping>
	/* System interrupt init*/

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 800cdc4:	b003      	add	sp, #12
 800cdc6:	f85d fb04 	ldr.w	pc, [sp], #4
 800cdca:	bf00      	nop
 800cdcc:	40023800 	.word	0x40023800

0800cdd0 <NMI_Handler>:
 800cdd0:	4770      	bx	lr

0800cdd2 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 800cdd2:	e7fe      	b.n	800cdd2 <HardFault_Handler>

0800cdd4 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 800cdd4:	e7fe      	b.n	800cdd4 <MemManage_Handler>

0800cdd6 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 800cdd6:	e7fe      	b.n	800cdd6 <BusFault_Handler>

0800cdd8 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 800cdd8:	e7fe      	b.n	800cdd8 <UsageFault_Handler>

0800cdda <SVC_Handler>:
 800cdda:	4770      	bx	lr

0800cddc <DebugMon_Handler>:
 800cddc:	4770      	bx	lr

0800cdde <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 800cdde:	4770      	bx	lr

0800cde0 <SysTick_Handler>:
void SysTick_Handler(void)
{
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 800cde0:	f7fa b85a 	b.w	8006e98 <HAL_IncTick>

0800cde4 <TIM5_IRQHandler>:
 * @param  None
 * @retval None
 */
void TIM_ALGO_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&AlgoTimHandle);
 800cde4:	4801      	ldr	r0, [pc, #4]	; (800cdec <TIM5_IRQHandler+0x8>)
 800cde6:	f7fd bf06 	b.w	800abf6 <HAL_TIM_IRQHandler>
 800cdea:	bf00      	nop
 800cdec:	20003550 	.word	0x20003550

0800cdf0 <EXTI15_10_IRQHandler>:
}

void EXTI15_10_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 800cdf0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800cdf4:	f7fb b87a 	b.w	8007eec <HAL_GPIO_EXTI_IRQHandler>

0800cdf8 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
	/* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

	/* USER CODE END DMA1_Stream0_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800cdf8:	4801      	ldr	r0, [pc, #4]	; (800ce00 <DMA1_Stream0_IRQHandler+0x8>)
 800cdfa:	f7fa bdcf 	b.w	800799c <HAL_DMA_IRQHandler>
 800cdfe:	bf00      	nop
 800ce00:	20002988 	.word	0x20002988

0800ce04 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
	/* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

	/* USER CODE END DMA1_Stream5_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800ce04:	4801      	ldr	r0, [pc, #4]	; (800ce0c <DMA1_Stream5_IRQHandler+0x8>)
 800ce06:	f7fa bdc9 	b.w	800799c <HAL_DMA_IRQHandler>
 800ce0a:	bf00      	nop
 800ce0c:	200036d8 	.word	0x200036d8

0800ce10 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
	/* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

	/* USER CODE END DMA1_Stream6_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800ce10:	4801      	ldr	r0, [pc, #4]	; (800ce18 <DMA1_Stream6_IRQHandler+0x8>)
 800ce12:	f7fa bdc3 	b.w	800799c <HAL_DMA_IRQHandler>
 800ce16:	bf00      	nop
 800ce18:	200037f8 	.word	0x200037f8

0800ce1c <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
	/* USER CODE BEGIN ADC_IRQn 0 */

	/* USER CODE END ADC_IRQn 0 */
	HAL_ADC_IRQHandler(&hadc1);
 800ce1c:	4801      	ldr	r0, [pc, #4]	; (800ce24 <ADC_IRQHandler+0x8>)
 800ce1e:	f7fa b997 	b.w	8007150 <HAL_ADC_IRQHandler>
 800ce22:	bf00      	nop
 800ce24:	2000288c 	.word	0x2000288c

0800ce28 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
	/* USER CODE BEGIN TIM2_IRQn 0 */

	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 800ce28:	4801      	ldr	r0, [pc, #4]	; (800ce30 <TIM2_IRQHandler+0x8>)
 800ce2a:	f7fd bee4 	b.w	800abf6 <HAL_TIM_IRQHandler>
 800ce2e:	bf00      	nop
 800ce30:	2000369c 	.word	0x2000369c

0800ce34 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
	/* USER CODE BEGIN TIM3_IRQn 0 */

	/* USER CODE END TIM3_IRQn 0 */
	HAL_TIM_IRQHandler(&htim3);
 800ce34:	4801      	ldr	r0, [pc, #4]	; (800ce3c <TIM3_IRQHandler+0x8>)
 800ce36:	f7fd bede 	b.w	800abf6 <HAL_TIM_IRQHandler>
 800ce3a:	bf00      	nop
 800ce3c:	20003624 	.word	0x20003624

0800ce40 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
	/* USER CODE BEGIN I2C1_EV_IRQn 0 */

	/* USER CODE END I2C1_EV_IRQn 0 */
	HAL_I2C_EV_IRQHandler(&hi2c1);
 800ce40:	4801      	ldr	r0, [pc, #4]	; (800ce48 <I2C1_EV_IRQHandler+0x8>)
 800ce42:	f7fb bfd3 	b.w	8008dec <HAL_I2C_EV_IRQHandler>
 800ce46:	bf00      	nop
 800ce48:	20002934 	.word	0x20002934

0800ce4c <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
	/* USER CODE BEGIN I2C1_ER_IRQn 0 */

	/* USER CODE END I2C1_ER_IRQn 0 */
	HAL_I2C_ER_IRQHandler(&hi2c1);
 800ce4c:	4801      	ldr	r0, [pc, #4]	; (800ce54 <I2C1_ER_IRQHandler+0x8>)
 800ce4e:	f7fc bb37 	b.w	80094c0 <HAL_I2C_ER_IRQHandler>
 800ce52:	bf00      	nop
 800ce54:	20002934 	.word	0x20002934

0800ce58 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
	/* USER CODE BEGIN USART2_IRQn 0 */

	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 800ce58:	4801      	ldr	r0, [pc, #4]	; (800ce60 <USART2_IRQHandler+0x8>)
 800ce5a:	f7fe bdef 	b.w	800ba3c <HAL_UART_IRQHandler>
 800ce5e:	bf00      	nop
 800ce60:	2000358c 	.word	0x2000358c

0800ce64 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
	/* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

	/* USER CODE END DMA1_Stream7_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800ce64:	4801      	ldr	r0, [pc, #4]	; (800ce6c <DMA1_Stream7_IRQHandler+0x8>)
 800ce66:	f7fa bd99 	b.w	800799c <HAL_DMA_IRQHandler>
 800ce6a:	bf00      	nop
 800ce6c:	200028d4 	.word	0x200028d4

0800ce70 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
	/* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

	/* USER CODE END DMA2_Stream1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800ce70:	4801      	ldr	r0, [pc, #4]	; (800ce78 <DMA2_Stream1_IRQHandler+0x8>)
 800ce72:	f7fa bd93 	b.w	800799c <HAL_DMA_IRQHandler>
 800ce76:	bf00      	nop
 800ce78:	20003738 	.word	0x20003738

0800ce7c <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
	/* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

	/* USER CODE END DMA2_Stream6_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800ce7c:	4801      	ldr	r0, [pc, #4]	; (800ce84 <DMA2_Stream6_IRQHandler+0x8>)
 800ce7e:	f7fa bd8d 	b.w	800799c <HAL_DMA_IRQHandler>
 800ce82:	bf00      	nop
 800ce84:	20003798 	.word	0x20003798

0800ce88 <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
	/* USER CODE BEGIN USART6_IRQn 0 */

	/* USER CODE END USART6_IRQn 0 */
	HAL_UART_IRQHandler(&huart6);
 800ce88:	4801      	ldr	r0, [pc, #4]	; (800ce90 <USART6_IRQHandler+0x8>)
 800ce8a:	f7fe bdd7 	b.w	800ba3c <HAL_UART_IRQHandler>
 800ce8e:	bf00      	nop
 800ce90:	20003858 	.word	0x20003858

0800ce94 <_read>:
	while (1) {
	}                       /* Make sure we hang here */
}

int _read(int file, char *ptr, int len)
{
 800ce94:	b570      	push	{r4, r5, r6, lr}
 800ce96:	460e      	mov	r6, r1
 800ce98:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800ce9a:	460c      	mov	r4, r1
 800ce9c:	1ba3      	subs	r3, r4, r6
 800ce9e:	429d      	cmp	r5, r3
 800cea0:	dc01      	bgt.n	800cea6 <_read+0x12>
		*ptr++ = __io_getchar();
	}

	return len;
}
 800cea2:	4628      	mov	r0, r5
 800cea4:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800cea6:	f7fe ffb8 	bl	800be1a <__io_getchar>
 800ceaa:	f804 0b01 	strb.w	r0, [r4], #1
 800ceae:	e7f5      	b.n	800ce9c <_read+0x8>

0800ceb0 <_write>:

int _write(int file, char *ptr, int len)
{
 800ceb0:	b570      	push	{r4, r5, r6, lr}
 800ceb2:	460e      	mov	r6, r1
 800ceb4:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800ceb6:	460c      	mov	r4, r1
 800ceb8:	1ba3      	subs	r3, r4, r6
 800ceba:	429d      	cmp	r5, r3
 800cebc:	dc01      	bgt.n	800cec2 <_write+0x12>
		__io_putchar(*ptr++);
	}
	return len;
}
 800cebe:	4628      	mov	r0, r5
 800cec0:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800cec2:	f814 0b01 	ldrb.w	r0, [r4], #1
 800cec6:	f7fe ffa3 	bl	800be10 <__io_putchar>
 800ceca:	e7f5      	b.n	800ceb8 <_write+0x8>

0800cecc <_sbrk>:

caddr_t _sbrk(int incr)
{
 800cecc:	b508      	push	{r3, lr}
	extern char end asm ("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800cece:	4b0a      	ldr	r3, [pc, #40]	; (800cef8 <_sbrk+0x2c>)
 800ced0:	6819      	ldr	r1, [r3, #0]
{
 800ced2:	4602      	mov	r2, r0
	if (heap_end == 0)
 800ced4:	b909      	cbnz	r1, 800ceda <_sbrk+0xe>
		heap_end = &end;
 800ced6:	4909      	ldr	r1, [pc, #36]	; (800cefc <_sbrk+0x30>)
 800ced8:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800ceda:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr) {
 800cedc:	4669      	mov	r1, sp
 800cede:	4402      	add	r2, r0
 800cee0:	428a      	cmp	r2, r1
 800cee2:	d906      	bls.n	800cef2 <_sbrk+0x26>
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800cee4:	f00d fe9a 	bl	801ac1c <__errno>
 800cee8:	230c      	movs	r3, #12
 800ceea:	6003      	str	r3, [r0, #0]
		return (caddr_t)-1;
 800ceec:	f04f 30ff 	mov.w	r0, #4294967295
 800cef0:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800cef2:	601a      	str	r2, [r3, #0]

	return (caddr_t)prev_heap_end;
}
 800cef4:	bd08      	pop	{r3, pc}
 800cef6:	bf00      	nop
 800cef8:	200026f4 	.word	0x200026f4
 800cefc:	2000399c 	.word	0x2000399c

0800cf00 <_close>:

int _close(int file)
{
	return -1;
}
 800cf00:	f04f 30ff 	mov.w	r0, #4294967295
 800cf04:	4770      	bx	lr

0800cf06 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800cf06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cf0a:	604b      	str	r3, [r1, #4]
	return 0;
}
 800cf0c:	2000      	movs	r0, #0
 800cf0e:	4770      	bx	lr

0800cf10 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800cf10:	2001      	movs	r0, #1
 800cf12:	4770      	bx	lr

0800cf14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800cf14:	2000      	movs	r0, #0
 800cf16:	4770      	bx	lr

0800cf18 <SystemInit>:
 */
void SystemInit(void)
{
	/* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 800cf18:	490f      	ldr	r1, [pc, #60]	; (800cf58 <SystemInit+0x40>)
 800cf1a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800cf1e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cf22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR |= (uint32_t)0x00000001;
 800cf26:	4b0d      	ldr	r3, [pc, #52]	; (800cf5c <SystemInit+0x44>)
 800cf28:	681a      	ldr	r2, [r3, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 800cf2a:	2000      	movs	r0, #0
	RCC->CR |= (uint32_t)0x00000001;
 800cf2c:	f042 0201 	orr.w	r2, r2, #1
 800cf30:	601a      	str	r2, [r3, #0]
	RCC->CFGR = 0x00000000;
 800cf32:	6098      	str	r0, [r3, #8]

	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t)0xFEF6FFFF;
 800cf34:	681a      	ldr	r2, [r3, #0]
 800cf36:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800cf3a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800cf3e:	601a      	str	r2, [r3, #0]

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x24003010;
 800cf40:	4a07      	ldr	r2, [pc, #28]	; (800cf60 <SystemInit+0x48>)
 800cf42:	605a      	str	r2, [r3, #4]

	/* Reset HSEBYP bit */
	RCC->CR &= (uint32_t)0xFFFBFFFF;
 800cf44:	681a      	ldr	r2, [r3, #0]
 800cf46:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800cf4a:	601a      	str	r2, [r3, #0]

	/* Disable all interrupts */
	RCC->CIR = 0x00000000;
 800cf4c:	60d8      	str	r0, [r3, #12]

	/* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
	SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800cf4e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cf52:	608b      	str	r3, [r1, #8]
 800cf54:	4770      	bx	lr
 800cf56:	bf00      	nop
 800cf58:	e000ed00 	.word	0xe000ed00
 800cf5c:	40023800 	.word	0x40023800
 800cf60:	24003010 	.word	0x24003010

0800cf64 <HAL_TIM_Base_MspInit>:
	}
	HAL_TIM_MspPostInit(&htim3);
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800cf64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (tim_baseHandle->Instance == TIM2) {
 800cf66:	6803      	ldr	r3, [r0, #0]
 800cf68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf6c:	d116      	bne.n	800cf9c <HAL_TIM_Base_MspInit+0x38>
		/* USER CODE BEGIN TIM2_MspInit 0 */

		/* USER CODE END TIM2_MspInit 0 */
		/* TIM2 clock enable */
		__HAL_RCC_TIM2_CLK_ENABLE();
 800cf6e:	2200      	movs	r2, #0
 800cf70:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800cf74:	9201      	str	r2, [sp, #4]
 800cf76:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800cf78:	f041 0101 	orr.w	r1, r1, #1
 800cf7c:	6419      	str	r1, [r3, #64]	; 0x40
 800cf7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf80:	f003 0301 	and.w	r3, r3, #1
 800cf84:	9301      	str	r3, [sp, #4]

		/* TIM2 interrupt Init */
		HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800cf86:	201c      	movs	r0, #28
 800cf88:	4611      	mov	r1, r2
		__HAL_RCC_TIM2_CLK_ENABLE();
 800cf8a:	9b01      	ldr	r3, [sp, #4]
		HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800cf8c:	f7fa fa62 	bl	8007454 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800cf90:	201c      	movs	r0, #28
	    /* Peripheral clock enable */
	    TIM_ALGO_CLK_ENABLE();

	    /* System interrupt init*/
	    HAL_NVIC_SetPriority(TIM_ALGO_IRQn, 0x0F, 0);
	    HAL_NVIC_EnableIRQ(TIM_ALGO_IRQn);
 800cf92:	f7fa faa1 	bl	80074d8 <HAL_NVIC_EnableIRQ>
	  }
}
 800cf96:	b005      	add	sp, #20
 800cf98:	f85d fb04 	ldr.w	pc, [sp], #4
	}else if (tim_baseHandle->Instance == TIM3) {
 800cf9c:	4a14      	ldr	r2, [pc, #80]	; (800cff0 <HAL_TIM_Base_MspInit+0x8c>)
 800cf9e:	4293      	cmp	r3, r2
 800cfa0:	d111      	bne.n	800cfc6 <HAL_TIM_Base_MspInit+0x62>
		__HAL_RCC_TIM3_CLK_ENABLE();
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	4b13      	ldr	r3, [pc, #76]	; (800cff4 <HAL_TIM_Base_MspInit+0x90>)
 800cfa6:	9202      	str	r2, [sp, #8]
 800cfa8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800cfaa:	f041 0102 	orr.w	r1, r1, #2
 800cfae:	6419      	str	r1, [r3, #64]	; 0x40
 800cfb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfb2:	f003 0302 	and.w	r3, r3, #2
 800cfb6:	9302      	str	r3, [sp, #8]
		HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800cfb8:	201d      	movs	r0, #29
 800cfba:	4611      	mov	r1, r2
		__HAL_RCC_TIM3_CLK_ENABLE();
 800cfbc:	9b02      	ldr	r3, [sp, #8]
		HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800cfbe:	f7fa fa49 	bl	8007454 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800cfc2:	201d      	movs	r0, #29
 800cfc4:	e7e5      	b.n	800cf92 <HAL_TIM_Base_MspInit+0x2e>
	} else if (tim_baseHandle->Instance == TIM_ALGO)
 800cfc6:	4a0c      	ldr	r2, [pc, #48]	; (800cff8 <HAL_TIM_Base_MspInit+0x94>)
 800cfc8:	4293      	cmp	r3, r2
 800cfca:	d1e4      	bne.n	800cf96 <HAL_TIM_Base_MspInit+0x32>
	    TIM_ALGO_CLK_ENABLE();
 800cfcc:	4b09      	ldr	r3, [pc, #36]	; (800cff4 <HAL_TIM_Base_MspInit+0x90>)
 800cfce:	2200      	movs	r2, #0
 800cfd0:	9203      	str	r2, [sp, #12]
 800cfd2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800cfd4:	f041 0108 	orr.w	r1, r1, #8
 800cfd8:	6419      	str	r1, [r3, #64]	; 0x40
 800cfda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfdc:	f003 0308 	and.w	r3, r3, #8
 800cfe0:	9303      	str	r3, [sp, #12]
	    HAL_NVIC_SetPriority(TIM_ALGO_IRQn, 0x0F, 0);
 800cfe2:	2032      	movs	r0, #50	; 0x32
 800cfe4:	210f      	movs	r1, #15
	    TIM_ALGO_CLK_ENABLE();
 800cfe6:	9b03      	ldr	r3, [sp, #12]
	    HAL_NVIC_SetPriority(TIM_ALGO_IRQn, 0x0F, 0);
 800cfe8:	f7fa fa34 	bl	8007454 <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(TIM_ALGO_IRQn);
 800cfec:	2032      	movs	r0, #50	; 0x32
 800cfee:	e7d0      	b.n	800cf92 <HAL_TIM_Base_MspInit+0x2e>
 800cff0:	40000400 	.word	0x40000400
 800cff4:	40023800 	.word	0x40023800
 800cff8:	40000c00 	.word	0x40000c00

0800cffc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800cffc:	b510      	push	{r4, lr}
 800cffe:	4604      	mov	r4, r0
 800d000:	b088      	sub	sp, #32
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800d002:	2214      	movs	r2, #20
 800d004:	2100      	movs	r1, #0
 800d006:	a803      	add	r0, sp, #12
 800d008:	f00d ffb9 	bl	801af7e <memset>
	if (timHandle->Instance == TIM2) {
 800d00c:	6823      	ldr	r3, [r4, #0]
 800d00e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d012:	d117      	bne.n	800d044 <HAL_TIM_MspPostInit+0x48>
		/* USER CODE BEGIN TIM2_MspPostInit 0 */

		/* USER CODE END TIM2_MspPostInit 0 */
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800d014:	2300      	movs	r3, #0
 800d016:	9301      	str	r3, [sp, #4]
 800d018:	4b16      	ldr	r3, [pc, #88]	; (800d074 <HAL_TIM_MspPostInit+0x78>)
		GPIO_InitStruct.Pin = PWM_IN1B_TIM2CH1_Pin | PWM_IN2B_TIM2CH2_Pin;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d01a:	4817      	ldr	r0, [pc, #92]	; (800d078 <HAL_TIM_MspPostInit+0x7c>)
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800d01c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d01e:	f042 0201 	orr.w	r2, r2, #1
 800d022:	631a      	str	r2, [r3, #48]	; 0x30
 800d024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d026:	f003 0301 	and.w	r3, r3, #1
 800d02a:	9301      	str	r3, [sp, #4]
 800d02c:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin = PWM_IN1B_TIM2CH1_Pin | PWM_IN2B_TIM2CH2_Pin;
 800d02e:	2303      	movs	r3, #3
 800d030:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d032:	2302      	movs	r3, #2
 800d034:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800d036:	2301      	movs	r3, #1
 800d038:	9307      	str	r3, [sp, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d03a:	a903      	add	r1, sp, #12
		GPIO_InitStruct.Pin = PWM_IN1A_TIM3CH1_Pin | PWM_IN2A_TIM3CH2_Pin;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d03c:	f7fa fd68 	bl	8007b10 <HAL_GPIO_Init>

		/* USER CODE BEGIN TIM3_MspPostInit 1 */

		/* USER CODE END TIM3_MspPostInit 1 */
	}
}
 800d040:	b008      	add	sp, #32
 800d042:	bd10      	pop	{r4, pc}
	}else if (timHandle->Instance == TIM3) {
 800d044:	4a0d      	ldr	r2, [pc, #52]	; (800d07c <HAL_TIM_MspPostInit+0x80>)
 800d046:	4293      	cmp	r3, r2
 800d048:	d1fa      	bne.n	800d040 <HAL_TIM_MspPostInit+0x44>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800d04a:	2300      	movs	r3, #0
 800d04c:	9302      	str	r3, [sp, #8]
 800d04e:	4b09      	ldr	r3, [pc, #36]	; (800d074 <HAL_TIM_MspPostInit+0x78>)
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d050:	480b      	ldr	r0, [pc, #44]	; (800d080 <HAL_TIM_MspPostInit+0x84>)
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800d052:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d054:	f042 0202 	orr.w	r2, r2, #2
 800d058:	631a      	str	r2, [r3, #48]	; 0x30
 800d05a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d05c:	f003 0302 	and.w	r3, r3, #2
 800d060:	9302      	str	r3, [sp, #8]
 800d062:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Pin = PWM_IN1A_TIM3CH1_Pin | PWM_IN2A_TIM3CH2_Pin;
 800d064:	2330      	movs	r3, #48	; 0x30
 800d066:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d068:	2302      	movs	r3, #2
 800d06a:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800d06c:	9307      	str	r3, [sp, #28]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d06e:	a903      	add	r1, sp, #12
 800d070:	e7e4      	b.n	800d03c <HAL_TIM_MspPostInit+0x40>
 800d072:	bf00      	nop
 800d074:	40023800 	.word	0x40023800
 800d078:	40020000 	.word	0x40020000
 800d07c:	40000400 	.word	0x40000400
 800d080:	40020400 	.word	0x40020400

0800d084 <MX_TIM2_Init>:
{
 800d084:	b510      	push	{r4, lr}
 800d086:	b08e      	sub	sp, #56	; 0x38
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800d088:	2210      	movs	r2, #16
 800d08a:	2100      	movs	r1, #0
 800d08c:	a803      	add	r0, sp, #12
 800d08e:	f00d ff76 	bl	801af7e <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800d092:	2400      	movs	r4, #0
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800d094:	221c      	movs	r2, #28
 800d096:	4621      	mov	r1, r4
 800d098:	eb0d 0002 	add.w	r0, sp, r2
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800d09c:	9401      	str	r4, [sp, #4]
 800d09e:	9402      	str	r4, [sp, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800d0a0:	f00d ff6d 	bl	801af7e <memset>
	htim2.Instance = TIM2;
 800d0a4:	4820      	ldr	r0, [pc, #128]	; (800d128 <MX_TIM2_Init+0xa4>)
 800d0a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	htim2.Init.Prescaler = 0;
 800d0aa:	e880 0018 	stmia.w	r0, {r3, r4}
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d0ae:	6084      	str	r4, [r0, #8]
	htim2.Init.Period = 0;
 800d0b0:	60c4      	str	r4, [r0, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d0b2:	6104      	str	r4, [r0, #16]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800d0b4:	f7fd fe8e 	bl	800add4 <HAL_TIM_Base_Init>
 800d0b8:	b108      	cbz	r0, 800d0be <MX_TIM2_Init+0x3a>
		Error_Handler();
 800d0ba:	f7ff f8a7 	bl	800c20c <Error_Handler>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d0be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800d0c2:	a903      	add	r1, sp, #12
 800d0c4:	4818      	ldr	r0, [pc, #96]	; (800d128 <MX_TIM2_Init+0xa4>)
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d0c6:	9303      	str	r3, [sp, #12]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800d0c8:	f7fd fb0e 	bl	800a6e8 <HAL_TIM_ConfigClockSource>
 800d0cc:	b108      	cbz	r0, 800d0d2 <MX_TIM2_Init+0x4e>
		Error_Handler();
 800d0ce:	f7ff f89d 	bl	800c20c <Error_Handler>
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 800d0d2:	4815      	ldr	r0, [pc, #84]	; (800d128 <MX_TIM2_Init+0xa4>)
 800d0d4:	f7fd feda 	bl	800ae8c <HAL_TIM_PWM_Init>
 800d0d8:	b108      	cbz	r0, 800d0de <MX_TIM2_Init+0x5a>
		Error_Handler();
 800d0da:	f7ff f897 	bl	800c20c <Error_Handler>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d0de:	2400      	movs	r4, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 800d0e0:	a901      	add	r1, sp, #4
 800d0e2:	4811      	ldr	r0, [pc, #68]	; (800d128 <MX_TIM2_Init+0xa4>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d0e4:	9401      	str	r4, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d0e6:	9402      	str	r4, [sp, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 800d0e8:	f7fe f966 	bl	800b3b8 <HAL_TIMEx_MasterConfigSynchronization>
 800d0ec:	b108      	cbz	r0, 800d0f2 <MX_TIM2_Init+0x6e>
		Error_Handler();
 800d0ee:	f7ff f88d 	bl	800c20c <Error_Handler>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d0f2:	2360      	movs	r3, #96	; 0x60
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	a907      	add	r1, sp, #28
 800d0f8:	480b      	ldr	r0, [pc, #44]	; (800d128 <MX_TIM2_Init+0xa4>)
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d0fa:	9307      	str	r3, [sp, #28]
	sConfigOC.Pulse = 0;
 800d0fc:	9408      	str	r4, [sp, #32]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d0fe:	9409      	str	r4, [sp, #36]	; 0x24
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d100:	940b      	str	r4, [sp, #44]	; 0x2c
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 800d102:	f7fd ff5f 	bl	800afc4 <HAL_TIM_PWM_ConfigChannel>
 800d106:	b108      	cbz	r0, 800d10c <MX_TIM2_Init+0x88>
		Error_Handler();
 800d108:	f7ff f880 	bl	800c20c <Error_Handler>
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 800d10c:	2204      	movs	r2, #4
 800d10e:	a907      	add	r1, sp, #28
 800d110:	4805      	ldr	r0, [pc, #20]	; (800d128 <MX_TIM2_Init+0xa4>)
 800d112:	f7fd ff57 	bl	800afc4 <HAL_TIM_PWM_ConfigChannel>
 800d116:	b108      	cbz	r0, 800d11c <MX_TIM2_Init+0x98>
		Error_Handler();
 800d118:	f7ff f878 	bl	800c20c <Error_Handler>
	HAL_TIM_MspPostInit(&htim2);
 800d11c:	4802      	ldr	r0, [pc, #8]	; (800d128 <MX_TIM2_Init+0xa4>)
 800d11e:	f7ff ff6d 	bl	800cffc <HAL_TIM_MspPostInit>
}
 800d122:	b00e      	add	sp, #56	; 0x38
 800d124:	bd10      	pop	{r4, pc}
 800d126:	bf00      	nop
 800d128:	2000369c 	.word	0x2000369c

0800d12c <MX_TIM3_Init>:
{
 800d12c:	b510      	push	{r4, lr}
 800d12e:	b08e      	sub	sp, #56	; 0x38
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800d130:	2210      	movs	r2, #16
 800d132:	2100      	movs	r1, #0
 800d134:	a803      	add	r0, sp, #12
 800d136:	f00d ff22 	bl	801af7e <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800d13a:	2400      	movs	r4, #0
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800d13c:	221c      	movs	r2, #28
 800d13e:	4621      	mov	r1, r4
 800d140:	eb0d 0002 	add.w	r0, sp, r2
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800d144:	9401      	str	r4, [sp, #4]
 800d146:	9402      	str	r4, [sp, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800d148:	f00d ff19 	bl	801af7e <memset>
	htim3.Instance = TIM3;
 800d14c:	481f      	ldr	r0, [pc, #124]	; (800d1cc <MX_TIM3_Init+0xa0>)
 800d14e:	4b20      	ldr	r3, [pc, #128]	; (800d1d0 <MX_TIM3_Init+0xa4>)
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d150:	6084      	str	r4, [r0, #8]
	htim3.Init.Prescaler = 0;
 800d152:	e880 0018 	stmia.w	r0, {r3, r4}
	htim3.Init.Period = 0;
 800d156:	60c4      	str	r4, [r0, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d158:	6104      	str	r4, [r0, #16]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800d15a:	f7fd fe3b 	bl	800add4 <HAL_TIM_Base_Init>
 800d15e:	b108      	cbz	r0, 800d164 <MX_TIM3_Init+0x38>
		Error_Handler();
 800d160:	f7ff f854 	bl	800c20c <Error_Handler>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800d168:	a903      	add	r1, sp, #12
 800d16a:	4818      	ldr	r0, [pc, #96]	; (800d1cc <MX_TIM3_Init+0xa0>)
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d16c:	9303      	str	r3, [sp, #12]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800d16e:	f7fd fabb 	bl	800a6e8 <HAL_TIM_ConfigClockSource>
 800d172:	b108      	cbz	r0, 800d178 <MX_TIM3_Init+0x4c>
		Error_Handler();
 800d174:	f7ff f84a 	bl	800c20c <Error_Handler>
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 800d178:	4814      	ldr	r0, [pc, #80]	; (800d1cc <MX_TIM3_Init+0xa0>)
 800d17a:	f7fd fe87 	bl	800ae8c <HAL_TIM_PWM_Init>
 800d17e:	b108      	cbz	r0, 800d184 <MX_TIM3_Init+0x58>
		Error_Handler();
 800d180:	f7ff f844 	bl	800c20c <Error_Handler>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d184:	2400      	movs	r4, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 800d186:	a901      	add	r1, sp, #4
 800d188:	4810      	ldr	r0, [pc, #64]	; (800d1cc <MX_TIM3_Init+0xa0>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d18a:	9401      	str	r4, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d18c:	9402      	str	r4, [sp, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 800d18e:	f7fe f913 	bl	800b3b8 <HAL_TIMEx_MasterConfigSynchronization>
 800d192:	b108      	cbz	r0, 800d198 <MX_TIM3_Init+0x6c>
		Error_Handler();
 800d194:	f7ff f83a 	bl	800c20c <Error_Handler>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d198:	2360      	movs	r3, #96	; 0x60
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 800d19a:	2200      	movs	r2, #0
 800d19c:	a907      	add	r1, sp, #28
 800d19e:	480b      	ldr	r0, [pc, #44]	; (800d1cc <MX_TIM3_Init+0xa0>)
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d1a0:	9307      	str	r3, [sp, #28]
	sConfigOC.Pulse = 0;
 800d1a2:	9408      	str	r4, [sp, #32]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d1a4:	9409      	str	r4, [sp, #36]	; 0x24
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d1a6:	940b      	str	r4, [sp, #44]	; 0x2c
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 800d1a8:	f7fd ff0c 	bl	800afc4 <HAL_TIM_PWM_ConfigChannel>
 800d1ac:	b108      	cbz	r0, 800d1b2 <MX_TIM3_Init+0x86>
		Error_Handler();
 800d1ae:	f7ff f82d 	bl	800c20c <Error_Handler>
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 800d1b2:	2204      	movs	r2, #4
 800d1b4:	a907      	add	r1, sp, #28
 800d1b6:	4805      	ldr	r0, [pc, #20]	; (800d1cc <MX_TIM3_Init+0xa0>)
 800d1b8:	f7fd ff04 	bl	800afc4 <HAL_TIM_PWM_ConfigChannel>
 800d1bc:	b108      	cbz	r0, 800d1c2 <MX_TIM3_Init+0x96>
		Error_Handler();
 800d1be:	f7ff f825 	bl	800c20c <Error_Handler>
	HAL_TIM_MspPostInit(&htim3);
 800d1c2:	4802      	ldr	r0, [pc, #8]	; (800d1cc <MX_TIM3_Init+0xa0>)
 800d1c4:	f7ff ff1a 	bl	800cffc <HAL_TIM_MspPostInit>
}
 800d1c8:	b00e      	add	sp, #56	; 0x38
 800d1ca:	bd10      	pop	{r4, pc}
 800d1cc:	20003624 	.word	0x20003624
 800d1d0:	40000400 	.word	0x40000400

0800d1d4 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800d1d4:	b508      	push	{r3, lr}
	huart2.Instance = USART2;
 800d1d6:	480b      	ldr	r0, [pc, #44]	; (800d204 <MX_USART2_UART_Init+0x30>)
	huart2.Init.BaudRate = 115200;
 800d1d8:	4b0b      	ldr	r3, [pc, #44]	; (800d208 <MX_USART2_UART_Init+0x34>)
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d1da:	2200      	movs	r2, #0
	huart2.Init.BaudRate = 115200;
 800d1dc:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 800d1e0:	e880 4008 	stmia.w	r0, {r3, lr}
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.Mode = UART_MODE_TX_RX;
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
	if (HAL_MultiProcessor_Init(&huart2, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 800d1e4:	4611      	mov	r1, r2
	huart2.Init.Mode = UART_MODE_TX_RX;
 800d1e6:	230c      	movs	r3, #12
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d1e8:	6082      	str	r2, [r0, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800d1ea:	60c2      	str	r2, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800d1ec:	6102      	str	r2, [r0, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800d1ee:	6143      	str	r3, [r0, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d1f0:	6182      	str	r2, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800d1f2:	61c2      	str	r2, [r0, #28]
	if (HAL_MultiProcessor_Init(&huart2, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 800d1f4:	f7fe fa8a 	bl	800b70c <HAL_MultiProcessor_Init>
 800d1f8:	b118      	cbz	r0, 800d202 <MX_USART2_UART_Init+0x2e>
		Error_Handler();
	}
}
 800d1fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 800d1fe:	f7ff b805 	b.w	800c20c <Error_Handler>
 800d202:	bd08      	pop	{r3, pc}
 800d204:	2000358c 	.word	0x2000358c
 800d208:	40004400 	.word	0x40004400

0800d20c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800d20c:	b508      	push	{r3, lr}
	huart6.Instance = USART6;
 800d20e:	480b      	ldr	r0, [pc, #44]	; (800d23c <MX_USART6_UART_Init+0x30>)
	huart6.Init.BaudRate = 115200;
 800d210:	4b0b      	ldr	r3, [pc, #44]	; (800d240 <MX_USART6_UART_Init+0x34>)
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800d212:	2200      	movs	r2, #0
	huart6.Init.BaudRate = 115200;
 800d214:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 800d218:	e880 4008 	stmia.w	r0, {r3, lr}
	huart6.Init.StopBits = UART_STOPBITS_1;
	huart6.Init.Parity = UART_PARITY_NONE;
	huart6.Init.Mode = UART_MODE_TX_RX;
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
	if (HAL_MultiProcessor_Init(&huart6, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 800d21c:	4611      	mov	r1, r2
	huart6.Init.Mode = UART_MODE_TX_RX;
 800d21e:	230c      	movs	r3, #12
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800d220:	6082      	str	r2, [r0, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 800d222:	60c2      	str	r2, [r0, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 800d224:	6102      	str	r2, [r0, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 800d226:	6143      	str	r3, [r0, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d228:	6182      	str	r2, [r0, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800d22a:	61c2      	str	r2, [r0, #28]
	if (HAL_MultiProcessor_Init(&huart6, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 800d22c:	f7fe fa6e 	bl	800b70c <HAL_MultiProcessor_Init>
 800d230:	b118      	cbz	r0, 800d23a <MX_USART6_UART_Init+0x2e>
		Error_Handler();
	}
}
 800d232:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 800d236:	f7fe bfe9 	b.w	800c20c <Error_Handler>
 800d23a:	bd08      	pop	{r3, pc}
 800d23c:	20003858 	.word	0x20003858
 800d240:	40011400 	.word	0x40011400

0800d244 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800d244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800d248:	2214      	movs	r2, #20
{
 800d24a:	b08a      	sub	sp, #40	; 0x28
 800d24c:	4605      	mov	r5, r0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800d24e:	2100      	movs	r1, #0
 800d250:	eb0d 0002 	add.w	r0, sp, r2
 800d254:	f00d fe93 	bl	801af7e <memset>
	if (uartHandle->Instance == USART2) {
 800d258:	682b      	ldr	r3, [r5, #0]
 800d25a:	4a6a      	ldr	r2, [pc, #424]	; (800d404 <HAL_UART_MspInit+0x1c0>)
 800d25c:	4293      	cmp	r3, r2
 800d25e:	d15b      	bne.n	800d318 <HAL_UART_MspInit+0xd4>
		/* USER CODE BEGIN USART2_MspInit 0 */

		/* USER CODE END USART2_MspInit 0 */
		/* USART2 clock enable */
		__HAL_RCC_USART2_CLK_ENABLE();
 800d260:	2600      	movs	r6, #0
 800d262:	4b69      	ldr	r3, [pc, #420]	; (800d408 <HAL_UART_MspInit+0x1c4>)
 800d264:	9600      	str	r6, [sp, #0]
 800d266:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		GPIO_InitStruct.Pin = USART_TX_Pin | USART_RX_Pin;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d268:	4868      	ldr	r0, [pc, #416]	; (800d40c <HAL_UART_MspInit+0x1c8>)

		/* USART2 DMA Init */
		/* USART2_RX Init */
		hdma_usart2_rx.Instance = DMA1_Stream5;
 800d26a:	4c69      	ldr	r4, [pc, #420]	; (800d410 <HAL_UART_MspInit+0x1cc>)
		__HAL_RCC_USART2_CLK_ENABLE();
 800d26c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800d270:	641a      	str	r2, [r3, #64]	; 0x40
 800d272:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d274:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800d278:	9200      	str	r2, [sp, #0]
 800d27a:	9a00      	ldr	r2, [sp, #0]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800d27c:	9601      	str	r6, [sp, #4]
 800d27e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d280:	f042 0201 	orr.w	r2, r2, #1
 800d284:	631a      	str	r2, [r3, #48]	; 0x30
 800d286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d288:	f003 0301 	and.w	r3, r3, #1
 800d28c:	9301      	str	r3, [sp, #4]
 800d28e:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin = USART_TX_Pin | USART_RX_Pin;
 800d290:	230c      	movs	r3, #12
 800d292:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d294:	2302      	movs	r3, #2
 800d296:	9306      	str	r3, [sp, #24]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d298:	a905      	add	r1, sp, #20
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800d29a:	2307      	movs	r3, #7
 800d29c:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d29e:	f7fa fc37 	bl	8007b10 <HAL_GPIO_Init>
		hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800d2a2:	4b5c      	ldr	r3, [pc, #368]	; (800d414 <HAL_UART_MspInit+0x1d0>)
		hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d2a4:	60a6      	str	r6, [r4, #8]
		hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800d2a6:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
 800d2aa:	e884 0088 	stmia.w	r4, {r3, r7}
		hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
		hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
		hdma_usart2_rx.Init.Mode = DMA_NORMAL;
		hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
		hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
		if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK) {
 800d2ae:	4620      	mov	r0, r4
		hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800d2b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
		hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d2b4:	60e6      	str	r6, [r4, #12]
		hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800d2b6:	6123      	str	r3, [r4, #16]
		hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d2b8:	6166      	str	r6, [r4, #20]
		hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d2ba:	61a6      	str	r6, [r4, #24]
		hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800d2bc:	61e6      	str	r6, [r4, #28]
		hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800d2be:	6226      	str	r6, [r4, #32]
		hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800d2c0:	6266      	str	r6, [r4, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK) {
 800d2c2:	f7fa f979 	bl	80075b8 <HAL_DMA_Init>
 800d2c6:	b108      	cbz	r0, 800d2cc <HAL_UART_MspInit+0x88>
			Error_Handler();
 800d2c8:	f7fe ffa0 	bl	800c20c <Error_Handler>
		}

		__HAL_LINKDMA(uartHandle, hdmarx, hdma_usart2_rx);
 800d2cc:	636c      	str	r4, [r5, #52]	; 0x34

		/* USART2_TX Init */
		hdma_usart2_tx.Instance = DMA1_Stream6;
		hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
		hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d2ce:	4852      	ldr	r0, [pc, #328]	; (800d418 <HAL_UART_MspInit+0x1d4>)
		__HAL_LINKDMA(uartHandle, hdmarx, hdma_usart2_rx);
 800d2d0:	63a5      	str	r5, [r4, #56]	; 0x38
		hdma_usart2_tx.Instance = DMA1_Stream6;
 800d2d2:	4c52      	ldr	r4, [pc, #328]	; (800d41c <HAL_UART_MspInit+0x1d8>)
		hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d2d4:	2340      	movs	r3, #64	; 0x40
 800d2d6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800d2da:	e884 000b 	stmia.w	r4, {r0, r1, r3}
		hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
		hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800d2de:	f44f 6280 	mov.w	r2, #1024	; 0x400
		hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d2e2:	2300      	movs	r3, #0
		hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
		hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
		hdma_usart2_tx.Init.Mode = DMA_NORMAL;
		hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
		hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
		if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK) {
 800d2e4:	4620      	mov	r0, r4
		hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d2e6:	60e3      	str	r3, [r4, #12]
		hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800d2e8:	6122      	str	r2, [r4, #16]
		hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d2ea:	6163      	str	r3, [r4, #20]
		hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d2ec:	61a3      	str	r3, [r4, #24]
		hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800d2ee:	61e3      	str	r3, [r4, #28]
		hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800d2f0:	6223      	str	r3, [r4, #32]
		hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800d2f2:	6263      	str	r3, [r4, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK) {
 800d2f4:	f7fa f960 	bl	80075b8 <HAL_DMA_Init>
 800d2f8:	b108      	cbz	r0, 800d2fe <HAL_UART_MspInit+0xba>
			Error_Handler();
 800d2fa:	f7fe ff87 	bl	800c20c <Error_Handler>
		}

		__HAL_LINKDMA(uartHandle, hdmatx, hdma_usart2_tx);

		/* USART2 interrupt Init */
		HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800d2fe:	2200      	movs	r2, #0
		__HAL_LINKDMA(uartHandle, hdmatx, hdma_usart2_tx);
 800d300:	632c      	str	r4, [r5, #48]	; 0x30
		HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800d302:	2026      	movs	r0, #38	; 0x26
 800d304:	4611      	mov	r1, r2
		__HAL_LINKDMA(uartHandle, hdmatx, hdma_usart2_tx);
 800d306:	63a5      	str	r5, [r4, #56]	; 0x38
		HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800d308:	f7fa f8a4 	bl	8007454 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 800d30c:	2026      	movs	r0, #38	; 0x26

		__HAL_LINKDMA(uartHandle, hdmatx, hdma_usart6_tx);

		/* USART6 interrupt Init */
		HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
		HAL_NVIC_EnableIRQ(USART6_IRQn);
 800d30e:	f7fa f8e3 	bl	80074d8 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN USART6_MspInit 1 */

		/* USER CODE END USART6_MspInit 1 */
	}
}
 800d312:	b00a      	add	sp, #40	; 0x28
 800d314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}else if (uartHandle->Instance == USART6) {
 800d318:	4a41      	ldr	r2, [pc, #260]	; (800d420 <HAL_UART_MspInit+0x1dc>)
 800d31a:	4293      	cmp	r3, r2
 800d31c:	d1f9      	bne.n	800d312 <HAL_UART_MspInit+0xce>
		__HAL_RCC_USART6_CLK_ENABLE();
 800d31e:	2600      	movs	r6, #0
 800d320:	4b39      	ldr	r3, [pc, #228]	; (800d408 <HAL_UART_MspInit+0x1c4>)
 800d322:	9602      	str	r6, [sp, #8]
 800d324:	6c5a      	ldr	r2, [r3, #68]	; 0x44
		HAL_GPIO_Init(RPI_USART6TX_GPIO_Port, &GPIO_InitStruct);
 800d326:	483f      	ldr	r0, [pc, #252]	; (800d424 <HAL_UART_MspInit+0x1e0>)
		__HAL_RCC_USART6_CLK_ENABLE();
 800d328:	f042 0220 	orr.w	r2, r2, #32
 800d32c:	645a      	str	r2, [r3, #68]	; 0x44
 800d32e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d330:	f002 0220 	and.w	r2, r2, #32
 800d334:	9202      	str	r2, [sp, #8]
 800d336:	9a02      	ldr	r2, [sp, #8]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800d338:	9603      	str	r6, [sp, #12]
 800d33a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d33c:	f042 0204 	orr.w	r2, r2, #4
 800d340:	631a      	str	r2, [r3, #48]	; 0x30
 800d342:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d344:	f002 0204 	and.w	r2, r2, #4
 800d348:	9203      	str	r2, [sp, #12]
 800d34a:	9a03      	ldr	r2, [sp, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800d34c:	9604      	str	r6, [sp, #16]
 800d34e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d350:	f042 0201 	orr.w	r2, r2, #1
 800d354:	631a      	str	r2, [r3, #48]	; 0x30
 800d356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d358:	f003 0301 	and.w	r3, r3, #1
 800d35c:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800d35e:	2408      	movs	r4, #8
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800d360:	9b04      	ldr	r3, [sp, #16]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800d362:	9409      	str	r4, [sp, #36]	; 0x24
		GPIO_InitStruct.Pin = RPI_USART6TX_Pin;
 800d364:	2340      	movs	r3, #64	; 0x40
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d366:	f04f 0802 	mov.w	r8, #2
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d36a:	2703      	movs	r7, #3
		HAL_GPIO_Init(RPI_USART6TX_GPIO_Port, &GPIO_InitStruct);
 800d36c:	a905      	add	r1, sp, #20
		GPIO_InitStruct.Pin = RPI_USART6TX_Pin;
 800d36e:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d370:	f8cd 8018 	str.w	r8, [sp, #24]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d374:	9708      	str	r7, [sp, #32]
		HAL_GPIO_Init(RPI_USART6TX_GPIO_Port, &GPIO_InitStruct);
 800d376:	f7fa fbcb 	bl	8007b10 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = RPI_USART6RX_Pin;
 800d37a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		HAL_GPIO_Init(RPI_USART6RX_GPIO_Port, &GPIO_InitStruct);
 800d37e:	4823      	ldr	r0, [pc, #140]	; (800d40c <HAL_UART_MspInit+0x1c8>)
		GPIO_InitStruct.Pin = RPI_USART6RX_Pin;
 800d380:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(RPI_USART6RX_GPIO_Port, &GPIO_InitStruct);
 800d382:	a905      	add	r1, sp, #20
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800d384:	9409      	str	r4, [sp, #36]	; 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d386:	f8cd 8018 	str.w	r8, [sp, #24]
		hdma_usart6_rx.Instance = DMA2_Stream1;
 800d38a:	4c27      	ldr	r4, [pc, #156]	; (800d428 <HAL_UART_MspInit+0x1e4>)
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d38c:	9607      	str	r6, [sp, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d38e:	9708      	str	r7, [sp, #32]
		HAL_GPIO_Init(RPI_USART6RX_GPIO_Port, &GPIO_InitStruct);
 800d390:	f7fa fbbe 	bl	8007b10 <HAL_GPIO_Init>
		hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800d394:	4b25      	ldr	r3, [pc, #148]	; (800d42c <HAL_UART_MspInit+0x1e8>)
		hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d396:	60a6      	str	r6, [r4, #8]
		hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800d398:	f04f 6e20 	mov.w	lr, #167772160	; 0xa000000
 800d39c:	e884 4008 	stmia.w	r4, {r3, lr}
		if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK) {
 800d3a0:	4620      	mov	r0, r4
		hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800d3a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
		hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d3a6:	60e6      	str	r6, [r4, #12]
		hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800d3a8:	6123      	str	r3, [r4, #16]
		hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d3aa:	6166      	str	r6, [r4, #20]
		hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d3ac:	61a6      	str	r6, [r4, #24]
		hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 800d3ae:	61e6      	str	r6, [r4, #28]
		hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800d3b0:	6226      	str	r6, [r4, #32]
		hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800d3b2:	6266      	str	r6, [r4, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK) {
 800d3b4:	f7fa f900 	bl	80075b8 <HAL_DMA_Init>
 800d3b8:	b108      	cbz	r0, 800d3be <HAL_UART_MspInit+0x17a>
			Error_Handler();
 800d3ba:	f7fe ff27 	bl	800c20c <Error_Handler>
		__HAL_LINKDMA(uartHandle, hdmarx, hdma_usart6_rx);
 800d3be:	636c      	str	r4, [r5, #52]	; 0x34
		hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d3c0:	4b1b      	ldr	r3, [pc, #108]	; (800d430 <HAL_UART_MspInit+0x1ec>)
		__HAL_LINKDMA(uartHandle, hdmarx, hdma_usart6_rx);
 800d3c2:	63a5      	str	r5, [r4, #56]	; 0x38
		hdma_usart6_tx.Instance = DMA2_Stream6;
 800d3c4:	4c1b      	ldr	r4, [pc, #108]	; (800d434 <HAL_UART_MspInit+0x1f0>)
		hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d3c6:	f04f 6620 	mov.w	r6, #167772160	; 0xa000000
 800d3ca:	2740      	movs	r7, #64	; 0x40
 800d3cc:	e884 00c8 	stmia.w	r4, {r3, r6, r7}
		hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800d3d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
		hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d3d4:	2300      	movs	r3, #0
		if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK) {
 800d3d6:	4620      	mov	r0, r4
		hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d3d8:	60e3      	str	r3, [r4, #12]
		hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800d3da:	6122      	str	r2, [r4, #16]
		hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d3dc:	6163      	str	r3, [r4, #20]
		hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d3de:	61a3      	str	r3, [r4, #24]
		hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800d3e0:	61e3      	str	r3, [r4, #28]
		hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 800d3e2:	6223      	str	r3, [r4, #32]
		hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800d3e4:	6263      	str	r3, [r4, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK) {
 800d3e6:	f7fa f8e7 	bl	80075b8 <HAL_DMA_Init>
 800d3ea:	b108      	cbz	r0, 800d3f0 <HAL_UART_MspInit+0x1ac>
			Error_Handler();
 800d3ec:	f7fe ff0e 	bl	800c20c <Error_Handler>
		HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800d3f0:	2200      	movs	r2, #0
		__HAL_LINKDMA(uartHandle, hdmatx, hdma_usart6_tx);
 800d3f2:	632c      	str	r4, [r5, #48]	; 0x30
		HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800d3f4:	2047      	movs	r0, #71	; 0x47
 800d3f6:	4611      	mov	r1, r2
		__HAL_LINKDMA(uartHandle, hdmatx, hdma_usart6_tx);
 800d3f8:	63a5      	str	r5, [r4, #56]	; 0x38
		HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800d3fa:	f7fa f82b 	bl	8007454 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART6_IRQn);
 800d3fe:	2047      	movs	r0, #71	; 0x47
 800d400:	e785      	b.n	800d30e <HAL_UART_MspInit+0xca>
 800d402:	bf00      	nop
 800d404:	40004400 	.word	0x40004400
 800d408:	40023800 	.word	0x40023800
 800d40c:	40020000 	.word	0x40020000
 800d410:	200036d8 	.word	0x200036d8
 800d414:	40026088 	.word	0x40026088
 800d418:	400260a0 	.word	0x400260a0
 800d41c:	200037f8 	.word	0x200037f8
 800d420:	40011400 	.word	0x40011400
 800d424:	40020800 	.word	0x40020800
 800d428:	20003738 	.word	0x20003738
 800d42c:	40026428 	.word	0x40026428
 800d430:	400264a0 	.word	0x400264a0
 800d434:	20003798 	.word	0x20003798

0800d438 <_I2CWrite>:
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count)
{
 800d438:	b513      	push	{r0, r1, r4, lr}
	int status;
	int i2c_time_out = I2C_TIME_OUT_BASE + count * I2C_TIME_OUT_BYTE;
 800d43a:	f102 030a 	add.w	r3, r2, #10

	status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800d43e:	f890 4398 	ldrb.w	r4, [r0, #920]	; 0x398
 800d442:	9300      	str	r3, [sp, #0]
 800d444:	f8d0 03a0 	ldr.w	r0, [r0, #928]	; 0x3a0
 800d448:	b293      	uxth	r3, r2
 800d44a:	460a      	mov	r2, r1
 800d44c:	4621      	mov	r1, r4
 800d44e:	f7fb f825 	bl	800849c <HAL_I2C_Master_Transmit>
	if (status) {
		//VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
		//XNUCLEO6180XA1_I2C1_Init(&hi2c1);
	}
	return status;
}
 800d452:	b002      	add	sp, #8
 800d454:	bd10      	pop	{r4, pc}

0800d456 <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count)
{
 800d456:	b513      	push	{r0, r1, r4, lr}
	int status;
	int i2c_time_out = I2C_TIME_OUT_BASE + count * I2C_TIME_OUT_BYTE;
 800d458:	f102 030a 	add.w	r3, r2, #10

	status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr | 1, pdata, count, i2c_time_out);
 800d45c:	f890 4398 	ldrb.w	r4, [r0, #920]	; 0x398
 800d460:	9300      	str	r3, [sp, #0]
 800d462:	f8d0 03a0 	ldr.w	r0, [r0, #928]	; 0x3a0
 800d466:	b293      	uxth	r3, r2
 800d468:	460a      	mov	r2, r1
 800d46a:	f044 0101 	orr.w	r1, r4, #1
 800d46e:	f7fb f8eb 	bl	8008648 <HAL_I2C_Master_Receive>
	if (status) {
		//VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
		//XNUCLEO6180XA1_I2C1_Init(&hi2c1);
	}
	return status;
}
 800d472:	b002      	add	sp, #8
 800d474:	bd10      	pop	{r4, pc}
	...

0800d478 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count)
{
	int status_int;
	VL53L1_Error Status = VL53L1_ERROR_NONE;
	if (count > sizeof(_I2CBuffer) - 1) {
 800d478:	2bff      	cmp	r3, #255	; 0xff
{
 800d47a:	b570      	push	{r4, r5, r6, lr}
 800d47c:	4606      	mov	r6, r0
 800d47e:	461d      	mov	r5, r3
 800d480:	4610      	mov	r0, r2
	if (count > sizeof(_I2CBuffer) - 1) {
 800d482:	d813      	bhi.n	800d4ac <VL53L1_WriteMulti+0x34>
		return VL53L1_ERROR_INVALID_PARAMS;
	}
	_I2CBuffer[0] = index >> 8;
 800d484:	4c0b      	ldr	r4, [pc, #44]	; (800d4b4 <VL53L1_WriteMulti+0x3c>)
 800d486:	0a0b      	lsrs	r3, r1, #8
	_I2CBuffer[1] = index & 0xFF;
 800d488:	7061      	strb	r1, [r4, #1]
	memcpy(&_I2CBuffer[2], pdata, count);
 800d48a:	462a      	mov	r2, r5
 800d48c:	4601      	mov	r1, r0
 800d48e:	1ca0      	adds	r0, r4, #2
	_I2CBuffer[0] = index >> 8;
 800d490:	7023      	strb	r3, [r4, #0]
	memcpy(&_I2CBuffer[2], pdata, count);
 800d492:	f00d fd69 	bl	801af68 <memcpy>
	VL53L1_GetI2cBus();
	status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 800d496:	1caa      	adds	r2, r5, #2
 800d498:	4621      	mov	r1, r4
 800d49a:	4630      	mov	r0, r6
 800d49c:	f7ff ffcc 	bl	800d438 <_I2CWrite>
	if (status_int != 0) {
		Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800d4a0:	2800      	cmp	r0, #0
 800d4a2:	bf0c      	ite	eq
 800d4a4:	2000      	moveq	r0, #0
 800d4a6:	f06f 000c 	mvnne.w	r0, #12
 800d4aa:	bd70      	pop	{r4, r5, r6, pc}
		return VL53L1_ERROR_INVALID_PARAMS;
 800d4ac:	f06f 0003 	mvn.w	r0, #3
	}
	VL53L1_PutI2cBus();
	return Status;
}
 800d4b0:	bd70      	pop	{r4, r5, r6, pc}
 800d4b2:	bf00      	nop
 800d4b4:	20003898 	.word	0x20003898

0800d4b8 <VL53L1_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count)
{
 800d4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4ba:	460c      	mov	r4, r1
	VL53L1_Error Status = VL53L1_ERROR_NONE;
	int32_t status_int;

	_I2CBuffer[0] = index >> 8;
 800d4bc:	4909      	ldr	r1, [pc, #36]	; (800d4e4 <VL53L1_ReadMulti+0x2c>)
{
 800d4be:	4616      	mov	r6, r2
 800d4c0:	461f      	mov	r7, r3
	_I2CBuffer[1] = index & 0xFF;
	VL53L1_GetI2cBus();
	status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800d4c2:	2202      	movs	r2, #2
	_I2CBuffer[0] = index >> 8;
 800d4c4:	0a23      	lsrs	r3, r4, #8
{
 800d4c6:	4605      	mov	r5, r0
	_I2CBuffer[0] = index >> 8;
 800d4c8:	700b      	strb	r3, [r1, #0]
	_I2CBuffer[1] = index & 0xFF;
 800d4ca:	704c      	strb	r4, [r1, #1]
	status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800d4cc:	f7ff ffb4 	bl	800d438 <_I2CWrite>
	if (status_int != 0) {
 800d4d0:	b928      	cbnz	r0, 800d4de <VL53L1_ReadMulti+0x26>
		Status = VL53L1_ERROR_CONTROL_INTERFACE;
		goto done;
	}
	status_int = _I2CRead(Dev, pdata, count);
 800d4d2:	463a      	mov	r2, r7
 800d4d4:	4631      	mov	r1, r6
 800d4d6:	4628      	mov	r0, r5
 800d4d8:	f7ff ffbd 	bl	800d456 <_I2CRead>
	if (status_int != 0) {
 800d4dc:	b108      	cbz	r0, 800d4e2 <VL53L1_ReadMulti+0x2a>
		Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800d4de:	f06f 000c 	mvn.w	r0, #12
	}
 done:
	VL53L1_PutI2cBus();
	return Status;
}
 800d4e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4e4:	20003898 	.word	0x20003898

0800d4e8 <VL53L1_WrByte>:
VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data)
{
	VL53L1_Error Status = VL53L1_ERROR_NONE;
	int32_t status_int;

	_I2CBuffer[0] = index >> 8;
 800d4e8:	4b07      	ldr	r3, [pc, #28]	; (800d508 <VL53L1_WrByte+0x20>)
{
 800d4ea:	b510      	push	{r4, lr}
	_I2CBuffer[0] = index >> 8;
 800d4ec:	0a0c      	lsrs	r4, r1, #8
	_I2CBuffer[1] = index & 0xFF;
 800d4ee:	7059      	strb	r1, [r3, #1]
	_I2CBuffer[2] = data;
 800d4f0:	709a      	strb	r2, [r3, #2]

	VL53L1_GetI2cBus();
	status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800d4f2:	4619      	mov	r1, r3
 800d4f4:	2203      	movs	r2, #3
	_I2CBuffer[0] = index >> 8;
 800d4f6:	701c      	strb	r4, [r3, #0]
	status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800d4f8:	f7ff ff9e 	bl	800d438 <_I2CWrite>
	if (status_int != 0) {
 800d4fc:	2800      	cmp	r0, #0
		Status = VL53L1_ERROR_CONTROL_INTERFACE;
	}
	VL53L1_PutI2cBus();
	return Status;
}
 800d4fe:	bf14      	ite	ne
 800d500:	f06f 000c 	mvnne.w	r0, #12
 800d504:	2000      	moveq	r0, #0
 800d506:	bd10      	pop	{r4, pc}
 800d508:	20003898 	.word	0x20003898

0800d50c <VL53L1_RdByte>:
 done:
	return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data)
{
 800d50c:	b538      	push	{r3, r4, r5, lr}
	VL53L1_Error Status = VL53L1_ERROR_NONE;
	int32_t status_int;

	_I2CBuffer[0] = index >> 8;
 800d50e:	4b0a      	ldr	r3, [pc, #40]	; (800d538 <VL53L1_RdByte+0x2c>)
{
 800d510:	4615      	mov	r5, r2
	_I2CBuffer[0] = index >> 8;
 800d512:	0a0a      	lsrs	r2, r1, #8
 800d514:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index & 0xFF;
 800d516:	7059      	strb	r1, [r3, #1]
	VL53L1_GetI2cBus();
	status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800d518:	2202      	movs	r2, #2
 800d51a:	4619      	mov	r1, r3
{
 800d51c:	4604      	mov	r4, r0
	status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800d51e:	f7ff ff8b 	bl	800d438 <_I2CWrite>
	if (status_int) {
 800d522:	b928      	cbnz	r0, 800d530 <VL53L1_RdByte+0x24>
		Status = VL53L1_ERROR_CONTROL_INTERFACE;
		goto done;
	}
	status_int = _I2CRead(Dev, data, 1);
 800d524:	2201      	movs	r2, #1
 800d526:	4629      	mov	r1, r5
 800d528:	4620      	mov	r0, r4
 800d52a:	f7ff ff94 	bl	800d456 <_I2CRead>
	if (status_int != 0) {
 800d52e:	b108      	cbz	r0, 800d534 <VL53L1_RdByte+0x28>
		Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800d530:	f06f 000c 	mvn.w	r0, #12
	}
 done:
	VL53L1_PutI2cBus();
	return Status;
}
 800d534:	bd38      	pop	{r3, r4, r5, pc}
 800d536:	bf00      	nop
 800d538:	20003898 	.word	0x20003898

0800d53c <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data)
{
 800d53c:	b570      	push	{r4, r5, r6, lr}
	VL53L1_Error Status = VL53L1_ERROR_NONE;
	int32_t status_int;

	_I2CBuffer[0] = index >> 8;
 800d53e:	4c0d      	ldr	r4, [pc, #52]	; (800d574 <VL53L1_RdWord+0x38>)
 800d540:	0a0b      	lsrs	r3, r1, #8
{
 800d542:	4615      	mov	r5, r2
	_I2CBuffer[1] = index & 0xFF;
 800d544:	7061      	strb	r1, [r4, #1]
	VL53L1_GetI2cBus();
	status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800d546:	2202      	movs	r2, #2
 800d548:	4621      	mov	r1, r4
{
 800d54a:	4606      	mov	r6, r0
	_I2CBuffer[0] = index >> 8;
 800d54c:	7023      	strb	r3, [r4, #0]
	status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800d54e:	f7ff ff73 	bl	800d438 <_I2CWrite>

	if (status_int) {
 800d552:	b110      	cbz	r0, 800d55a <VL53L1_RdWord+0x1e>
		Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800d554:	f06f 000c 	mvn.w	r0, #12
 800d558:	bd70      	pop	{r4, r5, r6, pc}
		goto done;
	}
	status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800d55a:	2202      	movs	r2, #2
 800d55c:	4621      	mov	r1, r4
 800d55e:	4630      	mov	r0, r6
 800d560:	f7ff ff79 	bl	800d456 <_I2CRead>
	if (status_int != 0) {
 800d564:	2800      	cmp	r0, #0
 800d566:	d1f5      	bne.n	800d554 <VL53L1_RdWord+0x18>
		Status = VL53L1_ERROR_CONTROL_INTERFACE;
		goto done;
	}

	*data = ((uint16_t)_I2CBuffer[0] << 8) + (uint16_t)_I2CBuffer[1];
 800d568:	7822      	ldrb	r2, [r4, #0]
 800d56a:	7863      	ldrb	r3, [r4, #1]
 800d56c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800d570:	802b      	strh	r3, [r5, #0]
 done:
	VL53L1_PutI2cBus();
	return Status;
}
 800d572:	bd70      	pop	{r4, r5, r6, pc}
 800d574:	20003898 	.word	0x20003898

0800d578 <VL53L1_WaitUs>:
	HAL_Delay(wait_ms);
	return VL53L1_ERROR_NONE;
}

VL53L1_Error VL53L1_WaitUs(VL53L1_Dev_t *pdev, int32_t wait_us)
{
 800d578:	b508      	push	{r3, lr}
	(void)pdev;
	HAL_Delay(wait_us / 1000);
 800d57a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d57e:	fb91 f0f0 	sdiv	r0, r1, r0
 800d582:	f7f9 fc9b 	bl	8006ebc <HAL_Delay>
	return VL53L1_ERROR_NONE;
}
 800d586:	2000      	movs	r0, #0
 800d588:	bd08      	pop	{r3, pc}
	...

0800d58c <VL53L1_WaitValueMaskEx>:
	uint32_t timeout_ms,
	uint16_t index,
	uint8_t value,
	uint8_t mask,
	uint32_t poll_delay_ms)
{
 800d58c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d590:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800d594:	4606      	mov	r6, r0
 800d596:	460f      	mov	r7, r1
 800d598:	4690      	mov	r8, r2

	VL53L1_Error status = VL53L1_ERROR_NONE;
	uint32_t start_time_ms = 0;
	uint32_t current_time_ms = 0;
	uint32_t polling_time_ms = 0;
	uint8_t byte_value = 0;
 800d59a:	2400      	movs	r4, #0
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
		index,
		register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 800d59c:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d5a0:	4918      	ldr	r1, [pc, #96]	; (800d604 <VL53L1_WaitValueMaskEx+0x78>)
{
 800d5a2:	f89d a228 	ldrb.w	sl, [sp, #552]	; 0x228
 800d5a6:	9d8b      	ldr	r5, [sp, #556]	; 0x22c
	uint8_t byte_value = 0;
 800d5a8:	f88d 4007 	strb.w	r4, [sp, #7]
	VL53L1_COPYSTRING(register_name, "");
 800d5ac:	a802      	add	r0, sp, #8
{
 800d5ae:	4699      	mov	r9, r3
	VL53L1_COPYSTRING(register_name, "");
 800d5b0:	f00e fb8b 	bl	801bcca <strncpy>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 800d5b4:	b1ff      	cbz	r7, 800d5f6 <VL53L1_WaitValueMaskEx+0x6a>
	       (polling_time_ms < timeout_ms) &&
 800d5b6:	b12c      	cbz	r4, 800d5c4 <VL53L1_WaitValueMaskEx+0x38>
 800d5b8:	2300      	movs	r3, #0

	if (found == 0 && status == VL53L1_ERROR_NONE)
		status = VL53L1_ERROR_TIME_OUT;

	return status;
}
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
 800d5c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			status = VL53L1_RdByte(
 800d5c4:	f10d 0207 	add.w	r2, sp, #7
 800d5c8:	4641      	mov	r1, r8
 800d5ca:	4630      	mov	r0, r6
 800d5cc:	f7ff ff9e 	bl	800d50c <VL53L1_RdByte>
		if ((byte_value & mask) == value)
 800d5d0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d5d4:	ea0a 0202 	and.w	r2, sl, r2
 800d5d8:	454a      	cmp	r2, r9
			status = VL53L1_RdByte(
 800d5da:	4603      	mov	r3, r0
		if ((byte_value & mask) == value)
 800d5dc:	d103      	bne.n	800d5e6 <VL53L1_WaitValueMaskEx+0x5a>
	while ((status == VL53L1_ERROR_NONE) &&
 800d5de:	2800      	cmp	r0, #0
 800d5e0:	d1eb      	bne.n	800d5ba <VL53L1_WaitValueMaskEx+0x2e>
			found = 1;
 800d5e2:	2401      	movs	r4, #1
 800d5e4:	e7e6      	b.n	800d5b4 <VL53L1_WaitValueMaskEx+0x28>
		if (status == VL53L1_ERROR_NONE &&
 800d5e6:	2800      	cmp	r0, #0
 800d5e8:	d1e7      	bne.n	800d5ba <VL53L1_WaitValueMaskEx+0x2e>
		    found == 0 &&
 800d5ea:	2d00      	cmp	r5, #0
 800d5ec:	d0e2      	beq.n	800d5b4 <VL53L1_WaitValueMaskEx+0x28>
	HAL_Delay(wait_ms);
 800d5ee:	4628      	mov	r0, r5
 800d5f0:	f7f9 fc64 	bl	8006ebc <HAL_Delay>
 800d5f4:	e7de      	b.n	800d5b4 <VL53L1_WaitValueMaskEx+0x28>
		status = VL53L1_ERROR_TIME_OUT;
 800d5f6:	2c00      	cmp	r4, #0
 800d5f8:	bf14      	ite	ne
 800d5fa:	2300      	movne	r3, #0
 800d5fc:	f06f 0306 	mvneq.w	r3, #6
 800d600:	e7db      	b.n	800d5ba <VL53L1_WaitValueMaskEx+0x2e>
 800d602:	bf00      	nop
 800d604:	0801db7c 	.word	0x0801db7c

0800d608 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800d608:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d640 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800d60c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800d60e:	e003      	b.n	800d618 <LoopCopyDataInit>

0800d610 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800d610:	4b0c      	ldr	r3, [pc, #48]	; (800d644 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800d612:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800d614:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800d616:	3104      	adds	r1, #4

0800d618 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800d618:	480b      	ldr	r0, [pc, #44]	; (800d648 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800d61a:	4b0c      	ldr	r3, [pc, #48]	; (800d64c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800d61c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800d61e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800d620:	d3f6      	bcc.n	800d610 <CopyDataInit>
  ldr  r2, =_sbss
 800d622:	4a0b      	ldr	r2, [pc, #44]	; (800d650 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800d624:	e002      	b.n	800d62c <LoopFillZerobss>

0800d626 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800d626:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800d628:	f842 3b04 	str.w	r3, [r2], #4

0800d62c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800d62c:	4b09      	ldr	r3, [pc, #36]	; (800d654 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800d62e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800d630:	d3f9      	bcc.n	800d626 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800d632:	f7ff fc71 	bl	800cf18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d636:	f00d fc73 	bl	801af20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d63a:	f7fe fe47 	bl	800c2cc <main>
  bx  lr    
 800d63e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800d640:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 800d644:	0801e290 	.word	0x0801e290
  ldr  r0, =_sdata
 800d648:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800d64c:	20001674 	.word	0x20001674
  ldr  r2, =_sbss
 800d650:	20001678 	.word	0x20001678
  ldr  r3, = _ebss
 800d654:	2000399c 	.word	0x2000399c

0800d658 <DMA1_Stream1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d658:	e7fe      	b.n	800d658 <DMA1_Stream1_IRQHandler>
	...

0800d65c <m_mldivide>:
 800d65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d660:	b097      	sub	sp, #92	; 0x5c
 800d662:	4607      	mov	r7, r0
 800d664:	460d      	mov	r5, r1
 800d666:	4614      	mov	r4, r2
 800d668:	4606      	mov	r6, r0
 800d66a:	f100 0820 	add.w	r8, r0, #32
 800d66e:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 800d672:	6830      	ldr	r0, [r6, #0]
 800d674:	6871      	ldr	r1, [r6, #4]
 800d676:	68b2      	ldr	r2, [r6, #8]
 800d678:	68f3      	ldr	r3, [r6, #12]
 800d67a:	46e6      	mov	lr, ip
 800d67c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d680:	3610      	adds	r6, #16
 800d682:	4546      	cmp	r6, r8
 800d684:	46f4      	mov	ip, lr
 800d686:	d1f4      	bne.n	800d672 <m_mldivide+0x16>
 800d688:	edd7 7a00 	vldr	s15, [r7]
 800d68c:	ed97 7a01 	vldr	s14, [r7, #4]
 800d690:	6830      	ldr	r0, [r6, #0]
 800d692:	f8ce 0000 	str.w	r0, [lr]
 800d696:	eef0 7ae7 	vabs.f32	s15, s15
 800d69a:	eeb0 7ac7 	vabs.f32	s14, s14
 800d69e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d6a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6a6:	f100 8184 	bmi.w	800d9b2 <m_mldivide+0x356>
 800d6aa:	2304      	movs	r3, #4
 800d6ac:	9302      	str	r3, [sp, #8]
 800d6ae:	f04f 0b00 	mov.w	fp, #0
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	2307      	movs	r3, #7
 800d6b6:	eeb0 7a67 	vmov.f32	s14, s15
 800d6ba:	46dc      	mov	ip, fp
 800d6bc:	2106      	movs	r1, #6
 800d6be:	9303      	str	r3, [sp, #12]
 800d6c0:	f04f 0903 	mov.w	r9, #3
 800d6c4:	2601      	movs	r6, #1
 800d6c6:	edd7 7a02 	vldr	s15, [r7, #8]
 800d6ca:	eef0 7ae7 	vabs.f32	s15, s15
 800d6ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d6d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6d6:	f100 8179 	bmi.w	800d9cc <m_mldivide+0x370>
 800d6da:	2202      	movs	r2, #2
 800d6dc:	2308      	movs	r3, #8
 800d6de:	f04f 0e05 	mov.w	lr, #5
 800d6e2:	9200      	str	r2, [sp, #0]
 800d6e4:	4438      	add	r0, r7
 800d6e6:	4467      	add	r7, ip
 800d6e8:	edd0 6a00 	vldr	s13, [r0]
 800d6ec:	ed97 7a00 	vldr	s14, [r7]
 800d6f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d6f4:	00b0      	lsls	r0, r6, #2
 800d6f6:	aa16      	add	r2, sp, #88	; 0x58
 800d6f8:	eb02 0c00 	add.w	ip, r2, r0
 800d6fc:	9a00      	ldr	r2, [sp, #0]
 800d6fe:	9006      	str	r0, [sp, #24]
 800d700:	ea4f 008b 	mov.w	r0, fp, lsl #2
 800d704:	4607      	mov	r7, r0
 800d706:	ea4f 0a82 	mov.w	sl, r2, lsl #2
 800d70a:	aa16      	add	r2, sp, #88	; 0x58
 800d70c:	eb02 0807 	add.w	r8, r2, r7
 800d710:	9004      	str	r0, [sp, #16]
 800d712:	eb02 000a 	add.w	r0, r2, sl
 800d716:	ea4f 0789 	mov.w	r7, r9, lsl #2
 800d71a:	970a      	str	r7, [sp, #40]	; 0x28
 800d71c:	ed4c 7a09 	vstr	s15, [ip, #-36]	; 0xffffffdc
 800d720:	ed18 7a09 	vldr	s14, [r8, #-36]	; 0xffffffdc
 800d724:	ed50 6a09 	vldr	s13, [r0, #-36]	; 0xffffffdc
 800d728:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d72c:	19d7      	adds	r7, r2, r7
 800d72e:	9709      	str	r7, [sp, #36]	; 0x24
 800d730:	9f02      	ldr	r7, [sp, #8]
 800d732:	00bf      	lsls	r7, r7, #2
 800d734:	9707      	str	r7, [sp, #28]
 800d736:	19d7      	adds	r7, r2, r7
 800d738:	ea4f 028e 	mov.w	r2, lr, lsl #2
 800d73c:	9701      	str	r7, [sp, #4]
 800d73e:	0089      	lsls	r1, r1, #2
 800d740:	4617      	mov	r7, r2
 800d742:	aa16      	add	r2, sp, #88	; 0x58
 800d744:	eb02 0901 	add.w	r9, r2, r1
 800d748:	910b      	str	r1, [sp, #44]	; 0x2c
 800d74a:	9903      	ldr	r1, [sp, #12]
 800d74c:	ed40 7a09 	vstr	s15, [r0, #-36]	; 0xffffffdc
 800d750:	0089      	lsls	r1, r1, #2
 800d752:	009b      	lsls	r3, r3, #2
 800d754:	eb02 0e07 	add.w	lr, r2, r7
 800d758:	eb02 0803 	add.w	r8, r2, r3
 800d75c:	9108      	str	r1, [sp, #32]
 800d75e:	1851      	adds	r1, r2, r1
 800d760:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d762:	ed1c 7a09 	vldr	s14, [ip, #-36]	; 0xffffffdc
 800d766:	ed52 6a09 	vldr	s13, [r2, #-36]	; 0xffffffdc
 800d76a:	9705      	str	r7, [sp, #20]
 800d76c:	9f01      	ldr	r7, [sp, #4]
 800d76e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d772:	ed57 7a09 	vldr	s15, [r7, #-36]	; 0xffffffdc
 800d776:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d77a:	ed47 7a09 	vstr	s15, [r7, #-36]	; 0xffffffdc
 800d77e:	ed52 6a09 	vldr	s13, [r2, #-36]	; 0xffffffdc
 800d782:	ed10 7a09 	vldr	s14, [r0, #-36]	; 0xffffffdc
 800d786:	ed5e 7a09 	vldr	s15, [lr, #-36]	; 0xffffffdc
 800d78a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d78e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d792:	ed4e 7a09 	vstr	s15, [lr, #-36]	; 0xffffffdc
 800d796:	ed59 6a09 	vldr	s13, [r9, #-36]	; 0xffffffdc
 800d79a:	ed1c 7a09 	vldr	s14, [ip, #-36]	; 0xffffffdc
 800d79e:	ed51 7a09 	vldr	s15, [r1, #-36]	; 0xffffffdc
 800d7a2:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d7a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d7aa:	ed41 7a09 	vstr	s15, [r1, #-36]	; 0xffffffdc
 800d7ae:	ed10 7a09 	vldr	s14, [r0, #-36]	; 0xffffffdc
 800d7b2:	ed59 6a09 	vldr	s13, [r9, #-36]	; 0xffffffdc
 800d7b6:	ed58 7a09 	vldr	s15, [r8, #-36]	; 0xffffffdc
 800d7ba:	9a01      	ldr	r2, [sp, #4]
 800d7bc:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d7c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d7c4:	ed48 7a09 	vstr	s15, [r8, #-36]	; 0xffffffdc
 800d7c8:	ed1e 7a09 	vldr	s14, [lr, #-36]	; 0xffffffdc
 800d7cc:	ed52 6a09 	vldr	s13, [r2, #-36]	; 0xffffffdc
 800d7d0:	eeb0 6ac7 	vabs.f32	s12, s14
 800d7d4:	eef0 7ae6 	vabs.f32	s15, s13
 800d7d8:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800d7dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7e0:	dc15      	bgt.n	800d80e <m_mldivide+0x1b2>
 800d7e2:	9900      	ldr	r1, [sp, #0]
 800d7e4:	9f05      	ldr	r7, [sp, #20]
 800d7e6:	9707      	str	r7, [sp, #28]
 800d7e8:	9f02      	ldr	r7, [sp, #8]
 800d7ea:	9600      	str	r6, [sp, #0]
 800d7ec:	4630      	mov	r0, r6
 800d7ee:	460e      	mov	r6, r1
 800d7f0:	9903      	ldr	r1, [sp, #12]
 800d7f2:	9308      	str	r3, [sp, #32]
 800d7f4:	eef0 7a66 	vmov.f32	s15, s13
 800d7f8:	00bb      	lsls	r3, r7, #2
 800d7fa:	eef0 6a47 	vmov.f32	s13, s14
 800d7fe:	9305      	str	r3, [sp, #20]
 800d800:	f8cd a018 	str.w	sl, [sp, #24]
 800d804:	eeb0 7a67 	vmov.f32	s14, s15
 800d808:	008b      	lsls	r3, r1, #2
 800d80a:	ea4f 0a80 	mov.w	sl, r0, lsl #2
 800d80e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d812:	9a07      	ldr	r2, [sp, #28]
 800d814:	9f04      	ldr	r7, [sp, #16]
 800d816:	a916      	add	r1, sp, #88	; 0x58
 800d818:	440a      	add	r2, r1
 800d81a:	4610      	mov	r0, r2
 800d81c:	9a08      	ldr	r2, [sp, #32]
 800d81e:	440a      	add	r2, r1
 800d820:	440b      	add	r3, r1
 800d822:	4611      	mov	r1, r2
 800d824:	9a05      	ldr	r2, [sp, #20]
 800d826:	f10d 0e58 	add.w	lr, sp, #88	; 0x58
 800d82a:	4472      	add	r2, lr
 800d82c:	ed40 7a09 	vstr	s15, [r0, #-36]	; 0xffffffdc
 800d830:	4690      	mov	r8, r2
 800d832:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d834:	ed53 6a09 	vldr	s13, [r3, #-36]	; 0xffffffdc
 800d838:	ed11 6a09 	vldr	s12, [r1, #-36]	; 0xffffffdc
 800d83c:	4472      	add	r2, lr
 800d83e:	4696      	mov	lr, r2
 800d840:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d844:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d846:	f10d 0958 	add.w	r9, sp, #88	; 0x58
 800d84a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d84e:	444a      	add	r2, r9
 800d850:	eb05 0c07 	add.w	ip, r5, r7
 800d854:	4691      	mov	r9, r2
 800d856:	aa16      	add	r2, sp, #88	; 0x58
 800d858:	ed9c 7a00 	vldr	s14, [ip]
 800d85c:	ed01 6a09 	vstr	s12, [r1, #-36]	; 0xffffffdc
 800d860:	eb02 0c0a 	add.w	ip, r2, sl
 800d864:	ed1c 2a09 	vldr	s4, [ip, #-36]	; 0xffffffdc
 800d868:	ed84 7a00 	vstr	s14, [r4]
 800d86c:	44aa      	add	sl, r5
 800d86e:	edda 6a00 	vldr	s13, [sl]
 800d872:	9906      	ldr	r1, [sp, #24]
 800d874:	ed53 4a09 	vldr	s9, [r3, #-36]	; 0xffffffdc
 800d878:	ed10 4a09 	vldr	s8, [r0, #-36]	; 0xffffffdc
 800d87c:	ed1e 5a09 	vldr	s10, [lr, #-36]	; 0xffffffdc
 800d880:	ed58 2a09 	vldr	s5, [r8, #-36]	; 0xffffffdc
 800d884:	ed59 5a09 	vldr	s11, [r9, #-36]	; 0xffffffdc
 800d888:	ee67 7a02 	vmul.f32	s15, s14, s4
 800d88c:	1853      	adds	r3, r2, r1
 800d88e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d892:	ed53 3a09 	vldr	s7, [r3, #-36]	; 0xffffffdc
 800d896:	edc4 6a01 	vstr	s13, [r4, #4]
 800d89a:	186b      	adds	r3, r5, r1
 800d89c:	edd3 7a00 	vldr	s15, [r3]
 800d8a0:	ee27 1a23 	vmul.f32	s2, s14, s7
 800d8a4:	ee64 1a26 	vmul.f32	s3, s8, s13
 800d8a8:	ee77 7ac1 	vsub.f32	s15, s15, s2
 800d8ac:	19d7      	adds	r7, r2, r7
 800d8ae:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800d8b2:	ed17 3a09 	vldr	s6, [r7, #-36]	; 0xffffffdc
 800d8b6:	9a00      	ldr	r2, [sp, #0]
 800d8b8:	eec7 1a86 	vdiv.f32	s3, s15, s12
 800d8bc:	eb05 078b 	add.w	r7, r5, fp, lsl #2
 800d8c0:	eb05 0082 	add.w	r0, r5, r2, lsl #2
 800d8c4:	eb05 0186 	add.w	r1, r5, r6, lsl #2
 800d8c8:	ee24 1aa1 	vmul.f32	s2, s9, s3
 800d8cc:	ee65 7a21 	vmul.f32	s15, s10, s3
 800d8d0:	ee76 6ac1 	vsub.f32	s13, s13, s2
 800d8d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d8d8:	eec6 7aa2 	vdiv.f32	s15, s13, s5
 800d8dc:	edc4 1a02 	vstr	s3, [r4, #8]
 800d8e0:	ee67 6aa5 	vmul.f32	s13, s15, s11
 800d8e4:	edc4 7a01 	vstr	s15, [r4, #4]
 800d8e8:	ee37 7a66 	vsub.f32	s14, s14, s13
 800d8ec:	eec7 7a03 	vdiv.f32	s15, s14, s6
 800d8f0:	edc4 7a00 	vstr	s15, [r4]
 800d8f4:	ed97 7a03 	vldr	s14, [r7, #12]
 800d8f8:	ed84 7a03 	vstr	s14, [r4, #12]
 800d8fc:	edd0 6a03 	vldr	s13, [r0, #12]
 800d900:	ee67 7a02 	vmul.f32	s15, s14, s4
 800d904:	ee27 1a23 	vmul.f32	s2, s14, s7
 800d908:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d90c:	edc4 6a04 	vstr	s13, [r4, #16]
 800d910:	edd1 7a03 	vldr	s15, [r1, #12]
 800d914:	ee66 1a84 	vmul.f32	s3, s13, s8
 800d918:	ee77 7ac1 	vsub.f32	s15, s15, s2
 800d91c:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800d920:	eec7 1a86 	vdiv.f32	s3, s15, s12
 800d924:	ee21 1aa4 	vmul.f32	s2, s3, s9
 800d928:	ee61 7a85 	vmul.f32	s15, s3, s10
 800d92c:	ee76 6ac1 	vsub.f32	s13, s13, s2
 800d930:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d934:	eec6 7aa2 	vdiv.f32	s15, s13, s5
 800d938:	edc4 1a05 	vstr	s3, [r4, #20]
 800d93c:	ee67 6aa5 	vmul.f32	s13, s15, s11
 800d940:	edc4 7a04 	vstr	s15, [r4, #16]
 800d944:	ee37 7a66 	vsub.f32	s14, s14, s13
 800d948:	eec7 7a03 	vdiv.f32	s15, s14, s6
 800d94c:	edc4 7a03 	vstr	s15, [r4, #12]
 800d950:	edd7 7a06 	vldr	s15, [r7, #24]
 800d954:	edc4 7a06 	vstr	s15, [r4, #24]
 800d958:	ed90 7a06 	vldr	s14, [r0, #24]
 800d95c:	ee27 2a82 	vmul.f32	s4, s15, s4
 800d960:	ee67 3aa3 	vmul.f32	s7, s15, s7
 800d964:	ee37 7a42 	vsub.f32	s14, s14, s4
 800d968:	ed84 7a07 	vstr	s14, [r4, #28]
 800d96c:	edd1 6a06 	vldr	s13, [r1, #24]
 800d970:	ee27 4a04 	vmul.f32	s8, s14, s8
 800d974:	ee76 6ae3 	vsub.f32	s13, s13, s7
 800d978:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800d97c:	ee86 4a86 	vdiv.f32	s8, s13, s12
 800d980:	ee64 4a24 	vmul.f32	s9, s8, s9
 800d984:	ee24 5a05 	vmul.f32	s10, s8, s10
 800d988:	ee37 7a64 	vsub.f32	s14, s14, s9
 800d98c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800d990:	eec7 6a22 	vdiv.f32	s13, s14, s5
 800d994:	ed84 4a08 	vstr	s8, [r4, #32]
 800d998:	ee66 5aa5 	vmul.f32	s11, s13, s11
 800d99c:	edc4 6a07 	vstr	s13, [r4, #28]
 800d9a0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800d9a4:	ee87 7a83 	vdiv.f32	s14, s15, s6
 800d9a8:	ed84 7a06 	vstr	s14, [r4, #24]
 800d9ac:	b017      	add	sp, #92	; 0x5c
 800d9ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9b2:	2306      	movs	r3, #6
 800d9b4:	f04f 0904 	mov.w	r9, #4
 800d9b8:	2000      	movs	r0, #0
 800d9ba:	9303      	str	r3, [sp, #12]
 800d9bc:	2303      	movs	r3, #3
 800d9be:	46cc      	mov	ip, r9
 800d9c0:	4606      	mov	r6, r0
 800d9c2:	2107      	movs	r1, #7
 800d9c4:	9302      	str	r3, [sp, #8]
 800d9c6:	f04f 0b01 	mov.w	fp, #1
 800d9ca:	e67c      	b.n	800d6c6 <m_mldivide+0x6a>
 800d9cc:	2207      	movs	r2, #7
 800d9ce:	2304      	movs	r3, #4
 800d9d0:	2108      	movs	r1, #8
 800d9d2:	9203      	str	r2, [sp, #12]
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	9302      	str	r3, [sp, #8]
 800d9d8:	4618      	mov	r0, r3
 800d9da:	468c      	mov	ip, r1
 800d9dc:	2306      	movs	r3, #6
 800d9de:	f04f 0e03 	mov.w	lr, #3
 800d9e2:	f04f 0905 	mov.w	r9, #5
 800d9e6:	f04f 0b02 	mov.w	fp, #2
 800d9ea:	9200      	str	r2, [sp, #0]
 800d9ec:	2601      	movs	r6, #1
 800d9ee:	e679      	b.n	800d6e4 <m_mldivide+0x88>

0800d9f0 <m_qmult_eml>:
 800d9f0:	edd1 3a02 	vldr	s7, [r1, #8]
 800d9f4:	ed91 3a00 	vldr	s6, [r1]
 800d9f8:	edd0 7a00 	vldr	s15, [r0]
 800d9fc:	edd1 2a03 	vldr	s5, [r1, #12]
 800da00:	ed91 4a01 	vldr	s8, [r1, #4]
 800da04:	edd0 4a01 	vldr	s9, [r0, #4]
 800da08:	eddf 0a2c 	vldr	s1, [pc, #176]	; 800dabc <m_qmult_eml+0xcc>
 800da0c:	ed90 5a02 	vldr	s10, [r0, #8]
 800da10:	edd0 5a03 	vldr	s11, [r0, #12]
 800da14:	eeb1 1a43 	vneg.f32	s2, s6
 800da18:	eeb1 2a63 	vneg.f32	s4, s7
 800da1c:	ee27 7a81 	vmul.f32	s14, s15, s2
 800da20:	ee67 6a82 	vmul.f32	s13, s15, s4
 800da24:	ee27 6aa2 	vmul.f32	s12, s15, s5
 800da28:	ee67 7a84 	vmul.f32	s15, s15, s8
 800da2c:	eef1 1a44 	vneg.f32	s3, s8
 800da30:	ee24 0aa1 	vmul.f32	s0, s9, s3
 800da34:	ed2d 8b02 	vpush	{d8}
 800da38:	ee36 6a20 	vadd.f32	s12, s12, s1
 800da3c:	ee24 8aa3 	vmul.f32	s16, s9, s7
 800da40:	ee37 7a20 	vadd.f32	s14, s14, s1
 800da44:	ee24 1a81 	vmul.f32	s2, s9, s2
 800da48:	ee76 6aa0 	vadd.f32	s13, s13, s1
 800da4c:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800da50:	ee64 4aa2 	vmul.f32	s9, s9, s5
 800da54:	ee65 0a03 	vmul.f32	s1, s10, s6
 800da58:	ee36 6a08 	vadd.f32	s12, s12, s16
 800da5c:	ee65 1a21 	vmul.f32	s3, s10, s3
 800da60:	ee25 2a02 	vmul.f32	s4, s10, s4
 800da64:	ee37 7a00 	vadd.f32	s14, s14, s0
 800da68:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800da6c:	ee77 7a81 	vadd.f32	s15, s15, s2
 800da70:	ee25 5a22 	vmul.f32	s10, s10, s5
 800da74:	ee25 3a83 	vmul.f32	s6, s11, s6
 800da78:	ee65 3aa3 	vmul.f32	s7, s11, s7
 800da7c:	ee25 4a84 	vmul.f32	s8, s11, s8
 800da80:	ee36 6a21 	vadd.f32	s12, s12, s3
 800da84:	ee37 7a02 	vadd.f32	s14, s14, s4
 800da88:	ee76 6aa0 	vadd.f32	s13, s13, s1
 800da8c:	ee77 7a85 	vadd.f32	s15, s15, s10
 800da90:	ee65 5aa2 	vmul.f32	s11, s11, s5
 800da94:	ee36 6a03 	vadd.f32	s12, s12, s6
 800da98:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800da9c:	ee76 6a84 	vadd.f32	s13, s13, s8
 800daa0:	ee37 7a25 	vadd.f32	s14, s14, s11
 800daa4:	ed82 6a00 	vstr	s12, [r2]
 800daa8:	edc2 7a02 	vstr	s15, [r2, #8]
 800daac:	edc2 6a01 	vstr	s13, [r2, #4]
 800dab0:	ed82 7a03 	vstr	s14, [r2, #12]
 800dab4:	ecbd 8b02 	vpop	{d8}
 800dab8:	4770      	bx	lr
 800daba:	bf00      	nop
 800dabc:	00000000 	.word	0x00000000

0800dac0 <m_q2dcm_eml>:
 800dac0:	b510      	push	{r4, lr}
 800dac2:	ed90 7a00 	vldr	s14, [r0]
 800dac6:	edd0 6a01 	vldr	s13, [r0, #4]
 800daca:	ed90 6a02 	vldr	s12, [r0, #8]
 800dace:	edd0 7a03 	vldr	s15, [r0, #12]
 800dad2:	ed2d 8b0a 	vpush	{d8-d12}
 800dad6:	ee66 caa6 	vmul.f32	s25, s13, s13
 800dada:	ee27 8a07 	vmul.f32	s16, s14, s14
 800dade:	460c      	mov	r4, r1
 800dae0:	4608      	mov	r0, r1
 800dae2:	2224      	movs	r2, #36	; 0x24
 800dae4:	2100      	movs	r1, #0
 800dae6:	ee67 ba26 	vmul.f32	s23, s14, s13
 800daea:	ee27 ba06 	vmul.f32	s22, s14, s12
 800daee:	ee66 aa86 	vmul.f32	s21, s13, s12
 800daf2:	ee26 ca06 	vmul.f32	s24, s12, s12
 800daf6:	ee67 8aa7 	vmul.f32	s17, s15, s15
 800dafa:	ee27 9a27 	vmul.f32	s18, s14, s15
 800dafe:	ee66 9aa7 	vmul.f32	s19, s13, s15
 800db02:	ee26 aa27 	vmul.f32	s20, s12, s15
 800db06:	f00d fa3a 	bl	801af7e <memset>
 800db0a:	ee78 5a6c 	vsub.f32	s11, s16, s25
 800db0e:	eef1 7a48 	vneg.f32	s15, s16
 800db12:	ee3c 8ac8 	vsub.f32	s16, s25, s16
 800db16:	ee77 7aec 	vsub.f32	s15, s15, s25
 800db1a:	ee38 8a4c 	vsub.f32	s16, s16, s24
 800db1e:	ee75 5acc 	vsub.f32	s11, s11, s24
 800db22:	ee77 7a8c 	vadd.f32	s15, s15, s24
 800db26:	ee38 8a28 	vadd.f32	s16, s16, s17
 800db2a:	ee3b 4a8a 	vadd.f32	s8, s23, s20
 800db2e:	ee3b 6aca 	vsub.f32	s12, s23, s20
 800db32:	ee7b 4a69 	vsub.f32	s9, s22, s19
 800db36:	ee7b 6a29 	vadd.f32	s13, s22, s19
 800db3a:	ee39 5a2a 	vadd.f32	s10, s18, s21
 800db3e:	ee3a 7ac9 	vsub.f32	s14, s21, s18
 800db42:	ee75 5aa8 	vadd.f32	s11, s11, s17
 800db46:	ee77 7aa8 	vadd.f32	s15, s15, s17
 800db4a:	ed84 8a04 	vstr	s16, [r4, #16]
 800db4e:	ecbd 8b0a 	vpop	{d8-d12}
 800db52:	ee34 4a04 	vadd.f32	s8, s8, s8
 800db56:	ee36 6a06 	vadd.f32	s12, s12, s12
 800db5a:	ee74 4aa4 	vadd.f32	s9, s9, s9
 800db5e:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800db62:	ee35 5a05 	vadd.f32	s10, s10, s10
 800db66:	ee37 7a07 	vadd.f32	s14, s14, s14
 800db6a:	edc4 5a00 	vstr	s11, [r4]
 800db6e:	ed84 4a03 	vstr	s8, [r4, #12]
 800db72:	ed84 6a01 	vstr	s12, [r4, #4]
 800db76:	edc4 4a06 	vstr	s9, [r4, #24]
 800db7a:	edc4 6a02 	vstr	s13, [r4, #8]
 800db7e:	edc4 7a08 	vstr	s15, [r4, #32]
 800db82:	ed84 5a07 	vstr	s10, [r4, #28]
 800db86:	ed84 7a05 	vstr	s14, [r4, #20]
 800db8a:	bd10      	pop	{r4, pc}
 800db8c:	0000      	movs	r0, r0
	...

0800db90 <m_dcm2q_eml>:
 800db90:	edd0 7a00 	vldr	s15, [r0]
 800db94:	edd0 6a04 	vldr	s13, [r0, #16]
 800db98:	ed90 7a08 	vldr	s14, [r0, #32]
 800db9c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800dba0:	ee77 7a86 	vadd.f32	s15, s15, s12
 800dba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dba8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800dbac:	4604      	mov	r4, r0
 800dbae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dbb2:	460d      	mov	r5, r1
 800dbb4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dbb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbbc:	f340 80e0 	ble.w	800dd80 <m_dcm2q_eml+0x1f0>
 800dbc0:	ee17 0a90 	vmov	r0, s15
 800dbc4:	f7f2 fcc8 	bl	8000558 <__aeabi_f2d>
 800dbc8:	ec41 0b10 	vmov	d0, r0, r1
 800dbcc:	ed94 5a05 	vldr	s10, [r4, #20]
 800dbd0:	edd4 6a07 	vldr	s13, [r4, #28]
 800dbd4:	edd4 5a06 	vldr	s11, [r4, #24]
 800dbd8:	ed94 7a02 	vldr	s14, [r4, #8]
 800dbdc:	ed94 6a01 	vldr	s12, [r4, #4]
 800dbe0:	edd4 7a03 	vldr	s15, [r4, #12]
 800dbe4:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800dbe8:	ee37 7a65 	vsub.f32	s14, s14, s11
 800dbec:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800dbf0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800dbf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbf8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800dbfc:	bf4c      	ite	mi
 800dbfe:	f04f 38ff 	movmi.w	r8, #4294967295
 800dc02:	f04f 0801 	movpl.w	r8, #1
 800dc06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dc0e:	bf4c      	ite	mi
 800dc10:	f04f 36ff 	movmi.w	r6, #4294967295
 800dc14:	2601      	movpl	r6, #1
 800dc16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc1a:	bf4c      	ite	mi
 800dc1c:	f04f 37ff 	movmi.w	r7, #4294967295
 800dc20:	2701      	movpl	r7, #1
 800dc22:	f00b fa95 	bl	8019150 <sqrt>
 800dc26:	ec51 0b10 	vmov	r0, r1, d0
 800dc2a:	f7f2 ffe1 	bl	8000bf0 <__aeabi_d2f>
 800dc2e:	ee07 8a90 	vmov	s15, r8
 800dc32:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800dc36:	ee07 0a90 	vmov	s15, r0
 800dc3a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800dc3e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800dc42:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800dc46:	ee27 7a26 	vmul.f32	s14, s14, s13
 800dc4a:	ed85 7a00 	vstr	s14, [r5]
 800dc4e:	ed94 6a00 	vldr	s12, [r4]
 800dc52:	edd4 6a04 	vldr	s13, [r4, #16]
 800dc56:	ed94 7a08 	vldr	s14, [r4, #32]
 800dc5a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800dc5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dc66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dc6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc6e:	d904      	bls.n	800dc7a <m_dcm2q_eml+0xea>
 800dc70:	eef4 7a67 	vcmp.f32	s15, s15
 800dc74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc78:	d07b      	beq.n	800dd72 <m_dcm2q_eml+0x1e2>
 800dc7a:	ed9f 0b43 	vldr	d0, [pc, #268]	; 800dd88 <m_dcm2q_eml+0x1f8>
 800dc7e:	f00b fa67 	bl	8019150 <sqrt>
 800dc82:	ec51 0b10 	vmov	r0, r1, d0
 800dc86:	f7f2 ffb3 	bl	8000bf0 <__aeabi_d2f>
 800dc8a:	ee07 0a90 	vmov	s15, r0
 800dc8e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800dc92:	ee27 7a87 	vmul.f32	s14, s15, s14
 800dc96:	ee07 6a90 	vmov	s15, r6
 800dc9a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800dc9e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800dca2:	ee27 7a26 	vmul.f32	s14, s14, s13
 800dca6:	ed85 7a01 	vstr	s14, [r5, #4]
 800dcaa:	ed94 6a00 	vldr	s12, [r4]
 800dcae:	edd4 6a04 	vldr	s13, [r4, #16]
 800dcb2:	ed94 7a08 	vldr	s14, [r4, #32]
 800dcb6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800dcba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800dcbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dcc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dcc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcca:	d904      	bls.n	800dcd6 <m_dcm2q_eml+0x146>
 800dccc:	eef4 7a67 	vcmp.f32	s15, s15
 800dcd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcd4:	d046      	beq.n	800dd64 <m_dcm2q_eml+0x1d4>
 800dcd6:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 800dd88 <m_dcm2q_eml+0x1f8>
 800dcda:	f00b fa39 	bl	8019150 <sqrt>
 800dcde:	ec51 0b10 	vmov	r0, r1, d0
 800dce2:	f7f2 ff85 	bl	8000bf0 <__aeabi_d2f>
 800dce6:	ee07 0a90 	vmov	s15, r0
 800dcea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800dcee:	ee27 7a87 	vmul.f32	s14, s15, s14
 800dcf2:	ee07 7a90 	vmov	s15, r7
 800dcf6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800dcfa:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800dcfe:	ee27 7a26 	vmul.f32	s14, s14, s13
 800dd02:	ed85 7a02 	vstr	s14, [r5, #8]
 800dd06:	edd4 7a00 	vldr	s15, [r4]
 800dd0a:	edd4 6a04 	vldr	s13, [r4, #16]
 800dd0e:	ed94 7a08 	vldr	s14, [r4, #32]
 800dd12:	ee77 7a86 	vadd.f32	s15, s15, s12
 800dd16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dd1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dd22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd26:	d904      	bls.n	800dd32 <m_dcm2q_eml+0x1a2>
 800dd28:	eef4 7a67 	vcmp.f32	s15, s15
 800dd2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd30:	d011      	beq.n	800dd56 <m_dcm2q_eml+0x1c6>
 800dd32:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800dd88 <m_dcm2q_eml+0x1f8>
 800dd36:	f00b fa0b 	bl	8019150 <sqrt>
 800dd3a:	ec51 0b10 	vmov	r0, r1, d0
 800dd3e:	f7f2 ff57 	bl	8000bf0 <__aeabi_d2f>
 800dd42:	ee07 0a10 	vmov	s14, r0
 800dd46:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800dd4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd4e:	edc5 7a03 	vstr	s15, [r5, #12]
 800dd52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd56:	ee17 0a90 	vmov	r0, s15
 800dd5a:	f7f2 fbfd 	bl	8000558 <__aeabi_f2d>
 800dd5e:	ec41 0b10 	vmov	d0, r0, r1
 800dd62:	e7e8      	b.n	800dd36 <m_dcm2q_eml+0x1a6>
 800dd64:	ee17 0a90 	vmov	r0, s15
 800dd68:	f7f2 fbf6 	bl	8000558 <__aeabi_f2d>
 800dd6c:	ec41 0b10 	vmov	d0, r0, r1
 800dd70:	e7b3      	b.n	800dcda <m_dcm2q_eml+0x14a>
 800dd72:	ee17 0a90 	vmov	r0, s15
 800dd76:	f7f2 fbef 	bl	8000558 <__aeabi_f2d>
 800dd7a:	ec41 0b10 	vmov	d0, r0, r1
 800dd7e:	e77e      	b.n	800dc7e <m_dcm2q_eml+0xee>
 800dd80:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800dd88 <m_dcm2q_eml+0x1f8>
 800dd84:	e722      	b.n	800dbcc <m_dcm2q_eml+0x3c>
 800dd86:	bf00      	nop
	...

0800dd90 <SpacePointGyroProp>:
 800dd90:	b570      	push	{r4, r5, r6, lr}
 800dd92:	edd2 5a00 	vldr	s11, [r2]
 800dd96:	ed92 7a01 	vldr	s14, [r2, #4]
 800dd9a:	eddf 6a53 	vldr	s13, [pc, #332]	; 800dee8 <SpacePointGyroProp+0x158>
 800dd9e:	edd1 7a02 	vldr	s15, [r1, #8]
 800dda2:	ed9f 6a52 	vldr	s12, [pc, #328]	; 800deec <SpacePointGyroProp+0x15c>
 800dda6:	ed2d 8b04 	vpush	{d8-d9}
 800ddaa:	ed91 9a00 	vldr	s18, [r1]
 800ddae:	edd1 8a01 	vldr	s17, [r1, #4]
 800ddb2:	ed92 8a02 	vldr	s16, [r2, #8]
 800ddb6:	9d08      	ldr	r5, [sp, #32]
 800ddb8:	ee39 9a65 	vsub.f32	s18, s18, s11
 800ddbc:	ee78 8ac7 	vsub.f32	s17, s17, s14
 800ddc0:	ee29 9a00 	vmul.f32	s18, s18, s0
 800ddc4:	ee37 8ac8 	vsub.f32	s16, s15, s16
 800ddc8:	ee29 9a26 	vmul.f32	s18, s18, s13
 800ddcc:	ee68 8a80 	vmul.f32	s17, s17, s0
 800ddd0:	ee29 7a09 	vmul.f32	s14, s18, s18
 800ddd4:	ee68 8aa6 	vmul.f32	s17, s17, s13
 800ddd8:	ee28 8a00 	vmul.f32	s16, s16, s0
 800dddc:	ee68 7aa8 	vmul.f32	s15, s17, s17
 800dde0:	ee28 8a26 	vmul.f32	s16, s16, s13
 800dde4:	ee37 7a06 	vadd.f32	s14, s14, s12
 800dde8:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 800ddec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ddf0:	ee68 7a08 	vmul.f32	s15, s16, s16
 800ddf4:	4606      	mov	r6, r0
 800ddf6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ddfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ddfe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800de02:	461c      	mov	r4, r3
 800de04:	ee77 7a67 	vsub.f32	s15, s14, s15
 800de08:	eef4 7ac6 	vcmpe.f32	s15, s12
 800de0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de10:	dd62      	ble.n	800ded8 <SpacePointGyroProp+0x148>
 800de12:	ee17 0a90 	vmov	r0, s15
 800de16:	f7f2 fb9f 	bl	8000558 <__aeabi_f2d>
 800de1a:	ec41 0b10 	vmov	d0, r0, r1
 800de1e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800de22:	ee29 9a27 	vmul.f32	s18, s18, s15
 800de26:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800de2a:	ee28 8a27 	vmul.f32	s16, s16, s15
 800de2e:	ed85 9a00 	vstr	s18, [r5]
 800de32:	edc5 8a01 	vstr	s17, [r5, #4]
 800de36:	ed85 8a02 	vstr	s16, [r5, #8]
 800de3a:	f00b f989 	bl	8019150 <sqrt>
 800de3e:	ec51 0b10 	vmov	r0, r1, d0
 800de42:	f7f2 fed5 	bl	8000bf0 <__aeabi_d2f>
 800de46:	4622      	mov	r2, r4
 800de48:	4631      	mov	r1, r6
 800de4a:	60e8      	str	r0, [r5, #12]
 800de4c:	4628      	mov	r0, r5
 800de4e:	f7ff fdcf 	bl	800d9f0 <m_qmult_eml>
 800de52:	edd4 6a00 	vldr	s13, [r4]
 800de56:	eddf 5a25 	vldr	s11, [pc, #148]	; 800deec <SpacePointGyroProp+0x15c>
 800de5a:	ed94 7a01 	vldr	s14, [r4, #4]
 800de5e:	edd4 7a02 	vldr	s15, [r4, #8]
 800de62:	ed94 6a03 	vldr	s12, [r4, #12]
 800de66:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800de6a:	ee27 7a07 	vmul.f32	s14, s14, s14
 800de6e:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800de72:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800de76:	ee37 7a26 	vadd.f32	s14, s14, s13
 800de7a:	ee26 6a06 	vmul.f32	s12, s12, s12
 800de7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800de82:	ee76 7a27 	vadd.f32	s15, s12, s15
 800de86:	ee17 0a90 	vmov	r0, s15
 800de8a:	f7f2 fb65 	bl	8000558 <__aeabi_f2d>
 800de8e:	ec41 0b10 	vmov	d0, r0, r1
 800de92:	f00b f95d 	bl	8019150 <sqrt>
 800de96:	ec51 0b10 	vmov	r0, r1, d0
 800de9a:	f7f2 fea9 	bl	8000bf0 <__aeabi_d2f>
 800de9e:	ed94 6a00 	vldr	s12, [r4]
 800dea2:	edd4 6a01 	vldr	s13, [r4, #4]
 800dea6:	ed94 7a02 	vldr	s14, [r4, #8]
 800deaa:	ed94 5a03 	vldr	s10, [r4, #12]
 800deae:	ee07 0a90 	vmov	s15, r0
 800deb2:	eec6 5a27 	vdiv.f32	s11, s12, s15
 800deb6:	ecbd 8b04 	vpop	{d8-d9}
 800deba:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800debe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800dec2:	ee85 7a27 	vdiv.f32	s14, s10, s15
 800dec6:	edc4 5a00 	vstr	s11, [r4]
 800deca:	ed84 6a01 	vstr	s12, [r4, #4]
 800dece:	edc4 6a02 	vstr	s13, [r4, #8]
 800ded2:	ed84 7a03 	vstr	s14, [r4, #12]
 800ded6:	bd70      	pop	{r4, r5, r6, pc}
 800ded8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800dee0 <SpacePointGyroProp+0x150>
 800dedc:	e79f      	b.n	800de1e <SpacePointGyroProp+0x8e>
 800dede:	bf00      	nop
	...
 800dee8:	3c8efa35 	.word	0x3c8efa35
 800deec:	00000000 	.word	0x00000000

0800def0 <m_b_interp1q_constrain>:
 800def0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800def2:	ed2d 8b04 	vpush	{d8-d9}
 800def6:	edd0 8a00 	vldr	s17, [r0]
 800defa:	eef4 8ac0 	vcmpe.f32	s17, s0
 800defe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df02:	db04      	blt.n	800df0e <m_b_interp1q_constrain+0x1e>
 800df04:	ed91 0a00 	vldr	s0, [r1]
 800df08:	ecbd 8b04 	vpop	{d8-d9}
 800df0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df0e:	ed90 9a09 	vldr	s18, [r0, #36]	; 0x24
 800df12:	eeb4 0ac9 	vcmpe.f32	s0, s18
 800df16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df1a:	da58      	bge.n	800dfce <m_b_interp1q_constrain+0xde>
 800df1c:	4b32      	ldr	r3, [pc, #200]	; (800dfe8 <m_b_interp1q_constrain+0xf8>)
 800df1e:	460e      	mov	r6, r1
 800df20:	4605      	mov	r5, r0
 800df22:	e9d3 0100 	ldrd	r0, r1, [r3]
 800df26:	eeb0 8a40 	vmov.f32	s16, s0
 800df2a:	f7f2 fe61 	bl	8000bf0 <__aeabi_d2f>
 800df2e:	eef4 8ac8 	vcmpe.f32	s17, s16
 800df32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df36:	ee00 0a10 	vmov	s0, r0
 800df3a:	d8e5      	bhi.n	800df08 <m_b_interp1q_constrain+0x18>
 800df3c:	eeb4 8ac9 	vcmpe.f32	s16, s18
 800df40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df44:	d8e0      	bhi.n	800df08 <m_b_interp1q_constrain+0x18>
 800df46:	210a      	movs	r1, #10
 800df48:	2702      	movs	r7, #2
 800df4a:	2001      	movs	r0, #1
 800df4c:	f06f 4e40 	mvn.w	lr, #3221225472	; 0xc0000000
 800df50:	1844      	adds	r4, r0, r1
 800df52:	0864      	lsrs	r4, r4, #1
 800df54:	eb04 020e 	add.w	r2, r4, lr
 800df58:	0092      	lsls	r2, r2, #2
 800df5a:	18ab      	adds	r3, r5, r2
 800df5c:	edd3 7a00 	vldr	s15, [r3]
 800df60:	eef4 7ac8 	vcmpe.f32	s15, s16
 800df64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df68:	d808      	bhi.n	800df7c <m_b_interp1q_constrain+0x8c>
 800df6a:	e03b      	b.n	800dfe4 <m_b_interp1q_constrain+0xf4>
 800df6c:	edd1 7a00 	vldr	s15, [r1]
 800df70:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800df74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df78:	da2e      	bge.n	800dfd8 <m_b_interp1q_constrain+0xe8>
 800df7a:	461c      	mov	r4, r3
 800df7c:	1823      	adds	r3, r4, r0
 800df7e:	085b      	lsrs	r3, r3, #1
 800df80:	eb03 020e 	add.w	r2, r3, lr
 800df84:	0092      	lsls	r2, r2, #2
 800df86:	42bc      	cmp	r4, r7
 800df88:	eb05 0102 	add.w	r1, r5, r2
 800df8c:	d8ee      	bhi.n	800df6c <m_b_interp1q_constrain+0x7c>
 800df8e:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800df92:	3a01      	subs	r2, #1
 800df94:	0092      	lsls	r2, r2, #2
 800df96:	18ab      	adds	r3, r5, r2
 800df98:	edd3 7a00 	vldr	s15, [r3]
 800df9c:	0080      	lsls	r0, r0, #2
 800df9e:	4405      	add	r5, r0
 800dfa0:	ed95 7a00 	vldr	s14, [r5]
 800dfa4:	ee38 8a67 	vsub.f32	s16, s16, s15
 800dfa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dfac:	4430      	add	r0, r6
 800dfae:	ee88 0a27 	vdiv.f32	s0, s16, s15
 800dfb2:	4432      	add	r2, r6
 800dfb4:	ecbd 8b04 	vpop	{d8-d9}
 800dfb8:	ed92 7a00 	vldr	s14, [r2]
 800dfbc:	edd0 7a00 	vldr	s15, [r0]
 800dfc0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dfc4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800dfc8:	ee30 0a07 	vadd.f32	s0, s0, s14
 800dfcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfce:	ecbd 8b04 	vpop	{d8-d9}
 800dfd2:	ed91 0a09 	vldr	s0, [r1, #36]	; 0x24
 800dfd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfd8:	4621      	mov	r1, r4
 800dfda:	1c5f      	adds	r7, r3, #1
 800dfdc:	428f      	cmp	r7, r1
 800dfde:	4618      	mov	r0, r3
 800dfe0:	d3b6      	bcc.n	800df50 <m_b_interp1q_constrain+0x60>
 800dfe2:	e7db      	b.n	800df9c <m_b_interp1q_constrain+0xac>
 800dfe4:	4623      	mov	r3, r4
 800dfe6:	e7f8      	b.n	800dfda <m_b_interp1q_constrain+0xea>
 800dfe8:	20001698 	.word	0x20001698

0800dfec <m_interp1q_constrain>:
 800dfec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfee:	ed2d 8b04 	vpush	{d8-d9}
 800dff2:	edd0 8a00 	vldr	s17, [r0]
 800dff6:	eef4 8ac0 	vcmpe.f32	s17, s0
 800dffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dffe:	db04      	blt.n	800e00a <m_interp1q_constrain+0x1e>
 800e000:	ed91 0a00 	vldr	s0, [r1]
 800e004:	ecbd 8b04 	vpop	{d8-d9}
 800e008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e00a:	ed90 9a0c 	vldr	s18, [r0, #48]	; 0x30
 800e00e:	eeb4 0ac9 	vcmpe.f32	s0, s18
 800e012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e016:	da58      	bge.n	800e0ca <m_interp1q_constrain+0xde>
 800e018:	4b32      	ldr	r3, [pc, #200]	; (800e0e4 <m_interp1q_constrain+0xf8>)
 800e01a:	460e      	mov	r6, r1
 800e01c:	4605      	mov	r5, r0
 800e01e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e022:	eeb0 8a40 	vmov.f32	s16, s0
 800e026:	f7f2 fde3 	bl	8000bf0 <__aeabi_d2f>
 800e02a:	eef4 8ac8 	vcmpe.f32	s17, s16
 800e02e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e032:	ee00 0a10 	vmov	s0, r0
 800e036:	d8e5      	bhi.n	800e004 <m_interp1q_constrain+0x18>
 800e038:	eeb4 8ac9 	vcmpe.f32	s16, s18
 800e03c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e040:	d8e0      	bhi.n	800e004 <m_interp1q_constrain+0x18>
 800e042:	210d      	movs	r1, #13
 800e044:	2702      	movs	r7, #2
 800e046:	2001      	movs	r0, #1
 800e048:	f06f 4e40 	mvn.w	lr, #3221225472	; 0xc0000000
 800e04c:	1844      	adds	r4, r0, r1
 800e04e:	0864      	lsrs	r4, r4, #1
 800e050:	eb04 020e 	add.w	r2, r4, lr
 800e054:	0092      	lsls	r2, r2, #2
 800e056:	18ab      	adds	r3, r5, r2
 800e058:	edd3 7a00 	vldr	s15, [r3]
 800e05c:	eef4 7ac8 	vcmpe.f32	s15, s16
 800e060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e064:	d808      	bhi.n	800e078 <m_interp1q_constrain+0x8c>
 800e066:	e03b      	b.n	800e0e0 <m_interp1q_constrain+0xf4>
 800e068:	edd1 7a00 	vldr	s15, [r1]
 800e06c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800e070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e074:	da2e      	bge.n	800e0d4 <m_interp1q_constrain+0xe8>
 800e076:	461c      	mov	r4, r3
 800e078:	1823      	adds	r3, r4, r0
 800e07a:	085b      	lsrs	r3, r3, #1
 800e07c:	eb03 020e 	add.w	r2, r3, lr
 800e080:	0092      	lsls	r2, r2, #2
 800e082:	42bc      	cmp	r4, r7
 800e084:	eb05 0102 	add.w	r1, r5, r2
 800e088:	d8ee      	bhi.n	800e068 <m_interp1q_constrain+0x7c>
 800e08a:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800e08e:	3a01      	subs	r2, #1
 800e090:	0092      	lsls	r2, r2, #2
 800e092:	18ab      	adds	r3, r5, r2
 800e094:	edd3 7a00 	vldr	s15, [r3]
 800e098:	0080      	lsls	r0, r0, #2
 800e09a:	4405      	add	r5, r0
 800e09c:	ed95 7a00 	vldr	s14, [r5]
 800e0a0:	ee38 8a67 	vsub.f32	s16, s16, s15
 800e0a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e0a8:	4430      	add	r0, r6
 800e0aa:	ee88 0a27 	vdiv.f32	s0, s16, s15
 800e0ae:	4432      	add	r2, r6
 800e0b0:	ecbd 8b04 	vpop	{d8-d9}
 800e0b4:	ed92 7a00 	vldr	s14, [r2]
 800e0b8:	edd0 7a00 	vldr	s15, [r0]
 800e0bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e0c0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e0c4:	ee30 0a07 	vadd.f32	s0, s0, s14
 800e0c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0ca:	ecbd 8b04 	vpop	{d8-d9}
 800e0ce:	ed91 0a0c 	vldr	s0, [r1, #48]	; 0x30
 800e0d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0d4:	4621      	mov	r1, r4
 800e0d6:	1c5f      	adds	r7, r3, #1
 800e0d8:	428f      	cmp	r7, r1
 800e0da:	4618      	mov	r0, r3
 800e0dc:	d3b6      	bcc.n	800e04c <m_interp1q_constrain+0x60>
 800e0de:	e7db      	b.n	800e098 <m_interp1q_constrain+0xac>
 800e0e0:	4623      	mov	r3, r4
 800e0e2:	e7f8      	b.n	800e0d6 <m_interp1q_constrain+0xea>
 800e0e4:	20001698 	.word	0x20001698

0800e0e8 <rt_InitInfAndNaN.isra.3>:
 800e0e8:	4b06      	ldr	r3, [pc, #24]	; (800e104 <rt_InitInfAndNaN.isra.3+0x1c>)
 800e0ea:	4907      	ldr	r1, [pc, #28]	; (800e108 <rt_InitInfAndNaN.isra.3+0x20>)
 800e0ec:	4a07      	ldr	r2, [pc, #28]	; (800e10c <rt_InitInfAndNaN.isra.3+0x24>)
 800e0ee:	b410      	push	{r4}
 800e0f0:	2000      	movs	r0, #0
 800e0f2:	f04f 44ff 	mov.w	r4, #2139095040	; 0x7f800000
 800e0f6:	609c      	str	r4, [r3, #8]
 800e0f8:	e9c3 0100 	strd	r0, r1, [r3]
 800e0fc:	60da      	str	r2, [r3, #12]
 800e0fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e102:	4770      	bx	lr
 800e104:	20001698 	.word	0x20001698
 800e108:	fff80000 	.word	0xfff80000
 800e10c:	ff800000 	.word	0xff800000

0800e110 <m_rt_atan2f_snf>:
 800e110:	b500      	push	{lr}
 800e112:	eeb4 0a40 	vcmp.f32	s0, s0
 800e116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e11a:	b085      	sub	sp, #20
 800e11c:	4b42      	ldr	r3, [pc, #264]	; (800e228 <m_rt_atan2f_snf+0x118>)
 800e11e:	d008      	beq.n	800e132 <m_rt_atan2f_snf+0x22>
 800e120:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e124:	f7f2 fd64 	bl	8000bf0 <__aeabi_d2f>
 800e128:	ee00 0a10 	vmov	s0, r0
 800e12c:	b005      	add	sp, #20
 800e12e:	f85d fb04 	ldr.w	pc, [sp], #4
 800e132:	eef4 0a60 	vcmp.f32	s1, s1
 800e136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e13a:	d1f1      	bne.n	800e120 <m_rt_atan2f_snf+0x10>
 800e13c:	edd3 7a02 	vldr	s15, [r3, #8]
 800e140:	eeb4 0a67 	vcmp.f32	s0, s15
 800e144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e148:	d015      	beq.n	800e176 <m_rt_atan2f_snf+0x66>
 800e14a:	ed93 7a03 	vldr	s14, [r3, #12]
 800e14e:	eeb4 0a47 	vcmp.f32	s0, s14
 800e152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e156:	d00e      	beq.n	800e176 <m_rt_atan2f_snf+0x66>
 800e158:	eef5 0a40 	vcmp.f32	s1, #0.0
 800e15c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e160:	d131      	bne.n	800e1c6 <m_rt_atan2f_snf+0xb6>
 800e162:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e16a:	dd47      	ble.n	800e1fc <m_rt_atan2f_snf+0xec>
 800e16c:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 800e22c <m_rt_atan2f_snf+0x11c>
 800e170:	b005      	add	sp, #20
 800e172:	f85d fb04 	ldr.w	pc, [sp], #4
 800e176:	eef4 0a67 	vcmp.f32	s1, s15
 800e17a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e17e:	d11a      	bne.n	800e1b6 <m_rt_atan2f_snf+0xa6>
 800e180:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e188:	dd3c      	ble.n	800e204 <m_rt_atan2f_snf+0xf4>
 800e18a:	ed9f 7b23 	vldr	d7, [pc, #140]	; 800e218 <m_rt_atan2f_snf+0x108>
 800e18e:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 800e192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e196:	dd38      	ble.n	800e20a <m_rt_atan2f_snf+0xfa>
 800e198:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800e218 <m_rt_atan2f_snf+0x108>
 800e19c:	eeb0 0a47 	vmov.f32	s0, s14
 800e1a0:	eef0 0a67 	vmov.f32	s1, s15
 800e1a4:	f00a ffd2 	bl	801914c <atan2>
 800e1a8:	ec51 0b10 	vmov	r0, r1, d0
 800e1ac:	f7f2 fd20 	bl	8000bf0 <__aeabi_d2f>
 800e1b0:	ee00 0a10 	vmov	s0, r0
 800e1b4:	e7ba      	b.n	800e12c <m_rt_atan2f_snf+0x1c>
 800e1b6:	edd3 7a03 	vldr	s15, [r3, #12]
 800e1ba:	eef4 0a67 	vcmp.f32	s1, s15
 800e1be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1c2:	d0dd      	beq.n	800e180 <m_rt_atan2f_snf+0x70>
 800e1c4:	e7c8      	b.n	800e158 <m_rt_atan2f_snf+0x48>
 800e1c6:	ee10 0a90 	vmov	r0, s1
 800e1ca:	ed8d 0a03 	vstr	s0, [sp, #12]
 800e1ce:	f7f2 f9c3 	bl	8000558 <__aeabi_f2d>
 800e1d2:	ed9d 0a03 	vldr	s0, [sp, #12]
 800e1d6:	e9cd 0100 	strd	r0, r1, [sp]
 800e1da:	ee10 0a10 	vmov	r0, s0
 800e1de:	f7f2 f9bb 	bl	8000558 <__aeabi_f2d>
 800e1e2:	ed9d 1b00 	vldr	d1, [sp]
 800e1e6:	ec41 0b10 	vmov	d0, r0, r1
 800e1ea:	f00a ffaf 	bl	801914c <atan2>
 800e1ee:	ec51 0b10 	vmov	r0, r1, d0
 800e1f2:	f7f2 fcfd 	bl	8000bf0 <__aeabi_d2f>
 800e1f6:	ee00 0a10 	vmov	s0, r0
 800e1fa:	e797      	b.n	800e12c <m_rt_atan2f_snf+0x1c>
 800e1fc:	d408      	bmi.n	800e210 <m_rt_atan2f_snf+0x100>
 800e1fe:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800e230 <m_rt_atan2f_snf+0x120>
 800e202:	e793      	b.n	800e12c <m_rt_atan2f_snf+0x1c>
 800e204:	ed9f 7b06 	vldr	d7, [pc, #24]	; 800e220 <m_rt_atan2f_snf+0x110>
 800e208:	e7c1      	b.n	800e18e <m_rt_atan2f_snf+0x7e>
 800e20a:	ed9f 1b05 	vldr	d1, [pc, #20]	; 800e220 <m_rt_atan2f_snf+0x110>
 800e20e:	e7c5      	b.n	800e19c <m_rt_atan2f_snf+0x8c>
 800e210:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800e234 <m_rt_atan2f_snf+0x124>
 800e214:	e78a      	b.n	800e12c <m_rt_atan2f_snf+0x1c>
 800e216:	bf00      	nop
 800e218:	00000000 	.word	0x00000000
 800e21c:	3ff00000 	.word	0x3ff00000
 800e220:	00000000 	.word	0x00000000
 800e224:	bff00000 	.word	0xbff00000
 800e228:	20001698 	.word	0x20001698
 800e22c:	3fc90fdb 	.word	0x3fc90fdb
 800e230:	00000000 	.word	0x00000000
 800e234:	bfc90fdb 	.word	0xbfc90fdb

0800e238 <output_update>:
 800e238:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e23c:	ed2d 8b06 	vpush	{d8-d10}
 800e240:	edd0 6a00 	vldr	s13, [r0]
 800e244:	ed90 7a01 	vldr	s14, [r0, #4]
 800e248:	edd0 7a02 	vldr	s15, [r0, #8]
 800e24c:	b08d      	sub	sp, #52	; 0x34
 800e24e:	eef1 6a66 	vneg.f32	s13, s13
 800e252:	f89d 706c 	ldrb.w	r7, [sp, #108]	; 0x6c
 800e256:	edc0 6a00 	vstr	s13, [r0]
 800e25a:	eeb1 7a47 	vneg.f32	s14, s14
 800e25e:	eef1 7a67 	vneg.f32	s15, s15
 800e262:	4689      	mov	r9, r1
 800e264:	ed80 7a01 	vstr	s14, [r0, #4]
 800e268:	edc0 7a02 	vstr	s15, [r0, #8]
 800e26c:	a903      	add	r1, sp, #12
 800e26e:	4604      	mov	r4, r0
 800e270:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800e274:	4615      	mov	r5, r2
 800e276:	461e      	mov	r6, r3
 800e278:	f7ff fc22 	bl	800dac0 <m_q2dcm_eml>
 800e27c:	2f00      	cmp	r7, #0
 800e27e:	d17e      	bne.n	800e37e <output_update+0x146>
 800e280:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e282:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e284:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e286:	6072      	str	r2, [r6, #4]
 800e288:	60b3      	str	r3, [r6, #8]
 800e28a:	6031      	str	r1, [r6, #0]
 800e28c:	ed94 7a01 	vldr	s14, [r4, #4]
 800e290:	ed94 0a00 	vldr	s0, [r4]
 800e294:	edd4 0a02 	vldr	s1, [r4, #8]
 800e298:	edd4 7a03 	vldr	s15, [r4, #12]
 800e29c:	ee20 8a00 	vmul.f32	s16, s0, s0
 800e2a0:	ee67 9a07 	vmul.f32	s19, s14, s14
 800e2a4:	ee60 6aa7 	vmul.f32	s13, s1, s15
 800e2a8:	ee20 0a07 	vmul.f32	s0, s0, s14
 800e2ac:	ee20 9aa0 	vmul.f32	s18, s1, s1
 800e2b0:	ee38 7a69 	vsub.f32	s14, s16, s19
 800e2b4:	ee67 8aa7 	vmul.f32	s17, s15, s15
 800e2b8:	ee30 0a26 	vadd.f32	s0, s0, s13
 800e2bc:	ee77 0a49 	vsub.f32	s1, s14, s18
 800e2c0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e2c4:	ee70 0aa8 	vadd.f32	s1, s1, s17
 800e2c8:	f7ff ff22 	bl	800e110 <m_rt_atan2f_snf>
 800e2cc:	ed85 0a00 	vstr	s0, [r5]
 800e2d0:	ed94 6a02 	vldr	s12, [r4, #8]
 800e2d4:	edd4 6a03 	vldr	s13, [r4, #12]
 800e2d8:	edd4 7a00 	vldr	s15, [r4]
 800e2dc:	ed94 7a01 	vldr	s14, [r4, #4]
 800e2e0:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e2e4:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e2e8:	eef8 6a00 	vmov.f32	s13, #128	; 0xc0000000 -2.0
 800e2ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e2f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e2f4:	ee17 0a90 	vmov	r0, s15
 800e2f8:	f7f2 f92e 	bl	8000558 <__aeabi_f2d>
 800e2fc:	ec41 0b10 	vmov	d0, r0, r1
 800e300:	f00a fecc 	bl	801909c <asin>
 800e304:	ec51 0b10 	vmov	r0, r1, d0
 800e308:	f7f2 fc72 	bl	8000bf0 <__aeabi_d2f>
 800e30c:	6068      	str	r0, [r5, #4]
 800e30e:	ed94 0a01 	vldr	s0, [r4, #4]
 800e312:	edd4 6a02 	vldr	s13, [r4, #8]
 800e316:	edd4 7a00 	vldr	s15, [r4]
 800e31a:	ed94 7a03 	vldr	s14, [r4, #12]
 800e31e:	eef1 0a48 	vneg.f32	s1, s16
 800e322:	ee20 0a26 	vmul.f32	s0, s0, s13
 800e326:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e32a:	ee70 0ae9 	vsub.f32	s1, s1, s19
 800e32e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e332:	ee70 0a89 	vadd.f32	s1, s1, s18
 800e336:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e33a:	ee70 0aa8 	vadd.f32	s1, s1, s17
 800e33e:	f7ff fee7 	bl	800e110 <m_rt_atan2f_snf>
 800e342:	ed95 6a00 	vldr	s12, [r5]
 800e346:	ed85 0a02 	vstr	s0, [r5, #8]
 800e34a:	eddf 6a7b 	vldr	s13, [pc, #492]	; 800e538 <output_update+0x300>
 800e34e:	ed95 7a01 	vldr	s14, [r5, #4]
 800e352:	edd5 7a02 	vldr	s15, [r5, #8]
 800e356:	ee26 6a26 	vmul.f32	s12, s12, s13
 800e35a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e35e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e362:	ed85 6a00 	vstr	s12, [r5]
 800e366:	ed85 7a01 	vstr	s14, [r5, #4]
 800e36a:	edc5 7a02 	vstr	s15, [r5, #8]
 800e36e:	b387      	cbz	r7, 800e3d2 <output_update+0x19a>
 800e370:	2f01      	cmp	r7, #1
 800e372:	d009      	beq.n	800e388 <output_update+0x150>
 800e374:	b00d      	add	sp, #52	; 0x34
 800e376:	ecbd 8b06 	vpop	{d8-d10}
 800e37a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e37e:	2f01      	cmp	r7, #1
 800e380:	d04a      	beq.n	800e418 <output_update+0x1e0>
 800e382:	ed95 6a00 	vldr	s12, [r5]
 800e386:	e7e0      	b.n	800e34a <output_update+0x112>
 800e388:	ed96 7a00 	vldr	s14, [r6]
 800e38c:	edd9 7a01 	vldr	s15, [r9, #4]
 800e390:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e394:	eef1 7a67 	vneg.f32	s15, s15
 800e398:	edc8 7a00 	vstr	s15, [r8]
 800e39c:	ed96 7a01 	vldr	s14, [r6, #4]
 800e3a0:	edd9 7a00 	vldr	s15, [r9]
 800e3a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e3a8:	eef1 7a67 	vneg.f32	s15, s15
 800e3ac:	edc8 7a01 	vstr	s15, [r8, #4]
 800e3b0:	edd9 7a02 	vldr	s15, [r9, #8]
 800e3b4:	ed96 7a02 	vldr	s14, [r6, #8]
 800e3b8:	eef1 7a67 	vneg.f32	s15, s15
 800e3bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e3c0:	eef1 7a67 	vneg.f32	s15, s15
 800e3c4:	edc8 7a02 	vstr	s15, [r8, #8]
 800e3c8:	b00d      	add	sp, #52	; 0x34
 800e3ca:	ecbd 8b06 	vpop	{d8-d10}
 800e3ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e3d2:	ed96 7a00 	vldr	s14, [r6]
 800e3d6:	edd9 7a00 	vldr	s15, [r9]
 800e3da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e3de:	eef1 7a67 	vneg.f32	s15, s15
 800e3e2:	edc8 7a00 	vstr	s15, [r8]
 800e3e6:	ed96 7a01 	vldr	s14, [r6, #4]
 800e3ea:	edd9 7a01 	vldr	s15, [r9, #4]
 800e3ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e3f2:	eef1 7a67 	vneg.f32	s15, s15
 800e3f6:	edc8 7a01 	vstr	s15, [r8, #4]
 800e3fa:	edd9 7a02 	vldr	s15, [r9, #8]
 800e3fe:	ed96 7a02 	vldr	s14, [r6, #8]
 800e402:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e406:	eef1 7a67 	vneg.f32	s15, s15
 800e40a:	edc8 7a02 	vstr	s15, [r8, #8]
 800e40e:	b00d      	add	sp, #52	; 0x34
 800e410:	ecbd 8b06 	vpop	{d8-d10}
 800e414:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e418:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 800e41c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e41e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e420:	6032      	str	r2, [r6, #0]
 800e422:	eef1 7a67 	vneg.f32	s15, s15
 800e426:	6073      	str	r3, [r6, #4]
 800e428:	edc6 7a02 	vstr	s15, [r6, #8]
 800e42c:	edd4 8a02 	vldr	s17, [r4, #8]
 800e430:	ed94 8a00 	vldr	s16, [r4]
 800e434:	ed94 9a01 	vldr	s18, [r4, #4]
 800e438:	edd4 aa03 	vldr	s21, [r4, #12]
 800e43c:	ee68 7aa8 	vmul.f32	s15, s17, s17
 800e440:	ee68 9a08 	vmul.f32	s19, s16, s16
 800e444:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e448:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
 800e44c:	ee79 9aa9 	vadd.f32	s19, s19, s19
 800e450:	ee7a 7a67 	vsub.f32	s15, s20, s15
 800e454:	eef1 8a68 	vneg.f32	s17, s17
 800e458:	ee77 7ae9 	vsub.f32	s15, s15, s19
 800e45c:	ee17 0a90 	vmov	r0, s15
 800e460:	f7f2 f87a 	bl	8000558 <__aeabi_f2d>
 800e464:	ee28 7a09 	vmul.f32	s14, s16, s18
 800e468:	ee68 7aaa 	vmul.f32	s15, s17, s21
 800e46c:	e9cd 0100 	strd	r0, r1, [sp]
 800e470:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e474:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e478:	ee17 0a90 	vmov	r0, s15
 800e47c:	f7f2 f86c 	bl	8000558 <__aeabi_f2d>
 800e480:	ed9d 1b00 	vldr	d1, [sp]
 800e484:	ec41 0b10 	vmov	d0, r0, r1
 800e488:	f00a fe60 	bl	801914c <atan2>
 800e48c:	ec51 0b10 	vmov	r0, r1, d0
 800e490:	f7f2 fbae 	bl	8000bf0 <__aeabi_d2f>
 800e494:	ee69 7a09 	vmul.f32	s15, s18, s18
 800e498:	ee7a 9a69 	vsub.f32	s19, s20, s19
 800e49c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e4a0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800e4a4:	ee79 7ae7 	vsub.f32	s15, s19, s15
 800e4a8:	6028      	str	r0, [r5, #0]
 800e4aa:	ee17 0a90 	vmov	r0, s15
 800e4ae:	f7f2 f853 	bl	8000558 <__aeabi_f2d>
 800e4b2:	ee29 7a2a 	vmul.f32	s14, s18, s21
 800e4b6:	ee68 7a28 	vmul.f32	s15, s16, s17
 800e4ba:	e9cd 0100 	strd	r0, r1, [sp]
 800e4be:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e4c2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e4c6:	ee17 0a90 	vmov	r0, s15
 800e4ca:	f7f2 f845 	bl	8000558 <__aeabi_f2d>
 800e4ce:	ed9d 1b00 	vldr	d1, [sp]
 800e4d2:	ec41 0b10 	vmov	d0, r0, r1
 800e4d6:	f00a fe39 	bl	801914c <atan2>
 800e4da:	ee68 8a89 	vmul.f32	s17, s17, s18
 800e4de:	ee28 8a2a 	vmul.f32	s16, s16, s21
 800e4e2:	ec51 0b10 	vmov	r0, r1, d0
 800e4e6:	f7f2 fb83 	bl	8000bf0 <__aeabi_d2f>
 800e4ea:	ee38 8a68 	vsub.f32	s16, s16, s17
 800e4ee:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800e4f2:	ee78 7a08 	vadd.f32	s15, s16, s16
 800e4f6:	6068      	str	r0, [r5, #4]
 800e4f8:	ee17 0a90 	vmov	r0, s15
 800e4fc:	f7f2 f82c 	bl	8000558 <__aeabi_f2d>
 800e500:	ec41 0b10 	vmov	d0, r0, r1
 800e504:	f00a fdca 	bl	801909c <asin>
 800e508:	ec51 0b10 	vmov	r0, r1, d0
 800e50c:	f7f2 fb70 	bl	8000bf0 <__aeabi_d2f>
 800e510:	ed95 6a00 	vldr	s12, [r5]
 800e514:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 800e518:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800e51c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e520:	60a8      	str	r0, [r5, #8]
 800e522:	f57f af12 	bpl.w	800e34a <output_update+0x112>
 800e526:	eddf 7a05 	vldr	s15, [pc, #20]	; 800e53c <output_update+0x304>
 800e52a:	ee76 7a27 	vadd.f32	s15, s12, s15
 800e52e:	eeb0 6a67 	vmov.f32	s12, s15
 800e532:	edc5 7a00 	vstr	s15, [r5]
 800e536:	e708      	b.n	800e34a <output_update+0x112>
 800e538:	42652ee1 	.word	0x42652ee1
 800e53c:	40c90e56 	.word	0x40c90e56

0800e540 <llEvaluate.constprop.32>:
 800e540:	edd2 0a00 	vldr	s1, [r2]
 800e544:	ed90 1a00 	vldr	s2, [r0]
 800e548:	ed90 3a04 	vldr	s6, [r0, #16]
 800e54c:	edd2 3a01 	vldr	s7, [r2, #4]
 800e550:	ed90 5a08 	vldr	s10, [r0, #32]
 800e554:	edd0 1a05 	vldr	s3, [r0, #20]
 800e558:	ed92 7a02 	vldr	s14, [r2, #8]
 800e55c:	ed90 4a09 	vldr	s8, [r0, #36]	; 0x24
 800e560:	edd0 5a0d 	vldr	s11, [r0, #52]	; 0x34
 800e564:	ed90 2a0a 	vldr	s4, [r0, #40]	; 0x28
 800e568:	edd0 4a0c 	vldr	s9, [r0, #48]	; 0x30
 800e56c:	edd2 7a03 	vldr	s15, [r2, #12]
 800e570:	ed90 6a0e 	vldr	s12, [r0, #56]	; 0x38
 800e574:	edd0 2a0f 	vldr	s5, [r0, #60]	; 0x3c
 800e578:	eec0 6a81 	vdiv.f32	s13, s1, s2
 800e57c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e580:	b084      	sub	sp, #16
 800e582:	460d      	mov	r5, r1
 800e584:	f10d 0c10 	add.w	ip, sp, #16
 800e588:	4686      	mov	lr, r0
 800e58a:	f101 0710 	add.w	r7, r1, #16
 800e58e:	2603      	movs	r6, #3
 800e590:	ee26 3a83 	vmul.f32	s6, s13, s6
 800e594:	ee25 5a26 	vmul.f32	s10, s10, s13
 800e598:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800e59c:	ee37 7a45 	vsub.f32	s14, s14, s10
 800e5a0:	ee83 5aa1 	vdiv.f32	s10, s7, s3
 800e5a4:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800e5a8:	ee24 4a05 	vmul.f32	s8, s8, s10
 800e5ac:	edcd 6a00 	vstr	s13, [sp]
 800e5b0:	ee37 7a44 	vsub.f32	s14, s14, s8
 800e5b4:	ee65 6a85 	vmul.f32	s13, s11, s10
 800e5b8:	eec7 5a02 	vdiv.f32	s11, s14, s4
 800e5bc:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800e5c0:	ee26 7a25 	vmul.f32	s14, s12, s11
 800e5c4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e5c8:	ed8d 5a01 	vstr	s10, [sp, #4]
 800e5cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e5d0:	edcd 5a02 	vstr	s11, [sp, #8]
 800e5d4:	ee87 7aa2 	vdiv.f32	s14, s15, s5
 800e5d8:	ee17 3a10 	vmov	r3, s14
 800e5dc:	f845 3f0c 	str.w	r3, [r5, #12]!
 800e5e0:	ed2c 7a01 	vstmdb	ip!, {s14}
 800e5e4:	ed57 6a01 	vldr	s13, [r7, #-4]
 800e5e8:	ed9e 7a0f 	vldr	s14, [lr, #60]	; 0x3c
 800e5ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e5f0:	ed67 7a01 	vstmdb	r7!, {s15}
 800e5f4:	b1fe      	cbz	r6, 800e636 <llEvaluate.constprop.32+0xf6>
 800e5f6:	3e01      	subs	r6, #1
 800e5f8:	ed3c 7a01 	vldmdb	ip!, {s14}
 800e5fc:	1c73      	adds	r3, r6, #1
 800e5fe:	b25b      	sxtb	r3, r3
 800e600:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800e604:	ed25 7a01 	vstmdb	r5!, {s14}
 800e608:	b21a      	sxth	r2, r3
 800e60a:	eb00 1402 	add.w	r4, r0, r2, lsl #4
 800e60e:	4444      	add	r4, r8
 800e610:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800e614:	edd4 7a00 	vldr	s15, [r4]
 800e618:	edd2 6a00 	vldr	s13, [r2]
 800e61c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e620:	3301      	adds	r3, #1
 800e622:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e626:	b25b      	sxtb	r3, r3
 800e628:	2b04      	cmp	r3, #4
 800e62a:	ed85 7a00 	vstr	s14, [r5]
 800e62e:	d1eb      	bne.n	800e608 <llEvaluate.constprop.32+0xc8>
 800e630:	f1ae 0e14 	sub.w	lr, lr, #20
 800e634:	e7d6      	b.n	800e5e4 <llEvaluate.constprop.32+0xa4>
 800e636:	b004      	add	sp, #16
 800e638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e63c <getMagStats.constprop.35>:
 800e63c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e640:	2400      	movs	r4, #0
 800e642:	f8df a27c 	ldr.w	sl, [pc, #636]	; 800e8c0 <getMagStats.constprop.35+0x284>
 800e646:	ed2d 8b04 	vpush	{d8-d9}
 800e64a:	601c      	str	r4, [r3, #0]
 800e64c:	6014      	str	r4, [r2, #0]
 800e64e:	f89a e0b0 	ldrb.w	lr, [sl, #176]	; 0xb0
 800e652:	f89a 40b1 	ldrb.w	r4, [sl, #177]	; 0xb1
 800e656:	f99a 50b2 	ldrsb.w	r5, [sl, #178]	; 0xb2
 800e65a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e65e:	45a6      	cmp	lr, r4
 800e660:	b085      	sub	sp, #20
 800e662:	eef0 9a40 	vmov.f32	s19, s0
 800e666:	4681      	mov	r9, r0
 800e668:	eec7 8a80 	vdiv.f32	s17, s15, s0
 800e66c:	f000 80ef 	beq.w	800e84e <getMagStats.constprop.35+0x212>
 800e670:	1c68      	adds	r0, r5, #1
 800e672:	eba0 000e 	sub.w	r0, r0, lr
 800e676:	fb90 f5f4 	sdiv	r5, r0, r4
 800e67a:	fb04 0015 	mls	r0, r4, r5, r0
 800e67e:	b205      	sxth	r5, r0
 800e680:	2d00      	cmp	r5, #0
 800e682:	9502      	str	r5, [sp, #8]
 800e684:	f8cd e000 	str.w	lr, [sp]
 800e688:	f2c0 80eb 	blt.w	800e862 <getMagStats.constprop.35+0x226>
 800e68c:	ed9f 9a8a 	vldr	s18, [pc, #552]	; 800e8b8 <getMagStats.constprop.35+0x27c>
 800e690:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 800e694:	ee28 9a89 	vmul.f32	s18, s17, s18
 800e698:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800e69c:	f1be 0f00 	cmp.w	lr, #0
 800e6a0:	f000 80ee 	beq.w	800e880 <getMagStats.constprop.35+0x244>
 800e6a4:	2000      	movs	r0, #0
 800e6a6:	4680      	mov	r8, r0
 800e6a8:	460f      	mov	r7, r1
 800e6aa:	e001      	b.n	800e6b0 <getMagStats.constprop.35+0x74>
 800e6ac:	f89a 40b1 	ldrb.w	r4, [sl, #177]	; 0xb1
 800e6b0:	9902      	ldr	r1, [sp, #8]
 800e6b2:	f8b9 6000 	ldrh.w	r6, [r9]
 800e6b6:	f8b9 c002 	ldrh.w	ip, [r9, #2]
 800e6ba:	ed97 7a04 	vldr	s14, [r7, #16]
 800e6be:	ed97 5a00 	vldr	s10, [r7]
 800e6c2:	edd7 6a08 	vldr	s13, [r7, #32]
 800e6c6:	eb08 0501 	add.w	r5, r8, r1
 800e6ca:	fb95 f1f4 	sdiv	r1, r5, r4
 800e6ce:	fb04 5111 	mls	r1, r4, r1, r5
 800e6d2:	b2c9      	uxtb	r1, r1
 800e6d4:	3104      	adds	r1, #4
 800e6d6:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 800e6da:	f8b1 b0b2 	ldrh.w	fp, [r1, #178]	; 0xb2
 800e6de:	f8b1 50b4 	ldrh.w	r5, [r1, #180]	; 0xb4
 800e6e2:	f8b1 40b6 	ldrh.w	r4, [r1, #182]	; 0xb6
 800e6e6:	f8b9 1004 	ldrh.w	r1, [r9, #4]
 800e6ea:	ebab 0606 	sub.w	r6, fp, r6
 800e6ee:	b236      	sxth	r6, r6
 800e6f0:	ee07 6a90 	vmov	s15, r6
 800e6f4:	eba5 050c 	sub.w	r5, r5, ip
 800e6f8:	b22d      	sxth	r5, r5
 800e6fa:	1a64      	subs	r4, r4, r1
 800e6fc:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800e700:	ee07 5a90 	vmov	s15, r5
 800e704:	b224      	sxth	r4, r4
 800e706:	ee06 4a10 	vmov	s12, r4
 800e70a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e70e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800e712:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e716:	ee65 5a85 	vmul.f32	s11, s11, s10
 800e71a:	ee26 7a26 	vmul.f32	s14, s12, s13
 800e71e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e722:	eefd 6ae5 	vcvt.s32.f32	s13, s11
 800e726:	ee17 4a90 	vmov	r4, s15
 800e72a:	edcd 6a00 	vstr	s13, [sp]
 800e72e:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800e732:	f9bd 1000 	ldrsh.w	r1, [sp]
 800e736:	edcd 7a01 	vstr	s15, [sp, #4]
 800e73a:	fb14 f404 	smulbb	r4, r4, r4
 800e73e:	fb01 4401 	mla	r4, r1, r1, r4
 800e742:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 800e746:	fb01 4101 	mla	r1, r1, r1, r4
 800e74a:	ee07 1a90 	vmov	s15, r1
 800e74e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800e752:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e75a:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800e75e:	f100 8084 	bmi.w	800e86a <getMagStats.constprop.35+0x22e>
 800e762:	f108 0801 	add.w	r8, r8, #1
 800e766:	fa5f f888 	uxtb.w	r8, r8
 800e76a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800e76e:	ed92 7a00 	vldr	s14, [r2]
 800e772:	edcd 7a00 	vstr	s15, [sp]
 800e776:	f9bd 1000 	ldrsh.w	r1, [sp]
 800e77a:	ee07 1a90 	vmov	s15, r1
 800e77e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e782:	ee77 6ac9 	vsub.f32	s13, s15, s18
 800e786:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e78a:	eeb0 7ae6 	vabs.f32	s14, s13
 800e78e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800e792:	edc2 7a00 	vstr	s15, [r2]
 800e796:	ed8d 7a00 	vstr	s14, [sp]
 800e79a:	f9bd 1000 	ldrsh.w	r1, [sp]
 800e79e:	ee07 1a10 	vmov	s14, r1
 800e7a2:	fb01 f401 	mul.w	r4, r1, r1
 800e7a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e7aa:	ee07 4a90 	vmov	s15, r4
 800e7ae:	eef4 8ac7 	vcmpe.f32	s17, s14
 800e7b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e7b6:	ed93 7a00 	vldr	s14, [r3]
 800e7ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7be:	f100 0101 	add.w	r1, r0, #1
 800e7c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e7c6:	bf48      	it	mi
 800e7c8:	b2c8      	uxtbmi	r0, r1
 800e7ca:	45f0      	cmp	r8, lr
 800e7cc:	edc3 7a00 	vstr	s15, [r3]
 800e7d0:	f4ff af6c 	bcc.w	800e6ac <getMagStats.constprop.35+0x70>
 800e7d4:	f8cd e000 	str.w	lr, [sp]
 800e7d8:	ee07 ea10 	vmov	s14, lr
 800e7dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e7e0:	ee87 0a87 	vdiv.f32	s0, s15, s14
 800e7e4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e7e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7ec:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800e7f0:	d44a      	bmi.n	800e888 <getMagStats.constprop.35+0x24c>
 800e7f2:	eddf 7a32 	vldr	s15, [pc, #200]	; 800e8bc <getMagStats.constprop.35+0x280>
 800e7f6:	ee29 8a88 	vmul.f32	s16, s19, s16
 800e7fa:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800e7fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e802:	dc12      	bgt.n	800e82a <getMagStats.constprop.35+0x1ee>
 800e804:	ed9d 7a00 	vldr	s14, [sp]
 800e808:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e80c:	edc3 7a00 	vstr	s15, [r3]
 800e810:	edd2 7a00 	vldr	s15, [r2]
 800e814:	ee69 9aa7 	vmul.f32	s19, s19, s15
 800e818:	eec9 7a87 	vdiv.f32	s15, s19, s14
 800e81c:	edc2 7a00 	vstr	s15, [r2]
 800e820:	b005      	add	sp, #20
 800e822:	ecbd 8b04 	vpop	{d8-d9}
 800e826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e82a:	eddd 7a00 	vldr	s15, [sp]
 800e82e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e832:	edd3 7a00 	vldr	s15, [r3]
 800e836:	ee87 0a87 	vdiv.f32	s0, s15, s14
 800e83a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e83e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e842:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800e846:	d42a      	bmi.n	800e89e <getMagStats.constprop.35+0x262>
 800e848:	ee69 7a88 	vmul.f32	s15, s19, s16
 800e84c:	e7de      	b.n	800e80c <getMagStats.constprop.35+0x1d0>
 800e84e:	3501      	adds	r5, #1
 800e850:	fb95 f0fe 	sdiv	r0, r5, lr
 800e854:	fb0e 5510 	mls	r5, lr, r0, r5
 800e858:	b228      	sxth	r0, r5
 800e85a:	f8cd e000 	str.w	lr, [sp]
 800e85e:	9002      	str	r0, [sp, #8]
 800e860:	e714      	b.n	800e68c <getMagStats.constprop.35+0x50>
 800e862:	4420      	add	r0, r4
 800e864:	b200      	sxth	r0, r0
 800e866:	9002      	str	r0, [sp, #8]
 800e868:	e710      	b.n	800e68c <getMagStats.constprop.35+0x50>
 800e86a:	9303      	str	r3, [sp, #12]
 800e86c:	e88d 0005 	stmia.w	sp, {r0, r2}
 800e870:	f00a fd20 	bl	80192b4 <sqrtf>
 800e874:	f89a e0b0 	ldrb.w	lr, [sl, #176]	; 0xb0
 800e878:	9b03      	ldr	r3, [sp, #12]
 800e87a:	e89d 0005 	ldmia.w	sp, {r0, r2}
 800e87e:	e770      	b.n	800e762 <getMagStats.constprop.35+0x126>
 800e880:	edd3 7a00 	vldr	s15, [r3]
 800e884:	4670      	mov	r0, lr
 800e886:	e7a7      	b.n	800e7d8 <getMagStats.constprop.35+0x19c>
 800e888:	9303      	str	r3, [sp, #12]
 800e88a:	9202      	str	r2, [sp, #8]
 800e88c:	9001      	str	r0, [sp, #4]
 800e88e:	f00a fd11 	bl	80192b4 <sqrtf>
 800e892:	f89a 30b0 	ldrb.w	r3, [sl, #176]	; 0xb0
 800e896:	9300      	str	r3, [sp, #0]
 800e898:	a801      	add	r0, sp, #4
 800e89a:	c80d      	ldmia	r0, {r0, r2, r3}
 800e89c:	e7a9      	b.n	800e7f2 <getMagStats.constprop.35+0x1b6>
 800e89e:	e88d 000d 	stmia.w	sp, {r0, r2, r3}
 800e8a2:	f00a fd07 	bl	80192b4 <sqrtf>
 800e8a6:	f89a 30b0 	ldrb.w	r3, [sl, #176]	; 0xb0
 800e8aa:	ee07 3a10 	vmov	s14, r3
 800e8ae:	e89d 000d 	ldmia.w	sp, {r0, r2, r3}
 800e8b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e8b6:	e7c7      	b.n	800e848 <getMagStats.constprop.35+0x20c>
 800e8b8:	423c0000 	.word	0x423c0000
 800e8bc:	3f59999a 	.word	0x3f59999a
 800e8c0:	20001698 	.word	0x20001698

0800e8c4 <iNemo_setOrientation.constprop.51>:
 800e8c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8c8:	4a70      	ldr	r2, [pc, #448]	; (800ea8c <iNemo_setOrientation.constprop.51+0x1c8>)
 800e8ca:	4b71      	ldr	r3, [pc, #452]	; (800ea90 <iNemo_setOrientation.constprop.51+0x1cc>)
 800e8cc:	f892 e000 	ldrb.w	lr, [r2]
 800e8d0:	f892 9004 	ldrb.w	r9, [r2, #4]
 800e8d4:	7a17      	ldrb	r7, [r2, #8]
 800e8d6:	7856      	ldrb	r6, [r2, #1]
 800e8d8:	7954      	ldrb	r4, [r2, #5]
 800e8da:	7a51      	ldrb	r1, [r2, #9]
 800e8dc:	7895      	ldrb	r5, [r2, #2]
 800e8de:	7990      	ldrb	r0, [r2, #6]
 800e8e0:	7a92      	ldrb	r2, [r2, #10]
 800e8e2:	f1ae 0c42 	sub.w	ip, lr, #66	; 0x42
 800e8e6:	f10e 0820 	add.w	r8, lr, #32
 800e8ea:	f1bc 0f17 	cmp.w	ip, #23
 800e8ee:	bf88      	it	hi
 800e8f0:	46f0      	movhi	r8, lr
 800e8f2:	f1a9 0a42 	sub.w	sl, r9, #66	; 0x42
 800e8f6:	f109 0c20 	add.w	ip, r9, #32
 800e8fa:	f1ba 0f17 	cmp.w	sl, #23
 800e8fe:	bf88      	it	hi
 800e900:	46cc      	movhi	ip, r9
 800e902:	f107 0e20 	add.w	lr, r7, #32
 800e906:	f1a7 0a42 	sub.w	sl, r7, #66	; 0x42
 800e90a:	f1ba 0f17 	cmp.w	sl, #23
 800e90e:	bf88      	it	hi
 800e910:	46be      	movhi	lr, r7
 800e912:	f106 0920 	add.w	r9, r6, #32
 800e916:	f1a6 0a42 	sub.w	sl, r6, #66	; 0x42
 800e91a:	f1ba 0f17 	cmp.w	sl, #23
 800e91e:	bf98      	it	ls
 800e920:	464e      	movls	r6, r9
 800e922:	f104 0720 	add.w	r7, r4, #32
 800e926:	f1a4 0a42 	sub.w	sl, r4, #66	; 0x42
 800e92a:	f1ba 0f17 	cmp.w	sl, #23
 800e92e:	bf98      	it	ls
 800e930:	463c      	movls	r4, r7
 800e932:	f101 0920 	add.w	r9, r1, #32
 800e936:	f1a1 0a42 	sub.w	sl, r1, #66	; 0x42
 800e93a:	f1ba 0f17 	cmp.w	sl, #23
 800e93e:	bf98      	it	ls
 800e940:	4649      	movls	r1, r9
 800e942:	f105 0720 	add.w	r7, r5, #32
 800e946:	f1a5 0a42 	sub.w	sl, r5, #66	; 0x42
 800e94a:	f1ba 0f17 	cmp.w	sl, #23
 800e94e:	bf98      	it	ls
 800e950:	463d      	movls	r5, r7
 800e952:	f100 0920 	add.w	r9, r0, #32
 800e956:	f1a0 0a42 	sub.w	sl, r0, #66	; 0x42
 800e95a:	f102 0720 	add.w	r7, r2, #32
 800e95e:	f1ba 0f17 	cmp.w	sl, #23
 800e962:	bf98      	it	ls
 800e964:	4648      	movls	r0, r9
 800e966:	fa5f f888 	uxtb.w	r8, r8
 800e96a:	f1a2 0942 	sub.w	r9, r2, #66	; 0x42
 800e96e:	f1b9 0f17 	cmp.w	r9, #23
 800e972:	bf98      	it	ls
 800e974:	463a      	movls	r2, r7
 800e976:	f1a8 0864 	sub.w	r8, r8, #100	; 0x64
 800e97a:	2700      	movs	r7, #0
 800e97c:	fa5f fc8c 	uxtb.w	ip, ip
 800e980:	fa5f fe8e 	uxtb.w	lr, lr
 800e984:	b2f6      	uxtb	r6, r6
 800e986:	b2e4      	uxtb	r4, r4
 800e988:	b2c9      	uxtb	r1, r1
 800e98a:	b2ed      	uxtb	r5, r5
 800e98c:	b2c0      	uxtb	r0, r0
 800e98e:	b2d2      	uxtb	r2, r2
 800e990:	f8c3 73d4 	str.w	r7, [r3, #980]	; 0x3d4
 800e994:	f883 73d8 	strb.w	r7, [r3, #984]	; 0x3d8
 800e998:	f8c3 73d0 	str.w	r7, [r3, #976]	; 0x3d0
 800e99c:	f8c3 73dc 	str.w	r7, [r3, #988]	; 0x3dc
 800e9a0:	f8c3 73e8 	str.w	r7, [r3, #1000]	; 0x3e8
 800e9a4:	f8c3 73e0 	str.w	r7, [r3, #992]	; 0x3e0
 800e9a8:	f883 73e4 	strb.w	r7, [r3, #996]	; 0x3e4
 800e9ac:	f8c3 73ec 	str.w	r7, [r3, #1004]	; 0x3ec
 800e9b0:	f883 73f0 	strb.w	r7, [r3, #1008]	; 0x3f0
 800e9b4:	f1b8 0f13 	cmp.w	r8, #19
 800e9b8:	d80e      	bhi.n	800e9d8 <iNemo_setOrientation.constprop.51+0x114>
 800e9ba:	e8df f008 	tbb	[pc, r8]
 800e9be:	ad0a      	.short	0xad0a
 800e9c0:	0d0d0d0d 	.word	0x0d0d0d0d
 800e9c4:	0d0d0d0d 	.word	0x0d0d0d0d
 800e9c8:	0d0d0db1 	.word	0x0d0d0db1
 800e9cc:	b90db50d 	.word	0xb90db50d
 800e9d0:	bd0d      	.short	0xbd0d
 800e9d2:	27ff      	movs	r7, #255	; 0xff
 800e9d4:	f883 73d6 	strb.w	r7, [r3, #982]	; 0x3d6
 800e9d8:	3e64      	subs	r6, #100	; 0x64
 800e9da:	2e13      	cmp	r6, #19
 800e9dc:	d80e      	bhi.n	800e9fc <iNemo_setOrientation.constprop.51+0x138>
 800e9de:	e8df f006 	tbb	[pc, r6]
 800e9e2:	af0a      	.short	0xaf0a
 800e9e4:	0d0d0d0d 	.word	0x0d0d0d0d
 800e9e8:	0d0d0d0d 	.word	0x0d0d0d0d
 800e9ec:	0d0d0db3 	.word	0x0d0d0db3
 800e9f0:	bb0db70d 	.word	0xbb0db70d
 800e9f4:	bf0d      	.short	0xbf0d
 800e9f6:	26ff      	movs	r6, #255	; 0xff
 800e9f8:	f883 63d7 	strb.w	r6, [r3, #983]	; 0x3d7
 800e9fc:	3d64      	subs	r5, #100	; 0x64
 800e9fe:	2d13      	cmp	r5, #19
 800ea00:	d80e      	bhi.n	800ea20 <iNemo_setOrientation.constprop.51+0x15c>
 800ea02:	e8df f005 	tbb	[pc, r5]
 800ea06:	b10a      	.short	0xb10a
 800ea08:	0d0d0d0d 	.word	0x0d0d0d0d
 800ea0c:	0d0d0d0d 	.word	0x0d0d0d0d
 800ea10:	0d0d0db5 	.word	0x0d0d0db5
 800ea14:	bd0db90d 	.word	0xbd0db90d
 800ea18:	c10d      	.short	0xc10d
 800ea1a:	25ff      	movs	r5, #255	; 0xff
 800ea1c:	f883 53d8 	strb.w	r5, [r3, #984]	; 0x3d8
 800ea20:	f1ac 0c64 	sub.w	ip, ip, #100	; 0x64
 800ea24:	f1bc 0f13 	cmp.w	ip, #19
 800ea28:	d80e      	bhi.n	800ea48 <iNemo_setOrientation.constprop.51+0x184>
 800ea2a:	e8df f00c 	tbb	[pc, ip]
 800ea2e:	b10a      	.short	0xb10a
 800ea30:	0d0d0d0d 	.word	0x0d0d0d0d
 800ea34:	0d0d0d0d 	.word	0x0d0d0d0d
 800ea38:	0d0d0db5 	.word	0x0d0d0db5
 800ea3c:	bd0db90d 	.word	0xbd0db90d
 800ea40:	c10d      	.short	0xc10d
 800ea42:	25ff      	movs	r5, #255	; 0xff
 800ea44:	f883 53ee 	strb.w	r5, [r3, #1006]	; 0x3ee
 800ea48:	3c64      	subs	r4, #100	; 0x64
 800ea4a:	2c13      	cmp	r4, #19
 800ea4c:	d80e      	bhi.n	800ea6c <iNemo_setOrientation.constprop.51+0x1a8>
 800ea4e:	e8df f004 	tbb	[pc, r4]
 800ea52:	b30a      	.short	0xb30a
 800ea54:	0d0d0d0d 	.word	0x0d0d0d0d
 800ea58:	0d0d0d0d 	.word	0x0d0d0d0d
 800ea5c:	0d0d0db7 	.word	0x0d0d0db7
 800ea60:	bf0dbb0d 	.word	0xbf0dbb0d
 800ea64:	c30d      	.short	0xc30d
 800ea66:	24ff      	movs	r4, #255	; 0xff
 800ea68:	f883 43ef 	strb.w	r4, [r3, #1007]	; 0x3ef
 800ea6c:	3864      	subs	r0, #100	; 0x64
 800ea6e:	2813      	cmp	r0, #19
 800ea70:	d813      	bhi.n	800ea9a <iNemo_setOrientation.constprop.51+0x1d6>
 800ea72:	e8df f000 	tbb	[pc, r0]
 800ea76:	b50f      	.short	0xb50f
 800ea78:	12121212 	.word	0x12121212
 800ea7c:	12121212 	.word	0x12121212
 800ea80:	121212b9 	.word	0x121212b9
 800ea84:	c112bd12 	.word	0xc112bd12
 800ea88:	c512      	.short	0xc512
 800ea8a:	bf00      	nop
 800ea8c:	20000000 	.word	0x20000000
 800ea90:	20001698 	.word	0x20001698
 800ea94:	20ff      	movs	r0, #255	; 0xff
 800ea96:	f883 03f0 	strb.w	r0, [r3, #1008]	; 0x3f0
 800ea9a:	f1ae 0e64 	sub.w	lr, lr, #100	; 0x64
 800ea9e:	f1be 0f13 	cmp.w	lr, #19
 800eaa2:	d80e      	bhi.n	800eac2 <iNemo_setOrientation.constprop.51+0x1fe>
 800eaa4:	e8df f00e 	tbb	[pc, lr]
 800eaa8:	0d0db00a 	.word	0x0d0db00a
 800eaac:	0d0d0d0d 	.word	0x0d0d0d0d
 800eab0:	0db40d0d 	.word	0x0db40d0d
 800eab4:	b80d0d0d 	.word	0xb80d0d0d
 800eab8:	c00dbc0d 	.word	0xc00dbc0d
 800eabc:	20ff      	movs	r0, #255	; 0xff
 800eabe:	f883 03e2 	strb.w	r0, [r3, #994]	; 0x3e2
 800eac2:	3964      	subs	r1, #100	; 0x64
 800eac4:	2913      	cmp	r1, #19
 800eac6:	d80e      	bhi.n	800eae6 <iNemo_setOrientation.constprop.51+0x222>
 800eac8:	e8df f001 	tbb	[pc, r1]
 800eacc:	0d0db20a 	.word	0x0d0db20a
 800ead0:	0d0d0d0d 	.word	0x0d0d0d0d
 800ead4:	0db60d0d 	.word	0x0db60d0d
 800ead8:	ba0d0d0d 	.word	0xba0d0d0d
 800eadc:	c20dbe0d 	.word	0xc20dbe0d
 800eae0:	21ff      	movs	r1, #255	; 0xff
 800eae2:	f883 13e3 	strb.w	r1, [r3, #995]	; 0x3e3
 800eae6:	3a64      	subs	r2, #100	; 0x64
 800eae8:	2a13      	cmp	r2, #19
 800eaea:	d80e      	bhi.n	800eb0a <iNemo_setOrientation.constprop.51+0x246>
 800eaec:	e8df f002 	tbb	[pc, r2]
 800eaf0:	0d0db40a 	.word	0x0d0db40a
 800eaf4:	0d0d0d0d 	.word	0x0d0d0d0d
 800eaf8:	0db90d0d 	.word	0x0db90d0d
 800eafc:	be0d0d0d 	.word	0xbe0d0d0d
 800eb00:	0f0dc30d 	.word	0x0f0dc30d
 800eb04:	22ff      	movs	r2, #255	; 0xff
 800eb06:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
 800eb0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb0e:	22ff      	movs	r2, #255	; 0xff
 800eb10:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
 800eb14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb18:	2701      	movs	r7, #1
 800eb1a:	f883 73d0 	strb.w	r7, [r3, #976]	; 0x3d0
 800eb1e:	e75b      	b.n	800e9d8 <iNemo_setOrientation.constprop.51+0x114>
 800eb20:	2701      	movs	r7, #1
 800eb22:	f883 73d3 	strb.w	r7, [r3, #979]	; 0x3d3
 800eb26:	e757      	b.n	800e9d8 <iNemo_setOrientation.constprop.51+0x114>
 800eb28:	27ff      	movs	r7, #255	; 0xff
 800eb2a:	f883 73d3 	strb.w	r7, [r3, #979]	; 0x3d3
 800eb2e:	e753      	b.n	800e9d8 <iNemo_setOrientation.constprop.51+0x114>
 800eb30:	2701      	movs	r7, #1
 800eb32:	f883 73d6 	strb.w	r7, [r3, #982]	; 0x3d6
 800eb36:	e74f      	b.n	800e9d8 <iNemo_setOrientation.constprop.51+0x114>
 800eb38:	27ff      	movs	r7, #255	; 0xff
 800eb3a:	f883 73d0 	strb.w	r7, [r3, #976]	; 0x3d0
 800eb3e:	e74b      	b.n	800e9d8 <iNemo_setOrientation.constprop.51+0x114>
 800eb40:	2601      	movs	r6, #1
 800eb42:	f883 63d1 	strb.w	r6, [r3, #977]	; 0x3d1
 800eb46:	e759      	b.n	800e9fc <iNemo_setOrientation.constprop.51+0x138>
 800eb48:	2601      	movs	r6, #1
 800eb4a:	f883 63d4 	strb.w	r6, [r3, #980]	; 0x3d4
 800eb4e:	e755      	b.n	800e9fc <iNemo_setOrientation.constprop.51+0x138>
 800eb50:	26ff      	movs	r6, #255	; 0xff
 800eb52:	f883 63d4 	strb.w	r6, [r3, #980]	; 0x3d4
 800eb56:	e751      	b.n	800e9fc <iNemo_setOrientation.constprop.51+0x138>
 800eb58:	2601      	movs	r6, #1
 800eb5a:	f883 63d7 	strb.w	r6, [r3, #983]	; 0x3d7
 800eb5e:	e74d      	b.n	800e9fc <iNemo_setOrientation.constprop.51+0x138>
 800eb60:	26ff      	movs	r6, #255	; 0xff
 800eb62:	f883 63d1 	strb.w	r6, [r3, #977]	; 0x3d1
 800eb66:	e749      	b.n	800e9fc <iNemo_setOrientation.constprop.51+0x138>
 800eb68:	2501      	movs	r5, #1
 800eb6a:	f883 53d2 	strb.w	r5, [r3, #978]	; 0x3d2
 800eb6e:	e757      	b.n	800ea20 <iNemo_setOrientation.constprop.51+0x15c>
 800eb70:	2501      	movs	r5, #1
 800eb72:	f883 53d5 	strb.w	r5, [r3, #981]	; 0x3d5
 800eb76:	e753      	b.n	800ea20 <iNemo_setOrientation.constprop.51+0x15c>
 800eb78:	25ff      	movs	r5, #255	; 0xff
 800eb7a:	f883 53d5 	strb.w	r5, [r3, #981]	; 0x3d5
 800eb7e:	e74f      	b.n	800ea20 <iNemo_setOrientation.constprop.51+0x15c>
 800eb80:	2501      	movs	r5, #1
 800eb82:	f883 53d8 	strb.w	r5, [r3, #984]	; 0x3d8
 800eb86:	e74b      	b.n	800ea20 <iNemo_setOrientation.constprop.51+0x15c>
 800eb88:	25ff      	movs	r5, #255	; 0xff
 800eb8a:	f883 53d2 	strb.w	r5, [r3, #978]	; 0x3d2
 800eb8e:	e747      	b.n	800ea20 <iNemo_setOrientation.constprop.51+0x15c>
 800eb90:	2501      	movs	r5, #1
 800eb92:	f883 53e8 	strb.w	r5, [r3, #1000]	; 0x3e8
 800eb96:	e757      	b.n	800ea48 <iNemo_setOrientation.constprop.51+0x184>
 800eb98:	2501      	movs	r5, #1
 800eb9a:	f883 53eb 	strb.w	r5, [r3, #1003]	; 0x3eb
 800eb9e:	e753      	b.n	800ea48 <iNemo_setOrientation.constprop.51+0x184>
 800eba0:	25ff      	movs	r5, #255	; 0xff
 800eba2:	f883 53eb 	strb.w	r5, [r3, #1003]	; 0x3eb
 800eba6:	e74f      	b.n	800ea48 <iNemo_setOrientation.constprop.51+0x184>
 800eba8:	2501      	movs	r5, #1
 800ebaa:	f883 53ee 	strb.w	r5, [r3, #1006]	; 0x3ee
 800ebae:	e74b      	b.n	800ea48 <iNemo_setOrientation.constprop.51+0x184>
 800ebb0:	25ff      	movs	r5, #255	; 0xff
 800ebb2:	f883 53e8 	strb.w	r5, [r3, #1000]	; 0x3e8
 800ebb6:	e747      	b.n	800ea48 <iNemo_setOrientation.constprop.51+0x184>
 800ebb8:	2401      	movs	r4, #1
 800ebba:	f883 43e9 	strb.w	r4, [r3, #1001]	; 0x3e9
 800ebbe:	e755      	b.n	800ea6c <iNemo_setOrientation.constprop.51+0x1a8>
 800ebc0:	2401      	movs	r4, #1
 800ebc2:	f883 43ec 	strb.w	r4, [r3, #1004]	; 0x3ec
 800ebc6:	e751      	b.n	800ea6c <iNemo_setOrientation.constprop.51+0x1a8>
 800ebc8:	24ff      	movs	r4, #255	; 0xff
 800ebca:	f883 43ec 	strb.w	r4, [r3, #1004]	; 0x3ec
 800ebce:	e74d      	b.n	800ea6c <iNemo_setOrientation.constprop.51+0x1a8>
 800ebd0:	2401      	movs	r4, #1
 800ebd2:	f883 43ef 	strb.w	r4, [r3, #1007]	; 0x3ef
 800ebd6:	e749      	b.n	800ea6c <iNemo_setOrientation.constprop.51+0x1a8>
 800ebd8:	24ff      	movs	r4, #255	; 0xff
 800ebda:	f883 43e9 	strb.w	r4, [r3, #1001]	; 0x3e9
 800ebde:	e745      	b.n	800ea6c <iNemo_setOrientation.constprop.51+0x1a8>
 800ebe0:	2001      	movs	r0, #1
 800ebe2:	f883 03ea 	strb.w	r0, [r3, #1002]	; 0x3ea
 800ebe6:	e758      	b.n	800ea9a <iNemo_setOrientation.constprop.51+0x1d6>
 800ebe8:	2001      	movs	r0, #1
 800ebea:	f883 03ed 	strb.w	r0, [r3, #1005]	; 0x3ed
 800ebee:	e754      	b.n	800ea9a <iNemo_setOrientation.constprop.51+0x1d6>
 800ebf0:	20ff      	movs	r0, #255	; 0xff
 800ebf2:	f883 03ed 	strb.w	r0, [r3, #1005]	; 0x3ed
 800ebf6:	e750      	b.n	800ea9a <iNemo_setOrientation.constprop.51+0x1d6>
 800ebf8:	2001      	movs	r0, #1
 800ebfa:	f883 03f0 	strb.w	r0, [r3, #1008]	; 0x3f0
 800ebfe:	e74c      	b.n	800ea9a <iNemo_setOrientation.constprop.51+0x1d6>
 800ec00:	20ff      	movs	r0, #255	; 0xff
 800ec02:	f883 03ea 	strb.w	r0, [r3, #1002]	; 0x3ea
 800ec06:	e748      	b.n	800ea9a <iNemo_setOrientation.constprop.51+0x1d6>
 800ec08:	2001      	movs	r0, #1
 800ec0a:	f883 03dc 	strb.w	r0, [r3, #988]	; 0x3dc
 800ec0e:	e758      	b.n	800eac2 <iNemo_setOrientation.constprop.51+0x1fe>
 800ec10:	2001      	movs	r0, #1
 800ec12:	f883 03df 	strb.w	r0, [r3, #991]	; 0x3df
 800ec16:	e754      	b.n	800eac2 <iNemo_setOrientation.constprop.51+0x1fe>
 800ec18:	20ff      	movs	r0, #255	; 0xff
 800ec1a:	f883 03df 	strb.w	r0, [r3, #991]	; 0x3df
 800ec1e:	e750      	b.n	800eac2 <iNemo_setOrientation.constprop.51+0x1fe>
 800ec20:	2001      	movs	r0, #1
 800ec22:	f883 03e2 	strb.w	r0, [r3, #994]	; 0x3e2
 800ec26:	e74c      	b.n	800eac2 <iNemo_setOrientation.constprop.51+0x1fe>
 800ec28:	20ff      	movs	r0, #255	; 0xff
 800ec2a:	f883 03dc 	strb.w	r0, [r3, #988]	; 0x3dc
 800ec2e:	e748      	b.n	800eac2 <iNemo_setOrientation.constprop.51+0x1fe>
 800ec30:	2101      	movs	r1, #1
 800ec32:	f883 13dd 	strb.w	r1, [r3, #989]	; 0x3dd
 800ec36:	e756      	b.n	800eae6 <iNemo_setOrientation.constprop.51+0x222>
 800ec38:	2101      	movs	r1, #1
 800ec3a:	f883 13e0 	strb.w	r1, [r3, #992]	; 0x3e0
 800ec3e:	e752      	b.n	800eae6 <iNemo_setOrientation.constprop.51+0x222>
 800ec40:	21ff      	movs	r1, #255	; 0xff
 800ec42:	f883 13e0 	strb.w	r1, [r3, #992]	; 0x3e0
 800ec46:	e74e      	b.n	800eae6 <iNemo_setOrientation.constprop.51+0x222>
 800ec48:	2101      	movs	r1, #1
 800ec4a:	f883 13e3 	strb.w	r1, [r3, #995]	; 0x3e3
 800ec4e:	e74a      	b.n	800eae6 <iNemo_setOrientation.constprop.51+0x222>
 800ec50:	21ff      	movs	r1, #255	; 0xff
 800ec52:	f883 13dd 	strb.w	r1, [r3, #989]	; 0x3dd
 800ec56:	e746      	b.n	800eae6 <iNemo_setOrientation.constprop.51+0x222>
 800ec58:	2201      	movs	r2, #1
 800ec5a:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
 800ec5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec62:	2201      	movs	r2, #1
 800ec64:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
 800ec68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec6c:	22ff      	movs	r2, #255	; 0xff
 800ec6e:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
 800ec72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec76:	2201      	movs	r2, #1
 800ec78:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
 800ec7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ec80 <iNemo_setOrientation_6X.constprop.52>:
 800ec80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec84:	4a70      	ldr	r2, [pc, #448]	; (800ee48 <iNemo_setOrientation_6X.constprop.52+0x1c8>)
 800ec86:	4b71      	ldr	r3, [pc, #452]	; (800ee4c <iNemo_setOrientation_6X.constprop.52+0x1cc>)
 800ec88:	f892 e000 	ldrb.w	lr, [r2]
 800ec8c:	f892 9004 	ldrb.w	r9, [r2, #4]
 800ec90:	7a17      	ldrb	r7, [r2, #8]
 800ec92:	7856      	ldrb	r6, [r2, #1]
 800ec94:	7954      	ldrb	r4, [r2, #5]
 800ec96:	7a51      	ldrb	r1, [r2, #9]
 800ec98:	7895      	ldrb	r5, [r2, #2]
 800ec9a:	7990      	ldrb	r0, [r2, #6]
 800ec9c:	7a92      	ldrb	r2, [r2, #10]
 800ec9e:	f1ae 0c42 	sub.w	ip, lr, #66	; 0x42
 800eca2:	f10e 0820 	add.w	r8, lr, #32
 800eca6:	f1bc 0f17 	cmp.w	ip, #23
 800ecaa:	bf88      	it	hi
 800ecac:	46f0      	movhi	r8, lr
 800ecae:	f1a9 0a42 	sub.w	sl, r9, #66	; 0x42
 800ecb2:	f109 0c20 	add.w	ip, r9, #32
 800ecb6:	f1ba 0f17 	cmp.w	sl, #23
 800ecba:	bf88      	it	hi
 800ecbc:	46cc      	movhi	ip, r9
 800ecbe:	f107 0e20 	add.w	lr, r7, #32
 800ecc2:	f1a7 0a42 	sub.w	sl, r7, #66	; 0x42
 800ecc6:	f1ba 0f17 	cmp.w	sl, #23
 800ecca:	bf88      	it	hi
 800eccc:	46be      	movhi	lr, r7
 800ecce:	f106 0920 	add.w	r9, r6, #32
 800ecd2:	f1a6 0a42 	sub.w	sl, r6, #66	; 0x42
 800ecd6:	f1ba 0f17 	cmp.w	sl, #23
 800ecda:	bf98      	it	ls
 800ecdc:	464e      	movls	r6, r9
 800ecde:	f104 0720 	add.w	r7, r4, #32
 800ece2:	f1a4 0a42 	sub.w	sl, r4, #66	; 0x42
 800ece6:	f1ba 0f17 	cmp.w	sl, #23
 800ecea:	bf98      	it	ls
 800ecec:	463c      	movls	r4, r7
 800ecee:	f101 0920 	add.w	r9, r1, #32
 800ecf2:	f1a1 0a42 	sub.w	sl, r1, #66	; 0x42
 800ecf6:	f1ba 0f17 	cmp.w	sl, #23
 800ecfa:	bf98      	it	ls
 800ecfc:	4649      	movls	r1, r9
 800ecfe:	f105 0720 	add.w	r7, r5, #32
 800ed02:	f1a5 0a42 	sub.w	sl, r5, #66	; 0x42
 800ed06:	f1ba 0f17 	cmp.w	sl, #23
 800ed0a:	bf98      	it	ls
 800ed0c:	463d      	movls	r5, r7
 800ed0e:	f100 0920 	add.w	r9, r0, #32
 800ed12:	f1a0 0a42 	sub.w	sl, r0, #66	; 0x42
 800ed16:	f102 0720 	add.w	r7, r2, #32
 800ed1a:	f1ba 0f17 	cmp.w	sl, #23
 800ed1e:	bf98      	it	ls
 800ed20:	4648      	movls	r0, r9
 800ed22:	fa5f f888 	uxtb.w	r8, r8
 800ed26:	f1a2 0942 	sub.w	r9, r2, #66	; 0x42
 800ed2a:	f1b9 0f17 	cmp.w	r9, #23
 800ed2e:	bf98      	it	ls
 800ed30:	463a      	movls	r2, r7
 800ed32:	f1a8 0864 	sub.w	r8, r8, #100	; 0x64
 800ed36:	2700      	movs	r7, #0
 800ed38:	fa5f fc8c 	uxtb.w	ip, ip
 800ed3c:	fa5f fe8e 	uxtb.w	lr, lr
 800ed40:	b2f6      	uxtb	r6, r6
 800ed42:	b2e4      	uxtb	r4, r4
 800ed44:	b2c9      	uxtb	r1, r1
 800ed46:	b2ed      	uxtb	r5, r5
 800ed48:	b2c0      	uxtb	r0, r0
 800ed4a:	b2d2      	uxtb	r2, r2
 800ed4c:	f8c3 73f8 	str.w	r7, [r3, #1016]	; 0x3f8
 800ed50:	f883 73fc 	strb.w	r7, [r3, #1020]	; 0x3fc
 800ed54:	f8c3 73f4 	str.w	r7, [r3, #1012]	; 0x3f4
 800ed58:	f8c3 7400 	str.w	r7, [r3, #1024]	; 0x400
 800ed5c:	f8c3 740c 	str.w	r7, [r3, #1036]	; 0x40c
 800ed60:	f8c3 7404 	str.w	r7, [r3, #1028]	; 0x404
 800ed64:	f883 7408 	strb.w	r7, [r3, #1032]	; 0x408
 800ed68:	f8c3 7410 	str.w	r7, [r3, #1040]	; 0x410
 800ed6c:	f883 7414 	strb.w	r7, [r3, #1044]	; 0x414
 800ed70:	f1b8 0f13 	cmp.w	r8, #19
 800ed74:	d80e      	bhi.n	800ed94 <iNemo_setOrientation_6X.constprop.52+0x114>
 800ed76:	e8df f008 	tbb	[pc, r8]
 800ed7a:	ad0a      	.short	0xad0a
 800ed7c:	0d0d0d0d 	.word	0x0d0d0d0d
 800ed80:	0d0d0d0d 	.word	0x0d0d0d0d
 800ed84:	0d0d0db1 	.word	0x0d0d0db1
 800ed88:	b90db50d 	.word	0xb90db50d
 800ed8c:	bd0d      	.short	0xbd0d
 800ed8e:	27ff      	movs	r7, #255	; 0xff
 800ed90:	f883 73fa 	strb.w	r7, [r3, #1018]	; 0x3fa
 800ed94:	3e64      	subs	r6, #100	; 0x64
 800ed96:	2e13      	cmp	r6, #19
 800ed98:	d80e      	bhi.n	800edb8 <iNemo_setOrientation_6X.constprop.52+0x138>
 800ed9a:	e8df f006 	tbb	[pc, r6]
 800ed9e:	af0a      	.short	0xaf0a
 800eda0:	0d0d0d0d 	.word	0x0d0d0d0d
 800eda4:	0d0d0d0d 	.word	0x0d0d0d0d
 800eda8:	0d0d0db3 	.word	0x0d0d0db3
 800edac:	bb0db70d 	.word	0xbb0db70d
 800edb0:	bf0d      	.short	0xbf0d
 800edb2:	26ff      	movs	r6, #255	; 0xff
 800edb4:	f883 63fb 	strb.w	r6, [r3, #1019]	; 0x3fb
 800edb8:	3d64      	subs	r5, #100	; 0x64
 800edba:	2d13      	cmp	r5, #19
 800edbc:	d80e      	bhi.n	800eddc <iNemo_setOrientation_6X.constprop.52+0x15c>
 800edbe:	e8df f005 	tbb	[pc, r5]
 800edc2:	b10a      	.short	0xb10a
 800edc4:	0d0d0d0d 	.word	0x0d0d0d0d
 800edc8:	0d0d0d0d 	.word	0x0d0d0d0d
 800edcc:	0d0d0db5 	.word	0x0d0d0db5
 800edd0:	bd0db90d 	.word	0xbd0db90d
 800edd4:	c10d      	.short	0xc10d
 800edd6:	25ff      	movs	r5, #255	; 0xff
 800edd8:	f883 53fc 	strb.w	r5, [r3, #1020]	; 0x3fc
 800eddc:	f1ac 0c64 	sub.w	ip, ip, #100	; 0x64
 800ede0:	f1bc 0f13 	cmp.w	ip, #19
 800ede4:	d80e      	bhi.n	800ee04 <iNemo_setOrientation_6X.constprop.52+0x184>
 800ede6:	e8df f00c 	tbb	[pc, ip]
 800edea:	b10a      	.short	0xb10a
 800edec:	0d0d0d0d 	.word	0x0d0d0d0d
 800edf0:	0d0d0d0d 	.word	0x0d0d0d0d
 800edf4:	0d0d0db5 	.word	0x0d0d0db5
 800edf8:	bd0db90d 	.word	0xbd0db90d
 800edfc:	c10d      	.short	0xc10d
 800edfe:	25ff      	movs	r5, #255	; 0xff
 800ee00:	f883 5412 	strb.w	r5, [r3, #1042]	; 0x412
 800ee04:	3c64      	subs	r4, #100	; 0x64
 800ee06:	2c13      	cmp	r4, #19
 800ee08:	d80e      	bhi.n	800ee28 <iNemo_setOrientation_6X.constprop.52+0x1a8>
 800ee0a:	e8df f004 	tbb	[pc, r4]
 800ee0e:	b30a      	.short	0xb30a
 800ee10:	0d0d0d0d 	.word	0x0d0d0d0d
 800ee14:	0d0d0d0d 	.word	0x0d0d0d0d
 800ee18:	0d0d0db7 	.word	0x0d0d0db7
 800ee1c:	bf0dbb0d 	.word	0xbf0dbb0d
 800ee20:	c30d      	.short	0xc30d
 800ee22:	24ff      	movs	r4, #255	; 0xff
 800ee24:	f883 4413 	strb.w	r4, [r3, #1043]	; 0x413
 800ee28:	3864      	subs	r0, #100	; 0x64
 800ee2a:	2813      	cmp	r0, #19
 800ee2c:	d813      	bhi.n	800ee56 <iNemo_setOrientation_6X.constprop.52+0x1d6>
 800ee2e:	e8df f000 	tbb	[pc, r0]
 800ee32:	b50f      	.short	0xb50f
 800ee34:	12121212 	.word	0x12121212
 800ee38:	12121212 	.word	0x12121212
 800ee3c:	121212b9 	.word	0x121212b9
 800ee40:	c112bd12 	.word	0xc112bd12
 800ee44:	c512      	.short	0xc512
 800ee46:	bf00      	nop
 800ee48:	20000000 	.word	0x20000000
 800ee4c:	20001698 	.word	0x20001698
 800ee50:	20ff      	movs	r0, #255	; 0xff
 800ee52:	f883 0414 	strb.w	r0, [r3, #1044]	; 0x414
 800ee56:	f1ae 0e64 	sub.w	lr, lr, #100	; 0x64
 800ee5a:	f1be 0f13 	cmp.w	lr, #19
 800ee5e:	d80e      	bhi.n	800ee7e <iNemo_setOrientation_6X.constprop.52+0x1fe>
 800ee60:	e8df f00e 	tbb	[pc, lr]
 800ee64:	0d0db00a 	.word	0x0d0db00a
 800ee68:	0d0d0d0d 	.word	0x0d0d0d0d
 800ee6c:	0db40d0d 	.word	0x0db40d0d
 800ee70:	b80d0d0d 	.word	0xb80d0d0d
 800ee74:	c00dbc0d 	.word	0xc00dbc0d
 800ee78:	20ff      	movs	r0, #255	; 0xff
 800ee7a:	f883 0406 	strb.w	r0, [r3, #1030]	; 0x406
 800ee7e:	3964      	subs	r1, #100	; 0x64
 800ee80:	2913      	cmp	r1, #19
 800ee82:	d80e      	bhi.n	800eea2 <iNemo_setOrientation_6X.constprop.52+0x222>
 800ee84:	e8df f001 	tbb	[pc, r1]
 800ee88:	0d0db20a 	.word	0x0d0db20a
 800ee8c:	0d0d0d0d 	.word	0x0d0d0d0d
 800ee90:	0db60d0d 	.word	0x0db60d0d
 800ee94:	ba0d0d0d 	.word	0xba0d0d0d
 800ee98:	c20dbe0d 	.word	0xc20dbe0d
 800ee9c:	21ff      	movs	r1, #255	; 0xff
 800ee9e:	f883 1407 	strb.w	r1, [r3, #1031]	; 0x407
 800eea2:	3a64      	subs	r2, #100	; 0x64
 800eea4:	2a13      	cmp	r2, #19
 800eea6:	d80e      	bhi.n	800eec6 <iNemo_setOrientation_6X.constprop.52+0x246>
 800eea8:	e8df f002 	tbb	[pc, r2]
 800eeac:	0d0db40a 	.word	0x0d0db40a
 800eeb0:	0d0d0d0d 	.word	0x0d0d0d0d
 800eeb4:	0db90d0d 	.word	0x0db90d0d
 800eeb8:	be0d0d0d 	.word	0xbe0d0d0d
 800eebc:	0f0dc30d 	.word	0x0f0dc30d
 800eec0:	22ff      	movs	r2, #255	; 0xff
 800eec2:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
 800eec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eeca:	22ff      	movs	r2, #255	; 0xff
 800eecc:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
 800eed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eed4:	2701      	movs	r7, #1
 800eed6:	f883 73f4 	strb.w	r7, [r3, #1012]	; 0x3f4
 800eeda:	e75b      	b.n	800ed94 <iNemo_setOrientation_6X.constprop.52+0x114>
 800eedc:	2701      	movs	r7, #1
 800eede:	f883 73f7 	strb.w	r7, [r3, #1015]	; 0x3f7
 800eee2:	e757      	b.n	800ed94 <iNemo_setOrientation_6X.constprop.52+0x114>
 800eee4:	27ff      	movs	r7, #255	; 0xff
 800eee6:	f883 73f7 	strb.w	r7, [r3, #1015]	; 0x3f7
 800eeea:	e753      	b.n	800ed94 <iNemo_setOrientation_6X.constprop.52+0x114>
 800eeec:	2701      	movs	r7, #1
 800eeee:	f883 73fa 	strb.w	r7, [r3, #1018]	; 0x3fa
 800eef2:	e74f      	b.n	800ed94 <iNemo_setOrientation_6X.constprop.52+0x114>
 800eef4:	27ff      	movs	r7, #255	; 0xff
 800eef6:	f883 73f4 	strb.w	r7, [r3, #1012]	; 0x3f4
 800eefa:	e74b      	b.n	800ed94 <iNemo_setOrientation_6X.constprop.52+0x114>
 800eefc:	2601      	movs	r6, #1
 800eefe:	f883 63f5 	strb.w	r6, [r3, #1013]	; 0x3f5
 800ef02:	e759      	b.n	800edb8 <iNemo_setOrientation_6X.constprop.52+0x138>
 800ef04:	2601      	movs	r6, #1
 800ef06:	f883 63f8 	strb.w	r6, [r3, #1016]	; 0x3f8
 800ef0a:	e755      	b.n	800edb8 <iNemo_setOrientation_6X.constprop.52+0x138>
 800ef0c:	26ff      	movs	r6, #255	; 0xff
 800ef0e:	f883 63f8 	strb.w	r6, [r3, #1016]	; 0x3f8
 800ef12:	e751      	b.n	800edb8 <iNemo_setOrientation_6X.constprop.52+0x138>
 800ef14:	2601      	movs	r6, #1
 800ef16:	f883 63fb 	strb.w	r6, [r3, #1019]	; 0x3fb
 800ef1a:	e74d      	b.n	800edb8 <iNemo_setOrientation_6X.constprop.52+0x138>
 800ef1c:	26ff      	movs	r6, #255	; 0xff
 800ef1e:	f883 63f5 	strb.w	r6, [r3, #1013]	; 0x3f5
 800ef22:	e749      	b.n	800edb8 <iNemo_setOrientation_6X.constprop.52+0x138>
 800ef24:	2501      	movs	r5, #1
 800ef26:	f883 53f6 	strb.w	r5, [r3, #1014]	; 0x3f6
 800ef2a:	e757      	b.n	800eddc <iNemo_setOrientation_6X.constprop.52+0x15c>
 800ef2c:	2501      	movs	r5, #1
 800ef2e:	f883 53f9 	strb.w	r5, [r3, #1017]	; 0x3f9
 800ef32:	e753      	b.n	800eddc <iNemo_setOrientation_6X.constprop.52+0x15c>
 800ef34:	25ff      	movs	r5, #255	; 0xff
 800ef36:	f883 53f9 	strb.w	r5, [r3, #1017]	; 0x3f9
 800ef3a:	e74f      	b.n	800eddc <iNemo_setOrientation_6X.constprop.52+0x15c>
 800ef3c:	2501      	movs	r5, #1
 800ef3e:	f883 53fc 	strb.w	r5, [r3, #1020]	; 0x3fc
 800ef42:	e74b      	b.n	800eddc <iNemo_setOrientation_6X.constprop.52+0x15c>
 800ef44:	25ff      	movs	r5, #255	; 0xff
 800ef46:	f883 53f6 	strb.w	r5, [r3, #1014]	; 0x3f6
 800ef4a:	e747      	b.n	800eddc <iNemo_setOrientation_6X.constprop.52+0x15c>
 800ef4c:	2501      	movs	r5, #1
 800ef4e:	f883 540c 	strb.w	r5, [r3, #1036]	; 0x40c
 800ef52:	e757      	b.n	800ee04 <iNemo_setOrientation_6X.constprop.52+0x184>
 800ef54:	2501      	movs	r5, #1
 800ef56:	f883 540f 	strb.w	r5, [r3, #1039]	; 0x40f
 800ef5a:	e753      	b.n	800ee04 <iNemo_setOrientation_6X.constprop.52+0x184>
 800ef5c:	25ff      	movs	r5, #255	; 0xff
 800ef5e:	f883 540f 	strb.w	r5, [r3, #1039]	; 0x40f
 800ef62:	e74f      	b.n	800ee04 <iNemo_setOrientation_6X.constprop.52+0x184>
 800ef64:	2501      	movs	r5, #1
 800ef66:	f883 5412 	strb.w	r5, [r3, #1042]	; 0x412
 800ef6a:	e74b      	b.n	800ee04 <iNemo_setOrientation_6X.constprop.52+0x184>
 800ef6c:	25ff      	movs	r5, #255	; 0xff
 800ef6e:	f883 540c 	strb.w	r5, [r3, #1036]	; 0x40c
 800ef72:	e747      	b.n	800ee04 <iNemo_setOrientation_6X.constprop.52+0x184>
 800ef74:	2401      	movs	r4, #1
 800ef76:	f883 440d 	strb.w	r4, [r3, #1037]	; 0x40d
 800ef7a:	e755      	b.n	800ee28 <iNemo_setOrientation_6X.constprop.52+0x1a8>
 800ef7c:	2401      	movs	r4, #1
 800ef7e:	f883 4410 	strb.w	r4, [r3, #1040]	; 0x410
 800ef82:	e751      	b.n	800ee28 <iNemo_setOrientation_6X.constprop.52+0x1a8>
 800ef84:	24ff      	movs	r4, #255	; 0xff
 800ef86:	f883 4410 	strb.w	r4, [r3, #1040]	; 0x410
 800ef8a:	e74d      	b.n	800ee28 <iNemo_setOrientation_6X.constprop.52+0x1a8>
 800ef8c:	2401      	movs	r4, #1
 800ef8e:	f883 4413 	strb.w	r4, [r3, #1043]	; 0x413
 800ef92:	e749      	b.n	800ee28 <iNemo_setOrientation_6X.constprop.52+0x1a8>
 800ef94:	24ff      	movs	r4, #255	; 0xff
 800ef96:	f883 440d 	strb.w	r4, [r3, #1037]	; 0x40d
 800ef9a:	e745      	b.n	800ee28 <iNemo_setOrientation_6X.constprop.52+0x1a8>
 800ef9c:	2001      	movs	r0, #1
 800ef9e:	f883 040e 	strb.w	r0, [r3, #1038]	; 0x40e
 800efa2:	e758      	b.n	800ee56 <iNemo_setOrientation_6X.constprop.52+0x1d6>
 800efa4:	2001      	movs	r0, #1
 800efa6:	f883 0411 	strb.w	r0, [r3, #1041]	; 0x411
 800efaa:	e754      	b.n	800ee56 <iNemo_setOrientation_6X.constprop.52+0x1d6>
 800efac:	20ff      	movs	r0, #255	; 0xff
 800efae:	f883 0411 	strb.w	r0, [r3, #1041]	; 0x411
 800efb2:	e750      	b.n	800ee56 <iNemo_setOrientation_6X.constprop.52+0x1d6>
 800efb4:	2001      	movs	r0, #1
 800efb6:	f883 0414 	strb.w	r0, [r3, #1044]	; 0x414
 800efba:	e74c      	b.n	800ee56 <iNemo_setOrientation_6X.constprop.52+0x1d6>
 800efbc:	20ff      	movs	r0, #255	; 0xff
 800efbe:	f883 040e 	strb.w	r0, [r3, #1038]	; 0x40e
 800efc2:	e748      	b.n	800ee56 <iNemo_setOrientation_6X.constprop.52+0x1d6>
 800efc4:	2001      	movs	r0, #1
 800efc6:	f883 0400 	strb.w	r0, [r3, #1024]	; 0x400
 800efca:	e758      	b.n	800ee7e <iNemo_setOrientation_6X.constprop.52+0x1fe>
 800efcc:	2001      	movs	r0, #1
 800efce:	f883 0403 	strb.w	r0, [r3, #1027]	; 0x403
 800efd2:	e754      	b.n	800ee7e <iNemo_setOrientation_6X.constprop.52+0x1fe>
 800efd4:	20ff      	movs	r0, #255	; 0xff
 800efd6:	f883 0403 	strb.w	r0, [r3, #1027]	; 0x403
 800efda:	e750      	b.n	800ee7e <iNemo_setOrientation_6X.constprop.52+0x1fe>
 800efdc:	2001      	movs	r0, #1
 800efde:	f883 0406 	strb.w	r0, [r3, #1030]	; 0x406
 800efe2:	e74c      	b.n	800ee7e <iNemo_setOrientation_6X.constprop.52+0x1fe>
 800efe4:	20ff      	movs	r0, #255	; 0xff
 800efe6:	f883 0400 	strb.w	r0, [r3, #1024]	; 0x400
 800efea:	e748      	b.n	800ee7e <iNemo_setOrientation_6X.constprop.52+0x1fe>
 800efec:	2101      	movs	r1, #1
 800efee:	f883 1401 	strb.w	r1, [r3, #1025]	; 0x401
 800eff2:	e756      	b.n	800eea2 <iNemo_setOrientation_6X.constprop.52+0x222>
 800eff4:	2101      	movs	r1, #1
 800eff6:	f883 1404 	strb.w	r1, [r3, #1028]	; 0x404
 800effa:	e752      	b.n	800eea2 <iNemo_setOrientation_6X.constprop.52+0x222>
 800effc:	21ff      	movs	r1, #255	; 0xff
 800effe:	f883 1404 	strb.w	r1, [r3, #1028]	; 0x404
 800f002:	e74e      	b.n	800eea2 <iNemo_setOrientation_6X.constprop.52+0x222>
 800f004:	2101      	movs	r1, #1
 800f006:	f883 1407 	strb.w	r1, [r3, #1031]	; 0x407
 800f00a:	e74a      	b.n	800eea2 <iNemo_setOrientation_6X.constprop.52+0x222>
 800f00c:	21ff      	movs	r1, #255	; 0xff
 800f00e:	f883 1401 	strb.w	r1, [r3, #1025]	; 0x401
 800f012:	e746      	b.n	800eea2 <iNemo_setOrientation_6X.constprop.52+0x222>
 800f014:	2201      	movs	r2, #1
 800f016:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
 800f01a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f01e:	2201      	movs	r2, #1
 800f020:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
 800f024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f028:	22ff      	movs	r2, #255	; 0xff
 800f02a:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
 800f02e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f032:	2201      	movs	r2, #1
 800f034:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
 800f038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f03c <MEMS_updateMagBufferIndex.constprop.33>:
 800f03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f040:	4e91      	ldr	r6, [pc, #580]	; (800f288 <MEMS_updateMagBufferIndex.constprop.33+0x24c>)
 800f042:	ed2d 8b02 	vpush	{d8}
 800f046:	f896 30b0 	ldrb.w	r3, [r6, #176]	; 0xb0
 800f04a:	f896 80b1 	ldrb.w	r8, [r6, #177]	; 0xb1
 800f04e:	f996 20b2 	ldrsb.w	r2, [r6, #178]	; 0xb2
 800f052:	b08f      	sub	sp, #60	; 0x3c
 800f054:	4619      	mov	r1, r3
 800f056:	9301      	str	r3, [sp, #4]
 800f058:	4541      	cmp	r1, r8
 800f05a:	f04f 0300 	mov.w	r3, #0
 800f05e:	f8c6 30b8 	str.w	r3, [r6, #184]	; 0xb8
 800f062:	f8c6 30bc 	str.w	r3, [r6, #188]	; 0xbc
 800f066:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0
 800f06a:	f8c6 30c4 	str.w	r3, [r6, #196]	; 0xc4
 800f06e:	f8c6 30cc 	str.w	r3, [r6, #204]	; 0xcc
 800f072:	f8c6 30c8 	str.w	r3, [r6, #200]	; 0xc8
 800f076:	f000 80f2 	beq.w	800f25e <MEMS_updateMagBufferIndex.constprop.33+0x222>
 800f07a:	1c53      	adds	r3, r2, #1
 800f07c:	9a01      	ldr	r2, [sp, #4]
 800f07e:	1a9b      	subs	r3, r3, r2
 800f080:	fb93 f2f8 	sdiv	r2, r3, r8
 800f084:	fb08 3312 	mls	r3, r8, r2, r3
 800f088:	b21a      	sxth	r2, r3
 800f08a:	2a00      	cmp	r2, #0
 800f08c:	9202      	str	r2, [sp, #8]
 800f08e:	f2c0 80ee 	blt.w	800f26e <MEMS_updateMagBufferIndex.constprop.33+0x232>
 800f092:	9b01      	ldr	r3, [sp, #4]
 800f094:	b93b      	cbnz	r3, 800f0a6 <MEMS_updateMagBufferIndex.constprop.33+0x6a>
 800f096:	23ff      	movs	r3, #255	; 0xff
 800f098:	f886 30b2 	strb.w	r3, [r6, #178]	; 0xb2
 800f09c:	b00f      	add	sp, #60	; 0x3c
 800f09e:	ecbd 8b02 	vpop	{d8}
 800f0a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0a6:	2500      	movs	r5, #0
 800f0a8:	eeb0 8a40 	vmov.f32	s16, s0
 800f0ac:	4682      	mov	sl, r0
 800f0ae:	9508      	str	r5, [sp, #32]
 800f0b0:	46a9      	mov	r9, r5
 800f0b2:	950d      	str	r5, [sp, #52]	; 0x34
 800f0b4:	9507      	str	r5, [sp, #28]
 800f0b6:	950a      	str	r5, [sp, #40]	; 0x28
 800f0b8:	9503      	str	r5, [sp, #12]
 800f0ba:	950b      	str	r5, [sp, #44]	; 0x2c
 800f0bc:	9504      	str	r5, [sp, #16]
 800f0be:	950c      	str	r5, [sp, #48]	; 0x30
 800f0c0:	9505      	str	r5, [sp, #20]
 800f0c2:	9509      	str	r5, [sp, #36]	; 0x24
 800f0c4:	9506      	str	r5, [sp, #24]
 800f0c6:	2701      	movs	r7, #1
 800f0c8:	9b02      	ldr	r3, [sp, #8]
 800f0ca:	1959      	adds	r1, r3, r5
 800f0cc:	fb91 f3f8 	sdiv	r3, r1, r8
 800f0d0:	fb08 1313 	mls	r3, r8, r3, r1
 800f0d4:	b2db      	uxtb	r3, r3
 800f0d6:	f103 0b04 	add.w	fp, r3, #4
 800f0da:	eb06 01cb 	add.w	r1, r6, fp, lsl #3
 800f0de:	f9b1 00b2 	ldrsh.w	r0, [r1, #178]	; 0xb2
 800f0e2:	fb90 f1fa 	sdiv	r1, r0, sl
 800f0e6:	fb0a 0111 	mls	r1, sl, r1, r0
 800f0ea:	2900      	cmp	r1, #0
 800f0ec:	bfb8      	it	lt
 800f0ee:	4451      	addlt	r1, sl
 800f0f0:	b20b      	sxth	r3, r1
 800f0f2:	ee00 3a10 	vmov	s0, r3
 800f0f6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800f0fa:	ee80 0a08 	vdiv.f32	s0, s0, s16
 800f0fe:	f009 ff3d 	bl	8018f7c <roundf>
 800f102:	eb06 01cb 	add.w	r1, r6, fp, lsl #3
 800f106:	f9b1 00b4 	ldrsh.w	r0, [r1, #180]	; 0xb4
 800f10a:	fb90 f1fa 	sdiv	r1, r0, sl
 800f10e:	fb0a 0111 	mls	r1, sl, r1, r0
 800f112:	2900      	cmp	r1, #0
 800f114:	bfb8      	it	lt
 800f116:	4451      	addlt	r1, sl
 800f118:	b20b      	sxth	r3, r1
 800f11a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800f11e:	ee00 3a10 	vmov	s0, r3
 800f122:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800f126:	edcd 7a00 	vstr	s15, [sp]
 800f12a:	ee80 0a08 	vdiv.f32	s0, s0, s16
 800f12e:	f009 ff25 	bl	8018f7c <roundf>
 800f132:	eb06 03cb 	add.w	r3, r6, fp, lsl #3
 800f136:	f89d 4000 	ldrb.w	r4, [sp]
 800f13a:	f9b3 10b6 	ldrsh.w	r1, [r3, #182]	; 0xb6
 800f13e:	fb91 f3fa 	sdiv	r3, r1, sl
 800f142:	fb0a 1313 	mls	r3, sl, r3, r1
 800f146:	2b00      	cmp	r3, #0
 800f148:	bfb8      	it	lt
 800f14a:	4453      	addlt	r3, sl
 800f14c:	b21b      	sxth	r3, r3
 800f14e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800f152:	ee00 3a10 	vmov	s0, r3
 800f156:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800f15a:	edcd 7a00 	vstr	s15, [sp]
 800f15e:	ee80 0a08 	vdiv.f32	s0, s0, s16
 800f162:	f009 ff0b 	bl	8018f7c <roundf>
 800f166:	f89d b000 	ldrb.w	fp, [sp]
 800f16a:	2c1f      	cmp	r4, #31
 800f16c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800f170:	edcd 7a00 	vstr	s15, [sp]
 800f174:	f89d 3000 	ldrb.w	r3, [sp]
 800f178:	d966      	bls.n	800f248 <MEMS_updateMagBufferIndex.constprop.33+0x20c>
 800f17a:	9906      	ldr	r1, [sp, #24]
 800f17c:	3c20      	subs	r4, #32
 800f17e:	fa07 f404 	lsl.w	r4, r7, r4
 800f182:	460a      	mov	r2, r1
 800f184:	ea24 0401 	bic.w	r4, r4, r1
 800f188:	4062      	eors	r2, r4
 800f18a:	9206      	str	r2, [sp, #24]
 800f18c:	2201      	movs	r2, #1
 800f18e:	9209      	str	r2, [sp, #36]	; 0x24
 800f190:	f1bb 0f1f 	cmp.w	fp, #31
 800f194:	d939      	bls.n	800f20a <MEMS_updateMagBufferIndex.constprop.33+0x1ce>
 800f196:	9804      	ldr	r0, [sp, #16]
 800f198:	f1ab 0120 	sub.w	r1, fp, #32
 800f19c:	fa07 f101 	lsl.w	r1, r7, r1
 800f1a0:	4602      	mov	r2, r0
 800f1a2:	ea21 0100 	bic.w	r1, r1, r0
 800f1a6:	404a      	eors	r2, r1
 800f1a8:	9204      	str	r2, [sp, #16]
 800f1aa:	2b1f      	cmp	r3, #31
 800f1ac:	f04f 0201 	mov.w	r2, #1
 800f1b0:	920b      	str	r2, [sp, #44]	; 0x2c
 800f1b2:	d837      	bhi.n	800f224 <MEMS_updateMagBufferIndex.constprop.33+0x1e8>
 800f1b4:	fa07 f303 	lsl.w	r3, r7, r3
 800f1b8:	ea23 0309 	bic.w	r3, r3, r9
 800f1bc:	3501      	adds	r5, #1
 800f1be:	ea89 0903 	eor.w	r9, r9, r3
 800f1c2:	9b01      	ldr	r3, [sp, #4]
 800f1c4:	b2e9      	uxtb	r1, r5
 800f1c6:	428b      	cmp	r3, r1
 800f1c8:	f04f 0301 	mov.w	r3, #1
 800f1cc:	9308      	str	r3, [sp, #32]
 800f1ce:	f63f af7b 	bhi.w	800f0c8 <MEMS_updateMagBufferIndex.constprop.33+0x8c>
 800f1d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d14e      	bne.n	800f276 <MEMS_updateMagBufferIndex.constprop.33+0x23a>
 800f1d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d14f      	bne.n	800f27e <MEMS_updateMagBufferIndex.constprop.33+0x242>
 800f1de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f1e0:	b113      	cbz	r3, 800f1e8 <MEMS_updateMagBufferIndex.constprop.33+0x1ac>
 800f1e2:	9b04      	ldr	r3, [sp, #16]
 800f1e4:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0
 800f1e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1ea:	b113      	cbz	r3, 800f1f2 <MEMS_updateMagBufferIndex.constprop.33+0x1b6>
 800f1ec:	9b03      	ldr	r3, [sp, #12]
 800f1ee:	f8c6 30c4 	str.w	r3, [r6, #196]	; 0xc4
 800f1f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f1f4:	b113      	cbz	r3, 800f1fc <MEMS_updateMagBufferIndex.constprop.33+0x1c0>
 800f1f6:	9b07      	ldr	r3, [sp, #28]
 800f1f8:	f8c6 30cc 	str.w	r3, [r6, #204]	; 0xcc
 800f1fc:	9b08      	ldr	r3, [sp, #32]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	f43f af4c 	beq.w	800f09c <MEMS_updateMagBufferIndex.constprop.33+0x60>
 800f204:	f8c6 90c8 	str.w	r9, [r6, #200]	; 0xc8
 800f208:	e748      	b.n	800f09c <MEMS_updateMagBufferIndex.constprop.33+0x60>
 800f20a:	9803      	ldr	r0, [sp, #12]
 800f20c:	fa07 f10b 	lsl.w	r1, r7, fp
 800f210:	4602      	mov	r2, r0
 800f212:	ea21 0100 	bic.w	r1, r1, r0
 800f216:	404a      	eors	r2, r1
 800f218:	9203      	str	r2, [sp, #12]
 800f21a:	2b1f      	cmp	r3, #31
 800f21c:	f04f 0201 	mov.w	r2, #1
 800f220:	920a      	str	r2, [sp, #40]	; 0x28
 800f222:	d9c7      	bls.n	800f1b4 <MEMS_updateMagBufferIndex.constprop.33+0x178>
 800f224:	9807      	ldr	r0, [sp, #28]
 800f226:	3b20      	subs	r3, #32
 800f228:	fa07 f303 	lsl.w	r3, r7, r3
 800f22c:	ea23 0300 	bic.w	r3, r3, r0
 800f230:	4043      	eors	r3, r0
 800f232:	3501      	adds	r5, #1
 800f234:	9307      	str	r3, [sp, #28]
 800f236:	9b01      	ldr	r3, [sp, #4]
 800f238:	b2e9      	uxtb	r1, r5
 800f23a:	428b      	cmp	r3, r1
 800f23c:	f04f 0301 	mov.w	r3, #1
 800f240:	930d      	str	r3, [sp, #52]	; 0x34
 800f242:	f63f af41 	bhi.w	800f0c8 <MEMS_updateMagBufferIndex.constprop.33+0x8c>
 800f246:	e7c4      	b.n	800f1d2 <MEMS_updateMagBufferIndex.constprop.33+0x196>
 800f248:	9905      	ldr	r1, [sp, #20]
 800f24a:	fa07 f404 	lsl.w	r4, r7, r4
 800f24e:	460a      	mov	r2, r1
 800f250:	ea24 0401 	bic.w	r4, r4, r1
 800f254:	4062      	eors	r2, r4
 800f256:	9205      	str	r2, [sp, #20]
 800f258:	2201      	movs	r2, #1
 800f25a:	920c      	str	r2, [sp, #48]	; 0x30
 800f25c:	e798      	b.n	800f190 <MEMS_updateMagBufferIndex.constprop.33+0x154>
 800f25e:	3201      	adds	r2, #1
 800f260:	fb92 f3f1 	sdiv	r3, r2, r1
 800f264:	fb01 2213 	mls	r2, r1, r3, r2
 800f268:	b213      	sxth	r3, r2
 800f26a:	9302      	str	r3, [sp, #8]
 800f26c:	e711      	b.n	800f092 <MEMS_updateMagBufferIndex.constprop.33+0x56>
 800f26e:	4443      	add	r3, r8
 800f270:	b21b      	sxth	r3, r3
 800f272:	9302      	str	r3, [sp, #8]
 800f274:	e70d      	b.n	800f092 <MEMS_updateMagBufferIndex.constprop.33+0x56>
 800f276:	9b06      	ldr	r3, [sp, #24]
 800f278:	f8c6 30b8 	str.w	r3, [r6, #184]	; 0xb8
 800f27c:	e7ac      	b.n	800f1d8 <MEMS_updateMagBufferIndex.constprop.33+0x19c>
 800f27e:	9b05      	ldr	r3, [sp, #20]
 800f280:	f8c6 30bc 	str.w	r3, [r6, #188]	; 0xbc
 800f284:	e7ab      	b.n	800f1de <MEMS_updateMagBufferIndex.constprop.33+0x1a2>
 800f286:	bf00      	nop
 800f288:	20001698 	.word	0x20001698
 800f28c:	00000000 	.word	0x00000000

0800f290 <iNemo_quat2heading>:
 800f290:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800f294:	ed2d 8b08 	vpush	{d8-d11}
 800f298:	460e      	mov	r6, r1
 800f29a:	b082      	sub	sp, #8
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d15d      	bne.n	800f35c <iNemo_quat2heading+0xcc>
 800f2a0:	edd2 6a00 	vldr	s13, [r2]
 800f2a4:	ed92 7a01 	vldr	s14, [r2, #4]
 800f2a8:	4dd5      	ldr	r5, [pc, #852]	; (800f600 <iNemo_quat2heading+0x370>)
 800f2aa:	edd2 7a02 	vldr	s15, [r2, #8]
 800f2ae:	edd0 8a00 	vldr	s17, [r0]
 800f2b2:	f8d5 4418 	ldr.w	r4, [r5, #1048]	; 0x418
 800f2b6:	edd0 9a01 	vldr	s19, [r0, #4]
 800f2ba:	ed90 8a02 	vldr	s16, [r0, #8]
 800f2be:	ed90 aa03 	vldr	s20, [r0, #12]
 800f2c2:	eef0 aae6 	vabs.f32	s21, s13
 800f2c6:	eeb0 9ac7 	vabs.f32	s18, s14
 800f2ca:	eef4 aac9 	vcmpe.f32	s21, s18
 800f2ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2d2:	eeb0 bae7 	vabs.f32	s22, s15
 800f2d6:	f340 8098 	ble.w	800f40a <iNemo_quat2heading+0x17a>
 800f2da:	eef4 aacb 	vcmpe.f32	s21, s22
 800f2de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2e2:	f340 8092 	ble.w	800f40a <iNemo_quat2heading+0x17a>
 800f2e6:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800f2ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2ee:	ee1a 0a90 	vmov	r0, s21
 800f2f2:	f340 818d 	ble.w	800f610 <iNemo_quat2heading+0x380>
 800f2f6:	f7f1 f92f 	bl	8000558 <__aeabi_f2d>
 800f2fa:	4680      	mov	r8, r0
 800f2fc:	ee19 0a10 	vmov	r0, s18
 800f300:	4689      	mov	r9, r1
 800f302:	f7f1 f929 	bl	8000558 <__aeabi_f2d>
 800f306:	a3ba      	add	r3, pc, #744	; (adr r3, 800f5f0 <iNemo_quat2heading+0x360>)
 800f308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f30c:	f7f1 f978 	bl	8000600 <__aeabi_dmul>
 800f310:	4602      	mov	r2, r0
 800f312:	460b      	mov	r3, r1
 800f314:	4640      	mov	r0, r8
 800f316:	4649      	mov	r1, r9
 800f318:	f7f1 fc02 	bl	8000b20 <__aeabi_dcmpgt>
 800f31c:	b188      	cbz	r0, 800f342 <iNemo_quat2heading+0xb2>
 800f31e:	ee1b 0a10 	vmov	r0, s22
 800f322:	f7f1 f919 	bl	8000558 <__aeabi_f2d>
 800f326:	a3b2      	add	r3, pc, #712	; (adr r3, 800f5f0 <iNemo_quat2heading+0x360>)
 800f328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f32c:	f7f1 f968 	bl	8000600 <__aeabi_dmul>
 800f330:	4602      	mov	r2, r0
 800f332:	460b      	mov	r3, r1
 800f334:	4640      	mov	r0, r8
 800f336:	4649      	mov	r1, r9
 800f338:	f7f1 fbf2 	bl	8000b20 <__aeabi_dcmpgt>
 800f33c:	2800      	cmp	r0, #0
 800f33e:	bf18      	it	ne
 800f340:	2404      	movne	r4, #4
 800f342:	f8c5 4418 	str.w	r4, [r5, #1048]	; 0x418
 800f346:	2c05      	cmp	r4, #5
 800f348:	f200 81b4 	bhi.w	800f6b4 <iNemo_quat2heading+0x424>
 800f34c:	e8df f014 	tbh	[pc, r4, lsl #1]
 800f350:	00e300e0 	.word	0x00e300e0
 800f354:	011900c3 	.word	0x011900c3
 800f358:	00e000c3 	.word	0x00e000c3
 800f35c:	edd2 6a01 	vldr	s13, [r2, #4]
 800f360:	ed92 7a00 	vldr	s14, [r2]
 800f364:	ed90 8a02 	vldr	s16, [r0, #8]
 800f368:	4da5      	ldr	r5, [pc, #660]	; (800f600 <iNemo_quat2heading+0x370>)
 800f36a:	edd2 7a02 	vldr	s15, [r2, #8]
 800f36e:	edd0 8a01 	vldr	s17, [r0, #4]
 800f372:	f8d5 4418 	ldr.w	r4, [r5, #1048]	; 0x418
 800f376:	edd0 9a00 	vldr	s19, [r0]
 800f37a:	ed90 aa03 	vldr	s20, [r0, #12]
 800f37e:	eef0 aae6 	vabs.f32	s21, s13
 800f382:	eeb0 9ac7 	vabs.f32	s18, s14
 800f386:	eef4 aac9 	vcmpe.f32	s21, s18
 800f38a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f38e:	eeb1 8a48 	vneg.f32	s16, s16
 800f392:	eeb0 bae7 	vabs.f32	s22, s15
 800f396:	dd04      	ble.n	800f3a2 <iNemo_quat2heading+0x112>
 800f398:	eef4 aacb 	vcmpe.f32	s21, s22
 800f39c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3a0:	dca1      	bgt.n	800f2e6 <iNemo_quat2heading+0x56>
 800f3a2:	eeb4 9acb 	vcmpe.f32	s18, s22
 800f3a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3aa:	dc63      	bgt.n	800f474 <iNemo_quat2heading+0x1e4>
 800f3ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f3b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3b4:	ee1b 0a10 	vmov	r0, s22
 800f3b8:	d433      	bmi.n	800f422 <iNemo_quat2heading+0x192>
 800f3ba:	f7f1 f8cd 	bl	8000558 <__aeabi_f2d>
 800f3be:	4680      	mov	r8, r0
 800f3c0:	ee19 0a10 	vmov	r0, s18
 800f3c4:	4689      	mov	r9, r1
 800f3c6:	f7f1 f8c7 	bl	8000558 <__aeabi_f2d>
 800f3ca:	a389      	add	r3, pc, #548	; (adr r3, 800f5f0 <iNemo_quat2heading+0x360>)
 800f3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3d0:	f7f1 f916 	bl	8000600 <__aeabi_dmul>
 800f3d4:	4602      	mov	r2, r0
 800f3d6:	460b      	mov	r3, r1
 800f3d8:	4640      	mov	r0, r8
 800f3da:	4649      	mov	r1, r9
 800f3dc:	f7f1 fba0 	bl	8000b20 <__aeabi_dcmpgt>
 800f3e0:	2800      	cmp	r0, #0
 800f3e2:	d0ae      	beq.n	800f342 <iNemo_quat2heading+0xb2>
 800f3e4:	ee1a 0a90 	vmov	r0, s21
 800f3e8:	f7f1 f8b6 	bl	8000558 <__aeabi_f2d>
 800f3ec:	a380      	add	r3, pc, #512	; (adr r3, 800f5f0 <iNemo_quat2heading+0x360>)
 800f3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3f2:	f7f1 f905 	bl	8000600 <__aeabi_dmul>
 800f3f6:	4602      	mov	r2, r0
 800f3f8:	460b      	mov	r3, r1
 800f3fa:	4640      	mov	r0, r8
 800f3fc:	4649      	mov	r1, r9
 800f3fe:	f7f1 fb8f 	bl	8000b20 <__aeabi_dcmpgt>
 800f402:	2800      	cmp	r0, #0
 800f404:	bf18      	it	ne
 800f406:	2402      	movne	r4, #2
 800f408:	e79b      	b.n	800f342 <iNemo_quat2heading+0xb2>
 800f40a:	eeb4 9acb 	vcmpe.f32	s18, s22
 800f40e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f412:	dc2f      	bgt.n	800f474 <iNemo_quat2heading+0x1e4>
 800f414:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f41c:	ee1b 0a10 	vmov	r0, s22
 800f420:	ddcb      	ble.n	800f3ba <iNemo_quat2heading+0x12a>
 800f422:	f7f1 f899 	bl	8000558 <__aeabi_f2d>
 800f426:	4680      	mov	r8, r0
 800f428:	ee19 0a10 	vmov	r0, s18
 800f42c:	4689      	mov	r9, r1
 800f42e:	f7f1 f893 	bl	8000558 <__aeabi_f2d>
 800f432:	a36f      	add	r3, pc, #444	; (adr r3, 800f5f0 <iNemo_quat2heading+0x360>)
 800f434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f438:	f7f1 f8e2 	bl	8000600 <__aeabi_dmul>
 800f43c:	4602      	mov	r2, r0
 800f43e:	460b      	mov	r3, r1
 800f440:	4640      	mov	r0, r8
 800f442:	4649      	mov	r1, r9
 800f444:	f7f1 fb6c 	bl	8000b20 <__aeabi_dcmpgt>
 800f448:	2800      	cmp	r0, #0
 800f44a:	f43f af7a 	beq.w	800f342 <iNemo_quat2heading+0xb2>
 800f44e:	ee1a 0a90 	vmov	r0, s21
 800f452:	f7f1 f881 	bl	8000558 <__aeabi_f2d>
 800f456:	a366      	add	r3, pc, #408	; (adr r3, 800f5f0 <iNemo_quat2heading+0x360>)
 800f458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f45c:	f7f1 f8d0 	bl	8000600 <__aeabi_dmul>
 800f460:	4602      	mov	r2, r0
 800f462:	460b      	mov	r3, r1
 800f464:	4640      	mov	r0, r8
 800f466:	4649      	mov	r1, r9
 800f468:	f7f1 fb5a 	bl	8000b20 <__aeabi_dcmpgt>
 800f46c:	2800      	cmp	r0, #0
 800f46e:	bf18      	it	ne
 800f470:	2400      	movne	r4, #0
 800f472:	e766      	b.n	800f342 <iNemo_quat2heading+0xb2>
 800f474:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800f478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f47c:	ee19 0a10 	vmov	r0, s18
 800f480:	f340 80ef 	ble.w	800f662 <iNemo_quat2heading+0x3d2>
 800f484:	f7f1 f868 	bl	8000558 <__aeabi_f2d>
 800f488:	4680      	mov	r8, r0
 800f48a:	ee1a 0a90 	vmov	r0, s21
 800f48e:	4689      	mov	r9, r1
 800f490:	f7f1 f862 	bl	8000558 <__aeabi_f2d>
 800f494:	a356      	add	r3, pc, #344	; (adr r3, 800f5f0 <iNemo_quat2heading+0x360>)
 800f496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f49a:	f7f1 f8b1 	bl	8000600 <__aeabi_dmul>
 800f49e:	4602      	mov	r2, r0
 800f4a0:	460b      	mov	r3, r1
 800f4a2:	4640      	mov	r0, r8
 800f4a4:	4649      	mov	r1, r9
 800f4a6:	f7f1 fb3b 	bl	8000b20 <__aeabi_dcmpgt>
 800f4aa:	2800      	cmp	r0, #0
 800f4ac:	f43f af49 	beq.w	800f342 <iNemo_quat2heading+0xb2>
 800f4b0:	ee1b 0a10 	vmov	r0, s22
 800f4b4:	f7f1 f850 	bl	8000558 <__aeabi_f2d>
 800f4b8:	a34d      	add	r3, pc, #308	; (adr r3, 800f5f0 <iNemo_quat2heading+0x360>)
 800f4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4be:	f7f1 f89f 	bl	8000600 <__aeabi_dmul>
 800f4c2:	4602      	mov	r2, r0
 800f4c4:	460b      	mov	r3, r1
 800f4c6:	4640      	mov	r0, r8
 800f4c8:	4649      	mov	r1, r9
 800f4ca:	f7f1 fb29 	bl	8000b20 <__aeabi_dcmpgt>
 800f4ce:	2800      	cmp	r0, #0
 800f4d0:	bf18      	it	ne
 800f4d2:	2401      	movne	r4, #1
 800f4d4:	e735      	b.n	800f342 <iNemo_quat2heading+0xb2>
 800f4d6:	ed96 0a00 	vldr	s0, [r6]
 800f4da:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800f604 <iNemo_quat2heading+0x374>
 800f4de:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f4e2:	eddf 7a49 	vldr	s15, [pc, #292]	; 800f608 <iNemo_quat2heading+0x378>
 800f4e6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f4ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4ee:	bfa8      	it	ge
 800f4f0:	ee30 0a67 	vsubge.f32	s0, s0, s15
 800f4f4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f4f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4fc:	d503      	bpl.n	800f506 <iNemo_quat2heading+0x276>
 800f4fe:	eddf 7a42 	vldr	s15, [pc, #264]	; 800f608 <iNemo_quat2heading+0x378>
 800f502:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f506:	b002      	add	sp, #8
 800f508:	ecbd 8b08 	vpop	{d8-d11}
 800f50c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800f510:	ed96 0a00 	vldr	s0, [r6]
 800f514:	e7e5      	b.n	800f4e2 <iNemo_quat2heading+0x252>
 800f516:	ee68 7aa8 	vmul.f32	s15, s17, s17
 800f51a:	ee29 7aa9 	vmul.f32	s14, s19, s19
 800f51e:	ee68 6a08 	vmul.f32	s13, s16, s16
 800f522:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f526:	ee2a 7a0a 	vmul.f32	s14, s20, s20
 800f52a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f52e:	ee69 8aa8 	vmul.f32	s17, s19, s17
 800f532:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f536:	ee2a 8a08 	vmul.f32	s16, s20, s16
 800f53a:	ee17 0a90 	vmov	r0, s15
 800f53e:	ee38 8a88 	vadd.f32	s16, s17, s16
 800f542:	f7f1 f809 	bl	8000558 <__aeabi_f2d>
 800f546:	ee78 7a08 	vadd.f32	s15, s16, s16
 800f54a:	e9cd 0100 	strd	r0, r1, [sp]
 800f54e:	ee17 0a90 	vmov	r0, s15
 800f552:	f7f1 f801 	bl	8000558 <__aeabi_f2d>
 800f556:	ed9d 1b00 	vldr	d1, [sp]
 800f55a:	ec41 0b10 	vmov	d0, r0, r1
 800f55e:	f009 fdf5 	bl	801914c <atan2>
 800f562:	a325      	add	r3, pc, #148	; (adr r3, 800f5f8 <iNemo_quat2heading+0x368>)
 800f564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f568:	ec51 0b10 	vmov	r0, r1, d0
 800f56c:	f7f1 f848 	bl	8000600 <__aeabi_dmul>
 800f570:	2200      	movs	r2, #0
 800f572:	4b26      	ldr	r3, [pc, #152]	; (800f60c <iNemo_quat2heading+0x37c>)
 800f574:	f7f0 fe90 	bl	8000298 <__aeabi_dsub>
 800f578:	f7f1 fb3a 	bl	8000bf0 <__aeabi_d2f>
 800f57c:	ee00 0a10 	vmov	s0, r0
 800f580:	e7af      	b.n	800f4e2 <iNemo_quat2heading+0x252>
 800f582:	ee68 7aa8 	vmul.f32	s15, s17, s17
 800f586:	ee29 7aa9 	vmul.f32	s14, s19, s19
 800f58a:	ee68 6a08 	vmul.f32	s13, s16, s16
 800f58e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f592:	ee2a 7a0a 	vmul.f32	s14, s20, s20
 800f596:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f59a:	ee69 8aa8 	vmul.f32	s17, s19, s17
 800f59e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f5a2:	ee2a 8a08 	vmul.f32	s16, s20, s16
 800f5a6:	ee17 0a90 	vmov	r0, s15
 800f5aa:	ee38 8a88 	vadd.f32	s16, s17, s16
 800f5ae:	f7f0 ffd3 	bl	8000558 <__aeabi_f2d>
 800f5b2:	ee78 7a08 	vadd.f32	s15, s16, s16
 800f5b6:	e9cd 0100 	strd	r0, r1, [sp]
 800f5ba:	ee17 0a90 	vmov	r0, s15
 800f5be:	f7f0 ffcb 	bl	8000558 <__aeabi_f2d>
 800f5c2:	ed9d 1b00 	vldr	d1, [sp]
 800f5c6:	ec41 0b10 	vmov	d0, r0, r1
 800f5ca:	f009 fdbf 	bl	801914c <atan2>
 800f5ce:	a30a      	add	r3, pc, #40	; (adr r3, 800f5f8 <iNemo_quat2heading+0x368>)
 800f5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5d4:	ec51 0b10 	vmov	r0, r1, d0
 800f5d8:	f7f1 f812 	bl	8000600 <__aeabi_dmul>
 800f5dc:	2200      	movs	r2, #0
 800f5de:	4b0b      	ldr	r3, [pc, #44]	; (800f60c <iNemo_quat2heading+0x37c>)
 800f5e0:	f7f0 fe5c 	bl	800029c <__adddf3>
 800f5e4:	f7f1 fb04 	bl	8000bf0 <__aeabi_d2f>
 800f5e8:	ee00 0a10 	vmov	s0, r0
 800f5ec:	e779      	b.n	800f4e2 <iNemo_quat2heading+0x252>
 800f5ee:	bf00      	nop
 800f5f0:	e0000000 	.word	0xe0000000
 800f5f4:	3ff6b851 	.word	0x3ff6b851
 800f5f8:	20000000 	.word	0x20000000
 800f5fc:	404ca5dc 	.word	0x404ca5dc
 800f600:	20001698 	.word	0x20001698
 800f604:	43340000 	.word	0x43340000
 800f608:	43b40000 	.word	0x43b40000
 800f60c:	40568000 	.word	0x40568000
 800f610:	f7f0 ffa2 	bl	8000558 <__aeabi_f2d>
 800f614:	4680      	mov	r8, r0
 800f616:	ee19 0a10 	vmov	r0, s18
 800f61a:	4689      	mov	r9, r1
 800f61c:	f7f0 ff9c 	bl	8000558 <__aeabi_f2d>
 800f620:	a328      	add	r3, pc, #160	; (adr r3, 800f6c4 <iNemo_quat2heading+0x434>)
 800f622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f626:	f7f0 ffeb 	bl	8000600 <__aeabi_dmul>
 800f62a:	4602      	mov	r2, r0
 800f62c:	460b      	mov	r3, r1
 800f62e:	4640      	mov	r0, r8
 800f630:	4649      	mov	r1, r9
 800f632:	f7f1 fa75 	bl	8000b20 <__aeabi_dcmpgt>
 800f636:	2800      	cmp	r0, #0
 800f638:	f43f ae83 	beq.w	800f342 <iNemo_quat2heading+0xb2>
 800f63c:	ee1b 0a10 	vmov	r0, s22
 800f640:	f7f0 ff8a 	bl	8000558 <__aeabi_f2d>
 800f644:	a31f      	add	r3, pc, #124	; (adr r3, 800f6c4 <iNemo_quat2heading+0x434>)
 800f646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f64a:	f7f0 ffd9 	bl	8000600 <__aeabi_dmul>
 800f64e:	4602      	mov	r2, r0
 800f650:	460b      	mov	r3, r1
 800f652:	4640      	mov	r0, r8
 800f654:	4649      	mov	r1, r9
 800f656:	f7f1 fa63 	bl	8000b20 <__aeabi_dcmpgt>
 800f65a:	2800      	cmp	r0, #0
 800f65c:	bf18      	it	ne
 800f65e:	2405      	movne	r4, #5
 800f660:	e66f      	b.n	800f342 <iNemo_quat2heading+0xb2>
 800f662:	f7f0 ff79 	bl	8000558 <__aeabi_f2d>
 800f666:	4680      	mov	r8, r0
 800f668:	ee1a 0a90 	vmov	r0, s21
 800f66c:	4689      	mov	r9, r1
 800f66e:	f7f0 ff73 	bl	8000558 <__aeabi_f2d>
 800f672:	a314      	add	r3, pc, #80	; (adr r3, 800f6c4 <iNemo_quat2heading+0x434>)
 800f674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f678:	f7f0 ffc2 	bl	8000600 <__aeabi_dmul>
 800f67c:	4602      	mov	r2, r0
 800f67e:	460b      	mov	r3, r1
 800f680:	4640      	mov	r0, r8
 800f682:	4649      	mov	r1, r9
 800f684:	f7f1 fa4c 	bl	8000b20 <__aeabi_dcmpgt>
 800f688:	2800      	cmp	r0, #0
 800f68a:	f43f ae5a 	beq.w	800f342 <iNemo_quat2heading+0xb2>
 800f68e:	ee1b 0a10 	vmov	r0, s22
 800f692:	f7f0 ff61 	bl	8000558 <__aeabi_f2d>
 800f696:	a30b      	add	r3, pc, #44	; (adr r3, 800f6c4 <iNemo_quat2heading+0x434>)
 800f698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f69c:	f7f0 ffb0 	bl	8000600 <__aeabi_dmul>
 800f6a0:	4602      	mov	r2, r0
 800f6a2:	460b      	mov	r3, r1
 800f6a4:	4640      	mov	r0, r8
 800f6a6:	4649      	mov	r1, r9
 800f6a8:	f7f1 fa3a 	bl	8000b20 <__aeabi_dcmpgt>
 800f6ac:	2800      	cmp	r0, #0
 800f6ae:	bf18      	it	ne
 800f6b0:	2403      	movne	r4, #3
 800f6b2:	e646      	b.n	800f342 <iNemo_quat2heading+0xb2>
 800f6b4:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800f6c0 <iNemo_quat2heading+0x430>
 800f6b8:	e725      	b.n	800f506 <iNemo_quat2heading+0x276>
 800f6ba:	bf00      	nop
 800f6bc:	f3af 8000 	nop.w
 800f6c0:	00000000 	.word	0x00000000
 800f6c4:	e0000000 	.word	0xe0000000
 800f6c8:	3ff6b851 	.word	0x3ff6b851

0800f6cc <MEMS_runMagCal.constprop.21>:
 800f6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6d0:	f8df b4a4 	ldr.w	fp, [pc, #1188]	; 800fb78 <MEMS_runMagCal.constprop.21+0x4ac>
 800f6d4:	ed2d 8b10 	vpush	{d8-d15}
 800f6d8:	f8bb 6018 	ldrh.w	r6, [fp, #24]
 800f6dc:	f9bb e012 	ldrsh.w	lr, [fp, #18]
 800f6e0:	2e82      	cmp	r6, #130	; 0x82
 800f6e2:	f2ad 5d6c 	subw	sp, sp, #1388	; 0x56c
 800f6e6:	f240 8400 	bls.w	800feea <MEMS_runMagCal.constprop.21+0x81e>
 800f6ea:	f8db 201c 	ldr.w	r2, [fp, #28]
 800f6ee:	1e73      	subs	r3, r6, #1
 800f6f0:	fb0e 2313 	mls	r3, lr, r3, r2
 800f6f4:	2182      	movs	r1, #130	; 0x82
 800f6f6:	f106 057e 	add.w	r5, r6, #126	; 0x7e
 800f6fa:	9304      	str	r3, [sp, #16]
 800f6fc:	2381      	movs	r3, #129	; 0x81
 800f6fe:	910c      	str	r1, [sp, #48]	; 0x30
 800f700:	eb0e 1ece 	add.w	lr, lr, lr, lsl #7
 800f704:	b2ed      	uxtb	r5, r5
 800f706:	460f      	mov	r7, r1
 800f708:	930d      	str	r3, [sp, #52]	; 0x34
 800f70a:	f8db 4020 	ldr.w	r4, [fp, #32]
 800f70e:	2200      	movs	r2, #0
 800f710:	f50d 78ac 	add.w	r8, sp, #344	; 0x158
 800f714:	b211      	sxth	r1, r2
 800f716:	00cb      	lsls	r3, r1, #3
 800f718:	18e0      	adds	r0, r4, r3
 800f71a:	3201      	adds	r2, #1
 800f71c:	4443      	add	r3, r8
 800f71e:	f814 c031 	ldrb.w	ip, [r4, r1, lsl #3]
 800f722:	f808 c031 	strb.w	ip, [r8, r1, lsl #3]
 800f726:	b2d2      	uxtb	r2, r2
 800f728:	f8b0 9002 	ldrh.w	r9, [r0, #2]
 800f72c:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 800f730:	88c1      	ldrh	r1, [r0, #6]
 800f732:	f8a3 9002 	strh.w	r9, [r3, #2]
 800f736:	4297      	cmp	r7, r2
 800f738:	f8a3 c004 	strh.w	ip, [r3, #4]
 800f73c:	80d9      	strh	r1, [r3, #6]
 800f73e:	d8e9      	bhi.n	800f714 <MEMS_runMagCal.constprop.21+0x48>
 800f740:	2e82      	cmp	r6, #130	; 0x82
 800f742:	bf86      	itte	hi
 800f744:	f1a6 0382 	subhi.w	r3, r6, #130	; 0x82
 800f748:	b29b      	uxthhi	r3, r3
 800f74a:	2300      	movls	r3, #0
 800f74c:	f8ab 3018 	strh.w	r3, [fp, #24]
 800f750:	b1c5      	cbz	r5, 800f784 <MEMS_runMagCal.constprop.21+0xb8>
 800f752:	3d01      	subs	r5, #1
 800f754:	b2ed      	uxtb	r5, r5
 800f756:	f8db 3020 	ldr.w	r3, [fp, #32]
 800f75a:	3501      	adds	r5, #1
 800f75c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800f760:	2600      	movs	r6, #0
 800f762:	f893 4410 	ldrb.w	r4, [r3, #1040]	; 0x410
 800f766:	f8b3 0412 	ldrh.w	r0, [r3, #1042]	; 0x412
 800f76a:	f8b3 1414 	ldrh.w	r1, [r3, #1044]	; 0x414
 800f76e:	f8b3 2416 	ldrh.w	r2, [r3, #1046]	; 0x416
 800f772:	701c      	strb	r4, [r3, #0]
 800f774:	f883 6410 	strb.w	r6, [r3, #1040]	; 0x410
 800f778:	8058      	strh	r0, [r3, #2]
 800f77a:	8099      	strh	r1, [r3, #4]
 800f77c:	80da      	strh	r2, [r3, #6]
 800f77e:	3308      	adds	r3, #8
 800f780:	429d      	cmp	r5, r3
 800f782:	d1ee      	bne.n	800f762 <MEMS_runMagCal.constprop.21+0x96>
 800f784:	9b04      	ldr	r3, [sp, #16]
 800f786:	4473      	add	r3, lr
 800f788:	9305      	str	r3, [sp, #20]
 800f78a:	f8cb 305c 	str.w	r3, [fp, #92]	; 0x5c
 800f78e:	2f00      	cmp	r7, #0
 800f790:	f000 83a5 	beq.w	800fede <MEMS_runMagCal.constprop.21+0x812>
 800f794:	4619      	mov	r1, r3
 800f796:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
 800f79a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f79e:	f501 31c3 	add.w	r1, r1, #99840	; 0x18600
 800f7a2:	fb02 f203 	mul.w	r2, r2, r3
 800f7a6:	31a0      	adds	r1, #160	; 0xa0
 800f7a8:	4291      	cmp	r1, r2
 800f7aa:	f080 83ac 	bcs.w	800ff06 <MEMS_runMagCal.constprop.21+0x83a>
 800f7ae:	3300      	adds	r3, #0
 800f7b0:	bf18      	it	ne
 800f7b2:	2301      	movne	r3, #1
 800f7b4:	2200      	movs	r2, #0
 800f7b6:	f8cb 302c 	str.w	r3, [fp, #44]	; 0x2c
 800f7ba:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
 800f7be:	f88b 20b0 	strb.w	r2, [fp, #176]	; 0xb0
 800f7c2:	f8cb 2030 	str.w	r2, [fp, #48]	; 0x30
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	22ff      	movs	r2, #255	; 0xff
 800f7ca:	f8cb 30b8 	str.w	r3, [fp, #184]	; 0xb8
 800f7ce:	f8cb 30bc 	str.w	r3, [fp, #188]	; 0xbc
 800f7d2:	f8cb 30c0 	str.w	r3, [fp, #192]	; 0xc0
 800f7d6:	f8cb 30c4 	str.w	r3, [fp, #196]	; 0xc4
 800f7da:	f8cb 30cc 	str.w	r3, [fp, #204]	; 0xcc
 800f7de:	f8cb 30c8 	str.w	r3, [fp, #200]	; 0xc8
 800f7e2:	f88b 20b2 	strb.w	r2, [fp, #178]	; 0xb2
 800f7e6:	eddf 7adf 	vldr	s15, [pc, #892]	; 800fb64 <MEMS_runMagCal.constprop.21+0x498>
 800f7ea:	f8df c390 	ldr.w	ip, [pc, #912]	; 800fb7c <MEMS_runMagCal.constprop.21+0x4b0>
 800f7ee:	ed9b 8a05 	vldr	s16, [fp, #20]
 800f7f2:	eddb 2a23 	vldr	s5, [fp, #140]	; 0x8c
 800f7f6:	ed9b 3a20 	vldr	s6, [fp, #128]	; 0x80
 800f7fa:	eddb 3a27 	vldr	s7, [fp, #156]	; 0x9c
 800f7fe:	ed9b 4a21 	vldr	s8, [fp, #132]	; 0x84
 800f802:	eddb 4a2b 	vldr	s9, [fp, #172]	; 0xac
 800f806:	ed9b 5a22 	vldr	s10, [fp, #136]	; 0x88
 800f80a:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 800f80e:	2600      	movs	r6, #0
 800f810:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800f814:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800f818:	f50d 78ac 	add.w	r8, sp, #344	; 0x158
 800f81c:	f8ad 20d8 	strh.w	r2, [sp, #216]	; 0xd8
 800f820:	f8ad 20da 	strh.w	r2, [sp, #218]	; 0xda
 800f824:	f8ad 20dc 	strh.w	r2, [sp, #220]	; 0xdc
 800f828:	eeb0 7a67 	vmov.f32	s14, s15
 800f82c:	eeb0 6a67 	vmov.f32	s12, s15
 800f830:	eef0 5a67 	vmov.f32	s11, s15
 800f834:	469a      	mov	sl, r3
 800f836:	9301      	str	r3, [sp, #4]
 800f838:	9303      	str	r3, [sp, #12]
 800f83a:	f8ad 3118 	strh.w	r3, [sp, #280]	; 0x118
 800f83e:	f8ad 311a 	strh.w	r3, [sp, #282]	; 0x11a
 800f842:	f8ad 311c 	strh.w	r3, [sp, #284]	; 0x11c
 800f846:	f8cd c000 	str.w	ip, [sp]
 800f84a:	f8cd c008 	str.w	ip, [sp, #8]
 800f84e:	4645      	mov	r5, r8
 800f850:	9606      	str	r6, [sp, #24]
 800f852:	9607      	str	r6, [sp, #28]
 800f854:	9608      	str	r6, [sp, #32]
 800f856:	9609      	str	r6, [sp, #36]	; 0x24
 800f858:	960a      	str	r6, [sp, #40]	; 0x28
 800f85a:	960b      	str	r6, [sp, #44]	; 0x2c
 800f85c:	4632      	mov	r2, r6
 800f85e:	4634      	mov	r4, r6
 800f860:	46b6      	mov	lr, r6
 800f862:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800f866:	782b      	ldrb	r3, [r5, #0]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	f000 809f 	beq.w	800f9ac <MEMS_runMagCal.constprop.21+0x2e0>
 800f86e:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 800f872:	f10e 0e01 	add.w	lr, lr, #1
 800f876:	4561      	cmp	r1, ip
 800f878:	fa4f fe8e 	sxtb.w	lr, lr
 800f87c:	dd02      	ble.n	800f884 <MEMS_runMagCal.constprop.21+0x1b8>
 800f87e:	2301      	movs	r3, #1
 800f880:	468c      	mov	ip, r1
 800f882:	9306      	str	r3, [sp, #24]
 800f884:	4551      	cmp	r1, sl
 800f886:	da02      	bge.n	800f88e <MEMS_runMagCal.constprop.21+0x1c2>
 800f888:	2301      	movs	r3, #1
 800f88a:	468a      	mov	sl, r1
 800f88c:	9307      	str	r3, [sp, #28]
 800f88e:	ee07 1a90 	vmov	s15, r1
 800f892:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f896:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800f89a:	9b00      	ldr	r3, [sp, #0]
 800f89c:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800f8a0:	429a      	cmp	r2, r3
 800f8a2:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800f8a6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f8aa:	ee37 6a86 	vadd.f32	s12, s15, s12
 800f8ae:	dd02      	ble.n	800f8b6 <MEMS_runMagCal.constprop.21+0x1ea>
 800f8b0:	2301      	movs	r3, #1
 800f8b2:	9200      	str	r2, [sp, #0]
 800f8b4:	9308      	str	r3, [sp, #32]
 800f8b6:	9b01      	ldr	r3, [sp, #4]
 800f8b8:	429a      	cmp	r2, r3
 800f8ba:	da02      	bge.n	800f8c2 <MEMS_runMagCal.constprop.21+0x1f6>
 800f8bc:	2301      	movs	r3, #1
 800f8be:	9201      	str	r2, [sp, #4]
 800f8c0:	9309      	str	r3, [sp, #36]	; 0x24
 800f8c2:	ee07 2a90 	vmov	s15, r2
 800f8c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f8ca:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800f8ce:	9802      	ldr	r0, [sp, #8]
 800f8d0:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800f8d4:	4283      	cmp	r3, r0
 800f8d6:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800f8da:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f8de:	ee77 7a86 	vadd.f32	s15, s15, s12
 800f8e2:	dd02      	ble.n	800f8ea <MEMS_runMagCal.constprop.21+0x21e>
 800f8e4:	2001      	movs	r0, #1
 800f8e6:	9302      	str	r3, [sp, #8]
 800f8e8:	900a      	str	r0, [sp, #40]	; 0x28
 800f8ea:	9803      	ldr	r0, [sp, #12]
 800f8ec:	4283      	cmp	r3, r0
 800f8ee:	da02      	bge.n	800f8f6 <MEMS_runMagCal.constprop.21+0x22a>
 800f8f0:	2001      	movs	r0, #1
 800f8f2:	9303      	str	r3, [sp, #12]
 800f8f4:	900b      	str	r0, [sp, #44]	; 0x2c
 800f8f6:	ee07 3a10 	vmov	s14, r3
 800f8fa:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 800f8fe:	2e03      	cmp	r6, #3
 800f900:	ee36 6a45 	vsub.f32	s12, s12, s10
 800f904:	ee26 6a24 	vmul.f32	s12, s12, s9
 800f908:	ee26 6a06 	vmul.f32	s12, s12, s12
 800f90c:	ee36 6a27 	vadd.f32	s12, s12, s15
 800f910:	f241 8286 	bls.w	8010e20 <MEMS_runMagCal.constprop.21+0x1754>
 800f914:	f935 9c1e 	ldrsh.w	r9, [r5, #-30]
 800f918:	f935 8c16 	ldrsh.w	r8, [r5, #-22]
 800f91c:	f935 0c06 	ldrsh.w	r0, [r5, #-6]
 800f920:	eba1 0109 	sub.w	r1, r1, r9
 800f924:	eba0 0008 	sub.w	r0, r0, r8
 800f928:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800f92c:	ee07 1a90 	vmov	s15, r1
 800f930:	f935 9c1c 	ldrsh.w	r9, [r5, #-28]
 800f934:	f935 1c04 	ldrsh.w	r1, [r5, #-4]
 800f938:	f935 8c14 	ldrsh.w	r8, [r5, #-20]
 800f93c:	f935 0c1a 	ldrsh.w	r0, [r5, #-26]
 800f940:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f944:	eba1 0108 	sub.w	r1, r1, r8
 800f948:	eeb0 7ac7 	vabs.f32	s14, s14
 800f94c:	eba2 0209 	sub.w	r2, r2, r9
 800f950:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800f954:	ee37 7a25 	vadd.f32	s14, s14, s11
 800f958:	ee07 2a90 	vmov	s15, r2
 800f95c:	eefc 6ac7 	vcvt.u32.f32	s13, s14
 800f960:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f964:	f935 2c02 	ldrsh.w	r2, [r5, #-2]
 800f968:	f935 1c12 	ldrsh.w	r1, [r5, #-18]
 800f96c:	eeb8 7a66 	vcvt.f32.u32	s14, s13
 800f970:	eef0 7ae7 	vabs.f32	s15, s15
 800f974:	1a52      	subs	r2, r2, r1
 800f976:	1a1b      	subs	r3, r3, r0
 800f978:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800f97c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f980:	ee07 3a90 	vmov	s15, r3
 800f984:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f988:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f98c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800f990:	eef0 7ae7 	vabs.f32	s15, s15
 800f994:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f998:	2201      	movs	r2, #1
 800f99a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f99e:	eeb0 7a46 	vmov.f32	s14, s12
 800f9a2:	ee17 3a90 	vmov	r3, s15
 800f9a6:	429c      	cmp	r4, r3
 800f9a8:	bf38      	it	cc
 800f9aa:	461c      	movcc	r4, r3
 800f9ac:	3601      	adds	r6, #1
 800f9ae:	b2b3      	uxth	r3, r6
 800f9b0:	429f      	cmp	r7, r3
 800f9b2:	f105 0508 	add.w	r5, r5, #8
 800f9b6:	f63f af56 	bhi.w	800f866 <MEMS_runMagCal.constprop.21+0x19a>
 800f9ba:	940f      	str	r4, [sp, #60]	; 0x3c
 800f9bc:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 800f9c0:	2a00      	cmp	r2, #0
 800f9c2:	f041 8229 	bne.w	8010e18 <MEMS_runMagCal.constprop.21+0x174c>
 800f9c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f9c8:	b11b      	cbz	r3, 800f9d2 <MEMS_runMagCal.constprop.21+0x306>
 800f9ca:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800f9ce:	f8ad 311c 	strh.w	r3, [sp, #284]	; 0x11c
 800f9d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9d4:	b11b      	cbz	r3, 800f9de <MEMS_runMagCal.constprop.21+0x312>
 800f9d6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800f9da:	f8ad 30dc 	strh.w	r3, [sp, #220]	; 0xdc
 800f9de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9e0:	b11b      	cbz	r3, 800f9ea <MEMS_runMagCal.constprop.21+0x31e>
 800f9e2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800f9e6:	f8ad 311a 	strh.w	r3, [sp, #282]	; 0x11a
 800f9ea:	9b08      	ldr	r3, [sp, #32]
 800f9ec:	b11b      	cbz	r3, 800f9f6 <MEMS_runMagCal.constprop.21+0x32a>
 800f9ee:	f8bd 3000 	ldrh.w	r3, [sp]
 800f9f2:	f8ad 30da 	strh.w	r3, [sp, #218]	; 0xda
 800f9f6:	9b07      	ldr	r3, [sp, #28]
 800f9f8:	b10b      	cbz	r3, 800f9fe <MEMS_runMagCal.constprop.21+0x332>
 800f9fa:	f8ad a118 	strh.w	sl, [sp, #280]	; 0x118
 800f9fe:	9b06      	ldr	r3, [sp, #24]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	f040 829a 	bne.w	800ff3a <MEMS_runMagCal.constprop.21+0x86e>
 800fa06:	f1be 0f00 	cmp.w	lr, #0
 800fa0a:	f000 82a6 	beq.w	800ff5a <MEMS_runMagCal.constprop.21+0x88e>
 800fa0e:	f9bd 70d8 	ldrsh.w	r7, [sp, #216]	; 0xd8
 800fa12:	f9bd 4118 	ldrsh.w	r4, [sp, #280]	; 0x118
 800fa16:	f514 4f80 	cmn.w	r4, #16384	; 0x4000
 800fa1a:	f2c0 8299 	blt.w	800ff50 <MEMS_runMagCal.constprop.21+0x884>
 800fa1e:	f9bd 60da 	ldrsh.w	r6, [sp, #218]	; 0xda
 800fa22:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
 800fa26:	f280 8293 	bge.w	800ff50 <MEMS_runMagCal.constprop.21+0x884>
 800fa2a:	f9bd a11a 	ldrsh.w	sl, [sp, #282]	; 0x11a
 800fa2e:	f51a 4f80 	cmn.w	sl, #16384	; 0x4000
 800fa32:	f2c0 828d 	blt.w	800ff50 <MEMS_runMagCal.constprop.21+0x884>
 800fa36:	f9bd 50dc 	ldrsh.w	r5, [sp, #220]	; 0xdc
 800fa3a:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
 800fa3e:	f280 8287 	bge.w	800ff50 <MEMS_runMagCal.constprop.21+0x884>
 800fa42:	f9bd 911c 	ldrsh.w	r9, [sp, #284]	; 0x11c
 800fa46:	f519 4f80 	cmn.w	r9, #16384	; 0x4000
 800fa4a:	f2c0 8281 	blt.w	800ff50 <MEMS_runMagCal.constprop.21+0x884>
 800fa4e:	ee07 ea90 	vmov	s15, lr
 800fa52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fa56:	ee86 0a27 	vdiv.f32	s0, s12, s15
 800fa5a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800fa5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa62:	eef1 8ac0 	vsqrt.f32	s17, s0
 800fa66:	bf58      	it	pl
 800fa68:	eef0 5a48 	vmovpl.f32	s11, s16
 800fa6c:	f101 814a 	bmi.w	8010d04 <MEMS_runMagCal.constprop.21+0x1638>
 800fa70:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fa74:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800fa78:	1b3c      	subs	r4, r7, r4
 800fa7a:	eba6 060a 	sub.w	r6, r6, sl
 800fa7e:	42b4      	cmp	r4, r6
 800fa80:	4623      	mov	r3, r4
 800fa82:	eba5 0509 	sub.w	r5, r5, r9
 800fa86:	bfb8      	it	lt
 800fa88:	4633      	movlt	r3, r6
 800fa8a:	42ab      	cmp	r3, r5
 800fa8c:	bfb8      	it	lt
 800fa8e:	462b      	movlt	r3, r5
 800fa90:	eddf 6a35 	vldr	s13, [pc, #212]	; 800fb68 <MEMS_runMagCal.constprop.21+0x49c>
 800fa94:	ee07 3a90 	vmov	s15, r3
 800fa98:	ee67 6a26 	vmul.f32	s13, s14, s13
 800fa9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800faa0:	ee28 6aa5 	vmul.f32	s12, s17, s11
 800faa4:	eef4 6ae7 	vcmpe.f32	s13, s15
 800faa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faac:	f100 8250 	bmi.w	800ff50 <MEMS_runMagCal.constprop.21+0x884>
 800fab0:	eddd 6a0f 	vldr	s13, [sp, #60]	; 0x3c
 800fab4:	ed9f 5a2d 	vldr	s10, [pc, #180]	; 800fb6c <MEMS_runMagCal.constprop.21+0x4a0>
 800fab8:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800fabc:	ee66 5aa5 	vmul.f32	s11, s13, s11
 800fac0:	eef4 5ac5 	vcmpe.f32	s11, s10
 800fac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fac8:	f300 8242 	bgt.w	800ff50 <MEMS_runMagCal.constprop.21+0x884>
 800facc:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800fad0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800fad4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fadc:	f301 805b 	bgt.w	8010b96 <MEMS_runMagCal.constprop.21+0x14ca>
 800fae0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800fae4:	ee67 6a26 	vmul.f32	s13, s14, s13
 800fae8:	eef4 7ae6 	vcmpe.f32	s15, s13
 800faec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faf0:	f341 8056 	ble.w	8010ba0 <MEMS_runMagCal.constprop.21+0x14d4>
 800faf4:	ee07 4a90 	vmov	s15, r4
 800faf8:	ee37 7a07 	vadd.f32	s14, s14, s14
 800fafc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fb00:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fb04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb08:	f341 804a 	ble.w	8010ba0 <MEMS_runMagCal.constprop.21+0x14d4>
 800fb0c:	ee07 6a90 	vmov	s15, r6
 800fb10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fb14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fb18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb1c:	f141 8040 	bpl.w	8010ba0 <MEMS_runMagCal.constprop.21+0x14d4>
 800fb20:	ee07 5a90 	vmov	s15, r5
 800fb24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fb28:	2100      	movs	r1, #0
 800fb2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fb2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb32:	bf4c      	ite	mi
 800fb34:	f04f 0a01 	movmi.w	sl, #1
 800fb38:	468a      	movpl	sl, r1
 800fb3a:	2600      	movs	r6, #0
 800fb3c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800fb70 <MEMS_runMagCal.constprop.21+0x4a4>
 800fb40:	eddf 7a0c 	vldr	s15, [pc, #48]	; 800fb74 <MEMS_runMagCal.constprop.21+0x4a8>
 800fb44:	f89b 407c 	ldrb.w	r4, [fp, #124]	; 0x7c
 800fb48:	ee26 0a00 	vmul.f32	s0, s12, s0
 800fb4c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800fb50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb54:	f140 8212 	bpl.w	800ff7c <MEMS_runMagCal.constprop.21+0x8b0>
 800fb58:	2c01      	cmp	r4, #1
 800fb5a:	ed8d 0a10 	vstr	s0, [sp, #64]	; 0x40
 800fb5e:	d928      	bls.n	800fbb2 <MEMS_runMagCal.constprop.21+0x4e6>
 800fb60:	e014      	b.n	800fb8c <MEMS_runMagCal.constprop.21+0x4c0>
 800fb62:	bf00      	nop
 800fb64:	00000000 	.word	0x00000000
 800fb68:	43020000 	.word	0x43020000
 800fb6c:	447a0000 	.word	0x447a0000
 800fb70:	42c80000 	.word	0x42c80000
 800fb74:	477fff00 	.word	0x477fff00
 800fb78:	20001698 	.word	0x20001698
 800fb7c:	ffff8000 	.word	0xffff8000
 800fb80:	427c0000 	.word	0x427c0000
 800fb84:	3f666666 	.word	0x3f666666
 800fb88:	423c0000 	.word	0x423c0000
 800fb8c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800fb90:	edcd 7a00 	vstr	s15, [sp]
 800fb94:	f8bd 3000 	ldrh.w	r3, [sp]
 800fb98:	2bc7      	cmp	r3, #199	; 0xc7
 800fb9a:	f201 8146 	bhi.w	8010e2a <MEMS_runMagCal.constprop.21+0x175e>
 800fb9e:	2400      	movs	r4, #0
 800fba0:	23ff      	movs	r3, #255	; 0xff
 800fba2:	f88b 407c 	strb.w	r4, [fp, #124]	; 0x7c
 800fba6:	f88b 40b0 	strb.w	r4, [fp, #176]	; 0xb0
 800fbaa:	f88b 4064 	strb.w	r4, [fp, #100]	; 0x64
 800fbae:	f88b 30b2 	strb.w	r3, [fp, #178]	; 0xb2
 800fbb2:	2e00      	cmp	r6, #0
 800fbb4:	f040 81d3 	bne.w	800ff5e <MEMS_runMagCal.constprop.21+0x892>
 800fbb8:	f99b 3036 	ldrsb.w	r3, [fp, #54]	; 0x36
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	f2c0 82ca 	blt.w	8010156 <MEMS_runMagCal.constprop.21+0xa8a>
 800fbc2:	f89b 7035 	ldrb.w	r7, [fp, #53]	; 0x35
 800fbc6:	1c5a      	adds	r2, r3, #1
 800fbc8:	fb92 f3f7 	sdiv	r3, r2, r7
 800fbcc:	fb07 2313 	mls	r3, r7, r3, r2
 800fbd0:	b25b      	sxtb	r3, r3
 800fbd2:	4699      	mov	r9, r3
 800fbd4:	f89b 5034 	ldrb.w	r5, [fp, #52]	; 0x34
 800fbd8:	f88b 3036 	strb.w	r3, [fp, #54]	; 0x36
 800fbdc:	3501      	adds	r5, #1
 800fbde:	42bd      	cmp	r5, r7
 800fbe0:	bfa8      	it	ge
 800fbe2:	463d      	movge	r5, r7
 800fbe4:	b2e8      	uxtb	r0, r5
 800fbe6:	9101      	str	r1, [sp, #4]
 800fbe8:	f88b 0034 	strb.w	r0, [fp, #52]	; 0x34
 800fbec:	9000      	str	r0, [sp, #0]
 800fbee:	f009 f9c5 	bl	8018f7c <roundf>
 800fbf2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800fbf6:	eb0b 0349 	add.w	r3, fp, r9, lsl #1
 800fbfa:	ee17 2a90 	vmov	r2, s15
 800fbfe:	871a      	strh	r2, [r3, #56]	; 0x38
 800fc00:	2e00      	cmp	r6, #0
 800fc02:	f040 81ac 	bne.w	800ff5e <MEMS_runMagCal.constprop.21+0x892>
 800fc06:	f8db 3030 	ldr.w	r3, [fp, #48]	; 0x30
 800fc0a:	e89d 0003 	ldmia.w	sp, {r0, r1}
 800fc0e:	b12b      	cbz	r3, 800fc1c <MEMS_runMagCal.constprop.21+0x550>
 800fc10:	9a05      	ldr	r2, [sp, #20]
 800fc12:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 800fc16:	429a      	cmp	r2, r3
 800fc18:	f0c0 8161 	bcc.w	800fede <MEMS_runMagCal.constprop.21+0x812>
 800fc1c:	2900      	cmp	r1, #0
 800fc1e:	f040 815e 	bne.w	800fede <MEMS_runMagCal.constprop.21+0x812>
 800fc22:	1ea3      	subs	r3, r4, #2
 800fc24:	2b01      	cmp	r3, #1
 800fc26:	f240 8707 	bls.w	8010a38 <MEMS_runMagCal.constprop.21+0x136c>
 800fc2a:	eddb 6a05 	vldr	s13, [fp, #20]
 800fc2e:	ed5f 7a2c 	vldr	s15, [pc, #-176]	; 800fb80 <MEMS_runMagCal.constprop.21+0x4b4>
 800fc32:	f8db 30b4 	ldr.w	r3, [fp, #180]	; 0xb4
 800fc36:	f9bb 5012 	ldrsh.w	r5, [fp, #18]
 800fc3a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800fc3c:	9804      	ldr	r0, [sp, #16]
 800fc3e:	ed1f 7a2f 	vldr	s14, [pc, #-188]	; 800fb84 <MEMS_runMagCal.constprop.21+0x4b8>
 800fc42:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800fc46:	eec6 8a26 	vdiv.f32	s17, s12, s13
 800fc4a:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
 800fc4e:	3210      	adds	r2, #16
 800fc50:	fb01 0505 	mla	r5, r1, r5, r0
 800fc54:	42aa      	cmp	r2, r5
 800fc56:	eeb0 8a08 	vmov.f32	s16, #8	; 0x40400000  3.0
 800fc5a:	ee28 8a88 	vmul.f32	s16, s17, s16
 800fc5e:	eeb7 aa08 	vmov.f32	s20, #120	; 0x3fc00000  1.5
 800fc62:	ee68 7a27 	vmul.f32	s15, s16, s15
 800fc66:	ee68 9a08 	vmul.f32	s19, s16, s16
 800fc6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fc6e:	ee69 9a87 	vmul.f32	s19, s19, s14
 800fc72:	edcd 7a00 	vstr	s15, [sp]
 800fc76:	f8bd 9000 	ldrh.w	r9, [sp]
 800fc7a:	ee28 aa0a 	vmul.f32	s20, s16, s20
 800fc7e:	f0c0 867c 	bcc.w	801097a <MEMS_runMagCal.constprop.21+0x12ae>
 800fc82:	f89b 00b0 	ldrb.w	r0, [fp, #176]	; 0xb0
 800fc86:	461d      	mov	r5, r3
 800fc88:	2800      	cmp	r0, #0
 800fc8a:	f000 86cc 	beq.w	8010a26 <MEMS_runMagCal.constprop.21+0x135a>
 800fc8e:	f99b 30b2 	ldrsb.w	r3, [fp, #178]	; 0xb2
 800fc92:	9a04      	ldr	r2, [sp, #16]
 800fc94:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 800fc98:	f9b3 30d0 	ldrsh.w	r3, [r3, #208]	; 0xd0
 800fc9c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800fca0:	3308      	adds	r3, #8
 800fca2:	442b      	add	r3, r5
 800fca4:	4293      	cmp	r3, r2
 800fca6:	f0c0 813c 	bcc.w	800ff22 <MEMS_runMagCal.constprop.21+0x856>
 800fcaa:	f1ba 0f00 	cmp.w	sl, #0
 800fcae:	d104      	bne.n	800fcba <MEMS_runMagCal.constprop.21+0x5ee>
 800fcb0:	f89b 30b0 	ldrb.w	r3, [fp, #176]	; 0xb0
 800fcb4:	2b0a      	cmp	r3, #10
 800fcb6:	f240 86ba 	bls.w	8010a2e <MEMS_runMagCal.constprop.21+0x1362>
 800fcba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	f000 86b6 	beq.w	8010a2e <MEMS_runMagCal.constprop.21+0x1362>
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	461f      	mov	r7, r3
 800fcc6:	9300      	str	r3, [sp, #0]
 800fcc8:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 800fccc:	f8cd a018 	str.w	sl, [sp, #24]
 800fcd0:	e096      	b.n	800fe00 <MEMS_runMagCal.constprop.21+0x734>
 800fcd2:	f9b2 a006 	ldrsh.w	sl, [r2, #6]
 800fcd6:	f89b 50b0 	ldrb.w	r5, [fp, #176]	; 0xb0
 800fcda:	2d00      	cmp	r5, #0
 800fcdc:	f040 8156 	bne.w	800ff8c <MEMS_runMagCal.constprop.21+0x8c0>
 800fce0:	fb94 f1f9 	sdiv	r1, r4, r9
 800fce4:	f04f 0201 	mov.w	r2, #1
 800fce8:	f88b 20b0 	strb.w	r2, [fp, #176]	; 0xb0
 800fcec:	f9bb 0012 	ldrsh.w	r0, [fp, #18]
 800fcf0:	9a04      	ldr	r2, [sp, #16]
 800fcf2:	f88b 50b2 	strb.w	r5, [fp, #178]	; 0xb2
 800fcf6:	fb03 2000 	mla	r0, r3, r0, r2
 800fcfa:	fb09 4311 	mls	r3, r9, r1, r4
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	bfb8      	it	lt
 800fd02:	444b      	addlt	r3, r9
 800fd04:	b21b      	sxth	r3, r3
 800fd06:	ee07 3a90 	vmov	s15, r3
 800fd0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fd0e:	f8cb 00b4 	str.w	r0, [fp, #180]	; 0xb4
 800fd12:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800fd16:	f8ab 50d0 	strh.w	r5, [fp, #208]	; 0xd0
 800fd1a:	f8ab 40d2 	strh.w	r4, [fp, #210]	; 0xd2
 800fd1e:	f8ab 43c8 	strh.w	r4, [fp, #968]	; 0x3c8
 800fd22:	f8ab 60d4 	strh.w	r6, [fp, #212]	; 0xd4
 800fd26:	f8ab 63ca 	strh.w	r6, [fp, #970]	; 0x3ca
 800fd2a:	f8ab a0d6 	strh.w	sl, [fp, #214]	; 0xd6
 800fd2e:	f8ab a3cc 	strh.w	sl, [fp, #972]	; 0x3cc
 800fd32:	f009 f923 	bl	8018f7c <roundf>
 800fd36:	fb96 f3f9 	sdiv	r3, r6, r9
 800fd3a:	fb09 6613 	mls	r6, r9, r3, r6
 800fd3e:	2e00      	cmp	r6, #0
 800fd40:	bfb8      	it	lt
 800fd42:	444e      	addlt	r6, r9
 800fd44:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800fd48:	b236      	sxth	r6, r6
 800fd4a:	edcd 7a00 	vstr	s15, [sp]
 800fd4e:	ee07 6a90 	vmov	s15, r6
 800fd52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fd56:	f89d 4000 	ldrb.w	r4, [sp]
 800fd5a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800fd5e:	f009 f90d 	bl	8018f7c <roundf>
 800fd62:	fb9a f3f9 	sdiv	r3, sl, r9
 800fd66:	fb09 a213 	mls	r2, r9, r3, sl
 800fd6a:	2a00      	cmp	r2, #0
 800fd6c:	bfb8      	it	lt
 800fd6e:	444a      	addlt	r2, r9
 800fd70:	b212      	sxth	r2, r2
 800fd72:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800fd76:	edcd 7a00 	vstr	s15, [sp]
 800fd7a:	ee07 2a90 	vmov	s15, r2
 800fd7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fd82:	f89d 5000 	ldrb.w	r5, [sp]
 800fd86:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800fd8a:	f009 f8f7 	bl	8018f7c <roundf>
 800fd8e:	2c1f      	cmp	r4, #31
 800fd90:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800fd94:	edcd 7a00 	vstr	s15, [sp]
 800fd98:	f89d 3000 	ldrb.w	r3, [sp]
 800fd9c:	f240 81ea 	bls.w	8010174 <MEMS_runMagCal.constprop.21+0xaa8>
 800fda0:	f8db 10b8 	ldr.w	r1, [fp, #184]	; 0xb8
 800fda4:	f1a4 0220 	sub.w	r2, r4, #32
 800fda8:	2001      	movs	r0, #1
 800fdaa:	fa00 f202 	lsl.w	r2, r0, r2
 800fdae:	ea22 0201 	bic.w	r2, r2, r1
 800fdb2:	404a      	eors	r2, r1
 800fdb4:	f8cb 20b8 	str.w	r2, [fp, #184]	; 0xb8
 800fdb8:	2d1f      	cmp	r5, #31
 800fdba:	f240 81d1 	bls.w	8010160 <MEMS_runMagCal.constprop.21+0xa94>
 800fdbe:	f8db 10c0 	ldr.w	r1, [fp, #192]	; 0xc0
 800fdc2:	f1a5 0220 	sub.w	r2, r5, #32
 800fdc6:	2001      	movs	r0, #1
 800fdc8:	fa00 f202 	lsl.w	r2, r0, r2
 800fdcc:	ea22 0201 	bic.w	r2, r2, r1
 800fdd0:	404a      	eors	r2, r1
 800fdd2:	f8cb 20c0 	str.w	r2, [fp, #192]	; 0xc0
 800fdd6:	2b1f      	cmp	r3, #31
 800fdd8:	f200 81d6 	bhi.w	8010188 <MEMS_runMagCal.constprop.21+0xabc>
 800fddc:	f8db 20c8 	ldr.w	r2, [fp, #200]	; 0xc8
 800fde0:	2101      	movs	r1, #1
 800fde2:	fa01 f303 	lsl.w	r3, r1, r3
 800fde6:	ea23 0302 	bic.w	r3, r3, r2
 800fdea:	4053      	eors	r3, r2
 800fdec:	f8cb 30c8 	str.w	r3, [fp, #200]	; 0xc8
 800fdf0:	9100      	str	r1, [sp, #0]
 800fdf2:	3701      	adds	r7, #1
 800fdf4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fdf6:	b23f      	sxth	r7, r7
 800fdf8:	4297      	cmp	r7, r2
 800fdfa:	463b      	mov	r3, r7
 800fdfc:	f280 81d1 	bge.w	80101a2 <MEMS_runMagCal.constprop.21+0xad6>
 800fe00:	f818 1037 	ldrb.w	r1, [r8, r7, lsl #3]
 800fe04:	eb08 02c7 	add.w	r2, r8, r7, lsl #3
 800fe08:	2900      	cmp	r1, #0
 800fe0a:	d0f2      	beq.n	800fdf2 <MEMS_runMagCal.constprop.21+0x726>
 800fe0c:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 800fe10:	f9b2 6004 	ldrsh.w	r6, [r2, #4]
 800fe14:	ee07 4a90 	vmov	s15, r4
 800fe18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fe1c:	ee28 7a89 	vmul.f32	s14, s17, s18
 800fe20:	eef0 7ae7 	vabs.f32	s15, s15
 800fe24:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fe28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe2c:	f57f af51 	bpl.w	800fcd2 <MEMS_runMagCal.constprop.21+0x606>
 800fe30:	ee07 6a90 	vmov	s15, r6
 800fe34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fe38:	f9b2 a006 	ldrsh.w	sl, [r2, #6]
 800fe3c:	eef0 7ae7 	vabs.f32	s15, s15
 800fe40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fe44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe48:	f77f af45 	ble.w	800fcd6 <MEMS_runMagCal.constprop.21+0x60a>
 800fe4c:	ee07 aa90 	vmov	s15, sl
 800fe50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fe54:	eef0 7ae7 	vabs.f32	s15, s15
 800fe58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fe5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe60:	dcc7      	bgt.n	800fdf2 <MEMS_runMagCal.constprop.21+0x726>
 800fe62:	e738      	b.n	800fcd6 <MEMS_runMagCal.constprop.21+0x60a>
 800fe64:	ed9b 0a05 	vldr	s0, [fp, #20]
 800fe68:	4285      	cmp	r5, r0
 800fe6a:	bf28      	it	cs
 800fe6c:	4605      	movcs	r5, r0
 800fe6e:	4631      	mov	r1, r6
 800fe70:	f10d 00aa 	add.w	r0, sp, #170	; 0xaa
 800fe74:	4623      	mov	r3, r4
 800fe76:	aa10      	add	r2, sp, #64	; 0x40
 800fe78:	f88b 5034 	strb.w	r5, [fp, #52]	; 0x34
 800fe7c:	f7fe fbde 	bl	800e63c <getMagStats.constprop.35>
 800fe80:	ed1f 7abf 	vldr	s14, [pc, #-764]	; 800fb88 <MEMS_runMagCal.constprop.21+0x4bc>
 800fe84:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 800fe88:	edd4 6a00 	vldr	s13, [r4]
 800fe8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fe90:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800fe94:	eef0 7ae7 	vabs.f32	s15, s15
 800fe98:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fe9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fea0:	d505      	bpl.n	800feae <MEMS_runMagCal.constprop.21+0x7e2>
 800fea2:	eef4 6ac7 	vcmpe.f32	s13, s14
 800fea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feaa:	f101 8670 	bmi.w	8011b8e <MEMS_runMagCal.constprop.21+0x24c2>
 800feae:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800feb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800feb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feba:	f141 866b 	bpl.w	8011b94 <MEMS_runMagCal.constprop.21+0x24c8>
 800febe:	eef4 6ac7 	vcmpe.f32	s13, s14
 800fec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fec6:	bf4c      	ite	mi
 800fec8:	2302      	movmi	r3, #2
 800feca:	2301      	movpl	r3, #1
 800fecc:	f89d 20a8 	ldrb.w	r2, [sp, #168]	; 0xa8
 800fed0:	f88b 307c 	strb.w	r3, [fp, #124]	; 0x7c
 800fed4:	2ac8      	cmp	r2, #200	; 0xc8
 800fed6:	d902      	bls.n	800fede <MEMS_runMagCal.constprop.21+0x812>
 800fed8:	2302      	movs	r3, #2
 800feda:	f88b 307c 	strb.w	r3, [fp, #124]	; 0x7c
 800fede:	f20d 5d6c 	addw	sp, sp, #1388	; 0x56c
 800fee2:	ecbd 8b10 	vpop	{d8-d15}
 800fee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800feea:	1e72      	subs	r2, r6, #1
 800feec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fef0:	920d      	str	r2, [sp, #52]	; 0x34
 800fef2:	fb02 fe0e 	mul.w	lr, r2, lr
 800fef6:	eba3 030e 	sub.w	r3, r3, lr
 800fefa:	9304      	str	r3, [sp, #16]
 800fefc:	960c      	str	r6, [sp, #48]	; 0x30
 800fefe:	4637      	mov	r7, r6
 800ff00:	b166      	cbz	r6, 800ff1c <MEMS_runMagCal.constprop.21+0x850>
 800ff02:	2500      	movs	r5, #0
 800ff04:	e401      	b.n	800f70a <MEMS_runMagCal.constprop.21+0x3e>
 800ff06:	f8db 20b4 	ldr.w	r2, [fp, #180]	; 0xb4
 800ff0a:	4291      	cmp	r1, r2
 800ff0c:	f4ff ac4f 	bcc.w	800f7ae <MEMS_runMagCal.constprop.21+0xe2>
 800ff10:	f89b 30b0 	ldrb.w	r3, [fp, #176]	; 0xb0
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	f47f ac66 	bne.w	800f7e6 <MEMS_runMagCal.constprop.21+0x11a>
 800ff1a:	e454      	b.n	800f7c6 <MEMS_runMagCal.constprop.21+0xfa>
 800ff1c:	f8ab 6018 	strh.w	r6, [fp, #24]
 800ff20:	e430      	b.n	800f784 <MEMS_runMagCal.constprop.21+0xb8>
 800ff22:	2200      	movs	r2, #0
 800ff24:	23ff      	movs	r3, #255	; 0xff
 800ff26:	eeb0 0a48 	vmov.f32	s0, s16
 800ff2a:	4648      	mov	r0, r9
 800ff2c:	f88b 20b0 	strb.w	r2, [fp, #176]	; 0xb0
 800ff30:	f88b 30b2 	strb.w	r3, [fp, #178]	; 0xb2
 800ff34:	f7ff f882 	bl	800f03c <MEMS_updateMagBufferIndex.constprop.33>
 800ff38:	e6b7      	b.n	800fcaa <MEMS_runMagCal.constprop.21+0x5de>
 800ff3a:	f8ad c0d8 	strh.w	ip, [sp, #216]	; 0xd8
 800ff3e:	f1be 0f00 	cmp.w	lr, #0
 800ff42:	d00a      	beq.n	800ff5a <MEMS_runMagCal.constprop.21+0x88e>
 800ff44:	fa0f f78c 	sxth.w	r7, ip
 800ff48:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
 800ff4c:	f6ff ad61 	blt.w	800fa12 <MEMS_runMagCal.constprop.21+0x346>
 800ff50:	2602      	movs	r6, #2
 800ff52:	f04f 0a00 	mov.w	sl, #0
 800ff56:	4651      	mov	r1, sl
 800ff58:	e5f0      	b.n	800fb3c <MEMS_runMagCal.constprop.21+0x470>
 800ff5a:	4676      	mov	r6, lr
 800ff5c:	e7f9      	b.n	800ff52 <MEMS_runMagCal.constprop.21+0x886>
 800ff5e:	9905      	ldr	r1, [sp, #20]
 800ff60:	f8cb 1030 	str.w	r1, [fp, #48]	; 0x30
 800ff64:	2200      	movs	r2, #0
 800ff66:	23ff      	movs	r3, #255	; 0xff
 800ff68:	f88b 20b0 	strb.w	r2, [fp, #176]	; 0xb0
 800ff6c:	f88b 30b2 	strb.w	r3, [fp, #178]	; 0xb2
 800ff70:	f20d 5d6c 	addw	sp, sp, #1388	; 0x56c
 800ff74:	ecbd 8b10 	vpop	{d8-d15}
 800ff78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff7c:	2c01      	cmp	r4, #1
 800ff7e:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 800ff82:	eeb0 0a67 	vmov.f32	s0, s15
 800ff86:	f63f ae0a 	bhi.w	800fb9e <MEMS_runMagCal.constprop.21+0x4d2>
 800ff8a:	e612      	b.n	800fbb2 <MEMS_runMagCal.constprop.21+0x4e6>
 800ff8c:	f9bb 03ca 	ldrsh.w	r0, [fp, #970]	; 0x3ca
 800ff90:	f9bb 13c8 	ldrsh.w	r1, [fp, #968]	; 0x3c8
 800ff94:	f9bb 33cc 	ldrsh.w	r3, [fp, #972]	; 0x3cc
 800ff98:	1b80      	subs	r0, r0, r6
 800ff9a:	fb00 f000 	mul.w	r0, r0, r0
 800ff9e:	1b09      	subs	r1, r1, r4
 800ffa0:	fb01 0101 	mla	r1, r1, r1, r0
 800ffa4:	eba3 030a 	sub.w	r3, r3, sl
 800ffa8:	fb03 1303 	mla	r3, r3, r3, r1
 800ffac:	ee07 3a90 	vmov	s15, r3
 800ffb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ffb4:	eef4 9ae7 	vcmpe.f32	s19, s15
 800ffb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffbc:	f73f af19 	bgt.w	800fdf2 <MEMS_runMagCal.constprop.21+0x726>
 800ffc0:	fb94 f3f9 	sdiv	r3, r4, r9
 800ffc4:	fb09 4313 	mls	r3, r9, r3, r4
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	bfb8      	it	lt
 800ffcc:	444b      	addlt	r3, r9
 800ffce:	b21b      	sxth	r3, r3
 800ffd0:	ee07 3a90 	vmov	s15, r3
 800ffd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ffd8:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800ffdc:	f008 ffce 	bl	8018f7c <roundf>
 800ffe0:	fb96 f3f9 	sdiv	r3, r6, r9
 800ffe4:	fb09 6313 	mls	r3, r9, r3, r6
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	bfb8      	it	lt
 800ffec:	444b      	addlt	r3, r9
 800ffee:	b21b      	sxth	r3, r3
 800fff0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800fff4:	edcd 7a01 	vstr	s15, [sp, #4]
 800fff8:	ee07 3a90 	vmov	s15, r3
 800fffc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010000:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010004:	9202      	str	r2, [sp, #8]
 8010006:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801000a:	f008 ffb7 	bl	8018f7c <roundf>
 801000e:	fb9a f3f9 	sdiv	r3, sl, r9
 8010012:	fb09 a313 	mls	r3, r9, r3, sl
 8010016:	2b00      	cmp	r3, #0
 8010018:	bfb8      	it	lt
 801001a:	444b      	addlt	r3, r9
 801001c:	b21b      	sxth	r3, r3
 801001e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8010022:	edcd 7a01 	vstr	s15, [sp, #4]
 8010026:	ee07 3a90 	vmov	s15, r3
 801002a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801002e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010032:	9203      	str	r2, [sp, #12]
 8010034:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8010038:	f008 ffa0 	bl	8018f7c <roundf>
 801003c:	f8db 30b8 	ldr.w	r3, [fp, #184]	; 0xb8
 8010040:	f8db 10bc 	ldr.w	r1, [fp, #188]	; 0xbc
 8010044:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8010048:	edcd 7a01 	vstr	s15, [sp, #4]
 801004c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010050:	9201      	str	r2, [sp, #4]
 8010052:	9a02      	ldr	r2, [sp, #8]
 8010054:	2a1f      	cmp	r2, #31
 8010056:	f240 852e 	bls.w	8010ab6 <MEMS_runMagCal.constprop.21+0x13ea>
 801005a:	f1a2 0e20 	sub.w	lr, r2, #32
 801005e:	2201      	movs	r2, #1
 8010060:	fa02 fe0e 	lsl.w	lr, r2, lr
 8010064:	ea0e 0e03 	and.w	lr, lr, r3
 8010068:	9a03      	ldr	r2, [sp, #12]
 801006a:	f8db 30c0 	ldr.w	r3, [fp, #192]	; 0xc0
 801006e:	f8db 10c4 	ldr.w	r1, [fp, #196]	; 0xc4
 8010072:	2a1f      	cmp	r2, #31
 8010074:	f240 852e 	bls.w	8010ad4 <MEMS_runMagCal.constprop.21+0x1408>
 8010078:	f1a2 0120 	sub.w	r1, r2, #32
 801007c:	2201      	movs	r2, #1
 801007e:	fa02 f101 	lsl.w	r1, r2, r1
 8010082:	4019      	ands	r1, r3
 8010084:	9a01      	ldr	r2, [sp, #4]
 8010086:	f8db 30cc 	ldr.w	r3, [fp, #204]	; 0xcc
 801008a:	f8db 00c8 	ldr.w	r0, [fp, #200]	; 0xc8
 801008e:	2a1f      	cmp	r2, #31
 8010090:	f240 8519 	bls.w	8010ac6 <MEMS_runMagCal.constprop.21+0x13fa>
 8010094:	f1a2 0020 	sub.w	r0, r2, #32
 8010098:	2201      	movs	r2, #1
 801009a:	fa02 f000 	lsl.w	r0, r2, r0
 801009e:	4003      	ands	r3, r0
 80100a0:	f1be 0f00 	cmp.w	lr, #0
 80100a4:	f040 851d 	bne.w	8010ae2 <MEMS_runMagCal.constprop.21+0x1416>
 80100a8:	2900      	cmp	r1, #0
 80100aa:	f040 851e 	bne.w	8010aea <MEMS_runMagCal.constprop.21+0x141e>
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	f040 851b 	bne.w	8010aea <MEMS_runMagCal.constprop.21+0x141e>
 80100b4:	f89b 00b1 	ldrb.w	r0, [fp, #177]	; 0xb1
 80100b8:	f99b 10b2 	ldrsb.w	r1, [fp, #178]	; 0xb2
 80100bc:	4602      	mov	r2, r0
 80100be:	3101      	adds	r1, #1
 80100c0:	3501      	adds	r5, #1
 80100c2:	4295      	cmp	r5, r2
 80100c4:	fb91 f3f2 	sdiv	r3, r1, r2
 80100c8:	fb02 1113 	mls	r1, r2, r3, r1
 80100cc:	bfa8      	it	ge
 80100ce:	4615      	movge	r5, r2
 80100d0:	b249      	sxtb	r1, r1
 80100d2:	f8db 30b4 	ldr.w	r3, [fp, #180]	; 0xb4
 80100d6:	9a04      	ldr	r2, [sp, #16]
 80100d8:	f9bb e012 	ldrsh.w	lr, [fp, #18]
 80100dc:	f8ab 43c8 	strh.w	r4, [fp, #968]	; 0x3c8
 80100e0:	f101 0c04 	add.w	ip, r1, #4
 80100e4:	eb0b 0ccc 	add.w	ip, fp, ip, lsl #3
 80100e8:	b2ed      	uxtb	r5, r5
 80100ea:	1ad3      	subs	r3, r2, r3
 80100ec:	fb0e 3307 	mla	r3, lr, r7, r3
 80100f0:	4285      	cmp	r5, r0
 80100f2:	f88b 50b0 	strb.w	r5, [fp, #176]	; 0xb0
 80100f6:	f8ab 63ca 	strh.w	r6, [fp, #970]	; 0x3ca
 80100fa:	f8ab a3cc 	strh.w	sl, [fp, #972]	; 0x3cc
 80100fe:	f88b 10b2 	strb.w	r1, [fp, #178]	; 0xb2
 8010102:	f8ac 40b2 	strh.w	r4, [ip, #178]	; 0xb2
 8010106:	f8ac 60b4 	strh.w	r6, [ip, #180]	; 0xb4
 801010a:	f8ac a0b6 	strh.w	sl, [ip, #182]	; 0xb6
 801010e:	f8ac 30b0 	strh.w	r3, [ip, #176]	; 0xb0
 8010112:	f000 856f 	beq.w	8010bf4 <MEMS_runMagCal.constprop.21+0x1528>
 8010116:	9b02      	ldr	r3, [sp, #8]
 8010118:	2b1f      	cmp	r3, #31
 801011a:	f240 855f 	bls.w	8010bdc <MEMS_runMagCal.constprop.21+0x1510>
 801011e:	f8db 20b8 	ldr.w	r2, [fp, #184]	; 0xb8
 8010122:	3b20      	subs	r3, #32
 8010124:	2101      	movs	r1, #1
 8010126:	fa01 f303 	lsl.w	r3, r1, r3
 801012a:	ea23 0302 	bic.w	r3, r3, r2
 801012e:	4053      	eors	r3, r2
 8010130:	f8cb 30b8 	str.w	r3, [fp, #184]	; 0xb8
 8010134:	9b03      	ldr	r3, [sp, #12]
 8010136:	2b1f      	cmp	r3, #31
 8010138:	f240 853e 	bls.w	8010bb8 <MEMS_runMagCal.constprop.21+0x14ec>
 801013c:	f8db 20c0 	ldr.w	r2, [fp, #192]	; 0xc0
 8010140:	3b20      	subs	r3, #32
 8010142:	2101      	movs	r1, #1
 8010144:	fa01 f303 	lsl.w	r3, r1, r3
 8010148:	ea23 0302 	bic.w	r3, r3, r2
 801014c:	4053      	eors	r3, r2
 801014e:	f8cb 30c0 	str.w	r3, [fp, #192]	; 0xc0
 8010152:	9b01      	ldr	r3, [sp, #4]
 8010154:	e63f      	b.n	800fdd6 <MEMS_runMagCal.constprop.21+0x70a>
 8010156:	2300      	movs	r3, #0
 8010158:	4699      	mov	r9, r3
 801015a:	f89b 7035 	ldrb.w	r7, [fp, #53]	; 0x35
 801015e:	e539      	b.n	800fbd4 <MEMS_runMagCal.constprop.21+0x508>
 8010160:	f8db 10c4 	ldr.w	r1, [fp, #196]	; 0xc4
 8010164:	2201      	movs	r2, #1
 8010166:	40aa      	lsls	r2, r5
 8010168:	ea22 0201 	bic.w	r2, r2, r1
 801016c:	404a      	eors	r2, r1
 801016e:	f8cb 20c4 	str.w	r2, [fp, #196]	; 0xc4
 8010172:	e630      	b.n	800fdd6 <MEMS_runMagCal.constprop.21+0x70a>
 8010174:	f8db 10bc 	ldr.w	r1, [fp, #188]	; 0xbc
 8010178:	2201      	movs	r2, #1
 801017a:	40a2      	lsls	r2, r4
 801017c:	ea22 0201 	bic.w	r2, r2, r1
 8010180:	404a      	eors	r2, r1
 8010182:	f8cb 20bc 	str.w	r2, [fp, #188]	; 0xbc
 8010186:	e617      	b.n	800fdb8 <MEMS_runMagCal.constprop.21+0x6ec>
 8010188:	f8db 20cc 	ldr.w	r2, [fp, #204]	; 0xcc
 801018c:	2101      	movs	r1, #1
 801018e:	3b20      	subs	r3, #32
 8010190:	fa01 f303 	lsl.w	r3, r1, r3
 8010194:	ea23 0302 	bic.w	r3, r3, r2
 8010198:	4053      	eors	r3, r2
 801019a:	f8cb 30cc 	str.w	r3, [fp, #204]	; 0xcc
 801019e:	9100      	str	r1, [sp, #0]
 80101a0:	e627      	b.n	800fdf2 <MEMS_runMagCal.constprop.21+0x726>
 80101a2:	f8dd a018 	ldr.w	sl, [sp, #24]
 80101a6:	9a00      	ldr	r2, [sp, #0]
 80101a8:	f89b 3024 	ldrb.w	r3, [fp, #36]	; 0x24
 80101ac:	431a      	orrs	r2, r3
 80101ae:	f88b 2024 	strb.w	r2, [fp, #36]	; 0x24
 80101b2:	2a00      	cmp	r2, #0
 80101b4:	f43f ae93 	beq.w	800fede <MEMS_runMagCal.constprop.21+0x812>
 80101b8:	f89b 30b0 	ldrb.w	r3, [fp, #176]	; 0xb0
 80101bc:	9306      	str	r3, [sp, #24]
 80101be:	2b19      	cmp	r3, #25
 80101c0:	f67f ae8d 	bls.w	800fede <MEMS_runMagCal.constprop.21+0x812>
 80101c4:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
 80101c8:	9307      	str	r3, [sp, #28]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	f000 84ed 	beq.w	8010baa <MEMS_runMagCal.constprop.21+0x14de>
 80101d0:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	f000 84e8 	beq.w	8010baa <MEMS_runMagCal.constprop.21+0x14de>
 80101da:	eddd 7a05 	vldr	s15, [sp, #20]
 80101de:	ed9f 7ac8 	vldr	s14, [pc, #800]	; 8010500 <MEMS_runMagCal.constprop.21+0xe34>
 80101e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80101e6:	ee06 3a90 	vmov	s13, r3
 80101ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80101ee:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80101f2:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
 80101f6:	ee37 7a66 	vsub.f32	s14, s14, s13
 80101fa:	eeb4 7ac6 	vcmpe.f32	s14, s12
 80101fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010202:	f200 84d2 	bhi.w	8010baa <MEMS_runMagCal.constprop.21+0x14de>
 8010206:	f1ba 0f00 	cmp.w	sl, #0
 801020a:	f43f ae68 	beq.w	800fede <MEMS_runMagCal.constprop.21+0x812>
 801020e:	ed9f 7abc 	vldr	s14, [pc, #752]	; 8010500 <MEMS_runMagCal.constprop.21+0xe34>
 8010212:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010216:	ed9d 7a07 	vldr	s14, [sp, #28]
 801021a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801021e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8010222:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010226:	eef4 7ae6 	vcmpe.f32	s15, s13
 801022a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801022e:	bf4c      	ite	mi
 8010230:	2301      	movmi	r3, #1
 8010232:	2300      	movpl	r3, #0
 8010234:	9308      	str	r3, [sp, #32]
 8010236:	f8db 20c4 	ldr.w	r2, [fp, #196]	; 0xc4
 801023a:	9203      	str	r2, [sp, #12]
 801023c:	f8db 20c8 	ldr.w	r2, [fp, #200]	; 0xc8
 8010240:	9202      	str	r2, [sp, #8]
 8010242:	f8db 20c0 	ldr.w	r2, [fp, #192]	; 0xc0
 8010246:	9204      	str	r2, [sp, #16]
 8010248:	2300      	movs	r3, #0
 801024a:	f8db 20cc 	ldr.w	r2, [fp, #204]	; 0xcc
 801024e:	eddb 8a05 	vldr	s17, [fp, #20]
 8010252:	f8db 90b8 	ldr.w	r9, [fp, #184]	; 0xb8
 8010256:	f8db 80bc 	ldr.w	r8, [fp, #188]	; 0xbc
 801025a:	9201      	str	r2, [sp, #4]
 801025c:	4619      	mov	r1, r3
 801025e:	9329      	str	r3, [sp, #164]	; 0xa4
 8010260:	461d      	mov	r5, r3
 8010262:	469e      	mov	lr, r3
 8010264:	932a      	str	r3, [sp, #168]	; 0xa8
 8010266:	932b      	str	r3, [sp, #172]	; 0xac
 8010268:	932c      	str	r3, [sp, #176]	; 0xb0
 801026a:	932d      	str	r3, [sp, #180]	; 0xb4
 801026c:	f04f 0c01 	mov.w	ip, #1
 8010270:	469a      	mov	sl, r3
 8010272:	f1ae 0320 	sub.w	r3, lr, #32
 8010276:	9a04      	ldr	r2, [sp, #16]
 8010278:	9f03      	ldr	r7, [sp, #12]
 801027a:	fa0c f40e 	lsl.w	r4, ip, lr
 801027e:	fa0c f303 	lsl.w	r3, ip, r3
 8010282:	ea03 0002 	and.w	r0, r3, r2
 8010286:	ea04 0208 	and.w	r2, r4, r8
 801028a:	9200      	str	r2, [sp, #0]
 801028c:	9a01      	ldr	r2, [sp, #4]
 801028e:	ea03 0609 	and.w	r6, r3, r9
 8010292:	4013      	ands	r3, r2
 8010294:	9a00      	ldr	r2, [sp, #0]
 8010296:	4027      	ands	r7, r4
 8010298:	2e00      	cmp	r6, #0
 801029a:	bf0c      	ite	eq
 801029c:	4656      	moveq	r6, sl
 801029e:	f10a 0601 	addne.w	r6, sl, #1
 80102a2:	2800      	cmp	r0, #0
 80102a4:	bf0c      	ite	eq
 80102a6:	4628      	moveq	r0, r5
 80102a8:	1c68      	addne	r0, r5, #1
 80102aa:	2a00      	cmp	r2, #0
 80102ac:	bf0c      	ite	eq
 80102ae:	4652      	moveq	r2, sl
 80102b0:	f10a 0201 	addne.w	r2, sl, #1
 80102b4:	2f00      	cmp	r7, #0
 80102b6:	bf18      	it	ne
 80102b8:	3501      	addne	r5, #1
 80102ba:	fa5f fa8e 	uxtb.w	sl, lr
 80102be:	9f02      	ldr	r7, [sp, #8]
 80102c0:	f1ba 0f1f 	cmp.w	sl, #31
 80102c4:	ea04 0407 	and.w	r4, r4, r7
 80102c8:	b2f6      	uxtb	r6, r6
 80102ca:	bf88      	it	hi
 80102cc:	461c      	movhi	r4, r3
 80102ce:	b2c0      	uxtb	r0, r0
 80102d0:	b2d2      	uxtb	r2, r2
 80102d2:	f10e 0e01 	add.w	lr, lr, #1
 80102d6:	bf94      	ite	ls
 80102d8:	4692      	movls	sl, r2
 80102da:	46b2      	movhi	sl, r6
 80102dc:	b2ed      	uxtb	r5, r5
 80102de:	bf88      	it	hi
 80102e0:	4605      	movhi	r5, r0
 80102e2:	2c00      	cmp	r4, #0
 80102e4:	bf0c      	ite	eq
 80102e6:	460c      	moveq	r4, r1
 80102e8:	1c4c      	addne	r4, r1, #1
 80102ea:	f1be 0f40 	cmp.w	lr, #64	; 0x40
 80102ee:	b2e1      	uxtb	r1, r4
 80102f0:	d1bf      	bne.n	8010272 <MEMS_runMagCal.constprop.21+0xba6>
 80102f2:	4652      	mov	r2, sl
 80102f4:	2a05      	cmp	r2, #5
 80102f6:	f240 833b 	bls.w	8010970 <MEMS_runMagCal.constprop.21+0x12a4>
 80102fa:	2d05      	cmp	r5, #5
 80102fc:	f240 8338 	bls.w	8010970 <MEMS_runMagCal.constprop.21+0x12a4>
 8010300:	2905      	cmp	r1, #5
 8010302:	f240 8335 	bls.w	8010970 <MEMS_runMagCal.constprop.21+0x12a4>
 8010306:	f99b 30b2 	ldrsb.w	r3, [fp, #178]	; 0xb2
 801030a:	f89b 40b1 	ldrb.w	r4, [fp, #177]	; 0xb1
 801030e:	9300      	str	r3, [sp, #0]
 8010310:	9b06      	ldr	r3, [sp, #24]
 8010312:	42a3      	cmp	r3, r4
 8010314:	f000 855a 	beq.w	8010dcc <MEMS_runMagCal.constprop.21+0x1700>
 8010318:	9b00      	ldr	r3, [sp, #0]
 801031a:	1c5d      	adds	r5, r3, #1
 801031c:	9b06      	ldr	r3, [sp, #24]
 801031e:	1aea      	subs	r2, r5, r3
 8010320:	fb92 f3f4 	sdiv	r3, r2, r4
 8010324:	fb04 2313 	mls	r3, r4, r3, r2
 8010328:	b219      	sxth	r1, r3
 801032a:	2900      	cmp	r1, #0
 801032c:	bfb8      	it	lt
 801032e:	191b      	addlt	r3, r3, r4
 8010330:	46a0      	mov	r8, r4
 8010332:	bfb8      	it	lt
 8010334:	b219      	sxthlt	r1, r3
 8010336:	f101 0315 	add.w	r3, r1, #21
 801033a:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801033e:	2200      	movs	r2, #0
 8010340:	f9b3 602a 	ldrsh.w	r6, [r3, #42]	; 0x2a
 8010344:	f9b3 702c 	ldrsh.w	r7, [r3, #44]	; 0x2c
 8010348:	f9b3 002e 	ldrsh.w	r0, [r3, #46]	; 0x2e
 801034c:	f8ad 6050 	strh.w	r6, [sp, #80]	; 0x50
 8010350:	f8ad 6058 	strh.w	r6, [sp, #88]	; 0x58
 8010354:	46b1      	mov	r9, r6
 8010356:	f8ad 7052 	strh.w	r7, [sp, #82]	; 0x52
 801035a:	f8ad 705a 	strh.w	r7, [sp, #90]	; 0x5a
 801035e:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 8010362:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 8010366:	900a      	str	r0, [sp, #40]	; 0x28
 8010368:	9001      	str	r0, [sp, #4]
 801036a:	46ba      	mov	sl, r7
 801036c:	9202      	str	r2, [sp, #8]
 801036e:	9203      	str	r2, [sp, #12]
 8010370:	9204      	str	r2, [sp, #16]
 8010372:	9209      	str	r2, [sp, #36]	; 0x24
 8010374:	920b      	str	r2, [sp, #44]	; 0x2c
 8010376:	920c      	str	r2, [sp, #48]	; 0x30
 8010378:	910d      	str	r1, [sp, #52]	; 0x34
 801037a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801037c:	eb03 0e02 	add.w	lr, r3, r2
 8010380:	fb9e f3f8 	sdiv	r3, lr, r8
 8010384:	fb08 e313 	mls	r3, r8, r3, lr
 8010388:	b2db      	uxtb	r3, r3
 801038a:	3315      	adds	r3, #21
 801038c:	eb0b 0ec3 	add.w	lr, fp, r3, lsl #3
 8010390:	f9be e02a 	ldrsh.w	lr, [lr, #42]	; 0x2a
 8010394:	45b6      	cmp	lr, r6
 8010396:	dd02      	ble.n	801039e <MEMS_runMagCal.constprop.21+0xcd2>
 8010398:	2101      	movs	r1, #1
 801039a:	4676      	mov	r6, lr
 801039c:	9102      	str	r1, [sp, #8]
 801039e:	eb0b 0cc3 	add.w	ip, fp, r3, lsl #3
 80103a2:	f9bc c02c 	ldrsh.w	ip, [ip, #44]	; 0x2c
 80103a6:	45bc      	cmp	ip, r7
 80103a8:	dd02      	ble.n	80103b0 <MEMS_runMagCal.constprop.21+0xce4>
 80103aa:	2101      	movs	r1, #1
 80103ac:	4667      	mov	r7, ip
 80103ae:	9104      	str	r1, [sp, #16]
 80103b0:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 80103b4:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80103b8:	4283      	cmp	r3, r0
 80103ba:	dd02      	ble.n	80103c2 <MEMS_runMagCal.constprop.21+0xcf6>
 80103bc:	2101      	movs	r1, #1
 80103be:	4618      	mov	r0, r3
 80103c0:	9103      	str	r1, [sp, #12]
 80103c2:	45ce      	cmp	lr, r9
 80103c4:	bfba      	itte	lt
 80103c6:	2101      	movlt	r1, #1
 80103c8:	910b      	strlt	r1, [sp, #44]	; 0x2c
 80103ca:	46ce      	movge	lr, r9
 80103cc:	45d4      	cmp	ip, sl
 80103ce:	bfbc      	itt	lt
 80103d0:	2101      	movlt	r1, #1
 80103d2:	910c      	strlt	r1, [sp, #48]	; 0x30
 80103d4:	9901      	ldr	r1, [sp, #4]
 80103d6:	bfa8      	it	ge
 80103d8:	46d4      	movge	ip, sl
 80103da:	428b      	cmp	r3, r1
 80103dc:	da03      	bge.n	80103e6 <MEMS_runMagCal.constprop.21+0xd1a>
 80103de:	930a      	str	r3, [sp, #40]	; 0x28
 80103e0:	9301      	str	r3, [sp, #4]
 80103e2:	2301      	movs	r3, #1
 80103e4:	9309      	str	r3, [sp, #36]	; 0x24
 80103e6:	3201      	adds	r2, #1
 80103e8:	9906      	ldr	r1, [sp, #24]
 80103ea:	b2d3      	uxtb	r3, r2
 80103ec:	4299      	cmp	r1, r3
 80103ee:	46f1      	mov	r9, lr
 80103f0:	46e2      	mov	sl, ip
 80103f2:	d8c2      	bhi.n	801037a <MEMS_runMagCal.constprop.21+0xcae>
 80103f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	f040 84e4 	bne.w	8010dc4 <MEMS_runMagCal.constprop.21+0x16f8>
 80103fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80103fe:	b10b      	cbz	r3, 8010404 <MEMS_runMagCal.constprop.21+0xd38>
 8010400:	f8ad e058 	strh.w	lr, [sp, #88]	; 0x58
 8010404:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010406:	b11b      	cbz	r3, 8010410 <MEMS_runMagCal.constprop.21+0xd44>
 8010408:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801040c:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
 8010410:	9b04      	ldr	r3, [sp, #16]
 8010412:	b10b      	cbz	r3, 8010418 <MEMS_runMagCal.constprop.21+0xd4c>
 8010414:	f8ad 7052 	strh.w	r7, [sp, #82]	; 0x52
 8010418:	9b03      	ldr	r3, [sp, #12]
 801041a:	b10b      	cbz	r3, 8010420 <MEMS_runMagCal.constprop.21+0xd54>
 801041c:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 8010420:	9b02      	ldr	r3, [sp, #8]
 8010422:	b10b      	cbz	r3, 8010428 <MEMS_runMagCal.constprop.21+0xd5c>
 8010424:	f8ad 6050 	strh.w	r6, [sp, #80]	; 0x50
 8010428:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801042c:	eec7 9aa8 	vdiv.f32	s19, s15, s17
 8010430:	f8bd 6052 	ldrh.w	r6, [sp, #82]	; 0x52
 8010434:	f8bd 205a 	ldrh.w	r2, [sp, #90]	; 0x5a
 8010438:	f8bd 7050 	ldrh.w	r7, [sp, #80]	; 0x50
 801043c:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 8010440:	f8bd 0054 	ldrh.w	r0, [sp, #84]	; 0x54
 8010444:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
 8010448:	1ab2      	subs	r2, r6, r2
 801044a:	f89b 6064 	ldrb.w	r6, [fp, #100]	; 0x64
 801044e:	1afb      	subs	r3, r7, r3
 8010450:	1a41      	subs	r1, r0, r1
 8010452:	b21b      	sxth	r3, r3
 8010454:	ed9f 5a2b 	vldr	s10, [pc, #172]	; 8010504 <MEMS_runMagCal.constprop.21+0xe38>
 8010458:	b212      	sxth	r2, r2
 801045a:	ee29 5a85 	vmul.f32	s10, s19, s10
 801045e:	b209      	sxth	r1, r1
 8010460:	2e00      	cmp	r6, #0
 8010462:	f040 846e 	bne.w	8010d42 <MEMS_runMagCal.constprop.21+0x1676>
 8010466:	f89b 007c 	ldrb.w	r0, [fp, #124]	; 0x7c
 801046a:	fab0 f080 	clz	r0, r0
 801046e:	0940      	lsrs	r0, r0, #5
 8010470:	ee07 3a90 	vmov	s15, r3
 8010474:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8010478:	ee25 6a06 	vmul.f32	s12, s10, s12
 801047c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010480:	eef4 7ac6 	vcmpe.f32	s15, s12
 8010484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010488:	f300 8442 	bgt.w	8010d10 <MEMS_runMagCal.constprop.21+0x1644>
 801048c:	ee07 2a10 	vmov	s14, r2
 8010490:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010494:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8010498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801049c:	f100 8438 	bmi.w	8010d10 <MEMS_runMagCal.constprop.21+0x1644>
 80104a0:	ee06 1a90 	vmov	s13, r1
 80104a4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80104a8:	eeb4 6ae6 	vcmpe.f32	s12, s13
 80104ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104b0:	f100 842e 	bmi.w	8010d10 <MEMS_runMagCal.constprop.21+0x1644>
 80104b4:	4299      	cmp	r1, r3
 80104b6:	460e      	mov	r6, r1
 80104b8:	bfa8      	it	ge
 80104ba:	461e      	movge	r6, r3
 80104bc:	429a      	cmp	r2, r3
 80104be:	4692      	mov	sl, r2
 80104c0:	bfb8      	it	lt
 80104c2:	469a      	movlt	sl, r3
 80104c4:	4296      	cmp	r6, r2
 80104c6:	bfa8      	it	ge
 80104c8:	4616      	movge	r6, r2
 80104ca:	458a      	cmp	sl, r1
 80104cc:	bfb8      	it	lt
 80104ce:	468a      	movlt	sl, r1
 80104d0:	459a      	cmp	sl, r3
 80104d2:	f8ad 605a 	strh.w	r6, [sp, #90]	; 0x5a
 80104d6:	dd02      	ble.n	80104de <MEMS_runMagCal.constprop.21+0xe12>
 80104d8:	429e      	cmp	r6, r3
 80104da:	f2c0 8482 	blt.w	8010de2 <MEMS_runMagCal.constprop.21+0x1716>
 80104de:	4633      	mov	r3, r6
 80104e0:	2700      	movs	r7, #0
 80104e2:	4592      	cmp	sl, r2
 80104e4:	dd02      	ble.n	80104ec <MEMS_runMagCal.constprop.21+0xe20>
 80104e6:	4296      	cmp	r6, r2
 80104e8:	f2c0 855d 	blt.w	8010fa6 <MEMS_runMagCal.constprop.21+0x18da>
 80104ec:	4551      	cmp	r1, sl
 80104ee:	da02      	bge.n	80104f6 <MEMS_runMagCal.constprop.21+0xe2a>
 80104f0:	42b1      	cmp	r1, r6
 80104f2:	f300 8550 	bgt.w	8010f96 <MEMS_runMagCal.constprop.21+0x18ca>
 80104f6:	2f00      	cmp	r7, #0
 80104f8:	f040 854e 	bne.w	8010f98 <MEMS_runMagCal.constprop.21+0x18cc>
 80104fc:	e00a      	b.n	8010514 <MEMS_runMagCal.constprop.21+0xe48>
 80104fe:	bf00      	nop
 8010500:	3a83126f 	.word	0x3a83126f
 8010504:	42340000 	.word	0x42340000
 8010508:	3faccccd 	.word	0x3faccccd
 801050c:	00000000 	.word	0x00000000
 8010510:	358637bd 	.word	0x358637bd
 8010514:	2800      	cmp	r0, #0
 8010516:	f000 8504 	beq.w	8010f22 <MEMS_runMagCal.constprop.21+0x1856>
 801051a:	eeb4 5ae7 	vcmpe.f32	s10, s15
 801051e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010522:	f300 84fa 	bgt.w	8010f1a <MEMS_runMagCal.constprop.21+0x184e>
 8010526:	eeb4 5ac7 	vcmpe.f32	s10, s14
 801052a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801052e:	f300 84f4 	bgt.w	8010f1a <MEMS_runMagCal.constprop.21+0x184e>
 8010532:	eeb4 5ae6 	vcmpe.f32	s10, s13
 8010536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801053a:	bfcc      	ite	gt
 801053c:	2301      	movgt	r3, #1
 801053e:	2300      	movle	r3, #0
 8010540:	9300      	str	r3, [sp, #0]
 8010542:	ed1f 6a0f 	vldr	s12, [pc, #-60]	; 8010508 <MEMS_runMagCal.constprop.21+0xe3c>
 8010546:	ee05 aa90 	vmov	s11, sl
 801054a:	ee25 6a06 	vmul.f32	s12, s10, s12
 801054e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8010552:	eef4 5ac6 	vcmpe.f32	s11, s12
 8010556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801055a:	db1e      	blt.n	801059a <MEMS_runMagCal.constprop.21+0xece>
 801055c:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 8010560:	ee05 3a90 	vmov	s11, r3
 8010564:	eeb7 6a02 	vmov.f32	s12, #114	; 0x3f900000  1.125
 8010568:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801056c:	ee25 6a06 	vmul.f32	s12, s10, s12
 8010570:	eef4 5ac6 	vcmpe.f32	s11, s12
 8010574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010578:	db0f      	blt.n	801059a <MEMS_runMagCal.constprop.21+0xece>
 801057a:	ebba 0f46 	cmp.w	sl, r6, lsl #1
 801057e:	da0c      	bge.n	801059a <MEMS_runMagCal.constprop.21+0xece>
 8010580:	ee06 6a10 	vmov	s12, r6
 8010584:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8010588:	eef7 5a04 	vmov.f32	s11, #116	; 0x3fa00000  1.250
 801058c:	ee26 6a25 	vmul.f32	s12, s12, s11
 8010590:	eeb4 5ac6 	vcmpe.f32	s10, s12
 8010594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010598:	d419      	bmi.n	80105ce <MEMS_runMagCal.constprop.21+0xf02>
 801059a:	eeb7 6a02 	vmov.f32	s12, #114	; 0x3f900000  1.125
 801059e:	ee67 7a86 	vmul.f32	s15, s15, s12
 80105a2:	eeb4 5ae7 	vcmpe.f32	s10, s15
 80105a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105aa:	f300 81e1 	bgt.w	8010970 <MEMS_runMagCal.constprop.21+0x12a4>
 80105ae:	ee27 7a06 	vmul.f32	s14, s14, s12
 80105b2:	eeb4 5ac7 	vcmpe.f32	s10, s14
 80105b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105ba:	f300 81d9 	bgt.w	8010970 <MEMS_runMagCal.constprop.21+0x12a4>
 80105be:	ee66 6a86 	vmul.f32	s13, s13, s12
 80105c2:	eeb4 5ae6 	vcmpe.f32	s10, s13
 80105c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105ca:	f300 81d1 	bgt.w	8010970 <MEMS_runMagCal.constprop.21+0x12a4>
 80105ce:	9b06      	ldr	r3, [sp, #24]
 80105d0:	42a3      	cmp	r3, r4
 80105d2:	f000 849a 	beq.w	8010f0a <MEMS_runMagCal.constprop.21+0x183e>
 80105d6:	1aeb      	subs	r3, r5, r3
 80105d8:	fb93 f2f8 	sdiv	r2, r3, r8
 80105dc:	fb08 3212 	mls	r2, r8, r2, r3
 80105e0:	b213      	sxth	r3, r2
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	bfbc      	itt	lt
 80105e6:	18a3      	addlt	r3, r4, r2
 80105e8:	b21b      	sxthlt	r3, r3
 80105ea:	b25b      	sxtb	r3, r3
 80105ec:	f04f 0900 	mov.w	r9, #0
 80105f0:	f103 0e01 	add.w	lr, r3, #1
 80105f4:	2301      	movs	r3, #1
 80105f6:	f8cd 9004 	str.w	r9, [sp, #4]
 80105fa:	9302      	str	r3, [sp, #8]
 80105fc:	f10e 33ff 	add.w	r3, lr, #4294967295
 8010600:	fb93 f2f8 	sdiv	r2, r3, r8
 8010604:	fb08 3212 	mls	r2, r8, r2, r3
 8010608:	b251      	sxtb	r1, r2
 801060a:	2900      	cmp	r1, #0
 801060c:	bfb8      	it	lt
 801060e:	1912      	addlt	r2, r2, r4
 8010610:	fb9e f3f8 	sdiv	r3, lr, r8
 8010614:	fb08 e313 	mls	r3, r8, r3, lr
 8010618:	bfb8      	it	lt
 801061a:	b251      	sxtblt	r1, r2
 801061c:	b25b      	sxtb	r3, r3
 801061e:	3104      	adds	r1, #4
 8010620:	3304      	adds	r3, #4
 8010622:	eb0b 02c3 	add.w	r2, fp, r3, lsl #3
 8010626:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 801062a:	f9b2 20b2 	ldrsh.w	r2, [r2, #178]	; 0xb2
 801062e:	f9b0 00b2 	ldrsh.w	r0, [r0, #178]	; 0xb2
 8010632:	1a16      	subs	r6, r2, r0
 8010634:	bf4c      	ite	mi
 8010636:	1a82      	submi	r2, r0, r2
 8010638:	b232      	sxthpl	r2, r6
 801063a:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 801063e:	eb0b 06c3 	add.w	r6, fp, r3, lsl #3
 8010642:	f9b0 00b4 	ldrsh.w	r0, [r0, #180]	; 0xb4
 8010646:	f9b6 70b4 	ldrsh.w	r7, [r6, #180]	; 0xb4
 801064a:	bf48      	it	mi
 801064c:	b212      	sxthmi	r2, r2
 801064e:	1a3e      	subs	r6, r7, r0
 8010650:	bf44      	itt	mi
 8010652:	1bc0      	submi	r0, r0, r7
 8010654:	b206      	sxthmi	r6, r0
 8010656:	eb0b 07c3 	add.w	r7, fp, r3, lsl #3
 801065a:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 801065e:	f9b7 70b6 	ldrsh.w	r7, [r7, #182]	; 0xb6
 8010662:	f9b0 00b6 	ldrsh.w	r0, [r0, #182]	; 0xb6
 8010666:	bf58      	it	pl
 8010668:	b236      	sxthpl	r6, r6
 801066a:	ebb7 0c00 	subs.w	ip, r7, r0
 801066e:	bf48      	it	mi
 8010670:	eba0 0c07 	submi.w	ip, r0, r7
 8010674:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8010678:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 801067c:	f8b3 10b0 	ldrh.w	r1, [r3, #176]	; 0xb0
 8010680:	f8b0 30b0 	ldrh.w	r3, [r0, #176]	; 0xb0
 8010684:	1ac9      	subs	r1, r1, r3
 8010686:	b209      	sxth	r1, r1
 8010688:	2900      	cmp	r1, #0
 801068a:	fa0f fc8c 	sxth.w	ip, ip
 801068e:	dd21      	ble.n	80106d4 <MEMS_runMagCal.constprop.21+0x1008>
 8010690:	1993      	adds	r3, r2, r6
 8010692:	4463      	add	r3, ip
 8010694:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010698:	fb02 f303 	mul.w	r3, r2, r3
 801069c:	ee07 3a90 	vmov	s15, r3
 80106a0:	ee07 1a10 	vmov	s14, r1
 80106a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80106a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80106ac:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80106b0:	9b01      	ldr	r3, [sp, #4]
 80106b2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80106b6:	3301      	adds	r3, #1
 80106b8:	b2db      	uxtb	r3, r3
 80106ba:	9301      	str	r3, [sp, #4]
 80106bc:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80106c0:	edcd 7a03 	vstr	s15, [sp, #12]
 80106c4:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80106c8:	2b96      	cmp	r3, #150	; 0x96
 80106ca:	bfc4      	itt	gt
 80106cc:	f109 0901 	addgt.w	r9, r9, #1
 80106d0:	fa5f f989 	uxtbgt.w	r9, r9
 80106d4:	9b02      	ldr	r3, [sp, #8]
 80106d6:	9a06      	ldr	r2, [sp, #24]
 80106d8:	3301      	adds	r3, #1
 80106da:	b2db      	uxtb	r3, r3
 80106dc:	429a      	cmp	r2, r3
 80106de:	9302      	str	r3, [sp, #8]
 80106e0:	f10e 0e01 	add.w	lr, lr, #1
 80106e4:	d88a      	bhi.n	80105fc <MEMS_runMagCal.constprop.21+0xf30>
 80106e6:	9b01      	ldr	r3, [sp, #4]
 80106e8:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80106ec:	4599      	cmp	r9, r3
 80106ee:	f340 813f 	ble.w	8010970 <MEMS_runMagCal.constprop.21+0x12a4>
 80106f2:	9b08      	ldr	r3, [sp, #32]
 80106f4:	b92b      	cbnz	r3, 8010702 <MEMS_runMagCal.constprop.21+0x1036>
 80106f6:	f89b 307c 	ldrb.w	r3, [fp, #124]	; 0x7c
 80106fa:	3b02      	subs	r3, #2
 80106fc:	2b01      	cmp	r3, #1
 80106fe:	f240 83a4 	bls.w	8010e4a <MEMS_runMagCal.constprop.21+0x177e>
 8010702:	a82e      	add	r0, sp, #184	; 0xb8
 8010704:	2220      	movs	r2, #32
 8010706:	2100      	movs	r1, #0
 8010708:	f00a fc39 	bl	801af7e <memset>
 801070c:	2300      	movs	r3, #0
 801070e:	931a      	str	r3, [sp, #104]	; 0x68
 8010710:	931b      	str	r3, [sp, #108]	; 0x6c
 8010712:	931c      	str	r3, [sp, #112]	; 0x70
 8010714:	9b06      	ldr	r3, [sp, #24]
 8010716:	42a3      	cmp	r3, r4
 8010718:	f000 83f1 	beq.w	8010efe <MEMS_runMagCal.constprop.21+0x1832>
 801071c:	1aed      	subs	r5, r5, r3
 801071e:	fb95 f3f4 	sdiv	r3, r5, r4
 8010722:	fb04 5313 	mls	r3, r4, r3, r5
 8010726:	b219      	sxth	r1, r3
 8010728:	2900      	cmp	r1, #0
 801072a:	bfbc      	itt	lt
 801072c:	191b      	addlt	r3, r3, r4
 801072e:	b219      	sxthlt	r1, r3
 8010730:	9b06      	ldr	r3, [sp, #24]
 8010732:	b39b      	cbz	r3, 801079c <MEMS_runMagCal.constprop.21+0x10d0>
 8010734:	ed5f 7a8b 	vldr	s15, [pc, #-556]	; 801050c <MEMS_runMagCal.constprop.21+0xe40>
 8010738:	2000      	movs	r0, #0
 801073a:	eeb0 7a67 	vmov.f32	s14, s15
 801073e:	eef0 6a67 	vmov.f32	s13, s15
 8010742:	180a      	adds	r2, r1, r0
 8010744:	fb92 f3f4 	sdiv	r3, r2, r4
 8010748:	fb04 2313 	mls	r3, r4, r3, r2
 801074c:	b2db      	uxtb	r3, r3
 801074e:	3304      	adds	r3, #4
 8010750:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8010754:	3001      	adds	r0, #1
 8010756:	f9b3 20b2 	ldrsh.w	r2, [r3, #178]	; 0xb2
 801075a:	ee05 2a10 	vmov	s10, r2
 801075e:	f9b3 20b4 	ldrsh.w	r2, [r3, #180]	; 0xb4
 8010762:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 8010766:	ee05 2a90 	vmov	s11, r2
 801076a:	ee06 3a10 	vmov	s12, r3
 801076e:	9a06      	ldr	r2, [sp, #24]
 8010770:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8010774:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8010778:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801077c:	b2c3      	uxtb	r3, r0
 801077e:	4293      	cmp	r3, r2
 8010780:	ee76 6a85 	vadd.f32	s13, s13, s10
 8010784:	ee37 7a25 	vadd.f32	s14, s14, s11
 8010788:	ee77 7a86 	vadd.f32	s15, s15, s12
 801078c:	d3d9      	bcc.n	8010742 <MEMS_runMagCal.constprop.21+0x1076>
 801078e:	edcd 6a1a 	vstr	s13, [sp, #104]	; 0x68
 8010792:	ed8d 7a1b 	vstr	s14, [sp, #108]	; 0x6c
 8010796:	edcd 7a1c 	vstr	s15, [sp, #112]	; 0x70
 801079a:	4613      	mov	r3, r2
 801079c:	eddd 7a06 	vldr	s15, [sp, #24]
 80107a0:	eddd 6a1a 	vldr	s13, [sp, #104]	; 0x68
 80107a4:	ed9d 7a1b 	vldr	s14, [sp, #108]	; 0x6c
 80107a8:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 80107ac:	eddd 7a1c 	vldr	s15, [sp, #112]	; 0x70
 80107b0:	eec6 1aa4 	vdiv.f32	s3, s13, s9
 80107b4:	ee87 2a24 	vdiv.f32	s4, s14, s9
 80107b8:	eec7 2aa4 	vdiv.f32	s5, s15, s9
 80107bc:	edcd 1a1a 	vstr	s3, [sp, #104]	; 0x68
 80107c0:	ed8d 2a1b 	vstr	s4, [sp, #108]	; 0x6c
 80107c4:	edcd 2a1c 	vstr	s5, [sp, #112]	; 0x70
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	f001 830e 	beq.w	8011dea <MEMS_runMagCal.constprop.21+0x271e>
 80107ce:	ed5f 7ab1 	vldr	s15, [pc, #-708]	; 801050c <MEMS_runMagCal.constprop.21+0xe40>
 80107d2:	2000      	movs	r0, #0
 80107d4:	eeb0 4a67 	vmov.f32	s8, s15
 80107d8:	eef0 6a67 	vmov.f32	s13, s15
 80107dc:	eef0 3a67 	vmov.f32	s7, s15
 80107e0:	eeb0 3a67 	vmov.f32	s6, s15
 80107e4:	eeb0 7a67 	vmov.f32	s14, s15
 80107e8:	180a      	adds	r2, r1, r0
 80107ea:	fb92 f3f4 	sdiv	r3, r2, r4
 80107ee:	fb04 2313 	mls	r3, r4, r3, r2
 80107f2:	b2db      	uxtb	r3, r3
 80107f4:	3304      	adds	r3, #4
 80107f6:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 80107fa:	3001      	adds	r0, #1
 80107fc:	f9b3 20b2 	ldrsh.w	r2, [r3, #178]	; 0xb2
 8010800:	ee05 2a10 	vmov	s10, r2
 8010804:	f9b3 20b4 	ldrsh.w	r2, [r3, #180]	; 0xb4
 8010808:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 801080c:	ee05 2a90 	vmov	s11, r2
 8010810:	ee06 3a10 	vmov	s12, r3
 8010814:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8010818:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801081c:	ee35 5a61 	vsub.f32	s10, s10, s3
 8010820:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8010824:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8010828:	ee36 6a62 	vsub.f32	s12, s12, s5
 801082c:	ee25 1a05 	vmul.f32	s2, s10, s10
 8010830:	9a06      	ldr	r2, [sp, #24]
 8010832:	ee65 0a25 	vmul.f32	s1, s10, s11
 8010836:	b2c3      	uxtb	r3, r0
 8010838:	ee25 5a06 	vmul.f32	s10, s10, s12
 801083c:	ee37 7a01 	vadd.f32	s14, s14, s2
 8010840:	ee25 1aa5 	vmul.f32	s2, s11, s11
 8010844:	ee65 5a86 	vmul.f32	s11, s11, s12
 8010848:	ee26 6a06 	vmul.f32	s12, s12, s12
 801084c:	4293      	cmp	r3, r2
 801084e:	ee33 3a20 	vadd.f32	s6, s6, s1
 8010852:	ee73 3a85 	vadd.f32	s7, s7, s10
 8010856:	ee76 6a81 	vadd.f32	s13, s13, s2
 801085a:	ee34 4a25 	vadd.f32	s8, s8, s11
 801085e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8010862:	d3c1      	bcc.n	80107e8 <MEMS_runMagCal.constprop.21+0x111c>
 8010864:	ee23 6aa3 	vmul.f32	s12, s7, s7
 8010868:	ee63 5a03 	vmul.f32	s11, s6, s6
 801086c:	ee24 5a04 	vmul.f32	s10, s8, s8
 8010870:	ee75 5a86 	vadd.f32	s11, s11, s12
 8010874:	ee37 6a26 	vadd.f32	s12, s14, s13
 8010878:	ee75 5a85 	vadd.f32	s11, s11, s10
 801087c:	ed1f 5adc 	vldr	s10, [pc, #-880]	; 8010510 <MEMS_runMagCal.constprop.21+0xe44>
 8010880:	ed8d 7a2e 	vstr	s14, [sp, #184]	; 0xb8
 8010884:	eef4 5ac5 	vcmpe.f32	s11, s10
 8010888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801088c:	ed8d 3a2f 	vstr	s6, [sp, #188]	; 0xbc
 8010890:	edcd 3a30 	vstr	s7, [sp, #192]	; 0xc0
 8010894:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 8010898:	ed8d 4a32 	vstr	s8, [sp, #200]	; 0xc8
 801089c:	edcd 7a33 	vstr	s15, [sp, #204]	; 0xcc
 80108a0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80108a4:	f141 8200 	bpl.w	8011ca8 <MEMS_runMagCal.constprop.21+0x25dc>
 80108a8:	eeb0 7ac7 	vabs.f32	s14, s14
 80108ac:	eef0 6ae6 	vabs.f32	s13, s13
 80108b0:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80108b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108b8:	bf54      	ite	pl
 80108ba:	eeb0 9a66 	vmovpl.f32	s18, s13
 80108be:	eeb0 9a47 	vmovmi.f32	s18, s14
 80108c2:	ee86 0a24 	vdiv.f32	s0, s12, s9
 80108c6:	eeb0 8ae7 	vabs.f32	s16, s15
 80108ca:	eeb4 8ac9 	vcmpe.f32	s16, s18
 80108ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108d2:	eef4 6a47 	vcmp.f32	s13, s14
 80108d6:	bfd8      	it	le
 80108d8:	eeb0 9a48 	vmovle.f32	s18, s16
 80108dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108e0:	bf48      	it	mi
 80108e2:	eef0 6a47 	vmovmi.f32	s13, s14
 80108e6:	eeb4 8a66 	vcmp.f32	s16, s13
 80108ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108ee:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80108f2:	bf48      	it	mi
 80108f4:	eeb0 8a66 	vmovmi.f32	s16, s13
 80108f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108fc:	eeb1 aac0 	vsqrt.f32	s20, s0
 8010900:	d501      	bpl.n	8010906 <MEMS_runMagCal.constprop.21+0x123a>
 8010902:	f008 fcd7 	bl	80192b4 <sqrtf>
 8010906:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 801090a:	ee29 7a07 	vmul.f32	s14, s18, s14
 801090e:	ee68 7a8a 	vmul.f32	s15, s17, s20
 8010912:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801091a:	d41b      	bmi.n	8010954 <MEMS_runMagCal.constprop.21+0x1288>
 801091c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8010920:	ee29 9a07 	vmul.f32	s18, s18, s14
 8010924:	eeb4 8ac9 	vcmpe.f32	s16, s18
 8010928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801092c:	dd03      	ble.n	8010936 <MEMS_runMagCal.constprop.21+0x126a>
 801092e:	f89b 30b0 	ldrb.w	r3, [fp, #176]	; 0xb0
 8010932:	2b22      	cmp	r3, #34	; 0x22
 8010934:	d90e      	bls.n	8010954 <MEMS_runMagCal.constprop.21+0x1288>
 8010936:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 8010c1c <MEMS_runMagCal.constprop.21+0x1550>
 801093a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801093e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010942:	dc07      	bgt.n	8010954 <MEMS_runMagCal.constprop.21+0x1288>
 8010944:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8010948:	eef4 7ac7 	vcmpe.f32	s15, s14
 801094c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010950:	f140 832f 	bpl.w	8010fb2 <MEMS_runMagCal.constprop.21+0x18e6>
 8010954:	eddd 7a05 	vldr	s15, [sp, #20]
 8010958:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 801095c:	eddf 7ab0 	vldr	s15, [pc, #704]	; 8010c20 <MEMS_runMagCal.constprop.21+0x1554>
 8010960:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010964:	f008 fb0a 	bl	8018f7c <roundf>
 8010968:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801096c:	ed8b 0a0a 	vstr	s0, [fp, #40]	; 0x28
 8010970:	2300      	movs	r3, #0
 8010972:	f88b 3024 	strb.w	r3, [fp, #36]	; 0x24
 8010976:	f7ff bab2 	b.w	800fede <MEMS_runMagCal.constprop.21+0x812>
 801097a:	f242 3228 	movw	r2, #9000	; 0x2328
 801097e:	4295      	cmp	r5, r2
 8010980:	f89b 00b0 	ldrb.w	r0, [fp, #176]	; 0xb0
 8010984:	f89b 10b1 	ldrb.w	r1, [fp, #177]	; 0xb1
 8010988:	f99b 20b2 	ldrsb.w	r2, [fp, #178]	; 0xb2
 801098c:	bf1a      	itte	ne
 801098e:	f5a5 550c 	subne.w	r5, r5, #8960	; 0x2300
 8010992:	3d28      	subne	r5, #40	; 0x28
 8010994:	2500      	moveq	r5, #0
 8010996:	4288      	cmp	r0, r1
 8010998:	f102 0201 	add.w	r2, r2, #1
 801099c:	f000 8118 	beq.w	8010bd0 <MEMS_runMagCal.constprop.21+0x1504>
 80109a0:	1a12      	subs	r2, r2, r0
 80109a2:	fb92 f4f1 	sdiv	r4, r2, r1
 80109a6:	fb01 2214 	mls	r2, r1, r4, r2
 80109aa:	b214      	sxth	r4, r2
 80109ac:	2c00      	cmp	r4, #0
 80109ae:	bfbc      	itt	lt
 80109b0:	1852      	addlt	r2, r2, r1
 80109b2:	b214      	sxthlt	r4, r2
 80109b4:	b207      	sxth	r7, r0
 80109b6:	b397      	cbz	r7, 8010a1e <MEMS_runMagCal.constprop.21+0x1352>
 80109b8:	2200      	movs	r2, #0
 80109ba:	1b5b      	subs	r3, r3, r5
 80109bc:	b29e      	uxth	r6, r3
 80109be:	9200      	str	r2, [sp, #0]
 80109c0:	4696      	mov	lr, r2
 80109c2:	e003      	b.n	80109cc <MEMS_runMagCal.constprop.21+0x1300>
 80109c4:	3201      	adds	r2, #1
 80109c6:	b213      	sxth	r3, r2
 80109c8:	429f      	cmp	r7, r3
 80109ca:	dd1e      	ble.n	8010a0a <MEMS_runMagCal.constprop.21+0x133e>
 80109cc:	eb04 0c02 	add.w	ip, r4, r2
 80109d0:	fb9c f3f1 	sdiv	r3, ip, r1
 80109d4:	fb01 c313 	mls	r3, r1, r3, ip
 80109d8:	b2db      	uxtb	r3, r3
 80109da:	3304      	adds	r3, #4
 80109dc:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 80109e0:	f8b3 c0b0 	ldrh.w	ip, [r3, #176]	; 0xb0
 80109e4:	44b4      	add	ip, r6
 80109e6:	fa0f fc8c 	sxth.w	ip, ip
 80109ea:	f1bc 0f00 	cmp.w	ip, #0
 80109ee:	f8a3 c0b0 	strh.w	ip, [r3, #176]	; 0xb0
 80109f2:	dae7      	bge.n	80109c4 <MEMS_runMagCal.constprop.21+0x12f8>
 80109f4:	1e43      	subs	r3, r0, #1
 80109f6:	b128      	cbz	r0, 8010a04 <MEMS_runMagCal.constprop.21+0x1338>
 80109f8:	2001      	movs	r0, #1
 80109fa:	9000      	str	r0, [sp, #0]
 80109fc:	f04f 0e01 	mov.w	lr, #1
 8010a00:	b2d8      	uxtb	r0, r3
 8010a02:	e7df      	b.n	80109c4 <MEMS_runMagCal.constprop.21+0x12f8>
 8010a04:	f04f 0e01 	mov.w	lr, #1
 8010a08:	e7dc      	b.n	80109c4 <MEMS_runMagCal.constprop.21+0x12f8>
 8010a0a:	9b00      	ldr	r3, [sp, #0]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	f040 8200 	bne.w	8010e12 <MEMS_runMagCal.constprop.21+0x1746>
 8010a12:	f1be 0f00 	cmp.w	lr, #0
 8010a16:	f040 80f4 	bne.w	8010c02 <MEMS_runMagCal.constprop.21+0x1536>
 8010a1a:	f89b 00b0 	ldrb.w	r0, [fp, #176]	; 0xb0
 8010a1e:	f8cb 50b4 	str.w	r5, [fp, #180]	; 0xb4
 8010a22:	f7ff b931 	b.w	800fc88 <MEMS_runMagCal.constprop.21+0x5bc>
 8010a26:	f1ba 0f00 	cmp.w	sl, #0
 8010a2a:	f47f a946 	bne.w	800fcba <MEMS_runMagCal.constprop.21+0x5ee>
 8010a2e:	2300      	movs	r3, #0
 8010a30:	9300      	str	r3, [sp, #0]
 8010a32:	461a      	mov	r2, r3
 8010a34:	f7ff bbb8 	b.w	80101a8 <MEMS_runMagCal.constprop.21+0xadc>
 8010a38:	42b8      	cmp	r0, r7
 8010a3a:	f000 80f7 	beq.w	8010c2c <MEMS_runMagCal.constprop.21+0x1560>
 8010a3e:	2c03      	cmp	r4, #3
 8010a40:	f47f a8f3 	bne.w	800fc2a <MEMS_runMagCal.constprop.21+0x55e>
 8010a44:	eddb 7a0c 	vldr	s15, [fp, #48]	; 0x30
 8010a48:	eddf 6a75 	vldr	s13, [pc, #468]	; 8010c20 <MEMS_runMagCal.constprop.21+0x1554>
 8010a4c:	ed9b 7a0a 	vldr	s14, [fp, #40]	; 0x28
 8010a50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010a54:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8010a58:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010a5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a64:	f77f a8e1 	ble.w	800fc2a <MEMS_runMagCal.constprop.21+0x55e>
 8010a68:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	f43f a8dc 	beq.w	800fc2a <MEMS_runMagCal.constprop.21+0x55e>
 8010a72:	eddd 7a05 	vldr	s15, [sp, #20]
 8010a76:	330a      	adds	r3, #10
 8010a78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010a7c:	ee07 3a10 	vmov	s14, r3
 8010a80:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010a84:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8010a88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a90:	f77f a8cb 	ble.w	800fc2a <MEMS_runMagCal.constprop.21+0x55e>
 8010a94:	f89b 3025 	ldrb.w	r3, [fp, #37]	; 0x25
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	f47f a8c6 	bne.w	800fc2a <MEMS_runMagCal.constprop.21+0x55e>
 8010a9e:	f89b 3064 	ldrb.w	r3, [fp, #100]	; 0x64
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	f43f aa1b 	beq.w	800fede <MEMS_runMagCal.constprop.21+0x812>
 8010aa8:	f89b 306c 	ldrb.w	r3, [fp, #108]	; 0x6c
 8010aac:	2bff      	cmp	r3, #255	; 0xff
 8010aae:	f47f aa16 	bne.w	800fede <MEMS_runMagCal.constprop.21+0x812>
 8010ab2:	f7ff b8ba 	b.w	800fc2a <MEMS_runMagCal.constprop.21+0x55e>
 8010ab6:	4613      	mov	r3, r2
 8010ab8:	2201      	movs	r2, #1
 8010aba:	fa02 fe03 	lsl.w	lr, r2, r3
 8010abe:	ea0e 0e01 	and.w	lr, lr, r1
 8010ac2:	f7ff bad1 	b.w	8010068 <MEMS_runMagCal.constprop.21+0x99c>
 8010ac6:	4613      	mov	r3, r2
 8010ac8:	2201      	movs	r2, #1
 8010aca:	fa02 f303 	lsl.w	r3, r2, r3
 8010ace:	4003      	ands	r3, r0
 8010ad0:	f7ff bae6 	b.w	80100a0 <MEMS_runMagCal.constprop.21+0x9d4>
 8010ad4:	4613      	mov	r3, r2
 8010ad6:	2201      	movs	r2, #1
 8010ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8010adc:	4019      	ands	r1, r3
 8010ade:	f7ff bad1 	b.w	8010084 <MEMS_runMagCal.constprop.21+0x9b8>
 8010ae2:	b111      	cbz	r1, 8010aea <MEMS_runMagCal.constprop.21+0x141e>
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	f47f a984 	bne.w	800fdf2 <MEMS_runMagCal.constprop.21+0x726>
 8010aea:	f89b 00b1 	ldrb.w	r0, [fp, #177]	; 0xb1
 8010aee:	f99b 10b2 	ldrsb.w	r1, [fp, #178]	; 0xb2
 8010af2:	4285      	cmp	r5, r0
 8010af4:	f000 817b 	beq.w	8010dee <MEMS_runMagCal.constprop.21+0x1722>
 8010af8:	3101      	adds	r1, #1
 8010afa:	eba1 0e05 	sub.w	lr, r1, r5
 8010afe:	fb9e f3f0 	sdiv	r3, lr, r0
 8010b02:	fb00 e313 	mls	r3, r0, r3, lr
 8010b06:	fa0f fe83 	sxth.w	lr, r3
 8010b0a:	f1be 0f00 	cmp.w	lr, #0
 8010b0e:	bfb8      	it	lt
 8010b10:	181b      	addlt	r3, r3, r0
 8010b12:	4602      	mov	r2, r0
 8010b14:	bfb8      	it	lt
 8010b16:	fa0f fe83 	sxthlt.w	lr, r3
 8010b1a:	f04f 0c00 	mov.w	ip, #0
 8010b1e:	9007      	str	r0, [sp, #28]
 8010b20:	9108      	str	r1, [sp, #32]
 8010b22:	eb0e 000c 	add.w	r0, lr, ip
 8010b26:	fb90 f3f2 	sdiv	r3, r0, r2
 8010b2a:	fb02 0313 	mls	r3, r2, r3, r0
 8010b2e:	b2db      	uxtb	r3, r3
 8010b30:	3304      	adds	r3, #4
 8010b32:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8010b36:	f10c 0c01 	add.w	ip, ip, #1
 8010b3a:	f9b3 00b2 	ldrsh.w	r0, [r3, #178]	; 0xb2
 8010b3e:	f9b3 10b4 	ldrsh.w	r1, [r3, #180]	; 0xb4
 8010b42:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 8010b46:	1a20      	subs	r0, r4, r0
 8010b48:	ee06 0a90 	vmov	s13, r0
 8010b4c:	1a70      	subs	r0, r6, r1
 8010b4e:	ee07 0a10 	vmov	s14, r0
 8010b52:	ebaa 0303 	sub.w	r3, sl, r3
 8010b56:	ee07 3a90 	vmov	s15, r3
 8010b5a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010b5e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010b62:	eef0 6ae6 	vabs.f32	s13, s13
 8010b66:	eeb0 7ac7 	vabs.f32	s14, s14
 8010b6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010b6e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8010b72:	eef0 7ae7 	vabs.f32	s15, s15
 8010b76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010b7a:	fa5f f38c 	uxtb.w	r3, ip
 8010b7e:	eeb4 aae7 	vcmpe.f32	s20, s15
 8010b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b86:	f73f a934 	bgt.w	800fdf2 <MEMS_runMagCal.constprop.21+0x726>
 8010b8a:	429d      	cmp	r5, r3
 8010b8c:	d8c9      	bhi.n	8010b22 <MEMS_runMagCal.constprop.21+0x1456>
 8010b8e:	9807      	ldr	r0, [sp, #28]
 8010b90:	9908      	ldr	r1, [sp, #32]
 8010b92:	f7ff ba95 	b.w	80100c0 <MEMS_runMagCal.constprop.21+0x9f4>
 8010b96:	f04f 0a00 	mov.w	sl, #0
 8010b9a:	2101      	movs	r1, #1
 8010b9c:	f7fe bfcd 	b.w	800fb3a <MEMS_runMagCal.constprop.21+0x46e>
 8010ba0:	f04f 0a00 	mov.w	sl, #0
 8010ba4:	4651      	mov	r1, sl
 8010ba6:	f7fe bfc8 	b.w	800fb3a <MEMS_runMagCal.constprop.21+0x46e>
 8010baa:	f1ba 0f00 	cmp.w	sl, #0
 8010bae:	d12e      	bne.n	8010c0e <MEMS_runMagCal.constprop.21+0x1542>
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	9308      	str	r3, [sp, #32]
 8010bb4:	f7ff bb3f 	b.w	8010236 <MEMS_runMagCal.constprop.21+0xb6a>
 8010bb8:	f8db 20c4 	ldr.w	r2, [fp, #196]	; 0xc4
 8010bbc:	2101      	movs	r1, #1
 8010bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8010bc2:	ea23 0302 	bic.w	r3, r3, r2
 8010bc6:	4053      	eors	r3, r2
 8010bc8:	f8cb 30c4 	str.w	r3, [fp, #196]	; 0xc4
 8010bcc:	f7ff bac1 	b.w	8010152 <MEMS_runMagCal.constprop.21+0xa86>
 8010bd0:	fb92 f4f0 	sdiv	r4, r2, r0
 8010bd4:	fb00 2214 	mls	r2, r0, r4, r2
 8010bd8:	b214      	sxth	r4, r2
 8010bda:	e6eb      	b.n	80109b4 <MEMS_runMagCal.constprop.21+0x12e8>
 8010bdc:	f8db 20bc 	ldr.w	r2, [fp, #188]	; 0xbc
 8010be0:	2101      	movs	r1, #1
 8010be2:	fa01 f303 	lsl.w	r3, r1, r3
 8010be6:	ea23 0302 	bic.w	r3, r3, r2
 8010bea:	4053      	eors	r3, r2
 8010bec:	f8cb 30bc 	str.w	r3, [fp, #188]	; 0xbc
 8010bf0:	f7ff baa0 	b.w	8010134 <MEMS_runMagCal.constprop.21+0xa68>
 8010bf4:	eeb0 0a48 	vmov.f32	s0, s16
 8010bf8:	4648      	mov	r0, r9
 8010bfa:	f7fe fa1f 	bl	800f03c <MEMS_updateMagBufferIndex.constprop.33>
 8010bfe:	f7ff ba8a 	b.w	8010116 <MEMS_runMagCal.constprop.21+0xa4a>
 8010c02:	eeb0 0a48 	vmov.f32	s0, s16
 8010c06:	4648      	mov	r0, r9
 8010c08:	f7fe fa18 	bl	800f03c <MEMS_updateMagBufferIndex.constprop.33>
 8010c0c:	e705      	b.n	8010a1a <MEMS_runMagCal.constprop.21+0x134e>
 8010c0e:	eddd 7a05 	vldr	s15, [sp, #20]
 8010c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c16:	f7ff bafa 	b.w	801020e <MEMS_runMagCal.constprop.21+0xb42>
 8010c1a:	bf00      	nop
 8010c1c:	42960000 	.word	0x42960000
 8010c20:	3a83126f 	.word	0x3a83126f
 8010c24:	00000000 	.word	0x00000000
 8010c28:	3c23d70a 	.word	0x3c23d70a
 8010c2c:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8010c24 <MEMS_runMagCal.constprop.21+0x1558>
 8010c30:	f109 0901 	add.w	r9, r9, #1
 8010c34:	ac11      	add	r4, sp, #68	; 0x44
 8010c36:	b2ba      	uxth	r2, r7
 8010c38:	fb99 fcf7 	sdiv	ip, r9, r7
 8010c3c:	ed8d 7a10 	vstr	s14, [sp, #64]	; 0x40
 8010c40:	fb07 9c1c 	mls	ip, r7, ip, r9
 8010c44:	ed84 7a00 	vstr	s14, [r4]
 8010c48:	2a00      	cmp	r2, #0
 8010c4a:	f000 80dc 	beq.w	8010e06 <MEMS_runMagCal.constprop.21+0x173a>
 8010c4e:	1e51      	subs	r1, r2, #1
 8010c50:	1c6b      	adds	r3, r5, #1
 8010c52:	2200      	movs	r2, #0
 8010c54:	fa1f fc8c 	uxth.w	ip, ip
 8010c58:	fa13 f981 	uxtah	r9, r3, r1
 8010c5c:	eeb0 6a47 	vmov.f32	s12, s14
 8010c60:	eef0 7a47 	vmov.f32	s15, s14
 8010c64:	ebac 0c05 	sub.w	ip, ip, r5
 8010c68:	4616      	mov	r6, r2
 8010c6a:	4629      	mov	r1, r5
 8010c6c:	f241 2e5c 	movw	lr, #4700	; 0x125c
 8010c70:	4613      	mov	r3, r2
 8010c72:	428d      	cmp	r5, r1
 8010c74:	eb0c 0001 	add.w	r0, ip, r1
 8010c78:	dc23      	bgt.n	8010cc2 <MEMS_runMagCal.constprop.21+0x15f6>
 8010c7a:	fb90 f3f7 	sdiv	r3, r0, r7
 8010c7e:	fb07 0313 	mls	r3, r7, r3, r0
 8010c82:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 8010c86:	2201      	movs	r2, #1
 8010c88:	8f18      	ldrh	r0, [r3, #56]	; 0x38
 8010c8a:	f5a0 5392 	sub.w	r3, r0, #4672	; 0x1240
 8010c8e:	4570      	cmp	r0, lr
 8010c90:	f1a3 031c 	sub.w	r3, r3, #28
 8010c94:	bf98      	it	ls
 8010c96:	ebae 0300 	subls.w	r3, lr, r0
 8010c9a:	b29b      	uxth	r3, r3
 8010c9c:	fb03 f303 	mul.w	r3, r3, r3
 8010ca0:	ee07 3a10 	vmov	s14, r3
 8010ca4:	ee06 0a90 	vmov	s13, r0
 8010ca8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010cac:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010cb0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010cb4:	4416      	add	r6, r2
 8010cb6:	ee36 6a26 	vadd.f32	s12, s12, s13
 8010cba:	eeb0 7a67 	vmov.f32	s14, s15
 8010cbe:	b2b6      	uxth	r6, r6
 8010cc0:	4613      	mov	r3, r2
 8010cc2:	3101      	adds	r1, #1
 8010cc4:	4589      	cmp	r9, r1
 8010cc6:	d1d4      	bne.n	8010c72 <MEMS_runMagCal.constprop.21+0x15a6>
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	f040 808d 	bne.w	8010de8 <MEMS_runMagCal.constprop.21+0x171c>
 8010cce:	2a00      	cmp	r2, #0
 8010cd0:	f040 8096 	bne.w	8010e00 <MEMS_runMagCal.constprop.21+0x1734>
 8010cd4:	2e00      	cmp	r6, #0
 8010cd6:	d149      	bne.n	8010d6c <MEMS_runMagCal.constprop.21+0x16a0>
 8010cd8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8010cdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ce4:	dd30      	ble.n	8010d48 <MEMS_runMagCal.constprop.21+0x167c>
 8010ce6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8010cea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010cee:	2402      	movs	r4, #2
 8010cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cf4:	f88b 407c 	strb.w	r4, [fp, #124]	; 0x7c
 8010cf8:	f77e af97 	ble.w	800fc2a <MEMS_runMagCal.constprop.21+0x55e>
 8010cfc:	2301      	movs	r3, #1
 8010cfe:	f88b 3025 	strb.w	r3, [fp, #37]	; 0x25
 8010d02:	e69c      	b.n	8010a3e <MEMS_runMagCal.constprop.21+0x1372>
 8010d04:	f008 fad6 	bl	80192b4 <sqrtf>
 8010d08:	eddb 5a05 	vldr	s11, [fp, #20]
 8010d0c:	f7fe beb0 	b.w	800fa70 <MEMS_runMagCal.constprop.21+0x3a4>
 8010d10:	9b00      	ldr	r3, [sp, #0]
 8010d12:	f8db 20b4 	ldr.w	r2, [fp, #180]	; 0xb4
 8010d16:	f8db 1030 	ldr.w	r1, [fp, #48]	; 0x30
 8010d1a:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8010d1e:	f9b3 30d0 	ldrsh.w	r3, [r3, #208]	; 0xd0
 8010d22:	4413      	add	r3, r2
 8010d24:	4299      	cmp	r1, r3
 8010d26:	f4bf ae23 	bcs.w	8010970 <MEMS_runMagCal.constprop.21+0x12a4>
 8010d2a:	9907      	ldr	r1, [sp, #28]
 8010d2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010d30:	fb03 f301 	mul.w	r3, r3, r1
 8010d34:	3364      	adds	r3, #100	; 0x64
 8010d36:	4293      	cmp	r3, r2
 8010d38:	bf38      	it	cc
 8010d3a:	4613      	movcc	r3, r2
 8010d3c:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30
 8010d40:	e616      	b.n	8010970 <MEMS_runMagCal.constprop.21+0x12a4>
 8010d42:	2000      	movs	r0, #0
 8010d44:	f7ff bb94 	b.w	8010470 <MEMS_runMagCal.constprop.21+0xda4>
 8010d48:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8010d4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d54:	d428      	bmi.n	8010da8 <MEMS_runMagCal.constprop.21+0x16dc>
 8010d56:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8010d5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d62:	f89b 407c 	ldrb.w	r4, [fp, #124]	; 0x7c
 8010d66:	f77f ae6a 	ble.w	8010a3e <MEMS_runMagCal.constprop.21+0x1372>
 8010d6a:	e7c7      	b.n	8010cfc <MEMS_runMagCal.constprop.21+0x1630>
 8010d6c:	ee07 6a10 	vmov	s14, r6
 8010d70:	eef8 8ac7 	vcvt.f32.s32	s17, s14
 8010d74:	ee87 0aa8 	vdiv.f32	s0, s15, s17
 8010d78:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8010d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d80:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8010d84:	d501      	bpl.n	8010d8a <MEMS_runMagCal.constprop.21+0x16be>
 8010d86:	f008 fa95 	bl	80192b4 <sqrtf>
 8010d8a:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 8010d8e:	ed5f 6a5a 	vldr	s13, [pc, #-360]	; 8010c28 <MEMS_runMagCal.constprop.21+0x155c>
 8010d92:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 8010d96:	ee68 7a26 	vmul.f32	s15, s16, s13
 8010d9a:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010d9e:	edc4 7a00 	vstr	s15, [r4]
 8010da2:	ed8d 7a10 	vstr	s14, [sp, #64]	; 0x40
 8010da6:	e797      	b.n	8010cd8 <MEMS_runMagCal.constprop.21+0x160c>
 8010da8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8010dac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010db0:	2403      	movs	r4, #3
 8010db2:	2300      	movs	r3, #0
 8010db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010db8:	f88b 407c 	strb.w	r4, [fp, #124]	; 0x7c
 8010dbc:	f88b 3025 	strb.w	r3, [fp, #37]	; 0x25
 8010dc0:	dc9c      	bgt.n	8010cfc <MEMS_runMagCal.constprop.21+0x1630>
 8010dc2:	e63f      	b.n	8010a44 <MEMS_runMagCal.constprop.21+0x1378>
 8010dc4:	f8ad c05a 	strh.w	ip, [sp, #90]	; 0x5a
 8010dc8:	f7ff bb18 	b.w	80103fc <MEMS_runMagCal.constprop.21+0xd30>
 8010dcc:	461a      	mov	r2, r3
 8010dce:	9b00      	ldr	r3, [sp, #0]
 8010dd0:	1c5d      	adds	r5, r3, #1
 8010dd2:	fb95 f1f2 	sdiv	r1, r5, r2
 8010dd6:	fb02 5111 	mls	r1, r2, r1, r5
 8010dda:	b209      	sxth	r1, r1
 8010ddc:	4690      	mov	r8, r2
 8010dde:	f7ff baaa 	b.w	8010336 <MEMS_runMagCal.constprop.21+0xc6a>
 8010de2:	2701      	movs	r7, #1
 8010de4:	f7ff bb7d 	b.w	80104e2 <MEMS_runMagCal.constprop.21+0xe16>
 8010de8:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8010dec:	e76f      	b.n	8010cce <MEMS_runMagCal.constprop.21+0x1602>
 8010dee:	3101      	adds	r1, #1
 8010df0:	fb91 f3f5 	sdiv	r3, r1, r5
 8010df4:	fb05 1313 	mls	r3, r5, r3, r1
 8010df8:	fa0f fe83 	sxth.w	lr, r3
 8010dfc:	462a      	mov	r2, r5
 8010dfe:	e68c      	b.n	8010b1a <MEMS_runMagCal.constprop.21+0x144e>
 8010e00:	ed84 7a00 	vstr	s14, [r4]
 8010e04:	e766      	b.n	8010cd4 <MEMS_runMagCal.constprop.21+0x1608>
 8010e06:	2303      	movs	r3, #3
 8010e08:	f88b 2025 	strb.w	r2, [fp, #37]	; 0x25
 8010e0c:	f88b 307c 	strb.w	r3, [fp, #124]	; 0x7c
 8010e10:	e618      	b.n	8010a44 <MEMS_runMagCal.constprop.21+0x1378>
 8010e12:	f88b 00b0 	strb.w	r0, [fp, #176]	; 0xb0
 8010e16:	e5fc      	b.n	8010a12 <MEMS_runMagCal.constprop.21+0x1346>
 8010e18:	ed8d 7a10 	vstr	s14, [sp, #64]	; 0x40
 8010e1c:	f7fe bdd3 	b.w	800f9c6 <MEMS_runMagCal.constprop.21+0x2fa>
 8010e20:	eeb0 7a46 	vmov.f32	s14, s12
 8010e24:	2201      	movs	r2, #1
 8010e26:	f7fe bdc1 	b.w	800f9ac <MEMS_runMagCal.constprop.21+0x2e0>
 8010e2a:	f241 225b 	movw	r2, #4699	; 0x125b
 8010e2e:	4293      	cmp	r3, r2
 8010e30:	f67e aebf 	bls.w	800fbb2 <MEMS_runMagCal.constprop.21+0x4e6>
 8010e34:	f5a3 5392 	sub.w	r3, r3, #4672	; 0x1240
 8010e38:	3b1c      	subs	r3, #28
 8010e3a:	b29b      	uxth	r3, r3
 8010e3c:	f643 2298 	movw	r2, #15000	; 0x3a98
 8010e40:	4293      	cmp	r3, r2
 8010e42:	f67e aeb6 	bls.w	800fbb2 <MEMS_runMagCal.constprop.21+0x4e6>
 8010e46:	f7fe beaa 	b.w	800fb9e <MEMS_runMagCal.constprop.21+0x4d2>
 8010e4a:	ed9b 0a20 	vldr	s0, [fp, #128]	; 0x80
 8010e4e:	f008 f895 	bl	8018f7c <roundf>
 8010e52:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8010e56:	ae18      	add	r6, sp, #96	; 0x60
 8010e58:	ee17 3a90 	vmov	r3, s15
 8010e5c:	ed9b 0a21 	vldr	s0, [fp, #132]	; 0x84
 8010e60:	8033      	strh	r3, [r6, #0]
 8010e62:	f008 f88b 	bl	8018f7c <roundf>
 8010e66:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8010e6a:	ed9b 0a22 	vldr	s0, [fp, #136]	; 0x88
 8010e6e:	ee17 3a90 	vmov	r3, s15
 8010e72:	8073      	strh	r3, [r6, #2]
 8010e74:	f008 f882 	bl	8018f7c <roundf>
 8010e78:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8010e7c:	4630      	mov	r0, r6
 8010e7e:	ee17 4a90 	vmov	r4, s15
 8010e82:	ab12      	add	r3, sp, #72	; 0x48
 8010e84:	aa13      	add	r2, sp, #76	; 0x4c
 8010e86:	eeb0 0a68 	vmov.f32	s0, s17
 8010e8a:	49cc      	ldr	r1, [pc, #816]	; (80111bc <MEMS_runMagCal.constprop.21+0x1af0>)
 8010e8c:	80b4      	strh	r4, [r6, #4]
 8010e8e:	f7fd fbd5 	bl	800e63c <getMagStats.constprop.35>
 8010e92:	ed9d 7a12 	vldr	s14, [sp, #72]	; 0x48
 8010e96:	eddf 7aca 	vldr	s15, [pc, #808]	; 80111c0 <MEMS_runMagCal.constprop.21+0x1af4>
 8010e9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ea2:	d50e      	bpl.n	8010ec2 <MEMS_runMagCal.constprop.21+0x17f6>
 8010ea4:	b968      	cbnz	r0, 8010ec2 <MEMS_runMagCal.constprop.21+0x17f6>
 8010ea6:	f89b 3064 	ldrb.w	r3, [fp, #100]	; 0x64
 8010eaa:	b1b3      	cbz	r3, 8010eda <MEMS_runMagCal.constprop.21+0x180e>
 8010eac:	f89b 306d 	ldrb.w	r3, [fp, #109]	; 0x6d
 8010eb0:	ee07 3a90 	vmov	s15, r3
 8010eb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010eb8:	eef4 9ae7 	vcmpe.f32	s19, s15
 8010ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ec0:	dc0b      	bgt.n	8010eda <MEMS_runMagCal.constprop.21+0x180e>
 8010ec2:	f89b 30b0 	ldrb.w	r3, [fp, #176]	; 0xb0
 8010ec6:	f99b 50b2 	ldrsb.w	r5, [fp, #178]	; 0xb2
 8010eca:	9306      	str	r3, [sp, #24]
 8010ecc:	2300      	movs	r3, #0
 8010ece:	f89b 40b1 	ldrb.w	r4, [fp, #177]	; 0xb1
 8010ed2:	6033      	str	r3, [r6, #0]
 8010ed4:	3501      	adds	r5, #1
 8010ed6:	80b3      	strh	r3, [r6, #4]
 8010ed8:	e413      	b.n	8010702 <MEMS_runMagCal.constprop.21+0x1036>
 8010eda:	eddd 7a05 	vldr	s15, [sp, #20]
 8010ede:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8010ee2:	eddf 7ab8 	vldr	s15, [pc, #736]	; 80111c4 <MEMS_runMagCal.constprop.21+0x1af8>
 8010ee6:	2303      	movs	r3, #3
 8010ee8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010eec:	f88b 307c 	strb.w	r3, [fp, #124]	; 0x7c
 8010ef0:	f008 f844 	bl	8018f7c <roundf>
 8010ef4:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8010ef8:	ed8b 0a0a 	vstr	s0, [fp, #40]	; 0x28
 8010efc:	e538      	b.n	8010970 <MEMS_runMagCal.constprop.21+0x12a4>
 8010efe:	fb95 f1f3 	sdiv	r1, r5, r3
 8010f02:	fb03 5111 	mls	r1, r3, r1, r5
 8010f06:	b209      	sxth	r1, r1
 8010f08:	e412      	b.n	8010730 <MEMS_runMagCal.constprop.21+0x1064>
 8010f0a:	461a      	mov	r2, r3
 8010f0c:	fb95 f3f3 	sdiv	r3, r5, r3
 8010f10:	fb02 5313 	mls	r3, r2, r3, r5
 8010f14:	b21b      	sxth	r3, r3
 8010f16:	f7ff bb68 	b.w	80105ea <MEMS_runMagCal.constprop.21+0xf1e>
 8010f1a:	2301      	movs	r3, #1
 8010f1c:	9300      	str	r3, [sp, #0]
 8010f1e:	f7ff bb10 	b.w	8010542 <MEMS_runMagCal.constprop.21+0xe76>
 8010f22:	eddb 4a27 	vldr	s9, [fp, #156]	; 0x9c
 8010f26:	eddb 5a23 	vldr	s11, [fp, #140]	; 0x8c
 8010f2a:	ed9b 6a2b 	vldr	s12, [fp, #172]	; 0xac
 8010f2e:	ee75 5aa4 	vadd.f32	s11, s11, s9
 8010f32:	eeb0 4a08 	vmov.f32	s8, #8	; 0x40400000  3.0
 8010f36:	ee75 5a86 	vadd.f32	s11, s11, s12
 8010f3a:	eef7 4a02 	vmov.f32	s9, #114	; 0x3f900000  1.125
 8010f3e:	ee85 6a84 	vdiv.f32	s12, s11, s8
 8010f42:	eeb4 6ae4 	vcmpe.f32	s12, s9
 8010f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f4a:	d529      	bpl.n	8010fa0 <MEMS_runMagCal.constprop.21+0x18d4>
 8010f4c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8010f50:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8010f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f58:	bfd8      	it	le
 8010f5a:	eeb0 6a65 	vmovle.f32	s12, s11
 8010f5e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010f62:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8010f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f6a:	f73f ad01 	bgt.w	8010970 <MEMS_runMagCal.constprop.21+0x12a4>
 8010f6e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8010f72:	eeb4 5ac7 	vcmpe.f32	s10, s14
 8010f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f7a:	f73f acf9 	bgt.w	8010970 <MEMS_runMagCal.constprop.21+0x12a4>
 8010f7e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8010f82:	eeb4 5ae6 	vcmpe.f32	s10, s13
 8010f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f8a:	f73f acf1 	bgt.w	8010970 <MEMS_runMagCal.constprop.21+0x12a4>
 8010f8e:	2300      	movs	r3, #0
 8010f90:	9300      	str	r3, [sp, #0]
 8010f92:	f7ff bb1c 	b.w	80105ce <MEMS_runMagCal.constprop.21+0xf02>
 8010f96:	460b      	mov	r3, r1
 8010f98:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
 8010f9c:	f7ff baba 	b.w	8010514 <MEMS_runMagCal.constprop.21+0xe48>
 8010fa0:	eeb0 6a64 	vmov.f32	s12, s9
 8010fa4:	e7db      	b.n	8010f5e <MEMS_runMagCal.constprop.21+0x1892>
 8010fa6:	4551      	cmp	r1, sl
 8010fa8:	4613      	mov	r3, r2
 8010faa:	daf5      	bge.n	8010f98 <MEMS_runMagCal.constprop.21+0x18cc>
 8010fac:	2701      	movs	r7, #1
 8010fae:	f7ff ba9f 	b.w	80104f0 <MEMS_runMagCal.constprop.21+0xe24>
 8010fb2:	2220      	movs	r2, #32
 8010fb4:	2100      	movs	r1, #0
 8010fb6:	a82e      	add	r0, sp, #184	; 0xb8
 8010fb8:	f009 ffe1 	bl	801af7e <memset>
 8010fbc:	eddf 7a82 	vldr	s15, [pc, #520]	; 80111c8 <MEMS_runMagCal.constprop.21+0x1afc>
 8010fc0:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 8010fc4:	ee07 aa90 	vmov	s15, sl
 8010fc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010fcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fd4:	d409      	bmi.n	8010fea <MEMS_runMagCal.constprop.21+0x191e>
 8010fd6:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8010fda:	edcd 7a01 	vstr	s15, [sp, #4]
 8010fde:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8010fe2:	ee07 3a90 	vmov	s15, r3
 8010fe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010fea:	eddf 6a80 	vldr	s13, [pc, #512]	; 80111ec <MEMS_runMagCal.constprop.21+0x1b20>
 8010fee:	ee86 7aa8 	vdiv.f32	s14, s13, s17
 8010ff2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ffa:	d409      	bmi.n	8011010 <MEMS_runMagCal.constprop.21+0x1944>
 8010ffc:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8011000:	edcd 7a01 	vstr	s15, [sp, #4]
 8011004:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8011008:	ee07 3a90 	vmov	s15, r3
 801100c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011010:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8011014:	eddf 6a75 	vldr	s13, [pc, #468]	; 80111ec <MEMS_runMagCal.constprop.21+0x1b20>
 8011018:	eddf 5a6c 	vldr	s11, [pc, #432]	; 80111cc <MEMS_runMagCal.constprop.21+0x1b00>
 801101c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8011020:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8011024:	ee67 7a06 	vmul.f32	s15, s14, s12
 8011028:	eef4 7ae5 	vcmpe.f32	s15, s11
 801102c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011030:	f340 8626 	ble.w	8011c80 <MEMS_runMagCal.constprop.21+0x25b4>
 8011034:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8011038:	eef4 7ac7 	vcmpe.f32	s15, s14
 801103c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011040:	f140 861e 	bpl.w	8011c80 <MEMS_runMagCal.constprop.21+0x25b4>
 8011044:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011048:	ee77 7a87 	vadd.f32	s15, s15, s14
 801104c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011050:	ee27 caa6 	vmul.f32	s24, s15, s13
 8011054:	eddd 6a1a 	vldr	s13, [sp, #104]	; 0x68
 8011058:	ed9d 7a1b 	vldr	s14, [sp, #108]	; 0x6c
 801105c:	eddd 7a1c 	vldr	s15, [sp, #112]	; 0x70
 8011060:	eddf aa60 	vldr	s21, [pc, #384]	; 80111e4 <MEMS_runMagCal.constprop.21+0x1b18>
 8011064:	ed9f aa5a 	vldr	s20, [pc, #360]	; 80111d0 <MEMS_runMagCal.constprop.21+0x1b04>
 8011068:	eddf ba5a 	vldr	s23, [pc, #360]	; 80111d4 <MEMS_runMagCal.constprop.21+0x1b08>
 801106c:	ed9f ba5a 	vldr	s22, [pc, #360]	; 80111d8 <MEMS_runMagCal.constprop.21+0x1b0c>
 8011070:	ed8d ca31 	vstr	s24, [sp, #196]	; 0xc4
 8011074:	ee66 6aa8 	vmul.f32	s13, s13, s17
 8011078:	ee27 7a28 	vmul.f32	s14, s14, s17
 801107c:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8011080:	ed8d ca34 	vstr	s24, [sp, #208]	; 0xd0
 8011084:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 8011088:	ed8d 7a2f 	vstr	s14, [sp, #188]	; 0xbc
 801108c:	edcd 7a30 	vstr	s15, [sp, #192]	; 0xc0
 8011090:	2400      	movs	r4, #0
 8011092:	2500      	movs	r5, #0
 8011094:	4629      	mov	r1, r5
 8011096:	2240      	movs	r2, #64	; 0x40
 8011098:	a836      	add	r0, sp, #216	; 0xd8
 801109a:	9521      	str	r5, [sp, #132]	; 0x84
 801109c:	9522      	str	r5, [sp, #136]	; 0x88
 801109e:	9523      	str	r5, [sp, #140]	; 0x8c
 80110a0:	9524      	str	r5, [sp, #144]	; 0x90
 80110a2:	951d      	str	r5, [sp, #116]	; 0x74
 80110a4:	951e      	str	r5, [sp, #120]	; 0x78
 80110a6:	951f      	str	r5, [sp, #124]	; 0x7c
 80110a8:	9520      	str	r5, [sp, #128]	; 0x80
 80110aa:	f009 ff68 	bl	801af7e <memset>
 80110ae:	4629      	mov	r1, r5
 80110b0:	2240      	movs	r2, #64	; 0x40
 80110b2:	a846      	add	r0, sp, #280	; 0x118
 80110b4:	f009 ff63 	bl	801af7e <memset>
 80110b8:	eeb4 caea 	vcmpe.f32	s24, s21
 80110bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110c0:	f100 85d7 	bmi.w	8011c72 <MEMS_runMagCal.constprop.21+0x25a6>
 80110c4:	f89b 00b0 	ldrb.w	r0, [fp, #176]	; 0xb0
 80110c8:	f89b 30b1 	ldrb.w	r3, [fp, #177]	; 0xb1
 80110cc:	f99b 20b2 	ldrsb.w	r2, [fp, #178]	; 0xb2
 80110d0:	4298      	cmp	r0, r3
 80110d2:	f102 0201 	add.w	r2, r2, #1
 80110d6:	f000 8158 	beq.w	801138a <MEMS_runMagCal.constprop.21+0x1cbe>
 80110da:	1a12      	subs	r2, r2, r0
 80110dc:	fb92 f1f3 	sdiv	r1, r2, r3
 80110e0:	fb03 2211 	mls	r2, r3, r1, r2
 80110e4:	b216      	sxth	r6, r2
 80110e6:	2e00      	cmp	r6, #0
 80110e8:	bfbc      	itt	lt
 80110ea:	18d2      	addlt	r2, r2, r3
 80110ec:	b216      	sxthlt	r6, r2
 80110ee:	ed9f ca3b 	vldr	s24, [pc, #236]	; 80111dc <MEMS_runMagCal.constprop.21+0x1b10>
 80110f2:	eef0 ca4c 	vmov.f32	s25, s24
 80110f6:	eeb0 da4c 	vmov.f32	s26, s24
 80110fa:	eef0 da4c 	vmov.f32	s27, s24
 80110fe:	eeb0 ea4c 	vmov.f32	s28, s24
 8011102:	eef0 ea4c 	vmov.f32	s29, s24
 8011106:	2800      	cmp	r0, #0
 8011108:	f000 80e8 	beq.w	80112dc <MEMS_runMagCal.constprop.21+0x1c10>
 801110c:	2500      	movs	r5, #0
 801110e:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
 8011112:	461a      	mov	r2, r3
 8011114:	19a9      	adds	r1, r5, r6
 8011116:	fb91 f3f2 	sdiv	r3, r1, r2
 801111a:	fb02 1313 	mls	r3, r2, r3, r1
 801111e:	b2db      	uxtb	r3, r3
 8011120:	3304      	adds	r3, #4
 8011122:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8011126:	eddd 7a2f 	vldr	s15, [sp, #188]	; 0xbc
 801112a:	f9b3 20b2 	ldrsh.w	r2, [r3, #178]	; 0xb2
 801112e:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8011132:	ed9d 6a30 	vldr	s12, [sp, #192]	; 0xc0
 8011136:	ee09 2a10 	vmov	s18, r2
 801113a:	f9b3 20b4 	ldrsh.w	r2, [r3, #180]	; 0xb4
 801113e:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 8011142:	ee07 2a10 	vmov	s14, r2
 8011146:	ee0f 3a90 	vmov	s31, r3
 801114a:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 801114e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011152:	eef8 faef 	vcvt.f32.s32	s31, s31
 8011156:	ee27 7a28 	vmul.f32	s14, s14, s17
 801115a:	ee29 9a28 	vmul.f32	s18, s18, s17
 801115e:	ee37 8a67 	vsub.f32	s16, s14, s15
 8011162:	ee39 9a66 	vsub.f32	s18, s18, s13
 8011166:	ee6f 7aa8 	vmul.f32	s15, s31, s17
 801116a:	ee29 0a09 	vmul.f32	s0, s18, s18
 801116e:	ee77 fac6 	vsub.f32	s31, s15, s12
 8011172:	ee28 7a08 	vmul.f32	s14, s16, s16
 8011176:	ee6f 7aaf 	vmul.f32	s15, s31, s31
 801117a:	ee30 0a07 	vadd.f32	s0, s0, s14
 801117e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011182:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8011186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801118a:	eeb1 6ac0 	vsqrt.f32	s12, s0
 801118e:	d505      	bpl.n	801119c <MEMS_runMagCal.constprop.21+0x1ad0>
 8011190:	ed8d 6a01 	vstr	s12, [sp, #4]
 8011194:	f008 f88e 	bl	80192b4 <sqrtf>
 8011198:	ed9d 6a01 	vldr	s12, [sp, #4]
 801119c:	eeb4 6aca 	vcmpe.f32	s12, s20
 80111a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111a4:	f105 0201 	add.w	r2, r5, #1
 80111a8:	d52c      	bpl.n	8011204 <MEMS_runMagCal.constprop.21+0x1b38>
 80111aa:	f89b 30b0 	ldrb.w	r3, [fp, #176]	; 0xb0
 80111ae:	b2d5      	uxtb	r5, r2
 80111b0:	42ab      	cmp	r3, r5
 80111b2:	f240 8093 	bls.w	80112dc <MEMS_runMagCal.constprop.21+0x1c10>
 80111b6:	f89b 20b1 	ldrb.w	r2, [fp, #177]	; 0xb1
 80111ba:	e7ab      	b.n	8011114 <MEMS_runMagCal.constprop.21+0x1a48>
 80111bc:	20001724 	.word	0x20001724
 80111c0:	3ff4cccd 	.word	0x3ff4cccd
 80111c4:	3a83126f 	.word	0x3a83126f
 80111c8:	430d0000 	.word	0x430d0000
 80111cc:	3e4ccccd 	.word	0x3e4ccccd
 80111d0:	358637bd 	.word	0x358637bd
 80111d4:	3e99999a 	.word	0x3e99999a
 80111d8:	3f666666 	.word	0x3f666666
 80111dc:	00000000 	.word	0x00000000
 80111e0:	400ccccd 	.word	0x400ccccd
 80111e4:	3dcccccd 	.word	0x3dcccccd
 80111e8:	41f00001 	.word	0x41f00001
 80111ec:	423c0000 	.word	0x423c0000
 80111f0:	3f8ccccd 	.word	0x3f8ccccd
 80111f4:	3f266666 	.word	0x3f266666
 80111f8:	3ee66666 	.word	0x3ee66666
 80111fc:	3f19999a 	.word	0x3f19999a
 8011200:	433d0000 	.word	0x433d0000
 8011204:	eecf 7a06 	vdiv.f32	s15, s30, s12
 8011208:	f89b 30b0 	ldrb.w	r3, [fp, #176]	; 0xb0
 801120c:	b2d5      	uxtb	r5, r2
 801120e:	42ab      	cmp	r3, r5
 8011210:	eddd 5a31 	vldr	s11, [sp, #196]	; 0xc4
 8011214:	ed9d 5a36 	vldr	s10, [sp, #216]	; 0xd8
 8011218:	ed9d 4a22 	vldr	s8, [sp, #136]	; 0x88
 801121c:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8011220:	ee69 6a67 	vnmul.f32	s13, s18, s15
 8011224:	ee28 7a67 	vnmul.f32	s14, s16, s15
 8011228:	ee35 6ac6 	vsub.f32	s12, s11, s12
 801122c:	ee6f 7ae7 	vnmul.f32	s15, s31, s15
 8011230:	ee66 5aa6 	vmul.f32	s11, s13, s13
 8011234:	ee66 4a26 	vmul.f32	s9, s12, s13
 8011238:	ee7d dae6 	vsub.f32	s27, s27, s13
 801123c:	ee35 5a25 	vadd.f32	s10, s10, s11
 8011240:	ee66 5a87 	vmul.f32	s11, s13, s14
 8011244:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8011248:	ee7c cac7 	vsub.f32	s25, s25, s14
 801124c:	ee7e eaa5 	vadd.f32	s29, s29, s11
 8011250:	ee3e ea26 	vadd.f32	s28, s28, s13
 8011254:	ee67 5a07 	vmul.f32	s11, s14, s14
 8011258:	ee66 6a07 	vmul.f32	s13, s12, s14
 801125c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011260:	ee34 4a26 	vadd.f32	s8, s8, s13
 8011264:	ee3d da07 	vadd.f32	s26, s26, s14
 8011268:	ed9d 7a3b 	vldr	s14, [sp, #236]	; 0xec
 801126c:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8011270:	edcd da39 	vstr	s27, [sp, #228]	; 0xe4
 8011274:	ee77 5a25 	vadd.f32	s11, s14, s11
 8011278:	ee26 7a27 	vmul.f32	s14, s12, s15
 801127c:	ee3c ca67 	vsub.f32	s24, s24, s15
 8011280:	ee76 6a87 	vadd.f32	s13, s13, s14
 8011284:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011288:	ed9d 7a40 	vldr	s14, [sp, #256]	; 0x100
 801128c:	edcd ca3d 	vstr	s25, [sp, #244]	; 0xf4
 8011290:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011294:	ed9d 7a24 	vldr	s14, [sp, #144]	; 0x90
 8011298:	ed8d ca41 	vstr	s24, [sp, #260]	; 0x104
 801129c:	ee37 7a46 	vsub.f32	s14, s14, s12
 80112a0:	ed9d 6a45 	vldr	s12, [sp, #276]	; 0x114
 80112a4:	ed8d 5a36 	vstr	s10, [sp, #216]	; 0xd8
 80112a8:	ee73 4aa4 	vadd.f32	s9, s7, s9
 80112ac:	ee36 6a0f 	vadd.f32	s12, s12, s30
 80112b0:	edcd 4a21 	vstr	s9, [sp, #132]	; 0x84
 80112b4:	edcd ea37 	vstr	s29, [sp, #220]	; 0xdc
 80112b8:	ed8d ea38 	vstr	s28, [sp, #224]	; 0xe0
 80112bc:	ed8d 4a22 	vstr	s8, [sp, #136]	; 0x88
 80112c0:	ed8d da3c 	vstr	s26, [sp, #240]	; 0xf0
 80112c4:	edcd 5a3b 	vstr	s11, [sp, #236]	; 0xec
 80112c8:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80112cc:	edcd 7a40 	vstr	s15, [sp, #256]	; 0x100
 80112d0:	ed8d 7a24 	vstr	s14, [sp, #144]	; 0x90
 80112d4:	ed8d 6a45 	vstr	s12, [sp, #276]	; 0x114
 80112d8:	f63f af6d 	bhi.w	80111b6 <MEMS_runMagCal.constprop.21+0x1aea>
 80112dc:	2100      	movs	r1, #0
 80112de:	a846      	add	r0, sp, #280	; 0x118
 80112e0:	2240      	movs	r2, #64	; 0x40
 80112e2:	f10d 09d8 	add.w	r9, sp, #216	; 0xd8
 80112e6:	edcd ea3a 	vstr	s29, [sp, #232]	; 0xe8
 80112ea:	ed8d ea3e 	vstr	s28, [sp, #248]	; 0xf8
 80112ee:	edcd da42 	vstr	s27, [sp, #264]	; 0x108
 80112f2:	ed8d da3f 	vstr	s26, [sp, #252]	; 0xfc
 80112f6:	edcd ca43 	vstr	s25, [sp, #268]	; 0x10c
 80112fa:	ed8d ca44 	vstr	s24, [sp, #272]	; 0x110
 80112fe:	4606      	mov	r6, r0
 8011300:	46c8      	mov	r8, r9
 8011302:	f009 fe3c 	bl	801af7e <memset>
 8011306:	2700      	movs	r7, #0
 8011308:	4621      	mov	r1, r4
 801130a:	b27a      	sxtb	r2, r7
 801130c:	463b      	mov	r3, r7
 801130e:	ed5f 7a4d 	vldr	s15, [pc, #-308]	; 80111dc <MEMS_runMagCal.constprop.21+0x1b10>
 8011312:	46ca      	mov	sl, r9
 8011314:	4617      	mov	r7, r2
 8011316:	ac4a      	add	r4, sp, #296	; 0x128
 8011318:	464a      	mov	r2, r9
 801131a:	2500      	movs	r5, #0
 801131c:	4689      	mov	r9, r1
 801131e:	4619      	mov	r1, r3
 8011320:	b26b      	sxtb	r3, r5
 8011322:	42bb      	cmp	r3, r7
 8011324:	f000 859d 	beq.w	8011e62 <MEMS_runMagCal.constprop.21+0x2796>
 8011328:	00ab      	lsls	r3, r5, #2
 801132a:	1958      	adds	r0, r3, r5
 801132c:	f50d 7e8c 	add.w	lr, sp, #280	; 0x118
 8011330:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
 8011334:	edd0 6a00 	vldr	s13, [r0]
 8011338:	eeb0 7ae6 	vabs.f32	s14, s13
 801133c:	eeb4 7aca 	vcmpe.f32	s14, s20
 8011340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011344:	f100 8575 	bmi.w	8011e32 <MEMS_runMagCal.constprop.21+0x2766>
 8011348:	ed9a 7a00 	vldr	s14, [sl]
 801134c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011350:	4433      	add	r3, r6
 8011352:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8011356:	ed83 7a00 	vstr	s14, [r3]
 801135a:	3501      	adds	r5, #1
 801135c:	b26b      	sxtb	r3, r5
 801135e:	429f      	cmp	r7, r3
 8011360:	db19      	blt.n	8011396 <MEMS_runMagCal.constprop.21+0x1cca>
 8011362:	ed5f 7a62 	vldr	s15, [pc, #-392]	; 80111dc <MEMS_runMagCal.constprop.21+0x1b10>
 8011366:	eb06 0e85 	add.w	lr, r6, r5, lsl #2
 801136a:	4620      	mov	r0, r4
 801136c:	4633      	mov	r3, r6
 801136e:	ecf3 6a01 	vldmia	r3!, {s13}
 8011372:	ecb0 7a01 	vldmia	r0!, {s14}
 8011376:	ee26 7a87 	vmul.f32	s14, s13, s14
 801137a:	4573      	cmp	r3, lr
 801137c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011380:	d1f5      	bne.n	801136e <MEMS_runMagCal.constprop.21+0x1ca2>
 8011382:	f10a 0a04 	add.w	sl, sl, #4
 8011386:	3410      	adds	r4, #16
 8011388:	e7ca      	b.n	8011320 <MEMS_runMagCal.constprop.21+0x1c54>
 801138a:	fb92 f6f0 	sdiv	r6, r2, r0
 801138e:	fb00 2216 	mls	r2, r0, r6, r2
 8011392:	b216      	sxth	r6, r2
 8011394:	e6ab      	b.n	80110ee <MEMS_runMagCal.constprop.21+0x1a22>
 8011396:	460f      	mov	r7, r1
 8011398:	3701      	adds	r7, #1
 801139a:	2f04      	cmp	r7, #4
 801139c:	4649      	mov	r1, r9
 801139e:	f106 0610 	add.w	r6, r6, #16
 80113a2:	f102 0910 	add.w	r9, r2, #16
 80113a6:	f108 0814 	add.w	r8, r8, #20
 80113aa:	d1ae      	bne.n	801130a <MEMS_runMagCal.constprop.21+0x1c3e>
 80113ac:	460c      	mov	r4, r1
 80113ae:	aa21      	add	r2, sp, #132	; 0x84
 80113b0:	a91d      	add	r1, sp, #116	; 0x74
 80113b2:	a846      	add	r0, sp, #280	; 0x118
 80113b4:	f7fd f8c4 	bl	800e540 <llEvaluate.constprop.32>
 80113b8:	ae25      	add	r6, sp, #148	; 0x94
 80113ba:	af21      	add	r7, sp, #132	; 0x84
 80113bc:	f10d 0990 	add.w	r9, sp, #144	; 0x90
 80113c0:	eeb0 9a6a 	vmov.f32	s18, s21
 80113c4:	2500      	movs	r5, #0
 80113c6:	f04f 587e 	mov.w	r8, #1065353216	; 0x3f800000
 80113ca:	9521      	str	r5, [sp, #132]	; 0x84
 80113cc:	9522      	str	r5, [sp, #136]	; 0x88
 80113ce:	9523      	str	r5, [sp, #140]	; 0x8c
 80113d0:	9524      	str	r5, [sp, #144]	; 0x90
 80113d2:	aa21      	add	r2, sp, #132	; 0x84
 80113d4:	a925      	add	r1, sp, #148	; 0x94
 80113d6:	a846      	add	r0, sp, #280	; 0x118
 80113d8:	f847 8b04 	str.w	r8, [r7], #4
 80113dc:	f7fd f8b0 	bl	800e540 <llEvaluate.constprop.32>
 80113e0:	ed96 0a00 	vldr	s0, [r6]
 80113e4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80113e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113ec:	f340 80ed 	ble.w	80115ca <MEMS_runMagCal.constprop.21+0x1efe>
 80113f0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80113f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113f8:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80113fc:	d501      	bpl.n	8011402 <MEMS_runMagCal.constprop.21+0x1d36>
 80113fe:	f007 ff59 	bl	80192b4 <sqrtf>
 8011402:	eeb4 9ac8 	vcmpe.f32	s18, s16
 8011406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801140a:	f340 851c 	ble.w	8011e46 <MEMS_runMagCal.constprop.21+0x277a>
 801140e:	45b9      	cmp	r9, r7
 8011410:	f106 0604 	add.w	r6, r6, #4
 8011414:	d1d9      	bne.n	80113ca <MEMS_runMagCal.constprop.21+0x1cfe>
 8011416:	ed9d ca31 	vldr	s24, [sp, #196]	; 0xc4
 801141a:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801141e:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8011422:	ee2c 7a07 	vmul.f32	s14, s24, s14
 8011426:	eef4 7ac7 	vcmpe.f32	s15, s14
 801142a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801142e:	d503      	bpl.n	8011438 <MEMS_runMagCal.constprop.21+0x1d6c>
 8011430:	ed8d 7a20 	vstr	s14, [sp, #128]	; 0x80
 8011434:	eef0 7a47 	vmov.f32	s15, s14
 8011438:	eddd 4a1d 	vldr	s9, [sp, #116]	; 0x74
 801143c:	eddd 5a1e 	vldr	s11, [sp, #120]	; 0x78
 8011440:	eddd 6a1f 	vldr	s13, [sp, #124]	; 0x7c
 8011444:	ed9d 4a2e 	vldr	s8, [sp, #184]	; 0xb8
 8011448:	ed9d 5a2f 	vldr	s10, [sp, #188]	; 0xbc
 801144c:	ed9d 6a30 	vldr	s12, [sp, #192]	; 0xc0
 8011450:	eeb0 7ae4 	vabs.f32	s14, s9
 8011454:	eef0 3ae5 	vabs.f32	s7, s11
 8011458:	eef4 3a47 	vcmp.f32	s7, s14
 801145c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011460:	bf48      	it	mi
 8011462:	eef0 3a47 	vmovmi.f32	s7, s14
 8011466:	eeb0 7ae6 	vabs.f32	s14, s13
 801146a:	eeb4 7a63 	vcmp.f32	s14, s7
 801146e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011472:	bf48      	it	mi
 8011474:	eeb0 7a63 	vmovmi.f32	s14, s7
 8011478:	ee3c ca27 	vadd.f32	s24, s24, s15
 801147c:	ee74 4a24 	vadd.f32	s9, s8, s9
 8011480:	ee75 5a25 	vadd.f32	s11, s10, s11
 8011484:	ee76 6a26 	vadd.f32	s13, s12, s13
 8011488:	eeb4 7aeb 	vcmpe.f32	s14, s23
 801148c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011490:	ed8d ca31 	vstr	s24, [sp, #196]	; 0xc4
 8011494:	eef0 7ae7 	vabs.f32	s15, s15
 8011498:	edcd 4a2e 	vstr	s9, [sp, #184]	; 0xb8
 801149c:	edcd 5a2f 	vstr	s11, [sp, #188]	; 0xbc
 80114a0:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 80114a4:	d506      	bpl.n	80114b4 <MEMS_runMagCal.constprop.21+0x1de8>
 80114a6:	eef4 7acb 	vcmpe.f32	s15, s22
 80114aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114ae:	d501      	bpl.n	80114b4 <MEMS_runMagCal.constprop.21+0x1de8>
 80114b0:	2c01      	cmp	r4, #1
 80114b2:	d804      	bhi.n	80114be <MEMS_runMagCal.constprop.21+0x1df2>
 80114b4:	3401      	adds	r4, #1
 80114b6:	b2e4      	uxtb	r4, r4
 80114b8:	2c05      	cmp	r4, #5
 80114ba:	f47f adea 	bne.w	8011092 <MEMS_runMagCal.constprop.21+0x19c6>
 80114be:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80114c2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80114c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114ca:	dc0e      	bgt.n	80114ea <MEMS_runMagCal.constprop.21+0x1e1e>
 80114cc:	ed1f 7abc 	vldr	s14, [pc, #-752]	; 80111e0 <MEMS_runMagCal.constprop.21+0x1b14>
 80114d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80114d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114d8:	dc07      	bgt.n	80114ea <MEMS_runMagCal.constprop.21+0x1e1e>
 80114da:	ed5f 7abe 	vldr	s15, [pc, #-760]	; 80111e4 <MEMS_runMagCal.constprop.21+0x1b18>
 80114de:	eeb4 cae7 	vcmpe.f32	s24, s15
 80114e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114e6:	f200 837e 	bhi.w	8011be6 <MEMS_runMagCal.constprop.21+0x251a>
 80114ea:	ed1f 8ac0 	vldr	s16, [pc, #-768]	; 80111ec <MEMS_runMagCal.constprop.21+0x1b20>
 80114ee:	ed1f 9ac2 	vldr	s18, [pc, #-776]	; 80111e8 <MEMS_runMagCal.constprop.21+0x1b1c>
 80114f2:	ed8d 8a34 	vstr	s16, [sp, #208]	; 0xd0
 80114f6:	eeb0 aa48 	vmov.f32	s20, s16
 80114fa:	2224      	movs	r2, #36	; 0x24
 80114fc:	2100      	movs	r1, #0
 80114fe:	a846      	add	r0, sp, #280	; 0x118
 8011500:	f009 fd3d 	bl	801af7e <memset>
 8011504:	ed5f 5ac7 	vldr	s11, [pc, #-796]	; 80111ec <MEMS_runMagCal.constprop.21+0x1b20>
 8011508:	ed9d 6a2e 	vldr	s12, [sp, #184]	; 0xb8
 801150c:	eddd 6a2f 	vldr	s13, [sp, #188]	; 0xbc
 8011510:	ed9d 7a30 	vldr	s14, [sp, #192]	; 0xc0
 8011514:	eec5 7a8c 	vdiv.f32	s15, s11, s24
 8011518:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 801151c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011520:	ee86 0a28 	vdiv.f32	s0, s12, s17
 8011524:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8011528:	edcd 7a4a 	vstr	s15, [sp, #296]	; 0x128
 801152c:	edcd 7a4e 	vstr	s15, [sp, #312]	; 0x138
 8011530:	ee86 baa8 	vdiv.f32	s22, s13, s17
 8011534:	eec7 aa28 	vdiv.f32	s21, s14, s17
 8011538:	f100 8352 	bmi.w	8011be0 <MEMS_runMagCal.constprop.21+0x2514>
 801153c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011544:	f100 834c 	bmi.w	8011be0 <MEMS_runMagCal.constprop.21+0x2514>
 8011548:	ee88 7a0a 	vdiv.f32	s14, s16, s20
 801154c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8011550:	ee38 8a47 	vsub.f32	s16, s16, s14
 8011554:	ed5f 6ada 	vldr	s13, [pc, #-872]	; 80111f0 <MEMS_runMagCal.constprop.21+0x1b24>
 8011558:	ed1f 6ada 	vldr	s12, [pc, #-872]	; 80111f4 <MEMS_runMagCal.constprop.21+0x1b28>
 801155c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8011560:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011564:	eef0 6ae6 	vabs.f32	s13, s13
 8011568:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801156c:	eef4 6ac6 	vcmpe.f32	s13, s12
 8011570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011574:	eeb0 7ac7 	vabs.f32	s14, s14
 8011578:	f140 8329 	bpl.w	8011bce <MEMS_runMagCal.constprop.21+0x2502>
 801157c:	ed5f 6ae2 	vldr	s13, [pc, #-904]	; 80111f8 <MEMS_runMagCal.constprop.21+0x1b2c>
 8011580:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011588:	f340 8321 	ble.w	8011bce <MEMS_runMagCal.constprop.21+0x2502>
 801158c:	ed5f 7ae5 	vldr	s15, [pc, #-916]	; 80111fc <MEMS_runMagCal.constprop.21+0x1b30>
 8011590:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8011594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011598:	d51a      	bpl.n	80115d0 <MEMS_runMagCal.constprop.21+0x1f04>
 801159a:	ed5f 7ae7 	vldr	s15, [pc, #-924]	; 8011200 <MEMS_runMagCal.constprop.21+0x1b34>
 801159e:	f89b 30b0 	ldrb.w	r3, [fp, #176]	; 0xb0
 80115a2:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 80115a6:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80115aa:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80115ae:	ee87 0aa8 	vdiv.f32	s0, s15, s17
 80115b2:	ed8d 7a00 	vstr	s14, [sp]
 80115b6:	f8bd 0000 	ldrh.w	r0, [sp]
 80115ba:	b113      	cbz	r3, 80115c2 <MEMS_runMagCal.constprop.21+0x1ef6>
 80115bc:	3b01      	subs	r3, #1
 80115be:	f88b 30b0 	strb.w	r3, [fp, #176]	; 0xb0
 80115c2:	f7fd fd3b 	bl	800f03c <MEMS_updateMagBufferIndex.constprop.33>
 80115c6:	f7ff b9c5 	b.w	8010954 <MEMS_runMagCal.constprop.21+0x1288>
 80115ca:	eeb2 9a04 	vmov.f32	s18, #36	; 0x41200000  10.0
 80115ce:	e71e      	b.n	801140e <MEMS_runMagCal.constprop.21+0x1d42>
 80115d0:	f007 fcd4 	bl	8018f7c <roundf>
 80115d4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80115d8:	ae18      	add	r6, sp, #96	; 0x60
 80115da:	ee17 3a90 	vmov	r3, s15
 80115de:	eeb0 0a4b 	vmov.f32	s0, s22
 80115e2:	8033      	strh	r3, [r6, #0]
 80115e4:	f007 fcca 	bl	8018f7c <roundf>
 80115e8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80115ec:	eeb0 0a6a 	vmov.f32	s0, s21
 80115f0:	ee17 3a90 	vmov	r3, s15
 80115f4:	8073      	strh	r3, [r6, #2]
 80115f6:	f007 fcc1 	bl	8018f7c <roundf>
 80115fa:	eddd 7a05 	vldr	s15, [sp, #20]
 80115fe:	eefd 6ac0 	vcvt.s32.f32	s13, s0
 8011602:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011606:	ee16 3a90 	vmov	r3, s13
 801160a:	eddf 7aab 	vldr	s15, [pc, #684]	; 80118b8 <MEMS_runMagCal.constprop.21+0x21ec>
 801160e:	80b3      	strh	r3, [r6, #4]
 8011610:	ee27 0a27 	vmul.f32	s0, s14, s15
 8011614:	f007 fcb2 	bl	8018f7c <roundf>
 8011618:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801161c:	ab12      	add	r3, sp, #72	; 0x48
 801161e:	4630      	mov	r0, r6
 8011620:	eeb0 0a68 	vmov.f32	s0, s17
 8011624:	aa13      	add	r2, sp, #76	; 0x4c
 8011626:	a946      	add	r1, sp, #280	; 0x118
 8011628:	edcb 7a0a 	vstr	s15, [fp, #40]	; 0x28
 801162c:	f7fd f806 	bl	800e63c <getMagStats.constprop.35>
 8011630:	f89b 50b0 	ldrb.w	r5, [fp, #176]	; 0xb0
 8011634:	eddf 6aa1 	vldr	s13, [pc, #644]	; 80118bc <MEMS_runMagCal.constprop.21+0x21f0>
 8011638:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801163c:	005b      	lsls	r3, r3, #1
 801163e:	ee07 3a90 	vmov	s15, r3
 8011642:	ee07 0a10 	vmov	s14, r0
 8011646:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801164a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801164e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011652:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801165a:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
 801165e:	f300 82b3 	bgt.w	8011bc8 <MEMS_runMagCal.constprop.21+0x24fc>
 8011662:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8011666:	eef4 7ac7 	vcmpe.f32	s15, s14
 801166a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801166e:	bfc3      	ittte	gt
 8011670:	f89b 9064 	ldrbgt.w	r9, [fp, #100]	; 0x64
 8011674:	fab9 f989 	clzgt	r9, r9
 8011678:	ea4f 1959 	movgt.w	r9, r9, lsr #5
 801167c:	f04f 0901 	movle.w	r9, #1
 8011680:	ee69 7aa7 	vmul.f32	s15, s19, s15
 8011684:	f8db 7028 	ldr.w	r7, [fp, #40]	; 0x28
 8011688:	9729      	str	r7, [sp, #164]	; 0xa4
 801168a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801168e:	f007 fc75 	bl	8018f7c <roundf>
 8011692:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8011696:	ee29 0a89 	vmul.f32	s0, s19, s18
 801169a:	ee17 3a90 	vmov	r3, s15
 801169e:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8
 80116a2:	f007 fc6b 	bl	8018f7c <roundf>
 80116a6:	ed9f 6a86 	vldr	s12, [pc, #536]	; 80118c0 <MEMS_runMagCal.constprop.21+0x21f4>
 80116aa:	eddd 7a4e 	vldr	s15, [sp, #312]	; 0x138
 80116ae:	eddd 6a46 	vldr	s13, [sp, #280]	; 0x118
 80116b2:	ed9d 7a4a 	vldr	s14, [sp, #296]	; 0x128
 80116b6:	88b3      	ldrh	r3, [r6, #4]
 80116b8:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
 80116bc:	ee67 7a86 	vmul.f32	s15, s15, s12
 80116c0:	ee66 6a86 	vmul.f32	s13, s13, s12
 80116c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80116c8:	ee27 7a06 	vmul.f32	s14, s14, s12
 80116cc:	edcd 7a03 	vstr	s15, [sp, #12]
 80116d0:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80116d4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80116d8:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80116dc:	edcd 6a01 	vstr	s13, [sp, #4]
 80116e0:	ed8d 7a02 	vstr	s14, [sp, #8]
 80116e4:	ee17 2a90 	vmov	r2, s15
 80116e8:	9b00      	ldr	r3, [sp, #0]
 80116ea:	6830      	ldr	r0, [r6, #0]
 80116ec:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 80116f0:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 80116f4:	f8bd 600c 	ldrh.w	r6, [sp, #12]
 80116f8:	f8cd 00aa 	str.w	r0, [sp, #170]	; 0xaa
 80116fc:	f8ad 80b0 	strh.w	r8, [sp, #176]	; 0xb0
 8011700:	f8ad 40b2 	strh.w	r4, [sp, #178]	; 0xb2
 8011704:	f8ad 60b4 	strh.w	r6, [sp, #180]	; 0xb4
 8011708:	f88d 20a9 	strb.w	r2, [sp, #169]	; 0xa9
 801170c:	b113      	cbz	r3, 8011714 <MEMS_runMagCal.constprop.21+0x2048>
 801170e:	23ff      	movs	r3, #255	; 0xff
 8011710:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8
 8011714:	2100      	movs	r1, #0
 8011716:	f88b 1024 	strb.w	r1, [fp, #36]	; 0x24
 801171a:	f1b9 0f00 	cmp.w	r9, #0
 801171e:	f43e abde 	beq.w	800fede <MEMS_runMagCal.constprop.21+0x812>
 8011722:	f89b 3064 	ldrb.w	r3, [fp, #100]	; 0x64
 8011726:	f88b 1025 	strb.w	r1, [fp, #37]	; 0x25
 801172a:	2b00      	cmp	r3, #0
 801172c:	f040 80d2 	bne.w	80118d4 <MEMS_runMagCal.constprop.21+0x2208>
 8011730:	4e64      	ldr	r6, [pc, #400]	; (80118c4 <MEMS_runMagCal.constprop.21+0x21f8>)
 8011732:	ac11      	add	r4, sp, #68	; 0x44
 8011734:	f8cb 702c 	str.w	r7, [fp, #44]	; 0x2c
 8011738:	af29      	add	r7, sp, #164	; 0xa4
 801173a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801173c:	f8df 818c 	ldr.w	r8, [pc, #396]	; 80118cc <MEMS_runMagCal.constprop.21+0x2200>
 8011740:	f8bd c0b0 	ldrh.w	ip, [sp, #176]	; 0xb0
 8011744:	f8bd e0b2 	ldrh.w	lr, [sp, #178]	; 0xb2
 8011748:	eddf 4a61 	vldr	s9, [pc, #388]	; 80118d0 <MEMS_runMagCal.constprop.21+0x2204>
 801174c:	683f      	ldr	r7, [r7, #0]
 801174e:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8011752:	f9bd 30aa 	ldrsh.w	r3, [sp, #170]	; 0xaa
 8011756:	f8bd 20b4 	ldrh.w	r2, [sp, #180]	; 0xb4
 801175a:	f8c8 7000 	str.w	r7, [r8]
 801175e:	ee05 3a10 	vmov	s10, r3
 8011762:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 8011766:	f89b 0035 	ldrb.w	r0, [fp, #53]	; 0x35
 801176a:	ee05 3a90 	vmov	s11, r3
 801176e:	f9bd 30ae 	ldrsh.w	r3, [sp, #174]	; 0xae
 8011772:	ee06 3a10 	vmov	s12, r3
 8011776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801177a:	fb03 f10c 	mul.w	r1, r3, ip
 801177e:	ee06 1a90 	vmov	s13, r1
 8011782:	fb03 f10e 	mul.w	r1, r3, lr
 8011786:	fb03 f302 	mul.w	r3, r3, r2
 801178a:	ee07 3a90 	vmov	s15, r3
 801178e:	ee07 1a10 	vmov	s14, r1
 8011792:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011796:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801179a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801179e:	ee66 6aa4 	vmul.f32	s13, s13, s9
 80117a2:	ee27 7a24 	vmul.f32	s14, s14, s9
 80117a6:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80117aa:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80117ae:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80117b2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80117b6:	2301      	movs	r3, #1
 80117b8:	2700      	movs	r7, #0
 80117ba:	22ff      	movs	r2, #255	; 0xff
 80117bc:	edcb 6a23 	vstr	s13, [fp, #140]	; 0x8c
 80117c0:	ed8b 7a27 	vstr	s14, [fp, #156]	; 0x9c
 80117c4:	edcb 7a2b 	vstr	s15, [fp, #172]	; 0xac
 80117c8:	ed8b 5a20 	vstr	s10, [fp, #128]	; 0x80
 80117cc:	edcb 5a21 	vstr	s11, [fp, #132]	; 0x84
 80117d0:	ed8b 6a22 	vstr	s12, [fp, #136]	; 0x88
 80117d4:	f88b 3064 	strb.w	r3, [fp, #100]	; 0x64
 80117d8:	f88b 307d 	strb.w	r3, [fp, #125]	; 0x7d
 80117dc:	f88b 7034 	strb.w	r7, [fp, #52]	; 0x34
 80117e0:	f88b 2036 	strb.w	r2, [fp, #54]	; 0x36
 80117e4:	2d00      	cmp	r5, #0
 80117e6:	f43e ab3d 	beq.w	800fe64 <MEMS_runMagCal.constprop.21+0x798>
 80117ea:	eddf 8a37 	vldr	s17, [pc, #220]	; 80118c8 <MEMS_runMagCal.constprop.21+0x21fc>
 80117ee:	f04f 31ff 	mov.w	r1, #4294967295
 80117f2:	463a      	mov	r2, r7
 80117f4:	f89b e0b1 	ldrb.w	lr, [fp, #177]	; 0xb1
 80117f8:	fb92 f3fe 	sdiv	r3, r2, lr
 80117fc:	fb0e 2313 	mls	r3, lr, r3, r2
 8011800:	b2db      	uxtb	r3, r3
 8011802:	3315      	adds	r3, #21
 8011804:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8011808:	eddb 3a20 	vldr	s7, [fp, #128]	; 0x80
 801180c:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	; 0x2a
 8011810:	ed9b 4a21 	vldr	s8, [fp, #132]	; 0x84
 8011814:	eddb 6a23 	vldr	s13, [fp, #140]	; 0x8c
 8011818:	ed9b 7a27 	vldr	s14, [fp, #156]	; 0x9c
 801181c:	eddb 5a22 	vldr	s11, [fp, #136]	; 0x88
 8011820:	eddb 7a2b 	vldr	s15, [fp, #172]	; 0xac
 8011824:	ee04 2a90 	vmov	s9, r2
 8011828:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 801182c:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8011830:	ee05 2a10 	vmov	s10, r2
 8011834:	ee06 3a10 	vmov	s12, r3
 8011838:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 801183c:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8011840:	ee74 4ae3 	vsub.f32	s9, s9, s7
 8011844:	ee35 5a44 	vsub.f32	s10, s10, s8
 8011848:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801184c:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8011850:	ee25 7a07 	vmul.f32	s14, s10, s14
 8011854:	ee36 6a65 	vsub.f32	s12, s12, s11
 8011858:	ee66 6aa6 	vmul.f32	s13, s13, s13
 801185c:	ee27 7a07 	vmul.f32	s14, s14, s14
 8011860:	ee66 7a27 	vmul.f32	s15, s12, s15
 8011864:	ee36 0a87 	vadd.f32	s0, s13, s14
 8011868:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801186c:	1c4b      	adds	r3, r1, #1
 801186e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011872:	fb93 f1f0 	sdiv	r1, r3, r0
 8011876:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801187a:	fb00 3111 	mls	r1, r0, r1, r3
 801187e:	b249      	sxtb	r1, r1
 8011880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011884:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8011888:	f88b 1036 	strb.w	r1, [fp, #54]	; 0x36
 801188c:	f100 8193 	bmi.w	8011bb6 <MEMS_runMagCal.constprop.21+0x24ea>
 8011890:	3701      	adds	r7, #1
 8011892:	b23f      	sxth	r7, r7
 8011894:	eb0b 0341 	add.w	r3, fp, r1, lsl #1
 8011898:	42af      	cmp	r7, r5
 801189a:	ed9b 0a05 	vldr	s0, [fp, #20]
 801189e:	ee68 7a00 	vmul.f32	s15, s16, s0
 80118a2:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80118a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80118aa:	ee17 2a90 	vmov	r2, s15
 80118ae:	871a      	strh	r2, [r3, #56]	; 0x38
 80118b0:	463a      	mov	r2, r7
 80118b2:	db9f      	blt.n	80117f4 <MEMS_runMagCal.constprop.21+0x2128>
 80118b4:	f7fe bad8 	b.w	800fe68 <MEMS_runMagCal.constprop.21+0x79c>
 80118b8:	3a83126f 	.word	0x3a83126f
 80118bc:	3c23d70a 	.word	0x3c23d70a
 80118c0:	447a0000 	.word	0x447a0000
 80118c4:	20001724 	.word	0x20001724
 80118c8:	42c80000 	.word	0x42c80000
 80118cc:	20001700 	.word	0x20001700
 80118d0:	358637bd 	.word	0x358637bd
 80118d4:	2224      	movs	r2, #36	; 0x24
 80118d6:	a846      	add	r0, sp, #280	; 0x118
 80118d8:	f009 fb51 	bl	801af7e <memset>
 80118dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80118e0:	fb03 f208 	mul.w	r2, r3, r8
 80118e4:	ee06 2a90 	vmov	s13, r2
 80118e8:	fb03 f204 	mul.w	r2, r3, r4
 80118ec:	fb03 f306 	mul.w	r3, r3, r6
 80118f0:	ee07 2a10 	vmov	s14, r2
 80118f4:	ee07 3a90 	vmov	s15, r3
 80118f8:	ed1f 6a0b 	vldr	s12, [pc, #-44]	; 80118d0 <MEMS_runMagCal.constprop.21+0x2204>
 80118fc:	4ee2      	ldr	r6, [pc, #904]	; (8011c88 <MEMS_runMagCal.constprop.21+0x25bc>)
 80118fe:	ed9b 0a05 	vldr	s0, [fp, #20]
 8011902:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011906:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801190a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801190e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011912:	ee27 7a06 	vmul.f32	s14, s14, s12
 8011916:	ee67 7a86 	vmul.f32	s15, s15, s12
 801191a:	4631      	mov	r1, r6
 801191c:	ab36      	add	r3, sp, #216	; 0xd8
 801191e:	aa10      	add	r2, sp, #64	; 0x40
 8011920:	ac11      	add	r4, sp, #68	; 0x44
 8011922:	f1a6 001e 	sub.w	r0, r6, #30
 8011926:	edcd 6a46 	vstr	s13, [sp, #280]	; 0x118
 801192a:	ed8d 7a4a 	vstr	s14, [sp, #296]	; 0x128
 801192e:	edcd 7a4e 	vstr	s15, [sp, #312]	; 0x138
 8011932:	f7fc fe83 	bl	800e63c <getMagStats.constprop.35>
 8011936:	a946      	add	r1, sp, #280	; 0x118
 8011938:	4623      	mov	r3, r4
 801193a:	aa10      	add	r2, sp, #64	; 0x40
 801193c:	ed9b 0a05 	vldr	s0, [fp, #20]
 8011940:	f10d 00aa 	add.w	r0, sp, #170	; 0xaa
 8011944:	f7fc fe7a 	bl	800e63c <getMagStats.constprop.35>
 8011948:	eddf 6ad0 	vldr	s13, [pc, #832]	; 8011c8c <MEMS_runMagCal.constprop.21+0x25c0>
 801194c:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 8011950:	ed94 7a00 	vldr	s14, [r4]
 8011954:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011958:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 801195c:	eef0 7ae7 	vabs.f32	s15, s15
 8011960:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011968:	d505      	bpl.n	8011976 <MEMS_runMagCal.constprop.21+0x22aa>
 801196a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801196e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011972:	f100 810a 	bmi.w	8011b8a <MEMS_runMagCal.constprop.21+0x24be>
 8011976:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 801197a:	eef4 7ae6 	vcmpe.f32	s15, s13
 801197e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011982:	f140 8100 	bpl.w	8011b86 <MEMS_runMagCal.constprop.21+0x24ba>
 8011986:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801198a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801198e:	bf4c      	ite	mi
 8011990:	2302      	movmi	r3, #2
 8011992:	2301      	movpl	r3, #1
 8011994:	eddd 6a36 	vldr	s13, [sp, #216]	; 0xd8
 8011998:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801199c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80119a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80119a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119a8:	f57e aa99 	bpl.w	800fede <MEMS_runMagCal.constprop.21+0x812>
 80119ac:	f89b 207c 	ldrb.w	r2, [fp, #124]	; 0x7c
 80119b0:	429a      	cmp	r2, r3
 80119b2:	f63e aa94 	bhi.w	800fede <MEMS_runMagCal.constprop.21+0x812>
 80119b6:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80119ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80119be:	eef4 6ae7 	vcmpe.f32	s13, s15
 80119c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119c6:	f140 80e8 	bpl.w	8011b9a <MEMS_runMagCal.constprop.21+0x24ce>
 80119ca:	f9bb 1070 	ldrsh.w	r1, [fp, #112]	; 0x70
 80119ce:	f9bd 70ac 	ldrsh.w	r7, [sp, #172]	; 0xac
 80119d2:	f9bb e06e 	ldrsh.w	lr, [fp, #110]	; 0x6e
 80119d6:	f9bd 00aa 	ldrsh.w	r0, [sp, #170]	; 0xaa
 80119da:	f9bb 5072 	ldrsh.w	r5, [fp, #114]	; 0x72
 80119de:	f9bd 20ae 	ldrsh.w	r2, [sp, #174]	; 0xae
 80119e2:	eddb 5a05 	vldr	s11, [fp, #20]
 80119e6:	eba1 0c07 	sub.w	ip, r1, r7
 80119ea:	ebae 0800 	sub.w	r8, lr, r0
 80119ee:	ea8c 73ec 	eor.w	r3, ip, ip, asr #31
 80119f2:	eba3 73ec 	sub.w	r3, r3, ip, asr #31
 80119f6:	ea88 7ce8 	eor.w	ip, r8, r8, asr #31
 80119fa:	ebac 7ce8 	sub.w	ip, ip, r8, asr #31
 80119fe:	4563      	cmp	r3, ip
 8011a00:	eba5 0802 	sub.w	r8, r5, r2
 8011a04:	bfb8      	it	lt
 8011a06:	4663      	movlt	r3, ip
 8011a08:	ea88 7ce8 	eor.w	ip, r8, r8, asr #31
 8011a0c:	b21b      	sxth	r3, r3
 8011a0e:	ebac 7ce8 	sub.w	ip, ip, r8, asr #31
 8011a12:	4563      	cmp	r3, ip
 8011a14:	bfb8      	it	lt
 8011a16:	4663      	movlt	r3, ip
 8011a18:	b21b      	sxth	r3, r3
 8011a1a:	ee07 3a90 	vmov	s15, r3
 8011a1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011a22:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8011a26:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011a2a:	eef4 7ac6 	vcmpe.f32	s15, s12
 8011a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a32:	f140 80a4 	bpl.w	8011b7e <MEMS_runMagCal.constprop.21+0x24b2>
 8011a36:	ee37 7a26 	vadd.f32	s14, s14, s13
 8011a3a:	f8bb 3074 	ldrh.w	r3, [fp, #116]	; 0x74
 8011a3e:	eec6 3a87 	vdiv.f32	s7, s13, s14
 8011a42:	ee07 ea90 	vmov	s15, lr
 8011a46:	ee04 3a90 	vmov	s9, r3
 8011a4a:	f8bd 30b0 	ldrh.w	r3, [sp, #176]	; 0xb0
 8011a4e:	eeb8 2ae7 	vcvt.f32.s32	s4, s15
 8011a52:	ee00 3a10 	vmov	s0, r3
 8011a56:	ee07 0a90 	vmov	s15, r0
 8011a5a:	f8bb 3076 	ldrh.w	r3, [fp, #118]	; 0x76
 8011a5e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8011a62:	ee00 3a90 	vmov	s1, r3
 8011a66:	ee07 1a90 	vmov	s15, r1
 8011a6a:	f8bd 30b2 	ldrh.w	r3, [sp, #178]	; 0xb2
 8011a6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011a72:	ee05 3a10 	vmov	s10, r3
 8011a76:	ee07 7a90 	vmov	s15, r7
 8011a7a:	f8bb 3078 	ldrh.w	r3, [fp, #120]	; 0x78
 8011a7e:	eef8 2ae7 	vcvt.f32.s32	s5, s15
 8011a82:	ee01 3a10 	vmov	s2, r3
 8011a86:	ee07 5a90 	vmov	s15, r5
 8011a8a:	f8bd 30b4 	ldrh.w	r3, [sp, #180]	; 0xb4
 8011a8e:	eeb8 3ae7 	vcvt.f32.s32	s6, s15
 8011a92:	ee05 3a90 	vmov	s11, r3
 8011a96:	ee07 2a90 	vmov	s15, r2
 8011a9a:	f89b 306c 	ldrb.w	r3, [fp, #108]	; 0x6c
 8011a9e:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 8011aa2:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011aa6:	ee01 3a90 	vmov	s3, r3
 8011aaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011aae:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 8011ab2:	ee23 3a04 	vmul.f32	s6, s6, s8
 8011ab6:	ee06 3a10 	vmov	s12, r3
 8011aba:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8011abe:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8011ac2:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8011ac6:	ee22 2a04 	vmul.f32	s4, s4, s8
 8011aca:	ee27 7a04 	vmul.f32	s14, s14, s8
 8011ace:	ee21 1a04 	vmul.f32	s2, s2, s8
 8011ad2:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8011ad6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8011ada:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8011ade:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8011ae2:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8011ae6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8011aea:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8011aee:	ee62 2aa3 	vmul.f32	s5, s5, s7
 8011af2:	ee65 5aa3 	vmul.f32	s11, s11, s7
 8011af6:	ee77 7a83 	vadd.f32	s15, s15, s6
 8011afa:	ee64 4a84 	vmul.f32	s9, s9, s8
 8011afe:	ee60 0a84 	vmul.f32	s1, s1, s8
 8011b02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011b06:	ee20 0a23 	vmul.f32	s0, s0, s7
 8011b0a:	ee25 5a23 	vmul.f32	s10, s10, s7
 8011b0e:	ee21 4a84 	vmul.f32	s8, s3, s8
 8011b12:	ee26 6a23 	vmul.f32	s12, s12, s7
 8011b16:	ee76 6a82 	vadd.f32	s13, s13, s4
 8011b1a:	ee37 7a22 	vadd.f32	s14, s14, s5
 8011b1e:	ee75 5a81 	vadd.f32	s11, s11, s2
 8011b22:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8011b26:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8011b2a:	ee17 3a90 	vmov	r3, s15
 8011b2e:	ee74 4a80 	vadd.f32	s9, s9, s0
 8011b32:	eefc 7ae5 	vcvt.u32.f32	s15, s11
 8011b36:	ee35 5a20 	vadd.f32	s10, s10, s1
 8011b3a:	ee36 6a04 	vadd.f32	s12, s12, s8
 8011b3e:	ee16 1a90 	vmov	r1, s13
 8011b42:	ee17 2a10 	vmov	r2, s14
 8011b46:	ee17 5a90 	vmov	r5, s15
 8011b4a:	eefc 6ae4 	vcvt.u32.f32	s13, s9
 8011b4e:	eebc 7ac5 	vcvt.u32.f32	s14, s10
 8011b52:	eefc 7ac6 	vcvt.u32.f32	s15, s12
 8011b56:	ee16 ea90 	vmov	lr, s13
 8011b5a:	ee17 7a10 	vmov	r7, s14
 8011b5e:	ee17 0a90 	vmov	r0, s15
 8011b62:	f8ad 10aa 	strh.w	r1, [sp, #170]	; 0xaa
 8011b66:	f8ad e0b0 	strh.w	lr, [sp, #176]	; 0xb0
 8011b6a:	f8ad 20ac 	strh.w	r2, [sp, #172]	; 0xac
 8011b6e:	f8ad 70b2 	strh.w	r7, [sp, #178]	; 0xb2
 8011b72:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
 8011b76:	f8ad 50b4 	strh.w	r5, [sp, #180]	; 0xb4
 8011b7a:	f88d 00a8 	strb.w	r0, [sp, #168]	; 0xa8
 8011b7e:	9f29      	ldr	r7, [sp, #164]	; 0xa4
 8011b80:	f89b 50b0 	ldrb.w	r5, [fp, #176]	; 0xb0
 8011b84:	e5d6      	b.n	8011734 <MEMS_runMagCal.constprop.21+0x2068>
 8011b86:	2301      	movs	r3, #1
 8011b88:	e704      	b.n	8011994 <MEMS_runMagCal.constprop.21+0x22c8>
 8011b8a:	2303      	movs	r3, #3
 8011b8c:	e702      	b.n	8011994 <MEMS_runMagCal.constprop.21+0x22c8>
 8011b8e:	2303      	movs	r3, #3
 8011b90:	f7fe b99c 	b.w	800fecc <MEMS_runMagCal.constprop.21+0x800>
 8011b94:	2301      	movs	r3, #1
 8011b96:	f7fe b999 	b.w	800fecc <MEMS_runMagCal.constprop.21+0x800>
 8011b9a:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8011b9e:	eef4 6ae7 	vcmpe.f32	s13, s15
 8011ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ba6:	d5ea      	bpl.n	8011b7e <MEMS_runMagCal.constprop.21+0x24b2>
 8011ba8:	f89b 206c 	ldrb.w	r2, [fp, #108]	; 0x6c
 8011bac:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 8011bb0:	429a      	cmp	r2, r3
 8011bb2:	d2e4      	bcs.n	8011b7e <MEMS_runMagCal.constprop.21+0x24b2>
 8011bb4:	e709      	b.n	80119ca <MEMS_runMagCal.constprop.21+0x22fe>
 8011bb6:	f007 fb7d 	bl	80192b4 <sqrtf>
 8011bba:	f99b 1036 	ldrsb.w	r1, [fp, #54]	; 0x36
 8011bbe:	f89b 50b0 	ldrb.w	r5, [fp, #176]	; 0xb0
 8011bc2:	f89b 0035 	ldrb.w	r0, [fp, #53]	; 0x35
 8011bc6:	e663      	b.n	8011890 <MEMS_runMagCal.constprop.21+0x21c4>
 8011bc8:	f04f 0900 	mov.w	r9, #0
 8011bcc:	e558      	b.n	8011680 <MEMS_runMagCal.constprop.21+0x1fb4>
 8011bce:	eddf 7a30 	vldr	s15, [pc, #192]	; 8011c90 <MEMS_runMagCal.constprop.21+0x25c4>
 8011bd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bda:	f53f acd7 	bmi.w	801158c <MEMS_runMagCal.constprop.21+0x1ec0>
 8011bde:	e4dc      	b.n	801159a <MEMS_runMagCal.constprop.21+0x1ece>
 8011be0:	ed9f 8a2f 	vldr	s16, [pc, #188]	; 8011ca0 <MEMS_runMagCal.constprop.21+0x25d4>
 8011be4:	e4b6      	b.n	8011554 <MEMS_runMagCal.constprop.21+0x1e88>
 8011be6:	2224      	movs	r2, #36	; 0x24
 8011be8:	2100      	movs	r1, #0
 8011bea:	a846      	add	r0, sp, #280	; 0x118
 8011bec:	f009 f9c7 	bl	801af7e <memset>
 8011bf0:	eddf 7a26 	vldr	s15, [pc, #152]	; 8011c8c <MEMS_runMagCal.constprop.21+0x25c0>
 8011bf4:	ed9d 7a2e 	vldr	s14, [sp, #184]	; 0xb8
 8011bf8:	ee87 8a8c 	vdiv.f32	s16, s15, s24
 8011bfc:	ee87 0a28 	vdiv.f32	s0, s14, s17
 8011c00:	f007 f9bc 	bl	8018f7c <roundf>
 8011c04:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8011c08:	eddd 7a2f 	vldr	s15, [sp, #188]	; 0xbc
 8011c0c:	ed8d 8a46 	vstr	s16, [sp, #280]	; 0x118
 8011c10:	ee17 3a10 	vmov	r3, s14
 8011c14:	ee87 0aa8 	vdiv.f32	s0, s15, s17
 8011c18:	f8ad 30d8 	strh.w	r3, [sp, #216]	; 0xd8
 8011c1c:	f007 f9ae 	bl	8018f7c <roundf>
 8011c20:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8011c24:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8011c28:	ed8d 8a4a 	vstr	s16, [sp, #296]	; 0x128
 8011c2c:	ee17 3a10 	vmov	r3, s14
 8011c30:	ee87 0aa8 	vdiv.f32	s0, s15, s17
 8011c34:	f8ad 30da 	strh.w	r3, [sp, #218]	; 0xda
 8011c38:	f007 f9a0 	bl	8018f7c <roundf>
 8011c3c:	ab25      	add	r3, sp, #148	; 0x94
 8011c3e:	aa34      	add	r2, sp, #208	; 0xd0
 8011c40:	a946      	add	r1, sp, #280	; 0x118
 8011c42:	a836      	add	r0, sp, #216	; 0xd8
 8011c44:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8011c48:	eeb0 0a68 	vmov.f32	s0, s17
 8011c4c:	ee17 4a90 	vmov	r4, s15
 8011c50:	ed8d 8a4e 	vstr	s16, [sp, #312]	; 0x138
 8011c54:	f8ad 40dc 	strh.w	r4, [sp, #220]	; 0xdc
 8011c58:	f7fc fcf0 	bl	800e63c <getMagStats.constprop.35>
 8011c5c:	ed9d 8a25 	vldr	s16, [sp, #148]	; 0x94
 8011c60:	ed9d aa34 	vldr	s20, [sp, #208]	; 0xd0
 8011c64:	ed9d ca31 	vldr	s24, [sp, #196]	; 0xc4
 8011c68:	ee28 9a09 	vmul.f32	s18, s16, s18
 8011c6c:	ee38 8a08 	vadd.f32	s16, s16, s16
 8011c70:	e443      	b.n	80114fa <MEMS_runMagCal.constprop.21+0x1e2e>
 8011c72:	ed9f 9a0b 	vldr	s18, [pc, #44]	; 8011ca0 <MEMS_runMagCal.constprop.21+0x25d4>
 8011c76:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8011ca4 <MEMS_runMagCal.constprop.21+0x25d8>
 8011c7a:	eef0 7a49 	vmov.f32	s15, s18
 8011c7e:	e41e      	b.n	80114be <MEMS_runMagCal.constprop.21+0x1df2>
 8011c80:	eeb0 ca66 	vmov.f32	s24, s13
 8011c84:	f7ff b9e6 	b.w	8011054 <MEMS_runMagCal.constprop.21+0x1988>
 8011c88:	20001724 	.word	0x20001724
 8011c8c:	423c0000 	.word	0x423c0000
 8011c90:	3eb33333 	.word	0x3eb33333
 8011c94:	bf000001 	.word	0xbf000001
 8011c98:	40060a92 	.word	0x40060a92
 8011c9c:	3effffff 	.word	0x3effffff
 8011ca0:	00000000 	.word	0x00000000
 8011ca4:	41f00001 	.word	0x41f00001
 8011ca8:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8011cac:	ee86 9a05 	vdiv.f32	s18, s12, s10
 8011cb0:	ee75 5aa5 	vadd.f32	s11, s11, s11
 8011cb4:	ee37 7a49 	vsub.f32	s14, s14, s18
 8011cb8:	ee76 6ac9 	vsub.f32	s13, s13, s18
 8011cbc:	ee27 7a07 	vmul.f32	s14, s14, s14
 8011cc0:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8011cc4:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8011cc8:	ee37 7a26 	vadd.f32	s14, s14, s13
 8011ccc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011cd0:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8011cd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011cd8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8011cdc:	ee87 0aa6 	vdiv.f32	s0, s15, s13
 8011ce0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8011ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ce8:	eeb1 aac0 	vsqrt.f32	s20, s0
 8011cec:	d501      	bpl.n	8011cf2 <MEMS_runMagCal.constprop.21+0x2626>
 8011cee:	f007 fae1 	bl	80192b4 <sqrtf>
 8011cf2:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8011cf6:	eddd 6a33 	vldr	s13, [sp, #204]	; 0xcc
 8011cfa:	eddd 5a32 	vldr	s11, [sp, #200]	; 0xc8
 8011cfe:	ed9d 6a2f 	vldr	s12, [sp, #188]	; 0xbc
 8011d02:	eddd 4a30 	vldr	s9, [sp, #192]	; 0xc0
 8011d06:	ed9d 5a2e 	vldr	s10, [sp, #184]	; 0xb8
 8011d0a:	ee37 7a49 	vsub.f32	s14, s14, s18
 8011d0e:	ee76 6ac9 	vsub.f32	s13, s13, s18
 8011d12:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8011d16:	ee86 7a8a 	vdiv.f32	s14, s13, s20
 8011d1a:	eec5 6a8a 	vdiv.f32	s13, s11, s20
 8011d1e:	eec6 5a0a 	vdiv.f32	s11, s12, s20
 8011d22:	ee84 6a8a 	vdiv.f32	s12, s9, s20
 8011d26:	ee35 5a49 	vsub.f32	s10, s10, s18
 8011d2a:	ee27 0a87 	vmul.f32	s0, s15, s14
 8011d2e:	eec5 4a0a 	vdiv.f32	s9, s10, s20
 8011d32:	ee26 4aa6 	vmul.f32	s8, s13, s13
 8011d36:	ee26 5a86 	vmul.f32	s10, s13, s12
 8011d3a:	ee25 7a87 	vmul.f32	s14, s11, s14
 8011d3e:	ee30 0a44 	vsub.f32	s0, s0, s8
 8011d42:	ee37 7a45 	vsub.f32	s14, s14, s10
 8011d46:	ee27 4a86 	vmul.f32	s8, s15, s12
 8011d4a:	ee26 5aa5 	vmul.f32	s10, s13, s11
 8011d4e:	ee27 7a25 	vmul.f32	s14, s14, s11
 8011d52:	ee35 5a44 	vsub.f32	s10, s10, s8
 8011d56:	ee20 0a24 	vmul.f32	s0, s0, s9
 8011d5a:	edcd 7a4a 	vstr	s15, [sp, #296]	; 0x128
 8011d5e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011d62:	ee25 7a06 	vmul.f32	s14, s10, s12
 8011d66:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 8011d6a:	ee30 0a07 	vadd.f32	s0, s0, s14
 8011d6e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8011d72:	ee20 0a05 	vmul.f32	s0, s0, s10
 8011d76:	edcd 6a4b 	vstr	s13, [sp, #300]	; 0x12c
 8011d7a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8011d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d82:	edcd 6a4d 	vstr	s13, [sp, #308]	; 0x134
 8011d86:	edcd 4a46 	vstr	s9, [sp, #280]	; 0x118
 8011d8a:	edcd 5a47 	vstr	s11, [sp, #284]	; 0x11c
 8011d8e:	edcd 5a49 	vstr	s11, [sp, #292]	; 0x124
 8011d92:	ed8d 6a48 	vstr	s12, [sp, #288]	; 0x120
 8011d96:	ed8d 6a4c 	vstr	s12, [sp, #304]	; 0x130
 8011d9a:	d945      	bls.n	8011e28 <MEMS_runMagCal.constprop.21+0x275c>
 8011d9c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8011da0:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8011da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011da8:	db2b      	blt.n	8011e02 <MEMS_runMagCal.constprop.21+0x2736>
 8011daa:	ed1f 0a46 	vldr	s0, [pc, #-280]	; 8011c94 <MEMS_runMagCal.constprop.21+0x25c8>
 8011dae:	f89b 30b0 	ldrb.w	r3, [fp, #176]	; 0xb0
 8011db2:	ee7a 7a0a 	vadd.f32	s15, s20, s20
 8011db6:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8011dba:	ee27 7a88 	vmul.f32	s14, s15, s16
 8011dbe:	ee69 6a26 	vmul.f32	s13, s18, s13
 8011dc2:	ee37 7a09 	vadd.f32	s14, s14, s18
 8011dc6:	ee67 7a80 	vmul.f32	s15, s15, s0
 8011dca:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8011dce:	ee77 7a89 	vadd.f32	s15, s15, s18
 8011dd2:	ee04 3a90 	vmov	s9, r3
 8011dd6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8011dda:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8011dde:	ee37 6a26 	vadd.f32	s12, s14, s13
 8011de2:	ee36 6a27 	vadd.f32	s12, s12, s15
 8011de6:	f7fe bd5f 	b.w	80108a8 <MEMS_runMagCal.constprop.21+0x11dc>
 8011dea:	ed1f 6a53 	vldr	s12, [pc, #-332]	; 8011ca0 <MEMS_runMagCal.constprop.21+0x25d4>
 8011dee:	eef0 7a46 	vmov.f32	s15, s12
 8011df2:	eef0 6a46 	vmov.f32	s13, s12
 8011df6:	eeb0 7a46 	vmov.f32	s14, s12
 8011dfa:	eeb0 9a46 	vmov.f32	s18, s12
 8011dfe:	f7fe bd60 	b.w	80108c2 <MEMS_runMagCal.constprop.21+0x11f6>
 8011e02:	f007 f9ff 	bl	8019204 <acosf>
 8011e06:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8011e0a:	eec0 aa27 	vdiv.f32	s21, s0, s15
 8011e0e:	eeb0 0a6a 	vmov.f32	s0, s21
 8011e12:	f007 f873 	bl	8018efc <cosf>
 8011e16:	eeb0 8a40 	vmov.f32	s16, s0
 8011e1a:	ed1f 0a61 	vldr	s0, [pc, #-388]	; 8011c98 <MEMS_runMagCal.constprop.21+0x25cc>
 8011e1e:	ee3a 0a80 	vadd.f32	s0, s21, s0
 8011e22:	f007 f86b 	bl	8018efc <cosf>
 8011e26:	e7c2      	b.n	8011dae <MEMS_runMagCal.constprop.21+0x26e2>
 8011e28:	eeb0 0a47 	vmov.f32	s0, s14
 8011e2c:	ed1f 8a65 	vldr	s16, [pc, #-404]	; 8011c9c <MEMS_runMagCal.constprop.21+0x25d0>
 8011e30:	e7bd      	b.n	8011dae <MEMS_runMagCal.constprop.21+0x26e2>
 8011e32:	ed1f 9a65 	vldr	s18, [pc, #-404]	; 8011ca0 <MEMS_runMagCal.constprop.21+0x25d4>
 8011e36:	ed9d ca31 	vldr	s24, [sp, #196]	; 0xc4
 8011e3a:	ed1f 7a66 	vldr	s14, [pc, #-408]	; 8011ca4 <MEMS_runMagCal.constprop.21+0x25d8>
 8011e3e:	eef0 7a49 	vmov.f32	s15, s18
 8011e42:	f7ff bb3c 	b.w	80114be <MEMS_runMagCal.constprop.21+0x1df2>
 8011e46:	ed96 0a00 	vldr	s0, [r6]
 8011e4a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8011e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e52:	eeb1 9ac0 	vsqrt.f32	s18, s0
 8011e56:	f57f aada 	bpl.w	801140e <MEMS_runMagCal.constprop.21+0x1d42>
 8011e5a:	f007 fa2b 	bl	80192b4 <sqrtf>
 8011e5e:	f7ff bad6 	b.w	801140e <MEMS_runMagCal.constprop.21+0x1d42>
 8011e62:	ed98 0a00 	vldr	s0, [r8]
 8011e66:	eef4 7ac0 	vcmpe.f32	s15, s0
 8011e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e6e:	d5e0      	bpl.n	8011e32 <MEMS_runMagCal.constprop.21+0x2766>
 8011e70:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011e74:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8011e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e7c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8011e80:	d505      	bpl.n	8011e8e <MEMS_runMagCal.constprop.21+0x27c2>
 8011e82:	9102      	str	r1, [sp, #8]
 8011e84:	9201      	str	r2, [sp, #4]
 8011e86:	f007 fa15 	bl	80192b4 <sqrtf>
 8011e8a:	9902      	ldr	r1, [sp, #8]
 8011e8c:	9a01      	ldr	r2, [sp, #4]
 8011e8e:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 8011e92:	ed83 8a00 	vstr	s16, [r3]
 8011e96:	f7ff ba60 	b.w	801135a <MEMS_runMagCal.constprop.21+0x1c8e>
 8011e9a:	bf00      	nop
 8011e9c:	0000      	movs	r0, r0
	...

08011ea0 <m_kalman_3gyro.isra.9.constprop.47>:
 8011ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ea4:	ed2d 8b10 	vpush	{d8-d15}
 8011ea8:	4cd2      	ldr	r4, [pc, #840]	; (80121f4 <m_kalman_3gyro.isra.9.constprop.47+0x354>)
 8011eaa:	ed9f 8ad3 	vldr	s16, [pc, #844]	; 80121f8 <m_kalman_3gyro.isra.9.constprop.47+0x358>
 8011eae:	f2ad 6d54 	subw	sp, sp, #1620	; 0x654
 8011eb2:	468c      	mov	ip, r1
 8011eb4:	4691      	mov	r9, r2
 8011eb6:	9125      	str	r1, [sp, #148]	; 0x94
 8011eb8:	9208      	str	r2, [sp, #32]
 8011eba:	9307      	str	r3, [sp, #28]
 8011ebc:	4680      	mov	r8, r0
 8011ebe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011ec0:	aeb1      	add	r6, sp, #708	; 0x2c4
 8011ec2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011ec4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011ec6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011ec8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011eca:	f89d 56c0 	ldrb.w	r5, [sp, #1728]	; 0x6c0
 8011ece:	9526      	str	r5, [sp, #152]	; 0x98
 8011ed0:	f89d 56c4 	ldrb.w	r5, [sp, #1732]	; 0x6c4
 8011ed4:	950a      	str	r5, [sp, #40]	; 0x28
 8011ed6:	f8dd a700 	ldr.w	sl, [sp, #1792]	; 0x700
 8011eda:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011edc:	4625      	mov	r5, r4
 8011ede:	afbe      	add	r7, sp, #760	; 0x2f8
 8011ee0:	f855 3b04 	ldr.w	r3, [r5], #4
 8011ee4:	6033      	str	r3, [r6, #0]
 8011ee6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011ee8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8011eea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011eec:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8011eee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011ef0:	f104 0e38 	add.w	lr, r4, #56	; 0x38
 8011ef4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8011ef6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011efa:	aecb      	add	r6, sp, #812	; 0x32c
 8011efc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011efe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011f02:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011f04:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011f08:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011f0a:	682a      	ldr	r2, [r5, #0]
 8011f0c:	f8de 3000 	ldr.w	r3, [lr]
 8011f10:	603a      	str	r2, [r7, #0]
 8011f12:	f104 076c 	add.w	r7, r4, #108	; 0x6c
 8011f16:	6033      	str	r3, [r6, #0]
 8011f18:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011f1a:	add8      	add	r5, sp, #864	; 0x360
 8011f1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011f1e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011f20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011f22:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011f24:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
 8011f28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011f2a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8011f2c:	683f      	ldr	r7, [r7, #0]
 8011f2e:	602f      	str	r7, [r5, #0]
 8011f30:	ad93      	add	r5, sp, #588	; 0x24c
 8011f32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011f34:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8011f36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011f38:	e896 0003 	ldmia.w	r6, {r0, r1}
 8011f3c:	f104 06c8 	add.w	r6, r4, #200	; 0xc8
 8011f40:	e885 0003 	stmia.w	r5, {r0, r1}
 8011f44:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8011f46:	ad9d      	add	r5, sp, #628	; 0x274
 8011f48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011f4a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8011f4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011f4e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8011f52:	f104 06f0 	add.w	r6, r4, #240	; 0xf0
 8011f56:	e885 0003 	stmia.w	r5, {r0, r1}
 8011f5a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8011f5c:	ada7      	add	r5, sp, #668	; 0x29c
 8011f5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011f60:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8011f62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011f64:	e896 0003 	ldmia.w	r6, {r0, r1}
 8011f68:	f504 768c 	add.w	r6, r4, #280	; 0x118
 8011f6c:	e885 0003 	stmia.w	r5, {r0, r1}
 8011f70:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8011f72:	ad58      	add	r5, sp, #352	; 0x160
 8011f74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011f76:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8011f7a:	f8dd 76f4 	ldr.w	r7, [sp, #1780]	; 0x6f4
 8011f7e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8011f82:	f504 749a 	add.w	r4, r4, #308	; 0x134
 8011f86:	2500      	movs	r5, #0
 8011f88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011f8a:	703d      	strb	r5, [r7, #0]
 8011f8c:	f8dd 76f8 	ldr.w	r7, [sp, #1784]	; 0x6f8
 8011f90:	ed8d 2a27 	vstr	s4, [sp, #156]	; 0x9c
 8011f94:	703d      	strb	r5, [r7, #0]
 8011f96:	f8dd 76fc 	ldr.w	r7, [sp, #1788]	; 0x6fc
 8011f9a:	703d      	strb	r5, [r7, #0]
 8011f9c:	eddc 6a00 	vldr	s13, [ip]
 8011fa0:	eddc 7a01 	vldr	s15, [ip, #4]
 8011fa4:	ed9c 7a02 	vldr	s14, [ip, #8]
 8011fa8:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8011fac:	ad5f      	add	r5, sp, #380	; 0x17c
 8011fae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011fb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011fb4:	ee27 7a07 	vmul.f32	s14, s14, s14
 8011fb8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8011fbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011fc0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8011fc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011fc8:	4667      	mov	r7, ip
 8011fca:	ee17 0a90 	vmov	r0, s15
 8011fce:	eeb0 fa41 	vmov.f32	s30, s2
 8011fd2:	eef0 8a61 	vmov.f32	s17, s3
 8011fd6:	eef0 ea40 	vmov.f32	s29, s0
 8011fda:	eeb0 da60 	vmov.f32	s26, s1
 8011fde:	f7ee fabb 	bl	8000558 <__aeabi_f2d>
 8011fe2:	ec41 0b10 	vmov	d0, r0, r1
 8011fe6:	f007 f8b3 	bl	8019150 <sqrt>
 8011fea:	ec51 0b10 	vmov	r0, r1, d0
 8011fee:	f7ee fdff 	bl	8000bf0 <__aeabi_d2f>
 8011ff2:	edd9 6a00 	vldr	s13, [r9]
 8011ff6:	edd9 7a01 	vldr	s15, [r9, #4]
 8011ffa:	ed99 7a02 	vldr	s14, [r9, #8]
 8011ffe:	4b7f      	ldr	r3, [pc, #508]	; (80121fc <m_kalman_3gyro.isra.9.constprop.47+0x35c>)
 8012000:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8012004:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012008:	ee27 7a07 	vmul.f32	s14, s14, s14
 801200c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012010:	6018      	str	r0, [r3, #0]
 8012012:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012016:	ee09 0a90 	vmov	s19, r0
 801201a:	ee17 0a90 	vmov	r0, s15
 801201e:	f7ee fa9b 	bl	8000558 <__aeabi_f2d>
 8012022:	ec41 0b10 	vmov	d0, r0, r1
 8012026:	f007 f893 	bl	8019150 <sqrt>
 801202a:	ec51 0b10 	vmov	r0, r1, d0
 801202e:	f7ee fddf 	bl	8000bf0 <__aeabi_d2f>
 8012032:	edd7 7a00 	vldr	s15, [r7]
 8012036:	ed99 5a00 	vldr	s10, [r9]
 801203a:	edd7 6a01 	vldr	s13, [r7, #4]
 801203e:	edd9 5a01 	vldr	s11, [r9, #4]
 8012042:	ed97 7a02 	vldr	s14, [r7, #8]
 8012046:	ed99 6a02 	vldr	s12, [r9, #8]
 801204a:	edcd 7a52 	vstr	s15, [sp, #328]	; 0x148
 801204e:	ee0a 0a10 	vmov	s20, r0
 8012052:	ee87 9aa9 	vdiv.f32	s18, s15, s19
 8012056:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 801205a:	f89a 48cd 	ldrb.w	r4, [sl, #2253]	; 0x8cd
 801205e:	ab55      	add	r3, sp, #340	; 0x154
 8012060:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012064:	ee85 ba0a 	vdiv.f32	s22, s10, s20
 8012068:	ee86 eaa9 	vdiv.f32	s28, s13, s19
 801206c:	eec5 ba8a 	vdiv.f32	s23, s11, s20
 8012070:	eec7 da29 	vdiv.f32	s27, s14, s19
 8012074:	eec6 aa0a 	vdiv.f32	s21, s12, s20
 8012078:	ee6b fa09 	vmul.f32	s31, s22, s18
 801207c:	ee6b 7a8e 	vmul.f32	s15, s23, s28
 8012080:	ee7f fa88 	vadd.f32	s31, s31, s16
 8012084:	edcd 6a53 	vstr	s13, [sp, #332]	; 0x14c
 8012088:	ee77 7aaf 	vadd.f32	s15, s15, s31
 801208c:	ee6d faaa 	vmul.f32	s31, s27, s21
 8012090:	ed8d 7a54 	vstr	s14, [sp, #336]	; 0x150
 8012094:	ee7f faa7 	vadd.f32	s31, s31, s15
 8012098:	ed8d 9a35 	vstr	s18, [sp, #212]	; 0xd4
 801209c:	ed8d ea36 	vstr	s28, [sp, #216]	; 0xd8
 80120a0:	edcd da37 	vstr	s27, [sp, #220]	; 0xdc
 80120a4:	ed8d ba38 	vstr	s22, [sp, #224]	; 0xe0
 80120a8:	edcd ba39 	vstr	s23, [sp, #228]	; 0xe4
 80120ac:	edcd aa3a 	vstr	s21, [sp, #232]	; 0xe8
 80120b0:	2c00      	cmp	r4, #0
 80120b2:	f040 81b0 	bne.w	8012416 <m_kalman_3gyro.isra.9.constprop.47+0x576>
 80120b6:	f50d 61db 	add.w	r1, sp, #1752	; 0x6d8
 80120ba:	ed91 7b00 	vldr	d7, [r1]
 80120be:	aa3e      	add	r2, sp, #248	; 0xf8
 80120c0:	4616      	mov	r6, r2
 80120c2:	2301      	movs	r3, #1
 80120c4:	9206      	str	r2, [sp, #24]
 80120c6:	f10a 0240 	add.w	r2, sl, #64	; 0x40
 80120ca:	ed8a 7b0e 	vstr	d7, [sl, #56]	; 0x38
 80120ce:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 80120d2:	f88a 38cd 	strb.w	r3, [sl, #2253]	; 0x8cd
 80120d6:	f88a 3031 	strb.w	r3, [sl, #49]	; 0x31
 80120da:	4621      	mov	r1, r4
 80120dc:	6034      	str	r4, [r6, #0]
 80120de:	6074      	str	r4, [r6, #4]
 80120e0:	60b4      	str	r4, [r6, #8]
 80120e2:	60f4      	str	r4, [r6, #12]
 80120e4:	9209      	str	r2, [sp, #36]	; 0x24
 80120e6:	f88a 4030 	strb.w	r4, [sl, #48]	; 0x30
 80120ea:	4610      	mov	r0, r2
 80120ec:	2224      	movs	r2, #36	; 0x24
 80120ee:	9442      	str	r4, [sp, #264]	; 0x108
 80120f0:	9443      	str	r4, [sp, #268]	; 0x10c
 80120f2:	9444      	str	r4, [sp, #272]	; 0x110
 80120f4:	9545      	str	r5, [sp, #276]	; 0x114
 80120f6:	f008 ff42 	bl	801af7e <memset>
 80120fa:	4621      	mov	r1, r4
 80120fc:	f8ca 5060 	str.w	r5, [sl, #96]	; 0x60
 8012100:	f8ca 5050 	str.w	r5, [sl, #80]	; 0x50
 8012104:	f8ca 5040 	str.w	r5, [sl, #64]	; 0x40
 8012108:	2230      	movs	r2, #48	; 0x30
 801210a:	f10a 0064 	add.w	r0, sl, #100	; 0x64
 801210e:	f008 ff36 	bl	801af7e <memset>
 8012112:	4b3b      	ldr	r3, [pc, #236]	; (8012200 <m_kalman_3gyro.isra.9.constprop.47+0x360>)
 8012114:	f8ca 50b0 	str.w	r5, [sl, #176]	; 0xb0
 8012118:	4621      	mov	r1, r4
 801211a:	f8ca 50b4 	str.w	r5, [sl, #180]	; 0xb4
 801211e:	ed8a 8a25 	vstr	s16, [sl, #148]	; 0x94
 8012122:	ed8a 8a26 	vstr	s16, [sl, #152]	; 0x98
 8012126:	ed8a 8a27 	vstr	s16, [sl, #156]	; 0x9c
 801212a:	f8ca 30ac 	str.w	r3, [sl, #172]	; 0xac
 801212e:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8012132:	f10a 00b8 	add.w	r0, sl, #184	; 0xb8
 8012136:	f008 ff22 	bl	801af7e <memset>
 801213a:	4b32      	ldr	r3, [pc, #200]	; (8012204 <m_kalman_3gyro.isra.9.constprop.47+0x364>)
 801213c:	f8ca 30b8 	str.w	r3, [sl, #184]	; 0xb8
 8012140:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 8012144:	f50a 7105 	add.w	r1, sl, #532	; 0x214
 8012148:	f8ca 30e0 	str.w	r3, [sl, #224]	; 0xe0
 801214c:	f8ca 3108 	str.w	r3, [sl, #264]	; 0x108
 8012150:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
 8012154:	f8ca 3158 	str.w	r3, [sl, #344]	; 0x158
 8012158:	f8ca 3180 	str.w	r3, [sl, #384]	; 0x180
 801215c:	f8ca 31a8 	str.w	r3, [sl, #424]	; 0x1a8
 8012160:	f8ca 31d0 	str.w	r3, [sl, #464]	; 0x1d0
 8012164:	f8ca 31f8 	str.w	r3, [sl, #504]	; 0x1f8
 8012168:	f50a 730e 	add.w	r3, sl, #568	; 0x238
 801216c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8012170:	461d      	mov	r5, r3
 8012172:	9122      	str	r1, [sp, #136]	; 0x88
 8012174:	f8ca 21fc 	str.w	r2, [sl, #508]	; 0x1fc
 8012178:	4608      	mov	r0, r1
 801217a:	f8ca 2200 	str.w	r2, [sl, #512]	; 0x200
 801217e:	f8ca 2204 	str.w	r2, [sl, #516]	; 0x204
 8012182:	2100      	movs	r1, #0
 8012184:	2224      	movs	r2, #36	; 0x24
 8012186:	9316      	str	r3, [sp, #88]	; 0x58
 8012188:	f50a 7417 	add.w	r4, sl, #604	; 0x25c
 801218c:	f008 fef7 	bl	801af7e <memset>
 8012190:	4628      	mov	r0, r5
 8012192:	2224      	movs	r2, #36	; 0x24
 8012194:	2100      	movs	r1, #0
 8012196:	ed8a 9a8d 	vstr	s18, [sl, #564]	; 0x234
 801219a:	ed8a 9a89 	vstr	s18, [sl, #548]	; 0x224
 801219e:	ed8a 9a85 	vstr	s18, [sl, #532]	; 0x214
 80121a2:	f008 feec 	bl	801af7e <memset>
 80121a6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80121aa:	2100      	movs	r1, #0
 80121ac:	ed8a 9a96 	vstr	s18, [sl, #600]	; 0x258
 80121b0:	ed8a 9a92 	vstr	s18, [sl, #584]	; 0x248
 80121b4:	ed8a 9a8e 	vstr	s18, [sl, #568]	; 0x238
 80121b8:	4620      	mov	r0, r4
 80121ba:	f008 fee0 	bl	801af7e <memset>
 80121be:	f20a 4104 	addw	r1, sl, #1028	; 0x404
 80121c2:	9110      	str	r1, [sp, #64]	; 0x40
 80121c4:	f50a 6082 	add.w	r0, sl, #1040	; 0x410
 80121c8:	f50a 6181 	add.w	r1, sl, #1032	; 0x408
 80121cc:	9100      	str	r1, [sp, #0]
 80121ce:	9019      	str	r0, [sp, #100]	; 0x64
 80121d0:	f20a 4114 	addw	r1, sl, #1044	; 0x414
 80121d4:	f50a 6083 	add.w	r0, sl, #1048	; 0x418
 80121d8:	f50a 7375 	add.w	r3, sl, #980	; 0x3d4
 80121dc:	9111      	str	r1, [sp, #68]	; 0x44
 80121de:	9012      	str	r0, [sp, #72]	; 0x48
 80121e0:	f50a 6185 	add.w	r1, sl, #1064	; 0x428
 80121e4:	f20a 4024 	addw	r0, sl, #1060	; 0x424
 80121e8:	2700      	movs	r7, #0
 80121ea:	f04f 0900 	mov.w	r9, #0
 80121ee:	901b      	str	r0, [sp, #108]	; 0x6c
 80121f0:	911c      	str	r1, [sp, #112]	; 0x70
 80121f2:	e015      	b.n	8012220 <m_kalman_3gyro.isra.9.constprop.47+0x380>
 80121f4:	0801d5b0 	.word	0x0801d5b0
 80121f8:	00000000 	.word	0x00000000
 80121fc:	20001ab4 	.word	0x20001ab4
 8012200:	3f666666 	.word	0x3f666666
 8012204:	40a00000 	.word	0x40a00000
 8012208:	3ca3d70a 	.word	0x3ca3d70a
 801220c:	be4ccccd 	.word	0xbe4ccccd
 8012210:	00000000 	.word	0x00000000
 8012214:	bdcccccd 	.word	0xbdcccccd
 8012218:	3dcccccd 	.word	0x3dcccccd
 801221c:	3e4ccccd 	.word	0x3e4ccccd
 8012220:	f20a 402c 	addw	r0, sl, #1068	; 0x42c
 8012224:	f50a 6186 	add.w	r1, sl, #1072	; 0x430
 8012228:	f8ca 73d4 	str.w	r7, [sl, #980]	; 0x3d4
 801222c:	f8ca 93c4 	str.w	r9, [sl, #964]	; 0x3c4
 8012230:	f8ca 93c8 	str.w	r9, [sl, #968]	; 0x3c8
 8012234:	f8ca 93cc 	str.w	r9, [sl, #972]	; 0x3cc
 8012238:	f8ca 93d0 	str.w	r9, [sl, #976]	; 0x3d0
 801223c:	901d      	str	r0, [sp, #116]	; 0x74
 801223e:	605f      	str	r7, [r3, #4]
 8012240:	609f      	str	r7, [r3, #8]
 8012242:	9113      	str	r1, [sp, #76]	; 0x4c
 8012244:	f20a 4034 	addw	r0, sl, #1076	; 0x434
 8012248:	f50a 6187 	add.w	r1, sl, #1080	; 0x438
 801224c:	9318      	str	r3, [sp, #96]	; 0x60
 801224e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012250:	900c      	str	r0, [sp, #48]	; 0x30
 8012252:	f20a 4c1c 	addw	ip, sl, #1052	; 0x41c
 8012256:	911e      	str	r1, [sp, #120]	; 0x78
 8012258:	f20a 403c 	addw	r0, sl, #1084	; 0x43c
 801225c:	f50d 61db 	add.w	r1, sp, #1752	; 0x6d8
 8012260:	f8ca 73e0 	str.w	r7, [sl, #992]	; 0x3e0
 8012264:	f8ca 73e4 	str.w	r7, [sl, #996]	; 0x3e4
 8012268:	f8ca 73e8 	str.w	r7, [sl, #1000]	; 0x3e8
 801226c:	f8ca 73ec 	str.w	r7, [sl, #1004]	; 0x3ec
 8012270:	f8ca 73f0 	str.w	r7, [sl, #1008]	; 0x3f0
 8012274:	f8ca 73f4 	str.w	r7, [sl, #1012]	; 0x3f4
 8012278:	f8ca 73f8 	str.w	r7, [sl, #1016]	; 0x3f8
 801227c:	f8ca 73fc 	str.w	r7, [sl, #1020]	; 0x3fc
 8012280:	f8ca 7400 	str.w	r7, [sl, #1024]	; 0x400
 8012284:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
 8012288:	900b      	str	r0, [sp, #44]	; 0x2c
 801228a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801228e:	f8c3 9000 	str.w	r9, [r3]
 8012292:	9b00      	ldr	r3, [sp, #0]
 8012294:	f20a 460c 	addw	r6, sl, #1036	; 0x40c
 8012298:	f8c3 9000 	str.w	r9, [r3]
 801229c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801229e:	f8c6 9000 	str.w	r9, [r6]
 80122a2:	f8c3 9000 	str.w	r9, [r3]
 80122a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80122a8:	f8c3 9000 	str.w	r9, [r3]
 80122ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80122ae:	f8c3 9000 	str.w	r9, [r3]
 80122b2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80122b4:	f50a 6c84 	add.w	ip, sl, #1056	; 0x420
 80122b8:	f8c3 9000 	str.w	r9, [r3]
 80122bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80122be:	f04f 4b80 	mov.w	fp, #1073741824	; 0x40000000
 80122c2:	f8cc b000 	str.w	fp, [ip]
 80122c6:	f8c3 9000 	str.w	r9, [r3]
 80122ca:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80122cc:	f8c3 9000 	str.w	r9, [r3]
 80122d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80122d2:	f8c3 9000 	str.w	r9, [r3]
 80122d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80122d8:	f8c3 9000 	str.w	r9, [r3]
 80122dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80122de:	f8c3 9000 	str.w	r9, [r3]
 80122e2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80122e4:	f8c3 9000 	str.w	r9, [r3]
 80122e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80122ea:	ed83 9a00 	vstr	s18, [r3]
 80122ee:	f7ee fc7f 	bl	8000bf0 <__aeabi_d2f>
 80122f2:	f50a 6388 	add.w	r3, sl, #1088	; 0x440
 80122f6:	461a      	mov	r2, r3
 80122f8:	9314      	str	r3, [sp, #80]	; 0x50
 80122fa:	f20a 4344 	addw	r3, sl, #1092	; 0x444
 80122fe:	4619      	mov	r1, r3
 8012300:	ee08 0a10 	vmov	s16, r0
 8012304:	930d      	str	r3, [sp, #52]	; 0x34
 8012306:	ed5f 7a40 	vldr	s15, [pc, #-256]	; 8012208 <m_kalman_3gyro.isra.9.constprop.47+0x368>
 801230a:	f50a 6389 	add.w	r3, sl, #1096	; 0x448
 801230e:	4618      	mov	r0, r3
 8012310:	931f      	str	r3, [sp, #124]	; 0x7c
 8012312:	f20a 434c 	addw	r3, sl, #1100	; 0x44c
 8012316:	461d      	mov	r5, r3
 8012318:	ee68 7a27 	vmul.f32	s15, s16, s15
 801231c:	930e      	str	r3, [sp, #56]	; 0x38
 801231e:	2332      	movs	r3, #50	; 0x32
 8012320:	edc2 7a00 	vstr	s15, [r2]
 8012324:	f8c1 9000 	str.w	r9, [r1]
 8012328:	ed80 9a00 	vstr	s18, [r0]
 801232c:	f8c5 9000 	str.w	r9, [r5]
 8012330:	f8ca 3458 	str.w	r3, [sl, #1112]	; 0x458
 8012334:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8012336:	f8ca 7450 	str.w	r7, [sl, #1104]	; 0x450
 801233a:	f8ca 7454 	str.w	r7, [sl, #1108]	; 0x454
 801233e:	f8ca 745c 	str.w	r7, [sl, #1116]	; 0x45c
 8012342:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012346:	af6f      	add	r7, sp, #444	; 0x1bc
 8012348:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 801234c:	9b08      	ldr	r3, [sp, #32]
 801234e:	edd7 6a00 	vldr	s13, [r7]
 8012352:	ed97 7a01 	vldr	s14, [r7, #4]
 8012356:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801235a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801235e:	ab72      	add	r3, sp, #456	; 0x1c8
 8012360:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012364:	9b07      	ldr	r3, [sp, #28]
 8012366:	ed97 6a03 	vldr	s12, [r7, #12]
 801236a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801236e:	f8d7 c014 	ldr.w	ip, [r7, #20]
 8012372:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012376:	ab75      	add	r3, sp, #468	; 0x1d4
 8012378:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801237c:	f50a 658c 	add.w	r5, sl, #1120	; 0x460
 8012380:	9515      	str	r5, [sp, #84]	; 0x54
 8012382:	462b      	mov	r3, r5
 8012384:	f8d7 e018 	ldr.w	lr, [r7, #24]
 8012388:	69f8      	ldr	r0, [r7, #28]
 801238a:	6a39      	ldr	r1, [r7, #32]
 801238c:	9d00      	ldr	r5, [sp, #0]
 801238e:	f60a 0298 	addw	r2, sl, #2200	; 0x898
 8012392:	edc3 6a00 	vstr	s13, [r3]
 8012396:	ed83 7a01 	vstr	s14, [r3, #4]
 801239a:	f8c3 b008 	str.w	fp, [r3, #8]
 801239e:	ed83 6a03 	vstr	s12, [r3, #12]
 80123a2:	f8c3 9010 	str.w	r9, [r3, #16]
 80123a6:	f8c3 c014 	str.w	ip, [r3, #20]
 80123aa:	f8c3 e018 	str.w	lr, [r3, #24]
 80123ae:	61d8      	str	r0, [r3, #28]
 80123b0:	6219      	str	r1, [r3, #32]
 80123b2:	3324      	adds	r3, #36	; 0x24
 80123b4:	429a      	cmp	r2, r3
 80123b6:	d1ec      	bne.n	8012392 <m_kalman_3gyro.isra.9.constprop.47+0x4f2>
 80123b8:	f8dd 36e0 	ldr.w	r3, [sp, #1760]	; 0x6e0
 80123bc:	9500      	str	r5, [sp, #0]
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	6013      	str	r3, [r2, #0]
 80123c2:	f8dd 36e0 	ldr.w	r3, [sp, #1760]	; 0x6e0
 80123c6:	eddd da37 	vldr	s27, [sp, #220]	; 0xdc
 80123ca:	685a      	ldr	r2, [r3, #4]
 80123cc:	ed9d ea36 	vldr	s28, [sp, #216]	; 0xd8
 80123d0:	ed9d 9a35 	vldr	s18, [sp, #212]	; 0xd4
 80123d4:	ed9d ba38 	vldr	s22, [sp, #224]	; 0xe0
 80123d8:	eddd ba39 	vldr	s23, [sp, #228]	; 0xe4
 80123dc:	eddd aa3a 	vldr	s21, [sp, #232]	; 0xe8
 80123e0:	f60a 039c 	addw	r3, sl, #2204	; 0x89c
 80123e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80123e8:	601a      	str	r2, [r3, #0]
 80123ea:	f8dd 36e0 	ldr.w	r3, [sp, #1760]	; 0x6e0
 80123ee:	f50a 620a 	add.w	r2, sl, #2208	; 0x8a0
 80123f2:	6898      	ldr	r0, [r3, #8]
 80123f4:	6010      	str	r0, [r2, #0]
 80123f6:	2300      	movs	r3, #0
 80123f8:	f88a 38a4 	strb.w	r3, [sl, #2212]	; 0x8a4
 80123fc:	f8aa 38a6 	strh.w	r3, [sl, #2214]	; 0x8a6
 8012400:	f8aa 38a8 	strh.w	r3, [sl, #2216]	; 0x8a8
 8012404:	f88a 38ad 	strb.w	r3, [sl, #2221]	; 0x8ad
 8012408:	f88a 38ae 	strb.w	r3, [sl, #2222]	; 0x8ae
 801240c:	f8ca 38b0 	str.w	r3, [sl, #2224]	; 0x8b0
 8012410:	f8aa 18aa 	strh.w	r1, [sl, #2218]	; 0x8aa
 8012414:	e053      	b.n	80124be <m_kalman_3gyro.isra.9.constprop.47+0x61e>
 8012416:	f50d 63db 	add.w	r3, sp, #1752	; 0x6d8
 801241a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801241e:	f7ee fbe7 	bl	8000bf0 <__aeabi_d2f>
 8012422:	f10a 0340 	add.w	r3, sl, #64	; 0x40
 8012426:	9309      	str	r3, [sp, #36]	; 0x24
 8012428:	f50a 7305 	add.w	r3, sl, #532	; 0x214
 801242c:	9322      	str	r3, [sp, #136]	; 0x88
 801242e:	f50a 730e 	add.w	r3, sl, #568	; 0x238
 8012432:	9316      	str	r3, [sp, #88]	; 0x58
 8012434:	f50a 638c 	add.w	r3, sl, #1120	; 0x460
 8012438:	9315      	str	r3, [sp, #84]	; 0x54
 801243a:	ab3e      	add	r3, sp, #248	; 0xf8
 801243c:	9306      	str	r3, [sp, #24]
 801243e:	f50a 7375 	add.w	r3, sl, #980	; 0x3d4
 8012442:	9318      	str	r3, [sp, #96]	; 0x60
 8012444:	f20a 4304 	addw	r3, sl, #1028	; 0x404
 8012448:	9310      	str	r3, [sp, #64]	; 0x40
 801244a:	f50a 6381 	add.w	r3, sl, #1032	; 0x408
 801244e:	9300      	str	r3, [sp, #0]
 8012450:	f50a 6382 	add.w	r3, sl, #1040	; 0x410
 8012454:	9319      	str	r3, [sp, #100]	; 0x64
 8012456:	f20a 4314 	addw	r3, sl, #1044	; 0x414
 801245a:	9311      	str	r3, [sp, #68]	; 0x44
 801245c:	f50a 6383 	add.w	r3, sl, #1048	; 0x418
 8012460:	9312      	str	r3, [sp, #72]	; 0x48
 8012462:	f20a 431c 	addw	r3, sl, #1052	; 0x41c
 8012466:	931a      	str	r3, [sp, #104]	; 0x68
 8012468:	f20a 4324 	addw	r3, sl, #1060	; 0x424
 801246c:	931b      	str	r3, [sp, #108]	; 0x6c
 801246e:	f50a 6385 	add.w	r3, sl, #1064	; 0x428
 8012472:	931c      	str	r3, [sp, #112]	; 0x70
 8012474:	f20a 432c 	addw	r3, sl, #1068	; 0x42c
 8012478:	931d      	str	r3, [sp, #116]	; 0x74
 801247a:	f50a 6386 	add.w	r3, sl, #1072	; 0x430
 801247e:	9313      	str	r3, [sp, #76]	; 0x4c
 8012480:	f20a 4334 	addw	r3, sl, #1076	; 0x434
 8012484:	930c      	str	r3, [sp, #48]	; 0x30
 8012486:	f50a 6387 	add.w	r3, sl, #1080	; 0x438
 801248a:	931e      	str	r3, [sp, #120]	; 0x78
 801248c:	f20a 433c 	addw	r3, sl, #1084	; 0x43c
 8012490:	930b      	str	r3, [sp, #44]	; 0x2c
 8012492:	f50a 6388 	add.w	r3, sl, #1088	; 0x440
 8012496:	ee08 0a10 	vmov	s16, r0
 801249a:	ed5f 7aa5 	vldr	s15, [pc, #-660]	; 8012208 <m_kalman_3gyro.isra.9.constprop.47+0x368>
 801249e:	9314      	str	r3, [sp, #80]	; 0x50
 80124a0:	f20a 4344 	addw	r3, sl, #1092	; 0x444
 80124a4:	930d      	str	r3, [sp, #52]	; 0x34
 80124a6:	f50a 6389 	add.w	r3, sl, #1096	; 0x448
 80124aa:	931f      	str	r3, [sp, #124]	; 0x7c
 80124ac:	ee68 7a27 	vmul.f32	s15, s16, s15
 80124b0:	f20a 434c 	addw	r3, sl, #1100	; 0x44c
 80124b4:	f50a 7417 	add.w	r4, sl, #604	; 0x25c
 80124b8:	f20a 460c 	addw	r6, sl, #1036	; 0x40c
 80124bc:	930e      	str	r3, [sp, #56]	; 0x38
 80124be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80124c0:	ed5f 3aae 	vldr	s7, [pc, #-696]	; 801220c <m_kalman_3gyro.isra.9.constprop.47+0x36c>
 80124c4:	ed93 6a00 	vldr	s12, [r3]
 80124c8:	ed1f 7aaf 	vldr	s14, [pc, #-700]	; 8012210 <m_kalman_3gyro.isra.9.constprop.47+0x370>
 80124cc:	ed1f 4aaf 	vldr	s8, [pc, #-700]	; 8012214 <m_kalman_3gyro.isra.9.constprop.47+0x374>
 80124d0:	ed5f 4aaf 	vldr	s9, [pc, #-700]	; 8012218 <m_kalman_3gyro.isra.9.constprop.47+0x378>
 80124d4:	ed1f 5aaf 	vldr	s10, [pc, #-700]	; 801221c <m_kalman_3gyro.isra.9.constprop.47+0x37c>
 80124d8:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80124da:	f20a 4384 	addw	r3, sl, #1156	; 0x484
 80124de:	edd3 5a00 	vldr	s11, [r3]
 80124e2:	9331      	str	r3, [sp, #196]	; 0xc4
 80124e4:	ee26 6a23 	vmul.f32	s12, s12, s7
 80124e8:	f50a 6395 	add.w	r3, sl, #1192	; 0x4a8
 80124ec:	edd3 6a00 	vldr	s13, [r3]
 80124f0:	ee65 5a84 	vmul.f32	s11, s11, s8
 80124f4:	ee36 6a07 	vadd.f32	s12, s12, s14
 80124f8:	f20a 43cc 	addw	r3, sl, #1228	; 0x4cc
 80124fc:	ee66 6a87 	vmul.f32	s13, s13, s14
 8012500:	ee36 6a25 	vadd.f32	s12, s12, s11
 8012504:	edd3 5a00 	vldr	s11, [r3]
 8012508:	f50a 639e 	add.w	r3, sl, #1264	; 0x4f0
 801250c:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8012510:	ee36 6a26 	vadd.f32	s12, s12, s13
 8012514:	f50d 65db 	add.w	r5, sp, #1752	; 0x6d8
 8012518:	edd3 6a00 	vldr	s13, [r3]
 801251c:	ed95 2b00 	vldr	d2, [r5]
 8012520:	ee66 6a85 	vmul.f32	s13, s13, s10
 8012524:	ee36 6a25 	vadd.f32	s12, s12, s11
 8012528:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801252c:	ee36 6a26 	vadd.f32	s12, s12, s13
 8012530:	ed8a 2b0e 	vstr	d2, [sl, #56]	; 0x38
 8012534:	f20a 4564 	addw	r5, sl, #1124	; 0x464
 8012538:	edc7 7a00 	vstr	s15, [r7]
 801253c:	ed8a 6af8 	vstr	s12, [sl, #992]	; 0x3e0
 8012540:	edd5 7a00 	vldr	s15, [r5]
 8012544:	952a      	str	r5, [sp, #168]	; 0xa8
 8012546:	f50a 6791 	add.w	r7, sl, #1160	; 0x488
 801254a:	edd7 5a00 	vldr	s11, [r7]
 801254e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8012552:	f20a 47ac 	addw	r7, sl, #1196	; 0x4ac
 8012556:	edd7 6a00 	vldr	s13, [r7]
 801255a:	ee65 5a84 	vmul.f32	s11, s11, s8
 801255e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012562:	f50a 679a 	add.w	r7, sl, #1232	; 0x4d0
 8012566:	ee66 6a87 	vmul.f32	s13, s13, s14
 801256a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801256e:	edd7 5a00 	vldr	s11, [r7]
 8012572:	f20a 47f4 	addw	r7, sl, #1268	; 0x4f4
 8012576:	ee65 5aa4 	vmul.f32	s11, s11, s9
 801257a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801257e:	edd7 6a00 	vldr	s13, [r7]
 8012582:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8012586:	ee66 6a85 	vmul.f32	s13, s13, s10
 801258a:	f50a 658d 	add.w	r5, sl, #1128	; 0x468
 801258e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012592:	f20a 478c 	addw	r7, sl, #1164	; 0x48c
 8012596:	edca 7af9 	vstr	s15, [sl, #996]	; 0x3e4
 801259a:	edd5 6a00 	vldr	s13, [r5]
 801259e:	ed97 3a00 	vldr	s6, [r7]
 80125a2:	952b      	str	r5, [sp, #172]	; 0xac
 80125a4:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80125a8:	f50a 6796 	add.w	r7, sl, #1200	; 0x4b0
 80125ac:	edd7 5a00 	vldr	s11, [r7]
 80125b0:	ee23 3a04 	vmul.f32	s6, s6, s8
 80125b4:	ee76 6a87 	vadd.f32	s13, s13, s14
 80125b8:	f20a 47d4 	addw	r7, sl, #1236	; 0x4d4
 80125bc:	ee65 5a87 	vmul.f32	s11, s11, s14
 80125c0:	ee76 6a83 	vadd.f32	s13, s13, s6
 80125c4:	ed97 3a00 	vldr	s6, [r7]
 80125c8:	f50a 679f 	add.w	r7, sl, #1272	; 0x4f8
 80125cc:	ee23 3a24 	vmul.f32	s6, s6, s9
 80125d0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80125d4:	edd7 5a00 	vldr	s11, [r7]
 80125d8:	ee76 6a83 	vadd.f32	s13, s13, s6
 80125dc:	ee65 5a85 	vmul.f32	s11, s11, s10
 80125e0:	f20a 456c 	addw	r5, sl, #1132	; 0x46c
 80125e4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80125e8:	f50a 6792 	add.w	r7, sl, #1168	; 0x490
 80125ec:	edca 6afa 	vstr	s13, [sl, #1000]	; 0x3e8
 80125f0:	edd5 5a00 	vldr	s11, [r5]
 80125f4:	952c      	str	r5, [sp, #176]	; 0xb0
 80125f6:	ee65 5aa3 	vmul.f32	s11, s11, s7
 80125fa:	edd7 2a00 	vldr	s5, [r7]
 80125fe:	9d06      	ldr	r5, [sp, #24]
 8012600:	f20a 47b4 	addw	r7, sl, #1204	; 0x4b4
 8012604:	ed97 3a00 	vldr	s6, [r7]
 8012608:	ee62 2a84 	vmul.f32	s5, s5, s8
 801260c:	ee75 5a87 	vadd.f32	s11, s11, s14
 8012610:	f50a 679b 	add.w	r7, sl, #1240	; 0x4d8
 8012614:	ee23 3a07 	vmul.f32	s6, s6, s14
 8012618:	ee75 5aa2 	vadd.f32	s11, s11, s5
 801261c:	edd7 2a00 	vldr	s5, [r7]
 8012620:	f20a 47fc 	addw	r7, sl, #1276	; 0x4fc
 8012624:	ee62 2aa4 	vmul.f32	s5, s5, s9
 8012628:	ee75 5a83 	vadd.f32	s11, s11, s6
 801262c:	ed97 3a00 	vldr	s6, [r7]
 8012630:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8012634:	ee23 3a05 	vmul.f32	s6, s6, s10
 8012638:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801263c:	ee75 5a83 	vadd.f32	s11, s11, s6
 8012640:	f50a 638e 	add.w	r3, sl, #1136	; 0x470
 8012644:	edca 5afb 	vstr	s11, [sl, #1004]	; 0x3ec
 8012648:	461a      	mov	r2, r3
 801264a:	edd2 5a00 	vldr	s11, [r2]
 801264e:	932d      	str	r3, [sp, #180]	; 0xb4
 8012650:	f20a 4394 	addw	r3, sl, #1172	; 0x494
 8012654:	edd3 2a00 	vldr	s5, [r3]
 8012658:	ee65 5aa3 	vmul.f32	s11, s11, s7
 801265c:	f50a 6397 	add.w	r3, sl, #1208	; 0x4b8
 8012660:	ed93 3a00 	vldr	s6, [r3]
 8012664:	ee62 2a84 	vmul.f32	s5, s5, s8
 8012668:	ee75 5a87 	vadd.f32	s11, s11, s14
 801266c:	f20a 43dc 	addw	r3, sl, #1244	; 0x4dc
 8012670:	ee23 3a07 	vmul.f32	s6, s6, s14
 8012674:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8012678:	edd3 2a00 	vldr	s5, [r3]
 801267c:	f50a 63a0 	add.w	r3, sl, #1280	; 0x500
 8012680:	ee62 2aa4 	vmul.f32	s5, s5, s9
 8012684:	ee75 5a83 	vadd.f32	s11, s11, s6
 8012688:	ed93 3a00 	vldr	s6, [r3]
 801268c:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8012690:	ee23 3a05 	vmul.f32	s6, s6, s10
 8012694:	f20a 4374 	addw	r3, sl, #1140	; 0x474
 8012698:	ee75 5a83 	vadd.f32	s11, s11, s6
 801269c:	461a      	mov	r2, r3
 801269e:	edca 5afc 	vstr	s11, [sl, #1008]	; 0x3f0
 80126a2:	edd2 5a00 	vldr	s11, [r2]
 80126a6:	932e      	str	r3, [sp, #184]	; 0xb8
 80126a8:	f50a 6393 	add.w	r3, sl, #1176	; 0x498
 80126ac:	edd3 2a00 	vldr	s5, [r3]
 80126b0:	ee65 5aa3 	vmul.f32	s11, s11, s7
 80126b4:	f20a 43bc 	addw	r3, sl, #1212	; 0x4bc
 80126b8:	ed93 3a00 	vldr	s6, [r3]
 80126bc:	ee62 2a84 	vmul.f32	s5, s5, s8
 80126c0:	ee75 5a87 	vadd.f32	s11, s11, s14
 80126c4:	f50a 639c 	add.w	r3, sl, #1248	; 0x4e0
 80126c8:	ee23 3a07 	vmul.f32	s6, s6, s14
 80126cc:	ee75 5aa2 	vadd.f32	s11, s11, s5
 80126d0:	edd3 2a00 	vldr	s5, [r3]
 80126d4:	f20a 5304 	addw	r3, sl, #1284	; 0x504
 80126d8:	ee62 2aa4 	vmul.f32	s5, s5, s9
 80126dc:	ee75 5a83 	vadd.f32	s11, s11, s6
 80126e0:	ed93 3a00 	vldr	s6, [r3]
 80126e4:	ee75 5aa2 	vadd.f32	s11, s11, s5
 80126e8:	ee23 3a05 	vmul.f32	s6, s6, s10
 80126ec:	f50a 638f 	add.w	r3, sl, #1144	; 0x478
 80126f0:	ee75 5a83 	vadd.f32	s11, s11, s6
 80126f4:	461a      	mov	r2, r3
 80126f6:	edca 5afd 	vstr	s11, [sl, #1012]	; 0x3f4
 80126fa:	edd2 5a00 	vldr	s11, [r2]
 80126fe:	9328      	str	r3, [sp, #160]	; 0xa0
 8012700:	f20a 439c 	addw	r3, sl, #1180	; 0x49c
 8012704:	edd3 2a00 	vldr	s5, [r3]
 8012708:	ee65 5aa3 	vmul.f32	s11, s11, s7
 801270c:	f50a 6398 	add.w	r3, sl, #1216	; 0x4c0
 8012710:	ed93 3a00 	vldr	s6, [r3]
 8012714:	ee62 2a84 	vmul.f32	s5, s5, s8
 8012718:	ee75 5a87 	vadd.f32	s11, s11, s14
 801271c:	f20a 43e4 	addw	r3, sl, #1252	; 0x4e4
 8012720:	ee23 3a07 	vmul.f32	s6, s6, s14
 8012724:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8012728:	edd3 2a00 	vldr	s5, [r3]
 801272c:	f50a 63a1 	add.w	r3, sl, #1288	; 0x508
 8012730:	ee62 2aa4 	vmul.f32	s5, s5, s9
 8012734:	ee75 5a83 	vadd.f32	s11, s11, s6
 8012738:	ed93 3a00 	vldr	s6, [r3]
 801273c:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8012740:	ee23 3a05 	vmul.f32	s6, s6, s10
 8012744:	f20a 437c 	addw	r3, sl, #1148	; 0x47c
 8012748:	ee75 5a83 	vadd.f32	s11, s11, s6
 801274c:	461a      	mov	r2, r3
 801274e:	edca 5afe 	vstr	s11, [sl, #1016]	; 0x3f8
 8012752:	932f      	str	r3, [sp, #188]	; 0xbc
 8012754:	edd2 5a00 	vldr	s11, [r2]
 8012758:	f50a 6394 	add.w	r3, sl, #1184	; 0x4a0
 801275c:	edd3 2a00 	vldr	s5, [r3]
 8012760:	ee65 5aa3 	vmul.f32	s11, s11, s7
 8012764:	f20a 43c4 	addw	r3, sl, #1220	; 0x4c4
 8012768:	ed93 3a00 	vldr	s6, [r3]
 801276c:	ee62 2a84 	vmul.f32	s5, s5, s8
 8012770:	ee75 5a87 	vadd.f32	s11, s11, s14
 8012774:	f50a 639d 	add.w	r3, sl, #1256	; 0x4e8
 8012778:	ee23 3a07 	vmul.f32	s6, s6, s14
 801277c:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8012780:	edd3 2a00 	vldr	s5, [r3]
 8012784:	f20a 530c 	addw	r3, sl, #1292	; 0x50c
 8012788:	ee62 2aa4 	vmul.f32	s5, s5, s9
 801278c:	ee75 5a83 	vadd.f32	s11, s11, s6
 8012790:	ed93 3a00 	vldr	s6, [r3]
 8012794:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8012798:	ee23 3a05 	vmul.f32	s6, s6, s10
 801279c:	f50a 6390 	add.w	r3, sl, #1152	; 0x480
 80127a0:	ee75 5a83 	vadd.f32	s11, s11, s6
 80127a4:	461a      	mov	r2, r3
 80127a6:	edca 5aff 	vstr	s11, [sl, #1020]	; 0x3fc
 80127aa:	edd2 5a00 	vldr	s11, [r2]
 80127ae:	9330      	str	r3, [sp, #192]	; 0xc0
 80127b0:	f20a 43a4 	addw	r3, sl, #1188	; 0x4a4
 80127b4:	ed93 3a00 	vldr	s6, [r3]
 80127b8:	ee65 5aa3 	vmul.f32	s11, s11, s7
 80127bc:	f50a 6399 	add.w	r3, sl, #1224	; 0x4c8
 80127c0:	ee63 3a04 	vmul.f32	s7, s6, s8
 80127c4:	ee75 5a87 	vadd.f32	s11, s11, s14
 80127c8:	ed93 4a00 	vldr	s8, [r3]
 80127cc:	f20a 43ec 	addw	r3, sl, #1260	; 0x4ec
 80127d0:	ee75 5aa3 	vadd.f32	s11, s11, s7
 80127d4:	ee24 7a07 	vmul.f32	s14, s8, s14
 80127d8:	ed93 4a00 	vldr	s8, [r3]
 80127dc:	f50a 63a2 	add.w	r3, sl, #1296	; 0x510
 80127e0:	ee64 4a24 	vmul.f32	s9, s8, s9
 80127e4:	ee35 7a87 	vadd.f32	s14, s11, s14
 80127e8:	edd3 5a00 	vldr	s11, [r3]
 80127ec:	ee37 7a24 	vadd.f32	s14, s14, s9
 80127f0:	ee25 5a85 	vmul.f32	s10, s11, s10
 80127f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80127f8:	ee26 6a06 	vmul.f32	s12, s12, s12
 80127fc:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8012800:	ee37 6a86 	vadd.f32	s12, s15, s12
 8012804:	ee77 7a05 	vadd.f32	s15, s14, s10
 8012808:	f50a 6780 	add.w	r7, sl, #1024	; 0x400
 801280c:	edc7 7a00 	vstr	s15, [r7]
 8012810:	ee76 7a86 	vadd.f32	s15, s13, s12
 8012814:	ee17 0a90 	vmov	r0, s15
 8012818:	f7ed fe9e 	bl	8000558 <__aeabi_f2d>
 801281c:	ec41 0b10 	vmov	d0, r0, r1
 8012820:	f006 fc96 	bl	8019150 <sqrt>
 8012824:	ec51 0b10 	vmov	r0, r1, d0
 8012828:	f7ee f9e2 	bl	8000bf0 <__aeabi_d2f>
 801282c:	edda 6afb 	vldr	s13, [sl, #1004]	; 0x3ec
 8012830:	edda 7afc 	vldr	s15, [sl, #1008]	; 0x3f0
 8012834:	ed9a 7afd 	vldr	s14, [sl, #1012]	; 0x3f4
 8012838:	4bea      	ldr	r3, [pc, #936]	; (8012be4 <m_kalman_3gyro.isra.9.constprop.47+0xd44>)
 801283a:	ee66 6aa6 	vmul.f32	s13, s13, s13
 801283e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012842:	ee27 7a07 	vmul.f32	s14, s14, s14
 8012846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801284a:	6018      	str	r0, [r3, #0]
 801284c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012850:	ee0c 0a90 	vmov	s25, r0
 8012854:	ee17 0a90 	vmov	r0, s15
 8012858:	461d      	mov	r5, r3
 801285a:	f7ed fe7d 	bl	8000558 <__aeabi_f2d>
 801285e:	ec41 0b10 	vmov	d0, r0, r1
 8012862:	f006 fc75 	bl	8019150 <sqrt>
 8012866:	ec51 0b10 	vmov	r0, r1, d0
 801286a:	f7ee f9c1 	bl	8000bf0 <__aeabi_d2f>
 801286e:	edda 6afe 	vldr	s13, [sl, #1016]	; 0x3f8
 8012872:	edda 7aff 	vldr	s15, [sl, #1020]	; 0x3fc
 8012876:	ed97 7a00 	vldr	s14, [r7]
 801287a:	ee66 6aa6 	vmul.f32	s13, s13, s13
 801287e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012882:	ee27 7a07 	vmul.f32	s14, s14, s14
 8012886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801288a:	462b      	mov	r3, r5
 801288c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012890:	f843 0f04 	str.w	r0, [r3, #4]!
 8012894:	ee09 0a90 	vmov	s19, r0
 8012898:	ee17 0a90 	vmov	r0, s15
 801289c:	9332      	str	r3, [sp, #200]	; 0xc8
 801289e:	f7ed fe5b 	bl	8000558 <__aeabi_f2d>
 80128a2:	ec41 0b10 	vmov	d0, r0, r1
 80128a6:	f006 fc53 	bl	8019150 <sqrt>
 80128aa:	ec51 0b10 	vmov	r0, r1, d0
 80128ae:	f7ee f99f 	bl	8000bf0 <__aeabi_d2f>
 80128b2:	ee2b 6aad 	vmul.f32	s12, s23, s27
 80128b6:	ee2b 7a2d 	vmul.f32	s14, s22, s27
 80128ba:	ee6a 7a8e 	vmul.f32	s15, s21, s28
 80128be:	ee6a 6a89 	vmul.f32	s13, s21, s18
 80128c2:	ee76 da67 	vsub.f32	s27, s12, s15
 80128c6:	ee2b 9a89 	vmul.f32	s18, s23, s18
 80128ca:	ee6b 7a0e 	vmul.f32	s15, s22, s28
 80128ce:	ee36 eac7 	vsub.f32	s28, s13, s14
 80128d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80128d4:	ee2d 7aad 	vmul.f32	s14, s27, s27
 80128d8:	ee37 9ac9 	vsub.f32	s18, s15, s18
 80128dc:	ee6e 7a0e 	vmul.f32	s15, s28, s28
 80128e0:	edc3 ca00 	vstr	s25, [r3]
 80128e4:	ee0c 0a10 	vmov	s24, r0
 80128e8:	9b00      	ldr	r3, [sp, #0]
 80128ea:	ee69 6a09 	vmul.f32	s13, s18, s18
 80128ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80128f2:	edc3 9a00 	vstr	s19, [r3]
 80128f6:	ee1c 2a10 	vmov	r2, s24
 80128fa:	462b      	mov	r3, r5
 80128fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012900:	f843 2f08 	str.w	r2, [r3, #8]!
 8012904:	ed86 ca00 	vstr	s24, [r6]
 8012908:	ee17 0a90 	vmov	r0, s15
 801290c:	edca da8f 	vstr	s27, [sl, #572]	; 0x23c
 8012910:	ed8a ea92 	vstr	s28, [sl, #584]	; 0x248
 8012914:	ed8a 9a95 	vstr	s18, [sl, #596]	; 0x254
 8012918:	ed8a ba90 	vstr	s22, [sl, #576]	; 0x240
 801291c:	edca ba93 	vstr	s23, [sl, #588]	; 0x24c
 8012920:	edca aa96 	vstr	s21, [sl, #600]	; 0x258
 8012924:	9333      	str	r3, [sp, #204]	; 0xcc
 8012926:	f7ed fe17 	bl	8000558 <__aeabi_f2d>
 801292a:	ec41 0b10 	vmov	d0, r0, r1
 801292e:	e9cd 0120 	strd	r0, r1, [sp, #128]	; 0x80
 8012932:	f006 fc0d 	bl	8019150 <sqrt>
 8012936:	ec51 0b10 	vmov	r0, r1, d0
 801293a:	f7ee f959 	bl	8000bf0 <__aeabi_d2f>
 801293e:	edda 4a8f 	vldr	s9, [sl, #572]	; 0x23c
 8012942:	edda 5a95 	vldr	s11, [sl, #596]	; 0x254
 8012946:	ed9a 5a92 	vldr	s10, [sl, #584]	; 0x248
 801294a:	ed9a 7a96 	vldr	s14, [sl, #600]	; 0x258
 801294e:	edda 6a90 	vldr	s13, [sl, #576]	; 0x240
 8012952:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012954:	ee06 0a10 	vmov	s12, r0
 8012958:	eec4 7a86 	vdiv.f32	s15, s9, s12
 801295c:	aa78      	add	r2, sp, #480	; 0x1e0
 801295e:	9822      	ldr	r0, [sp, #136]	; 0x88
 8012960:	eec5 4a86 	vdiv.f32	s9, s11, s12
 8012964:	eec5 5a06 	vdiv.f32	s11, s10, s12
 8012968:	ed9a 6a93 	vldr	s12, [sl, #588]	; 0x24c
 801296c:	edca 7a8f 	vstr	s15, [sl, #572]	; 0x23c
 8012970:	ee27 4a27 	vmul.f32	s8, s14, s15
 8012974:	ee26 5aa4 	vmul.f32	s10, s13, s9
 8012978:	ee27 7a25 	vmul.f32	s14, s14, s11
 801297c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8012980:	ee66 7a27 	vmul.f32	s15, s12, s15
 8012984:	ee26 6a24 	vmul.f32	s12, s12, s9
 8012988:	ee35 5a44 	vsub.f32	s10, s10, s8
 801298c:	ee37 7a46 	vsub.f32	s14, s14, s12
 8012990:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012994:	edca 4a95 	vstr	s9, [sl, #596]	; 0x254
 8012998:	ed8a 5a91 	vstr	s10, [sl, #580]	; 0x244
 801299c:	edca 5a92 	vstr	s11, [sl, #584]	; 0x248
 80129a0:	ed8a 7a8e 	vstr	s14, [sl, #568]	; 0x238
 80129a4:	edca 7a94 	vstr	s15, [sl, #592]	; 0x250
 80129a8:	f7fa fe58 	bl	800d65c <m_mldivide>
 80129ac:	a878      	add	r0, sp, #480	; 0x1e0
 80129ae:	a946      	add	r1, sp, #280	; 0x118
 80129b0:	f7fb f8ee 	bl	800db90 <m_dcm2q_eml>
 80129b4:	4653      	mov	r3, sl
 80129b6:	f5aa 70ae 	sub.w	r0, sl, #348	; 0x15c
 80129ba:	f8d3 23ac 	ldr.w	r2, [r3, #940]	; 0x3ac
 80129be:	f8d3 13b0 	ldr.w	r1, [r3, #944]	; 0x3b0
 80129c2:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
 80129c6:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 80129ca:	f8c3 13bc 	str.w	r1, [r3, #956]	; 0x3bc
 80129ce:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
 80129d2:	3b0c      	subs	r3, #12
 80129d4:	4283      	cmp	r3, r0
 80129d6:	d1f0      	bne.n	80129ba <m_kalman_3gyro.isra.9.constprop.47+0xb1a>
 80129d8:	eddd 6a46 	vldr	s13, [sp, #280]	; 0x118
 80129dc:	ed9d 7a47 	vldr	s14, [sp, #284]	; 0x11c
 80129e0:	eddd 7a48 	vldr	s15, [sp, #288]	; 0x120
 80129e4:	9429      	str	r4, [sp, #164]	; 0xa4
 80129e6:	ee76 6aa6 	vadd.f32	s13, s13, s13
 80129ea:	ee37 7a07 	vadd.f32	s14, s14, s14
 80129ee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80129f2:	ee86 6aa8 	vdiv.f32	s12, s13, s17
 80129f6:	ad3b      	add	r5, sp, #236	; 0xec
 80129f8:	462e      	mov	r6, r5
 80129fa:	f504 71ae 	add.w	r1, r4, #348	; 0x15c
 80129fe:	f104 070c 	add.w	r7, r4, #12
 8012a02:	4620      	mov	r0, r4
 8012a04:	eec7 6a28 	vdiv.f32	s13, s14, s17
 8012a08:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 8012a0c:	ed8a 6a97 	vstr	s12, [sl, #604]	; 0x25c
 8012a10:	edca 6a98 	vstr	s13, [sl, #608]	; 0x260
 8012a14:	ed8a 7a99 	vstr	s14, [sl, #612]	; 0x264
 8012a18:	eef3 5a0e 	vmov.f32	s11, #62	; 0x41f00000  30.0
 8012a1c:	eeb3 6a0d 	vmov.f32	s12, #61	; 0x41e80000  29.0
 8012a20:	ed90 7a00 	vldr	s14, [r0]
 8012a24:	4603      	mov	r3, r0
 8012a26:	eef0 7a47 	vmov.f32	s15, s14
 8012a2a:	330c      	adds	r3, #12
 8012a2c:	edd3 6a00 	vldr	s13, [r3]
 8012a30:	4299      	cmp	r1, r3
 8012a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012a36:	d1f8      	bne.n	8012a2a <m_kalman_3gyro.isra.9.constprop.47+0xb8a>
 8012a38:	eec7 6aa5 	vdiv.f32	s13, s15, s11
 8012a3c:	4602      	mov	r2, r0
 8012a3e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8012a42:	ee27 7a07 	vmul.f32	s14, s14, s14
 8012a46:	320c      	adds	r2, #12
 8012a48:	edd2 7a00 	vldr	s15, [r2]
 8012a4c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012a50:	4293      	cmp	r3, r2
 8012a52:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012a56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012a5a:	d1f4      	bne.n	8012a46 <m_kalman_3gyro.isra.9.constprop.47+0xba6>
 8012a5c:	eec7 7a06 	vdiv.f32	s15, s14, s12
 8012a60:	3004      	adds	r0, #4
 8012a62:	4287      	cmp	r7, r0
 8012a64:	f101 0104 	add.w	r1, r1, #4
 8012a68:	ece6 7a01 	vstmia	r6!, {s15}
 8012a6c:	d1d8      	bne.n	8012a20 <m_kalman_3gyro.isra.9.constprop.47+0xb80>
 8012a6e:	6828      	ldr	r0, [r5, #0]
 8012a70:	f7ed fd72 	bl	8000558 <__aeabi_f2d>
 8012a74:	ec41 0b10 	vmov	d0, r0, r1
 8012a78:	f006 fb6a 	bl	8019150 <sqrt>
 8012a7c:	ec51 0b10 	vmov	r0, r1, d0
 8012a80:	f7ee f8b6 	bl	8000bf0 <__aeabi_d2f>
 8012a84:	9b06      	ldr	r3, [sp, #24]
 8012a86:	f845 0b04 	str.w	r0, [r5], #4
 8012a8a:	42ab      	cmp	r3, r5
 8012a8c:	d1ef      	bne.n	8012a6e <m_kalman_3gyro.isra.9.constprop.47+0xbce>
 8012a8e:	eddd 7a3b 	vldr	s15, [sp, #236]	; 0xec
 8012a92:	eddd 6a3c 	vldr	s13, [sp, #240]	; 0xf0
 8012a96:	ed9d 7a3d 	vldr	s14, [sp, #244]	; 0xf4
 8012a9a:	9417      	str	r4, [sp, #92]	; 0x5c
 8012a9c:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8012aa0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012aa4:	ee27 7a07 	vmul.f32	s14, s14, s14
 8012aa8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012aac:	f20d 5b0c 	addw	fp, sp, #1292	; 0x50c
 8012ab0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012ab4:	f50d 7865 	add.w	r8, sp, #916	; 0x394
 8012ab8:	ee17 0a90 	vmov	r0, s15
 8012abc:	f7ed fd4c 	bl	8000558 <__aeabi_f2d>
 8012ac0:	ec41 0b10 	vmov	d0, r0, r1
 8012ac4:	f006 fb44 	bl	8019150 <sqrt>
 8012ac8:	ec51 0b10 	vmov	r0, r1, d0
 8012acc:	f7ee f890 	bl	8000bf0 <__aeabi_d2f>
 8012ad0:	4b45      	ldr	r3, [pc, #276]	; (8012be8 <m_kalman_3gyro.isra.9.constprop.47+0xd48>)
 8012ad2:	f8ca 03c4 	str.w	r0, [sl, #964]	; 0x3c4
 8012ad6:	edd3 7a03 	vldr	s15, [r3, #12]
 8012ada:	edd3 8a02 	vldr	s17, [r3, #8]
 8012ade:	edcd 7a23 	vstr	s15, [sp, #140]	; 0x8c
 8012ae2:	f50a 7372 	add.w	r3, sl, #968	; 0x3c8
 8012ae6:	9324      	str	r3, [sp, #144]	; 0x90
 8012ae8:	f50d 7972 	add.w	r9, sp, #968	; 0x3c8
 8012aec:	f8cd a700 	str.w	sl, [sp, #1792]	; 0x700
 8012af0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012af2:	4658      	mov	r0, fp
 8012af4:	f20d 31c7 	addw	r1, sp, #967	; 0x3c7
 8012af8:	2301      	movs	r3, #1
 8012afa:	f801 3f01 	strb.w	r3, [r1, #1]!
 8012afe:	3301      	adds	r3, #1
 8012b00:	f852 4b0c 	ldr.w	r4, [r2], #12
 8012b04:	f840 4b04 	str.w	r4, [r0], #4
 8012b08:	2b1f      	cmp	r3, #31
 8012b0a:	d1f6      	bne.n	8012afa <m_kalman_3gyro.isra.9.constprop.47+0xc5a>
 8012b0c:	221e      	movs	r2, #30
 8012b0e:	2101      	movs	r1, #1
 8012b10:	4640      	mov	r0, r8
 8012b12:	f008 fa34 	bl	801af7e <memset>
 8012b16:	eddb 7a01 	vldr	s15, [fp, #4]
 8012b1a:	ed9b 7a00 	vldr	s14, [fp]
 8012b1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b26:	d90c      	bls.n	8012b42 <m_kalman_3gyro.isra.9.constprop.47+0xca2>
 8012b28:	eef4 7a67 	vcmp.f32	s15, s15
 8012b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b30:	d107      	bne.n	8012b42 <m_kalman_3gyro.isra.9.constprop.47+0xca2>
 8012b32:	f04f 0302 	mov.w	r3, #2
 8012b36:	f889 3000 	strb.w	r3, [r9]
 8012b3a:	f04f 0301 	mov.w	r3, #1
 8012b3e:	f889 3001 	strb.w	r3, [r9, #1]
 8012b42:	eddb 7a03 	vldr	s15, [fp, #12]
 8012b46:	ed9b 7a02 	vldr	s14, [fp, #8]
 8012b4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b52:	d90a      	bls.n	8012b6a <m_kalman_3gyro.isra.9.constprop.47+0xcca>
 8012b54:	eef4 7a67 	vcmp.f32	s15, s15
 8012b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b5c:	d105      	bne.n	8012b6a <m_kalman_3gyro.isra.9.constprop.47+0xcca>
 8012b5e:	2204      	movs	r2, #4
 8012b60:	2303      	movs	r3, #3
 8012b62:	f889 2002 	strb.w	r2, [r9, #2]
 8012b66:	f889 3003 	strb.w	r3, [r9, #3]
 8012b6a:	eddb 7a05 	vldr	s15, [fp, #20]
 8012b6e:	ed9b 7a04 	vldr	s14, [fp, #16]
 8012b72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b7a:	d90a      	bls.n	8012b92 <m_kalman_3gyro.isra.9.constprop.47+0xcf2>
 8012b7c:	eef4 7a67 	vcmp.f32	s15, s15
 8012b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b84:	d105      	bne.n	8012b92 <m_kalman_3gyro.isra.9.constprop.47+0xcf2>
 8012b86:	2206      	movs	r2, #6
 8012b88:	2305      	movs	r3, #5
 8012b8a:	f889 2004 	strb.w	r2, [r9, #4]
 8012b8e:	f889 3005 	strb.w	r3, [r9, #5]
 8012b92:	eddb 7a07 	vldr	s15, [fp, #28]
 8012b96:	ed9b 7a06 	vldr	s14, [fp, #24]
 8012b9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ba2:	d90a      	bls.n	8012bba <m_kalman_3gyro.isra.9.constprop.47+0xd1a>
 8012ba4:	eef4 7a67 	vcmp.f32	s15, s15
 8012ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bac:	d105      	bne.n	8012bba <m_kalman_3gyro.isra.9.constprop.47+0xd1a>
 8012bae:	2208      	movs	r2, #8
 8012bb0:	2307      	movs	r3, #7
 8012bb2:	f889 2006 	strb.w	r2, [r9, #6]
 8012bb6:	f889 3007 	strb.w	r3, [r9, #7]
 8012bba:	eddb 7a09 	vldr	s15, [fp, #36]	; 0x24
 8012bbe:	ed9b 7a08 	vldr	s14, [fp, #32]
 8012bc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bca:	d913      	bls.n	8012bf4 <m_kalman_3gyro.isra.9.constprop.47+0xd54>
 8012bcc:	eef4 7a67 	vcmp.f32	s15, s15
 8012bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bd4:	d10e      	bne.n	8012bf4 <m_kalman_3gyro.isra.9.constprop.47+0xd54>
 8012bd6:	220a      	movs	r2, #10
 8012bd8:	2309      	movs	r3, #9
 8012bda:	f889 2008 	strb.w	r2, [r9, #8]
 8012bde:	f889 3009 	strb.w	r3, [r9, #9]
 8012be2:	e007      	b.n	8012bf4 <m_kalman_3gyro.isra.9.constprop.47+0xd54>
 8012be4:	20001ab8 	.word	0x20001ab8
 8012be8:	20001698 	.word	0x20001698
 8012bec:	3f333333 	.word	0x3f333333
 8012bf0:	3f4ccccd 	.word	0x3f4ccccd
 8012bf4:	eddb 7a0b 	vldr	s15, [fp, #44]	; 0x2c
 8012bf8:	ed9b 7a0a 	vldr	s14, [fp, #40]	; 0x28
 8012bfc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c04:	d90a      	bls.n	8012c1c <m_kalman_3gyro.isra.9.constprop.47+0xd7c>
 8012c06:	eef4 7a67 	vcmp.f32	s15, s15
 8012c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c0e:	d105      	bne.n	8012c1c <m_kalman_3gyro.isra.9.constprop.47+0xd7c>
 8012c10:	220c      	movs	r2, #12
 8012c12:	230b      	movs	r3, #11
 8012c14:	f889 200a 	strb.w	r2, [r9, #10]
 8012c18:	f889 300b 	strb.w	r3, [r9, #11]
 8012c1c:	eddb 7a0d 	vldr	s15, [fp, #52]	; 0x34
 8012c20:	ed9b 7a0c 	vldr	s14, [fp, #48]	; 0x30
 8012c24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c2c:	d90a      	bls.n	8012c44 <m_kalman_3gyro.isra.9.constprop.47+0xda4>
 8012c2e:	eef4 7a67 	vcmp.f32	s15, s15
 8012c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c36:	d105      	bne.n	8012c44 <m_kalman_3gyro.isra.9.constprop.47+0xda4>
 8012c38:	220e      	movs	r2, #14
 8012c3a:	230d      	movs	r3, #13
 8012c3c:	f889 200c 	strb.w	r2, [r9, #12]
 8012c40:	f889 300d 	strb.w	r3, [r9, #13]
 8012c44:	eddb 7a0f 	vldr	s15, [fp, #60]	; 0x3c
 8012c48:	ed9b 7a0e 	vldr	s14, [fp, #56]	; 0x38
 8012c4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c54:	d90a      	bls.n	8012c6c <m_kalman_3gyro.isra.9.constprop.47+0xdcc>
 8012c56:	eef4 7a67 	vcmp.f32	s15, s15
 8012c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c5e:	d105      	bne.n	8012c6c <m_kalman_3gyro.isra.9.constprop.47+0xdcc>
 8012c60:	2210      	movs	r2, #16
 8012c62:	230f      	movs	r3, #15
 8012c64:	f889 200e 	strb.w	r2, [r9, #14]
 8012c68:	f889 300f 	strb.w	r3, [r9, #15]
 8012c6c:	eddb 7a11 	vldr	s15, [fp, #68]	; 0x44
 8012c70:	ed9b 7a10 	vldr	s14, [fp, #64]	; 0x40
 8012c74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c7c:	d90a      	bls.n	8012c94 <m_kalman_3gyro.isra.9.constprop.47+0xdf4>
 8012c7e:	eef4 7a67 	vcmp.f32	s15, s15
 8012c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c86:	d105      	bne.n	8012c94 <m_kalman_3gyro.isra.9.constprop.47+0xdf4>
 8012c88:	2212      	movs	r2, #18
 8012c8a:	2311      	movs	r3, #17
 8012c8c:	f889 2010 	strb.w	r2, [r9, #16]
 8012c90:	f889 3011 	strb.w	r3, [r9, #17]
 8012c94:	eddb 7a13 	vldr	s15, [fp, #76]	; 0x4c
 8012c98:	ed9b 7a12 	vldr	s14, [fp, #72]	; 0x48
 8012c9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ca4:	d90a      	bls.n	8012cbc <m_kalman_3gyro.isra.9.constprop.47+0xe1c>
 8012ca6:	eef4 7a67 	vcmp.f32	s15, s15
 8012caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cae:	d105      	bne.n	8012cbc <m_kalman_3gyro.isra.9.constprop.47+0xe1c>
 8012cb0:	2214      	movs	r2, #20
 8012cb2:	2313      	movs	r3, #19
 8012cb4:	f889 2012 	strb.w	r2, [r9, #18]
 8012cb8:	f889 3013 	strb.w	r3, [r9, #19]
 8012cbc:	eddb 7a15 	vldr	s15, [fp, #84]	; 0x54
 8012cc0:	ed9b 7a14 	vldr	s14, [fp, #80]	; 0x50
 8012cc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ccc:	d90a      	bls.n	8012ce4 <m_kalman_3gyro.isra.9.constprop.47+0xe44>
 8012cce:	eef4 7a67 	vcmp.f32	s15, s15
 8012cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cd6:	d105      	bne.n	8012ce4 <m_kalman_3gyro.isra.9.constprop.47+0xe44>
 8012cd8:	2216      	movs	r2, #22
 8012cda:	2315      	movs	r3, #21
 8012cdc:	f889 2014 	strb.w	r2, [r9, #20]
 8012ce0:	f889 3015 	strb.w	r3, [r9, #21]
 8012ce4:	eddb 7a17 	vldr	s15, [fp, #92]	; 0x5c
 8012ce8:	ed9b 7a16 	vldr	s14, [fp, #88]	; 0x58
 8012cec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cf4:	d90a      	bls.n	8012d0c <m_kalman_3gyro.isra.9.constprop.47+0xe6c>
 8012cf6:	eef4 7a67 	vcmp.f32	s15, s15
 8012cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cfe:	d105      	bne.n	8012d0c <m_kalman_3gyro.isra.9.constprop.47+0xe6c>
 8012d00:	2218      	movs	r2, #24
 8012d02:	2317      	movs	r3, #23
 8012d04:	f889 2016 	strb.w	r2, [r9, #22]
 8012d08:	f889 3017 	strb.w	r3, [r9, #23]
 8012d0c:	eddb 7a19 	vldr	s15, [fp, #100]	; 0x64
 8012d10:	ed9b 7a18 	vldr	s14, [fp, #96]	; 0x60
 8012d14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d1c:	d90a      	bls.n	8012d34 <m_kalman_3gyro.isra.9.constprop.47+0xe94>
 8012d1e:	eef4 7a67 	vcmp.f32	s15, s15
 8012d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d26:	d105      	bne.n	8012d34 <m_kalman_3gyro.isra.9.constprop.47+0xe94>
 8012d28:	221a      	movs	r2, #26
 8012d2a:	2319      	movs	r3, #25
 8012d2c:	f889 2018 	strb.w	r2, [r9, #24]
 8012d30:	f889 3019 	strb.w	r3, [r9, #25]
 8012d34:	eddb 7a1b 	vldr	s15, [fp, #108]	; 0x6c
 8012d38:	ed9b 7a1a 	vldr	s14, [fp, #104]	; 0x68
 8012d3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d44:	d90a      	bls.n	8012d5c <m_kalman_3gyro.isra.9.constprop.47+0xebc>
 8012d46:	eef4 7a67 	vcmp.f32	s15, s15
 8012d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d4e:	d105      	bne.n	8012d5c <m_kalman_3gyro.isra.9.constprop.47+0xebc>
 8012d50:	221c      	movs	r2, #28
 8012d52:	231b      	movs	r3, #27
 8012d54:	f889 201a 	strb.w	r2, [r9, #26]
 8012d58:	f889 301b 	strb.w	r3, [r9, #27]
 8012d5c:	eddb 7a1d 	vldr	s15, [fp, #116]	; 0x74
 8012d60:	ed9b 7a1c 	vldr	s14, [fp, #112]	; 0x70
 8012d64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d6c:	d90b      	bls.n	8012d86 <m_kalman_3gyro.isra.9.constprop.47+0xee6>
 8012d6e:	eef4 7a67 	vcmp.f32	s15, s15
 8012d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d76:	d106      	bne.n	8012d86 <m_kalman_3gyro.isra.9.constprop.47+0xee6>
 8012d78:	231d      	movs	r3, #29
 8012d7a:	f04f 021e 	mov.w	r2, #30
 8012d7e:	f889 201c 	strb.w	r2, [r9, #28]
 8012d82:	f889 301d 	strb.w	r3, [r9, #29]
 8012d86:	2304      	movs	r3, #4
 8012d88:	930f      	str	r3, [sp, #60]	; 0x3c
 8012d8a:	2302      	movs	r3, #2
 8012d8c:	9304      	str	r3, [sp, #16]
 8012d8e:	9a04      	ldr	r2, [sp, #16]
 8012d90:	f102 0a01 	add.w	sl, r2, #1
 8012d94:	0053      	lsls	r3, r2, #1
 8012d96:	f1ba 0f1f 	cmp.w	sl, #31
 8012d9a:	9305      	str	r3, [sp, #20]
 8012d9c:	d056      	beq.n	8012e4c <m_kalman_3gyro.isra.9.constprop.47+0xfac>
 8012d9e:	2301      	movs	r3, #1
 8012da0:	9302      	str	r3, [sp, #8]
 8012da2:	9b02      	ldr	r3, [sp, #8]
 8012da4:	9a05      	ldr	r2, [sp, #20]
 8012da6:	189f      	adds	r7, r3, r2
 8012da8:	2f1f      	cmp	r7, #31
 8012daa:	bfa8      	it	ge
 8012dac:	271f      	movge	r7, #31
 8012dae:	1afb      	subs	r3, r7, r3
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	9300      	str	r3, [sp, #0]
 8012db4:	dd42      	ble.n	8012e3c <m_kalman_3gyro.isra.9.constprop.47+0xf9c>
 8012db6:	4655      	mov	r5, sl
 8012db8:	9e02      	ldr	r6, [sp, #8]
 8012dba:	2401      	movs	r4, #1
 8012dbc:	e00e      	b.n	8012ddc <m_kalman_3gyro.isra.9.constprop.47+0xf3c>
 8012dbe:	eef4 7a67 	vcmp.f32	s15, s15
 8012dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dc6:	d11f      	bne.n	8012e08 <m_kalman_3gyro.isra.9.constprop.47+0xf68>
 8012dc8:	3501      	adds	r5, #1
 8012dca:	42bd      	cmp	r5, r7
 8012dcc:	f800 3c01 	strb.w	r3, [r0, #-1]
 8012dd0:	f001 86fa 	beq.w	8014bc8 <m_kalman_3gyro.isra.9.constprop.47+0x2d28>
 8012dd4:	9b00      	ldr	r3, [sp, #0]
 8012dd6:	3401      	adds	r4, #1
 8012dd8:	42a3      	cmp	r3, r4
 8012dda:	db28      	blt.n	8012e2e <m_kalman_3gyro.isra.9.constprop.47+0xf8e>
 8012ddc:	f106 3cff 	add.w	ip, r6, #4294967295
 8012de0:	1e69      	subs	r1, r5, #1
 8012de2:	f919 200c 	ldrsb.w	r2, [r9, ip]
 8012de6:	f919 3001 	ldrsb.w	r3, [r9, r1]
 8012dea:	eb0b 0e82 	add.w	lr, fp, r2, lsl #2
 8012dee:	eb0b 0083 	add.w	r0, fp, r3, lsl #2
 8012df2:	ed50 7a01 	vldr	s15, [r0, #-4]
 8012df6:	ed1e 7a01 	vldr	s14, [lr, #-4]
 8012dfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e02:	eb08 0004 	add.w	r0, r8, r4
 8012e06:	d8da      	bhi.n	8012dbe <m_kalman_3gyro.isra.9.constprop.47+0xf1e>
 8012e08:	3601      	adds	r6, #1
 8012e0a:	4556      	cmp	r6, sl
 8012e0c:	f800 2c01 	strb.w	r2, [r0, #-1]
 8012e10:	d1e0      	bne.n	8012dd4 <m_kalman_3gyro.isra.9.constprop.47+0xf34>
 8012e12:	42bd      	cmp	r5, r7
 8012e14:	eba7 0205 	sub.w	r2, r7, r5
 8012e18:	4449      	add	r1, r9
 8012e1a:	dadb      	bge.n	8012dd4 <m_kalman_3gyro.isra.9.constprop.47+0xf34>
 8012e1c:	443c      	add	r4, r7
 8012e1e:	f008 f8a3 	bl	801af68 <memcpy>
 8012e22:	1b64      	subs	r4, r4, r5
 8012e24:	9b00      	ldr	r3, [sp, #0]
 8012e26:	3401      	adds	r4, #1
 8012e28:	42a3      	cmp	r3, r4
 8012e2a:	463d      	mov	r5, r7
 8012e2c:	dad6      	bge.n	8012ddc <m_kalman_3gyro.isra.9.constprop.47+0xf3c>
 8012e2e:	461a      	mov	r2, r3
 8012e30:	9b02      	ldr	r3, [sp, #8]
 8012e32:	1e58      	subs	r0, r3, #1
 8012e34:	4448      	add	r0, r9
 8012e36:	4641      	mov	r1, r8
 8012e38:	f008 f896 	bl	801af68 <memcpy>
 8012e3c:	9b04      	ldr	r3, [sp, #16]
 8012e3e:	9702      	str	r7, [sp, #8]
 8012e40:	eb03 0a07 	add.w	sl, r3, r7
 8012e44:	f1ba 0f1e 	cmp.w	sl, #30
 8012e48:	ddab      	ble.n	8012da2 <m_kalman_3gyro.isra.9.constprop.47+0xf02>
 8012e4a:	9b05      	ldr	r3, [sp, #20]
 8012e4c:	9304      	str	r3, [sp, #16]
 8012e4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012e50:	3b01      	subs	r3, #1
 8012e52:	930f      	str	r3, [sp, #60]	; 0x3c
 8012e54:	d19b      	bne.n	8012d8e <m_kalman_3gyro.isra.9.constprop.47+0xeee>
 8012e56:	f999 301d 	ldrsb.w	r3, [r9, #29]
 8012e5a:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 8012e5e:	ed53 7a01 	vldr	s15, [r3, #-4]
 8012e62:	eef4 7a67 	vcmp.f32	s15, s15
 8012e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e6a:	d122      	bne.n	8012eb2 <m_kalman_3gyro.isra.9.constprop.47+0x1012>
 8012e6c:	f999 200e 	ldrsb.w	r2, [r9, #14]
 8012e70:	f999 300f 	ldrsb.w	r3, [r9, #15]
 8012e74:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 8012e78:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 8012e7c:	ed52 7a01 	vldr	s15, [r2, #-4]
 8012e80:	ed13 7a01 	vldr	s14, [r3, #-4]
 8012e84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e8c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012e90:	bf4c      	ite	mi
 8012e92:	2201      	movmi	r2, #1
 8012e94:	2200      	movpl	r2, #0
 8012e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e9a:	bf4c      	ite	mi
 8012e9c:	2301      	movmi	r3, #1
 8012e9e:	2300      	movpl	r3, #0
 8012ea0:	429a      	cmp	r2, r3
 8012ea2:	f001 86c4 	beq.w	8014c2e <m_kalman_3gyro.isra.9.constprop.47+0x2d8e>
 8012ea6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012eaa:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8012eae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012eb2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012eb4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8012eb6:	3204      	adds	r2, #4
 8012eb8:	9217      	str	r2, [sp, #92]	; 0x5c
 8012eba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012ebc:	ece3 7a01 	vstmia	r3!, {s15}
 8012ec0:	429a      	cmp	r2, r3
 8012ec2:	9324      	str	r3, [sp, #144]	; 0x90
 8012ec4:	f47f ae14 	bne.w	8012af0 <m_kalman_3gyro.isra.9.constprop.47+0xc50>
 8012ec8:	f8dd a700 	ldr.w	sl, [sp, #1792]	; 0x700
 8012ecc:	edda 6af2 	vldr	s13, [sl, #968]	; 0x3c8
 8012ed0:	edda 7af3 	vldr	s15, [sl, #972]	; 0x3cc
 8012ed4:	ed9a 7af4 	vldr	s14, [sl, #976]	; 0x3d0
 8012ed8:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8012edc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012ee0:	ee27 7a07 	vmul.f32	s14, s14, s14
 8012ee4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012ee8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012eec:	ee17 0a90 	vmov	r0, s15
 8012ef0:	f7ed fb32 	bl	8000558 <__aeabi_f2d>
 8012ef4:	ec41 0b10 	vmov	d0, r0, r1
 8012ef8:	f006 f92a 	bl	8019150 <sqrt>
 8012efc:	ec51 0b10 	vmov	r0, r1, d0
 8012f00:	f7ed fe76 	bl	8000bf0 <__aeabi_d2f>
 8012f04:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8012f08:	ee2e 6a87 	vmul.f32	s12, s29, s14
 8012f0c:	ee6d 6a07 	vmul.f32	s13, s26, s14
 8012f10:	eecc 7a86 	vdiv.f32	s15, s25, s12
 8012f14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012f16:	9004      	str	r0, [sp, #16]
 8012f18:	ee89 6aa6 	vdiv.f32	s12, s19, s13
 8012f1c:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8012f20:	ed5f 6ace 	vldr	s13, [pc, #-824]	; 8012bec <m_kalman_3gyro.isra.9.constprop.47+0xd4c>
 8012f24:	edc3 7a00 	vstr	s15, [r3]
 8012f28:	eecc 5a07 	vdiv.f32	s11, s24, s14
 8012f2c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8012f2e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012f32:	ee77 7a86 	vadd.f32	s15, s15, s12
 8012f36:	ee05 0a10 	vmov	s10, r0
 8012f3a:	ee69 8a87 	vmul.f32	s17, s19, s14
 8012f3e:	ee6c 6a26 	vmul.f32	s13, s24, s13
 8012f42:	ed83 6a00 	vstr	s12, [r3]
 8012f46:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8012f4a:	ee25 6a07 	vmul.f32	s12, s10, s14
 8012f4e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012f50:	ed1f 7ad9 	vldr	s14, [pc, #-868]	; 8012bf0 <m_kalman_3gyro.isra.9.constprop.47+0xd50>
 8012f54:	edc3 5a00 	vstr	s11, [r3]
 8012f58:	ee78 8aa6 	vadd.f32	s17, s17, s13
 8012f5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012f5e:	ee76 7a27 	vadd.f32	s15, s12, s15
 8012f62:	ee68 8a87 	vmul.f32	s17, s17, s14
 8012f66:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8012f6a:	ed83 6a00 	vstr	s12, [r3]
 8012f6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012f72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012f74:	edc3 7a00 	vstr	s15, [r3]
 8012f78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012f7a:	edc3 8a00 	vstr	s17, [r3]
 8012f7e:	f89a 38ce 	ldrb.w	r3, [sl, #2254]	; 0x8ce
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	f041 8632 	bne.w	8014bec <m_kalman_3gyro.isra.9.constprop.47+0x2d4c>
 8012f88:	2301      	movs	r3, #1
 8012f8a:	f60a 07b8 	addw	r7, sl, #2232	; 0x8b8
 8012f8e:	e9da 0102 	ldrd	r0, r1, [sl, #8]
 8012f92:	f88a 38ce 	strb.w	r3, [sl, #2254]	; 0x8ce
 8012f96:	2200      	movs	r2, #0
 8012f98:	2300      	movs	r3, #0
 8012f9a:	edc7 8a00 	vstr	s17, [r7]
 8012f9e:	f60a 06bc 	addw	r6, sl, #2236	; 0x8bc
 8012fa2:	f7ed f97b 	bl	800029c <__adddf3>
 8012fa6:	f50a 650c 	add.w	r5, sl, #2240	; 0x8c0
 8012faa:	e9da 2304 	ldrd	r2, r3, [sl, #16]
 8012fae:	edc6 8a00 	vstr	s17, [r6]
 8012fb2:	f7ed f973 	bl	800029c <__adddf3>
 8012fb6:	e9da 2306 	ldrd	r2, r3, [sl, #24]
 8012fba:	edc5 8a00 	vstr	s17, [r5]
 8012fbe:	f7ed f96d 	bl	800029c <__adddf3>
 8012fc2:	f60a 04c4 	addw	r4, sl, #2244	; 0x8c4
 8012fc6:	f60a 03c8 	addw	r3, sl, #2248	; 0x8c8
 8012fca:	9302      	str	r3, [sp, #8]
 8012fcc:	edc4 8a00 	vstr	s17, [r4]
 8012fd0:	e9da 2308 	ldrd	r2, r3, [sl, #32]
 8012fd4:	f7ed f962 	bl	800029c <__adddf3>
 8012fd8:	9b02      	ldr	r3, [sp, #8]
 8012fda:	edc3 8a00 	vstr	s17, [r3]
 8012fde:	e9da 230a 	ldrd	r2, r3, [sl, #40]	; 0x28
 8012fe2:	f7ed f95b 	bl	800029c <__adddf3>
 8012fe6:	4602      	mov	r2, r0
 8012fe8:	460b      	mov	r3, r1
 8012fea:	e9cd 0100 	strd	r0, r1, [sp]
 8012fee:	e9da 0102 	ldrd	r0, r1, [sl, #8]
 8012ff2:	f7ed fc2f 	bl	8000854 <__aeabi_ddiv>
 8012ff6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012ffa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012ffe:	e9da 0104 	ldrd	r0, r1, [sl, #16]
 8013002:	f7ed fc27 	bl	8000854 <__aeabi_ddiv>
 8013006:	e9dd 2300 	ldrd	r2, r3, [sp]
 801300a:	e9ca 0104 	strd	r0, r1, [sl, #16]
 801300e:	e9da 0106 	ldrd	r0, r1, [sl, #24]
 8013012:	f7ed fc1f 	bl	8000854 <__aeabi_ddiv>
 8013016:	e9dd 2300 	ldrd	r2, r3, [sp]
 801301a:	e9ca 0106 	strd	r0, r1, [sl, #24]
 801301e:	e9da 0108 	ldrd	r0, r1, [sl, #32]
 8013022:	f7ed fc17 	bl	8000854 <__aeabi_ddiv>
 8013026:	e9dd 2300 	ldrd	r2, r3, [sp]
 801302a:	e9ca 0108 	strd	r0, r1, [sl, #32]
 801302e:	e9da 010a 	ldrd	r0, r1, [sl, #40]	; 0x28
 8013032:	f7ed fc0f 	bl	8000854 <__aeabi_ddiv>
 8013036:	e9ca 010a 	strd	r0, r1, [sl, #40]	; 0x28
 801303a:	9b02      	ldr	r3, [sp, #8]
 801303c:	edd4 6a00 	vldr	s13, [r4]
 8013040:	edc3 6a00 	vstr	s13, [r3]
 8013044:	e9da 010a 	ldrd	r0, r1, [sl, #40]	; 0x28
 8013048:	edcd 6a00 	vstr	s13, [sp]
 801304c:	f7ed fdd0 	bl	8000bf0 <__aeabi_d2f>
 8013050:	edd5 7a00 	vldr	s15, [r5]
 8013054:	eddd 6a00 	vldr	s13, [sp]
 8013058:	edc4 7a00 	vstr	s15, [r4]
 801305c:	edcd 7a02 	vstr	s15, [sp, #8]
 8013060:	ee07 0a90 	vmov	s15, r0
 8013064:	ed9f 6ada 	vldr	s12, [pc, #872]	; 80133d0 <m_kalman_3gyro.isra.9.constprop.47+0x1530>
 8013068:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801306c:	e9da 0108 	ldrd	r0, r1, [sl, #32]
 8013070:	ee76 6a86 	vadd.f32	s13, s13, s12
 8013074:	edcd 6a00 	vstr	s13, [sp]
 8013078:	f7ed fdba 	bl	8000bf0 <__aeabi_d2f>
 801307c:	eddd 7a02 	vldr	s15, [sp, #8]
 8013080:	ed96 7a00 	vldr	s14, [r6]
 8013084:	ee06 0a90 	vmov	s13, r0
 8013088:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801308c:	eddd 6a00 	vldr	s13, [sp]
 8013090:	ed85 7a00 	vstr	s14, [r5]
 8013094:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8013098:	e9da 0106 	ldrd	r0, r1, [sl, #24]
 801309c:	ed8d 7a02 	vstr	s14, [sp, #8]
 80130a0:	edcd 6a00 	vstr	s13, [sp]
 80130a4:	f7ed fda4 	bl	8000bf0 <__aeabi_d2f>
 80130a8:	ed9d 7a02 	vldr	s14, [sp, #8]
 80130ac:	edd7 7a00 	vldr	s15, [r7]
 80130b0:	ee06 0a90 	vmov	s13, r0
 80130b4:	ee26 7a87 	vmul.f32	s14, s13, s14
 80130b8:	eddd 6a00 	vldr	s13, [sp]
 80130bc:	edc6 7a00 	vstr	s15, [r6]
 80130c0:	ee37 7a26 	vadd.f32	s14, s14, s13
 80130c4:	e9da 0104 	ldrd	r0, r1, [sl, #16]
 80130c8:	edcd 7a02 	vstr	s15, [sp, #8]
 80130cc:	ed8d 7a00 	vstr	s14, [sp]
 80130d0:	f7ed fd8e 	bl	8000bf0 <__aeabi_d2f>
 80130d4:	eddd 7a02 	vldr	s15, [sp, #8]
 80130d8:	edc7 8a00 	vstr	s17, [r7]
 80130dc:	ee07 0a10 	vmov	s14, r0
 80130e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80130e4:	ed9d 7a00 	vldr	s14, [sp]
 80130e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80130ec:	e9da 0102 	ldrd	r0, r1, [sl, #8]
 80130f0:	edcd 7a00 	vstr	s15, [sp]
 80130f4:	f7ed fd7c 	bl	8000bf0 <__aeabi_d2f>
 80130f8:	ee07 0a90 	vmov	s15, r0
 80130fc:	ee67 8aa8 	vmul.f32	s17, s15, s17
 8013100:	eddd 7a00 	vldr	s15, [sp]
 8013104:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8013106:	ee78 8aa7 	vadd.f32	s17, s17, s15
 801310a:	f50d 61db 	add.w	r1, sp, #1752	; 0x6d8
 801310e:	2200      	movs	r2, #0
 8013110:	2300      	movs	r3, #0
 8013112:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013116:	edc4 8a00 	vstr	s17, [r4]
 801311a:	f7ed fced 	bl	8000af8 <__aeabi_dcmple>
 801311e:	2800      	cmp	r0, #0
 8013120:	f041 8571 	bne.w	8014c06 <m_kalman_3gyro.isra.9.constprop.47+0x2d66>
 8013124:	f50d 61db 	add.w	r1, sp, #1752	; 0x6d8
 8013128:	2200      	movs	r2, #0
 801312a:	4baa      	ldr	r3, [pc, #680]	; (80133d4 <m_kalman_3gyro.isra.9.constprop.47+0x1534>)
 801312c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013130:	f7ed fcce 	bl	8000ad0 <__aeabi_dcmpeq>
 8013134:	2800      	cmp	r0, #0
 8013136:	f041 8574 	bne.w	8014c22 <m_kalman_3gyro.isra.9.constprop.47+0x2d82>
 801313a:	eddd 6acb 	vldr	s13, [sp, #812]	; 0x32c
 801313e:	ed9d 7ab2 	vldr	s14, [sp, #712]	; 0x2c8
 8013142:	eddd 7acc 	vldr	s15, [sp, #816]	; 0x330
 8013146:	ed9d 6ab3 	vldr	s12, [sp, #716]	; 0x2cc
 801314a:	eddd 5ab1 	vldr	s11, [sp, #708]	; 0x2c4
 801314e:	ee66 6a88 	vmul.f32	s13, s13, s16
 8013152:	ee27 7a08 	vmul.f32	s14, s14, s16
 8013156:	ee67 7a88 	vmul.f32	s15, s15, s16
 801315a:	edcd 6acb 	vstr	s13, [sp, #812]	; 0x32c
 801315e:	ed8d 7ab2 	vstr	s14, [sp, #712]	; 0x2c8
 8013162:	eddd 6acd 	vldr	s13, [sp, #820]	; 0x334
 8013166:	ed9d 7ab4 	vldr	s14, [sp, #720]	; 0x2d0
 801316a:	edcd 7acc 	vstr	s15, [sp, #816]	; 0x330
 801316e:	eddd 7ace 	vldr	s15, [sp, #824]	; 0x338
 8013172:	ee26 6a08 	vmul.f32	s12, s12, s16
 8013176:	ee66 6a88 	vmul.f32	s13, s13, s16
 801317a:	ee27 7a08 	vmul.f32	s14, s14, s16
 801317e:	ee67 7a88 	vmul.f32	s15, s15, s16
 8013182:	ed8d 6ab3 	vstr	s12, [sp, #716]	; 0x2cc
 8013186:	edcd 6acd 	vstr	s13, [sp, #820]	; 0x334
 801318a:	ed9d 6ab5 	vldr	s12, [sp, #724]	; 0x2d4
 801318e:	eddd 6acf 	vldr	s13, [sp, #828]	; 0x33c
 8013192:	ed8d 7ab4 	vstr	s14, [sp, #720]	; 0x2d0
 8013196:	edcd 7ace 	vstr	s15, [sp, #824]	; 0x338
 801319a:	ed9d 7ab6 	vldr	s14, [sp, #728]	; 0x2d8
 801319e:	eddd 7ad0 	vldr	s15, [sp, #832]	; 0x340
 80131a2:	ee26 6a08 	vmul.f32	s12, s12, s16
 80131a6:	ee66 6a88 	vmul.f32	s13, s13, s16
 80131aa:	ee27 7a08 	vmul.f32	s14, s14, s16
 80131ae:	ee67 7a88 	vmul.f32	s15, s15, s16
 80131b2:	ed8d 6ab5 	vstr	s12, [sp, #724]	; 0x2d4
 80131b6:	edcd 6acf 	vstr	s13, [sp, #828]	; 0x33c
 80131ba:	ed9d 6ab7 	vldr	s12, [sp, #732]	; 0x2dc
 80131be:	eddd 6ad1 	vldr	s13, [sp, #836]	; 0x344
 80131c2:	ed8d 7ab6 	vstr	s14, [sp, #728]	; 0x2d8
 80131c6:	edcd 7ad0 	vstr	s15, [sp, #832]	; 0x340
 80131ca:	ed9d 7ab8 	vldr	s14, [sp, #736]	; 0x2e0
 80131ce:	eddd 7ad2 	vldr	s15, [sp, #840]	; 0x348
 80131d2:	ee65 5a88 	vmul.f32	s11, s11, s16
 80131d6:	ee26 6a08 	vmul.f32	s12, s12, s16
 80131da:	ee66 6a88 	vmul.f32	s13, s13, s16
 80131de:	ee27 7a08 	vmul.f32	s14, s14, s16
 80131e2:	ee67 7a88 	vmul.f32	s15, s15, s16
 80131e6:	ed8d 6ab7 	vstr	s12, [sp, #732]	; 0x2dc
 80131ea:	edcd 6ad1 	vstr	s13, [sp, #836]	; 0x344
 80131ee:	ed8d 7ab8 	vstr	s14, [sp, #736]	; 0x2e0
 80131f2:	edcd 7ad2 	vstr	s15, [sp, #840]	; 0x348
 80131f6:	edcd 5ab1 	vstr	s11, [sp, #708]	; 0x2c4
 80131fa:	eddd 5ab9 	vldr	s11, [sp, #740]	; 0x2e4
 80131fe:	eddd 7ad3 	vldr	s15, [sp, #844]	; 0x34c
 8013202:	ed9d 6aba 	vldr	s12, [sp, #744]	; 0x2e8
 8013206:	eddd 6ad4 	vldr	s13, [sp, #848]	; 0x350
 801320a:	ed9d 7abb 	vldr	s14, [sp, #748]	; 0x2ec
 801320e:	ee67 7a88 	vmul.f32	s15, s15, s16
 8013212:	ee26 6a08 	vmul.f32	s12, s12, s16
 8013216:	edcd 7ad3 	vstr	s15, [sp, #844]	; 0x34c
 801321a:	eddd 7ad5 	vldr	s15, [sp, #852]	; 0x354
 801321e:	ed8d 6aba 	vstr	s12, [sp, #744]	; 0x2e8
 8013222:	ee66 6a88 	vmul.f32	s13, s13, s16
 8013226:	ee27 7a08 	vmul.f32	s14, s14, s16
 801322a:	ee67 7a88 	vmul.f32	s15, s15, s16
 801322e:	ed9d 6abc 	vldr	s12, [sp, #752]	; 0x2f0
 8013232:	edcd 6ad4 	vstr	s13, [sp, #848]	; 0x350
 8013236:	ed8d 7abb 	vstr	s14, [sp, #748]	; 0x2ec
 801323a:	eddd 6ad6 	vldr	s13, [sp, #856]	; 0x358
 801323e:	ed9d 7abd 	vldr	s14, [sp, #756]	; 0x2f4
 8013242:	edcd 7ad5 	vstr	s15, [sp, #852]	; 0x354
 8013246:	eddd 7ad7 	vldr	s15, [sp, #860]	; 0x35c
 801324a:	ee65 5a88 	vmul.f32	s11, s11, s16
 801324e:	ee26 6a08 	vmul.f32	s12, s12, s16
 8013252:	ee66 6a88 	vmul.f32	s13, s13, s16
 8013256:	ee27 7a08 	vmul.f32	s14, s14, s16
 801325a:	ee27 8a88 	vmul.f32	s16, s15, s16
 801325e:	a9be      	add	r1, sp, #760	; 0x2f8
 8013260:	edcd 5ab9 	vstr	s11, [sp, #740]	; 0x2e4
 8013264:	ed8d 6abc 	vstr	s12, [sp, #752]	; 0x2f0
 8013268:	edcd 6ad6 	vstr	s13, [sp, #856]	; 0x358
 801326c:	a8b1      	add	r0, sp, #708	; 0x2c4
 801326e:	ed8d 7abd 	vstr	s14, [sp, #756]	; 0x2f4
 8013272:	eeb0 0a68 	vmov.f32	s0, s17
 8013276:	ed8d 8ad7 	vstr	s16, [sp, #860]	; 0x35c
 801327a:	f7fa feb7 	bl	800dfec <m_interp1q_constrain>
 801327e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013280:	ed8d 0a00 	vstr	s0, [sp]
 8013284:	ed83 0a00 	vstr	s0, [r3]
 8013288:	a9d8      	add	r1, sp, #864	; 0x360
 801328a:	a8cb      	add	r0, sp, #812	; 0x32c
 801328c:	eeb0 0a68 	vmov.f32	s0, s17
 8013290:	f7fa feac 	bl	800dfec <m_interp1q_constrain>
 8013294:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013296:	eddd 7a00 	vldr	s15, [sp]
 801329a:	ed83 0a00 	vstr	s0, [r3]
 801329e:	4b4e      	ldr	r3, [pc, #312]	; (80133d8 <m_kalman_3gyro.isra.9.constprop.47+0x1538>)
 80132a0:	ed9a 7a2d 	vldr	s14, [sl, #180]	; 0xb4
 80132a4:	ed93 8a00 	vldr	s16, [r3]
 80132a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80132aa:	edc3 7a00 	vstr	s15, [r3]
 80132ae:	ee78 7a47 	vsub.f32	s15, s16, s14
 80132b2:	eef0 7ae7 	vabs.f32	s15, s15
 80132b6:	ee17 0a90 	vmov	r0, s15
 80132ba:	f7ed f94d 	bl	8000558 <__aeabi_f2d>
 80132be:	ec41 0b10 	vmov	d0, r0, r1
 80132c2:	f005 fd1d 	bl	8018d00 <floor>
 80132c6:	ec51 0b10 	vmov	r0, r1, d0
 80132ca:	f7ed fc71 	bl	8000bb0 <__aeabi_d2uiz>
 80132ce:	f8dd 36f4 	ldr.w	r3, [sp, #1780]	; 0x6f4
 80132d2:	7018      	strb	r0, [r3, #0]
 80132d4:	ed9a 7a2d 	vldr	s14, [sl, #180]	; 0xb4
 80132d8:	edda 7a2b 	vldr	s15, [sl, #172]	; 0xac
 80132dc:	4b3f      	ldr	r3, [pc, #252]	; (80133dc <m_kalman_3gyro.isra.9.constprop.47+0x153c>)
 80132de:	ee38 7a47 	vsub.f32	s14, s16, s14
 80132e2:	ee7f 7ae7 	vsub.f32	s15, s31, s15
 80132e6:	eeb0 7ac7 	vabs.f32	s14, s14
 80132ea:	eef0 7ae7 	vabs.f32	s15, s15
 80132ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80132f2:	ed83 7a00 	vstr	s14, [r3]
 80132f6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80132f8:	edcd 7a00 	vstr	s15, [sp]
 80132fc:	edc3 7a00 	vstr	s15, [r3]
 8013300:	ee17 0a90 	vmov	r0, s15
 8013304:	f7ed f928 	bl	8000558 <__aeabi_f2d>
 8013308:	a32f      	add	r3, pc, #188	; (adr r3, 80133c8 <m_kalman_3gyro.isra.9.constprop.47+0x1528>)
 801330a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801330e:	f7ed fc07 	bl	8000b20 <__aeabi_dcmpgt>
 8013312:	2800      	cmp	r0, #0
 8013314:	f001 8466 	beq.w	8014be4 <m_kalman_3gyro.isra.9.constprop.47+0x2d44>
 8013318:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80133e0 <m_kalman_3gyro.isra.9.constprop.47+0x1540>
 801331c:	eddd 7a00 	vldr	s15, [sp]
 8013320:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013322:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013326:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 801332a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801332e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013332:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013336:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 801333a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801333e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013342:	edc3 7a00 	vstr	s15, [r3]
 8013346:	f301 8468 	bgt.w	8014c1a <m_kalman_3gyro.isra.9.constprop.47+0x2d7a>
 801334a:	ee17 0a90 	vmov	r0, s15
 801334e:	f7ed f903 	bl	8000558 <__aeabi_f2d>
 8013352:	ec41 0b10 	vmov	d0, r0, r1
 8013356:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801335a:	ee78 7a65 	vsub.f32	s15, s16, s11
 801335e:	edcd 5a00 	vstr	s11, [sp]
 8013362:	eef0 7ae7 	vabs.f32	s15, s15
 8013366:	ee17 0a90 	vmov	r0, s15
 801336a:	ed8d 0b02 	vstr	d0, [sp, #8]
 801336e:	f7ed f8f3 	bl	8000558 <__aeabi_f2d>
 8013372:	4b1c      	ldr	r3, [pc, #112]	; (80133e4 <m_kalman_3gyro.isra.9.constprop.47+0x1544>)
 8013374:	2200      	movs	r2, #0
 8013376:	f7ec ff8f 	bl	8000298 <__aeabi_dsub>
 801337a:	ed9d 0b02 	vldr	d0, [sp, #8]
 801337e:	ec41 0b11 	vmov	d1, r0, r1
 8013382:	f005 fd41 	bl	8018e08 <fmax>
 8013386:	ec51 0b10 	vmov	r0, r1, d0
 801338a:	f7ed fc31 	bl	8000bf0 <__aeabi_d2f>
 801338e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013390:	6018      	str	r0, [r3, #0]
 8013392:	f89a 3031 	ldrb.w	r3, [sl, #49]	; 0x31
 8013396:	2b00      	cmp	r3, #0
 8013398:	f000 80ae 	beq.w	80134f8 <m_kalman_3gyro.isra.9.constprop.47+0x1658>
 801339c:	f89a 3030 	ldrb.w	r3, [sl, #48]	; 0x30
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	f040 80a9 	bne.w	80134f8 <m_kalman_3gyro.isra.9.constprop.47+0x1658>
 80133a6:	ed9d 7a27 	vldr	s14, [sp, #156]	; 0x9c
 80133aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80133ac:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80133b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80133b4:	ed93 7a00 	vldr	s14, [r3]
 80133b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80133bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133c0:	f140 809a 	bpl.w	80134f8 <m_kalman_3gyro.isra.9.constprop.47+0x1658>
 80133c4:	e014      	b.n	80133f0 <m_kalman_3gyro.isra.9.constprop.47+0x1550>
 80133c6:	bf00      	nop
 80133c8:	9999999a 	.word	0x9999999a
 80133cc:	3fb99999 	.word	0x3fb99999
 80133d0:	00000000 	.word	0x00000000
 80133d4:	3ff00000 	.word	0x3ff00000
 80133d8:	20001ab4 	.word	0x20001ab4
 80133dc:	20001ac4 	.word	0x20001ac4
 80133e0:	3dcccccd 	.word	0x3dcccccd
 80133e4:	3fe00000 	.word	0x3fe00000
 80133e8:	3f99999a 	.word	0x3f99999a
 80133ec:	3f4ccccd 	.word	0x3f4ccccd
 80133f0:	ed8a ba12 	vstr	s22, [sl, #72]	; 0x48
 80133f4:	edca ba15 	vstr	s23, [sl, #84]	; 0x54
 80133f8:	edca aa18 	vstr	s21, [sl, #96]	; 0x60
 80133fc:	edca da11 	vstr	s27, [sl, #68]	; 0x44
 8013400:	ed8a ea14 	vstr	s28, [sl, #80]	; 0x50
 8013404:	ed8a 9a17 	vstr	s18, [sl, #92]	; 0x5c
 8013408:	ed9d 0b20 	vldr	d0, [sp, #128]	; 0x80
 801340c:	f005 fea0 	bl	8019150 <sqrt>
 8013410:	ec51 0b10 	vmov	r0, r1, d0
 8013414:	f7ed fbec 	bl	8000bf0 <__aeabi_d2f>
 8013418:	ed9a 4a11 	vldr	s8, [sl, #68]	; 0x44
 801341c:	ed9a 5a17 	vldr	s10, [sl, #92]	; 0x5c
 8013420:	edda 4a14 	vldr	s9, [sl, #80]	; 0x50
 8013424:	ed9a 7a18 	vldr	s14, [sl, #96]	; 0x60
 8013428:	edda 6a12 	vldr	s13, [sl, #72]	; 0x48
 801342c:	9906      	ldr	r1, [sp, #24]
 801342e:	ee06 0a10 	vmov	s12, r0
 8013432:	eec4 7a06 	vdiv.f32	s15, s8, s12
 8013436:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013438:	ee85 4a06 	vdiv.f32	s8, s10, s12
 801343c:	ee84 5a86 	vdiv.f32	s10, s9, s12
 8013440:	ed9a 6a15 	vldr	s12, [sl, #84]	; 0x54
 8013444:	edca 7a11 	vstr	s15, [sl, #68]	; 0x44
 8013448:	ee67 3a27 	vmul.f32	s7, s14, s15
 801344c:	ee66 4a84 	vmul.f32	s9, s13, s8
 8013450:	ee27 7a05 	vmul.f32	s14, s14, s10
 8013454:	ee66 6a85 	vmul.f32	s13, s13, s10
 8013458:	ee66 7a27 	vmul.f32	s15, s12, s15
 801345c:	ee26 6a04 	vmul.f32	s12, s12, s8
 8013460:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013464:	ee74 4ae3 	vsub.f32	s9, s9, s7
 8013468:	ee37 7a46 	vsub.f32	s14, s14, s12
 801346c:	edca 7a16 	vstr	s15, [sl, #88]	; 0x58
 8013470:	ed8a 4a17 	vstr	s8, [sl, #92]	; 0x5c
 8013474:	edca 4a13 	vstr	s9, [sl, #76]	; 0x4c
 8013478:	ed8a 5a14 	vstr	s10, [sl, #80]	; 0x50
 801347c:	ed8a 7a10 	vstr	s14, [sl, #64]	; 0x40
 8013480:	f7fa fb86 	bl	800db90 <m_dcm2q_eml>
 8013484:	ed5f 7a28 	vldr	s15, [pc, #-160]	; 80133e8 <m_kalman_3gyro.isra.9.constprop.47+0x1548>
 8013488:	edca fa2b 	vstr	s31, [sl, #172]	; 0xac
 801348c:	eeb4 aae7 	vcmpe.f32	s20, s15
 8013490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013494:	eddd 5a00 	vldr	s11, [sp]
 8013498:	f141 83ed 	bpl.w	8014c76 <m_kalman_3gyro.isra.9.constprop.47+0x2dd6>
 801349c:	ed5f 7a2d 	vldr	s15, [pc, #-180]	; 80133ec <m_kalman_3gyro.isra.9.constprop.47+0x154c>
 80134a0:	eeb4 aae7 	vcmpe.f32	s20, s15
 80134a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134a8:	bfd4      	ite	le
 80134aa:	eef0 7a65 	vmovle.f32	s15, s11
 80134ae:	eef0 7a4a 	vmovgt.f32	s15, s20
 80134b2:	f44f 72a2 	mov.w	r2, #324	; 0x144
 80134b6:	2100      	movs	r1, #0
 80134b8:	edca 7a2c 	vstr	s15, [sl, #176]	; 0xb0
 80134bc:	f10a 00b8 	add.w	r0, sl, #184	; 0xb8
 80134c0:	f007 fd5d 	bl	801af7e <memset>
 80134c4:	4be7      	ldr	r3, [pc, #924]	; (8013864 <m_kalman_3gyro.isra.9.constprop.47+0x19c4>)
 80134c6:	f8ca 30b8 	str.w	r3, [sl, #184]	; 0xb8
 80134ca:	f8ca 30e0 	str.w	r3, [sl, #224]	; 0xe0
 80134ce:	f8ca 3108 	str.w	r3, [sl, #264]	; 0x108
 80134d2:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
 80134d6:	f8ca 3158 	str.w	r3, [sl, #344]	; 0x158
 80134da:	f8ca 3180 	str.w	r3, [sl, #384]	; 0x180
 80134de:	f8ca 31a8 	str.w	r3, [sl, #424]	; 0x1a8
 80134e2:	f8ca 31d0 	str.w	r3, [sl, #464]	; 0x1d0
 80134e6:	f8ca 31f8 	str.w	r3, [sl, #504]	; 0x1f8
 80134ea:	f8dd 36fc 	ldr.w	r3, [sp, #1788]	; 0x6fc
 80134ee:	2100      	movs	r1, #0
 80134f0:	2201      	movs	r2, #1
 80134f2:	f88a 1031 	strb.w	r1, [sl, #49]	; 0x31
 80134f6:	701a      	strb	r2, [r3, #0]
 80134f8:	9b06      	ldr	r3, [sp, #24]
 80134fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80134fc:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
 8013500:	f10a 0494 	add.w	r4, sl, #148	; 0x94
 8013504:	aee9      	add	r6, sp, #932	; 0x3a4
 8013506:	f10a 07b4 	add.w	r7, sl, #180	; 0xb4
 801350a:	6820      	ldr	r0, [r4, #0]
 801350c:	6861      	ldr	r1, [r4, #4]
 801350e:	68a2      	ldr	r2, [r4, #8]
 8013510:	68e3      	ldr	r3, [r4, #12]
 8013512:	4635      	mov	r5, r6
 8013514:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013516:	3410      	adds	r4, #16
 8013518:	42bc      	cmp	r4, r7
 801351a:	462e      	mov	r6, r5
 801351c:	d1f5      	bne.n	801350a <m_kalman_3gyro.isra.9.constprop.47+0x166a>
 801351e:	6820      	ldr	r0, [r4, #0]
 8013520:	6028      	str	r0, [r5, #0]
 8013522:	edd8 7a00 	vldr	s15, [r8]
 8013526:	eef4 7a67 	vcmp.f32	s15, s15
 801352a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801352e:	d170      	bne.n	8013612 <m_kalman_3gyro.isra.9.constprop.47+0x1772>
 8013530:	edd8 7a01 	vldr	s15, [r8, #4]
 8013534:	eef4 7a67 	vcmp.f32	s15, s15
 8013538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801353c:	d169      	bne.n	8013612 <m_kalman_3gyro.isra.9.constprop.47+0x1772>
 801353e:	edd8 7a02 	vldr	s15, [r8, #8]
 8013542:	eef4 7a67 	vcmp.f32	s15, s15
 8013546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801354a:	d162      	bne.n	8013612 <m_kalman_3gyro.isra.9.constprop.47+0x1772>
 801354c:	edd8 7a03 	vldr	s15, [r8, #12]
 8013550:	eef4 7a67 	vcmp.f32	s15, s15
 8013554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013558:	d15b      	bne.n	8013612 <m_kalman_3gyro.isra.9.constprop.47+0x1772>
 801355a:	edd8 7a04 	vldr	s15, [r8, #16]
 801355e:	eef4 7a67 	vcmp.f32	s15, s15
 8013562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013566:	d154      	bne.n	8013612 <m_kalman_3gyro.isra.9.constprop.47+0x1772>
 8013568:	edd8 7a05 	vldr	s15, [r8, #20]
 801356c:	eef4 7a67 	vcmp.f32	s15, s15
 8013570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013574:	d14d      	bne.n	8013612 <m_kalman_3gyro.isra.9.constprop.47+0x1772>
 8013576:	edd8 7a06 	vldr	s15, [r8, #24]
 801357a:	eef4 7a67 	vcmp.f32	s15, s15
 801357e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013582:	d146      	bne.n	8013612 <m_kalman_3gyro.isra.9.constprop.47+0x1772>
 8013584:	edd8 7a07 	vldr	s15, [r8, #28]
 8013588:	eef4 7a67 	vcmp.f32	s15, s15
 801358c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013590:	d13f      	bne.n	8013612 <m_kalman_3gyro.isra.9.constprop.47+0x1772>
 8013592:	edd8 7a08 	vldr	s15, [r8, #32]
 8013596:	eef4 7a67 	vcmp.f32	s15, s15
 801359a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801359e:	d138      	bne.n	8013612 <m_kalman_3gyro.isra.9.constprop.47+0x1772>
 80135a0:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
 80135a4:	eef4 7a67 	vcmp.f32	s15, s15
 80135a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135ac:	d131      	bne.n	8013612 <m_kalman_3gyro.isra.9.constprop.47+0x1772>
 80135ae:	edd8 7a0a 	vldr	s15, [r8, #40]	; 0x28
 80135b2:	eef4 7a67 	vcmp.f32	s15, s15
 80135b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135ba:	d12a      	bne.n	8013612 <m_kalman_3gyro.isra.9.constprop.47+0x1772>
 80135bc:	edd8 7a0b 	vldr	s15, [r8, #44]	; 0x2c
 80135c0:	eef4 7a67 	vcmp.f32	s15, s15
 80135c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135c8:	d123      	bne.n	8013612 <m_kalman_3gyro.isra.9.constprop.47+0x1772>
 80135ca:	edd8 7a0c 	vldr	s15, [r8, #48]	; 0x30
 80135ce:	eef4 7a67 	vcmp.f32	s15, s15
 80135d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135d6:	d11c      	bne.n	8013612 <m_kalman_3gyro.isra.9.constprop.47+0x1772>
 80135d8:	9b06      	ldr	r3, [sp, #24]
 80135da:	edd3 7a00 	vldr	s15, [r3]
 80135de:	eef5 7a40 	vcmp.f32	s15, #0.0
 80135e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135e6:	d163      	bne.n	80136b0 <m_kalman_3gyro.isra.9.constprop.47+0x1810>
 80135e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80135ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 80135f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135f4:	d15c      	bne.n	80136b0 <m_kalman_3gyro.isra.9.constprop.47+0x1810>
 80135f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80135fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80135fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013602:	d155      	bne.n	80136b0 <m_kalman_3gyro.isra.9.constprop.47+0x1810>
 8013604:	edd3 7a03 	vldr	s15, [r3, #12]
 8013608:	eef5 7a40 	vcmp.f32	s15, #0.0
 801360c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013610:	d14e      	bne.n	80136b0 <m_kalman_3gyro.isra.9.constprop.47+0x1810>
 8013612:	2400      	movs	r4, #0
 8013614:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 8013618:	9906      	ldr	r1, [sp, #24]
 801361a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801361c:	f8ca 4044 	str.w	r4, [sl, #68]	; 0x44
 8013620:	f8ca 4048 	str.w	r4, [sl, #72]	; 0x48
 8013624:	f8ca 404c 	str.w	r4, [sl, #76]	; 0x4c
 8013628:	f8ca 4054 	str.w	r4, [sl, #84]	; 0x54
 801362c:	f8ca 4058 	str.w	r4, [sl, #88]	; 0x58
 8013630:	f8ca 405c 	str.w	r4, [sl, #92]	; 0x5c
 8013634:	f8ca 5040 	str.w	r5, [sl, #64]	; 0x40
 8013638:	f8ca 5050 	str.w	r5, [sl, #80]	; 0x50
 801363c:	f8ca 5060 	str.w	r5, [sl, #96]	; 0x60
 8013640:	f7fa faa6 	bl	800db90 <m_dcm2q_eml>
 8013644:	f8dd 36e0 	ldr.w	r3, [sp, #1760]	; 0x6e0
 8013648:	f8ca 4094 	str.w	r4, [sl, #148]	; 0x94
 801364c:	f8ca 4098 	str.w	r4, [sl, #152]	; 0x98
 8013650:	f8ca 409c 	str.w	r4, [sl, #156]	; 0x9c
 8013654:	681a      	ldr	r2, [r3, #0]
 8013656:	f8ca 20a0 	str.w	r2, [sl, #160]	; 0xa0
 801365a:	f8dd 26e0 	ldr.w	r2, [sp, #1760]	; 0x6e0
 801365e:	4b82      	ldr	r3, [pc, #520]	; (8013868 <m_kalman_3gyro.isra.9.constprop.47+0x19c8>)
 8013660:	6852      	ldr	r2, [r2, #4]
 8013662:	f8ca 20a4 	str.w	r2, [sl, #164]	; 0xa4
 8013666:	f8dd 26e0 	ldr.w	r2, [sp, #1760]	; 0x6e0
 801366a:	6892      	ldr	r2, [r2, #8]
 801366c:	f8ca 20a8 	str.w	r2, [sl, #168]	; 0xa8
 8013670:	f8ca 30ac 	str.w	r3, [sl, #172]	; 0xac
 8013674:	f8ca 50b0 	str.w	r5, [sl, #176]	; 0xb0
 8013678:	f8ca 50b4 	str.w	r5, [sl, #180]	; 0xb4
 801367c:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8013680:	2100      	movs	r1, #0
 8013682:	f10a 00b8 	add.w	r0, sl, #184	; 0xb8
 8013686:	f007 fc7a 	bl	801af7e <memset>
 801368a:	4b76      	ldr	r3, [pc, #472]	; (8013864 <m_kalman_3gyro.isra.9.constprop.47+0x19c4>)
 801368c:	f8ca 30b8 	str.w	r3, [sl, #184]	; 0xb8
 8013690:	f8ca 30e0 	str.w	r3, [sl, #224]	; 0xe0
 8013694:	f8ca 3108 	str.w	r3, [sl, #264]	; 0x108
 8013698:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
 801369c:	f8ca 3158 	str.w	r3, [sl, #344]	; 0x158
 80136a0:	f8ca 3180 	str.w	r3, [sl, #384]	; 0x180
 80136a4:	f8ca 31a8 	str.w	r3, [sl, #424]	; 0x1a8
 80136a8:	f8ca 31d0 	str.w	r3, [sl, #464]	; 0x1d0
 80136ac:	f8ca 31f8 	str.w	r3, [sl, #504]	; 0x1f8
 80136b0:	f50d 61da 	add.w	r1, sp, #1744	; 0x6d0
 80136b4:	2200      	movs	r2, #0
 80136b6:	2300      	movs	r3, #0
 80136b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80136bc:	f7ed fa08 	bl	8000ad0 <__aeabi_dcmpeq>
 80136c0:	2800      	cmp	r0, #0
 80136c2:	d174      	bne.n	80137ae <m_kalman_3gyro.isra.9.constprop.47+0x190e>
 80136c4:	eddd 7a27 	vldr	s15, [sp, #156]	; 0x9c
 80136c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80136ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80136ce:	ed93 7a00 	vldr	s14, [r3]
 80136d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80136d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136da:	d568      	bpl.n	80137ae <m_kalman_3gyro.isra.9.constprop.47+0x190e>
 80136dc:	ed8a ba12 	vstr	s22, [sl, #72]	; 0x48
 80136e0:	edca ba15 	vstr	s23, [sl, #84]	; 0x54
 80136e4:	edca aa18 	vstr	s21, [sl, #96]	; 0x60
 80136e8:	edca da11 	vstr	s27, [sl, #68]	; 0x44
 80136ec:	ed8a ea14 	vstr	s28, [sl, #80]	; 0x50
 80136f0:	ed8a 9a17 	vstr	s18, [sl, #92]	; 0x5c
 80136f4:	ed9d 0b20 	vldr	d0, [sp, #128]	; 0x80
 80136f8:	f005 fd2a 	bl	8019150 <sqrt>
 80136fc:	ec51 0b10 	vmov	r0, r1, d0
 8013700:	f7ed fa76 	bl	8000bf0 <__aeabi_d2f>
 8013704:	ed9a 5a11 	vldr	s10, [sl, #68]	; 0x44
 8013708:	ed9a 6a17 	vldr	s12, [sl, #92]	; 0x5c
 801370c:	ed9a 4a14 	vldr	s8, [sl, #80]	; 0x50
 8013710:	ed9a 7a18 	vldr	s14, [sl, #96]	; 0x60
 8013714:	edda 6a12 	vldr	s13, [sl, #72]	; 0x48
 8013718:	edda 7a15 	vldr	s15, [sl, #84]	; 0x54
 801371c:	9906      	ldr	r1, [sp, #24]
 801371e:	ee05 0a90 	vmov	s11, r0
 8013722:	eec5 4a25 	vdiv.f32	s9, s10, s11
 8013726:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013728:	ee86 5a25 	vdiv.f32	s10, s12, s11
 801372c:	ee84 6a25 	vdiv.f32	s12, s8, s11
 8013730:	ee67 3a24 	vmul.f32	s7, s14, s9
 8013734:	ee66 5a85 	vmul.f32	s11, s13, s10
 8013738:	ee27 4a85 	vmul.f32	s8, s15, s10
 801373c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8013740:	ee66 6a86 	vmul.f32	s13, s13, s12
 8013744:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8013748:	ee75 5ae3 	vsub.f32	s11, s11, s7
 801374c:	ee37 7a44 	vsub.f32	s14, s14, s8
 8013750:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013754:	edca 4a11 	vstr	s9, [sl, #68]	; 0x44
 8013758:	ed8a 5a17 	vstr	s10, [sl, #92]	; 0x5c
 801375c:	edca 5a13 	vstr	s11, [sl, #76]	; 0x4c
 8013760:	ed8a 6a14 	vstr	s12, [sl, #80]	; 0x50
 8013764:	ed8a 7a10 	vstr	s14, [sl, #64]	; 0x40
 8013768:	edca 7a16 	vstr	s15, [sl, #88]	; 0x58
 801376c:	f7fa fa10 	bl	800db90 <m_dcm2q_eml>
 8013770:	f8dd 16fc 	ldr.w	r1, [sp, #1788]	; 0x6fc
 8013774:	2300      	movs	r3, #0
 8013776:	2201      	movs	r2, #1
 8013778:	700a      	strb	r2, [r1, #0]
 801377a:	edca fa2b 	vstr	s31, [sl, #172]	; 0xac
 801377e:	ed8a 8a2d 	vstr	s16, [sl, #180]	; 0xb4
 8013782:	f8ca 30b8 	str.w	r3, [sl, #184]	; 0xb8
 8013786:	f8ca 30bc 	str.w	r3, [sl, #188]	; 0xbc
 801378a:	f8ca 30c0 	str.w	r3, [sl, #192]	; 0xc0
 801378e:	f8ca 30dc 	str.w	r3, [sl, #220]	; 0xdc
 8013792:	f8ca 30e0 	str.w	r3, [sl, #224]	; 0xe0
 8013796:	f8ca 30e4 	str.w	r3, [sl, #228]	; 0xe4
 801379a:	f8ca 3100 	str.w	r3, [sl, #256]	; 0x100
 801379e:	f8ca 3104 	str.w	r3, [sl, #260]	; 0x104
 80137a2:	f8ca 3108 	str.w	r3, [sl, #264]	; 0x108
 80137a6:	f8ca 31a8 	str.w	r3, [sl, #424]	; 0x1a8
 80137aa:	f8ca 31f8 	str.w	r3, [sl, #504]	; 0x1f8
 80137ae:	ed9f 9a30 	vldr	s18, [pc, #192]	; 8013870 <m_kalman_3gyro.isra.9.constprop.47+0x19d0>
 80137b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80137b4:	9806      	ldr	r0, [sp, #24]
 80137b6:	ed8a 9a25 	vstr	s18, [sl, #148]	; 0x94
 80137ba:	ed8a 9a26 	vstr	s18, [sl, #152]	; 0x98
 80137be:	ed8a 9a27 	vstr	s18, [sl, #156]	; 0x9c
 80137c2:	f7fa f97d 	bl	800dac0 <m_q2dcm_eml>
 80137c6:	edda 7a2b 	vldr	s15, [sl, #172]	; 0xac
 80137ca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80137ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80137d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80137d6:	ee17 0a90 	vmov	r0, s15
 80137da:	f7ec febd 	bl	8000558 <__aeabi_f2d>
 80137de:	ec41 0b10 	vmov	d0, r0, r1
 80137e2:	f005 fcb5 	bl	8019150 <sqrt>
 80137e6:	ec51 0b10 	vmov	r0, r1, d0
 80137ea:	f7ed fa01 	bl	8000bf0 <__aeabi_d2f>
 80137ee:	ed9a 7a10 	vldr	s14, [sl, #64]	; 0x40
 80137f2:	ed9a 4a16 	vldr	s8, [sl, #88]	; 0x58
 80137f6:	ed9a 5a17 	vldr	s10, [sl, #92]	; 0x5c
 80137fa:	edda 3a13 	vldr	s7, [sl, #76]	; 0x4c
 80137fe:	edda 2a11 	vldr	s5, [sl, #68]	; 0x44
 8013802:	edda 4a14 	vldr	s9, [sl, #80]	; 0x50
 8013806:	edca fa22 	vstr	s31, [sl, #136]	; 0x88
 801380a:	ee07 0a90 	vmov	s15, r0
 801380e:	ee67 5a09 	vmul.f32	s11, s14, s18
 8013812:	ee27 7a87 	vmul.f32	s14, s15, s14
 8013816:	ee25 3a09 	vmul.f32	s6, s10, s18
 801381a:	ee77 6a09 	vadd.f32	s13, s14, s18
 801381e:	ee24 5a09 	vmul.f32	s10, s8, s18
 8013822:	ee27 7a84 	vmul.f32	s14, s15, s8
 8013826:	ee62 2a89 	vmul.f32	s5, s5, s18
 801382a:	ee27 6aa3 	vmul.f32	s12, s15, s7
 801382e:	ee75 5a89 	vadd.f32	s11, s11, s18
 8013832:	ee63 3a89 	vmul.f32	s7, s7, s18
 8013836:	ee37 7a09 	vadd.f32	s14, s14, s18
 801383a:	ee35 5a09 	vadd.f32	s10, s10, s18
 801383e:	ee33 4a89 	vadd.f32	s8, s7, s18
 8013842:	ee72 5aa5 	vadd.f32	s11, s5, s11
 8013846:	edda 3a2b 	vldr	s7, [sl, #172]	; 0xac
 801384a:	ed8a aa23 	vstr	s20, [sl, #140]	; 0x8c
 801384e:	ee33 5a05 	vadd.f32	s10, s6, s10
 8013852:	ee64 4a89 	vmul.f32	s9, s9, s18
 8013856:	ee36 6a09 	vadd.f32	s12, s12, s18
 801385a:	ee37 7a03 	vadd.f32	s14, s14, s6
 801385e:	ed9a 3a12 	vldr	s6, [sl, #72]	; 0x48
 8013862:	e00d      	b.n	8013880 <m_kalman_3gyro.isra.9.constprop.47+0x19e0>
 8013864:	40a00000 	.word	0x40a00000
 8013868:	3f666666 	.word	0x3f666666
 801386c:	3f4ccccd 	.word	0x3f4ccccd
 8013870:	00000000 	.word	0x00000000
 8013874:	3e4ccccd 	.word	0x3e4ccccd
 8013878:	3f99999a 	.word	0x3f99999a
 801387c:	3be56042 	.word	0x3be56042
 8013880:	ed8a 8a24 	vstr	s16, [sl, #144]	; 0x90
 8013884:	ee76 7aa2 	vadd.f32	s15, s13, s5
 8013888:	ee76 6a24 	vadd.f32	s13, s12, s9
 801388c:	edda 2a18 	vldr	s5, [sl, #96]	; 0x60
 8013890:	ee35 6a83 	vadd.f32	s12, s11, s6
 8013894:	ee74 4a84 	vadd.f32	s9, s9, s8
 8013898:	ee23 3a83 	vmul.f32	s6, s7, s6
 801389c:	ed9a 4a15 	vldr	s8, [sl, #84]	; 0x54
 80138a0:	ee77 7a83 	vadd.f32	s15, s15, s6
 80138a4:	ee74 4a84 	vadd.f32	s9, s9, s8
 80138a8:	ed9d 3a52 	vldr	s6, [sp, #328]	; 0x148
 80138ac:	edca 7a82 	vstr	s15, [sl, #520]	; 0x208
 80138b0:	ee23 4a84 	vmul.f32	s8, s7, s8
 80138b4:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80138b8:	ee73 7a67 	vsub.f32	s15, s6, s15
 80138bc:	ee37 7a23 	vadd.f32	s14, s14, s7
 80138c0:	eddd 3a55 	vldr	s7, [sp, #340]	; 0x154
 80138c4:	edca 7a19 	vstr	s15, [sl, #100]	; 0x64
 80138c8:	ee76 6a84 	vadd.f32	s13, s13, s8
 80138cc:	ee75 5a22 	vadd.f32	s11, s10, s5
 80138d0:	ee73 3ac6 	vsub.f32	s7, s7, s12
 80138d4:	eddd 7a57 	vldr	s15, [sp, #348]	; 0x15c
 80138d8:	ed9d 6a54 	vldr	s12, [sp, #336]	; 0x150
 80138dc:	ed9d 4a53 	vldr	s8, [sp, #332]	; 0x14c
 80138e0:	edca 6a83 	vstr	s13, [sl, #524]	; 0x20c
 80138e4:	ee34 4a66 	vsub.f32	s8, s8, s13
 80138e8:	ee77 5ae5 	vsub.f32	s11, s15, s11
 80138ec:	ee76 6a47 	vsub.f32	s13, s12, s14
 80138f0:	ed9d 5a56 	vldr	s10, [sp, #344]	; 0x158
 80138f4:	edda 7a2c 	vldr	s15, [sl, #176]	; 0xb0
 80138f8:	ed1f 6a21 	vldr	s12, [pc, #-132]	; 8013878 <m_kalman_3gyro.isra.9.constprop.47+0x19d8>
 80138fc:	edca 3a1c 	vstr	s7, [sl, #112]	; 0x70
 8013900:	ee75 4a64 	vsub.f32	s9, s10, s9
 8013904:	eef4 7ac6 	vcmpe.f32	s15, s12
 8013908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801390c:	ed8a 4a1a 	vstr	s8, [sl, #104]	; 0x68
 8013910:	edca 4a1d 	vstr	s9, [sl, #116]	; 0x74
 8013914:	ed8a 7a84 	vstr	s14, [sl, #528]	; 0x210
 8013918:	edca 6a1b 	vstr	s13, [sl, #108]	; 0x6c
 801391c:	edca 5a1e 	vstr	s11, [sl, #120]	; 0x78
 8013920:	d506      	bpl.n	8013930 <m_kalman_3gyro.isra.9.constprop.47+0x1a90>
 8013922:	ed1f 7a2e 	vldr	s14, [pc, #-184]	; 801386c <m_kalman_3gyro.isra.9.constprop.47+0x19cc>
 8013926:	eef4 7ac7 	vcmpe.f32	s15, s14
 801392a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801392e:	dc01      	bgt.n	8013934 <m_kalman_3gyro.isra.9.constprop.47+0x1a94>
 8013930:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013934:	ee7a 7a67 	vsub.f32	s15, s20, s15
 8013938:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801393a:	eef0 7ae7 	vabs.f32	s15, s15
 801393e:	ee37 9aa9 	vadd.f32	s18, s15, s19
 8013942:	edc3 7a00 	vstr	s15, [r3]
 8013946:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013948:	a99d      	add	r1, sp, #628	; 0x274
 801394a:	ed83 9a00 	vstr	s18, [r3]
 801394e:	eeb0 0a49 	vmov.f32	s0, s18
 8013952:	a893      	add	r0, sp, #588	; 0x24c
 8013954:	f7fa facc 	bl	800def0 <m_b_interp1q_constrain>
 8013958:	a9a7      	add	r1, sp, #668	; 0x29c
 801395a:	eeb0 8a40 	vmov.f32	s16, s0
 801395e:	a893      	add	r0, sp, #588	; 0x24c
 8013960:	eeb0 0a49 	vmov.f32	s0, s18
 8013964:	f7fa fac4 	bl	800def0 <m_b_interp1q_constrain>
 8013968:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801396a:	ed9d ba58 	vldr	s22, [sp, #352]	; 0x160
 801396e:	edd3 aa00 	vldr	s21, [r3]
 8013972:	eef4 aacb 	vcmpe.f32	s21, s22
 8013976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801397a:	eeb0 9a40 	vmov.f32	s18, s0
 801397e:	f201 83c8 	bhi.w	8015112 <m_kalman_3gyro.isra.9.constprop.47+0x3272>
 8013982:	ed9d aa5f 	vldr	s20, [sp, #380]	; 0x17c
 8013986:	ed5f 7a46 	vldr	s15, [pc, #-280]	; 8013870 <m_kalman_3gyro.isra.9.constprop.47+0x19d0>
 801398a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801398c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801398e:	edca 7af5 	vstr	s15, [sl, #980]	; 0x3d4
 8013992:	eef0 6a67 	vmov.f32	s13, s15
 8013996:	eeb0 6a67 	vmov.f32	s12, s15
 801399a:	eef0 5a67 	vmov.f32	s11, s15
 801399e:	edca 7af6 	vstr	s15, [sl, #984]	; 0x3d8
 80139a2:	edca 7af7 	vstr	s15, [sl, #988]	; 0x3dc
 80139a6:	462e      	mov	r6, r5
 80139a8:	f505 6387 	add.w	r3, r5, #1080	; 0x438
 80139ac:	ed95 7a06 	vldr	s14, [r5, #24]
 80139b0:	edd2 7a00 	vldr	s15, [r2]
 80139b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80139b8:	3524      	adds	r5, #36	; 0x24
 80139ba:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80139be:	320c      	adds	r2, #12
 80139c0:	edca 5af5 	vstr	s11, [sl, #980]	; 0x3d4
 80139c4:	ed15 7a02 	vldr	s14, [r5, #-8]
 80139c8:	ed52 7a02 	vldr	s15, [r2, #-8]
 80139cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80139d0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80139d4:	ed8a 6af6 	vstr	s12, [sl, #984]	; 0x3d8
 80139d8:	ed15 7a01 	vldr	s14, [r5, #-4]
 80139dc:	ed52 7a01 	vldr	s15, [r2, #-4]
 80139e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80139e4:	42ab      	cmp	r3, r5
 80139e6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80139ea:	edca 6af7 	vstr	s13, [sl, #988]	; 0x3dc
 80139ee:	d1dd      	bne.n	80139ac <m_kalman_3gyro.isra.9.constprop.47+0x1b0c>
 80139f0:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 80139f4:	ee85 5aa7 	vdiv.f32	s10, s11, s15
 80139f8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80139fa:	f50a 6305 	add.w	r3, sl, #2128	; 0x850
 80139fe:	eec6 5a27 	vdiv.f32	s11, s12, s15
 8013a02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013a06:	ed8a 5af5 	vstr	s10, [sl, #980]	; 0x3d4
 8013a0a:	edca 5af6 	vstr	s11, [sl, #984]	; 0x3d8
 8013a0e:	ed8a 7af7 	vstr	s14, [sl, #988]	; 0x3dc
 8013a12:	681a      	ldr	r2, [r3, #0]
 8013a14:	6859      	ldr	r1, [r3, #4]
 8013a16:	625a      	str	r2, [r3, #36]	; 0x24
 8013a18:	689a      	ldr	r2, [r3, #8]
 8013a1a:	6299      	str	r1, [r3, #40]	; 0x28
 8013a1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8013a1e:	68d9      	ldr	r1, [r3, #12]
 8013a20:	691a      	ldr	r2, [r3, #16]
 8013a22:	6319      	str	r1, [r3, #48]	; 0x30
 8013a24:	635a      	str	r2, [r3, #52]	; 0x34
 8013a26:	6959      	ldr	r1, [r3, #20]
 8013a28:	699a      	ldr	r2, [r3, #24]
 8013a2a:	6399      	str	r1, [r3, #56]	; 0x38
 8013a2c:	63da      	str	r2, [r3, #60]	; 0x3c
 8013a2e:	69d9      	ldr	r1, [r3, #28]
 8013a30:	6a1a      	ldr	r2, [r3, #32]
 8013a32:	6419      	str	r1, [r3, #64]	; 0x40
 8013a34:	645a      	str	r2, [r3, #68]	; 0x44
 8013a36:	3b24      	subs	r3, #36	; 0x24
 8013a38:	4283      	cmp	r3, r0
 8013a3a:	d1ea      	bne.n	8013a12 <m_kalman_3gyro.isra.9.constprop.47+0x1b72>
 8013a3c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8013a3e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8013a40:	6813      	ldr	r3, [r2, #0]
 8013a42:	600b      	str	r3, [r1, #0]
 8013a44:	9908      	ldr	r1, [sp, #32]
 8013a46:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8013a48:	680b      	ldr	r3, [r1, #0]
 8013a4a:	6003      	str	r3, [r0, #0]
 8013a4c:	9807      	ldr	r0, [sp, #28]
 8013a4e:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8013a50:	6803      	ldr	r3, [r0, #0]
 8013a52:	6023      	str	r3, [r4, #0]
 8013a54:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8013a56:	6853      	ldr	r3, [r2, #4]
 8013a58:	6023      	str	r3, [r4, #0]
 8013a5a:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8013a5c:	684b      	ldr	r3, [r1, #4]
 8013a5e:	6023      	str	r3, [r4, #0]
 8013a60:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8013a62:	6843      	ldr	r3, [r0, #4]
 8013a64:	6023      	str	r3, [r4, #0]
 8013a66:	6893      	ldr	r3, [r2, #8]
 8013a68:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8013a6a:	6013      	str	r3, [r2, #0]
 8013a6c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8013a6e:	688b      	ldr	r3, [r1, #8]
 8013a70:	6013      	str	r3, [r2, #0]
 8013a72:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8013a74:	6883      	ldr	r3, [r0, #8]
 8013a76:	6013      	str	r3, [r2, #0]
 8013a78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a7a:	2b02      	cmp	r3, #2
 8013a7c:	f001 8674 	beq.w	8015768 <m_kalman_3gyro.isra.9.constprop.47+0x38c8>
 8013a80:	eef4 eaec 	vcmpe.f32	s29, s25
 8013a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a88:	f340 80f9 	ble.w	8013c7e <m_kalman_3gyro.isra.9.constprop.47+0x1dde>
 8013a8c:	eeb4 dae9 	vcmpe.f32	s26, s19
 8013a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a94:	f340 80f3 	ble.w	8013c7e <m_kalman_3gyro.isra.9.constprop.47+0x1dde>
 8013a98:	eeb4 facc 	vcmpe.f32	s30, s24
 8013a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013aa0:	f340 80ed 	ble.w	8013c7e <m_kalman_3gyro.isra.9.constprop.47+0x1dde>
 8013aa4:	9b07      	ldr	r3, [sp, #28]
 8013aa6:	ed5f 7a8d 	vldr	s15, [pc, #-564]	; 8013874 <m_kalman_3gyro.isra.9.constprop.47+0x19d4>
 8013aaa:	ed93 7a00 	vldr	s14, [r3]
 8013aae:	eeb0 7ac7 	vabs.f32	s14, s14
 8013ab2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013aba:	f140 80e0 	bpl.w	8013c7e <m_kalman_3gyro.isra.9.constprop.47+0x1dde>
 8013abe:	ed93 7a01 	vldr	s14, [r3, #4]
 8013ac2:	eeb0 7ac7 	vabs.f32	s14, s14
 8013ac6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ace:	f140 80d6 	bpl.w	8013c7e <m_kalman_3gyro.isra.9.constprop.47+0x1dde>
 8013ad2:	ed93 7a02 	vldr	s14, [r3, #8]
 8013ad6:	eeb0 7ac7 	vabs.f32	s14, s14
 8013ada:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ae2:	f140 80cc 	bpl.w	8013c7e <m_kalman_3gyro.isra.9.constprop.47+0x1dde>
 8013ae6:	9a08      	ldr	r2, [sp, #32]
 8013ae8:	ed5f 7a9d 	vldr	s15, [pc, #-628]	; 8013878 <m_kalman_3gyro.isra.9.constprop.47+0x19d8>
 8013aec:	ed92 7a00 	vldr	s14, [r2]
 8013af0:	eeb0 7ac7 	vabs.f32	s14, s14
 8013af4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013afc:	f140 80bf 	bpl.w	8013c7e <m_kalman_3gyro.isra.9.constprop.47+0x1dde>
 8013b00:	ed92 7a01 	vldr	s14, [r2, #4]
 8013b04:	eeb0 7ac7 	vabs.f32	s14, s14
 8013b08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b10:	f140 80b5 	bpl.w	8013c7e <m_kalman_3gyro.isra.9.constprop.47+0x1dde>
 8013b14:	ed92 7a02 	vldr	s14, [r2, #8]
 8013b18:	eeb0 7ac7 	vabs.f32	s14, s14
 8013b1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b24:	f140 80ab 	bpl.w	8013c7e <m_kalman_3gyro.isra.9.constprop.47+0x1dde>
 8013b28:	f8da 3450 	ldr.w	r3, [sl, #1104]	; 0x450
 8013b2c:	ed1f 5aad 	vldr	s10, [pc, #-692]	; 801387c <m_kalman_3gyro.isra.9.constprop.47+0x19dc>
 8013b30:	2b09      	cmp	r3, #9
 8013b32:	bfc8      	it	gt
 8013b34:	220a      	movgt	r2, #10
 8013b36:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8013b38:	bfd8      	it	le
 8013b3a:	2205      	movle	r2, #5
 8013b3c:	e003      	b.n	8013b46 <m_kalman_3gyro.isra.9.constprop.47+0x1ca6>
 8013b3e:	9931      	ldr	r1, [sp, #196]	; 0xc4
 8013b40:	4299      	cmp	r1, r3
 8013b42:	f002 810d 	beq.w	8015d60 <m_kalman_3gyro.isra.9.constprop.47+0x3ec0>
 8013b46:	ecf3 5a01 	vldmia	r3!, {s11}
 8013b4a:	ed93 7a08 	vldr	s14, [r3, #32]
 8013b4e:	ed93 6a11 	vldr	s12, [r3, #68]	; 0x44
 8013b52:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8013b56:	eef4 5ac7 	vcmpe.f32	s11, s14
 8013b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b5e:	bf54      	ite	pl
 8013b60:	eef0 7a65 	vmovpl.f32	s15, s11
 8013b64:	eef0 7a47 	vmovmi.f32	s15, s14
 8013b68:	eeb4 6a67 	vcmp.f32	s12, s15
 8013b6c:	bfd8      	it	le
 8013b6e:	eeb0 7a65 	vmovle.f32	s14, s11
 8013b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b76:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8013b7a:	bfc8      	it	gt
 8013b7c:	eef0 7a46 	vmovgt.f32	s15, s12
 8013b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b84:	bf58      	it	pl
 8013b86:	eeb0 6a47 	vmovpl.f32	s12, s14
 8013b8a:	eef4 6a67 	vcmp.f32	s13, s15
 8013b8e:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8013b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b96:	eef4 6ac6 	vcmpe.f32	s13, s12
 8013b9a:	bfc8      	it	gt
 8013b9c:	eef0 7a66 	vmovgt.f32	s15, s13
 8013ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ba4:	bf58      	it	pl
 8013ba6:	eef0 6a46 	vmovpl.f32	s13, s12
 8013baa:	eeb4 7a67 	vcmp.f32	s14, s15
 8013bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bb2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013bb6:	bfc8      	it	gt
 8013bb8:	eef0 7a47 	vmovgt.f32	s15, s14
 8013bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bc0:	bf58      	it	pl
 8013bc2:	eeb0 7a66 	vmovpl.f32	s14, s13
 8013bc6:	2a05      	cmp	r2, #5
 8013bc8:	d051      	beq.n	8013c6e <m_kalman_3gyro.isra.9.constprop.47+0x1dce>
 8013bca:	edd3 5a2c 	vldr	s11, [r3, #176]	; 0xb0
 8013bce:	ed93 6a35 	vldr	s12, [r3, #212]	; 0xd4
 8013bd2:	edd3 6a3e 	vldr	s13, [r3, #248]	; 0xf8
 8013bd6:	eef4 5a67 	vcmp.f32	s11, s15
 8013bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bde:	eef4 5ac7 	vcmpe.f32	s11, s14
 8013be2:	bfc8      	it	gt
 8013be4:	eef0 7a65 	vmovgt.f32	s15, s11
 8013be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bec:	bf58      	it	pl
 8013bee:	eef0 5a47 	vmovpl.f32	s11, s14
 8013bf2:	eeb4 6a67 	vcmp.f32	s12, s15
 8013bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bfa:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8013bfe:	bfc8      	it	gt
 8013c00:	eef0 7a46 	vmovgt.f32	s15, s12
 8013c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c08:	bf58      	it	pl
 8013c0a:	eeb0 6a65 	vmovpl.f32	s12, s11
 8013c0e:	eef4 6a67 	vcmp.f32	s13, s15
 8013c12:	ed93 7a47 	vldr	s14, [r3, #284]	; 0x11c
 8013c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c1a:	eef4 6ac6 	vcmpe.f32	s13, s12
 8013c1e:	bfc8      	it	gt
 8013c20:	eef0 7a66 	vmovgt.f32	s15, s13
 8013c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c28:	bf58      	it	pl
 8013c2a:	eef0 6a46 	vmovpl.f32	s13, s12
 8013c2e:	eeb4 7a67 	vcmp.f32	s14, s15
 8013c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c36:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013c3a:	bfc8      	it	gt
 8013c3c:	eef0 7a47 	vmovgt.f32	s15, s14
 8013c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c44:	bf58      	it	pl
 8013c46:	eeb0 7a66 	vmovpl.f32	s14, s13
 8013c4a:	2a0a      	cmp	r2, #10
 8013c4c:	d10f      	bne.n	8013c6e <m_kalman_3gyro.isra.9.constprop.47+0x1dce>
 8013c4e:	edd3 6a50 	vldr	s13, [r3, #320]	; 0x140
 8013c52:	eef4 6a67 	vcmp.f32	s13, s15
 8013c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c5a:	eef4 6ac7 	vcmpe.f32	s13, s14
 8013c5e:	bfc8      	it	gt
 8013c60:	eef0 7a66 	vmovgt.f32	s15, s13
 8013c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c68:	bf48      	it	mi
 8013c6a:	eeb0 7a66 	vmovmi.f32	s14, s13
 8013c6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013c72:	eef4 7ac5 	vcmpe.f32	s15, s10
 8013c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c7a:	f77f af60 	ble.w	8013b3e <m_kalman_3gyro.isra.9.constprop.47+0x1c9e>
 8013c7e:	2300      	movs	r3, #0
 8013c80:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013c82:	2900      	cmp	r1, #0
 8013c84:	f001 8225 	beq.w	80150d2 <m_kalman_3gyro.isra.9.constprop.47+0x3232>
 8013c88:	f001 02fd 	and.w	r2, r1, #253	; 0xfd
 8013c8c:	2a01      	cmp	r2, #1
 8013c8e:	f002 80f4 	beq.w	8015e7a <m_kalman_3gyro.isra.9.constprop.47+0x3fda>
 8013c92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013c94:	2b02      	cmp	r3, #2
 8013c96:	f002 80ee 	beq.w	8015e76 <m_kalman_3gyro.isra.9.constprop.47+0x3fd6>
 8013c9a:	2b04      	cmp	r3, #4
 8013c9c:	f001 824a 	beq.w	8015134 <m_kalman_3gyro.isra.9.constprop.47+0x3294>
 8013ca0:	f8da 20a4 	ldr.w	r2, [sl, #164]	; 0xa4
 8013ca4:	f8da 30a8 	ldr.w	r3, [sl, #168]	; 0xa8
 8013ca8:	f8ca 2080 	str.w	r2, [sl, #128]	; 0x80
 8013cac:	f8ca 3084 	str.w	r3, [sl, #132]	; 0x84
 8013cb0:	f8da 20a0 	ldr.w	r2, [sl, #160]	; 0xa0
 8013cb4:	f8ca 207c 	str.w	r2, [sl, #124]	; 0x7c
 8013cb8:	2300      	movs	r3, #0
 8013cba:	ac81      	add	r4, sp, #516	; 0x204
 8013cbc:	f8ca 3450 	str.w	r3, [sl, #1104]	; 0x450
 8013cc0:	f8ca 345c 	str.w	r3, [sl, #1116]	; 0x45c
 8013cc4:	eddf 7ae6 	vldr	s15, [pc, #920]	; 8014060 <m_kalman_3gyro.isra.9.constprop.47+0x21c0>
 8013cc8:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8013ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cd0:	f281 81f4 	bge.w	80150bc <m_kalman_3gyro.isra.9.constprop.47+0x321c>
 8013cd4:	f8da 2458 	ldr.w	r2, [sl, #1112]	; 0x458
 8013cd8:	2a31      	cmp	r2, #49	; 0x31
 8013cda:	dc10      	bgt.n	8013cfe <m_kalman_3gyro.isra.9.constprop.47+0x1e5e>
 8013cdc:	2300      	movs	r3, #0
 8013cde:	2a00      	cmp	r2, #0
 8013ce0:	f88a 3202 	strb.w	r3, [sl, #514]	; 0x202
 8013ce4:	f88a 3203 	strb.w	r3, [sl, #515]	; 0x203
 8013ce8:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 8013cec:	f102 0301 	add.w	r3, r2, #1
 8013cf0:	dd03      	ble.n	8013cfa <m_kalman_3gyro.isra.9.constprop.47+0x1e5a>
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	bfd8      	it	le
 8013cf6:	f06f 4300 	mvnle.w	r3, #2147483648	; 0x80000000
 8013cfa:	f8ca 3458 	str.w	r3, [sl, #1112]	; 0x458
 8013cfe:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8013d02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013d04:	ed93 6a08 	vldr	s12, [r3, #32]
 8013d08:	ed93 5a06 	vldr	s10, [r3, #24]
 8013d0c:	edd3 5a07 	vldr	s11, [r3, #28]
 8013d10:	ed93 2a00 	vldr	s4, [r3]
 8013d14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013d16:	edd3 2a01 	vldr	s5, [r3, #4]
 8013d1a:	ed93 7a02 	vldr	s14, [r3, #8]
 8013d1e:	ed93 3a03 	vldr	s6, [r3, #12]
 8013d22:	edd3 3a04 	vldr	s7, [r3, #16]
 8013d26:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8013d2a:	edd3 4a05 	vldr	s9, [r3, #20]
 8013d2e:	ed9f 4acd 	vldr	s8, [pc, #820]	; 8014064 <m_kalman_3gyro.isra.9.constprop.47+0x21c4>
 8013d32:	ee25 5a09 	vmul.f32	s10, s10, s18
 8013d36:	ee65 5a89 	vmul.f32	s11, s11, s18
 8013d3a:	ee26 9a09 	vmul.f32	s18, s12, s18
 8013d3e:	ed83 5a06 	vstr	s10, [r3, #24]
 8013d42:	edc3 5a07 	vstr	s11, [r3, #28]
 8013d46:	ed83 9a08 	vstr	s18, [r3, #32]
 8013d4a:	edd2 6a00 	vldr	s13, [r2]
 8013d4e:	ed91 6a00 	vldr	s12, [r1]
 8013d52:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8013d56:	ee66 6a82 	vmul.f32	s13, s13, s4
 8013d5a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8013d5e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8013d62:	ee78 5a25 	vadd.f32	s11, s16, s11
 8013d66:	edc3 6a00 	vstr	s13, [r3]
 8013d6a:	edd2 6a00 	vldr	s13, [r2]
 8013d6e:	ed91 6a00 	vldr	s12, [r1]
 8013d72:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8013d76:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8013d7a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8013d7e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8013d82:	ee85 6a25 	vdiv.f32	s12, s10, s11
 8013d86:	edc3 6a01 	vstr	s13, [r3, #4]
 8013d8a:	edd2 5a00 	vldr	s11, [r2]
 8013d8e:	edd1 6a00 	vldr	s13, [r1]
 8013d92:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8013d96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013d98:	ee27 7a25 	vmul.f32	s14, s14, s11
 8013d9c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013da0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8013da4:	ee67 7a88 	vmul.f32	s15, s15, s16
 8013da8:	ed83 7a02 	vstr	s14, [r3, #8]
 8013dac:	edd2 6a00 	vldr	s13, [r2]
 8013db0:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8013db4:	ee63 6a26 	vmul.f32	s13, s6, s13
 8013db8:	eeb4 6a44 	vcmp.f32	s12, s8
 8013dbc:	edc3 6a03 	vstr	s13, [r3, #12]
 8013dc0:	ed92 7a00 	vldr	s14, [r2]
 8013dc4:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8013dc8:	ee23 7a87 	vmul.f32	s14, s7, s14
 8013dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dd0:	ed83 7a04 	vstr	s14, [r3, #16]
 8013dd4:	ed92 7a00 	vldr	s14, [r2]
 8013dd8:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8013ddc:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 8013de0:	ee64 7a87 	vmul.f32	s15, s9, s14
 8013de4:	bf48      	it	mi
 8013de6:	eeb0 6a44 	vmovmi.f32	s12, s8
 8013dea:	edc3 7a05 	vstr	s15, [r3, #20]
 8013dee:	f8dd 36bc 	ldr.w	r3, [sp, #1724]	; 0x6bc
 8013df2:	edd3 7a06 	vldr	s15, [r3, #24]
 8013df6:	ee67 7a86 	vmul.f32	s15, s15, s12
 8013dfa:	edc3 7a06 	vstr	s15, [r3, #24]
 8013dfe:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8013e02:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8013e06:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013e0a:	ee67 7a88 	vmul.f32	s15, s15, s16
 8013e0e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
 8013e12:	f8dd 36bc 	ldr.w	r3, [sp, #1724]	; 0x6bc
 8013e16:	edd3 7a07 	vldr	s15, [r3, #28]
 8013e1a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8013e1e:	edc3 7a07 	vstr	s15, [r3, #28]
 8013e22:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8013e26:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8013e2a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013e2c:	ed93 7a00 	vldr	s14, [r3]
 8013e30:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8013e34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013e38:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
 8013e3c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d041      	beq.n	8013ec6 <m_kalman_3gyro.isra.9.constprop.47+0x2026>
 8013e42:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8013e46:	edd3 7a03 	vldr	s15, [r3, #12]
 8013e4a:	ee67 7a88 	vmul.f32	s15, s15, s16
 8013e4e:	edc3 7a03 	vstr	s15, [r3, #12]
 8013e52:	f8dd 36bc 	ldr.w	r3, [sp, #1724]	; 0x6bc
 8013e56:	edd3 7a00 	vldr	s15, [r3]
 8013e5a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8013e5e:	edc3 7a00 	vstr	s15, [r3]
 8013e62:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8013e66:	edd3 7a04 	vldr	s15, [r3, #16]
 8013e6a:	ee67 7a88 	vmul.f32	s15, s15, s16
 8013e6e:	edc3 7a04 	vstr	s15, [r3, #16]
 8013e72:	f8dd 36bc 	ldr.w	r3, [sp, #1724]	; 0x6bc
 8013e76:	edd3 7a01 	vldr	s15, [r3, #4]
 8013e7a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8013e7e:	edc3 7a01 	vstr	s15, [r3, #4]
 8013e82:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8013e86:	edd3 7a05 	vldr	s15, [r3, #20]
 8013e8a:	ee67 7a88 	vmul.f32	s15, s15, s16
 8013e8e:	edc3 7a05 	vstr	s15, [r3, #20]
 8013e92:	f8dd 36bc 	ldr.w	r3, [sp, #1724]	; 0x6bc
 8013e96:	edd3 7a02 	vldr	s15, [r3, #8]
 8013e9a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8013e9e:	edc3 7a02 	vstr	s15, [r3, #8]
 8013ea2:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8013ea6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8013eaa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013eae:	ee27 8a88 	vmul.f32	s16, s15, s16
 8013eb2:	ed83 8a0a 	vstr	s16, [r3, #40]	; 0x28
 8013eb6:	f8dd 36bc 	ldr.w	r3, [sp, #1724]	; 0x6bc
 8013eba:	edd3 7a07 	vldr	s15, [r3, #28]
 8013ebe:	ee27 6a86 	vmul.f32	s12, s15, s12
 8013ec2:	ed83 6a07 	vstr	s12, [r3, #28]
 8013ec6:	f8dd 36bc 	ldr.w	r3, [sp, #1724]	; 0x6bc
 8013eca:	edda 2a2e 	vldr	s5, [sl, #184]	; 0xb8
 8013ece:	edd3 7a00 	vldr	s15, [r3]
 8013ed2:	f8dd 26bc 	ldr.w	r2, [sp, #1724]	; 0x6bc
 8013ed6:	ed9a 3a38 	vldr	s6, [sl, #224]	; 0xe0
 8013eda:	edda 3a42 	vldr	s7, [sl, #264]	; 0x108
 8013ede:	ed9a 4a4c 	vldr	s8, [sl, #304]	; 0x130
 8013ee2:	edda 4a56 	vldr	s9, [sl, #344]	; 0x158
 8013ee6:	ed9a 2a60 	vldr	s4, [sl, #384]	; 0x180
 8013eea:	edda 5a6a 	vldr	s11, [sl, #424]	; 0x1a8
 8013eee:	ed9a 6a74 	vldr	s12, [sl, #464]	; 0x1d0
 8013ef2:	ed9d 5a54 	vldr	s10, [sp, #336]	; 0x150
 8013ef6:	ed9d 7a53 	vldr	s14, [sp, #332]	; 0x14c
 8013efa:	edda 6a7e 	vldr	s13, [sl, #504]	; 0x1f8
 8013efe:	ed84 7a06 	vstr	s14, [r4, #24]
 8013f02:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013f06:	2300      	movs	r3, #0
 8013f08:	ee72 7aa7 	vadd.f32	s15, s5, s15
 8013f0c:	eef1 2a45 	vneg.f32	s5, s10
 8013f10:	edca 7a2e 	vstr	s15, [sl, #184]	; 0xb8
 8013f14:	edd2 7a01 	vldr	s15, [r2, #4]
 8013f18:	6023      	str	r3, [r4, #0]
 8013f1a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013f1e:	edc4 2a03 	vstr	s5, [r4, #12]
 8013f22:	ee73 7a27 	vadd.f32	s15, s6, s15
 8013f26:	eeb1 7a47 	vneg.f32	s14, s14
 8013f2a:	edca 7a38 	vstr	s15, [sl, #224]	; 0xe0
 8013f2e:	edd2 7a02 	vldr	s15, [r2, #8]
 8013f32:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013f36:	ee73 7aa7 	vadd.f32	s15, s7, s15
 8013f3a:	edca 7a42 	vstr	s15, [sl, #264]	; 0x108
 8013f3e:	edd2 7a03 	vldr	s15, [r2, #12]
 8013f42:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013f46:	ee74 7a27 	vadd.f32	s15, s8, s15
 8013f4a:	edca 7a4c 	vstr	s15, [sl, #304]	; 0x130
 8013f4e:	edd2 7a04 	vldr	s15, [r2, #16]
 8013f52:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013f56:	ee74 7aa7 	vadd.f32	s15, s9, s15
 8013f5a:	edca 7a56 	vstr	s15, [sl, #344]	; 0x158
 8013f5e:	edd2 7a05 	vldr	s15, [r2, #20]
 8013f62:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013f66:	ee72 7a27 	vadd.f32	s15, s4, s15
 8013f6a:	edca 7a60 	vstr	s15, [sl, #384]	; 0x180
 8013f6e:	edd2 7a06 	vldr	s15, [r2, #24]
 8013f72:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013f76:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8013f7a:	edca 7a6a 	vstr	s15, [sl, #424]	; 0x1a8
 8013f7e:	edd2 7a07 	vldr	s15, [r2, #28]
 8013f82:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013f86:	ee76 7a27 	vadd.f32	s15, s12, s15
 8013f8a:	edca 7a74 	vstr	s15, [sl, #464]	; 0x1d0
 8013f8e:	edd2 7a08 	vldr	s15, [r2, #32]
 8013f92:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
 8013f96:	eddd 5a52 	vldr	s11, [sp, #328]	; 0x148
 8013f9a:	ed9d 6a57 	vldr	s12, [sp, #348]	; 0x15c
 8013f9e:	ed84 5a01 	vstr	s10, [r4, #4]
 8013fa2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013fa6:	eeb1 4a65 	vneg.f32	s8, s11
 8013faa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013fae:	eef1 4a46 	vneg.f32	s9, s12
 8013fb2:	edca 7a7e 	vstr	s15, [sl, #504]	; 0x1f8
 8013fb6:	7812      	ldrb	r2, [r2, #0]
 8013fb8:	f88a 21fc 	strb.w	r2, [sl, #508]	; 0x1fc
 8013fbc:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
 8013fc0:	eddd 6a55 	vldr	s13, [sp, #340]	; 0x154
 8013fc4:	7812      	ldrb	r2, [r2, #0]
 8013fc6:	f88a 21fd 	strb.w	r2, [sl, #509]	; 0x1fd
 8013fca:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
 8013fce:	eddd 7a56 	vldr	s15, [sp, #344]	; 0x158
 8013fd2:	7812      	ldrb	r2, [r2, #0]
 8013fd4:	f88a 21fe 	strb.w	r2, [sl, #510]	; 0x1fe
 8013fd8:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
 8013fdc:	ed84 7a02 	vstr	s14, [r4, #8]
 8013fe0:	7852      	ldrb	r2, [r2, #1]
 8013fe2:	f88a 21ff 	strb.w	r2, [sl, #511]	; 0x1ff
 8013fe6:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
 8013fea:	6123      	str	r3, [r4, #16]
 8013fec:	7852      	ldrb	r2, [r2, #1]
 8013fee:	f88a 2200 	strb.w	r2, [sl, #512]	; 0x200
 8013ff2:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
 8013ff6:	6223      	str	r3, [r4, #32]
 8013ff8:	7852      	ldrb	r2, [r2, #1]
 8013ffa:	938a      	str	r3, [sp, #552]	; 0x228
 8013ffc:	f88a 2201 	strb.w	r2, [sl, #513]	; 0x201
 8014000:	edc4 5a05 	vstr	s11, [r4, #20]
 8014004:	ed84 4a07 	vstr	s8, [r4, #28]
 8014008:	edcd 4a8d 	vstr	s9, [sp, #564]	; 0x234
 801400c:	ed8d 6a8b 	vstr	s12, [sp, #556]	; 0x22c
 8014010:	938e      	str	r3, [sp, #568]	; 0x238
 8014012:	9392      	str	r3, [sp, #584]	; 0x248
 8014014:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014016:	edcd 6a8f 	vstr	s13, [sp, #572]	; 0x23c
 801401a:	eeb1 5a66 	vneg.f32	s10, s13
 801401e:	eeb1 7a67 	vneg.f32	s14, s15
 8014022:	ed8d 5a91 	vstr	s10, [sp, #580]	; 0x244
 8014026:	edcd 7a90 	vstr	s15, [sp, #576]	; 0x240
 801402a:	ed8d 7a8c 	vstr	s14, [sp, #560]	; 0x230
 801402e:	b1fb      	cbz	r3, 8014070 <m_kalman_3gyro.isra.9.constprop.47+0x21d0>
 8014030:	f8dd 36c8 	ldr.w	r3, [sp, #1736]	; 0x6c8
 8014034:	785b      	ldrb	r3, [r3, #1]
 8014036:	b1db      	cbz	r3, 8014070 <m_kalman_3gyro.isra.9.constprop.47+0x21d0>
 8014038:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801403a:	ed93 7a00 	vldr	s14, [r3]
 801403e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014042:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801404a:	bfd4      	ite	le
 801404c:	2301      	movle	r3, #1
 801404e:	2300      	movgt	r3, #0
 8014050:	f88a 31ff 	strb.w	r3, [sl, #511]	; 0x1ff
 8014054:	f88a 3200 	strb.w	r3, [sl, #512]	; 0x200
 8014058:	f88a 3201 	strb.w	r3, [sl, #513]	; 0x201
 801405c:	e008      	b.n	8014070 <m_kalman_3gyro.isra.9.constprop.47+0x21d0>
 801405e:	bf00      	nop
 8014060:	42480000 	.word	0x42480000
 8014064:	3c23d70a 	.word	0x3c23d70a
 8014068:	3e4ccccd 	.word	0x3e4ccccd
 801406c:	3ecccccd 	.word	0x3ecccccd
 8014070:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014072:	edd3 7a00 	vldr	s15, [r3]
 8014076:	eef4 7ae8 	vcmpe.f32	s15, s17
 801407a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801407e:	f2c1 8004 	blt.w	801508a <m_kalman_3gyro.isra.9.constprop.47+0x31ea>
 8014082:	f50d 63db 	add.w	r3, sp, #1752	; 0x6d8
 8014086:	e9d3 0100 	ldrd	r0, r1, [r3]
 801408a:	2200      	movs	r2, #0
 801408c:	2300      	movs	r3, #0
 801408e:	f7ec fd47 	bl	8000b20 <__aeabi_dcmpgt>
 8014092:	2800      	cmp	r0, #0
 8014094:	f000 87f9 	beq.w	801508a <m_kalman_3gyro.isra.9.constprop.47+0x31ea>
 8014098:	2300      	movs	r3, #0
 801409a:	f88a 31fc 	strb.w	r3, [sl, #508]	; 0x1fc
 801409e:	f88a 31fd 	strb.w	r3, [sl, #509]	; 0x1fd
 80140a2:	f88a 31fe 	strb.w	r3, [sl, #510]	; 0x1fe
 80140a6:	edda 7a24 	vldr	s15, [sl, #144]	; 0x90
 80140aa:	f88a 3207 	strb.w	r3, [sl, #519]	; 0x207
 80140ae:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80140b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80140b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140ba:	f88a 3205 	strb.w	r3, [sl, #517]	; 0x205
 80140be:	dc06      	bgt.n	80140ce <m_kalman_3gyro.isra.9.constprop.47+0x222e>
 80140c0:	ed1f 7a17 	vldr	s14, [pc, #-92]	; 8014068 <m_kalman_3gyro.isra.9.constprop.47+0x21c8>
 80140c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80140c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140cc:	d50a      	bpl.n	80140e4 <m_kalman_3gyro.isra.9.constprop.47+0x2244>
 80140ce:	2300      	movs	r3, #0
 80140d0:	f88a 31fc 	strb.w	r3, [sl, #508]	; 0x1fc
 80140d4:	f88a 31fd 	strb.w	r3, [sl, #509]	; 0x1fd
 80140d8:	f88a 31fe 	strb.w	r3, [sl, #510]	; 0x1fe
 80140dc:	f88a 3205 	strb.w	r3, [sl, #517]	; 0x205
 80140e0:	f88a 3207 	strb.w	r3, [sl, #519]	; 0x207
 80140e4:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80140e8:	ee77 7ae8 	vsub.f32	s15, s15, s17
 80140ec:	eef0 7ae7 	vabs.f32	s15, s15
 80140f0:	ee17 0a90 	vmov	r0, s15
 80140f4:	f7ec fa30 	bl	8000558 <__aeabi_f2d>
 80140f8:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 80140fc:	e9cd 0100 	strd	r0, r1, [sp]
 8014100:	6818      	ldr	r0, [r3, #0]
 8014102:	f7ec fa29 	bl	8000558 <__aeabi_f2d>
 8014106:	ed9d 1b00 	vldr	d1, [sp]
 801410a:	ec41 0b10 	vmov	d0, r0, r1
 801410e:	f004 fe7b 	bl	8018e08 <fmax>
 8014112:	ec51 0b10 	vmov	r0, r1, d0
 8014116:	f7ec fd6b 	bl	8000bf0 <__aeabi_d2f>
 801411a:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 801411e:	6018      	str	r0, [r3, #0]
 8014120:	6058      	str	r0, [r3, #4]
 8014122:	6098      	str	r0, [r3, #8]
 8014124:	edda 7a23 	vldr	s15, [sl, #140]	; 0x8c
 8014128:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801412c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014134:	f300 879c 	bgt.w	8015070 <m_kalman_3gyro.isra.9.constprop.47+0x31d0>
 8014138:	ed1f 7a34 	vldr	s14, [pc, #-208]	; 801406c <m_kalman_3gyro.isra.9.constprop.47+0x21cc>
 801413c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014144:	f100 8794 	bmi.w	8015070 <m_kalman_3gyro.isra.9.constprop.47+0x31d0>
 8014148:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801414a:	ee37 8ae8 	vsub.f32	s16, s15, s17
 801414e:	f7ec fa03 	bl	8000558 <__aeabi_f2d>
 8014152:	eef0 7ac8 	vabs.f32	s15, s16
 8014156:	e9cd 0100 	strd	r0, r1, [sp]
 801415a:	ee17 0a90 	vmov	r0, s15
 801415e:	f7ec f9fb 	bl	8000558 <__aeabi_f2d>
 8014162:	ed9d 1b00 	vldr	d1, [sp]
 8014166:	ec41 0b10 	vmov	d0, r0, r1
 801416a:	f004 fe4d 	bl	8018e08 <fmax>
 801416e:	ec51 0b10 	vmov	r0, r1, d0
 8014172:	f7ec fd3d 	bl	8000bf0 <__aeabi_d2f>
 8014176:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 801417a:	ed93 7a03 	vldr	s14, [r3, #12]
 801417e:	6298      	str	r0, [r3, #40]	; 0x28
 8014180:	ee68 7a08 	vmul.f32	s15, s16, s16
 8014184:	ee67 6a07 	vmul.f32	s13, s14, s14
 8014188:	eef4 7ae6 	vcmpe.f32	s15, s13
 801418c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014190:	dd14      	ble.n	80141bc <m_kalman_3gyro.isra.9.constprop.47+0x231c>
 8014192:	eef4 7ae8 	vcmpe.f32	s15, s17
 8014196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801419a:	dd0f      	ble.n	80141bc <m_kalman_3gyro.isra.9.constprop.47+0x231c>
 801419c:	ed93 6a04 	vldr	s12, [r3, #16]
 80141a0:	edd3 6a05 	vldr	s13, [r3, #20]
 80141a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80141a8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80141ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80141b0:	ed83 7a03 	vstr	s14, [r3, #12]
 80141b4:	ed83 6a04 	vstr	s12, [r3, #16]
 80141b8:	edc3 7a05 	vstr	s15, [r3, #20]
 80141bc:	4b25      	ldr	r3, [pc, #148]	; (8014254 <m_kalman_3gyro.isra.9.constprop.47+0x23b4>)
 80141be:	edd3 7a00 	vldr	s15, [r3]
 80141c2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80141c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80141ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141ce:	f341 8189 	ble.w	80154e4 <m_kalman_3gyro.isra.9.constprop.47+0x3644>
 80141d2:	2300      	movs	r3, #0
 80141d4:	f8dd 26b8 	ldr.w	r2, [sp, #1720]	; 0x6b8
 80141d8:	f88a 31fc 	strb.w	r3, [sl, #508]	; 0x1fc
 80141dc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80141e0:	f88a 31fd 	strb.w	r3, [sl, #509]	; 0x1fd
 80141e4:	f88a 31fe 	strb.w	r3, [sl, #510]	; 0x1fe
 80141e8:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80141ec:	ed92 6a09 	vldr	s12, [r2, #36]	; 0x24
 80141f0:	edd2 6a0b 	vldr	s13, [r2, #44]	; 0x2c
 80141f4:	ee37 7a25 	vadd.f32	s14, s14, s11
 80141f8:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 80141fc:	ee26 6a07 	vmul.f32	s12, s12, s14
 8014200:	ee26 7a87 	vmul.f32	s14, s13, s14
 8014204:	eef4 7ae5 	vcmpe.f32	s15, s11
 8014208:	ed82 6a09 	vstr	s12, [r2, #36]	; 0x24
 801420c:	ed82 7a0b 	vstr	s14, [r2, #44]	; 0x2c
 8014210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014214:	bfc4      	itt	gt
 8014216:	f88a 3205 	strbgt.w	r3, [sl, #517]	; 0x205
 801421a:	f88a 3207 	strbgt.w	r3, [sl, #519]	; 0x207
 801421e:	f89a 38ae 	ldrb.w	r3, [sl, #2222]	; 0x8ae
 8014222:	2b0e      	cmp	r3, #14
 8014224:	d802      	bhi.n	801422c <m_kalman_3gyro.isra.9.constprop.47+0x238c>
 8014226:	3305      	adds	r3, #5
 8014228:	f88a 38ae 	strb.w	r3, [sl, #2222]	; 0x8ae
 801422c:	f20a 12fb 	addw	r2, sl, #507	; 0x1fb
 8014230:	9207      	str	r2, [sp, #28]
 8014232:	f10a 0264 	add.w	r2, sl, #100	; 0x64
 8014236:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 801423a:	9202      	str	r2, [sp, #8]
 801423c:	aa75      	add	r2, sp, #468	; 0x1d4
 801423e:	9304      	str	r3, [sp, #16]
 8014240:	9205      	str	r2, [sp, #20]
 8014242:	ab8a      	add	r3, sp, #552	; 0x228
 8014244:	2200      	movs	r2, #0
 8014246:	461f      	mov	r7, r3
 8014248:	46a0      	mov	r8, r4
 801424a:	9200      	str	r2, [sp, #0]
 801424c:	ed9f 8a02 	vldr	s16, [pc, #8]	; 8014258 <m_kalman_3gyro.isra.9.constprop.47+0x23b8>
 8014250:	4613      	mov	r3, r2
 8014252:	e02e      	b.n	80142b2 <m_kalman_3gyro.isra.9.constprop.47+0x2412>
 8014254:	20001ac4 	.word	0x20001ac4
 8014258:	00000000 	.word	0x00000000
 801425c:	ed57 6a03 	vldr	s13, [r7, #-12]
 8014260:	ed97 7a00 	vldr	s14, [r7]
 8014264:	edd7 7a03 	vldr	s15, [r7, #12]
 8014268:	9a07      	ldr	r2, [sp, #28]
 801426a:	ee76 6aa6 	vadd.f32	s13, s13, s13
 801426e:	ee37 7a07 	vadd.f32	s14, s14, s14
 8014272:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014276:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801427a:	edcd 6a78 	vstr	s13, [sp, #480]	; 0x1e0
 801427e:	ed8d 7a79 	vstr	s14, [sp, #484]	; 0x1e4
 8014282:	edcd 7a7a 	vstr	s15, [sp, #488]	; 0x1e8
 8014286:	9207      	str	r2, [sp, #28]
 8014288:	2b00      	cmp	r3, #0
 801428a:	d133      	bne.n	80142f4 <m_kalman_3gyro.isra.9.constprop.47+0x2454>
 801428c:	9a02      	ldr	r2, [sp, #8]
 801428e:	9b00      	ldr	r3, [sp, #0]
 8014290:	3204      	adds	r2, #4
 8014292:	9202      	str	r2, [sp, #8]
 8014294:	9a04      	ldr	r2, [sp, #16]
 8014296:	3204      	adds	r2, #4
 8014298:	9204      	str	r2, [sp, #16]
 801429a:	9a05      	ldr	r2, [sp, #20]
 801429c:	3301      	adds	r3, #1
 801429e:	3204      	adds	r2, #4
 80142a0:	2b0c      	cmp	r3, #12
 80142a2:	9300      	str	r3, [sp, #0]
 80142a4:	f108 0804 	add.w	r8, r8, #4
 80142a8:	f107 0704 	add.w	r7, r7, #4
 80142ac:	9205      	str	r2, [sp, #20]
 80142ae:	f000 85b3 	beq.w	8014e18 <m_kalman_3gyro.isra.9.constprop.47+0x2f78>
 80142b2:	2b02      	cmp	r3, #2
 80142b4:	ed8d 8a78 	vstr	s16, [sp, #480]	; 0x1e0
 80142b8:	ed8d 8a79 	vstr	s16, [sp, #484]	; 0x1e4
 80142bc:	ed8d 8a7a 	vstr	s16, [sp, #488]	; 0x1e8
 80142c0:	ed8d 8a7b 	vstr	s16, [sp, #492]	; 0x1ec
 80142c4:	ed8d 8a7c 	vstr	s16, [sp, #496]	; 0x1f0
 80142c8:	ed8d 8a7d 	vstr	s16, [sp, #500]	; 0x1f4
 80142cc:	ed8d 8a7e 	vstr	s16, [sp, #504]	; 0x1f8
 80142d0:	ed8d 8a7f 	vstr	s16, [sp, #508]	; 0x1fc
 80142d4:	ed8d 8a80 	vstr	s16, [sp, #512]	; 0x200
 80142d8:	f340 84e0 	ble.w	8014c9c <m_kalman_3gyro.isra.9.constprop.47+0x2dfc>
 80142dc:	2b05      	cmp	r3, #5
 80142de:	ddbd      	ble.n	801425c <m_kalman_3gyro.isra.9.constprop.47+0x23bc>
 80142e0:	9a05      	ldr	r2, [sp, #20]
 80142e2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80142e6:	6013      	str	r3, [r2, #0]
 80142e8:	9a07      	ldr	r2, [sp, #28]
 80142ea:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80142ee:	9207      	str	r2, [sp, #28]
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d0cb      	beq.n	801428c <m_kalman_3gyro.isra.9.constprop.47+0x23ec>
 80142f4:	ac6f      	add	r4, sp, #444	; 0x1bc
 80142f6:	f10a 03b8 	add.w	r3, sl, #184	; 0xb8
 80142fa:	eddd ea78 	vldr	s29, [sp, #480]	; 0x1e0
 80142fe:	eddd da79 	vldr	s27, [sp, #484]	; 0x1e4
 8014302:	eddd 6a7a 	vldr	s13, [sp, #488]	; 0x1e8
 8014306:	eddd fa7b 	vldr	s31, [sp, #492]	; 0x1ec
 801430a:	ed9d fa7c 	vldr	s30, [sp, #496]	; 0x1f0
 801430e:	ed9d ea7d 	vldr	s28, [sp, #500]	; 0x1f4
 8014312:	ed9d da7e 	vldr	s26, [sp, #504]	; 0x1f8
 8014316:	eddd 5a7f 	vldr	s11, [sp, #508]	; 0x1fc
 801431a:	ed9d 6a80 	vldr	s12, [sp, #512]	; 0x200
 801431e:	ed84 8a00 	vstr	s16, [r4]
 8014322:	461e      	mov	r6, r3
 8014324:	461a      	mov	r2, r3
 8014326:	ed84 8a01 	vstr	s16, [r4, #4]
 801432a:	ed84 8a02 	vstr	s16, [r4, #8]
 801432e:	ed84 8a03 	vstr	s16, [r4, #12]
 8014332:	ed84 8a04 	vstr	s16, [r4, #16]
 8014336:	ed84 8a05 	vstr	s16, [r4, #20]
 801433a:	ed84 8a06 	vstr	s16, [r4, #24]
 801433e:	ed84 8a07 	vstr	s16, [r4, #28]
 8014342:	ed84 8a08 	vstr	s16, [r4, #32]
 8014346:	4621      	mov	r1, r4
 8014348:	f10a 00dc 	add.w	r0, sl, #220	; 0xdc
 801434c:	ecb2 7a01 	vldmia	r2!, {s14}
 8014350:	edd1 7a00 	vldr	s15, [r1]
 8014354:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8014358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801435c:	d008      	beq.n	8014370 <m_kalman_3gyro.isra.9.constprop.47+0x24d0>
 801435e:	eef5 ea40 	vcmp.f32	s29, #0.0
 8014362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014366:	bf1c      	itt	ne
 8014368:	ee27 7a2e 	vmulne.f32	s14, s14, s29
 801436c:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8014370:	ed92 7a08 	vldr	s14, [r2, #32]
 8014374:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8014378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801437c:	d008      	beq.n	8014390 <m_kalman_3gyro.isra.9.constprop.47+0x24f0>
 801437e:	eef5 da40 	vcmp.f32	s27, #0.0
 8014382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014386:	bf1c      	itt	ne
 8014388:	ee2d 7a87 	vmulne.f32	s14, s27, s14
 801438c:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8014390:	ed92 7a11 	vldr	s14, [r2, #68]	; 0x44
 8014394:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8014398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801439c:	d008      	beq.n	80143b0 <m_kalman_3gyro.isra.9.constprop.47+0x2510>
 801439e:	eef5 6a40 	vcmp.f32	s13, #0.0
 80143a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143a6:	bf1c      	itt	ne
 80143a8:	ee27 7a26 	vmulne.f32	s14, s14, s13
 80143ac:	ee77 7a87 	vaddne.f32	s15, s15, s14
 80143b0:	ed92 7a1a 	vldr	s14, [r2, #104]	; 0x68
 80143b4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80143b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143bc:	d008      	beq.n	80143d0 <m_kalman_3gyro.isra.9.constprop.47+0x2530>
 80143be:	eef5 fa40 	vcmp.f32	s31, #0.0
 80143c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143c6:	bf1c      	itt	ne
 80143c8:	ee27 7a2f 	vmulne.f32	s14, s14, s31
 80143cc:	ee77 7a87 	vaddne.f32	s15, s15, s14
 80143d0:	ed92 7a23 	vldr	s14, [r2, #140]	; 0x8c
 80143d4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80143d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143dc:	d008      	beq.n	80143f0 <m_kalman_3gyro.isra.9.constprop.47+0x2550>
 80143de:	eeb5 fa40 	vcmp.f32	s30, #0.0
 80143e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143e6:	bf1c      	itt	ne
 80143e8:	ee27 7a0f 	vmulne.f32	s14, s14, s30
 80143ec:	ee77 7a87 	vaddne.f32	s15, s15, s14
 80143f0:	ed92 7a2c 	vldr	s14, [r2, #176]	; 0xb0
 80143f4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80143f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143fc:	d008      	beq.n	8014410 <m_kalman_3gyro.isra.9.constprop.47+0x2570>
 80143fe:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8014402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014406:	bf1c      	itt	ne
 8014408:	ee2e 7a07 	vmulne.f32	s14, s28, s14
 801440c:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8014410:	ed92 7a35 	vldr	s14, [r2, #212]	; 0xd4
 8014414:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8014418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801441c:	d008      	beq.n	8014430 <m_kalman_3gyro.isra.9.constprop.47+0x2590>
 801441e:	eeb5 da40 	vcmp.f32	s26, #0.0
 8014422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014426:	bf1c      	itt	ne
 8014428:	ee2d 7a07 	vmulne.f32	s14, s26, s14
 801442c:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8014430:	ed92 7a3e 	vldr	s14, [r2, #248]	; 0xf8
 8014434:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8014438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801443c:	d008      	beq.n	8014450 <m_kalman_3gyro.isra.9.constprop.47+0x25b0>
 801443e:	eef5 5a40 	vcmp.f32	s11, #0.0
 8014442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014446:	bf1c      	itt	ne
 8014448:	ee27 7a25 	vmulne.f32	s14, s14, s11
 801444c:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8014450:	ed92 7a47 	vldr	s14, [r2, #284]	; 0x11c
 8014454:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8014458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801445c:	d008      	beq.n	8014470 <m_kalman_3gyro.isra.9.constprop.47+0x25d0>
 801445e:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8014462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014466:	bf1c      	itt	ne
 8014468:	ee27 7a06 	vmulne.f32	s14, s14, s12
 801446c:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8014470:	4290      	cmp	r0, r2
 8014472:	ece1 7a01 	vstmia	r1!, {s15}
 8014476:	f47f af69 	bne.w	801434c <m_kalman_3gyro.isra.9.constprop.47+0x24ac>
 801447a:	eef5 ea40 	vcmp.f32	s29, #0.0
 801447e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014482:	ed94 ca00 	vldr	s24, [r4]
 8014486:	f000 8403 	beq.w	8014c90 <m_kalman_3gyro.isra.9.constprop.47+0x2df0>
 801448a:	eeb5 ca40 	vcmp.f32	s24, #0.0
 801448e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014492:	f000 83fd 	beq.w	8014c90 <m_kalman_3gyro.isra.9.constprop.47+0x2df0>
 8014496:	ee6c 7a2e 	vmul.f32	s15, s24, s29
 801449a:	ee77 7a88 	vadd.f32	s15, s15, s16
 801449e:	eef5 da40 	vcmp.f32	s27, #0.0
 80144a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144a6:	ed94 9a01 	vldr	s18, [r4, #4]
 80144aa:	d008      	beq.n	80144be <m_kalman_3gyro.isra.9.constprop.47+0x261e>
 80144ac:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80144b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144b4:	bf1c      	itt	ne
 80144b6:	ee2d 7a89 	vmulne.f32	s14, s27, s18
 80144ba:	ee77 7a87 	vaddne.f32	s15, s15, s14
 80144be:	eef5 6a40 	vcmp.f32	s13, #0.0
 80144c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144c6:	edd4 ba02 	vldr	s23, [r4, #8]
 80144ca:	d008      	beq.n	80144de <m_kalman_3gyro.isra.9.constprop.47+0x263e>
 80144cc:	eef5 ba40 	vcmp.f32	s23, #0.0
 80144d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144d4:	bf1c      	itt	ne
 80144d6:	ee2b 7aa6 	vmulne.f32	s14, s23, s13
 80144da:	ee77 7a87 	vaddne.f32	s15, s15, s14
 80144de:	eef5 fa40 	vcmp.f32	s31, #0.0
 80144e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144e6:	edd4 ca03 	vldr	s25, [r4, #12]
 80144ea:	d008      	beq.n	80144fe <m_kalman_3gyro.isra.9.constprop.47+0x265e>
 80144ec:	eef5 ca40 	vcmp.f32	s25, #0.0
 80144f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144f4:	bf1c      	itt	ne
 80144f6:	ee2c 7aaf 	vmulne.f32	s14, s25, s31
 80144fa:	ee77 7a87 	vaddne.f32	s15, s15, s14
 80144fe:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8014502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014506:	edd4 aa04 	vldr	s21, [r4, #16]
 801450a:	d008      	beq.n	801451e <m_kalman_3gyro.isra.9.constprop.47+0x267e>
 801450c:	eef5 aa40 	vcmp.f32	s21, #0.0
 8014510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014514:	bf1c      	itt	ne
 8014516:	ee2a 7a8f 	vmulne.f32	s14, s21, s30
 801451a:	ee77 7a87 	vaddne.f32	s15, s15, s14
 801451e:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8014522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014526:	ed94 ba05 	vldr	s22, [r4, #20]
 801452a:	d008      	beq.n	801453e <m_kalman_3gyro.isra.9.constprop.47+0x269e>
 801452c:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8014530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014534:	bf1c      	itt	ne
 8014536:	ee2e 7a0b 	vmulne.f32	s14, s28, s22
 801453a:	ee77 7a87 	vaddne.f32	s15, s15, s14
 801453e:	eeb5 da40 	vcmp.f32	s26, #0.0
 8014542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014546:	ed94 aa06 	vldr	s20, [r4, #24]
 801454a:	d008      	beq.n	801455e <m_kalman_3gyro.isra.9.constprop.47+0x26be>
 801454c:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8014550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014554:	bf1c      	itt	ne
 8014556:	ee2d 7a0a 	vmulne.f32	s14, s26, s20
 801455a:	ee77 7a87 	vaddne.f32	s15, s15, s14
 801455e:	eef5 5a40 	vcmp.f32	s11, #0.0
 8014562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014566:	edd4 9a07 	vldr	s19, [r4, #28]
 801456a:	d008      	beq.n	801457e <m_kalman_3gyro.isra.9.constprop.47+0x26de>
 801456c:	eef5 9a40 	vcmp.f32	s19, #0.0
 8014570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014574:	bf1c      	itt	ne
 8014576:	ee29 7aa5 	vmulne.f32	s14, s19, s11
 801457a:	ee77 7a87 	vaddne.f32	s15, s15, s14
 801457e:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8014582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014586:	edd4 8a08 	vldr	s17, [r4, #32]
 801458a:	d008      	beq.n	801459e <m_kalman_3gyro.isra.9.constprop.47+0x26fe>
 801458c:	eef5 8a40 	vcmp.f32	s17, #0.0
 8014590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014594:	bf1c      	itt	ne
 8014596:	ee28 7a86 	vmulne.f32	s14, s17, s12
 801459a:	ee77 7a87 	vaddne.f32	s15, s15, s14
 801459e:	9a04      	ldr	r2, [sp, #16]
 80145a0:	ed92 7a00 	vldr	s14, [r2]
 80145a4:	9a00      	ldr	r2, [sp, #0]
 80145a6:	ee27 7a07 	vmul.f32	s14, s14, s14
 80145aa:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80145ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80145b2:	2a05      	cmp	r2, #5
 80145b4:	ee85 7a27 	vdiv.f32	s14, s10, s15
 80145b8:	ee27 ca0c 	vmul.f32	s24, s14, s24
 80145bc:	ee29 9a07 	vmul.f32	s18, s18, s14
 80145c0:	ee67 ba2b 	vmul.f32	s23, s14, s23
 80145c4:	ee67 ca2c 	vmul.f32	s25, s14, s25
 80145c8:	ee6a aa87 	vmul.f32	s21, s21, s14
 80145cc:	ee27 ba0b 	vmul.f32	s22, s14, s22
 80145d0:	ee27 aa0a 	vmul.f32	s20, s14, s20
 80145d4:	ee67 9a29 	vmul.f32	s19, s14, s19
 80145d8:	ee67 8a28 	vmul.f32	s17, s14, s17
 80145dc:	ed8d ca66 	vstr	s24, [sp, #408]	; 0x198
 80145e0:	ed8d 9a67 	vstr	s18, [sp, #412]	; 0x19c
 80145e4:	edcd ba68 	vstr	s23, [sp, #416]	; 0x1a0
 80145e8:	edcd ca69 	vstr	s25, [sp, #420]	; 0x1a4
 80145ec:	edcd aa6a 	vstr	s21, [sp, #424]	; 0x1a8
 80145f0:	ed8d ba6b 	vstr	s22, [sp, #428]	; 0x1ac
 80145f4:	ed8d aa6c 	vstr	s20, [sp, #432]	; 0x1b0
 80145f8:	edcd 9a6d 	vstr	s19, [sp, #436]	; 0x1b4
 80145fc:	edcd 8a6e 	vstr	s17, [sp, #440]	; 0x1b8
 8014600:	f340 809a 	ble.w	8014738 <m_kalman_3gyro.isra.9.constprop.47+0x2898>
 8014604:	9a02      	ldr	r2, [sp, #8]
 8014606:	eef5 ea40 	vcmp.f32	s29, #0.0
 801460a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801460e:	ed92 7a00 	vldr	s14, [r2]
 8014612:	f000 8340 	beq.w	8014c96 <m_kalman_3gyro.isra.9.constprop.47+0x2df6>
 8014616:	edda 7a25 	vldr	s15, [sl, #148]	; 0x94
 801461a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801461e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014622:	f000 8338 	beq.w	8014c96 <m_kalman_3gyro.isra.9.constprop.47+0x2df6>
 8014626:	ee67 7aae 	vmul.f32	s15, s15, s29
 801462a:	ee77 7a88 	vadd.f32	s15, s15, s16
 801462e:	eef5 da40 	vcmp.f32	s27, #0.0
 8014632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014636:	d00a      	beq.n	801464e <m_kalman_3gyro.isra.9.constprop.47+0x27ae>
 8014638:	ed9a 5a26 	vldr	s10, [sl, #152]	; 0x98
 801463c:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8014640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014644:	bf1c      	itt	ne
 8014646:	ee2d 5a85 	vmulne.f32	s10, s27, s10
 801464a:	ee77 7a85 	vaddne.f32	s15, s15, s10
 801464e:	eef5 6a40 	vcmp.f32	s13, #0.0
 8014652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014656:	d00a      	beq.n	801466e <m_kalman_3gyro.isra.9.constprop.47+0x27ce>
 8014658:	ed9a 5a27 	vldr	s10, [sl, #156]	; 0x9c
 801465c:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8014660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014664:	bf1c      	itt	ne
 8014666:	ee25 5a26 	vmulne.f32	s10, s10, s13
 801466a:	ee77 7a85 	vaddne.f32	s15, s15, s10
 801466e:	eef5 fa40 	vcmp.f32	s31, #0.0
 8014672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014676:	d00a      	beq.n	801468e <m_kalman_3gyro.isra.9.constprop.47+0x27ee>
 8014678:	ed9a 5a28 	vldr	s10, [sl, #160]	; 0xa0
 801467c:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8014680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014684:	bf1c      	itt	ne
 8014686:	ee25 5a2f 	vmulne.f32	s10, s10, s31
 801468a:	ee77 7a85 	vaddne.f32	s15, s15, s10
 801468e:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8014692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014696:	d00a      	beq.n	80146ae <m_kalman_3gyro.isra.9.constprop.47+0x280e>
 8014698:	ed9a 5a29 	vldr	s10, [sl, #164]	; 0xa4
 801469c:	eeb5 5a40 	vcmp.f32	s10, #0.0
 80146a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146a4:	bf1c      	itt	ne
 80146a6:	ee25 5a0f 	vmulne.f32	s10, s10, s30
 80146aa:	ee77 7a85 	vaddne.f32	s15, s15, s10
 80146ae:	eeb5 ea40 	vcmp.f32	s28, #0.0
 80146b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146b6:	d00a      	beq.n	80146ce <m_kalman_3gyro.isra.9.constprop.47+0x282e>
 80146b8:	ed9a 5a2a 	vldr	s10, [sl, #168]	; 0xa8
 80146bc:	eeb5 5a40 	vcmp.f32	s10, #0.0
 80146c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146c4:	bf1c      	itt	ne
 80146c6:	ee2e 5a05 	vmulne.f32	s10, s28, s10
 80146ca:	ee77 7a85 	vaddne.f32	s15, s15, s10
 80146ce:	eeb5 da40 	vcmp.f32	s26, #0.0
 80146d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146d6:	d00a      	beq.n	80146ee <m_kalman_3gyro.isra.9.constprop.47+0x284e>
 80146d8:	ed9a 5a2b 	vldr	s10, [sl, #172]	; 0xac
 80146dc:	eeb5 5a40 	vcmp.f32	s10, #0.0
 80146e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146e4:	bf1c      	itt	ne
 80146e6:	ee2d 5a05 	vmulne.f32	s10, s26, s10
 80146ea:	ee77 7a85 	vaddne.f32	s15, s15, s10
 80146ee:	eef5 5a40 	vcmp.f32	s11, #0.0
 80146f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146f6:	d00a      	beq.n	801470e <m_kalman_3gyro.isra.9.constprop.47+0x286e>
 80146f8:	ed9a 5a2c 	vldr	s10, [sl, #176]	; 0xb0
 80146fc:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8014700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014704:	bf1c      	itt	ne
 8014706:	ee25 5a25 	vmulne.f32	s10, s10, s11
 801470a:	ee77 7a85 	vaddne.f32	s15, s15, s10
 801470e:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8014712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014716:	d00a      	beq.n	801472e <m_kalman_3gyro.isra.9.constprop.47+0x288e>
 8014718:	ed9a 5a2d 	vldr	s10, [sl, #180]	; 0xb4
 801471c:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8014720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014724:	bf1c      	itt	ne
 8014726:	ee25 5a06 	vmulne.f32	s10, s10, s12
 801472a:	ee77 7a85 	vaddne.f32	s15, s15, s10
 801472e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014732:	9a02      	ldr	r2, [sp, #8]
 8014734:	edc2 7a00 	vstr	s15, [r2]
 8014738:	f44f 72a2 	mov.w	r2, #324	; 0x144
 801473c:	2100      	movs	r1, #0
 801473e:	4648      	mov	r0, r9
 8014740:	930c      	str	r3, [sp, #48]	; 0x30
 8014742:	edcd 5a0b 	vstr	s11, [sp, #44]	; 0x2c
 8014746:	ed8d 6a0a 	vstr	s12, [sp, #40]	; 0x28
 801474a:	edcd 6a08 	vstr	s13, [sp, #32]
 801474e:	f006 fc16 	bl	801af7e <memset>
 8014752:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014754:	eddd 5a0b 	vldr	s11, [sp, #44]	; 0x2c
 8014758:	ed9d 6a0a 	vldr	s12, [sp, #40]	; 0x28
 801475c:	eddd 6a08 	vldr	s13, [sp, #32]
 8014760:	464d      	mov	r5, r9
 8014762:	a966      	add	r1, sp, #408	; 0x198
 8014764:	464a      	mov	r2, r9
 8014766:	ecf1 7a01 	vldmia	r1!, {s15}
 801476a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801476e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014772:	d074      	beq.n	801485e <m_kalman_3gyro.isra.9.constprop.47+0x29be>
 8014774:	eef5 ea40 	vcmp.f32	s29, #0.0
 8014778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801477c:	d007      	beq.n	801478e <m_kalman_3gyro.isra.9.constprop.47+0x28ee>
 801477e:	ed92 5a00 	vldr	s10, [r2]
 8014782:	ee27 7aae 	vmul.f32	s14, s15, s29
 8014786:	ee35 7a07 	vadd.f32	s14, s10, s14
 801478a:	ed82 7a00 	vstr	s14, [r2]
 801478e:	eef5 da40 	vcmp.f32	s27, #0.0
 8014792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014796:	d007      	beq.n	80147a8 <m_kalman_3gyro.isra.9.constprop.47+0x2908>
 8014798:	ed92 5a09 	vldr	s10, [r2, #36]	; 0x24
 801479c:	ee2d 7aa7 	vmul.f32	s14, s27, s15
 80147a0:	ee35 7a07 	vadd.f32	s14, s10, s14
 80147a4:	ed82 7a09 	vstr	s14, [r2, #36]	; 0x24
 80147a8:	eef5 6a40 	vcmp.f32	s13, #0.0
 80147ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147b0:	d007      	beq.n	80147c2 <m_kalman_3gyro.isra.9.constprop.47+0x2922>
 80147b2:	ed92 5a12 	vldr	s10, [r2, #72]	; 0x48
 80147b6:	ee27 7aa6 	vmul.f32	s14, s15, s13
 80147ba:	ee35 7a07 	vadd.f32	s14, s10, s14
 80147be:	ed82 7a12 	vstr	s14, [r2, #72]	; 0x48
 80147c2:	eef5 fa40 	vcmp.f32	s31, #0.0
 80147c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147ca:	d007      	beq.n	80147dc <m_kalman_3gyro.isra.9.constprop.47+0x293c>
 80147cc:	ed92 5a1b 	vldr	s10, [r2, #108]	; 0x6c
 80147d0:	ee27 7aaf 	vmul.f32	s14, s15, s31
 80147d4:	ee35 7a07 	vadd.f32	s14, s10, s14
 80147d8:	ed82 7a1b 	vstr	s14, [r2, #108]	; 0x6c
 80147dc:	eeb5 fa40 	vcmp.f32	s30, #0.0
 80147e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147e4:	d007      	beq.n	80147f6 <m_kalman_3gyro.isra.9.constprop.47+0x2956>
 80147e6:	ed92 5a24 	vldr	s10, [r2, #144]	; 0x90
 80147ea:	ee27 7a8f 	vmul.f32	s14, s15, s30
 80147ee:	ee35 7a07 	vadd.f32	s14, s10, s14
 80147f2:	ed82 7a24 	vstr	s14, [r2, #144]	; 0x90
 80147f6:	eeb5 ea40 	vcmp.f32	s28, #0.0
 80147fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147fe:	d007      	beq.n	8014810 <m_kalman_3gyro.isra.9.constprop.47+0x2970>
 8014800:	ed92 5a2d 	vldr	s10, [r2, #180]	; 0xb4
 8014804:	ee2e 7a27 	vmul.f32	s14, s28, s15
 8014808:	ee35 7a07 	vadd.f32	s14, s10, s14
 801480c:	ed82 7a2d 	vstr	s14, [r2, #180]	; 0xb4
 8014810:	eeb5 da40 	vcmp.f32	s26, #0.0
 8014814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014818:	d007      	beq.n	801482a <m_kalman_3gyro.isra.9.constprop.47+0x298a>
 801481a:	ed92 5a36 	vldr	s10, [r2, #216]	; 0xd8
 801481e:	ee2d 7a27 	vmul.f32	s14, s26, s15
 8014822:	ee35 7a07 	vadd.f32	s14, s10, s14
 8014826:	ed82 7a36 	vstr	s14, [r2, #216]	; 0xd8
 801482a:	eef5 5a40 	vcmp.f32	s11, #0.0
 801482e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014832:	d007      	beq.n	8014844 <m_kalman_3gyro.isra.9.constprop.47+0x29a4>
 8014834:	ed92 5a3f 	vldr	s10, [r2, #252]	; 0xfc
 8014838:	ee27 7aa5 	vmul.f32	s14, s15, s11
 801483c:	ee35 7a07 	vadd.f32	s14, s10, s14
 8014840:	ed82 7a3f 	vstr	s14, [r2, #252]	; 0xfc
 8014844:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8014848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801484c:	d007      	beq.n	801485e <m_kalman_3gyro.isra.9.constprop.47+0x29be>
 801484e:	ed92 7a48 	vldr	s14, [r2, #288]	; 0x120
 8014852:	ee67 7a86 	vmul.f32	s15, s15, s12
 8014856:	ee77 7a27 	vadd.f32	s15, s14, s15
 801485a:	edc2 7a48 	vstr	s15, [r2, #288]	; 0x120
 801485e:	42a1      	cmp	r1, r4
 8014860:	f102 0204 	add.w	r2, r2, #4
 8014864:	f47f af7f 	bne.w	8014766 <m_kalman_3gyro.isra.9.constprop.47+0x28c6>
 8014868:	f8df e5a4 	ldr.w	lr, [pc, #1444]	; 8014e10 <m_kalman_3gyro.isra.9.constprop.47+0x2f70>
 801486c:	4648      	mov	r0, r9
 801486e:	2100      	movs	r1, #0
 8014870:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014874:	fb8e c201 	smull	ip, r2, lr, r1
 8014878:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 801487c:	ebcc 02a2 	rsb	r2, ip, r2, asr #2
 8014880:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8014884:	ebb1 0f42 	cmp.w	r1, r2, lsl #1
 8014888:	edd0 7a00 	vldr	s15, [r0]
 801488c:	f040 81f7 	bne.w	8014c7e <m_kalman_3gyro.isra.9.constprop.47+0x2dde>
 8014890:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014894:	3101      	adds	r1, #1
 8014896:	2951      	cmp	r1, #81	; 0x51
 8014898:	ece0 7a01 	vstmia	r0!, {s15}
 801489c:	d1ea      	bne.n	8014874 <m_kalman_3gyro.isra.9.constprop.47+0x29d4>
 801489e:	4619      	mov	r1, r3
 80148a0:	f44f 72a2 	mov.w	r2, #324	; 0x144
 80148a4:	4658      	mov	r0, fp
 80148a6:	9308      	str	r3, [sp, #32]
 80148a8:	f006 fb5e 	bl	801af68 <memcpy>
 80148ac:	9b08      	ldr	r3, [sp, #32]
 80148ae:	2100      	movs	r1, #0
 80148b0:	4618      	mov	r0, r3
 80148b2:	f44f 72a2 	mov.w	r2, #324	; 0x144
 80148b6:	f006 fb62 	bl	801af7e <memset>
 80148ba:	a8fb      	add	r0, sp, #1004	; 0x3ec
 80148bc:	f50d 61ca 	add.w	r1, sp, #1616	; 0x650
 80148c0:	ecf5 2a01 	vldmia	r5!, {s5}
 80148c4:	ed95 3a08 	vldr	s6, [r5, #32]
 80148c8:	edd5 3a11 	vldr	s7, [r5, #68]	; 0x44
 80148cc:	ed95 4a1a 	vldr	s8, [r5, #104]	; 0x68
 80148d0:	edd5 4a23 	vldr	s9, [r5, #140]	; 0x8c
 80148d4:	ed95 5a2c 	vldr	s10, [r5, #176]	; 0xb0
 80148d8:	edd5 5a35 	vldr	s11, [r5, #212]	; 0xd4
 80148dc:	ed95 6a3e 	vldr	s12, [r5, #248]	; 0xf8
 80148e0:	edd5 6a47 	vldr	s13, [r5, #284]	; 0x11c
 80148e4:	465b      	mov	r3, fp
 80148e6:	4632      	mov	r2, r6
 80148e8:	eef5 2a40 	vcmp.f32	s5, #0.0
 80148ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148f0:	d00e      	beq.n	8014910 <m_kalman_3gyro.isra.9.constprop.47+0x2a70>
 80148f2:	edd3 7a00 	vldr	s15, [r3]
 80148f6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80148fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148fe:	d007      	beq.n	8014910 <m_kalman_3gyro.isra.9.constprop.47+0x2a70>
 8014900:	ed92 7a00 	vldr	s14, [r2]
 8014904:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8014908:	ee77 7a27 	vadd.f32	s15, s14, s15
 801490c:	edc2 7a00 	vstr	s15, [r2]
 8014910:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8014914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014918:	d00e      	beq.n	8014938 <m_kalman_3gyro.isra.9.constprop.47+0x2a98>
 801491a:	edd3 7a01 	vldr	s15, [r3, #4]
 801491e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014926:	d007      	beq.n	8014938 <m_kalman_3gyro.isra.9.constprop.47+0x2a98>
 8014928:	ed92 7a00 	vldr	s14, [r2]
 801492c:	ee67 7a83 	vmul.f32	s15, s15, s6
 8014930:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014934:	edc2 7a00 	vstr	s15, [r2]
 8014938:	eef5 3a40 	vcmp.f32	s7, #0.0
 801493c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014940:	d00e      	beq.n	8014960 <m_kalman_3gyro.isra.9.constprop.47+0x2ac0>
 8014942:	edd3 7a02 	vldr	s15, [r3, #8]
 8014946:	eef5 7a40 	vcmp.f32	s15, #0.0
 801494a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801494e:	d007      	beq.n	8014960 <m_kalman_3gyro.isra.9.constprop.47+0x2ac0>
 8014950:	ed92 7a00 	vldr	s14, [r2]
 8014954:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8014958:	ee77 7a27 	vadd.f32	s15, s14, s15
 801495c:	edc2 7a00 	vstr	s15, [r2]
 8014960:	eeb5 4a40 	vcmp.f32	s8, #0.0
 8014964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014968:	d00e      	beq.n	8014988 <m_kalman_3gyro.isra.9.constprop.47+0x2ae8>
 801496a:	edd3 7a03 	vldr	s15, [r3, #12]
 801496e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014976:	d007      	beq.n	8014988 <m_kalman_3gyro.isra.9.constprop.47+0x2ae8>
 8014978:	ed92 7a00 	vldr	s14, [r2]
 801497c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8014980:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014984:	edc2 7a00 	vstr	s15, [r2]
 8014988:	eef5 4a40 	vcmp.f32	s9, #0.0
 801498c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014990:	d00e      	beq.n	80149b0 <m_kalman_3gyro.isra.9.constprop.47+0x2b10>
 8014992:	edd3 7a04 	vldr	s15, [r3, #16]
 8014996:	eef5 7a40 	vcmp.f32	s15, #0.0
 801499a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801499e:	d007      	beq.n	80149b0 <m_kalman_3gyro.isra.9.constprop.47+0x2b10>
 80149a0:	ed92 7a00 	vldr	s14, [r2]
 80149a4:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80149a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80149ac:	edc2 7a00 	vstr	s15, [r2]
 80149b0:	eeb5 5a40 	vcmp.f32	s10, #0.0
 80149b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149b8:	d00e      	beq.n	80149d8 <m_kalman_3gyro.isra.9.constprop.47+0x2b38>
 80149ba:	edd3 7a05 	vldr	s15, [r3, #20]
 80149be:	eef5 7a40 	vcmp.f32	s15, #0.0
 80149c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149c6:	d007      	beq.n	80149d8 <m_kalman_3gyro.isra.9.constprop.47+0x2b38>
 80149c8:	ed92 7a00 	vldr	s14, [r2]
 80149cc:	ee65 7a27 	vmul.f32	s15, s10, s15
 80149d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80149d4:	edc2 7a00 	vstr	s15, [r2]
 80149d8:	eef5 5a40 	vcmp.f32	s11, #0.0
 80149dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149e0:	d00e      	beq.n	8014a00 <m_kalman_3gyro.isra.9.constprop.47+0x2b60>
 80149e2:	edd3 7a06 	vldr	s15, [r3, #24]
 80149e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80149ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149ee:	d007      	beq.n	8014a00 <m_kalman_3gyro.isra.9.constprop.47+0x2b60>
 80149f0:	ed92 7a00 	vldr	s14, [r2]
 80149f4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80149f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80149fc:	edc2 7a00 	vstr	s15, [r2]
 8014a00:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8014a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a08:	d00e      	beq.n	8014a28 <m_kalman_3gyro.isra.9.constprop.47+0x2b88>
 8014a0a:	edd3 7a07 	vldr	s15, [r3, #28]
 8014a0e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a16:	d007      	beq.n	8014a28 <m_kalman_3gyro.isra.9.constprop.47+0x2b88>
 8014a18:	ed92 7a00 	vldr	s14, [r2]
 8014a1c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8014a20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014a24:	edc2 7a00 	vstr	s15, [r2]
 8014a28:	eef5 6a40 	vcmp.f32	s13, #0.0
 8014a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a30:	d00e      	beq.n	8014a50 <m_kalman_3gyro.isra.9.constprop.47+0x2bb0>
 8014a32:	edd3 7a08 	vldr	s15, [r3, #32]
 8014a36:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a3e:	d007      	beq.n	8014a50 <m_kalman_3gyro.isra.9.constprop.47+0x2bb0>
 8014a40:	ed92 7a00 	vldr	s14, [r2]
 8014a44:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014a48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014a4c:	edc2 7a00 	vstr	s15, [r2]
 8014a50:	3324      	adds	r3, #36	; 0x24
 8014a52:	4299      	cmp	r1, r3
 8014a54:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8014a58:	f47f af46 	bne.w	80148e8 <m_kalman_3gyro.isra.9.constprop.47+0x2a48>
 8014a5c:	4285      	cmp	r5, r0
 8014a5e:	f106 0604 	add.w	r6, r6, #4
 8014a62:	f47f af2d 	bne.w	80148c0 <m_kalman_3gyro.isra.9.constprop.47+0x2a20>
 8014a66:	9b02      	ldr	r3, [sp, #8]
 8014a68:	ed84 8a00 	vstr	s16, [r4]
 8014a6c:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8014a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a74:	ed84 8a01 	vstr	s16, [r4, #4]
 8014a78:	edd3 7a00 	vldr	s15, [r3]
 8014a7c:	f000 8116 	beq.w	8014cac <m_kalman_3gyro.isra.9.constprop.47+0x2e0c>
 8014a80:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a88:	f000 8110 	beq.w	8014cac <m_kalman_3gyro.isra.9.constprop.47+0x2e0c>
 8014a8c:	ee27 ca8c 	vmul.f32	s24, s15, s24
 8014a90:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8014a94:	ee3c ca08 	vadd.f32	s24, s24, s16
 8014a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a9c:	ed84 ca00 	vstr	s24, [r4]
 8014aa0:	f000 8199 	beq.w	8014dd6 <m_kalman_3gyro.isra.9.constprop.47+0x2f36>
 8014aa4:	ee67 6a89 	vmul.f32	s13, s15, s18
 8014aa8:	eef5 ba40 	vcmp.f32	s23, #0.0
 8014aac:	ee76 6a88 	vadd.f32	s13, s13, s16
 8014ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ab4:	edc4 6a01 	vstr	s13, [r4, #4]
 8014ab8:	f000 8113 	beq.w	8014ce2 <m_kalman_3gyro.isra.9.constprop.47+0x2e42>
 8014abc:	ee27 2aab 	vmul.f32	s4, s15, s23
 8014ac0:	eef5 ca40 	vcmp.f32	s25, #0.0
 8014ac4:	ee32 2a08 	vadd.f32	s4, s4, s16
 8014ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014acc:	ed84 2a02 	vstr	s4, [r4, #8]
 8014ad0:	f000 8117 	beq.w	8014d02 <m_kalman_3gyro.isra.9.constprop.47+0x2e62>
 8014ad4:	ee67 1aac 	vmul.f32	s3, s15, s25
 8014ad8:	eef5 aa40 	vcmp.f32	s21, #0.0
 8014adc:	ee71 1a88 	vadd.f32	s3, s3, s16
 8014ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ae4:	edc4 1a03 	vstr	s3, [r4, #12]
 8014ae8:	f000 8165 	beq.w	8014db6 <m_kalman_3gyro.isra.9.constprop.47+0x2f16>
 8014aec:	ee27 4aaa 	vmul.f32	s8, s15, s21
 8014af0:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8014af4:	ee34 4a08 	vadd.f32	s8, s8, s16
 8014af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014afc:	ed84 4a04 	vstr	s8, [r4, #16]
 8014b00:	f000 8112 	beq.w	8014d28 <m_kalman_3gyro.isra.9.constprop.47+0x2e88>
 8014b04:	ee27 6a8b 	vmul.f32	s12, s15, s22
 8014b08:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8014b0c:	ee36 6a08 	vadd.f32	s12, s12, s16
 8014b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b14:	ed84 6a05 	vstr	s12, [r4, #20]
 8014b18:	f000 8134 	beq.w	8014d84 <m_kalman_3gyro.isra.9.constprop.47+0x2ee4>
 8014b1c:	ee27 5a8a 	vmul.f32	s10, s15, s20
 8014b20:	eef5 9a40 	vcmp.f32	s19, #0.0
 8014b24:	ee35 5a08 	vadd.f32	s10, s10, s16
 8014b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b2c:	ed84 5a06 	vstr	s10, [r4, #24]
 8014b30:	f000 8113 	beq.w	8014d5a <m_kalman_3gyro.isra.9.constprop.47+0x2eba>
 8014b34:	ee27 3aa9 	vmul.f32	s6, s15, s19
 8014b38:	eef5 8a40 	vcmp.f32	s17, #0.0
 8014b3c:	ee33 3a08 	vadd.f32	s6, s6, s16
 8014b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b44:	ed84 3a07 	vstr	s6, [r4, #28]
 8014b48:	f000 8117 	beq.w	8014d7a <m_kalman_3gyro.isra.9.constprop.47+0x2eda>
 8014b4c:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8014b50:	ee77 7a88 	vadd.f32	s15, s15, s16
 8014b54:	edda 8a25 	vldr	s17, [sl, #148]	; 0x94
 8014b58:	ed9a 0a26 	vldr	s0, [sl, #152]	; 0x98
 8014b5c:	edda 0a27 	vldr	s1, [sl, #156]	; 0x9c
 8014b60:	ed9a 1a28 	vldr	s2, [sl, #160]	; 0xa0
 8014b64:	edda 3a29 	vldr	s7, [sl, #164]	; 0xa4
 8014b68:	edda 5a2a 	vldr	s11, [sl, #168]	; 0xa8
 8014b6c:	edda 4a2b 	vldr	s9, [sl, #172]	; 0xac
 8014b70:	edda 2a2c 	vldr	s5, [sl, #176]	; 0xb0
 8014b74:	ed9a 7a2d 	vldr	s14, [sl, #180]	; 0xb4
 8014b78:	edc4 7a08 	vstr	s15, [r4, #32]
 8014b7c:	ee38 ca8c 	vadd.f32	s24, s17, s24
 8014b80:	ee70 6a26 	vadd.f32	s13, s0, s13
 8014b84:	ee30 2a82 	vadd.f32	s4, s1, s4
 8014b88:	ee71 1a21 	vadd.f32	s3, s2, s3
 8014b8c:	ee33 4a84 	vadd.f32	s8, s7, s8
 8014b90:	ee35 6a86 	vadd.f32	s12, s11, s12
 8014b94:	ee34 5a85 	vadd.f32	s10, s9, s10
 8014b98:	ee32 3a83 	vadd.f32	s6, s5, s6
 8014b9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014ba0:	ed8a ca25 	vstr	s24, [sl, #148]	; 0x94
 8014ba4:	edca 6a26 	vstr	s13, [sl, #152]	; 0x98
 8014ba8:	ed8a 2a27 	vstr	s4, [sl, #156]	; 0x9c
 8014bac:	edca 1a28 	vstr	s3, [sl, #160]	; 0xa0
 8014bb0:	ed8a 4a29 	vstr	s8, [sl, #164]	; 0xa4
 8014bb4:	ed8a 6a2a 	vstr	s12, [sl, #168]	; 0xa8
 8014bb8:	ed8a 5a2b 	vstr	s10, [sl, #172]	; 0xac
 8014bbc:	ed8a 3a2c 	vstr	s6, [sl, #176]	; 0xb0
 8014bc0:	edca 7a2d 	vstr	s15, [sl, #180]	; 0xb4
 8014bc4:	f7ff bb62 	b.w	801428c <m_kalman_3gyro.isra.9.constprop.47+0x23ec>
 8014bc8:	4556      	cmp	r6, sl
 8014bca:	f6be a903 	bge.w	8012dd4 <m_kalman_3gyro.isra.9.constprop.47+0xf34>
 8014bce:	ebaa 0206 	sub.w	r2, sl, r6
 8014bd2:	eb09 010c 	add.w	r1, r9, ip
 8014bd6:	4454      	add	r4, sl
 8014bd8:	1ba4      	subs	r4, r4, r6
 8014bda:	f006 f9c5 	bl	801af68 <memcpy>
 8014bde:	4656      	mov	r6, sl
 8014be0:	f7fe b8f8 	b.w	8012dd4 <m_kalman_3gyro.isra.9.constprop.47+0xf34>
 8014be4:	ed9f 0b86 	vldr	d0, [pc, #536]	; 8014e00 <m_kalman_3gyro.isra.9.constprop.47+0x2f60>
 8014be8:	f7fe bbb5 	b.w	8013356 <m_kalman_3gyro.isra.9.constprop.47+0x14b6>
 8014bec:	f60a 03c8 	addw	r3, sl, #2248	; 0x8c8
 8014bf0:	f60a 04c4 	addw	r4, sl, #2244	; 0x8c4
 8014bf4:	9302      	str	r3, [sp, #8]
 8014bf6:	f50a 650c 	add.w	r5, sl, #2240	; 0x8c0
 8014bfa:	f60a 06bc 	addw	r6, sl, #2236	; 0x8bc
 8014bfe:	f60a 07b8 	addw	r7, sl, #2232	; 0x8b8
 8014c02:	f7fe ba1b 	b.w	801303c <m_kalman_3gyro.isra.9.constprop.47+0x119c>
 8014c06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014c08:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014c0c:	edc3 7a00 	vstr	s15, [r3]
 8014c10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014c12:	edc3 7a00 	vstr	s15, [r3]
 8014c16:	f7fe bb42 	b.w	801329e <m_kalman_3gyro.isra.9.constprop.47+0x13fe>
 8014c1a:	ed9f 0b7b 	vldr	d0, [pc, #492]	; 8014e08 <m_kalman_3gyro.isra.9.constprop.47+0x2f68>
 8014c1e:	f7fe bb9a 	b.w	8013356 <m_kalman_3gyro.isra.9.constprop.47+0x14b6>
 8014c22:	a9be      	add	r1, sp, #760	; 0x2f8
 8014c24:	a8b1      	add	r0, sp, #708	; 0x2c4
 8014c26:	eeb0 0a68 	vmov.f32	s0, s17
 8014c2a:	f7fe bb26 	b.w	801327a <m_kalman_3gyro.isra.9.constprop.47+0x13da>
 8014c2e:	eef4 7a68 	vcmp.f32	s15, s17
 8014c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c36:	f43e a936 	beq.w	8012ea6 <m_kalman_3gyro.isra.9.constprop.47+0x1006>
 8014c3a:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8014c3e:	eef4 7a66 	vcmp.f32	s15, s13
 8014c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c46:	f43e a92e 	beq.w	8012ea6 <m_kalman_3gyro.isra.9.constprop.47+0x1006>
 8014c4a:	eeb4 7a68 	vcmp.f32	s14, s17
 8014c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c52:	f43e a928 	beq.w	8012ea6 <m_kalman_3gyro.isra.9.constprop.47+0x1006>
 8014c56:	eeb4 7a66 	vcmp.f32	s14, s13
 8014c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c5e:	f43e a922 	beq.w	8012ea6 <m_kalman_3gyro.isra.9.constprop.47+0x1006>
 8014c62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014c66:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8014c6a:	ee27 7a26 	vmul.f32	s14, s14, s13
 8014c6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014c72:	f7fe b91e 	b.w	8012eb2 <m_kalman_3gyro.isra.9.constprop.47+0x1012>
 8014c76:	eef0 7a65 	vmov.f32	s15, s11
 8014c7a:	f7fe bc1a 	b.w	80134b2 <m_kalman_3gyro.isra.9.constprop.47+0x1612>
 8014c7e:	ee78 7a67 	vsub.f32	s15, s16, s15
 8014c82:	3101      	adds	r1, #1
 8014c84:	2951      	cmp	r1, #81	; 0x51
 8014c86:	ece0 7a01 	vstmia	r0!, {s15}
 8014c8a:	f47f adf3 	bne.w	8014874 <m_kalman_3gyro.isra.9.constprop.47+0x29d4>
 8014c8e:	e606      	b.n	801489e <m_kalman_3gyro.isra.9.constprop.47+0x29fe>
 8014c90:	eddf 7a60 	vldr	s15, [pc, #384]	; 8014e14 <m_kalman_3gyro.isra.9.constprop.47+0x2f74>
 8014c94:	e403      	b.n	801449e <m_kalman_3gyro.isra.9.constprop.47+0x25fe>
 8014c96:	eddf 7a5f 	vldr	s15, [pc, #380]	; 8014e14 <m_kalman_3gyro.isra.9.constprop.47+0x2f74>
 8014c9a:	e4c8      	b.n	801462e <m_kalman_3gyro.isra.9.constprop.47+0x278e>
 8014c9c:	edd8 6a00 	vldr	s13, [r8]
 8014ca0:	ed98 7a03 	vldr	s14, [r8, #12]
 8014ca4:	edd8 7a06 	vldr	s15, [r8, #24]
 8014ca8:	f7ff bade 	b.w	8014268 <m_kalman_3gyro.isra.9.constprop.47+0x23c8>
 8014cac:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8014cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cb4:	d005      	beq.n	8014cc2 <m_kalman_3gyro.isra.9.constprop.47+0x2e22>
 8014cb6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cbe:	f041 80d2 	bne.w	8015e66 <m_kalman_3gyro.isra.9.constprop.47+0x3fc6>
 8014cc2:	eef5 ba40 	vcmp.f32	s23, #0.0
 8014cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cca:	f000 83ed 	beq.w	80154a8 <m_kalman_3gyro.isra.9.constprop.47+0x3608>
 8014cce:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cd6:	eef0 6a48 	vmov.f32	s13, s16
 8014cda:	eeb0 ca48 	vmov.f32	s24, s16
 8014cde:	f47f aeed 	bne.w	8014abc <m_kalman_3gyro.isra.9.constprop.47+0x2c1c>
 8014ce2:	eef5 ca40 	vcmp.f32	s25, #0.0
 8014ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cea:	ed84 8a02 	vstr	s16, [r4, #8]
 8014cee:	f000 8082 	beq.w	8014df6 <m_kalman_3gyro.isra.9.constprop.47+0x2f56>
 8014cf2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cfa:	eeb0 2a48 	vmov.f32	s4, s16
 8014cfe:	f47f aee9 	bne.w	8014ad4 <m_kalman_3gyro.isra.9.constprop.47+0x2c34>
 8014d02:	eef5 aa40 	vcmp.f32	s21, #0.0
 8014d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d0a:	ed84 8a03 	vstr	s16, [r4, #12]
 8014d0e:	d050      	beq.n	8014db2 <m_kalman_3gyro.isra.9.constprop.47+0x2f12>
 8014d10:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d18:	f040 86a6 	bne.w	8015a68 <m_kalman_3gyro.isra.9.constprop.47+0x3bc8>
 8014d1c:	ed84 8a04 	vstr	s16, [r4, #16]
 8014d20:	eeb0 4a48 	vmov.f32	s8, s16
 8014d24:	eef0 1a48 	vmov.f32	s3, s16
 8014d28:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8014d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d30:	ed84 8a05 	vstr	s16, [r4, #20]
 8014d34:	d024      	beq.n	8014d80 <m_kalman_3gyro.isra.9.constprop.47+0x2ee0>
 8014d36:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d3e:	f041 8059 	bne.w	8015df4 <m_kalman_3gyro.isra.9.constprop.47+0x3f54>
 8014d42:	eef5 9a40 	vcmp.f32	s19, #0.0
 8014d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d4a:	ed84 8a06 	vstr	s16, [r4, #24]
 8014d4e:	f041 808e 	bne.w	8015e6e <m_kalman_3gyro.isra.9.constprop.47+0x3fce>
 8014d52:	eeb0 5a48 	vmov.f32	s10, s16
 8014d56:	eeb0 6a48 	vmov.f32	s12, s16
 8014d5a:	eef5 8a40 	vcmp.f32	s17, #0.0
 8014d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d62:	ed84 8a07 	vstr	s16, [r4, #28]
 8014d66:	f000 81e0 	beq.w	801512a <m_kalman_3gyro.isra.9.constprop.47+0x328a>
 8014d6a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d72:	eeb0 3a48 	vmov.f32	s6, s16
 8014d76:	f47f aee9 	bne.w	8014b4c <m_kalman_3gyro.isra.9.constprop.47+0x2cac>
 8014d7a:	eef0 7a48 	vmov.f32	s15, s16
 8014d7e:	e6e9      	b.n	8014b54 <m_kalman_3gyro.isra.9.constprop.47+0x2cb4>
 8014d80:	eeb0 6a48 	vmov.f32	s12, s16
 8014d84:	eef5 9a40 	vcmp.f32	s19, #0.0
 8014d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d8c:	ed84 8a06 	vstr	s16, [r4, #24]
 8014d90:	f000 8387 	beq.w	80154a2 <m_kalman_3gyro.isra.9.constprop.47+0x3602>
 8014d94:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d9c:	f040 8389 	bne.w	80154b2 <m_kalman_3gyro.isra.9.constprop.47+0x3612>
 8014da0:	ed84 8a07 	vstr	s16, [r4, #28]
 8014da4:	eeb0 3a48 	vmov.f32	s6, s16
 8014da8:	eeb0 5a48 	vmov.f32	s10, s16
 8014dac:	eef0 7a48 	vmov.f32	s15, s16
 8014db0:	e6d0      	b.n	8014b54 <m_kalman_3gyro.isra.9.constprop.47+0x2cb4>
 8014db2:	eef0 1a48 	vmov.f32	s3, s16
 8014db6:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8014dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014dbe:	ed84 8a04 	vstr	s16, [r4, #16]
 8014dc2:	f000 836b 	beq.w	801549c <m_kalman_3gyro.isra.9.constprop.47+0x35fc>
 8014dc6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014dce:	eeb0 4a48 	vmov.f32	s8, s16
 8014dd2:	d0a9      	beq.n	8014d28 <m_kalman_3gyro.isra.9.constprop.47+0x2e88>
 8014dd4:	e696      	b.n	8014b04 <m_kalman_3gyro.isra.9.constprop.47+0x2c64>
 8014dd6:	eef5 ba40 	vcmp.f32	s23, #0.0
 8014dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014dde:	eef0 6a48 	vmov.f32	s13, s16
 8014de2:	f47f ae6b 	bne.w	8014abc <m_kalman_3gyro.isra.9.constprop.47+0x2c1c>
 8014de6:	eef5 ca40 	vcmp.f32	s25, #0.0
 8014dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014dee:	ed84 8a02 	vstr	s16, [r4, #8]
 8014df2:	f47f af7e 	bne.w	8014cf2 <m_kalman_3gyro.isra.9.constprop.47+0x2e52>
 8014df6:	eeb0 2a48 	vmov.f32	s4, s16
 8014dfa:	e782      	b.n	8014d02 <m_kalman_3gyro.isra.9.constprop.47+0x2e62>
 8014dfc:	f3af 8000 	nop.w
 8014e00:	00000000 	.word	0x00000000
 8014e04:	3ff00000 	.word	0x3ff00000
 8014e08:	00000000 	.word	0x00000000
 8014e0c:	40140000 	.word	0x40140000
 8014e10:	66666667 	.word	0x66666667
 8014e14:	00000000 	.word	0x00000000
 8014e18:	ed9a 9a25 	vldr	s18, [sl, #148]	; 0x94
 8014e1c:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8014e14 <m_kalman_3gyro.isra.9.constprop.47+0x2f74>
 8014e20:	edda 8a26 	vldr	s17, [sl, #152]	; 0x98
 8014e24:	ed9a 8a27 	vldr	s16, [sl, #156]	; 0x9c
 8014e28:	ee69 7a09 	vmul.f32	s15, s18, s18
 8014e2c:	ee68 6aa8 	vmul.f32	s13, s17, s17
 8014e30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014e34:	ee28 7a08 	vmul.f32	s14, s16, s16
 8014e38:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8014e3c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014e40:	ee37 7a26 	vadd.f32	s14, s14, s13
 8014e44:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014e48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e50:	f340 87d4 	ble.w	8015dfc <m_kalman_3gyro.isra.9.constprop.47+0x3f5c>
 8014e54:	ee17 0a90 	vmov	r0, s15
 8014e58:	f7eb fb7e 	bl	8000558 <__aeabi_f2d>
 8014e5c:	ec41 0b10 	vmov	d0, r0, r1
 8014e60:	ed8d 9a42 	vstr	s18, [sp, #264]	; 0x108
 8014e64:	edcd 8a43 	vstr	s17, [sp, #268]	; 0x10c
 8014e68:	ed8d 8a44 	vstr	s16, [sp, #272]	; 0x110
 8014e6c:	f004 f970 	bl	8019150 <sqrt>
 8014e70:	ec51 0b10 	vmov	r0, r1, d0
 8014e74:	f7eb febc 	bl	8000bf0 <__aeabi_d2f>
 8014e78:	f8ba 3030 	ldrh.w	r3, [sl, #48]	; 0x30
 8014e7c:	9045      	str	r0, [sp, #276]	; 0x114
 8014e7e:	4604      	mov	r4, r0
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	f040 8105 	bne.w	8015090 <m_kalman_3gyro.isra.9.constprop.47+0x31f0>
 8014e86:	f8dd 36c8 	ldr.w	r3, [sp, #1736]	; 0x6c8
 8014e8a:	9e06      	ldr	r6, [sp, #24]
 8014e8c:	789b      	ldrb	r3, [r3, #2]
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	f000 87b8 	beq.w	8015e04 <m_kalman_3gyro.isra.9.constprop.47+0x3f64>
 8014e94:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8014e98:	ad4e      	add	r5, sp, #312	; 0x138
 8014e9a:	af46      	add	r7, sp, #280	; 0x118
 8014e9c:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8014ea0:	eeb1 9a49 	vneg.f32	s18, s18
 8014ea4:	eef1 8a68 	vneg.f32	s17, s17
 8014ea8:	eeb1 8a48 	vneg.f32	s16, s16
 8014eac:	4628      	mov	r0, r5
 8014eae:	4632      	mov	r2, r6
 8014eb0:	4639      	mov	r1, r7
 8014eb2:	ed85 9a00 	vstr	s18, [r5]
 8014eb6:	edc5 8a01 	vstr	s17, [r5, #4]
 8014eba:	ed85 8a02 	vstr	s16, [r5, #8]
 8014ebe:	60ec      	str	r4, [r5, #12]
 8014ec0:	f7f8 fd96 	bl	800d9f0 <m_qmult_eml>
 8014ec4:	ed8d 9a46 	vstr	s18, [sp, #280]	; 0x118
 8014ec8:	edcd 8a47 	vstr	s17, [sp, #284]	; 0x11c
 8014ecc:	ed8d 8a48 	vstr	s16, [sp, #288]	; 0x120
 8014ed0:	9449      	str	r4, [sp, #292]	; 0x124
 8014ed2:	ab46      	add	r3, sp, #280	; 0x118
 8014ed4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014ed6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8014eda:	ed95 6a00 	vldr	s12, [r5]
 8014ede:	ed95 7a01 	vldr	s14, [r5, #4]
 8014ee2:	edd5 7a02 	vldr	s15, [r5, #8]
 8014ee6:	edd5 6a03 	vldr	s13, [r5, #12]
 8014eea:	ee26 6a06 	vmul.f32	s12, s12, s12
 8014eee:	ee27 7a07 	vmul.f32	s14, s14, s14
 8014ef2:	ee37 7a06 	vadd.f32	s14, s14, s12
 8014ef6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014efa:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8014efe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014f02:	ac4a      	add	r4, sp, #296	; 0x128
 8014f04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014f08:	ee17 0a90 	vmov	r0, s15
 8014f0c:	f7eb fb24 	bl	8000558 <__aeabi_f2d>
 8014f10:	ec41 0b10 	vmov	d0, r0, r1
 8014f14:	f004 f91c 	bl	8019150 <sqrt>
 8014f18:	ec51 0b10 	vmov	r0, r1, d0
 8014f1c:	f7eb fe68 	bl	8000bf0 <__aeabi_d2f>
 8014f20:	ed95 6a00 	vldr	s12, [r5]
 8014f24:	edd5 6a01 	vldr	s13, [r5, #4]
 8014f28:	ed95 7a02 	vldr	s14, [r5, #8]
 8014f2c:	ed95 5a03 	vldr	s10, [r5, #12]
 8014f30:	9f06      	ldr	r7, [sp, #24]
 8014f32:	ee07 0a90 	vmov	s15, r0
 8014f36:	eec6 5a27 	vdiv.f32	s11, s12, s15
 8014f3a:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8014f3e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014f42:	ee85 7a27 	vdiv.f32	s14, s10, s15
 8014f46:	edcd 5a4a 	vstr	s11, [sp, #296]	; 0x128
 8014f4a:	ed8d 6a4b 	vstr	s12, [sp, #300]	; 0x12c
 8014f4e:	edcd 6a4c 	vstr	s13, [sp, #304]	; 0x130
 8014f52:	ed8d 7a4d 	vstr	s14, [sp, #308]	; 0x134
 8014f56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014f58:	f8dd 46e8 	ldr.w	r4, [sp, #1768]	; 0x6e8
 8014f5c:	6020      	str	r0, [r4, #0]
 8014f5e:	6061      	str	r1, [r4, #4]
 8014f60:	60a2      	str	r2, [r4, #8]
 8014f62:	60e3      	str	r3, [r4, #12]
 8014f64:	4638      	mov	r0, r7
 8014f66:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014f68:	f7f8 fdaa 	bl	800dac0 <m_q2dcm_eml>
 8014f6c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8014f70:	ac46      	add	r4, sp, #280	; 0x118
 8014f72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8014f76:	ed9d 6a46 	vldr	s12, [sp, #280]	; 0x118
 8014f7a:	ed9d 7a47 	vldr	s14, [sp, #284]	; 0x11c
 8014f7e:	eddd 7a48 	vldr	s15, [sp, #288]	; 0x120
 8014f82:	eddd 6a49 	vldr	s13, [sp, #292]	; 0x124
 8014f86:	ee26 6a06 	vmul.f32	s12, s12, s12
 8014f8a:	ee27 7a07 	vmul.f32	s14, s14, s14
 8014f8e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014f92:	ee37 7a06 	vadd.f32	s14, s14, s12
 8014f96:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8014f9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014f9e:	f50a 7616 	add.w	r6, sl, #600	; 0x258
 8014fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014fa6:	ee17 0a90 	vmov	r0, s15
 8014faa:	f7eb fad5 	bl	8000558 <__aeabi_f2d>
 8014fae:	ec41 0b10 	vmov	d0, r0, r1
 8014fb2:	f004 f8cd 	bl	8019150 <sqrt>
 8014fb6:	ec51 0b10 	vmov	r0, r1, d0
 8014fba:	f7eb fe19 	bl	8000bf0 <__aeabi_d2f>
 8014fbe:	ed9d 6a46 	vldr	s12, [sp, #280]	; 0x118
 8014fc2:	eddd 6a47 	vldr	s13, [sp, #284]	; 0x11c
 8014fc6:	ed9d 7a48 	vldr	s14, [sp, #288]	; 0x120
 8014fca:	ed9d 5a49 	vldr	s10, [sp, #292]	; 0x124
 8014fce:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8014fd0:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8014fd2:	ee07 0a90 	vmov	s15, r0
 8014fd6:	eec6 5a27 	vdiv.f32	s11, s12, s15
 8014fda:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8014fde:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014fe2:	ee85 7a27 	vdiv.f32	s14, s10, s15
 8014fe6:	edc7 5a00 	vstr	s11, [r7]
 8014fea:	ed87 6a01 	vstr	s12, [r7, #4]
 8014fee:	edc7 6a02 	vstr	s13, [r7, #8]
 8014ff2:	ed87 7a03 	vstr	s14, [r7, #12]
 8014ff6:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8014ffa:	f8dd 76e4 	ldr.w	r7, [sp, #1764]	; 0x6e4
 8014ffe:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8015002:	6821      	ldr	r1, [r4, #0]
 8015004:	6862      	ldr	r2, [r4, #4]
 8015006:	68a3      	ldr	r3, [r4, #8]
 8015008:	68e0      	ldr	r0, [r4, #12]
 801500a:	60e8      	str	r0, [r5, #12]
 801500c:	3410      	adds	r4, #16
 801500e:	42b4      	cmp	r4, r6
 8015010:	6029      	str	r1, [r5, #0]
 8015012:	606a      	str	r2, [r5, #4]
 8015014:	60ab      	str	r3, [r5, #8]
 8015016:	f105 0510 	add.w	r5, r5, #16
 801501a:	d1f2      	bne.n	8015002 <m_kalman_3gyro.isra.9.constprop.47+0x3162>
 801501c:	6823      	ldr	r3, [r4, #0]
 801501e:	602b      	str	r3, [r5, #0]
 8015020:	f8dd 26f0 	ldr.w	r2, [sp, #1776]	; 0x6f0
 8015024:	f8da 3094 	ldr.w	r3, [sl, #148]	; 0x94
 8015028:	6013      	str	r3, [r2, #0]
 801502a:	f8da 3098 	ldr.w	r3, [sl, #152]	; 0x98
 801502e:	6053      	str	r3, [r2, #4]
 8015030:	f8da 309c 	ldr.w	r3, [sl, #156]	; 0x9c
 8015034:	6093      	str	r3, [r2, #8]
 8015036:	f8da 30a0 	ldr.w	r3, [sl, #160]	; 0xa0
 801503a:	60d3      	str	r3, [r2, #12]
 801503c:	f8da 30a4 	ldr.w	r3, [sl, #164]	; 0xa4
 8015040:	6113      	str	r3, [r2, #16]
 8015042:	f8da 30a8 	ldr.w	r3, [sl, #168]	; 0xa8
 8015046:	6153      	str	r3, [r2, #20]
 8015048:	f8da 30ac 	ldr.w	r3, [sl, #172]	; 0xac
 801504c:	6193      	str	r3, [r2, #24]
 801504e:	f8da 30b0 	ldr.w	r3, [sl, #176]	; 0xb0
 8015052:	61d3      	str	r3, [r2, #28]
 8015054:	f8da 30b4 	ldr.w	r3, [sl, #180]	; 0xb4
 8015058:	6213      	str	r3, [r2, #32]
 801505a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801505c:	f8dd 26ec 	ldr.w	r2, [sp, #1772]	; 0x6ec
 8015060:	681b      	ldr	r3, [r3, #0]
 8015062:	6013      	str	r3, [r2, #0]
 8015064:	f20d 6d54 	addw	sp, sp, #1620	; 0x654
 8015068:	ecbd 8b10 	vpop	{d8-d15}
 801506c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015070:	2300      	movs	r3, #0
 8015072:	f88a 31ff 	strb.w	r3, [sl, #511]	; 0x1ff
 8015076:	f88a 3200 	strb.w	r3, [sl, #512]	; 0x200
 801507a:	f88a 3201 	strb.w	r3, [sl, #513]	; 0x201
 801507e:	f88a 3205 	strb.w	r3, [sl, #517]	; 0x205
 8015082:	f88a 3206 	strb.w	r3, [sl, #518]	; 0x206
 8015086:	f7ff b899 	b.w	80141bc <m_kalman_3gyro.isra.9.constprop.47+0x231c>
 801508a:	2301      	movs	r3, #1
 801508c:	f7ff b80b 	b.w	80140a6 <m_kalman_3gyro.isra.9.constprop.47+0x2206>
 8015090:	f8dd 16e8 	ldr.w	r1, [sp, #1768]	; 0x6e8
 8015094:	9806      	ldr	r0, [sp, #24]
 8015096:	2300      	movs	r3, #0
 8015098:	600b      	str	r3, [r1, #0]
 801509a:	f8dd 16e8 	ldr.w	r1, [sp, #1768]	; 0x6e8
 801509e:	6003      	str	r3, [r0, #0]
 80150a0:	604b      	str	r3, [r1, #4]
 80150a2:	f8dd 16e8 	ldr.w	r1, [sp, #1768]	; 0x6e8
 80150a6:	6043      	str	r3, [r0, #4]
 80150a8:	608b      	str	r3, [r1, #8]
 80150aa:	6083      	str	r3, [r0, #8]
 80150ac:	f8dd 36e8 	ldr.w	r3, [sp, #1768]	; 0x6e8
 80150b0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80150b4:	60c2      	str	r2, [r0, #12]
 80150b6:	60da      	str	r2, [r3, #12]
 80150b8:	4607      	mov	r7, r0
 80150ba:	e753      	b.n	8014f64 <m_kalman_3gyro.isra.9.constprop.47+0x30c4>
 80150bc:	2300      	movs	r3, #0
 80150be:	f88a 3202 	strb.w	r3, [sl, #514]	; 0x202
 80150c2:	f88a 3203 	strb.w	r3, [sl, #515]	; 0x203
 80150c6:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 80150ca:	f8ca 3458 	str.w	r3, [sl, #1112]	; 0x458
 80150ce:	f7fe be16 	b.w	8013cfe <m_kalman_3gyro.isra.9.constprop.47+0x1e5e>
 80150d2:	f8da 30a8 	ldr.w	r3, [sl, #168]	; 0xa8
 80150d6:	f8da 20a4 	ldr.w	r2, [sl, #164]	; 0xa4
 80150da:	f8ca 3084 	str.w	r3, [sl, #132]	; 0x84
 80150de:	f89a 3030 	ldrb.w	r3, [sl, #48]	; 0x30
 80150e2:	f8ca 2080 	str.w	r2, [sl, #128]	; 0x80
 80150e6:	f8da 20a0 	ldr.w	r2, [sl, #160]	; 0xa0
 80150ea:	f88a 1202 	strb.w	r1, [sl, #514]	; 0x202
 80150ee:	f88a 1203 	strb.w	r1, [sl, #515]	; 0x203
 80150f2:	f88a 1204 	strb.w	r1, [sl, #516]	; 0x204
 80150f6:	f8ca 145c 	str.w	r1, [sl, #1116]	; 0x45c
 80150fa:	f8ca 207c 	str.w	r2, [sl, #124]	; 0x7c
 80150fe:	2b00      	cmp	r3, #0
 8015100:	f000 81c9 	beq.w	8015496 <m_kalman_3gyro.isra.9.constprop.47+0x35f6>
 8015104:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8015108:	f88a 3030 	strb.w	r3, [sl, #48]	; 0x30
 801510c:	ac81      	add	r4, sp, #516	; 0x204
 801510e:	f7fe bdd9 	b.w	8013cc4 <m_kalman_3gyro.isra.9.constprop.47+0x1e24>
 8015112:	eddd ba5e 	vldr	s23, [sp, #376]	; 0x178
 8015116:	eef4 aaeb 	vcmpe.f32	s21, s23
 801511a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801511e:	f2c0 81f5 	blt.w	801550c <m_kalman_3gyro.isra.9.constprop.47+0x366c>
 8015122:	ed9d aa65 	vldr	s20, [sp, #404]	; 0x194
 8015126:	f7fe bc2e 	b.w	8013986 <m_kalman_3gyro.isra.9.constprop.47+0x1ae6>
 801512a:	eeb0 3a48 	vmov.f32	s6, s16
 801512e:	eef0 7a48 	vmov.f32	s15, s16
 8015132:	e50f      	b.n	8014b54 <m_kalman_3gyro.isra.9.constprop.47+0x2cb4>
 8015134:	4be4      	ldr	r3, [pc, #912]	; (80154c8 <m_kalman_3gyro.isra.9.constprop.47+0x3628>)
 8015136:	f893 3430 	ldrb.w	r3, [r3, #1072]	; 0x430
 801513a:	2b04      	cmp	r3, #4
 801513c:	f240 82e3 	bls.w	8015706 <m_kalman_3gyro.isra.9.constprop.47+0x3866>
 8015140:	4be2      	ldr	r3, [pc, #904]	; (80154cc <m_kalman_3gyro.isra.9.constprop.47+0x362c>)
 8015142:	ed9f 4ae3 	vldr	s8, [pc, #908]	; 80154d0 <m_kalman_3gyro.isra.9.constprop.47+0x3630>
 8015146:	ed93 1a04 	vldr	s2, [r3, #16]
 801514a:	ed93 3a06 	vldr	s6, [r3, #24]
 801514e:	ed93 7a03 	vldr	s14, [r3, #12]
 8015152:	eddf 5ae0 	vldr	s11, [pc, #896]	; 80154d4 <m_kalman_3gyro.isra.9.constprop.47+0x3634>
 8015156:	edd3 3a12 	vldr	s7, [r3, #72]	; 0x48
 801515a:	edd3 7a07 	vldr	s15, [r3, #28]
 801515e:	ed93 6a15 	vldr	s12, [r3, #84]	; 0x54
 8015162:	ed83 7a00 	vstr	s14, [r3]
 8015166:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 801516a:	ed83 1a01 	vstr	s2, [r3, #4]
 801516e:	ee61 9a04 	vmul.f32	s19, s2, s8
 8015172:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015176:	ee23 1a25 	vmul.f32	s2, s6, s11
 801517a:	edd3 aa05 	vldr	s21, [r3, #20]
 801517e:	edd3 4a08 	vldr	s9, [r3, #32]
 8015182:	ed93 2a0a 	vldr	s4, [r3, #40]	; 0x28
 8015186:	edd2 0a04 	vldr	s1, [r2, #16]
 801518a:	ed92 aa05 	vldr	s20, [r2, #20]
 801518e:	ed92 0a07 	vldr	s0, [r2, #28]
 8015192:	edd3 1a09 	vldr	s3, [r3, #36]	; 0x24
 8015196:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 801519a:	edd2 2a08 	vldr	s5, [r2, #32]
 801519e:	ed92 5a09 	vldr	s10, [r2, #36]	; 0x24
 80151a2:	edc2 3a00 	vstr	s7, [r2]
 80151a6:	ed83 3a03 	vstr	s6, [r3, #12]
 80151aa:	edc3 7a04 	vstr	s15, [r3, #16]
 80151ae:	ee23 3a84 	vmul.f32	s6, s7, s8
 80151b2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80151b6:	ee66 3a25 	vmul.f32	s7, s12, s11
 80151ba:	ee37 7a01 	vadd.f32	s14, s14, s2
 80151be:	ed9f 1ac6 	vldr	s2, [pc, #792]	; 80154d8 <m_kalman_3gyro.isra.9.constprop.47+0x3638>
 80151c2:	edc2 0a01 	vstr	s1, [r2, #4]
 80151c6:	ed82 aa02 	vstr	s20, [r2, #8]
 80151ca:	ed82 0a04 	vstr	s0, [r2, #16]
 80151ce:	edc2 2a05 	vstr	s5, [r2, #20]
 80151d2:	ed82 5a06 	vstr	s10, [r2, #24]
 80151d6:	edc3 aa02 	vstr	s21, [r3, #8]
 80151da:	edc3 4a05 	vstr	s9, [r3, #20]
 80151de:	edc3 1a06 	vstr	s3, [r3, #24]
 80151e2:	ed83 2a07 	vstr	s4, [r3, #28]
 80151e6:	edc3 6a08 	vstr	s13, [r3, #32]
 80151ea:	ed82 6a03 	vstr	s12, [r2, #12]
 80151ee:	ee6a aa84 	vmul.f32	s21, s21, s8
 80151f2:	ed92 6a0a 	vldr	s12, [r2, #40]	; 0x28
 80151f6:	ed93 ba0d 	vldr	s22, [r3, #52]	; 0x34
 80151fa:	9808      	ldr	r0, [sp, #32]
 80151fc:	9c07      	ldr	r4, [sp, #28]
 80151fe:	ed82 6a07 	vstr	s12, [r2, #28]
 8015202:	ee60 0a84 	vmul.f32	s1, s1, s8
 8015206:	ee2a aa04 	vmul.f32	s20, s20, s8
 801520a:	ee62 2aa5 	vmul.f32	s5, s5, s11
 801520e:	ee20 4a25 	vmul.f32	s8, s0, s11
 8015212:	ee25 5a01 	vmul.f32	s10, s10, s2
 8015216:	ee79 9aa7 	vadd.f32	s19, s19, s15
 801521a:	ee64 4aa5 	vmul.f32	s9, s9, s11
 801521e:	ee62 7a01 	vmul.f32	s15, s4, s2
 8015222:	edd2 5a0c 	vldr	s11, [r2, #48]	; 0x30
 8015226:	ed9f 2aad 	vldr	s4, [pc, #692]	; 80154dc <m_kalman_3gyro.isra.9.constprop.47+0x363c>
 801522a:	edc2 5a09 	vstr	s11, [r2, #36]	; 0x24
 801522e:	ee61 1a81 	vmul.f32	s3, s3, s2
 8015232:	ee73 3a23 	vadd.f32	s7, s6, s7
 8015236:	ed93 3a0c 	vldr	s6, [r3, #48]	; 0x30
 801523a:	ed83 ba0a 	vstr	s22, [r3, #40]	; 0x28
 801523e:	ed83 3a09 	vstr	s6, [r3, #36]	; 0x24
 8015242:	ee30 0a84 	vadd.f32	s0, s1, s8
 8015246:	ee7a 4aa4 	vadd.f32	s9, s21, s9
 801524a:	ed93 4a0e 	vldr	s8, [r3, #56]	; 0x38
 801524e:	edd0 0a01 	vldr	s1, [r0, #4]
 8015252:	edd0 aa00 	vldr	s21, [r0]
 8015256:	edc3 0a0d 	vstr	s1, [r3, #52]	; 0x34
 801525a:	ee77 1a21 	vadd.f32	s3, s14, s3
 801525e:	ee23 3a02 	vmul.f32	s6, s6, s4
 8015262:	ee3a 7a22 	vadd.f32	s14, s20, s5
 8015266:	ee73 3a85 	vadd.f32	s7, s7, s10
 801526a:	ed94 aa00 	vldr	s20, [r4]
 801526e:	edd2 2a0b 	vldr	s5, [r2, #44]	; 0x2c
 8015272:	edc3 aa0c 	vstr	s21, [r3, #48]	; 0x30
 8015276:	ee2b 5a02 	vmul.f32	s10, s22, s4
 801527a:	ee65 5a82 	vmul.f32	s11, s11, s4
 801527e:	ee79 9aa7 	vadd.f32	s19, s19, s15
 8015282:	ee66 6a81 	vmul.f32	s13, s13, s2
 8015286:	eddf 7a96 	vldr	s15, [pc, #600]	; 80154e0 <m_kalman_3gyro.isra.9.constprop.47+0x3640>
 801528a:	ed82 aa0c 	vstr	s20, [r2, #48]	; 0x30
 801528e:	ee24 ba02 	vmul.f32	s22, s8, s4
 8015292:	ee71 ba83 	vadd.f32	s23, s3, s6
 8015296:	ee79 9a85 	vadd.f32	s19, s19, s10
 801529a:	edd0 1a02 	vldr	s3, [r0, #8]
 801529e:	ed92 5a0d 	vldr	s10, [r2, #52]	; 0x34
 80152a2:	ed83 4a0b 	vstr	s8, [r3, #44]	; 0x2c
 80152a6:	ee20 3aa7 	vmul.f32	s6, s1, s15
 80152aa:	ee74 6aa6 	vadd.f32	s13, s9, s13
 80152ae:	ee26 6a01 	vmul.f32	s12, s12, s2
 80152b2:	ee73 4aa5 	vadd.f32	s9, s7, s11
 80152b6:	ee6a aaa7 	vmul.f32	s21, s21, s15
 80152ba:	ee2a aa27 	vmul.f32	s20, s20, s15
 80152be:	ee39 3a83 	vadd.f32	s6, s19, s6
 80152c2:	ee61 0aa7 	vmul.f32	s1, s3, s15
 80152c6:	ee22 1a81 	vmul.f32	s2, s5, s2
 80152ca:	edd4 5a01 	vldr	s11, [r4, #4]
 80152ce:	ed82 5a0a 	vstr	s10, [r2, #40]	; 0x28
 80152d2:	ee7b 3aaa 	vadd.f32	s7, s23, s21
 80152d6:	ee74 4a8a 	vadd.f32	s9, s9, s20
 80152da:	ee25 5a02 	vmul.f32	s10, s10, s4
 80152de:	ee30 6a06 	vadd.f32	s12, s0, s12
 80152e2:	ee76 6a8b 	vadd.f32	s13, s13, s22
 80152e6:	ed92 0a0e 	vldr	s0, [r2, #56]	; 0x38
 80152ea:	edc2 5a0d 	vstr	s11, [r2, #52]	; 0x34
 80152ee:	ee20 2a02 	vmul.f32	s4, s0, s4
 80152f2:	ee14 0a90 	vmov	r0, s9
 80152f6:	ee76 6aa0 	vadd.f32	s13, s13, s1
 80152fa:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80152fe:	ee63 0a03 	vmul.f32	s1, s6, s6
 8015302:	ee37 7a01 	vadd.f32	s14, s14, s2
 8015306:	ee36 6a05 	vadd.f32	s12, s12, s10
 801530a:	ed94 1a02 	vldr	s2, [r4, #8]
 801530e:	edc3 1a0e 	vstr	s3, [r3, #56]	; 0x38
 8015312:	461c      	mov	r4, r3
 8015314:	ee23 5aa3 	vmul.f32	s10, s7, s7
 8015318:	4619      	mov	r1, r3
 801531a:	ee37 7a02 	vadd.f32	s14, s14, s4
 801531e:	ee36 6a25 	vadd.f32	s12, s12, s11
 8015322:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015326:	ee75 5a20 	vadd.f32	s11, s10, s1
 801532a:	f844 0f84 	str.w	r0, [r4, #132]!
 801532e:	ee26 5aa6 	vmul.f32	s10, s13, s13
 8015332:	ee13 0a90 	vmov	r0, s7
 8015336:	ee77 7a27 	vadd.f32	s15, s14, s15
 801533a:	f841 0f78 	str.w	r0, [r1, #120]!
 801533e:	ee35 7a25 	vadd.f32	s14, s10, s11
 8015342:	ed81 3a01 	vstr	s6, [r1, #4]
 8015346:	ed82 1a0e 	vstr	s2, [r2, #56]	; 0x38
 801534a:	edc1 6a02 	vstr	s13, [r1, #8]
 801534e:	ee17 0a10 	vmov	r0, s14
 8015352:	ed82 0a0b 	vstr	s0, [r2, #44]	; 0x2c
 8015356:	edc2 2a08 	vstr	s5, [r2, #32]
 801535a:	ed84 6a01 	vstr	s12, [r4, #4]
 801535e:	edc4 7a02 	vstr	s15, [r4, #8]
 8015362:	f7eb f8f9 	bl	8000558 <__aeabi_f2d>
 8015366:	ec41 0b10 	vmov	d0, r0, r1
 801536a:	f003 fef1 	bl	8019150 <sqrt>
 801536e:	edd4 7a00 	vldr	s15, [r4]
 8015372:	edd4 6a01 	vldr	s13, [r4, #4]
 8015376:	ed94 7a02 	vldr	s14, [r4, #8]
 801537a:	ee66 6aa6 	vmul.f32	s13, s13, s13
 801537e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8015382:	ee27 7a07 	vmul.f32	s14, s14, s14
 8015386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801538a:	ec57 6b10 	vmov	r6, r7, d0
 801538e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015392:	ee17 0a90 	vmov	r0, s15
 8015396:	f7eb f8df 	bl	8000558 <__aeabi_f2d>
 801539a:	ec41 0b10 	vmov	d0, r0, r1
 801539e:	f003 fed7 	bl	8019150 <sqrt>
 80153a2:	ec51 0b10 	vmov	r0, r1, d0
 80153a6:	f7eb fc23 	bl	8000bf0 <__aeabi_d2f>
 80153aa:	4639      	mov	r1, r7
 80153ac:	ee09 0a90 	vmov	s19, r0
 80153b0:	4630      	mov	r0, r6
 80153b2:	f7eb fc1d 	bl	8000bf0 <__aeabi_d2f>
 80153b6:	ee07 0a90 	vmov	s15, r0
 80153ba:	eeb4 dae7 	vcmpe.f32	s26, s15
 80153be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153c2:	dd68      	ble.n	8015496 <m_kalman_3gyro.isra.9.constprop.47+0x35f6>
 80153c4:	eeb4 fae9 	vcmpe.f32	s30, s19
 80153c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153cc:	dd63      	ble.n	8015496 <m_kalman_3gyro.isra.9.constprop.47+0x35f6>
 80153ce:	9b07      	ldr	r3, [sp, #28]
 80153d0:	ed93 7a00 	vldr	s14, [r3]
 80153d4:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 80153d8:	eeb0 7ac7 	vabs.f32	s14, s14
 80153dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80153e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153e4:	d557      	bpl.n	8015496 <m_kalman_3gyro.isra.9.constprop.47+0x35f6>
 80153e6:	ed93 7a01 	vldr	s14, [r3, #4]
 80153ea:	eeb0 7ac7 	vabs.f32	s14, s14
 80153ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80153f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153f6:	d54e      	bpl.n	8015496 <m_kalman_3gyro.isra.9.constprop.47+0x35f6>
 80153f8:	ed93 7a02 	vldr	s14, [r3, #8]
 80153fc:	eeb0 7ac7 	vabs.f32	s14, s14
 8015400:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015408:	d545      	bpl.n	8015496 <m_kalman_3gyro.isra.9.constprop.47+0x35f6>
 801540a:	9b08      	ldr	r3, [sp, #32]
 801540c:	edd3 7a00 	vldr	s15, [r3]
 8015410:	eef0 7ae7 	vabs.f32	s15, s15
 8015414:	ee17 0a90 	vmov	r0, s15
 8015418:	f7eb f89e 	bl	8000558 <__aeabi_f2d>
 801541c:	a328      	add	r3, pc, #160	; (adr r3, 80154c0 <m_kalman_3gyro.isra.9.constprop.47+0x3620>)
 801541e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015422:	f7eb fb5f 	bl	8000ae4 <__aeabi_dcmplt>
 8015426:	b3b0      	cbz	r0, 8015496 <m_kalman_3gyro.isra.9.constprop.47+0x35f6>
 8015428:	9b08      	ldr	r3, [sp, #32]
 801542a:	edd3 7a01 	vldr	s15, [r3, #4]
 801542e:	eef0 7ae7 	vabs.f32	s15, s15
 8015432:	ee17 0a90 	vmov	r0, s15
 8015436:	f7eb f88f 	bl	8000558 <__aeabi_f2d>
 801543a:	a321      	add	r3, pc, #132	; (adr r3, 80154c0 <m_kalman_3gyro.isra.9.constprop.47+0x3620>)
 801543c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015440:	f7eb fb50 	bl	8000ae4 <__aeabi_dcmplt>
 8015444:	b338      	cbz	r0, 8015496 <m_kalman_3gyro.isra.9.constprop.47+0x35f6>
 8015446:	9b08      	ldr	r3, [sp, #32]
 8015448:	edd3 7a02 	vldr	s15, [r3, #8]
 801544c:	eef0 7ae7 	vabs.f32	s15, s15
 8015450:	ee17 0a90 	vmov	r0, s15
 8015454:	f7eb f880 	bl	8000558 <__aeabi_f2d>
 8015458:	a319      	add	r3, pc, #100	; (adr r3, 80154c0 <m_kalman_3gyro.isra.9.constprop.47+0x3620>)
 801545a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801545e:	f7eb fb41 	bl	8000ae4 <__aeabi_dcmplt>
 8015462:	b1c0      	cbz	r0, 8015496 <m_kalman_3gyro.isra.9.constprop.47+0x35f6>
 8015464:	f8da 2450 	ldr.w	r2, [sl, #1104]	; 0x450
 8015468:	2a0a      	cmp	r2, #10
 801546a:	f000 810c 	beq.w	8015686 <m_kalman_3gyro.isra.9.constprop.47+0x37e6>
 801546e:	2300      	movs	r3, #0
 8015470:	2a00      	cmp	r2, #0
 8015472:	f88a 3202 	strb.w	r3, [sl, #514]	; 0x202
 8015476:	f88a 3203 	strb.w	r3, [sl, #515]	; 0x203
 801547a:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 801547e:	f102 0301 	add.w	r3, r2, #1
 8015482:	dd03      	ble.n	801548c <m_kalman_3gyro.isra.9.constprop.47+0x35ec>
 8015484:	2b00      	cmp	r3, #0
 8015486:	bfd8      	it	le
 8015488:	f06f 4300 	mvnle.w	r3, #2147483648	; 0x80000000
 801548c:	2200      	movs	r2, #0
 801548e:	f8ca 3450 	str.w	r3, [sl, #1104]	; 0x450
 8015492:	f8ca 245c 	str.w	r2, [sl, #1116]	; 0x45c
 8015496:	ac81      	add	r4, sp, #516	; 0x204
 8015498:	f7fe bc14 	b.w	8013cc4 <m_kalman_3gyro.isra.9.constprop.47+0x1e24>
 801549c:	eeb0 4a48 	vmov.f32	s8, s16
 80154a0:	e442      	b.n	8014d28 <m_kalman_3gyro.isra.9.constprop.47+0x2e88>
 80154a2:	eeb0 5a48 	vmov.f32	s10, s16
 80154a6:	e458      	b.n	8014d5a <m_kalman_3gyro.isra.9.constprop.47+0x2eba>
 80154a8:	eef0 6a48 	vmov.f32	s13, s16
 80154ac:	eeb0 ca48 	vmov.f32	s24, s16
 80154b0:	e417      	b.n	8014ce2 <m_kalman_3gyro.isra.9.constprop.47+0x2e42>
 80154b2:	eeb0 5a48 	vmov.f32	s10, s16
 80154b6:	f7ff bb3d 	b.w	8014b34 <m_kalman_3gyro.isra.9.constprop.47+0x2c94>
 80154ba:	bf00      	nop
 80154bc:	f3af 8000 	nop.w
 80154c0:	66666666 	.word	0x66666666
 80154c4:	3ff66666 	.word	0x3ff66666
 80154c8:	20001698 	.word	0x20001698
 80154cc:	20001acc 	.word	0x20001acc
 80154d0:	be4ccccd 	.word	0xbe4ccccd
 80154d4:	bdcccccd 	.word	0xbdcccccd
 80154d8:	00000000 	.word	0x00000000
 80154dc:	3dcccccd 	.word	0x3dcccccd
 80154e0:	3e4ccccd 	.word	0x3e4ccccd
 80154e4:	f89a 28ae 	ldrb.w	r2, [sl, #2222]	; 0x8ae
 80154e8:	2a00      	cmp	r2, #0
 80154ea:	d05e      	beq.n	80155aa <m_kalman_3gyro.isra.9.constprop.47+0x370a>
 80154ec:	3a01      	subs	r2, #1
 80154ee:	2300      	movs	r3, #0
 80154f0:	f88a 28ae 	strb.w	r2, [sl, #2222]	; 0x8ae
 80154f4:	f88a 31fc 	strb.w	r3, [sl, #508]	; 0x1fc
 80154f8:	f88a 31fd 	strb.w	r3, [sl, #509]	; 0x1fd
 80154fc:	f88a 31fe 	strb.w	r3, [sl, #510]	; 0x1fe
 8015500:	f88a 3205 	strb.w	r3, [sl, #517]	; 0x205
 8015504:	f88a 3207 	strb.w	r3, [sl, #519]	; 0x207
 8015508:	f7fe be90 	b.w	801422c <m_kalman_3gyro.isra.9.constprop.47+0x238c>
 801550c:	4b92      	ldr	r3, [pc, #584]	; (8015758 <m_kalman_3gyro.isra.9.constprop.47+0x38b8>)
 801550e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015512:	f7eb fb6d 	bl	8000bf0 <__aeabi_d2f>
 8015516:	eef4 aacb 	vcmpe.f32	s21, s22
 801551a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801551e:	ee0a 0a10 	vmov	s20, r0
 8015522:	f6fe aa30 	blt.w	8013986 <m_kalman_3gyro.isra.9.constprop.47+0x1ae6>
 8015526:	eef4 aaeb 	vcmpe.f32	s21, s23
 801552a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801552e:	f63e aa2a 	bhi.w	8013986 <m_kalman_3gyro.isra.9.constprop.47+0x1ae6>
 8015532:	2007      	movs	r0, #7
 8015534:	2402      	movs	r4, #2
 8015536:	2301      	movs	r3, #1
 8015538:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
 801553c:	e009      	b.n	8015552 <m_kalman_3gyro.isra.9.constprop.47+0x36b2>
 801553e:	edd1 7a00 	vldr	s15, [r1]
 8015542:	eef4 aae7 	vcmpe.f32	s21, s15
 8015546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801554a:	bfa6      	itte	ge
 801554c:	1c54      	addge	r4, r2, #1
 801554e:	4613      	movge	r3, r2
 8015550:	4610      	movlt	r0, r2
 8015552:	18c2      	adds	r2, r0, r3
 8015554:	0852      	lsrs	r2, r2, #1
 8015556:	1951      	adds	r1, r2, r5
 8015558:	f50d 66ca 	add.w	r6, sp, #1616	; 0x650
 801555c:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 8015560:	42a0      	cmp	r0, r4
 8015562:	f5a1 619e 	sub.w	r1, r1, #1264	; 0x4f0
 8015566:	d8ea      	bhi.n	801553e <m_kalman_3gyro.isra.9.constprop.47+0x369e>
 8015568:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 801556c:	3a01      	subs	r2, #1
 801556e:	0092      	lsls	r2, r2, #2
 8015570:	009b      	lsls	r3, r3, #2
 8015572:	a958      	add	r1, sp, #352	; 0x160
 8015574:	1888      	adds	r0, r1, r2
 8015576:	4419      	add	r1, r3
 8015578:	ed90 7a00 	vldr	s14, [r0]
 801557c:	edd1 7a00 	vldr	s15, [r1]
 8015580:	ee7a aac7 	vsub.f32	s21, s21, s14
 8015584:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015588:	a95f      	add	r1, sp, #380	; 0x17c
 801558a:	ee8a aaa7 	vdiv.f32	s20, s21, s15
 801558e:	440a      	add	r2, r1
 8015590:	440b      	add	r3, r1
 8015592:	ed92 7a00 	vldr	s14, [r2]
 8015596:	edd3 7a00 	vldr	s15, [r3]
 801559a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801559e:	ee2a aa27 	vmul.f32	s20, s20, s15
 80155a2:	ee3a aa07 	vadd.f32	s20, s20, s14
 80155a6:	f7fe b9ee 	b.w	8013986 <m_kalman_3gyro.isra.9.constprop.47+0x1ae6>
 80155aa:	f8da 58b0 	ldr.w	r5, [sl, #2224]	; 0x8b0
 80155ae:	b175      	cbz	r5, 80155ce <m_kalman_3gyro.isra.9.constprop.47+0x372e>
 80155b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80155b2:	6818      	ldr	r0, [r3, #0]
 80155b4:	f7ea ffd0 	bl	8000558 <__aeabi_f2d>
 80155b8:	a365      	add	r3, pc, #404	; (adr r3, 8015750 <m_kalman_3gyro.isra.9.constprop.47+0x38b0>)
 80155ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155be:	f7eb faaf 	bl	8000b20 <__aeabi_dcmpgt>
 80155c2:	b120      	cbz	r0, 80155ce <m_kalman_3gyro.isra.9.constprop.47+0x372e>
 80155c4:	3d01      	subs	r5, #1
 80155c6:	f8ca 58b0 	str.w	r5, [sl, #2224]	; 0x8b0
 80155ca:	f7fe be2f 	b.w	801422c <m_kalman_3gyro.isra.9.constprop.47+0x238c>
 80155ce:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80155d0:	6818      	ldr	r0, [r3, #0]
 80155d2:	f7ea ffc1 	bl	8000558 <__aeabi_f2d>
 80155d6:	4606      	mov	r6, r0
 80155d8:	ee1d 0a10 	vmov	r0, s26
 80155dc:	460f      	mov	r7, r1
 80155de:	f7ea ffbb 	bl	8000558 <__aeabi_f2d>
 80155e2:	2200      	movs	r2, #0
 80155e4:	4b5d      	ldr	r3, [pc, #372]	; (801575c <m_kalman_3gyro.isra.9.constprop.47+0x38bc>)
 80155e6:	f7eb f80b 	bl	8000600 <__aeabi_dmul>
 80155ea:	4602      	mov	r2, r0
 80155ec:	460b      	mov	r3, r1
 80155ee:	4630      	mov	r0, r6
 80155f0:	4639      	mov	r1, r7
 80155f2:	f7eb fa77 	bl	8000ae4 <__aeabi_dcmplt>
 80155f6:	2800      	cmp	r0, #0
 80155f8:	f43e ae18 	beq.w	801422c <m_kalman_3gyro.isra.9.constprop.47+0x238c>
 80155fc:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80155fe:	6818      	ldr	r0, [r3, #0]
 8015600:	f7ea ffaa 	bl	8000558 <__aeabi_f2d>
 8015604:	4606      	mov	r6, r0
 8015606:	ee1f 0a10 	vmov	r0, s30
 801560a:	460f      	mov	r7, r1
 801560c:	f7ea ffa4 	bl	8000558 <__aeabi_f2d>
 8015610:	2200      	movs	r2, #0
 8015612:	4b52      	ldr	r3, [pc, #328]	; (801575c <m_kalman_3gyro.isra.9.constprop.47+0x38bc>)
 8015614:	f7ea fff4 	bl	8000600 <__aeabi_dmul>
 8015618:	4602      	mov	r2, r0
 801561a:	460b      	mov	r3, r1
 801561c:	4630      	mov	r0, r6
 801561e:	4639      	mov	r1, r7
 8015620:	f7eb fa60 	bl	8000ae4 <__aeabi_dcmplt>
 8015624:	2800      	cmp	r0, #0
 8015626:	f43e ae01 	beq.w	801422c <m_kalman_3gyro.isra.9.constprop.47+0x238c>
 801562a:	4b4d      	ldr	r3, [pc, #308]	; (8015760 <m_kalman_3gyro.isra.9.constprop.47+0x38c0>)
 801562c:	6818      	ldr	r0, [r3, #0]
 801562e:	f7ea ff93 	bl	8000558 <__aeabi_f2d>
 8015632:	4606      	mov	r6, r0
 8015634:	ee1e 0a90 	vmov	r0, s29
 8015638:	460f      	mov	r7, r1
 801563a:	f7ea ff8d 	bl	8000558 <__aeabi_f2d>
 801563e:	4602      	mov	r2, r0
 8015640:	460b      	mov	r3, r1
 8015642:	f7ea fe2b 	bl	800029c <__adddf3>
 8015646:	4602      	mov	r2, r0
 8015648:	460b      	mov	r3, r1
 801564a:	4630      	mov	r0, r6
 801564c:	4639      	mov	r1, r7
 801564e:	f7eb fa67 	bl	8000b20 <__aeabi_dcmpgt>
 8015652:	2800      	cmp	r0, #0
 8015654:	f000 8387 	beq.w	8015d66 <m_kalman_3gyro.isra.9.constprop.47+0x3ec6>
 8015658:	f89a 28ad 	ldrb.w	r2, [sl, #2221]	; 0x8ad
 801565c:	2300      	movs	r3, #0
 801565e:	2a0e      	cmp	r2, #14
 8015660:	f88a 31fc 	strb.w	r3, [sl, #508]	; 0x1fc
 8015664:	f88a 31fd 	strb.w	r3, [sl, #509]	; 0x1fd
 8015668:	f88a 31fe 	strb.w	r3, [sl, #510]	; 0x1fe
 801566c:	f88a 3205 	strb.w	r3, [sl, #517]	; 0x205
 8015670:	f88a 3207 	strb.w	r3, [sl, #519]	; 0x207
 8015674:	bf95      	itete	ls
 8015676:	3203      	addls	r2, #3
 8015678:	2364      	movhi	r3, #100	; 0x64
 801567a:	f88a 28ad 	strbls.w	r2, [sl, #2221]	; 0x8ad
 801567e:	f8ca 38b0 	strhi.w	r3, [sl, #2224]	; 0x8b0
 8015682:	f7fe bdd3 	b.w	801422c <m_kalman_3gyro.isra.9.constprop.47+0x238c>
 8015686:	2301      	movs	r3, #1
 8015688:	9907      	ldr	r1, [sp, #28]
 801568a:	f88a 3202 	strb.w	r3, [sl, #514]	; 0x202
 801568e:	f88a 3203 	strb.w	r3, [sl, #515]	; 0x203
 8015692:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 8015696:	680a      	ldr	r2, [r1, #0]
 8015698:	f8ca 207c 	str.w	r2, [sl, #124]	; 0x7c
 801569c:	684a      	ldr	r2, [r1, #4]
 801569e:	f8ca 2080 	str.w	r2, [sl, #128]	; 0x80
 80156a2:	688a      	ldr	r2, [r1, #8]
 80156a4:	f8ca 2084 	str.w	r2, [sl, #132]	; 0x84
 80156a8:	f8dd 26f8 	ldr.w	r2, [sp, #1784]	; 0x6f8
 80156ac:	7013      	strb	r3, [r2, #0]
 80156ae:	f8da 345c 	ldr.w	r3, [sl, #1116]	; 0x45c
 80156b2:	f89a 2030 	ldrb.w	r2, [sl, #48]	; 0x30
 80156b6:	3301      	adds	r3, #1
 80156b8:	f8ca 345c 	str.w	r3, [sl, #1116]	; 0x45c
 80156bc:	b172      	cbz	r2, 80156dc <m_kalman_3gyro.isra.9.constprop.47+0x383c>
 80156be:	f8da 1080 	ldr.w	r1, [sl, #128]	; 0x80
 80156c2:	f8da 2084 	ldr.w	r2, [sl, #132]	; 0x84
 80156c6:	f8ca 10a4 	str.w	r1, [sl, #164]	; 0xa4
 80156ca:	f8ca 20a8 	str.w	r2, [sl, #168]	; 0xa8
 80156ce:	f8da 107c 	ldr.w	r1, [sl, #124]	; 0x7c
 80156d2:	f8ca 10a0 	str.w	r1, [sl, #160]	; 0xa0
 80156d6:	2200      	movs	r2, #0
 80156d8:	f88a 2030 	strb.w	r2, [sl, #48]	; 0x30
 80156dc:	2b1e      	cmp	r3, #30
 80156de:	f47f aeda 	bne.w	8015496 <m_kalman_3gyro.isra.9.constprop.47+0x35f6>
 80156e2:	f60a 0398 	addw	r3, sl, #2200	; 0x898
 80156e6:	f8da 00a0 	ldr.w	r0, [sl, #160]	; 0xa0
 80156ea:	f8da 10a4 	ldr.w	r1, [sl, #164]	; 0xa4
 80156ee:	f8da 20a8 	ldr.w	r2, [sl, #168]	; 0xa8
 80156f2:	6018      	str	r0, [r3, #0]
 80156f4:	f60a 039c 	addw	r3, sl, #2204	; 0x89c
 80156f8:	ac81      	add	r4, sp, #516	; 0x204
 80156fa:	6019      	str	r1, [r3, #0]
 80156fc:	f50a 630a 	add.w	r3, sl, #2208	; 0x8a0
 8015700:	601a      	str	r2, [r3, #0]
 8015702:	f7fe badf 	b.w	8013cc4 <m_kalman_3gyro.isra.9.constprop.47+0x1e24>
 8015706:	4a17      	ldr	r2, [pc, #92]	; (8015764 <m_kalman_3gyro.isra.9.constprop.47+0x38c4>)
 8015708:	9d08      	ldr	r5, [sp, #32]
 801570a:	9f07      	ldr	r7, [sp, #28]
 801570c:	68ae      	ldr	r6, [r5, #8]
 801570e:	682c      	ldr	r4, [r5, #0]
 8015710:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8015714:	0080      	lsls	r0, r0, #2
 8015716:	f102 013c 	add.w	r1, r2, #60	; 0x3c
 801571a:	4402      	add	r2, r0
 801571c:	4401      	add	r1, r0
 801571e:	6096      	str	r6, [r2, #8]
 8015720:	4e0d      	ldr	r6, [pc, #52]	; (8015758 <m_kalman_3gyro.isra.9.constprop.47+0x38b8>)
 8015722:	6868      	ldr	r0, [r5, #4]
 8015724:	6014      	str	r4, [r2, #0]
 8015726:	3301      	adds	r3, #1
 8015728:	683d      	ldr	r5, [r7, #0]
 801572a:	6050      	str	r0, [r2, #4]
 801572c:	687c      	ldr	r4, [r7, #4]
 801572e:	68b8      	ldr	r0, [r7, #8]
 8015730:	f886 3430 	strb.w	r3, [r6, #1072]	; 0x430
 8015734:	f8dd 36f8 	ldr.w	r3, [sp, #1784]	; 0x6f8
 8015738:	600d      	str	r5, [r1, #0]
 801573a:	2200      	movs	r2, #0
 801573c:	604c      	str	r4, [r1, #4]
 801573e:	6088      	str	r0, [r1, #8]
 8015740:	701a      	strb	r2, [r3, #0]
 8015742:	f20d 6d54 	addw	sp, sp, #1620	; 0x654
 8015746:	ecbd 8b10 	vpop	{d8-d15}
 801574a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801574e:	bf00      	nop
 8015750:	33333333 	.word	0x33333333
 8015754:	3fd33333 	.word	0x3fd33333
 8015758:	20001698 	.word	0x20001698
 801575c:	3ff80000 	.word	0x3ff80000
 8015760:	20001ab8 	.word	0x20001ab8
 8015764:	20001acc 	.word	0x20001acc
 8015768:	f60a 0274 	addw	r2, sl, #2164	; 0x874
 801576c:	f60a 0378 	addw	r3, sl, #2168	; 0x878
 8015770:	ed92 7a00 	vldr	s14, [r2]
 8015774:	edd3 7a00 	vldr	s15, [r3]
 8015778:	9305      	str	r3, [sp, #20]
 801577a:	f60a 037c 	addw	r3, sl, #2172	; 0x87c
 801577e:	ee67 6a07 	vmul.f32	s13, s14, s14
 8015782:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8015786:	ed93 7a00 	vldr	s14, [r3]
 801578a:	9300      	str	r3, [sp, #0]
 801578c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015790:	ee27 7a07 	vmul.f32	s14, s14, s14
 8015794:	920c      	str	r2, [sp, #48]	; 0x30
 8015796:	ee77 7a27 	vadd.f32	s15, s14, s15
 801579a:	f50a 6808 	add.w	r8, sl, #2176	; 0x880
 801579e:	ee17 0a90 	vmov	r0, s15
 80157a2:	f7ea fed9 	bl	8000558 <__aeabi_f2d>
 80157a6:	ec41 0b10 	vmov	d0, r0, r1
 80157aa:	f003 fcd1 	bl	8019150 <sqrt>
 80157ae:	f60a 0284 	addw	r2, sl, #2180	; 0x884
 80157b2:	4614      	mov	r4, r2
 80157b4:	ec51 0b10 	vmov	r0, r1, d0
 80157b8:	f7eb fa1a 	bl	8000bf0 <__aeabi_d2f>
 80157bc:	edd4 7a00 	vldr	s15, [r4]
 80157c0:	ed98 7a00 	vldr	s14, [r8]
 80157c4:	9402      	str	r4, [sp, #8]
 80157c6:	f60a 0788 	addw	r7, sl, #2184	; 0x888
 80157ca:	ee67 6a07 	vmul.f32	s13, s14, s14
 80157ce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80157d2:	ed97 7a00 	vldr	s14, [r7]
 80157d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80157da:	ee27 7a07 	vmul.f32	s14, s14, s14
 80157de:	ee0a 0a90 	vmov	s21, r0
 80157e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80157e6:	ac81      	add	r4, sp, #516	; 0x204
 80157e8:	ee17 0a90 	vmov	r0, s15
 80157ec:	f7ea feb4 	bl	8000558 <__aeabi_f2d>
 80157f0:	ec41 0b10 	vmov	d0, r0, r1
 80157f4:	f003 fcac 	bl	8019150 <sqrt>
 80157f8:	ec51 0b10 	vmov	r0, r1, d0
 80157fc:	f7eb f9f8 	bl	8000bf0 <__aeabi_d2f>
 8015800:	9b00      	ldr	r3, [sp, #0]
 8015802:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015804:	edd3 6a00 	vldr	s13, [r3]
 8015808:	edd2 4a00 	vldr	s9, [r2]
 801580c:	9b05      	ldr	r3, [sp, #20]
 801580e:	9a02      	ldr	r2, [sp, #8]
 8015810:	ed97 5a00 	vldr	s10, [r7]
 8015814:	edd2 5a00 	vldr	s11, [r2]
 8015818:	ed93 6a00 	vldr	s12, [r3]
 801581c:	ed98 7a00 	vldr	s14, [r8]
 8015820:	4be5      	ldr	r3, [pc, #916]	; (8015bb8 <m_kalman_3gyro.isra.9.constprop.47+0x3d18>)
 8015822:	ee07 0a90 	vmov	s15, r0
 8015826:	ee85 eaa7 	vdiv.f32	s28, s11, s15
 801582a:	6018      	str	r0, [r3, #0]
 801582c:	af4a      	add	r7, sp, #296	; 0x128
 801582e:	eec5 da27 	vdiv.f32	s27, s10, s15
 8015832:	eec7 fa27 	vdiv.f32	s31, s14, s15
 8015836:	ee86 7aaa 	vdiv.f32	s14, s13, s21
 801583a:	eec6 7a2a 	vdiv.f32	s15, s12, s21
 801583e:	eec4 6aaa 	vdiv.f32	s13, s9, s21
 8015842:	ee27 6a2f 	vmul.f32	s12, s14, s31
 8015846:	ee6d baa6 	vmul.f32	s23, s27, s13
 801584a:	ee27 7a0e 	vmul.f32	s14, s14, s28
 801584e:	ee2d baa7 	vmul.f32	s22, s27, s15
 8015852:	ee7b bac6 	vsub.f32	s23, s23, s12
 8015856:	ee6e 6a26 	vmul.f32	s13, s28, s13
 801585a:	ee37 ba4b 	vsub.f32	s22, s14, s22
 801585e:	ee67 7aaf 	vmul.f32	s15, s15, s31
 8015862:	ee2b 7a0b 	vmul.f32	s14, s22, s22
 8015866:	ee77 aae6 	vsub.f32	s21, s15, s13
 801586a:	ee6b 7aab 	vmul.f32	s15, s23, s23
 801586e:	ee6a 6aaa 	vmul.f32	s13, s21, s21
 8015872:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801587a:	ee17 0a90 	vmov	r0, s15
 801587e:	f7ea fe6b 	bl	8000558 <__aeabi_f2d>
 8015882:	ec41 0b10 	vmov	d0, r0, r1
 8015886:	f003 fc63 	bl	8019150 <sqrt>
 801588a:	ec51 0b10 	vmov	r0, r1, d0
 801588e:	f7eb f9af 	bl	8000bf0 <__aeabi_d2f>
 8015892:	ee07 0a90 	vmov	s15, r0
 8015896:	ee8b 6aa7 	vdiv.f32	s12, s23, s15
 801589a:	aa78      	add	r2, sp, #480	; 0x1e0
 801589c:	4620      	mov	r0, r4
 801589e:	9916      	ldr	r1, [sp, #88]	; 0x58
 80158a0:	eeca 6aa7 	vdiv.f32	s13, s21, s15
 80158a4:	eecb 5a27 	vdiv.f32	s11, s22, s15
 80158a8:	ee2d 5a86 	vmul.f32	s10, s27, s12
 80158ac:	ee66 7a8e 	vmul.f32	s15, s13, s28
 80158b0:	ee6f 4a86 	vmul.f32	s9, s31, s12
 80158b4:	ee35 5a67 	vsub.f32	s10, s10, s15
 80158b8:	ee2e 7a25 	vmul.f32	s14, s28, s11
 80158bc:	ee66 7aaf 	vmul.f32	s15, s13, s31
 80158c0:	ed84 5a00 	vstr	s10, [r4]
 80158c4:	ee2d 5aa5 	vmul.f32	s10, s27, s11
 80158c8:	ee37 7a64 	vsub.f32	s14, s14, s9
 80158cc:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80158d0:	ed84 6a04 	vstr	s12, [r4, #16]
 80158d4:	edc4 6a07 	vstr	s13, [r4, #28]
 80158d8:	edc4 7a03 	vstr	s15, [r4, #12]
 80158dc:	edc4 5a01 	vstr	s11, [r4, #4]
 80158e0:	ed84 7a06 	vstr	s14, [r4, #24]
 80158e4:	edc4 fa02 	vstr	s31, [r4, #8]
 80158e8:	ed84 ea05 	vstr	s28, [r4, #20]
 80158ec:	edc4 da08 	vstr	s27, [r4, #32]
 80158f0:	f7f7 feb4 	bl	800d65c <m_mldivide>
 80158f4:	a946      	add	r1, sp, #280	; 0x118
 80158f6:	a878      	add	r0, sp, #480	; 0x1e0
 80158f8:	f7f8 f94a 	bl	800db90 <m_dcm2q_eml>
 80158fc:	ab46      	add	r3, sp, #280	; 0x118
 80158fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015900:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8015904:	eddf 7aad 	vldr	s15, [pc, #692]	; 8015bbc <m_kalman_3gyro.isra.9.constprop.47+0x3d1c>
 8015908:	eef0 6a67 	vmov.f32	s13, s15
 801590c:	eeb0 6a67 	vmov.f32	s12, s15
 8015910:	ed96 5a06 	vldr	s10, [r6, #24]
 8015914:	edd6 5a07 	vldr	s11, [r6, #28]
 8015918:	ed96 7a08 	vldr	s14, [r6, #32]
 801591c:	3624      	adds	r6, #36	; 0x24
 801591e:	42ae      	cmp	r6, r5
 8015920:	ee36 6a05 	vadd.f32	s12, s12, s10
 8015924:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8015928:	ee77 7a87 	vadd.f32	s15, s15, s14
 801592c:	d1f0      	bne.n	8015910 <m_kalman_3gyro.isra.9.constprop.47+0x3a70>
 801592e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8015932:	eec6 5a07 	vdiv.f32	s11, s12, s14
 8015936:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801593a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801593e:	eef4 eaec 	vcmpe.f32	s29, s25
 8015942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015946:	edcd 5a35 	vstr	s11, [sp, #212]	; 0xd4
 801594a:	ed8d 6a36 	vstr	s12, [sp, #216]	; 0xd8
 801594e:	edcd 6a37 	vstr	s13, [sp, #220]	; 0xdc
 8015952:	dd05      	ble.n	8015960 <m_kalman_3gyro.isra.9.constprop.47+0x3ac0>
 8015954:	eeb4 dae9 	vcmpe.f32	s26, s19
 8015958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801595c:	f73e a89c 	bgt.w	8013a98 <m_kalman_3gyro.isra.9.constprop.47+0x1bf8>
 8015960:	2301      	movs	r3, #1
 8015962:	f88a 3202 	strb.w	r3, [sl, #514]	; 0x202
 8015966:	f88a 3203 	strb.w	r3, [sl, #515]	; 0x203
 801596a:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 801596e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015970:	edd3 7a00 	vldr	s15, [r3]
 8015974:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8015978:	ee67 7a87 	vmul.f32	s15, s15, s14
 801597c:	eef4 7ae8 	vcmpe.f32	s15, s17
 8015980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015984:	f2c0 81a9 	blt.w	8015cda <m_kalman_3gyro.isra.9.constprop.47+0x3e3a>
 8015988:	f89a 38a4 	ldrb.w	r3, [sl, #2212]	; 0x8a4
 801598c:	2b00      	cmp	r3, #0
 801598e:	f000 818d 	beq.w	8015cac <m_kalman_3gyro.isra.9.constprop.47+0x3e0c>
 8015992:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8015996:	edd3 7a06 	vldr	s15, [r3, #24]
 801599a:	ed93 7a07 	vldr	s14, [r3, #28]
 801599e:	edd3 6a08 	vldr	s13, [r3, #32]
 80159a2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80159a6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80159aa:	ee27 7a06 	vmul.f32	s14, s14, s12
 80159ae:	ee66 6a86 	vmul.f32	s13, s13, s12
 80159b2:	edc3 7a06 	vstr	s15, [r3, #24]
 80159b6:	ed83 7a07 	vstr	s14, [r3, #28]
 80159ba:	edc3 6a08 	vstr	s13, [r3, #32]
 80159be:	f8ba 38a6 	ldrh.w	r3, [sl, #2214]	; 0x8a6
 80159c2:	3301      	adds	r3, #1
 80159c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80159c8:	d052      	beq.n	8015a70 <m_kalman_3gyro.isra.9.constprop.47+0x3bd0>
 80159ca:	2b31      	cmp	r3, #49	; 0x31
 80159cc:	f8aa 38a6 	strh.w	r3, [sl, #2214]	; 0x8a6
 80159d0:	d912      	bls.n	80159f8 <m_kalman_3gyro.isra.9.constprop.47+0x3b58>
 80159d2:	f89a 38a4 	ldrb.w	r3, [sl, #2212]	; 0x8a4
 80159d6:	b97b      	cbnz	r3, 80159f8 <m_kalman_3gyro.isra.9.constprop.47+0x3b58>
 80159d8:	ed9f 6a79 	vldr	s12, [pc, #484]	; 8015bc0 <m_kalman_3gyro.isra.9.constprop.47+0x3d20>
 80159dc:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 80159e0:	ee87 5a86 	vdiv.f32	s10, s15, s12
 80159e4:	eec7 5a06 	vdiv.f32	s11, s14, s12
 80159e8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80159ec:	ed83 5a06 	vstr	s10, [r3, #24]
 80159f0:	edc3 5a07 	vstr	s11, [r3, #28]
 80159f4:	edc3 7a08 	vstr	s15, [r3, #32]
 80159f8:	f8da 38a4 	ldr.w	r3, [sl, #2212]	; 0x8a4
 80159fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8015a00:	f5b3 0f8c 	cmp.w	r3, #4587520	; 0x460000
 8015a04:	f000 8149 	beq.w	8015c9a <m_kalman_3gyro.isra.9.constprop.47+0x3dfa>
 8015a08:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 8015a0c:	d06c      	beq.n	8015ae8 <m_kalman_3gyro.isra.9.constprop.47+0x3c48>
 8015a0e:	f89a 38a4 	ldrb.w	r3, [sl, #2212]	; 0x8a4
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d17a      	bne.n	8015b0c <m_kalman_3gyro.isra.9.constprop.47+0x3c6c>
 8015a16:	f89a 2030 	ldrb.w	r2, [sl, #48]	; 0x30
 8015a1a:	b372      	cbz	r2, 8015a7a <m_kalman_3gyro.isra.9.constprop.47+0x3bda>
 8015a1c:	ed9d 7a04 	vldr	s14, [sp, #16]
 8015a20:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8015a24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a2c:	d525      	bpl.n	8015a7a <m_kalman_3gyro.isra.9.constprop.47+0x3bda>
 8015a2e:	ed9a 7af1 	vldr	s14, [sl, #964]	; 0x3c4
 8015a32:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8015a36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a3e:	d51c      	bpl.n	8015a7a <m_kalman_3gyro.isra.9.constprop.47+0x3bda>
 8015a40:	f8da 13d8 	ldr.w	r1, [sl, #984]	; 0x3d8
 8015a44:	f8ca 1080 	str.w	r1, [sl, #128]	; 0x80
 8015a48:	f8da 13d4 	ldr.w	r1, [sl, #980]	; 0x3d4
 8015a4c:	f8da 23dc 	ldr.w	r2, [sl, #988]	; 0x3dc
 8015a50:	f8ca 107c 	str.w	r1, [sl, #124]	; 0x7c
 8015a54:	f8dd 16f8 	ldr.w	r1, [sp, #1784]	; 0x6f8
 8015a58:	f8ca 2084 	str.w	r2, [sl, #132]	; 0x84
 8015a5c:	2201      	movs	r2, #1
 8015a5e:	700a      	strb	r2, [r1, #0]
 8015a60:	f88a 3030 	strb.w	r3, [sl, #48]	; 0x30
 8015a64:	f7fe b92e 	b.w	8013cc4 <m_kalman_3gyro.isra.9.constprop.47+0x1e24>
 8015a68:	eef0 1a48 	vmov.f32	s3, s16
 8015a6c:	f7ff b83e 	b.w	8014aec <m_kalman_3gyro.isra.9.constprop.47+0x2c4c>
 8015a70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015a74:	f8aa 38a6 	strh.w	r3, [sl, #2214]	; 0x8a6
 8015a78:	e7ab      	b.n	80159d2 <m_kalman_3gyro.isra.9.constprop.47+0x3b32>
 8015a7a:	f8da 2454 	ldr.w	r2, [sl, #1108]	; 0x454
 8015a7e:	2a1e      	cmp	r2, #30
 8015a80:	d00e      	beq.n	8015aa0 <m_kalman_3gyro.isra.9.constprop.47+0x3c00>
 8015a82:	2a00      	cmp	r2, #0
 8015a84:	f102 0301 	add.w	r3, r2, #1
 8015a88:	dd03      	ble.n	8015a92 <m_kalman_3gyro.isra.9.constprop.47+0x3bf2>
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	bfd8      	it	le
 8015a8e:	f06f 4300 	mvnle.w	r3, #2147483648	; 0x80000000
 8015a92:	2200      	movs	r2, #0
 8015a94:	f8ca 3454 	str.w	r3, [sl, #1108]	; 0x454
 8015a98:	f8ca 245c 	str.w	r2, [sl, #1116]	; 0x45c
 8015a9c:	f7fe b912 	b.w	8013cc4 <m_kalman_3gyro.isra.9.constprop.47+0x1e24>
 8015aa0:	f8ba 38a6 	ldrh.w	r3, [sl, #2214]	; 0x8a6
 8015aa4:	2b27      	cmp	r3, #39	; 0x27
 8015aa6:	d873      	bhi.n	8015b90 <m_kalman_3gyro.isra.9.constprop.47+0x3cf0>
 8015aa8:	f8da 23d8 	ldr.w	r2, [sl, #984]	; 0x3d8
 8015aac:	f8ca 2080 	str.w	r2, [sl, #128]	; 0x80
 8015ab0:	f8da 23d4 	ldr.w	r2, [sl, #980]	; 0x3d4
 8015ab4:	f8da 33dc 	ldr.w	r3, [sl, #988]	; 0x3dc
 8015ab8:	f8ca 207c 	str.w	r2, [sl, #124]	; 0x7c
 8015abc:	f8dd 26f8 	ldr.w	r2, [sp, #1784]	; 0x6f8
 8015ac0:	f8ca 3084 	str.w	r3, [sl, #132]	; 0x84
 8015ac4:	2301      	movs	r3, #1
 8015ac6:	7013      	strb	r3, [r2, #0]
 8015ac8:	f8ba 38a8 	ldrh.w	r3, [sl, #2216]	; 0x8a8
 8015acc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015ad0:	3301      	adds	r3, #1
 8015ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015ad6:	bf08      	it	eq
 8015ad8:	4613      	moveq	r3, r2
 8015ada:	2201      	movs	r2, #1
 8015adc:	f8aa 38a8 	strh.w	r3, [sl, #2216]	; 0x8a8
 8015ae0:	f8ca 245c 	str.w	r2, [sl, #1116]	; 0x45c
 8015ae4:	f7fe b8ee 	b.w	8013cc4 <m_kalman_3gyro.isra.9.constprop.47+0x1e24>
 8015ae8:	2301      	movs	r3, #1
 8015aea:	f88a 38a4 	strb.w	r3, [sl, #2212]	; 0x8a4
 8015aee:	f60a 0398 	addw	r3, sl, #2200	; 0x898
 8015af2:	f8da 00a0 	ldr.w	r0, [sl, #160]	; 0xa0
 8015af6:	f8da 10a4 	ldr.w	r1, [sl, #164]	; 0xa4
 8015afa:	f8da 20a8 	ldr.w	r2, [sl, #168]	; 0xa8
 8015afe:	6018      	str	r0, [r3, #0]
 8015b00:	f60a 039c 	addw	r3, sl, #2204	; 0x89c
 8015b04:	6019      	str	r1, [r3, #0]
 8015b06:	f50a 630a 	add.w	r3, sl, #2208	; 0x8a0
 8015b0a:	601a      	str	r2, [r3, #0]
 8015b0c:	eddd 7a4a 	vldr	s15, [sp, #296]	; 0x128
 8015b10:	eddd 6a4b 	vldr	s13, [sp, #300]	; 0x12c
 8015b14:	ed9d 7a4c 	vldr	s14, [sp, #304]	; 0x130
 8015b18:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8015b1c:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8015b20:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8015b24:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8015b28:	ee37 7a07 	vadd.f32	s14, s14, s14
 8015b2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015b30:	ee27 7a07 	vmul.f32	s14, s14, s14
 8015b34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015b38:	ee17 0a90 	vmov	r0, s15
 8015b3c:	f7ea fd0c 	bl	8000558 <__aeabi_f2d>
 8015b40:	ec41 0b10 	vmov	d0, r0, r1
 8015b44:	f003 fb04 	bl	8019150 <sqrt>
 8015b48:	ec51 0b10 	vmov	r0, r1, d0
 8015b4c:	f7eb f850 	bl	8000bf0 <__aeabi_d2f>
 8015b50:	f7ea fd02 	bl	8000558 <__aeabi_f2d>
 8015b54:	a316      	add	r3, pc, #88	; (adr r3, 8015bb0 <m_kalman_3gyro.isra.9.constprop.47+0x3d10>)
 8015b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b5a:	f7ea ffc3 	bl	8000ae4 <__aeabi_dcmplt>
 8015b5e:	2800      	cmp	r0, #0
 8015b60:	d044      	beq.n	8015bec <m_kalman_3gyro.isra.9.constprop.47+0x3d4c>
 8015b62:	f50d 61da 	add.w	r1, sp, #1744	; 0x6d0
 8015b66:	2200      	movs	r2, #0
 8015b68:	2300      	movs	r3, #0
 8015b6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015b6e:	f7ea ffaf 	bl	8000ad0 <__aeabi_dcmpeq>
 8015b72:	bb38      	cbnz	r0, 8015bc4 <m_kalman_3gyro.isra.9.constprop.47+0x3d24>
 8015b74:	f88a 0202 	strb.w	r0, [sl, #514]	; 0x202
 8015b78:	f88a 0203 	strb.w	r0, [sl, #515]	; 0x203
 8015b7c:	f88a 0204 	strb.w	r0, [sl, #516]	; 0x204
 8015b80:	2301      	movs	r3, #1
 8015b82:	2200      	movs	r2, #0
 8015b84:	f8ca 3450 	str.w	r3, [sl, #1104]	; 0x450
 8015b88:	f8ca 245c 	str.w	r2, [sl, #1116]	; 0x45c
 8015b8c:	f7fe b89a 	b.w	8013cc4 <m_kalman_3gyro.isra.9.constprop.47+0x1e24>
 8015b90:	9a07      	ldr	r2, [sp, #28]
 8015b92:	6813      	ldr	r3, [r2, #0]
 8015b94:	f8ca 307c 	str.w	r3, [sl, #124]	; 0x7c
 8015b98:	6853      	ldr	r3, [r2, #4]
 8015b9a:	f8ca 3080 	str.w	r3, [sl, #128]	; 0x80
 8015b9e:	6892      	ldr	r2, [r2, #8]
 8015ba0:	f8ca 2084 	str.w	r2, [sl, #132]	; 0x84
 8015ba4:	f8dd 26f8 	ldr.w	r2, [sp, #1784]	; 0x6f8
 8015ba8:	2301      	movs	r3, #1
 8015baa:	7013      	strb	r3, [r2, #0]
 8015bac:	e78c      	b.n	8015ac8 <m_kalman_3gyro.isra.9.constprop.47+0x3c28>
 8015bae:	bf00      	nop
 8015bb0:	47ae147b 	.word	0x47ae147b
 8015bb4:	3f747ae1 	.word	0x3f747ae1
 8015bb8:	20001ab4 	.word	0x20001ab4
 8015bbc:	00000000 	.word	0x00000000
 8015bc0:	3fd55555 	.word	0x3fd55555
 8015bc4:	f8da 2450 	ldr.w	r2, [sl, #1104]	; 0x450
 8015bc8:	2a32      	cmp	r2, #50	; 0x32
 8015bca:	d01b      	beq.n	8015c04 <m_kalman_3gyro.isra.9.constprop.47+0x3d64>
 8015bcc:	2300      	movs	r3, #0
 8015bce:	2a00      	cmp	r2, #0
 8015bd0:	f88a 3202 	strb.w	r3, [sl, #514]	; 0x202
 8015bd4:	f88a 3203 	strb.w	r3, [sl, #515]	; 0x203
 8015bd8:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 8015bdc:	f102 0301 	add.w	r3, r2, #1
 8015be0:	ddcf      	ble.n	8015b82 <m_kalman_3gyro.isra.9.constprop.47+0x3ce2>
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	bfd8      	it	le
 8015be6:	f06f 4300 	mvnle.w	r3, #2147483648	; 0x80000000
 8015bea:	e7ca      	b.n	8015b82 <m_kalman_3gyro.isra.9.constprop.47+0x3ce2>
 8015bec:	f8ca 0450 	str.w	r0, [sl, #1104]	; 0x450
 8015bf0:	f88a 0202 	strb.w	r0, [sl, #514]	; 0x202
 8015bf4:	f88a 0203 	strb.w	r0, [sl, #515]	; 0x203
 8015bf8:	f88a 0204 	strb.w	r0, [sl, #516]	; 0x204
 8015bfc:	f8ca 045c 	str.w	r0, [sl, #1116]	; 0x45c
 8015c00:	f7fe b860 	b.w	8013cc4 <m_kalman_3gyro.isra.9.constprop.47+0x1e24>
 8015c04:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8015c08:	f8dd 16b8 	ldr.w	r1, [sp, #1720]	; 0x6b8
 8015c0c:	edd3 6a06 	vldr	s13, [r3, #24]
 8015c10:	f8da 245c 	ldr.w	r2, [sl, #1116]	; 0x45c
 8015c14:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8015c18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015c1c:	2301      	movs	r3, #1
 8015c1e:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8015c22:	ed81 7a06 	vstr	s14, [r1, #24]
 8015c26:	f88a 3202 	strb.w	r3, [sl, #514]	; 0x202
 8015c2a:	edd1 6a07 	vldr	s13, [r1, #28]
 8015c2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015c32:	ed81 7a07 	vstr	s14, [r1, #28]
 8015c36:	f88a 3203 	strb.w	r3, [sl, #515]	; 0x203
 8015c3a:	edd1 6a08 	vldr	s13, [r1, #32]
 8015c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015c42:	ed81 7a08 	vstr	s14, [r1, #32]
 8015c46:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 8015c4a:	d014      	beq.n	8015c76 <m_kalman_3gyro.isra.9.constprop.47+0x3dd6>
 8015c4c:	2a00      	cmp	r2, #0
 8015c4e:	f102 0301 	add.w	r3, r2, #1
 8015c52:	dd03      	ble.n	8015c5c <m_kalman_3gyro.isra.9.constprop.47+0x3dbc>
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	bfd8      	it	le
 8015c58:	f06f 4300 	mvnle.w	r3, #2147483648	; 0x80000000
 8015c5c:	9935      	ldr	r1, [sp, #212]	; 0xd4
 8015c5e:	f8ca 345c 	str.w	r3, [sl, #1116]	; 0x45c
 8015c62:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8015c64:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8015c66:	f8ca 10a0 	str.w	r1, [sl, #160]	; 0xa0
 8015c6a:	f8ca 20a4 	str.w	r2, [sl, #164]	; 0xa4
 8015c6e:	f8ca 30a8 	str.w	r3, [sl, #168]	; 0xa8
 8015c72:	f7fe b827 	b.w	8013cc4 <m_kalman_3gyro.isra.9.constprop.47+0x1e24>
 8015c76:	f60a 0398 	addw	r3, sl, #2200	; 0x898
 8015c7a:	f8da 00a0 	ldr.w	r0, [sl, #160]	; 0xa0
 8015c7e:	f8da 10a4 	ldr.w	r1, [sl, #164]	; 0xa4
 8015c82:	f8da 20a8 	ldr.w	r2, [sl, #168]	; 0xa8
 8015c86:	6018      	str	r0, [r3, #0]
 8015c88:	f60a 039c 	addw	r3, sl, #2204	; 0x89c
 8015c8c:	6019      	str	r1, [r3, #0]
 8015c8e:	f50a 630a 	add.w	r3, sl, #2208	; 0x8a0
 8015c92:	601a      	str	r2, [r3, #0]
 8015c94:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8015c98:	e7e0      	b.n	8015c5c <m_kalman_3gyro.isra.9.constprop.47+0x3dbc>
 8015c9a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8015c9e:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
 8015ca2:	f8ca 3158 	str.w	r3, [sl, #344]	; 0x158
 8015ca6:	f8ca 3180 	str.w	r3, [sl, #384]	; 0x180
 8015caa:	e6b0      	b.n	8015a0e <m_kalman_3gyro.isra.9.constprop.47+0x3b6e>
 8015cac:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8015cb0:	edd3 7a06 	vldr	s15, [r3, #24]
 8015cb4:	ed93 7a07 	vldr	s14, [r3, #28]
 8015cb8:	edd3 6a08 	vldr	s13, [r3, #32]
 8015cbc:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8015cc0:	eec7 7a86 	vdiv.f32	s15, s15, s12
 8015cc4:	ee87 7a06 	vdiv.f32	s14, s14, s12
 8015cc8:	eec6 6a86 	vdiv.f32	s13, s13, s12
 8015ccc:	edc3 7a06 	vstr	s15, [r3, #24]
 8015cd0:	ed83 7a07 	vstr	s14, [r3, #28]
 8015cd4:	edc3 6a08 	vstr	s13, [r3, #32]
 8015cd8:	e671      	b.n	80159be <m_kalman_3gyro.isra.9.constprop.47+0x3b1e>
 8015cda:	eef4 eaec 	vcmpe.f32	s29, s25
 8015cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ce2:	dd52      	ble.n	8015d8a <m_kalman_3gyro.isra.9.constprop.47+0x3eea>
 8015ce4:	eeb4 dae9 	vcmpe.f32	s26, s19
 8015ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cec:	dd4d      	ble.n	8015d8a <m_kalman_3gyro.isra.9.constprop.47+0x3eea>
 8015cee:	eeb4 facc 	vcmpe.f32	s30, s24
 8015cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cf6:	dd48      	ble.n	8015d8a <m_kalman_3gyro.isra.9.constprop.47+0x3eea>
 8015cf8:	ed9d 7a04 	vldr	s14, [sp, #16]
 8015cfc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015d00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d08:	d53f      	bpl.n	8015d8a <m_kalman_3gyro.isra.9.constprop.47+0x3eea>
 8015d0a:	ee89 6a8d 	vdiv.f32	s12, s19, s26
 8015d0e:	eecc 6aae 	vdiv.f32	s13, s25, s29
 8015d12:	ee8c 7a0f 	vdiv.f32	s14, s24, s30
 8015d16:	ee76 6a86 	vadd.f32	s13, s13, s12
 8015d1a:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
 8015d1e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8015d22:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8015d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d2a:	d52e      	bpl.n	8015d8a <m_kalman_3gyro.isra.9.constprop.47+0x3eea>
 8015d2c:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8015d30:	f8dd 26b8 	ldr.w	r2, [sp, #1720]	; 0x6b8
 8015d34:	ed93 6a06 	vldr	s12, [r3, #24]
 8015d38:	edd3 6a07 	vldr	s13, [r3, #28]
 8015d3c:	ed93 7a08 	vldr	s14, [r3, #32]
 8015d40:	ee26 6a27 	vmul.f32	s12, s12, s15
 8015d44:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8015d48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015d4c:	2300      	movs	r3, #0
 8015d4e:	ed82 6a06 	vstr	s12, [r2, #24]
 8015d52:	edc2 6a07 	vstr	s13, [r2, #28]
 8015d56:	edc2 7a08 	vstr	s15, [r2, #32]
 8015d5a:	f8aa 38a6 	strh.w	r3, [sl, #2214]	; 0x8a6
 8015d5e:	e656      	b.n	8015a0e <m_kalman_3gyro.isra.9.constprop.47+0x3b6e>
 8015d60:	2301      	movs	r3, #1
 8015d62:	f7fd bf8d 	b.w	8013c80 <m_kalman_3gyro.isra.9.constprop.47+0x1de0>
 8015d66:	f89a 38ad 	ldrb.w	r3, [sl, #2221]	; 0x8ad
 8015d6a:	b343      	cbz	r3, 8015dbe <m_kalman_3gyro.isra.9.constprop.47+0x3f1e>
 8015d6c:	3b01      	subs	r3, #1
 8015d6e:	f88a 38ad 	strb.w	r3, [sl, #2221]	; 0x8ad
 8015d72:	f88a 01fc 	strb.w	r0, [sl, #508]	; 0x1fc
 8015d76:	f88a 01fd 	strb.w	r0, [sl, #509]	; 0x1fd
 8015d7a:	f88a 01fe 	strb.w	r0, [sl, #510]	; 0x1fe
 8015d7e:	f88a 0205 	strb.w	r0, [sl, #517]	; 0x205
 8015d82:	f88a 0207 	strb.w	r0, [sl, #519]	; 0x207
 8015d86:	f7fe ba51 	b.w	801422c <m_kalman_3gyro.isra.9.constprop.47+0x238c>
 8015d8a:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8015d8e:	f8dd 26b8 	ldr.w	r2, [sp, #1720]	; 0x6b8
 8015d92:	edd3 6a06 	vldr	s13, [r3, #24]
 8015d96:	ed93 7a07 	vldr	s14, [r3, #28]
 8015d9a:	edd3 7a08 	vldr	s15, [r3, #32]
 8015d9e:	ee66 6a8a 	vmul.f32	s13, s13, s20
 8015da2:	ee27 7a0a 	vmul.f32	s14, s14, s20
 8015da6:	ee27 aa8a 	vmul.f32	s20, s15, s20
 8015daa:	2300      	movs	r3, #0
 8015dac:	edc2 6a06 	vstr	s13, [r2, #24]
 8015db0:	ed82 7a07 	vstr	s14, [r2, #28]
 8015db4:	ed82 aa08 	vstr	s20, [r2, #32]
 8015db8:	f8aa 38a6 	strh.w	r3, [sl, #2214]	; 0x8a6
 8015dbc:	e627      	b.n	8015a0e <m_kalman_3gyro.isra.9.constprop.47+0x3b6e>
 8015dbe:	2d00      	cmp	r5, #0
 8015dc0:	f47f ab98 	bne.w	80154f4 <m_kalman_3gyro.isra.9.constprop.47+0x3654>
 8015dc4:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8015dc8:	edd3 6a00 	vldr	s13, [r3]
 8015dcc:	ed93 7a01 	vldr	s14, [r3, #4]
 8015dd0:	edd3 7a02 	vldr	s15, [r3, #8]
 8015dd4:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8015dd8:	ee66 6a86 	vmul.f32	s13, s13, s12
 8015ddc:	ee27 7a06 	vmul.f32	s14, s14, s12
 8015de0:	ee67 7a86 	vmul.f32	s15, s15, s12
 8015de4:	edc3 6a00 	vstr	s13, [r3]
 8015de8:	ed83 7a01 	vstr	s14, [r3, #4]
 8015dec:	edc3 7a02 	vstr	s15, [r3, #8]
 8015df0:	f7fe ba1c 	b.w	801422c <m_kalman_3gyro.isra.9.constprop.47+0x238c>
 8015df4:	eeb0 6a48 	vmov.f32	s12, s16
 8015df8:	f7fe be90 	b.w	8014b1c <m_kalman_3gyro.isra.9.constprop.47+0x2c7c>
 8015dfc:	2000      	movs	r0, #0
 8015dfe:	2100      	movs	r1, #0
 8015e00:	f7ff b82c 	b.w	8014e5c <m_kalman_3gyro.isra.9.constprop.47+0x2fbc>
 8015e04:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8015e08:	ad4e      	add	r5, sp, #312	; 0x138
 8015e0a:	af46      	add	r7, sp, #280	; 0x118
 8015e0c:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8015e10:	eeb1 9a49 	vneg.f32	s18, s18
 8015e14:	eef1 8a68 	vneg.f32	s17, s17
 8015e18:	eeb1 8a48 	vneg.f32	s16, s16
 8015e1c:	4628      	mov	r0, r5
 8015e1e:	4632      	mov	r2, r6
 8015e20:	4639      	mov	r1, r7
 8015e22:	ed85 9a00 	vstr	s18, [r5]
 8015e26:	edc5 8a01 	vstr	s17, [r5, #4]
 8015e2a:	ed85 8a02 	vstr	s16, [r5, #8]
 8015e2e:	60ec      	str	r4, [r5, #12]
 8015e30:	f7f7 fdde 	bl	800d9f0 <m_qmult_eml>
 8015e34:	ed8d 9a46 	vstr	s18, [sp, #280]	; 0x118
 8015e38:	edcd 8a47 	vstr	s17, [sp, #284]	; 0x11c
 8015e3c:	ed8d 8a48 	vstr	s16, [sp, #288]	; 0x120
 8015e40:	9449      	str	r4, [sp, #292]	; 0x124
 8015e42:	ab46      	add	r3, sp, #280	; 0x118
 8015e44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015e46:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8015e4a:	ed95 7a00 	vldr	s14, [r5]
 8015e4e:	ed95 6a01 	vldr	s12, [r5, #4]
 8015e52:	edd5 7a02 	vldr	s15, [r5, #8]
 8015e56:	edd5 6a03 	vldr	s13, [r5, #12]
 8015e5a:	ee27 7a07 	vmul.f32	s14, s14, s14
 8015e5e:	ee26 6a06 	vmul.f32	s12, s12, s12
 8015e62:	f7ff b846 	b.w	8014ef2 <m_kalman_3gyro.isra.9.constprop.47+0x3052>
 8015e66:	eeb0 ca48 	vmov.f32	s24, s16
 8015e6a:	f7fe be1b 	b.w	8014aa4 <m_kalman_3gyro.isra.9.constprop.47+0x2c04>
 8015e6e:	eeb0 6a48 	vmov.f32	s12, s16
 8015e72:	f7fe bf95 	b.w	8014da0 <m_kalman_3gyro.isra.9.constprop.47+0x2f00>
 8015e76:	ac81      	add	r4, sp, #516	; 0x204
 8015e78:	e572      	b.n	8015960 <m_kalman_3gyro.isra.9.constprop.47+0x3ac0>
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	f43d af10 	beq.w	8013ca0 <m_kalman_3gyro.isra.9.constprop.47+0x1e00>
 8015e80:	f8da 2450 	ldr.w	r2, [sl, #1104]	; 0x450
 8015e84:	2a0a      	cmp	r2, #10
 8015e86:	f47f aaf2 	bne.w	801546e <m_kalman_3gyro.isra.9.constprop.47+0x35ce>
 8015e8a:	9907      	ldr	r1, [sp, #28]
 8015e8c:	f88a 3202 	strb.w	r3, [sl, #514]	; 0x202
 8015e90:	f88a 3203 	strb.w	r3, [sl, #515]	; 0x203
 8015e94:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 8015e98:	680a      	ldr	r2, [r1, #0]
 8015e9a:	f8ca 207c 	str.w	r2, [sl, #124]	; 0x7c
 8015e9e:	684a      	ldr	r2, [r1, #4]
 8015ea0:	f8ca 2080 	str.w	r2, [sl, #128]	; 0x80
 8015ea4:	688a      	ldr	r2, [r1, #8]
 8015ea6:	f8ca 2084 	str.w	r2, [sl, #132]	; 0x84
 8015eaa:	f8dd 26f8 	ldr.w	r2, [sp, #1784]	; 0x6f8
 8015eae:	7013      	strb	r3, [r2, #0]
 8015eb0:	f8da 345c 	ldr.w	r3, [sl, #1116]	; 0x45c
 8015eb4:	f89a 2030 	ldrb.w	r2, [sl, #48]	; 0x30
 8015eb8:	3301      	adds	r3, #1
 8015eba:	f8ca 345c 	str.w	r3, [sl, #1116]	; 0x45c
 8015ebe:	2a00      	cmp	r2, #0
 8015ec0:	f43f ac0c 	beq.w	80156dc <m_kalman_3gyro.isra.9.constprop.47+0x383c>
 8015ec4:	f8da 107c 	ldr.w	r1, [sl, #124]	; 0x7c
 8015ec8:	f8da 2080 	ldr.w	r2, [sl, #128]	; 0x80
 8015ecc:	f8ca 10a0 	str.w	r1, [sl, #160]	; 0xa0
 8015ed0:	f8ca 20a4 	str.w	r2, [sl, #164]	; 0xa4
 8015ed4:	f8da 1084 	ldr.w	r1, [sl, #132]	; 0x84
 8015ed8:	f8ca 10a8 	str.w	r1, [sl, #168]	; 0xa8
 8015edc:	2200      	movs	r2, #0
 8015ede:	f88a 2030 	strb.w	r2, [sl, #48]	; 0x30
 8015ee2:	f7ff bbfb 	b.w	80156dc <m_kalman_3gyro.isra.9.constprop.47+0x383c>
 8015ee6:	bf00      	nop

08015ee8 <SpacePointAlgorithm.isra.10>:
 8015ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015eec:	ed2d 8b10 	vpush	{d8-d15}
 8015ef0:	b0bb      	sub	sp, #236	; 0xec
 8015ef2:	f8df c408 	ldr.w	ip, [pc, #1032]	; 80162fc <SpacePointAlgorithm.isra.10+0x414>
 8015ef6:	f89d 5160 	ldrb.w	r5, [sp, #352]	; 0x160
 8015efa:	9515      	str	r5, [sp, #84]	; 0x54
 8015efc:	f89d 5168 	ldrb.w	r5, [sp, #360]	; 0x168
 8015f00:	9516      	str	r5, [sp, #88]	; 0x58
 8015f02:	f89d 516c 	ldrb.w	r5, [sp, #364]	; 0x16c
 8015f06:	9517      	str	r5, [sp, #92]	; 0x5c
 8015f08:	f89d 5170 	ldrb.w	r5, [sp, #368]	; 0x170
 8015f0c:	9518      	str	r5, [sp, #96]	; 0x60
 8015f0e:	4682      	mov	sl, r0
 8015f10:	4689      	mov	r9, r1
 8015f12:	4693      	mov	fp, r2
 8015f14:	461d      	mov	r5, r3
 8015f16:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015f1a:	f10d 0e7c 	add.w	lr, sp, #124	; 0x7c
 8015f1e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015f22:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8015f26:	9e69      	ldr	r6, [sp, #420]	; 0x1a4
 8015f28:	ed8d 1a19 	vstr	s2, [sp, #100]	; 0x64
 8015f2c:	e88e 0003 	stmia.w	lr, {r0, r1}
 8015f30:	e9dd 0156 	ldrd	r0, r1, [sp, #344]	; 0x158
 8015f34:	eeb0 ea40 	vmov.f32	s28, s0
 8015f38:	eeb0 8a60 	vmov.f32	s16, s1
 8015f3c:	eeb0 fa61 	vmov.f32	s30, s3
 8015f40:	eeb0 aa42 	vmov.f32	s20, s4
 8015f44:	eef0 aa62 	vmov.f32	s21, s5
 8015f48:	eeb0 ba43 	vmov.f32	s22, s6
 8015f4c:	eef0 ba63 	vmov.f32	s23, s7
 8015f50:	f7ea fe4e 	bl	8000bf0 <__aeabi_d2f>
 8015f54:	f896 38cc 	ldrb.w	r3, [r6, #2252]	; 0x8cc
 8015f58:	9c54      	ldr	r4, [sp, #336]	; 0x150
 8015f5a:	f89d 8164 	ldrb.w	r8, [sp, #356]	; 0x164
 8015f5e:	9f64      	ldr	r7, [sp, #400]	; 0x190
 8015f60:	ee0d 0a90 	vmov	s27, r0
 8015f64:	b923      	cbnz	r3, 8015f70 <SpacePointAlgorithm.isra.10+0x88>
 8015f66:	2200      	movs	r2, #0
 8015f68:	2301      	movs	r3, #1
 8015f6a:	6032      	str	r2, [r6, #0]
 8015f6c:	f886 38cc 	strb.w	r3, [r6, #2252]	; 0x8cc
 8015f70:	eddf 7ad7 	vldr	s15, [pc, #860]	; 80162d0 <SpacePointAlgorithm.isra.10+0x3e8>
 8015f74:	ee87 7a8e 	vdiv.f32	s14, s15, s28
 8015f78:	ee17 0a10 	vmov	r0, s14
 8015f7c:	f7ea faec 	bl	8000558 <__aeabi_f2d>
 8015f80:	ec41 0b10 	vmov	d0, r0, r1
 8015f84:	f003 f8e4 	bl	8019150 <sqrt>
 8015f88:	ec51 0b10 	vmov	r0, r1, d0
 8015f8c:	f7ea fe30 	bl	8000bf0 <__aeabi_d2f>
 8015f90:	ed9f 6ad0 	vldr	s12, [pc, #832]	; 80162d4 <SpacePointAlgorithm.isra.10+0x3ec>
 8015f94:	ed95 7a01 	vldr	s14, [r5, #4]
 8015f98:	edd5 6a00 	vldr	s13, [r5]
 8015f9c:	edd5 7a02 	vldr	s15, [r5, #8]
 8015fa0:	eddf 5acd 	vldr	s11, [pc, #820]	; 80162d8 <SpacePointAlgorithm.isra.10+0x3f0>
 8015fa4:	ed9d 9a20 	vldr	s18, [sp, #128]	; 0x80
 8015fa8:	ed9d da21 	vldr	s26, [sp, #132]	; 0x84
 8015fac:	eddd ca22 	vldr	s25, [sp, #136]	; 0x88
 8015fb0:	ed9d ca23 	vldr	s24, [sp, #140]	; 0x8c
 8015fb4:	ee27 7a06 	vmul.f32	s14, s14, s12
 8015fb8:	ee08 0a90 	vmov	s17, r0
 8015fbc:	ee66 6a86 	vmul.f32	s13, s13, s12
 8015fc0:	ee67 7a86 	vmul.f32	s15, s15, s12
 8015fc4:	ed85 7a01 	vstr	s14, [r5, #4]
 8015fc8:	ed9d 7a24 	vldr	s14, [sp, #144]	; 0x90
 8015fcc:	edc5 6a00 	vstr	s13, [r5]
 8015fd0:	eec5 eaa8 	vdiv.f32	s29, s11, s17
 8015fd4:	ee28 9a89 	vmul.f32	s18, s17, s18
 8015fd8:	ee28 da8d 	vmul.f32	s26, s17, s26
 8015fdc:	ee68 caac 	vmul.f32	s25, s17, s25
 8015fe0:	ee28 ca8c 	vmul.f32	s24, s17, s24
 8015fe4:	edc5 7a02 	vstr	s15, [r5, #8]
 8015fe8:	ee68 8a87 	vmul.f32	s17, s17, s14
 8015fec:	f1b8 0f04 	cmp.w	r8, #4
 8015ff0:	d806      	bhi.n	8016000 <SpacePointAlgorithm.isra.10+0x118>
 8015ff2:	e8df f018 	tbh	[pc, r8, lsl #1]
 8015ff6:	0155      	.short	0x0155
 8015ff8:	014a0162 	.word	0x014a0162
 8015ffc:	012a0005 	.word	0x012a0005
 8016000:	eddf 7ab6 	vldr	s15, [pc, #728]	; 80162dc <SpacePointAlgorithm.isra.10+0x3f4>
 8016004:	eddf fab6 	vldr	s31, [pc, #728]	; 80162e0 <SpacePointAlgorithm.isra.10+0x3f8>
 8016008:	ee6d aaaa 	vmul.f32	s21, s27, s21
 801600c:	ee2d ba8b 	vmul.f32	s22, s27, s22
 8016010:	ee6d baab 	vmul.f32	s23, s27, s23
 8016014:	ee6a aaa7 	vmul.f32	s21, s21, s15
 8016018:	ee2b ba27 	vmul.f32	s22, s22, s15
 801601c:	ee6b baa7 	vmul.f32	s23, s23, s15
 8016020:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 8016024:	2200      	movs	r2, #0
 8016026:	2300      	movs	r3, #0
 8016028:	e9dd 015e 	ldrd	r0, r1, [sp, #376]	; 0x178
 801602c:	f7ea fd50 	bl	8000ad0 <__aeabi_dcmpeq>
 8016030:	edd6 7a00 	vldr	s15, [r6]
 8016034:	b168      	cbz	r0, 8016052 <SpacePointAlgorithm.isra.10+0x16a>
 8016036:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801603a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801603e:	f340 8109 	ble.w	8016254 <SpacePointAlgorithm.isra.10+0x36c>
 8016042:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8016046:	eef4 7ac7 	vcmpe.f32	s15, s14
 801604a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801604e:	f140 8101 	bpl.w	8016254 <SpacePointAlgorithm.isra.10+0x36c>
 8016052:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8016056:	ee77 7a86 	vadd.f32	s15, s15, s12
 801605a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 801605e:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8016062:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 80162e4 <SpacePointAlgorithm.isra.10+0x3fc>
 8016066:	edc6 7a00 	vstr	s15, [r6]
 801606a:	eeb4 8ac7 	vcmpe.f32	s16, s14
 801606e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016072:	bf54      	ite	pl
 8016074:	eec6 5a08 	vdivpl.f32	s11, s12, s16
 8016078:	eeb0 8a47 	vmovmi.f32	s16, s14
 801607c:	ee28 7a0a 	vmul.f32	s14, s16, s20
 8016080:	eddf 7a99 	vldr	s15, [pc, #612]	; 80162e8 <SpacePointAlgorithm.isra.10+0x400>
 8016084:	bf48      	it	mi
 8016086:	eef1 5a04 	vmovmi.f32	s11, #20	; 0x40a00000  5.0
 801608a:	ee6e eaa5 	vmul.f32	s29, s29, s11
 801608e:	ee28 9a09 	vmul.f32	s18, s16, s18
 8016092:	ee28 da0d 	vmul.f32	s26, s16, s26
 8016096:	ee27 ca0c 	vmul.f32	s24, s14, s24
 801609a:	ee69 9aac 	vmul.f32	s19, s19, s25
 801609e:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80160a2:	edd4 5a09 	vldr	s11, [r4, #36]	; 0x24
 80160a6:	edd9 7a00 	vldr	s15, [r9]
 80160aa:	ed94 6a00 	vldr	s12, [r4]
 80160ae:	ed94 7a01 	vldr	s14, [r4, #4]
 80160b2:	edd9 4a01 	vldr	s9, [r9, #4]
 80160b6:	edd9 3a02 	vldr	s7, [r9, #8]
 80160ba:	ed94 5a0a 	vldr	s10, [r4, #40]	; 0x28
 80160be:	ed94 3a05 	vldr	s6, [r4, #20]
 80160c2:	ed9f 4a8a 	vldr	s8, [pc, #552]	; 80162ec <SpacePointAlgorithm.isra.10+0x404>
 80160c6:	ed8d 9a2e 	vstr	s18, [sp, #184]	; 0xb8
 80160ca:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80160ce:	edd4 5a02 	vldr	s11, [r4, #8]
 80160d2:	ed8d 9a2f 	vstr	s18, [sp, #188]	; 0xbc
 80160d6:	ee27 6a86 	vmul.f32	s12, s15, s12
 80160da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80160de:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80160e2:	edd4 5a0b 	vldr	s11, [r4, #44]	; 0x2c
 80160e6:	ed8d 9a30 	vstr	s18, [sp, #192]	; 0xc0
 80160ea:	ee34 5ac5 	vsub.f32	s10, s9, s10
 80160ee:	ee73 5ae5 	vsub.f32	s11, s7, s11
 80160f2:	edd4 4a03 	vldr	s9, [r4, #12]
 80160f6:	edd4 3a04 	vldr	s7, [r4, #16]
 80160fa:	ed8d da31 	vstr	s26, [sp, #196]	; 0xc4
 80160fe:	ee65 3a23 	vmul.f32	s7, s10, s7
 8016102:	ee65 4a24 	vmul.f32	s9, s10, s9
 8016106:	ee36 6a04 	vadd.f32	s12, s12, s8
 801610a:	ee25 5a03 	vmul.f32	s10, s10, s6
 801610e:	ee77 7a84 	vadd.f32	s15, s15, s8
 8016112:	ee37 7a04 	vadd.f32	s14, s14, s8
 8016116:	ee36 6a24 	vadd.f32	s12, s12, s9
 801611a:	ed94 4a06 	vldr	s8, [r4, #24]
 801611e:	edd4 4a07 	vldr	s9, [r4, #28]
 8016122:	ed8d da32 	vstr	s26, [sp, #200]	; 0xc8
 8016126:	ee77 7a85 	vadd.f32	s15, s15, s10
 801612a:	ed94 5a08 	vldr	s10, [r4, #32]
 801612e:	ed8d da33 	vstr	s26, [sp, #204]	; 0xcc
 8016132:	ee25 4a84 	vmul.f32	s8, s11, s8
 8016136:	ee65 4aa4 	vmul.f32	s9, s11, s9
 801613a:	ee37 7a23 	vadd.f32	s14, s14, s7
 801613e:	ee65 5a85 	vmul.f32	s11, s11, s10
 8016142:	eeb7 5a08 	vmov.f32	s10, #120	; 0x3fc00000  1.5
 8016146:	ee37 7a24 	vadd.f32	s14, s14, s9
 801614a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801614e:	ee36 6a04 	vadd.f32	s12, s12, s8
 8016152:	ee2a aa05 	vmul.f32	s20, s20, s10
 8016156:	ed8d 6a1c 	vstr	s12, [sp, #112]	; 0x70
 801615a:	ed8d 7a1d 	vstr	s14, [sp, #116]	; 0x74
 801615e:	edcd 7a1e 	vstr	s15, [sp, #120]	; 0x78
 8016162:	edcd 9a34 	vstr	s19, [sp, #208]	; 0xd0
 8016166:	edcd 9a35 	vstr	s19, [sp, #212]	; 0xd4
 801616a:	edcd 9a36 	vstr	s19, [sp, #216]	; 0xd8
 801616e:	ed8d ca37 	vstr	s24, [sp, #220]	; 0xdc
 8016172:	edcd 8a38 	vstr	s17, [sp, #224]	; 0xe0
 8016176:	edcd ea25 	vstr	s29, [sp, #148]	; 0x94
 801617a:	edcd ea26 	vstr	s29, [sp, #152]	; 0x98
 801617e:	ed8d aa39 	vstr	s20, [sp, #228]	; 0xe4
 8016182:	edcd ea27 	vstr	s29, [sp, #156]	; 0x9c
 8016186:	ed9d 7b60 	vldr	d7, [sp, #384]	; 0x180
 801618a:	9612      	str	r6, [sp, #72]	; 0x48
 801618c:	9e68      	ldr	r6, [sp, #416]	; 0x1a0
 801618e:	9611      	str	r6, [sp, #68]	; 0x44
 8016190:	9e67      	ldr	r6, [sp, #412]	; 0x19c
 8016192:	9610      	str	r6, [sp, #64]	; 0x40
 8016194:	9e66      	ldr	r6, [sp, #408]	; 0x198
 8016196:	f8cd 800c 	str.w	r8, [sp, #12]
 801619a:	ed8d 7b08 	vstr	d7, [sp, #32]
 801619e:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 80161a2:	960f      	str	r6, [sp, #60]	; 0x3c
 80161a4:	ed9d 7b5e 	vldr	d7, [sp, #376]	; 0x178
 80161a8:	9e63      	ldr	r6, [sp, #396]	; 0x18c
 80161aa:	f88d 8068 	strb.w	r8, [sp, #104]	; 0x68
 80161ae:	462b      	mov	r3, r5
 80161b0:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
 80161b4:	960c      	str	r6, [sp, #48]	; 0x30
 80161b6:	ad1a      	add	r5, sp, #104	; 0x68
 80161b8:	9e62      	ldr	r6, [sp, #392]	; 0x188
 80161ba:	9915      	ldr	r1, [sp, #84]	; 0x54
 80161bc:	9504      	str	r5, [sp, #16]
 80161be:	4650      	mov	r0, sl
 80161c0:	ac25      	add	r4, sp, #148	; 0x94
 80161c2:	f88d 8069 	strb.w	r8, [sp, #105]	; 0x69
 80161c6:	960b      	str	r6, [sp, #44]	; 0x2c
 80161c8:	f89d 8060 	ldrb.w	r8, [sp, #96]	; 0x60
 80161cc:	9e55      	ldr	r6, [sp, #340]	; 0x154
 80161ce:	f8df e130 	ldr.w	lr, [pc, #304]	; 8016300 <SpacePointAlgorithm.isra.10+0x418>
 80161d2:	f8df c130 	ldr.w	ip, [pc, #304]	; 8016304 <SpacePointAlgorithm.isra.10+0x41c>
 80161d6:	9102      	str	r1, [sp, #8]
 80161d8:	f10d 0ab8 	add.w	sl, sp, #184	; 0xb8
 80161dc:	ad1b      	add	r5, sp, #108	; 0x6c
 80161de:	465a      	mov	r2, fp
 80161e0:	ed8d 7b06 	vstr	d7, [sp, #24]
 80161e4:	eeb0 2a6d 	vmov.f32	s4, s27
 80161e8:	eef0 1a4e 	vmov.f32	s3, s28
 80161ec:	eeb0 1a6b 	vmov.f32	s2, s23
 80161f0:	eef0 0a4b 	vmov.f32	s1, s22
 80161f4:	eeb0 0a6a 	vmov.f32	s0, s21
 80161f8:	a91c      	add	r1, sp, #112	; 0x70
 80161fa:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8016308 <SpacePointAlgorithm.isra.10+0x420>
 80161fe:	9401      	str	r4, [sp, #4]
 8016200:	f8cd a000 	str.w	sl, [sp]
 8016204:	edcd fa28 	vstr	s31, [sp, #160]	; 0xa0
 8016208:	edcd fa29 	vstr	s31, [sp, #164]	; 0xa4
 801620c:	edcd fa2a 	vstr	s31, [sp, #168]	; 0xa8
 8016210:	f88d 806a 	strb.w	r8, [sp, #106]	; 0x6a
 8016214:	970e      	str	r7, [sp, #56]	; 0x38
 8016216:	960a      	str	r6, [sp, #40]	; 0x28
 8016218:	950d      	str	r5, [sp, #52]	; 0x34
 801621a:	f8cd e0ac 	str.w	lr, [sp, #172]	; 0xac
 801621e:	f8cd c0b0 	str.w	ip, [sp, #176]	; 0xb0
 8016222:	f8cd 90b4 	str.w	r9, [sp, #180]	; 0xb4
 8016226:	f7fb fe3b 	bl	8011ea0 <m_kalman_3gyro.isra.9.constprop.47>
 801622a:	4621      	mov	r1, r4
 801622c:	9862      	ldr	r0, [sp, #392]	; 0x188
 801622e:	f7f7 fc47 	bl	800dac0 <m_q2dcm_eml>
 8016232:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	6013      	str	r3, [r2, #0]
 8016238:	693b      	ldr	r3, [r7, #16]
 801623a:	6053      	str	r3, [r2, #4]
 801623c:	697b      	ldr	r3, [r7, #20]
 801623e:	6093      	str	r3, [r2, #8]
 8016240:	b03b      	add	sp, #236	; 0xec
 8016242:	ecbd 8b10 	vpop	{d8-d15}
 8016246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801624a:	eddf fa29 	vldr	s31, [pc, #164]	; 80162f0 <SpacePointAlgorithm.isra.10+0x408>
 801624e:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 8016252:	e6e7      	b.n	8016024 <SpacePointAlgorithm.isra.10+0x13c>
 8016254:	eddf 7a27 	vldr	s15, [pc, #156]	; 80162f4 <SpacePointAlgorithm.isra.10+0x40c>
 8016258:	eddd 6a19 	vldr	s13, [sp, #100]	; 0x64
 801625c:	ee3f fa27 	vadd.f32	s30, s30, s15
 8016260:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016264:	ee87 7a8f 	vdiv.f32	s14, s15, s30
 8016268:	2300      	movs	r3, #0
 801626a:	6033      	str	r3, [r6, #0]
 801626c:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80162e8 <SpacePointAlgorithm.isra.10+0x400>
 8016270:	ee29 9a26 	vmul.f32	s18, s18, s13
 8016274:	ee28 da0d 	vmul.f32	s26, s16, s26
 8016278:	ee69 9aac 	vmul.f32	s19, s19, s25
 801627c:	ee2a ca0c 	vmul.f32	s24, s20, s24
 8016280:	ee67 ea2e 	vmul.f32	s29, s14, s29
 8016284:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8016288:	e70b      	b.n	80160a2 <SpacePointAlgorithm.isra.10+0x1ba>
 801628a:	ee6a aaad 	vmul.f32	s21, s21, s27
 801628e:	ee2b ba2d 	vmul.f32	s22, s22, s27
 8016292:	ee6b baad 	vmul.f32	s23, s23, s27
 8016296:	eddf fa18 	vldr	s31, [pc, #96]	; 80162f8 <SpacePointAlgorithm.isra.10+0x410>
 801629a:	eef1 9a04 	vmov.f32	s19, #20	; 0x40a00000  5.0
 801629e:	e6c1      	b.n	8016024 <SpacePointAlgorithm.isra.10+0x13c>
 80162a0:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80162a4:	eeca aaa7 	vdiv.f32	s21, s21, s15
 80162a8:	ee8b ba27 	vdiv.f32	s22, s22, s15
 80162ac:	eecb baa7 	vdiv.f32	s23, s23, s15
 80162b0:	eddf fa0b 	vldr	s31, [pc, #44]	; 80162e0 <SpacePointAlgorithm.isra.10+0x3f8>
 80162b4:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 80162b8:	e6b4      	b.n	8016024 <SpacePointAlgorithm.isra.10+0x13c>
 80162ba:	ee6a aaad 	vmul.f32	s21, s21, s27
 80162be:	ee2b ba2d 	vmul.f32	s22, s22, s27
 80162c2:	ee6b baad 	vmul.f32	s23, s23, s27
 80162c6:	eddf fa0a 	vldr	s31, [pc, #40]	; 80162f0 <SpacePointAlgorithm.isra.10+0x408>
 80162ca:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 80162ce:	e6a9      	b.n	8016024 <SpacePointAlgorithm.isra.10+0x13c>
 80162d0:	3c03126f 	.word	0x3c03126f
 80162d4:	3c8efa35 	.word	0x3c8efa35
 80162d8:	3b656042 	.word	0x3b656042
 80162dc:	42c80000 	.word	0x42c80000
 80162e0:	3a83126f 	.word	0x3a83126f
 80162e4:	3e4ccccd 	.word	0x3e4ccccd
 80162e8:	3f333333 	.word	0x3f333333
 80162ec:	00000000 	.word	0x00000000
 80162f0:	3ac49ba6 	.word	0x3ac49ba6
 80162f4:	358637bd 	.word	0x358637bd
 80162f8:	3727c5ac 	.word	0x3727c5ac
 80162fc:	0801d730 	.word	0x0801d730
 8016300:	3b449ba6 	.word	0x3b449ba6
 8016304:	3c23d70a 	.word	0x3c23d70a
 8016308:	3a9d4952 	.word	0x3a9d4952

0801630c <iNemo_update_6X.constprop.45>:
 801630c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016310:	4ce3      	ldr	r4, [pc, #908]	; (80166a0 <iNemo_update_6X.constprop.45+0x394>)
 8016312:	f8df 83a0 	ldr.w	r8, [pc, #928]	; 80166b4 <iNemo_update_6X.constprop.45+0x3a8>
 8016316:	f994 33f4 	ldrsb.w	r3, [r4, #1012]	; 0x3f4
 801631a:	f994 23fc 	ldrsb.w	r2, [r4, #1020]	; 0x3fc
 801631e:	f994 1413 	ldrsb.w	r1, [r4, #1043]	; 0x413
 8016322:	ee05 3a90 	vmov	s11, r3
 8016326:	f994 33f5 	ldrsb.w	r3, [r4, #1013]	; 0x3f5
 801632a:	ee01 3a10 	vmov	s2, r3
 801632e:	f994 33f7 	ldrsb.w	r3, [r4, #1015]	; 0x3f7
 8016332:	ee01 3a90 	vmov	s3, r3
 8016336:	f994 33f8 	ldrsb.w	r3, [r4, #1016]	; 0x3f8
 801633a:	ee07 3a90 	vmov	s15, r3
 801633e:	f994 340f 	ldrsb.w	r3, [r4, #1039]	; 0x40f
 8016342:	ee06 3a90 	vmov	s13, r3
 8016346:	f994 3410 	ldrsb.w	r3, [r4, #1040]	; 0x410
 801634a:	ed2d 8b08 	vpush	{d8-d11}
 801634e:	ee0a 3a10 	vmov	s20, r3
 8016352:	f994 340c 	ldrsb.w	r3, [r4, #1036]	; 0x40c
 8016356:	ee07 3a10 	vmov	s14, r3
 801635a:	f994 33f6 	ldrsb.w	r3, [r4, #1014]	; 0x3f6
 801635e:	ee02 3a90 	vmov	s5, r3
 8016362:	f994 340d 	ldrsb.w	r3, [r4, #1037]	; 0x40d
 8016366:	ee08 3a90 	vmov	s17, r3
 801636a:	f994 33f9 	ldrsb.w	r3, [r4, #1017]	; 0x3f9
 801636e:	ee03 3a90 	vmov	s7, r3
 8016372:	f994 33fa 	ldrsb.w	r3, [r4, #1018]	; 0x3fa
 8016376:	ee09 3a10 	vmov	s18, r3
 801637a:	f994 33fb 	ldrsb.w	r3, [r4, #1019]	; 0x3fb
 801637e:	ee04 3a10 	vmov	s8, r3
 8016382:	f994 3411 	ldrsb.w	r3, [r4, #1041]	; 0x411
 8016386:	ee04 3a90 	vmov	s9, r3
 801638a:	f994 340e 	ldrsb.w	r3, [r4, #1038]	; 0x40e
 801638e:	f204 45c4 	addw	r5, r4, #1220	; 0x4c4
 8016392:	ed95 ba06 	vldr	s22, [r5, #24]
 8016396:	edd5 aa07 	vldr	s21, [r5, #28]
 801639a:	edd5 9a09 	vldr	s19, [r5, #36]	; 0x24
 801639e:	edd5 0a0a 	vldr	s1, [r5, #40]	; 0x28
 80163a2:	ed95 2a08 	vldr	s4, [r5, #32]
 80163a6:	ed95 3a0b 	vldr	s6, [r5, #44]	; 0x2c
 80163aa:	ee05 3a10 	vmov	s10, r3
 80163ae:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80163b2:	f994 3412 	ldrsb.w	r3, [r4, #1042]	; 0x412
 80163b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80163ba:	ee08 3a10 	vmov	s16, r3
 80163be:	ee67 7aaa 	vmul.f32	s15, s15, s21
 80163c2:	ee61 1a8b 	vmul.f32	s3, s3, s22
 80163c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80163ca:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 80163ce:	ee27 7a29 	vmul.f32	s14, s14, s19
 80163d2:	ee31 6aa7 	vadd.f32	s12, s3, s15
 80163d6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80163da:	eef8 7ac8 	vcvt.f32.s32	s15, s16
 80163de:	eeb8 aaca 	vcvt.f32.s32	s20, s20
 80163e2:	ee68 8aa0 	vmul.f32	s17, s17, s1
 80163e6:	ee66 6aa9 	vmul.f32	s13, s13, s19
 80163ea:	f994 3414 	ldrsb.w	r3, [r4, #1044]	; 0x414
 80163ee:	ee77 8a28 	vadd.f32	s17, s14, s17
 80163f2:	ee27 8aa9 	vmul.f32	s16, s15, s19
 80163f6:	ee07 1a10 	vmov	s14, r1
 80163fa:	ee07 2a90 	vmov	s15, r2
 80163fe:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8016402:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8016406:	ee2a aa20 	vmul.f32	s20, s20, s1
 801640a:	ee65 5a8b 	vmul.f32	s11, s11, s22
 801640e:	ee21 1a2a 	vmul.f32	s2, s2, s21
 8016412:	ee36 aa8a 	vadd.f32	s20, s13, s20
 8016416:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 801641a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 801641e:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8016422:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8016426:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 801642a:	ee07 3a90 	vmov	s15, r3
 801642e:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8016432:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8016436:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801643a:	ee29 9a0b 	vmul.f32	s18, s18, s22
 801643e:	ee24 4a2a 	vmul.f32	s8, s8, s21
 8016442:	ee75 5a81 	vadd.f32	s11, s11, s2
 8016446:	ee62 2a82 	vmul.f32	s5, s5, s4
 801644a:	ee63 3a82 	vmul.f32	s7, s7, s4
 801644e:	ee64 4a83 	vmul.f32	s9, s9, s6
 8016452:	ee25 5a03 	vmul.f32	s10, s10, s6
 8016456:	ee66 6aa0 	vmul.f32	s13, s13, s1
 801645a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801645e:	b0e5      	sub	sp, #404	; 0x194
 8016460:	af16      	add	r7, sp, #88	; 0x58
 8016462:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8016466:	ee36 6a23 	vadd.f32	s12, s12, s7
 801646a:	ee39 9a04 	vadd.f32	s18, s18, s8
 801646e:	ee27 7a02 	vmul.f32	s14, s14, s4
 8016472:	ee3a aa24 	vadd.f32	s20, s20, s9
 8016476:	ee78 8a85 	vadd.f32	s17, s17, s10
 801647a:	ee38 8a26 	vadd.f32	s16, s16, s13
 801647e:	ee67 7a83 	vmul.f32	s15, s15, s6
 8016482:	f898 200c 	ldrb.w	r2, [r8, #12]
 8016486:	2300      	movs	r3, #0
 8016488:	eef0 ba40 	vmov.f32	s23, s0
 801648c:	4681      	mov	r9, r0
 801648e:	eef1 aa65 	vneg.f32	s21, s11
 8016492:	ee39 9a07 	vadd.f32	s18, s18, s14
 8016496:	eeb1 ba46 	vneg.f32	s22, s12
 801649a:	eeb1 aa4a 	vneg.f32	s20, s20
 801649e:	eef1 8a68 	vneg.f32	s17, s17
 80164a2:	ee38 8a27 	vadd.f32	s16, s16, s15
 80164a6:	603b      	str	r3, [r7, #0]
 80164a8:	607b      	str	r3, [r7, #4]
 80164aa:	60bb      	str	r3, [r7, #8]
 80164ac:	2a00      	cmp	r2, #0
 80164ae:	f040 8107 	bne.w	80166c0 <iNemo_update_6X.constprop.45+0x3b4>
 80164b2:	f8df a204 	ldr.w	sl, [pc, #516]	; 80166b8 <iNemo_update_6X.constprop.45+0x3ac>
 80164b6:	f8df b204 	ldr.w	fp, [pc, #516]	; 80166bc <iNemo_update_6X.constprop.45+0x3b0>
 80164ba:	f894 25f5 	ldrb.w	r2, [r4, #1525]	; 0x5f5
 80164be:	f894 35f4 	ldrb.w	r3, [r4, #1524]	; 0x5f4
 80164c2:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 80164c4:	f8c5 1088 	str.w	r1, [r5, #136]	; 0x88
 80164c8:	ee09 2a90 	vmov	s19, r2
 80164cc:	4975      	ldr	r1, [pc, #468]	; (80166a4 <iNemo_update_6X.constprop.45+0x398>)
 80164ce:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 80164d0:	f8d5 6080 	ldr.w	r6, [r5, #128]	; 0x80
 80164d4:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
 80164d8:	f043 0302 	orr.w	r3, r3, #2
 80164dc:	22f8      	movs	r2, #248	; 0xf8
 80164de:	f8d5 e084 	ldr.w	lr, [r5, #132]	; 0x84
 80164e2:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
 80164e6:	f083 0301 	eor.w	r3, r3, #1
 80164ea:	188e      	adds	r6, r1, r2
 80164ec:	a826      	add	r0, sp, #152	; 0x98
 80164ee:	f884 35f4 	strb.w	r3, [r4, #1524]	; 0x5f4
 80164f2:	f8c5 e094 	str.w	lr, [r5, #148]	; 0x94
 80164f6:	f004 fd37 	bl	801af68 <memcpy>
 80164fa:	f506 7e9b 	add.w	lr, r6, #310	; 0x136
 80164fe:	6a30      	ldr	r0, [r6, #32]
 8016500:	f8cd e050 	str.w	lr, [sp, #80]	; 0x50
 8016504:	2300      	movs	r3, #0
 8016506:	f506 7c9a 	add.w	ip, r6, #308	; 0x134
 801650a:	f1a6 0e30 	sub.w	lr, r6, #48	; 0x30
 801650e:	f206 1235 	addw	r2, r6, #309	; 0x135
 8016512:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 8016516:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
 801651a:	9213      	str	r2, [sp, #76]	; 0x4c
 801651c:	9711      	str	r7, [sp, #68]	; 0x44
 801651e:	aa1d      	add	r2, sp, #116	; 0x74
 8016520:	632b      	str	r3, [r5, #48]	; 0x30
 8016522:	636b      	str	r3, [r5, #52]	; 0x34
 8016524:	63ab      	str	r3, [r5, #56]	; 0x38
 8016526:	4960      	ldr	r1, [pc, #384]	; (80166a8 <iNemo_update_6X.constprop.45+0x39c>)
 8016528:	f8cd a0ac 	str.w	sl, [sp, #172]	; 0xac
 801652c:	f10d 0a64 	add.w	sl, sp, #100	; 0x64
 8016530:	932a      	str	r3, [sp, #168]	; 0xa8
 8016532:	9210      	str	r2, [sp, #64]	; 0x40
 8016534:	ed8d ba2c 	vstr	s22, [sp, #176]	; 0xb0
 8016538:	edcd aa2d 	vstr	s21, [sp, #180]	; 0xb4
 801653c:	ed8d 9a2e 	vstr	s18, [sp, #184]	; 0xb8
 8016540:	ed8d aa2f 	vstr	s20, [sp, #188]	; 0xbc
 8016544:	edcd 8a30 	vstr	s17, [sp, #192]	; 0xc0
 8016548:	ed8d 8a31 	vstr	s16, [sp, #196]	; 0xc4
 801654c:	f8cd b0a4 	str.w	fp, [sp, #164]	; 0xa4
 8016550:	9115      	str	r1, [sp, #84]	; 0x54
 8016552:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8016556:	f7e9 ffff 	bl	8000558 <__aeabi_f2d>
 801655a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801655e:	f894 05d6 	ldrb.w	r0, [r4, #1494]	; 0x5d6
 8016562:	ed96 ba0b 	vldr	s22, [r6, #44]	; 0x2c
 8016566:	edd6 aa0a 	vldr	s21, [r6, #40]	; 0x28
 801656a:	ed96 aa03 	vldr	s20, [r6, #12]
 801656e:	ed96 9a02 	vldr	s18, [r6, #8]
 8016572:	edd6 8a01 	vldr	s17, [r6, #4]
 8016576:	ed96 8a00 	vldr	s16, [r6]
 801657a:	f7e9 ffcb 	bl	8000514 <__aeabi_ui2d>
 801657e:	eef8 9a69 	vcvt.f32.u32	s19, s19
 8016582:	f894 35d4 	ldrb.w	r3, [r4, #1492]	; 0x5d4
 8016586:	f894 e5d2 	ldrb.w	lr, [r4, #1490]	; 0x5d2
 801658a:	f894 25d1 	ldrb.w	r2, [r4, #1489]	; 0x5d1
 801658e:	f894 c5d3 	ldrb.w	ip, [r4, #1491]	; 0x5d3
 8016592:	ee69 9aab 	vmul.f32	s19, s19, s23
 8016596:	edd6 ba0c 	vldr	s23, [r6, #48]	; 0x30
 801659a:	9308      	str	r3, [sp, #32]
 801659c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80165a0:	f894 35d0 	ldrb.w	r3, [r4, #1488]	; 0x5d0
 80165a4:	6930      	ldr	r0, [r6, #16]
 80165a6:	f8cd e018 	str.w	lr, [sp, #24]
 80165aa:	9205      	str	r2, [sp, #20]
 80165ac:	9304      	str	r3, [sp, #16]
 80165ae:	f8cd c01c 	str.w	ip, [sp, #28]
 80165b2:	f7e9 ffd1 	bl	8000558 <__aeabi_f2d>
 80165b6:	ae35      	add	r6, sp, #212	; 0xd4
 80165b8:	f50d 7e82 	add.w	lr, sp, #260	; 0x104
 80165bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80165c0:	eeb0 0a69 	vmov.f32	s0, s19
 80165c4:	eef0 3a6b 	vmov.f32	s7, s23
 80165c8:	eeb0 3a4b 	vmov.f32	s6, s22
 80165cc:	eef0 2a6a 	vmov.f32	s5, s21
 80165d0:	eeb0 2a4a 	vmov.f32	s4, s20
 80165d4:	eef0 1a49 	vmov.f32	s3, s18
 80165d8:	eeb0 1a68 	vmov.f32	s2, s17
 80165dc:	eef0 0a48 	vmov.f32	s1, s16
 80165e0:	ab32      	add	r3, sp, #200	; 0xc8
 80165e2:	aa2c      	add	r2, sp, #176	; 0xb0
 80165e4:	a929      	add	r1, sp, #164	; 0xa4
 80165e6:	a848      	add	r0, sp, #288	; 0x120
 80165e8:	e88d 4040 	stmia.w	sp, {r6, lr}
 80165ec:	f7ff fc7c 	bl	8015ee8 <SpacePointAlgorithm.isra.10>
 80165f0:	f1b9 0f00 	cmp.w	r9, #0
 80165f4:	d00f      	beq.n	8016616 <iNemo_update_6X.constprop.45+0x30a>
 80165f6:	f8da 2000 	ldr.w	r2, [sl]
 80165fa:	f8da 3004 	ldr.w	r3, [sl, #4]
 80165fe:	f8c9 2000 	str.w	r2, [r9]
 8016602:	f8c9 3004 	str.w	r3, [r9, #4]
 8016606:	f8da 2008 	ldr.w	r2, [sl, #8]
 801660a:	f8da 300c 	ldr.w	r3, [sl, #12]
 801660e:	f8c9 2008 	str.w	r2, [r9, #8]
 8016612:	f8c9 300c 	str.w	r3, [r9, #12]
 8016616:	4b25      	ldr	r3, [pc, #148]	; (80166ac <iNemo_update_6X.constprop.45+0x3a0>)
 8016618:	f8d8 20f0 	ldr.w	r2, [r8, #240]	; 0xf0
 801661c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8016620:	f894 26f2 	ldrb.w	r2, [r4, #1778]	; 0x6f2
 8016624:	f8d8 10c8 	ldr.w	r1, [r8, #200]	; 0xc8
 8016628:	f8c3 10fc 	str.w	r1, [r3, #252]	; 0xfc
 801662c:	2a01      	cmp	r2, #1
 801662e:	f8d8 1118 	ldr.w	r1, [r8, #280]	; 0x118
 8016632:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
 8016636:	d066      	beq.n	8016706 <iNemo_update_6X.constprop.45+0x3fa>
 8016638:	eddf 7a1d 	vldr	s15, [pc, #116]	; 80166b0 <iNemo_update_6X.constprop.45+0x3a4>
 801663c:	ed97 6a00 	vldr	s12, [r7]
 8016640:	edd7 6a01 	vldr	s13, [r7, #4]
 8016644:	ed97 7a02 	vldr	s14, [r7, #8]
 8016648:	f894 26f1 	ldrb.w	r2, [r4, #1777]	; 0x6f1
 801664c:	ee26 5a27 	vmul.f32	s10, s12, s15
 8016650:	ee66 5aa7 	vmul.f32	s11, s13, s15
 8016654:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016658:	ed85 5a1b 	vstr	s10, [r5, #108]	; 0x6c
 801665c:	edc5 5a1c 	vstr	s11, [r5, #112]	; 0x70
 8016660:	edc5 7a1d 	vstr	s15, [r5, #116]	; 0x74
 8016664:	b13a      	cbz	r2, 8016676 <iNemo_update_6X.constprop.45+0x36a>
 8016666:	f894 2700 	ldrb.w	r2, [r4, #1792]	; 0x700
 801666a:	2a09      	cmp	r2, #9
 801666c:	d810      	bhi.n	8016690 <iNemo_update_6X.constprop.45+0x384>
 801666e:	3201      	adds	r2, #1
 8016670:	f884 2700 	strb.w	r2, [r4, #1792]	; 0x700
 8016674:	e001      	b.n	801667a <iNemo_update_6X.constprop.45+0x36e>
 8016676:	f884 2700 	strb.w	r2, [r4, #1792]	; 0x700
 801667a:	f894 35f4 	ldrb.w	r3, [r4, #1524]	; 0x5f4
 801667e:	f083 0302 	eor.w	r3, r3, #2
 8016682:	f884 35f4 	strb.w	r3, [r4, #1524]	; 0x5f4
 8016686:	b065      	add	sp, #404	; 0x194
 8016688:	ecbd 8b08 	vpop	{d8-d11}
 801668c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016690:	ed83 6a22 	vstr	s12, [r3, #136]	; 0x88
 8016694:	edc3 6a23 	vstr	s13, [r3, #140]	; 0x8c
 8016698:	ed83 7a24 	vstr	s14, [r3, #144]	; 0x90
 801669c:	e7ed      	b.n	801667a <iNemo_update_6X.constprop.45+0x36e>
 801669e:	bf00      	nop
 80166a0:	20001698 	.word	0x20001698
 80166a4:	20001b5c 	.word	0x20001b5c
 80166a8:	20000010 	.word	0x20000010
 80166ac:	20001c90 	.word	0x20001c90
 80166b0:	42652ee1 	.word	0x42652ee1
 80166b4:	20000000 	.word	0x20000000
 80166b8:	bf333333 	.word	0xbf333333
 80166bc:	3f333333 	.word	0x3f333333
 80166c0:	ee65 5aa5 	vmul.f32	s11, s11, s11
 80166c4:	ee26 6a06 	vmul.f32	s12, s12, s12
 80166c8:	ee69 7a09 	vmul.f32	s15, s18, s18
 80166cc:	ee36 6a25 	vadd.f32	s12, s12, s11
 80166d0:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8016740 <iNemo_update_6X.constprop.45+0x434>
 80166d4:	f8df b06c 	ldr.w	fp, [pc, #108]	; 8016744 <iNemo_update_6X.constprop.45+0x438>
 80166d8:	ee76 7a27 	vadd.f32	s15, s12, s15
 80166dc:	ee17 0a90 	vmov	r0, s15
 80166e0:	f7e9 ff3a 	bl	8000558 <__aeabi_f2d>
 80166e4:	ec41 0b10 	vmov	d0, r0, r1
 80166e8:	f002 fd32 	bl	8019150 <sqrt>
 80166ec:	ec51 0b10 	vmov	r0, r1, d0
 80166f0:	f7ea fa7e 	bl	8000bf0 <__aeabi_d2f>
 80166f4:	ee07 0a90 	vmov	s15, r0
 80166f8:	ee8b ba27 	vdiv.f32	s22, s22, s15
 80166fc:	eeca aaa7 	vdiv.f32	s21, s21, s15
 8016700:	ee89 9a27 	vdiv.f32	s18, s18, s15
 8016704:	e6d9      	b.n	80164ba <iNemo_update_6X.constprop.45+0x1ae>
 8016706:	f8da 2004 	ldr.w	r2, [sl, #4]
 801670a:	f8da 6000 	ldr.w	r6, [sl]
 801670e:	f8da 0008 	ldr.w	r0, [sl, #8]
 8016712:	f8da 100c 	ldr.w	r1, [sl, #12]
 8016716:	67ea      	str	r2, [r5, #124]	; 0x7c
 8016718:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
 801671c:	2200      	movs	r2, #0
 801671e:	67ae      	str	r6, [r5, #120]	; 0x78
 8016720:	f8c5 6088 	str.w	r6, [r5, #136]	; 0x88
 8016724:	f8c5 0080 	str.w	r0, [r5, #128]	; 0x80
 8016728:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
 801672c:	f8c5 1084 	str.w	r1, [r5, #132]	; 0x84
 8016730:	f8c5 1094 	str.w	r1, [r5, #148]	; 0x94
 8016734:	f884 25e0 	strb.w	r2, [r4, #1504]	; 0x5e0
 8016738:	f888 200c 	strb.w	r2, [r8, #12]
 801673c:	e77c      	b.n	8016638 <iNemo_update_6X.constprop.45+0x32c>
 801673e:	bf00      	nop
 8016740:	bf3504f3 	.word	0xbf3504f3
 8016744:	3f3504f3 	.word	0x3f3504f3

08016748 <iNemo_update.constprop.46>:
 8016748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801674c:	4cee      	ldr	r4, [pc, #952]	; (8016b08 <iNemo_update.constprop.46+0x3c0>)
 801674e:	f994 33d0 	ldrsb.w	r3, [r4, #976]	; 0x3d0
 8016752:	f994 b3e0 	ldrsb.w	fp, [r4, #992]	; 0x3e0
 8016756:	f994 e3d2 	ldrsb.w	lr, [r4, #978]	; 0x3d2
 801675a:	f994 63d5 	ldrsb.w	r6, [r4, #981]	; 0x3d5
 801675e:	f994 c3d7 	ldrsb.w	ip, [r4, #983]	; 0x3d7
 8016762:	f994 a3df 	ldrsb.w	sl, [r4, #991]	; 0x3df
 8016766:	f994 93e1 	ldrsb.w	r9, [r4, #993]	; 0x3e1
 801676a:	ee02 3a10 	vmov	s4, r3
 801676e:	f994 33d1 	ldrsb.w	r3, [r4, #977]	; 0x3d1
 8016772:	ee05 3a90 	vmov	s11, r3
 8016776:	f994 33d3 	ldrsb.w	r3, [r4, #979]	; 0x3d3
 801677a:	ee02 3a90 	vmov	s5, r3
 801677e:	f994 33d4 	ldrsb.w	r3, [r4, #980]	; 0x3d4
 8016782:	ee06 3a10 	vmov	s12, r3
 8016786:	f994 33d6 	ldrsb.w	r3, [r4, #982]	; 0x3d6
 801678a:	ed2d 8b10 	vpush	{d8-d15}
 801678e:	ee0b 3a10 	vmov	s22, r3
 8016792:	f994 33d8 	ldrsb.w	r3, [r4, #984]	; 0x3d8
 8016796:	ee0c 3a90 	vmov	s25, r3
 801679a:	f994 33ee 	ldrsb.w	r3, [r4, #1006]	; 0x3ee
 801679e:	ee04 3a90 	vmov	s9, r3
 80167a2:	f994 33ef 	ldrsb.w	r3, [r4, #1007]	; 0x3ef
 80167a6:	ee0d 3a10 	vmov	s26, r3
 80167aa:	f994 33f0 	ldrsb.w	r3, [r4, #1008]	; 0x3f0
 80167ae:	ee0e 3a10 	vmov	s28, r3
 80167b2:	f994 33dc 	ldrsb.w	r3, [r4, #988]	; 0x3dc
 80167b6:	ee0d 3a90 	vmov	s27, r3
 80167ba:	f994 33dd 	ldrsb.w	r3, [r4, #989]	; 0x3dd
 80167be:	ee05 3a10 	vmov	s10, r3
 80167c2:	f994 33de 	ldrsb.w	r3, [r4, #990]	; 0x3de
 80167c6:	ee0c 3a10 	vmov	s24, r3
 80167ca:	f994 33e2 	ldrsb.w	r3, [r4, #994]	; 0x3e2
 80167ce:	b0e7      	sub	sp, #412	; 0x19c
 80167d0:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 80167d4:	ee03 3a10 	vmov	s6, r3
 80167d8:	f994 33e3 	ldrsb.w	r3, [r4, #995]	; 0x3e3
 80167dc:	f204 7504 	addw	r5, r4, #1796	; 0x704
 80167e0:	2200      	movs	r2, #0
 80167e2:	edd5 aa06 	vldr	s21, [r5, #24]
 80167e6:	ed95 aa07 	vldr	s20, [r5, #28]
 80167ea:	ed95 9a08 	vldr	s18, [r5, #32]
 80167ee:	edd5 9a09 	vldr	s19, [r5, #36]	; 0x24
 80167f2:	edd5 8a0a 	vldr	s17, [r5, #40]	; 0x28
 80167f6:	ed95 1a0b 	vldr	s2, [r5, #44]	; 0x2c
 80167fa:	ed95 8a03 	vldr	s16, [r5, #12]
 80167fe:	edd5 0a04 	vldr	s1, [r5, #16]
 8016802:	edd5 1a05 	vldr	s3, [r5, #20]
 8016806:	f8c8 2000 	str.w	r2, [r8]
 801680a:	ee06 3a90 	vmov	s13, r3
 801680e:	f8c8 2004 	str.w	r2, [r8, #4]
 8016812:	f994 33eb 	ldrsb.w	r3, [r4, #1003]	; 0x3eb
 8016816:	f994 73e4 	ldrsb.w	r7, [r4, #996]	; 0x3e4
 801681a:	f994 13ed 	ldrsb.w	r1, [r4, #1005]	; 0x3ed
 801681e:	f8c8 2008 	str.w	r2, [r8, #8]
 8016822:	ee07 3a10 	vmov	s14, r3
 8016826:	f994 33ec 	ldrsb.w	r3, [r4, #1004]	; 0x3ec
 801682a:	f994 23ea 	ldrsb.w	r2, [r4, #1002]	; 0x3ea
 801682e:	ee03 3a90 	vmov	s7, r3
 8016832:	f994 33e8 	ldrsb.w	r3, [r4, #1000]	; 0x3e8
 8016836:	ee04 3a10 	vmov	s8, r3
 801683a:	f994 33e9 	ldrsb.w	r3, [r4, #1001]	; 0x3e9
 801683e:	ee07 3a90 	vmov	s15, r3
 8016842:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8016846:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801684a:	ee24 4a29 	vmul.f32	s8, s8, s19
 801684e:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8016852:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8016856:	ee74 7a27 	vadd.f32	s15, s8, s15
 801685a:	ee04 ca10 	vmov	s8, ip
 801685e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8016862:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8016866:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801686a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801686e:	ee23 3a08 	vmul.f32	s6, s6, s16
 8016872:	ee65 5a8a 	vmul.f32	s11, s11, s20
 8016876:	ee26 6a0a 	vmul.f32	s12, s12, s20
 801687a:	ee66 6aa0 	vmul.f32	s13, s13, s1
 801687e:	ee24 aa0a 	vmul.f32	s20, s8, s20
 8016882:	ee04 7a10 	vmov	s8, r7
 8016886:	ee73 6a26 	vadd.f32	s13, s6, s13
 801688a:	eeb8 3ac4 	vcvt.f32.s32	s6, s8
 801688e:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8016892:	ee23 3a21 	vmul.f32	s6, s6, s3
 8016896:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 801689a:	ee22 2a2a 	vmul.f32	s4, s4, s21
 801689e:	ee62 2aaa 	vmul.f32	s5, s5, s21
 80168a2:	eef8 bac7 	vcvt.f32.s32	s23, s14
 80168a6:	ee76 ea83 	vadd.f32	s29, s13, s6
 80168aa:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 80168ae:	ee06 aa90 	vmov	s13, sl
 80168b2:	ee2b 7aa9 	vmul.f32	s14, s23, s19
 80168b6:	ee63 3aa8 	vmul.f32	s7, s7, s17
 80168ba:	ee72 5a25 	vadd.f32	s11, s4, s11
 80168be:	ee32 6a86 	vadd.f32	s12, s5, s12
 80168c2:	eef8 bae6 	vcvt.f32.s32	s23, s13
 80168c6:	ee04 1a10 	vmov	s8, r1
 80168ca:	ee06 ba90 	vmov	s13, fp
 80168ce:	ee02 ea10 	vmov	s4, lr
 80168d2:	ee02 6a90 	vmov	s5, r6
 80168d6:	ee37 7a23 	vadd.f32	s14, s14, s7
 80168da:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80168de:	eef8 3ac4 	vcvt.f32.s32	s7, s8
 80168e2:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 80168e6:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 80168ea:	ee04 2a10 	vmov	s8, r2
 80168ee:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80168f2:	ee22 2a09 	vmul.f32	s4, s4, s18
 80168f6:	ee62 2a89 	vmul.f32	s5, s5, s18
 80168fa:	ee25 5a20 	vmul.f32	s10, s10, s1
 80168fe:	eeb8 bacb 	vcvt.f32.s32	s22, s22
 8016902:	ee66 0aa0 	vmul.f32	s1, s13, s1
 8016906:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801690a:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 801690e:	eeb8 dacd 	vcvt.f32.s32	s26, s26
 8016912:	eef8 daed 	vcvt.f32.s32	s27, s27
 8016916:	ee06 9a90 	vmov	s13, r9
 801691a:	ee2b ba2a 	vmul.f32	s22, s22, s21
 801691e:	ee63 3a81 	vmul.f32	s7, s7, s2
 8016922:	ee35 2a82 	vadd.f32	s4, s11, s4
 8016926:	ee76 2a22 	vadd.f32	s5, s12, s5
 801692a:	ee64 5a01 	vmul.f32	s11, s8, s2
 801692e:	ee6d da88 	vmul.f32	s27, s27, s16
 8016932:	4b76      	ldr	r3, [pc, #472]	; (8016b0c <iNemo_update.constprop.46+0x3c4>)
 8016934:	ee2b 8a88 	vmul.f32	s16, s23, s16
 8016938:	eef8 caec 	vcvt.f32.s32	s25, s25
 801693c:	ee64 9aa9 	vmul.f32	s19, s9, s19
 8016940:	ee6d 8a28 	vmul.f32	s17, s26, s17
 8016944:	eeb8 eace 	vcvt.f32.s32	s28, s28
 8016948:	eeb8 cacc 	vcvt.f32.s32	s24, s24
 801694c:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 8016950:	ee3b ba0a 	vadd.f32	s22, s22, s20
 8016954:	ee2c 9a89 	vmul.f32	s18, s25, s18
 8016958:	ee2c ca21 	vmul.f32	s24, s24, s3
 801695c:	f893 38e0 	ldrb.w	r3, [r3, #2272]	; 0x8e0
 8016960:	9317      	str	r3, [sp, #92]	; 0x5c
 8016962:	ee37 7a23 	vadd.f32	s14, s14, s7
 8016966:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801696a:	ee79 8aa8 	vadd.f32	s17, s19, s17
 801696e:	ee2e 1a01 	vmul.f32	s2, s28, s2
 8016972:	ee7d da85 	vadd.f32	s27, s27, s10
 8016976:	ee38 8a20 	vadd.f32	s16, s16, s1
 801697a:	ee66 1a21 	vmul.f32	s3, s12, s3
 801697e:	ee3b ba09 	vadd.f32	s22, s22, s18
 8016982:	eeb0 aa40 	vmov.f32	s20, s0
 8016986:	4683      	mov	fp, r0
 8016988:	eeb1 fa42 	vneg.f32	s30, s4
 801698c:	eef1 aa62 	vneg.f32	s21, s5
 8016990:	eeb1 9a6e 	vneg.f32	s18, s29
 8016994:	eef1 fa47 	vneg.f32	s31, s14
 8016998:	eef1 ba67 	vneg.f32	s23, s15
 801699c:	ee78 8a81 	vadd.f32	s17, s17, s2
 80169a0:	ee3d ca8c 	vadd.f32	s24, s27, s24
 80169a4:	ee38 8a21 	vadd.f32	s16, s16, s3
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	f040 8131 	bne.w	8016c10 <iNemo_update.constprop.46+0x4c8>
 80169ae:	f894 2835 	ldrb.w	r2, [r4, #2101]	; 0x835
 80169b2:	f894 3834 	ldrb.w	r3, [r4, #2100]	; 0x834
 80169b6:	4e56      	ldr	r6, [pc, #344]	; (8016b10 <iNemo_update.constprop.46+0x3c8>)
 80169b8:	4f56      	ldr	r7, [pc, #344]	; (8016b14 <iNemo_update.constprop.46+0x3cc>)
 80169ba:	f8d5 c078 	ldr.w	ip, [r5, #120]	; 0x78
 80169be:	f8d5 e07c 	ldr.w	lr, [r5, #124]	; 0x7c
 80169c2:	f8c5 c088 	str.w	ip, [r5, #136]	; 0x88
 80169c6:	ee09 2a90 	vmov	s19, r2
 80169ca:	f043 0302 	orr.w	r3, r3, #2
 80169ce:	f083 0301 	eor.w	r3, r3, #1
 80169d2:	f8d5 c080 	ldr.w	ip, [r5, #128]	; 0x80
 80169d6:	f8c5 e08c 	str.w	lr, [r5, #140]	; 0x8c
 80169da:	f5a6 719a 	sub.w	r1, r6, #308	; 0x134
 80169de:	f8d5 e084 	ldr.w	lr, [r5, #132]	; 0x84
 80169e2:	f884 3834 	strb.w	r3, [r4, #2100]	; 0x834
 80169e6:	22f8      	movs	r2, #248	; 0xf8
 80169e8:	a828      	add	r0, sp, #160	; 0xa0
 80169ea:	eef8 9a69 	vcvt.f32.u32	s19, s19
 80169ee:	f8c5 c090 	str.w	ip, [r5, #144]	; 0x90
 80169f2:	f8c5 e094 	str.w	lr, [r5, #148]	; 0x94
 80169f6:	f004 fab7 	bl	801af68 <memcpy>
 80169fa:	f8d7 e0b0 	ldr.w	lr, [r7, #176]	; 0xb0
 80169fe:	f8d7 c0ac 	ldr.w	ip, [r7, #172]	; 0xac
 8016a02:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8016a06:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 8016a0a:	9715      	str	r7, [sp, #84]	; 0x54
 8016a0c:	f106 01fa 	add.w	r1, r6, #250	; 0xfa
 8016a10:	f8c6 e050 	str.w	lr, [r6, #80]	; 0x50
 8016a14:	f8c6 c04c 	str.w	ip, [r6, #76]	; 0x4c
 8016a18:	6570      	str	r0, [r6, #84]	; 0x54
 8016a1a:	2200      	movs	r2, #0
 8016a1c:	f106 0cf9 	add.w	ip, r6, #249	; 0xf9
 8016a20:	f106 03f8 	add.w	r3, r6, #248	; 0xf8
 8016a24:	ee69 9a8a 	vmul.f32	s19, s19, s20
 8016a28:	edcd aa2e 	vstr	s21, [sp, #184]	; 0xb8
 8016a2c:	ed16 aa0c 	vldr	s20, [r6, #-48]	; 0xffffffd0
 8016a30:	ed56 aa05 	vldr	s21, [r6, #-20]	; 0xffffffec
 8016a34:	ed8d ba30 	vstr	s22, [sp, #192]	; 0xc0
 8016a38:	ed8d 8a2b 	vstr	s16, [sp, #172]	; 0xac
 8016a3c:	ed16 ba04 	vldr	s22, [r6, #-16]
 8016a40:	ed16 8a0f 	vldr	s16, [r6, #-60]	; 0xffffffc4
 8016a44:	ed8d 9a2d 	vstr	s18, [sp, #180]	; 0xb4
 8016a48:	edcd ba32 	vstr	s23, [sp, #200]	; 0xc8
 8016a4c:	ed16 9a0d 	vldr	s18, [r6, #-52]	; 0xffffffcc
 8016a50:	ed56 ba03 	vldr	s23, [r6, #-12]
 8016a54:	edcd 8a33 	vstr	s17, [sp, #204]	; 0xcc
 8016a58:	f1a6 006c 	sub.w	r0, r6, #108	; 0x6c
 8016a5c:	ed56 8a0e 	vldr	s17, [r6, #-56]	; 0xffffffc8
 8016a60:	9114      	str	r1, [sp, #80]	; 0x50
 8016a62:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
 8016a66:	a91f      	add	r1, sp, #124	; 0x7c
 8016a68:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 8016a6c:	9312      	str	r3, [sp, #72]	; 0x48
 8016a6e:	900f      	str	r0, [sp, #60]	; 0x3c
 8016a70:	ed8d fa2f 	vstr	s30, [sp, #188]	; 0xbc
 8016a74:	632a      	str	r2, [r5, #48]	; 0x30
 8016a76:	636a      	str	r2, [r5, #52]	; 0x34
 8016a78:	63aa      	str	r2, [r5, #56]	; 0x38
 8016a7a:	ed8d ca2c 	vstr	s24, [sp, #176]	; 0xb0
 8016a7e:	9110      	str	r1, [sp, #64]	; 0x40
 8016a80:	edcd fa31 	vstr	s31, [sp, #196]	; 0xc4
 8016a84:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8016a88:	f856 0c1c 	ldr.w	r0, [r6, #-28]
 8016a8c:	f7e9 fd64 	bl	8000558 <__aeabi_f2d>
 8016a90:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016a94:	f894 0816 	ldrb.w	r0, [r4, #2070]	; 0x816
 8016a98:	f7e9 fd3c 	bl	8000514 <__aeabi_ui2d>
 8016a9c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016aa0:	f894 3814 	ldrb.w	r3, [r4, #2068]	; 0x814
 8016aa4:	9308      	str	r3, [sp, #32]
 8016aa6:	f856 0c2c 	ldr.w	r0, [r6, #-44]
 8016aaa:	f894 e813 	ldrb.w	lr, [r4, #2067]	; 0x813
 8016aae:	f894 2812 	ldrb.w	r2, [r4, #2066]	; 0x812
 8016ab2:	f894 3810 	ldrb.w	r3, [r4, #2064]	; 0x810
 8016ab6:	f894 1811 	ldrb.w	r1, [r4, #2065]	; 0x811
 8016aba:	f8cd e01c 	str.w	lr, [sp, #28]
 8016abe:	9206      	str	r2, [sp, #24]
 8016ac0:	9304      	str	r3, [sp, #16]
 8016ac2:	9105      	str	r1, [sp, #20]
 8016ac4:	f7e9 fd48 	bl	8000558 <__aeabi_f2d>
 8016ac8:	f50d 7c86 	add.w	ip, sp, #268	; 0x10c
 8016acc:	f10d 0edc 	add.w	lr, sp, #220	; 0xdc
 8016ad0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016ad4:	eef0 3a6b 	vmov.f32	s7, s23
 8016ad8:	eeb0 3a4b 	vmov.f32	s6, s22
 8016adc:	eef0 2a6a 	vmov.f32	s5, s21
 8016ae0:	eeb0 2a4a 	vmov.f32	s4, s20
 8016ae4:	eef0 1a49 	vmov.f32	s3, s18
 8016ae8:	eeb0 1a68 	vmov.f32	s2, s17
 8016aec:	eef0 0a48 	vmov.f32	s1, s16
 8016af0:	eeb0 0a69 	vmov.f32	s0, s19
 8016af4:	ab34      	add	r3, sp, #208	; 0xd0
 8016af6:	aa2e      	add	r2, sp, #184	; 0xb8
 8016af8:	a92b      	add	r1, sp, #172	; 0xac
 8016afa:	a84a      	add	r0, sp, #296	; 0x128
 8016afc:	f8cd c004 	str.w	ip, [sp, #4]
 8016b00:	f8cd e000 	str.w	lr, [sp]
 8016b04:	e008      	b.n	8016b18 <iNemo_update.constprop.46+0x3d0>
 8016b06:	bf00      	nop
 8016b08:	20001698 	.word	0x20001698
 8016b0c:	20000000 	.word	0x20000000
 8016b10:	20001ed0 	.word	0x20001ed0
 8016b14:	200008e8 	.word	0x200008e8
 8016b18:	f7ff f9e6 	bl	8015ee8 <SpacePointAlgorithm.isra.10>
 8016b1c:	f1bb 0f00 	cmp.w	fp, #0
 8016b20:	d00f      	beq.n	8016b42 <iNemo_update.constprop.46+0x3fa>
 8016b22:	f8d9 2000 	ldr.w	r2, [r9]
 8016b26:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8016b2a:	f8cb 2000 	str.w	r2, [fp]
 8016b2e:	f8cb 3004 	str.w	r3, [fp, #4]
 8016b32:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8016b36:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8016b3a:	f8cb 2008 	str.w	r2, [fp, #8]
 8016b3e:	f8cb 300c 	str.w	r3, [fp, #12]
 8016b42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016b46:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
 8016b4a:	f894 3932 	ldrb.w	r3, [r4, #2354]	; 0x932
 8016b4e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8016b52:	f8c6 20fc 	str.w	r2, [r6, #252]	; 0xfc
 8016b56:	2b01      	cmp	r3, #1
 8016b58:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8016b5c:	f8c6 2104 	str.w	r2, [r6, #260]	; 0x104
 8016b60:	f000 8093 	beq.w	8016c8a <iNemo_update.constprop.46+0x542>
 8016b64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016b66:	f103 3aff 	add.w	sl, r3, #4294967295
 8016b6a:	fa5f fa8a 	uxtb.w	sl, sl
 8016b6e:	f1ba 0f08 	cmp.w	sl, #8
 8016b72:	bf9c      	itt	ls
 8016b74:	4b53      	ldrls	r3, [pc, #332]	; (8016cc4 <iNemo_update.constprop.46+0x57c>)
 8016b76:	f883 a8e0 	strbls.w	sl, [r3, #2272]	; 0x8e0
 8016b7a:	eddf 7a53 	vldr	s15, [pc, #332]	; 8016cc8 <iNemo_update.constprop.46+0x580>
 8016b7e:	ed98 6a00 	vldr	s12, [r8]
 8016b82:	edd8 6a01 	vldr	s13, [r8, #4]
 8016b86:	ed98 7a02 	vldr	s14, [r8, #8]
 8016b8a:	f894 3931 	ldrb.w	r3, [r4, #2353]	; 0x931
 8016b8e:	ee26 5a27 	vmul.f32	s10, s12, s15
 8016b92:	ee66 5aa7 	vmul.f32	s11, s13, s15
 8016b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016b9a:	ed85 5a1b 	vstr	s10, [r5, #108]	; 0x6c
 8016b9e:	edc5 5a1c 	vstr	s11, [r5, #112]	; 0x70
 8016ba2:	edc5 7a1d 	vstr	s15, [r5, #116]	; 0x74
 8016ba6:	b13b      	cbz	r3, 8016bb8 <iNemo_update.constprop.46+0x470>
 8016ba8:	f894 3940 	ldrb.w	r3, [r4, #2368]	; 0x940
 8016bac:	2b09      	cmp	r3, #9
 8016bae:	d828      	bhi.n	8016c02 <iNemo_update.constprop.46+0x4ba>
 8016bb0:	3301      	adds	r3, #1
 8016bb2:	f884 3940 	strb.w	r3, [r4, #2368]	; 0x940
 8016bb6:	e001      	b.n	8016bbc <iNemo_update.constprop.46+0x474>
 8016bb8:	f884 3940 	strb.w	r3, [r4, #2368]	; 0x940
 8016bbc:	f894 3834 	ldrb.w	r3, [r4, #2100]	; 0x834
 8016bc0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8016bc4:	f8d7 e098 	ldr.w	lr, [r7, #152]	; 0x98
 8016bc8:	f8d7 509c 	ldr.w	r5, [r7, #156]	; 0x9c
 8016bcc:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8016bd0:	f8c6 20ac 	str.w	r2, [r6, #172]	; 0xac
 8016bd4:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8016bd8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8016bdc:	f8c6 e0b0 	str.w	lr, [r6, #176]	; 0xb0
 8016be0:	f083 0302 	eor.w	r3, r3, #2
 8016be4:	f884 3834 	strb.w	r3, [r4, #2100]	; 0x834
 8016be8:	f8c6 50b4 	str.w	r5, [r6, #180]	; 0xb4
 8016bec:	f8c6 00c4 	str.w	r0, [r6, #196]	; 0xc4
 8016bf0:	f8c6 10c8 	str.w	r1, [r6, #200]	; 0xc8
 8016bf4:	f8c6 20cc 	str.w	r2, [r6, #204]	; 0xcc
 8016bf8:	b067      	add	sp, #412	; 0x19c
 8016bfa:	ecbd 8b10 	vpop	{d8-d15}
 8016bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c02:	ed86 6a22 	vstr	s12, [r6, #136]	; 0x88
 8016c06:	edc6 6a23 	vstr	s13, [r6, #140]	; 0x8c
 8016c0a:	ed86 7a24 	vstr	s14, [r6, #144]	; 0x90
 8016c0e:	e7d5      	b.n	8016bbc <iNemo_update.constprop.46+0x474>
 8016c10:	ee62 2aa2 	vmul.f32	s5, s5, s5
 8016c14:	ee22 2a02 	vmul.f32	s4, s4, s4
 8016c18:	ee6b 7a0b 	vmul.f32	s15, s22, s22
 8016c1c:	ee32 2a82 	vadd.f32	s4, s5, s4
 8016c20:	ee72 7a27 	vadd.f32	s15, s4, s15
 8016c24:	ee17 0a90 	vmov	r0, s15
 8016c28:	f7e9 fc96 	bl	8000558 <__aeabi_f2d>
 8016c2c:	ec41 0b10 	vmov	d0, r0, r1
 8016c30:	f002 fa8e 	bl	8019150 <sqrt>
 8016c34:	ec51 0b10 	vmov	r0, r1, d0
 8016c38:	f7e9 ffda 	bl	8000bf0 <__aeabi_d2f>
 8016c3c:	ee6c 6a0c 	vmul.f32	s13, s24, s24
 8016c40:	ee28 7a08 	vmul.f32	s14, s16, s16
 8016c44:	ee2e 3aae 	vmul.f32	s6, s29, s29
 8016c48:	ee37 7a26 	vadd.f32	s14, s14, s13
 8016c4c:	ee07 0a90 	vmov	s15, r0
 8016c50:	ee37 7a03 	vadd.f32	s14, s14, s6
 8016c54:	eeca aaa7 	vdiv.f32	s21, s21, s15
 8016c58:	ee17 0a10 	vmov	r0, s14
 8016c5c:	ee8f fa27 	vdiv.f32	s30, s30, s15
 8016c60:	ee8b ba27 	vdiv.f32	s22, s22, s15
 8016c64:	f7e9 fc78 	bl	8000558 <__aeabi_f2d>
 8016c68:	ec41 0b10 	vmov	d0, r0, r1
 8016c6c:	f002 fa70 	bl	8019150 <sqrt>
 8016c70:	ec51 0b10 	vmov	r0, r1, d0
 8016c74:	f7e9 ffbc 	bl	8000bf0 <__aeabi_d2f>
 8016c78:	ee07 0a90 	vmov	s15, r0
 8016c7c:	ee88 8a27 	vdiv.f32	s16, s16, s15
 8016c80:	ee8c ca27 	vdiv.f32	s24, s24, s15
 8016c84:	ee89 9a27 	vdiv.f32	s18, s18, s15
 8016c88:	e691      	b.n	80169ae <iNemo_update.constprop.46+0x266>
 8016c8a:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8016c8e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8016c92:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
 8016c96:	f8c5 2094 	str.w	r2, [r5, #148]	; 0x94
 8016c9a:	4a0a      	ldr	r2, [pc, #40]	; (8016cc4 <iNemo_update.constprop.46+0x57c>)
 8016c9c:	f8d9 0000 	ldr.w	r0, [r9]
 8016ca0:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8016ca4:	67eb      	str	r3, [r5, #124]	; 0x7c
 8016ca6:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 8016caa:	2300      	movs	r3, #0
 8016cac:	67a8      	str	r0, [r5, #120]	; 0x78
 8016cae:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
 8016cb2:	f8c5 1080 	str.w	r1, [r5, #128]	; 0x80
 8016cb6:	f8c5 1090 	str.w	r1, [r5, #144]	; 0x90
 8016cba:	f884 3820 	strb.w	r3, [r4, #2080]	; 0x820
 8016cbe:	f882 38e0 	strb.w	r3, [r2, #2272]	; 0x8e0
 8016cc2:	e75a      	b.n	8016b7a <iNemo_update.constprop.46+0x432>
 8016cc4:	20000000 	.word	0x20000000
 8016cc8:	42652ee1 	.word	0x42652ee1
 8016ccc:	00000000 	.word	0x00000000

08016cd0 <quatErr2EulerErr>:
 8016cd0:	b570      	push	{r4, r5, r6, lr}
 8016cd2:	2300      	movs	r3, #0
 8016cd4:	6013      	str	r3, [r2, #0]
 8016cd6:	6053      	str	r3, [r2, #4]
 8016cd8:	6093      	str	r3, [r2, #8]
 8016cda:	ed2d 8b04 	vpush	{d8-d9}
 8016cde:	ed90 0a01 	vldr	s0, [r0, #4]
 8016ce2:	ed9f 8a7b 	vldr	s16, [pc, #492]	; 8016ed0 <quatErr2EulerErr+0x200>
 8016ce6:	4606      	mov	r6, r0
 8016ce8:	ee20 0a08 	vmul.f32	s0, s0, s16
 8016cec:	460c      	mov	r4, r1
 8016cee:	4615      	mov	r5, r2
 8016cf0:	f002 f904 	bl	8018efc <cosf>
 8016cf4:	edd6 9a02 	vldr	s19, [r6, #8]
 8016cf8:	ee69 9a88 	vmul.f32	s19, s19, s16
 8016cfc:	eeb0 9a40 	vmov.f32	s18, s0
 8016d00:	eeb0 0a69 	vmov.f32	s0, s19
 8016d04:	f002 f960 	bl	8018fc8 <sinf>
 8016d08:	eef0 8a40 	vmov.f32	s17, s0
 8016d0c:	eeb0 0a69 	vmov.f32	s0, s19
 8016d10:	f002 f8f4 	bl	8018efc <cosf>
 8016d14:	ee68 8aa8 	vmul.f32	s17, s17, s17
 8016d18:	ee20 8a00 	vmul.f32	s16, s0, s0
 8016d1c:	edd4 7a01 	vldr	s15, [r4, #4]
 8016d20:	ed94 0a02 	vldr	s0, [r4, #8]
 8016d24:	ee68 7a27 	vmul.f32	s15, s16, s15
 8016d28:	ee28 0a80 	vmul.f32	s0, s17, s0
 8016d2c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016d30:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8016d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d38:	eef1 9ac0 	vsqrt.f32	s19, s0
 8016d3c:	f100 80b5 	bmi.w	8016eaa <quatErr2EulerErr+0x1da>
 8016d40:	ee79 9aa9 	vadd.f32	s19, s19, s19
 8016d44:	eddf 7a63 	vldr	s15, [pc, #396]	; 8016ed4 <quatErr2EulerErr+0x204>
 8016d48:	ee69 7aa7 	vmul.f32	s15, s19, s15
 8016d4c:	ee29 9a09 	vmul.f32	s18, s18, s18
 8016d50:	ee17 0a90 	vmov	r0, s15
 8016d54:	f7e9 fc00 	bl	8000558 <__aeabi_f2d>
 8016d58:	ed9f 1b57 	vldr	d1, [pc, #348]	; 8016eb8 <quatErr2EulerErr+0x1e8>
 8016d5c:	ec41 0b10 	vmov	d0, r0, r1
 8016d60:	f002 f879 	bl	8018e56 <fmin>
 8016d64:	ec51 0b10 	vmov	r0, r1, d0
 8016d68:	f7e9 ff42 	bl	8000bf0 <__aeabi_d2f>
 8016d6c:	f7e9 fbf4 	bl	8000558 <__aeabi_f2d>
 8016d70:	ed9f 1b53 	vldr	d1, [pc, #332]	; 8016ec0 <quatErr2EulerErr+0x1f0>
 8016d74:	ec41 0b10 	vmov	d0, r0, r1
 8016d78:	f002 f846 	bl	8018e08 <fmax>
 8016d7c:	ec51 0b10 	vmov	r0, r1, d0
 8016d80:	f7e9 ff36 	bl	8000bf0 <__aeabi_d2f>
 8016d84:	6068      	str	r0, [r5, #4]
 8016d86:	edd4 7a01 	vldr	s15, [r4, #4]
 8016d8a:	ed94 7a02 	vldr	s14, [r4, #8]
 8016d8e:	eddf 6a52 	vldr	s13, [pc, #328]	; 8016ed8 <quatErr2EulerErr+0x208>
 8016d92:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8016d96:	ee28 7a07 	vmul.f32	s14, s16, s14
 8016d9a:	ee39 9a26 	vadd.f32	s18, s18, s13
 8016d9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016da2:	ee87 0a89 	vdiv.f32	s0, s15, s18
 8016da6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8016daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016dae:	eeb1 9ac0 	vsqrt.f32	s18, s0
 8016db2:	d477      	bmi.n	8016ea4 <quatErr2EulerErr+0x1d4>
 8016db4:	ee39 9a09 	vadd.f32	s18, s18, s18
 8016db8:	eddf 7a46 	vldr	s15, [pc, #280]	; 8016ed4 <quatErr2EulerErr+0x204>
 8016dbc:	ee69 7a27 	vmul.f32	s15, s18, s15
 8016dc0:	ee17 0a90 	vmov	r0, s15
 8016dc4:	f7e9 fbc8 	bl	8000558 <__aeabi_f2d>
 8016dc8:	ed9f 1b3f 	vldr	d1, [pc, #252]	; 8016ec8 <quatErr2EulerErr+0x1f8>
 8016dcc:	ec41 0b10 	vmov	d0, r0, r1
 8016dd0:	f002 f841 	bl	8018e56 <fmin>
 8016dd4:	ec51 0b10 	vmov	r0, r1, d0
 8016dd8:	f7e9 ff0a 	bl	8000bf0 <__aeabi_d2f>
 8016ddc:	f7e9 fbbc 	bl	8000558 <__aeabi_f2d>
 8016de0:	ed9f 1b37 	vldr	d1, [pc, #220]	; 8016ec0 <quatErr2EulerErr+0x1f0>
 8016de4:	ec41 0b10 	vmov	d0, r0, r1
 8016de8:	f002 f80e 	bl	8018e08 <fmax>
 8016dec:	ec51 0b10 	vmov	r0, r1, d0
 8016df0:	f7e9 fefe 	bl	8000bf0 <__aeabi_d2f>
 8016df4:	6028      	str	r0, [r5, #0]
 8016df6:	ed96 0a01 	vldr	s0, [r6, #4]
 8016dfa:	ed9f 6a35 	vldr	s12, [pc, #212]	; 8016ed0 <quatErr2EulerErr+0x200>
 8016dfe:	ed94 7a02 	vldr	s14, [r4, #8]
 8016e02:	edd4 6a01 	vldr	s13, [r4, #4]
 8016e06:	eddf 7a35 	vldr	s15, [pc, #212]	; 8016edc <quatErr2EulerErr+0x20c>
 8016e0a:	ee20 0a06 	vmul.f32	s0, s0, s12
 8016e0e:	ee68 8a87 	vmul.f32	s17, s17, s14
 8016e12:	eeb0 7ac0 	vabs.f32	s14, s0
 8016e16:	ee28 8a26 	vmul.f32	s16, s16, s13
 8016e1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e22:	ee38 8a28 	vadd.f32	s16, s16, s17
 8016e26:	d432      	bmi.n	8016e8e <quatErr2EulerErr+0x1be>
 8016e28:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8016ee0 <quatErr2EulerErr+0x210>
 8016e2c:	edd4 7a00 	vldr	s15, [r4]
 8016e30:	ee28 0a00 	vmul.f32	s0, s16, s0
 8016e34:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016e38:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8016e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e40:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8016e44:	d434      	bmi.n	8016eb0 <quatErr2EulerErr+0x1e0>
 8016e46:	ee38 8a08 	vadd.f32	s16, s16, s16
 8016e4a:	eddf 7a22 	vldr	s15, [pc, #136]	; 8016ed4 <quatErr2EulerErr+0x204>
 8016e4e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8016e52:	ee17 0a90 	vmov	r0, s15
 8016e56:	f7e9 fb7f 	bl	8000558 <__aeabi_f2d>
 8016e5a:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8016ec8 <quatErr2EulerErr+0x1f8>
 8016e5e:	ec41 0b10 	vmov	d0, r0, r1
 8016e62:	f001 fff8 	bl	8018e56 <fmin>
 8016e66:	ec51 0b10 	vmov	r0, r1, d0
 8016e6a:	f7e9 fec1 	bl	8000bf0 <__aeabi_d2f>
 8016e6e:	f7e9 fb73 	bl	8000558 <__aeabi_f2d>
 8016e72:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8016ec0 <quatErr2EulerErr+0x1f0>
 8016e76:	ec41 0b10 	vmov	d0, r0, r1
 8016e7a:	f001 ffc5 	bl	8018e08 <fmax>
 8016e7e:	ec51 0b10 	vmov	r0, r1, d0
 8016e82:	f7e9 feb5 	bl	8000bf0 <__aeabi_d2f>
 8016e86:	ecbd 8b04 	vpop	{d8-d9}
 8016e8a:	60a8      	str	r0, [r5, #8]
 8016e8c:	bd70      	pop	{r4, r5, r6, pc}
 8016e8e:	f002 f8dd 	bl	801904c <tanf>
 8016e92:	ee20 0a00 	vmul.f32	s0, s0, s0
 8016e96:	edd4 7a00 	vldr	s15, [r4]
 8016e9a:	ee20 0a08 	vmul.f32	s0, s0, s16
 8016e9e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016ea2:	e7c9      	b.n	8016e38 <quatErr2EulerErr+0x168>
 8016ea4:	f002 fa06 	bl	80192b4 <sqrtf>
 8016ea8:	e784      	b.n	8016db4 <quatErr2EulerErr+0xe4>
 8016eaa:	f002 fa03 	bl	80192b4 <sqrtf>
 8016eae:	e747      	b.n	8016d40 <quatErr2EulerErr+0x70>
 8016eb0:	f002 fa00 	bl	80192b4 <sqrtf>
 8016eb4:	e7c7      	b.n	8016e46 <quatErr2EulerErr+0x176>
 8016eb6:	bf00      	nop
 8016eb8:	00000000 	.word	0x00000000
 8016ebc:	40568000 	.word	0x40568000
 8016ec0:	00000000 	.word	0x00000000
 8016ec4:	3ff00000 	.word	0x3ff00000
 8016ec8:	00000000 	.word	0x00000000
 8016ecc:	40668000 	.word	0x40668000
 8016ed0:	3c8efa35 	.word	0x3c8efa35
 8016ed4:	42652ee1 	.word	0x42652ee1
 8016ed8:	3a83126f 	.word	0x3a83126f
 8016edc:	3fbc430e 	.word	0x3fbc430e
 8016ee0:	42c6ab07 	.word	0x42c6ab07
 8016ee4:	00000000 	.word	0x00000000

08016ee8 <MotionFX_initialize>:
 8016ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016eec:	490a      	ldr	r1, [pc, #40]	; (8016f18 <MotionFX_initialize+0x30>)
 8016eee:	4a0b      	ldr	r2, [pc, #44]	; (8016f1c <MotionFX_initialize+0x34>)
 8016ef0:	680b      	ldr	r3, [r1, #0]
 8016ef2:	2001      	movs	r0, #1
 8016ef4:	f023 0301 	bic.w	r3, r3, #1
 8016ef8:	600b      	str	r3, [r1, #0]
 8016efa:	b083      	sub	sp, #12
 8016efc:	4613      	mov	r3, r2
 8016efe:	6010      	str	r0, [r2, #0]
 8016f00:	681e      	ldr	r6, [r3, #0]
 8016f02:	2e00      	cmp	r6, #0
 8016f04:	d1fc      	bne.n	8016f00 <MotionFX_initialize+0x18>
 8016f06:	4b06      	ldr	r3, [pc, #24]	; (8016f20 <MotionFX_initialize+0x38>)
 8016f08:	4a06      	ldr	r2, [pc, #24]	; (8016f24 <MotionFX_initialize+0x3c>)
 8016f0a:	601a      	str	r2, [r3, #0]
 8016f0c:	681a      	ldr	r2, [r3, #0]
 8016f0e:	4b06      	ldr	r3, [pc, #24]	; (8016f28 <MotionFX_initialize+0x40>)
 8016f10:	429a      	cmp	r2, r3
 8016f12:	d00b      	beq.n	8016f2c <MotionFX_initialize+0x44>
 8016f14:	e7fe      	b.n	8016f14 <MotionFX_initialize+0x2c>
 8016f16:	bf00      	nop
 8016f18:	e0002000 	.word	0xe0002000
 8016f1c:	40023008 	.word	0x40023008
 8016f20:	40023000 	.word	0x40023000
 8016f24:	f407a5c2 	.word	0xf407a5c2
 8016f28:	b5e8b5cd 	.word	0xb5e8b5cd
 8016f2c:	4de6      	ldr	r5, [pc, #920]	; (80172c8 <MotionFX_initialize+0x3e0>)
 8016f2e:	f8df 83cc 	ldr.w	r8, [pc, #972]	; 80172fc <MotionFX_initialize+0x414>
 8016f32:	ed9f 7ae6 	vldr	s14, [pc, #920]	; 80172cc <MotionFX_initialize+0x3e4>
 8016f36:	eddf 7ae6 	vldr	s15, [pc, #920]	; 80172d0 <MotionFX_initialize+0x3e8>
 8016f3a:	f8c5 6944 	str.w	r6, [r5, #2372]	; 0x944
 8016f3e:	f04f 0b01 	mov.w	fp, #1
 8016f42:	ed9f 4bd7 	vldr	d4, [pc, #860]	; 80172a0 <MotionFX_initialize+0x3b8>
 8016f46:	ed9f 2bd8 	vldr	d2, [pc, #864]	; 80172a8 <MotionFX_initialize+0x3c0>
 8016f4a:	ed9f 3bd9 	vldr	d3, [pc, #868]	; 80172b0 <MotionFX_initialize+0x3c8>
 8016f4e:	ed9f 5bda 	vldr	d5, [pc, #872]	; 80172b8 <MotionFX_initialize+0x3d0>
 8016f52:	ed9f 6bdb 	vldr	d6, [pc, #876]	; 80172c0 <MotionFX_initialize+0x3d8>
 8016f56:	f8c5 6948 	str.w	r6, [r5, #2376]	; 0x948
 8016f5a:	f885 b941 	strb.w	fp, [r5, #2369]	; 0x941
 8016f5e:	f7f7 f8c3 	bl	800e0e8 <rt_InitInfAndNaN.isra.3>
 8016f62:	f241 11b5 	movw	r1, #4533	; 0x11b5
 8016f66:	f241 10b6 	movw	r0, #4534	; 0x11b6
 8016f6a:	f241 12b4 	movw	r2, #4532	; 0x11b4
 8016f6e:	f808 6001 	strb.w	r6, [r8, r1]
 8016f72:	f608 01e8 	addw	r1, r8, #2280	; 0x8e8
 8016f76:	2400      	movs	r4, #0
 8016f78:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
 8016f7c:	230a      	movs	r3, #10
 8016f7e:	ed81 4b02 	vstr	d4, [r1, #8]
 8016f82:	ed81 2b08 	vstr	d2, [r1, #32]
 8016f86:	ed81 3b0a 	vstr	d3, [r1, #40]	; 0x28
 8016f8a:	ed81 5b04 	vstr	d5, [r1, #16]
 8016f8e:	ed81 6b06 	vstr	d6, [r1, #24]
 8016f92:	f808 6000 	strb.w	r6, [r8, r0]
 8016f96:	f808 6002 	strb.w	r6, [r8, r2]
 8016f9a:	f888 38e0 	strb.w	r3, [r8, #2272]	; 0x8e0
 8016f9e:	f8c1 7208 	str.w	r7, [r1, #520]	; 0x208
 8016fa2:	f8c1 420c 	str.w	r4, [r1, #524]	; 0x20c
 8016fa6:	f8c1 4210 	str.w	r4, [r1, #528]	; 0x210
 8016faa:	9101      	str	r1, [sp, #4]
 8016fac:	f8c5 63d0 	str.w	r6, [r5, #976]	; 0x3d0
 8016fb0:	f8c5 63dc 	str.w	r6, [r5, #988]	; 0x3dc
 8016fb4:	f8c5 63e8 	str.w	r6, [r5, #1000]	; 0x3e8
 8016fb8:	f8c5 63d4 	str.w	r6, [r5, #980]	; 0x3d4
 8016fbc:	f885 63d8 	strb.w	r6, [r5, #984]	; 0x3d8
 8016fc0:	f8c5 63e0 	str.w	r6, [r5, #992]	; 0x3e0
 8016fc4:	f885 63e4 	strb.w	r6, [r5, #996]	; 0x3e4
 8016fc8:	f8c5 63ec 	str.w	r6, [r5, #1004]	; 0x3ec
 8016fcc:	f885 63f0 	strb.w	r6, [r5, #1008]	; 0x3f0
 8016fd0:	f7f7 f88a 	bl	800e0e8 <rt_InitInfAndNaN.isra.3>
 8016fd4:	f205 7204 	addw	r2, r5, #1796	; 0x704
 8016fd8:	f205 43c4 	addw	r3, r5, #1220	; 0x4c4
 8016fdc:	f205 79fc 	addw	r9, r5, #2044	; 0x7fc
 8016fe0:	f205 5abc 	addw	sl, r5, #1468	; 0x5bc
 8016fe4:	ed88 4b06 	vstr	d4, [r8, #24]
 8016fe8:	ed88 5b08 	vstr	d5, [r8, #32]
 8016fec:	eddf 4ab9 	vldr	s9, [pc, #740]	; 80172d4 <MotionFX_initialize+0x3ec>
 8016ff0:	ed9f 5ab9 	vldr	s10, [pc, #740]	; 80172d8 <MotionFX_initialize+0x3f0>
 8016ff4:	eddf 5ab9 	vldr	s11, [pc, #740]	; 80172dc <MotionFX_initialize+0x3f4>
 8016ff8:	f8c8 7218 	str.w	r7, [r8, #536]	; 0x218
 8016ffc:	ed88 6b0a 	vstr	d6, [r8, #40]	; 0x28
 8017000:	ed88 2b0c 	vstr	d2, [r8, #48]	; 0x30
 8017004:	ed9f 6ab6 	vldr	s12, [pc, #728]	; 80172e0 <MotionFX_initialize+0x3f8>
 8017008:	eddf 6ab6 	vldr	s13, [pc, #728]	; 80172e4 <MotionFX_initialize+0x3fc>
 801700c:	f8c8 421c 	str.w	r4, [r8, #540]	; 0x21c
 8017010:	ed88 3b0e 	vstr	d3, [r8, #56]	; 0x38
 8017014:	f8c8 4220 	str.w	r4, [r8, #544]	; 0x220
 8017018:	6794      	str	r4, [r2, #120]	; 0x78
 801701a:	67d4      	str	r4, [r2, #124]	; 0x7c
 801701c:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
 8017020:	f8c2 7084 	str.w	r7, [r2, #132]	; 0x84
 8017024:	f8c2 4088 	str.w	r4, [r2, #136]	; 0x88
 8017028:	f8c2 408c 	str.w	r4, [r2, #140]	; 0x8c
 801702c:	f8c2 4090 	str.w	r4, [r2, #144]	; 0x90
 8017030:	f8c2 7094 	str.w	r7, [r2, #148]	; 0x94
 8017034:	f8c2 4098 	str.w	r4, [r2, #152]	; 0x98
 8017038:	f8c2 409c 	str.w	r4, [r2, #156]	; 0x9c
 801703c:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
 8017040:	f888 68de 	strb.w	r6, [r8, #2270]	; 0x8de
 8017044:	f888 68dd 	strb.w	r6, [r8, #2269]	; 0x8dd
 8017048:	f888 68dc 	strb.w	r6, [r8, #2268]	; 0x8dc
 801704c:	f8c5 63f4 	str.w	r6, [r5, #1012]	; 0x3f4
 8017050:	f8c5 6400 	str.w	r6, [r5, #1024]	; 0x400
 8017054:	f8c5 640c 	str.w	r6, [r5, #1036]	; 0x40c
 8017058:	f888 b00c 	strb.w	fp, [r8, #12]
 801705c:	f8c5 63f8 	str.w	r6, [r5, #1016]	; 0x3f8
 8017060:	f885 63fc 	strb.w	r6, [r5, #1020]	; 0x3fc
 8017064:	f8c5 6404 	str.w	r6, [r5, #1028]	; 0x404
 8017068:	f885 6408 	strb.w	r6, [r5, #1032]	; 0x408
 801706c:	f8c5 6410 	str.w	r6, [r5, #1040]	; 0x410
 8017070:	f885 6414 	strb.w	r6, [r5, #1044]	; 0x414
 8017074:	f8c2 70a4 	str.w	r7, [r2, #164]	; 0xa4
 8017078:	f8c2 40a8 	str.w	r4, [r2, #168]	; 0xa8
 801707c:	f8c2 40ac 	str.w	r4, [r2, #172]	; 0xac
 8017080:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
 8017084:	f8c2 70b4 	str.w	r7, [r2, #180]	; 0xb4
 8017088:	f8c2 40b8 	str.w	r4, [r2, #184]	; 0xb8
 801708c:	f8c2 40bc 	str.w	r4, [r2, #188]	; 0xbc
 8017090:	f8c2 40c0 	str.w	r4, [r2, #192]	; 0xc0
 8017094:	f8c2 70c4 	str.w	r7, [r2, #196]	; 0xc4
 8017098:	f8c2 40c8 	str.w	r4, [r2, #200]	; 0xc8
 801709c:	f8c2 40cc 	str.w	r4, [r2, #204]	; 0xcc
 80170a0:	f8c2 40d0 	str.w	r4, [r2, #208]	; 0xd0
 80170a4:	f8c2 70d4 	str.w	r7, [r2, #212]	; 0xd4
 80170a8:	f8c2 40d8 	str.w	r4, [r2, #216]	; 0xd8
 80170ac:	f8c2 40dc 	str.w	r4, [r2, #220]	; 0xdc
 80170b0:	f8c2 40e0 	str.w	r4, [r2, #224]	; 0xe0
 80170b4:	f8c2 70e4 	str.w	r7, [r2, #228]	; 0xe4
 80170b8:	f8c2 40e8 	str.w	r4, [r2, #232]	; 0xe8
 80170bc:	f8c2 40ec 	str.w	r4, [r2, #236]	; 0xec
 80170c0:	f8c2 40f0 	str.w	r4, [r2, #240]	; 0xf0
 80170c4:	f8c2 70f4 	str.w	r7, [r2, #244]	; 0xf4
 80170c8:	63d7      	str	r7, [r2, #60]	; 0x3c
 80170ca:	6414      	str	r4, [r2, #64]	; 0x40
 80170cc:	6454      	str	r4, [r2, #68]	; 0x44
 80170ce:	6494      	str	r4, [r2, #72]	; 0x48
 80170d0:	64d7      	str	r7, [r2, #76]	; 0x4c
 80170d2:	6514      	str	r4, [r2, #80]	; 0x50
 80170d4:	6554      	str	r4, [r2, #84]	; 0x54
 80170d6:	6594      	str	r4, [r2, #88]	; 0x58
 80170d8:	65d7      	str	r7, [r2, #92]	; 0x5c
 80170da:	6614      	str	r4, [r2, #96]	; 0x60
 80170dc:	6654      	str	r4, [r2, #100]	; 0x64
 80170de:	6694      	str	r4, [r2, #104]	; 0x68
 80170e0:	66d4      	str	r4, [r2, #108]	; 0x6c
 80170e2:	9901      	ldr	r1, [sp, #4]
 80170e4:	f8df c218 	ldr.w	ip, [pc, #536]	; 8017300 <MotionFX_initialize+0x418>
 80170e8:	487f      	ldr	r0, [pc, #508]	; (80172e8 <MotionFX_initialize+0x400>)
 80170ea:	6714      	str	r4, [r2, #112]	; 0x70
 80170ec:	6754      	str	r4, [r2, #116]	; 0x74
 80170ee:	2202      	movs	r2, #2
 80170f0:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
 80170f4:	f8c1 40a4 	str.w	r4, [r1, #164]	; 0xa4
 80170f8:	f8c1 40a8 	str.w	r4, [r1, #168]	; 0xa8
 80170fc:	f8c9 0010 	str.w	r0, [r9, #16]
 8017100:	f8c9 c030 	str.w	ip, [r9, #48]	; 0x30
 8017104:	f885 2818 	strb.w	r2, [r5, #2072]	; 0x818
 8017108:	edc9 4a00 	vstr	s9, [r9]
 801710c:	ed89 5a01 	vstr	s10, [r9, #4]
 8017110:	edc9 5a02 	vstr	s11, [r9, #8]
 8017114:	ed89 7a03 	vstr	s14, [r9, #12]
 8017118:	ed89 6a0a 	vstr	s12, [r9, #40]	; 0x28
 801711c:	edc9 6a0b 	vstr	s13, [r9, #44]	; 0x2c
 8017120:	edc9 7a0d 	vstr	s15, [r9, #52]	; 0x34
 8017124:	f8c9 7020 	str.w	r7, [r9, #32]
 8017128:	679c      	str	r4, [r3, #120]	; 0x78
 801712a:	67dc      	str	r4, [r3, #124]	; 0x7c
 801712c:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
 8017130:	f8c3 7084 	str.w	r7, [r3, #132]	; 0x84
 8017134:	f885 b810 	strb.w	fp, [r5, #2064]	; 0x810
 8017138:	f885 b811 	strb.w	fp, [r5, #2065]	; 0x811
 801713c:	f885 b812 	strb.w	fp, [r5, #2066]	; 0x812
 8017140:	f885 b813 	strb.w	fp, [r5, #2067]	; 0x813
 8017144:	f885 b814 	strb.w	fp, [r5, #2068]	; 0x814
 8017148:	f885 6815 	strb.w	r6, [r5, #2069]	; 0x815
 801714c:	f885 6816 	strb.w	r6, [r5, #2070]	; 0x816
 8017150:	f885 6817 	strb.w	r6, [r5, #2071]	; 0x817
 8017154:	f885 b820 	strb.w	fp, [r5, #2080]	; 0x820
 8017158:	f885 6834 	strb.w	r6, [r5, #2100]	; 0x834
 801715c:	f885 6836 	strb.w	r6, [r5, #2102]	; 0x836
 8017160:	f885 2835 	strb.w	r2, [r5, #2101]	; 0x835
 8017164:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
 8017168:	f8c3 408c 	str.w	r4, [r3, #140]	; 0x8c
 801716c:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
 8017170:	f8c3 7094 	str.w	r7, [r3, #148]	; 0x94
 8017174:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
 8017178:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
 801717c:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
 8017180:	f8c3 70a4 	str.w	r7, [r3, #164]	; 0xa4
 8017184:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
 8017188:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
 801718c:	f8c3 40b0 	str.w	r4, [r3, #176]	; 0xb0
 8017190:	f8c3 70b4 	str.w	r7, [r3, #180]	; 0xb4
 8017194:	f8c3 40b8 	str.w	r4, [r3, #184]	; 0xb8
 8017198:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
 801719c:	f8c3 40c0 	str.w	r4, [r3, #192]	; 0xc0
 80171a0:	f8c3 70c4 	str.w	r7, [r3, #196]	; 0xc4
 80171a4:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8
 80171a8:	f8c3 40cc 	str.w	r4, [r3, #204]	; 0xcc
 80171ac:	f8c3 40d0 	str.w	r4, [r3, #208]	; 0xd0
 80171b0:	f8c3 70d4 	str.w	r7, [r3, #212]	; 0xd4
 80171b4:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 80171b8:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
 80171bc:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
 80171c0:	f8c3 70e4 	str.w	r7, [r3, #228]	; 0xe4
 80171c4:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 80171c8:	f8c3 40ec 	str.w	r4, [r3, #236]	; 0xec
 80171cc:	f8c3 40f0 	str.w	r4, [r3, #240]	; 0xf0
 80171d0:	f8c3 70f4 	str.w	r7, [r3, #244]	; 0xf4
 80171d4:	63df      	str	r7, [r3, #60]	; 0x3c
 80171d6:	641c      	str	r4, [r3, #64]	; 0x40
 80171d8:	645c      	str	r4, [r3, #68]	; 0x44
 80171da:	649c      	str	r4, [r3, #72]	; 0x48
 80171dc:	64df      	str	r7, [r3, #76]	; 0x4c
 80171de:	f8ca 0010 	str.w	r0, [sl, #16]
 80171e2:	f8ca c030 	str.w	ip, [sl, #48]	; 0x30
 80171e6:	f885 25d8 	strb.w	r2, [r5, #1496]	; 0x5d8
 80171ea:	f885 25f5 	strb.w	r2, [r5, #1525]	; 0x5f5
 80171ee:	edca 4a00 	vstr	s9, [sl]
 80171f2:	ed8a 5a01 	vstr	s10, [sl, #4]
 80171f6:	edca 5a02 	vstr	s11, [sl, #8]
 80171fa:	ed8a 7a03 	vstr	s14, [sl, #12]
 80171fe:	ed8a 6a0a 	vstr	s12, [sl, #40]	; 0x28
 8017202:	edca 6a0b 	vstr	s13, [sl, #44]	; 0x2c
 8017206:	edca 7a0d 	vstr	s15, [sl, #52]	; 0x34
 801720a:	651c      	str	r4, [r3, #80]	; 0x50
 801720c:	655c      	str	r4, [r3, #84]	; 0x54
 801720e:	659c      	str	r4, [r3, #88]	; 0x58
 8017210:	65df      	str	r7, [r3, #92]	; 0x5c
 8017212:	661c      	str	r4, [r3, #96]	; 0x60
 8017214:	665c      	str	r4, [r3, #100]	; 0x64
 8017216:	669c      	str	r4, [r3, #104]	; 0x68
 8017218:	66dc      	str	r4, [r3, #108]	; 0x6c
 801721a:	671c      	str	r4, [r3, #112]	; 0x70
 801721c:	675c      	str	r4, [r3, #116]	; 0x74
 801721e:	f8ca 7020 	str.w	r7, [sl, #32]
 8017222:	f885 b5d0 	strb.w	fp, [r5, #1488]	; 0x5d0
 8017226:	f885 b5d1 	strb.w	fp, [r5, #1489]	; 0x5d1
 801722a:	f885 65d2 	strb.w	r6, [r5, #1490]	; 0x5d2
 801722e:	f885 b5d3 	strb.w	fp, [r5, #1491]	; 0x5d3
 8017232:	f885 b5d4 	strb.w	fp, [r5, #1492]	; 0x5d4
 8017236:	f885 65d5 	strb.w	r6, [r5, #1493]	; 0x5d5
 801723a:	f885 65d6 	strb.w	r6, [r5, #1494]	; 0x5d6
 801723e:	f885 65d7 	strb.w	r6, [r5, #1495]	; 0x5d7
 8017242:	f885 b5e0 	strb.w	fp, [r5, #1504]	; 0x5e0
 8017246:	f885 65f4 	strb.w	r6, [r5, #1524]	; 0x5f4
 801724a:	9201      	str	r2, [sp, #4]
 801724c:	f8c8 40b0 	str.w	r4, [r8, #176]	; 0xb0
 8017250:	f8c8 40b4 	str.w	r4, [r8, #180]	; 0xb4
 8017254:	f8c8 40b8 	str.w	r4, [r8, #184]	; 0xb8
 8017258:	f885 65f6 	strb.w	r6, [r5, #1526]	; 0x5f6
 801725c:	f7f7 fb32 	bl	800e8c4 <iNemo_setOrientation.constprop.51>
 8017260:	f7f7 fd0e 	bl	800ec80 <iNemo_setOrientation_6X.constprop.52>
 8017264:	4f21      	ldr	r7, [pc, #132]	; (80172ec <MotionFX_initialize+0x404>)
 8017266:	4822      	ldr	r0, [pc, #136]	; (80172f0 <MotionFX_initialize+0x408>)
 8017268:	4922      	ldr	r1, [pc, #136]	; (80172f4 <MotionFX_initialize+0x40c>)
 801726a:	4b23      	ldr	r3, [pc, #140]	; (80172f8 <MotionFX_initialize+0x410>)
 801726c:	9a01      	ldr	r2, [sp, #4]
 801726e:	f8df c094 	ldr.w	ip, [pc, #148]	; 8017304 <MotionFX_initialize+0x41c>
 8017272:	ed8a 7a03 	vstr	s14, [sl, #12]
 8017276:	f04f 547f 	mov.w	r4, #1069547520	; 0x3fc00000
 801727a:	f04f 3e01 	mov.w	lr, #16843009	; 0x1010101
 801727e:	edca 7a0d 	vstr	s15, [sl, #52]	; 0x34
 8017282:	ed89 7a03 	vstr	s14, [r9, #12]
 8017286:	edc9 7a0d 	vstr	s15, [r9, #52]	; 0x34
 801728a:	f885 25f5 	strb.w	r2, [r5, #1525]	; 0x5f5
 801728e:	f885 65f6 	strb.w	r6, [r5, #1526]	; 0x5f6
 8017292:	f885 2835 	strb.w	r2, [r5, #2101]	; 0x835
 8017296:	f885 6836 	strb.w	r6, [r5, #2102]	; 0x836
 801729a:	f8c5 c5d1 	str.w	ip, [r5, #1489]	; 0x5d1
 801729e:	e033      	b.n	8017308 <MotionFX_initialize+0x420>
 80172a0:	60000000 	.word	0x60000000
 80172a4:	3fc76cab 	.word	0x3fc76cab
 80172a8:	c0000000 	.word	0xc0000000
 80172ac:	3fb2875e 	.word	0x3fb2875e
 80172b0:	60000000 	.word	0x60000000
 80172b4:	3f9f1fed 	.word	0x3f9f1fed
 80172b8:	20000000 	.word	0x20000000
 80172bc:	3fc55a40 	.word	0x3fc55a40
 80172c0:	00000000 	.word	0x00000000
 80172c4:	3fbfdfb7 	.word	0x3fbfdfb7
 80172c8:	20001698 	.word	0x20001698
 80172cc:	3f2ac083 	.word	0x3f2ac083
 80172d0:	3dcccccd 	.word	0x3dcccccd
 80172d4:	3f639581 	.word	0x3f639581
 80172d8:	402ab021 	.word	0x402ab021
 80172dc:	3f13f7cf 	.word	0x3f13f7cf
 80172e0:	39712c28 	.word	0x39712c28
 80172e4:	3a09a027 	.word	0x3a09a027
 80172e8:	41200000 	.word	0x41200000
 80172ec:	3f666666 	.word	0x3f666666
 80172f0:	3a51b717 	.word	0x3a51b717
 80172f4:	3a378034 	.word	0x3a378034
 80172f8:	3b378034 	.word	0x3b378034
 80172fc:	20000000 	.word	0x20000000
 8017300:	39b24207 	.word	0x39b24207
 8017304:	01010001 	.word	0x01010001
 8017308:	f8c5 e811 	str.w	lr, [r5, #2065]	; 0x811
 801730c:	f8ca 7000 	str.w	r7, [sl]
 8017310:	f8c9 7000 	str.w	r7, [r9]
 8017314:	f8ca 4004 	str.w	r4, [sl, #4]
 8017318:	f8c9 4004 	str.w	r4, [r9, #4]
 801731c:	f8ca 0028 	str.w	r0, [sl, #40]	; 0x28
 8017320:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
 8017324:	f8ca 102c 	str.w	r1, [sl, #44]	; 0x2c
 8017328:	f8c9 102c 	str.w	r1, [r9, #44]	; 0x2c
 801732c:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
 8017330:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
 8017334:	b003      	add	sp, #12
 8017336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801733a:	bf00      	nop

0801733c <MotionFX_setKnobs>:
 801733c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801733e:	4b2f      	ldr	r3, [pc, #188]	; (80173fc <MotionFX_setKnobs+0xc0>)
 8017340:	f893 2941 	ldrb.w	r2, [r3, #2369]	; 0x941
 8017344:	b902      	cbnz	r2, 8017348 <MotionFX_setKnobs+0xc>
 8017346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017348:	2800      	cmp	r0, #0
 801734a:	d0fc      	beq.n	8017346 <MotionFX_setKnobs+0xa>
 801734c:	f203 52bc 	addw	r2, r3, #1468	; 0x5bc
 8017350:	6884      	ldr	r4, [r0, #8]
 8017352:	6806      	ldr	r6, [r0, #0]
 8017354:	6845      	ldr	r5, [r0, #4]
 8017356:	60d4      	str	r4, [r2, #12]
 8017358:	7b01      	ldrb	r1, [r0, #12]
 801735a:	f883 15d1 	strb.w	r1, [r3, #1489]	; 0x5d1
 801735e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017362:	f8d0 e014 	ldr.w	lr, [r0, #20]
 8017366:	6987      	ldr	r7, [r0, #24]
 8017368:	6317      	str	r7, [r2, #48]	; 0x30
 801736a:	f8c2 c028 	str.w	ip, [r2, #40]	; 0x28
 801736e:	f8c2 e02c 	str.w	lr, [r2, #44]	; 0x2c
 8017372:	f890 7028 	ldrb.w	r7, [r0, #40]	; 0x28
 8017376:	f883 75f5 	strb.w	r7, [r3, #1525]	; 0x5f5
 801737a:	f890 e035 	ldrb.w	lr, [r0, #53]	; 0x35
 801737e:	f883 e5f6 	strb.w	lr, [r3, #1526]	; 0x5f6
 8017382:	f883 1811 	strb.w	r1, [r3, #2065]	; 0x811
 8017386:	f203 71fc 	addw	r1, r3, #2044	; 0x7fc
 801738a:	6016      	str	r6, [r2, #0]
 801738c:	6055      	str	r5, [r2, #4]
 801738e:	6a02      	ldr	r2, [r0, #32]
 8017390:	f8d0 c01c 	ldr.w	ip, [r0, #28]
 8017394:	62ca      	str	r2, [r1, #44]	; 0x2c
 8017396:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8017398:	f883 e836 	strb.w	lr, [r3, #2102]	; 0x836
 801739c:	f883 7835 	strb.w	r7, [r3, #2101]	; 0x835
 80173a0:	6b87      	ldr	r7, [r0, #56]	; 0x38
 80173a2:	f8c1 c028 	str.w	ip, [r1, #40]	; 0x28
 80173a6:	630a      	str	r2, [r1, #48]	; 0x30
 80173a8:	4a15      	ldr	r2, [pc, #84]	; (8017400 <MotionFX_setKnobs+0xc4>)
 80173aa:	600e      	str	r6, [r1, #0]
 80173ac:	604d      	str	r5, [r1, #4]
 80173ae:	60cc      	str	r4, [r1, #12]
 80173b0:	f8c3 794c 	str.w	r7, [r3, #2380]	; 0x94c
 80173b4:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80173b8:	7013      	strb	r3, [r2, #0]
 80173ba:	f890 e031 	ldrb.w	lr, [r0, #49]	; 0x31
 80173be:	f890 702a 	ldrb.w	r7, [r0, #42]	; 0x2a
 80173c2:	f890 602e 	ldrb.w	r6, [r0, #46]	; 0x2e
 80173c6:	f890 5032 	ldrb.w	r5, [r0, #50]	; 0x32
 80173ca:	f890 402b 	ldrb.w	r4, [r0, #43]	; 0x2b
 80173ce:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 80173d2:	f890 c02d 	ldrb.w	ip, [r0, #45]	; 0x2d
 80173d6:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
 80173da:	f882 e008 	strb.w	lr, [r2, #8]
 80173de:	7057      	strb	r7, [r2, #1]
 80173e0:	7156      	strb	r6, [r2, #5]
 80173e2:	7255      	strb	r5, [r2, #9]
 80173e4:	7094      	strb	r4, [r2, #2]
 80173e6:	7293      	strb	r3, [r2, #10]
 80173e8:	f882 c004 	strb.w	ip, [r2, #4]
 80173ec:	7191      	strb	r1, [r2, #6]
 80173ee:	f7f7 fa69 	bl	800e8c4 <iNemo_setOrientation.constprop.51>
 80173f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80173f6:	f7f7 bc43 	b.w	800ec80 <iNemo_setOrientation_6X.constprop.52>
 80173fa:	bf00      	nop
 80173fc:	20001698 	.word	0x20001698
 8017400:	20000000 	.word	0x20000000

08017404 <MotionFX_getKnobs>:
 8017404:	4b28      	ldr	r3, [pc, #160]	; (80174a8 <MotionFX_getKnobs+0xa4>)
 8017406:	f893 2941 	ldrb.w	r2, [r3, #2369]	; 0x941
 801740a:	b902      	cbnz	r2, 801740e <MotionFX_getKnobs+0xa>
 801740c:	4770      	bx	lr
 801740e:	2800      	cmp	r0, #0
 8017410:	d0fc      	beq.n	801740c <MotionFX_getKnobs+0x8>
 8017412:	b4f0      	push	{r4, r5, r6, r7}
 8017414:	f203 72fc 	addw	r2, r3, #2044	; 0x7fc
 8017418:	68d1      	ldr	r1, [r2, #12]
 801741a:	6854      	ldr	r4, [r2, #4]
 801741c:	6815      	ldr	r5, [r2, #0]
 801741e:	6005      	str	r5, [r0, #0]
 8017420:	6044      	str	r4, [r0, #4]
 8017422:	6081      	str	r1, [r0, #8]
 8017424:	f893 1811 	ldrb.w	r1, [r3, #2065]	; 0x811
 8017428:	7301      	strb	r1, [r0, #12]
 801742a:	f203 51bc 	addw	r1, r3, #1468	; 0x5bc
 801742e:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8017430:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8017432:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8017434:	6a8f      	ldr	r7, [r1, #40]	; 0x28
 8017436:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8017438:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801743a:	6242      	str	r2, [r0, #36]	; 0x24
 801743c:	6107      	str	r7, [r0, #16]
 801743e:	6185      	str	r5, [r0, #24]
 8017440:	61c4      	str	r4, [r0, #28]
 8017442:	6146      	str	r6, [r0, #20]
 8017444:	6201      	str	r1, [r0, #32]
 8017446:	4a19      	ldr	r2, [pc, #100]	; (80174ac <MotionFX_getKnobs+0xa8>)
 8017448:	f893 1835 	ldrb.w	r1, [r3, #2101]	; 0x835
 801744c:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
 8017450:	f893 6836 	ldrb.w	r6, [r3, #2102]	; 0x836
 8017454:	f8d3 594c 	ldr.w	r5, [r3, #2380]	; 0x94c
 8017458:	7814      	ldrb	r4, [r2, #0]
 801745a:	7911      	ldrb	r1, [r2, #4]
 801745c:	7a13      	ldrb	r3, [r2, #8]
 801745e:	f880 6035 	strb.w	r6, [r0, #53]	; 0x35
 8017462:	6385      	str	r5, [r0, #56]	; 0x38
 8017464:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
 8017468:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d
 801746c:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
 8017470:	2300      	movs	r3, #0
 8017472:	7857      	ldrb	r7, [r2, #1]
 8017474:	7956      	ldrb	r6, [r2, #5]
 8017476:	7a55      	ldrb	r5, [r2, #9]
 8017478:	7894      	ldrb	r4, [r2, #2]
 801747a:	7991      	ldrb	r1, [r2, #6]
 801747c:	7a92      	ldrb	r2, [r2, #10]
 801747e:	f880 702a 	strb.w	r7, [r0, #42]	; 0x2a
 8017482:	f880 602e 	strb.w	r6, [r0, #46]	; 0x2e
 8017486:	f880 5032 	strb.w	r5, [r0, #50]	; 0x32
 801748a:	f880 402b 	strb.w	r4, [r0, #43]	; 0x2b
 801748e:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
 8017492:	f880 2033 	strb.w	r2, [r0, #51]	; 0x33
 8017496:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801749a:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
 801749e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
 80174a2:	bcf0      	pop	{r4, r5, r6, r7}
 80174a4:	4770      	bx	lr
 80174a6:	bf00      	nop
 80174a8:	20001698 	.word	0x20001698
 80174ac:	20000000 	.word	0x20000000

080174b0 <MotionFX_enable_6X>:
 80174b0:	4b0d      	ldr	r3, [pc, #52]	; (80174e8 <MotionFX_enable_6X+0x38>)
 80174b2:	f893 2941 	ldrb.w	r2, [r3, #2369]	; 0x941
 80174b6:	b112      	cbz	r2, 80174be <MotionFX_enable_6X+0xe>
 80174b8:	f8c3 0944 	str.w	r0, [r3, #2372]	; 0x944
 80174bc:	b900      	cbnz	r0, 80174c0 <MotionFX_enable_6X+0x10>
 80174be:	4770      	bx	lr
 80174c0:	b430      	push	{r4, r5}
 80174c2:	4a0a      	ldr	r2, [pc, #40]	; (80174ec <MotionFX_enable_6X+0x3c>)
 80174c4:	4d0a      	ldr	r5, [pc, #40]	; (80174f0 <MotionFX_enable_6X+0x40>)
 80174c6:	480b      	ldr	r0, [pc, #44]	; (80174f4 <MotionFX_enable_6X+0x44>)
 80174c8:	60d8      	str	r0, [r3, #12]
 80174ca:	f04f 41ff 	mov.w	r1, #2139095040	; 0x7f800000
 80174ce:	6099      	str	r1, [r3, #8]
 80174d0:	2100      	movs	r1, #0
 80174d2:	2400      	movs	r4, #0
 80174d4:	f882 18de 	strb.w	r1, [r2, #2270]	; 0x8de
 80174d8:	f882 18dd 	strb.w	r1, [r2, #2269]	; 0x8dd
 80174dc:	f882 18dc 	strb.w	r1, [r2, #2268]	; 0x8dc
 80174e0:	e9c3 4500 	strd	r4, r5, [r3]
 80174e4:	bc30      	pop	{r4, r5}
 80174e6:	4770      	bx	lr
 80174e8:	20001698 	.word	0x20001698
 80174ec:	20000000 	.word	0x20000000
 80174f0:	fff80000 	.word	0xfff80000
 80174f4:	ff800000 	.word	0xff800000

080174f8 <MotionFX_enable_9X>:
 80174f8:	4b11      	ldr	r3, [pc, #68]	; (8017540 <MotionFX_enable_9X+0x48>)
 80174fa:	f893 2941 	ldrb.w	r2, [r3, #2369]	; 0x941
 80174fe:	b112      	cbz	r2, 8017506 <MotionFX_enable_9X+0xe>
 8017500:	f8c3 0948 	str.w	r0, [r3, #2376]	; 0x948
 8017504:	b900      	cbnz	r0, 8017508 <MotionFX_enable_9X+0x10>
 8017506:	4770      	bx	lr
 8017508:	e92d 0370 	stmdb	sp!, {r4, r5, r6, r8, r9}
 801750c:	4a0d      	ldr	r2, [pc, #52]	; (8017544 <MotionFX_enable_9X+0x4c>)
 801750e:	f8df 903c 	ldr.w	r9, [pc, #60]	; 801754c <MotionFX_enable_9X+0x54>
 8017512:	480d      	ldr	r0, [pc, #52]	; (8017548 <MotionFX_enable_9X+0x50>)
 8017514:	60d8      	str	r0, [r3, #12]
 8017516:	f04f 41ff 	mov.w	r1, #2139095040	; 0x7f800000
 801751a:	f241 16b6 	movw	r6, #4534	; 0x11b6
 801751e:	f241 15b5 	movw	r5, #4533	; 0x11b5
 8017522:	f241 14b4 	movw	r4, #4532	; 0x11b4
 8017526:	6099      	str	r1, [r3, #8]
 8017528:	2100      	movs	r1, #0
 801752a:	5591      	strb	r1, [r2, r6]
 801752c:	5551      	strb	r1, [r2, r5]
 801752e:	5511      	strb	r1, [r2, r4]
 8017530:	f04f 0800 	mov.w	r8, #0
 8017534:	e9c3 8900 	strd	r8, r9, [r3]
 8017538:	e8bd 0370 	ldmia.w	sp!, {r4, r5, r6, r8, r9}
 801753c:	4770      	bx	lr
 801753e:	bf00      	nop
 8017540:	20001698 	.word	0x20001698
 8017544:	20000000 	.word	0x20000000
 8017548:	ff800000 	.word	0xff800000
 801754c:	fff80000 	.word	0xfff80000

08017550 <MotionFX_update>:
 8017550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017554:	4eca      	ldr	r6, [pc, #808]	; (8017880 <MotionFX_update+0x330>)
 8017556:	ed2d 8b02 	vpush	{d8}
 801755a:	f896 3941 	ldrb.w	r3, [r6, #2369]	; 0x941
 801755e:	b08a      	sub	sp, #40	; 0x28
 8017560:	b923      	cbnz	r3, 801756c <MotionFX_update+0x1c>
 8017562:	b00a      	add	sp, #40	; 0x28
 8017564:	ecbd 8b02 	vpop	{d8}
 8017568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801756c:	4604      	mov	r4, r0
 801756e:	eeb0 8a40 	vmov.f32	s16, s0
 8017572:	2a00      	cmp	r2, #0
 8017574:	f000 80d7 	beq.w	8017726 <MotionFX_update+0x1d6>
 8017578:	4bc2      	ldr	r3, [pc, #776]	; (8017884 <MotionFX_update+0x334>)
 801757a:	68cf      	ldr	r7, [r1, #12]
 801757c:	f8d1 c000 	ldr.w	ip, [r1]
 8017580:	690d      	ldr	r5, [r1, #16]
 8017582:	f8d1 e018 	ldr.w	lr, [r1, #24]
 8017586:	619f      	str	r7, [r3, #24]
 8017588:	f5a3 7010 	sub.w	r0, r3, #576	; 0x240
 801758c:	f8c3 c00c 	str.w	ip, [r3, #12]
 8017590:	6187      	str	r7, [r0, #24]
 8017592:	684f      	ldr	r7, [r1, #4]
 8017594:	f8c0 c00c 	str.w	ip, [r0, #12]
 8017598:	f8d1 c01c 	ldr.w	ip, [r1, #28]
 801759c:	f8c0 e024 	str.w	lr, [r0, #36]	; 0x24
 80175a0:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
 80175a4:	f8d1 e014 	ldr.w	lr, [r1, #20]
 80175a8:	6107      	str	r7, [r0, #16]
 80175aa:	611f      	str	r7, [r3, #16]
 80175ac:	f8d6 794c 	ldr.w	r7, [r6, #2380]	; 0x94c
 80175b0:	61dd      	str	r5, [r3, #28]
 80175b2:	61c5      	str	r5, [r0, #28]
 80175b4:	688d      	ldr	r5, [r1, #8]
 80175b6:	6a09      	ldr	r1, [r1, #32]
 80175b8:	6145      	str	r5, [r0, #20]
 80175ba:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
 80175be:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
 80175c2:	f8c3 e020 	str.w	lr, [r3, #32]
 80175c6:	f8c0 e020 	str.w	lr, [r0, #32]
 80175ca:	62c1      	str	r1, [r0, #44]	; 0x2c
 80175cc:	615d      	str	r5, [r3, #20]
 80175ce:	62d9      	str	r1, [r3, #44]	; 0x2c
 80175d0:	b187      	cbz	r7, 80175f4 <MotionFX_update+0xa4>
 80175d2:	f896 3834 	ldrb.w	r3, [r6, #2100]	; 0x834
 80175d6:	07dd      	lsls	r5, r3, #31
 80175d8:	d403      	bmi.n	80175e2 <MotionFX_update+0x92>
 80175da:	f896 35f4 	ldrb.w	r3, [r6, #1524]	; 0x5f4
 80175de:	07d8      	lsls	r0, r3, #31
 80175e0:	d525      	bpl.n	801762e <MotionFX_update+0xde>
 80175e2:	49a9      	ldr	r1, [pc, #676]	; (8017888 <MotionFX_update+0x338>)
 80175e4:	f8d1 30c0 	ldr.w	r3, [r1, #192]	; 0xc0
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	f340 809e 	ble.w	801772a <MotionFX_update+0x1da>
 80175ee:	3b01      	subs	r3, #1
 80175f0:	f8c1 30c0 	str.w	r3, [r1, #192]	; 0xc0
 80175f4:	f8d6 3944 	ldr.w	r3, [r6, #2372]	; 0x944
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	f000 808e 	beq.w	801771a <MotionFX_update+0x1ca>
 80175fe:	f896 35f4 	ldrb.w	r3, [r6, #1524]	; 0x5f4
 8017602:	07d9      	lsls	r1, r3, #31
 8017604:	f140 8089 	bpl.w	801771a <MotionFX_update+0x1ca>
 8017608:	4610      	mov	r0, r2
 801760a:	eeb0 0a48 	vmov.f32	s0, s16
 801760e:	9201      	str	r2, [sp, #4]
 8017610:	f7fe fe7c 	bl	801630c <iNemo_update_6X.constprop.45>
 8017614:	f8d6 3948 	ldr.w	r3, [r6, #2376]	; 0x948
 8017618:	9a01      	ldr	r2, [sp, #4]
 801761a:	b143      	cbz	r3, 801762e <MotionFX_update+0xde>
 801761c:	f896 3834 	ldrb.w	r3, [r6, #2100]	; 0x834
 8017620:	07db      	lsls	r3, r3, #31
 8017622:	d504      	bpl.n	801762e <MotionFX_update+0xde>
 8017624:	4610      	mov	r0, r2
 8017626:	eeb0 0a48 	vmov.f32	s0, s16
 801762a:	f7ff f88d 	bl	8016748 <iNemo_update.constprop.46>
 801762e:	4d97      	ldr	r5, [pc, #604]	; (801788c <MotionFX_update+0x33c>)
 8017630:	69ea      	ldr	r2, [r5, #28]
 8017632:	69af      	ldr	r7, [r5, #24]
 8017634:	f8d5 025c 	ldr.w	r0, [r5, #604]	; 0x25c
 8017638:	f8d5 1258 	ldr.w	r1, [r5, #600]	; 0x258
 801763c:	60e1      	str	r1, [r4, #12]
 801763e:	64a7      	str	r7, [r4, #72]	; 0x48
 8017640:	f8d5 1260 	ldr.w	r1, [r5, #608]	; 0x260
 8017644:	6a2f      	ldr	r7, [r5, #32]
 8017646:	64e2      	str	r2, [r4, #76]	; 0x4c
 8017648:	6120      	str	r0, [r4, #16]
 801764a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801764c:	f8d5 0264 	ldr.w	r0, [r5, #612]	; 0x264
 8017650:	6527      	str	r7, [r4, #80]	; 0x50
 8017652:	6161      	str	r1, [r4, #20]
 8017654:	68ef      	ldr	r7, [r5, #12]
 8017656:	f8d5 124c 	ldr.w	r1, [r5, #588]	; 0x24c
 801765a:	61a0      	str	r0, [r4, #24]
 801765c:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
 8017660:	6562      	str	r2, [r4, #84]	; 0x54
 8017662:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
 8017666:	63e7      	str	r7, [r4, #60]	; 0x3c
 8017668:	f8d5 72d4 	ldr.w	r7, [r5, #724]	; 0x2d4
 801766c:	65a0      	str	r0, [r4, #88]	; 0x58
 801766e:	f8d5 02e0 	ldr.w	r0, [r5, #736]	; 0x2e0
 8017672:	6021      	str	r1, [r4, #0]
 8017674:	6662      	str	r2, [r4, #100]	; 0x64
 8017676:	6929      	ldr	r1, [r5, #16]
 8017678:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 801767c:	65e2      	str	r2, [r4, #92]	; 0x5c
 801767e:	61e7      	str	r7, [r4, #28]
 8017680:	6421      	str	r1, [r4, #64]	; 0x40
 8017682:	62a0      	str	r0, [r4, #40]	; 0x28
 8017684:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
 8017688:	f8d5 2250 	ldr.w	r2, [r5, #592]	; 0x250
 801768c:	f8d5 72d8 	ldr.w	r7, [r5, #728]	; 0x2d8
 8017690:	f8d5 12e4 	ldr.w	r1, [r5, #740]	; 0x2e4
 8017694:	66a0      	str	r0, [r4, #104]	; 0x68
 8017696:	f8d5 0254 	ldr.w	r0, [r5, #596]	; 0x254
 801769a:	6062      	str	r2, [r4, #4]
 801769c:	696a      	ldr	r2, [r5, #20]
 801769e:	f8d5 32e8 	ldr.w	r3, [r5, #744]	; 0x2e8
 80176a2:	6227      	str	r7, [r4, #32]
 80176a4:	f8d5 709c 	ldr.w	r7, [r5, #156]	; 0x9c
 80176a8:	62e1      	str	r1, [r4, #44]	; 0x2c
 80176aa:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 80176ae:	6462      	str	r2, [r4, #68]	; 0x44
 80176b0:	f8d5 22dc 	ldr.w	r2, [r5, #732]	; 0x2dc
 80176b4:	6262      	str	r2, [r4, #36]	; 0x24
 80176b6:	60a0      	str	r0, [r4, #8]
 80176b8:	66e1      	str	r1, [r4, #108]	; 0x6c
 80176ba:	6323      	str	r3, [r4, #48]	; 0x30
 80176bc:	f505 714f 	add.w	r1, r5, #828	; 0x33c
 80176c0:	f505 7013 	add.w	r0, r5, #588	; 0x24c
 80176c4:	aa03      	add	r2, sp, #12
 80176c6:	6627      	str	r7, [r4, #96]	; 0x60
 80176c8:	f7ff fb02 	bl	8016cd0 <quatErr2EulerErr>
 80176cc:	9b03      	ldr	r3, [sp, #12]
 80176ce:	63a3      	str	r3, [r4, #56]	; 0x38
 80176d0:	aa03      	add	r2, sp, #12
 80176d2:	f105 01fc 	add.w	r1, r5, #252	; 0xfc
 80176d6:	f105 000c 	add.w	r0, r5, #12
 80176da:	f7ff faf9 	bl	8016cd0 <quatErr2EulerErr>
 80176de:	9a03      	ldr	r2, [sp, #12]
 80176e0:	f896 35f6 	ldrb.w	r3, [r6, #1526]	; 0x5f6
 80176e4:	6762      	str	r2, [r4, #116]	; 0x74
 80176e6:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 80176ea:	f104 0258 	add.w	r2, r4, #88	; 0x58
 80176ee:	f104 0048 	add.w	r0, r4, #72	; 0x48
 80176f2:	f7f7 fdcd 	bl	800f290 <iNemo_quat2heading>
 80176f6:	f896 3836 	ldrb.w	r3, [r6, #2102]	; 0x836
 80176fa:	ed84 0a1c 	vstr	s0, [r4, #112]	; 0x70
 80176fe:	f104 021c 	add.w	r2, r4, #28
 8017702:	4621      	mov	r1, r4
 8017704:	f104 000c 	add.w	r0, r4, #12
 8017708:	f7f7 fdc2 	bl	800f290 <iNemo_quat2heading>
 801770c:	ed84 0a0d 	vstr	s0, [r4, #52]	; 0x34
 8017710:	b00a      	add	sp, #40	; 0x28
 8017712:	ecbd 8b02 	vpop	{d8}
 8017716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801771a:	f8d6 3948 	ldr.w	r3, [r6, #2376]	; 0x948
 801771e:	2b00      	cmp	r3, #0
 8017720:	f47f af7c 	bne.w	801761c <MotionFX_update+0xcc>
 8017724:	e783      	b.n	801762e <MotionFX_update+0xde>
 8017726:	aa06      	add	r2, sp, #24
 8017728:	e726      	b.n	8017578 <MotionFX_update+0x28>
 801772a:	f8d6 3948 	ldr.w	r3, [r6, #2376]	; 0x948
 801772e:	2b00      	cmp	r3, #0
 8017730:	d16c      	bne.n	801780c <MotionFX_update+0x2bc>
 8017732:	f8d6 1950 	ldr.w	r1, [r6, #2384]	; 0x950
 8017736:	f101 0e01 	add.w	lr, r1, #1
 801773a:	f8d6 8944 	ldr.w	r8, [r6, #2372]	; 0x944
 801773e:	f1b8 0f00 	cmp.w	r8, #0
 8017742:	f000 80ad 	beq.w	80178a0 <MotionFX_update+0x350>
 8017746:	4852      	ldr	r0, [pc, #328]	; (8017890 <MotionFX_update+0x340>)
 8017748:	f8df c14c 	ldr.w	ip, [pc, #332]	; 8017898 <MotionFX_update+0x348>
 801774c:	ed90 6a00 	vldr	s12, [r0]
 8017750:	ed9c 4a02 	vldr	s8, [ip, #8]
 8017754:	ecfc 5a01 	vldmia	ip!, {s11}
 8017758:	f8c6 e950 	str.w	lr, [r6, #2384]	; 0x950
 801775c:	4605      	mov	r5, r0
 801775e:	4607      	mov	r7, r0
 8017760:	ee07 1a90 	vmov	s15, r1
 8017764:	3504      	adds	r5, #4
 8017766:	3708      	adds	r7, #8
 8017768:	ed97 5a00 	vldr	s10, [r7]
 801776c:	edd5 6a00 	vldr	s13, [r5]
 8017770:	eddc 3a00 	vldr	s7, [ip]
 8017774:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017778:	ee07 ea10 	vmov	s14, lr
 801777c:	ee27 6a86 	vmul.f32	s12, s15, s12
 8017780:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017784:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8017788:	ee67 7a85 	vmul.f32	s15, s15, s10
 801778c:	eec5 4a87 	vdiv.f32	s9, s11, s14
 8017790:	f5be 7ffa 	cmp.w	lr, #500	; 0x1f4
 8017794:	eec6 5a07 	vdiv.f32	s11, s12, s14
 8017798:	ee83 5a87 	vdiv.f32	s10, s7, s14
 801779c:	ee86 6a87 	vdiv.f32	s12, s13, s14
 80177a0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80177a4:	eec4 7a07 	vdiv.f32	s15, s8, s14
 80177a8:	ee75 5aa4 	vadd.f32	s11, s11, s9
 80177ac:	ee36 7a05 	vadd.f32	s14, s12, s10
 80177b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80177b4:	edc0 5a00 	vstr	s11, [r0]
 80177b8:	ed85 7a00 	vstr	s14, [r5]
 80177bc:	edc7 7a00 	vstr	s15, [r7]
 80177c0:	f47f af1d 	bne.w	80175fe <MotionFX_update+0xae>
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d078      	beq.n	80178ba <MotionFX_update+0x36a>
 80177c8:	edd5 6a00 	vldr	s13, [r5]
 80177cc:	ed97 7a00 	vldr	s14, [r7]
 80177d0:	edd0 7a00 	vldr	s15, [r0]
 80177d4:	4b2f      	ldr	r3, [pc, #188]	; (8017894 <MotionFX_update+0x344>)
 80177d6:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80177da:	ee66 6a86 	vmul.f32	s13, s13, s12
 80177de:	ee27 7a06 	vmul.f32	s14, s14, s12
 80177e2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80177e6:	edc3 6a0b 	vstr	s13, [r3, #44]	; 0x2c
 80177ea:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30
 80177ee:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
 80177f2:	f1b8 0f00 	cmp.w	r8, #0
 80177f6:	d160      	bne.n	80178ba <MotionFX_update+0x36a>
 80177f8:	2300      	movs	r3, #0
 80177fa:	2100      	movs	r1, #0
 80177fc:	6003      	str	r3, [r0, #0]
 80177fe:	602b      	str	r3, [r5, #0]
 8017800:	603b      	str	r3, [r7, #0]
 8017802:	f8c6 1950 	str.w	r1, [r6, #2384]	; 0x950
 8017806:	f8c6 194c 	str.w	r1, [r6, #2380]	; 0x94c
 801780a:	e6f3      	b.n	80175f4 <MotionFX_update+0xa4>
 801780c:	f8df e08c 	ldr.w	lr, [pc, #140]	; 801789c <MotionFX_update+0x34c>
 8017810:	f8d6 1950 	ldr.w	r1, [r6, #2384]	; 0x950
 8017814:	edde 3a02 	vldr	s7, [lr, #8]
 8017818:	ecfe 5a01 	vldmia	lr!, {s11}
 801781c:	481c      	ldr	r0, [pc, #112]	; (8017890 <MotionFX_update+0x340>)
 801781e:	ed9e 5a00 	vldr	s10, [lr]
 8017822:	edd0 4a02 	vldr	s9, [r0, #8]
 8017826:	ed90 6a00 	vldr	s12, [r0]
 801782a:	edd0 6a01 	vldr	s13, [r0, #4]
 801782e:	ee07 1a90 	vmov	s15, r1
 8017832:	f101 0e01 	add.w	lr, r1, #1
 8017836:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801783a:	ee07 ea90 	vmov	s15, lr
 801783e:	ee27 6a06 	vmul.f32	s12, s14, s12
 8017842:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017846:	ee67 6a26 	vmul.f32	s13, s14, s13
 801784a:	ee27 7a24 	vmul.f32	s14, s14, s9
 801784e:	ee85 4aa7 	vdiv.f32	s8, s11, s15
 8017852:	eec5 4a27 	vdiv.f32	s9, s10, s15
 8017856:	eec6 5a27 	vdiv.f32	s11, s12, s15
 801785a:	ee83 5aa7 	vdiv.f32	s10, s7, s15
 801785e:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8017862:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8017866:	ee75 5a84 	vadd.f32	s11, s11, s8
 801786a:	ee36 7a24 	vadd.f32	s14, s12, s9
 801786e:	ee76 7a85 	vadd.f32	s15, s13, s10
 8017872:	edc0 5a00 	vstr	s11, [r0]
 8017876:	ed80 7a01 	vstr	s14, [r0, #4]
 801787a:	edc0 7a02 	vstr	s15, [r0, #8]
 801787e:	e75c      	b.n	801773a <MotionFX_update+0x1ea>
 8017880:	20001698 	.word	0x20001698
 8017884:	20001d9c 	.word	0x20001d9c
 8017888:	200010f8 	.word	0x200010f8
 801788c:	20001c90 	.word	0x20001c90
 8017890:	20001fec 	.word	0x20001fec
 8017894:	20001e94 	.word	0x20001e94
 8017898:	20000414 	.word	0x20000414
 801789c:	20000cec 	.word	0x20000cec
 80178a0:	f5be 7ffa 	cmp.w	lr, #500	; 0x1f4
 80178a4:	f8c6 e950 	str.w	lr, [r6, #2384]	; 0x950
 80178a8:	f47f aeb7 	bne.w	801761a <MotionFX_update+0xca>
 80178ac:	480e      	ldr	r0, [pc, #56]	; (80178e8 <MotionFX_update+0x398>)
 80178ae:	1d05      	adds	r5, r0, #4
 80178b0:	f100 0708 	add.w	r7, r0, #8
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	d187      	bne.n	80177c8 <MotionFX_update+0x278>
 80178b8:	e79e      	b.n	80177f8 <MotionFX_update+0x2a8>
 80178ba:	edd5 6a00 	vldr	s13, [r5]
 80178be:	ed97 7a00 	vldr	s14, [r7]
 80178c2:	edd0 7a00 	vldr	s15, [r0]
 80178c6:	4b09      	ldr	r3, [pc, #36]	; (80178ec <MotionFX_update+0x39c>)
 80178c8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80178cc:	ee66 6a86 	vmul.f32	s13, s13, s12
 80178d0:	ee27 7a06 	vmul.f32	s14, s14, s12
 80178d4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80178d8:	edc3 6a0b 	vstr	s13, [r3, #44]	; 0x2c
 80178dc:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30
 80178e0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
 80178e4:	e788      	b.n	80177f8 <MotionFX_update+0x2a8>
 80178e6:	bf00      	nop
 80178e8:	20001fec 	.word	0x20001fec
 80178ec:	20001c54 	.word	0x20001c54

080178f0 <MotionFX_propagate>:
 80178f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178f4:	ed2d 8b0e 	vpush	{d8-d14}
 80178f8:	4c58      	ldr	r4, [pc, #352]	; (8017a5c <MotionFX_propagate+0x16c>)
 80178fa:	f894 3941 	ldrb.w	r3, [r4, #2369]	; 0x941
 80178fe:	b099      	sub	sp, #100	; 0x64
 8017900:	b923      	cbnz	r3, 801790c <MotionFX_propagate+0x1c>
 8017902:	b019      	add	sp, #100	; 0x64
 8017904:	ecbd 8b0e 	vpop	{d8-d14}
 8017908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801790c:	ed91 3a03 	vldr	s6, [r1, #12]
 8017910:	edd1 9a00 	vldr	s19, [r1]
 8017914:	edd1 3a04 	vldr	s7, [r1, #16]
 8017918:	ed91 9a01 	vldr	s18, [r1, #4]
 801791c:	ed91 5a05 	vldr	s10, [r1, #20]
 8017920:	edd1 8a02 	vldr	s17, [r1, #8]
 8017924:	ed91 4a06 	vldr	s8, [r1, #24]
 8017928:	edd1 4a07 	vldr	s9, [r1, #28]
 801792c:	edd1 5a08 	vldr	s11, [r1, #32]
 8017930:	f8d4 3948 	ldr.w	r3, [r4, #2376]	; 0x948
 8017934:	ed8d 0a02 	vstr	s0, [sp, #8]
 8017938:	f204 7804 	addw	r8, r4, #1796	; 0x704
 801793c:	f204 4bc4 	addw	fp, r4, #1220	; 0x4c4
 8017940:	4682      	mov	sl, r0
 8017942:	ed88 3a06 	vstr	s6, [r8, #24]
 8017946:	edc8 9a03 	vstr	s19, [r8, #12]
 801794a:	ed88 4a09 	vstr	s8, [r8, #36]	; 0x24
 801794e:	ed8b 3a06 	vstr	s6, [fp, #24]
 8017952:	edcb 9a03 	vstr	s19, [fp, #12]
 8017956:	ed8b 4a09 	vstr	s8, [fp, #36]	; 0x24
 801795a:	edc8 3a07 	vstr	s7, [r8, #28]
 801795e:	ed88 9a04 	vstr	s18, [r8, #16]
 8017962:	ed8b 9a04 	vstr	s18, [fp, #16]
 8017966:	edc8 4a0a 	vstr	s9, [r8, #40]	; 0x28
 801796a:	edcb 3a07 	vstr	s7, [fp, #28]
 801796e:	edcb 4a0a 	vstr	s9, [fp, #40]	; 0x28
 8017972:	ed88 5a08 	vstr	s10, [r8, #32]
 8017976:	edc8 8a05 	vstr	s17, [r8, #20]
 801797a:	edcb 8a05 	vstr	s17, [fp, #20]
 801797e:	edc8 5a0b 	vstr	s11, [r8, #44]	; 0x2c
 8017982:	ed8b 5a08 	vstr	s10, [fp, #32]
 8017986:	edcb 5a0b 	vstr	s11, [fp, #44]	; 0x2c
 801798a:	2b00      	cmp	r3, #0
 801798c:	f040 8324 	bne.w	8017fd8 <MotionFX_propagate+0x6e8>
 8017990:	f604 0538 	addw	r5, r4, #2104	; 0x838
 8017994:	f8d4 3944 	ldr.w	r3, [r4, #2372]	; 0x944
 8017998:	2b00      	cmp	r3, #0
 801799a:	d163      	bne.n	8017a64 <MotionFX_propagate+0x174>
 801799c:	4f30      	ldr	r7, [pc, #192]	; (8017a60 <MotionFX_propagate+0x170>)
 801799e:	69bb      	ldr	r3, [r7, #24]
 80179a0:	69f8      	ldr	r0, [r7, #28]
 80179a2:	6a3a      	ldr	r2, [r7, #32]
 80179a4:	69e9      	ldr	r1, [r5, #28]
 80179a6:	69ac      	ldr	r4, [r5, #24]
 80179a8:	f8ca 3048 	str.w	r3, [sl, #72]	; 0x48
 80179ac:	6a2b      	ldr	r3, [r5, #32]
 80179ae:	f8ca 004c 	str.w	r0, [sl, #76]	; 0x4c
 80179b2:	f8ca 400c 	str.w	r4, [sl, #12]
 80179b6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80179b8:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80179ba:	f8ca 2050 	str.w	r2, [sl, #80]	; 0x50
 80179be:	f8ca 1010 	str.w	r1, [sl, #16]
 80179c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80179c6:	68f9      	ldr	r1, [r7, #12]
 80179c8:	f8ca 3014 	str.w	r3, [sl, #20]
 80179cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80179d0:	f8ca 4054 	str.w	r4, [sl, #84]	; 0x54
 80179d4:	f8ca 0018 	str.w	r0, [sl, #24]
 80179d8:	68ec      	ldr	r4, [r5, #12]
 80179da:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
 80179de:	f8ca 103c 	str.w	r1, [sl, #60]	; 0x3c
 80179e2:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 80179e6:	f8ca 2058 	str.w	r2, [sl, #88]	; 0x58
 80179ea:	f8ca 3064 	str.w	r3, [sl, #100]	; 0x64
 80179ee:	693a      	ldr	r2, [r7, #16]
 80179f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80179f4:	f8ca 305c 	str.w	r3, [sl, #92]	; 0x5c
 80179f8:	f8ca 4000 	str.w	r4, [sl]
 80179fc:	f8ca 001c 	str.w	r0, [sl, #28]
 8017a00:	f8ca 2040 	str.w	r2, [sl, #64]	; 0x40
 8017a04:	f8ca 1028 	str.w	r1, [sl, #40]	; 0x28
 8017a08:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8017a0c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8017a10:	692a      	ldr	r2, [r5, #16]
 8017a12:	f8d5 e0a4 	ldr.w	lr, [r5, #164]	; 0xa4
 8017a16:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8017a1a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8017a1e:	697e      	ldr	r6, [r7, #20]
 8017a20:	f8ca 1068 	str.w	r1, [sl, #104]	; 0x68
 8017a24:	f8ca 2004 	str.w	r2, [sl, #4]
 8017a28:	6969      	ldr	r1, [r5, #20]
 8017a2a:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
 8017a2e:	f8ca 3020 	str.w	r3, [sl, #32]
 8017a32:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 8017a36:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
 8017a3a:	f8ca e02c 	str.w	lr, [sl, #44]	; 0x2c
 8017a3e:	f8ca 6044 	str.w	r6, [sl, #68]	; 0x44
 8017a42:	f8ca 4060 	str.w	r4, [sl, #96]	; 0x60
 8017a46:	f8ca 006c 	str.w	r0, [sl, #108]	; 0x6c
 8017a4a:	f8ca 1008 	str.w	r1, [sl, #8]
 8017a4e:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
 8017a52:	b019      	add	sp, #100	; 0x64
 8017a54:	ecbd 8b0e 	vpop	{d8-d14}
 8017a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a5c:	20001698 	.word	0x20001698
 8017a60:	20001c90 	.word	0x20001c90
 8017a64:	f994 33fa 	ldrsb.w	r3, [r4, #1018]	; 0x3fa
 8017a68:	f994 23f4 	ldrsb.w	r2, [r4, #1012]	; 0x3f4
 8017a6c:	eddb ea06 	vldr	s29, [fp, #24]
 8017a70:	ed9b ea07 	vldr	s28, [fp, #28]
 8017a74:	eddb 0a08 	vldr	s1, [fp, #32]
 8017a78:	eddb da09 	vldr	s27, [fp, #36]	; 0x24
 8017a7c:	ed9b da0a 	vldr	s26, [fp, #40]	; 0x28
 8017a80:	eddb aa0b 	vldr	s21, [fp, #44]	; 0x2c
 8017a84:	f894 95f5 	ldrb.w	r9, [r4, #1525]	; 0x5f5
 8017a88:	ee07 3a90 	vmov	s15, r3
 8017a8c:	f994 33fb 	ldrsb.w	r3, [r4, #1019]	; 0x3fb
 8017a90:	ee07 3a10 	vmov	s14, r3
 8017a94:	f994 33fc 	ldrsb.w	r3, [r4, #1020]	; 0x3fc
 8017a98:	ee0c 2a90 	vmov	s25, r2
 8017a9c:	f994 23f5 	ldrsb.w	r2, [r4, #1013]	; 0x3f5
 8017aa0:	ee05 3a10 	vmov	s10, r3
 8017aa4:	2300      	movs	r3, #0
 8017aa6:	ee08 2a10 	vmov	s16, r2
 8017aaa:	930c      	str	r3, [sp, #48]	; 0x30
 8017aac:	f994 23f7 	ldrsb.w	r2, [r4, #1015]	; 0x3f7
 8017ab0:	930d      	str	r3, [sp, #52]	; 0x34
 8017ab2:	930e      	str	r3, [sp, #56]	; 0x38
 8017ab4:	9310      	str	r3, [sp, #64]	; 0x40
 8017ab6:	9311      	str	r3, [sp, #68]	; 0x44
 8017ab8:	9312      	str	r3, [sp, #72]	; 0x48
 8017aba:	f994 33f6 	ldrsb.w	r3, [r4, #1014]	; 0x3f6
 8017abe:	ee0c 2a10 	vmov	s24, r2
 8017ac2:	ee01 3a10 	vmov	s2, r3
 8017ac6:	f994 23f8 	ldrsb.w	r2, [r4, #1016]	; 0x3f8
 8017aca:	f994 33f9 	ldrsb.w	r3, [r4, #1017]	; 0x3f9
 8017ace:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017ad2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017ad6:	ee02 2a10 	vmov	s4, r2
 8017ada:	ee27 7a0e 	vmul.f32	s14, s14, s28
 8017ade:	f994 240c 	ldrsb.w	r2, [r4, #1036]	; 0x40c
 8017ae2:	ee02 3a90 	vmov	s5, r3
 8017ae6:	ee67 7aae 	vmul.f32	s15, s15, s29
 8017aea:	f994 340e 	ldrsb.w	r3, [r4, #1038]	; 0x40e
 8017aee:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8017af2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017af6:	ee0b 2a90 	vmov	s23, r2
 8017afa:	ee03 3a10 	vmov	s6, r3
 8017afe:	f994 240d 	ldrsb.w	r2, [r4, #1037]	; 0x40d
 8017b02:	f994 3411 	ldrsb.w	r3, [r4, #1041]	; 0x411
 8017b06:	ee25 5a20 	vmul.f32	s10, s10, s1
 8017b0a:	ee0b 2a10 	vmov	s22, r2
 8017b0e:	ee37 5a85 	vadd.f32	s10, s15, s10
 8017b12:	f994 240f 	ldrsb.w	r2, [r4, #1039]	; 0x40f
 8017b16:	ed8d 5a08 	vstr	s10, [sp, #32]
 8017b1a:	ee03 3a90 	vmov	s7, r3
 8017b1e:	f994 3412 	ldrsb.w	r3, [r4, #1042]	; 0x412
 8017b22:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8017b26:	ee00 2a10 	vmov	s0, r2
 8017b2a:	ee06 3a90 	vmov	s13, r3
 8017b2e:	f994 2410 	ldrsb.w	r2, [r4, #1040]	; 0x410
 8017b32:	edcd 8a0f 	vstr	s17, [sp, #60]	; 0x3c
 8017b36:	edcd 8a13 	vstr	s17, [sp, #76]	; 0x4c
 8017b3a:	f994 3413 	ldrsb.w	r3, [r4, #1043]	; 0x413
 8017b3e:	ed9b aa03 	vldr	s20, [fp, #12]
 8017b42:	eddb 9a04 	vldr	s19, [fp, #16]
 8017b46:	ed9b 9a05 	vldr	s18, [fp, #20]
 8017b4a:	f994 7400 	ldrsb.w	r7, [r4, #1024]	; 0x400
 8017b4e:	f994 8402 	ldrsb.w	r8, [r4, #1026]	; 0x402
 8017b52:	f994 6403 	ldrsb.w	r6, [r4, #1027]	; 0x403
 8017b56:	ee07 3a10 	vmov	s14, r3
 8017b5a:	f994 3414 	ldrsb.w	r3, [r4, #1044]	; 0x414
 8017b5e:	ee04 3a10 	vmov	s8, r3
 8017b62:	f994 3406 	ldrsb.w	r3, [r4, #1030]	; 0x406
 8017b66:	ee05 2a90 	vmov	s11, r2
 8017b6a:	ee07 3a90 	vmov	s15, r3
 8017b6e:	eef8 caec 	vcvt.f32.s32	s25, s25
 8017b72:	f994 3407 	ldrsb.w	r3, [r4, #1031]	; 0x407
 8017b76:	f994 2401 	ldrsb.w	r2, [r4, #1025]	; 0x401
 8017b7a:	9203      	str	r2, [sp, #12]
 8017b7c:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8017b80:	eeb8 cacc 	vcvt.f32.s32	s24, s24
 8017b84:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8017b88:	eef8 baeb 	vcvt.f32.s32	s23, s23
 8017b8c:	eeb8 bacb 	vcvt.f32.s32	s22, s22
 8017b90:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8017b94:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8017b98:	ee04 3a90 	vmov	s9, r3
 8017b9c:	ee28 8a0e 	vmul.f32	s16, s16, s28
 8017ba0:	f994 3408 	ldrsb.w	r3, [r4, #1032]	; 0x408
 8017ba4:	f994 2404 	ldrsb.w	r2, [r4, #1028]	; 0x404
 8017ba8:	9204      	str	r2, [sp, #16]
 8017baa:	ee6c caae 	vmul.f32	s25, s25, s29
 8017bae:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8017bb2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017bb6:	ee2c ca2e 	vmul.f32	s24, s24, s29
 8017bba:	ee22 2a0e 	vmul.f32	s4, s4, s28
 8017bbe:	ee6b baad 	vmul.f32	s23, s23, s27
 8017bc2:	ee2b ba0d 	vmul.f32	s22, s22, s26
 8017bc6:	ee20 0a2d 	vmul.f32	s0, s0, s27
 8017bca:	ee65 5a8d 	vmul.f32	s11, s11, s26
 8017bce:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8017bd2:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 8017bd6:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8017bda:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8017bde:	ee7c 1a88 	vadd.f32	s3, s25, s16
 8017be2:	ee66 6aad 	vmul.f32	s13, s13, s27
 8017be6:	ee08 3a10 	vmov	s16, r3
 8017bea:	ee27 7a0d 	vmul.f32	s14, s14, s26
 8017bee:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8017bf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017bf6:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8017bfa:	ee3b 6a8b 	vadd.f32	s12, s23, s22
 8017bfe:	ee70 5a25 	vadd.f32	s11, s0, s11
 8017c02:	ee21 1a20 	vmul.f32	s2, s2, s1
 8017c06:	ee3c 2a02 	vadd.f32	s4, s24, s4
 8017c0a:	ee62 2aa0 	vmul.f32	s5, s5, s1
 8017c0e:	ee23 3a2a 	vmul.f32	s6, s6, s21
 8017c12:	ee63 3aaa 	vmul.f32	s7, s7, s21
 8017c16:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017c1a:	ee64 4aa9 	vmul.f32	s9, s9, s19
 8017c1e:	4bea      	ldr	r3, [pc, #936]	; (8017fc8 <MotionFX_propagate+0x6d8>)
 8017c20:	f994 2405 	ldrsb.w	r2, [r4, #1029]	; 0x405
 8017c24:	7b1b      	ldrb	r3, [r3, #12]
 8017c26:	9205      	str	r2, [sp, #20]
 8017c28:	ee24 4a2a 	vmul.f32	s8, s8, s21
 8017c2c:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8017c30:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8017c34:	ee76 6a03 	vadd.f32	s13, s12, s6
 8017c38:	ee71 1a81 	vadd.f32	s3, s3, s2
 8017c3c:	ee35 6aa3 	vadd.f32	s12, s11, s7
 8017c40:	ee72 2a22 	vadd.f32	s5, s4, s5
 8017c44:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8017c48:	ee37 7a04 	vadd.f32	s14, s14, s8
 8017c4c:	ee28 8a09 	vmul.f32	s16, s16, s18
 8017c50:	eef1 4a62 	vneg.f32	s9, s5
 8017c54:	eef1 5a61 	vneg.f32	s11, s3
 8017c58:	eef1 6a66 	vneg.f32	s13, s13
 8017c5c:	eeb1 6a46 	vneg.f32	s12, s12
 8017c60:	ed8d 7a0b 	vstr	s14, [sp, #44]	; 0x2c
 8017c64:	edcd 4a06 	vstr	s9, [sp, #24]
 8017c68:	edcd 5a07 	vstr	s11, [sp, #28]
 8017c6c:	edcd 6a0a 	vstr	s13, [sp, #40]	; 0x28
 8017c70:	ed8d 6a09 	vstr	s12, [sp, #36]	; 0x24
 8017c74:	ee37 8a88 	vadd.f32	s16, s15, s16
 8017c78:	2b00      	cmp	r3, #0
 8017c7a:	f040 8497 	bne.w	80185ac <MotionFX_propagate+0xcbc>
 8017c7e:	464a      	mov	r2, r9
 8017c80:	2a00      	cmp	r2, #0
 8017c82:	f000 8479 	beq.w	8018578 <MotionFX_propagate+0xc88>
 8017c86:	ee07 2a90 	vmov	s15, r2
 8017c8a:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8017c8e:	eec6 4a25 	vdiv.f32	s9, s12, s11
 8017c92:	f894 35d8 	ldrb.w	r3, [r4, #1496]	; 0x5d8
 8017c96:	f894 05d4 	ldrb.w	r0, [r4, #1492]	; 0x5d4
 8017c9a:	3301      	adds	r3, #1
 8017c9c:	b2db      	uxtb	r3, r3
 8017c9e:	fbb3 f1f2 	udiv	r1, r3, r2
 8017ca2:	fb02 3311 	mls	r3, r2, r1, r3
 8017ca6:	f884 35d8 	strb.w	r3, [r4, #1496]	; 0x5d8
 8017caa:	ee86 5aa5 	vdiv.f32	s10, s13, s11
 8017cae:	ee87 6a25 	vdiv.f32	s12, s14, s11
 8017cb2:	eddb 6a0c 	vldr	s13, [fp, #48]	; 0x30
 8017cb6:	ed9b 7a0d 	vldr	s14, [fp, #52]	; 0x34
 8017cba:	eddb 7a0e 	vldr	s15, [fp, #56]	; 0x38
 8017cbe:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8017cc2:	ee37 7a05 	vadd.f32	s14, s14, s10
 8017cc6:	ee77 7a86 	vadd.f32	s15, s15, s12
 8017cca:	edcb 6a0c 	vstr	s13, [fp, #48]	; 0x30
 8017cce:	ed8b 7a0d 	vstr	s14, [fp, #52]	; 0x34
 8017cd2:	edcb 7a0e 	vstr	s15, [fp, #56]	; 0x38
 8017cd6:	2800      	cmp	r0, #0
 8017cd8:	f040 845b 	bne.w	8018592 <MotionFX_propagate+0xca2>
 8017cdc:	ae10      	add	r6, sp, #64	; 0x40
 8017cde:	4abb      	ldr	r2, [pc, #748]	; (8017fcc <MotionFX_propagate+0x6dc>)
 8017ce0:	ed9f 8abb 	vldr	s16, [pc, #748]	; 8017fd0 <MotionFX_propagate+0x6e0>
 8017ce4:	f102 074c 	add.w	r7, r2, #76	; 0x4c
 8017ce8:	4611      	mov	r1, r2
 8017cea:	f1a2 0010 	sub.w	r0, r2, #16
 8017cee:	f7f5 fe7f 	bl	800d9f0 <m_qmult_eml>
 8017cf2:	f1a7 027c 	sub.w	r2, r7, #124	; 0x7c
 8017cf6:	4611      	mov	r1, r2
 8017cf8:	4630      	mov	r0, r6
 8017cfa:	f7f5 fe79 	bl	800d9f0 <m_qmult_eml>
 8017cfe:	f107 0218 	add.w	r2, r7, #24
 8017d02:	f1a7 019c 	sub.w	r1, r7, #156	; 0x9c
 8017d06:	f1a7 004c 	sub.w	r0, r7, #76	; 0x4c
 8017d0a:	f7f5 fe71 	bl	800d9f0 <m_qmult_eml>
 8017d0e:	f107 0218 	add.w	r2, r7, #24
 8017d12:	4611      	mov	r1, r2
 8017d14:	f1a7 007c 	sub.w	r0, r7, #124	; 0x7c
 8017d18:	f7f5 fe6a 	bl	800d9f0 <m_qmult_eml>
 8017d1c:	edd7 6a06 	vldr	s13, [r7, #24]
 8017d20:	ed97 7a07 	vldr	s14, [r7, #28]
 8017d24:	edd7 7a08 	vldr	s15, [r7, #32]
 8017d28:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 8017d2c:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8017d30:	ee27 7a07 	vmul.f32	s14, s14, s14
 8017d34:	ee76 6a88 	vadd.f32	s13, s13, s16
 8017d38:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8017d3c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8017d40:	ee26 6a06 	vmul.f32	s12, s12, s12
 8017d44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017d48:	ee76 7a27 	vadd.f32	s15, s12, s15
 8017d4c:	ee17 0a90 	vmov	r0, s15
 8017d50:	f7e8 fc02 	bl	8000558 <__aeabi_f2d>
 8017d54:	ec41 0b10 	vmov	d0, r0, r1
 8017d58:	f001 f9fa 	bl	8019150 <sqrt>
 8017d5c:	ec51 0b10 	vmov	r0, r1, d0
 8017d60:	f7e8 ff46 	bl	8000bf0 <__aeabi_d2f>
 8017d64:	ed97 6a06 	vldr	s12, [r7, #24]
 8017d68:	edd7 6a07 	vldr	s13, [r7, #28]
 8017d6c:	ed97 7a08 	vldr	s14, [r7, #32]
 8017d70:	ed97 5a09 	vldr	s10, [r7, #36]	; 0x24
 8017d74:	f894 35e0 	ldrb.w	r3, [r4, #1504]	; 0x5e0
 8017d78:	ee07 0a90 	vmov	s15, r0
 8017d7c:	eec6 5a27 	vdiv.f32	s11, s12, s15
 8017d80:	2b01      	cmp	r3, #1
 8017d82:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8017d86:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8017d8a:	ee85 7a27 	vdiv.f32	s14, s10, s15
 8017d8e:	edc7 5a06 	vstr	s11, [r7, #24]
 8017d92:	ed87 6a07 	vstr	s12, [r7, #28]
 8017d96:	edc7 6a08 	vstr	s13, [r7, #32]
 8017d9a:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 8017d9e:	f000 850b 	beq.w	80187b8 <MotionFX_propagate+0xec8>
 8017da2:	f8df 8230 	ldr.w	r8, [pc, #560]	; 8017fd4 <MotionFX_propagate+0x6e4>
 8017da6:	f894 15f6 	ldrb.w	r1, [r4, #1526]	; 0x5f6
 8017daa:	9101      	str	r1, [sp, #4]
 8017dac:	f1a8 030c 	sub.w	r3, r8, #12
 8017db0:	f1a8 0294 	sub.w	r2, r8, #148	; 0x94
 8017db4:	f8cd 8000 	str.w	r8, [sp]
 8017db8:	f1a8 0088 	sub.w	r0, r8, #136	; 0x88
 8017dbc:	a906      	add	r1, sp, #24
 8017dbe:	f7f6 fa3b 	bl	800e238 <output_update>
 8017dc2:	f894 35f4 	ldrb.w	r3, [r4, #1524]	; 0x5f4
 8017dc6:	2200      	movs	r2, #0
 8017dc8:	f884 25d6 	strb.w	r2, [r4, #1494]	; 0x5d6
 8017dcc:	079a      	lsls	r2, r3, #30
 8017dce:	f100 83bd 	bmi.w	801854c <MotionFX_propagate+0xc5c>
 8017dd2:	f894 15d8 	ldrb.w	r1, [r4, #1496]	; 0x5d8
 8017dd6:	fbb1 f2f9 	udiv	r2, r1, r9
 8017dda:	fb09 1212 	mls	r2, r9, r2, r1
 8017dde:	f012 0fff 	tst.w	r2, #255	; 0xff
 8017de2:	f040 83b3 	bne.w	801854c <MotionFX_propagate+0xc5c>
 8017de6:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
 8017dea:	eddb 7a22 	vldr	s15, [fp, #136]	; 0x88
 8017dee:	f8db 108c 	ldr.w	r1, [fp, #140]	; 0x8c
 8017df2:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 8017df6:	edcb 7a26 	vstr	s15, [fp, #152]	; 0x98
 8017dfa:	f043 0301 	orr.w	r3, r3, #1
 8017dfe:	eeb4 7a47 	vcmp.f32	s14, s14
 8017e02:	f884 35f4 	strb.w	r3, [r4, #1524]	; 0x5f4
 8017e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e0a:	f8db 3094 	ldr.w	r3, [fp, #148]	; 0x94
 8017e0e:	f8cb 109c 	str.w	r1, [fp, #156]	; 0x9c
 8017e12:	f8cb 20a0 	str.w	r2, [fp, #160]	; 0xa0
 8017e16:	f8cb 30a4 	str.w	r3, [fp, #164]	; 0xa4
 8017e1a:	f47f adc0 	bne.w	801799e <MotionFX_propagate+0xae>
 8017e1e:	ed9b 7a2a 	vldr	s14, [fp, #168]	; 0xa8
 8017e22:	eeb4 7a47 	vcmp.f32	s14, s14
 8017e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e2a:	f47f adb8 	bne.w	801799e <MotionFX_propagate+0xae>
 8017e2e:	ed9b 7a32 	vldr	s14, [fp, #200]	; 0xc8
 8017e32:	eeb4 7a47 	vcmp.f32	s14, s14
 8017e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e3a:	f47f adb0 	bne.w	801799e <MotionFX_propagate+0xae>
 8017e3e:	eef4 7a67 	vcmp.f32	s15, s15
 8017e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e46:	f47f adaa 	bne.w	801799e <MotionFX_propagate+0xae>
 8017e4a:	4630      	mov	r0, r6
 8017e4c:	aa14      	add	r2, sp, #80	; 0x50
 8017e4e:	f5a8 7196 	sub.w	r1, r8, #300	; 0x12c
 8017e52:	f7f5 fdcd 	bl	800d9f0 <m_qmult_eml>
 8017e56:	aa0c      	add	r2, sp, #48	; 0x30
 8017e58:	f5a8 71a6 	sub.w	r1, r8, #332	; 0x14c
 8017e5c:	f5a8 7086 	sub.w	r0, r8, #268	; 0x10c
 8017e60:	f7f5 fdc6 	bl	800d9f0 <m_qmult_eml>
 8017e64:	aa0c      	add	r2, sp, #48	; 0x30
 8017e66:	4611      	mov	r1, r2
 8017e68:	a814      	add	r0, sp, #80	; 0x50
 8017e6a:	f7f5 fdc1 	bl	800d9f0 <m_qmult_eml>
 8017e6e:	eddd 6a0c 	vldr	s13, [sp, #48]	; 0x30
 8017e72:	eddf 5a57 	vldr	s11, [pc, #348]	; 8017fd0 <MotionFX_propagate+0x6e0>
 8017e76:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 8017e7a:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8017e7e:	ed9d 6a0f 	vldr	s12, [sp, #60]	; 0x3c
 8017e82:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8017e86:	ee27 7a07 	vmul.f32	s14, s14, s14
 8017e8a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8017e8e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8017e92:	ee37 7a26 	vadd.f32	s14, s14, s13
 8017e96:	ee26 6a06 	vmul.f32	s12, s12, s12
 8017e9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017e9e:	ee76 7a27 	vadd.f32	s15, s12, s15
 8017ea2:	ee17 0a90 	vmov	r0, s15
 8017ea6:	f7e8 fb57 	bl	8000558 <__aeabi_f2d>
 8017eaa:	ec41 0b10 	vmov	d0, r0, r1
 8017eae:	f001 f94f 	bl	8019150 <sqrt>
 8017eb2:	ec51 0b10 	vmov	r0, r1, d0
 8017eb6:	f7e8 fe9b 	bl	8000bf0 <__aeabi_d2f>
 8017eba:	ed9d 5a0c 	vldr	s10, [sp, #48]	; 0x30
 8017ebe:	eddd 5a0d 	vldr	s11, [sp, #52]	; 0x34
 8017ec2:	ed9d 6a0e 	vldr	s12, [sp, #56]	; 0x38
 8017ec6:	ed9d 7a0f 	vldr	s14, [sp, #60]	; 0x3c
 8017eca:	ee07 0a90 	vmov	s15, r0
 8017ece:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8017ed2:	eec5 3aa7 	vdiv.f32	s7, s11, s15
 8017ed6:	ee86 4a27 	vdiv.f32	s8, s12, s15
 8017eda:	eec7 4a27 	vdiv.f32	s9, s14, s15
 8017ede:	eef4 6a66 	vcmp.f32	s13, s13
 8017ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ee6:	edcd 6a0c 	vstr	s13, [sp, #48]	; 0x30
 8017eea:	edcd 3a0d 	vstr	s7, [sp, #52]	; 0x34
 8017eee:	ed8d 4a0e 	vstr	s8, [sp, #56]	; 0x38
 8017ef2:	edcd 4a0f 	vstr	s9, [sp, #60]	; 0x3c
 8017ef6:	f47f ad52 	bne.w	801799e <MotionFX_propagate+0xae>
 8017efa:	f894 35f5 	ldrb.w	r3, [r4, #1525]	; 0x5f5
 8017efe:	eddb 5a32 	vldr	s11, [fp, #200]	; 0xc8
 8017f02:	ed9b 6a33 	vldr	s12, [fp, #204]	; 0xcc
 8017f06:	eddb 7a34 	vldr	s15, [fp, #208]	; 0xd0
 8017f0a:	edcb 6a1e 	vstr	s13, [fp, #120]	; 0x78
 8017f0e:	ee07 3a10 	vmov	s14, r3
 8017f12:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8017f16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017f1a:	ee85 5a87 	vdiv.f32	s10, s11, s14
 8017f1e:	f8db 30a8 	ldr.w	r3, [fp, #168]	; 0xa8
 8017f22:	f8db 10ac 	ldr.w	r1, [fp, #172]	; 0xac
 8017f26:	f8db 20b0 	ldr.w	r2, [fp, #176]	; 0xb0
 8017f2a:	f8cb 30b8 	str.w	r3, [fp, #184]	; 0xb8
 8017f2e:	f8db 30b4 	ldr.w	r3, [fp, #180]	; 0xb4
 8017f32:	f8cb 10bc 	str.w	r1, [fp, #188]	; 0xbc
 8017f36:	f8cb 20c0 	str.w	r2, [fp, #192]	; 0xc0
 8017f3a:	f8cb 30c4 	str.w	r3, [fp, #196]	; 0xc4
 8017f3e:	eec6 5a07 	vdiv.f32	s11, s12, s14
 8017f42:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8017f46:	ee25 3aa5 	vmul.f32	s6, s11, s11
 8017f4a:	ee65 7a05 	vmul.f32	s15, s10, s10
 8017f4e:	ee26 7a06 	vmul.f32	s14, s12, s12
 8017f52:	ee77 7a83 	vadd.f32	s15, s15, s6
 8017f56:	edcb 3a1f 	vstr	s7, [fp, #124]	; 0x7c
 8017f5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017f5e:	ed8b 4a20 	vstr	s8, [fp, #128]	; 0x80
 8017f62:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8017f66:	edcb 4a21 	vstr	s9, [fp, #132]	; 0x84
 8017f6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f72:	ed8b 5a36 	vstr	s10, [fp, #216]	; 0xd8
 8017f76:	edcb 5a37 	vstr	s11, [fp, #220]	; 0xdc
 8017f7a:	ed8b 6a38 	vstr	s12, [fp, #224]	; 0xe0
 8017f7e:	f340 8430 	ble.w	80187e2 <MotionFX_propagate+0xef2>
 8017f82:	ee17 0a90 	vmov	r0, s15
 8017f86:	f7e8 fae7 	bl	8000558 <__aeabi_f2d>
 8017f8a:	ec41 0b10 	vmov	d0, r0, r1
 8017f8e:	f001 f8df 	bl	8019150 <sqrt>
 8017f92:	ec51 0b10 	vmov	r0, r1, d0
 8017f96:	f7e8 fe2b 	bl	8000bf0 <__aeabi_d2f>
 8017f9a:	2300      	movs	r3, #0
 8017f9c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8017fa0:	f8cb 00e4 	str.w	r0, [fp, #228]	; 0xe4
 8017fa4:	f8cb 30a8 	str.w	r3, [fp, #168]	; 0xa8
 8017fa8:	f8cb 30ac 	str.w	r3, [fp, #172]	; 0xac
 8017fac:	f8cb 30b0 	str.w	r3, [fp, #176]	; 0xb0
 8017fb0:	f8cb 30e8 	str.w	r3, [fp, #232]	; 0xe8
 8017fb4:	f8cb 30ec 	str.w	r3, [fp, #236]	; 0xec
 8017fb8:	f8cb 30f0 	str.w	r3, [fp, #240]	; 0xf0
 8017fbc:	f8cb 20b4 	str.w	r2, [fp, #180]	; 0xb4
 8017fc0:	f8cb 20f4 	str.w	r2, [fp, #244]	; 0xf4
 8017fc4:	e2c7      	b.n	8018556 <MotionFX_propagate+0xc66>
 8017fc6:	bf00      	nop
 8017fc8:	20000000 	.word	0x20000000
 8017fcc:	20001c44 	.word	0x20001c44
 8017fd0:	00000000 	.word	0x00000000
 8017fd4:	20001d30 	.word	0x20001d30
 8017fd8:	f994 33d6 	ldrsb.w	r3, [r4, #982]	; 0x3d6
 8017fdc:	f994 23e8 	ldrsb.w	r2, [r4, #1000]	; 0x3e8
 8017fe0:	f994 13eb 	ldrsb.w	r1, [r4, #1003]	; 0x3eb
 8017fe4:	f994 53d4 	ldrsb.w	r5, [r4, #980]	; 0x3d4
 8017fe8:	f994 03d2 	ldrsb.w	r0, [r4, #978]	; 0x3d2
 8017fec:	f994 73ea 	ldrsb.w	r7, [r4, #1002]	; 0x3ea
 8017ff0:	f894 9835 	ldrb.w	r9, [r4, #2101]	; 0x835
 8017ff4:	ee06 3a10 	vmov	s12, r3
 8017ff8:	f994 33d7 	ldrsb.w	r3, [r4, #983]	; 0x3d7
 8017ffc:	ee00 3a10 	vmov	s0, r3
 8018000:	f994 33ee 	ldrsb.w	r3, [r4, #1006]	; 0x3ee
 8018004:	ee06 3a90 	vmov	s13, r3
 8018008:	f994 33ef 	ldrsb.w	r3, [r4, #1007]	; 0x3ef
 801800c:	ee01 3a90 	vmov	s3, r3
 8018010:	f994 33d8 	ldrsb.w	r3, [r4, #984]	; 0x3d8
 8018014:	ee02 3a10 	vmov	s4, r3
 8018018:	f994 33f0 	ldrsb.w	r3, [r4, #1008]	; 0x3f0
 801801c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8018020:	ee02 3a90 	vmov	s5, r3
 8018024:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8018028:	f994 33d0 	ldrsb.w	r3, [r4, #976]	; 0x3d0
 801802c:	ee61 1aa4 	vmul.f32	s3, s3, s9
 8018030:	ee0a 3a90 	vmov	s21, r3
 8018034:	ee66 6a84 	vmul.f32	s13, s13, s8
 8018038:	f994 33d1 	ldrsb.w	r3, [r4, #977]	; 0x3d1
 801803c:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 8018040:	ee76 6aa1 	vadd.f32	s13, s13, s3
 8018044:	ee0a 3a10 	vmov	s20, r3
 8018048:	ee62 2aa5 	vmul.f32	s5, s5, s11
 801804c:	f994 33d3 	ldrsb.w	r3, [r4, #979]	; 0x3d3
 8018050:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8018054:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8018058:	ee07 1a10 	vmov	s14, r1
 801805c:	ee20 0a23 	vmul.f32	s0, s0, s7
 8018060:	f994 13ec 	ldrsb.w	r1, [r4, #1004]	; 0x3ec
 8018064:	ee07 2a90 	vmov	s15, r2
 8018068:	ee26 6a03 	vmul.f32	s12, s12, s6
 801806c:	f994 23e9 	ldrsb.w	r2, [r4, #1001]	; 0x3e9
 8018070:	ee76 2aa2 	vadd.f32	s5, s13, s5
 8018074:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8018078:	ee06 3a90 	vmov	s13, r3
 801807c:	ee22 2a05 	vmul.f32	s4, s4, s10
 8018080:	ee00 2a90 	vmov	s1, r2
 8018084:	ee01 1a10 	vmov	s2, r1
 8018088:	ee36 6a00 	vadd.f32	s12, s12, s0
 801808c:	eef8 bae6 	vcvt.f32.s32	s23, s13
 8018090:	ee06 5a90 	vmov	s13, r5
 8018094:	ee01 0a90 	vmov	s3, r0
 8018098:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 801809c:	f994 03d5 	ldrsb.w	r0, [r4, #981]	; 0x3d5
 80180a0:	f994 33dd 	ldrsb.w	r3, [r4, #989]	; 0x3dd
 80180a4:	edcd 2a0b 	vstr	s5, [sp, #44]	; 0x2c
 80180a8:	ee36 6a02 	vadd.f32	s12, s12, s4
 80180ac:	eeb8 aaca 	vcvt.f32.s32	s20, s20
 80180b0:	eeb8 bae0 	vcvt.f32.s32	s22, s1
 80180b4:	eef8 aaea 	vcvt.f32.s32	s21, s21
 80180b8:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 80180bc:	2100      	movs	r1, #0
 80180be:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
 80180c2:	ee6a 0a23 	vmul.f32	s1, s20, s7
 80180c6:	ee02 0a10 	vmov	s4, r0
 80180ca:	ee60 3a23 	vmul.f32	s7, s0, s7
 80180ce:	f994 03ed 	ldrsb.w	r0, [r4, #1005]	; 0x3ed
 80180d2:	910c      	str	r1, [sp, #48]	; 0x30
 80180d4:	910d      	str	r1, [sp, #52]	; 0x34
 80180d6:	910e      	str	r1, [sp, #56]	; 0x38
 80180d8:	9110      	str	r1, [sp, #64]	; 0x40
 80180da:	9111      	str	r1, [sp, #68]	; 0x44
 80180dc:	9112      	str	r1, [sp, #72]	; 0x48
 80180de:	960f      	str	r6, [sp, #60]	; 0x3c
 80180e0:	9613      	str	r6, [sp, #76]	; 0x4c
 80180e2:	ee6a aa83 	vmul.f32	s21, s21, s6
 80180e6:	ee2b ba24 	vmul.f32	s22, s22, s9
 80180ea:	ee21 1a24 	vmul.f32	s2, s2, s9
 80180ee:	ed8d 6a08 	vstr	s12, [sp, #32]
 80180f2:	ee04 7a90 	vmov	s9, r7
 80180f6:	f994 63dc 	ldrsb.w	r6, [r4, #988]	; 0x3dc
 80180fa:	9303      	str	r3, [sp, #12]
 80180fc:	ee2b 3a83 	vmul.f32	s6, s23, s6
 8018100:	f994 33de 	ldrsb.w	r3, [r4, #990]	; 0x3de
 8018104:	f994 13e2 	ldrsb.w	r1, [r4, #994]	; 0x3e2
 8018108:	f994 e3e4 	ldrsb.w	lr, [r4, #996]	; 0x3e4
 801810c:	4af2      	ldr	r2, [pc, #968]	; (80184d8 <MotionFX_propagate+0xbe8>)
 801810e:	f994 53df 	ldrsb.w	r5, [r4, #991]	; 0x3df
 8018112:	f892 28e0 	ldrb.w	r2, [r2, #2272]	; 0x8e0
 8018116:	f994 73e1 	ldrsb.w	r7, [r4, #993]	; 0x3e1
 801811a:	ee06 1a90 	vmov	s13, r1
 801811e:	ee33 3a23 	vadd.f32	s6, s6, s7
 8018122:	f994 13e3 	ldrsb.w	r1, [r4, #995]	; 0x3e3
 8018126:	eef8 3ae4 	vcvt.f32.s32	s7, s9
 801812a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801812e:	ee04 0a90 	vmov	s9, r0
 8018132:	eeb8 aac7 	vcvt.f32.s32	s20, s14
 8018136:	ee67 7a84 	vmul.f32	s15, s15, s8
 801813a:	ee2a 7a04 	vmul.f32	s14, s20, s8
 801813e:	eeb8 4ae4 	vcvt.f32.s32	s8, s9
 8018142:	ee04 1a90 	vmov	s9, r1
 8018146:	eeb8 0ae1 	vcvt.f32.s32	s0, s3
 801814a:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 801814e:	ee08 ea10 	vmov	s16, lr
 8018152:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8018156:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 801815a:	ee60 1a05 	vmul.f32	s3, s0, s10
 801815e:	ee63 3aa5 	vmul.f32	s7, s7, s11
 8018162:	ee7a 0aa0 	vadd.f32	s1, s21, s1
 8018166:	ee64 5a25 	vmul.f32	s11, s8, s11
 801816a:	ee22 5a05 	vmul.f32	s10, s4, s10
 801816e:	ee77 7a8b 	vadd.f32	s15, s15, s22
 8018172:	ee37 7a01 	vadd.f32	s14, s14, s2
 8018176:	ee64 4a89 	vmul.f32	s9, s9, s18
 801817a:	ee66 6aa9 	vmul.f32	s13, s13, s19
 801817e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8018182:	ee37 7a25 	vadd.f32	s14, s14, s11
 8018186:	ee70 1aa1 	vadd.f32	s3, s1, s3
 801818a:	ee33 5a05 	vadd.f32	s10, s6, s10
 801818e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8018192:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8018196:	ee28 8a28 	vmul.f32	s16, s16, s17
 801819a:	f994 13e0 	ldrsb.w	r1, [r4, #992]	; 0x3e0
 801819e:	9104      	str	r1, [sp, #16]
 80181a0:	eef1 4a61 	vneg.f32	s9, s3
 80181a4:	eef1 5a45 	vneg.f32	s11, s10
 80181a8:	eef1 7a67 	vneg.f32	s15, s15
 80181ac:	eeb1 7a47 	vneg.f32	s14, s14
 80181b0:	edcd 4a07 	vstr	s9, [sp, #28]
 80181b4:	edcd 5a06 	vstr	s11, [sp, #24]
 80181b8:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
 80181bc:	ed8d 7a09 	vstr	s14, [sp, #36]	; 0x24
 80181c0:	ee36 8a88 	vadd.f32	s16, s13, s16
 80181c4:	2a00      	cmp	r2, #0
 80181c6:	f040 827a 	bne.w	80186be <MotionFX_propagate+0xdce>
 80181ca:	464a      	mov	r2, r9
 80181cc:	2a00      	cmp	r2, #0
 80181ce:	f000 81da 	beq.w	8018586 <MotionFX_propagate+0xc96>
 80181d2:	ee06 2a90 	vmov	s13, r2
 80181d6:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 80181da:	eec7 4a06 	vdiv.f32	s9, s14, s12
 80181de:	f894 3818 	ldrb.w	r3, [r4, #2072]	; 0x818
 80181e2:	f894 0814 	ldrb.w	r0, [r4, #2068]	; 0x814
 80181e6:	3301      	adds	r3, #1
 80181e8:	b2db      	uxtb	r3, r3
 80181ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80181ee:	fb02 3311 	mls	r3, r2, r1, r3
 80181f2:	f884 3818 	strb.w	r3, [r4, #2072]	; 0x818
 80181f6:	ee87 5a86 	vdiv.f32	s10, s15, s12
 80181fa:	eec2 5a86 	vdiv.f32	s11, s5, s12
 80181fe:	edd8 6a0c 	vldr	s13, [r8, #48]	; 0x30
 8018202:	ed98 7a0d 	vldr	s14, [r8, #52]	; 0x34
 8018206:	edd8 7a0e 	vldr	s15, [r8, #56]	; 0x38
 801820a:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801820e:	ee37 7a05 	vadd.f32	s14, s14, s10
 8018212:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8018216:	edc8 6a0c 	vstr	s13, [r8, #48]	; 0x30
 801821a:	ed88 7a0d 	vstr	s14, [r8, #52]	; 0x34
 801821e:	edc8 7a0e 	vstr	s15, [r8, #56]	; 0x38
 8018222:	2800      	cmp	r0, #0
 8018224:	f040 823f 	bne.w	80186a6 <MotionFX_propagate+0xdb6>
 8018228:	ae10      	add	r6, sp, #64	; 0x40
 801822a:	4aac      	ldr	r2, [pc, #688]	; (80184dc <MotionFX_propagate+0xbec>)
 801822c:	ed9f 8aac 	vldr	s16, [pc, #688]	; 80184e0 <MotionFX_propagate+0xbf0>
 8018230:	f102 054c 	add.w	r5, r2, #76	; 0x4c
 8018234:	4611      	mov	r1, r2
 8018236:	f1a2 0010 	sub.w	r0, r2, #16
 801823a:	f7f5 fbd9 	bl	800d9f0 <m_qmult_eml>
 801823e:	f1a5 027c 	sub.w	r2, r5, #124	; 0x7c
 8018242:	4611      	mov	r1, r2
 8018244:	4630      	mov	r0, r6
 8018246:	f7f5 fbd3 	bl	800d9f0 <m_qmult_eml>
 801824a:	f105 0218 	add.w	r2, r5, #24
 801824e:	f1a5 019c 	sub.w	r1, r5, #156	; 0x9c
 8018252:	f1a5 004c 	sub.w	r0, r5, #76	; 0x4c
 8018256:	f7f5 fbcb 	bl	800d9f0 <m_qmult_eml>
 801825a:	f105 0218 	add.w	r2, r5, #24
 801825e:	4611      	mov	r1, r2
 8018260:	f1a5 007c 	sub.w	r0, r5, #124	; 0x7c
 8018264:	f7f5 fbc4 	bl	800d9f0 <m_qmult_eml>
 8018268:	edd5 6a06 	vldr	s13, [r5, #24]
 801826c:	ed95 7a07 	vldr	s14, [r5, #28]
 8018270:	edd5 7a08 	vldr	s15, [r5, #32]
 8018274:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8018278:	ee66 6aa6 	vmul.f32	s13, s13, s13
 801827c:	ee27 7a07 	vmul.f32	s14, s14, s14
 8018280:	ee76 6a88 	vadd.f32	s13, s13, s16
 8018284:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8018288:	ee37 7a26 	vadd.f32	s14, s14, s13
 801828c:	ee26 6a06 	vmul.f32	s12, s12, s12
 8018290:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018294:	ee76 7a27 	vadd.f32	s15, s12, s15
 8018298:	ee17 0a90 	vmov	r0, s15
 801829c:	f7e8 f95c 	bl	8000558 <__aeabi_f2d>
 80182a0:	ec41 0b10 	vmov	d0, r0, r1
 80182a4:	f000 ff54 	bl	8019150 <sqrt>
 80182a8:	ec51 0b10 	vmov	r0, r1, d0
 80182ac:	f7e8 fca0 	bl	8000bf0 <__aeabi_d2f>
 80182b0:	ed95 6a06 	vldr	s12, [r5, #24]
 80182b4:	edd5 6a07 	vldr	s13, [r5, #28]
 80182b8:	ed95 7a08 	vldr	s14, [r5, #32]
 80182bc:	ed95 5a09 	vldr	s10, [r5, #36]	; 0x24
 80182c0:	f894 3820 	ldrb.w	r3, [r4, #2080]	; 0x820
 80182c4:	ee07 0a90 	vmov	s15, r0
 80182c8:	eec6 5a27 	vdiv.f32	s11, s12, s15
 80182cc:	2b01      	cmp	r3, #1
 80182ce:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 80182d2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80182d6:	ee85 7a27 	vdiv.f32	s14, s10, s15
 80182da:	edc5 5a06 	vstr	s11, [r5, #24]
 80182de:	ed85 6a07 	vstr	s12, [r5, #28]
 80182e2:	edc5 6a08 	vstr	s13, [r5, #32]
 80182e6:	ed85 7a09 	vstr	s14, [r5, #36]	; 0x24
 80182ea:	f000 8270 	beq.w	80187ce <MotionFX_propagate+0xede>
 80182ee:	4f7d      	ldr	r7, [pc, #500]	; (80184e4 <MotionFX_propagate+0xbf4>)
 80182f0:	f894 1836 	ldrb.w	r1, [r4, #2102]	; 0x836
 80182f4:	9101      	str	r1, [sp, #4]
 80182f6:	f1a7 030c 	sub.w	r3, r7, #12
 80182fa:	f1a7 0294 	sub.w	r2, r7, #148	; 0x94
 80182fe:	a906      	add	r1, sp, #24
 8018300:	9700      	str	r7, [sp, #0]
 8018302:	f1a7 0088 	sub.w	r0, r7, #136	; 0x88
 8018306:	f7f5 ff97 	bl	800e238 <output_update>
 801830a:	f894 3834 	ldrb.w	r3, [r4, #2100]	; 0x834
 801830e:	2200      	movs	r2, #0
 8018310:	0799      	lsls	r1, r3, #30
 8018312:	f884 2816 	strb.w	r2, [r4, #2070]	; 0x816
 8018316:	f100 8103 	bmi.w	8018520 <MotionFX_propagate+0xc30>
 801831a:	f894 1818 	ldrb.w	r1, [r4, #2072]	; 0x818
 801831e:	fbb1 f2f9 	udiv	r2, r1, r9
 8018322:	fb09 1912 	mls	r9, r9, r2, r1
 8018326:	f019 0fff 	tst.w	r9, #255	; 0xff
 801832a:	f040 80f9 	bne.w	8018520 <MotionFX_propagate+0xc30>
 801832e:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
 8018332:	edd8 7a22 	vldr	s15, [r8, #136]	; 0x88
 8018336:	f8d8 108c 	ldr.w	r1, [r8, #140]	; 0x8c
 801833a:	f8d8 2090 	ldr.w	r2, [r8, #144]	; 0x90
 801833e:	edc8 7a26 	vstr	s15, [r8, #152]	; 0x98
 8018342:	f043 0301 	orr.w	r3, r3, #1
 8018346:	eeb4 7a47 	vcmp.f32	s14, s14
 801834a:	f884 3834 	strb.w	r3, [r4, #2100]	; 0x834
 801834e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018352:	f8d8 3094 	ldr.w	r3, [r8, #148]	; 0x94
 8018356:	f8c8 109c 	str.w	r1, [r8, #156]	; 0x9c
 801835a:	f8c8 20a0 	str.w	r2, [r8, #160]	; 0xa0
 801835e:	f8c8 30a4 	str.w	r3, [r8, #164]	; 0xa4
 8018362:	f47f ab17 	bne.w	8017994 <MotionFX_propagate+0xa4>
 8018366:	ed98 7a2a 	vldr	s14, [r8, #168]	; 0xa8
 801836a:	eeb4 7a47 	vcmp.f32	s14, s14
 801836e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018372:	f47f ab0f 	bne.w	8017994 <MotionFX_propagate+0xa4>
 8018376:	ed98 7a32 	vldr	s14, [r8, #200]	; 0xc8
 801837a:	eeb4 7a47 	vcmp.f32	s14, s14
 801837e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018382:	f47f ab07 	bne.w	8017994 <MotionFX_propagate+0xa4>
 8018386:	eef4 7a67 	vcmp.f32	s15, s15
 801838a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801838e:	f47f ab01 	bne.w	8017994 <MotionFX_propagate+0xa4>
 8018392:	4630      	mov	r0, r6
 8018394:	aa14      	add	r2, sp, #80	; 0x50
 8018396:	f5a7 7196 	sub.w	r1, r7, #300	; 0x12c
 801839a:	f7f5 fb29 	bl	800d9f0 <m_qmult_eml>
 801839e:	aa0c      	add	r2, sp, #48	; 0x30
 80183a0:	f5a7 71a6 	sub.w	r1, r7, #332	; 0x14c
 80183a4:	f5a7 7086 	sub.w	r0, r7, #268	; 0x10c
 80183a8:	f7f5 fb22 	bl	800d9f0 <m_qmult_eml>
 80183ac:	aa0c      	add	r2, sp, #48	; 0x30
 80183ae:	4611      	mov	r1, r2
 80183b0:	a814      	add	r0, sp, #80	; 0x50
 80183b2:	f7f5 fb1d 	bl	800d9f0 <m_qmult_eml>
 80183b6:	eddd 6a0c 	vldr	s13, [sp, #48]	; 0x30
 80183ba:	eddf 5a49 	vldr	s11, [pc, #292]	; 80184e0 <MotionFX_propagate+0xbf0>
 80183be:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 80183c2:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 80183c6:	ed9d 6a0f 	vldr	s12, [sp, #60]	; 0x3c
 80183ca:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80183ce:	ee27 7a07 	vmul.f32	s14, s14, s14
 80183d2:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80183d6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80183da:	ee37 7a26 	vadd.f32	s14, s14, s13
 80183de:	ee26 6a06 	vmul.f32	s12, s12, s12
 80183e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80183e6:	ee76 7a27 	vadd.f32	s15, s12, s15
 80183ea:	ee17 0a90 	vmov	r0, s15
 80183ee:	f7e8 f8b3 	bl	8000558 <__aeabi_f2d>
 80183f2:	ec41 0b10 	vmov	d0, r0, r1
 80183f6:	f000 feab 	bl	8019150 <sqrt>
 80183fa:	ec51 0b10 	vmov	r0, r1, d0
 80183fe:	f7e8 fbf7 	bl	8000bf0 <__aeabi_d2f>
 8018402:	ed9d 5a0c 	vldr	s10, [sp, #48]	; 0x30
 8018406:	eddd 5a0d 	vldr	s11, [sp, #52]	; 0x34
 801840a:	ed9d 6a0e 	vldr	s12, [sp, #56]	; 0x38
 801840e:	eddd 6a0f 	vldr	s13, [sp, #60]	; 0x3c
 8018412:	ee07 0a90 	vmov	s15, r0
 8018416:	ee85 7a27 	vdiv.f32	s14, s10, s15
 801841a:	ee85 4aa7 	vdiv.f32	s8, s11, s15
 801841e:	eec6 4a27 	vdiv.f32	s9, s12, s15
 8018422:	ee86 5aa7 	vdiv.f32	s10, s13, s15
 8018426:	eeb4 7a47 	vcmp.f32	s14, s14
 801842a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801842e:	ed8d 7a0c 	vstr	s14, [sp, #48]	; 0x30
 8018432:	ed8d 4a0d 	vstr	s8, [sp, #52]	; 0x34
 8018436:	edcd 4a0e 	vstr	s9, [sp, #56]	; 0x38
 801843a:	ed8d 5a0f 	vstr	s10, [sp, #60]	; 0x3c
 801843e:	f47f aaa9 	bne.w	8017994 <MotionFX_propagate+0xa4>
 8018442:	f894 3835 	ldrb.w	r3, [r4, #2101]	; 0x835
 8018446:	ed98 6a32 	vldr	s12, [r8, #200]	; 0xc8
 801844a:	edd8 6a33 	vldr	s13, [r8, #204]	; 0xcc
 801844e:	edd8 3a34 	vldr	s7, [r8, #208]	; 0xd0
 8018452:	ed88 7a1e 	vstr	s14, [r8, #120]	; 0x78
 8018456:	ee07 3a90 	vmov	s15, r3
 801845a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801845e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018462:	eec6 5a27 	vdiv.f32	s11, s12, s15
 8018466:	f8d8 30a8 	ldr.w	r3, [r8, #168]	; 0xa8
 801846a:	f8d8 10ac 	ldr.w	r1, [r8, #172]	; 0xac
 801846e:	f8d8 20b0 	ldr.w	r2, [r8, #176]	; 0xb0
 8018472:	f8c8 30b8 	str.w	r3, [r8, #184]	; 0xb8
 8018476:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
 801847a:	f8c8 10bc 	str.w	r1, [r8, #188]	; 0xbc
 801847e:	f8c8 20c0 	str.w	r2, [r8, #192]	; 0xc0
 8018482:	f8c8 30c4 	str.w	r3, [r8, #196]	; 0xc4
 8018486:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 801848a:	eec3 6aa7 	vdiv.f32	s13, s7, s15
 801848e:	ee26 3a06 	vmul.f32	s6, s12, s12
 8018492:	ee65 7aa5 	vmul.f32	s15, s11, s11
 8018496:	ee66 3aa6 	vmul.f32	s7, s13, s13
 801849a:	ee77 7a83 	vadd.f32	s15, s15, s6
 801849e:	ed88 4a1f 	vstr	s8, [r8, #124]	; 0x7c
 80184a2:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80184a6:	edc8 4a20 	vstr	s9, [r8, #128]	; 0x80
 80184aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80184ae:	ed88 5a21 	vstr	s10, [r8, #132]	; 0x84
 80184b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80184b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184ba:	edc8 5a36 	vstr	s11, [r8, #216]	; 0xd8
 80184be:	ed88 6a37 	vstr	s12, [r8, #220]	; 0xdc
 80184c2:	edc8 6a38 	vstr	s13, [r8, #224]	; 0xe0
 80184c6:	f340 8190 	ble.w	80187ea <MotionFX_propagate+0xefa>
 80184ca:	ee17 0a90 	vmov	r0, s15
 80184ce:	f7e8 f843 	bl	8000558 <__aeabi_f2d>
 80184d2:	ec41 0b10 	vmov	d0, r0, r1
 80184d6:	e007      	b.n	80184e8 <MotionFX_propagate+0xbf8>
 80184d8:	20000000 	.word	0x20000000
 80184dc:	20001e84 	.word	0x20001e84
 80184e0:	00000000 	.word	0x00000000
 80184e4:	20001f70 	.word	0x20001f70
 80184e8:	f000 fe32 	bl	8019150 <sqrt>
 80184ec:	ec51 0b10 	vmov	r0, r1, d0
 80184f0:	f7e8 fb7e 	bl	8000bf0 <__aeabi_d2f>
 80184f4:	2300      	movs	r3, #0
 80184f6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80184fa:	f8c8 00e4 	str.w	r0, [r8, #228]	; 0xe4
 80184fe:	f8c8 30a8 	str.w	r3, [r8, #168]	; 0xa8
 8018502:	f8c8 30ac 	str.w	r3, [r8, #172]	; 0xac
 8018506:	f8c8 30b0 	str.w	r3, [r8, #176]	; 0xb0
 801850a:	f8c8 30e8 	str.w	r3, [r8, #232]	; 0xe8
 801850e:	f8c8 30ec 	str.w	r3, [r8, #236]	; 0xec
 8018512:	f8c8 30f0 	str.w	r3, [r8, #240]	; 0xf0
 8018516:	f8c8 20b4 	str.w	r2, [r8, #180]	; 0xb4
 801851a:	f8c8 20f4 	str.w	r2, [r8, #244]	; 0xf4
 801851e:	e004      	b.n	801852a <MotionFX_propagate+0xc3a>
 8018520:	4abb      	ldr	r2, [pc, #748]	; (8018810 <MotionFX_propagate+0xf20>)
 8018522:	4630      	mov	r0, r6
 8018524:	4611      	mov	r1, r2
 8018526:	f7f5 fa63 	bl	800d9f0 <m_qmult_eml>
 801852a:	f894 3836 	ldrb.w	r3, [r4, #2102]	; 0x836
 801852e:	2b01      	cmp	r3, #1
 8018530:	f47f aa30 	bne.w	8017994 <MotionFX_propagate+0xa4>
 8018534:	edd5 7a08 	vldr	s15, [r5, #32]
 8018538:	69aa      	ldr	r2, [r5, #24]
 801853a:	69eb      	ldr	r3, [r5, #28]
 801853c:	61ab      	str	r3, [r5, #24]
 801853e:	eef1 7a67 	vneg.f32	s15, s15
 8018542:	61ea      	str	r2, [r5, #28]
 8018544:	edc5 7a08 	vstr	s15, [r5, #32]
 8018548:	f7ff ba24 	b.w	8017994 <MotionFX_propagate+0xa4>
 801854c:	4ab1      	ldr	r2, [pc, #708]	; (8018814 <MotionFX_propagate+0xf24>)
 801854e:	4630      	mov	r0, r6
 8018550:	4611      	mov	r1, r2
 8018552:	f7f5 fa4d 	bl	800d9f0 <m_qmult_eml>
 8018556:	f894 35f6 	ldrb.w	r3, [r4, #1526]	; 0x5f6
 801855a:	2b01      	cmp	r3, #1
 801855c:	f47f aa1f 	bne.w	801799e <MotionFX_propagate+0xae>
 8018560:	edd7 7a08 	vldr	s15, [r7, #32]
 8018564:	69ba      	ldr	r2, [r7, #24]
 8018566:	69fb      	ldr	r3, [r7, #28]
 8018568:	61bb      	str	r3, [r7, #24]
 801856a:	eef1 7a67 	vneg.f32	s15, s15
 801856e:	61fa      	str	r2, [r7, #28]
 8018570:	edc7 7a08 	vstr	s15, [r7, #32]
 8018574:	f7ff ba13 	b.w	801799e <MotionFX_propagate+0xae>
 8018578:	2201      	movs	r2, #1
 801857a:	f884 25f5 	strb.w	r2, [r4, #1525]	; 0x5f5
 801857e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8018582:	f7ff bb84 	b.w	8017c8e <MotionFX_propagate+0x39e>
 8018586:	2201      	movs	r2, #1
 8018588:	f884 2835 	strb.w	r2, [r4, #2101]	; 0x835
 801858c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8018590:	e623      	b.n	80181da <MotionFX_propagate+0x8ea>
 8018592:	4ba1      	ldr	r3, [pc, #644]	; (8018818 <MotionFX_propagate+0xf28>)
 8018594:	ed9d 0a02 	vldr	s0, [sp, #8]
 8018598:	ae10      	add	r6, sp, #64	; 0x40
 801859a:	f1a3 020c 	sub.w	r2, r3, #12
 801859e:	4618      	mov	r0, r3
 80185a0:	9600      	str	r6, [sp, #0]
 80185a2:	a909      	add	r1, sp, #36	; 0x24
 80185a4:	f7f5 fbf4 	bl	800dd90 <SpacePointGyroProp>
 80185a8:	f7ff bb99 	b.w	8017cde <MotionFX_propagate+0x3ee>
 80185ac:	ee61 1aa1 	vmul.f32	s3, s3, s3
 80185b0:	ee62 2aa2 	vmul.f32	s5, s5, s5
 80185b4:	ee65 7a05 	vmul.f32	s15, s10, s10
 80185b8:	ee72 2aa1 	vadd.f32	s5, s5, s3
 80185bc:	ee72 7aa7 	vadd.f32	s15, s5, s15
 80185c0:	ee17 0a90 	vmov	r0, s15
 80185c4:	f7e7 ffc8 	bl	8000558 <__aeabi_f2d>
 80185c8:	ec41 0b10 	vmov	d0, r0, r1
 80185cc:	f000 fdc0 	bl	8019150 <sqrt>
 80185d0:	ec51 0b10 	vmov	r0, r1, d0
 80185d4:	f7e8 fb0c 	bl	8000bf0 <__aeabi_d2f>
 80185d8:	ee0a 0a90 	vmov	s21, r0
 80185dc:	f7e7 ffbc 	bl	8000558 <__aeabi_f2d>
 80185e0:	a387      	add	r3, pc, #540	; (adr r3, 8018800 <MotionFX_propagate+0xf10>)
 80185e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185e6:	f7e8 fa7d 	bl	8000ae4 <__aeabi_dcmplt>
 80185ea:	eddd 7a06 	vldr	s15, [sp, #24]
 80185ee:	ed9d 6a07 	vldr	s12, [sp, #28]
 80185f2:	ed9d 7a08 	vldr	s14, [sp, #32]
 80185f6:	2800      	cmp	r0, #0
 80185f8:	bf18      	it	ne
 80185fa:	eef0 aa68 	vmovne.f32	s21, s17
 80185fe:	eec7 6aaa 	vdiv.f32	s13, s15, s21
 8018602:	eec6 7a2a 	vdiv.f32	s15, s12, s21
 8018606:	ee87 5a2a 	vdiv.f32	s10, s14, s21
 801860a:	ed9d 7a04 	vldr	s14, [sp, #16]
 801860e:	edcd 7a07 	vstr	s15, [sp, #28]
 8018612:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8018616:	ee07 6a90 	vmov	s15, r6
 801861a:	ee07 7a10 	vmov	s14, r7
 801861e:	edcd 6a06 	vstr	s13, [sp, #24]
 8018622:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018626:	eddd 6a03 	vldr	s13, [sp, #12]
 801862a:	ed9d 6a05 	vldr	s12, [sp, #20]
 801862e:	ed8d 5a08 	vstr	s10, [sp, #32]
 8018632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018636:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801863a:	ee67 7a8a 	vmul.f32	s15, s15, s20
 801863e:	ee27 aa0a 	vmul.f32	s20, s14, s20
 8018642:	ee07 8a10 	vmov	s14, r8
 8018646:	ee65 5aa9 	vmul.f32	s11, s11, s19
 801864a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801864e:	ee66 9aa9 	vmul.f32	s19, s13, s19
 8018652:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8018656:	ee26 6a09 	vmul.f32	s12, s12, s18
 801865a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801865e:	ee26 9a89 	vmul.f32	s18, s13, s18
 8018662:	ee3a 7a29 	vadd.f32	s14, s20, s19
 8018666:	ee77 7a86 	vadd.f32	s15, s15, s12
 801866a:	ee37 9a09 	vadd.f32	s18, s14, s18
 801866e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8018672:	ee29 9a09 	vmul.f32	s18, s18, s18
 8018676:	ee68 7a08 	vmul.f32	s15, s16, s16
 801867a:	ee37 7a09 	vadd.f32	s14, s14, s18
 801867e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018682:	ee17 0a90 	vmov	r0, s15
 8018686:	f7e7 ff67 	bl	8000558 <__aeabi_f2d>
 801868a:	ec41 0b10 	vmov	d0, r0, r1
 801868e:	f000 fd5f 	bl	8019150 <sqrt>
 8018692:	f894 25f5 	ldrb.w	r2, [r4, #1525]	; 0x5f5
 8018696:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
 801869a:	eddd 6a0a 	vldr	s13, [sp, #40]	; 0x28
 801869e:	ed9d 7a0b 	vldr	s14, [sp, #44]	; 0x2c
 80186a2:	f7ff baed 	b.w	8017c80 <MotionFX_propagate+0x390>
 80186a6:	4b5d      	ldr	r3, [pc, #372]	; (801881c <MotionFX_propagate+0xf2c>)
 80186a8:	ed9d 0a02 	vldr	s0, [sp, #8]
 80186ac:	ae10      	add	r6, sp, #64	; 0x40
 80186ae:	f1a3 020c 	sub.w	r2, r3, #12
 80186b2:	4618      	mov	r0, r3
 80186b4:	9600      	str	r6, [sp, #0]
 80186b6:	a909      	add	r1, sp, #36	; 0x24
 80186b8:	f7f5 fb6a 	bl	800dd90 <SpacePointGyroProp>
 80186bc:	e5b5      	b.n	801822a <MotionFX_propagate+0x93a>
 80186be:	ee61 1aa1 	vmul.f32	s3, s3, s3
 80186c2:	ee25 5a05 	vmul.f32	s10, s10, s10
 80186c6:	ee26 6a06 	vmul.f32	s12, s12, s12
 80186ca:	ee35 5a21 	vadd.f32	s10, s10, s3
 80186ce:	9305      	str	r3, [sp, #20]
 80186d0:	ee75 7a06 	vadd.f32	s15, s10, s12
 80186d4:	ee17 0a90 	vmov	r0, s15
 80186d8:	f7e7 ff3e 	bl	8000558 <__aeabi_f2d>
 80186dc:	ec41 0b10 	vmov	d0, r0, r1
 80186e0:	f000 fd36 	bl	8019150 <sqrt>
 80186e4:	ec51 0b10 	vmov	r0, r1, d0
 80186e8:	f7e8 fa82 	bl	8000bf0 <__aeabi_d2f>
 80186ec:	ed9d 7a06 	vldr	s14, [sp, #24]
 80186f0:	eddd 5a07 	vldr	s11, [sp, #28]
 80186f4:	eddd 6a08 	vldr	s13, [sp, #32]
 80186f8:	9b05      	ldr	r3, [sp, #20]
 80186fa:	ee07 0a90 	vmov	s15, r0
 80186fe:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8018702:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8018706:	ee86 5aa7 	vdiv.f32	s10, s13, s15
 801870a:	ed8d 7a07 	vstr	s14, [sp, #28]
 801870e:	ed9d 7a04 	vldr	s14, [sp, #16]
 8018712:	eddd 6a03 	vldr	s13, [sp, #12]
 8018716:	ed8d 6a06 	vstr	s12, [sp, #24]
 801871a:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 801871e:	ee07 5a90 	vmov	s15, r5
 8018722:	ee07 6a10 	vmov	s14, r6
 8018726:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801872a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801872e:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 8018732:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8018736:	ee06 7a90 	vmov	s13, r7
 801873a:	ee67 9a29 	vmul.f32	s19, s14, s19
 801873e:	ee07 3a10 	vmov	s14, r3
 8018742:	ee65 5a89 	vmul.f32	s11, s11, s18
 8018746:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801874a:	ee26 9a09 	vmul.f32	s18, s12, s18
 801874e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8018752:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8018756:	ee66 6aa8 	vmul.f32	s13, s13, s17
 801875a:	ee39 9a89 	vadd.f32	s18, s19, s18
 801875e:	ee67 8a28 	vmul.f32	s17, s14, s17
 8018762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018766:	ee79 8a28 	vadd.f32	s17, s18, s17
 801876a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801876e:	ee68 8aa8 	vmul.f32	s17, s17, s17
 8018772:	ee68 6a08 	vmul.f32	s13, s16, s16
 8018776:	ee77 7aa8 	vadd.f32	s15, s15, s17
 801877a:	ed8d 5a08 	vstr	s10, [sp, #32]
 801877e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018782:	ee17 0a90 	vmov	r0, s15
 8018786:	f7e7 fee7 	bl	8000558 <__aeabi_f2d>
 801878a:	2200      	movs	r2, #0
 801878c:	2300      	movs	r3, #0
 801878e:	4606      	mov	r6, r0
 8018790:	460f      	mov	r7, r1
 8018792:	f7e8 f9cf 	bl	8000b34 <__aeabi_dcmpun>
 8018796:	b930      	cbnz	r0, 80187a6 <MotionFX_propagate+0xeb6>
 8018798:	2200      	movs	r2, #0
 801879a:	2300      	movs	r3, #0
 801879c:	4630      	mov	r0, r6
 801879e:	4639      	mov	r1, r7
 80187a0:	f7e8 f9b4 	bl	8000b0c <__aeabi_dcmpge>
 80187a4:	b320      	cbz	r0, 80187f0 <MotionFX_propagate+0xf00>
 80187a6:	f894 2835 	ldrb.w	r2, [r4, #2101]	; 0x835
 80187aa:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
 80187ae:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 80187b2:	eddd 2a0b 	vldr	s5, [sp, #44]	; 0x2c
 80187b6:	e509      	b.n	80181cc <MotionFX_propagate+0x8dc>
 80187b8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80187bc:	ed87 8a06 	vstr	s16, [r7, #24]
 80187c0:	ed87 8a07 	vstr	s16, [r7, #28]
 80187c4:	ed87 8a08 	vstr	s16, [r7, #32]
 80187c8:	627b      	str	r3, [r7, #36]	; 0x24
 80187ca:	f7ff baea 	b.w	8017da2 <MotionFX_propagate+0x4b2>
 80187ce:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80187d2:	ed85 8a06 	vstr	s16, [r5, #24]
 80187d6:	ed85 8a07 	vstr	s16, [r5, #28]
 80187da:	ed85 8a08 	vstr	s16, [r5, #32]
 80187de:	626b      	str	r3, [r5, #36]	; 0x24
 80187e0:	e585      	b.n	80182ee <MotionFX_propagate+0x9fe>
 80187e2:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8018808 <MotionFX_propagate+0xf18>
 80187e6:	f7ff bbd2 	b.w	8017f8e <MotionFX_propagate+0x69e>
 80187ea:	ed9f 0b07 	vldr	d0, [pc, #28]	; 8018808 <MotionFX_propagate+0xf18>
 80187ee:	e67b      	b.n	80184e8 <MotionFX_propagate+0xbf8>
 80187f0:	ec47 6b10 	vmov	d0, r6, r7
 80187f4:	f000 fcac 	bl	8019150 <sqrt>
 80187f8:	e7d5      	b.n	80187a6 <MotionFX_propagate+0xeb6>
 80187fa:	bf00      	nop
 80187fc:	f3af 8000 	nop.w
 8018800:	a0b5ed8d 	.word	0xa0b5ed8d
 8018804:	3eb0c6f7 	.word	0x3eb0c6f7
	...
 8018810:	20001e44 	.word	0x20001e44
 8018814:	20001c04 	.word	0x20001c04
 8018818:	20001bd4 	.word	0x20001bd4
 801881c:	20001e14 	.word	0x20001e14

08018820 <MotionFX_MagCal_init>:
 8018820:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018824:	4c77      	ldr	r4, [pc, #476]	; (8018a04 <MotionFX_MagCal_init+0x1e4>)
 8018826:	f894 3941 	ldrb.w	r3, [r4, #2369]	; 0x941
 801882a:	b097      	sub	sp, #92	; 0x5c
 801882c:	b913      	cbnz	r3, 8018834 <MotionFX_MagCal_init+0x14>
 801882e:	b017      	add	sp, #92	; 0x5c
 8018830:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018834:	1e43      	subs	r3, r0, #1
 8018836:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801883a:	d2f8      	bcs.n	801882e <MotionFX_MagCal_init+0xe>
 801883c:	4689      	mov	r9, r1
 801883e:	4607      	mov	r7, r0
 8018840:	fa0f f880 	sxth.w	r8, r0
 8018844:	2900      	cmp	r1, #0
 8018846:	d15a      	bne.n	80188fe <MotionFX_MagCal_init+0xde>
 8018848:	f104 057c 	add.w	r5, r4, #124	; 0x7c
 801884c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801884e:	f04f 0e01 	mov.w	lr, #1
 8018852:	ae03      	add	r6, sp, #12
 8018854:	f88d e004 	strb.w	lr, [sp, #4]
 8018858:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801885a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801885c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801885e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018860:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8018862:	f855 2948 	ldr.w	r2, [r5], #-72
 8018866:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8018868:	6032      	str	r2, [r6, #0]
 801886a:	9302      	str	r3, [sp, #8]
 801886c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801886e:	ae10      	add	r6, sp, #64	; 0x40
 8018870:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8018872:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018876:	e886 0003 	stmia.w	r6, {r0, r1}
 801887a:	a901      	add	r1, sp, #4
 801887c:	2054      	movs	r0, #84	; 0x54
 801887e:	f7f3 fa12 	bl	800bca6 <MotionFX_SaveMagCalInNVM>
 8018882:	f884 9058 	strb.w	r9, [r4, #88]	; 0x58
 8018886:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 801888a:	4a5f      	ldr	r2, [pc, #380]	; (8018a08 <MotionFX_MagCal_init+0x1e8>)
 801888c:	1bdb      	subs	r3, r3, r7
 801888e:	ee07 3a90 	vmov	s15, r3
 8018892:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018896:	23c8      	movs	r3, #200	; 0xc8
 8018898:	eef0 7ae7 	vabs.f32	s15, s15
 801889c:	fb93 f3f7 	sdiv	r3, r3, r7
 80188a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80188a4:	b2db      	uxtb	r3, r3
 80188a6:	2b0f      	cmp	r3, #15
 80188a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80188ac:	bf28      	it	cs
 80188ae:	230f      	movcs	r3, #15
 80188b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188b4:	f884 3d76 	strb.w	r3, [r4, #3446]	; 0xd76
 80188b8:	f8c2 70c4 	str.w	r7, [r2, #196]	; 0xc4
 80188bc:	dd0f      	ble.n	80188de <MotionFX_MagCal_init+0xbe>
 80188be:	2300      	movs	r3, #0
 80188c0:	4952      	ldr	r1, [pc, #328]	; (8018a0c <MotionFX_MagCal_init+0x1ec>)
 80188c2:	f8a4 8012 	strh.w	r8, [r4, #18]
 80188c6:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80188ca:	6161      	str	r1, [r4, #20]
 80188cc:	8323      	strh	r3, [r4, #24]
 80188ce:	61e3      	str	r3, [r4, #28]
 80188d0:	8222      	strh	r2, [r4, #16]
 80188d2:	2300      	movs	r3, #0
 80188d4:	f884 3df0 	strb.w	r3, [r4, #3568]	; 0xdf0
 80188d8:	b017      	add	sp, #92	; 0x5c
 80188da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80188de:	edd4 7a05 	vldr	s15, [r4, #20]
 80188e2:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8018a10 <MotionFX_MagCal_init+0x1f0>
 80188e6:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8018a14 <MotionFX_MagCal_init+0x1f4>
 80188ea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80188ee:	eef0 7ae7 	vabs.f32	s15, s15
 80188f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80188f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188fa:	dce0      	bgt.n	80188be <MotionFX_MagCal_init+0x9e>
 80188fc:	e7e9      	b.n	80188d2 <MotionFX_MagCal_init+0xb2>
 80188fe:	2500      	movs	r5, #0
 8018900:	f44f 0202 	mov.w	r2, #8519680	; 0x820000
 8018904:	f504 6016 	add.w	r0, r4, #2400	; 0x960
 8018908:	4629      	mov	r1, r5
 801890a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801890e:	61a2      	str	r2, [r4, #24]
 8018910:	6220      	str	r0, [r4, #32]
 8018912:	f44f 7248 	mov.w	r2, #800	; 0x320
 8018916:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 801891a:	61e5      	str	r5, [r4, #28]
 801891c:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8018920:	65e5      	str	r5, [r4, #92]	; 0x5c
 8018922:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
 8018926:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
 801892a:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
 801892e:	f002 fb26 	bl	801af7e <memset>
 8018932:	225f      	movs	r2, #95	; 0x5f
 8018934:	23ff      	movs	r3, #255	; 0xff
 8018936:	2601      	movs	r6, #1
 8018938:	4629      	mov	r1, r5
 801893a:	6325      	str	r5, [r4, #48]	; 0x30
 801893c:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8018940:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 8018944:	62e5      	str	r5, [r4, #44]	; 0x2c
 8018946:	62a5      	str	r5, [r4, #40]	; 0x28
 8018948:	f884 20b1 	strb.w	r2, [r4, #177]	; 0xb1
 801894c:	250f      	movs	r5, #15
 801894e:	2234      	movs	r2, #52	; 0x34
 8018950:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 8018954:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
 8018958:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
 801895c:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
 8018960:	f884 6065 	strb.w	r6, [r4, #101]	; 0x65
 8018964:	f002 fb0b 	bl	801af7e <memset>
 8018968:	a916      	add	r1, sp, #88	; 0x58
 801896a:	f1a7 030a 	sub.w	r3, r7, #10
 801896e:	b29b      	uxth	r3, r3
 8018970:	2500      	movs	r5, #0
 8018972:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8018976:	2b32      	cmp	r3, #50	; 0x32
 8018978:	f801 5d54 	strb.w	r5, [r1, #-84]!
 801897c:	f04f 0301 	mov.w	r3, #1
 8018980:	f04f 0054 	mov.w	r0, #84	; 0x54
 8018984:	bf98      	it	ls
 8018986:	f884 6058 	strbls.w	r6, [r4, #88]	; 0x58
 801898a:	f884 607d 	strb.w	r6, [r4, #125]	; 0x7d
 801898e:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
 8018992:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
 8018996:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
 801899a:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
 801899e:	f7f3 f980 	bl	800bca2 <MotionFX_LoadMagCalFromNVM>
 80189a2:	2801      	cmp	r0, #1
 80189a4:	f43f af6f 	beq.w	8018886 <MotionFX_MagCal_init+0x66>
 80189a8:	9e02      	ldr	r6, [sp, #8]
 80189aa:	f88d 5004 	strb.w	r5, [sp, #4]
 80189ae:	2e00      	cmp	r6, #0
 80189b0:	f43f af69 	beq.w	8018886 <MotionFX_MagCal_init+0x66>
 80189b4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80189b8:	2b00      	cmp	r3, #0
 80189ba:	f43f af64 	beq.w	8018886 <MotionFX_MagCal_init+0x66>
 80189be:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80189c2:	2b00      	cmp	r3, #0
 80189c4:	f43f af5f 	beq.w	8018886 <MotionFX_MagCal_init+0x66>
 80189c8:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 80189cc:	429a      	cmp	r2, r3
 80189ce:	f4ff af5a 	bcc.w	8018886 <MotionFX_MagCal_init+0x66>
 80189d2:	f10d 0e0c 	add.w	lr, sp, #12
 80189d6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80189da:	4d0f      	ldr	r5, [pc, #60]	; (8018a18 <MotionFX_MagCal_init+0x1f8>)
 80189dc:	62e6      	str	r6, [r4, #44]	; 0x2c
 80189de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80189e0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80189e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80189e6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80189ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80189ec:	ae10      	add	r6, sp, #64	; 0x40
 80189ee:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80189f0:	f8de e000 	ldr.w	lr, [lr]
 80189f4:	f845 e948 	str.w	lr, [r5], #-72
 80189f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80189fa:	e896 0003 	ldmia.w	r6, {r0, r1}
 80189fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8018a02:	e740      	b.n	8018886 <MotionFX_MagCal_init+0x66>
 8018a04:	20001698 	.word	0x20001698
 8018a08:	200010f8 	.word	0x200010f8
 8018a0c:	3dcccccd 	.word	0x3dcccccd
 8018a10:	3dcccccd 	.word	0x3dcccccd
 8018a14:	3c23d70a 	.word	0x3c23d70a
 8018a18:	20001714 	.word	0x20001714

08018a1c <MotionFX_MagCal_run>:
 8018a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a20:	f8df e230 	ldr.w	lr, [pc, #560]	; 8018c54 <MotionFX_MagCal_run+0x238>
 8018a24:	f89e 3941 	ldrb.w	r3, [lr, #2369]	; 0x941
 8018a28:	b083      	sub	sp, #12
 8018a2a:	2b00      	cmp	r3, #0
 8018a2c:	d06f      	beq.n	8018b0e <MotionFX_MagCal_run+0xf2>
 8018a2e:	edd0 7a00 	vldr	s15, [r0]
 8018a32:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8018c44 <MotionFX_MagCal_run+0x228>
 8018a36:	f89e 4df0 	ldrb.w	r4, [lr, #3568]	; 0xdf0
 8018a3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018a3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a46:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8018a4a:	bfac      	ite	ge
 8018a4c:	ee77 7a87 	vaddge.f32	s15, s15, s14
 8018a50:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 8018a54:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8018c44 <MotionFX_MagCal_run+0x228>
 8018a58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018a5c:	ee17 1a90 	vmov	r1, s15
 8018a60:	edd0 7a01 	vldr	s15, [r0, #4]
 8018a64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018a68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a70:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8018a74:	bfac      	ite	ge
 8018a76:	ee77 7a87 	vaddge.f32	s15, s15, s14
 8018a7a:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 8018a7e:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8018c44 <MotionFX_MagCal_run+0x228>
 8018a82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018a86:	ee17 3a90 	vmov	r3, s15
 8018a8a:	edd0 7a02 	vldr	s15, [r0, #8]
 8018a8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018a92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a9a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8018a9e:	bfac      	ite	ge
 8018aa0:	ee77 7a87 	vaddge.f32	s15, s15, s14
 8018aa4:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 8018aa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018aac:	ee17 2a90 	vmov	r2, s15
 8018ab0:	b384      	cbz	r4, 8018b14 <MotionFX_MagCal_run+0xf8>
 8018ab2:	4d65      	ldr	r5, [pc, #404]	; (8018c48 <MotionFX_MagCal_run+0x22c>)
 8018ab4:	00e0      	lsls	r0, r4, #3
 8018ab6:	f8d5 50c4 	ldr.w	r5, [r5, #196]	; 0xc4
 8018aba:	eb0e 0600 	add.w	r6, lr, r0
 8018abe:	fb15 f504 	smulbb	r5, r5, r4
 8018ac2:	f8a6 5d78 	strh.w	r5, [r6, #3448]	; 0xd78
 8018ac6:	f647 75fe 	movw	r5, #32766	; 0x7ffe
 8018aca:	42a9      	cmp	r1, r5
 8018acc:	4f5f      	ldr	r7, [pc, #380]	; (8018c4c <MotionFX_MagCal_run+0x230>)
 8018ace:	f89e 6d76 	ldrb.w	r6, [lr, #3446]	; 0xd76
 8018ad2:	bfa8      	it	ge
 8018ad4:	4629      	movge	r1, r5
 8018ad6:	42ab      	cmp	r3, r5
 8018ad8:	bfa8      	it	ge
 8018ada:	462b      	movge	r3, r5
 8018adc:	42aa      	cmp	r2, r5
 8018ade:	bfa8      	it	ge
 8018ae0:	462a      	movge	r2, r5
 8018ae2:	3401      	adds	r4, #1
 8018ae4:	42b9      	cmp	r1, r7
 8018ae6:	4470      	add	r0, lr
 8018ae8:	bfb8      	it	lt
 8018aea:	4639      	movlt	r1, r7
 8018aec:	b2e4      	uxtb	r4, r4
 8018aee:	42bb      	cmp	r3, r7
 8018af0:	bfb8      	it	lt
 8018af2:	462b      	movlt	r3, r5
 8018af4:	42ba      	cmp	r2, r7
 8018af6:	bfb8      	it	lt
 8018af8:	463a      	movlt	r2, r7
 8018afa:	42a6      	cmp	r6, r4
 8018afc:	f88e 4df0 	strb.w	r4, [lr, #3568]	; 0xdf0
 8018b00:	f8a0 1d7a 	strh.w	r1, [r0, #3450]	; 0xd7a
 8018b04:	f8a0 3d7c 	strh.w	r3, [r0, #3452]	; 0xd7c
 8018b08:	f8a0 2d7e 	strh.w	r2, [r0, #3454]	; 0xd7e
 8018b0c:	d00a      	beq.n	8018b24 <MotionFX_MagCal_run+0x108>
 8018b0e:	b003      	add	sp, #12
 8018b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b14:	68c0      	ldr	r0, [r0, #12]
 8018b16:	f8ce 0d70 	str.w	r0, [lr, #3440]	; 0xd70
 8018b1a:	2001      	movs	r0, #1
 8018b1c:	f88e 0d74 	strb.w	r0, [lr, #3444]	; 0xd74
 8018b20:	4620      	mov	r0, r4
 8018b22:	e7d0      	b.n	8018ac6 <MotionFX_MagCal_run+0xaa>
 8018b24:	f89e 2d74 	ldrb.w	r2, [lr, #3444]	; 0xd74
 8018b28:	f8de cd70 	ldr.w	ip, [lr, #3440]	; 0xd70
 8018b2c:	f04f 0a00 	mov.w	sl, #0
 8018b30:	f88e adf0 	strb.w	sl, [lr, #3568]	; 0xdf0
 8018b34:	2a00      	cmp	r2, #0
 8018b36:	d048      	beq.n	8018bca <MotionFX_MagCal_run+0x1ae>
 8018b38:	3a01      	subs	r2, #1
 8018b3a:	217a      	movs	r1, #122	; 0x7a
 8018b3c:	b2d2      	uxtb	r2, r2
 8018b3e:	fb02 1201 	mla	r2, r2, r1, r1
 8018b42:	f8be 701a 	ldrh.w	r7, [lr, #26]
 8018b46:	f8de 5020 	ldr.w	r5, [lr, #32]
 8018b4a:	f8be 3018 	ldrh.w	r3, [lr, #24]
 8018b4e:	f8de 001c 	ldr.w	r0, [lr, #28]
 8018b52:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 8018c50 <MotionFX_MagCal_run+0x234>
 8018b56:	9201      	str	r2, [sp, #4]
 8018b58:	4651      	mov	r1, sl
 8018b5a:	4654      	mov	r4, sl
 8018b5c:	f06f 4960 	mvn.w	r9, #3758096384	; 0xe0000000
 8018b60:	f04f 0801 	mov.w	r8, #1
 8018b64:	f89b 6006 	ldrb.w	r6, [fp, #6]
 8018b68:	b32e      	cbz	r6, 8018bb6 <MotionFX_MagCal_run+0x19a>
 8018b6a:	b327      	cbz	r7, 8018bb6 <MotionFX_MagCal_run+0x19a>
 8018b6c:	3e01      	subs	r6, #1
 8018b6e:	f10a 0208 	add.w	r2, sl, #8
 8018b72:	b2f6      	uxtb	r6, r6
 8018b74:	2108      	movs	r1, #8
 8018b76:	fb11 2606 	smlabb	r6, r1, r6, r2
 8018b7a:	4a35      	ldr	r2, [pc, #212]	; (8018c50 <MotionFX_MagCal_run+0x234>)
 8018b7c:	42bb      	cmp	r3, r7
 8018b7e:	4416      	add	r6, r2
 8018b80:	bf28      	it	cs
 8018b82:	463b      	movcs	r3, r7
 8018b84:	465a      	mov	r2, fp
 8018b86:	3301      	adds	r3, #1
 8018b88:	b29b      	uxth	r3, r3
 8018b8a:	42bb      	cmp	r3, r7
 8018b8c:	bf28      	it	cs
 8018b8e:	463b      	movcs	r3, r7
 8018b90:	eb03 0009 	add.w	r0, r3, r9
 8018b94:	eb05 01c0 	add.w	r1, r5, r0, lsl #3
 8018b98:	8954      	ldrh	r4, [r2, #10]
 8018b9a:	f805 8030 	strb.w	r8, [r5, r0, lsl #3]
 8018b9e:	8990      	ldrh	r0, [r2, #12]
 8018ba0:	804c      	strh	r4, [r1, #2]
 8018ba2:	89d4      	ldrh	r4, [r2, #14]
 8018ba4:	8088      	strh	r0, [r1, #4]
 8018ba6:	f832 0f08 	ldrh.w	r0, [r2, #8]!
 8018baa:	80cc      	strh	r4, [r1, #6]
 8018bac:	42b2      	cmp	r2, r6
 8018bae:	4460      	add	r0, ip
 8018bb0:	d1e9      	bne.n	8018b86 <MotionFX_MagCal_run+0x16a>
 8018bb2:	2101      	movs	r1, #1
 8018bb4:	460c      	mov	r4, r1
 8018bb6:	9a01      	ldr	r2, [sp, #4]
 8018bb8:	f10a 0a7a 	add.w	sl, sl, #122	; 0x7a
 8018bbc:	4552      	cmp	r2, sl
 8018bbe:	f10b 0b7a 	add.w	fp, fp, #122	; 0x7a
 8018bc2:	d1cf      	bne.n	8018b64 <MotionFX_MagCal_run+0x148>
 8018bc4:	2c00      	cmp	r4, #0
 8018bc6:	d13a      	bne.n	8018c3e <MotionFX_MagCal_run+0x222>
 8018bc8:	bbb1      	cbnz	r1, 8018c38 <MotionFX_MagCal_run+0x21c>
 8018bca:	f89e 3058 	ldrb.w	r3, [lr, #88]	; 0x58
 8018bce:	2b00      	cmp	r3, #0
 8018bd0:	d09d      	beq.n	8018b0e <MotionFX_MagCal_run+0xf2>
 8018bd2:	f8be 1018 	ldrh.w	r1, [lr, #24]
 8018bd6:	f8be 301a 	ldrh.w	r3, [lr, #26]
 8018bda:	428b      	cmp	r3, r1
 8018bdc:	d023      	beq.n	8018c26 <MotionFX_MagCal_run+0x20a>
 8018bde:	f9be 4012 	ldrsh.w	r4, [lr, #18]
 8018be2:	b329      	cbz	r1, 8018c30 <MotionFX_MagCal_run+0x214>
 8018be4:	f8de 201c 	ldr.w	r2, [lr, #28]
 8018be8:	3201      	adds	r2, #1
 8018bea:	1913      	adds	r3, r2, r4
 8018bec:	1c5a      	adds	r2, r3, #1
 8018bee:	d01f      	beq.n	8018c30 <MotionFX_MagCal_run+0x214>
 8018bf0:	f503 501c 	add.w	r0, r3, #9984	; 0x2700
 8018bf4:	3010      	adds	r0, #16
 8018bf6:	f8de 205c 	ldr.w	r2, [lr, #92]	; 0x5c
 8018bfa:	4282      	cmp	r2, r0
 8018bfc:	f8be 0060 	ldrh.w	r0, [lr, #96]	; 0x60
 8018c00:	bf84      	itt	hi
 8018c02:	f8ce 305c 	strhi.w	r3, [lr, #92]	; 0x5c
 8018c06:	461a      	movhi	r2, r3
 8018c08:	4402      	add	r2, r0
 8018c0a:	4293      	cmp	r3, r2
 8018c0c:	f4ff af7f 	bcc.w	8018b0e <MotionFX_MagCal_run+0xf2>
 8018c10:	b121      	cbz	r1, 8018c1c <MotionFX_MagCal_run+0x200>
 8018c12:	f8de 201c 	ldr.w	r2, [lr, #28]
 8018c16:	3901      	subs	r1, #1
 8018c18:	fb04 2111 	mls	r1, r4, r1, r2
 8018c1c:	1a5b      	subs	r3, r3, r1
 8018c1e:	b21b      	sxth	r3, r3
 8018c20:	4283      	cmp	r3, r0
 8018c22:	f6ff af74 	blt.w	8018b0e <MotionFX_MagCal_run+0xf2>
 8018c26:	b003      	add	sp, #12
 8018c28:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c2c:	f7f6 bd4e 	b.w	800f6cc <MEMS_runMagCal.constprop.21>
 8018c30:	f242 7010 	movw	r0, #10000	; 0x2710
 8018c34:	2300      	movs	r3, #0
 8018c36:	e7de      	b.n	8018bf6 <MotionFX_MagCal_run+0x1da>
 8018c38:	f8ce 001c 	str.w	r0, [lr, #28]
 8018c3c:	e7c5      	b.n	8018bca <MotionFX_MagCal_run+0x1ae>
 8018c3e:	f8ae 3018 	strh.w	r3, [lr, #24]
 8018c42:	e7c1      	b.n	8018bc8 <MotionFX_MagCal_run+0x1ac>
 8018c44:	43fa0000 	.word	0x43fa0000
 8018c48:	200010f8 	.word	0x200010f8
 8018c4c:	ffff8002 	.word	0xffff8002
 8018c50:	20002408 	.word	0x20002408
 8018c54:	20001698 	.word	0x20001698

08018c58 <MotionFX_MagCal_getParams>:
 8018c58:	4b14      	ldr	r3, [pc, #80]	; (8018cac <MotionFX_MagCal_getParams+0x54>)
 8018c5a:	f893 2941 	ldrb.w	r2, [r3, #2369]	; 0x941
 8018c5e:	b902      	cbnz	r2, 8018c62 <MotionFX_MagCal_getParams+0xa>
 8018c60:	4770      	bx	lr
 8018c62:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8018c66:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8018c6a:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8018c6e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8018cb0 <MotionFX_MagCal_getParams+0x58>
 8018c72:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8018c76:	7303      	strb	r3, [r0, #12]
 8018c78:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8018c7c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8018c80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018c84:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8018c88:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018c8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018c90:	eec6 5a86 	vdiv.f32	s11, s13, s12
 8018c94:	eec7 6a06 	vdiv.f32	s13, s14, s12
 8018c98:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8018c9c:	edc0 5a00 	vstr	s11, [r0]
 8018ca0:	edc0 6a01 	vstr	s13, [r0, #4]
 8018ca4:	ed80 7a02 	vstr	s14, [r0, #8]
 8018ca8:	4770      	bx	lr
 8018caa:	bf00      	nop
 8018cac:	20001698 	.word	0x20001698
 8018cb0:	43fa0000 	.word	0x43fa0000

08018cb4 <MotionFX_GetLibVersion>:
 8018cb4:	4b10      	ldr	r3, [pc, #64]	; (8018cf8 <MotionFX_GetLibVersion+0x44>)
 8018cb6:	f893 3941 	ldrb.w	r3, [r3, #2369]	; 0x941
 8018cba:	b90b      	cbnz	r3, 8018cc0 <MotionFX_GetLibVersion+0xc>
 8018cbc:	4618      	mov	r0, r3
 8018cbe:	4770      	bx	lr
 8018cc0:	b470      	push	{r4, r5, r6}
 8018cc2:	4e0e      	ldr	r6, [pc, #56]	; (8018cfc <MotionFX_GetLibVersion+0x48>)
 8018cc4:	4605      	mov	r5, r0
 8018cc6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8018cc8:	b08b      	sub	sp, #44	; 0x2c
 8018cca:	ac01      	add	r4, sp, #4
 8018ccc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018cce:	6833      	ldr	r3, [r6, #0]
 8018cd0:	f824 3b02 	strh.w	r3, [r4], #2
 8018cd4:	0c1b      	lsrs	r3, r3, #16
 8018cd6:	7023      	strb	r3, [r4, #0]
 8018cd8:	ac01      	add	r4, sp, #4
 8018cda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018cdc:	8826      	ldrh	r6, [r4, #0]
 8018cde:	60eb      	str	r3, [r5, #12]
 8018ce0:	78a4      	ldrb	r4, [r4, #2]
 8018ce2:	6028      	str	r0, [r5, #0]
 8018ce4:	2312      	movs	r3, #18
 8018ce6:	4618      	mov	r0, r3
 8018ce8:	6069      	str	r1, [r5, #4]
 8018cea:	60aa      	str	r2, [r5, #8]
 8018cec:	822e      	strh	r6, [r5, #16]
 8018cee:	74ac      	strb	r4, [r5, #18]
 8018cf0:	b00b      	add	sp, #44	; 0x2c
 8018cf2:	bc70      	pop	{r4, r5, r6}
 8018cf4:	4770      	bx	lr
 8018cf6:	bf00      	nop
 8018cf8:	20001698 	.word	0x20001698
 8018cfc:	0801d748 	.word	0x0801d748

08018d00 <floor>:
 8018d00:	ec51 0b10 	vmov	r0, r1, d0
 8018d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d08:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8018d0c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8018d10:	2e13      	cmp	r6, #19
 8018d12:	ee10 8a10 	vmov	r8, s0
 8018d16:	460c      	mov	r4, r1
 8018d18:	ee10 5a10 	vmov	r5, s0
 8018d1c:	dc35      	bgt.n	8018d8a <floor+0x8a>
 8018d1e:	2e00      	cmp	r6, #0
 8018d20:	da17      	bge.n	8018d52 <floor+0x52>
 8018d22:	a335      	add	r3, pc, #212	; (adr r3, 8018df8 <floor+0xf8>)
 8018d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d28:	f7e7 fab8 	bl	800029c <__adddf3>
 8018d2c:	2200      	movs	r2, #0
 8018d2e:	2300      	movs	r3, #0
 8018d30:	f7e7 fef6 	bl	8000b20 <__aeabi_dcmpgt>
 8018d34:	b150      	cbz	r0, 8018d4c <floor+0x4c>
 8018d36:	2c00      	cmp	r4, #0
 8018d38:	da5a      	bge.n	8018df0 <floor+0xf0>
 8018d3a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8018d3e:	ea53 0308 	orrs.w	r3, r3, r8
 8018d42:	4b2f      	ldr	r3, [pc, #188]	; (8018e00 <floor+0x100>)
 8018d44:	f04f 0500 	mov.w	r5, #0
 8018d48:	bf18      	it	ne
 8018d4a:	461c      	movne	r4, r3
 8018d4c:	4621      	mov	r1, r4
 8018d4e:	4628      	mov	r0, r5
 8018d50:	e025      	b.n	8018d9e <floor+0x9e>
 8018d52:	4f2c      	ldr	r7, [pc, #176]	; (8018e04 <floor+0x104>)
 8018d54:	4137      	asrs	r7, r6
 8018d56:	ea01 0307 	and.w	r3, r1, r7
 8018d5a:	4303      	orrs	r3, r0
 8018d5c:	d01f      	beq.n	8018d9e <floor+0x9e>
 8018d5e:	a326      	add	r3, pc, #152	; (adr r3, 8018df8 <floor+0xf8>)
 8018d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d64:	f7e7 fa9a 	bl	800029c <__adddf3>
 8018d68:	2200      	movs	r2, #0
 8018d6a:	2300      	movs	r3, #0
 8018d6c:	f7e7 fed8 	bl	8000b20 <__aeabi_dcmpgt>
 8018d70:	2800      	cmp	r0, #0
 8018d72:	d0eb      	beq.n	8018d4c <floor+0x4c>
 8018d74:	2c00      	cmp	r4, #0
 8018d76:	bfbe      	ittt	lt
 8018d78:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8018d7c:	fa43 f606 	asrlt.w	r6, r3, r6
 8018d80:	19a4      	addlt	r4, r4, r6
 8018d82:	ea24 0407 	bic.w	r4, r4, r7
 8018d86:	2500      	movs	r5, #0
 8018d88:	e7e0      	b.n	8018d4c <floor+0x4c>
 8018d8a:	2e33      	cmp	r6, #51	; 0x33
 8018d8c:	dd0b      	ble.n	8018da6 <floor+0xa6>
 8018d8e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8018d92:	d104      	bne.n	8018d9e <floor+0x9e>
 8018d94:	ee10 2a10 	vmov	r2, s0
 8018d98:	460b      	mov	r3, r1
 8018d9a:	f7e7 fa7f 	bl	800029c <__adddf3>
 8018d9e:	ec41 0b10 	vmov	d0, r0, r1
 8018da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018da6:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8018daa:	f04f 33ff 	mov.w	r3, #4294967295
 8018dae:	fa23 f707 	lsr.w	r7, r3, r7
 8018db2:	4238      	tst	r0, r7
 8018db4:	d0f3      	beq.n	8018d9e <floor+0x9e>
 8018db6:	a310      	add	r3, pc, #64	; (adr r3, 8018df8 <floor+0xf8>)
 8018db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dbc:	f7e7 fa6e 	bl	800029c <__adddf3>
 8018dc0:	2200      	movs	r2, #0
 8018dc2:	2300      	movs	r3, #0
 8018dc4:	f7e7 feac 	bl	8000b20 <__aeabi_dcmpgt>
 8018dc8:	2800      	cmp	r0, #0
 8018dca:	d0bf      	beq.n	8018d4c <floor+0x4c>
 8018dcc:	2c00      	cmp	r4, #0
 8018dce:	da02      	bge.n	8018dd6 <floor+0xd6>
 8018dd0:	2e14      	cmp	r6, #20
 8018dd2:	d103      	bne.n	8018ddc <floor+0xdc>
 8018dd4:	3401      	adds	r4, #1
 8018dd6:	ea25 0507 	bic.w	r5, r5, r7
 8018dda:	e7b7      	b.n	8018d4c <floor+0x4c>
 8018ddc:	2301      	movs	r3, #1
 8018dde:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8018de2:	fa03 f606 	lsl.w	r6, r3, r6
 8018de6:	4435      	add	r5, r6
 8018de8:	45a8      	cmp	r8, r5
 8018dea:	bf88      	it	hi
 8018dec:	18e4      	addhi	r4, r4, r3
 8018dee:	e7f2      	b.n	8018dd6 <floor+0xd6>
 8018df0:	2500      	movs	r5, #0
 8018df2:	462c      	mov	r4, r5
 8018df4:	e7aa      	b.n	8018d4c <floor+0x4c>
 8018df6:	bf00      	nop
 8018df8:	8800759c 	.word	0x8800759c
 8018dfc:	7e37e43c 	.word	0x7e37e43c
 8018e00:	bff00000 	.word	0xbff00000
 8018e04:	000fffff 	.word	0x000fffff

08018e08 <fmax>:
 8018e08:	b508      	push	{r3, lr}
 8018e0a:	ed2d 8b04 	vpush	{d8-d9}
 8018e0e:	eeb0 8a40 	vmov.f32	s16, s0
 8018e12:	eef0 8a60 	vmov.f32	s17, s1
 8018e16:	eeb0 9a41 	vmov.f32	s18, s2
 8018e1a:	eef0 9a61 	vmov.f32	s19, s3
 8018e1e:	f000 f841 	bl	8018ea4 <__fpclassifyd>
 8018e22:	b168      	cbz	r0, 8018e40 <fmax+0x38>
 8018e24:	eeb0 0a49 	vmov.f32	s0, s18
 8018e28:	eef0 0a69 	vmov.f32	s1, s19
 8018e2c:	f000 f83a 	bl	8018ea4 <__fpclassifyd>
 8018e30:	b150      	cbz	r0, 8018e48 <fmax+0x40>
 8018e32:	ec53 2b19 	vmov	r2, r3, d9
 8018e36:	ec51 0b18 	vmov	r0, r1, d8
 8018e3a:	f7e7 fe71 	bl	8000b20 <__aeabi_dcmpgt>
 8018e3e:	b918      	cbnz	r0, 8018e48 <fmax+0x40>
 8018e40:	eeb0 8a49 	vmov.f32	s16, s18
 8018e44:	eef0 8a69 	vmov.f32	s17, s19
 8018e48:	eeb0 0a48 	vmov.f32	s0, s16
 8018e4c:	eef0 0a68 	vmov.f32	s1, s17
 8018e50:	ecbd 8b04 	vpop	{d8-d9}
 8018e54:	bd08      	pop	{r3, pc}

08018e56 <fmin>:
 8018e56:	b508      	push	{r3, lr}
 8018e58:	ed2d 8b04 	vpush	{d8-d9}
 8018e5c:	eeb0 8a40 	vmov.f32	s16, s0
 8018e60:	eef0 8a60 	vmov.f32	s17, s1
 8018e64:	eeb0 9a41 	vmov.f32	s18, s2
 8018e68:	eef0 9a61 	vmov.f32	s19, s3
 8018e6c:	f000 f81a 	bl	8018ea4 <__fpclassifyd>
 8018e70:	b168      	cbz	r0, 8018e8e <fmin+0x38>
 8018e72:	eeb0 0a49 	vmov.f32	s0, s18
 8018e76:	eef0 0a69 	vmov.f32	s1, s19
 8018e7a:	f000 f813 	bl	8018ea4 <__fpclassifyd>
 8018e7e:	b150      	cbz	r0, 8018e96 <fmin+0x40>
 8018e80:	ec53 2b19 	vmov	r2, r3, d9
 8018e84:	ec51 0b18 	vmov	r0, r1, d8
 8018e88:	f7e7 fe2c 	bl	8000ae4 <__aeabi_dcmplt>
 8018e8c:	b918      	cbnz	r0, 8018e96 <fmin+0x40>
 8018e8e:	eeb0 8a49 	vmov.f32	s16, s18
 8018e92:	eef0 8a69 	vmov.f32	s17, s19
 8018e96:	eeb0 0a48 	vmov.f32	s0, s16
 8018e9a:	eef0 0a68 	vmov.f32	s1, s17
 8018e9e:	ecbd 8b04 	vpop	{d8-d9}
 8018ea2:	bd08      	pop	{r3, pc}

08018ea4 <__fpclassifyd>:
 8018ea4:	ec53 2b10 	vmov	r2, r3, d0
 8018ea8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8018eac:	b510      	push	{r4, lr}
 8018eae:	ee10 0a10 	vmov	r0, s0
 8018eb2:	d01b      	beq.n	8018eec <__fpclassifyd+0x48>
 8018eb4:	490f      	ldr	r1, [pc, #60]	; (8018ef4 <__fpclassifyd+0x50>)
 8018eb6:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
 8018eba:	428c      	cmp	r4, r1
 8018ebc:	d910      	bls.n	8018ee0 <__fpclassifyd+0x3c>
 8018ebe:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 8018ec2:	490c      	ldr	r1, [pc, #48]	; (8018ef4 <__fpclassifyd+0x50>)
 8018ec4:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8018ec8:	428b      	cmp	r3, r1
 8018eca:	d909      	bls.n	8018ee0 <__fpclassifyd+0x3c>
 8018ecc:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8018ed0:	d308      	bcc.n	8018ee4 <__fpclassifyd+0x40>
 8018ed2:	4b09      	ldr	r3, [pc, #36]	; (8018ef8 <__fpclassifyd+0x54>)
 8018ed4:	429a      	cmp	r2, r3
 8018ed6:	d107      	bne.n	8018ee8 <__fpclassifyd+0x44>
 8018ed8:	fab0 f080 	clz	r0, r0
 8018edc:	0940      	lsrs	r0, r0, #5
 8018ede:	bd10      	pop	{r4, pc}
 8018ee0:	2004      	movs	r0, #4
 8018ee2:	bd10      	pop	{r4, pc}
 8018ee4:	2003      	movs	r0, #3
 8018ee6:	bd10      	pop	{r4, pc}
 8018ee8:	2000      	movs	r0, #0
 8018eea:	bd10      	pop	{r4, pc}
 8018eec:	2800      	cmp	r0, #0
 8018eee:	d1e6      	bne.n	8018ebe <__fpclassifyd+0x1a>
 8018ef0:	2002      	movs	r0, #2
 8018ef2:	bd10      	pop	{r4, pc}
 8018ef4:	7fdfffff 	.word	0x7fdfffff
 8018ef8:	7ff00000 	.word	0x7ff00000

08018efc <cosf>:
 8018efc:	ee10 3a10 	vmov	r3, s0
 8018f00:	b507      	push	{r0, r1, r2, lr}
 8018f02:	4a1c      	ldr	r2, [pc, #112]	; (8018f74 <cosf+0x78>)
 8018f04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018f08:	4293      	cmp	r3, r2
 8018f0a:	dc04      	bgt.n	8018f16 <cosf+0x1a>
 8018f0c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8018f78 <cosf+0x7c>
 8018f10:	f001 f828 	bl	8019f64 <__kernel_cosf>
 8018f14:	e004      	b.n	8018f20 <cosf+0x24>
 8018f16:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018f1a:	db04      	blt.n	8018f26 <cosf+0x2a>
 8018f1c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8018f20:	b003      	add	sp, #12
 8018f22:	f85d fb04 	ldr.w	pc, [sp], #4
 8018f26:	4668      	mov	r0, sp
 8018f28:	f000 fea8 	bl	8019c7c <__ieee754_rem_pio2f>
 8018f2c:	f000 0003 	and.w	r0, r0, #3
 8018f30:	2801      	cmp	r0, #1
 8018f32:	d007      	beq.n	8018f44 <cosf+0x48>
 8018f34:	2802      	cmp	r0, #2
 8018f36:	d00e      	beq.n	8018f56 <cosf+0x5a>
 8018f38:	b9a0      	cbnz	r0, 8018f64 <cosf+0x68>
 8018f3a:	eddd 0a01 	vldr	s1, [sp, #4]
 8018f3e:	ed9d 0a00 	vldr	s0, [sp]
 8018f42:	e7e5      	b.n	8018f10 <cosf+0x14>
 8018f44:	eddd 0a01 	vldr	s1, [sp, #4]
 8018f48:	ed9d 0a00 	vldr	s0, [sp]
 8018f4c:	f001 fac6 	bl	801a4dc <__kernel_sinf>
 8018f50:	eeb1 0a40 	vneg.f32	s0, s0
 8018f54:	e7e4      	b.n	8018f20 <cosf+0x24>
 8018f56:	eddd 0a01 	vldr	s1, [sp, #4]
 8018f5a:	ed9d 0a00 	vldr	s0, [sp]
 8018f5e:	f001 f801 	bl	8019f64 <__kernel_cosf>
 8018f62:	e7f5      	b.n	8018f50 <cosf+0x54>
 8018f64:	2001      	movs	r0, #1
 8018f66:	eddd 0a01 	vldr	s1, [sp, #4]
 8018f6a:	ed9d 0a00 	vldr	s0, [sp]
 8018f6e:	f001 fab5 	bl	801a4dc <__kernel_sinf>
 8018f72:	e7d5      	b.n	8018f20 <cosf+0x24>
 8018f74:	3f490fd8 	.word	0x3f490fd8
 8018f78:	00000000 	.word	0x00000000

08018f7c <roundf>:
 8018f7c:	ee10 0a10 	vmov	r0, s0
 8018f80:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8018f84:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8018f88:	2a16      	cmp	r2, #22
 8018f8a:	dc15      	bgt.n	8018fb8 <roundf+0x3c>
 8018f8c:	2a00      	cmp	r2, #0
 8018f8e:	da08      	bge.n	8018fa2 <roundf+0x26>
 8018f90:	3201      	adds	r2, #1
 8018f92:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8018f96:	d101      	bne.n	8018f9c <roundf+0x20>
 8018f98:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8018f9c:	ee00 3a10 	vmov	s0, r3
 8018fa0:	4770      	bx	lr
 8018fa2:	4908      	ldr	r1, [pc, #32]	; (8018fc4 <roundf+0x48>)
 8018fa4:	4111      	asrs	r1, r2
 8018fa6:	4208      	tst	r0, r1
 8018fa8:	d0fa      	beq.n	8018fa0 <roundf+0x24>
 8018faa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8018fae:	4113      	asrs	r3, r2
 8018fb0:	4403      	add	r3, r0
 8018fb2:	ea23 0301 	bic.w	r3, r3, r1
 8018fb6:	e7f1      	b.n	8018f9c <roundf+0x20>
 8018fb8:	2a80      	cmp	r2, #128	; 0x80
 8018fba:	d1f1      	bne.n	8018fa0 <roundf+0x24>
 8018fbc:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018fc0:	4770      	bx	lr
 8018fc2:	bf00      	nop
 8018fc4:	007fffff 	.word	0x007fffff

08018fc8 <sinf>:
 8018fc8:	ee10 3a10 	vmov	r3, s0
 8018fcc:	b507      	push	{r0, r1, r2, lr}
 8018fce:	4a1d      	ldr	r2, [pc, #116]	; (8019044 <sinf+0x7c>)
 8018fd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018fd4:	4293      	cmp	r3, r2
 8018fd6:	dc05      	bgt.n	8018fe4 <sinf+0x1c>
 8018fd8:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8019048 <sinf+0x80>
 8018fdc:	2000      	movs	r0, #0
 8018fde:	f001 fa7d 	bl	801a4dc <__kernel_sinf>
 8018fe2:	e004      	b.n	8018fee <sinf+0x26>
 8018fe4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018fe8:	db04      	blt.n	8018ff4 <sinf+0x2c>
 8018fea:	ee30 0a40 	vsub.f32	s0, s0, s0
 8018fee:	b003      	add	sp, #12
 8018ff0:	f85d fb04 	ldr.w	pc, [sp], #4
 8018ff4:	4668      	mov	r0, sp
 8018ff6:	f000 fe41 	bl	8019c7c <__ieee754_rem_pio2f>
 8018ffa:	f000 0003 	and.w	r0, r0, #3
 8018ffe:	2801      	cmp	r0, #1
 8019000:	d008      	beq.n	8019014 <sinf+0x4c>
 8019002:	2802      	cmp	r0, #2
 8019004:	d00d      	beq.n	8019022 <sinf+0x5a>
 8019006:	b9b0      	cbnz	r0, 8019036 <sinf+0x6e>
 8019008:	2001      	movs	r0, #1
 801900a:	eddd 0a01 	vldr	s1, [sp, #4]
 801900e:	ed9d 0a00 	vldr	s0, [sp]
 8019012:	e7e4      	b.n	8018fde <sinf+0x16>
 8019014:	eddd 0a01 	vldr	s1, [sp, #4]
 8019018:	ed9d 0a00 	vldr	s0, [sp]
 801901c:	f000 ffa2 	bl	8019f64 <__kernel_cosf>
 8019020:	e7e5      	b.n	8018fee <sinf+0x26>
 8019022:	2001      	movs	r0, #1
 8019024:	eddd 0a01 	vldr	s1, [sp, #4]
 8019028:	ed9d 0a00 	vldr	s0, [sp]
 801902c:	f001 fa56 	bl	801a4dc <__kernel_sinf>
 8019030:	eeb1 0a40 	vneg.f32	s0, s0
 8019034:	e7db      	b.n	8018fee <sinf+0x26>
 8019036:	eddd 0a01 	vldr	s1, [sp, #4]
 801903a:	ed9d 0a00 	vldr	s0, [sp]
 801903e:	f000 ff91 	bl	8019f64 <__kernel_cosf>
 8019042:	e7f5      	b.n	8019030 <sinf+0x68>
 8019044:	3f490fd8 	.word	0x3f490fd8
 8019048:	00000000 	.word	0x00000000

0801904c <tanf>:
 801904c:	ee10 3a10 	vmov	r3, s0
 8019050:	b507      	push	{r0, r1, r2, lr}
 8019052:	4a10      	ldr	r2, [pc, #64]	; (8019094 <tanf+0x48>)
 8019054:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019058:	4293      	cmp	r3, r2
 801905a:	dc05      	bgt.n	8019068 <tanf+0x1c>
 801905c:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8019098 <tanf+0x4c>
 8019060:	2001      	movs	r0, #1
 8019062:	f001 fa83 	bl	801a56c <__kernel_tanf>
 8019066:	e004      	b.n	8019072 <tanf+0x26>
 8019068:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801906c:	db04      	blt.n	8019078 <tanf+0x2c>
 801906e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8019072:	b003      	add	sp, #12
 8019074:	f85d fb04 	ldr.w	pc, [sp], #4
 8019078:	4668      	mov	r0, sp
 801907a:	f000 fdff 	bl	8019c7c <__ieee754_rem_pio2f>
 801907e:	0040      	lsls	r0, r0, #1
 8019080:	f000 0002 	and.w	r0, r0, #2
 8019084:	f1c0 0001 	rsb	r0, r0, #1
 8019088:	eddd 0a01 	vldr	s1, [sp, #4]
 801908c:	ed9d 0a00 	vldr	s0, [sp]
 8019090:	e7e7      	b.n	8019062 <tanf+0x16>
 8019092:	bf00      	nop
 8019094:	3f490fda 	.word	0x3f490fda
 8019098:	00000000 	.word	0x00000000

0801909c <asin>:
 801909c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801909e:	ed2d 8b02 	vpush	{d8}
 80190a2:	4e26      	ldr	r6, [pc, #152]	; (801913c <asin+0xa0>)
 80190a4:	b08b      	sub	sp, #44	; 0x2c
 80190a6:	ec55 4b10 	vmov	r4, r5, d0
 80190aa:	f000 f955 	bl	8019358 <__ieee754_asin>
 80190ae:	f996 3000 	ldrsb.w	r3, [r6]
 80190b2:	eeb0 8a40 	vmov.f32	s16, s0
 80190b6:	eef0 8a60 	vmov.f32	s17, s1
 80190ba:	3301      	adds	r3, #1
 80190bc:	d036      	beq.n	801912c <asin+0x90>
 80190be:	4622      	mov	r2, r4
 80190c0:	462b      	mov	r3, r5
 80190c2:	4620      	mov	r0, r4
 80190c4:	4629      	mov	r1, r5
 80190c6:	f7e7 fd35 	bl	8000b34 <__aeabi_dcmpun>
 80190ca:	4607      	mov	r7, r0
 80190cc:	bb70      	cbnz	r0, 801912c <asin+0x90>
 80190ce:	ec45 4b10 	vmov	d0, r4, r5
 80190d2:	f001 fcd9 	bl	801aa88 <fabs>
 80190d6:	2200      	movs	r2, #0
 80190d8:	4b19      	ldr	r3, [pc, #100]	; (8019140 <asin+0xa4>)
 80190da:	ec51 0b10 	vmov	r0, r1, d0
 80190de:	f7e7 fd1f 	bl	8000b20 <__aeabi_dcmpgt>
 80190e2:	b318      	cbz	r0, 801912c <asin+0x90>
 80190e4:	2301      	movs	r3, #1
 80190e6:	9300      	str	r3, [sp, #0]
 80190e8:	4816      	ldr	r0, [pc, #88]	; (8019144 <asin+0xa8>)
 80190ea:	4b17      	ldr	r3, [pc, #92]	; (8019148 <asin+0xac>)
 80190ec:	9301      	str	r3, [sp, #4]
 80190ee:	9708      	str	r7, [sp, #32]
 80190f0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80190f4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80190f8:	f001 fcd2 	bl	801aaa0 <nan>
 80190fc:	f996 3000 	ldrsb.w	r3, [r6]
 8019100:	2b02      	cmp	r3, #2
 8019102:	ed8d 0b06 	vstr	d0, [sp, #24]
 8019106:	d104      	bne.n	8019112 <asin+0x76>
 8019108:	f001 fd88 	bl	801ac1c <__errno>
 801910c:	2321      	movs	r3, #33	; 0x21
 801910e:	6003      	str	r3, [r0, #0]
 8019110:	e004      	b.n	801911c <asin+0x80>
 8019112:	4668      	mov	r0, sp
 8019114:	f001 fcbf 	bl	801aa96 <matherr>
 8019118:	2800      	cmp	r0, #0
 801911a:	d0f5      	beq.n	8019108 <asin+0x6c>
 801911c:	9b08      	ldr	r3, [sp, #32]
 801911e:	b11b      	cbz	r3, 8019128 <asin+0x8c>
 8019120:	f001 fd7c 	bl	801ac1c <__errno>
 8019124:	9b08      	ldr	r3, [sp, #32]
 8019126:	6003      	str	r3, [r0, #0]
 8019128:	ed9d 8b06 	vldr	d8, [sp, #24]
 801912c:	eeb0 0a48 	vmov.f32	s0, s16
 8019130:	eef0 0a68 	vmov.f32	s1, s17
 8019134:	b00b      	add	sp, #44	; 0x2c
 8019136:	ecbd 8b02 	vpop	{d8}
 801913a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801913c:	200014a0 	.word	0x200014a0
 8019140:	3ff00000 	.word	0x3ff00000
 8019144:	0801db7c 	.word	0x0801db7c
 8019148:	0801db95 	.word	0x0801db95

0801914c <atan2>:
 801914c:	f000 bb10 	b.w	8019770 <__ieee754_atan2>

08019150 <sqrt>:
 8019150:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019154:	ed2d 8b02 	vpush	{d8}
 8019158:	b08b      	sub	sp, #44	; 0x2c
 801915a:	ec55 4b10 	vmov	r4, r5, d0
 801915e:	f000 fbe1 	bl	8019924 <__ieee754_sqrt>
 8019162:	4b26      	ldr	r3, [pc, #152]	; (80191fc <sqrt+0xac>)
 8019164:	eeb0 8a40 	vmov.f32	s16, s0
 8019168:	eef0 8a60 	vmov.f32	s17, s1
 801916c:	f993 6000 	ldrsb.w	r6, [r3]
 8019170:	1c73      	adds	r3, r6, #1
 8019172:	d02a      	beq.n	80191ca <sqrt+0x7a>
 8019174:	4622      	mov	r2, r4
 8019176:	462b      	mov	r3, r5
 8019178:	4620      	mov	r0, r4
 801917a:	4629      	mov	r1, r5
 801917c:	f7e7 fcda 	bl	8000b34 <__aeabi_dcmpun>
 8019180:	4607      	mov	r7, r0
 8019182:	bb10      	cbnz	r0, 80191ca <sqrt+0x7a>
 8019184:	f04f 0800 	mov.w	r8, #0
 8019188:	f04f 0900 	mov.w	r9, #0
 801918c:	4642      	mov	r2, r8
 801918e:	464b      	mov	r3, r9
 8019190:	4620      	mov	r0, r4
 8019192:	4629      	mov	r1, r5
 8019194:	f7e7 fca6 	bl	8000ae4 <__aeabi_dcmplt>
 8019198:	b1b8      	cbz	r0, 80191ca <sqrt+0x7a>
 801919a:	2301      	movs	r3, #1
 801919c:	9300      	str	r3, [sp, #0]
 801919e:	4b18      	ldr	r3, [pc, #96]	; (8019200 <sqrt+0xb0>)
 80191a0:	9301      	str	r3, [sp, #4]
 80191a2:	9708      	str	r7, [sp, #32]
 80191a4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80191a8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80191ac:	b9b6      	cbnz	r6, 80191dc <sqrt+0x8c>
 80191ae:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80191b2:	4668      	mov	r0, sp
 80191b4:	f001 fc6f 	bl	801aa96 <matherr>
 80191b8:	b1d0      	cbz	r0, 80191f0 <sqrt+0xa0>
 80191ba:	9b08      	ldr	r3, [sp, #32]
 80191bc:	b11b      	cbz	r3, 80191c6 <sqrt+0x76>
 80191be:	f001 fd2d 	bl	801ac1c <__errno>
 80191c2:	9b08      	ldr	r3, [sp, #32]
 80191c4:	6003      	str	r3, [r0, #0]
 80191c6:	ed9d 8b06 	vldr	d8, [sp, #24]
 80191ca:	eeb0 0a48 	vmov.f32	s0, s16
 80191ce:	eef0 0a68 	vmov.f32	s1, s17
 80191d2:	b00b      	add	sp, #44	; 0x2c
 80191d4:	ecbd 8b02 	vpop	{d8}
 80191d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80191dc:	4642      	mov	r2, r8
 80191de:	464b      	mov	r3, r9
 80191e0:	4640      	mov	r0, r8
 80191e2:	4649      	mov	r1, r9
 80191e4:	f7e7 fb36 	bl	8000854 <__aeabi_ddiv>
 80191e8:	2e02      	cmp	r6, #2
 80191ea:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80191ee:	d1e0      	bne.n	80191b2 <sqrt+0x62>
 80191f0:	f001 fd14 	bl	801ac1c <__errno>
 80191f4:	2321      	movs	r3, #33	; 0x21
 80191f6:	6003      	str	r3, [r0, #0]
 80191f8:	e7df      	b.n	80191ba <sqrt+0x6a>
 80191fa:	bf00      	nop
 80191fc:	200014a0 	.word	0x200014a0
 8019200:	0801db9a 	.word	0x0801db9a

08019204 <acosf>:
 8019204:	b510      	push	{r4, lr}
 8019206:	ed2d 8b02 	vpush	{d8}
 801920a:	4c27      	ldr	r4, [pc, #156]	; (80192a8 <acosf+0xa4>)
 801920c:	b08a      	sub	sp, #40	; 0x28
 801920e:	eeb0 8a40 	vmov.f32	s16, s0
 8019212:	f000 fc37 	bl	8019a84 <__ieee754_acosf>
 8019216:	f994 3000 	ldrsb.w	r3, [r4]
 801921a:	3301      	adds	r3, #1
 801921c:	eef0 8a40 	vmov.f32	s17, s0
 8019220:	d03c      	beq.n	801929c <acosf+0x98>
 8019222:	eeb4 8a48 	vcmp.f32	s16, s16
 8019226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801922a:	d637      	bvs.n	801929c <acosf+0x98>
 801922c:	eeb0 0a48 	vmov.f32	s0, s16
 8019230:	f001 fc3e 	bl	801aab0 <fabsf>
 8019234:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019238:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801923c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019240:	dd2c      	ble.n	801929c <acosf+0x98>
 8019242:	2301      	movs	r3, #1
 8019244:	9300      	str	r3, [sp, #0]
 8019246:	4b19      	ldr	r3, [pc, #100]	; (80192ac <acosf+0xa8>)
 8019248:	9301      	str	r3, [sp, #4]
 801924a:	ee18 0a10 	vmov	r0, s16
 801924e:	2300      	movs	r3, #0
 8019250:	9308      	str	r3, [sp, #32]
 8019252:	f7e7 f981 	bl	8000558 <__aeabi_f2d>
 8019256:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801925a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801925e:	4814      	ldr	r0, [pc, #80]	; (80192b0 <acosf+0xac>)
 8019260:	f001 fc1e 	bl	801aaa0 <nan>
 8019264:	f994 3000 	ldrsb.w	r3, [r4]
 8019268:	2b02      	cmp	r3, #2
 801926a:	ed8d 0b06 	vstr	d0, [sp, #24]
 801926e:	d104      	bne.n	801927a <acosf+0x76>
 8019270:	f001 fcd4 	bl	801ac1c <__errno>
 8019274:	2321      	movs	r3, #33	; 0x21
 8019276:	6003      	str	r3, [r0, #0]
 8019278:	e004      	b.n	8019284 <acosf+0x80>
 801927a:	4668      	mov	r0, sp
 801927c:	f001 fc0b 	bl	801aa96 <matherr>
 8019280:	2800      	cmp	r0, #0
 8019282:	d0f5      	beq.n	8019270 <acosf+0x6c>
 8019284:	9b08      	ldr	r3, [sp, #32]
 8019286:	b11b      	cbz	r3, 8019290 <acosf+0x8c>
 8019288:	f001 fcc8 	bl	801ac1c <__errno>
 801928c:	9b08      	ldr	r3, [sp, #32]
 801928e:	6003      	str	r3, [r0, #0]
 8019290:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019294:	f7e7 fcac 	bl	8000bf0 <__aeabi_d2f>
 8019298:	ee08 0a90 	vmov	s17, r0
 801929c:	eeb0 0a68 	vmov.f32	s0, s17
 80192a0:	b00a      	add	sp, #40	; 0x28
 80192a2:	ecbd 8b02 	vpop	{d8}
 80192a6:	bd10      	pop	{r4, pc}
 80192a8:	200014a0 	.word	0x200014a0
 80192ac:	0801db9f 	.word	0x0801db9f
 80192b0:	0801db7c 	.word	0x0801db7c

080192b4 <sqrtf>:
 80192b4:	b510      	push	{r4, lr}
 80192b6:	ed2d 8b02 	vpush	{d8}
 80192ba:	b08a      	sub	sp, #40	; 0x28
 80192bc:	eeb0 8a40 	vmov.f32	s16, s0
 80192c0:	f000 fe08 	bl	8019ed4 <__ieee754_sqrtf>
 80192c4:	4b21      	ldr	r3, [pc, #132]	; (801934c <sqrtf+0x98>)
 80192c6:	f993 4000 	ldrsb.w	r4, [r3]
 80192ca:	1c63      	adds	r3, r4, #1
 80192cc:	d02c      	beq.n	8019328 <sqrtf+0x74>
 80192ce:	eeb4 8a48 	vcmp.f32	s16, s16
 80192d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192d6:	d627      	bvs.n	8019328 <sqrtf+0x74>
 80192d8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80192dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192e0:	d522      	bpl.n	8019328 <sqrtf+0x74>
 80192e2:	2301      	movs	r3, #1
 80192e4:	9300      	str	r3, [sp, #0]
 80192e6:	4b1a      	ldr	r3, [pc, #104]	; (8019350 <sqrtf+0x9c>)
 80192e8:	9301      	str	r3, [sp, #4]
 80192ea:	ee18 0a10 	vmov	r0, s16
 80192ee:	2300      	movs	r3, #0
 80192f0:	9308      	str	r3, [sp, #32]
 80192f2:	f7e7 f931 	bl	8000558 <__aeabi_f2d>
 80192f6:	2200      	movs	r2, #0
 80192f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80192fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019300:	2300      	movs	r3, #0
 8019302:	b9ac      	cbnz	r4, 8019330 <sqrtf+0x7c>
 8019304:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8019308:	4668      	mov	r0, sp
 801930a:	f001 fbc4 	bl	801aa96 <matherr>
 801930e:	b1b8      	cbz	r0, 8019340 <sqrtf+0x8c>
 8019310:	9b08      	ldr	r3, [sp, #32]
 8019312:	b11b      	cbz	r3, 801931c <sqrtf+0x68>
 8019314:	f001 fc82 	bl	801ac1c <__errno>
 8019318:	9b08      	ldr	r3, [sp, #32]
 801931a:	6003      	str	r3, [r0, #0]
 801931c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019320:	f7e7 fc66 	bl	8000bf0 <__aeabi_d2f>
 8019324:	ee00 0a10 	vmov	s0, r0
 8019328:	b00a      	add	sp, #40	; 0x28
 801932a:	ecbd 8b02 	vpop	{d8}
 801932e:	bd10      	pop	{r4, pc}
 8019330:	4610      	mov	r0, r2
 8019332:	4619      	mov	r1, r3
 8019334:	f7e7 fa8e 	bl	8000854 <__aeabi_ddiv>
 8019338:	2c02      	cmp	r4, #2
 801933a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801933e:	d1e3      	bne.n	8019308 <sqrtf+0x54>
 8019340:	f001 fc6c 	bl	801ac1c <__errno>
 8019344:	2321      	movs	r3, #33	; 0x21
 8019346:	6003      	str	r3, [r0, #0]
 8019348:	e7e2      	b.n	8019310 <sqrtf+0x5c>
 801934a:	bf00      	nop
 801934c:	200014a0 	.word	0x200014a0
 8019350:	0801dba5 	.word	0x0801dba5
 8019354:	00000000 	.word	0x00000000

08019358 <__ieee754_asin>:
 8019358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801935c:	ec55 4b10 	vmov	r4, r5, d0
 8019360:	4bcb      	ldr	r3, [pc, #812]	; (8019690 <__ieee754_asin+0x338>)
 8019362:	b085      	sub	sp, #20
 8019364:	f025 4b00 	bic.w	fp, r5, #2147483648	; 0x80000000
 8019368:	459b      	cmp	fp, r3
 801936a:	9501      	str	r5, [sp, #4]
 801936c:	dd32      	ble.n	80193d4 <__ieee754_asin+0x7c>
 801936e:	ee10 3a10 	vmov	r3, s0
 8019372:	f10b 4b40 	add.w	fp, fp, #3221225472	; 0xc0000000
 8019376:	f50b 1b80 	add.w	fp, fp, #1048576	; 0x100000
 801937a:	ea5b 0303 	orrs.w	r3, fp, r3
 801937e:	d117      	bne.n	80193b0 <__ieee754_asin+0x58>
 8019380:	a3a9      	add	r3, pc, #676	; (adr r3, 8019628 <__ieee754_asin+0x2d0>)
 8019382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019386:	ee10 0a10 	vmov	r0, s0
 801938a:	4629      	mov	r1, r5
 801938c:	f7e7 f938 	bl	8000600 <__aeabi_dmul>
 8019390:	a3a7      	add	r3, pc, #668	; (adr r3, 8019630 <__ieee754_asin+0x2d8>)
 8019392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019396:	4606      	mov	r6, r0
 8019398:	460f      	mov	r7, r1
 801939a:	4620      	mov	r0, r4
 801939c:	4629      	mov	r1, r5
 801939e:	f7e7 f92f 	bl	8000600 <__aeabi_dmul>
 80193a2:	4602      	mov	r2, r0
 80193a4:	460b      	mov	r3, r1
 80193a6:	4630      	mov	r0, r6
 80193a8:	4639      	mov	r1, r7
 80193aa:	f7e6 ff77 	bl	800029c <__adddf3>
 80193ae:	e00a      	b.n	80193c6 <__ieee754_asin+0x6e>
 80193b0:	ee10 2a10 	vmov	r2, s0
 80193b4:	462b      	mov	r3, r5
 80193b6:	4620      	mov	r0, r4
 80193b8:	4629      	mov	r1, r5
 80193ba:	f7e6 ff6d 	bl	8000298 <__aeabi_dsub>
 80193be:	4602      	mov	r2, r0
 80193c0:	460b      	mov	r3, r1
 80193c2:	f7e7 fa47 	bl	8000854 <__aeabi_ddiv>
 80193c6:	4604      	mov	r4, r0
 80193c8:	460d      	mov	r5, r1
 80193ca:	ec45 4b10 	vmov	d0, r4, r5
 80193ce:	b005      	add	sp, #20
 80193d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193d4:	4baf      	ldr	r3, [pc, #700]	; (8019694 <__ieee754_asin+0x33c>)
 80193d6:	459b      	cmp	fp, r3
 80193d8:	dc11      	bgt.n	80193fe <__ieee754_asin+0xa6>
 80193da:	f1bb 5f79 	cmp.w	fp, #1044381696	; 0x3e400000
 80193de:	f280 80b0 	bge.w	8019542 <__ieee754_asin+0x1ea>
 80193e2:	a395      	add	r3, pc, #596	; (adr r3, 8019638 <__ieee754_asin+0x2e0>)
 80193e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193e8:	ee10 0a10 	vmov	r0, s0
 80193ec:	4629      	mov	r1, r5
 80193ee:	f7e6 ff55 	bl	800029c <__adddf3>
 80193f2:	2200      	movs	r2, #0
 80193f4:	4ba8      	ldr	r3, [pc, #672]	; (8019698 <__ieee754_asin+0x340>)
 80193f6:	f7e7 fb93 	bl	8000b20 <__aeabi_dcmpgt>
 80193fa:	2800      	cmp	r0, #0
 80193fc:	d1e5      	bne.n	80193ca <__ieee754_asin+0x72>
 80193fe:	ec45 4b10 	vmov	d0, r4, r5
 8019402:	f001 fb41 	bl	801aa88 <fabs>
 8019406:	2000      	movs	r0, #0
 8019408:	ec53 2b10 	vmov	r2, r3, d0
 801940c:	49a2      	ldr	r1, [pc, #648]	; (8019698 <__ieee754_asin+0x340>)
 801940e:	f7e6 ff43 	bl	8000298 <__aeabi_dsub>
 8019412:	2200      	movs	r2, #0
 8019414:	4ba1      	ldr	r3, [pc, #644]	; (801969c <__ieee754_asin+0x344>)
 8019416:	f7e7 f8f3 	bl	8000600 <__aeabi_dmul>
 801941a:	a389      	add	r3, pc, #548	; (adr r3, 8019640 <__ieee754_asin+0x2e8>)
 801941c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019420:	4604      	mov	r4, r0
 8019422:	460d      	mov	r5, r1
 8019424:	f7e7 f8ec 	bl	8000600 <__aeabi_dmul>
 8019428:	a387      	add	r3, pc, #540	; (adr r3, 8019648 <__ieee754_asin+0x2f0>)
 801942a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801942e:	f7e6 ff35 	bl	800029c <__adddf3>
 8019432:	4622      	mov	r2, r4
 8019434:	462b      	mov	r3, r5
 8019436:	f7e7 f8e3 	bl	8000600 <__aeabi_dmul>
 801943a:	a385      	add	r3, pc, #532	; (adr r3, 8019650 <__ieee754_asin+0x2f8>)
 801943c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019440:	f7e6 ff2a 	bl	8000298 <__aeabi_dsub>
 8019444:	4622      	mov	r2, r4
 8019446:	462b      	mov	r3, r5
 8019448:	f7e7 f8da 	bl	8000600 <__aeabi_dmul>
 801944c:	a382      	add	r3, pc, #520	; (adr r3, 8019658 <__ieee754_asin+0x300>)
 801944e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019452:	f7e6 ff23 	bl	800029c <__adddf3>
 8019456:	4622      	mov	r2, r4
 8019458:	462b      	mov	r3, r5
 801945a:	f7e7 f8d1 	bl	8000600 <__aeabi_dmul>
 801945e:	a380      	add	r3, pc, #512	; (adr r3, 8019660 <__ieee754_asin+0x308>)
 8019460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019464:	f7e6 ff18 	bl	8000298 <__aeabi_dsub>
 8019468:	4622      	mov	r2, r4
 801946a:	462b      	mov	r3, r5
 801946c:	f7e7 f8c8 	bl	8000600 <__aeabi_dmul>
 8019470:	a37d      	add	r3, pc, #500	; (adr r3, 8019668 <__ieee754_asin+0x310>)
 8019472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019476:	f7e6 ff11 	bl	800029c <__adddf3>
 801947a:	4622      	mov	r2, r4
 801947c:	462b      	mov	r3, r5
 801947e:	f7e7 f8bf 	bl	8000600 <__aeabi_dmul>
 8019482:	a37b      	add	r3, pc, #492	; (adr r3, 8019670 <__ieee754_asin+0x318>)
 8019484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019488:	4680      	mov	r8, r0
 801948a:	4689      	mov	r9, r1
 801948c:	4620      	mov	r0, r4
 801948e:	4629      	mov	r1, r5
 8019490:	f7e7 f8b6 	bl	8000600 <__aeabi_dmul>
 8019494:	a378      	add	r3, pc, #480	; (adr r3, 8019678 <__ieee754_asin+0x320>)
 8019496:	e9d3 2300 	ldrd	r2, r3, [r3]
 801949a:	f7e6 fefd 	bl	8000298 <__aeabi_dsub>
 801949e:	4622      	mov	r2, r4
 80194a0:	462b      	mov	r3, r5
 80194a2:	f7e7 f8ad 	bl	8000600 <__aeabi_dmul>
 80194a6:	a376      	add	r3, pc, #472	; (adr r3, 8019680 <__ieee754_asin+0x328>)
 80194a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194ac:	f7e6 fef6 	bl	800029c <__adddf3>
 80194b0:	4622      	mov	r2, r4
 80194b2:	462b      	mov	r3, r5
 80194b4:	f7e7 f8a4 	bl	8000600 <__aeabi_dmul>
 80194b8:	a373      	add	r3, pc, #460	; (adr r3, 8019688 <__ieee754_asin+0x330>)
 80194ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194be:	f7e6 feeb 	bl	8000298 <__aeabi_dsub>
 80194c2:	4622      	mov	r2, r4
 80194c4:	462b      	mov	r3, r5
 80194c6:	f7e7 f89b 	bl	8000600 <__aeabi_dmul>
 80194ca:	2200      	movs	r2, #0
 80194cc:	4b72      	ldr	r3, [pc, #456]	; (8019698 <__ieee754_asin+0x340>)
 80194ce:	f7e6 fee5 	bl	800029c <__adddf3>
 80194d2:	ec45 4b10 	vmov	d0, r4, r5
 80194d6:	460b      	mov	r3, r1
 80194d8:	4602      	mov	r2, r0
 80194da:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80194de:	f000 fa21 	bl	8019924 <__ieee754_sqrt>
 80194e2:	496f      	ldr	r1, [pc, #444]	; (80196a0 <__ieee754_asin+0x348>)
 80194e4:	458b      	cmp	fp, r1
 80194e6:	ec57 6b10 	vmov	r6, r7, d0
 80194ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80194ee:	f340 80d9 	ble.w	80196a4 <__ieee754_asin+0x34c>
 80194f2:	4640      	mov	r0, r8
 80194f4:	4649      	mov	r1, r9
 80194f6:	f7e7 f9ad 	bl	8000854 <__aeabi_ddiv>
 80194fa:	4632      	mov	r2, r6
 80194fc:	463b      	mov	r3, r7
 80194fe:	f7e7 f87f 	bl	8000600 <__aeabi_dmul>
 8019502:	4632      	mov	r2, r6
 8019504:	463b      	mov	r3, r7
 8019506:	f7e6 fec9 	bl	800029c <__adddf3>
 801950a:	4602      	mov	r2, r0
 801950c:	460b      	mov	r3, r1
 801950e:	f7e6 fec5 	bl	800029c <__adddf3>
 8019512:	a347      	add	r3, pc, #284	; (adr r3, 8019630 <__ieee754_asin+0x2d8>)
 8019514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019518:	f7e6 febe 	bl	8000298 <__aeabi_dsub>
 801951c:	4602      	mov	r2, r0
 801951e:	460b      	mov	r3, r1
 8019520:	a141      	add	r1, pc, #260	; (adr r1, 8019628 <__ieee754_asin+0x2d0>)
 8019522:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019526:	f7e6 feb7 	bl	8000298 <__aeabi_dsub>
 801952a:	9b01      	ldr	r3, [sp, #4]
 801952c:	2b00      	cmp	r3, #0
 801952e:	bfdc      	itt	le
 8019530:	4602      	movle	r2, r0
 8019532:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8019536:	4604      	mov	r4, r0
 8019538:	460d      	mov	r5, r1
 801953a:	bfdc      	itt	le
 801953c:	4614      	movle	r4, r2
 801953e:	461d      	movle	r5, r3
 8019540:	e743      	b.n	80193ca <__ieee754_asin+0x72>
 8019542:	ee10 2a10 	vmov	r2, s0
 8019546:	ee10 0a10 	vmov	r0, s0
 801954a:	462b      	mov	r3, r5
 801954c:	4629      	mov	r1, r5
 801954e:	f7e7 f857 	bl	8000600 <__aeabi_dmul>
 8019552:	a33b      	add	r3, pc, #236	; (adr r3, 8019640 <__ieee754_asin+0x2e8>)
 8019554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019558:	4606      	mov	r6, r0
 801955a:	460f      	mov	r7, r1
 801955c:	f7e7 f850 	bl	8000600 <__aeabi_dmul>
 8019560:	a339      	add	r3, pc, #228	; (adr r3, 8019648 <__ieee754_asin+0x2f0>)
 8019562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019566:	f7e6 fe99 	bl	800029c <__adddf3>
 801956a:	4632      	mov	r2, r6
 801956c:	463b      	mov	r3, r7
 801956e:	f7e7 f847 	bl	8000600 <__aeabi_dmul>
 8019572:	a337      	add	r3, pc, #220	; (adr r3, 8019650 <__ieee754_asin+0x2f8>)
 8019574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019578:	f7e6 fe8e 	bl	8000298 <__aeabi_dsub>
 801957c:	4632      	mov	r2, r6
 801957e:	463b      	mov	r3, r7
 8019580:	f7e7 f83e 	bl	8000600 <__aeabi_dmul>
 8019584:	a334      	add	r3, pc, #208	; (adr r3, 8019658 <__ieee754_asin+0x300>)
 8019586:	e9d3 2300 	ldrd	r2, r3, [r3]
 801958a:	f7e6 fe87 	bl	800029c <__adddf3>
 801958e:	4632      	mov	r2, r6
 8019590:	463b      	mov	r3, r7
 8019592:	f7e7 f835 	bl	8000600 <__aeabi_dmul>
 8019596:	a332      	add	r3, pc, #200	; (adr r3, 8019660 <__ieee754_asin+0x308>)
 8019598:	e9d3 2300 	ldrd	r2, r3, [r3]
 801959c:	f7e6 fe7c 	bl	8000298 <__aeabi_dsub>
 80195a0:	4632      	mov	r2, r6
 80195a2:	463b      	mov	r3, r7
 80195a4:	f7e7 f82c 	bl	8000600 <__aeabi_dmul>
 80195a8:	a32f      	add	r3, pc, #188	; (adr r3, 8019668 <__ieee754_asin+0x310>)
 80195aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195ae:	f7e6 fe75 	bl	800029c <__adddf3>
 80195b2:	4632      	mov	r2, r6
 80195b4:	463b      	mov	r3, r7
 80195b6:	f7e7 f823 	bl	8000600 <__aeabi_dmul>
 80195ba:	a32d      	add	r3, pc, #180	; (adr r3, 8019670 <__ieee754_asin+0x318>)
 80195bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195c0:	4680      	mov	r8, r0
 80195c2:	4689      	mov	r9, r1
 80195c4:	4630      	mov	r0, r6
 80195c6:	4639      	mov	r1, r7
 80195c8:	f7e7 f81a 	bl	8000600 <__aeabi_dmul>
 80195cc:	a32a      	add	r3, pc, #168	; (adr r3, 8019678 <__ieee754_asin+0x320>)
 80195ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195d2:	f7e6 fe61 	bl	8000298 <__aeabi_dsub>
 80195d6:	4632      	mov	r2, r6
 80195d8:	463b      	mov	r3, r7
 80195da:	f7e7 f811 	bl	8000600 <__aeabi_dmul>
 80195de:	a328      	add	r3, pc, #160	; (adr r3, 8019680 <__ieee754_asin+0x328>)
 80195e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195e4:	f7e6 fe5a 	bl	800029c <__adddf3>
 80195e8:	4632      	mov	r2, r6
 80195ea:	463b      	mov	r3, r7
 80195ec:	f7e7 f808 	bl	8000600 <__aeabi_dmul>
 80195f0:	a325      	add	r3, pc, #148	; (adr r3, 8019688 <__ieee754_asin+0x330>)
 80195f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195f6:	f7e6 fe4f 	bl	8000298 <__aeabi_dsub>
 80195fa:	4632      	mov	r2, r6
 80195fc:	463b      	mov	r3, r7
 80195fe:	f7e6 ffff 	bl	8000600 <__aeabi_dmul>
 8019602:	2200      	movs	r2, #0
 8019604:	4b24      	ldr	r3, [pc, #144]	; (8019698 <__ieee754_asin+0x340>)
 8019606:	f7e6 fe49 	bl	800029c <__adddf3>
 801960a:	4602      	mov	r2, r0
 801960c:	460b      	mov	r3, r1
 801960e:	4640      	mov	r0, r8
 8019610:	4649      	mov	r1, r9
 8019612:	f7e7 f91f 	bl	8000854 <__aeabi_ddiv>
 8019616:	4622      	mov	r2, r4
 8019618:	462b      	mov	r3, r5
 801961a:	f7e6 fff1 	bl	8000600 <__aeabi_dmul>
 801961e:	4602      	mov	r2, r0
 8019620:	460b      	mov	r3, r1
 8019622:	4620      	mov	r0, r4
 8019624:	4629      	mov	r1, r5
 8019626:	e6c0      	b.n	80193aa <__ieee754_asin+0x52>
 8019628:	54442d18 	.word	0x54442d18
 801962c:	3ff921fb 	.word	0x3ff921fb
 8019630:	33145c07 	.word	0x33145c07
 8019634:	3c91a626 	.word	0x3c91a626
 8019638:	8800759c 	.word	0x8800759c
 801963c:	7e37e43c 	.word	0x7e37e43c
 8019640:	0dfdf709 	.word	0x0dfdf709
 8019644:	3f023de1 	.word	0x3f023de1
 8019648:	7501b288 	.word	0x7501b288
 801964c:	3f49efe0 	.word	0x3f49efe0
 8019650:	b5688f3b 	.word	0xb5688f3b
 8019654:	3fa48228 	.word	0x3fa48228
 8019658:	0e884455 	.word	0x0e884455
 801965c:	3fc9c155 	.word	0x3fc9c155
 8019660:	03eb6f7d 	.word	0x03eb6f7d
 8019664:	3fd4d612 	.word	0x3fd4d612
 8019668:	55555555 	.word	0x55555555
 801966c:	3fc55555 	.word	0x3fc55555
 8019670:	b12e9282 	.word	0xb12e9282
 8019674:	3fb3b8c5 	.word	0x3fb3b8c5
 8019678:	1b8d0159 	.word	0x1b8d0159
 801967c:	3fe6066c 	.word	0x3fe6066c
 8019680:	9c598ac8 	.word	0x9c598ac8
 8019684:	40002ae5 	.word	0x40002ae5
 8019688:	1c8a2d4b 	.word	0x1c8a2d4b
 801968c:	40033a27 	.word	0x40033a27
 8019690:	3fefffff 	.word	0x3fefffff
 8019694:	3fdfffff 	.word	0x3fdfffff
 8019698:	3ff00000 	.word	0x3ff00000
 801969c:	3fe00000 	.word	0x3fe00000
 80196a0:	3fef3332 	.word	0x3fef3332
 80196a4:	4640      	mov	r0, r8
 80196a6:	4649      	mov	r1, r9
 80196a8:	f7e7 f8d4 	bl	8000854 <__aeabi_ddiv>
 80196ac:	4632      	mov	r2, r6
 80196ae:	4680      	mov	r8, r0
 80196b0:	4689      	mov	r9, r1
 80196b2:	463b      	mov	r3, r7
 80196b4:	4630      	mov	r0, r6
 80196b6:	4639      	mov	r1, r7
 80196b8:	f7e6 fdf0 	bl	800029c <__adddf3>
 80196bc:	4602      	mov	r2, r0
 80196be:	460b      	mov	r3, r1
 80196c0:	4640      	mov	r0, r8
 80196c2:	4649      	mov	r1, r9
 80196c4:	f7e6 ff9c 	bl	8000600 <__aeabi_dmul>
 80196c8:	f04f 0a00 	mov.w	sl, #0
 80196cc:	4680      	mov	r8, r0
 80196ce:	4689      	mov	r9, r1
 80196d0:	4652      	mov	r2, sl
 80196d2:	463b      	mov	r3, r7
 80196d4:	4650      	mov	r0, sl
 80196d6:	4639      	mov	r1, r7
 80196d8:	f7e6 ff92 	bl	8000600 <__aeabi_dmul>
 80196dc:	4602      	mov	r2, r0
 80196de:	460b      	mov	r3, r1
 80196e0:	4620      	mov	r0, r4
 80196e2:	4629      	mov	r1, r5
 80196e4:	f7e6 fdd8 	bl	8000298 <__aeabi_dsub>
 80196e8:	4652      	mov	r2, sl
 80196ea:	4604      	mov	r4, r0
 80196ec:	460d      	mov	r5, r1
 80196ee:	463b      	mov	r3, r7
 80196f0:	4630      	mov	r0, r6
 80196f2:	4639      	mov	r1, r7
 80196f4:	f7e6 fdd2 	bl	800029c <__adddf3>
 80196f8:	4602      	mov	r2, r0
 80196fa:	460b      	mov	r3, r1
 80196fc:	4620      	mov	r0, r4
 80196fe:	4629      	mov	r1, r5
 8019700:	f7e7 f8a8 	bl	8000854 <__aeabi_ddiv>
 8019704:	4602      	mov	r2, r0
 8019706:	460b      	mov	r3, r1
 8019708:	f7e6 fdc8 	bl	800029c <__adddf3>
 801970c:	4602      	mov	r2, r0
 801970e:	460b      	mov	r3, r1
 8019710:	a113      	add	r1, pc, #76	; (adr r1, 8019760 <__ieee754_asin+0x408>)
 8019712:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019716:	f7e6 fdbf 	bl	8000298 <__aeabi_dsub>
 801971a:	4602      	mov	r2, r0
 801971c:	460b      	mov	r3, r1
 801971e:	4640      	mov	r0, r8
 8019720:	4649      	mov	r1, r9
 8019722:	f7e6 fdb9 	bl	8000298 <__aeabi_dsub>
 8019726:	4652      	mov	r2, sl
 8019728:	4604      	mov	r4, r0
 801972a:	460d      	mov	r5, r1
 801972c:	463b      	mov	r3, r7
 801972e:	4650      	mov	r0, sl
 8019730:	4639      	mov	r1, r7
 8019732:	f7e6 fdb3 	bl	800029c <__adddf3>
 8019736:	4602      	mov	r2, r0
 8019738:	460b      	mov	r3, r1
 801973a:	a10b      	add	r1, pc, #44	; (adr r1, 8019768 <__ieee754_asin+0x410>)
 801973c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019740:	f7e6 fdaa 	bl	8000298 <__aeabi_dsub>
 8019744:	4602      	mov	r2, r0
 8019746:	460b      	mov	r3, r1
 8019748:	4620      	mov	r0, r4
 801974a:	4629      	mov	r1, r5
 801974c:	f7e6 fda4 	bl	8000298 <__aeabi_dsub>
 8019750:	4602      	mov	r2, r0
 8019752:	460b      	mov	r3, r1
 8019754:	a104      	add	r1, pc, #16	; (adr r1, 8019768 <__ieee754_asin+0x410>)
 8019756:	e9d1 0100 	ldrd	r0, r1, [r1]
 801975a:	e6e4      	b.n	8019526 <__ieee754_asin+0x1ce>
 801975c:	f3af 8000 	nop.w
 8019760:	33145c07 	.word	0x33145c07
 8019764:	3c91a626 	.word	0x3c91a626
 8019768:	54442d18 	.word	0x54442d18
 801976c:	3fe921fb 	.word	0x3fe921fb

08019770 <__ieee754_atan2>:
 8019770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019774:	ec57 6b11 	vmov	r6, r7, d1
 8019778:	4273      	negs	r3, r6
 801977a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801977e:	4333      	orrs	r3, r6
 8019780:	f8df c19c 	ldr.w	ip, [pc, #412]	; 8019920 <__ieee754_atan2+0x1b0>
 8019784:	ec51 0b10 	vmov	r0, r1, d0
 8019788:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801978c:	4563      	cmp	r3, ip
 801978e:	ee11 8a10 	vmov	r8, s2
 8019792:	ee10 9a10 	vmov	r9, s0
 8019796:	468e      	mov	lr, r1
 8019798:	d807      	bhi.n	80197aa <__ieee754_atan2+0x3a>
 801979a:	4244      	negs	r4, r0
 801979c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80197a0:	4304      	orrs	r4, r0
 80197a2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80197a6:	4564      	cmp	r4, ip
 80197a8:	d907      	bls.n	80197ba <__ieee754_atan2+0x4a>
 80197aa:	4632      	mov	r2, r6
 80197ac:	463b      	mov	r3, r7
 80197ae:	f7e6 fd75 	bl	800029c <__adddf3>
 80197b2:	ec41 0b10 	vmov	d0, r0, r1
 80197b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80197ba:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80197be:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80197c2:	4334      	orrs	r4, r6
 80197c4:	d103      	bne.n	80197ce <__ieee754_atan2+0x5e>
 80197c6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80197ca:	f000 bfb5 	b.w	801a738 <atan>
 80197ce:	17bc      	asrs	r4, r7, #30
 80197d0:	f004 0402 	and.w	r4, r4, #2
 80197d4:	ea59 0903 	orrs.w	r9, r9, r3
 80197d8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80197dc:	d107      	bne.n	80197ee <__ieee754_atan2+0x7e>
 80197de:	2c02      	cmp	r4, #2
 80197e0:	d030      	beq.n	8019844 <__ieee754_atan2+0xd4>
 80197e2:	2c03      	cmp	r4, #3
 80197e4:	d1e5      	bne.n	80197b2 <__ieee754_atan2+0x42>
 80197e6:	a13c      	add	r1, pc, #240	; (adr r1, 80198d8 <__ieee754_atan2+0x168>)
 80197e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80197ec:	e7e1      	b.n	80197b2 <__ieee754_atan2+0x42>
 80197ee:	ea58 0802 	orrs.w	r8, r8, r2
 80197f2:	d106      	bne.n	8019802 <__ieee754_atan2+0x92>
 80197f4:	f1be 0f00 	cmp.w	lr, #0
 80197f8:	da6a      	bge.n	80198d0 <__ieee754_atan2+0x160>
 80197fa:	a139      	add	r1, pc, #228	; (adr r1, 80198e0 <__ieee754_atan2+0x170>)
 80197fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019800:	e7d7      	b.n	80197b2 <__ieee754_atan2+0x42>
 8019802:	4562      	cmp	r2, ip
 8019804:	d122      	bne.n	801984c <__ieee754_atan2+0xdc>
 8019806:	4293      	cmp	r3, r2
 8019808:	d111      	bne.n	801982e <__ieee754_atan2+0xbe>
 801980a:	2c02      	cmp	r4, #2
 801980c:	d007      	beq.n	801981e <__ieee754_atan2+0xae>
 801980e:	2c03      	cmp	r4, #3
 8019810:	d009      	beq.n	8019826 <__ieee754_atan2+0xb6>
 8019812:	2c01      	cmp	r4, #1
 8019814:	d156      	bne.n	80198c4 <__ieee754_atan2+0x154>
 8019816:	a134      	add	r1, pc, #208	; (adr r1, 80198e8 <__ieee754_atan2+0x178>)
 8019818:	e9d1 0100 	ldrd	r0, r1, [r1]
 801981c:	e7c9      	b.n	80197b2 <__ieee754_atan2+0x42>
 801981e:	a134      	add	r1, pc, #208	; (adr r1, 80198f0 <__ieee754_atan2+0x180>)
 8019820:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019824:	e7c5      	b.n	80197b2 <__ieee754_atan2+0x42>
 8019826:	a134      	add	r1, pc, #208	; (adr r1, 80198f8 <__ieee754_atan2+0x188>)
 8019828:	e9d1 0100 	ldrd	r0, r1, [r1]
 801982c:	e7c1      	b.n	80197b2 <__ieee754_atan2+0x42>
 801982e:	2c02      	cmp	r4, #2
 8019830:	d008      	beq.n	8019844 <__ieee754_atan2+0xd4>
 8019832:	2c03      	cmp	r4, #3
 8019834:	d0d7      	beq.n	80197e6 <__ieee754_atan2+0x76>
 8019836:	2c01      	cmp	r4, #1
 8019838:	f04f 0000 	mov.w	r0, #0
 801983c:	d146      	bne.n	80198cc <__ieee754_atan2+0x15c>
 801983e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8019842:	e7b6      	b.n	80197b2 <__ieee754_atan2+0x42>
 8019844:	a12e      	add	r1, pc, #184	; (adr r1, 8019900 <__ieee754_atan2+0x190>)
 8019846:	e9d1 0100 	ldrd	r0, r1, [r1]
 801984a:	e7b2      	b.n	80197b2 <__ieee754_atan2+0x42>
 801984c:	4563      	cmp	r3, ip
 801984e:	d0d1      	beq.n	80197f4 <__ieee754_atan2+0x84>
 8019850:	1a9b      	subs	r3, r3, r2
 8019852:	151b      	asrs	r3, r3, #20
 8019854:	2b3c      	cmp	r3, #60	; 0x3c
 8019856:	dc1e      	bgt.n	8019896 <__ieee754_atan2+0x126>
 8019858:	2f00      	cmp	r7, #0
 801985a:	da01      	bge.n	8019860 <__ieee754_atan2+0xf0>
 801985c:	333c      	adds	r3, #60	; 0x3c
 801985e:	db1e      	blt.n	801989e <__ieee754_atan2+0x12e>
 8019860:	4632      	mov	r2, r6
 8019862:	463b      	mov	r3, r7
 8019864:	f7e6 fff6 	bl	8000854 <__aeabi_ddiv>
 8019868:	ec41 0b10 	vmov	d0, r0, r1
 801986c:	f001 f90c 	bl	801aa88 <fabs>
 8019870:	f000 ff62 	bl	801a738 <atan>
 8019874:	ec51 0b10 	vmov	r0, r1, d0
 8019878:	2c01      	cmp	r4, #1
 801987a:	d013      	beq.n	80198a4 <__ieee754_atan2+0x134>
 801987c:	2c02      	cmp	r4, #2
 801987e:	d014      	beq.n	80198aa <__ieee754_atan2+0x13a>
 8019880:	2c00      	cmp	r4, #0
 8019882:	d096      	beq.n	80197b2 <__ieee754_atan2+0x42>
 8019884:	a320      	add	r3, pc, #128	; (adr r3, 8019908 <__ieee754_atan2+0x198>)
 8019886:	e9d3 2300 	ldrd	r2, r3, [r3]
 801988a:	f7e6 fd05 	bl	8000298 <__aeabi_dsub>
 801988e:	a31c      	add	r3, pc, #112	; (adr r3, 8019900 <__ieee754_atan2+0x190>)
 8019890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019894:	e013      	b.n	80198be <__ieee754_atan2+0x14e>
 8019896:	a11e      	add	r1, pc, #120	; (adr r1, 8019910 <__ieee754_atan2+0x1a0>)
 8019898:	e9d1 0100 	ldrd	r0, r1, [r1]
 801989c:	e7ec      	b.n	8019878 <__ieee754_atan2+0x108>
 801989e:	2000      	movs	r0, #0
 80198a0:	2100      	movs	r1, #0
 80198a2:	e7e9      	b.n	8019878 <__ieee754_atan2+0x108>
 80198a4:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80198a8:	e783      	b.n	80197b2 <__ieee754_atan2+0x42>
 80198aa:	a317      	add	r3, pc, #92	; (adr r3, 8019908 <__ieee754_atan2+0x198>)
 80198ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198b0:	f7e6 fcf2 	bl	8000298 <__aeabi_dsub>
 80198b4:	4602      	mov	r2, r0
 80198b6:	460b      	mov	r3, r1
 80198b8:	a111      	add	r1, pc, #68	; (adr r1, 8019900 <__ieee754_atan2+0x190>)
 80198ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80198be:	f7e6 fceb 	bl	8000298 <__aeabi_dsub>
 80198c2:	e776      	b.n	80197b2 <__ieee754_atan2+0x42>
 80198c4:	a114      	add	r1, pc, #80	; (adr r1, 8019918 <__ieee754_atan2+0x1a8>)
 80198c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80198ca:	e772      	b.n	80197b2 <__ieee754_atan2+0x42>
 80198cc:	2100      	movs	r1, #0
 80198ce:	e770      	b.n	80197b2 <__ieee754_atan2+0x42>
 80198d0:	a10f      	add	r1, pc, #60	; (adr r1, 8019910 <__ieee754_atan2+0x1a0>)
 80198d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80198d6:	e76c      	b.n	80197b2 <__ieee754_atan2+0x42>
 80198d8:	54442d18 	.word	0x54442d18
 80198dc:	c00921fb 	.word	0xc00921fb
 80198e0:	54442d18 	.word	0x54442d18
 80198e4:	bff921fb 	.word	0xbff921fb
 80198e8:	54442d18 	.word	0x54442d18
 80198ec:	bfe921fb 	.word	0xbfe921fb
 80198f0:	7f3321d2 	.word	0x7f3321d2
 80198f4:	4002d97c 	.word	0x4002d97c
 80198f8:	7f3321d2 	.word	0x7f3321d2
 80198fc:	c002d97c 	.word	0xc002d97c
 8019900:	54442d18 	.word	0x54442d18
 8019904:	400921fb 	.word	0x400921fb
 8019908:	33145c07 	.word	0x33145c07
 801990c:	3ca1a626 	.word	0x3ca1a626
 8019910:	54442d18 	.word	0x54442d18
 8019914:	3ff921fb 	.word	0x3ff921fb
 8019918:	54442d18 	.word	0x54442d18
 801991c:	3fe921fb 	.word	0x3fe921fb
 8019920:	7ff00000 	.word	0x7ff00000

08019924 <__ieee754_sqrt>:
 8019924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019928:	ec55 4b10 	vmov	r4, r5, d0
 801992c:	4e54      	ldr	r6, [pc, #336]	; (8019a80 <__ieee754_sqrt+0x15c>)
 801992e:	43ae      	bics	r6, r5
 8019930:	ee10 0a10 	vmov	r0, s0
 8019934:	462b      	mov	r3, r5
 8019936:	462a      	mov	r2, r5
 8019938:	4621      	mov	r1, r4
 801993a:	d113      	bne.n	8019964 <__ieee754_sqrt+0x40>
 801993c:	ee10 2a10 	vmov	r2, s0
 8019940:	462b      	mov	r3, r5
 8019942:	ee10 0a10 	vmov	r0, s0
 8019946:	4629      	mov	r1, r5
 8019948:	f7e6 fe5a 	bl	8000600 <__aeabi_dmul>
 801994c:	4602      	mov	r2, r0
 801994e:	460b      	mov	r3, r1
 8019950:	4620      	mov	r0, r4
 8019952:	4629      	mov	r1, r5
 8019954:	f7e6 fca2 	bl	800029c <__adddf3>
 8019958:	4604      	mov	r4, r0
 801995a:	460d      	mov	r5, r1
 801995c:	ec45 4b10 	vmov	d0, r4, r5
 8019960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019964:	2d00      	cmp	r5, #0
 8019966:	dc10      	bgt.n	801998a <__ieee754_sqrt+0x66>
 8019968:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801996c:	4330      	orrs	r0, r6
 801996e:	d0f5      	beq.n	801995c <__ieee754_sqrt+0x38>
 8019970:	b15d      	cbz	r5, 801998a <__ieee754_sqrt+0x66>
 8019972:	ee10 2a10 	vmov	r2, s0
 8019976:	462b      	mov	r3, r5
 8019978:	4620      	mov	r0, r4
 801997a:	4629      	mov	r1, r5
 801997c:	f7e6 fc8c 	bl	8000298 <__aeabi_dsub>
 8019980:	4602      	mov	r2, r0
 8019982:	460b      	mov	r3, r1
 8019984:	f7e6 ff66 	bl	8000854 <__aeabi_ddiv>
 8019988:	e7e6      	b.n	8019958 <__ieee754_sqrt+0x34>
 801998a:	151b      	asrs	r3, r3, #20
 801998c:	d10c      	bne.n	80199a8 <__ieee754_sqrt+0x84>
 801998e:	2a00      	cmp	r2, #0
 8019990:	d06d      	beq.n	8019a6e <__ieee754_sqrt+0x14a>
 8019992:	2000      	movs	r0, #0
 8019994:	02d6      	lsls	r6, r2, #11
 8019996:	d56e      	bpl.n	8019a76 <__ieee754_sqrt+0x152>
 8019998:	1e44      	subs	r4, r0, #1
 801999a:	1b1b      	subs	r3, r3, r4
 801999c:	f1c0 0420 	rsb	r4, r0, #32
 80199a0:	fa21 f404 	lsr.w	r4, r1, r4
 80199a4:	4322      	orrs	r2, r4
 80199a6:	4081      	lsls	r1, r0
 80199a8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80199ac:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80199b0:	07dd      	lsls	r5, r3, #31
 80199b2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80199b6:	bf42      	ittt	mi
 80199b8:	0052      	lslmi	r2, r2, #1
 80199ba:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 80199be:	0049      	lslmi	r1, r1, #1
 80199c0:	1058      	asrs	r0, r3, #1
 80199c2:	2500      	movs	r5, #0
 80199c4:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 80199c8:	441a      	add	r2, r3
 80199ca:	0049      	lsls	r1, r1, #1
 80199cc:	2316      	movs	r3, #22
 80199ce:	462c      	mov	r4, r5
 80199d0:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80199d4:	19a7      	adds	r7, r4, r6
 80199d6:	4297      	cmp	r7, r2
 80199d8:	bfde      	ittt	le
 80199da:	1bd2      	suble	r2, r2, r7
 80199dc:	19bc      	addle	r4, r7, r6
 80199de:	19ad      	addle	r5, r5, r6
 80199e0:	0052      	lsls	r2, r2, #1
 80199e2:	3b01      	subs	r3, #1
 80199e4:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80199e8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80199ec:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80199f0:	d1f0      	bne.n	80199d4 <__ieee754_sqrt+0xb0>
 80199f2:	f04f 0e20 	mov.w	lr, #32
 80199f6:	469c      	mov	ip, r3
 80199f8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80199fc:	42a2      	cmp	r2, r4
 80199fe:	eb06 070c 	add.w	r7, r6, ip
 8019a02:	dc02      	bgt.n	8019a0a <__ieee754_sqrt+0xe6>
 8019a04:	d112      	bne.n	8019a2c <__ieee754_sqrt+0x108>
 8019a06:	428f      	cmp	r7, r1
 8019a08:	d810      	bhi.n	8019a2c <__ieee754_sqrt+0x108>
 8019a0a:	2f00      	cmp	r7, #0
 8019a0c:	eb07 0c06 	add.w	ip, r7, r6
 8019a10:	da34      	bge.n	8019a7c <__ieee754_sqrt+0x158>
 8019a12:	f1bc 0f00 	cmp.w	ip, #0
 8019a16:	db31      	blt.n	8019a7c <__ieee754_sqrt+0x158>
 8019a18:	f104 0801 	add.w	r8, r4, #1
 8019a1c:	1b12      	subs	r2, r2, r4
 8019a1e:	428f      	cmp	r7, r1
 8019a20:	bf88      	it	hi
 8019a22:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8019a26:	1bc9      	subs	r1, r1, r7
 8019a28:	4433      	add	r3, r6
 8019a2a:	4644      	mov	r4, r8
 8019a2c:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8019a30:	f1be 0e01 	subs.w	lr, lr, #1
 8019a34:	443a      	add	r2, r7
 8019a36:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8019a3a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8019a3e:	d1dd      	bne.n	80199fc <__ieee754_sqrt+0xd8>
 8019a40:	430a      	orrs	r2, r1
 8019a42:	d006      	beq.n	8019a52 <__ieee754_sqrt+0x12e>
 8019a44:	1c5c      	adds	r4, r3, #1
 8019a46:	bf13      	iteet	ne
 8019a48:	3301      	addne	r3, #1
 8019a4a:	3501      	addeq	r5, #1
 8019a4c:	4673      	moveq	r3, lr
 8019a4e:	f023 0301 	bicne.w	r3, r3, #1
 8019a52:	106a      	asrs	r2, r5, #1
 8019a54:	085b      	lsrs	r3, r3, #1
 8019a56:	07e9      	lsls	r1, r5, #31
 8019a58:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8019a5c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8019a60:	bf48      	it	mi
 8019a62:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8019a66:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8019a6a:	461c      	mov	r4, r3
 8019a6c:	e776      	b.n	801995c <__ieee754_sqrt+0x38>
 8019a6e:	0aca      	lsrs	r2, r1, #11
 8019a70:	3b15      	subs	r3, #21
 8019a72:	0549      	lsls	r1, r1, #21
 8019a74:	e78b      	b.n	801998e <__ieee754_sqrt+0x6a>
 8019a76:	0052      	lsls	r2, r2, #1
 8019a78:	3001      	adds	r0, #1
 8019a7a:	e78b      	b.n	8019994 <__ieee754_sqrt+0x70>
 8019a7c:	46a0      	mov	r8, r4
 8019a7e:	e7cd      	b.n	8019a1c <__ieee754_sqrt+0xf8>
 8019a80:	7ff00000 	.word	0x7ff00000

08019a84 <__ieee754_acosf>:
 8019a84:	b508      	push	{r3, lr}
 8019a86:	ee10 3a10 	vmov	r3, s0
 8019a8a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8019a8e:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8019a92:	ed2d 8b0c 	vpush	{d8-d13}
 8019a96:	d10a      	bne.n	8019aae <__ieee754_acosf+0x2a>
 8019a98:	ed9f 8a67 	vldr	s16, [pc, #412]	; 8019c38 <__ieee754_acosf+0x1b4>
 8019a9c:	ed9f 0a67 	vldr	s0, [pc, #412]	; 8019c3c <__ieee754_acosf+0x1b8>
 8019aa0:	2b00      	cmp	r3, #0
 8019aa2:	bfd8      	it	le
 8019aa4:	eeb0 0a48 	vmovle.f32	s0, s16
 8019aa8:	ecbd 8b0c 	vpop	{d8-d13}
 8019aac:	bd08      	pop	{r3, pc}
 8019aae:	dd04      	ble.n	8019aba <__ieee754_acosf+0x36>
 8019ab0:	ee30 8a40 	vsub.f32	s16, s0, s0
 8019ab4:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8019ab8:	e7f6      	b.n	8019aa8 <__ieee754_acosf+0x24>
 8019aba:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 8019abe:	da3e      	bge.n	8019b3e <__ieee754_acosf+0xba>
 8019ac0:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 8019ac4:	f340 80b5 	ble.w	8019c32 <__ieee754_acosf+0x1ae>
 8019ac8:	ee60 7a00 	vmul.f32	s15, s0, s0
 8019acc:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8019c40 <__ieee754_acosf+0x1bc>
 8019ad0:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8019c44 <__ieee754_acosf+0x1c0>
 8019ad4:	ed9f 6a5c 	vldr	s12, [pc, #368]	; 8019c48 <__ieee754_acosf+0x1c4>
 8019ad8:	ed9f 8a5c 	vldr	s16, [pc, #368]	; 8019c4c <__ieee754_acosf+0x1c8>
 8019adc:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8019ae0:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8019c50 <__ieee754_acosf+0x1cc>
 8019ae4:	eee7 6a87 	vfma.f32	s13, s15, s14
 8019ae8:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8019c54 <__ieee754_acosf+0x1d0>
 8019aec:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8019af0:	eddf 6a59 	vldr	s13, [pc, #356]	; 8019c58 <__ieee754_acosf+0x1d4>
 8019af4:	eee7 6a87 	vfma.f32	s13, s15, s14
 8019af8:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8019c5c <__ieee754_acosf+0x1d8>
 8019afc:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8019b00:	eddf 6a57 	vldr	s13, [pc, #348]	; 8019c60 <__ieee754_acosf+0x1dc>
 8019b04:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8019b08:	eddf 6a56 	vldr	s13, [pc, #344]	; 8019c64 <__ieee754_acosf+0x1e0>
 8019b0c:	eee7 6a86 	vfma.f32	s13, s15, s12
 8019b10:	ed9f 6a55 	vldr	s12, [pc, #340]	; 8019c68 <__ieee754_acosf+0x1e4>
 8019b14:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8019b18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019b1c:	eee7 6a86 	vfma.f32	s13, s15, s12
 8019b20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019b24:	eef0 7a66 	vmov.f32	s15, s13
 8019b28:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8019b2c:	eea0 8a66 	vfms.f32	s16, s0, s13
 8019b30:	ee30 8a48 	vsub.f32	s16, s0, s16
 8019b34:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8019c6c <__ieee754_acosf+0x1e8>
 8019b38:	ee30 0a48 	vsub.f32	s0, s0, s16
 8019b3c:	e7b4      	b.n	8019aa8 <__ieee754_acosf+0x24>
 8019b3e:	2b00      	cmp	r3, #0
 8019b40:	eddf da3f 	vldr	s27, [pc, #252]	; 8019c40 <__ieee754_acosf+0x1bc>
 8019b44:	eddf ca3f 	vldr	s25, [pc, #252]	; 8019c44 <__ieee754_acosf+0x1c0>
 8019b48:	ed9f ca41 	vldr	s24, [pc, #260]	; 8019c50 <__ieee754_acosf+0x1cc>
 8019b4c:	eddf ba41 	vldr	s23, [pc, #260]	; 8019c54 <__ieee754_acosf+0x1d0>
 8019b50:	ed9f ba41 	vldr	s22, [pc, #260]	; 8019c58 <__ieee754_acosf+0x1d4>
 8019b54:	eddf 8a41 	vldr	s17, [pc, #260]	; 8019c5c <__ieee754_acosf+0x1d8>
 8019b58:	ed9f da41 	vldr	s26, [pc, #260]	; 8019c60 <__ieee754_acosf+0x1dc>
 8019b5c:	eddf aa3a 	vldr	s21, [pc, #232]	; 8019c48 <__ieee754_acosf+0x1c4>
 8019b60:	ed9f aa40 	vldr	s20, [pc, #256]	; 8019c64 <__ieee754_acosf+0x1e0>
 8019b64:	eddf 9a40 	vldr	s19, [pc, #256]	; 8019c68 <__ieee754_acosf+0x1e4>
 8019b68:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8019b6c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8019b70:	da28      	bge.n	8019bc4 <__ieee754_acosf+0x140>
 8019b72:	ee30 0a09 	vadd.f32	s0, s0, s18
 8019b76:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019b7a:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8019b7e:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8019b82:	eea0 ca2c 	vfma.f32	s24, s0, s25
 8019b86:	eea0 aa2a 	vfma.f32	s20, s0, s21
 8019b8a:	eee0 ba0c 	vfma.f32	s23, s0, s24
 8019b8e:	eee0 9a0a 	vfma.f32	s19, s0, s20
 8019b92:	eea0 ba2b 	vfma.f32	s22, s0, s23
 8019b96:	eea0 9a29 	vfma.f32	s18, s0, s19
 8019b9a:	eee0 8a0b 	vfma.f32	s17, s0, s22
 8019b9e:	ee68 8a80 	vmul.f32	s17, s17, s0
 8019ba2:	f000 f997 	bl	8019ed4 <__ieee754_sqrtf>
 8019ba6:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8019baa:	eddf 7a31 	vldr	s15, [pc, #196]	; 8019c70 <__ieee754_acosf+0x1ec>
 8019bae:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019bb2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8019bb6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019bba:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8019c74 <__ieee754_acosf+0x1f0>
 8019bbe:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8019bc2:	e771      	b.n	8019aa8 <__ieee754_acosf+0x24>
 8019bc4:	ee39 8a40 	vsub.f32	s16, s18, s0
 8019bc8:	ee28 8a27 	vmul.f32	s16, s16, s15
 8019bcc:	eeb0 0a48 	vmov.f32	s0, s16
 8019bd0:	f000 f980 	bl	8019ed4 <__ieee754_sqrtf>
 8019bd4:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8019bd8:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8019bdc:	eea8 ca2c 	vfma.f32	s24, s16, s25
 8019be0:	eea8 aa2a 	vfma.f32	s20, s16, s21
 8019be4:	eee8 ba0c 	vfma.f32	s23, s16, s24
 8019be8:	ee10 3a10 	vmov	r3, s0
 8019bec:	eea8 ba2b 	vfma.f32	s22, s16, s23
 8019bf0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8019bf4:	f023 030f 	bic.w	r3, r3, #15
 8019bf8:	eee8 9a0a 	vfma.f32	s19, s16, s20
 8019bfc:	ee07 3a90 	vmov	s15, r3
 8019c00:	eee8 8a0b 	vfma.f32	s17, s16, s22
 8019c04:	eeb0 6a48 	vmov.f32	s12, s16
 8019c08:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8019c0c:	eea8 9a29 	vfma.f32	s18, s16, s19
 8019c10:	ee77 6a80 	vadd.f32	s13, s15, s0
 8019c14:	ee68 8a88 	vmul.f32	s17, s17, s16
 8019c18:	eeb0 7a40 	vmov.f32	s14, s0
 8019c1c:	ee86 0a26 	vdiv.f32	s0, s12, s13
 8019c20:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8019c24:	eea7 0a26 	vfma.f32	s0, s14, s13
 8019c28:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019c2c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019c30:	e73a      	b.n	8019aa8 <__ieee754_acosf+0x24>
 8019c32:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8019c78 <__ieee754_acosf+0x1f4>
 8019c36:	e737      	b.n	8019aa8 <__ieee754_acosf+0x24>
 8019c38:	40490fdb 	.word	0x40490fdb
 8019c3c:	00000000 	.word	0x00000000
 8019c40:	3811ef08 	.word	0x3811ef08
 8019c44:	3a4f7f04 	.word	0x3a4f7f04
 8019c48:	bf303361 	.word	0xbf303361
 8019c4c:	33a22168 	.word	0x33a22168
 8019c50:	bd241146 	.word	0xbd241146
 8019c54:	3e4e0aa8 	.word	0x3e4e0aa8
 8019c58:	bea6b090 	.word	0xbea6b090
 8019c5c:	3e2aaaab 	.word	0x3e2aaaab
 8019c60:	3d9dc62e 	.word	0x3d9dc62e
 8019c64:	4001572d 	.word	0x4001572d
 8019c68:	c019d139 	.word	0xc019d139
 8019c6c:	3fc90fda 	.word	0x3fc90fda
 8019c70:	b3a22168 	.word	0xb3a22168
 8019c74:	40490fda 	.word	0x40490fda
 8019c78:	3fc90fdb 	.word	0x3fc90fdb

08019c7c <__ieee754_rem_pio2f>:
 8019c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019c7e:	ee10 6a10 	vmov	r6, s0
 8019c82:	4b86      	ldr	r3, [pc, #536]	; (8019e9c <__ieee754_rem_pio2f+0x220>)
 8019c84:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8019c88:	429c      	cmp	r4, r3
 8019c8a:	b087      	sub	sp, #28
 8019c8c:	4605      	mov	r5, r0
 8019c8e:	dc05      	bgt.n	8019c9c <__ieee754_rem_pio2f+0x20>
 8019c90:	2300      	movs	r3, #0
 8019c92:	ed85 0a00 	vstr	s0, [r5]
 8019c96:	6043      	str	r3, [r0, #4]
 8019c98:	2000      	movs	r0, #0
 8019c9a:	e020      	b.n	8019cde <__ieee754_rem_pio2f+0x62>
 8019c9c:	4b80      	ldr	r3, [pc, #512]	; (8019ea0 <__ieee754_rem_pio2f+0x224>)
 8019c9e:	429c      	cmp	r4, r3
 8019ca0:	dc38      	bgt.n	8019d14 <__ieee754_rem_pio2f+0x98>
 8019ca2:	2e00      	cmp	r6, #0
 8019ca4:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8019ea4 <__ieee754_rem_pio2f+0x228>
 8019ca8:	4b7f      	ldr	r3, [pc, #508]	; (8019ea8 <__ieee754_rem_pio2f+0x22c>)
 8019caa:	f024 040f 	bic.w	r4, r4, #15
 8019cae:	dd18      	ble.n	8019ce2 <__ieee754_rem_pio2f+0x66>
 8019cb0:	429c      	cmp	r4, r3
 8019cb2:	ee70 7a47 	vsub.f32	s15, s0, s14
 8019cb6:	bf09      	itett	eq
 8019cb8:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8019eac <__ieee754_rem_pio2f+0x230>
 8019cbc:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8019eb0 <__ieee754_rem_pio2f+0x234>
 8019cc0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8019cc4:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8019eb4 <__ieee754_rem_pio2f+0x238>
 8019cc8:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8019ccc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019cd0:	edc0 6a00 	vstr	s13, [r0]
 8019cd4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019cd8:	edc0 7a01 	vstr	s15, [r0, #4]
 8019cdc:	2001      	movs	r0, #1
 8019cde:	b007      	add	sp, #28
 8019ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019ce2:	429c      	cmp	r4, r3
 8019ce4:	ee70 7a07 	vadd.f32	s15, s0, s14
 8019ce8:	bf09      	itett	eq
 8019cea:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8019eac <__ieee754_rem_pio2f+0x230>
 8019cee:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8019eb0 <__ieee754_rem_pio2f+0x234>
 8019cf2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8019cf6:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8019eb4 <__ieee754_rem_pio2f+0x238>
 8019cfa:	ee77 6a87 	vadd.f32	s13, s15, s14
 8019cfe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019d02:	edc0 6a00 	vstr	s13, [r0]
 8019d06:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019d0a:	edc0 7a01 	vstr	s15, [r0, #4]
 8019d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8019d12:	e7e4      	b.n	8019cde <__ieee754_rem_pio2f+0x62>
 8019d14:	4b68      	ldr	r3, [pc, #416]	; (8019eb8 <__ieee754_rem_pio2f+0x23c>)
 8019d16:	429c      	cmp	r4, r3
 8019d18:	dc71      	bgt.n	8019dfe <__ieee754_rem_pio2f+0x182>
 8019d1a:	f000 fec9 	bl	801aab0 <fabsf>
 8019d1e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8019ebc <__ieee754_rem_pio2f+0x240>
 8019d22:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8019d26:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019d2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019d2e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8019d32:	ee17 0a90 	vmov	r0, s15
 8019d36:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8019ea4 <__ieee754_rem_pio2f+0x228>
 8019d3a:	eeb1 7a46 	vneg.f32	s14, s12
 8019d3e:	eea7 0a27 	vfma.f32	s0, s14, s15
 8019d42:	281f      	cmp	r0, #31
 8019d44:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8019eb0 <__ieee754_rem_pio2f+0x234>
 8019d48:	ee66 7a27 	vmul.f32	s15, s12, s15
 8019d4c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8019d50:	ee16 3a90 	vmov	r3, s13
 8019d54:	dc1c      	bgt.n	8019d90 <__ieee754_rem_pio2f+0x114>
 8019d56:	1e47      	subs	r7, r0, #1
 8019d58:	4959      	ldr	r1, [pc, #356]	; (8019ec0 <__ieee754_rem_pio2f+0x244>)
 8019d5a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8019d5e:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8019d62:	428a      	cmp	r2, r1
 8019d64:	d014      	beq.n	8019d90 <__ieee754_rem_pio2f+0x114>
 8019d66:	602b      	str	r3, [r5, #0]
 8019d68:	ed95 7a00 	vldr	s14, [r5]
 8019d6c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8019d70:	2e00      	cmp	r6, #0
 8019d72:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019d76:	ed85 0a01 	vstr	s0, [r5, #4]
 8019d7a:	dab0      	bge.n	8019cde <__ieee754_rem_pio2f+0x62>
 8019d7c:	eeb1 7a47 	vneg.f32	s14, s14
 8019d80:	eeb1 0a40 	vneg.f32	s0, s0
 8019d84:	ed85 7a00 	vstr	s14, [r5]
 8019d88:	ed85 0a01 	vstr	s0, [r5, #4]
 8019d8c:	4240      	negs	r0, r0
 8019d8e:	e7a6      	b.n	8019cde <__ieee754_rem_pio2f+0x62>
 8019d90:	15e4      	asrs	r4, r4, #23
 8019d92:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8019d96:	1aa2      	subs	r2, r4, r2
 8019d98:	2a08      	cmp	r2, #8
 8019d9a:	dde4      	ble.n	8019d66 <__ieee754_rem_pio2f+0xea>
 8019d9c:	eddf 7a43 	vldr	s15, [pc, #268]	; 8019eac <__ieee754_rem_pio2f+0x230>
 8019da0:	eef0 6a40 	vmov.f32	s13, s0
 8019da4:	eee7 6a27 	vfma.f32	s13, s14, s15
 8019da8:	ee30 0a66 	vsub.f32	s0, s0, s13
 8019dac:	eea7 0a27 	vfma.f32	s0, s14, s15
 8019db0:	eddf 7a40 	vldr	s15, [pc, #256]	; 8019eb4 <__ieee754_rem_pio2f+0x238>
 8019db4:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8019db8:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8019dbc:	eef0 7a40 	vmov.f32	s15, s0
 8019dc0:	ee15 3a90 	vmov	r3, s11
 8019dc4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8019dc8:	1aa4      	subs	r4, r4, r2
 8019dca:	2c19      	cmp	r4, #25
 8019dcc:	dc04      	bgt.n	8019dd8 <__ieee754_rem_pio2f+0x15c>
 8019dce:	edc5 5a00 	vstr	s11, [r5]
 8019dd2:	eeb0 0a66 	vmov.f32	s0, s13
 8019dd6:	e7c7      	b.n	8019d68 <__ieee754_rem_pio2f+0xec>
 8019dd8:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8019ec4 <__ieee754_rem_pio2f+0x248>
 8019ddc:	eeb0 0a66 	vmov.f32	s0, s13
 8019de0:	eea7 0a25 	vfma.f32	s0, s14, s11
 8019de4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8019de8:	eee7 7a25 	vfma.f32	s15, s14, s11
 8019dec:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8019ec8 <__ieee754_rem_pio2f+0x24c>
 8019df0:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8019df4:	ee30 7a67 	vsub.f32	s14, s0, s15
 8019df8:	ed85 7a00 	vstr	s14, [r5]
 8019dfc:	e7b4      	b.n	8019d68 <__ieee754_rem_pio2f+0xec>
 8019dfe:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8019e02:	db06      	blt.n	8019e12 <__ieee754_rem_pio2f+0x196>
 8019e04:	ee70 7a40 	vsub.f32	s15, s0, s0
 8019e08:	edc0 7a01 	vstr	s15, [r0, #4]
 8019e0c:	edc0 7a00 	vstr	s15, [r0]
 8019e10:	e742      	b.n	8019c98 <__ieee754_rem_pio2f+0x1c>
 8019e12:	15e2      	asrs	r2, r4, #23
 8019e14:	3a86      	subs	r2, #134	; 0x86
 8019e16:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8019e1a:	ee07 3a90 	vmov	s15, r3
 8019e1e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8019e22:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8019ecc <__ieee754_rem_pio2f+0x250>
 8019e26:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019e2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019e2e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8019e32:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019e36:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8019e3a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019e3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019e42:	ed8d 7a04 	vstr	s14, [sp, #16]
 8019e46:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019e4a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8019e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e52:	edcd 7a05 	vstr	s15, [sp, #20]
 8019e56:	d11e      	bne.n	8019e96 <__ieee754_rem_pio2f+0x21a>
 8019e58:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8019e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e60:	bf14      	ite	ne
 8019e62:	2302      	movne	r3, #2
 8019e64:	2301      	moveq	r3, #1
 8019e66:	491a      	ldr	r1, [pc, #104]	; (8019ed0 <__ieee754_rem_pio2f+0x254>)
 8019e68:	9101      	str	r1, [sp, #4]
 8019e6a:	2102      	movs	r1, #2
 8019e6c:	9100      	str	r1, [sp, #0]
 8019e6e:	a803      	add	r0, sp, #12
 8019e70:	4629      	mov	r1, r5
 8019e72:	f000 f8d5 	bl	801a020 <__kernel_rem_pio2f>
 8019e76:	2e00      	cmp	r6, #0
 8019e78:	f6bf af31 	bge.w	8019cde <__ieee754_rem_pio2f+0x62>
 8019e7c:	edd5 7a00 	vldr	s15, [r5]
 8019e80:	eef1 7a67 	vneg.f32	s15, s15
 8019e84:	edc5 7a00 	vstr	s15, [r5]
 8019e88:	edd5 7a01 	vldr	s15, [r5, #4]
 8019e8c:	eef1 7a67 	vneg.f32	s15, s15
 8019e90:	edc5 7a01 	vstr	s15, [r5, #4]
 8019e94:	e77a      	b.n	8019d8c <__ieee754_rem_pio2f+0x110>
 8019e96:	2303      	movs	r3, #3
 8019e98:	e7e5      	b.n	8019e66 <__ieee754_rem_pio2f+0x1ea>
 8019e9a:	bf00      	nop
 8019e9c:	3f490fd8 	.word	0x3f490fd8
 8019ea0:	4016cbe3 	.word	0x4016cbe3
 8019ea4:	3fc90f80 	.word	0x3fc90f80
 8019ea8:	3fc90fd0 	.word	0x3fc90fd0
 8019eac:	37354400 	.word	0x37354400
 8019eb0:	37354443 	.word	0x37354443
 8019eb4:	2e85a308 	.word	0x2e85a308
 8019eb8:	43490f80 	.word	0x43490f80
 8019ebc:	3f22f984 	.word	0x3f22f984
 8019ec0:	0801dbac 	.word	0x0801dbac
 8019ec4:	2e85a300 	.word	0x2e85a300
 8019ec8:	248d3132 	.word	0x248d3132
 8019ecc:	43800000 	.word	0x43800000
 8019ed0:	0801dc2c 	.word	0x0801dc2c

08019ed4 <__ieee754_sqrtf>:
 8019ed4:	ee10 2a10 	vmov	r2, s0
 8019ed8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8019edc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8019ee0:	b570      	push	{r4, r5, r6, lr}
 8019ee2:	d302      	bcc.n	8019eea <__ieee754_sqrtf+0x16>
 8019ee4:	eea0 0a00 	vfma.f32	s0, s0, s0
 8019ee8:	bd70      	pop	{r4, r5, r6, pc}
 8019eea:	b3b1      	cbz	r1, 8019f5a <__ieee754_sqrtf+0x86>
 8019eec:	2a00      	cmp	r2, #0
 8019eee:	da04      	bge.n	8019efa <__ieee754_sqrtf+0x26>
 8019ef0:	ee70 7a40 	vsub.f32	s15, s0, s0
 8019ef4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8019ef8:	bd70      	pop	{r4, r5, r6, pc}
 8019efa:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8019efe:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8019f02:	d204      	bcs.n	8019f0e <__ieee754_sqrtf+0x3a>
 8019f04:	2100      	movs	r1, #0
 8019f06:	0210      	lsls	r0, r2, #8
 8019f08:	d528      	bpl.n	8019f5c <__ieee754_sqrtf+0x88>
 8019f0a:	3901      	subs	r1, #1
 8019f0c:	1a5b      	subs	r3, r3, r1
 8019f0e:	3b7f      	subs	r3, #127	; 0x7f
 8019f10:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8019f14:	07d9      	lsls	r1, r3, #31
 8019f16:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8019f1a:	bf48      	it	mi
 8019f1c:	0052      	lslmi	r2, r2, #1
 8019f1e:	1059      	asrs	r1, r3, #1
 8019f20:	2300      	movs	r3, #0
 8019f22:	0052      	lsls	r2, r2, #1
 8019f24:	2419      	movs	r4, #25
 8019f26:	461e      	mov	r6, r3
 8019f28:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8019f2c:	1835      	adds	r5, r6, r0
 8019f2e:	4295      	cmp	r5, r2
 8019f30:	bfde      	ittt	le
 8019f32:	182e      	addle	r6, r5, r0
 8019f34:	1b52      	suble	r2, r2, r5
 8019f36:	181b      	addle	r3, r3, r0
 8019f38:	3c01      	subs	r4, #1
 8019f3a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8019f3e:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8019f42:	d1f3      	bne.n	8019f2c <__ieee754_sqrtf+0x58>
 8019f44:	b112      	cbz	r2, 8019f4c <__ieee754_sqrtf+0x78>
 8019f46:	3301      	adds	r3, #1
 8019f48:	f023 0301 	bic.w	r3, r3, #1
 8019f4c:	105b      	asrs	r3, r3, #1
 8019f4e:	f103 537c 	add.w	r3, r3, #1056964608	; 0x3f000000
 8019f52:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 8019f56:	ee00 3a10 	vmov	s0, r3
 8019f5a:	bd70      	pop	{r4, r5, r6, pc}
 8019f5c:	0052      	lsls	r2, r2, #1
 8019f5e:	3101      	adds	r1, #1
 8019f60:	e7d1      	b.n	8019f06 <__ieee754_sqrtf+0x32>
	...

08019f64 <__kernel_cosf>:
 8019f64:	ee10 3a10 	vmov	r3, s0
 8019f68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019f6c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8019f70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019f74:	da05      	bge.n	8019f82 <__kernel_cosf+0x1e>
 8019f76:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8019f7a:	ee17 2a90 	vmov	r2, s15
 8019f7e:	2a00      	cmp	r2, #0
 8019f80:	d03b      	beq.n	8019ffa <__kernel_cosf+0x96>
 8019f82:	ee20 7a00 	vmul.f32	s14, s0, s0
 8019f86:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 801a000 <__kernel_cosf+0x9c>
 8019f8a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801a004 <__kernel_cosf+0xa0>
 8019f8e:	eddf 5a1e 	vldr	s11, [pc, #120]	; 801a008 <__kernel_cosf+0xa4>
 8019f92:	4a1e      	ldr	r2, [pc, #120]	; (801a00c <__kernel_cosf+0xa8>)
 8019f94:	eea7 6a27 	vfma.f32	s12, s14, s15
 8019f98:	4293      	cmp	r3, r2
 8019f9a:	ee60 0a20 	vmul.f32	s1, s0, s1
 8019f9e:	eee7 5a06 	vfma.f32	s11, s14, s12
 8019fa2:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 801a010 <__kernel_cosf+0xac>
 8019fa6:	eea7 6a25 	vfma.f32	s12, s14, s11
 8019faa:	eddf 5a1a 	vldr	s11, [pc, #104]	; 801a014 <__kernel_cosf+0xb0>
 8019fae:	eee7 5a06 	vfma.f32	s11, s14, s12
 8019fb2:	ed9f 6a19 	vldr	s12, [pc, #100]	; 801a018 <__kernel_cosf+0xb4>
 8019fb6:	eea7 6a25 	vfma.f32	s12, s14, s11
 8019fba:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8019fbe:	ee26 6a07 	vmul.f32	s12, s12, s14
 8019fc2:	dc06      	bgt.n	8019fd2 <__kernel_cosf+0x6e>
 8019fc4:	eed7 0a06 	vfnms.f32	s1, s14, s12
 8019fc8:	eed7 0a25 	vfnms.f32	s1, s14, s11
 8019fcc:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8019fd0:	4770      	bx	lr
 8019fd2:	4a12      	ldr	r2, [pc, #72]	; (801a01c <__kernel_cosf+0xb8>)
 8019fd4:	4293      	cmp	r3, r2
 8019fd6:	bfda      	itte	le
 8019fd8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8019fdc:	ee07 3a90 	vmovle	s15, r3
 8019fe0:	eef5 7a02 	vmovgt.f32	s15, #82	; 0x3e900000  0.2812500
 8019fe4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8019fe8:	eed7 0a06 	vfnms.f32	s1, s14, s12
 8019fec:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8019ff0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8019ff4:	ee36 0ae7 	vsub.f32	s0, s13, s15
 8019ff8:	4770      	bx	lr
 8019ffa:	eeb0 0a66 	vmov.f32	s0, s13
 8019ffe:	4770      	bx	lr
 801a000:	310f74f6 	.word	0x310f74f6
 801a004:	ad47d74e 	.word	0xad47d74e
 801a008:	b493f27c 	.word	0xb493f27c
 801a00c:	3e999999 	.word	0x3e999999
 801a010:	37d00d01 	.word	0x37d00d01
 801a014:	bab60b61 	.word	0xbab60b61
 801a018:	3d2aaaab 	.word	0x3d2aaaab
 801a01c:	3f480000 	.word	0x3f480000

0801a020 <__kernel_rem_pio2f>:
 801a020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a024:	ed2d 8b04 	vpush	{d8-d9}
 801a028:	b0d7      	sub	sp, #348	; 0x15c
 801a02a:	468b      	mov	fp, r1
 801a02c:	9301      	str	r3, [sp, #4]
 801a02e:	9964      	ldr	r1, [sp, #400]	; 0x190
 801a030:	4bcb      	ldr	r3, [pc, #812]	; (801a360 <__kernel_rem_pio2f+0x340>)
 801a032:	9002      	str	r0, [sp, #8]
 801a034:	f853 a021 	ldr.w	sl, [r3, r1, lsl #2]
 801a038:	9b01      	ldr	r3, [sp, #4]
 801a03a:	9e65      	ldr	r6, [sp, #404]	; 0x194
 801a03c:	ed9f 7acc 	vldr	s14, [pc, #816]	; 801a370 <__kernel_rem_pio2f+0x350>
 801a040:	3b01      	subs	r3, #1
 801a042:	1ed0      	subs	r0, r2, #3
 801a044:	2408      	movs	r4, #8
 801a046:	fb90 f0f4 	sdiv	r0, r0, r4
 801a04a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 801a04e:	1c45      	adds	r5, r0, #1
 801a050:	1ac7      	subs	r7, r0, r3
 801a052:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801a056:	eb0a 0e03 	add.w	lr, sl, r3
 801a05a:	ac1a      	add	r4, sp, #104	; 0x68
 801a05c:	eb06 0c87 	add.w	ip, r6, r7, lsl #2
 801a060:	2200      	movs	r2, #0
 801a062:	4572      	cmp	r2, lr
 801a064:	dd0f      	ble.n	801a086 <__kernel_rem_pio2f+0x66>
 801a066:	f50d 7e84 	add.w	lr, sp, #264	; 0x108
 801a06a:	2400      	movs	r4, #0
 801a06c:	4554      	cmp	r4, sl
 801a06e:	dc26      	bgt.n	801a0be <__kernel_rem_pio2f+0x9e>
 801a070:	9a01      	ldr	r2, [sp, #4]
 801a072:	9f02      	ldr	r7, [sp, #8]
 801a074:	eddf 7abe 	vldr	s15, [pc, #760]	; 801a370 <__kernel_rem_pio2f+0x350>
 801a078:	4422      	add	r2, r4
 801a07a:	a91a      	add	r1, sp, #104	; 0x68
 801a07c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801a080:	f04f 0c00 	mov.w	ip, #0
 801a084:	e015      	b.n	801a0b2 <__kernel_rem_pio2f+0x92>
 801a086:	42d7      	cmn	r7, r2
 801a088:	bf5d      	ittte	pl
 801a08a:	f85c 1022 	ldrpl.w	r1, [ip, r2, lsl #2]
 801a08e:	ee07 1a90 	vmovpl	s15, r1
 801a092:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801a096:	eef0 7a47 	vmovmi.f32	s15, s14
 801a09a:	ece4 7a01 	vstmia	r4!, {s15}
 801a09e:	3201      	adds	r2, #1
 801a0a0:	e7df      	b.n	801a062 <__kernel_rem_pio2f+0x42>
 801a0a2:	ecf7 6a01 	vldmia	r7!, {s13}
 801a0a6:	ed32 7a01 	vldmdb	r2!, {s14}
 801a0aa:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a0ae:	f10c 0c01 	add.w	ip, ip, #1
 801a0b2:	459c      	cmp	ip, r3
 801a0b4:	ddf5      	ble.n	801a0a2 <__kernel_rem_pio2f+0x82>
 801a0b6:	ecee 7a01 	vstmia	lr!, {s15}
 801a0ba:	3401      	adds	r4, #1
 801a0bc:	e7d6      	b.n	801a06c <__kernel_rem_pio2f+0x4c>
 801a0be:	aa06      	add	r2, sp, #24
 801a0c0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801a0c4:	9204      	str	r2, [sp, #16]
 801a0c6:	eddf 8aa7 	vldr	s17, [pc, #668]	; 801a364 <__kernel_rem_pio2f+0x344>
 801a0ca:	ed9f 9aa7 	vldr	s18, [pc, #668]	; 801a368 <__kernel_rem_pio2f+0x348>
 801a0ce:	eb06 0280 	add.w	r2, r6, r0, lsl #2
 801a0d2:	9203      	str	r2, [sp, #12]
 801a0d4:	4657      	mov	r7, sl
 801a0d6:	aa56      	add	r2, sp, #344	; 0x158
 801a0d8:	f107 4880 	add.w	r8, r7, #1073741824	; 0x40000000
 801a0dc:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 801a0e0:	f108 38ff 	add.w	r8, r8, #4294967295
 801a0e4:	ed12 0a14 	vldr	s0, [r2, #-80]	; 0xffffffb0
 801a0e8:	ea4f 0888 	mov.w	r8, r8, lsl #2
 801a0ec:	aa56      	add	r2, sp, #344	; 0x158
 801a0ee:	eb02 0008 	add.w	r0, r2, r8
 801a0f2:	384c      	subs	r0, #76	; 0x4c
 801a0f4:	2200      	movs	r2, #0
 801a0f6:	1abc      	subs	r4, r7, r2
 801a0f8:	2c00      	cmp	r4, #0
 801a0fa:	dc4a      	bgt.n	801a192 <__kernel_rem_pio2f+0x172>
 801a0fc:	4628      	mov	r0, r5
 801a0fe:	9305      	str	r3, [sp, #20]
 801a100:	f000 fd20 	bl	801ab44 <scalbnf>
 801a104:	eeb0 8a40 	vmov.f32	s16, s0
 801a108:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801a10c:	ee28 0a00 	vmul.f32	s0, s16, s0
 801a110:	f000 fcd6 	bl	801aac0 <floorf>
 801a114:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801a118:	eea0 8a67 	vfms.f32	s16, s0, s15
 801a11c:	2d00      	cmp	r5, #0
 801a11e:	9b05      	ldr	r3, [sp, #20]
 801a120:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801a124:	ee17 9a90 	vmov	r9, s15
 801a128:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a12c:	ee38 8a67 	vsub.f32	s16, s16, s15
 801a130:	dd44      	ble.n	801a1bc <__kernel_rem_pio2f+0x19c>
 801a132:	1e78      	subs	r0, r7, #1
 801a134:	aa06      	add	r2, sp, #24
 801a136:	f1c5 0408 	rsb	r4, r5, #8
 801a13a:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801a13e:	fa46 f204 	asr.w	r2, r6, r4
 801a142:	4491      	add	r9, r2
 801a144:	40a2      	lsls	r2, r4
 801a146:	1ab6      	subs	r6, r6, r2
 801a148:	aa06      	add	r2, sp, #24
 801a14a:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 801a14e:	f1c5 0207 	rsb	r2, r5, #7
 801a152:	4116      	asrs	r6, r2
 801a154:	2e00      	cmp	r6, #0
 801a156:	dd40      	ble.n	801a1da <__kernel_rem_pio2f+0x1ba>
 801a158:	2400      	movs	r4, #0
 801a15a:	f109 0901 	add.w	r9, r9, #1
 801a15e:	4620      	mov	r0, r4
 801a160:	42a7      	cmp	r7, r4
 801a162:	dc75      	bgt.n	801a250 <__kernel_rem_pio2f+0x230>
 801a164:	2d00      	cmp	r5, #0
 801a166:	dd05      	ble.n	801a174 <__kernel_rem_pio2f+0x154>
 801a168:	2d01      	cmp	r5, #1
 801a16a:	f000 8086 	beq.w	801a27a <__kernel_rem_pio2f+0x25a>
 801a16e:	2d02      	cmp	r5, #2
 801a170:	f000 808d 	beq.w	801a28e <__kernel_rem_pio2f+0x26e>
 801a174:	2e02      	cmp	r6, #2
 801a176:	d130      	bne.n	801a1da <__kernel_rem_pio2f+0x1ba>
 801a178:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801a17c:	ee30 8a48 	vsub.f32	s16, s0, s16
 801a180:	b358      	cbz	r0, 801a1da <__kernel_rem_pio2f+0x1ba>
 801a182:	4628      	mov	r0, r5
 801a184:	9305      	str	r3, [sp, #20]
 801a186:	f000 fcdd 	bl	801ab44 <scalbnf>
 801a18a:	9b05      	ldr	r3, [sp, #20]
 801a18c:	ee38 8a40 	vsub.f32	s16, s16, s0
 801a190:	e023      	b.n	801a1da <__kernel_rem_pio2f+0x1ba>
 801a192:	ee60 7a28 	vmul.f32	s15, s0, s17
 801a196:	ac06      	add	r4, sp, #24
 801a198:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a19c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a1a0:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801a1a4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801a1a8:	ee10 1a10 	vmov	r1, s0
 801a1ac:	ed30 0a01 	vldmdb	r0!, {s0}
 801a1b0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801a1b4:	ee37 0a80 	vadd.f32	s0, s15, s0
 801a1b8:	3201      	adds	r2, #1
 801a1ba:	e79c      	b.n	801a0f6 <__kernel_rem_pio2f+0xd6>
 801a1bc:	d105      	bne.n	801a1ca <__kernel_rem_pio2f+0x1aa>
 801a1be:	1e7a      	subs	r2, r7, #1
 801a1c0:	a906      	add	r1, sp, #24
 801a1c2:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801a1c6:	1236      	asrs	r6, r6, #8
 801a1c8:	e7c4      	b.n	801a154 <__kernel_rem_pio2f+0x134>
 801a1ca:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801a1ce:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801a1d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a1d6:	da39      	bge.n	801a24c <__kernel_rem_pio2f+0x22c>
 801a1d8:	2600      	movs	r6, #0
 801a1da:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801a1de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a1e2:	f040 808d 	bne.w	801a300 <__kernel_rem_pio2f+0x2e0>
 801a1e6:	1e7c      	subs	r4, r7, #1
 801a1e8:	4620      	mov	r0, r4
 801a1ea:	2200      	movs	r2, #0
 801a1ec:	4550      	cmp	r0, sl
 801a1ee:	da55      	bge.n	801a29c <__kernel_rem_pio2f+0x27c>
 801a1f0:	2a00      	cmp	r2, #0
 801a1f2:	d164      	bne.n	801a2be <__kernel_rem_pio2f+0x29e>
 801a1f4:	2401      	movs	r4, #1
 801a1f6:	f06f 0003 	mvn.w	r0, #3
 801a1fa:	fb00 f204 	mul.w	r2, r0, r4
 801a1fe:	9904      	ldr	r1, [sp, #16]
 801a200:	588a      	ldr	r2, [r1, r2]
 801a202:	2a00      	cmp	r2, #0
 801a204:	d050      	beq.n	801a2a8 <__kernel_rem_pio2f+0x288>
 801a206:	aa56      	add	r2, sp, #344	; 0x158
 801a208:	4490      	add	r8, r2
 801a20a:	9a01      	ldr	r2, [sp, #4]
 801a20c:	a91a      	add	r1, sp, #104	; 0x68
 801a20e:	443a      	add	r2, r7
 801a210:	1c78      	adds	r0, r7, #1
 801a212:	f1a8 0848 	sub.w	r8, r8, #72	; 0x48
 801a216:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801a21a:	4427      	add	r7, r4
 801a21c:	42b8      	cmp	r0, r7
 801a21e:	f73f af5a 	bgt.w	801a0d6 <__kernel_rem_pio2f+0xb6>
 801a222:	9903      	ldr	r1, [sp, #12]
 801a224:	9e02      	ldr	r6, [sp, #8]
 801a226:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801a22a:	9105      	str	r1, [sp, #20]
 801a22c:	ee07 1a90 	vmov	s15, r1
 801a230:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a234:	2400      	movs	r4, #0
 801a236:	ece2 7a01 	vstmia	r2!, {s15}
 801a23a:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801a370 <__kernel_rem_pio2f+0x350>
 801a23e:	4696      	mov	lr, r2
 801a240:	429c      	cmp	r4, r3
 801a242:	dd33      	ble.n	801a2ac <__kernel_rem_pio2f+0x28c>
 801a244:	ece8 7a01 	vstmia	r8!, {s15}
 801a248:	3001      	adds	r0, #1
 801a24a:	e7e7      	b.n	801a21c <__kernel_rem_pio2f+0x1fc>
 801a24c:	2602      	movs	r6, #2
 801a24e:	e783      	b.n	801a158 <__kernel_rem_pio2f+0x138>
 801a250:	aa06      	add	r2, sp, #24
 801a252:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 801a256:	b948      	cbnz	r0, 801a26c <__kernel_rem_pio2f+0x24c>
 801a258:	b12a      	cbz	r2, 801a266 <__kernel_rem_pio2f+0x246>
 801a25a:	a906      	add	r1, sp, #24
 801a25c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801a260:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 801a264:	2201      	movs	r2, #1
 801a266:	3401      	adds	r4, #1
 801a268:	4610      	mov	r0, r2
 801a26a:	e779      	b.n	801a160 <__kernel_rem_pio2f+0x140>
 801a26c:	a906      	add	r1, sp, #24
 801a26e:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801a272:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 801a276:	4602      	mov	r2, r0
 801a278:	e7f5      	b.n	801a266 <__kernel_rem_pio2f+0x246>
 801a27a:	1e7c      	subs	r4, r7, #1
 801a27c:	aa06      	add	r2, sp, #24
 801a27e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 801a282:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801a286:	a906      	add	r1, sp, #24
 801a288:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 801a28c:	e772      	b.n	801a174 <__kernel_rem_pio2f+0x154>
 801a28e:	1e7c      	subs	r4, r7, #1
 801a290:	aa06      	add	r2, sp, #24
 801a292:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 801a296:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801a29a:	e7f4      	b.n	801a286 <__kernel_rem_pio2f+0x266>
 801a29c:	a906      	add	r1, sp, #24
 801a29e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801a2a2:	3801      	subs	r0, #1
 801a2a4:	430a      	orrs	r2, r1
 801a2a6:	e7a1      	b.n	801a1ec <__kernel_rem_pio2f+0x1cc>
 801a2a8:	3401      	adds	r4, #1
 801a2aa:	e7a6      	b.n	801a1fa <__kernel_rem_pio2f+0x1da>
 801a2ac:	ecf6 6a01 	vldmia	r6!, {s13}
 801a2b0:	ed3e 7a01 	vldmdb	lr!, {s14}
 801a2b4:	3401      	adds	r4, #1
 801a2b6:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a2ba:	e7c1      	b.n	801a240 <__kernel_rem_pio2f+0x220>
 801a2bc:	3c01      	subs	r4, #1
 801a2be:	ab06      	add	r3, sp, #24
 801a2c0:	3d08      	subs	r5, #8
 801a2c2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801a2c6:	2b00      	cmp	r3, #0
 801a2c8:	d0f8      	beq.n	801a2bc <__kernel_rem_pio2f+0x29c>
 801a2ca:	4628      	mov	r0, r5
 801a2cc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801a2d0:	f000 fc38 	bl	801ab44 <scalbnf>
 801a2d4:	00a3      	lsls	r3, r4, #2
 801a2d6:	aa42      	add	r2, sp, #264	; 0x108
 801a2d8:	3304      	adds	r3, #4
 801a2da:	ed9f 7a22 	vldr	s14, [pc, #136]	; 801a364 <__kernel_rem_pio2f+0x344>
 801a2de:	18d0      	adds	r0, r2, r3
 801a2e0:	4622      	mov	r2, r4
 801a2e2:	2a00      	cmp	r2, #0
 801a2e4:	da46      	bge.n	801a374 <__kernel_rem_pio2f+0x354>
 801a2e6:	f10d 0eb8 	add.w	lr, sp, #184	; 0xb8
 801a2ea:	2200      	movs	r2, #0
 801a2ec:	1aa5      	subs	r5, r4, r2
 801a2ee:	d460      	bmi.n	801a3b2 <__kernel_rem_pio2f+0x392>
 801a2f0:	a942      	add	r1, sp, #264	; 0x108
 801a2f2:	4f1e      	ldr	r7, [pc, #120]	; (801a36c <__kernel_rem_pio2f+0x34c>)
 801a2f4:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801a370 <__kernel_rem_pio2f+0x350>
 801a2f8:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 801a2fc:	2000      	movs	r0, #0
 801a2fe:	e050      	b.n	801a3a2 <__kernel_rem_pio2f+0x382>
 801a300:	4268      	negs	r0, r5
 801a302:	eeb0 0a48 	vmov.f32	s0, s16
 801a306:	f000 fc1d 	bl	801ab44 <scalbnf>
 801a30a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 801a368 <__kernel_rem_pio2f+0x348>
 801a30e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801a312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a316:	db19      	blt.n	801a34c <__kernel_rem_pio2f+0x32c>
 801a318:	eddf 7a12 	vldr	s15, [pc, #72]	; 801a364 <__kernel_rem_pio2f+0x344>
 801a31c:	ee60 7a27 	vmul.f32	s15, s0, s15
 801a320:	aa06      	add	r2, sp, #24
 801a322:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a326:	1c7c      	adds	r4, r7, #1
 801a328:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a32c:	3508      	adds	r5, #8
 801a32e:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801a332:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a336:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801a33a:	ee10 3a10 	vmov	r3, s0
 801a33e:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 801a342:	ee17 3a90 	vmov	r3, s15
 801a346:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801a34a:	e7be      	b.n	801a2ca <__kernel_rem_pio2f+0x2aa>
 801a34c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801a350:	aa06      	add	r2, sp, #24
 801a352:	ee10 3a10 	vmov	r3, s0
 801a356:	463c      	mov	r4, r7
 801a358:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 801a35c:	e7b5      	b.n	801a2ca <__kernel_rem_pio2f+0x2aa>
 801a35e:	bf00      	nop
 801a360:	0801df70 	.word	0x0801df70
 801a364:	3b800000 	.word	0x3b800000
 801a368:	43800000 	.word	0x43800000
 801a36c:	0801df44 	.word	0x0801df44
 801a370:	00000000 	.word	0x00000000
 801a374:	a906      	add	r1, sp, #24
 801a376:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801a37a:	9101      	str	r1, [sp, #4]
 801a37c:	ee07 1a90 	vmov	s15, r1
 801a380:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a384:	3a01      	subs	r2, #1
 801a386:	ee67 7a80 	vmul.f32	s15, s15, s0
 801a38a:	ee20 0a07 	vmul.f32	s0, s0, s14
 801a38e:	ed60 7a01 	vstmdb	r0!, {s15}
 801a392:	e7a6      	b.n	801a2e2 <__kernel_rem_pio2f+0x2c2>
 801a394:	ecf7 6a01 	vldmia	r7!, {s13}
 801a398:	ecb5 7a01 	vldmia	r5!, {s14}
 801a39c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a3a0:	3001      	adds	r0, #1
 801a3a2:	4550      	cmp	r0, sl
 801a3a4:	dc01      	bgt.n	801a3aa <__kernel_rem_pio2f+0x38a>
 801a3a6:	4290      	cmp	r0, r2
 801a3a8:	ddf4      	ble.n	801a394 <__kernel_rem_pio2f+0x374>
 801a3aa:	ecee 7a01 	vstmia	lr!, {s15}
 801a3ae:	3201      	adds	r2, #1
 801a3b0:	e79c      	b.n	801a2ec <__kernel_rem_pio2f+0x2cc>
 801a3b2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801a3b4:	2a03      	cmp	r2, #3
 801a3b6:	d843      	bhi.n	801a440 <__kernel_rem_pio2f+0x420>
 801a3b8:	e8df f002 	tbb	[pc, r2]
 801a3bc:	021d1d37 	.word	0x021d1d37
 801a3c0:	aa2e      	add	r2, sp, #184	; 0xb8
 801a3c2:	4413      	add	r3, r2
 801a3c4:	461a      	mov	r2, r3
 801a3c6:	4620      	mov	r0, r4
 801a3c8:	2800      	cmp	r0, #0
 801a3ca:	dc55      	bgt.n	801a478 <__kernel_rem_pio2f+0x458>
 801a3cc:	461a      	mov	r2, r3
 801a3ce:	4620      	mov	r0, r4
 801a3d0:	2801      	cmp	r0, #1
 801a3d2:	dc61      	bgt.n	801a498 <__kernel_rem_pio2f+0x478>
 801a3d4:	ed5f 7a1a 	vldr	s15, [pc, #-104]	; 801a370 <__kernel_rem_pio2f+0x350>
 801a3d8:	2c01      	cmp	r4, #1
 801a3da:	dc6d      	bgt.n	801a4b8 <__kernel_rem_pio2f+0x498>
 801a3dc:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 801a3e0:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 801a3e4:	2e00      	cmp	r6, #0
 801a3e6:	d16d      	bne.n	801a4c4 <__kernel_rem_pio2f+0x4a4>
 801a3e8:	edcb 6a00 	vstr	s13, [fp]
 801a3ec:	ed8b 7a01 	vstr	s14, [fp, #4]
 801a3f0:	edcb 7a02 	vstr	s15, [fp, #8]
 801a3f4:	e024      	b.n	801a440 <__kernel_rem_pio2f+0x420>
 801a3f6:	aa2e      	add	r2, sp, #184	; 0xb8
 801a3f8:	ed1f 7a23 	vldr	s14, [pc, #-140]	; 801a370 <__kernel_rem_pio2f+0x350>
 801a3fc:	4413      	add	r3, r2
 801a3fe:	4622      	mov	r2, r4
 801a400:	2a00      	cmp	r2, #0
 801a402:	da2a      	bge.n	801a45a <__kernel_rem_pio2f+0x43a>
 801a404:	b37e      	cbz	r6, 801a466 <__kernel_rem_pio2f+0x446>
 801a406:	eef1 7a47 	vneg.f32	s15, s14
 801a40a:	edcb 7a00 	vstr	s15, [fp]
 801a40e:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 801a412:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a416:	aa2f      	add	r2, sp, #188	; 0xbc
 801a418:	2301      	movs	r3, #1
 801a41a:	429c      	cmp	r4, r3
 801a41c:	da26      	bge.n	801a46c <__kernel_rem_pio2f+0x44c>
 801a41e:	b10e      	cbz	r6, 801a424 <__kernel_rem_pio2f+0x404>
 801a420:	eef1 7a67 	vneg.f32	s15, s15
 801a424:	edcb 7a01 	vstr	s15, [fp, #4]
 801a428:	e00a      	b.n	801a440 <__kernel_rem_pio2f+0x420>
 801a42a:	aa2e      	add	r2, sp, #184	; 0xb8
 801a42c:	ed5f 7a30 	vldr	s15, [pc, #-192]	; 801a370 <__kernel_rem_pio2f+0x350>
 801a430:	4413      	add	r3, r2
 801a432:	2c00      	cmp	r4, #0
 801a434:	da0b      	bge.n	801a44e <__kernel_rem_pio2f+0x42e>
 801a436:	b10e      	cbz	r6, 801a43c <__kernel_rem_pio2f+0x41c>
 801a438:	eef1 7a67 	vneg.f32	s15, s15
 801a43c:	edcb 7a00 	vstr	s15, [fp]
 801a440:	f009 0007 	and.w	r0, r9, #7
 801a444:	b057      	add	sp, #348	; 0x15c
 801a446:	ecbd 8b04 	vpop	{d8-d9}
 801a44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a44e:	ed33 7a01 	vldmdb	r3!, {s14}
 801a452:	3c01      	subs	r4, #1
 801a454:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a458:	e7eb      	b.n	801a432 <__kernel_rem_pio2f+0x412>
 801a45a:	ed73 7a01 	vldmdb	r3!, {s15}
 801a45e:	3a01      	subs	r2, #1
 801a460:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a464:	e7cc      	b.n	801a400 <__kernel_rem_pio2f+0x3e0>
 801a466:	eef0 7a47 	vmov.f32	s15, s14
 801a46a:	e7ce      	b.n	801a40a <__kernel_rem_pio2f+0x3ea>
 801a46c:	ecb2 7a01 	vldmia	r2!, {s14}
 801a470:	3301      	adds	r3, #1
 801a472:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a476:	e7d0      	b.n	801a41a <__kernel_rem_pio2f+0x3fa>
 801a478:	ed52 6a01 	vldr	s13, [r2, #-4]
 801a47c:	ed52 7a02 	vldr	s15, [r2, #-8]
 801a480:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801a484:	3801      	subs	r0, #1
 801a486:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a48a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a48e:	ed62 7a01 	vstmdb	r2!, {s15}
 801a492:	ed02 7a01 	vstr	s14, [r2, #-4]
 801a496:	e797      	b.n	801a3c8 <__kernel_rem_pio2f+0x3a8>
 801a498:	ed52 6a01 	vldr	s13, [r2, #-4]
 801a49c:	ed52 7a02 	vldr	s15, [r2, #-8]
 801a4a0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801a4a4:	3801      	subs	r0, #1
 801a4a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a4aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a4ae:	ed62 7a01 	vstmdb	r2!, {s15}
 801a4b2:	ed02 7a01 	vstr	s14, [r2, #-4]
 801a4b6:	e78b      	b.n	801a3d0 <__kernel_rem_pio2f+0x3b0>
 801a4b8:	ed33 7a01 	vldmdb	r3!, {s14}
 801a4bc:	3c01      	subs	r4, #1
 801a4be:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a4c2:	e789      	b.n	801a3d8 <__kernel_rem_pio2f+0x3b8>
 801a4c4:	eef1 6a66 	vneg.f32	s13, s13
 801a4c8:	eeb1 7a47 	vneg.f32	s14, s14
 801a4cc:	edcb 6a00 	vstr	s13, [fp]
 801a4d0:	ed8b 7a01 	vstr	s14, [fp, #4]
 801a4d4:	eef1 7a67 	vneg.f32	s15, s15
 801a4d8:	e78a      	b.n	801a3f0 <__kernel_rem_pio2f+0x3d0>
 801a4da:	bf00      	nop

0801a4dc <__kernel_sinf>:
 801a4dc:	ee10 3a10 	vmov	r3, s0
 801a4e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a4e4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801a4e8:	da04      	bge.n	801a4f4 <__kernel_sinf+0x18>
 801a4ea:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801a4ee:	ee17 3a90 	vmov	r3, s15
 801a4f2:	b35b      	cbz	r3, 801a54c <__kernel_sinf+0x70>
 801a4f4:	ee20 7a00 	vmul.f32	s14, s0, s0
 801a4f8:	eddf 7a15 	vldr	s15, [pc, #84]	; 801a550 <__kernel_sinf+0x74>
 801a4fc:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801a554 <__kernel_sinf+0x78>
 801a500:	eea7 6a27 	vfma.f32	s12, s14, s15
 801a504:	eddf 7a14 	vldr	s15, [pc, #80]	; 801a558 <__kernel_sinf+0x7c>
 801a508:	eee7 7a06 	vfma.f32	s15, s14, s12
 801a50c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801a55c <__kernel_sinf+0x80>
 801a510:	eea7 6a27 	vfma.f32	s12, s14, s15
 801a514:	eddf 7a12 	vldr	s15, [pc, #72]	; 801a560 <__kernel_sinf+0x84>
 801a518:	ee60 6a07 	vmul.f32	s13, s0, s14
 801a51c:	eee7 7a06 	vfma.f32	s15, s14, s12
 801a520:	b930      	cbnz	r0, 801a530 <__kernel_sinf+0x54>
 801a522:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801a564 <__kernel_sinf+0x88>
 801a526:	eea7 6a27 	vfma.f32	s12, s14, s15
 801a52a:	eea6 0a86 	vfma.f32	s0, s13, s12
 801a52e:	4770      	bx	lr
 801a530:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801a534:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801a538:	eee0 7a86 	vfma.f32	s15, s1, s12
 801a53c:	eed7 0a27 	vfnms.f32	s1, s14, s15
 801a540:	eddf 7a09 	vldr	s15, [pc, #36]	; 801a568 <__kernel_sinf+0x8c>
 801a544:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801a548:	ee30 0a60 	vsub.f32	s0, s0, s1
 801a54c:	4770      	bx	lr
 801a54e:	bf00      	nop
 801a550:	2f2ec9d3 	.word	0x2f2ec9d3
 801a554:	b2d72f34 	.word	0xb2d72f34
 801a558:	3638ef1b 	.word	0x3638ef1b
 801a55c:	b9500d01 	.word	0xb9500d01
 801a560:	3c088889 	.word	0x3c088889
 801a564:	be2aaaab 	.word	0xbe2aaaab
 801a568:	3e2aaaab 	.word	0x3e2aaaab

0801a56c <__kernel_tanf>:
 801a56c:	b508      	push	{r3, lr}
 801a56e:	ee10 3a10 	vmov	r3, s0
 801a572:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801a576:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 801a57a:	eef0 7a40 	vmov.f32	s15, s0
 801a57e:	da17      	bge.n	801a5b0 <__kernel_tanf+0x44>
 801a580:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 801a584:	ee17 1a10 	vmov	r1, s14
 801a588:	bb41      	cbnz	r1, 801a5dc <__kernel_tanf+0x70>
 801a58a:	1c43      	adds	r3, r0, #1
 801a58c:	4313      	orrs	r3, r2
 801a58e:	d108      	bne.n	801a5a2 <__kernel_tanf+0x36>
 801a590:	f000 fa8e 	bl	801aab0 <fabsf>
 801a594:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a598:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a59c:	eeb0 0a67 	vmov.f32	s0, s15
 801a5a0:	bd08      	pop	{r3, pc}
 801a5a2:	2801      	cmp	r0, #1
 801a5a4:	d0fa      	beq.n	801a59c <__kernel_tanf+0x30>
 801a5a6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801a5aa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a5ae:	e7f5      	b.n	801a59c <__kernel_tanf+0x30>
 801a5b0:	494e      	ldr	r1, [pc, #312]	; (801a6ec <__kernel_tanf+0x180>)
 801a5b2:	428a      	cmp	r2, r1
 801a5b4:	dd12      	ble.n	801a5dc <__kernel_tanf+0x70>
 801a5b6:	2b00      	cmp	r3, #0
 801a5b8:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 801a6f0 <__kernel_tanf+0x184>
 801a5bc:	bfb8      	it	lt
 801a5be:	eef1 7a40 	vneglt.f32	s15, s0
 801a5c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a5c6:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 801a6f4 <__kernel_tanf+0x188>
 801a5ca:	bfb8      	it	lt
 801a5cc:	eef1 0a60 	vneglt.f32	s1, s1
 801a5d0:	ee77 0a60 	vsub.f32	s1, s14, s1
 801a5d4:	ee70 7aa7 	vadd.f32	s15, s1, s15
 801a5d8:	eddf 0a47 	vldr	s1, [pc, #284]	; 801a6f8 <__kernel_tanf+0x18c>
 801a5dc:	eddf 5a47 	vldr	s11, [pc, #284]	; 801a6fc <__kernel_tanf+0x190>
 801a5e0:	ed9f 6a47 	vldr	s12, [pc, #284]	; 801a700 <__kernel_tanf+0x194>
 801a5e4:	ed9f 5a47 	vldr	s10, [pc, #284]	; 801a704 <__kernel_tanf+0x198>
 801a5e8:	4940      	ldr	r1, [pc, #256]	; (801a6ec <__kernel_tanf+0x180>)
 801a5ea:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801a5ee:	428a      	cmp	r2, r1
 801a5f0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801a5f4:	ee67 4aa6 	vmul.f32	s9, s15, s13
 801a5f8:	eea7 6a25 	vfma.f32	s12, s14, s11
 801a5fc:	eddf 5a42 	vldr	s11, [pc, #264]	; 801a708 <__kernel_tanf+0x19c>
 801a600:	eee7 5a06 	vfma.f32	s11, s14, s12
 801a604:	ed9f 6a41 	vldr	s12, [pc, #260]	; 801a70c <__kernel_tanf+0x1a0>
 801a608:	eea7 6a25 	vfma.f32	s12, s14, s11
 801a60c:	eddf 5a40 	vldr	s11, [pc, #256]	; 801a710 <__kernel_tanf+0x1a4>
 801a610:	eee7 5a06 	vfma.f32	s11, s14, s12
 801a614:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 801a714 <__kernel_tanf+0x1a8>
 801a618:	eea7 6a25 	vfma.f32	s12, s14, s11
 801a61c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 801a718 <__kernel_tanf+0x1ac>
 801a620:	eee7 5a05 	vfma.f32	s11, s14, s10
 801a624:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 801a71c <__kernel_tanf+0x1b0>
 801a628:	eea7 5a25 	vfma.f32	s10, s14, s11
 801a62c:	eddf 5a3c 	vldr	s11, [pc, #240]	; 801a720 <__kernel_tanf+0x1b4>
 801a630:	eee7 5a05 	vfma.f32	s11, s14, s10
 801a634:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 801a724 <__kernel_tanf+0x1b8>
 801a638:	eea7 5a25 	vfma.f32	s10, s14, s11
 801a63c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801a728 <__kernel_tanf+0x1bc>
 801a640:	eee7 5a05 	vfma.f32	s11, s14, s10
 801a644:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801a648:	eeb0 7a46 	vmov.f32	s14, s12
 801a64c:	eeb0 6a60 	vmov.f32	s12, s1
 801a650:	eea4 6a87 	vfma.f32	s12, s9, s14
 801a654:	ed9f 7a35 	vldr	s14, [pc, #212]	; 801a72c <__kernel_tanf+0x1c0>
 801a658:	eee6 0a86 	vfma.f32	s1, s13, s12
 801a65c:	eee4 0a87 	vfma.f32	s1, s9, s14
 801a660:	ee77 6aa0 	vadd.f32	s13, s15, s1
 801a664:	dd1d      	ble.n	801a6a2 <__kernel_tanf+0x136>
 801a666:	ee07 0a10 	vmov	s14, r0
 801a66a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a66e:	ee66 5aa6 	vmul.f32	s11, s13, s13
 801a672:	ee76 6a87 	vadd.f32	s13, s13, s14
 801a676:	179b      	asrs	r3, r3, #30
 801a678:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 801a67c:	f003 0302 	and.w	r3, r3, #2
 801a680:	f1c3 0301 	rsb	r3, r3, #1
 801a684:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801a688:	ee76 0a60 	vsub.f32	s1, s12, s1
 801a68c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801a690:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801a694:	ee07 3a90 	vmov	s15, r3
 801a698:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a69c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a6a0:	e77c      	b.n	801a59c <__kernel_tanf+0x30>
 801a6a2:	2801      	cmp	r0, #1
 801a6a4:	d01f      	beq.n	801a6e6 <__kernel_tanf+0x17a>
 801a6a6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801a6aa:	eec7 5a26 	vdiv.f32	s11, s14, s13
 801a6ae:	4b20      	ldr	r3, [pc, #128]	; (801a730 <__kernel_tanf+0x1c4>)
 801a6b0:	ee16 2a90 	vmov	r2, s13
 801a6b4:	401a      	ands	r2, r3
 801a6b6:	ee06 2a10 	vmov	s12, r2
 801a6ba:	ee15 2a90 	vmov	r2, s11
 801a6be:	4013      	ands	r3, r2
 801a6c0:	ee07 3a10 	vmov	s14, r3
 801a6c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a6c8:	eee6 6a07 	vfma.f32	s13, s12, s14
 801a6cc:	ee76 7a67 	vsub.f32	s15, s12, s15
 801a6d0:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801a6d4:	eef0 7a66 	vmov.f32	s15, s13
 801a6d8:	eee7 7a20 	vfma.f32	s15, s14, s1
 801a6dc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801a6e0:	eef0 7a47 	vmov.f32	s15, s14
 801a6e4:	e75a      	b.n	801a59c <__kernel_tanf+0x30>
 801a6e6:	eef0 7a66 	vmov.f32	s15, s13
 801a6ea:	e757      	b.n	801a59c <__kernel_tanf+0x30>
 801a6ec:	3f2ca13f 	.word	0x3f2ca13f
 801a6f0:	3f490fda 	.word	0x3f490fda
 801a6f4:	33222168 	.word	0x33222168
 801a6f8:	00000000 	.word	0x00000000
 801a6fc:	b79bae5f 	.word	0xb79bae5f
 801a700:	38a3f445 	.word	0x38a3f445
 801a704:	37d95384 	.word	0x37d95384
 801a708:	3a1a26c8 	.word	0x3a1a26c8
 801a70c:	3b6b6916 	.word	0x3b6b6916
 801a710:	3cb327a4 	.word	0x3cb327a4
 801a714:	3e088889 	.word	0x3e088889
 801a718:	3895c07a 	.word	0x3895c07a
 801a71c:	398137b9 	.word	0x398137b9
 801a720:	3abede48 	.word	0x3abede48
 801a724:	3c11371f 	.word	0x3c11371f
 801a728:	3d5d0dd1 	.word	0x3d5d0dd1
 801a72c:	3eaaaaab 	.word	0x3eaaaaab
 801a730:	fffff000 	.word	0xfffff000
 801a734:	00000000 	.word	0x00000000

0801a738 <atan>:
 801a738:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a73c:	ec55 4b10 	vmov	r4, r5, d0
 801a740:	4bc7      	ldr	r3, [pc, #796]	; (801aa60 <atan+0x328>)
 801a742:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801a746:	429e      	cmp	r6, r3
 801a748:	46ab      	mov	fp, r5
 801a74a:	dd18      	ble.n	801a77e <atan+0x46>
 801a74c:	4ac5      	ldr	r2, [pc, #788]	; (801aa64 <atan+0x32c>)
 801a74e:	4296      	cmp	r6, r2
 801a750:	dc01      	bgt.n	801a756 <atan+0x1e>
 801a752:	d109      	bne.n	801a768 <atan+0x30>
 801a754:	b144      	cbz	r4, 801a768 <atan+0x30>
 801a756:	4622      	mov	r2, r4
 801a758:	462b      	mov	r3, r5
 801a75a:	4620      	mov	r0, r4
 801a75c:	4629      	mov	r1, r5
 801a75e:	f7e5 fd9d 	bl	800029c <__adddf3>
 801a762:	4604      	mov	r4, r0
 801a764:	460d      	mov	r5, r1
 801a766:	e006      	b.n	801a776 <atan+0x3e>
 801a768:	f1bb 0f00 	cmp.w	fp, #0
 801a76c:	f300 813a 	bgt.w	801a9e4 <atan+0x2ac>
 801a770:	a59f      	add	r5, pc, #636	; (adr r5, 801a9f0 <atan+0x2b8>)
 801a772:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a776:	ec45 4b10 	vmov	d0, r4, r5
 801a77a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a77e:	4bba      	ldr	r3, [pc, #744]	; (801aa68 <atan+0x330>)
 801a780:	429e      	cmp	r6, r3
 801a782:	dc14      	bgt.n	801a7ae <atan+0x76>
 801a784:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801a788:	429e      	cmp	r6, r3
 801a78a:	dc0d      	bgt.n	801a7a8 <atan+0x70>
 801a78c:	a39a      	add	r3, pc, #616	; (adr r3, 801a9f8 <atan+0x2c0>)
 801a78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a792:	ee10 0a10 	vmov	r0, s0
 801a796:	4629      	mov	r1, r5
 801a798:	f7e5 fd80 	bl	800029c <__adddf3>
 801a79c:	2200      	movs	r2, #0
 801a79e:	4bb3      	ldr	r3, [pc, #716]	; (801aa6c <atan+0x334>)
 801a7a0:	f7e6 f9be 	bl	8000b20 <__aeabi_dcmpgt>
 801a7a4:	2800      	cmp	r0, #0
 801a7a6:	d1e6      	bne.n	801a776 <atan+0x3e>
 801a7a8:	f04f 3aff 	mov.w	sl, #4294967295
 801a7ac:	e02b      	b.n	801a806 <atan+0xce>
 801a7ae:	f000 f96b 	bl	801aa88 <fabs>
 801a7b2:	4baf      	ldr	r3, [pc, #700]	; (801aa70 <atan+0x338>)
 801a7b4:	429e      	cmp	r6, r3
 801a7b6:	ec55 4b10 	vmov	r4, r5, d0
 801a7ba:	f300 80bf 	bgt.w	801a93c <atan+0x204>
 801a7be:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801a7c2:	429e      	cmp	r6, r3
 801a7c4:	f300 80a0 	bgt.w	801a908 <atan+0x1d0>
 801a7c8:	ee10 2a10 	vmov	r2, s0
 801a7cc:	ee10 0a10 	vmov	r0, s0
 801a7d0:	462b      	mov	r3, r5
 801a7d2:	4629      	mov	r1, r5
 801a7d4:	f7e5 fd62 	bl	800029c <__adddf3>
 801a7d8:	2200      	movs	r2, #0
 801a7da:	4ba4      	ldr	r3, [pc, #656]	; (801aa6c <atan+0x334>)
 801a7dc:	f7e5 fd5c 	bl	8000298 <__aeabi_dsub>
 801a7e0:	2200      	movs	r2, #0
 801a7e2:	4606      	mov	r6, r0
 801a7e4:	460f      	mov	r7, r1
 801a7e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801a7ea:	4620      	mov	r0, r4
 801a7ec:	4629      	mov	r1, r5
 801a7ee:	f7e5 fd55 	bl	800029c <__adddf3>
 801a7f2:	4602      	mov	r2, r0
 801a7f4:	460b      	mov	r3, r1
 801a7f6:	4630      	mov	r0, r6
 801a7f8:	4639      	mov	r1, r7
 801a7fa:	f7e6 f82b 	bl	8000854 <__aeabi_ddiv>
 801a7fe:	f04f 0a00 	mov.w	sl, #0
 801a802:	4604      	mov	r4, r0
 801a804:	460d      	mov	r5, r1
 801a806:	4622      	mov	r2, r4
 801a808:	462b      	mov	r3, r5
 801a80a:	4620      	mov	r0, r4
 801a80c:	4629      	mov	r1, r5
 801a80e:	f7e5 fef7 	bl	8000600 <__aeabi_dmul>
 801a812:	4602      	mov	r2, r0
 801a814:	460b      	mov	r3, r1
 801a816:	4680      	mov	r8, r0
 801a818:	4689      	mov	r9, r1
 801a81a:	f7e5 fef1 	bl	8000600 <__aeabi_dmul>
 801a81e:	a378      	add	r3, pc, #480	; (adr r3, 801aa00 <atan+0x2c8>)
 801a820:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a824:	4606      	mov	r6, r0
 801a826:	460f      	mov	r7, r1
 801a828:	f7e5 feea 	bl	8000600 <__aeabi_dmul>
 801a82c:	a376      	add	r3, pc, #472	; (adr r3, 801aa08 <atan+0x2d0>)
 801a82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a832:	f7e5 fd33 	bl	800029c <__adddf3>
 801a836:	4632      	mov	r2, r6
 801a838:	463b      	mov	r3, r7
 801a83a:	f7e5 fee1 	bl	8000600 <__aeabi_dmul>
 801a83e:	a374      	add	r3, pc, #464	; (adr r3, 801aa10 <atan+0x2d8>)
 801a840:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a844:	f7e5 fd2a 	bl	800029c <__adddf3>
 801a848:	4632      	mov	r2, r6
 801a84a:	463b      	mov	r3, r7
 801a84c:	f7e5 fed8 	bl	8000600 <__aeabi_dmul>
 801a850:	a371      	add	r3, pc, #452	; (adr r3, 801aa18 <atan+0x2e0>)
 801a852:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a856:	f7e5 fd21 	bl	800029c <__adddf3>
 801a85a:	4632      	mov	r2, r6
 801a85c:	463b      	mov	r3, r7
 801a85e:	f7e5 fecf 	bl	8000600 <__aeabi_dmul>
 801a862:	a36f      	add	r3, pc, #444	; (adr r3, 801aa20 <atan+0x2e8>)
 801a864:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a868:	f7e5 fd18 	bl	800029c <__adddf3>
 801a86c:	4632      	mov	r2, r6
 801a86e:	463b      	mov	r3, r7
 801a870:	f7e5 fec6 	bl	8000600 <__aeabi_dmul>
 801a874:	a36c      	add	r3, pc, #432	; (adr r3, 801aa28 <atan+0x2f0>)
 801a876:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a87a:	f7e5 fd0f 	bl	800029c <__adddf3>
 801a87e:	4642      	mov	r2, r8
 801a880:	464b      	mov	r3, r9
 801a882:	f7e5 febd 	bl	8000600 <__aeabi_dmul>
 801a886:	a36a      	add	r3, pc, #424	; (adr r3, 801aa30 <atan+0x2f8>)
 801a888:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a88c:	4680      	mov	r8, r0
 801a88e:	4689      	mov	r9, r1
 801a890:	4630      	mov	r0, r6
 801a892:	4639      	mov	r1, r7
 801a894:	f7e5 feb4 	bl	8000600 <__aeabi_dmul>
 801a898:	a367      	add	r3, pc, #412	; (adr r3, 801aa38 <atan+0x300>)
 801a89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a89e:	f7e5 fcfb 	bl	8000298 <__aeabi_dsub>
 801a8a2:	4632      	mov	r2, r6
 801a8a4:	463b      	mov	r3, r7
 801a8a6:	f7e5 feab 	bl	8000600 <__aeabi_dmul>
 801a8aa:	a365      	add	r3, pc, #404	; (adr r3, 801aa40 <atan+0x308>)
 801a8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8b0:	f7e5 fcf2 	bl	8000298 <__aeabi_dsub>
 801a8b4:	4632      	mov	r2, r6
 801a8b6:	463b      	mov	r3, r7
 801a8b8:	f7e5 fea2 	bl	8000600 <__aeabi_dmul>
 801a8bc:	a362      	add	r3, pc, #392	; (adr r3, 801aa48 <atan+0x310>)
 801a8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8c2:	f7e5 fce9 	bl	8000298 <__aeabi_dsub>
 801a8c6:	4632      	mov	r2, r6
 801a8c8:	463b      	mov	r3, r7
 801a8ca:	f7e5 fe99 	bl	8000600 <__aeabi_dmul>
 801a8ce:	a360      	add	r3, pc, #384	; (adr r3, 801aa50 <atan+0x318>)
 801a8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8d4:	f7e5 fce0 	bl	8000298 <__aeabi_dsub>
 801a8d8:	4632      	mov	r2, r6
 801a8da:	463b      	mov	r3, r7
 801a8dc:	f7e5 fe90 	bl	8000600 <__aeabi_dmul>
 801a8e0:	f1ba 3fff 	cmp.w	sl, #4294967295
 801a8e4:	4602      	mov	r2, r0
 801a8e6:	460b      	mov	r3, r1
 801a8e8:	d155      	bne.n	801a996 <atan+0x25e>
 801a8ea:	4640      	mov	r0, r8
 801a8ec:	4649      	mov	r1, r9
 801a8ee:	f7e5 fcd5 	bl	800029c <__adddf3>
 801a8f2:	4622      	mov	r2, r4
 801a8f4:	462b      	mov	r3, r5
 801a8f6:	f7e5 fe83 	bl	8000600 <__aeabi_dmul>
 801a8fa:	4602      	mov	r2, r0
 801a8fc:	460b      	mov	r3, r1
 801a8fe:	4620      	mov	r0, r4
 801a900:	4629      	mov	r1, r5
 801a902:	f7e5 fcc9 	bl	8000298 <__aeabi_dsub>
 801a906:	e72c      	b.n	801a762 <atan+0x2a>
 801a908:	ee10 0a10 	vmov	r0, s0
 801a90c:	2200      	movs	r2, #0
 801a90e:	4b57      	ldr	r3, [pc, #348]	; (801aa6c <atan+0x334>)
 801a910:	4629      	mov	r1, r5
 801a912:	f7e5 fcc1 	bl	8000298 <__aeabi_dsub>
 801a916:	2200      	movs	r2, #0
 801a918:	4606      	mov	r6, r0
 801a91a:	460f      	mov	r7, r1
 801a91c:	4b53      	ldr	r3, [pc, #332]	; (801aa6c <atan+0x334>)
 801a91e:	4620      	mov	r0, r4
 801a920:	4629      	mov	r1, r5
 801a922:	f7e5 fcbb 	bl	800029c <__adddf3>
 801a926:	4602      	mov	r2, r0
 801a928:	460b      	mov	r3, r1
 801a92a:	4630      	mov	r0, r6
 801a92c:	4639      	mov	r1, r7
 801a92e:	f7e5 ff91 	bl	8000854 <__aeabi_ddiv>
 801a932:	f04f 0a01 	mov.w	sl, #1
 801a936:	4604      	mov	r4, r0
 801a938:	460d      	mov	r5, r1
 801a93a:	e764      	b.n	801a806 <atan+0xce>
 801a93c:	4b4d      	ldr	r3, [pc, #308]	; (801aa74 <atan+0x33c>)
 801a93e:	429e      	cmp	r6, r3
 801a940:	dc1d      	bgt.n	801a97e <atan+0x246>
 801a942:	ee10 0a10 	vmov	r0, s0
 801a946:	2200      	movs	r2, #0
 801a948:	4b4b      	ldr	r3, [pc, #300]	; (801aa78 <atan+0x340>)
 801a94a:	4629      	mov	r1, r5
 801a94c:	f7e5 fca4 	bl	8000298 <__aeabi_dsub>
 801a950:	2200      	movs	r2, #0
 801a952:	4606      	mov	r6, r0
 801a954:	460f      	mov	r7, r1
 801a956:	4b48      	ldr	r3, [pc, #288]	; (801aa78 <atan+0x340>)
 801a958:	4620      	mov	r0, r4
 801a95a:	4629      	mov	r1, r5
 801a95c:	f7e5 fe50 	bl	8000600 <__aeabi_dmul>
 801a960:	2200      	movs	r2, #0
 801a962:	4b42      	ldr	r3, [pc, #264]	; (801aa6c <atan+0x334>)
 801a964:	f7e5 fc9a 	bl	800029c <__adddf3>
 801a968:	4602      	mov	r2, r0
 801a96a:	460b      	mov	r3, r1
 801a96c:	4630      	mov	r0, r6
 801a96e:	4639      	mov	r1, r7
 801a970:	f7e5 ff70 	bl	8000854 <__aeabi_ddiv>
 801a974:	f04f 0a02 	mov.w	sl, #2
 801a978:	4604      	mov	r4, r0
 801a97a:	460d      	mov	r5, r1
 801a97c:	e743      	b.n	801a806 <atan+0xce>
 801a97e:	462b      	mov	r3, r5
 801a980:	ee10 2a10 	vmov	r2, s0
 801a984:	2000      	movs	r0, #0
 801a986:	493d      	ldr	r1, [pc, #244]	; (801aa7c <atan+0x344>)
 801a988:	f7e5 ff64 	bl	8000854 <__aeabi_ddiv>
 801a98c:	f04f 0a03 	mov.w	sl, #3
 801a990:	4604      	mov	r4, r0
 801a992:	460d      	mov	r5, r1
 801a994:	e737      	b.n	801a806 <atan+0xce>
 801a996:	4640      	mov	r0, r8
 801a998:	4649      	mov	r1, r9
 801a99a:	f7e5 fc7f 	bl	800029c <__adddf3>
 801a99e:	4622      	mov	r2, r4
 801a9a0:	462b      	mov	r3, r5
 801a9a2:	f7e5 fe2d 	bl	8000600 <__aeabi_dmul>
 801a9a6:	4e36      	ldr	r6, [pc, #216]	; (801aa80 <atan+0x348>)
 801a9a8:	4b36      	ldr	r3, [pc, #216]	; (801aa84 <atan+0x34c>)
 801a9aa:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801a9ae:	4456      	add	r6, sl
 801a9b0:	449a      	add	sl, r3
 801a9b2:	e9da 2300 	ldrd	r2, r3, [sl]
 801a9b6:	f7e5 fc6f 	bl	8000298 <__aeabi_dsub>
 801a9ba:	4622      	mov	r2, r4
 801a9bc:	462b      	mov	r3, r5
 801a9be:	f7e5 fc6b 	bl	8000298 <__aeabi_dsub>
 801a9c2:	4602      	mov	r2, r0
 801a9c4:	460b      	mov	r3, r1
 801a9c6:	e9d6 0100 	ldrd	r0, r1, [r6]
 801a9ca:	f7e5 fc65 	bl	8000298 <__aeabi_dsub>
 801a9ce:	f1bb 0f00 	cmp.w	fp, #0
 801a9d2:	4604      	mov	r4, r0
 801a9d4:	460d      	mov	r5, r1
 801a9d6:	f6bf aece 	bge.w	801a776 <atan+0x3e>
 801a9da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a9de:	4604      	mov	r4, r0
 801a9e0:	461d      	mov	r5, r3
 801a9e2:	e6c8      	b.n	801a776 <atan+0x3e>
 801a9e4:	a51c      	add	r5, pc, #112	; (adr r5, 801aa58 <atan+0x320>)
 801a9e6:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a9ea:	e6c4      	b.n	801a776 <atan+0x3e>
 801a9ec:	f3af 8000 	nop.w
 801a9f0:	54442d18 	.word	0x54442d18
 801a9f4:	bff921fb 	.word	0xbff921fb
 801a9f8:	8800759c 	.word	0x8800759c
 801a9fc:	7e37e43c 	.word	0x7e37e43c
 801aa00:	e322da11 	.word	0xe322da11
 801aa04:	3f90ad3a 	.word	0x3f90ad3a
 801aa08:	24760deb 	.word	0x24760deb
 801aa0c:	3fa97b4b 	.word	0x3fa97b4b
 801aa10:	a0d03d51 	.word	0xa0d03d51
 801aa14:	3fb10d66 	.word	0x3fb10d66
 801aa18:	c54c206e 	.word	0xc54c206e
 801aa1c:	3fb745cd 	.word	0x3fb745cd
 801aa20:	920083ff 	.word	0x920083ff
 801aa24:	3fc24924 	.word	0x3fc24924
 801aa28:	5555550d 	.word	0x5555550d
 801aa2c:	3fd55555 	.word	0x3fd55555
 801aa30:	2c6a6c2f 	.word	0x2c6a6c2f
 801aa34:	bfa2b444 	.word	0xbfa2b444
 801aa38:	52defd9a 	.word	0x52defd9a
 801aa3c:	3fadde2d 	.word	0x3fadde2d
 801aa40:	af749a6d 	.word	0xaf749a6d
 801aa44:	3fb3b0f2 	.word	0x3fb3b0f2
 801aa48:	fe231671 	.word	0xfe231671
 801aa4c:	3fbc71c6 	.word	0x3fbc71c6
 801aa50:	9998ebc4 	.word	0x9998ebc4
 801aa54:	3fc99999 	.word	0x3fc99999
 801aa58:	54442d18 	.word	0x54442d18
 801aa5c:	3ff921fb 	.word	0x3ff921fb
 801aa60:	440fffff 	.word	0x440fffff
 801aa64:	7ff00000 	.word	0x7ff00000
 801aa68:	3fdbffff 	.word	0x3fdbffff
 801aa6c:	3ff00000 	.word	0x3ff00000
 801aa70:	3ff2ffff 	.word	0x3ff2ffff
 801aa74:	40037fff 	.word	0x40037fff
 801aa78:	3ff80000 	.word	0x3ff80000
 801aa7c:	bff00000 	.word	0xbff00000
 801aa80:	0801df80 	.word	0x0801df80
 801aa84:	0801dfa0 	.word	0x0801dfa0

0801aa88 <fabs>:
 801aa88:	ec53 2b10 	vmov	r2, r3, d0
 801aa8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801aa90:	ec43 2b10 	vmov	d0, r2, r3
 801aa94:	4770      	bx	lr

0801aa96 <matherr>:
 801aa96:	2000      	movs	r0, #0
 801aa98:	4770      	bx	lr
 801aa9a:	0000      	movs	r0, r0
 801aa9c:	0000      	movs	r0, r0
	...

0801aaa0 <nan>:
 801aaa0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801aaa8 <nan+0x8>
 801aaa4:	4770      	bx	lr
 801aaa6:	bf00      	nop
 801aaa8:	00000000 	.word	0x00000000
 801aaac:	7ff80000 	.word	0x7ff80000

0801aab0 <fabsf>:
 801aab0:	ee10 3a10 	vmov	r3, s0
 801aab4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801aab8:	ee00 3a10 	vmov	s0, r3
 801aabc:	4770      	bx	lr
	...

0801aac0 <floorf>:
 801aac0:	ee10 3a10 	vmov	r3, s0
 801aac4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801aac8:	0dca      	lsrs	r2, r1, #23
 801aaca:	3a7f      	subs	r2, #127	; 0x7f
 801aacc:	2a16      	cmp	r2, #22
 801aace:	dc2a      	bgt.n	801ab26 <floorf+0x66>
 801aad0:	2a00      	cmp	r2, #0
 801aad2:	da11      	bge.n	801aaf8 <floorf+0x38>
 801aad4:	eddf 7a18 	vldr	s15, [pc, #96]	; 801ab38 <floorf+0x78>
 801aad8:	ee30 0a27 	vadd.f32	s0, s0, s15
 801aadc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801aae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aae4:	dd05      	ble.n	801aaf2 <floorf+0x32>
 801aae6:	2b00      	cmp	r3, #0
 801aae8:	da23      	bge.n	801ab32 <floorf+0x72>
 801aaea:	4a14      	ldr	r2, [pc, #80]	; (801ab3c <floorf+0x7c>)
 801aaec:	2900      	cmp	r1, #0
 801aaee:	bf18      	it	ne
 801aaf0:	4613      	movne	r3, r2
 801aaf2:	ee00 3a10 	vmov	s0, r3
 801aaf6:	4770      	bx	lr
 801aaf8:	4911      	ldr	r1, [pc, #68]	; (801ab40 <floorf+0x80>)
 801aafa:	4111      	asrs	r1, r2
 801aafc:	420b      	tst	r3, r1
 801aafe:	d0fa      	beq.n	801aaf6 <floorf+0x36>
 801ab00:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801ab38 <floorf+0x78>
 801ab04:	ee30 0a27 	vadd.f32	s0, s0, s15
 801ab08:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801ab0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab10:	ddef      	ble.n	801aaf2 <floorf+0x32>
 801ab12:	2b00      	cmp	r3, #0
 801ab14:	bfbe      	ittt	lt
 801ab16:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801ab1a:	fa40 f202 	asrlt.w	r2, r0, r2
 801ab1e:	189b      	addlt	r3, r3, r2
 801ab20:	ea23 0301 	bic.w	r3, r3, r1
 801ab24:	e7e5      	b.n	801aaf2 <floorf+0x32>
 801ab26:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801ab2a:	d3e4      	bcc.n	801aaf6 <floorf+0x36>
 801ab2c:	ee30 0a00 	vadd.f32	s0, s0, s0
 801ab30:	4770      	bx	lr
 801ab32:	2300      	movs	r3, #0
 801ab34:	e7dd      	b.n	801aaf2 <floorf+0x32>
 801ab36:	bf00      	nop
 801ab38:	7149f2ca 	.word	0x7149f2ca
 801ab3c:	bf800000 	.word	0xbf800000
 801ab40:	007fffff 	.word	0x007fffff

0801ab44 <scalbnf>:
 801ab44:	b508      	push	{r3, lr}
 801ab46:	ee10 2a10 	vmov	r2, s0
 801ab4a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 801ab4e:	ed2d 8b02 	vpush	{d8}
 801ab52:	eef0 0a40 	vmov.f32	s1, s0
 801ab56:	d004      	beq.n	801ab62 <scalbnf+0x1e>
 801ab58:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801ab5c:	d306      	bcc.n	801ab6c <scalbnf+0x28>
 801ab5e:	ee70 0a00 	vadd.f32	s1, s0, s0
 801ab62:	ecbd 8b02 	vpop	{d8}
 801ab66:	eeb0 0a60 	vmov.f32	s0, s1
 801ab6a:	bd08      	pop	{r3, pc}
 801ab6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801ab70:	d21c      	bcs.n	801abac <scalbnf+0x68>
 801ab72:	4b1f      	ldr	r3, [pc, #124]	; (801abf0 <scalbnf+0xac>)
 801ab74:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801abf4 <scalbnf+0xb0>
 801ab78:	4298      	cmp	r0, r3
 801ab7a:	ee60 0a27 	vmul.f32	s1, s0, s15
 801ab7e:	db10      	blt.n	801aba2 <scalbnf+0x5e>
 801ab80:	ee10 2a90 	vmov	r2, s1
 801ab84:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 801ab88:	3b19      	subs	r3, #25
 801ab8a:	4403      	add	r3, r0
 801ab8c:	2bfe      	cmp	r3, #254	; 0xfe
 801ab8e:	dd0f      	ble.n	801abb0 <scalbnf+0x6c>
 801ab90:	ed9f 8a19 	vldr	s16, [pc, #100]	; 801abf8 <scalbnf+0xb4>
 801ab94:	eeb0 0a48 	vmov.f32	s0, s16
 801ab98:	f000 f834 	bl	801ac04 <copysignf>
 801ab9c:	ee60 0a08 	vmul.f32	s1, s0, s16
 801aba0:	e7df      	b.n	801ab62 <scalbnf+0x1e>
 801aba2:	eddf 7a16 	vldr	s15, [pc, #88]	; 801abfc <scalbnf+0xb8>
 801aba6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801abaa:	e7da      	b.n	801ab62 <scalbnf+0x1e>
 801abac:	0ddb      	lsrs	r3, r3, #23
 801abae:	e7ec      	b.n	801ab8a <scalbnf+0x46>
 801abb0:	2b00      	cmp	r3, #0
 801abb2:	dd06      	ble.n	801abc2 <scalbnf+0x7e>
 801abb4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801abb8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801abbc:	ee00 3a90 	vmov	s1, r3
 801abc0:	e7cf      	b.n	801ab62 <scalbnf+0x1e>
 801abc2:	f113 0f16 	cmn.w	r3, #22
 801abc6:	da06      	bge.n	801abd6 <scalbnf+0x92>
 801abc8:	f24c 3350 	movw	r3, #50000	; 0xc350
 801abcc:	4298      	cmp	r0, r3
 801abce:	dcdf      	bgt.n	801ab90 <scalbnf+0x4c>
 801abd0:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 801abfc <scalbnf+0xb8>
 801abd4:	e7de      	b.n	801ab94 <scalbnf+0x50>
 801abd6:	3319      	adds	r3, #25
 801abd8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801abdc:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801abe0:	eddf 7a07 	vldr	s15, [pc, #28]	; 801ac00 <scalbnf+0xbc>
 801abe4:	ee07 3a10 	vmov	s14, r3
 801abe8:	ee67 0a27 	vmul.f32	s1, s14, s15
 801abec:	e7b9      	b.n	801ab62 <scalbnf+0x1e>
 801abee:	bf00      	nop
 801abf0:	ffff3cb0 	.word	0xffff3cb0
 801abf4:	4c000000 	.word	0x4c000000
 801abf8:	7149f2ca 	.word	0x7149f2ca
 801abfc:	0da24260 	.word	0x0da24260
 801ac00:	33000000 	.word	0x33000000

0801ac04 <copysignf>:
 801ac04:	ee10 3a10 	vmov	r3, s0
 801ac08:	ee10 2a90 	vmov	r2, s1
 801ac0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ac10:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 801ac14:	4313      	orrs	r3, r2
 801ac16:	ee00 3a10 	vmov	s0, r3
 801ac1a:	4770      	bx	lr

0801ac1c <__errno>:
 801ac1c:	4b01      	ldr	r3, [pc, #4]	; (801ac24 <__errno+0x8>)
 801ac1e:	6818      	ldr	r0, [r3, #0]
 801ac20:	4770      	bx	lr
 801ac22:	bf00      	nop
 801ac24:	200014a4 	.word	0x200014a4

0801ac28 <__sflush_r>:
 801ac28:	898a      	ldrh	r2, [r1, #12]
 801ac2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac2e:	4605      	mov	r5, r0
 801ac30:	0710      	lsls	r0, r2, #28
 801ac32:	460c      	mov	r4, r1
 801ac34:	d45a      	bmi.n	801acec <__sflush_r+0xc4>
 801ac36:	684b      	ldr	r3, [r1, #4]
 801ac38:	2b00      	cmp	r3, #0
 801ac3a:	dc05      	bgt.n	801ac48 <__sflush_r+0x20>
 801ac3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ac3e:	2b00      	cmp	r3, #0
 801ac40:	dc02      	bgt.n	801ac48 <__sflush_r+0x20>
 801ac42:	2000      	movs	r0, #0
 801ac44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ac48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ac4a:	2e00      	cmp	r6, #0
 801ac4c:	d0f9      	beq.n	801ac42 <__sflush_r+0x1a>
 801ac4e:	2300      	movs	r3, #0
 801ac50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ac54:	682f      	ldr	r7, [r5, #0]
 801ac56:	602b      	str	r3, [r5, #0]
 801ac58:	d033      	beq.n	801acc2 <__sflush_r+0x9a>
 801ac5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ac5c:	89a3      	ldrh	r3, [r4, #12]
 801ac5e:	075a      	lsls	r2, r3, #29
 801ac60:	d505      	bpl.n	801ac6e <__sflush_r+0x46>
 801ac62:	6863      	ldr	r3, [r4, #4]
 801ac64:	1ac0      	subs	r0, r0, r3
 801ac66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ac68:	b10b      	cbz	r3, 801ac6e <__sflush_r+0x46>
 801ac6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ac6c:	1ac0      	subs	r0, r0, r3
 801ac6e:	2300      	movs	r3, #0
 801ac70:	4602      	mov	r2, r0
 801ac72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ac74:	6a21      	ldr	r1, [r4, #32]
 801ac76:	4628      	mov	r0, r5
 801ac78:	47b0      	blx	r6
 801ac7a:	1c43      	adds	r3, r0, #1
 801ac7c:	89a3      	ldrh	r3, [r4, #12]
 801ac7e:	d106      	bne.n	801ac8e <__sflush_r+0x66>
 801ac80:	6829      	ldr	r1, [r5, #0]
 801ac82:	291d      	cmp	r1, #29
 801ac84:	d84b      	bhi.n	801ad1e <__sflush_r+0xf6>
 801ac86:	4a2b      	ldr	r2, [pc, #172]	; (801ad34 <__sflush_r+0x10c>)
 801ac88:	40ca      	lsrs	r2, r1
 801ac8a:	07d6      	lsls	r6, r2, #31
 801ac8c:	d547      	bpl.n	801ad1e <__sflush_r+0xf6>
 801ac8e:	2200      	movs	r2, #0
 801ac90:	6062      	str	r2, [r4, #4]
 801ac92:	04d9      	lsls	r1, r3, #19
 801ac94:	6922      	ldr	r2, [r4, #16]
 801ac96:	6022      	str	r2, [r4, #0]
 801ac98:	d504      	bpl.n	801aca4 <__sflush_r+0x7c>
 801ac9a:	1c42      	adds	r2, r0, #1
 801ac9c:	d101      	bne.n	801aca2 <__sflush_r+0x7a>
 801ac9e:	682b      	ldr	r3, [r5, #0]
 801aca0:	b903      	cbnz	r3, 801aca4 <__sflush_r+0x7c>
 801aca2:	6560      	str	r0, [r4, #84]	; 0x54
 801aca4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801aca6:	602f      	str	r7, [r5, #0]
 801aca8:	2900      	cmp	r1, #0
 801acaa:	d0ca      	beq.n	801ac42 <__sflush_r+0x1a>
 801acac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801acb0:	4299      	cmp	r1, r3
 801acb2:	d002      	beq.n	801acba <__sflush_r+0x92>
 801acb4:	4628      	mov	r0, r5
 801acb6:	f000 f96b 	bl	801af90 <_free_r>
 801acba:	2000      	movs	r0, #0
 801acbc:	6360      	str	r0, [r4, #52]	; 0x34
 801acbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801acc2:	6a21      	ldr	r1, [r4, #32]
 801acc4:	2301      	movs	r3, #1
 801acc6:	4628      	mov	r0, r5
 801acc8:	47b0      	blx	r6
 801acca:	1c41      	adds	r1, r0, #1
 801accc:	d1c6      	bne.n	801ac5c <__sflush_r+0x34>
 801acce:	682b      	ldr	r3, [r5, #0]
 801acd0:	2b00      	cmp	r3, #0
 801acd2:	d0c3      	beq.n	801ac5c <__sflush_r+0x34>
 801acd4:	2b1d      	cmp	r3, #29
 801acd6:	d001      	beq.n	801acdc <__sflush_r+0xb4>
 801acd8:	2b16      	cmp	r3, #22
 801acda:	d101      	bne.n	801ace0 <__sflush_r+0xb8>
 801acdc:	602f      	str	r7, [r5, #0]
 801acde:	e7b0      	b.n	801ac42 <__sflush_r+0x1a>
 801ace0:	89a3      	ldrh	r3, [r4, #12]
 801ace2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ace6:	81a3      	strh	r3, [r4, #12]
 801ace8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801acec:	690f      	ldr	r7, [r1, #16]
 801acee:	2f00      	cmp	r7, #0
 801acf0:	d0a7      	beq.n	801ac42 <__sflush_r+0x1a>
 801acf2:	0793      	lsls	r3, r2, #30
 801acf4:	680e      	ldr	r6, [r1, #0]
 801acf6:	bf08      	it	eq
 801acf8:	694b      	ldreq	r3, [r1, #20]
 801acfa:	600f      	str	r7, [r1, #0]
 801acfc:	bf18      	it	ne
 801acfe:	2300      	movne	r3, #0
 801ad00:	eba6 0807 	sub.w	r8, r6, r7
 801ad04:	608b      	str	r3, [r1, #8]
 801ad06:	f1b8 0f00 	cmp.w	r8, #0
 801ad0a:	dd9a      	ble.n	801ac42 <__sflush_r+0x1a>
 801ad0c:	4643      	mov	r3, r8
 801ad0e:	463a      	mov	r2, r7
 801ad10:	6a21      	ldr	r1, [r4, #32]
 801ad12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ad14:	4628      	mov	r0, r5
 801ad16:	47b0      	blx	r6
 801ad18:	2800      	cmp	r0, #0
 801ad1a:	dc07      	bgt.n	801ad2c <__sflush_r+0x104>
 801ad1c:	89a3      	ldrh	r3, [r4, #12]
 801ad1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ad22:	81a3      	strh	r3, [r4, #12]
 801ad24:	f04f 30ff 	mov.w	r0, #4294967295
 801ad28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad2c:	4407      	add	r7, r0
 801ad2e:	eba8 0800 	sub.w	r8, r8, r0
 801ad32:	e7e8      	b.n	801ad06 <__sflush_r+0xde>
 801ad34:	20400001 	.word	0x20400001

0801ad38 <_fflush_r>:
 801ad38:	b538      	push	{r3, r4, r5, lr}
 801ad3a:	690b      	ldr	r3, [r1, #16]
 801ad3c:	4605      	mov	r5, r0
 801ad3e:	460c      	mov	r4, r1
 801ad40:	b1db      	cbz	r3, 801ad7a <_fflush_r+0x42>
 801ad42:	b118      	cbz	r0, 801ad4c <_fflush_r+0x14>
 801ad44:	6983      	ldr	r3, [r0, #24]
 801ad46:	b90b      	cbnz	r3, 801ad4c <_fflush_r+0x14>
 801ad48:	f000 f860 	bl	801ae0c <__sinit>
 801ad4c:	4b0c      	ldr	r3, [pc, #48]	; (801ad80 <_fflush_r+0x48>)
 801ad4e:	429c      	cmp	r4, r3
 801ad50:	d109      	bne.n	801ad66 <_fflush_r+0x2e>
 801ad52:	686c      	ldr	r4, [r5, #4]
 801ad54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ad58:	b17b      	cbz	r3, 801ad7a <_fflush_r+0x42>
 801ad5a:	4621      	mov	r1, r4
 801ad5c:	4628      	mov	r0, r5
 801ad5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ad62:	f7ff bf61 	b.w	801ac28 <__sflush_r>
 801ad66:	4b07      	ldr	r3, [pc, #28]	; (801ad84 <_fflush_r+0x4c>)
 801ad68:	429c      	cmp	r4, r3
 801ad6a:	d101      	bne.n	801ad70 <_fflush_r+0x38>
 801ad6c:	68ac      	ldr	r4, [r5, #8]
 801ad6e:	e7f1      	b.n	801ad54 <_fflush_r+0x1c>
 801ad70:	4b05      	ldr	r3, [pc, #20]	; (801ad88 <_fflush_r+0x50>)
 801ad72:	429c      	cmp	r4, r3
 801ad74:	bf08      	it	eq
 801ad76:	68ec      	ldreq	r4, [r5, #12]
 801ad78:	e7ec      	b.n	801ad54 <_fflush_r+0x1c>
 801ad7a:	2000      	movs	r0, #0
 801ad7c:	bd38      	pop	{r3, r4, r5, pc}
 801ad7e:	bf00      	nop
 801ad80:	0801dfe0 	.word	0x0801dfe0
 801ad84:	0801e000 	.word	0x0801e000
 801ad88:	0801dfc0 	.word	0x0801dfc0

0801ad8c <_cleanup_r>:
 801ad8c:	4901      	ldr	r1, [pc, #4]	; (801ad94 <_cleanup_r+0x8>)
 801ad8e:	f000 b8a9 	b.w	801aee4 <_fwalk_reent>
 801ad92:	bf00      	nop
 801ad94:	0801ad39 	.word	0x0801ad39

0801ad98 <std.isra.0>:
 801ad98:	2300      	movs	r3, #0
 801ad9a:	b510      	push	{r4, lr}
 801ad9c:	4604      	mov	r4, r0
 801ad9e:	6003      	str	r3, [r0, #0]
 801ada0:	6043      	str	r3, [r0, #4]
 801ada2:	6083      	str	r3, [r0, #8]
 801ada4:	8181      	strh	r1, [r0, #12]
 801ada6:	6643      	str	r3, [r0, #100]	; 0x64
 801ada8:	81c2      	strh	r2, [r0, #14]
 801adaa:	6103      	str	r3, [r0, #16]
 801adac:	6143      	str	r3, [r0, #20]
 801adae:	6183      	str	r3, [r0, #24]
 801adb0:	4619      	mov	r1, r3
 801adb2:	2208      	movs	r2, #8
 801adb4:	305c      	adds	r0, #92	; 0x5c
 801adb6:	f000 f8e2 	bl	801af7e <memset>
 801adba:	4b05      	ldr	r3, [pc, #20]	; (801add0 <std.isra.0+0x38>)
 801adbc:	6263      	str	r3, [r4, #36]	; 0x24
 801adbe:	4b05      	ldr	r3, [pc, #20]	; (801add4 <std.isra.0+0x3c>)
 801adc0:	62a3      	str	r3, [r4, #40]	; 0x28
 801adc2:	4b05      	ldr	r3, [pc, #20]	; (801add8 <std.isra.0+0x40>)
 801adc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 801adc6:	4b05      	ldr	r3, [pc, #20]	; (801addc <std.isra.0+0x44>)
 801adc8:	6224      	str	r4, [r4, #32]
 801adca:	6323      	str	r3, [r4, #48]	; 0x30
 801adcc:	bd10      	pop	{r4, pc}
 801adce:	bf00      	nop
 801add0:	0801bc35 	.word	0x0801bc35
 801add4:	0801bc57 	.word	0x0801bc57
 801add8:	0801bc8f 	.word	0x0801bc8f
 801addc:	0801bcb3 	.word	0x0801bcb3

0801ade0 <__sfmoreglue>:
 801ade0:	b570      	push	{r4, r5, r6, lr}
 801ade2:	1e4a      	subs	r2, r1, #1
 801ade4:	2568      	movs	r5, #104	; 0x68
 801ade6:	4355      	muls	r5, r2
 801ade8:	460e      	mov	r6, r1
 801adea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801adee:	f000 f91d 	bl	801b02c <_malloc_r>
 801adf2:	4604      	mov	r4, r0
 801adf4:	b140      	cbz	r0, 801ae08 <__sfmoreglue+0x28>
 801adf6:	2100      	movs	r1, #0
 801adf8:	e880 0042 	stmia.w	r0, {r1, r6}
 801adfc:	300c      	adds	r0, #12
 801adfe:	60a0      	str	r0, [r4, #8]
 801ae00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801ae04:	f000 f8bb 	bl	801af7e <memset>
 801ae08:	4620      	mov	r0, r4
 801ae0a:	bd70      	pop	{r4, r5, r6, pc}

0801ae0c <__sinit>:
 801ae0c:	6983      	ldr	r3, [r0, #24]
 801ae0e:	b510      	push	{r4, lr}
 801ae10:	4604      	mov	r4, r0
 801ae12:	bb33      	cbnz	r3, 801ae62 <__sinit+0x56>
 801ae14:	6483      	str	r3, [r0, #72]	; 0x48
 801ae16:	64c3      	str	r3, [r0, #76]	; 0x4c
 801ae18:	6503      	str	r3, [r0, #80]	; 0x50
 801ae1a:	4b12      	ldr	r3, [pc, #72]	; (801ae64 <__sinit+0x58>)
 801ae1c:	4a12      	ldr	r2, [pc, #72]	; (801ae68 <__sinit+0x5c>)
 801ae1e:	681b      	ldr	r3, [r3, #0]
 801ae20:	6282      	str	r2, [r0, #40]	; 0x28
 801ae22:	4298      	cmp	r0, r3
 801ae24:	bf04      	itt	eq
 801ae26:	2301      	moveq	r3, #1
 801ae28:	6183      	streq	r3, [r0, #24]
 801ae2a:	f000 f81f 	bl	801ae6c <__sfp>
 801ae2e:	6060      	str	r0, [r4, #4]
 801ae30:	4620      	mov	r0, r4
 801ae32:	f000 f81b 	bl	801ae6c <__sfp>
 801ae36:	60a0      	str	r0, [r4, #8]
 801ae38:	4620      	mov	r0, r4
 801ae3a:	f000 f817 	bl	801ae6c <__sfp>
 801ae3e:	2200      	movs	r2, #0
 801ae40:	60e0      	str	r0, [r4, #12]
 801ae42:	2104      	movs	r1, #4
 801ae44:	6860      	ldr	r0, [r4, #4]
 801ae46:	f7ff ffa7 	bl	801ad98 <std.isra.0>
 801ae4a:	2201      	movs	r2, #1
 801ae4c:	2109      	movs	r1, #9
 801ae4e:	68a0      	ldr	r0, [r4, #8]
 801ae50:	f7ff ffa2 	bl	801ad98 <std.isra.0>
 801ae54:	2202      	movs	r2, #2
 801ae56:	2112      	movs	r1, #18
 801ae58:	68e0      	ldr	r0, [r4, #12]
 801ae5a:	f7ff ff9d 	bl	801ad98 <std.isra.0>
 801ae5e:	2301      	movs	r3, #1
 801ae60:	61a3      	str	r3, [r4, #24]
 801ae62:	bd10      	pop	{r4, pc}
 801ae64:	0801e020 	.word	0x0801e020
 801ae68:	0801ad8d 	.word	0x0801ad8d

0801ae6c <__sfp>:
 801ae6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae6e:	4b1c      	ldr	r3, [pc, #112]	; (801aee0 <__sfp+0x74>)
 801ae70:	681e      	ldr	r6, [r3, #0]
 801ae72:	69b3      	ldr	r3, [r6, #24]
 801ae74:	4607      	mov	r7, r0
 801ae76:	b913      	cbnz	r3, 801ae7e <__sfp+0x12>
 801ae78:	4630      	mov	r0, r6
 801ae7a:	f7ff ffc7 	bl	801ae0c <__sinit>
 801ae7e:	3648      	adds	r6, #72	; 0x48
 801ae80:	68b4      	ldr	r4, [r6, #8]
 801ae82:	6873      	ldr	r3, [r6, #4]
 801ae84:	3b01      	subs	r3, #1
 801ae86:	d503      	bpl.n	801ae90 <__sfp+0x24>
 801ae88:	6833      	ldr	r3, [r6, #0]
 801ae8a:	b133      	cbz	r3, 801ae9a <__sfp+0x2e>
 801ae8c:	6836      	ldr	r6, [r6, #0]
 801ae8e:	e7f7      	b.n	801ae80 <__sfp+0x14>
 801ae90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801ae94:	b16d      	cbz	r5, 801aeb2 <__sfp+0x46>
 801ae96:	3468      	adds	r4, #104	; 0x68
 801ae98:	e7f4      	b.n	801ae84 <__sfp+0x18>
 801ae9a:	2104      	movs	r1, #4
 801ae9c:	4638      	mov	r0, r7
 801ae9e:	f7ff ff9f 	bl	801ade0 <__sfmoreglue>
 801aea2:	6030      	str	r0, [r6, #0]
 801aea4:	2800      	cmp	r0, #0
 801aea6:	d1f1      	bne.n	801ae8c <__sfp+0x20>
 801aea8:	230c      	movs	r3, #12
 801aeaa:	603b      	str	r3, [r7, #0]
 801aeac:	4604      	mov	r4, r0
 801aeae:	4620      	mov	r0, r4
 801aeb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aeb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aeb6:	81e3      	strh	r3, [r4, #14]
 801aeb8:	2301      	movs	r3, #1
 801aeba:	81a3      	strh	r3, [r4, #12]
 801aebc:	6665      	str	r5, [r4, #100]	; 0x64
 801aebe:	6025      	str	r5, [r4, #0]
 801aec0:	60a5      	str	r5, [r4, #8]
 801aec2:	6065      	str	r5, [r4, #4]
 801aec4:	6125      	str	r5, [r4, #16]
 801aec6:	6165      	str	r5, [r4, #20]
 801aec8:	61a5      	str	r5, [r4, #24]
 801aeca:	2208      	movs	r2, #8
 801aecc:	4629      	mov	r1, r5
 801aece:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801aed2:	f000 f854 	bl	801af7e <memset>
 801aed6:	6365      	str	r5, [r4, #52]	; 0x34
 801aed8:	63a5      	str	r5, [r4, #56]	; 0x38
 801aeda:	64a5      	str	r5, [r4, #72]	; 0x48
 801aedc:	64e5      	str	r5, [r4, #76]	; 0x4c
 801aede:	e7e6      	b.n	801aeae <__sfp+0x42>
 801aee0:	0801e020 	.word	0x0801e020

0801aee4 <_fwalk_reent>:
 801aee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801aee8:	4680      	mov	r8, r0
 801aeea:	4689      	mov	r9, r1
 801aeec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801aef0:	2600      	movs	r6, #0
 801aef2:	b914      	cbnz	r4, 801aefa <_fwalk_reent+0x16>
 801aef4:	4630      	mov	r0, r6
 801aef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801aefa:	68a5      	ldr	r5, [r4, #8]
 801aefc:	6867      	ldr	r7, [r4, #4]
 801aefe:	3f01      	subs	r7, #1
 801af00:	d501      	bpl.n	801af06 <_fwalk_reent+0x22>
 801af02:	6824      	ldr	r4, [r4, #0]
 801af04:	e7f5      	b.n	801aef2 <_fwalk_reent+0xe>
 801af06:	89ab      	ldrh	r3, [r5, #12]
 801af08:	2b01      	cmp	r3, #1
 801af0a:	d907      	bls.n	801af1c <_fwalk_reent+0x38>
 801af0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801af10:	3301      	adds	r3, #1
 801af12:	d003      	beq.n	801af1c <_fwalk_reent+0x38>
 801af14:	4629      	mov	r1, r5
 801af16:	4640      	mov	r0, r8
 801af18:	47c8      	blx	r9
 801af1a:	4306      	orrs	r6, r0
 801af1c:	3568      	adds	r5, #104	; 0x68
 801af1e:	e7ee      	b.n	801aefe <_fwalk_reent+0x1a>

0801af20 <__libc_init_array>:
 801af20:	b570      	push	{r4, r5, r6, lr}
 801af22:	4e0d      	ldr	r6, [pc, #52]	; (801af58 <__libc_init_array+0x38>)
 801af24:	4c0d      	ldr	r4, [pc, #52]	; (801af5c <__libc_init_array+0x3c>)
 801af26:	1ba4      	subs	r4, r4, r6
 801af28:	10a4      	asrs	r4, r4, #2
 801af2a:	2500      	movs	r5, #0
 801af2c:	42a5      	cmp	r5, r4
 801af2e:	d109      	bne.n	801af44 <__libc_init_array+0x24>
 801af30:	4e0b      	ldr	r6, [pc, #44]	; (801af60 <__libc_init_array+0x40>)
 801af32:	4c0c      	ldr	r4, [pc, #48]	; (801af64 <__libc_init_array+0x44>)
 801af34:	f002 fb1a 	bl	801d56c <_init>
 801af38:	1ba4      	subs	r4, r4, r6
 801af3a:	10a4      	asrs	r4, r4, #2
 801af3c:	2500      	movs	r5, #0
 801af3e:	42a5      	cmp	r5, r4
 801af40:	d105      	bne.n	801af4e <__libc_init_array+0x2e>
 801af42:	bd70      	pop	{r4, r5, r6, pc}
 801af44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801af48:	4798      	blx	r3
 801af4a:	3501      	adds	r5, #1
 801af4c:	e7ee      	b.n	801af2c <__libc_init_array+0xc>
 801af4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801af52:	4798      	blx	r3
 801af54:	3501      	adds	r5, #1
 801af56:	e7f2      	b.n	801af3e <__libc_init_array+0x1e>
 801af58:	0801e288 	.word	0x0801e288
 801af5c:	0801e288 	.word	0x0801e288
 801af60:	0801e288 	.word	0x0801e288
 801af64:	0801e28c 	.word	0x0801e28c

0801af68 <memcpy>:
 801af68:	b510      	push	{r4, lr}
 801af6a:	1e43      	subs	r3, r0, #1
 801af6c:	440a      	add	r2, r1
 801af6e:	4291      	cmp	r1, r2
 801af70:	d100      	bne.n	801af74 <memcpy+0xc>
 801af72:	bd10      	pop	{r4, pc}
 801af74:	f811 4b01 	ldrb.w	r4, [r1], #1
 801af78:	f803 4f01 	strb.w	r4, [r3, #1]!
 801af7c:	e7f7      	b.n	801af6e <memcpy+0x6>

0801af7e <memset>:
 801af7e:	4402      	add	r2, r0
 801af80:	4603      	mov	r3, r0
 801af82:	4293      	cmp	r3, r2
 801af84:	d100      	bne.n	801af88 <memset+0xa>
 801af86:	4770      	bx	lr
 801af88:	f803 1b01 	strb.w	r1, [r3], #1
 801af8c:	e7f9      	b.n	801af82 <memset+0x4>
	...

0801af90 <_free_r>:
 801af90:	b538      	push	{r3, r4, r5, lr}
 801af92:	4605      	mov	r5, r0
 801af94:	2900      	cmp	r1, #0
 801af96:	d045      	beq.n	801b024 <_free_r+0x94>
 801af98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801af9c:	1f0c      	subs	r4, r1, #4
 801af9e:	2b00      	cmp	r3, #0
 801afa0:	bfb8      	it	lt
 801afa2:	18e4      	addlt	r4, r4, r3
 801afa4:	f001 fe6e 	bl	801cc84 <__malloc_lock>
 801afa8:	4a1f      	ldr	r2, [pc, #124]	; (801b028 <_free_r+0x98>)
 801afaa:	6813      	ldr	r3, [r2, #0]
 801afac:	4610      	mov	r0, r2
 801afae:	b933      	cbnz	r3, 801afbe <_free_r+0x2e>
 801afb0:	6063      	str	r3, [r4, #4]
 801afb2:	6014      	str	r4, [r2, #0]
 801afb4:	4628      	mov	r0, r5
 801afb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801afba:	f001 be64 	b.w	801cc86 <__malloc_unlock>
 801afbe:	42a3      	cmp	r3, r4
 801afc0:	d90c      	bls.n	801afdc <_free_r+0x4c>
 801afc2:	6821      	ldr	r1, [r4, #0]
 801afc4:	1862      	adds	r2, r4, r1
 801afc6:	4293      	cmp	r3, r2
 801afc8:	bf04      	itt	eq
 801afca:	681a      	ldreq	r2, [r3, #0]
 801afcc:	685b      	ldreq	r3, [r3, #4]
 801afce:	6063      	str	r3, [r4, #4]
 801afd0:	bf04      	itt	eq
 801afd2:	1852      	addeq	r2, r2, r1
 801afd4:	6022      	streq	r2, [r4, #0]
 801afd6:	6004      	str	r4, [r0, #0]
 801afd8:	e7ec      	b.n	801afb4 <_free_r+0x24>
 801afda:	4613      	mov	r3, r2
 801afdc:	685a      	ldr	r2, [r3, #4]
 801afde:	b10a      	cbz	r2, 801afe4 <_free_r+0x54>
 801afe0:	42a2      	cmp	r2, r4
 801afe2:	d9fa      	bls.n	801afda <_free_r+0x4a>
 801afe4:	6819      	ldr	r1, [r3, #0]
 801afe6:	1858      	adds	r0, r3, r1
 801afe8:	42a0      	cmp	r0, r4
 801afea:	d10b      	bne.n	801b004 <_free_r+0x74>
 801afec:	6820      	ldr	r0, [r4, #0]
 801afee:	4401      	add	r1, r0
 801aff0:	1858      	adds	r0, r3, r1
 801aff2:	4282      	cmp	r2, r0
 801aff4:	6019      	str	r1, [r3, #0]
 801aff6:	d1dd      	bne.n	801afb4 <_free_r+0x24>
 801aff8:	6810      	ldr	r0, [r2, #0]
 801affa:	6852      	ldr	r2, [r2, #4]
 801affc:	605a      	str	r2, [r3, #4]
 801affe:	4401      	add	r1, r0
 801b000:	6019      	str	r1, [r3, #0]
 801b002:	e7d7      	b.n	801afb4 <_free_r+0x24>
 801b004:	d902      	bls.n	801b00c <_free_r+0x7c>
 801b006:	230c      	movs	r3, #12
 801b008:	602b      	str	r3, [r5, #0]
 801b00a:	e7d3      	b.n	801afb4 <_free_r+0x24>
 801b00c:	6820      	ldr	r0, [r4, #0]
 801b00e:	1821      	adds	r1, r4, r0
 801b010:	428a      	cmp	r2, r1
 801b012:	bf04      	itt	eq
 801b014:	6811      	ldreq	r1, [r2, #0]
 801b016:	6852      	ldreq	r2, [r2, #4]
 801b018:	6062      	str	r2, [r4, #4]
 801b01a:	bf04      	itt	eq
 801b01c:	1809      	addeq	r1, r1, r0
 801b01e:	6021      	streq	r1, [r4, #0]
 801b020:	605c      	str	r4, [r3, #4]
 801b022:	e7c7      	b.n	801afb4 <_free_r+0x24>
 801b024:	bd38      	pop	{r3, r4, r5, pc}
 801b026:	bf00      	nop
 801b028:	200026f8 	.word	0x200026f8

0801b02c <_malloc_r>:
 801b02c:	b570      	push	{r4, r5, r6, lr}
 801b02e:	1ccd      	adds	r5, r1, #3
 801b030:	f025 0503 	bic.w	r5, r5, #3
 801b034:	3508      	adds	r5, #8
 801b036:	2d0c      	cmp	r5, #12
 801b038:	bf38      	it	cc
 801b03a:	250c      	movcc	r5, #12
 801b03c:	2d00      	cmp	r5, #0
 801b03e:	4606      	mov	r6, r0
 801b040:	db01      	blt.n	801b046 <_malloc_r+0x1a>
 801b042:	42a9      	cmp	r1, r5
 801b044:	d903      	bls.n	801b04e <_malloc_r+0x22>
 801b046:	230c      	movs	r3, #12
 801b048:	6033      	str	r3, [r6, #0]
 801b04a:	2000      	movs	r0, #0
 801b04c:	bd70      	pop	{r4, r5, r6, pc}
 801b04e:	f001 fe19 	bl	801cc84 <__malloc_lock>
 801b052:	4a23      	ldr	r2, [pc, #140]	; (801b0e0 <_malloc_r+0xb4>)
 801b054:	6814      	ldr	r4, [r2, #0]
 801b056:	4621      	mov	r1, r4
 801b058:	b991      	cbnz	r1, 801b080 <_malloc_r+0x54>
 801b05a:	4c22      	ldr	r4, [pc, #136]	; (801b0e4 <_malloc_r+0xb8>)
 801b05c:	6823      	ldr	r3, [r4, #0]
 801b05e:	b91b      	cbnz	r3, 801b068 <_malloc_r+0x3c>
 801b060:	4630      	mov	r0, r6
 801b062:	f000 fd29 	bl	801bab8 <_sbrk_r>
 801b066:	6020      	str	r0, [r4, #0]
 801b068:	4629      	mov	r1, r5
 801b06a:	4630      	mov	r0, r6
 801b06c:	f000 fd24 	bl	801bab8 <_sbrk_r>
 801b070:	1c43      	adds	r3, r0, #1
 801b072:	d126      	bne.n	801b0c2 <_malloc_r+0x96>
 801b074:	230c      	movs	r3, #12
 801b076:	6033      	str	r3, [r6, #0]
 801b078:	4630      	mov	r0, r6
 801b07a:	f001 fe04 	bl	801cc86 <__malloc_unlock>
 801b07e:	e7e4      	b.n	801b04a <_malloc_r+0x1e>
 801b080:	680b      	ldr	r3, [r1, #0]
 801b082:	1b5b      	subs	r3, r3, r5
 801b084:	d41a      	bmi.n	801b0bc <_malloc_r+0x90>
 801b086:	2b0b      	cmp	r3, #11
 801b088:	d90f      	bls.n	801b0aa <_malloc_r+0x7e>
 801b08a:	600b      	str	r3, [r1, #0]
 801b08c:	50cd      	str	r5, [r1, r3]
 801b08e:	18cc      	adds	r4, r1, r3
 801b090:	4630      	mov	r0, r6
 801b092:	f001 fdf8 	bl	801cc86 <__malloc_unlock>
 801b096:	f104 000b 	add.w	r0, r4, #11
 801b09a:	1d23      	adds	r3, r4, #4
 801b09c:	f020 0007 	bic.w	r0, r0, #7
 801b0a0:	1ac3      	subs	r3, r0, r3
 801b0a2:	d01b      	beq.n	801b0dc <_malloc_r+0xb0>
 801b0a4:	425a      	negs	r2, r3
 801b0a6:	50e2      	str	r2, [r4, r3]
 801b0a8:	bd70      	pop	{r4, r5, r6, pc}
 801b0aa:	428c      	cmp	r4, r1
 801b0ac:	bf0d      	iteet	eq
 801b0ae:	6863      	ldreq	r3, [r4, #4]
 801b0b0:	684b      	ldrne	r3, [r1, #4]
 801b0b2:	6063      	strne	r3, [r4, #4]
 801b0b4:	6013      	streq	r3, [r2, #0]
 801b0b6:	bf18      	it	ne
 801b0b8:	460c      	movne	r4, r1
 801b0ba:	e7e9      	b.n	801b090 <_malloc_r+0x64>
 801b0bc:	460c      	mov	r4, r1
 801b0be:	6849      	ldr	r1, [r1, #4]
 801b0c0:	e7ca      	b.n	801b058 <_malloc_r+0x2c>
 801b0c2:	1cc4      	adds	r4, r0, #3
 801b0c4:	f024 0403 	bic.w	r4, r4, #3
 801b0c8:	42a0      	cmp	r0, r4
 801b0ca:	d005      	beq.n	801b0d8 <_malloc_r+0xac>
 801b0cc:	1a21      	subs	r1, r4, r0
 801b0ce:	4630      	mov	r0, r6
 801b0d0:	f000 fcf2 	bl	801bab8 <_sbrk_r>
 801b0d4:	3001      	adds	r0, #1
 801b0d6:	d0cd      	beq.n	801b074 <_malloc_r+0x48>
 801b0d8:	6025      	str	r5, [r4, #0]
 801b0da:	e7d9      	b.n	801b090 <_malloc_r+0x64>
 801b0dc:	bd70      	pop	{r4, r5, r6, pc}
 801b0de:	bf00      	nop
 801b0e0:	200026f8 	.word	0x200026f8
 801b0e4:	200026fc 	.word	0x200026fc

0801b0e8 <__cvt>:
 801b0e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b0ec:	ec55 4b10 	vmov	r4, r5, d0
 801b0f0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801b0f2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801b0f6:	2d00      	cmp	r5, #0
 801b0f8:	460e      	mov	r6, r1
 801b0fa:	4691      	mov	r9, r2
 801b0fc:	4619      	mov	r1, r3
 801b0fe:	bfb8      	it	lt
 801b100:	4622      	movlt	r2, r4
 801b102:	462b      	mov	r3, r5
 801b104:	f027 0720 	bic.w	r7, r7, #32
 801b108:	bfbb      	ittet	lt
 801b10a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801b10e:	461d      	movlt	r5, r3
 801b110:	2300      	movge	r3, #0
 801b112:	232d      	movlt	r3, #45	; 0x2d
 801b114:	bfb8      	it	lt
 801b116:	4614      	movlt	r4, r2
 801b118:	2f46      	cmp	r7, #70	; 0x46
 801b11a:	700b      	strb	r3, [r1, #0]
 801b11c:	d004      	beq.n	801b128 <__cvt+0x40>
 801b11e:	2f45      	cmp	r7, #69	; 0x45
 801b120:	d100      	bne.n	801b124 <__cvt+0x3c>
 801b122:	3601      	adds	r6, #1
 801b124:	2102      	movs	r1, #2
 801b126:	e000      	b.n	801b12a <__cvt+0x42>
 801b128:	2103      	movs	r1, #3
 801b12a:	ab03      	add	r3, sp, #12
 801b12c:	9301      	str	r3, [sp, #4]
 801b12e:	ab02      	add	r3, sp, #8
 801b130:	9300      	str	r3, [sp, #0]
 801b132:	4632      	mov	r2, r6
 801b134:	4653      	mov	r3, sl
 801b136:	ec45 4b10 	vmov	d0, r4, r5
 801b13a:	f000 ff49 	bl	801bfd0 <_dtoa_r>
 801b13e:	2f47      	cmp	r7, #71	; 0x47
 801b140:	4680      	mov	r8, r0
 801b142:	d102      	bne.n	801b14a <__cvt+0x62>
 801b144:	f019 0f01 	tst.w	r9, #1
 801b148:	d026      	beq.n	801b198 <__cvt+0xb0>
 801b14a:	2f46      	cmp	r7, #70	; 0x46
 801b14c:	eb08 0906 	add.w	r9, r8, r6
 801b150:	d111      	bne.n	801b176 <__cvt+0x8e>
 801b152:	f898 3000 	ldrb.w	r3, [r8]
 801b156:	2b30      	cmp	r3, #48	; 0x30
 801b158:	d10a      	bne.n	801b170 <__cvt+0x88>
 801b15a:	2200      	movs	r2, #0
 801b15c:	2300      	movs	r3, #0
 801b15e:	4620      	mov	r0, r4
 801b160:	4629      	mov	r1, r5
 801b162:	f7e5 fcb5 	bl	8000ad0 <__aeabi_dcmpeq>
 801b166:	b918      	cbnz	r0, 801b170 <__cvt+0x88>
 801b168:	f1c6 0601 	rsb	r6, r6, #1
 801b16c:	f8ca 6000 	str.w	r6, [sl]
 801b170:	f8da 3000 	ldr.w	r3, [sl]
 801b174:	4499      	add	r9, r3
 801b176:	2200      	movs	r2, #0
 801b178:	2300      	movs	r3, #0
 801b17a:	4620      	mov	r0, r4
 801b17c:	4629      	mov	r1, r5
 801b17e:	f7e5 fca7 	bl	8000ad0 <__aeabi_dcmpeq>
 801b182:	b938      	cbnz	r0, 801b194 <__cvt+0xac>
 801b184:	2230      	movs	r2, #48	; 0x30
 801b186:	9b03      	ldr	r3, [sp, #12]
 801b188:	4599      	cmp	r9, r3
 801b18a:	d905      	bls.n	801b198 <__cvt+0xb0>
 801b18c:	1c59      	adds	r1, r3, #1
 801b18e:	9103      	str	r1, [sp, #12]
 801b190:	701a      	strb	r2, [r3, #0]
 801b192:	e7f8      	b.n	801b186 <__cvt+0x9e>
 801b194:	f8cd 900c 	str.w	r9, [sp, #12]
 801b198:	9b03      	ldr	r3, [sp, #12]
 801b19a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b19c:	eba3 0308 	sub.w	r3, r3, r8
 801b1a0:	4640      	mov	r0, r8
 801b1a2:	6013      	str	r3, [r2, #0]
 801b1a4:	b004      	add	sp, #16
 801b1a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801b1aa <__exponent>:
 801b1aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b1ac:	4603      	mov	r3, r0
 801b1ae:	2900      	cmp	r1, #0
 801b1b0:	bfb8      	it	lt
 801b1b2:	4249      	neglt	r1, r1
 801b1b4:	f803 2b02 	strb.w	r2, [r3], #2
 801b1b8:	bfb4      	ite	lt
 801b1ba:	222d      	movlt	r2, #45	; 0x2d
 801b1bc:	222b      	movge	r2, #43	; 0x2b
 801b1be:	2909      	cmp	r1, #9
 801b1c0:	7042      	strb	r2, [r0, #1]
 801b1c2:	dd20      	ble.n	801b206 <__exponent+0x5c>
 801b1c4:	f10d 0207 	add.w	r2, sp, #7
 801b1c8:	4617      	mov	r7, r2
 801b1ca:	260a      	movs	r6, #10
 801b1cc:	fb91 f5f6 	sdiv	r5, r1, r6
 801b1d0:	fb06 1115 	mls	r1, r6, r5, r1
 801b1d4:	3130      	adds	r1, #48	; 0x30
 801b1d6:	2d09      	cmp	r5, #9
 801b1d8:	f802 1c01 	strb.w	r1, [r2, #-1]
 801b1dc:	f102 34ff 	add.w	r4, r2, #4294967295
 801b1e0:	4629      	mov	r1, r5
 801b1e2:	dc09      	bgt.n	801b1f8 <__exponent+0x4e>
 801b1e4:	3130      	adds	r1, #48	; 0x30
 801b1e6:	3a02      	subs	r2, #2
 801b1e8:	f804 1c01 	strb.w	r1, [r4, #-1]
 801b1ec:	42ba      	cmp	r2, r7
 801b1ee:	461c      	mov	r4, r3
 801b1f0:	d304      	bcc.n	801b1fc <__exponent+0x52>
 801b1f2:	1a20      	subs	r0, r4, r0
 801b1f4:	b003      	add	sp, #12
 801b1f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b1f8:	4622      	mov	r2, r4
 801b1fa:	e7e7      	b.n	801b1cc <__exponent+0x22>
 801b1fc:	f812 1b01 	ldrb.w	r1, [r2], #1
 801b200:	f803 1b01 	strb.w	r1, [r3], #1
 801b204:	e7f2      	b.n	801b1ec <__exponent+0x42>
 801b206:	2230      	movs	r2, #48	; 0x30
 801b208:	461c      	mov	r4, r3
 801b20a:	4411      	add	r1, r2
 801b20c:	f804 2b02 	strb.w	r2, [r4], #2
 801b210:	7059      	strb	r1, [r3, #1]
 801b212:	e7ee      	b.n	801b1f2 <__exponent+0x48>

0801b214 <_printf_float>:
 801b214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b218:	b08d      	sub	sp, #52	; 0x34
 801b21a:	460c      	mov	r4, r1
 801b21c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801b220:	4616      	mov	r6, r2
 801b222:	461f      	mov	r7, r3
 801b224:	4605      	mov	r5, r0
 801b226:	f001 fca1 	bl	801cb6c <_localeconv_r>
 801b22a:	6803      	ldr	r3, [r0, #0]
 801b22c:	9304      	str	r3, [sp, #16]
 801b22e:	4618      	mov	r0, r3
 801b230:	f7e4 ffd6 	bl	80001e0 <strlen>
 801b234:	2300      	movs	r3, #0
 801b236:	930a      	str	r3, [sp, #40]	; 0x28
 801b238:	f8d8 3000 	ldr.w	r3, [r8]
 801b23c:	9005      	str	r0, [sp, #20]
 801b23e:	3307      	adds	r3, #7
 801b240:	f023 0307 	bic.w	r3, r3, #7
 801b244:	f103 0208 	add.w	r2, r3, #8
 801b248:	f894 a018 	ldrb.w	sl, [r4, #24]
 801b24c:	f8d4 b000 	ldr.w	fp, [r4]
 801b250:	f8c8 2000 	str.w	r2, [r8]
 801b254:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b258:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801b25c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801b260:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801b264:	9307      	str	r3, [sp, #28]
 801b266:	f8cd 8018 	str.w	r8, [sp, #24]
 801b26a:	f04f 32ff 	mov.w	r2, #4294967295
 801b26e:	4ba5      	ldr	r3, [pc, #660]	; (801b504 <_printf_float+0x2f0>)
 801b270:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b274:	f7e5 fc5e 	bl	8000b34 <__aeabi_dcmpun>
 801b278:	2800      	cmp	r0, #0
 801b27a:	f040 81fb 	bne.w	801b674 <_printf_float+0x460>
 801b27e:	f04f 32ff 	mov.w	r2, #4294967295
 801b282:	4ba0      	ldr	r3, [pc, #640]	; (801b504 <_printf_float+0x2f0>)
 801b284:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b288:	f7e5 fc36 	bl	8000af8 <__aeabi_dcmple>
 801b28c:	2800      	cmp	r0, #0
 801b28e:	f040 81f1 	bne.w	801b674 <_printf_float+0x460>
 801b292:	2200      	movs	r2, #0
 801b294:	2300      	movs	r3, #0
 801b296:	4640      	mov	r0, r8
 801b298:	4649      	mov	r1, r9
 801b29a:	f7e5 fc23 	bl	8000ae4 <__aeabi_dcmplt>
 801b29e:	b110      	cbz	r0, 801b2a6 <_printf_float+0x92>
 801b2a0:	232d      	movs	r3, #45	; 0x2d
 801b2a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b2a6:	4b98      	ldr	r3, [pc, #608]	; (801b508 <_printf_float+0x2f4>)
 801b2a8:	4a98      	ldr	r2, [pc, #608]	; (801b50c <_printf_float+0x2f8>)
 801b2aa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801b2ae:	bf8c      	ite	hi
 801b2b0:	4690      	movhi	r8, r2
 801b2b2:	4698      	movls	r8, r3
 801b2b4:	2303      	movs	r3, #3
 801b2b6:	f02b 0204 	bic.w	r2, fp, #4
 801b2ba:	6123      	str	r3, [r4, #16]
 801b2bc:	6022      	str	r2, [r4, #0]
 801b2be:	f04f 0900 	mov.w	r9, #0
 801b2c2:	9700      	str	r7, [sp, #0]
 801b2c4:	4633      	mov	r3, r6
 801b2c6:	aa0b      	add	r2, sp, #44	; 0x2c
 801b2c8:	4621      	mov	r1, r4
 801b2ca:	4628      	mov	r0, r5
 801b2cc:	f000 f9e2 	bl	801b694 <_printf_common>
 801b2d0:	3001      	adds	r0, #1
 801b2d2:	f040 8093 	bne.w	801b3fc <_printf_float+0x1e8>
 801b2d6:	f04f 30ff 	mov.w	r0, #4294967295
 801b2da:	b00d      	add	sp, #52	; 0x34
 801b2dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b2e0:	6861      	ldr	r1, [r4, #4]
 801b2e2:	1c4b      	adds	r3, r1, #1
 801b2e4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 801b2e8:	d13f      	bne.n	801b36a <_printf_float+0x156>
 801b2ea:	2306      	movs	r3, #6
 801b2ec:	6063      	str	r3, [r4, #4]
 801b2ee:	2300      	movs	r3, #0
 801b2f0:	9303      	str	r3, [sp, #12]
 801b2f2:	ab0a      	add	r3, sp, #40	; 0x28
 801b2f4:	9302      	str	r3, [sp, #8]
 801b2f6:	ab09      	add	r3, sp, #36	; 0x24
 801b2f8:	9300      	str	r3, [sp, #0]
 801b2fa:	ec49 8b10 	vmov	d0, r8, r9
 801b2fe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801b302:	6022      	str	r2, [r4, #0]
 801b304:	f8cd a004 	str.w	sl, [sp, #4]
 801b308:	6861      	ldr	r1, [r4, #4]
 801b30a:	4628      	mov	r0, r5
 801b30c:	f7ff feec 	bl	801b0e8 <__cvt>
 801b310:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 801b314:	2b47      	cmp	r3, #71	; 0x47
 801b316:	4680      	mov	r8, r0
 801b318:	d109      	bne.n	801b32e <_printf_float+0x11a>
 801b31a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b31c:	1cd8      	adds	r0, r3, #3
 801b31e:	db02      	blt.n	801b326 <_printf_float+0x112>
 801b320:	6862      	ldr	r2, [r4, #4]
 801b322:	4293      	cmp	r3, r2
 801b324:	dd57      	ble.n	801b3d6 <_printf_float+0x1c2>
 801b326:	f1aa 0a02 	sub.w	sl, sl, #2
 801b32a:	fa5f fa8a 	uxtb.w	sl, sl
 801b32e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801b332:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b334:	d834      	bhi.n	801b3a0 <_printf_float+0x18c>
 801b336:	3901      	subs	r1, #1
 801b338:	4652      	mov	r2, sl
 801b33a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801b33e:	9109      	str	r1, [sp, #36]	; 0x24
 801b340:	f7ff ff33 	bl	801b1aa <__exponent>
 801b344:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b346:	1883      	adds	r3, r0, r2
 801b348:	2a01      	cmp	r2, #1
 801b34a:	4681      	mov	r9, r0
 801b34c:	6123      	str	r3, [r4, #16]
 801b34e:	dc02      	bgt.n	801b356 <_printf_float+0x142>
 801b350:	6822      	ldr	r2, [r4, #0]
 801b352:	07d1      	lsls	r1, r2, #31
 801b354:	d501      	bpl.n	801b35a <_printf_float+0x146>
 801b356:	3301      	adds	r3, #1
 801b358:	6123      	str	r3, [r4, #16]
 801b35a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801b35e:	2b00      	cmp	r3, #0
 801b360:	d0af      	beq.n	801b2c2 <_printf_float+0xae>
 801b362:	232d      	movs	r3, #45	; 0x2d
 801b364:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b368:	e7ab      	b.n	801b2c2 <_printf_float+0xae>
 801b36a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 801b36e:	d002      	beq.n	801b376 <_printf_float+0x162>
 801b370:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801b374:	d1bb      	bne.n	801b2ee <_printf_float+0xda>
 801b376:	b189      	cbz	r1, 801b39c <_printf_float+0x188>
 801b378:	2300      	movs	r3, #0
 801b37a:	9303      	str	r3, [sp, #12]
 801b37c:	ab0a      	add	r3, sp, #40	; 0x28
 801b37e:	9302      	str	r3, [sp, #8]
 801b380:	ab09      	add	r3, sp, #36	; 0x24
 801b382:	9300      	str	r3, [sp, #0]
 801b384:	ec49 8b10 	vmov	d0, r8, r9
 801b388:	6022      	str	r2, [r4, #0]
 801b38a:	f8cd a004 	str.w	sl, [sp, #4]
 801b38e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801b392:	4628      	mov	r0, r5
 801b394:	f7ff fea8 	bl	801b0e8 <__cvt>
 801b398:	4680      	mov	r8, r0
 801b39a:	e7be      	b.n	801b31a <_printf_float+0x106>
 801b39c:	2301      	movs	r3, #1
 801b39e:	e7a5      	b.n	801b2ec <_printf_float+0xd8>
 801b3a0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 801b3a4:	d119      	bne.n	801b3da <_printf_float+0x1c6>
 801b3a6:	2900      	cmp	r1, #0
 801b3a8:	6863      	ldr	r3, [r4, #4]
 801b3aa:	dd0c      	ble.n	801b3c6 <_printf_float+0x1b2>
 801b3ac:	6121      	str	r1, [r4, #16]
 801b3ae:	b913      	cbnz	r3, 801b3b6 <_printf_float+0x1a2>
 801b3b0:	6822      	ldr	r2, [r4, #0]
 801b3b2:	07d2      	lsls	r2, r2, #31
 801b3b4:	d502      	bpl.n	801b3bc <_printf_float+0x1a8>
 801b3b6:	3301      	adds	r3, #1
 801b3b8:	440b      	add	r3, r1
 801b3ba:	6123      	str	r3, [r4, #16]
 801b3bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b3be:	65a3      	str	r3, [r4, #88]	; 0x58
 801b3c0:	f04f 0900 	mov.w	r9, #0
 801b3c4:	e7c9      	b.n	801b35a <_printf_float+0x146>
 801b3c6:	b913      	cbnz	r3, 801b3ce <_printf_float+0x1ba>
 801b3c8:	6822      	ldr	r2, [r4, #0]
 801b3ca:	07d0      	lsls	r0, r2, #31
 801b3cc:	d501      	bpl.n	801b3d2 <_printf_float+0x1be>
 801b3ce:	3302      	adds	r3, #2
 801b3d0:	e7f3      	b.n	801b3ba <_printf_float+0x1a6>
 801b3d2:	2301      	movs	r3, #1
 801b3d4:	e7f1      	b.n	801b3ba <_printf_float+0x1a6>
 801b3d6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801b3da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b3dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b3de:	4293      	cmp	r3, r2
 801b3e0:	db05      	blt.n	801b3ee <_printf_float+0x1da>
 801b3e2:	6822      	ldr	r2, [r4, #0]
 801b3e4:	6123      	str	r3, [r4, #16]
 801b3e6:	07d1      	lsls	r1, r2, #31
 801b3e8:	d5e8      	bpl.n	801b3bc <_printf_float+0x1a8>
 801b3ea:	3301      	adds	r3, #1
 801b3ec:	e7e5      	b.n	801b3ba <_printf_float+0x1a6>
 801b3ee:	2b00      	cmp	r3, #0
 801b3f0:	bfd4      	ite	le
 801b3f2:	f1c3 0302 	rsble	r3, r3, #2
 801b3f6:	2301      	movgt	r3, #1
 801b3f8:	4413      	add	r3, r2
 801b3fa:	e7de      	b.n	801b3ba <_printf_float+0x1a6>
 801b3fc:	6823      	ldr	r3, [r4, #0]
 801b3fe:	055a      	lsls	r2, r3, #21
 801b400:	d407      	bmi.n	801b412 <_printf_float+0x1fe>
 801b402:	6923      	ldr	r3, [r4, #16]
 801b404:	4642      	mov	r2, r8
 801b406:	4631      	mov	r1, r6
 801b408:	4628      	mov	r0, r5
 801b40a:	47b8      	blx	r7
 801b40c:	3001      	adds	r0, #1
 801b40e:	d12b      	bne.n	801b468 <_printf_float+0x254>
 801b410:	e761      	b.n	801b2d6 <_printf_float+0xc2>
 801b412:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801b416:	f240 80e2 	bls.w	801b5de <_printf_float+0x3ca>
 801b41a:	2200      	movs	r2, #0
 801b41c:	2300      	movs	r3, #0
 801b41e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801b422:	f7e5 fb55 	bl	8000ad0 <__aeabi_dcmpeq>
 801b426:	2800      	cmp	r0, #0
 801b428:	d03c      	beq.n	801b4a4 <_printf_float+0x290>
 801b42a:	2301      	movs	r3, #1
 801b42c:	4a38      	ldr	r2, [pc, #224]	; (801b510 <_printf_float+0x2fc>)
 801b42e:	4631      	mov	r1, r6
 801b430:	4628      	mov	r0, r5
 801b432:	47b8      	blx	r7
 801b434:	3001      	adds	r0, #1
 801b436:	f43f af4e 	beq.w	801b2d6 <_printf_float+0xc2>
 801b43a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b43c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b43e:	429a      	cmp	r2, r3
 801b440:	db02      	blt.n	801b448 <_printf_float+0x234>
 801b442:	6823      	ldr	r3, [r4, #0]
 801b444:	07d8      	lsls	r0, r3, #31
 801b446:	d50f      	bpl.n	801b468 <_printf_float+0x254>
 801b448:	9b05      	ldr	r3, [sp, #20]
 801b44a:	9a04      	ldr	r2, [sp, #16]
 801b44c:	4631      	mov	r1, r6
 801b44e:	4628      	mov	r0, r5
 801b450:	47b8      	blx	r7
 801b452:	3001      	adds	r0, #1
 801b454:	f43f af3f 	beq.w	801b2d6 <_printf_float+0xc2>
 801b458:	f04f 0800 	mov.w	r8, #0
 801b45c:	f104 091a 	add.w	r9, r4, #26
 801b460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b462:	3b01      	subs	r3, #1
 801b464:	4598      	cmp	r8, r3
 801b466:	db12      	blt.n	801b48e <_printf_float+0x27a>
 801b468:	6823      	ldr	r3, [r4, #0]
 801b46a:	079b      	lsls	r3, r3, #30
 801b46c:	d509      	bpl.n	801b482 <_printf_float+0x26e>
 801b46e:	f04f 0800 	mov.w	r8, #0
 801b472:	f104 0919 	add.w	r9, r4, #25
 801b476:	68e3      	ldr	r3, [r4, #12]
 801b478:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b47a:	1a9b      	subs	r3, r3, r2
 801b47c:	4598      	cmp	r8, r3
 801b47e:	f2c0 80ee 	blt.w	801b65e <_printf_float+0x44a>
 801b482:	68e0      	ldr	r0, [r4, #12]
 801b484:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b486:	4298      	cmp	r0, r3
 801b488:	bfb8      	it	lt
 801b48a:	4618      	movlt	r0, r3
 801b48c:	e725      	b.n	801b2da <_printf_float+0xc6>
 801b48e:	2301      	movs	r3, #1
 801b490:	464a      	mov	r2, r9
 801b492:	4631      	mov	r1, r6
 801b494:	4628      	mov	r0, r5
 801b496:	47b8      	blx	r7
 801b498:	3001      	adds	r0, #1
 801b49a:	f43f af1c 	beq.w	801b2d6 <_printf_float+0xc2>
 801b49e:	f108 0801 	add.w	r8, r8, #1
 801b4a2:	e7dd      	b.n	801b460 <_printf_float+0x24c>
 801b4a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b4a6:	2b00      	cmp	r3, #0
 801b4a8:	dc34      	bgt.n	801b514 <_printf_float+0x300>
 801b4aa:	2301      	movs	r3, #1
 801b4ac:	4a18      	ldr	r2, [pc, #96]	; (801b510 <_printf_float+0x2fc>)
 801b4ae:	4631      	mov	r1, r6
 801b4b0:	4628      	mov	r0, r5
 801b4b2:	47b8      	blx	r7
 801b4b4:	3001      	adds	r0, #1
 801b4b6:	f43f af0e 	beq.w	801b2d6 <_printf_float+0xc2>
 801b4ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b4bc:	b923      	cbnz	r3, 801b4c8 <_printf_float+0x2b4>
 801b4be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b4c0:	b913      	cbnz	r3, 801b4c8 <_printf_float+0x2b4>
 801b4c2:	6823      	ldr	r3, [r4, #0]
 801b4c4:	07d9      	lsls	r1, r3, #31
 801b4c6:	d5cf      	bpl.n	801b468 <_printf_float+0x254>
 801b4c8:	9b05      	ldr	r3, [sp, #20]
 801b4ca:	9a04      	ldr	r2, [sp, #16]
 801b4cc:	4631      	mov	r1, r6
 801b4ce:	4628      	mov	r0, r5
 801b4d0:	47b8      	blx	r7
 801b4d2:	3001      	adds	r0, #1
 801b4d4:	f43f aeff 	beq.w	801b2d6 <_printf_float+0xc2>
 801b4d8:	f04f 0900 	mov.w	r9, #0
 801b4dc:	f104 0a1a 	add.w	sl, r4, #26
 801b4e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b4e2:	425b      	negs	r3, r3
 801b4e4:	4599      	cmp	r9, r3
 801b4e6:	db01      	blt.n	801b4ec <_printf_float+0x2d8>
 801b4e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b4ea:	e78b      	b.n	801b404 <_printf_float+0x1f0>
 801b4ec:	2301      	movs	r3, #1
 801b4ee:	4652      	mov	r2, sl
 801b4f0:	4631      	mov	r1, r6
 801b4f2:	4628      	mov	r0, r5
 801b4f4:	47b8      	blx	r7
 801b4f6:	3001      	adds	r0, #1
 801b4f8:	f43f aeed 	beq.w	801b2d6 <_printf_float+0xc2>
 801b4fc:	f109 0901 	add.w	r9, r9, #1
 801b500:	e7ee      	b.n	801b4e0 <_printf_float+0x2cc>
 801b502:	bf00      	nop
 801b504:	7fefffff 	.word	0x7fefffff
 801b508:	0801e024 	.word	0x0801e024
 801b50c:	0801e028 	.word	0x0801e028
 801b510:	0801e034 	.word	0x0801e034
 801b514:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b516:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b518:	429a      	cmp	r2, r3
 801b51a:	bfa8      	it	ge
 801b51c:	461a      	movge	r2, r3
 801b51e:	2a00      	cmp	r2, #0
 801b520:	4691      	mov	r9, r2
 801b522:	dc38      	bgt.n	801b596 <_printf_float+0x382>
 801b524:	f104 031a 	add.w	r3, r4, #26
 801b528:	f04f 0b00 	mov.w	fp, #0
 801b52c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b530:	9306      	str	r3, [sp, #24]
 801b532:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 801b536:	ebaa 0309 	sub.w	r3, sl, r9
 801b53a:	459b      	cmp	fp, r3
 801b53c:	db33      	blt.n	801b5a6 <_printf_float+0x392>
 801b53e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b540:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b542:	429a      	cmp	r2, r3
 801b544:	db3a      	blt.n	801b5bc <_printf_float+0x3a8>
 801b546:	6823      	ldr	r3, [r4, #0]
 801b548:	07da      	lsls	r2, r3, #31
 801b54a:	d437      	bmi.n	801b5bc <_printf_float+0x3a8>
 801b54c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b54e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b550:	eba3 020a 	sub.w	r2, r3, sl
 801b554:	eba3 0901 	sub.w	r9, r3, r1
 801b558:	4591      	cmp	r9, r2
 801b55a:	bfa8      	it	ge
 801b55c:	4691      	movge	r9, r2
 801b55e:	f1b9 0f00 	cmp.w	r9, #0
 801b562:	dc33      	bgt.n	801b5cc <_printf_float+0x3b8>
 801b564:	f04f 0800 	mov.w	r8, #0
 801b568:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b56c:	f104 0a1a 	add.w	sl, r4, #26
 801b570:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b574:	1a9b      	subs	r3, r3, r2
 801b576:	eba3 0309 	sub.w	r3, r3, r9
 801b57a:	4598      	cmp	r8, r3
 801b57c:	f6bf af74 	bge.w	801b468 <_printf_float+0x254>
 801b580:	2301      	movs	r3, #1
 801b582:	4652      	mov	r2, sl
 801b584:	4631      	mov	r1, r6
 801b586:	4628      	mov	r0, r5
 801b588:	47b8      	blx	r7
 801b58a:	3001      	adds	r0, #1
 801b58c:	f43f aea3 	beq.w	801b2d6 <_printf_float+0xc2>
 801b590:	f108 0801 	add.w	r8, r8, #1
 801b594:	e7ec      	b.n	801b570 <_printf_float+0x35c>
 801b596:	4613      	mov	r3, r2
 801b598:	4631      	mov	r1, r6
 801b59a:	4642      	mov	r2, r8
 801b59c:	4628      	mov	r0, r5
 801b59e:	47b8      	blx	r7
 801b5a0:	3001      	adds	r0, #1
 801b5a2:	d1bf      	bne.n	801b524 <_printf_float+0x310>
 801b5a4:	e697      	b.n	801b2d6 <_printf_float+0xc2>
 801b5a6:	2301      	movs	r3, #1
 801b5a8:	9a06      	ldr	r2, [sp, #24]
 801b5aa:	4631      	mov	r1, r6
 801b5ac:	4628      	mov	r0, r5
 801b5ae:	47b8      	blx	r7
 801b5b0:	3001      	adds	r0, #1
 801b5b2:	f43f ae90 	beq.w	801b2d6 <_printf_float+0xc2>
 801b5b6:	f10b 0b01 	add.w	fp, fp, #1
 801b5ba:	e7ba      	b.n	801b532 <_printf_float+0x31e>
 801b5bc:	9b05      	ldr	r3, [sp, #20]
 801b5be:	9a04      	ldr	r2, [sp, #16]
 801b5c0:	4631      	mov	r1, r6
 801b5c2:	4628      	mov	r0, r5
 801b5c4:	47b8      	blx	r7
 801b5c6:	3001      	adds	r0, #1
 801b5c8:	d1c0      	bne.n	801b54c <_printf_float+0x338>
 801b5ca:	e684      	b.n	801b2d6 <_printf_float+0xc2>
 801b5cc:	464b      	mov	r3, r9
 801b5ce:	eb08 020a 	add.w	r2, r8, sl
 801b5d2:	4631      	mov	r1, r6
 801b5d4:	4628      	mov	r0, r5
 801b5d6:	47b8      	blx	r7
 801b5d8:	3001      	adds	r0, #1
 801b5da:	d1c3      	bne.n	801b564 <_printf_float+0x350>
 801b5dc:	e67b      	b.n	801b2d6 <_printf_float+0xc2>
 801b5de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b5e0:	2a01      	cmp	r2, #1
 801b5e2:	dc01      	bgt.n	801b5e8 <_printf_float+0x3d4>
 801b5e4:	07db      	lsls	r3, r3, #31
 801b5e6:	d537      	bpl.n	801b658 <_printf_float+0x444>
 801b5e8:	2301      	movs	r3, #1
 801b5ea:	4642      	mov	r2, r8
 801b5ec:	4631      	mov	r1, r6
 801b5ee:	4628      	mov	r0, r5
 801b5f0:	47b8      	blx	r7
 801b5f2:	3001      	adds	r0, #1
 801b5f4:	f43f ae6f 	beq.w	801b2d6 <_printf_float+0xc2>
 801b5f8:	9b05      	ldr	r3, [sp, #20]
 801b5fa:	9a04      	ldr	r2, [sp, #16]
 801b5fc:	4631      	mov	r1, r6
 801b5fe:	4628      	mov	r0, r5
 801b600:	47b8      	blx	r7
 801b602:	3001      	adds	r0, #1
 801b604:	f43f ae67 	beq.w	801b2d6 <_printf_float+0xc2>
 801b608:	2200      	movs	r2, #0
 801b60a:	2300      	movs	r3, #0
 801b60c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801b610:	f7e5 fa5e 	bl	8000ad0 <__aeabi_dcmpeq>
 801b614:	b158      	cbz	r0, 801b62e <_printf_float+0x41a>
 801b616:	f04f 0800 	mov.w	r8, #0
 801b61a:	f104 0a1a 	add.w	sl, r4, #26
 801b61e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b620:	3b01      	subs	r3, #1
 801b622:	4598      	cmp	r8, r3
 801b624:	db0d      	blt.n	801b642 <_printf_float+0x42e>
 801b626:	464b      	mov	r3, r9
 801b628:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801b62c:	e6eb      	b.n	801b406 <_printf_float+0x1f2>
 801b62e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b630:	f108 0201 	add.w	r2, r8, #1
 801b634:	3b01      	subs	r3, #1
 801b636:	4631      	mov	r1, r6
 801b638:	4628      	mov	r0, r5
 801b63a:	47b8      	blx	r7
 801b63c:	3001      	adds	r0, #1
 801b63e:	d1f2      	bne.n	801b626 <_printf_float+0x412>
 801b640:	e649      	b.n	801b2d6 <_printf_float+0xc2>
 801b642:	2301      	movs	r3, #1
 801b644:	4652      	mov	r2, sl
 801b646:	4631      	mov	r1, r6
 801b648:	4628      	mov	r0, r5
 801b64a:	47b8      	blx	r7
 801b64c:	3001      	adds	r0, #1
 801b64e:	f43f ae42 	beq.w	801b2d6 <_printf_float+0xc2>
 801b652:	f108 0801 	add.w	r8, r8, #1
 801b656:	e7e2      	b.n	801b61e <_printf_float+0x40a>
 801b658:	2301      	movs	r3, #1
 801b65a:	4642      	mov	r2, r8
 801b65c:	e7eb      	b.n	801b636 <_printf_float+0x422>
 801b65e:	2301      	movs	r3, #1
 801b660:	464a      	mov	r2, r9
 801b662:	4631      	mov	r1, r6
 801b664:	4628      	mov	r0, r5
 801b666:	47b8      	blx	r7
 801b668:	3001      	adds	r0, #1
 801b66a:	f43f ae34 	beq.w	801b2d6 <_printf_float+0xc2>
 801b66e:	f108 0801 	add.w	r8, r8, #1
 801b672:	e700      	b.n	801b476 <_printf_float+0x262>
 801b674:	4642      	mov	r2, r8
 801b676:	464b      	mov	r3, r9
 801b678:	4640      	mov	r0, r8
 801b67a:	4649      	mov	r1, r9
 801b67c:	f7e5 fa5a 	bl	8000b34 <__aeabi_dcmpun>
 801b680:	2800      	cmp	r0, #0
 801b682:	f43f ae2d 	beq.w	801b2e0 <_printf_float+0xcc>
 801b686:	4b01      	ldr	r3, [pc, #4]	; (801b68c <_printf_float+0x478>)
 801b688:	4a01      	ldr	r2, [pc, #4]	; (801b690 <_printf_float+0x47c>)
 801b68a:	e60e      	b.n	801b2aa <_printf_float+0x96>
 801b68c:	0801e02c 	.word	0x0801e02c
 801b690:	0801e030 	.word	0x0801e030

0801b694 <_printf_common>:
 801b694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b698:	4691      	mov	r9, r2
 801b69a:	461f      	mov	r7, r3
 801b69c:	688a      	ldr	r2, [r1, #8]
 801b69e:	690b      	ldr	r3, [r1, #16]
 801b6a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b6a4:	4293      	cmp	r3, r2
 801b6a6:	bfb8      	it	lt
 801b6a8:	4613      	movlt	r3, r2
 801b6aa:	f8c9 3000 	str.w	r3, [r9]
 801b6ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b6b2:	4606      	mov	r6, r0
 801b6b4:	460c      	mov	r4, r1
 801b6b6:	b112      	cbz	r2, 801b6be <_printf_common+0x2a>
 801b6b8:	3301      	adds	r3, #1
 801b6ba:	f8c9 3000 	str.w	r3, [r9]
 801b6be:	6823      	ldr	r3, [r4, #0]
 801b6c0:	0699      	lsls	r1, r3, #26
 801b6c2:	bf42      	ittt	mi
 801b6c4:	f8d9 3000 	ldrmi.w	r3, [r9]
 801b6c8:	3302      	addmi	r3, #2
 801b6ca:	f8c9 3000 	strmi.w	r3, [r9]
 801b6ce:	6825      	ldr	r5, [r4, #0]
 801b6d0:	f015 0506 	ands.w	r5, r5, #6
 801b6d4:	d107      	bne.n	801b6e6 <_printf_common+0x52>
 801b6d6:	f104 0a19 	add.w	sl, r4, #25
 801b6da:	68e3      	ldr	r3, [r4, #12]
 801b6dc:	f8d9 2000 	ldr.w	r2, [r9]
 801b6e0:	1a9b      	subs	r3, r3, r2
 801b6e2:	429d      	cmp	r5, r3
 801b6e4:	db29      	blt.n	801b73a <_printf_common+0xa6>
 801b6e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801b6ea:	6822      	ldr	r2, [r4, #0]
 801b6ec:	3300      	adds	r3, #0
 801b6ee:	bf18      	it	ne
 801b6f0:	2301      	movne	r3, #1
 801b6f2:	0692      	lsls	r2, r2, #26
 801b6f4:	d42e      	bmi.n	801b754 <_printf_common+0xc0>
 801b6f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b6fa:	4639      	mov	r1, r7
 801b6fc:	4630      	mov	r0, r6
 801b6fe:	47c0      	blx	r8
 801b700:	3001      	adds	r0, #1
 801b702:	d021      	beq.n	801b748 <_printf_common+0xb4>
 801b704:	6823      	ldr	r3, [r4, #0]
 801b706:	68e5      	ldr	r5, [r4, #12]
 801b708:	f8d9 2000 	ldr.w	r2, [r9]
 801b70c:	f003 0306 	and.w	r3, r3, #6
 801b710:	2b04      	cmp	r3, #4
 801b712:	bf08      	it	eq
 801b714:	1aad      	subeq	r5, r5, r2
 801b716:	68a3      	ldr	r3, [r4, #8]
 801b718:	6922      	ldr	r2, [r4, #16]
 801b71a:	bf0c      	ite	eq
 801b71c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b720:	2500      	movne	r5, #0
 801b722:	4293      	cmp	r3, r2
 801b724:	bfc4      	itt	gt
 801b726:	1a9b      	subgt	r3, r3, r2
 801b728:	18ed      	addgt	r5, r5, r3
 801b72a:	f04f 0900 	mov.w	r9, #0
 801b72e:	341a      	adds	r4, #26
 801b730:	454d      	cmp	r5, r9
 801b732:	d11b      	bne.n	801b76c <_printf_common+0xd8>
 801b734:	2000      	movs	r0, #0
 801b736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b73a:	2301      	movs	r3, #1
 801b73c:	4652      	mov	r2, sl
 801b73e:	4639      	mov	r1, r7
 801b740:	4630      	mov	r0, r6
 801b742:	47c0      	blx	r8
 801b744:	3001      	adds	r0, #1
 801b746:	d103      	bne.n	801b750 <_printf_common+0xbc>
 801b748:	f04f 30ff 	mov.w	r0, #4294967295
 801b74c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b750:	3501      	adds	r5, #1
 801b752:	e7c2      	b.n	801b6da <_printf_common+0x46>
 801b754:	18e1      	adds	r1, r4, r3
 801b756:	1c5a      	adds	r2, r3, #1
 801b758:	2030      	movs	r0, #48	; 0x30
 801b75a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b75e:	4422      	add	r2, r4
 801b760:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b764:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b768:	3302      	adds	r3, #2
 801b76a:	e7c4      	b.n	801b6f6 <_printf_common+0x62>
 801b76c:	2301      	movs	r3, #1
 801b76e:	4622      	mov	r2, r4
 801b770:	4639      	mov	r1, r7
 801b772:	4630      	mov	r0, r6
 801b774:	47c0      	blx	r8
 801b776:	3001      	adds	r0, #1
 801b778:	d0e6      	beq.n	801b748 <_printf_common+0xb4>
 801b77a:	f109 0901 	add.w	r9, r9, #1
 801b77e:	e7d7      	b.n	801b730 <_printf_common+0x9c>

0801b780 <_printf_i>:
 801b780:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b784:	4617      	mov	r7, r2
 801b786:	7e0a      	ldrb	r2, [r1, #24]
 801b788:	b085      	sub	sp, #20
 801b78a:	2a6e      	cmp	r2, #110	; 0x6e
 801b78c:	4698      	mov	r8, r3
 801b78e:	4606      	mov	r6, r0
 801b790:	460c      	mov	r4, r1
 801b792:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b794:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 801b798:	f000 80bc 	beq.w	801b914 <_printf_i+0x194>
 801b79c:	d81a      	bhi.n	801b7d4 <_printf_i+0x54>
 801b79e:	2a63      	cmp	r2, #99	; 0x63
 801b7a0:	d02e      	beq.n	801b800 <_printf_i+0x80>
 801b7a2:	d80a      	bhi.n	801b7ba <_printf_i+0x3a>
 801b7a4:	2a00      	cmp	r2, #0
 801b7a6:	f000 80c8 	beq.w	801b93a <_printf_i+0x1ba>
 801b7aa:	2a58      	cmp	r2, #88	; 0x58
 801b7ac:	f000 808a 	beq.w	801b8c4 <_printf_i+0x144>
 801b7b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b7b4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 801b7b8:	e02a      	b.n	801b810 <_printf_i+0x90>
 801b7ba:	2a64      	cmp	r2, #100	; 0x64
 801b7bc:	d001      	beq.n	801b7c2 <_printf_i+0x42>
 801b7be:	2a69      	cmp	r2, #105	; 0x69
 801b7c0:	d1f6      	bne.n	801b7b0 <_printf_i+0x30>
 801b7c2:	6821      	ldr	r1, [r4, #0]
 801b7c4:	681a      	ldr	r2, [r3, #0]
 801b7c6:	f011 0f80 	tst.w	r1, #128	; 0x80
 801b7ca:	d023      	beq.n	801b814 <_printf_i+0x94>
 801b7cc:	1d11      	adds	r1, r2, #4
 801b7ce:	6019      	str	r1, [r3, #0]
 801b7d0:	6813      	ldr	r3, [r2, #0]
 801b7d2:	e027      	b.n	801b824 <_printf_i+0xa4>
 801b7d4:	2a73      	cmp	r2, #115	; 0x73
 801b7d6:	f000 80b4 	beq.w	801b942 <_printf_i+0x1c2>
 801b7da:	d808      	bhi.n	801b7ee <_printf_i+0x6e>
 801b7dc:	2a6f      	cmp	r2, #111	; 0x6f
 801b7de:	d02a      	beq.n	801b836 <_printf_i+0xb6>
 801b7e0:	2a70      	cmp	r2, #112	; 0x70
 801b7e2:	d1e5      	bne.n	801b7b0 <_printf_i+0x30>
 801b7e4:	680a      	ldr	r2, [r1, #0]
 801b7e6:	f042 0220 	orr.w	r2, r2, #32
 801b7ea:	600a      	str	r2, [r1, #0]
 801b7ec:	e003      	b.n	801b7f6 <_printf_i+0x76>
 801b7ee:	2a75      	cmp	r2, #117	; 0x75
 801b7f0:	d021      	beq.n	801b836 <_printf_i+0xb6>
 801b7f2:	2a78      	cmp	r2, #120	; 0x78
 801b7f4:	d1dc      	bne.n	801b7b0 <_printf_i+0x30>
 801b7f6:	2278      	movs	r2, #120	; 0x78
 801b7f8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 801b7fc:	496e      	ldr	r1, [pc, #440]	; (801b9b8 <_printf_i+0x238>)
 801b7fe:	e064      	b.n	801b8ca <_printf_i+0x14a>
 801b800:	681a      	ldr	r2, [r3, #0]
 801b802:	f101 0542 	add.w	r5, r1, #66	; 0x42
 801b806:	1d11      	adds	r1, r2, #4
 801b808:	6019      	str	r1, [r3, #0]
 801b80a:	6813      	ldr	r3, [r2, #0]
 801b80c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b810:	2301      	movs	r3, #1
 801b812:	e0a3      	b.n	801b95c <_printf_i+0x1dc>
 801b814:	f011 0f40 	tst.w	r1, #64	; 0x40
 801b818:	f102 0104 	add.w	r1, r2, #4
 801b81c:	6019      	str	r1, [r3, #0]
 801b81e:	d0d7      	beq.n	801b7d0 <_printf_i+0x50>
 801b820:	f9b2 3000 	ldrsh.w	r3, [r2]
 801b824:	2b00      	cmp	r3, #0
 801b826:	da03      	bge.n	801b830 <_printf_i+0xb0>
 801b828:	222d      	movs	r2, #45	; 0x2d
 801b82a:	425b      	negs	r3, r3
 801b82c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801b830:	4962      	ldr	r1, [pc, #392]	; (801b9bc <_printf_i+0x23c>)
 801b832:	220a      	movs	r2, #10
 801b834:	e017      	b.n	801b866 <_printf_i+0xe6>
 801b836:	6820      	ldr	r0, [r4, #0]
 801b838:	6819      	ldr	r1, [r3, #0]
 801b83a:	f010 0f80 	tst.w	r0, #128	; 0x80
 801b83e:	d003      	beq.n	801b848 <_printf_i+0xc8>
 801b840:	1d08      	adds	r0, r1, #4
 801b842:	6018      	str	r0, [r3, #0]
 801b844:	680b      	ldr	r3, [r1, #0]
 801b846:	e006      	b.n	801b856 <_printf_i+0xd6>
 801b848:	f010 0f40 	tst.w	r0, #64	; 0x40
 801b84c:	f101 0004 	add.w	r0, r1, #4
 801b850:	6018      	str	r0, [r3, #0]
 801b852:	d0f7      	beq.n	801b844 <_printf_i+0xc4>
 801b854:	880b      	ldrh	r3, [r1, #0]
 801b856:	4959      	ldr	r1, [pc, #356]	; (801b9bc <_printf_i+0x23c>)
 801b858:	2a6f      	cmp	r2, #111	; 0x6f
 801b85a:	bf14      	ite	ne
 801b85c:	220a      	movne	r2, #10
 801b85e:	2208      	moveq	r2, #8
 801b860:	2000      	movs	r0, #0
 801b862:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 801b866:	6865      	ldr	r5, [r4, #4]
 801b868:	60a5      	str	r5, [r4, #8]
 801b86a:	2d00      	cmp	r5, #0
 801b86c:	f2c0 809c 	blt.w	801b9a8 <_printf_i+0x228>
 801b870:	6820      	ldr	r0, [r4, #0]
 801b872:	f020 0004 	bic.w	r0, r0, #4
 801b876:	6020      	str	r0, [r4, #0]
 801b878:	2b00      	cmp	r3, #0
 801b87a:	d13f      	bne.n	801b8fc <_printf_i+0x17c>
 801b87c:	2d00      	cmp	r5, #0
 801b87e:	f040 8095 	bne.w	801b9ac <_printf_i+0x22c>
 801b882:	4675      	mov	r5, lr
 801b884:	2a08      	cmp	r2, #8
 801b886:	d10b      	bne.n	801b8a0 <_printf_i+0x120>
 801b888:	6823      	ldr	r3, [r4, #0]
 801b88a:	07da      	lsls	r2, r3, #31
 801b88c:	d508      	bpl.n	801b8a0 <_printf_i+0x120>
 801b88e:	6923      	ldr	r3, [r4, #16]
 801b890:	6862      	ldr	r2, [r4, #4]
 801b892:	429a      	cmp	r2, r3
 801b894:	bfde      	ittt	le
 801b896:	2330      	movle	r3, #48	; 0x30
 801b898:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b89c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801b8a0:	ebae 0305 	sub.w	r3, lr, r5
 801b8a4:	6123      	str	r3, [r4, #16]
 801b8a6:	f8cd 8000 	str.w	r8, [sp]
 801b8aa:	463b      	mov	r3, r7
 801b8ac:	aa03      	add	r2, sp, #12
 801b8ae:	4621      	mov	r1, r4
 801b8b0:	4630      	mov	r0, r6
 801b8b2:	f7ff feef 	bl	801b694 <_printf_common>
 801b8b6:	3001      	adds	r0, #1
 801b8b8:	d155      	bne.n	801b966 <_printf_i+0x1e6>
 801b8ba:	f04f 30ff 	mov.w	r0, #4294967295
 801b8be:	b005      	add	sp, #20
 801b8c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b8c4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 801b8c8:	493c      	ldr	r1, [pc, #240]	; (801b9bc <_printf_i+0x23c>)
 801b8ca:	6822      	ldr	r2, [r4, #0]
 801b8cc:	6818      	ldr	r0, [r3, #0]
 801b8ce:	f012 0f80 	tst.w	r2, #128	; 0x80
 801b8d2:	f100 0504 	add.w	r5, r0, #4
 801b8d6:	601d      	str	r5, [r3, #0]
 801b8d8:	d001      	beq.n	801b8de <_printf_i+0x15e>
 801b8da:	6803      	ldr	r3, [r0, #0]
 801b8dc:	e002      	b.n	801b8e4 <_printf_i+0x164>
 801b8de:	0655      	lsls	r5, r2, #25
 801b8e0:	d5fb      	bpl.n	801b8da <_printf_i+0x15a>
 801b8e2:	8803      	ldrh	r3, [r0, #0]
 801b8e4:	07d0      	lsls	r0, r2, #31
 801b8e6:	bf44      	itt	mi
 801b8e8:	f042 0220 	orrmi.w	r2, r2, #32
 801b8ec:	6022      	strmi	r2, [r4, #0]
 801b8ee:	b91b      	cbnz	r3, 801b8f8 <_printf_i+0x178>
 801b8f0:	6822      	ldr	r2, [r4, #0]
 801b8f2:	f022 0220 	bic.w	r2, r2, #32
 801b8f6:	6022      	str	r2, [r4, #0]
 801b8f8:	2210      	movs	r2, #16
 801b8fa:	e7b1      	b.n	801b860 <_printf_i+0xe0>
 801b8fc:	4675      	mov	r5, lr
 801b8fe:	fbb3 f0f2 	udiv	r0, r3, r2
 801b902:	fb02 3310 	mls	r3, r2, r0, r3
 801b906:	5ccb      	ldrb	r3, [r1, r3]
 801b908:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801b90c:	4603      	mov	r3, r0
 801b90e:	2800      	cmp	r0, #0
 801b910:	d1f5      	bne.n	801b8fe <_printf_i+0x17e>
 801b912:	e7b7      	b.n	801b884 <_printf_i+0x104>
 801b914:	6808      	ldr	r0, [r1, #0]
 801b916:	681a      	ldr	r2, [r3, #0]
 801b918:	6949      	ldr	r1, [r1, #20]
 801b91a:	f010 0f80 	tst.w	r0, #128	; 0x80
 801b91e:	d004      	beq.n	801b92a <_printf_i+0x1aa>
 801b920:	1d10      	adds	r0, r2, #4
 801b922:	6018      	str	r0, [r3, #0]
 801b924:	6813      	ldr	r3, [r2, #0]
 801b926:	6019      	str	r1, [r3, #0]
 801b928:	e007      	b.n	801b93a <_printf_i+0x1ba>
 801b92a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801b92e:	f102 0004 	add.w	r0, r2, #4
 801b932:	6018      	str	r0, [r3, #0]
 801b934:	6813      	ldr	r3, [r2, #0]
 801b936:	d0f6      	beq.n	801b926 <_printf_i+0x1a6>
 801b938:	8019      	strh	r1, [r3, #0]
 801b93a:	2300      	movs	r3, #0
 801b93c:	6123      	str	r3, [r4, #16]
 801b93e:	4675      	mov	r5, lr
 801b940:	e7b1      	b.n	801b8a6 <_printf_i+0x126>
 801b942:	681a      	ldr	r2, [r3, #0]
 801b944:	1d11      	adds	r1, r2, #4
 801b946:	6019      	str	r1, [r3, #0]
 801b948:	6815      	ldr	r5, [r2, #0]
 801b94a:	6862      	ldr	r2, [r4, #4]
 801b94c:	2100      	movs	r1, #0
 801b94e:	4628      	mov	r0, r5
 801b950:	f7e4 fc4e 	bl	80001f0 <memchr>
 801b954:	b108      	cbz	r0, 801b95a <_printf_i+0x1da>
 801b956:	1b40      	subs	r0, r0, r5
 801b958:	6060      	str	r0, [r4, #4]
 801b95a:	6863      	ldr	r3, [r4, #4]
 801b95c:	6123      	str	r3, [r4, #16]
 801b95e:	2300      	movs	r3, #0
 801b960:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b964:	e79f      	b.n	801b8a6 <_printf_i+0x126>
 801b966:	6923      	ldr	r3, [r4, #16]
 801b968:	462a      	mov	r2, r5
 801b96a:	4639      	mov	r1, r7
 801b96c:	4630      	mov	r0, r6
 801b96e:	47c0      	blx	r8
 801b970:	3001      	adds	r0, #1
 801b972:	d0a2      	beq.n	801b8ba <_printf_i+0x13a>
 801b974:	6823      	ldr	r3, [r4, #0]
 801b976:	079b      	lsls	r3, r3, #30
 801b978:	d507      	bpl.n	801b98a <_printf_i+0x20a>
 801b97a:	2500      	movs	r5, #0
 801b97c:	f104 0919 	add.w	r9, r4, #25
 801b980:	68e3      	ldr	r3, [r4, #12]
 801b982:	9a03      	ldr	r2, [sp, #12]
 801b984:	1a9b      	subs	r3, r3, r2
 801b986:	429d      	cmp	r5, r3
 801b988:	db05      	blt.n	801b996 <_printf_i+0x216>
 801b98a:	68e0      	ldr	r0, [r4, #12]
 801b98c:	9b03      	ldr	r3, [sp, #12]
 801b98e:	4298      	cmp	r0, r3
 801b990:	bfb8      	it	lt
 801b992:	4618      	movlt	r0, r3
 801b994:	e793      	b.n	801b8be <_printf_i+0x13e>
 801b996:	2301      	movs	r3, #1
 801b998:	464a      	mov	r2, r9
 801b99a:	4639      	mov	r1, r7
 801b99c:	4630      	mov	r0, r6
 801b99e:	47c0      	blx	r8
 801b9a0:	3001      	adds	r0, #1
 801b9a2:	d08a      	beq.n	801b8ba <_printf_i+0x13a>
 801b9a4:	3501      	adds	r5, #1
 801b9a6:	e7eb      	b.n	801b980 <_printf_i+0x200>
 801b9a8:	2b00      	cmp	r3, #0
 801b9aa:	d1a7      	bne.n	801b8fc <_printf_i+0x17c>
 801b9ac:	780b      	ldrb	r3, [r1, #0]
 801b9ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b9b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b9b6:	e765      	b.n	801b884 <_printf_i+0x104>
 801b9b8:	0801e047 	.word	0x0801e047
 801b9bc:	0801e036 	.word	0x0801e036

0801b9c0 <iprintf>:
 801b9c0:	b40f      	push	{r0, r1, r2, r3}
 801b9c2:	4b0a      	ldr	r3, [pc, #40]	; (801b9ec <iprintf+0x2c>)
 801b9c4:	b513      	push	{r0, r1, r4, lr}
 801b9c6:	681c      	ldr	r4, [r3, #0]
 801b9c8:	b124      	cbz	r4, 801b9d4 <iprintf+0x14>
 801b9ca:	69a3      	ldr	r3, [r4, #24]
 801b9cc:	b913      	cbnz	r3, 801b9d4 <iprintf+0x14>
 801b9ce:	4620      	mov	r0, r4
 801b9d0:	f7ff fa1c 	bl	801ae0c <__sinit>
 801b9d4:	ab05      	add	r3, sp, #20
 801b9d6:	9a04      	ldr	r2, [sp, #16]
 801b9d8:	68a1      	ldr	r1, [r4, #8]
 801b9da:	9301      	str	r3, [sp, #4]
 801b9dc:	4620      	mov	r0, r4
 801b9de:	f001 fc5b 	bl	801d298 <_vfiprintf_r>
 801b9e2:	b002      	add	sp, #8
 801b9e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b9e8:	b004      	add	sp, #16
 801b9ea:	4770      	bx	lr
 801b9ec:	200014a4 	.word	0x200014a4

0801b9f0 <_puts_r>:
 801b9f0:	b570      	push	{r4, r5, r6, lr}
 801b9f2:	460e      	mov	r6, r1
 801b9f4:	4605      	mov	r5, r0
 801b9f6:	b118      	cbz	r0, 801ba00 <_puts_r+0x10>
 801b9f8:	6983      	ldr	r3, [r0, #24]
 801b9fa:	b90b      	cbnz	r3, 801ba00 <_puts_r+0x10>
 801b9fc:	f7ff fa06 	bl	801ae0c <__sinit>
 801ba00:	69ab      	ldr	r3, [r5, #24]
 801ba02:	68ac      	ldr	r4, [r5, #8]
 801ba04:	b913      	cbnz	r3, 801ba0c <_puts_r+0x1c>
 801ba06:	4628      	mov	r0, r5
 801ba08:	f7ff fa00 	bl	801ae0c <__sinit>
 801ba0c:	4b23      	ldr	r3, [pc, #140]	; (801ba9c <_puts_r+0xac>)
 801ba0e:	429c      	cmp	r4, r3
 801ba10:	d117      	bne.n	801ba42 <_puts_r+0x52>
 801ba12:	686c      	ldr	r4, [r5, #4]
 801ba14:	89a3      	ldrh	r3, [r4, #12]
 801ba16:	071b      	lsls	r3, r3, #28
 801ba18:	d51d      	bpl.n	801ba56 <_puts_r+0x66>
 801ba1a:	6923      	ldr	r3, [r4, #16]
 801ba1c:	b1db      	cbz	r3, 801ba56 <_puts_r+0x66>
 801ba1e:	3e01      	subs	r6, #1
 801ba20:	68a3      	ldr	r3, [r4, #8]
 801ba22:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801ba26:	3b01      	subs	r3, #1
 801ba28:	60a3      	str	r3, [r4, #8]
 801ba2a:	b9e9      	cbnz	r1, 801ba68 <_puts_r+0x78>
 801ba2c:	2b00      	cmp	r3, #0
 801ba2e:	da2e      	bge.n	801ba8e <_puts_r+0x9e>
 801ba30:	4622      	mov	r2, r4
 801ba32:	210a      	movs	r1, #10
 801ba34:	4628      	mov	r0, r5
 801ba36:	f000 f95d 	bl	801bcf4 <__swbuf_r>
 801ba3a:	3001      	adds	r0, #1
 801ba3c:	d011      	beq.n	801ba62 <_puts_r+0x72>
 801ba3e:	200a      	movs	r0, #10
 801ba40:	bd70      	pop	{r4, r5, r6, pc}
 801ba42:	4b17      	ldr	r3, [pc, #92]	; (801baa0 <_puts_r+0xb0>)
 801ba44:	429c      	cmp	r4, r3
 801ba46:	d101      	bne.n	801ba4c <_puts_r+0x5c>
 801ba48:	68ac      	ldr	r4, [r5, #8]
 801ba4a:	e7e3      	b.n	801ba14 <_puts_r+0x24>
 801ba4c:	4b15      	ldr	r3, [pc, #84]	; (801baa4 <_puts_r+0xb4>)
 801ba4e:	429c      	cmp	r4, r3
 801ba50:	bf08      	it	eq
 801ba52:	68ec      	ldreq	r4, [r5, #12]
 801ba54:	e7de      	b.n	801ba14 <_puts_r+0x24>
 801ba56:	4621      	mov	r1, r4
 801ba58:	4628      	mov	r0, r5
 801ba5a:	f000 f9af 	bl	801bdbc <__swsetup_r>
 801ba5e:	2800      	cmp	r0, #0
 801ba60:	d0dd      	beq.n	801ba1e <_puts_r+0x2e>
 801ba62:	f04f 30ff 	mov.w	r0, #4294967295
 801ba66:	bd70      	pop	{r4, r5, r6, pc}
 801ba68:	2b00      	cmp	r3, #0
 801ba6a:	da04      	bge.n	801ba76 <_puts_r+0x86>
 801ba6c:	69a2      	ldr	r2, [r4, #24]
 801ba6e:	4293      	cmp	r3, r2
 801ba70:	db06      	blt.n	801ba80 <_puts_r+0x90>
 801ba72:	290a      	cmp	r1, #10
 801ba74:	d004      	beq.n	801ba80 <_puts_r+0x90>
 801ba76:	6823      	ldr	r3, [r4, #0]
 801ba78:	1c5a      	adds	r2, r3, #1
 801ba7a:	6022      	str	r2, [r4, #0]
 801ba7c:	7019      	strb	r1, [r3, #0]
 801ba7e:	e7cf      	b.n	801ba20 <_puts_r+0x30>
 801ba80:	4622      	mov	r2, r4
 801ba82:	4628      	mov	r0, r5
 801ba84:	f000 f936 	bl	801bcf4 <__swbuf_r>
 801ba88:	3001      	adds	r0, #1
 801ba8a:	d1c9      	bne.n	801ba20 <_puts_r+0x30>
 801ba8c:	e7e9      	b.n	801ba62 <_puts_r+0x72>
 801ba8e:	6823      	ldr	r3, [r4, #0]
 801ba90:	200a      	movs	r0, #10
 801ba92:	1c5a      	adds	r2, r3, #1
 801ba94:	6022      	str	r2, [r4, #0]
 801ba96:	7018      	strb	r0, [r3, #0]
 801ba98:	bd70      	pop	{r4, r5, r6, pc}
 801ba9a:	bf00      	nop
 801ba9c:	0801dfe0 	.word	0x0801dfe0
 801baa0:	0801e000 	.word	0x0801e000
 801baa4:	0801dfc0 	.word	0x0801dfc0

0801baa8 <puts>:
 801baa8:	4b02      	ldr	r3, [pc, #8]	; (801bab4 <puts+0xc>)
 801baaa:	4601      	mov	r1, r0
 801baac:	6818      	ldr	r0, [r3, #0]
 801baae:	f7ff bf9f 	b.w	801b9f0 <_puts_r>
 801bab2:	bf00      	nop
 801bab4:	200014a4 	.word	0x200014a4

0801bab8 <_sbrk_r>:
 801bab8:	b538      	push	{r3, r4, r5, lr}
 801baba:	4c06      	ldr	r4, [pc, #24]	; (801bad4 <_sbrk_r+0x1c>)
 801babc:	2300      	movs	r3, #0
 801babe:	4605      	mov	r5, r0
 801bac0:	4608      	mov	r0, r1
 801bac2:	6023      	str	r3, [r4, #0]
 801bac4:	f7f1 fa02 	bl	800cecc <_sbrk>
 801bac8:	1c43      	adds	r3, r0, #1
 801baca:	d102      	bne.n	801bad2 <_sbrk_r+0x1a>
 801bacc:	6823      	ldr	r3, [r4, #0]
 801bace:	b103      	cbz	r3, 801bad2 <_sbrk_r+0x1a>
 801bad0:	602b      	str	r3, [r5, #0]
 801bad2:	bd38      	pop	{r3, r4, r5, pc}
 801bad4:	20003998 	.word	0x20003998

0801bad8 <setvbuf>:
 801bad8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801badc:	461d      	mov	r5, r3
 801bade:	4b51      	ldr	r3, [pc, #324]	; (801bc24 <setvbuf+0x14c>)
 801bae0:	681e      	ldr	r6, [r3, #0]
 801bae2:	4604      	mov	r4, r0
 801bae4:	460f      	mov	r7, r1
 801bae6:	4690      	mov	r8, r2
 801bae8:	b126      	cbz	r6, 801baf4 <setvbuf+0x1c>
 801baea:	69b3      	ldr	r3, [r6, #24]
 801baec:	b913      	cbnz	r3, 801baf4 <setvbuf+0x1c>
 801baee:	4630      	mov	r0, r6
 801baf0:	f7ff f98c 	bl	801ae0c <__sinit>
 801baf4:	4b4c      	ldr	r3, [pc, #304]	; (801bc28 <setvbuf+0x150>)
 801baf6:	429c      	cmp	r4, r3
 801baf8:	d152      	bne.n	801bba0 <setvbuf+0xc8>
 801bafa:	6874      	ldr	r4, [r6, #4]
 801bafc:	f1b8 0f02 	cmp.w	r8, #2
 801bb00:	d006      	beq.n	801bb10 <setvbuf+0x38>
 801bb02:	f1b8 0f01 	cmp.w	r8, #1
 801bb06:	f200 8089 	bhi.w	801bc1c <setvbuf+0x144>
 801bb0a:	2d00      	cmp	r5, #0
 801bb0c:	f2c0 8086 	blt.w	801bc1c <setvbuf+0x144>
 801bb10:	4621      	mov	r1, r4
 801bb12:	4630      	mov	r0, r6
 801bb14:	f7ff f910 	bl	801ad38 <_fflush_r>
 801bb18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bb1a:	b141      	cbz	r1, 801bb2e <setvbuf+0x56>
 801bb1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bb20:	4299      	cmp	r1, r3
 801bb22:	d002      	beq.n	801bb2a <setvbuf+0x52>
 801bb24:	4630      	mov	r0, r6
 801bb26:	f7ff fa33 	bl	801af90 <_free_r>
 801bb2a:	2300      	movs	r3, #0
 801bb2c:	6363      	str	r3, [r4, #52]	; 0x34
 801bb2e:	2300      	movs	r3, #0
 801bb30:	61a3      	str	r3, [r4, #24]
 801bb32:	6063      	str	r3, [r4, #4]
 801bb34:	89a3      	ldrh	r3, [r4, #12]
 801bb36:	061b      	lsls	r3, r3, #24
 801bb38:	d503      	bpl.n	801bb42 <setvbuf+0x6a>
 801bb3a:	6921      	ldr	r1, [r4, #16]
 801bb3c:	4630      	mov	r0, r6
 801bb3e:	f7ff fa27 	bl	801af90 <_free_r>
 801bb42:	89a3      	ldrh	r3, [r4, #12]
 801bb44:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 801bb48:	f023 0303 	bic.w	r3, r3, #3
 801bb4c:	f1b8 0f02 	cmp.w	r8, #2
 801bb50:	81a3      	strh	r3, [r4, #12]
 801bb52:	d05d      	beq.n	801bc10 <setvbuf+0x138>
 801bb54:	ab01      	add	r3, sp, #4
 801bb56:	466a      	mov	r2, sp
 801bb58:	4621      	mov	r1, r4
 801bb5a:	4630      	mov	r0, r6
 801bb5c:	f001 f826 	bl	801cbac <__swhatbuf_r>
 801bb60:	89a3      	ldrh	r3, [r4, #12]
 801bb62:	4318      	orrs	r0, r3
 801bb64:	81a0      	strh	r0, [r4, #12]
 801bb66:	bb2d      	cbnz	r5, 801bbb4 <setvbuf+0xdc>
 801bb68:	9d00      	ldr	r5, [sp, #0]
 801bb6a:	4628      	mov	r0, r5
 801bb6c:	f001 f882 	bl	801cc74 <malloc>
 801bb70:	4607      	mov	r7, r0
 801bb72:	2800      	cmp	r0, #0
 801bb74:	d14e      	bne.n	801bc14 <setvbuf+0x13c>
 801bb76:	f8dd 9000 	ldr.w	r9, [sp]
 801bb7a:	45a9      	cmp	r9, r5
 801bb7c:	d13c      	bne.n	801bbf8 <setvbuf+0x120>
 801bb7e:	f04f 30ff 	mov.w	r0, #4294967295
 801bb82:	89a3      	ldrh	r3, [r4, #12]
 801bb84:	f043 0302 	orr.w	r3, r3, #2
 801bb88:	81a3      	strh	r3, [r4, #12]
 801bb8a:	2300      	movs	r3, #0
 801bb8c:	60a3      	str	r3, [r4, #8]
 801bb8e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801bb92:	6023      	str	r3, [r4, #0]
 801bb94:	6123      	str	r3, [r4, #16]
 801bb96:	2301      	movs	r3, #1
 801bb98:	6163      	str	r3, [r4, #20]
 801bb9a:	b003      	add	sp, #12
 801bb9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bba0:	4b22      	ldr	r3, [pc, #136]	; (801bc2c <setvbuf+0x154>)
 801bba2:	429c      	cmp	r4, r3
 801bba4:	d101      	bne.n	801bbaa <setvbuf+0xd2>
 801bba6:	68b4      	ldr	r4, [r6, #8]
 801bba8:	e7a8      	b.n	801bafc <setvbuf+0x24>
 801bbaa:	4b21      	ldr	r3, [pc, #132]	; (801bc30 <setvbuf+0x158>)
 801bbac:	429c      	cmp	r4, r3
 801bbae:	bf08      	it	eq
 801bbb0:	68f4      	ldreq	r4, [r6, #12]
 801bbb2:	e7a3      	b.n	801bafc <setvbuf+0x24>
 801bbb4:	2f00      	cmp	r7, #0
 801bbb6:	d0d8      	beq.n	801bb6a <setvbuf+0x92>
 801bbb8:	69b3      	ldr	r3, [r6, #24]
 801bbba:	b913      	cbnz	r3, 801bbc2 <setvbuf+0xea>
 801bbbc:	4630      	mov	r0, r6
 801bbbe:	f7ff f925 	bl	801ae0c <__sinit>
 801bbc2:	f1b8 0f01 	cmp.w	r8, #1
 801bbc6:	bf08      	it	eq
 801bbc8:	89a3      	ldrheq	r3, [r4, #12]
 801bbca:	6027      	str	r7, [r4, #0]
 801bbcc:	bf04      	itt	eq
 801bbce:	f043 0301 	orreq.w	r3, r3, #1
 801bbd2:	81a3      	strheq	r3, [r4, #12]
 801bbd4:	89a3      	ldrh	r3, [r4, #12]
 801bbd6:	6127      	str	r7, [r4, #16]
 801bbd8:	f013 0008 	ands.w	r0, r3, #8
 801bbdc:	6165      	str	r5, [r4, #20]
 801bbde:	d01b      	beq.n	801bc18 <setvbuf+0x140>
 801bbe0:	f013 0001 	ands.w	r0, r3, #1
 801bbe4:	bf18      	it	ne
 801bbe6:	426d      	negne	r5, r5
 801bbe8:	f04f 0300 	mov.w	r3, #0
 801bbec:	bf1d      	ittte	ne
 801bbee:	60a3      	strne	r3, [r4, #8]
 801bbf0:	61a5      	strne	r5, [r4, #24]
 801bbf2:	4618      	movne	r0, r3
 801bbf4:	60a5      	streq	r5, [r4, #8]
 801bbf6:	e7d0      	b.n	801bb9a <setvbuf+0xc2>
 801bbf8:	4648      	mov	r0, r9
 801bbfa:	f001 f83b 	bl	801cc74 <malloc>
 801bbfe:	4607      	mov	r7, r0
 801bc00:	2800      	cmp	r0, #0
 801bc02:	d0bc      	beq.n	801bb7e <setvbuf+0xa6>
 801bc04:	89a3      	ldrh	r3, [r4, #12]
 801bc06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bc0a:	81a3      	strh	r3, [r4, #12]
 801bc0c:	464d      	mov	r5, r9
 801bc0e:	e7d3      	b.n	801bbb8 <setvbuf+0xe0>
 801bc10:	2000      	movs	r0, #0
 801bc12:	e7b6      	b.n	801bb82 <setvbuf+0xaa>
 801bc14:	46a9      	mov	r9, r5
 801bc16:	e7f5      	b.n	801bc04 <setvbuf+0x12c>
 801bc18:	60a0      	str	r0, [r4, #8]
 801bc1a:	e7be      	b.n	801bb9a <setvbuf+0xc2>
 801bc1c:	f04f 30ff 	mov.w	r0, #4294967295
 801bc20:	e7bb      	b.n	801bb9a <setvbuf+0xc2>
 801bc22:	bf00      	nop
 801bc24:	200014a4 	.word	0x200014a4
 801bc28:	0801dfe0 	.word	0x0801dfe0
 801bc2c:	0801e000 	.word	0x0801e000
 801bc30:	0801dfc0 	.word	0x0801dfc0

0801bc34 <__sread>:
 801bc34:	b510      	push	{r4, lr}
 801bc36:	460c      	mov	r4, r1
 801bc38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bc3c:	f001 fc42 	bl	801d4c4 <_read_r>
 801bc40:	2800      	cmp	r0, #0
 801bc42:	bfab      	itete	ge
 801bc44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801bc46:	89a3      	ldrhlt	r3, [r4, #12]
 801bc48:	181b      	addge	r3, r3, r0
 801bc4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801bc4e:	bfac      	ite	ge
 801bc50:	6563      	strge	r3, [r4, #84]	; 0x54
 801bc52:	81a3      	strhlt	r3, [r4, #12]
 801bc54:	bd10      	pop	{r4, pc}

0801bc56 <__swrite>:
 801bc56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bc5a:	461f      	mov	r7, r3
 801bc5c:	898b      	ldrh	r3, [r1, #12]
 801bc5e:	05db      	lsls	r3, r3, #23
 801bc60:	4605      	mov	r5, r0
 801bc62:	460c      	mov	r4, r1
 801bc64:	4616      	mov	r6, r2
 801bc66:	d505      	bpl.n	801bc74 <__swrite+0x1e>
 801bc68:	2302      	movs	r3, #2
 801bc6a:	2200      	movs	r2, #0
 801bc6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bc70:	f000 ff8a 	bl	801cb88 <_lseek_r>
 801bc74:	89a3      	ldrh	r3, [r4, #12]
 801bc76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bc7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801bc7e:	81a3      	strh	r3, [r4, #12]
 801bc80:	4632      	mov	r2, r6
 801bc82:	463b      	mov	r3, r7
 801bc84:	4628      	mov	r0, r5
 801bc86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bc8a:	f000 b885 	b.w	801bd98 <_write_r>

0801bc8e <__sseek>:
 801bc8e:	b510      	push	{r4, lr}
 801bc90:	460c      	mov	r4, r1
 801bc92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bc96:	f000 ff77 	bl	801cb88 <_lseek_r>
 801bc9a:	1c43      	adds	r3, r0, #1
 801bc9c:	89a3      	ldrh	r3, [r4, #12]
 801bc9e:	bf15      	itete	ne
 801bca0:	6560      	strne	r0, [r4, #84]	; 0x54
 801bca2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801bca6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801bcaa:	81a3      	strheq	r3, [r4, #12]
 801bcac:	bf18      	it	ne
 801bcae:	81a3      	strhne	r3, [r4, #12]
 801bcb0:	bd10      	pop	{r4, pc}

0801bcb2 <__sclose>:
 801bcb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bcb6:	f000 b8ef 	b.w	801be98 <_close_r>

0801bcba <strcpy>:
 801bcba:	4603      	mov	r3, r0
 801bcbc:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bcc0:	f803 2b01 	strb.w	r2, [r3], #1
 801bcc4:	2a00      	cmp	r2, #0
 801bcc6:	d1f9      	bne.n	801bcbc <strcpy+0x2>
 801bcc8:	4770      	bx	lr

0801bcca <strncpy>:
 801bcca:	b570      	push	{r4, r5, r6, lr}
 801bccc:	4604      	mov	r4, r0
 801bcce:	b902      	cbnz	r2, 801bcd2 <strncpy+0x8>
 801bcd0:	bd70      	pop	{r4, r5, r6, pc}
 801bcd2:	4623      	mov	r3, r4
 801bcd4:	f811 5b01 	ldrb.w	r5, [r1], #1
 801bcd8:	f803 5b01 	strb.w	r5, [r3], #1
 801bcdc:	1e56      	subs	r6, r2, #1
 801bcde:	b91d      	cbnz	r5, 801bce8 <strncpy+0x1e>
 801bce0:	4414      	add	r4, r2
 801bce2:	42a3      	cmp	r3, r4
 801bce4:	d103      	bne.n	801bcee <strncpy+0x24>
 801bce6:	bd70      	pop	{r4, r5, r6, pc}
 801bce8:	461c      	mov	r4, r3
 801bcea:	4632      	mov	r2, r6
 801bcec:	e7ef      	b.n	801bcce <strncpy+0x4>
 801bcee:	f803 5b01 	strb.w	r5, [r3], #1
 801bcf2:	e7f6      	b.n	801bce2 <strncpy+0x18>

0801bcf4 <__swbuf_r>:
 801bcf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bcf6:	460e      	mov	r6, r1
 801bcf8:	4614      	mov	r4, r2
 801bcfa:	4605      	mov	r5, r0
 801bcfc:	b118      	cbz	r0, 801bd06 <__swbuf_r+0x12>
 801bcfe:	6983      	ldr	r3, [r0, #24]
 801bd00:	b90b      	cbnz	r3, 801bd06 <__swbuf_r+0x12>
 801bd02:	f7ff f883 	bl	801ae0c <__sinit>
 801bd06:	4b21      	ldr	r3, [pc, #132]	; (801bd8c <__swbuf_r+0x98>)
 801bd08:	429c      	cmp	r4, r3
 801bd0a:	d12a      	bne.n	801bd62 <__swbuf_r+0x6e>
 801bd0c:	686c      	ldr	r4, [r5, #4]
 801bd0e:	69a3      	ldr	r3, [r4, #24]
 801bd10:	60a3      	str	r3, [r4, #8]
 801bd12:	89a3      	ldrh	r3, [r4, #12]
 801bd14:	071a      	lsls	r2, r3, #28
 801bd16:	d52e      	bpl.n	801bd76 <__swbuf_r+0x82>
 801bd18:	6923      	ldr	r3, [r4, #16]
 801bd1a:	b363      	cbz	r3, 801bd76 <__swbuf_r+0x82>
 801bd1c:	6923      	ldr	r3, [r4, #16]
 801bd1e:	6820      	ldr	r0, [r4, #0]
 801bd20:	1ac0      	subs	r0, r0, r3
 801bd22:	6963      	ldr	r3, [r4, #20]
 801bd24:	b2f6      	uxtb	r6, r6
 801bd26:	4298      	cmp	r0, r3
 801bd28:	4637      	mov	r7, r6
 801bd2a:	db04      	blt.n	801bd36 <__swbuf_r+0x42>
 801bd2c:	4621      	mov	r1, r4
 801bd2e:	4628      	mov	r0, r5
 801bd30:	f7ff f802 	bl	801ad38 <_fflush_r>
 801bd34:	bb28      	cbnz	r0, 801bd82 <__swbuf_r+0x8e>
 801bd36:	68a3      	ldr	r3, [r4, #8]
 801bd38:	3b01      	subs	r3, #1
 801bd3a:	60a3      	str	r3, [r4, #8]
 801bd3c:	6823      	ldr	r3, [r4, #0]
 801bd3e:	1c5a      	adds	r2, r3, #1
 801bd40:	6022      	str	r2, [r4, #0]
 801bd42:	701e      	strb	r6, [r3, #0]
 801bd44:	6963      	ldr	r3, [r4, #20]
 801bd46:	3001      	adds	r0, #1
 801bd48:	4298      	cmp	r0, r3
 801bd4a:	d004      	beq.n	801bd56 <__swbuf_r+0x62>
 801bd4c:	89a3      	ldrh	r3, [r4, #12]
 801bd4e:	07db      	lsls	r3, r3, #31
 801bd50:	d519      	bpl.n	801bd86 <__swbuf_r+0x92>
 801bd52:	2e0a      	cmp	r6, #10
 801bd54:	d117      	bne.n	801bd86 <__swbuf_r+0x92>
 801bd56:	4621      	mov	r1, r4
 801bd58:	4628      	mov	r0, r5
 801bd5a:	f7fe ffed 	bl	801ad38 <_fflush_r>
 801bd5e:	b190      	cbz	r0, 801bd86 <__swbuf_r+0x92>
 801bd60:	e00f      	b.n	801bd82 <__swbuf_r+0x8e>
 801bd62:	4b0b      	ldr	r3, [pc, #44]	; (801bd90 <__swbuf_r+0x9c>)
 801bd64:	429c      	cmp	r4, r3
 801bd66:	d101      	bne.n	801bd6c <__swbuf_r+0x78>
 801bd68:	68ac      	ldr	r4, [r5, #8]
 801bd6a:	e7d0      	b.n	801bd0e <__swbuf_r+0x1a>
 801bd6c:	4b09      	ldr	r3, [pc, #36]	; (801bd94 <__swbuf_r+0xa0>)
 801bd6e:	429c      	cmp	r4, r3
 801bd70:	bf08      	it	eq
 801bd72:	68ec      	ldreq	r4, [r5, #12]
 801bd74:	e7cb      	b.n	801bd0e <__swbuf_r+0x1a>
 801bd76:	4621      	mov	r1, r4
 801bd78:	4628      	mov	r0, r5
 801bd7a:	f000 f81f 	bl	801bdbc <__swsetup_r>
 801bd7e:	2800      	cmp	r0, #0
 801bd80:	d0cc      	beq.n	801bd1c <__swbuf_r+0x28>
 801bd82:	f04f 37ff 	mov.w	r7, #4294967295
 801bd86:	4638      	mov	r0, r7
 801bd88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bd8a:	bf00      	nop
 801bd8c:	0801dfe0 	.word	0x0801dfe0
 801bd90:	0801e000 	.word	0x0801e000
 801bd94:	0801dfc0 	.word	0x0801dfc0

0801bd98 <_write_r>:
 801bd98:	b538      	push	{r3, r4, r5, lr}
 801bd9a:	4c07      	ldr	r4, [pc, #28]	; (801bdb8 <_write_r+0x20>)
 801bd9c:	4605      	mov	r5, r0
 801bd9e:	4608      	mov	r0, r1
 801bda0:	4611      	mov	r1, r2
 801bda2:	2200      	movs	r2, #0
 801bda4:	6022      	str	r2, [r4, #0]
 801bda6:	461a      	mov	r2, r3
 801bda8:	f7f1 f882 	bl	800ceb0 <_write>
 801bdac:	1c43      	adds	r3, r0, #1
 801bdae:	d102      	bne.n	801bdb6 <_write_r+0x1e>
 801bdb0:	6823      	ldr	r3, [r4, #0]
 801bdb2:	b103      	cbz	r3, 801bdb6 <_write_r+0x1e>
 801bdb4:	602b      	str	r3, [r5, #0]
 801bdb6:	bd38      	pop	{r3, r4, r5, pc}
 801bdb8:	20003998 	.word	0x20003998

0801bdbc <__swsetup_r>:
 801bdbc:	4b32      	ldr	r3, [pc, #200]	; (801be88 <__swsetup_r+0xcc>)
 801bdbe:	b570      	push	{r4, r5, r6, lr}
 801bdc0:	681d      	ldr	r5, [r3, #0]
 801bdc2:	4606      	mov	r6, r0
 801bdc4:	460c      	mov	r4, r1
 801bdc6:	b125      	cbz	r5, 801bdd2 <__swsetup_r+0x16>
 801bdc8:	69ab      	ldr	r3, [r5, #24]
 801bdca:	b913      	cbnz	r3, 801bdd2 <__swsetup_r+0x16>
 801bdcc:	4628      	mov	r0, r5
 801bdce:	f7ff f81d 	bl	801ae0c <__sinit>
 801bdd2:	4b2e      	ldr	r3, [pc, #184]	; (801be8c <__swsetup_r+0xd0>)
 801bdd4:	429c      	cmp	r4, r3
 801bdd6:	d10f      	bne.n	801bdf8 <__swsetup_r+0x3c>
 801bdd8:	686c      	ldr	r4, [r5, #4]
 801bdda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bdde:	b29a      	uxth	r2, r3
 801bde0:	0715      	lsls	r5, r2, #28
 801bde2:	d42c      	bmi.n	801be3e <__swsetup_r+0x82>
 801bde4:	06d0      	lsls	r0, r2, #27
 801bde6:	d411      	bmi.n	801be0c <__swsetup_r+0x50>
 801bde8:	2209      	movs	r2, #9
 801bdea:	6032      	str	r2, [r6, #0]
 801bdec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bdf0:	81a3      	strh	r3, [r4, #12]
 801bdf2:	f04f 30ff 	mov.w	r0, #4294967295
 801bdf6:	bd70      	pop	{r4, r5, r6, pc}
 801bdf8:	4b25      	ldr	r3, [pc, #148]	; (801be90 <__swsetup_r+0xd4>)
 801bdfa:	429c      	cmp	r4, r3
 801bdfc:	d101      	bne.n	801be02 <__swsetup_r+0x46>
 801bdfe:	68ac      	ldr	r4, [r5, #8]
 801be00:	e7eb      	b.n	801bdda <__swsetup_r+0x1e>
 801be02:	4b24      	ldr	r3, [pc, #144]	; (801be94 <__swsetup_r+0xd8>)
 801be04:	429c      	cmp	r4, r3
 801be06:	bf08      	it	eq
 801be08:	68ec      	ldreq	r4, [r5, #12]
 801be0a:	e7e6      	b.n	801bdda <__swsetup_r+0x1e>
 801be0c:	0751      	lsls	r1, r2, #29
 801be0e:	d512      	bpl.n	801be36 <__swsetup_r+0x7a>
 801be10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801be12:	b141      	cbz	r1, 801be26 <__swsetup_r+0x6a>
 801be14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801be18:	4299      	cmp	r1, r3
 801be1a:	d002      	beq.n	801be22 <__swsetup_r+0x66>
 801be1c:	4630      	mov	r0, r6
 801be1e:	f7ff f8b7 	bl	801af90 <_free_r>
 801be22:	2300      	movs	r3, #0
 801be24:	6363      	str	r3, [r4, #52]	; 0x34
 801be26:	89a3      	ldrh	r3, [r4, #12]
 801be28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801be2c:	81a3      	strh	r3, [r4, #12]
 801be2e:	2300      	movs	r3, #0
 801be30:	6063      	str	r3, [r4, #4]
 801be32:	6923      	ldr	r3, [r4, #16]
 801be34:	6023      	str	r3, [r4, #0]
 801be36:	89a3      	ldrh	r3, [r4, #12]
 801be38:	f043 0308 	orr.w	r3, r3, #8
 801be3c:	81a3      	strh	r3, [r4, #12]
 801be3e:	6923      	ldr	r3, [r4, #16]
 801be40:	b94b      	cbnz	r3, 801be56 <__swsetup_r+0x9a>
 801be42:	89a3      	ldrh	r3, [r4, #12]
 801be44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801be48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801be4c:	d003      	beq.n	801be56 <__swsetup_r+0x9a>
 801be4e:	4621      	mov	r1, r4
 801be50:	4630      	mov	r0, r6
 801be52:	f000 fecf 	bl	801cbf4 <__smakebuf_r>
 801be56:	89a2      	ldrh	r2, [r4, #12]
 801be58:	f012 0301 	ands.w	r3, r2, #1
 801be5c:	d00c      	beq.n	801be78 <__swsetup_r+0xbc>
 801be5e:	2300      	movs	r3, #0
 801be60:	60a3      	str	r3, [r4, #8]
 801be62:	6963      	ldr	r3, [r4, #20]
 801be64:	425b      	negs	r3, r3
 801be66:	61a3      	str	r3, [r4, #24]
 801be68:	6923      	ldr	r3, [r4, #16]
 801be6a:	b953      	cbnz	r3, 801be82 <__swsetup_r+0xc6>
 801be6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801be70:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801be74:	d1ba      	bne.n	801bdec <__swsetup_r+0x30>
 801be76:	bd70      	pop	{r4, r5, r6, pc}
 801be78:	0792      	lsls	r2, r2, #30
 801be7a:	bf58      	it	pl
 801be7c:	6963      	ldrpl	r3, [r4, #20]
 801be7e:	60a3      	str	r3, [r4, #8]
 801be80:	e7f2      	b.n	801be68 <__swsetup_r+0xac>
 801be82:	2000      	movs	r0, #0
 801be84:	e7f7      	b.n	801be76 <__swsetup_r+0xba>
 801be86:	bf00      	nop
 801be88:	200014a4 	.word	0x200014a4
 801be8c:	0801dfe0 	.word	0x0801dfe0
 801be90:	0801e000 	.word	0x0801e000
 801be94:	0801dfc0 	.word	0x0801dfc0

0801be98 <_close_r>:
 801be98:	b538      	push	{r3, r4, r5, lr}
 801be9a:	4c06      	ldr	r4, [pc, #24]	; (801beb4 <_close_r+0x1c>)
 801be9c:	2300      	movs	r3, #0
 801be9e:	4605      	mov	r5, r0
 801bea0:	4608      	mov	r0, r1
 801bea2:	6023      	str	r3, [r4, #0]
 801bea4:	f7f1 f82c 	bl	800cf00 <_close>
 801bea8:	1c43      	adds	r3, r0, #1
 801beaa:	d102      	bne.n	801beb2 <_close_r+0x1a>
 801beac:	6823      	ldr	r3, [r4, #0]
 801beae:	b103      	cbz	r3, 801beb2 <_close_r+0x1a>
 801beb0:	602b      	str	r3, [r5, #0]
 801beb2:	bd38      	pop	{r3, r4, r5, pc}
 801beb4:	20003998 	.word	0x20003998

0801beb8 <quorem>:
 801beb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bebc:	6903      	ldr	r3, [r0, #16]
 801bebe:	690c      	ldr	r4, [r1, #16]
 801bec0:	429c      	cmp	r4, r3
 801bec2:	4680      	mov	r8, r0
 801bec4:	f300 8082 	bgt.w	801bfcc <quorem+0x114>
 801bec8:	3c01      	subs	r4, #1
 801beca:	f101 0714 	add.w	r7, r1, #20
 801bece:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 801bed2:	f100 0614 	add.w	r6, r0, #20
 801bed6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801beda:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801bede:	eb06 030e 	add.w	r3, r6, lr
 801bee2:	3501      	adds	r5, #1
 801bee4:	eb07 090e 	add.w	r9, r7, lr
 801bee8:	9301      	str	r3, [sp, #4]
 801beea:	fbb0 f5f5 	udiv	r5, r0, r5
 801beee:	b395      	cbz	r5, 801bf56 <quorem+0x9e>
 801bef0:	f04f 0a00 	mov.w	sl, #0
 801bef4:	4638      	mov	r0, r7
 801bef6:	46b4      	mov	ip, r6
 801bef8:	46d3      	mov	fp, sl
 801befa:	f850 2b04 	ldr.w	r2, [r0], #4
 801befe:	b293      	uxth	r3, r2
 801bf00:	fb05 a303 	mla	r3, r5, r3, sl
 801bf04:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801bf08:	b29b      	uxth	r3, r3
 801bf0a:	ebab 0303 	sub.w	r3, fp, r3
 801bf0e:	0c12      	lsrs	r2, r2, #16
 801bf10:	f8bc b000 	ldrh.w	fp, [ip]
 801bf14:	fb05 a202 	mla	r2, r5, r2, sl
 801bf18:	fa13 f38b 	uxtah	r3, r3, fp
 801bf1c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801bf20:	fa1f fb82 	uxth.w	fp, r2
 801bf24:	f8dc 2000 	ldr.w	r2, [ip]
 801bf28:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801bf2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801bf30:	b29b      	uxth	r3, r3
 801bf32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801bf36:	4581      	cmp	r9, r0
 801bf38:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801bf3c:	f84c 3b04 	str.w	r3, [ip], #4
 801bf40:	d2db      	bcs.n	801befa <quorem+0x42>
 801bf42:	f856 300e 	ldr.w	r3, [r6, lr]
 801bf46:	b933      	cbnz	r3, 801bf56 <quorem+0x9e>
 801bf48:	9b01      	ldr	r3, [sp, #4]
 801bf4a:	3b04      	subs	r3, #4
 801bf4c:	429e      	cmp	r6, r3
 801bf4e:	461a      	mov	r2, r3
 801bf50:	d330      	bcc.n	801bfb4 <quorem+0xfc>
 801bf52:	f8c8 4010 	str.w	r4, [r8, #16]
 801bf56:	4640      	mov	r0, r8
 801bf58:	f001 f89f 	bl	801d09a <__mcmp>
 801bf5c:	2800      	cmp	r0, #0
 801bf5e:	db25      	blt.n	801bfac <quorem+0xf4>
 801bf60:	3501      	adds	r5, #1
 801bf62:	4630      	mov	r0, r6
 801bf64:	f04f 0e00 	mov.w	lr, #0
 801bf68:	f857 2b04 	ldr.w	r2, [r7], #4
 801bf6c:	f8d0 c000 	ldr.w	ip, [r0]
 801bf70:	b293      	uxth	r3, r2
 801bf72:	ebae 0303 	sub.w	r3, lr, r3
 801bf76:	0c12      	lsrs	r2, r2, #16
 801bf78:	fa13 f38c 	uxtah	r3, r3, ip
 801bf7c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801bf80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801bf84:	b29b      	uxth	r3, r3
 801bf86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801bf8a:	45b9      	cmp	r9, r7
 801bf8c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801bf90:	f840 3b04 	str.w	r3, [r0], #4
 801bf94:	d2e8      	bcs.n	801bf68 <quorem+0xb0>
 801bf96:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801bf9a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801bf9e:	b92a      	cbnz	r2, 801bfac <quorem+0xf4>
 801bfa0:	3b04      	subs	r3, #4
 801bfa2:	429e      	cmp	r6, r3
 801bfa4:	461a      	mov	r2, r3
 801bfa6:	d30b      	bcc.n	801bfc0 <quorem+0x108>
 801bfa8:	f8c8 4010 	str.w	r4, [r8, #16]
 801bfac:	4628      	mov	r0, r5
 801bfae:	b003      	add	sp, #12
 801bfb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bfb4:	6812      	ldr	r2, [r2, #0]
 801bfb6:	3b04      	subs	r3, #4
 801bfb8:	2a00      	cmp	r2, #0
 801bfba:	d1ca      	bne.n	801bf52 <quorem+0x9a>
 801bfbc:	3c01      	subs	r4, #1
 801bfbe:	e7c5      	b.n	801bf4c <quorem+0x94>
 801bfc0:	6812      	ldr	r2, [r2, #0]
 801bfc2:	3b04      	subs	r3, #4
 801bfc4:	2a00      	cmp	r2, #0
 801bfc6:	d1ef      	bne.n	801bfa8 <quorem+0xf0>
 801bfc8:	3c01      	subs	r4, #1
 801bfca:	e7ea      	b.n	801bfa2 <quorem+0xea>
 801bfcc:	2000      	movs	r0, #0
 801bfce:	e7ee      	b.n	801bfae <quorem+0xf6>

0801bfd0 <_dtoa_r>:
 801bfd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfd4:	ec57 6b10 	vmov	r6, r7, d0
 801bfd8:	b097      	sub	sp, #92	; 0x5c
 801bfda:	e9cd 6700 	strd	r6, r7, [sp]
 801bfde:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801bfe0:	9107      	str	r1, [sp, #28]
 801bfe2:	4604      	mov	r4, r0
 801bfe4:	920a      	str	r2, [sp, #40]	; 0x28
 801bfe6:	930f      	str	r3, [sp, #60]	; 0x3c
 801bfe8:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801bfea:	b93e      	cbnz	r6, 801bffc <_dtoa_r+0x2c>
 801bfec:	2010      	movs	r0, #16
 801bfee:	f000 fe41 	bl	801cc74 <malloc>
 801bff2:	6260      	str	r0, [r4, #36]	; 0x24
 801bff4:	6046      	str	r6, [r0, #4]
 801bff6:	6086      	str	r6, [r0, #8]
 801bff8:	6006      	str	r6, [r0, #0]
 801bffa:	60c6      	str	r6, [r0, #12]
 801bffc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bffe:	6819      	ldr	r1, [r3, #0]
 801c000:	b151      	cbz	r1, 801c018 <_dtoa_r+0x48>
 801c002:	685a      	ldr	r2, [r3, #4]
 801c004:	604a      	str	r2, [r1, #4]
 801c006:	2301      	movs	r3, #1
 801c008:	4093      	lsls	r3, r2
 801c00a:	608b      	str	r3, [r1, #8]
 801c00c:	4620      	mov	r0, r4
 801c00e:	f000 fe6f 	bl	801ccf0 <_Bfree>
 801c012:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c014:	2200      	movs	r2, #0
 801c016:	601a      	str	r2, [r3, #0]
 801c018:	9b01      	ldr	r3, [sp, #4]
 801c01a:	2b00      	cmp	r3, #0
 801c01c:	bfbf      	itttt	lt
 801c01e:	2301      	movlt	r3, #1
 801c020:	602b      	strlt	r3, [r5, #0]
 801c022:	9b01      	ldrlt	r3, [sp, #4]
 801c024:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801c028:	bfb2      	itee	lt
 801c02a:	9301      	strlt	r3, [sp, #4]
 801c02c:	2300      	movge	r3, #0
 801c02e:	602b      	strge	r3, [r5, #0]
 801c030:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c034:	4ba8      	ldr	r3, [pc, #672]	; (801c2d8 <_dtoa_r+0x308>)
 801c036:	ea33 0308 	bics.w	r3, r3, r8
 801c03a:	d11b      	bne.n	801c074 <_dtoa_r+0xa4>
 801c03c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c03e:	f242 730f 	movw	r3, #9999	; 0x270f
 801c042:	6013      	str	r3, [r2, #0]
 801c044:	9b00      	ldr	r3, [sp, #0]
 801c046:	b923      	cbnz	r3, 801c052 <_dtoa_r+0x82>
 801c048:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801c04c:	2800      	cmp	r0, #0
 801c04e:	f000 8578 	beq.w	801cb42 <_dtoa_r+0xb72>
 801c052:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c054:	b953      	cbnz	r3, 801c06c <_dtoa_r+0x9c>
 801c056:	4ba1      	ldr	r3, [pc, #644]	; (801c2dc <_dtoa_r+0x30c>)
 801c058:	e021      	b.n	801c09e <_dtoa_r+0xce>
 801c05a:	4ba1      	ldr	r3, [pc, #644]	; (801c2e0 <_dtoa_r+0x310>)
 801c05c:	9302      	str	r3, [sp, #8]
 801c05e:	3308      	adds	r3, #8
 801c060:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801c062:	6013      	str	r3, [r2, #0]
 801c064:	9802      	ldr	r0, [sp, #8]
 801c066:	b017      	add	sp, #92	; 0x5c
 801c068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c06c:	4b9b      	ldr	r3, [pc, #620]	; (801c2dc <_dtoa_r+0x30c>)
 801c06e:	9302      	str	r3, [sp, #8]
 801c070:	3303      	adds	r3, #3
 801c072:	e7f5      	b.n	801c060 <_dtoa_r+0x90>
 801c074:	e9dd 6700 	ldrd	r6, r7, [sp]
 801c078:	2200      	movs	r2, #0
 801c07a:	2300      	movs	r3, #0
 801c07c:	4630      	mov	r0, r6
 801c07e:	4639      	mov	r1, r7
 801c080:	f7e4 fd26 	bl	8000ad0 <__aeabi_dcmpeq>
 801c084:	4681      	mov	r9, r0
 801c086:	b160      	cbz	r0, 801c0a2 <_dtoa_r+0xd2>
 801c088:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c08a:	2301      	movs	r3, #1
 801c08c:	6013      	str	r3, [r2, #0]
 801c08e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c090:	2b00      	cmp	r3, #0
 801c092:	f000 8553 	beq.w	801cb3c <_dtoa_r+0xb6c>
 801c096:	4b93      	ldr	r3, [pc, #588]	; (801c2e4 <_dtoa_r+0x314>)
 801c098:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801c09a:	6013      	str	r3, [r2, #0]
 801c09c:	3b01      	subs	r3, #1
 801c09e:	9302      	str	r3, [sp, #8]
 801c0a0:	e7e0      	b.n	801c064 <_dtoa_r+0x94>
 801c0a2:	aa14      	add	r2, sp, #80	; 0x50
 801c0a4:	a915      	add	r1, sp, #84	; 0x54
 801c0a6:	ec47 6b10 	vmov	d0, r6, r7
 801c0aa:	4620      	mov	r0, r4
 801c0ac:	f001 f86d 	bl	801d18a <__d2b>
 801c0b0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801c0b4:	4682      	mov	sl, r0
 801c0b6:	2d00      	cmp	r5, #0
 801c0b8:	d07e      	beq.n	801c1b8 <_dtoa_r+0x1e8>
 801c0ba:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801c0be:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 801c0c2:	4630      	mov	r0, r6
 801c0c4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801c0c8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801c0cc:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 801c0d0:	2200      	movs	r2, #0
 801c0d2:	4b85      	ldr	r3, [pc, #532]	; (801c2e8 <_dtoa_r+0x318>)
 801c0d4:	f7e4 f8e0 	bl	8000298 <__aeabi_dsub>
 801c0d8:	a379      	add	r3, pc, #484	; (adr r3, 801c2c0 <_dtoa_r+0x2f0>)
 801c0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0de:	f7e4 fa8f 	bl	8000600 <__aeabi_dmul>
 801c0e2:	a379      	add	r3, pc, #484	; (adr r3, 801c2c8 <_dtoa_r+0x2f8>)
 801c0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0e8:	f7e4 f8d8 	bl	800029c <__adddf3>
 801c0ec:	4606      	mov	r6, r0
 801c0ee:	4628      	mov	r0, r5
 801c0f0:	460f      	mov	r7, r1
 801c0f2:	f7e4 fa1f 	bl	8000534 <__aeabi_i2d>
 801c0f6:	a376      	add	r3, pc, #472	; (adr r3, 801c2d0 <_dtoa_r+0x300>)
 801c0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0fc:	f7e4 fa80 	bl	8000600 <__aeabi_dmul>
 801c100:	4602      	mov	r2, r0
 801c102:	460b      	mov	r3, r1
 801c104:	4630      	mov	r0, r6
 801c106:	4639      	mov	r1, r7
 801c108:	f7e4 f8c8 	bl	800029c <__adddf3>
 801c10c:	4606      	mov	r6, r0
 801c10e:	460f      	mov	r7, r1
 801c110:	f7e4 fd26 	bl	8000b60 <__aeabi_d2iz>
 801c114:	2200      	movs	r2, #0
 801c116:	4683      	mov	fp, r0
 801c118:	2300      	movs	r3, #0
 801c11a:	4630      	mov	r0, r6
 801c11c:	4639      	mov	r1, r7
 801c11e:	f7e4 fce1 	bl	8000ae4 <__aeabi_dcmplt>
 801c122:	b158      	cbz	r0, 801c13c <_dtoa_r+0x16c>
 801c124:	4658      	mov	r0, fp
 801c126:	f7e4 fa05 	bl	8000534 <__aeabi_i2d>
 801c12a:	4602      	mov	r2, r0
 801c12c:	460b      	mov	r3, r1
 801c12e:	4630      	mov	r0, r6
 801c130:	4639      	mov	r1, r7
 801c132:	f7e4 fccd 	bl	8000ad0 <__aeabi_dcmpeq>
 801c136:	b908      	cbnz	r0, 801c13c <_dtoa_r+0x16c>
 801c138:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c13c:	f1bb 0f16 	cmp.w	fp, #22
 801c140:	d859      	bhi.n	801c1f6 <_dtoa_r+0x226>
 801c142:	496a      	ldr	r1, [pc, #424]	; (801c2ec <_dtoa_r+0x31c>)
 801c144:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 801c148:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c14c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c150:	f7e4 fce6 	bl	8000b20 <__aeabi_dcmpgt>
 801c154:	2800      	cmp	r0, #0
 801c156:	d050      	beq.n	801c1fa <_dtoa_r+0x22a>
 801c158:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c15c:	2300      	movs	r3, #0
 801c15e:	930e      	str	r3, [sp, #56]	; 0x38
 801c160:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c162:	1b5d      	subs	r5, r3, r5
 801c164:	1e6b      	subs	r3, r5, #1
 801c166:	9306      	str	r3, [sp, #24]
 801c168:	bf45      	ittet	mi
 801c16a:	f1c5 0301 	rsbmi	r3, r5, #1
 801c16e:	9305      	strmi	r3, [sp, #20]
 801c170:	2300      	movpl	r3, #0
 801c172:	2300      	movmi	r3, #0
 801c174:	bf4c      	ite	mi
 801c176:	9306      	strmi	r3, [sp, #24]
 801c178:	9305      	strpl	r3, [sp, #20]
 801c17a:	f1bb 0f00 	cmp.w	fp, #0
 801c17e:	db3e      	blt.n	801c1fe <_dtoa_r+0x22e>
 801c180:	9b06      	ldr	r3, [sp, #24]
 801c182:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801c186:	445b      	add	r3, fp
 801c188:	9306      	str	r3, [sp, #24]
 801c18a:	2300      	movs	r3, #0
 801c18c:	9308      	str	r3, [sp, #32]
 801c18e:	9b07      	ldr	r3, [sp, #28]
 801c190:	2b09      	cmp	r3, #9
 801c192:	f200 80af 	bhi.w	801c2f4 <_dtoa_r+0x324>
 801c196:	2b05      	cmp	r3, #5
 801c198:	bfc4      	itt	gt
 801c19a:	3b04      	subgt	r3, #4
 801c19c:	9307      	strgt	r3, [sp, #28]
 801c19e:	9b07      	ldr	r3, [sp, #28]
 801c1a0:	f1a3 0302 	sub.w	r3, r3, #2
 801c1a4:	bfcc      	ite	gt
 801c1a6:	2600      	movgt	r6, #0
 801c1a8:	2601      	movle	r6, #1
 801c1aa:	2b03      	cmp	r3, #3
 801c1ac:	f200 80ae 	bhi.w	801c30c <_dtoa_r+0x33c>
 801c1b0:	e8df f003 	tbb	[pc, r3]
 801c1b4:	772f8482 	.word	0x772f8482
 801c1b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c1ba:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801c1bc:	441d      	add	r5, r3
 801c1be:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801c1c2:	2b20      	cmp	r3, #32
 801c1c4:	dd11      	ble.n	801c1ea <_dtoa_r+0x21a>
 801c1c6:	9a00      	ldr	r2, [sp, #0]
 801c1c8:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801c1cc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 801c1d0:	fa22 f000 	lsr.w	r0, r2, r0
 801c1d4:	fa08 f303 	lsl.w	r3, r8, r3
 801c1d8:	4318      	orrs	r0, r3
 801c1da:	f7e4 f99b 	bl	8000514 <__aeabi_ui2d>
 801c1de:	2301      	movs	r3, #1
 801c1e0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801c1e4:	3d01      	subs	r5, #1
 801c1e6:	9312      	str	r3, [sp, #72]	; 0x48
 801c1e8:	e772      	b.n	801c0d0 <_dtoa_r+0x100>
 801c1ea:	f1c3 0020 	rsb	r0, r3, #32
 801c1ee:	9b00      	ldr	r3, [sp, #0]
 801c1f0:	fa03 f000 	lsl.w	r0, r3, r0
 801c1f4:	e7f1      	b.n	801c1da <_dtoa_r+0x20a>
 801c1f6:	2301      	movs	r3, #1
 801c1f8:	e7b1      	b.n	801c15e <_dtoa_r+0x18e>
 801c1fa:	900e      	str	r0, [sp, #56]	; 0x38
 801c1fc:	e7b0      	b.n	801c160 <_dtoa_r+0x190>
 801c1fe:	9b05      	ldr	r3, [sp, #20]
 801c200:	eba3 030b 	sub.w	r3, r3, fp
 801c204:	9305      	str	r3, [sp, #20]
 801c206:	f1cb 0300 	rsb	r3, fp, #0
 801c20a:	9308      	str	r3, [sp, #32]
 801c20c:	2300      	movs	r3, #0
 801c20e:	930b      	str	r3, [sp, #44]	; 0x2c
 801c210:	e7bd      	b.n	801c18e <_dtoa_r+0x1be>
 801c212:	2301      	movs	r3, #1
 801c214:	9309      	str	r3, [sp, #36]	; 0x24
 801c216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c218:	2b00      	cmp	r3, #0
 801c21a:	dd7a      	ble.n	801c312 <_dtoa_r+0x342>
 801c21c:	9304      	str	r3, [sp, #16]
 801c21e:	9303      	str	r3, [sp, #12]
 801c220:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801c222:	2200      	movs	r2, #0
 801c224:	606a      	str	r2, [r5, #4]
 801c226:	2104      	movs	r1, #4
 801c228:	f101 0214 	add.w	r2, r1, #20
 801c22c:	429a      	cmp	r2, r3
 801c22e:	d975      	bls.n	801c31c <_dtoa_r+0x34c>
 801c230:	6869      	ldr	r1, [r5, #4]
 801c232:	4620      	mov	r0, r4
 801c234:	f000 fd28 	bl	801cc88 <_Balloc>
 801c238:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c23a:	6028      	str	r0, [r5, #0]
 801c23c:	681b      	ldr	r3, [r3, #0]
 801c23e:	9302      	str	r3, [sp, #8]
 801c240:	9b03      	ldr	r3, [sp, #12]
 801c242:	2b0e      	cmp	r3, #14
 801c244:	f200 80e5 	bhi.w	801c412 <_dtoa_r+0x442>
 801c248:	2e00      	cmp	r6, #0
 801c24a:	f000 80e2 	beq.w	801c412 <_dtoa_r+0x442>
 801c24e:	ed9d 7b00 	vldr	d7, [sp]
 801c252:	f1bb 0f00 	cmp.w	fp, #0
 801c256:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801c25a:	dd74      	ble.n	801c346 <_dtoa_r+0x376>
 801c25c:	4a23      	ldr	r2, [pc, #140]	; (801c2ec <_dtoa_r+0x31c>)
 801c25e:	f00b 030f 	and.w	r3, fp, #15
 801c262:	ea4f 162b 	mov.w	r6, fp, asr #4
 801c266:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801c26a:	06f0      	lsls	r0, r6, #27
 801c26c:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c270:	d559      	bpl.n	801c326 <_dtoa_r+0x356>
 801c272:	4b1f      	ldr	r3, [pc, #124]	; (801c2f0 <_dtoa_r+0x320>)
 801c274:	ec51 0b17 	vmov	r0, r1, d7
 801c278:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801c27c:	f7e4 faea 	bl	8000854 <__aeabi_ddiv>
 801c280:	e9cd 0100 	strd	r0, r1, [sp]
 801c284:	f006 060f 	and.w	r6, r6, #15
 801c288:	2503      	movs	r5, #3
 801c28a:	4f19      	ldr	r7, [pc, #100]	; (801c2f0 <_dtoa_r+0x320>)
 801c28c:	2e00      	cmp	r6, #0
 801c28e:	d14c      	bne.n	801c32a <_dtoa_r+0x35a>
 801c290:	4642      	mov	r2, r8
 801c292:	464b      	mov	r3, r9
 801c294:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c298:	f7e4 fadc 	bl	8000854 <__aeabi_ddiv>
 801c29c:	e9cd 0100 	strd	r0, r1, [sp]
 801c2a0:	e06a      	b.n	801c378 <_dtoa_r+0x3a8>
 801c2a2:	2301      	movs	r3, #1
 801c2a4:	9309      	str	r3, [sp, #36]	; 0x24
 801c2a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c2a8:	445b      	add	r3, fp
 801c2aa:	9304      	str	r3, [sp, #16]
 801c2ac:	3301      	adds	r3, #1
 801c2ae:	2b01      	cmp	r3, #1
 801c2b0:	9303      	str	r3, [sp, #12]
 801c2b2:	bfb8      	it	lt
 801c2b4:	2301      	movlt	r3, #1
 801c2b6:	e7b3      	b.n	801c220 <_dtoa_r+0x250>
 801c2b8:	2300      	movs	r3, #0
 801c2ba:	e7ab      	b.n	801c214 <_dtoa_r+0x244>
 801c2bc:	2300      	movs	r3, #0
 801c2be:	e7f1      	b.n	801c2a4 <_dtoa_r+0x2d4>
 801c2c0:	636f4361 	.word	0x636f4361
 801c2c4:	3fd287a7 	.word	0x3fd287a7
 801c2c8:	8b60c8b3 	.word	0x8b60c8b3
 801c2cc:	3fc68a28 	.word	0x3fc68a28
 801c2d0:	509f79fb 	.word	0x509f79fb
 801c2d4:	3fd34413 	.word	0x3fd34413
 801c2d8:	7ff00000 	.word	0x7ff00000
 801c2dc:	0801e061 	.word	0x0801e061
 801c2e0:	0801e058 	.word	0x0801e058
 801c2e4:	0801e035 	.word	0x0801e035
 801c2e8:	3ff80000 	.word	0x3ff80000
 801c2ec:	0801e090 	.word	0x0801e090
 801c2f0:	0801e068 	.word	0x0801e068
 801c2f4:	2601      	movs	r6, #1
 801c2f6:	2300      	movs	r3, #0
 801c2f8:	9307      	str	r3, [sp, #28]
 801c2fa:	9609      	str	r6, [sp, #36]	; 0x24
 801c2fc:	f04f 33ff 	mov.w	r3, #4294967295
 801c300:	9304      	str	r3, [sp, #16]
 801c302:	9303      	str	r3, [sp, #12]
 801c304:	2200      	movs	r2, #0
 801c306:	2312      	movs	r3, #18
 801c308:	920a      	str	r2, [sp, #40]	; 0x28
 801c30a:	e789      	b.n	801c220 <_dtoa_r+0x250>
 801c30c:	2301      	movs	r3, #1
 801c30e:	9309      	str	r3, [sp, #36]	; 0x24
 801c310:	e7f4      	b.n	801c2fc <_dtoa_r+0x32c>
 801c312:	2301      	movs	r3, #1
 801c314:	9304      	str	r3, [sp, #16]
 801c316:	9303      	str	r3, [sp, #12]
 801c318:	461a      	mov	r2, r3
 801c31a:	e7f5      	b.n	801c308 <_dtoa_r+0x338>
 801c31c:	686a      	ldr	r2, [r5, #4]
 801c31e:	3201      	adds	r2, #1
 801c320:	606a      	str	r2, [r5, #4]
 801c322:	0049      	lsls	r1, r1, #1
 801c324:	e780      	b.n	801c228 <_dtoa_r+0x258>
 801c326:	2502      	movs	r5, #2
 801c328:	e7af      	b.n	801c28a <_dtoa_r+0x2ba>
 801c32a:	07f1      	lsls	r1, r6, #31
 801c32c:	d508      	bpl.n	801c340 <_dtoa_r+0x370>
 801c32e:	4640      	mov	r0, r8
 801c330:	4649      	mov	r1, r9
 801c332:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c336:	f7e4 f963 	bl	8000600 <__aeabi_dmul>
 801c33a:	3501      	adds	r5, #1
 801c33c:	4680      	mov	r8, r0
 801c33e:	4689      	mov	r9, r1
 801c340:	1076      	asrs	r6, r6, #1
 801c342:	3708      	adds	r7, #8
 801c344:	e7a2      	b.n	801c28c <_dtoa_r+0x2bc>
 801c346:	f000 809d 	beq.w	801c484 <_dtoa_r+0x4b4>
 801c34a:	f1cb 0600 	rsb	r6, fp, #0
 801c34e:	4b9f      	ldr	r3, [pc, #636]	; (801c5cc <_dtoa_r+0x5fc>)
 801c350:	4f9f      	ldr	r7, [pc, #636]	; (801c5d0 <_dtoa_r+0x600>)
 801c352:	f006 020f 	and.w	r2, r6, #15
 801c356:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c35e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c362:	f7e4 f94d 	bl	8000600 <__aeabi_dmul>
 801c366:	e9cd 0100 	strd	r0, r1, [sp]
 801c36a:	1136      	asrs	r6, r6, #4
 801c36c:	2300      	movs	r3, #0
 801c36e:	2502      	movs	r5, #2
 801c370:	2e00      	cmp	r6, #0
 801c372:	d17c      	bne.n	801c46e <_dtoa_r+0x49e>
 801c374:	2b00      	cmp	r3, #0
 801c376:	d191      	bne.n	801c29c <_dtoa_r+0x2cc>
 801c378:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c37a:	2b00      	cmp	r3, #0
 801c37c:	f000 8084 	beq.w	801c488 <_dtoa_r+0x4b8>
 801c380:	e9dd 8900 	ldrd	r8, r9, [sp]
 801c384:	2200      	movs	r2, #0
 801c386:	4b93      	ldr	r3, [pc, #588]	; (801c5d4 <_dtoa_r+0x604>)
 801c388:	4640      	mov	r0, r8
 801c38a:	4649      	mov	r1, r9
 801c38c:	f7e4 fbaa 	bl	8000ae4 <__aeabi_dcmplt>
 801c390:	2800      	cmp	r0, #0
 801c392:	d079      	beq.n	801c488 <_dtoa_r+0x4b8>
 801c394:	9b03      	ldr	r3, [sp, #12]
 801c396:	2b00      	cmp	r3, #0
 801c398:	d076      	beq.n	801c488 <_dtoa_r+0x4b8>
 801c39a:	9b04      	ldr	r3, [sp, #16]
 801c39c:	2b00      	cmp	r3, #0
 801c39e:	dd34      	ble.n	801c40a <_dtoa_r+0x43a>
 801c3a0:	2200      	movs	r2, #0
 801c3a2:	4b8d      	ldr	r3, [pc, #564]	; (801c5d8 <_dtoa_r+0x608>)
 801c3a4:	4640      	mov	r0, r8
 801c3a6:	4649      	mov	r1, r9
 801c3a8:	f7e4 f92a 	bl	8000600 <__aeabi_dmul>
 801c3ac:	e9cd 0100 	strd	r0, r1, [sp]
 801c3b0:	9e04      	ldr	r6, [sp, #16]
 801c3b2:	f10b 37ff 	add.w	r7, fp, #4294967295
 801c3b6:	3501      	adds	r5, #1
 801c3b8:	4628      	mov	r0, r5
 801c3ba:	f7e4 f8bb 	bl	8000534 <__aeabi_i2d>
 801c3be:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c3c2:	f7e4 f91d 	bl	8000600 <__aeabi_dmul>
 801c3c6:	2200      	movs	r2, #0
 801c3c8:	4b84      	ldr	r3, [pc, #528]	; (801c5dc <_dtoa_r+0x60c>)
 801c3ca:	f7e3 ff67 	bl	800029c <__adddf3>
 801c3ce:	4680      	mov	r8, r0
 801c3d0:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 801c3d4:	2e00      	cmp	r6, #0
 801c3d6:	d15a      	bne.n	801c48e <_dtoa_r+0x4be>
 801c3d8:	2200      	movs	r2, #0
 801c3da:	4b81      	ldr	r3, [pc, #516]	; (801c5e0 <_dtoa_r+0x610>)
 801c3dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c3e0:	f7e3 ff5a 	bl	8000298 <__aeabi_dsub>
 801c3e4:	4642      	mov	r2, r8
 801c3e6:	464b      	mov	r3, r9
 801c3e8:	e9cd 0100 	strd	r0, r1, [sp]
 801c3ec:	f7e4 fb98 	bl	8000b20 <__aeabi_dcmpgt>
 801c3f0:	2800      	cmp	r0, #0
 801c3f2:	f040 829b 	bne.w	801c92c <_dtoa_r+0x95c>
 801c3f6:	4642      	mov	r2, r8
 801c3f8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801c3fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c400:	f7e4 fb70 	bl	8000ae4 <__aeabi_dcmplt>
 801c404:	2800      	cmp	r0, #0
 801c406:	f040 828f 	bne.w	801c928 <_dtoa_r+0x958>
 801c40a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801c40e:	e9cd 2300 	strd	r2, r3, [sp]
 801c412:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c414:	2b00      	cmp	r3, #0
 801c416:	f2c0 8150 	blt.w	801c6ba <_dtoa_r+0x6ea>
 801c41a:	f1bb 0f0e 	cmp.w	fp, #14
 801c41e:	f300 814c 	bgt.w	801c6ba <_dtoa_r+0x6ea>
 801c422:	4b6a      	ldr	r3, [pc, #424]	; (801c5cc <_dtoa_r+0x5fc>)
 801c424:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801c428:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c42c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c42e:	2b00      	cmp	r3, #0
 801c430:	f280 80da 	bge.w	801c5e8 <_dtoa_r+0x618>
 801c434:	9b03      	ldr	r3, [sp, #12]
 801c436:	2b00      	cmp	r3, #0
 801c438:	f300 80d6 	bgt.w	801c5e8 <_dtoa_r+0x618>
 801c43c:	f040 8273 	bne.w	801c926 <_dtoa_r+0x956>
 801c440:	2200      	movs	r2, #0
 801c442:	4b67      	ldr	r3, [pc, #412]	; (801c5e0 <_dtoa_r+0x610>)
 801c444:	4640      	mov	r0, r8
 801c446:	4649      	mov	r1, r9
 801c448:	f7e4 f8da 	bl	8000600 <__aeabi_dmul>
 801c44c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c450:	f7e4 fb5c 	bl	8000b0c <__aeabi_dcmpge>
 801c454:	9e03      	ldr	r6, [sp, #12]
 801c456:	4637      	mov	r7, r6
 801c458:	2800      	cmp	r0, #0
 801c45a:	f040 824a 	bne.w	801c8f2 <_dtoa_r+0x922>
 801c45e:	9b02      	ldr	r3, [sp, #8]
 801c460:	9a02      	ldr	r2, [sp, #8]
 801c462:	1c5d      	adds	r5, r3, #1
 801c464:	2331      	movs	r3, #49	; 0x31
 801c466:	7013      	strb	r3, [r2, #0]
 801c468:	f10b 0b01 	add.w	fp, fp, #1
 801c46c:	e245      	b.n	801c8fa <_dtoa_r+0x92a>
 801c46e:	07f2      	lsls	r2, r6, #31
 801c470:	d505      	bpl.n	801c47e <_dtoa_r+0x4ae>
 801c472:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c476:	f7e4 f8c3 	bl	8000600 <__aeabi_dmul>
 801c47a:	3501      	adds	r5, #1
 801c47c:	2301      	movs	r3, #1
 801c47e:	1076      	asrs	r6, r6, #1
 801c480:	3708      	adds	r7, #8
 801c482:	e775      	b.n	801c370 <_dtoa_r+0x3a0>
 801c484:	2502      	movs	r5, #2
 801c486:	e777      	b.n	801c378 <_dtoa_r+0x3a8>
 801c488:	465f      	mov	r7, fp
 801c48a:	9e03      	ldr	r6, [sp, #12]
 801c48c:	e794      	b.n	801c3b8 <_dtoa_r+0x3e8>
 801c48e:	9a02      	ldr	r2, [sp, #8]
 801c490:	4b4e      	ldr	r3, [pc, #312]	; (801c5cc <_dtoa_r+0x5fc>)
 801c492:	4432      	add	r2, r6
 801c494:	9213      	str	r2, [sp, #76]	; 0x4c
 801c496:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c498:	1e71      	subs	r1, r6, #1
 801c49a:	2a00      	cmp	r2, #0
 801c49c:	d048      	beq.n	801c530 <_dtoa_r+0x560>
 801c49e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801c4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4a6:	2000      	movs	r0, #0
 801c4a8:	494e      	ldr	r1, [pc, #312]	; (801c5e4 <_dtoa_r+0x614>)
 801c4aa:	f7e4 f9d3 	bl	8000854 <__aeabi_ddiv>
 801c4ae:	4642      	mov	r2, r8
 801c4b0:	464b      	mov	r3, r9
 801c4b2:	f7e3 fef1 	bl	8000298 <__aeabi_dsub>
 801c4b6:	9d02      	ldr	r5, [sp, #8]
 801c4b8:	4680      	mov	r8, r0
 801c4ba:	4689      	mov	r9, r1
 801c4bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c4c0:	f7e4 fb4e 	bl	8000b60 <__aeabi_d2iz>
 801c4c4:	4606      	mov	r6, r0
 801c4c6:	f7e4 f835 	bl	8000534 <__aeabi_i2d>
 801c4ca:	4602      	mov	r2, r0
 801c4cc:	460b      	mov	r3, r1
 801c4ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c4d2:	f7e3 fee1 	bl	8000298 <__aeabi_dsub>
 801c4d6:	3630      	adds	r6, #48	; 0x30
 801c4d8:	f805 6b01 	strb.w	r6, [r5], #1
 801c4dc:	4642      	mov	r2, r8
 801c4de:	464b      	mov	r3, r9
 801c4e0:	e9cd 0100 	strd	r0, r1, [sp]
 801c4e4:	f7e4 fafe 	bl	8000ae4 <__aeabi_dcmplt>
 801c4e8:	2800      	cmp	r0, #0
 801c4ea:	d165      	bne.n	801c5b8 <_dtoa_r+0x5e8>
 801c4ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c4f0:	2000      	movs	r0, #0
 801c4f2:	4938      	ldr	r1, [pc, #224]	; (801c5d4 <_dtoa_r+0x604>)
 801c4f4:	f7e3 fed0 	bl	8000298 <__aeabi_dsub>
 801c4f8:	4642      	mov	r2, r8
 801c4fa:	464b      	mov	r3, r9
 801c4fc:	f7e4 faf2 	bl	8000ae4 <__aeabi_dcmplt>
 801c500:	2800      	cmp	r0, #0
 801c502:	f040 80ba 	bne.w	801c67a <_dtoa_r+0x6aa>
 801c506:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c508:	429d      	cmp	r5, r3
 801c50a:	f43f af7e 	beq.w	801c40a <_dtoa_r+0x43a>
 801c50e:	2200      	movs	r2, #0
 801c510:	4b31      	ldr	r3, [pc, #196]	; (801c5d8 <_dtoa_r+0x608>)
 801c512:	4640      	mov	r0, r8
 801c514:	4649      	mov	r1, r9
 801c516:	f7e4 f873 	bl	8000600 <__aeabi_dmul>
 801c51a:	2200      	movs	r2, #0
 801c51c:	4680      	mov	r8, r0
 801c51e:	4689      	mov	r9, r1
 801c520:	4b2d      	ldr	r3, [pc, #180]	; (801c5d8 <_dtoa_r+0x608>)
 801c522:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c526:	f7e4 f86b 	bl	8000600 <__aeabi_dmul>
 801c52a:	e9cd 0100 	strd	r0, r1, [sp]
 801c52e:	e7c5      	b.n	801c4bc <_dtoa_r+0x4ec>
 801c530:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801c534:	4642      	mov	r2, r8
 801c536:	464b      	mov	r3, r9
 801c538:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c53c:	f7e4 f860 	bl	8000600 <__aeabi_dmul>
 801c540:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801c544:	9d02      	ldr	r5, [sp, #8]
 801c546:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c54a:	f7e4 fb09 	bl	8000b60 <__aeabi_d2iz>
 801c54e:	4606      	mov	r6, r0
 801c550:	f7e3 fff0 	bl	8000534 <__aeabi_i2d>
 801c554:	3630      	adds	r6, #48	; 0x30
 801c556:	4602      	mov	r2, r0
 801c558:	460b      	mov	r3, r1
 801c55a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c55e:	f7e3 fe9b 	bl	8000298 <__aeabi_dsub>
 801c562:	f805 6b01 	strb.w	r6, [r5], #1
 801c566:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c568:	42ab      	cmp	r3, r5
 801c56a:	4680      	mov	r8, r0
 801c56c:	4689      	mov	r9, r1
 801c56e:	f04f 0200 	mov.w	r2, #0
 801c572:	d125      	bne.n	801c5c0 <_dtoa_r+0x5f0>
 801c574:	4b1b      	ldr	r3, [pc, #108]	; (801c5e4 <_dtoa_r+0x614>)
 801c576:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801c57a:	f7e3 fe8f 	bl	800029c <__adddf3>
 801c57e:	4602      	mov	r2, r0
 801c580:	460b      	mov	r3, r1
 801c582:	4640      	mov	r0, r8
 801c584:	4649      	mov	r1, r9
 801c586:	f7e4 facb 	bl	8000b20 <__aeabi_dcmpgt>
 801c58a:	2800      	cmp	r0, #0
 801c58c:	d175      	bne.n	801c67a <_dtoa_r+0x6aa>
 801c58e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801c592:	2000      	movs	r0, #0
 801c594:	4913      	ldr	r1, [pc, #76]	; (801c5e4 <_dtoa_r+0x614>)
 801c596:	f7e3 fe7f 	bl	8000298 <__aeabi_dsub>
 801c59a:	4602      	mov	r2, r0
 801c59c:	460b      	mov	r3, r1
 801c59e:	4640      	mov	r0, r8
 801c5a0:	4649      	mov	r1, r9
 801c5a2:	f7e4 fa9f 	bl	8000ae4 <__aeabi_dcmplt>
 801c5a6:	2800      	cmp	r0, #0
 801c5a8:	f43f af2f 	beq.w	801c40a <_dtoa_r+0x43a>
 801c5ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801c5b0:	2b30      	cmp	r3, #48	; 0x30
 801c5b2:	f105 32ff 	add.w	r2, r5, #4294967295
 801c5b6:	d001      	beq.n	801c5bc <_dtoa_r+0x5ec>
 801c5b8:	46bb      	mov	fp, r7
 801c5ba:	e04d      	b.n	801c658 <_dtoa_r+0x688>
 801c5bc:	4615      	mov	r5, r2
 801c5be:	e7f5      	b.n	801c5ac <_dtoa_r+0x5dc>
 801c5c0:	4b05      	ldr	r3, [pc, #20]	; (801c5d8 <_dtoa_r+0x608>)
 801c5c2:	f7e4 f81d 	bl	8000600 <__aeabi_dmul>
 801c5c6:	e9cd 0100 	strd	r0, r1, [sp]
 801c5ca:	e7bc      	b.n	801c546 <_dtoa_r+0x576>
 801c5cc:	0801e090 	.word	0x0801e090
 801c5d0:	0801e068 	.word	0x0801e068
 801c5d4:	3ff00000 	.word	0x3ff00000
 801c5d8:	40240000 	.word	0x40240000
 801c5dc:	401c0000 	.word	0x401c0000
 801c5e0:	40140000 	.word	0x40140000
 801c5e4:	3fe00000 	.word	0x3fe00000
 801c5e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 801c5ec:	9d02      	ldr	r5, [sp, #8]
 801c5ee:	4642      	mov	r2, r8
 801c5f0:	464b      	mov	r3, r9
 801c5f2:	4630      	mov	r0, r6
 801c5f4:	4639      	mov	r1, r7
 801c5f6:	f7e4 f92d 	bl	8000854 <__aeabi_ddiv>
 801c5fa:	f7e4 fab1 	bl	8000b60 <__aeabi_d2iz>
 801c5fe:	9000      	str	r0, [sp, #0]
 801c600:	f7e3 ff98 	bl	8000534 <__aeabi_i2d>
 801c604:	4642      	mov	r2, r8
 801c606:	464b      	mov	r3, r9
 801c608:	f7e3 fffa 	bl	8000600 <__aeabi_dmul>
 801c60c:	4602      	mov	r2, r0
 801c60e:	460b      	mov	r3, r1
 801c610:	4630      	mov	r0, r6
 801c612:	4639      	mov	r1, r7
 801c614:	f7e3 fe40 	bl	8000298 <__aeabi_dsub>
 801c618:	9e00      	ldr	r6, [sp, #0]
 801c61a:	9f03      	ldr	r7, [sp, #12]
 801c61c:	3630      	adds	r6, #48	; 0x30
 801c61e:	f805 6b01 	strb.w	r6, [r5], #1
 801c622:	9e02      	ldr	r6, [sp, #8]
 801c624:	1bae      	subs	r6, r5, r6
 801c626:	42b7      	cmp	r7, r6
 801c628:	4602      	mov	r2, r0
 801c62a:	460b      	mov	r3, r1
 801c62c:	d138      	bne.n	801c6a0 <_dtoa_r+0x6d0>
 801c62e:	f7e3 fe35 	bl	800029c <__adddf3>
 801c632:	4606      	mov	r6, r0
 801c634:	460f      	mov	r7, r1
 801c636:	4602      	mov	r2, r0
 801c638:	460b      	mov	r3, r1
 801c63a:	4640      	mov	r0, r8
 801c63c:	4649      	mov	r1, r9
 801c63e:	f7e4 fa51 	bl	8000ae4 <__aeabi_dcmplt>
 801c642:	b9c8      	cbnz	r0, 801c678 <_dtoa_r+0x6a8>
 801c644:	4632      	mov	r2, r6
 801c646:	463b      	mov	r3, r7
 801c648:	4640      	mov	r0, r8
 801c64a:	4649      	mov	r1, r9
 801c64c:	f7e4 fa40 	bl	8000ad0 <__aeabi_dcmpeq>
 801c650:	b110      	cbz	r0, 801c658 <_dtoa_r+0x688>
 801c652:	9b00      	ldr	r3, [sp, #0]
 801c654:	07db      	lsls	r3, r3, #31
 801c656:	d40f      	bmi.n	801c678 <_dtoa_r+0x6a8>
 801c658:	4651      	mov	r1, sl
 801c65a:	4620      	mov	r0, r4
 801c65c:	f000 fb48 	bl	801ccf0 <_Bfree>
 801c660:	2300      	movs	r3, #0
 801c662:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c664:	702b      	strb	r3, [r5, #0]
 801c666:	f10b 0301 	add.w	r3, fp, #1
 801c66a:	6013      	str	r3, [r2, #0]
 801c66c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c66e:	2b00      	cmp	r3, #0
 801c670:	f43f acf8 	beq.w	801c064 <_dtoa_r+0x94>
 801c674:	601d      	str	r5, [r3, #0]
 801c676:	e4f5      	b.n	801c064 <_dtoa_r+0x94>
 801c678:	465f      	mov	r7, fp
 801c67a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801c67e:	2a39      	cmp	r2, #57	; 0x39
 801c680:	f105 33ff 	add.w	r3, r5, #4294967295
 801c684:	d106      	bne.n	801c694 <_dtoa_r+0x6c4>
 801c686:	9a02      	ldr	r2, [sp, #8]
 801c688:	429a      	cmp	r2, r3
 801c68a:	d107      	bne.n	801c69c <_dtoa_r+0x6cc>
 801c68c:	2330      	movs	r3, #48	; 0x30
 801c68e:	7013      	strb	r3, [r2, #0]
 801c690:	3701      	adds	r7, #1
 801c692:	4613      	mov	r3, r2
 801c694:	781a      	ldrb	r2, [r3, #0]
 801c696:	3201      	adds	r2, #1
 801c698:	701a      	strb	r2, [r3, #0]
 801c69a:	e78d      	b.n	801c5b8 <_dtoa_r+0x5e8>
 801c69c:	461d      	mov	r5, r3
 801c69e:	e7ec      	b.n	801c67a <_dtoa_r+0x6aa>
 801c6a0:	2200      	movs	r2, #0
 801c6a2:	4ba4      	ldr	r3, [pc, #656]	; (801c934 <_dtoa_r+0x964>)
 801c6a4:	f7e3 ffac 	bl	8000600 <__aeabi_dmul>
 801c6a8:	2200      	movs	r2, #0
 801c6aa:	2300      	movs	r3, #0
 801c6ac:	4606      	mov	r6, r0
 801c6ae:	460f      	mov	r7, r1
 801c6b0:	f7e4 fa0e 	bl	8000ad0 <__aeabi_dcmpeq>
 801c6b4:	2800      	cmp	r0, #0
 801c6b6:	d09a      	beq.n	801c5ee <_dtoa_r+0x61e>
 801c6b8:	e7ce      	b.n	801c658 <_dtoa_r+0x688>
 801c6ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c6bc:	2a00      	cmp	r2, #0
 801c6be:	f000 80cd 	beq.w	801c85c <_dtoa_r+0x88c>
 801c6c2:	9a07      	ldr	r2, [sp, #28]
 801c6c4:	2a01      	cmp	r2, #1
 801c6c6:	f300 80af 	bgt.w	801c828 <_dtoa_r+0x858>
 801c6ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c6cc:	2a00      	cmp	r2, #0
 801c6ce:	f000 80a7 	beq.w	801c820 <_dtoa_r+0x850>
 801c6d2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801c6d6:	9e08      	ldr	r6, [sp, #32]
 801c6d8:	9d05      	ldr	r5, [sp, #20]
 801c6da:	9a05      	ldr	r2, [sp, #20]
 801c6dc:	441a      	add	r2, r3
 801c6de:	9205      	str	r2, [sp, #20]
 801c6e0:	9a06      	ldr	r2, [sp, #24]
 801c6e2:	2101      	movs	r1, #1
 801c6e4:	441a      	add	r2, r3
 801c6e6:	4620      	mov	r0, r4
 801c6e8:	9206      	str	r2, [sp, #24]
 801c6ea:	f000 fba1 	bl	801ce30 <__i2b>
 801c6ee:	4607      	mov	r7, r0
 801c6f0:	2d00      	cmp	r5, #0
 801c6f2:	dd0c      	ble.n	801c70e <_dtoa_r+0x73e>
 801c6f4:	9b06      	ldr	r3, [sp, #24]
 801c6f6:	2b00      	cmp	r3, #0
 801c6f8:	dd09      	ble.n	801c70e <_dtoa_r+0x73e>
 801c6fa:	42ab      	cmp	r3, r5
 801c6fc:	9a05      	ldr	r2, [sp, #20]
 801c6fe:	bfa8      	it	ge
 801c700:	462b      	movge	r3, r5
 801c702:	1ad2      	subs	r2, r2, r3
 801c704:	9205      	str	r2, [sp, #20]
 801c706:	9a06      	ldr	r2, [sp, #24]
 801c708:	1aed      	subs	r5, r5, r3
 801c70a:	1ad3      	subs	r3, r2, r3
 801c70c:	9306      	str	r3, [sp, #24]
 801c70e:	9b08      	ldr	r3, [sp, #32]
 801c710:	b1f3      	cbz	r3, 801c750 <_dtoa_r+0x780>
 801c712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c714:	2b00      	cmp	r3, #0
 801c716:	f000 80a5 	beq.w	801c864 <_dtoa_r+0x894>
 801c71a:	2e00      	cmp	r6, #0
 801c71c:	dd10      	ble.n	801c740 <_dtoa_r+0x770>
 801c71e:	4639      	mov	r1, r7
 801c720:	4632      	mov	r2, r6
 801c722:	4620      	mov	r0, r4
 801c724:	f000 fc1a 	bl	801cf5c <__pow5mult>
 801c728:	4652      	mov	r2, sl
 801c72a:	4601      	mov	r1, r0
 801c72c:	4607      	mov	r7, r0
 801c72e:	4620      	mov	r0, r4
 801c730:	f000 fb87 	bl	801ce42 <__multiply>
 801c734:	4651      	mov	r1, sl
 801c736:	4680      	mov	r8, r0
 801c738:	4620      	mov	r0, r4
 801c73a:	f000 fad9 	bl	801ccf0 <_Bfree>
 801c73e:	46c2      	mov	sl, r8
 801c740:	9b08      	ldr	r3, [sp, #32]
 801c742:	1b9a      	subs	r2, r3, r6
 801c744:	d004      	beq.n	801c750 <_dtoa_r+0x780>
 801c746:	4651      	mov	r1, sl
 801c748:	4620      	mov	r0, r4
 801c74a:	f000 fc07 	bl	801cf5c <__pow5mult>
 801c74e:	4682      	mov	sl, r0
 801c750:	2101      	movs	r1, #1
 801c752:	4620      	mov	r0, r4
 801c754:	f000 fb6c 	bl	801ce30 <__i2b>
 801c758:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c75a:	2b00      	cmp	r3, #0
 801c75c:	4606      	mov	r6, r0
 801c75e:	f340 8083 	ble.w	801c868 <_dtoa_r+0x898>
 801c762:	461a      	mov	r2, r3
 801c764:	4601      	mov	r1, r0
 801c766:	4620      	mov	r0, r4
 801c768:	f000 fbf8 	bl	801cf5c <__pow5mult>
 801c76c:	9b07      	ldr	r3, [sp, #28]
 801c76e:	2b01      	cmp	r3, #1
 801c770:	4606      	mov	r6, r0
 801c772:	dd7c      	ble.n	801c86e <_dtoa_r+0x89e>
 801c774:	f04f 0800 	mov.w	r8, #0
 801c778:	6933      	ldr	r3, [r6, #16]
 801c77a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801c77e:	6918      	ldr	r0, [r3, #16]
 801c780:	f000 fb08 	bl	801cd94 <__hi0bits>
 801c784:	f1c0 0020 	rsb	r0, r0, #32
 801c788:	9b06      	ldr	r3, [sp, #24]
 801c78a:	4418      	add	r0, r3
 801c78c:	f010 001f 	ands.w	r0, r0, #31
 801c790:	f000 8096 	beq.w	801c8c0 <_dtoa_r+0x8f0>
 801c794:	f1c0 0320 	rsb	r3, r0, #32
 801c798:	2b04      	cmp	r3, #4
 801c79a:	f340 8087 	ble.w	801c8ac <_dtoa_r+0x8dc>
 801c79e:	9b05      	ldr	r3, [sp, #20]
 801c7a0:	f1c0 001c 	rsb	r0, r0, #28
 801c7a4:	4403      	add	r3, r0
 801c7a6:	9305      	str	r3, [sp, #20]
 801c7a8:	9b06      	ldr	r3, [sp, #24]
 801c7aa:	4405      	add	r5, r0
 801c7ac:	4403      	add	r3, r0
 801c7ae:	9306      	str	r3, [sp, #24]
 801c7b0:	9b05      	ldr	r3, [sp, #20]
 801c7b2:	2b00      	cmp	r3, #0
 801c7b4:	dd05      	ble.n	801c7c2 <_dtoa_r+0x7f2>
 801c7b6:	4651      	mov	r1, sl
 801c7b8:	461a      	mov	r2, r3
 801c7ba:	4620      	mov	r0, r4
 801c7bc:	f000 fc1c 	bl	801cff8 <__lshift>
 801c7c0:	4682      	mov	sl, r0
 801c7c2:	9b06      	ldr	r3, [sp, #24]
 801c7c4:	2b00      	cmp	r3, #0
 801c7c6:	dd05      	ble.n	801c7d4 <_dtoa_r+0x804>
 801c7c8:	4631      	mov	r1, r6
 801c7ca:	461a      	mov	r2, r3
 801c7cc:	4620      	mov	r0, r4
 801c7ce:	f000 fc13 	bl	801cff8 <__lshift>
 801c7d2:	4606      	mov	r6, r0
 801c7d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c7d6:	2b00      	cmp	r3, #0
 801c7d8:	d074      	beq.n	801c8c4 <_dtoa_r+0x8f4>
 801c7da:	4631      	mov	r1, r6
 801c7dc:	4650      	mov	r0, sl
 801c7de:	f000 fc5c 	bl	801d09a <__mcmp>
 801c7e2:	2800      	cmp	r0, #0
 801c7e4:	da6e      	bge.n	801c8c4 <_dtoa_r+0x8f4>
 801c7e6:	2300      	movs	r3, #0
 801c7e8:	4651      	mov	r1, sl
 801c7ea:	220a      	movs	r2, #10
 801c7ec:	4620      	mov	r0, r4
 801c7ee:	f000 fa96 	bl	801cd1e <__multadd>
 801c7f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c7f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c7f8:	4682      	mov	sl, r0
 801c7fa:	2b00      	cmp	r3, #0
 801c7fc:	f000 81a8 	beq.w	801cb50 <_dtoa_r+0xb80>
 801c800:	2300      	movs	r3, #0
 801c802:	4639      	mov	r1, r7
 801c804:	220a      	movs	r2, #10
 801c806:	4620      	mov	r0, r4
 801c808:	f000 fa89 	bl	801cd1e <__multadd>
 801c80c:	9b04      	ldr	r3, [sp, #16]
 801c80e:	2b00      	cmp	r3, #0
 801c810:	4607      	mov	r7, r0
 801c812:	f300 80c8 	bgt.w	801c9a6 <_dtoa_r+0x9d6>
 801c816:	9b07      	ldr	r3, [sp, #28]
 801c818:	2b02      	cmp	r3, #2
 801c81a:	f340 80c4 	ble.w	801c9a6 <_dtoa_r+0x9d6>
 801c81e:	e059      	b.n	801c8d4 <_dtoa_r+0x904>
 801c820:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c822:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801c826:	e756      	b.n	801c6d6 <_dtoa_r+0x706>
 801c828:	9b03      	ldr	r3, [sp, #12]
 801c82a:	1e5e      	subs	r6, r3, #1
 801c82c:	9b08      	ldr	r3, [sp, #32]
 801c82e:	42b3      	cmp	r3, r6
 801c830:	bfbf      	itttt	lt
 801c832:	9b08      	ldrlt	r3, [sp, #32]
 801c834:	9608      	strlt	r6, [sp, #32]
 801c836:	1af2      	sublt	r2, r6, r3
 801c838:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 801c83a:	bfb6      	itet	lt
 801c83c:	189b      	addlt	r3, r3, r2
 801c83e:	1b9e      	subge	r6, r3, r6
 801c840:	930b      	strlt	r3, [sp, #44]	; 0x2c
 801c842:	9b03      	ldr	r3, [sp, #12]
 801c844:	bfb8      	it	lt
 801c846:	2600      	movlt	r6, #0
 801c848:	2b00      	cmp	r3, #0
 801c84a:	bfb9      	ittee	lt
 801c84c:	9b05      	ldrlt	r3, [sp, #20]
 801c84e:	9a03      	ldrlt	r2, [sp, #12]
 801c850:	9d05      	ldrge	r5, [sp, #20]
 801c852:	9b03      	ldrge	r3, [sp, #12]
 801c854:	bfbc      	itt	lt
 801c856:	1a9d      	sublt	r5, r3, r2
 801c858:	2300      	movlt	r3, #0
 801c85a:	e73e      	b.n	801c6da <_dtoa_r+0x70a>
 801c85c:	9e08      	ldr	r6, [sp, #32]
 801c85e:	9d05      	ldr	r5, [sp, #20]
 801c860:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801c862:	e745      	b.n	801c6f0 <_dtoa_r+0x720>
 801c864:	9a08      	ldr	r2, [sp, #32]
 801c866:	e76e      	b.n	801c746 <_dtoa_r+0x776>
 801c868:	9b07      	ldr	r3, [sp, #28]
 801c86a:	2b01      	cmp	r3, #1
 801c86c:	dc19      	bgt.n	801c8a2 <_dtoa_r+0x8d2>
 801c86e:	9b00      	ldr	r3, [sp, #0]
 801c870:	b9bb      	cbnz	r3, 801c8a2 <_dtoa_r+0x8d2>
 801c872:	9b01      	ldr	r3, [sp, #4]
 801c874:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c878:	b99b      	cbnz	r3, 801c8a2 <_dtoa_r+0x8d2>
 801c87a:	9b01      	ldr	r3, [sp, #4]
 801c87c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c880:	0d1b      	lsrs	r3, r3, #20
 801c882:	051b      	lsls	r3, r3, #20
 801c884:	b183      	cbz	r3, 801c8a8 <_dtoa_r+0x8d8>
 801c886:	9b05      	ldr	r3, [sp, #20]
 801c888:	3301      	adds	r3, #1
 801c88a:	9305      	str	r3, [sp, #20]
 801c88c:	9b06      	ldr	r3, [sp, #24]
 801c88e:	3301      	adds	r3, #1
 801c890:	9306      	str	r3, [sp, #24]
 801c892:	f04f 0801 	mov.w	r8, #1
 801c896:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c898:	2b00      	cmp	r3, #0
 801c89a:	f47f af6d 	bne.w	801c778 <_dtoa_r+0x7a8>
 801c89e:	2001      	movs	r0, #1
 801c8a0:	e772      	b.n	801c788 <_dtoa_r+0x7b8>
 801c8a2:	f04f 0800 	mov.w	r8, #0
 801c8a6:	e7f6      	b.n	801c896 <_dtoa_r+0x8c6>
 801c8a8:	4698      	mov	r8, r3
 801c8aa:	e7f4      	b.n	801c896 <_dtoa_r+0x8c6>
 801c8ac:	d080      	beq.n	801c7b0 <_dtoa_r+0x7e0>
 801c8ae:	9a05      	ldr	r2, [sp, #20]
 801c8b0:	331c      	adds	r3, #28
 801c8b2:	441a      	add	r2, r3
 801c8b4:	9205      	str	r2, [sp, #20]
 801c8b6:	9a06      	ldr	r2, [sp, #24]
 801c8b8:	441a      	add	r2, r3
 801c8ba:	441d      	add	r5, r3
 801c8bc:	4613      	mov	r3, r2
 801c8be:	e776      	b.n	801c7ae <_dtoa_r+0x7de>
 801c8c0:	4603      	mov	r3, r0
 801c8c2:	e7f4      	b.n	801c8ae <_dtoa_r+0x8de>
 801c8c4:	9b03      	ldr	r3, [sp, #12]
 801c8c6:	2b00      	cmp	r3, #0
 801c8c8:	dc36      	bgt.n	801c938 <_dtoa_r+0x968>
 801c8ca:	9b07      	ldr	r3, [sp, #28]
 801c8cc:	2b02      	cmp	r3, #2
 801c8ce:	dd33      	ble.n	801c938 <_dtoa_r+0x968>
 801c8d0:	9b03      	ldr	r3, [sp, #12]
 801c8d2:	9304      	str	r3, [sp, #16]
 801c8d4:	9b04      	ldr	r3, [sp, #16]
 801c8d6:	b963      	cbnz	r3, 801c8f2 <_dtoa_r+0x922>
 801c8d8:	4631      	mov	r1, r6
 801c8da:	2205      	movs	r2, #5
 801c8dc:	4620      	mov	r0, r4
 801c8de:	f000 fa1e 	bl	801cd1e <__multadd>
 801c8e2:	4601      	mov	r1, r0
 801c8e4:	4606      	mov	r6, r0
 801c8e6:	4650      	mov	r0, sl
 801c8e8:	f000 fbd7 	bl	801d09a <__mcmp>
 801c8ec:	2800      	cmp	r0, #0
 801c8ee:	f73f adb6 	bgt.w	801c45e <_dtoa_r+0x48e>
 801c8f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c8f4:	9d02      	ldr	r5, [sp, #8]
 801c8f6:	ea6f 0b03 	mvn.w	fp, r3
 801c8fa:	2300      	movs	r3, #0
 801c8fc:	9303      	str	r3, [sp, #12]
 801c8fe:	4631      	mov	r1, r6
 801c900:	4620      	mov	r0, r4
 801c902:	f000 f9f5 	bl	801ccf0 <_Bfree>
 801c906:	2f00      	cmp	r7, #0
 801c908:	f43f aea6 	beq.w	801c658 <_dtoa_r+0x688>
 801c90c:	9b03      	ldr	r3, [sp, #12]
 801c90e:	b12b      	cbz	r3, 801c91c <_dtoa_r+0x94c>
 801c910:	42bb      	cmp	r3, r7
 801c912:	d003      	beq.n	801c91c <_dtoa_r+0x94c>
 801c914:	4619      	mov	r1, r3
 801c916:	4620      	mov	r0, r4
 801c918:	f000 f9ea 	bl	801ccf0 <_Bfree>
 801c91c:	4639      	mov	r1, r7
 801c91e:	4620      	mov	r0, r4
 801c920:	f000 f9e6 	bl	801ccf0 <_Bfree>
 801c924:	e698      	b.n	801c658 <_dtoa_r+0x688>
 801c926:	2600      	movs	r6, #0
 801c928:	4637      	mov	r7, r6
 801c92a:	e7e2      	b.n	801c8f2 <_dtoa_r+0x922>
 801c92c:	46bb      	mov	fp, r7
 801c92e:	4637      	mov	r7, r6
 801c930:	e595      	b.n	801c45e <_dtoa_r+0x48e>
 801c932:	bf00      	nop
 801c934:	40240000 	.word	0x40240000
 801c938:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c93a:	bb93      	cbnz	r3, 801c9a2 <_dtoa_r+0x9d2>
 801c93c:	9b03      	ldr	r3, [sp, #12]
 801c93e:	9304      	str	r3, [sp, #16]
 801c940:	9d02      	ldr	r5, [sp, #8]
 801c942:	4631      	mov	r1, r6
 801c944:	4650      	mov	r0, sl
 801c946:	f7ff fab7 	bl	801beb8 <quorem>
 801c94a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801c94e:	f805 9b01 	strb.w	r9, [r5], #1
 801c952:	9b02      	ldr	r3, [sp, #8]
 801c954:	9a04      	ldr	r2, [sp, #16]
 801c956:	1aeb      	subs	r3, r5, r3
 801c958:	429a      	cmp	r2, r3
 801c95a:	f300 80dc 	bgt.w	801cb16 <_dtoa_r+0xb46>
 801c95e:	9b02      	ldr	r3, [sp, #8]
 801c960:	2a01      	cmp	r2, #1
 801c962:	bfac      	ite	ge
 801c964:	189b      	addge	r3, r3, r2
 801c966:	3301      	addlt	r3, #1
 801c968:	4698      	mov	r8, r3
 801c96a:	2300      	movs	r3, #0
 801c96c:	9303      	str	r3, [sp, #12]
 801c96e:	4651      	mov	r1, sl
 801c970:	2201      	movs	r2, #1
 801c972:	4620      	mov	r0, r4
 801c974:	f000 fb40 	bl	801cff8 <__lshift>
 801c978:	4631      	mov	r1, r6
 801c97a:	4682      	mov	sl, r0
 801c97c:	f000 fb8d 	bl	801d09a <__mcmp>
 801c980:	2800      	cmp	r0, #0
 801c982:	f300 808d 	bgt.w	801caa0 <_dtoa_r+0xad0>
 801c986:	d103      	bne.n	801c990 <_dtoa_r+0x9c0>
 801c988:	f019 0f01 	tst.w	r9, #1
 801c98c:	f040 8088 	bne.w	801caa0 <_dtoa_r+0xad0>
 801c990:	4645      	mov	r5, r8
 801c992:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801c996:	2b30      	cmp	r3, #48	; 0x30
 801c998:	f105 32ff 	add.w	r2, r5, #4294967295
 801c99c:	d1af      	bne.n	801c8fe <_dtoa_r+0x92e>
 801c99e:	4615      	mov	r5, r2
 801c9a0:	e7f7      	b.n	801c992 <_dtoa_r+0x9c2>
 801c9a2:	9b03      	ldr	r3, [sp, #12]
 801c9a4:	9304      	str	r3, [sp, #16]
 801c9a6:	2d00      	cmp	r5, #0
 801c9a8:	dd05      	ble.n	801c9b6 <_dtoa_r+0x9e6>
 801c9aa:	4639      	mov	r1, r7
 801c9ac:	462a      	mov	r2, r5
 801c9ae:	4620      	mov	r0, r4
 801c9b0:	f000 fb22 	bl	801cff8 <__lshift>
 801c9b4:	4607      	mov	r7, r0
 801c9b6:	f1b8 0f00 	cmp.w	r8, #0
 801c9ba:	d04c      	beq.n	801ca56 <_dtoa_r+0xa86>
 801c9bc:	6879      	ldr	r1, [r7, #4]
 801c9be:	4620      	mov	r0, r4
 801c9c0:	f000 f962 	bl	801cc88 <_Balloc>
 801c9c4:	693a      	ldr	r2, [r7, #16]
 801c9c6:	3202      	adds	r2, #2
 801c9c8:	4605      	mov	r5, r0
 801c9ca:	0092      	lsls	r2, r2, #2
 801c9cc:	f107 010c 	add.w	r1, r7, #12
 801c9d0:	300c      	adds	r0, #12
 801c9d2:	f7fe fac9 	bl	801af68 <memcpy>
 801c9d6:	2201      	movs	r2, #1
 801c9d8:	4629      	mov	r1, r5
 801c9da:	4620      	mov	r0, r4
 801c9dc:	f000 fb0c 	bl	801cff8 <__lshift>
 801c9e0:	9b00      	ldr	r3, [sp, #0]
 801c9e2:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801c9e6:	9703      	str	r7, [sp, #12]
 801c9e8:	f003 0301 	and.w	r3, r3, #1
 801c9ec:	4607      	mov	r7, r0
 801c9ee:	9305      	str	r3, [sp, #20]
 801c9f0:	4631      	mov	r1, r6
 801c9f2:	4650      	mov	r0, sl
 801c9f4:	f7ff fa60 	bl	801beb8 <quorem>
 801c9f8:	9903      	ldr	r1, [sp, #12]
 801c9fa:	4605      	mov	r5, r0
 801c9fc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801ca00:	4650      	mov	r0, sl
 801ca02:	f000 fb4a 	bl	801d09a <__mcmp>
 801ca06:	463a      	mov	r2, r7
 801ca08:	9000      	str	r0, [sp, #0]
 801ca0a:	4631      	mov	r1, r6
 801ca0c:	4620      	mov	r0, r4
 801ca0e:	f000 fb5e 	bl	801d0ce <__mdiff>
 801ca12:	68c3      	ldr	r3, [r0, #12]
 801ca14:	4602      	mov	r2, r0
 801ca16:	bb03      	cbnz	r3, 801ca5a <_dtoa_r+0xa8a>
 801ca18:	4601      	mov	r1, r0
 801ca1a:	9006      	str	r0, [sp, #24]
 801ca1c:	4650      	mov	r0, sl
 801ca1e:	f000 fb3c 	bl	801d09a <__mcmp>
 801ca22:	9a06      	ldr	r2, [sp, #24]
 801ca24:	4603      	mov	r3, r0
 801ca26:	4611      	mov	r1, r2
 801ca28:	4620      	mov	r0, r4
 801ca2a:	9306      	str	r3, [sp, #24]
 801ca2c:	f000 f960 	bl	801ccf0 <_Bfree>
 801ca30:	9b06      	ldr	r3, [sp, #24]
 801ca32:	b9a3      	cbnz	r3, 801ca5e <_dtoa_r+0xa8e>
 801ca34:	9a07      	ldr	r2, [sp, #28]
 801ca36:	b992      	cbnz	r2, 801ca5e <_dtoa_r+0xa8e>
 801ca38:	9a05      	ldr	r2, [sp, #20]
 801ca3a:	b982      	cbnz	r2, 801ca5e <_dtoa_r+0xa8e>
 801ca3c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801ca40:	d029      	beq.n	801ca96 <_dtoa_r+0xac6>
 801ca42:	9b00      	ldr	r3, [sp, #0]
 801ca44:	2b00      	cmp	r3, #0
 801ca46:	dd01      	ble.n	801ca4c <_dtoa_r+0xa7c>
 801ca48:	f105 0931 	add.w	r9, r5, #49	; 0x31
 801ca4c:	f108 0501 	add.w	r5, r8, #1
 801ca50:	f888 9000 	strb.w	r9, [r8]
 801ca54:	e753      	b.n	801c8fe <_dtoa_r+0x92e>
 801ca56:	4638      	mov	r0, r7
 801ca58:	e7c2      	b.n	801c9e0 <_dtoa_r+0xa10>
 801ca5a:	2301      	movs	r3, #1
 801ca5c:	e7e3      	b.n	801ca26 <_dtoa_r+0xa56>
 801ca5e:	9a00      	ldr	r2, [sp, #0]
 801ca60:	2a00      	cmp	r2, #0
 801ca62:	db04      	blt.n	801ca6e <_dtoa_r+0xa9e>
 801ca64:	d125      	bne.n	801cab2 <_dtoa_r+0xae2>
 801ca66:	9a07      	ldr	r2, [sp, #28]
 801ca68:	bb1a      	cbnz	r2, 801cab2 <_dtoa_r+0xae2>
 801ca6a:	9a05      	ldr	r2, [sp, #20]
 801ca6c:	bb0a      	cbnz	r2, 801cab2 <_dtoa_r+0xae2>
 801ca6e:	2b00      	cmp	r3, #0
 801ca70:	ddec      	ble.n	801ca4c <_dtoa_r+0xa7c>
 801ca72:	4651      	mov	r1, sl
 801ca74:	2201      	movs	r2, #1
 801ca76:	4620      	mov	r0, r4
 801ca78:	f000 fabe 	bl	801cff8 <__lshift>
 801ca7c:	4631      	mov	r1, r6
 801ca7e:	4682      	mov	sl, r0
 801ca80:	f000 fb0b 	bl	801d09a <__mcmp>
 801ca84:	2800      	cmp	r0, #0
 801ca86:	dc03      	bgt.n	801ca90 <_dtoa_r+0xac0>
 801ca88:	d1e0      	bne.n	801ca4c <_dtoa_r+0xa7c>
 801ca8a:	f019 0f01 	tst.w	r9, #1
 801ca8e:	d0dd      	beq.n	801ca4c <_dtoa_r+0xa7c>
 801ca90:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801ca94:	d1d8      	bne.n	801ca48 <_dtoa_r+0xa78>
 801ca96:	2339      	movs	r3, #57	; 0x39
 801ca98:	f888 3000 	strb.w	r3, [r8]
 801ca9c:	f108 0801 	add.w	r8, r8, #1
 801caa0:	4645      	mov	r5, r8
 801caa2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801caa6:	2b39      	cmp	r3, #57	; 0x39
 801caa8:	f105 32ff 	add.w	r2, r5, #4294967295
 801caac:	d03b      	beq.n	801cb26 <_dtoa_r+0xb56>
 801caae:	3301      	adds	r3, #1
 801cab0:	e040      	b.n	801cb34 <_dtoa_r+0xb64>
 801cab2:	2b00      	cmp	r3, #0
 801cab4:	f108 0501 	add.w	r5, r8, #1
 801cab8:	dd05      	ble.n	801cac6 <_dtoa_r+0xaf6>
 801caba:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801cabe:	d0ea      	beq.n	801ca96 <_dtoa_r+0xac6>
 801cac0:	f109 0901 	add.w	r9, r9, #1
 801cac4:	e7c4      	b.n	801ca50 <_dtoa_r+0xa80>
 801cac6:	9b02      	ldr	r3, [sp, #8]
 801cac8:	9a04      	ldr	r2, [sp, #16]
 801caca:	f805 9c01 	strb.w	r9, [r5, #-1]
 801cace:	1aeb      	subs	r3, r5, r3
 801cad0:	4293      	cmp	r3, r2
 801cad2:	46a8      	mov	r8, r5
 801cad4:	f43f af4b 	beq.w	801c96e <_dtoa_r+0x99e>
 801cad8:	4651      	mov	r1, sl
 801cada:	2300      	movs	r3, #0
 801cadc:	220a      	movs	r2, #10
 801cade:	4620      	mov	r0, r4
 801cae0:	f000 f91d 	bl	801cd1e <__multadd>
 801cae4:	9b03      	ldr	r3, [sp, #12]
 801cae6:	9903      	ldr	r1, [sp, #12]
 801cae8:	42bb      	cmp	r3, r7
 801caea:	4682      	mov	sl, r0
 801caec:	f04f 0300 	mov.w	r3, #0
 801caf0:	f04f 020a 	mov.w	r2, #10
 801caf4:	4620      	mov	r0, r4
 801caf6:	d104      	bne.n	801cb02 <_dtoa_r+0xb32>
 801caf8:	f000 f911 	bl	801cd1e <__multadd>
 801cafc:	9003      	str	r0, [sp, #12]
 801cafe:	4607      	mov	r7, r0
 801cb00:	e776      	b.n	801c9f0 <_dtoa_r+0xa20>
 801cb02:	f000 f90c 	bl	801cd1e <__multadd>
 801cb06:	2300      	movs	r3, #0
 801cb08:	9003      	str	r0, [sp, #12]
 801cb0a:	220a      	movs	r2, #10
 801cb0c:	4639      	mov	r1, r7
 801cb0e:	4620      	mov	r0, r4
 801cb10:	f000 f905 	bl	801cd1e <__multadd>
 801cb14:	e7f3      	b.n	801cafe <_dtoa_r+0xb2e>
 801cb16:	4651      	mov	r1, sl
 801cb18:	2300      	movs	r3, #0
 801cb1a:	220a      	movs	r2, #10
 801cb1c:	4620      	mov	r0, r4
 801cb1e:	f000 f8fe 	bl	801cd1e <__multadd>
 801cb22:	4682      	mov	sl, r0
 801cb24:	e70d      	b.n	801c942 <_dtoa_r+0x972>
 801cb26:	9b02      	ldr	r3, [sp, #8]
 801cb28:	4293      	cmp	r3, r2
 801cb2a:	d105      	bne.n	801cb38 <_dtoa_r+0xb68>
 801cb2c:	9a02      	ldr	r2, [sp, #8]
 801cb2e:	f10b 0b01 	add.w	fp, fp, #1
 801cb32:	2331      	movs	r3, #49	; 0x31
 801cb34:	7013      	strb	r3, [r2, #0]
 801cb36:	e6e2      	b.n	801c8fe <_dtoa_r+0x92e>
 801cb38:	4615      	mov	r5, r2
 801cb3a:	e7b2      	b.n	801caa2 <_dtoa_r+0xad2>
 801cb3c:	4b09      	ldr	r3, [pc, #36]	; (801cb64 <_dtoa_r+0xb94>)
 801cb3e:	f7ff baae 	b.w	801c09e <_dtoa_r+0xce>
 801cb42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801cb44:	2b00      	cmp	r3, #0
 801cb46:	f47f aa88 	bne.w	801c05a <_dtoa_r+0x8a>
 801cb4a:	4b07      	ldr	r3, [pc, #28]	; (801cb68 <_dtoa_r+0xb98>)
 801cb4c:	f7ff baa7 	b.w	801c09e <_dtoa_r+0xce>
 801cb50:	9b04      	ldr	r3, [sp, #16]
 801cb52:	2b00      	cmp	r3, #0
 801cb54:	f73f aef4 	bgt.w	801c940 <_dtoa_r+0x970>
 801cb58:	9b07      	ldr	r3, [sp, #28]
 801cb5a:	2b02      	cmp	r3, #2
 801cb5c:	f77f aef0 	ble.w	801c940 <_dtoa_r+0x970>
 801cb60:	e6b8      	b.n	801c8d4 <_dtoa_r+0x904>
 801cb62:	bf00      	nop
 801cb64:	0801e034 	.word	0x0801e034
 801cb68:	0801e058 	.word	0x0801e058

0801cb6c <_localeconv_r>:
 801cb6c:	4b04      	ldr	r3, [pc, #16]	; (801cb80 <_localeconv_r+0x14>)
 801cb6e:	681b      	ldr	r3, [r3, #0]
 801cb70:	6a18      	ldr	r0, [r3, #32]
 801cb72:	4b04      	ldr	r3, [pc, #16]	; (801cb84 <_localeconv_r+0x18>)
 801cb74:	2800      	cmp	r0, #0
 801cb76:	bf08      	it	eq
 801cb78:	4618      	moveq	r0, r3
 801cb7a:	30f0      	adds	r0, #240	; 0xf0
 801cb7c:	4770      	bx	lr
 801cb7e:	bf00      	nop
 801cb80:	200014a4 	.word	0x200014a4
 801cb84:	20001508 	.word	0x20001508

0801cb88 <_lseek_r>:
 801cb88:	b538      	push	{r3, r4, r5, lr}
 801cb8a:	4c07      	ldr	r4, [pc, #28]	; (801cba8 <_lseek_r+0x20>)
 801cb8c:	4605      	mov	r5, r0
 801cb8e:	4608      	mov	r0, r1
 801cb90:	4611      	mov	r1, r2
 801cb92:	2200      	movs	r2, #0
 801cb94:	6022      	str	r2, [r4, #0]
 801cb96:	461a      	mov	r2, r3
 801cb98:	f7f0 f9bc 	bl	800cf14 <_lseek>
 801cb9c:	1c43      	adds	r3, r0, #1
 801cb9e:	d102      	bne.n	801cba6 <_lseek_r+0x1e>
 801cba0:	6823      	ldr	r3, [r4, #0]
 801cba2:	b103      	cbz	r3, 801cba6 <_lseek_r+0x1e>
 801cba4:	602b      	str	r3, [r5, #0]
 801cba6:	bd38      	pop	{r3, r4, r5, pc}
 801cba8:	20003998 	.word	0x20003998

0801cbac <__swhatbuf_r>:
 801cbac:	b570      	push	{r4, r5, r6, lr}
 801cbae:	460e      	mov	r6, r1
 801cbb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cbb4:	2900      	cmp	r1, #0
 801cbb6:	b090      	sub	sp, #64	; 0x40
 801cbb8:	4614      	mov	r4, r2
 801cbba:	461d      	mov	r5, r3
 801cbbc:	da07      	bge.n	801cbce <__swhatbuf_r+0x22>
 801cbbe:	2300      	movs	r3, #0
 801cbc0:	602b      	str	r3, [r5, #0]
 801cbc2:	89b3      	ldrh	r3, [r6, #12]
 801cbc4:	061a      	lsls	r2, r3, #24
 801cbc6:	d410      	bmi.n	801cbea <__swhatbuf_r+0x3e>
 801cbc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801cbcc:	e00e      	b.n	801cbec <__swhatbuf_r+0x40>
 801cbce:	aa01      	add	r2, sp, #4
 801cbd0:	f000 fc8a 	bl	801d4e8 <_fstat_r>
 801cbd4:	2800      	cmp	r0, #0
 801cbd6:	dbf2      	blt.n	801cbbe <__swhatbuf_r+0x12>
 801cbd8:	9a02      	ldr	r2, [sp, #8]
 801cbda:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801cbde:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801cbe2:	425a      	negs	r2, r3
 801cbe4:	415a      	adcs	r2, r3
 801cbe6:	602a      	str	r2, [r5, #0]
 801cbe8:	e7ee      	b.n	801cbc8 <__swhatbuf_r+0x1c>
 801cbea:	2340      	movs	r3, #64	; 0x40
 801cbec:	2000      	movs	r0, #0
 801cbee:	6023      	str	r3, [r4, #0]
 801cbf0:	b010      	add	sp, #64	; 0x40
 801cbf2:	bd70      	pop	{r4, r5, r6, pc}

0801cbf4 <__smakebuf_r>:
 801cbf4:	898b      	ldrh	r3, [r1, #12]
 801cbf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801cbf8:	079d      	lsls	r5, r3, #30
 801cbfa:	4606      	mov	r6, r0
 801cbfc:	460c      	mov	r4, r1
 801cbfe:	d507      	bpl.n	801cc10 <__smakebuf_r+0x1c>
 801cc00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801cc04:	6023      	str	r3, [r4, #0]
 801cc06:	6123      	str	r3, [r4, #16]
 801cc08:	2301      	movs	r3, #1
 801cc0a:	6163      	str	r3, [r4, #20]
 801cc0c:	b002      	add	sp, #8
 801cc0e:	bd70      	pop	{r4, r5, r6, pc}
 801cc10:	ab01      	add	r3, sp, #4
 801cc12:	466a      	mov	r2, sp
 801cc14:	f7ff ffca 	bl	801cbac <__swhatbuf_r>
 801cc18:	9900      	ldr	r1, [sp, #0]
 801cc1a:	4605      	mov	r5, r0
 801cc1c:	4630      	mov	r0, r6
 801cc1e:	f7fe fa05 	bl	801b02c <_malloc_r>
 801cc22:	b948      	cbnz	r0, 801cc38 <__smakebuf_r+0x44>
 801cc24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cc28:	059a      	lsls	r2, r3, #22
 801cc2a:	d4ef      	bmi.n	801cc0c <__smakebuf_r+0x18>
 801cc2c:	f023 0303 	bic.w	r3, r3, #3
 801cc30:	f043 0302 	orr.w	r3, r3, #2
 801cc34:	81a3      	strh	r3, [r4, #12]
 801cc36:	e7e3      	b.n	801cc00 <__smakebuf_r+0xc>
 801cc38:	4b0d      	ldr	r3, [pc, #52]	; (801cc70 <__smakebuf_r+0x7c>)
 801cc3a:	62b3      	str	r3, [r6, #40]	; 0x28
 801cc3c:	89a3      	ldrh	r3, [r4, #12]
 801cc3e:	6020      	str	r0, [r4, #0]
 801cc40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cc44:	81a3      	strh	r3, [r4, #12]
 801cc46:	9b00      	ldr	r3, [sp, #0]
 801cc48:	6163      	str	r3, [r4, #20]
 801cc4a:	9b01      	ldr	r3, [sp, #4]
 801cc4c:	6120      	str	r0, [r4, #16]
 801cc4e:	b15b      	cbz	r3, 801cc68 <__smakebuf_r+0x74>
 801cc50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cc54:	4630      	mov	r0, r6
 801cc56:	f000 fc59 	bl	801d50c <_isatty_r>
 801cc5a:	b128      	cbz	r0, 801cc68 <__smakebuf_r+0x74>
 801cc5c:	89a3      	ldrh	r3, [r4, #12]
 801cc5e:	f023 0303 	bic.w	r3, r3, #3
 801cc62:	f043 0301 	orr.w	r3, r3, #1
 801cc66:	81a3      	strh	r3, [r4, #12]
 801cc68:	89a3      	ldrh	r3, [r4, #12]
 801cc6a:	431d      	orrs	r5, r3
 801cc6c:	81a5      	strh	r5, [r4, #12]
 801cc6e:	e7cd      	b.n	801cc0c <__smakebuf_r+0x18>
 801cc70:	0801ad8d 	.word	0x0801ad8d

0801cc74 <malloc>:
 801cc74:	4b02      	ldr	r3, [pc, #8]	; (801cc80 <malloc+0xc>)
 801cc76:	4601      	mov	r1, r0
 801cc78:	6818      	ldr	r0, [r3, #0]
 801cc7a:	f7fe b9d7 	b.w	801b02c <_malloc_r>
 801cc7e:	bf00      	nop
 801cc80:	200014a4 	.word	0x200014a4

0801cc84 <__malloc_lock>:
 801cc84:	4770      	bx	lr

0801cc86 <__malloc_unlock>:
 801cc86:	4770      	bx	lr

0801cc88 <_Balloc>:
 801cc88:	b570      	push	{r4, r5, r6, lr}
 801cc8a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801cc8c:	4604      	mov	r4, r0
 801cc8e:	460e      	mov	r6, r1
 801cc90:	b93d      	cbnz	r5, 801cca2 <_Balloc+0x1a>
 801cc92:	2010      	movs	r0, #16
 801cc94:	f7ff ffee 	bl	801cc74 <malloc>
 801cc98:	6260      	str	r0, [r4, #36]	; 0x24
 801cc9a:	6045      	str	r5, [r0, #4]
 801cc9c:	6085      	str	r5, [r0, #8]
 801cc9e:	6005      	str	r5, [r0, #0]
 801cca0:	60c5      	str	r5, [r0, #12]
 801cca2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801cca4:	68eb      	ldr	r3, [r5, #12]
 801cca6:	b183      	cbz	r3, 801ccca <_Balloc+0x42>
 801cca8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ccaa:	68db      	ldr	r3, [r3, #12]
 801ccac:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801ccb0:	b9b8      	cbnz	r0, 801cce2 <_Balloc+0x5a>
 801ccb2:	2101      	movs	r1, #1
 801ccb4:	fa01 f506 	lsl.w	r5, r1, r6
 801ccb8:	1d6a      	adds	r2, r5, #5
 801ccba:	0092      	lsls	r2, r2, #2
 801ccbc:	4620      	mov	r0, r4
 801ccbe:	f000 fab3 	bl	801d228 <_calloc_r>
 801ccc2:	b160      	cbz	r0, 801ccde <_Balloc+0x56>
 801ccc4:	6046      	str	r6, [r0, #4]
 801ccc6:	6085      	str	r5, [r0, #8]
 801ccc8:	e00e      	b.n	801cce8 <_Balloc+0x60>
 801ccca:	2221      	movs	r2, #33	; 0x21
 801cccc:	2104      	movs	r1, #4
 801ccce:	4620      	mov	r0, r4
 801ccd0:	f000 faaa 	bl	801d228 <_calloc_r>
 801ccd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ccd6:	60e8      	str	r0, [r5, #12]
 801ccd8:	68db      	ldr	r3, [r3, #12]
 801ccda:	2b00      	cmp	r3, #0
 801ccdc:	d1e4      	bne.n	801cca8 <_Balloc+0x20>
 801ccde:	2000      	movs	r0, #0
 801cce0:	bd70      	pop	{r4, r5, r6, pc}
 801cce2:	6802      	ldr	r2, [r0, #0]
 801cce4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801cce8:	2300      	movs	r3, #0
 801ccea:	6103      	str	r3, [r0, #16]
 801ccec:	60c3      	str	r3, [r0, #12]
 801ccee:	bd70      	pop	{r4, r5, r6, pc}

0801ccf0 <_Bfree>:
 801ccf0:	b570      	push	{r4, r5, r6, lr}
 801ccf2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801ccf4:	4606      	mov	r6, r0
 801ccf6:	460d      	mov	r5, r1
 801ccf8:	b93c      	cbnz	r4, 801cd0a <_Bfree+0x1a>
 801ccfa:	2010      	movs	r0, #16
 801ccfc:	f7ff ffba 	bl	801cc74 <malloc>
 801cd00:	6270      	str	r0, [r6, #36]	; 0x24
 801cd02:	6044      	str	r4, [r0, #4]
 801cd04:	6084      	str	r4, [r0, #8]
 801cd06:	6004      	str	r4, [r0, #0]
 801cd08:	60c4      	str	r4, [r0, #12]
 801cd0a:	b13d      	cbz	r5, 801cd1c <_Bfree+0x2c>
 801cd0c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801cd0e:	686a      	ldr	r2, [r5, #4]
 801cd10:	68db      	ldr	r3, [r3, #12]
 801cd12:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801cd16:	6029      	str	r1, [r5, #0]
 801cd18:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801cd1c:	bd70      	pop	{r4, r5, r6, pc}

0801cd1e <__multadd>:
 801cd1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cd22:	690d      	ldr	r5, [r1, #16]
 801cd24:	461f      	mov	r7, r3
 801cd26:	4606      	mov	r6, r0
 801cd28:	460c      	mov	r4, r1
 801cd2a:	f101 0e14 	add.w	lr, r1, #20
 801cd2e:	2300      	movs	r3, #0
 801cd30:	f8de 0000 	ldr.w	r0, [lr]
 801cd34:	b281      	uxth	r1, r0
 801cd36:	fb02 7101 	mla	r1, r2, r1, r7
 801cd3a:	0c0f      	lsrs	r7, r1, #16
 801cd3c:	0c00      	lsrs	r0, r0, #16
 801cd3e:	fb02 7000 	mla	r0, r2, r0, r7
 801cd42:	b289      	uxth	r1, r1
 801cd44:	3301      	adds	r3, #1
 801cd46:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801cd4a:	429d      	cmp	r5, r3
 801cd4c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801cd50:	f84e 1b04 	str.w	r1, [lr], #4
 801cd54:	dcec      	bgt.n	801cd30 <__multadd+0x12>
 801cd56:	b1d7      	cbz	r7, 801cd8e <__multadd+0x70>
 801cd58:	68a3      	ldr	r3, [r4, #8]
 801cd5a:	429d      	cmp	r5, r3
 801cd5c:	db12      	blt.n	801cd84 <__multadd+0x66>
 801cd5e:	6861      	ldr	r1, [r4, #4]
 801cd60:	4630      	mov	r0, r6
 801cd62:	3101      	adds	r1, #1
 801cd64:	f7ff ff90 	bl	801cc88 <_Balloc>
 801cd68:	6922      	ldr	r2, [r4, #16]
 801cd6a:	3202      	adds	r2, #2
 801cd6c:	f104 010c 	add.w	r1, r4, #12
 801cd70:	4680      	mov	r8, r0
 801cd72:	0092      	lsls	r2, r2, #2
 801cd74:	300c      	adds	r0, #12
 801cd76:	f7fe f8f7 	bl	801af68 <memcpy>
 801cd7a:	4621      	mov	r1, r4
 801cd7c:	4630      	mov	r0, r6
 801cd7e:	f7ff ffb7 	bl	801ccf0 <_Bfree>
 801cd82:	4644      	mov	r4, r8
 801cd84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801cd88:	3501      	adds	r5, #1
 801cd8a:	615f      	str	r7, [r3, #20]
 801cd8c:	6125      	str	r5, [r4, #16]
 801cd8e:	4620      	mov	r0, r4
 801cd90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801cd94 <__hi0bits>:
 801cd94:	0c02      	lsrs	r2, r0, #16
 801cd96:	0412      	lsls	r2, r2, #16
 801cd98:	4603      	mov	r3, r0
 801cd9a:	b9b2      	cbnz	r2, 801cdca <__hi0bits+0x36>
 801cd9c:	0403      	lsls	r3, r0, #16
 801cd9e:	2010      	movs	r0, #16
 801cda0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801cda4:	bf04      	itt	eq
 801cda6:	021b      	lsleq	r3, r3, #8
 801cda8:	3008      	addeq	r0, #8
 801cdaa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801cdae:	bf04      	itt	eq
 801cdb0:	011b      	lsleq	r3, r3, #4
 801cdb2:	3004      	addeq	r0, #4
 801cdb4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801cdb8:	bf04      	itt	eq
 801cdba:	009b      	lsleq	r3, r3, #2
 801cdbc:	3002      	addeq	r0, #2
 801cdbe:	2b00      	cmp	r3, #0
 801cdc0:	db06      	blt.n	801cdd0 <__hi0bits+0x3c>
 801cdc2:	005b      	lsls	r3, r3, #1
 801cdc4:	d503      	bpl.n	801cdce <__hi0bits+0x3a>
 801cdc6:	3001      	adds	r0, #1
 801cdc8:	4770      	bx	lr
 801cdca:	2000      	movs	r0, #0
 801cdcc:	e7e8      	b.n	801cda0 <__hi0bits+0xc>
 801cdce:	2020      	movs	r0, #32
 801cdd0:	4770      	bx	lr

0801cdd2 <__lo0bits>:
 801cdd2:	6803      	ldr	r3, [r0, #0]
 801cdd4:	f013 0207 	ands.w	r2, r3, #7
 801cdd8:	4601      	mov	r1, r0
 801cdda:	d00b      	beq.n	801cdf4 <__lo0bits+0x22>
 801cddc:	07da      	lsls	r2, r3, #31
 801cdde:	d423      	bmi.n	801ce28 <__lo0bits+0x56>
 801cde0:	0798      	lsls	r0, r3, #30
 801cde2:	bf49      	itett	mi
 801cde4:	085b      	lsrmi	r3, r3, #1
 801cde6:	089b      	lsrpl	r3, r3, #2
 801cde8:	2001      	movmi	r0, #1
 801cdea:	600b      	strmi	r3, [r1, #0]
 801cdec:	bf5c      	itt	pl
 801cdee:	600b      	strpl	r3, [r1, #0]
 801cdf0:	2002      	movpl	r0, #2
 801cdf2:	4770      	bx	lr
 801cdf4:	b298      	uxth	r0, r3
 801cdf6:	b9a8      	cbnz	r0, 801ce24 <__lo0bits+0x52>
 801cdf8:	0c1b      	lsrs	r3, r3, #16
 801cdfa:	2010      	movs	r0, #16
 801cdfc:	f013 0fff 	tst.w	r3, #255	; 0xff
 801ce00:	bf04      	itt	eq
 801ce02:	0a1b      	lsreq	r3, r3, #8
 801ce04:	3008      	addeq	r0, #8
 801ce06:	071a      	lsls	r2, r3, #28
 801ce08:	bf04      	itt	eq
 801ce0a:	091b      	lsreq	r3, r3, #4
 801ce0c:	3004      	addeq	r0, #4
 801ce0e:	079a      	lsls	r2, r3, #30
 801ce10:	bf04      	itt	eq
 801ce12:	089b      	lsreq	r3, r3, #2
 801ce14:	3002      	addeq	r0, #2
 801ce16:	07da      	lsls	r2, r3, #31
 801ce18:	d402      	bmi.n	801ce20 <__lo0bits+0x4e>
 801ce1a:	085b      	lsrs	r3, r3, #1
 801ce1c:	d006      	beq.n	801ce2c <__lo0bits+0x5a>
 801ce1e:	3001      	adds	r0, #1
 801ce20:	600b      	str	r3, [r1, #0]
 801ce22:	4770      	bx	lr
 801ce24:	4610      	mov	r0, r2
 801ce26:	e7e9      	b.n	801cdfc <__lo0bits+0x2a>
 801ce28:	2000      	movs	r0, #0
 801ce2a:	4770      	bx	lr
 801ce2c:	2020      	movs	r0, #32
 801ce2e:	4770      	bx	lr

0801ce30 <__i2b>:
 801ce30:	b510      	push	{r4, lr}
 801ce32:	460c      	mov	r4, r1
 801ce34:	2101      	movs	r1, #1
 801ce36:	f7ff ff27 	bl	801cc88 <_Balloc>
 801ce3a:	2201      	movs	r2, #1
 801ce3c:	6144      	str	r4, [r0, #20]
 801ce3e:	6102      	str	r2, [r0, #16]
 801ce40:	bd10      	pop	{r4, pc}

0801ce42 <__multiply>:
 801ce42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce46:	4614      	mov	r4, r2
 801ce48:	690a      	ldr	r2, [r1, #16]
 801ce4a:	6923      	ldr	r3, [r4, #16]
 801ce4c:	429a      	cmp	r2, r3
 801ce4e:	bfb8      	it	lt
 801ce50:	460b      	movlt	r3, r1
 801ce52:	4689      	mov	r9, r1
 801ce54:	bfbc      	itt	lt
 801ce56:	46a1      	movlt	r9, r4
 801ce58:	461c      	movlt	r4, r3
 801ce5a:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801ce5e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801ce62:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801ce66:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801ce6a:	eb07 060a 	add.w	r6, r7, sl
 801ce6e:	429e      	cmp	r6, r3
 801ce70:	bfc8      	it	gt
 801ce72:	3101      	addgt	r1, #1
 801ce74:	f7ff ff08 	bl	801cc88 <_Balloc>
 801ce78:	f100 0514 	add.w	r5, r0, #20
 801ce7c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801ce80:	462b      	mov	r3, r5
 801ce82:	2200      	movs	r2, #0
 801ce84:	4543      	cmp	r3, r8
 801ce86:	d316      	bcc.n	801ceb6 <__multiply+0x74>
 801ce88:	f104 0214 	add.w	r2, r4, #20
 801ce8c:	f109 0114 	add.w	r1, r9, #20
 801ce90:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 801ce94:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801ce98:	9301      	str	r3, [sp, #4]
 801ce9a:	9c01      	ldr	r4, [sp, #4]
 801ce9c:	4294      	cmp	r4, r2
 801ce9e:	4613      	mov	r3, r2
 801cea0:	d80c      	bhi.n	801cebc <__multiply+0x7a>
 801cea2:	2e00      	cmp	r6, #0
 801cea4:	dd03      	ble.n	801ceae <__multiply+0x6c>
 801cea6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801ceaa:	2b00      	cmp	r3, #0
 801ceac:	d054      	beq.n	801cf58 <__multiply+0x116>
 801ceae:	6106      	str	r6, [r0, #16]
 801ceb0:	b003      	add	sp, #12
 801ceb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ceb6:	f843 2b04 	str.w	r2, [r3], #4
 801ceba:	e7e3      	b.n	801ce84 <__multiply+0x42>
 801cebc:	f8b3 a000 	ldrh.w	sl, [r3]
 801cec0:	3204      	adds	r2, #4
 801cec2:	f1ba 0f00 	cmp.w	sl, #0
 801cec6:	d020      	beq.n	801cf0a <__multiply+0xc8>
 801cec8:	46ae      	mov	lr, r5
 801ceca:	4689      	mov	r9, r1
 801cecc:	f04f 0c00 	mov.w	ip, #0
 801ced0:	f859 4b04 	ldr.w	r4, [r9], #4
 801ced4:	f8be b000 	ldrh.w	fp, [lr]
 801ced8:	b2a3      	uxth	r3, r4
 801ceda:	fb0a b303 	mla	r3, sl, r3, fp
 801cede:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 801cee2:	f8de 4000 	ldr.w	r4, [lr]
 801cee6:	4463      	add	r3, ip
 801cee8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 801ceec:	fb0a c40b 	mla	r4, sl, fp, ip
 801cef0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801cef4:	b29b      	uxth	r3, r3
 801cef6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801cefa:	454f      	cmp	r7, r9
 801cefc:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 801cf00:	f84e 3b04 	str.w	r3, [lr], #4
 801cf04:	d8e4      	bhi.n	801ced0 <__multiply+0x8e>
 801cf06:	f8ce c000 	str.w	ip, [lr]
 801cf0a:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 801cf0e:	f1b9 0f00 	cmp.w	r9, #0
 801cf12:	d01f      	beq.n	801cf54 <__multiply+0x112>
 801cf14:	682b      	ldr	r3, [r5, #0]
 801cf16:	46ae      	mov	lr, r5
 801cf18:	468c      	mov	ip, r1
 801cf1a:	f04f 0a00 	mov.w	sl, #0
 801cf1e:	f8bc 4000 	ldrh.w	r4, [ip]
 801cf22:	f8be b002 	ldrh.w	fp, [lr, #2]
 801cf26:	fb09 b404 	mla	r4, r9, r4, fp
 801cf2a:	44a2      	add	sl, r4
 801cf2c:	b29b      	uxth	r3, r3
 801cf2e:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 801cf32:	f84e 3b04 	str.w	r3, [lr], #4
 801cf36:	f85c 3b04 	ldr.w	r3, [ip], #4
 801cf3a:	f8be 4000 	ldrh.w	r4, [lr]
 801cf3e:	0c1b      	lsrs	r3, r3, #16
 801cf40:	fb09 4303 	mla	r3, r9, r3, r4
 801cf44:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 801cf48:	4567      	cmp	r7, ip
 801cf4a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801cf4e:	d8e6      	bhi.n	801cf1e <__multiply+0xdc>
 801cf50:	f8ce 3000 	str.w	r3, [lr]
 801cf54:	3504      	adds	r5, #4
 801cf56:	e7a0      	b.n	801ce9a <__multiply+0x58>
 801cf58:	3e01      	subs	r6, #1
 801cf5a:	e7a2      	b.n	801cea2 <__multiply+0x60>

0801cf5c <__pow5mult>:
 801cf5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cf60:	4615      	mov	r5, r2
 801cf62:	f012 0203 	ands.w	r2, r2, #3
 801cf66:	4606      	mov	r6, r0
 801cf68:	460f      	mov	r7, r1
 801cf6a:	d007      	beq.n	801cf7c <__pow5mult+0x20>
 801cf6c:	3a01      	subs	r2, #1
 801cf6e:	4c21      	ldr	r4, [pc, #132]	; (801cff4 <__pow5mult+0x98>)
 801cf70:	2300      	movs	r3, #0
 801cf72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801cf76:	f7ff fed2 	bl	801cd1e <__multadd>
 801cf7a:	4607      	mov	r7, r0
 801cf7c:	10ad      	asrs	r5, r5, #2
 801cf7e:	d035      	beq.n	801cfec <__pow5mult+0x90>
 801cf80:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801cf82:	b93c      	cbnz	r4, 801cf94 <__pow5mult+0x38>
 801cf84:	2010      	movs	r0, #16
 801cf86:	f7ff fe75 	bl	801cc74 <malloc>
 801cf8a:	6270      	str	r0, [r6, #36]	; 0x24
 801cf8c:	6044      	str	r4, [r0, #4]
 801cf8e:	6084      	str	r4, [r0, #8]
 801cf90:	6004      	str	r4, [r0, #0]
 801cf92:	60c4      	str	r4, [r0, #12]
 801cf94:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801cf98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801cf9c:	b94c      	cbnz	r4, 801cfb2 <__pow5mult+0x56>
 801cf9e:	f240 2171 	movw	r1, #625	; 0x271
 801cfa2:	4630      	mov	r0, r6
 801cfa4:	f7ff ff44 	bl	801ce30 <__i2b>
 801cfa8:	2300      	movs	r3, #0
 801cfaa:	f8c8 0008 	str.w	r0, [r8, #8]
 801cfae:	4604      	mov	r4, r0
 801cfb0:	6003      	str	r3, [r0, #0]
 801cfb2:	f04f 0800 	mov.w	r8, #0
 801cfb6:	07eb      	lsls	r3, r5, #31
 801cfb8:	d50a      	bpl.n	801cfd0 <__pow5mult+0x74>
 801cfba:	4639      	mov	r1, r7
 801cfbc:	4622      	mov	r2, r4
 801cfbe:	4630      	mov	r0, r6
 801cfc0:	f7ff ff3f 	bl	801ce42 <__multiply>
 801cfc4:	4639      	mov	r1, r7
 801cfc6:	4681      	mov	r9, r0
 801cfc8:	4630      	mov	r0, r6
 801cfca:	f7ff fe91 	bl	801ccf0 <_Bfree>
 801cfce:	464f      	mov	r7, r9
 801cfd0:	106d      	asrs	r5, r5, #1
 801cfd2:	d00b      	beq.n	801cfec <__pow5mult+0x90>
 801cfd4:	6820      	ldr	r0, [r4, #0]
 801cfd6:	b938      	cbnz	r0, 801cfe8 <__pow5mult+0x8c>
 801cfd8:	4622      	mov	r2, r4
 801cfda:	4621      	mov	r1, r4
 801cfdc:	4630      	mov	r0, r6
 801cfde:	f7ff ff30 	bl	801ce42 <__multiply>
 801cfe2:	6020      	str	r0, [r4, #0]
 801cfe4:	f8c0 8000 	str.w	r8, [r0]
 801cfe8:	4604      	mov	r4, r0
 801cfea:	e7e4      	b.n	801cfb6 <__pow5mult+0x5a>
 801cfec:	4638      	mov	r0, r7
 801cfee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cff2:	bf00      	nop
 801cff4:	0801e158 	.word	0x0801e158

0801cff8 <__lshift>:
 801cff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cffc:	460c      	mov	r4, r1
 801cffe:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d002:	6923      	ldr	r3, [r4, #16]
 801d004:	6849      	ldr	r1, [r1, #4]
 801d006:	eb0a 0903 	add.w	r9, sl, r3
 801d00a:	68a3      	ldr	r3, [r4, #8]
 801d00c:	4607      	mov	r7, r0
 801d00e:	4616      	mov	r6, r2
 801d010:	f109 0501 	add.w	r5, r9, #1
 801d014:	42ab      	cmp	r3, r5
 801d016:	db31      	blt.n	801d07c <__lshift+0x84>
 801d018:	4638      	mov	r0, r7
 801d01a:	f7ff fe35 	bl	801cc88 <_Balloc>
 801d01e:	2200      	movs	r2, #0
 801d020:	4680      	mov	r8, r0
 801d022:	f100 0314 	add.w	r3, r0, #20
 801d026:	4611      	mov	r1, r2
 801d028:	4552      	cmp	r2, sl
 801d02a:	db2a      	blt.n	801d082 <__lshift+0x8a>
 801d02c:	6920      	ldr	r0, [r4, #16]
 801d02e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d032:	f104 0114 	add.w	r1, r4, #20
 801d036:	f016 021f 	ands.w	r2, r6, #31
 801d03a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801d03e:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 801d042:	d022      	beq.n	801d08a <__lshift+0x92>
 801d044:	f1c2 0c20 	rsb	ip, r2, #32
 801d048:	2000      	movs	r0, #0
 801d04a:	680e      	ldr	r6, [r1, #0]
 801d04c:	4096      	lsls	r6, r2
 801d04e:	4330      	orrs	r0, r6
 801d050:	f843 0b04 	str.w	r0, [r3], #4
 801d054:	f851 0b04 	ldr.w	r0, [r1], #4
 801d058:	458e      	cmp	lr, r1
 801d05a:	fa20 f00c 	lsr.w	r0, r0, ip
 801d05e:	d8f4      	bhi.n	801d04a <__lshift+0x52>
 801d060:	6018      	str	r0, [r3, #0]
 801d062:	b108      	cbz	r0, 801d068 <__lshift+0x70>
 801d064:	f109 0502 	add.w	r5, r9, #2
 801d068:	3d01      	subs	r5, #1
 801d06a:	4638      	mov	r0, r7
 801d06c:	f8c8 5010 	str.w	r5, [r8, #16]
 801d070:	4621      	mov	r1, r4
 801d072:	f7ff fe3d 	bl	801ccf0 <_Bfree>
 801d076:	4640      	mov	r0, r8
 801d078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d07c:	3101      	adds	r1, #1
 801d07e:	005b      	lsls	r3, r3, #1
 801d080:	e7c8      	b.n	801d014 <__lshift+0x1c>
 801d082:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801d086:	3201      	adds	r2, #1
 801d088:	e7ce      	b.n	801d028 <__lshift+0x30>
 801d08a:	3b04      	subs	r3, #4
 801d08c:	f851 2b04 	ldr.w	r2, [r1], #4
 801d090:	f843 2f04 	str.w	r2, [r3, #4]!
 801d094:	458e      	cmp	lr, r1
 801d096:	d8f9      	bhi.n	801d08c <__lshift+0x94>
 801d098:	e7e6      	b.n	801d068 <__lshift+0x70>

0801d09a <__mcmp>:
 801d09a:	6903      	ldr	r3, [r0, #16]
 801d09c:	690a      	ldr	r2, [r1, #16]
 801d09e:	1a9b      	subs	r3, r3, r2
 801d0a0:	b530      	push	{r4, r5, lr}
 801d0a2:	d10c      	bne.n	801d0be <__mcmp+0x24>
 801d0a4:	0092      	lsls	r2, r2, #2
 801d0a6:	3014      	adds	r0, #20
 801d0a8:	3114      	adds	r1, #20
 801d0aa:	1884      	adds	r4, r0, r2
 801d0ac:	4411      	add	r1, r2
 801d0ae:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801d0b2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801d0b6:	4295      	cmp	r5, r2
 801d0b8:	d003      	beq.n	801d0c2 <__mcmp+0x28>
 801d0ba:	d305      	bcc.n	801d0c8 <__mcmp+0x2e>
 801d0bc:	2301      	movs	r3, #1
 801d0be:	4618      	mov	r0, r3
 801d0c0:	bd30      	pop	{r4, r5, pc}
 801d0c2:	42a0      	cmp	r0, r4
 801d0c4:	d3f3      	bcc.n	801d0ae <__mcmp+0x14>
 801d0c6:	e7fa      	b.n	801d0be <__mcmp+0x24>
 801d0c8:	f04f 33ff 	mov.w	r3, #4294967295
 801d0cc:	e7f7      	b.n	801d0be <__mcmp+0x24>

0801d0ce <__mdiff>:
 801d0ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d0d2:	460d      	mov	r5, r1
 801d0d4:	4607      	mov	r7, r0
 801d0d6:	4611      	mov	r1, r2
 801d0d8:	4628      	mov	r0, r5
 801d0da:	4614      	mov	r4, r2
 801d0dc:	f7ff ffdd 	bl	801d09a <__mcmp>
 801d0e0:	1e06      	subs	r6, r0, #0
 801d0e2:	d108      	bne.n	801d0f6 <__mdiff+0x28>
 801d0e4:	4631      	mov	r1, r6
 801d0e6:	4638      	mov	r0, r7
 801d0e8:	f7ff fdce 	bl	801cc88 <_Balloc>
 801d0ec:	2301      	movs	r3, #1
 801d0ee:	6103      	str	r3, [r0, #16]
 801d0f0:	6146      	str	r6, [r0, #20]
 801d0f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d0f6:	bfa4      	itt	ge
 801d0f8:	4623      	movge	r3, r4
 801d0fa:	462c      	movge	r4, r5
 801d0fc:	4638      	mov	r0, r7
 801d0fe:	6861      	ldr	r1, [r4, #4]
 801d100:	bfa6      	itte	ge
 801d102:	461d      	movge	r5, r3
 801d104:	2600      	movge	r6, #0
 801d106:	2601      	movlt	r6, #1
 801d108:	f7ff fdbe 	bl	801cc88 <_Balloc>
 801d10c:	692b      	ldr	r3, [r5, #16]
 801d10e:	60c6      	str	r6, [r0, #12]
 801d110:	6926      	ldr	r6, [r4, #16]
 801d112:	f105 0914 	add.w	r9, r5, #20
 801d116:	f104 0214 	add.w	r2, r4, #20
 801d11a:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801d11e:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801d122:	f100 0514 	add.w	r5, r0, #20
 801d126:	f04f 0c00 	mov.w	ip, #0
 801d12a:	f852 ab04 	ldr.w	sl, [r2], #4
 801d12e:	f859 4b04 	ldr.w	r4, [r9], #4
 801d132:	fa1c f18a 	uxtah	r1, ip, sl
 801d136:	b2a3      	uxth	r3, r4
 801d138:	1ac9      	subs	r1, r1, r3
 801d13a:	0c23      	lsrs	r3, r4, #16
 801d13c:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801d140:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801d144:	b289      	uxth	r1, r1
 801d146:	ea4f 4c23 	mov.w	ip, r3, asr #16
 801d14a:	45c8      	cmp	r8, r9
 801d14c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801d150:	4696      	mov	lr, r2
 801d152:	f845 3b04 	str.w	r3, [r5], #4
 801d156:	d8e8      	bhi.n	801d12a <__mdiff+0x5c>
 801d158:	45be      	cmp	lr, r7
 801d15a:	d305      	bcc.n	801d168 <__mdiff+0x9a>
 801d15c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801d160:	b18b      	cbz	r3, 801d186 <__mdiff+0xb8>
 801d162:	6106      	str	r6, [r0, #16]
 801d164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d168:	f85e 1b04 	ldr.w	r1, [lr], #4
 801d16c:	fa1c f381 	uxtah	r3, ip, r1
 801d170:	141a      	asrs	r2, r3, #16
 801d172:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801d176:	b29b      	uxth	r3, r3
 801d178:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d17c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801d180:	f845 3b04 	str.w	r3, [r5], #4
 801d184:	e7e8      	b.n	801d158 <__mdiff+0x8a>
 801d186:	3e01      	subs	r6, #1
 801d188:	e7e8      	b.n	801d15c <__mdiff+0x8e>

0801d18a <__d2b>:
 801d18a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d18e:	460e      	mov	r6, r1
 801d190:	2101      	movs	r1, #1
 801d192:	ec59 8b10 	vmov	r8, r9, d0
 801d196:	4615      	mov	r5, r2
 801d198:	f7ff fd76 	bl	801cc88 <_Balloc>
 801d19c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801d1a0:	4607      	mov	r7, r0
 801d1a2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d1a6:	bb34      	cbnz	r4, 801d1f6 <__d2b+0x6c>
 801d1a8:	9301      	str	r3, [sp, #4]
 801d1aa:	f1b8 0f00 	cmp.w	r8, #0
 801d1ae:	d027      	beq.n	801d200 <__d2b+0x76>
 801d1b0:	a802      	add	r0, sp, #8
 801d1b2:	f840 8d08 	str.w	r8, [r0, #-8]!
 801d1b6:	f7ff fe0c 	bl	801cdd2 <__lo0bits>
 801d1ba:	9900      	ldr	r1, [sp, #0]
 801d1bc:	b1f0      	cbz	r0, 801d1fc <__d2b+0x72>
 801d1be:	9a01      	ldr	r2, [sp, #4]
 801d1c0:	f1c0 0320 	rsb	r3, r0, #32
 801d1c4:	fa02 f303 	lsl.w	r3, r2, r3
 801d1c8:	430b      	orrs	r3, r1
 801d1ca:	40c2      	lsrs	r2, r0
 801d1cc:	617b      	str	r3, [r7, #20]
 801d1ce:	9201      	str	r2, [sp, #4]
 801d1d0:	9b01      	ldr	r3, [sp, #4]
 801d1d2:	61bb      	str	r3, [r7, #24]
 801d1d4:	2b00      	cmp	r3, #0
 801d1d6:	bf14      	ite	ne
 801d1d8:	2102      	movne	r1, #2
 801d1da:	2101      	moveq	r1, #1
 801d1dc:	6139      	str	r1, [r7, #16]
 801d1de:	b1c4      	cbz	r4, 801d212 <__d2b+0x88>
 801d1e0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801d1e4:	4404      	add	r4, r0
 801d1e6:	6034      	str	r4, [r6, #0]
 801d1e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801d1ec:	6028      	str	r0, [r5, #0]
 801d1ee:	4638      	mov	r0, r7
 801d1f0:	b003      	add	sp, #12
 801d1f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d1f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d1fa:	e7d5      	b.n	801d1a8 <__d2b+0x1e>
 801d1fc:	6179      	str	r1, [r7, #20]
 801d1fe:	e7e7      	b.n	801d1d0 <__d2b+0x46>
 801d200:	a801      	add	r0, sp, #4
 801d202:	f7ff fde6 	bl	801cdd2 <__lo0bits>
 801d206:	9b01      	ldr	r3, [sp, #4]
 801d208:	617b      	str	r3, [r7, #20]
 801d20a:	2101      	movs	r1, #1
 801d20c:	6139      	str	r1, [r7, #16]
 801d20e:	3020      	adds	r0, #32
 801d210:	e7e5      	b.n	801d1de <__d2b+0x54>
 801d212:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801d216:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801d21a:	6030      	str	r0, [r6, #0]
 801d21c:	6918      	ldr	r0, [r3, #16]
 801d21e:	f7ff fdb9 	bl	801cd94 <__hi0bits>
 801d222:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801d226:	e7e1      	b.n	801d1ec <__d2b+0x62>

0801d228 <_calloc_r>:
 801d228:	b538      	push	{r3, r4, r5, lr}
 801d22a:	fb02 f401 	mul.w	r4, r2, r1
 801d22e:	4621      	mov	r1, r4
 801d230:	f7fd fefc 	bl	801b02c <_malloc_r>
 801d234:	4605      	mov	r5, r0
 801d236:	b118      	cbz	r0, 801d240 <_calloc_r+0x18>
 801d238:	4622      	mov	r2, r4
 801d23a:	2100      	movs	r1, #0
 801d23c:	f7fd fe9f 	bl	801af7e <memset>
 801d240:	4628      	mov	r0, r5
 801d242:	bd38      	pop	{r3, r4, r5, pc}

0801d244 <__sfputc_r>:
 801d244:	6893      	ldr	r3, [r2, #8]
 801d246:	3b01      	subs	r3, #1
 801d248:	2b00      	cmp	r3, #0
 801d24a:	b410      	push	{r4}
 801d24c:	6093      	str	r3, [r2, #8]
 801d24e:	da09      	bge.n	801d264 <__sfputc_r+0x20>
 801d250:	6994      	ldr	r4, [r2, #24]
 801d252:	42a3      	cmp	r3, r4
 801d254:	db02      	blt.n	801d25c <__sfputc_r+0x18>
 801d256:	b2cb      	uxtb	r3, r1
 801d258:	2b0a      	cmp	r3, #10
 801d25a:	d103      	bne.n	801d264 <__sfputc_r+0x20>
 801d25c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d260:	f7fe bd48 	b.w	801bcf4 <__swbuf_r>
 801d264:	6813      	ldr	r3, [r2, #0]
 801d266:	1c58      	adds	r0, r3, #1
 801d268:	6010      	str	r0, [r2, #0]
 801d26a:	7019      	strb	r1, [r3, #0]
 801d26c:	b2c8      	uxtb	r0, r1
 801d26e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d272:	4770      	bx	lr

0801d274 <__sfputs_r>:
 801d274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d276:	4606      	mov	r6, r0
 801d278:	460f      	mov	r7, r1
 801d27a:	4614      	mov	r4, r2
 801d27c:	18d5      	adds	r5, r2, r3
 801d27e:	42ac      	cmp	r4, r5
 801d280:	d101      	bne.n	801d286 <__sfputs_r+0x12>
 801d282:	2000      	movs	r0, #0
 801d284:	e007      	b.n	801d296 <__sfputs_r+0x22>
 801d286:	463a      	mov	r2, r7
 801d288:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d28c:	4630      	mov	r0, r6
 801d28e:	f7ff ffd9 	bl	801d244 <__sfputc_r>
 801d292:	1c43      	adds	r3, r0, #1
 801d294:	d1f3      	bne.n	801d27e <__sfputs_r+0xa>
 801d296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801d298 <_vfiprintf_r>:
 801d298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d29c:	b09d      	sub	sp, #116	; 0x74
 801d29e:	460c      	mov	r4, r1
 801d2a0:	4617      	mov	r7, r2
 801d2a2:	9303      	str	r3, [sp, #12]
 801d2a4:	4606      	mov	r6, r0
 801d2a6:	b118      	cbz	r0, 801d2b0 <_vfiprintf_r+0x18>
 801d2a8:	6983      	ldr	r3, [r0, #24]
 801d2aa:	b90b      	cbnz	r3, 801d2b0 <_vfiprintf_r+0x18>
 801d2ac:	f7fd fdae 	bl	801ae0c <__sinit>
 801d2b0:	4b7c      	ldr	r3, [pc, #496]	; (801d4a4 <_vfiprintf_r+0x20c>)
 801d2b2:	429c      	cmp	r4, r3
 801d2b4:	d157      	bne.n	801d366 <_vfiprintf_r+0xce>
 801d2b6:	6874      	ldr	r4, [r6, #4]
 801d2b8:	89a3      	ldrh	r3, [r4, #12]
 801d2ba:	0718      	lsls	r0, r3, #28
 801d2bc:	d55d      	bpl.n	801d37a <_vfiprintf_r+0xe2>
 801d2be:	6923      	ldr	r3, [r4, #16]
 801d2c0:	2b00      	cmp	r3, #0
 801d2c2:	d05a      	beq.n	801d37a <_vfiprintf_r+0xe2>
 801d2c4:	2300      	movs	r3, #0
 801d2c6:	9309      	str	r3, [sp, #36]	; 0x24
 801d2c8:	2320      	movs	r3, #32
 801d2ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d2ce:	2330      	movs	r3, #48	; 0x30
 801d2d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d2d4:	f04f 0b01 	mov.w	fp, #1
 801d2d8:	46b8      	mov	r8, r7
 801d2da:	4645      	mov	r5, r8
 801d2dc:	f815 3b01 	ldrb.w	r3, [r5], #1
 801d2e0:	2b00      	cmp	r3, #0
 801d2e2:	d155      	bne.n	801d390 <_vfiprintf_r+0xf8>
 801d2e4:	ebb8 0a07 	subs.w	sl, r8, r7
 801d2e8:	d00b      	beq.n	801d302 <_vfiprintf_r+0x6a>
 801d2ea:	4653      	mov	r3, sl
 801d2ec:	463a      	mov	r2, r7
 801d2ee:	4621      	mov	r1, r4
 801d2f0:	4630      	mov	r0, r6
 801d2f2:	f7ff ffbf 	bl	801d274 <__sfputs_r>
 801d2f6:	3001      	adds	r0, #1
 801d2f8:	f000 80c4 	beq.w	801d484 <_vfiprintf_r+0x1ec>
 801d2fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d2fe:	4453      	add	r3, sl
 801d300:	9309      	str	r3, [sp, #36]	; 0x24
 801d302:	f898 3000 	ldrb.w	r3, [r8]
 801d306:	2b00      	cmp	r3, #0
 801d308:	f000 80bc 	beq.w	801d484 <_vfiprintf_r+0x1ec>
 801d30c:	2300      	movs	r3, #0
 801d30e:	f04f 32ff 	mov.w	r2, #4294967295
 801d312:	9304      	str	r3, [sp, #16]
 801d314:	9307      	str	r3, [sp, #28]
 801d316:	9205      	str	r2, [sp, #20]
 801d318:	9306      	str	r3, [sp, #24]
 801d31a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d31e:	931a      	str	r3, [sp, #104]	; 0x68
 801d320:	2205      	movs	r2, #5
 801d322:	7829      	ldrb	r1, [r5, #0]
 801d324:	4860      	ldr	r0, [pc, #384]	; (801d4a8 <_vfiprintf_r+0x210>)
 801d326:	f7e2 ff63 	bl	80001f0 <memchr>
 801d32a:	f105 0801 	add.w	r8, r5, #1
 801d32e:	9b04      	ldr	r3, [sp, #16]
 801d330:	2800      	cmp	r0, #0
 801d332:	d131      	bne.n	801d398 <_vfiprintf_r+0x100>
 801d334:	06d9      	lsls	r1, r3, #27
 801d336:	bf44      	itt	mi
 801d338:	2220      	movmi	r2, #32
 801d33a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801d33e:	071a      	lsls	r2, r3, #28
 801d340:	bf44      	itt	mi
 801d342:	222b      	movmi	r2, #43	; 0x2b
 801d344:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801d348:	782a      	ldrb	r2, [r5, #0]
 801d34a:	2a2a      	cmp	r2, #42	; 0x2a
 801d34c:	d02c      	beq.n	801d3a8 <_vfiprintf_r+0x110>
 801d34e:	9a07      	ldr	r2, [sp, #28]
 801d350:	2100      	movs	r1, #0
 801d352:	200a      	movs	r0, #10
 801d354:	46a8      	mov	r8, r5
 801d356:	3501      	adds	r5, #1
 801d358:	f898 3000 	ldrb.w	r3, [r8]
 801d35c:	3b30      	subs	r3, #48	; 0x30
 801d35e:	2b09      	cmp	r3, #9
 801d360:	d96d      	bls.n	801d43e <_vfiprintf_r+0x1a6>
 801d362:	b371      	cbz	r1, 801d3c2 <_vfiprintf_r+0x12a>
 801d364:	e026      	b.n	801d3b4 <_vfiprintf_r+0x11c>
 801d366:	4b51      	ldr	r3, [pc, #324]	; (801d4ac <_vfiprintf_r+0x214>)
 801d368:	429c      	cmp	r4, r3
 801d36a:	d101      	bne.n	801d370 <_vfiprintf_r+0xd8>
 801d36c:	68b4      	ldr	r4, [r6, #8]
 801d36e:	e7a3      	b.n	801d2b8 <_vfiprintf_r+0x20>
 801d370:	4b4f      	ldr	r3, [pc, #316]	; (801d4b0 <_vfiprintf_r+0x218>)
 801d372:	429c      	cmp	r4, r3
 801d374:	bf08      	it	eq
 801d376:	68f4      	ldreq	r4, [r6, #12]
 801d378:	e79e      	b.n	801d2b8 <_vfiprintf_r+0x20>
 801d37a:	4621      	mov	r1, r4
 801d37c:	4630      	mov	r0, r6
 801d37e:	f7fe fd1d 	bl	801bdbc <__swsetup_r>
 801d382:	2800      	cmp	r0, #0
 801d384:	d09e      	beq.n	801d2c4 <_vfiprintf_r+0x2c>
 801d386:	f04f 30ff 	mov.w	r0, #4294967295
 801d38a:	b01d      	add	sp, #116	; 0x74
 801d38c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d390:	2b25      	cmp	r3, #37	; 0x25
 801d392:	d0a7      	beq.n	801d2e4 <_vfiprintf_r+0x4c>
 801d394:	46a8      	mov	r8, r5
 801d396:	e7a0      	b.n	801d2da <_vfiprintf_r+0x42>
 801d398:	4a43      	ldr	r2, [pc, #268]	; (801d4a8 <_vfiprintf_r+0x210>)
 801d39a:	1a80      	subs	r0, r0, r2
 801d39c:	fa0b f000 	lsl.w	r0, fp, r0
 801d3a0:	4318      	orrs	r0, r3
 801d3a2:	9004      	str	r0, [sp, #16]
 801d3a4:	4645      	mov	r5, r8
 801d3a6:	e7bb      	b.n	801d320 <_vfiprintf_r+0x88>
 801d3a8:	9a03      	ldr	r2, [sp, #12]
 801d3aa:	1d11      	adds	r1, r2, #4
 801d3ac:	6812      	ldr	r2, [r2, #0]
 801d3ae:	9103      	str	r1, [sp, #12]
 801d3b0:	2a00      	cmp	r2, #0
 801d3b2:	db01      	blt.n	801d3b8 <_vfiprintf_r+0x120>
 801d3b4:	9207      	str	r2, [sp, #28]
 801d3b6:	e004      	b.n	801d3c2 <_vfiprintf_r+0x12a>
 801d3b8:	4252      	negs	r2, r2
 801d3ba:	f043 0302 	orr.w	r3, r3, #2
 801d3be:	9207      	str	r2, [sp, #28]
 801d3c0:	9304      	str	r3, [sp, #16]
 801d3c2:	f898 3000 	ldrb.w	r3, [r8]
 801d3c6:	2b2e      	cmp	r3, #46	; 0x2e
 801d3c8:	d110      	bne.n	801d3ec <_vfiprintf_r+0x154>
 801d3ca:	f898 3001 	ldrb.w	r3, [r8, #1]
 801d3ce:	2b2a      	cmp	r3, #42	; 0x2a
 801d3d0:	f108 0101 	add.w	r1, r8, #1
 801d3d4:	d137      	bne.n	801d446 <_vfiprintf_r+0x1ae>
 801d3d6:	9b03      	ldr	r3, [sp, #12]
 801d3d8:	1d1a      	adds	r2, r3, #4
 801d3da:	681b      	ldr	r3, [r3, #0]
 801d3dc:	9203      	str	r2, [sp, #12]
 801d3de:	2b00      	cmp	r3, #0
 801d3e0:	bfb8      	it	lt
 801d3e2:	f04f 33ff 	movlt.w	r3, #4294967295
 801d3e6:	f108 0802 	add.w	r8, r8, #2
 801d3ea:	9305      	str	r3, [sp, #20]
 801d3ec:	4d31      	ldr	r5, [pc, #196]	; (801d4b4 <_vfiprintf_r+0x21c>)
 801d3ee:	f898 1000 	ldrb.w	r1, [r8]
 801d3f2:	2203      	movs	r2, #3
 801d3f4:	4628      	mov	r0, r5
 801d3f6:	f7e2 fefb 	bl	80001f0 <memchr>
 801d3fa:	b140      	cbz	r0, 801d40e <_vfiprintf_r+0x176>
 801d3fc:	2340      	movs	r3, #64	; 0x40
 801d3fe:	1b40      	subs	r0, r0, r5
 801d400:	fa03 f000 	lsl.w	r0, r3, r0
 801d404:	9b04      	ldr	r3, [sp, #16]
 801d406:	4303      	orrs	r3, r0
 801d408:	9304      	str	r3, [sp, #16]
 801d40a:	f108 0801 	add.w	r8, r8, #1
 801d40e:	f898 1000 	ldrb.w	r1, [r8]
 801d412:	4829      	ldr	r0, [pc, #164]	; (801d4b8 <_vfiprintf_r+0x220>)
 801d414:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d418:	2206      	movs	r2, #6
 801d41a:	f108 0701 	add.w	r7, r8, #1
 801d41e:	f7e2 fee7 	bl	80001f0 <memchr>
 801d422:	2800      	cmp	r0, #0
 801d424:	d034      	beq.n	801d490 <_vfiprintf_r+0x1f8>
 801d426:	4b25      	ldr	r3, [pc, #148]	; (801d4bc <_vfiprintf_r+0x224>)
 801d428:	bb03      	cbnz	r3, 801d46c <_vfiprintf_r+0x1d4>
 801d42a:	9b03      	ldr	r3, [sp, #12]
 801d42c:	3307      	adds	r3, #7
 801d42e:	f023 0307 	bic.w	r3, r3, #7
 801d432:	3308      	adds	r3, #8
 801d434:	9303      	str	r3, [sp, #12]
 801d436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d438:	444b      	add	r3, r9
 801d43a:	9309      	str	r3, [sp, #36]	; 0x24
 801d43c:	e74c      	b.n	801d2d8 <_vfiprintf_r+0x40>
 801d43e:	fb00 3202 	mla	r2, r0, r2, r3
 801d442:	2101      	movs	r1, #1
 801d444:	e786      	b.n	801d354 <_vfiprintf_r+0xbc>
 801d446:	2300      	movs	r3, #0
 801d448:	9305      	str	r3, [sp, #20]
 801d44a:	4618      	mov	r0, r3
 801d44c:	250a      	movs	r5, #10
 801d44e:	4688      	mov	r8, r1
 801d450:	3101      	adds	r1, #1
 801d452:	f898 2000 	ldrb.w	r2, [r8]
 801d456:	3a30      	subs	r2, #48	; 0x30
 801d458:	2a09      	cmp	r2, #9
 801d45a:	d903      	bls.n	801d464 <_vfiprintf_r+0x1cc>
 801d45c:	2b00      	cmp	r3, #0
 801d45e:	d0c5      	beq.n	801d3ec <_vfiprintf_r+0x154>
 801d460:	9005      	str	r0, [sp, #20]
 801d462:	e7c3      	b.n	801d3ec <_vfiprintf_r+0x154>
 801d464:	fb05 2000 	mla	r0, r5, r0, r2
 801d468:	2301      	movs	r3, #1
 801d46a:	e7f0      	b.n	801d44e <_vfiprintf_r+0x1b6>
 801d46c:	ab03      	add	r3, sp, #12
 801d46e:	9300      	str	r3, [sp, #0]
 801d470:	4622      	mov	r2, r4
 801d472:	4b13      	ldr	r3, [pc, #76]	; (801d4c0 <_vfiprintf_r+0x228>)
 801d474:	a904      	add	r1, sp, #16
 801d476:	4630      	mov	r0, r6
 801d478:	f7fd fecc 	bl	801b214 <_printf_float>
 801d47c:	f1b0 3fff 	cmp.w	r0, #4294967295
 801d480:	4681      	mov	r9, r0
 801d482:	d1d8      	bne.n	801d436 <_vfiprintf_r+0x19e>
 801d484:	89a3      	ldrh	r3, [r4, #12]
 801d486:	065b      	lsls	r3, r3, #25
 801d488:	f53f af7d 	bmi.w	801d386 <_vfiprintf_r+0xee>
 801d48c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d48e:	e77c      	b.n	801d38a <_vfiprintf_r+0xf2>
 801d490:	ab03      	add	r3, sp, #12
 801d492:	9300      	str	r3, [sp, #0]
 801d494:	4622      	mov	r2, r4
 801d496:	4b0a      	ldr	r3, [pc, #40]	; (801d4c0 <_vfiprintf_r+0x228>)
 801d498:	a904      	add	r1, sp, #16
 801d49a:	4630      	mov	r0, r6
 801d49c:	f7fe f970 	bl	801b780 <_printf_i>
 801d4a0:	e7ec      	b.n	801d47c <_vfiprintf_r+0x1e4>
 801d4a2:	bf00      	nop
 801d4a4:	0801dfe0 	.word	0x0801dfe0
 801d4a8:	0801e164 	.word	0x0801e164
 801d4ac:	0801e000 	.word	0x0801e000
 801d4b0:	0801dfc0 	.word	0x0801dfc0
 801d4b4:	0801e16a 	.word	0x0801e16a
 801d4b8:	0801e16e 	.word	0x0801e16e
 801d4bc:	0801b215 	.word	0x0801b215
 801d4c0:	0801d275 	.word	0x0801d275

0801d4c4 <_read_r>:
 801d4c4:	b538      	push	{r3, r4, r5, lr}
 801d4c6:	4c07      	ldr	r4, [pc, #28]	; (801d4e4 <_read_r+0x20>)
 801d4c8:	4605      	mov	r5, r0
 801d4ca:	4608      	mov	r0, r1
 801d4cc:	4611      	mov	r1, r2
 801d4ce:	2200      	movs	r2, #0
 801d4d0:	6022      	str	r2, [r4, #0]
 801d4d2:	461a      	mov	r2, r3
 801d4d4:	f7ef fcde 	bl	800ce94 <_read>
 801d4d8:	1c43      	adds	r3, r0, #1
 801d4da:	d102      	bne.n	801d4e2 <_read_r+0x1e>
 801d4dc:	6823      	ldr	r3, [r4, #0]
 801d4de:	b103      	cbz	r3, 801d4e2 <_read_r+0x1e>
 801d4e0:	602b      	str	r3, [r5, #0]
 801d4e2:	bd38      	pop	{r3, r4, r5, pc}
 801d4e4:	20003998 	.word	0x20003998

0801d4e8 <_fstat_r>:
 801d4e8:	b538      	push	{r3, r4, r5, lr}
 801d4ea:	4c07      	ldr	r4, [pc, #28]	; (801d508 <_fstat_r+0x20>)
 801d4ec:	2300      	movs	r3, #0
 801d4ee:	4605      	mov	r5, r0
 801d4f0:	4608      	mov	r0, r1
 801d4f2:	4611      	mov	r1, r2
 801d4f4:	6023      	str	r3, [r4, #0]
 801d4f6:	f7ef fd06 	bl	800cf06 <_fstat>
 801d4fa:	1c43      	adds	r3, r0, #1
 801d4fc:	d102      	bne.n	801d504 <_fstat_r+0x1c>
 801d4fe:	6823      	ldr	r3, [r4, #0]
 801d500:	b103      	cbz	r3, 801d504 <_fstat_r+0x1c>
 801d502:	602b      	str	r3, [r5, #0]
 801d504:	bd38      	pop	{r3, r4, r5, pc}
 801d506:	bf00      	nop
 801d508:	20003998 	.word	0x20003998

0801d50c <_isatty_r>:
 801d50c:	b538      	push	{r3, r4, r5, lr}
 801d50e:	4c06      	ldr	r4, [pc, #24]	; (801d528 <_isatty_r+0x1c>)
 801d510:	2300      	movs	r3, #0
 801d512:	4605      	mov	r5, r0
 801d514:	4608      	mov	r0, r1
 801d516:	6023      	str	r3, [r4, #0]
 801d518:	f7ef fcfa 	bl	800cf10 <_isatty>
 801d51c:	1c43      	adds	r3, r0, #1
 801d51e:	d102      	bne.n	801d526 <_isatty_r+0x1a>
 801d520:	6823      	ldr	r3, [r4, #0]
 801d522:	b103      	cbz	r3, 801d526 <_isatty_r+0x1a>
 801d524:	602b      	str	r3, [r5, #0]
 801d526:	bd38      	pop	{r3, r4, r5, pc}
 801d528:	20003998 	.word	0x20003998

0801d52c <__ascii_mbtowc>:
 801d52c:	b082      	sub	sp, #8
 801d52e:	b901      	cbnz	r1, 801d532 <__ascii_mbtowc+0x6>
 801d530:	a901      	add	r1, sp, #4
 801d532:	b142      	cbz	r2, 801d546 <__ascii_mbtowc+0x1a>
 801d534:	b14b      	cbz	r3, 801d54a <__ascii_mbtowc+0x1e>
 801d536:	7813      	ldrb	r3, [r2, #0]
 801d538:	600b      	str	r3, [r1, #0]
 801d53a:	7812      	ldrb	r2, [r2, #0]
 801d53c:	1c10      	adds	r0, r2, #0
 801d53e:	bf18      	it	ne
 801d540:	2001      	movne	r0, #1
 801d542:	b002      	add	sp, #8
 801d544:	4770      	bx	lr
 801d546:	4610      	mov	r0, r2
 801d548:	e7fb      	b.n	801d542 <__ascii_mbtowc+0x16>
 801d54a:	f06f 0001 	mvn.w	r0, #1
 801d54e:	e7f8      	b.n	801d542 <__ascii_mbtowc+0x16>

0801d550 <__ascii_wctomb>:
 801d550:	b149      	cbz	r1, 801d566 <__ascii_wctomb+0x16>
 801d552:	2aff      	cmp	r2, #255	; 0xff
 801d554:	bf85      	ittet	hi
 801d556:	238a      	movhi	r3, #138	; 0x8a
 801d558:	6003      	strhi	r3, [r0, #0]
 801d55a:	700a      	strbls	r2, [r1, #0]
 801d55c:	f04f 30ff 	movhi.w	r0, #4294967295
 801d560:	bf98      	it	ls
 801d562:	2001      	movls	r0, #1
 801d564:	4770      	bx	lr
 801d566:	4608      	mov	r0, r1
 801d568:	4770      	bx	lr
	...

0801d56c <_init>:
 801d56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d56e:	bf00      	nop
 801d570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d572:	bc08      	pop	{r3}
 801d574:	469e      	mov	lr, r3
 801d576:	4770      	bx	lr

0801d578 <_fini>:
 801d578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d57a:	bf00      	nop
 801d57c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d57e:	bc08      	pop	{r3}
 801d580:	469e      	mov	lr, r3
 801d582:	4770      	bx	lr
