
RobotF403.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091b4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08009354  08009354  00019354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009494  08009494  00019494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800949c  0800949c  0001949c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080094a0  080094a0  000194a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000204  20000000  080094a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000011b4  20000204  080096a8  00020204  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200013b8  080096a8  000213b8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
<<<<<<< Updated upstream
 10 .debug_info   00047fd2  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006999  00000000  00000000  00068206  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000178d3  00000000  00000000  0006eb9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001ae8  00000000  00000000  00086478  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002208  00000000  00000000  00087f60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000eebe  00000000  00000000  0008a168  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000c6df  00000000  00000000  00099026  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000a5705  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000574c  00000000  00000000  000a5784  2**2
=======
 10 .debug_info   00028551  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004ad4  00000000  00000000  00048761  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000cc22  00000000  00000000  0004d235  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001240  00000000  00000000  00059e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001748  00000000  00000000  0005b098  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000a140  00000000  00000000  0005c7e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000066fc  00000000  00000000  00066920  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0006d01c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003d9c  00000000  00000000  0006d098  2**2
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000204 	.word	0x20000204
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800933c 	.word	0x0800933c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000208 	.word	0x20000208
 80001dc:	0800933c 	.word	0x0800933c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

<<<<<<< Updated upstream
08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b97a 	b.w	8000d20 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	468c      	mov	ip, r1
 8000a4a:	460d      	mov	r5, r1
 8000a4c:	4604      	mov	r4, r0
 8000a4e:	9e08      	ldr	r6, [sp, #32]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d151      	bne.n	8000af8 <__udivmoddi4+0xb4>
 8000a54:	428a      	cmp	r2, r1
 8000a56:	4617      	mov	r7, r2
 8000a58:	d96d      	bls.n	8000b36 <__udivmoddi4+0xf2>
 8000a5a:	fab2 fe82 	clz	lr, r2
 8000a5e:	f1be 0f00 	cmp.w	lr, #0
 8000a62:	d00b      	beq.n	8000a7c <__udivmoddi4+0x38>
 8000a64:	f1ce 0c20 	rsb	ip, lr, #32
 8000a68:	fa01 f50e 	lsl.w	r5, r1, lr
 8000a6c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000a70:	fa02 f70e 	lsl.w	r7, r2, lr
 8000a74:	ea4c 0c05 	orr.w	ip, ip, r5
 8000a78:	fa00 f40e 	lsl.w	r4, r0, lr
 8000a7c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000a80:	0c25      	lsrs	r5, r4, #16
 8000a82:	fbbc f8fa 	udiv	r8, ip, sl
 8000a86:	fa1f f987 	uxth.w	r9, r7
 8000a8a:	fb0a cc18 	mls	ip, sl, r8, ip
 8000a8e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000a92:	fb08 f309 	mul.w	r3, r8, r9
 8000a96:	42ab      	cmp	r3, r5
 8000a98:	d90a      	bls.n	8000ab0 <__udivmoddi4+0x6c>
 8000a9a:	19ed      	adds	r5, r5, r7
 8000a9c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000aa0:	f080 8123 	bcs.w	8000cea <__udivmoddi4+0x2a6>
 8000aa4:	42ab      	cmp	r3, r5
 8000aa6:	f240 8120 	bls.w	8000cea <__udivmoddi4+0x2a6>
 8000aaa:	f1a8 0802 	sub.w	r8, r8, #2
 8000aae:	443d      	add	r5, r7
 8000ab0:	1aed      	subs	r5, r5, r3
 8000ab2:	b2a4      	uxth	r4, r4
 8000ab4:	fbb5 f0fa 	udiv	r0, r5, sl
 8000ab8:	fb0a 5510 	mls	r5, sl, r0, r5
 8000abc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ac0:	fb00 f909 	mul.w	r9, r0, r9
 8000ac4:	45a1      	cmp	r9, r4
 8000ac6:	d909      	bls.n	8000adc <__udivmoddi4+0x98>
 8000ac8:	19e4      	adds	r4, r4, r7
 8000aca:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ace:	f080 810a 	bcs.w	8000ce6 <__udivmoddi4+0x2a2>
 8000ad2:	45a1      	cmp	r9, r4
 8000ad4:	f240 8107 	bls.w	8000ce6 <__udivmoddi4+0x2a2>
 8000ad8:	3802      	subs	r0, #2
 8000ada:	443c      	add	r4, r7
 8000adc:	eba4 0409 	sub.w	r4, r4, r9
 8000ae0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2e00      	cmp	r6, #0
 8000ae8:	d061      	beq.n	8000bae <__udivmoddi4+0x16a>
 8000aea:	fa24 f40e 	lsr.w	r4, r4, lr
 8000aee:	2300      	movs	r3, #0
 8000af0:	6034      	str	r4, [r6, #0]
 8000af2:	6073      	str	r3, [r6, #4]
 8000af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af8:	428b      	cmp	r3, r1
 8000afa:	d907      	bls.n	8000b0c <__udivmoddi4+0xc8>
 8000afc:	2e00      	cmp	r6, #0
 8000afe:	d054      	beq.n	8000baa <__udivmoddi4+0x166>
 8000b00:	2100      	movs	r1, #0
 8000b02:	e886 0021 	stmia.w	r6, {r0, r5}
 8000b06:	4608      	mov	r0, r1
 8000b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b0c:	fab3 f183 	clz	r1, r3
 8000b10:	2900      	cmp	r1, #0
 8000b12:	f040 808e 	bne.w	8000c32 <__udivmoddi4+0x1ee>
 8000b16:	42ab      	cmp	r3, r5
 8000b18:	d302      	bcc.n	8000b20 <__udivmoddi4+0xdc>
 8000b1a:	4282      	cmp	r2, r0
 8000b1c:	f200 80fa 	bhi.w	8000d14 <__udivmoddi4+0x2d0>
 8000b20:	1a84      	subs	r4, r0, r2
 8000b22:	eb65 0503 	sbc.w	r5, r5, r3
 8000b26:	2001      	movs	r0, #1
 8000b28:	46ac      	mov	ip, r5
 8000b2a:	2e00      	cmp	r6, #0
 8000b2c:	d03f      	beq.n	8000bae <__udivmoddi4+0x16a>
 8000b2e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	b912      	cbnz	r2, 8000b3e <__udivmoddi4+0xfa>
 8000b38:	2701      	movs	r7, #1
 8000b3a:	fbb7 f7f2 	udiv	r7, r7, r2
 8000b3e:	fab7 fe87 	clz	lr, r7
 8000b42:	f1be 0f00 	cmp.w	lr, #0
 8000b46:	d134      	bne.n	8000bb2 <__udivmoddi4+0x16e>
 8000b48:	1beb      	subs	r3, r5, r7
 8000b4a:	0c3a      	lsrs	r2, r7, #16
 8000b4c:	fa1f fc87 	uxth.w	ip, r7
 8000b50:	2101      	movs	r1, #1
 8000b52:	fbb3 f8f2 	udiv	r8, r3, r2
 8000b56:	0c25      	lsrs	r5, r4, #16
 8000b58:	fb02 3318 	mls	r3, r2, r8, r3
 8000b5c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000b60:	fb0c f308 	mul.w	r3, ip, r8
 8000b64:	42ab      	cmp	r3, r5
 8000b66:	d907      	bls.n	8000b78 <__udivmoddi4+0x134>
 8000b68:	19ed      	adds	r5, r5, r7
 8000b6a:	f108 30ff 	add.w	r0, r8, #4294967295
 8000b6e:	d202      	bcs.n	8000b76 <__udivmoddi4+0x132>
 8000b70:	42ab      	cmp	r3, r5
 8000b72:	f200 80d1 	bhi.w	8000d18 <__udivmoddi4+0x2d4>
 8000b76:	4680      	mov	r8, r0
 8000b78:	1aed      	subs	r5, r5, r3
 8000b7a:	b2a3      	uxth	r3, r4
 8000b7c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000b80:	fb02 5510 	mls	r5, r2, r0, r5
 8000b84:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000b88:	fb0c fc00 	mul.w	ip, ip, r0
 8000b8c:	45a4      	cmp	ip, r4
 8000b8e:	d907      	bls.n	8000ba0 <__udivmoddi4+0x15c>
 8000b90:	19e4      	adds	r4, r4, r7
 8000b92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x15a>
 8000b98:	45a4      	cmp	ip, r4
 8000b9a:	f200 80b8 	bhi.w	8000d0e <__udivmoddi4+0x2ca>
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	eba4 040c 	sub.w	r4, r4, ip
 8000ba4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ba8:	e79d      	b.n	8000ae6 <__udivmoddi4+0xa2>
 8000baa:	4631      	mov	r1, r6
 8000bac:	4630      	mov	r0, r6
 8000bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb2:	f1ce 0420 	rsb	r4, lr, #32
 8000bb6:	fa05 f30e 	lsl.w	r3, r5, lr
 8000bba:	fa07 f70e 	lsl.w	r7, r7, lr
 8000bbe:	fa20 f804 	lsr.w	r8, r0, r4
 8000bc2:	0c3a      	lsrs	r2, r7, #16
 8000bc4:	fa25 f404 	lsr.w	r4, r5, r4
 8000bc8:	ea48 0803 	orr.w	r8, r8, r3
 8000bcc:	fbb4 f1f2 	udiv	r1, r4, r2
 8000bd0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000bd4:	fb02 4411 	mls	r4, r2, r1, r4
 8000bd8:	fa1f fc87 	uxth.w	ip, r7
 8000bdc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000be0:	fb01 f30c 	mul.w	r3, r1, ip
 8000be4:	42ab      	cmp	r3, r5
 8000be6:	fa00 f40e 	lsl.w	r4, r0, lr
 8000bea:	d909      	bls.n	8000c00 <__udivmoddi4+0x1bc>
 8000bec:	19ed      	adds	r5, r5, r7
 8000bee:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bf2:	f080 808a 	bcs.w	8000d0a <__udivmoddi4+0x2c6>
 8000bf6:	42ab      	cmp	r3, r5
 8000bf8:	f240 8087 	bls.w	8000d0a <__udivmoddi4+0x2c6>
 8000bfc:	3902      	subs	r1, #2
 8000bfe:	443d      	add	r5, r7
 8000c00:	1aeb      	subs	r3, r5, r3
 8000c02:	fa1f f588 	uxth.w	r5, r8
 8000c06:	fbb3 f0f2 	udiv	r0, r3, r2
 8000c0a:	fb02 3310 	mls	r3, r2, r0, r3
 8000c0e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c12:	fb00 f30c 	mul.w	r3, r0, ip
 8000c16:	42ab      	cmp	r3, r5
 8000c18:	d907      	bls.n	8000c2a <__udivmoddi4+0x1e6>
 8000c1a:	19ed      	adds	r5, r5, r7
 8000c1c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c20:	d26f      	bcs.n	8000d02 <__udivmoddi4+0x2be>
 8000c22:	42ab      	cmp	r3, r5
 8000c24:	d96d      	bls.n	8000d02 <__udivmoddi4+0x2be>
 8000c26:	3802      	subs	r0, #2
 8000c28:	443d      	add	r5, r7
 8000c2a:	1aeb      	subs	r3, r5, r3
 8000c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c30:	e78f      	b.n	8000b52 <__udivmoddi4+0x10e>
 8000c32:	f1c1 0720 	rsb	r7, r1, #32
 8000c36:	fa22 f807 	lsr.w	r8, r2, r7
 8000c3a:	408b      	lsls	r3, r1
 8000c3c:	fa05 f401 	lsl.w	r4, r5, r1
 8000c40:	ea48 0303 	orr.w	r3, r8, r3
 8000c44:	fa20 fe07 	lsr.w	lr, r0, r7
 8000c48:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000c4c:	40fd      	lsrs	r5, r7
 8000c4e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000c52:	fbb5 f9fc 	udiv	r9, r5, ip
 8000c56:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000c5a:	fb0c 5519 	mls	r5, ip, r9, r5
 8000c5e:	fa1f f883 	uxth.w	r8, r3
 8000c62:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000c66:	fb09 f408 	mul.w	r4, r9, r8
 8000c6a:	42ac      	cmp	r4, r5
 8000c6c:	fa02 f201 	lsl.w	r2, r2, r1
 8000c70:	fa00 fa01 	lsl.w	sl, r0, r1
 8000c74:	d908      	bls.n	8000c88 <__udivmoddi4+0x244>
 8000c76:	18ed      	adds	r5, r5, r3
 8000c78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c7c:	d243      	bcs.n	8000d06 <__udivmoddi4+0x2c2>
 8000c7e:	42ac      	cmp	r4, r5
 8000c80:	d941      	bls.n	8000d06 <__udivmoddi4+0x2c2>
 8000c82:	f1a9 0902 	sub.w	r9, r9, #2
 8000c86:	441d      	add	r5, r3
 8000c88:	1b2d      	subs	r5, r5, r4
 8000c8a:	fa1f fe8e 	uxth.w	lr, lr
 8000c8e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000c92:	fb0c 5510 	mls	r5, ip, r0, r5
 8000c96:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000c9a:	fb00 f808 	mul.w	r8, r0, r8
 8000c9e:	45a0      	cmp	r8, r4
 8000ca0:	d907      	bls.n	8000cb2 <__udivmoddi4+0x26e>
 8000ca2:	18e4      	adds	r4, r4, r3
 8000ca4:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ca8:	d229      	bcs.n	8000cfe <__udivmoddi4+0x2ba>
 8000caa:	45a0      	cmp	r8, r4
 8000cac:	d927      	bls.n	8000cfe <__udivmoddi4+0x2ba>
 8000cae:	3802      	subs	r0, #2
 8000cb0:	441c      	add	r4, r3
 8000cb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cb6:	eba4 0408 	sub.w	r4, r4, r8
 8000cba:	fba0 8902 	umull	r8, r9, r0, r2
 8000cbe:	454c      	cmp	r4, r9
 8000cc0:	46c6      	mov	lr, r8
 8000cc2:	464d      	mov	r5, r9
 8000cc4:	d315      	bcc.n	8000cf2 <__udivmoddi4+0x2ae>
 8000cc6:	d012      	beq.n	8000cee <__udivmoddi4+0x2aa>
 8000cc8:	b156      	cbz	r6, 8000ce0 <__udivmoddi4+0x29c>
 8000cca:	ebba 030e 	subs.w	r3, sl, lr
 8000cce:	eb64 0405 	sbc.w	r4, r4, r5
 8000cd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000cd6:	40cb      	lsrs	r3, r1
 8000cd8:	431f      	orrs	r7, r3
 8000cda:	40cc      	lsrs	r4, r1
 8000cdc:	6037      	str	r7, [r6, #0]
 8000cde:	6074      	str	r4, [r6, #4]
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	e6f8      	b.n	8000adc <__udivmoddi4+0x98>
 8000cea:	4690      	mov	r8, r2
 8000cec:	e6e0      	b.n	8000ab0 <__udivmoddi4+0x6c>
 8000cee:	45c2      	cmp	sl, r8
 8000cf0:	d2ea      	bcs.n	8000cc8 <__udivmoddi4+0x284>
 8000cf2:	ebb8 0e02 	subs.w	lr, r8, r2
 8000cf6:	eb69 0503 	sbc.w	r5, r9, r3
 8000cfa:	3801      	subs	r0, #1
 8000cfc:	e7e4      	b.n	8000cc8 <__udivmoddi4+0x284>
 8000cfe:	4628      	mov	r0, r5
 8000d00:	e7d7      	b.n	8000cb2 <__udivmoddi4+0x26e>
 8000d02:	4640      	mov	r0, r8
 8000d04:	e791      	b.n	8000c2a <__udivmoddi4+0x1e6>
 8000d06:	4681      	mov	r9, r0
 8000d08:	e7be      	b.n	8000c88 <__udivmoddi4+0x244>
 8000d0a:	4601      	mov	r1, r0
 8000d0c:	e778      	b.n	8000c00 <__udivmoddi4+0x1bc>
 8000d0e:	3802      	subs	r0, #2
 8000d10:	443c      	add	r4, r7
 8000d12:	e745      	b.n	8000ba0 <__udivmoddi4+0x15c>
 8000d14:	4608      	mov	r0, r1
 8000d16:	e708      	b.n	8000b2a <__udivmoddi4+0xe6>
 8000d18:	f1a8 0802 	sub.w	r8, r8, #2
 8000d1c:	443d      	add	r5, r7
 8000d1e:	e72b      	b.n	8000b78 <__udivmoddi4+0x134>

08000d20 <__aeabi_idiv0>:
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop

08000d24 <L6206_AttachErrorHandler>:
* to the error Hanlder
* @retval None
**********************************************************/
=======
08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b97a 	b.w	800058c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	468c      	mov	ip, r1
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	9e08      	ldr	r6, [sp, #32]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d151      	bne.n	8000364 <__udivmoddi4+0xb4>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d96d      	bls.n	80003a2 <__udivmoddi4+0xf2>
 80002c6:	fab2 fe82 	clz	lr, r2
 80002ca:	f1be 0f00 	cmp.w	lr, #0
 80002ce:	d00b      	beq.n	80002e8 <__udivmoddi4+0x38>
 80002d0:	f1ce 0c20 	rsb	ip, lr, #32
 80002d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ec:	0c25      	lsrs	r5, r4, #16
 80002ee:	fbbc f8fa 	udiv	r8, ip, sl
 80002f2:	fa1f f987 	uxth.w	r9, r7
 80002f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002fe:	fb08 f309 	mul.w	r3, r8, r9
 8000302:	42ab      	cmp	r3, r5
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x6c>
 8000306:	19ed      	adds	r5, r5, r7
 8000308:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800030c:	f080 8123 	bcs.w	8000556 <__udivmoddi4+0x2a6>
 8000310:	42ab      	cmp	r3, r5
 8000312:	f240 8120 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000316:	f1a8 0802 	sub.w	r8, r8, #2
 800031a:	443d      	add	r5, r7
 800031c:	1aed      	subs	r5, r5, r3
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb5 f0fa 	udiv	r0, r5, sl
 8000324:	fb0a 5510 	mls	r5, sl, r0, r5
 8000328:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800032c:	fb00 f909 	mul.w	r9, r0, r9
 8000330:	45a1      	cmp	r9, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x98>
 8000334:	19e4      	adds	r4, r4, r7
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	f080 810a 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800033e:	45a1      	cmp	r9, r4
 8000340:	f240 8107 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 0409 	sub.w	r4, r4, r9
 800034c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000350:	2100      	movs	r1, #0
 8000352:	2e00      	cmp	r6, #0
 8000354:	d061      	beq.n	800041a <__udivmoddi4+0x16a>
 8000356:	fa24 f40e 	lsr.w	r4, r4, lr
 800035a:	2300      	movs	r3, #0
 800035c:	6034      	str	r4, [r6, #0]
 800035e:	6073      	str	r3, [r6, #4]
 8000360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xc8>
 8000368:	2e00      	cmp	r6, #0
 800036a:	d054      	beq.n	8000416 <__udivmoddi4+0x166>
 800036c:	2100      	movs	r1, #0
 800036e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000372:	4608      	mov	r0, r1
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	f040 808e 	bne.w	800049e <__udivmoddi4+0x1ee>
 8000382:	42ab      	cmp	r3, r5
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xdc>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2d0>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb65 0503 	sbc.w	r5, r5, r3
 8000392:	2001      	movs	r0, #1
 8000394:	46ac      	mov	ip, r5
 8000396:	2e00      	cmp	r6, #0
 8000398:	d03f      	beq.n	800041a <__udivmoddi4+0x16a>
 800039a:	e886 1010 	stmia.w	r6, {r4, ip}
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	b912      	cbnz	r2, 80003aa <__udivmoddi4+0xfa>
 80003a4:	2701      	movs	r7, #1
 80003a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003aa:	fab7 fe87 	clz	lr, r7
 80003ae:	f1be 0f00 	cmp.w	lr, #0
 80003b2:	d134      	bne.n	800041e <__udivmoddi4+0x16e>
 80003b4:	1beb      	subs	r3, r5, r7
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb3 f8f2 	udiv	r8, r3, r2
 80003c2:	0c25      	lsrs	r5, r4, #16
 80003c4:	fb02 3318 	mls	r3, r2, r8, r3
 80003c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003cc:	fb0c f308 	mul.w	r3, ip, r8
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x134>
 80003d4:	19ed      	adds	r5, r5, r7
 80003d6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x132>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	f200 80d1 	bhi.w	8000584 <__udivmoddi4+0x2d4>
 80003e2:	4680      	mov	r8, r0
 80003e4:	1aed      	subs	r5, r5, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ec:	fb02 5510 	mls	r5, r2, r0, r5
 80003f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003f4:	fb0c fc00 	mul.w	ip, ip, r0
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x15c>
 80003fc:	19e4      	adds	r4, r4, r7
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x15a>
 8000404:	45a4      	cmp	ip, r4
 8000406:	f200 80b8 	bhi.w	800057a <__udivmoddi4+0x2ca>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 040c 	sub.w	r4, r4, ip
 8000410:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000414:	e79d      	b.n	8000352 <__udivmoddi4+0xa2>
 8000416:	4631      	mov	r1, r6
 8000418:	4630      	mov	r0, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1ce 0420 	rsb	r4, lr, #32
 8000422:	fa05 f30e 	lsl.w	r3, r5, lr
 8000426:	fa07 f70e 	lsl.w	r7, r7, lr
 800042a:	fa20 f804 	lsr.w	r8, r0, r4
 800042e:	0c3a      	lsrs	r2, r7, #16
 8000430:	fa25 f404 	lsr.w	r4, r5, r4
 8000434:	ea48 0803 	orr.w	r8, r8, r3
 8000438:	fbb4 f1f2 	udiv	r1, r4, r2
 800043c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000440:	fb02 4411 	mls	r4, r2, r1, r4
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800044c:	fb01 f30c 	mul.w	r3, r1, ip
 8000450:	42ab      	cmp	r3, r5
 8000452:	fa00 f40e 	lsl.w	r4, r0, lr
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x1bc>
 8000458:	19ed      	adds	r5, r5, r7
 800045a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800045e:	f080 808a 	bcs.w	8000576 <__udivmoddi4+0x2c6>
 8000462:	42ab      	cmp	r3, r5
 8000464:	f240 8087 	bls.w	8000576 <__udivmoddi4+0x2c6>
 8000468:	3902      	subs	r1, #2
 800046a:	443d      	add	r5, r7
 800046c:	1aeb      	subs	r3, r5, r3
 800046e:	fa1f f588 	uxth.w	r5, r8
 8000472:	fbb3 f0f2 	udiv	r0, r3, r2
 8000476:	fb02 3310 	mls	r3, r2, r0, r3
 800047a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800047e:	fb00 f30c 	mul.w	r3, r0, ip
 8000482:	42ab      	cmp	r3, r5
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1e6>
 8000486:	19ed      	adds	r5, r5, r7
 8000488:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048c:	d26f      	bcs.n	800056e <__udivmoddi4+0x2be>
 800048e:	42ab      	cmp	r3, r5
 8000490:	d96d      	bls.n	800056e <__udivmoddi4+0x2be>
 8000492:	3802      	subs	r0, #2
 8000494:	443d      	add	r5, r7
 8000496:	1aeb      	subs	r3, r5, r3
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	e78f      	b.n	80003be <__udivmoddi4+0x10e>
 800049e:	f1c1 0720 	rsb	r7, r1, #32
 80004a2:	fa22 f807 	lsr.w	r8, r2, r7
 80004a6:	408b      	lsls	r3, r1
 80004a8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ac:	ea48 0303 	orr.w	r3, r8, r3
 80004b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004b8:	40fd      	lsrs	r5, r7
 80004ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80004be:	fbb5 f9fc 	udiv	r9, r5, ip
 80004c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ca:	fa1f f883 	uxth.w	r8, r3
 80004ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004d2:	fb09 f408 	mul.w	r4, r9, r8
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	fa02 f201 	lsl.w	r2, r2, r1
 80004dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x244>
 80004e2:	18ed      	adds	r5, r5, r3
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004e8:	d243      	bcs.n	8000572 <__udivmoddi4+0x2c2>
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	d941      	bls.n	8000572 <__udivmoddi4+0x2c2>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	441d      	add	r5, r3
 80004f4:	1b2d      	subs	r5, r5, r4
 80004f6:	fa1f fe8e 	uxth.w	lr, lr
 80004fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80004fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000502:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45a0      	cmp	r8, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x26e>
 800050e:	18e4      	adds	r4, r4, r3
 8000510:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000514:	d229      	bcs.n	800056a <__udivmoddi4+0x2ba>
 8000516:	45a0      	cmp	r8, r4
 8000518:	d927      	bls.n	800056a <__udivmoddi4+0x2ba>
 800051a:	3802      	subs	r0, #2
 800051c:	441c      	add	r4, r3
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba4 0408 	sub.w	r4, r4, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454c      	cmp	r4, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	464d      	mov	r5, r9
 8000530:	d315      	bcc.n	800055e <__udivmoddi4+0x2ae>
 8000532:	d012      	beq.n	800055a <__udivmoddi4+0x2aa>
 8000534:	b156      	cbz	r6, 800054c <__udivmoddi4+0x29c>
 8000536:	ebba 030e 	subs.w	r3, sl, lr
 800053a:	eb64 0405 	sbc.w	r4, r4, r5
 800053e:	fa04 f707 	lsl.w	r7, r4, r7
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431f      	orrs	r7, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	6037      	str	r7, [r6, #0]
 800054a:	6074      	str	r4, [r6, #4]
 800054c:	2100      	movs	r1, #0
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	4618      	mov	r0, r3
 8000554:	e6f8      	b.n	8000348 <__udivmoddi4+0x98>
 8000556:	4690      	mov	r8, r2
 8000558:	e6e0      	b.n	800031c <__udivmoddi4+0x6c>
 800055a:	45c2      	cmp	sl, r8
 800055c:	d2ea      	bcs.n	8000534 <__udivmoddi4+0x284>
 800055e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000562:	eb69 0503 	sbc.w	r5, r9, r3
 8000566:	3801      	subs	r0, #1
 8000568:	e7e4      	b.n	8000534 <__udivmoddi4+0x284>
 800056a:	4628      	mov	r0, r5
 800056c:	e7d7      	b.n	800051e <__udivmoddi4+0x26e>
 800056e:	4640      	mov	r0, r8
 8000570:	e791      	b.n	8000496 <__udivmoddi4+0x1e6>
 8000572:	4681      	mov	r9, r0
 8000574:	e7be      	b.n	80004f4 <__udivmoddi4+0x244>
 8000576:	4601      	mov	r1, r0
 8000578:	e778      	b.n	800046c <__udivmoddi4+0x1bc>
 800057a:	3802      	subs	r0, #2
 800057c:	443c      	add	r4, r7
 800057e:	e745      	b.n	800040c <__udivmoddi4+0x15c>
 8000580:	4608      	mov	r0, r1
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xe6>
 8000584:	f1a8 0802 	sub.w	r8, r8, #2
 8000588:	443d      	add	r5, r7
 800058a:	e72b      	b.n	80003e4 <__udivmoddi4+0x134>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <L6206_AttachErrorHandler>:
 * to the error Hanlder
 * @retval None
 **********************************************************/
>>>>>>> Stashed changes
void L6206_AttachErrorHandler(void (*callback)(uint16_t))
{
	errorHandlerCallback = (void (*)(uint16_t))callback;
 8000d24:	4b01      	ldr	r3, [pc, #4]	; (8000d2c <L6206_AttachErrorHandler+0x8>)
 8000d26:	6018      	str	r0, [r3, #0]
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	2000029c 	.word	0x2000029c

08000d30 <L6206_AttachFlagInterrupt>:
* to the Flag Interrupt
* @retval None
**********************************************************/
void L6206_AttachFlagInterrupt(void (*callback)(void))
{
	flagInterruptCallback = (void (*)())callback;
 8000d30:	4b01      	ldr	r3, [pc, #4]	; (8000d38 <L6206_AttachFlagInterrupt+0x8>)
 8000d32:	6018      	str	r0, [r3, #0]
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	200002a0 	.word	0x200002a0

08000d3c <L6206_GetBridgeInputPwmFreq>:
* @param[in] bridgeId 0 for bridge A, 1 for bridge B
* @retval Freq in Hz
**********************************************************/
uint32_t L6206_GetBridgeInputPwmFreq(uint8_t bridgeId)
{
	return(devicePrm.pwmFreq[(bridgeId << 1)]);
 8000d3c:	4b02      	ldr	r3, [pc, #8]	; (8000d48 <L6206_GetBridgeInputPwmFreq+0xc>)
 8000d3e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
}
 8000d42:	6840      	ldr	r0, [r0, #4]
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20000274 	.word	0x20000274

08000d4c <L6206_GetFwVersion>:
* @retval L6206_FW_VERSION
**********************************************************/
uint32_t L6206_GetFwVersion(void)
{
	return(L6206_FW_VERSION);
}
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	4770      	bx	lr

08000d50 <L6206_ReadId>:
* @retval Id of the l6206 Driver Instance
**********************************************************/
uint16_t L6206_ReadId(void)
{
	return(l6206DriverInstance);
}
 8000d50:	4b01      	ldr	r3, [pc, #4]	; (8000d58 <L6206_ReadId+0x8>)
 8000d52:	8818      	ldrh	r0, [r3, #0]
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	20000220 	.word	0x20000220

08000d5c <L6206_SetNbDevices>:
	if (nbDevices <= MAX_NUMBER_OF_DEVICES) {
		return TRUE;
	}else  {
		return FALSE;
	}
}
 8000d5c:	2801      	cmp	r0, #1
 8000d5e:	bf8c      	ite	hi
 8000d60:	2000      	movhi	r0, #0
 8000d62:	2001      	movls	r0, #1
 8000d64:	4770      	bx	lr
	...

08000d68 <L6206_ErrorHandler>:
* @param[in] error Number of the error
* @retval None
**********************************************************/
void L6206_ErrorHandler(uint16_t error)
{
	if (errorHandlerCallback != 0) {
 8000d68:	4b02      	ldr	r3, [pc, #8]	; (8000d74 <L6206_ErrorHandler+0xc>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	b103      	cbz	r3, 8000d70 <L6206_ErrorHandler+0x8>
		(void)errorHandlerCallback(error);
 8000d6e:	4718      	bx	r3
 8000d70:	e7fe      	b.n	8000d70 <L6206_ErrorHandler+0x8>
 8000d72:	bf00      	nop
 8000d74:	2000029c 	.word	0x2000029c

08000d78 <L6206_GetCurrentSpeed>:
{
 8000d78:	b508      	push	{r3, lr}
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <L6206_GetCurrentSpeed+0x2c>)
 8000d7c:	490a      	ldr	r1, [pc, #40]	; (8000da8 <L6206_GetCurrentSpeed+0x30>)
 8000d7e:	781a      	ldrb	r2, [r3, #0]
 8000d80:	5c8a      	ldrb	r2, [r1, r2]
 8000d82:	4282      	cmp	r2, r0
 8000d84:	d205      	bcs.n	8000d92 <L6206_GetCurrentSpeed+0x1a>
		L6206_ErrorHandler(L6206_ERROR_1);
 8000d86:	f248 0001 	movw	r0, #32769	; 0x8001
 8000d8a:	f7ff ffed 	bl	8000d68 <L6206_ErrorHandler>
	uint16_t speed = 0;
 8000d8e:	2000      	movs	r0, #0
}
 8000d90:	bd08      	pop	{r3, pc}
	}else if (devicePrm.motionState[motorId] != INACTIVE) {
 8000d92:	181a      	adds	r2, r3, r0
 8000d94:	f892 2020 	ldrb.w	r2, [r2, #32]
 8000d98:	2a08      	cmp	r2, #8
 8000d9a:	d0f8      	beq.n	8000d8e <L6206_GetCurrentSpeed+0x16>
		speed = devicePrm.speed[motorId];
 8000d9c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8000da0:	8a98      	ldrh	r0, [r3, #20]
 8000da2:	bd08      	pop	{r3, pc}
 8000da4:	20000274 	.word	0x20000274
 8000da8:	0800937c 	.word	0x0800937c

08000dac <L6206_GetDeviceState>:
{
 8000dac:	b508      	push	{r3, lr}
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 8000dae:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <L6206_GetDeviceState+0x24>)
 8000db0:	4908      	ldr	r1, [pc, #32]	; (8000dd4 <L6206_GetDeviceState+0x28>)
 8000db2:	781a      	ldrb	r2, [r3, #0]
 8000db4:	5c8a      	ldrb	r2, [r1, r2]
 8000db6:	4282      	cmp	r2, r0
 8000db8:	d205      	bcs.n	8000dc6 <L6206_GetDeviceState+0x1a>
		L6206_ErrorHandler(L6206_ERROR_1);
 8000dba:	f248 0001 	movw	r0, #32769	; 0x8001
 8000dbe:	f7ff ffd3 	bl	8000d68 <L6206_ErrorHandler>
	motorState_t state = INACTIVE;
 8000dc2:	2008      	movs	r0, #8
 8000dc4:	bd08      	pop	{r3, pc}
		state = devicePrm.motionState[motorId];
 8000dc6:	4403      	add	r3, r0
 8000dc8:	f893 0020 	ldrb.w	r0, [r3, #32]
}
 8000dcc:	bd08      	pop	{r3, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000274 	.word	0x20000274
 8000dd4:	0800937c 	.word	0x0800937c

08000dd8 <L6206_GetMaxSpeed>:
{
 8000dd8:	b508      	push	{r3, lr}
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 8000dda:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <L6206_GetMaxSpeed+0x24>)
 8000ddc:	4908      	ldr	r1, [pc, #32]	; (8000e00 <L6206_GetMaxSpeed+0x28>)
 8000dde:	781a      	ldrb	r2, [r3, #0]
 8000de0:	5c8a      	ldrb	r2, [r1, r2]
 8000de2:	4282      	cmp	r2, r0
 8000de4:	d205      	bcs.n	8000df2 <L6206_GetMaxSpeed+0x1a>
		L6206_ErrorHandler(L6206_ERROR_1);
 8000de6:	f248 0001 	movw	r0, #32769	; 0x8001
 8000dea:	f7ff ffbd 	bl	8000d68 <L6206_ErrorHandler>
	uint16_t speed = 0;
 8000dee:	2000      	movs	r0, #0
 8000df0:	bd08      	pop	{r3, pc}
		speed = devicePrm.speed[motorId];
 8000df2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8000df6:	8a98      	ldrh	r0, [r3, #20]
}
 8000df8:	bd08      	pop	{r3, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000274 	.word	0x20000274
 8000e00:	0800937c 	.word	0x0800937c

08000e04 <L6206_GetBridgeStatus>:
{
 8000e04:	b508      	push	{r3, lr}
	uint16_t status = L6206_Board_GetFlagPinState(bridgeId);
 8000e06:	f003 f817 	bl	8003e38 <L6206_Board_GetFlagPinState>
}
 8000e0a:	b280      	uxth	r0, r0
 8000e0c:	bd08      	pop	{r3, pc}
	...

08000e10 <L6206_FlagInterruptHandler>:
/******************************************************//**
* @brief  Handlers of the flag interrupt which calls the user callback (if defined)
* @retval None
**********************************************************/
void L6206_FlagInterruptHandler(void)
{
 8000e10:	b510      	push	{r4, lr}
	uint16_t status = L6206_Board_GetFlagPinState(bridgeId);
 8000e12:	2000      	movs	r0, #0
 8000e14:	f003 f810 	bl	8003e38 <L6206_Board_GetFlagPinState>
	bool status;

	status = L6206_GetBridgeStatus(BRIDGE_A);
	if (status != devicePrm.bridgeEnabled[BRIDGE_A]) {
 8000e18:	4c0c      	ldr	r4, [pc, #48]	; (8000e4c <L6206_FlagInterruptHandler+0x3c>)
 8000e1a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	status = L6206_GetBridgeStatus(BRIDGE_A);
 8000e1e:	b2c0      	uxtb	r0, r0
	if (status != devicePrm.bridgeEnabled[BRIDGE_A]) {
 8000e20:	4283      	cmp	r3, r0
		devicePrm.bridgeEnabled[BRIDGE_A] = status;
 8000e22:	bf18      	it	ne
 8000e24:	f884 0024 	strbne.w	r0, [r4, #36]	; 0x24
	uint16_t status = L6206_Board_GetFlagPinState(bridgeId);
 8000e28:	2001      	movs	r0, #1
 8000e2a:	f003 f805 	bl	8003e38 <L6206_Board_GetFlagPinState>
	}

	status = L6206_GetBridgeStatus(BRIDGE_B);
	if (status != devicePrm.bridgeEnabled[BRIDGE_B]) {
 8000e2e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
	status = L6206_GetBridgeStatus(BRIDGE_B);
 8000e32:	b2c0      	uxtb	r0, r0
	if (status != devicePrm.bridgeEnabled[BRIDGE_B]) {
 8000e34:	4283      	cmp	r3, r0
		devicePrm.bridgeEnabled[BRIDGE_B] = status;
	}

	if (flagInterruptCallback != 0) {
 8000e36:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <L6206_FlagInterruptHandler+0x40>)
		devicePrm.bridgeEnabled[BRIDGE_B] = status;
 8000e38:	bf18      	it	ne
 8000e3a:	f884 0025 	strbne.w	r0, [r4, #37]	; 0x25
	if (flagInterruptCallback != 0) {
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	b113      	cbz	r3, 8000e48 <L6206_FlagInterruptHandler+0x38>
		flagInterruptCallback();
	}
}
 8000e42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flagInterruptCallback();
 8000e46:	4718      	bx	r3
 8000e48:	bd10      	pop	{r4, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000274 	.word	0x20000274
 8000e50:	200002a0 	.word	0x200002a0

08000e54 <L6206_SetDualFullBridgeConfig>:
{
 8000e54:	b510      	push	{r4, lr}
	devicePrm.config = (dualFullBridgeConfig_t)newConfig;
 8000e56:	4c2b      	ldr	r4, [pc, #172]	; (8000f04 <L6206_SetDualFullBridgeConfig+0xb0>)
 8000e58:	7020      	strb	r0, [r4, #0]
	L6206_Board_PwmDeInit(INPUT_1A);
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f003 f858 	bl	8003f10 <L6206_Board_PwmDeInit>
	L6206_Board_PwmDeInit(INPUT_2A);
 8000e60:	2001      	movs	r0, #1
 8000e62:	f003 f855 	bl	8003f10 <L6206_Board_PwmDeInit>
	L6206_Board_PwmDeInit(INPUT_1B);
 8000e66:	2002      	movs	r0, #2
 8000e68:	f003 f852 	bl	8003f10 <L6206_Board_PwmDeInit>
	L6206_Board_PwmDeInit(INPUT_2B);
 8000e6c:	2003      	movs	r0, #3
 8000e6e:	f003 f84f 	bl	8003f10 <L6206_Board_PwmDeInit>
	switch (devicePrm.config) {
 8000e72:	7823      	ldrb	r3, [r4, #0]
 8000e74:	2b0c      	cmp	r3, #12
 8000e76:	d844      	bhi.n	8000f02 <L6206_SetDualFullBridgeConfig+0xae>
 8000e78:	e8df f003 	tbb	[pc, r3]
 8000e7c:	07070707 	.word	0x07070707
 8000e80:	1a1a1515 	.word	0x1a1a1515
 8000e84:	2d2d2525 	.word	0x2d2d2525
 8000e88:	38          	.byte	0x38
 8000e89:	00          	.byte	0x00
		L6206_Board_PwmInit(INPUT_1A);
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f003 f864 	bl	8003f58 <L6206_Board_PwmInit>
		L6206_Board_PwmInit(INPUT_2A);
 8000e90:	2001      	movs	r0, #1
		L6206_Board_PwmInit(INPUT_1A);
 8000e92:	f003 f861 	bl	8003f58 <L6206_Board_PwmInit>
		L6206_Board_PwmInit(INPUT_1B);
 8000e96:	2002      	movs	r0, #2
 8000e98:	f003 f85e 	bl	8003f58 <L6206_Board_PwmInit>
		L6206_Board_PwmInit(INPUT_2B);
 8000e9c:	2003      	movs	r0, #3
}
 8000e9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		L6206_Board_PwmInit(INPUT_1A);
 8000ea2:	f003 b859 	b.w	8003f58 <L6206_Board_PwmInit>
		L6206_Board_PwmDeInit(INPUT_2A);
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	f003 f832 	bl	8003f10 <L6206_Board_PwmDeInit>
		L6206_Board_PwmInit(INPUT_1A);
 8000eac:	2000      	movs	r0, #0
 8000eae:	e7f0      	b.n	8000e92 <L6206_SetDualFullBridgeConfig+0x3e>
		L6206_Board_PwmDeInit(INPUT_2B);
 8000eb0:	2003      	movs	r0, #3
 8000eb2:	f003 f82d 	bl	8003f10 <L6206_Board_PwmDeInit>
		L6206_Board_PwmInit(INPUT_1A);
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f003 f84e 	bl	8003f58 <L6206_Board_PwmInit>
		L6206_Board_PwmInit(INPUT_2A);
 8000ebc:	2001      	movs	r0, #1
		L6206_Board_PwmInit(INPUT_1A);
 8000ebe:	f003 f84b 	bl	8003f58 <L6206_Board_PwmInit>
		L6206_Board_PwmInit(INPUT_1B);
 8000ec2:	2002      	movs	r0, #2
 8000ec4:	e7eb      	b.n	8000e9e <L6206_SetDualFullBridgeConfig+0x4a>
		L6206_Board_PwmDeInit(INPUT_2A);
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	f003 f822 	bl	8003f10 <L6206_Board_PwmDeInit>
		L6206_Board_PwmDeInit(INPUT_2B);
 8000ecc:	2003      	movs	r0, #3
 8000ece:	f003 f81f 	bl	8003f10 <L6206_Board_PwmDeInit>
		L6206_Board_PwmInit(INPUT_1A);
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	e7f3      	b.n	8000ebe <L6206_SetDualFullBridgeConfig+0x6a>
		L6206_Board_PwmDeInit(INPUT_1B);
 8000ed6:	2002      	movs	r0, #2
 8000ed8:	f003 f81a 	bl	8003f10 <L6206_Board_PwmDeInit>
		L6206_Board_PwmDeInit(INPUT_2B);
 8000edc:	2003      	movs	r0, #3
 8000ede:	f003 f817 	bl	8003f10 <L6206_Board_PwmDeInit>
		L6206_Board_PwmInit(INPUT_1A);
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f003 f838 	bl	8003f58 <L6206_Board_PwmInit>
		L6206_Board_PwmInit(INPUT_2A);
 8000ee8:	2001      	movs	r0, #1
 8000eea:	e7d8      	b.n	8000e9e <L6206_SetDualFullBridgeConfig+0x4a>
		L6206_Board_PwmDeInit(INPUT_2A);
 8000eec:	2001      	movs	r0, #1
 8000eee:	f003 f80f 	bl	8003f10 <L6206_Board_PwmDeInit>
		L6206_Board_PwmDeInit(INPUT_1B);
 8000ef2:	2002      	movs	r0, #2
 8000ef4:	f003 f80c 	bl	8003f10 <L6206_Board_PwmDeInit>
		L6206_Board_PwmDeInit(INPUT_2B);
 8000ef8:	2003      	movs	r0, #3
 8000efa:	f003 f809 	bl	8003f10 <L6206_Board_PwmDeInit>
		L6206_Board_PwmInit(INPUT_1A);
 8000efe:	2000      	movs	r0, #0
 8000f00:	e7cd      	b.n	8000e9e <L6206_SetDualFullBridgeConfig+0x4a>
 8000f02:	bd10      	pop	{r4, pc}
 8000f04:	20000274 	.word	0x20000274

08000f08 <L6206_DisableBridge>:
{
 8000f08:	b570      	push	{r4, r5, r6, lr}
	devicePrm.bridgeEnabled[bridgeId] = FALSE;
 8000f0a:	4c0c      	ldr	r4, [pc, #48]	; (8000f3c <L6206_DisableBridge+0x34>)
{
 8000f0c:	4606      	mov	r6, r0
	L6206_Board_DisableBridge(bridgeId);
 8000f0e:	f002 ff37 	bl	8003d80 <L6206_Board_DisableBridge>
	devicePrm.bridgeEnabled[bridgeId] = FALSE;
 8000f12:	19a3      	adds	r3, r4, r6
 8000f14:	2500      	movs	r5, #0
 8000f16:	f883 5024 	strb.w	r5, [r3, #36]	; 0x24
	if (devicePrm.config >= PARALLELING_IN1A_IN2A__IN1B_IN2B__1_BIDIR_MOTOR) {
 8000f1a:	7823      	ldrb	r3, [r4, #0]
 8000f1c:	2b08      	cmp	r3, #8
 8000f1e:	d90b      	bls.n	8000f38 <L6206_DisableBridge+0x30>
		if (bridgeId == BRIDGE_A) {
 8000f20:	b92e      	cbnz	r6, 8000f2e <L6206_DisableBridge+0x26>
			L6206_Board_DisableBridge(BRIDGE_B);
 8000f22:	2001      	movs	r0, #1
 8000f24:	f002 ff2c 	bl	8003d80 <L6206_Board_DisableBridge>
			devicePrm.bridgeEnabled[BRIDGE_B] = FALSE;
 8000f28:	f884 6025 	strb.w	r6, [r4, #37]	; 0x25
 8000f2c:	bd70      	pop	{r4, r5, r6, pc}
			L6206_Board_DisableBridge(BRIDGE_A);
 8000f2e:	4628      	mov	r0, r5
 8000f30:	f002 ff26 	bl	8003d80 <L6206_Board_DisableBridge>
			devicePrm.bridgeEnabled[BRIDGE_A] = FALSE;
 8000f34:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
 8000f38:	bd70      	pop	{r4, r5, r6, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000274 	.word	0x20000274

08000f40 <L6206_EnableBridge>:
{
 8000f40:	b570      	push	{r4, r5, r6, lr}
	devicePrm.bridgeEnabled[bridgeId] = TRUE;
 8000f42:	4d0f      	ldr	r5, [pc, #60]	; (8000f80 <L6206_EnableBridge+0x40>)
 8000f44:	182b      	adds	r3, r5, r0
 8000f46:	2401      	movs	r4, #1
 8000f48:	f883 4024 	strb.w	r4, [r3, #36]	; 0x24
	if (devicePrm.config >= PARALLELING_IN1A_IN2A__IN1B_IN2B__1_BIDIR_MOTOR) {
 8000f4c:	782b      	ldrb	r3, [r5, #0]
 8000f4e:	2b08      	cmp	r3, #8
{
 8000f50:	4606      	mov	r6, r0
	if (devicePrm.config >= PARALLELING_IN1A_IN2A__IN1B_IN2B__1_BIDIR_MOTOR) {
 8000f52:	d910      	bls.n	8000f76 <L6206_EnableBridge+0x36>
		L6206_Board_EnableBridge(bridgeId, 0);
 8000f54:	2100      	movs	r1, #0
 8000f56:	f002 ff3b 	bl	8003dd0 <L6206_Board_EnableBridge>
			L6206_Board_EnableBridge(BRIDGE_B, 1);
 8000f5a:	4621      	mov	r1, r4
		if (bridgeId == BRIDGE_A) {
 8000f5c:	b92e      	cbnz	r6, 8000f6a <L6206_EnableBridge+0x2a>
			L6206_Board_EnableBridge(BRIDGE_B, 1);
 8000f5e:	4620      	mov	r0, r4
 8000f60:	f002 ff36 	bl	8003dd0 <L6206_Board_EnableBridge>
			devicePrm.bridgeEnabled[BRIDGE_B] = TRUE;
 8000f64:	f885 4025 	strb.w	r4, [r5, #37]	; 0x25
 8000f68:	bd70      	pop	{r4, r5, r6, pc}
			L6206_Board_EnableBridge(BRIDGE_A, 1);
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	f002 ff30 	bl	8003dd0 <L6206_Board_EnableBridge>
			devicePrm.bridgeEnabled[BRIDGE_A] = TRUE;
 8000f70:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
 8000f74:	bd70      	pop	{r4, r5, r6, pc}
		L6206_Board_EnableBridge(bridgeId, 1);
 8000f76:	4621      	mov	r1, r4
}
 8000f78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		L6206_Board_EnableBridge(bridgeId, 1);
 8000f7c:	f002 bf28 	b.w	8003dd0 <L6206_Board_EnableBridge>
 8000f80:	20000274 	.word	0x20000274

08000f84 <L6206_GetMotorHandle>:
}
 8000f84:	4800      	ldr	r0, [pc, #0]	; (8000f88 <L6206_GetMotorHandle+0x4>)
 8000f86:	4770      	bx	lr
 8000f88:	20000000 	.word	0x20000000

08000f8c <L6206_GetBridgeIdUsedByMotorId>:
* @retval bridgeId 0 for bridge A , 1 for bridge B
**********************************************************/
uint8_t L6206_GetBridgeIdUsedByMotorId(uint8_t motorId)
{
	uint8_t bridgeId;
	switch (devicePrm.config) {
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <L6206_GetBridgeIdUsedByMotorId+0x30>)
 8000f8e:	781a      	ldrb	r2, [r3, #0]
 8000f90:	2a08      	cmp	r2, #8
 8000f92:	d808      	bhi.n	8000fa6 <L6206_GetBridgeIdUsedByMotorId+0x1a>
 8000f94:	2301      	movs	r3, #1
 8000f96:	4093      	lsls	r3, r2
 8000f98:	f240 1273 	movw	r2, #371	; 0x173
 8000f9c:	4213      	tst	r3, r2
 8000f9e:	d104      	bne.n	8000faa <L6206_GetBridgeIdUsedByMotorId+0x1e>
 8000fa0:	f013 038c 	ands.w	r3, r3, #140	; 0x8c
 8000fa4:	d105      	bne.n	8000fb2 <L6206_GetBridgeIdUsedByMotorId+0x26>
	case PARALLELING_IN1A_IN2A__IN1B_IN2B__1_BIDIR_MOTOR:
	case PARALLELING_IN1A_IN1B__IN2A_IN2B__1_UNDIR_MOTOR_BRIDGE_1A__1_UNDIR_MOTOR_BRIDGE_2A:
	case PARALLELING_IN1A_IN1B__IN2A_IN2B__1_BIDIR_MOTOR:
	case PARALLELING_ALL_WITH_IN1A___1_UNDIR_MOTOR:
	default:
		bridgeId = 0;
 8000fa6:	2000      	movs	r0, #0
		break;
	}
	return(bridgeId);
}
 8000fa8:	4770      	bx	lr
			bridgeId = 1;
 8000faa:	3000      	adds	r0, #0
 8000fac:	bf18      	it	ne
 8000fae:	2001      	movne	r0, #1
 8000fb0:	4770      	bx	lr
 8000fb2:	2801      	cmp	r0, #1
 8000fb4:	bf94      	ite	ls
 8000fb6:	2000      	movls	r0, #0
 8000fb8:	2001      	movhi	r0, #1
 8000fba:	4770      	bx	lr
 8000fbc:	20000274 	.word	0x20000274

08000fc0 <L6206_GetMotorIdUsingbridgeInput>:
**********************************************************/
uint8_t L6206_GetMotorIdUsingbridgeInput(uint8_t bridgeInput)
{
	uint8_t motorId;

	switch (devicePrm.config) {
 8000fc0:	4b13      	ldr	r3, [pc, #76]	; (8001010 <L6206_GetMotorIdUsingbridgeInput+0x50>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b0a      	cmp	r3, #10
 8000fc6:	d81f      	bhi.n	8001008 <L6206_GetMotorIdUsingbridgeInput+0x48>
 8000fc8:	e8df f003 	tbb	[pc, r3]
 8000fcc:	16120b06 	.word	0x16120b06
 8000fd0:	12060b06 	.word	0x12060b06
 8000fd4:	1e06      	.short	0x1e06
 8000fd6:	1b          	.byte	0x1b
 8000fd7:	00          	.byte	0x00
	case PARALLELING_IN1B_IN2B__1_BIDIR_MOTOR_BRIDGE_A__1_UNDIR_MOTOR_BRIDGE_B:
	case PARALLELING_IN1A_IN2A__IN1B_IN2B__1_UNDIR_MOTOR_BRIDGE_A__1_UNDIR_MOTOR_BRIDGE_B:
		if (bridgeInput >= INPUT_1B) {
			motorId = 1;
		}else  {
			motorId = 0;
 8000fd8:	2801      	cmp	r0, #1
 8000fda:	bf94      	ite	ls
 8000fdc:	2000      	movls	r0, #0
 8000fde:	2001      	movhi	r0, #1
 8000fe0:	4770      	bx	lr
		}
		break;
	case PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__2_UNDIR_MOTOR_BRIDGE_B:
	case   PARALLELING_IN1A_IN2A__1_UNDIR_MOTOR_BRIDGE_A__2_UNDIR_MOTOR_BRIDGE_B:
		if (bridgeInput == INPUT_2B) {
 8000fe2:	2803      	cmp	r0, #3
 8000fe4:	d012      	beq.n	800100c <L6206_GetMotorIdUsingbridgeInput+0x4c>
			motorId = 0;
 8000fe6:	2802      	cmp	r0, #2
			motorId = 0;
		}
		break;
	case PARALLELING_NONE___2_UNDIR_MOTOR_BRIDGE_A__2_UNDIR_MOTOR_BRIDGE_B:
		if (bridgeInput == INPUT_2B) {
			motorId = 3;
 8000fe8:	bf14      	ite	ne
 8000fea:	2000      	movne	r0, #0
 8000fec:	2001      	moveq	r0, #1
 8000fee:	4770      	bx	lr
		if (bridgeInput >= INPUT_1B) {
 8000ff0:	2801      	cmp	r0, #1
 8000ff2:	d80b      	bhi.n	800100c <L6206_GetMotorIdUsingbridgeInput+0x4c>
			motorId = 3;
 8000ff4:	2801      	cmp	r0, #1
 8000ff6:	e7f7      	b.n	8000fe8 <L6206_GetMotorIdUsingbridgeInput+0x28>
		if (bridgeInput == INPUT_2B) {
 8000ff8:	2803      	cmp	r0, #3
 8000ffa:	d008      	beq.n	800100e <L6206_GetMotorIdUsingbridgeInput+0x4e>
		}else if (bridgeInput == INPUT_1B) {
 8000ffc:	2802      	cmp	r0, #2
 8000ffe:	d1f9      	bne.n	8000ff4 <L6206_GetMotorIdUsingbridgeInput+0x34>
 8001000:	4770      	bx	lr
		}else  {
			motorId = 0;
		}
		break;
	case PARALLELING_IN1A_IN1B__IN2A_IN2B__1_UNDIR_MOTOR_BRIDGE_1A__1_UNDIR_MOTOR_BRIDGE_2A:
		if ((bridgeInput == INPUT_2A) || (bridgeInput == INPUT_2B)) {
 8001002:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 8001006:	e7f5      	b.n	8000ff4 <L6206_GetMotorIdUsingbridgeInput+0x34>
		break;
	case   PARALLELING_IN1A_IN2A__IN1B_IN2B__1_BIDIR_MOTOR:
	case   PARALLELING_IN1A_IN1B__IN2A_IN2B__1_BIDIR_MOTOR:
	case   PARALLELING_ALL_WITH_IN1A___1_UNDIR_MOTOR:
	default:
		motorId = 0;
 8001008:	2000      	movs	r0, #0
 800100a:	4770      	bx	lr
			motorId = 2;
 800100c:	2002      	movs	r0, #2
		break;
	}

	return(motorId);
}
 800100e:	4770      	bx	lr
 8001010:	20000274 	.word	0x20000274

08001014 <L6206_GetBridgeInputUsedByMotorId>:
* @retval PWM input 0 for 1A, 1 for 2A, 2 for 1B, 3 for 3B
**********************************************************/
uint8_t L6206_GetBridgeInputUsedByMotorId(uint8_t motorId)
{
<<<<<<< Updated upstream
	uint8_t bridgeInput;
	switch (devicePrm.config) {
 8001014:	4b21      	ldr	r3, [pc, #132]	; (800109c <L6206_GetBridgeInputUsedByMotorId+0x88>)
 8001016:	781a      	ldrb	r2, [r3, #0]
 8001018:	2a0b      	cmp	r2, #11
 800101a:	d83d      	bhi.n	8001098 <L6206_GetBridgeInputUsedByMotorId+0x84>
 800101c:	e8df f002 	tbb	[pc, r2]
 8001020:	1a150e06 	.word	0x1a150e06
 8001024:	2b272421 	.word	0x2b272421
 8001028:	07383230 	.word	0x07383230
	case PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B:
		if (motorId == 0) {
 800102c:	b918      	cbnz	r0, 8001036 <L6206_GetBridgeInputUsedByMotorId+0x22>
		}else  {
			bridgeInput = INPUT_2A;
		}
		break;
	case PARALLELING_IN1A_IN1B__IN2A_IN2B__1_BIDIR_MOTOR:
		if (devicePrm.direction[0] == FORWARD) {
 800102e:	7f18      	ldrb	r0, [r3, #28]
				bridgeInput = INPUT_1B;
 8001030:	f110 30ff 	adds.w	r0, r0, #4294967295
 8001034:	e02d      	b.n	8001092 <L6206_GetBridgeInputUsedByMotorId+0x7e>
			if (devicePrm.direction[1] == FORWARD) {
 8001036:	7f5b      	ldrb	r3, [r3, #29]
			bridgeInput = INPUT_1B;
 8001038:	2b01      	cmp	r3, #1
 800103a:	e002      	b.n	8001042 <L6206_GetBridgeInputUsedByMotorId+0x2e>
		if (motorId == 0) {
 800103c:	2800      	cmp	r0, #0
 800103e:	d0f6      	beq.n	800102e <L6206_GetBridgeInputUsedByMotorId+0x1a>
			bridgeInput = INPUT_1B;
 8001040:	2801      	cmp	r0, #1
 8001042:	bf14      	ite	ne
 8001044:	2003      	movne	r0, #3
 8001046:	2002      	moveq	r0, #2
 8001048:	4770      	bx	lr
		if (motorId == 0) {
 800104a:	b330      	cbz	r0, 800109a <L6206_GetBridgeInputUsedByMotorId+0x86>
		}else if (motorId == 1) {
 800104c:	2801      	cmp	r0, #1
 800104e:	d024      	beq.n	800109a <L6206_GetBridgeInputUsedByMotorId+0x86>
			if (devicePrm.direction[2] == FORWARD) {
 8001050:	7f9b      	ldrb	r3, [r3, #30]
 8001052:	e7f1      	b.n	8001038 <L6206_GetBridgeInputUsedByMotorId+0x24>
		if (motorId == 0) {
 8001054:	b308      	cbz	r0, 800109a <L6206_GetBridgeInputUsedByMotorId+0x86>
		}else if (motorId == 1) {
 8001056:	2801      	cmp	r0, #1
 8001058:	d01f      	beq.n	800109a <L6206_GetBridgeInputUsedByMotorId+0x86>
				bridgeInput = INPUT_2B;
 800105a:	2802      	cmp	r0, #2
 800105c:	bf18      	it	ne
 800105e:	2003      	movne	r0, #3
 8001060:	4770      	bx	lr
		if (motorId == 0) {
 8001062:	2800      	cmp	r0, #0
 8001064:	d1e7      	bne.n	8001036 <L6206_GetBridgeInputUsedByMotorId+0x22>
 8001066:	4770      	bx	lr
		if (motorId == 0) {
 8001068:	2800      	cmp	r0, #0
 800106a:	d1e9      	bne.n	8001040 <L6206_GetBridgeInputUsedByMotorId+0x2c>
 800106c:	4770      	bx	lr
		if (motorId == 0) {
 800106e:	2800      	cmp	r0, #0
 8001070:	d0dd      	beq.n	800102e <L6206_GetBridgeInputUsedByMotorId+0x1a>
			bridgeInput = INPUT_1B;
 8001072:	2002      	movs	r0, #2
 8001074:	4770      	bx	lr
		if (motorId == 0) {
 8001076:	b180      	cbz	r0, 800109a <L6206_GetBridgeInputUsedByMotorId+0x86>
			bridgeInput = INPUT_1B;
 8001078:	2801      	cmp	r0, #1
 800107a:	bf18      	it	ne
 800107c:	2002      	movne	r0, #2
 800107e:	4770      	bx	lr
 8001080:	2800      	cmp	r0, #0
 8001082:	e7fa      	b.n	800107a <L6206_GetBridgeInputUsedByMotorId+0x66>
		if (devicePrm.direction[0] == FORWARD) {
 8001084:	7f1b      	ldrb	r3, [r3, #28]
			bridgeInput = INPUT_1A;
 8001086:	2b01      	cmp	r3, #1
 8001088:	bf14      	ite	ne
 800108a:	2002      	movne	r0, #2
 800108c:	2000      	moveq	r0, #0
 800108e:	4770      	bx	lr
				bridgeInput = INPUT_1B;
 8001090:	3000      	adds	r0, #0
 8001092:	bf18      	it	ne
 8001094:	2001      	movne	r0, #1
 8001096:	4770      	bx	lr
			bridgeInput = INPUT_2A;
		}
		break;
	case PARALLELING_ALL_WITH_IN1A___1_UNDIR_MOTOR:
	default:
		bridgeInput = INPUT_1A;
 8001098:	2000      	movs	r0, #0
		break;
	}
	return(bridgeInput);
}
 800109a:	4770      	bx	lr
 800109c:	20000274 	.word	0x20000274

080010a0 <L6206_GetSecondBridgeInputUsedByMotorId>:
* @brief  Get the second PWM input used by a given bidirectionnal motor
* @param motorId from 0 to MAX_NUMBER_OF_BRUSH_DC_MOTORS
* @retval PWM input 0 for 1A, 1 for 2A, 2 for 1B, 3 for 3B
**********************************************************/
=======
  uint8_t bridgeInput;
  switch (devicePrm.config)
 8000880:	4b21      	ldr	r3, [pc, #132]	; (8000908 <L6206_GetBridgeInputUsedByMotorId+0x88>)
 8000882:	781a      	ldrb	r2, [r3, #0]
 8000884:	2a0b      	cmp	r2, #11
 8000886:	d83d      	bhi.n	8000904 <L6206_GetBridgeInputUsedByMotorId+0x84>
 8000888:	e8df f002 	tbb	[pc, r2]
 800088c:	1a150e06 	.word	0x1a150e06
 8000890:	2b272421 	.word	0x2b272421
 8000894:	07383230 	.word	0x07383230
  {
    case PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B:
      if  (motorId == 0)
 8000898:	b918      	cbnz	r0, 80008a2 <L6206_GetBridgeInputUsedByMotorId+0x22>
      {
        bridgeInput = INPUT_2A;
      }      
      break;
    case PARALLELING_IN1A_IN1B__IN2A_IN2B__1_BIDIR_MOTOR:
      if (devicePrm.direction[0] == FORWARD)
 800089a:	7f18      	ldrb	r0, [r3, #28]
           bridgeInput = INPUT_1B;
 800089c:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
 80008a0:	e02d      	b.n	80008fe <L6206_GetBridgeInputUsedByMotorId+0x7e>
         if (devicePrm.direction[1] == FORWARD)
 80008a2:	7f5b      	ldrb	r3, [r3, #29]
        bridgeInput = INPUT_1B;        
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	e002      	b.n	80008ae <L6206_GetBridgeInputUsedByMotorId+0x2e>
      if  (motorId == 0)
 80008a8:	2800      	cmp	r0, #0
 80008aa:	d0f6      	beq.n	800089a <L6206_GetBridgeInputUsedByMotorId+0x1a>
        bridgeInput = INPUT_1B;        
 80008ac:	2801      	cmp	r0, #1
 80008ae:	bf14      	ite	ne
 80008b0:	2003      	movne	r0, #3
 80008b2:	2002      	moveq	r0, #2
 80008b4:	4770      	bx	lr
      if  (motorId == 0)
 80008b6:	b330      	cbz	r0, 8000906 <L6206_GetBridgeInputUsedByMotorId+0x86>
      else if (motorId == 1)
 80008b8:	2801      	cmp	r0, #1
 80008ba:	d024      	beq.n	8000906 <L6206_GetBridgeInputUsedByMotorId+0x86>
         if (devicePrm.direction[2] == FORWARD)
 80008bc:	7f9b      	ldrb	r3, [r3, #30]
 80008be:	e7f1      	b.n	80008a4 <L6206_GetBridgeInputUsedByMotorId+0x24>
      if  (motorId == 0)
 80008c0:	b308      	cbz	r0, 8000906 <L6206_GetBridgeInputUsedByMotorId+0x86>
      else if (motorId == 1)
 80008c2:	2801      	cmp	r0, #1
 80008c4:	d01f      	beq.n	8000906 <L6206_GetBridgeInputUsedByMotorId+0x86>
           bridgeInput = INPUT_2B;
 80008c6:	2802      	cmp	r0, #2
 80008c8:	bf18      	it	ne
 80008ca:	2003      	movne	r0, #3
 80008cc:	4770      	bx	lr
      if  (motorId == 0)
 80008ce:	2800      	cmp	r0, #0
 80008d0:	d1e7      	bne.n	80008a2 <L6206_GetBridgeInputUsedByMotorId+0x22>
 80008d2:	4770      	bx	lr
      if  (motorId == 0)
 80008d4:	2800      	cmp	r0, #0
 80008d6:	d1e9      	bne.n	80008ac <L6206_GetBridgeInputUsedByMotorId+0x2c>
 80008d8:	4770      	bx	lr
      if  (motorId == 0)
 80008da:	2800      	cmp	r0, #0
 80008dc:	d0dd      	beq.n	800089a <L6206_GetBridgeInputUsedByMotorId+0x1a>
        bridgeInput = INPUT_1B;        
 80008de:	2002      	movs	r0, #2
 80008e0:	4770      	bx	lr
      if  (motorId == 0)
 80008e2:	b180      	cbz	r0, 8000906 <L6206_GetBridgeInputUsedByMotorId+0x86>
        bridgeInput = INPUT_1B;        
 80008e4:	2801      	cmp	r0, #1
 80008e6:	bf18      	it	ne
 80008e8:	2002      	movne	r0, #2
 80008ea:	4770      	bx	lr
 80008ec:	2800      	cmp	r0, #0
 80008ee:	e7fa      	b.n	80008e6 <L6206_GetBridgeInputUsedByMotorId+0x66>
      if (devicePrm.direction[0] == FORWARD)
 80008f0:	7f1b      	ldrb	r3, [r3, #28]
        bridgeInput = INPUT_1A;
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	bf14      	ite	ne
 80008f6:	2002      	movne	r0, #2
 80008f8:	2000      	moveq	r0, #0
 80008fa:	4770      	bx	lr
           bridgeInput = INPUT_1B;
 80008fc:	3000      	adds	r0, #0
 80008fe:	bf18      	it	ne
 8000900:	2001      	movne	r0, #1
 8000902:	4770      	bx	lr
        bridgeInput = INPUT_2A;
      }  
      break;      
    case PARALLELING_ALL_WITH_IN1A___1_UNDIR_MOTOR:
    default:
      bridgeInput = INPUT_1A;
 8000904:	2000      	movs	r0, #0
      break;       
  }  
  return (bridgeInput);
}
 8000906:	4770      	bx	lr
 8000908:	20000210 	.word	0x20000210

0800090c <L6206_GetSecondBridgeInputUsedByMotorId>:
 * @brief  Get the second PWM input used by a given bidirectionnal motor
 * @param motorId from 0 to MAX_NUMBER_OF_BRUSH_DC_MOTORS 
 * @retval PWM input 0 for 1A, 1 for 2A, 2 for 1B, 3 for 3B
 **********************************************************/
>>>>>>> Stashed changes
uint8_t L6206_GetSecondBridgeInputUsedByMotorId(uint8_t motorId)
{
 80010a0:	b508      	push	{r3, lr}
	uint8_t bridgeInput = 0xFF;

	switch (devicePrm.config) {
 80010a2:	4b17      	ldr	r3, [pc, #92]	; (8001100 <L6206_GetSecondBridgeInputUsedByMotorId+0x60>)
 80010a4:	781a      	ldrb	r2, [r3, #0]
 80010a6:	2a0b      	cmp	r2, #11
 80010a8:	d81d      	bhi.n	80010e6 <L6206_GetSecondBridgeInputUsedByMotorId+0x46>
 80010aa:	e8df f002 	tbb	[pc, r2]
 80010ae:	1a06      	.short	0x1a06
 80010b0:	1c111c0c 	.word	0x1c111c0c
 80010b4:	221c1c1a 	.word	0x221c1c1a
 80010b8:	071c      	.short	0x071c
	case PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B:
		if (motorId == 0) {
 80010ba:	b958      	cbnz	r0, 80010d4 <L6206_GetSecondBridgeInputUsedByMotorId+0x34>
			bridgeInput = INPUT_1A;
		}
		break;

	case PARALLELING_IN1A_IN1B__IN2A_IN2B__1_BIDIR_MOTOR:
		if (devicePrm.direction[0] == FORWARD) {
 80010bc:	7f18      	ldrb	r0, [r3, #28]
			bridgeInput = INPUT_1B;
 80010be:	1e43      	subs	r3, r0, #1
 80010c0:	4258      	negs	r0, r3
 80010c2:	4158      	adcs	r0, r3
 80010c4:	bd08      	pop	{r3, pc}
		if (motorId == 2) {
 80010c6:	2802      	cmp	r0, #2
 80010c8:	d10d      	bne.n	80010e6 <L6206_GetSecondBridgeInputUsedByMotorId+0x46>
			if (devicePrm.direction[2] == FORWARD) {
 80010ca:	7f9b      	ldrb	r3, [r3, #30]
				bridgeInput = INPUT_2B;
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	e005      	b.n	80010dc <L6206_GetSecondBridgeInputUsedByMotorId+0x3c>
		if (motorId == 1) {
 80010d0:	2801      	cmp	r0, #1
 80010d2:	d108      	bne.n	80010e6 <L6206_GetSecondBridgeInputUsedByMotorId+0x46>
			if (devicePrm.direction[1] == FORWARD) {
 80010d4:	7f5b      	ldrb	r3, [r3, #29]
				bridgeInput = INPUT_2B;
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	bf18      	it	ne
 80010da:	2002      	movne	r0, #2
 80010dc:	bf08      	it	eq
 80010de:	2003      	moveq	r0, #3
 80010e0:	bd08      	pop	{r3, pc}
		if (motorId == 0) {
 80010e2:	2800      	cmp	r0, #0
 80010e4:	d0ea      	beq.n	80010bc <L6206_GetSecondBridgeInputUsedByMotorId+0x1c>
	default:
		bridgeInput = 0XFF;
		break;
	}
	if (bridgeInput == 0XFF) {
		L6206_ErrorHandler(L6206_ERROR_2);
 80010e6:	f248 0002 	movw	r0, #32770	; 0x8002
 80010ea:	f7ff fe3d 	bl	8000d68 <L6206_ErrorHandler>
 80010ee:	20ff      	movs	r0, #255	; 0xff
	}

	return(bridgeInput);
}
 80010f0:	bd08      	pop	{r3, pc}
		if (devicePrm.direction[0] == FORWARD) {
 80010f2:	7f1b      	ldrb	r3, [r3, #28]
			bridgeInput = INPUT_1A;
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	bf0c      	ite	eq
 80010f8:	2002      	moveq	r0, #2
 80010fa:	2000      	movne	r0, #0
 80010fc:	bd08      	pop	{r3, pc}
 80010fe:	bf00      	nop
 8001100:	20000274 	.word	0x20000274

08001104 <L6206_IsBidirectionnalMotor>:
* @retval True if motor is bidirectionnal, else false
**********************************************************/
bool L6206_IsBidirectionnalMotor(uint8_t motorId)
{
	bool isBiDir = FALSE;
	switch (devicePrm.config) {
 8001104:	4b0d      	ldr	r3, [pc, #52]	; (800113c <L6206_IsBidirectionnalMotor+0x38>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b0b      	cmp	r3, #11
 800110a:	d814      	bhi.n	8001136 <L6206_IsBidirectionnalMotor+0x32>
 800110c:	e8df f003 	tbb	[pc, r3]
 8001110:	130c0806 	.word	0x130c0806
 8001114:	13081311 	.word	0x13081311
 8001118:	06130613 	.word	0x06130613
	case PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B:
	case PARALLELING_IN1A_IN2A__IN1B_IN2B__1_BIDIR_MOTOR:
	case PARALLELING_IN1A_IN1B__IN2A_IN2B__1_BIDIR_MOTOR:
		isBiDir = TRUE;
 800111c:	2001      	movs	r0, #1
 800111e:	4770      	bx	lr
 8001120:	fab0 f080 	clz	r0, r0
 8001124:	0940      	lsrs	r0, r0, #5
 8001126:	4770      	bx	lr
 8001128:	2802      	cmp	r0, #2
 800112a:	bf14      	ite	ne
 800112c:	2000      	movne	r0, #0
 800112e:	2001      	moveq	r0, #1
 8001130:	4770      	bx	lr
 8001132:	2801      	cmp	r0, #1
 8001134:	e7f9      	b.n	800112a <L6206_IsBidirectionnalMotor+0x26>
	bool isBiDir = FALSE;
 8001136:	2000      	movs	r0, #0
	default:
		break;
	}

	return(isBiDir);
}
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	20000274 	.word	0x20000274

08001140 <L6206_HardStop>:
{
 8001140:	b570      	push	{r4, r5, r6, lr}
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 8001142:	4c13      	ldr	r4, [pc, #76]	; (8001190 <L6206_HardStop+0x50>)
 8001144:	4a13      	ldr	r2, [pc, #76]	; (8001194 <L6206_HardStop+0x54>)
 8001146:	7823      	ldrb	r3, [r4, #0]
 8001148:	5cd3      	ldrb	r3, [r2, r3]
 800114a:	4283      	cmp	r3, r0
{
 800114c:	4605      	mov	r5, r0
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 800114e:	d205      	bcs.n	800115c <L6206_HardStop+0x1c>
		L6206_ErrorHandler(L6206_ERROR_1);
 8001150:	f248 0001 	movw	r0, #32769	; 0x8001
}
 8001154:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		L6206_ErrorHandler(L6206_ERROR_1);
 8001158:	f7ff be06 	b.w	8000d68 <L6206_ErrorHandler>
	}else if (devicePrm.motionState[motorId] != INACTIVE) {
 800115c:	1823      	adds	r3, r4, r0
 800115e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001162:	2b08      	cmp	r3, #8
 8001164:	d012      	beq.n	800118c <L6206_HardStop+0x4c>
		bridgeInputFirstPWM = L6206_GetBridgeInputUsedByMotorId(motorId);
 8001166:	f7ff ff55 	bl	8001014 <L6206_GetBridgeInputUsedByMotorId>
 800116a:	4606      	mov	r6, r0
		if (L6206_IsBidirectionnalMotor(motorId)) {
 800116c:	4628      	mov	r0, r5
 800116e:	f7ff ffc9 	bl	8001104 <L6206_IsBidirectionnalMotor>
 8001172:	b120      	cbz	r0, 800117e <L6206_HardStop+0x3e>
			bridgeInputSecondPWM = L6206_GetSecondBridgeInputUsedByMotorId(motorId);
 8001174:	4628      	mov	r0, r5
 8001176:	f7ff ff93 	bl	80010a0 <L6206_GetSecondBridgeInputUsedByMotorId>
			L6206_Board_PwmStop(bridgeInputSecondPWM);
 800117a:	f002 ff71 	bl	8004060 <L6206_Board_PwmStop>
		L6206_Board_PwmStop(bridgeInputFirstPWM);
 800117e:	4630      	mov	r0, r6
		devicePrm.motionState[motorId] = INACTIVE;
 8001180:	442c      	add	r4, r5
		L6206_Board_PwmStop(bridgeInputFirstPWM);
 8001182:	f002 ff6d 	bl	8004060 <L6206_Board_PwmStop>
		devicePrm.motionState[motorId] = INACTIVE;
 8001186:	2308      	movs	r3, #8
 8001188:	f884 3020 	strb.w	r3, [r4, #32]
 800118c:	bd70      	pop	{r4, r5, r6, pc}
 800118e:	bf00      	nop
 8001190:	20000274 	.word	0x20000274
 8001194:	0800937c 	.word	0x0800937c

08001198 <L6206_HardHiz>:
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 8001198:	491c      	ldr	r1, [pc, #112]	; (800120c <L6206_HardHiz+0x74>)
{
 800119a:	b538      	push	{r3, r4, r5, lr}
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 800119c:	780d      	ldrb	r5, [r1, #0]
 800119e:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <L6206_HardHiz+0x78>)
 80011a0:	5d5b      	ldrb	r3, [r3, r5]
 80011a2:	4283      	cmp	r3, r0
{
 80011a4:	4604      	mov	r4, r0
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 80011a6:	d205      	bcs.n	80011b4 <L6206_HardHiz+0x1c>
		L6206_ErrorHandler(L6206_ERROR_1);
 80011a8:	f248 0001 	movw	r0, #32769	; 0x8001
}
 80011ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		L6206_ErrorHandler(L6206_ERROR_1);
 80011b0:	f7ff bdda 	b.w	8000d68 <L6206_ErrorHandler>
		uint8_t bridgeId = L6206_GetBridgeIdUsedByMotorId(motorId);
 80011b4:	f7ff feea 	bl	8000f8c <L6206_GetBridgeIdUsedByMotorId>
		if (devicePrm.bridgeEnabled[bridgeId] != FALSE) {
 80011b8:	180b      	adds	r3, r1, r0
 80011ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011be:	b193      	cbz	r3, 80011e6 <L6206_HardHiz+0x4e>
			switch (devicePrm.config) {
 80011c0:	3d01      	subs	r5, #1
 80011c2:	2d09      	cmp	r5, #9
 80011c4:	d81f      	bhi.n	8001206 <L6206_HardHiz+0x6e>
 80011c6:	e8df f005 	tbb	[pc, r5]
 80011ca:	1305      	.short	0x1305
 80011cc:	1e051e17 	.word	0x1e051e17
 80011d0:	151e1e13 	.word	0x151e1e13
				if ((motorId > 0) && (devicePrm.motionState[1] == STEADY) && (devicePrm.motionState[2] == STEADY)) {
 80011d4:	b1bc      	cbz	r4, 8001206 <L6206_HardHiz+0x6e>
 80011d6:	6a0b      	ldr	r3, [r1, #32]
 80011d8:	4a0e      	ldr	r2, [pc, #56]	; (8001214 <L6206_HardHiz+0x7c>)
 80011da:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80011de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80011e2:	4293      	cmp	r3, r2
				if ((devicePrm.motionState[0] == STEADY) && (devicePrm.motionState[1] == STEADY)) {
 80011e4:	d10f      	bne.n	8001206 <L6206_HardHiz+0x6e>
		L6206_HardStop(motorId);
 80011e6:	4620      	mov	r0, r4
}
 80011e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		L6206_HardStop(motorId);
 80011ec:	f7ff bfa8 	b.w	8001140 <L6206_HardStop>
				if ((motorId < 2) && (devicePrm.motionState[0] == STEADY) && (devicePrm.motionState[1] == STEADY)) {
 80011f0:	2c01      	cmp	r4, #1
 80011f2:	d808      	bhi.n	8001206 <L6206_HardHiz+0x6e>
				if ((devicePrm.motionState[0] == STEADY) && (devicePrm.motionState[1] == STEADY)) {
 80011f4:	8c0a      	ldrh	r2, [r1, #32]
 80011f6:	e002      	b.n	80011fe <L6206_HardHiz+0x66>
				if (((motorId < 2) && (devicePrm.motionState[0] == STEADY) && (devicePrm.motionState[1] == STEADY)) ||
 80011f8:	2c01      	cmp	r4, #1
 80011fa:	d9fb      	bls.n	80011f4 <L6206_HardHiz+0x5c>
				    ((motorId > 1) && (devicePrm.motionState[2] == STEADY) && (devicePrm.motionState[3] == STEADY))) {
 80011fc:	8c4a      	ldrh	r2, [r1, #34]	; 0x22
				if ((devicePrm.motionState[0] == STEADY) && (devicePrm.motionState[1] == STEADY)) {
 80011fe:	f240 3303 	movw	r3, #771	; 0x303
 8001202:	429a      	cmp	r2, r3
 8001204:	e7ee      	b.n	80011e4 <L6206_HardHiz+0x4c>
				L6206_DisableBridge(bridgeId);
 8001206:	f7ff fe7f 	bl	8000f08 <L6206_DisableBridge>
 800120a:	e7ec      	b.n	80011e6 <L6206_HardHiz+0x4e>
 800120c:	20000274 	.word	0x20000274
 8001210:	0800937c 	.word	0x0800937c
 8001214:	00030300 	.word	0x00030300

08001218 <L6206_Run>:
{
 8001218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 800121a:	4c25      	ldr	r4, [pc, #148]	; (80012b0 <L6206_Run+0x98>)
 800121c:	4a25      	ldr	r2, [pc, #148]	; (80012b4 <L6206_Run+0x9c>)
 800121e:	7823      	ldrb	r3, [r4, #0]
 8001220:	5cd3      	ldrb	r3, [r2, r3]
 8001222:	4283      	cmp	r3, r0
{
 8001224:	4605      	mov	r5, r0
 8001226:	460e      	mov	r6, r1
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 8001228:	d205      	bcs.n	8001236 <L6206_Run+0x1e>
		L6206_ErrorHandler(L6206_ERROR_1);
 800122a:	f248 0001 	movw	r0, #32769	; 0x8001
}
 800122e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		L6206_ErrorHandler(L6206_ERROR_1);
 8001232:	f7ff bd99 	b.w	8000d68 <L6206_ErrorHandler>
	}else if ((devicePrm.motionState[motorId] == INACTIVE) ||
 8001236:	1823      	adds	r3, r4, r0
 8001238:	f893 2020 	ldrb.w	r2, [r3, #32]
 800123c:	2a08      	cmp	r2, #8
 800123e:	d004      	beq.n	800124a <L6206_Run+0x32>
 8001240:	7f1b      	ldrb	r3, [r3, #28]
 8001242:	428b      	cmp	r3, r1
 8001244:	d033      	beq.n	80012ae <L6206_Run+0x96>
			L6206_HardStop(motorId);
 8001246:	f7ff ff7b 	bl	8001140 <L6206_HardStop>
		devicePrm.direction[motorId] = direction;
 800124a:	1963      	adds	r3, r4, r5
		devicePrm.motionState[motorId] = STEADY;
 800124c:	2203      	movs	r2, #3
		bridgeId = L6206_GetBridgeIdUsedByMotorId(motorId);
 800124e:	4628      	mov	r0, r5
		devicePrm.direction[motorId] = direction;
 8001250:	771e      	strb	r6, [r3, #28]
		devicePrm.motionState[motorId] = STEADY;
 8001252:	f883 2020 	strb.w	r2, [r3, #32]
		bridgeId = L6206_GetBridgeIdUsedByMotorId(motorId);
 8001256:	f7ff fe99 	bl	8000f8c <L6206_GetBridgeIdUsedByMotorId>
 800125a:	4607      	mov	r7, r0
		bridgeInput = L6206_GetBridgeInputUsedByMotorId(motorId);
 800125c:	4628      	mov	r0, r5
 800125e:	f7ff fed9 	bl	8001014 <L6206_GetBridgeInputUsedByMotorId>
 8001262:	4606      	mov	r6, r0
		L6206_EnableBridge(bridgeId);
 8001264:	4638      	mov	r0, r7
 8001266:	f7ff fe6b 	bl	8000f40 <L6206_EnableBridge>
		if (L6206_IsBidirectionnalMotor(motorId)) {
 800126a:	4628      	mov	r0, r5
 800126c:	f7ff ff4a 	bl	8001104 <L6206_IsBidirectionnalMotor>
 8001270:	f105 0308 	add.w	r3, r5, #8
 8001274:	00b1      	lsls	r1, r6, #2
			L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], (100 - devicePrm.speed[motorId]));
 8001276:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		if (L6206_IsBidirectionnalMotor(motorId)) {
 800127a:	b198      	cbz	r0, 80012a4 <L6206_Run+0x8c>
			L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], (100 - devicePrm.speed[motorId]));
 800127c:	791a      	ldrb	r2, [r3, #4]
 800127e:	4421      	add	r1, r4
 8001280:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
 8001284:	b2d2      	uxtb	r2, r2
 8001286:	6849      	ldr	r1, [r1, #4]
 8001288:	4630      	mov	r0, r6
 800128a:	f002 fea7 	bl	8003fdc <L6206_Board_PwmSetFreq>
			bridgeInput = L6206_GetSecondBridgeInputUsedByMotorId(motorId);
 800128e:	4628      	mov	r0, r5
 8001290:	f7ff ff06 	bl	80010a0 <L6206_GetSecondBridgeInputUsedByMotorId>
			L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], 100);
 8001294:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8001298:	2264      	movs	r2, #100	; 0x64
 800129a:	6861      	ldr	r1, [r4, #4]
}
 800129c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], devicePrm.speed[motorId]);
 80012a0:	f002 be9c 	b.w	8003fdc <L6206_Board_PwmSetFreq>
 80012a4:	440c      	add	r4, r1
 80012a6:	791a      	ldrb	r2, [r3, #4]
 80012a8:	6861      	ldr	r1, [r4, #4]
 80012aa:	4630      	mov	r0, r6
 80012ac:	e7f6      	b.n	800129c <L6206_Run+0x84>
 80012ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012b0:	20000274 	.word	0x20000274
 80012b4:	0800937c 	.word	0x0800937c

080012b8 <L6206_SetMaxSpeed>:
{
 80012b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 80012ba:	4c15      	ldr	r4, [pc, #84]	; (8001310 <L6206_SetMaxSpeed+0x58>)
 80012bc:	4a15      	ldr	r2, [pc, #84]	; (8001314 <L6206_SetMaxSpeed+0x5c>)
 80012be:	7823      	ldrb	r3, [r4, #0]
 80012c0:	5cd3      	ldrb	r3, [r2, r3]
 80012c2:	4283      	cmp	r3, r0
{
 80012c4:	4606      	mov	r6, r0
 80012c6:	460d      	mov	r5, r1
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 80012c8:	d205      	bcs.n	80012d6 <L6206_SetMaxSpeed+0x1e>
		L6206_ErrorHandler(L6206_ERROR_1);
 80012ca:	f248 0001 	movw	r0, #32769	; 0x8001
 80012ce:	f7ff fd4b 	bl	8000d68 <L6206_ErrorHandler>
	bool cmdExecuted = FALSE;
 80012d2:	2000      	movs	r0, #0
 80012d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		devicePrm.speed[motorId] = newMaxSpeed;
 80012d6:	eb04 0340 	add.w	r3, r4, r0, lsl #1
 80012da:	8299      	strh	r1, [r3, #20]
		if (devicePrm.motionState[motorId] != INACTIVE) {
 80012dc:	1823      	adds	r3, r4, r0
 80012de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012e2:	2b08      	cmp	r3, #8
 80012e4:	d00f      	beq.n	8001306 <L6206_SetMaxSpeed+0x4e>
			bridgeInput = L6206_GetBridgeInputUsedByMotorId(motorId);
 80012e6:	f7ff fe95 	bl	8001014 <L6206_GetBridgeInputUsedByMotorId>
 80012ea:	4607      	mov	r7, r0
			if (L6206_IsBidirectionnalMotor(motorId)) {
 80012ec:	4630      	mov	r0, r6
 80012ee:	f7ff ff09 	bl	8001104 <L6206_IsBidirectionnalMotor>
 80012f2:	00bb      	lsls	r3, r7, #2
 80012f4:	b148      	cbz	r0, 800130a <L6206_SetMaxSpeed+0x52>
				L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], (100 - devicePrm.speed[motorId]));
 80012f6:	f1c5 0264 	rsb	r2, r5, #100	; 0x64
 80012fa:	441c      	add	r4, r3
 80012fc:	b2d2      	uxtb	r2, r2
				L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], devicePrm.speed[motorId]);
 80012fe:	6861      	ldr	r1, [r4, #4]
 8001300:	4638      	mov	r0, r7
 8001302:	f002 fe6b 	bl	8003fdc <L6206_Board_PwmSetFreq>
		cmdExecuted = TRUE;
 8001306:	2001      	movs	r0, #1
}
 8001308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], devicePrm.speed[motorId]);
 800130a:	441c      	add	r4, r3
 800130c:	b2ea      	uxtb	r2, r5
 800130e:	e7f6      	b.n	80012fe <L6206_SetMaxSpeed+0x46>
 8001310:	20000274 	.word	0x20000274
 8001314:	0800937c 	.word	0x0800937c

08001318 <L6206_SetBridgeInputPwmFreq>:
{
 8001318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800131c:	4f1e      	ldr	r7, [pc, #120]	; (8001398 <L6206_SetBridgeInputPwmFreq+0x80>)
		devicePrm.pwmFreq[bridgeInput] = newFreq;
 800131e:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800139c <L6206_SetBridgeInputPwmFreq+0x84>
 8001322:	428f      	cmp	r7, r1
		uint8_t bridgeInput = (bridgeId << 1) + loop;
 8001324:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8001328:	bf28      	it	cs
 800132a:	460f      	movcs	r7, r1
 800132c:	fa5f f980 	uxtb.w	r9, r0
 8001330:	2600      	movs	r6, #0
 8001332:	eb09 0506 	add.w	r5, r9, r6
 8001336:	b2ed      	uxtb	r5, r5
		devicePrm.pwmFreq[bridgeInput] = newFreq;
 8001338:	eb08 0a85 	add.w	sl, r8, r5, lsl #2
		motorId = L6206_GetMotorIdUsingbridgeInput(bridgeInput);
 800133c:	4628      	mov	r0, r5
		devicePrm.pwmFreq[bridgeInput] = newFreq;
 800133e:	f8ca 7004 	str.w	r7, [sl, #4]
		motorId = L6206_GetMotorIdUsingbridgeInput(bridgeInput);
 8001342:	f7ff fe3d 	bl	8000fc0 <L6206_GetMotorIdUsingbridgeInput>
		if (devicePrm.motionState[motorId] != INACTIVE) {
 8001346:	eb08 0300 	add.w	r3, r8, r0
		motorId = L6206_GetMotorIdUsingbridgeInput(bridgeInput);
 800134a:	4604      	mov	r4, r0
		if (devicePrm.motionState[motorId] != INACTIVE) {
 800134c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001350:	2b08      	cmp	r3, #8
 8001352:	d016      	beq.n	8001382 <L6206_SetBridgeInputPwmFreq+0x6a>
			if (L6206_IsBidirectionnalMotor(motorId)) {
 8001354:	f7ff fed6 	bl	8001104 <L6206_IsBidirectionnalMotor>
 8001358:	b1c0      	cbz	r0, 800138c <L6206_SetBridgeInputPwmFreq+0x74>
				if (bridgeInput != L6206_GetSecondBridgeInputUsedByMotorId(motorId)) {
 800135a:	4620      	mov	r0, r4
 800135c:	f7ff fea0 	bl	80010a0 <L6206_GetSecondBridgeInputUsedByMotorId>
 8001360:	42a8      	cmp	r0, r5
 8001362:	d009      	beq.n	8001378 <L6206_SetBridgeInputPwmFreq+0x60>
					L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], (100 - devicePrm.speed[motorId]));
 8001364:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8001368:	f8da 1004 	ldr.w	r1, [sl, #4]
 800136c:	7d22      	ldrb	r2, [r4, #20]
 800136e:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
 8001372:	b2d2      	uxtb	r2, r2
				L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], devicePrm.speed[motorId]);
 8001374:	4628      	mov	r0, r5
 8001376:	e002      	b.n	800137e <L6206_SetBridgeInputPwmFreq+0x66>
					L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], 100);
 8001378:	f8da 1004 	ldr.w	r1, [sl, #4]
 800137c:	2264      	movs	r2, #100	; 0x64
				L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], devicePrm.speed[motorId]);
 800137e:	f002 fe2d 	bl	8003fdc <L6206_Board_PwmSetFreq>
 8001382:	3601      	adds	r6, #1
	for (loop = 0; loop < 2; loop++) {
 8001384:	2e02      	cmp	r6, #2
 8001386:	d1d4      	bne.n	8001332 <L6206_SetBridgeInputPwmFreq+0x1a>
}
 8001388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], devicePrm.speed[motorId]);
 800138c:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8001390:	4639      	mov	r1, r7
 8001392:	7d22      	ldrb	r2, [r4, #20]
 8001394:	e7ee      	b.n	8001374 <L6206_SetBridgeInputPwmFreq+0x5c>
 8001396:	bf00      	nop
 8001398:	000186a0 	.word	0x000186a0
 800139c:	20000274 	.word	0x20000274

080013a0 <L6206_SetDeviceParamsToPredefinedValues>:
* @brief  Sets the parameters of the device to predefined values
* from l6206_target_config.h
* @retval None
**********************************************************/
void L6206_SetDeviceParamsToPredefinedValues(void)
{
 80013a0:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;

	memset(&devicePrm, 0, sizeof(devicePrm));
 80013a2:	4c0d      	ldr	r4, [pc, #52]	; (80013d8 <L6206_SetDeviceParamsToPredefinedValues+0x38>)
 80013a4:	2228      	movs	r2, #40	; 0x28
 80013a6:	2100      	movs	r1, #0
 80013a8:	4620      	mov	r0, r4
 80013aa:	f007 f914 	bl	80085d6 <memset>

	devicePrm.config = L6206_CONF_PARAM_PARALLE_BRIDGES;

	devicePrm.pwmFreq[INPUT_1A] = L6206_CONF_PARAM_FREQ_PWM1A;
 80013ae:	f644 6320 	movw	r3, #20000	; 0x4e20
 80013b2:	6063      	str	r3, [r4, #4]
	devicePrm.pwmFreq[INPUT_2A] = L6206_CONF_PARAM_FREQ_PWM2A;
 80013b4:	60a3      	str	r3, [r4, #8]
	devicePrm.pwmFreq[INPUT_1B] = L6206_CONF_PARAM_FREQ_PWM1B;
 80013b6:	60e3      	str	r3, [r4, #12]
	devicePrm.pwmFreq[INPUT_2B] = L6206_CONF_PARAM_FREQ_PWM2B;
 80013b8:	6123      	str	r3, [r4, #16]
 80013ba:	f104 021b 	add.w	r2, r4, #27
 80013be:	2300      	movs	r3, #0

	for (i = 0; i < MAX_NUMBER_OF_BRUSH_DC_MOTORS; i++) {
		devicePrm.speed[i] = 100;
 80013c0:	2664      	movs	r6, #100	; 0x64
		devicePrm.direction[i] = FORWARD;
 80013c2:	2001      	movs	r0, #1
		devicePrm.motionState[i] = INACTIVE;
 80013c4:	2108      	movs	r1, #8
		devicePrm.speed[i] = 100;
 80013c6:	18e5      	adds	r5, r4, r3
 80013c8:	3302      	adds	r3, #2
 80013ca:	82ae      	strh	r6, [r5, #20]
		devicePrm.direction[i] = FORWARD;
 80013cc:	f802 0f01 	strb.w	r0, [r2, #1]!
	for (i = 0; i < MAX_NUMBER_OF_BRUSH_DC_MOTORS; i++) {
 80013d0:	2b08      	cmp	r3, #8
		devicePrm.motionState[i] = INACTIVE;
 80013d2:	7111      	strb	r1, [r2, #4]
	for (i = 0; i < MAX_NUMBER_OF_BRUSH_DC_MOTORS; i++) {
 80013d4:	d1f7      	bne.n	80013c6 <L6206_SetDeviceParamsToPredefinedValues+0x26>
	}
	for (i = 0; i < L6206_NB_MAX_BRIDGES; i++) {
		devicePrm.bridgeEnabled[i] = FALSE;
	}
}
 80013d6:	bd70      	pop	{r4, r5, r6, pc}
 80013d8:	20000274 	.word	0x20000274

080013dc <L6206_SetDeviceParamsToGivenValues>:
* @param initDevicePrm structure containing values to initialize the device
* parameters
* @retval None
**********************************************************/
void L6206_SetDeviceParamsToGivenValues(L6206_InitTypeDef* initDevicePrm)
{
 80013dc:	b530      	push	{r4, r5, lr}
	memcpy(&devicePrm, initDevicePrm, sizeof(devicePrm));
 80013de:	4c06      	ldr	r4, [pc, #24]	; (80013f8 <L6206_SetDeviceParamsToGivenValues+0x1c>)
{
 80013e0:	4603      	mov	r3, r0
	memcpy(&devicePrm, initDevicePrm, sizeof(devicePrm));
 80013e2:	f100 0528 	add.w	r5, r0, #40	; 0x28
 80013e6:	6818      	ldr	r0, [r3, #0]
 80013e8:	6859      	ldr	r1, [r3, #4]
 80013ea:	4622      	mov	r2, r4
 80013ec:	c203      	stmia	r2!, {r0, r1}
 80013ee:	3308      	adds	r3, #8
 80013f0:	42ab      	cmp	r3, r5
 80013f2:	4614      	mov	r4, r2
 80013f4:	d1f7      	bne.n	80013e6 <L6206_SetDeviceParamsToGivenValues+0xa>
}
 80013f6:	bd30      	pop	{r4, r5, pc}
 80013f8:	20000274 	.word	0x20000274

080013fc <L6206_Init>:
	l6206DriverInstance++;
 80013fc:	4a0a      	ldr	r2, [pc, #40]	; (8001428 <L6206_Init+0x2c>)
 80013fe:	8813      	ldrh	r3, [r2, #0]
{
 8001400:	b510      	push	{r4, lr}
	l6206DriverInstance++;
 8001402:	3301      	adds	r3, #1
{
 8001404:	4604      	mov	r4, r0
	l6206DriverInstance++;
 8001406:	8013      	strh	r3, [r2, #0]
	L6206_Board_GpioInit();
 8001408:	f002 fd28 	bl	8003e5c <L6206_Board_GpioInit>
	if (init == NULL) {
 800140c:	b93c      	cbnz	r4, 800141e <L6206_Init+0x22>
		L6206_SetDeviceParamsToPredefinedValues();
 800140e:	f7ff ffc7 	bl	80013a0 <L6206_SetDeviceParamsToPredefinedValues>
	L6206_SetDualFullBridgeConfig(devicePrm.config);
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <L6206_Init+0x30>)
}
 8001414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	L6206_SetDualFullBridgeConfig(devicePrm.config);
 8001418:	7818      	ldrb	r0, [r3, #0]
 800141a:	f7ff bd1b 	b.w	8000e54 <L6206_SetDualFullBridgeConfig>
		L6206_SetDeviceParamsToGivenValues((L6206_InitTypeDef*)init);
 800141e:	4620      	mov	r0, r4
 8001420:	f7ff ffdc 	bl	80013dc <L6206_SetDeviceParamsToGivenValues>
 8001424:	e7f5      	b.n	8001412 <L6206_Init+0x16>
 8001426:	bf00      	nop
 8001428:	20000220 	.word	0x20000220
 800142c:	20000274 	.word	0x20000274

08001430 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
				  VL53L1_PresetModes PresetMode,
				  VL53L1_DistanceModes DistanceMode,
				  uint32_t inter_measurement_period_ms)
{
 8001430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t mm_config_timeout_us;
	uint32_t lld_range_config_timeout_us;

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8001434:	2903      	cmp	r1, #3
{
 8001436:	b088      	sub	sp, #32
 8001438:	4605      	mov	r5, r0
 800143a:	460c      	mov	r4, r1
 800143c:	461f      	mov	r7, r3
	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 800143e:	d030      	beq.n	80014a2 <SetPresetMode+0x72>
 8001440:	2908      	cmp	r1, #8
	    (PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 8001442:	bf14      	ite	ne
 8001444:	2620      	movne	r6, #32
 8001446:	2640      	moveq	r6, #64	; 0x40
	VL53L1_DevicePresetModes LightModes[3] = {
 8001448:	2302      	movs	r3, #2
 800144a:	f88d 3014 	strb.w	r3, [sp, #20]
 800144e:	2301      	movs	r3, #1
 8001450:	f88d 3015 	strb.w	r3, [sp, #21]
 8001454:	2303      	movs	r3, #3
 8001456:	f88d 3016 	strb.w	r3, [sp, #22]
	VL53L1_DevicePresetModes TimedModes[3] = {
 800145a:	2307      	movs	r3, #7
 800145c:	f88d 3018 	strb.w	r3, [sp, #24]
 8001460:	2306      	movs	r3, #6
 8001462:	f88d 3019 	strb.w	r3, [sp, #25]
 8001466:	2308      	movs	r3, #8
 8001468:	f88d 301a 	strb.w	r3, [sp, #26]
	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 800146c:	2324      	movs	r3, #36	; 0x24
 800146e:	f88d 301c 	strb.w	r3, [sp, #28]
 8001472:	2325      	movs	r3, #37	; 0x25
 8001474:	f88d 301d 	strb.w	r3, [sp, #29]
	switch (DistanceMode) {
 8001478:	2a01      	cmp	r2, #1
	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 800147a:	f04f 0326 	mov.w	r3, #38	; 0x26
 800147e:	f88d 301e 	strb.w	r3, [sp, #30]
	switch (DistanceMode) {
 8001482:	d010      	beq.n	80014a6 <SetPresetMode+0x76>
 8001484:	2a02      	cmp	r2, #2
		DistIdx = 2;
 8001486:	bf0c      	ite	eq
 8001488:	2301      	moveq	r3, #1
 800148a:	2302      	movne	r3, #2
	switch (PresetMode) {
 800148c:	2c04      	cmp	r4, #4
 800148e:	d00c      	beq.n	80014aa <SetPresetMode+0x7a>
 8001490:	2c08      	cmp	r4, #8
 8001492:	d02d      	beq.n	80014f0 <SetPresetMode+0xc0>
 8001494:	2c03      	cmp	r4, #3
 8001496:	d130      	bne.n	80014fa <SetPresetMode+0xca>
		*pDevicePresetMode = TimedModes[DistIdx];
 8001498:	aa08      	add	r2, sp, #32
 800149a:	4413      	add	r3, r2
 800149c:	f813 8c08 	ldrb.w	r8, [r3, #-8]
 80014a0:	e007      	b.n	80014b2 <SetPresetMode+0x82>
		measurement_mode = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 80014a2:	2640      	movs	r6, #64	; 0x40
 80014a4:	e7d0      	b.n	8001448 <SetPresetMode+0x18>
		DistIdx = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	e7f0      	b.n	800148c <SetPresetMode+0x5c>
		*pDevicePresetMode = LightModes[DistIdx];
 80014aa:	aa08      	add	r2, sp, #32
 80014ac:	4413      	add	r3, r2
 80014ae:	f813 8c0c 	ldrb.w	r8, [r3, #-12]

	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
					 &device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
		Status = VL53L1_get_preset_mode_timing_cfg(Dev,
 80014b2:	ab07      	add	r3, sp, #28
 80014b4:	9301      	str	r3, [sp, #4]
 80014b6:	ab06      	add	r3, sp, #24
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	f10d 0212 	add.w	r2, sp, #18
 80014be:	ab05      	add	r3, sp, #20
 80014c0:	4641      	mov	r1, r8
 80014c2:	4628      	mov	r0, r5
 80014c4:	f000 fc57 	bl	8001d76 <VL53L1_get_preset_mode_timing_cfg>
							   &dss_config__target_total_rate_mcps,
							   &phasecal_config_timeout_us,
							   &mm_config_timeout_us,
							   &lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 80014c8:	b978      	cbnz	r0, 80014ea <SetPresetMode+0xba>
		Status = VL53L1_set_preset_mode(
 80014ca:	9b07      	ldr	r3, [sp, #28]
 80014cc:	9301      	str	r3, [sp, #4]
 80014ce:	9b06      	ldr	r3, [sp, #24]
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80014d6:	9702      	str	r7, [sp, #8]
 80014d8:	9b05      	ldr	r3, [sp, #20]
 80014da:	4641      	mov	r1, r8
 80014dc:	4628      	mov	r0, r5
 80014de:	f000 fc83 	bl	8001de8 <VL53L1_set_preset_mode>
			phasecal_config_timeout_us,
			mm_config_timeout_us,
			lld_range_config_timeout_us,
			inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 80014e2:	b910      	cbnz	r0, 80014ea <SetPresetMode+0xba>
		VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 80014e4:	70ae      	strb	r6, [r5, #2]

	if (Status == VL53L1_ERROR_NONE)
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 80014e6:	f885 437c 	strb.w	r4, [r5, #892]	; 0x37c

	LOG_FUNCTION_END(Status);
	return Status;
}
 80014ea:	b008      	add	sp, #32
 80014ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 80014f0:	aa08      	add	r2, sp, #32
 80014f2:	4413      	add	r3, r2
 80014f4:	f813 8c04 	ldrb.w	r8, [r3, #-4]
 80014f8:	e7db      	b.n	80014b2 <SetPresetMode+0x82>
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 80014fa:	f06f 0007 	mvn.w	r0, #7
 80014fe:	e7f4      	b.n	80014ea <SetPresetMode+0xba>

08001500 <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
				  FixPoint1616_t value)
{
 8001500:	b510      	push	{r4, lr}
	VL53L1_Error Status = VL53L1_ERROR_NONE;
	uint16_t tmpuint16; /* temporary variable */

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8001502:	b121      	cbz	r1, 800150e <SetLimitValue+0xe>
 8001504:	2901      	cmp	r1, #1
 8001506:	d008      	beq.n	800151a <SetLimitValue+0x1a>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
		break;
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8001508:	f06f 0003 	mvn.w	r0, #3
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 800150c:	bd10      	pop	{r4, pc}
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 800150e:	f3c2 318f 	ubfx	r1, r2, #14, #16
 8001512:	f000 fd7f 	bl	8002014 <VL53L1_set_lite_sigma_threshold>
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001516:	2000      	movs	r0, #0
		break;
 8001518:	bd10      	pop	{r4, pc}
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 800151a:	f3c2 214f 	ubfx	r1, r2, #9, #16
 800151e:	f000 fd82 	bl	8002026 <VL53L1_set_lite_min_count_rate>
 8001522:	e7f8      	b.n	8001516 <SetLimitValue+0x16>

08001524 <VL53L1_SetDeviceAddress>:
	Status = VL53L1_WrByte(Dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
 8001524:	084a      	lsrs	r2, r1, #1
 8001526:	2101      	movs	r1, #1
 8001528:	f006 bdea 	b.w	8008100 <VL53L1_WrByte>

0800152c <VL53L1_WaitDeviceBooted>:
	Status = VL53L1_poll_for_boot_completion(Dev,
 800152c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001530:	f002 ba68 	b.w	8003a04 <VL53L1_poll_for_boot_completion>

08001534 <VL53L1_SetDistanceMode>:
{
 8001534:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	    (DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 8001538:	1e4b      	subs	r3, r1, #1
 800153a:	b2db      	uxtb	r3, r3
	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 800153c:	2b02      	cmp	r3, #2
{
 800153e:	4604      	mov	r4, r0
 8001540:	460e      	mov	r6, r1
	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8001542:	f890 737c 	ldrb.w	r7, [r0, #892]	; 0x37c
	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 8001546:	d82d      	bhi.n	80015a4 <VL53L1_SetDistanceMode+0x70>
 8001548:	bf18      	it	ne
 800154a:	460d      	movne	r5, r1
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 800154c:	a903      	add	r1, sp, #12
			InternalDistanceMode = VL53L1_DISTANCEMODE_LONG;
 800154e:	bf08      	it	eq
 8001550:	2503      	moveq	r5, #3
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 8001552:	f000 fba3 	bl	8001c9c <VL53L1_get_user_zone>
	if (Status == VL53L1_ERROR_NONE)
 8001556:	bb10      	cbnz	r0, 800159e <VL53L1_SetDistanceMode+0x6a>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8001558:	466b      	mov	r3, sp
 800155a:	aa01      	add	r2, sp, #4
 800155c:	a902      	add	r1, sp, #8
 800155e:	4620      	mov	r0, r4
	inter_measurement_period_ms = VL53L1DevDataGet(Dev,
 8001560:	f8d4 8014 	ldr.w	r8, [r4, #20]
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8001564:	f000 fb3d 	bl	8001be2 <VL53L1_get_timeouts_us>
	if (Status == VL53L1_ERROR_NONE)
 8001568:	b9c8      	cbnz	r0, 800159e <VL53L1_SetDistanceMode+0x6a>
		Status = SetPresetMode(Dev,
 800156a:	4643      	mov	r3, r8
 800156c:	462a      	mov	r2, r5
 800156e:	4639      	mov	r1, r7
 8001570:	4620      	mov	r0, r4
 8001572:	f7ff ff5d 	bl	8001430 <SetPresetMode>
	if (Status == VL53L1_ERROR_NONE) {
 8001576:	b990      	cbnz	r0, 800159e <VL53L1_SetDistanceMode+0x6a>
		VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 8001578:	f884 537e 	strb.w	r5, [r4, #894]	; 0x37e
		VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 800157c:	f884 537f 	strb.w	r5, [r4, #895]	; 0x37f
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 8001580:	f884 637d 	strb.w	r6, [r4, #893]	; 0x37d
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8001584:	9b00      	ldr	r3, [sp, #0]
 8001586:	9a01      	ldr	r2, [sp, #4]
 8001588:	9902      	ldr	r1, [sp, #8]
 800158a:	4620      	mov	r0, r4
 800158c:	f000 fb11 	bl	8001bb2 <VL53L1_set_timeouts_us>
		if (Status == VL53L1_ERROR_NONE)
 8001590:	b928      	cbnz	r0, 800159e <VL53L1_SetDistanceMode+0x6a>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 8001592:	9b00      	ldr	r3, [sp, #0]
 8001594:	6123      	str	r3, [r4, #16]
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 8001596:	a903      	add	r1, sp, #12
 8001598:	4620      	mov	r0, r4
 800159a:	f000 fb6e 	bl	8001c7a <VL53L1_set_user_zone>
}
 800159e:	b004      	add	sp, #16
 80015a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return VL53L1_ERROR_INVALID_PARAMS;
 80015a4:	f06f 0003 	mvn.w	r0, #3
 80015a8:	e7f9      	b.n	800159e <VL53L1_SetDistanceMode+0x6a>
	...

080015ac <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:
{
 80015ac:	b570      	push	{r4, r5, r6, lr}
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 80015ae:	4b3e      	ldr	r3, [pc, #248]	; (80016a8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xfc>)
 80015b0:	4299      	cmp	r1, r3
{
 80015b2:	b086      	sub	sp, #24
 80015b4:	4604      	mov	r4, r0
 80015b6:	460d      	mov	r5, r1
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 80015b8:	d93d      	bls.n	8001636 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x8a>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80015ba:	f06f 0003 	mvn.w	r0, #3
}
 80015be:	b006      	add	sp, #24
 80015c0:	bd70      	pop	{r4, r5, r6, pc}
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 80015c2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d064      	beq.n	8001694 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe8>
 80015ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 80015ce:	4837      	ldr	r0, [pc, #220]	; (80016ac <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x100>)
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d6:	f04f 0301 	mov.w	r3, #1
 80015da:	bf18      	it	ne
 80015dc:	f44f 727a 	movne.w	r2, #1000	; 0x3e8
		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 80015e0:	4295      	cmp	r5, r2
 80015e2:	d9ea      	bls.n	80015ba <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe>
					- TimingGuard);
 80015e4:	1aaa      	subs	r2, r5, r2
			if (TimingBudget > FDAMaxTimingBudgetUs)
 80015e6:	4282      	cmp	r2, r0
 80015e8:	d8e7      	bhi.n	80015ba <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe>
				TimingBudget /= divisor;
 80015ea:	fbb2 f3f3 	udiv	r3, r2, r3
				Status = VL53L1_set_timeouts_us(
 80015ee:	9904      	ldr	r1, [sp, #16]
 80015f0:	9a03      	ldr	r2, [sp, #12]
				TimingBudget /= divisor;
 80015f2:	9302      	str	r3, [sp, #8]
				Status = VL53L1_set_timeouts_us(
 80015f4:	4620      	mov	r0, r4
 80015f6:	f000 fadc 	bl	8001bb2 <VL53L1_set_timeouts_us>
			if (Status == VL53L1_ERROR_NONE)
 80015fa:	2800      	cmp	r0, #0
 80015fc:	d1df      	bne.n	80015be <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12>
				VL53L1DevDataSet(Dev,
 80015fe:	9b02      	ldr	r3, [sp, #8]
 8001600:	6123      	str	r3, [r4, #16]
		VL53L1DevDataSet(Dev,
 8001602:	f8c4 5380 	str.w	r5, [r4, #896]	; 0x380
 8001606:	e7da      	b.n	80015be <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12>
			VL53L1_get_tuning_parm(Dev,
 8001608:	aa05      	add	r2, sp, #20
 800160a:	f248 0136 	movw	r1, #32822	; 0x8036
 800160e:	4620      	mov	r0, r4
 8001610:	f000 ff36 	bl	8002480 <VL53L1_get_tuning_parm>
			if (vhv_loops > 0) {
 8001614:	9b05      	ldr	r3, [sp, #20]
			FDAMaxTimingBudgetUs *= 2;
 8001616:	4826      	ldr	r0, [pc, #152]	; (80016b0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x104>)
			if (vhv_loops > 0) {
 8001618:	2b00      	cmp	r3, #0
 800161a:	f04f 02f5 	mov.w	r2, #245	; 0xf5
				vhv += vhv_loops *
 800161e:	bfc4      	itt	gt
 8001620:	435a      	mulgt	r2, r3
 8001622:	32f5      	addgt	r2, #245	; 0xf5
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8001624:	f602 52dc 	addw	r2, r2, #3548	; 0xddc
			divisor = 2;
 8001628:	2302      	movs	r3, #2
			break;
 800162a:	e7d9      	b.n	80015e0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x34>
		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 800162c:	2d00      	cmp	r5, #0
 800162e:	d0c4      	beq.n	80015ba <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe>
 8001630:	f06f 0007 	mvn.w	r0, #7
 8001634:	e7c3      	b.n	80015be <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12>
{
	VL53L1_Error Status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 8001636:	f10d 0206 	add.w	r2, sp, #6
 800163a:	2105      	movs	r1, #5
 800163c:	f000 fb0a 	bl	8001c54 <VL53L1_get_sequence_config_bit>
	if (Status == VL53L1_ERROR_NONE) {
 8001640:	2800      	cmp	r0, #0
 8001642:	d1bc      	bne.n	80015be <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12>
	Status = VL53L1_get_sequence_config_bit(Dev,
 8001644:	f10d 0207 	add.w	r2, sp, #7
 8001648:	2106      	movs	r1, #6
 800164a:	4620      	mov	r0, r4
 800164c:	f000 fb02 	bl	8001c54 <VL53L1_get_sequence_config_bit>
	if (Status == VL53L1_ERROR_NONE)
 8001650:	2800      	cmp	r0, #0
 8001652:	d1b4      	bne.n	80015be <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12>
		Status = VL53L1_get_timeouts_us(Dev,
 8001654:	ab02      	add	r3, sp, #8
 8001656:	aa03      	add	r2, sp, #12
 8001658:	a904      	add	r1, sp, #16
 800165a:	4620      	mov	r0, r4
 800165c:	f000 fac1 	bl	8001be2 <VL53L1_get_timeouts_us>
	if (Status == VL53L1_ERROR_NONE) {
 8001660:	2800      	cmp	r0, #0
 8001662:	d1ac      	bne.n	80015be <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12>
		switch (PresetMode) {
 8001664:	f894 337c 	ldrb.w	r3, [r4, #892]	; 0x37c
 8001668:	2b04      	cmp	r3, #4
 800166a:	d0aa      	beq.n	80015c2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x16>
 800166c:	2b08      	cmp	r3, #8
 800166e:	d0cb      	beq.n	8001608 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x5c>
 8001670:	2b03      	cmp	r3, #3
 8001672:	d1db      	bne.n	800162c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x80>
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8001674:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d00f      	beq.n	800169c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf0>
 800167c:	f89d 6007 	ldrb.w	r6, [sp, #7]
			FDAMaxTimingBudgetUs *= 2;
 8001680:	480b      	ldr	r0, [pc, #44]	; (80016b0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x104>)
 8001682:	f245 4260 	movw	r2, #21600	; 0x5460
 8001686:	f246 71e8 	movw	r1, #26600	; 0x67e8
 800168a:	2302      	movs	r3, #2
 800168c:	2e01      	cmp	r6, #1
 800168e:	bf08      	it	eq
 8001690:	460a      	moveq	r2, r1
 8001692:	e7a5      	b.n	80015e0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x34>
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8001694:	4805      	ldr	r0, [pc, #20]	; (80016ac <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x100>)
				TimingGuard = 5000;
 8001696:	f241 3288 	movw	r2, #5000	; 0x1388
 800169a:	e7a1      	b.n	80015e0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x34>
			FDAMaxTimingBudgetUs *= 2;
 800169c:	4804      	ldr	r0, [pc, #16]	; (80016b0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x104>)
			divisor = 2;
 800169e:	2302      	movs	r3, #2
				TimingGuard = 26600;
 80016a0:	f246 72e8 	movw	r2, #26600	; 0x67e8
 80016a4:	e79c      	b.n	80015e0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x34>
 80016a6:	bf00      	nop
 80016a8:	00989680 	.word	0x00989680
 80016ac:	00086470 	.word	0x00086470
 80016b0:	0010c8e0 	.word	0x0010c8e0

080016b4 <VL53L1_SetPresetMode>:
{
 80016b4:	b538      	push	{r3, r4, r5, lr}
	Status = SetPresetMode(Dev,
 80016b6:	2203      	movs	r2, #3
 80016b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 80016bc:	4604      	mov	r4, r0
 80016be:	460d      	mov	r5, r1
	Status = SetPresetMode(Dev,
 80016c0:	f7ff feb6 	bl	8001430 <SetPresetMode>
	if (Status == VL53L1_ERROR_NONE) {
 80016c4:	b9c8      	cbnz	r0, 80016fa <VL53L1_SetPresetMode+0x46>
		VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 80016c6:	2303      	movs	r3, #3
 80016c8:	f884 337e 	strb.w	r3, [r4, #894]	; 0x37e
		VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 80016cc:	f884 337f 	strb.w	r3, [r4, #895]	; 0x37f
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 80016d0:	1eeb      	subs	r3, r5, #3
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d901      	bls.n	80016da <VL53L1_SetPresetMode+0x26>
		    (PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 80016d6:	2d08      	cmp	r5, #8
 80016d8:	d10c      	bne.n	80016f4 <VL53L1_SetPresetMode+0x40>
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 80016da:	f24a 0128 	movw	r1, #41000	; 0xa028
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 80016de:	4620      	mov	r0, r4
 80016e0:	f7ff ff64 	bl	80015ac <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
	if (Status == VL53L1_ERROR_NONE) {
 80016e4:	b948      	cbnz	r0, 80016fa <VL53L1_SetPresetMode+0x46>
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 80016e6:	4620      	mov	r0, r4
 80016e8:	f44f 6185 	mov.w	r1, #1064	; 0x428
}
 80016ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 80016f0:	f000 ba46 	b.w	8001b80 <VL53L1_set_inter_measurement_period_ms>
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 80016f4:	f248 2135 	movw	r1, #33333	; 0x8235
 80016f8:	e7f1      	b.n	80016de <VL53L1_SetPresetMode+0x2a>
}
 80016fa:	bd38      	pop	{r3, r4, r5, pc}

080016fc <VL53L1_StaticInit>:
	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 80016fc:	2203      	movs	r2, #3
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 80016fe:	2120      	movs	r1, #32
 8001700:	7081      	strb	r1, [r0, #2]
	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8001702:	f880 2378 	strb.w	r2, [r0, #888]	; 0x378
	VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 8001706:	f880 237f 	strb.w	r2, [r0, #895]	; 0x37f
	VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 800170a:	f880 237e 	strb.w	r2, [r0, #894]	; 0x37e
	VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 800170e:	f880 237d 	strb.w	r2, [r0, #893]	; 0x37d
	Status = VL53L1_SetPresetMode(Dev,
 8001712:	2108      	movs	r1, #8
 8001714:	f7ff bfce 	b.w	80016b4 <VL53L1_SetPresetMode>

08001718 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:
{
 8001718:	b570      	push	{r4, r5, r6, lr}
	uint8_t Mm1Enabled = 0;
 800171a:	2300      	movs	r3, #0
{
 800171c:	b086      	sub	sp, #24
	*pMeasurementTimingBudgetMicroSeconds = 0;
 800171e:	600b      	str	r3, [r1, #0]
{
 8001720:	460c      	mov	r4, r1
	Status = VL53L1_get_sequence_config_bit(Dev,
 8001722:	f10d 0206 	add.w	r2, sp, #6
 8001726:	2105      	movs	r1, #5
{
 8001728:	4606      	mov	r6, r0
	uint8_t Mm1Enabled = 0;
 800172a:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t Mm2Enabled = 0;
 800172e:	f88d 3007 	strb.w	r3, [sp, #7]
	uint32_t MmTimeoutUs = 0;
 8001732:	9302      	str	r3, [sp, #8]
	uint32_t RangeTimeoutUs = 0;
 8001734:	9303      	str	r3, [sp, #12]
	uint32_t PhaseCalTimeoutUs = 0;
 8001736:	9304      	str	r3, [sp, #16]
	Status = VL53L1_get_sequence_config_bit(Dev,
 8001738:	f000 fa8c 	bl	8001c54 <VL53L1_get_sequence_config_bit>
	if (Status == VL53L1_ERROR_NONE)
 800173c:	4605      	mov	r5, r0
 800173e:	2800      	cmp	r0, #0
 8001740:	d151      	bne.n	80017e6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xce>
	Status = VL53L1_get_sequence_config_bit(Dev,
 8001742:	f10d 0207 	add.w	r2, sp, #7
 8001746:	2106      	movs	r1, #6
 8001748:	4630      	mov	r0, r6
 800174a:	f000 fa83 	bl	8001c54 <VL53L1_get_sequence_config_bit>
	if (Status == VL53L1_ERROR_NONE)
 800174e:	4605      	mov	r5, r0
 8001750:	2800      	cmp	r0, #0
 8001752:	d148      	bne.n	80017e6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xce>
		Status = VL53L1_get_timeouts_us(Dev,
 8001754:	ab03      	add	r3, sp, #12
 8001756:	aa02      	add	r2, sp, #8
 8001758:	a904      	add	r1, sp, #16
 800175a:	4630      	mov	r0, r6
 800175c:	f000 fa41 	bl	8001be2 <VL53L1_get_timeouts_us>
	if (Status == VL53L1_ERROR_NONE) {
 8001760:	4605      	mov	r5, r0
 8001762:	2800      	cmp	r0, #0
 8001764:	d13f      	bne.n	80017e6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xce>
		switch (PresetMode) {
 8001766:	f896 337c 	ldrb.w	r3, [r6, #892]	; 0x37c
 800176a:	2b04      	cmp	r3, #4
 800176c:	d011      	beq.n	8001792 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x7a>
 800176e:	2b08      	cmp	r3, #8
 8001770:	d024      	beq.n	80017bc <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xa4>
 8001772:	2b03      	cmp	r3, #3
 8001774:	d135      	bne.n	80017e2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xca>
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8001776:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800177a:	2b01      	cmp	r3, #1
 800177c:	9b03      	ldr	r3, [sp, #12]
 800177e:	d003      	beq.n	8001788 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x70>
 8001780:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001784:	2a01      	cmp	r2, #1
 8001786:	d115      	bne.n	80017b4 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x9c>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 8001788:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 800178c:	3334      	adds	r3, #52	; 0x34
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	e00b      	b.n	80017aa <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x92>
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8001792:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001796:	2b01      	cmp	r3, #1
 8001798:	9b03      	ldr	r3, [sp, #12]
 800179a:	d003      	beq.n	80017a4 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x8c>
 800179c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80017a0:	2a01      	cmp	r2, #1
 80017a2:	d104      	bne.n	80017ae <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x96>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 80017a4:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80017a8:	3308      	adds	r3, #8
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 80017aa:	6023      	str	r3, [r4, #0]
	return Status;
 80017ac:	e01b      	b.n	80017e6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xce>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 80017ae:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80017b2:	e7fa      	b.n	80017aa <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x92>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 80017b4:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 80017b8:	3330      	adds	r3, #48	; 0x30
 80017ba:	e7e8      	b.n	800178e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x76>
			VL53L1_get_tuning_parm(Dev,
 80017bc:	aa05      	add	r2, sp, #20
 80017be:	f248 0136 	movw	r1, #32822	; 0x8036
 80017c2:	4630      	mov	r0, r6
 80017c4:	f000 fe5c 	bl	8002480 <VL53L1_get_tuning_parm>
			if (vhv_loops > 0) {
 80017c8:	9a05      	ldr	r2, [sp, #20]
 80017ca:	23f5      	movs	r3, #245	; 0xf5
 80017cc:	2a00      	cmp	r2, #0
				vhv += vhv_loops *
 80017ce:	bfc8      	it	gt
 80017d0:	4353      	mulgt	r3, r2
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 80017d2:	9a03      	ldr	r2, [sp, #12]
				vhv += vhv_loops *
 80017d4:	bfc8      	it	gt
 80017d6:	33f5      	addgt	r3, #245	; 0xf5
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 80017d8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80017dc:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
			break;
 80017e0:	e7e3      	b.n	80017aa <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x92>
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 80017e2:	f06f 0507 	mvn.w	r5, #7
}
 80017e6:	4628      	mov	r0, r5
 80017e8:	b006      	add	sp, #24
 80017ea:	bd70      	pop	{r4, r5, r6, pc}

080017ec <VL53L1_SetInterMeasurementPeriodMilliSeconds>:
	adjustedIMP += (adjustedIMP * 64) / 1000;
 80017ec:	018b      	lsls	r3, r1, #6
 80017ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017f2:	fbb3 f3f2 	udiv	r3, r3, r2
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 80017f6:	4419      	add	r1, r3
 80017f8:	f000 b9c2 	b.w	8001b80 <VL53L1_set_inter_measurement_period_ms>

080017fc <VL53L1_GetInterMeasurementPeriodMilliSeconds>:
{
 80017fc:	b513      	push	{r0, r1, r4, lr}
 80017fe:	460c      	mov	r4, r1
	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 8001800:	a901      	add	r1, sp, #4
 8001802:	f000 f9c9 	bl	8001b98 <VL53L1_get_inter_measurement_period_ms>
	adjustedIMP -= (adjustedIMP * 64) / 1000;
 8001806:	9b01      	ldr	r3, [sp, #4]
 8001808:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800180c:	019a      	lsls	r2, r3, #6
 800180e:	fbb2 f2f1 	udiv	r2, r2, r1
 8001812:	1a9b      	subs	r3, r3, r2
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 8001814:	6023      	str	r3, [r4, #0]
}
 8001816:	b002      	add	sp, #8
 8001818:	bd10      	pop	{r4, pc}

0800181a <VL53L1_SetLimitCheckEnable>:
	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800181a:	2901      	cmp	r1, #1
{
 800181c:	b570      	push	{r4, r5, r6, lr}
 800181e:	4604      	mov	r4, r0
 8001820:	460e      	mov	r6, r1
 8001822:	4615      	mov	r5, r2
	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8001824:	d811      	bhi.n	800184a <VL53L1_SetLimitCheckEnable+0x30>
		if (LimitCheckEnable == 0)
 8001826:	b17a      	cbz	r2, 8001848 <VL53L1_SetLimitCheckEnable+0x2e>
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001828:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800182c:	f8d3 2388 	ldr.w	r2, [r3, #904]	; 0x388
		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 8001830:	4631      	mov	r1, r6
 8001832:	4620      	mov	r0, r4
 8001834:	f7ff fe64 	bl	8001500 <SetLimitValue>
	if (Status == VL53L1_ERROR_NONE)
 8001838:	b948      	cbnz	r0, 800184e <VL53L1_SetLimitCheckEnable+0x34>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800183a:	3500      	adds	r5, #0
 800183c:	4434      	add	r4, r6
 800183e:	bf18      	it	ne
 8001840:	2501      	movne	r5, #1
 8001842:	f884 5384 	strb.w	r5, [r4, #900]	; 0x384
 8001846:	bd70      	pop	{r4, r5, r6, pc}
 8001848:	e7f2      	b.n	8001830 <VL53L1_SetLimitCheckEnable+0x16>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800184a:	f06f 0003 	mvn.w	r0, #3
}
 800184e:	bd70      	pop	{r4, r5, r6, pc}

08001850 <VL53L1_SetLimitCheckValue>:
	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8001850:	2901      	cmp	r1, #1
{
 8001852:	b570      	push	{r4, r5, r6, lr}
 8001854:	4604      	mov	r4, r0
 8001856:	460d      	mov	r5, r1
 8001858:	4616      	mov	r6, r2
	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800185a:	d811      	bhi.n	8001880 <VL53L1_SetLimitCheckValue+0x30>
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800185c:	1843      	adds	r3, r0, r1
		if (LimitChecksEnable == 0) {
 800185e:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 8001862:	b92b      	cbnz	r3, 8001870 <VL53L1_SetLimitCheckValue+0x20>
			VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001864:	eb00 0481 	add.w	r4, r0, r1, lsl #2
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001868:	4618      	mov	r0, r3
			VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800186a:	f8c4 2388 	str.w	r2, [r4, #904]	; 0x388
 800186e:	bd70      	pop	{r4, r5, r6, pc}
			Status = SetLimitValue(Dev, LimitCheckId,
 8001870:	f7ff fe46 	bl	8001500 <SetLimitValue>
			if (Status == VL53L1_ERROR_NONE) {
 8001874:	b930      	cbnz	r0, 8001884 <VL53L1_SetLimitCheckValue+0x34>
				VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8001876:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800187a:	f8c4 6388 	str.w	r6, [r4, #904]	; 0x388
 800187e:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8001880:	f06f 0003 	mvn.w	r0, #3
}
 8001884:	bd70      	pop	{r4, r5, r6, pc}

08001886 <VL53L1_DataInit>:
{
 8001886:	b538      	push	{r3, r4, r5, lr}
		Status = VL53L1_data_init(Dev, 1);
 8001888:	2101      	movs	r1, #1
{
 800188a:	4604      	mov	r4, r0
		Status = VL53L1_data_init(Dev, 1);
 800188c:	f000 fb64 	bl	8001f58 <VL53L1_data_init>
	if (Status == VL53L1_ERROR_NONE) {
 8001890:	bb00      	cbnz	r0, 80018d4 <VL53L1_DataInit+0x4e>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 8001892:	2501      	movs	r5, #1
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 8001894:	2308      	movs	r3, #8
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 8001896:	4601      	mov	r1, r0
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 8001898:	f884 5378 	strb.w	r5, [r4, #888]	; 0x378
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 800189c:	f884 337c 	strb.w	r3, [r4, #892]	; 0x37c
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 80018a0:	462a      	mov	r2, r5
 80018a2:	4620      	mov	r0, r4
 80018a4:	f7ff ffb9 	bl	800181a <VL53L1_SetLimitCheckEnable>
		if (Status == VL53L1_ERROR_NONE)
 80018a8:	b9a0      	cbnz	r0, 80018d4 <VL53L1_DataInit+0x4e>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 80018aa:	462a      	mov	r2, r5
 80018ac:	4629      	mov	r1, r5
 80018ae:	4620      	mov	r0, r4
 80018b0:	f7ff ffb3 	bl	800181a <VL53L1_SetLimitCheckEnable>
	if (Status == VL53L1_ERROR_NONE) {
 80018b4:	b970      	cbnz	r0, 80018d4 <VL53L1_DataInit+0x4e>
		Status = VL53L1_SetLimitCheckValue(Dev,
 80018b6:	4601      	mov	r1, r0
 80018b8:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 80018bc:	4620      	mov	r0, r4
 80018be:	f7ff ffc7 	bl	8001850 <VL53L1_SetLimitCheckValue>
	if (Status == VL53L1_ERROR_NONE) {
 80018c2:	b938      	cbnz	r0, 80018d4 <VL53L1_DataInit+0x4e>
		Status = VL53L1_SetLimitCheckValue(Dev,
 80018c4:	4629      	mov	r1, r5
 80018c6:	4620      	mov	r0, r4
 80018c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
}
 80018cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		Status = VL53L1_SetLimitCheckValue(Dev,
 80018d0:	f7ff bfbe 	b.w	8001850 <VL53L1_SetLimitCheckValue>
}
 80018d4:	bd38      	pop	{r3, r4, r5, pc}

080018d6 <VL53L1_GetLimitCheckValue>:
{
 80018d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80018d8:	4605      	mov	r5, r0
 80018da:	4616      	mov	r6, r2
	switch (LimitCheckId) {
 80018dc:	460c      	mov	r4, r1
 80018de:	b121      	cbz	r1, 80018ea <VL53L1_GetLimitCheckValue+0x14>
 80018e0:	2901      	cmp	r1, #1
 80018e2:	d016      	beq.n	8001912 <VL53L1_GetLimitCheckValue+0x3c>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80018e4:	f06f 0003 	mvn.w	r0, #3
 80018e8:	e011      	b.n	800190e <VL53L1_GetLimitCheckValue+0x38>
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 80018ea:	f10d 0106 	add.w	r1, sp, #6
 80018ee:	f000 fb8c 	bl	800200a <VL53L1_get_lite_sigma_threshold>
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 80018f2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80018f6:	039b      	lsls	r3, r3, #14
	if (Status == VL53L1_ERROR_NONE) {
 80018f8:	b948      	cbnz	r0, 800190e <VL53L1_GetLimitCheckValue+0x38>
 80018fa:	f104 02e0 	add.w	r2, r4, #224	; 0xe0
 80018fe:	442c      	add	r4, r5
		if (TempFix1616 == 0) {
 8001900:	b973      	cbnz	r3, 8001920 <VL53L1_GetLimitCheckValue+0x4a>
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 8001902:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 8001906:	68ab      	ldr	r3, [r5, #8]
			*pLimitCheckValue = TempFix1616;
 8001908:	6033      	str	r3, [r6, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800190a:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
}
 800190e:	b002      	add	sp, #8
 8001910:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 8001912:	a901      	add	r1, sp, #4
 8001914:	f000 fb82 	bl	800201c <VL53L1_get_lite_min_count_rate>
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 8001918:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800191c:	025b      	lsls	r3, r3, #9
		break;
 800191e:	e7eb      	b.n	80018f8 <VL53L1_GetLimitCheckValue+0x22>
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8001920:	eb05 0582 	add.w	r5, r5, r2, lsl #2
			*pLimitCheckValue = TempFix1616;
 8001924:	6033      	str	r3, [r6, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8001926:	60ab      	str	r3, [r5, #8]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8001928:	2301      	movs	r3, #1
 800192a:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
 800192e:	e7ee      	b.n	800190e <VL53L1_GetLimitCheckValue+0x38>

08001930 <VL53L1_StartMeasurement>:
/* Group PAL Measurement Functions */



VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 8001930:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint32_t MTBus, IMPms;

	LOG_FUNCTION_START("");

	CurrPalState = VL53L1DevDataGet(Dev, PalState);
	switch (CurrPalState) {
 8001932:	f890 3378 	ldrb.w	r3, [r0, #888]	; 0x378
 8001936:	2b05      	cmp	r3, #5
{
 8001938:	4604      	mov	r4, r0
	switch (CurrPalState) {
 800193a:	d807      	bhi.n	800194c <VL53L1_StartMeasurement+0x1c>
 800193c:	2b04      	cmp	r3, #4
 800193e:	d201      	bcs.n	8001944 <VL53L1_StartMeasurement+0x14>
 8001940:	2b02      	cmp	r3, #2
 8001942:	d80c      	bhi.n	800195e <VL53L1_StartMeasurement+0x2e>
 8001944:	f06f 000d 	mvn.w	r0, #13
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);


	LOG_FUNCTION_END(Status);
	return Status;
}
 8001948:	b003      	add	sp, #12
 800194a:	bd30      	pop	{r4, r5, pc}
	switch (CurrPalState) {
 800194c:	3b62      	subs	r3, #98	; 0x62
 800194e:	2b01      	cmp	r3, #1
 8001950:	d9f8      	bls.n	8001944 <VL53L1_StartMeasurement+0x14>
		Status = VL53L1_ERROR_UNDEFINED;
 8001952:	f06f 0002 	mvn.w	r0, #2
 8001956:	e7f7      	b.n	8001948 <VL53L1_StartMeasurement+0x18>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8001958:	f06f 0003 	mvn.w	r0, #3
 800195c:	e7f4      	b.n	8001948 <VL53L1_StartMeasurement+0x18>
	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 800195e:	7885      	ldrb	r5, [r0, #2]
	if ((Status == VL53L1_ERROR_NONE) &&
 8001960:	2d40      	cmp	r5, #64	; 0x40
 8001962:	d111      	bne.n	8001988 <VL53L1_StartMeasurement+0x58>
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8001964:	4669      	mov	r1, sp
 8001966:	f7ff fed7 	bl	8001718 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 800196a:	a901      	add	r1, sp, #4
 800196c:	4620      	mov	r0, r4
		MTBus /= 1000;
 800196e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001972:	9b00      	ldr	r3, [sp, #0]
 8001974:	fbb3 f3f2 	udiv	r3, r3, r2
 8001978:	9300      	str	r3, [sp, #0]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 800197a:	f7ff ff3f 	bl	80017fc <VL53L1_GetInterMeasurementPeriodMilliSeconds>
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 800197e:	9b00      	ldr	r3, [sp, #0]
 8001980:	9a01      	ldr	r2, [sp, #4]
 8001982:	3304      	adds	r3, #4
 8001984:	4293      	cmp	r3, r2
 8001986:	d8e7      	bhi.n	8001958 <VL53L1_StartMeasurement+0x28>
		Status = VL53L1_init_and_start_range(
 8001988:	2206      	movs	r2, #6
 800198a:	4629      	mov	r1, r5
 800198c:	4620      	mov	r0, r4
 800198e:	f000 fb4f 	bl	8002030 <VL53L1_init_and_start_range>
	if (Status == VL53L1_ERROR_NONE)
 8001992:	2800      	cmp	r0, #0
 8001994:	d1d8      	bne.n	8001948 <VL53L1_StartMeasurement+0x18>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 8001996:	2304      	movs	r3, #4
 8001998:	f884 3378 	strb.w	r3, [r4, #888]	; 0x378
 800199c:	e7d4      	b.n	8001948 <VL53L1_StartMeasurement+0x18>

0800199e <VL53L1_ClearInterruptAndStartMeasurement>:
	return Status;
}


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 800199e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	InternalDistanceMode = VL53L1DevDataGet(Dev,
						CurrentParameters.InternalDistanceMode);
	NewDistanceMode = VL53L1DevDataGet(Dev,
					   CurrentParameters.NewDistanceMode);

	if (NewDistanceMode != InternalDistanceMode)
 80019a0:	f890 237e 	ldrb.w	r2, [r0, #894]	; 0x37e
 80019a4:	f890 337f 	ldrb.w	r3, [r0, #895]	; 0x37f
 80019a8:	429a      	cmp	r2, r3
{
 80019aa:	4604      	mov	r4, r0
	if (NewDistanceMode != InternalDistanceMode)
 80019ac:	d037      	beq.n	8001a1e <VL53L1_ClearInterruptAndStartMeasurement+0x80>
	Status = VL53L1_get_user_zone(Dev, &user_zone);
 80019ae:	4669      	mov	r1, sp
 80019b0:	f000 f974 	bl	8001c9c <VL53L1_get_user_zone>
	if (Status == VL53L1_ERROR_NONE)
 80019b4:	bb88      	cbnz	r0, 8001a1a <VL53L1_ClearInterruptAndStartMeasurement+0x7c>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 80019b6:	ab01      	add	r3, sp, #4
 80019b8:	aa02      	add	r2, sp, #8
 80019ba:	a903      	add	r1, sp, #12
 80019bc:	4620      	mov	r0, r4
	PresetMode = VL53L1DevDataGet(Dev,
 80019be:	f894 637c 	ldrb.w	r6, [r4, #892]	; 0x37c
	NewDistanceMode = VL53L1DevDataGet(Dev,
 80019c2:	f894 537f 	ldrb.w	r5, [r4, #895]	; 0x37f
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 80019c6:	f000 f90c 	bl	8001be2 <VL53L1_get_timeouts_us>
	if (Status == VL53L1_ERROR_NONE)
 80019ca:	bb30      	cbnz	r0, 8001a1a <VL53L1_ClearInterruptAndStartMeasurement+0x7c>
		Status = VL53L1_stop_range(Dev);
 80019cc:	4620      	mov	r0, r4
 80019ce:	f000 fc09 	bl	80021e4 <VL53L1_stop_range>
	if (Status == VL53L1_ERROR_NONE)
 80019d2:	bb10      	cbnz	r0, 8001a1a <VL53L1_ClearInterruptAndStartMeasurement+0x7c>
		Status = VL53L1_WaitUs(Dev, 500);
 80019d4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80019d8:	4620      	mov	r0, r4
 80019da:	f006 fbd9 	bl	8008190 <VL53L1_WaitUs>
	if (Status == VL53L1_ERROR_NONE) {
 80019de:	b9e0      	cbnz	r0, 8001a1a <VL53L1_ClearInterruptAndStartMeasurement+0x7c>
		Status = SetPresetMode(Dev,
 80019e0:	6963      	ldr	r3, [r4, #20]
 80019e2:	462a      	mov	r2, r5
 80019e4:	4631      	mov	r1, r6
 80019e6:	4620      	mov	r0, r4
 80019e8:	f7ff fd22 	bl	8001430 <SetPresetMode>
	if (Status == VL53L1_ERROR_NONE) {
 80019ec:	b9a8      	cbnz	r0, 8001a1a <VL53L1_ClearInterruptAndStartMeasurement+0x7c>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 80019ee:	9b01      	ldr	r3, [sp, #4]
 80019f0:	9a02      	ldr	r2, [sp, #8]
 80019f2:	9903      	ldr	r1, [sp, #12]
 80019f4:	4620      	mov	r0, r4
 80019f6:	f000 f8dc 	bl	8001bb2 <VL53L1_set_timeouts_us>
		if (Status == VL53L1_ERROR_NONE)
 80019fa:	b970      	cbnz	r0, 8001a1a <VL53L1_ClearInterruptAndStartMeasurement+0x7c>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 80019fc:	9b01      	ldr	r3, [sp, #4]
 80019fe:	6123      	str	r3, [r4, #16]
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 8001a00:	4669      	mov	r1, sp
 8001a02:	4620      	mov	r0, r4
 8001a04:	f000 f939 	bl	8001c7a <VL53L1_set_user_zone>
	if (Status == VL53L1_ERROR_NONE) {
 8001a08:	b938      	cbnz	r0, 8001a1a <VL53L1_ClearInterruptAndStartMeasurement+0x7c>
		Status = VL53L1_init_and_start_range(
 8001a0a:	2206      	movs	r2, #6
 8001a0c:	78a1      	ldrb	r1, [r4, #2]
 8001a0e:	4620      	mov	r0, r4
 8001a10:	f000 fb0e 	bl	8002030 <VL53L1_init_and_start_range>
	if (Status == VL53L1_ERROR_NONE)
 8001a14:	b908      	cbnz	r0, 8001a1a <VL53L1_ClearInterruptAndStartMeasurement+0x7c>
		VL53L1DevDataSet(Dev,
 8001a16:	f884 537e 	strb.w	r5, [r4, #894]	; 0x37e
			Dev,
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
}
 8001a1a:	b004      	add	sp, #16
 8001a1c:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L1_clear_interrupt_and_enable_next_range(
 8001a1e:	7881      	ldrb	r1, [r0, #2]
 8001a20:	f000 fc30 	bl	8002284 <VL53L1_clear_interrupt_and_enable_next_range>
 8001a24:	e7f9      	b.n	8001a1a <VL53L1_ClearInterruptAndStartMeasurement+0x7c>

08001a26 <VL53L1_WaitMeasurementDataReady>:

	/* Note that the timeout is given by:
	 * VL53L1_RANGE_COMPLETION_POLLING_TIMEOUT_MS defined in def.h
	 */

	Status = VL53L1_poll_for_range_completion(Dev,
 8001a26:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001a2a:	f002 b805 	b.w	8003a38 <VL53L1_poll_for_range_completion>
	...

08001a30 <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
					      VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 8001a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a32:	460c      	mov	r4, r1
 8001a34:	b0a3      	sub	sp, #140	; 0x8c
 8001a36:	4605      	mov	r5, r0

	LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 8001a38:	221c      	movs	r2, #28
 8001a3a:	21ff      	movs	r1, #255	; 0xff
 8001a3c:	4620      	mov	r0, r4
 8001a3e:	f006 fdca 	bl	80085d6 <memset>
	       sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 8001a42:	aa01      	add	r2, sp, #4
 8001a44:	2102      	movs	r1, #2
 8001a46:	4628      	mov	r0, r5
 8001a48:	f000 fcd4 	bl	80023f4 <VL53L1_get_device_results>
		Dev,
		VL53L1_DEVICERESULTSLEVEL_FULL,
		presults);

	if (Status == VL53L1_ERROR_NONE) {
 8001a4c:	2800      	cmp	r0, #0
 8001a4e:	f040 8088 	bne.w	8001b62 <VL53L1_GetRangingMeasurementData+0x132>
	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8001a52:	f89d 6046 	ldrb.w	r6, [sp, #70]	; 0x46
		pRangingMeasurementData->StreamCount = presults->stream_count;
 8001a56:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001a5a:	7123      	strb	r3, [r4, #4]
	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8001a5c:	f006 061f 	and.w	r6, r6, #31
	pRangeData->TimeStamp = presults_data->time_stamp;
 8001a60:	9b03      	ldr	r3, [sp, #12]

		/* in case of lite ranging or autonomous the following function
		 * returns index = 0
		 */
		presults_data = &(presults->data[0]);
		Status = SetSimpleData(Dev, 1,
 8001a62:	f89d 1007 	ldrb.w	r1, [sp, #7]
	pRangeData->TimeStamp = presults_data->time_stamp;
 8001a66:	6023      	str	r3, [r4, #0]
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 8001a68:	2e07      	cmp	r6, #7
 8001a6a:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 8001a6e:	d039      	beq.n	8001ae4 <VL53L1_GetRangingMeasurementData+0xb4>
		if (presults_data->median_range_mm < SRL)
 8001a70:	f9bd 2044 	ldrsh.w	r2, [sp, #68]	; 0x44
 8001a74:	f5b2 7f96 	cmp.w	r2, #300	; 0x12c
			RAS = LRAP * presults_data->median_range_mm;
 8001a78:	bfa6      	itte	ge
 8001a7a:	f641 139a 	movwge	r3, #6554	; 0x199a
 8001a7e:	fb12 f203 	smulbbge	r2, r2, r3
			RAS = SRAS * 65536;
 8001a82:	f44f 12f0 	movlt.w	r2, #1966080	; 0x1e0000
			partial = partial + (RAS >> 1);
 8001a86:	4b3a      	ldr	r3, [pc, #232]	; (8001b70 <VL53L1_GetRangingMeasurementData+0x140>)
 8001a88:	0857      	lsrs	r7, r2, #1
 8001a8a:	fb03 7300 	mla	r3, r3, r0, r7
			partial = partial / RAS;
 8001a8e:	fbb3 f3f2 	udiv	r3, r3, r2
			partial = partial * 65536;
 8001a92:	041a      	lsls	r2, r3, #16
			if (partial <= GI)
 8001a94:	4b37      	ldr	r3, [pc, #220]	; (8001b74 <VL53L1_GetRangingMeasurementData+0x144>)
 8001a96:	429a      	cmp	r2, r3
				SRQL = GI - partial;
 8001a98:	bf94      	ite	ls
 8001a9a:	1a9b      	subls	r3, r3, r2
				SRQL = 50 * 65536;
 8001a9c:	f44f 1348 	movhi.w	r3, #3276800	; 0x320000
		finalvalue = (uint8_t)(SRQL >> 16);
 8001aa0:	0c1b      	lsrs	r3, r3, #16
		returnvalue = MAX(50, MIN(100, finalvalue));
 8001aa2:	2b32      	cmp	r3, #50	; 0x32
 8001aa4:	d91e      	bls.n	8001ae4 <VL53L1_GetRangingMeasurementData+0xb4>
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b64      	cmp	r3, #100	; 0x64
 8001aaa:	bf28      	it	cs
 8001aac:	2364      	movcs	r3, #100	; 0x64
	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8001aae:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 8001ab2:	7163      	strb	r3, [r4, #5]
	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8001ab4:	0252      	lsls	r2, r2, #9
	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8001ab6:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8001aba:	60e2      	str	r2, [r4, #12]
	pRangeData->EffectiveSpadRtnCount =
 8001abc:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8001ac0:	8222      	strh	r2, [r4, #16]
	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8001ac2:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 8001ac6:	8322      	strh	r2, [r4, #24]
	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8001ac8:	025b      	lsls	r3, r3, #9
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8001aca:	0240      	lsls	r0, r0, #9
	pRangeData->RangeFractionalPart = 0;
 8001acc:	2200      	movs	r2, #0
	switch (device_status) {
 8001ace:	290d      	cmp	r1, #13
		= SignalRate;
 8001ad0:	60a3      	str	r3, [r4, #8]
	pRangeData->SigmaMilliMeter = TempFix1616;
 8001ad2:	6160      	str	r0, [r4, #20]
	pRangeData->RangeFractionalPart = 0;
 8001ad4:	76a2      	strb	r2, [r4, #26]
	switch (device_status) {
 8001ad6:	d00b      	beq.n	8001af0 <VL53L1_GetRangingMeasurementData+0xc0>
 8001ad8:	d806      	bhi.n	8001ae8 <VL53L1_GetRangingMeasurementData+0xb8>
 8001ada:	3901      	subs	r1, #1
 8001adc:	2902      	cmp	r1, #2
 8001ade:	d805      	bhi.n	8001aec <VL53L1_GetRangingMeasurementData+0xbc>
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 8001ae0:	2205      	movs	r2, #5
 8001ae2:	e003      	b.n	8001aec <VL53L1_GetRangingMeasurementData+0xbc>
		returnvalue = 50;
 8001ae4:	2332      	movs	r3, #50	; 0x32
 8001ae6:	e7e2      	b.n	8001aae <VL53L1_GetRangingMeasurementData+0x7e>
	switch (device_status) {
 8001ae8:	2911      	cmp	r1, #17
 8001aea:	d0f9      	beq.n	8001ae0 <VL53L1_GetRangingMeasurementData+0xb0>
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8001aec:	76e2      	strb	r2, [r4, #27]
 8001aee:	e000      	b.n	8001af2 <VL53L1_GetRangingMeasurementData+0xc2>
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 8001af0:	76e1      	strb	r1, [r4, #27]
	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 8001af2:	7ee2      	ldrb	r2, [r4, #27]
 8001af4:	b93a      	cbnz	r2, 8001b06 <VL53L1_GetRangingMeasurementData+0xd6>
 8001af6:	1f32      	subs	r2, r6, #4
 8001af8:	b2d2      	uxtb	r2, r2
 8001afa:	2a0f      	cmp	r2, #15
 8001afc:	bf96      	itet	ls
 8001afe:	491e      	ldrls	r1, [pc, #120]	; (8001b78 <VL53L1_GetRangingMeasurementData+0x148>)
 8001b00:	22ff      	movhi	r2, #255	; 0xff
 8001b02:	5c8a      	ldrbls	r2, [r1, r2]
		pRangeData->RangeStatus =
 8001b04:	76e2      	strb	r2, [r4, #27]
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8001b06:	f8c5 0390 	str.w	r0, [r5, #912]	; 0x390
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8001b0a:	f8c5 3394 	str.w	r3, [r5, #916]	; 0x394
	VL53L1_GetLimitCheckValue(Dev,
 8001b0e:	466a      	mov	r2, sp
 8001b10:	2100      	movs	r1, #0
 8001b12:	4628      	mov	r0, r5
 8001b14:	f7ff fedf 	bl	80018d6 <VL53L1_GetLimitCheckValue>
	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 8001b18:	f895 3384 	ldrb.w	r3, [r5, #900]	; 0x384
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d122      	bne.n	8001b66 <VL53L1_GetRangingMeasurementData+0x136>
 8001b20:	1fb2      	subs	r2, r6, #6
 8001b22:	4253      	negs	r3, r2
 8001b24:	4153      	adcs	r3, r2
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8001b26:	f885 3386 	strb.w	r3, [r5, #902]	; 0x386
	VL53L1_GetLimitCheckValue(Dev,
 8001b2a:	466a      	mov	r2, sp
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	4628      	mov	r0, r5
 8001b30:	f7ff fed1 	bl	80018d6 <VL53L1_GetLimitCheckValue>
	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 8001b34:	f895 3385 	ldrb.w	r3, [r5, #901]	; 0x385
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d116      	bne.n	8001b6a <VL53L1_GetRangingMeasurementData+0x13a>
 8001b3c:	1f33      	subs	r3, r6, #4
 8001b3e:	425e      	negs	r6, r3
 8001b40:	415e      	adcs	r6, r3
 8001b42:	f885 6387 	strb.w	r6, [r5, #903]	; 0x387
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8001b46:	7ee3      	ldrb	r3, [r4, #27]
 8001b48:	b953      	cbnz	r3, 8001b60 <VL53L1_GetRangingMeasurementData+0x130>
	Range = pRangeData->RangeMilliMeter;
 8001b4a:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8001b4e:	2a00      	cmp	r2, #0
 8001b50:	da06      	bge.n	8001b60 <VL53L1_GetRangingMeasurementData+0x130>
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 8001b52:	490a      	ldr	r1, [pc, #40]	; (8001b7c <VL53L1_GetRangingMeasurementData+0x14c>)
 8001b54:	6849      	ldr	r1, [r1, #4]
 8001b56:	428a      	cmp	r2, r1
			pRangeData->RangeStatus =
 8001b58:	bfba      	itte	lt
 8001b5a:	230e      	movlt	r3, #14
 8001b5c:	76e3      	strblt	r3, [r4, #27]
			pRangeData->RangeMilliMeter = 0;
 8001b5e:	8323      	strhge	r3, [r4, #24]
		Status = SetSimpleData(Dev, 1,
 8001b60:	2000      	movs	r0, #0
				       pRangingMeasurementData);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8001b62:	b023      	add	sp, #140	; 0x8c
 8001b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	e7dd      	b.n	8001b26 <VL53L1_GetRangingMeasurementData+0xf6>
	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 8001b6a:	2600      	movs	r6, #0
 8001b6c:	e7e9      	b.n	8001b42 <VL53L1_GetRangingMeasurementData+0x112>
 8001b6e:	bf00      	nop
 8001b70:	0030cccd 	.word	0x0030cccd
 8001b74:	0075b333 	.word	0x0075b333
 8001b78:	08009389 	.word	0x08009389
 8001b7c:	20000164 	.word	0x20000164

08001b80 <VL53L1_set_inter_measurement_period_ms>:
	VL53L1_Error status = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8001b80:	f8b0 32b4 	ldrh.w	r3, [r0, #692]	; 0x2b4
 8001b84:	b913      	cbnz	r3, 8001b8c <VL53L1_set_inter_measurement_period_ms+0xc>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8001b86:	f06f 000e 	mvn.w	r0, #14
 8001b8a:	4770      	bx	lr

	if (status == VL53L1_ERROR_NONE) {
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8001b8c:	6141      	str	r1, [r0, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
 8001b8e:	4359      	muls	r1, r3
		pdev->tim_cfg.system__intermeasurement_period = \
 8001b90:	f8c0 11ac 	str.w	r1, [r0, #428]	; 0x1ac
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8001b94:	2000      	movs	r0, #0
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8001b96:	4770      	bx	lr

08001b98 <VL53L1_get_inter_measurement_period_ms>:
	VL53L1_Error status = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8001b98:	f8b0 22b4 	ldrh.w	r2, [r0, #692]	; 0x2b4
 8001b9c:	b912      	cbnz	r2, 8001ba4 <VL53L1_get_inter_measurement_period_ms+0xc>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8001b9e:	f06f 000e 	mvn.w	r0, #14
 8001ba2:	4770      	bx	lr

	if (status == VL53L1_ERROR_NONE)
		*pinter_measurement_period_ms = \
			pdev->tim_cfg.system__intermeasurement_period /
 8001ba4:	f8d0 31ac 	ldr.w	r3, [r0, #428]	; 0x1ac
 8001ba8:	fbb3 f3f2 	udiv	r3, r3, r2
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8001bac:	2000      	movs	r0, #0
		*pinter_measurement_period_ms = \
 8001bae:	600b      	str	r3, [r1, #0]


	LOG_FUNCTION_END(status);

	return status;
}
 8001bb0:	4770      	bx	lr

08001bb2 <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV Dev,
	uint32_t phasecal_config_timeout_us,
	uint32_t mm_config_timeout_us,
	uint32_t range_config_timeout_us)
{
 8001bb2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001bb4:	460d      	mov	r5, r1
 8001bb6:	4611      	mov	r1, r2
 8001bb8:	461a      	mov	r2, r3
	VL53L1_LLDriverData_t *pdev =
		VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8001bba:	f8b0 315e 	ldrh.w	r3, [r0, #350]	; 0x15e
 8001bbe:	b91b      	cbnz	r3, 8001bc8 <VL53L1_set_timeouts_us+0x16>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8001bc0:	f06f 000e 	mvn.w	r0, #14
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8001bc4:	b003      	add	sp, #12
 8001bc6:	bd30      	pop	{r4, r5, pc}
		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8001bc8:	6085      	str	r5, [r0, #8]
		pdev->mm_config_timeout_us = mm_config_timeout_us;
 8001bca:	60c1      	str	r1, [r0, #12]
		pdev->range_config_timeout_us = range_config_timeout_us;
 8001bcc:	6102      	str	r2, [r0, #16]
			VL53L1_calc_timeout_register_values(
 8001bce:	f500 74ce 	add.w	r4, r0, #412	; 0x19c
 8001bd2:	f500 70c2 	add.w	r0, r0, #388	; 0x184
		status =
 8001bd6:	9000      	str	r0, [sp, #0]
 8001bd8:	9401      	str	r4, [sp, #4]
 8001bda:	4628      	mov	r0, r5
 8001bdc:	f001 f94d 	bl	8002e7a <VL53L1_calc_timeout_register_values>
	return status;
 8001be0:	e7f0      	b.n	8001bc4 <VL53L1_set_timeouts_us+0x12>

08001be2 <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t                        *prange_config_timeout_us)
{
 8001be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001be6:	4604      	mov	r4, r0
	uint32_t macro_period_us = 0;
	uint16_t timeout_encoded = 0;

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8001be8:	f8b0 015e 	ldrh.w	r0, [r0, #350]	; 0x15e
{
 8001bec:	460f      	mov	r7, r1
 8001bee:	4690      	mov	r8, r2
 8001bf0:	461e      	mov	r6, r3
	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8001bf2:	b918      	cbnz	r0, 8001bfc <VL53L1_get_timeouts_us+0x1a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8001bf4:	f06f 000e 	mvn.w	r0, #14
 8001bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (status == VL53L1_ERROR_NONE) {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
 8001bfc:	f894 11a2 	ldrb.w	r1, [r4, #418]	; 0x1a2
 8001c00:	f001 f8d6 	bl	8002db0 <VL53L1_calc_macro_period_us>
 8001c04:	4605      	mov	r5, r0
				pdev->tim_cfg.range_config__vcsel_period_a);

		/*  Get Phase Cal Timing A timeout */

		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
 8001c06:	4601      	mov	r1, r0
 8001c08:	f894 018b 	ldrb.w	r0, [r4, #395]	; 0x18b
 8001c0c:	f001 f904 	bl	8002e18 <VL53L1_calc_timeout_us>
		*pphasecal_config_timeout_us =
 8001c10:	6038      	str	r0, [r7, #0]
				(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
				macro_period_us);

		/*  Get MM Timing A timeout */

		timeout_encoded =
 8001c12:	f894 319c 	ldrb.w	r3, [r4, #412]	; 0x19c
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
		timeout_encoded = (timeout_encoded << 8) +
				  (uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8001c16:	f894 019d 	ldrb.w	r0, [r4, #413]	; 0x19d
		timeout_encoded = (timeout_encoded << 8) +
 8001c1a:	eb00 2003 	add.w	r0, r0, r3, lsl #8

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8001c1e:	4629      	mov	r1, r5
 8001c20:	b280      	uxth	r0, r0
 8001c22:	f001 f91e 	bl	8002e62 <VL53L1_calc_decoded_timeout_us>
		*pmm_config_timeout_us =
 8001c26:	f8c8 0000 	str.w	r0, [r8]
				timeout_encoded,
				macro_period_us);

		/* Get Range Timing A timeout */

		timeout_encoded =
 8001c2a:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
		timeout_encoded = (timeout_encoded << 8) +
				  (uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8001c2e:	f894 01a1 	ldrb.w	r0, [r4, #417]	; 0x1a1
		timeout_encoded = (timeout_encoded << 8) +
 8001c32:	eb00 2003 	add.w	r0, r0, r3, lsl #8

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8001c36:	4629      	mov	r1, r5
 8001c38:	b280      	uxth	r0, r0
 8001c3a:	f001 f912 	bl	8002e62 <VL53L1_calc_decoded_timeout_us>
		*prange_config_timeout_us =
 8001c3e:	6030      	str	r0, [r6, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	60a3      	str	r3, [r4, #8]
		pdev->mm_config_timeout_us = *pmm_config_timeout_us;
 8001c44:	f8d8 3000 	ldr.w	r3, [r8]
 8001c48:	60e3      	str	r3, [r4, #12]
		pdev->range_config_timeout_us = *prange_config_timeout_us;
 8001c4a:	6833      	ldr	r3, [r6, #0]
 8001c4c:	6123      	str	r3, [r4, #16]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8001c4e:	2000      	movs	r0, #0
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8001c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001c54 <VL53L1_get_sequence_config_bit>:
	VL53L1_LLDriverData_t *pdev =
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t bit_mask = 0x01;

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 8001c54:	2907      	cmp	r1, #7
 8001c56:	d80d      	bhi.n	8001c74 <VL53L1_get_sequence_config_bit+0x20>
 8001c58:	2301      	movs	r3, #1
		if (bit_id > 0) {
 8001c5a:	b101      	cbz	r1, 8001c5e <VL53L1_get_sequence_config_bit+0xa>
			bit_mask = 0x01 << bit_id;
 8001c5c:	408b      	lsls	r3, r1
		}

		*pvalue =
 8001c5e:	f890 01c5 	ldrb.w	r0, [r0, #453]	; 0x1c5
 8001c62:	4018      	ands	r0, r3
			pdev->dyn_cfg.system__sequence_config & bit_mask;

		if (bit_id > 0) {
 8001c64:	b911      	cbnz	r1, 8001c6c <VL53L1_get_sequence_config_bit+0x18>
		*pvalue =
 8001c66:	7010      	strb	r0, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8001c68:	2000      	movs	r0, #0
 8001c6a:	4770      	bx	lr
			*pvalue = *pvalue >> bit_id;
 8001c6c:	fa40 f101 	asr.w	r1, r0, r1
 8001c70:	7011      	strb	r1, [r2, #0]
 8001c72:	e7f9      	b.n	8001c68 <VL53L1_get_sequence_config_bit+0x14>
		}
	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 8001c74:	f06f 0003 	mvn.w	r0, #3
	}

	return status;
}
 8001c78:	4770      	bx	lr

08001c7a <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8001c7a:	b538      	push	{r3, r4, r5, lr}
 8001c7c:	460c      	mov	r4, r1
 8001c7e:	4605      	mov	r5, r0
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 8001c80:	f200 12c3 	addw	r2, r0, #451	; 0x1c3
 8001c84:	7809      	ldrb	r1, [r1, #0]
 8001c86:	7860      	ldrb	r0, [r4, #1]
 8001c88:	f001 f936 	bl	8002ef8 <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 8001c8c:	78a0      	ldrb	r0, [r4, #2]
 8001c8e:	78e1      	ldrb	r1, [r4, #3]
 8001c90:	f505 72e2 	add.w	r2, r5, #452	; 0x1c4
 8001c94:	f001 f941 	bl	8002f1a <VL53L1_encode_zone_size>
	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
}
 8001c98:	2000      	movs	r0, #0
 8001c9a:	bd38      	pop	{r3, r4, r5, pc}

08001c9c <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8001c9c:	b538      	push	{r3, r4, r5, lr}
 8001c9e:	4605      	mov	r5, r0
 8001ca0:	460c      	mov	r4, r1
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 8001ca2:	460a      	mov	r2, r1
 8001ca4:	f890 01c3 	ldrb.w	r0, [r0, #451]	; 0x1c3
 8001ca8:	3101      	adds	r1, #1
 8001caa:	f001 f9c7 	bl	800303c <VL53L1_decode_row_col>
		pdev->dyn_cfg.roi_config__user_roi_centre_spad,
		&(puser_zone->y_centre),
		&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 8001cae:	f895 01c4 	ldrb.w	r0, [r5, #452]	; 0x1c4
 8001cb2:	1ce2      	adds	r2, r4, #3
 8001cb4:	1ca1      	adds	r1, r4, #2
 8001cb6:	f001 f92a 	bl	8002f0e <VL53L1_decode_zone_size>
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
}
 8001cba:	2000      	movs	r0, #0
 8001cbc:	bd38      	pop	{r3, r4, r5, pc}

08001cbe <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 8001cbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001cc0:	460c      	mov	r4, r1
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t x = 0;
 8001cc2:	2500      	movs	r5, #0
{
 8001cc4:	4606      	mov	r6, r0
	uint8_t xy_size = 0;

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 8001cc6:	f10d 0206 	add.w	r2, sp, #6
 8001cca:	f10d 0107 	add.w	r1, sp, #7
 8001cce:	f890 022a 	ldrb.w	r0, [r0, #554]	; 0x22a
	uint8_t x = 0;
 8001cd2:	f88d 5006 	strb.w	r5, [sp, #6]
	uint8_t y = 0;
 8001cd6:	f88d 5007 	strb.w	r5, [sp, #7]
	VL53L1_decode_row_col(
 8001cda:	f001 f9af 	bl	800303c <VL53L1_decode_row_col>
		pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
		&y,
		&x);

	pmm_roi->x_centre = x;
 8001cde:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001ce2:	7023      	strb	r3, [r4, #0]
	pmm_roi->y_centre = y;
 8001ce4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001ce8:	7063      	strb	r3, [r4, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8001cea:	f896 322b 	ldrb.w	r3, [r6, #555]	; 0x22b
	pmm_roi->width = xy_size & 0x0F;

	LOG_FUNCTION_END(status);

	return status;
}
 8001cee:	4628      	mov	r0, r5
	pmm_roi->height = xy_size >> 4;
 8001cf0:	091a      	lsrs	r2, r3, #4
	pmm_roi->width = xy_size & 0x0F;
 8001cf2:	f003 030f 	and.w	r3, r3, #15
	pmm_roi->height = xy_size >> 4;
 8001cf6:	70e2      	strb	r2, [r4, #3]
	pmm_roi->width = xy_size & 0x0F;
 8001cf8:	70a3      	strb	r3, [r4, #2]
}
 8001cfa:	b002      	add	sp, #8
 8001cfc:	bd70      	pop	{r4, r5, r6, pc}

08001cfe <VL53L1_read_p2p_data>:
{
 8001cfe:	b538      	push	{r3, r4, r5, lr}
		status = VL53L1_get_static_nvm_managed(
 8001d00:	f500 71ac 	add.w	r1, r0, #344	; 0x158
{
 8001d04:	4604      	mov	r4, r0
		status = VL53L1_get_static_nvm_managed(
 8001d06:	f001 fa06 	bl	8003116 <VL53L1_get_static_nvm_managed>
	if (status == VL53L1_ERROR_NONE)
 8001d0a:	b9b8      	cbnz	r0, 8001d3c <VL53L1_read_p2p_data+0x3e>
		status = VL53L1_get_customer_nvm_managed(
 8001d0c:	f104 0142 	add.w	r1, r4, #66	; 0x42
 8001d10:	4620      	mov	r0, r4
 8001d12:	f001 faad 	bl	8003270 <VL53L1_get_customer_nvm_managed>
	if (status == VL53L1_ERROR_NONE) {
 8001d16:	b988      	cbnz	r0, 8001d3c <VL53L1_read_p2p_data+0x3e>
		status = VL53L1_get_nvm_copy_data(
 8001d18:	f504 75fd 	add.w	r5, r4, #506	; 0x1fa
 8001d1c:	4629      	mov	r1, r5
 8001d1e:	4620      	mov	r0, r4
 8001d20:	f001 fe5f 	bl	80039e2 <VL53L1_get_nvm_copy_data>
		if (status == VL53L1_ERROR_NONE)
 8001d24:	b950      	cbnz	r0, 8001d3c <VL53L1_read_p2p_data+0x3e>
			VL53L1_copy_rtn_good_spads_to_buffer(
 8001d26:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
 8001d2a:	4628      	mov	r0, r5
 8001d2c:	f000 ffa7 	bl	8002c7e <VL53L1_copy_rtn_good_spads_to_buffer>
		status =
 8001d30:	f504 722d 	add.w	r2, r4, #692	; 0x2b4
 8001d34:	21de      	movs	r1, #222	; 0xde
 8001d36:	4620      	mov	r0, r4
 8001d38:	f006 fa0c 	bl	8008154 <VL53L1_RdWord>
	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8001d3c:	f8b4 315e 	ldrh.w	r3, [r4, #350]	; 0x15e
 8001d40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8001d44:	bf3c      	itt	cc
 8001d46:	f64b 43cc 	movwcc	r3, #48332	; 0xbccc
 8001d4a:	f8a4 315e 	strhcc.w	r3, [r4, #350]	; 0x15e
	if (status == VL53L1_ERROR_NONE)
 8001d4e:	b920      	cbnz	r0, 8001d5a <VL53L1_read_p2p_data+0x5c>
		status =
 8001d50:	f104 019e 	add.w	r1, r4, #158	; 0x9e
 8001d54:	4620      	mov	r0, r4
 8001d56:	f7ff ffb2 	bl	8001cbe <VL53L1_get_mode_mitigation_roi>
	if (pdev->optical_centre.x_centre == 0 &&
 8001d5a:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
 8001d5e:	b94b      	cbnz	r3, 8001d74 <VL53L1_read_p2p_data+0x76>
			pdev->mm_roi.x_centre << 4;
 8001d60:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
 8001d64:	011b      	lsls	r3, r3, #4
		pdev->optical_centre.x_centre =
 8001d66:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
			pdev->mm_roi.y_centre << 4;
 8001d6a:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
 8001d6e:	011b      	lsls	r3, r3, #4
		pdev->optical_centre.y_centre =
 8001d70:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
}
 8001d74:	bd38      	pop	{r3, r4, r5, pc}

08001d76 <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8001d76:	b530      	push	{r4, r5, lr}
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 8001d78:	2908      	cmp	r1, #8
{
 8001d7a:	9d03      	ldr	r5, [sp, #12]
 8001d7c:	9c04      	ldr	r4, [sp, #16]
	switch (device_preset_mode) {
 8001d7e:	d810      	bhi.n	8001da2 <VL53L1_get_preset_mode_timing_cfg+0x2c>
 8001d80:	2906      	cmp	r1, #6
 8001d82:	d225      	bcs.n	8001dd0 <VL53L1_get_preset_mode_timing_cfg+0x5a>
 8001d84:	b191      	cbz	r1, 8001dac <VL53L1_get_preset_mode_timing_cfg+0x36>
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_lite_mcps;
 8001d86:	f8b0 10ca 	ldrh.w	r1, [r0, #202]	; 0xca
		*pdss_config__target_total_rate_mcps =
 8001d8a:	8011      	strh	r1, [r2, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8001d8c:	f8d0 20d0 	ldr.w	r2, [r0, #208]	; 0xd0
		*pphasecal_config_timeout_us =
 8001d90:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_lite_us;
 8001d92:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
		*pmm_config_timeout_us =
 8001d96:	602b      	str	r3, [r5, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_lite_us;
 8001d98:	f8d0 30e4 	ldr.w	r3, [r0, #228]	; 0xe4
			pdev->tuning_parms.tp_dss_target_timed_mcps;
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_lpa_us;
		*prange_config_timeout_us =
 8001d9c:	6023      	str	r3, [r4, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8001d9e:	2000      	movs	r0, #0
			pdev->tuning_parms.tp_range_timeout_lpa_us;
		break;
 8001da0:	bd30      	pop	{r4, r5, pc}
	switch (device_preset_mode) {
 8001da2:	2912      	cmp	r1, #18
 8001da4:	d014      	beq.n	8001dd0 <VL53L1_get_preset_mode_timing_cfg+0x5a>
 8001da6:	d804      	bhi.n	8001db2 <VL53L1_get_preset_mode_timing_cfg+0x3c>
 8001da8:	2911      	cmp	r1, #17
 8001daa:	d0ec      	beq.n	8001d86 <VL53L1_get_preset_mode_timing_cfg+0x10>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8001dac:	f06f 0003 	mvn.w	r0, #3
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8001db0:	bd30      	pop	{r4, r5, pc}
	switch (device_preset_mode) {
 8001db2:	3924      	subs	r1, #36	; 0x24
 8001db4:	2902      	cmp	r1, #2
 8001db6:	d8f9      	bhi.n	8001dac <VL53L1_get_preset_mode_timing_cfg+0x36>
			pdev->tuning_parms.tp_dss_target_timed_mcps;
 8001db8:	f8b0 10cc 	ldrh.w	r1, [r0, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 8001dbc:	8011      	strh	r1, [r2, #0]
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8001dbe:	f8d0 20d4 	ldr.w	r2, [r0, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 8001dc2:	601a      	str	r2, [r3, #0]
			pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8001dc4:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
		*pmm_config_timeout_us =
 8001dc8:	602b      	str	r3, [r5, #0]
			pdev->tuning_parms.tp_range_timeout_lpa_us;
 8001dca:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8001dce:	e7e5      	b.n	8001d9c <VL53L1_get_preset_mode_timing_cfg+0x26>
			pdev->tuning_parms.tp_dss_target_timed_mcps;
 8001dd0:	f8b0 10cc 	ldrh.w	r1, [r0, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 8001dd4:	8011      	strh	r1, [r2, #0]
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8001dd6:	f8d0 20d4 	ldr.w	r2, [r0, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 8001dda:	601a      	str	r2, [r3, #0]
			pdev->tuning_parms.tp_mm_timeout_timed_us;
 8001ddc:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
		*pmm_config_timeout_us =
 8001de0:	602b      	str	r3, [r5, #0]
			pdev->tuning_parms.tp_range_timeout_timed_us;
 8001de2:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
 8001de6:	e7d9      	b.n	8001d9c <VL53L1_get_preset_mode_timing_cfg+0x26>

08001de8 <VL53L1_set_preset_mode>:
	uint16_t dss_config__target_total_rate_mcps,
	uint32_t phasecal_config_timeout_us,
	uint32_t mm_config_timeout_us,
	uint32_t range_config_timeout_us,
	uint32_t inter_measurement_period_ms)
{
 8001de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001dec:	b08b      	sub	sp, #44	; 0x2c
 8001dee:	4604      	mov	r4, r0
 8001df0:	9307      	str	r3, [sp, #28]
 8001df2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8001df4:	9304      	str	r3, [sp, #16]
 8001df6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8001df8:	9305      	str	r3, [sp, #20]
 8001dfa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8001dfc:	9306      	str	r3, [sp, #24]
		VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic = &(pdev->stat_cfg);
	VL53L1_general_config_t       *pgeneral = &(pdev->gen_cfg);
	VL53L1_timing_config_t        *ptiming = &(pdev->tim_cfg);
	VL53L1_dynamic_config_t       *pdynamic = &(pdev->dyn_cfg);
 8001dfe:	f500 73da 	add.w	r3, r0, #436	; 0x1b4
 8001e02:	9308      	str	r3, [sp, #32]

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode = device_preset_mode;
	pdev->mm_config_timeout_us = mm_config_timeout_us;
 8001e04:	9b04      	ldr	r3, [sp, #16]
	pdev->preset_mode = device_preset_mode;
 8001e06:	7061      	strb	r1, [r4, #1]
	pdev->mm_config_timeout_us = mm_config_timeout_us;
 8001e08:	60c3      	str	r3, [r0, #12]
	pdev->range_config_timeout_us = range_config_timeout_us;
 8001e0a:	9b05      	ldr	r3, [sp, #20]
 8001e0c:	6103      	str	r3, [r0, #16]
{
 8001e0e:	4688      	mov	r8, r1
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8001e10:	9b06      	ldr	r3, [sp, #24]
 8001e12:	6143      	str	r3, [r0, #20]
{
 8001e14:	4691      	mov	r9, r2

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 8001e16:	2103      	movs	r1, #3
	VL53L1_timing_config_t        *ptiming = &(pdev->tim_cfg);
 8001e18:	f500 72ce 	add.w	r2, r0, #412	; 0x19c
		Dev,
		VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 8001e1c:	f108 38ff 	add.w	r8, r8, #4294967295
	VL53L1_timing_config_t        *ptiming = &(pdev->tim_cfg);
 8001e20:	9209      	str	r2, [sp, #36]	; 0x24
	VL53L1_static_config_t        *pstatic = &(pdev->stat_cfg);
 8001e22:	f500 75b2 	add.w	r5, r0, #356	; 0x164
	VL53L1_general_config_t       *pgeneral = &(pdev->gen_cfg);
 8001e26:	f500 76c2 	add.w	r6, r0, #388	; 0x184
	VL53L1_system_control_t       *psystem = &(pdev->sys_ctrl);
 8001e2a:	f500 77e4 	add.w	r7, r0, #456	; 0x1c8
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8001e2e:	f100 0aa4 	add.w	sl, r0, #164	; 0xa4
	VL53L1_low_power_auto_data_t  *plpadata =
 8001e32:	f500 7b39 	add.w	fp, r0, #740	; 0x2e4
	VL53L1_init_ll_driver_state(
 8001e36:	f000 fe5f 	bl	8002af8 <VL53L1_init_ll_driver_state>
	switch (device_preset_mode) {
 8001e3a:	9b08      	ldr	r3, [sp, #32]
 8001e3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001e3e:	f1b8 0f25 	cmp.w	r8, #37	; 0x25
 8001e42:	f200 8084 	bhi.w	8001f4e <VL53L1_set_preset_mode+0x166>
 8001e46:	e8df f008 	tbb	[pc, r8]
 8001e4a:	2e13      	.short	0x2e13
 8001e4c:	4a433c35 	.word	0x4a433c35
 8001e50:	82825851 	.word	0x82825851
 8001e54:	82828282 	.word	0x82828282
 8001e58:	665f8282 	.word	0x665f8282
 8001e5c:	82828282 	.word	0x82828282
 8001e60:	82828282 	.word	0x82828282
 8001e64:	82828282 	.word	0x82828282
 8001e68:	82828282 	.word	0x82828282
 8001e6c:	7b746d82 	.word	0x7b746d82
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 8001e70:	e88d 0480 	stmia.w	sp, {r7, sl}
 8001e74:	4631      	mov	r1, r6
 8001e76:	4628      	mov	r0, r5
 8001e78:	f000 fc7c 	bl	8002774 <VL53L1_preset_mode_standard_ranging>
		break;
	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 8001e7c:	2800      	cmp	r0, #0
 8001e7e:	d168      	bne.n	8001f52 <VL53L1_set_preset_mode+0x16a>
		pstatic->dss_config__target_total_rate_mcps =
 8001e80:	f8a4 9164 	strh.w	r9, [r4, #356]	; 0x164
			dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps =
 8001e84:	f8a4 9018 	strh.w	r9, [r4, #24]
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
		status =
 8001e88:	9b05      	ldr	r3, [sp, #20]
 8001e8a:	9a04      	ldr	r2, [sp, #16]
 8001e8c:	9907      	ldr	r1, [sp, #28]
 8001e8e:	4620      	mov	r0, r4
 8001e90:	f7ff fe8f 	bl	8001bb2 <VL53L1_set_timeouts_us>
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 8001e94:	2800      	cmp	r0, #0
 8001e96:	d15c      	bne.n	8001f52 <VL53L1_set_preset_mode+0x16a>
		status =
 8001e98:	9906      	ldr	r1, [sp, #24]
 8001e9a:	4620      	mov	r0, r4
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
}
 8001e9c:	b00b      	add	sp, #44	; 0x2c
 8001e9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		status =
 8001ea2:	f7ff be6d 	b.w	8001b80 <VL53L1_set_inter_measurement_period_ms>
		status = VL53L1_preset_mode_standard_ranging_short_range(
 8001ea6:	e88d 0480 	stmia.w	sp, {r7, sl}
 8001eaa:	4631      	mov	r1, r6
 8001eac:	4628      	mov	r0, r5
 8001eae:	f000 fd05 	bl	80028bc <VL53L1_preset_mode_standard_ranging_short_range>
		break;
 8001eb2:	e7e3      	b.n	8001e7c <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_standard_ranging_long_range(
 8001eb4:	e88d 0480 	stmia.w	sp, {r7, sl}
 8001eb8:	4631      	mov	r1, r6
 8001eba:	4628      	mov	r0, r5
 8001ebc:	f000 fd1c 	bl	80028f8 <VL53L1_preset_mode_standard_ranging_long_range>
		break;
 8001ec0:	e7dc      	b.n	8001e7c <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 8001ec2:	e88d 0480 	stmia.w	sp, {r7, sl}
 8001ec6:	4631      	mov	r1, r6
 8001ec8:	4628      	mov	r0, r5
 8001eca:	f000 fd33 	bl	8002934 <VL53L1_preset_mode_standard_ranging_mm1_cal>
		break;
 8001ece:	e7d5      	b.n	8001e7c <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 8001ed0:	e88d 0480 	stmia.w	sp, {r7, sl}
 8001ed4:	4631      	mov	r1, r6
 8001ed6:	4628      	mov	r0, r5
 8001ed8:	f000 fd3c 	bl	8002954 <VL53L1_preset_mode_standard_ranging_mm2_cal>
		break;
 8001edc:	e7ce      	b.n	8001e7c <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_timed_ranging(
 8001ede:	e88d 0480 	stmia.w	sp, {r7, sl}
 8001ee2:	4631      	mov	r1, r6
 8001ee4:	4628      	mov	r0, r5
 8001ee6:	f000 fd45 	bl	8002974 <VL53L1_preset_mode_timed_ranging>
		break;
 8001eea:	e7c7      	b.n	8001e7c <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_timed_ranging_short_range(
 8001eec:	e88d 0480 	stmia.w	sp, {r7, sl}
 8001ef0:	4631      	mov	r1, r6
 8001ef2:	4628      	mov	r0, r5
 8001ef4:	f000 fd59 	bl	80029aa <VL53L1_preset_mode_timed_ranging_short_range>
		break;
 8001ef8:	e7c0      	b.n	8001e7c <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_timed_ranging_long_range(
 8001efa:	e88d 0480 	stmia.w	sp, {r7, sl}
 8001efe:	4631      	mov	r1, r6
 8001f00:	4628      	mov	r0, r5
 8001f02:	f000 fd6e 	bl	80029e2 <VL53L1_preset_mode_timed_ranging_long_range>
		break;
 8001f06:	e7b9      	b.n	8001e7c <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_olt(
 8001f08:	e88d 0480 	stmia.w	sp, {r7, sl}
 8001f0c:	4631      	mov	r1, r6
 8001f0e:	4628      	mov	r0, r5
 8001f10:	f000 fdd9 	bl	8002ac6 <VL53L1_preset_mode_olt>
		break;
 8001f14:	e7b2      	b.n	8001e7c <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_singleshot_ranging(
 8001f16:	e88d 0480 	stmia.w	sp, {r7, sl}
 8001f1a:	4631      	mov	r1, r6
 8001f1c:	4628      	mov	r0, r5
 8001f1e:	f000 fdba 	bl	8002a96 <VL53L1_preset_mode_singleshot_ranging>
		break;
 8001f22:	e7ab      	b.n	8001e7c <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 8001f24:	e88d 0c80 	stmia.w	sp, {r7, sl, fp}
 8001f28:	4631      	mov	r1, r6
 8001f2a:	4628      	mov	r0, r5
 8001f2c:	f000 fd89 	bl	8002a42 <VL53L1_preset_mode_low_power_auto_short_ranging>
		break;
 8001f30:	e7a4      	b.n	8001e7c <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_low_power_auto_ranging(
 8001f32:	e88d 0c80 	stmia.w	sp, {r7, sl, fp}
 8001f36:	4631      	mov	r1, r6
 8001f38:	4628      	mov	r0, r5
 8001f3a:	f000 fd6d 	bl	8002a18 <VL53L1_preset_mode_low_power_auto_ranging>
		break;
 8001f3e:	e79d      	b.n	8001e7c <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 8001f40:	e88d 0c80 	stmia.w	sp, {r7, sl, fp}
 8001f44:	4631      	mov	r1, r6
 8001f46:	4628      	mov	r0, r5
 8001f48:	f000 fd90 	bl	8002a6c <VL53L1_preset_mode_low_power_auto_long_ranging>
		break;
 8001f4c:	e796      	b.n	8001e7c <VL53L1_set_preset_mode+0x94>
		status = VL53L1_ERROR_INVALID_PARAMS;
 8001f4e:	f06f 0003 	mvn.w	r0, #3
}
 8001f52:	b00b      	add	sp, #44	; 0x2c
 8001f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001f58 <VL53L1_data_init>:
{
 8001f58:	b530      	push	{r4, r5, lr}
 8001f5a:	4604      	mov	r4, r0
 8001f5c:	b085      	sub	sp, #20
 8001f5e:	460d      	mov	r5, r1
	VL53L1_init_ll_driver_state(
 8001f60:	2162      	movs	r1, #98	; 0x62
 8001f62:	f000 fdc9 	bl	8002af8 <VL53L1_init_ll_driver_state>
	pdev->preset_mode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8001f66:	2201      	movs	r2, #1
 8001f68:	7062      	strb	r2, [r4, #1]
	pdev->offset_calibration_mode =
 8001f6a:	70e2      	strb	r2, [r4, #3]
	pdev->offset_correction_mode =
 8001f6c:	7122      	strb	r2, [r4, #4]
	pdev->phasecal_config_timeout_us = 1000;
 8001f6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f72:	60a2      	str	r2, [r4, #8]
	pdev->mm_config_timeout_us = 2000;
 8001f74:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001f78:	60e2      	str	r2, [r4, #12]
	pdev->range_config_timeout_us = 13000;
 8001f7a:	f243 22c8 	movw	r2, #13000	; 0x32c8
	pdev->wait_method = VL53L1_WAIT_METHOD_BLOCKING;
 8001f7e:	2300      	movs	r3, #0
	pdev->range_config_timeout_us = 13000;
 8001f80:	6122      	str	r2, [r4, #16]
	pdev->inter_measurement_period_ms = 100;
 8001f82:	2264      	movs	r2, #100	; 0x64
	pdev->wait_method = VL53L1_WAIT_METHOD_BLOCKING;
 8001f84:	7023      	strb	r3, [r4, #0]
	pdev->measurement_mode = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 8001f86:	70a3      	strb	r3, [r4, #2]
	pdev->inter_measurement_period_ms = 100;
 8001f88:	6162      	str	r2, [r4, #20]
	pdev->debug_mode = 0x00;
 8001f8a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8001f8e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
	pdev->gain_cal.standard_ranging_gain_factor =
 8001f92:	f240 73db 	movw	r3, #2011	; 0x7db
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8001f96:	8322      	strh	r2, [r4, #24]
	pdev->gain_cal.standard_ranging_gain_factor =
 8001f98:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
	VL53L1_init_version(Dev);
 8001f9c:	4620      	mov	r0, r4
 8001f9e:	f000 fd9e 	bl	8002ade <VL53L1_init_version>
	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8001fa2:	b115      	cbz	r5, 8001faa <VL53L1_data_init+0x52>
		status = VL53L1_read_p2p_data(Dev);
 8001fa4:	4620      	mov	r0, r4
 8001fa6:	f7ff feaa 	bl	8001cfe <VL53L1_read_p2p_data>
	status =
 8001faa:	f504 7088 	add.w	r0, r4, #272	; 0x110
 8001fae:	f000 fb3e 	bl	800262e <VL53L1_init_refspadchar_config_struct>
	status =
 8001fb2:	f504 7090 	add.w	r0, r4, #288	; 0x120
 8001fb6:	f000 fb4c 	bl	8002652 <VL53L1_init_ssc_config_struct>
	status =
 8001fba:	f504 7196 	add.w	r1, r4, #300	; 0x12c
 8001fbe:	f104 0042 	add.w	r0, r4, #66	; 0x42
 8001fc2:	f000 fb55 	bl	8002670 <VL53L1_init_xtalk_config_struct>
	status =
 8001fc6:	f504 70a2 	add.w	r0, r4, #324	; 0x144
 8001fca:	f000 fb76 	bl	80026ba <VL53L1_init_offset_cal_config_struct>
	status =
 8001fce:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
 8001fd2:	f000 fb84 	bl	80026de <VL53L1_init_tuning_parm_storage_struct>
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8001fd6:	f894 3160 	ldrb.w	r3, [r4, #352]	; 0x160
		status = VL53L1_set_preset_mode(
 8001fda:	8b22      	ldrh	r2, [r4, #24]
 8001fdc:	7861      	ldrb	r1, [r4, #1]
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	3b80      	subs	r3, #128	; 0x80
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8001fe4:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
		status = VL53L1_set_preset_mode(
 8001fe8:	6963      	ldr	r3, [r4, #20]
 8001fea:	9302      	str	r3, [sp, #8]
 8001fec:	6923      	ldr	r3, [r4, #16]
 8001fee:	9301      	str	r3, [sp, #4]
 8001ff0:	68e3      	ldr	r3, [r4, #12]
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	68a3      	ldr	r3, [r4, #8]
 8001ff8:	f7ff fef6 	bl	8001de8 <VL53L1_set_preset_mode>
 8001ffc:	4605      	mov	r5, r0
	VL53L1_low_power_auto_data_init(
 8001ffe:	4620      	mov	r0, r4
 8002000:	f000 ff8f 	bl	8002f22 <VL53L1_low_power_auto_data_init>
}
 8002004:	4628      	mov	r0, r5
 8002006:	b005      	add	sp, #20
 8002008:	bd30      	pop	{r4, r5, pc}

0800200a <VL53L1_get_lite_sigma_threshold>:
		pdev->tim_cfg.range_config__sigma_thresh;
 800200a:	f8b0 31a6 	ldrh.w	r3, [r0, #422]	; 0x1a6
	*plite_sigma =
 800200e:	800b      	strh	r3, [r1, #0]
}
 8002010:	2000      	movs	r0, #0
 8002012:	4770      	bx	lr

08002014 <VL53L1_set_lite_sigma_threshold>:
	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 8002014:	f8a0 11a6 	strh.w	r1, [r0, #422]	; 0x1a6
}
 8002018:	2000      	movs	r0, #0
 800201a:	4770      	bx	lr

0800201c <VL53L1_get_lite_min_count_rate>:
		pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 800201c:	f8b0 31a8 	ldrh.w	r3, [r0, #424]	; 0x1a8
	*plite_mincountrate =
 8002020:	800b      	strh	r3, [r1, #0]
}
 8002022:	2000      	movs	r0, #0
 8002024:	4770      	bx	lr

08002026 <VL53L1_set_lite_min_count_rate>:
	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 8002026:	f8a0 11a8 	strh.w	r1, [r0, #424]	; 0x1a8
}
 800202a:	2000      	movs	r0, #0
 800202c:	4770      	bx	lr
	...

08002030 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV Dev,
	uint8_t measurement_mode,
	VL53L1_DeviceConfigLevel device_config_level)
{
 8002030:	b570      	push	{r4, r5, r6, lr}
	pdev->measurement_mode = measurement_mode;

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 8002032:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
	pdev->measurement_mode = measurement_mode;
 8002036:	7081      	strb	r1, [r0, #2]
		(psystem->system__mode_start &
 8002038:	f003 030f 	and.w	r3, r3, #15
		 VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 800203c:	4319      	orrs	r1, r3
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 800203e:	f8b0 3142 	ldrh.w	r3, [r0, #322]	; 0x142
 8002042:	f8a0 317c 	strh.w	r3, [r0, #380]	; 0x17c
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 8002046:	f890 32e6 	ldrb.w	r3, [r0, #742]	; 0x2e6
	psystem->system__mode_start =
 800204a:	f880 11cc 	strb.w	r1, [r0, #460]	; 0x1cc
	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 800204e:	2bff      	cmp	r3, #255	; 0xff
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8002050:	bf04      	itt	eq
 8002052:	2300      	moveq	r3, #0
 8002054:	f880 32e6 	strbeq.w	r3, [r0, #742]	; 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8002058:	f8d0 32e4 	ldr.w	r3, [r0, #740]	; 0x2e4
 800205c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002060:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002064:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
{
 8002068:	b0c0      	sub	sp, #256	; 0x100
 800206a:	4604      	mov	r4, r0
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800206c:	d114      	bne.n	8002098 <VL53L1_init_and_start_range+0x68>
	    (pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
		/* save interrupt config */
		pdev->low_power_auto_data.saved_interrupt_config =
 800206e:	f890 3186 	ldrb.w	r3, [r0, #390]	; 0x186
 8002072:	f880 32e7 	strb.w	r3, [r0, #743]	; 0x2e7
			pdev->gen_cfg.system__interrupt_config_gpio;
		/* set intr_new_measure_ready */
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8002076:	2320      	movs	r3, #32
 8002078:	f880 3186 	strb.w	r3, [r0, #390]	; 0x186
		/* check MM1/MM2 disabled? */
		if ((pdev->dyn_cfg.system__sequence_config & (
 800207c:	f890 31c5 	ldrb.w	r3, [r0, #453]	; 0x1c5
 8002080:	f013 0f60 	tst.w	r3, #96	; 0x60
			     VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
		    0x0) {
			pdev->customer.algo__part_to_part_range_offset_mm =
				pdev->customer.mm_config__outer_offset_mm * 4;
 8002084:	bf0a      	itet	eq
 8002086:	f8b0 3058 	ldrheq.w	r3, [r0, #88]	; 0x58
		} else {
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 800208a:	2300      	movne	r3, #0
				pdev->customer.mm_config__outer_offset_mm * 4;
 800208c:	009b      	lsleq	r3, r3, #2
 800208e:	2a05      	cmp	r2, #5
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 8002090:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
 8002094:	bf38      	it	cc
 8002096:	2205      	movcc	r2, #5
			device_config_level =
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8002098:	f8d4 32e4 	ldr.w	r3, [r4, #740]	; 0x2e4
 800209c:	494f      	ldr	r1, [pc, #316]	; (80021dc <VL53L1_init_and_start_range+0x1ac>)
 800209e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80020a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80020a6:	428b      	cmp	r3, r1
	    (pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
		/* restore interrupt config */
		pdev->gen_cfg.system__interrupt_config_gpio =
 80020a8:	bf02      	ittt	eq
 80020aa:	f894 32e7 	ldrbeq.w	r3, [r4, #743]	; 0x2e7
 80020ae:	f884 3186 	strbeq.w	r3, [r4, #390]	; 0x186
			pdev->low_power_auto_data.saved_interrupt_config;

		/* make sure config gets written out including VHV config */
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 80020b2:	2206      	moveq	r2, #6
 80020b4:	1e53      	subs	r3, r2, #1
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b05      	cmp	r3, #5
 80020ba:	bf9a      	itte	ls
 80020bc:	4948      	ldrls	r1, [pc, #288]	; (80021e0 <VL53L1_init_and_start_range+0x1b0>)
 80020be:	5ccd      	ldrbls	r5, [r1, r3]
 80020c0:	2583      	movhi	r5, #131	; 0x83
 80020c2:	b2ad      	uxth	r5, r5
		break;
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 80020c4:	f1c5 0688 	rsb	r6, r5, #136	; 0x88
		i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
	for (i = 0; i < i2c_buffer_size_bytes; i++) {
 80020c8:	2300      	movs	r3, #0
	i2c_buffer_size_bytes = \
 80020ca:	b2b6      	uxth	r6, r6
		*pbuffer++ = 0;
 80020cc:	4618      	mov	r0, r3
	for (i = 0; i < i2c_buffer_size_bytes; i++) {
 80020ce:	b299      	uxth	r1, r3
 80020d0:	42b1      	cmp	r1, r6
 80020d2:	d325      	bcc.n	8002120 <VL53L1_init_and_start_range+0xf0>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 80020d4:	2a05      	cmp	r2, #5
 80020d6:	d953      	bls.n	8002180 <VL53L1_init_and_start_range+0x150>
	    status == VL53L1_ERROR_NONE) {
		i2c_buffer_offset_bytes = \
 80020d8:	f1c5 0201 	rsb	r2, r5, #1
			VL53L1_STATIC_NVM_MANAGED_I2C_INDEX - i2c_index;

		status =
 80020dc:	466b      	mov	r3, sp
 80020de:	fa13 f282 	uxtah	r2, r3, r2
 80020e2:	210b      	movs	r1, #11
 80020e4:	f504 70ac 	add.w	r0, r4, #344	; 0x158
 80020e8:	f000 ffbb 	bl	8003062 <VL53L1_i2c_encode_static_nvm_managed>
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 80020ec:	b9b0      	cbnz	r0, 800211c <VL53L1_init_and_start_range+0xec>
	    status == VL53L1_ERROR_NONE) {
		i2c_buffer_offset_bytes = \
 80020ee:	f1c5 020d 	rsb	r2, r5, #13
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX - i2c_index;

		status =
 80020f2:	466b      	mov	r3, sp
 80020f4:	fa13 f282 	uxtah	r2, r3, r2
 80020f8:	2117      	movs	r1, #23
 80020fa:	f104 0042 	add.w	r0, r4, #66	; 0x42
 80020fe:	f001 f819 	bl	8003134 <VL53L1_i2c_encode_customer_nvm_managed>
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8002102:	b958      	cbnz	r0, 800211c <VL53L1_init_and_start_range+0xec>
	    status == VL53L1_ERROR_NONE) {
		i2c_buffer_offset_bytes = \
 8002104:	f1c5 0224 	rsb	r2, r5, #36	; 0x24
			VL53L1_STATIC_CONFIG_I2C_INDEX - i2c_index;

		status =
 8002108:	466b      	mov	r3, sp
 800210a:	fa13 f282 	uxtah	r2, r3, r2
 800210e:	2120      	movs	r1, #32
 8002110:	f504 70b2 	add.w	r0, r4, #356	; 0x164
 8002114:	f001 f8bc 	bl	8003290 <VL53L1_i2c_encode_static_config>
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8002118:	2800      	cmp	r0, #0
 800211a:	d036      	beq.n	800218a <VL53L1_init_and_start_range+0x15a>
		status = VL53L1_update_ll_driver_cfg_state(Dev);

	LOG_FUNCTION_END(status);

	return status;
}
 800211c:	b040      	add	sp, #256	; 0x100
 800211e:	bd70      	pop	{r4, r5, r6, pc}
		*pbuffer++ = 0;
 8002120:	f80d 0003 	strb.w	r0, [sp, r3]
 8002124:	3301      	adds	r3, #1
 8002126:	e7d2      	b.n	80020ce <VL53L1_init_and_start_range+0x9e>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8002128:	2a02      	cmp	r2, #2
 800212a:	d03a      	beq.n	80021a2 <VL53L1_init_and_start_range+0x172>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 800212c:	2a00      	cmp	r2, #0
 800212e:	d144      	bne.n	80021ba <VL53L1_init_and_start_range+0x18a>
		i2c_buffer_offset_bytes = \
 8002130:	f1c5 0283 	rsb	r2, r5, #131	; 0x83
		status =
 8002134:	466b      	mov	r3, sp
 8002136:	fa13 f282 	uxtah	r2, r3, r2
 800213a:	2105      	movs	r1, #5
 800213c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
 8002140:	f001 f9de 	bl	8003500 <VL53L1_i2c_encode_system_control>
	if (status == VL53L1_ERROR_NONE) {
 8002144:	2800      	cmp	r0, #0
 8002146:	d1e9      	bne.n	800211c <VL53L1_init_and_start_range+0xec>
		status =
 8002148:	4633      	mov	r3, r6
 800214a:	466a      	mov	r2, sp
 800214c:	4629      	mov	r1, r5
 800214e:	4620      	mov	r0, r4
 8002150:	f005 ff9e 	bl	8008090 <VL53L1_WriteMulti>
	if (status == VL53L1_ERROR_NONE)
 8002154:	2800      	cmp	r0, #0
 8002156:	d1e1      	bne.n	800211c <VL53L1_init_and_start_range+0xec>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 8002158:	4620      	mov	r0, r4
 800215a:	f000 fce0 	bl	8002b1e <VL53L1_update_ll_driver_rd_state>
	if (status == VL53L1_ERROR_NONE)
 800215e:	2800      	cmp	r0, #0
 8002160:	d1dc      	bne.n	800211c <VL53L1_init_and_start_range+0xec>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 8002162:	4620      	mov	r0, r4
 8002164:	f000 fd4f 	bl	8002c06 <VL53L1_update_ll_driver_cfg_state>
	return status;
 8002168:	e7d8      	b.n	800211c <VL53L1_init_and_start_range+0xec>
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 800216a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
			pdynamic->system__grouped_parameter_hold = pstate->cfg_gph_id;
 800216e:	f884 31c6 	strb.w	r3, [r4, #454]	; 0x1c6
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 8002172:	f043 0101 	orr.w	r1, r3, #1
 8002176:	f884 11b4 	strb.w	r1, [r4, #436]	; 0x1b4
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 800217a:	f884 11c0 	strb.w	r1, [r4, #448]	; 0x1c0
 800217e:	e023      	b.n	80021c8 <VL53L1_init_and_start_range+0x198>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8002180:	d0b5      	beq.n	80020ee <VL53L1_init_and_start_range+0xbe>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8002182:	2a04      	cmp	r2, #4
 8002184:	d0be      	beq.n	8002104 <VL53L1_init_and_start_range+0xd4>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8002186:	2a03      	cmp	r2, #3
 8002188:	d1ce      	bne.n	8002128 <VL53L1_init_and_start_range+0xf8>
		i2c_buffer_offset_bytes =
 800218a:	f1c5 0244 	rsb	r2, r5, #68	; 0x44
		status =
 800218e:	466b      	mov	r3, sp
 8002190:	fa13 f282 	uxtah	r2, r3, r2
 8002194:	2116      	movs	r1, #22
 8002196:	f504 70c2 	add.w	r0, r4, #388	; 0x184
 800219a:	f001 f8e7 	bl	800336c <VL53L1_i2c_encode_general_config>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 800219e:	2800      	cmp	r0, #0
 80021a0:	d1bc      	bne.n	800211c <VL53L1_init_and_start_range+0xec>
		i2c_buffer_offset_bytes = \
 80021a2:	f1c5 025a 	rsb	r2, r5, #90	; 0x5a
		status =
 80021a6:	466b      	mov	r3, sp
 80021a8:	fa13 f282 	uxtah	r2, r3, r2
 80021ac:	2117      	movs	r1, #23
 80021ae:	f504 70ce 	add.w	r0, r4, #412	; 0x19c
 80021b2:	f001 f920 	bl	80033f6 <VL53L1_i2c_encode_timing_config>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 80021b6:	2800      	cmp	r0, #0
 80021b8:	d1b0      	bne.n	800211c <VL53L1_init_and_start_range+0xec>
		if ((psystem->system__mode_start &
 80021ba:	f894 31cc 	ldrb.w	r3, [r4, #460]	; 0x1cc
		i2c_buffer_offset_bytes = \
 80021be:	f1c5 0271 	rsb	r2, r5, #113	; 0x71
		if ((psystem->system__mode_start &
 80021c2:	069b      	lsls	r3, r3, #26
		i2c_buffer_offset_bytes = \
 80021c4:	b292      	uxth	r2, r2
		if ((psystem->system__mode_start &
 80021c6:	d4d0      	bmi.n	800216a <VL53L1_init_and_start_range+0x13a>
		status =
 80021c8:	446a      	add	r2, sp
 80021ca:	2112      	movs	r1, #18
 80021cc:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
 80021d0:	f001 f954 	bl	800347c <VL53L1_i2c_encode_dynamic_config>
	if (status == VL53L1_ERROR_NONE) {
 80021d4:	2800      	cmp	r0, #0
 80021d6:	d1a1      	bne.n	800211c <VL53L1_init_and_start_range+0xec>
 80021d8:	e7aa      	b.n	8002130 <VL53L1_init_and_start_range+0x100>
 80021da:	bf00      	nop
 80021dc:	00010100 	.word	0x00010100
 80021e0:	08009399 	.word	0x08009399

080021e4 <VL53L1_stop_range>:


VL53L1_Error VL53L1_stop_range(
	VL53L1_DEV Dev)
{
 80021e4:	b538      	push	{r3, r4, r5, lr}
		VL53L1DevStructGetLLDriverHandle(Dev);

	/* Merge ABORT mode with mode_start */

	pdev->sys_ctrl.system__mode_start =
		(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 80021e6:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
 80021ea:	f003 030f 	and.w	r3, r3, #15
{
 80021ee:	4604      	mov	r4, r0
		(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 80021f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
	pdev->sys_ctrl.system__mode_start =
 80021f4:	f880 31cc 	strb.w	r3, [r0, #460]	; 0x1cc
		VL53L1_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53L1_set_system_control(
 80021f8:	f500 71e4 	add.w	r1, r0, #456	; 0x1c8
 80021fc:	f001 f999 	bl	8003532 <VL53L1_set_system_control>
		Dev,
		&pdev->sys_ctrl);

	/* Abort bit is auto clear so clear register group structure to match */
	pdev->sys_ctrl.system__mode_start =
		(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK);
 8002200:	f894 31cc 	ldrb.w	r3, [r4, #460]	; 0x1cc
 8002204:	f003 030f 	and.w	r3, r3, #15
	pdev->sys_ctrl.system__mode_start =
 8002208:	f884 31cc 	strb.w	r3, [r4, #460]	; 0x1cc
	status = VL53L1_set_system_control(
 800220c:	4605      	mov	r5, r0

	/* reset zone dynamic info */
	VL53L1_init_ll_driver_state(
 800220e:	2103      	movs	r1, #3
 8002210:	4620      	mov	r0, r4
 8002212:	f000 fc71 	bl	8002af8 <VL53L1_init_ll_driver_state>
		Dev,
		VL53L1_DEVICESTATE_SW_STANDBY);

	/* reset low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 8002216:	f894 32e5 	ldrb.w	r3, [r4, #741]	; 0x2e5
 800221a:	2b01      	cmp	r3, #1
 800221c:	d102      	bne.n	8002224 <VL53L1_stop_range+0x40>
		VL53L1_low_power_auto_data_stop_range(Dev);
 800221e:	4620      	mov	r0, r4
 8002220:	f000 fe95 	bl	8002f4e <VL53L1_low_power_auto_data_stop_range>

	return status;
}
 8002224:	4628      	mov	r0, r5
 8002226:	bd38      	pop	{r3, r4, r5, pc}

08002228 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV Dev,
	VL53L1_DeviceResultsLevel device_results_level)
{
 8002228:	b530      	push	{r4, r5, lr}

	LOG_FUNCTION_START("");

	/* Determine multi byte read transaction size */

	switch (device_results_level) {
 800222a:	2901      	cmp	r1, #1
{
 800222c:	b0c1      	sub	sp, #260	; 0x104
 800222e:	4604      	mov	r4, r0
 8002230:	460d      	mov	r5, r1
	switch (device_results_level) {
 8002232:	d01a      	beq.n	800226a <VL53L1_get_measurement_results+0x42>
			(VL53L1_CORE_RESULTS_I2C_INDEX +
			 VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
			i2c_index;
		break;
	default:
		i2c_buffer_size_bytes =
 8002234:	2902      	cmp	r1, #2
 8002236:	bf0c      	ite	eq
 8002238:	2386      	moveq	r3, #134	; 0x86
 800223a:	232c      	movne	r3, #44	; 0x2c
	}

	/* Read  Result Data */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status =
 800223c:	466a      	mov	r2, sp
 800223e:	2188      	movs	r1, #136	; 0x88
 8002240:	4620      	mov	r0, r4
 8002242:	f005 ff45 	bl	80080d0 <VL53L1_ReadMulti>
				buffer,
				(uint32_t)i2c_buffer_size_bytes);

	/* Decode  I2C buffer */

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 8002246:	2d01      	cmp	r5, #1
 8002248:	d911      	bls.n	800226e <VL53L1_get_measurement_results+0x46>
 800224a:	b9c8      	cbnz	r0, 8002280 <VL53L1_get_measurement_results+0x58>
	    status == VL53L1_ERROR_NONE) {
		i2c_buffer_offset_bytes =
			VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
 800224c:	f504 722b 	add.w	r2, r4, #684	; 0x2ac
 8002250:	f10d 014e 	add.w	r1, sp, #78	; 0x4e
 8002254:	2038      	movs	r0, #56	; 0x38
 8002256:	f001 fa46 	bl	80036e6 <VL53L1_i2c_decode_debug_results>
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 800225a:	b988      	cbnz	r0, 8002280 <VL53L1_get_measurement_results+0x58>
	    status == VL53L1_ERROR_NONE) {
		i2c_buffer_offset_bytes =
			VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
 800225c:	f504 7222 	add.w	r2, r4, #648	; 0x288
 8002260:	a90b      	add	r1, sp, #44	; 0x2c
 8002262:	2021      	movs	r0, #33	; 0x21
 8002264:	f001 fa04 	bl	8003670 <VL53L1_i2c_decode_core_results>
 8002268:	e003      	b.n	8002272 <VL53L1_get_measurement_results+0x4a>
		i2c_buffer_size_bytes =
 800226a:	234d      	movs	r3, #77	; 0x4d
 800226c:	e7e6      	b.n	800223c <VL53L1_get_measurement_results+0x14>
	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 800226e:	2d00      	cmp	r5, #0
 8002270:	d1f3      	bne.n	800225a <VL53L1_get_measurement_results+0x32>
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 8002272:	b928      	cbnz	r0, 8002280 <VL53L1_get_measurement_results+0x58>
		i2c_buffer_offset_bytes = 0;
		status =
 8002274:	f504 72e7 	add.w	r2, r4, #462	; 0x1ce
 8002278:	4669      	mov	r1, sp
 800227a:	202c      	movs	r0, #44	; 0x2c
 800227c:	f001 f969 	bl	8003552 <VL53L1_i2c_decode_system_results>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8002280:	b041      	add	sp, #260	; 0x104
 8002282:	bd30      	pop	{r4, r5, pc}

08002284 <VL53L1_clear_interrupt_and_enable_next_range>:
	/* Setup GPH absorption point and config values for next measurement */

	/* Update GPH registers, clear interrupt and set measurement mode */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status = VL53L1_init_and_start_range(
 8002284:	2203      	movs	r2, #3
 8002286:	f7ff bed3 	b.w	8002030 <VL53L1_init_and_start_range>
	...

0800228c <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 800228c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count = psys->result__stream_count;
 8002290:	2500      	movs	r5, #0
 8002292:	78cf      	ldrb	r7, [r1, #3]
{
 8002294:	9001      	str	r0, [sp, #4]
	presults->stream_count = psys->result__stream_count;
 8002296:	709f      	strb	r7, [r3, #2]
 8002298:	f103 0444 	add.w	r4, r3, #68	; 0x44

	pdata = &(presults->data[0]);

	for (i = 0; i < 2; i++) {
		pdata->range_id = i;
		pdata->time_stamp = 0;
 800229c:	46ac      	mov	ip, r5

		if ((psys->result__stream_count == 0) &&
		    ((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
		     VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800229e:	f04f 0813 	mov.w	r8, #19

			pdata->actual_effective_spads =
				psys->result__dss_actual_effective_spads_sd1;
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
			pdata->avg_signal_count_rate_mcps =
 80022a2:	f64f 76ff 	movw	r6, #65535	; 0xffff
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd1;

			/* apply correction gain */
			range_mm *= gain_factor;
			range_mm += 0x0400;
			range_mm /= 0x0800;
 80022a6:	f44f 6e00 	mov.w	lr, #2048	; 0x800
 80022aa:	fa5f fa85 	uxtb.w	sl, r5
		pdata->range_id = i;
 80022ae:	f804 ac40 	strb.w	sl, [r4, #-64]
		pdata->time_stamp = 0;
 80022b2:	f844 cc3c 	str.w	ip, [r4, #-60]
 80022b6:	f891 9001 	ldrb.w	r9, [r1, #1]
		if ((psys->result__stream_count == 0) &&
 80022ba:	2f00      	cmp	r7, #0
 80022bc:	d159      	bne.n	8002372 <VL53L1_copy_sys_and_core_results_to_range_results+0xe6>
 80022be:	f009 0b1f 	and.w	fp, r9, #31
 80022c2:	f1bb 0f09 	cmp.w	fp, #9
 80022c6:	d154      	bne.n	8002372 <VL53L1_copy_sys_and_core_results_to_range_results+0xe6>
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 80022c8:	f804 8c02 	strb.w	r8, [r4, #-2]
		switch (i) {
 80022cc:	f1ba 0f01 	cmp.w	sl, #1
 80022d0:	d05c      	beq.n	800238c <VL53L1_copy_sys_and_core_results_to_range_results+0x100>
			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 80022d2:	f891 9002 	ldrb.w	r9, [r1, #2]
 80022d6:	f1b9 0f07 	cmp.w	r9, #7
 80022da:	d14f      	bne.n	800237c <VL53L1_copy_sys_and_core_results_to_range_results+0xf0>
					psys->result__mm_inner_actual_effective_spads_sd0;
 80022dc:	f8b1 9012 	ldrh.w	r9, [r1, #18]
				pdata->actual_effective_spads =
 80022e0:	f824 9c30 	strh.w	r9, [r4, #-48]
				psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
 80022e4:	f8b1 9010 	ldrh.w	r9, [r1, #16]
			pdata->peak_signal_count_rate_mcps =
 80022e8:	f824 9c14 	strh.w	r9, [r4, #-20]
				psys->result__avg_signal_count_rate_mcps_sd0;
 80022ec:	f8b1 9016 	ldrh.w	r9, [r1, #22]
			pdata->avg_signal_count_rate_mcps =
 80022f0:	f824 9c12 	strh.w	r9, [r4, #-18]
				psys->result__ambient_count_rate_mcps_sd0;
 80022f4:	f8b1 9008 	ldrh.w	r9, [r1, #8]
			pdata->ambient_count_rate_mcps =
 80022f8:	f824 9c10 	strh.w	r9, [r4, #-16]
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 80022fc:	f8b1 900a 	ldrh.w	r9, [r1, #10]
			range_mm *= gain_factor;
 8002300:	9801      	ldr	r0, [sp, #4]
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 8002302:	ea4f 1949 	mov.w	r9, r9, lsl #5
			pdata->sigma_mm = (uint16_t)tmpu32;
 8002306:	45b1      	cmp	r9, r6
 8002308:	bf28      	it	cs
 800230a:	46b1      	movcs	r9, r6
 800230c:	f824 9c08 	strh.w	r9, [r4, #-8]
				psys->result__phase_sd0;
 8002310:	f8b1 900c 	ldrh.w	r9, [r1, #12]
			pdata->median_phase =
 8002314:	f824 9c06 	strh.w	r9, [r4, #-6]
			range_mm =
 8002318:	f8b1 900e 	ldrh.w	r9, [r1, #14]
			range_mm *= gain_factor;
 800231c:	fb00 f909 	mul.w	r9, r0, r9
			pdata->ranging_total_events =
 8002320:	6850      	ldr	r0, [r2, #4]
 8002322:	f844 0c1c 	str.w	r0, [r4, #-28]
			pdata->signal_total_events =
 8002326:	6890      	ldr	r0, [r2, #8]
 8002328:	f844 0c18 	str.w	r0, [r4, #-24]
			pdata->total_periods_elapsed =
 800232c:	68d0      	ldr	r0, [r2, #12]
 800232e:	f844 0c2c 	str.w	r0, [r4, #-44]
			pdata->ambient_window_events =
 8002332:	6810      	ldr	r0, [r2, #0]
			range_mm += 0x0400;
 8002334:	f509 6980 	add.w	r9, r9, #1024	; 0x400
			range_mm /= 0x0800;
 8002338:	fb99 f9fe 	sdiv	r9, r9, lr
			pdata->median_range_mm = (int16_t)range_mm;
 800233c:	f824 9c04 	strh.w	r9, [r4, #-4]
 8002340:	3501      	adds	r5, #1
	for (i = 0; i < 2; i++) {
 8002342:	2d02      	cmp	r5, #2
				pcore->result_core__ranging_total_events_sd1;
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd1;
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd1;
			pdata->ambient_window_events =
 8002344:	f844 0c20 	str.w	r0, [r4, #-32]
 8002348:	f104 0440 	add.w	r4, r4, #64	; 0x40
	for (i = 0; i < 2; i++) {
 800234c:	d1ad      	bne.n	80022aa <VL53L1_copy_sys_and_core_results_to_range_results+0x1e>

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 800234e:	2000      	movs	r0, #0
 8002350:	70d8      	strb	r0, [r3, #3]
 8002352:	784a      	ldrb	r2, [r1, #1]
 8002354:	f002 021f 	and.w	r2, r2, #31
 8002358:	2a11      	cmp	r2, #17
 800235a:	d807      	bhi.n	800236c <VL53L1_copy_sys_and_core_results_to_range_results+0xe0>
 800235c:	2101      	movs	r1, #1
 800235e:	4c24      	ldr	r4, [pc, #144]	; (80023f0 <VL53L1_copy_sys_and_core_results_to_range_results+0x164>)
 8002360:	4091      	lsls	r1, r2
 8002362:	4221      	tst	r1, r4
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 8002364:	bf1c      	itt	ne
 8002366:	70da      	strbne	r2, [r3, #3]
					   VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 8002368:	f883 0042 	strbne.w	r0, [r3, #66]	; 0x42
		break;
	}

	LOG_FUNCTION_END(0);
}
 800236c:	b003      	add	sp, #12
 800236e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
 8002372:	f009 091f 	and.w	r9, r9, #31
			pdata->range_status =
 8002376:	f804 9c02 	strb.w	r9, [r4, #-2]
 800237a:	e7a7      	b.n	80022cc <VL53L1_copy_sys_and_core_results_to_range_results+0x40>
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 800237c:	f1b9 0f08 	cmp.w	r9, #8
					psys->result__mm_outer_actual_effective_spads_sd0;
 8002380:	bf0c      	ite	eq
 8002382:	f8b1 9014 	ldrheq.w	r9, [r1, #20]
					psys->result__dss_actual_effective_spads_sd0;
 8002386:	f8b1 9004 	ldrhne.w	r9, [r1, #4]
 800238a:	e7a9      	b.n	80022e0 <VL53L1_copy_sys_and_core_results_to_range_results+0x54>
				psys->result__dss_actual_effective_spads_sd1;
 800238c:	f8b1 9018 	ldrh.w	r9, [r1, #24]
			pdata->actual_effective_spads =
 8002390:	f824 9c30 	strh.w	r9, [r4, #-48]
				psys->result__peak_signal_count_rate_mcps_sd1;
 8002394:	f8b1 901a 	ldrh.w	r9, [r1, #26]
			pdata->peak_signal_count_rate_mcps =
 8002398:	f824 9c14 	strh.w	r9, [r4, #-20]
			pdata->avg_signal_count_rate_mcps =
 800239c:	f824 6c12 	strh.w	r6, [r4, #-18]
				psys->result__ambient_count_rate_mcps_sd1;
 80023a0:	f8b1 901c 	ldrh.w	r9, [r1, #28]
			pdata->ambient_count_rate_mcps =
 80023a4:	f824 9c10 	strh.w	r9, [r4, #-16]
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 80023a8:	f8b1 901e 	ldrh.w	r9, [r1, #30]
			range_mm *= gain_factor;
 80023ac:	9801      	ldr	r0, [sp, #4]
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 80023ae:	ea4f 1949 	mov.w	r9, r9, lsl #5
			pdata->sigma_mm = (uint16_t)tmpu32;
 80023b2:	45b1      	cmp	r9, r6
 80023b4:	bf28      	it	cs
 80023b6:	46b1      	movcs	r9, r6
 80023b8:	f824 9c08 	strh.w	r9, [r4, #-8]
				psys->result__phase_sd1;
 80023bc:	f8b1 9020 	ldrh.w	r9, [r1, #32]
			pdata->median_phase =
 80023c0:	f824 9c06 	strh.w	r9, [r4, #-6]
			range_mm =
 80023c4:	f8b1 9022 	ldrh.w	r9, [r1, #34]	; 0x22
			range_mm *= gain_factor;
 80023c8:	fb09 f900 	mul.w	r9, r9, r0
			pdata->ranging_total_events =
 80023cc:	6950      	ldr	r0, [r2, #20]
 80023ce:	f844 0c1c 	str.w	r0, [r4, #-28]
			pdata->signal_total_events =
 80023d2:	6990      	ldr	r0, [r2, #24]
 80023d4:	f844 0c18 	str.w	r0, [r4, #-24]
			pdata->total_periods_elapsed =
 80023d8:	69d0      	ldr	r0, [r2, #28]
 80023da:	f844 0c2c 	str.w	r0, [r4, #-44]
			range_mm += 0x0400;
 80023de:	f509 6980 	add.w	r9, r9, #1024	; 0x400
			pdata->ambient_window_events =
 80023e2:	6910      	ldr	r0, [r2, #16]
			range_mm /= 0x0800;
 80023e4:	fb99 f9fe 	sdiv	r9, r9, lr
			pdata->median_range_mm = (int16_t)range_mm;
 80023e8:	f824 9c04 	strh.w	r9, [r4, #-4]
 80023ec:	e7a8      	b.n	8002340 <VL53L1_copy_sys_and_core_results_to_range_results+0xb4>
 80023ee:	bf00      	nop
 80023f0:	0002200e 	.word	0x0002200e

080023f4 <VL53L1_get_device_results>:
{
 80023f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023f8:	4604      	mov	r4, r0
 80023fa:	4690      	mov	r8, r2
	VL53L1_range_results_t   *presults = &(pres->range_results);
 80023fc:	f500 763d 	add.w	r6, r0, #756	; 0x2f4
		status = VL53L1_get_measurement_results(
 8002400:	f7ff ff12 	bl	8002228 <VL53L1_get_measurement_results>
	if (status == VL53L1_ERROR_NONE)
 8002404:	4605      	mov	r5, r0
 8002406:	b940      	cbnz	r0, 800241a <VL53L1_get_device_results+0x26>
		VL53L1_copy_sys_and_core_results_to_range_results(
 8002408:	4633      	mov	r3, r6
 800240a:	f504 7222 	add.w	r2, r4, #648	; 0x288
 800240e:	f504 71e7 	add.w	r1, r4, #462	; 0x1ce
 8002412:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
 8002416:	f7ff ff39 	bl	800228c <VL53L1_copy_sys_and_core_results_to_range_results>
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 800241a:	f894 72e5 	ldrb.w	r7, [r4, #741]	; 0x2e5
 800241e:	2f01      	cmp	r7, #1
 8002420:	d112      	bne.n	8002448 <VL53L1_get_device_results+0x54>
		if ((status == VL53L1_ERROR_NONE) &&
 8002422:	b945      	cbnz	r5, 8002436 <VL53L1_get_device_results+0x42>
		    (pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8002424:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 8002428:	bb0b      	cbnz	r3, 800246e <VL53L1_get_device_results+0x7a>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 800242a:	4620      	mov	r0, r4
 800242c:	f000 fdb5 	bl	8002f9a <VL53L1_low_power_auto_setup_manual_calibration>
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 8002430:	f884 72e6 	strb.w	r7, [r4, #742]	; 0x2e6
			status = VL53L1_low_power_auto_setup_manual_calibration(
 8002434:	4605      	mov	r5, r0
		if ((pdev->low_power_auto_data.low_power_auto_range_count != 0xFF) &&
 8002436:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
 800243a:	2bff      	cmp	r3, #255	; 0xff
 800243c:	d004      	beq.n	8002448 <VL53L1_get_device_results+0x54>
 800243e:	b91d      	cbnz	r5, 8002448 <VL53L1_get_device_results+0x54>
			status = VL53L1_low_power_auto_update_DSS(
 8002440:	4620      	mov	r0, r4
 8002442:	f000 fdc9 	bl	8002fd8 <VL53L1_low_power_auto_update_DSS>
 8002446:	4605      	mov	r5, r0
	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 8002448:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800244c:	f884 32f4 	strb.w	r3, [r4, #756]	; 0x2f4
	presults->rd_device_state = pdev->ll_state.rd_device_state;
 8002450:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8002454:	f884 32f5 	strb.w	r3, [r4, #757]	; 0x2f5
	memcpy(
 8002458:	2284      	movs	r2, #132	; 0x84
 800245a:	4631      	mov	r1, r6
 800245c:	4640      	mov	r0, r8
 800245e:	f006 f8af 	bl	80085c0 <memcpy>
	if (status == VL53L1_ERROR_NONE)
 8002462:	b955      	cbnz	r5, 800247a <VL53L1_get_device_results+0x86>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 8002464:	4620      	mov	r0, r4
}
 8002466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		status = VL53L1_check_ll_driver_rd_state(Dev);
 800246a:	f000 bba0 	b.w	8002bae <VL53L1_check_ll_driver_rd_state>
		} else if ((status == VL53L1_ERROR_NONE) &&
 800246e:	2b01      	cmp	r3, #1
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 8002470:	bf04      	itt	eq
 8002472:	2302      	moveq	r3, #2
 8002474:	f884 32e6 	strbeq.w	r3, [r4, #742]	; 0x2e6
 8002478:	e7dd      	b.n	8002436 <VL53L1_get_device_results+0x42>
}
 800247a:	4628      	mov	r0, r5
 800247c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002480 <VL53L1_get_tuning_parm>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 8002480:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 8002484:	2938      	cmp	r1, #56	; 0x38
 8002486:	f200 80cc 	bhi.w	8002622 <VL53L1_get_tuning_parm+0x1a2>
 800248a:	e8df f001 	tbb	[pc, r1]
 800248e:	221d      	.short	0x221d
 8002490:	2e2b2825 	.word	0x2e2b2825
 8002494:	3a373431 	.word	0x3a373431
 8002498:	4643403d 	.word	0x4643403d
 800249c:	524f4c49 	.word	0x524f4c49
 80024a0:	5e5b5855 	.word	0x5e5b5855
 80024a4:	6a676461 	.word	0x6a676461
 80024a8:	7673706d 	.word	0x7673706d
 80024ac:	827f7c79 	.word	0x827f7c79
 80024b0:	8e8b8885 	.word	0x8e8b8885
 80024b4:	9a979491 	.word	0x9a979491
 80024b8:	a6a3a09d 	.word	0xa6a3a09d
 80024bc:	b2afaca9 	.word	0xb2afaca9
 80024c0:	bebbb8b5 	.word	0xbebbb8b5
 80024c4:	c4c1      	.short	0xc4c1
 80024c6:	c7          	.byte	0xc7
 80024c7:	00          	.byte	0x00
	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 80024c8:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
		break;
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 80024cc:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 80024ce:	2000      	movs	r0, #0
		break;
 80024d0:	4770      	bx	lr
			(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 80024d2:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 80024d6:	e7f9      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 80024d8:	f8b0 30a8 	ldrh.w	r3, [r0, #168]	; 0xa8
 80024dc:	e7f6      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 80024de:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 80024e2:	e7f3      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_phasecal_target;
 80024e4:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
 80024e8:	e7f0      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 80024ea:	f8b0 30b2 	ldrh.w	r3, [r0, #178]	; 0xb2
 80024ee:	e7ed      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
			(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 80024f0:	f8b0 309c 	ldrh.w	r3, [r0, #156]	; 0x9c
 80024f4:	e7ea      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 80024f6:	f890 30b4 	ldrb.w	r3, [r0, #180]	; 0xb4
 80024fa:	e7e7      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 80024fc:	f8b0 30b6 	ldrh.w	r3, [r0, #182]	; 0xb6
 8002500:	e7e4      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8002502:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
 8002506:	e7e1      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8002508:	f8b0 30ba 	ldrh.w	r3, [r0, #186]	; 0xba
 800250c:	e7de      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps;
 800250e:	f8b0 30bc 	ldrh.w	r3, [r0, #188]	; 0xbc
 8002512:	e7db      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8002514:	f8b0 30be 	ldrh.w	r3, [r0, #190]	; 0xbe
 8002518:	e7d8      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps;
 800251a:	f8b0 30c0 	ldrh.w	r3, [r0, #192]	; 0xc0
 800251e:	e7d5      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8002520:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
 8002524:	e7d2      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 8002526:	f890 30c3 	ldrb.w	r3, [r0, #195]	; 0xc3
 800252a:	e7cf      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 800252c:	f890 30c4 	ldrb.w	r3, [r0, #196]	; 0xc4
 8002530:	e7cc      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
			(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 8002532:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8002536:	e7c9      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_seed_cfg;
 8002538:	f890 30c5 	ldrb.w	r3, [r0, #197]	; 0xc5
 800253c:	e7c6      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 800253e:	f890 30c7 	ldrb.w	r3, [r0, #199]	; 0xc7
 8002542:	e7c3      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8002544:	f890 30c8 	ldrb.w	r3, [r0, #200]	; 0xc8
 8002548:	e7c0      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
			(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 800254a:	f9b0 313e 	ldrsh.w	r3, [r0, #318]	; 0x13e
 800254e:	e7bd      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8002550:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
 8002554:	e7ba      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8002556:	f890 30ab 	ldrb.w	r3, [r0, #171]	; 0xab
 800255a:	e7b7      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 800255c:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 8002560:	e7b4      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8002562:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
 8002566:	e7b1      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 8002568:	f890 30ae 	ldrb.w	r3, [r0, #174]	; 0xae
 800256c:	e7ae      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 800256e:	f890 30af 	ldrb.w	r3, [r0, #175]	; 0xaf
 8002572:	e7ab      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8002574:	f890 30c6 	ldrb.w	r3, [r0, #198]	; 0xc6
 8002578:	e7a8      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
			(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800257a:	f890 3160 	ldrb.w	r3, [r0, #352]	; 0x160
 800257e:	e7a5      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
			(int32_t)pdev->refspadchar.device_test_mode;
 8002580:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
 8002584:	e7a2      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
			(int32_t)pdev->refspadchar.vcsel_period;
 8002586:	f890 3111 	ldrb.w	r3, [r0, #273]	; 0x111
 800258a:	e79f      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
 800258c:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8002590:	e79c      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
			(int32_t)pdev->refspadchar.timeout_us;
		break;
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
			(int32_t)pdev->refspadchar.target_count_rate_mcps;
 8002592:	f8b0 3118 	ldrh.w	r3, [r0, #280]	; 0x118
 8002596:	e799      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
			(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8002598:	f8b0 311a 	ldrh.w	r3, [r0, #282]	; 0x11a
 800259c:	e796      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
			(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 800259e:	f8b0 311c 	ldrh.w	r3, [r0, #284]	; 0x11c
 80025a2:	e793      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;;
 80025a4:	f8b0 3144 	ldrh.w	r3, [r0, #324]	; 0x144
 80025a8:	e790      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
 80025aa:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
 80025ae:	e78d      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
			(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
		break;
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
 80025b0:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
 80025b4:	e78a      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
			(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
		break;
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
 80025b6:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80025ba:	e787      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
			(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
		break;
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 80025bc:	f890 3154 	ldrb.w	r3, [r0, #340]	; 0x154
 80025c0:	e784      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 80025c2:	f890 3155 	ldrb.w	r3, [r0, #341]	; 0x155
 80025c6:	e781      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 80025c8:	f890 3156 	ldrb.w	r3, [r0, #342]	; 0x156
 80025cc:	e77e      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
			(int32_t)pdev->ssc_cfg.vcsel_period;
 80025ce:	f890 3121 	ldrb.w	r3, [r0, #289]	; 0x121
 80025d2:	e77b      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
			(int32_t)pdev->ssc_cfg.vcsel_start;
 80025d4:	f890 3122 	ldrb.w	r3, [r0, #290]	; 0x122
 80025d8:	e778      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
			(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 80025da:	f8b0 3128 	ldrh.w	r3, [r0, #296]	; 0x128
 80025de:	e775      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 80025e0:	f8b0 30ca 	ldrh.w	r3, [r0, #202]	; 0xca
 80025e4:	e772      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 80025e6:	f8b0 30cc 	ldrh.w	r3, [r0, #204]	; 0xcc
 80025ea:	e76f      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 80025ec:	f8d0 30d0 	ldr.w	r3, [r0, #208]	; 0xd0
 80025f0:	e76c      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
			(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
		break;
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 80025f2:	f8d0 30d4 	ldr.w	r3, [r0, #212]	; 0xd4
 80025f6:	e769      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
			(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
		break;
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 80025f8:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 80025fc:	e766      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
			(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
		break;
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 80025fe:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 8002602:	e763      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
			(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
		break;
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8002604:	f8d0 30e4 	ldr.w	r3, [r0, #228]	; 0xe4
 8002608:	e760      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
			(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
		break;
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 800260a:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
 800260e:	e75d      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
			(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
		break;
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
			(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 8002610:	f890 32e4 	ldrb.w	r3, [r0, #740]	; 0x2e4
 8002614:	e75a      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8002616:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 800261a:	e757      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
			(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
		break;
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 800261c:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8002620:	e754      	b.n	80024cc <VL53L1_get_tuning_parm+0x4c>
			(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
		break;


	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 8002622:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8002626:	6013      	str	r3, [r2, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 8002628:	f06f 0003 	mvn.w	r0, #3
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800262c:	4770      	bx	lr

0800262e <VL53L1_init_refspadchar_config_struct>:
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 800262e:	2308      	movs	r3, #8
 8002630:	7003      	strb	r3, [r0, #0]
		VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period =
 8002632:	230b      	movs	r3, #11
 8002634:	7043      	strb	r3, [r0, #1]
		VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us =
 8002636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800263a:	6043      	str	r3, [r0, #4]
		VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps =
 800263c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002640:	8103      	strh	r3, [r0, #8]
		VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 8002642:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8002646:	8143      	strh	r3, [r0, #10]
		VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 8002648:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800264c:	8183      	strh	r3, [r0, #12]
		VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 800264e:	2000      	movs	r0, #0
 8002650:	4770      	bx	lr

08002652 <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 8002652:	4603      	mov	r3, r0
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 8002654:	2212      	movs	r2, #18
 8002656:	705a      	strb	r2, [r3, #1]
		VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start =
 8002658:	220f      	movs	r2, #15
 800265a:	709a      	strb	r2, [r3, #2]
		VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width = 0x02;
 800265c:	2202      	movs	r2, #2
 800265e:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us = 36000;
 8002660:	f648 42a0 	movw	r2, #36000	; 0x8ca0
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 8002664:	2000      	movs	r0, #0
	pdata->timeout_us = 36000;
 8002666:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 8002668:	220c      	movs	r2, #12
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 800266a:	7018      	strb	r0, [r3, #0]
	pdata->rate_limit_mcps =
 800266c:	811a      	strh	r2, [r3, #8]
		VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 800266e:	4770      	bx	lr

08002670 <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 8002670:	4603      	mov	r3, r0
 8002672:	b510      	push	{r4, lr}
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8002674:	8940      	ldrh	r0, [r0, #10]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 8002676:	6008      	str	r0, [r1, #0]
{
 8002678:	460c      	mov	r4, r1
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800267a:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800267e:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8002682:	80a1      	strh	r1, [r4, #4]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;

	pdata->lite_mode_crosstalk_margin_kcps =
 8002684:	2300      	movs	r3, #0
 8002686:	8263      	strh	r3, [r4, #18]
		VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 8002688:	2340      	movs	r3, #64	; 0x40
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800268a:	80e2      	strh	r2, [r4, #6]
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps =
 800268c:	60a0      	str	r0, [r4, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps =
 800268e:	81a1      	strh	r1, [r4, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps =
 8002690:	81e2      	strh	r2, [r4, #14]
	pdata->crosstalk_range_ignore_threshold_mult =
 8002692:	7523      	strb	r3, [r4, #20]
		VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 8002694:	b958      	cbnz	r0, 80026ae <VL53L1_init_xtalk_config_struct+0x3e>
	    && (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
	    && (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 8002696:	6863      	ldr	r3, [r4, #4]
 8002698:	b94b      	cbnz	r3, 80026ae <VL53L1_init_xtalk_config_struct+0x3e>
		pdata->global_crosstalk_compensation_enable = 0x00;
 800269a:	7420      	strb	r0, [r4, #16]
	else
		pdata->global_crosstalk_compensation_enable = 0x01;


	if ((status == VL53L1_ERROR_NONE) &&
 800269c:	7c23      	ldrb	r3, [r4, #16]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d108      	bne.n	80026b4 <VL53L1_init_xtalk_config_struct+0x44>
	    (pdata->global_crosstalk_compensation_enable == 0x01)) {
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 80026a2:	2340      	movs	r3, #64	; 0x40
 80026a4:	f000 fb93 	bl	8002dce <VL53L1_calc_range_ignore_threshold>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 80026a8:	82e0      	strh	r0, [r4, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80026aa:	2000      	movs	r0, #0
 80026ac:	bd10      	pop	{r4, pc}
		pdata->global_crosstalk_compensation_enable = 0x01;
 80026ae:	2301      	movs	r3, #1
 80026b0:	7423      	strb	r3, [r4, #16]
 80026b2:	e7f3      	b.n	800269c <VL53L1_init_xtalk_config_struct+0x2c>
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	82e3      	strh	r3, [r4, #22]
 80026b8:	e7f7      	b.n	80026aa <VL53L1_init_xtalk_config_struct+0x3a>

080026ba <VL53L1_init_offset_cal_config_struct>:

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps =
 80026ba:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80026be:	8003      	strh	r3, [r0, #0]
		VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us =
 80026c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026c4:	6043      	str	r3, [r0, #4]
		VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us =
 80026c6:	f243 23c8 	movw	r3, #13000	; 0x32c8
 80026ca:	6083      	str	r3, [r0, #8]
		VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us =
 80026cc:	60c3      	str	r3, [r0, #12]
		VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples =
 80026ce:	2308      	movs	r3, #8
 80026d0:	7403      	strb	r3, [r0, #16]
		VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples =
 80026d2:	2328      	movs	r3, #40	; 0x28
 80026d4:	7443      	strb	r3, [r0, #17]
		VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples =
 80026d6:	2309      	movs	r3, #9
 80026d8:	7483      	strb	r3, [r0, #18]
		VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 80026da:	2000      	movs	r0, #0
 80026dc:	4770      	bx	lr

080026de <VL53L1_init_tuning_parm_storage_struct>:
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version =
 80026de:	f248 0203 	movw	r2, #32771	; 0x8003
 80026e2:	8002      	strh	r2, [r0, #0]
		VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version =
 80026e4:	f248 0201 	movw	r2, #32769	; 0x8001
{
 80026e8:	4603      	mov	r3, r0
	pdata->tp_tuning_parm_key_table_version =
 80026ea:	8042      	strh	r2, [r0, #2]
		VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version =
 80026ec:	f248 0241 	movw	r2, #32833	; 0x8041
 80026f0:	8082      	strh	r2, [r0, #4]
		VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long =
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med =
 80026f2:	210a      	movs	r1, #10
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short =
 80026f4:	2206      	movs	r2, #6
	pdata->tp_init_phase_rtn_lite_med =
 80026f6:	71d9      	strb	r1, [r3, #7]
	pdata->tp_init_phase_rtn_lite_short =
 80026f8:	721a      	strb	r2, [r3, #8]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long =
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med =
 80026fa:	7299      	strb	r1, [r3, #10]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short =
 80026fc:	72da      	strb	r2, [r3, #11]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 80026fe:	2102      	movs	r1, #2
		VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target =
 8002700:	2221      	movs	r2, #33	; 0x21
	pdata->tp_consistency_lite_phase_tolerance =
 8002702:	7319      	strb	r1, [r3, #12]
	pdata->tp_phasecal_target =
 8002704:	735a      	strb	r2, [r3, #13]
		VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns =
		VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm =
		VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg =
 8002706:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
	pdata->tp_lite_long_sigma_thresh_mm =
 800270a:	f44f 72b4 	mov.w	r2, #360	; 0x168
		VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg =
		VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier =
 800270e:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
		VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps =
 8002712:	f44f 6120 	mov.w	r1, #2560	; 0xa00
	pdata->tp_lite_long_sigma_thresh_mm =
 8002716:	825a      	strh	r2, [r3, #18]
	pdata->tp_lite_med_sigma_thresh_mm =
 8002718:	829a      	strh	r2, [r3, #20]
	pdata->tp_lite_short_sigma_thresh_mm =
 800271a:	82da      	strh	r2, [r3, #22]
	pdata->tp_dss_target_lite_mcps =
 800271c:	84d9      	strh	r1, [r3, #38]	; 0x26
	pdata->tp_lite_long_min_count_rate_rtn_mcps =
 800271e:	22c0      	movs	r2, #192	; 0xc0
		VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps =
 8002720:	8519      	strh	r1, [r3, #40]	; 0x28
		VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us =
 8002722:	f248 0130 	movw	r1, #32816	; 0x8030
	pdata->tp_lite_long_min_count_rate_rtn_mcps =
 8002726:	831a      	strh	r2, [r3, #24]
	pdata->tp_lite_med_min_count_rate_rtn_mcps =
 8002728:	835a      	strh	r2, [r3, #26]
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 800272a:	839a      	strh	r2, [r3, #28]
	pdata->tp_phasecal_timeout_lite_us =
 800272c:	62d9      	str	r1, [r3, #44]	; 0x2c
	pdata->tp_lite_sigma_est_pulse_width_ns =
 800272e:	2208      	movs	r2, #8
		VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us =
 8002730:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	pdata->tp_init_phase_rtn_lite_long =
 8002734:	200e      	movs	r0, #14
	pdata->tp_lite_sigma_est_pulse_width_ns =
 8002736:	779a      	strb	r2, [r3, #30]
	pdata->tp_phasecal_timeout_timed_us =
 8002738:	6319      	str	r1, [r3, #48]	; 0x30
	pdata->tp_lite_sigma_est_amb_width_ns =
 800273a:	2210      	movs	r2, #16
		VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us =
 800273c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
	pdata->tp_init_phase_rtn_lite_long =
 8002740:	7198      	strb	r0, [r3, #6]
	pdata->tp_init_phase_ref_lite_long =
 8002742:	7258      	strb	r0, [r3, #9]
	pdata->tp_lite_sigma_est_amb_width_ns =
 8002744:	77da      	strb	r2, [r3, #31]
	pdata->tp_cal_repeat_rate =
 8002746:	2000      	movs	r0, #0
	pdata->tp_lite_sigma_ref_mm =
 8002748:	2201      	movs	r2, #1
	pdata->tp_mm_timeout_lite_us =
 800274a:	6359      	str	r1, [r3, #52]	; 0x34
		VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us =
 800274c:	6399      	str	r1, [r3, #56]	; 0x38
		VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us =
 800274e:	f24f 6118 	movw	r1, #63000	; 0xf618
	pdata->tp_lite_sigma_ref_mm =
 8002752:	f883 2020 	strb.w	r2, [r3, #32]
	pdata->tp_timed_seed_cfg =
 8002756:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	pdata->tp_cal_repeat_rate =
 800275a:	81d8      	strh	r0, [r3, #14]
	pdata->tp_lite_min_clip =
 800275c:	7418      	strb	r0, [r3, #16]
	pdata->tp_lite_first_order_select =
 800275e:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
	pdata->tp_range_timeout_lite_us =
 8002762:	6419      	str	r1, [r3, #64]	; 0x40
		VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us =
 8002764:	f243 21c8 	movw	r1, #13000	; 0x32c8
		VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 8002768:	63da      	str	r2, [r3, #60]	; 0x3c
		VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 800276a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
	pdata->tp_range_timeout_timed_us =
 800276e:	6459      	str	r1, [r3, #68]	; 0x44
	pdata->tp_range_timeout_lpa_us =
 8002770:	649a      	str	r2, [r3, #72]	; 0x48


	LOG_FUNCTION_END(status);

	return status;
}
 8002772:	4770      	bx	lr

08002774 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8002774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002778:	4604      	mov	r4, r0
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 800277a:	f44f 6020 	mov.w	r0, #2560	; 0xa00
{
 800277e:	9d09      	ldr	r5, [sp, #36]	; 0x24
	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 8002780:	8020      	strh	r0, [r4, #0]
	 */
	pstatic->gpio_hv_mux__ctrl = \
		VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
		VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status = 0x02;
 8002782:	f04f 0e02 	mov.w	lr, #2
	pstatic->debug__ctrl = 0x00;
 8002786:	2000      	movs	r0, #0
	pstatic->gpio__fio_hv_status = 0x00;
	pstatic->ana_config__spad_sel_pswidth = 0x02;
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 8002788:	f04f 0808 	mov.w	r8, #8
	pstatic->gpio_hv_mux__ctrl = \
 800278c:	2611      	movs	r6, #17
	pstatic->debug__ctrl = 0x00;
 800278e:	70a0      	strb	r0, [r4, #2]
	pstatic->test_mode__ctrl = 0x00;
 8002790:	70e0      	strb	r0, [r4, #3]
	pstatic->clk_gating__ctrl = 0x00;
 8002792:	7120      	strb	r0, [r4, #4]
	pstatic->nvm_bist__ctrl = 0x00;
 8002794:	7160      	strb	r0, [r4, #5]
	pstatic->nvm_bist__num_nvm_words = 0x00;
 8002796:	71a0      	strb	r0, [r4, #6]
	pstatic->nvm_bist__start_address = 0x00;
 8002798:	71e0      	strb	r0, [r4, #7]
	pstatic->host_if__status = 0x00;
 800279a:	7220      	strb	r0, [r4, #8]
	pstatic->pad_i2c_hv__config = 0x00;
 800279c:	7260      	strb	r0, [r4, #9]
	pstatic->pad_i2c_hv__extsup_config = 0x00;
 800279e:	72a0      	strb	r0, [r4, #10]
	pstatic->gpio_hv_pad__ctrl = 0x00;
 80027a0:	72e0      	strb	r0, [r4, #11]
	pstatic->gpio__tio_hv_status = 0x02;
 80027a2:	f884 e00d 	strb.w	lr, [r4, #13]
	pstatic->gpio__fio_hv_status = 0x00;
 80027a6:	73a0      	strb	r0, [r4, #14]
	pstatic->ana_config__spad_sel_pswidth = 0x02;
 80027a8:	f884 e00f 	strb.w	lr, [r4, #15]
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 80027ac:	f884 8010 	strb.w	r8, [r4, #16]
	pstatic->ana_config__fast_osc__config_ctrl = 0x00;
 80027b0:	7460      	strb	r0, [r4, #17]
	pstatic->gpio_hv_mux__ctrl = \
 80027b2:	7326      	strb	r6, [r4, #12]

	pstatic->sigma_estimator__effective_pulse_width_ns =
 80027b4:	7fae      	ldrb	r6, [r5, #30]
 80027b6:	74a6      	strb	r6, [r4, #18]
		ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
	pstatic->sigma_estimator__effective_ambient_width_ns =
 80027b8:	7fee      	ldrb	r6, [r5, #31]
 80027ba:	74e6      	strb	r6, [r4, #19]
		ptuning_parms->tp_lite_sigma_est_amb_width_ns;
	pstatic->sigma_estimator__sigma_ref_mm =
 80027bc:	f895 6020 	ldrb.w	r6, [r5, #32]
 80027c0:	7526      	strb	r6, [r4, #20]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;

	pstatic->algo__range_ignore_threshold_mcps = 0x0000;

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 80027c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
	pstatic->algo__crosstalk_compensation_valid_height_mm = 0x01;
 80027c6:	2601      	movs	r6, #1
 80027c8:	7566      	strb	r6, [r4, #21]
	pstatic->spare_host_config__static_config_spare_0 = 0x00;
 80027ca:	75a0      	strb	r0, [r4, #22]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;
 80027cc:	75e0      	strb	r0, [r4, #23]
	pstatic->algo__range_ignore_threshold_mcps = 0x0000;
 80027ce:	8320      	strh	r0, [r4, #24]
	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 80027d0:	f884 c01a 	strb.w	ip, [r4, #26]
	pstatic->algo__range_min_clip =
 80027d4:	f895 9010 	ldrb.w	r9, [r5, #16]
{
 80027d8:	9f08      	ldr	r7, [sp, #32]
	pstatic->algo__range_min_clip =
 80027da:	f884 901b 	strb.w	r9, [r4, #27]
	/*
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance =
 80027de:	f895 900c 	ldrb.w	r9, [r5, #12]
 80027e2:	f884 901c 	strb.w	r9, [r4, #28]
		ptuning_parms->tp_consistency_lite_phase_tolerance;
	pstatic->spare_host_config__static_config_spare_2 = 0x00;
 80027e6:	7760      	strb	r0, [r4, #29]
	pstatic->sd_config__reset_stages_msb = 0x00;
 80027e8:	77a0      	strb	r0, [r4, #30]
	pstatic->sd_config__reset_stages_lsb = 0x00;
 80027ea:	77e0      	strb	r0, [r4, #31]

	pgeneral->gph_config__stream_count_update_value = 0x00;
	pgeneral->global_config__stream_divider = 0x00;
	pgeneral->system__interrupt_config_gpio =
 80027ec:	f04f 0920 	mov.w	r9, #32
		VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start = 0x0B;
 80027f0:	240b      	movs	r4, #11
	pgeneral->gph_config__stream_count_update_value = 0x00;
 80027f2:	7008      	strb	r0, [r1, #0]
	pgeneral->global_config__stream_divider = 0x00;
 80027f4:	7048      	strb	r0, [r1, #1]
	pgeneral->system__interrupt_config_gpio =
 80027f6:	f881 9002 	strb.w	r9, [r1, #2]
	pgeneral->cal_config__vcsel_start = 0x0B;
 80027fa:	70cc      	strb	r4, [r1, #3]
	 * Set VHV / Phase Cal repeat rate to 1 every
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate =
 80027fc:	f8b5 a00e 	ldrh.w	sl, [r5, #14]
 8002800:	f8a1 a004 	strh.w	sl, [r1, #4]
		ptuning_parms->tp_cal_repeat_rate;
	pgeneral->global_config__vcsel_width = 0x02;
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop = 0x0D;
 8002804:	f04f 0a0d 	mov.w	sl, #13
	pgeneral->global_config__vcsel_width = 0x02;
 8002808:	f881 e006 	strb.w	lr, [r1, #6]
	pgeneral->phasecal_config__timeout_macrop = 0x0D;
 800280c:	f881 a007 	strb.w	sl, [r1, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target =
 8002810:	f895 a00d 	ldrb.w	sl, [r5, #13]
 8002814:	f881 a008 	strb.w	sl, [r1, #8]
		VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high = 0x0000;
	pgeneral->system__thresh_rate_low = 0x0000;
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select = 0x8C00;
 8002818:	f44f 4a0c 	mov.w	sl, #35840	; 0x8c00
 800281c:	f8a1 a010 	strh.w	sl, [r1, #16]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation = 0x38;
 8002820:	f04f 0a38 	mov.w	sl, #56	; 0x38
	pgeneral->phasecal_config__override = 0x00;
 8002824:	7248      	strb	r0, [r1, #9]
	pgeneral->dss_config__roi_mode_control =
 8002826:	728e      	strb	r6, [r1, #10]
	pgeneral->system__thresh_rate_high = 0x0000;
 8002828:	8188      	strh	r0, [r1, #12]
	pgeneral->system__thresh_rate_low = 0x0000;
 800282a:	81c8      	strh	r0, [r1, #14]
	pgeneral->dss_config__manual_block_select = 0x00;
 800282c:	7488      	strb	r0, [r1, #18]
	pgeneral->dss_config__aperture_attenuation = 0x38;
 800282e:	f881 a013 	strb.w	sl, [r1, #19]
	pgeneral->dss_config__max_spads_limit = 0xFF;
 8002832:	f881 c014 	strb.w	ip, [r1, #20]
	pgeneral->dss_config__min_spads_limit = 0x01;
 8002836:	754e      	strb	r6, [r1, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
	ptiming->mm_config__timeout_macrop_a_lo = 0x1a;
 8002838:	211a      	movs	r1, #26
 800283a:	7051      	strb	r1, [r2, #1]
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi = 0x01;
	ptiming->range_config__timeout_macrop_a_lo = 0xCC;
 800283c:	21cc      	movs	r1, #204	; 0xcc
 800283e:	7151      	strb	r1, [r2, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a = 0x0B;
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi = 0x01;
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 8002840:	21f5      	movs	r1, #245	; 0xf5
	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8002842:	7010      	strb	r0, [r2, #0]
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8002844:	7090      	strb	r0, [r2, #2]
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;
 8002846:	f882 9003 	strb.w	r9, [r2, #3]
	ptiming->range_config__timeout_macrop_a_hi = 0x01;
 800284a:	7116      	strb	r6, [r2, #4]
	ptiming->range_config__vcsel_period_a = 0x0B;
 800284c:	7194      	strb	r4, [r2, #6]
	ptiming->range_config__timeout_macrop_b_hi = 0x01;
 800284e:	71d6      	strb	r6, [r2, #7]
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 8002850:	7211      	strb	r1, [r2, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b = 0x09;
 8002852:	2109      	movs	r1, #9
 8002854:	7251      	strb	r1, [r2, #9]
	 * Sigma thresh register - format 14.2
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh =
 8002856:	f8b5 9014 	ldrh.w	r9, [r5, #20]
 800285a:	f8a2 900a 	strh.w	r9, [r2, #10]
	/*
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800285e:	f8b5 901a 	ldrh.w	r9, [r5, #26]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low = 0x08;
 8002862:	f882 800e 	strb.w	r8, [r2, #14]
	ptiming->range_config__valid_phase_high = 0x78;
 8002866:	f04f 0878 	mov.w	r8, #120	; 0x78
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800286a:	f8a2 900c 	strh.w	r9, [r2, #12]
	ptiming->range_config__valid_phase_high = 0x78;
 800286e:	f882 800f 	strb.w	r8, [r2, #15]
	ptiming->system__intermeasurement_period = 0x00000000;
 8002872:	6110      	str	r0, [r2, #16]
	ptiming->system__fractional_enable = 0x00;
 8002874:	7510      	strb	r0, [r2, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0 = 0x01;
 8002876:	701e      	strb	r6, [r3, #0]

	pdynamic->system__thresh_high = 0x0000;
 8002878:	8058      	strh	r0, [r3, #2]
	pdynamic->system__thresh_low = 0x0000;
 800287a:	8098      	strh	r0, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant = 0x00;
 800287c:	7198      	strb	r0, [r3, #6]
	pdynamic->system__seed_config =
 800287e:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
 8002882:	71da      	strb	r2, [r3, #7]
		ptuning_parms->tp_lite_seed_cfg;

	/* Timing A */
	pdynamic->sd_config__woi_sd0 = 0x0B;
 8002884:	721c      	strb	r4, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1 = 0x09;
 8002886:	7259      	strb	r1, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0 =
 8002888:	79ea      	ldrb	r2, [r5, #7]
 800288a:	729a      	strb	r2, [r3, #10]
		ptuning_parms->tp_init_phase_rtn_lite_med;
	pdynamic->sd_config__initial_phase_sd1 =
 800288c:	7aaa      	ldrb	r2, [r5, #10]
 800288e:	72da      	strb	r2, [r3, #11]
		ptuning_parms->tp_init_phase_ref_lite_med;;

	pdynamic->system__grouped_parameter_hold_1 = 0x01;
 8002890:	731e      	strb	r6, [r3, #12]
	 *        3  -> 4095
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
 8002892:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
 8002896:	735a      	strb	r2, [r3, #13]
		ptuning_parms->tp_lite_first_order_select;
	pdynamic->sd_config__quantifier =
 8002898:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
 800289c:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad = 0xC7;
 800289e:	22c7      	movs	r2, #199	; 0xc7
 80028a0:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;


	pdynamic->system__sequence_config = \
 80028a2:	22db      	movs	r2, #219	; 0xdb
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 80028a4:	f883 c010 	strb.w	ip, [r3, #16]
	pdynamic->system__sequence_config = \
 80028a8:	745a      	strb	r2, [r3, #17]
		VL53L1_SEQUENCE_DSS1_EN | \
		VL53L1_SEQUENCE_DSS2_EN | \
		VL53L1_SEQUENCE_MM2_EN | \
		VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold = 0x02;
 80028aa:	f883 e012 	strb.w	lr, [r3, #18]
	psystem->system__stream_count_ctrl = 0x00;
	psystem->firmware__enable = 0x01;
	psystem->system__interrupt_clear = \
		VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start = \
 80028ae:	2321      	movs	r3, #33	; 0x21
	psystem->system__stream_count_ctrl = 0x00;
 80028b0:	7078      	strb	r0, [r7, #1]
	psystem->firmware__enable = 0x01;
 80028b2:	70be      	strb	r6, [r7, #2]
	psystem->system__interrupt_clear = \
 80028b4:	70fe      	strb	r6, [r7, #3]
	psystem->system__mode_start = \
 80028b6:	713b      	strb	r3, [r7, #4]
		VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
}
 80028b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080028bc <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80028bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80028be:	9d09      	ldr	r5, [sp, #36]	; 0x24

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 80028c0:	9f08      	ldr	r7, [sp, #32]
 80028c2:	9501      	str	r5, [sp, #4]
 80028c4:	9700      	str	r7, [sp, #0]
{
 80028c6:	4614      	mov	r4, r2
 80028c8:	461e      	mov	r6, r3
	status = VL53L1_preset_mode_standard_ranging(
 80028ca:	f7ff ff53 	bl	8002774 <VL53L1_preset_mode_standard_ranging>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80028ce:	b988      	cbnz	r0, 80028f4 <VL53L1_preset_mode_standard_ranging_short_range+0x38>
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a = 0x07;
		ptiming->range_config__vcsel_period_b = 0x05;
 80028d0:	2305      	movs	r3, #5
		ptiming->range_config__vcsel_period_a = 0x07;
 80028d2:	2207      	movs	r2, #7
 80028d4:	71a2      	strb	r2, [r4, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 80028d6:	7263      	strb	r3, [r4, #9]
		ptiming->range_config__sigma_thresh =
 80028d8:	8ae9      	ldrh	r1, [r5, #22]
 80028da:	8161      	strh	r1, [r4, #10]
			ptuning_parms->tp_lite_short_sigma_thresh_mm;
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 80028dc:	8ba9      	ldrh	r1, [r5, #28]
 80028de:	81a1      	strh	r1, [r4, #12]
			ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
		ptiming->range_config__valid_phase_low = 0x08;
 80028e0:	2108      	movs	r1, #8
 80028e2:	73a1      	strb	r1, [r4, #14]
		ptiming->range_config__valid_phase_high = 0x38;
 80028e4:	2138      	movs	r1, #56	; 0x38
 80028e6:	73e1      	strb	r1, [r4, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0 = 0x07;
 80028e8:	7232      	strb	r2, [r6, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 80028ea:	7273      	strb	r3, [r6, #9]
		pdynamic->sd_config__initial_phase_sd0 =
 80028ec:	7a2b      	ldrb	r3, [r5, #8]
 80028ee:	72b3      	strb	r3, [r6, #10]
			ptuning_parms->tp_init_phase_rtn_lite_short;
		pdynamic->sd_config__initial_phase_sd1 =
 80028f0:	7aeb      	ldrb	r3, [r5, #11]
 80028f2:	72f3      	strb	r3, [r6, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80028f4:	b003      	add	sp, #12
 80028f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028f8 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80028f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80028fa:	9d09      	ldr	r5, [sp, #36]	; 0x24

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 80028fc:	9f08      	ldr	r7, [sp, #32]
 80028fe:	9501      	str	r5, [sp, #4]
 8002900:	9700      	str	r7, [sp, #0]
{
 8002902:	4614      	mov	r4, r2
 8002904:	461e      	mov	r6, r3
	status = VL53L1_preset_mode_standard_ranging(
 8002906:	f7ff ff35 	bl	8002774 <VL53L1_preset_mode_standard_ranging>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800290a:	b988      	cbnz	r0, 8002930 <VL53L1_preset_mode_standard_ranging_long_range+0x38>
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a = 0x0F;
		ptiming->range_config__vcsel_period_b = 0x0D;
 800290c:	230d      	movs	r3, #13
		ptiming->range_config__vcsel_period_a = 0x0F;
 800290e:	220f      	movs	r2, #15
 8002910:	71a2      	strb	r2, [r4, #6]
		ptiming->range_config__vcsel_period_b = 0x0D;
 8002912:	7263      	strb	r3, [r4, #9]
		ptiming->range_config__sigma_thresh =
 8002914:	8a69      	ldrh	r1, [r5, #18]
 8002916:	8161      	strh	r1, [r4, #10]
			ptuning_parms->tp_lite_long_sigma_thresh_mm;
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8002918:	8b29      	ldrh	r1, [r5, #24]
 800291a:	81a1      	strh	r1, [r4, #12]
			ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
		ptiming->range_config__valid_phase_low = 0x08;
 800291c:	2108      	movs	r1, #8
 800291e:	73a1      	strb	r1, [r4, #14]
		ptiming->range_config__valid_phase_high = 0xB8;
 8002920:	21b8      	movs	r1, #184	; 0xb8
 8002922:	73e1      	strb	r1, [r4, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0 = 0x0F;
 8002924:	7232      	strb	r2, [r6, #8]
		pdynamic->sd_config__woi_sd1 = 0x0D;
 8002926:	7273      	strb	r3, [r6, #9]
		pdynamic->sd_config__initial_phase_sd0 =
 8002928:	79ab      	ldrb	r3, [r5, #6]
 800292a:	72b3      	strb	r3, [r6, #10]
			ptuning_parms->tp_init_phase_rtn_lite_long;
		pdynamic->sd_config__initial_phase_sd1 =
 800292c:	7a6b      	ldrb	r3, [r5, #9]
 800292e:	72f3      	strb	r3, [r6, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8002930:	b003      	add	sp, #12
 8002932:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002934 <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8002934:	b573      	push	{r0, r1, r4, r5, r6, lr}

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8002936:	9e07      	ldr	r6, [sp, #28]
 8002938:	9601      	str	r6, [sp, #4]
 800293a:	9e06      	ldr	r6, [sp, #24]
 800293c:	9600      	str	r6, [sp, #0]
{
 800293e:	460d      	mov	r5, r1
 8002940:	461c      	mov	r4, r3
	status = VL53L1_preset_mode_standard_ranging(
 8002942:	f7ff ff17 	bl	8002774 <VL53L1_preset_mode_standard_ranging>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8002946:	b918      	cbnz	r0, 8002950 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x1c>
		pgeneral->dss_config__roi_mode_control =
 8002948:	2302      	movs	r3, #2
 800294a:	72ab      	strb	r3, [r5, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config = \
 800294c:	233b      	movs	r3, #59	; 0x3b
 800294e:	7463      	strb	r3, [r4, #17]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8002950:	b002      	add	sp, #8
 8002952:	bd70      	pop	{r4, r5, r6, pc}

08002954 <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8002954:	b573      	push	{r0, r1, r4, r5, r6, lr}

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8002956:	9e07      	ldr	r6, [sp, #28]
 8002958:	9601      	str	r6, [sp, #4]
 800295a:	9e06      	ldr	r6, [sp, #24]
 800295c:	9600      	str	r6, [sp, #0]
{
 800295e:	460d      	mov	r5, r1
 8002960:	461c      	mov	r4, r3
	status = VL53L1_preset_mode_standard_ranging(
 8002962:	f7ff ff07 	bl	8002774 <VL53L1_preset_mode_standard_ranging>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8002966:	b918      	cbnz	r0, 8002970 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x1c>
		pgeneral->dss_config__roi_mode_control =
 8002968:	2302      	movs	r3, #2
 800296a:	72ab      	strb	r3, [r5, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config = \
 800296c:	235b      	movs	r3, #91	; 0x5b
 800296e:	7463      	strb	r3, [r4, #17]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8002970:	b002      	add	sp, #8
 8002972:	bd70      	pop	{r4, r5, r6, pc}

08002974 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8002974:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002976:	9d08      	ldr	r5, [sp, #32]
 8002978:	9f09      	ldr	r7, [sp, #36]	; 0x24

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800297a:	e88d 00a0 	stmia.w	sp, {r5, r7}
{
 800297e:	4614      	mov	r4, r2
 8002980:	461e      	mov	r6, r3
	status = VL53L1_preset_mode_standard_ranging(
 8002982:	f7ff fef7 	bl	8002774 <VL53L1_preset_mode_standard_ranging>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8002986:	b970      	cbnz	r0, 80029a6 <VL53L1_preset_mode_timed_ranging+0x32>
		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 8002988:	23b1      	movs	r3, #177	; 0xb1
		pdynamic->system__grouped_parameter_hold = 0x00;
 800298a:	74b0      	strb	r0, [r6, #18]
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 800298c:	7163      	strb	r3, [r4, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 800298e:	23d4      	movs	r3, #212	; 0xd4
 8002990:	7223      	strb	r3, [r4, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 8002992:	f44f 63c0 	mov.w	r3, #1536	; 0x600
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8002996:	7120      	strb	r0, [r4, #4]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8002998:	71e0      	strb	r0, [r4, #7]
		ptiming->system__intermeasurement_period = 0x00000600;
 800299a:	6123      	str	r3, [r4, #16]
		pdynamic->system__seed_config =
 800299c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80029a0:	71f3      	strb	r3, [r6, #7]
			ptuning_parms->tp_timed_seed_cfg;

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 80029a2:	2340      	movs	r3, #64	; 0x40
 80029a4:	712b      	strb	r3, [r5, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80029a6:	b003      	add	sp, #12
 80029a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029aa <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80029aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80029ac:	9d08      	ldr	r5, [sp, #32]
 80029ae:	9f09      	ldr	r7, [sp, #36]	; 0x24

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 80029b0:	e88d 00a0 	stmia.w	sp, {r5, r7}
{
 80029b4:	4614      	mov	r4, r2
 80029b6:	461e      	mov	r6, r3
	status = VL53L1_preset_mode_standard_ranging_short_range(
 80029b8:	f7ff ff80 	bl	80028bc <VL53L1_preset_mode_standard_ranging_short_range>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80029bc:	b978      	cbnz	r0, 80029de <VL53L1_preset_mode_timed_ranging_short_range+0x34>


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi = 0x01;
 80029be:	2301      	movs	r3, #1
		pdynamic->system__grouped_parameter_hold = 0x00;
 80029c0:	74b0      	strb	r0, [r6, #18]
		ptiming->range_config__timeout_macrop_a_hi = 0x01;
 80029c2:	7123      	strb	r3, [r4, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x84;
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi = 0x01;
 80029c4:	71e3      	strb	r3, [r4, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xB1;
 80029c6:	23b1      	movs	r3, #177	; 0xb1
 80029c8:	7223      	strb	r3, [r4, #8]
		ptiming->range_config__timeout_macrop_a_lo = 0x84;
 80029ca:	2284      	movs	r2, #132	; 0x84

		ptiming->system__intermeasurement_period = 0x00000600;
 80029cc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
		ptiming->range_config__timeout_macrop_a_lo = 0x84;
 80029d0:	7162      	strb	r2, [r4, #5]
		ptiming->system__intermeasurement_period = 0x00000600;
 80029d2:	6123      	str	r3, [r4, #16]
		pdynamic->system__seed_config =
 80029d4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80029d8:	71f3      	strb	r3, [r6, #7]
			ptuning_parms->tp_timed_seed_cfg;

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 80029da:	2340      	movs	r3, #64	; 0x40
 80029dc:	712b      	strb	r3, [r5, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80029de:	b003      	add	sp, #12
 80029e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029e2 <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80029e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80029e4:	9d08      	ldr	r5, [sp, #32]
 80029e6:	9f09      	ldr	r7, [sp, #36]	; 0x24

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 80029e8:	e88d 00a0 	stmia.w	sp, {r5, r7}
{
 80029ec:	4614      	mov	r4, r2
 80029ee:	461e      	mov	r6, r3
	status = VL53L1_preset_mode_standard_ranging_long_range(
 80029f0:	f7ff ff82 	bl	80028f8 <VL53L1_preset_mode_standard_ranging_long_range>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80029f4:	b970      	cbnz	r0, 8002a14 <VL53L1_preset_mode_timed_ranging_long_range+0x32>

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
		ptiming->range_config__timeout_macrop_a_lo = 0x97;
 80029f6:	2397      	movs	r3, #151	; 0x97
		pdynamic->system__grouped_parameter_hold = 0x00;
 80029f8:	74b0      	strb	r0, [r6, #18]
		ptiming->range_config__timeout_macrop_a_lo = 0x97;
 80029fa:	7163      	strb	r3, [r4, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
		ptiming->range_config__timeout_macrop_b_lo = 0xB1;
 80029fc:	23b1      	movs	r3, #177	; 0xb1
 80029fe:	7223      	strb	r3, [r4, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 8002a00:	f44f 63c0 	mov.w	r3, #1536	; 0x600
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8002a04:	7120      	strb	r0, [r4, #4]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8002a06:	71e0      	strb	r0, [r4, #7]
		ptiming->system__intermeasurement_period = 0x00000600;
 8002a08:	6123      	str	r3, [r4, #16]
		pdynamic->system__seed_config =
 8002a0a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002a0e:	71f3      	strb	r3, [r6, #7]
			ptuning_parms->tp_timed_seed_cfg;

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 8002a10:	2340      	movs	r3, #64	; 0x40
 8002a12:	712b      	strb	r3, [r5, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8002a14:	b003      	add	sp, #12
 8002a16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a18 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8002a18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 8002a1a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002a1c:	9701      	str	r7, [sp, #4]
 8002a1e:	9f08      	ldr	r7, [sp, #32]
 8002a20:	9700      	str	r7, [sp, #0]
{
 8002a22:	460c      	mov	r4, r1
 8002a24:	461d      	mov	r5, r3
 8002a26:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	status = VL53L1_preset_mode_timed_ranging(
 8002a28:	f7ff ffa4 	bl	8002974 <VL53L1_preset_mode_timed_ranging>
		psystem,
		ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8002a2c:	b938      	cbnz	r0, 8002a3e <VL53L1_preset_mode_low_power_auto_ranging+0x26>
		status = VL53L1_config_low_power_auto_mode(
 8002a2e:	4632      	mov	r2, r6
 8002a30:	4629      	mov	r1, r5
 8002a32:	4620      	mov	r0, r4
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8002a34:	b003      	add	sp, #12
 8002a36:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		status = VL53L1_config_low_power_auto_mode(
 8002a3a:	f000 baa1 	b.w	8002f80 <VL53L1_config_low_power_auto_mode>
}
 8002a3e:	b003      	add	sp, #12
 8002a40:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a42 <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8002a42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 8002a44:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002a46:	9701      	str	r7, [sp, #4]
 8002a48:	9f08      	ldr	r7, [sp, #32]
 8002a4a:	9700      	str	r7, [sp, #0]
{
 8002a4c:	460c      	mov	r4, r1
 8002a4e:	461d      	mov	r5, r3
 8002a50:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	status = VL53L1_preset_mode_timed_ranging_short_range(
 8002a52:	f7ff ffaa 	bl	80029aa <VL53L1_preset_mode_timed_ranging_short_range>
		psystem,
		ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8002a56:	b938      	cbnz	r0, 8002a68 <VL53L1_preset_mode_low_power_auto_short_ranging+0x26>
		status = VL53L1_config_low_power_auto_mode(
 8002a58:	4632      	mov	r2, r6
 8002a5a:	4629      	mov	r1, r5
 8002a5c:	4620      	mov	r0, r4
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8002a5e:	b003      	add	sp, #12
 8002a60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		status = VL53L1_config_low_power_auto_mode(
 8002a64:	f000 ba8c 	b.w	8002f80 <VL53L1_config_low_power_auto_mode>
}
 8002a68:	b003      	add	sp, #12
 8002a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a6c <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8002a6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 8002a6e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002a70:	9701      	str	r7, [sp, #4]
 8002a72:	9f08      	ldr	r7, [sp, #32]
 8002a74:	9700      	str	r7, [sp, #0]
{
 8002a76:	460c      	mov	r4, r1
 8002a78:	461d      	mov	r5, r3
 8002a7a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	status = VL53L1_preset_mode_timed_ranging_long_range(
 8002a7c:	f7ff ffb1 	bl	80029e2 <VL53L1_preset_mode_timed_ranging_long_range>
		psystem,
		ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8002a80:	b938      	cbnz	r0, 8002a92 <VL53L1_preset_mode_low_power_auto_long_ranging+0x26>
		status = VL53L1_config_low_power_auto_mode(
 8002a82:	4632      	mov	r2, r6
 8002a84:	4629      	mov	r1, r5
 8002a86:	4620      	mov	r0, r4
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8002a88:	b003      	add	sp, #12
 8002a8a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		status = VL53L1_config_low_power_auto_mode(
 8002a8e:	f000 ba77 	b.w	8002f80 <VL53L1_config_low_power_auto_mode>
}
 8002a92:	b003      	add	sp, #12
 8002a94:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a96 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8002a96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a98:	9d08      	ldr	r5, [sp, #32]
 8002a9a:	9f09      	ldr	r7, [sp, #36]	; 0x24

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8002a9c:	e88d 00a0 	stmia.w	sp, {r5, r7}
{
 8002aa0:	4614      	mov	r4, r2
 8002aa2:	461e      	mov	r6, r3
	status = VL53L1_preset_mode_standard_ranging(
 8002aa4:	f7ff fe66 	bl	8002774 <VL53L1_preset_mode_standard_ranging>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8002aa8:	b958      	cbnz	r0, 8002ac2 <VL53L1_preset_mode_singleshot_ranging+0x2c>

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 8002aaa:	23b1      	movs	r3, #177	; 0xb1
		pdynamic->system__grouped_parameter_hold = 0x00;
 8002aac:	74b0      	strb	r0, [r6, #18]
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 8002aae:	7163      	strb	r3, [r4, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 8002ab0:	23d4      	movs	r3, #212	; 0xd4
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8002ab2:	7120      	strb	r0, [r4, #4]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8002ab4:	71e0      	strb	r0, [r4, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 8002ab6:	7223      	strb	r3, [r4, #8]

		pdynamic->system__seed_config =
 8002ab8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002abc:	71f3      	strb	r3, [r6, #7]
			ptuning_parms->tp_timed_seed_cfg;

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 8002abe:	2310      	movs	r3, #16
 8002ac0:	712b      	strb	r3, [r5, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8002ac2:	b003      	add	sp, #12
 8002ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ac6 <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8002ac6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002ac8:	9c06      	ldr	r4, [sp, #24]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8002aca:	9d07      	ldr	r5, [sp, #28]
 8002acc:	e88d 0030 	stmia.w	sp, {r4, r5}
 8002ad0:	f7ff fe50 	bl	8002774 <VL53L1_preset_mode_standard_ranging>
		psystem,
		ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8002ad4:	b908      	cbnz	r0, 8002ada <VL53L1_preset_mode_olt+0x14>
		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl = 0x01;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	7063      	strb	r3, [r4, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8002ada:	b003      	add	sp, #12
 8002adc:	bd30      	pop	{r4, r5, pc}

08002ade <VL53L1_init_version>:
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	pdev->version.ll_major = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
	pdev->version.ll_minor = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
	pdev->version.ll_build = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 8002aea:	230a      	movs	r3, #10
 8002aec:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 8002af0:	f44f 63e6 	mov.w	r3, #1840	; 0x730
 8002af4:	6243      	str	r3, [r0, #36]	; 0x24
 8002af6:	4770      	bx	lr

08002af8 <VL53L1_init_ll_driver_state>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);

	pstate->cfg_device_state = device_state;
	pstate->cfg_stream_count = 0;
 8002af8:	2300      	movs	r3, #0
	pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8002afa:	2202      	movs	r2, #2
	pstate->cfg_device_state = device_state;
 8002afc:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
	pstate->cfg_stream_count = 0;
 8002b00:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
	pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8002b04:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
	pstate->cfg_timing_status = 0;
 8002b08:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f

	pstate->rd_device_state = device_state;
 8002b0c:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
	pstate->rd_stream_count = 0;
 8002b10:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
	pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8002b14:	f880 2032 	strb.w	r2, [r0, #50]	; 0x32
	pstate->rd_timing_status = 0;
 8002b18:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
 8002b1c:	4770      	bx	lr

08002b1e <VL53L1_update_ll_driver_rd_state>:

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 8002b1e:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
 8002b22:	f013 03f0 	ands.w	r3, r3, #240	; 0xf0
 8002b26:	d108      	bne.n	8002b3a <VL53L1_update_ll_driver_rd_state+0x1c>
	     VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {
		pstate->rd_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 8002b28:	2203      	movs	r2, #3
 8002b2a:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
		default:

			pstate->rd_device_state =
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count = 0;
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8002b2e:	2202      	movs	r2, #2
			pstate->rd_stream_count = 0;
 8002b30:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8002b34:	f880 2032 	strb.w	r2, [r0, #50]	; 0x32
 8002b38:	e022      	b.n	8002b80 <VL53L1_update_ll_driver_rd_state+0x62>
		if (pstate->rd_stream_count == 0xFF) {
 8002b3a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8002b3e:	2bff      	cmp	r3, #255	; 0xff
			pstate->rd_stream_count = 0x80;
 8002b40:	bf0c      	ite	eq
 8002b42:	2380      	moveq	r3, #128	; 0x80
			pstate->rd_stream_count++;
 8002b44:	3301      	addne	r3, #1
 8002b46:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8002b4a:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 8002b4e:	f083 0302 	eor.w	r3, r3, #2
 8002b52:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
		switch (pstate->rd_device_state) {
 8002b56:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8002b5a:	3b03      	subs	r3, #3
 8002b5c:	2b05      	cmp	r3, #5
 8002b5e:	d821      	bhi.n	8002ba4 <VL53L1_update_ll_driver_rd_state+0x86>
 8002b60:	e8df f003 	tbb	[pc, r3]
 8002b64:	11202003 	.word	0x11202003
 8002b68:	1914      	.short	0x1914
			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 8002b6a:	f890 31c6 	ldrb.w	r3, [r0, #454]	; 0x1c6
 8002b6e:	079b      	lsls	r3, r3, #30
				pstate->rd_device_state =
 8002b70:	bf4c      	ite	mi
 8002b72:	2306      	movmi	r3, #6
				pstate->rd_device_state =
 8002b74:	2308      	movpl	r3, #8
 8002b76:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
			pstate->rd_stream_count = 0;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
			pstate->rd_timing_status = 0;
 8002b80:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33

			break;
 8002b84:	e005      	b.n	8002b92 <VL53L1_update_ll_driver_rd_state+0x74>
			pstate->rd_stream_count = 0;
 8002b86:	2300      	movs	r3, #0
 8002b88:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
			pstate->rd_device_state =
 8002b8c:	2308      	movs	r3, #8
 8002b8e:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
#endif

	LOG_FUNCTION_END(status);

	return status;
}
 8002b92:	2000      	movs	r0, #0
 8002b94:	4770      	bx	lr
			pstate->rd_timing_status ^= 0x01;
 8002b96:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 8002b9a:	f083 0301 	eor.w	r3, r3, #1
 8002b9e:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
 8002ba2:	e7f3      	b.n	8002b8c <VL53L1_update_ll_driver_rd_state+0x6e>
			pstate->rd_device_state =
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
			pstate->rd_stream_count = 0;
 8002baa:	2300      	movs	r3, #0
 8002bac:	e7bf      	b.n	8002b2e <VL53L1_update_ll_driver_rd_state+0x10>

08002bae <VL53L1_check_ll_driver_rd_state>:
	device_gph_id = (psys_results->result__interrupt_status &
			 VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 8002bae:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
 8002bb2:	f013 0320 	ands.w	r3, r3, #32
{
 8002bb6:	4602      	mov	r2, r0
	if ((pdev->sys_ctrl.system__mode_start &
 8002bb8:	d023      	beq.n	8002c02 <VL53L1_check_ll_driver_rd_state+0x54>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 8002bba:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
		psys_results->result__range_status &
 8002bbe:	f890 31cf 	ldrb.w	r3, [r0, #463]	; 0x1cf
		if (pstate->rd_device_state ==
 8002bc2:	2906      	cmp	r1, #6
 8002bc4:	d107      	bne.n	8002bd6 <VL53L1_check_ll_driver_rd_state+0x28>
		    VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {
			if (device_range_status !=
 8002bc6:	f003 031f 	and.w	r3, r3, #31
 8002bca:	2b12      	cmp	r3, #18
			    VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 8002bcc:	bf0c      	ite	eq
 8002bce:	2000      	moveq	r0, #0
 8002bd0:	f06f 0010 	mvnne.w	r0, #16
 8002bd4:	4770      	bx	lr
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 8002bd6:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8002bda:	f890 11d1 	ldrb.w	r1, [r0, #465]	; 0x1d1
 8002bde:	4299      	cmp	r1, r3
			 VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8002be0:	f892 31ce 	ldrb.w	r3, [r2, #462]	; 0x1ce

			/*
			 * Check Read state GPH ID
			 */

			if (pstate->rd_gph_id != device_gph_id) {
 8002be4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
			 VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8002be8:	ea4f 1323 	mov.w	r3, r3, asr #4
			if (pstate->rd_gph_id != device_gph_id) {
 8002bec:	f003 0302 	and.w	r3, r3, #2
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 8002bf0:	bf14      	ite	ne
 8002bf2:	f06f 0011 	mvnne.w	r0, #17
 8002bf6:	2000      	moveq	r0, #0
			if (pstate->rd_gph_id != device_gph_id) {
 8002bf8:	429a      	cmp	r2, r3
				status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 8002bfa:	bf18      	it	ne
 8002bfc:	f06f 0012 	mvnne.w	r0, #18
 8002c00:	4770      	bx	lr
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8002c02:	4618      	mov	r0, r3
	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
}
 8002c04:	4770      	bx	lr

08002c06 <VL53L1_update_ll_driver_cfg_state>:
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 8002c06:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
 8002c0a:	f013 03f0 	ands.w	r3, r3, #240	; 0xf0
 8002c0e:	d108      	bne.n	8002c22 <VL53L1_update_ll_driver_cfg_state+0x1c>
	     VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {
		pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 8002c10:	2203      	movs	r2, #3
 8002c12:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->cfg_stream_count = 0;
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8002c16:	2202      	movs	r2, #2
			pstate->cfg_stream_count = 0;
 8002c18:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8002c1c:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 8002c20:	e02a      	b.n	8002c78 <VL53L1_update_ll_driver_cfg_state+0x72>
		if (pstate->cfg_stream_count == 0xFF) {
 8002c22:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8002c26:	2bff      	cmp	r3, #255	; 0xff
			pstate->cfg_stream_count = 0x80;
 8002c28:	bf0c      	ite	eq
 8002c2a:	2380      	moveq	r3, #128	; 0x80
			pstate->cfg_stream_count++;
 8002c2c:	3301      	addne	r3, #1
 8002c2e:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8002c32:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 8002c36:	f083 0302 	eor.w	r3, r3, #2
 8002c3a:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
		switch (pstate->cfg_device_state) {
 8002c3e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8002c42:	2b03      	cmp	r3, #3
 8002c44:	d006      	beq.n	8002c54 <VL53L1_update_ll_driver_cfg_state+0x4e>
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d012      	beq.n	8002c70 <VL53L1_update_ll_driver_cfg_state+0x6a>
			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
			pstate->cfg_stream_count = 0;
 8002c50:	2300      	movs	r3, #0
 8002c52:	e7e0      	b.n	8002c16 <VL53L1_update_ll_driver_cfg_state+0x10>
			pstate->cfg_timing_status ^= 0x01;
 8002c54:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8002c58:	f083 0301 	eor.w	r3, r3, #1
 8002c5c:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
			pstate->cfg_stream_count = 1;
 8002c60:	2301      	movs	r3, #1
 8002c62:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 8002c66:	2304      	movs	r3, #4
 8002c68:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
#endif

	LOG_FUNCTION_END(status);

	return status;
}
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	4770      	bx	lr
			pstate->cfg_timing_status ^= 0x01;
 8002c70:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8002c74:	f083 0301 	eor.w	r3, r3, #1
			pstate->cfg_timing_status = 0;
 8002c78:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
			break;
 8002c7c:	e7f6      	b.n	8002c6c <VL53L1_update_ll_driver_cfg_state+0x66>

08002c7e <VL53L1_copy_rtn_good_spads_to_buffer>:
{
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer + 0) = pdata->global_config__spad_enables_rtn_0;
 8002c7e:	7c03      	ldrb	r3, [r0, #16]
 8002c80:	700b      	strb	r3, [r1, #0]
	*(pbuffer + 1) = pdata->global_config__spad_enables_rtn_1;
 8002c82:	7c43      	ldrb	r3, [r0, #17]
 8002c84:	704b      	strb	r3, [r1, #1]
	*(pbuffer + 2) = pdata->global_config__spad_enables_rtn_2;
 8002c86:	7c83      	ldrb	r3, [r0, #18]
 8002c88:	708b      	strb	r3, [r1, #2]
	*(pbuffer + 3) = pdata->global_config__spad_enables_rtn_3;
 8002c8a:	7cc3      	ldrb	r3, [r0, #19]
 8002c8c:	70cb      	strb	r3, [r1, #3]
	*(pbuffer + 4) = pdata->global_config__spad_enables_rtn_4;
 8002c8e:	7d03      	ldrb	r3, [r0, #20]
 8002c90:	710b      	strb	r3, [r1, #4]
	*(pbuffer + 5) = pdata->global_config__spad_enables_rtn_5;
 8002c92:	7d43      	ldrb	r3, [r0, #21]
 8002c94:	714b      	strb	r3, [r1, #5]
	*(pbuffer + 6) = pdata->global_config__spad_enables_rtn_6;
 8002c96:	7d83      	ldrb	r3, [r0, #22]
 8002c98:	718b      	strb	r3, [r1, #6]
	*(pbuffer + 7) = pdata->global_config__spad_enables_rtn_7;
 8002c9a:	7dc3      	ldrb	r3, [r0, #23]
 8002c9c:	71cb      	strb	r3, [r1, #7]
	*(pbuffer + 8) = pdata->global_config__spad_enables_rtn_8;
 8002c9e:	7e03      	ldrb	r3, [r0, #24]
 8002ca0:	720b      	strb	r3, [r1, #8]
	*(pbuffer + 9) = pdata->global_config__spad_enables_rtn_9;
 8002ca2:	7e43      	ldrb	r3, [r0, #25]
 8002ca4:	724b      	strb	r3, [r1, #9]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 8002ca6:	7e83      	ldrb	r3, [r0, #26]
 8002ca8:	728b      	strb	r3, [r1, #10]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 8002caa:	7ec3      	ldrb	r3, [r0, #27]
 8002cac:	72cb      	strb	r3, [r1, #11]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 8002cae:	7f03      	ldrb	r3, [r0, #28]
 8002cb0:	730b      	strb	r3, [r1, #12]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 8002cb2:	7f43      	ldrb	r3, [r0, #29]
 8002cb4:	734b      	strb	r3, [r1, #13]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 8002cb6:	7f83      	ldrb	r3, [r0, #30]
 8002cb8:	738b      	strb	r3, [r1, #14]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 8002cba:	7fc3      	ldrb	r3, [r0, #31]
 8002cbc:	73cb      	strb	r3, [r1, #15]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 8002cbe:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002cc2:	740b      	strb	r3, [r1, #16]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 8002cc4:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8002cc8:	744b      	strb	r3, [r1, #17]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 8002cca:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8002cce:	748b      	strb	r3, [r1, #18]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 8002cd0:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8002cd4:	74cb      	strb	r3, [r1, #19]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 8002cd6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8002cda:	750b      	strb	r3, [r1, #20]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 8002cdc:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8002ce0:	754b      	strb	r3, [r1, #21]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 8002ce2:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 8002ce6:	758b      	strb	r3, [r1, #22]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 8002ce8:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 8002cec:	75cb      	strb	r3, [r1, #23]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 8002cee:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8002cf2:	760b      	strb	r3, [r1, #24]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 8002cf4:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8002cf8:	764b      	strb	r3, [r1, #25]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 8002cfa:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8002cfe:	768b      	strb	r3, [r1, #26]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 8002d00:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8002d04:	76cb      	strb	r3, [r1, #27]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 8002d06:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8002d0a:	770b      	strb	r3, [r1, #28]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 8002d0c:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8002d10:	774b      	strb	r3, [r1, #29]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 8002d12:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 8002d16:	778b      	strb	r3, [r1, #30]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 8002d18:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8002d1c:	77cb      	strb	r3, [r1, #31]
 8002d1e:	4770      	bx	lr

08002d20 <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t ip_value,
	uint16_t count,
	uint8_t    *pbuffer)
{
 8002d20:	4411      	add	r1, r2
	uint16_t i = 0;
	uint16_t data = 0;

	data = ip_value;

	for (i = 0; i < count; i++) {
 8002d22:	4291      	cmp	r1, r2
 8002d24:	d100      	bne.n	8002d28 <VL53L1_i2c_encode_uint16_t+0x8>
		pbuffer[count - i - 1] = (uint8_t)(data & 0x00FF);
		data = data >> 8;
	}
}
 8002d26:	4770      	bx	lr
		pbuffer[count - i - 1] = (uint8_t)(data & 0x00FF);
 8002d28:	f801 0d01 	strb.w	r0, [r1, #-1]!
		data = data >> 8;
 8002d2c:	0a00      	lsrs	r0, r0, #8
 8002d2e:	e7f8      	b.n	8002d22 <VL53L1_i2c_encode_uint16_t+0x2>

08002d30 <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t count,
	uint8_t    *pbuffer)
{
 8002d30:	180b      	adds	r3, r1, r0
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t value = 0x00;
 8002d32:	2000      	movs	r0, #0

	while (count-- > 0) {
 8002d34:	4299      	cmp	r1, r3
 8002d36:	d100      	bne.n	8002d3a <VL53L1_i2c_decode_uint16_t+0xa>
		value = (value << 8) | (uint16_t)*pbuffer++;
	}

	return value;
}
 8002d38:	4770      	bx	lr
		value = (value << 8) | (uint16_t)*pbuffer++;
 8002d3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002d3e:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8002d42:	b280      	uxth	r0, r0
 8002d44:	e7f6      	b.n	8002d34 <VL53L1_i2c_decode_uint16_t+0x4>

08002d46 <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t ip_value,
	uint16_t count,
	uint8_t    *pbuffer)
{
 8002d46:	4411      	add	r1, r2
	uint16_t i = 0;
	int16_t data = 0;

	data = ip_value;

	for (i = 0; i < count; i++) {
 8002d48:	4291      	cmp	r1, r2
 8002d4a:	d100      	bne.n	8002d4e <VL53L1_i2c_encode_int16_t+0x8>
		pbuffer[count - i - 1] = (uint8_t)(data & 0x00FF);
		data = data >> 8;
	}
}
 8002d4c:	4770      	bx	lr
		pbuffer[count - i - 1] = (uint8_t)(data & 0x00FF);
 8002d4e:	f801 0d01 	strb.w	r0, [r1, #-1]!
		data = data >> 8;
 8002d52:	1200      	asrs	r0, r0, #8
 8002d54:	e7f8      	b.n	8002d48 <VL53L1_i2c_encode_int16_t+0x2>

08002d56 <VL53L1_i2c_decode_int16_t>:
	 */

	int16_t value = 0x00;

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 8002d56:	f991 3000 	ldrsb.w	r3, [r1]
 8002d5a:	4408      	add	r0, r1
 8002d5c:	17db      	asrs	r3, r3, #31
		value = 0xFFFF;
	}

	while (count-- > 0) {
 8002d5e:	4281      	cmp	r1, r0
 8002d60:	d101      	bne.n	8002d66 <VL53L1_i2c_decode_int16_t+0x10>
		value = (value << 8) | (int16_t)*pbuffer++;
	}

	return value;
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	4770      	bx	lr
		value = (value << 8) | (int16_t)*pbuffer++;
 8002d66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002d6a:	b25b      	sxtb	r3, r3
 8002d6c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002d70:	e7f5      	b.n	8002d5e <VL53L1_i2c_decode_int16_t+0x8>

08002d72 <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t ip_value,
	uint16_t count,
	uint8_t    *pbuffer)
{
 8002d72:	4411      	add	r1, r2
	uint16_t i = 0;
	uint32_t data = 0;

	data = ip_value;

	for (i = 0; i < count; i++) {
 8002d74:	4291      	cmp	r1, r2
 8002d76:	d100      	bne.n	8002d7a <VL53L1_i2c_encode_uint32_t+0x8>
		pbuffer[count - i - 1] = (uint8_t)(data & 0x00FF);
		data = data >> 8;
	}
}
 8002d78:	4770      	bx	lr
		pbuffer[count - i - 1] = (uint8_t)(data & 0x00FF);
 8002d7a:	f801 0d01 	strb.w	r0, [r1, #-1]!
		data = data >> 8;
 8002d7e:	0a00      	lsrs	r0, r0, #8
 8002d80:	e7f8      	b.n	8002d74 <VL53L1_i2c_encode_uint32_t+0x2>

08002d82 <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t count,
	uint8_t    *pbuffer)
{
 8002d82:	180b      	adds	r3, r1, r0
	/*
	 * Decodes a uint32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint32_t value = 0x00;
 8002d84:	2000      	movs	r0, #0

	while (count-- > 0) {
 8002d86:	4299      	cmp	r1, r3
 8002d88:	d100      	bne.n	8002d8c <VL53L1_i2c_decode_uint32_t+0xa>
		value = (value << 8) | (uint32_t)*pbuffer++;
	}

	return value;
}
 8002d8a:	4770      	bx	lr
		value = (value << 8) | (uint32_t)*pbuffer++;
 8002d8c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002d90:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8002d94:	e7f7      	b.n	8002d86 <VL53L1_i2c_decode_uint32_t+0x4>

08002d96 <VL53L1_i2c_decode_int32_t>:
	 */

	int32_t value = 0x00;

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 8002d96:	f991 3000 	ldrsb.w	r3, [r1]
 8002d9a:	4408      	add	r0, r1
 8002d9c:	17db      	asrs	r3, r3, #31
		value = 0xFFFFFFFF;
	}

	while (count-- > 0) {
 8002d9e:	4281      	cmp	r1, r0
 8002da0:	d101      	bne.n	8002da6 <VL53L1_i2c_decode_int32_t+0x10>
		value = (value << 8) | (int32_t)*pbuffer++;
	}

	return value;
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	4770      	bx	lr
		value = (value << 8) | (int32_t)*pbuffer++;
 8002da6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002daa:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002dae:	e7f6      	b.n	8002d9e <VL53L1_i2c_decode_int32_t+0x8>

08002db0 <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t fast_osc_frequency,
	uint8_t vcsel_period)
{
 8002db0:	b538      	push	{r3, r4, r5, lr}
 8002db2:	460d      	mov	r5, r1

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 8002db4:	f000 f938 	bl	8003028 <VL53L1_calc_pll_period_us>
 8002db8:	4604      	mov	r4, r0

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 8002dba:	4628      	mov	r0, r5
 8002dbc:	f000 f939 	bl	8003032 <VL53L1_decode_vcsel_period>
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 8002dc0:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8002dc4:	4363      	muls	r3, r4
		(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
		pll_period_us;
	macro_period_us = macro_period_us >> 6;
 8002dc6:	099b      	lsrs	r3, r3, #6

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 8002dc8:	4358      	muls	r0, r3
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
}
 8002dca:	0980      	lsrs	r0, r0, #6
 8002dcc:	bd38      	pop	{r3, r4, r5, pc}

08002dce <VL53L1_calc_range_ignore_threshold>:

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);

	if (x_gradient < 0) {
 8002dce:	2900      	cmp	r1, #0
		x_gradient_int = x_gradient * -1;
 8002dd0:	bfba      	itte	lt
 8002dd2:	4249      	neglt	r1, r1
 8002dd4:	b289      	uxthlt	r1, r1
 8002dd6:	2100      	movge	r1, #0
	}

	if (y_gradient < 0) {
 8002dd8:	2a00      	cmp	r2, #0
		y_gradient_int = y_gradient * -1;
 8002dda:	bfba      	itte	lt
 8002ddc:	4252      	neglt	r2, r2
 8002dde:	b292      	uxthlt	r2, r2
 8002de0:	2200      	movge	r2, #0
 8002de2:	b209      	sxth	r1, r1

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 8002de4:	fa01 f282 	sxtah	r2, r1, r2
{
 8002de8:	b510      	push	{r4, lr}

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 8002dea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 8002dee:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8002df2:	0100      	lsls	r0, r0, #4
	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 8002df4:	0152      	lsls	r2, r2, #5
	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 8002df6:	fb90 f0f4 	sdiv	r0, r0, r4
	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 8002dfa:	fb92 f2f1 	sdiv	r2, r2, r1

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 8002dfe:	4410      	add	r0, r2

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 8002e00:	4358      	muls	r0, r3

	range_ignore_thresh_int = (range_ignore_thresh_int + (1 << 4)) / (1 << 5);
 8002e02:	3010      	adds	r0, #16
 8002e04:	2320      	movs	r3, #32
 8002e06:	fb90 f0f3 	sdiv	r0, r0, r3
		    range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 8002e0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e0e:	4298      	cmp	r0, r3
 8002e10:	bfa8      	it	ge
 8002e12:	4618      	movge	r0, r3
}
 8002e14:	b280      	uxth	r0, r0
 8002e16:	bd10      	pop	{r4, pc}

08002e18 <VL53L1_calc_timeout_us>:
	uint64_t tmp = 0;

	LOG_FUNCTION_START("");

	tmp = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
	tmp += 0x00800;
 8002e18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	fbe1 2300 	umlal	r2, r3, r1, r0
	tmp = tmp >> 12;
 8002e22:	0b10      	lsrs	r0, r2, #12
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
}
 8002e24:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 8002e28:	4770      	bx	lr

08002e2a <VL53L1_encode_timeout>:

	uint16_t encoded_timeout = 0;
	uint32_t ls_byte = 0;
	uint16_t ms_byte = 0;

	if (timeout_mclks > 0) {
 8002e2a:	b150      	cbz	r0, 8002e42 <VL53L1_encode_timeout+0x18>
		ls_byte = timeout_mclks - 1;
 8002e2c:	3801      	subs	r0, #1
 8002e2e:	2300      	movs	r3, #0

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8002e30:	f030 01ff 	bics.w	r1, r0, #255	; 0xff
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	f103 0301 	add.w	r3, r3, #1
 8002e3a:	d103      	bne.n	8002e44 <VL53L1_encode_timeout+0x1a>
			ls_byte = ls_byte >> 1;
			ms_byte++;
		}

		encoded_timeout = (ms_byte << 8)
 8002e3c:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 8002e40:	b280      	uxth	r0, r0
				  + (uint16_t)(ls_byte & 0x000000FF);
	}

	return encoded_timeout;
}
 8002e42:	4770      	bx	lr
			ls_byte = ls_byte >> 1;
 8002e44:	0840      	lsrs	r0, r0, #1
 8002e46:	e7f3      	b.n	8002e30 <VL53L1_encode_timeout+0x6>

08002e48 <VL53L1_calc_encoded_timeout>:
		((timeout_us << 12) + (macro_period_us >> 1)) /
 8002e48:	0300      	lsls	r0, r0, #12
 8002e4a:	eb00 0051 	add.w	r0, r0, r1, lsr #1
	timeout_encoded =
 8002e4e:	fbb0 f0f1 	udiv	r0, r0, r1
 8002e52:	f7ff bfea 	b.w	8002e2a <VL53L1_encode_timeout>

08002e56 <VL53L1_decode_timeout>:
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;

	timeout_macro_clks = ((uint32_t)(encoded_timeout & 0x00FF)
 8002e56:	b2c3      	uxtb	r3, r0
			      << (uint32_t)((encoded_timeout & 0xFF00) >> 8)) + 1;
 8002e58:	0a00      	lsrs	r0, r0, #8
 8002e5a:	fa03 f000 	lsl.w	r0, r3, r0

	return timeout_macro_clks;
}
 8002e5e:	3001      	adds	r0, #1
 8002e60:	4770      	bx	lr

08002e62 <VL53L1_calc_decoded_timeout_us>:
{
 8002e62:	b508      	push	{r3, lr}
	timeout_mclks =
 8002e64:	f7ff fff7 	bl	8002e56 <VL53L1_decode_timeout>
	tmp += 0x00800;
 8002e68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	fbe0 2301 	umlal	r2, r3, r0, r1
	tmp = tmp >> 12;
 8002e72:	0b10      	lsrs	r0, r2, #12
}
 8002e74:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 8002e78:	bd08      	pop	{r3, pc}

08002e7a <VL53L1_calc_timeout_register_values>:
	uint32_t mm_config_timeout_us,
	uint32_t range_config_timeout_us,
	uint16_t fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 8002e7a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e7e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8002e80:	4605      	mov	r5, r0
 8002e82:	4688      	mov	r8, r1
 8002e84:	4617      	mov	r7, r2
	uint32_t timeout_mclks = 0;
	uint16_t timeout_encoded = 0;

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 8002e86:	4699      	mov	r9, r3
 8002e88:	b393      	cbz	r3, 8002ef0 <VL53L1_calc_timeout_register_values+0x76>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
 8002e8a:	79a1      	ldrb	r1, [r4, #6]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff ff8f 	bl	8002db0 <VL53L1_calc_macro_period_us>
 8002e92:	4606      	mov	r6, r0
		((timeout_us << 12) + (macro_period_us >> 1)) /
 8002e94:	0328      	lsls	r0, r5, #12
		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
			timeout_mclks = 0xFF;

		pgeneral->phasecal_config__timeout_macrop =
			(uint8_t)timeout_mclks;
 8002e96:	9b08      	ldr	r3, [sp, #32]
		((timeout_us << 12) + (macro_period_us >> 1)) /
 8002e98:	eb00 0056 	add.w	r0, r0, r6, lsr #1
	timeout_mclks =
 8002e9c:	fbb0 f0f6 	udiv	r0, r0, r6
			(uint8_t)timeout_mclks;
 8002ea0:	28ff      	cmp	r0, #255	; 0xff
 8002ea2:	bf28      	it	cs
 8002ea4:	20ff      	movcs	r0, #255	; 0xff
 8002ea6:	71d8      	strb	r0, [r3, #7]

		/*  Update MM Timing A timeout */
		timeout_encoded =
 8002ea8:	4631      	mov	r1, r6
 8002eaa:	4640      	mov	r0, r8
 8002eac:	f7ff ffcc 	bl	8002e48 <VL53L1_calc_encoded_timeout>
			VL53L1_calc_encoded_timeout(
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
			(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8002eb0:	0a03      	lsrs	r3, r0, #8
 8002eb2:	7023      	strb	r3, [r4, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
			(uint8_t)(timeout_encoded & 0x00FF);
 8002eb4:	7060      	strb	r0, [r4, #1]

		/* Update Range Timing A timeout */
		timeout_encoded =
 8002eb6:	4631      	mov	r1, r6
 8002eb8:	4638      	mov	r0, r7
 8002eba:	f7ff ffc5 	bl	8002e48 <VL53L1_calc_encoded_timeout>
			VL53L1_calc_encoded_timeout(
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
			(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8002ebe:	0a03      	lsrs	r3, r0, #8
 8002ec0:	7123      	strb	r3, [r4, #4]
		ptiming->range_config__timeout_macrop_a_lo =
			(uint8_t)(timeout_encoded & 0x00FF);
 8002ec2:	7160      	strb	r0, [r4, #5]

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
 8002ec4:	7a61      	ldrb	r1, [r4, #9]
 8002ec6:	4648      	mov	r0, r9
 8002ec8:	f7ff ff72 	bl	8002db0 <VL53L1_calc_macro_period_us>
 8002ecc:	4605      	mov	r5, r0
			VL53L1_calc_macro_period_us(
				fast_osc_frequency,
				ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
 8002ece:	4601      	mov	r1, r0
 8002ed0:	4640      	mov	r0, r8
 8002ed2:	f7ff ffb9 	bl	8002e48 <VL53L1_calc_encoded_timeout>
			VL53L1_calc_encoded_timeout(
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
			(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8002ed6:	0a03      	lsrs	r3, r0, #8
 8002ed8:	70a3      	strb	r3, [r4, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
			(uint8_t)(timeout_encoded & 0x00FF);
 8002eda:	70e0      	strb	r0, [r4, #3]

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 8002edc:	4629      	mov	r1, r5
 8002ede:	4638      	mov	r0, r7
 8002ee0:	f7ff ffb2 	bl	8002e48 <VL53L1_calc_encoded_timeout>
			range_config_timeout_us,
			macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
			(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8002ee4:	0a03      	lsrs	r3, r0, #8
		ptiming->range_config__timeout_macrop_b_lo =
			(uint8_t)(timeout_encoded & 0x00FF);
 8002ee6:	7220      	strb	r0, [r4, #8]
			(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8002ee8:	71e3      	strb	r3, [r4, #7]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8002eea:	2000      	movs	r0, #0
 8002eec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8002ef0:	f06f 000e 	mvn.w	r0, #14
	}

	LOG_FUNCTION_END(0);

	return status;
}
 8002ef4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002ef8 <VL53L1_encode_row_col>:
{
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 8002ef8:	2807      	cmp	r0, #7
		*pspad_number = 128 + (col << 3) + (15 - row);
 8002efa:	bf8b      	itete	hi
 8002efc:	ebc0 00c1 	rsbhi	r0, r0, r1, lsl #3
	} else {
		*pspad_number = ((15 - col) << 3) + row;
 8002f00:	f1c1 010f 	rsbls	r1, r1, #15
		*pspad_number = 128 + (col << 3) + (15 - row);
 8002f04:	3871      	subhi	r0, #113	; 0x71
		*pspad_number = ((15 - col) << 3) + row;
 8002f06:	eb00 00c1 	addls.w	r0, r0, r1, lsl #3
 8002f0a:	7010      	strb	r0, [r2, #0]
 8002f0c:	4770      	bx	lr

08002f0e <VL53L1_decode_zone_size>:
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 8002f0e:	0903      	lsrs	r3, r0, #4
	*pwidth = encoded_xy_size & 0x0F;
 8002f10:	f000 000f 	and.w	r0, r0, #15
	*pheight = encoded_xy_size >> 4;
 8002f14:	7013      	strb	r3, [r2, #0]
	*pwidth = encoded_xy_size & 0x0F;
 8002f16:	7008      	strb	r0, [r1, #0]
 8002f18:	4770      	bx	lr

08002f1a <VL53L1_encode_zone_size>:
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 8002f1a:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8002f1e:	7011      	strb	r1, [r2, #0]
 8002f20:	4770      	bx	lr

08002f22 <VL53L1_low_power_auto_data_init>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 8002f22:	2303      	movs	r3, #3
 8002f24:	f880 32e4 	strb.w	r3, [r0, #740]	; 0x2e4
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	f880 32e5 	strb.w	r3, [r0, #741]	; 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 8002f2e:	f880 32e6 	strb.w	r3, [r0, #742]	; 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 8002f32:	f880 32e7 	strb.w	r3, [r0, #743]	; 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 8002f36:	f880 32e8 	strb.w	r3, [r0, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 8002f3a:	f880 32e9 	strb.w	r3, [r0, #745]	; 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 8002f3e:	f880 32ea 	strb.w	r3, [r0, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 8002f42:	f8c0 32ec 	str.w	r3, [r0, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 8002f46:	f8a0 32f0 	strh.w	r3, [r0, #752]	; 0x2f0

	LOG_FUNCTION_END(status);

	return status;
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	4770      	bx	lr

08002f4e <VL53L1_low_power_auto_data_stop_range>:
	LOG_FUNCTION_START("");

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 8002f4e:	22ff      	movs	r2, #255	; 0xff
 8002f50:	f880 22e6 	strb.w	r2, [r0, #742]	; 0x2e6

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 8002f54:	2200      	movs	r2, #0
 8002f56:	f880 22ea 	strb.w	r2, [r0, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 8002f5a:	f8c0 22ec 	str.w	r2, [r0, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 8002f5e:	f8a0 22f0 	strh.w	r2, [r0, #752]	; 0x2f0

	/* restore vhv configs */
	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 8002f62:	f890 22e8 	ldrb.w	r2, [r0, #744]	; 0x2e8
{
 8002f66:	4603      	mov	r3, r0
	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 8002f68:	b10a      	cbz	r2, 8002f6e <VL53L1_low_power_auto_data_stop_range+0x20>
		pdev->stat_nvm.vhv_config__init =
 8002f6a:	f880 2163 	strb.w	r2, [r0, #355]	; 0x163
			pdev->low_power_auto_data.saved_vhv_init;
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 8002f6e:	f893 22e9 	ldrb.w	r2, [r3, #745]	; 0x2e9
 8002f72:	b10a      	cbz	r2, 8002f78 <VL53L1_low_power_auto_data_stop_range+0x2a>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8002f74:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
			pdev->low_power_auto_data.saved_vhv_timeout;

	/* remove phasecal override */
	pdev->gen_cfg.phasecal_config__override = 0x00;
 8002f78:	2000      	movs	r0, #0
 8002f7a:	f883 018d 	strb.w	r0, [r3, #397]	; 0x18d

	LOG_FUNCTION_END(status);

	return status;
}
 8002f7e:	4770      	bx	lr

08002f80 <VL53L1_config_low_power_auto_mode>:
	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 8002f80:	2301      	movs	r3, #1
 8002f82:	7053      	strb	r3, [r2, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 8002f84:	2300      	movs	r3, #0
 8002f86:	7093      	strb	r3, [r2, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 8002f88:	228b      	movs	r2, #139	; 0x8b
 8002f8a:	744a      	strb	r2, [r1, #17]
		/* VL53L1_SEQUENCE_MM1_EN | \*/
		/* VL53L1_SEQUENCE_MM2_EN | \*/
		VL53L1_SEQUENCE_RANGE_EN;

	/* Set DSS to manual/expected SPADs */
	pgeneral->dss_config__manual_effective_spads_select = 200 << 8;
 8002f8c:	f44f 4248 	mov.w	r2, #51200	; 0xc800
 8002f90:	8202      	strh	r2, [r0, #16]
	pgeneral->dss_config__roi_mode_control =
 8002f92:	2202      	movs	r2, #2
 8002f94:	7282      	strb	r2, [r0, #10]
		VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

	LOG_FUNCTION_END(status);

	return status;
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	4770      	bx	lr

08002f9a <VL53L1_low_power_auto_setup_manual_calibration>:

	LOG_FUNCTION_START("");

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 8002f9a:	f890 2163 	ldrb.w	r2, [r0, #355]	; 0x163
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8002f9e:	f890 3160 	ldrb.w	r3, [r0, #352]	; 0x160
	pdev->low_power_auto_data.saved_vhv_init =
 8002fa2:	f880 22e8 	strb.w	r2, [r0, #744]	; 0x2e8

	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 8002fa6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002faa:	f880 2163 	strb.w	r2, [r0, #355]	; 0x163
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 8002fae:	f890 22e4 	ldrb.w	r2, [r0, #740]	; 0x2e4
	pdev->low_power_auto_data.saved_vhv_timeout =
 8002fb2:	f880 32e9 	strb.w	r3, [r0, #745]	; 0x2e9
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8002fb6:	f003 0303 	and.w	r3, r3, #3
 8002fba:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8002fbe:	f880 3160 	strb.w	r3, [r0, #352]	; 0x160
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	f880 318d 	strb.w	r3, [r0, #397]	; 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 8002fc8:	f890 32ae 	ldrb.w	r3, [r0, #686]	; 0x2ae
	pdev->low_power_auto_data.first_run_phasecal_result =
 8002fcc:	f880 32ea 	strb.w	r3, [r0, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 8002fd0:	f880 3187 	strb.w	r3, [r0, #391]	; 0x187
		pdev->low_power_auto_data.first_run_phasecal_result;

	LOG_FUNCTION_END(status);

	return status;
}
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	4770      	bx	lr

08002fd8 <VL53L1_low_power_auto_update_DSS>:
	/* shift up to take advantage of 32 bits */
	/* 9.23 format */
	utemp32a = utemp32a << 16;

	/* check SPAD count */
	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 8002fd8:	f8b0 31d2 	ldrh.w	r3, [r0, #466]	; 0x1d2
 8002fdc:	b30b      	cbz	r3, 8003022 <VL53L1_low_power_auto_update_DSS+0x4a>
		   pdev->sys_results.result__ambient_count_rate_mcps_sd0;
 8002fde:	f8b0 11d6 	ldrh.w	r1, [r0, #470]	; 0x1d6
	utemp32a = pdev->sys_results.result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
 8002fe2:	f8b0 21de 	ldrh.w	r2, [r0, #478]	; 0x1de
 8002fe6:	440a      	add	r2, r1
 8002fe8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002fec:	428a      	cmp	r2, r1
 8002fee:	bfa8      	it	ge
 8002ff0:	460a      	movge	r2, r1
	utemp32a = utemp32a << 16;
 8002ff2:	0412      	lsls	r2, r2, #16
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
	else {
		/* format 17.15 */
		utemp32a = utemp32a /
 8002ff4:	fbb2 f3f3 	udiv	r3, r2, r3
			   pdev->sys_results.result__dss_actual_effective_spads_sd0;
		/* save intermediate result */
		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 8002ff8:	f8c0 32ec 	str.w	r3, [r0, #748]	; 0x2ec
		 * format 9.23 */
		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
			   16;

		/* check for divide by zero */
		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps == 0)
 8002ffc:	b18b      	cbz	r3, 8003022 <VL53L1_low_power_auto_update_DSS+0x4a>
		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 8002ffe:	f8b0 2164 	ldrh.w	r2, [r0, #356]	; 0x164
 8003002:	0412      	lsls	r2, r2, #16
			status = VL53L1_ERROR_DIVISION_BY_ZERO;
		else {
			/* divide by rate per spad
			 * format 24.8 */
			utemp32a = utemp32a /
 8003004:	fbb2 f3f3 	udiv	r3, r2, r3
			if (utemp32a > 0xFFFF)
				utemp32a = 0xFFFF;

			/* save result in low power auto data */
			pdev->low_power_auto_data.dss__required_spads =
				(uint16_t)utemp32a;
 8003008:	428b      	cmp	r3, r1
 800300a:	bf28      	it	cs
 800300c:	460b      	movcs	r3, r1
 800300e:	b29b      	uxth	r3, r3
	if (status == VL53L1_ERROR_DIVISION_BY_ZERO) {
		/* We want to gracefully set a spad target, not just exit with
		 * an error */

		/* set target to mid point */
		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 8003010:	f8a0 32f0 	strh.w	r3, [r0, #752]	; 0x2f0

		/* override DSS config */
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 8003014:	f8a0 3194 	strh.w	r3, [r0, #404]	; 0x194
			pdev->low_power_auto_data.dss__required_spads;
		pdev->gen_cfg.dss_config__roi_mode_control =
 8003018:	2302      	movs	r3, #2
 800301a:	f880 318e 	strb.w	r3, [r0, #398]	; 0x18e
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800301e:	2000      	movs	r0, #0
 8003020:	4770      	bx	lr
		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 8003022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003026:	e7f3      	b.n	8003010 <VL53L1_low_power_auto_update_DSS+0x38>

08003028 <VL53L1_calc_pll_period_us>:
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
}
 8003028:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800302c:	fb93 f0f0 	sdiv	r0, r3, r0
 8003030:	4770      	bx	lr

08003032 <VL53L1_decode_vcsel_period>:
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8003032:	3001      	adds	r0, #1
 8003034:	0040      	lsls	r0, r0, #1

	return vcsel_period_pclks;
}
 8003036:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 800303a:	4770      	bx	lr

0800303c <VL53L1_decode_row_col>:
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 800303c:	0603      	lsls	r3, r0, #24
		*prow = 8 + ((255 - spad_number) & 0x07);
 800303e:	bf49      	itett	mi
 8003040:	43c3      	mvnmi	r3, r0
		*pcol = (spad_number - 128) >> 3;
	} else {
		*prow = spad_number & 0x07;
 8003042:	f000 0307 	andpl.w	r3, r0, #7
		*prow = 8 + ((255 - spad_number) & 0x07);
 8003046:	f003 0307 	andmi.w	r3, r3, #7
		*pcol = (spad_number - 128) >> 3;
 800304a:	3880      	submi	r0, #128	; 0x80
		*pcol = (127 - spad_number) >> 3;
 800304c:	bf54      	ite	pl
 800304e:	f1c0 007f 	rsbpl	r0, r0, #127	; 0x7f
		*prow = 8 + ((255 - spad_number) & 0x07);
 8003052:	3308      	addmi	r3, #8
		*pcol = (127 - spad_number) >> 3;
 8003054:	ea4f 00e0 	mov.w	r0, r0, asr #3
		*prow = 8 + ((255 - spad_number) & 0x07);
 8003058:	bf4c      	ite	mi
 800305a:	700b      	strbmi	r3, [r1, #0]
		*prow = spad_number & 0x07;
 800305c:	700b      	strbpl	r3, [r1, #0]
		*pcol = (127 - spad_number) >> 3;
 800305e:	7010      	strb	r0, [r2, #0]
 8003060:	4770      	bx	lr

08003062 <VL53L1_i2c_encode_static_nvm_managed>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8003062:	290a      	cmp	r1, #10
{
 8003064:	b538      	push	{r3, r4, r5, lr}
 8003066:	4605      	mov	r5, r0
 8003068:	4614      	mov	r4, r2
	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800306a:	d924      	bls.n	80030b6 <VL53L1_i2c_encode_static_nvm_managed+0x54>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer + 0) =
		pdata->i2c_slave__device_address & 0x7F;
 800306c:	7803      	ldrb	r3, [r0, #0]
 800306e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer + 0) =
 8003072:	7013      	strb	r3, [r2, #0]
	*(pbuffer + 1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8003074:	7843      	ldrb	r3, [r0, #1]
 8003076:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer + 1) =
 800307a:	7053      	strb	r3, [r2, #1]
	*(pbuffer + 2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800307c:	7883      	ldrb	r3, [r0, #2]
 800307e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer + 2) =
 8003082:	7093      	strb	r3, [r2, #2]
	*(pbuffer + 3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8003084:	78c3      	ldrb	r3, [r0, #3]
 8003086:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer + 3) =
 800308a:	70d3      	strb	r3, [r2, #3]
	*(pbuffer + 4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 800308c:	7903      	ldrb	r3, [r0, #4]
 800308e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer + 4) =
 8003092:	7113      	strb	r3, [r2, #4]
	VL53L1_i2c_encode_uint16_t(
 8003094:	2102      	movs	r1, #2
 8003096:	3205      	adds	r2, #5
 8003098:	88c0      	ldrh	r0, [r0, #6]
 800309a:	f7ff fe41 	bl	8002d20 <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer + 5);
	*(pbuffer + 7) =
		pdata->vhv_config__timeout_macrop_loop_bound;
 800309e:	7a2b      	ldrb	r3, [r5, #8]
	*(pbuffer + 7) =
 80030a0:	71e3      	strb	r3, [r4, #7]
	*(pbuffer + 8) =
		pdata->vhv_config__count_thresh;
 80030a2:	7a6b      	ldrb	r3, [r5, #9]
	*(pbuffer + 8) =
 80030a4:	7223      	strb	r3, [r4, #8]
	*(pbuffer + 9) =
		pdata->vhv_config__offset & 0x3F;
 80030a6:	7aab      	ldrb	r3, [r5, #10]
 80030a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer + 9) =
 80030ac:	7263      	strb	r3, [r4, #9]
	*(pbuffer + 10) =
		pdata->vhv_config__init;
 80030ae:	7aeb      	ldrb	r3, [r5, #11]
	*(pbuffer + 10) =
 80030b0:	72a3      	strb	r3, [r4, #10]
	LOG_FUNCTION_END(status);


	return status;
 80030b2:	2000      	movs	r0, #0
 80030b4:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80030b6:	f06f 0009 	mvn.w	r0, #9
}
 80030ba:	bd38      	pop	{r3, r4, r5, pc}

080030bc <VL53L1_i2c_decode_static_nvm_managed>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 80030bc:	280a      	cmp	r0, #10
{
 80030be:	b538      	push	{r3, r4, r5, lr}
 80030c0:	460d      	mov	r5, r1
 80030c2:	4614      	mov	r4, r2
	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 80030c4:	d924      	bls.n	8003110 <VL53L1_i2c_decode_static_nvm_managed+0x54>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->i2c_slave__device_address =
		(*(pbuffer + 0)) & 0x7F;
 80030c6:	780b      	ldrb	r3, [r1, #0]
 80030c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->i2c_slave__device_address =
 80030cc:	7013      	strb	r3, [r2, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer + 1)) & 0xF;
 80030ce:	784b      	ldrb	r3, [r1, #1]
 80030d0:	f003 030f 	and.w	r3, r3, #15
	pdata->ana_config__vhv_ref_sel_vddpix =
 80030d4:	7053      	strb	r3, [r2, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer + 2)) & 0x7F;
 80030d6:	788b      	ldrb	r3, [r1, #2]
 80030d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->ana_config__vhv_ref_sel_vquench =
 80030dc:	7093      	strb	r3, [r2, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer + 3)) & 0x3;
 80030de:	78cb      	ldrb	r3, [r1, #3]
 80030e0:	f003 0303 	and.w	r3, r3, #3
	pdata->ana_config__reg_avdd1v2_sel =
 80030e4:	70d3      	strb	r3, [r2, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer + 4)) & 0x7F;
 80030e6:	790b      	ldrb	r3, [r1, #4]
 80030e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->ana_config__fast_osc__trim =
 80030ec:	7113      	strb	r3, [r2, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 5));
 80030ee:	3105      	adds	r1, #5
 80030f0:	2002      	movs	r0, #2
 80030f2:	f7ff fe1d 	bl	8002d30 <VL53L1_i2c_decode_uint16_t>
	pdata->osc_measured__fast_osc__frequency =
 80030f6:	80e0      	strh	r0, [r4, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 80030f8:	79eb      	ldrb	r3, [r5, #7]
 80030fa:	7223      	strb	r3, [r4, #8]
		(*(pbuffer + 7));
	pdata->vhv_config__count_thresh =
 80030fc:	7a2b      	ldrb	r3, [r5, #8]
 80030fe:	7263      	strb	r3, [r4, #9]
		(*(pbuffer + 8));
	pdata->vhv_config__offset =
		(*(pbuffer + 9)) & 0x3F;
 8003100:	7a6b      	ldrb	r3, [r5, #9]
 8003102:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->vhv_config__offset =
 8003106:	72a3      	strb	r3, [r4, #10]
	pdata->vhv_config__init =
 8003108:	7aab      	ldrb	r3, [r5, #10]
 800310a:	72e3      	strb	r3, [r4, #11]
		(*(pbuffer + 10));

	LOG_FUNCTION_END(status);

	return status;
 800310c:	2000      	movs	r0, #0
 800310e:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8003110:	f06f 0009 	mvn.w	r0, #9
}
 8003114:	bd38      	pop	{r3, r4, r5, pc}

08003116 <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 8003116:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003118:	460c      	mov	r4, r1
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status = VL53L1_ReadMulti(
 800311a:	230b      	movs	r3, #11
 800311c:	aa01      	add	r2, sp, #4
 800311e:	2101      	movs	r1, #1
 8003120:	f004 ffd6 	bl	80080d0 <VL53L1_ReadMulti>
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8003124:	b920      	cbnz	r0, 8003130 <VL53L1_get_static_nvm_managed+0x1a>
		status = VL53L1_i2c_decode_static_nvm_managed(
 8003126:	4622      	mov	r2, r4
 8003128:	a901      	add	r1, sp, #4
 800312a:	200b      	movs	r0, #11
 800312c:	f7ff ffc6 	bl	80030bc <VL53L1_i2c_decode_static_nvm_managed>
			pdata);

	LOG_FUNCTION_END(status);

	return status;
}
 8003130:	b004      	add	sp, #16
 8003132:	bd10      	pop	{r4, pc}

08003134 <VL53L1_i2c_encode_customer_nvm_managed>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8003134:	2916      	cmp	r1, #22
{
 8003136:	b538      	push	{r3, r4, r5, lr}
 8003138:	4604      	mov	r4, r0
 800313a:	4615      	mov	r5, r2
	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800313c:	d948      	bls.n	80031d0 <VL53L1_i2c_encode_customer_nvm_managed+0x9c>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer + 0) =
		pdata->global_config__spad_enables_ref_0;
 800313e:	7803      	ldrb	r3, [r0, #0]
	*(pbuffer + 0) =
 8003140:	7013      	strb	r3, [r2, #0]
	*(pbuffer + 1) =
		pdata->global_config__spad_enables_ref_1;
 8003142:	7843      	ldrb	r3, [r0, #1]
	*(pbuffer + 1) =
 8003144:	7053      	strb	r3, [r2, #1]
	*(pbuffer + 2) =
		pdata->global_config__spad_enables_ref_2;
 8003146:	7883      	ldrb	r3, [r0, #2]
	*(pbuffer + 2) =
 8003148:	7093      	strb	r3, [r2, #2]
	*(pbuffer + 3) =
		pdata->global_config__spad_enables_ref_3;
 800314a:	78c3      	ldrb	r3, [r0, #3]
	*(pbuffer + 3) =
 800314c:	70d3      	strb	r3, [r2, #3]
	*(pbuffer + 4) =
		pdata->global_config__spad_enables_ref_4;
 800314e:	7903      	ldrb	r3, [r0, #4]
	*(pbuffer + 4) =
 8003150:	7113      	strb	r3, [r2, #4]
	*(pbuffer + 5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8003152:	7943      	ldrb	r3, [r0, #5]
 8003154:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer + 5) =
 8003158:	7153      	strb	r3, [r2, #5]
	*(pbuffer + 6) =
		pdata->global_config__ref_en_start_select;
 800315a:	7983      	ldrb	r3, [r0, #6]
	*(pbuffer + 6) =
 800315c:	7193      	strb	r3, [r2, #6]
	*(pbuffer + 7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800315e:	79c3      	ldrb	r3, [r0, #7]
 8003160:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer + 7) =
 8003164:	71d3      	strb	r3, [r2, #7]
	*(pbuffer + 8) =
		pdata->ref_spad_man__ref_location & 0x3;
 8003166:	7a03      	ldrb	r3, [r0, #8]
 8003168:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer + 8) =
 800316c:	7213      	strb	r3, [r2, #8]
	VL53L1_i2c_encode_uint16_t(
 800316e:	2102      	movs	r1, #2
 8003170:	3209      	adds	r2, #9
 8003172:	8940      	ldrh	r0, [r0, #10]
 8003174:	f7ff fdd4 	bl	8002d20 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer + 9);
	VL53L1_i2c_encode_int16_t(
 8003178:	f105 020b 	add.w	r2, r5, #11
 800317c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8003180:	2102      	movs	r1, #2
 8003182:	f7ff fde0 	bl	8002d46 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer + 11);
	VL53L1_i2c_encode_int16_t(
 8003186:	f105 020d 	add.w	r2, r5, #13
 800318a:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 800318e:	2102      	movs	r1, #2
 8003190:	f7ff fdd9 	bl	8002d46 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer + 13);
	VL53L1_i2c_encode_uint16_t(
 8003194:	f105 020f 	add.w	r2, r5, #15
 8003198:	8a20      	ldrh	r0, [r4, #16]
 800319a:	2102      	movs	r1, #2
 800319c:	f7ff fdc0 	bl	8002d20 <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer + 15);
	VL53L1_i2c_encode_int16_t(
 80031a0:	8a60      	ldrh	r0, [r4, #18]
 80031a2:	f105 0211 	add.w	r2, r5, #17
 80031a6:	2102      	movs	r1, #2
 80031a8:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80031ac:	f7ff fdcb 	bl	8002d46 <VL53L1_i2c_encode_int16_t>
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
		2,
		pbuffer + 17);
	VL53L1_i2c_encode_int16_t(
 80031b0:	f105 0213 	add.w	r2, r5, #19
 80031b4:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 80031b8:	2102      	movs	r1, #2
 80031ba:	f7ff fdc4 	bl	8002d46 <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer + 19);
	VL53L1_i2c_encode_int16_t(
 80031be:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 80031c2:	f105 0215 	add.w	r2, r5, #21
 80031c6:	2102      	movs	r1, #2
 80031c8:	f7ff fdbd 	bl	8002d46 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer + 21);
	LOG_FUNCTION_END(status);


	return status;
 80031cc:	2000      	movs	r0, #0
 80031ce:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80031d0:	f06f 0009 	mvn.w	r0, #9
}
 80031d4:	bd38      	pop	{r3, r4, r5, pc}

080031d6 <VL53L1_i2c_decode_customer_nvm_managed>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 80031d6:	2816      	cmp	r0, #22
{
 80031d8:	b538      	push	{r3, r4, r5, lr}
 80031da:	460d      	mov	r5, r1
 80031dc:	4614      	mov	r4, r2
	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 80031de:	d944      	bls.n	800326a <VL53L1_i2c_decode_customer_nvm_managed+0x94>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer + 0));
 80031e0:	780b      	ldrb	r3, [r1, #0]
	pdata->global_config__spad_enables_ref_0 =
 80031e2:	7013      	strb	r3, [r2, #0]
	pdata->global_config__spad_enables_ref_1 =
 80031e4:	784b      	ldrb	r3, [r1, #1]
 80031e6:	7053      	strb	r3, [r2, #1]
		(*(pbuffer + 1));
	pdata->global_config__spad_enables_ref_2 =
 80031e8:	788b      	ldrb	r3, [r1, #2]
 80031ea:	7093      	strb	r3, [r2, #2]
		(*(pbuffer + 2));
	pdata->global_config__spad_enables_ref_3 =
 80031ec:	78cb      	ldrb	r3, [r1, #3]
 80031ee:	70d3      	strb	r3, [r2, #3]
		(*(pbuffer + 3));
	pdata->global_config__spad_enables_ref_4 =
 80031f0:	790b      	ldrb	r3, [r1, #4]
 80031f2:	7113      	strb	r3, [r2, #4]
		(*(pbuffer + 4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer + 5)) & 0xF;
 80031f4:	794b      	ldrb	r3, [r1, #5]
 80031f6:	f003 030f 	and.w	r3, r3, #15
	pdata->global_config__spad_enables_ref_5 =
 80031fa:	7153      	strb	r3, [r2, #5]
	pdata->global_config__ref_en_start_select =
 80031fc:	798b      	ldrb	r3, [r1, #6]
 80031fe:	7193      	strb	r3, [r2, #6]
		(*(pbuffer + 6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer + 7)) & 0x3F;
 8003200:	79cb      	ldrb	r3, [r1, #7]
 8003202:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->ref_spad_man__num_requested_ref_spads =
 8003206:	71d3      	strb	r3, [r2, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer + 8)) & 0x3;
 8003208:	7a0b      	ldrb	r3, [r1, #8]
 800320a:	f003 0303 	and.w	r3, r3, #3
	pdata->ref_spad_man__ref_location =
 800320e:	7213      	strb	r3, [r2, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 9));
 8003210:	3109      	adds	r1, #9
 8003212:	2002      	movs	r0, #2
 8003214:	f7ff fd8c 	bl	8002d30 <VL53L1_i2c_decode_uint16_t>
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer + 11));
 8003218:	f105 010b 	add.w	r1, r5, #11
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 800321c:	8160      	strh	r0, [r4, #10]
		(VL53L1_i2c_decode_int16_t(2, pbuffer + 11));
 800321e:	2002      	movs	r0, #2
 8003220:	f7ff fd99 	bl	8002d56 <VL53L1_i2c_decode_int16_t>
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer + 13));
 8003224:	f105 010d 	add.w	r1, r5, #13
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8003228:	81a0      	strh	r0, [r4, #12]
		(VL53L1_i2c_decode_int16_t(2, pbuffer + 13));
 800322a:	2002      	movs	r0, #2
 800322c:	f7ff fd93 	bl	8002d56 <VL53L1_i2c_decode_int16_t>
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 15));
 8003230:	f105 010f 	add.w	r1, r5, #15
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8003234:	81e0      	strh	r0, [r4, #14]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 15));
 8003236:	2002      	movs	r0, #2
 8003238:	f7ff fd7a 	bl	8002d30 <VL53L1_i2c_decode_uint16_t>
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer + 17)) & 0x1FFF;
 800323c:	f105 0111 	add.w	r1, r5, #17
	pdata->ref_spad_char__total_rate_target_mcps =
 8003240:	8220      	strh	r0, [r4, #16]
		(VL53L1_i2c_decode_int16_t(2, pbuffer + 17)) & 0x1FFF;
 8003242:	2002      	movs	r0, #2
 8003244:	f7ff fd87 	bl	8002d56 <VL53L1_i2c_decode_int16_t>
 8003248:	f3c0 000c 	ubfx	r0, r0, #0, #13
	pdata->algo__part_to_part_range_offset_mm =
 800324c:	8260      	strh	r0, [r4, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer + 19));
 800324e:	f105 0113 	add.w	r1, r5, #19
 8003252:	2002      	movs	r0, #2
 8003254:	f7ff fd7f 	bl	8002d56 <VL53L1_i2c_decode_int16_t>
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer + 21));
 8003258:	f105 0115 	add.w	r1, r5, #21
	pdata->mm_config__inner_offset_mm =
 800325c:	82a0      	strh	r0, [r4, #20]
		(VL53L1_i2c_decode_int16_t(2, pbuffer + 21));
 800325e:	2002      	movs	r0, #2
 8003260:	f7ff fd79 	bl	8002d56 <VL53L1_i2c_decode_int16_t>
	pdata->mm_config__outer_offset_mm =
 8003264:	82e0      	strh	r0, [r4, #22]

	LOG_FUNCTION_END(status);

	return status;
 8003266:	2000      	movs	r0, #0
 8003268:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800326a:	f06f 0009 	mvn.w	r0, #9
}
 800326e:	bd38      	pop	{r3, r4, r5, pc}

08003270 <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 8003270:	b510      	push	{r4, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	460c      	mov	r4, r1
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status = VL53L1_ReadMulti(
 8003276:	2317      	movs	r3, #23
 8003278:	466a      	mov	r2, sp
 800327a:	210d      	movs	r1, #13
 800327c:	f004 ff28 	bl	80080d0 <VL53L1_ReadMulti>
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8003280:	b920      	cbnz	r0, 800328c <VL53L1_get_customer_nvm_managed+0x1c>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 8003282:	4622      	mov	r2, r4
 8003284:	4669      	mov	r1, sp
 8003286:	2017      	movs	r0, #23
 8003288:	f7ff ffa5 	bl	80031d6 <VL53L1_i2c_decode_customer_nvm_managed>
			pdata);

	LOG_FUNCTION_END(status);

	return status;
}
 800328c:	b006      	add	sp, #24
 800328e:	bd10      	pop	{r4, pc}

08003290 <VL53L1_i2c_encode_static_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8003290:	291f      	cmp	r1, #31
{
 8003292:	b538      	push	{r3, r4, r5, lr}
 8003294:	4604      	mov	r4, r0
 8003296:	4615      	mov	r5, r2
	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8003298:	d965      	bls.n	8003366 <VL53L1_i2c_encode_static_config+0xd6>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	VL53L1_i2c_encode_uint16_t(
 800329a:	2102      	movs	r1, #2
 800329c:	8800      	ldrh	r0, [r0, #0]
 800329e:	f7ff fd3f 	bl	8002d20 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer + 0);
	*(pbuffer + 2) =
		pdata->debug__ctrl & 0x1;
 80032a2:	78a3      	ldrb	r3, [r4, #2]
 80032a4:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer + 2) =
 80032a8:	70ab      	strb	r3, [r5, #2]
	*(pbuffer + 3) =
		pdata->test_mode__ctrl & 0xF;
 80032aa:	78e3      	ldrb	r3, [r4, #3]
 80032ac:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer + 3) =
 80032b0:	70eb      	strb	r3, [r5, #3]
	*(pbuffer + 4) =
		pdata->clk_gating__ctrl & 0xF;
 80032b2:	7923      	ldrb	r3, [r4, #4]
 80032b4:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer + 4) =
 80032b8:	712b      	strb	r3, [r5, #4]
	*(pbuffer + 5) =
		pdata->nvm_bist__ctrl & 0x1F;
 80032ba:	7963      	ldrb	r3, [r4, #5]
 80032bc:	f003 031f 	and.w	r3, r3, #31
	*(pbuffer + 5) =
 80032c0:	716b      	strb	r3, [r5, #5]
	*(pbuffer + 6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 80032c2:	79a3      	ldrb	r3, [r4, #6]
 80032c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer + 6) =
 80032c8:	71ab      	strb	r3, [r5, #6]
	*(pbuffer + 7) =
		pdata->nvm_bist__start_address & 0x7F;
 80032ca:	79e3      	ldrb	r3, [r4, #7]
 80032cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer + 7) =
 80032d0:	71eb      	strb	r3, [r5, #7]
	*(pbuffer + 8) =
		pdata->host_if__status & 0x1;
 80032d2:	7a23      	ldrb	r3, [r4, #8]
 80032d4:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer + 8) =
 80032d8:	722b      	strb	r3, [r5, #8]
	*(pbuffer + 9) =
		pdata->pad_i2c_hv__config;
 80032da:	7a63      	ldrb	r3, [r4, #9]
	*(pbuffer + 9) =
 80032dc:	726b      	strb	r3, [r5, #9]
	*(pbuffer + 10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 80032de:	7aa3      	ldrb	r3, [r4, #10]
 80032e0:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer + 10) =
 80032e4:	72ab      	strb	r3, [r5, #10]
	*(pbuffer + 11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 80032e6:	7ae3      	ldrb	r3, [r4, #11]
 80032e8:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer + 11) =
 80032ec:	72eb      	strb	r3, [r5, #11]
	*(pbuffer + 12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 80032ee:	7b23      	ldrb	r3, [r4, #12]
 80032f0:	f003 031f 	and.w	r3, r3, #31
	*(pbuffer + 12) =
 80032f4:	732b      	strb	r3, [r5, #12]
	*(pbuffer + 13) =
		pdata->gpio__tio_hv_status & 0x3;
 80032f6:	7b63      	ldrb	r3, [r4, #13]
 80032f8:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer + 13) =
 80032fc:	736b      	strb	r3, [r5, #13]
	*(pbuffer + 14) =
		pdata->gpio__fio_hv_status & 0x3;
 80032fe:	7ba3      	ldrb	r3, [r4, #14]
 8003300:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer + 14) =
 8003304:	73ab      	strb	r3, [r5, #14]
	*(pbuffer + 15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8003306:	7be3      	ldrb	r3, [r4, #15]
 8003308:	f003 0307 	and.w	r3, r3, #7
	*(pbuffer + 15) =
 800330c:	73eb      	strb	r3, [r5, #15]
	*(pbuffer + 16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800330e:	7c23      	ldrb	r3, [r4, #16]
 8003310:	f003 031f 	and.w	r3, r3, #31
	*(pbuffer + 16) =
 8003314:	742b      	strb	r3, [r5, #16]
	*(pbuffer + 17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8003316:	7c63      	ldrb	r3, [r4, #17]
 8003318:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer + 17) =
 800331c:	746b      	strb	r3, [r5, #17]
	*(pbuffer + 18) =
		pdata->sigma_estimator__effective_pulse_width_ns;
 800331e:	7ca3      	ldrb	r3, [r4, #18]
	*(pbuffer + 18) =
 8003320:	74ab      	strb	r3, [r5, #18]
	*(pbuffer + 19) =
		pdata->sigma_estimator__effective_ambient_width_ns;
 8003322:	7ce3      	ldrb	r3, [r4, #19]
	*(pbuffer + 19) =
 8003324:	74eb      	strb	r3, [r5, #19]
	*(pbuffer + 20) =
		pdata->sigma_estimator__sigma_ref_mm;
 8003326:	7d23      	ldrb	r3, [r4, #20]
	*(pbuffer + 20) =
 8003328:	752b      	strb	r3, [r5, #20]
	*(pbuffer + 21) =
		pdata->algo__crosstalk_compensation_valid_height_mm;
 800332a:	7d63      	ldrb	r3, [r4, #21]
	*(pbuffer + 21) =
 800332c:	756b      	strb	r3, [r5, #21]
	*(pbuffer + 22) =
		pdata->spare_host_config__static_config_spare_0;
 800332e:	7da3      	ldrb	r3, [r4, #22]
	*(pbuffer + 22) =
 8003330:	75ab      	strb	r3, [r5, #22]
	*(pbuffer + 23) =
		pdata->spare_host_config__static_config_spare_1;
 8003332:	7de3      	ldrb	r3, [r4, #23]
	*(pbuffer + 23) =
 8003334:	75eb      	strb	r3, [r5, #23]
	VL53L1_i2c_encode_uint16_t(
 8003336:	8b20      	ldrh	r0, [r4, #24]
 8003338:	f105 0218 	add.w	r2, r5, #24
 800333c:	2102      	movs	r1, #2
 800333e:	f7ff fcef 	bl	8002d20 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer + 24);
	*(pbuffer + 26) =
		pdata->algo__range_ignore_valid_height_mm;
 8003342:	7ea3      	ldrb	r3, [r4, #26]
	*(pbuffer + 26) =
 8003344:	76ab      	strb	r3, [r5, #26]
	*(pbuffer + 27) =
		pdata->algo__range_min_clip;
 8003346:	7ee3      	ldrb	r3, [r4, #27]
	*(pbuffer + 27) =
 8003348:	76eb      	strb	r3, [r5, #27]
	*(pbuffer + 28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 800334a:	7f23      	ldrb	r3, [r4, #28]
 800334c:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer + 28) =
 8003350:	772b      	strb	r3, [r5, #28]
	*(pbuffer + 29) =
		pdata->spare_host_config__static_config_spare_2;
 8003352:	7f63      	ldrb	r3, [r4, #29]
	*(pbuffer + 29) =
 8003354:	776b      	strb	r3, [r5, #29]
	*(pbuffer + 30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 8003356:	7fa3      	ldrb	r3, [r4, #30]
 8003358:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer + 30) =
 800335c:	77ab      	strb	r3, [r5, #30]
	*(pbuffer + 31) =
		pdata->sd_config__reset_stages_lsb;
 800335e:	7fe3      	ldrb	r3, [r4, #31]
	*(pbuffer + 31) =
 8003360:	77eb      	strb	r3, [r5, #31]
	LOG_FUNCTION_END(status);


	return status;
 8003362:	2000      	movs	r0, #0
 8003364:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8003366:	f06f 0009 	mvn.w	r0, #9
}
 800336a:	bd38      	pop	{r3, r4, r5, pc}

0800336c <VL53L1_i2c_encode_general_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 800336c:	2915      	cmp	r1, #21
{
 800336e:	b538      	push	{r3, r4, r5, lr}
 8003370:	4605      	mov	r5, r0
 8003372:	4614      	mov	r4, r2
	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 8003374:	d93c      	bls.n	80033f0 <VL53L1_i2c_encode_general_config+0x84>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer + 0) =
		pdata->gph_config__stream_count_update_value;
 8003376:	7803      	ldrb	r3, [r0, #0]
	*(pbuffer + 0) =
 8003378:	7013      	strb	r3, [r2, #0]
	*(pbuffer + 1) =
		pdata->global_config__stream_divider;
 800337a:	7843      	ldrb	r3, [r0, #1]
	*(pbuffer + 1) =
 800337c:	7053      	strb	r3, [r2, #1]
	*(pbuffer + 2) =
		pdata->system__interrupt_config_gpio;
 800337e:	7883      	ldrb	r3, [r0, #2]
	*(pbuffer + 2) =
 8003380:	7093      	strb	r3, [r2, #2]
	*(pbuffer + 3) =
		pdata->cal_config__vcsel_start & 0x7F;
 8003382:	78c3      	ldrb	r3, [r0, #3]
 8003384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer + 3) =
 8003388:	70d3      	strb	r3, [r2, #3]
	VL53L1_i2c_encode_uint16_t(
 800338a:	8880      	ldrh	r0, [r0, #4]
 800338c:	3204      	adds	r2, #4
 800338e:	2102      	movs	r1, #2
 8003390:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8003394:	f7ff fcc4 	bl	8002d20 <VL53L1_i2c_encode_uint16_t>
		pdata->cal_config__repeat_rate & 0xFFF,
		2,
		pbuffer + 4);
	*(pbuffer + 6) =
		pdata->global_config__vcsel_width & 0x7F;
 8003398:	79ab      	ldrb	r3, [r5, #6]
 800339a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer + 6) =
 800339e:	71a3      	strb	r3, [r4, #6]
	*(pbuffer + 7) =
		pdata->phasecal_config__timeout_macrop;
 80033a0:	79eb      	ldrb	r3, [r5, #7]
	*(pbuffer + 7) =
 80033a2:	71e3      	strb	r3, [r4, #7]
	*(pbuffer + 8) =
		pdata->phasecal_config__target;
 80033a4:	7a2b      	ldrb	r3, [r5, #8]
	*(pbuffer + 8) =
 80033a6:	7223      	strb	r3, [r4, #8]
	*(pbuffer + 9) =
		pdata->phasecal_config__override & 0x1;
 80033a8:	7a6b      	ldrb	r3, [r5, #9]
 80033aa:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer + 9) =
 80033ae:	7263      	strb	r3, [r4, #9]
	*(pbuffer + 11) =
		pdata->dss_config__roi_mode_control & 0x7;
 80033b0:	7aab      	ldrb	r3, [r5, #10]
 80033b2:	f003 0307 	and.w	r3, r3, #7
	*(pbuffer + 11) =
 80033b6:	72e3      	strb	r3, [r4, #11]
	VL53L1_i2c_encode_uint16_t(
 80033b8:	f104 020c 	add.w	r2, r4, #12
 80033bc:	89a8      	ldrh	r0, [r5, #12]
 80033be:	2102      	movs	r1, #2
 80033c0:	f7ff fcae 	bl	8002d20 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer + 12);
	VL53L1_i2c_encode_uint16_t(
 80033c4:	f104 020e 	add.w	r2, r4, #14
 80033c8:	89e8      	ldrh	r0, [r5, #14]
 80033ca:	2102      	movs	r1, #2
 80033cc:	f7ff fca8 	bl	8002d20 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer + 14);
	VL53L1_i2c_encode_uint16_t(
 80033d0:	8a28      	ldrh	r0, [r5, #16]
 80033d2:	f104 0210 	add.w	r2, r4, #16
 80033d6:	2102      	movs	r1, #2
 80033d8:	f7ff fca2 	bl	8002d20 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer + 16);
	*(pbuffer + 18) =
		pdata->dss_config__manual_block_select;
 80033dc:	7cab      	ldrb	r3, [r5, #18]
	*(pbuffer + 18) =
 80033de:	74a3      	strb	r3, [r4, #18]
	*(pbuffer + 19) =
		pdata->dss_config__aperture_attenuation;
 80033e0:	7ceb      	ldrb	r3, [r5, #19]
	*(pbuffer + 19) =
 80033e2:	74e3      	strb	r3, [r4, #19]
	*(pbuffer + 20) =
		pdata->dss_config__max_spads_limit;
 80033e4:	7d2b      	ldrb	r3, [r5, #20]
	*(pbuffer + 20) =
 80033e6:	7523      	strb	r3, [r4, #20]
	*(pbuffer + 21) =
		pdata->dss_config__min_spads_limit;
 80033e8:	7d6b      	ldrb	r3, [r5, #21]
	*(pbuffer + 21) =
 80033ea:	7563      	strb	r3, [r4, #21]
	LOG_FUNCTION_END(status);


	return status;
 80033ec:	2000      	movs	r0, #0
 80033ee:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80033f0:	f06f 0009 	mvn.w	r0, #9
}
 80033f4:	bd38      	pop	{r3, r4, r5, pc}

080033f6 <VL53L1_i2c_encode_timing_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 80033f6:	2916      	cmp	r1, #22
{
 80033f8:	b538      	push	{r3, r4, r5, lr}
 80033fa:	4605      	mov	r5, r0
 80033fc:	4614      	mov	r4, r2
	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 80033fe:	d93a      	bls.n	8003476 <VL53L1_i2c_encode_timing_config+0x80>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer + 0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 8003400:	7803      	ldrb	r3, [r0, #0]
 8003402:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer + 0) =
 8003406:	7013      	strb	r3, [r2, #0]
	*(pbuffer + 1) =
		pdata->mm_config__timeout_macrop_a_lo;
 8003408:	7843      	ldrb	r3, [r0, #1]
	*(pbuffer + 1) =
 800340a:	7053      	strb	r3, [r2, #1]
	*(pbuffer + 2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800340c:	7883      	ldrb	r3, [r0, #2]
 800340e:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer + 2) =
 8003412:	7093      	strb	r3, [r2, #2]
	*(pbuffer + 3) =
		pdata->mm_config__timeout_macrop_b_lo;
 8003414:	78c3      	ldrb	r3, [r0, #3]
	*(pbuffer + 3) =
 8003416:	70d3      	strb	r3, [r2, #3]
	*(pbuffer + 4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8003418:	7903      	ldrb	r3, [r0, #4]
 800341a:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer + 4) =
 800341e:	7113      	strb	r3, [r2, #4]
	*(pbuffer + 5) =
		pdata->range_config__timeout_macrop_a_lo;
 8003420:	7943      	ldrb	r3, [r0, #5]
	*(pbuffer + 5) =
 8003422:	7153      	strb	r3, [r2, #5]
	*(pbuffer + 6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 8003424:	7983      	ldrb	r3, [r0, #6]
 8003426:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer + 6) =
 800342a:	7193      	strb	r3, [r2, #6]
	*(pbuffer + 7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800342c:	79c3      	ldrb	r3, [r0, #7]
 800342e:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer + 7) =
 8003432:	71d3      	strb	r3, [r2, #7]
	*(pbuffer + 8) =
		pdata->range_config__timeout_macrop_b_lo;
 8003434:	7a03      	ldrb	r3, [r0, #8]
	*(pbuffer + 8) =
 8003436:	7213      	strb	r3, [r2, #8]
	*(pbuffer + 9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 8003438:	7a43      	ldrb	r3, [r0, #9]
 800343a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer + 9) =
 800343e:	7253      	strb	r3, [r2, #9]
	VL53L1_i2c_encode_uint16_t(
 8003440:	2102      	movs	r1, #2
 8003442:	320a      	adds	r2, #10
 8003444:	8940      	ldrh	r0, [r0, #10]
 8003446:	f7ff fc6b 	bl	8002d20 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer + 10);
	VL53L1_i2c_encode_uint16_t(
 800344a:	f104 020c 	add.w	r2, r4, #12
 800344e:	89a8      	ldrh	r0, [r5, #12]
 8003450:	2102      	movs	r1, #2
 8003452:	f7ff fc65 	bl	8002d20 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer + 12);
	*(pbuffer + 14) =
		pdata->range_config__valid_phase_low;
 8003456:	7bab      	ldrb	r3, [r5, #14]
	*(pbuffer + 14) =
 8003458:	73a3      	strb	r3, [r4, #14]
	*(pbuffer + 15) =
		pdata->range_config__valid_phase_high;
 800345a:	7beb      	ldrb	r3, [r5, #15]
	*(pbuffer + 15) =
 800345c:	73e3      	strb	r3, [r4, #15]
	VL53L1_i2c_encode_uint32_t(
 800345e:	6928      	ldr	r0, [r5, #16]
 8003460:	f104 0212 	add.w	r2, r4, #18
 8003464:	2104      	movs	r1, #4
 8003466:	f7ff fc84 	bl	8002d72 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer + 18);
	*(pbuffer + 22) =
		pdata->system__fractional_enable & 0x1;
 800346a:	7d2b      	ldrb	r3, [r5, #20]
 800346c:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer + 22) =
 8003470:	75a3      	strb	r3, [r4, #22]
	LOG_FUNCTION_END(status);


	return status;
 8003472:	2000      	movs	r0, #0
 8003474:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8003476:	f06f 0009 	mvn.w	r0, #9
}
 800347a:	bd38      	pop	{r3, r4, r5, pc}

0800347c <VL53L1_i2c_encode_dynamic_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800347c:	2911      	cmp	r1, #17
{
 800347e:	b538      	push	{r3, r4, r5, lr}
 8003480:	4604      	mov	r4, r0
 8003482:	4615      	mov	r5, r2
	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8003484:	d939      	bls.n	80034fa <VL53L1_i2c_encode_dynamic_config+0x7e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer + 0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 8003486:	7803      	ldrb	r3, [r0, #0]
 8003488:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer + 0) =
 800348c:	f802 3b01 	strb.w	r3, [r2], #1
	VL53L1_i2c_encode_uint16_t(
 8003490:	2102      	movs	r1, #2
 8003492:	8840      	ldrh	r0, [r0, #2]
 8003494:	f7ff fc44 	bl	8002d20 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer + 1);
	VL53L1_i2c_encode_uint16_t(
 8003498:	88a0      	ldrh	r0, [r4, #4]
 800349a:	1cea      	adds	r2, r5, #3
 800349c:	2102      	movs	r1, #2
 800349e:	f7ff fc3f 	bl	8002d20 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer + 3);
	*(pbuffer + 5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 80034a2:	79a3      	ldrb	r3, [r4, #6]
 80034a4:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer + 5) =
 80034a8:	716b      	strb	r3, [r5, #5]
	*(pbuffer + 6) =
		pdata->system__seed_config & 0x7;
 80034aa:	79e3      	ldrb	r3, [r4, #7]
 80034ac:	f003 0307 	and.w	r3, r3, #7
	*(pbuffer + 6) =
 80034b0:	71ab      	strb	r3, [r5, #6]
	*(pbuffer + 7) =
		pdata->sd_config__woi_sd0;
 80034b2:	7a23      	ldrb	r3, [r4, #8]
	*(pbuffer + 7) =
 80034b4:	71eb      	strb	r3, [r5, #7]
	*(pbuffer + 8) =
		pdata->sd_config__woi_sd1;
 80034b6:	7a63      	ldrb	r3, [r4, #9]
	*(pbuffer + 8) =
 80034b8:	722b      	strb	r3, [r5, #8]
	*(pbuffer + 9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 80034ba:	7aa3      	ldrb	r3, [r4, #10]
 80034bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer + 9) =
 80034c0:	726b      	strb	r3, [r5, #9]
	*(pbuffer + 10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 80034c2:	7ae3      	ldrb	r3, [r4, #11]
 80034c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer + 10) =
 80034c8:	72ab      	strb	r3, [r5, #10]
	*(pbuffer + 11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 80034ca:	7b23      	ldrb	r3, [r4, #12]
 80034cc:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer + 11) =
 80034d0:	72eb      	strb	r3, [r5, #11]
	*(pbuffer + 12) =
		pdata->sd_config__first_order_select & 0x3;
 80034d2:	7b63      	ldrb	r3, [r4, #13]
 80034d4:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer + 12) =
 80034d8:	732b      	strb	r3, [r5, #12]
	*(pbuffer + 13) =
		pdata->sd_config__quantifier & 0xF;
 80034da:	7ba3      	ldrb	r3, [r4, #14]
 80034dc:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer + 13) =
 80034e0:	736b      	strb	r3, [r5, #13]
	*(pbuffer + 14) =
		pdata->roi_config__user_roi_centre_spad;
 80034e2:	7be3      	ldrb	r3, [r4, #15]
	*(pbuffer + 14) =
 80034e4:	73ab      	strb	r3, [r5, #14]
	*(pbuffer + 15) =
		pdata->roi_config__user_roi_requested_global_xy_size;
 80034e6:	7c23      	ldrb	r3, [r4, #16]
	*(pbuffer + 15) =
 80034e8:	73eb      	strb	r3, [r5, #15]
	*(pbuffer + 16) =
		pdata->system__sequence_config;
 80034ea:	7c63      	ldrb	r3, [r4, #17]
	*(pbuffer + 16) =
 80034ec:	742b      	strb	r3, [r5, #16]
	*(pbuffer + 17) =
		pdata->system__grouped_parameter_hold & 0x3;
 80034ee:	7ca3      	ldrb	r3, [r4, #18]
 80034f0:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer + 17) =
 80034f4:	746b      	strb	r3, [r5, #17]
	LOG_FUNCTION_END(status);


	return status;
 80034f6:	2000      	movs	r0, #0
 80034f8:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80034fa:	f06f 0009 	mvn.w	r0, #9
}
 80034fe:	bd38      	pop	{r3, r4, r5, pc}

08003500 <VL53L1_i2c_encode_system_control>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 8003500:	2904      	cmp	r1, #4
 8003502:	d913      	bls.n	800352c <VL53L1_i2c_encode_system_control+0x2c>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer + 0) =
		pdata->power_management__go1_power_force & 0x1;
 8003504:	7803      	ldrb	r3, [r0, #0]
 8003506:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer + 0) =
 800350a:	7013      	strb	r3, [r2, #0]
	*(pbuffer + 1) =
		pdata->system__stream_count_ctrl & 0x1;
 800350c:	7843      	ldrb	r3, [r0, #1]
 800350e:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer + 1) =
 8003512:	7053      	strb	r3, [r2, #1]
	*(pbuffer + 2) =
		pdata->firmware__enable & 0x1;
 8003514:	7883      	ldrb	r3, [r0, #2]
 8003516:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer + 2) =
 800351a:	7093      	strb	r3, [r2, #2]
	*(pbuffer + 3) =
		pdata->system__interrupt_clear & 0x3;
 800351c:	78c3      	ldrb	r3, [r0, #3]
 800351e:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer + 3) =
 8003522:	70d3      	strb	r3, [r2, #3]
	*(pbuffer + 4) =
		pdata->system__mode_start;
 8003524:	7903      	ldrb	r3, [r0, #4]
	*(pbuffer + 4) =
 8003526:	7113      	strb	r3, [r2, #4]
	LOG_FUNCTION_END(status);


	return status;
 8003528:	2000      	movs	r0, #0
 800352a:	4770      	bx	lr
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800352c:	f06f 0009 	mvn.w	r0, #9
}
 8003530:	4770      	bx	lr

08003532 <VL53L1_set_system_control>:


VL53L1_Error VL53L1_set_system_control(
	VL53L1_DEV Dev,
	VL53L1_system_control_t   *pdata)
{
 8003532:	b513      	push	{r0, r1, r4, lr}
 8003534:	4604      	mov	r4, r0
	uint8_t comms_buffer[VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status = VL53L1_i2c_encode_system_control(
 8003536:	466a      	mov	r2, sp
{
 8003538:	4608      	mov	r0, r1
		status = VL53L1_i2c_encode_system_control(
 800353a:	2105      	movs	r1, #5
 800353c:	f7ff ffe0 	bl	8003500 <VL53L1_i2c_encode_system_control>
			pdata,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53L1_ERROR_NONE)
 8003540:	b928      	cbnz	r0, 800354e <VL53L1_set_system_control+0x1c>
		status = VL53L1_WriteMulti(
 8003542:	2305      	movs	r3, #5
 8003544:	466a      	mov	r2, sp
 8003546:	2183      	movs	r1, #131	; 0x83
 8003548:	4620      	mov	r0, r4
 800354a:	f004 fda1 	bl	8008090 <VL53L1_WriteMulti>
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
}
 800354e:	b002      	add	sp, #8
 8003550:	bd10      	pop	{r4, pc}

08003552 <VL53L1_i2c_decode_system_results>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 8003552:	282b      	cmp	r0, #43	; 0x2b
{
 8003554:	b538      	push	{r3, r4, r5, lr}
 8003556:	460d      	mov	r5, r1
 8003558:	4614      	mov	r4, r2
	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 800355a:	f240 8086 	bls.w	800366a <VL53L1_i2c_decode_system_results+0x118>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->result__interrupt_status =
		(*(pbuffer + 0)) & 0x3F;
 800355e:	780b      	ldrb	r3, [r1, #0]
 8003560:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->result__interrupt_status =
 8003564:	7013      	strb	r3, [r2, #0]
	pdata->result__range_status =
 8003566:	784b      	ldrb	r3, [r1, #1]
 8003568:	7053      	strb	r3, [r2, #1]
		(*(pbuffer + 1));
	pdata->result__report_status =
		(*(pbuffer + 2)) & 0xF;
 800356a:	788b      	ldrb	r3, [r1, #2]
 800356c:	f003 030f 	and.w	r3, r3, #15
	pdata->result__report_status =
 8003570:	7093      	strb	r3, [r2, #2]
	pdata->result__stream_count =
 8003572:	78cb      	ldrb	r3, [r1, #3]
 8003574:	70d3      	strb	r3, [r2, #3]
		(*(pbuffer + 3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 4));
 8003576:	3104      	adds	r1, #4
 8003578:	2002      	movs	r0, #2
 800357a:	f7ff fbd9 	bl	8002d30 <VL53L1_i2c_decode_uint16_t>
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 6));
 800357e:	1da9      	adds	r1, r5, #6
	pdata->result__dss_actual_effective_spads_sd0 =
 8003580:	80a0      	strh	r0, [r4, #4]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 6));
 8003582:	2002      	movs	r0, #2
 8003584:	f7ff fbd4 	bl	8002d30 <VL53L1_i2c_decode_uint16_t>
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 8));
 8003588:	f105 0108 	add.w	r1, r5, #8
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 800358c:	80e0      	strh	r0, [r4, #6]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 8));
 800358e:	2002      	movs	r0, #2
 8003590:	f7ff fbce 	bl	8002d30 <VL53L1_i2c_decode_uint16_t>
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 10));
 8003594:	f105 010a 	add.w	r1, r5, #10
	pdata->result__ambient_count_rate_mcps_sd0 =
 8003598:	8120      	strh	r0, [r4, #8]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 10));
 800359a:	2002      	movs	r0, #2
 800359c:	f7ff fbc8 	bl	8002d30 <VL53L1_i2c_decode_uint16_t>
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 12));
 80035a0:	f105 010c 	add.w	r1, r5, #12
	pdata->result__sigma_sd0 =
 80035a4:	8160      	strh	r0, [r4, #10]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 12));
 80035a6:	2002      	movs	r0, #2
 80035a8:	f7ff fbc2 	bl	8002d30 <VL53L1_i2c_decode_uint16_t>
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 14));
 80035ac:	f105 010e 	add.w	r1, r5, #14
	pdata->result__phase_sd0 =
 80035b0:	81a0      	strh	r0, [r4, #12]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 14));
 80035b2:	2002      	movs	r0, #2
 80035b4:	f7ff fbbc 	bl	8002d30 <VL53L1_i2c_decode_uint16_t>
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 16));
 80035b8:	f105 0110 	add.w	r1, r5, #16
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 80035bc:	81e0      	strh	r0, [r4, #14]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 16));
 80035be:	2002      	movs	r0, #2
 80035c0:	f7ff fbb6 	bl	8002d30 <VL53L1_i2c_decode_uint16_t>
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 18));
 80035c4:	f105 0112 	add.w	r1, r5, #18
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 80035c8:	8220      	strh	r0, [r4, #16]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 18));
 80035ca:	2002      	movs	r0, #2
 80035cc:	f7ff fbb0 	bl	8002d30 <VL53L1_i2c_decode_uint16_t>
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 20));
 80035d0:	f105 0114 	add.w	r1, r5, #20
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 80035d4:	8260      	strh	r0, [r4, #18]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 20));
 80035d6:	2002      	movs	r0, #2
 80035d8:	f7ff fbaa 	bl	8002d30 <VL53L1_i2c_decode_uint16_t>
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 22));
 80035dc:	f105 0116 	add.w	r1, r5, #22
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 80035e0:	82a0      	strh	r0, [r4, #20]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 22));
 80035e2:	2002      	movs	r0, #2
 80035e4:	f7ff fba4 	bl	8002d30 <VL53L1_i2c_decode_uint16_t>
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 24));
 80035e8:	f105 0118 	add.w	r1, r5, #24
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 80035ec:	82e0      	strh	r0, [r4, #22]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 24));
 80035ee:	2002      	movs	r0, #2
 80035f0:	f7ff fb9e 	bl	8002d30 <VL53L1_i2c_decode_uint16_t>
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 26));
 80035f4:	f105 011a 	add.w	r1, r5, #26
	pdata->result__dss_actual_effective_spads_sd1 =
 80035f8:	8320      	strh	r0, [r4, #24]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 26));
 80035fa:	2002      	movs	r0, #2
 80035fc:	f7ff fb98 	bl	8002d30 <VL53L1_i2c_decode_uint16_t>
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 28));
 8003600:	f105 011c 	add.w	r1, r5, #28
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 8003604:	8360      	strh	r0, [r4, #26]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 28));
 8003606:	2002      	movs	r0, #2
 8003608:	f7ff fb92 	bl	8002d30 <VL53L1_i2c_decode_uint16_t>
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 30));
 800360c:	f105 011e 	add.w	r1, r5, #30
	pdata->result__ambient_count_rate_mcps_sd1 =
 8003610:	83a0      	strh	r0, [r4, #28]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 30));
 8003612:	2002      	movs	r0, #2
 8003614:	f7ff fb8c 	bl	8002d30 <VL53L1_i2c_decode_uint16_t>
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 32));
 8003618:	f105 0120 	add.w	r1, r5, #32
	pdata->result__sigma_sd1 =
 800361c:	83e0      	strh	r0, [r4, #30]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 32));
 800361e:	2002      	movs	r0, #2
 8003620:	f7ff fb86 	bl	8002d30 <VL53L1_i2c_decode_uint16_t>
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 34));
 8003624:	f105 0122 	add.w	r1, r5, #34	; 0x22
	pdata->result__phase_sd1 =
 8003628:	8420      	strh	r0, [r4, #32]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 34));
 800362a:	2002      	movs	r0, #2
 800362c:	f7ff fb80 	bl	8002d30 <VL53L1_i2c_decode_uint16_t>
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 36));
 8003630:	f105 0124 	add.w	r1, r5, #36	; 0x24
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 8003634:	8460      	strh	r0, [r4, #34]	; 0x22
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 36));
 8003636:	2002      	movs	r0, #2
 8003638:	f7ff fb7a 	bl	8002d30 <VL53L1_i2c_decode_uint16_t>
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 38));
 800363c:	f105 0126 	add.w	r1, r5, #38	; 0x26
	pdata->result__spare_0_sd1 =
 8003640:	84a0      	strh	r0, [r4, #36]	; 0x24
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 38));
 8003642:	2002      	movs	r0, #2
 8003644:	f7ff fb74 	bl	8002d30 <VL53L1_i2c_decode_uint16_t>
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 40));
 8003648:	f105 0128 	add.w	r1, r5, #40	; 0x28
	pdata->result__spare_1_sd1 =
 800364c:	84e0      	strh	r0, [r4, #38]	; 0x26
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 40));
 800364e:	2002      	movs	r0, #2
 8003650:	f7ff fb6e 	bl	8002d30 <VL53L1_i2c_decode_uint16_t>
	pdata->result__spare_2_sd1 =
 8003654:	8520      	strh	r0, [r4, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 8003656:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 800365a:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
		(*(pbuffer + 42));
	pdata->result__thresh_info =
 800365e:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 8003662:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
		(*(pbuffer + 43));

	LOG_FUNCTION_END(status);

	return status;
 8003666:	2000      	movs	r0, #0
 8003668:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800366a:	f06f 0009 	mvn.w	r0, #9
}
 800366e:	bd38      	pop	{r3, r4, r5, pc}

08003670 <VL53L1_i2c_decode_core_results>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 8003670:	2820      	cmp	r0, #32
{
 8003672:	b538      	push	{r3, r4, r5, lr}
 8003674:	460d      	mov	r5, r1
 8003676:	4614      	mov	r4, r2
	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 8003678:	d932      	bls.n	80036e0 <VL53L1_i2c_decode_core_results+0x70>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 0));
 800367a:	2004      	movs	r0, #4
 800367c:	f7ff fb81 	bl	8002d82 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 4));
 8003680:	1d29      	adds	r1, r5, #4
	pdata->result_core__ambient_window_events_sd0 =
 8003682:	6020      	str	r0, [r4, #0]
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 4));
 8003684:	2004      	movs	r0, #4
 8003686:	f7ff fb7c 	bl	8002d82 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer + 8));
 800368a:	f105 0108 	add.w	r1, r5, #8
	pdata->result_core__ranging_total_events_sd0 =
 800368e:	6060      	str	r0, [r4, #4]
		(VL53L1_i2c_decode_int32_t(4, pbuffer + 8));
 8003690:	2004      	movs	r0, #4
 8003692:	f7ff fb80 	bl	8002d96 <VL53L1_i2c_decode_int32_t>
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 12));
 8003696:	f105 010c 	add.w	r1, r5, #12
	pdata->result_core__signal_total_events_sd0 =
 800369a:	60a0      	str	r0, [r4, #8]
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 12));
 800369c:	2004      	movs	r0, #4
 800369e:	f7ff fb70 	bl	8002d82 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 16));
 80036a2:	f105 0110 	add.w	r1, r5, #16
	pdata->result_core__total_periods_elapsed_sd0 =
 80036a6:	60e0      	str	r0, [r4, #12]
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 16));
 80036a8:	2004      	movs	r0, #4
 80036aa:	f7ff fb6a 	bl	8002d82 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 20));
 80036ae:	f105 0114 	add.w	r1, r5, #20
	pdata->result_core__ambient_window_events_sd1 =
 80036b2:	6120      	str	r0, [r4, #16]
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 20));
 80036b4:	2004      	movs	r0, #4
 80036b6:	f7ff fb64 	bl	8002d82 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer + 24));
 80036ba:	f105 0118 	add.w	r1, r5, #24
	pdata->result_core__ranging_total_events_sd1 =
 80036be:	6160      	str	r0, [r4, #20]
		(VL53L1_i2c_decode_int32_t(4, pbuffer + 24));
 80036c0:	2004      	movs	r0, #4
 80036c2:	f7ff fb68 	bl	8002d96 <VL53L1_i2c_decode_int32_t>
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 28));
 80036c6:	f105 011c 	add.w	r1, r5, #28
	pdata->result_core__signal_total_events_sd1 =
 80036ca:	61a0      	str	r0, [r4, #24]
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 28));
 80036cc:	2004      	movs	r0, #4
 80036ce:	f7ff fb58 	bl	8002d82 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__total_periods_elapsed_sd1 =
 80036d2:	61e0      	str	r0, [r4, #28]
	pdata->result_core__spare_0 =
 80036d4:	f895 3020 	ldrb.w	r3, [r5, #32]
 80036d8:	f884 3020 	strb.w	r3, [r4, #32]
		(*(pbuffer + 32));

	LOG_FUNCTION_END(status);

	return status;
 80036dc:	2000      	movs	r0, #0
 80036de:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80036e0:	f06f 0009 	mvn.w	r0, #9
}
 80036e4:	bd38      	pop	{r3, r4, r5, pc}

080036e6 <VL53L1_i2c_decode_debug_results>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 80036e6:	2837      	cmp	r0, #55	; 0x37
{
 80036e8:	b538      	push	{r3, r4, r5, lr}
 80036ea:	460d      	mov	r5, r1
 80036ec:	4614      	mov	r4, r2
	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 80036ee:	f240 80d0 	bls.w	8003892 <VL53L1_i2c_decode_debug_results+0x1ac>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 0));
 80036f2:	2002      	movs	r0, #2
 80036f4:	f7ff fb1c 	bl	8002d30 <VL53L1_i2c_decode_uint16_t>
	pdata->phasecal_result__reference_phase =
 80036f8:	8020      	strh	r0, [r4, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer + 2)) & 0x7F;
 80036fa:	78ab      	ldrb	r3, [r5, #2]
 80036fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->phasecal_result__vcsel_start =
 8003700:	70a3      	strb	r3, [r4, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer + 3)) & 0x3F;
 8003702:	78eb      	ldrb	r3, [r5, #3]
 8003704:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->ref_spad_char_result__num_actual_ref_spads =
 8003708:	70e3      	strb	r3, [r4, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer + 4)) & 0x3;
 800370a:	792b      	ldrb	r3, [r5, #4]
 800370c:	f003 0303 	and.w	r3, r3, #3
	pdata->ref_spad_char_result__ref_location =
 8003710:	7123      	strb	r3, [r4, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer + 5)) & 0x1;
 8003712:	796b      	ldrb	r3, [r5, #5]
 8003714:	f003 0301 	and.w	r3, r3, #1
	pdata->vhv_result__coldboot_status =
 8003718:	7163      	strb	r3, [r4, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer + 6)) & 0x3F;
 800371a:	79ab      	ldrb	r3, [r5, #6]
 800371c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->vhv_result__search_result =
 8003720:	71a3      	strb	r3, [r4, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer + 7)) & 0x3F;
 8003722:	79eb      	ldrb	r3, [r5, #7]
 8003724:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->vhv_result__latest_setting =
 8003728:	71e3      	strb	r3, [r4, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 8)) & 0x3FF;
 800372a:	f105 0108 	add.w	r1, r5, #8
 800372e:	2002      	movs	r0, #2
 8003730:	f7ff fafe 	bl	8002d30 <VL53L1_i2c_decode_uint16_t>
 8003734:	f3c0 0009 	ubfx	r0, r0, #0, #10
	pdata->result__osc_calibrate_val =
 8003738:	8120      	strh	r0, [r4, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer + 10)) & 0x3;
 800373a:	7aab      	ldrb	r3, [r5, #10]
 800373c:	f003 0303 	and.w	r3, r3, #3
	pdata->ana_config__powerdown_go1 =
 8003740:	72a3      	strb	r3, [r4, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer + 11)) & 0x3;
 8003742:	7aeb      	ldrb	r3, [r5, #11]
 8003744:	f003 0303 	and.w	r3, r3, #3
	pdata->ana_config__ref_bg_ctrl =
 8003748:	72e3      	strb	r3, [r4, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer + 12)) & 0xF;
 800374a:	7b2b      	ldrb	r3, [r5, #12]
 800374c:	f003 030f 	and.w	r3, r3, #15
	pdata->ana_config__regdvdd1v2_ctrl =
 8003750:	7323      	strb	r3, [r4, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer + 13)) & 0x7;
 8003752:	7b6b      	ldrb	r3, [r5, #13]
 8003754:	f003 0307 	and.w	r3, r3, #7
	pdata->ana_config__osc_slow_ctrl =
 8003758:	7363      	strb	r3, [r4, #13]
	pdata->test_mode__status =
		(*(pbuffer + 14)) & 0x1;
 800375a:	7bab      	ldrb	r3, [r5, #14]
 800375c:	f003 0301 	and.w	r3, r3, #1
	pdata->test_mode__status =
 8003760:	73a3      	strb	r3, [r4, #14]
	pdata->firmware__system_status =
		(*(pbuffer + 15)) & 0x3;
 8003762:	7beb      	ldrb	r3, [r5, #15]
 8003764:	f003 0303 	and.w	r3, r3, #3
	pdata->firmware__system_status =
 8003768:	73e3      	strb	r3, [r4, #15]
	pdata->firmware__mode_status =
 800376a:	7c2b      	ldrb	r3, [r5, #16]
 800376c:	7423      	strb	r3, [r4, #16]
		(*(pbuffer + 16));
	pdata->firmware__secondary_mode_status =
 800376e:	7c6b      	ldrb	r3, [r5, #17]
 8003770:	7463      	strb	r3, [r4, #17]
		(*(pbuffer + 17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 18)) & 0xFFF;
 8003772:	f105 0112 	add.w	r1, r5, #18
 8003776:	2002      	movs	r0, #2
 8003778:	f7ff fada 	bl	8002d30 <VL53L1_i2c_decode_uint16_t>
 800377c:	f3c0 000b 	ubfx	r0, r0, #0, #12
	pdata->firmware__cal_repeat_rate_counter =
 8003780:	8260      	strh	r0, [r4, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 22));
 8003782:	f105 0116 	add.w	r1, r5, #22
 8003786:	2002      	movs	r0, #2
 8003788:	f7ff fad2 	bl	8002d30 <VL53L1_i2c_decode_uint16_t>
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 24));
 800378c:	f105 0118 	add.w	r1, r5, #24
	pdata->gph__system__thresh_high =
 8003790:	82a0      	strh	r0, [r4, #20]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 24));
 8003792:	2002      	movs	r0, #2
 8003794:	f7ff facc 	bl	8002d30 <VL53L1_i2c_decode_uint16_t>
	pdata->gph__system__thresh_low =
 8003798:	82e0      	strh	r0, [r4, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer + 26)) & 0x1;
 800379a:	7eab      	ldrb	r3, [r5, #26]
 800379c:	f003 0301 	and.w	r3, r3, #1
	pdata->gph__system__enable_xtalk_per_quadrant =
 80037a0:	7623      	strb	r3, [r4, #24]
	pdata->gph__spare_0 =
		(*(pbuffer + 27)) & 0x7;
 80037a2:	7eeb      	ldrb	r3, [r5, #27]
 80037a4:	f003 0307 	and.w	r3, r3, #7
	pdata->gph__spare_0 =
 80037a8:	7663      	strb	r3, [r4, #25]
	pdata->gph__sd_config__woi_sd0 =
 80037aa:	7f2b      	ldrb	r3, [r5, #28]
 80037ac:	76a3      	strb	r3, [r4, #26]
		(*(pbuffer + 28));
	pdata->gph__sd_config__woi_sd1 =
 80037ae:	7f6b      	ldrb	r3, [r5, #29]
 80037b0:	76e3      	strb	r3, [r4, #27]
		(*(pbuffer + 29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer + 30)) & 0x7F;
 80037b2:	7fab      	ldrb	r3, [r5, #30]
 80037b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->gph__sd_config__initial_phase_sd0 =
 80037b8:	7723      	strb	r3, [r4, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer + 31)) & 0x7F;
 80037ba:	7feb      	ldrb	r3, [r5, #31]
 80037bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->gph__sd_config__initial_phase_sd1 =
 80037c0:	7763      	strb	r3, [r4, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer + 32)) & 0x3;
 80037c2:	f895 3020 	ldrb.w	r3, [r5, #32]
 80037c6:	f003 0303 	and.w	r3, r3, #3
	pdata->gph__sd_config__first_order_select =
 80037ca:	77a3      	strb	r3, [r4, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer + 33)) & 0xF;
 80037cc:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 80037d0:	f003 030f 	and.w	r3, r3, #15
	pdata->gph__sd_config__quantifier =
 80037d4:	77e3      	strb	r3, [r4, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 80037d6:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 80037da:	f884 3020 	strb.w	r3, [r4, #32]
		(*(pbuffer + 34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 80037de:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 80037e2:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
		(*(pbuffer + 35));
	pdata->gph__system__sequence_config =
 80037e6:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 80037ea:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
		(*(pbuffer + 36));
	pdata->gph__gph_id =
		(*(pbuffer + 37)) & 0x1;
 80037ee:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 80037f2:	f003 0301 	and.w	r3, r3, #1
	pdata->gph__gph_id =
 80037f6:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer + 38)) & 0x3;
 80037fa:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 80037fe:	f003 0303 	and.w	r3, r3, #3
	pdata->system__interrupt_set =
 8003802:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer + 39)) & 0x1F;
 8003806:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
 800380a:	f003 031f 	and.w	r3, r3, #31
	pdata->interrupt_manager__enables =
 800380e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer + 40)) & 0x1F;
 8003812:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8003816:	f003 031f 	and.w	r3, r3, #31
	pdata->interrupt_manager__clear =
 800381a:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer + 41)) & 0x1F;
 800381e:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 8003822:	f003 031f 	and.w	r3, r3, #31
	pdata->interrupt_manager__status =
 8003826:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer + 42)) & 0x1;
 800382a:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 800382e:	f003 0301 	and.w	r3, r3, #1
	pdata->mcu_to_host_bank__wr_access_en =
 8003832:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer + 43)) & 0x1;
 8003836:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800383a:	f003 0301 	and.w	r3, r3, #1
	pdata->power_management__go1_reset_status =
 800383e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer + 44)) & 0x3;
 8003842:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8003846:	f003 0303 	and.w	r3, r3, #3
	pdata->pad_startup_mode__value_ro =
 800384a:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer + 45)) & 0x3F;
 800384e:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 8003852:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->pad_startup_mode__value_ctrl =
 8003856:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 46)) & 0x3FFFF;
 800385a:	f105 012e 	add.w	r1, r5, #46	; 0x2e
 800385e:	2004      	movs	r0, #4
 8003860:	f7ff fa8f 	bl	8002d82 <VL53L1_i2c_decode_uint32_t>
 8003864:	f3c0 0011 	ubfx	r0, r0, #0, #18
	pdata->pll_period_us =
 8003868:	62e0      	str	r0, [r4, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 50));
 800386a:	f105 0132 	add.w	r1, r5, #50	; 0x32
 800386e:	2004      	movs	r0, #4
 8003870:	f7ff fa87 	bl	8002d82 <VL53L1_i2c_decode_uint32_t>
	pdata->interrupt_scheduler__data_out =
 8003874:	6320      	str	r0, [r4, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer + 54)) & 0x1;
 8003876:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
 800387a:	f003 0301 	and.w	r3, r3, #1
	pdata->nvm_bist__complete =
 800387e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer + 55)) & 0x1;
 8003882:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
 8003886:	f003 0301 	and.w	r3, r3, #1
	pdata->nvm_bist__status =
 800388a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 800388e:	2000      	movs	r0, #0
 8003890:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8003892:	f06f 0009 	mvn.w	r0, #9
}
 8003896:	bd38      	pop	{r3, r4, r5, pc}

08003898 <VL53L1_i2c_decode_nvm_copy_data>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 8003898:	2830      	cmp	r0, #48	; 0x30
{
 800389a:	b538      	push	{r3, r4, r5, lr}
 800389c:	460d      	mov	r5, r1
 800389e:	4614      	mov	r4, r2
	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 80038a0:	f240 809c 	bls.w	80039dc <VL53L1_i2c_decode_nvm_copy_data+0x144>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->identification__model_id =
		(*(pbuffer + 0));
 80038a4:	780b      	ldrb	r3, [r1, #0]
	pdata->identification__model_id =
 80038a6:	7013      	strb	r3, [r2, #0]
	pdata->identification__module_type =
 80038a8:	784b      	ldrb	r3, [r1, #1]
 80038aa:	7053      	strb	r3, [r2, #1]
		(*(pbuffer + 1));
	pdata->identification__revision_id =
 80038ac:	788b      	ldrb	r3, [r1, #2]
 80038ae:	7093      	strb	r3, [r2, #2]
		(*(pbuffer + 2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 3));
 80038b0:	3103      	adds	r1, #3
 80038b2:	2002      	movs	r0, #2
 80038b4:	f7ff fa3c 	bl	8002d30 <VL53L1_i2c_decode_uint16_t>
	pdata->identification__module_id =
 80038b8:	80a0      	strh	r0, [r4, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer + 5)) & 0x7F;
 80038ba:	796b      	ldrb	r3, [r5, #5]
 80038bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->ana_config__fast_osc__trim_max =
 80038c0:	71a3      	strb	r3, [r4, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer + 6)) & 0x7;
 80038c2:	79ab      	ldrb	r3, [r5, #6]
 80038c4:	f003 0307 	and.w	r3, r3, #7
	pdata->ana_config__fast_osc__freq_set =
 80038c8:	71e3      	strb	r3, [r4, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer + 7)) & 0x7;
 80038ca:	79eb      	ldrb	r3, [r5, #7]
 80038cc:	f003 0307 	and.w	r3, r3, #7
	pdata->ana_config__vcsel_trim =
 80038d0:	7223      	strb	r3, [r4, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer + 8)) & 0x3F;
 80038d2:	7a2b      	ldrb	r3, [r5, #8]
 80038d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->ana_config__vcsel_selion =
 80038d8:	7263      	strb	r3, [r4, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer + 9)) & 0x3F;
 80038da:	7a6b      	ldrb	r3, [r5, #9]
 80038dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->ana_config__vcsel_selion_max =
 80038e0:	72a3      	strb	r3, [r4, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer + 10)) & 0x1;
 80038e2:	7aab      	ldrb	r3, [r5, #10]
 80038e4:	f003 0301 	and.w	r3, r3, #1
	pdata->protected_laser_safety__lock_bit =
 80038e8:	72e3      	strb	r3, [r4, #11]
	pdata->laser_safety__key =
		(*(pbuffer + 11)) & 0x7F;
 80038ea:	7aeb      	ldrb	r3, [r5, #11]
 80038ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->laser_safety__key =
 80038f0:	7323      	strb	r3, [r4, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer + 12)) & 0x1;
 80038f2:	7b2b      	ldrb	r3, [r5, #12]
 80038f4:	f003 0301 	and.w	r3, r3, #1
	pdata->laser_safety__key_ro =
 80038f8:	7363      	strb	r3, [r4, #13]
	pdata->laser_safety__clip =
		(*(pbuffer + 13)) & 0x3F;
 80038fa:	7b6b      	ldrb	r3, [r5, #13]
 80038fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->laser_safety__clip =
 8003900:	73a3      	strb	r3, [r4, #14]
	pdata->laser_safety__mult =
		(*(pbuffer + 14)) & 0x3F;
 8003902:	7bab      	ldrb	r3, [r5, #14]
 8003904:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->laser_safety__mult =
 8003908:	73e3      	strb	r3, [r4, #15]
	pdata->global_config__spad_enables_rtn_0 =
 800390a:	7beb      	ldrb	r3, [r5, #15]
 800390c:	7423      	strb	r3, [r4, #16]
		(*(pbuffer + 15));
	pdata->global_config__spad_enables_rtn_1 =
 800390e:	7c2b      	ldrb	r3, [r5, #16]
 8003910:	7463      	strb	r3, [r4, #17]
		(*(pbuffer + 16));
	pdata->global_config__spad_enables_rtn_2 =
 8003912:	7c6b      	ldrb	r3, [r5, #17]
 8003914:	74a3      	strb	r3, [r4, #18]
		(*(pbuffer + 17));
	pdata->global_config__spad_enables_rtn_3 =
 8003916:	7cab      	ldrb	r3, [r5, #18]
 8003918:	74e3      	strb	r3, [r4, #19]
		(*(pbuffer + 18));
	pdata->global_config__spad_enables_rtn_4 =
 800391a:	7ceb      	ldrb	r3, [r5, #19]
 800391c:	7523      	strb	r3, [r4, #20]
		(*(pbuffer + 19));
	pdata->global_config__spad_enables_rtn_5 =
 800391e:	7d2b      	ldrb	r3, [r5, #20]
 8003920:	7563      	strb	r3, [r4, #21]
		(*(pbuffer + 20));
	pdata->global_config__spad_enables_rtn_6 =
 8003922:	7d6b      	ldrb	r3, [r5, #21]
 8003924:	75a3      	strb	r3, [r4, #22]
		(*(pbuffer + 21));
	pdata->global_config__spad_enables_rtn_7 =
 8003926:	7dab      	ldrb	r3, [r5, #22]
 8003928:	75e3      	strb	r3, [r4, #23]
		(*(pbuffer + 22));
	pdata->global_config__spad_enables_rtn_8 =
 800392a:	7deb      	ldrb	r3, [r5, #23]
 800392c:	7623      	strb	r3, [r4, #24]
		(*(pbuffer + 23));
	pdata->global_config__spad_enables_rtn_9 =
 800392e:	7e2b      	ldrb	r3, [r5, #24]
 8003930:	7663      	strb	r3, [r4, #25]
		(*(pbuffer + 24));
	pdata->global_config__spad_enables_rtn_10 =
 8003932:	7e6b      	ldrb	r3, [r5, #25]
 8003934:	76a3      	strb	r3, [r4, #26]
		(*(pbuffer + 25));
	pdata->global_config__spad_enables_rtn_11 =
 8003936:	7eab      	ldrb	r3, [r5, #26]
 8003938:	76e3      	strb	r3, [r4, #27]
		(*(pbuffer + 26));
	pdata->global_config__spad_enables_rtn_12 =
 800393a:	7eeb      	ldrb	r3, [r5, #27]
 800393c:	7723      	strb	r3, [r4, #28]
		(*(pbuffer + 27));
	pdata->global_config__spad_enables_rtn_13 =
 800393e:	7f2b      	ldrb	r3, [r5, #28]
 8003940:	7763      	strb	r3, [r4, #29]
		(*(pbuffer + 28));
	pdata->global_config__spad_enables_rtn_14 =
 8003942:	7f6b      	ldrb	r3, [r5, #29]
 8003944:	77a3      	strb	r3, [r4, #30]
		(*(pbuffer + 29));
	pdata->global_config__spad_enables_rtn_15 =
 8003946:	7fab      	ldrb	r3, [r5, #30]
 8003948:	77e3      	strb	r3, [r4, #31]
		(*(pbuffer + 30));
	pdata->global_config__spad_enables_rtn_16 =
 800394a:	7feb      	ldrb	r3, [r5, #31]
 800394c:	f884 3020 	strb.w	r3, [r4, #32]
		(*(pbuffer + 31));
	pdata->global_config__spad_enables_rtn_17 =
 8003950:	f895 3020 	ldrb.w	r3, [r5, #32]
 8003954:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
		(*(pbuffer + 32));
	pdata->global_config__spad_enables_rtn_18 =
 8003958:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 800395c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
		(*(pbuffer + 33));
	pdata->global_config__spad_enables_rtn_19 =
 8003960:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8003964:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
		(*(pbuffer + 34));
	pdata->global_config__spad_enables_rtn_20 =
 8003968:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 800396c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
		(*(pbuffer + 35));
	pdata->global_config__spad_enables_rtn_21 =
 8003970:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8003974:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		(*(pbuffer + 36));
	pdata->global_config__spad_enables_rtn_22 =
 8003978:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 800397c:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
		(*(pbuffer + 37));
	pdata->global_config__spad_enables_rtn_23 =
 8003980:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 8003984:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
		(*(pbuffer + 38));
	pdata->global_config__spad_enables_rtn_24 =
 8003988:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
 800398c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		(*(pbuffer + 39));
	pdata->global_config__spad_enables_rtn_25 =
 8003990:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8003994:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
		(*(pbuffer + 40));
	pdata->global_config__spad_enables_rtn_26 =
 8003998:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 800399c:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
		(*(pbuffer + 41));
	pdata->global_config__spad_enables_rtn_27 =
 80039a0:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 80039a4:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
		(*(pbuffer + 42));
	pdata->global_config__spad_enables_rtn_28 =
 80039a8:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 80039ac:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		(*(pbuffer + 43));
	pdata->global_config__spad_enables_rtn_29 =
 80039b0:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 80039b4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
		(*(pbuffer + 44));
	pdata->global_config__spad_enables_rtn_30 =
 80039b8:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 80039bc:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
		(*(pbuffer + 45));
	pdata->global_config__spad_enables_rtn_31 =
 80039c0:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
 80039c4:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		(*(pbuffer + 46));
	pdata->roi_config__mode_roi_centre_spad =
 80039c8:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 80039cc:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		(*(pbuffer + 47));
	pdata->roi_config__mode_roi_xy_size =
 80039d0:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 80039d4:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
		(*(pbuffer + 48));

	LOG_FUNCTION_END(status);

	return status;
 80039d8:	2000      	movs	r0, #0
 80039da:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80039dc:	f06f 0009 	mvn.w	r0, #9
}
 80039e0:	bd38      	pop	{r3, r4, r5, pc}

080039e2 <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 80039e2:	b510      	push	{r4, lr}
 80039e4:	b08e      	sub	sp, #56	; 0x38
 80039e6:	460c      	mov	r4, r1
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status = VL53L1_ReadMulti(
 80039e8:	2331      	movs	r3, #49	; 0x31
 80039ea:	aa01      	add	r2, sp, #4
 80039ec:	f240 110f 	movw	r1, #271	; 0x10f
 80039f0:	f004 fb6e 	bl	80080d0 <VL53L1_ReadMulti>
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 80039f4:	b920      	cbnz	r0, 8003a00 <VL53L1_get_nvm_copy_data+0x1e>
		status = VL53L1_i2c_decode_nvm_copy_data(
 80039f6:	4622      	mov	r2, r4
 80039f8:	a901      	add	r1, sp, #4
 80039fa:	2031      	movs	r0, #49	; 0x31
 80039fc:	f7ff ff4c 	bl	8003898 <VL53L1_i2c_decode_nvm_copy_data>
			pdata);

	LOG_FUNCTION_END(status);

	return status;
}
 8003a00:	b00e      	add	sp, #56	; 0x38
 8003a02:	bd10      	pop	{r4, pc}

08003a04 <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV Dev,
	uint32_t timeout_ms)
{
 8003a04:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003a06:	460e      	mov	r6, r1
	 * it copies the NVM data into the G02 host register banks
	 * The host must wait the required time to allow the copy
	 * to complete before attempting to read the firmware status
	 */

	status = VL53L1_WaitUs(
 8003a08:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
{
 8003a0c:	4605      	mov	r5, r0
	status = VL53L1_WaitUs(
 8003a0e:	f004 fbbf 	bl	8008190 <VL53L1_WaitUs>
		Dev,
		VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 8003a12:	4604      	mov	r4, r0
 8003a14:	b968      	cbnz	r0, 8003a32 <VL53L1_poll_for_boot_completion+0x2e>
		status =
 8003a16:	2301      	movs	r3, #1
 8003a18:	9301      	str	r3, [sp, #4]
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	22e5      	movs	r2, #229	; 0xe5
 8003a1e:	4631      	mov	r1, r6
 8003a20:	4628      	mov	r0, r5
 8003a22:	f004 fbbf 	bl	80081a4 <VL53L1_WaitValueMaskEx>
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 8003a26:	4604      	mov	r4, r0
 8003a28:	b918      	cbnz	r0, 8003a32 <VL53L1_poll_for_boot_completion+0x2e>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 8003a2a:	2103      	movs	r1, #3
 8003a2c:	4628      	mov	r0, r5
 8003a2e:	f7ff f863 	bl	8002af8 <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
}
 8003a32:	4620      	mov	r0, r4
 8003a34:	b002      	add	sp, #8
 8003a36:	bd70      	pop	{r4, r5, r6, pc}

08003a38 <VL53L1_poll_for_range_completion>:


VL53L1_Error VL53L1_poll_for_range_completion(
	VL53L1_DEV Dev,
	uint32_t timeout_ms)
{
 8003a38:	b507      	push	{r0, r1, r2, lr}

	gpio__mux_active_high_hv =
		pdev->stat_cfg.gpio_hv_mux__ctrl &
		VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8003a3a:	f890 3170 	ldrb.w	r3, [r0, #368]	; 0x170
		interrupt_ready = 0x01;
	else
		interrupt_ready = 0x00;

	status =
 8003a3e:	2201      	movs	r2, #1
	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8003a40:	f083 0310 	eor.w	r3, r3, #16
	status =
 8003a44:	9201      	str	r2, [sp, #4]
 8003a46:	9200      	str	r2, [sp, #0]
 8003a48:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003a4c:	2231      	movs	r2, #49	; 0x31
 8003a4e:	f004 fba9 	bl	80081a4 <VL53L1_WaitValueMaskEx>
			VL53L1_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
}
 8003a52:	b003      	add	sp, #12
 8003a54:	f85d fb04 	ldr.w	pc, [sp], #4

08003a58 <_ExpanderRd>:
 * @param data       read data buffer
 * @param n_data     number of byte to read
 * @return           of if ok else i2c I/O operation status
 */
static int _ExpanderRd(int I2cExpAddr, int index, uint8_t *data, int n_data)
{
 8003a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	4617      	mov	r7, r2
	int status;
	uint8_t RegAddr;
	RegAddr = index;
 8003a5e:	aa04      	add	r2, sp, #16
	XNUCLEO53L1A1_GetI2cBus();
	do {
		status = HAL_I2C_Master_Transmit(&XNUCLEO53L1A1_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 8003a60:	b285      	uxth	r5, r0
 8003a62:	2464      	movs	r4, #100	; 0x64
	RegAddr = index;
 8003a64:	f802 1d01 	strb.w	r1, [r2, #-1]!
{
 8003a68:	461e      	mov	r6, r3
		status = HAL_I2C_Master_Transmit(&XNUCLEO53L1A1_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 8003a6a:	9400      	str	r4, [sp, #0]
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	4629      	mov	r1, r5
 8003a70:	4806      	ldr	r0, [pc, #24]	; (8003a8c <_ExpanderRd+0x34>)
 8003a72:	f001 fa97 	bl	8004fa4 <HAL_I2C_Master_Transmit>
		if (status)
 8003a76:	b938      	cbnz	r0, 8003a88 <_ExpanderRd+0x30>
			break;
		status = HAL_I2C_Master_Receive(&XNUCLEO53L1A1_hi2c, I2cExpAddr, data, n_data, n_data * 100);
 8003a78:	4374      	muls	r4, r6
 8003a7a:	9400      	str	r4, [sp, #0]
 8003a7c:	b2b3      	uxth	r3, r6
 8003a7e:	463a      	mov	r2, r7
 8003a80:	4629      	mov	r1, r5
 8003a82:	4802      	ldr	r0, [pc, #8]	; (8003a8c <_ExpanderRd+0x34>)
 8003a84:	f001 fb64 	bl	8005150 <HAL_I2C_Master_Receive>
	} while (0);
	XNUCLEO53L1A1_PutI2cBus();
	return status;
}
 8003a88:	b005      	add	sp, #20
 8003a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a8c:	200002a4 	.word	0x200002a4

08003a90 <_ExpanderWR>:
 * @param data       data buffer
 * @param n_data     number of byte to write
 * @return           of if ok else i2c I/O operation status
 */
static int _ExpanderWR(int I2cExpAddr, int index, uint8_t *data, int n_data)
{
 8003a90:	b570      	push	{r4, r5, r6, lr}
 8003a92:	b086      	sub	sp, #24
	int status;
	uint8_t RegAddr[0x10];
	RegAddr[0] = index;
 8003a94:	ad06      	add	r5, sp, #24
{
 8003a96:	4606      	mov	r6, r0
 8003a98:	4610      	mov	r0, r2
	RegAddr[0] = index;
 8003a9a:	f805 1d10 	strb.w	r1, [r5, #-16]!
{
 8003a9e:	461c      	mov	r4, r3
	memcpy(RegAddr + 1, data, n_data);
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	4601      	mov	r1, r0
 8003aa4:	f10d 0009 	add.w	r0, sp, #9
 8003aa8:	f004 fd8a 	bl	80085c0 <memcpy>
	XNUCLEO53L1A1_GetI2cBus();
	status = HAL_I2C_Master_Transmit(&XNUCLEO53L1A1_hi2c, I2cExpAddr, RegAddr, n_data + 1, 100);
 8003aac:	1c63      	adds	r3, r4, #1
 8003aae:	2264      	movs	r2, #100	; 0x64
 8003ab0:	9200      	str	r2, [sp, #0]
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	462a      	mov	r2, r5
 8003ab6:	b2b1      	uxth	r1, r6
 8003ab8:	4802      	ldr	r0, [pc, #8]	; (8003ac4 <_ExpanderWR+0x34>)
 8003aba:	f001 fa73 	bl	8004fa4 <HAL_I2C_Master_Transmit>
	XNUCLEO53L1A1_PutI2cBus();
	return status;
}
 8003abe:	b006      	add	sp, #24
 8003ac0:	bd70      	pop	{r4, r5, r6, pc}
 8003ac2:	bf00      	nop
 8003ac4:	200002a4 	.word	0x200002a4

08003ac8 <_ExpandersSetAllIO>:
{
 8003ac8:	b510      	push	{r4, lr}
	status = _ExpanderWR(I2cExpAddr0, GPSR, &CurIOVal.bytes[0], 2);
 8003aca:	2302      	movs	r3, #2
 8003acc:	4a07      	ldr	r2, [pc, #28]	; (8003aec <_ExpandersSetAllIO+0x24>)
 8003ace:	2112      	movs	r1, #18
 8003ad0:	2086      	movs	r0, #134	; 0x86
 8003ad2:	f7ff ffdd 	bl	8003a90 <_ExpanderWR>
	if (status) {
 8003ad6:	b938      	cbnz	r0, 8003ae8 <_ExpandersSetAllIO+0x20>
	status = _ExpanderWR(I2cExpAddr1, GPSR, &CurIOVal.bytes[2], 2);
 8003ad8:	2302      	movs	r3, #2
 8003ada:	4a05      	ldr	r2, [pc, #20]	; (8003af0 <_ExpandersSetAllIO+0x28>)
 8003adc:	2112      	movs	r1, #18
 8003ade:	2084      	movs	r0, #132	; 0x84
}
 8003ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	status = _ExpanderWR(I2cExpAddr1, GPSR, &CurIOVal.bytes[2], 2);
 8003ae4:	f7ff bfd4 	b.w	8003a90 <_ExpanderWR>
}
 8003ae8:	bd10      	pop	{r4, pc}
 8003aea:	bf00      	nop
 8003aec:	20000224 	.word	0x20000224
 8003af0:	20000226 	.word	0x20000226

08003af4 <XNUCLEO53L1A1_I2C1Configure>:
{
 8003af4:	b570      	push	{r4, r5, r6, lr}
 8003af6:	b088      	sub	sp, #32
	__GPIOB_CLK_ENABLE();
 8003af8:	2300      	movs	r3, #0
 8003afa:	9301      	str	r3, [sp, #4]
 8003afc:	4b58      	ldr	r3, [pc, #352]	; (8003c60 <XNUCLEO53L1A1_I2C1Configure+0x16c>)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8003afe:	4859      	ldr	r0, [pc, #356]	; (8003c64 <XNUCLEO53L1A1_I2C1Configure+0x170>)
	__GPIOB_CLK_ENABLE();
 8003b00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8003b02:	4d58      	ldr	r5, [pc, #352]	; (8003c64 <XNUCLEO53L1A1_I2C1Configure+0x170>)
	__GPIOB_CLK_ENABLE();
 8003b04:	f042 0202 	orr.w	r2, r2, #2
 8003b08:	631a      	str	r2, [r3, #48]	; 0x30
 8003b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	9301      	str	r3, [sp, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8003b12:	2201      	movs	r2, #1
 8003b14:	f44f 7180 	mov.w	r1, #256	; 0x100
	__GPIOB_CLK_ENABLE();
 8003b18:	9b01      	ldr	r3, [sp, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8003b1a:	f001 f8d3 	bl	8004cc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b24:	484f      	ldr	r0, [pc, #316]	; (8003c64 <XNUCLEO53L1A1_I2C1Configure+0x170>)
 8003b26:	f001 f8cd 	bl	8004cc4 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8003b2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003b2e:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003b30:	2311      	movs	r3, #17
 8003b32:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b34:	a903      	add	r1, sp, #12
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b36:	2301      	movs	r3, #1
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b38:	484a      	ldr	r0, [pc, #296]	; (8003c64 <XNUCLEO53L1A1_I2C1Configure+0x170>)
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b3a:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b3c:	f000 ffe6 	bl	8004b0c <HAL_GPIO_Init>
 8003b40:	2408      	movs	r4, #8
 8003b42:	260a      	movs	r6, #10
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8003b44:	2200      	movs	r2, #0
 8003b46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b4a:	4628      	mov	r0, r5
 8003b4c:	f001 f8ba 	bl	8004cc4 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8003b50:	2001      	movs	r0, #1
 8003b52:	f000 fbdf 	bl	8004314 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8003b56:	2201      	movs	r2, #1
 8003b58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b5c:	4628      	mov	r0, r5
 8003b5e:	f001 f8b1 	bl	8004cc4 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8003b62:	2001      	movs	r0, #1
 8003b64:	f000 fbd6 	bl	8004314 <HAL_Delay>
		for (i = 0; i < 10; i++) {
 8003b68:	3e01      	subs	r6, #1
 8003b6a:	d1eb      	bne.n	8003b44 <XNUCLEO53L1A1_I2C1Configure+0x50>
	} while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0 && nRetry++ < 7);
 8003b6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b70:	4628      	mov	r0, r5
 8003b72:	f001 f8a1 	bl	8004cb8 <HAL_GPIO_ReadPin>
 8003b76:	b908      	cbnz	r0, 8003b7c <XNUCLEO53L1A1_I2C1Configure+0x88>
 8003b78:	3c01      	subs	r4, #1
 8003b7a:	d1e2      	bne.n	8003b42 <XNUCLEO53L1A1_I2C1Configure+0x4e>
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0) {
 8003b7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b80:	4838      	ldr	r0, [pc, #224]	; (8003c64 <XNUCLEO53L1A1_I2C1Configure+0x170>)
 8003b82:	f001 f899 	bl	8004cb8 <HAL_GPIO_ReadPin>
 8003b86:	4b36      	ldr	r3, [pc, #216]	; (8003c60 <XNUCLEO53L1A1_I2C1Configure+0x16c>)
 8003b88:	2800      	cmp	r0, #0
 8003b8a:	d135      	bne.n	8003bf8 <XNUCLEO53L1A1_I2C1Configure+0x104>
		__GPIOA_CLK_ENABLE();
 8003b8c:	9002      	str	r0, [sp, #8]
 8003b8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8003b90:	4c35      	ldr	r4, [pc, #212]	; (8003c68 <XNUCLEO53L1A1_I2C1Configure+0x174>)
		__GPIOA_CLK_ENABLE();
 8003b92:	f042 0201 	orr.w	r2, r2, #1
 8003b96:	631a      	str	r2, [r3, #48]	; 0x30
 8003b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b9a:	9005      	str	r0, [sp, #20]
		__GPIOA_CLK_ENABLE();
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	9302      	str	r3, [sp, #8]
 8003ba2:	9b02      	ldr	r3, [sp, #8]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ba4:	4830      	ldr	r0, [pc, #192]	; (8003c68 <XNUCLEO53L1A1_I2C1Configure+0x174>)
		GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003ba6:	2320      	movs	r3, #32
 8003ba8:	9303      	str	r3, [sp, #12]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003baa:	a903      	add	r1, sp, #12
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bac:	2301      	movs	r3, #1
 8003bae:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bb0:	f000 ffac 	bl	8004b0c <HAL_GPIO_Init>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	2120      	movs	r1, #32
 8003bb8:	4620      	mov	r0, r4
 8003bba:	f001 f883 	bl	8004cc4 <HAL_GPIO_WritePin>
			HAL_Delay(33);
 8003bbe:	2021      	movs	r0, #33	; 0x21
 8003bc0:	f000 fba8 	bl	8004314 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	2120      	movs	r1, #32
 8003bc8:	4620      	mov	r0, r4
 8003bca:	f001 f87b 	bl	8004cc4 <HAL_GPIO_WritePin>
			HAL_Delay(33);
 8003bce:	2021      	movs	r0, #33	; 0x21
 8003bd0:	f000 fba0 	bl	8004314 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	2120      	movs	r1, #32
 8003bd8:	4620      	mov	r0, r4
 8003bda:	f001 f873 	bl	8004cc4 <HAL_GPIO_WritePin>
			HAL_Delay(33);
 8003bde:	2021      	movs	r0, #33	; 0x21
 8003be0:	f000 fb98 	bl	8004314 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8003be4:	4620      	mov	r0, r4
 8003be6:	2200      	movs	r2, #0
 8003be8:	2120      	movs	r1, #32
 8003bea:	f001 f86b 	bl	8004cc4 <HAL_GPIO_WritePin>
			HAL_Delay(33 * 20);
 8003bee:	f44f 7025 	mov.w	r0, #660	; 0x294
 8003bf2:	f000 fb8f 	bl	8004314 <HAL_Delay>
 8003bf6:	e7dd      	b.n	8003bb4 <XNUCLEO53L1A1_I2C1Configure+0xc0>
	__GPIOB_CLK_ENABLE();
 8003bf8:	2400      	movs	r4, #0
 8003bfa:	9400      	str	r4, [sp, #0]
 8003bfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bfe:	4819      	ldr	r0, [pc, #100]	; (8003c64 <XNUCLEO53L1A1_I2C1Configure+0x170>)
	__GPIOB_CLK_ENABLE();
 8003c00:	f042 0202 	orr.w	r2, r2, #2
 8003c04:	631a      	str	r2, [r3, #48]	; 0x30
 8003c06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c08:	f002 0202 	and.w	r2, r2, #2
 8003c0c:	9200      	str	r2, [sp, #0]
 8003c0e:	9a00      	ldr	r2, [sp, #0]
	__I2C1_CLK_ENABLE();
 8003c10:	9402      	str	r4, [sp, #8]
 8003c12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c14:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003c18:	641a      	str	r2, [r3, #64]	; 0x40
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c1c:	9405      	str	r4, [sp, #20]
	__I2C1_CLK_ENABLE();
 8003c1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c22:	9302      	str	r3, [sp, #8]
 8003c24:	9b02      	ldr	r3, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8003c26:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8003c28:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003c2c:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c2e:	2312      	movs	r3, #18
 8003c30:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c32:	a903      	add	r1, sp, #12
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c34:	2304      	movs	r3, #4
 8003c36:	9307      	str	r3, [sp, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c38:	f000 ff68 	bl	8004b0c <HAL_GPIO_Init>
	XNUCLEO53L1A1_hi2c.Instance = I2C1;
 8003c3c:	480b      	ldr	r0, [pc, #44]	; (8003c6c <XNUCLEO53L1A1_I2C1Configure+0x178>)
	XNUCLEO53L1A1_hi2c.Init.ClockSpeed = 400000;
 8003c3e:	4a0c      	ldr	r2, [pc, #48]	; (8003c70 <XNUCLEO53L1A1_I2C1Configure+0x17c>)
 8003c40:	4b0c      	ldr	r3, [pc, #48]	; (8003c74 <XNUCLEO53L1A1_I2C1Configure+0x180>)
	XNUCLEO53L1A1_hi2c.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003c42:	6084      	str	r4, [r0, #8]
	XNUCLEO53L1A1_hi2c.Init.ClockSpeed = 400000;
 8003c44:	e880 000c 	stmia.w	r0, {r2, r3}
	XNUCLEO53L1A1_hi2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	XNUCLEO53L1A1_hi2c.Init.OwnAddress1 = 0;
 8003c4c:	60c4      	str	r4, [r0, #12]
	XNUCLEO53L1A1_hi2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c4e:	6103      	str	r3, [r0, #16]
	XNUCLEO53L1A1_hi2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8003c50:	6144      	str	r4, [r0, #20]
	XNUCLEO53L1A1_hi2c.Init.OwnAddress2 = 0;
 8003c52:	6184      	str	r4, [r0, #24]
	XNUCLEO53L1A1_hi2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8003c54:	61c4      	str	r4, [r0, #28]
	XNUCLEO53L1A1_hi2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 8003c56:	6204      	str	r4, [r0, #32]
	status = HAL_I2C_Init(&XNUCLEO53L1A1_hi2c);
 8003c58:	f001 f936 	bl	8004ec8 <HAL_I2C_Init>
}
 8003c5c:	b008      	add	sp, #32
 8003c5e:	bd70      	pop	{r4, r5, r6, pc}
 8003c60:	40023800 	.word	0x40023800
 8003c64:	40020400 	.word	0x40020400
 8003c68:	40020000 	.word	0x40020000
 8003c6c:	200002a4 	.word	0x200002a4
 8003c70:	40005400 	.word	0x40005400
 8003c74:	00061a80 	.word	0x00061a80

08003c78 <XNUCLEO53L1A1_Init>:
{
 8003c78:	b573      	push	{r0, r1, r4, r5, r6, lr}
	XNUCLEO53L1A1_I2C1Configure();
 8003c7a:	f7ff ff3b 	bl	8003af4 <XNUCLEO53L1A1_I2C1Configure>
	status = _ExpanderRd(I2cExpAddr0, 0, ExpanderData, 2);
 8003c7e:	2302      	movs	r3, #2
 8003c80:	aa01      	add	r2, sp, #4
 8003c82:	2100      	movs	r1, #0
 8003c84:	2086      	movs	r0, #134	; 0x86
 8003c86:	f7ff fee7 	bl	8003a58 <_ExpanderRd>
	if (status != 0 || ExpanderData[0] != 0x00 || ExpanderData[1] != 0x16) {
 8003c8a:	4604      	mov	r4, r0
 8003c8c:	bbb0      	cbnz	r0, 8003cfc <XNUCLEO53L1A1_Init+0x84>
 8003c8e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003c92:	bb9b      	cbnz	r3, 8003cfc <XNUCLEO53L1A1_Init+0x84>
 8003c94:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003c98:	2b16      	cmp	r3, #22
 8003c9a:	d12f      	bne.n	8003cfc <XNUCLEO53L1A1_Init+0x84>
	status = _ExpanderRd(I2cExpAddr1, 0, ExpanderData, 2);
 8003c9c:	4601      	mov	r1, r0
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	aa01      	add	r2, sp, #4
 8003ca2:	2084      	movs	r0, #132	; 0x84
 8003ca4:	f7ff fed8 	bl	8003a58 <_ExpanderRd>
	if (status != 0 || ExpanderData[0] != 0x00 || ExpanderData[1] != 0x16) {
 8003ca8:	bb38      	cbnz	r0, 8003cfa <XNUCLEO53L1A1_Init+0x82>
 8003caa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003cae:	bb2b      	cbnz	r3, 8003cfc <XNUCLEO53L1A1_Init+0x84>
 8003cb0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003cb4:	2b16      	cmp	r3, #22
 8003cb6:	d121      	bne.n	8003cfc <XNUCLEO53L1A1_Init+0x84>
	CurIOVal.u32 = 0x0;
 8003cb8:	4e12      	ldr	r6, [pc, #72]	; (8003d04 <XNUCLEO53L1A1_Init+0x8c>)
	ExpanderData[0] = 0xFF;
 8003cba:	25ff      	movs	r5, #255	; 0xff
	status = _ExpanderWR(I2cExpAddr0, GPDR, ExpanderData, 2);
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	aa01      	add	r2, sp, #4
 8003cc0:	2114      	movs	r1, #20
 8003cc2:	2086      	movs	r0, #134	; 0x86
	CurIOVal.u32 = 0x0;
 8003cc4:	6034      	str	r4, [r6, #0]
	ExpanderData[0] = 0xFF;
 8003cc6:	f88d 5004 	strb.w	r5, [sp, #4]
	ExpanderData[1] = 0xFF;
 8003cca:	f88d 5005 	strb.w	r5, [sp, #5]
	status = _ExpanderWR(I2cExpAddr0, GPDR, ExpanderData, 2);
 8003cce:	f7ff fedf 	bl	8003a90 <_ExpanderWR>
	if (status) {
 8003cd2:	4604      	mov	r4, r0
 8003cd4:	b990      	cbnz	r0, 8003cfc <XNUCLEO53L1A1_Init+0x84>
	ExpanderData[1] = 0xBF; // all but bit 14-15 that is pb1 and xhurt
 8003cd6:	23bf      	movs	r3, #191	; 0xbf
 8003cd8:	f88d 3005 	strb.w	r3, [sp, #5]
	status = _ExpanderWR(I2cExpAddr1, GPDR, ExpanderData, 2);
 8003cdc:	aa01      	add	r2, sp, #4
 8003cde:	2302      	movs	r3, #2
 8003ce0:	2114      	movs	r1, #20
 8003ce2:	2084      	movs	r0, #132	; 0x84
	ExpanderData[0] = 0xFF;
 8003ce4:	f88d 5004 	strb.w	r5, [sp, #4]
	status = _ExpanderWR(I2cExpAddr1, GPDR, ExpanderData, 2);
 8003ce8:	f7ff fed2 	bl	8003a90 <_ExpanderWR>
	if (status) {
 8003cec:	4604      	mov	r4, r0
 8003cee:	b928      	cbnz	r0, 8003cfc <XNUCLEO53L1A1_Init+0x84>
	CurIOVal.u32 = 0x7F + (0x7F << 7) + (0x7F << 16) + (0x7F << (16 + 7));
 8003cf0:	f06f 23c0 	mvn.w	r3, #3221274624	; 0xc000c000
 8003cf4:	6033      	str	r3, [r6, #0]
	status = _ExpandersSetAllIO();
 8003cf6:	f7ff fee7 	bl	8003ac8 <_ExpandersSetAllIO>
 8003cfa:	4604      	mov	r4, r0
}
 8003cfc:	4620      	mov	r0, r4
 8003cfe:	b002      	add	sp, #8
 8003d00:	bd70      	pop	{r4, r5, r6, pc}
 8003d02:	bf00      	nop
 8003d04:	20000224 	.word	0x20000224

08003d08 <XNUCLEO53L1A1_ResetId>:
	switch (DevNo) {
 8003d08:	2802      	cmp	r0, #2
 8003d0a:	d026      	beq.n	8003d5a <XNUCLEO53L1A1_ResetId+0x52>
 8003d0c:	dc0e      	bgt.n	8003d2c <XNUCLEO53L1A1_ResetId+0x24>
 8003d0e:	b1b0      	cbz	r0, 8003d3e <XNUCLEO53L1A1_ResetId+0x36>
 8003d10:	2801      	cmp	r0, #1
 8003d12:	d12b      	bne.n	8003d6c <XNUCLEO53L1A1_ResetId+0x64>
		CurIOVal.bytes[3] &= ~0x80; /* bit 15 expender 1  => byte #3 */
 8003d14:	4a17      	ldr	r2, [pc, #92]	; (8003d74 <XNUCLEO53L1A1_ResetId+0x6c>)
 8003d16:	78d3      	ldrb	r3, [r2, #3]
 8003d18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		if (state)
 8003d1c:	b961      	cbnz	r1, 8003d38 <XNUCLEO53L1A1_ResetId+0x30>
			CurIOVal.bytes[3] |= 0x80; /* bit 15 expender 1  => byte #3 */
 8003d1e:	70d3      	strb	r3, [r2, #3]
		status = _ExpanderWR(I2cExpAddr1, GPSR + 1, &CurIOVal.bytes[3], 1);
 8003d20:	4a15      	ldr	r2, [pc, #84]	; (8003d78 <XNUCLEO53L1A1_ResetId+0x70>)
 8003d22:	2301      	movs	r3, #1
 8003d24:	2113      	movs	r1, #19
 8003d26:	2084      	movs	r0, #132	; 0x84
		status = _ExpanderWR(I2cExpAddr0, GPSR + 1, &CurIOVal.bytes[1], 1);
 8003d28:	f7ff beb2 	b.w	8003a90 <_ExpanderWR>
	switch (DevNo) {
 8003d2c:	286c      	cmp	r0, #108	; 0x6c
 8003d2e:	d006      	beq.n	8003d3e <XNUCLEO53L1A1_ResetId+0x36>
 8003d30:	2872      	cmp	r0, #114	; 0x72
 8003d32:	d012      	beq.n	8003d5a <XNUCLEO53L1A1_ResetId+0x52>
 8003d34:	2863      	cmp	r0, #99	; 0x63
 8003d36:	e7ec      	b.n	8003d12 <XNUCLEO53L1A1_ResetId+0xa>
			CurIOVal.bytes[3] |= 0x80; /* bit 15 expender 1  => byte #3 */
 8003d38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d3c:	e7ef      	b.n	8003d1e <XNUCLEO53L1A1_ResetId+0x16>
		CurIOVal.bytes[1] &= ~0x40; /* bit 14 expender 0 => byte #1*/
 8003d3e:	4a0d      	ldr	r2, [pc, #52]	; (8003d74 <XNUCLEO53L1A1_ResetId+0x6c>)
 8003d40:	7853      	ldrb	r3, [r2, #1]
 8003d42:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
		if (state)
 8003d46:	b929      	cbnz	r1, 8003d54 <XNUCLEO53L1A1_ResetId+0x4c>
			CurIOVal.bytes[1] |= 0x80; /* bit 15 expender 0 => byte #1*/
 8003d48:	7053      	strb	r3, [r2, #1]
		status = _ExpanderWR(I2cExpAddr0, GPSR + 1, &CurIOVal.bytes[1], 1);
 8003d4a:	2113      	movs	r1, #19
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	4a0b      	ldr	r2, [pc, #44]	; (8003d7c <XNUCLEO53L1A1_ResetId+0x74>)
 8003d50:	2086      	movs	r0, #134	; 0x86
 8003d52:	e7e9      	b.n	8003d28 <XNUCLEO53L1A1_ResetId+0x20>
			CurIOVal.bytes[1] |= 0x40; /* bit 14 expender 0 => byte #1*/
 8003d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d58:	e7f6      	b.n	8003d48 <XNUCLEO53L1A1_ResetId+0x40>
		CurIOVal.bytes[1] &= ~0x80; /* bit 15 expender 0  => byte #1 */
 8003d5a:	4a06      	ldr	r2, [pc, #24]	; (8003d74 <XNUCLEO53L1A1_ResetId+0x6c>)
 8003d5c:	7853      	ldrb	r3, [r2, #1]
 8003d5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		if (state)
 8003d62:	2900      	cmp	r1, #0
 8003d64:	d0f0      	beq.n	8003d48 <XNUCLEO53L1A1_ResetId+0x40>
			CurIOVal.bytes[1] |= 0x80; /* bit 15 expender 0 => byte #1*/
 8003d66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d6a:	e7ed      	b.n	8003d48 <XNUCLEO53L1A1_ResetId+0x40>
}
 8003d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	20000224 	.word	0x20000224
 8003d78:	20000227 	.word	0x20000227
 8003d7c:	20000225 	.word	0x20000225

08003d80 <L6206_Board_DisableBridge>:
* @brief Disable the power bridges (leave the output bridges HiZ)
* @param[in]  bridgeId (from 0 for bridge A to 1 for bridge B)
* @retval None
**********************************************************/
void L6206_Board_DisableBridge(uint8_t bridgeId)
{
 8003d80:	b570      	push	{r4, r5, r6, lr}
	if (bridgeId == 0) {
		gpioPin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN;
		gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT;
	}else  {
		gpioPin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
		gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT;
 8003d82:	4b10      	ldr	r3, [pc, #64]	; (8003dc4 <L6206_Board_DisableBridge+0x44>)
 8003d84:	4c10      	ldr	r4, [pc, #64]	; (8003dc8 <L6206_Board_DisableBridge+0x48>)
	if (bridgeId == 0) {
 8003d86:	2800      	cmp	r0, #0
{
 8003d88:	b086      	sub	sp, #24
		gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT;
 8003d8a:	bf14      	ite	ne
 8003d8c:	461c      	movne	r4, r3
 8003d8e:	f44f 6580 	moveq.w	r5, #1024	; 0x400
	}

	/* Configure the GPIO connected to EN pin as an output */
	GPIO_InitStruct.Pin = gpioPin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d92:	f04f 0301 	mov.w	r3, #1
		gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT;
 8003d96:	bf18      	it	ne
 8003d98:	2502      	movne	r5, #2
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d9a:	2600      	movs	r6, #0
	GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
	HAL_GPIO_Init(gpioPort, &GPIO_InitStruct);
 8003d9c:	a901      	add	r1, sp, #4
 8003d9e:	4620      	mov	r0, r4
	GPIO_InitStruct.Pin = gpioPin;
 8003da0:	9501      	str	r5, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003da2:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da4:	9603      	str	r6, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003da6:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(gpioPort, &GPIO_InitStruct);
 8003da8:	f000 feb0 	bl	8004b0c <HAL_GPIO_Init>
   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
   Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
	__ASM volatile ("cpsid i" : : : "memory");
 8003dac:	b672      	cpsid	i

	__disable_irq();
	HAL_GPIO_WritePin(gpioPort, gpioPin, GPIO_PIN_RESET);
 8003dae:	4632      	mov	r2, r6
 8003db0:	4629      	mov	r1, r5
 8003db2:	4620      	mov	r0, r4
 8003db4:	f000 ff86 	bl	8004cc4 <HAL_GPIO_WritePin>
	__HAL_GPIO_EXTI_CLEAR_IT(gpioPin);
 8003db8:	4b04      	ldr	r3, [pc, #16]	; (8003dcc <L6206_Board_DisableBridge+0x4c>)
 8003dba:	615d      	str	r5, [r3, #20]
	__ASM volatile ("cpsie i" : : : "memory");
 8003dbc:	b662      	cpsie	i
	__enable_irq();
}
 8003dbe:	b006      	add	sp, #24
 8003dc0:	bd70      	pop	{r4, r5, r6, pc}
 8003dc2:	bf00      	nop
 8003dc4:	40020800 	.word	0x40020800
 8003dc8:	40020000 	.word	0x40020000
 8003dcc:	40013c00 	.word	0x40013c00

08003dd0 <L6206_Board_EnableBridge>:
* @param[in]  bridgeId (from 0 for bridge A to 1 for bridge B)
* @param[in]  addDelay if different from 0, a delay is added after bridge activation
* @retval None
**********************************************************/
void L6206_Board_EnableBridge(uint8_t bridgeId, uint8_t addDelay)
{
 8003dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
		gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT;
		flagIrqn = EXTI_FLAG_A_IRQn;
	}else  {
		gpioPin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
		gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT;
		flagIrqn = EXTI_FLAG_B_IRQn;
 8003dd2:	4b15      	ldr	r3, [pc, #84]	; (8003e28 <L6206_Board_EnableBridge+0x58>)
 8003dd4:	4c15      	ldr	r4, [pc, #84]	; (8003e2c <L6206_Board_EnableBridge+0x5c>)
 8003dd6:	2800      	cmp	r0, #0
 8003dd8:	bf16      	itet	ne
 8003dda:	461c      	movne	r4, r3
 8003ddc:	f44f 6580 	moveq.w	r5, #1024	; 0x400
 8003de0:	2502      	movne	r5, #2
{
 8003de2:	460f      	mov	r7, r1
 8003de4:	b087      	sub	sp, #28
	}

	HAL_GPIO_WritePin(gpioPort, gpioPin, GPIO_PIN_SET);
 8003de6:	f04f 0201 	mov.w	r2, #1
 8003dea:	4629      	mov	r1, r5
 8003dec:	4620      	mov	r0, r4
		flagIrqn = EXTI_FLAG_B_IRQn;
 8003dee:	bf0c      	ite	eq
 8003df0:	2628      	moveq	r6, #40	; 0x28
 8003df2:	2607      	movne	r6, #7
	HAL_GPIO_WritePin(gpioPort, gpioPin, GPIO_PIN_SET);
 8003df4:	f000 ff66 	bl	8004cc4 <HAL_GPIO_WritePin>
	if (addDelay != 0) {
 8003df8:	b117      	cbz	r7, 8003e00 <L6206_Board_EnableBridge+0x30>
		HAL_Delay(BSP_MOTOR_CONTROL_BOARD_BRIDGE_TURN_ON_DELAY);
 8003dfa:	2014      	movs	r0, #20
 8003dfc:	f000 fa8a 	bl	8004314 <HAL_Delay>
	}
	/* Configure the GPIO connected to EN pin to take interrupt */
	GPIO_InitStruct.Pin = gpioPin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003e00:	4b0b      	ldr	r3, [pc, #44]	; (8003e30 <L6206_Board_EnableBridge+0x60>)
 8003e02:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
	HAL_GPIO_Init(gpioPort, &GPIO_InitStruct);
 8003e04:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e06:	2301      	movs	r3, #1
	HAL_GPIO_Init(gpioPort, &GPIO_InitStruct);
 8003e08:	4620      	mov	r0, r4
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e0a:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003e0c:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Pin = gpioPin;
 8003e0e:	9501      	str	r5, [sp, #4]
	HAL_GPIO_Init(gpioPort, &GPIO_InitStruct);
 8003e10:	f000 fe7c 	bl	8004b0c <HAL_GPIO_Init>

	__HAL_GPIO_EXTI_CLEAR_IT(gpioPin);
 8003e14:	4b07      	ldr	r3, [pc, #28]	; (8003e34 <L6206_Board_EnableBridge+0x64>)
	HAL_NVIC_ClearPendingIRQ(flagIrqn);
 8003e16:	4630      	mov	r0, r6
	__HAL_GPIO_EXTI_CLEAR_IT(gpioPin);
 8003e18:	615d      	str	r5, [r3, #20]
	HAL_NVIC_ClearPendingIRQ(flagIrqn);
 8003e1a:	f000 fccb 	bl	80047b4 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(flagIrqn);
 8003e1e:	4630      	mov	r0, r6
 8003e20:	f000 fca6 	bl	8004770 <HAL_NVIC_EnableIRQ>
}
 8003e24:	b007      	add	sp, #28
 8003e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e28:	40020800 	.word	0x40020800
 8003e2c:	40020000 	.word	0x40020000
 8003e30:	10210000 	.word	0x10210000
 8003e34:	40013c00 	.word	0x40013c00

08003e38 <L6206_Board_GetFlagPinState>:
* @brief  Returns the FLAG pin state.
* @param[in]  bridgeId (from 0 for bridge A to 1 for bridge B)
* @retval The FLAG pin value.
**********************************************************/
uint32_t L6206_Board_GetFlagPinState(uint8_t bridgeId)
{
 8003e38:	b508      	push	{r3, lr}
		gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT;
	}else  {
		gpioPin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
		gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT;
	}
	return HAL_GPIO_ReadPin(gpioPort, gpioPin);
 8003e3a:	4b06      	ldr	r3, [pc, #24]	; (8003e54 <L6206_Board_GetFlagPinState+0x1c>)
	if (bridgeId == 0) {
 8003e3c:	2800      	cmp	r0, #0
	return HAL_GPIO_ReadPin(gpioPort, gpioPin);
 8003e3e:	bf0c      	ite	eq
 8003e40:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 8003e44:	2102      	movne	r1, #2
 8003e46:	4804      	ldr	r0, [pc, #16]	; (8003e58 <L6206_Board_GetFlagPinState+0x20>)
 8003e48:	bf18      	it	ne
 8003e4a:	4618      	movne	r0, r3
 8003e4c:	f000 ff34 	bl	8004cb8 <HAL_GPIO_ReadPin>
}
 8003e50:	bd08      	pop	{r3, pc}
 8003e52:	bf00      	nop
 8003e54:	40020800 	.word	0x40020800
 8003e58:	40020000 	.word	0x40020000

08003e5c <L6206_Board_GpioInit>:
/******************************************************//**
* @brief  Initiliases the GPIOs used by the L6206s
* @retval None
**********************************************************/
void L6206_Board_GpioInit(void)
{
 8003e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e5e:	b089      	sub	sp, #36	; 0x24
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__GPIOC_CLK_ENABLE();
 8003e60:	2400      	movs	r4, #0
 8003e62:	4b28      	ldr	r3, [pc, #160]	; (8003f04 <L6206_Board_GpioInit+0xa8>)
 8003e64:	9400      	str	r4, [sp, #0]
 8003e66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	/* This pin is reconfigured later for OCD and OVT as GPIO_MODE_IT_FALLING with GPIO_PULLUP */
	GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
	HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT, &GPIO_InitStruct);
 8003e68:	4e27      	ldr	r6, [pc, #156]	; (8003f08 <L6206_Board_GpioInit+0xac>)
	__GPIOC_CLK_ENABLE();
 8003e6a:	f042 0204 	orr.w	r2, r2, #4
 8003e6e:	631a      	str	r2, [r3, #48]	; 0x30
 8003e70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e72:	f002 0204 	and.w	r2, r2, #4
 8003e76:	9200      	str	r2, [sp, #0]
 8003e78:	9a00      	ldr	r2, [sp, #0]
	__GPIOA_CLK_ENABLE();
 8003e7a:	9401      	str	r4, [sp, #4]
 8003e7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e7e:	f042 0201 	orr.w	r2, r2, #1
 8003e82:	631a      	str	r2, [r3, #48]	; 0x30
 8003e84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e86:	f002 0201 	and.w	r2, r2, #1
 8003e8a:	9201      	str	r2, [sp, #4]
 8003e8c:	9a01      	ldr	r2, [sp, #4]
	__GPIOB_CLK_ENABLE();
 8003e8e:	9402      	str	r4, [sp, #8]
 8003e90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e92:	f042 0202 	orr.w	r2, r2, #2
 8003e96:	631a      	str	r2, [r3, #48]	; 0x30
 8003e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e9a:	9405      	str	r4, [sp, #20]
	__GPIOB_CLK_ENABLE();
 8003e9c:	f003 0302 	and.w	r3, r3, #2
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ea0:	2501      	movs	r5, #1
	__GPIOB_CLK_ENABLE();
 8003ea2:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN;
 8003ea4:	f44f 6780 	mov.w	r7, #1024	; 0x400
	HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT, &GPIO_InitStruct);
 8003ea8:	a903      	add	r1, sp, #12
 8003eaa:	4630      	mov	r0, r6
	__GPIOB_CLK_ENABLE();
 8003eac:	9b02      	ldr	r3, [sp, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003eae:	9504      	str	r5, [sp, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003eb0:	9506      	str	r5, [sp, #24]
	GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN;
 8003eb2:	9703      	str	r7, [sp, #12]
	HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT, &GPIO_InitStruct);
 8003eb4:	f000 fe2a 	bl	8004b0c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT, BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN, GPIO_PIN_RESET);
 8003eb8:	4622      	mov	r2, r4
 8003eba:	4639      	mov	r1, r7
 8003ebc:	4630      	mov	r0, r6
 8003ebe:	f000 ff01 	bl	8004cc4 <HAL_GPIO_WritePin>

	/* Set Priority of External Line Interrupt used for the OCD OVT interrupt*/
	HAL_NVIC_SetPriority(EXTI_FLAG_A_IRQn, BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PRIORITY, 0);
 8003ec2:	4622      	mov	r2, r4
 8003ec4:	2104      	movs	r1, #4
 8003ec6:	2028      	movs	r0, #40	; 0x28
 8003ec8:	f000 fc1e 	bl	8004708 <HAL_NVIC_SetPriority>

	/* Enable the External Line Interrupt used for the OCD OVT interrupt*/
	HAL_NVIC_EnableIRQ(EXTI_FLAG_A_IRQn);
 8003ecc:	2028      	movs	r0, #40	; 0x28
 8003ece:	f000 fc4f 	bl	8004770 <HAL_NVIC_EnableIRQ>

/* Configure L6206 Enable pin of Bridge B ------------------------------*/
	/* This pin is reconfigured later for OCD and OVT as GPIO_MODE_IT_FALLING with GPIO_PULLUP */
	GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ed2:	9504      	str	r5, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003ed4:	9506      	str	r5, [sp, #24]
	HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT, &GPIO_InitStruct);
 8003ed6:	4d0d      	ldr	r5, [pc, #52]	; (8003f0c <L6206_Board_GpioInit+0xb0>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed8:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
 8003eda:	2602      	movs	r6, #2
	HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT, &GPIO_InitStruct);
 8003edc:	a903      	add	r1, sp, #12
 8003ede:	4628      	mov	r0, r5
	GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
 8003ee0:	9603      	str	r6, [sp, #12]
	HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT, &GPIO_InitStruct);
 8003ee2:	f000 fe13 	bl	8004b0c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT, BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN, GPIO_PIN_RESET);
 8003ee6:	4622      	mov	r2, r4
 8003ee8:	4631      	mov	r1, r6
 8003eea:	4628      	mov	r0, r5
 8003eec:	f000 feea 	bl	8004cc4 <HAL_GPIO_WritePin>

	/* Set Priority of External Line Interrupt used for the OCD OVT interrupt*/
	HAL_NVIC_SetPriority(EXTI_FLAG_B_IRQn, BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PRIORITY, 0);
 8003ef0:	4622      	mov	r2, r4
 8003ef2:	2104      	movs	r1, #4
 8003ef4:	2007      	movs	r0, #7
 8003ef6:	f000 fc07 	bl	8004708 <HAL_NVIC_SetPriority>

	/* Enable the External Line Interrupt used for the OCD OVT interrupt*/
	HAL_NVIC_EnableIRQ(EXTI_FLAG_B_IRQn);
 8003efa:	2007      	movs	r0, #7
 8003efc:	f000 fc38 	bl	8004770 <HAL_NVIC_EnableIRQ>
}
 8003f00:	b009      	add	sp, #36	; 0x24
 8003f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f04:	40023800 	.word	0x40023800
 8003f08:	40020000 	.word	0x40020000
 8003f0c:	40020800 	.word	0x40020800

08003f10 <L6206_Board_PwmDeInit>:
**********************************************************/
void L6206_Board_PwmDeInit(uint8_t bridgeInput)
{
	TIM_HandleTypeDef *pHTim;

	switch (bridgeInput) {
 8003f10:	2802      	cmp	r0, #2
 8003f12:	d00e      	beq.n	8003f32 <L6206_Board_PwmDeInit+0x22>
 8003f14:	2803      	cmp	r0, #3
 8003f16:	d010      	beq.n	8003f3a <L6206_Board_PwmDeInit+0x2a>
 8003f18:	2801      	cmp	r0, #1
 8003f1a:	4b0a      	ldr	r3, [pc, #40]	; (8003f44 <L6206_Board_PwmDeInit+0x34>)
 8003f1c:	d005      	beq.n	8003f2a <L6206_Board_PwmDeInit+0x1a>
	case 0:
	default:
		pHTim = &hTimPwm1A;
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1A;
 8003f1e:	480a      	ldr	r0, [pc, #40]	; (8003f48 <L6206_Board_PwmDeInit+0x38>)
		pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2A;

		break;
	case 2:
		pHTim = &hTimPwm1B;
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B;
 8003f20:	6003      	str	r3, [r0, #0]
		pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM1B;
 8003f22:	2301      	movs	r3, #1

		break;
	case 3:
		pHTim = &hTimPwm2B;
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
		pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2B;
 8003f24:	7603      	strb	r3, [r0, #24]

		break;
	}
	HAL_TIM_PWM_DeInit(pHTim);
 8003f26:	f002 ba31 	b.w	800638c <HAL_TIM_PWM_DeInit>
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2A;
 8003f2a:	4808      	ldr	r0, [pc, #32]	; (8003f4c <L6206_Board_PwmDeInit+0x3c>)
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
 8003f2c:	6003      	str	r3, [r0, #0]
		pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2B;
 8003f2e:	2302      	movs	r3, #2
 8003f30:	e7f8      	b.n	8003f24 <L6206_Board_PwmDeInit+0x14>
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B;
 8003f32:	4807      	ldr	r0, [pc, #28]	; (8003f50 <L6206_Board_PwmDeInit+0x40>)
 8003f34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003f38:	e7f2      	b.n	8003f20 <L6206_Board_PwmDeInit+0x10>
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
 8003f3a:	4806      	ldr	r0, [pc, #24]	; (8003f54 <L6206_Board_PwmDeInit+0x44>)
 8003f3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003f40:	e7f4      	b.n	8003f2c <L6206_Board_PwmDeInit+0x1c>
 8003f42:	bf00      	nop
 8003f44:	40000400 	.word	0x40000400
 8003f48:	200003ac 	.word	0x200003ac
 8003f4c:	200002f8 	.word	0x200002f8
 8003f50:	20000334 	.word	0x20000334
 8003f54:	20000370 	.word	0x20000370

08003f58 <L6206_Board_PwmInit>:
* @param[in] bridgeInput 0 for input 1A, 1 for input 2A,
* 2 for input 1B, 3 for input 2B
* @retval None
**********************************************************/
void L6206_Board_PwmInit(uint8_t bridgeInput)
{
 8003f58:	b570      	push	{r4, r5, r6, lr}
	TIM_OC_InitTypeDef sConfigOC;
	TIM_MasterConfigTypeDef sMasterConfig;
	TIM_HandleTypeDef *pHTim;
	uint32_t channel;

	switch (bridgeInput) {
 8003f5a:	2802      	cmp	r0, #2
{
 8003f5c:	b08a      	sub	sp, #40	; 0x28
	switch (bridgeInput) {
 8003f5e:	d02a      	beq.n	8003fb6 <L6206_Board_PwmInit+0x5e>
 8003f60:	2803      	cmp	r0, #3
 8003f62:	d02c      	beq.n	8003fbe <L6206_Board_PwmInit+0x66>
 8003f64:	2801      	cmp	r0, #1
 8003f66:	4b18      	ldr	r3, [pc, #96]	; (8003fc8 <L6206_Board_PwmInit+0x70>)
 8003f68:	d01f      	beq.n	8003faa <L6206_Board_PwmInit+0x52>
	case 0:
	default:
		pHTim = &hTimPwm1A;
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1A;
 8003f6a:	4c18      	ldr	r4, [pc, #96]	; (8003fcc <L6206_Board_PwmInit+0x74>)
		pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2A;
		channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2A;
		break;
	case 2:
		pHTim = &hTimPwm1B;
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B;
 8003f6c:	6023      	str	r3, [r4, #0]
		pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM1B;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	7623      	strb	r3, [r4, #24]
		channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1B;
 8003f72:	2600      	movs	r6, #0
		pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2B;
		channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2B;
		break;
	}
	pHTim->Init.Prescaler = TIMER_PRESCALER - 1;
	pHTim->Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f74:	2500      	movs	r5, #0
	pHTim->Init.Prescaler = TIMER_PRESCALER - 1;
 8003f76:	233f      	movs	r3, #63	; 0x3f
 8003f78:	6063      	str	r3, [r4, #4]
	pHTim->Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f7a:	60a5      	str	r5, [r4, #8]
	pHTim->Init.Period = 0;
 8003f7c:	60e5      	str	r5, [r4, #12]
	pHTim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f7e:	6125      	str	r5, [r4, #16]
	HAL_TIM_PWM_Init(pHTim);
 8003f80:	4620      	mov	r0, r4
 8003f82:	f002 fbe7 	bl	8006754 <HAL_TIM_PWM_Init>

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f86:	2360      	movs	r3, #96	; 0x60
	sConfigOC.Pulse = 0;
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	HAL_TIM_PWM_ConfigChannel(pHTim, &sConfigOC, channel);
 8003f88:	4632      	mov	r2, r6
 8003f8a:	a903      	add	r1, sp, #12
 8003f8c:	4620      	mov	r0, r4
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f8e:	9303      	str	r3, [sp, #12]
	sConfigOC.Pulse = 0;
 8003f90:	9504      	str	r5, [sp, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f92:	9505      	str	r5, [sp, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f94:	9507      	str	r5, [sp, #28]
	HAL_TIM_PWM_ConfigChannel(pHTim, &sConfigOC, channel);
 8003f96:	f002 fc23 	bl	80067e0 <HAL_TIM_PWM_ConfigChannel>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	HAL_TIMEx_MasterConfigSynchronization(pHTim, &sMasterConfig);
 8003f9a:	a901      	add	r1, sp, #4
 8003f9c:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f9e:	9501      	str	r5, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fa0:	9502      	str	r5, [sp, #8]
	HAL_TIMEx_MasterConfigSynchronization(pHTim, &sMasterConfig);
 8003fa2:	f002 fccf 	bl	8006944 <HAL_TIMEx_MasterConfigSynchronization>
}
 8003fa6:	b00a      	add	sp, #40	; 0x28
 8003fa8:	bd70      	pop	{r4, r5, r6, pc}
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2A;
 8003faa:	4c09      	ldr	r4, [pc, #36]	; (8003fd0 <L6206_Board_PwmInit+0x78>)
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
 8003fac:	6023      	str	r3, [r4, #0]
		pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2B;
 8003fae:	2302      	movs	r3, #2
 8003fb0:	7623      	strb	r3, [r4, #24]
		channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2B;
 8003fb2:	2604      	movs	r6, #4
		break;
 8003fb4:	e7de      	b.n	8003f74 <L6206_Board_PwmInit+0x1c>
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B;
 8003fb6:	4c07      	ldr	r4, [pc, #28]	; (8003fd4 <L6206_Board_PwmInit+0x7c>)
 8003fb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003fbc:	e7d6      	b.n	8003f6c <L6206_Board_PwmInit+0x14>
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
 8003fbe:	4c06      	ldr	r4, [pc, #24]	; (8003fd8 <L6206_Board_PwmInit+0x80>)
 8003fc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003fc4:	e7f2      	b.n	8003fac <L6206_Board_PwmInit+0x54>
 8003fc6:	bf00      	nop
 8003fc8:	40000400 	.word	0x40000400
 8003fcc:	200003ac 	.word	0x200003ac
 8003fd0:	200002f8 	.word	0x200002f8
 8003fd4:	20000334 	.word	0x20000334
 8003fd8:	20000370 	.word	0x20000370

08003fdc <L6206_Board_PwmSetFreq>:
* @param[in] duty Duty cycle
* @retval None
* @note The frequency is directly the current speed of the device
**********************************************************/
void L6206_Board_PwmSetFreq(uint8_t bridgeInput, uint32_t newFreq, uint8_t duty)
{
 8003fdc:	b570      	push	{r4, r5, r6, lr}
 8003fde:	4605      	mov	r5, r0
 8003fe0:	460c      	mov	r4, r1
 8003fe2:	4616      	mov	r6, r2
	uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 8003fe4:	f002 f874 	bl	80060d0 <HAL_RCC_GetSysClockFreq>
	TIM_HandleTypeDef *pHTim;
	uint32_t period;
	uint32_t pulse;
	uint32_t channel;

	switch (bridgeInput) {
 8003fe8:	2d02      	cmp	r5, #2
 8003fea:	d026      	beq.n	800403a <L6206_Board_PwmSetFreq+0x5e>
 8003fec:	2d03      	cmp	r5, #3
 8003fee:	d028      	beq.n	8004042 <L6206_Board_PwmSetFreq+0x66>
 8003ff0:	2d01      	cmp	r5, #1
 8003ff2:	4a16      	ldr	r2, [pc, #88]	; (800404c <L6206_Board_PwmSetFreq+0x70>)
 8003ff4:	d01d      	beq.n	8004032 <L6206_Board_PwmSetFreq+0x56>
	case 0:
	default:
		pHTim = &hTimPwm1A;
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1A;
 8003ff6:	4b16      	ldr	r3, [pc, #88]	; (8004050 <L6206_Board_PwmSetFreq+0x74>)
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2A;
		channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2A;
		break;
	case 2:
		pHTim = &hTimPwm1B;
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B;
 8003ff8:	601a      	str	r2, [r3, #0]
		channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1B;
 8003ffa:	2500      	movs	r5, #0
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
		channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2B;
		break;
	}

	period = (uint32_t)((uint32_t)sysFreq / (uint32_t)(TIMER_PRESCALER * newFreq)) - 1;
 8003ffc:	01a4      	lsls	r4, r4, #6
 8003ffe:	fbb0 f0f4 	udiv	r0, r0, r4


	__HAL_TIM_SetAutoreload(pHTim, period);
 8004002:	681c      	ldr	r4, [r3, #0]
	period = (uint32_t)((uint32_t)sysFreq / (uint32_t)(TIMER_PRESCALER * newFreq)) - 1;
 8004004:	3801      	subs	r0, #1
	__HAL_TIM_SetAutoreload(pHTim, period);
 8004006:	62e0      	str	r0, [r4, #44]	; 0x2c
 8004008:	60d8      	str	r0, [r3, #12]

	if (duty == 0) {
 800400a:	b146      	cbz	r6, 800401e <L6206_Board_PwmSetFreq+0x42>
		pulse = 0;
	}else  {
		if (duty > 100) duty = 100;
		pulse = (uint32_t)(((uint32_t)period * (uint32_t)duty) / 100) + 1;
 800400c:	2e64      	cmp	r6, #100	; 0x64
 800400e:	4632      	mov	r2, r6
 8004010:	bf28      	it	cs
 8004012:	2264      	movcs	r2, #100	; 0x64
 8004014:	4350      	muls	r0, r2
 8004016:	2264      	movs	r2, #100	; 0x64
 8004018:	fbb0 f2f2 	udiv	r2, r0, r2
 800401c:	1c56      	adds	r6, r2, #1
	}
	__HAL_TIM_SetCompare(pHTim, channel, pulse);
 800401e:	08a9      	lsrs	r1, r5, #2
 8004020:	3434      	adds	r4, #52	; 0x34
	HAL_TIM_PWM_Start(pHTim, channel);
 8004022:	4618      	mov	r0, r3
	__HAL_TIM_SetCompare(pHTim, channel, pulse);
 8004024:	f844 6021 	str.w	r6, [r4, r1, lsl #2]
	HAL_TIM_PWM_Start(pHTim, channel);
 8004028:	4629      	mov	r1, r5
}
 800402a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_TIM_PWM_Start(pHTim, channel);
 800402e:	f002 bc45 	b.w	80068bc <HAL_TIM_PWM_Start>
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2A;
 8004032:	4b08      	ldr	r3, [pc, #32]	; (8004054 <L6206_Board_PwmSetFreq+0x78>)
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
 8004034:	601a      	str	r2, [r3, #0]
		channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2B;
 8004036:	2504      	movs	r5, #4
		break;
 8004038:	e7e0      	b.n	8003ffc <L6206_Board_PwmSetFreq+0x20>
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B;
 800403a:	4b07      	ldr	r3, [pc, #28]	; (8004058 <L6206_Board_PwmSetFreq+0x7c>)
 800403c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004040:	e7da      	b.n	8003ff8 <L6206_Board_PwmSetFreq+0x1c>
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
 8004042:	4b06      	ldr	r3, [pc, #24]	; (800405c <L6206_Board_PwmSetFreq+0x80>)
 8004044:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004048:	e7f4      	b.n	8004034 <L6206_Board_PwmSetFreq+0x58>
 800404a:	bf00      	nop
 800404c:	40000400 	.word	0x40000400
 8004050:	200003ac 	.word	0x200003ac
 8004054:	200002f8 	.word	0x200002f8
 8004058:	20000334 	.word	0x20000334
 800405c:	20000370 	.word	0x20000370

08004060 <L6206_Board_PwmStop>:
* 2 for input 1B, 3 for input 2B
* @retval None
**********************************************************/
void L6206_Board_PwmStop(uint8_t bridgeInput)
{
	switch (bridgeInput) {
 8004060:	2803      	cmp	r0, #3
 8004062:	d810      	bhi.n	8004086 <L6206_Board_PwmStop+0x26>
 8004064:	e8df f000 	tbb	[pc, r0]
 8004068:	0c090602 	.word	0x0c090602
	case 0:
		HAL_TIM_PWM_Stop(&hTimPwm1A, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1A);
 800406c:	4806      	ldr	r0, [pc, #24]	; (8004088 <L6206_Board_PwmStop+0x28>)
 800406e:	2100      	movs	r1, #0
		break;
	case  2:
		HAL_TIM_PWM_Stop(&hTimPwm1B, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1B);
		break;
	case  3:
		HAL_TIM_PWM_Stop(&hTimPwm2B, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2B);
 8004070:	f002 bc3a 	b.w	80068e8 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&hTimPwm2A, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2A);
 8004074:	2104      	movs	r1, #4
 8004076:	4805      	ldr	r0, [pc, #20]	; (800408c <L6206_Board_PwmStop+0x2c>)
 8004078:	e7fa      	b.n	8004070 <L6206_Board_PwmStop+0x10>
		HAL_TIM_PWM_Stop(&hTimPwm1B, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1B);
 800407a:	2100      	movs	r1, #0
 800407c:	4804      	ldr	r0, [pc, #16]	; (8004090 <L6206_Board_PwmStop+0x30>)
 800407e:	e7f7      	b.n	8004070 <L6206_Board_PwmStop+0x10>
		HAL_TIM_PWM_Stop(&hTimPwm2B, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2B);
 8004080:	2104      	movs	r1, #4
 8004082:	4804      	ldr	r0, [pc, #16]	; (8004094 <L6206_Board_PwmStop+0x34>)
 8004084:	e7f4      	b.n	8004070 <L6206_Board_PwmStop+0x10>
 8004086:	4770      	bx	lr
 8004088:	200003ac 	.word	0x200003ac
 800408c:	200002f8 	.word	0x200002f8
 8004090:	20000334 	.word	0x20000334
 8004094:	20000370 	.word	0x20000370

08004098 <L6474_GetMotorHandle>:
 8004098:	2000      	movs	r0, #0
 800409a:	4770      	bx	lr

0800409c <l647x_GetMotorHandle>:
 800409c:	2000      	movs	r0, #0
 800409e:	4770      	bx	lr

080040a0 <l648x_GetMotorHandle>:
 80040a0:	2000      	movs	r0, #0
 80040a2:	4770      	bx	lr

080040a4 <Powerstep01_GetMotorHandle>:
 80040a4:	2000      	movs	r0, #0
 80040a6:	4770      	bx	lr

080040a8 <L6208_GetMotorHandle>:
 80040a8:	2000      	movs	r0, #0
 80040aa:	4770      	bx	lr

080040ac <Stspin220_GetMotorHandle>:
 80040ac:	2000      	movs	r0, #0
 80040ae:	4770      	bx	lr

080040b0 <Stspin240_250_GetMotorHandle>:
}
/// Get motor handle for STSPIN240
__weak motorDrv_t* Stspin240_250_GetMotorHandle(void)
{
	return((motorDrv_t* )0);
}
 80040b0:	2000      	movs	r0, #0
 80040b2:	4770      	bx	lr

080040b4 <BSP_MotorControl_ErrorHandler>:
* @param[in] error number of the error
* @retval None
**********************************************************/
void BSP_MotorControl_ErrorHandler(uint16_t error)
{
	if ((motorDrvHandle != 0) && (motorDrvHandle->ErrorHandler != 0)) {
 80040b4:	4b03      	ldr	r3, [pc, #12]	; (80040c4 <BSP_MotorControl_ErrorHandler+0x10>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	b11b      	cbz	r3, 80040c2 <BSP_MotorControl_ErrorHandler+0xe>
 80040ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040be:	b103      	cbz	r3, 80040c2 <BSP_MotorControl_ErrorHandler+0xe>
		motorDrvHandle->ErrorHandler(error);
 80040c0:	4718      	bx	r3
 80040c2:	e7fe      	b.n	80040c2 <BSP_MotorControl_ErrorHandler+0xe>
 80040c4:	2000022c 	.word	0x2000022c

080040c8 <BSP_MotorControl_AttachErrorHandler>:
	if ((motorDrvHandle != 0) && (motorDrvHandle->AttachErrorHandler != 0)) {
 80040c8:	4b04      	ldr	r3, [pc, #16]	; (80040dc <BSP_MotorControl_AttachErrorHandler+0x14>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	b113      	cbz	r3, 80040d4 <BSP_MotorControl_AttachErrorHandler+0xc>
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	b103      	cbz	r3, 80040d4 <BSP_MotorControl_AttachErrorHandler+0xc>
		motorDrvHandle->AttachErrorHandler(callback);
 80040d2:	4718      	bx	r3
		MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(2);
 80040d4:	f640 0002 	movw	r0, #2050	; 0x802
 80040d8:	f7ff bfec 	b.w	80040b4 <BSP_MotorControl_ErrorHandler>
 80040dc:	2000022c 	.word	0x2000022c

080040e0 <BSP_MotorControl_AttachFlagInterrupt>:
	if ((motorDrvHandle != 0) && (motorDrvHandle->AttachFlagInterrupt != 0)) {
 80040e0:	4b04      	ldr	r3, [pc, #16]	; (80040f4 <BSP_MotorControl_AttachFlagInterrupt+0x14>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	b113      	cbz	r3, 80040ec <BSP_MotorControl_AttachFlagInterrupt+0xc>
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	b103      	cbz	r3, 80040ec <BSP_MotorControl_AttachFlagInterrupt+0xc>
		motorDrvHandle->AttachFlagInterrupt(callback);
 80040ea:	4718      	bx	r3
		MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(3);
 80040ec:	f640 0003 	movw	r0, #2051	; 0x803
 80040f0:	f7ff bfe0 	b.w	80040b4 <BSP_MotorControl_ErrorHandler>
 80040f4:	2000022c 	.word	0x2000022c

080040f8 <BSP_MotorControl_Init>:
* @param[in] initDeviceParameters Initialization structure for one device
* @retval None
**********************************************************/
void BSP_MotorControl_Init(uint16_t id, void* initDeviceParameters)
{
	if ((motorDrvHandle != 0) && (motorDrvHandle->Init != 0)) {
 80040f8:	4b05      	ldr	r3, [pc, #20]	; (8004110 <BSP_MotorControl_Init+0x18>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	b11b      	cbz	r3, 8004106 <BSP_MotorControl_Init+0xe>
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	b10b      	cbz	r3, 8004106 <BSP_MotorControl_Init+0xe>
		motorDrvHandle->Init(initDeviceParameters);
 8004102:	4608      	mov	r0, r1
 8004104:	4718      	bx	r3
	}else  {
		MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(0);
 8004106:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800410a:	f7ff bfd3 	b.w	80040b4 <BSP_MotorControl_ErrorHandler>
 800410e:	bf00      	nop
 8004110:	2000022c 	.word	0x2000022c

08004114 <BSP_MotorControl_GetDeviceState>:
**********************************************************/
motorState_t BSP_MotorControl_GetDeviceState(uint8_t deviceId)
{
	motorState_t state = INACTIVE;

	if ((motorDrvHandle != 0) && (motorDrvHandle->GetDeviceState != 0)) {
 8004114:	4b07      	ldr	r3, [pc, #28]	; (8004134 <BSP_MotorControl_GetDeviceState+0x20>)
 8004116:	681b      	ldr	r3, [r3, #0]
{
 8004118:	b510      	push	{r4, lr}
	if ((motorDrvHandle != 0) && (motorDrvHandle->GetDeviceState != 0)) {
 800411a:	b123      	cbz	r3, 8004126 <BSP_MotorControl_GetDeviceState+0x12>
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	b113      	cbz	r3, 8004126 <BSP_MotorControl_GetDeviceState+0x12>
		state = motorDrvHandle->GetDeviceState(deviceId);
	}else  {
		MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(9);
	}
	return(state);
}
 8004120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		state = motorDrvHandle->GetDeviceState(deviceId);
 8004124:	4718      	bx	r3
		MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(9);
 8004126:	f640 0009 	movw	r0, #2057	; 0x809
 800412a:	f7ff ffc3 	bl	80040b4 <BSP_MotorControl_ErrorHandler>
}
 800412e:	2008      	movs	r0, #8
 8004130:	bd10      	pop	{r4, pc}
 8004132:	bf00      	nop
 8004134:	2000022c 	.word	0x2000022c

08004138 <BSP_MotorControl_Run>:
* @note For unidirectionnal brush DC motor, direction parameter
* has no effect
**********************************************************/
void BSP_MotorControl_Run(uint8_t deviceId, motorDir_t direction)
{
	if ((motorDrvHandle != 0) && (motorDrvHandle->Run != 0)) {
 8004138:	4b04      	ldr	r3, [pc, #16]	; (800414c <BSP_MotorControl_Run+0x14>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	b113      	cbz	r3, 8004144 <BSP_MotorControl_Run+0xc>
 800413e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004140:	b103      	cbz	r3, 8004144 <BSP_MotorControl_Run+0xc>
		motorDrvHandle->Run(deviceId, direction);
 8004142:	4718      	bx	r3
	}else  {
		MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(21);
 8004144:	f640 0015 	movw	r0, #2069	; 0x815
 8004148:	f7ff bfb4 	b.w	80040b4 <BSP_MotorControl_ErrorHandler>
 800414c:	2000022c 	.word	0x2000022c

08004150 <BSP_MotorControl_SetMaxSpeed>:
* is executing a MOVE or GOTO command (but it can be used during a RUN command).
**********************************************************/
bool BSP_MotorControl_SetMaxSpeed(uint8_t deviceId, uint16_t newMaxSpeed)
{
	bool status = FALSE;
	if ((motorDrvHandle != 0) && (motorDrvHandle->SetMaxSpeed != 0)) {
 8004150:	4b07      	ldr	r3, [pc, #28]	; (8004170 <BSP_MotorControl_SetMaxSpeed+0x20>)
 8004152:	681b      	ldr	r3, [r3, #0]
{
 8004154:	b510      	push	{r4, lr}
	if ((motorDrvHandle != 0) && (motorDrvHandle->SetMaxSpeed != 0)) {
 8004156:	b123      	cbz	r3, 8004162 <BSP_MotorControl_SetMaxSpeed+0x12>
 8004158:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800415a:	b113      	cbz	r3, 8004162 <BSP_MotorControl_SetMaxSpeed+0x12>
		status = motorDrvHandle->SetMaxSpeed(deviceId, newMaxSpeed);
	}else  {
		MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(26);
	}
	return(status);
}
 800415c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		status = motorDrvHandle->SetMaxSpeed(deviceId, newMaxSpeed);
 8004160:	4718      	bx	r3
		MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(26);
 8004162:	f640 001a 	movw	r0, #2074	; 0x81a
 8004166:	f7ff ffa5 	bl	80040b4 <BSP_MotorControl_ErrorHandler>
}
 800416a:	2000      	movs	r0, #0
 800416c:	bd10      	pop	{r4, pc}
 800416e:	bf00      	nop
 8004170:	2000022c 	.word	0x2000022c

08004174 <BSP_MotorControl_CmdGetStatus>:
* GetParam command (via the functions ReadStatusRegister or CmdGetParam).
**********************************************************/
uint16_t BSP_MotorControl_CmdGetStatus(uint8_t deviceId)
{
	uint16_t status = 0;
	if ((motorDrvHandle != 0) && (motorDrvHandle->CmdGetStatus != 0)) {
 8004174:	4b07      	ldr	r3, [pc, #28]	; (8004194 <BSP_MotorControl_CmdGetStatus+0x20>)
 8004176:	681b      	ldr	r3, [r3, #0]
{
 8004178:	b510      	push	{r4, lr}
	if ((motorDrvHandle != 0) && (motorDrvHandle->CmdGetStatus != 0)) {
 800417a:	b12b      	cbz	r3, 8004188 <BSP_MotorControl_CmdGetStatus+0x14>
 800417c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004180:	b113      	cbz	r3, 8004188 <BSP_MotorControl_CmdGetStatus+0x14>
		status = motorDrvHandle->CmdGetStatus(deviceId);
	}else  {
		MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(34);
	}
	return(status);
}
 8004182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		status = motorDrvHandle->CmdGetStatus(deviceId);
 8004186:	4718      	bx	r3
		MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(34);
 8004188:	f640 0022 	movw	r0, #2082	; 0x822
 800418c:	f7ff ff92 	bl	80040b4 <BSP_MotorControl_ErrorHandler>
}
 8004190:	2000      	movs	r0, #0
 8004192:	bd10      	pop	{r4, pc}
 8004194:	2000022c 	.word	0x2000022c

08004198 <BSP_MotorControl_SetDualFullBridgeConfig>:
* for Stspin250, 0 only as no dual brush DC configuration is supported
* @retval None
**********************************************************/
void BSP_MotorControl_SetDualFullBridgeConfig(uint8_t config)
{
	if ((motorDrvHandle != 0) && (motorDrvHandle->SetDualFullBridgeConfig != 0)) {
 8004198:	4b05      	ldr	r3, [pc, #20]	; (80041b0 <BSP_MotorControl_SetDualFullBridgeConfig+0x18>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	b11b      	cbz	r3, 80041a6 <BSP_MotorControl_SetDualFullBridgeConfig+0xe>
 800419e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80041a2:	b103      	cbz	r3, 80041a6 <BSP_MotorControl_SetDualFullBridgeConfig+0xe>
		motorDrvHandle->SetDualFullBridgeConfig(config);
 80041a4:	4718      	bx	r3
	}else  {
		MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(65);
 80041a6:	f640 0041 	movw	r0, #2113	; 0x841
 80041aa:	f7ff bf83 	b.w	80040b4 <BSP_MotorControl_ErrorHandler>
 80041ae:	bf00      	nop
 80041b0:	2000022c 	.word	0x2000022c

080041b4 <BSP_MotorControl_SetBridgeInputPwmFreq>:
* @param[in] newFreq in Hz up to 100000Hz
* @retval None
**********************************************************/
void BSP_MotorControl_SetBridgeInputPwmFreq(uint8_t bridgeId, uint32_t newFreq)
{
	if ((motorDrvHandle != 0) && (motorDrvHandle->SetBridgeInputPwmFreq != 0)) {
 80041b4:	4b05      	ldr	r3, [pc, #20]	; (80041cc <BSP_MotorControl_SetBridgeInputPwmFreq+0x18>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	b11b      	cbz	r3, 80041c2 <BSP_MotorControl_SetBridgeInputPwmFreq+0xe>
 80041ba:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80041be:	b103      	cbz	r3, 80041c2 <BSP_MotorControl_SetBridgeInputPwmFreq+0xe>
		motorDrvHandle->SetBridgeInputPwmFreq(bridgeId, newFreq);
 80041c0:	4718      	bx	r3
	}else  {
		MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(67);
 80041c2:	f640 0043 	movw	r0, #2115	; 0x843
 80041c6:	f7ff bf75 	b.w	80040b4 <BSP_MotorControl_ErrorHandler>
 80041ca:	bf00      	nop
 80041cc:	2000022c 	.word	0x2000022c

080041d0 <BSP_MotorControl_SetNbDevices>:
* @retval TRUE if successfull, FALSE if failure, attempt
* to set a number of devices greater than MAX_NUMBER_OF_DEVICES
**********************************************************/
bool BSP_MotorControl_SetNbDevices(uint16_t id, uint8_t nbDevices)
{
	MotorControlBoardId = id;
 80041d0:	4b26      	ldr	r3, [pc, #152]	; (800426c <BSP_MotorControl_SetNbDevices+0x9c>)
{
 80041d2:	b570      	push	{r4, r5, r6, lr}
	MotorControlBoardId = id;
 80041d4:	8018      	strh	r0, [r3, #0]
	bool status = FALSE;
	if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6474) {
 80041d6:	f641 134a 	movw	r3, #6474	; 0x194a
 80041da:	4298      	cmp	r0, r3
{
 80041dc:	460d      	mov	r5, r1
 80041de:	4c24      	ldr	r4, [pc, #144]	; (8004270 <BSP_MotorControl_SetNbDevices+0xa0>)
	if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6474) {
 80041e0:	d10c      	bne.n	80041fc <BSP_MotorControl_SetNbDevices+0x2c>
		motorDrvHandle = L6474_GetMotorHandle();
 80041e2:	f7ff ff59 	bl	8004098 <L6474_GetMotorHandle>
	}else if (id == BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01) {
		motorDrvHandle = Powerstep01_GetMotorHandle();
 80041e6:	6020      	str	r0, [r4, #0]
		  (id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN250)) {
		motorDrvHandle = Stspin240_250_GetMotorHandle();
	}else  {
		motorDrvHandle = 0;
	}
	if ((motorDrvHandle != 0) &&
 80041e8:	6823      	ldr	r3, [r4, #0]
 80041ea:	b3e3      	cbz	r3, 8004266 <BSP_MotorControl_SetNbDevices+0x96>
	    (motorDrvHandle->SetNbDevices != 0) &&
 80041ec:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	if ((motorDrvHandle != 0) &&
 80041f0:	b3cb      	cbz	r3, 8004266 <BSP_MotorControl_SetNbDevices+0x96>
	    (motorDrvHandle->SetNbDevices != 0) &&
 80041f2:	b3c5      	cbz	r5, 8004266 <BSP_MotorControl_SetNbDevices+0x96>
	    (nbDevices != 0)) {
		status = motorDrvHandle->SetNbDevices(nbDevices);
 80041f4:	4628      	mov	r0, r5
	}
	return(status);
}
 80041f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		status = motorDrvHandle->SetNbDevices(nbDevices);
 80041fa:	4718      	bx	r3
	}else if (id == BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01) {
 80041fc:	2801      	cmp	r0, #1
 80041fe:	d102      	bne.n	8004206 <BSP_MotorControl_SetNbDevices+0x36>
		motorDrvHandle = Powerstep01_GetMotorHandle();
 8004200:	f7ff ff50 	bl	80040a4 <Powerstep01_GetMotorHandle>
 8004204:	e7ef      	b.n	80041e6 <BSP_MotorControl_SetNbDevices+0x16>
	}else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6206) {
 8004206:	f641 033e 	movw	r3, #6206	; 0x183e
 800420a:	4298      	cmp	r0, r3
 800420c:	d102      	bne.n	8004214 <BSP_MotorControl_SetNbDevices+0x44>
		motorDrvHandle = L6206_GetMotorHandle();
 800420e:	f7fc feb9 	bl	8000f84 <L6206_GetMotorHandle>
 8004212:	e7e8      	b.n	80041e6 <BSP_MotorControl_SetNbDevices+0x16>
	}else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6208) {
 8004214:	f5b0 5fc2 	cmp.w	r0, #6208	; 0x1840
 8004218:	d102      	bne.n	8004220 <BSP_MotorControl_SetNbDevices+0x50>
		motorDrvHandle = L6208_GetMotorHandle();
 800421a:	f7ff ff45 	bl	80040a8 <L6208_GetMotorHandle>
 800421e:	e7e2      	b.n	80041e6 <BSP_MotorControl_SetNbDevices+0x16>
	}else if (id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN220) {
 8004220:	28dc      	cmp	r0, #220	; 0xdc
 8004222:	d102      	bne.n	800422a <BSP_MotorControl_SetNbDevices+0x5a>
		motorDrvHandle = Stspin220_GetMotorHandle();
 8004224:	f7ff ff42 	bl	80040ac <Stspin220_GetMotorHandle>
 8004228:	e7dd      	b.n	80041e6 <BSP_MotorControl_SetNbDevices+0x16>
	}else if ((id == BSP_MOTOR_CONTROL_BOARD_ID_L6470) ||
 800422a:	f641 1346 	movw	r3, #6470	; 0x1946
 800422e:	4298      	cmp	r0, r3
 8004230:	d003      	beq.n	800423a <BSP_MotorControl_SetNbDevices+0x6a>
 8004232:	f641 1348 	movw	r3, #6472	; 0x1948
 8004236:	4298      	cmp	r0, r3
 8004238:	d102      	bne.n	8004240 <BSP_MotorControl_SetNbDevices+0x70>
		motorDrvHandle = l647x_GetMotorHandle();
 800423a:	f7ff ff2f 	bl	800409c <l647x_GetMotorHandle>
 800423e:	e7d2      	b.n	80041e6 <BSP_MotorControl_SetNbDevices+0x16>
	}else if ((id == BSP_MOTOR_CONTROL_BOARD_ID_L6480) ||
 8004240:	f020 0302 	bic.w	r3, r0, #2
 8004244:	f641 1250 	movw	r2, #6480	; 0x1950
 8004248:	4293      	cmp	r3, r2
 800424a:	d102      	bne.n	8004252 <BSP_MotorControl_SetNbDevices+0x82>
		motorDrvHandle = l648x_GetMotorHandle();
 800424c:	f7ff ff28 	bl	80040a0 <l648x_GetMotorHandle>
 8004250:	e7c9      	b.n	80041e6 <BSP_MotorControl_SetNbDevices+0x16>
	}else if ((id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN240) ||
 8004252:	28f0      	cmp	r0, #240	; 0xf0
 8004254:	d001      	beq.n	800425a <BSP_MotorControl_SetNbDevices+0x8a>
 8004256:	28fa      	cmp	r0, #250	; 0xfa
 8004258:	d102      	bne.n	8004260 <BSP_MotorControl_SetNbDevices+0x90>
		motorDrvHandle = Stspin240_250_GetMotorHandle();
 800425a:	f7ff ff29 	bl	80040b0 <Stspin240_250_GetMotorHandle>
 800425e:	e7c2      	b.n	80041e6 <BSP_MotorControl_SetNbDevices+0x16>
		motorDrvHandle = 0;
 8004260:	2300      	movs	r3, #0
 8004262:	6023      	str	r3, [r4, #0]
 8004264:	e7c0      	b.n	80041e8 <BSP_MotorControl_SetNbDevices+0x18>
}
 8004266:	2000      	movs	r0, #0
 8004268:	bd70      	pop	{r4, r5, r6, pc}
 800426a:	bf00      	nop
 800426c:	20000228 	.word	0x20000228
 8004270:	2000022c 	.word	0x2000022c

08004274 <HAL_InitTick>:
 *       implementation  in user file.
 * @param TickPriority Tick interrupt priority.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004274:	b538      	push	{r3, r4, r5, lr}
	/* Configure the SysTick to have interrupt in 1ms time basis*/
	if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U) {
 8004276:	4a0e      	ldr	r2, [pc, #56]	; (80042b0 <HAL_InitTick+0x3c>)
 8004278:	4b0e      	ldr	r3, [pc, #56]	; (80042b4 <HAL_InitTick+0x40>)
{
 800427a:	4605      	mov	r5, r0
	if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U) {
 800427c:	7818      	ldrb	r0, [r3, #0]
 800427e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004282:	fbb3 f3f0 	udiv	r3, r3, r0
 8004286:	6810      	ldr	r0, [r2, #0]
 8004288:	fbb0 f0f3 	udiv	r0, r0, r3
 800428c:	f000 fa7c 	bl	8004788 <HAL_SYSTICK_Config>
 8004290:	4604      	mov	r4, r0
 8004292:	b958      	cbnz	r0, 80042ac <HAL_InitTick+0x38>
		return HAL_ERROR;
	}

	/* Configure the SysTick IRQ priority */
	if (TickPriority < (1UL << __NVIC_PRIO_BITS)) {
 8004294:	2d0f      	cmp	r5, #15
 8004296:	d809      	bhi.n	80042ac <HAL_InitTick+0x38>
		HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004298:	4602      	mov	r2, r0
 800429a:	4629      	mov	r1, r5
 800429c:	f04f 30ff 	mov.w	r0, #4294967295
 80042a0:	f000 fa32 	bl	8004708 <HAL_NVIC_SetPriority>
		uwTickPrio = TickPriority;
 80042a4:	4b04      	ldr	r3, [pc, #16]	; (80042b8 <HAL_InitTick+0x44>)
 80042a6:	4620      	mov	r0, r4
 80042a8:	601d      	str	r5, [r3, #0]
 80042aa:	bd38      	pop	{r3, r4, r5, pc}
		return HAL_ERROR;
 80042ac:	2001      	movs	r0, #1
		return HAL_ERROR;
	}

	/* Return function status */
	return HAL_OK;
}
 80042ae:	bd38      	pop	{r3, r4, r5, pc}
 80042b0:	2000019c 	.word	0x2000019c
 80042b4:	20000184 	.word	0x20000184
 80042b8:	20000188 	.word	0x20000188

080042bc <HAL_Init>:
{
 80042bc:	b508      	push	{r3, lr}
	__HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80042be:	4b0b      	ldr	r3, [pc, #44]	; (80042ec <HAL_Init+0x30>)
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042c6:	601a      	str	r2, [r3, #0]
	__HAL_FLASH_DATA_CACHE_ENABLE();
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042ce:	601a      	str	r2, [r3, #0]
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042d6:	601a      	str	r2, [r3, #0]
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042d8:	2003      	movs	r0, #3
 80042da:	f000 fa03 	bl	80046e4 <HAL_NVIC_SetPriorityGrouping>
	HAL_InitTick(TICK_INT_PRIORITY);
 80042de:	2000      	movs	r0, #0
 80042e0:	f7ff ffc8 	bl	8004274 <HAL_InitTick>
	HAL_MspInit();
 80042e4:	f003 fb80 	bl	80079e8 <HAL_MspInit>
}
 80042e8:	2000      	movs	r0, #0
 80042ea:	bd08      	pop	{r3, pc}
 80042ec:	40023c00 	.word	0x40023c00

080042f0 <HAL_IncTick>:
 *      implementations in user file.
 * @retval None
 */
__weak void HAL_IncTick(void)
{
	uwTick += uwTickFreq;
 80042f0:	4a03      	ldr	r2, [pc, #12]	; (8004300 <HAL_IncTick+0x10>)
 80042f2:	4b04      	ldr	r3, [pc, #16]	; (8004304 <HAL_IncTick+0x14>)
 80042f4:	6811      	ldr	r1, [r2, #0]
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	440b      	add	r3, r1
 80042fa:	6013      	str	r3, [r2, #0]
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	200003e8 	.word	0x200003e8
 8004304:	20000184 	.word	0x20000184

08004308 <HAL_GetTick>:
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void)
{
	return uwTick;
 8004308:	4b01      	ldr	r3, [pc, #4]	; (8004310 <HAL_GetTick+0x8>)
 800430a:	6818      	ldr	r0, [r3, #0]
}
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	200003e8 	.word	0x200003e8

08004314 <HAL_Delay>:
 *       implementations in user file.
 * @param Delay specifies the delay time length, in milliseconds.
 * @retval None
 */
__weak void HAL_Delay(uint32_t Delay)
{
 8004314:	b538      	push	{r3, r4, r5, lr}
 8004316:	4604      	mov	r4, r0
	uint32_t tickstart = HAL_GetTick();
 8004318:	f7ff fff6 	bl	8004308 <HAL_GetTick>
	uint32_t wait = Delay;

	/* Add a freq to guarantee minimum wait */
	if (wait < HAL_MAX_DELAY) {
 800431c:	1c63      	adds	r3, r4, #1
		wait += (uint32_t)(uwTickFreq);
 800431e:	bf1c      	itt	ne
 8004320:	4b05      	ldrne	r3, [pc, #20]	; (8004338 <HAL_Delay+0x24>)
 8004322:	781b      	ldrbne	r3, [r3, #0]
	uint32_t tickstart = HAL_GetTick();
 8004324:	4605      	mov	r5, r0
		wait += (uint32_t)(uwTickFreq);
 8004326:	bf18      	it	ne
 8004328:	18e4      	addne	r4, r4, r3
	}

	while ((HAL_GetTick() - tickstart) < wait) {
 800432a:	f7ff ffed 	bl	8004308 <HAL_GetTick>
 800432e:	1b40      	subs	r0, r0, r5
 8004330:	4284      	cmp	r4, r0
 8004332:	d8fa      	bhi.n	800432a <HAL_Delay+0x16>
	}
}
 8004334:	bd38      	pop	{r3, r4, r5, pc}
 8004336:	bf00      	nop
 8004338:	20000184 	.word	0x20000184

0800433c <HAL_ADC_Init>:
 * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 *         the configuration information for the specified ADC.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800433c:	b510      	push	{r4, lr}
	HAL_StatusTypeDef tmp_hal_status = HAL_OK;

	/* Check ADC handle */
	if (hadc == NULL) {
 800433e:	4604      	mov	r4, r0
 8004340:	2800      	cmp	r0, #0
 8004342:	f000 8099 	beq.w	8004478 <HAL_ADC_Init+0x13c>

	if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START) {
		assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
	}

	if (hadc->State == HAL_ADC_STATE_RESET) {
 8004346:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004348:	b923      	cbnz	r3, 8004354 <HAL_ADC_Init+0x18>
		/* Initialize ADC error code */
		ADC_CLEAR_ERRORCODE(hadc);
 800434a:	6443      	str	r3, [r0, #68]	; 0x44

		/* Allocate lock resource and initialize it */
		hadc->Lock = HAL_UNLOCKED;
 800434c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

		/* Init the low level hardware */
		HAL_ADC_MspInit(hadc);
 8004350:	f002 fe80 	bl	8007054 <HAL_ADC_MspInit>
	}

	/* Configuration of ADC parameters if previous preliminary actions are      */
	/* correctly completed.                                                     */
	if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL)) {
 8004354:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004356:	06db      	lsls	r3, r3, #27
 8004358:	f100 808c 	bmi.w	8004474 <HAL_ADC_Init+0x138>
		/* Set ADC state */
		ADC_STATE_CLR_SET(hadc->State,
 800435c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800435e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004362:	f023 0302 	bic.w	r3, r3, #2
 8004366:	f043 0302 	orr.w	r3, r3, #2
 800436a:	6423      	str	r3, [r4, #64]	; 0x40
	/* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
	/* control register)                                                    */
	tmpADC_Common = ADC_COMMON_REGISTER(hadc);

	/* Set the ADC clock prescaler */
	tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800436c:	4b43      	ldr	r3, [pc, #268]	; (800447c <HAL_ADC_Init+0x140>)
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004374:	605a      	str	r2, [r3, #4]
	tmpADC_Common->CCR |= hadc->Init.ClockPrescaler;
 8004376:	685a      	ldr	r2, [r3, #4]
 8004378:	6861      	ldr	r1, [r4, #4]
 800437a:	430a      	orrs	r2, r1
 800437c:	605a      	str	r2, [r3, #4]

	/* Set ADC scan mode */
	hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800437e:	6823      	ldr	r3, [r4, #0]
	hadc->Instance->CR1 |= ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004380:	6921      	ldr	r1, [r4, #16]
	hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004388:	605a      	str	r2, [r3, #4]
	hadc->Instance->CR1 |= ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800438a:	685a      	ldr	r2, [r3, #4]
 800438c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004390:	605a      	str	r2, [r3, #4]

	/* Set ADC resolution */
	hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004392:	685a      	ldr	r2, [r3, #4]
	hadc->Instance->CR1 |= hadc->Init.Resolution;
 8004394:	68a1      	ldr	r1, [r4, #8]
	hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004396:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800439a:	605a      	str	r2, [r3, #4]
	hadc->Instance->CR1 |= hadc->Init.Resolution;
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	430a      	orrs	r2, r1
 80043a0:	605a      	str	r2, [r3, #4]

	/* Set ADC data alignment */
	hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80043a2:	689a      	ldr	r2, [r3, #8]
	hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80043a4:	68e1      	ldr	r1, [r4, #12]
	hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80043a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043aa:	609a      	str	r2, [r3, #8]
	hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80043ac:	689a      	ldr	r2, [r3, #8]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	609a      	str	r2, [r3, #8]
	/* Enable external trigger if trigger selection is different of software  */
	/* start.                                                                 */
	/* Note: This configuration keeps the hardware feature of parameter       */
	/*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
	/*       software start.                                                  */
	if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START) {
 80043b2:	4933      	ldr	r1, [pc, #204]	; (8004480 <HAL_ADC_Init+0x144>)
 80043b4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80043b6:	428a      	cmp	r2, r1
 80043b8:	d050      	beq.n	800445c <HAL_ADC_Init+0x120>
		/* Select external trigger to start conversion */
		hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80043ba:	6899      	ldr	r1, [r3, #8]
 80043bc:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80043c0:	6099      	str	r1, [r3, #8]
		hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80043c2:	6899      	ldr	r1, [r3, #8]
 80043c4:	430a      	orrs	r2, r1
 80043c6:	609a      	str	r2, [r3, #8]

		/* Select external trigger polarity */
		hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043c8:	689a      	ldr	r2, [r3, #8]
		hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80043ca:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
		hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80043d0:	609a      	str	r2, [r3, #8]
		hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80043d2:	689a      	ldr	r2, [r3, #8]
 80043d4:	430a      	orrs	r2, r1
	}else  {
		/* Reset the external trigger */
		hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
		hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043d6:	609a      	str	r2, [r3, #8]
	}

	/* Enable or disable ADC continuous conversion mode */
	hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80043d8:	689a      	ldr	r2, [r3, #8]
	hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80043da:	69a1      	ldr	r1, [r4, #24]
	hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80043dc:	f022 0202 	bic.w	r2, r2, #2
 80043e0:	609a      	str	r2, [r3, #8]
	hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80043e8:	609a      	str	r2, [r3, #8]

	if (hadc->Init.DiscontinuousConvMode != DISABLE) {
 80043ea:	6a22      	ldr	r2, [r4, #32]
 80043ec:	2a00      	cmp	r2, #0
 80043ee:	d03d      	beq.n	800446c <HAL_ADC_Init+0x130>
		assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

		/* Enable the selected ADC regular discontinuous mode */
		hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80043f0:	685a      	ldr	r2, [r3, #4]

		/* Set the number of channels to be converted in discontinuous mode */
		hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
		hadc->Instance->CR1 |= ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80043f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
		hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80043f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043f8:	605a      	str	r2, [r3, #4]
		hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004400:	605a      	str	r2, [r3, #4]
		hadc->Instance->CR1 |= ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004402:	685a      	ldr	r2, [r3, #4]
 8004404:	3901      	subs	r1, #1
 8004406:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
	}else  {
		/* Disable the selected ADC regular discontinuous mode */
		hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800440a:	605a      	str	r2, [r3, #4]
	}

	/* Set ADC number of conversion */
	hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800440c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	hadc->Instance->SQR1 |= ADC_SQR1(hadc->Init.NbrOfConversion);
 800440e:	69e1      	ldr	r1, [r4, #28]
	hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004410:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004414:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc->Instance->SQR1 |= ADC_SQR1(hadc->Init.NbrOfConversion);
 8004416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004418:	3901      	subs	r1, #1
 800441a:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800441e:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Enable or disable ADC DMA continuous request */
	hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004420:	689a      	ldr	r2, [r3, #8]
	hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8004422:	6b21      	ldr	r1, [r4, #48]	; 0x30
	hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004424:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004428:	609a      	str	r2, [r3, #8]
	hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800442a:	689a      	ldr	r2, [r3, #8]
 800442c:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8004430:	609a      	str	r2, [r3, #8]

	/* Enable or disable ADC end of conversion selection */
	hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004432:	689a      	ldr	r2, [r3, #8]
	hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004434:	6961      	ldr	r1, [r4, #20]
	hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800443a:	609a      	str	r2, [r3, #8]
	hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800443c:	689a      	ldr	r2, [r3, #8]
		ADC_CLEAR_ERRORCODE(hadc);
 800443e:	2000      	movs	r0, #0
	hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004440:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8004444:	609a      	str	r2, [r3, #8]
		ADC_CLEAR_ERRORCODE(hadc);
 8004446:	6460      	str	r0, [r4, #68]	; 0x44
		ADC_STATE_CLR_SET(hadc->State,
 8004448:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800444a:	f023 0303 	bic.w	r3, r3, #3
 800444e:	f043 0301 	orr.w	r3, r3, #1
 8004452:	6423      	str	r3, [r4, #64]	; 0x40
	__HAL_UNLOCK(hadc);
 8004454:	2300      	movs	r3, #0
 8004456:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	return tmp_hal_status;
 800445a:	bd10      	pop	{r4, pc}
		hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800445c:	689a      	ldr	r2, [r3, #8]
 800445e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004462:	609a      	str	r2, [r3, #8]
		hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004464:	689a      	ldr	r2, [r3, #8]
 8004466:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800446a:	e7b4      	b.n	80043d6 <HAL_ADC_Init+0x9a>
		hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004472:	e7ca      	b.n	800440a <HAL_ADC_Init+0xce>
		tmp_hal_status = HAL_ERROR;
 8004474:	2001      	movs	r0, #1
 8004476:	e7ed      	b.n	8004454 <HAL_ADC_Init+0x118>
		return HAL_ERROR;
 8004478:	2001      	movs	r0, #1
}
 800447a:	bd10      	pop	{r4, pc}
 800447c:	40012300 	.word	0x40012300
 8004480:	0f000001 	.word	0x0f000001

08004484 <HAL_ADC_ConvCpltCallback>:
 8004484:	4770      	bx	lr

08004486 <HAL_ADC_LevelOutOfWindowCallback>:
 8004486:	4770      	bx	lr

08004488 <HAL_ADC_ErrorCallback>:
{
 8004488:	4770      	bx	lr

0800448a <HAL_ADC_IRQHandler>:
{
 800448a:	b538      	push	{r3, r4, r5, lr}
	tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800448c:	6803      	ldr	r3, [r0, #0]
 800448e:	6819      	ldr	r1, [r3, #0]
	tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8004490:	685a      	ldr	r2, [r3, #4]
	if (tmp1 && tmp2) {
 8004492:	078d      	lsls	r5, r1, #30
{
 8004494:	4604      	mov	r4, r0
	if (tmp1 && tmp2) {
 8004496:	d52b      	bpl.n	80044f0 <HAL_ADC_IRQHandler+0x66>
 8004498:	0690      	lsls	r0, r2, #26
 800449a:	d529      	bpl.n	80044f0 <HAL_ADC_IRQHandler+0x66>
		if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL)) {
 800449c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800449e:	06d1      	lsls	r1, r2, #27
			SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80044a0:	bf5e      	ittt	pl
 80044a2:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 80044a4:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 80044a8:	6422      	strpl	r2, [r4, #64]	; 0x40
		if (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80044aa:	689a      	ldr	r2, [r3, #8]
 80044ac:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80044b0:	d117      	bne.n	80044e2 <HAL_ADC_IRQHandler+0x58>
 80044b2:	69a2      	ldr	r2, [r4, #24]
 80044b4:	b9aa      	cbnz	r2, 80044e2 <HAL_ADC_IRQHandler+0x58>
		    (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80044b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		    (hadc->Init.ContinuousConvMode == DISABLE) &&
 80044b8:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 80044bc:	d002      	beq.n	80044c4 <HAL_ADC_IRQHandler+0x3a>
		     HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS))) {
 80044be:	689a      	ldr	r2, [r3, #8]
		    (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80044c0:	0552      	lsls	r2, r2, #21
 80044c2:	d40e      	bmi.n	80044e2 <HAL_ADC_IRQHandler+0x58>
			__HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	f022 0220 	bic.w	r2, r2, #32
 80044ca:	605a      	str	r2, [r3, #4]
			CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80044cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80044ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044d2:	6423      	str	r3, [r4, #64]	; 0x40
			if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY)) {
 80044d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80044d6:	04db      	lsls	r3, r3, #19
				SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044d8:	bf5e      	ittt	pl
 80044da:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 80044dc:	f043 0301 	orrpl.w	r3, r3, #1
 80044e0:	6423      	strpl	r3, [r4, #64]	; 0x40
		HAL_ADC_ConvCpltCallback(hadc);
 80044e2:	4620      	mov	r0, r4
 80044e4:	f7ff ffce 	bl	8004484 <HAL_ADC_ConvCpltCallback>
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80044e8:	6823      	ldr	r3, [r4, #0]
 80044ea:	f06f 0212 	mvn.w	r2, #18
 80044ee:	601a      	str	r2, [r3, #0]
	tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80044f0:	6823      	ldr	r3, [r4, #0]
 80044f2:	6819      	ldr	r1, [r3, #0]
	tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);
 80044f4:	685a      	ldr	r2, [r3, #4]
	if (tmp1 && tmp2) {
 80044f6:	074d      	lsls	r5, r1, #29
 80044f8:	d532      	bpl.n	8004560 <HAL_ADC_IRQHandler+0xd6>
 80044fa:	0610      	lsls	r0, r2, #24
 80044fc:	d530      	bpl.n	8004560 <HAL_ADC_IRQHandler+0xd6>
		if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL)) {
 80044fe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004500:	06d1      	lsls	r1, r2, #27
			SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004502:	bf5e      	ittt	pl
 8004504:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 8004506:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 800450a:	6422      	strpl	r2, [r4, #64]	; 0x40
		if (ADC_IS_SOFTWARE_START_INJECTED(hadc) &&
 800450c:	689a      	ldr	r2, [r3, #8]
 800450e:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8004512:	d11e      	bne.n	8004552 <HAL_ADC_IRQHandler+0xc8>
		    (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8004514:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if (ADC_IS_SOFTWARE_START_INJECTED(hadc) &&
 8004516:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800451a:	d002      	beq.n	8004522 <HAL_ADC_IRQHandler+0x98>
		     HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800451c:	689a      	ldr	r2, [r3, #8]
		    (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800451e:	0552      	lsls	r2, r2, #21
 8004520:	d417      	bmi.n	8004552 <HAL_ADC_IRQHandler+0xc8>
		    (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004522:	685a      	ldr	r2, [r3, #4]
		     HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8004524:	0555      	lsls	r5, r2, #21
 8004526:	d414      	bmi.n	8004552 <HAL_ADC_IRQHandler+0xc8>
		     (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8004528:	689a      	ldr	r2, [r3, #8]
		    (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800452a:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800452e:	d110      	bne.n	8004552 <HAL_ADC_IRQHandler+0xc8>
		     (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8004530:	69a2      	ldr	r2, [r4, #24]
 8004532:	b972      	cbnz	r2, 8004552 <HAL_ADC_IRQHandler+0xc8>
			__HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800453a:	605a      	str	r2, [r3, #4]
			CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800453c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800453e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004542:	6423      	str	r3, [r4, #64]	; 0x40
			if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY)) {
 8004544:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004546:	05d8      	lsls	r0, r3, #23
				SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004548:	bf5e      	ittt	pl
 800454a:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 800454c:	f043 0301 	orrpl.w	r3, r3, #1
 8004550:	6423      	strpl	r3, [r4, #64]	; 0x40
		HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004552:	4620      	mov	r0, r4
 8004554:	f000 f8c4 	bl	80046e0 <HAL_ADCEx_InjectedConvCpltCallback>
		__HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004558:	6823      	ldr	r3, [r4, #0]
 800455a:	f06f 020c 	mvn.w	r2, #12
 800455e:	601a      	str	r2, [r3, #0]
	tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8004560:	6823      	ldr	r3, [r4, #0]
 8004562:	6819      	ldr	r1, [r3, #0]
	tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);
 8004564:	685a      	ldr	r2, [r3, #4]
	if (tmp1 && tmp2) {
 8004566:	07c9      	lsls	r1, r1, #31
 8004568:	d50f      	bpl.n	800458a <HAL_ADC_IRQHandler+0x100>
 800456a:	0655      	lsls	r5, r2, #25
 800456c:	d50d      	bpl.n	800458a <HAL_ADC_IRQHandler+0x100>
		if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD)) {
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	07d8      	lsls	r0, r3, #31
 8004572:	d50a      	bpl.n	800458a <HAL_ADC_IRQHandler+0x100>
			SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004574:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004576:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800457a:	6423      	str	r3, [r4, #64]	; 0x40
			HAL_ADC_LevelOutOfWindowCallback(hadc);
 800457c:	4620      	mov	r0, r4
 800457e:	f7ff ff82 	bl	8004486 <HAL_ADC_LevelOutOfWindowCallback>
			__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004582:	6823      	ldr	r3, [r4, #0]
 8004584:	f06f 0201 	mvn.w	r2, #1
 8004588:	601a      	str	r2, [r3, #0]
	tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800458a:	6823      	ldr	r3, [r4, #0]
 800458c:	6819      	ldr	r1, [r3, #0]
	tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800458e:	685a      	ldr	r2, [r3, #4]
	if (tmp1 && tmp2) {
 8004590:	0689      	lsls	r1, r1, #26
 8004592:	d50d      	bpl.n	80045b0 <HAL_ADC_IRQHandler+0x126>
 8004594:	0152      	lsls	r2, r2, #5
 8004596:	d50b      	bpl.n	80045b0 <HAL_ADC_IRQHandler+0x126>
		SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004598:	6c62      	ldr	r2, [r4, #68]	; 0x44
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800459a:	f06f 0520 	mvn.w	r5, #32
		SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800459e:	f042 0202 	orr.w	r2, r2, #2
 80045a2:	6462      	str	r2, [r4, #68]	; 0x44
		HAL_ADC_ErrorCallback(hadc);
 80045a4:	4620      	mov	r0, r4
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80045a6:	601d      	str	r5, [r3, #0]
		HAL_ADC_ErrorCallback(hadc);
 80045a8:	f7ff ff6e 	bl	8004488 <HAL_ADC_ErrorCallback>
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80045ac:	6823      	ldr	r3, [r4, #0]
 80045ae:	601d      	str	r5, [r3, #0]
 80045b0:	bd38      	pop	{r3, r4, r5, pc}
	...

080045b4 <HAL_ADC_ConfigChannel>:
{
 80045b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	__IO uint32_t counter = 0U;
 80045b6:	2300      	movs	r3, #0
 80045b8:	9301      	str	r3, [sp, #4]
	__HAL_LOCK(hadc);
 80045ba:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80045be:	2b01      	cmp	r3, #1
 80045c0:	f000 8083 	beq.w	80046ca <HAL_ADC_ConfigChannel+0x116>
	if (sConfig->Channel > ADC_CHANNEL_9) {
 80045c4:	680d      	ldr	r5, [r1, #0]
 80045c6:	6804      	ldr	r4, [r0, #0]
 80045c8:	688a      	ldr	r2, [r1, #8]
	__HAL_LOCK(hadc);
 80045ca:	2301      	movs	r3, #1
	if (sConfig->Channel > ADC_CHANNEL_9) {
 80045cc:	2d09      	cmp	r5, #9
	__HAL_LOCK(hadc);
 80045ce:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80045d2:	b2ae      	uxth	r6, r5
	if (sConfig->Channel > ADC_CHANNEL_9) {
 80045d4:	d92a      	bls.n	800462c <HAL_ADC_ConfigChannel+0x78>
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80045d6:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80045da:	68e7      	ldr	r7, [r4, #12]
 80045dc:	3b1e      	subs	r3, #30
 80045de:	f04f 0e07 	mov.w	lr, #7
 80045e2:	fa0e fe03 	lsl.w	lr, lr, r3
 80045e6:	ea27 070e 	bic.w	r7, r7, lr
 80045ea:	60e7      	str	r7, [r4, #12]
		hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80045ec:	68e7      	ldr	r7, [r4, #12]
 80045ee:	fa02 f303 	lsl.w	r3, r2, r3
 80045f2:	433b      	orrs	r3, r7
 80045f4:	60e3      	str	r3, [r4, #12]
	if (sConfig->Rank < 7U) {
 80045f6:	684a      	ldr	r2, [r1, #4]
 80045f8:	2a06      	cmp	r2, #6
 80045fa:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80045fe:	d825      	bhi.n	800464c <HAL_ADC_ConfigChannel+0x98>
		hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004600:	4413      	add	r3, r2
 8004602:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8004604:	1f59      	subs	r1, r3, #5
 8004606:	231f      	movs	r3, #31
 8004608:	408b      	lsls	r3, r1
 800460a:	ea27 0303 	bic.w	r3, r7, r3
 800460e:	6363      	str	r3, [r4, #52]	; 0x34
		hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004610:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004612:	fa06 f101 	lsl.w	r1, r6, r1
 8004616:	4311      	orrs	r1, r2
 8004618:	6361      	str	r1, [r4, #52]	; 0x34
	if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT)) {
 800461a:	4b2d      	ldr	r3, [pc, #180]	; (80046d0 <HAL_ADC_ConfigChannel+0x11c>)
 800461c:	429c      	cmp	r4, r3
 800461e:	d034      	beq.n	800468a <HAL_ADC_ConfigChannel+0xd6>
	__HAL_UNLOCK(hadc);
 8004620:	2300      	movs	r3, #0
 8004622:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
	return HAL_OK;
 8004626:	4618      	mov	r0, r3
}
 8004628:	b003      	add	sp, #12
 800462a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800462c:	6927      	ldr	r7, [r4, #16]
 800462e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8004632:	f04f 0e07 	mov.w	lr, #7
 8004636:	fa0e fe03 	lsl.w	lr, lr, r3
 800463a:	ea27 070e 	bic.w	r7, r7, lr
 800463e:	6127      	str	r7, [r4, #16]
		hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004640:	6927      	ldr	r7, [r4, #16]
 8004642:	fa02 f303 	lsl.w	r3, r2, r3
 8004646:	433b      	orrs	r3, r7
 8004648:	6123      	str	r3, [r4, #16]
 800464a:	e7d4      	b.n	80045f6 <HAL_ADC_ConfigChannel+0x42>
	else if (sConfig->Rank < 13U) {
 800464c:	2a0c      	cmp	r2, #12
 800464e:	d80e      	bhi.n	800466e <HAL_ADC_ConfigChannel+0xba>
		hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004650:	4413      	add	r3, r2
 8004652:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004654:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8004658:	231f      	movs	r3, #31
 800465a:	4093      	lsls	r3, r2
 800465c:	ea21 0303 	bic.w	r3, r1, r3
 8004660:	6323      	str	r3, [r4, #48]	; 0x30
		hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004662:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004664:	fa06 f202 	lsl.w	r2, r6, r2
 8004668:	431a      	orrs	r2, r3
 800466a:	6322      	str	r2, [r4, #48]	; 0x30
 800466c:	e7d5      	b.n	800461a <HAL_ADC_ConfigChannel+0x66>
		hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800466e:	4413      	add	r3, r2
 8004670:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004672:	3b41      	subs	r3, #65	; 0x41
 8004674:	221f      	movs	r2, #31
 8004676:	409a      	lsls	r2, r3
 8004678:	ea21 0202 	bic.w	r2, r1, r2
 800467c:	62e2      	str	r2, [r4, #44]	; 0x2c
		hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800467e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004680:	fa06 f103 	lsl.w	r1, r6, r3
 8004684:	4311      	orrs	r1, r2
 8004686:	62e1      	str	r1, [r4, #44]	; 0x2c
 8004688:	e7c7      	b.n	800461a <HAL_ADC_ConfigChannel+0x66>
	if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT)) {
 800468a:	2d12      	cmp	r5, #18
 800468c:	d104      	bne.n	8004698 <HAL_ADC_ConfigChannel+0xe4>
		tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800468e:	4a11      	ldr	r2, [pc, #68]	; (80046d4 <HAL_ADC_ConfigChannel+0x120>)
 8004690:	6853      	ldr	r3, [r2, #4]
 8004692:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004696:	6053      	str	r3, [r2, #4]
	if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT))) {
 8004698:	f1a5 0310 	sub.w	r3, r5, #16
 800469c:	2b01      	cmp	r3, #1
 800469e:	d8bf      	bhi.n	8004620 <HAL_ADC_ConfigChannel+0x6c>
		tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80046a0:	4a0c      	ldr	r2, [pc, #48]	; (80046d4 <HAL_ADC_ConfigChannel+0x120>)
 80046a2:	6853      	ldr	r3, [r2, #4]
		if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)) {
 80046a4:	2d10      	cmp	r5, #16
		tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80046a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80046aa:	6053      	str	r3, [r2, #4]
		if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)) {
 80046ac:	d1b8      	bne.n	8004620 <HAL_ADC_ConfigChannel+0x6c>
			counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80046ae:	4b0a      	ldr	r3, [pc, #40]	; (80046d8 <HAL_ADC_ConfigChannel+0x124>)
 80046b0:	4a0a      	ldr	r2, [pc, #40]	; (80046dc <HAL_ADC_ConfigChannel+0x128>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	fbb3 f2f2 	udiv	r2, r3, r2
 80046b8:	230a      	movs	r3, #10
 80046ba:	4353      	muls	r3, r2
				counter--;
 80046bc:	9301      	str	r3, [sp, #4]
			while (counter != 0U) {
 80046be:	9b01      	ldr	r3, [sp, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d0ad      	beq.n	8004620 <HAL_ADC_ConfigChannel+0x6c>
				counter--;
 80046c4:	9b01      	ldr	r3, [sp, #4]
 80046c6:	3b01      	subs	r3, #1
 80046c8:	e7f8      	b.n	80046bc <HAL_ADC_ConfigChannel+0x108>
	__HAL_LOCK(hadc);
 80046ca:	2002      	movs	r0, #2
 80046cc:	e7ac      	b.n	8004628 <HAL_ADC_ConfigChannel+0x74>
 80046ce:	bf00      	nop
 80046d0:	40012000 	.word	0x40012000
 80046d4:	40012300 	.word	0x40012300
 80046d8:	2000019c 	.word	0x2000019c
 80046dc:	000f4240 	.word	0x000f4240

080046e0 <HAL_ADCEx_InjectedConvCpltCallback>:
 * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 *         the configuration information for the specified ADC.
 * @retval None
 */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80046e0:	4770      	bx	lr
	...

080046e4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
	uint32_t reg_value;
	uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);       /* only values 0..7 are used          */

	reg_value = SCB->AIRCR;                                               /* read old register configuration    */
 80046e4:	4a07      	ldr	r2, [pc, #28]	; (8004704 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80046e6:	68d3      	ldr	r3, [r2, #12]
	reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046e8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80046ec:	041b      	lsls	r3, r3, #16
 80046ee:	0c1b      	lsrs	r3, r3, #16
 80046f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
	reg_value = (reg_value |
		     ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
		     (PriorityGroupTmp << 8U));                               /* Insert write key and priorty group */
 80046f4:	0200      	lsls	r0, r0, #8
 80046f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046fa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
	reg_value = (reg_value |
 80046fe:	4303      	orrs	r3, r0
	SCB->AIRCR = reg_value;
 8004700:	60d3      	str	r3, [r2, #12]
 8004702:	4770      	bx	lr
 8004704:	e000ed00 	.word	0xe000ed00

08004708 <HAL_NVIC_SetPriority>:
   \details Reads the priority grouping field from the NVIC Interrupt Controller.
   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
	return((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004708:	4b17      	ldr	r3, [pc, #92]	; (8004768 <HAL_NVIC_SetPriority+0x60>)
 *         This parameter can be a value between 0 and 15
 *         A lower priority value indicates a higher priority.
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800470a:	b530      	push	{r4, r5, lr}
 800470c:	68dc      	ldr	r4, [r3, #12]
 800470e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
	uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL); /* only values 0..7 are used          */
	uint32_t PreemptPriorityBits;
	uint32_t SubPriorityBits;

	PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004712:	f1c4 0307 	rsb	r3, r4, #7
	SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004716:	1d25      	adds	r5, r4, #4
	PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004718:	2b04      	cmp	r3, #4
 800471a:	bf28      	it	cs
 800471c:	2304      	movcs	r3, #4
	SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800471e:	2d06      	cmp	r5, #6

	return(
		((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004720:	f04f 0501 	mov.w	r5, #1
 8004724:	fa05 f303 	lsl.w	r3, r5, r3
 8004728:	f103 33ff 	add.w	r3, r3, #4294967295
	SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800472c:	bf8c      	ite	hi
 800472e:	3c03      	subhi	r4, #3
 8004730:	2400      	movls	r4, #0
		((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004732:	4019      	ands	r1, r3
 8004734:	40a1      	lsls	r1, r4
		((SubPriority & (uint32_t)((1UL << (SubPriorityBits)) - 1UL)))
 8004736:	fa05 f404 	lsl.w	r4, r5, r4
 800473a:	3c01      	subs	r4, #1
 800473c:	4022      	ands	r2, r4
	if ((int32_t)(IRQn) < 0) {
 800473e:	2800      	cmp	r0, #0
		((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004740:	ea42 0201 	orr.w	r2, r2, r1
 8004744:	ea4f 1202 	mov.w	r2, r2, lsl #4
		NVIC->IP[((uint32_t)(int32_t)IRQn)] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004748:	bfaf      	iteee	ge
 800474a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL) - 4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800474e:	f000 000f 	andlt.w	r0, r0, #15
 8004752:	4b06      	ldrlt	r3, [pc, #24]	; (800476c <HAL_NVIC_SetPriority+0x64>)
 8004754:	b2d2      	uxtblt	r2, r2
		NVIC->IP[((uint32_t)(int32_t)IRQn)] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004756:	bfa5      	ittet	ge
 8004758:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 800475c:	b2d2      	uxtbge	r2, r2
		SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL) - 4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800475e:	541a      	strblt	r2, [r3, r0]
		NVIC->IP[((uint32_t)(int32_t)IRQn)] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004760:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8004764:	bd30      	pop	{r4, r5, pc}
 8004766:	bf00      	nop
 8004768:	e000ed00 	.word	0xe000ed00
 800476c:	e000ed14 	.word	0xe000ed14

08004770 <HAL_NVIC_EnableIRQ>:
	NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004770:	0942      	lsrs	r2, r0, #5
 8004772:	2301      	movs	r3, #1
 8004774:	f000 001f 	and.w	r0, r0, #31
 8004778:	fa03 f000 	lsl.w	r0, r3, r0
 800477c:	4b01      	ldr	r3, [pc, #4]	; (8004784 <HAL_NVIC_EnableIRQ+0x14>)
 800477e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004782:	4770      	bx	lr
 8004784:	e000e100 	.word	0xe000e100

08004788 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
	if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) {
 8004788:	3801      	subs	r0, #1
 800478a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800478e:	d20a      	bcs.n	80047a6 <HAL_SYSTICK_Config+0x1e>
		return(1UL);                                        /* Reload value impossible */
	}

	SysTick->LOAD = (uint32_t)(ticks - 1UL);                    /* set reload register */
 8004790:	4b06      	ldr	r3, [pc, #24]	; (80047ac <HAL_SYSTICK_Config+0x24>)
		SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL) - 4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004792:	4a07      	ldr	r2, [pc, #28]	; (80047b0 <HAL_SYSTICK_Config+0x28>)
	SysTick->LOAD = (uint32_t)(ticks - 1UL);                    /* set reload register */
 8004794:	6058      	str	r0, [r3, #4]
		SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL) - 4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004796:	21f0      	movs	r1, #240	; 0xf0
 8004798:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
	NVIC_SetPriority(SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
	SysTick->VAL = 0UL;                                         /* Load the SysTick Counter Value */
 800479c:	2000      	movs	r0, #0
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 800479e:	2207      	movs	r2, #7
	SysTick->VAL = 0UL;                                         /* Load the SysTick Counter Value */
 80047a0:	6098      	str	r0, [r3, #8]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 80047a2:	601a      	str	r2, [r3, #0]
 80047a4:	4770      	bx	lr
		return(1UL);                                        /* Reload value impossible */
 80047a6:	2001      	movs	r0, #1
 *                  - 1  Function failed.
 */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
	return SysTick_Config(TicksNumb);
}
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	e000e010 	.word	0xe000e010
 80047b0:	e000ed00 	.word	0xe000ed00

080047b4 <HAL_NVIC_ClearPendingIRQ>:
	NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80047b4:	0943      	lsrs	r3, r0, #5
 80047b6:	2201      	movs	r2, #1
 80047b8:	f000 001f 	and.w	r0, r0, #31
 80047bc:	fa02 f000 	lsl.w	r0, r2, r0
 80047c0:	3360      	adds	r3, #96	; 0x60
 80047c2:	4a02      	ldr	r2, [pc, #8]	; (80047cc <HAL_NVIC_ClearPendingIRQ+0x18>)
 80047c4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	e000e100 	.word	0xe000e100

080047d0 <DMA_CalcBaseAndBitshift>:
 *                     the configuration information for the specified DMA Stream.
 * @retval Stream base address
 */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
	uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80047d0:	6803      	ldr	r3, [r0, #0]
 80047d2:	b2da      	uxtb	r2, r3
 80047d4:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80047d8:	f023 0303 	bic.w	r3, r3, #3
 80047dc:	2118      	movs	r1, #24
 80047de:	3a10      	subs	r2, #16
 80047e0:	fbb2 f2f1 	udiv	r2, r2, r1

	/* lookup table for necessary bitshift of flags within status registers */
	static const uint8_t flagBitshiftOffset[8U] = { 0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U };
	hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80047e4:	4904      	ldr	r1, [pc, #16]	; (80047f8 <DMA_CalcBaseAndBitshift+0x28>)

	if (stream_number > 3U) {
 80047e6:	2a03      	cmp	r2, #3
		/* return pointer to HISR and HIFCR */
		hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80047e8:	bf88      	it	hi
 80047ea:	3304      	addhi	r3, #4
	hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80047ec:	5c89      	ldrb	r1, [r1, r2]
	}else  {
		/* return pointer to LISR and LIFCR */
		hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80047ee:	6583      	str	r3, [r0, #88]	; 0x58
	hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80047f0:	65c1      	str	r1, [r0, #92]	; 0x5c
	}

	return hdma->StreamBaseAddress;
}
 80047f2:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	0800939f 	.word	0x0800939f

080047fc <HAL_DMA_Init>:
{
 80047fc:	b570      	push	{r4, r5, r6, lr}
 80047fe:	4604      	mov	r4, r0
	uint32_t tickstart = HAL_GetTick();
 8004800:	f7ff fd82 	bl	8004308 <HAL_GetTick>
 8004804:	4605      	mov	r5, r0
	if (hdma == NULL) {
 8004806:	2c00      	cmp	r4, #0
 8004808:	d071      	beq.n	80048ee <HAL_DMA_Init+0xf2>
	__HAL_UNLOCK(hdma);
 800480a:	2300      	movs	r3, #0
 800480c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	__HAL_DMA_DISABLE(hdma);
 8004810:	6822      	ldr	r2, [r4, #0]
	hdma->State = HAL_DMA_STATE_BUSY;
 8004812:	2302      	movs	r3, #2
 8004814:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	__HAL_DMA_DISABLE(hdma);
 8004818:	6813      	ldr	r3, [r2, #0]
 800481a:	f023 0301 	bic.w	r3, r3, #1
 800481e:	6013      	str	r3, [r2, #0]
	while ((hdma->Instance->CR & DMA_SxCR_EN) != RESET) {
 8004820:	6821      	ldr	r1, [r4, #0]
 8004822:	680b      	ldr	r3, [r1, #0]
 8004824:	07d8      	lsls	r0, r3, #31
 8004826:	d43c      	bmi.n	80048a2 <HAL_DMA_Init+0xa6>
	tmp = hdma->Instance->CR;
 8004828:	680b      	ldr	r3, [r1, #0]
	tmp &= ((uint32_t) ~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800482a:	4d32      	ldr	r5, [pc, #200]	; (80048f4 <HAL_DMA_Init+0xf8>)
	tmp |= hdma->Init.Channel | hdma->Init.Direction |
 800482c:	6862      	ldr	r2, [r4, #4]
	       hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800482e:	69a0      	ldr	r0, [r4, #24]
	tmp &= ((uint32_t) ~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004830:	401d      	ands	r5, r3
	tmp |= hdma->Init.Channel | hdma->Init.Direction |
 8004832:	68a3      	ldr	r3, [r4, #8]
 8004834:	4313      	orrs	r3, r2
 8004836:	68e2      	ldr	r2, [r4, #12]
 8004838:	4313      	orrs	r3, r2
	       hdma->Init.PeriphInc | hdma->Init.MemInc |
 800483a:	6922      	ldr	r2, [r4, #16]
 800483c:	4313      	orrs	r3, r2
 800483e:	6962      	ldr	r2, [r4, #20]
 8004840:	4313      	orrs	r3, r2
	       hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004842:	69e2      	ldr	r2, [r4, #28]
 8004844:	4303      	orrs	r3, r0
 8004846:	4313      	orrs	r3, r2
	       hdma->Init.Mode | hdma->Init.Priority;
 8004848:	6a22      	ldr	r2, [r4, #32]
 800484a:	4313      	orrs	r3, r2
	if (hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE) {
 800484c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800484e:	2a04      	cmp	r2, #4
	tmp |= hdma->Init.Channel | hdma->Init.Direction |
 8004850:	ea43 0305 	orr.w	r3, r3, r5
		tmp |= hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004854:	bf01      	itttt	eq
 8004856:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8004858:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 800485a:	4335      	orreq	r5, r6
 800485c:	432b      	orreq	r3, r5
	hdma->Instance->CR = tmp;
 800485e:	600b      	str	r3, [r1, #0]
	tmp = hdma->Instance->FCR;
 8004860:	694b      	ldr	r3, [r1, #20]
	if (hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE) {
 8004862:	2a04      	cmp	r2, #4
	tmp &= (uint32_t) ~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004864:	f023 0307 	bic.w	r3, r3, #7
	tmp |= hdma->Init.FIFOMode;
 8004868:	ea43 0302 	orr.w	r3, r3, r2
	if (hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE) {
 800486c:	d10b      	bne.n	8004886 <HAL_DMA_Init+0x8a>
		tmp |= hdma->Init.FIFOThreshold;
 800486e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
		if (hdma->Init.MemBurst != DMA_MBURST_SINGLE) {
 8004870:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
		tmp |= hdma->Init.FIFOThreshold;
 8004872:	4313      	orrs	r3, r2
		if (hdma->Init.MemBurst != DMA_MBURST_SINGLE) {
 8004874:	b13d      	cbz	r5, 8004886 <HAL_DMA_Init+0x8a>
{
	HAL_StatusTypeDef status = HAL_OK;
	uint32_t tmp = hdma->Init.FIFOThreshold;

	/* Memory Data size equal to Byte */
	if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE) {
 8004876:	b9f8      	cbnz	r0, 80048b8 <HAL_DMA_Init+0xbc>
		switch (tmp) {
 8004878:	2a01      	cmp	r2, #1
 800487a:	d02d      	beq.n	80048d8 <HAL_DMA_Init+0xdc>
 800487c:	d301      	bcc.n	8004882 <HAL_DMA_Init+0x86>
 800487e:	2a02      	cmp	r2, #2
			break;
		}
	}
	/* Memory Data size equal to Word */
	else{
		switch (tmp) {
 8004880:	d101      	bne.n	8004886 <HAL_DMA_Init+0x8a>
		case DMA_FIFO_THRESHOLD_HALFFULL:
		case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
			status = HAL_ERROR;
			break;
		case DMA_FIFO_THRESHOLD_FULL:
			if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1) {
 8004882:	01ea      	lsls	r2, r5, #7
 8004884:	d42b      	bmi.n	80048de <HAL_DMA_Init+0xe2>
	hdma->Instance->FCR = tmp;
 8004886:	614b      	str	r3, [r1, #20]
	regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004888:	4620      	mov	r0, r4
 800488a:	f7ff ffa1 	bl	80047d0 <DMA_CalcBaseAndBitshift>
	regs->IFCR = 0x3FU << hdma->StreamIndex;
 800488e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004890:	233f      	movs	r3, #63	; 0x3f
 8004892:	4093      	lsls	r3, r2
 8004894:	6083      	str	r3, [r0, #8]
	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004896:	2000      	movs	r0, #0
	hdma->State = HAL_DMA_STATE_READY;
 8004898:	2301      	movs	r3, #1
	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800489a:	6560      	str	r0, [r4, #84]	; 0x54
	hdma->State = HAL_DMA_STATE_READY;
 800489c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	return HAL_OK;
 80048a0:	bd70      	pop	{r4, r5, r6, pc}
		if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT) {
 80048a2:	f7ff fd31 	bl	8004308 <HAL_GetTick>
 80048a6:	1b40      	subs	r0, r0, r5
 80048a8:	2805      	cmp	r0, #5
 80048aa:	d9b9      	bls.n	8004820 <HAL_DMA_Init+0x24>
			hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048ac:	2320      	movs	r3, #32
 80048ae:	6563      	str	r3, [r4, #84]	; 0x54
			hdma->State = HAL_DMA_STATE_TIMEOUT;
 80048b0:	2003      	movs	r0, #3
				hdma->State = HAL_DMA_STATE_READY;
 80048b2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80048b6:	bd70      	pop	{r4, r5, r6, pc}
	else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD) {
 80048b8:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80048bc:	d113      	bne.n	80048e6 <HAL_DMA_Init+0xea>
		switch (tmp) {
 80048be:	2a03      	cmp	r2, #3
 80048c0:	d8e1      	bhi.n	8004886 <HAL_DMA_Init+0x8a>
 80048c2:	a001      	add	r0, pc, #4	; (adr r0, 80048c8 <HAL_DMA_Init+0xcc>)
 80048c4:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80048c8:	080048df 	.word	0x080048df
 80048cc:	08004883 	.word	0x08004883
 80048d0:	080048df 	.word	0x080048df
 80048d4:	080048d9 	.word	0x080048d9
			if (hdma->Init.MemBurst == DMA_MBURST_INC16) {
 80048d8:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80048dc:	d1d3      	bne.n	8004886 <HAL_DMA_Init+0x8a>
				hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80048de:	2340      	movs	r3, #64	; 0x40
 80048e0:	6563      	str	r3, [r4, #84]	; 0x54
				hdma->State = HAL_DMA_STATE_READY;
 80048e2:	2001      	movs	r0, #1
 80048e4:	e7e5      	b.n	80048b2 <HAL_DMA_Init+0xb6>
		switch (tmp) {
 80048e6:	2a02      	cmp	r2, #2
 80048e8:	d9f9      	bls.n	80048de <HAL_DMA_Init+0xe2>
 80048ea:	2a03      	cmp	r2, #3
 80048ec:	e7c8      	b.n	8004880 <HAL_DMA_Init+0x84>
		return HAL_ERROR;
 80048ee:	2001      	movs	r0, #1
 80048f0:	bd70      	pop	{r4, r5, r6, pc}
 80048f2:	bf00      	nop
 80048f4:	f010803f 	.word	0xf010803f

080048f8 <HAL_DMA_Start_IT>:
{
 80048f8:	b570      	push	{r4, r5, r6, lr}
	__HAL_LOCK(hdma);
 80048fa:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80048fe:	2c01      	cmp	r4, #1
 8004900:	d036      	beq.n	8004970 <HAL_DMA_Start_IT+0x78>
 8004902:	2401      	movs	r4, #1
 8004904:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
	if (HAL_DMA_STATE_READY == hdma->State) {
 8004908:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
	DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800490c:	6d86      	ldr	r6, [r0, #88]	; 0x58
	if (HAL_DMA_STATE_READY == hdma->State) {
 800490e:	2c01      	cmp	r4, #1
 8004910:	f04f 0500 	mov.w	r5, #0
 8004914:	f04f 0402 	mov.w	r4, #2
 8004918:	d128      	bne.n	800496c <HAL_DMA_Start_IT+0x74>
		hdma->State = HAL_DMA_STATE_BUSY;
 800491a:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
	hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800491e:	6804      	ldr	r4, [r0, #0]
		hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004920:	6545      	str	r5, [r0, #84]	; 0x54
	hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004922:	6825      	ldr	r5, [r4, #0]
 8004924:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8004928:	6025      	str	r5, [r4, #0]
	hdma->Instance->NDTR = DataLength;
 800492a:	6063      	str	r3, [r4, #4]
	if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH) {
 800492c:	6883      	ldr	r3, [r0, #8]
 800492e:	2b40      	cmp	r3, #64	; 0x40
		hdma->Instance->PAR = DstAddress;
 8004930:	bf0e      	itee	eq
 8004932:	60a2      	streq	r2, [r4, #8]
		hdma->Instance->PAR = SrcAddress;
 8004934:	60a1      	strne	r1, [r4, #8]
		hdma->Instance->M0AR = DstAddress;
 8004936:	60e2      	strne	r2, [r4, #12]
		regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004938:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
		hdma->Instance->M0AR = SrcAddress;
 800493a:	bf08      	it	eq
 800493c:	60e1      	streq	r1, [r4, #12]
		regs->IFCR = 0x3FU << hdma->StreamIndex;
 800493e:	233f      	movs	r3, #63	; 0x3f
 8004940:	4093      	lsls	r3, r2
 8004942:	60b3      	str	r3, [r6, #8]
		hdma->Instance->CR |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004944:	6823      	ldr	r3, [r4, #0]
 8004946:	f043 0316 	orr.w	r3, r3, #22
 800494a:	6023      	str	r3, [r4, #0]
		hdma->Instance->FCR |= DMA_IT_FE;
 800494c:	6963      	ldr	r3, [r4, #20]
 800494e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004952:	6163      	str	r3, [r4, #20]
		if (hdma->XferHalfCpltCallback != NULL) {
 8004954:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004956:	b11b      	cbz	r3, 8004960 <HAL_DMA_Start_IT+0x68>
			hdma->Instance->CR |= DMA_IT_HT;
 8004958:	6823      	ldr	r3, [r4, #0]
 800495a:	f043 0308 	orr.w	r3, r3, #8
 800495e:	6023      	str	r3, [r4, #0]
		__HAL_DMA_ENABLE(hdma);
 8004960:	6823      	ldr	r3, [r4, #0]
 8004962:	f043 0301 	orr.w	r3, r3, #1
 8004966:	6023      	str	r3, [r4, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004968:	2000      	movs	r0, #0
 800496a:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_UNLOCK(hdma);
 800496c:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
	__HAL_LOCK(hdma);
 8004970:	2002      	movs	r0, #2
}
 8004972:	bd70      	pop	{r4, r5, r6, pc}

08004974 <HAL_DMA_Abort_IT>:
	if (hdma->State != HAL_DMA_STATE_BUSY) {
 8004974:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8004978:	2b02      	cmp	r3, #2
 800497a:	d003      	beq.n	8004984 <HAL_DMA_Abort_IT+0x10>
		hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800497c:	2380      	movs	r3, #128	; 0x80
 800497e:	6543      	str	r3, [r0, #84]	; 0x54
		return HAL_ERROR;
 8004980:	2001      	movs	r0, #1
 8004982:	4770      	bx	lr
		__HAL_DMA_DISABLE(hdma);
 8004984:	6802      	ldr	r2, [r0, #0]
		hdma->State = HAL_DMA_STATE_ABORT;
 8004986:	2305      	movs	r3, #5
 8004988:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
		__HAL_DMA_DISABLE(hdma);
 800498c:	6813      	ldr	r3, [r2, #0]
 800498e:	f023 0301 	bic.w	r3, r3, #1
 8004992:	6013      	str	r3, [r2, #0]
	return HAL_OK;
 8004994:	2000      	movs	r0, #0
}
 8004996:	4770      	bx	lr

08004998 <HAL_DMA_IRQHandler>:
{
 8004998:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	__IO uint32_t count = 0U;
 800499a:	2300      	movs	r3, #0
 800499c:	9301      	str	r3, [sp, #4]
	uint32_t timeout = SystemCoreClock / 9600U;
 800499e:	4b5a      	ldr	r3, [pc, #360]	; (8004b08 <HAL_DMA_IRQHandler+0x170>)
	DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049a0:	6d85      	ldr	r5, [r0, #88]	; 0x58
	uint32_t timeout = SystemCoreClock / 9600U;
 80049a2:	681f      	ldr	r7, [r3, #0]
	if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET) {
 80049a4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
	tmpisr = regs->ISR;
 80049a6:	682e      	ldr	r6, [r5, #0]
	if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET) {
 80049a8:	2208      	movs	r2, #8
 80049aa:	409a      	lsls	r2, r3
 80049ac:	4216      	tst	r6, r2
{
 80049ae:	4604      	mov	r4, r0
	if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET) {
 80049b0:	d00c      	beq.n	80049cc <HAL_DMA_IRQHandler+0x34>
		if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET) {
 80049b2:	6801      	ldr	r1, [r0, #0]
 80049b4:	6808      	ldr	r0, [r1, #0]
 80049b6:	0740      	lsls	r0, r0, #29
 80049b8:	d508      	bpl.n	80049cc <HAL_DMA_IRQHandler+0x34>
			hdma->Instance->CR &= ~(DMA_IT_TE);
 80049ba:	6808      	ldr	r0, [r1, #0]
 80049bc:	f020 0004 	bic.w	r0, r0, #4
 80049c0:	6008      	str	r0, [r1, #0]
			regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80049c2:	60aa      	str	r2, [r5, #8]
			hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80049c4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80049c6:	f042 0201 	orr.w	r2, r2, #1
 80049ca:	6562      	str	r2, [r4, #84]	; 0x54
	if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET) {
 80049cc:	2201      	movs	r2, #1
 80049ce:	409a      	lsls	r2, r3
 80049d0:	4216      	tst	r6, r2
 80049d2:	d008      	beq.n	80049e6 <HAL_DMA_IRQHandler+0x4e>
		if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET) {
 80049d4:	6821      	ldr	r1, [r4, #0]
 80049d6:	6949      	ldr	r1, [r1, #20]
 80049d8:	0609      	lsls	r1, r1, #24
			regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80049da:	bf41      	itttt	mi
 80049dc:	60aa      	strmi	r2, [r5, #8]
			hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80049de:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80049e0:	f042 0202 	orrmi.w	r2, r2, #2
 80049e4:	6562      	strmi	r2, [r4, #84]	; 0x54
	if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET) {
 80049e6:	2204      	movs	r2, #4
 80049e8:	409a      	lsls	r2, r3
 80049ea:	4216      	tst	r6, r2
 80049ec:	d008      	beq.n	8004a00 <HAL_DMA_IRQHandler+0x68>
		if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET) {
 80049ee:	6821      	ldr	r1, [r4, #0]
 80049f0:	6809      	ldr	r1, [r1, #0]
 80049f2:	0788      	lsls	r0, r1, #30
			regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80049f4:	bf41      	itttt	mi
 80049f6:	60aa      	strmi	r2, [r5, #8]
			hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80049f8:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80049fa:	f042 0204 	orrmi.w	r2, r2, #4
 80049fe:	6562      	strmi	r2, [r4, #84]	; 0x54
	if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET) {
 8004a00:	2210      	movs	r2, #16
 8004a02:	409a      	lsls	r2, r3
 8004a04:	4216      	tst	r6, r2
 8004a06:	d010      	beq.n	8004a2a <HAL_DMA_IRQHandler+0x92>
		if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET) {
 8004a08:	6823      	ldr	r3, [r4, #0]
 8004a0a:	6819      	ldr	r1, [r3, #0]
 8004a0c:	0709      	lsls	r1, r1, #28
 8004a0e:	d50c      	bpl.n	8004a2a <HAL_DMA_IRQHandler+0x92>
			regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004a10:	60aa      	str	r2, [r5, #8]
			if (((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET) {
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	0350      	lsls	r0, r2, #13
 8004a16:	d535      	bpl.n	8004a84 <HAL_DMA_IRQHandler+0xec>
				if ((hdma->Instance->CR & DMA_SxCR_CT) == RESET) {
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	0319      	lsls	r1, r3, #12
 8004a1c:	d401      	bmi.n	8004a22 <HAL_DMA_IRQHandler+0x8a>
				if (hdma->XferHalfCpltCallback != NULL) {
 8004a1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a20:	e000      	b.n	8004a24 <HAL_DMA_IRQHandler+0x8c>
					if (hdma->XferM1HalfCpltCallback != NULL) {
 8004a22:	6ca3      	ldr	r3, [r4, #72]	; 0x48
				if (hdma->XferHalfCpltCallback != NULL) {
 8004a24:	b10b      	cbz	r3, 8004a2a <HAL_DMA_IRQHandler+0x92>
					hdma->XferHalfCpltCallback(hdma);
 8004a26:	4620      	mov	r0, r4
 8004a28:	4798      	blx	r3
	if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET) {
 8004a2a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004a2c:	2220      	movs	r2, #32
 8004a2e:	408a      	lsls	r2, r1
 8004a30:	4216      	tst	r6, r2
 8004a32:	d038      	beq.n	8004aa6 <HAL_DMA_IRQHandler+0x10e>
		if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET) {
 8004a34:	6823      	ldr	r3, [r4, #0]
 8004a36:	6818      	ldr	r0, [r3, #0]
 8004a38:	06c6      	lsls	r6, r0, #27
 8004a3a:	d534      	bpl.n	8004aa6 <HAL_DMA_IRQHandler+0x10e>
			regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004a3c:	60aa      	str	r2, [r5, #8]
			if (HAL_DMA_STATE_ABORT == hdma->State) {
 8004a3e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8004a42:	2a05      	cmp	r2, #5
				hdma->Instance->CR &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a44:	681a      	ldr	r2, [r3, #0]
			if (HAL_DMA_STATE_ABORT == hdma->State) {
 8004a46:	d125      	bne.n	8004a94 <HAL_DMA_IRQHandler+0xfc>
				hdma->Instance->CR &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a48:	f022 0216 	bic.w	r2, r2, #22
 8004a4c:	601a      	str	r2, [r3, #0]
				hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004a4e:	695a      	ldr	r2, [r3, #20]
 8004a50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a54:	615a      	str	r2, [r3, #20]
				if ((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL)) {
 8004a56:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004a58:	b90a      	cbnz	r2, 8004a5e <HAL_DMA_IRQHandler+0xc6>
 8004a5a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004a5c:	b11a      	cbz	r2, 8004a66 <HAL_DMA_IRQHandler+0xce>
					hdma->Instance->CR &= ~(DMA_IT_HT);
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	f022 0208 	bic.w	r2, r2, #8
 8004a64:	601a      	str	r2, [r3, #0]
				regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a66:	233f      	movs	r3, #63	; 0x3f
 8004a68:	408b      	lsls	r3, r1
 8004a6a:	60ab      	str	r3, [r5, #8]
				__HAL_UNLOCK(hdma);
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
				hdma->State = HAL_DMA_STATE_READY;
 8004a72:	2301      	movs	r3, #1
 8004a74:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
				if (hdma->XferAbortCallback != NULL) {
 8004a78:	6d23      	ldr	r3, [r4, #80]	; 0x50
		if (hdma->XferErrorCallback != NULL) {
 8004a7a:	b10b      	cbz	r3, 8004a80 <HAL_DMA_IRQHandler+0xe8>
			hdma->XferErrorCallback(hdma);
 8004a7c:	4620      	mov	r0, r4
 8004a7e:	4798      	blx	r3
}
 8004a80:	b003      	add	sp, #12
 8004a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if ((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET) {
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	05d2      	lsls	r2, r2, #23
					hdma->Instance->CR &= ~(DMA_IT_HT);
 8004a88:	bf5e      	ittt	pl
 8004a8a:	681a      	ldrpl	r2, [r3, #0]
 8004a8c:	f022 0208 	bicpl.w	r2, r2, #8
 8004a90:	601a      	strpl	r2, [r3, #0]
 8004a92:	e7c4      	b.n	8004a1e <HAL_DMA_IRQHandler+0x86>
			if (((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET) {
 8004a94:	0350      	lsls	r0, r2, #13
 8004a96:	d528      	bpl.n	8004aea <HAL_DMA_IRQHandler+0x152>
				if ((hdma->Instance->CR & DMA_SxCR_CT) == RESET) {
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	0319      	lsls	r1, r3, #12
 8004a9c:	d432      	bmi.n	8004b04 <HAL_DMA_IRQHandler+0x16c>
					if (hdma->XferM1CpltCallback != NULL) {
 8004a9e:	6c63      	ldr	r3, [r4, #68]	; 0x44
				if (hdma->XferCpltCallback != NULL) {
 8004aa0:	b10b      	cbz	r3, 8004aa6 <HAL_DMA_IRQHandler+0x10e>
					hdma->XferCpltCallback(hdma);
 8004aa2:	4620      	mov	r0, r4
 8004aa4:	4798      	blx	r3
	if (hdma->ErrorCode != HAL_DMA_ERROR_NONE) {
 8004aa6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d0e9      	beq.n	8004a80 <HAL_DMA_IRQHandler+0xe8>
		if ((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET) {
 8004aac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004aae:	07da      	lsls	r2, r3, #31
 8004ab0:	d519      	bpl.n	8004ae6 <HAL_DMA_IRQHandler+0x14e>
			hdma->State = HAL_DMA_STATE_ABORT;
 8004ab2:	2305      	movs	r3, #5
			__HAL_DMA_DISABLE(hdma);
 8004ab4:	6822      	ldr	r2, [r4, #0]
			hdma->State = HAL_DMA_STATE_ABORT;
 8004ab6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			__HAL_DMA_DISABLE(hdma);
 8004aba:	6813      	ldr	r3, [r2, #0]
 8004abc:	f023 0301 	bic.w	r3, r3, #1
 8004ac0:	6013      	str	r3, [r2, #0]
	uint32_t timeout = SystemCoreClock / 9600U;
 8004ac2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8004ac6:	fbb7 f7f3 	udiv	r7, r7, r3
				if (++count > timeout) {
 8004aca:	9b01      	ldr	r3, [sp, #4]
 8004acc:	3301      	adds	r3, #1
 8004ace:	429f      	cmp	r7, r3
 8004ad0:	9301      	str	r3, [sp, #4]
 8004ad2:	d302      	bcc.n	8004ada <HAL_DMA_IRQHandler+0x142>
			} while ((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004ad4:	6813      	ldr	r3, [r2, #0]
 8004ad6:	07db      	lsls	r3, r3, #31
 8004ad8:	d4f7      	bmi.n	8004aca <HAL_DMA_IRQHandler+0x132>
			__HAL_UNLOCK(hdma);
 8004ada:	2300      	movs	r3, #0
 8004adc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			hdma->State = HAL_DMA_STATE_READY;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
		if (hdma->XferErrorCallback != NULL) {
 8004ae6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004ae8:	e7c7      	b.n	8004a7a <HAL_DMA_IRQHandler+0xe2>
				if ((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET) {
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8004af0:	d108      	bne.n	8004b04 <HAL_DMA_IRQHandler+0x16c>
					hdma->Instance->CR &= ~(DMA_IT_TC);
 8004af2:	6819      	ldr	r1, [r3, #0]
 8004af4:	f021 0110 	bic.w	r1, r1, #16
 8004af8:	6019      	str	r1, [r3, #0]
					hdma->State = HAL_DMA_STATE_READY;
 8004afa:	2301      	movs	r3, #1
					__HAL_UNLOCK(hdma);
 8004afc:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
					hdma->State = HAL_DMA_STATE_READY;
 8004b00:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
				if (hdma->XferCpltCallback != NULL) {
 8004b04:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004b06:	e7cb      	b.n	8004aa0 <HAL_DMA_IRQHandler+0x108>
 8004b08:	2000019c 	.word	0x2000019c

08004b0c <HAL_GPIO_Init>:
 * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b10:	b085      	sub	sp, #20
	/* Configure the port pins */
	for (position = 0U; position < GPIO_NUMBER; position++) {
		/* Get the IO position */
		ioposition = 0x01U << position;
		/* Get the current IO position */
		iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b12:	680b      	ldr	r3, [r1, #0]

			/*--------------------- EXTI Mode Configuration ------------------------*/
			/* Configure the External Interrupt or event for the current IO */
			if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) {
				/* Enable SYSCFG Clock */
				__HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b14:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8004cb4 <HAL_GPIO_Init+0x1a8>
				temp &= ~(0x0FU << (4U * (position & 0x03U)));
				temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
				SYSCFG->EXTICR[position >> 2U] = temp;

				/* Clear EXTI line configuration */
				temp = EXTI->IMR;
 8004b18:	4a64      	ldr	r2, [pc, #400]	; (8004cac <HAL_GPIO_Init+0x1a0>)
		iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b1a:	9301      	str	r3, [sp, #4]
		ioposition = 0x01U << position;
 8004b1c:	f04f 0901 	mov.w	r9, #1
	for (position = 0U; position < GPIO_NUMBER; position++) {
 8004b20:	2300      	movs	r3, #0
		iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b22:	9c01      	ldr	r4, [sp, #4]
		ioposition = 0x01U << position;
 8004b24:	fa09 f703 	lsl.w	r7, r9, r3
		iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b28:	ea07 0604 	and.w	r6, r7, r4
		if (iocurrent == ioposition) {
 8004b2c:	42b7      	cmp	r7, r6
 8004b2e:	f040 80ad 	bne.w	8004c8c <HAL_GPIO_Init+0x180>
			if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) {
 8004b32:	684c      	ldr	r4, [r1, #4]
 8004b34:	f024 0a10 	bic.w	sl, r4, #16
 8004b38:	f1ba 0f02 	cmp.w	sl, #2
 8004b3c:	d116      	bne.n	8004b6c <HAL_GPIO_Init+0x60>
				temp = GPIOx->AFR[position >> 3U];
 8004b3e:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8004b42:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
				temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U));
 8004b46:	f003 0b07 	and.w	fp, r3, #7
				temp = GPIOx->AFR[position >> 3U];
 8004b4a:	f8dc 5020 	ldr.w	r5, [ip, #32]
				temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U));
 8004b4e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8004b52:	f04f 0e0f 	mov.w	lr, #15
 8004b56:	fa0e fe0b 	lsl.w	lr, lr, fp
 8004b5a:	ea25 0e0e 	bic.w	lr, r5, lr
				temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b5e:	690d      	ldr	r5, [r1, #16]
 8004b60:	fa05 f50b 	lsl.w	r5, r5, fp
 8004b64:	ea45 050e 	orr.w	r5, r5, lr
				GPIOx->AFR[position >> 3U] = temp;
 8004b68:	f8cc 5020 	str.w	r5, [ip, #32]
 8004b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
			temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b70:	2503      	movs	r5, #3
			temp = GPIOx->MODER;
 8004b72:	f8d0 b000 	ldr.w	fp, [r0]
			temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b76:	fa05 f50c 	lsl.w	r5, r5, ip
 8004b7a:	43ed      	mvns	r5, r5
			temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b7c:	f004 0e03 	and.w	lr, r4, #3
			temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b80:	ea0b 0b05 	and.w	fp, fp, r5
			temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b84:	fa0e fe0c 	lsl.w	lr, lr, ip
			if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b88:	f10a 3aff 	add.w	sl, sl, #4294967295
			temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b8c:	ea4e 0e0b 	orr.w	lr, lr, fp
			if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b90:	f1ba 0f01 	cmp.w	sl, #1
			temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b94:	9500      	str	r5, [sp, #0]
			GPIOx->MODER = temp;
 8004b96:	f8c0 e000 	str.w	lr, [r0]
			if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b9a:	d815      	bhi.n	8004bc8 <HAL_GPIO_Init+0xbc>
				temp = GPIOx->OSPEEDR;
 8004b9c:	f8d0 e008 	ldr.w	lr, [r0, #8]
				temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ba0:	ea05 0e0e 	and.w	lr, r5, lr
				temp |= (GPIO_Init->Speed << (position * 2U));
 8004ba4:	68cd      	ldr	r5, [r1, #12]
 8004ba6:	fa05 fa0c 	lsl.w	sl, r5, ip
 8004baa:	ea4a 0e0e 	orr.w	lr, sl, lr
				GPIOx->OSPEEDR = temp;
 8004bae:	f8c0 e008 	str.w	lr, [r0, #8]
				temp = GPIOx->OTYPER;
 8004bb2:	f8d0 e004 	ldr.w	lr, [r0, #4]
				temp &= ~(GPIO_OTYPER_OT_0 << position);
 8004bb6:	ea2e 0707 	bic.w	r7, lr, r7
				temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004bba:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 8004bbe:	fa0e fe03 	lsl.w	lr, lr, r3
 8004bc2:	ea4e 0707 	orr.w	r7, lr, r7
				GPIOx->OTYPER = temp;
 8004bc6:	6047      	str	r7, [r0, #4]
			temp = GPIOx->PUPDR;
 8004bc8:	68c7      	ldr	r7, [r0, #12]
			temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004bca:	9d00      	ldr	r5, [sp, #0]
 8004bcc:	403d      	ands	r5, r7
			temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bce:	688f      	ldr	r7, [r1, #8]
 8004bd0:	fa07 f70c 	lsl.w	r7, r7, ip
 8004bd4:	433d      	orrs	r5, r7
			GPIOx->PUPDR = temp;
 8004bd6:	60c5      	str	r5, [r0, #12]
			if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) {
 8004bd8:	00e5      	lsls	r5, r4, #3
 8004bda:	d557      	bpl.n	8004c8c <HAL_GPIO_Init+0x180>
				__HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bdc:	f04f 0b00 	mov.w	fp, #0
 8004be0:	f8cd b00c 	str.w	fp, [sp, #12]
 8004be4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
				temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004be8:	4d31      	ldr	r5, [pc, #196]	; (8004cb0 <HAL_GPIO_Init+0x1a4>)
				__HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bea:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8004bee:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8004bf2:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8004bf6:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8004bfa:	9703      	str	r7, [sp, #12]
 8004bfc:	9f03      	ldr	r7, [sp, #12]
 8004bfe:	f023 0703 	bic.w	r7, r3, #3
 8004c02:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8004c06:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
				temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c0a:	f003 0c03 	and.w	ip, r3, #3
				temp = SYSCFG->EXTICR[position >> 2U];
 8004c0e:	f8d7 a008 	ldr.w	sl, [r7, #8]
				temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c12:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004c16:	f04f 0e0f 	mov.w	lr, #15
 8004c1a:	fa0e fe0c 	lsl.w	lr, lr, ip
				temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c1e:	42a8      	cmp	r0, r5
				temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c20:	ea2a 0e0e 	bic.w	lr, sl, lr
				temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c24:	d039      	beq.n	8004c9a <HAL_GPIO_Init+0x18e>
 8004c26:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004c2a:	42a8      	cmp	r0, r5
 8004c2c:	d037      	beq.n	8004c9e <HAL_GPIO_Init+0x192>
 8004c2e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004c32:	42a8      	cmp	r0, r5
 8004c34:	d035      	beq.n	8004ca2 <HAL_GPIO_Init+0x196>
 8004c36:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004c3a:	42a8      	cmp	r0, r5
 8004c3c:	d033      	beq.n	8004ca6 <HAL_GPIO_Init+0x19a>
 8004c3e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004c42:	42a8      	cmp	r0, r5
 8004c44:	bf14      	ite	ne
 8004c46:	2507      	movne	r5, #7
 8004c48:	2504      	moveq	r5, #4
 8004c4a:	fa05 f50c 	lsl.w	r5, r5, ip
 8004c4e:	ea45 050e 	orr.w	r5, r5, lr
				SYSCFG->EXTICR[position >> 2U] = temp;
 8004c52:	60bd      	str	r5, [r7, #8]
				temp = EXTI->IMR;
 8004c54:	6815      	ldr	r5, [r2, #0]
				temp &= ~((uint32_t)iocurrent);
 8004c56:	43f7      	mvns	r7, r6
				if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT) {
 8004c58:	f414 3f80 	tst.w	r4, #65536	; 0x10000
				temp &= ~((uint32_t)iocurrent);
 8004c5c:	bf0c      	ite	eq
 8004c5e:	403d      	andeq	r5, r7
					temp |= iocurrent;
 8004c60:	4335      	orrne	r5, r6
				}
				EXTI->IMR = temp;
 8004c62:	6015      	str	r5, [r2, #0]

				temp = EXTI->EMR;
 8004c64:	6855      	ldr	r5, [r2, #4]
				temp &= ~((uint32_t)iocurrent);
				if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT) {
 8004c66:	f414 3f00 	tst.w	r4, #131072	; 0x20000
				temp &= ~((uint32_t)iocurrent);
 8004c6a:	bf0c      	ite	eq
 8004c6c:	403d      	andeq	r5, r7
					temp |= iocurrent;
 8004c6e:	4335      	orrne	r5, r6
				}
				EXTI->EMR = temp;
 8004c70:	6055      	str	r5, [r2, #4]

				/* Clear Rising Falling edge configuration */
				temp = EXTI->RTSR;
 8004c72:	6895      	ldr	r5, [r2, #8]
				temp &= ~((uint32_t)iocurrent);
				if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE) {
 8004c74:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
				temp &= ~((uint32_t)iocurrent);
 8004c78:	bf0c      	ite	eq
 8004c7a:	403d      	andeq	r5, r7
					temp |= iocurrent;
 8004c7c:	4335      	orrne	r5, r6
				}
				EXTI->RTSR = temp;
 8004c7e:	6095      	str	r5, [r2, #8]

				temp = EXTI->FTSR;
 8004c80:	68d5      	ldr	r5, [r2, #12]
				temp &= ~((uint32_t)iocurrent);
				if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE) {
 8004c82:	02a4      	lsls	r4, r4, #10
				temp &= ~((uint32_t)iocurrent);
 8004c84:	bf54      	ite	pl
 8004c86:	403d      	andpl	r5, r7
					temp |= iocurrent;
 8004c88:	4335      	orrmi	r5, r6
				}
				EXTI->FTSR = temp;
 8004c8a:	60d5      	str	r5, [r2, #12]
	for (position = 0U; position < GPIO_NUMBER; position++) {
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	2b10      	cmp	r3, #16
 8004c90:	f47f af47 	bne.w	8004b22 <HAL_GPIO_Init+0x16>
			}
		}
	}
}
 8004c94:	b005      	add	sp, #20
 8004c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c9a:	465d      	mov	r5, fp
 8004c9c:	e7d5      	b.n	8004c4a <HAL_GPIO_Init+0x13e>
 8004c9e:	2501      	movs	r5, #1
 8004ca0:	e7d3      	b.n	8004c4a <HAL_GPIO_Init+0x13e>
 8004ca2:	2502      	movs	r5, #2
 8004ca4:	e7d1      	b.n	8004c4a <HAL_GPIO_Init+0x13e>
 8004ca6:	2503      	movs	r5, #3
 8004ca8:	e7cf      	b.n	8004c4a <HAL_GPIO_Init+0x13e>
 8004caa:	bf00      	nop
 8004cac:	40013c00 	.word	0x40013c00
 8004cb0:	40020000 	.word	0x40020000
 8004cb4:	40023800 	.word	0x40023800

08004cb8 <HAL_GPIO_ReadPin>:
	GPIO_PinState bitstatus;

	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));

	if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET) {
 8004cb8:	6903      	ldr	r3, [r0, #16]
 8004cba:	4219      	tst	r1, r3
		bitstatus = GPIO_PIN_SET;
	}else  {
		bitstatus = GPIO_PIN_RESET;
	}
	return bitstatus;
}
 8004cbc:	bf14      	ite	ne
 8004cbe:	2001      	movne	r0, #1
 8004cc0:	2000      	moveq	r0, #0
 8004cc2:	4770      	bx	lr

08004cc4 <HAL_GPIO_WritePin>:
{
	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));
	assert_param(IS_GPIO_PIN_ACTION(PinState));

	if (PinState != GPIO_PIN_RESET) {
 8004cc4:	b10a      	cbz	r2, 8004cca <HAL_GPIO_WritePin+0x6>
		GPIOx->BSRR = GPIO_Pin;
	}else  {
		GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004cc6:	6181      	str	r1, [r0, #24]
 8004cc8:	4770      	bx	lr
 8004cca:	0409      	lsls	r1, r1, #16
 8004ccc:	e7fb      	b.n	8004cc6 <HAL_GPIO_WritePin+0x2>

08004cce <I2C_IsAcknowledgeFailed>:
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
	if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) {
 8004cce:	6802      	ldr	r2, [r0, #0]
 8004cd0:	6953      	ldr	r3, [r2, #20]
 8004cd2:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8004cd6:	d00d      	beq.n	8004cf4 <I2C_IsAcknowledgeFailed+0x26>
		/* Clear NACKF Flag */
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cd8:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8004cdc:	6153      	str	r3, [r2, #20]

		hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004cde:	2304      	movs	r3, #4
 8004ce0:	6403      	str	r3, [r0, #64]	; 0x40
		hi2c->PreviousState = I2C_STATE_NONE;
		hi2c->State = HAL_I2C_STATE_READY;
 8004ce2:	2220      	movs	r2, #32
		hi2c->PreviousState = I2C_STATE_NONE;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	6303      	str	r3, [r0, #48]	; 0x30

		/* Process Unlocked */
		__HAL_UNLOCK(hi2c);
 8004ce8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
		hi2c->State = HAL_I2C_STATE_READY;
 8004cec:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

		return HAL_ERROR;
 8004cf0:	2001      	movs	r0, #1
 8004cf2:	4770      	bx	lr
	}
	return HAL_OK;
 8004cf4:	4618      	mov	r0, r3
}
 8004cf6:	4770      	bx	lr

08004cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8004cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cfc:	4604      	mov	r4, r0
 8004cfe:	4617      	mov	r7, r2
 8004d00:	4699      	mov	r9, r3
	while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET) {
 8004d02:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8004d06:	b28e      	uxth	r6, r1
 8004d08:	6825      	ldr	r5, [r4, #0]
 8004d0a:	f1b8 0f01 	cmp.w	r8, #1
 8004d0e:	bf0c      	ite	eq
 8004d10:	696b      	ldreq	r3, [r5, #20]
 8004d12:	69ab      	ldrne	r3, [r5, #24]
 8004d14:	ea36 0303 	bics.w	r3, r6, r3
 8004d18:	bf14      	ite	ne
 8004d1a:	2001      	movne	r0, #1
 8004d1c:	2000      	moveq	r0, #0
 8004d1e:	b908      	cbnz	r0, 8004d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8004d20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) {
 8004d24:	696b      	ldr	r3, [r5, #20]
 8004d26:	055a      	lsls	r2, r3, #21
 8004d28:	d512      	bpl.n	8004d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
			hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004d2a:	682b      	ldr	r3, [r5, #0]
 8004d2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d30:	602b      	str	r3, [r5, #0]
			__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d32:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8004d36:	616b      	str	r3, [r5, #20]
			hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004d38:	2304      	movs	r3, #4
 8004d3a:	6423      	str	r3, [r4, #64]	; 0x40
			hi2c->State = HAL_I2C_STATE_READY;
 8004d3c:	2220      	movs	r2, #32
			hi2c->PreviousState = I2C_STATE_NONE;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	6323      	str	r3, [r4, #48]	; 0x30
			__HAL_UNLOCK(hi2c);
 8004d42:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			hi2c->State = HAL_I2C_STATE_READY;
 8004d46:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
			return HAL_ERROR;
 8004d4a:	2001      	movs	r0, #1
 8004d4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (Timeout != HAL_MAX_DELAY) {
 8004d50:	1c7b      	adds	r3, r7, #1
 8004d52:	d0d9      	beq.n	8004d08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
			if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 8004d54:	b94f      	cbnz	r7, 8004d6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
				hi2c->PreviousState = I2C_STATE_NONE;
 8004d56:	2300      	movs	r3, #0
				hi2c->State = HAL_I2C_STATE_READY;
 8004d58:	2220      	movs	r2, #32
				hi2c->PreviousState = I2C_STATE_NONE;
 8004d5a:	6323      	str	r3, [r4, #48]	; 0x30
				__HAL_UNLOCK(hi2c);
 8004d5c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
				hi2c->State = HAL_I2C_STATE_READY;
 8004d60:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
				return HAL_TIMEOUT;
 8004d64:	2003      	movs	r0, #3
 8004d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 8004d6a:	f7ff facd 	bl	8004308 <HAL_GetTick>
 8004d6e:	eba0 0009 	sub.w	r0, r0, r9
 8004d72:	4287      	cmp	r7, r0
 8004d74:	d2c8      	bcs.n	8004d08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8004d76:	e7ee      	b.n	8004d56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08004d78 <I2C_WaitOnFlagUntilTimeout>:
{
 8004d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d7c:	9e08      	ldr	r6, [sp, #32]
 8004d7e:	4604      	mov	r4, r0
 8004d80:	4690      	mov	r8, r2
 8004d82:	461f      	mov	r7, r3
	while ((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) {
 8004d84:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8004d88:	b28d      	uxth	r5, r1
 8004d8a:	6823      	ldr	r3, [r4, #0]
 8004d8c:	f1b9 0f01 	cmp.w	r9, #1
 8004d90:	bf0c      	ite	eq
 8004d92:	695b      	ldreq	r3, [r3, #20]
 8004d94:	699b      	ldrne	r3, [r3, #24]
 8004d96:	ea35 0303 	bics.w	r3, r5, r3
 8004d9a:	bf0c      	ite	eq
 8004d9c:	2301      	moveq	r3, #1
 8004d9e:	2300      	movne	r3, #0
 8004da0:	4543      	cmp	r3, r8
 8004da2:	d002      	beq.n	8004daa <I2C_WaitOnFlagUntilTimeout+0x32>
	return HAL_OK;
 8004da4:	2000      	movs	r0, #0
}
 8004da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (Timeout != HAL_MAX_DELAY) {
 8004daa:	1c7b      	adds	r3, r7, #1
 8004dac:	d0ed      	beq.n	8004d8a <I2C_WaitOnFlagUntilTimeout+0x12>
			if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 8004dae:	b95f      	cbnz	r7, 8004dc8 <I2C_WaitOnFlagUntilTimeout+0x50>
				hi2c->PreviousState = I2C_STATE_NONE;
 8004db0:	2300      	movs	r3, #0
				hi2c->State = HAL_I2C_STATE_READY;
 8004db2:	2220      	movs	r2, #32
				hi2c->PreviousState = I2C_STATE_NONE;
 8004db4:	6323      	str	r3, [r4, #48]	; 0x30
				__HAL_UNLOCK(hi2c);
 8004db6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
				hi2c->State = HAL_I2C_STATE_READY;
 8004dba:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
				__HAL_UNLOCK(hi2c);
 8004dbe:	2003      	movs	r0, #3
				hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dc0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004dc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 8004dc8:	f7ff fa9e 	bl	8004308 <HAL_GetTick>
 8004dcc:	1b80      	subs	r0, r0, r6
 8004dce:	4287      	cmp	r7, r0
 8004dd0:	d2db      	bcs.n	8004d8a <I2C_WaitOnFlagUntilTimeout+0x12>
 8004dd2:	e7ed      	b.n	8004db0 <I2C_WaitOnFlagUntilTimeout+0x38>

08004dd4 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8004dd4:	b570      	push	{r4, r5, r6, lr}
 8004dd6:	4604      	mov	r4, r0
 8004dd8:	460d      	mov	r5, r1
 8004dda:	4616      	mov	r6, r2
	while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET) {
 8004ddc:	6823      	ldr	r3, [r4, #0]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	061b      	lsls	r3, r3, #24
 8004de2:	d501      	bpl.n	8004de8 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
	return HAL_OK;
 8004de4:	2000      	movs	r0, #0
 8004de6:	bd70      	pop	{r4, r5, r6, pc}
		if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK) {
 8004de8:	4620      	mov	r0, r4
 8004dea:	f7ff ff70 	bl	8004cce <I2C_IsAcknowledgeFailed>
 8004dee:	b9a8      	cbnz	r0, 8004e1c <I2C_WaitOnTXEFlagUntilTimeout+0x48>
		if (Timeout != HAL_MAX_DELAY) {
 8004df0:	1c6a      	adds	r2, r5, #1
 8004df2:	d0f3      	beq.n	8004ddc <I2C_WaitOnTXEFlagUntilTimeout+0x8>
			if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 8004df4:	b965      	cbnz	r5, 8004e10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
				hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004df6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004df8:	f043 0320 	orr.w	r3, r3, #32
 8004dfc:	6423      	str	r3, [r4, #64]	; 0x40
				hi2c->State = HAL_I2C_STATE_READY;
 8004dfe:	2220      	movs	r2, #32
				hi2c->PreviousState = I2C_STATE_NONE;
 8004e00:	2300      	movs	r3, #0
 8004e02:	6323      	str	r3, [r4, #48]	; 0x30
				__HAL_UNLOCK(hi2c);
 8004e04:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
				hi2c->State = HAL_I2C_STATE_READY;
 8004e08:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
				__HAL_UNLOCK(hi2c);
 8004e0c:	2003      	movs	r0, #3
 8004e0e:	bd70      	pop	{r4, r5, r6, pc}
			if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 8004e10:	f7ff fa7a 	bl	8004308 <HAL_GetTick>
 8004e14:	1b80      	subs	r0, r0, r6
 8004e16:	4285      	cmp	r5, r0
 8004e18:	d2e0      	bcs.n	8004ddc <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8004e1a:	e7ec      	b.n	8004df6 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
			return HAL_ERROR;
 8004e1c:	2001      	movs	r0, #1
}
 8004e1e:	bd70      	pop	{r4, r5, r6, pc}

08004e20 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8004e20:	b570      	push	{r4, r5, r6, lr}
 8004e22:	4604      	mov	r4, r0
 8004e24:	460d      	mov	r5, r1
 8004e26:	4616      	mov	r6, r2
	while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) {
 8004e28:	6820      	ldr	r0, [r4, #0]
 8004e2a:	6943      	ldr	r3, [r0, #20]
 8004e2c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8004e30:	d001      	beq.n	8004e36 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
	return HAL_OK;
 8004e32:	2000      	movs	r0, #0
}
 8004e34:	bd70      	pop	{r4, r5, r6, pc}
		if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) {
 8004e36:	6942      	ldr	r2, [r0, #20]
 8004e38:	06d2      	lsls	r2, r2, #27
 8004e3a:	d50b      	bpl.n	8004e54 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
			__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e3c:	f06f 0210 	mvn.w	r2, #16
 8004e40:	6142      	str	r2, [r0, #20]
			hi2c->State = HAL_I2C_STATE_READY;
 8004e42:	2220      	movs	r2, #32
			hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e44:	6423      	str	r3, [r4, #64]	; 0x40
			__HAL_UNLOCK(hi2c);
 8004e46:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			hi2c->PreviousState = I2C_STATE_NONE;
 8004e4a:	6323      	str	r3, [r4, #48]	; 0x30
			return HAL_ERROR;
 8004e4c:	2001      	movs	r0, #1
			hi2c->State = HAL_I2C_STATE_READY;
 8004e4e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
			return HAL_ERROR;
 8004e52:	bd70      	pop	{r4, r5, r6, pc}
		if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 8004e54:	b95d      	cbnz	r5, 8004e6e <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
			hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e58:	f043 0320 	orr.w	r3, r3, #32
 8004e5c:	6423      	str	r3, [r4, #64]	; 0x40
			hi2c->State = HAL_I2C_STATE_READY;
 8004e5e:	2320      	movs	r3, #32
 8004e60:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
			__HAL_UNLOCK(hi2c);
 8004e64:	2300      	movs	r3, #0
 8004e66:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8004e6a:	2003      	movs	r0, #3
 8004e6c:	bd70      	pop	{r4, r5, r6, pc}
		if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 8004e6e:	f7ff fa4b 	bl	8004308 <HAL_GetTick>
 8004e72:	1b80      	subs	r0, r0, r6
 8004e74:	4285      	cmp	r5, r0
 8004e76:	d2d7      	bcs.n	8004e28 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8004e78:	e7ed      	b.n	8004e56 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

08004e7a <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8004e7a:	b570      	push	{r4, r5, r6, lr}
 8004e7c:	4604      	mov	r4, r0
 8004e7e:	460d      	mov	r5, r1
 8004e80:	4616      	mov	r6, r2
	while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET) {
 8004e82:	6823      	ldr	r3, [r4, #0]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	075b      	lsls	r3, r3, #29
 8004e88:	d501      	bpl.n	8004e8e <I2C_WaitOnBTFFlagUntilTimeout+0x14>
	return HAL_OK;
 8004e8a:	2000      	movs	r0, #0
 8004e8c:	bd70      	pop	{r4, r5, r6, pc}
		if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK) {
 8004e8e:	4620      	mov	r0, r4
 8004e90:	f7ff ff1d 	bl	8004cce <I2C_IsAcknowledgeFailed>
 8004e94:	b9a8      	cbnz	r0, 8004ec2 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
		if (Timeout != HAL_MAX_DELAY) {
 8004e96:	1c6a      	adds	r2, r5, #1
 8004e98:	d0f3      	beq.n	8004e82 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
			if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 8004e9a:	b965      	cbnz	r5, 8004eb6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
				hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e9e:	f043 0320 	orr.w	r3, r3, #32
 8004ea2:	6423      	str	r3, [r4, #64]	; 0x40
				hi2c->State = HAL_I2C_STATE_READY;
 8004ea4:	2220      	movs	r2, #32
				hi2c->PreviousState = I2C_STATE_NONE;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	6323      	str	r3, [r4, #48]	; 0x30
				__HAL_UNLOCK(hi2c);
 8004eaa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
				hi2c->State = HAL_I2C_STATE_READY;
 8004eae:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
				__HAL_UNLOCK(hi2c);
 8004eb2:	2003      	movs	r0, #3
 8004eb4:	bd70      	pop	{r4, r5, r6, pc}
			if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 8004eb6:	f7ff fa27 	bl	8004308 <HAL_GetTick>
 8004eba:	1b80      	subs	r0, r0, r6
 8004ebc:	4285      	cmp	r5, r0
 8004ebe:	d2e0      	bcs.n	8004e82 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8004ec0:	e7ec      	b.n	8004e9c <I2C_WaitOnBTFFlagUntilTimeout+0x22>
			return HAL_ERROR;
 8004ec2:	2001      	movs	r0, #1
}
 8004ec4:	bd70      	pop	{r4, r5, r6, pc}
	...

08004ec8 <HAL_I2C_Init>:
{
 8004ec8:	b570      	push	{r4, r5, r6, lr}
	if (hi2c == NULL) {
 8004eca:	4604      	mov	r4, r0
 8004ecc:	2800      	cmp	r0, #0
 8004ece:	d062      	beq.n	8004f96 <HAL_I2C_Init+0xce>
	if (hi2c->State == HAL_I2C_STATE_RESET) {
 8004ed0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004ed4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004ed8:	b91b      	cbnz	r3, 8004ee2 <HAL_I2C_Init+0x1a>
		hi2c->Lock = HAL_UNLOCKED;
 8004eda:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
		HAL_I2C_MspInit(hi2c);
 8004ede:	f002 fa31 	bl	8007344 <HAL_I2C_MspInit>
	__HAL_I2C_DISABLE(hi2c);
 8004ee2:	6822      	ldr	r2, [r4, #0]
	hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8004ee4:	4e2d      	ldr	r6, [pc, #180]	; (8004f9c <HAL_I2C_Init+0xd4>)
	freqrange = I2C_FREQRANGE(pclk1);
 8004ee6:	4d2e      	ldr	r5, [pc, #184]	; (8004fa0 <HAL_I2C_Init+0xd8>)
	hi2c->State = HAL_I2C_STATE_BUSY;
 8004ee8:	2324      	movs	r3, #36	; 0x24
 8004eea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	__HAL_I2C_DISABLE(hi2c);
 8004eee:	6813      	ldr	r3, [r2, #0]
 8004ef0:	f023 0301 	bic.w	r3, r3, #1
 8004ef4:	6013      	str	r3, [r2, #0]
	pclk1 = HAL_RCC_GetPCLK1Freq();
 8004ef6:	f001 f9b3 	bl	8006260 <HAL_RCC_GetPCLK1Freq>
	hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8004efa:	6863      	ldr	r3, [r4, #4]
	hi2c->Instance->CR2 = freqrange;
 8004efc:	6822      	ldr	r2, [r4, #0]
	freqrange = I2C_FREQRANGE(pclk1);
 8004efe:	fbb0 f5f5 	udiv	r5, r0, r5
	hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8004f02:	42b3      	cmp	r3, r6
 8004f04:	bf84      	itt	hi
 8004f06:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 8004f0a:	4369      	mulhi	r1, r5
	hi2c->Instance->CR2 = freqrange;
 8004f0c:	6055      	str	r5, [r2, #4]
	hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8004f0e:	bf91      	iteee	ls
 8004f10:	1c69      	addls	r1, r5, #1
 8004f12:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 8004f16:	fbb1 f1f5 	udivhi	r1, r1, r5
 8004f1a:	3101      	addhi	r1, #1
	hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8004f1c:	42b3      	cmp	r3, r6
	hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8004f1e:	6211      	str	r1, [r2, #32]
	hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8004f20:	d821      	bhi.n	8004f66 <HAL_I2C_Init+0x9e>
 8004f22:	005b      	lsls	r3, r3, #1
 8004f24:	fbb0 f0f3 	udiv	r0, r0, r3
 8004f28:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8004f2c:	2b03      	cmp	r3, #3
 8004f2e:	bf98      	it	ls
 8004f30:	2004      	movls	r0, #4
	hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004f32:	6a21      	ldr	r1, [r4, #32]
 8004f34:	69e3      	ldr	r3, [r4, #28]
	hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8004f36:	61d0      	str	r0, [r2, #28]
	hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004f38:	430b      	orrs	r3, r1
 8004f3a:	6013      	str	r3, [r2, #0]
	hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8004f3c:	68e1      	ldr	r1, [r4, #12]
 8004f3e:	6923      	ldr	r3, [r4, #16]
 8004f40:	430b      	orrs	r3, r1
 8004f42:	6093      	str	r3, [r2, #8]
	hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8004f44:	69a1      	ldr	r1, [r4, #24]
 8004f46:	6963      	ldr	r3, [r4, #20]
 8004f48:	430b      	orrs	r3, r1
 8004f4a:	60d3      	str	r3, [r2, #12]
	__HAL_I2C_ENABLE(hi2c);
 8004f4c:	6813      	ldr	r3, [r2, #0]
 8004f4e:	f043 0301 	orr.w	r3, r3, #1
 8004f52:	6013      	str	r3, [r2, #0]
	hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f54:	2000      	movs	r0, #0
	hi2c->State = HAL_I2C_STATE_READY;
 8004f56:	2320      	movs	r3, #32
	hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f58:	6420      	str	r0, [r4, #64]	; 0x40
	hi2c->State = HAL_I2C_STATE_READY;
 8004f5a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	hi2c->PreviousState = I2C_STATE_NONE;
 8004f5e:	6320      	str	r0, [r4, #48]	; 0x30
	hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f60:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
	return HAL_OK;
 8004f64:	bd70      	pop	{r4, r5, r6, pc}
	hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8004f66:	68a1      	ldr	r1, [r4, #8]
 8004f68:	b949      	cbnz	r1, 8004f7e <HAL_I2C_Init+0xb6>
 8004f6a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004f6e:	fbb0 f0f3 	udiv	r0, r0, r3
 8004f72:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8004f76:	b163      	cbz	r3, 8004f92 <HAL_I2C_Init+0xca>
 8004f78:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8004f7c:	e7d9      	b.n	8004f32 <HAL_I2C_Init+0x6a>
 8004f7e:	2119      	movs	r1, #25
 8004f80:	434b      	muls	r3, r1
 8004f82:	fbb0 f0f3 	udiv	r0, r0, r3
 8004f86:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8004f8a:	b113      	cbz	r3, 8004f92 <HAL_I2C_Init+0xca>
 8004f8c:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8004f90:	e7cf      	b.n	8004f32 <HAL_I2C_Init+0x6a>
 8004f92:	2001      	movs	r0, #1
 8004f94:	e7cd      	b.n	8004f32 <HAL_I2C_Init+0x6a>
		return HAL_ERROR;
 8004f96:	2001      	movs	r0, #1
}
 8004f98:	bd70      	pop	{r4, r5, r6, pc}
 8004f9a:	bf00      	nop
 8004f9c:	000186a0 	.word	0x000186a0
 8004fa0:	000f4240 	.word	0x000f4240

08004fa4 <HAL_I2C_Master_Transmit>:
{
 8004fa4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8004fa8:	4604      	mov	r4, r0
 8004faa:	461f      	mov	r7, r3
 8004fac:	460d      	mov	r5, r1
 8004fae:	4690      	mov	r8, r2
	tickstart = HAL_GetTick();
 8004fb0:	f7ff f9aa 	bl	8004308 <HAL_GetTick>
	if (hi2c->State == HAL_I2C_STATE_READY) {
 8004fb4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004fb8:	2b20      	cmp	r3, #32
	tickstart = HAL_GetTick();
 8004fba:	4606      	mov	r6, r0
	if (hi2c->State == HAL_I2C_STATE_READY) {
 8004fbc:	d004      	beq.n	8004fc8 <HAL_I2C_Master_Transmit+0x24>
		return HAL_BUSY;
 8004fbe:	2502      	movs	r5, #2
}
 8004fc0:	4628      	mov	r0, r5
 8004fc2:	b004      	add	sp, #16
 8004fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK) {
 8004fc8:	9000      	str	r0, [sp, #0]
 8004fca:	2319      	movs	r3, #25
 8004fcc:	2201      	movs	r2, #1
 8004fce:	495d      	ldr	r1, [pc, #372]	; (8005144 <HAL_I2C_Master_Transmit+0x1a0>)
 8004fd0:	4620      	mov	r0, r4
 8004fd2:	f7ff fed1 	bl	8004d78 <I2C_WaitOnFlagUntilTimeout>
 8004fd6:	2800      	cmp	r0, #0
 8004fd8:	d1f1      	bne.n	8004fbe <HAL_I2C_Master_Transmit+0x1a>
		__HAL_LOCK(hi2c);
 8004fda:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d0ed      	beq.n	8004fbe <HAL_I2C_Master_Transmit+0x1a>
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE) {
 8004fe8:	6823      	ldr	r3, [r4, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	07d2      	lsls	r2, r2, #31
			__HAL_I2C_ENABLE(hi2c);
 8004fee:	bf5e      	ittt	pl
 8004ff0:	681a      	ldrpl	r2, [r3, #0]
 8004ff2:	f042 0201 	orrpl.w	r2, r2, #1
 8004ff6:	601a      	strpl	r2, [r3, #0]
		hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ffe:	601a      	str	r2, [r3, #0]
		hi2c->State = HAL_I2C_STATE_BUSY_TX;
 8005000:	2221      	movs	r2, #33	; 0x21
 8005002:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_MASTER;
 8005006:	2210      	movs	r2, #16
 8005008:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
		hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800500c:	2200      	movs	r2, #0
 800500e:	6422      	str	r2, [r4, #64]	; 0x40
		hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005010:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
		hi2c->XferCount = Size;
 8005014:	8567      	strh	r7, [r4, #42]	; 0x2a
		hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005016:	62e2      	str	r2, [r4, #44]	; 0x2c
		hi2c->XferSize = hi2c->XferCount;
 8005018:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800501a:	8522      	strh	r2, [r4, #40]	; 0x28
	uint32_t CurrentXferOptions = hi2c->XferOptions;
 800501c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		hi2c->pBuffPtr = pData;
 800501e:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
	if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME)) {
 8005022:	2a04      	cmp	r2, #4
 8005024:	d004      	beq.n	8005030 <HAL_I2C_Master_Transmit+0x8c>
 8005026:	2a01      	cmp	r2, #1
 8005028:	d002      	beq.n	8005030 <HAL_I2C_Master_Transmit+0x8c>
 800502a:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800502e:	d104      	bne.n	800503a <HAL_I2C_Master_Transmit+0x96>
		hi2c->Instance->CR1 |= I2C_CR1_START;
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005036:	601a      	str	r2, [r3, #0]
 8005038:	e002      	b.n	8005040 <HAL_I2C_Master_Transmit+0x9c>
	}else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) {
 800503a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800503c:	2a12      	cmp	r2, #18
 800503e:	d0f7      	beq.n	8005030 <HAL_I2C_Master_Transmit+0x8c>
	if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 8005040:	9600      	str	r6, [sp, #0]
 8005042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005044:	2200      	movs	r2, #0
 8005046:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800504a:	4620      	mov	r0, r4
 800504c:	f7ff fe94 	bl	8004d78 <I2C_WaitOnFlagUntilTimeout>
 8005050:	bb28      	cbnz	r0, 800509e <HAL_I2C_Master_Transmit+0xfa>
	if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT) {
 8005052:	6923      	ldr	r3, [r4, #16]
 8005054:	6822      	ldr	r2, [r4, #0]
 8005056:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800505a:	d112      	bne.n	8005082 <HAL_I2C_Master_Transmit+0xde>
		hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800505c:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8005060:	6115      	str	r5, [r2, #16]
	if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 8005062:	4633      	mov	r3, r6
 8005064:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005066:	4938      	ldr	r1, [pc, #224]	; (8005148 <HAL_I2C_Master_Transmit+0x1a4>)
 8005068:	4620      	mov	r0, r4
 800506a:	f7ff fe45 	bl	8004cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800506e:	4605      	mov	r5, r0
 8005070:	b9a0      	cbnz	r0, 800509c <HAL_I2C_Master_Transmit+0xf8>
		__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005072:	6823      	ldr	r3, [r4, #0]
 8005074:	9003      	str	r0, [sp, #12]
 8005076:	695a      	ldr	r2, [r3, #20]
 8005078:	9203      	str	r2, [sp, #12]
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	9303      	str	r3, [sp, #12]
 800507e:	9b03      	ldr	r3, [sp, #12]
		while (hi2c->XferSize > 0U) {
 8005080:	e050      	b.n	8005124 <HAL_I2C_Master_Transmit+0x180>
		hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005082:	11eb      	asrs	r3, r5, #7
 8005084:	f003 0306 	and.w	r3, r3, #6
 8005088:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800508c:	6113      	str	r3, [r2, #16]
		if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK) {
 800508e:	492f      	ldr	r1, [pc, #188]	; (800514c <HAL_I2C_Master_Transmit+0x1a8>)
 8005090:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005092:	4633      	mov	r3, r6
 8005094:	4620      	mov	r0, r4
 8005096:	f7ff fe2f 	bl	8004cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800509a:	b148      	cbz	r0, 80050b0 <HAL_I2C_Master_Transmit+0x10c>
		if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 800509c:	6c23      	ldr	r3, [r4, #64]	; 0x40
			if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 800509e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80050a0:	2b04      	cmp	r3, #4
 80050a2:	f04f 0300 	mov.w	r3, #0
 80050a6:	d107      	bne.n	80050b8 <HAL_I2C_Master_Transmit+0x114>
				__HAL_UNLOCK(hi2c);
 80050a8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
					return HAL_ERROR;
 80050ac:	2501      	movs	r5, #1
 80050ae:	e787      	b.n	8004fc0 <HAL_I2C_Master_Transmit+0x1c>
		hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80050b0:	6823      	ldr	r3, [r4, #0]
 80050b2:	b2ed      	uxtb	r5, r5
 80050b4:	611d      	str	r5, [r3, #16]
 80050b6:	e7d4      	b.n	8005062 <HAL_I2C_Master_Transmit+0xbe>
				__HAL_UNLOCK(hi2c);
 80050b8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
					return HAL_TIMEOUT;
 80050bc:	2503      	movs	r5, #3
 80050be:	e77f      	b.n	8004fc0 <HAL_I2C_Master_Transmit+0x1c>
			if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 80050c0:	4632      	mov	r2, r6
 80050c2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80050c4:	4620      	mov	r0, r4
 80050c6:	f7ff fe85 	bl	8004dd4 <I2C_WaitOnTXEFlagUntilTimeout>
 80050ca:	b140      	cbz	r0, 80050de <HAL_I2C_Master_Transmit+0x13a>
				if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 80050cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80050ce:	2b04      	cmp	r3, #4
 80050d0:	d1f4      	bne.n	80050bc <HAL_I2C_Master_Transmit+0x118>
					hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80050d2:	6822      	ldr	r2, [r4, #0]
 80050d4:	6813      	ldr	r3, [r2, #0]
 80050d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050da:	6013      	str	r3, [r2, #0]
 80050dc:	e7e6      	b.n	80050ac <HAL_I2C_Master_Transmit+0x108>
			hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80050de:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80050e0:	6820      	ldr	r0, [r4, #0]
			hi2c->XferSize--;
 80050e2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
			hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80050e4:	1c4b      	adds	r3, r1, #1
 80050e6:	6263      	str	r3, [r4, #36]	; 0x24
 80050e8:	780b      	ldrb	r3, [r1, #0]
 80050ea:	6103      	str	r3, [r0, #16]
			hi2c->XferCount--;
 80050ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80050ee:	3b01      	subs	r3, #1
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	8563      	strh	r3, [r4, #42]	; 0x2a
			if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U)) {
 80050f4:	6947      	ldr	r7, [r0, #20]
			hi2c->XferSize--;
 80050f6:	1e53      	subs	r3, r2, #1
 80050f8:	b29b      	uxth	r3, r3
			if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U)) {
 80050fa:	077f      	lsls	r7, r7, #29
			hi2c->XferSize--;
 80050fc:	8523      	strh	r3, [r4, #40]	; 0x28
			if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U)) {
 80050fe:	d50a      	bpl.n	8005116 <HAL_I2C_Master_Transmit+0x172>
 8005100:	b14b      	cbz	r3, 8005116 <HAL_I2C_Master_Transmit+0x172>
				hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8005102:	1c8b      	adds	r3, r1, #2
 8005104:	6263      	str	r3, [r4, #36]	; 0x24
 8005106:	784b      	ldrb	r3, [r1, #1]
 8005108:	6103      	str	r3, [r0, #16]
				hi2c->XferCount--;
 800510a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800510c:	3b01      	subs	r3, #1
 800510e:	b29b      	uxth	r3, r3
				hi2c->XferSize--;
 8005110:	3a02      	subs	r2, #2
				hi2c->XferCount--;
 8005112:	8563      	strh	r3, [r4, #42]	; 0x2a
				hi2c->XferSize--;
 8005114:	8522      	strh	r2, [r4, #40]	; 0x28
			if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8005116:	4632      	mov	r2, r6
 8005118:	990a      	ldr	r1, [sp, #40]	; 0x28
 800511a:	4620      	mov	r0, r4
 800511c:	f7ff fead 	bl	8004e7a <I2C_WaitOnBTFFlagUntilTimeout>
 8005120:	2800      	cmp	r0, #0
 8005122:	d1d3      	bne.n	80050cc <HAL_I2C_Master_Transmit+0x128>
		while (hi2c->XferSize > 0U) {
 8005124:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1ca      	bne.n	80050c0 <HAL_I2C_Master_Transmit+0x11c>
		hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800512a:	6821      	ldr	r1, [r4, #0]
 800512c:	680a      	ldr	r2, [r1, #0]
 800512e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005132:	600a      	str	r2, [r1, #0]
		hi2c->State = HAL_I2C_STATE_READY;
 8005134:	2220      	movs	r2, #32
 8005136:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
		__HAL_UNLOCK(hi2c);
 800513a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		hi2c->Mode = HAL_I2C_MODE_NONE;
 800513e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		return HAL_OK;
 8005142:	e73d      	b.n	8004fc0 <HAL_I2C_Master_Transmit+0x1c>
 8005144:	00100002 	.word	0x00100002
 8005148:	00010002 	.word	0x00010002
 800514c:	00010008 	.word	0x00010008

08005150 <HAL_I2C_Master_Receive>:
{
 8005150:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005154:	4604      	mov	r4, r0
 8005156:	b089      	sub	sp, #36	; 0x24
 8005158:	4698      	mov	r8, r3
 800515a:	460d      	mov	r5, r1
 800515c:	4691      	mov	r9, r2
 800515e:	9f10      	ldr	r7, [sp, #64]	; 0x40
	tickstart = HAL_GetTick();
 8005160:	f7ff f8d2 	bl	8004308 <HAL_GetTick>
	if (hi2c->State == HAL_I2C_STATE_READY) {
 8005164:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8005168:	2b20      	cmp	r3, #32
	tickstart = HAL_GetTick();
 800516a:	4606      	mov	r6, r0
	if (hi2c->State == HAL_I2C_STATE_READY) {
 800516c:	d004      	beq.n	8005178 <HAL_I2C_Master_Receive+0x28>
		return HAL_BUSY;
 800516e:	2502      	movs	r5, #2
}
 8005170:	4628      	mov	r0, r5
 8005172:	b009      	add	sp, #36	; 0x24
 8005174:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK) {
 8005178:	9000      	str	r0, [sp, #0]
 800517a:	2319      	movs	r3, #25
 800517c:	2201      	movs	r2, #1
 800517e:	499c      	ldr	r1, [pc, #624]	; (80053f0 <HAL_I2C_Master_Receive+0x2a0>)
 8005180:	4620      	mov	r0, r4
 8005182:	f7ff fdf9 	bl	8004d78 <I2C_WaitOnFlagUntilTimeout>
 8005186:	2800      	cmp	r0, #0
 8005188:	d1f1      	bne.n	800516e <HAL_I2C_Master_Receive+0x1e>
		__HAL_LOCK(hi2c);
 800518a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800518e:	2b01      	cmp	r3, #1
 8005190:	d0ed      	beq.n	800516e <HAL_I2C_Master_Receive+0x1e>
 8005192:	2301      	movs	r3, #1
 8005194:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE) {
 8005198:	6823      	ldr	r3, [r4, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	07d2      	lsls	r2, r2, #31
			__HAL_I2C_ENABLE(hi2c);
 800519e:	bf5e      	ittt	pl
 80051a0:	681a      	ldrpl	r2, [r3, #0]
 80051a2:	f042 0201 	orrpl.w	r2, r2, #1
 80051a6:	601a      	strpl	r2, [r3, #0]
		hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051ae:	601a      	str	r2, [r3, #0]
		hi2c->State = HAL_I2C_STATE_BUSY_RX;
 80051b0:	2222      	movs	r2, #34	; 0x22
 80051b2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_MASTER;
 80051b6:	2210      	movs	r2, #16
 80051b8:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
		hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051bc:	2200      	movs	r2, #0
 80051be:	6422      	str	r2, [r4, #64]	; 0x40
		hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051c0:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
		hi2c->XferCount = Size;
 80051c4:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
		hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051c8:	62e2      	str	r2, [r4, #44]	; 0x2c
		hi2c->XferSize = hi2c->XferCount;
 80051ca:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80051cc:	8522      	strh	r2, [r4, #40]	; 0x28
	uint32_t CurrentXferOptions = hi2c->XferOptions;
 80051ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80051d0:	6819      	ldr	r1, [r3, #0]
		hi2c->pBuffPtr = pData;
 80051d2:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
	hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80051d6:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
	if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME)) {
 80051da:	2a04      	cmp	r2, #4
	hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80051dc:	6019      	str	r1, [r3, #0]
	if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME)) {
 80051de:	d004      	beq.n	80051ea <HAL_I2C_Master_Receive+0x9a>
 80051e0:	2a01      	cmp	r2, #1
 80051e2:	d002      	beq.n	80051ea <HAL_I2C_Master_Receive+0x9a>
 80051e4:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80051e8:	d104      	bne.n	80051f4 <HAL_I2C_Master_Receive+0xa4>
		hi2c->Instance->CR1 |= I2C_CR1_START;
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051f0:	601a      	str	r2, [r3, #0]
 80051f2:	e002      	b.n	80051fa <HAL_I2C_Master_Receive+0xaa>
	}else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) {
 80051f4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80051f6:	2a11      	cmp	r2, #17
 80051f8:	d0f7      	beq.n	80051ea <HAL_I2C_Master_Receive+0x9a>
	if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 80051fa:	9600      	str	r6, [sp, #0]
 80051fc:	463b      	mov	r3, r7
 80051fe:	2200      	movs	r2, #0
 8005200:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005204:	4620      	mov	r0, r4
 8005206:	f7ff fdb7 	bl	8004d78 <I2C_WaitOnFlagUntilTimeout>
 800520a:	2800      	cmp	r0, #0
 800520c:	d14a      	bne.n	80052a4 <HAL_I2C_Master_Receive+0x154>
	if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT) {
 800520e:	6923      	ldr	r3, [r4, #16]
 8005210:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005214:	6823      	ldr	r3, [r4, #0]
 8005216:	d136      	bne.n	8005286 <HAL_I2C_Master_Receive+0x136>
		hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005218:	f045 0501 	orr.w	r5, r5, #1
 800521c:	b2ed      	uxtb	r5, r5
 800521e:	611d      	str	r5, [r3, #16]
	if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 8005220:	4633      	mov	r3, r6
 8005222:	463a      	mov	r2, r7
 8005224:	4973      	ldr	r1, [pc, #460]	; (80053f4 <HAL_I2C_Master_Receive+0x2a4>)
 8005226:	4620      	mov	r0, r4
 8005228:	f7ff fd66 	bl	8004cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800522c:	4605      	mov	r5, r0
 800522e:	2800      	cmp	r0, #0
 8005230:	d137      	bne.n	80052a2 <HAL_I2C_Master_Receive+0x152>
		if (hi2c->XferSize == 0U) {
 8005232:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8005234:	6823      	ldr	r3, [r4, #0]
 8005236:	2a00      	cmp	r2, #0
 8005238:	d066      	beq.n	8005308 <HAL_I2C_Master_Receive+0x1b8>
		}else if (hi2c->XferSize == 1U) {
 800523a:	2a01      	cmp	r2, #1
 800523c:	d177      	bne.n	800532e <HAL_I2C_Master_Receive+0x1de>
			hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005244:	601a      	str	r2, [r3, #0]
			__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005246:	9504      	str	r5, [sp, #16]
 8005248:	695a      	ldr	r2, [r3, #20]
 800524a:	9204      	str	r2, [sp, #16]
 800524c:	699a      	ldr	r2, [r3, #24]
 800524e:	9204      	str	r2, [sp, #16]
 8005250:	9a04      	ldr	r2, [sp, #16]
			hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005258:	601a      	str	r2, [r3, #0]
					if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 800525a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80053fc <HAL_I2C_Master_Receive+0x2ac>
		while (hi2c->XferSize > 0U) {
 800525e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005260:	2b00      	cmp	r3, #0
 8005262:	d05b      	beq.n	800531c <HAL_I2C_Master_Receive+0x1cc>
			if (hi2c->XferSize <= 3U) {
 8005264:	2b03      	cmp	r3, #3
 8005266:	f200 80cb 	bhi.w	8005400 <HAL_I2C_Master_Receive+0x2b0>
				if (hi2c->XferSize == 1U) {
 800526a:	2b01      	cmp	r3, #1
 800526c:	d17a      	bne.n	8005364 <HAL_I2C_Master_Receive+0x214>
					if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 800526e:	4632      	mov	r2, r6
 8005270:	4639      	mov	r1, r7
 8005272:	4620      	mov	r0, r4
 8005274:	f7ff fdd4 	bl	8004e20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005278:	2800      	cmp	r0, #0
 800527a:	f000 8090 	beq.w	800539e <HAL_I2C_Master_Receive+0x24e>
						if (hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT) {
 800527e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005280:	2b20      	cmp	r3, #32
 8005282:	d116      	bne.n	80052b2 <HAL_I2C_Master_Receive+0x162>
 8005284:	e03e      	b.n	8005304 <HAL_I2C_Master_Receive+0x1b4>
		hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005286:	ea4f 18e5 	mov.w	r8, r5, asr #7
 800528a:	f008 0806 	and.w	r8, r8, #6
 800528e:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8005292:	611a      	str	r2, [r3, #16]
		if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK) {
 8005294:	4958      	ldr	r1, [pc, #352]	; (80053f8 <HAL_I2C_Master_Receive+0x2a8>)
 8005296:	4633      	mov	r3, r6
 8005298:	463a      	mov	r2, r7
 800529a:	4620      	mov	r0, r4
 800529c:	f7ff fd2c 	bl	8004cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052a0:	b148      	cbz	r0, 80052b6 <HAL_I2C_Master_Receive+0x166>
		if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 80052a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
			if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 80052a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052a6:	2b04      	cmp	r3, #4
 80052a8:	f04f 0300 	mov.w	r3, #0
 80052ac:	d128      	bne.n	8005300 <HAL_I2C_Master_Receive+0x1b0>
				__HAL_UNLOCK(hi2c);
 80052ae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
							return HAL_ERROR;
 80052b2:	2501      	movs	r5, #1
 80052b4:	e75c      	b.n	8005170 <HAL_I2C_Master_Receive+0x20>
		hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80052b6:	6823      	ldr	r3, [r4, #0]
		if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 80052b8:	494e      	ldr	r1, [pc, #312]	; (80053f4 <HAL_I2C_Master_Receive+0x2a4>)
		hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80052ba:	b2ed      	uxtb	r5, r5
 80052bc:	611d      	str	r5, [r3, #16]
		if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 80052be:	463a      	mov	r2, r7
 80052c0:	4633      	mov	r3, r6
 80052c2:	4620      	mov	r0, r4
 80052c4:	f7ff fd18 	bl	8004cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052c8:	4602      	mov	r2, r0
 80052ca:	2800      	cmp	r0, #0
 80052cc:	d1e9      	bne.n	80052a2 <HAL_I2C_Master_Receive+0x152>
		__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052ce:	6823      	ldr	r3, [r4, #0]
 80052d0:	9007      	str	r0, [sp, #28]
 80052d2:	6959      	ldr	r1, [r3, #20]
 80052d4:	9107      	str	r1, [sp, #28]
 80052d6:	6999      	ldr	r1, [r3, #24]
 80052d8:	9107      	str	r1, [sp, #28]
 80052da:	9907      	ldr	r1, [sp, #28]
		hi2c->Instance->CR1 |= I2C_CR1_START;
 80052dc:	6819      	ldr	r1, [r3, #0]
 80052de:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80052e2:	6019      	str	r1, [r3, #0]
		if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 80052e4:	4620      	mov	r0, r4
 80052e6:	9600      	str	r6, [sp, #0]
 80052e8:	463b      	mov	r3, r7
 80052ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052ee:	f7ff fd43 	bl	8004d78 <I2C_WaitOnFlagUntilTimeout>
 80052f2:	2800      	cmp	r0, #0
 80052f4:	d1d6      	bne.n	80052a4 <HAL_I2C_Master_Receive+0x154>
		hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80052f6:	6822      	ldr	r2, [r4, #0]
 80052f8:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 80052fc:	6113      	str	r3, [r2, #16]
 80052fe:	e78f      	b.n	8005220 <HAL_I2C_Master_Receive+0xd0>
				__HAL_UNLOCK(hi2c);
 8005300:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
							return HAL_TIMEOUT;
 8005304:	2503      	movs	r5, #3
 8005306:	e733      	b.n	8005170 <HAL_I2C_Master_Receive+0x20>
			__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005308:	9503      	str	r5, [sp, #12]
 800530a:	695a      	ldr	r2, [r3, #20]
 800530c:	9203      	str	r2, [sp, #12]
 800530e:	699a      	ldr	r2, [r3, #24]
 8005310:	9203      	str	r2, [sp, #12]
 8005312:	9a03      	ldr	r2, [sp, #12]
			hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800531a:	601a      	str	r2, [r3, #0]
		hi2c->State = HAL_I2C_STATE_READY;
 800531c:	2320      	movs	r3, #32
 800531e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_NONE;
 8005322:	2300      	movs	r3, #0
 8005324:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		__HAL_UNLOCK(hi2c);
 8005328:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		return HAL_OK;
 800532c:	e720      	b.n	8005170 <HAL_I2C_Master_Receive+0x20>
		}else if (hi2c->XferSize == 2U) {
 800532e:	2a02      	cmp	r2, #2
			hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005330:	681a      	ldr	r2, [r3, #0]
		}else if (hi2c->XferSize == 2U) {
 8005332:	d10d      	bne.n	8005350 <HAL_I2C_Master_Receive+0x200>
			hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005334:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005338:	601a      	str	r2, [r3, #0]
			hi2c->Instance->CR1 |= I2C_CR1_POS;
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005340:	601a      	str	r2, [r3, #0]
			__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005342:	9505      	str	r5, [sp, #20]
 8005344:	695a      	ldr	r2, [r3, #20]
 8005346:	9205      	str	r2, [sp, #20]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	9305      	str	r3, [sp, #20]
 800534c:	9b05      	ldr	r3, [sp, #20]
 800534e:	e784      	b.n	800525a <HAL_I2C_Master_Receive+0x10a>
			hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8005350:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005354:	601a      	str	r2, [r3, #0]
			__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005356:	9506      	str	r5, [sp, #24]
 8005358:	695a      	ldr	r2, [r3, #20]
 800535a:	9206      	str	r2, [sp, #24]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	9306      	str	r3, [sp, #24]
 8005360:	9b06      	ldr	r3, [sp, #24]
 8005362:	e77a      	b.n	800525a <HAL_I2C_Master_Receive+0x10a>
				else if (hi2c->XferSize == 2U) {
 8005364:	2b02      	cmp	r3, #2
					if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 8005366:	9600      	str	r6, [sp, #0]
 8005368:	463b      	mov	r3, r7
 800536a:	f04f 0200 	mov.w	r2, #0
 800536e:	4641      	mov	r1, r8
 8005370:	4620      	mov	r0, r4
				else if (hi2c->XferSize == 2U) {
 8005372:	d122      	bne.n	80053ba <HAL_I2C_Master_Receive+0x26a>
					if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 8005374:	f7ff fd00 	bl	8004d78 <I2C_WaitOnFlagUntilTimeout>
 8005378:	2800      	cmp	r0, #0
 800537a:	d1c3      	bne.n	8005304 <HAL_I2C_Master_Receive+0x1b4>
					hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800537c:	6823      	ldr	r3, [r4, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005384:	601a      	str	r2, [r3, #0]
					(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8005386:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	1c51      	adds	r1, r2, #1
 800538c:	6261      	str	r1, [r4, #36]	; 0x24
 800538e:	7013      	strb	r3, [r2, #0]
					hi2c->XferSize--;
 8005390:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005392:	3b01      	subs	r3, #1
 8005394:	8523      	strh	r3, [r4, #40]	; 0x28
					hi2c->XferCount--;
 8005396:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005398:	3b01      	subs	r3, #1
 800539a:	b29b      	uxth	r3, r3
 800539c:	8563      	strh	r3, [r4, #42]	; 0x2a
					(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800539e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053a0:	1c5a      	adds	r2, r3, #1
 80053a2:	6262      	str	r2, [r4, #36]	; 0x24
 80053a4:	6822      	ldr	r2, [r4, #0]
					(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80053a6:	6912      	ldr	r2, [r2, #16]
 80053a8:	701a      	strb	r2, [r3, #0]
					hi2c->XferSize--;
 80053aa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80053ac:	3b01      	subs	r3, #1
 80053ae:	8523      	strh	r3, [r4, #40]	; 0x28
					hi2c->XferCount--;
 80053b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80053b2:	3b01      	subs	r3, #1
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	8563      	strh	r3, [r4, #42]	; 0x2a
 80053b8:	e751      	b.n	800525e <HAL_I2C_Master_Receive+0x10e>
					if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 80053ba:	f7ff fcdd 	bl	8004d78 <I2C_WaitOnFlagUntilTimeout>
 80053be:	4602      	mov	r2, r0
 80053c0:	2800      	cmp	r0, #0
 80053c2:	d19f      	bne.n	8005304 <HAL_I2C_Master_Receive+0x1b4>
					hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80053c4:	6823      	ldr	r3, [r4, #0]
 80053c6:	6819      	ldr	r1, [r3, #0]
 80053c8:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80053cc:	6019      	str	r1, [r3, #0]
					(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80053ce:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	1c48      	adds	r0, r1, #1
 80053d4:	6260      	str	r0, [r4, #36]	; 0x24
 80053d6:	700b      	strb	r3, [r1, #0]
					hi2c->XferSize--;
 80053d8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
					if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 80053da:	9600      	str	r6, [sp, #0]
					hi2c->XferSize--;
 80053dc:	3b01      	subs	r3, #1
 80053de:	8523      	strh	r3, [r4, #40]	; 0x28
					hi2c->XferCount--;
 80053e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80053e2:	3b01      	subs	r3, #1
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	8563      	strh	r3, [r4, #42]	; 0x2a
					if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 80053e8:	4641      	mov	r1, r8
 80053ea:	463b      	mov	r3, r7
 80053ec:	4620      	mov	r0, r4
 80053ee:	e7c1      	b.n	8005374 <HAL_I2C_Master_Receive+0x224>
 80053f0:	00100002 	.word	0x00100002
 80053f4:	00010002 	.word	0x00010002
 80053f8:	00010008 	.word	0x00010008
 80053fc:	00010004 	.word	0x00010004
				if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8005400:	4632      	mov	r2, r6
 8005402:	4639      	mov	r1, r7
 8005404:	4620      	mov	r0, r4
 8005406:	f7ff fd0b 	bl	8004e20 <I2C_WaitOnRXNEFlagUntilTimeout>
 800540a:	2800      	cmp	r0, #0
 800540c:	f47f af37 	bne.w	800527e <HAL_I2C_Master_Receive+0x12e>
				(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8005410:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005412:	1c5a      	adds	r2, r3, #1
 8005414:	6262      	str	r2, [r4, #36]	; 0x24
 8005416:	6822      	ldr	r2, [r4, #0]
 8005418:	6912      	ldr	r2, [r2, #16]
 800541a:	701a      	strb	r2, [r3, #0]
				hi2c->XferSize--;
 800541c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
				if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) {
 800541e:	6822      	ldr	r2, [r4, #0]
				hi2c->XferSize--;
 8005420:	3b01      	subs	r3, #1
 8005422:	8523      	strh	r3, [r4, #40]	; 0x28
				hi2c->XferCount--;
 8005424:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005426:	3b01      	subs	r3, #1
 8005428:	b29b      	uxth	r3, r3
 800542a:	8563      	strh	r3, [r4, #42]	; 0x2a
				if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) {
 800542c:	6953      	ldr	r3, [r2, #20]
 800542e:	075b      	lsls	r3, r3, #29
 8005430:	f57f af15 	bpl.w	800525e <HAL_I2C_Master_Receive+0x10e>
					(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8005434:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005436:	1c59      	adds	r1, r3, #1
 8005438:	6261      	str	r1, [r4, #36]	; 0x24
 800543a:	e7b4      	b.n	80053a6 <HAL_I2C_Master_Receive+0x256>

0800543c <HAL_I2C_MasterTxCpltCallback>:
 800543c:	4770      	bx	lr

0800543e <HAL_I2C_MasterRxCpltCallback>:
 800543e:	4770      	bx	lr

08005440 <HAL_I2C_SlaveTxCpltCallback>:
 8005440:	4770      	bx	lr

08005442 <HAL_I2C_SlaveRxCpltCallback>:
 8005442:	4770      	bx	lr

08005444 <HAL_I2C_AddrCallback>:
{
 8005444:	4770      	bx	lr

08005446 <HAL_I2C_ListenCpltCallback>:
 8005446:	4770      	bx	lr

08005448 <HAL_I2C_MemTxCpltCallback>:
 8005448:	4770      	bx	lr

0800544a <HAL_I2C_MemRxCpltCallback>:
 800544a:	4770      	bx	lr

0800544c <HAL_I2C_ErrorCallback>:
 800544c:	4770      	bx	lr

0800544e <HAL_I2C_AbortCpltCallback>:
{
 800544e:	4770      	bx	lr

08005450 <I2C_ITError>:
	uint32_t CurrentState = hi2c->State;
 8005450:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
	if ((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)) {
 8005454:	3b29      	subs	r3, #41	; 0x29
 8005456:	2b01      	cmp	r3, #1
{
 8005458:	b510      	push	{r4, lr}
 800545a:	6803      	ldr	r3, [r0, #0]
 800545c:	4604      	mov	r4, r0
	if ((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)) {
 800545e:	d839      	bhi.n	80054d4 <I2C_ITError+0x84>
		hi2c->PreviousState = I2C_STATE_NONE;
 8005460:	2200      	movs	r2, #0
 8005462:	6302      	str	r2, [r0, #48]	; 0x30
		hi2c->State = HAL_I2C_STATE_LISTEN;
 8005464:	2228      	movs	r2, #40	; 0x28
 8005466:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
	hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005470:	601a      	str	r2, [r3, #0]
	if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) {
 8005472:	685a      	ldr	r2, [r3, #4]
 8005474:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8005478:	d054      	beq.n	8005524 <I2C_ITError+0xd4>
		hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800547a:	685a      	ldr	r2, [r3, #4]
		if (hi2c->hdmatx->State != HAL_DMA_STATE_READY) {
 800547c:	6b60      	ldr	r0, [r4, #52]	; 0x34
		hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800547e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005482:	605a      	str	r2, [r3, #4]
		if (hi2c->hdmatx->State != HAL_DMA_STATE_READY) {
 8005484:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8005488:	2b01      	cmp	r3, #1
 800548a:	4b39      	ldr	r3, [pc, #228]	; (8005570 <I2C_ITError+0x120>)
 800548c:	d031      	beq.n	80054f2 <I2C_ITError+0xa2>
			hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800548e:	6503      	str	r3, [r0, #80]	; 0x50
			if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK) {
 8005490:	f7ff fa70 	bl	8004974 <HAL_DMA_Abort_IT>
 8005494:	b150      	cbz	r0, 80054ac <I2C_ITError+0x5c>
				__HAL_I2C_DISABLE(hi2c);
 8005496:	6822      	ldr	r2, [r4, #0]
				hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005498:	6b60      	ldr	r0, [r4, #52]	; 0x34
				__HAL_I2C_DISABLE(hi2c);
 800549a:	6813      	ldr	r3, [r2, #0]
 800549c:	f023 0301 	bic.w	r3, r3, #1
 80054a0:	6013      	str	r3, [r2, #0]
				hi2c->State = HAL_I2C_STATE_READY;
 80054a2:	2320      	movs	r3, #32
 80054a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
				hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80054a8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80054aa:	4798      	blx	r3
	if ((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)) {
 80054ac:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80054b0:	2b28      	cmp	r3, #40	; 0x28
 80054b2:	d10e      	bne.n	80054d2 <I2C_ITError+0x82>
 80054b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054b6:	075b      	lsls	r3, r3, #29
 80054b8:	d50b      	bpl.n	80054d2 <I2C_ITError+0x82>
		hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054ba:	4b2e      	ldr	r3, [pc, #184]	; (8005574 <I2C_ITError+0x124>)
 80054bc:	62e3      	str	r3, [r4, #44]	; 0x2c
		hi2c->State = HAL_I2C_STATE_READY;
 80054be:	2220      	movs	r2, #32
		hi2c->PreviousState = I2C_STATE_NONE;
 80054c0:	2300      	movs	r3, #0
 80054c2:	6323      	str	r3, [r4, #48]	; 0x30
		HAL_I2C_ListenCpltCallback(hi2c);
 80054c4:	4620      	mov	r0, r4
		hi2c->State = HAL_I2C_STATE_READY;
 80054c6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ca:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		HAL_I2C_ListenCpltCallback(hi2c);
 80054ce:	f7ff ffba 	bl	8005446 <HAL_I2C_ListenCpltCallback>
 80054d2:	bd10      	pop	{r4, pc}
		if ((hi2c->State != HAL_I2C_STATE_ABORT) && ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) != I2C_CR2_DMAEN)) {
 80054d4:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80054d8:	2a60      	cmp	r2, #96	; 0x60
 80054da:	d005      	beq.n	80054e8 <I2C_ITError+0x98>
 80054dc:	685a      	ldr	r2, [r3, #4]
 80054de:	0512      	lsls	r2, r2, #20
			hi2c->State = HAL_I2C_STATE_READY;
 80054e0:	bf5c      	itt	pl
 80054e2:	2220      	movpl	r2, #32
 80054e4:	f880 203d 	strbpl.w	r2, [r0, #61]	; 0x3d
		hi2c->PreviousState = I2C_STATE_NONE;
 80054e8:	2200      	movs	r2, #0
 80054ea:	6322      	str	r2, [r4, #48]	; 0x30
		hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ec:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 80054f0:	e7bb      	b.n	800546a <I2C_ITError+0x1a>
			hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80054f2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80054f4:	6503      	str	r3, [r0, #80]	; 0x50
			if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK) {
 80054f6:	f7ff fa3d 	bl	8004974 <HAL_DMA_Abort_IT>
 80054fa:	2800      	cmp	r0, #0
 80054fc:	d0d6      	beq.n	80054ac <I2C_ITError+0x5c>
				if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) {
 80054fe:	6822      	ldr	r2, [r4, #0]
 8005500:	6953      	ldr	r3, [r2, #20]
 8005502:	0658      	lsls	r0, r3, #25
 8005504:	d504      	bpl.n	8005510 <I2C_ITError+0xc0>
					(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8005506:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005508:	6912      	ldr	r2, [r2, #16]
 800550a:	1c59      	adds	r1, r3, #1
 800550c:	6261      	str	r1, [r4, #36]	; 0x24
 800550e:	701a      	strb	r2, [r3, #0]
				__HAL_I2C_DISABLE(hi2c);
 8005510:	6822      	ldr	r2, [r4, #0]
				hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005512:	6ba0      	ldr	r0, [r4, #56]	; 0x38
				__HAL_I2C_DISABLE(hi2c);
 8005514:	6813      	ldr	r3, [r2, #0]
 8005516:	f023 0301 	bic.w	r3, r3, #1
 800551a:	6013      	str	r3, [r2, #0]
				hi2c->State = HAL_I2C_STATE_READY;
 800551c:	2320      	movs	r3, #32
 800551e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8005522:	e7c1      	b.n	80054a8 <I2C_ITError+0x58>
	}else if (hi2c->State == HAL_I2C_STATE_ABORT) {
 8005524:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8005528:	2960      	cmp	r1, #96	; 0x60
 800552a:	d114      	bne.n	8005556 <I2C_ITError+0x106>
		hi2c->State = HAL_I2C_STATE_READY;
 800552c:	2120      	movs	r1, #32
 800552e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
		hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005532:	6422      	str	r2, [r4, #64]	; 0x40
		if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) {
 8005534:	695a      	ldr	r2, [r3, #20]
 8005536:	0651      	lsls	r1, r2, #25
 8005538:	d504      	bpl.n	8005544 <I2C_ITError+0xf4>
			(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800553a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	1c51      	adds	r1, r2, #1
 8005540:	6261      	str	r1, [r4, #36]	; 0x24
 8005542:	7013      	strb	r3, [r2, #0]
		__HAL_I2C_DISABLE(hi2c);
 8005544:	6822      	ldr	r2, [r4, #0]
 8005546:	6813      	ldr	r3, [r2, #0]
 8005548:	f023 0301 	bic.w	r3, r3, #1
 800554c:	6013      	str	r3, [r2, #0]
		HAL_I2C_AbortCpltCallback(hi2c);
 800554e:	4620      	mov	r0, r4
 8005550:	f7ff ff7d 	bl	800544e <HAL_I2C_AbortCpltCallback>
 8005554:	e7aa      	b.n	80054ac <I2C_ITError+0x5c>
		if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) {
 8005556:	695a      	ldr	r2, [r3, #20]
 8005558:	0652      	lsls	r2, r2, #25
 800555a:	d504      	bpl.n	8005566 <I2C_ITError+0x116>
			(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800555c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	1c51      	adds	r1, r2, #1
 8005562:	6261      	str	r1, [r4, #36]	; 0x24
 8005564:	7013      	strb	r3, [r2, #0]
		HAL_I2C_ErrorCallback(hi2c);
 8005566:	4620      	mov	r0, r4
 8005568:	f7ff ff70 	bl	800544c <HAL_I2C_ErrorCallback>
 800556c:	e79e      	b.n	80054ac <I2C_ITError+0x5c>
 800556e:	bf00      	nop
 8005570:	08005d81 	.word	0x08005d81
 8005574:	ffff0000 	.word	0xffff0000

08005578 <HAL_I2C_EV_IRQHandler>:
	uint32_t sr2itflags = READ_REG(hi2c->Instance->SR2);
 8005578:	6803      	ldr	r3, [r0, #0]
{
 800557a:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t sr2itflags = READ_REG(hi2c->Instance->SR2);
 800557c:	699d      	ldr	r5, [r3, #24]
	uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800557e:	6959      	ldr	r1, [r3, #20]
	uint32_t itsources = READ_REG(hi2c->Instance->CR2);
 8005580:	685a      	ldr	r2, [r3, #4]
	uint32_t CurrentMode = hi2c->Mode;
 8005582:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
 8005586:	b2e4      	uxtb	r4, r4
	if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) {
 8005588:	2c10      	cmp	r4, #16
{
 800558a:	b08d      	sub	sp, #52	; 0x34
	if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) {
 800558c:	d002      	beq.n	8005594 <HAL_I2C_EV_IRQHandler+0x1c>
 800558e:	2c40      	cmp	r4, #64	; 0x40
 8005590:	f040 8255 	bne.w	8005a3e <HAL_I2C_EV_IRQHandler+0x4c6>
		if (((sr1itflags & I2C_FLAG_SB) != RESET) && ((itsources & I2C_IT_EVT) != RESET)) {
 8005594:	f011 1f01 	tst.w	r1, #65537	; 0x10001
 8005598:	d066      	beq.n	8005668 <HAL_I2C_EV_IRQHandler+0xf0>
 800559a:	0597      	lsls	r7, r2, #22
 800559c:	d564      	bpl.n	8005668 <HAL_I2C_EV_IRQHandler+0xf0>
	if (hi2c->Mode == HAL_I2C_MODE_MEM) {
 800559e:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
 80055a2:	2c40      	cmp	r4, #64	; 0x40
 80055a4:	d143      	bne.n	800562e <HAL_I2C_EV_IRQHandler+0xb6>
		if (hi2c->EventCount == 0U) {
 80055a6:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80055a8:	2c00      	cmp	r4, #0
 80055aa:	d13b      	bne.n	8005624 <HAL_I2C_EV_IRQHandler+0xac>
			hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80055ac:	6c44      	ldr	r4, [r0, #68]	; 0x44
				hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80055ae:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
				hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80055b2:	611c      	str	r4, [r3, #16]
		if ((sr2itflags & I2C_FLAG_TRA) != RESET) {
 80055b4:	4e98      	ldr	r6, [pc, #608]	; (8005818 <HAL_I2C_EV_IRQHandler+0x2a0>)
 80055b6:	4c99      	ldr	r4, [pc, #612]	; (800581c <HAL_I2C_EV_IRQHandler+0x2a4>)
 80055b8:	402e      	ands	r6, r5
 80055ba:	400c      	ands	r4, r1
 80055bc:	2e00      	cmp	r6, #0
 80055be:	f000 819f 	beq.w	8005900 <HAL_I2C_EV_IRQHandler+0x388>
			if (((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET)) {
 80055c2:	4d97      	ldr	r5, [pc, #604]	; (8005820 <HAL_I2C_EV_IRQHandler+0x2a8>)
 80055c4:	400d      	ands	r5, r1
 80055c6:	2d00      	cmp	r5, #0
 80055c8:	f000 8166 	beq.w	8005898 <HAL_I2C_EV_IRQHandler+0x320>
 80055cc:	0555      	lsls	r5, r2, #21
 80055ce:	f140 8163 	bpl.w	8005898 <HAL_I2C_EV_IRQHandler+0x320>
 80055d2:	2c00      	cmp	r4, #0
 80055d4:	f040 8160 	bne.w	8005898 <HAL_I2C_EV_IRQHandler+0x320>
	uint32_t CurrentState = hi2c->State;
 80055d8:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
	if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX)) {
 80055dc:	8d05      	ldrh	r5, [r0, #40]	; 0x28
	uint32_t CurrentMode = hi2c->Mode;
 80055de:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
	uint32_t CurrentXferOptions = hi2c->XferOptions;
 80055e2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
	uint32_t CurrentState = hi2c->State;
 80055e4:	b2d2      	uxtb	r2, r2
	uint32_t CurrentMode = hi2c->Mode;
 80055e6:	b2c9      	uxtb	r1, r1
	if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX)) {
 80055e8:	2d00      	cmp	r5, #0
 80055ea:	f040 8105 	bne.w	80057f8 <HAL_I2C_EV_IRQHandler+0x280>
 80055ee:	2a21      	cmp	r2, #33	; 0x21
 80055f0:	f040 8104 	bne.w	80057fc <HAL_I2C_EV_IRQHandler+0x284>
		if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME)) {
 80055f4:	2c04      	cmp	r4, #4
 80055f6:	f000 816c 	beq.w	80058d2 <HAL_I2C_EV_IRQHandler+0x35a>
 80055fa:	2c08      	cmp	r4, #8
 80055fc:	f000 8169 	beq.w	80058d2 <HAL_I2C_EV_IRQHandler+0x35a>
 8005600:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
 8005604:	f000 8165 	beq.w	80058d2 <HAL_I2C_EV_IRQHandler+0x35a>
			__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005608:	685a      	ldr	r2, [r3, #4]
 800560a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800560e:	605a      	str	r2, [r3, #4]
			hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005610:	2311      	movs	r3, #17
 8005612:	6303      	str	r3, [r0, #48]	; 0x30
			hi2c->Mode = HAL_I2C_MODE_NONE;
 8005614:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
				hi2c->State = HAL_I2C_STATE_READY;
 8005618:	2320      	movs	r3, #32
 800561a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
				HAL_I2C_MasterTxCpltCallback(hi2c);
 800561e:	f7ff ff0d 	bl	800543c <HAL_I2C_MasterTxCpltCallback>
 8005622:	e0f6      	b.n	8005812 <HAL_I2C_EV_IRQHandler+0x29a>
			hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005624:	6c44      	ldr	r4, [r0, #68]	; 0x44
				hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005626:	f044 0401 	orr.w	r4, r4, #1
 800562a:	b2e4      	uxtb	r4, r4
 800562c:	e7c1      	b.n	80055b2 <HAL_I2C_EV_IRQHandler+0x3a>
		if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT) {
 800562e:	6904      	ldr	r4, [r0, #16]
 8005630:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 8005634:	d105      	bne.n	8005642 <HAL_I2C_EV_IRQHandler+0xca>
			if (hi2c->State == HAL_I2C_STATE_BUSY_TX) {
 8005636:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800563a:	2c21      	cmp	r4, #33	; 0x21
				hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800563c:	6c44      	ldr	r4, [r0, #68]	; 0x44
			if (hi2c->State == HAL_I2C_STATE_BUSY_TX) {
 800563e:	d1f2      	bne.n	8005626 <HAL_I2C_EV_IRQHandler+0xae>
 8005640:	e7b5      	b.n	80055ae <HAL_I2C_EV_IRQHandler+0x36>
			if (hi2c->EventCount == 0U) {
 8005642:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8005644:	b934      	cbnz	r4, 8005654 <HAL_I2C_EV_IRQHandler+0xdc>
				hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005646:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005648:	11e4      	asrs	r4, r4, #7
 800564a:	f004 0406 	and.w	r4, r4, #6
 800564e:	f044 04f0 	orr.w	r4, r4, #240	; 0xf0
 8005652:	e7ae      	b.n	80055b2 <HAL_I2C_EV_IRQHandler+0x3a>
			}else if (hi2c->EventCount == 1U) {
 8005654:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8005656:	2c01      	cmp	r4, #1
 8005658:	d1ac      	bne.n	80055b4 <HAL_I2C_EV_IRQHandler+0x3c>
				hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800565a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800565c:	11e4      	asrs	r4, r4, #7
 800565e:	f004 0406 	and.w	r4, r4, #6
 8005662:	f044 04f1 	orr.w	r4, r4, #241	; 0xf1
 8005666:	e7a4      	b.n	80055b2 <HAL_I2C_EV_IRQHandler+0x3a>
		else if (((sr1itflags & I2C_FLAG_ADD10) != RESET) && ((itsources & I2C_IT_EVT) != RESET)) {
 8005668:	4c6e      	ldr	r4, [pc, #440]	; (8005824 <HAL_I2C_EV_IRQHandler+0x2ac>)
 800566a:	400c      	ands	r4, r1
 800566c:	b11c      	cbz	r4, 8005676 <HAL_I2C_EV_IRQHandler+0xfe>
 800566e:	0596      	lsls	r6, r2, #22
 8005670:	d501      	bpl.n	8005676 <HAL_I2C_EV_IRQHandler+0xfe>
	hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005672:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005674:	e7d9      	b.n	800562a <HAL_I2C_EV_IRQHandler+0xb2>
		else if (((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET)) {
 8005676:	4c6c      	ldr	r4, [pc, #432]	; (8005828 <HAL_I2C_EV_IRQHandler+0x2b0>)
 8005678:	400c      	ands	r4, r1
 800567a:	2c00      	cmp	r4, #0
 800567c:	d09a      	beq.n	80055b4 <HAL_I2C_EV_IRQHandler+0x3c>
 800567e:	0594      	lsls	r4, r2, #22
 8005680:	d598      	bpl.n	80055b4 <HAL_I2C_EV_IRQHandler+0x3c>
	uint32_t CurrentMode = hi2c->Mode;
 8005682:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
	uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005686:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
	uint32_t Prev_State = hi2c->PreviousState;
 8005688:	f8d0 e030 	ldr.w	lr, [r0, #48]	; 0x30
	if (hi2c->State == HAL_I2C_STATE_BUSY_RX) {
 800568c:	f890 703d 	ldrb.w	r7, [r0, #61]	; 0x3d
 8005690:	2f22      	cmp	r7, #34	; 0x22
	uint32_t CurrentMode = hi2c->Mode;
 8005692:	b2e4      	uxtb	r4, r4
	if (hi2c->State == HAL_I2C_STATE_BUSY_RX) {
 8005694:	f040 80a8 	bne.w	80057e8 <HAL_I2C_EV_IRQHandler+0x270>
		if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM)) {
 8005698:	6d07      	ldr	r7, [r0, #80]	; 0x50
 800569a:	b947      	cbnz	r7, 80056ae <HAL_I2C_EV_IRQHandler+0x136>
 800569c:	2c40      	cmp	r4, #64	; 0x40
 800569e:	d106      	bne.n	80056ae <HAL_I2C_EV_IRQHandler+0x136>
			__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056a0:	9701      	str	r7, [sp, #4]
 80056a2:	695c      	ldr	r4, [r3, #20]
 80056a4:	9401      	str	r4, [sp, #4]
 80056a6:	699c      	ldr	r4, [r3, #24]
 80056a8:	9401      	str	r4, [sp, #4]
 80056aa:	9c01      	ldr	r4, [sp, #4]
 80056ac:	e782      	b.n	80055b4 <HAL_I2C_EV_IRQHandler+0x3c>
		}else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)) {
 80056ae:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80056b0:	b98c      	cbnz	r4, 80056d6 <HAL_I2C_EV_IRQHandler+0x15e>
 80056b2:	6907      	ldr	r7, [r0, #16]
 80056b4:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
 80056b8:	d10d      	bne.n	80056d6 <HAL_I2C_EV_IRQHandler+0x15e>
			__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056ba:	9402      	str	r4, [sp, #8]
 80056bc:	695c      	ldr	r4, [r3, #20]
 80056be:	9402      	str	r4, [sp, #8]
 80056c0:	699c      	ldr	r4, [r3, #24]
 80056c2:	9402      	str	r4, [sp, #8]
 80056c4:	9c02      	ldr	r4, [sp, #8]
			hi2c->Instance->CR1 |= I2C_CR1_START;
 80056c6:	681c      	ldr	r4, [r3, #0]
 80056c8:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 80056cc:	601c      	str	r4, [r3, #0]
			hi2c->EventCount++;
 80056ce:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80056d0:	3401      	adds	r4, #1
			hi2c->EventCount = 0U;
 80056d2:	6504      	str	r4, [r0, #80]	; 0x50
 80056d4:	e76e      	b.n	80055b4 <HAL_I2C_EV_IRQHandler+0x3c>
			if (hi2c->XferCount == 0U) {
 80056d6:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 80056d8:	b2a4      	uxth	r4, r4
 80056da:	b954      	cbnz	r4, 80056f2 <HAL_I2C_EV_IRQHandler+0x17a>
				__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056dc:	9403      	str	r4, [sp, #12]
 80056de:	695c      	ldr	r4, [r3, #20]
 80056e0:	9403      	str	r4, [sp, #12]
 80056e2:	699c      	ldr	r4, [r3, #24]
 80056e4:	9403      	str	r4, [sp, #12]
 80056e6:	9c03      	ldr	r4, [sp, #12]
						hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80056e8:	681c      	ldr	r4, [r3, #0]
 80056ea:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 80056ee:	601c      	str	r4, [r3, #0]
 80056f0:	e019      	b.n	8005726 <HAL_I2C_EV_IRQHandler+0x1ae>
			}else if (hi2c->XferCount == 1U) {
 80056f2:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 80056f4:	b2a4      	uxth	r4, r4
 80056f6:	2c01      	cmp	r4, #1
 80056f8:	d142      	bne.n	8005780 <HAL_I2C_EV_IRQHandler+0x208>
				if (CurrentXferOptions == I2C_NO_OPTION_FRAME) {
 80056fa:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 80056fe:	d11b      	bne.n	8005738 <HAL_I2C_EV_IRQHandler+0x1c0>
					hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005700:	681c      	ldr	r4, [r3, #0]
 8005702:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8005706:	601c      	str	r4, [r3, #0]
					if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) {
 8005708:	685c      	ldr	r4, [r3, #4]
 800570a:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
 800570e:	d00c      	beq.n	800572a <HAL_I2C_EV_IRQHandler+0x1b2>
						hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005710:	681c      	ldr	r4, [r3, #0]
 8005712:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8005716:	601c      	str	r4, [r3, #0]
						__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005718:	2400      	movs	r4, #0
 800571a:	9404      	str	r4, [sp, #16]
 800571c:	695c      	ldr	r4, [r3, #20]
 800571e:	9404      	str	r4, [sp, #16]
 8005720:	699c      	ldr	r4, [r3, #24]
 8005722:	9404      	str	r4, [sp, #16]
 8005724:	9c04      	ldr	r4, [sp, #16]
			hi2c->EventCount = 0U;
 8005726:	2400      	movs	r4, #0
 8005728:	e7d3      	b.n	80056d2 <HAL_I2C_EV_IRQHandler+0x15a>
						__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800572a:	9405      	str	r4, [sp, #20]
 800572c:	695c      	ldr	r4, [r3, #20]
 800572e:	9405      	str	r4, [sp, #20]
 8005730:	699c      	ldr	r4, [r3, #24]
 8005732:	9405      	str	r4, [sp, #20]
 8005734:	9c05      	ldr	r4, [sp, #20]
 8005736:	e7d7      	b.n	80056e8 <HAL_I2C_EV_IRQHandler+0x170>
				else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005738:	2e04      	cmp	r6, #4
 800573a:	d015      	beq.n	8005768 <HAL_I2C_EV_IRQHandler+0x1f0>
 800573c:	2e08      	cmp	r6, #8
 800573e:	d013      	beq.n	8005768 <HAL_I2C_EV_IRQHandler+0x1f0>
					 && (Prev_State != I2C_STATE_MASTER_BUSY_RX)) {
 8005740:	f1be 0f12 	cmp.w	lr, #18
 8005744:	d010      	beq.n	8005768 <HAL_I2C_EV_IRQHandler+0x1f0>
					if (hi2c->XferOptions != I2C_NEXT_FRAME) {
 8005746:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8005748:	2c02      	cmp	r4, #2
						hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800574a:	681c      	ldr	r4, [r3, #0]
 800574c:	bf14      	ite	ne
 800574e:	f424 6480 	bicne.w	r4, r4, #1024	; 0x400
						hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8005752:	f444 6480 	orreq.w	r4, r4, #1024	; 0x400
 8005756:	601c      	str	r4, [r3, #0]
					__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005758:	2400      	movs	r4, #0
 800575a:	9406      	str	r4, [sp, #24]
 800575c:	695c      	ldr	r4, [r3, #20]
 800575e:	9406      	str	r4, [sp, #24]
 8005760:	699c      	ldr	r4, [r3, #24]
 8005762:	9406      	str	r4, [sp, #24]
 8005764:	9c06      	ldr	r4, [sp, #24]
 8005766:	e7de      	b.n	8005726 <HAL_I2C_EV_IRQHandler+0x1ae>
					hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005768:	681c      	ldr	r4, [r3, #0]
 800576a:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 800576e:	601c      	str	r4, [r3, #0]
					__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005770:	2400      	movs	r4, #0
 8005772:	9407      	str	r4, [sp, #28]
 8005774:	695c      	ldr	r4, [r3, #20]
 8005776:	9407      	str	r4, [sp, #28]
 8005778:	699c      	ldr	r4, [r3, #24]
 800577a:	9407      	str	r4, [sp, #28]
 800577c:	9c07      	ldr	r4, [sp, #28]
 800577e:	e7b3      	b.n	80056e8 <HAL_I2C_EV_IRQHandler+0x170>
			}else if (hi2c->XferCount == 2U) {
 8005780:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8005782:	b2a4      	uxth	r4, r4
 8005784:	2c02      	cmp	r4, #2
 8005786:	d11c      	bne.n	80057c2 <HAL_I2C_EV_IRQHandler+0x24a>
				if (hi2c->XferOptions != I2C_NEXT_FRAME) {
 8005788:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800578a:	2c02      	cmp	r4, #2
					hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800578c:	681c      	ldr	r4, [r3, #0]
 800578e:	bf1d      	ittte	ne
 8005790:	f424 6480 	bicne.w	r4, r4, #1024	; 0x400
 8005794:	601c      	strne	r4, [r3, #0]
					hi2c->Instance->CR1 |= I2C_CR1_POS;
 8005796:	681c      	ldrne	r4, [r3, #0]
					hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8005798:	f444 6480 	orreq.w	r4, r4, #1024	; 0x400
					hi2c->Instance->CR1 |= I2C_CR1_POS;
 800579c:	bf18      	it	ne
 800579e:	f444 6400 	orrne.w	r4, r4, #2048	; 0x800
					hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80057a2:	601c      	str	r4, [r3, #0]
				if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) {
 80057a4:	685c      	ldr	r4, [r3, #4]
 80057a6:	0527      	lsls	r7, r4, #20
					hi2c->Instance->CR2 |= I2C_CR2_LAST;
 80057a8:	bf42      	ittt	mi
 80057aa:	685c      	ldrmi	r4, [r3, #4]
 80057ac:	f444 5480 	orrmi.w	r4, r4, #4096	; 0x1000
 80057b0:	605c      	strmi	r4, [r3, #4]
				__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057b2:	2400      	movs	r4, #0
 80057b4:	9408      	str	r4, [sp, #32]
 80057b6:	695c      	ldr	r4, [r3, #20]
 80057b8:	9408      	str	r4, [sp, #32]
 80057ba:	699c      	ldr	r4, [r3, #24]
 80057bc:	9408      	str	r4, [sp, #32]
 80057be:	9c08      	ldr	r4, [sp, #32]
 80057c0:	e7b1      	b.n	8005726 <HAL_I2C_EV_IRQHandler+0x1ae>
				hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80057c2:	681c      	ldr	r4, [r3, #0]
 80057c4:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 80057c8:	601c      	str	r4, [r3, #0]
				if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) {
 80057ca:	685c      	ldr	r4, [r3, #4]
 80057cc:	0526      	lsls	r6, r4, #20
					hi2c->Instance->CR2 |= I2C_CR2_LAST;
 80057ce:	bf42      	ittt	mi
 80057d0:	685c      	ldrmi	r4, [r3, #4]
 80057d2:	f444 5480 	orrmi.w	r4, r4, #4096	; 0x1000
 80057d6:	605c      	strmi	r4, [r3, #4]
				__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057d8:	2400      	movs	r4, #0
 80057da:	9409      	str	r4, [sp, #36]	; 0x24
 80057dc:	695c      	ldr	r4, [r3, #20]
 80057de:	9409      	str	r4, [sp, #36]	; 0x24
 80057e0:	699c      	ldr	r4, [r3, #24]
 80057e2:	9409      	str	r4, [sp, #36]	; 0x24
 80057e4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80057e6:	e79e      	b.n	8005726 <HAL_I2C_EV_IRQHandler+0x1ae>
		__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057e8:	2400      	movs	r4, #0
 80057ea:	940a      	str	r4, [sp, #40]	; 0x28
 80057ec:	695c      	ldr	r4, [r3, #20]
 80057ee:	940a      	str	r4, [sp, #40]	; 0x28
 80057f0:	699c      	ldr	r4, [r3, #24]
 80057f2:	940a      	str	r4, [sp, #40]	; 0x28
 80057f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80057f6:	e6dd      	b.n	80055b4 <HAL_I2C_EV_IRQHandler+0x3c>
	}else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80057f8:	2a21      	cmp	r2, #33	; 0x21
 80057fa:	d003      	beq.n	8005804 <HAL_I2C_EV_IRQHandler+0x28c>
 80057fc:	2940      	cmp	r1, #64	; 0x40
 80057fe:	d108      	bne.n	8005812 <HAL_I2C_EV_IRQHandler+0x29a>
		  ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX))) {
 8005800:	2a22      	cmp	r2, #34	; 0x22
 8005802:	d106      	bne.n	8005812 <HAL_I2C_EV_IRQHandler+0x29a>
		if (hi2c->XferCount == 0U) {
 8005804:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8005806:	b292      	uxth	r2, r2
 8005808:	b982      	cbnz	r2, 800582c <HAL_I2C_EV_IRQHandler+0x2b4>
			__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800580a:	685a      	ldr	r2, [r3, #4]
 800580c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005810:	605a      	str	r2, [r3, #4]
}
 8005812:	b00d      	add	sp, #52	; 0x34
 8005814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005816:	bf00      	nop
 8005818:	00100004 	.word	0x00100004
 800581c:	00010004 	.word	0x00010004
 8005820:	00010080 	.word	0x00010080
 8005824:	00010008 	.word	0x00010008
 8005828:	00010002 	.word	0x00010002
			if (hi2c->Mode == HAL_I2C_MODE_MEM) {
 800582c:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8005830:	2a40      	cmp	r2, #64	; 0x40
 8005832:	d127      	bne.n	8005884 <HAL_I2C_EV_IRQHandler+0x30c>
				if (hi2c->EventCount == 0) {
 8005834:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8005836:	b97a      	cbnz	r2, 8005858 <HAL_I2C_EV_IRQHandler+0x2e0>
					if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT) {
 8005838:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800583a:	2a01      	cmp	r2, #1
						hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800583c:	6c82      	ldr	r2, [r0, #72]	; 0x48
					if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT) {
 800583e:	d105      	bne.n	800584c <HAL_I2C_EV_IRQHandler+0x2d4>
 8005840:	b2d2      	uxtb	r2, r2
						hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005842:	611a      	str	r2, [r3, #16]
						hi2c->EventCount += 2;
 8005844:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005846:	3302      	adds	r3, #2
						hi2c->EventCount++;
 8005848:	6503      	str	r3, [r0, #80]	; 0x50
 800584a:	e7e2      	b.n	8005812 <HAL_I2C_EV_IRQHandler+0x29a>
						hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800584c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8005850:	611a      	str	r2, [r3, #16]
						hi2c->EventCount++;
 8005852:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005854:	3301      	adds	r3, #1
 8005856:	e7f7      	b.n	8005848 <HAL_I2C_EV_IRQHandler+0x2d0>
				}else if (hi2c->EventCount == 1) {
 8005858:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800585a:	2a01      	cmp	r2, #1
 800585c:	d102      	bne.n	8005864 <HAL_I2C_EV_IRQHandler+0x2ec>
					hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800585e:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8005860:	b2d2      	uxtb	r2, r2
 8005862:	e7f5      	b.n	8005850 <HAL_I2C_EV_IRQHandler+0x2d8>
				}else if (hi2c->EventCount == 2) {
 8005864:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8005866:	2a02      	cmp	r2, #2
 8005868:	d1d3      	bne.n	8005812 <HAL_I2C_EV_IRQHandler+0x29a>
					if (hi2c->State == HAL_I2C_STATE_BUSY_RX) {
 800586a:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 800586e:	2a22      	cmp	r2, #34	; 0x22
 8005870:	d104      	bne.n	800587c <HAL_I2C_EV_IRQHandler+0x304>
						hi2c->Instance->CR1 |= I2C_CR1_START;
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005878:	601a      	str	r2, [r3, #0]
 800587a:	e7ca      	b.n	8005812 <HAL_I2C_EV_IRQHandler+0x29a>
					}else if (hi2c->State == HAL_I2C_STATE_BUSY_TX) {
 800587c:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8005880:	2a21      	cmp	r2, #33	; 0x21
 8005882:	d1c6      	bne.n	8005812 <HAL_I2C_EV_IRQHandler+0x29a>
		hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8005884:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8005886:	1c51      	adds	r1, r2, #1
 8005888:	6241      	str	r1, [r0, #36]	; 0x24
 800588a:	7812      	ldrb	r2, [r2, #0]
 800588c:	611a      	str	r2, [r3, #16]
		hi2c->XferCount--;
 800588e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8005890:	3b01      	subs	r3, #1
 8005892:	b29b      	uxth	r3, r3
 8005894:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 8005896:	e7bc      	b.n	8005812 <HAL_I2C_EV_IRQHandler+0x29a>
			else if (((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET)) {
 8005898:	2c00      	cmp	r4, #0
 800589a:	d0ba      	beq.n	8005812 <HAL_I2C_EV_IRQHandler+0x29a>
 800589c:	0594      	lsls	r4, r2, #22
 800589e:	d5b8      	bpl.n	8005812 <HAL_I2C_EV_IRQHandler+0x29a>
	uint32_t CurrentXferOptions = hi2c->XferOptions;
 80058a0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	if (hi2c->State == HAL_I2C_STATE_BUSY_TX) {
 80058a2:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80058a6:	2a21      	cmp	r2, #33	; 0x21
 80058a8:	d1b3      	bne.n	8005812 <HAL_I2C_EV_IRQHandler+0x29a>
		if (hi2c->XferCount != 0U) {
 80058aa:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80058ac:	b292      	uxth	r2, r2
 80058ae:	2a00      	cmp	r2, #0
 80058b0:	d1e8      	bne.n	8005884 <HAL_I2C_EV_IRQHandler+0x30c>
			if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME)) {
 80058b2:	2904      	cmp	r1, #4
 80058b4:	d00d      	beq.n	80058d2 <HAL_I2C_EV_IRQHandler+0x35a>
 80058b6:	2908      	cmp	r1, #8
 80058b8:	d00b      	beq.n	80058d2 <HAL_I2C_EV_IRQHandler+0x35a>
 80058ba:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 80058be:	d008      	beq.n	80058d2 <HAL_I2C_EV_IRQHandler+0x35a>
				__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058c0:	6859      	ldr	r1, [r3, #4]
 80058c2:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80058c6:	6059      	str	r1, [r3, #4]
				hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80058c8:	2311      	movs	r3, #17
 80058ca:	6303      	str	r3, [r0, #48]	; 0x30
				hi2c->Mode = HAL_I2C_MODE_NONE;
 80058cc:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
 80058d0:	e6a2      	b.n	8005618 <HAL_I2C_EV_IRQHandler+0xa0>
				__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058d8:	605a      	str	r2, [r3, #4]
				hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058e0:	601a      	str	r2, [r3, #0]
				hi2c->PreviousState = I2C_STATE_NONE;
 80058e2:	2300      	movs	r3, #0
				hi2c->State = HAL_I2C_STATE_READY;
 80058e4:	2220      	movs	r2, #32
				hi2c->PreviousState = I2C_STATE_NONE;
 80058e6:	6303      	str	r3, [r0, #48]	; 0x30
				hi2c->State = HAL_I2C_STATE_READY;
 80058e8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
				if (hi2c->Mode == HAL_I2C_MODE_MEM) {
 80058ec:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
					hi2c->Mode = HAL_I2C_MODE_NONE;
 80058f0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
				if (hi2c->Mode == HAL_I2C_MODE_MEM) {
 80058f4:	2a40      	cmp	r2, #64	; 0x40
 80058f6:	f47f ae92 	bne.w	800561e <HAL_I2C_EV_IRQHandler+0xa6>
					HAL_I2C_MemTxCpltCallback(hi2c);
 80058fa:	f7ff fda5 	bl	8005448 <HAL_I2C_MemTxCpltCallback>
 80058fe:	e788      	b.n	8005812 <HAL_I2C_EV_IRQHandler+0x29a>
			if (((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET)) {
 8005900:	4d90      	ldr	r5, [pc, #576]	; (8005b44 <HAL_I2C_EV_IRQHandler+0x5cc>)
 8005902:	400d      	ands	r5, r1
 8005904:	2d00      	cmp	r5, #0
 8005906:	d041      	beq.n	800598c <HAL_I2C_EV_IRQHandler+0x414>
 8005908:	0551      	lsls	r1, r2, #21
 800590a:	d53f      	bpl.n	800598c <HAL_I2C_EV_IRQHandler+0x414>
 800590c:	2c00      	cmp	r4, #0
 800590e:	d13d      	bne.n	800598c <HAL_I2C_EV_IRQHandler+0x414>
	if (hi2c->State == HAL_I2C_STATE_BUSY_RX) {
 8005910:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8005914:	2a22      	cmp	r2, #34	; 0x22
 8005916:	f47f af7c 	bne.w	8005812 <HAL_I2C_EV_IRQHandler+0x29a>
		tmp = hi2c->XferCount;
 800591a:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800591c:	b292      	uxth	r2, r2
		if (tmp > 3U) {
 800591e:	2a03      	cmp	r2, #3
 8005920:	d913      	bls.n	800594a <HAL_I2C_EV_IRQHandler+0x3d2>
			(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8005922:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	1c51      	adds	r1, r2, #1
 8005928:	6241      	str	r1, [r0, #36]	; 0x24
 800592a:	7013      	strb	r3, [r2, #0]
			hi2c->XferCount--;
 800592c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800592e:	3b01      	subs	r3, #1
 8005930:	b29b      	uxth	r3, r3
 8005932:	8543      	strh	r3, [r0, #42]	; 0x2a
			if (hi2c->XferCount == 3) {
 8005934:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8005936:	b29b      	uxth	r3, r3
 8005938:	2b03      	cmp	r3, #3
 800593a:	f47f af6a 	bne.w	8005812 <HAL_I2C_EV_IRQHandler+0x29a>
				__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800593e:	6802      	ldr	r2, [r0, #0]
 8005940:	6853      	ldr	r3, [r2, #4]
 8005942:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005946:	6053      	str	r3, [r2, #4]
 8005948:	e763      	b.n	8005812 <HAL_I2C_EV_IRQHandler+0x29a>
		}else if ((tmp == 1U) || (tmp == 0U)) {
 800594a:	2a01      	cmp	r2, #1
 800594c:	f63f af61 	bhi.w	8005812 <HAL_I2C_EV_IRQHandler+0x29a>
			hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005956:	601a      	str	r2, [r3, #0]
			__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005958:	685a      	ldr	r2, [r3, #4]
 800595a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800595e:	605a      	str	r2, [r3, #4]
			(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8005960:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	1c51      	adds	r1, r2, #1
 8005966:	6241      	str	r1, [r0, #36]	; 0x24
 8005968:	7013      	strb	r3, [r2, #0]
			hi2c->XferCount--;
 800596a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800596c:	3b01      	subs	r3, #1
 800596e:	b29b      	uxth	r3, r3
 8005970:	8543      	strh	r3, [r0, #42]	; 0x2a
			hi2c->State = HAL_I2C_STATE_READY;
 8005972:	2320      	movs	r3, #32
 8005974:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
			hi2c->PreviousState = I2C_STATE_NONE;
 8005978:	6304      	str	r4, [r0, #48]	; 0x30
			if (hi2c->Mode == HAL_I2C_MODE_MEM) {
 800597a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
				hi2c->Mode = HAL_I2C_MODE_NONE;
 800597e:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
			if (hi2c->Mode == HAL_I2C_MODE_MEM) {
 8005982:	2b40      	cmp	r3, #64	; 0x40
		if (hi2c->Mode == HAL_I2C_MODE_MEM) {
 8005984:	d158      	bne.n	8005a38 <HAL_I2C_EV_IRQHandler+0x4c0>
			HAL_I2C_MemRxCpltCallback(hi2c);
 8005986:	f7ff fd60 	bl	800544a <HAL_I2C_MemRxCpltCallback>
 800598a:	e742      	b.n	8005812 <HAL_I2C_EV_IRQHandler+0x29a>
			else if (((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET)) {
 800598c:	2c00      	cmp	r4, #0
 800598e:	f43f af40 	beq.w	8005812 <HAL_I2C_EV_IRQHandler+0x29a>
 8005992:	0597      	lsls	r7, r2, #22
 8005994:	f57f af3d 	bpl.w	8005812 <HAL_I2C_EV_IRQHandler+0x29a>
	uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005998:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	if (hi2c->XferCount == 4U) {
 800599a:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800599c:	b292      	uxth	r2, r2
 800599e:	2a04      	cmp	r2, #4
 80059a0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80059a2:	d108      	bne.n	80059b6 <HAL_I2C_EV_IRQHandler+0x43e>
		__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80059a4:	6859      	ldr	r1, [r3, #4]
 80059a6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80059aa:	6059      	str	r1, [r3, #4]
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80059ac:	1c51      	adds	r1, r2, #1
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	6241      	str	r1, [r0, #36]	; 0x24
 80059b2:	7013      	strb	r3, [r2, #0]
 80059b4:	e76b      	b.n	800588e <HAL_I2C_EV_IRQHandler+0x316>
	}else if (hi2c->XferCount == 3U) {
 80059b6:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 80059b8:	b2a4      	uxth	r4, r4
 80059ba:	2c03      	cmp	r4, #3
 80059bc:	d108      	bne.n	80059d0 <HAL_I2C_EV_IRQHandler+0x458>
		__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80059be:	6859      	ldr	r1, [r3, #4]
 80059c0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80059c4:	6059      	str	r1, [r3, #4]
		hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80059c6:	6819      	ldr	r1, [r3, #0]
 80059c8:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80059cc:	6019      	str	r1, [r3, #0]
 80059ce:	e7ed      	b.n	80059ac <HAL_I2C_EV_IRQHandler+0x434>
	}else if (hi2c->XferCount == 2U) {
 80059d0:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 80059d2:	b2a4      	uxth	r4, r4
 80059d4:	2c02      	cmp	r4, #2
 80059d6:	d1e9      	bne.n	80059ac <HAL_I2C_EV_IRQHandler+0x434>
		if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)) {
 80059d8:	3901      	subs	r1, #1
 80059da:	2901      	cmp	r1, #1
			hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80059dc:	6819      	ldr	r1, [r3, #0]
 80059de:	bf9d      	ittte	ls
 80059e0:	f421 6180 	bicls.w	r1, r1, #1024	; 0x400
 80059e4:	6019      	strls	r1, [r3, #0]
			hi2c->Instance->CR1 |= I2C_CR1_START;
 80059e6:	6819      	ldrls	r1, [r3, #0]
			hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80059e8:	f441 7100 	orrhi.w	r1, r1, #512	; 0x200
			hi2c->Instance->CR1 |= I2C_CR1_START;
 80059ec:	bf98      	it	ls
 80059ee:	f441 7180 	orrls.w	r1, r1, #256	; 0x100
			hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80059f2:	6019      	str	r1, [r3, #0]
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	1c51      	adds	r1, r2, #1
 80059f8:	6241      	str	r1, [r0, #36]	; 0x24
 80059fa:	7013      	strb	r3, [r2, #0]
		hi2c->XferCount--;
 80059fc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80059fe:	3b01      	subs	r3, #1
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	8543      	strh	r3, [r0, #42]	; 0x2a
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8005a04:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005a06:	1c5a      	adds	r2, r3, #1
 8005a08:	6242      	str	r2, [r0, #36]	; 0x24
 8005a0a:	6802      	ldr	r2, [r0, #0]
 8005a0c:	6912      	ldr	r2, [r2, #16]
 8005a0e:	701a      	strb	r2, [r3, #0]
		hi2c->XferCount--;
 8005a10:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
		__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005a12:	6802      	ldr	r2, [r0, #0]
		hi2c->XferCount--;
 8005a14:	3b01      	subs	r3, #1
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	8543      	strh	r3, [r0, #42]	; 0x2a
		__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005a1a:	6853      	ldr	r3, [r2, #4]
 8005a1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a20:	6053      	str	r3, [r2, #4]
		hi2c->State = HAL_I2C_STATE_READY;
 8005a22:	2320      	movs	r3, #32
 8005a24:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
		hi2c->PreviousState = I2C_STATE_NONE;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	6303      	str	r3, [r0, #48]	; 0x30
		if (hi2c->Mode == HAL_I2C_MODE_MEM) {
 8005a2c:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
			hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a30:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
		if (hi2c->Mode == HAL_I2C_MODE_MEM) {
 8005a34:	2a40      	cmp	r2, #64	; 0x40
 8005a36:	e7a5      	b.n	8005984 <HAL_I2C_EV_IRQHandler+0x40c>
			HAL_I2C_MasterRxCpltCallback(hi2c);
 8005a38:	f7ff fd01 	bl	800543e <HAL_I2C_MasterRxCpltCallback>
 8005a3c:	e6e9      	b.n	8005812 <HAL_I2C_EV_IRQHandler+0x29a>
		if (((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET)) {
 8005a3e:	4c42      	ldr	r4, [pc, #264]	; (8005b48 <HAL_I2C_EV_IRQHandler+0x5d0>)
 8005a40:	400c      	ands	r4, r1
 8005a42:	b174      	cbz	r4, 8005a62 <HAL_I2C_EV_IRQHandler+0x4ea>
 8005a44:	0596      	lsls	r6, r2, #22
 8005a46:	d50c      	bpl.n	8005a62 <HAL_I2C_EV_IRQHandler+0x4ea>
	if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET) {
 8005a48:	6999      	ldr	r1, [r3, #24]
	if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET) {
 8005a4a:	699b      	ldr	r3, [r3, #24]
	if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET) {
 8005a4c:	f081 0104 	eor.w	r1, r1, #4
	if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET) {
 8005a50:	061d      	lsls	r5, r3, #24
	uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005a52:	f3c1 0180 	ubfx	r1, r1, #2, #1
		SlaveAddrCode = hi2c->Init.OwnAddress1;
 8005a56:	bf54      	ite	pl
 8005a58:	8982      	ldrhpl	r2, [r0, #12]
		SlaveAddrCode = hi2c->Init.OwnAddress2;
 8005a5a:	8b02      	ldrhmi	r2, [r0, #24]
	HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005a5c:	f7ff fcf2 	bl	8005444 <HAL_I2C_AddrCallback>
 8005a60:	e6d7      	b.n	8005812 <HAL_I2C_EV_IRQHandler+0x29a>
		else if (((sr1itflags & I2C_FLAG_STOPF) != RESET) && ((itsources & I2C_IT_EVT) != RESET)) {
 8005a62:	4c3a      	ldr	r4, [pc, #232]	; (8005b4c <HAL_I2C_EV_IRQHandler+0x5d4>)
 8005a64:	400c      	ands	r4, r1
 8005a66:	2c00      	cmp	r4, #0
 8005a68:	d074      	beq.n	8005b54 <HAL_I2C_EV_IRQHandler+0x5dc>
 8005a6a:	0594      	lsls	r4, r2, #22
 8005a6c:	d572      	bpl.n	8005b54 <HAL_I2C_EV_IRQHandler+0x5dc>
	uint32_t CurrentState = hi2c->State;
 8005a6e:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
	__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a72:	6859      	ldr	r1, [r3, #4]
 8005a74:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8005a78:	6059      	str	r1, [r3, #4]
	__HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005a7a:	2100      	movs	r1, #0
 8005a7c:	910b      	str	r1, [sp, #44]	; 0x2c
 8005a7e:	6959      	ldr	r1, [r3, #20]
 8005a80:	910b      	str	r1, [sp, #44]	; 0x2c
 8005a82:	6819      	ldr	r1, [r3, #0]
 8005a84:	f041 0101 	orr.w	r1, r1, #1
 8005a88:	6019      	str	r1, [r3, #0]
 8005a8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
	hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005a8c:	6819      	ldr	r1, [r3, #0]
 8005a8e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005a92:	6019      	str	r1, [r3, #0]
	if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) {
 8005a94:	6859      	ldr	r1, [r3, #4]
 8005a96:	0509      	lsls	r1, r1, #20
	uint32_t CurrentState = hi2c->State;
 8005a98:	b2d2      	uxtb	r2, r2
	if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) {
 8005a9a:	d50c      	bpl.n	8005ab6 <HAL_I2C_EV_IRQHandler+0x53e>
		if ((hi2c->State == HAL_I2C_STATE_BUSY_RX) || (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)) {
 8005a9c:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8005aa0:	2922      	cmp	r1, #34	; 0x22
 8005aa2:	d003      	beq.n	8005aac <HAL_I2C_EV_IRQHandler+0x534>
 8005aa4:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8005aa8:	292a      	cmp	r1, #42	; 0x2a
 8005aaa:	d129      	bne.n	8005b00 <HAL_I2C_EV_IRQHandler+0x588>
			hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8005aac:	6b81      	ldr	r1, [r0, #56]	; 0x38
			hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8005aae:	6809      	ldr	r1, [r1, #0]
 8005ab0:	6849      	ldr	r1, [r1, #4]
 8005ab2:	b289      	uxth	r1, r1
 8005ab4:	8541      	strh	r1, [r0, #42]	; 0x2a
	if (hi2c->XferCount != 0U) {
 8005ab6:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8005ab8:	b289      	uxth	r1, r1
 8005aba:	b1e1      	cbz	r1, 8005af6 <HAL_I2C_EV_IRQHandler+0x57e>
		if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) {
 8005abc:	6959      	ldr	r1, [r3, #20]
 8005abe:	074f      	lsls	r7, r1, #29
 8005ac0:	d508      	bpl.n	8005ad4 <HAL_I2C_EV_IRQHandler+0x55c>
			(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8005ac2:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	1c4c      	adds	r4, r1, #1
 8005ac8:	6244      	str	r4, [r0, #36]	; 0x24
 8005aca:	700b      	strb	r3, [r1, #0]
			hi2c->XferCount--;
 8005acc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	8543      	strh	r3, [r0, #42]	; 0x2a
		if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) {
 8005ad4:	6801      	ldr	r1, [r0, #0]
 8005ad6:	694b      	ldr	r3, [r1, #20]
 8005ad8:	065e      	lsls	r6, r3, #25
 8005ada:	d508      	bpl.n	8005aee <HAL_I2C_EV_IRQHandler+0x576>
			(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8005adc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005ade:	6909      	ldr	r1, [r1, #16]
 8005ae0:	1c5c      	adds	r4, r3, #1
 8005ae2:	6244      	str	r4, [r0, #36]	; 0x24
 8005ae4:	7019      	strb	r1, [r3, #0]
			hi2c->XferCount--;
 8005ae6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	8543      	strh	r3, [r0, #42]	; 0x2a
		hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005aee:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005af0:	f043 0304 	orr.w	r3, r3, #4
 8005af4:	6403      	str	r3, [r0, #64]	; 0x40
	if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE) {
 8005af6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005af8:	b123      	cbz	r3, 8005b04 <HAL_I2C_EV_IRQHandler+0x58c>
		I2C_ITError(hi2c);
 8005afa:	f7ff fca9 	bl	8005450 <I2C_ITError>
 8005afe:	e688      	b.n	8005812 <HAL_I2C_EV_IRQHandler+0x29a>
			hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8005b00:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8005b02:	e7d4      	b.n	8005aae <HAL_I2C_EV_IRQHandler+0x536>
		if ((CurrentState == HAL_I2C_STATE_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN) || \
 8005b04:	f1a2 0128 	sub.w	r1, r2, #40	; 0x28
 8005b08:	2902      	cmp	r1, #2
 8005b0a:	d80a      	bhi.n	8005b22 <HAL_I2C_EV_IRQHandler+0x5aa>
			hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b0c:	4a10      	ldr	r2, [pc, #64]	; (8005b50 <HAL_I2C_EV_IRQHandler+0x5d8>)
 8005b0e:	62c2      	str	r2, [r0, #44]	; 0x2c
			hi2c->State = HAL_I2C_STATE_READY;
 8005b10:	2220      	movs	r2, #32
			hi2c->PreviousState = I2C_STATE_NONE;
 8005b12:	6303      	str	r3, [r0, #48]	; 0x30
			hi2c->State = HAL_I2C_STATE_READY;
 8005b14:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
			hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b18:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
			HAL_I2C_ListenCpltCallback(hi2c);
 8005b1c:	f7ff fc93 	bl	8005446 <HAL_I2C_ListenCpltCallback>
 8005b20:	e677      	b.n	8005812 <HAL_I2C_EV_IRQHandler+0x29a>
			if ((hi2c->PreviousState == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX)) {
 8005b22:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005b24:	2b22      	cmp	r3, #34	; 0x22
 8005b26:	d002      	beq.n	8005b2e <HAL_I2C_EV_IRQHandler+0x5b6>
 8005b28:	2a22      	cmp	r2, #34	; 0x22
 8005b2a:	f47f ae72 	bne.w	8005812 <HAL_I2C_EV_IRQHandler+0x29a>
				hi2c->PreviousState = I2C_STATE_NONE;
 8005b2e:	2300      	movs	r3, #0
				hi2c->State = HAL_I2C_STATE_READY;
 8005b30:	2220      	movs	r2, #32
				hi2c->PreviousState = I2C_STATE_NONE;
 8005b32:	6303      	str	r3, [r0, #48]	; 0x30
				hi2c->State = HAL_I2C_STATE_READY;
 8005b34:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
				hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b38:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
			HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b3c:	f7ff fc81 	bl	8005442 <HAL_I2C_SlaveRxCpltCallback>
 8005b40:	e667      	b.n	8005812 <HAL_I2C_EV_IRQHandler+0x29a>
 8005b42:	bf00      	nop
 8005b44:	00010040 	.word	0x00010040
 8005b48:	00010002 	.word	0x00010002
 8005b4c:	00010010 	.word	0x00010010
 8005b50:	ffff0000 	.word	0xffff0000
		else if ((sr2itflags & I2C_FLAG_TRA) != RESET) {
 8005b54:	4e39      	ldr	r6, [pc, #228]	; (8005c3c <HAL_I2C_EV_IRQHandler+0x6c4>)
 8005b56:	4c3a      	ldr	r4, [pc, #232]	; (8005c40 <HAL_I2C_EV_IRQHandler+0x6c8>)
 8005b58:	402e      	ands	r6, r5
 8005b5a:	400c      	ands	r4, r1
 8005b5c:	2e00      	cmp	r6, #0
 8005b5e:	d036      	beq.n	8005bce <HAL_I2C_EV_IRQHandler+0x656>
			if (((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET)) {
 8005b60:	4d38      	ldr	r5, [pc, #224]	; (8005c44 <HAL_I2C_EV_IRQHandler+0x6cc>)
 8005b62:	400d      	ands	r5, r1
 8005b64:	b33d      	cbz	r5, 8005bb6 <HAL_I2C_EV_IRQHandler+0x63e>
 8005b66:	0555      	lsls	r5, r2, #21
 8005b68:	d525      	bpl.n	8005bb6 <HAL_I2C_EV_IRQHandler+0x63e>
 8005b6a:	bb24      	cbnz	r4, 8005bb6 <HAL_I2C_EV_IRQHandler+0x63e>
	uint32_t CurrentState = hi2c->State;
 8005b6c:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
	if (hi2c->XferCount != 0U) {
 8005b70:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8005b72:	b292      	uxth	r2, r2
	uint32_t CurrentState = hi2c->State;
 8005b74:	b2c9      	uxtb	r1, r1
	if (hi2c->XferCount != 0U) {
 8005b76:	2a00      	cmp	r2, #0
 8005b78:	f43f ae4b 	beq.w	8005812 <HAL_I2C_EV_IRQHandler+0x29a>
		hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8005b7c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8005b7e:	1c54      	adds	r4, r2, #1
 8005b80:	6244      	str	r4, [r0, #36]	; 0x24
 8005b82:	7812      	ldrb	r2, [r2, #0]
 8005b84:	611a      	str	r2, [r3, #16]
		hi2c->XferCount--;
 8005b86:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8005b88:	3a01      	subs	r2, #1
 8005b8a:	b292      	uxth	r2, r2
 8005b8c:	8542      	strh	r2, [r0, #42]	; 0x2a
		if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)) {
 8005b8e:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8005b90:	b292      	uxth	r2, r2
 8005b92:	2a00      	cmp	r2, #0
 8005b94:	f47f ae3d 	bne.w	8005812 <HAL_I2C_EV_IRQHandler+0x29a>
 8005b98:	2929      	cmp	r1, #41	; 0x29
 8005b9a:	f47f ae3a 	bne.w	8005812 <HAL_I2C_EV_IRQHandler+0x29a>
			__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ba4:	605a      	str	r2, [r3, #4]
			hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005ba6:	2321      	movs	r3, #33	; 0x21
 8005ba8:	6303      	str	r3, [r0, #48]	; 0x30
			hi2c->State = HAL_I2C_STATE_LISTEN;
 8005baa:	2328      	movs	r3, #40	; 0x28
 8005bac:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
			HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005bb0:	f7ff fc46 	bl	8005440 <HAL_I2C_SlaveTxCpltCallback>
 8005bb4:	e62d      	b.n	8005812 <HAL_I2C_EV_IRQHandler+0x29a>
			else if (((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET)) {
 8005bb6:	2c00      	cmp	r4, #0
 8005bb8:	f43f ae2b 	beq.w	8005812 <HAL_I2C_EV_IRQHandler+0x29a>
 8005bbc:	0594      	lsls	r4, r2, #22
 8005bbe:	f57f ae28 	bpl.w	8005812 <HAL_I2C_EV_IRQHandler+0x29a>
	if (hi2c->XferCount != 0U) {
 8005bc2:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8005bc4:	b292      	uxth	r2, r2
 8005bc6:	2a00      	cmp	r2, #0
 8005bc8:	f47f ae5c 	bne.w	8005884 <HAL_I2C_EV_IRQHandler+0x30c>
 8005bcc:	e621      	b.n	8005812 <HAL_I2C_EV_IRQHandler+0x29a>
			if (((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET)) {
 8005bce:	4d1e      	ldr	r5, [pc, #120]	; (8005c48 <HAL_I2C_EV_IRQHandler+0x6d0>)
 8005bd0:	400d      	ands	r5, r1
 8005bd2:	b335      	cbz	r5, 8005c22 <HAL_I2C_EV_IRQHandler+0x6aa>
 8005bd4:	0551      	lsls	r1, r2, #21
 8005bd6:	d524      	bpl.n	8005c22 <HAL_I2C_EV_IRQHandler+0x6aa>
 8005bd8:	bb1c      	cbnz	r4, 8005c22 <HAL_I2C_EV_IRQHandler+0x6aa>
	uint32_t CurrentState = hi2c->State;
 8005bda:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
	if (hi2c->XferCount != 0U) {
 8005bde:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8005be0:	b289      	uxth	r1, r1
	uint32_t CurrentState = hi2c->State;
 8005be2:	b2d2      	uxtb	r2, r2
	if (hi2c->XferCount != 0U) {
 8005be4:	2900      	cmp	r1, #0
 8005be6:	f43f ae14 	beq.w	8005812 <HAL_I2C_EV_IRQHandler+0x29a>
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8005bea:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	1c4c      	adds	r4, r1, #1
 8005bf0:	6244      	str	r4, [r0, #36]	; 0x24
 8005bf2:	700b      	strb	r3, [r1, #0]
		hi2c->XferCount--;
 8005bf4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	8543      	strh	r3, [r0, #42]	; 0x2a
		if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)) {
 8005bfc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f47f ae06 	bne.w	8005812 <HAL_I2C_EV_IRQHandler+0x29a>
 8005c06:	2a2a      	cmp	r2, #42	; 0x2a
 8005c08:	f47f ae03 	bne.w	8005812 <HAL_I2C_EV_IRQHandler+0x29a>
			__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c0c:	6802      	ldr	r2, [r0, #0]
 8005c0e:	6853      	ldr	r3, [r2, #4]
 8005c10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c14:	6053      	str	r3, [r2, #4]
			hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005c16:	2322      	movs	r3, #34	; 0x22
 8005c18:	6303      	str	r3, [r0, #48]	; 0x30
			hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c1a:	2328      	movs	r3, #40	; 0x28
 8005c1c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8005c20:	e78c      	b.n	8005b3c <HAL_I2C_EV_IRQHandler+0x5c4>
			else if (((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET)) {
 8005c22:	2c00      	cmp	r4, #0
 8005c24:	f43f adf5 	beq.w	8005812 <HAL_I2C_EV_IRQHandler+0x29a>
 8005c28:	0592      	lsls	r2, r2, #22
 8005c2a:	f57f adf2 	bpl.w	8005812 <HAL_I2C_EV_IRQHandler+0x29a>
	if (hi2c->XferCount != 0U) {
 8005c2e:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8005c30:	b292      	uxth	r2, r2
 8005c32:	2a00      	cmp	r2, #0
 8005c34:	f43f aded 	beq.w	8005812 <HAL_I2C_EV_IRQHandler+0x29a>
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8005c38:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8005c3a:	e6b7      	b.n	80059ac <HAL_I2C_EV_IRQHandler+0x434>
 8005c3c:	00100004 	.word	0x00100004
 8005c40:	00010004 	.word	0x00010004
 8005c44:	00010080 	.word	0x00010080
 8005c48:	00010040 	.word	0x00010040

08005c4c <HAL_I2C_ER_IRQHandler>:
{
 8005c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005c4e:	6803      	ldr	r3, [r0, #0]
	if (((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET)) {
 8005c50:	4a49      	ldr	r2, [pc, #292]	; (8005d78 <HAL_I2C_ER_IRQHandler+0x12c>)
	uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005c52:	695e      	ldr	r6, [r3, #20]
	uint32_t itsources = READ_REG(hi2c->Instance->CR2);
 8005c54:	685d      	ldr	r5, [r3, #4]
	if (((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET)) {
 8005c56:	4216      	tst	r6, r2
{
 8005c58:	4604      	mov	r4, r0
	if (((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET)) {
 8005c5a:	d008      	beq.n	8005c6e <HAL_I2C_ER_IRQHandler+0x22>
 8005c5c:	05e8      	lsls	r0, r5, #23
 8005c5e:	d506      	bpl.n	8005c6e <HAL_I2C_ER_IRQHandler+0x22>
		hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005c60:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005c62:	f042 0201 	orr.w	r2, r2, #1
 8005c66:	6422      	str	r2, [r4, #64]	; 0x40
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005c68:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005c6c:	615a      	str	r2, [r3, #20]
	if (((sr1itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERR) != RESET)) {
 8005c6e:	f416 3f81 	tst.w	r6, #66048	; 0x10200
 8005c72:	d008      	beq.n	8005c86 <HAL_I2C_ER_IRQHandler+0x3a>
 8005c74:	05e9      	lsls	r1, r5, #23
 8005c76:	d506      	bpl.n	8005c86 <HAL_I2C_ER_IRQHandler+0x3a>
		hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005c78:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005c7a:	f042 0202 	orr.w	r2, r2, #2
 8005c7e:	6422      	str	r2, [r4, #64]	; 0x40
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005c80:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005c84:	615a      	str	r2, [r3, #20]
	if (((sr1itflags & I2C_FLAG_AF) != RESET) && ((itsources & I2C_IT_ERR) != RESET)) {
 8005c86:	f416 3f82 	tst.w	r6, #66560	; 0x10400
 8005c8a:	d036      	beq.n	8005cfa <HAL_I2C_ER_IRQHandler+0xae>
 8005c8c:	05ea      	lsls	r2, r5, #23
 8005c8e:	d534      	bpl.n	8005cfa <HAL_I2C_ER_IRQHandler+0xae>
		tmp1 = hi2c->Mode;
 8005c90:	f894 703e 	ldrb.w	r7, [r4, #62]	; 0x3e
		tmp2 = hi2c->XferCount;
 8005c94:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
		tmp3 = hi2c->State;
 8005c96:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
		tmp4 = hi2c->PreviousState;
 8005c9a:	6b20      	ldr	r0, [r4, #48]	; 0x30
		if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005c9c:	2f20      	cmp	r7, #32
		tmp2 = hi2c->XferCount;
 8005c9e:	b289      	uxth	r1, r1
		tmp3 = hi2c->State;
 8005ca0:	b2d2      	uxtb	r2, r2
		if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005ca2:	d158      	bne.n	8005d56 <HAL_I2C_ER_IRQHandler+0x10a>
 8005ca4:	2900      	cmp	r1, #0
 8005ca6:	d156      	bne.n	8005d56 <HAL_I2C_ER_IRQHandler+0x10a>
 8005ca8:	f002 01f7 	and.w	r1, r2, #247	; 0xf7
 8005cac:	2921      	cmp	r1, #33	; 0x21
 8005cae:	d003      	beq.n	8005cb8 <HAL_I2C_ER_IRQHandler+0x6c>
		    ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005cb0:	2a28      	cmp	r2, #40	; 0x28
 8005cb2:	d150      	bne.n	8005d56 <HAL_I2C_ER_IRQHandler+0x10a>
		     ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX)))) {
 8005cb4:	2821      	cmp	r0, #33	; 0x21
 8005cb6:	d14e      	bne.n	8005d56 <HAL_I2C_ER_IRQHandler+0x10a>
	uint32_t CurrentState = hi2c->State;
 8005cb8:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
	uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005cbc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	if (((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005cbe:	2904      	cmp	r1, #4
	uint32_t CurrentState = hi2c->State;
 8005cc0:	b2d2      	uxtb	r2, r2
	if (((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005cc2:	d001      	beq.n	8005cc8 <HAL_I2C_ER_IRQHandler+0x7c>
 8005cc4:	2908      	cmp	r1, #8
 8005cc6:	d12c      	bne.n	8005d22 <HAL_I2C_ER_IRQHandler+0xd6>
 8005cc8:	2a28      	cmp	r2, #40	; 0x28
 8005cca:	d12a      	bne.n	8005d22 <HAL_I2C_ER_IRQHandler+0xd6>
		hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ccc:	4a2b      	ldr	r2, [pc, #172]	; (8005d7c <HAL_I2C_ER_IRQHandler+0x130>)
 8005cce:	62e2      	str	r2, [r4, #44]	; 0x2c
		__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005cd0:	685a      	ldr	r2, [r3, #4]
 8005cd2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005cd6:	605a      	str	r2, [r3, #4]
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cd8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005cdc:	615a      	str	r2, [r3, #20]
		hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ce4:	601a      	str	r2, [r3, #0]
		hi2c->PreviousState = I2C_STATE_NONE;
 8005ce6:	2300      	movs	r3, #0
		hi2c->State = HAL_I2C_STATE_READY;
 8005ce8:	2220      	movs	r2, #32
		hi2c->PreviousState = I2C_STATE_NONE;
 8005cea:	6323      	str	r3, [r4, #48]	; 0x30
		HAL_I2C_ListenCpltCallback(hi2c);
 8005cec:	4620      	mov	r0, r4
		hi2c->State = HAL_I2C_STATE_READY;
 8005cee:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cf2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		HAL_I2C_ListenCpltCallback(hi2c);
 8005cf6:	f7ff fba6 	bl	8005446 <HAL_I2C_ListenCpltCallback>
	if (((sr1itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERR) != RESET)) {
 8005cfa:	f416 3f84 	tst.w	r6, #67584	; 0x10800
 8005cfe:	d009      	beq.n	8005d14 <HAL_I2C_ER_IRQHandler+0xc8>
 8005d00:	05eb      	lsls	r3, r5, #23
 8005d02:	d507      	bpl.n	8005d14 <HAL_I2C_ER_IRQHandler+0xc8>
		hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005d04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d06:	f043 0308 	orr.w	r3, r3, #8
 8005d0a:	6423      	str	r3, [r4, #64]	; 0x40
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005d0c:	6823      	ldr	r3, [r4, #0]
 8005d0e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005d12:	615a      	str	r2, [r3, #20]
	if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE) {
 8005d14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d16:	b373      	cbz	r3, 8005d76 <HAL_I2C_ER_IRQHandler+0x12a>
		I2C_ITError(hi2c);
 8005d18:	4620      	mov	r0, r4
}
 8005d1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		I2C_ITError(hi2c);
 8005d1e:	f7ff bb97 	b.w	8005450 <I2C_ITError>
	}else if (CurrentState == HAL_I2C_STATE_BUSY_TX) {
 8005d22:	2a21      	cmp	r2, #33	; 0x21
 8005d24:	d123      	bne.n	8005d6e <HAL_I2C_ER_IRQHandler+0x122>
		hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d26:	4915      	ldr	r1, [pc, #84]	; (8005d7c <HAL_I2C_ER_IRQHandler+0x130>)
 8005d28:	62e1      	str	r1, [r4, #44]	; 0x2c
		hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005d2a:	6322      	str	r2, [r4, #48]	; 0x30
		hi2c->State = HAL_I2C_STATE_READY;
 8005d2c:	2220      	movs	r2, #32
 8005d2e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d32:	2200      	movs	r2, #0
 8005d34:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
		__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d38:	685a      	ldr	r2, [r3, #4]
 8005d3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d3e:	605a      	str	r2, [r3, #4]
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d40:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d44:	615a      	str	r2, [r3, #20]
		hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d4c:	601a      	str	r2, [r3, #0]
		HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005d4e:	4620      	mov	r0, r4
 8005d50:	f7ff fb76 	bl	8005440 <HAL_I2C_SlaveTxCpltCallback>
 8005d54:	e7d1      	b.n	8005cfa <HAL_I2C_ER_IRQHandler+0xae>
			hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d56:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005d58:	f042 0204 	orr.w	r2, r2, #4
 8005d5c:	6422      	str	r2, [r4, #64]	; 0x40
			if (hi2c->Mode == HAL_I2C_MODE_MASTER) {
 8005d5e:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8005d62:	2a10      	cmp	r2, #16
				SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d64:	bf02      	ittt	eq
 8005d66:	681a      	ldreq	r2, [r3, #0]
 8005d68:	f442 7200 	orreq.w	r2, r2, #512	; 0x200
 8005d6c:	601a      	streq	r2, [r3, #0]
			__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d6e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d72:	615a      	str	r2, [r3, #20]
 8005d74:	e7c1      	b.n	8005cfa <HAL_I2C_ER_IRQHandler+0xae>
 8005d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d78:	00010100 	.word	0x00010100
 8005d7c:	ffff0000 	.word	0xffff0000

08005d80 <I2C_DMAAbort>:
	I2C_HandleTypeDef* hi2c = ( I2C_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005d80:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8005d82:	b508      	push	{r3, lr}
	hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005d84:	6803      	ldr	r3, [r0, #0]
	hi2c->hdmatx->XferAbortCallback = NULL;
 8005d86:	6b41      	ldr	r1, [r0, #52]	; 0x34
	hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d8e:	601a      	str	r2, [r3, #0]
	hi2c->XferCount = 0U;
 8005d90:	2200      	movs	r2, #0
 8005d92:	8542      	strh	r2, [r0, #42]	; 0x2a
	hi2c->hdmatx->XferAbortCallback = NULL;
 8005d94:	650a      	str	r2, [r1, #80]	; 0x50
	hi2c->hdmarx->XferAbortCallback = NULL;
 8005d96:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8005d98:	650a      	str	r2, [r1, #80]	; 0x50
	if (hi2c->State == HAL_I2C_STATE_ABORT) {
 8005d9a:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8005d9e:	2960      	cmp	r1, #96	; 0x60
 8005da0:	f04f 0120 	mov.w	r1, #32
		hi2c->State = HAL_I2C_STATE_READY;
 8005da4:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_NONE;
 8005da8:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
	if (hi2c->State == HAL_I2C_STATE_ABORT) {
 8005dac:	d107      	bne.n	8005dbe <I2C_DMAAbort+0x3e>
		hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dae:	6402      	str	r2, [r0, #64]	; 0x40
		__HAL_I2C_DISABLE(hi2c);
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	f022 0201 	bic.w	r2, r2, #1
 8005db6:	601a      	str	r2, [r3, #0]
		HAL_I2C_AbortCpltCallback(hi2c);
 8005db8:	f7ff fb49 	bl	800544e <HAL_I2C_AbortCpltCallback>
 8005dbc:	bd08      	pop	{r3, pc}
		__HAL_I2C_DISABLE(hi2c);
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	f022 0201 	bic.w	r2, r2, #1
 8005dc4:	601a      	str	r2, [r3, #0]
		HAL_I2C_ErrorCallback(hi2c);
 8005dc6:	f7ff fb41 	bl	800544c <HAL_I2C_ErrorCallback>
 8005dca:	bd08      	pop	{r3, pc}

08005dcc <HAL_RCC_OscConfig>:
 *         supported by this API. User should request a transition to HSE Off
 *         first and then HSE On or HSE Bypass.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005dcc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t tickstart;

	/* Check Null pointer */
	if (RCC_OscInitStruct == NULL) {
 8005dd0:	4604      	mov	r4, r0
 8005dd2:	b918      	cbnz	r0, 8005ddc <HAL_RCC_OscConfig+0x10>
		return HAL_ERROR;
 8005dd4:	2001      	movs	r0, #1
		}else  {
			return HAL_ERROR;
		}
	}
	return HAL_OK;
}
 8005dd6:	b002      	add	sp, #8
 8005dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE) {
 8005ddc:	6803      	ldr	r3, [r0, #0]
 8005dde:	07dd      	lsls	r5, r3, #31
 8005de0:	d410      	bmi.n	8005e04 <HAL_RCC_OscConfig+0x38>
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI) {
 8005de2:	6823      	ldr	r3, [r4, #0]
 8005de4:	0798      	lsls	r0, r3, #30
 8005de6:	d458      	bmi.n	8005e9a <HAL_RCC_OscConfig+0xce>
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI) {
 8005de8:	6823      	ldr	r3, [r4, #0]
 8005dea:	071a      	lsls	r2, r3, #28
 8005dec:	f100 809a 	bmi.w	8005f24 <HAL_RCC_OscConfig+0x158>
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE) {
 8005df0:	6823      	ldr	r3, [r4, #0]
 8005df2:	075b      	lsls	r3, r3, #29
 8005df4:	f100 80b8 	bmi.w	8005f68 <HAL_RCC_OscConfig+0x19c>
	if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE) {
 8005df8:	69a2      	ldr	r2, [r4, #24]
 8005dfa:	2a00      	cmp	r2, #0
 8005dfc:	f040 8119 	bne.w	8006032 <HAL_RCC_OscConfig+0x266>
	return HAL_OK;
 8005e00:	2000      	movs	r0, #0
 8005e02:	e7e8      	b.n	8005dd6 <HAL_RCC_OscConfig+0xa>
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005e04:	4ba6      	ldr	r3, [pc, #664]	; (80060a0 <HAL_RCC_OscConfig+0x2d4>)
 8005e06:	689a      	ldr	r2, [r3, #8]
 8005e08:	f002 020c 	and.w	r2, r2, #12
 8005e0c:	2a04      	cmp	r2, #4
 8005e0e:	d007      	beq.n	8005e20 <HAL_RCC_OscConfig+0x54>
		    ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE))) {
 8005e10:	689a      	ldr	r2, [r3, #8]
 8005e12:	f002 020c 	and.w	r2, r2, #12
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005e16:	2a08      	cmp	r2, #8
 8005e18:	d10a      	bne.n	8005e30 <HAL_RCC_OscConfig+0x64>
		    ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE))) {
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	0259      	lsls	r1, r3, #9
 8005e1e:	d507      	bpl.n	8005e30 <HAL_RCC_OscConfig+0x64>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 8005e20:	4b9f      	ldr	r3, [pc, #636]	; (80060a0 <HAL_RCC_OscConfig+0x2d4>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	039a      	lsls	r2, r3, #14
 8005e26:	d5dc      	bpl.n	8005de2 <HAL_RCC_OscConfig+0x16>
 8005e28:	6863      	ldr	r3, [r4, #4]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1d9      	bne.n	8005de2 <HAL_RCC_OscConfig+0x16>
 8005e2e:	e7d1      	b.n	8005dd4 <HAL_RCC_OscConfig+0x8>
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e30:	6863      	ldr	r3, [r4, #4]
 8005e32:	4d9b      	ldr	r5, [pc, #620]	; (80060a0 <HAL_RCC_OscConfig+0x2d4>)
 8005e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e38:	d111      	bne.n	8005e5e <HAL_RCC_OscConfig+0x92>
 8005e3a:	682b      	ldr	r3, [r5, #0]
 8005e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e40:	602b      	str	r3, [r5, #0]
				tickstart = HAL_GetTick();
 8005e42:	f7fe fa61 	bl	8004308 <HAL_GetTick>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8005e46:	4d96      	ldr	r5, [pc, #600]	; (80060a0 <HAL_RCC_OscConfig+0x2d4>)
				tickstart = HAL_GetTick();
 8005e48:	4606      	mov	r6, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8005e4a:	682b      	ldr	r3, [r5, #0]
 8005e4c:	039b      	lsls	r3, r3, #14
 8005e4e:	d4c8      	bmi.n	8005de2 <HAL_RCC_OscConfig+0x16>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8005e50:	f7fe fa5a 	bl	8004308 <HAL_GetTick>
 8005e54:	1b80      	subs	r0, r0, r6
 8005e56:	2864      	cmp	r0, #100	; 0x64
 8005e58:	d9f7      	bls.n	8005e4a <HAL_RCC_OscConfig+0x7e>
						return HAL_TIMEOUT;
 8005e5a:	2003      	movs	r0, #3
 8005e5c:	e7bb      	b.n	8005dd6 <HAL_RCC_OscConfig+0xa>
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e62:	d104      	bne.n	8005e6e <HAL_RCC_OscConfig+0xa2>
 8005e64:	682b      	ldr	r3, [r5, #0]
 8005e66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e6a:	602b      	str	r3, [r5, #0]
 8005e6c:	e7e5      	b.n	8005e3a <HAL_RCC_OscConfig+0x6e>
 8005e6e:	682a      	ldr	r2, [r5, #0]
 8005e70:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005e74:	602a      	str	r2, [r5, #0]
 8005e76:	682a      	ldr	r2, [r5, #0]
 8005e78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005e7c:	602a      	str	r2, [r5, #0]
			if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF) {
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1df      	bne.n	8005e42 <HAL_RCC_OscConfig+0x76>
				tickstart = HAL_GetTick();
 8005e82:	f7fe fa41 	bl	8004308 <HAL_GetTick>
 8005e86:	4606      	mov	r6, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 8005e88:	682b      	ldr	r3, [r5, #0]
 8005e8a:	039f      	lsls	r7, r3, #14
 8005e8c:	d5a9      	bpl.n	8005de2 <HAL_RCC_OscConfig+0x16>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8005e8e:	f7fe fa3b 	bl	8004308 <HAL_GetTick>
 8005e92:	1b80      	subs	r0, r0, r6
 8005e94:	2864      	cmp	r0, #100	; 0x64
 8005e96:	d9f7      	bls.n	8005e88 <HAL_RCC_OscConfig+0xbc>
 8005e98:	e7df      	b.n	8005e5a <HAL_RCC_OscConfig+0x8e>
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005e9a:	4b81      	ldr	r3, [pc, #516]	; (80060a0 <HAL_RCC_OscConfig+0x2d4>)
 8005e9c:	689a      	ldr	r2, [r3, #8]
 8005e9e:	f012 0f0c 	tst.w	r2, #12
 8005ea2:	d007      	beq.n	8005eb4 <HAL_RCC_OscConfig+0xe8>
		    ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI))) {
 8005ea4:	689a      	ldr	r2, [r3, #8]
 8005ea6:	f002 020c 	and.w	r2, r2, #12
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005eaa:	2a08      	cmp	r2, #8
 8005eac:	d111      	bne.n	8005ed2 <HAL_RCC_OscConfig+0x106>
		    ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI))) {
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	025e      	lsls	r6, r3, #9
 8005eb2:	d40e      	bmi.n	8005ed2 <HAL_RCC_OscConfig+0x106>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 8005eb4:	4b7a      	ldr	r3, [pc, #488]	; (80060a0 <HAL_RCC_OscConfig+0x2d4>)
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	0795      	lsls	r5, r2, #30
 8005eba:	d502      	bpl.n	8005ec2 <HAL_RCC_OscConfig+0xf6>
 8005ebc:	68e2      	ldr	r2, [r4, #12]
 8005ebe:	2a01      	cmp	r2, #1
 8005ec0:	d188      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x8>
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	6921      	ldr	r1, [r4, #16]
 8005ec6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8005eca:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8005ece:	601a      	str	r2, [r3, #0]
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 8005ed0:	e78a      	b.n	8005de8 <HAL_RCC_OscConfig+0x1c>
			if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF) {
 8005ed2:	68e2      	ldr	r2, [r4, #12]
 8005ed4:	4b73      	ldr	r3, [pc, #460]	; (80060a4 <HAL_RCC_OscConfig+0x2d8>)
 8005ed6:	b1b2      	cbz	r2, 8005f06 <HAL_RCC_OscConfig+0x13a>
				__HAL_RCC_HSI_ENABLE();
 8005ed8:	2201      	movs	r2, #1
 8005eda:	601a      	str	r2, [r3, #0]
				tickstart = HAL_GetTick();
 8005edc:	f7fe fa14 	bl	8004308 <HAL_GetTick>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8005ee0:	4d6f      	ldr	r5, [pc, #444]	; (80060a0 <HAL_RCC_OscConfig+0x2d4>)
				tickstart = HAL_GetTick();
 8005ee2:	4606      	mov	r6, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8005ee4:	682b      	ldr	r3, [r5, #0]
 8005ee6:	0798      	lsls	r0, r3, #30
 8005ee8:	d507      	bpl.n	8005efa <HAL_RCC_OscConfig+0x12e>
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eea:	682b      	ldr	r3, [r5, #0]
 8005eec:	6922      	ldr	r2, [r4, #16]
 8005eee:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005ef2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005ef6:	602b      	str	r3, [r5, #0]
 8005ef8:	e776      	b.n	8005de8 <HAL_RCC_OscConfig+0x1c>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8005efa:	f7fe fa05 	bl	8004308 <HAL_GetTick>
 8005efe:	1b80      	subs	r0, r0, r6
 8005f00:	2802      	cmp	r0, #2
 8005f02:	d9ef      	bls.n	8005ee4 <HAL_RCC_OscConfig+0x118>
 8005f04:	e7a9      	b.n	8005e5a <HAL_RCC_OscConfig+0x8e>
				__HAL_RCC_HSI_DISABLE();
 8005f06:	601a      	str	r2, [r3, #0]
				tickstart = HAL_GetTick();
 8005f08:	f7fe f9fe 	bl	8004308 <HAL_GetTick>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 8005f0c:	4d64      	ldr	r5, [pc, #400]	; (80060a0 <HAL_RCC_OscConfig+0x2d4>)
				tickstart = HAL_GetTick();
 8005f0e:	4606      	mov	r6, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 8005f10:	682b      	ldr	r3, [r5, #0]
 8005f12:	0799      	lsls	r1, r3, #30
 8005f14:	f57f af68 	bpl.w	8005de8 <HAL_RCC_OscConfig+0x1c>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8005f18:	f7fe f9f6 	bl	8004308 <HAL_GetTick>
 8005f1c:	1b80      	subs	r0, r0, r6
 8005f1e:	2802      	cmp	r0, #2
 8005f20:	d9f6      	bls.n	8005f10 <HAL_RCC_OscConfig+0x144>
 8005f22:	e79a      	b.n	8005e5a <HAL_RCC_OscConfig+0x8e>
		if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF) {
 8005f24:	6962      	ldr	r2, [r4, #20]
 8005f26:	4b60      	ldr	r3, [pc, #384]	; (80060a8 <HAL_RCC_OscConfig+0x2dc>)
 8005f28:	b17a      	cbz	r2, 8005f4a <HAL_RCC_OscConfig+0x17e>
			__HAL_RCC_LSI_ENABLE();
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	601a      	str	r2, [r3, #0]
			tickstart = HAL_GetTick();
 8005f2e:	f7fe f9eb 	bl	8004308 <HAL_GetTick>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 8005f32:	4d5b      	ldr	r5, [pc, #364]	; (80060a0 <HAL_RCC_OscConfig+0x2d4>)
			tickstart = HAL_GetTick();
 8005f34:	4606      	mov	r6, r0
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 8005f36:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005f38:	079f      	lsls	r7, r3, #30
 8005f3a:	f53f af59 	bmi.w	8005df0 <HAL_RCC_OscConfig+0x24>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8005f3e:	f7fe f9e3 	bl	8004308 <HAL_GetTick>
 8005f42:	1b80      	subs	r0, r0, r6
 8005f44:	2802      	cmp	r0, #2
 8005f46:	d9f6      	bls.n	8005f36 <HAL_RCC_OscConfig+0x16a>
 8005f48:	e787      	b.n	8005e5a <HAL_RCC_OscConfig+0x8e>
			__HAL_RCC_LSI_DISABLE();
 8005f4a:	601a      	str	r2, [r3, #0]
			tickstart = HAL_GetTick();
 8005f4c:	f7fe f9dc 	bl	8004308 <HAL_GetTick>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 8005f50:	4d53      	ldr	r5, [pc, #332]	; (80060a0 <HAL_RCC_OscConfig+0x2d4>)
			tickstart = HAL_GetTick();
 8005f52:	4606      	mov	r6, r0
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 8005f54:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005f56:	0798      	lsls	r0, r3, #30
 8005f58:	f57f af4a 	bpl.w	8005df0 <HAL_RCC_OscConfig+0x24>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8005f5c:	f7fe f9d4 	bl	8004308 <HAL_GetTick>
 8005f60:	1b80      	subs	r0, r0, r6
 8005f62:	2802      	cmp	r0, #2
 8005f64:	d9f6      	bls.n	8005f54 <HAL_RCC_OscConfig+0x188>
 8005f66:	e778      	b.n	8005e5a <HAL_RCC_OscConfig+0x8e>
		if (__HAL_RCC_PWR_IS_CLK_DISABLED()) {
 8005f68:	4b4d      	ldr	r3, [pc, #308]	; (80060a0 <HAL_RCC_OscConfig+0x2d4>)
 8005f6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f6c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8005f70:	d128      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x1f8>
			__HAL_RCC_PWR_CLK_ENABLE();
 8005f72:	9201      	str	r2, [sp, #4]
 8005f74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f76:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005f7a:	641a      	str	r2, [r3, #64]	; 0x40
 8005f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f82:	9301      	str	r3, [sp, #4]
 8005f84:	9b01      	ldr	r3, [sp, #4]
			pwrclkchanged = SET;
 8005f86:	2601      	movs	r6, #1
		if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8005f88:	4d48      	ldr	r5, [pc, #288]	; (80060ac <HAL_RCC_OscConfig+0x2e0>)
 8005f8a:	682b      	ldr	r3, [r5, #0]
 8005f8c:	05d9      	lsls	r1, r3, #23
 8005f8e:	d51b      	bpl.n	8005fc8 <HAL_RCC_OscConfig+0x1fc>
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f90:	68a3      	ldr	r3, [r4, #8]
 8005f92:	4d43      	ldr	r5, [pc, #268]	; (80060a0 <HAL_RCC_OscConfig+0x2d4>)
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d127      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x21c>
 8005f98:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005f9a:	f043 0301 	orr.w	r3, r3, #1
 8005f9e:	672b      	str	r3, [r5, #112]	; 0x70
			tickstart = HAL_GetTick();
 8005fa0:	f7fe f9b2 	bl	8004308 <HAL_GetTick>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8005fa4:	4d3e      	ldr	r5, [pc, #248]	; (80060a0 <HAL_RCC_OscConfig+0x2d4>)
			tickstart = HAL_GetTick();
 8005fa6:	4607      	mov	r7, r0
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8005fa8:	f241 3888 	movw	r8, #5000	; 0x1388
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8005fac:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005fae:	079b      	lsls	r3, r3, #30
 8005fb0:	d539      	bpl.n	8006026 <HAL_RCC_OscConfig+0x25a>
		if (pwrclkchanged == SET) {
 8005fb2:	2e00      	cmp	r6, #0
 8005fb4:	f43f af20 	beq.w	8005df8 <HAL_RCC_OscConfig+0x2c>
			__HAL_RCC_PWR_CLK_DISABLE();
 8005fb8:	4a39      	ldr	r2, [pc, #228]	; (80060a0 <HAL_RCC_OscConfig+0x2d4>)
 8005fba:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005fbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8005fc2:	e719      	b.n	8005df8 <HAL_RCC_OscConfig+0x2c>
		FlagStatus pwrclkchanged = RESET;
 8005fc4:	2600      	movs	r6, #0
 8005fc6:	e7df      	b.n	8005f88 <HAL_RCC_OscConfig+0x1bc>
			SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fc8:	682b      	ldr	r3, [r5, #0]
 8005fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fce:	602b      	str	r3, [r5, #0]
			tickstart = HAL_GetTick();
 8005fd0:	f7fe f99a 	bl	8004308 <HAL_GetTick>
 8005fd4:	4607      	mov	r7, r0
			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8005fd6:	682b      	ldr	r3, [r5, #0]
 8005fd8:	05da      	lsls	r2, r3, #23
 8005fda:	d4d9      	bmi.n	8005f90 <HAL_RCC_OscConfig+0x1c4>
				if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 8005fdc:	f7fe f994 	bl	8004308 <HAL_GetTick>
 8005fe0:	1bc0      	subs	r0, r0, r7
 8005fe2:	2802      	cmp	r0, #2
 8005fe4:	d9f7      	bls.n	8005fd6 <HAL_RCC_OscConfig+0x20a>
 8005fe6:	e738      	b.n	8005e5a <HAL_RCC_OscConfig+0x8e>
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fe8:	2b05      	cmp	r3, #5
 8005fea:	d104      	bne.n	8005ff6 <HAL_RCC_OscConfig+0x22a>
 8005fec:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005fee:	f043 0304 	orr.w	r3, r3, #4
 8005ff2:	672b      	str	r3, [r5, #112]	; 0x70
 8005ff4:	e7d0      	b.n	8005f98 <HAL_RCC_OscConfig+0x1cc>
 8005ff6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8005ff8:	f022 0201 	bic.w	r2, r2, #1
 8005ffc:	672a      	str	r2, [r5, #112]	; 0x70
 8005ffe:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8006000:	f022 0204 	bic.w	r2, r2, #4
 8006004:	672a      	str	r2, [r5, #112]	; 0x70
		if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF) {
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1ca      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x1d4>
			tickstart = HAL_GetTick();
 800600a:	f7fe f97d 	bl	8004308 <HAL_GetTick>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 800600e:	f241 3888 	movw	r8, #5000	; 0x1388
			tickstart = HAL_GetTick();
 8006012:	4607      	mov	r7, r0
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 8006014:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006016:	0798      	lsls	r0, r3, #30
 8006018:	d5cb      	bpl.n	8005fb2 <HAL_RCC_OscConfig+0x1e6>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 800601a:	f7fe f975 	bl	8004308 <HAL_GetTick>
 800601e:	1bc0      	subs	r0, r0, r7
 8006020:	4540      	cmp	r0, r8
 8006022:	d9f7      	bls.n	8006014 <HAL_RCC_OscConfig+0x248>
 8006024:	e719      	b.n	8005e5a <HAL_RCC_OscConfig+0x8e>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8006026:	f7fe f96f 	bl	8004308 <HAL_GetTick>
 800602a:	1bc0      	subs	r0, r0, r7
 800602c:	4540      	cmp	r0, r8
 800602e:	d9bd      	bls.n	8005fac <HAL_RCC_OscConfig+0x1e0>
 8006030:	e713      	b.n	8005e5a <HAL_RCC_OscConfig+0x8e>
		if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL) {
 8006032:	4d1b      	ldr	r5, [pc, #108]	; (80060a0 <HAL_RCC_OscConfig+0x2d4>)
 8006034:	68ab      	ldr	r3, [r5, #8]
 8006036:	f003 030c 	and.w	r3, r3, #12
 800603a:	2b08      	cmp	r3, #8
 800603c:	f43f aeca 	beq.w	8005dd4 <HAL_RCC_OscConfig+0x8>
 8006040:	4e1b      	ldr	r6, [pc, #108]	; (80060b0 <HAL_RCC_OscConfig+0x2e4>)
 8006042:	2300      	movs	r3, #0
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 8006044:	2a02      	cmp	r2, #2
				__HAL_RCC_PLL_DISABLE();
 8006046:	6033      	str	r3, [r6, #0]
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 8006048:	d134      	bne.n	80060b4 <HAL_RCC_OscConfig+0x2e8>
				tickstart = HAL_GetTick();
 800604a:	f7fe f95d 	bl	8004308 <HAL_GetTick>
 800604e:	4607      	mov	r7, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8006050:	682b      	ldr	r3, [r5, #0]
 8006052:	0199      	lsls	r1, r3, #6
 8006054:	d41e      	bmi.n	8006094 <HAL_RCC_OscConfig+0x2c8>
				WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource | \
 8006056:	6a22      	ldr	r2, [r4, #32]
 8006058:	69e3      	ldr	r3, [r4, #28]
 800605a:	4313      	orrs	r3, r2
 800605c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800605e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8006062:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006064:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006068:	6aa2      	ldr	r2, [r4, #40]	; 0x28
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 800606a:	4c0d      	ldr	r4, [pc, #52]	; (80060a0 <HAL_RCC_OscConfig+0x2d4>)
				WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource | \
 800606c:	0852      	lsrs	r2, r2, #1
 800606e:	3a01      	subs	r2, #1
 8006070:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006074:	606b      	str	r3, [r5, #4]
				__HAL_RCC_PLL_ENABLE();
 8006076:	2301      	movs	r3, #1
 8006078:	6033      	str	r3, [r6, #0]
				tickstart = HAL_GetTick();
 800607a:	f7fe f945 	bl	8004308 <HAL_GetTick>
 800607e:	4605      	mov	r5, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8006080:	6823      	ldr	r3, [r4, #0]
 8006082:	019a      	lsls	r2, r3, #6
 8006084:	f53f aebc 	bmi.w	8005e00 <HAL_RCC_OscConfig+0x34>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8006088:	f7fe f93e 	bl	8004308 <HAL_GetTick>
 800608c:	1b40      	subs	r0, r0, r5
 800608e:	2802      	cmp	r0, #2
 8006090:	d9f6      	bls.n	8006080 <HAL_RCC_OscConfig+0x2b4>
 8006092:	e6e2      	b.n	8005e5a <HAL_RCC_OscConfig+0x8e>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8006094:	f7fe f938 	bl	8004308 <HAL_GetTick>
 8006098:	1bc0      	subs	r0, r0, r7
 800609a:	2802      	cmp	r0, #2
 800609c:	d9d8      	bls.n	8006050 <HAL_RCC_OscConfig+0x284>
 800609e:	e6dc      	b.n	8005e5a <HAL_RCC_OscConfig+0x8e>
 80060a0:	40023800 	.word	0x40023800
 80060a4:	42470000 	.word	0x42470000
 80060a8:	42470e80 	.word	0x42470e80
 80060ac:	40007000 	.word	0x40007000
 80060b0:	42470060 	.word	0x42470060
				tickstart = HAL_GetTick();
 80060b4:	f7fe f928 	bl	8004308 <HAL_GetTick>
 80060b8:	4604      	mov	r4, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 80060ba:	682b      	ldr	r3, [r5, #0]
 80060bc:	019b      	lsls	r3, r3, #6
 80060be:	f57f ae9f 	bpl.w	8005e00 <HAL_RCC_OscConfig+0x34>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 80060c2:	f7fe f921 	bl	8004308 <HAL_GetTick>
 80060c6:	1b00      	subs	r0, r0, r4
 80060c8:	2802      	cmp	r0, #2
 80060ca:	d9f6      	bls.n	80060ba <HAL_RCC_OscConfig+0x2ee>
 80060cc:	e6c5      	b.n	8005e5a <HAL_RCC_OscConfig+0x8e>
 80060ce:	bf00      	nop

080060d0 <HAL_RCC_GetSysClockFreq>:
{
	uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
	uint32_t sysclockfreq = 0U;

	/* Get SYSCLK source -------------------------------------------------------*/
	switch (RCC->CFGR & RCC_CFGR_SWS) {
 80060d0:	4913      	ldr	r1, [pc, #76]	; (8006120 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80060d2:	b508      	push	{r3, lr}
	switch (RCC->CFGR & RCC_CFGR_SWS) {
 80060d4:	688b      	ldr	r3, [r1, #8]
 80060d6:	f003 030c 	and.w	r3, r3, #12
 80060da:	2b04      	cmp	r3, #4
 80060dc:	d003      	beq.n	80060e6 <HAL_RCC_GetSysClockFreq+0x16>
 80060de:	2b08      	cmp	r3, #8
 80060e0:	d003      	beq.n	80060ea <HAL_RCC_GetSysClockFreq+0x1a>
	case RCC_CFGR_SWS_HSI: /* HSI used as system clock source */
	{
		sysclockfreq = HSI_VALUE;
 80060e2:	4810      	ldr	r0, [pc, #64]	; (8006124 <HAL_RCC_GetSysClockFreq+0x54>)
		sysclockfreq = HSI_VALUE;
		break;
	}
	}
	return sysclockfreq;
}
 80060e4:	bd08      	pop	{r3, pc}
		sysclockfreq = HSE_VALUE;
 80060e6:	4810      	ldr	r0, [pc, #64]	; (8006128 <HAL_RCC_GetSysClockFreq+0x58>)
 80060e8:	bd08      	pop	{r3, pc}
		pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80060ea:	684a      	ldr	r2, [r1, #4]
		if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI) {
 80060ec:	684b      	ldr	r3, [r1, #4]
			pllvco = (uint32_t)((((uint64_t)HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060ee:	6849      	ldr	r1, [r1, #4]
		if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI) {
 80060f0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
			pllvco = (uint32_t)((((uint64_t)HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060f4:	bf14      	ite	ne
 80060f6:	480c      	ldrne	r0, [pc, #48]	; (8006128 <HAL_RCC_GetSysClockFreq+0x58>)
			pllvco = (uint32_t)((((uint64_t)HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060f8:	480a      	ldreq	r0, [pc, #40]	; (8006124 <HAL_RCC_GetSysClockFreq+0x54>)
			pllvco = (uint32_t)((((uint64_t)HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060fa:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80060fe:	bf18      	it	ne
 8006100:	2300      	movne	r3, #0
		pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006102:	f002 023f 	and.w	r2, r2, #63	; 0x3f
			pllvco = (uint32_t)((((uint64_t)HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006106:	fba1 0100 	umull	r0, r1, r1, r0
 800610a:	f7fa fc83 	bl	8000a14 <__aeabi_uldivmod>
		pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800610e:	4b04      	ldr	r3, [pc, #16]	; (8006120 <HAL_RCC_GetSysClockFreq+0x50>)
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8006116:	3301      	adds	r3, #1
 8006118:	005b      	lsls	r3, r3, #1
		sysclockfreq = pllvco / pllp;
 800611a:	fbb0 f0f3 	udiv	r0, r0, r3
 800611e:	bd08      	pop	{r3, pc}
 8006120:	40023800 	.word	0x40023800
 8006124:	00f42400 	.word	0x00f42400
 8006128:	007a1200 	.word	0x007a1200

0800612c <HAL_RCC_ClockConfig>:
{
 800612c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006130:	460d      	mov	r5, r1
	if (RCC_ClkInitStruct == NULL) {
 8006132:	4604      	mov	r4, r0
 8006134:	b910      	cbnz	r0, 800613c <HAL_RCC_ClockConfig+0x10>
		return HAL_ERROR;
 8006136:	2001      	movs	r0, #1
 8006138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 800613c:	4b44      	ldr	r3, [pc, #272]	; (8006250 <HAL_RCC_ClockConfig+0x124>)
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	f002 020f 	and.w	r2, r2, #15
 8006144:	428a      	cmp	r2, r1
 8006146:	d328      	bcc.n	800619a <HAL_RCC_ClockConfig+0x6e>
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) {
 8006148:	6821      	ldr	r1, [r4, #0]
 800614a:	078f      	lsls	r7, r1, #30
 800614c:	d42d      	bmi.n	80061aa <HAL_RCC_ClockConfig+0x7e>
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK) {
 800614e:	07c8      	lsls	r0, r1, #31
 8006150:	d440      	bmi.n	80061d4 <HAL_RCC_ClockConfig+0xa8>
	if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 8006152:	4b3f      	ldr	r3, [pc, #252]	; (8006250 <HAL_RCC_ClockConfig+0x124>)
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	f002 020f 	and.w	r2, r2, #15
 800615a:	4295      	cmp	r5, r2
 800615c:	d366      	bcc.n	800622c <HAL_RCC_ClockConfig+0x100>
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1) {
 800615e:	6822      	ldr	r2, [r4, #0]
 8006160:	0751      	lsls	r1, r2, #29
 8006162:	d46c      	bmi.n	800623e <HAL_RCC_ClockConfig+0x112>
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2) {
 8006164:	0713      	lsls	r3, r2, #28
 8006166:	d507      	bpl.n	8006178 <HAL_RCC_ClockConfig+0x4c>
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006168:	4a3a      	ldr	r2, [pc, #232]	; (8006254 <HAL_RCC_ClockConfig+0x128>)
 800616a:	6921      	ldr	r1, [r4, #16]
 800616c:	6893      	ldr	r3, [r2, #8]
 800616e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006172:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006176:	6093      	str	r3, [r2, #8]
	SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006178:	f7ff ffaa 	bl	80060d0 <HAL_RCC_GetSysClockFreq>
 800617c:	4b35      	ldr	r3, [pc, #212]	; (8006254 <HAL_RCC_ClockConfig+0x128>)
 800617e:	4a36      	ldr	r2, [pc, #216]	; (8006258 <HAL_RCC_ClockConfig+0x12c>)
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006186:	5cd3      	ldrb	r3, [r2, r3]
 8006188:	40d8      	lsrs	r0, r3
 800618a:	4b34      	ldr	r3, [pc, #208]	; (800625c <HAL_RCC_ClockConfig+0x130>)
 800618c:	6018      	str	r0, [r3, #0]
	HAL_InitTick(TICK_INT_PRIORITY);
 800618e:	2000      	movs	r0, #0
 8006190:	f7fe f870 	bl	8004274 <HAL_InitTick>
	return HAL_OK;
 8006194:	2000      	movs	r0, #0
 8006196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		__HAL_FLASH_SET_LATENCY(FLatency);
 800619a:	b2ca      	uxtb	r2, r1
 800619c:	701a      	strb	r2, [r3, #0]
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 030f 	and.w	r3, r3, #15
 80061a4:	4299      	cmp	r1, r3
 80061a6:	d1c6      	bne.n	8006136 <HAL_RCC_ClockConfig+0xa>
 80061a8:	e7ce      	b.n	8006148 <HAL_RCC_ClockConfig+0x1c>
 80061aa:	4b2a      	ldr	r3, [pc, #168]	; (8006254 <HAL_RCC_ClockConfig+0x128>)
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1) {
 80061ac:	f011 0f04 	tst.w	r1, #4
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061b0:	bf1e      	ittt	ne
 80061b2:	689a      	ldrne	r2, [r3, #8]
 80061b4:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80061b8:	609a      	strne	r2, [r3, #8]
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2) {
 80061ba:	070e      	lsls	r6, r1, #28
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061bc:	bf42      	ittt	mi
 80061be:	689a      	ldrmi	r2, [r3, #8]
 80061c0:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80061c4:	609a      	strmi	r2, [r3, #8]
		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061c6:	689a      	ldr	r2, [r3, #8]
 80061c8:	68a0      	ldr	r0, [r4, #8]
 80061ca:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80061ce:	4302      	orrs	r2, r0
 80061d0:	609a      	str	r2, [r3, #8]
 80061d2:	e7bc      	b.n	800614e <HAL_RCC_ClockConfig+0x22>
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 80061d4:	6862      	ldr	r2, [r4, #4]
 80061d6:	4b1f      	ldr	r3, [pc, #124]	; (8006254 <HAL_RCC_ClockConfig+0x128>)
 80061d8:	2a01      	cmp	r2, #1
 80061da:	d11d      	bne.n	8006218 <HAL_RCC_ClockConfig+0xec>
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f413 3f00 	tst.w	r3, #131072	; 0x20000
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 80061e2:	d0a8      	beq.n	8006136 <HAL_RCC_ClockConfig+0xa>
		__HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80061e4:	4e1b      	ldr	r6, [pc, #108]	; (8006254 <HAL_RCC_ClockConfig+0x128>)
 80061e6:	68b3      	ldr	r3, [r6, #8]
 80061e8:	f023 0303 	bic.w	r3, r3, #3
 80061ec:	4313      	orrs	r3, r2
 80061ee:	60b3      	str	r3, [r6, #8]
		tickstart = HAL_GetTick();
 80061f0:	f7fe f88a 	bl	8004308 <HAL_GetTick>
			if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 80061f4:	f241 3888 	movw	r8, #5000	; 0x1388
		tickstart = HAL_GetTick();
 80061f8:	4607      	mov	r7, r0
		while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 80061fa:	68b3      	ldr	r3, [r6, #8]
 80061fc:	6862      	ldr	r2, [r4, #4]
 80061fe:	f003 030c 	and.w	r3, r3, #12
 8006202:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006206:	d0a4      	beq.n	8006152 <HAL_RCC_ClockConfig+0x26>
			if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8006208:	f7fe f87e 	bl	8004308 <HAL_GetTick>
 800620c:	1bc0      	subs	r0, r0, r7
 800620e:	4540      	cmp	r0, r8
 8006210:	d9f3      	bls.n	80061fa <HAL_RCC_ClockConfig+0xce>
				return HAL_TIMEOUT;
 8006212:	2003      	movs	r0, #3
}
 8006214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) ||
 8006218:	1e91      	subs	r1, r2, #2
 800621a:	2901      	cmp	r1, #1
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 800621c:	681b      	ldr	r3, [r3, #0]
		else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) ||
 800621e:	d802      	bhi.n	8006226 <HAL_RCC_ClockConfig+0xfa>
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8006220:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006224:	e7dd      	b.n	80061e2 <HAL_RCC_ClockConfig+0xb6>
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8006226:	f013 0f02 	tst.w	r3, #2
 800622a:	e7da      	b.n	80061e2 <HAL_RCC_ClockConfig+0xb6>
		__HAL_FLASH_SET_LATENCY(FLatency);
 800622c:	b2ea      	uxtb	r2, r5
 800622e:	701a      	strb	r2, [r3, #0]
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 030f 	and.w	r3, r3, #15
 8006236:	429d      	cmp	r5, r3
 8006238:	f47f af7d 	bne.w	8006136 <HAL_RCC_ClockConfig+0xa>
 800623c:	e78f      	b.n	800615e <HAL_RCC_ClockConfig+0x32>
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800623e:	4905      	ldr	r1, [pc, #20]	; (8006254 <HAL_RCC_ClockConfig+0x128>)
 8006240:	68e0      	ldr	r0, [r4, #12]
 8006242:	688b      	ldr	r3, [r1, #8]
 8006244:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8006248:	4303      	orrs	r3, r0
 800624a:	608b      	str	r3, [r1, #8]
 800624c:	e78a      	b.n	8006164 <HAL_RCC_ClockConfig+0x38>
 800624e:	bf00      	nop
 8006250:	40023c00 	.word	0x40023c00
 8006254:	40023800 	.word	0x40023800
 8006258:	080093e1 	.word	0x080093e1
 800625c:	2000019c 	.word	0x2000019c

08006260 <HAL_RCC_GetPCLK1Freq>:
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return(HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006260:	4b04      	ldr	r3, [pc, #16]	; (8006274 <HAL_RCC_GetPCLK1Freq+0x14>)
 8006262:	4a05      	ldr	r2, [pc, #20]	; (8006278 <HAL_RCC_GetPCLK1Freq+0x18>)
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800626a:	5cd3      	ldrb	r3, [r2, r3]
 800626c:	4a03      	ldr	r2, [pc, #12]	; (800627c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800626e:	6810      	ldr	r0, [r2, #0]
}
 8006270:	40d8      	lsrs	r0, r3
 8006272:	4770      	bx	lr
 8006274:	40023800 	.word	0x40023800
 8006278:	080093f1 	.word	0x080093f1
 800627c:	2000019c 	.word	0x2000019c

08006280 <HAL_RCC_GetPCLK2Freq>:
 * @retval PCLK2 frequency
 */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return(HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006280:	4b04      	ldr	r3, [pc, #16]	; (8006294 <HAL_RCC_GetPCLK2Freq+0x14>)
 8006282:	4a05      	ldr	r2, [pc, #20]	; (8006298 <HAL_RCC_GetPCLK2Freq+0x18>)
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800628a:	5cd3      	ldrb	r3, [r2, r3]
 800628c:	4a03      	ldr	r2, [pc, #12]	; (800629c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800628e:	6810      	ldr	r0, [r2, #0]
}
 8006290:	40d8      	lsrs	r0, r3
 8006292:	4770      	bx	lr
 8006294:	40023800 	.word	0x40023800
 8006298:	080093f1 	.word	0x080093f1
 800629c:	2000019c 	.word	0x2000019c

080062a0 <TIM_OC1_SetConfig>:
	uint32_t tmpccmrx = 0U;
	uint32_t tmpccer = 0U;
	uint32_t tmpcr2 = 0U;

	/* Disable the Channel 1: Reset the CC1E Bit */
	TIMx->CCER &= ~TIM_CCER_CC1E;
 80062a0:	6a03      	ldr	r3, [r0, #32]
 80062a2:	f023 0301 	bic.w	r3, r3, #1
 80062a6:	6203      	str	r3, [r0, #32]

	/* Get the TIMx CCER register value */
	tmpccer = TIMx->CCER;
 80062a8:	6a03      	ldr	r3, [r0, #32]
{
 80062aa:	b570      	push	{r4, r5, r6, lr}
	/* Get the TIMx CR2 register value */
	tmpcr2 = TIMx->CR2;
 80062ac:	6844      	ldr	r4, [r0, #4]

	/* Get the TIMx CCMR1 register value */
	tmpccmrx = TIMx->CCMR1;
 80062ae:	6982      	ldr	r2, [r0, #24]

	/* Reset the Output Compare Mode Bits */
	tmpccmrx &= ~TIM_CCMR1_OC1M;
	tmpccmrx &= ~TIM_CCMR1_CC1S;
	/* Select the Output Compare Mode */
	tmpccmrx |= OC_Config->OCMode;
 80062b0:	680d      	ldr	r5, [r1, #0]
	tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062b2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
	tmpccmrx |= OC_Config->OCMode;
 80062b6:	432a      	orrs	r2, r5

	/* Reset the Output Polarity level */
	tmpccer &= ~TIM_CCER_CC1P;
	/* Set the Output Compare Polarity */
	tmpccer |= OC_Config->OCPolarity;
 80062b8:	688d      	ldr	r5, [r1, #8]
	tmpccer &= ~TIM_CCER_CC1P;
 80062ba:	f023 0302 	bic.w	r3, r3, #2
	tmpccer |= OC_Config->OCPolarity;
 80062be:	432b      	orrs	r3, r5


	if (IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET) {
 80062c0:	4d0a      	ldr	r5, [pc, #40]	; (80062ec <TIM_OC1_SetConfig+0x4c>)
 80062c2:	42a8      	cmp	r0, r5
 80062c4:	d10b      	bne.n	80062de <TIM_OC1_SetConfig+0x3e>
		/* Reset the Output N Polarity level */
		tmpccer &= ~TIM_CCER_CC1NP;
		/* Set the Output N Polarity */
		tmpccer |= OC_Config->OCNPolarity;
 80062c6:	68cd      	ldr	r5, [r1, #12]
		tmpcr2 &= ~TIM_CR2_OIS1;
		tmpcr2 &= ~TIM_CR2_OIS1N;
		/* Set the Output Idle state */
		tmpcr2 |= OC_Config->OCIdleState;
		/* Set the Output N Idle state */
		tmpcr2 |= OC_Config->OCNIdleState;
 80062c8:	698e      	ldr	r6, [r1, #24]
		tmpccer &= ~TIM_CCER_CC1NP;
 80062ca:	f023 0308 	bic.w	r3, r3, #8
		tmpccer |= OC_Config->OCNPolarity;
 80062ce:	432b      	orrs	r3, r5
		tmpcr2 |= OC_Config->OCNIdleState;
 80062d0:	694d      	ldr	r5, [r1, #20]
		tmpcr2 &= ~TIM_CR2_OIS1N;
 80062d2:	f424 7440 	bic.w	r4, r4, #768	; 0x300
		tmpcr2 |= OC_Config->OCNIdleState;
 80062d6:	4335      	orrs	r5, r6
		tmpccer &= ~TIM_CCER_CC1NE;
 80062d8:	f023 0304 	bic.w	r3, r3, #4
		tmpcr2 |= OC_Config->OCNIdleState;
 80062dc:	432c      	orrs	r4, r5
	}
	/* Write to TIMx CR2 */
	TIMx->CR2 = tmpcr2;
 80062de:	6044      	str	r4, [r0, #4]

	/* Write to TIMx CCMR1 */
	TIMx->CCMR1 = tmpccmrx;
 80062e0:	6182      	str	r2, [r0, #24]

	/* Set the Capture Compare Register value */
	TIMx->CCR1 = OC_Config->Pulse;
 80062e2:	684a      	ldr	r2, [r1, #4]
 80062e4:	6342      	str	r2, [r0, #52]	; 0x34

	/* Write to TIMx CCER */
	TIMx->CCER = tmpccer;
 80062e6:	6203      	str	r3, [r0, #32]
 80062e8:	bd70      	pop	{r4, r5, r6, pc}
 80062ea:	bf00      	nop
 80062ec:	40010000 	.word	0x40010000

080062f0 <TIM_OC3_SetConfig>:
	uint32_t tmpccmrx = 0U;
	uint32_t tmpccer = 0U;
	uint32_t tmpcr2 = 0U;

	/* Disable the Channel 3: Reset the CC2E Bit */
	TIMx->CCER &= ~TIM_CCER_CC3E;
 80062f0:	6a03      	ldr	r3, [r0, #32]
 80062f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062f6:	6203      	str	r3, [r0, #32]

	/* Get the TIMx CCER register value */
	tmpccer = TIMx->CCER;
 80062f8:	6a03      	ldr	r3, [r0, #32]
{
 80062fa:	b570      	push	{r4, r5, r6, lr}
	/* Get the TIMx CR2 register value */
	tmpcr2 = TIMx->CR2;
 80062fc:	6844      	ldr	r4, [r0, #4]

	/* Get the TIMx CCMR2 register value */
	tmpccmrx = TIMx->CCMR2;
 80062fe:	69c2      	ldr	r2, [r0, #28]

	/* Reset the Output Compare mode and Capture/Compare selection Bits */
	tmpccmrx &= ~TIM_CCMR2_OC3M;
	tmpccmrx &= ~TIM_CCMR2_CC3S;
	/* Select the Output Compare Mode */
	tmpccmrx |= OC_Config->OCMode;
 8006300:	680d      	ldr	r5, [r1, #0]
	tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006302:	f022 0273 	bic.w	r2, r2, #115	; 0x73
	tmpccmrx |= OC_Config->OCMode;
 8006306:	432a      	orrs	r2, r5

	/* Reset the Output Polarity level */
	tmpccer &= ~TIM_CCER_CC3P;
	/* Set the Output Compare Polarity */
	tmpccer |= (OC_Config->OCPolarity << 8U);
 8006308:	688d      	ldr	r5, [r1, #8]
	tmpccer &= ~TIM_CCER_CC3P;
 800630a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
	tmpccer |= (OC_Config->OCPolarity << 8U);
 800630e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

	if (IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET) {
 8006312:	4d0b      	ldr	r5, [pc, #44]	; (8006340 <TIM_OC3_SetConfig+0x50>)
 8006314:	42a8      	cmp	r0, r5
 8006316:	d10d      	bne.n	8006334 <TIM_OC3_SetConfig+0x44>
		assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

		/* Reset the Output N Polarity level */
		tmpccer &= ~TIM_CCER_CC3NP;
		/* Set the Output N Polarity */
		tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006318:	68cd      	ldr	r5, [r1, #12]
		tmpcr2 &= ~TIM_CR2_OIS3;
		tmpcr2 &= ~TIM_CR2_OIS3N;
		/* Set the Output Idle state */
		tmpcr2 |= (OC_Config->OCIdleState << 4U);
		/* Set the Output N Idle state */
		tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800631a:	698e      	ldr	r6, [r1, #24]
		tmpccer &= ~TIM_CCER_CC3NP;
 800631c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
		tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006320:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006324:	694d      	ldr	r5, [r1, #20]
		tmpcr2 &= ~TIM_CR2_OIS3N;
 8006326:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
		tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800632a:	4335      	orrs	r5, r6
		tmpccer &= ~TIM_CCER_CC3NE;
 800632c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
		tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006330:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
	}
	/* Write to TIMx CR2 */
	TIMx->CR2 = tmpcr2;
 8006334:	6044      	str	r4, [r0, #4]

	/* Write to TIMx CCMR2 */
	TIMx->CCMR2 = tmpccmrx;
 8006336:	61c2      	str	r2, [r0, #28]

	/* Set the Capture Compare Register value */
	TIMx->CCR3 = OC_Config->Pulse;
 8006338:	684a      	ldr	r2, [r1, #4]
 800633a:	63c2      	str	r2, [r0, #60]	; 0x3c

	/* Write to TIMx CCER */
	TIMx->CCER = tmpccer;
 800633c:	6203      	str	r3, [r0, #32]
 800633e:	bd70      	pop	{r4, r5, r6, pc}
 8006340:	40010000 	.word	0x40010000

08006344 <TIM_OC4_SetConfig>:
	uint32_t tmpccmrx = 0U;
	uint32_t tmpccer = 0U;
	uint32_t tmpcr2 = 0U;

	/* Disable the Channel 4: Reset the CC4E Bit */
	TIMx->CCER &= ~TIM_CCER_CC4E;
 8006344:	6a03      	ldr	r3, [r0, #32]
 8006346:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800634a:	6203      	str	r3, [r0, #32]

	/* Get the TIMx CCER register value */
	tmpccer = TIMx->CCER;
 800634c:	6a03      	ldr	r3, [r0, #32]
{
<<<<<<< Updated upstream
 800634e:	b530      	push	{r4, r5, lr}
	/* Get the TIMx CR2 register value */
	tmpcr2 = TIMx->CR2;
 8006350:	6844      	ldr	r4, [r0, #4]

	/* Get the TIMx CCMR2 register value */
	tmpccmrx = TIMx->CCMR2;
 8006352:	69c2      	ldr	r2, [r0, #28]
	/* Reset the Output Compare mode and Capture/Compare selection Bits */
	tmpccmrx &= ~TIM_CCMR2_OC4M;
	tmpccmrx &= ~TIM_CCMR2_CC4S;

	/* Select the Output Compare Mode */
	tmpccmrx |= (OC_Config->OCMode << 8U);
 8006354:	680d      	ldr	r5, [r1, #0]
	tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006356:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
	tmpccmrx |= (OC_Config->OCMode << 8U);
 800635a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

	/* Reset the Output Polarity level */
	tmpccer &= ~TIM_CCER_CC4P;
	/* Set the Output Compare Polarity */
	tmpccer |= (OC_Config->OCPolarity << 12U);
 800635e:	688d      	ldr	r5, [r1, #8]
	tmpccer &= ~TIM_CCER_CC4P;
 8006360:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
	tmpccer |= (OC_Config->OCPolarity << 12U);
 8006364:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

	/*if((TIMx == TIM1) || (TIMx == TIM8))*/
	if (IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET) {
 8006368:	4d06      	ldr	r5, [pc, #24]	; (8006384 <TIM_OC4_SetConfig+0x40>)
 800636a:	42a8      	cmp	r0, r5
		assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
		/* Reset the Output Compare IDLE State */
		tmpcr2 &= ~TIM_CR2_OIS4;
		/* Set the Output Idle state */
		tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800636c:	bf02      	ittt	eq
 800636e:	694d      	ldreq	r5, [r1, #20]
		tmpcr2 &= ~TIM_CR2_OIS4;
 8006370:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
		tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006374:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
	}
	/* Write to TIMx CR2 */
	TIMx->CR2 = tmpcr2;
 8006378:	6044      	str	r4, [r0, #4]

	/* Write to TIMx CCMR2 */
	TIMx->CCMR2 = tmpccmrx;
 800637a:	61c2      	str	r2, [r0, #28]

	/* Set the Capture Compare Register value */
	TIMx->CCR4 = OC_Config->Pulse;
 800637c:	684a      	ldr	r2, [r1, #4]
 800637e:	6402      	str	r2, [r0, #64]	; 0x40

	/* Write to TIMx CCER */
	TIMx->CCER = tmpccer;
 8006380:	6203      	str	r3, [r0, #32]
 8006382:	bd30      	pop	{r4, r5, pc}
 8006384:	40010000 	.word	0x40010000

08006388 <HAL_TIM_PWM_MspInit>:
 8006388:	4770      	bx	lr

0800638a <HAL_TIM_PWM_MspDeInit>:
 800638a:	4770      	bx	lr

0800638c <HAL_TIM_PWM_DeInit>:
	htim->State = HAL_TIM_STATE_BUSY;
 800638c:	2302      	movs	r3, #2
=======
 8001190:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001192:	4a0e      	ldr	r2, [pc, #56]	; (80011cc <HAL_InitTick+0x3c>)
 8001194:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <HAL_InitTick+0x40>)
{
 8001196:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001198:	7818      	ldrb	r0, [r3, #0]
 800119a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800119e:	fbb3 f3f0 	udiv	r3, r3, r0
 80011a2:	6810      	ldr	r0, [r2, #0]
 80011a4:	fbb0 f0f3 	udiv	r0, r0, r3
 80011a8:	f000 fa7c 	bl	80016a4 <HAL_SYSTICK_Config>
 80011ac:	4604      	mov	r4, r0
 80011ae:	b958      	cbnz	r0, 80011c8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b0:	2d0f      	cmp	r5, #15
 80011b2:	d809      	bhi.n	80011c8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b4:	4602      	mov	r2, r0
 80011b6:	4629      	mov	r1, r5
 80011b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011bc:	f000 fa32 	bl	8001624 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c0:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <HAL_InitTick+0x44>)
 80011c2:	4620      	mov	r0, r4
 80011c4:	601d      	str	r5, [r3, #0]
 80011c6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80011c8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80011ca:	bd38      	pop	{r3, r4, r5, pc}
 80011cc:	20000178 	.word	0x20000178
 80011d0:	20000164 	.word	0x20000164
 80011d4:	20000168 	.word	0x20000168

080011d8 <HAL_Init>:
{
 80011d8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011da:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <HAL_Init+0x30>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011e2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80011ea:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011f2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f4:	2003      	movs	r0, #3
 80011f6:	f000 fa03 	bl	8001600 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80011fa:	2000      	movs	r0, #0
 80011fc:	f7ff ffc8 	bl	8001190 <HAL_InitTick>
  HAL_MspInit();
 8001200:	f002 fe7a 	bl	8003ef8 <HAL_MspInit>
}
 8001204:	2000      	movs	r0, #0
 8001206:	bd08      	pop	{r3, pc}
 8001208:	40023c00 	.word	0x40023c00

0800120c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
>>>>>>> Stashed changes
{
 800638e:	b510      	push	{r4, lr}
	htim->State = HAL_TIM_STATE_BUSY;
 8006390:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
	__HAL_TIM_DISABLE(htim);
 8006394:	6803      	ldr	r3, [r0, #0]
 8006396:	6a19      	ldr	r1, [r3, #32]
 8006398:	f241 1211 	movw	r2, #4369	; 0x1111
 800639c:	4211      	tst	r1, r2
{
 800639e:	4604      	mov	r4, r0
	__HAL_TIM_DISABLE(htim);
 80063a0:	d108      	bne.n	80063b4 <HAL_TIM_PWM_DeInit+0x28>
 80063a2:	6a19      	ldr	r1, [r3, #32]
 80063a4:	f240 4244 	movw	r2, #1092	; 0x444
 80063a8:	4211      	tst	r1, r2
 80063aa:	bf02      	ittt	eq
 80063ac:	681a      	ldreq	r2, [r3, #0]
 80063ae:	f022 0201 	biceq.w	r2, r2, #1
 80063b2:	601a      	streq	r2, [r3, #0]
	HAL_TIM_PWM_MspDeInit(htim);
 80063b4:	4620      	mov	r0, r4
 80063b6:	f7ff ffe8 	bl	800638a <HAL_TIM_PWM_MspDeInit>
	htim->State = HAL_TIM_STATE_RESET;
 80063ba:	2000      	movs	r0, #0
 80063bc:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
	__HAL_UNLOCK(htim);
 80063c0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 80063c4:	bd10      	pop	{r4, pc}

080063c6 <HAL_TIM_ConfigClockSource>:
	__HAL_LOCK(htim);
 80063c6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80063ca:	2b01      	cmp	r3, #1
{
 80063cc:	b570      	push	{r4, r5, r6, lr}
 80063ce:	f04f 0302 	mov.w	r3, #2
	__HAL_LOCK(htim);
 80063d2:	d01c      	beq.n	800640e <HAL_TIM_ConfigClockSource+0x48>
	htim->State = HAL_TIM_STATE_BUSY;
 80063d4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
	tmpsmcr = htim->Instance->SMCR;
 80063d8:	6803      	ldr	r3, [r0, #0]
	__HAL_LOCK(htim);
 80063da:	2201      	movs	r2, #1
 80063dc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
	tmpsmcr = htim->Instance->SMCR;
 80063e0:	689a      	ldr	r2, [r3, #8]
	tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063e2:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80063e6:	f022 0277 	bic.w	r2, r2, #119	; 0x77
	htim->Instance->SMCR = tmpsmcr;
 80063ea:	609a      	str	r2, [r3, #8]
	switch (sClockSourceConfig->ClockSource) {
 80063ec:	680a      	ldr	r2, [r1, #0]
 80063ee:	2a40      	cmp	r2, #64	; 0x40
 80063f0:	d079      	beq.n	80064e6 <HAL_TIM_ConfigClockSource+0x120>
 80063f2:	d819      	bhi.n	8006428 <HAL_TIM_ConfigClockSource+0x62>
 80063f4:	2a10      	cmp	r2, #16
 80063f6:	f000 8093 	beq.w	8006520 <HAL_TIM_ConfigClockSource+0x15a>
 80063fa:	d80a      	bhi.n	8006412 <HAL_TIM_ConfigClockSource+0x4c>
 80063fc:	2a00      	cmp	r2, #0
 80063fe:	f000 8089 	beq.w	8006514 <HAL_TIM_ConfigClockSource+0x14e>
	htim->State = HAL_TIM_STATE_READY;
 8006402:	2301      	movs	r3, #1
 8006404:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
	__HAL_UNLOCK(htim);
 8006408:	2300      	movs	r3, #0
 800640a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	__HAL_LOCK(htim);
 800640e:	4618      	mov	r0, r3
}
 8006410:	bd70      	pop	{r4, r5, r6, pc}
	switch (sClockSourceConfig->ClockSource) {
 8006412:	2a20      	cmp	r2, #32
 8006414:	f000 808a 	beq.w	800652c <HAL_TIM_ConfigClockSource+0x166>
 8006418:	2a30      	cmp	r2, #48	; 0x30
 800641a:	d1f2      	bne.n	8006402 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
	uint32_t tmpsmcr = 0U;

	/* Get the TIMx SMCR register value */
	tmpsmcr = TIMx->SMCR;
 800641c:	689a      	ldr	r2, [r3, #8]
	/* Reset the TS Bits */
	tmpsmcr &= ~TIM_SMCR_TS;
 800641e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
	/* Set the Input Trigger source and the slave mode*/
	tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8006422:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8006426:	e036      	b.n	8006496 <HAL_TIM_ConfigClockSource+0xd0>
	switch (sClockSourceConfig->ClockSource) {
 8006428:	2a70      	cmp	r2, #112	; 0x70
 800642a:	d036      	beq.n	800649a <HAL_TIM_ConfigClockSource+0xd4>
 800642c:	d81b      	bhi.n	8006466 <HAL_TIM_ConfigClockSource+0xa0>
 800642e:	2a50      	cmp	r2, #80	; 0x50
 8006430:	d042      	beq.n	80064b8 <HAL_TIM_ConfigClockSource+0xf2>
 8006432:	2a60      	cmp	r2, #96	; 0x60
 8006434:	d1e5      	bne.n	8006402 <HAL_TIM_ConfigClockSource+0x3c>
	TIMx->CCER &= ~TIM_CCER_CC2E;
 8006436:	6a1c      	ldr	r4, [r3, #32]
		TIM_TI2_ConfigInputStage(htim->Instance,
 8006438:	684d      	ldr	r5, [r1, #4]
 800643a:	68ce      	ldr	r6, [r1, #12]
	TIMx->CCER &= ~TIM_CCER_CC2E;
 800643c:	f024 0410 	bic.w	r4, r4, #16
 8006440:	621c      	str	r4, [r3, #32]
	tmpccmr1 = TIMx->CCMR1;
 8006442:	6999      	ldr	r1, [r3, #24]
	tmpccer = TIMx->CCER;
 8006444:	6a1a      	ldr	r2, [r3, #32]
	tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006446:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
	tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800644a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
	tmpccer |= (TIM_ICPolarity << 4U);
 800644e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
	tmpccmr1 |= (TIM_ICFilter << 12U);
 8006452:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
	TIMx->CCMR1 = tmpccmr1;
 8006456:	6199      	str	r1, [r3, #24]
	TIMx->CCER = tmpccer;
 8006458:	621a      	str	r2, [r3, #32]
	tmpsmcr = TIMx->SMCR;
 800645a:	689a      	ldr	r2, [r3, #8]
	tmpsmcr &= ~TIM_SMCR_TS;
 800645c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
	tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8006460:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8006464:	e017      	b.n	8006496 <HAL_TIM_ConfigClockSource+0xd0>
	switch (sClockSourceConfig->ClockSource) {
 8006466:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800646a:	d011      	beq.n	8006490 <HAL_TIM_ConfigClockSource+0xca>
 800646c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8006470:	d1c7      	bne.n	8006402 <HAL_TIM_ConfigClockSource+0x3c>

	/* Reset the ETR Bits */
	tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

	/* Set the Prescaler, the Filter value and the Polarity */
	tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8006472:	688a      	ldr	r2, [r1, #8]
 8006474:	684d      	ldr	r5, [r1, #4]
	tmpsmcr = TIMx->SMCR;
 8006476:	689c      	ldr	r4, [r3, #8]
	tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8006478:	68c9      	ldr	r1, [r1, #12]
 800647a:	432a      	orrs	r2, r5
	tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800647c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
	tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8006480:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006484:	4322      	orrs	r2, r4

	/* Write to TIMx SMCR */
	TIMx->SMCR = tmpsmcr;
 8006486:	609a      	str	r2, [r3, #8]
		htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006488:	689a      	ldr	r2, [r3, #8]
 800648a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800648e:	e002      	b.n	8006496 <HAL_TIM_ConfigClockSource+0xd0>
		htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8006490:	689a      	ldr	r2, [r3, #8]
 8006492:	f022 0207 	bic.w	r2, r2, #7
	TIMx->SMCR = tmpsmcr;
 8006496:	609a      	str	r2, [r3, #8]
 8006498:	e7b3      	b.n	8006402 <HAL_TIM_ConfigClockSource+0x3c>
	tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800649a:	688a      	ldr	r2, [r1, #8]
 800649c:	684d      	ldr	r5, [r1, #4]
	tmpsmcr = TIMx->SMCR;
 800649e:	689c      	ldr	r4, [r3, #8]
	tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80064a0:	68c9      	ldr	r1, [r1, #12]
 80064a2:	432a      	orrs	r2, r5
	tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064a4:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
	tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80064a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80064ac:	4322      	orrs	r2, r4
	TIMx->SMCR = tmpsmcr;
 80064ae:	609a      	str	r2, [r3, #8]
		tmpsmcr = htim->Instance->SMCR;
 80064b0:	689a      	ldr	r2, [r3, #8]
		tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064b2:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 80064b6:	e7ee      	b.n	8006496 <HAL_TIM_ConfigClockSource+0xd0>
		TIM_TI1_ConfigInputStage(htim->Instance,
 80064b8:	684c      	ldr	r4, [r1, #4]
 80064ba:	68ce      	ldr	r6, [r1, #12]
	tmpccer = TIMx->CCER;
 80064bc:	6a19      	ldr	r1, [r3, #32]
	TIMx->CCER &= ~TIM_CCER_CC1E;
 80064be:	6a1d      	ldr	r5, [r3, #32]
 80064c0:	f025 0501 	bic.w	r5, r5, #1
 80064c4:	621d      	str	r5, [r3, #32]
	tmpccmr1 = TIMx->CCMR1;
 80064c6:	699a      	ldr	r2, [r3, #24]
	tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064c8:	f021 010a 	bic.w	r1, r1, #10
	tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064cc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
	tmpccmr1 |= (TIM_ICFilter << 4U);
 80064d0:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
	tmpccer |= TIM_ICPolarity;
 80064d4:	4321      	orrs	r1, r4
	TIMx->CCMR1 = tmpccmr1;
 80064d6:	619a      	str	r2, [r3, #24]
	TIMx->CCER = tmpccer;
 80064d8:	6219      	str	r1, [r3, #32]
	tmpsmcr = TIMx->SMCR;
 80064da:	689a      	ldr	r2, [r3, #8]
	tmpsmcr &= ~TIM_SMCR_TS;
 80064dc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
	tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80064e0:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 80064e4:	e7d7      	b.n	8006496 <HAL_TIM_ConfigClockSource+0xd0>
		TIM_TI1_ConfigInputStage(htim->Instance,
 80064e6:	684c      	ldr	r4, [r1, #4]
 80064e8:	68ce      	ldr	r6, [r1, #12]
	tmpccer = TIMx->CCER;
 80064ea:	6a19      	ldr	r1, [r3, #32]
	TIMx->CCER &= ~TIM_CCER_CC1E;
 80064ec:	6a1d      	ldr	r5, [r3, #32]
 80064ee:	f025 0501 	bic.w	r5, r5, #1
 80064f2:	621d      	str	r5, [r3, #32]
	tmpccmr1 = TIMx->CCMR1;
 80064f4:	699a      	ldr	r2, [r3, #24]
	tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064f6:	f021 010a 	bic.w	r1, r1, #10
	tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064fa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
	tmpccmr1 |= (TIM_ICFilter << 4U);
 80064fe:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
	tmpccer |= TIM_ICPolarity;
 8006502:	4321      	orrs	r1, r4
	TIMx->CCMR1 = tmpccmr1;
 8006504:	619a      	str	r2, [r3, #24]
	TIMx->CCER = tmpccer;
 8006506:	6219      	str	r1, [r3, #32]
	tmpsmcr = TIMx->SMCR;
 8006508:	689a      	ldr	r2, [r3, #8]
	tmpsmcr &= ~TIM_SMCR_TS;
 800650a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
	tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800650e:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8006512:	e7c0      	b.n	8006496 <HAL_TIM_ConfigClockSource+0xd0>
	tmpsmcr = TIMx->SMCR;
 8006514:	689a      	ldr	r2, [r3, #8]
	tmpsmcr &= ~TIM_SMCR_TS;
 8006516:	f022 0270 	bic.w	r2, r2, #112	; 0x70
	tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800651a:	f042 0207 	orr.w	r2, r2, #7
 800651e:	e7ba      	b.n	8006496 <HAL_TIM_ConfigClockSource+0xd0>
	tmpsmcr = TIMx->SMCR;
 8006520:	689a      	ldr	r2, [r3, #8]
	tmpsmcr &= ~TIM_SMCR_TS;
 8006522:	f022 0270 	bic.w	r2, r2, #112	; 0x70
	tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8006526:	f042 0217 	orr.w	r2, r2, #23
 800652a:	e7b4      	b.n	8006496 <HAL_TIM_ConfigClockSource+0xd0>
	tmpsmcr = TIMx->SMCR;
 800652c:	689a      	ldr	r2, [r3, #8]
	tmpsmcr &= ~TIM_SMCR_TS;
 800652e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
	tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8006532:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8006536:	e7ae      	b.n	8006496 <HAL_TIM_ConfigClockSource+0xd0>

08006538 <HAL_TIM_PeriodElapsedCallback>:
 8006538:	4770      	bx	lr

0800653a <HAL_TIM_OC_DelayElapsedCallback>:
 800653a:	4770      	bx	lr

0800653c <HAL_TIM_IC_CaptureCallback>:
 800653c:	4770      	bx	lr

0800653e <HAL_TIM_PWM_PulseFinishedCallback>:
 800653e:	4770      	bx	lr

08006540 <HAL_TIM_TriggerCallback>:
 8006540:	4770      	bx	lr

08006542 <HAL_TIM_IRQHandler>:
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET) {
 8006542:	6803      	ldr	r3, [r0, #0]
 8006544:	691a      	ldr	r2, [r3, #16]
 8006546:	0791      	lsls	r1, r2, #30
{
 8006548:	b510      	push	{r4, lr}
 800654a:	4604      	mov	r4, r0
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET) {
 800654c:	d50e      	bpl.n	800656c <HAL_TIM_IRQHandler+0x2a>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET) {
 800654e:	68da      	ldr	r2, [r3, #12]
 8006550:	0792      	lsls	r2, r2, #30
 8006552:	d50b      	bpl.n	800656c <HAL_TIM_IRQHandler+0x2a>
				__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006554:	f06f 0202 	mvn.w	r2, #2
 8006558:	611a      	str	r2, [r3, #16]
				if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U) {
 800655a:	699b      	ldr	r3, [r3, #24]
				htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800655c:	2201      	movs	r2, #1
				if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U) {
 800655e:	079b      	lsls	r3, r3, #30
				htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006560:	7602      	strb	r2, [r0, #24]
				if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U) {
 8006562:	d077      	beq.n	8006654 <HAL_TIM_IRQHandler+0x112>
					HAL_TIM_IC_CaptureCallback(htim);
 8006564:	f7ff ffea 	bl	800653c <HAL_TIM_IC_CaptureCallback>
				htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006568:	2300      	movs	r3, #0
 800656a:	7623      	strb	r3, [r4, #24]
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET) {
 800656c:	6823      	ldr	r3, [r4, #0]
 800656e:	691a      	ldr	r2, [r3, #16]
 8006570:	0750      	lsls	r0, r2, #29
 8006572:	d510      	bpl.n	8006596 <HAL_TIM_IRQHandler+0x54>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET) {
 8006574:	68da      	ldr	r2, [r3, #12]
 8006576:	0751      	lsls	r1, r2, #29
 8006578:	d50d      	bpl.n	8006596 <HAL_TIM_IRQHandler+0x54>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800657a:	f06f 0204 	mvn.w	r2, #4
 800657e:	611a      	str	r2, [r3, #16]
			if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U) {
 8006580:	699b      	ldr	r3, [r3, #24]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006582:	2202      	movs	r2, #2
			if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U) {
 8006584:	f413 7f40 	tst.w	r3, #768	; 0x300
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006588:	7622      	strb	r2, [r4, #24]
				HAL_TIM_IC_CaptureCallback(htim);
 800658a:	4620      	mov	r0, r4
			if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U) {
 800658c:	d068      	beq.n	8006660 <HAL_TIM_IRQHandler+0x11e>
				HAL_TIM_IC_CaptureCallback(htim);
 800658e:	f7ff ffd5 	bl	800653c <HAL_TIM_IC_CaptureCallback>
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006592:	2300      	movs	r3, #0
 8006594:	7623      	strb	r3, [r4, #24]
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET) {
 8006596:	6823      	ldr	r3, [r4, #0]
 8006598:	691a      	ldr	r2, [r3, #16]
 800659a:	0712      	lsls	r2, r2, #28
 800659c:	d50f      	bpl.n	80065be <HAL_TIM_IRQHandler+0x7c>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET) {
 800659e:	68da      	ldr	r2, [r3, #12]
 80065a0:	0710      	lsls	r0, r2, #28
 80065a2:	d50c      	bpl.n	80065be <HAL_TIM_IRQHandler+0x7c>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80065a4:	f06f 0208 	mvn.w	r2, #8
 80065a8:	611a      	str	r2, [r3, #16]
			if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U) {
 80065aa:	69db      	ldr	r3, [r3, #28]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065ac:	2204      	movs	r2, #4
			if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U) {
 80065ae:	0799      	lsls	r1, r3, #30
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065b0:	7622      	strb	r2, [r4, #24]
				HAL_TIM_IC_CaptureCallback(htim);
 80065b2:	4620      	mov	r0, r4
			if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U) {
 80065b4:	d05a      	beq.n	800666c <HAL_TIM_IRQHandler+0x12a>
				HAL_TIM_IC_CaptureCallback(htim);
 80065b6:	f7ff ffc1 	bl	800653c <HAL_TIM_IC_CaptureCallback>
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ba:	2300      	movs	r3, #0
 80065bc:	7623      	strb	r3, [r4, #24]
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET) {
 80065be:	6823      	ldr	r3, [r4, #0]
 80065c0:	691a      	ldr	r2, [r3, #16]
 80065c2:	06d2      	lsls	r2, r2, #27
 80065c4:	d510      	bpl.n	80065e8 <HAL_TIM_IRQHandler+0xa6>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET) {
 80065c6:	68da      	ldr	r2, [r3, #12]
 80065c8:	06d0      	lsls	r0, r2, #27
 80065ca:	d50d      	bpl.n	80065e8 <HAL_TIM_IRQHandler+0xa6>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065cc:	f06f 0210 	mvn.w	r2, #16
 80065d0:	611a      	str	r2, [r3, #16]
			if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U) {
 80065d2:	69db      	ldr	r3, [r3, #28]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065d4:	2208      	movs	r2, #8
			if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U) {
 80065d6:	f413 7f40 	tst.w	r3, #768	; 0x300
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065da:	7622      	strb	r2, [r4, #24]
				HAL_TIM_IC_CaptureCallback(htim);
 80065dc:	4620      	mov	r0, r4
			if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U) {
 80065de:	d04b      	beq.n	8006678 <HAL_TIM_IRQHandler+0x136>
				HAL_TIM_IC_CaptureCallback(htim);
 80065e0:	f7ff ffac 	bl	800653c <HAL_TIM_IC_CaptureCallback>
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065e4:	2300      	movs	r3, #0
 80065e6:	7623      	strb	r3, [r4, #24]
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET) {
 80065e8:	6823      	ldr	r3, [r4, #0]
 80065ea:	691a      	ldr	r2, [r3, #16]
 80065ec:	07d1      	lsls	r1, r2, #31
 80065ee:	d508      	bpl.n	8006602 <HAL_TIM_IRQHandler+0xc0>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET) {
 80065f0:	68da      	ldr	r2, [r3, #12]
 80065f2:	07d2      	lsls	r2, r2, #31
 80065f4:	d505      	bpl.n	8006602 <HAL_TIM_IRQHandler+0xc0>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065f6:	f06f 0201 	mvn.w	r2, #1
 80065fa:	611a      	str	r2, [r3, #16]
			HAL_TIM_PeriodElapsedCallback(htim);
 80065fc:	4620      	mov	r0, r4
 80065fe:	f7ff ff9b 	bl	8006538 <HAL_TIM_PeriodElapsedCallback>
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET) {
 8006602:	6823      	ldr	r3, [r4, #0]
 8006604:	691a      	ldr	r2, [r3, #16]
 8006606:	0610      	lsls	r0, r2, #24
 8006608:	d508      	bpl.n	800661c <HAL_TIM_IRQHandler+0xda>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET) {
 800660a:	68da      	ldr	r2, [r3, #12]
 800660c:	0611      	lsls	r1, r2, #24
 800660e:	d505      	bpl.n	800661c <HAL_TIM_IRQHandler+0xda>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006610:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006614:	611a      	str	r2, [r3, #16]
			HAL_TIMEx_BreakCallback(htim);
 8006616:	4620      	mov	r0, r4
 8006618:	f000 f9b7 	bl	800698a <HAL_TIMEx_BreakCallback>
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET) {
 800661c:	6823      	ldr	r3, [r4, #0]
 800661e:	691a      	ldr	r2, [r3, #16]
 8006620:	0652      	lsls	r2, r2, #25
 8006622:	d508      	bpl.n	8006636 <HAL_TIM_IRQHandler+0xf4>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET) {
 8006624:	68da      	ldr	r2, [r3, #12]
 8006626:	0650      	lsls	r0, r2, #25
 8006628:	d505      	bpl.n	8006636 <HAL_TIM_IRQHandler+0xf4>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800662a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800662e:	611a      	str	r2, [r3, #16]
			HAL_TIM_TriggerCallback(htim);
 8006630:	4620      	mov	r0, r4
 8006632:	f7ff ff85 	bl	8006540 <HAL_TIM_TriggerCallback>
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET) {
 8006636:	6823      	ldr	r3, [r4, #0]
 8006638:	691a      	ldr	r2, [r3, #16]
 800663a:	0691      	lsls	r1, r2, #26
 800663c:	d522      	bpl.n	8006684 <HAL_TIM_IRQHandler+0x142>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET) {
 800663e:	68da      	ldr	r2, [r3, #12]
 8006640:	0692      	lsls	r2, r2, #26
 8006642:	d51f      	bpl.n	8006684 <HAL_TIM_IRQHandler+0x142>
			__HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006644:	f06f 0220 	mvn.w	r2, #32
			HAL_TIMEx_CommutationCallback(htim);
 8006648:	4620      	mov	r0, r4
			__HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800664a:	611a      	str	r2, [r3, #16]
}
 800664c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			HAL_TIMEx_CommutationCallback(htim);
 8006650:	f000 b99a 	b.w	8006988 <HAL_TIMEx_CommutationCallback>
					HAL_TIM_OC_DelayElapsedCallback(htim);
 8006654:	f7ff ff71 	bl	800653a <HAL_TIM_OC_DelayElapsedCallback>
					HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006658:	4620      	mov	r0, r4
 800665a:	f7ff ff70 	bl	800653e <HAL_TIM_PWM_PulseFinishedCallback>
 800665e:	e783      	b.n	8006568 <HAL_TIM_IRQHandler+0x26>
				HAL_TIM_OC_DelayElapsedCallback(htim);
 8006660:	f7ff ff6b 	bl	800653a <HAL_TIM_OC_DelayElapsedCallback>
				HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006664:	4620      	mov	r0, r4
 8006666:	f7ff ff6a 	bl	800653e <HAL_TIM_PWM_PulseFinishedCallback>
 800666a:	e792      	b.n	8006592 <HAL_TIM_IRQHandler+0x50>
				HAL_TIM_OC_DelayElapsedCallback(htim);
 800666c:	f7ff ff65 	bl	800653a <HAL_TIM_OC_DelayElapsedCallback>
				HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006670:	4620      	mov	r0, r4
 8006672:	f7ff ff64 	bl	800653e <HAL_TIM_PWM_PulseFinishedCallback>
 8006676:	e7a0      	b.n	80065ba <HAL_TIM_IRQHandler+0x78>
				HAL_TIM_OC_DelayElapsedCallback(htim);
 8006678:	f7ff ff5f 	bl	800653a <HAL_TIM_OC_DelayElapsedCallback>
				HAL_TIM_PWM_PulseFinishedCallback(htim);
 800667c:	4620      	mov	r0, r4
 800667e:	f7ff ff5e 	bl	800653e <HAL_TIM_PWM_PulseFinishedCallback>
 8006682:	e7af      	b.n	80065e4 <HAL_TIM_IRQHandler+0xa2>
 8006684:	bd10      	pop	{r4, pc}
	...

08006688 <TIM_Base_SetConfig>:
	if (IS_TIM_CC3_INSTANCE(TIMx) != RESET) {
 8006688:	4a22      	ldr	r2, [pc, #136]	; (8006714 <TIM_Base_SetConfig+0x8c>)
	tmpcr1 = TIMx->CR1;
 800668a:	6803      	ldr	r3, [r0, #0]
	if (IS_TIM_CC3_INSTANCE(TIMx) != RESET) {
 800668c:	4290      	cmp	r0, r2
 800668e:	d00e      	beq.n	80066ae <TIM_Base_SetConfig+0x26>
 8006690:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006694:	d00b      	beq.n	80066ae <TIM_Base_SetConfig+0x26>
 8006696:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800669a:	4290      	cmp	r0, r2
 800669c:	d007      	beq.n	80066ae <TIM_Base_SetConfig+0x26>
 800669e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066a2:	4290      	cmp	r0, r2
 80066a4:	d003      	beq.n	80066ae <TIM_Base_SetConfig+0x26>
 80066a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066aa:	4290      	cmp	r0, r2
 80066ac:	d119      	bne.n	80066e2 <TIM_Base_SetConfig+0x5a>
		tmpcr1 |= Structure->CounterMode;
 80066ae:	684a      	ldr	r2, [r1, #4]
		tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
		tmpcr1 |= Structure->CounterMode;
 80066b4:	4313      	orrs	r3, r2
	if (IS_TIM_CC1_INSTANCE(TIMx) != RESET) {
 80066b6:	4a17      	ldr	r2, [pc, #92]	; (8006714 <TIM_Base_SetConfig+0x8c>)
 80066b8:	4290      	cmp	r0, r2
 80066ba:	d104      	bne.n	80066c6 <TIM_Base_SetConfig+0x3e>
		tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066bc:	68ca      	ldr	r2, [r1, #12]
		tmpcr1 &= ~TIM_CR1_CKD;
 80066be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
		tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066c2:	4313      	orrs	r3, r2
 80066c4:	e018      	b.n	80066f8 <TIM_Base_SetConfig+0x70>
	if (IS_TIM_CC1_INSTANCE(TIMx) != RESET) {
 80066c6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80066ca:	d0f7      	beq.n	80066bc <TIM_Base_SetConfig+0x34>
 80066cc:	4a12      	ldr	r2, [pc, #72]	; (8006718 <TIM_Base_SetConfig+0x90>)
 80066ce:	4290      	cmp	r0, r2
 80066d0:	d0f4      	beq.n	80066bc <TIM_Base_SetConfig+0x34>
 80066d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066d6:	4290      	cmp	r0, r2
 80066d8:	d0f0      	beq.n	80066bc <TIM_Base_SetConfig+0x34>
 80066da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066de:	4290      	cmp	r0, r2
 80066e0:	d0ec      	beq.n	80066bc <TIM_Base_SetConfig+0x34>
 80066e2:	4a0e      	ldr	r2, [pc, #56]	; (800671c <TIM_Base_SetConfig+0x94>)
 80066e4:	4290      	cmp	r0, r2
 80066e6:	d0e9      	beq.n	80066bc <TIM_Base_SetConfig+0x34>
 80066e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066ec:	4290      	cmp	r0, r2
 80066ee:	d0e5      	beq.n	80066bc <TIM_Base_SetConfig+0x34>
 80066f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066f4:	4290      	cmp	r0, r2
 80066f6:	d0e1      	beq.n	80066bc <TIM_Base_SetConfig+0x34>
	TIMx->CR1 = tmpcr1;
 80066f8:	6003      	str	r3, [r0, #0]
	TIMx->ARR = (uint32_t)Structure->Period;
 80066fa:	688b      	ldr	r3, [r1, #8]
 80066fc:	62c3      	str	r3, [r0, #44]	; 0x2c
	TIMx->PSC = (uint32_t)Structure->Prescaler;
 80066fe:	680b      	ldr	r3, [r1, #0]
 8006700:	6283      	str	r3, [r0, #40]	; 0x28
	if (IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET) {
 8006702:	4b04      	ldr	r3, [pc, #16]	; (8006714 <TIM_Base_SetConfig+0x8c>)
 8006704:	4298      	cmp	r0, r3
		TIMx->RCR = Structure->RepetitionCounter;
 8006706:	bf04      	itt	eq
 8006708:	690b      	ldreq	r3, [r1, #16]
 800670a:	6303      	streq	r3, [r0, #48]	; 0x30
	TIMx->EGR = TIM_EGR_UG;
 800670c:	2301      	movs	r3, #1
 800670e:	6143      	str	r3, [r0, #20]
}
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	40010000 	.word	0x40010000
 8006718:	40000400 	.word	0x40000400
 800671c:	40014000 	.word	0x40014000

08006720 <HAL_TIM_Base_Init>:
{
 8006720:	b510      	push	{r4, lr}
	if (htim == NULL) {
 8006722:	4604      	mov	r4, r0
 8006724:	b1a0      	cbz	r0, 8006750 <HAL_TIM_Base_Init+0x30>
	if (htim->State == HAL_TIM_STATE_RESET) {
 8006726:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800672a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800672e:	b91b      	cbnz	r3, 8006738 <HAL_TIM_Base_Init+0x18>
		htim->Lock = HAL_UNLOCKED;
 8006730:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
		HAL_TIM_Base_MspInit(htim);
 8006734:	f001 fa38 	bl	8007ba8 <HAL_TIM_Base_MspInit>
	htim->State = HAL_TIM_STATE_BUSY;
 8006738:	2302      	movs	r3, #2
 800673a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800673e:	6820      	ldr	r0, [r4, #0]
 8006740:	1d21      	adds	r1, r4, #4
 8006742:	f7ff ffa1 	bl	8006688 <TIM_Base_SetConfig>
	htim->State = HAL_TIM_STATE_READY;
 8006746:	2301      	movs	r3, #1
 8006748:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	return HAL_OK;
 800674c:	2000      	movs	r0, #0
 800674e:	bd10      	pop	{r4, pc}
		return HAL_ERROR;
 8006750:	2001      	movs	r0, #1
}
 8006752:	bd10      	pop	{r4, pc}

08006754 <HAL_TIM_PWM_Init>:
{
<<<<<<< Updated upstream
 8006754:	b510      	push	{r4, lr}
	if (htim == NULL) {
 8006756:	4604      	mov	r4, r0
 8006758:	b1a0      	cbz	r0, 8006784 <HAL_TIM_PWM_Init+0x30>
	if (htim->State == HAL_TIM_STATE_RESET) {
 800675a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800675e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006762:	b91b      	cbnz	r3, 800676c <HAL_TIM_PWM_Init+0x18>
		htim->Lock = HAL_UNLOCKED;
 8006764:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
		HAL_TIM_PWM_MspInit(htim);
 8006768:	f7ff fe0e 	bl	8006388 <HAL_TIM_PWM_MspInit>
	htim->State = HAL_TIM_STATE_BUSY;
 800676c:	2302      	movs	r3, #2
 800676e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006772:	6820      	ldr	r0, [r4, #0]
 8006774:	1d21      	adds	r1, r4, #4
 8006776:	f7ff ff87 	bl	8006688 <TIM_Base_SetConfig>
	htim->State = HAL_TIM_STATE_READY;
 800677a:	2301      	movs	r3, #1
 800677c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	return HAL_OK;
 8006780:	2000      	movs	r0, #0
 8006782:	bd10      	pop	{r4, pc}
		return HAL_ERROR;
 8006784:	2001      	movs	r0, #1
}
 8006786:	bd10      	pop	{r4, pc}

08006788 <TIM_OC2_SetConfig>:
	TIMx->CCER &= ~TIM_CCER_CC2E;
 8006788:	6a03      	ldr	r3, [r0, #32]
 800678a:	f023 0310 	bic.w	r3, r3, #16
 800678e:	6203      	str	r3, [r0, #32]
	tmpccer = TIMx->CCER;
 8006790:	6a03      	ldr	r3, [r0, #32]
=======
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001624:	4b17      	ldr	r3, [pc, #92]	; (8001684 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001626:	b530      	push	{r4, r5, lr}
 8001628:	68dc      	ldr	r4, [r3, #12]
 800162a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800162e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001632:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001634:	2b04      	cmp	r3, #4
 8001636:	bf28      	it	cs
 8001638:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800163a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800163c:	f04f 0501 	mov.w	r5, #1
 8001640:	fa05 f303 	lsl.w	r3, r5, r3
 8001644:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001648:	bf8c      	ite	hi
 800164a:	3c03      	subhi	r4, #3
 800164c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800164e:	4019      	ands	r1, r3
 8001650:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001652:	fa05 f404 	lsl.w	r4, r5, r4
 8001656:	3c01      	subs	r4, #1
 8001658:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800165a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800165c:	ea42 0201 	orr.w	r2, r2, r1
 8001660:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001664:	bfaf      	iteee	ge
 8001666:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166a:	f000 000f 	andlt.w	r0, r0, #15
 800166e:	4b06      	ldrlt	r3, [pc, #24]	; (8001688 <HAL_NVIC_SetPriority+0x64>)
 8001670:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001672:	bfa5      	ittet	ge
 8001674:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001678:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001680:	bd30      	pop	{r4, r5, pc}
 8001682:	bf00      	nop
 8001684:	e000ed00 	.word	0xe000ed00
 8001688:	e000ed14 	.word	0xe000ed14

0800168c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800168c:	0942      	lsrs	r2, r0, #5
 800168e:	2301      	movs	r3, #1
 8001690:	f000 001f 	and.w	r0, r0, #31
 8001694:	fa03 f000 	lsl.w	r0, r3, r0
 8001698:	4b01      	ldr	r3, [pc, #4]	; (80016a0 <HAL_NVIC_EnableIRQ+0x14>)
 800169a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800169e:	4770      	bx	lr
 80016a0:	e000e100 	.word	0xe000e100

080016a4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
>>>>>>> Stashed changes
{
 8006792:	b570      	push	{r4, r5, r6, lr}
	tmpcr2 = TIMx->CR2;
 8006794:	6844      	ldr	r4, [r0, #4]
	tmpccmrx = TIMx->CCMR1;
 8006796:	6982      	ldr	r2, [r0, #24]
	tmpccmrx |= (OC_Config->OCMode << 8U);
 8006798:	680d      	ldr	r5, [r1, #0]
	tmpccmrx &= ~TIM_CCMR1_CC2S;
 800679a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
	tmpccmrx |= (OC_Config->OCMode << 8U);
 800679e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
	tmpccer |= (OC_Config->OCPolarity << 4U);
 80067a2:	688d      	ldr	r5, [r1, #8]
	tmpccer &= ~TIM_CCER_CC2P;
 80067a4:	f023 0320 	bic.w	r3, r3, #32
	tmpccer |= (OC_Config->OCPolarity << 4U);
 80067a8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
	if (IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET) {
 80067ac:	4d0b      	ldr	r5, [pc, #44]	; (80067dc <TIM_OC2_SetConfig+0x54>)
 80067ae:	42a8      	cmp	r0, r5
 80067b0:	d10d      	bne.n	80067ce <TIM_OC2_SetConfig+0x46>
		tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067b2:	68cd      	ldr	r5, [r1, #12]
		tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067b4:	698e      	ldr	r6, [r1, #24]
		tmpccer &= ~TIM_CCER_CC2NP;
 80067b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
		tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067ba:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
		tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067be:	694d      	ldr	r5, [r1, #20]
		tmpcr2 &= ~TIM_CR2_OIS2N;
 80067c0:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
		tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067c4:	4335      	orrs	r5, r6
		tmpccer &= ~TIM_CCER_CC2NE;
 80067c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
		tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067ca:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
	TIMx->CR2 = tmpcr2;
 80067ce:	6044      	str	r4, [r0, #4]
	TIMx->CCMR1 = tmpccmrx;
 80067d0:	6182      	str	r2, [r0, #24]
	TIMx->CCR2 = OC_Config->Pulse;
 80067d2:	684a      	ldr	r2, [r1, #4]
 80067d4:	6382      	str	r2, [r0, #56]	; 0x38
	TIMx->CCER = tmpccer;
 80067d6:	6203      	str	r3, [r0, #32]
 80067d8:	bd70      	pop	{r4, r5, r6, pc}
 80067da:	bf00      	nop
 80067dc:	40010000 	.word	0x40010000

080067e0 <HAL_TIM_PWM_ConfigChannel>:
{
 80067e0:	b538      	push	{r3, r4, r5, lr}
	__HAL_LOCK(htim);
 80067e2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80067e6:	2b01      	cmp	r3, #1
{
 80067e8:	4604      	mov	r4, r0
 80067ea:	f04f 0002 	mov.w	r0, #2
	__HAL_LOCK(htim);
 80067ee:	d025      	beq.n	800683c <HAL_TIM_PWM_ConfigChannel+0x5c>
 80067f0:	2301      	movs	r3, #1
 80067f2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	htim->State = HAL_TIM_STATE_BUSY;
 80067f6:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
	switch (Channel) {
 80067fa:	2a0c      	cmp	r2, #12
 80067fc:	d818      	bhi.n	8006830 <HAL_TIM_PWM_ConfigChannel+0x50>
 80067fe:	e8df f002 	tbb	[pc, r2]
 8006802:	1707      	.short	0x1707
 8006804:	171e1717 	.word	0x171e1717
 8006808:	172f1717 	.word	0x172f1717
 800680c:	1717      	.short	0x1717
 800680e:	40          	.byte	0x40
 800680f:	00          	.byte	0x00
		TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006810:	6820      	ldr	r0, [r4, #0]
 8006812:	f7ff fd45 	bl	80062a0 <TIM_OC1_SetConfig>
		htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006816:	6823      	ldr	r3, [r4, #0]
		htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006818:	6909      	ldr	r1, [r1, #16]
		htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800681a:	699a      	ldr	r2, [r3, #24]
 800681c:	f042 0208 	orr.w	r2, r2, #8
 8006820:	619a      	str	r2, [r3, #24]
		htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006822:	699a      	ldr	r2, [r3, #24]
 8006824:	f022 0204 	bic.w	r2, r2, #4
 8006828:	619a      	str	r2, [r3, #24]
		htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800682a:	699a      	ldr	r2, [r3, #24]
 800682c:	430a      	orrs	r2, r1
		htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800682e:	619a      	str	r2, [r3, #24]
	htim->State = HAL_TIM_STATE_READY;
 8006830:	2301      	movs	r3, #1
	__HAL_UNLOCK(htim);
 8006832:	2000      	movs	r0, #0
	htim->State = HAL_TIM_STATE_READY;
 8006834:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	__HAL_UNLOCK(htim);
 8006838:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 800683c:	bd38      	pop	{r3, r4, r5, pc}
		TIM_OC2_SetConfig(htim->Instance, sConfig);
 800683e:	6820      	ldr	r0, [r4, #0]
 8006840:	f7ff ffa2 	bl	8006788 <TIM_OC2_SetConfig>
		htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006844:	6823      	ldr	r3, [r4, #0]
		htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006846:	6909      	ldr	r1, [r1, #16]
		htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006848:	699a      	ldr	r2, [r3, #24]
 800684a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800684e:	619a      	str	r2, [r3, #24]
		htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006850:	699a      	ldr	r2, [r3, #24]
 8006852:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006856:	619a      	str	r2, [r3, #24]
		htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006858:	699a      	ldr	r2, [r3, #24]
 800685a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800685e:	e7e6      	b.n	800682e <HAL_TIM_PWM_ConfigChannel+0x4e>
		TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006860:	6820      	ldr	r0, [r4, #0]
 8006862:	f7ff fd45 	bl	80062f0 <TIM_OC3_SetConfig>
		htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006866:	6823      	ldr	r3, [r4, #0]
		htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006868:	6909      	ldr	r1, [r1, #16]
		htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800686a:	69da      	ldr	r2, [r3, #28]
 800686c:	f042 0208 	orr.w	r2, r2, #8
 8006870:	61da      	str	r2, [r3, #28]
		htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006872:	69da      	ldr	r2, [r3, #28]
 8006874:	f022 0204 	bic.w	r2, r2, #4
 8006878:	61da      	str	r2, [r3, #28]
		htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800687a:	69da      	ldr	r2, [r3, #28]
 800687c:	430a      	orrs	r2, r1
		htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800687e:	61da      	str	r2, [r3, #28]
	break;
 8006880:	e7d6      	b.n	8006830 <HAL_TIM_PWM_ConfigChannel+0x50>
		TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006882:	6820      	ldr	r0, [r4, #0]
 8006884:	f7ff fd5e 	bl	8006344 <TIM_OC4_SetConfig>
		htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006888:	6823      	ldr	r3, [r4, #0]
		htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800688a:	6909      	ldr	r1, [r1, #16]
		htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800688c:	69da      	ldr	r2, [r3, #28]
 800688e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006892:	61da      	str	r2, [r3, #28]
		htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006894:	69da      	ldr	r2, [r3, #28]
 8006896:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800689a:	61da      	str	r2, [r3, #28]
		htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800689c:	69da      	ldr	r2, [r3, #28]
 800689e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80068a2:	e7ec      	b.n	800687e <HAL_TIM_PWM_ConfigChannel+0x9e>

080068a4 <TIM_CCxChannelCmd>:
	TIMx->CCER &= ~tmp;
 80068a4:	6a03      	ldr	r3, [r0, #32]
{
 80068a6:	b510      	push	{r4, lr}
	tmp = TIM_CCER_CC1E << Channel;
 80068a8:	2401      	movs	r4, #1
 80068aa:	408c      	lsls	r4, r1
	TIMx->CCER &= ~tmp;
 80068ac:	ea23 0304 	bic.w	r3, r3, r4
 80068b0:	6203      	str	r3, [r0, #32]
	TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80068b2:	6a03      	ldr	r3, [r0, #32]
 80068b4:	408a      	lsls	r2, r1
 80068b6:	431a      	orrs	r2, r3
 80068b8:	6202      	str	r2, [r0, #32]
 80068ba:	bd10      	pop	{r4, pc}

080068bc <HAL_TIM_PWM_Start>:
{
<<<<<<< Updated upstream
 80068bc:	b510      	push	{r4, lr}
 80068be:	4604      	mov	r4, r0
	TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80068c0:	2201      	movs	r2, #1
 80068c2:	6800      	ldr	r0, [r0, #0]
 80068c4:	f7ff ffee 	bl	80068a4 <TIM_CCxChannelCmd>
	if (IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET) {
 80068c8:	6823      	ldr	r3, [r4, #0]
 80068ca:	4a06      	ldr	r2, [pc, #24]	; (80068e4 <HAL_TIM_PWM_Start+0x28>)
 80068cc:	4293      	cmp	r3, r2
		__HAL_TIM_MOE_ENABLE(htim);
 80068ce:	bf02      	ittt	eq
 80068d0:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80068d2:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 80068d6:	645a      	streq	r2, [r3, #68]	; 0x44
	__HAL_TIM_ENABLE(htim);
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	f042 0201 	orr.w	r2, r2, #1
 80068de:	601a      	str	r2, [r3, #0]
}
 80068e0:	2000      	movs	r0, #0
 80068e2:	bd10      	pop	{r4, pc}
 80068e4:	40010000 	.word	0x40010000
=======
 8001a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a2c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a2e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a30:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8001bd0 <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a34:	4a64      	ldr	r2, [pc, #400]	; (8001bc8 <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a36:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8001a38:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a3c:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a3e:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001a40:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a44:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 8001a48:	42b7      	cmp	r7, r6
 8001a4a:	f040 80ad 	bne.w	8001ba8 <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a4e:	684c      	ldr	r4, [r1, #4]
 8001a50:	f024 0a10 	bic.w	sl, r4, #16
 8001a54:	f1ba 0f02 	cmp.w	sl, #2
 8001a58:	d116      	bne.n	8001a88 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 8001a5a:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8001a5e:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a62:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001a66:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a6a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001a6e:	f04f 0e0f 	mov.w	lr, #15
 8001a72:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001a76:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a7a:	690d      	ldr	r5, [r1, #16]
 8001a7c:	fa05 f50b 	lsl.w	r5, r5, fp
 8001a80:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001a84:	f8cc 5020 	str.w	r5, [ip, #32]
 8001a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a8c:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001a8e:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a92:	fa05 f50c 	lsl.w	r5, r5, ip
 8001a96:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a98:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a9c:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aa0:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001aa4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aa8:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001aac:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ab0:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 8001ab2:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ab6:	d815      	bhi.n	8001ae4 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 8001ab8:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001abc:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ac0:	68cd      	ldr	r5, [r1, #12]
 8001ac2:	fa05 fa0c 	lsl.w	sl, r5, ip
 8001ac6:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 8001aca:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8001ace:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ad2:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ad6:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 8001ada:	fa0e fe03 	lsl.w	lr, lr, r3
 8001ade:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 8001ae2:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001ae4:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ae6:	9d00      	ldr	r5, [sp, #0]
 8001ae8:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aea:	688f      	ldr	r7, [r1, #8]
 8001aec:	fa07 f70c 	lsl.w	r7, r7, ip
 8001af0:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001af2:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001af4:	00e5      	lsls	r5, r4, #3
 8001af6:	d557      	bpl.n	8001ba8 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af8:	f04f 0b00 	mov.w	fp, #0
 8001afc:	f8cd b00c 	str.w	fp, [sp, #12]
 8001b00:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b04:	4d31      	ldr	r5, [pc, #196]	; (8001bcc <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b06:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001b0a:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001b0e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001b12:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001b16:	9703      	str	r7, [sp, #12]
 8001b18:	9f03      	ldr	r7, [sp, #12]
 8001b1a:	f023 0703 	bic.w	r7, r3, #3
 8001b1e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001b22:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b26:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001b2a:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b2e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001b32:	f04f 0e0f 	mov.w	lr, #15
 8001b36:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b3a:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b3c:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b40:	d039      	beq.n	8001bb6 <HAL_GPIO_Init+0x18e>
 8001b42:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b46:	42a8      	cmp	r0, r5
 8001b48:	d037      	beq.n	8001bba <HAL_GPIO_Init+0x192>
 8001b4a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b4e:	42a8      	cmp	r0, r5
 8001b50:	d035      	beq.n	8001bbe <HAL_GPIO_Init+0x196>
 8001b52:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b56:	42a8      	cmp	r0, r5
 8001b58:	d033      	beq.n	8001bc2 <HAL_GPIO_Init+0x19a>
 8001b5a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b5e:	42a8      	cmp	r0, r5
 8001b60:	bf14      	ite	ne
 8001b62:	2507      	movne	r5, #7
 8001b64:	2504      	moveq	r5, #4
 8001b66:	fa05 f50c 	lsl.w	r5, r5, ip
 8001b6a:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b6e:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001b70:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001b72:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b74:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001b78:	bf0c      	ite	eq
 8001b7a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001b7c:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001b7e:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8001b80:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b82:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001b86:	bf0c      	ite	eq
 8001b88:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001b8a:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001b8c:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b8e:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b90:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001b94:	bf0c      	ite	eq
 8001b96:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001b98:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001b9a:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8001b9c:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b9e:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001ba0:	bf54      	ite	pl
 8001ba2:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001ba4:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001ba6:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ba8:	3301      	adds	r3, #1
 8001baa:	2b10      	cmp	r3, #16
 8001bac:	f47f af47 	bne.w	8001a3e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001bb0:	b005      	add	sp, #20
 8001bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bb6:	465d      	mov	r5, fp
 8001bb8:	e7d5      	b.n	8001b66 <HAL_GPIO_Init+0x13e>
 8001bba:	2501      	movs	r5, #1
 8001bbc:	e7d3      	b.n	8001b66 <HAL_GPIO_Init+0x13e>
 8001bbe:	2502      	movs	r5, #2
 8001bc0:	e7d1      	b.n	8001b66 <HAL_GPIO_Init+0x13e>
 8001bc2:	2503      	movs	r5, #3
 8001bc4:	e7cf      	b.n	8001b66 <HAL_GPIO_Init+0x13e>
 8001bc6:	bf00      	nop
 8001bc8:	40013c00 	.word	0x40013c00
 8001bcc:	40020000 	.word	0x40020000
 8001bd0:	40023800 	.word	0x40023800

08001bd4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bd4:	6903      	ldr	r3, [r0, #16]
 8001bd6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001bd8:	bf14      	ite	ne
 8001bda:	2001      	movne	r0, #1
 8001bdc:	2000      	moveq	r0, #0
 8001bde:	4770      	bx	lr

08001be0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001be0:	b10a      	cbz	r2, 8001be6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001be2:	6181      	str	r1, [r0, #24]
 8001be4:	4770      	bx	lr
 8001be6:	0409      	lsls	r1, r1, #16
 8001be8:	e7fb      	b.n	8001be2 <HAL_GPIO_WritePin+0x2>
	...
>>>>>>> Stashed changes

080068e8 <HAL_TIM_PWM_Stop>:
{
 80068e8:	b510      	push	{r4, lr}
 80068ea:	4604      	mov	r4, r0
	TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80068ec:	2200      	movs	r2, #0
 80068ee:	6800      	ldr	r0, [r0, #0]
 80068f0:	f7ff ffd8 	bl	80068a4 <TIM_CCxChannelCmd>
	if (IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET) {
 80068f4:	6823      	ldr	r3, [r4, #0]
 80068f6:	4a12      	ldr	r2, [pc, #72]	; (8006940 <HAL_TIM_PWM_Stop+0x58>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d10d      	bne.n	8006918 <HAL_TIM_PWM_Stop+0x30>
		__HAL_TIM_MOE_DISABLE(htim);
 80068fc:	6a19      	ldr	r1, [r3, #32]
 80068fe:	f241 1211 	movw	r2, #4369	; 0x1111
 8006902:	4211      	tst	r1, r2
 8006904:	d108      	bne.n	8006918 <HAL_TIM_PWM_Stop+0x30>
 8006906:	6a19      	ldr	r1, [r3, #32]
 8006908:	f240 4244 	movw	r2, #1092	; 0x444
 800690c:	4211      	tst	r1, r2
 800690e:	bf02      	ittt	eq
 8006910:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8006912:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 8006916:	645a      	streq	r2, [r3, #68]	; 0x44
	__HAL_TIM_DISABLE(htim);
 8006918:	6a19      	ldr	r1, [r3, #32]
 800691a:	f241 1211 	movw	r2, #4369	; 0x1111
 800691e:	4211      	tst	r1, r2
 8006920:	d108      	bne.n	8006934 <HAL_TIM_PWM_Stop+0x4c>
 8006922:	6a19      	ldr	r1, [r3, #32]
 8006924:	f240 4244 	movw	r2, #1092	; 0x444
 8006928:	4211      	tst	r1, r2
 800692a:	bf02      	ittt	eq
 800692c:	681a      	ldreq	r2, [r3, #0]
 800692e:	f022 0201 	biceq.w	r2, r2, #1
 8006932:	601a      	streq	r2, [r3, #0]
	htim->State = HAL_TIM_STATE_READY;
 8006934:	2301      	movs	r3, #1
 8006936:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 800693a:	2000      	movs	r0, #0
 800693c:	bd10      	pop	{r4, pc}
 800693e:	bf00      	nop
 8006940:	40010000 	.word	0x40010000

08006944 <HAL_TIMEx_MasterConfigSynchronization>:
	/* Check the parameters */
	assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
	assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
	assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

	__HAL_LOCK(htim);
 8006944:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8006948:	2b01      	cmp	r3, #1
{
 800694a:	b510      	push	{r4, lr}
 800694c:	f04f 0302 	mov.w	r3, #2
	__HAL_LOCK(htim);
 8006950:	d018      	beq.n	8006984 <HAL_TIMEx_MasterConfigSynchronization+0x40>

	htim->State = HAL_TIM_STATE_BUSY;
 8006952:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

	/* Reset the MMS Bits */
	htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8006956:	6803      	ldr	r3, [r0, #0]
	/* Select the TRGO source */
	htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8006958:	680c      	ldr	r4, [r1, #0]
	htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800695a:	685a      	ldr	r2, [r3, #4]

	/* Reset the MSM Bit */
	htim->Instance->SMCR &= ~TIM_SMCR_MSM;
	/* Set or Reset the MSM Bit */
	htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800695c:	6849      	ldr	r1, [r1, #4]
	htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800695e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006962:	605a      	str	r2, [r3, #4]
	htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8006964:	685a      	ldr	r2, [r3, #4]
 8006966:	4322      	orrs	r2, r4
 8006968:	605a      	str	r2, [r3, #4]
	htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800696a:	689a      	ldr	r2, [r3, #8]
 800696c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006970:	609a      	str	r2, [r3, #8]
	htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8006972:	689a      	ldr	r2, [r3, #8]
 8006974:	430a      	orrs	r2, r1
 8006976:	609a      	str	r2, [r3, #8]

	htim->State = HAL_TIM_STATE_READY;
 8006978:	2301      	movs	r3, #1
 800697a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

	__HAL_UNLOCK(htim);
 800697e:	2300      	movs	r3, #0
 8006980:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	__HAL_LOCK(htim);
 8006984:	4618      	mov	r0, r3

	return HAL_OK;
}
 8006986:	bd10      	pop	{r4, pc}

08006988 <HAL_TIMEx_CommutationCallback>:
 8006988:	4770      	bx	lr

0800698a <HAL_TIMEx_BreakCallback>:
 * @param  htim pointer to a TIM_HandleTypeDef structure that contains
 *                the configuration information for TIM module.
 * @retval None
 */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800698a:	4770      	bx	lr

0800698c <UART_EndRxTransfer>:
 * @retval None
 */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
	/* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
	CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800698c:	6803      	ldr	r3, [r0, #0]
 800698e:	68da      	ldr	r2, [r3, #12]
 8006990:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006994:	60da      	str	r2, [r3, #12]
	CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006996:	695a      	ldr	r2, [r3, #20]
 8006998:	f022 0201 	bic.w	r2, r2, #1
 800699c:	615a      	str	r2, [r3, #20]

	/* At end of Rx process, restore huart->RxState to Ready */
	huart->RxState = HAL_UART_STATE_READY;
 800699e:	2320      	movs	r3, #32
 80069a0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 80069a4:	4770      	bx	lr
	...

080069a8 <UART_SetConfig>:
 * @param  huart pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
	assert_param(IS_UART_PARITY(huart->Init.Parity));
	assert_param(IS_UART_MODE(huart->Init.Mode));

	/*-------------------------- USART CR2 Configuration -----------------------*/
	tmpreg = huart->Instance->CR2;
 80069ac:	6806      	ldr	r6, [r0, #0]

	/* Clear STOP[13:12] bits */
	tmpreg &= (uint32_t) ~((uint32_t)USART_CR2_STOP);

	/* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
	tmpreg |= (uint32_t)huart->Init.StopBits;
 80069ae:	68c2      	ldr	r2, [r0, #12]
	tmpreg = huart->Instance->CR2;
 80069b0:	6933      	ldr	r3, [r6, #16]
	/* Configure the UART Word Length, Parity and mode:
	   Set the M bits according to huart->Init.WordLength value
	   Set PCE and PS bits according to huart->Init.Parity value
	   Set TE and RE bits according to huart->Init.Mode value
	   Set OVER8 bit according to huart->Init.OverSampling value */
	tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80069b2:	69c1      	ldr	r1, [r0, #28]
	tmpreg &= (uint32_t) ~((uint32_t)USART_CR2_STOP);
 80069b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
	tmpreg |= (uint32_t)huart->Init.StopBits;
 80069b8:	4313      	orrs	r3, r2
	WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80069ba:	6133      	str	r3, [r6, #16]
{
 80069bc:	4604      	mov	r4, r0
	tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80069be:	6883      	ldr	r3, [r0, #8]
 80069c0:	6900      	ldr	r0, [r0, #16]
	tmpreg = huart->Instance->CR1;
 80069c2:	68f2      	ldr	r2, [r6, #12]
	tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80069c4:	4303      	orrs	r3, r0
 80069c6:	6960      	ldr	r0, [r4, #20]
	tmpreg &= (uint32_t) ~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80069c8:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
	tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80069cc:	4303      	orrs	r3, r0
	tmpreg &= (uint32_t) ~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80069ce:	f022 020c 	bic.w	r2, r2, #12
	tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80069d2:	430b      	orrs	r3, r1
 80069d4:	4313      	orrs	r3, r2

	/* Write to USART CR1 */
	WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80069d6:	60f3      	str	r3, [r6, #12]

	/*-------------------------- USART CR3 Configuration -----------------------*/
	tmpreg = huart->Instance->CR3;
 80069d8:	6973      	ldr	r3, [r6, #20]

	/* Clear CTSE and RTSE bits */
	tmpreg &= (uint32_t) ~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));

	/* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
	tmpreg |= huart->Init.HwFlowCtl;
 80069da:	69a2      	ldr	r2, [r4, #24]
	tmpreg &= (uint32_t) ~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80069dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmpreg |= huart->Init.HwFlowCtl;
 80069e0:	4313      	orrs	r3, r2

	/* Write to USART CR3 */
	WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);

	/* Check the Over Sampling */
	if (huart->Init.OverSampling == UART_OVERSAMPLING_8) {
 80069e2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
	WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80069e6:	6173      	str	r3, [r6, #20]
 80069e8:	4b7a      	ldr	r3, [pc, #488]	; (8006bd4 <UART_SetConfig+0x22c>)
	if (huart->Init.OverSampling == UART_OVERSAMPLING_8) {
 80069ea:	d17c      	bne.n	8006ae6 <UART_SetConfig+0x13e>
		/*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
		if ((huart->Instance == USART1) || (huart->Instance == USART6)) {
 80069ec:	429e      	cmp	r6, r3
 80069ee:	d003      	beq.n	80069f8 <UART_SetConfig+0x50>
 80069f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069f4:	429e      	cmp	r6, r3
 80069f6:	d144      	bne.n	8006a82 <UART_SetConfig+0xda>
			huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80069f8:	f7ff fc42 	bl	8006280 <HAL_RCC_GetPCLK2Freq>
 80069fc:	2519      	movs	r5, #25
 80069fe:	fb05 f300 	mul.w	r3, r5, r0
 8006a02:	6860      	ldr	r0, [r4, #4]
 8006a04:	f04f 0964 	mov.w	r9, #100	; 0x64
 8006a08:	0040      	lsls	r0, r0, #1
 8006a0a:	fbb3 f3f0 	udiv	r3, r3, r0
 8006a0e:	fbb3 f3f9 	udiv	r3, r3, r9
 8006a12:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006a16:	f7ff fc33 	bl	8006280 <HAL_RCC_GetPCLK2Freq>
 8006a1a:	6863      	ldr	r3, [r4, #4]
 8006a1c:	4368      	muls	r0, r5
 8006a1e:	005b      	lsls	r3, r3, #1
 8006a20:	fbb0 f7f3 	udiv	r7, r0, r3
 8006a24:	f7ff fc2c 	bl	8006280 <HAL_RCC_GetPCLK2Freq>
 8006a28:	6863      	ldr	r3, [r4, #4]
 8006a2a:	4368      	muls	r0, r5
 8006a2c:	005b      	lsls	r3, r3, #1
 8006a2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a32:	fbb3 f3f9 	udiv	r3, r3, r9
 8006a36:	fb09 7313 	mls	r3, r9, r3, r7
 8006a3a:	00db      	lsls	r3, r3, #3
 8006a3c:	3332      	adds	r3, #50	; 0x32
 8006a3e:	fbb3 f3f9 	udiv	r3, r3, r9
 8006a42:	005b      	lsls	r3, r3, #1
 8006a44:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8006a48:	f7ff fc1a 	bl	8006280 <HAL_RCC_GetPCLK2Freq>
 8006a4c:	6862      	ldr	r2, [r4, #4]
 8006a4e:	4368      	muls	r0, r5
 8006a50:	0052      	lsls	r2, r2, #1
 8006a52:	fbb0 faf2 	udiv	sl, r0, r2
 8006a56:	f7ff fc13 	bl	8006280 <HAL_RCC_GetPCLK2Freq>
		if (huart->Instance == USART1) {
			huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
		}
#endif /* USART6 */
		else{
			huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006a5a:	6863      	ldr	r3, [r4, #4]
 8006a5c:	4368      	muls	r0, r5
 8006a5e:	005b      	lsls	r3, r3, #1
 8006a60:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a64:	fbb3 f3f9 	udiv	r3, r3, r9
 8006a68:	fb09 a313 	mls	r3, r9, r3, sl
 8006a6c:	00db      	lsls	r3, r3, #3
 8006a6e:	3332      	adds	r3, #50	; 0x32
 8006a70:	fbb3 f3f9 	udiv	r3, r3, r9
 8006a74:	f003 0307 	and.w	r3, r3, #7
 8006a78:	4443      	add	r3, r8
		if (huart->Instance == USART1) {
			huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
		}
#endif /* USART6 */
		else{
			huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006a7a:	443b      	add	r3, r7
 8006a7c:	60b3      	str	r3, [r6, #8]
 8006a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006a82:	f7ff fbed 	bl	8006260 <HAL_RCC_GetPCLK1Freq>
 8006a86:	2519      	movs	r5, #25
 8006a88:	fb05 f300 	mul.w	r3, r5, r0
 8006a8c:	6860      	ldr	r0, [r4, #4]
 8006a8e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8006a92:	0040      	lsls	r0, r0, #1
 8006a94:	fbb3 f3f0 	udiv	r3, r3, r0
 8006a98:	fbb3 f3f9 	udiv	r3, r3, r9
 8006a9c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006aa0:	f7ff fbde 	bl	8006260 <HAL_RCC_GetPCLK1Freq>
 8006aa4:	6863      	ldr	r3, [r4, #4]
 8006aa6:	4368      	muls	r0, r5
 8006aa8:	005b      	lsls	r3, r3, #1
 8006aaa:	fbb0 f7f3 	udiv	r7, r0, r3
 8006aae:	f7ff fbd7 	bl	8006260 <HAL_RCC_GetPCLK1Freq>
 8006ab2:	6863      	ldr	r3, [r4, #4]
 8006ab4:	4368      	muls	r0, r5
 8006ab6:	005b      	lsls	r3, r3, #1
 8006ab8:	fbb0 f3f3 	udiv	r3, r0, r3
 8006abc:	fbb3 f3f9 	udiv	r3, r3, r9
 8006ac0:	fb09 7313 	mls	r3, r9, r3, r7
 8006ac4:	00db      	lsls	r3, r3, #3
 8006ac6:	3332      	adds	r3, #50	; 0x32
 8006ac8:	fbb3 f3f9 	udiv	r3, r3, r9
 8006acc:	005b      	lsls	r3, r3, #1
 8006ace:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8006ad2:	f7ff fbc5 	bl	8006260 <HAL_RCC_GetPCLK1Freq>
 8006ad6:	6862      	ldr	r2, [r4, #4]
 8006ad8:	4368      	muls	r0, r5
 8006ada:	0052      	lsls	r2, r2, #1
 8006adc:	fbb0 faf2 	udiv	sl, r0, r2
 8006ae0:	f7ff fbbe 	bl	8006260 <HAL_RCC_GetPCLK1Freq>
 8006ae4:	e7b9      	b.n	8006a5a <UART_SetConfig+0xb2>
		if ((huart->Instance == USART1) || (huart->Instance == USART6)) {
 8006ae6:	429e      	cmp	r6, r3
 8006ae8:	d002      	beq.n	8006af0 <UART_SetConfig+0x148>
 8006aea:	4b3b      	ldr	r3, [pc, #236]	; (8006bd8 <UART_SetConfig+0x230>)
 8006aec:	429e      	cmp	r6, r3
 8006aee:	d140      	bne.n	8006b72 <UART_SetConfig+0x1ca>
			huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006af0:	f7ff fbc6 	bl	8006280 <HAL_RCC_GetPCLK2Freq>
 8006af4:	6867      	ldr	r7, [r4, #4]
 8006af6:	2519      	movs	r5, #25
 8006af8:	f04f 0964 	mov.w	r9, #100	; 0x64
 8006afc:	fb05 f300 	mul.w	r3, r5, r0
 8006b00:	00bf      	lsls	r7, r7, #2
 8006b02:	fbb3 f3f7 	udiv	r3, r3, r7
 8006b06:	fbb3 f3f9 	udiv	r3, r3, r9
 8006b0a:	011f      	lsls	r7, r3, #4
 8006b0c:	f7ff fbb8 	bl	8006280 <HAL_RCC_GetPCLK2Freq>
 8006b10:	6863      	ldr	r3, [r4, #4]
 8006b12:	4368      	muls	r0, r5
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	fbb0 f8f3 	udiv	r8, r0, r3
 8006b1a:	f7ff fbb1 	bl	8006280 <HAL_RCC_GetPCLK2Freq>
 8006b1e:	6863      	ldr	r3, [r4, #4]
 8006b20:	4368      	muls	r0, r5
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b28:	fbb3 f3f9 	udiv	r3, r3, r9
 8006b2c:	fb09 8313 	mls	r3, r9, r3, r8
 8006b30:	011b      	lsls	r3, r3, #4
 8006b32:	3332      	adds	r3, #50	; 0x32
 8006b34:	fbb3 f3f9 	udiv	r3, r3, r9
 8006b38:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8006b3c:	f7ff fba0 	bl	8006280 <HAL_RCC_GetPCLK2Freq>
 8006b40:	6862      	ldr	r2, [r4, #4]
 8006b42:	4368      	muls	r0, r5
 8006b44:	0092      	lsls	r2, r2, #2
 8006b46:	fbb0 faf2 	udiv	sl, r0, r2
 8006b4a:	f7ff fb99 	bl	8006280 <HAL_RCC_GetPCLK2Freq>
			huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006b4e:	6863      	ldr	r3, [r4, #4]
 8006b50:	4368      	muls	r0, r5
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b58:	fbb3 f3f9 	udiv	r3, r3, r9
 8006b5c:	fb09 a313 	mls	r3, r9, r3, sl
 8006b60:	011b      	lsls	r3, r3, #4
 8006b62:	3332      	adds	r3, #50	; 0x32
 8006b64:	fbb3 f3f9 	udiv	r3, r3, r9
 8006b68:	f003 030f 	and.w	r3, r3, #15
 8006b6c:	ea43 0308 	orr.w	r3, r3, r8
 8006b70:	e783      	b.n	8006a7a <UART_SetConfig+0xd2>
 8006b72:	f7ff fb75 	bl	8006260 <HAL_RCC_GetPCLK1Freq>
 8006b76:	6867      	ldr	r7, [r4, #4]
 8006b78:	2519      	movs	r5, #25
 8006b7a:	f04f 0964 	mov.w	r9, #100	; 0x64
 8006b7e:	fb05 f300 	mul.w	r3, r5, r0
 8006b82:	00bf      	lsls	r7, r7, #2
 8006b84:	fbb3 f3f7 	udiv	r3, r3, r7
 8006b88:	fbb3 f3f9 	udiv	r3, r3, r9
 8006b8c:	011f      	lsls	r7, r3, #4
 8006b8e:	f7ff fb67 	bl	8006260 <HAL_RCC_GetPCLK1Freq>
 8006b92:	6863      	ldr	r3, [r4, #4]
 8006b94:	4368      	muls	r0, r5
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	fbb0 f8f3 	udiv	r8, r0, r3
 8006b9c:	f7ff fb60 	bl	8006260 <HAL_RCC_GetPCLK1Freq>
 8006ba0:	6863      	ldr	r3, [r4, #4]
 8006ba2:	4368      	muls	r0, r5
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	fbb0 f3f3 	udiv	r3, r0, r3
 8006baa:	fbb3 f3f9 	udiv	r3, r3, r9
 8006bae:	fb09 8313 	mls	r3, r9, r3, r8
 8006bb2:	011b      	lsls	r3, r3, #4
 8006bb4:	3332      	adds	r3, #50	; 0x32
 8006bb6:	fbb3 f3f9 	udiv	r3, r3, r9
 8006bba:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8006bbe:	f7ff fb4f 	bl	8006260 <HAL_RCC_GetPCLK1Freq>
 8006bc2:	6862      	ldr	r2, [r4, #4]
 8006bc4:	4368      	muls	r0, r5
 8006bc6:	0092      	lsls	r2, r2, #2
 8006bc8:	fbb0 faf2 	udiv	sl, r0, r2
 8006bcc:	f7ff fb48 	bl	8006260 <HAL_RCC_GetPCLK1Freq>
 8006bd0:	e7bd      	b.n	8006b4e <UART_SetConfig+0x1a6>
 8006bd2:	bf00      	nop
 8006bd4:	40011000 	.word	0x40011000
 8006bd8:	40011400 	.word	0x40011400

08006bdc <HAL_MultiProcessor_Init>:
{
 8006bdc:	b570      	push	{r4, r5, r6, lr}
 8006bde:	460d      	mov	r5, r1
 8006be0:	4616      	mov	r6, r2
	if (huart == NULL) {
 8006be2:	4604      	mov	r4, r0
 8006be4:	2800      	cmp	r0, #0
 8006be6:	d036      	beq.n	8006c56 <HAL_MultiProcessor_Init+0x7a>
	if (huart->gState == HAL_UART_STATE_RESET) {
 8006be8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8006bec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006bf0:	b91b      	cbnz	r3, 8006bfa <HAL_MultiProcessor_Init+0x1e>
		huart->Lock = HAL_UNLOCKED;
 8006bf2:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
		HAL_UART_MspInit(huart);
 8006bf6:	f001 f931 	bl	8007e5c <HAL_UART_MspInit>
	__HAL_UART_DISABLE(huart);
 8006bfa:	6822      	ldr	r2, [r4, #0]
	huart->gState = HAL_UART_STATE_BUSY;
 8006bfc:	2324      	movs	r3, #36	; 0x24
 8006bfe:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	__HAL_UART_DISABLE(huart);
 8006c02:	68d3      	ldr	r3, [r2, #12]
 8006c04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c08:	60d3      	str	r3, [r2, #12]
	UART_SetConfig(huart);
 8006c0a:	4620      	mov	r0, r4
 8006c0c:	f7ff fecc 	bl	80069a8 <UART_SetConfig>
	CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c10:	6823      	ldr	r3, [r4, #0]
 8006c12:	691a      	ldr	r2, [r3, #16]
 8006c14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c18:	611a      	str	r2, [r3, #16]
	CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c1a:	695a      	ldr	r2, [r3, #20]
 8006c1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c20:	615a      	str	r2, [r3, #20]
	CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 8006c22:	691a      	ldr	r2, [r3, #16]
 8006c24:	f022 020f 	bic.w	r2, r2, #15
 8006c28:	611a      	str	r2, [r3, #16]
	SET_BIT(huart->Instance->CR2, Address);
 8006c2a:	691a      	ldr	r2, [r3, #16]
 8006c2c:	4315      	orrs	r5, r2
 8006c2e:	611d      	str	r5, [r3, #16]
	CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 8006c30:	68da      	ldr	r2, [r3, #12]
 8006c32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c36:	60da      	str	r2, [r3, #12]
	SET_BIT(huart->Instance->CR1, WakeUpMethod);
 8006c38:	68da      	ldr	r2, [r3, #12]
 8006c3a:	4332      	orrs	r2, r6
 8006c3c:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE(huart);
 8006c3e:	68da      	ldr	r2, [r3, #12]
 8006c40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c44:	60da      	str	r2, [r3, #12]
	huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c46:	2000      	movs	r0, #0
	huart->gState = HAL_UART_STATE_READY;
 8006c48:	2320      	movs	r3, #32
	huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c4a:	63e0      	str	r0, [r4, #60]	; 0x3c
	huart->gState = HAL_UART_STATE_READY;
 8006c4c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	huart->RxState = HAL_UART_STATE_READY;
 8006c50:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	return HAL_OK;
 8006c54:	bd70      	pop	{r4, r5, r6, pc}
		return HAL_ERROR;
 8006c56:	2001      	movs	r0, #1
}
 8006c58:	bd70      	pop	{r4, r5, r6, pc}
	...

08006c5c <HAL_UART_Transmit_DMA>:
{
 8006c5c:	b538      	push	{r3, r4, r5, lr}
 8006c5e:	4604      	mov	r4, r0
 8006c60:	4613      	mov	r3, r2
	if (huart->gState == HAL_UART_STATE_READY) {
 8006c62:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8006c66:	2a20      	cmp	r2, #32
 8006c68:	d12a      	bne.n	8006cc0 <HAL_UART_Transmit_DMA+0x64>
		if ((pData == NULL) || (Size == 0)) {
 8006c6a:	b339      	cbz	r1, 8006cbc <HAL_UART_Transmit_DMA+0x60>
 8006c6c:	b333      	cbz	r3, 8006cbc <HAL_UART_Transmit_DMA+0x60>
		__HAL_LOCK(huart);
 8006c6e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8006c72:	2a01      	cmp	r2, #1
 8006c74:	d024      	beq.n	8006cc0 <HAL_UART_Transmit_DMA+0x64>
 8006c76:	2201      	movs	r2, #1
 8006c78:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
		huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006c7c:	6b20      	ldr	r0, [r4, #48]	; 0x30
		huart->TxXferCount = Size;
 8006c7e:	84e3      	strh	r3, [r4, #38]	; 0x26
		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c80:	2500      	movs	r5, #0
		huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c82:	2221      	movs	r2, #33	; 0x21
		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c84:	63e5      	str	r5, [r4, #60]	; 0x3c
		huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c86:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
		huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006c8a:	4a0e      	ldr	r2, [pc, #56]	; (8006cc4 <HAL_UART_Transmit_DMA+0x68>)
		huart->TxXferSize = Size;
 8006c8c:	84a3      	strh	r3, [r4, #36]	; 0x24
		huart->pTxBuffPtr = pData;
 8006c8e:	6221      	str	r1, [r4, #32]
		huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006c90:	63c2      	str	r2, [r0, #60]	; 0x3c
		huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006c92:	4a0d      	ldr	r2, [pc, #52]	; (8006cc8 <HAL_UART_Transmit_DMA+0x6c>)
 8006c94:	6402      	str	r2, [r0, #64]	; 0x40
		huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006c96:	4a0d      	ldr	r2, [pc, #52]	; (8006ccc <HAL_UART_Transmit_DMA+0x70>)
 8006c98:	64c2      	str	r2, [r0, #76]	; 0x4c
		HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006c9a:	6822      	ldr	r2, [r4, #0]
		huart->hdmatx->XferAbortCallback = NULL;
 8006c9c:	6505      	str	r5, [r0, #80]	; 0x50
		HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006c9e:	3204      	adds	r2, #4
 8006ca0:	f7fd fe2a 	bl	80048f8 <HAL_DMA_Start_IT>
		__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006ca4:	6823      	ldr	r3, [r4, #0]
 8006ca6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006caa:	601a      	str	r2, [r3, #0]
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006cac:	695a      	ldr	r2, [r3, #20]
		__HAL_UNLOCK(huart);
 8006cae:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006cb2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006cb6:	615a      	str	r2, [r3, #20]
		return HAL_OK;
 8006cb8:	4628      	mov	r0, r5
 8006cba:	bd38      	pop	{r3, r4, r5, pc}
			return HAL_ERROR;
 8006cbc:	2001      	movs	r0, #1
 8006cbe:	bd38      	pop	{r3, r4, r5, pc}
		return HAL_BUSY;
 8006cc0:	2002      	movs	r0, #2
}
 8006cc2:	bd38      	pop	{r3, r4, r5, pc}
 8006cc4:	08006d61 	.word	0x08006d61
 8006cc8:	08006d8f 	.word	0x08006d8f
 8006ccc:	08006e53 	.word	0x08006e53

08006cd0 <HAL_UART_Receive_DMA>:
{
 8006cd0:	4613      	mov	r3, r2
	if (huart->RxState == HAL_UART_STATE_READY) {
 8006cd2:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 8006cd6:	2a20      	cmp	r2, #32
{
 8006cd8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006cda:	4605      	mov	r5, r0
	if (huart->RxState == HAL_UART_STATE_READY) {
 8006cdc:	d138      	bne.n	8006d50 <HAL_UART_Receive_DMA+0x80>
		if ((pData == NULL) || (Size == 0)) {
 8006cde:	2900      	cmp	r1, #0
 8006ce0:	d034      	beq.n	8006d4c <HAL_UART_Receive_DMA+0x7c>
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d032      	beq.n	8006d4c <HAL_UART_Receive_DMA+0x7c>
		__HAL_LOCK(huart);
 8006ce6:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8006cea:	2a01      	cmp	r2, #1
 8006cec:	d030      	beq.n	8006d50 <HAL_UART_Receive_DMA+0x80>
 8006cee:	2201      	movs	r2, #1
		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cf0:	2400      	movs	r4, #0
		__HAL_LOCK(huart);
 8006cf2:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006cf6:	2222      	movs	r2, #34	; 0x22
		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cf8:	63c4      	str	r4, [r0, #60]	; 0x3c
		huart->pRxBuffPtr = pData;
 8006cfa:	6281      	str	r1, [r0, #40]	; 0x28
		huart->RxXferSize = Size;
 8006cfc:	8583      	strh	r3, [r0, #44]	; 0x2c
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006cfe:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
		huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006d02:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8006d04:	4a13      	ldr	r2, [pc, #76]	; (8006d54 <HAL_UART_Receive_DMA+0x84>)
 8006d06:	63c2      	str	r2, [r0, #60]	; 0x3c
		HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8006d08:	682e      	ldr	r6, [r5, #0]
		huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006d0a:	4a13      	ldr	r2, [pc, #76]	; (8006d58 <HAL_UART_Receive_DMA+0x88>)
 8006d0c:	6402      	str	r2, [r0, #64]	; 0x40
		huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006d0e:	4a13      	ldr	r2, [pc, #76]	; (8006d5c <HAL_UART_Receive_DMA+0x8c>)
 8006d10:	64c2      	str	r2, [r0, #76]	; 0x4c
		huart->hdmarx->XferAbortCallback = NULL;
 8006d12:	6504      	str	r4, [r0, #80]	; 0x50
		HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8006d14:	460a      	mov	r2, r1
 8006d16:	1d31      	adds	r1, r6, #4
 8006d18:	f7fd fdee 	bl	80048f8 <HAL_DMA_Start_IT>
		__HAL_UART_CLEAR_OREFLAG(huart);
 8006d1c:	682b      	ldr	r3, [r5, #0]
 8006d1e:	9401      	str	r4, [sp, #4]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	9201      	str	r2, [sp, #4]
 8006d24:	685a      	ldr	r2, [r3, #4]
 8006d26:	9201      	str	r2, [sp, #4]
 8006d28:	9a01      	ldr	r2, [sp, #4]
		SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d2a:	68da      	ldr	r2, [r3, #12]
		__HAL_UNLOCK(huart);
 8006d2c:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
		SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d34:	60da      	str	r2, [r3, #12]
		SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d36:	695a      	ldr	r2, [r3, #20]
 8006d38:	f042 0201 	orr.w	r2, r2, #1
 8006d3c:	615a      	str	r2, [r3, #20]
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d3e:	695a      	ldr	r2, [r3, #20]
 8006d40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d44:	615a      	str	r2, [r3, #20]
		return HAL_OK;
 8006d46:	4620      	mov	r0, r4
}
 8006d48:	b002      	add	sp, #8
 8006d4a:	bd70      	pop	{r4, r5, r6, pc}
			return HAL_ERROR;
 8006d4c:	2001      	movs	r0, #1
 8006d4e:	e7fb      	b.n	8006d48 <HAL_UART_Receive_DMA+0x78>
		return HAL_BUSY;
 8006d50:	2002      	movs	r0, #2
 8006d52:	e7f9      	b.n	8006d48 <HAL_UART_Receive_DMA+0x78>
 8006d54:	08006d99 	.word	0x08006d99
 8006d58:	08006e47 	.word	0x08006e47
 8006d5c:	08006e53 	.word	0x08006e53

08006d60 <UART_DMATransmitCplt>:
{
 8006d60:	b508      	push	{r3, lr}
	if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U) {
 8006d62:	6803      	ldr	r3, [r0, #0]
	UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006d64:	6b82      	ldr	r2, [r0, #56]	; 0x38
	if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U) {
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8006d6c:	d10a      	bne.n	8006d84 <UART_DMATransmitCplt+0x24>
		huart->TxXferCount = 0U;
 8006d6e:	84d3      	strh	r3, [r2, #38]	; 0x26
		CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006d70:	6813      	ldr	r3, [r2, #0]
 8006d72:	695a      	ldr	r2, [r3, #20]
 8006d74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d78:	615a      	str	r2, [r3, #20]
		SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d7a:	68da      	ldr	r2, [r3, #12]
 8006d7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d80:	60da      	str	r2, [r3, #12]
 8006d82:	bd08      	pop	{r3, pc}
		HAL_UART_TxCpltCallback(huart);
 8006d84:	4610      	mov	r0, r2
 8006d86:	f000 f9ed 	bl	8007164 <HAL_UART_TxCpltCallback>
 8006d8a:	bd08      	pop	{r3, pc}

08006d8c <HAL_UART_TxHalfCpltCallback>:
 8006d8c:	4770      	bx	lr

08006d8e <UART_DMATxHalfCplt>:
{
 8006d8e:	b508      	push	{r3, lr}
	HAL_UART_TxHalfCpltCallback(huart);
 8006d90:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8006d92:	f7ff fffb 	bl	8006d8c <HAL_UART_TxHalfCpltCallback>
 8006d96:	bd08      	pop	{r3, pc}

08006d98 <UART_DMAReceiveCplt>:
{
 8006d98:	b508      	push	{r3, lr}
	if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U) {
 8006d9a:	6803      	ldr	r3, [r0, #0]
	UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006d9c:	6b82      	ldr	r2, [r0, #56]	; 0x38
	if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U) {
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8006da4:	d110      	bne.n	8006dc8 <UART_DMAReceiveCplt+0x30>
		huart->RxXferCount = 0U;
 8006da6:	85d3      	strh	r3, [r2, #46]	; 0x2e
		CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006da8:	6813      	ldr	r3, [r2, #0]
 8006daa:	68d9      	ldr	r1, [r3, #12]
 8006dac:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8006db0:	60d9      	str	r1, [r3, #12]
		CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006db2:	6959      	ldr	r1, [r3, #20]
 8006db4:	f021 0101 	bic.w	r1, r1, #1
 8006db8:	6159      	str	r1, [r3, #20]
		CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dba:	6959      	ldr	r1, [r3, #20]
 8006dbc:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8006dc0:	6159      	str	r1, [r3, #20]
		huart->RxState = HAL_UART_STATE_READY;
 8006dc2:	2320      	movs	r3, #32
 8006dc4:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
	HAL_UART_RxCpltCallback(huart);
 8006dc8:	4610      	mov	r0, r2
 8006dca:	f000 f9e1 	bl	8007190 <HAL_UART_RxCpltCallback>
 8006dce:	bd08      	pop	{r3, pc}

08006dd0 <UART_Receive_IT>:
	if (huart->RxState == HAL_UART_STATE_BUSY_RX) {
 8006dd0:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8006dd4:	2b22      	cmp	r3, #34	; 0x22
{
 8006dd6:	b510      	push	{r4, lr}
	if (huart->RxState == HAL_UART_STATE_BUSY_RX) {
 8006dd8:	d132      	bne.n	8006e40 <UART_Receive_IT+0x70>
		if (huart->Init.WordLength == UART_WORDLENGTH_9B) {
 8006dda:	6883      	ldr	r3, [r0, #8]
 8006ddc:	6901      	ldr	r1, [r0, #16]
 8006dde:	6802      	ldr	r2, [r0, #0]
 8006de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006de4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006de6:	d11f      	bne.n	8006e28 <UART_Receive_IT+0x58>
				*tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006de8:	6852      	ldr	r2, [r2, #4]
			if (huart->Init.Parity == UART_PARITY_NONE) {
 8006dea:	b9c9      	cbnz	r1, 8006e20 <UART_Receive_IT+0x50>
				*tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006dec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006df0:	f823 2b02 	strh.w	r2, [r3], #2
				huart->pRxBuffPtr += 1U;
 8006df4:	6283      	str	r3, [r0, #40]	; 0x28
		if (--huart->RxXferCount == 0U) {
 8006df6:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8006df8:	3c01      	subs	r4, #1
 8006dfa:	b2a4      	uxth	r4, r4
 8006dfc:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8006dfe:	b96c      	cbnz	r4, 8006e1c <UART_Receive_IT+0x4c>
			CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e00:	6803      	ldr	r3, [r0, #0]
 8006e02:	68da      	ldr	r2, [r3, #12]
 8006e04:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006e08:	60da      	str	r2, [r3, #12]
			CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e0a:	695a      	ldr	r2, [r3, #20]
 8006e0c:	f022 0201 	bic.w	r2, r2, #1
 8006e10:	615a      	str	r2, [r3, #20]
			huart->RxState = HAL_UART_STATE_READY;
 8006e12:	2320      	movs	r3, #32
 8006e14:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
			HAL_UART_RxCpltCallback(huart);
 8006e18:	f000 f9ba 	bl	8007190 <HAL_UART_RxCpltCallback>
		if (--huart->RxXferCount == 0U) {
 8006e1c:	2000      	movs	r0, #0
}
 8006e1e:	bd10      	pop	{r4, pc}
				*tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006e20:	b2d2      	uxtb	r2, r2
 8006e22:	f823 2b01 	strh.w	r2, [r3], #1
 8006e26:	e7e5      	b.n	8006df4 <UART_Receive_IT+0x24>
			if (huart->Init.Parity == UART_PARITY_NONE) {
 8006e28:	b921      	cbnz	r1, 8006e34 <UART_Receive_IT+0x64>
				*huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e2a:	1c59      	adds	r1, r3, #1
 8006e2c:	6852      	ldr	r2, [r2, #4]
 8006e2e:	6281      	str	r1, [r0, #40]	; 0x28
				*huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e30:	701a      	strb	r2, [r3, #0]
 8006e32:	e7e0      	b.n	8006df6 <UART_Receive_IT+0x26>
 8006e34:	6852      	ldr	r2, [r2, #4]
 8006e36:	1c59      	adds	r1, r3, #1
 8006e38:	6281      	str	r1, [r0, #40]	; 0x28
 8006e3a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006e3e:	e7f7      	b.n	8006e30 <UART_Receive_IT+0x60>
		return HAL_BUSY;
 8006e40:	2002      	movs	r0, #2
 8006e42:	bd10      	pop	{r4, pc}

08006e44 <HAL_UART_RxHalfCpltCallback>:
 8006e44:	4770      	bx	lr

08006e46 <UART_DMARxHalfCplt>:
{
 8006e46:	b508      	push	{r3, lr}
	HAL_UART_RxHalfCpltCallback(huart);
 8006e48:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8006e4a:	f7ff fffb 	bl	8006e44 <HAL_UART_RxHalfCpltCallback>
 8006e4e:	bd08      	pop	{r3, pc}

08006e50 <HAL_UART_ErrorCallback>:
 8006e50:	4770      	bx	lr

08006e52 <UART_DMAError>:
	UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006e52:	6b81      	ldr	r1, [r0, #56]	; 0x38
{
 8006e54:	b508      	push	{r3, lr}
	dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006e56:	680b      	ldr	r3, [r1, #0]
 8006e58:	695a      	ldr	r2, [r3, #20]
	if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest) {
 8006e5a:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8006e5e:	2821      	cmp	r0, #33	; 0x21
 8006e60:	d10a      	bne.n	8006e78 <UART_DMAError+0x26>
 8006e62:	0612      	lsls	r2, r2, #24
 8006e64:	d508      	bpl.n	8006e78 <UART_DMAError+0x26>
		huart->TxXferCount = 0U;
 8006e66:	2200      	movs	r2, #0
 8006e68:	84ca      	strh	r2, [r1, #38]	; 0x26
	CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006e6a:	68da      	ldr	r2, [r3, #12]
 8006e6c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006e70:	60da      	str	r2, [r3, #12]
	huart->gState = HAL_UART_STATE_READY;
 8006e72:	2220      	movs	r2, #32
 8006e74:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
	dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e78:	695b      	ldr	r3, [r3, #20]
	if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest) {
 8006e7a:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8006e7e:	2a22      	cmp	r2, #34	; 0x22
 8006e80:	d106      	bne.n	8006e90 <UART_DMAError+0x3e>
 8006e82:	065b      	lsls	r3, r3, #25
 8006e84:	d504      	bpl.n	8006e90 <UART_DMAError+0x3e>
		huart->RxXferCount = 0U;
 8006e86:	2300      	movs	r3, #0
 8006e88:	85cb      	strh	r3, [r1, #46]	; 0x2e
		UART_EndRxTransfer(huart);
 8006e8a:	4608      	mov	r0, r1
 8006e8c:	f7ff fd7e 	bl	800698c <UART_EndRxTransfer>
	huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006e90:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8006e92:	f043 0310 	orr.w	r3, r3, #16
 8006e96:	63cb      	str	r3, [r1, #60]	; 0x3c
	HAL_UART_ErrorCallback(huart);
 8006e98:	4608      	mov	r0, r1
 8006e9a:	f7ff ffd9 	bl	8006e50 <HAL_UART_ErrorCallback>
 8006e9e:	bd08      	pop	{r3, pc}

08006ea0 <HAL_UART_IRQHandler>:
	uint32_t isrflags = READ_REG(huart->Instance->SR);
 8006ea0:	6803      	ldr	r3, [r0, #0]
 8006ea2:	681a      	ldr	r2, [r3, #0]
	uint32_t cr1its = READ_REG(huart->Instance->CR1);
 8006ea4:	68d9      	ldr	r1, [r3, #12]
{
 8006ea6:	b570      	push	{r4, r5, r6, lr}
	if (errorflags == RESET) {
 8006ea8:	0716      	lsls	r6, r2, #28
{
 8006eaa:	4604      	mov	r4, r0
	uint32_t cr3its = READ_REG(huart->Instance->CR3);
 8006eac:	695d      	ldr	r5, [r3, #20]
	if (errorflags == RESET) {
 8006eae:	d107      	bne.n	8006ec0 <HAL_UART_IRQHandler+0x20>
		if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET)) {
 8006eb0:	0696      	lsls	r6, r2, #26
 8006eb2:	d55a      	bpl.n	8006f6a <HAL_UART_IRQHandler+0xca>
 8006eb4:	068d      	lsls	r5, r1, #26
 8006eb6:	d558      	bpl.n	8006f6a <HAL_UART_IRQHandler+0xca>
}
 8006eb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			UART_Receive_IT(huart);
 8006ebc:	f7ff bf88 	b.w	8006dd0 <UART_Receive_IT>
	if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET))) {
 8006ec0:	f015 0501 	ands.w	r5, r5, #1
 8006ec4:	d102      	bne.n	8006ecc <HAL_UART_IRQHandler+0x2c>
 8006ec6:	f411 7f90 	tst.w	r1, #288	; 0x120
 8006eca:	d04e      	beq.n	8006f6a <HAL_UART_IRQHandler+0xca>
		if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET)) {
 8006ecc:	07d3      	lsls	r3, r2, #31
 8006ece:	d505      	bpl.n	8006edc <HAL_UART_IRQHandler+0x3c>
 8006ed0:	05ce      	lsls	r6, r1, #23
			huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ed2:	bf42      	ittt	mi
 8006ed4:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8006ed6:	f043 0301 	orrmi.w	r3, r3, #1
 8006eda:	63e3      	strmi	r3, [r4, #60]	; 0x3c
		if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET)) {
 8006edc:	0750      	lsls	r0, r2, #29
 8006ede:	d504      	bpl.n	8006eea <HAL_UART_IRQHandler+0x4a>
 8006ee0:	b11d      	cbz	r5, 8006eea <HAL_UART_IRQHandler+0x4a>
			huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ee2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006ee4:	f043 0302 	orr.w	r3, r3, #2
 8006ee8:	63e3      	str	r3, [r4, #60]	; 0x3c
		if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET)) {
 8006eea:	0793      	lsls	r3, r2, #30
 8006eec:	d504      	bpl.n	8006ef8 <HAL_UART_IRQHandler+0x58>
 8006eee:	b11d      	cbz	r5, 8006ef8 <HAL_UART_IRQHandler+0x58>
			huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ef0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006ef2:	f043 0304 	orr.w	r3, r3, #4
 8006ef6:	63e3      	str	r3, [r4, #60]	; 0x3c
		if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET)) {
 8006ef8:	0716      	lsls	r6, r2, #28
 8006efa:	d504      	bpl.n	8006f06 <HAL_UART_IRQHandler+0x66>
 8006efc:	b11d      	cbz	r5, 8006f06 <HAL_UART_IRQHandler+0x66>
			huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006efe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006f00:	f043 0308 	orr.w	r3, r3, #8
 8006f04:	63e3      	str	r3, [r4, #60]	; 0x3c
		if (huart->ErrorCode != HAL_UART_ERROR_NONE) {
 8006f06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d066      	beq.n	8006fda <HAL_UART_IRQHandler+0x13a>
			if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET)) {
 8006f0c:	0695      	lsls	r5, r2, #26
 8006f0e:	d504      	bpl.n	8006f1a <HAL_UART_IRQHandler+0x7a>
 8006f10:	0688      	lsls	r0, r1, #26
 8006f12:	d502      	bpl.n	8006f1a <HAL_UART_IRQHandler+0x7a>
				UART_Receive_IT(huart);
 8006f14:	4620      	mov	r0, r4
 8006f16:	f7ff ff5b 	bl	8006dd0 <UART_Receive_IT>
			dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006f1a:	6823      	ldr	r3, [r4, #0]
 8006f1c:	695d      	ldr	r5, [r3, #20]
			if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest) {
 8006f1e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006f20:	0711      	lsls	r1, r2, #28
				UART_EndRxTransfer(huart);
 8006f22:	4620      	mov	r0, r4
			if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest) {
 8006f24:	d402      	bmi.n	8006f2c <HAL_UART_IRQHandler+0x8c>
 8006f26:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8006f2a:	d01a      	beq.n	8006f62 <HAL_UART_IRQHandler+0xc2>
				UART_EndRxTransfer(huart);
 8006f2c:	f7ff fd2e 	bl	800698c <UART_EndRxTransfer>
				if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8006f30:	6823      	ldr	r3, [r4, #0]
 8006f32:	695a      	ldr	r2, [r3, #20]
 8006f34:	0652      	lsls	r2, r2, #25
 8006f36:	d510      	bpl.n	8006f5a <HAL_UART_IRQHandler+0xba>
					CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f38:	695a      	ldr	r2, [r3, #20]
					if (huart->hdmarx != NULL) {
 8006f3a:	6b60      	ldr	r0, [r4, #52]	; 0x34
					CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f40:	615a      	str	r2, [r3, #20]
					if (huart->hdmarx != NULL) {
 8006f42:	b150      	cbz	r0, 8006f5a <HAL_UART_IRQHandler+0xba>
						huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f44:	4b25      	ldr	r3, [pc, #148]	; (8006fdc <HAL_UART_IRQHandler+0x13c>)
 8006f46:	6503      	str	r3, [r0, #80]	; 0x50
						if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK) {
 8006f48:	f7fd fd14 	bl	8004974 <HAL_DMA_Abort_IT>
 8006f4c:	2800      	cmp	r0, #0
 8006f4e:	d044      	beq.n	8006fda <HAL_UART_IRQHandler+0x13a>
							huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f50:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8006f52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
							huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f56:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006f58:	4718      	bx	r3
						HAL_UART_ErrorCallback(huart);
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	f7ff ff78 	bl	8006e50 <HAL_UART_ErrorCallback>
 8006f60:	bd70      	pop	{r4, r5, r6, pc}
				HAL_UART_ErrorCallback(huart);
 8006f62:	f7ff ff75 	bl	8006e50 <HAL_UART_ErrorCallback>
				huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f66:	63e5      	str	r5, [r4, #60]	; 0x3c
 8006f68:	bd70      	pop	{r4, r5, r6, pc}
	if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET)) {
 8006f6a:	0616      	lsls	r6, r2, #24
 8006f6c:	d527      	bpl.n	8006fbe <HAL_UART_IRQHandler+0x11e>
 8006f6e:	060d      	lsls	r5, r1, #24
 8006f70:	d525      	bpl.n	8006fbe <HAL_UART_IRQHandler+0x11e>
	if (huart->gState == HAL_UART_STATE_BUSY_TX) {
 8006f72:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8006f76:	2a21      	cmp	r2, #33	; 0x21
 8006f78:	d12f      	bne.n	8006fda <HAL_UART_IRQHandler+0x13a>
		if (huart->Init.WordLength == UART_WORDLENGTH_9B) {
 8006f7a:	68a2      	ldr	r2, [r4, #8]
 8006f7c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8006f80:	6a22      	ldr	r2, [r4, #32]
 8006f82:	d117      	bne.n	8006fb4 <HAL_UART_IRQHandler+0x114>
			huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f84:	8811      	ldrh	r1, [r2, #0]
 8006f86:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8006f8a:	6059      	str	r1, [r3, #4]
			if (huart->Init.Parity == UART_PARITY_NONE) {
 8006f8c:	6921      	ldr	r1, [r4, #16]
 8006f8e:	b979      	cbnz	r1, 8006fb0 <HAL_UART_IRQHandler+0x110>
				huart->pTxBuffPtr += 2U;
 8006f90:	3202      	adds	r2, #2
				huart->pTxBuffPtr += 1U;
 8006f92:	6222      	str	r2, [r4, #32]
		if (--huart->TxXferCount == 0U) {
 8006f94:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8006f96:	3a01      	subs	r2, #1
 8006f98:	b292      	uxth	r2, r2
 8006f9a:	84e2      	strh	r2, [r4, #38]	; 0x26
 8006f9c:	b9ea      	cbnz	r2, 8006fda <HAL_UART_IRQHandler+0x13a>
			CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006f9e:	68da      	ldr	r2, [r3, #12]
 8006fa0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fa4:	60da      	str	r2, [r3, #12]
			SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006fa6:	68da      	ldr	r2, [r3, #12]
 8006fa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fac:	60da      	str	r2, [r3, #12]
 8006fae:	bd70      	pop	{r4, r5, r6, pc}
				huart->pTxBuffPtr += 1U;
 8006fb0:	3201      	adds	r2, #1
 8006fb2:	e7ee      	b.n	8006f92 <HAL_UART_IRQHandler+0xf2>
			huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006fb4:	1c51      	adds	r1, r2, #1
 8006fb6:	6221      	str	r1, [r4, #32]
 8006fb8:	7812      	ldrb	r2, [r2, #0]
 8006fba:	605a      	str	r2, [r3, #4]
 8006fbc:	e7ea      	b.n	8006f94 <HAL_UART_IRQHandler+0xf4>
	if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET)) {
 8006fbe:	0650      	lsls	r0, r2, #25
 8006fc0:	d50b      	bpl.n	8006fda <HAL_UART_IRQHandler+0x13a>
 8006fc2:	064a      	lsls	r2, r1, #25
 8006fc4:	d509      	bpl.n	8006fda <HAL_UART_IRQHandler+0x13a>
	CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006fc6:	68da      	ldr	r2, [r3, #12]
 8006fc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fcc:	60da      	str	r2, [r3, #12]
	huart->gState = HAL_UART_STATE_READY;
 8006fce:	2320      	movs	r3, #32
 8006fd0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	HAL_UART_TxCpltCallback(huart);
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	f000 f8c5 	bl	8007164 <HAL_UART_TxCpltCallback>
 8006fda:	bd70      	pop	{r4, r5, r6, pc}
 8006fdc:	08006fe1 	.word	0x08006fe1

08006fe0 <UART_DMAAbortOnError>:
{
 8006fe0:	b508      	push	{r3, lr}
	UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006fe2:	6b80      	ldr	r0, [r0, #56]	; 0x38
	huart->RxXferCount = 0U;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	85c3      	strh	r3, [r0, #46]	; 0x2e
	huart->TxXferCount = 0U;
 8006fe8:	84c3      	strh	r3, [r0, #38]	; 0x26
	HAL_UART_ErrorCallback(huart);
 8006fea:	f7ff ff31 	bl	8006e50 <HAL_UART_ErrorCallback>
 8006fee:	bd08      	pop	{r3, pc}

08006ff0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8006ff0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8006ff2:	2210      	movs	r2, #16
 8006ff4:	2100      	movs	r1, #0
 8006ff6:	4668      	mov	r0, sp
 8006ff8:	f001 faed 	bl	80085d6 <memset>

	/**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8006ffc:	4812      	ldr	r0, [pc, #72]	; (8007048 <MX_ADC1_Init+0x58>)
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006ffe:	4b13      	ldr	r3, [pc, #76]	; (800704c <MX_ADC1_Init+0x5c>)
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
	hadc1.Init.ScanConvMode = DISABLE;
	hadc1.Init.ContinuousConvMode = DISABLE;
	hadc1.Init.DiscontinuousConvMode = DISABLE;
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007000:	4a13      	ldr	r2, [pc, #76]	; (8007050 <MX_ADC1_Init+0x60>)
 8007002:	6282      	str	r2, [r0, #40]	; 0x28
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007004:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8007008:	e880 0018 	stmia.w	r0, {r3, r4}
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800700c:	2300      	movs	r3, #0
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	hadc1.Init.NbrOfConversion = 1;
 800700e:	2401      	movs	r4, #1
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007010:	6083      	str	r3, [r0, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8007012:	6103      	str	r3, [r0, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8007014:	6183      	str	r3, [r0, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007016:	6203      	str	r3, [r0, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007018:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800701a:	60c3      	str	r3, [r0, #12]
	hadc1.Init.NbrOfConversion = 1;
 800701c:	61c4      	str	r4, [r0, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800701e:	6303      	str	r3, [r0, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007020:	6144      	str	r4, [r0, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8007022:	f7fd f98b 	bl	800433c <HAL_ADC_Init>
 8007026:	b108      	cbz	r0, 800702c <MX_ADC1_Init+0x3c>
		Error_Handler();
 8007028:	f000 fc9a 	bl	8007960 <Error_Handler>
	}
	/**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 800702c:	2306      	movs	r3, #6
	sConfig.Rank = 1;
 800702e:	e88d 0018 	stmia.w	sp, {r3, r4}
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8007032:	4669      	mov	r1, sp
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8007034:	2300      	movs	r3, #0
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8007036:	4804      	ldr	r0, [pc, #16]	; (8007048 <MX_ADC1_Init+0x58>)
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8007038:	9302      	str	r3, [sp, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800703a:	f7fd fabb 	bl	80045b4 <HAL_ADC_ConfigChannel>
 800703e:	b108      	cbz	r0, 8007044 <MX_ADC1_Init+0x54>
		Error_Handler();
 8007040:	f000 fc8e 	bl	8007960 <Error_Handler>
	}
}
 8007044:	b004      	add	sp, #16
 8007046:	bd10      	pop	{r4, pc}
 8007048:	200003ec 	.word	0x200003ec
 800704c:	40012000 	.word	0x40012000
 8007050:	0f000001 	.word	0x0f000001

08007054 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8007054:	b510      	push	{r4, lr}
 8007056:	4604      	mov	r4, r0
 8007058:	b088      	sub	sp, #32
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800705a:	2214      	movs	r2, #20
 800705c:	2100      	movs	r1, #0
 800705e:	a803      	add	r0, sp, #12
 8007060:	f001 fab9 	bl	80085d6 <memset>
	if (adcHandle->Instance == ADC1) {
 8007064:	6822      	ldr	r2, [r4, #0]
 8007066:	4b16      	ldr	r3, [pc, #88]	; (80070c0 <HAL_ADC_MspInit+0x6c>)
 8007068:	429a      	cmp	r2, r3
 800706a:	d126      	bne.n	80070ba <HAL_ADC_MspInit+0x66>
		/* USER CODE BEGIN ADC1_MspInit 0 */

		/* USER CODE END ADC1_MspInit 0 */
		/* ADC1 clock enable */
		__HAL_RCC_ADC1_CLK_ENABLE();
 800706c:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8007070:	2400      	movs	r4, #0
 8007072:	9401      	str	r4, [sp, #4]
 8007074:	6c5a      	ldr	r2, [r3, #68]	; 0x44
		   PA6     ------> ADC1_IN6
		 */
		GPIO_InitStruct.Pin = ADC6_Pin;
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		HAL_GPIO_Init(ADC6_GPIO_Port, &GPIO_InitStruct);
 8007076:	4813      	ldr	r0, [pc, #76]	; (80070c4 <HAL_ADC_MspInit+0x70>)
		__HAL_RCC_ADC1_CLK_ENABLE();
 8007078:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800707c:	645a      	str	r2, [r3, #68]	; 0x44
 800707e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007080:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8007084:	9201      	str	r2, [sp, #4]
 8007086:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8007088:	9402      	str	r4, [sp, #8]
 800708a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800708c:	f042 0201 	orr.w	r2, r2, #1
 8007090:	631a      	str	r2, [r3, #48]	; 0x30
 8007092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007094:	f003 0301 	and.w	r3, r3, #1
 8007098:	9302      	str	r3, [sp, #8]
 800709a:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Pin = ADC6_Pin;
 800709c:	2340      	movs	r3, #64	; 0x40
 800709e:	9303      	str	r3, [sp, #12]
		HAL_GPIO_Init(ADC6_GPIO_Port, &GPIO_InitStruct);
 80070a0:	a903      	add	r1, sp, #12
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80070a2:	2303      	movs	r3, #3
 80070a4:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(ADC6_GPIO_Port, &GPIO_InitStruct);
 80070a6:	f7fd fd31 	bl	8004b0c <HAL_GPIO_Init>

		/* ADC1 interrupt Init */
		HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80070aa:	2012      	movs	r0, #18
 80070ac:	4622      	mov	r2, r4
 80070ae:	4621      	mov	r1, r4
 80070b0:	f7fd fb2a 	bl	8004708 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(ADC_IRQn);
 80070b4:	2012      	movs	r0, #18
 80070b6:	f7fd fb5b 	bl	8004770 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN ADC1_MspInit 1 */

		/* USER CODE END ADC1_MspInit 1 */
	}
}
 80070ba:	b008      	add	sp, #32
 80070bc:	bd10      	pop	{r4, pc}
 80070be:	bf00      	nop
 80070c0:	40012000 	.word	0x40012000
 80070c4:	40020000 	.word	0x40020000

080070c8 <uartSendChar>:
/** @brief Sends a character to serial port
 * @param ch Character to send
 * @retval Character sent
 */
int uartSendChar(int ch)
{
 80070c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	while ((uart2TXReady == 0) | (uart6TXReady == 0)) {
 80070ca:	4911      	ldr	r1, [pc, #68]	; (8007110 <uartSendChar+0x48>)
 80070cc:	4a11      	ldr	r2, [pc, #68]	; (8007114 <uartSendChar+0x4c>)
{
 80070ce:	9001      	str	r0, [sp, #4]
 80070d0:	460c      	mov	r4, r1
 80070d2:	4615      	mov	r5, r2
	while ((uart2TXReady == 0) | (uart6TXReady == 0)) {
 80070d4:	6808      	ldr	r0, [r1, #0]
 80070d6:	6813      	ldr	r3, [r2, #0]
 80070d8:	2800      	cmp	r0, #0
 80070da:	d0fb      	beq.n	80070d4 <uartSendChar+0xc>
 80070dc:	fab3 f383 	clz	r3, r3
 80070e0:	095b      	lsrs	r3, r3, #5
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1f6      	bne.n	80070d4 <uartSendChar+0xc>
		;
	}

	uart2TXReady = 0;
 80070e6:	600b      	str	r3, [r1, #0]
	uart6TXReady = 0;

	HAL_UART_Transmit_DMA(&huart6, (uint8_t *)&ch, 1);
 80070e8:	480b      	ldr	r0, [pc, #44]	; (8007118 <uartSendChar+0x50>)
	uart6TXReady = 0;
 80070ea:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit_DMA(&huart6, (uint8_t *)&ch, 1);
 80070ec:	a901      	add	r1, sp, #4
 80070ee:	2201      	movs	r2, #1
 80070f0:	f7ff fdb4 	bl	8006c5c <HAL_UART_Transmit_DMA>
	HAL_UART_Transmit_DMA(&huart2, (uint8_t *)&ch, 1);
 80070f4:	2201      	movs	r2, #1
 80070f6:	a901      	add	r1, sp, #4
 80070f8:	4808      	ldr	r0, [pc, #32]	; (800711c <uartSendChar+0x54>)
 80070fa:	f7ff fdaf 	bl	8006c5c <HAL_UART_Transmit_DMA>

	while ((uart2TXReady == 0) | (uart6TXReady == 0)) {
 80070fe:	6822      	ldr	r2, [r4, #0]
 8007100:	682b      	ldr	r3, [r5, #0]
 8007102:	2a00      	cmp	r2, #0
 8007104:	d0fb      	beq.n	80070fe <uartSendChar+0x36>
 8007106:	2b00      	cmp	r3, #0
 8007108:	d0f9      	beq.n	80070fe <uartSendChar+0x36>
		;
	}

	return ch;
}
 800710a:	9801      	ldr	r0, [sp, #4]
 800710c:	b003      	add	sp, #12
 800710e:	bd30      	pop	{r4, r5, pc}
 8007110:	2000018c 	.word	0x2000018c
 8007114:	20000190 	.word	0x20000190
 8007118:	20001274 	.word	0x20001274
 800711c:	20001038 	.word	0x20001038

08007120 <uartReceiveChar>:
 */
int uartReceiveChar(void)
{
	uint8_t ch;

	while (uartRXReady == 0) {
 8007120:	4b0a      	ldr	r3, [pc, #40]	; (800714c <uartReceiveChar+0x2c>)
{
 8007122:	b513      	push	{r0, r1, r4, lr}
 8007124:	461c      	mov	r4, r3
	while (uartRXReady == 0) {
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	2a00      	cmp	r2, #0
 800712a:	d0fc      	beq.n	8007126 <uartReceiveChar+0x6>
		;
	}

	uartRXReady = 0;
 800712c:	2200      	movs	r2, #0
 800712e:	601a      	str	r2, [r3, #0]

	HAL_UART_Receive_DMA(&huart6, &ch, 1);
 8007130:	f10d 0107 	add.w	r1, sp, #7
 8007134:	2201      	movs	r2, #1
 8007136:	4806      	ldr	r0, [pc, #24]	; (8007150 <uartReceiveChar+0x30>)
 8007138:	f7ff fdca 	bl	8006cd0 <HAL_UART_Receive_DMA>

	while (uartRXReady == 0) {
 800713c:	6823      	ldr	r3, [r4, #0]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d0fc      	beq.n	800713c <uartReceiveChar+0x1c>
		;
	}

	return ch;
}
 8007142:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8007146:	b002      	add	sp, #8
 8007148:	bd10      	pop	{r4, pc}
 800714a:	bf00      	nop
 800714c:	20000194 	.word	0x20000194
 8007150:	20001274 	.word	0x20001274

08007154 <__io_putchar>:
/** @brief putchar call for standard output implementation
 * @param ch Character to print
 * @retval Character printed
 */
int __io_putchar(int ch)
{
 8007154:	b508      	push	{r3, lr}
	uartSendChar(ch);
 8007156:	f7ff ffb7 	bl	80070c8 <uartSendChar>

	return 0;
}
 800715a:	2000      	movs	r0, #0
 800715c:	bd08      	pop	{r3, pc}

0800715e <__io_getchar>:
 * @param None
 * @retval Character acquired from standard input
 */
int __io_getchar(void)
{
	return uartReceiveChar();
 800715e:	f7ff bfdf 	b.w	8007120 <uartReceiveChar>
	...

08007164 <HAL_UART_TxCpltCallback>:
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
	/* Set transmission flag: trasfer complete*/

	if (UartHandle->Instance == USART2) uart2TXReady = 1;
 8007164:	6803      	ldr	r3, [r0, #0]
 8007166:	4a06      	ldr	r2, [pc, #24]	; (8007180 <HAL_UART_TxCpltCallback+0x1c>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d103      	bne.n	8007174 <HAL_UART_TxCpltCallback+0x10>
 800716c:	4b05      	ldr	r3, [pc, #20]	; (8007184 <HAL_UART_TxCpltCallback+0x20>)
 800716e:	2201      	movs	r2, #1
	if (UartHandle->Instance == USART6) uart6TXReady = 1;
 8007170:	601a      	str	r2, [r3, #0]
 8007172:	4770      	bx	lr
 8007174:	4a04      	ldr	r2, [pc, #16]	; (8007188 <HAL_UART_TxCpltCallback+0x24>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d1fb      	bne.n	8007172 <HAL_UART_TxCpltCallback+0xe>
 800717a:	2201      	movs	r2, #1
 800717c:	4b03      	ldr	r3, [pc, #12]	; (800718c <HAL_UART_TxCpltCallback+0x28>)
 800717e:	e7f7      	b.n	8007170 <HAL_UART_TxCpltCallback+0xc>
 8007180:	40004400 	.word	0x40004400
 8007184:	2000018c 	.word	0x2000018c
 8007188:	40011400 	.word	0x40011400
 800718c:	20000190 	.word	0x20000190

08007190 <HAL_UART_RxCpltCallback>:
 * @retval None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
	/* Set transmission flag: trasfer complete*/
	uartRXReady = 1;
 8007190:	4b01      	ldr	r3, [pc, #4]	; (8007198 <HAL_UART_RxCpltCallback+0x8>)
 8007192:	2201      	movs	r2, #1
 8007194:	601a      	str	r2, [r3, #0]
 8007196:	4770      	bx	lr
 8007198:	20000194 	.word	0x20000194

0800719c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
void MX_DMA_Init(void)
{
 800719c:	b513      	push	{r0, r1, r4, lr}
	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800719e:	4b24      	ldr	r3, [pc, #144]	; (8007230 <MX_DMA_Init+0x94>)
 80071a0:	2400      	movs	r4, #0
 80071a2:	9400      	str	r4, [sp, #0]
 80071a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071a6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80071aa:	631a      	str	r2, [r3, #48]	; 0x30
 80071ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071ae:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80071b2:	9200      	str	r2, [sp, #0]
 80071b4:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_DMA2_CLK_ENABLE();
 80071b6:	9401      	str	r4, [sp, #4]
 80071b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071ba:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80071be:	631a      	str	r2, [r3, #48]	; 0x30
 80071c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80071c6:	4622      	mov	r2, r4
 80071c8:	4621      	mov	r1, r4
	__HAL_RCC_DMA2_CLK_ENABLE();
 80071ca:	9301      	str	r3, [sp, #4]
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80071cc:	200b      	movs	r0, #11
	__HAL_RCC_DMA2_CLK_ENABLE();
 80071ce:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80071d0:	f7fd fa9a 	bl	8004708 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80071d4:	200b      	movs	r0, #11
 80071d6:	f7fd facb 	bl	8004770 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80071da:	4622      	mov	r2, r4
 80071dc:	4621      	mov	r1, r4
 80071de:	2010      	movs	r0, #16
 80071e0:	f7fd fa92 	bl	8004708 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80071e4:	2010      	movs	r0, #16
 80071e6:	f7fd fac3 	bl	8004770 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80071ea:	4622      	mov	r2, r4
 80071ec:	4621      	mov	r1, r4
 80071ee:	2011      	movs	r0, #17
 80071f0:	f7fd fa8a 	bl	8004708 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80071f4:	2011      	movs	r0, #17
 80071f6:	f7fd fabb 	bl	8004770 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80071fa:	4622      	mov	r2, r4
 80071fc:	4621      	mov	r1, r4
 80071fe:	202f      	movs	r0, #47	; 0x2f
 8007200:	f7fd fa82 	bl	8004708 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8007204:	202f      	movs	r0, #47	; 0x2f
 8007206:	f7fd fab3 	bl	8004770 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800720a:	4622      	mov	r2, r4
 800720c:	4621      	mov	r1, r4
 800720e:	2039      	movs	r0, #57	; 0x39
 8007210:	f7fd fa7a 	bl	8004708 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8007214:	2039      	movs	r0, #57	; 0x39
 8007216:	f7fd faab 	bl	8004770 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800721a:	4622      	mov	r2, r4
 800721c:	4621      	mov	r1, r4
 800721e:	2045      	movs	r0, #69	; 0x45
 8007220:	f7fd fa72 	bl	8004708 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8007224:	2045      	movs	r0, #69	; 0x45
 8007226:	f7fd faa3 	bl	8004770 <HAL_NVIC_EnableIRQ>
}
 800722a:	b002      	add	sp, #8
 800722c:	bd10      	pop	{r4, pc}
 800722e:	bf00      	nop
 8007230:	40023800 	.word	0x40023800

08007234 <MX_GPIO_Init>:
 * Output
 * EVENT_OUT
 * EXTI
 */
void MX_GPIO_Init(void)
{
 8007234:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8007236:	2214      	movs	r2, #20
{
 8007238:	b08b      	sub	sp, #44	; 0x2c
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800723a:	eb0d 0002 	add.w	r0, sp, r2
 800723e:	2100      	movs	r1, #0
 8007240:	f001 f9c9 	bl	80085d6 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8007244:	2400      	movs	r4, #0
 8007246:	4b2b      	ldr	r3, [pc, #172]	; (80072f4 <MX_GPIO_Init+0xc0>)
 8007248:	9401      	str	r4, [sp, #4]
 800724a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	__HAL_RCC_GPIOH_CLK_ENABLE();
	__HAL_RCC_GPIOA_CLK_ENABLE();
	__HAL_RCC_GPIOB_CLK_ENABLE();

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(MOTOR_ENB_GPIO_Port, MOTOR_ENB_Pin, GPIO_PIN_RESET);
 800724c:	4d2a      	ldr	r5, [pc, #168]	; (80072f8 <MX_GPIO_Init+0xc4>)

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | MOTOR_ENA_Pin, GPIO_PIN_RESET);
 800724e:	4e2b      	ldr	r6, [pc, #172]	; (80072fc <MX_GPIO_Init+0xc8>)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8007250:	f042 0204 	orr.w	r2, r2, #4
 8007254:	631a      	str	r2, [r3, #48]	; 0x30
 8007256:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007258:	f002 0204 	and.w	r2, r2, #4
 800725c:	9201      	str	r2, [sp, #4]
 800725e:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8007260:	9402      	str	r4, [sp, #8]
 8007262:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007264:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007268:	631a      	str	r2, [r3, #48]	; 0x30
 800726a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800726c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8007270:	9202      	str	r2, [sp, #8]
 8007272:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8007274:	9403      	str	r4, [sp, #12]
 8007276:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007278:	f042 0201 	orr.w	r2, r2, #1
 800727c:	631a      	str	r2, [r3, #48]	; 0x30
 800727e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007280:	f002 0201 	and.w	r2, r2, #1
 8007284:	9203      	str	r2, [sp, #12]
 8007286:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8007288:	9404      	str	r4, [sp, #16]
 800728a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800728c:	f042 0202 	orr.w	r2, r2, #2
 8007290:	631a      	str	r2, [r3, #48]	; 0x30
 8007292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007294:	f003 0302 	and.w	r3, r3, #2
 8007298:	9304      	str	r3, [sp, #16]
	HAL_GPIO_WritePin(MOTOR_ENB_GPIO_Port, MOTOR_ENB_Pin, GPIO_PIN_RESET);
 800729a:	4622      	mov	r2, r4
 800729c:	4628      	mov	r0, r5
 800729e:	2102      	movs	r1, #2
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80072a0:	9b04      	ldr	r3, [sp, #16]
	HAL_GPIO_WritePin(MOTOR_ENB_GPIO_Port, MOTOR_ENB_Pin, GPIO_PIN_RESET);
 80072a2:	f7fd fd0f 	bl	8004cc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | MOTOR_ENA_Pin, GPIO_PIN_RESET);
 80072a6:	4622      	mov	r2, r4
 80072a8:	4630      	mov	r0, r6
 80072aa:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80072ae:	f7fd fd09 	bl	8004cc4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = B1_Pin;
 80072b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80072b6:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80072b8:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80072ba:	4b11      	ldr	r3, [pc, #68]	; (8007300 <MX_GPIO_Init+0xcc>)
 80072bc:	9306      	str	r3, [sp, #24]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80072be:	4628      	mov	r0, r5

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = MOTOR_ENB_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80072c0:	2701      	movs	r7, #1
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072c2:	9407      	str	r4, [sp, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80072c4:	f7fd fc22 	bl	8004b0c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = MOTOR_ENB_Pin;
 80072c8:	2302      	movs	r3, #2
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(MOTOR_ENB_GPIO_Port, &GPIO_InitStruct);
 80072ca:	a905      	add	r1, sp, #20
 80072cc:	4628      	mov	r0, r5
	GPIO_InitStruct.Pin = MOTOR_ENB_Pin;
 80072ce:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80072d0:	9706      	str	r7, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072d2:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072d4:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(MOTOR_ENB_GPIO_Port, &GPIO_InitStruct);
 80072d6:	f7fd fc19 	bl	8004b0c <HAL_GPIO_Init>

	/*Configure GPIO pins : PAPin PAPin */
	GPIO_InitStruct.Pin = LD2_Pin | MOTOR_ENA_Pin;
 80072da:	f44f 6384 	mov.w	r3, #1056	; 0x420
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072de:	a905      	add	r1, sp, #20
 80072e0:	4630      	mov	r0, r6
	GPIO_InitStruct.Pin = LD2_Pin | MOTOR_ENA_Pin;
 80072e2:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80072e4:	9706      	str	r7, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072e6:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072e8:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072ea:	f7fd fc0f 	bl	8004b0c <HAL_GPIO_Init>
}
 80072ee:	b00b      	add	sp, #44	; 0x2c
 80072f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072f2:	bf00      	nop
 80072f4:	40023800 	.word	0x40023800
 80072f8:	40020800 	.word	0x40020800
 80072fc:	40020000 	.word	0x40020000
 8007300:	10210000 	.word	0x10210000

08007304 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8007304:	b508      	push	{r3, lr}
	hi2c1.Instance = I2C1;
 8007306:	480c      	ldr	r0, [pc, #48]	; (8007338 <MX_I2C1_Init+0x34>)
	hi2c1.Init.ClockSpeed = 100000;
 8007308:	4b0c      	ldr	r3, [pc, #48]	; (800733c <MX_I2C1_Init+0x38>)
 800730a:	f8df e034 	ldr.w	lr, [pc, #52]	; 8007340 <MX_I2C1_Init+0x3c>
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
	hi2c1.Init.OwnAddress1 = 0;
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800730e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
	hi2c1.Init.ClockSpeed = 100000;
 8007312:	e880 4008 	stmia.w	r0, {r3, lr}
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007316:	2300      	movs	r3, #0
 8007318:	6083      	str	r3, [r0, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800731a:	60c3      	str	r3, [r0, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800731c:	6102      	str	r2, [r0, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800731e:	6143      	str	r3, [r0, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8007320:	6183      	str	r3, [r0, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007322:	61c3      	str	r3, [r0, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007324:	6203      	str	r3, [r0, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8007326:	f7fd fdcf 	bl	8004ec8 <HAL_I2C_Init>
 800732a:	b118      	cbz	r0, 8007334 <MX_I2C1_Init+0x30>
		Error_Handler();
	}
}
 800732c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 8007330:	f000 bb16 	b.w	8007960 <Error_Handler>
 8007334:	bd08      	pop	{r3, pc}
 8007336:	bf00      	nop
 8007338:	20000494 	.word	0x20000494
 800733c:	40005400 	.word	0x40005400
 8007340:	000186a0 	.word	0x000186a0

08007344 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007344:	b570      	push	{r4, r5, r6, lr}
 8007346:	4606      	mov	r6, r0
 8007348:	b088      	sub	sp, #32
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800734a:	2214      	movs	r2, #20
 800734c:	2100      	movs	r1, #0
 800734e:	a803      	add	r0, sp, #12
 8007350:	f001 f941 	bl	80085d6 <memset>
	if (i2cHandle->Instance == I2C1) {
 8007354:	6832      	ldr	r2, [r6, #0]
 8007356:	4b36      	ldr	r3, [pc, #216]	; (8007430 <HAL_I2C_MspInit+0xec>)
 8007358:	429a      	cmp	r2, r3
 800735a:	d166      	bne.n	800742a <HAL_I2C_MspInit+0xe6>
		/* USER CODE BEGIN I2C1_MspInit 0 */

		/* USER CODE END I2C1_MspInit 0 */

		__HAL_RCC_GPIOB_CLK_ENABLE();
 800735c:	2500      	movs	r5, #0
 800735e:	4c35      	ldr	r4, [pc, #212]	; (8007434 <HAL_I2C_MspInit+0xf0>)
 8007360:	9501      	str	r5, [sp, #4]
 8007362:	6b23      	ldr	r3, [r4, #48]	; 0x30
		GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
		GPIO_InitStruct.Pull = GPIO_PULLUP;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007364:	4834      	ldr	r0, [pc, #208]	; (8007438 <HAL_I2C_MspInit+0xf4>)
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8007366:	f043 0302 	orr.w	r3, r3, #2
 800736a:	6323      	str	r3, [r4, #48]	; 0x30
 800736c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800736e:	f003 0302 	and.w	r3, r3, #2
 8007372:	9301      	str	r3, [sp, #4]
 8007374:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8007376:	f44f 7340 	mov.w	r3, #768	; 0x300
 800737a:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800737c:	2312      	movs	r3, #18
 800737e:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007380:	2301      	movs	r3, #1
 8007382:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007384:	2303      	movs	r3, #3
 8007386:	9306      	str	r3, [sp, #24]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007388:	a903      	add	r1, sp, #12
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800738a:	2304      	movs	r3, #4
 800738c:	9307      	str	r3, [sp, #28]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800738e:	f7fd fbbd 	bl	8004b0c <HAL_GPIO_Init>

		/* I2C1 clock enable */
		__HAL_RCC_I2C1_CLK_ENABLE();
 8007392:	9502      	str	r5, [sp, #8]
 8007394:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007396:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800739a:	6423      	str	r3, [r4, #64]	; 0x40
 800739c:	6c23      	ldr	r3, [r4, #64]	; 0x40

		/* I2C1 DMA Init */
		/* I2C1_RX Init */
		hdma_i2c1_rx.Instance = DMA1_Stream0;
 800739e:	4c27      	ldr	r4, [pc, #156]	; (800743c <HAL_I2C_MspInit+0xf8>)
		__HAL_RCC_I2C1_CLK_ENABLE();
 80073a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80073a4:	9302      	str	r3, [sp, #8]
 80073a6:	9b02      	ldr	r3, [sp, #8]
		hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80073a8:	4b25      	ldr	r3, [pc, #148]	; (8007440 <HAL_I2C_MspInit+0xfc>)
		hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80073aa:	60a5      	str	r5, [r4, #8]
		hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80073ac:	f04f 7c00 	mov.w	ip, #33554432	; 0x2000000
 80073b0:	e884 1008 	stmia.w	r4, {r3, ip}
		hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
		hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
		hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
		hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
		hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
		if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK) {
 80073b4:	4620      	mov	r0, r4
		hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80073b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
		hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80073ba:	60e5      	str	r5, [r4, #12]
		hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80073bc:	6123      	str	r3, [r4, #16]
		hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80073be:	6165      	str	r5, [r4, #20]
		hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80073c0:	61a5      	str	r5, [r4, #24]
		hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80073c2:	61e5      	str	r5, [r4, #28]
		hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80073c4:	6225      	str	r5, [r4, #32]
		hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80073c6:	6265      	str	r5, [r4, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK) {
 80073c8:	f7fd fa18 	bl	80047fc <HAL_DMA_Init>
 80073cc:	b108      	cbz	r0, 80073d2 <HAL_I2C_MspInit+0x8e>
			Error_Handler();
 80073ce:	f000 fac7 	bl	8007960 <Error_Handler>
		}

		__HAL_LINKDMA(i2cHandle, hdmarx, hdma_i2c1_rx);
 80073d2:	63b4      	str	r4, [r6, #56]	; 0x38

		/* I2C1_TX Init */
		hdma_i2c1_tx.Instance = DMA1_Stream7;
		hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
		hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80073d4:	4b1b      	ldr	r3, [pc, #108]	; (8007444 <HAL_I2C_MspInit+0x100>)
		__HAL_LINKDMA(i2cHandle, hdmarx, hdma_i2c1_rx);
 80073d6:	63a6      	str	r6, [r4, #56]	; 0x38
		hdma_i2c1_tx.Instance = DMA1_Stream7;
 80073d8:	4c1b      	ldr	r4, [pc, #108]	; (8007448 <HAL_I2C_MspInit+0x104>)
		hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80073da:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80073de:	f04f 0e40 	mov.w	lr, #64	; 0x40
 80073e2:	e884 4028 	stmia.w	r4, {r3, r5, lr}
		hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
		hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80073e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
		hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80073ea:	2300      	movs	r3, #0
		hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
		hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
		hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
		hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
		hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
		if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK) {
 80073ec:	4620      	mov	r0, r4
		hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80073ee:	60e3      	str	r3, [r4, #12]
		hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80073f0:	6122      	str	r2, [r4, #16]
		hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80073f2:	6163      	str	r3, [r4, #20]
		hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80073f4:	61a3      	str	r3, [r4, #24]
		hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80073f6:	61e3      	str	r3, [r4, #28]
		hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80073f8:	6223      	str	r3, [r4, #32]
		hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80073fa:	6263      	str	r3, [r4, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK) {
 80073fc:	f7fd f9fe 	bl	80047fc <HAL_DMA_Init>
 8007400:	b108      	cbz	r0, 8007406 <HAL_I2C_MspInit+0xc2>
			Error_Handler();
 8007402:	f000 faad 	bl	8007960 <Error_Handler>
		}

		__HAL_LINKDMA(i2cHandle, hdmatx, hdma_i2c1_tx);

		/* I2C1 interrupt Init */
		HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8007406:	2200      	movs	r2, #0
 8007408:	4611      	mov	r1, r2
		__HAL_LINKDMA(i2cHandle, hdmatx, hdma_i2c1_tx);
 800740a:	6374      	str	r4, [r6, #52]	; 0x34
		HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800740c:	201f      	movs	r0, #31
		__HAL_LINKDMA(i2cHandle, hdmatx, hdma_i2c1_tx);
 800740e:	63a6      	str	r6, [r4, #56]	; 0x38
		HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8007410:	f7fd f97a 	bl	8004708 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8007414:	201f      	movs	r0, #31
 8007416:	f7fd f9ab 	bl	8004770 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800741a:	2200      	movs	r2, #0
 800741c:	2020      	movs	r0, #32
 800741e:	4611      	mov	r1, r2
 8007420:	f7fd f972 	bl	8004708 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8007424:	2020      	movs	r0, #32
 8007426:	f7fd f9a3 	bl	8004770 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN I2C1_MspInit 1 */

		/* USER CODE END I2C1_MspInit 1 */
	}
}
 800742a:	b008      	add	sp, #32
 800742c:	bd70      	pop	{r4, r5, r6, pc}
 800742e:	bf00      	nop
 8007430:	40005400 	.word	0x40005400
 8007434:	40023800 	.word	0x40023800
 8007438:	40020400 	.word	0x40020400
 800743c:	200004e8 	.word	0x200004e8
 8007440:	40026010 	.word	0x40026010
 8007444:	400260b8 	.word	0x400260b8
 8007448:	20000434 	.word	0x20000434
 800744c:	00000000 	.word	0x00000000

08007450 <MeasureSensor>:
		/* USER CODE BEGIN 3 */
	}
	/* USER CODE END 3 */
}

float MeasureSensor(uint8_t ToFSensor) {
 8007450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	static VL53L1_RangingMeasurementData_t RangingData;

	switch (ToFSensor) {
 8007454:	2801      	cmp	r0, #1
float MeasureSensor(uint8_t ToFSensor) {
 8007456:	b085      	sub	sp, #20
 8007458:	4607      	mov	r7, r0
 800745a:	4c25      	ldr	r4, [pc, #148]	; (80074f0 <MeasureSensor+0xa0>)
	switch (ToFSensor) {
 800745c:	d040      	beq.n	80074e0 <MeasureSensor+0x90>
 800745e:	d33c      	bcc.n	80074da <MeasureSensor+0x8a>
 8007460:	2802      	cmp	r0, #2
 8007462:	d03f      	beq.n	80074e4 <MeasureSensor+0x94>
	case 2:
		Dev = &devRight;
		break;
	}

	status = VL53L1_StartMeasurement(Dev);
 8007464:	6820      	ldr	r0, [r4, #0]
 8007466:	4e23      	ldr	r6, [pc, #140]	; (80074f4 <MeasureSensor+0xa4>)
 8007468:	f7fa fa62 	bl	8001930 <VL53L1_StartMeasurement>
 800746c:	6030      	str	r0, [r6, #0]
	status = VL53L1_WaitMeasurementDataReady(Dev);
 800746e:	6820      	ldr	r0, [r4, #0]
 8007470:	f7fa fad9 	bl	8001a26 <VL53L1_WaitMeasurementDataReady>
 8007474:	6030      	str	r0, [r6, #0]
	if (!status) {
 8007476:	bb68      	cbnz	r0, 80074d4 <MeasureSensor+0x84>
		status = VL53L1_GetRangingMeasurementData(Dev, &RangingData);
 8007478:	4d1f      	ldr	r5, [pc, #124]	; (80074f8 <MeasureSensor+0xa8>)
 800747a:	6820      	ldr	r0, [r4, #0]
 800747c:	4629      	mov	r1, r5
 800747e:	f7fa fad7 	bl	8001a30 <VL53L1_GetRangingMeasurementData>
 8007482:	6030      	str	r0, [r6, #0]
		if (status == 0) {
 8007484:	bb30      	cbnz	r0, 80074d4 <MeasureSensor+0x84>
			printf("%d,%d,%d,%.2f,%.2f\n", ToFSensor, RangingData.RangeStatus, RangingData.RangeMilliMeter,
 8007486:	68e8      	ldr	r0, [r5, #12]
 8007488:	f9b5 9018 	ldrsh.w	r9, [r5, #24]
 800748c:	f895 801b 	ldrb.w	r8, [r5, #27]
 8007490:	f7f9 f838 	bl	8000504 <__aeabi_ui2d>
 8007494:	a314      	add	r3, pc, #80	; (adr r3, 80074e8 <MeasureSensor+0x98>)
 8007496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749a:	f7f9 f9d3 	bl	8000844 <__aeabi_ddiv>
 800749e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074a2:	68a8      	ldr	r0, [r5, #8]
 80074a4:	f7f9 f82e 	bl	8000504 <__aeabi_ui2d>
 80074a8:	2200      	movs	r2, #0
 80074aa:	4b14      	ldr	r3, [pc, #80]	; (80074fc <MeasureSensor+0xac>)
 80074ac:	f7f9 f8a0 	bl	80005f0 <__aeabi_dmul>
 80074b0:	464b      	mov	r3, r9
 80074b2:	e9cd 0100 	strd	r0, r1, [sp]
 80074b6:	4642      	mov	r2, r8
 80074b8:	4639      	mov	r1, r7
 80074ba:	4811      	ldr	r0, [pc, #68]	; (8007500 <MeasureSensor+0xb0>)
 80074bc:	f001 f940 	bl	8008740 <iprintf>
			       (RangingData.SignalRateRtnMegaCps / 65536.0), RangingData.AmbientRateRtnMegaCps / 65336.0);

		status = VL53L1_ClearInterruptAndStartMeasurement(Dev);
 80074c0:	6820      	ldr	r0, [r4, #0]
 80074c2:	f7fa fa6c 	bl	800199e <VL53L1_ClearInterruptAndStartMeasurement>

	return RangingData.RangeMilliMeter;
 80074c6:	f9b5 3018 	ldrsh.w	r3, [r5, #24]
		status = VL53L1_ClearInterruptAndStartMeasurement(Dev);
 80074ca:	6030      	str	r0, [r6, #0]
	return RangingData.RangeMilliMeter;
 80074cc:	ee00 3a10 	vmov	s0, r3
 80074d0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0

		}
	}
}
 80074d4:	b005      	add	sp, #20
 80074d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		Dev = &devLeft;
 80074da:	4b0a      	ldr	r3, [pc, #40]	; (8007504 <MeasureSensor+0xb4>)
		Dev = &devRight;
 80074dc:	6023      	str	r3, [r4, #0]
		break;
 80074de:	e7c1      	b.n	8007464 <MeasureSensor+0x14>
		Dev = &devCenter;
 80074e0:	4b09      	ldr	r3, [pc, #36]	; (8007508 <MeasureSensor+0xb8>)
 80074e2:	e7fb      	b.n	80074dc <MeasureSensor+0x8c>
		Dev = &devRight;
 80074e4:	4b09      	ldr	r3, [pc, #36]	; (800750c <MeasureSensor+0xbc>)
 80074e6:	e7f9      	b.n	80074dc <MeasureSensor+0x8c>
 80074e8:	00000000 	.word	0x00000000
 80074ec:	40efe700 	.word	0x40efe700
 80074f0:	20000198 	.word	0x20000198
 80074f4:	20001078 	.word	0x20001078
 80074f8:	2000024c 	.word	0x2000024c
 80074fc:	3ef00000 	.word	0x3ef00000
 8007500:	080093a7 	.word	0x080093a7
 8007504:	20000548 	.word	0x20000548
 8007508:	200008ec 	.word	0x200008ec
 800750c:	20000c94 	.word	0x20000c94

08007510 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8007510:	b530      	push	{r4, r5, lr}
 8007512:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8007514:	2230      	movs	r2, #48	; 0x30
 8007516:	2100      	movs	r1, #0
 8007518:	a808      	add	r0, sp, #32
 800751a:	f001 f85c 	bl	80085d6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800751e:	2100      	movs	r1, #0
 8007520:	2214      	movs	r2, #20
 8007522:	a803      	add	r0, sp, #12
 8007524:	f001 f857 	bl	80085d6 <memset>

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8007528:	2400      	movs	r4, #0
 800752a:	4b1e      	ldr	r3, [pc, #120]	; (80075a4 <SystemClock_Config+0x94>)
 800752c:	9401      	str	r4, [sp, #4]
 800752e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007530:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007534:	641a      	str	r2, [r3, #64]	; 0x40
 8007536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8007538:	4a1b      	ldr	r2, [pc, #108]	; (80075a8 <SystemClock_Config+0x98>)
	__HAL_RCC_PWR_CLK_ENABLE();
 800753a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800753e:	9301      	str	r3, [sp, #4]
 8007540:	9b01      	ldr	r3, [sp, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8007542:	9402      	str	r4, [sp, #8]
 8007544:	6813      	ldr	r3, [r2, #0]
 8007546:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800754a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800754e:	6013      	str	r3, [r2, #0]
 8007550:	6813      	ldr	r3, [r2, #0]
 8007552:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007556:	9302      	str	r3, [sp, #8]
 8007558:	9b02      	ldr	r3, [sp, #8]
	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800755a:	2301      	movs	r3, #1
 800755c:	9308      	str	r3, [sp, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800755e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8007562:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007564:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007568:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800756a:	2308      	movs	r3, #8
 800756c:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 800756e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8007572:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8007574:	2304      	movs	r3, #4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007576:	2502      	movs	r5, #2
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8007578:	9312      	str	r3, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800757a:	a808      	add	r0, sp, #32
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800757c:	2307      	movs	r3, #7
 800757e:	9313      	str	r3, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007580:	950e      	str	r5, [sp, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8007582:	f7fe fc23 	bl	8005dcc <HAL_RCC_OscConfig>
		Error_Handler();
	}
	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8007586:	230f      	movs	r3, #15
 8007588:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800758a:	4629      	mov	r1, r5
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800758c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8007590:	a803      	add	r0, sp, #12
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007592:	9504      	str	r5, [sp, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007594:	9405      	str	r4, [sp, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007596:	9306      	str	r3, [sp, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007598:	9407      	str	r4, [sp, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800759a:	f7fe fdc7 	bl	800612c <HAL_RCC_ClockConfig>
		Error_Handler();
	}
}
 800759e:	b015      	add	sp, #84	; 0x54
 80075a0:	bd30      	pop	{r4, r5, pc}
 80075a2:	bf00      	nop
 80075a4:	40023800 	.word	0x40023800
 80075a8:	40007000 	.word	0x40007000
 80075ac:	00000000 	.word	0x00000000

080075b0 <main>:
{
 80075b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075b4:	ed2d 8b04 	vpush	{d8-d9}
	setvbuf(stdin, NULL, _IONBF, 0);
 80075b8:	4ccb      	ldr	r4, [pc, #812]	; (80078e8 <main+0x338>)
		status = XNUCLEO53L1A1_ResetId(ToFSensor, 0);
 80075ba:	4ecc      	ldr	r6, [pc, #816]	; (80078ec <main+0x33c>)
{
 80075bc:	b087      	sub	sp, #28
	HAL_Init();
 80075be:	f7fc fe7d 	bl	80042bc <HAL_Init>
	SystemClock_Config();
 80075c2:	f7ff ffa5 	bl	8007510 <SystemClock_Config>
	MX_GPIO_Init();
 80075c6:	f7ff fe35 	bl	8007234 <MX_GPIO_Init>
	MX_DMA_Init();
 80075ca:	f7ff fde7 	bl	800719c <MX_DMA_Init>
	MX_USART2_UART_Init();
 80075ce:	f000 fc0d 	bl	8007dec <MX_USART2_UART_Init>
	MX_I2C1_Init();
 80075d2:	f7ff fe97 	bl	8007304 <MX_I2C1_Init>
	MX_TIM2_Init();
 80075d6:	f000 fb61 	bl	8007c9c <MX_TIM2_Init>
	MX_TIM3_Init();
 80075da:	f000 fbb3 	bl	8007d44 <MX_TIM3_Init>
	MX_ADC1_Init();
 80075de:	f7ff fd07 	bl	8006ff0 <MX_ADC1_Init>
	MX_USART6_UART_Init();
 80075e2:	f000 fc1f 	bl	8007e24 <MX_USART6_UART_Init>
	XNUCLEO53L1A1_Init();
 80075e6:	f7fc fb47 	bl	8003c78 <XNUCLEO53L1A1_Init>
	setvbuf(stdin, NULL, _IONBF, 0);
 80075ea:	6820      	ldr	r0, [r4, #0]
 80075ec:	2300      	movs	r3, #0
 80075ee:	4619      	mov	r1, r3
 80075f0:	2202      	movs	r2, #2
 80075f2:	6840      	ldr	r0, [r0, #4]
 80075f4:	f001 f930 	bl	8008858 <setvbuf>
	setvbuf(stdout, NULL, _IONBF, 0);
 80075f8:	6820      	ldr	r0, [r4, #0]
 80075fa:	2300      	movs	r3, #0
 80075fc:	4619      	mov	r1, r3
 80075fe:	2202      	movs	r2, #2
 8007600:	6880      	ldr	r0, [r0, #8]
 8007602:	f001 f929 	bl	8008858 <setvbuf>
	setvbuf(stderr, NULL, _IONBF, 0);
 8007606:	6820      	ldr	r0, [r4, #0]
 8007608:	2300      	movs	r3, #0
 800760a:	2202      	movs	r2, #2
 800760c:	4619      	mov	r1, r3
 800760e:	68c0      	ldr	r0, [r0, #12]
 8007610:	f001 f922 	bl	8008858 <setvbuf>
	printf("\r\nConsole ready ... \r\n");
 8007614:	48b6      	ldr	r0, [pc, #728]	; (80078f0 <main+0x340>)
 8007616:	f001 f907 	bl	8008828 <puts>
	motor_init();
 800761a:	f000 f9b3 	bl	8007984 <motor_init>
 800761e:	2400      	movs	r4, #0
 8007620:	4635      	mov	r5, r6
		status = XNUCLEO53L1A1_ResetId(ToFSensor, 0);
 8007622:	4620      	mov	r0, r4
 8007624:	2100      	movs	r1, #0
 8007626:	f7fc fb6f 	bl	8003d08 <XNUCLEO53L1A1_ResetId>
 800762a:	3401      	adds	r4, #1
	for (ToFSensor = 0; ToFSensor < 3; ToFSensor++) {
 800762c:	2c03      	cmp	r4, #3
		status = XNUCLEO53L1A1_ResetId(ToFSensor, 0);
 800762e:	6030      	str	r0, [r6, #0]
	for (ToFSensor = 0; ToFSensor < 3; ToFSensor++) {
 8007630:	d1f7      	bne.n	8007622 <main+0x72>
 8007632:	4cb0      	ldr	r4, [pc, #704]	; (80078f4 <main+0x344>)
			Dev = &devCenter;
 8007634:	f8df 92e8 	ldr.w	r9, [pc, #744]	; 8007920 <main+0x370>
		printf("VL53L1X: %02X\n\r", wordData);
 8007638:	f8df 82e8 	ldr.w	r8, [pc, #744]	; 8007924 <main+0x374>
 800763c:	2700      	movs	r7, #0
 800763e:	b2fe      	uxtb	r6, r7
		switch (ToFSensor) {
 8007640:	2e01      	cmp	r6, #1
 8007642:	d004      	beq.n	800764e <main+0x9e>
 8007644:	2e02      	cmp	r6, #2
 8007646:	d06c      	beq.n	8007722 <main+0x172>
			Dev = &devLeft;
 8007648:	4bab      	ldr	r3, [pc, #684]	; (80078f8 <main+0x348>)
			Dev = &devRight;
 800764a:	6023      	str	r3, [r4, #0]
			break;
 800764c:	e001      	b.n	8007652 <main+0xa2>
			Dev = &devCenter;
 800764e:	f8c4 9000 	str.w	r9, [r4]
		status = XNUCLEO53L1A1_ResetId(ToFSensor, 1);
 8007652:	2101      	movs	r1, #1
 8007654:	4638      	mov	r0, r7
 8007656:	f7fc fb57 	bl	8003d08 <XNUCLEO53L1A1_ResetId>
 800765a:	6028      	str	r0, [r5, #0]
		Dev->comms_speed_khz = 400;
 800765c:	6820      	ldr	r0, [r4, #0]
 800765e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007662:	f8a0 339a 	strh.w	r3, [r0, #922]	; 0x39a
		Dev->I2cHandle = &hi2c1;
 8007666:	4ba5      	ldr	r3, [pc, #660]	; (80078fc <main+0x34c>)
 8007668:	f8c0 33a0 	str.w	r3, [r0, #928]	; 0x3a0
		Dev->comms_type = 1;
 800766c:	2301      	movs	r3, #1
 800766e:	f880 3399 	strb.w	r3, [r0, #921]	; 0x399
		Dev->I2cDevAddr = 0x52; /* default ToF sensor I2C address*/
 8007672:	2352      	movs	r3, #82	; 0x52
		VL53L1_RdWord(Dev, 0x010F, &wordData);
 8007674:	f10d 0216 	add.w	r2, sp, #22
		Dev->I2cDevAddr = 0x52; /* default ToF sensor I2C address*/
 8007678:	f880 3398 	strb.w	r3, [r0, #920]	; 0x398
		VL53L1_RdWord(Dev, 0x010F, &wordData);
 800767c:	f240 110f 	movw	r1, #271	; 0x10f
 8007680:	f000 fd68 	bl	8008154 <VL53L1_RdWord>
		printf("VL53L1X: %02X\n\r", wordData);
 8007684:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8007688:	4640      	mov	r0, r8
 800768a:	f001 f859 	bl	8008740 <iprintf>
		newI2C = Dev->I2cDevAddr + (ToFSensor + 1) * 2;
 800768e:	6820      	ldr	r0, [r4, #0]
 8007690:	1c73      	adds	r3, r6, #1
 8007692:	f890 6398 	ldrb.w	r6, [r0, #920]	; 0x398
 8007696:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 800769a:	b2f6      	uxtb	r6, r6
		status = VL53L1_SetDeviceAddress(Dev, newI2C);
 800769c:	4631      	mov	r1, r6
 800769e:	f7f9 ff41 	bl	8001524 <VL53L1_SetDeviceAddress>
 80076a2:	6028      	str	r0, [r5, #0]
		Dev->I2cDevAddr = newI2C;
 80076a4:	6820      	ldr	r0, [r4, #0]
		VL53L1_RdWord(Dev, 0x010F, &wordData);
 80076a6:	f10d 0216 	add.w	r2, sp, #22
 80076aa:	f240 110f 	movw	r1, #271	; 0x10f
		Dev->I2cDevAddr = newI2C;
 80076ae:	f880 6398 	strb.w	r6, [r0, #920]	; 0x398
		VL53L1_RdWord(Dev, 0x010F, &wordData);
 80076b2:	f000 fd4f 	bl	8008154 <VL53L1_RdWord>
		printf("VL53L1X: %02X\n\r", wordData);
 80076b6:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80076ba:	4640      	mov	r0, r8
 80076bc:	f001 f840 	bl	8008740 <iprintf>
		status = VL53L1_WaitDeviceBooted(Dev);
 80076c0:	6820      	ldr	r0, [r4, #0]
 80076c2:	f7f9 ff33 	bl	800152c <VL53L1_WaitDeviceBooted>
 80076c6:	6028      	str	r0, [r5, #0]
		status = VL53L1_DataInit(Dev);
 80076c8:	6820      	ldr	r0, [r4, #0]
 80076ca:	f7fa f8dc 	bl	8001886 <VL53L1_DataInit>
 80076ce:	6028      	str	r0, [r5, #0]
		status = VL53L1_StaticInit(Dev);
 80076d0:	6820      	ldr	r0, [r4, #0]
 80076d2:	f7fa f813 	bl	80016fc <VL53L1_StaticInit>
		status = VL53L1_SetDistanceMode(Dev, VL53L1_DISTANCEMODE_LONG);
 80076d6:	2103      	movs	r1, #3
		status = VL53L1_StaticInit(Dev);
 80076d8:	6028      	str	r0, [r5, #0]
		status = VL53L1_SetDistanceMode(Dev, VL53L1_DISTANCEMODE_LONG);
 80076da:	6820      	ldr	r0, [r4, #0]
 80076dc:	f7f9 ff2a 	bl	8001534 <VL53L1_SetDistanceMode>
		status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(Dev, 50000);
 80076e0:	f24c 3150 	movw	r1, #50000	; 0xc350
		status = VL53L1_SetDistanceMode(Dev, VL53L1_DISTANCEMODE_LONG);
 80076e4:	6028      	str	r0, [r5, #0]
		status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(Dev, 50000);
 80076e6:	6820      	ldr	r0, [r4, #0]
 80076e8:	f7f9 ff60 	bl	80015ac <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
		status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev, 100);
 80076ec:	2164      	movs	r1, #100	; 0x64
		status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(Dev, 50000);
 80076ee:	6028      	str	r0, [r5, #0]
		status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev, 100);
 80076f0:	6820      	ldr	r0, [r4, #0]
 80076f2:	f7fa f87b 	bl	80017ec <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 80076f6:	3701      	adds	r7, #1
	for (ToFSensor = 0; ToFSensor < 3; ToFSensor++) {
 80076f8:	2f03      	cmp	r7, #3
		status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev, 100);
 80076fa:	6028      	str	r0, [r5, #0]
	for (ToFSensor = 0; ToFSensor < 3; ToFSensor++) {
 80076fc:	d19f      	bne.n	800763e <main+0x8e>
 80076fe:	ed9f 8a80 	vldr	s16, [pc, #512]	; 8007900 <main+0x350>
 8007702:	eef0 8a48 	vmov.f32	s17, s16
				Dev = &devCenter;
 8007706:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8007920 <main+0x370>
 800770a:	2700      	movs	r7, #0
 800770c:	fa5f f887 	uxtb.w	r8, r7
			switch (ToFSensor) {
 8007710:	f1b8 0f01 	cmp.w	r8, #1
 8007714:	d007      	beq.n	8007726 <main+0x176>
 8007716:	f1b8 0f02 	cmp.w	r8, #2
 800771a:	d079      	beq.n	8007810 <main+0x260>
				Dev = &devLeft;
 800771c:	4b76      	ldr	r3, [pc, #472]	; (80078f8 <main+0x348>)
				Dev = &devRight;
 800771e:	6023      	str	r3, [r4, #0]
				break;
 8007720:	e003      	b.n	800772a <main+0x17a>
			Dev = &devRight;
 8007722:	4b78      	ldr	r3, [pc, #480]	; (8007904 <main+0x354>)
 8007724:	e791      	b.n	800764a <main+0x9a>
				Dev = &devCenter;
 8007726:	f8c4 9000 	str.w	r9, [r4]
			status = VL53L1_StartMeasurement(Dev);
 800772a:	6820      	ldr	r0, [r4, #0]
 800772c:	f7fa f900 	bl	8001930 <VL53L1_StartMeasurement>
 8007730:	6028      	str	r0, [r5, #0]
			status = VL53L1_WaitMeasurementDataReady(Dev);
 8007732:	6820      	ldr	r0, [r4, #0]
 8007734:	f7fa f977 	bl	8001a26 <VL53L1_WaitMeasurementDataReady>
 8007738:	6028      	str	r0, [r5, #0]
			if (!status) {
 800773a:	bb78      	cbnz	r0, 800779c <main+0x1ec>
				status = VL53L1_GetRangingMeasurementData(Dev, &RangingData);
 800773c:	4e72      	ldr	r6, [pc, #456]	; (8007908 <main+0x358>)
 800773e:	6820      	ldr	r0, [r4, #0]
 8007740:	4631      	mov	r1, r6
 8007742:	f7fa f975 	bl	8001a30 <VL53L1_GetRangingMeasurementData>
 8007746:	6028      	str	r0, [r5, #0]
				if (status == 0) {
 8007748:	bb20      	cbnz	r0, 8007794 <main+0x1e4>
					printf("%d,%d,%d,%.2f,%.2f\n", ToFSensor, RangingData.RangeStatus, RangingData.RangeMilliMeter,
 800774a:	68f0      	ldr	r0, [r6, #12]
 800774c:	f9b6 b018 	ldrsh.w	fp, [r6, #24]
 8007750:	f896 a01b 	ldrb.w	sl, [r6, #27]
 8007754:	f7f8 fed6 	bl	8000504 <__aeabi_ui2d>
 8007758:	a361      	add	r3, pc, #388	; (adr r3, 80078e0 <main+0x330>)
 800775a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775e:	f7f9 f871 	bl	8000844 <__aeabi_ddiv>
 8007762:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007766:	68b0      	ldr	r0, [r6, #8]
 8007768:	f7f8 fecc 	bl	8000504 <__aeabi_ui2d>
 800776c:	2200      	movs	r2, #0
 800776e:	4b67      	ldr	r3, [pc, #412]	; (800790c <main+0x35c>)
 8007770:	f7f8 ff3e 	bl	80005f0 <__aeabi_dmul>
 8007774:	465b      	mov	r3, fp
 8007776:	e9cd 0100 	strd	r0, r1, [sp]
 800777a:	4652      	mov	r2, sl
 800777c:	4639      	mov	r1, r7
 800777e:	4864      	ldr	r0, [pc, #400]	; (8007910 <main+0x360>)
 8007780:	f000 ffde 	bl	8008740 <iprintf>
					if (ToFSensor == 0) {
 8007784:	2f00      	cmp	r7, #0
 8007786:	d145      	bne.n	8007814 <main+0x264>
						dist_back = RangingData.RangeMilliMeter;
 8007788:	f9b6 3018 	ldrsh.w	r3, [r6, #24]
 800778c:	ee08 3a90 	vmov	s17, r3
 8007790:	eef8 8ae8 	vcvt.f32.s32	s17, s17
				status = VL53L1_ClearInterruptAndStartMeasurement(Dev);
 8007794:	6820      	ldr	r0, [r4, #0]
 8007796:	f7fa f902 	bl	800199e <VL53L1_ClearInterruptAndStartMeasurement>
 800779a:	6028      	str	r0, [r5, #0]
 800779c:	3701      	adds	r7, #1
		for (ToFSensor = 0; ToFSensor < 3; ToFSensor++) {
 800779e:	2f03      	cmp	r7, #3
 80077a0:	d1b4      	bne.n	800770c <main+0x15c>
		if ((dist_forw > dist_back) && (dist_forw > 500)) {
 80077a2:	eef4 8ac8 	vcmpe.f32	s17, s16
 80077a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077aa:	d553      	bpl.n	8007854 <main+0x2a4>
 80077ac:	eddf 7a59 	vldr	s15, [pc, #356]	; 8007914 <main+0x364>
 80077b0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80077b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077b8:	dd4c      	ble.n	8007854 <main+0x2a4>
			while(dist_forw > 400) {
 80077ba:	ed9f 9a57 	vldr	s18, [pc, #348]	; 8007918 <main+0x368>
 80077be:	eeb4 8ac9 	vcmpe.f32	s16, s18
 80077c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077c6:	dc2f      	bgt.n	8007828 <main+0x278>
			BSP_MotorControl_SetMaxSpeed(0, 0);
 80077c8:	2100      	movs	r1, #0
 80077ca:	4608      	mov	r0, r1
 80077cc:	f7fc fcc0 	bl	8004150 <BSP_MotorControl_SetMaxSpeed>
			BSP_MotorControl_SetMaxSpeed(1, 0);
 80077d0:	2100      	movs	r1, #0
 80077d2:	2001      	movs	r0, #1
 80077d4:	f7fc fcbc 	bl	8004150 <BSP_MotorControl_SetMaxSpeed>
			HAL_Delay(2000);
 80077d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80077dc:	f7fc fd9a 	bl	8004314 <HAL_Delay>
		while((dist_forw < 1000)) {
 80077e0:	ed9f 9a4e 	vldr	s18, [pc, #312]	; 800791c <main+0x36c>
 80077e4:	eef0 9a49 	vmov.f32	s19, s18
 80077e8:	eeb4 8ac9 	vcmpe.f32	s16, s18
 80077ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077f0:	d459      	bmi.n	80078a6 <main+0x2f6>
		while((dist_back < 1000)) {
 80077f2:	eef4 8ae9 	vcmpe.f32	s17, s19
 80077f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077fa:	f100 8095 	bmi.w	8007928 <main+0x378>
		BSP_MotorControl_SetMaxSpeed(0, 0);
 80077fe:	2100      	movs	r1, #0
 8007800:	4608      	mov	r0, r1
 8007802:	f7fc fca5 	bl	8004150 <BSP_MotorControl_SetMaxSpeed>
		BSP_MotorControl_SetMaxSpeed(1, 0);
 8007806:	2100      	movs	r1, #0
 8007808:	2001      	movs	r0, #1
 800780a:	f7fc fca1 	bl	8004150 <BSP_MotorControl_SetMaxSpeed>
		for (ToFSensor = 0; ToFSensor < 3; ToFSensor++) {
 800780e:	e77a      	b.n	8007706 <main+0x156>
				Dev = &devRight;
 8007810:	4b3c      	ldr	r3, [pc, #240]	; (8007904 <main+0x354>)
 8007812:	e784      	b.n	800771e <main+0x16e>
					} else if (ToFSensor == 2)
 8007814:	f1b8 0f02 	cmp.w	r8, #2
						dist_forw = RangingData.RangeMilliMeter;
 8007818:	bf02      	ittt	eq
 800781a:	f9b6 3018 	ldrsheq.w	r3, [r6, #24]
 800781e:	ee08 3a10 	vmoveq	s16, r3
 8007822:	eeb8 8ac8 	vcvteq.f32.s32	s16, s16
 8007826:	e7b5      	b.n	8007794 <main+0x1e4>
				BSP_MotorControl_SetMaxSpeed(0,30);
 8007828:	211e      	movs	r1, #30
 800782a:	2000      	movs	r0, #0
 800782c:	f7fc fc90 	bl	8004150 <BSP_MotorControl_SetMaxSpeed>
				BSP_MotorControl_Run(0, BACKWARD);
 8007830:	2100      	movs	r1, #0
 8007832:	4608      	mov	r0, r1
 8007834:	f7fc fc80 	bl	8004138 <BSP_MotorControl_Run>
				BSP_MotorControl_SetMaxSpeed(1, 30);
 8007838:	211e      	movs	r1, #30
 800783a:	2001      	movs	r0, #1
 800783c:	f7fc fc88 	bl	8004150 <BSP_MotorControl_SetMaxSpeed>
				BSP_MotorControl_Run(1, FORWARD);
 8007840:	2101      	movs	r1, #1
 8007842:	4608      	mov	r0, r1
 8007844:	f7fc fc78 	bl	8004138 <BSP_MotorControl_Run>
				dist_forw = MeasureSensor(2);
 8007848:	2002      	movs	r0, #2
 800784a:	f7ff fe01 	bl	8007450 <MeasureSensor>
 800784e:	eeb0 8a40 	vmov.f32	s16, s0
 8007852:	e7b4      	b.n	80077be <main+0x20e>
		} else if ((dist_back > dist_forw) && (dist_back > 500)) {
 8007854:	eef4 8ac8 	vcmpe.f32	s17, s16
 8007858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800785c:	ddc0      	ble.n	80077e0 <main+0x230>
 800785e:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8007914 <main+0x364>
 8007862:	eef4 8ae7 	vcmpe.f32	s17, s15
 8007866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800786a:	ddb9      	ble.n	80077e0 <main+0x230>
			while(dist_back > 400) {
 800786c:	ed9f 9a2a 	vldr	s18, [pc, #168]	; 8007918 <main+0x368>
 8007870:	eef4 8ac9 	vcmpe.f32	s17, s18
 8007874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007878:	dda6      	ble.n	80077c8 <main+0x218>
				BSP_MotorControl_SetMaxSpeed(0, 30);
 800787a:	211e      	movs	r1, #30
 800787c:	2000      	movs	r0, #0
 800787e:	f7fc fc67 	bl	8004150 <BSP_MotorControl_SetMaxSpeed>
				BSP_MotorControl_Run(0, FORWARD);
 8007882:	2101      	movs	r1, #1
 8007884:	2000      	movs	r0, #0
 8007886:	f7fc fc57 	bl	8004138 <BSP_MotorControl_Run>
				BSP_MotorControl_SetMaxSpeed(1, 30);
 800788a:	211e      	movs	r1, #30
 800788c:	2001      	movs	r0, #1
 800788e:	f7fc fc5f 	bl	8004150 <BSP_MotorControl_SetMaxSpeed>
				BSP_MotorControl_Run(1, BACKWARD);
 8007892:	2100      	movs	r1, #0
 8007894:	2001      	movs	r0, #1
 8007896:	f7fc fc4f 	bl	8004138 <BSP_MotorControl_Run>
				dist_back = MeasureSensor(0);
 800789a:	2000      	movs	r0, #0
 800789c:	f7ff fdd8 	bl	8007450 <MeasureSensor>
 80078a0:	eef0 8a40 	vmov.f32	s17, s0
 80078a4:	e7e4      	b.n	8007870 <main+0x2c0>
			BSP_MotorControl_SetMaxSpeed(0, 30);
 80078a6:	211e      	movs	r1, #30
 80078a8:	2000      	movs	r0, #0
 80078aa:	f7fc fc51 	bl	8004150 <BSP_MotorControl_SetMaxSpeed>
			BSP_MotorControl_Run(0, BACKWARD);
 80078ae:	2100      	movs	r1, #0
 80078b0:	4608      	mov	r0, r1
 80078b2:	f7fc fc41 	bl	8004138 <BSP_MotorControl_Run>
			BSP_MotorControl_SetMaxSpeed(1, 30);
 80078b6:	211e      	movs	r1, #30
 80078b8:	2001      	movs	r0, #1
 80078ba:	f7fc fc49 	bl	8004150 <BSP_MotorControl_SetMaxSpeed>
			BSP_MotorControl_Run(1, BACKWARD);
 80078be:	2100      	movs	r1, #0
 80078c0:	2001      	movs	r0, #1
 80078c2:	f7fc fc39 	bl	8004138 <BSP_MotorControl_Run>
			dist_forw = MeasureSensor(2);
 80078c6:	2002      	movs	r0, #2
 80078c8:	f7ff fdc2 	bl	8007450 <MeasureSensor>
			dist_back = MeasureSensor(0);
 80078cc:	2000      	movs	r0, #0
			dist_forw = MeasureSensor(2);
 80078ce:	eeb0 8a40 	vmov.f32	s16, s0
			dist_back = MeasureSensor(0);
 80078d2:	f7ff fdbd 	bl	8007450 <MeasureSensor>
 80078d6:	eef0 8a40 	vmov.f32	s17, s0
 80078da:	e785      	b.n	80077e8 <main+0x238>
 80078dc:	f3af 8000 	nop.w
 80078e0:	00000000 	.word	0x00000000
 80078e4:	40efe700 	.word	0x40efe700
 80078e8:	200001a0 	.word	0x200001a0
 80078ec:	20001078 	.word	0x20001078
 80078f0:	080093bb 	.word	0x080093bb
 80078f4:	20000198 	.word	0x20000198
 80078f8:	20000548 	.word	0x20000548
 80078fc:	20000494 	.word	0x20000494
 8007900:	00000000 	.word	0x00000000
 8007904:	20000c94 	.word	0x20000c94
 8007908:	20000230 	.word	0x20000230
 800790c:	3ef00000 	.word	0x3ef00000
 8007910:	080093a7 	.word	0x080093a7
 8007914:	43fa0000 	.word	0x43fa0000
 8007918:	43c80000 	.word	0x43c80000
 800791c:	447a0000 	.word	0x447a0000
 8007920:	200008ec 	.word	0x200008ec
 8007924:	080093d1 	.word	0x080093d1
			BSP_MotorControl_SetMaxSpeed(0, 30);
 8007928:	211e      	movs	r1, #30
 800792a:	2000      	movs	r0, #0
 800792c:	f7fc fc10 	bl	8004150 <BSP_MotorControl_SetMaxSpeed>
			BSP_MotorControl_Run(0, BACKWARD);
 8007930:	2100      	movs	r1, #0
 8007932:	4608      	mov	r0, r1
 8007934:	f7fc fc00 	bl	8004138 <BSP_MotorControl_Run>
			BSP_MotorControl_SetMaxSpeed(1, 30);
 8007938:	211e      	movs	r1, #30
 800793a:	2001      	movs	r0, #1
 800793c:	f7fc fc08 	bl	8004150 <BSP_MotorControl_SetMaxSpeed>
			BSP_MotorControl_Run(1, BACKWARD);
 8007940:	2100      	movs	r1, #0
 8007942:	2001      	movs	r0, #1
 8007944:	f7fc fbf8 	bl	8004138 <BSP_MotorControl_Run>
			dist_forw = MeasureSensor(2);
 8007948:	2002      	movs	r0, #2
 800794a:	f7ff fd81 	bl	8007450 <MeasureSensor>
			dist_back = MeasureSensor(0);
 800794e:	2000      	movs	r0, #0
			dist_forw = MeasureSensor(2);
 8007950:	eeb0 8a40 	vmov.f32	s16, s0
			dist_back = MeasureSensor(0);
 8007954:	f7ff fd7c 	bl	8007450 <MeasureSensor>
 8007958:	eef0 8a40 	vmov.f32	s17, s0
 800795c:	e749      	b.n	80077f2 <main+0x242>
 800795e:	bf00      	nop

08007960 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8007960:	4770      	bx	lr

08007962 <MyFlagInterruptHandler>:
 * @brief  This function is the User handler for the flag interrupt
 * @param  None
 * @retval None
 */
void MyFlagInterruptHandler(void)
{
 8007962:	b508      	push	{r3, lr}
	/* Code to be customised */
	/************************/
	/* Get the state of bridge A */
	uint16_t bridgeState = BSP_MotorControl_CmdGetStatus(0);
 8007964:	2000      	movs	r0, #0
 8007966:	f7fc fc05 	bl	8004174 <BSP_MotorControl_CmdGetStatus>

	if (bridgeState == 0) {
 800796a:	b948      	cbnz	r0, 8007980 <MyFlagInterruptHandler+0x1e>
		if (BSP_MotorControl_GetDeviceState(0) != INACTIVE) {
 800796c:	f7fc fbd2 	bl	8004114 <BSP_MotorControl_GetDeviceState>
 8007970:	2808      	cmp	r0, #8
 8007972:	d005      	beq.n	8007980 <MyFlagInterruptHandler+0x1e>
			/* Bridge A was disabling due to overcurrent or over temperature */
			/* When  motor was running */
			Error_Handler(0XBAD0);
 8007974:	f64b 20d0 	movw	r0, #47824	; 0xbad0
		}
	}
}
 8007978:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			Error_Handler(0XBAD0);
 800797c:	f7ff bff0 	b.w	8007960 <Error_Handler>
 8007980:	bd08      	pop	{r3, pc}
	...

08007984 <motor_init>:
{
 8007984:	b530      	push	{r4, r5, lr}
	deviceParams_t initDeviceParameters =
 8007986:	4d15      	ldr	r5, [pc, #84]	; (80079dc <motor_init+0x58>)
 8007988:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
 800798a:	b08b      	sub	sp, #44	; 0x2c
	deviceParams_t initDeviceParameters =
 800798c:	466c      	mov	r4, sp
 800798e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007994:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007998:	e884 0003 	stmia.w	r4, {r0, r1}
	BSP_MotorControl_SetNbDevices(BSP_MOTOR_CONTROL_BOARD_ID_L6206, 2);
 800799c:	2102      	movs	r1, #2
 800799e:	f641 003e 	movw	r0, #6206	; 0x183e
 80079a2:	f7fc fc15 	bl	80041d0 <BSP_MotorControl_SetNbDevices>
	BSP_MotorControl_Init(BSP_MOTOR_CONTROL_BOARD_ID_L6206, &initDeviceParameters);
 80079a6:	4669      	mov	r1, sp
 80079a8:	f641 003e 	movw	r0, #6206	; 0x183e
 80079ac:	f7fc fba4 	bl	80040f8 <BSP_MotorControl_Init>
	BSP_MotorControl_SetDualFullBridgeConfig(PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B);
 80079b0:	2000      	movs	r0, #0
 80079b2:	f7fc fbf1 	bl	8004198 <BSP_MotorControl_SetDualFullBridgeConfig>
	BSP_MotorControl_AttachFlagInterrupt(MyFlagInterruptHandler);
 80079b6:	480a      	ldr	r0, [pc, #40]	; (80079e0 <motor_init+0x5c>)
 80079b8:	f7fc fb92 	bl	80040e0 <BSP_MotorControl_AttachFlagInterrupt>
	BSP_MotorControl_AttachErrorHandler(Error_Handler);
 80079bc:	4809      	ldr	r0, [pc, #36]	; (80079e4 <motor_init+0x60>)
 80079be:	f7fc fb83 	bl	80040c8 <BSP_MotorControl_AttachErrorHandler>
	BSP_MotorControl_SetBridgeInputPwmFreq(0, 10000);
 80079c2:	f242 7110 	movw	r1, #10000	; 0x2710
 80079c6:	2000      	movs	r0, #0
 80079c8:	f7fc fbf4 	bl	80041b4 <BSP_MotorControl_SetBridgeInputPwmFreq>
	BSP_MotorControl_SetBridgeInputPwmFreq(1, 10000);
 80079cc:	f242 7110 	movw	r1, #10000	; 0x2710
 80079d0:	2001      	movs	r0, #1
 80079d2:	f7fc fbef 	bl	80041b4 <BSP_MotorControl_SetBridgeInputPwmFreq>
}
 80079d6:	b00b      	add	sp, #44	; 0x2c
 80079d8:	bd30      	pop	{r4, r5, pc}
 80079da:	bf00      	nop
 80079dc:	08009354 	.word	0x08009354
 80079e0:	08007963 	.word	0x08007963
 80079e4:	08007961 	.word	0x08007961

080079e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void)
{
 80079e8:	b507      	push	{r0, r1, r2, lr}
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 80079ea:	4b0e      	ldr	r3, [pc, #56]	; (8007a24 <HAL_MspInit+0x3c>)
 80079ec:	2100      	movs	r1, #0
 80079ee:	9100      	str	r1, [sp, #0]
 80079f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079f6:	645a      	str	r2, [r3, #68]	; 0x44
 80079f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079fa:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80079fe:	9200      	str	r2, [sp, #0]
 8007a00:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_PWR_CLK_ENABLE();
 8007a02:	9101      	str	r1, [sp, #4]
 8007a04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a06:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007a0a:	641a      	str	r2, [r3, #64]	; 0x40
 8007a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a12:	9301      	str	r3, [sp, #4]

	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8007a14:	2007      	movs	r0, #7
	__HAL_RCC_PWR_CLK_ENABLE();
 8007a16:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8007a18:	f7fc fe64 	bl	80046e4 <HAL_NVIC_SetPriorityGrouping>
	/* System interrupt init*/

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 8007a1c:	b003      	add	sp, #12
 8007a1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007a22:	bf00      	nop
 8007a24:	40023800 	.word	0x40023800

08007a28 <NMI_Handler>:
 8007a28:	4770      	bx	lr

08007a2a <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8007a2a:	e7fe      	b.n	8007a2a <HardFault_Handler>

08007a2c <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8007a2c:	e7fe      	b.n	8007a2c <MemManage_Handler>

08007a2e <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8007a2e:	e7fe      	b.n	8007a2e <BusFault_Handler>

08007a30 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8007a30:	e7fe      	b.n	8007a30 <UsageFault_Handler>

08007a32 <SVC_Handler>:
 8007a32:	4770      	bx	lr

08007a34 <DebugMon_Handler>:
 8007a34:	4770      	bx	lr

08007a36 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8007a36:	4770      	bx	lr

08007a38 <SysTick_Handler>:
void SysTick_Handler(void)
{
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8007a38:	f7fc bc5a 	b.w	80042f0 <HAL_IncTick>

08007a3c <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
	/* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

	/* USER CODE END DMA1_Stream0_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8007a3c:	4801      	ldr	r0, [pc, #4]	; (8007a44 <DMA1_Stream0_IRQHandler+0x8>)
 8007a3e:	f7fc bfab 	b.w	8004998 <HAL_DMA_IRQHandler>
 8007a42:	bf00      	nop
 8007a44:	200004e8 	.word	0x200004e8

08007a48 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
	/* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

	/* USER CODE END DMA1_Stream5_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8007a48:	4801      	ldr	r0, [pc, #4]	; (8007a50 <DMA1_Stream5_IRQHandler+0x8>)
 8007a4a:	f7fc bfa5 	b.w	8004998 <HAL_DMA_IRQHandler>
 8007a4e:	bf00      	nop
 8007a50:	200010f4 	.word	0x200010f4

08007a54 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
	/* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

	/* USER CODE END DMA1_Stream6_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8007a54:	4801      	ldr	r0, [pc, #4]	; (8007a5c <DMA1_Stream6_IRQHandler+0x8>)
 8007a56:	f7fc bf9f 	b.w	8004998 <HAL_DMA_IRQHandler>
 8007a5a:	bf00      	nop
 8007a5c:	20001214 	.word	0x20001214

08007a60 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
	/* USER CODE BEGIN ADC_IRQn 0 */

	/* USER CODE END ADC_IRQn 0 */
	HAL_ADC_IRQHandler(&hadc1);
 8007a60:	4801      	ldr	r0, [pc, #4]	; (8007a68 <ADC_IRQHandler+0x8>)
 8007a62:	f7fc bd12 	b.w	800448a <HAL_ADC_IRQHandler>
 8007a66:	bf00      	nop
 8007a68:	200003ec 	.word	0x200003ec

08007a6c <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
	/* USER CODE BEGIN TIM2_IRQn 0 */

	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 8007a6c:	4801      	ldr	r0, [pc, #4]	; (8007a74 <TIM2_IRQHandler+0x8>)
 8007a6e:	f7fe bd68 	b.w	8006542 <HAL_TIM_IRQHandler>
 8007a72:	bf00      	nop
 8007a74:	200010b8 	.word	0x200010b8

08007a78 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
	/* USER CODE BEGIN TIM3_IRQn 0 */

	/* USER CODE END TIM3_IRQn 0 */
	HAL_TIM_IRQHandler(&htim3);
 8007a78:	4801      	ldr	r0, [pc, #4]	; (8007a80 <TIM3_IRQHandler+0x8>)
 8007a7a:	f7fe bd62 	b.w	8006542 <HAL_TIM_IRQHandler>
 8007a7e:	bf00      	nop
 8007a80:	2000107c 	.word	0x2000107c

08007a84 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
	/* USER CODE BEGIN I2C1_EV_IRQn 0 */

	/* USER CODE END I2C1_EV_IRQn 0 */
	HAL_I2C_EV_IRQHandler(&hi2c1);
 8007a84:	4801      	ldr	r0, [pc, #4]	; (8007a8c <I2C1_EV_IRQHandler+0x8>)
 8007a86:	f7fd bd77 	b.w	8005578 <HAL_I2C_EV_IRQHandler>
 8007a8a:	bf00      	nop
 8007a8c:	20000494 	.word	0x20000494

08007a90 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
	/* USER CODE BEGIN I2C1_ER_IRQn 0 */

	/* USER CODE END I2C1_ER_IRQn 0 */
	HAL_I2C_ER_IRQHandler(&hi2c1);
 8007a90:	4801      	ldr	r0, [pc, #4]	; (8007a98 <I2C1_ER_IRQHandler+0x8>)
 8007a92:	f7fe b8db 	b.w	8005c4c <HAL_I2C_ER_IRQHandler>
 8007a96:	bf00      	nop
 8007a98:	20000494 	.word	0x20000494

08007a9c <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
	/* USER CODE BEGIN USART2_IRQn 0 */

	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8007a9c:	4801      	ldr	r0, [pc, #4]	; (8007aa4 <USART2_IRQHandler+0x8>)
 8007a9e:	f7ff b9ff 	b.w	8006ea0 <HAL_UART_IRQHandler>
 8007aa2:	bf00      	nop
 8007aa4:	20001038 	.word	0x20001038

08007aa8 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
	/* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

	/* USER CODE END DMA1_Stream7_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8007aa8:	4801      	ldr	r0, [pc, #4]	; (8007ab0 <DMA1_Stream7_IRQHandler+0x8>)
 8007aaa:	f7fc bf75 	b.w	8004998 <HAL_DMA_IRQHandler>
 8007aae:	bf00      	nop
 8007ab0:	20000434 	.word	0x20000434

08007ab4 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
	/* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

	/* USER CODE END DMA2_Stream1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8007ab4:	4801      	ldr	r0, [pc, #4]	; (8007abc <DMA2_Stream1_IRQHandler+0x8>)
 8007ab6:	f7fc bf6f 	b.w	8004998 <HAL_DMA_IRQHandler>
 8007aba:	bf00      	nop
 8007abc:	20001154 	.word	0x20001154

08007ac0 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
	/* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

	/* USER CODE END DMA2_Stream6_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8007ac0:	4801      	ldr	r0, [pc, #4]	; (8007ac8 <DMA2_Stream6_IRQHandler+0x8>)
 8007ac2:	f7fc bf69 	b.w	8004998 <HAL_DMA_IRQHandler>
 8007ac6:	bf00      	nop
 8007ac8:	200011b4 	.word	0x200011b4

08007acc <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
	/* USER CODE BEGIN USART6_IRQn 0 */

	/* USER CODE END USART6_IRQn 0 */
	HAL_UART_IRQHandler(&huart6);
 8007acc:	4801      	ldr	r0, [pc, #4]	; (8007ad4 <USART6_IRQHandler+0x8>)
 8007ace:	f7ff b9e7 	b.w	8006ea0 <HAL_UART_IRQHandler>
 8007ad2:	bf00      	nop
 8007ad4:	20001274 	.word	0x20001274

08007ad8 <_read>:
	while (1) {
	}                       /* Make sure we hang here */
}

int _read(int file, char *ptr, int len)
{
 8007ad8:	b570      	push	{r4, r5, r6, lr}
 8007ada:	460e      	mov	r6, r1
 8007adc:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8007ade:	460c      	mov	r4, r1
 8007ae0:	1ba3      	subs	r3, r4, r6
 8007ae2:	429d      	cmp	r5, r3
 8007ae4:	dc01      	bgt.n	8007aea <_read+0x12>
		*ptr++ = __io_getchar();
	}

	return len;
}
 8007ae6:	4628      	mov	r0, r5
 8007ae8:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8007aea:	f7ff fb38 	bl	800715e <__io_getchar>
 8007aee:	f804 0b01 	strb.w	r0, [r4], #1
 8007af2:	e7f5      	b.n	8007ae0 <_read+0x8>

08007af4 <_write>:

int _write(int file, char *ptr, int len)
{
 8007af4:	b570      	push	{r4, r5, r6, lr}
 8007af6:	460e      	mov	r6, r1
 8007af8:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8007afa:	460c      	mov	r4, r1
 8007afc:	1ba3      	subs	r3, r4, r6
 8007afe:	429d      	cmp	r5, r3
 8007b00:	dc01      	bgt.n	8007b06 <_write+0x12>
		__io_putchar(*ptr++);
	}
	return len;
}
 8007b02:	4628      	mov	r0, r5
 8007b04:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8007b06:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007b0a:	f7ff fb23 	bl	8007154 <__io_putchar>
 8007b0e:	e7f5      	b.n	8007afc <_write+0x8>

08007b10 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8007b10:	b508      	push	{r3, lr}
	extern char end asm ("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007b12:	4b0a      	ldr	r3, [pc, #40]	; (8007b3c <_sbrk+0x2c>)
 8007b14:	6819      	ldr	r1, [r3, #0]
{
 8007b16:	4602      	mov	r2, r0
	if (heap_end == 0)
 8007b18:	b909      	cbnz	r1, 8007b1e <_sbrk+0xe>
		heap_end = &end;
 8007b1a:	4909      	ldr	r1, [pc, #36]	; (8007b40 <_sbrk+0x30>)
 8007b1c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8007b1e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr) {
 8007b20:	4669      	mov	r1, sp
 8007b22:	4402      	add	r2, r0
 8007b24:	428a      	cmp	r2, r1
 8007b26:	d906      	bls.n	8007b36 <_sbrk+0x26>
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
<<<<<<< Updated upstream
 8007b28:	f000 fba4 	bl	8008274 <__errno>
 8007b2c:	230c      	movs	r3, #12
 8007b2e:	6003      	str	r3, [r0, #0]
		return (caddr_t)-1;
 8007b30:	f04f 30ff 	mov.w	r0, #4294967295
 8007b34:	bd08      	pop	{r3, pc}
=======
 8004038:	f000 fabc 	bl	80045b4 <__errno>
 800403c:	230c      	movs	r3, #12
 800403e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8004040:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004044:	bd08      	pop	{r3, pc}
>>>>>>> Stashed changes
	}

	heap_end += incr;
 8007b36:	601a      	str	r2, [r3, #0]

	return (caddr_t)prev_heap_end;
}
 8007b38:	bd08      	pop	{r3, pc}
 8007b3a:	bf00      	nop
 8007b3c:	20000268 	.word	0x20000268
 8007b40:	200013b8 	.word	0x200013b8

08007b44 <_close>:

int _close(int file)
{
	return -1;
}
<<<<<<< Updated upstream
 8007b44:	f04f 30ff 	mov.w	r0, #4294967295
 8007b48:	4770      	bx	lr
=======
 8004054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004058:	4770      	bx	lr
>>>>>>> Stashed changes

08007b4a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8007b4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007b4e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8007b50:	2000      	movs	r0, #0
 8007b52:	4770      	bx	lr

08007b54 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8007b54:	2001      	movs	r0, #1
 8007b56:	4770      	bx	lr

08007b58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8007b58:	2000      	movs	r0, #0
 8007b5a:	4770      	bx	lr

08007b5c <SystemInit>:
 */
void SystemInit(void)
{
	/* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8007b5c:	490f      	ldr	r1, [pc, #60]	; (8007b9c <SystemInit+0x40>)
 8007b5e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8007b62:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR |= (uint32_t)0x00000001;
 8007b6a:	4b0d      	ldr	r3, [pc, #52]	; (8007ba0 <SystemInit+0x44>)
 8007b6c:	681a      	ldr	r2, [r3, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8007b6e:	2000      	movs	r0, #0
	RCC->CR |= (uint32_t)0x00000001;
 8007b70:	f042 0201 	orr.w	r2, r2, #1
 8007b74:	601a      	str	r2, [r3, #0]
	RCC->CFGR = 0x00000000;
 8007b76:	6098      	str	r0, [r3, #8]

	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8007b7e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007b82:	601a      	str	r2, [r3, #0]

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x24003010;
 8007b84:	4a07      	ldr	r2, [pc, #28]	; (8007ba4 <SystemInit+0x48>)
 8007b86:	605a      	str	r2, [r3, #4]

	/* Reset HSEBYP bit */
	RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007b8e:	601a      	str	r2, [r3, #0]

	/* Disable all interrupts */
	RCC->CIR = 0x00000000;
 8007b90:	60d8      	str	r0, [r3, #12]

	/* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
	SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007b92:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007b96:	608b      	str	r3, [r1, #8]
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	e000ed00 	.word	0xe000ed00
 8007ba0:	40023800 	.word	0x40023800
 8007ba4:	24003010 	.word	0x24003010

08007ba8 <HAL_TIM_Base_MspInit>:
	HAL_TIM_MspPostInit(&htim3);
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
	if (tim_baseHandle->Instance == TIM2) {
 8007ba8:	6803      	ldr	r3, [r0, #0]
 8007baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8007bae:	b507      	push	{r0, r1, r2, lr}
	if (tim_baseHandle->Instance == TIM2) {
 8007bb0:	d116      	bne.n	8007be0 <HAL_TIM_Base_MspInit+0x38>
		/* USER CODE BEGIN TIM2_MspInit 0 */

		/* USER CODE END TIM2_MspInit 0 */
		/* TIM2 clock enable */
		__HAL_RCC_TIM2_CLK_ENABLE();
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8007bb8:	9200      	str	r2, [sp, #0]
 8007bba:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007bbc:	f041 0101 	orr.w	r1, r1, #1
 8007bc0:	6419      	str	r1, [r3, #64]	; 0x40
 8007bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc4:	f003 0301 	and.w	r3, r3, #1
 8007bc8:	9300      	str	r3, [sp, #0]

		/* TIM2 interrupt Init */
		HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007bca:	201c      	movs	r0, #28
 8007bcc:	4611      	mov	r1, r2
		__HAL_RCC_TIM2_CLK_ENABLE();
 8007bce:	9b00      	ldr	r3, [sp, #0]
		HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007bd0:	f7fc fd9a 	bl	8004708 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007bd4:	201c      	movs	r0, #28
		/* TIM3 clock enable */
		__HAL_RCC_TIM3_CLK_ENABLE();

		/* TIM3 interrupt Init */
		HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007bd6:	f7fc fdcb 	bl	8004770 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN TIM3_MspInit 1 */

		/* USER CODE END TIM3_MspInit 1 */
	}
}
 8007bda:	b003      	add	sp, #12
 8007bdc:	f85d fb04 	ldr.w	pc, [sp], #4
	}else if (tim_baseHandle->Instance == TIM3) {
 8007be0:	4a0a      	ldr	r2, [pc, #40]	; (8007c0c <HAL_TIM_Base_MspInit+0x64>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d1f9      	bne.n	8007bda <HAL_TIM_Base_MspInit+0x32>
		__HAL_RCC_TIM3_CLK_ENABLE();
 8007be6:	2200      	movs	r2, #0
 8007be8:	4b09      	ldr	r3, [pc, #36]	; (8007c10 <HAL_TIM_Base_MspInit+0x68>)
 8007bea:	9201      	str	r2, [sp, #4]
 8007bec:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007bee:	f041 0102 	orr.w	r1, r1, #2
 8007bf2:	6419      	str	r1, [r3, #64]	; 0x40
 8007bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf6:	f003 0302 	and.w	r3, r3, #2
 8007bfa:	9301      	str	r3, [sp, #4]
		HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8007bfc:	201d      	movs	r0, #29
 8007bfe:	4611      	mov	r1, r2
		__HAL_RCC_TIM3_CLK_ENABLE();
 8007c00:	9b01      	ldr	r3, [sp, #4]
		HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8007c02:	f7fc fd81 	bl	8004708 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007c06:	201d      	movs	r0, #29
 8007c08:	e7e5      	b.n	8007bd6 <HAL_TIM_Base_MspInit+0x2e>
 8007c0a:	bf00      	nop
 8007c0c:	40000400 	.word	0x40000400
 8007c10:	40023800 	.word	0x40023800

08007c14 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007c14:	b510      	push	{r4, lr}
 8007c16:	4604      	mov	r4, r0
 8007c18:	b088      	sub	sp, #32
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8007c1a:	2214      	movs	r2, #20
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	a803      	add	r0, sp, #12
 8007c20:	f000 fcd9 	bl	80085d6 <memset>
	if (timHandle->Instance == TIM2) {
 8007c24:	6823      	ldr	r3, [r4, #0]
 8007c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c2a:	d117      	bne.n	8007c5c <HAL_TIM_MspPostInit+0x48>
		/* USER CODE BEGIN TIM2_MspPostInit 0 */

		/* USER CODE END TIM2_MspPostInit 0 */
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	9301      	str	r3, [sp, #4]
 8007c30:	4b16      	ldr	r3, [pc, #88]	; (8007c8c <HAL_TIM_MspPostInit+0x78>)
		GPIO_InitStruct.Pin = PWM_IN1B_TIM2CH1_Pin | PWM_IN2B_TIM2CH2_Pin;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c32:	4817      	ldr	r0, [pc, #92]	; (8007c90 <HAL_TIM_MspPostInit+0x7c>)
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8007c34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c36:	f042 0201 	orr.w	r2, r2, #1
 8007c3a:	631a      	str	r2, [r3, #48]	; 0x30
 8007c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c3e:	f003 0301 	and.w	r3, r3, #1
 8007c42:	9301      	str	r3, [sp, #4]
 8007c44:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin = PWM_IN1B_TIM2CH1_Pin | PWM_IN2B_TIM2CH2_Pin;
 8007c46:	2303      	movs	r3, #3
 8007c48:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c4a:	2302      	movs	r3, #2
 8007c4c:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	9307      	str	r3, [sp, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c52:	a903      	add	r1, sp, #12
		GPIO_InitStruct.Pin = PWM_IN1A_TIM3CH1_Pin | PWM_IN2A_TIM3CH2_Pin;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c54:	f7fc ff5a 	bl	8004b0c <HAL_GPIO_Init>

		/* USER CODE BEGIN TIM3_MspPostInit 1 */

		/* USER CODE END TIM3_MspPostInit 1 */
	}
}
 8007c58:	b008      	add	sp, #32
 8007c5a:	bd10      	pop	{r4, pc}
	}else if (timHandle->Instance == TIM3) {
 8007c5c:	4a0d      	ldr	r2, [pc, #52]	; (8007c94 <HAL_TIM_MspPostInit+0x80>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d1fa      	bne.n	8007c58 <HAL_TIM_MspPostInit+0x44>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8007c62:	2300      	movs	r3, #0
 8007c64:	9302      	str	r3, [sp, #8]
 8007c66:	4b09      	ldr	r3, [pc, #36]	; (8007c8c <HAL_TIM_MspPostInit+0x78>)
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c68:	480b      	ldr	r0, [pc, #44]	; (8007c98 <HAL_TIM_MspPostInit+0x84>)
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8007c6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c6c:	f042 0202 	orr.w	r2, r2, #2
 8007c70:	631a      	str	r2, [r3, #48]	; 0x30
 8007c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c74:	f003 0302 	and.w	r3, r3, #2
 8007c78:	9302      	str	r3, [sp, #8]
 8007c7a:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Pin = PWM_IN1A_TIM3CH1_Pin | PWM_IN2A_TIM3CH2_Pin;
 8007c7c:	2330      	movs	r3, #48	; 0x30
 8007c7e:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c80:	2302      	movs	r3, #2
 8007c82:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007c84:	9307      	str	r3, [sp, #28]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c86:	a903      	add	r1, sp, #12
 8007c88:	e7e4      	b.n	8007c54 <HAL_TIM_MspPostInit+0x40>
 8007c8a:	bf00      	nop
 8007c8c:	40023800 	.word	0x40023800
 8007c90:	40020000 	.word	0x40020000
 8007c94:	40000400 	.word	0x40000400
 8007c98:	40020400 	.word	0x40020400

08007c9c <MX_TIM2_Init>:
{
 8007c9c:	b510      	push	{r4, lr}
 8007c9e:	b08e      	sub	sp, #56	; 0x38
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8007ca0:	2210      	movs	r2, #16
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	a803      	add	r0, sp, #12
 8007ca6:	f000 fc96 	bl	80085d6 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8007caa:	2400      	movs	r4, #0
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8007cac:	221c      	movs	r2, #28
 8007cae:	4621      	mov	r1, r4
 8007cb0:	eb0d 0002 	add.w	r0, sp, r2
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8007cb4:	9401      	str	r4, [sp, #4]
 8007cb6:	9402      	str	r4, [sp, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8007cb8:	f000 fc8d 	bl	80085d6 <memset>
	htim2.Instance = TIM2;
 8007cbc:	4820      	ldr	r0, [pc, #128]	; (8007d40 <MX_TIM2_Init+0xa4>)
 8007cbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	htim2.Init.Prescaler = 0;
 8007cc2:	e880 0018 	stmia.w	r0, {r3, r4}
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007cc6:	6084      	str	r4, [r0, #8]
	htim2.Init.Period = 0;
 8007cc8:	60c4      	str	r4, [r0, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007cca:	6104      	str	r4, [r0, #16]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8007ccc:	f7fe fd28 	bl	8006720 <HAL_TIM_Base_Init>
 8007cd0:	b108      	cbz	r0, 8007cd6 <MX_TIM2_Init+0x3a>
		Error_Handler();
 8007cd2:	f7ff fe45 	bl	8007960 <Error_Handler>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007cd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8007cda:	a903      	add	r1, sp, #12
 8007cdc:	4818      	ldr	r0, [pc, #96]	; (8007d40 <MX_TIM2_Init+0xa4>)
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007cde:	9303      	str	r3, [sp, #12]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8007ce0:	f7fe fb71 	bl	80063c6 <HAL_TIM_ConfigClockSource>
 8007ce4:	b108      	cbz	r0, 8007cea <MX_TIM2_Init+0x4e>
		Error_Handler();
 8007ce6:	f7ff fe3b 	bl	8007960 <Error_Handler>
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8007cea:	4815      	ldr	r0, [pc, #84]	; (8007d40 <MX_TIM2_Init+0xa4>)
 8007cec:	f7fe fd32 	bl	8006754 <HAL_TIM_PWM_Init>
 8007cf0:	b108      	cbz	r0, 8007cf6 <MX_TIM2_Init+0x5a>
		Error_Handler();
 8007cf2:	f7ff fe35 	bl	8007960 <Error_Handler>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007cf6:	2400      	movs	r4, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8007cf8:	a901      	add	r1, sp, #4
 8007cfa:	4811      	ldr	r0, [pc, #68]	; (8007d40 <MX_TIM2_Init+0xa4>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007cfc:	9401      	str	r4, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007cfe:	9402      	str	r4, [sp, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8007d00:	f7fe fe20 	bl	8006944 <HAL_TIMEx_MasterConfigSynchronization>
 8007d04:	b108      	cbz	r0, 8007d0a <MX_TIM2_Init+0x6e>
		Error_Handler();
 8007d06:	f7ff fe2b 	bl	8007960 <Error_Handler>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007d0a:	2360      	movs	r3, #96	; 0x60
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	a907      	add	r1, sp, #28
 8007d10:	480b      	ldr	r0, [pc, #44]	; (8007d40 <MX_TIM2_Init+0xa4>)
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007d12:	9307      	str	r3, [sp, #28]
	sConfigOC.Pulse = 0;
 8007d14:	9408      	str	r4, [sp, #32]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007d16:	9409      	str	r4, [sp, #36]	; 0x24
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007d18:	940b      	str	r4, [sp, #44]	; 0x2c
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8007d1a:	f7fe fd61 	bl	80067e0 <HAL_TIM_PWM_ConfigChannel>
 8007d1e:	b108      	cbz	r0, 8007d24 <MX_TIM2_Init+0x88>
		Error_Handler();
 8007d20:	f7ff fe1e 	bl	8007960 <Error_Handler>
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8007d24:	2204      	movs	r2, #4
 8007d26:	a907      	add	r1, sp, #28
 8007d28:	4805      	ldr	r0, [pc, #20]	; (8007d40 <MX_TIM2_Init+0xa4>)
 8007d2a:	f7fe fd59 	bl	80067e0 <HAL_TIM_PWM_ConfigChannel>
 8007d2e:	b108      	cbz	r0, 8007d34 <MX_TIM2_Init+0x98>
		Error_Handler();
 8007d30:	f7ff fe16 	bl	8007960 <Error_Handler>
	HAL_TIM_MspPostInit(&htim2);
 8007d34:	4802      	ldr	r0, [pc, #8]	; (8007d40 <MX_TIM2_Init+0xa4>)
 8007d36:	f7ff ff6d 	bl	8007c14 <HAL_TIM_MspPostInit>
}
 8007d3a:	b00e      	add	sp, #56	; 0x38
 8007d3c:	bd10      	pop	{r4, pc}
 8007d3e:	bf00      	nop
 8007d40:	200010b8 	.word	0x200010b8

08007d44 <MX_TIM3_Init>:
{
 8007d44:	b510      	push	{r4, lr}
 8007d46:	b08e      	sub	sp, #56	; 0x38
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8007d48:	2210      	movs	r2, #16
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	a803      	add	r0, sp, #12
 8007d4e:	f000 fc42 	bl	80085d6 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8007d52:	2400      	movs	r4, #0
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8007d54:	221c      	movs	r2, #28
 8007d56:	4621      	mov	r1, r4
 8007d58:	eb0d 0002 	add.w	r0, sp, r2
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8007d5c:	9401      	str	r4, [sp, #4]
 8007d5e:	9402      	str	r4, [sp, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8007d60:	f000 fc39 	bl	80085d6 <memset>
	htim3.Instance = TIM3;
 8007d64:	481f      	ldr	r0, [pc, #124]	; (8007de4 <MX_TIM3_Init+0xa0>)
 8007d66:	4b20      	ldr	r3, [pc, #128]	; (8007de8 <MX_TIM3_Init+0xa4>)
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007d68:	6084      	str	r4, [r0, #8]
	htim3.Init.Prescaler = 0;
 8007d6a:	e880 0018 	stmia.w	r0, {r3, r4}
	htim3.Init.Period = 0;
 8007d6e:	60c4      	str	r4, [r0, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007d70:	6104      	str	r4, [r0, #16]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8007d72:	f7fe fcd5 	bl	8006720 <HAL_TIM_Base_Init>
 8007d76:	b108      	cbz	r0, 8007d7c <MX_TIM3_Init+0x38>
		Error_Handler();
 8007d78:	f7ff fdf2 	bl	8007960 <Error_Handler>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007d7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8007d80:	a903      	add	r1, sp, #12
 8007d82:	4818      	ldr	r0, [pc, #96]	; (8007de4 <MX_TIM3_Init+0xa0>)
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007d84:	9303      	str	r3, [sp, #12]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8007d86:	f7fe fb1e 	bl	80063c6 <HAL_TIM_ConfigClockSource>
 8007d8a:	b108      	cbz	r0, 8007d90 <MX_TIM3_Init+0x4c>
		Error_Handler();
 8007d8c:	f7ff fde8 	bl	8007960 <Error_Handler>
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8007d90:	4814      	ldr	r0, [pc, #80]	; (8007de4 <MX_TIM3_Init+0xa0>)
 8007d92:	f7fe fcdf 	bl	8006754 <HAL_TIM_PWM_Init>
 8007d96:	b108      	cbz	r0, 8007d9c <MX_TIM3_Init+0x58>
		Error_Handler();
 8007d98:	f7ff fde2 	bl	8007960 <Error_Handler>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007d9c:	2400      	movs	r4, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8007d9e:	a901      	add	r1, sp, #4
 8007da0:	4810      	ldr	r0, [pc, #64]	; (8007de4 <MX_TIM3_Init+0xa0>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007da2:	9401      	str	r4, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007da4:	9402      	str	r4, [sp, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8007da6:	f7fe fdcd 	bl	8006944 <HAL_TIMEx_MasterConfigSynchronization>
 8007daa:	b108      	cbz	r0, 8007db0 <MX_TIM3_Init+0x6c>
		Error_Handler();
 8007dac:	f7ff fdd8 	bl	8007960 <Error_Handler>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007db0:	2360      	movs	r3, #96	; 0x60
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8007db2:	2200      	movs	r2, #0
 8007db4:	a907      	add	r1, sp, #28
 8007db6:	480b      	ldr	r0, [pc, #44]	; (8007de4 <MX_TIM3_Init+0xa0>)
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007db8:	9307      	str	r3, [sp, #28]
	sConfigOC.Pulse = 0;
 8007dba:	9408      	str	r4, [sp, #32]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007dbc:	9409      	str	r4, [sp, #36]	; 0x24
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007dbe:	940b      	str	r4, [sp, #44]	; 0x2c
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8007dc0:	f7fe fd0e 	bl	80067e0 <HAL_TIM_PWM_ConfigChannel>
 8007dc4:	b108      	cbz	r0, 8007dca <MX_TIM3_Init+0x86>
		Error_Handler();
 8007dc6:	f7ff fdcb 	bl	8007960 <Error_Handler>
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8007dca:	2204      	movs	r2, #4
 8007dcc:	a907      	add	r1, sp, #28
 8007dce:	4805      	ldr	r0, [pc, #20]	; (8007de4 <MX_TIM3_Init+0xa0>)
 8007dd0:	f7fe fd06 	bl	80067e0 <HAL_TIM_PWM_ConfigChannel>
 8007dd4:	b108      	cbz	r0, 8007dda <MX_TIM3_Init+0x96>
		Error_Handler();
 8007dd6:	f7ff fdc3 	bl	8007960 <Error_Handler>
	HAL_TIM_MspPostInit(&htim3);
 8007dda:	4802      	ldr	r0, [pc, #8]	; (8007de4 <MX_TIM3_Init+0xa0>)
 8007ddc:	f7ff ff1a 	bl	8007c14 <HAL_TIM_MspPostInit>
}
 8007de0:	b00e      	add	sp, #56	; 0x38
 8007de2:	bd10      	pop	{r4, pc}
 8007de4:	2000107c 	.word	0x2000107c
 8007de8:	40000400 	.word	0x40000400

08007dec <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8007dec:	b508      	push	{r3, lr}
	huart2.Instance = USART2;
 8007dee:	480b      	ldr	r0, [pc, #44]	; (8007e1c <MX_USART2_UART_Init+0x30>)
	huart2.Init.BaudRate = 115200;
 8007df0:	4b0b      	ldr	r3, [pc, #44]	; (8007e20 <MX_USART2_UART_Init+0x34>)
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007df2:	2200      	movs	r2, #0
	huart2.Init.BaudRate = 115200;
 8007df4:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8007df8:	e880 4008 	stmia.w	r0, {r3, lr}
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.Mode = UART_MODE_TX_RX;
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
	if (HAL_MultiProcessor_Init(&huart2, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 8007dfc:	4611      	mov	r1, r2
	huart2.Init.Mode = UART_MODE_TX_RX;
 8007dfe:	230c      	movs	r3, #12
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007e00:	6082      	str	r2, [r0, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8007e02:	60c2      	str	r2, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8007e04:	6102      	str	r2, [r0, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8007e06:	6143      	str	r3, [r0, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007e08:	6182      	str	r2, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007e0a:	61c2      	str	r2, [r0, #28]
	if (HAL_MultiProcessor_Init(&huart2, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 8007e0c:	f7fe fee6 	bl	8006bdc <HAL_MultiProcessor_Init>
 8007e10:	b118      	cbz	r0, 8007e1a <MX_USART2_UART_Init+0x2e>
		Error_Handler();
	}
}
 8007e12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 8007e16:	f7ff bda3 	b.w	8007960 <Error_Handler>
 8007e1a:	bd08      	pop	{r3, pc}
 8007e1c:	20001038 	.word	0x20001038
 8007e20:	40004400 	.word	0x40004400

08007e24 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8007e24:	b508      	push	{r3, lr}
	huart6.Instance = USART6;
 8007e26:	480b      	ldr	r0, [pc, #44]	; (8007e54 <MX_USART6_UART_Init+0x30>)
	huart6.Init.BaudRate = 115200;
 8007e28:	4b0b      	ldr	r3, [pc, #44]	; (8007e58 <MX_USART6_UART_Init+0x34>)
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8007e2a:	2200      	movs	r2, #0
	huart6.Init.BaudRate = 115200;
 8007e2c:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8007e30:	e880 4008 	stmia.w	r0, {r3, lr}
	huart6.Init.StopBits = UART_STOPBITS_1;
	huart6.Init.Parity = UART_PARITY_NONE;
	huart6.Init.Mode = UART_MODE_TX_RX;
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
	if (HAL_MultiProcessor_Init(&huart6, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 8007e34:	4611      	mov	r1, r2
	huart6.Init.Mode = UART_MODE_TX_RX;
 8007e36:	230c      	movs	r3, #12
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8007e38:	6082      	str	r2, [r0, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8007e3a:	60c2      	str	r2, [r0, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8007e3c:	6102      	str	r2, [r0, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8007e3e:	6143      	str	r3, [r0, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007e40:	6182      	str	r2, [r0, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8007e42:	61c2      	str	r2, [r0, #28]
	if (HAL_MultiProcessor_Init(&huart6, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 8007e44:	f7fe feca 	bl	8006bdc <HAL_MultiProcessor_Init>
 8007e48:	b118      	cbz	r0, 8007e52 <MX_USART6_UART_Init+0x2e>
		Error_Handler();
	}
}
 8007e4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 8007e4e:	f7ff bd87 	b.w	8007960 <Error_Handler>
 8007e52:	bd08      	pop	{r3, pc}
 8007e54:	20001274 	.word	0x20001274
 8007e58:	40011400 	.word	0x40011400

08007e5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8007e60:	2214      	movs	r2, #20
{
 8007e62:	b08a      	sub	sp, #40	; 0x28
 8007e64:	4605      	mov	r5, r0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8007e66:	2100      	movs	r1, #0
 8007e68:	eb0d 0002 	add.w	r0, sp, r2
 8007e6c:	f000 fbb3 	bl	80085d6 <memset>
	if (uartHandle->Instance == USART2) {
 8007e70:	682b      	ldr	r3, [r5, #0]
 8007e72:	4a6a      	ldr	r2, [pc, #424]	; (800801c <HAL_UART_MspInit+0x1c0>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d15b      	bne.n	8007f30 <HAL_UART_MspInit+0xd4>
		/* USER CODE BEGIN USART2_MspInit 0 */

		/* USER CODE END USART2_MspInit 0 */
		/* USART2 clock enable */
		__HAL_RCC_USART2_CLK_ENABLE();
 8007e78:	2600      	movs	r6, #0
 8007e7a:	4b69      	ldr	r3, [pc, #420]	; (8008020 <HAL_UART_MspInit+0x1c4>)
 8007e7c:	9600      	str	r6, [sp, #0]
 8007e7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		GPIO_InitStruct.Pin = USART_TX_Pin | USART_RX_Pin;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e80:	4868      	ldr	r0, [pc, #416]	; (8008024 <HAL_UART_MspInit+0x1c8>)

		/* USART2 DMA Init */
		/* USART2_RX Init */
		hdma_usart2_rx.Instance = DMA1_Stream5;
 8007e82:	4c69      	ldr	r4, [pc, #420]	; (8008028 <HAL_UART_MspInit+0x1cc>)
		__HAL_RCC_USART2_CLK_ENABLE();
 8007e84:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007e88:	641a      	str	r2, [r3, #64]	; 0x40
 8007e8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e8c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8007e90:	9200      	str	r2, [sp, #0]
 8007e92:	9a00      	ldr	r2, [sp, #0]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8007e94:	9601      	str	r6, [sp, #4]
 8007e96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e98:	f042 0201 	orr.w	r2, r2, #1
 8007e9c:	631a      	str	r2, [r3, #48]	; 0x30
 8007e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea0:	f003 0301 	and.w	r3, r3, #1
 8007ea4:	9301      	str	r3, [sp, #4]
 8007ea6:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin = USART_TX_Pin | USART_RX_Pin;
 8007ea8:	230c      	movs	r3, #12
 8007eaa:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007eac:	2302      	movs	r3, #2
 8007eae:	9306      	str	r3, [sp, #24]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007eb0:	a905      	add	r1, sp, #20
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007eb2:	2307      	movs	r3, #7
 8007eb4:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007eb6:	f7fc fe29 	bl	8004b0c <HAL_GPIO_Init>
		hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8007eba:	4b5c      	ldr	r3, [pc, #368]	; (800802c <HAL_UART_MspInit+0x1d0>)
		hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007ebc:	60a6      	str	r6, [r4, #8]
		hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8007ebe:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
 8007ec2:	e884 0088 	stmia.w	r4, {r3, r7}
		hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
		hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
		hdma_usart2_rx.Init.Mode = DMA_NORMAL;
		hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
		hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
		if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK) {
 8007ec6:	4620      	mov	r0, r4
		hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007ec8:	f44f 6380 	mov.w	r3, #1024	; 0x400
		hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007ecc:	60e6      	str	r6, [r4, #12]
		hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007ece:	6123      	str	r3, [r4, #16]
		hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007ed0:	6166      	str	r6, [r4, #20]
		hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007ed2:	61a6      	str	r6, [r4, #24]
		hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8007ed4:	61e6      	str	r6, [r4, #28]
		hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007ed6:	6226      	str	r6, [r4, #32]
		hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007ed8:	6266      	str	r6, [r4, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK) {
 8007eda:	f7fc fc8f 	bl	80047fc <HAL_DMA_Init>
 8007ede:	b108      	cbz	r0, 8007ee4 <HAL_UART_MspInit+0x88>
			Error_Handler();
 8007ee0:	f7ff fd3e 	bl	8007960 <Error_Handler>
		}

		__HAL_LINKDMA(uartHandle, hdmarx, hdma_usart2_rx);
 8007ee4:	636c      	str	r4, [r5, #52]	; 0x34

		/* USART2_TX Init */
		hdma_usart2_tx.Instance = DMA1_Stream6;
		hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
		hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007ee6:	4852      	ldr	r0, [pc, #328]	; (8008030 <HAL_UART_MspInit+0x1d4>)
		__HAL_LINKDMA(uartHandle, hdmarx, hdma_usart2_rx);
 8007ee8:	63a5      	str	r5, [r4, #56]	; 0x38
		hdma_usart2_tx.Instance = DMA1_Stream6;
 8007eea:	4c52      	ldr	r4, [pc, #328]	; (8008034 <HAL_UART_MspInit+0x1d8>)
		hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007eec:	2340      	movs	r3, #64	; 0x40
 8007eee:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8007ef2:	e884 000b 	stmia.w	r4, {r0, r1, r3}
		hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
		hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007ef6:	f44f 6280 	mov.w	r2, #1024	; 0x400
		hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007efa:	2300      	movs	r3, #0
		hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
		hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
		hdma_usart2_tx.Init.Mode = DMA_NORMAL;
		hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
		hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
		if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK) {
 8007efc:	4620      	mov	r0, r4
		hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007efe:	60e3      	str	r3, [r4, #12]
		hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007f00:	6122      	str	r2, [r4, #16]
		hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007f02:	6163      	str	r3, [r4, #20]
		hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007f04:	61a3      	str	r3, [r4, #24]
		hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8007f06:	61e3      	str	r3, [r4, #28]
		hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007f08:	6223      	str	r3, [r4, #32]
		hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007f0a:	6263      	str	r3, [r4, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK) {
 8007f0c:	f7fc fc76 	bl	80047fc <HAL_DMA_Init>
 8007f10:	b108      	cbz	r0, 8007f16 <HAL_UART_MspInit+0xba>
			Error_Handler();
 8007f12:	f7ff fd25 	bl	8007960 <Error_Handler>
		}

		__HAL_LINKDMA(uartHandle, hdmatx, hdma_usart2_tx);

		/* USART2 interrupt Init */
		HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8007f16:	2200      	movs	r2, #0
		__HAL_LINKDMA(uartHandle, hdmatx, hdma_usart2_tx);
 8007f18:	632c      	str	r4, [r5, #48]	; 0x30
		HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8007f1a:	2026      	movs	r0, #38	; 0x26
 8007f1c:	4611      	mov	r1, r2
		__HAL_LINKDMA(uartHandle, hdmatx, hdma_usart2_tx);
 8007f1e:	63a5      	str	r5, [r4, #56]	; 0x38
		HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8007f20:	f7fc fbf2 	bl	8004708 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007f24:	2026      	movs	r0, #38	; 0x26

		__HAL_LINKDMA(uartHandle, hdmatx, hdma_usart6_tx);

		/* USART6 interrupt Init */
		HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
		HAL_NVIC_EnableIRQ(USART6_IRQn);
 8007f26:	f7fc fc23 	bl	8004770 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN USART6_MspInit 1 */

		/* USER CODE END USART6_MspInit 1 */
	}
}
 8007f2a:	b00a      	add	sp, #40	; 0x28
 8007f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}else if (uartHandle->Instance == USART6) {
 8007f30:	4a41      	ldr	r2, [pc, #260]	; (8008038 <HAL_UART_MspInit+0x1dc>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d1f9      	bne.n	8007f2a <HAL_UART_MspInit+0xce>
		__HAL_RCC_USART6_CLK_ENABLE();
 8007f36:	2600      	movs	r6, #0
 8007f38:	4b39      	ldr	r3, [pc, #228]	; (8008020 <HAL_UART_MspInit+0x1c4>)
 8007f3a:	9602      	str	r6, [sp, #8]
 8007f3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
		HAL_GPIO_Init(RPI_USART6TX_GPIO_Port, &GPIO_InitStruct);
 8007f3e:	483f      	ldr	r0, [pc, #252]	; (800803c <HAL_UART_MspInit+0x1e0>)
		__HAL_RCC_USART6_CLK_ENABLE();
 8007f40:	f042 0220 	orr.w	r2, r2, #32
 8007f44:	645a      	str	r2, [r3, #68]	; 0x44
 8007f46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f48:	f002 0220 	and.w	r2, r2, #32
 8007f4c:	9202      	str	r2, [sp, #8]
 8007f4e:	9a02      	ldr	r2, [sp, #8]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8007f50:	9603      	str	r6, [sp, #12]
 8007f52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f54:	f042 0204 	orr.w	r2, r2, #4
 8007f58:	631a      	str	r2, [r3, #48]	; 0x30
 8007f5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f5c:	f002 0204 	and.w	r2, r2, #4
 8007f60:	9203      	str	r2, [sp, #12]
 8007f62:	9a03      	ldr	r2, [sp, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8007f64:	9604      	str	r6, [sp, #16]
 8007f66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f68:	f042 0201 	orr.w	r2, r2, #1
 8007f6c:	631a      	str	r2, [r3, #48]	; 0x30
 8007f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f70:	f003 0301 	and.w	r3, r3, #1
 8007f74:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8007f76:	2408      	movs	r4, #8
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8007f78:	9b04      	ldr	r3, [sp, #16]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8007f7a:	9409      	str	r4, [sp, #36]	; 0x24
		GPIO_InitStruct.Pin = RPI_USART6TX_Pin;
 8007f7c:	2340      	movs	r3, #64	; 0x40
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f7e:	f04f 0802 	mov.w	r8, #2
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f82:	2703      	movs	r7, #3
		HAL_GPIO_Init(RPI_USART6TX_GPIO_Port, &GPIO_InitStruct);
 8007f84:	a905      	add	r1, sp, #20
		GPIO_InitStruct.Pin = RPI_USART6TX_Pin;
 8007f86:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f88:	f8cd 8018 	str.w	r8, [sp, #24]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f8c:	9708      	str	r7, [sp, #32]
		HAL_GPIO_Init(RPI_USART6TX_GPIO_Port, &GPIO_InitStruct);
 8007f8e:	f7fc fdbd 	bl	8004b0c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = RPI_USART6RX_Pin;
 8007f92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		HAL_GPIO_Init(RPI_USART6RX_GPIO_Port, &GPIO_InitStruct);
 8007f96:	4823      	ldr	r0, [pc, #140]	; (8008024 <HAL_UART_MspInit+0x1c8>)
		GPIO_InitStruct.Pin = RPI_USART6RX_Pin;
 8007f98:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(RPI_USART6RX_GPIO_Port, &GPIO_InitStruct);
 8007f9a:	a905      	add	r1, sp, #20
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8007f9c:	9409      	str	r4, [sp, #36]	; 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f9e:	f8cd 8018 	str.w	r8, [sp, #24]
		hdma_usart6_rx.Instance = DMA2_Stream1;
 8007fa2:	4c27      	ldr	r4, [pc, #156]	; (8008040 <HAL_UART_MspInit+0x1e4>)
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fa4:	9607      	str	r6, [sp, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007fa6:	9708      	str	r7, [sp, #32]
		HAL_GPIO_Init(RPI_USART6RX_GPIO_Port, &GPIO_InitStruct);
 8007fa8:	f7fc fdb0 	bl	8004b0c <HAL_GPIO_Init>
		hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8007fac:	4b25      	ldr	r3, [pc, #148]	; (8008044 <HAL_UART_MspInit+0x1e8>)
		hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007fae:	60a6      	str	r6, [r4, #8]
		hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8007fb0:	f04f 6e20 	mov.w	lr, #167772160	; 0xa000000
 8007fb4:	e884 4008 	stmia.w	r4, {r3, lr}
		if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK) {
 8007fb8:	4620      	mov	r0, r4
		hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007fba:	f44f 6380 	mov.w	r3, #1024	; 0x400
		hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007fbe:	60e6      	str	r6, [r4, #12]
		hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007fc0:	6123      	str	r3, [r4, #16]
		hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007fc2:	6166      	str	r6, [r4, #20]
		hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007fc4:	61a6      	str	r6, [r4, #24]
		hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8007fc6:	61e6      	str	r6, [r4, #28]
		hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007fc8:	6226      	str	r6, [r4, #32]
		hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007fca:	6266      	str	r6, [r4, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK) {
 8007fcc:	f7fc fc16 	bl	80047fc <HAL_DMA_Init>
 8007fd0:	b108      	cbz	r0, 8007fd6 <HAL_UART_MspInit+0x17a>
			Error_Handler();
 8007fd2:	f7ff fcc5 	bl	8007960 <Error_Handler>
		__HAL_LINKDMA(uartHandle, hdmarx, hdma_usart6_rx);
 8007fd6:	636c      	str	r4, [r5, #52]	; 0x34
		hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007fd8:	4b1b      	ldr	r3, [pc, #108]	; (8008048 <HAL_UART_MspInit+0x1ec>)
		__HAL_LINKDMA(uartHandle, hdmarx, hdma_usart6_rx);
 8007fda:	63a5      	str	r5, [r4, #56]	; 0x38
		hdma_usart6_tx.Instance = DMA2_Stream6;
 8007fdc:	4c1b      	ldr	r4, [pc, #108]	; (800804c <HAL_UART_MspInit+0x1f0>)
		hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007fde:	f04f 6620 	mov.w	r6, #167772160	; 0xa000000
 8007fe2:	2740      	movs	r7, #64	; 0x40
 8007fe4:	e884 00c8 	stmia.w	r4, {r3, r6, r7}
		hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007fe8:	f44f 6280 	mov.w	r2, #1024	; 0x400
		hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007fec:	2300      	movs	r3, #0
		if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK) {
 8007fee:	4620      	mov	r0, r4
		hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007ff0:	60e3      	str	r3, [r4, #12]
		hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007ff2:	6122      	str	r2, [r4, #16]
		hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007ff4:	6163      	str	r3, [r4, #20]
		hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007ff6:	61a3      	str	r3, [r4, #24]
		hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8007ff8:	61e3      	str	r3, [r4, #28]
		hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007ffa:	6223      	str	r3, [r4, #32]
		hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007ffc:	6263      	str	r3, [r4, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK) {
 8007ffe:	f7fc fbfd 	bl	80047fc <HAL_DMA_Init>
 8008002:	b108      	cbz	r0, 8008008 <HAL_UART_MspInit+0x1ac>
			Error_Handler();
 8008004:	f7ff fcac 	bl	8007960 <Error_Handler>
		HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8008008:	2200      	movs	r2, #0
		__HAL_LINKDMA(uartHandle, hdmatx, hdma_usart6_tx);
 800800a:	632c      	str	r4, [r5, #48]	; 0x30
		HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800800c:	2047      	movs	r0, #71	; 0x47
 800800e:	4611      	mov	r1, r2
		__HAL_LINKDMA(uartHandle, hdmatx, hdma_usart6_tx);
 8008010:	63a5      	str	r5, [r4, #56]	; 0x38
		HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8008012:	f7fc fb79 	bl	8004708 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART6_IRQn);
 8008016:	2047      	movs	r0, #71	; 0x47
 8008018:	e785      	b.n	8007f26 <HAL_UART_MspInit+0xca>
 800801a:	bf00      	nop
 800801c:	40004400 	.word	0x40004400
 8008020:	40023800 	.word	0x40023800
 8008024:	40020000 	.word	0x40020000
 8008028:	200010f4 	.word	0x200010f4
 800802c:	40026088 	.word	0x40026088
 8008030:	400260a0 	.word	0x400260a0
 8008034:	20001214 	.word	0x20001214
 8008038:	40011400 	.word	0x40011400
 800803c:	40020800 	.word	0x40020800
 8008040:	20001154 	.word	0x20001154
 8008044:	40026428 	.word	0x40026428
 8008048:	400264a0 	.word	0x400264a0
 800804c:	200011b4 	.word	0x200011b4

08008050 <_I2CWrite>:
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count)
{
 8008050:	b513      	push	{r0, r1, r4, lr}
	int status;
	int i2c_time_out = I2C_TIME_OUT_BASE + count * I2C_TIME_OUT_BYTE;
 8008052:	f102 030a 	add.w	r3, r2, #10

	status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8008056:	f890 4398 	ldrb.w	r4, [r0, #920]	; 0x398
 800805a:	9300      	str	r3, [sp, #0]
 800805c:	f8d0 03a0 	ldr.w	r0, [r0, #928]	; 0x3a0
 8008060:	b293      	uxth	r3, r2
 8008062:	460a      	mov	r2, r1
 8008064:	4621      	mov	r1, r4
 8008066:	f7fc ff9d 	bl	8004fa4 <HAL_I2C_Master_Transmit>
	if (status) {
		//VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
		//XNUCLEO6180XA1_I2C1_Init(&hi2c1);
	}
	return status;
}
 800806a:	b002      	add	sp, #8
 800806c:	bd10      	pop	{r4, pc}

0800806e <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count)
{
 800806e:	b513      	push	{r0, r1, r4, lr}
	int status;
	int i2c_time_out = I2C_TIME_OUT_BASE + count * I2C_TIME_OUT_BYTE;
 8008070:	f102 030a 	add.w	r3, r2, #10

	status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr | 1, pdata, count, i2c_time_out);
 8008074:	f890 4398 	ldrb.w	r4, [r0, #920]	; 0x398
 8008078:	9300      	str	r3, [sp, #0]
 800807a:	f8d0 03a0 	ldr.w	r0, [r0, #928]	; 0x3a0
 800807e:	b293      	uxth	r3, r2
 8008080:	460a      	mov	r2, r1
 8008082:	f044 0101 	orr.w	r1, r4, #1
 8008086:	f7fd f863 	bl	8005150 <HAL_I2C_Master_Receive>
	if (status) {
		//VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
		//XNUCLEO6180XA1_I2C1_Init(&hi2c1);
	}
	return status;
}
 800808a:	b002      	add	sp, #8
 800808c:	bd10      	pop	{r4, pc}
	...

08008090 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count)
{
	int status_int;
	VL53L1_Error Status = VL53L1_ERROR_NONE;
	if (count > sizeof(_I2CBuffer) - 1) {
 8008090:	2bff      	cmp	r3, #255	; 0xff
{
 8008092:	b570      	push	{r4, r5, r6, lr}
 8008094:	4606      	mov	r6, r0
 8008096:	461d      	mov	r5, r3
 8008098:	4610      	mov	r0, r2
	if (count > sizeof(_I2CBuffer) - 1) {
 800809a:	d813      	bhi.n	80080c4 <VL53L1_WriteMulti+0x34>
		return VL53L1_ERROR_INVALID_PARAMS;
	}
	_I2CBuffer[0] = index >> 8;
 800809c:	4c0b      	ldr	r4, [pc, #44]	; (80080cc <VL53L1_WriteMulti+0x3c>)
 800809e:	0a0b      	lsrs	r3, r1, #8
	_I2CBuffer[1] = index & 0xFF;
 80080a0:	7061      	strb	r1, [r4, #1]
	memcpy(&_I2CBuffer[2], pdata, count);
 80080a2:	462a      	mov	r2, r5
 80080a4:	4601      	mov	r1, r0
 80080a6:	1ca0      	adds	r0, r4, #2
	_I2CBuffer[0] = index >> 8;
 80080a8:	7023      	strb	r3, [r4, #0]
	memcpy(&_I2CBuffer[2], pdata, count);
 80080aa:	f000 fa89 	bl	80085c0 <memcpy>
	VL53L1_GetI2cBus();
	status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 80080ae:	1caa      	adds	r2, r5, #2
 80080b0:	4621      	mov	r1, r4
 80080b2:	4630      	mov	r0, r6
 80080b4:	f7ff ffcc 	bl	8008050 <_I2CWrite>
	if (status_int != 0) {
		Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80080b8:	2800      	cmp	r0, #0
 80080ba:	bf0c      	ite	eq
 80080bc:	2000      	moveq	r0, #0
 80080be:	f06f 000c 	mvnne.w	r0, #12
 80080c2:	bd70      	pop	{r4, r5, r6, pc}
		return VL53L1_ERROR_INVALID_PARAMS;
 80080c4:	f06f 0003 	mvn.w	r0, #3
	}
	VL53L1_PutI2cBus();
	return Status;
}
 80080c8:	bd70      	pop	{r4, r5, r6, pc}
 80080ca:	bf00      	nop
 80080cc:	200012b4 	.word	0x200012b4

080080d0 <VL53L1_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count)
{
 80080d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080d2:	460c      	mov	r4, r1
	VL53L1_Error Status = VL53L1_ERROR_NONE;
	int32_t status_int;

	_I2CBuffer[0] = index >> 8;
 80080d4:	4909      	ldr	r1, [pc, #36]	; (80080fc <VL53L1_ReadMulti+0x2c>)
{
 80080d6:	4616      	mov	r6, r2
 80080d8:	461f      	mov	r7, r3
	_I2CBuffer[1] = index & 0xFF;
	VL53L1_GetI2cBus();
	status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80080da:	2202      	movs	r2, #2
	_I2CBuffer[0] = index >> 8;
 80080dc:	0a23      	lsrs	r3, r4, #8
{
 80080de:	4605      	mov	r5, r0
	_I2CBuffer[0] = index >> 8;
 80080e0:	700b      	strb	r3, [r1, #0]
	_I2CBuffer[1] = index & 0xFF;
 80080e2:	704c      	strb	r4, [r1, #1]
	status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80080e4:	f7ff ffb4 	bl	8008050 <_I2CWrite>
	if (status_int != 0) {
 80080e8:	b928      	cbnz	r0, 80080f6 <VL53L1_ReadMulti+0x26>
		Status = VL53L1_ERROR_CONTROL_INTERFACE;
		goto done;
	}
	status_int = _I2CRead(Dev, pdata, count);
 80080ea:	463a      	mov	r2, r7
 80080ec:	4631      	mov	r1, r6
 80080ee:	4628      	mov	r0, r5
 80080f0:	f7ff ffbd 	bl	800806e <_I2CRead>
	if (status_int != 0) {
 80080f4:	b108      	cbz	r0, 80080fa <VL53L1_ReadMulti+0x2a>
		Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80080f6:	f06f 000c 	mvn.w	r0, #12
	}
 done:
	VL53L1_PutI2cBus();
	return Status;
}
 80080fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080fc:	200012b4 	.word	0x200012b4

08008100 <VL53L1_WrByte>:
VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data)
{
	VL53L1_Error Status = VL53L1_ERROR_NONE;
	int32_t status_int;

	_I2CBuffer[0] = index >> 8;
 8008100:	4b07      	ldr	r3, [pc, #28]	; (8008120 <VL53L1_WrByte+0x20>)
{
 8008102:	b510      	push	{r4, lr}
	_I2CBuffer[0] = index >> 8;
 8008104:	0a0c      	lsrs	r4, r1, #8
	_I2CBuffer[1] = index & 0xFF;
 8008106:	7059      	strb	r1, [r3, #1]
	_I2CBuffer[2] = data;
 8008108:	709a      	strb	r2, [r3, #2]

	VL53L1_GetI2cBus();
	status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800810a:	4619      	mov	r1, r3
 800810c:	2203      	movs	r2, #3
	_I2CBuffer[0] = index >> 8;
 800810e:	701c      	strb	r4, [r3, #0]
	status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8008110:	f7ff ff9e 	bl	8008050 <_I2CWrite>
	if (status_int != 0) {
 8008114:	2800      	cmp	r0, #0
		Status = VL53L1_ERROR_CONTROL_INTERFACE;
	}
	VL53L1_PutI2cBus();
	return Status;
}
 8008116:	bf14      	ite	ne
 8008118:	f06f 000c 	mvnne.w	r0, #12
 800811c:	2000      	moveq	r0, #0
 800811e:	bd10      	pop	{r4, pc}
 8008120:	200012b4 	.word	0x200012b4

08008124 <VL53L1_RdByte>:
 done:
	return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data)
{
 8008124:	b538      	push	{r3, r4, r5, lr}
	VL53L1_Error Status = VL53L1_ERROR_NONE;
	int32_t status_int;

	_I2CBuffer[0] = index >> 8;
 8008126:	4b0a      	ldr	r3, [pc, #40]	; (8008150 <VL53L1_RdByte+0x2c>)
{
 8008128:	4615      	mov	r5, r2
	_I2CBuffer[0] = index >> 8;
 800812a:	0a0a      	lsrs	r2, r1, #8
 800812c:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index & 0xFF;
 800812e:	7059      	strb	r1, [r3, #1]
	VL53L1_GetI2cBus();
	status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8008130:	2202      	movs	r2, #2
 8008132:	4619      	mov	r1, r3
{
 8008134:	4604      	mov	r4, r0
	status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8008136:	f7ff ff8b 	bl	8008050 <_I2CWrite>
	if (status_int) {
 800813a:	b928      	cbnz	r0, 8008148 <VL53L1_RdByte+0x24>
		Status = VL53L1_ERROR_CONTROL_INTERFACE;
		goto done;
	}
	status_int = _I2CRead(Dev, data, 1);
 800813c:	2201      	movs	r2, #1
 800813e:	4629      	mov	r1, r5
 8008140:	4620      	mov	r0, r4
 8008142:	f7ff ff94 	bl	800806e <_I2CRead>
	if (status_int != 0) {
 8008146:	b108      	cbz	r0, 800814c <VL53L1_RdByte+0x28>
		Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008148:	f06f 000c 	mvn.w	r0, #12
	}
 done:
	VL53L1_PutI2cBus();
	return Status;
}
 800814c:	bd38      	pop	{r3, r4, r5, pc}
 800814e:	bf00      	nop
 8008150:	200012b4 	.word	0x200012b4

08008154 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data)
{
 8008154:	b570      	push	{r4, r5, r6, lr}
	VL53L1_Error Status = VL53L1_ERROR_NONE;
	int32_t status_int;

	_I2CBuffer[0] = index >> 8;
 8008156:	4c0d      	ldr	r4, [pc, #52]	; (800818c <VL53L1_RdWord+0x38>)
 8008158:	0a0b      	lsrs	r3, r1, #8
{
 800815a:	4615      	mov	r5, r2
	_I2CBuffer[1] = index & 0xFF;
 800815c:	7061      	strb	r1, [r4, #1]
	VL53L1_GetI2cBus();
	status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800815e:	2202      	movs	r2, #2
 8008160:	4621      	mov	r1, r4
{
 8008162:	4606      	mov	r6, r0
	_I2CBuffer[0] = index >> 8;
 8008164:	7023      	strb	r3, [r4, #0]
	status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8008166:	f7ff ff73 	bl	8008050 <_I2CWrite>

	if (status_int) {
 800816a:	b110      	cbz	r0, 8008172 <VL53L1_RdWord+0x1e>
		Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800816c:	f06f 000c 	mvn.w	r0, #12
 8008170:	bd70      	pop	{r4, r5, r6, pc}
		goto done;
	}
	status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8008172:	2202      	movs	r2, #2
 8008174:	4621      	mov	r1, r4
 8008176:	4630      	mov	r0, r6
 8008178:	f7ff ff79 	bl	800806e <_I2CRead>
	if (status_int != 0) {
 800817c:	2800      	cmp	r0, #0
 800817e:	d1f5      	bne.n	800816c <VL53L1_RdWord+0x18>
		Status = VL53L1_ERROR_CONTROL_INTERFACE;
		goto done;
	}

	*data = ((uint16_t)_I2CBuffer[0] << 8) + (uint16_t)_I2CBuffer[1];
 8008180:	7822      	ldrb	r2, [r4, #0]
 8008182:	7863      	ldrb	r3, [r4, #1]
 8008184:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008188:	802b      	strh	r3, [r5, #0]
 done:
	VL53L1_PutI2cBus();
	return Status;
}
 800818a:	bd70      	pop	{r4, r5, r6, pc}
 800818c:	200012b4 	.word	0x200012b4

08008190 <VL53L1_WaitUs>:
	HAL_Delay(wait_ms);
	return VL53L1_ERROR_NONE;
}

VL53L1_Error VL53L1_WaitUs(VL53L1_Dev_t *pdev, int32_t wait_us)
{
 8008190:	b508      	push	{r3, lr}
	(void)pdev;
	HAL_Delay(wait_us / 1000);
 8008192:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008196:	fb91 f0f0 	sdiv	r0, r1, r0
 800819a:	f7fc f8bb 	bl	8004314 <HAL_Delay>
	return VL53L1_ERROR_NONE;
}
 800819e:	2000      	movs	r0, #0
 80081a0:	bd08      	pop	{r3, pc}
	...

080081a4 <VL53L1_WaitValueMaskEx>:
	uint32_t timeout_ms,
	uint16_t index,
	uint8_t value,
	uint8_t mask,
	uint32_t poll_delay_ms)
{
 80081a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081a8:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80081ac:	4606      	mov	r6, r0
 80081ae:	460f      	mov	r7, r1
 80081b0:	4690      	mov	r8, r2

	VL53L1_Error status = VL53L1_ERROR_NONE;
	uint32_t start_time_ms = 0;
	uint32_t current_time_ms = 0;
	uint32_t polling_time_ms = 0;
	uint8_t byte_value = 0;
 80081b2:	2400      	movs	r4, #0
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
		index,
		register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 80081b4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80081b8:	4918      	ldr	r1, [pc, #96]	; (800821c <VL53L1_WaitValueMaskEx+0x78>)
{
 80081ba:	f89d a228 	ldrb.w	sl, [sp, #552]	; 0x228
 80081be:	9d8b      	ldr	r5, [sp, #556]	; 0x22c
	uint8_t byte_value = 0;
 80081c0:	f88d 4007 	strb.w	r4, [sp, #7]
	VL53L1_COPYSTRING(register_name, "");
 80081c4:	a802      	add	r0, sp, #8
{
 80081c6:	4699      	mov	r9, r3
	VL53L1_COPYSTRING(register_name, "");
 80081c8:	f000 fc37 	bl	8008a3a <strncpy>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 80081cc:	b1ff      	cbz	r7, 800820e <VL53L1_WaitValueMaskEx+0x6a>
	       (polling_time_ms < timeout_ms) &&
 80081ce:	b12c      	cbz	r4, 80081dc <VL53L1_WaitValueMaskEx+0x38>
 80081d0:	2300      	movs	r3, #0

	if (found == 0 && status == VL53L1_ERROR_NONE)
		status = VL53L1_ERROR_TIME_OUT;

	return status;
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
 80081d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			status = VL53L1_RdByte(
 80081dc:	f10d 0207 	add.w	r2, sp, #7
 80081e0:	4641      	mov	r1, r8
 80081e2:	4630      	mov	r0, r6
 80081e4:	f7ff ff9e 	bl	8008124 <VL53L1_RdByte>
		if ((byte_value & mask) == value)
 80081e8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80081ec:	ea0a 0202 	and.w	r2, sl, r2
 80081f0:	454a      	cmp	r2, r9
			status = VL53L1_RdByte(
 80081f2:	4603      	mov	r3, r0
		if ((byte_value & mask) == value)
 80081f4:	d103      	bne.n	80081fe <VL53L1_WaitValueMaskEx+0x5a>
	while ((status == VL53L1_ERROR_NONE) &&
 80081f6:	2800      	cmp	r0, #0
 80081f8:	d1eb      	bne.n	80081d2 <VL53L1_WaitValueMaskEx+0x2e>
			found = 1;
 80081fa:	2401      	movs	r4, #1
 80081fc:	e7e6      	b.n	80081cc <VL53L1_WaitValueMaskEx+0x28>
		if (status == VL53L1_ERROR_NONE &&
 80081fe:	2800      	cmp	r0, #0
 8008200:	d1e7      	bne.n	80081d2 <VL53L1_WaitValueMaskEx+0x2e>
		    found == 0 &&
 8008202:	2d00      	cmp	r5, #0
 8008204:	d0e2      	beq.n	80081cc <VL53L1_WaitValueMaskEx+0x28>
	HAL_Delay(wait_ms);
 8008206:	4628      	mov	r0, r5
 8008208:	f7fc f884 	bl	8004314 <HAL_Delay>
 800820c:	e7de      	b.n	80081cc <VL53L1_WaitValueMaskEx+0x28>
		status = VL53L1_ERROR_TIME_OUT;
 800820e:	2c00      	cmp	r4, #0
 8008210:	bf14      	ite	ne
 8008212:	2300      	movne	r3, #0
 8008214:	f06f 0306 	mvneq.w	r3, #6
 8008218:	e7db      	b.n	80081d2 <VL53L1_WaitValueMaskEx+0x2e>
 800821a:	bf00      	nop
 800821c:	080093ba 	.word	0x080093ba

08008220 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8008220:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008258 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008224:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008226:	e003      	b.n	8008230 <LoopCopyDataInit>

08008228 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008228:	4b0c      	ldr	r3, [pc, #48]	; (800825c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800822a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800822c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800822e:	3104      	adds	r1, #4

08008230 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008230:	480b      	ldr	r0, [pc, #44]	; (8008260 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008232:	4b0c      	ldr	r3, [pc, #48]	; (8008264 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008234:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008236:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008238:	d3f6      	bcc.n	8008228 <CopyDataInit>
  ldr  r2, =_sbss
 800823a:	4a0b      	ldr	r2, [pc, #44]	; (8008268 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800823c:	e002      	b.n	8008244 <LoopFillZerobss>

0800823e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800823e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008240:	f842 3b04 	str.w	r3, [r2], #4

08008244 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008244:	4b09      	ldr	r3, [pc, #36]	; (800826c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008246:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008248:	d3f9      	bcc.n	800823e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800824a:	f7ff fc87 	bl	8007b5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800824e:	f000 f993 	bl	8008578 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008252:	f7ff f9ad 	bl	80075b0 <main>
  bx  lr    
 8008256:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8008258:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 800825c:	080094a4 	.word	0x080094a4
  ldr  r0, =_sdata
 8008260:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008264:	20000204 	.word	0x20000204
  ldr  r2, =_sbss
 8008268:	20000204 	.word	0x20000204
  ldr  r3, = _ebss
 800826c:	200013b8 	.word	0x200013b8

08008270 <DMA1_Stream1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
<<<<<<< Updated upstream
 8008270:	e7fe      	b.n	8008270 <DMA1_Stream1_IRQHandler>
	...

08008274 <__errno>:
 8008274:	4b01      	ldr	r3, [pc, #4]	; (800827c <__errno+0x8>)
 8008276:	6818      	ldr	r0, [r3, #0]
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop
 800827c:	200001a0 	.word	0x200001a0

08008280 <__sflush_r>:
 8008280:	898a      	ldrh	r2, [r1, #12]
 8008282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008286:	4605      	mov	r5, r0
 8008288:	0710      	lsls	r0, r2, #28
 800828a:	460c      	mov	r4, r1
 800828c:	d45a      	bmi.n	8008344 <__sflush_r+0xc4>
 800828e:	684b      	ldr	r3, [r1, #4]
 8008290:	2b00      	cmp	r3, #0
 8008292:	dc05      	bgt.n	80082a0 <__sflush_r+0x20>
 8008294:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008296:	2b00      	cmp	r3, #0
 8008298:	dc02      	bgt.n	80082a0 <__sflush_r+0x20>
 800829a:	2000      	movs	r0, #0
 800829c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082a2:	2e00      	cmp	r6, #0
 80082a4:	d0f9      	beq.n	800829a <__sflush_r+0x1a>
 80082a6:	2300      	movs	r3, #0
 80082a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80082ac:	682f      	ldr	r7, [r5, #0]
 80082ae:	602b      	str	r3, [r5, #0]
 80082b0:	d033      	beq.n	800831a <__sflush_r+0x9a>
 80082b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80082b4:	89a3      	ldrh	r3, [r4, #12]
 80082b6:	075a      	lsls	r2, r3, #29
 80082b8:	d505      	bpl.n	80082c6 <__sflush_r+0x46>
 80082ba:	6863      	ldr	r3, [r4, #4]
 80082bc:	1ac0      	subs	r0, r0, r3
 80082be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80082c0:	b10b      	cbz	r3, 80082c6 <__sflush_r+0x46>
 80082c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80082c4:	1ac0      	subs	r0, r0, r3
 80082c6:	2300      	movs	r3, #0
 80082c8:	4602      	mov	r2, r0
 80082ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082cc:	6a21      	ldr	r1, [r4, #32]
 80082ce:	4628      	mov	r0, r5
 80082d0:	47b0      	blx	r6
 80082d2:	1c43      	adds	r3, r0, #1
 80082d4:	89a3      	ldrh	r3, [r4, #12]
 80082d6:	d106      	bne.n	80082e6 <__sflush_r+0x66>
 80082d8:	6829      	ldr	r1, [r5, #0]
 80082da:	291d      	cmp	r1, #29
 80082dc:	d84b      	bhi.n	8008376 <__sflush_r+0xf6>
 80082de:	4a2b      	ldr	r2, [pc, #172]	; (800838c <__sflush_r+0x10c>)
 80082e0:	40ca      	lsrs	r2, r1
 80082e2:	07d6      	lsls	r6, r2, #31
 80082e4:	d547      	bpl.n	8008376 <__sflush_r+0xf6>
 80082e6:	2200      	movs	r2, #0
 80082e8:	6062      	str	r2, [r4, #4]
 80082ea:	04d9      	lsls	r1, r3, #19
 80082ec:	6922      	ldr	r2, [r4, #16]
 80082ee:	6022      	str	r2, [r4, #0]
 80082f0:	d504      	bpl.n	80082fc <__sflush_r+0x7c>
 80082f2:	1c42      	adds	r2, r0, #1
 80082f4:	d101      	bne.n	80082fa <__sflush_r+0x7a>
 80082f6:	682b      	ldr	r3, [r5, #0]
 80082f8:	b903      	cbnz	r3, 80082fc <__sflush_r+0x7c>
 80082fa:	6560      	str	r0, [r4, #84]	; 0x54
 80082fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082fe:	602f      	str	r7, [r5, #0]
 8008300:	2900      	cmp	r1, #0
 8008302:	d0ca      	beq.n	800829a <__sflush_r+0x1a>
 8008304:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008308:	4299      	cmp	r1, r3
 800830a:	d002      	beq.n	8008312 <__sflush_r+0x92>
 800830c:	4628      	mov	r0, r5
 800830e:	f000 f96b 	bl	80085e8 <_free_r>
 8008312:	2000      	movs	r0, #0
 8008314:	6360      	str	r0, [r4, #52]	; 0x34
 8008316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800831a:	6a21      	ldr	r1, [r4, #32]
 800831c:	2301      	movs	r3, #1
 800831e:	4628      	mov	r0, r5
 8008320:	47b0      	blx	r6
 8008322:	1c41      	adds	r1, r0, #1
 8008324:	d1c6      	bne.n	80082b4 <__sflush_r+0x34>
 8008326:	682b      	ldr	r3, [r5, #0]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d0c3      	beq.n	80082b4 <__sflush_r+0x34>
 800832c:	2b1d      	cmp	r3, #29
 800832e:	d001      	beq.n	8008334 <__sflush_r+0xb4>
 8008330:	2b16      	cmp	r3, #22
 8008332:	d101      	bne.n	8008338 <__sflush_r+0xb8>
 8008334:	602f      	str	r7, [r5, #0]
 8008336:	e7b0      	b.n	800829a <__sflush_r+0x1a>
 8008338:	89a3      	ldrh	r3, [r4, #12]
 800833a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800833e:	81a3      	strh	r3, [r4, #12]
 8008340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008344:	690f      	ldr	r7, [r1, #16]
 8008346:	2f00      	cmp	r7, #0
 8008348:	d0a7      	beq.n	800829a <__sflush_r+0x1a>
 800834a:	0793      	lsls	r3, r2, #30
 800834c:	680e      	ldr	r6, [r1, #0]
 800834e:	bf08      	it	eq
 8008350:	694b      	ldreq	r3, [r1, #20]
 8008352:	600f      	str	r7, [r1, #0]
 8008354:	bf18      	it	ne
 8008356:	2300      	movne	r3, #0
 8008358:	eba6 0807 	sub.w	r8, r6, r7
 800835c:	608b      	str	r3, [r1, #8]
 800835e:	f1b8 0f00 	cmp.w	r8, #0
 8008362:	dd9a      	ble.n	800829a <__sflush_r+0x1a>
 8008364:	4643      	mov	r3, r8
 8008366:	463a      	mov	r2, r7
 8008368:	6a21      	ldr	r1, [r4, #32]
 800836a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800836c:	4628      	mov	r0, r5
 800836e:	47b0      	blx	r6
 8008370:	2800      	cmp	r0, #0
 8008372:	dc07      	bgt.n	8008384 <__sflush_r+0x104>
 8008374:	89a3      	ldrh	r3, [r4, #12]
 8008376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800837a:	81a3      	strh	r3, [r4, #12]
 800837c:	f04f 30ff 	mov.w	r0, #4294967295
 8008380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008384:	4407      	add	r7, r0
 8008386:	eba8 0800 	sub.w	r8, r8, r0
 800838a:	e7e8      	b.n	800835e <__sflush_r+0xde>
 800838c:	20400001 	.word	0x20400001

08008390 <_fflush_r>:
 8008390:	b538      	push	{r3, r4, r5, lr}
 8008392:	690b      	ldr	r3, [r1, #16]
 8008394:	4605      	mov	r5, r0
 8008396:	460c      	mov	r4, r1
 8008398:	b1db      	cbz	r3, 80083d2 <_fflush_r+0x42>
 800839a:	b118      	cbz	r0, 80083a4 <_fflush_r+0x14>
 800839c:	6983      	ldr	r3, [r0, #24]
 800839e:	b90b      	cbnz	r3, 80083a4 <_fflush_r+0x14>
 80083a0:	f000 f860 	bl	8008464 <__sinit>
 80083a4:	4b0c      	ldr	r3, [pc, #48]	; (80083d8 <_fflush_r+0x48>)
 80083a6:	429c      	cmp	r4, r3
 80083a8:	d109      	bne.n	80083be <_fflush_r+0x2e>
 80083aa:	686c      	ldr	r4, [r5, #4]
 80083ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083b0:	b17b      	cbz	r3, 80083d2 <_fflush_r+0x42>
 80083b2:	4621      	mov	r1, r4
 80083b4:	4628      	mov	r0, r5
 80083b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083ba:	f7ff bf61 	b.w	8008280 <__sflush_r>
 80083be:	4b07      	ldr	r3, [pc, #28]	; (80083dc <_fflush_r+0x4c>)
 80083c0:	429c      	cmp	r4, r3
 80083c2:	d101      	bne.n	80083c8 <_fflush_r+0x38>
 80083c4:	68ac      	ldr	r4, [r5, #8]
 80083c6:	e7f1      	b.n	80083ac <_fflush_r+0x1c>
 80083c8:	4b05      	ldr	r3, [pc, #20]	; (80083e0 <_fflush_r+0x50>)
 80083ca:	429c      	cmp	r4, r3
 80083cc:	bf08      	it	eq
 80083ce:	68ec      	ldreq	r4, [r5, #12]
 80083d0:	e7ec      	b.n	80083ac <_fflush_r+0x1c>
 80083d2:	2000      	movs	r0, #0
 80083d4:	bd38      	pop	{r3, r4, r5, pc}
 80083d6:	bf00      	nop
 80083d8:	0800941c 	.word	0x0800941c
 80083dc:	0800943c 	.word	0x0800943c
 80083e0:	080093fc 	.word	0x080093fc

080083e4 <_cleanup_r>:
 80083e4:	4901      	ldr	r1, [pc, #4]	; (80083ec <_cleanup_r+0x8>)
 80083e6:	f000 b8a9 	b.w	800853c <_fwalk_reent>
 80083ea:	bf00      	nop
 80083ec:	08008391 	.word	0x08008391

080083f0 <std.isra.0>:
 80083f0:	2300      	movs	r3, #0
 80083f2:	b510      	push	{r4, lr}
 80083f4:	4604      	mov	r4, r0
 80083f6:	6003      	str	r3, [r0, #0]
 80083f8:	6043      	str	r3, [r0, #4]
 80083fa:	6083      	str	r3, [r0, #8]
 80083fc:	8181      	strh	r1, [r0, #12]
 80083fe:	6643      	str	r3, [r0, #100]	; 0x64
 8008400:	81c2      	strh	r2, [r0, #14]
 8008402:	6103      	str	r3, [r0, #16]
 8008404:	6143      	str	r3, [r0, #20]
 8008406:	6183      	str	r3, [r0, #24]
 8008408:	4619      	mov	r1, r3
 800840a:	2208      	movs	r2, #8
 800840c:	305c      	adds	r0, #92	; 0x5c
 800840e:	f000 f8e2 	bl	80085d6 <memset>
 8008412:	4b05      	ldr	r3, [pc, #20]	; (8008428 <std.isra.0+0x38>)
 8008414:	6263      	str	r3, [r4, #36]	; 0x24
 8008416:	4b05      	ldr	r3, [pc, #20]	; (800842c <std.isra.0+0x3c>)
 8008418:	62a3      	str	r3, [r4, #40]	; 0x28
 800841a:	4b05      	ldr	r3, [pc, #20]	; (8008430 <std.isra.0+0x40>)
 800841c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800841e:	4b05      	ldr	r3, [pc, #20]	; (8008434 <std.isra.0+0x44>)
 8008420:	6224      	str	r4, [r4, #32]
 8008422:	6323      	str	r3, [r4, #48]	; 0x30
 8008424:	bd10      	pop	{r4, pc}
 8008426:	bf00      	nop
 8008428:	080089b5 	.word	0x080089b5
 800842c:	080089d7 	.word	0x080089d7
 8008430:	08008a0f 	.word	0x08008a0f
 8008434:	08008a33 	.word	0x08008a33

08008438 <__sfmoreglue>:
 8008438:	b570      	push	{r4, r5, r6, lr}
 800843a:	1e4a      	subs	r2, r1, #1
 800843c:	2568      	movs	r5, #104	; 0x68
 800843e:	4355      	muls	r5, r2
 8008440:	460e      	mov	r6, r1
 8008442:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008446:	f000 f91d 	bl	8008684 <_malloc_r>
 800844a:	4604      	mov	r4, r0
 800844c:	b140      	cbz	r0, 8008460 <__sfmoreglue+0x28>
 800844e:	2100      	movs	r1, #0
 8008450:	e880 0042 	stmia.w	r0, {r1, r6}
 8008454:	300c      	adds	r0, #12
 8008456:	60a0      	str	r0, [r4, #8]
 8008458:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800845c:	f000 f8bb 	bl	80085d6 <memset>
 8008460:	4620      	mov	r0, r4
 8008462:	bd70      	pop	{r4, r5, r6, pc}

08008464 <__sinit>:
 8008464:	6983      	ldr	r3, [r0, #24]
 8008466:	b510      	push	{r4, lr}
 8008468:	4604      	mov	r4, r0
 800846a:	bb33      	cbnz	r3, 80084ba <__sinit+0x56>
 800846c:	6483      	str	r3, [r0, #72]	; 0x48
 800846e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8008470:	6503      	str	r3, [r0, #80]	; 0x50
 8008472:	4b12      	ldr	r3, [pc, #72]	; (80084bc <__sinit+0x58>)
 8008474:	4a12      	ldr	r2, [pc, #72]	; (80084c0 <__sinit+0x5c>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	6282      	str	r2, [r0, #40]	; 0x28
 800847a:	4298      	cmp	r0, r3
 800847c:	bf04      	itt	eq
 800847e:	2301      	moveq	r3, #1
 8008480:	6183      	streq	r3, [r0, #24]
 8008482:	f000 f81f 	bl	80084c4 <__sfp>
 8008486:	6060      	str	r0, [r4, #4]
 8008488:	4620      	mov	r0, r4
 800848a:	f000 f81b 	bl	80084c4 <__sfp>
 800848e:	60a0      	str	r0, [r4, #8]
 8008490:	4620      	mov	r0, r4
 8008492:	f000 f817 	bl	80084c4 <__sfp>
 8008496:	2200      	movs	r2, #0
 8008498:	60e0      	str	r0, [r4, #12]
 800849a:	2104      	movs	r1, #4
 800849c:	6860      	ldr	r0, [r4, #4]
 800849e:	f7ff ffa7 	bl	80083f0 <std.isra.0>
 80084a2:	2201      	movs	r2, #1
 80084a4:	2109      	movs	r1, #9
 80084a6:	68a0      	ldr	r0, [r4, #8]
 80084a8:	f7ff ffa2 	bl	80083f0 <std.isra.0>
 80084ac:	2202      	movs	r2, #2
 80084ae:	2112      	movs	r1, #18
 80084b0:	68e0      	ldr	r0, [r4, #12]
 80084b2:	f7ff ff9d 	bl	80083f0 <std.isra.0>
 80084b6:	2301      	movs	r3, #1
 80084b8:	61a3      	str	r3, [r4, #24]
 80084ba:	bd10      	pop	{r4, pc}
 80084bc:	0800945c 	.word	0x0800945c
 80084c0:	080083e5 	.word	0x080083e5

080084c4 <__sfp>:
 80084c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084c6:	4b1c      	ldr	r3, [pc, #112]	; (8008538 <__sfp+0x74>)
 80084c8:	681e      	ldr	r6, [r3, #0]
 80084ca:	69b3      	ldr	r3, [r6, #24]
 80084cc:	4607      	mov	r7, r0
 80084ce:	b913      	cbnz	r3, 80084d6 <__sfp+0x12>
 80084d0:	4630      	mov	r0, r6
 80084d2:	f7ff ffc7 	bl	8008464 <__sinit>
 80084d6:	3648      	adds	r6, #72	; 0x48
 80084d8:	68b4      	ldr	r4, [r6, #8]
 80084da:	6873      	ldr	r3, [r6, #4]
 80084dc:	3b01      	subs	r3, #1
 80084de:	d503      	bpl.n	80084e8 <__sfp+0x24>
 80084e0:	6833      	ldr	r3, [r6, #0]
 80084e2:	b133      	cbz	r3, 80084f2 <__sfp+0x2e>
 80084e4:	6836      	ldr	r6, [r6, #0]
 80084e6:	e7f7      	b.n	80084d8 <__sfp+0x14>
 80084e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80084ec:	b16d      	cbz	r5, 800850a <__sfp+0x46>
 80084ee:	3468      	adds	r4, #104	; 0x68
 80084f0:	e7f4      	b.n	80084dc <__sfp+0x18>
 80084f2:	2104      	movs	r1, #4
 80084f4:	4638      	mov	r0, r7
 80084f6:	f7ff ff9f 	bl	8008438 <__sfmoreglue>
 80084fa:	6030      	str	r0, [r6, #0]
 80084fc:	2800      	cmp	r0, #0
 80084fe:	d1f1      	bne.n	80084e4 <__sfp+0x20>
 8008500:	230c      	movs	r3, #12
 8008502:	603b      	str	r3, [r7, #0]
 8008504:	4604      	mov	r4, r0
 8008506:	4620      	mov	r0, r4
 8008508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800850a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800850e:	81e3      	strh	r3, [r4, #14]
 8008510:	2301      	movs	r3, #1
 8008512:	81a3      	strh	r3, [r4, #12]
 8008514:	6665      	str	r5, [r4, #100]	; 0x64
 8008516:	6025      	str	r5, [r4, #0]
 8008518:	60a5      	str	r5, [r4, #8]
 800851a:	6065      	str	r5, [r4, #4]
 800851c:	6125      	str	r5, [r4, #16]
 800851e:	6165      	str	r5, [r4, #20]
 8008520:	61a5      	str	r5, [r4, #24]
 8008522:	2208      	movs	r2, #8
 8008524:	4629      	mov	r1, r5
 8008526:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800852a:	f000 f854 	bl	80085d6 <memset>
 800852e:	6365      	str	r5, [r4, #52]	; 0x34
 8008530:	63a5      	str	r5, [r4, #56]	; 0x38
 8008532:	64a5      	str	r5, [r4, #72]	; 0x48
 8008534:	64e5      	str	r5, [r4, #76]	; 0x4c
 8008536:	e7e6      	b.n	8008506 <__sfp+0x42>
 8008538:	0800945c 	.word	0x0800945c

0800853c <_fwalk_reent>:
 800853c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008540:	4680      	mov	r8, r0
 8008542:	4689      	mov	r9, r1
 8008544:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008548:	2600      	movs	r6, #0
 800854a:	b914      	cbnz	r4, 8008552 <_fwalk_reent+0x16>
 800854c:	4630      	mov	r0, r6
 800854e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008552:	68a5      	ldr	r5, [r4, #8]
 8008554:	6867      	ldr	r7, [r4, #4]
 8008556:	3f01      	subs	r7, #1
 8008558:	d501      	bpl.n	800855e <_fwalk_reent+0x22>
 800855a:	6824      	ldr	r4, [r4, #0]
 800855c:	e7f5      	b.n	800854a <_fwalk_reent+0xe>
 800855e:	89ab      	ldrh	r3, [r5, #12]
 8008560:	2b01      	cmp	r3, #1
 8008562:	d907      	bls.n	8008574 <_fwalk_reent+0x38>
 8008564:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008568:	3301      	adds	r3, #1
 800856a:	d003      	beq.n	8008574 <_fwalk_reent+0x38>
 800856c:	4629      	mov	r1, r5
 800856e:	4640      	mov	r0, r8
 8008570:	47c8      	blx	r9
 8008572:	4306      	orrs	r6, r0
 8008574:	3568      	adds	r5, #104	; 0x68
 8008576:	e7ee      	b.n	8008556 <_fwalk_reent+0x1a>

08008578 <__libc_init_array>:
 8008578:	b570      	push	{r4, r5, r6, lr}
 800857a:	4e0d      	ldr	r6, [pc, #52]	; (80085b0 <__libc_init_array+0x38>)
 800857c:	4c0d      	ldr	r4, [pc, #52]	; (80085b4 <__libc_init_array+0x3c>)
 800857e:	1ba4      	subs	r4, r4, r6
 8008580:	10a4      	asrs	r4, r4, #2
 8008582:	2500      	movs	r5, #0
 8008584:	42a5      	cmp	r5, r4
 8008586:	d109      	bne.n	800859c <__libc_init_array+0x24>
 8008588:	4e0b      	ldr	r6, [pc, #44]	; (80085b8 <__libc_init_array+0x40>)
 800858a:	4c0c      	ldr	r4, [pc, #48]	; (80085bc <__libc_init_array+0x44>)
 800858c:	f000 fed6 	bl	800933c <_init>
 8008590:	1ba4      	subs	r4, r4, r6
 8008592:	10a4      	asrs	r4, r4, #2
 8008594:	2500      	movs	r5, #0
 8008596:	42a5      	cmp	r5, r4
 8008598:	d105      	bne.n	80085a6 <__libc_init_array+0x2e>
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80085a0:	4798      	blx	r3
 80085a2:	3501      	adds	r5, #1
 80085a4:	e7ee      	b.n	8008584 <__libc_init_array+0xc>
 80085a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80085aa:	4798      	blx	r3
 80085ac:	3501      	adds	r5, #1
 80085ae:	e7f2      	b.n	8008596 <__libc_init_array+0x1e>
 80085b0:	0800949c 	.word	0x0800949c
 80085b4:	0800949c 	.word	0x0800949c
 80085b8:	0800949c 	.word	0x0800949c
 80085bc:	080094a0 	.word	0x080094a0

080085c0 <memcpy>:
 80085c0:	b510      	push	{r4, lr}
 80085c2:	1e43      	subs	r3, r0, #1
 80085c4:	440a      	add	r2, r1
 80085c6:	4291      	cmp	r1, r2
 80085c8:	d100      	bne.n	80085cc <memcpy+0xc>
 80085ca:	bd10      	pop	{r4, pc}
 80085cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085d4:	e7f7      	b.n	80085c6 <memcpy+0x6>

080085d6 <memset>:
 80085d6:	4402      	add	r2, r0
 80085d8:	4603      	mov	r3, r0
 80085da:	4293      	cmp	r3, r2
 80085dc:	d100      	bne.n	80085e0 <memset+0xa>
 80085de:	4770      	bx	lr
 80085e0:	f803 1b01 	strb.w	r1, [r3], #1
 80085e4:	e7f9      	b.n	80085da <memset+0x4>
	...

080085e8 <_free_r>:
 80085e8:	b538      	push	{r3, r4, r5, lr}
 80085ea:	4605      	mov	r5, r0
 80085ec:	2900      	cmp	r1, #0
 80085ee:	d045      	beq.n	800867c <_free_r+0x94>
 80085f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085f4:	1f0c      	subs	r4, r1, #4
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	bfb8      	it	lt
 80085fa:	18e4      	addlt	r4, r4, r3
 80085fc:	f000 fb92 	bl	8008d24 <__malloc_lock>
 8008600:	4a1f      	ldr	r2, [pc, #124]	; (8008680 <_free_r+0x98>)
 8008602:	6813      	ldr	r3, [r2, #0]
 8008604:	4610      	mov	r0, r2
 8008606:	b933      	cbnz	r3, 8008616 <_free_r+0x2e>
 8008608:	6063      	str	r3, [r4, #4]
 800860a:	6014      	str	r4, [r2, #0]
 800860c:	4628      	mov	r0, r5
 800860e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008612:	f000 bb88 	b.w	8008d26 <__malloc_unlock>
 8008616:	42a3      	cmp	r3, r4
 8008618:	d90c      	bls.n	8008634 <_free_r+0x4c>
 800861a:	6821      	ldr	r1, [r4, #0]
 800861c:	1862      	adds	r2, r4, r1
 800861e:	4293      	cmp	r3, r2
 8008620:	bf04      	itt	eq
 8008622:	681a      	ldreq	r2, [r3, #0]
 8008624:	685b      	ldreq	r3, [r3, #4]
 8008626:	6063      	str	r3, [r4, #4]
 8008628:	bf04      	itt	eq
 800862a:	1852      	addeq	r2, r2, r1
 800862c:	6022      	streq	r2, [r4, #0]
 800862e:	6004      	str	r4, [r0, #0]
 8008630:	e7ec      	b.n	800860c <_free_r+0x24>
 8008632:	4613      	mov	r3, r2
 8008634:	685a      	ldr	r2, [r3, #4]
 8008636:	b10a      	cbz	r2, 800863c <_free_r+0x54>
 8008638:	42a2      	cmp	r2, r4
 800863a:	d9fa      	bls.n	8008632 <_free_r+0x4a>
 800863c:	6819      	ldr	r1, [r3, #0]
 800863e:	1858      	adds	r0, r3, r1
 8008640:	42a0      	cmp	r0, r4
 8008642:	d10b      	bne.n	800865c <_free_r+0x74>
 8008644:	6820      	ldr	r0, [r4, #0]
 8008646:	4401      	add	r1, r0
 8008648:	1858      	adds	r0, r3, r1
 800864a:	4282      	cmp	r2, r0
 800864c:	6019      	str	r1, [r3, #0]
 800864e:	d1dd      	bne.n	800860c <_free_r+0x24>
 8008650:	6810      	ldr	r0, [r2, #0]
 8008652:	6852      	ldr	r2, [r2, #4]
 8008654:	605a      	str	r2, [r3, #4]
 8008656:	4401      	add	r1, r0
 8008658:	6019      	str	r1, [r3, #0]
 800865a:	e7d7      	b.n	800860c <_free_r+0x24>
 800865c:	d902      	bls.n	8008664 <_free_r+0x7c>
 800865e:	230c      	movs	r3, #12
 8008660:	602b      	str	r3, [r5, #0]
 8008662:	e7d3      	b.n	800860c <_free_r+0x24>
 8008664:	6820      	ldr	r0, [r4, #0]
 8008666:	1821      	adds	r1, r4, r0
 8008668:	428a      	cmp	r2, r1
 800866a:	bf04      	itt	eq
 800866c:	6811      	ldreq	r1, [r2, #0]
 800866e:	6852      	ldreq	r2, [r2, #4]
 8008670:	6062      	str	r2, [r4, #4]
 8008672:	bf04      	itt	eq
 8008674:	1809      	addeq	r1, r1, r0
 8008676:	6021      	streq	r1, [r4, #0]
 8008678:	605c      	str	r4, [r3, #4]
 800867a:	e7c7      	b.n	800860c <_free_r+0x24>
 800867c:	bd38      	pop	{r3, r4, r5, pc}
 800867e:	bf00      	nop
 8008680:	2000026c 	.word	0x2000026c

08008684 <_malloc_r>:
 8008684:	b570      	push	{r4, r5, r6, lr}
 8008686:	1ccd      	adds	r5, r1, #3
 8008688:	f025 0503 	bic.w	r5, r5, #3
 800868c:	3508      	adds	r5, #8
 800868e:	2d0c      	cmp	r5, #12
 8008690:	bf38      	it	cc
 8008692:	250c      	movcc	r5, #12
 8008694:	2d00      	cmp	r5, #0
 8008696:	4606      	mov	r6, r0
 8008698:	db01      	blt.n	800869e <_malloc_r+0x1a>
 800869a:	42a9      	cmp	r1, r5
 800869c:	d903      	bls.n	80086a6 <_malloc_r+0x22>
 800869e:	230c      	movs	r3, #12
 80086a0:	6033      	str	r3, [r6, #0]
 80086a2:	2000      	movs	r0, #0
 80086a4:	bd70      	pop	{r4, r5, r6, pc}
 80086a6:	f000 fb3d 	bl	8008d24 <__malloc_lock>
 80086aa:	4a23      	ldr	r2, [pc, #140]	; (8008738 <_malloc_r+0xb4>)
 80086ac:	6814      	ldr	r4, [r2, #0]
 80086ae:	4621      	mov	r1, r4
 80086b0:	b991      	cbnz	r1, 80086d8 <_malloc_r+0x54>
 80086b2:	4c22      	ldr	r4, [pc, #136]	; (800873c <_malloc_r+0xb8>)
 80086b4:	6823      	ldr	r3, [r4, #0]
 80086b6:	b91b      	cbnz	r3, 80086c0 <_malloc_r+0x3c>
 80086b8:	4630      	mov	r0, r6
 80086ba:	f000 f8bd 	bl	8008838 <_sbrk_r>
 80086be:	6020      	str	r0, [r4, #0]
 80086c0:	4629      	mov	r1, r5
 80086c2:	4630      	mov	r0, r6
 80086c4:	f000 f8b8 	bl	8008838 <_sbrk_r>
 80086c8:	1c43      	adds	r3, r0, #1
 80086ca:	d126      	bne.n	800871a <_malloc_r+0x96>
 80086cc:	230c      	movs	r3, #12
 80086ce:	6033      	str	r3, [r6, #0]
 80086d0:	4630      	mov	r0, r6
 80086d2:	f000 fb28 	bl	8008d26 <__malloc_unlock>
 80086d6:	e7e4      	b.n	80086a2 <_malloc_r+0x1e>
 80086d8:	680b      	ldr	r3, [r1, #0]
 80086da:	1b5b      	subs	r3, r3, r5
 80086dc:	d41a      	bmi.n	8008714 <_malloc_r+0x90>
 80086de:	2b0b      	cmp	r3, #11
 80086e0:	d90f      	bls.n	8008702 <_malloc_r+0x7e>
 80086e2:	600b      	str	r3, [r1, #0]
 80086e4:	50cd      	str	r5, [r1, r3]
 80086e6:	18cc      	adds	r4, r1, r3
 80086e8:	4630      	mov	r0, r6
 80086ea:	f000 fb1c 	bl	8008d26 <__malloc_unlock>
 80086ee:	f104 000b 	add.w	r0, r4, #11
 80086f2:	1d23      	adds	r3, r4, #4
 80086f4:	f020 0007 	bic.w	r0, r0, #7
 80086f8:	1ac3      	subs	r3, r0, r3
 80086fa:	d01b      	beq.n	8008734 <_malloc_r+0xb0>
 80086fc:	425a      	negs	r2, r3
 80086fe:	50e2      	str	r2, [r4, r3]
 8008700:	bd70      	pop	{r4, r5, r6, pc}
 8008702:	428c      	cmp	r4, r1
 8008704:	bf0d      	iteet	eq
 8008706:	6863      	ldreq	r3, [r4, #4]
 8008708:	684b      	ldrne	r3, [r1, #4]
 800870a:	6063      	strne	r3, [r4, #4]
 800870c:	6013      	streq	r3, [r2, #0]
 800870e:	bf18      	it	ne
 8008710:	460c      	movne	r4, r1
 8008712:	e7e9      	b.n	80086e8 <_malloc_r+0x64>
 8008714:	460c      	mov	r4, r1
 8008716:	6849      	ldr	r1, [r1, #4]
 8008718:	e7ca      	b.n	80086b0 <_malloc_r+0x2c>
 800871a:	1cc4      	adds	r4, r0, #3
 800871c:	f024 0403 	bic.w	r4, r4, #3
 8008720:	42a0      	cmp	r0, r4
 8008722:	d005      	beq.n	8008730 <_malloc_r+0xac>
 8008724:	1a21      	subs	r1, r4, r0
 8008726:	4630      	mov	r0, r6
 8008728:	f000 f886 	bl	8008838 <_sbrk_r>
 800872c:	3001      	adds	r0, #1
 800872e:	d0cd      	beq.n	80086cc <_malloc_r+0x48>
 8008730:	6025      	str	r5, [r4, #0]
 8008732:	e7d9      	b.n	80086e8 <_malloc_r+0x64>
 8008734:	bd70      	pop	{r4, r5, r6, pc}
 8008736:	bf00      	nop
 8008738:	2000026c 	.word	0x2000026c
 800873c:	20000270 	.word	0x20000270

08008740 <iprintf>:
 8008740:	b40f      	push	{r0, r1, r2, r3}
 8008742:	4b0a      	ldr	r3, [pc, #40]	; (800876c <iprintf+0x2c>)
 8008744:	b513      	push	{r0, r1, r4, lr}
 8008746:	681c      	ldr	r4, [r3, #0]
 8008748:	b124      	cbz	r4, 8008754 <iprintf+0x14>
 800874a:	69a3      	ldr	r3, [r4, #24]
 800874c:	b913      	cbnz	r3, 8008754 <iprintf+0x14>
 800874e:	4620      	mov	r0, r4
 8008750:	f7ff fe88 	bl	8008464 <__sinit>
 8008754:	ab05      	add	r3, sp, #20
 8008756:	9a04      	ldr	r2, [sp, #16]
 8008758:	68a1      	ldr	r1, [r4, #8]
 800875a:	9301      	str	r3, [sp, #4]
 800875c:	4620      	mov	r0, r4
 800875e:	f000 fb0d 	bl	8008d7c <_vfiprintf_r>
 8008762:	b002      	add	sp, #8
 8008764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008768:	b004      	add	sp, #16
 800876a:	4770      	bx	lr
 800876c:	200001a0 	.word	0x200001a0

08008770 <_puts_r>:
 8008770:	b570      	push	{r4, r5, r6, lr}
 8008772:	460e      	mov	r6, r1
 8008774:	4605      	mov	r5, r0
 8008776:	b118      	cbz	r0, 8008780 <_puts_r+0x10>
 8008778:	6983      	ldr	r3, [r0, #24]
 800877a:	b90b      	cbnz	r3, 8008780 <_puts_r+0x10>
 800877c:	f7ff fe72 	bl	8008464 <__sinit>
 8008780:	69ab      	ldr	r3, [r5, #24]
 8008782:	68ac      	ldr	r4, [r5, #8]
 8008784:	b913      	cbnz	r3, 800878c <_puts_r+0x1c>
 8008786:	4628      	mov	r0, r5
 8008788:	f7ff fe6c 	bl	8008464 <__sinit>
 800878c:	4b23      	ldr	r3, [pc, #140]	; (800881c <_puts_r+0xac>)
 800878e:	429c      	cmp	r4, r3
 8008790:	d117      	bne.n	80087c2 <_puts_r+0x52>
 8008792:	686c      	ldr	r4, [r5, #4]
 8008794:	89a3      	ldrh	r3, [r4, #12]
 8008796:	071b      	lsls	r3, r3, #28
 8008798:	d51d      	bpl.n	80087d6 <_puts_r+0x66>
 800879a:	6923      	ldr	r3, [r4, #16]
 800879c:	b1db      	cbz	r3, 80087d6 <_puts_r+0x66>
 800879e:	3e01      	subs	r6, #1
 80087a0:	68a3      	ldr	r3, [r4, #8]
 80087a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80087a6:	3b01      	subs	r3, #1
 80087a8:	60a3      	str	r3, [r4, #8]
 80087aa:	b9e9      	cbnz	r1, 80087e8 <_puts_r+0x78>
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	da2e      	bge.n	800880e <_puts_r+0x9e>
 80087b0:	4622      	mov	r2, r4
 80087b2:	210a      	movs	r1, #10
 80087b4:	4628      	mov	r0, r5
 80087b6:	f000 f955 	bl	8008a64 <__swbuf_r>
 80087ba:	3001      	adds	r0, #1
 80087bc:	d011      	beq.n	80087e2 <_puts_r+0x72>
 80087be:	200a      	movs	r0, #10
 80087c0:	bd70      	pop	{r4, r5, r6, pc}
 80087c2:	4b17      	ldr	r3, [pc, #92]	; (8008820 <_puts_r+0xb0>)
 80087c4:	429c      	cmp	r4, r3
 80087c6:	d101      	bne.n	80087cc <_puts_r+0x5c>
 80087c8:	68ac      	ldr	r4, [r5, #8]
 80087ca:	e7e3      	b.n	8008794 <_puts_r+0x24>
 80087cc:	4b15      	ldr	r3, [pc, #84]	; (8008824 <_puts_r+0xb4>)
 80087ce:	429c      	cmp	r4, r3
 80087d0:	bf08      	it	eq
 80087d2:	68ec      	ldreq	r4, [r5, #12]
 80087d4:	e7de      	b.n	8008794 <_puts_r+0x24>
 80087d6:	4621      	mov	r1, r4
 80087d8:	4628      	mov	r0, r5
 80087da:	f000 f9a7 	bl	8008b2c <__swsetup_r>
 80087de:	2800      	cmp	r0, #0
 80087e0:	d0dd      	beq.n	800879e <_puts_r+0x2e>
 80087e2:	f04f 30ff 	mov.w	r0, #4294967295
 80087e6:	bd70      	pop	{r4, r5, r6, pc}
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	da04      	bge.n	80087f6 <_puts_r+0x86>
 80087ec:	69a2      	ldr	r2, [r4, #24]
 80087ee:	4293      	cmp	r3, r2
 80087f0:	db06      	blt.n	8008800 <_puts_r+0x90>
 80087f2:	290a      	cmp	r1, #10
 80087f4:	d004      	beq.n	8008800 <_puts_r+0x90>
 80087f6:	6823      	ldr	r3, [r4, #0]
 80087f8:	1c5a      	adds	r2, r3, #1
 80087fa:	6022      	str	r2, [r4, #0]
 80087fc:	7019      	strb	r1, [r3, #0]
 80087fe:	e7cf      	b.n	80087a0 <_puts_r+0x30>
 8008800:	4622      	mov	r2, r4
 8008802:	4628      	mov	r0, r5
 8008804:	f000 f92e 	bl	8008a64 <__swbuf_r>
 8008808:	3001      	adds	r0, #1
 800880a:	d1c9      	bne.n	80087a0 <_puts_r+0x30>
 800880c:	e7e9      	b.n	80087e2 <_puts_r+0x72>
 800880e:	6823      	ldr	r3, [r4, #0]
 8008810:	200a      	movs	r0, #10
 8008812:	1c5a      	adds	r2, r3, #1
 8008814:	6022      	str	r2, [r4, #0]
 8008816:	7018      	strb	r0, [r3, #0]
 8008818:	bd70      	pop	{r4, r5, r6, pc}
 800881a:	bf00      	nop
 800881c:	0800941c 	.word	0x0800941c
 8008820:	0800943c 	.word	0x0800943c
 8008824:	080093fc 	.word	0x080093fc

08008828 <puts>:
 8008828:	4b02      	ldr	r3, [pc, #8]	; (8008834 <puts+0xc>)
 800882a:	4601      	mov	r1, r0
 800882c:	6818      	ldr	r0, [r3, #0]
 800882e:	f7ff bf9f 	b.w	8008770 <_puts_r>
 8008832:	bf00      	nop
 8008834:	200001a0 	.word	0x200001a0

08008838 <_sbrk_r>:
 8008838:	b538      	push	{r3, r4, r5, lr}
 800883a:	4c06      	ldr	r4, [pc, #24]	; (8008854 <_sbrk_r+0x1c>)
 800883c:	2300      	movs	r3, #0
 800883e:	4605      	mov	r5, r0
 8008840:	4608      	mov	r0, r1
 8008842:	6023      	str	r3, [r4, #0]
 8008844:	f7ff f964 	bl	8007b10 <_sbrk>
 8008848:	1c43      	adds	r3, r0, #1
 800884a:	d102      	bne.n	8008852 <_sbrk_r+0x1a>
 800884c:	6823      	ldr	r3, [r4, #0]
 800884e:	b103      	cbz	r3, 8008852 <_sbrk_r+0x1a>
 8008850:	602b      	str	r3, [r5, #0]
 8008852:	bd38      	pop	{r3, r4, r5, pc}
 8008854:	200013b4 	.word	0x200013b4

08008858 <setvbuf>:
 8008858:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800885c:	461d      	mov	r5, r3
 800885e:	4b51      	ldr	r3, [pc, #324]	; (80089a4 <setvbuf+0x14c>)
 8008860:	681e      	ldr	r6, [r3, #0]
 8008862:	4604      	mov	r4, r0
 8008864:	460f      	mov	r7, r1
 8008866:	4690      	mov	r8, r2
 8008868:	b126      	cbz	r6, 8008874 <setvbuf+0x1c>
 800886a:	69b3      	ldr	r3, [r6, #24]
 800886c:	b913      	cbnz	r3, 8008874 <setvbuf+0x1c>
 800886e:	4630      	mov	r0, r6
 8008870:	f7ff fdf8 	bl	8008464 <__sinit>
 8008874:	4b4c      	ldr	r3, [pc, #304]	; (80089a8 <setvbuf+0x150>)
 8008876:	429c      	cmp	r4, r3
 8008878:	d152      	bne.n	8008920 <setvbuf+0xc8>
 800887a:	6874      	ldr	r4, [r6, #4]
 800887c:	f1b8 0f02 	cmp.w	r8, #2
 8008880:	d006      	beq.n	8008890 <setvbuf+0x38>
 8008882:	f1b8 0f01 	cmp.w	r8, #1
 8008886:	f200 8089 	bhi.w	800899c <setvbuf+0x144>
 800888a:	2d00      	cmp	r5, #0
 800888c:	f2c0 8086 	blt.w	800899c <setvbuf+0x144>
 8008890:	4621      	mov	r1, r4
 8008892:	4630      	mov	r0, r6
 8008894:	f7ff fd7c 	bl	8008390 <_fflush_r>
 8008898:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800889a:	b141      	cbz	r1, 80088ae <setvbuf+0x56>
 800889c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088a0:	4299      	cmp	r1, r3
 80088a2:	d002      	beq.n	80088aa <setvbuf+0x52>
 80088a4:	4630      	mov	r0, r6
 80088a6:	f7ff fe9f 	bl	80085e8 <_free_r>
 80088aa:	2300      	movs	r3, #0
 80088ac:	6363      	str	r3, [r4, #52]	; 0x34
 80088ae:	2300      	movs	r3, #0
 80088b0:	61a3      	str	r3, [r4, #24]
 80088b2:	6063      	str	r3, [r4, #4]
 80088b4:	89a3      	ldrh	r3, [r4, #12]
 80088b6:	061b      	lsls	r3, r3, #24
 80088b8:	d503      	bpl.n	80088c2 <setvbuf+0x6a>
 80088ba:	6921      	ldr	r1, [r4, #16]
 80088bc:	4630      	mov	r0, r6
 80088be:	f7ff fe93 	bl	80085e8 <_free_r>
 80088c2:	89a3      	ldrh	r3, [r4, #12]
 80088c4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80088c8:	f023 0303 	bic.w	r3, r3, #3
 80088cc:	f1b8 0f02 	cmp.w	r8, #2
 80088d0:	81a3      	strh	r3, [r4, #12]
 80088d2:	d05d      	beq.n	8008990 <setvbuf+0x138>
 80088d4:	ab01      	add	r3, sp, #4
 80088d6:	466a      	mov	r2, sp
 80088d8:	4621      	mov	r1, r4
 80088da:	4630      	mov	r0, r6
 80088dc:	f000 f9b6 	bl	8008c4c <__swhatbuf_r>
 80088e0:	89a3      	ldrh	r3, [r4, #12]
 80088e2:	4318      	orrs	r0, r3
 80088e4:	81a0      	strh	r0, [r4, #12]
 80088e6:	bb2d      	cbnz	r5, 8008934 <setvbuf+0xdc>
 80088e8:	9d00      	ldr	r5, [sp, #0]
 80088ea:	4628      	mov	r0, r5
 80088ec:	f000 fa12 	bl	8008d14 <malloc>
 80088f0:	4607      	mov	r7, r0
 80088f2:	2800      	cmp	r0, #0
 80088f4:	d14e      	bne.n	8008994 <setvbuf+0x13c>
 80088f6:	f8dd 9000 	ldr.w	r9, [sp]
 80088fa:	45a9      	cmp	r9, r5
 80088fc:	d13c      	bne.n	8008978 <setvbuf+0x120>
 80088fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008902:	89a3      	ldrh	r3, [r4, #12]
 8008904:	f043 0302 	orr.w	r3, r3, #2
 8008908:	81a3      	strh	r3, [r4, #12]
 800890a:	2300      	movs	r3, #0
 800890c:	60a3      	str	r3, [r4, #8]
 800890e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008912:	6023      	str	r3, [r4, #0]
 8008914:	6123      	str	r3, [r4, #16]
 8008916:	2301      	movs	r3, #1
 8008918:	6163      	str	r3, [r4, #20]
 800891a:	b003      	add	sp, #12
 800891c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008920:	4b22      	ldr	r3, [pc, #136]	; (80089ac <setvbuf+0x154>)
 8008922:	429c      	cmp	r4, r3
 8008924:	d101      	bne.n	800892a <setvbuf+0xd2>
 8008926:	68b4      	ldr	r4, [r6, #8]
 8008928:	e7a8      	b.n	800887c <setvbuf+0x24>
 800892a:	4b21      	ldr	r3, [pc, #132]	; (80089b0 <setvbuf+0x158>)
 800892c:	429c      	cmp	r4, r3
 800892e:	bf08      	it	eq
 8008930:	68f4      	ldreq	r4, [r6, #12]
 8008932:	e7a3      	b.n	800887c <setvbuf+0x24>
 8008934:	2f00      	cmp	r7, #0
 8008936:	d0d8      	beq.n	80088ea <setvbuf+0x92>
 8008938:	69b3      	ldr	r3, [r6, #24]
 800893a:	b913      	cbnz	r3, 8008942 <setvbuf+0xea>
 800893c:	4630      	mov	r0, r6
 800893e:	f7ff fd91 	bl	8008464 <__sinit>
 8008942:	f1b8 0f01 	cmp.w	r8, #1
 8008946:	bf08      	it	eq
 8008948:	89a3      	ldrheq	r3, [r4, #12]
 800894a:	6027      	str	r7, [r4, #0]
 800894c:	bf04      	itt	eq
 800894e:	f043 0301 	orreq.w	r3, r3, #1
 8008952:	81a3      	strheq	r3, [r4, #12]
 8008954:	89a3      	ldrh	r3, [r4, #12]
 8008956:	6127      	str	r7, [r4, #16]
 8008958:	f013 0008 	ands.w	r0, r3, #8
 800895c:	6165      	str	r5, [r4, #20]
 800895e:	d01b      	beq.n	8008998 <setvbuf+0x140>
 8008960:	f013 0001 	ands.w	r0, r3, #1
 8008964:	bf18      	it	ne
 8008966:	426d      	negne	r5, r5
 8008968:	f04f 0300 	mov.w	r3, #0
 800896c:	bf1d      	ittte	ne
 800896e:	60a3      	strne	r3, [r4, #8]
 8008970:	61a5      	strne	r5, [r4, #24]
 8008972:	4618      	movne	r0, r3
 8008974:	60a5      	streq	r5, [r4, #8]
 8008976:	e7d0      	b.n	800891a <setvbuf+0xc2>
 8008978:	4648      	mov	r0, r9
 800897a:	f000 f9cb 	bl	8008d14 <malloc>
 800897e:	4607      	mov	r7, r0
 8008980:	2800      	cmp	r0, #0
 8008982:	d0bc      	beq.n	80088fe <setvbuf+0xa6>
 8008984:	89a3      	ldrh	r3, [r4, #12]
 8008986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800898a:	81a3      	strh	r3, [r4, #12]
 800898c:	464d      	mov	r5, r9
 800898e:	e7d3      	b.n	8008938 <setvbuf+0xe0>
 8008990:	2000      	movs	r0, #0
 8008992:	e7b6      	b.n	8008902 <setvbuf+0xaa>
 8008994:	46a9      	mov	r9, r5
 8008996:	e7f5      	b.n	8008984 <setvbuf+0x12c>
 8008998:	60a0      	str	r0, [r4, #8]
 800899a:	e7be      	b.n	800891a <setvbuf+0xc2>
 800899c:	f04f 30ff 	mov.w	r0, #4294967295
 80089a0:	e7bb      	b.n	800891a <setvbuf+0xc2>
 80089a2:	bf00      	nop
 80089a4:	200001a0 	.word	0x200001a0
 80089a8:	0800941c 	.word	0x0800941c
 80089ac:	0800943c 	.word	0x0800943c
 80089b0:	080093fc 	.word	0x080093fc

080089b4 <__sread>:
 80089b4:	b510      	push	{r4, lr}
 80089b6:	460c      	mov	r4, r1
 80089b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089bc:	f000 fc8a 	bl	80092d4 <_read_r>
 80089c0:	2800      	cmp	r0, #0
 80089c2:	bfab      	itete	ge
 80089c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80089c6:	89a3      	ldrhlt	r3, [r4, #12]
 80089c8:	181b      	addge	r3, r3, r0
 80089ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80089ce:	bfac      	ite	ge
 80089d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80089d2:	81a3      	strhlt	r3, [r4, #12]
 80089d4:	bd10      	pop	{r4, pc}

080089d6 <__swrite>:
 80089d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089da:	461f      	mov	r7, r3
 80089dc:	898b      	ldrh	r3, [r1, #12]
 80089de:	05db      	lsls	r3, r3, #23
 80089e0:	4605      	mov	r5, r0
 80089e2:	460c      	mov	r4, r1
 80089e4:	4616      	mov	r6, r2
 80089e6:	d505      	bpl.n	80089f4 <__swrite+0x1e>
 80089e8:	2302      	movs	r3, #2
 80089ea:	2200      	movs	r2, #0
 80089ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089f0:	f000 f91a 	bl	8008c28 <_lseek_r>
 80089f4:	89a3      	ldrh	r3, [r4, #12]
 80089f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089fe:	81a3      	strh	r3, [r4, #12]
 8008a00:	4632      	mov	r2, r6
 8008a02:	463b      	mov	r3, r7
 8008a04:	4628      	mov	r0, r5
 8008a06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a0a:	f000 b87d 	b.w	8008b08 <_write_r>

08008a0e <__sseek>:
 8008a0e:	b510      	push	{r4, lr}
 8008a10:	460c      	mov	r4, r1
 8008a12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a16:	f000 f907 	bl	8008c28 <_lseek_r>
 8008a1a:	1c43      	adds	r3, r0, #1
 8008a1c:	89a3      	ldrh	r3, [r4, #12]
 8008a1e:	bf15      	itete	ne
 8008a20:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a2a:	81a3      	strheq	r3, [r4, #12]
 8008a2c:	bf18      	it	ne
 8008a2e:	81a3      	strhne	r3, [r4, #12]
 8008a30:	bd10      	pop	{r4, pc}

08008a32 <__sclose>:
 8008a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a36:	f000 b8e7 	b.w	8008c08 <_close_r>

08008a3a <strncpy>:
 8008a3a:	b570      	push	{r4, r5, r6, lr}
 8008a3c:	4604      	mov	r4, r0
 8008a3e:	b902      	cbnz	r2, 8008a42 <strncpy+0x8>
 8008a40:	bd70      	pop	{r4, r5, r6, pc}
 8008a42:	4623      	mov	r3, r4
 8008a44:	f811 5b01 	ldrb.w	r5, [r1], #1
 8008a48:	f803 5b01 	strb.w	r5, [r3], #1
 8008a4c:	1e56      	subs	r6, r2, #1
 8008a4e:	b91d      	cbnz	r5, 8008a58 <strncpy+0x1e>
 8008a50:	4414      	add	r4, r2
 8008a52:	42a3      	cmp	r3, r4
 8008a54:	d103      	bne.n	8008a5e <strncpy+0x24>
 8008a56:	bd70      	pop	{r4, r5, r6, pc}
 8008a58:	461c      	mov	r4, r3
 8008a5a:	4632      	mov	r2, r6
 8008a5c:	e7ef      	b.n	8008a3e <strncpy+0x4>
 8008a5e:	f803 5b01 	strb.w	r5, [r3], #1
 8008a62:	e7f6      	b.n	8008a52 <strncpy+0x18>

08008a64 <__swbuf_r>:
 8008a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a66:	460e      	mov	r6, r1
 8008a68:	4614      	mov	r4, r2
 8008a6a:	4605      	mov	r5, r0
 8008a6c:	b118      	cbz	r0, 8008a76 <__swbuf_r+0x12>
 8008a6e:	6983      	ldr	r3, [r0, #24]
 8008a70:	b90b      	cbnz	r3, 8008a76 <__swbuf_r+0x12>
 8008a72:	f7ff fcf7 	bl	8008464 <__sinit>
 8008a76:	4b21      	ldr	r3, [pc, #132]	; (8008afc <__swbuf_r+0x98>)
 8008a78:	429c      	cmp	r4, r3
 8008a7a:	d12a      	bne.n	8008ad2 <__swbuf_r+0x6e>
 8008a7c:	686c      	ldr	r4, [r5, #4]
 8008a7e:	69a3      	ldr	r3, [r4, #24]
 8008a80:	60a3      	str	r3, [r4, #8]
 8008a82:	89a3      	ldrh	r3, [r4, #12]
 8008a84:	071a      	lsls	r2, r3, #28
 8008a86:	d52e      	bpl.n	8008ae6 <__swbuf_r+0x82>
 8008a88:	6923      	ldr	r3, [r4, #16]
 8008a8a:	b363      	cbz	r3, 8008ae6 <__swbuf_r+0x82>
 8008a8c:	6923      	ldr	r3, [r4, #16]
 8008a8e:	6820      	ldr	r0, [r4, #0]
 8008a90:	1ac0      	subs	r0, r0, r3
 8008a92:	6963      	ldr	r3, [r4, #20]
 8008a94:	b2f6      	uxtb	r6, r6
 8008a96:	4298      	cmp	r0, r3
 8008a98:	4637      	mov	r7, r6
 8008a9a:	db04      	blt.n	8008aa6 <__swbuf_r+0x42>
 8008a9c:	4621      	mov	r1, r4
 8008a9e:	4628      	mov	r0, r5
 8008aa0:	f7ff fc76 	bl	8008390 <_fflush_r>
 8008aa4:	bb28      	cbnz	r0, 8008af2 <__swbuf_r+0x8e>
 8008aa6:	68a3      	ldr	r3, [r4, #8]
 8008aa8:	3b01      	subs	r3, #1
 8008aaa:	60a3      	str	r3, [r4, #8]
 8008aac:	6823      	ldr	r3, [r4, #0]
 8008aae:	1c5a      	adds	r2, r3, #1
 8008ab0:	6022      	str	r2, [r4, #0]
 8008ab2:	701e      	strb	r6, [r3, #0]
 8008ab4:	6963      	ldr	r3, [r4, #20]
 8008ab6:	3001      	adds	r0, #1
 8008ab8:	4298      	cmp	r0, r3
 8008aba:	d004      	beq.n	8008ac6 <__swbuf_r+0x62>
 8008abc:	89a3      	ldrh	r3, [r4, #12]
 8008abe:	07db      	lsls	r3, r3, #31
 8008ac0:	d519      	bpl.n	8008af6 <__swbuf_r+0x92>
 8008ac2:	2e0a      	cmp	r6, #10
 8008ac4:	d117      	bne.n	8008af6 <__swbuf_r+0x92>
 8008ac6:	4621      	mov	r1, r4
 8008ac8:	4628      	mov	r0, r5
 8008aca:	f7ff fc61 	bl	8008390 <_fflush_r>
 8008ace:	b190      	cbz	r0, 8008af6 <__swbuf_r+0x92>
 8008ad0:	e00f      	b.n	8008af2 <__swbuf_r+0x8e>
 8008ad2:	4b0b      	ldr	r3, [pc, #44]	; (8008b00 <__swbuf_r+0x9c>)
 8008ad4:	429c      	cmp	r4, r3
 8008ad6:	d101      	bne.n	8008adc <__swbuf_r+0x78>
 8008ad8:	68ac      	ldr	r4, [r5, #8]
 8008ada:	e7d0      	b.n	8008a7e <__swbuf_r+0x1a>
 8008adc:	4b09      	ldr	r3, [pc, #36]	; (8008b04 <__swbuf_r+0xa0>)
 8008ade:	429c      	cmp	r4, r3
 8008ae0:	bf08      	it	eq
 8008ae2:	68ec      	ldreq	r4, [r5, #12]
 8008ae4:	e7cb      	b.n	8008a7e <__swbuf_r+0x1a>
 8008ae6:	4621      	mov	r1, r4
 8008ae8:	4628      	mov	r0, r5
 8008aea:	f000 f81f 	bl	8008b2c <__swsetup_r>
 8008aee:	2800      	cmp	r0, #0
 8008af0:	d0cc      	beq.n	8008a8c <__swbuf_r+0x28>
 8008af2:	f04f 37ff 	mov.w	r7, #4294967295
 8008af6:	4638      	mov	r0, r7
 8008af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008afa:	bf00      	nop
 8008afc:	0800941c 	.word	0x0800941c
 8008b00:	0800943c 	.word	0x0800943c
 8008b04:	080093fc 	.word	0x080093fc

08008b08 <_write_r>:
 8008b08:	b538      	push	{r3, r4, r5, lr}
 8008b0a:	4c07      	ldr	r4, [pc, #28]	; (8008b28 <_write_r+0x20>)
 8008b0c:	4605      	mov	r5, r0
 8008b0e:	4608      	mov	r0, r1
 8008b10:	4611      	mov	r1, r2
 8008b12:	2200      	movs	r2, #0
 8008b14:	6022      	str	r2, [r4, #0]
 8008b16:	461a      	mov	r2, r3
 8008b18:	f7fe ffec 	bl	8007af4 <_write>
 8008b1c:	1c43      	adds	r3, r0, #1
 8008b1e:	d102      	bne.n	8008b26 <_write_r+0x1e>
 8008b20:	6823      	ldr	r3, [r4, #0]
 8008b22:	b103      	cbz	r3, 8008b26 <_write_r+0x1e>
 8008b24:	602b      	str	r3, [r5, #0]
 8008b26:	bd38      	pop	{r3, r4, r5, pc}
 8008b28:	200013b4 	.word	0x200013b4

08008b2c <__swsetup_r>:
 8008b2c:	4b32      	ldr	r3, [pc, #200]	; (8008bf8 <__swsetup_r+0xcc>)
 8008b2e:	b570      	push	{r4, r5, r6, lr}
 8008b30:	681d      	ldr	r5, [r3, #0]
 8008b32:	4606      	mov	r6, r0
 8008b34:	460c      	mov	r4, r1
 8008b36:	b125      	cbz	r5, 8008b42 <__swsetup_r+0x16>
 8008b38:	69ab      	ldr	r3, [r5, #24]
 8008b3a:	b913      	cbnz	r3, 8008b42 <__swsetup_r+0x16>
 8008b3c:	4628      	mov	r0, r5
 8008b3e:	f7ff fc91 	bl	8008464 <__sinit>
 8008b42:	4b2e      	ldr	r3, [pc, #184]	; (8008bfc <__swsetup_r+0xd0>)
 8008b44:	429c      	cmp	r4, r3
 8008b46:	d10f      	bne.n	8008b68 <__swsetup_r+0x3c>
 8008b48:	686c      	ldr	r4, [r5, #4]
 8008b4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b4e:	b29a      	uxth	r2, r3
 8008b50:	0715      	lsls	r5, r2, #28
 8008b52:	d42c      	bmi.n	8008bae <__swsetup_r+0x82>
 8008b54:	06d0      	lsls	r0, r2, #27
 8008b56:	d411      	bmi.n	8008b7c <__swsetup_r+0x50>
 8008b58:	2209      	movs	r2, #9
 8008b5a:	6032      	str	r2, [r6, #0]
 8008b5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b60:	81a3      	strh	r3, [r4, #12]
 8008b62:	f04f 30ff 	mov.w	r0, #4294967295
 8008b66:	bd70      	pop	{r4, r5, r6, pc}
 8008b68:	4b25      	ldr	r3, [pc, #148]	; (8008c00 <__swsetup_r+0xd4>)
 8008b6a:	429c      	cmp	r4, r3
 8008b6c:	d101      	bne.n	8008b72 <__swsetup_r+0x46>
 8008b6e:	68ac      	ldr	r4, [r5, #8]
 8008b70:	e7eb      	b.n	8008b4a <__swsetup_r+0x1e>
 8008b72:	4b24      	ldr	r3, [pc, #144]	; (8008c04 <__swsetup_r+0xd8>)
 8008b74:	429c      	cmp	r4, r3
 8008b76:	bf08      	it	eq
 8008b78:	68ec      	ldreq	r4, [r5, #12]
 8008b7a:	e7e6      	b.n	8008b4a <__swsetup_r+0x1e>
 8008b7c:	0751      	lsls	r1, r2, #29
 8008b7e:	d512      	bpl.n	8008ba6 <__swsetup_r+0x7a>
 8008b80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b82:	b141      	cbz	r1, 8008b96 <__swsetup_r+0x6a>
 8008b84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b88:	4299      	cmp	r1, r3
 8008b8a:	d002      	beq.n	8008b92 <__swsetup_r+0x66>
 8008b8c:	4630      	mov	r0, r6
 8008b8e:	f7ff fd2b 	bl	80085e8 <_free_r>
 8008b92:	2300      	movs	r3, #0
 8008b94:	6363      	str	r3, [r4, #52]	; 0x34
 8008b96:	89a3      	ldrh	r3, [r4, #12]
 8008b98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b9c:	81a3      	strh	r3, [r4, #12]
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	6063      	str	r3, [r4, #4]
 8008ba2:	6923      	ldr	r3, [r4, #16]
 8008ba4:	6023      	str	r3, [r4, #0]
 8008ba6:	89a3      	ldrh	r3, [r4, #12]
 8008ba8:	f043 0308 	orr.w	r3, r3, #8
 8008bac:	81a3      	strh	r3, [r4, #12]
 8008bae:	6923      	ldr	r3, [r4, #16]
 8008bb0:	b94b      	cbnz	r3, 8008bc6 <__swsetup_r+0x9a>
 8008bb2:	89a3      	ldrh	r3, [r4, #12]
 8008bb4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008bb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bbc:	d003      	beq.n	8008bc6 <__swsetup_r+0x9a>
 8008bbe:	4621      	mov	r1, r4
 8008bc0:	4630      	mov	r0, r6
 8008bc2:	f000 f867 	bl	8008c94 <__smakebuf_r>
 8008bc6:	89a2      	ldrh	r2, [r4, #12]
 8008bc8:	f012 0301 	ands.w	r3, r2, #1
 8008bcc:	d00c      	beq.n	8008be8 <__swsetup_r+0xbc>
 8008bce:	2300      	movs	r3, #0
 8008bd0:	60a3      	str	r3, [r4, #8]
 8008bd2:	6963      	ldr	r3, [r4, #20]
 8008bd4:	425b      	negs	r3, r3
 8008bd6:	61a3      	str	r3, [r4, #24]
 8008bd8:	6923      	ldr	r3, [r4, #16]
 8008bda:	b953      	cbnz	r3, 8008bf2 <__swsetup_r+0xc6>
 8008bdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008be0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008be4:	d1ba      	bne.n	8008b5c <__swsetup_r+0x30>
 8008be6:	bd70      	pop	{r4, r5, r6, pc}
 8008be8:	0792      	lsls	r2, r2, #30
 8008bea:	bf58      	it	pl
 8008bec:	6963      	ldrpl	r3, [r4, #20]
 8008bee:	60a3      	str	r3, [r4, #8]
 8008bf0:	e7f2      	b.n	8008bd8 <__swsetup_r+0xac>
 8008bf2:	2000      	movs	r0, #0
 8008bf4:	e7f7      	b.n	8008be6 <__swsetup_r+0xba>
 8008bf6:	bf00      	nop
 8008bf8:	200001a0 	.word	0x200001a0
 8008bfc:	0800941c 	.word	0x0800941c
 8008c00:	0800943c 	.word	0x0800943c
 8008c04:	080093fc 	.word	0x080093fc

08008c08 <_close_r>:
 8008c08:	b538      	push	{r3, r4, r5, lr}
 8008c0a:	4c06      	ldr	r4, [pc, #24]	; (8008c24 <_close_r+0x1c>)
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	4605      	mov	r5, r0
 8008c10:	4608      	mov	r0, r1
 8008c12:	6023      	str	r3, [r4, #0]
 8008c14:	f7fe ff96 	bl	8007b44 <_close>
 8008c18:	1c43      	adds	r3, r0, #1
 8008c1a:	d102      	bne.n	8008c22 <_close_r+0x1a>
 8008c1c:	6823      	ldr	r3, [r4, #0]
 8008c1e:	b103      	cbz	r3, 8008c22 <_close_r+0x1a>
 8008c20:	602b      	str	r3, [r5, #0]
 8008c22:	bd38      	pop	{r3, r4, r5, pc}
 8008c24:	200013b4 	.word	0x200013b4

08008c28 <_lseek_r>:
 8008c28:	b538      	push	{r3, r4, r5, lr}
 8008c2a:	4c07      	ldr	r4, [pc, #28]	; (8008c48 <_lseek_r+0x20>)
 8008c2c:	4605      	mov	r5, r0
 8008c2e:	4608      	mov	r0, r1
 8008c30:	4611      	mov	r1, r2
 8008c32:	2200      	movs	r2, #0
 8008c34:	6022      	str	r2, [r4, #0]
 8008c36:	461a      	mov	r2, r3
 8008c38:	f7fe ff8e 	bl	8007b58 <_lseek>
 8008c3c:	1c43      	adds	r3, r0, #1
 8008c3e:	d102      	bne.n	8008c46 <_lseek_r+0x1e>
 8008c40:	6823      	ldr	r3, [r4, #0]
 8008c42:	b103      	cbz	r3, 8008c46 <_lseek_r+0x1e>
 8008c44:	602b      	str	r3, [r5, #0]
 8008c46:	bd38      	pop	{r3, r4, r5, pc}
 8008c48:	200013b4 	.word	0x200013b4

08008c4c <__swhatbuf_r>:
 8008c4c:	b570      	push	{r4, r5, r6, lr}
 8008c4e:	460e      	mov	r6, r1
 8008c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c54:	2900      	cmp	r1, #0
 8008c56:	b090      	sub	sp, #64	; 0x40
 8008c58:	4614      	mov	r4, r2
 8008c5a:	461d      	mov	r5, r3
 8008c5c:	da07      	bge.n	8008c6e <__swhatbuf_r+0x22>
 8008c5e:	2300      	movs	r3, #0
 8008c60:	602b      	str	r3, [r5, #0]
 8008c62:	89b3      	ldrh	r3, [r6, #12]
 8008c64:	061a      	lsls	r2, r3, #24
 8008c66:	d410      	bmi.n	8008c8a <__swhatbuf_r+0x3e>
 8008c68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c6c:	e00e      	b.n	8008c8c <__swhatbuf_r+0x40>
 8008c6e:	aa01      	add	r2, sp, #4
 8008c70:	f000 fb42 	bl	80092f8 <_fstat_r>
 8008c74:	2800      	cmp	r0, #0
 8008c76:	dbf2      	blt.n	8008c5e <__swhatbuf_r+0x12>
 8008c78:	9a02      	ldr	r2, [sp, #8]
 8008c7a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008c7e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008c82:	425a      	negs	r2, r3
 8008c84:	415a      	adcs	r2, r3
 8008c86:	602a      	str	r2, [r5, #0]
 8008c88:	e7ee      	b.n	8008c68 <__swhatbuf_r+0x1c>
 8008c8a:	2340      	movs	r3, #64	; 0x40
 8008c8c:	2000      	movs	r0, #0
 8008c8e:	6023      	str	r3, [r4, #0]
 8008c90:	b010      	add	sp, #64	; 0x40
 8008c92:	bd70      	pop	{r4, r5, r6, pc}

08008c94 <__smakebuf_r>:
 8008c94:	898b      	ldrh	r3, [r1, #12]
 8008c96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c98:	079d      	lsls	r5, r3, #30
 8008c9a:	4606      	mov	r6, r0
 8008c9c:	460c      	mov	r4, r1
 8008c9e:	d507      	bpl.n	8008cb0 <__smakebuf_r+0x1c>
 8008ca0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ca4:	6023      	str	r3, [r4, #0]
 8008ca6:	6123      	str	r3, [r4, #16]
 8008ca8:	2301      	movs	r3, #1
 8008caa:	6163      	str	r3, [r4, #20]
 8008cac:	b002      	add	sp, #8
 8008cae:	bd70      	pop	{r4, r5, r6, pc}
 8008cb0:	ab01      	add	r3, sp, #4
 8008cb2:	466a      	mov	r2, sp
 8008cb4:	f7ff ffca 	bl	8008c4c <__swhatbuf_r>
 8008cb8:	9900      	ldr	r1, [sp, #0]
 8008cba:	4605      	mov	r5, r0
 8008cbc:	4630      	mov	r0, r6
 8008cbe:	f7ff fce1 	bl	8008684 <_malloc_r>
 8008cc2:	b948      	cbnz	r0, 8008cd8 <__smakebuf_r+0x44>
 8008cc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cc8:	059a      	lsls	r2, r3, #22
 8008cca:	d4ef      	bmi.n	8008cac <__smakebuf_r+0x18>
 8008ccc:	f023 0303 	bic.w	r3, r3, #3
 8008cd0:	f043 0302 	orr.w	r3, r3, #2
 8008cd4:	81a3      	strh	r3, [r4, #12]
 8008cd6:	e7e3      	b.n	8008ca0 <__smakebuf_r+0xc>
 8008cd8:	4b0d      	ldr	r3, [pc, #52]	; (8008d10 <__smakebuf_r+0x7c>)
 8008cda:	62b3      	str	r3, [r6, #40]	; 0x28
 8008cdc:	89a3      	ldrh	r3, [r4, #12]
 8008cde:	6020      	str	r0, [r4, #0]
 8008ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ce4:	81a3      	strh	r3, [r4, #12]
 8008ce6:	9b00      	ldr	r3, [sp, #0]
 8008ce8:	6163      	str	r3, [r4, #20]
 8008cea:	9b01      	ldr	r3, [sp, #4]
 8008cec:	6120      	str	r0, [r4, #16]
 8008cee:	b15b      	cbz	r3, 8008d08 <__smakebuf_r+0x74>
 8008cf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cf4:	4630      	mov	r0, r6
 8008cf6:	f000 fb11 	bl	800931c <_isatty_r>
 8008cfa:	b128      	cbz	r0, 8008d08 <__smakebuf_r+0x74>
 8008cfc:	89a3      	ldrh	r3, [r4, #12]
 8008cfe:	f023 0303 	bic.w	r3, r3, #3
 8008d02:	f043 0301 	orr.w	r3, r3, #1
 8008d06:	81a3      	strh	r3, [r4, #12]
 8008d08:	89a3      	ldrh	r3, [r4, #12]
 8008d0a:	431d      	orrs	r5, r3
 8008d0c:	81a5      	strh	r5, [r4, #12]
 8008d0e:	e7cd      	b.n	8008cac <__smakebuf_r+0x18>
 8008d10:	080083e5 	.word	0x080083e5

08008d14 <malloc>:
 8008d14:	4b02      	ldr	r3, [pc, #8]	; (8008d20 <malloc+0xc>)
 8008d16:	4601      	mov	r1, r0
 8008d18:	6818      	ldr	r0, [r3, #0]
 8008d1a:	f7ff bcb3 	b.w	8008684 <_malloc_r>
 8008d1e:	bf00      	nop
 8008d20:	200001a0 	.word	0x200001a0

08008d24 <__malloc_lock>:
 8008d24:	4770      	bx	lr

08008d26 <__malloc_unlock>:
 8008d26:	4770      	bx	lr

08008d28 <__sfputc_r>:
 8008d28:	6893      	ldr	r3, [r2, #8]
 8008d2a:	3b01      	subs	r3, #1
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	b410      	push	{r4}
 8008d30:	6093      	str	r3, [r2, #8]
 8008d32:	da09      	bge.n	8008d48 <__sfputc_r+0x20>
 8008d34:	6994      	ldr	r4, [r2, #24]
 8008d36:	42a3      	cmp	r3, r4
 8008d38:	db02      	blt.n	8008d40 <__sfputc_r+0x18>
 8008d3a:	b2cb      	uxtb	r3, r1
 8008d3c:	2b0a      	cmp	r3, #10
 8008d3e:	d103      	bne.n	8008d48 <__sfputc_r+0x20>
 8008d40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d44:	f7ff be8e 	b.w	8008a64 <__swbuf_r>
 8008d48:	6813      	ldr	r3, [r2, #0]
 8008d4a:	1c58      	adds	r0, r3, #1
 8008d4c:	6010      	str	r0, [r2, #0]
 8008d4e:	7019      	strb	r1, [r3, #0]
 8008d50:	b2c8      	uxtb	r0, r1
 8008d52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d56:	4770      	bx	lr

08008d58 <__sfputs_r>:
 8008d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d5a:	4606      	mov	r6, r0
 8008d5c:	460f      	mov	r7, r1
 8008d5e:	4614      	mov	r4, r2
 8008d60:	18d5      	adds	r5, r2, r3
 8008d62:	42ac      	cmp	r4, r5
 8008d64:	d101      	bne.n	8008d6a <__sfputs_r+0x12>
 8008d66:	2000      	movs	r0, #0
 8008d68:	e007      	b.n	8008d7a <__sfputs_r+0x22>
 8008d6a:	463a      	mov	r2, r7
 8008d6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d70:	4630      	mov	r0, r6
 8008d72:	f7ff ffd9 	bl	8008d28 <__sfputc_r>
 8008d76:	1c43      	adds	r3, r0, #1
 8008d78:	d1f3      	bne.n	8008d62 <__sfputs_r+0xa>
 8008d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008d7c <_vfiprintf_r>:
 8008d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d80:	b09d      	sub	sp, #116	; 0x74
 8008d82:	460c      	mov	r4, r1
 8008d84:	4617      	mov	r7, r2
 8008d86:	9303      	str	r3, [sp, #12]
 8008d88:	4606      	mov	r6, r0
 8008d8a:	b118      	cbz	r0, 8008d94 <_vfiprintf_r+0x18>
 8008d8c:	6983      	ldr	r3, [r0, #24]
 8008d8e:	b90b      	cbnz	r3, 8008d94 <_vfiprintf_r+0x18>
 8008d90:	f7ff fb68 	bl	8008464 <__sinit>
 8008d94:	4b7c      	ldr	r3, [pc, #496]	; (8008f88 <_vfiprintf_r+0x20c>)
 8008d96:	429c      	cmp	r4, r3
 8008d98:	d157      	bne.n	8008e4a <_vfiprintf_r+0xce>
 8008d9a:	6874      	ldr	r4, [r6, #4]
 8008d9c:	89a3      	ldrh	r3, [r4, #12]
 8008d9e:	0718      	lsls	r0, r3, #28
 8008da0:	d55d      	bpl.n	8008e5e <_vfiprintf_r+0xe2>
 8008da2:	6923      	ldr	r3, [r4, #16]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d05a      	beq.n	8008e5e <_vfiprintf_r+0xe2>
 8008da8:	2300      	movs	r3, #0
 8008daa:	9309      	str	r3, [sp, #36]	; 0x24
 8008dac:	2320      	movs	r3, #32
 8008dae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008db2:	2330      	movs	r3, #48	; 0x30
 8008db4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008db8:	f04f 0b01 	mov.w	fp, #1
 8008dbc:	46b8      	mov	r8, r7
 8008dbe:	4645      	mov	r5, r8
 8008dc0:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d155      	bne.n	8008e74 <_vfiprintf_r+0xf8>
 8008dc8:	ebb8 0a07 	subs.w	sl, r8, r7
 8008dcc:	d00b      	beq.n	8008de6 <_vfiprintf_r+0x6a>
 8008dce:	4653      	mov	r3, sl
 8008dd0:	463a      	mov	r2, r7
 8008dd2:	4621      	mov	r1, r4
 8008dd4:	4630      	mov	r0, r6
 8008dd6:	f7ff ffbf 	bl	8008d58 <__sfputs_r>
 8008dda:	3001      	adds	r0, #1
 8008ddc:	f000 80c4 	beq.w	8008f68 <_vfiprintf_r+0x1ec>
 8008de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008de2:	4453      	add	r3, sl
 8008de4:	9309      	str	r3, [sp, #36]	; 0x24
 8008de6:	f898 3000 	ldrb.w	r3, [r8]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	f000 80bc 	beq.w	8008f68 <_vfiprintf_r+0x1ec>
 8008df0:	2300      	movs	r3, #0
 8008df2:	f04f 32ff 	mov.w	r2, #4294967295
 8008df6:	9304      	str	r3, [sp, #16]
 8008df8:	9307      	str	r3, [sp, #28]
 8008dfa:	9205      	str	r2, [sp, #20]
 8008dfc:	9306      	str	r3, [sp, #24]
 8008dfe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e02:	931a      	str	r3, [sp, #104]	; 0x68
 8008e04:	2205      	movs	r2, #5
 8008e06:	7829      	ldrb	r1, [r5, #0]
 8008e08:	4860      	ldr	r0, [pc, #384]	; (8008f8c <_vfiprintf_r+0x210>)
 8008e0a:	f7f7 f9e9 	bl	80001e0 <memchr>
 8008e0e:	f105 0801 	add.w	r8, r5, #1
 8008e12:	9b04      	ldr	r3, [sp, #16]
 8008e14:	2800      	cmp	r0, #0
 8008e16:	d131      	bne.n	8008e7c <_vfiprintf_r+0x100>
 8008e18:	06d9      	lsls	r1, r3, #27
 8008e1a:	bf44      	itt	mi
 8008e1c:	2220      	movmi	r2, #32
 8008e1e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008e22:	071a      	lsls	r2, r3, #28
 8008e24:	bf44      	itt	mi
 8008e26:	222b      	movmi	r2, #43	; 0x2b
 8008e28:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008e2c:	782a      	ldrb	r2, [r5, #0]
 8008e2e:	2a2a      	cmp	r2, #42	; 0x2a
 8008e30:	d02c      	beq.n	8008e8c <_vfiprintf_r+0x110>
 8008e32:	9a07      	ldr	r2, [sp, #28]
 8008e34:	2100      	movs	r1, #0
 8008e36:	200a      	movs	r0, #10
 8008e38:	46a8      	mov	r8, r5
 8008e3a:	3501      	adds	r5, #1
 8008e3c:	f898 3000 	ldrb.w	r3, [r8]
 8008e40:	3b30      	subs	r3, #48	; 0x30
 8008e42:	2b09      	cmp	r3, #9
 8008e44:	d96d      	bls.n	8008f22 <_vfiprintf_r+0x1a6>
 8008e46:	b371      	cbz	r1, 8008ea6 <_vfiprintf_r+0x12a>
 8008e48:	e026      	b.n	8008e98 <_vfiprintf_r+0x11c>
 8008e4a:	4b51      	ldr	r3, [pc, #324]	; (8008f90 <_vfiprintf_r+0x214>)
 8008e4c:	429c      	cmp	r4, r3
 8008e4e:	d101      	bne.n	8008e54 <_vfiprintf_r+0xd8>
 8008e50:	68b4      	ldr	r4, [r6, #8]
 8008e52:	e7a3      	b.n	8008d9c <_vfiprintf_r+0x20>
 8008e54:	4b4f      	ldr	r3, [pc, #316]	; (8008f94 <_vfiprintf_r+0x218>)
 8008e56:	429c      	cmp	r4, r3
 8008e58:	bf08      	it	eq
 8008e5a:	68f4      	ldreq	r4, [r6, #12]
 8008e5c:	e79e      	b.n	8008d9c <_vfiprintf_r+0x20>
 8008e5e:	4621      	mov	r1, r4
 8008e60:	4630      	mov	r0, r6
 8008e62:	f7ff fe63 	bl	8008b2c <__swsetup_r>
 8008e66:	2800      	cmp	r0, #0
 8008e68:	d09e      	beq.n	8008da8 <_vfiprintf_r+0x2c>
 8008e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e6e:	b01d      	add	sp, #116	; 0x74
 8008e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e74:	2b25      	cmp	r3, #37	; 0x25
 8008e76:	d0a7      	beq.n	8008dc8 <_vfiprintf_r+0x4c>
 8008e78:	46a8      	mov	r8, r5
 8008e7a:	e7a0      	b.n	8008dbe <_vfiprintf_r+0x42>
 8008e7c:	4a43      	ldr	r2, [pc, #268]	; (8008f8c <_vfiprintf_r+0x210>)
 8008e7e:	1a80      	subs	r0, r0, r2
 8008e80:	fa0b f000 	lsl.w	r0, fp, r0
 8008e84:	4318      	orrs	r0, r3
 8008e86:	9004      	str	r0, [sp, #16]
 8008e88:	4645      	mov	r5, r8
 8008e8a:	e7bb      	b.n	8008e04 <_vfiprintf_r+0x88>
 8008e8c:	9a03      	ldr	r2, [sp, #12]
 8008e8e:	1d11      	adds	r1, r2, #4
 8008e90:	6812      	ldr	r2, [r2, #0]
 8008e92:	9103      	str	r1, [sp, #12]
 8008e94:	2a00      	cmp	r2, #0
 8008e96:	db01      	blt.n	8008e9c <_vfiprintf_r+0x120>
 8008e98:	9207      	str	r2, [sp, #28]
 8008e9a:	e004      	b.n	8008ea6 <_vfiprintf_r+0x12a>
 8008e9c:	4252      	negs	r2, r2
 8008e9e:	f043 0302 	orr.w	r3, r3, #2
 8008ea2:	9207      	str	r2, [sp, #28]
 8008ea4:	9304      	str	r3, [sp, #16]
 8008ea6:	f898 3000 	ldrb.w	r3, [r8]
 8008eaa:	2b2e      	cmp	r3, #46	; 0x2e
 8008eac:	d110      	bne.n	8008ed0 <_vfiprintf_r+0x154>
 8008eae:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008eb2:	2b2a      	cmp	r3, #42	; 0x2a
 8008eb4:	f108 0101 	add.w	r1, r8, #1
 8008eb8:	d137      	bne.n	8008f2a <_vfiprintf_r+0x1ae>
 8008eba:	9b03      	ldr	r3, [sp, #12]
 8008ebc:	1d1a      	adds	r2, r3, #4
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	9203      	str	r2, [sp, #12]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	bfb8      	it	lt
 8008ec6:	f04f 33ff 	movlt.w	r3, #4294967295
 8008eca:	f108 0802 	add.w	r8, r8, #2
 8008ece:	9305      	str	r3, [sp, #20]
 8008ed0:	4d31      	ldr	r5, [pc, #196]	; (8008f98 <_vfiprintf_r+0x21c>)
 8008ed2:	f898 1000 	ldrb.w	r1, [r8]
 8008ed6:	2203      	movs	r2, #3
 8008ed8:	4628      	mov	r0, r5
 8008eda:	f7f7 f981 	bl	80001e0 <memchr>
 8008ede:	b140      	cbz	r0, 8008ef2 <_vfiprintf_r+0x176>
 8008ee0:	2340      	movs	r3, #64	; 0x40
 8008ee2:	1b40      	subs	r0, r0, r5
 8008ee4:	fa03 f000 	lsl.w	r0, r3, r0
 8008ee8:	9b04      	ldr	r3, [sp, #16]
 8008eea:	4303      	orrs	r3, r0
 8008eec:	9304      	str	r3, [sp, #16]
 8008eee:	f108 0801 	add.w	r8, r8, #1
 8008ef2:	f898 1000 	ldrb.w	r1, [r8]
 8008ef6:	4829      	ldr	r0, [pc, #164]	; (8008f9c <_vfiprintf_r+0x220>)
 8008ef8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008efc:	2206      	movs	r2, #6
 8008efe:	f108 0701 	add.w	r7, r8, #1
 8008f02:	f7f7 f96d 	bl	80001e0 <memchr>
 8008f06:	2800      	cmp	r0, #0
 8008f08:	d034      	beq.n	8008f74 <_vfiprintf_r+0x1f8>
 8008f0a:	4b25      	ldr	r3, [pc, #148]	; (8008fa0 <_vfiprintf_r+0x224>)
 8008f0c:	bb03      	cbnz	r3, 8008f50 <_vfiprintf_r+0x1d4>
 8008f0e:	9b03      	ldr	r3, [sp, #12]
 8008f10:	3307      	adds	r3, #7
 8008f12:	f023 0307 	bic.w	r3, r3, #7
 8008f16:	3308      	adds	r3, #8
 8008f18:	9303      	str	r3, [sp, #12]
 8008f1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f1c:	444b      	add	r3, r9
 8008f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8008f20:	e74c      	b.n	8008dbc <_vfiprintf_r+0x40>
 8008f22:	fb00 3202 	mla	r2, r0, r2, r3
 8008f26:	2101      	movs	r1, #1
 8008f28:	e786      	b.n	8008e38 <_vfiprintf_r+0xbc>
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	9305      	str	r3, [sp, #20]
 8008f2e:	4618      	mov	r0, r3
 8008f30:	250a      	movs	r5, #10
 8008f32:	4688      	mov	r8, r1
 8008f34:	3101      	adds	r1, #1
 8008f36:	f898 2000 	ldrb.w	r2, [r8]
 8008f3a:	3a30      	subs	r2, #48	; 0x30
 8008f3c:	2a09      	cmp	r2, #9
 8008f3e:	d903      	bls.n	8008f48 <_vfiprintf_r+0x1cc>
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d0c5      	beq.n	8008ed0 <_vfiprintf_r+0x154>
 8008f44:	9005      	str	r0, [sp, #20]
 8008f46:	e7c3      	b.n	8008ed0 <_vfiprintf_r+0x154>
 8008f48:	fb05 2000 	mla	r0, r5, r0, r2
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	e7f0      	b.n	8008f32 <_vfiprintf_r+0x1b6>
 8008f50:	ab03      	add	r3, sp, #12
 8008f52:	9300      	str	r3, [sp, #0]
 8008f54:	4622      	mov	r2, r4
 8008f56:	4b13      	ldr	r3, [pc, #76]	; (8008fa4 <_vfiprintf_r+0x228>)
 8008f58:	a904      	add	r1, sp, #16
 8008f5a:	4630      	mov	r0, r6
 8008f5c:	f3af 8000 	nop.w
 8008f60:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008f64:	4681      	mov	r9, r0
 8008f66:	d1d8      	bne.n	8008f1a <_vfiprintf_r+0x19e>
 8008f68:	89a3      	ldrh	r3, [r4, #12]
 8008f6a:	065b      	lsls	r3, r3, #25
 8008f6c:	f53f af7d 	bmi.w	8008e6a <_vfiprintf_r+0xee>
 8008f70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f72:	e77c      	b.n	8008e6e <_vfiprintf_r+0xf2>
 8008f74:	ab03      	add	r3, sp, #12
 8008f76:	9300      	str	r3, [sp, #0]
 8008f78:	4622      	mov	r2, r4
 8008f7a:	4b0a      	ldr	r3, [pc, #40]	; (8008fa4 <_vfiprintf_r+0x228>)
 8008f7c:	a904      	add	r1, sp, #16
 8008f7e:	4630      	mov	r0, r6
 8008f80:	f000 f888 	bl	8009094 <_printf_i>
 8008f84:	e7ec      	b.n	8008f60 <_vfiprintf_r+0x1e4>
 8008f86:	bf00      	nop
 8008f88:	0800941c 	.word	0x0800941c
 8008f8c:	08009460 	.word	0x08009460
 8008f90:	0800943c 	.word	0x0800943c
 8008f94:	080093fc 	.word	0x080093fc
 8008f98:	08009466 	.word	0x08009466
 8008f9c:	0800946a 	.word	0x0800946a
 8008fa0:	00000000 	.word	0x00000000
 8008fa4:	08008d59 	.word	0x08008d59

08008fa8 <_printf_common>:
 8008fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fac:	4691      	mov	r9, r2
 8008fae:	461f      	mov	r7, r3
 8008fb0:	688a      	ldr	r2, [r1, #8]
 8008fb2:	690b      	ldr	r3, [r1, #16]
 8008fb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	bfb8      	it	lt
 8008fbc:	4613      	movlt	r3, r2
 8008fbe:	f8c9 3000 	str.w	r3, [r9]
 8008fc2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008fc6:	4606      	mov	r6, r0
 8008fc8:	460c      	mov	r4, r1
 8008fca:	b112      	cbz	r2, 8008fd2 <_printf_common+0x2a>
 8008fcc:	3301      	adds	r3, #1
 8008fce:	f8c9 3000 	str.w	r3, [r9]
 8008fd2:	6823      	ldr	r3, [r4, #0]
 8008fd4:	0699      	lsls	r1, r3, #26
 8008fd6:	bf42      	ittt	mi
 8008fd8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008fdc:	3302      	addmi	r3, #2
 8008fde:	f8c9 3000 	strmi.w	r3, [r9]
 8008fe2:	6825      	ldr	r5, [r4, #0]
 8008fe4:	f015 0506 	ands.w	r5, r5, #6
 8008fe8:	d107      	bne.n	8008ffa <_printf_common+0x52>
 8008fea:	f104 0a19 	add.w	sl, r4, #25
 8008fee:	68e3      	ldr	r3, [r4, #12]
 8008ff0:	f8d9 2000 	ldr.w	r2, [r9]
 8008ff4:	1a9b      	subs	r3, r3, r2
 8008ff6:	429d      	cmp	r5, r3
 8008ff8:	db29      	blt.n	800904e <_printf_common+0xa6>
 8008ffa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008ffe:	6822      	ldr	r2, [r4, #0]
 8009000:	3300      	adds	r3, #0
 8009002:	bf18      	it	ne
 8009004:	2301      	movne	r3, #1
 8009006:	0692      	lsls	r2, r2, #26
 8009008:	d42e      	bmi.n	8009068 <_printf_common+0xc0>
 800900a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800900e:	4639      	mov	r1, r7
 8009010:	4630      	mov	r0, r6
 8009012:	47c0      	blx	r8
 8009014:	3001      	adds	r0, #1
 8009016:	d021      	beq.n	800905c <_printf_common+0xb4>
 8009018:	6823      	ldr	r3, [r4, #0]
 800901a:	68e5      	ldr	r5, [r4, #12]
 800901c:	f8d9 2000 	ldr.w	r2, [r9]
 8009020:	f003 0306 	and.w	r3, r3, #6
 8009024:	2b04      	cmp	r3, #4
 8009026:	bf08      	it	eq
 8009028:	1aad      	subeq	r5, r5, r2
 800902a:	68a3      	ldr	r3, [r4, #8]
 800902c:	6922      	ldr	r2, [r4, #16]
 800902e:	bf0c      	ite	eq
 8009030:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009034:	2500      	movne	r5, #0
 8009036:	4293      	cmp	r3, r2
 8009038:	bfc4      	itt	gt
 800903a:	1a9b      	subgt	r3, r3, r2
 800903c:	18ed      	addgt	r5, r5, r3
 800903e:	f04f 0900 	mov.w	r9, #0
 8009042:	341a      	adds	r4, #26
 8009044:	454d      	cmp	r5, r9
 8009046:	d11b      	bne.n	8009080 <_printf_common+0xd8>
 8009048:	2000      	movs	r0, #0
 800904a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800904e:	2301      	movs	r3, #1
 8009050:	4652      	mov	r2, sl
 8009052:	4639      	mov	r1, r7
 8009054:	4630      	mov	r0, r6
 8009056:	47c0      	blx	r8
 8009058:	3001      	adds	r0, #1
 800905a:	d103      	bne.n	8009064 <_printf_common+0xbc>
 800905c:	f04f 30ff 	mov.w	r0, #4294967295
 8009060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009064:	3501      	adds	r5, #1
 8009066:	e7c2      	b.n	8008fee <_printf_common+0x46>
 8009068:	18e1      	adds	r1, r4, r3
 800906a:	1c5a      	adds	r2, r3, #1
 800906c:	2030      	movs	r0, #48	; 0x30
 800906e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009072:	4422      	add	r2, r4
 8009074:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009078:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800907c:	3302      	adds	r3, #2
 800907e:	e7c4      	b.n	800900a <_printf_common+0x62>
 8009080:	2301      	movs	r3, #1
 8009082:	4622      	mov	r2, r4
 8009084:	4639      	mov	r1, r7
 8009086:	4630      	mov	r0, r6
 8009088:	47c0      	blx	r8
 800908a:	3001      	adds	r0, #1
 800908c:	d0e6      	beq.n	800905c <_printf_common+0xb4>
 800908e:	f109 0901 	add.w	r9, r9, #1
 8009092:	e7d7      	b.n	8009044 <_printf_common+0x9c>

08009094 <_printf_i>:
 8009094:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009098:	4617      	mov	r7, r2
 800909a:	7e0a      	ldrb	r2, [r1, #24]
 800909c:	b085      	sub	sp, #20
 800909e:	2a6e      	cmp	r2, #110	; 0x6e
 80090a0:	4698      	mov	r8, r3
 80090a2:	4606      	mov	r6, r0
 80090a4:	460c      	mov	r4, r1
 80090a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090a8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80090ac:	f000 80bc 	beq.w	8009228 <_printf_i+0x194>
 80090b0:	d81a      	bhi.n	80090e8 <_printf_i+0x54>
 80090b2:	2a63      	cmp	r2, #99	; 0x63
 80090b4:	d02e      	beq.n	8009114 <_printf_i+0x80>
 80090b6:	d80a      	bhi.n	80090ce <_printf_i+0x3a>
 80090b8:	2a00      	cmp	r2, #0
 80090ba:	f000 80c8 	beq.w	800924e <_printf_i+0x1ba>
 80090be:	2a58      	cmp	r2, #88	; 0x58
 80090c0:	f000 808a 	beq.w	80091d8 <_printf_i+0x144>
 80090c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090c8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80090cc:	e02a      	b.n	8009124 <_printf_i+0x90>
 80090ce:	2a64      	cmp	r2, #100	; 0x64
 80090d0:	d001      	beq.n	80090d6 <_printf_i+0x42>
 80090d2:	2a69      	cmp	r2, #105	; 0x69
 80090d4:	d1f6      	bne.n	80090c4 <_printf_i+0x30>
 80090d6:	6821      	ldr	r1, [r4, #0]
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	f011 0f80 	tst.w	r1, #128	; 0x80
 80090de:	d023      	beq.n	8009128 <_printf_i+0x94>
 80090e0:	1d11      	adds	r1, r2, #4
 80090e2:	6019      	str	r1, [r3, #0]
 80090e4:	6813      	ldr	r3, [r2, #0]
 80090e6:	e027      	b.n	8009138 <_printf_i+0xa4>
 80090e8:	2a73      	cmp	r2, #115	; 0x73
 80090ea:	f000 80b4 	beq.w	8009256 <_printf_i+0x1c2>
 80090ee:	d808      	bhi.n	8009102 <_printf_i+0x6e>
 80090f0:	2a6f      	cmp	r2, #111	; 0x6f
 80090f2:	d02a      	beq.n	800914a <_printf_i+0xb6>
 80090f4:	2a70      	cmp	r2, #112	; 0x70
 80090f6:	d1e5      	bne.n	80090c4 <_printf_i+0x30>
 80090f8:	680a      	ldr	r2, [r1, #0]
 80090fa:	f042 0220 	orr.w	r2, r2, #32
 80090fe:	600a      	str	r2, [r1, #0]
 8009100:	e003      	b.n	800910a <_printf_i+0x76>
 8009102:	2a75      	cmp	r2, #117	; 0x75
 8009104:	d021      	beq.n	800914a <_printf_i+0xb6>
 8009106:	2a78      	cmp	r2, #120	; 0x78
 8009108:	d1dc      	bne.n	80090c4 <_printf_i+0x30>
 800910a:	2278      	movs	r2, #120	; 0x78
 800910c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8009110:	496e      	ldr	r1, [pc, #440]	; (80092cc <_printf_i+0x238>)
 8009112:	e064      	b.n	80091de <_printf_i+0x14a>
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800911a:	1d11      	adds	r1, r2, #4
 800911c:	6019      	str	r1, [r3, #0]
 800911e:	6813      	ldr	r3, [r2, #0]
 8009120:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009124:	2301      	movs	r3, #1
 8009126:	e0a3      	b.n	8009270 <_printf_i+0x1dc>
 8009128:	f011 0f40 	tst.w	r1, #64	; 0x40
 800912c:	f102 0104 	add.w	r1, r2, #4
 8009130:	6019      	str	r1, [r3, #0]
 8009132:	d0d7      	beq.n	80090e4 <_printf_i+0x50>
 8009134:	f9b2 3000 	ldrsh.w	r3, [r2]
 8009138:	2b00      	cmp	r3, #0
 800913a:	da03      	bge.n	8009144 <_printf_i+0xb0>
 800913c:	222d      	movs	r2, #45	; 0x2d
 800913e:	425b      	negs	r3, r3
 8009140:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009144:	4962      	ldr	r1, [pc, #392]	; (80092d0 <_printf_i+0x23c>)
 8009146:	220a      	movs	r2, #10
 8009148:	e017      	b.n	800917a <_printf_i+0xe6>
 800914a:	6820      	ldr	r0, [r4, #0]
 800914c:	6819      	ldr	r1, [r3, #0]
 800914e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8009152:	d003      	beq.n	800915c <_printf_i+0xc8>
 8009154:	1d08      	adds	r0, r1, #4
 8009156:	6018      	str	r0, [r3, #0]
 8009158:	680b      	ldr	r3, [r1, #0]
 800915a:	e006      	b.n	800916a <_printf_i+0xd6>
 800915c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009160:	f101 0004 	add.w	r0, r1, #4
 8009164:	6018      	str	r0, [r3, #0]
 8009166:	d0f7      	beq.n	8009158 <_printf_i+0xc4>
 8009168:	880b      	ldrh	r3, [r1, #0]
 800916a:	4959      	ldr	r1, [pc, #356]	; (80092d0 <_printf_i+0x23c>)
 800916c:	2a6f      	cmp	r2, #111	; 0x6f
 800916e:	bf14      	ite	ne
 8009170:	220a      	movne	r2, #10
 8009172:	2208      	moveq	r2, #8
 8009174:	2000      	movs	r0, #0
 8009176:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800917a:	6865      	ldr	r5, [r4, #4]
 800917c:	60a5      	str	r5, [r4, #8]
 800917e:	2d00      	cmp	r5, #0
 8009180:	f2c0 809c 	blt.w	80092bc <_printf_i+0x228>
 8009184:	6820      	ldr	r0, [r4, #0]
 8009186:	f020 0004 	bic.w	r0, r0, #4
 800918a:	6020      	str	r0, [r4, #0]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d13f      	bne.n	8009210 <_printf_i+0x17c>
 8009190:	2d00      	cmp	r5, #0
 8009192:	f040 8095 	bne.w	80092c0 <_printf_i+0x22c>
 8009196:	4675      	mov	r5, lr
 8009198:	2a08      	cmp	r2, #8
 800919a:	d10b      	bne.n	80091b4 <_printf_i+0x120>
 800919c:	6823      	ldr	r3, [r4, #0]
 800919e:	07da      	lsls	r2, r3, #31
 80091a0:	d508      	bpl.n	80091b4 <_printf_i+0x120>
 80091a2:	6923      	ldr	r3, [r4, #16]
 80091a4:	6862      	ldr	r2, [r4, #4]
 80091a6:	429a      	cmp	r2, r3
 80091a8:	bfde      	ittt	le
 80091aa:	2330      	movle	r3, #48	; 0x30
 80091ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80091b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80091b4:	ebae 0305 	sub.w	r3, lr, r5
 80091b8:	6123      	str	r3, [r4, #16]
 80091ba:	f8cd 8000 	str.w	r8, [sp]
 80091be:	463b      	mov	r3, r7
 80091c0:	aa03      	add	r2, sp, #12
 80091c2:	4621      	mov	r1, r4
 80091c4:	4630      	mov	r0, r6
 80091c6:	f7ff feef 	bl	8008fa8 <_printf_common>
 80091ca:	3001      	adds	r0, #1
 80091cc:	d155      	bne.n	800927a <_printf_i+0x1e6>
 80091ce:	f04f 30ff 	mov.w	r0, #4294967295
 80091d2:	b005      	add	sp, #20
 80091d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80091d8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80091dc:	493c      	ldr	r1, [pc, #240]	; (80092d0 <_printf_i+0x23c>)
 80091de:	6822      	ldr	r2, [r4, #0]
 80091e0:	6818      	ldr	r0, [r3, #0]
 80091e2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80091e6:	f100 0504 	add.w	r5, r0, #4
 80091ea:	601d      	str	r5, [r3, #0]
 80091ec:	d001      	beq.n	80091f2 <_printf_i+0x15e>
 80091ee:	6803      	ldr	r3, [r0, #0]
 80091f0:	e002      	b.n	80091f8 <_printf_i+0x164>
 80091f2:	0655      	lsls	r5, r2, #25
 80091f4:	d5fb      	bpl.n	80091ee <_printf_i+0x15a>
 80091f6:	8803      	ldrh	r3, [r0, #0]
 80091f8:	07d0      	lsls	r0, r2, #31
 80091fa:	bf44      	itt	mi
 80091fc:	f042 0220 	orrmi.w	r2, r2, #32
 8009200:	6022      	strmi	r2, [r4, #0]
 8009202:	b91b      	cbnz	r3, 800920c <_printf_i+0x178>
 8009204:	6822      	ldr	r2, [r4, #0]
 8009206:	f022 0220 	bic.w	r2, r2, #32
 800920a:	6022      	str	r2, [r4, #0]
 800920c:	2210      	movs	r2, #16
 800920e:	e7b1      	b.n	8009174 <_printf_i+0xe0>
 8009210:	4675      	mov	r5, lr
 8009212:	fbb3 f0f2 	udiv	r0, r3, r2
 8009216:	fb02 3310 	mls	r3, r2, r0, r3
 800921a:	5ccb      	ldrb	r3, [r1, r3]
 800921c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009220:	4603      	mov	r3, r0
 8009222:	2800      	cmp	r0, #0
 8009224:	d1f5      	bne.n	8009212 <_printf_i+0x17e>
 8009226:	e7b7      	b.n	8009198 <_printf_i+0x104>
 8009228:	6808      	ldr	r0, [r1, #0]
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	6949      	ldr	r1, [r1, #20]
 800922e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8009232:	d004      	beq.n	800923e <_printf_i+0x1aa>
 8009234:	1d10      	adds	r0, r2, #4
 8009236:	6018      	str	r0, [r3, #0]
 8009238:	6813      	ldr	r3, [r2, #0]
 800923a:	6019      	str	r1, [r3, #0]
 800923c:	e007      	b.n	800924e <_printf_i+0x1ba>
 800923e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009242:	f102 0004 	add.w	r0, r2, #4
 8009246:	6018      	str	r0, [r3, #0]
 8009248:	6813      	ldr	r3, [r2, #0]
 800924a:	d0f6      	beq.n	800923a <_printf_i+0x1a6>
 800924c:	8019      	strh	r1, [r3, #0]
 800924e:	2300      	movs	r3, #0
 8009250:	6123      	str	r3, [r4, #16]
 8009252:	4675      	mov	r5, lr
 8009254:	e7b1      	b.n	80091ba <_printf_i+0x126>
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	1d11      	adds	r1, r2, #4
 800925a:	6019      	str	r1, [r3, #0]
 800925c:	6815      	ldr	r5, [r2, #0]
 800925e:	6862      	ldr	r2, [r4, #4]
 8009260:	2100      	movs	r1, #0
 8009262:	4628      	mov	r0, r5
 8009264:	f7f6 ffbc 	bl	80001e0 <memchr>
 8009268:	b108      	cbz	r0, 800926e <_printf_i+0x1da>
 800926a:	1b40      	subs	r0, r0, r5
 800926c:	6060      	str	r0, [r4, #4]
 800926e:	6863      	ldr	r3, [r4, #4]
 8009270:	6123      	str	r3, [r4, #16]
 8009272:	2300      	movs	r3, #0
 8009274:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009278:	e79f      	b.n	80091ba <_printf_i+0x126>
 800927a:	6923      	ldr	r3, [r4, #16]
 800927c:	462a      	mov	r2, r5
 800927e:	4639      	mov	r1, r7
 8009280:	4630      	mov	r0, r6
 8009282:	47c0      	blx	r8
 8009284:	3001      	adds	r0, #1
 8009286:	d0a2      	beq.n	80091ce <_printf_i+0x13a>
 8009288:	6823      	ldr	r3, [r4, #0]
 800928a:	079b      	lsls	r3, r3, #30
 800928c:	d507      	bpl.n	800929e <_printf_i+0x20a>
 800928e:	2500      	movs	r5, #0
 8009290:	f104 0919 	add.w	r9, r4, #25
 8009294:	68e3      	ldr	r3, [r4, #12]
 8009296:	9a03      	ldr	r2, [sp, #12]
 8009298:	1a9b      	subs	r3, r3, r2
 800929a:	429d      	cmp	r5, r3
 800929c:	db05      	blt.n	80092aa <_printf_i+0x216>
 800929e:	68e0      	ldr	r0, [r4, #12]
 80092a0:	9b03      	ldr	r3, [sp, #12]
 80092a2:	4298      	cmp	r0, r3
 80092a4:	bfb8      	it	lt
 80092a6:	4618      	movlt	r0, r3
 80092a8:	e793      	b.n	80091d2 <_printf_i+0x13e>
 80092aa:	2301      	movs	r3, #1
 80092ac:	464a      	mov	r2, r9
 80092ae:	4639      	mov	r1, r7
 80092b0:	4630      	mov	r0, r6
 80092b2:	47c0      	blx	r8
 80092b4:	3001      	adds	r0, #1
 80092b6:	d08a      	beq.n	80091ce <_printf_i+0x13a>
 80092b8:	3501      	adds	r5, #1
 80092ba:	e7eb      	b.n	8009294 <_printf_i+0x200>
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d1a7      	bne.n	8009210 <_printf_i+0x17c>
 80092c0:	780b      	ldrb	r3, [r1, #0]
 80092c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092ca:	e765      	b.n	8009198 <_printf_i+0x104>
 80092cc:	08009482 	.word	0x08009482
 80092d0:	08009471 	.word	0x08009471

080092d4 <_read_r>:
 80092d4:	b538      	push	{r3, r4, r5, lr}
 80092d6:	4c07      	ldr	r4, [pc, #28]	; (80092f4 <_read_r+0x20>)
 80092d8:	4605      	mov	r5, r0
 80092da:	4608      	mov	r0, r1
 80092dc:	4611      	mov	r1, r2
 80092de:	2200      	movs	r2, #0
 80092e0:	6022      	str	r2, [r4, #0]
 80092e2:	461a      	mov	r2, r3
 80092e4:	f7fe fbf8 	bl	8007ad8 <_read>
 80092e8:	1c43      	adds	r3, r0, #1
 80092ea:	d102      	bne.n	80092f2 <_read_r+0x1e>
 80092ec:	6823      	ldr	r3, [r4, #0]
 80092ee:	b103      	cbz	r3, 80092f2 <_read_r+0x1e>
 80092f0:	602b      	str	r3, [r5, #0]
 80092f2:	bd38      	pop	{r3, r4, r5, pc}
 80092f4:	200013b4 	.word	0x200013b4

080092f8 <_fstat_r>:
 80092f8:	b538      	push	{r3, r4, r5, lr}
 80092fa:	4c07      	ldr	r4, [pc, #28]	; (8009318 <_fstat_r+0x20>)
 80092fc:	2300      	movs	r3, #0
 80092fe:	4605      	mov	r5, r0
 8009300:	4608      	mov	r0, r1
 8009302:	4611      	mov	r1, r2
 8009304:	6023      	str	r3, [r4, #0]
 8009306:	f7fe fc20 	bl	8007b4a <_fstat>
 800930a:	1c43      	adds	r3, r0, #1
 800930c:	d102      	bne.n	8009314 <_fstat_r+0x1c>
 800930e:	6823      	ldr	r3, [r4, #0]
 8009310:	b103      	cbz	r3, 8009314 <_fstat_r+0x1c>
 8009312:	602b      	str	r3, [r5, #0]
 8009314:	bd38      	pop	{r3, r4, r5, pc}
 8009316:	bf00      	nop
 8009318:	200013b4 	.word	0x200013b4

0800931c <_isatty_r>:
 800931c:	b538      	push	{r3, r4, r5, lr}
 800931e:	4c06      	ldr	r4, [pc, #24]	; (8009338 <_isatty_r+0x1c>)
 8009320:	2300      	movs	r3, #0
 8009322:	4605      	mov	r5, r0
 8009324:	4608      	mov	r0, r1
 8009326:	6023      	str	r3, [r4, #0]
 8009328:	f7fe fc14 	bl	8007b54 <_isatty>
 800932c:	1c43      	adds	r3, r0, #1
 800932e:	d102      	bne.n	8009336 <_isatty_r+0x1a>
 8009330:	6823      	ldr	r3, [r4, #0]
 8009332:	b103      	cbz	r3, 8009336 <_isatty_r+0x1a>
 8009334:	602b      	str	r3, [r5, #0]
 8009336:	bd38      	pop	{r3, r4, r5, pc}
 8009338:	200013b4 	.word	0x200013b4

0800933c <_init>:
 800933c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800933e:	bf00      	nop
 8009340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009342:	bc08      	pop	{r3}
 8009344:	469e      	mov	lr, r3
 8009346:	4770      	bx	lr

08009348 <_fini>:
 8009348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800934a:	bf00      	nop
 800934c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800934e:	bc08      	pop	{r3}
 8009350:	469e      	mov	lr, r3
 8009352:	4770      	bx	lr
=======
 80045b0:	e7fe      	b.n	80045b0 <DMA1_Stream1_IRQHandler>
	...

080045b4 <__errno>:
 80045b4:	4b01      	ldr	r3, [pc, #4]	; (80045bc <__errno+0x8>)
 80045b6:	6818      	ldr	r0, [r3, #0]
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	2000017c 	.word	0x2000017c

080045c0 <__sflush_r>:
 80045c0:	898a      	ldrh	r2, [r1, #12]
 80045c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045c6:	4605      	mov	r5, r0
 80045c8:	0710      	lsls	r0, r2, #28
 80045ca:	460c      	mov	r4, r1
 80045cc:	d45a      	bmi.n	8004684 <__sflush_r+0xc4>
 80045ce:	684b      	ldr	r3, [r1, #4]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	dc05      	bgt.n	80045e0 <__sflush_r+0x20>
 80045d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	dc02      	bgt.n	80045e0 <__sflush_r+0x20>
 80045da:	2000      	movs	r0, #0
 80045dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045e2:	2e00      	cmp	r6, #0
 80045e4:	d0f9      	beq.n	80045da <__sflush_r+0x1a>
 80045e6:	2300      	movs	r3, #0
 80045e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80045ec:	682f      	ldr	r7, [r5, #0]
 80045ee:	602b      	str	r3, [r5, #0]
 80045f0:	d033      	beq.n	800465a <__sflush_r+0x9a>
 80045f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80045f4:	89a3      	ldrh	r3, [r4, #12]
 80045f6:	075a      	lsls	r2, r3, #29
 80045f8:	d505      	bpl.n	8004606 <__sflush_r+0x46>
 80045fa:	6863      	ldr	r3, [r4, #4]
 80045fc:	1ac0      	subs	r0, r0, r3
 80045fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004600:	b10b      	cbz	r3, 8004606 <__sflush_r+0x46>
 8004602:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004604:	1ac0      	subs	r0, r0, r3
 8004606:	2300      	movs	r3, #0
 8004608:	4602      	mov	r2, r0
 800460a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800460c:	6a21      	ldr	r1, [r4, #32]
 800460e:	4628      	mov	r0, r5
 8004610:	47b0      	blx	r6
 8004612:	1c43      	adds	r3, r0, #1
 8004614:	89a3      	ldrh	r3, [r4, #12]
 8004616:	d106      	bne.n	8004626 <__sflush_r+0x66>
 8004618:	6829      	ldr	r1, [r5, #0]
 800461a:	291d      	cmp	r1, #29
 800461c:	d84b      	bhi.n	80046b6 <__sflush_r+0xf6>
 800461e:	4a2b      	ldr	r2, [pc, #172]	; (80046cc <__sflush_r+0x10c>)
 8004620:	40ca      	lsrs	r2, r1
 8004622:	07d6      	lsls	r6, r2, #31
 8004624:	d547      	bpl.n	80046b6 <__sflush_r+0xf6>
 8004626:	2200      	movs	r2, #0
 8004628:	6062      	str	r2, [r4, #4]
 800462a:	04d9      	lsls	r1, r3, #19
 800462c:	6922      	ldr	r2, [r4, #16]
 800462e:	6022      	str	r2, [r4, #0]
 8004630:	d504      	bpl.n	800463c <__sflush_r+0x7c>
 8004632:	1c42      	adds	r2, r0, #1
 8004634:	d101      	bne.n	800463a <__sflush_r+0x7a>
 8004636:	682b      	ldr	r3, [r5, #0]
 8004638:	b903      	cbnz	r3, 800463c <__sflush_r+0x7c>
 800463a:	6560      	str	r0, [r4, #84]	; 0x54
 800463c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800463e:	602f      	str	r7, [r5, #0]
 8004640:	2900      	cmp	r1, #0
 8004642:	d0ca      	beq.n	80045da <__sflush_r+0x1a>
 8004644:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004648:	4299      	cmp	r1, r3
 800464a:	d002      	beq.n	8004652 <__sflush_r+0x92>
 800464c:	4628      	mov	r0, r5
 800464e:	f000 fa0d 	bl	8004a6c <_free_r>
 8004652:	2000      	movs	r0, #0
 8004654:	6360      	str	r0, [r4, #52]	; 0x34
 8004656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800465a:	6a21      	ldr	r1, [r4, #32]
 800465c:	2301      	movs	r3, #1
 800465e:	4628      	mov	r0, r5
 8004660:	47b0      	blx	r6
 8004662:	1c41      	adds	r1, r0, #1
 8004664:	d1c6      	bne.n	80045f4 <__sflush_r+0x34>
 8004666:	682b      	ldr	r3, [r5, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0c3      	beq.n	80045f4 <__sflush_r+0x34>
 800466c:	2b1d      	cmp	r3, #29
 800466e:	d001      	beq.n	8004674 <__sflush_r+0xb4>
 8004670:	2b16      	cmp	r3, #22
 8004672:	d101      	bne.n	8004678 <__sflush_r+0xb8>
 8004674:	602f      	str	r7, [r5, #0]
 8004676:	e7b0      	b.n	80045da <__sflush_r+0x1a>
 8004678:	89a3      	ldrh	r3, [r4, #12]
 800467a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800467e:	81a3      	strh	r3, [r4, #12]
 8004680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004684:	690f      	ldr	r7, [r1, #16]
 8004686:	2f00      	cmp	r7, #0
 8004688:	d0a7      	beq.n	80045da <__sflush_r+0x1a>
 800468a:	0793      	lsls	r3, r2, #30
 800468c:	680e      	ldr	r6, [r1, #0]
 800468e:	bf08      	it	eq
 8004690:	694b      	ldreq	r3, [r1, #20]
 8004692:	600f      	str	r7, [r1, #0]
 8004694:	bf18      	it	ne
 8004696:	2300      	movne	r3, #0
 8004698:	eba6 0807 	sub.w	r8, r6, r7
 800469c:	608b      	str	r3, [r1, #8]
 800469e:	f1b8 0f00 	cmp.w	r8, #0
 80046a2:	dd9a      	ble.n	80045da <__sflush_r+0x1a>
 80046a4:	4643      	mov	r3, r8
 80046a6:	463a      	mov	r2, r7
 80046a8:	6a21      	ldr	r1, [r4, #32]
 80046aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80046ac:	4628      	mov	r0, r5
 80046ae:	47b0      	blx	r6
 80046b0:	2800      	cmp	r0, #0
 80046b2:	dc07      	bgt.n	80046c4 <__sflush_r+0x104>
 80046b4:	89a3      	ldrh	r3, [r4, #12]
 80046b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046ba:	81a3      	strh	r3, [r4, #12]
 80046bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046c4:	4407      	add	r7, r0
 80046c6:	eba8 0800 	sub.w	r8, r8, r0
 80046ca:	e7e8      	b.n	800469e <__sflush_r+0xde>
 80046cc:	20400001 	.word	0x20400001

080046d0 <_fflush_r>:
 80046d0:	b538      	push	{r3, r4, r5, lr}
 80046d2:	690b      	ldr	r3, [r1, #16]
 80046d4:	4605      	mov	r5, r0
 80046d6:	460c      	mov	r4, r1
 80046d8:	b1db      	cbz	r3, 8004712 <_fflush_r+0x42>
 80046da:	b118      	cbz	r0, 80046e4 <_fflush_r+0x14>
 80046dc:	6983      	ldr	r3, [r0, #24]
 80046de:	b90b      	cbnz	r3, 80046e4 <_fflush_r+0x14>
 80046e0:	f000 f8de 	bl	80048a0 <__sinit>
 80046e4:	4b0c      	ldr	r3, [pc, #48]	; (8004718 <_fflush_r+0x48>)
 80046e6:	429c      	cmp	r4, r3
 80046e8:	d109      	bne.n	80046fe <_fflush_r+0x2e>
 80046ea:	686c      	ldr	r4, [r5, #4]
 80046ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046f0:	b17b      	cbz	r3, 8004712 <_fflush_r+0x42>
 80046f2:	4621      	mov	r1, r4
 80046f4:	4628      	mov	r0, r5
 80046f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046fa:	f7ff bf61 	b.w	80045c0 <__sflush_r>
 80046fe:	4b07      	ldr	r3, [pc, #28]	; (800471c <_fflush_r+0x4c>)
 8004700:	429c      	cmp	r4, r3
 8004702:	d101      	bne.n	8004708 <_fflush_r+0x38>
 8004704:	68ac      	ldr	r4, [r5, #8]
 8004706:	e7f1      	b.n	80046ec <_fflush_r+0x1c>
 8004708:	4b05      	ldr	r3, [pc, #20]	; (8004720 <_fflush_r+0x50>)
 800470a:	429c      	cmp	r4, r3
 800470c:	bf08      	it	eq
 800470e:	68ec      	ldreq	r4, [r5, #12]
 8004710:	e7ec      	b.n	80046ec <_fflush_r+0x1c>
 8004712:	2000      	movs	r0, #0
 8004714:	bd38      	pop	{r3, r4, r5, pc}
 8004716:	bf00      	nop
 8004718:	08005960 	.word	0x08005960
 800471c:	08005980 	.word	0x08005980
 8004720:	08005940 	.word	0x08005940

08004724 <fflush>:
 8004724:	4601      	mov	r1, r0
 8004726:	b920      	cbnz	r0, 8004732 <fflush+0xe>
 8004728:	4b04      	ldr	r3, [pc, #16]	; (800473c <fflush+0x18>)
 800472a:	4905      	ldr	r1, [pc, #20]	; (8004740 <fflush+0x1c>)
 800472c:	6818      	ldr	r0, [r3, #0]
 800472e:	f000 b93f 	b.w	80049b0 <_fwalk_reent>
 8004732:	4b04      	ldr	r3, [pc, #16]	; (8004744 <fflush+0x20>)
 8004734:	6818      	ldr	r0, [r3, #0]
 8004736:	f7ff bfcb 	b.w	80046d0 <_fflush_r>
 800473a:	bf00      	nop
 800473c:	080059a0 	.word	0x080059a0
 8004740:	080046d1 	.word	0x080046d1
 8004744:	2000017c 	.word	0x2000017c

08004748 <_fgets_r>:
 8004748:	2a01      	cmp	r2, #1
 800474a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800474e:	4681      	mov	r9, r0
 8004750:	460e      	mov	r6, r1
 8004752:	4690      	mov	r8, r2
 8004754:	461c      	mov	r4, r3
 8004756:	dc02      	bgt.n	800475e <_fgets_r+0x16>
 8004758:	2000      	movs	r0, #0
 800475a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800475e:	b118      	cbz	r0, 8004768 <_fgets_r+0x20>
 8004760:	6983      	ldr	r3, [r0, #24]
 8004762:	b90b      	cbnz	r3, 8004768 <_fgets_r+0x20>
 8004764:	f000 f89c 	bl	80048a0 <__sinit>
 8004768:	4b25      	ldr	r3, [pc, #148]	; (8004800 <_fgets_r+0xb8>)
 800476a:	429c      	cmp	r4, r3
 800476c:	d110      	bne.n	8004790 <_fgets_r+0x48>
 800476e:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8004772:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004776:	4637      	mov	r7, r6
 8004778:	6865      	ldr	r5, [r4, #4]
 800477a:	b9b5      	cbnz	r5, 80047aa <_fgets_r+0x62>
 800477c:	4621      	mov	r1, r4
 800477e:	4648      	mov	r0, r9
 8004780:	f000 faa6 	bl	8004cd0 <__srefill_r>
 8004784:	b180      	cbz	r0, 80047a8 <_fgets_r+0x60>
 8004786:	42b7      	cmp	r7, r6
 8004788:	d0e6      	beq.n	8004758 <_fgets_r+0x10>
 800478a:	2300      	movs	r3, #0
 800478c:	703b      	strb	r3, [r7, #0]
 800478e:	e025      	b.n	80047dc <_fgets_r+0x94>
 8004790:	4b1c      	ldr	r3, [pc, #112]	; (8004804 <_fgets_r+0xbc>)
 8004792:	429c      	cmp	r4, r3
 8004794:	d102      	bne.n	800479c <_fgets_r+0x54>
 8004796:	f8d9 4008 	ldr.w	r4, [r9, #8]
 800479a:	e7ea      	b.n	8004772 <_fgets_r+0x2a>
 800479c:	4b1a      	ldr	r3, [pc, #104]	; (8004808 <_fgets_r+0xc0>)
 800479e:	429c      	cmp	r4, r3
 80047a0:	bf08      	it	eq
 80047a2:	f8d9 400c 	ldreq.w	r4, [r9, #12]
 80047a6:	e7e4      	b.n	8004772 <_fgets_r+0x2a>
 80047a8:	6865      	ldr	r5, [r4, #4]
 80047aa:	f8d4 a000 	ldr.w	sl, [r4]
 80047ae:	4545      	cmp	r5, r8
 80047b0:	bf28      	it	cs
 80047b2:	4645      	movcs	r5, r8
 80047b4:	462a      	mov	r2, r5
 80047b6:	210a      	movs	r1, #10
 80047b8:	4650      	mov	r0, sl
 80047ba:	f7fb fd11 	bl	80001e0 <memchr>
 80047be:	6863      	ldr	r3, [r4, #4]
 80047c0:	b178      	cbz	r0, 80047e2 <_fgets_r+0x9a>
 80047c2:	3001      	adds	r0, #1
 80047c4:	eba0 050a 	sub.w	r5, r0, sl
 80047c8:	1b5b      	subs	r3, r3, r5
 80047ca:	e884 0009 	stmia.w	r4, {r0, r3}
 80047ce:	462a      	mov	r2, r5
 80047d0:	4651      	mov	r1, sl
 80047d2:	4638      	mov	r0, r7
 80047d4:	f000 f936 	bl	8004a44 <memcpy>
 80047d8:	2300      	movs	r3, #0
 80047da:	557b      	strb	r3, [r7, r5]
 80047dc:	4630      	mov	r0, r6
 80047de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047e2:	1b5b      	subs	r3, r3, r5
 80047e4:	6063      	str	r3, [r4, #4]
 80047e6:	6823      	ldr	r3, [r4, #0]
 80047e8:	442b      	add	r3, r5
 80047ea:	4638      	mov	r0, r7
 80047ec:	6023      	str	r3, [r4, #0]
 80047ee:	462a      	mov	r2, r5
 80047f0:	4651      	mov	r1, sl
 80047f2:	f000 f927 	bl	8004a44 <memcpy>
 80047f6:	ebb8 0805 	subs.w	r8, r8, r5
 80047fa:	442f      	add	r7, r5
 80047fc:	d1bc      	bne.n	8004778 <_fgets_r+0x30>
 80047fe:	e7c4      	b.n	800478a <_fgets_r+0x42>
 8004800:	08005960 	.word	0x08005960
 8004804:	08005980 	.word	0x08005980
 8004808:	08005940 	.word	0x08005940

0800480c <fgets>:
 800480c:	4613      	mov	r3, r2
 800480e:	460a      	mov	r2, r1
 8004810:	4601      	mov	r1, r0
 8004812:	4802      	ldr	r0, [pc, #8]	; (800481c <fgets+0x10>)
 8004814:	6800      	ldr	r0, [r0, #0]
 8004816:	f7ff bf97 	b.w	8004748 <_fgets_r>
 800481a:	bf00      	nop
 800481c:	2000017c 	.word	0x2000017c

08004820 <_cleanup_r>:
 8004820:	4901      	ldr	r1, [pc, #4]	; (8004828 <_cleanup_r+0x8>)
 8004822:	f000 b8c5 	b.w	80049b0 <_fwalk_reent>
 8004826:	bf00      	nop
 8004828:	080046d1 	.word	0x080046d1

0800482c <std.isra.0>:
 800482c:	2300      	movs	r3, #0
 800482e:	b510      	push	{r4, lr}
 8004830:	4604      	mov	r4, r0
 8004832:	6003      	str	r3, [r0, #0]
 8004834:	6043      	str	r3, [r0, #4]
 8004836:	6083      	str	r3, [r0, #8]
 8004838:	8181      	strh	r1, [r0, #12]
 800483a:	6643      	str	r3, [r0, #100]	; 0x64
 800483c:	81c2      	strh	r2, [r0, #14]
 800483e:	6103      	str	r3, [r0, #16]
 8004840:	6143      	str	r3, [r0, #20]
 8004842:	6183      	str	r3, [r0, #24]
 8004844:	4619      	mov	r1, r3
 8004846:	2208      	movs	r2, #8
 8004848:	305c      	adds	r0, #92	; 0x5c
 800484a:	f000 f906 	bl	8004a5a <memset>
 800484e:	4b05      	ldr	r3, [pc, #20]	; (8004864 <std.isra.0+0x38>)
 8004850:	6263      	str	r3, [r4, #36]	; 0x24
 8004852:	4b05      	ldr	r3, [pc, #20]	; (8004868 <std.isra.0+0x3c>)
 8004854:	62a3      	str	r3, [r4, #40]	; 0x28
 8004856:	4b05      	ldr	r3, [pc, #20]	; (800486c <std.isra.0+0x40>)
 8004858:	62e3      	str	r3, [r4, #44]	; 0x2c
 800485a:	4b05      	ldr	r3, [pc, #20]	; (8004870 <std.isra.0+0x44>)
 800485c:	6224      	str	r4, [r4, #32]
 800485e:	6323      	str	r3, [r4, #48]	; 0x30
 8004860:	bd10      	pop	{r4, pc}
 8004862:	bf00      	nop
 8004864:	08004f61 	.word	0x08004f61
 8004868:	08004f83 	.word	0x08004f83
 800486c:	08004fbb 	.word	0x08004fbb
 8004870:	08004fdf 	.word	0x08004fdf

08004874 <__sfmoreglue>:
 8004874:	b570      	push	{r4, r5, r6, lr}
 8004876:	1e4a      	subs	r2, r1, #1
 8004878:	2568      	movs	r5, #104	; 0x68
 800487a:	4355      	muls	r5, r2
 800487c:	460e      	mov	r6, r1
 800487e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004882:	f000 f941 	bl	8004b08 <_malloc_r>
 8004886:	4604      	mov	r4, r0
 8004888:	b140      	cbz	r0, 800489c <__sfmoreglue+0x28>
 800488a:	2100      	movs	r1, #0
 800488c:	e880 0042 	stmia.w	r0, {r1, r6}
 8004890:	300c      	adds	r0, #12
 8004892:	60a0      	str	r0, [r4, #8]
 8004894:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004898:	f000 f8df 	bl	8004a5a <memset>
 800489c:	4620      	mov	r0, r4
 800489e:	bd70      	pop	{r4, r5, r6, pc}

080048a0 <__sinit>:
 80048a0:	6983      	ldr	r3, [r0, #24]
 80048a2:	b510      	push	{r4, lr}
 80048a4:	4604      	mov	r4, r0
 80048a6:	bb33      	cbnz	r3, 80048f6 <__sinit+0x56>
 80048a8:	6483      	str	r3, [r0, #72]	; 0x48
 80048aa:	64c3      	str	r3, [r0, #76]	; 0x4c
 80048ac:	6503      	str	r3, [r0, #80]	; 0x50
 80048ae:	4b12      	ldr	r3, [pc, #72]	; (80048f8 <__sinit+0x58>)
 80048b0:	4a12      	ldr	r2, [pc, #72]	; (80048fc <__sinit+0x5c>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6282      	str	r2, [r0, #40]	; 0x28
 80048b6:	4298      	cmp	r0, r3
 80048b8:	bf04      	itt	eq
 80048ba:	2301      	moveq	r3, #1
 80048bc:	6183      	streq	r3, [r0, #24]
 80048be:	f000 f81f 	bl	8004900 <__sfp>
 80048c2:	6060      	str	r0, [r4, #4]
 80048c4:	4620      	mov	r0, r4
 80048c6:	f000 f81b 	bl	8004900 <__sfp>
 80048ca:	60a0      	str	r0, [r4, #8]
 80048cc:	4620      	mov	r0, r4
 80048ce:	f000 f817 	bl	8004900 <__sfp>
 80048d2:	2200      	movs	r2, #0
 80048d4:	60e0      	str	r0, [r4, #12]
 80048d6:	2104      	movs	r1, #4
 80048d8:	6860      	ldr	r0, [r4, #4]
 80048da:	f7ff ffa7 	bl	800482c <std.isra.0>
 80048de:	2201      	movs	r2, #1
 80048e0:	2109      	movs	r1, #9
 80048e2:	68a0      	ldr	r0, [r4, #8]
 80048e4:	f7ff ffa2 	bl	800482c <std.isra.0>
 80048e8:	2202      	movs	r2, #2
 80048ea:	2112      	movs	r1, #18
 80048ec:	68e0      	ldr	r0, [r4, #12]
 80048ee:	f7ff ff9d 	bl	800482c <std.isra.0>
 80048f2:	2301      	movs	r3, #1
 80048f4:	61a3      	str	r3, [r4, #24]
 80048f6:	bd10      	pop	{r4, pc}
 80048f8:	080059a0 	.word	0x080059a0
 80048fc:	08004821 	.word	0x08004821

08004900 <__sfp>:
 8004900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004902:	4b1c      	ldr	r3, [pc, #112]	; (8004974 <__sfp+0x74>)
 8004904:	681e      	ldr	r6, [r3, #0]
 8004906:	69b3      	ldr	r3, [r6, #24]
 8004908:	4607      	mov	r7, r0
 800490a:	b913      	cbnz	r3, 8004912 <__sfp+0x12>
 800490c:	4630      	mov	r0, r6
 800490e:	f7ff ffc7 	bl	80048a0 <__sinit>
 8004912:	3648      	adds	r6, #72	; 0x48
 8004914:	68b4      	ldr	r4, [r6, #8]
 8004916:	6873      	ldr	r3, [r6, #4]
 8004918:	3b01      	subs	r3, #1
 800491a:	d503      	bpl.n	8004924 <__sfp+0x24>
 800491c:	6833      	ldr	r3, [r6, #0]
 800491e:	b133      	cbz	r3, 800492e <__sfp+0x2e>
 8004920:	6836      	ldr	r6, [r6, #0]
 8004922:	e7f7      	b.n	8004914 <__sfp+0x14>
 8004924:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004928:	b16d      	cbz	r5, 8004946 <__sfp+0x46>
 800492a:	3468      	adds	r4, #104	; 0x68
 800492c:	e7f4      	b.n	8004918 <__sfp+0x18>
 800492e:	2104      	movs	r1, #4
 8004930:	4638      	mov	r0, r7
 8004932:	f7ff ff9f 	bl	8004874 <__sfmoreglue>
 8004936:	6030      	str	r0, [r6, #0]
 8004938:	2800      	cmp	r0, #0
 800493a:	d1f1      	bne.n	8004920 <__sfp+0x20>
 800493c:	230c      	movs	r3, #12
 800493e:	603b      	str	r3, [r7, #0]
 8004940:	4604      	mov	r4, r0
 8004942:	4620      	mov	r0, r4
 8004944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004946:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800494a:	81e3      	strh	r3, [r4, #14]
 800494c:	2301      	movs	r3, #1
 800494e:	81a3      	strh	r3, [r4, #12]
 8004950:	6665      	str	r5, [r4, #100]	; 0x64
 8004952:	6025      	str	r5, [r4, #0]
 8004954:	60a5      	str	r5, [r4, #8]
 8004956:	6065      	str	r5, [r4, #4]
 8004958:	6125      	str	r5, [r4, #16]
 800495a:	6165      	str	r5, [r4, #20]
 800495c:	61a5      	str	r5, [r4, #24]
 800495e:	2208      	movs	r2, #8
 8004960:	4629      	mov	r1, r5
 8004962:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004966:	f000 f878 	bl	8004a5a <memset>
 800496a:	6365      	str	r5, [r4, #52]	; 0x34
 800496c:	63a5      	str	r5, [r4, #56]	; 0x38
 800496e:	64a5      	str	r5, [r4, #72]	; 0x48
 8004970:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004972:	e7e6      	b.n	8004942 <__sfp+0x42>
 8004974:	080059a0 	.word	0x080059a0

08004978 <_fwalk>:
 8004978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800497c:	4688      	mov	r8, r1
 800497e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004982:	2600      	movs	r6, #0
 8004984:	b914      	cbnz	r4, 800498c <_fwalk+0x14>
 8004986:	4630      	mov	r0, r6
 8004988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800498c:	68a5      	ldr	r5, [r4, #8]
 800498e:	6867      	ldr	r7, [r4, #4]
 8004990:	3f01      	subs	r7, #1
 8004992:	d501      	bpl.n	8004998 <_fwalk+0x20>
 8004994:	6824      	ldr	r4, [r4, #0]
 8004996:	e7f5      	b.n	8004984 <_fwalk+0xc>
 8004998:	89ab      	ldrh	r3, [r5, #12]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d906      	bls.n	80049ac <_fwalk+0x34>
 800499e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80049a2:	3301      	adds	r3, #1
 80049a4:	d002      	beq.n	80049ac <_fwalk+0x34>
 80049a6:	4628      	mov	r0, r5
 80049a8:	47c0      	blx	r8
 80049aa:	4306      	orrs	r6, r0
 80049ac:	3568      	adds	r5, #104	; 0x68
 80049ae:	e7ef      	b.n	8004990 <_fwalk+0x18>

080049b0 <_fwalk_reent>:
 80049b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049b4:	4680      	mov	r8, r0
 80049b6:	4689      	mov	r9, r1
 80049b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80049bc:	2600      	movs	r6, #0
 80049be:	b914      	cbnz	r4, 80049c6 <_fwalk_reent+0x16>
 80049c0:	4630      	mov	r0, r6
 80049c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049c6:	68a5      	ldr	r5, [r4, #8]
 80049c8:	6867      	ldr	r7, [r4, #4]
 80049ca:	3f01      	subs	r7, #1
 80049cc:	d501      	bpl.n	80049d2 <_fwalk_reent+0x22>
 80049ce:	6824      	ldr	r4, [r4, #0]
 80049d0:	e7f5      	b.n	80049be <_fwalk_reent+0xe>
 80049d2:	89ab      	ldrh	r3, [r5, #12]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d907      	bls.n	80049e8 <_fwalk_reent+0x38>
 80049d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80049dc:	3301      	adds	r3, #1
 80049de:	d003      	beq.n	80049e8 <_fwalk_reent+0x38>
 80049e0:	4629      	mov	r1, r5
 80049e2:	4640      	mov	r0, r8
 80049e4:	47c8      	blx	r9
 80049e6:	4306      	orrs	r6, r0
 80049e8:	3568      	adds	r5, #104	; 0x68
 80049ea:	e7ee      	b.n	80049ca <_fwalk_reent+0x1a>

080049ec <__libc_init_array>:
 80049ec:	b570      	push	{r4, r5, r6, lr}
 80049ee:	4e0d      	ldr	r6, [pc, #52]	; (8004a24 <__libc_init_array+0x38>)
 80049f0:	4c0d      	ldr	r4, [pc, #52]	; (8004a28 <__libc_init_array+0x3c>)
 80049f2:	1ba4      	subs	r4, r4, r6
 80049f4:	10a4      	asrs	r4, r4, #2
 80049f6:	2500      	movs	r5, #0
 80049f8:	42a5      	cmp	r5, r4
 80049fa:	d109      	bne.n	8004a10 <__libc_init_array+0x24>
 80049fc:	4e0b      	ldr	r6, [pc, #44]	; (8004a2c <__libc_init_array+0x40>)
 80049fe:	4c0c      	ldr	r4, [pc, #48]	; (8004a30 <__libc_init_array+0x44>)
 8004a00:	f000 ff56 	bl	80058b0 <_init>
 8004a04:	1ba4      	subs	r4, r4, r6
 8004a06:	10a4      	asrs	r4, r4, #2
 8004a08:	2500      	movs	r5, #0
 8004a0a:	42a5      	cmp	r5, r4
 8004a0c:	d105      	bne.n	8004a1a <__libc_init_array+0x2e>
 8004a0e:	bd70      	pop	{r4, r5, r6, pc}
 8004a10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a14:	4798      	blx	r3
 8004a16:	3501      	adds	r5, #1
 8004a18:	e7ee      	b.n	80049f8 <__libc_init_array+0xc>
 8004a1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a1e:	4798      	blx	r3
 8004a20:	3501      	adds	r5, #1
 8004a22:	e7f2      	b.n	8004a0a <__libc_init_array+0x1e>
 8004a24:	080059e0 	.word	0x080059e0
 8004a28:	080059e0 	.word	0x080059e0
 8004a2c:	080059e0 	.word	0x080059e0
 8004a30:	080059e4 	.word	0x080059e4

08004a34 <malloc>:
 8004a34:	4b02      	ldr	r3, [pc, #8]	; (8004a40 <malloc+0xc>)
 8004a36:	4601      	mov	r1, r0
 8004a38:	6818      	ldr	r0, [r3, #0]
 8004a3a:	f000 b865 	b.w	8004b08 <_malloc_r>
 8004a3e:	bf00      	nop
 8004a40:	2000017c 	.word	0x2000017c

08004a44 <memcpy>:
 8004a44:	b510      	push	{r4, lr}
 8004a46:	1e43      	subs	r3, r0, #1
 8004a48:	440a      	add	r2, r1
 8004a4a:	4291      	cmp	r1, r2
 8004a4c:	d100      	bne.n	8004a50 <memcpy+0xc>
 8004a4e:	bd10      	pop	{r4, pc}
 8004a50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a58:	e7f7      	b.n	8004a4a <memcpy+0x6>

08004a5a <memset>:
 8004a5a:	4402      	add	r2, r0
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d100      	bne.n	8004a64 <memset+0xa>
 8004a62:	4770      	bx	lr
 8004a64:	f803 1b01 	strb.w	r1, [r3], #1
 8004a68:	e7f9      	b.n	8004a5e <memset+0x4>
	...

08004a6c <_free_r>:
 8004a6c:	b538      	push	{r3, r4, r5, lr}
 8004a6e:	4605      	mov	r5, r0
 8004a70:	2900      	cmp	r1, #0
 8004a72:	d045      	beq.n	8004b00 <_free_r+0x94>
 8004a74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a78:	1f0c      	subs	r4, r1, #4
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	bfb8      	it	lt
 8004a7e:	18e4      	addlt	r4, r4, r3
 8004a80:	f000 fc0a 	bl	8005298 <__malloc_lock>
 8004a84:	4a1f      	ldr	r2, [pc, #124]	; (8004b04 <_free_r+0x98>)
 8004a86:	6813      	ldr	r3, [r2, #0]
 8004a88:	4610      	mov	r0, r2
 8004a8a:	b933      	cbnz	r3, 8004a9a <_free_r+0x2e>
 8004a8c:	6063      	str	r3, [r4, #4]
 8004a8e:	6014      	str	r4, [r2, #0]
 8004a90:	4628      	mov	r0, r5
 8004a92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a96:	f000 bc00 	b.w	800529a <__malloc_unlock>
 8004a9a:	42a3      	cmp	r3, r4
 8004a9c:	d90c      	bls.n	8004ab8 <_free_r+0x4c>
 8004a9e:	6821      	ldr	r1, [r4, #0]
 8004aa0:	1862      	adds	r2, r4, r1
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	bf04      	itt	eq
 8004aa6:	681a      	ldreq	r2, [r3, #0]
 8004aa8:	685b      	ldreq	r3, [r3, #4]
 8004aaa:	6063      	str	r3, [r4, #4]
 8004aac:	bf04      	itt	eq
 8004aae:	1852      	addeq	r2, r2, r1
 8004ab0:	6022      	streq	r2, [r4, #0]
 8004ab2:	6004      	str	r4, [r0, #0]
 8004ab4:	e7ec      	b.n	8004a90 <_free_r+0x24>
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	685a      	ldr	r2, [r3, #4]
 8004aba:	b10a      	cbz	r2, 8004ac0 <_free_r+0x54>
 8004abc:	42a2      	cmp	r2, r4
 8004abe:	d9fa      	bls.n	8004ab6 <_free_r+0x4a>
 8004ac0:	6819      	ldr	r1, [r3, #0]
 8004ac2:	1858      	adds	r0, r3, r1
 8004ac4:	42a0      	cmp	r0, r4
 8004ac6:	d10b      	bne.n	8004ae0 <_free_r+0x74>
 8004ac8:	6820      	ldr	r0, [r4, #0]
 8004aca:	4401      	add	r1, r0
 8004acc:	1858      	adds	r0, r3, r1
 8004ace:	4282      	cmp	r2, r0
 8004ad0:	6019      	str	r1, [r3, #0]
 8004ad2:	d1dd      	bne.n	8004a90 <_free_r+0x24>
 8004ad4:	6810      	ldr	r0, [r2, #0]
 8004ad6:	6852      	ldr	r2, [r2, #4]
 8004ad8:	605a      	str	r2, [r3, #4]
 8004ada:	4401      	add	r1, r0
 8004adc:	6019      	str	r1, [r3, #0]
 8004ade:	e7d7      	b.n	8004a90 <_free_r+0x24>
 8004ae0:	d902      	bls.n	8004ae8 <_free_r+0x7c>
 8004ae2:	230c      	movs	r3, #12
 8004ae4:	602b      	str	r3, [r5, #0]
 8004ae6:	e7d3      	b.n	8004a90 <_free_r+0x24>
 8004ae8:	6820      	ldr	r0, [r4, #0]
 8004aea:	1821      	adds	r1, r4, r0
 8004aec:	428a      	cmp	r2, r1
 8004aee:	bf04      	itt	eq
 8004af0:	6811      	ldreq	r1, [r2, #0]
 8004af2:	6852      	ldreq	r2, [r2, #4]
 8004af4:	6062      	str	r2, [r4, #4]
 8004af6:	bf04      	itt	eq
 8004af8:	1809      	addeq	r1, r1, r0
 8004afa:	6021      	streq	r1, [r4, #0]
 8004afc:	605c      	str	r4, [r3, #4]
 8004afe:	e7c7      	b.n	8004a90 <_free_r+0x24>
 8004b00:	bd38      	pop	{r3, r4, r5, pc}
 8004b02:	bf00      	nop
 8004b04:	20000208 	.word	0x20000208

08004b08 <_malloc_r>:
 8004b08:	b570      	push	{r4, r5, r6, lr}
 8004b0a:	1ccd      	adds	r5, r1, #3
 8004b0c:	f025 0503 	bic.w	r5, r5, #3
 8004b10:	3508      	adds	r5, #8
 8004b12:	2d0c      	cmp	r5, #12
 8004b14:	bf38      	it	cc
 8004b16:	250c      	movcc	r5, #12
 8004b18:	2d00      	cmp	r5, #0
 8004b1a:	4606      	mov	r6, r0
 8004b1c:	db01      	blt.n	8004b22 <_malloc_r+0x1a>
 8004b1e:	42a9      	cmp	r1, r5
 8004b20:	d903      	bls.n	8004b2a <_malloc_r+0x22>
 8004b22:	230c      	movs	r3, #12
 8004b24:	6033      	str	r3, [r6, #0]
 8004b26:	2000      	movs	r0, #0
 8004b28:	bd70      	pop	{r4, r5, r6, pc}
 8004b2a:	f000 fbb5 	bl	8005298 <__malloc_lock>
 8004b2e:	4a23      	ldr	r2, [pc, #140]	; (8004bbc <_malloc_r+0xb4>)
 8004b30:	6814      	ldr	r4, [r2, #0]
 8004b32:	4621      	mov	r1, r4
 8004b34:	b991      	cbnz	r1, 8004b5c <_malloc_r+0x54>
 8004b36:	4c22      	ldr	r4, [pc, #136]	; (8004bc0 <_malloc_r+0xb8>)
 8004b38:	6823      	ldr	r3, [r4, #0]
 8004b3a:	b91b      	cbnz	r3, 8004b44 <_malloc_r+0x3c>
 8004b3c:	4630      	mov	r0, r6
 8004b3e:	f000 f951 	bl	8004de4 <_sbrk_r>
 8004b42:	6020      	str	r0, [r4, #0]
 8004b44:	4629      	mov	r1, r5
 8004b46:	4630      	mov	r0, r6
 8004b48:	f000 f94c 	bl	8004de4 <_sbrk_r>
 8004b4c:	1c43      	adds	r3, r0, #1
 8004b4e:	d126      	bne.n	8004b9e <_malloc_r+0x96>
 8004b50:	230c      	movs	r3, #12
 8004b52:	6033      	str	r3, [r6, #0]
 8004b54:	4630      	mov	r0, r6
 8004b56:	f000 fba0 	bl	800529a <__malloc_unlock>
 8004b5a:	e7e4      	b.n	8004b26 <_malloc_r+0x1e>
 8004b5c:	680b      	ldr	r3, [r1, #0]
 8004b5e:	1b5b      	subs	r3, r3, r5
 8004b60:	d41a      	bmi.n	8004b98 <_malloc_r+0x90>
 8004b62:	2b0b      	cmp	r3, #11
 8004b64:	d90f      	bls.n	8004b86 <_malloc_r+0x7e>
 8004b66:	600b      	str	r3, [r1, #0]
 8004b68:	50cd      	str	r5, [r1, r3]
 8004b6a:	18cc      	adds	r4, r1, r3
 8004b6c:	4630      	mov	r0, r6
 8004b6e:	f000 fb94 	bl	800529a <__malloc_unlock>
 8004b72:	f104 000b 	add.w	r0, r4, #11
 8004b76:	1d23      	adds	r3, r4, #4
 8004b78:	f020 0007 	bic.w	r0, r0, #7
 8004b7c:	1ac3      	subs	r3, r0, r3
 8004b7e:	d01b      	beq.n	8004bb8 <_malloc_r+0xb0>
 8004b80:	425a      	negs	r2, r3
 8004b82:	50e2      	str	r2, [r4, r3]
 8004b84:	bd70      	pop	{r4, r5, r6, pc}
 8004b86:	428c      	cmp	r4, r1
 8004b88:	bf0d      	iteet	eq
 8004b8a:	6863      	ldreq	r3, [r4, #4]
 8004b8c:	684b      	ldrne	r3, [r1, #4]
 8004b8e:	6063      	strne	r3, [r4, #4]
 8004b90:	6013      	streq	r3, [r2, #0]
 8004b92:	bf18      	it	ne
 8004b94:	460c      	movne	r4, r1
 8004b96:	e7e9      	b.n	8004b6c <_malloc_r+0x64>
 8004b98:	460c      	mov	r4, r1
 8004b9a:	6849      	ldr	r1, [r1, #4]
 8004b9c:	e7ca      	b.n	8004b34 <_malloc_r+0x2c>
 8004b9e:	1cc4      	adds	r4, r0, #3
 8004ba0:	f024 0403 	bic.w	r4, r4, #3
 8004ba4:	42a0      	cmp	r0, r4
 8004ba6:	d005      	beq.n	8004bb4 <_malloc_r+0xac>
 8004ba8:	1a21      	subs	r1, r4, r0
 8004baa:	4630      	mov	r0, r6
 8004bac:	f000 f91a 	bl	8004de4 <_sbrk_r>
 8004bb0:	3001      	adds	r0, #1
 8004bb2:	d0cd      	beq.n	8004b50 <_malloc_r+0x48>
 8004bb4:	6025      	str	r5, [r4, #0]
 8004bb6:	e7d9      	b.n	8004b6c <_malloc_r+0x64>
 8004bb8:	bd70      	pop	{r4, r5, r6, pc}
 8004bba:	bf00      	nop
 8004bbc:	20000208 	.word	0x20000208
 8004bc0:	2000020c 	.word	0x2000020c

08004bc4 <iprintf>:
 8004bc4:	b40f      	push	{r0, r1, r2, r3}
 8004bc6:	4b0a      	ldr	r3, [pc, #40]	; (8004bf0 <iprintf+0x2c>)
 8004bc8:	b513      	push	{r0, r1, r4, lr}
 8004bca:	681c      	ldr	r4, [r3, #0]
 8004bcc:	b124      	cbz	r4, 8004bd8 <iprintf+0x14>
 8004bce:	69a3      	ldr	r3, [r4, #24]
 8004bd0:	b913      	cbnz	r3, 8004bd8 <iprintf+0x14>
 8004bd2:	4620      	mov	r0, r4
 8004bd4:	f7ff fe64 	bl	80048a0 <__sinit>
 8004bd8:	ab05      	add	r3, sp, #20
 8004bda:	9a04      	ldr	r2, [sp, #16]
 8004bdc:	68a1      	ldr	r1, [r4, #8]
 8004bde:	9301      	str	r3, [sp, #4]
 8004be0:	4620      	mov	r0, r4
 8004be2:	f000 fb85 	bl	80052f0 <_vfiprintf_r>
 8004be6:	b002      	add	sp, #8
 8004be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bec:	b004      	add	sp, #16
 8004bee:	4770      	bx	lr
 8004bf0:	2000017c 	.word	0x2000017c

08004bf4 <_puts_r>:
 8004bf4:	b570      	push	{r4, r5, r6, lr}
 8004bf6:	460e      	mov	r6, r1
 8004bf8:	4605      	mov	r5, r0
 8004bfa:	b118      	cbz	r0, 8004c04 <_puts_r+0x10>
 8004bfc:	6983      	ldr	r3, [r0, #24]
 8004bfe:	b90b      	cbnz	r3, 8004c04 <_puts_r+0x10>
 8004c00:	f7ff fe4e 	bl	80048a0 <__sinit>
 8004c04:	69ab      	ldr	r3, [r5, #24]
 8004c06:	68ac      	ldr	r4, [r5, #8]
 8004c08:	b913      	cbnz	r3, 8004c10 <_puts_r+0x1c>
 8004c0a:	4628      	mov	r0, r5
 8004c0c:	f7ff fe48 	bl	80048a0 <__sinit>
 8004c10:	4b23      	ldr	r3, [pc, #140]	; (8004ca0 <_puts_r+0xac>)
 8004c12:	429c      	cmp	r4, r3
 8004c14:	d117      	bne.n	8004c46 <_puts_r+0x52>
 8004c16:	686c      	ldr	r4, [r5, #4]
 8004c18:	89a3      	ldrh	r3, [r4, #12]
 8004c1a:	071b      	lsls	r3, r3, #28
 8004c1c:	d51d      	bpl.n	8004c5a <_puts_r+0x66>
 8004c1e:	6923      	ldr	r3, [r4, #16]
 8004c20:	b1db      	cbz	r3, 8004c5a <_puts_r+0x66>
 8004c22:	3e01      	subs	r6, #1
 8004c24:	68a3      	ldr	r3, [r4, #8]
 8004c26:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	60a3      	str	r3, [r4, #8]
 8004c2e:	b9e9      	cbnz	r1, 8004c6c <_puts_r+0x78>
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	da2e      	bge.n	8004c92 <_puts_r+0x9e>
 8004c34:	4622      	mov	r2, r4
 8004c36:	210a      	movs	r1, #10
 8004c38:	4628      	mov	r0, r5
 8004c3a:	f000 f9d5 	bl	8004fe8 <__swbuf_r>
 8004c3e:	3001      	adds	r0, #1
 8004c40:	d011      	beq.n	8004c66 <_puts_r+0x72>
 8004c42:	200a      	movs	r0, #10
 8004c44:	bd70      	pop	{r4, r5, r6, pc}
 8004c46:	4b17      	ldr	r3, [pc, #92]	; (8004ca4 <_puts_r+0xb0>)
 8004c48:	429c      	cmp	r4, r3
 8004c4a:	d101      	bne.n	8004c50 <_puts_r+0x5c>
 8004c4c:	68ac      	ldr	r4, [r5, #8]
 8004c4e:	e7e3      	b.n	8004c18 <_puts_r+0x24>
 8004c50:	4b15      	ldr	r3, [pc, #84]	; (8004ca8 <_puts_r+0xb4>)
 8004c52:	429c      	cmp	r4, r3
 8004c54:	bf08      	it	eq
 8004c56:	68ec      	ldreq	r4, [r5, #12]
 8004c58:	e7de      	b.n	8004c18 <_puts_r+0x24>
 8004c5a:	4621      	mov	r1, r4
 8004c5c:	4628      	mov	r0, r5
 8004c5e:	f000 fa27 	bl	80050b0 <__swsetup_r>
 8004c62:	2800      	cmp	r0, #0
 8004c64:	d0dd      	beq.n	8004c22 <_puts_r+0x2e>
 8004c66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c6a:	bd70      	pop	{r4, r5, r6, pc}
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	da04      	bge.n	8004c7a <_puts_r+0x86>
 8004c70:	69a2      	ldr	r2, [r4, #24]
 8004c72:	4293      	cmp	r3, r2
 8004c74:	db06      	blt.n	8004c84 <_puts_r+0x90>
 8004c76:	290a      	cmp	r1, #10
 8004c78:	d004      	beq.n	8004c84 <_puts_r+0x90>
 8004c7a:	6823      	ldr	r3, [r4, #0]
 8004c7c:	1c5a      	adds	r2, r3, #1
 8004c7e:	6022      	str	r2, [r4, #0]
 8004c80:	7019      	strb	r1, [r3, #0]
 8004c82:	e7cf      	b.n	8004c24 <_puts_r+0x30>
 8004c84:	4622      	mov	r2, r4
 8004c86:	4628      	mov	r0, r5
 8004c88:	f000 f9ae 	bl	8004fe8 <__swbuf_r>
 8004c8c:	3001      	adds	r0, #1
 8004c8e:	d1c9      	bne.n	8004c24 <_puts_r+0x30>
 8004c90:	e7e9      	b.n	8004c66 <_puts_r+0x72>
 8004c92:	6823      	ldr	r3, [r4, #0]
 8004c94:	200a      	movs	r0, #10
 8004c96:	1c5a      	adds	r2, r3, #1
 8004c98:	6022      	str	r2, [r4, #0]
 8004c9a:	7018      	strb	r0, [r3, #0]
 8004c9c:	bd70      	pop	{r4, r5, r6, pc}
 8004c9e:	bf00      	nop
 8004ca0:	08005960 	.word	0x08005960
 8004ca4:	08005980 	.word	0x08005980
 8004ca8:	08005940 	.word	0x08005940

08004cac <puts>:
 8004cac:	4b02      	ldr	r3, [pc, #8]	; (8004cb8 <puts+0xc>)
 8004cae:	4601      	mov	r1, r0
 8004cb0:	6818      	ldr	r0, [r3, #0]
 8004cb2:	f7ff bf9f 	b.w	8004bf4 <_puts_r>
 8004cb6:	bf00      	nop
 8004cb8:	2000017c 	.word	0x2000017c

08004cbc <lflush>:
 8004cbc:	8983      	ldrh	r3, [r0, #12]
 8004cbe:	f003 0309 	and.w	r3, r3, #9
 8004cc2:	2b09      	cmp	r3, #9
 8004cc4:	d101      	bne.n	8004cca <lflush+0xe>
 8004cc6:	f7ff bd2d 	b.w	8004724 <fflush>
 8004cca:	2000      	movs	r0, #0
 8004ccc:	4770      	bx	lr
	...

08004cd0 <__srefill_r>:
 8004cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cd2:	460c      	mov	r4, r1
 8004cd4:	4605      	mov	r5, r0
 8004cd6:	b118      	cbz	r0, 8004ce0 <__srefill_r+0x10>
 8004cd8:	6983      	ldr	r3, [r0, #24]
 8004cda:	b90b      	cbnz	r3, 8004ce0 <__srefill_r+0x10>
 8004cdc:	f7ff fde0 	bl	80048a0 <__sinit>
 8004ce0:	4b3b      	ldr	r3, [pc, #236]	; (8004dd0 <__srefill_r+0x100>)
 8004ce2:	429c      	cmp	r4, r3
 8004ce4:	d10a      	bne.n	8004cfc <__srefill_r+0x2c>
 8004ce6:	686c      	ldr	r4, [r5, #4]
 8004ce8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004cec:	2300      	movs	r3, #0
 8004cee:	6063      	str	r3, [r4, #4]
 8004cf0:	b293      	uxth	r3, r2
 8004cf2:	069e      	lsls	r6, r3, #26
 8004cf4:	d50c      	bpl.n	8004d10 <__srefill_r+0x40>
 8004cf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cfc:	4b35      	ldr	r3, [pc, #212]	; (8004dd4 <__srefill_r+0x104>)
 8004cfe:	429c      	cmp	r4, r3
 8004d00:	d101      	bne.n	8004d06 <__srefill_r+0x36>
 8004d02:	68ac      	ldr	r4, [r5, #8]
 8004d04:	e7f0      	b.n	8004ce8 <__srefill_r+0x18>
 8004d06:	4b34      	ldr	r3, [pc, #208]	; (8004dd8 <__srefill_r+0x108>)
 8004d08:	429c      	cmp	r4, r3
 8004d0a:	bf08      	it	eq
 8004d0c:	68ec      	ldreq	r4, [r5, #12]
 8004d0e:	e7eb      	b.n	8004ce8 <__srefill_r+0x18>
 8004d10:	0758      	lsls	r0, r3, #29
 8004d12:	d448      	bmi.n	8004da6 <__srefill_r+0xd6>
 8004d14:	06d9      	lsls	r1, r3, #27
 8004d16:	d405      	bmi.n	8004d24 <__srefill_r+0x54>
 8004d18:	2309      	movs	r3, #9
 8004d1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d1e:	602b      	str	r3, [r5, #0]
 8004d20:	81a2      	strh	r2, [r4, #12]
 8004d22:	e7e8      	b.n	8004cf6 <__srefill_r+0x26>
 8004d24:	071a      	lsls	r2, r3, #28
 8004d26:	d50b      	bpl.n	8004d40 <__srefill_r+0x70>
 8004d28:	4621      	mov	r1, r4
 8004d2a:	4628      	mov	r0, r5
 8004d2c:	f7ff fcd0 	bl	80046d0 <_fflush_r>
 8004d30:	2800      	cmp	r0, #0
 8004d32:	d1e0      	bne.n	8004cf6 <__srefill_r+0x26>
 8004d34:	89a3      	ldrh	r3, [r4, #12]
 8004d36:	60a0      	str	r0, [r4, #8]
 8004d38:	f023 0308 	bic.w	r3, r3, #8
 8004d3c:	81a3      	strh	r3, [r4, #12]
 8004d3e:	61a0      	str	r0, [r4, #24]
 8004d40:	89a3      	ldrh	r3, [r4, #12]
 8004d42:	f043 0304 	orr.w	r3, r3, #4
 8004d46:	81a3      	strh	r3, [r4, #12]
 8004d48:	6923      	ldr	r3, [r4, #16]
 8004d4a:	b91b      	cbnz	r3, 8004d54 <__srefill_r+0x84>
 8004d4c:	4621      	mov	r1, r4
 8004d4e:	4628      	mov	r0, r5
 8004d50:	f000 fa62 	bl	8005218 <__smakebuf_r>
 8004d54:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8004d58:	b2be      	uxth	r6, r7
 8004d5a:	07b3      	lsls	r3, r6, #30
 8004d5c:	d00f      	beq.n	8004d7e <__srefill_r+0xae>
 8004d5e:	2301      	movs	r3, #1
 8004d60:	81a3      	strh	r3, [r4, #12]
 8004d62:	4b1e      	ldr	r3, [pc, #120]	; (8004ddc <__srefill_r+0x10c>)
 8004d64:	491e      	ldr	r1, [pc, #120]	; (8004de0 <__srefill_r+0x110>)
 8004d66:	6818      	ldr	r0, [r3, #0]
 8004d68:	f006 0609 	and.w	r6, r6, #9
 8004d6c:	f7ff fe04 	bl	8004978 <_fwalk>
 8004d70:	2e09      	cmp	r6, #9
 8004d72:	81a7      	strh	r7, [r4, #12]
 8004d74:	d103      	bne.n	8004d7e <__srefill_r+0xae>
 8004d76:	4621      	mov	r1, r4
 8004d78:	4628      	mov	r0, r5
 8004d7a:	f7ff fc21 	bl	80045c0 <__sflush_r>
 8004d7e:	6922      	ldr	r2, [r4, #16]
 8004d80:	6022      	str	r2, [r4, #0]
 8004d82:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004d84:	6963      	ldr	r3, [r4, #20]
 8004d86:	6a21      	ldr	r1, [r4, #32]
 8004d88:	4628      	mov	r0, r5
 8004d8a:	47b0      	blx	r6
 8004d8c:	2800      	cmp	r0, #0
 8004d8e:	6060      	str	r0, [r4, #4]
 8004d90:	dc1c      	bgt.n	8004dcc <__srefill_r+0xfc>
 8004d92:	89a3      	ldrh	r3, [r4, #12]
 8004d94:	bf17      	itett	ne
 8004d96:	2200      	movne	r2, #0
 8004d98:	f043 0320 	orreq.w	r3, r3, #32
 8004d9c:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8004da0:	6062      	strne	r2, [r4, #4]
 8004da2:	81a3      	strh	r3, [r4, #12]
 8004da4:	e7a7      	b.n	8004cf6 <__srefill_r+0x26>
 8004da6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004da8:	2900      	cmp	r1, #0
 8004daa:	d0cd      	beq.n	8004d48 <__srefill_r+0x78>
 8004dac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004db0:	4299      	cmp	r1, r3
 8004db2:	d002      	beq.n	8004dba <__srefill_r+0xea>
 8004db4:	4628      	mov	r0, r5
 8004db6:	f7ff fe59 	bl	8004a6c <_free_r>
 8004dba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004dbc:	6063      	str	r3, [r4, #4]
 8004dbe:	2000      	movs	r0, #0
 8004dc0:	6360      	str	r0, [r4, #52]	; 0x34
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d0c0      	beq.n	8004d48 <__srefill_r+0x78>
 8004dc6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004dc8:	6023      	str	r3, [r4, #0]
 8004dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dcc:	2000      	movs	r0, #0
 8004dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dd0:	08005960 	.word	0x08005960
 8004dd4:	08005980 	.word	0x08005980
 8004dd8:	08005940 	.word	0x08005940
 8004ddc:	080059a0 	.word	0x080059a0
 8004de0:	08004cbd 	.word	0x08004cbd

08004de4 <_sbrk_r>:
 8004de4:	b538      	push	{r3, r4, r5, lr}
 8004de6:	4c06      	ldr	r4, [pc, #24]	; (8004e00 <_sbrk_r+0x1c>)
 8004de8:	2300      	movs	r3, #0
 8004dea:	4605      	mov	r5, r0
 8004dec:	4608      	mov	r0, r1
 8004dee:	6023      	str	r3, [r4, #0]
 8004df0:	f7ff f916 	bl	8004020 <_sbrk>
 8004df4:	1c43      	adds	r3, r0, #1
 8004df6:	d102      	bne.n	8004dfe <_sbrk_r+0x1a>
 8004df8:	6823      	ldr	r3, [r4, #0]
 8004dfa:	b103      	cbz	r3, 8004dfe <_sbrk_r+0x1a>
 8004dfc:	602b      	str	r3, [r5, #0]
 8004dfe:	bd38      	pop	{r3, r4, r5, pc}
 8004e00:	20000708 	.word	0x20000708

08004e04 <setvbuf>:
 8004e04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004e08:	461d      	mov	r5, r3
 8004e0a:	4b51      	ldr	r3, [pc, #324]	; (8004f50 <setvbuf+0x14c>)
 8004e0c:	681e      	ldr	r6, [r3, #0]
 8004e0e:	4604      	mov	r4, r0
 8004e10:	460f      	mov	r7, r1
 8004e12:	4690      	mov	r8, r2
 8004e14:	b126      	cbz	r6, 8004e20 <setvbuf+0x1c>
 8004e16:	69b3      	ldr	r3, [r6, #24]
 8004e18:	b913      	cbnz	r3, 8004e20 <setvbuf+0x1c>
 8004e1a:	4630      	mov	r0, r6
 8004e1c:	f7ff fd40 	bl	80048a0 <__sinit>
 8004e20:	4b4c      	ldr	r3, [pc, #304]	; (8004f54 <setvbuf+0x150>)
 8004e22:	429c      	cmp	r4, r3
 8004e24:	d152      	bne.n	8004ecc <setvbuf+0xc8>
 8004e26:	6874      	ldr	r4, [r6, #4]
 8004e28:	f1b8 0f02 	cmp.w	r8, #2
 8004e2c:	d006      	beq.n	8004e3c <setvbuf+0x38>
 8004e2e:	f1b8 0f01 	cmp.w	r8, #1
 8004e32:	f200 8089 	bhi.w	8004f48 <setvbuf+0x144>
 8004e36:	2d00      	cmp	r5, #0
 8004e38:	f2c0 8086 	blt.w	8004f48 <setvbuf+0x144>
 8004e3c:	4621      	mov	r1, r4
 8004e3e:	4630      	mov	r0, r6
 8004e40:	f7ff fc46 	bl	80046d0 <_fflush_r>
 8004e44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e46:	b141      	cbz	r1, 8004e5a <setvbuf+0x56>
 8004e48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e4c:	4299      	cmp	r1, r3
 8004e4e:	d002      	beq.n	8004e56 <setvbuf+0x52>
 8004e50:	4630      	mov	r0, r6
 8004e52:	f7ff fe0b 	bl	8004a6c <_free_r>
 8004e56:	2300      	movs	r3, #0
 8004e58:	6363      	str	r3, [r4, #52]	; 0x34
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	61a3      	str	r3, [r4, #24]
 8004e5e:	6063      	str	r3, [r4, #4]
 8004e60:	89a3      	ldrh	r3, [r4, #12]
 8004e62:	061b      	lsls	r3, r3, #24
 8004e64:	d503      	bpl.n	8004e6e <setvbuf+0x6a>
 8004e66:	6921      	ldr	r1, [r4, #16]
 8004e68:	4630      	mov	r0, r6
 8004e6a:	f7ff fdff 	bl	8004a6c <_free_r>
 8004e6e:	89a3      	ldrh	r3, [r4, #12]
 8004e70:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004e74:	f023 0303 	bic.w	r3, r3, #3
 8004e78:	f1b8 0f02 	cmp.w	r8, #2
 8004e7c:	81a3      	strh	r3, [r4, #12]
 8004e7e:	d05d      	beq.n	8004f3c <setvbuf+0x138>
 8004e80:	ab01      	add	r3, sp, #4
 8004e82:	466a      	mov	r2, sp
 8004e84:	4621      	mov	r1, r4
 8004e86:	4630      	mov	r0, r6
 8004e88:	f000 f9a2 	bl	80051d0 <__swhatbuf_r>
 8004e8c:	89a3      	ldrh	r3, [r4, #12]
 8004e8e:	4318      	orrs	r0, r3
 8004e90:	81a0      	strh	r0, [r4, #12]
 8004e92:	bb2d      	cbnz	r5, 8004ee0 <setvbuf+0xdc>
 8004e94:	9d00      	ldr	r5, [sp, #0]
 8004e96:	4628      	mov	r0, r5
 8004e98:	f7ff fdcc 	bl	8004a34 <malloc>
 8004e9c:	4607      	mov	r7, r0
 8004e9e:	2800      	cmp	r0, #0
 8004ea0:	d14e      	bne.n	8004f40 <setvbuf+0x13c>
 8004ea2:	f8dd 9000 	ldr.w	r9, [sp]
 8004ea6:	45a9      	cmp	r9, r5
 8004ea8:	d13c      	bne.n	8004f24 <setvbuf+0x120>
 8004eaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004eae:	89a3      	ldrh	r3, [r4, #12]
 8004eb0:	f043 0302 	orr.w	r3, r3, #2
 8004eb4:	81a3      	strh	r3, [r4, #12]
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60a3      	str	r3, [r4, #8]
 8004eba:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ebe:	6023      	str	r3, [r4, #0]
 8004ec0:	6123      	str	r3, [r4, #16]
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	6163      	str	r3, [r4, #20]
 8004ec6:	b003      	add	sp, #12
 8004ec8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ecc:	4b22      	ldr	r3, [pc, #136]	; (8004f58 <setvbuf+0x154>)
 8004ece:	429c      	cmp	r4, r3
 8004ed0:	d101      	bne.n	8004ed6 <setvbuf+0xd2>
 8004ed2:	68b4      	ldr	r4, [r6, #8]
 8004ed4:	e7a8      	b.n	8004e28 <setvbuf+0x24>
 8004ed6:	4b21      	ldr	r3, [pc, #132]	; (8004f5c <setvbuf+0x158>)
 8004ed8:	429c      	cmp	r4, r3
 8004eda:	bf08      	it	eq
 8004edc:	68f4      	ldreq	r4, [r6, #12]
 8004ede:	e7a3      	b.n	8004e28 <setvbuf+0x24>
 8004ee0:	2f00      	cmp	r7, #0
 8004ee2:	d0d8      	beq.n	8004e96 <setvbuf+0x92>
 8004ee4:	69b3      	ldr	r3, [r6, #24]
 8004ee6:	b913      	cbnz	r3, 8004eee <setvbuf+0xea>
 8004ee8:	4630      	mov	r0, r6
 8004eea:	f7ff fcd9 	bl	80048a0 <__sinit>
 8004eee:	f1b8 0f01 	cmp.w	r8, #1
 8004ef2:	bf08      	it	eq
 8004ef4:	89a3      	ldrheq	r3, [r4, #12]
 8004ef6:	6027      	str	r7, [r4, #0]
 8004ef8:	bf04      	itt	eq
 8004efa:	f043 0301 	orreq.w	r3, r3, #1
 8004efe:	81a3      	strheq	r3, [r4, #12]
 8004f00:	89a3      	ldrh	r3, [r4, #12]
 8004f02:	6127      	str	r7, [r4, #16]
 8004f04:	f013 0008 	ands.w	r0, r3, #8
 8004f08:	6165      	str	r5, [r4, #20]
 8004f0a:	d01b      	beq.n	8004f44 <setvbuf+0x140>
 8004f0c:	f013 0001 	ands.w	r0, r3, #1
 8004f10:	bf18      	it	ne
 8004f12:	426d      	negne	r5, r5
 8004f14:	f04f 0300 	mov.w	r3, #0
 8004f18:	bf1d      	ittte	ne
 8004f1a:	60a3      	strne	r3, [r4, #8]
 8004f1c:	61a5      	strne	r5, [r4, #24]
 8004f1e:	4618      	movne	r0, r3
 8004f20:	60a5      	streq	r5, [r4, #8]
 8004f22:	e7d0      	b.n	8004ec6 <setvbuf+0xc2>
 8004f24:	4648      	mov	r0, r9
 8004f26:	f7ff fd85 	bl	8004a34 <malloc>
 8004f2a:	4607      	mov	r7, r0
 8004f2c:	2800      	cmp	r0, #0
 8004f2e:	d0bc      	beq.n	8004eaa <setvbuf+0xa6>
 8004f30:	89a3      	ldrh	r3, [r4, #12]
 8004f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f36:	81a3      	strh	r3, [r4, #12]
 8004f38:	464d      	mov	r5, r9
 8004f3a:	e7d3      	b.n	8004ee4 <setvbuf+0xe0>
 8004f3c:	2000      	movs	r0, #0
 8004f3e:	e7b6      	b.n	8004eae <setvbuf+0xaa>
 8004f40:	46a9      	mov	r9, r5
 8004f42:	e7f5      	b.n	8004f30 <setvbuf+0x12c>
 8004f44:	60a0      	str	r0, [r4, #8]
 8004f46:	e7be      	b.n	8004ec6 <setvbuf+0xc2>
 8004f48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f4c:	e7bb      	b.n	8004ec6 <setvbuf+0xc2>
 8004f4e:	bf00      	nop
 8004f50:	2000017c 	.word	0x2000017c
 8004f54:	08005960 	.word	0x08005960
 8004f58:	08005980 	.word	0x08005980
 8004f5c:	08005940 	.word	0x08005940

08004f60 <__sread>:
 8004f60:	b510      	push	{r4, lr}
 8004f62:	460c      	mov	r4, r1
 8004f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f68:	f000 fc6e 	bl	8005848 <_read_r>
 8004f6c:	2800      	cmp	r0, #0
 8004f6e:	bfab      	itete	ge
 8004f70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f72:	89a3      	ldrhlt	r3, [r4, #12]
 8004f74:	181b      	addge	r3, r3, r0
 8004f76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f7a:	bfac      	ite	ge
 8004f7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f7e:	81a3      	strhlt	r3, [r4, #12]
 8004f80:	bd10      	pop	{r4, pc}

08004f82 <__swrite>:
 8004f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f86:	461f      	mov	r7, r3
 8004f88:	898b      	ldrh	r3, [r1, #12]
 8004f8a:	05db      	lsls	r3, r3, #23
 8004f8c:	4605      	mov	r5, r0
 8004f8e:	460c      	mov	r4, r1
 8004f90:	4616      	mov	r6, r2
 8004f92:	d505      	bpl.n	8004fa0 <__swrite+0x1e>
 8004f94:	2302      	movs	r3, #2
 8004f96:	2200      	movs	r2, #0
 8004f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f9c:	f000 f906 	bl	80051ac <_lseek_r>
 8004fa0:	89a3      	ldrh	r3, [r4, #12]
 8004fa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004faa:	81a3      	strh	r3, [r4, #12]
 8004fac:	4632      	mov	r2, r6
 8004fae:	463b      	mov	r3, r7
 8004fb0:	4628      	mov	r0, r5
 8004fb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fb6:	f000 b869 	b.w	800508c <_write_r>

08004fba <__sseek>:
 8004fba:	b510      	push	{r4, lr}
 8004fbc:	460c      	mov	r4, r1
 8004fbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fc2:	f000 f8f3 	bl	80051ac <_lseek_r>
 8004fc6:	1c43      	adds	r3, r0, #1
 8004fc8:	89a3      	ldrh	r3, [r4, #12]
 8004fca:	bf15      	itete	ne
 8004fcc:	6560      	strne	r0, [r4, #84]	; 0x54
 8004fce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004fd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004fd6:	81a3      	strheq	r3, [r4, #12]
 8004fd8:	bf18      	it	ne
 8004fda:	81a3      	strhne	r3, [r4, #12]
 8004fdc:	bd10      	pop	{r4, pc}

08004fde <__sclose>:
 8004fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fe2:	f000 b8d3 	b.w	800518c <_close_r>
	...

08004fe8 <__swbuf_r>:
 8004fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fea:	460e      	mov	r6, r1
 8004fec:	4614      	mov	r4, r2
 8004fee:	4605      	mov	r5, r0
 8004ff0:	b118      	cbz	r0, 8004ffa <__swbuf_r+0x12>
 8004ff2:	6983      	ldr	r3, [r0, #24]
 8004ff4:	b90b      	cbnz	r3, 8004ffa <__swbuf_r+0x12>
 8004ff6:	f7ff fc53 	bl	80048a0 <__sinit>
 8004ffa:	4b21      	ldr	r3, [pc, #132]	; (8005080 <__swbuf_r+0x98>)
 8004ffc:	429c      	cmp	r4, r3
 8004ffe:	d12a      	bne.n	8005056 <__swbuf_r+0x6e>
 8005000:	686c      	ldr	r4, [r5, #4]
 8005002:	69a3      	ldr	r3, [r4, #24]
 8005004:	60a3      	str	r3, [r4, #8]
 8005006:	89a3      	ldrh	r3, [r4, #12]
 8005008:	071a      	lsls	r2, r3, #28
 800500a:	d52e      	bpl.n	800506a <__swbuf_r+0x82>
 800500c:	6923      	ldr	r3, [r4, #16]
 800500e:	b363      	cbz	r3, 800506a <__swbuf_r+0x82>
 8005010:	6923      	ldr	r3, [r4, #16]
 8005012:	6820      	ldr	r0, [r4, #0]
 8005014:	1ac0      	subs	r0, r0, r3
 8005016:	6963      	ldr	r3, [r4, #20]
 8005018:	b2f6      	uxtb	r6, r6
 800501a:	4298      	cmp	r0, r3
 800501c:	4637      	mov	r7, r6
 800501e:	db04      	blt.n	800502a <__swbuf_r+0x42>
 8005020:	4621      	mov	r1, r4
 8005022:	4628      	mov	r0, r5
 8005024:	f7ff fb54 	bl	80046d0 <_fflush_r>
 8005028:	bb28      	cbnz	r0, 8005076 <__swbuf_r+0x8e>
 800502a:	68a3      	ldr	r3, [r4, #8]
 800502c:	3b01      	subs	r3, #1
 800502e:	60a3      	str	r3, [r4, #8]
 8005030:	6823      	ldr	r3, [r4, #0]
 8005032:	1c5a      	adds	r2, r3, #1
 8005034:	6022      	str	r2, [r4, #0]
 8005036:	701e      	strb	r6, [r3, #0]
 8005038:	6963      	ldr	r3, [r4, #20]
 800503a:	3001      	adds	r0, #1
 800503c:	4298      	cmp	r0, r3
 800503e:	d004      	beq.n	800504a <__swbuf_r+0x62>
 8005040:	89a3      	ldrh	r3, [r4, #12]
 8005042:	07db      	lsls	r3, r3, #31
 8005044:	d519      	bpl.n	800507a <__swbuf_r+0x92>
 8005046:	2e0a      	cmp	r6, #10
 8005048:	d117      	bne.n	800507a <__swbuf_r+0x92>
 800504a:	4621      	mov	r1, r4
 800504c:	4628      	mov	r0, r5
 800504e:	f7ff fb3f 	bl	80046d0 <_fflush_r>
 8005052:	b190      	cbz	r0, 800507a <__swbuf_r+0x92>
 8005054:	e00f      	b.n	8005076 <__swbuf_r+0x8e>
 8005056:	4b0b      	ldr	r3, [pc, #44]	; (8005084 <__swbuf_r+0x9c>)
 8005058:	429c      	cmp	r4, r3
 800505a:	d101      	bne.n	8005060 <__swbuf_r+0x78>
 800505c:	68ac      	ldr	r4, [r5, #8]
 800505e:	e7d0      	b.n	8005002 <__swbuf_r+0x1a>
 8005060:	4b09      	ldr	r3, [pc, #36]	; (8005088 <__swbuf_r+0xa0>)
 8005062:	429c      	cmp	r4, r3
 8005064:	bf08      	it	eq
 8005066:	68ec      	ldreq	r4, [r5, #12]
 8005068:	e7cb      	b.n	8005002 <__swbuf_r+0x1a>
 800506a:	4621      	mov	r1, r4
 800506c:	4628      	mov	r0, r5
 800506e:	f000 f81f 	bl	80050b0 <__swsetup_r>
 8005072:	2800      	cmp	r0, #0
 8005074:	d0cc      	beq.n	8005010 <__swbuf_r+0x28>
 8005076:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800507a:	4638      	mov	r0, r7
 800507c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800507e:	bf00      	nop
 8005080:	08005960 	.word	0x08005960
 8005084:	08005980 	.word	0x08005980
 8005088:	08005940 	.word	0x08005940

0800508c <_write_r>:
 800508c:	b538      	push	{r3, r4, r5, lr}
 800508e:	4c07      	ldr	r4, [pc, #28]	; (80050ac <_write_r+0x20>)
 8005090:	4605      	mov	r5, r0
 8005092:	4608      	mov	r0, r1
 8005094:	4611      	mov	r1, r2
 8005096:	2200      	movs	r2, #0
 8005098:	6022      	str	r2, [r4, #0]
 800509a:	461a      	mov	r2, r3
 800509c:	f7fe ffb2 	bl	8004004 <_write>
 80050a0:	1c43      	adds	r3, r0, #1
 80050a2:	d102      	bne.n	80050aa <_write_r+0x1e>
 80050a4:	6823      	ldr	r3, [r4, #0]
 80050a6:	b103      	cbz	r3, 80050aa <_write_r+0x1e>
 80050a8:	602b      	str	r3, [r5, #0]
 80050aa:	bd38      	pop	{r3, r4, r5, pc}
 80050ac:	20000708 	.word	0x20000708

080050b0 <__swsetup_r>:
 80050b0:	4b32      	ldr	r3, [pc, #200]	; (800517c <__swsetup_r+0xcc>)
 80050b2:	b570      	push	{r4, r5, r6, lr}
 80050b4:	681d      	ldr	r5, [r3, #0]
 80050b6:	4606      	mov	r6, r0
 80050b8:	460c      	mov	r4, r1
 80050ba:	b125      	cbz	r5, 80050c6 <__swsetup_r+0x16>
 80050bc:	69ab      	ldr	r3, [r5, #24]
 80050be:	b913      	cbnz	r3, 80050c6 <__swsetup_r+0x16>
 80050c0:	4628      	mov	r0, r5
 80050c2:	f7ff fbed 	bl	80048a0 <__sinit>
 80050c6:	4b2e      	ldr	r3, [pc, #184]	; (8005180 <__swsetup_r+0xd0>)
 80050c8:	429c      	cmp	r4, r3
 80050ca:	d10f      	bne.n	80050ec <__swsetup_r+0x3c>
 80050cc:	686c      	ldr	r4, [r5, #4]
 80050ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	0715      	lsls	r5, r2, #28
 80050d6:	d42c      	bmi.n	8005132 <__swsetup_r+0x82>
 80050d8:	06d0      	lsls	r0, r2, #27
 80050da:	d411      	bmi.n	8005100 <__swsetup_r+0x50>
 80050dc:	2209      	movs	r2, #9
 80050de:	6032      	str	r2, [r6, #0]
 80050e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050e4:	81a3      	strh	r3, [r4, #12]
 80050e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050ea:	bd70      	pop	{r4, r5, r6, pc}
 80050ec:	4b25      	ldr	r3, [pc, #148]	; (8005184 <__swsetup_r+0xd4>)
 80050ee:	429c      	cmp	r4, r3
 80050f0:	d101      	bne.n	80050f6 <__swsetup_r+0x46>
 80050f2:	68ac      	ldr	r4, [r5, #8]
 80050f4:	e7eb      	b.n	80050ce <__swsetup_r+0x1e>
 80050f6:	4b24      	ldr	r3, [pc, #144]	; (8005188 <__swsetup_r+0xd8>)
 80050f8:	429c      	cmp	r4, r3
 80050fa:	bf08      	it	eq
 80050fc:	68ec      	ldreq	r4, [r5, #12]
 80050fe:	e7e6      	b.n	80050ce <__swsetup_r+0x1e>
 8005100:	0751      	lsls	r1, r2, #29
 8005102:	d512      	bpl.n	800512a <__swsetup_r+0x7a>
 8005104:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005106:	b141      	cbz	r1, 800511a <__swsetup_r+0x6a>
 8005108:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800510c:	4299      	cmp	r1, r3
 800510e:	d002      	beq.n	8005116 <__swsetup_r+0x66>
 8005110:	4630      	mov	r0, r6
 8005112:	f7ff fcab 	bl	8004a6c <_free_r>
 8005116:	2300      	movs	r3, #0
 8005118:	6363      	str	r3, [r4, #52]	; 0x34
 800511a:	89a3      	ldrh	r3, [r4, #12]
 800511c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005120:	81a3      	strh	r3, [r4, #12]
 8005122:	2300      	movs	r3, #0
 8005124:	6063      	str	r3, [r4, #4]
 8005126:	6923      	ldr	r3, [r4, #16]
 8005128:	6023      	str	r3, [r4, #0]
 800512a:	89a3      	ldrh	r3, [r4, #12]
 800512c:	f043 0308 	orr.w	r3, r3, #8
 8005130:	81a3      	strh	r3, [r4, #12]
 8005132:	6923      	ldr	r3, [r4, #16]
 8005134:	b94b      	cbnz	r3, 800514a <__swsetup_r+0x9a>
 8005136:	89a3      	ldrh	r3, [r4, #12]
 8005138:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800513c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005140:	d003      	beq.n	800514a <__swsetup_r+0x9a>
 8005142:	4621      	mov	r1, r4
 8005144:	4630      	mov	r0, r6
 8005146:	f000 f867 	bl	8005218 <__smakebuf_r>
 800514a:	89a2      	ldrh	r2, [r4, #12]
 800514c:	f012 0301 	ands.w	r3, r2, #1
 8005150:	d00c      	beq.n	800516c <__swsetup_r+0xbc>
 8005152:	2300      	movs	r3, #0
 8005154:	60a3      	str	r3, [r4, #8]
 8005156:	6963      	ldr	r3, [r4, #20]
 8005158:	425b      	negs	r3, r3
 800515a:	61a3      	str	r3, [r4, #24]
 800515c:	6923      	ldr	r3, [r4, #16]
 800515e:	b953      	cbnz	r3, 8005176 <__swsetup_r+0xc6>
 8005160:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005164:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005168:	d1ba      	bne.n	80050e0 <__swsetup_r+0x30>
 800516a:	bd70      	pop	{r4, r5, r6, pc}
 800516c:	0792      	lsls	r2, r2, #30
 800516e:	bf58      	it	pl
 8005170:	6963      	ldrpl	r3, [r4, #20]
 8005172:	60a3      	str	r3, [r4, #8]
 8005174:	e7f2      	b.n	800515c <__swsetup_r+0xac>
 8005176:	2000      	movs	r0, #0
 8005178:	e7f7      	b.n	800516a <__swsetup_r+0xba>
 800517a:	bf00      	nop
 800517c:	2000017c 	.word	0x2000017c
 8005180:	08005960 	.word	0x08005960
 8005184:	08005980 	.word	0x08005980
 8005188:	08005940 	.word	0x08005940

0800518c <_close_r>:
 800518c:	b538      	push	{r3, r4, r5, lr}
 800518e:	4c06      	ldr	r4, [pc, #24]	; (80051a8 <_close_r+0x1c>)
 8005190:	2300      	movs	r3, #0
 8005192:	4605      	mov	r5, r0
 8005194:	4608      	mov	r0, r1
 8005196:	6023      	str	r3, [r4, #0]
 8005198:	f7fe ff5c 	bl	8004054 <_close>
 800519c:	1c43      	adds	r3, r0, #1
 800519e:	d102      	bne.n	80051a6 <_close_r+0x1a>
 80051a0:	6823      	ldr	r3, [r4, #0]
 80051a2:	b103      	cbz	r3, 80051a6 <_close_r+0x1a>
 80051a4:	602b      	str	r3, [r5, #0]
 80051a6:	bd38      	pop	{r3, r4, r5, pc}
 80051a8:	20000708 	.word	0x20000708

080051ac <_lseek_r>:
 80051ac:	b538      	push	{r3, r4, r5, lr}
 80051ae:	4c07      	ldr	r4, [pc, #28]	; (80051cc <_lseek_r+0x20>)
 80051b0:	4605      	mov	r5, r0
 80051b2:	4608      	mov	r0, r1
 80051b4:	4611      	mov	r1, r2
 80051b6:	2200      	movs	r2, #0
 80051b8:	6022      	str	r2, [r4, #0]
 80051ba:	461a      	mov	r2, r3
 80051bc:	f7fe ff54 	bl	8004068 <_lseek>
 80051c0:	1c43      	adds	r3, r0, #1
 80051c2:	d102      	bne.n	80051ca <_lseek_r+0x1e>
 80051c4:	6823      	ldr	r3, [r4, #0]
 80051c6:	b103      	cbz	r3, 80051ca <_lseek_r+0x1e>
 80051c8:	602b      	str	r3, [r5, #0]
 80051ca:	bd38      	pop	{r3, r4, r5, pc}
 80051cc:	20000708 	.word	0x20000708

080051d0 <__swhatbuf_r>:
 80051d0:	b570      	push	{r4, r5, r6, lr}
 80051d2:	460e      	mov	r6, r1
 80051d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051d8:	2900      	cmp	r1, #0
 80051da:	b090      	sub	sp, #64	; 0x40
 80051dc:	4614      	mov	r4, r2
 80051de:	461d      	mov	r5, r3
 80051e0:	da07      	bge.n	80051f2 <__swhatbuf_r+0x22>
 80051e2:	2300      	movs	r3, #0
 80051e4:	602b      	str	r3, [r5, #0]
 80051e6:	89b3      	ldrh	r3, [r6, #12]
 80051e8:	061a      	lsls	r2, r3, #24
 80051ea:	d410      	bmi.n	800520e <__swhatbuf_r+0x3e>
 80051ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051f0:	e00e      	b.n	8005210 <__swhatbuf_r+0x40>
 80051f2:	aa01      	add	r2, sp, #4
 80051f4:	f000 fb3a 	bl	800586c <_fstat_r>
 80051f8:	2800      	cmp	r0, #0
 80051fa:	dbf2      	blt.n	80051e2 <__swhatbuf_r+0x12>
 80051fc:	9a02      	ldr	r2, [sp, #8]
 80051fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005202:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005206:	425a      	negs	r2, r3
 8005208:	415a      	adcs	r2, r3
 800520a:	602a      	str	r2, [r5, #0]
 800520c:	e7ee      	b.n	80051ec <__swhatbuf_r+0x1c>
 800520e:	2340      	movs	r3, #64	; 0x40
 8005210:	2000      	movs	r0, #0
 8005212:	6023      	str	r3, [r4, #0]
 8005214:	b010      	add	sp, #64	; 0x40
 8005216:	bd70      	pop	{r4, r5, r6, pc}

08005218 <__smakebuf_r>:
 8005218:	898b      	ldrh	r3, [r1, #12]
 800521a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800521c:	079d      	lsls	r5, r3, #30
 800521e:	4606      	mov	r6, r0
 8005220:	460c      	mov	r4, r1
 8005222:	d507      	bpl.n	8005234 <__smakebuf_r+0x1c>
 8005224:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005228:	6023      	str	r3, [r4, #0]
 800522a:	6123      	str	r3, [r4, #16]
 800522c:	2301      	movs	r3, #1
 800522e:	6163      	str	r3, [r4, #20]
 8005230:	b002      	add	sp, #8
 8005232:	bd70      	pop	{r4, r5, r6, pc}
 8005234:	ab01      	add	r3, sp, #4
 8005236:	466a      	mov	r2, sp
 8005238:	f7ff ffca 	bl	80051d0 <__swhatbuf_r>
 800523c:	9900      	ldr	r1, [sp, #0]
 800523e:	4605      	mov	r5, r0
 8005240:	4630      	mov	r0, r6
 8005242:	f7ff fc61 	bl	8004b08 <_malloc_r>
 8005246:	b948      	cbnz	r0, 800525c <__smakebuf_r+0x44>
 8005248:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800524c:	059a      	lsls	r2, r3, #22
 800524e:	d4ef      	bmi.n	8005230 <__smakebuf_r+0x18>
 8005250:	f023 0303 	bic.w	r3, r3, #3
 8005254:	f043 0302 	orr.w	r3, r3, #2
 8005258:	81a3      	strh	r3, [r4, #12]
 800525a:	e7e3      	b.n	8005224 <__smakebuf_r+0xc>
 800525c:	4b0d      	ldr	r3, [pc, #52]	; (8005294 <__smakebuf_r+0x7c>)
 800525e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005260:	89a3      	ldrh	r3, [r4, #12]
 8005262:	6020      	str	r0, [r4, #0]
 8005264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005268:	81a3      	strh	r3, [r4, #12]
 800526a:	9b00      	ldr	r3, [sp, #0]
 800526c:	6163      	str	r3, [r4, #20]
 800526e:	9b01      	ldr	r3, [sp, #4]
 8005270:	6120      	str	r0, [r4, #16]
 8005272:	b15b      	cbz	r3, 800528c <__smakebuf_r+0x74>
 8005274:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005278:	4630      	mov	r0, r6
 800527a:	f000 fb09 	bl	8005890 <_isatty_r>
 800527e:	b128      	cbz	r0, 800528c <__smakebuf_r+0x74>
 8005280:	89a3      	ldrh	r3, [r4, #12]
 8005282:	f023 0303 	bic.w	r3, r3, #3
 8005286:	f043 0301 	orr.w	r3, r3, #1
 800528a:	81a3      	strh	r3, [r4, #12]
 800528c:	89a3      	ldrh	r3, [r4, #12]
 800528e:	431d      	orrs	r5, r3
 8005290:	81a5      	strh	r5, [r4, #12]
 8005292:	e7cd      	b.n	8005230 <__smakebuf_r+0x18>
 8005294:	08004821 	.word	0x08004821

08005298 <__malloc_lock>:
 8005298:	4770      	bx	lr

0800529a <__malloc_unlock>:
 800529a:	4770      	bx	lr

0800529c <__sfputc_r>:
 800529c:	6893      	ldr	r3, [r2, #8]
 800529e:	3b01      	subs	r3, #1
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	b410      	push	{r4}
 80052a4:	6093      	str	r3, [r2, #8]
 80052a6:	da09      	bge.n	80052bc <__sfputc_r+0x20>
 80052a8:	6994      	ldr	r4, [r2, #24]
 80052aa:	42a3      	cmp	r3, r4
 80052ac:	db02      	blt.n	80052b4 <__sfputc_r+0x18>
 80052ae:	b2cb      	uxtb	r3, r1
 80052b0:	2b0a      	cmp	r3, #10
 80052b2:	d103      	bne.n	80052bc <__sfputc_r+0x20>
 80052b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052b8:	f7ff be96 	b.w	8004fe8 <__swbuf_r>
 80052bc:	6813      	ldr	r3, [r2, #0]
 80052be:	1c58      	adds	r0, r3, #1
 80052c0:	6010      	str	r0, [r2, #0]
 80052c2:	7019      	strb	r1, [r3, #0]
 80052c4:	b2c8      	uxtb	r0, r1
 80052c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <__sfputs_r>:
 80052cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ce:	4606      	mov	r6, r0
 80052d0:	460f      	mov	r7, r1
 80052d2:	4614      	mov	r4, r2
 80052d4:	18d5      	adds	r5, r2, r3
 80052d6:	42ac      	cmp	r4, r5
 80052d8:	d101      	bne.n	80052de <__sfputs_r+0x12>
 80052da:	2000      	movs	r0, #0
 80052dc:	e007      	b.n	80052ee <__sfputs_r+0x22>
 80052de:	463a      	mov	r2, r7
 80052e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052e4:	4630      	mov	r0, r6
 80052e6:	f7ff ffd9 	bl	800529c <__sfputc_r>
 80052ea:	1c43      	adds	r3, r0, #1
 80052ec:	d1f3      	bne.n	80052d6 <__sfputs_r+0xa>
 80052ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080052f0 <_vfiprintf_r>:
 80052f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052f4:	b09d      	sub	sp, #116	; 0x74
 80052f6:	460c      	mov	r4, r1
 80052f8:	4617      	mov	r7, r2
 80052fa:	9303      	str	r3, [sp, #12]
 80052fc:	4606      	mov	r6, r0
 80052fe:	b118      	cbz	r0, 8005308 <_vfiprintf_r+0x18>
 8005300:	6983      	ldr	r3, [r0, #24]
 8005302:	b90b      	cbnz	r3, 8005308 <_vfiprintf_r+0x18>
 8005304:	f7ff facc 	bl	80048a0 <__sinit>
 8005308:	4b7c      	ldr	r3, [pc, #496]	; (80054fc <_vfiprintf_r+0x20c>)
 800530a:	429c      	cmp	r4, r3
 800530c:	d157      	bne.n	80053be <_vfiprintf_r+0xce>
 800530e:	6874      	ldr	r4, [r6, #4]
 8005310:	89a3      	ldrh	r3, [r4, #12]
 8005312:	0718      	lsls	r0, r3, #28
 8005314:	d55d      	bpl.n	80053d2 <_vfiprintf_r+0xe2>
 8005316:	6923      	ldr	r3, [r4, #16]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d05a      	beq.n	80053d2 <_vfiprintf_r+0xe2>
 800531c:	2300      	movs	r3, #0
 800531e:	9309      	str	r3, [sp, #36]	; 0x24
 8005320:	2320      	movs	r3, #32
 8005322:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005326:	2330      	movs	r3, #48	; 0x30
 8005328:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800532c:	f04f 0b01 	mov.w	fp, #1
 8005330:	46b8      	mov	r8, r7
 8005332:	4645      	mov	r5, r8
 8005334:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005338:	2b00      	cmp	r3, #0
 800533a:	d155      	bne.n	80053e8 <_vfiprintf_r+0xf8>
 800533c:	ebb8 0a07 	subs.w	sl, r8, r7
 8005340:	d00b      	beq.n	800535a <_vfiprintf_r+0x6a>
 8005342:	4653      	mov	r3, sl
 8005344:	463a      	mov	r2, r7
 8005346:	4621      	mov	r1, r4
 8005348:	4630      	mov	r0, r6
 800534a:	f7ff ffbf 	bl	80052cc <__sfputs_r>
 800534e:	3001      	adds	r0, #1
 8005350:	f000 80c4 	beq.w	80054dc <_vfiprintf_r+0x1ec>
 8005354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005356:	4453      	add	r3, sl
 8005358:	9309      	str	r3, [sp, #36]	; 0x24
 800535a:	f898 3000 	ldrb.w	r3, [r8]
 800535e:	2b00      	cmp	r3, #0
 8005360:	f000 80bc 	beq.w	80054dc <_vfiprintf_r+0x1ec>
 8005364:	2300      	movs	r3, #0
 8005366:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800536a:	9304      	str	r3, [sp, #16]
 800536c:	9307      	str	r3, [sp, #28]
 800536e:	9205      	str	r2, [sp, #20]
 8005370:	9306      	str	r3, [sp, #24]
 8005372:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005376:	931a      	str	r3, [sp, #104]	; 0x68
 8005378:	2205      	movs	r2, #5
 800537a:	7829      	ldrb	r1, [r5, #0]
 800537c:	4860      	ldr	r0, [pc, #384]	; (8005500 <_vfiprintf_r+0x210>)
 800537e:	f7fa ff2f 	bl	80001e0 <memchr>
 8005382:	f105 0801 	add.w	r8, r5, #1
 8005386:	9b04      	ldr	r3, [sp, #16]
 8005388:	2800      	cmp	r0, #0
 800538a:	d131      	bne.n	80053f0 <_vfiprintf_r+0x100>
 800538c:	06d9      	lsls	r1, r3, #27
 800538e:	bf44      	itt	mi
 8005390:	2220      	movmi	r2, #32
 8005392:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005396:	071a      	lsls	r2, r3, #28
 8005398:	bf44      	itt	mi
 800539a:	222b      	movmi	r2, #43	; 0x2b
 800539c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80053a0:	782a      	ldrb	r2, [r5, #0]
 80053a2:	2a2a      	cmp	r2, #42	; 0x2a
 80053a4:	d02c      	beq.n	8005400 <_vfiprintf_r+0x110>
 80053a6:	9a07      	ldr	r2, [sp, #28]
 80053a8:	2100      	movs	r1, #0
 80053aa:	200a      	movs	r0, #10
 80053ac:	46a8      	mov	r8, r5
 80053ae:	3501      	adds	r5, #1
 80053b0:	f898 3000 	ldrb.w	r3, [r8]
 80053b4:	3b30      	subs	r3, #48	; 0x30
 80053b6:	2b09      	cmp	r3, #9
 80053b8:	d96d      	bls.n	8005496 <_vfiprintf_r+0x1a6>
 80053ba:	b371      	cbz	r1, 800541a <_vfiprintf_r+0x12a>
 80053bc:	e026      	b.n	800540c <_vfiprintf_r+0x11c>
 80053be:	4b51      	ldr	r3, [pc, #324]	; (8005504 <_vfiprintf_r+0x214>)
 80053c0:	429c      	cmp	r4, r3
 80053c2:	d101      	bne.n	80053c8 <_vfiprintf_r+0xd8>
 80053c4:	68b4      	ldr	r4, [r6, #8]
 80053c6:	e7a3      	b.n	8005310 <_vfiprintf_r+0x20>
 80053c8:	4b4f      	ldr	r3, [pc, #316]	; (8005508 <_vfiprintf_r+0x218>)
 80053ca:	429c      	cmp	r4, r3
 80053cc:	bf08      	it	eq
 80053ce:	68f4      	ldreq	r4, [r6, #12]
 80053d0:	e79e      	b.n	8005310 <_vfiprintf_r+0x20>
 80053d2:	4621      	mov	r1, r4
 80053d4:	4630      	mov	r0, r6
 80053d6:	f7ff fe6b 	bl	80050b0 <__swsetup_r>
 80053da:	2800      	cmp	r0, #0
 80053dc:	d09e      	beq.n	800531c <_vfiprintf_r+0x2c>
 80053de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053e2:	b01d      	add	sp, #116	; 0x74
 80053e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053e8:	2b25      	cmp	r3, #37	; 0x25
 80053ea:	d0a7      	beq.n	800533c <_vfiprintf_r+0x4c>
 80053ec:	46a8      	mov	r8, r5
 80053ee:	e7a0      	b.n	8005332 <_vfiprintf_r+0x42>
 80053f0:	4a43      	ldr	r2, [pc, #268]	; (8005500 <_vfiprintf_r+0x210>)
 80053f2:	1a80      	subs	r0, r0, r2
 80053f4:	fa0b f000 	lsl.w	r0, fp, r0
 80053f8:	4318      	orrs	r0, r3
 80053fa:	9004      	str	r0, [sp, #16]
 80053fc:	4645      	mov	r5, r8
 80053fe:	e7bb      	b.n	8005378 <_vfiprintf_r+0x88>
 8005400:	9a03      	ldr	r2, [sp, #12]
 8005402:	1d11      	adds	r1, r2, #4
 8005404:	6812      	ldr	r2, [r2, #0]
 8005406:	9103      	str	r1, [sp, #12]
 8005408:	2a00      	cmp	r2, #0
 800540a:	db01      	blt.n	8005410 <_vfiprintf_r+0x120>
 800540c:	9207      	str	r2, [sp, #28]
 800540e:	e004      	b.n	800541a <_vfiprintf_r+0x12a>
 8005410:	4252      	negs	r2, r2
 8005412:	f043 0302 	orr.w	r3, r3, #2
 8005416:	9207      	str	r2, [sp, #28]
 8005418:	9304      	str	r3, [sp, #16]
 800541a:	f898 3000 	ldrb.w	r3, [r8]
 800541e:	2b2e      	cmp	r3, #46	; 0x2e
 8005420:	d110      	bne.n	8005444 <_vfiprintf_r+0x154>
 8005422:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005426:	2b2a      	cmp	r3, #42	; 0x2a
 8005428:	f108 0101 	add.w	r1, r8, #1
 800542c:	d137      	bne.n	800549e <_vfiprintf_r+0x1ae>
 800542e:	9b03      	ldr	r3, [sp, #12]
 8005430:	1d1a      	adds	r2, r3, #4
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	9203      	str	r2, [sp, #12]
 8005436:	2b00      	cmp	r3, #0
 8005438:	bfb8      	it	lt
 800543a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800543e:	f108 0802 	add.w	r8, r8, #2
 8005442:	9305      	str	r3, [sp, #20]
 8005444:	4d31      	ldr	r5, [pc, #196]	; (800550c <_vfiprintf_r+0x21c>)
 8005446:	f898 1000 	ldrb.w	r1, [r8]
 800544a:	2203      	movs	r2, #3
 800544c:	4628      	mov	r0, r5
 800544e:	f7fa fec7 	bl	80001e0 <memchr>
 8005452:	b140      	cbz	r0, 8005466 <_vfiprintf_r+0x176>
 8005454:	2340      	movs	r3, #64	; 0x40
 8005456:	1b40      	subs	r0, r0, r5
 8005458:	fa03 f000 	lsl.w	r0, r3, r0
 800545c:	9b04      	ldr	r3, [sp, #16]
 800545e:	4303      	orrs	r3, r0
 8005460:	9304      	str	r3, [sp, #16]
 8005462:	f108 0801 	add.w	r8, r8, #1
 8005466:	f898 1000 	ldrb.w	r1, [r8]
 800546a:	4829      	ldr	r0, [pc, #164]	; (8005510 <_vfiprintf_r+0x220>)
 800546c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005470:	2206      	movs	r2, #6
 8005472:	f108 0701 	add.w	r7, r8, #1
 8005476:	f7fa feb3 	bl	80001e0 <memchr>
 800547a:	2800      	cmp	r0, #0
 800547c:	d034      	beq.n	80054e8 <_vfiprintf_r+0x1f8>
 800547e:	4b25      	ldr	r3, [pc, #148]	; (8005514 <_vfiprintf_r+0x224>)
 8005480:	bb03      	cbnz	r3, 80054c4 <_vfiprintf_r+0x1d4>
 8005482:	9b03      	ldr	r3, [sp, #12]
 8005484:	3307      	adds	r3, #7
 8005486:	f023 0307 	bic.w	r3, r3, #7
 800548a:	3308      	adds	r3, #8
 800548c:	9303      	str	r3, [sp, #12]
 800548e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005490:	444b      	add	r3, r9
 8005492:	9309      	str	r3, [sp, #36]	; 0x24
 8005494:	e74c      	b.n	8005330 <_vfiprintf_r+0x40>
 8005496:	fb00 3202 	mla	r2, r0, r2, r3
 800549a:	2101      	movs	r1, #1
 800549c:	e786      	b.n	80053ac <_vfiprintf_r+0xbc>
 800549e:	2300      	movs	r3, #0
 80054a0:	9305      	str	r3, [sp, #20]
 80054a2:	4618      	mov	r0, r3
 80054a4:	250a      	movs	r5, #10
 80054a6:	4688      	mov	r8, r1
 80054a8:	3101      	adds	r1, #1
 80054aa:	f898 2000 	ldrb.w	r2, [r8]
 80054ae:	3a30      	subs	r2, #48	; 0x30
 80054b0:	2a09      	cmp	r2, #9
 80054b2:	d903      	bls.n	80054bc <_vfiprintf_r+0x1cc>
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d0c5      	beq.n	8005444 <_vfiprintf_r+0x154>
 80054b8:	9005      	str	r0, [sp, #20]
 80054ba:	e7c3      	b.n	8005444 <_vfiprintf_r+0x154>
 80054bc:	fb05 2000 	mla	r0, r5, r0, r2
 80054c0:	2301      	movs	r3, #1
 80054c2:	e7f0      	b.n	80054a6 <_vfiprintf_r+0x1b6>
 80054c4:	ab03      	add	r3, sp, #12
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	4622      	mov	r2, r4
 80054ca:	4b13      	ldr	r3, [pc, #76]	; (8005518 <_vfiprintf_r+0x228>)
 80054cc:	a904      	add	r1, sp, #16
 80054ce:	4630      	mov	r0, r6
 80054d0:	f3af 8000 	nop.w
 80054d4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80054d8:	4681      	mov	r9, r0
 80054da:	d1d8      	bne.n	800548e <_vfiprintf_r+0x19e>
 80054dc:	89a3      	ldrh	r3, [r4, #12]
 80054de:	065b      	lsls	r3, r3, #25
 80054e0:	f53f af7d 	bmi.w	80053de <_vfiprintf_r+0xee>
 80054e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054e6:	e77c      	b.n	80053e2 <_vfiprintf_r+0xf2>
 80054e8:	ab03      	add	r3, sp, #12
 80054ea:	9300      	str	r3, [sp, #0]
 80054ec:	4622      	mov	r2, r4
 80054ee:	4b0a      	ldr	r3, [pc, #40]	; (8005518 <_vfiprintf_r+0x228>)
 80054f0:	a904      	add	r1, sp, #16
 80054f2:	4630      	mov	r0, r6
 80054f4:	f000 f888 	bl	8005608 <_printf_i>
 80054f8:	e7ec      	b.n	80054d4 <_vfiprintf_r+0x1e4>
 80054fa:	bf00      	nop
 80054fc:	08005960 	.word	0x08005960
 8005500:	080059a4 	.word	0x080059a4
 8005504:	08005980 	.word	0x08005980
 8005508:	08005940 	.word	0x08005940
 800550c:	080059aa 	.word	0x080059aa
 8005510:	080059ae 	.word	0x080059ae
 8005514:	00000000 	.word	0x00000000
 8005518:	080052cd 	.word	0x080052cd

0800551c <_printf_common>:
 800551c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005520:	4691      	mov	r9, r2
 8005522:	461f      	mov	r7, r3
 8005524:	688a      	ldr	r2, [r1, #8]
 8005526:	690b      	ldr	r3, [r1, #16]
 8005528:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800552c:	4293      	cmp	r3, r2
 800552e:	bfb8      	it	lt
 8005530:	4613      	movlt	r3, r2
 8005532:	f8c9 3000 	str.w	r3, [r9]
 8005536:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800553a:	4606      	mov	r6, r0
 800553c:	460c      	mov	r4, r1
 800553e:	b112      	cbz	r2, 8005546 <_printf_common+0x2a>
 8005540:	3301      	adds	r3, #1
 8005542:	f8c9 3000 	str.w	r3, [r9]
 8005546:	6823      	ldr	r3, [r4, #0]
 8005548:	0699      	lsls	r1, r3, #26
 800554a:	bf42      	ittt	mi
 800554c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005550:	3302      	addmi	r3, #2
 8005552:	f8c9 3000 	strmi.w	r3, [r9]
 8005556:	6825      	ldr	r5, [r4, #0]
 8005558:	f015 0506 	ands.w	r5, r5, #6
 800555c:	d107      	bne.n	800556e <_printf_common+0x52>
 800555e:	f104 0a19 	add.w	sl, r4, #25
 8005562:	68e3      	ldr	r3, [r4, #12]
 8005564:	f8d9 2000 	ldr.w	r2, [r9]
 8005568:	1a9b      	subs	r3, r3, r2
 800556a:	429d      	cmp	r5, r3
 800556c:	db29      	blt.n	80055c2 <_printf_common+0xa6>
 800556e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005572:	6822      	ldr	r2, [r4, #0]
 8005574:	3300      	adds	r3, #0
 8005576:	bf18      	it	ne
 8005578:	2301      	movne	r3, #1
 800557a:	0692      	lsls	r2, r2, #26
 800557c:	d42e      	bmi.n	80055dc <_printf_common+0xc0>
 800557e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005582:	4639      	mov	r1, r7
 8005584:	4630      	mov	r0, r6
 8005586:	47c0      	blx	r8
 8005588:	3001      	adds	r0, #1
 800558a:	d021      	beq.n	80055d0 <_printf_common+0xb4>
 800558c:	6823      	ldr	r3, [r4, #0]
 800558e:	68e5      	ldr	r5, [r4, #12]
 8005590:	f8d9 2000 	ldr.w	r2, [r9]
 8005594:	f003 0306 	and.w	r3, r3, #6
 8005598:	2b04      	cmp	r3, #4
 800559a:	bf08      	it	eq
 800559c:	1aad      	subeq	r5, r5, r2
 800559e:	68a3      	ldr	r3, [r4, #8]
 80055a0:	6922      	ldr	r2, [r4, #16]
 80055a2:	bf0c      	ite	eq
 80055a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055a8:	2500      	movne	r5, #0
 80055aa:	4293      	cmp	r3, r2
 80055ac:	bfc4      	itt	gt
 80055ae:	1a9b      	subgt	r3, r3, r2
 80055b0:	18ed      	addgt	r5, r5, r3
 80055b2:	f04f 0900 	mov.w	r9, #0
 80055b6:	341a      	adds	r4, #26
 80055b8:	454d      	cmp	r5, r9
 80055ba:	d11b      	bne.n	80055f4 <_printf_common+0xd8>
 80055bc:	2000      	movs	r0, #0
 80055be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055c2:	2301      	movs	r3, #1
 80055c4:	4652      	mov	r2, sl
 80055c6:	4639      	mov	r1, r7
 80055c8:	4630      	mov	r0, r6
 80055ca:	47c0      	blx	r8
 80055cc:	3001      	adds	r0, #1
 80055ce:	d103      	bne.n	80055d8 <_printf_common+0xbc>
 80055d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055d8:	3501      	adds	r5, #1
 80055da:	e7c2      	b.n	8005562 <_printf_common+0x46>
 80055dc:	18e1      	adds	r1, r4, r3
 80055de:	1c5a      	adds	r2, r3, #1
 80055e0:	2030      	movs	r0, #48	; 0x30
 80055e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055e6:	4422      	add	r2, r4
 80055e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80055ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80055f0:	3302      	adds	r3, #2
 80055f2:	e7c4      	b.n	800557e <_printf_common+0x62>
 80055f4:	2301      	movs	r3, #1
 80055f6:	4622      	mov	r2, r4
 80055f8:	4639      	mov	r1, r7
 80055fa:	4630      	mov	r0, r6
 80055fc:	47c0      	blx	r8
 80055fe:	3001      	adds	r0, #1
 8005600:	d0e6      	beq.n	80055d0 <_printf_common+0xb4>
 8005602:	f109 0901 	add.w	r9, r9, #1
 8005606:	e7d7      	b.n	80055b8 <_printf_common+0x9c>

08005608 <_printf_i>:
 8005608:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800560c:	4617      	mov	r7, r2
 800560e:	7e0a      	ldrb	r2, [r1, #24]
 8005610:	b085      	sub	sp, #20
 8005612:	2a6e      	cmp	r2, #110	; 0x6e
 8005614:	4698      	mov	r8, r3
 8005616:	4606      	mov	r6, r0
 8005618:	460c      	mov	r4, r1
 800561a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800561c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8005620:	f000 80bc 	beq.w	800579c <_printf_i+0x194>
 8005624:	d81a      	bhi.n	800565c <_printf_i+0x54>
 8005626:	2a63      	cmp	r2, #99	; 0x63
 8005628:	d02e      	beq.n	8005688 <_printf_i+0x80>
 800562a:	d80a      	bhi.n	8005642 <_printf_i+0x3a>
 800562c:	2a00      	cmp	r2, #0
 800562e:	f000 80c8 	beq.w	80057c2 <_printf_i+0x1ba>
 8005632:	2a58      	cmp	r2, #88	; 0x58
 8005634:	f000 808a 	beq.w	800574c <_printf_i+0x144>
 8005638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800563c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8005640:	e02a      	b.n	8005698 <_printf_i+0x90>
 8005642:	2a64      	cmp	r2, #100	; 0x64
 8005644:	d001      	beq.n	800564a <_printf_i+0x42>
 8005646:	2a69      	cmp	r2, #105	; 0x69
 8005648:	d1f6      	bne.n	8005638 <_printf_i+0x30>
 800564a:	6821      	ldr	r1, [r4, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005652:	d023      	beq.n	800569c <_printf_i+0x94>
 8005654:	1d11      	adds	r1, r2, #4
 8005656:	6019      	str	r1, [r3, #0]
 8005658:	6813      	ldr	r3, [r2, #0]
 800565a:	e027      	b.n	80056ac <_printf_i+0xa4>
 800565c:	2a73      	cmp	r2, #115	; 0x73
 800565e:	f000 80b4 	beq.w	80057ca <_printf_i+0x1c2>
 8005662:	d808      	bhi.n	8005676 <_printf_i+0x6e>
 8005664:	2a6f      	cmp	r2, #111	; 0x6f
 8005666:	d02a      	beq.n	80056be <_printf_i+0xb6>
 8005668:	2a70      	cmp	r2, #112	; 0x70
 800566a:	d1e5      	bne.n	8005638 <_printf_i+0x30>
 800566c:	680a      	ldr	r2, [r1, #0]
 800566e:	f042 0220 	orr.w	r2, r2, #32
 8005672:	600a      	str	r2, [r1, #0]
 8005674:	e003      	b.n	800567e <_printf_i+0x76>
 8005676:	2a75      	cmp	r2, #117	; 0x75
 8005678:	d021      	beq.n	80056be <_printf_i+0xb6>
 800567a:	2a78      	cmp	r2, #120	; 0x78
 800567c:	d1dc      	bne.n	8005638 <_printf_i+0x30>
 800567e:	2278      	movs	r2, #120	; 0x78
 8005680:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8005684:	496e      	ldr	r1, [pc, #440]	; (8005840 <_printf_i+0x238>)
 8005686:	e064      	b.n	8005752 <_printf_i+0x14a>
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800568e:	1d11      	adds	r1, r2, #4
 8005690:	6019      	str	r1, [r3, #0]
 8005692:	6813      	ldr	r3, [r2, #0]
 8005694:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005698:	2301      	movs	r3, #1
 800569a:	e0a3      	b.n	80057e4 <_printf_i+0x1dc>
 800569c:	f011 0f40 	tst.w	r1, #64	; 0x40
 80056a0:	f102 0104 	add.w	r1, r2, #4
 80056a4:	6019      	str	r1, [r3, #0]
 80056a6:	d0d7      	beq.n	8005658 <_printf_i+0x50>
 80056a8:	f9b2 3000 	ldrsh.w	r3, [r2]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	da03      	bge.n	80056b8 <_printf_i+0xb0>
 80056b0:	222d      	movs	r2, #45	; 0x2d
 80056b2:	425b      	negs	r3, r3
 80056b4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80056b8:	4962      	ldr	r1, [pc, #392]	; (8005844 <_printf_i+0x23c>)
 80056ba:	220a      	movs	r2, #10
 80056bc:	e017      	b.n	80056ee <_printf_i+0xe6>
 80056be:	6820      	ldr	r0, [r4, #0]
 80056c0:	6819      	ldr	r1, [r3, #0]
 80056c2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80056c6:	d003      	beq.n	80056d0 <_printf_i+0xc8>
 80056c8:	1d08      	adds	r0, r1, #4
 80056ca:	6018      	str	r0, [r3, #0]
 80056cc:	680b      	ldr	r3, [r1, #0]
 80056ce:	e006      	b.n	80056de <_printf_i+0xd6>
 80056d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80056d4:	f101 0004 	add.w	r0, r1, #4
 80056d8:	6018      	str	r0, [r3, #0]
 80056da:	d0f7      	beq.n	80056cc <_printf_i+0xc4>
 80056dc:	880b      	ldrh	r3, [r1, #0]
 80056de:	4959      	ldr	r1, [pc, #356]	; (8005844 <_printf_i+0x23c>)
 80056e0:	2a6f      	cmp	r2, #111	; 0x6f
 80056e2:	bf14      	ite	ne
 80056e4:	220a      	movne	r2, #10
 80056e6:	2208      	moveq	r2, #8
 80056e8:	2000      	movs	r0, #0
 80056ea:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80056ee:	6865      	ldr	r5, [r4, #4]
 80056f0:	60a5      	str	r5, [r4, #8]
 80056f2:	2d00      	cmp	r5, #0
 80056f4:	f2c0 809c 	blt.w	8005830 <_printf_i+0x228>
 80056f8:	6820      	ldr	r0, [r4, #0]
 80056fa:	f020 0004 	bic.w	r0, r0, #4
 80056fe:	6020      	str	r0, [r4, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d13f      	bne.n	8005784 <_printf_i+0x17c>
 8005704:	2d00      	cmp	r5, #0
 8005706:	f040 8095 	bne.w	8005834 <_printf_i+0x22c>
 800570a:	4675      	mov	r5, lr
 800570c:	2a08      	cmp	r2, #8
 800570e:	d10b      	bne.n	8005728 <_printf_i+0x120>
 8005710:	6823      	ldr	r3, [r4, #0]
 8005712:	07da      	lsls	r2, r3, #31
 8005714:	d508      	bpl.n	8005728 <_printf_i+0x120>
 8005716:	6923      	ldr	r3, [r4, #16]
 8005718:	6862      	ldr	r2, [r4, #4]
 800571a:	429a      	cmp	r2, r3
 800571c:	bfde      	ittt	le
 800571e:	2330      	movle	r3, #48	; 0x30
 8005720:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005724:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005728:	ebae 0305 	sub.w	r3, lr, r5
 800572c:	6123      	str	r3, [r4, #16]
 800572e:	f8cd 8000 	str.w	r8, [sp]
 8005732:	463b      	mov	r3, r7
 8005734:	aa03      	add	r2, sp, #12
 8005736:	4621      	mov	r1, r4
 8005738:	4630      	mov	r0, r6
 800573a:	f7ff feef 	bl	800551c <_printf_common>
 800573e:	3001      	adds	r0, #1
 8005740:	d155      	bne.n	80057ee <_printf_i+0x1e6>
 8005742:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005746:	b005      	add	sp, #20
 8005748:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800574c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005750:	493c      	ldr	r1, [pc, #240]	; (8005844 <_printf_i+0x23c>)
 8005752:	6822      	ldr	r2, [r4, #0]
 8005754:	6818      	ldr	r0, [r3, #0]
 8005756:	f012 0f80 	tst.w	r2, #128	; 0x80
 800575a:	f100 0504 	add.w	r5, r0, #4
 800575e:	601d      	str	r5, [r3, #0]
 8005760:	d001      	beq.n	8005766 <_printf_i+0x15e>
 8005762:	6803      	ldr	r3, [r0, #0]
 8005764:	e002      	b.n	800576c <_printf_i+0x164>
 8005766:	0655      	lsls	r5, r2, #25
 8005768:	d5fb      	bpl.n	8005762 <_printf_i+0x15a>
 800576a:	8803      	ldrh	r3, [r0, #0]
 800576c:	07d0      	lsls	r0, r2, #31
 800576e:	bf44      	itt	mi
 8005770:	f042 0220 	orrmi.w	r2, r2, #32
 8005774:	6022      	strmi	r2, [r4, #0]
 8005776:	b91b      	cbnz	r3, 8005780 <_printf_i+0x178>
 8005778:	6822      	ldr	r2, [r4, #0]
 800577a:	f022 0220 	bic.w	r2, r2, #32
 800577e:	6022      	str	r2, [r4, #0]
 8005780:	2210      	movs	r2, #16
 8005782:	e7b1      	b.n	80056e8 <_printf_i+0xe0>
 8005784:	4675      	mov	r5, lr
 8005786:	fbb3 f0f2 	udiv	r0, r3, r2
 800578a:	fb02 3310 	mls	r3, r2, r0, r3
 800578e:	5ccb      	ldrb	r3, [r1, r3]
 8005790:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005794:	4603      	mov	r3, r0
 8005796:	2800      	cmp	r0, #0
 8005798:	d1f5      	bne.n	8005786 <_printf_i+0x17e>
 800579a:	e7b7      	b.n	800570c <_printf_i+0x104>
 800579c:	6808      	ldr	r0, [r1, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	6949      	ldr	r1, [r1, #20]
 80057a2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80057a6:	d004      	beq.n	80057b2 <_printf_i+0x1aa>
 80057a8:	1d10      	adds	r0, r2, #4
 80057aa:	6018      	str	r0, [r3, #0]
 80057ac:	6813      	ldr	r3, [r2, #0]
 80057ae:	6019      	str	r1, [r3, #0]
 80057b0:	e007      	b.n	80057c2 <_printf_i+0x1ba>
 80057b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80057b6:	f102 0004 	add.w	r0, r2, #4
 80057ba:	6018      	str	r0, [r3, #0]
 80057bc:	6813      	ldr	r3, [r2, #0]
 80057be:	d0f6      	beq.n	80057ae <_printf_i+0x1a6>
 80057c0:	8019      	strh	r1, [r3, #0]
 80057c2:	2300      	movs	r3, #0
 80057c4:	6123      	str	r3, [r4, #16]
 80057c6:	4675      	mov	r5, lr
 80057c8:	e7b1      	b.n	800572e <_printf_i+0x126>
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	1d11      	adds	r1, r2, #4
 80057ce:	6019      	str	r1, [r3, #0]
 80057d0:	6815      	ldr	r5, [r2, #0]
 80057d2:	6862      	ldr	r2, [r4, #4]
 80057d4:	2100      	movs	r1, #0
 80057d6:	4628      	mov	r0, r5
 80057d8:	f7fa fd02 	bl	80001e0 <memchr>
 80057dc:	b108      	cbz	r0, 80057e2 <_printf_i+0x1da>
 80057de:	1b40      	subs	r0, r0, r5
 80057e0:	6060      	str	r0, [r4, #4]
 80057e2:	6863      	ldr	r3, [r4, #4]
 80057e4:	6123      	str	r3, [r4, #16]
 80057e6:	2300      	movs	r3, #0
 80057e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057ec:	e79f      	b.n	800572e <_printf_i+0x126>
 80057ee:	6923      	ldr	r3, [r4, #16]
 80057f0:	462a      	mov	r2, r5
 80057f2:	4639      	mov	r1, r7
 80057f4:	4630      	mov	r0, r6
 80057f6:	47c0      	blx	r8
 80057f8:	3001      	adds	r0, #1
 80057fa:	d0a2      	beq.n	8005742 <_printf_i+0x13a>
 80057fc:	6823      	ldr	r3, [r4, #0]
 80057fe:	079b      	lsls	r3, r3, #30
 8005800:	d507      	bpl.n	8005812 <_printf_i+0x20a>
 8005802:	2500      	movs	r5, #0
 8005804:	f104 0919 	add.w	r9, r4, #25
 8005808:	68e3      	ldr	r3, [r4, #12]
 800580a:	9a03      	ldr	r2, [sp, #12]
 800580c:	1a9b      	subs	r3, r3, r2
 800580e:	429d      	cmp	r5, r3
 8005810:	db05      	blt.n	800581e <_printf_i+0x216>
 8005812:	68e0      	ldr	r0, [r4, #12]
 8005814:	9b03      	ldr	r3, [sp, #12]
 8005816:	4298      	cmp	r0, r3
 8005818:	bfb8      	it	lt
 800581a:	4618      	movlt	r0, r3
 800581c:	e793      	b.n	8005746 <_printf_i+0x13e>
 800581e:	2301      	movs	r3, #1
 8005820:	464a      	mov	r2, r9
 8005822:	4639      	mov	r1, r7
 8005824:	4630      	mov	r0, r6
 8005826:	47c0      	blx	r8
 8005828:	3001      	adds	r0, #1
 800582a:	d08a      	beq.n	8005742 <_printf_i+0x13a>
 800582c:	3501      	adds	r5, #1
 800582e:	e7eb      	b.n	8005808 <_printf_i+0x200>
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1a7      	bne.n	8005784 <_printf_i+0x17c>
 8005834:	780b      	ldrb	r3, [r1, #0]
 8005836:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800583a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800583e:	e765      	b.n	800570c <_printf_i+0x104>
 8005840:	080059c6 	.word	0x080059c6
 8005844:	080059b5 	.word	0x080059b5

08005848 <_read_r>:
 8005848:	b538      	push	{r3, r4, r5, lr}
 800584a:	4c07      	ldr	r4, [pc, #28]	; (8005868 <_read_r+0x20>)
 800584c:	4605      	mov	r5, r0
 800584e:	4608      	mov	r0, r1
 8005850:	4611      	mov	r1, r2
 8005852:	2200      	movs	r2, #0
 8005854:	6022      	str	r2, [r4, #0]
 8005856:	461a      	mov	r2, r3
 8005858:	f7fe fbc6 	bl	8003fe8 <_read>
 800585c:	1c43      	adds	r3, r0, #1
 800585e:	d102      	bne.n	8005866 <_read_r+0x1e>
 8005860:	6823      	ldr	r3, [r4, #0]
 8005862:	b103      	cbz	r3, 8005866 <_read_r+0x1e>
 8005864:	602b      	str	r3, [r5, #0]
 8005866:	bd38      	pop	{r3, r4, r5, pc}
 8005868:	20000708 	.word	0x20000708

0800586c <_fstat_r>:
 800586c:	b538      	push	{r3, r4, r5, lr}
 800586e:	4c07      	ldr	r4, [pc, #28]	; (800588c <_fstat_r+0x20>)
 8005870:	2300      	movs	r3, #0
 8005872:	4605      	mov	r5, r0
 8005874:	4608      	mov	r0, r1
 8005876:	4611      	mov	r1, r2
 8005878:	6023      	str	r3, [r4, #0]
 800587a:	f7fe fbee 	bl	800405a <_fstat>
 800587e:	1c43      	adds	r3, r0, #1
 8005880:	d102      	bne.n	8005888 <_fstat_r+0x1c>
 8005882:	6823      	ldr	r3, [r4, #0]
 8005884:	b103      	cbz	r3, 8005888 <_fstat_r+0x1c>
 8005886:	602b      	str	r3, [r5, #0]
 8005888:	bd38      	pop	{r3, r4, r5, pc}
 800588a:	bf00      	nop
 800588c:	20000708 	.word	0x20000708

08005890 <_isatty_r>:
 8005890:	b538      	push	{r3, r4, r5, lr}
 8005892:	4c06      	ldr	r4, [pc, #24]	; (80058ac <_isatty_r+0x1c>)
 8005894:	2300      	movs	r3, #0
 8005896:	4605      	mov	r5, r0
 8005898:	4608      	mov	r0, r1
 800589a:	6023      	str	r3, [r4, #0]
 800589c:	f7fe fbe2 	bl	8004064 <_isatty>
 80058a0:	1c43      	adds	r3, r0, #1
 80058a2:	d102      	bne.n	80058aa <_isatty_r+0x1a>
 80058a4:	6823      	ldr	r3, [r4, #0]
 80058a6:	b103      	cbz	r3, 80058aa <_isatty_r+0x1a>
 80058a8:	602b      	str	r3, [r5, #0]
 80058aa:	bd38      	pop	{r3, r4, r5, pc}
 80058ac:	20000708 	.word	0x20000708

080058b0 <_init>:
 80058b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058b2:	bf00      	nop
 80058b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058b6:	bc08      	pop	{r3}
 80058b8:	469e      	mov	lr, r3
 80058ba:	4770      	bx	lr

080058bc <_fini>:
 80058bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058be:	bf00      	nop
 80058c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058c2:	bc08      	pop	{r3}
 80058c4:	469e      	mov	lr, r3
 80058c6:	4770      	bx	lr
>>>>>>> Stashed changes
