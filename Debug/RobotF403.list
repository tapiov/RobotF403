
RobotF403.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9cc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  0800ab70  0800ab70  0001ab70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800aee8  0800aee8  0001aee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800aef0  0800aef0  0001aef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800aef4  0800aef4  0001aef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000370  20000000  0800aef8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000011ec  20000370  0800b268  00020370  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000155c  0800b268  0002155c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020370  2**0
                  CONTENTS, READONLY
 10 .debug_info   00047d2c  00000000  00000000  000203a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006999  00000000  00000000  000680cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0001786e  00000000  00000000  0006ea65  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001ae8  00000000  00000000  000862d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002208  00000000  00000000  00087dc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000e90e  00000000  00000000  00089fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000c6cb  00000000  00000000  000988d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000a4fa1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005cd8  00000000  00000000  000a5020  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000370 	.word	0x20000370
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ab54 	.word	0x0800ab54

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000374 	.word	0x20000374
 80001dc:	0800ab54 	.word	0x0800ab54

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f092 0f00 	teq	r2, #0
 800057a:	bf14      	ite	ne
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e720      	b.n	80003d4 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aedc 	beq.w	8000382 <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6c1      	b.n	8000382 <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_uldivmod>:
 8000bb0:	b953      	cbnz	r3, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb2:	b94a      	cbnz	r2, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	bf08      	it	eq
 8000bb8:	2800      	cmpeq	r0, #0
 8000bba:	bf1c      	itt	ne
 8000bbc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bc4:	f000 b97a 	b.w	8000ebc <__aeabi_idiv0>
 8000bc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd0:	f000 f806 	bl	8000be0 <__udivmoddi4>
 8000bd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bdc:	b004      	add	sp, #16
 8000bde:	4770      	bx	lr

08000be0 <__udivmoddi4>:
 8000be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be4:	468c      	mov	ip, r1
 8000be6:	460d      	mov	r5, r1
 8000be8:	4604      	mov	r4, r0
 8000bea:	9e08      	ldr	r6, [sp, #32]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d151      	bne.n	8000c94 <__udivmoddi4+0xb4>
 8000bf0:	428a      	cmp	r2, r1
 8000bf2:	4617      	mov	r7, r2
 8000bf4:	d96d      	bls.n	8000cd2 <__udivmoddi4+0xf2>
 8000bf6:	fab2 fe82 	clz	lr, r2
 8000bfa:	f1be 0f00 	cmp.w	lr, #0
 8000bfe:	d00b      	beq.n	8000c18 <__udivmoddi4+0x38>
 8000c00:	f1ce 0c20 	rsb	ip, lr, #32
 8000c04:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c08:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c0c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c10:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c14:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c18:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c1c:	0c25      	lsrs	r5, r4, #16
 8000c1e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c22:	fa1f f987 	uxth.w	r9, r7
 8000c26:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c2a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c2e:	fb08 f309 	mul.w	r3, r8, r9
 8000c32:	42ab      	cmp	r3, r5
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x6c>
 8000c36:	19ed      	adds	r5, r5, r7
 8000c38:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000c3c:	f080 8123 	bcs.w	8000e86 <__udivmoddi4+0x2a6>
 8000c40:	42ab      	cmp	r3, r5
 8000c42:	f240 8120 	bls.w	8000e86 <__udivmoddi4+0x2a6>
 8000c46:	f1a8 0802 	sub.w	r8, r8, #2
 8000c4a:	443d      	add	r5, r7
 8000c4c:	1aed      	subs	r5, r5, r3
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c54:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c5c:	fb00 f909 	mul.w	r9, r0, r9
 8000c60:	45a1      	cmp	r9, r4
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x98>
 8000c64:	19e4      	adds	r4, r4, r7
 8000c66:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c6a:	f080 810a 	bcs.w	8000e82 <__udivmoddi4+0x2a2>
 8000c6e:	45a1      	cmp	r9, r4
 8000c70:	f240 8107 	bls.w	8000e82 <__udivmoddi4+0x2a2>
 8000c74:	3802      	subs	r0, #2
 8000c76:	443c      	add	r4, r7
 8000c78:	eba4 0409 	sub.w	r4, r4, r9
 8000c7c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c80:	2100      	movs	r1, #0
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d061      	beq.n	8000d4a <__udivmoddi4+0x16a>
 8000c86:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	6034      	str	r4, [r6, #0]
 8000c8e:	6073      	str	r3, [r6, #4]
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	428b      	cmp	r3, r1
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0xc8>
 8000c98:	2e00      	cmp	r6, #0
 8000c9a:	d054      	beq.n	8000d46 <__udivmoddi4+0x166>
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca8:	fab3 f183 	clz	r1, r3
 8000cac:	2900      	cmp	r1, #0
 8000cae:	f040 808e 	bne.w	8000dce <__udivmoddi4+0x1ee>
 8000cb2:	42ab      	cmp	r3, r5
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xdc>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80fa 	bhi.w	8000eb0 <__udivmoddi4+0x2d0>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb65 0503 	sbc.w	r5, r5, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	46ac      	mov	ip, r5
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d03f      	beq.n	8000d4a <__udivmoddi4+0x16a>
 8000cca:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	b912      	cbnz	r2, 8000cda <__udivmoddi4+0xfa>
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cda:	fab7 fe87 	clz	lr, r7
 8000cde:	f1be 0f00 	cmp.w	lr, #0
 8000ce2:	d134      	bne.n	8000d4e <__udivmoddi4+0x16e>
 8000ce4:	1beb      	subs	r3, r5, r7
 8000ce6:	0c3a      	lsrs	r2, r7, #16
 8000ce8:	fa1f fc87 	uxth.w	ip, r7
 8000cec:	2101      	movs	r1, #1
 8000cee:	fbb3 f8f2 	udiv	r8, r3, r2
 8000cf2:	0c25      	lsrs	r5, r4, #16
 8000cf4:	fb02 3318 	mls	r3, r2, r8, r3
 8000cf8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cfc:	fb0c f308 	mul.w	r3, ip, r8
 8000d00:	42ab      	cmp	r3, r5
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x134>
 8000d04:	19ed      	adds	r5, r5, r7
 8000d06:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x132>
 8000d0c:	42ab      	cmp	r3, r5
 8000d0e:	f200 80d1 	bhi.w	8000eb4 <__udivmoddi4+0x2d4>
 8000d12:	4680      	mov	r8, r0
 8000d14:	1aed      	subs	r5, r5, r3
 8000d16:	b2a3      	uxth	r3, r4
 8000d18:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d1c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d20:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d24:	fb0c fc00 	mul.w	ip, ip, r0
 8000d28:	45a4      	cmp	ip, r4
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x15c>
 8000d2c:	19e4      	adds	r4, r4, r7
 8000d2e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x15a>
 8000d34:	45a4      	cmp	ip, r4
 8000d36:	f200 80b8 	bhi.w	8000eaa <__udivmoddi4+0x2ca>
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	eba4 040c 	sub.w	r4, r4, ip
 8000d40:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d44:	e79d      	b.n	8000c82 <__udivmoddi4+0xa2>
 8000d46:	4631      	mov	r1, r6
 8000d48:	4630      	mov	r0, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	f1ce 0420 	rsb	r4, lr, #32
 8000d52:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d56:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d5a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d5e:	0c3a      	lsrs	r2, r7, #16
 8000d60:	fa25 f404 	lsr.w	r4, r5, r4
 8000d64:	ea48 0803 	orr.w	r8, r8, r3
 8000d68:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d6c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d70:	fb02 4411 	mls	r4, r2, r1, r4
 8000d74:	fa1f fc87 	uxth.w	ip, r7
 8000d78:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d7c:	fb01 f30c 	mul.w	r3, r1, ip
 8000d80:	42ab      	cmp	r3, r5
 8000d82:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d86:	d909      	bls.n	8000d9c <__udivmoddi4+0x1bc>
 8000d88:	19ed      	adds	r5, r5, r7
 8000d8a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000d8e:	f080 808a 	bcs.w	8000ea6 <__udivmoddi4+0x2c6>
 8000d92:	42ab      	cmp	r3, r5
 8000d94:	f240 8087 	bls.w	8000ea6 <__udivmoddi4+0x2c6>
 8000d98:	3902      	subs	r1, #2
 8000d9a:	443d      	add	r5, r7
 8000d9c:	1aeb      	subs	r3, r5, r3
 8000d9e:	fa1f f588 	uxth.w	r5, r8
 8000da2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000da6:	fb02 3310 	mls	r3, r2, r0, r3
 8000daa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dae:	fb00 f30c 	mul.w	r3, r0, ip
 8000db2:	42ab      	cmp	r3, r5
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x1e6>
 8000db6:	19ed      	adds	r5, r5, r7
 8000db8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dbc:	d26f      	bcs.n	8000e9e <__udivmoddi4+0x2be>
 8000dbe:	42ab      	cmp	r3, r5
 8000dc0:	d96d      	bls.n	8000e9e <__udivmoddi4+0x2be>
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	443d      	add	r5, r7
 8000dc6:	1aeb      	subs	r3, r5, r3
 8000dc8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dcc:	e78f      	b.n	8000cee <__udivmoddi4+0x10e>
 8000dce:	f1c1 0720 	rsb	r7, r1, #32
 8000dd2:	fa22 f807 	lsr.w	r8, r2, r7
 8000dd6:	408b      	lsls	r3, r1
 8000dd8:	fa05 f401 	lsl.w	r4, r5, r1
 8000ddc:	ea48 0303 	orr.w	r3, r8, r3
 8000de0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000de4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000de8:	40fd      	lsrs	r5, r7
 8000dea:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dee:	fbb5 f9fc 	udiv	r9, r5, ip
 8000df2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000df6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000dfa:	fa1f f883 	uxth.w	r8, r3
 8000dfe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e02:	fb09 f408 	mul.w	r4, r9, r8
 8000e06:	42ac      	cmp	r4, r5
 8000e08:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x244>
 8000e12:	18ed      	adds	r5, r5, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e18:	d243      	bcs.n	8000ea2 <__udivmoddi4+0x2c2>
 8000e1a:	42ac      	cmp	r4, r5
 8000e1c:	d941      	bls.n	8000ea2 <__udivmoddi4+0x2c2>
 8000e1e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e22:	441d      	add	r5, r3
 8000e24:	1b2d      	subs	r5, r5, r4
 8000e26:	fa1f fe8e 	uxth.w	lr, lr
 8000e2a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e2e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e32:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e36:	fb00 f808 	mul.w	r8, r0, r8
 8000e3a:	45a0      	cmp	r8, r4
 8000e3c:	d907      	bls.n	8000e4e <__udivmoddi4+0x26e>
 8000e3e:	18e4      	adds	r4, r4, r3
 8000e40:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000e44:	d229      	bcs.n	8000e9a <__udivmoddi4+0x2ba>
 8000e46:	45a0      	cmp	r8, r4
 8000e48:	d927      	bls.n	8000e9a <__udivmoddi4+0x2ba>
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	441c      	add	r4, r3
 8000e4e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e52:	eba4 0408 	sub.w	r4, r4, r8
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	454c      	cmp	r4, r9
 8000e5c:	46c6      	mov	lr, r8
 8000e5e:	464d      	mov	r5, r9
 8000e60:	d315      	bcc.n	8000e8e <__udivmoddi4+0x2ae>
 8000e62:	d012      	beq.n	8000e8a <__udivmoddi4+0x2aa>
 8000e64:	b156      	cbz	r6, 8000e7c <__udivmoddi4+0x29c>
 8000e66:	ebba 030e 	subs.w	r3, sl, lr
 8000e6a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e72:	40cb      	lsrs	r3, r1
 8000e74:	431f      	orrs	r7, r3
 8000e76:	40cc      	lsrs	r4, r1
 8000e78:	6037      	str	r7, [r6, #0]
 8000e7a:	6074      	str	r4, [r6, #4]
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	4618      	mov	r0, r3
 8000e84:	e6f8      	b.n	8000c78 <__udivmoddi4+0x98>
 8000e86:	4690      	mov	r8, r2
 8000e88:	e6e0      	b.n	8000c4c <__udivmoddi4+0x6c>
 8000e8a:	45c2      	cmp	sl, r8
 8000e8c:	d2ea      	bcs.n	8000e64 <__udivmoddi4+0x284>
 8000e8e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e92:	eb69 0503 	sbc.w	r5, r9, r3
 8000e96:	3801      	subs	r0, #1
 8000e98:	e7e4      	b.n	8000e64 <__udivmoddi4+0x284>
 8000e9a:	4628      	mov	r0, r5
 8000e9c:	e7d7      	b.n	8000e4e <__udivmoddi4+0x26e>
 8000e9e:	4640      	mov	r0, r8
 8000ea0:	e791      	b.n	8000dc6 <__udivmoddi4+0x1e6>
 8000ea2:	4681      	mov	r9, r0
 8000ea4:	e7be      	b.n	8000e24 <__udivmoddi4+0x244>
 8000ea6:	4601      	mov	r1, r0
 8000ea8:	e778      	b.n	8000d9c <__udivmoddi4+0x1bc>
 8000eaa:	3802      	subs	r0, #2
 8000eac:	443c      	add	r4, r7
 8000eae:	e745      	b.n	8000d3c <__udivmoddi4+0x15c>
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	e708      	b.n	8000cc6 <__udivmoddi4+0xe6>
 8000eb4:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb8:	443d      	add	r5, r7
 8000eba:	e72b      	b.n	8000d14 <__udivmoddi4+0x134>

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <L6206_AttachErrorHandler>:
* to the error Hanlder
* @retval None
**********************************************************/
void L6206_AttachErrorHandler(void (*callback)(uint16_t))
{
	errorHandlerCallback = (void (*)(uint16_t))callback;
 8000ec0:	4b01      	ldr	r3, [pc, #4]	; (8000ec8 <L6206_AttachErrorHandler+0x8>)
 8000ec2:	6018      	str	r0, [r3, #0]
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	20000440 	.word	0x20000440

08000ecc <L6206_AttachFlagInterrupt>:
* to the Flag Interrupt
* @retval None
**********************************************************/
void L6206_AttachFlagInterrupt(void (*callback)(void))
{
	flagInterruptCallback = (void (*)())callback;
 8000ecc:	4b01      	ldr	r3, [pc, #4]	; (8000ed4 <L6206_AttachFlagInterrupt+0x8>)
 8000ece:	6018      	str	r0, [r3, #0]
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	20000444 	.word	0x20000444

08000ed8 <L6206_GetBridgeInputPwmFreq>:
* @param[in] bridgeId 0 for bridge A, 1 for bridge B
* @retval Freq in Hz
**********************************************************/
uint32_t L6206_GetBridgeInputPwmFreq(uint8_t bridgeId)
{
	return(devicePrm.pwmFreq[(bridgeId << 1)]);
 8000ed8:	4b02      	ldr	r3, [pc, #8]	; (8000ee4 <L6206_GetBridgeInputPwmFreq+0xc>)
 8000eda:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
}
 8000ede:	6840      	ldr	r0, [r0, #4]
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	20000418 	.word	0x20000418

08000ee8 <L6206_GetFwVersion>:
* @retval L6206_FW_VERSION
**********************************************************/
uint32_t L6206_GetFwVersion(void)
{
	return(L6206_FW_VERSION);
}
 8000ee8:	2000      	movs	r0, #0
 8000eea:	4770      	bx	lr

08000eec <L6206_ReadId>:
* @retval Id of the l6206 Driver Instance
**********************************************************/
uint16_t L6206_ReadId(void)
{
	return(l6206DriverInstance);
}
 8000eec:	4b01      	ldr	r3, [pc, #4]	; (8000ef4 <L6206_ReadId+0x8>)
 8000eee:	8818      	ldrh	r0, [r3, #0]
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	2000038c 	.word	0x2000038c

08000ef8 <L6206_SetNbDevices>:
	if (nbDevices <= MAX_NUMBER_OF_DEVICES) {
		return TRUE;
	}else  {
		return FALSE;
	}
}
 8000ef8:	2801      	cmp	r0, #1
 8000efa:	bf8c      	ite	hi
 8000efc:	2000      	movhi	r0, #0
 8000efe:	2001      	movls	r0, #1
 8000f00:	4770      	bx	lr
	...

08000f04 <L6206_ErrorHandler>:
* @param[in] error Number of the error
* @retval None
**********************************************************/
void L6206_ErrorHandler(uint16_t error)
{
	if (errorHandlerCallback != 0) {
 8000f04:	4b02      	ldr	r3, [pc, #8]	; (8000f10 <L6206_ErrorHandler+0xc>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	b103      	cbz	r3, 8000f0c <L6206_ErrorHandler+0x8>
		(void)errorHandlerCallback(error);
 8000f0a:	4718      	bx	r3
 8000f0c:	e7fe      	b.n	8000f0c <L6206_ErrorHandler+0x8>
 8000f0e:	bf00      	nop
 8000f10:	20000440 	.word	0x20000440

08000f14 <L6206_GetCurrentSpeed>:
{
 8000f14:	b508      	push	{r3, lr}
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 8000f16:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <L6206_GetCurrentSpeed+0x2c>)
 8000f18:	490a      	ldr	r1, [pc, #40]	; (8000f44 <L6206_GetCurrentSpeed+0x30>)
 8000f1a:	781a      	ldrb	r2, [r3, #0]
 8000f1c:	5c8a      	ldrb	r2, [r1, r2]
 8000f1e:	4282      	cmp	r2, r0
 8000f20:	d205      	bcs.n	8000f2e <L6206_GetCurrentSpeed+0x1a>
		L6206_ErrorHandler(L6206_ERROR_1);
 8000f22:	f248 0001 	movw	r0, #32769	; 0x8001
 8000f26:	f7ff ffed 	bl	8000f04 <L6206_ErrorHandler>
	uint16_t speed = 0;
 8000f2a:	2000      	movs	r0, #0
}
 8000f2c:	bd08      	pop	{r3, pc}
	}else if (devicePrm.motionState[motorId] != INACTIVE) {
 8000f2e:	181a      	adds	r2, r3, r0
 8000f30:	f892 2020 	ldrb.w	r2, [r2, #32]
 8000f34:	2a08      	cmp	r2, #8
 8000f36:	d0f8      	beq.n	8000f2a <L6206_GetCurrentSpeed+0x16>
		speed = devicePrm.speed[motorId];
 8000f38:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8000f3c:	8a98      	ldrh	r0, [r3, #20]
 8000f3e:	bd08      	pop	{r3, pc}
 8000f40:	20000418 	.word	0x20000418
 8000f44:	0800ab98 	.word	0x0800ab98

08000f48 <L6206_GetDeviceState>:
{
 8000f48:	b508      	push	{r3, lr}
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 8000f4a:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <L6206_GetDeviceState+0x24>)
 8000f4c:	4908      	ldr	r1, [pc, #32]	; (8000f70 <L6206_GetDeviceState+0x28>)
 8000f4e:	781a      	ldrb	r2, [r3, #0]
 8000f50:	5c8a      	ldrb	r2, [r1, r2]
 8000f52:	4282      	cmp	r2, r0
 8000f54:	d205      	bcs.n	8000f62 <L6206_GetDeviceState+0x1a>
		L6206_ErrorHandler(L6206_ERROR_1);
 8000f56:	f248 0001 	movw	r0, #32769	; 0x8001
 8000f5a:	f7ff ffd3 	bl	8000f04 <L6206_ErrorHandler>
	motorState_t state = INACTIVE;
 8000f5e:	2008      	movs	r0, #8
 8000f60:	bd08      	pop	{r3, pc}
		state = devicePrm.motionState[motorId];
 8000f62:	4403      	add	r3, r0
 8000f64:	f893 0020 	ldrb.w	r0, [r3, #32]
}
 8000f68:	bd08      	pop	{r3, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000418 	.word	0x20000418
 8000f70:	0800ab98 	.word	0x0800ab98

08000f74 <L6206_GetMaxSpeed>:
{
 8000f74:	b508      	push	{r3, lr}
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 8000f76:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <L6206_GetMaxSpeed+0x24>)
 8000f78:	4908      	ldr	r1, [pc, #32]	; (8000f9c <L6206_GetMaxSpeed+0x28>)
 8000f7a:	781a      	ldrb	r2, [r3, #0]
 8000f7c:	5c8a      	ldrb	r2, [r1, r2]
 8000f7e:	4282      	cmp	r2, r0
 8000f80:	d205      	bcs.n	8000f8e <L6206_GetMaxSpeed+0x1a>
		L6206_ErrorHandler(L6206_ERROR_1);
 8000f82:	f248 0001 	movw	r0, #32769	; 0x8001
 8000f86:	f7ff ffbd 	bl	8000f04 <L6206_ErrorHandler>
	uint16_t speed = 0;
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	bd08      	pop	{r3, pc}
		speed = devicePrm.speed[motorId];
 8000f8e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8000f92:	8a98      	ldrh	r0, [r3, #20]
}
 8000f94:	bd08      	pop	{r3, pc}
 8000f96:	bf00      	nop
 8000f98:	20000418 	.word	0x20000418
 8000f9c:	0800ab98 	.word	0x0800ab98

08000fa0 <L6206_GetBridgeStatus>:
{
 8000fa0:	b508      	push	{r3, lr}
	uint16_t status = L6206_Board_GetFlagPinState(bridgeId);
 8000fa2:	f003 f817 	bl	8003fd4 <L6206_Board_GetFlagPinState>
}
 8000fa6:	b280      	uxth	r0, r0
 8000fa8:	bd08      	pop	{r3, pc}
	...

08000fac <L6206_FlagInterruptHandler>:
/******************************************************//**
* @brief  Handlers of the flag interrupt which calls the user callback (if defined)
* @retval None
**********************************************************/
void L6206_FlagInterruptHandler(void)
{
 8000fac:	b510      	push	{r4, lr}
	uint16_t status = L6206_Board_GetFlagPinState(bridgeId);
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f003 f810 	bl	8003fd4 <L6206_Board_GetFlagPinState>
	bool status;

	status = L6206_GetBridgeStatus(BRIDGE_A);
	if (status != devicePrm.bridgeEnabled[BRIDGE_A]) {
 8000fb4:	4c0c      	ldr	r4, [pc, #48]	; (8000fe8 <L6206_FlagInterruptHandler+0x3c>)
 8000fb6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	status = L6206_GetBridgeStatus(BRIDGE_A);
 8000fba:	b2c0      	uxtb	r0, r0
	if (status != devicePrm.bridgeEnabled[BRIDGE_A]) {
 8000fbc:	4283      	cmp	r3, r0
		devicePrm.bridgeEnabled[BRIDGE_A] = status;
 8000fbe:	bf18      	it	ne
 8000fc0:	f884 0024 	strbne.w	r0, [r4, #36]	; 0x24
	uint16_t status = L6206_Board_GetFlagPinState(bridgeId);
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	f003 f805 	bl	8003fd4 <L6206_Board_GetFlagPinState>
	}

	status = L6206_GetBridgeStatus(BRIDGE_B);
	if (status != devicePrm.bridgeEnabled[BRIDGE_B]) {
 8000fca:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
	status = L6206_GetBridgeStatus(BRIDGE_B);
 8000fce:	b2c0      	uxtb	r0, r0
	if (status != devicePrm.bridgeEnabled[BRIDGE_B]) {
 8000fd0:	4283      	cmp	r3, r0
		devicePrm.bridgeEnabled[BRIDGE_B] = status;
	}

	if (flagInterruptCallback != 0) {
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <L6206_FlagInterruptHandler+0x40>)
		devicePrm.bridgeEnabled[BRIDGE_B] = status;
 8000fd4:	bf18      	it	ne
 8000fd6:	f884 0025 	strbne.w	r0, [r4, #37]	; 0x25
	if (flagInterruptCallback != 0) {
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	b113      	cbz	r3, 8000fe4 <L6206_FlagInterruptHandler+0x38>
		flagInterruptCallback();
	}
}
 8000fde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flagInterruptCallback();
 8000fe2:	4718      	bx	r3
 8000fe4:	bd10      	pop	{r4, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000418 	.word	0x20000418
 8000fec:	20000444 	.word	0x20000444

08000ff0 <L6206_SetDualFullBridgeConfig>:
{
 8000ff0:	b510      	push	{r4, lr}
	devicePrm.config = (dualFullBridgeConfig_t)newConfig;
 8000ff2:	4c2b      	ldr	r4, [pc, #172]	; (80010a0 <L6206_SetDualFullBridgeConfig+0xb0>)
 8000ff4:	7020      	strb	r0, [r4, #0]
	L6206_Board_PwmDeInit(INPUT_1A);
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	f003 f858 	bl	80040ac <L6206_Board_PwmDeInit>
	L6206_Board_PwmDeInit(INPUT_2A);
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f003 f855 	bl	80040ac <L6206_Board_PwmDeInit>
	L6206_Board_PwmDeInit(INPUT_1B);
 8001002:	2002      	movs	r0, #2
 8001004:	f003 f852 	bl	80040ac <L6206_Board_PwmDeInit>
	L6206_Board_PwmDeInit(INPUT_2B);
 8001008:	2003      	movs	r0, #3
 800100a:	f003 f84f 	bl	80040ac <L6206_Board_PwmDeInit>
	switch (devicePrm.config) {
 800100e:	7823      	ldrb	r3, [r4, #0]
 8001010:	2b0c      	cmp	r3, #12
 8001012:	d844      	bhi.n	800109e <L6206_SetDualFullBridgeConfig+0xae>
 8001014:	e8df f003 	tbb	[pc, r3]
 8001018:	07070707 	.word	0x07070707
 800101c:	1a1a1515 	.word	0x1a1a1515
 8001020:	2d2d2525 	.word	0x2d2d2525
 8001024:	38          	.byte	0x38
 8001025:	00          	.byte	0x00
		L6206_Board_PwmInit(INPUT_1A);
 8001026:	2000      	movs	r0, #0
 8001028:	f003 f864 	bl	80040f4 <L6206_Board_PwmInit>
		L6206_Board_PwmInit(INPUT_2A);
 800102c:	2001      	movs	r0, #1
		L6206_Board_PwmInit(INPUT_1A);
 800102e:	f003 f861 	bl	80040f4 <L6206_Board_PwmInit>
		L6206_Board_PwmInit(INPUT_1B);
 8001032:	2002      	movs	r0, #2
 8001034:	f003 f85e 	bl	80040f4 <L6206_Board_PwmInit>
		L6206_Board_PwmInit(INPUT_2B);
 8001038:	2003      	movs	r0, #3
}
 800103a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		L6206_Board_PwmInit(INPUT_1A);
 800103e:	f003 b859 	b.w	80040f4 <L6206_Board_PwmInit>
		L6206_Board_PwmDeInit(INPUT_2A);
 8001042:	2001      	movs	r0, #1
 8001044:	f003 f832 	bl	80040ac <L6206_Board_PwmDeInit>
		L6206_Board_PwmInit(INPUT_1A);
 8001048:	2000      	movs	r0, #0
 800104a:	e7f0      	b.n	800102e <L6206_SetDualFullBridgeConfig+0x3e>
		L6206_Board_PwmDeInit(INPUT_2B);
 800104c:	2003      	movs	r0, #3
 800104e:	f003 f82d 	bl	80040ac <L6206_Board_PwmDeInit>
		L6206_Board_PwmInit(INPUT_1A);
 8001052:	2000      	movs	r0, #0
 8001054:	f003 f84e 	bl	80040f4 <L6206_Board_PwmInit>
		L6206_Board_PwmInit(INPUT_2A);
 8001058:	2001      	movs	r0, #1
		L6206_Board_PwmInit(INPUT_1A);
 800105a:	f003 f84b 	bl	80040f4 <L6206_Board_PwmInit>
		L6206_Board_PwmInit(INPUT_1B);
 800105e:	2002      	movs	r0, #2
 8001060:	e7eb      	b.n	800103a <L6206_SetDualFullBridgeConfig+0x4a>
		L6206_Board_PwmDeInit(INPUT_2A);
 8001062:	2001      	movs	r0, #1
 8001064:	f003 f822 	bl	80040ac <L6206_Board_PwmDeInit>
		L6206_Board_PwmDeInit(INPUT_2B);
 8001068:	2003      	movs	r0, #3
 800106a:	f003 f81f 	bl	80040ac <L6206_Board_PwmDeInit>
		L6206_Board_PwmInit(INPUT_1A);
 800106e:	2000      	movs	r0, #0
 8001070:	e7f3      	b.n	800105a <L6206_SetDualFullBridgeConfig+0x6a>
		L6206_Board_PwmDeInit(INPUT_1B);
 8001072:	2002      	movs	r0, #2
 8001074:	f003 f81a 	bl	80040ac <L6206_Board_PwmDeInit>
		L6206_Board_PwmDeInit(INPUT_2B);
 8001078:	2003      	movs	r0, #3
 800107a:	f003 f817 	bl	80040ac <L6206_Board_PwmDeInit>
		L6206_Board_PwmInit(INPUT_1A);
 800107e:	2000      	movs	r0, #0
 8001080:	f003 f838 	bl	80040f4 <L6206_Board_PwmInit>
		L6206_Board_PwmInit(INPUT_2A);
 8001084:	2001      	movs	r0, #1
 8001086:	e7d8      	b.n	800103a <L6206_SetDualFullBridgeConfig+0x4a>
		L6206_Board_PwmDeInit(INPUT_2A);
 8001088:	2001      	movs	r0, #1
 800108a:	f003 f80f 	bl	80040ac <L6206_Board_PwmDeInit>
		L6206_Board_PwmDeInit(INPUT_1B);
 800108e:	2002      	movs	r0, #2
 8001090:	f003 f80c 	bl	80040ac <L6206_Board_PwmDeInit>
		L6206_Board_PwmDeInit(INPUT_2B);
 8001094:	2003      	movs	r0, #3
 8001096:	f003 f809 	bl	80040ac <L6206_Board_PwmDeInit>
		L6206_Board_PwmInit(INPUT_1A);
 800109a:	2000      	movs	r0, #0
 800109c:	e7cd      	b.n	800103a <L6206_SetDualFullBridgeConfig+0x4a>
 800109e:	bd10      	pop	{r4, pc}
 80010a0:	20000418 	.word	0x20000418

080010a4 <L6206_DisableBridge>:
{
 80010a4:	b570      	push	{r4, r5, r6, lr}
	devicePrm.bridgeEnabled[bridgeId] = FALSE;
 80010a6:	4c0c      	ldr	r4, [pc, #48]	; (80010d8 <L6206_DisableBridge+0x34>)
{
 80010a8:	4606      	mov	r6, r0
	L6206_Board_DisableBridge(bridgeId);
 80010aa:	f002 ff37 	bl	8003f1c <L6206_Board_DisableBridge>
	devicePrm.bridgeEnabled[bridgeId] = FALSE;
 80010ae:	19a3      	adds	r3, r4, r6
 80010b0:	2500      	movs	r5, #0
 80010b2:	f883 5024 	strb.w	r5, [r3, #36]	; 0x24
	if (devicePrm.config >= PARALLELING_IN1A_IN2A__IN1B_IN2B__1_BIDIR_MOTOR) {
 80010b6:	7823      	ldrb	r3, [r4, #0]
 80010b8:	2b08      	cmp	r3, #8
 80010ba:	d90b      	bls.n	80010d4 <L6206_DisableBridge+0x30>
		if (bridgeId == BRIDGE_A) {
 80010bc:	b92e      	cbnz	r6, 80010ca <L6206_DisableBridge+0x26>
			L6206_Board_DisableBridge(BRIDGE_B);
 80010be:	2001      	movs	r0, #1
 80010c0:	f002 ff2c 	bl	8003f1c <L6206_Board_DisableBridge>
			devicePrm.bridgeEnabled[BRIDGE_B] = FALSE;
 80010c4:	f884 6025 	strb.w	r6, [r4, #37]	; 0x25
 80010c8:	bd70      	pop	{r4, r5, r6, pc}
			L6206_Board_DisableBridge(BRIDGE_A);
 80010ca:	4628      	mov	r0, r5
 80010cc:	f002 ff26 	bl	8003f1c <L6206_Board_DisableBridge>
			devicePrm.bridgeEnabled[BRIDGE_A] = FALSE;
 80010d0:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
 80010d4:	bd70      	pop	{r4, r5, r6, pc}
 80010d6:	bf00      	nop
 80010d8:	20000418 	.word	0x20000418

080010dc <L6206_EnableBridge>:
{
 80010dc:	b570      	push	{r4, r5, r6, lr}
	devicePrm.bridgeEnabled[bridgeId] = TRUE;
 80010de:	4d0f      	ldr	r5, [pc, #60]	; (800111c <L6206_EnableBridge+0x40>)
 80010e0:	182b      	adds	r3, r5, r0
 80010e2:	2401      	movs	r4, #1
 80010e4:	f883 4024 	strb.w	r4, [r3, #36]	; 0x24
	if (devicePrm.config >= PARALLELING_IN1A_IN2A__IN1B_IN2B__1_BIDIR_MOTOR) {
 80010e8:	782b      	ldrb	r3, [r5, #0]
 80010ea:	2b08      	cmp	r3, #8
{
 80010ec:	4606      	mov	r6, r0
	if (devicePrm.config >= PARALLELING_IN1A_IN2A__IN1B_IN2B__1_BIDIR_MOTOR) {
 80010ee:	d910      	bls.n	8001112 <L6206_EnableBridge+0x36>
		L6206_Board_EnableBridge(bridgeId, 0);
 80010f0:	2100      	movs	r1, #0
 80010f2:	f002 ff3b 	bl	8003f6c <L6206_Board_EnableBridge>
			L6206_Board_EnableBridge(BRIDGE_B, 1);
 80010f6:	4621      	mov	r1, r4
		if (bridgeId == BRIDGE_A) {
 80010f8:	b92e      	cbnz	r6, 8001106 <L6206_EnableBridge+0x2a>
			L6206_Board_EnableBridge(BRIDGE_B, 1);
 80010fa:	4620      	mov	r0, r4
 80010fc:	f002 ff36 	bl	8003f6c <L6206_Board_EnableBridge>
			devicePrm.bridgeEnabled[BRIDGE_B] = TRUE;
 8001100:	f885 4025 	strb.w	r4, [r5, #37]	; 0x25
 8001104:	bd70      	pop	{r4, r5, r6, pc}
			L6206_Board_EnableBridge(BRIDGE_A, 1);
 8001106:	2000      	movs	r0, #0
 8001108:	f002 ff30 	bl	8003f6c <L6206_Board_EnableBridge>
			devicePrm.bridgeEnabled[BRIDGE_A] = TRUE;
 800110c:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
 8001110:	bd70      	pop	{r4, r5, r6, pc}
		L6206_Board_EnableBridge(bridgeId, 1);
 8001112:	4621      	mov	r1, r4
}
 8001114:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		L6206_Board_EnableBridge(bridgeId, 1);
 8001118:	f002 bf28 	b.w	8003f6c <L6206_Board_EnableBridge>
 800111c:	20000418 	.word	0x20000418

08001120 <L6206_GetMotorHandle>:
}
 8001120:	4800      	ldr	r0, [pc, #0]	; (8001124 <L6206_GetMotorHandle+0x4>)
 8001122:	4770      	bx	lr
 8001124:	20000000 	.word	0x20000000

08001128 <L6206_GetBridgeIdUsedByMotorId>:
* @retval bridgeId 0 for bridge A , 1 for bridge B
**********************************************************/
uint8_t L6206_GetBridgeIdUsedByMotorId(uint8_t motorId)
{
	uint8_t bridgeId;
	switch (devicePrm.config) {
 8001128:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <L6206_GetBridgeIdUsedByMotorId+0x30>)
 800112a:	781a      	ldrb	r2, [r3, #0]
 800112c:	2a08      	cmp	r2, #8
 800112e:	d808      	bhi.n	8001142 <L6206_GetBridgeIdUsedByMotorId+0x1a>
 8001130:	2301      	movs	r3, #1
 8001132:	4093      	lsls	r3, r2
 8001134:	f240 1273 	movw	r2, #371	; 0x173
 8001138:	4213      	tst	r3, r2
 800113a:	d104      	bne.n	8001146 <L6206_GetBridgeIdUsedByMotorId+0x1e>
 800113c:	f013 038c 	ands.w	r3, r3, #140	; 0x8c
 8001140:	d105      	bne.n	800114e <L6206_GetBridgeIdUsedByMotorId+0x26>
	case PARALLELING_IN1A_IN2A__IN1B_IN2B__1_BIDIR_MOTOR:
	case PARALLELING_IN1A_IN1B__IN2A_IN2B__1_UNDIR_MOTOR_BRIDGE_1A__1_UNDIR_MOTOR_BRIDGE_2A:
	case PARALLELING_IN1A_IN1B__IN2A_IN2B__1_BIDIR_MOTOR:
	case PARALLELING_ALL_WITH_IN1A___1_UNDIR_MOTOR:
	default:
		bridgeId = 0;
 8001142:	2000      	movs	r0, #0
		break;
	}
	return(bridgeId);
}
 8001144:	4770      	bx	lr
			bridgeId = 1;
 8001146:	3000      	adds	r0, #0
 8001148:	bf18      	it	ne
 800114a:	2001      	movne	r0, #1
 800114c:	4770      	bx	lr
 800114e:	2801      	cmp	r0, #1
 8001150:	bf94      	ite	ls
 8001152:	2000      	movls	r0, #0
 8001154:	2001      	movhi	r0, #1
 8001156:	4770      	bx	lr
 8001158:	20000418 	.word	0x20000418

0800115c <L6206_GetMotorIdUsingbridgeInput>:
**********************************************************/
uint8_t L6206_GetMotorIdUsingbridgeInput(uint8_t bridgeInput)
{
	uint8_t motorId;

	switch (devicePrm.config) {
 800115c:	4b13      	ldr	r3, [pc, #76]	; (80011ac <L6206_GetMotorIdUsingbridgeInput+0x50>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b0a      	cmp	r3, #10
 8001162:	d81f      	bhi.n	80011a4 <L6206_GetMotorIdUsingbridgeInput+0x48>
 8001164:	e8df f003 	tbb	[pc, r3]
 8001168:	16120b06 	.word	0x16120b06
 800116c:	12060b06 	.word	0x12060b06
 8001170:	1e06      	.short	0x1e06
 8001172:	1b          	.byte	0x1b
 8001173:	00          	.byte	0x00
	case PARALLELING_IN1B_IN2B__1_BIDIR_MOTOR_BRIDGE_A__1_UNDIR_MOTOR_BRIDGE_B:
	case PARALLELING_IN1A_IN2A__IN1B_IN2B__1_UNDIR_MOTOR_BRIDGE_A__1_UNDIR_MOTOR_BRIDGE_B:
		if (bridgeInput >= INPUT_1B) {
			motorId = 1;
		}else  {
			motorId = 0;
 8001174:	2801      	cmp	r0, #1
 8001176:	bf94      	ite	ls
 8001178:	2000      	movls	r0, #0
 800117a:	2001      	movhi	r0, #1
 800117c:	4770      	bx	lr
		}
		break;
	case PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__2_UNDIR_MOTOR_BRIDGE_B:
	case   PARALLELING_IN1A_IN2A__1_UNDIR_MOTOR_BRIDGE_A__2_UNDIR_MOTOR_BRIDGE_B:
		if (bridgeInput == INPUT_2B) {
 800117e:	2803      	cmp	r0, #3
 8001180:	d012      	beq.n	80011a8 <L6206_GetMotorIdUsingbridgeInput+0x4c>
			motorId = 0;
 8001182:	2802      	cmp	r0, #2
			motorId = 0;
		}
		break;
	case PARALLELING_NONE___2_UNDIR_MOTOR_BRIDGE_A__2_UNDIR_MOTOR_BRIDGE_B:
		if (bridgeInput == INPUT_2B) {
			motorId = 3;
 8001184:	bf14      	ite	ne
 8001186:	2000      	movne	r0, #0
 8001188:	2001      	moveq	r0, #1
 800118a:	4770      	bx	lr
		if (bridgeInput >= INPUT_1B) {
 800118c:	2801      	cmp	r0, #1
 800118e:	d80b      	bhi.n	80011a8 <L6206_GetMotorIdUsingbridgeInput+0x4c>
			motorId = 3;
 8001190:	2801      	cmp	r0, #1
 8001192:	e7f7      	b.n	8001184 <L6206_GetMotorIdUsingbridgeInput+0x28>
		if (bridgeInput == INPUT_2B) {
 8001194:	2803      	cmp	r0, #3
 8001196:	d008      	beq.n	80011aa <L6206_GetMotorIdUsingbridgeInput+0x4e>
		}else if (bridgeInput == INPUT_1B) {
 8001198:	2802      	cmp	r0, #2
 800119a:	d1f9      	bne.n	8001190 <L6206_GetMotorIdUsingbridgeInput+0x34>
 800119c:	4770      	bx	lr
		}else  {
			motorId = 0;
		}
		break;
	case PARALLELING_IN1A_IN1B__IN2A_IN2B__1_UNDIR_MOTOR_BRIDGE_1A__1_UNDIR_MOTOR_BRIDGE_2A:
		if ((bridgeInput == INPUT_2A) || (bridgeInput == INPUT_2B)) {
 800119e:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 80011a2:	e7f5      	b.n	8001190 <L6206_GetMotorIdUsingbridgeInput+0x34>
		break;
	case   PARALLELING_IN1A_IN2A__IN1B_IN2B__1_BIDIR_MOTOR:
	case   PARALLELING_IN1A_IN1B__IN2A_IN2B__1_BIDIR_MOTOR:
	case   PARALLELING_ALL_WITH_IN1A___1_UNDIR_MOTOR:
	default:
		motorId = 0;
 80011a4:	2000      	movs	r0, #0
 80011a6:	4770      	bx	lr
			motorId = 2;
 80011a8:	2002      	movs	r0, #2
		break;
	}

	return(motorId);
}
 80011aa:	4770      	bx	lr
 80011ac:	20000418 	.word	0x20000418

080011b0 <L6206_GetBridgeInputUsedByMotorId>:
* @retval PWM input 0 for 1A, 1 for 2A, 2 for 1B, 3 for 3B
**********************************************************/
uint8_t L6206_GetBridgeInputUsedByMotorId(uint8_t motorId)
{
	uint8_t bridgeInput;
	switch (devicePrm.config) {
 80011b0:	4b21      	ldr	r3, [pc, #132]	; (8001238 <L6206_GetBridgeInputUsedByMotorId+0x88>)
 80011b2:	781a      	ldrb	r2, [r3, #0]
 80011b4:	2a0b      	cmp	r2, #11
 80011b6:	d83d      	bhi.n	8001234 <L6206_GetBridgeInputUsedByMotorId+0x84>
 80011b8:	e8df f002 	tbb	[pc, r2]
 80011bc:	1a150e06 	.word	0x1a150e06
 80011c0:	2b272421 	.word	0x2b272421
 80011c4:	07383230 	.word	0x07383230
	case PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B:
		if (motorId == 0) {
 80011c8:	b918      	cbnz	r0, 80011d2 <L6206_GetBridgeInputUsedByMotorId+0x22>
		}else  {
			bridgeInput = INPUT_2A;
		}
		break;
	case PARALLELING_IN1A_IN1B__IN2A_IN2B__1_BIDIR_MOTOR:
		if (devicePrm.direction[0] == FORWARD) {
 80011ca:	7f18      	ldrb	r0, [r3, #28]
				bridgeInput = INPUT_1B;
 80011cc:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
 80011d0:	e02d      	b.n	800122e <L6206_GetBridgeInputUsedByMotorId+0x7e>
			if (devicePrm.direction[1] == FORWARD) {
 80011d2:	7f5b      	ldrb	r3, [r3, #29]
			bridgeInput = INPUT_1B;
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	e002      	b.n	80011de <L6206_GetBridgeInputUsedByMotorId+0x2e>
		if (motorId == 0) {
 80011d8:	2800      	cmp	r0, #0
 80011da:	d0f6      	beq.n	80011ca <L6206_GetBridgeInputUsedByMotorId+0x1a>
			bridgeInput = INPUT_1B;
 80011dc:	2801      	cmp	r0, #1
 80011de:	bf14      	ite	ne
 80011e0:	2003      	movne	r0, #3
 80011e2:	2002      	moveq	r0, #2
 80011e4:	4770      	bx	lr
		if (motorId == 0) {
 80011e6:	b330      	cbz	r0, 8001236 <L6206_GetBridgeInputUsedByMotorId+0x86>
		}else if (motorId == 1) {
 80011e8:	2801      	cmp	r0, #1
 80011ea:	d024      	beq.n	8001236 <L6206_GetBridgeInputUsedByMotorId+0x86>
			if (devicePrm.direction[2] == FORWARD) {
 80011ec:	7f9b      	ldrb	r3, [r3, #30]
 80011ee:	e7f1      	b.n	80011d4 <L6206_GetBridgeInputUsedByMotorId+0x24>
		if (motorId == 0) {
 80011f0:	b308      	cbz	r0, 8001236 <L6206_GetBridgeInputUsedByMotorId+0x86>
		}else if (motorId == 1) {
 80011f2:	2801      	cmp	r0, #1
 80011f4:	d01f      	beq.n	8001236 <L6206_GetBridgeInputUsedByMotorId+0x86>
				bridgeInput = INPUT_2B;
 80011f6:	2802      	cmp	r0, #2
 80011f8:	bf18      	it	ne
 80011fa:	2003      	movne	r0, #3
 80011fc:	4770      	bx	lr
		if (motorId == 0) {
 80011fe:	2800      	cmp	r0, #0
 8001200:	d1e7      	bne.n	80011d2 <L6206_GetBridgeInputUsedByMotorId+0x22>
 8001202:	4770      	bx	lr
		if (motorId == 0) {
 8001204:	2800      	cmp	r0, #0
 8001206:	d1e9      	bne.n	80011dc <L6206_GetBridgeInputUsedByMotorId+0x2c>
 8001208:	4770      	bx	lr
		if (motorId == 0) {
 800120a:	2800      	cmp	r0, #0
 800120c:	d0dd      	beq.n	80011ca <L6206_GetBridgeInputUsedByMotorId+0x1a>
			bridgeInput = INPUT_1B;
 800120e:	2002      	movs	r0, #2
 8001210:	4770      	bx	lr
		if (motorId == 0) {
 8001212:	b180      	cbz	r0, 8001236 <L6206_GetBridgeInputUsedByMotorId+0x86>
			bridgeInput = INPUT_1B;
 8001214:	2801      	cmp	r0, #1
 8001216:	bf18      	it	ne
 8001218:	2002      	movne	r0, #2
 800121a:	4770      	bx	lr
 800121c:	2800      	cmp	r0, #0
 800121e:	e7fa      	b.n	8001216 <L6206_GetBridgeInputUsedByMotorId+0x66>
		if (devicePrm.direction[0] == FORWARD) {
 8001220:	7f1b      	ldrb	r3, [r3, #28]
			bridgeInput = INPUT_1A;
 8001222:	2b01      	cmp	r3, #1
 8001224:	bf14      	ite	ne
 8001226:	2002      	movne	r0, #2
 8001228:	2000      	moveq	r0, #0
 800122a:	4770      	bx	lr
				bridgeInput = INPUT_1B;
 800122c:	3000      	adds	r0, #0
 800122e:	bf18      	it	ne
 8001230:	2001      	movne	r0, #1
 8001232:	4770      	bx	lr
			bridgeInput = INPUT_2A;
		}
		break;
	case PARALLELING_ALL_WITH_IN1A___1_UNDIR_MOTOR:
	default:
		bridgeInput = INPUT_1A;
 8001234:	2000      	movs	r0, #0
		break;
	}
	return(bridgeInput);
}
 8001236:	4770      	bx	lr
 8001238:	20000418 	.word	0x20000418

0800123c <L6206_GetSecondBridgeInputUsedByMotorId>:
* @brief  Get the second PWM input used by a given bidirectionnal motor
* @param motorId from 0 to MAX_NUMBER_OF_BRUSH_DC_MOTORS
* @retval PWM input 0 for 1A, 1 for 2A, 2 for 1B, 3 for 3B
**********************************************************/
uint8_t L6206_GetSecondBridgeInputUsedByMotorId(uint8_t motorId)
{
 800123c:	b508      	push	{r3, lr}
	uint8_t bridgeInput = 0xFF;

	switch (devicePrm.config) {
 800123e:	4b17      	ldr	r3, [pc, #92]	; (800129c <L6206_GetSecondBridgeInputUsedByMotorId+0x60>)
 8001240:	781a      	ldrb	r2, [r3, #0]
 8001242:	2a0b      	cmp	r2, #11
 8001244:	d81d      	bhi.n	8001282 <L6206_GetSecondBridgeInputUsedByMotorId+0x46>
 8001246:	e8df f002 	tbb	[pc, r2]
 800124a:	1a06      	.short	0x1a06
 800124c:	1c111c0c 	.word	0x1c111c0c
 8001250:	221c1c1a 	.word	0x221c1c1a
 8001254:	071c      	.short	0x071c
	case PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B:
		if (motorId == 0) {
 8001256:	b958      	cbnz	r0, 8001270 <L6206_GetSecondBridgeInputUsedByMotorId+0x34>
			bridgeInput = INPUT_1A;
		}
		break;

	case PARALLELING_IN1A_IN1B__IN2A_IN2B__1_BIDIR_MOTOR:
		if (devicePrm.direction[0] == FORWARD) {
 8001258:	7f18      	ldrb	r0, [r3, #28]
			bridgeInput = INPUT_1B;
 800125a:	1e43      	subs	r3, r0, #1
 800125c:	4258      	negs	r0, r3
 800125e:	4158      	adcs	r0, r3
 8001260:	bd08      	pop	{r3, pc}
		if (motorId == 2) {
 8001262:	2802      	cmp	r0, #2
 8001264:	d10d      	bne.n	8001282 <L6206_GetSecondBridgeInputUsedByMotorId+0x46>
			if (devicePrm.direction[2] == FORWARD) {
 8001266:	7f9b      	ldrb	r3, [r3, #30]
				bridgeInput = INPUT_2B;
 8001268:	2b01      	cmp	r3, #1
 800126a:	e005      	b.n	8001278 <L6206_GetSecondBridgeInputUsedByMotorId+0x3c>
		if (motorId == 1) {
 800126c:	2801      	cmp	r0, #1
 800126e:	d108      	bne.n	8001282 <L6206_GetSecondBridgeInputUsedByMotorId+0x46>
			if (devicePrm.direction[1] == FORWARD) {
 8001270:	7f5b      	ldrb	r3, [r3, #29]
				bridgeInput = INPUT_2B;
 8001272:	2b01      	cmp	r3, #1
 8001274:	bf18      	it	ne
 8001276:	2002      	movne	r0, #2
 8001278:	bf08      	it	eq
 800127a:	2003      	moveq	r0, #3
 800127c:	bd08      	pop	{r3, pc}
		if (motorId == 0) {
 800127e:	2800      	cmp	r0, #0
 8001280:	d0ea      	beq.n	8001258 <L6206_GetSecondBridgeInputUsedByMotorId+0x1c>
	default:
		bridgeInput = 0XFF;
		break;
	}
	if (bridgeInput == 0XFF) {
		L6206_ErrorHandler(L6206_ERROR_2);
 8001282:	f248 0002 	movw	r0, #32770	; 0x8002
 8001286:	f7ff fe3d 	bl	8000f04 <L6206_ErrorHandler>
 800128a:	20ff      	movs	r0, #255	; 0xff
	}

	return(bridgeInput);
}
 800128c:	bd08      	pop	{r3, pc}
		if (devicePrm.direction[0] == FORWARD) {
 800128e:	7f1b      	ldrb	r3, [r3, #28]
			bridgeInput = INPUT_1A;
 8001290:	2b01      	cmp	r3, #1
 8001292:	bf0c      	ite	eq
 8001294:	2002      	moveq	r0, #2
 8001296:	2000      	movne	r0, #0
 8001298:	bd08      	pop	{r3, pc}
 800129a:	bf00      	nop
 800129c:	20000418 	.word	0x20000418

080012a0 <L6206_IsBidirectionnalMotor>:
* @retval True if motor is bidirectionnal, else false
**********************************************************/
bool L6206_IsBidirectionnalMotor(uint8_t motorId)
{
	bool isBiDir = FALSE;
	switch (devicePrm.config) {
 80012a0:	4b0d      	ldr	r3, [pc, #52]	; (80012d8 <L6206_IsBidirectionnalMotor+0x38>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b0b      	cmp	r3, #11
 80012a6:	d814      	bhi.n	80012d2 <L6206_IsBidirectionnalMotor+0x32>
 80012a8:	e8df f003 	tbb	[pc, r3]
 80012ac:	130c0806 	.word	0x130c0806
 80012b0:	13081311 	.word	0x13081311
 80012b4:	06130613 	.word	0x06130613
	case PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B:
	case PARALLELING_IN1A_IN2A__IN1B_IN2B__1_BIDIR_MOTOR:
	case PARALLELING_IN1A_IN1B__IN2A_IN2B__1_BIDIR_MOTOR:
		isBiDir = TRUE;
 80012b8:	2001      	movs	r0, #1
 80012ba:	4770      	bx	lr
 80012bc:	fab0 f080 	clz	r0, r0
 80012c0:	0940      	lsrs	r0, r0, #5
 80012c2:	4770      	bx	lr
 80012c4:	2802      	cmp	r0, #2
 80012c6:	bf14      	ite	ne
 80012c8:	2000      	movne	r0, #0
 80012ca:	2001      	moveq	r0, #1
 80012cc:	4770      	bx	lr
 80012ce:	2801      	cmp	r0, #1
 80012d0:	e7f9      	b.n	80012c6 <L6206_IsBidirectionnalMotor+0x26>
	bool isBiDir = FALSE;
 80012d2:	2000      	movs	r0, #0
	default:
		break;
	}

	return(isBiDir);
}
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	20000418 	.word	0x20000418

080012dc <L6206_HardStop>:
{
 80012dc:	b570      	push	{r4, r5, r6, lr}
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 80012de:	4c13      	ldr	r4, [pc, #76]	; (800132c <L6206_HardStop+0x50>)
 80012e0:	4a13      	ldr	r2, [pc, #76]	; (8001330 <L6206_HardStop+0x54>)
 80012e2:	7823      	ldrb	r3, [r4, #0]
 80012e4:	5cd3      	ldrb	r3, [r2, r3]
 80012e6:	4283      	cmp	r3, r0
{
 80012e8:	4605      	mov	r5, r0
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 80012ea:	d205      	bcs.n	80012f8 <L6206_HardStop+0x1c>
		L6206_ErrorHandler(L6206_ERROR_1);
 80012ec:	f248 0001 	movw	r0, #32769	; 0x8001
}
 80012f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		L6206_ErrorHandler(L6206_ERROR_1);
 80012f4:	f7ff be06 	b.w	8000f04 <L6206_ErrorHandler>
	}else if (devicePrm.motionState[motorId] != INACTIVE) {
 80012f8:	1823      	adds	r3, r4, r0
 80012fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012fe:	2b08      	cmp	r3, #8
 8001300:	d012      	beq.n	8001328 <L6206_HardStop+0x4c>
		bridgeInputFirstPWM = L6206_GetBridgeInputUsedByMotorId(motorId);
 8001302:	f7ff ff55 	bl	80011b0 <L6206_GetBridgeInputUsedByMotorId>
 8001306:	4606      	mov	r6, r0
		if (L6206_IsBidirectionnalMotor(motorId)) {
 8001308:	4628      	mov	r0, r5
 800130a:	f7ff ffc9 	bl	80012a0 <L6206_IsBidirectionnalMotor>
 800130e:	b120      	cbz	r0, 800131a <L6206_HardStop+0x3e>
			bridgeInputSecondPWM = L6206_GetSecondBridgeInputUsedByMotorId(motorId);
 8001310:	4628      	mov	r0, r5
 8001312:	f7ff ff93 	bl	800123c <L6206_GetSecondBridgeInputUsedByMotorId>
			L6206_Board_PwmStop(bridgeInputSecondPWM);
 8001316:	f002 ff71 	bl	80041fc <L6206_Board_PwmStop>
		L6206_Board_PwmStop(bridgeInputFirstPWM);
 800131a:	4630      	mov	r0, r6
		devicePrm.motionState[motorId] = INACTIVE;
 800131c:	442c      	add	r4, r5
		L6206_Board_PwmStop(bridgeInputFirstPWM);
 800131e:	f002 ff6d 	bl	80041fc <L6206_Board_PwmStop>
		devicePrm.motionState[motorId] = INACTIVE;
 8001322:	2308      	movs	r3, #8
 8001324:	f884 3020 	strb.w	r3, [r4, #32]
 8001328:	bd70      	pop	{r4, r5, r6, pc}
 800132a:	bf00      	nop
 800132c:	20000418 	.word	0x20000418
 8001330:	0800ab98 	.word	0x0800ab98

08001334 <L6206_HardHiz>:
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 8001334:	491c      	ldr	r1, [pc, #112]	; (80013a8 <L6206_HardHiz+0x74>)
{
 8001336:	b538      	push	{r3, r4, r5, lr}
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 8001338:	780d      	ldrb	r5, [r1, #0]
 800133a:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <L6206_HardHiz+0x78>)
 800133c:	5d5b      	ldrb	r3, [r3, r5]
 800133e:	4283      	cmp	r3, r0
{
 8001340:	4604      	mov	r4, r0
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 8001342:	d205      	bcs.n	8001350 <L6206_HardHiz+0x1c>
		L6206_ErrorHandler(L6206_ERROR_1);
 8001344:	f248 0001 	movw	r0, #32769	; 0x8001
}
 8001348:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		L6206_ErrorHandler(L6206_ERROR_1);
 800134c:	f7ff bdda 	b.w	8000f04 <L6206_ErrorHandler>
		uint8_t bridgeId = L6206_GetBridgeIdUsedByMotorId(motorId);
 8001350:	f7ff feea 	bl	8001128 <L6206_GetBridgeIdUsedByMotorId>
		if (devicePrm.bridgeEnabled[bridgeId] != FALSE) {
 8001354:	180b      	adds	r3, r1, r0
 8001356:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800135a:	b193      	cbz	r3, 8001382 <L6206_HardHiz+0x4e>
			switch (devicePrm.config) {
 800135c:	3d01      	subs	r5, #1
 800135e:	2d09      	cmp	r5, #9
 8001360:	d81f      	bhi.n	80013a2 <L6206_HardHiz+0x6e>
 8001362:	e8df f005 	tbb	[pc, r5]
 8001366:	1305      	.short	0x1305
 8001368:	1e051e17 	.word	0x1e051e17
 800136c:	151e1e13 	.word	0x151e1e13
				if ((motorId > 0) && (devicePrm.motionState[1] == STEADY) && (devicePrm.motionState[2] == STEADY)) {
 8001370:	b1bc      	cbz	r4, 80013a2 <L6206_HardHiz+0x6e>
 8001372:	6a0b      	ldr	r3, [r1, #32]
 8001374:	4a0e      	ldr	r2, [pc, #56]	; (80013b0 <L6206_HardHiz+0x7c>)
 8001376:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800137a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800137e:	4293      	cmp	r3, r2
				if ((devicePrm.motionState[0] == STEADY) && (devicePrm.motionState[1] == STEADY)) {
 8001380:	d10f      	bne.n	80013a2 <L6206_HardHiz+0x6e>
		L6206_HardStop(motorId);
 8001382:	4620      	mov	r0, r4
}
 8001384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		L6206_HardStop(motorId);
 8001388:	f7ff bfa8 	b.w	80012dc <L6206_HardStop>
				if ((motorId < 2) && (devicePrm.motionState[0] == STEADY) && (devicePrm.motionState[1] == STEADY)) {
 800138c:	2c01      	cmp	r4, #1
 800138e:	d808      	bhi.n	80013a2 <L6206_HardHiz+0x6e>
				if ((devicePrm.motionState[0] == STEADY) && (devicePrm.motionState[1] == STEADY)) {
 8001390:	8c0a      	ldrh	r2, [r1, #32]
 8001392:	e002      	b.n	800139a <L6206_HardHiz+0x66>
				if (((motorId < 2) && (devicePrm.motionState[0] == STEADY) && (devicePrm.motionState[1] == STEADY)) ||
 8001394:	2c01      	cmp	r4, #1
 8001396:	d9fb      	bls.n	8001390 <L6206_HardHiz+0x5c>
				    ((motorId > 1) && (devicePrm.motionState[2] == STEADY) && (devicePrm.motionState[3] == STEADY))) {
 8001398:	8c4a      	ldrh	r2, [r1, #34]	; 0x22
				if ((devicePrm.motionState[0] == STEADY) && (devicePrm.motionState[1] == STEADY)) {
 800139a:	f240 3303 	movw	r3, #771	; 0x303
 800139e:	429a      	cmp	r2, r3
 80013a0:	e7ee      	b.n	8001380 <L6206_HardHiz+0x4c>
				L6206_DisableBridge(bridgeId);
 80013a2:	f7ff fe7f 	bl	80010a4 <L6206_DisableBridge>
 80013a6:	e7ec      	b.n	8001382 <L6206_HardHiz+0x4e>
 80013a8:	20000418 	.word	0x20000418
 80013ac:	0800ab98 	.word	0x0800ab98
 80013b0:	00030300 	.word	0x00030300

080013b4 <L6206_Run>:
{
 80013b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 80013b6:	4c25      	ldr	r4, [pc, #148]	; (800144c <L6206_Run+0x98>)
 80013b8:	4a25      	ldr	r2, [pc, #148]	; (8001450 <L6206_Run+0x9c>)
 80013ba:	7823      	ldrb	r3, [r4, #0]
 80013bc:	5cd3      	ldrb	r3, [r2, r3]
 80013be:	4283      	cmp	r3, r0
{
 80013c0:	4605      	mov	r5, r0
 80013c2:	460e      	mov	r6, r1
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 80013c4:	d205      	bcs.n	80013d2 <L6206_Run+0x1e>
		L6206_ErrorHandler(L6206_ERROR_1);
 80013c6:	f248 0001 	movw	r0, #32769	; 0x8001
}
 80013ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		L6206_ErrorHandler(L6206_ERROR_1);
 80013ce:	f7ff bd99 	b.w	8000f04 <L6206_ErrorHandler>
	}else if ((devicePrm.motionState[motorId] == INACTIVE) ||
 80013d2:	1823      	adds	r3, r4, r0
 80013d4:	f893 2020 	ldrb.w	r2, [r3, #32]
 80013d8:	2a08      	cmp	r2, #8
 80013da:	d004      	beq.n	80013e6 <L6206_Run+0x32>
 80013dc:	7f1b      	ldrb	r3, [r3, #28]
 80013de:	428b      	cmp	r3, r1
 80013e0:	d033      	beq.n	800144a <L6206_Run+0x96>
			L6206_HardStop(motorId);
 80013e2:	f7ff ff7b 	bl	80012dc <L6206_HardStop>
		devicePrm.direction[motorId] = direction;
 80013e6:	1963      	adds	r3, r4, r5
		devicePrm.motionState[motorId] = STEADY;
 80013e8:	2203      	movs	r2, #3
		bridgeId = L6206_GetBridgeIdUsedByMotorId(motorId);
 80013ea:	4628      	mov	r0, r5
		devicePrm.direction[motorId] = direction;
 80013ec:	771e      	strb	r6, [r3, #28]
		devicePrm.motionState[motorId] = STEADY;
 80013ee:	f883 2020 	strb.w	r2, [r3, #32]
		bridgeId = L6206_GetBridgeIdUsedByMotorId(motorId);
 80013f2:	f7ff fe99 	bl	8001128 <L6206_GetBridgeIdUsedByMotorId>
 80013f6:	4607      	mov	r7, r0
		bridgeInput = L6206_GetBridgeInputUsedByMotorId(motorId);
 80013f8:	4628      	mov	r0, r5
 80013fa:	f7ff fed9 	bl	80011b0 <L6206_GetBridgeInputUsedByMotorId>
 80013fe:	4606      	mov	r6, r0
		L6206_EnableBridge(bridgeId);
 8001400:	4638      	mov	r0, r7
 8001402:	f7ff fe6b 	bl	80010dc <L6206_EnableBridge>
		if (L6206_IsBidirectionnalMotor(motorId)) {
 8001406:	4628      	mov	r0, r5
 8001408:	f7ff ff4a 	bl	80012a0 <L6206_IsBidirectionnalMotor>
 800140c:	f105 0308 	add.w	r3, r5, #8
 8001410:	00b1      	lsls	r1, r6, #2
			L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], (100 - devicePrm.speed[motorId]));
 8001412:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		if (L6206_IsBidirectionnalMotor(motorId)) {
 8001416:	b198      	cbz	r0, 8001440 <L6206_Run+0x8c>
			L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], (100 - devicePrm.speed[motorId]));
 8001418:	791a      	ldrb	r2, [r3, #4]
 800141a:	4421      	add	r1, r4
 800141c:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
 8001420:	b2d2      	uxtb	r2, r2
 8001422:	6849      	ldr	r1, [r1, #4]
 8001424:	4630      	mov	r0, r6
 8001426:	f002 fea7 	bl	8004178 <L6206_Board_PwmSetFreq>
			bridgeInput = L6206_GetSecondBridgeInputUsedByMotorId(motorId);
 800142a:	4628      	mov	r0, r5
 800142c:	f7ff ff06 	bl	800123c <L6206_GetSecondBridgeInputUsedByMotorId>
			L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], 100);
 8001430:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8001434:	2264      	movs	r2, #100	; 0x64
 8001436:	6861      	ldr	r1, [r4, #4]
}
 8001438:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], devicePrm.speed[motorId]);
 800143c:	f002 be9c 	b.w	8004178 <L6206_Board_PwmSetFreq>
 8001440:	440c      	add	r4, r1
 8001442:	791a      	ldrb	r2, [r3, #4]
 8001444:	6861      	ldr	r1, [r4, #4]
 8001446:	4630      	mov	r0, r6
 8001448:	e7f6      	b.n	8001438 <L6206_Run+0x84>
 800144a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800144c:	20000418 	.word	0x20000418
 8001450:	0800ab98 	.word	0x0800ab98

08001454 <L6206_SetMaxSpeed>:
{
 8001454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 8001456:	4c15      	ldr	r4, [pc, #84]	; (80014ac <L6206_SetMaxSpeed+0x58>)
 8001458:	4a15      	ldr	r2, [pc, #84]	; (80014b0 <L6206_SetMaxSpeed+0x5c>)
 800145a:	7823      	ldrb	r3, [r4, #0]
 800145c:	5cd3      	ldrb	r3, [r2, r3]
 800145e:	4283      	cmp	r3, r0
{
 8001460:	4606      	mov	r6, r0
 8001462:	460d      	mov	r5, r1
	if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config]) {
 8001464:	d205      	bcs.n	8001472 <L6206_SetMaxSpeed+0x1e>
		L6206_ErrorHandler(L6206_ERROR_1);
 8001466:	f248 0001 	movw	r0, #32769	; 0x8001
 800146a:	f7ff fd4b 	bl	8000f04 <L6206_ErrorHandler>
	bool cmdExecuted = FALSE;
 800146e:	2000      	movs	r0, #0
 8001470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		devicePrm.speed[motorId] = newMaxSpeed;
 8001472:	eb04 0340 	add.w	r3, r4, r0, lsl #1
 8001476:	8299      	strh	r1, [r3, #20]
		if (devicePrm.motionState[motorId] != INACTIVE) {
 8001478:	1823      	adds	r3, r4, r0
 800147a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800147e:	2b08      	cmp	r3, #8
 8001480:	d00f      	beq.n	80014a2 <L6206_SetMaxSpeed+0x4e>
			bridgeInput = L6206_GetBridgeInputUsedByMotorId(motorId);
 8001482:	f7ff fe95 	bl	80011b0 <L6206_GetBridgeInputUsedByMotorId>
 8001486:	4607      	mov	r7, r0
			if (L6206_IsBidirectionnalMotor(motorId)) {
 8001488:	4630      	mov	r0, r6
 800148a:	f7ff ff09 	bl	80012a0 <L6206_IsBidirectionnalMotor>
 800148e:	00bb      	lsls	r3, r7, #2
 8001490:	b148      	cbz	r0, 80014a6 <L6206_SetMaxSpeed+0x52>
				L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], (100 - devicePrm.speed[motorId]));
 8001492:	f1c5 0264 	rsb	r2, r5, #100	; 0x64
 8001496:	441c      	add	r4, r3
 8001498:	b2d2      	uxtb	r2, r2
				L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], devicePrm.speed[motorId]);
 800149a:	6861      	ldr	r1, [r4, #4]
 800149c:	4638      	mov	r0, r7
 800149e:	f002 fe6b 	bl	8004178 <L6206_Board_PwmSetFreq>
		cmdExecuted = TRUE;
 80014a2:	2001      	movs	r0, #1
}
 80014a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], devicePrm.speed[motorId]);
 80014a6:	441c      	add	r4, r3
 80014a8:	b2ea      	uxtb	r2, r5
 80014aa:	e7f6      	b.n	800149a <L6206_SetMaxSpeed+0x46>
 80014ac:	20000418 	.word	0x20000418
 80014b0:	0800ab98 	.word	0x0800ab98

080014b4 <L6206_SetBridgeInputPwmFreq>:
{
 80014b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014b8:	4f1e      	ldr	r7, [pc, #120]	; (8001534 <L6206_SetBridgeInputPwmFreq+0x80>)
		devicePrm.pwmFreq[bridgeInput] = newFreq;
 80014ba:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8001538 <L6206_SetBridgeInputPwmFreq+0x84>
 80014be:	428f      	cmp	r7, r1
		uint8_t bridgeInput = (bridgeId << 1) + loop;
 80014c0:	ea4f 0040 	mov.w	r0, r0, lsl #1
 80014c4:	bf28      	it	cs
 80014c6:	460f      	movcs	r7, r1
 80014c8:	fa5f f980 	uxtb.w	r9, r0
 80014cc:	2600      	movs	r6, #0
 80014ce:	eb09 0506 	add.w	r5, r9, r6
 80014d2:	b2ed      	uxtb	r5, r5
		devicePrm.pwmFreq[bridgeInput] = newFreq;
 80014d4:	eb08 0a85 	add.w	sl, r8, r5, lsl #2
		motorId = L6206_GetMotorIdUsingbridgeInput(bridgeInput);
 80014d8:	4628      	mov	r0, r5
		devicePrm.pwmFreq[bridgeInput] = newFreq;
 80014da:	f8ca 7004 	str.w	r7, [sl, #4]
		motorId = L6206_GetMotorIdUsingbridgeInput(bridgeInput);
 80014de:	f7ff fe3d 	bl	800115c <L6206_GetMotorIdUsingbridgeInput>
		if (devicePrm.motionState[motorId] != INACTIVE) {
 80014e2:	eb08 0300 	add.w	r3, r8, r0
		motorId = L6206_GetMotorIdUsingbridgeInput(bridgeInput);
 80014e6:	4604      	mov	r4, r0
		if (devicePrm.motionState[motorId] != INACTIVE) {
 80014e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014ec:	2b08      	cmp	r3, #8
 80014ee:	d016      	beq.n	800151e <L6206_SetBridgeInputPwmFreq+0x6a>
			if (L6206_IsBidirectionnalMotor(motorId)) {
 80014f0:	f7ff fed6 	bl	80012a0 <L6206_IsBidirectionnalMotor>
 80014f4:	b1c0      	cbz	r0, 8001528 <L6206_SetBridgeInputPwmFreq+0x74>
				if (bridgeInput != L6206_GetSecondBridgeInputUsedByMotorId(motorId)) {
 80014f6:	4620      	mov	r0, r4
 80014f8:	f7ff fea0 	bl	800123c <L6206_GetSecondBridgeInputUsedByMotorId>
 80014fc:	42a8      	cmp	r0, r5
 80014fe:	d009      	beq.n	8001514 <L6206_SetBridgeInputPwmFreq+0x60>
					L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], (100 - devicePrm.speed[motorId]));
 8001500:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8001504:	f8da 1004 	ldr.w	r1, [sl, #4]
 8001508:	7d22      	ldrb	r2, [r4, #20]
 800150a:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
 800150e:	b2d2      	uxtb	r2, r2
				L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], devicePrm.speed[motorId]);
 8001510:	4628      	mov	r0, r5
 8001512:	e002      	b.n	800151a <L6206_SetBridgeInputPwmFreq+0x66>
					L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], 100);
 8001514:	f8da 1004 	ldr.w	r1, [sl, #4]
 8001518:	2264      	movs	r2, #100	; 0x64
				L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], devicePrm.speed[motorId]);
 800151a:	f002 fe2d 	bl	8004178 <L6206_Board_PwmSetFreq>
 800151e:	3601      	adds	r6, #1
	for (loop = 0; loop < 2; loop++) {
 8001520:	2e02      	cmp	r6, #2
 8001522:	d1d4      	bne.n	80014ce <L6206_SetBridgeInputPwmFreq+0x1a>
}
 8001524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput], devicePrm.speed[motorId]);
 8001528:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 800152c:	4639      	mov	r1, r7
 800152e:	7d22      	ldrb	r2, [r4, #20]
 8001530:	e7ee      	b.n	8001510 <L6206_SetBridgeInputPwmFreq+0x5c>
 8001532:	bf00      	nop
 8001534:	000186a0 	.word	0x000186a0
 8001538:	20000418 	.word	0x20000418

0800153c <L6206_SetDeviceParamsToPredefinedValues>:
* @brief  Sets the parameters of the device to predefined values
* from l6206_target_config.h
* @retval None
**********************************************************/
void L6206_SetDeviceParamsToPredefinedValues(void)
{
 800153c:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;

	memset(&devicePrm, 0, sizeof(devicePrm));
 800153e:	4c0d      	ldr	r4, [pc, #52]	; (8001574 <L6206_SetDeviceParamsToPredefinedValues+0x38>)
 8001540:	2228      	movs	r2, #40	; 0x28
 8001542:	2100      	movs	r1, #0
 8001544:	4620      	mov	r0, r4
 8001546:	f007 f814 	bl	8008572 <memset>

	devicePrm.config = L6206_CONF_PARAM_PARALLE_BRIDGES;

	devicePrm.pwmFreq[INPUT_1A] = L6206_CONF_PARAM_FREQ_PWM1A;
 800154a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800154e:	6063      	str	r3, [r4, #4]
	devicePrm.pwmFreq[INPUT_2A] = L6206_CONF_PARAM_FREQ_PWM2A;
 8001550:	60a3      	str	r3, [r4, #8]
	devicePrm.pwmFreq[INPUT_1B] = L6206_CONF_PARAM_FREQ_PWM1B;
 8001552:	60e3      	str	r3, [r4, #12]
	devicePrm.pwmFreq[INPUT_2B] = L6206_CONF_PARAM_FREQ_PWM2B;
 8001554:	6123      	str	r3, [r4, #16]
 8001556:	f104 021b 	add.w	r2, r4, #27
 800155a:	2300      	movs	r3, #0

	for (i = 0; i < MAX_NUMBER_OF_BRUSH_DC_MOTORS; i++) {
		devicePrm.speed[i] = 100;
 800155c:	2664      	movs	r6, #100	; 0x64
		devicePrm.direction[i] = FORWARD;
 800155e:	2001      	movs	r0, #1
		devicePrm.motionState[i] = INACTIVE;
 8001560:	2108      	movs	r1, #8
		devicePrm.speed[i] = 100;
 8001562:	18e5      	adds	r5, r4, r3
 8001564:	3302      	adds	r3, #2
 8001566:	82ae      	strh	r6, [r5, #20]
		devicePrm.direction[i] = FORWARD;
 8001568:	f802 0f01 	strb.w	r0, [r2, #1]!
	for (i = 0; i < MAX_NUMBER_OF_BRUSH_DC_MOTORS; i++) {
 800156c:	2b08      	cmp	r3, #8
		devicePrm.motionState[i] = INACTIVE;
 800156e:	7111      	strb	r1, [r2, #4]
	for (i = 0; i < MAX_NUMBER_OF_BRUSH_DC_MOTORS; i++) {
 8001570:	d1f7      	bne.n	8001562 <L6206_SetDeviceParamsToPredefinedValues+0x26>
	}
	for (i = 0; i < L6206_NB_MAX_BRIDGES; i++) {
		devicePrm.bridgeEnabled[i] = FALSE;
	}
}
 8001572:	bd70      	pop	{r4, r5, r6, pc}
 8001574:	20000418 	.word	0x20000418

08001578 <L6206_SetDeviceParamsToGivenValues>:
* @param initDevicePrm structure containing values to initialize the device
* parameters
* @retval None
**********************************************************/
void L6206_SetDeviceParamsToGivenValues(L6206_InitTypeDef* initDevicePrm)
{
 8001578:	b530      	push	{r4, r5, lr}
	memcpy(&devicePrm, initDevicePrm, sizeof(devicePrm));
 800157a:	4c06      	ldr	r4, [pc, #24]	; (8001594 <L6206_SetDeviceParamsToGivenValues+0x1c>)
{
 800157c:	4603      	mov	r3, r0
	memcpy(&devicePrm, initDevicePrm, sizeof(devicePrm));
 800157e:	f100 0528 	add.w	r5, r0, #40	; 0x28
 8001582:	6818      	ldr	r0, [r3, #0]
 8001584:	6859      	ldr	r1, [r3, #4]
 8001586:	4622      	mov	r2, r4
 8001588:	c203      	stmia	r2!, {r0, r1}
 800158a:	3308      	adds	r3, #8
 800158c:	42ab      	cmp	r3, r5
 800158e:	4614      	mov	r4, r2
 8001590:	d1f7      	bne.n	8001582 <L6206_SetDeviceParamsToGivenValues+0xa>
}
 8001592:	bd30      	pop	{r4, r5, pc}
 8001594:	20000418 	.word	0x20000418

08001598 <L6206_Init>:
	l6206DriverInstance++;
 8001598:	4a0a      	ldr	r2, [pc, #40]	; (80015c4 <L6206_Init+0x2c>)
 800159a:	8813      	ldrh	r3, [r2, #0]
{
 800159c:	b510      	push	{r4, lr}
	l6206DriverInstance++;
 800159e:	3301      	adds	r3, #1
{
 80015a0:	4604      	mov	r4, r0
	l6206DriverInstance++;
 80015a2:	8013      	strh	r3, [r2, #0]
	L6206_Board_GpioInit();
 80015a4:	f002 fd28 	bl	8003ff8 <L6206_Board_GpioInit>
	if (init == NULL) {
 80015a8:	b93c      	cbnz	r4, 80015ba <L6206_Init+0x22>
		L6206_SetDeviceParamsToPredefinedValues();
 80015aa:	f7ff ffc7 	bl	800153c <L6206_SetDeviceParamsToPredefinedValues>
	L6206_SetDualFullBridgeConfig(devicePrm.config);
 80015ae:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <L6206_Init+0x30>)
}
 80015b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	L6206_SetDualFullBridgeConfig(devicePrm.config);
 80015b4:	7818      	ldrb	r0, [r3, #0]
 80015b6:	f7ff bd1b 	b.w	8000ff0 <L6206_SetDualFullBridgeConfig>
		L6206_SetDeviceParamsToGivenValues((L6206_InitTypeDef*)init);
 80015ba:	4620      	mov	r0, r4
 80015bc:	f7ff ffdc 	bl	8001578 <L6206_SetDeviceParamsToGivenValues>
 80015c0:	e7f5      	b.n	80015ae <L6206_Init+0x16>
 80015c2:	bf00      	nop
 80015c4:	2000038c 	.word	0x2000038c
 80015c8:	20000418 	.word	0x20000418

080015cc <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
				  VL53L1_PresetModes PresetMode,
				  VL53L1_DistanceModes DistanceMode,
				  uint32_t inter_measurement_period_ms)
{
 80015cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t mm_config_timeout_us;
	uint32_t lld_range_config_timeout_us;

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 80015d0:	2903      	cmp	r1, #3
{
 80015d2:	b088      	sub	sp, #32
 80015d4:	4605      	mov	r5, r0
 80015d6:	460c      	mov	r4, r1
 80015d8:	461f      	mov	r7, r3
	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 80015da:	d030      	beq.n	800163e <SetPresetMode+0x72>
 80015dc:	2908      	cmp	r1, #8
	    (PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 80015de:	bf14      	ite	ne
 80015e0:	2620      	movne	r6, #32
 80015e2:	2640      	moveq	r6, #64	; 0x40
	VL53L1_DevicePresetModes LightModes[3] = {
 80015e4:	2302      	movs	r3, #2
 80015e6:	f88d 3014 	strb.w	r3, [sp, #20]
 80015ea:	2301      	movs	r3, #1
 80015ec:	f88d 3015 	strb.w	r3, [sp, #21]
 80015f0:	2303      	movs	r3, #3
 80015f2:	f88d 3016 	strb.w	r3, [sp, #22]
	VL53L1_DevicePresetModes TimedModes[3] = {
 80015f6:	2307      	movs	r3, #7
 80015f8:	f88d 3018 	strb.w	r3, [sp, #24]
 80015fc:	2306      	movs	r3, #6
 80015fe:	f88d 3019 	strb.w	r3, [sp, #25]
 8001602:	2308      	movs	r3, #8
 8001604:	f88d 301a 	strb.w	r3, [sp, #26]
	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8001608:	2324      	movs	r3, #36	; 0x24
 800160a:	f88d 301c 	strb.w	r3, [sp, #28]
 800160e:	2325      	movs	r3, #37	; 0x25
 8001610:	f88d 301d 	strb.w	r3, [sp, #29]
	switch (DistanceMode) {
 8001614:	2a01      	cmp	r2, #1
	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8001616:	f04f 0326 	mov.w	r3, #38	; 0x26
 800161a:	f88d 301e 	strb.w	r3, [sp, #30]
	switch (DistanceMode) {
 800161e:	d010      	beq.n	8001642 <SetPresetMode+0x76>
 8001620:	2a02      	cmp	r2, #2
		DistIdx = 2;
 8001622:	bf0c      	ite	eq
 8001624:	2301      	moveq	r3, #1
 8001626:	2302      	movne	r3, #2
	switch (PresetMode) {
 8001628:	2c04      	cmp	r4, #4
 800162a:	d00c      	beq.n	8001646 <SetPresetMode+0x7a>
 800162c:	2c08      	cmp	r4, #8
 800162e:	d02d      	beq.n	800168c <SetPresetMode+0xc0>
 8001630:	2c03      	cmp	r4, #3
 8001632:	d130      	bne.n	8001696 <SetPresetMode+0xca>
		*pDevicePresetMode = TimedModes[DistIdx];
 8001634:	aa08      	add	r2, sp, #32
 8001636:	4413      	add	r3, r2
 8001638:	f813 8c08 	ldrb.w	r8, [r3, #-8]
 800163c:	e007      	b.n	800164e <SetPresetMode+0x82>
		measurement_mode = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 800163e:	2640      	movs	r6, #64	; 0x40
 8001640:	e7d0      	b.n	80015e4 <SetPresetMode+0x18>
		DistIdx = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	e7f0      	b.n	8001628 <SetPresetMode+0x5c>
		*pDevicePresetMode = LightModes[DistIdx];
 8001646:	aa08      	add	r2, sp, #32
 8001648:	4413      	add	r3, r2
 800164a:	f813 8c0c 	ldrb.w	r8, [r3, #-12]

	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
					 &device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
		Status = VL53L1_get_preset_mode_timing_cfg(Dev,
 800164e:	ab07      	add	r3, sp, #28
 8001650:	9301      	str	r3, [sp, #4]
 8001652:	ab06      	add	r3, sp, #24
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	f10d 0212 	add.w	r2, sp, #18
 800165a:	ab05      	add	r3, sp, #20
 800165c:	4641      	mov	r1, r8
 800165e:	4628      	mov	r0, r5
 8001660:	f000 fc57 	bl	8001f12 <VL53L1_get_preset_mode_timing_cfg>
							   &dss_config__target_total_rate_mcps,
							   &phasecal_config_timeout_us,
							   &mm_config_timeout_us,
							   &lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 8001664:	b978      	cbnz	r0, 8001686 <SetPresetMode+0xba>
		Status = VL53L1_set_preset_mode(
 8001666:	9b07      	ldr	r3, [sp, #28]
 8001668:	9301      	str	r3, [sp, #4]
 800166a:	9b06      	ldr	r3, [sp, #24]
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8001672:	9702      	str	r7, [sp, #8]
 8001674:	9b05      	ldr	r3, [sp, #20]
 8001676:	4641      	mov	r1, r8
 8001678:	4628      	mov	r0, r5
 800167a:	f000 fc83 	bl	8001f84 <VL53L1_set_preset_mode>
			phasecal_config_timeout_us,
			mm_config_timeout_us,
			lld_range_config_timeout_us,
			inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 800167e:	b910      	cbnz	r0, 8001686 <SetPresetMode+0xba>
		VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8001680:	70ae      	strb	r6, [r5, #2]

	if (Status == VL53L1_ERROR_NONE)
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 8001682:	f885 437c 	strb.w	r4, [r5, #892]	; 0x37c

	LOG_FUNCTION_END(Status);
	return Status;
}
 8001686:	b008      	add	sp, #32
 8001688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 800168c:	aa08      	add	r2, sp, #32
 800168e:	4413      	add	r3, r2
 8001690:	f813 8c04 	ldrb.w	r8, [r3, #-4]
 8001694:	e7db      	b.n	800164e <SetPresetMode+0x82>
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8001696:	f06f 0007 	mvn.w	r0, #7
 800169a:	e7f4      	b.n	8001686 <SetPresetMode+0xba>

0800169c <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
				  FixPoint1616_t value)
{
 800169c:	b510      	push	{r4, lr}
	VL53L1_Error Status = VL53L1_ERROR_NONE;
	uint16_t tmpuint16; /* temporary variable */

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800169e:	b121      	cbz	r1, 80016aa <SetLimitValue+0xe>
 80016a0:	2901      	cmp	r1, #1
 80016a2:	d008      	beq.n	80016b6 <SetLimitValue+0x1a>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
		break;
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80016a4:	f06f 0003 	mvn.w	r0, #3
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 80016a8:	bd10      	pop	{r4, pc}
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 80016aa:	f3c2 318f 	ubfx	r1, r2, #14, #16
 80016ae:	f000 fd7f 	bl	80021b0 <VL53L1_set_lite_sigma_threshold>
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80016b2:	2000      	movs	r0, #0
		break;
 80016b4:	bd10      	pop	{r4, pc}
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 80016b6:	f3c2 214f 	ubfx	r1, r2, #9, #16
 80016ba:	f000 fd82 	bl	80021c2 <VL53L1_set_lite_min_count_rate>
 80016be:	e7f8      	b.n	80016b2 <SetLimitValue+0x16>

080016c0 <VL53L1_SetDeviceAddress>:
	Status = VL53L1_WrByte(Dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
 80016c0:	084a      	lsrs	r2, r1, #1
 80016c2:	2101      	movs	r1, #1
 80016c4:	f006 bcea 	b.w	800809c <VL53L1_WrByte>

080016c8 <VL53L1_WaitDeviceBooted>:
	Status = VL53L1_poll_for_boot_completion(Dev,
 80016c8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80016cc:	f002 ba68 	b.w	8003ba0 <VL53L1_poll_for_boot_completion>

080016d0 <VL53L1_SetDistanceMode>:
{
 80016d0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	    (DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 80016d4:	1e4b      	subs	r3, r1, #1
 80016d6:	b2db      	uxtb	r3, r3
	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 80016d8:	2b02      	cmp	r3, #2
{
 80016da:	4604      	mov	r4, r0
 80016dc:	460e      	mov	r6, r1
	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 80016de:	f890 737c 	ldrb.w	r7, [r0, #892]	; 0x37c
	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 80016e2:	d82d      	bhi.n	8001740 <VL53L1_SetDistanceMode+0x70>
 80016e4:	bf18      	it	ne
 80016e6:	460d      	movne	r5, r1
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 80016e8:	a903      	add	r1, sp, #12
			InternalDistanceMode = VL53L1_DISTANCEMODE_LONG;
 80016ea:	bf08      	it	eq
 80016ec:	2503      	moveq	r5, #3
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 80016ee:	f000 fba3 	bl	8001e38 <VL53L1_get_user_zone>
	if (Status == VL53L1_ERROR_NONE)
 80016f2:	bb10      	cbnz	r0, 800173a <VL53L1_SetDistanceMode+0x6a>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 80016f4:	466b      	mov	r3, sp
 80016f6:	aa01      	add	r2, sp, #4
 80016f8:	a902      	add	r1, sp, #8
 80016fa:	4620      	mov	r0, r4
	inter_measurement_period_ms = VL53L1DevDataGet(Dev,
 80016fc:	f8d4 8014 	ldr.w	r8, [r4, #20]
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8001700:	f000 fb3d 	bl	8001d7e <VL53L1_get_timeouts_us>
	if (Status == VL53L1_ERROR_NONE)
 8001704:	b9c8      	cbnz	r0, 800173a <VL53L1_SetDistanceMode+0x6a>
		Status = SetPresetMode(Dev,
 8001706:	4643      	mov	r3, r8
 8001708:	462a      	mov	r2, r5
 800170a:	4639      	mov	r1, r7
 800170c:	4620      	mov	r0, r4
 800170e:	f7ff ff5d 	bl	80015cc <SetPresetMode>
	if (Status == VL53L1_ERROR_NONE) {
 8001712:	b990      	cbnz	r0, 800173a <VL53L1_SetDistanceMode+0x6a>
		VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 8001714:	f884 537e 	strb.w	r5, [r4, #894]	; 0x37e
		VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 8001718:	f884 537f 	strb.w	r5, [r4, #895]	; 0x37f
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 800171c:	f884 637d 	strb.w	r6, [r4, #893]	; 0x37d
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8001720:	9b00      	ldr	r3, [sp, #0]
 8001722:	9a01      	ldr	r2, [sp, #4]
 8001724:	9902      	ldr	r1, [sp, #8]
 8001726:	4620      	mov	r0, r4
 8001728:	f000 fb11 	bl	8001d4e <VL53L1_set_timeouts_us>
		if (Status == VL53L1_ERROR_NONE)
 800172c:	b928      	cbnz	r0, 800173a <VL53L1_SetDistanceMode+0x6a>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 800172e:	9b00      	ldr	r3, [sp, #0]
 8001730:	6123      	str	r3, [r4, #16]
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 8001732:	a903      	add	r1, sp, #12
 8001734:	4620      	mov	r0, r4
 8001736:	f000 fb6e 	bl	8001e16 <VL53L1_set_user_zone>
}
 800173a:	b004      	add	sp, #16
 800173c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return VL53L1_ERROR_INVALID_PARAMS;
 8001740:	f06f 0003 	mvn.w	r0, #3
 8001744:	e7f9      	b.n	800173a <VL53L1_SetDistanceMode+0x6a>
	...

08001748 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:
{
 8001748:	b570      	push	{r4, r5, r6, lr}
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 800174a:	4b3e      	ldr	r3, [pc, #248]	; (8001844 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xfc>)
 800174c:	4299      	cmp	r1, r3
{
 800174e:	b086      	sub	sp, #24
 8001750:	4604      	mov	r4, r0
 8001752:	460d      	mov	r5, r1
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8001754:	d93d      	bls.n	80017d2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x8a>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8001756:	f06f 0003 	mvn.w	r0, #3
}
 800175a:	b006      	add	sp, #24
 800175c:	bd70      	pop	{r4, r5, r6, pc}
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800175e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d064      	beq.n	8001830 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe8>
 8001766:	f89d 3007 	ldrb.w	r3, [sp, #7]
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 800176a:	4837      	ldr	r0, [pc, #220]	; (8001848 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x100>)
 800176c:	2b01      	cmp	r3, #1
 800176e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001772:	f04f 0301 	mov.w	r3, #1
 8001776:	bf18      	it	ne
 8001778:	f44f 727a 	movne.w	r2, #1000	; 0x3e8
		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 800177c:	4295      	cmp	r5, r2
 800177e:	d9ea      	bls.n	8001756 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe>
					- TimingGuard);
 8001780:	1aaa      	subs	r2, r5, r2
			if (TimingBudget > FDAMaxTimingBudgetUs)
 8001782:	4282      	cmp	r2, r0
 8001784:	d8e7      	bhi.n	8001756 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe>
				TimingBudget /= divisor;
 8001786:	fbb2 f3f3 	udiv	r3, r2, r3
				Status = VL53L1_set_timeouts_us(
 800178a:	9904      	ldr	r1, [sp, #16]
 800178c:	9a03      	ldr	r2, [sp, #12]
				TimingBudget /= divisor;
 800178e:	9302      	str	r3, [sp, #8]
				Status = VL53L1_set_timeouts_us(
 8001790:	4620      	mov	r0, r4
 8001792:	f000 fadc 	bl	8001d4e <VL53L1_set_timeouts_us>
			if (Status == VL53L1_ERROR_NONE)
 8001796:	2800      	cmp	r0, #0
 8001798:	d1df      	bne.n	800175a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12>
				VL53L1DevDataSet(Dev,
 800179a:	9b02      	ldr	r3, [sp, #8]
 800179c:	6123      	str	r3, [r4, #16]
		VL53L1DevDataSet(Dev,
 800179e:	f8c4 5380 	str.w	r5, [r4, #896]	; 0x380
 80017a2:	e7da      	b.n	800175a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12>
			VL53L1_get_tuning_parm(Dev,
 80017a4:	aa05      	add	r2, sp, #20
 80017a6:	f248 0136 	movw	r1, #32822	; 0x8036
 80017aa:	4620      	mov	r0, r4
 80017ac:	f000 ff36 	bl	800261c <VL53L1_get_tuning_parm>
			if (vhv_loops > 0) {
 80017b0:	9b05      	ldr	r3, [sp, #20]
			FDAMaxTimingBudgetUs *= 2;
 80017b2:	4826      	ldr	r0, [pc, #152]	; (800184c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x104>)
			if (vhv_loops > 0) {
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f04f 02f5 	mov.w	r2, #245	; 0xf5
				vhv += vhv_loops *
 80017ba:	bfc4      	itt	gt
 80017bc:	435a      	mulgt	r2, r3
 80017be:	32f5      	addgt	r2, #245	; 0xf5
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 80017c0:	f602 52dc 	addw	r2, r2, #3548	; 0xddc
			divisor = 2;
 80017c4:	2302      	movs	r3, #2
			break;
 80017c6:	e7d9      	b.n	800177c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x34>
		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 80017c8:	2d00      	cmp	r5, #0
 80017ca:	d0c4      	beq.n	8001756 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe>
 80017cc:	f06f 0007 	mvn.w	r0, #7
 80017d0:	e7c3      	b.n	800175a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12>
{
	VL53L1_Error Status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 80017d2:	f10d 0206 	add.w	r2, sp, #6
 80017d6:	2105      	movs	r1, #5
 80017d8:	f000 fb0a 	bl	8001df0 <VL53L1_get_sequence_config_bit>
	if (Status == VL53L1_ERROR_NONE) {
 80017dc:	2800      	cmp	r0, #0
 80017de:	d1bc      	bne.n	800175a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12>
	Status = VL53L1_get_sequence_config_bit(Dev,
 80017e0:	f10d 0207 	add.w	r2, sp, #7
 80017e4:	2106      	movs	r1, #6
 80017e6:	4620      	mov	r0, r4
 80017e8:	f000 fb02 	bl	8001df0 <VL53L1_get_sequence_config_bit>
	if (Status == VL53L1_ERROR_NONE)
 80017ec:	2800      	cmp	r0, #0
 80017ee:	d1b4      	bne.n	800175a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12>
		Status = VL53L1_get_timeouts_us(Dev,
 80017f0:	ab02      	add	r3, sp, #8
 80017f2:	aa03      	add	r2, sp, #12
 80017f4:	a904      	add	r1, sp, #16
 80017f6:	4620      	mov	r0, r4
 80017f8:	f000 fac1 	bl	8001d7e <VL53L1_get_timeouts_us>
	if (Status == VL53L1_ERROR_NONE) {
 80017fc:	2800      	cmp	r0, #0
 80017fe:	d1ac      	bne.n	800175a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12>
		switch (PresetMode) {
 8001800:	f894 337c 	ldrb.w	r3, [r4, #892]	; 0x37c
 8001804:	2b04      	cmp	r3, #4
 8001806:	d0aa      	beq.n	800175e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x16>
 8001808:	2b08      	cmp	r3, #8
 800180a:	d0cb      	beq.n	80017a4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x5c>
 800180c:	2b03      	cmp	r3, #3
 800180e:	d1db      	bne.n	80017c8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x80>
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8001810:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d00f      	beq.n	8001838 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf0>
 8001818:	f89d 6007 	ldrb.w	r6, [sp, #7]
			FDAMaxTimingBudgetUs *= 2;
 800181c:	480b      	ldr	r0, [pc, #44]	; (800184c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x104>)
 800181e:	f245 4260 	movw	r2, #21600	; 0x5460
 8001822:	f246 71e8 	movw	r1, #26600	; 0x67e8
 8001826:	2302      	movs	r3, #2
 8001828:	2e01      	cmp	r6, #1
 800182a:	bf08      	it	eq
 800182c:	460a      	moveq	r2, r1
 800182e:	e7a5      	b.n	800177c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x34>
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8001830:	4805      	ldr	r0, [pc, #20]	; (8001848 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x100>)
				TimingGuard = 5000;
 8001832:	f241 3288 	movw	r2, #5000	; 0x1388
 8001836:	e7a1      	b.n	800177c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x34>
			FDAMaxTimingBudgetUs *= 2;
 8001838:	4804      	ldr	r0, [pc, #16]	; (800184c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x104>)
			divisor = 2;
 800183a:	2302      	movs	r3, #2
				TimingGuard = 26600;
 800183c:	f246 72e8 	movw	r2, #26600	; 0x67e8
 8001840:	e79c      	b.n	800177c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x34>
 8001842:	bf00      	nop
 8001844:	00989680 	.word	0x00989680
 8001848:	00086470 	.word	0x00086470
 800184c:	0010c8e0 	.word	0x0010c8e0

08001850 <VL53L1_SetPresetMode>:
{
 8001850:	b538      	push	{r3, r4, r5, lr}
	Status = SetPresetMode(Dev,
 8001852:	2203      	movs	r2, #3
 8001854:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 8001858:	4604      	mov	r4, r0
 800185a:	460d      	mov	r5, r1
	Status = SetPresetMode(Dev,
 800185c:	f7ff feb6 	bl	80015cc <SetPresetMode>
	if (Status == VL53L1_ERROR_NONE) {
 8001860:	b9c8      	cbnz	r0, 8001896 <VL53L1_SetPresetMode+0x46>
		VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 8001862:	2303      	movs	r3, #3
 8001864:	f884 337e 	strb.w	r3, [r4, #894]	; 0x37e
		VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 8001868:	f884 337f 	strb.w	r3, [r4, #895]	; 0x37f
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 800186c:	1eeb      	subs	r3, r5, #3
 800186e:	2b01      	cmp	r3, #1
 8001870:	d901      	bls.n	8001876 <VL53L1_SetPresetMode+0x26>
		    (PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8001872:	2d08      	cmp	r5, #8
 8001874:	d10c      	bne.n	8001890 <VL53L1_SetPresetMode+0x40>
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8001876:	f24a 0128 	movw	r1, #41000	; 0xa028
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 800187a:	4620      	mov	r0, r4
 800187c:	f7ff ff64 	bl	8001748 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
	if (Status == VL53L1_ERROR_NONE) {
 8001880:	b948      	cbnz	r0, 8001896 <VL53L1_SetPresetMode+0x46>
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 8001882:	4620      	mov	r0, r4
 8001884:	f44f 6185 	mov.w	r1, #1064	; 0x428
}
 8001888:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 800188c:	f000 ba46 	b.w	8001d1c <VL53L1_set_inter_measurement_period_ms>
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8001890:	f248 2135 	movw	r1, #33333	; 0x8235
 8001894:	e7f1      	b.n	800187a <VL53L1_SetPresetMode+0x2a>
}
 8001896:	bd38      	pop	{r3, r4, r5, pc}

08001898 <VL53L1_StaticInit>:
	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8001898:	2203      	movs	r2, #3
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 800189a:	2120      	movs	r1, #32
 800189c:	7081      	strb	r1, [r0, #2]
	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 800189e:	f880 2378 	strb.w	r2, [r0, #888]	; 0x378
	VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 80018a2:	f880 237f 	strb.w	r2, [r0, #895]	; 0x37f
	VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 80018a6:	f880 237e 	strb.w	r2, [r0, #894]	; 0x37e
	VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 80018aa:	f880 237d 	strb.w	r2, [r0, #893]	; 0x37d
	Status = VL53L1_SetPresetMode(Dev,
 80018ae:	2108      	movs	r1, #8
 80018b0:	f7ff bfce 	b.w	8001850 <VL53L1_SetPresetMode>

080018b4 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:
{
 80018b4:	b570      	push	{r4, r5, r6, lr}
	uint8_t Mm1Enabled = 0;
 80018b6:	2300      	movs	r3, #0
{
 80018b8:	b086      	sub	sp, #24
	*pMeasurementTimingBudgetMicroSeconds = 0;
 80018ba:	600b      	str	r3, [r1, #0]
{
 80018bc:	460c      	mov	r4, r1
	Status = VL53L1_get_sequence_config_bit(Dev,
 80018be:	f10d 0206 	add.w	r2, sp, #6
 80018c2:	2105      	movs	r1, #5
{
 80018c4:	4606      	mov	r6, r0
	uint8_t Mm1Enabled = 0;
 80018c6:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t Mm2Enabled = 0;
 80018ca:	f88d 3007 	strb.w	r3, [sp, #7]
	uint32_t MmTimeoutUs = 0;
 80018ce:	9302      	str	r3, [sp, #8]
	uint32_t RangeTimeoutUs = 0;
 80018d0:	9303      	str	r3, [sp, #12]
	uint32_t PhaseCalTimeoutUs = 0;
 80018d2:	9304      	str	r3, [sp, #16]
	Status = VL53L1_get_sequence_config_bit(Dev,
 80018d4:	f000 fa8c 	bl	8001df0 <VL53L1_get_sequence_config_bit>
	if (Status == VL53L1_ERROR_NONE)
 80018d8:	4605      	mov	r5, r0
 80018da:	2800      	cmp	r0, #0
 80018dc:	d151      	bne.n	8001982 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xce>
	Status = VL53L1_get_sequence_config_bit(Dev,
 80018de:	f10d 0207 	add.w	r2, sp, #7
 80018e2:	2106      	movs	r1, #6
 80018e4:	4630      	mov	r0, r6
 80018e6:	f000 fa83 	bl	8001df0 <VL53L1_get_sequence_config_bit>
	if (Status == VL53L1_ERROR_NONE)
 80018ea:	4605      	mov	r5, r0
 80018ec:	2800      	cmp	r0, #0
 80018ee:	d148      	bne.n	8001982 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xce>
		Status = VL53L1_get_timeouts_us(Dev,
 80018f0:	ab03      	add	r3, sp, #12
 80018f2:	aa02      	add	r2, sp, #8
 80018f4:	a904      	add	r1, sp, #16
 80018f6:	4630      	mov	r0, r6
 80018f8:	f000 fa41 	bl	8001d7e <VL53L1_get_timeouts_us>
	if (Status == VL53L1_ERROR_NONE) {
 80018fc:	4605      	mov	r5, r0
 80018fe:	2800      	cmp	r0, #0
 8001900:	d13f      	bne.n	8001982 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xce>
		switch (PresetMode) {
 8001902:	f896 337c 	ldrb.w	r3, [r6, #892]	; 0x37c
 8001906:	2b04      	cmp	r3, #4
 8001908:	d011      	beq.n	800192e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x7a>
 800190a:	2b08      	cmp	r3, #8
 800190c:	d024      	beq.n	8001958 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xa4>
 800190e:	2b03      	cmp	r3, #3
 8001910:	d135      	bne.n	800197e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xca>
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8001912:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001916:	2b01      	cmp	r3, #1
 8001918:	9b03      	ldr	r3, [sp, #12]
 800191a:	d003      	beq.n	8001924 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x70>
 800191c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001920:	2a01      	cmp	r2, #1
 8001922:	d115      	bne.n	8001950 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x9c>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 8001924:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 8001928:	3334      	adds	r3, #52	; 0x34
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	e00b      	b.n	8001946 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x92>
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800192e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001932:	2b01      	cmp	r3, #1
 8001934:	9b03      	ldr	r3, [sp, #12]
 8001936:	d003      	beq.n	8001940 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x8c>
 8001938:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800193c:	2a01      	cmp	r2, #1
 800193e:	d104      	bne.n	800194a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x96>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 8001940:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8001944:	3308      	adds	r3, #8
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 8001946:	6023      	str	r3, [r4, #0]
	return Status;
 8001948:	e01b      	b.n	8001982 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xce>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 800194a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800194e:	e7fa      	b.n	8001946 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x92>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 8001950:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8001954:	3330      	adds	r3, #48	; 0x30
 8001956:	e7e8      	b.n	800192a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x76>
			VL53L1_get_tuning_parm(Dev,
 8001958:	aa05      	add	r2, sp, #20
 800195a:	f248 0136 	movw	r1, #32822	; 0x8036
 800195e:	4630      	mov	r0, r6
 8001960:	f000 fe5c 	bl	800261c <VL53L1_get_tuning_parm>
			if (vhv_loops > 0) {
 8001964:	9a05      	ldr	r2, [sp, #20]
 8001966:	23f5      	movs	r3, #245	; 0xf5
 8001968:	2a00      	cmp	r2, #0
				vhv += vhv_loops *
 800196a:	bfc8      	it	gt
 800196c:	4353      	mulgt	r3, r2
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 800196e:	9a03      	ldr	r2, [sp, #12]
				vhv += vhv_loops *
 8001970:	bfc8      	it	gt
 8001972:	33f5      	addgt	r3, #245	; 0xf5
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 8001974:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8001978:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
			break;
 800197c:	e7e3      	b.n	8001946 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x92>
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800197e:	f06f 0507 	mvn.w	r5, #7
}
 8001982:	4628      	mov	r0, r5
 8001984:	b006      	add	sp, #24
 8001986:	bd70      	pop	{r4, r5, r6, pc}

08001988 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:
	adjustedIMP += (adjustedIMP * 64) / 1000;
 8001988:	018b      	lsls	r3, r1, #6
 800198a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800198e:	fbb3 f3f2 	udiv	r3, r3, r2
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 8001992:	4419      	add	r1, r3
 8001994:	f000 b9c2 	b.w	8001d1c <VL53L1_set_inter_measurement_period_ms>

08001998 <VL53L1_GetInterMeasurementPeriodMilliSeconds>:
{
 8001998:	b513      	push	{r0, r1, r4, lr}
 800199a:	460c      	mov	r4, r1
	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 800199c:	a901      	add	r1, sp, #4
 800199e:	f000 f9c9 	bl	8001d34 <VL53L1_get_inter_measurement_period_ms>
	adjustedIMP -= (adjustedIMP * 64) / 1000;
 80019a2:	9b01      	ldr	r3, [sp, #4]
 80019a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019a8:	019a      	lsls	r2, r3, #6
 80019aa:	fbb2 f2f1 	udiv	r2, r2, r1
 80019ae:	1a9b      	subs	r3, r3, r2
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 80019b0:	6023      	str	r3, [r4, #0]
}
 80019b2:	b002      	add	sp, #8
 80019b4:	bd10      	pop	{r4, pc}

080019b6 <VL53L1_SetLimitCheckEnable>:
	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 80019b6:	2901      	cmp	r1, #1
{
 80019b8:	b570      	push	{r4, r5, r6, lr}
 80019ba:	4604      	mov	r4, r0
 80019bc:	460e      	mov	r6, r1
 80019be:	4615      	mov	r5, r2
	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 80019c0:	d811      	bhi.n	80019e6 <VL53L1_SetLimitCheckEnable+0x30>
		if (LimitCheckEnable == 0)
 80019c2:	b17a      	cbz	r2, 80019e4 <VL53L1_SetLimitCheckEnable+0x2e>
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80019c4:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80019c8:	f8d3 2388 	ldr.w	r2, [r3, #904]	; 0x388
		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 80019cc:	4631      	mov	r1, r6
 80019ce:	4620      	mov	r0, r4
 80019d0:	f7ff fe64 	bl	800169c <SetLimitValue>
	if (Status == VL53L1_ERROR_NONE)
 80019d4:	b948      	cbnz	r0, 80019ea <VL53L1_SetLimitCheckEnable+0x34>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80019d6:	3500      	adds	r5, #0
 80019d8:	4434      	add	r4, r6
 80019da:	bf18      	it	ne
 80019dc:	2501      	movne	r5, #1
 80019de:	f884 5384 	strb.w	r5, [r4, #900]	; 0x384
 80019e2:	bd70      	pop	{r4, r5, r6, pc}
 80019e4:	e7f2      	b.n	80019cc <VL53L1_SetLimitCheckEnable+0x16>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80019e6:	f06f 0003 	mvn.w	r0, #3
}
 80019ea:	bd70      	pop	{r4, r5, r6, pc}

080019ec <VL53L1_SetLimitCheckValue>:
	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 80019ec:	2901      	cmp	r1, #1
{
 80019ee:	b570      	push	{r4, r5, r6, lr}
 80019f0:	4604      	mov	r4, r0
 80019f2:	460d      	mov	r5, r1
 80019f4:	4616      	mov	r6, r2
	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 80019f6:	d811      	bhi.n	8001a1c <VL53L1_SetLimitCheckValue+0x30>
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80019f8:	1843      	adds	r3, r0, r1
		if (LimitChecksEnable == 0) {
 80019fa:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 80019fe:	b92b      	cbnz	r3, 8001a0c <VL53L1_SetLimitCheckValue+0x20>
			VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001a00:	eb00 0481 	add.w	r4, r0, r1, lsl #2
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001a04:	4618      	mov	r0, r3
			VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001a06:	f8c4 2388 	str.w	r2, [r4, #904]	; 0x388
 8001a0a:	bd70      	pop	{r4, r5, r6, pc}
			Status = SetLimitValue(Dev, LimitCheckId,
 8001a0c:	f7ff fe46 	bl	800169c <SetLimitValue>
			if (Status == VL53L1_ERROR_NONE) {
 8001a10:	b930      	cbnz	r0, 8001a20 <VL53L1_SetLimitCheckValue+0x34>
				VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8001a12:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8001a16:	f8c4 6388 	str.w	r6, [r4, #904]	; 0x388
 8001a1a:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8001a1c:	f06f 0003 	mvn.w	r0, #3
}
 8001a20:	bd70      	pop	{r4, r5, r6, pc}

08001a22 <VL53L1_DataInit>:
{
 8001a22:	b538      	push	{r3, r4, r5, lr}
		Status = VL53L1_data_init(Dev, 1);
 8001a24:	2101      	movs	r1, #1
{
 8001a26:	4604      	mov	r4, r0
		Status = VL53L1_data_init(Dev, 1);
 8001a28:	f000 fb64 	bl	80020f4 <VL53L1_data_init>
	if (Status == VL53L1_ERROR_NONE) {
 8001a2c:	bb00      	cbnz	r0, 8001a70 <VL53L1_DataInit+0x4e>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 8001a2e:	2501      	movs	r5, #1
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 8001a30:	2308      	movs	r3, #8
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 8001a32:	4601      	mov	r1, r0
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 8001a34:	f884 5378 	strb.w	r5, [r4, #888]	; 0x378
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 8001a38:	f884 337c 	strb.w	r3, [r4, #892]	; 0x37c
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 8001a3c:	462a      	mov	r2, r5
 8001a3e:	4620      	mov	r0, r4
 8001a40:	f7ff ffb9 	bl	80019b6 <VL53L1_SetLimitCheckEnable>
		if (Status == VL53L1_ERROR_NONE)
 8001a44:	b9a0      	cbnz	r0, 8001a70 <VL53L1_DataInit+0x4e>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 8001a46:	462a      	mov	r2, r5
 8001a48:	4629      	mov	r1, r5
 8001a4a:	4620      	mov	r0, r4
 8001a4c:	f7ff ffb3 	bl	80019b6 <VL53L1_SetLimitCheckEnable>
	if (Status == VL53L1_ERROR_NONE) {
 8001a50:	b970      	cbnz	r0, 8001a70 <VL53L1_DataInit+0x4e>
		Status = VL53L1_SetLimitCheckValue(Dev,
 8001a52:	4601      	mov	r1, r0
 8001a54:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8001a58:	4620      	mov	r0, r4
 8001a5a:	f7ff ffc7 	bl	80019ec <VL53L1_SetLimitCheckValue>
	if (Status == VL53L1_ERROR_NONE) {
 8001a5e:	b938      	cbnz	r0, 8001a70 <VL53L1_DataInit+0x4e>
		Status = VL53L1_SetLimitCheckValue(Dev,
 8001a60:	4629      	mov	r1, r5
 8001a62:	4620      	mov	r0, r4
 8001a64:	f44f 4280 	mov.w	r2, #16384	; 0x4000
}
 8001a68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		Status = VL53L1_SetLimitCheckValue(Dev,
 8001a6c:	f7ff bfbe 	b.w	80019ec <VL53L1_SetLimitCheckValue>
}
 8001a70:	bd38      	pop	{r3, r4, r5, pc}

08001a72 <VL53L1_GetLimitCheckValue>:
{
 8001a72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001a74:	4605      	mov	r5, r0
 8001a76:	4616      	mov	r6, r2
	switch (LimitCheckId) {
 8001a78:	460c      	mov	r4, r1
 8001a7a:	b121      	cbz	r1, 8001a86 <VL53L1_GetLimitCheckValue+0x14>
 8001a7c:	2901      	cmp	r1, #1
 8001a7e:	d016      	beq.n	8001aae <VL53L1_GetLimitCheckValue+0x3c>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8001a80:	f06f 0003 	mvn.w	r0, #3
 8001a84:	e011      	b.n	8001aaa <VL53L1_GetLimitCheckValue+0x38>
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 8001a86:	f10d 0106 	add.w	r1, sp, #6
 8001a8a:	f000 fb8c 	bl	80021a6 <VL53L1_get_lite_sigma_threshold>
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 8001a8e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001a92:	039b      	lsls	r3, r3, #14
	if (Status == VL53L1_ERROR_NONE) {
 8001a94:	b948      	cbnz	r0, 8001aaa <VL53L1_GetLimitCheckValue+0x38>
 8001a96:	f104 02e0 	add.w	r2, r4, #224	; 0xe0
 8001a9a:	442c      	add	r4, r5
		if (TempFix1616 == 0) {
 8001a9c:	b973      	cbnz	r3, 8001abc <VL53L1_GetLimitCheckValue+0x4a>
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 8001a9e:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 8001aa2:	68ab      	ldr	r3, [r5, #8]
			*pLimitCheckValue = TempFix1616;
 8001aa4:	6033      	str	r3, [r6, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8001aa6:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
}
 8001aaa:	b002      	add	sp, #8
 8001aac:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 8001aae:	a901      	add	r1, sp, #4
 8001ab0:	f000 fb82 	bl	80021b8 <VL53L1_get_lite_min_count_rate>
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 8001ab4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001ab8:	025b      	lsls	r3, r3, #9
		break;
 8001aba:	e7eb      	b.n	8001a94 <VL53L1_GetLimitCheckValue+0x22>
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8001abc:	eb05 0582 	add.w	r5, r5, r2, lsl #2
			*pLimitCheckValue = TempFix1616;
 8001ac0:	6033      	str	r3, [r6, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8001ac2:	60ab      	str	r3, [r5, #8]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
 8001aca:	e7ee      	b.n	8001aaa <VL53L1_GetLimitCheckValue+0x38>

08001acc <VL53L1_StartMeasurement>:
/* Group PAL Measurement Functions */



VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 8001acc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint32_t MTBus, IMPms;

	LOG_FUNCTION_START("");

	CurrPalState = VL53L1DevDataGet(Dev, PalState);
	switch (CurrPalState) {
 8001ace:	f890 3378 	ldrb.w	r3, [r0, #888]	; 0x378
 8001ad2:	2b05      	cmp	r3, #5
{
 8001ad4:	4604      	mov	r4, r0
	switch (CurrPalState) {
 8001ad6:	d807      	bhi.n	8001ae8 <VL53L1_StartMeasurement+0x1c>
 8001ad8:	2b04      	cmp	r3, #4
 8001ada:	d201      	bcs.n	8001ae0 <VL53L1_StartMeasurement+0x14>
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d80c      	bhi.n	8001afa <VL53L1_StartMeasurement+0x2e>
 8001ae0:	f06f 000d 	mvn.w	r0, #13
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);


	LOG_FUNCTION_END(Status);
	return Status;
}
 8001ae4:	b003      	add	sp, #12
 8001ae6:	bd30      	pop	{r4, r5, pc}
	switch (CurrPalState) {
 8001ae8:	3b62      	subs	r3, #98	; 0x62
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d9f8      	bls.n	8001ae0 <VL53L1_StartMeasurement+0x14>
		Status = VL53L1_ERROR_UNDEFINED;
 8001aee:	f06f 0002 	mvn.w	r0, #2
 8001af2:	e7f7      	b.n	8001ae4 <VL53L1_StartMeasurement+0x18>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8001af4:	f06f 0003 	mvn.w	r0, #3
 8001af8:	e7f4      	b.n	8001ae4 <VL53L1_StartMeasurement+0x18>
	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8001afa:	7885      	ldrb	r5, [r0, #2]
	if ((Status == VL53L1_ERROR_NONE) &&
 8001afc:	2d40      	cmp	r5, #64	; 0x40
 8001afe:	d111      	bne.n	8001b24 <VL53L1_StartMeasurement+0x58>
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8001b00:	4669      	mov	r1, sp
 8001b02:	f7ff fed7 	bl	80018b4 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 8001b06:	a901      	add	r1, sp, #4
 8001b08:	4620      	mov	r0, r4
		MTBus /= 1000;
 8001b0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b0e:	9b00      	ldr	r3, [sp, #0]
 8001b10:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b14:	9300      	str	r3, [sp, #0]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 8001b16:	f7ff ff3f 	bl	8001998 <VL53L1_GetInterMeasurementPeriodMilliSeconds>
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 8001b1a:	9b00      	ldr	r3, [sp, #0]
 8001b1c:	9a01      	ldr	r2, [sp, #4]
 8001b1e:	3304      	adds	r3, #4
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d8e7      	bhi.n	8001af4 <VL53L1_StartMeasurement+0x28>
		Status = VL53L1_init_and_start_range(
 8001b24:	2206      	movs	r2, #6
 8001b26:	4629      	mov	r1, r5
 8001b28:	4620      	mov	r0, r4
 8001b2a:	f000 fb4f 	bl	80021cc <VL53L1_init_and_start_range>
	if (Status == VL53L1_ERROR_NONE)
 8001b2e:	2800      	cmp	r0, #0
 8001b30:	d1d8      	bne.n	8001ae4 <VL53L1_StartMeasurement+0x18>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 8001b32:	2304      	movs	r3, #4
 8001b34:	f884 3378 	strb.w	r3, [r4, #888]	; 0x378
 8001b38:	e7d4      	b.n	8001ae4 <VL53L1_StartMeasurement+0x18>

08001b3a <VL53L1_ClearInterruptAndStartMeasurement>:
	return Status;
}


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 8001b3a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	InternalDistanceMode = VL53L1DevDataGet(Dev,
						CurrentParameters.InternalDistanceMode);
	NewDistanceMode = VL53L1DevDataGet(Dev,
					   CurrentParameters.NewDistanceMode);

	if (NewDistanceMode != InternalDistanceMode)
 8001b3c:	f890 237e 	ldrb.w	r2, [r0, #894]	; 0x37e
 8001b40:	f890 337f 	ldrb.w	r3, [r0, #895]	; 0x37f
 8001b44:	429a      	cmp	r2, r3
{
 8001b46:	4604      	mov	r4, r0
	if (NewDistanceMode != InternalDistanceMode)
 8001b48:	d037      	beq.n	8001bba <VL53L1_ClearInterruptAndStartMeasurement+0x80>
	Status = VL53L1_get_user_zone(Dev, &user_zone);
 8001b4a:	4669      	mov	r1, sp
 8001b4c:	f000 f974 	bl	8001e38 <VL53L1_get_user_zone>
	if (Status == VL53L1_ERROR_NONE)
 8001b50:	bb88      	cbnz	r0, 8001bb6 <VL53L1_ClearInterruptAndStartMeasurement+0x7c>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8001b52:	ab01      	add	r3, sp, #4
 8001b54:	aa02      	add	r2, sp, #8
 8001b56:	a903      	add	r1, sp, #12
 8001b58:	4620      	mov	r0, r4
	PresetMode = VL53L1DevDataGet(Dev,
 8001b5a:	f894 637c 	ldrb.w	r6, [r4, #892]	; 0x37c
	NewDistanceMode = VL53L1DevDataGet(Dev,
 8001b5e:	f894 537f 	ldrb.w	r5, [r4, #895]	; 0x37f
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8001b62:	f000 f90c 	bl	8001d7e <VL53L1_get_timeouts_us>
	if (Status == VL53L1_ERROR_NONE)
 8001b66:	bb30      	cbnz	r0, 8001bb6 <VL53L1_ClearInterruptAndStartMeasurement+0x7c>
		Status = VL53L1_stop_range(Dev);
 8001b68:	4620      	mov	r0, r4
 8001b6a:	f000 fc09 	bl	8002380 <VL53L1_stop_range>
	if (Status == VL53L1_ERROR_NONE)
 8001b6e:	bb10      	cbnz	r0, 8001bb6 <VL53L1_ClearInterruptAndStartMeasurement+0x7c>
		Status = VL53L1_WaitUs(Dev, 500);
 8001b70:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001b74:	4620      	mov	r0, r4
 8001b76:	f006 fad9 	bl	800812c <VL53L1_WaitUs>
	if (Status == VL53L1_ERROR_NONE) {
 8001b7a:	b9e0      	cbnz	r0, 8001bb6 <VL53L1_ClearInterruptAndStartMeasurement+0x7c>
		Status = SetPresetMode(Dev,
 8001b7c:	6963      	ldr	r3, [r4, #20]
 8001b7e:	462a      	mov	r2, r5
 8001b80:	4631      	mov	r1, r6
 8001b82:	4620      	mov	r0, r4
 8001b84:	f7ff fd22 	bl	80015cc <SetPresetMode>
	if (Status == VL53L1_ERROR_NONE) {
 8001b88:	b9a8      	cbnz	r0, 8001bb6 <VL53L1_ClearInterruptAndStartMeasurement+0x7c>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8001b8a:	9b01      	ldr	r3, [sp, #4]
 8001b8c:	9a02      	ldr	r2, [sp, #8]
 8001b8e:	9903      	ldr	r1, [sp, #12]
 8001b90:	4620      	mov	r0, r4
 8001b92:	f000 f8dc 	bl	8001d4e <VL53L1_set_timeouts_us>
		if (Status == VL53L1_ERROR_NONE)
 8001b96:	b970      	cbnz	r0, 8001bb6 <VL53L1_ClearInterruptAndStartMeasurement+0x7c>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 8001b98:	9b01      	ldr	r3, [sp, #4]
 8001b9a:	6123      	str	r3, [r4, #16]
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 8001b9c:	4669      	mov	r1, sp
 8001b9e:	4620      	mov	r0, r4
 8001ba0:	f000 f939 	bl	8001e16 <VL53L1_set_user_zone>
	if (Status == VL53L1_ERROR_NONE) {
 8001ba4:	b938      	cbnz	r0, 8001bb6 <VL53L1_ClearInterruptAndStartMeasurement+0x7c>
		Status = VL53L1_init_and_start_range(
 8001ba6:	2206      	movs	r2, #6
 8001ba8:	78a1      	ldrb	r1, [r4, #2]
 8001baa:	4620      	mov	r0, r4
 8001bac:	f000 fb0e 	bl	80021cc <VL53L1_init_and_start_range>
	if (Status == VL53L1_ERROR_NONE)
 8001bb0:	b908      	cbnz	r0, 8001bb6 <VL53L1_ClearInterruptAndStartMeasurement+0x7c>
		VL53L1DevDataSet(Dev,
 8001bb2:	f884 537e 	strb.w	r5, [r4, #894]	; 0x37e
			Dev,
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
}
 8001bb6:	b004      	add	sp, #16
 8001bb8:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L1_clear_interrupt_and_enable_next_range(
 8001bba:	7881      	ldrb	r1, [r0, #2]
 8001bbc:	f000 fc30 	bl	8002420 <VL53L1_clear_interrupt_and_enable_next_range>
 8001bc0:	e7f9      	b.n	8001bb6 <VL53L1_ClearInterruptAndStartMeasurement+0x7c>

08001bc2 <VL53L1_WaitMeasurementDataReady>:

	/* Note that the timeout is given by:
	 * VL53L1_RANGE_COMPLETION_POLLING_TIMEOUT_MS defined in def.h
	 */

	Status = VL53L1_poll_for_range_completion(Dev,
 8001bc2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001bc6:	f002 b805 	b.w	8003bd4 <VL53L1_poll_for_range_completion>
	...

08001bcc <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
					      VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 8001bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bce:	460c      	mov	r4, r1
 8001bd0:	b0a3      	sub	sp, #140	; 0x8c
 8001bd2:	4605      	mov	r5, r0

	LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 8001bd4:	221c      	movs	r2, #28
 8001bd6:	21ff      	movs	r1, #255	; 0xff
 8001bd8:	4620      	mov	r0, r4
 8001bda:	f006 fcca 	bl	8008572 <memset>
	       sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 8001bde:	aa01      	add	r2, sp, #4
 8001be0:	2102      	movs	r1, #2
 8001be2:	4628      	mov	r0, r5
 8001be4:	f000 fcd4 	bl	8002590 <VL53L1_get_device_results>
		Dev,
		VL53L1_DEVICERESULTSLEVEL_FULL,
		presults);

	if (Status == VL53L1_ERROR_NONE) {
 8001be8:	2800      	cmp	r0, #0
 8001bea:	f040 8088 	bne.w	8001cfe <VL53L1_GetRangingMeasurementData+0x132>
	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8001bee:	f89d 6046 	ldrb.w	r6, [sp, #70]	; 0x46
		pRangingMeasurementData->StreamCount = presults->stream_count;
 8001bf2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001bf6:	7123      	strb	r3, [r4, #4]
	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8001bf8:	f006 061f 	and.w	r6, r6, #31
	pRangeData->TimeStamp = presults_data->time_stamp;
 8001bfc:	9b03      	ldr	r3, [sp, #12]

		/* in case of lite ranging or autonomous the following function
		 * returns index = 0
		 */
		presults_data = &(presults->data[0]);
		Status = SetSimpleData(Dev, 1,
 8001bfe:	f89d 1007 	ldrb.w	r1, [sp, #7]
	pRangeData->TimeStamp = presults_data->time_stamp;
 8001c02:	6023      	str	r3, [r4, #0]
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 8001c04:	2e07      	cmp	r6, #7
 8001c06:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 8001c0a:	d039      	beq.n	8001c80 <VL53L1_GetRangingMeasurementData+0xb4>
		if (presults_data->median_range_mm < SRL)
 8001c0c:	f9bd 2044 	ldrsh.w	r2, [sp, #68]	; 0x44
 8001c10:	f5b2 7f96 	cmp.w	r2, #300	; 0x12c
			RAS = LRAP * presults_data->median_range_mm;
 8001c14:	bfa6      	itte	ge
 8001c16:	f641 139a 	movwge	r3, #6554	; 0x199a
 8001c1a:	fb12 f203 	smulbbge	r2, r2, r3
			RAS = SRAS * 65536;
 8001c1e:	f44f 12f0 	movlt.w	r2, #1966080	; 0x1e0000
			partial = partial + (RAS >> 1);
 8001c22:	4b3a      	ldr	r3, [pc, #232]	; (8001d0c <VL53L1_GetRangingMeasurementData+0x140>)
 8001c24:	0857      	lsrs	r7, r2, #1
 8001c26:	fb03 7300 	mla	r3, r3, r0, r7
			partial = partial / RAS;
 8001c2a:	fbb3 f3f2 	udiv	r3, r3, r2
			partial = partial * 65536;
 8001c2e:	041a      	lsls	r2, r3, #16
			if (partial <= GI)
 8001c30:	4b37      	ldr	r3, [pc, #220]	; (8001d10 <VL53L1_GetRangingMeasurementData+0x144>)
 8001c32:	429a      	cmp	r2, r3
				SRQL = GI - partial;
 8001c34:	bf94      	ite	ls
 8001c36:	1a9b      	subls	r3, r3, r2
				SRQL = 50 * 65536;
 8001c38:	f44f 1348 	movhi.w	r3, #3276800	; 0x320000
		finalvalue = (uint8_t)(SRQL >> 16);
 8001c3c:	0c1b      	lsrs	r3, r3, #16
		returnvalue = MAX(50, MIN(100, finalvalue));
 8001c3e:	2b32      	cmp	r3, #50	; 0x32
 8001c40:	d91e      	bls.n	8001c80 <VL53L1_GetRangingMeasurementData+0xb4>
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b64      	cmp	r3, #100	; 0x64
 8001c46:	bf28      	it	cs
 8001c48:	2364      	movcs	r3, #100	; 0x64
	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8001c4a:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 8001c4e:	7163      	strb	r3, [r4, #5]
	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8001c50:	0252      	lsls	r2, r2, #9
	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8001c52:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8001c56:	60e2      	str	r2, [r4, #12]
	pRangeData->EffectiveSpadRtnCount =
 8001c58:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8001c5c:	8222      	strh	r2, [r4, #16]
	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8001c5e:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 8001c62:	8322      	strh	r2, [r4, #24]
	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8001c64:	025b      	lsls	r3, r3, #9
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8001c66:	0240      	lsls	r0, r0, #9
	pRangeData->RangeFractionalPart = 0;
 8001c68:	2200      	movs	r2, #0
	switch (device_status) {
 8001c6a:	290d      	cmp	r1, #13
		= SignalRate;
 8001c6c:	60a3      	str	r3, [r4, #8]
	pRangeData->SigmaMilliMeter = TempFix1616;
 8001c6e:	6160      	str	r0, [r4, #20]
	pRangeData->RangeFractionalPart = 0;
 8001c70:	76a2      	strb	r2, [r4, #26]
	switch (device_status) {
 8001c72:	d00b      	beq.n	8001c8c <VL53L1_GetRangingMeasurementData+0xc0>
 8001c74:	d806      	bhi.n	8001c84 <VL53L1_GetRangingMeasurementData+0xb8>
 8001c76:	3901      	subs	r1, #1
 8001c78:	2902      	cmp	r1, #2
 8001c7a:	d805      	bhi.n	8001c88 <VL53L1_GetRangingMeasurementData+0xbc>
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 8001c7c:	2205      	movs	r2, #5
 8001c7e:	e003      	b.n	8001c88 <VL53L1_GetRangingMeasurementData+0xbc>
		returnvalue = 50;
 8001c80:	2332      	movs	r3, #50	; 0x32
 8001c82:	e7e2      	b.n	8001c4a <VL53L1_GetRangingMeasurementData+0x7e>
	switch (device_status) {
 8001c84:	2911      	cmp	r1, #17
 8001c86:	d0f9      	beq.n	8001c7c <VL53L1_GetRangingMeasurementData+0xb0>
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8001c88:	76e2      	strb	r2, [r4, #27]
 8001c8a:	e000      	b.n	8001c8e <VL53L1_GetRangingMeasurementData+0xc2>
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 8001c8c:	76e1      	strb	r1, [r4, #27]
	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 8001c8e:	7ee2      	ldrb	r2, [r4, #27]
 8001c90:	b93a      	cbnz	r2, 8001ca2 <VL53L1_GetRangingMeasurementData+0xd6>
 8001c92:	1f32      	subs	r2, r6, #4
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	2a0f      	cmp	r2, #15
 8001c98:	bf96      	itet	ls
 8001c9a:	491e      	ldrls	r1, [pc, #120]	; (8001d14 <VL53L1_GetRangingMeasurementData+0x148>)
 8001c9c:	22ff      	movhi	r2, #255	; 0xff
 8001c9e:	5c8a      	ldrbls	r2, [r1, r2]
		pRangeData->RangeStatus =
 8001ca0:	76e2      	strb	r2, [r4, #27]
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8001ca2:	f8c5 0390 	str.w	r0, [r5, #912]	; 0x390
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8001ca6:	f8c5 3394 	str.w	r3, [r5, #916]	; 0x394
	VL53L1_GetLimitCheckValue(Dev,
 8001caa:	466a      	mov	r2, sp
 8001cac:	2100      	movs	r1, #0
 8001cae:	4628      	mov	r0, r5
 8001cb0:	f7ff fedf 	bl	8001a72 <VL53L1_GetLimitCheckValue>
	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 8001cb4:	f895 3384 	ldrb.w	r3, [r5, #900]	; 0x384
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d122      	bne.n	8001d02 <VL53L1_GetRangingMeasurementData+0x136>
 8001cbc:	1fb2      	subs	r2, r6, #6
 8001cbe:	4253      	negs	r3, r2
 8001cc0:	4153      	adcs	r3, r2
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8001cc2:	f885 3386 	strb.w	r3, [r5, #902]	; 0x386
	VL53L1_GetLimitCheckValue(Dev,
 8001cc6:	466a      	mov	r2, sp
 8001cc8:	2101      	movs	r1, #1
 8001cca:	4628      	mov	r0, r5
 8001ccc:	f7ff fed1 	bl	8001a72 <VL53L1_GetLimitCheckValue>
	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 8001cd0:	f895 3385 	ldrb.w	r3, [r5, #901]	; 0x385
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d116      	bne.n	8001d06 <VL53L1_GetRangingMeasurementData+0x13a>
 8001cd8:	1f33      	subs	r3, r6, #4
 8001cda:	425e      	negs	r6, r3
 8001cdc:	415e      	adcs	r6, r3
 8001cde:	f885 6387 	strb.w	r6, [r5, #903]	; 0x387
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8001ce2:	7ee3      	ldrb	r3, [r4, #27]
 8001ce4:	b953      	cbnz	r3, 8001cfc <VL53L1_GetRangingMeasurementData+0x130>
	Range = pRangeData->RangeMilliMeter;
 8001ce6:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8001cea:	2a00      	cmp	r2, #0
 8001cec:	da06      	bge.n	8001cfc <VL53L1_GetRangingMeasurementData+0x130>
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 8001cee:	490a      	ldr	r1, [pc, #40]	; (8001d18 <VL53L1_GetRangingMeasurementData+0x14c>)
 8001cf0:	6849      	ldr	r1, [r1, #4]
 8001cf2:	428a      	cmp	r2, r1
			pRangeData->RangeStatus =
 8001cf4:	bfba      	itte	lt
 8001cf6:	230e      	movlt	r3, #14
 8001cf8:	76e3      	strblt	r3, [r4, #27]
			pRangeData->RangeMilliMeter = 0;
 8001cfa:	8323      	strhge	r3, [r4, #24]
		Status = SetSimpleData(Dev, 1,
 8001cfc:	2000      	movs	r0, #0
				       pRangingMeasurementData);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8001cfe:	b023      	add	sp, #140	; 0x8c
 8001d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	e7dd      	b.n	8001cc2 <VL53L1_GetRangingMeasurementData+0xf6>
	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 8001d06:	2600      	movs	r6, #0
 8001d08:	e7e9      	b.n	8001cde <VL53L1_GetRangingMeasurementData+0x112>
 8001d0a:	bf00      	nop
 8001d0c:	0030cccd 	.word	0x0030cccd
 8001d10:	0075b333 	.word	0x0075b333
 8001d14:	0800aba5 	.word	0x0800aba5
 8001d18:	20000164 	.word	0x20000164

08001d1c <VL53L1_set_inter_measurement_period_ms>:
	VL53L1_Error status = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8001d1c:	f8b0 32b4 	ldrh.w	r3, [r0, #692]	; 0x2b4
 8001d20:	b913      	cbnz	r3, 8001d28 <VL53L1_set_inter_measurement_period_ms+0xc>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8001d22:	f06f 000e 	mvn.w	r0, #14
 8001d26:	4770      	bx	lr

	if (status == VL53L1_ERROR_NONE) {
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8001d28:	6141      	str	r1, [r0, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
 8001d2a:	4359      	muls	r1, r3
		pdev->tim_cfg.system__intermeasurement_period = \
 8001d2c:	f8c0 11ac 	str.w	r1, [r0, #428]	; 0x1ac
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8001d30:	2000      	movs	r0, #0
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8001d32:	4770      	bx	lr

08001d34 <VL53L1_get_inter_measurement_period_ms>:
	VL53L1_Error status = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8001d34:	f8b0 22b4 	ldrh.w	r2, [r0, #692]	; 0x2b4
 8001d38:	b912      	cbnz	r2, 8001d40 <VL53L1_get_inter_measurement_period_ms+0xc>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8001d3a:	f06f 000e 	mvn.w	r0, #14
 8001d3e:	4770      	bx	lr

	if (status == VL53L1_ERROR_NONE)
		*pinter_measurement_period_ms = \
			pdev->tim_cfg.system__intermeasurement_period /
 8001d40:	f8d0 31ac 	ldr.w	r3, [r0, #428]	; 0x1ac
 8001d44:	fbb3 f3f2 	udiv	r3, r3, r2
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8001d48:	2000      	movs	r0, #0
		*pinter_measurement_period_ms = \
 8001d4a:	600b      	str	r3, [r1, #0]


	LOG_FUNCTION_END(status);

	return status;
}
 8001d4c:	4770      	bx	lr

08001d4e <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV Dev,
	uint32_t phasecal_config_timeout_us,
	uint32_t mm_config_timeout_us,
	uint32_t range_config_timeout_us)
{
 8001d4e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001d50:	460d      	mov	r5, r1
 8001d52:	4611      	mov	r1, r2
 8001d54:	461a      	mov	r2, r3
	VL53L1_LLDriverData_t *pdev =
		VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8001d56:	f8b0 315e 	ldrh.w	r3, [r0, #350]	; 0x15e
 8001d5a:	b91b      	cbnz	r3, 8001d64 <VL53L1_set_timeouts_us+0x16>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8001d5c:	f06f 000e 	mvn.w	r0, #14
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8001d60:	b003      	add	sp, #12
 8001d62:	bd30      	pop	{r4, r5, pc}
		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8001d64:	6085      	str	r5, [r0, #8]
		pdev->mm_config_timeout_us = mm_config_timeout_us;
 8001d66:	60c1      	str	r1, [r0, #12]
		pdev->range_config_timeout_us = range_config_timeout_us;
 8001d68:	6102      	str	r2, [r0, #16]
			VL53L1_calc_timeout_register_values(
 8001d6a:	f500 74ce 	add.w	r4, r0, #412	; 0x19c
 8001d6e:	f500 70c2 	add.w	r0, r0, #388	; 0x184
		status =
 8001d72:	9000      	str	r0, [sp, #0]
 8001d74:	9401      	str	r4, [sp, #4]
 8001d76:	4628      	mov	r0, r5
 8001d78:	f001 f94d 	bl	8003016 <VL53L1_calc_timeout_register_values>
	return status;
 8001d7c:	e7f0      	b.n	8001d60 <VL53L1_set_timeouts_us+0x12>

08001d7e <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t                        *prange_config_timeout_us)
{
 8001d7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d82:	4604      	mov	r4, r0
	uint32_t macro_period_us = 0;
	uint16_t timeout_encoded = 0;

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8001d84:	f8b0 015e 	ldrh.w	r0, [r0, #350]	; 0x15e
{
 8001d88:	460f      	mov	r7, r1
 8001d8a:	4690      	mov	r8, r2
 8001d8c:	461e      	mov	r6, r3
	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8001d8e:	b918      	cbnz	r0, 8001d98 <VL53L1_get_timeouts_us+0x1a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8001d90:	f06f 000e 	mvn.w	r0, #14
 8001d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (status == VL53L1_ERROR_NONE) {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
 8001d98:	f894 11a2 	ldrb.w	r1, [r4, #418]	; 0x1a2
 8001d9c:	f001 f8d6 	bl	8002f4c <VL53L1_calc_macro_period_us>
 8001da0:	4605      	mov	r5, r0
				pdev->tim_cfg.range_config__vcsel_period_a);

		/*  Get Phase Cal Timing A timeout */

		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
 8001da2:	4601      	mov	r1, r0
 8001da4:	f894 018b 	ldrb.w	r0, [r4, #395]	; 0x18b
 8001da8:	f001 f904 	bl	8002fb4 <VL53L1_calc_timeout_us>
		*pphasecal_config_timeout_us =
 8001dac:	6038      	str	r0, [r7, #0]
				(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
				macro_period_us);

		/*  Get MM Timing A timeout */

		timeout_encoded =
 8001dae:	f894 319c 	ldrb.w	r3, [r4, #412]	; 0x19c
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
		timeout_encoded = (timeout_encoded << 8) +
				  (uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8001db2:	f894 019d 	ldrb.w	r0, [r4, #413]	; 0x19d
		timeout_encoded = (timeout_encoded << 8) +
 8001db6:	eb00 2003 	add.w	r0, r0, r3, lsl #8

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8001dba:	4629      	mov	r1, r5
 8001dbc:	b280      	uxth	r0, r0
 8001dbe:	f001 f91e 	bl	8002ffe <VL53L1_calc_decoded_timeout_us>
		*pmm_config_timeout_us =
 8001dc2:	f8c8 0000 	str.w	r0, [r8]
				timeout_encoded,
				macro_period_us);

		/* Get Range Timing A timeout */

		timeout_encoded =
 8001dc6:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
		timeout_encoded = (timeout_encoded << 8) +
				  (uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8001dca:	f894 01a1 	ldrb.w	r0, [r4, #417]	; 0x1a1
		timeout_encoded = (timeout_encoded << 8) +
 8001dce:	eb00 2003 	add.w	r0, r0, r3, lsl #8

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8001dd2:	4629      	mov	r1, r5
 8001dd4:	b280      	uxth	r0, r0
 8001dd6:	f001 f912 	bl	8002ffe <VL53L1_calc_decoded_timeout_us>
		*prange_config_timeout_us =
 8001dda:	6030      	str	r0, [r6, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	60a3      	str	r3, [r4, #8]
		pdev->mm_config_timeout_us = *pmm_config_timeout_us;
 8001de0:	f8d8 3000 	ldr.w	r3, [r8]
 8001de4:	60e3      	str	r3, [r4, #12]
		pdev->range_config_timeout_us = *prange_config_timeout_us;
 8001de6:	6833      	ldr	r3, [r6, #0]
 8001de8:	6123      	str	r3, [r4, #16]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8001dea:	2000      	movs	r0, #0
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8001dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001df0 <VL53L1_get_sequence_config_bit>:
	VL53L1_LLDriverData_t *pdev =
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t bit_mask = 0x01;

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 8001df0:	2907      	cmp	r1, #7
 8001df2:	d80d      	bhi.n	8001e10 <VL53L1_get_sequence_config_bit+0x20>
 8001df4:	2301      	movs	r3, #1
		if (bit_id > 0) {
 8001df6:	b101      	cbz	r1, 8001dfa <VL53L1_get_sequence_config_bit+0xa>
			bit_mask = 0x01 << bit_id;
 8001df8:	408b      	lsls	r3, r1
		}

		*pvalue =
 8001dfa:	f890 01c5 	ldrb.w	r0, [r0, #453]	; 0x1c5
 8001dfe:	4018      	ands	r0, r3
			pdev->dyn_cfg.system__sequence_config & bit_mask;

		if (bit_id > 0) {
 8001e00:	b911      	cbnz	r1, 8001e08 <VL53L1_get_sequence_config_bit+0x18>
		*pvalue =
 8001e02:	7010      	strb	r0, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8001e04:	2000      	movs	r0, #0
 8001e06:	4770      	bx	lr
			*pvalue = *pvalue >> bit_id;
 8001e08:	fa40 f101 	asr.w	r1, r0, r1
 8001e0c:	7011      	strb	r1, [r2, #0]
 8001e0e:	e7f9      	b.n	8001e04 <VL53L1_get_sequence_config_bit+0x14>
		}
	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 8001e10:	f06f 0003 	mvn.w	r0, #3
	}

	return status;
}
 8001e14:	4770      	bx	lr

08001e16 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8001e16:	b538      	push	{r3, r4, r5, lr}
 8001e18:	460c      	mov	r4, r1
 8001e1a:	4605      	mov	r5, r0
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 8001e1c:	f200 12c3 	addw	r2, r0, #451	; 0x1c3
 8001e20:	7809      	ldrb	r1, [r1, #0]
 8001e22:	7860      	ldrb	r0, [r4, #1]
 8001e24:	f001 f936 	bl	8003094 <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 8001e28:	78a0      	ldrb	r0, [r4, #2]
 8001e2a:	78e1      	ldrb	r1, [r4, #3]
 8001e2c:	f505 72e2 	add.w	r2, r5, #452	; 0x1c4
 8001e30:	f001 f941 	bl	80030b6 <VL53L1_encode_zone_size>
	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
}
 8001e34:	2000      	movs	r0, #0
 8001e36:	bd38      	pop	{r3, r4, r5, pc}

08001e38 <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8001e38:	b538      	push	{r3, r4, r5, lr}
 8001e3a:	4605      	mov	r5, r0
 8001e3c:	460c      	mov	r4, r1
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 8001e3e:	460a      	mov	r2, r1
 8001e40:	f890 01c3 	ldrb.w	r0, [r0, #451]	; 0x1c3
 8001e44:	3101      	adds	r1, #1
 8001e46:	f001 f9c7 	bl	80031d8 <VL53L1_decode_row_col>
		pdev->dyn_cfg.roi_config__user_roi_centre_spad,
		&(puser_zone->y_centre),
		&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 8001e4a:	f895 01c4 	ldrb.w	r0, [r5, #452]	; 0x1c4
 8001e4e:	1ce2      	adds	r2, r4, #3
 8001e50:	1ca1      	adds	r1, r4, #2
 8001e52:	f001 f92a 	bl	80030aa <VL53L1_decode_zone_size>
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
}
 8001e56:	2000      	movs	r0, #0
 8001e58:	bd38      	pop	{r3, r4, r5, pc}

08001e5a <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 8001e5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001e5c:	460c      	mov	r4, r1
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t x = 0;
 8001e5e:	2500      	movs	r5, #0
{
 8001e60:	4606      	mov	r6, r0
	uint8_t xy_size = 0;

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 8001e62:	f10d 0206 	add.w	r2, sp, #6
 8001e66:	f10d 0107 	add.w	r1, sp, #7
 8001e6a:	f890 022a 	ldrb.w	r0, [r0, #554]	; 0x22a
	uint8_t x = 0;
 8001e6e:	f88d 5006 	strb.w	r5, [sp, #6]
	uint8_t y = 0;
 8001e72:	f88d 5007 	strb.w	r5, [sp, #7]
	VL53L1_decode_row_col(
 8001e76:	f001 f9af 	bl	80031d8 <VL53L1_decode_row_col>
		pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
		&y,
		&x);

	pmm_roi->x_centre = x;
 8001e7a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001e7e:	7023      	strb	r3, [r4, #0]
	pmm_roi->y_centre = y;
 8001e80:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001e84:	7063      	strb	r3, [r4, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8001e86:	f896 322b 	ldrb.w	r3, [r6, #555]	; 0x22b
	pmm_roi->width = xy_size & 0x0F;

	LOG_FUNCTION_END(status);

	return status;
}
 8001e8a:	4628      	mov	r0, r5
	pmm_roi->height = xy_size >> 4;
 8001e8c:	091a      	lsrs	r2, r3, #4
	pmm_roi->width = xy_size & 0x0F;
 8001e8e:	f003 030f 	and.w	r3, r3, #15
	pmm_roi->height = xy_size >> 4;
 8001e92:	70e2      	strb	r2, [r4, #3]
	pmm_roi->width = xy_size & 0x0F;
 8001e94:	70a3      	strb	r3, [r4, #2]
}
 8001e96:	b002      	add	sp, #8
 8001e98:	bd70      	pop	{r4, r5, r6, pc}

08001e9a <VL53L1_read_p2p_data>:
{
 8001e9a:	b538      	push	{r3, r4, r5, lr}
		status = VL53L1_get_static_nvm_managed(
 8001e9c:	f500 71ac 	add.w	r1, r0, #344	; 0x158
{
 8001ea0:	4604      	mov	r4, r0
		status = VL53L1_get_static_nvm_managed(
 8001ea2:	f001 fa06 	bl	80032b2 <VL53L1_get_static_nvm_managed>
	if (status == VL53L1_ERROR_NONE)
 8001ea6:	b9b8      	cbnz	r0, 8001ed8 <VL53L1_read_p2p_data+0x3e>
		status = VL53L1_get_customer_nvm_managed(
 8001ea8:	f104 0142 	add.w	r1, r4, #66	; 0x42
 8001eac:	4620      	mov	r0, r4
 8001eae:	f001 faad 	bl	800340c <VL53L1_get_customer_nvm_managed>
	if (status == VL53L1_ERROR_NONE) {
 8001eb2:	b988      	cbnz	r0, 8001ed8 <VL53L1_read_p2p_data+0x3e>
		status = VL53L1_get_nvm_copy_data(
 8001eb4:	f504 75fd 	add.w	r5, r4, #506	; 0x1fa
 8001eb8:	4629      	mov	r1, r5
 8001eba:	4620      	mov	r0, r4
 8001ebc:	f001 fe5f 	bl	8003b7e <VL53L1_get_nvm_copy_data>
		if (status == VL53L1_ERROR_NONE)
 8001ec0:	b950      	cbnz	r0, 8001ed8 <VL53L1_read_p2p_data+0x3e>
			VL53L1_copy_rtn_good_spads_to_buffer(
 8001ec2:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
 8001ec6:	4628      	mov	r0, r5
 8001ec8:	f000 ffa7 	bl	8002e1a <VL53L1_copy_rtn_good_spads_to_buffer>
		status =
 8001ecc:	f504 722d 	add.w	r2, r4, #692	; 0x2b4
 8001ed0:	21de      	movs	r1, #222	; 0xde
 8001ed2:	4620      	mov	r0, r4
 8001ed4:	f006 f90c 	bl	80080f0 <VL53L1_RdWord>
	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8001ed8:	f8b4 315e 	ldrh.w	r3, [r4, #350]	; 0x15e
 8001edc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8001ee0:	bf3c      	itt	cc
 8001ee2:	f64b 43cc 	movwcc	r3, #48332	; 0xbccc
 8001ee6:	f8a4 315e 	strhcc.w	r3, [r4, #350]	; 0x15e
	if (status == VL53L1_ERROR_NONE)
 8001eea:	b920      	cbnz	r0, 8001ef6 <VL53L1_read_p2p_data+0x5c>
		status =
 8001eec:	f104 019e 	add.w	r1, r4, #158	; 0x9e
 8001ef0:	4620      	mov	r0, r4
 8001ef2:	f7ff ffb2 	bl	8001e5a <VL53L1_get_mode_mitigation_roi>
	if (pdev->optical_centre.x_centre == 0 &&
 8001ef6:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
 8001efa:	b94b      	cbnz	r3, 8001f10 <VL53L1_read_p2p_data+0x76>
			pdev->mm_roi.x_centre << 4;
 8001efc:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
 8001f00:	011b      	lsls	r3, r3, #4
		pdev->optical_centre.x_centre =
 8001f02:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
			pdev->mm_roi.y_centre << 4;
 8001f06:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
 8001f0a:	011b      	lsls	r3, r3, #4
		pdev->optical_centre.y_centre =
 8001f0c:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
}
 8001f10:	bd38      	pop	{r3, r4, r5, pc}

08001f12 <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8001f12:	b530      	push	{r4, r5, lr}
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 8001f14:	2908      	cmp	r1, #8
{
 8001f16:	9d03      	ldr	r5, [sp, #12]
 8001f18:	9c04      	ldr	r4, [sp, #16]
	switch (device_preset_mode) {
 8001f1a:	d810      	bhi.n	8001f3e <VL53L1_get_preset_mode_timing_cfg+0x2c>
 8001f1c:	2906      	cmp	r1, #6
 8001f1e:	d225      	bcs.n	8001f6c <VL53L1_get_preset_mode_timing_cfg+0x5a>
 8001f20:	b191      	cbz	r1, 8001f48 <VL53L1_get_preset_mode_timing_cfg+0x36>
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_lite_mcps;
 8001f22:	f8b0 10ca 	ldrh.w	r1, [r0, #202]	; 0xca
		*pdss_config__target_total_rate_mcps =
 8001f26:	8011      	strh	r1, [r2, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8001f28:	f8d0 20d0 	ldr.w	r2, [r0, #208]	; 0xd0
		*pphasecal_config_timeout_us =
 8001f2c:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_lite_us;
 8001f2e:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
		*pmm_config_timeout_us =
 8001f32:	602b      	str	r3, [r5, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_lite_us;
 8001f34:	f8d0 30e4 	ldr.w	r3, [r0, #228]	; 0xe4
			pdev->tuning_parms.tp_dss_target_timed_mcps;
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_lpa_us;
		*prange_config_timeout_us =
 8001f38:	6023      	str	r3, [r4, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8001f3a:	2000      	movs	r0, #0
			pdev->tuning_parms.tp_range_timeout_lpa_us;
		break;
 8001f3c:	bd30      	pop	{r4, r5, pc}
	switch (device_preset_mode) {
 8001f3e:	2912      	cmp	r1, #18
 8001f40:	d014      	beq.n	8001f6c <VL53L1_get_preset_mode_timing_cfg+0x5a>
 8001f42:	d804      	bhi.n	8001f4e <VL53L1_get_preset_mode_timing_cfg+0x3c>
 8001f44:	2911      	cmp	r1, #17
 8001f46:	d0ec      	beq.n	8001f22 <VL53L1_get_preset_mode_timing_cfg+0x10>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8001f48:	f06f 0003 	mvn.w	r0, #3
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8001f4c:	bd30      	pop	{r4, r5, pc}
	switch (device_preset_mode) {
 8001f4e:	3924      	subs	r1, #36	; 0x24
 8001f50:	2902      	cmp	r1, #2
 8001f52:	d8f9      	bhi.n	8001f48 <VL53L1_get_preset_mode_timing_cfg+0x36>
			pdev->tuning_parms.tp_dss_target_timed_mcps;
 8001f54:	f8b0 10cc 	ldrh.w	r1, [r0, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 8001f58:	8011      	strh	r1, [r2, #0]
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8001f5a:	f8d0 20d4 	ldr.w	r2, [r0, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 8001f5e:	601a      	str	r2, [r3, #0]
			pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8001f60:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
		*pmm_config_timeout_us =
 8001f64:	602b      	str	r3, [r5, #0]
			pdev->tuning_parms.tp_range_timeout_lpa_us;
 8001f66:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8001f6a:	e7e5      	b.n	8001f38 <VL53L1_get_preset_mode_timing_cfg+0x26>
			pdev->tuning_parms.tp_dss_target_timed_mcps;
 8001f6c:	f8b0 10cc 	ldrh.w	r1, [r0, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 8001f70:	8011      	strh	r1, [r2, #0]
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8001f72:	f8d0 20d4 	ldr.w	r2, [r0, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 8001f76:	601a      	str	r2, [r3, #0]
			pdev->tuning_parms.tp_mm_timeout_timed_us;
 8001f78:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
		*pmm_config_timeout_us =
 8001f7c:	602b      	str	r3, [r5, #0]
			pdev->tuning_parms.tp_range_timeout_timed_us;
 8001f7e:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
 8001f82:	e7d9      	b.n	8001f38 <VL53L1_get_preset_mode_timing_cfg+0x26>

08001f84 <VL53L1_set_preset_mode>:
	uint16_t dss_config__target_total_rate_mcps,
	uint32_t phasecal_config_timeout_us,
	uint32_t mm_config_timeout_us,
	uint32_t range_config_timeout_us,
	uint32_t inter_measurement_period_ms)
{
 8001f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f88:	b08b      	sub	sp, #44	; 0x2c
 8001f8a:	4604      	mov	r4, r0
 8001f8c:	9307      	str	r3, [sp, #28]
 8001f8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8001f90:	9304      	str	r3, [sp, #16]
 8001f92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8001f94:	9305      	str	r3, [sp, #20]
 8001f96:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8001f98:	9306      	str	r3, [sp, #24]
		VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic = &(pdev->stat_cfg);
	VL53L1_general_config_t       *pgeneral = &(pdev->gen_cfg);
	VL53L1_timing_config_t        *ptiming = &(pdev->tim_cfg);
	VL53L1_dynamic_config_t       *pdynamic = &(pdev->dyn_cfg);
 8001f9a:	f500 73da 	add.w	r3, r0, #436	; 0x1b4
 8001f9e:	9308      	str	r3, [sp, #32]

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode = device_preset_mode;
	pdev->mm_config_timeout_us = mm_config_timeout_us;
 8001fa0:	9b04      	ldr	r3, [sp, #16]
	pdev->preset_mode = device_preset_mode;
 8001fa2:	7061      	strb	r1, [r4, #1]
	pdev->mm_config_timeout_us = mm_config_timeout_us;
 8001fa4:	60c3      	str	r3, [r0, #12]
	pdev->range_config_timeout_us = range_config_timeout_us;
 8001fa6:	9b05      	ldr	r3, [sp, #20]
 8001fa8:	6103      	str	r3, [r0, #16]
{
 8001faa:	4688      	mov	r8, r1
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8001fac:	9b06      	ldr	r3, [sp, #24]
 8001fae:	6143      	str	r3, [r0, #20]
{
 8001fb0:	4691      	mov	r9, r2

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 8001fb2:	2103      	movs	r1, #3
	VL53L1_timing_config_t        *ptiming = &(pdev->tim_cfg);
 8001fb4:	f500 72ce 	add.w	r2, r0, #412	; 0x19c
		Dev,
		VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 8001fb8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
	VL53L1_timing_config_t        *ptiming = &(pdev->tim_cfg);
 8001fbc:	9209      	str	r2, [sp, #36]	; 0x24
	VL53L1_static_config_t        *pstatic = &(pdev->stat_cfg);
 8001fbe:	f500 75b2 	add.w	r5, r0, #356	; 0x164
	VL53L1_general_config_t       *pgeneral = &(pdev->gen_cfg);
 8001fc2:	f500 76c2 	add.w	r6, r0, #388	; 0x184
	VL53L1_system_control_t       *psystem = &(pdev->sys_ctrl);
 8001fc6:	f500 77e4 	add.w	r7, r0, #456	; 0x1c8
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8001fca:	f100 0aa4 	add.w	sl, r0, #164	; 0xa4
	VL53L1_low_power_auto_data_t  *plpadata =
 8001fce:	f500 7b39 	add.w	fp, r0, #740	; 0x2e4
	VL53L1_init_ll_driver_state(
 8001fd2:	f000 fe5f 	bl	8002c94 <VL53L1_init_ll_driver_state>
	switch (device_preset_mode) {
 8001fd6:	9b08      	ldr	r3, [sp, #32]
 8001fd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001fda:	f1b8 0f25 	cmp.w	r8, #37	; 0x25
 8001fde:	f200 8084 	bhi.w	80020ea <VL53L1_set_preset_mode+0x166>
 8001fe2:	e8df f008 	tbb	[pc, r8]
 8001fe6:	2e13      	.short	0x2e13
 8001fe8:	4a433c35 	.word	0x4a433c35
 8001fec:	82825851 	.word	0x82825851
 8001ff0:	82828282 	.word	0x82828282
 8001ff4:	665f8282 	.word	0x665f8282
 8001ff8:	82828282 	.word	0x82828282
 8001ffc:	82828282 	.word	0x82828282
 8002000:	82828282 	.word	0x82828282
 8002004:	82828282 	.word	0x82828282
 8002008:	7b746d82 	.word	0x7b746d82
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 800200c:	e88d 0480 	stmia.w	sp, {r7, sl}
 8002010:	4631      	mov	r1, r6
 8002012:	4628      	mov	r0, r5
 8002014:	f000 fc7c 	bl	8002910 <VL53L1_preset_mode_standard_ranging>
		break;
	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 8002018:	2800      	cmp	r0, #0
 800201a:	d168      	bne.n	80020ee <VL53L1_set_preset_mode+0x16a>
		pstatic->dss_config__target_total_rate_mcps =
 800201c:	f8a4 9164 	strh.w	r9, [r4, #356]	; 0x164
			dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps =
 8002020:	f8a4 9018 	strh.w	r9, [r4, #24]
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
		status =
 8002024:	9b05      	ldr	r3, [sp, #20]
 8002026:	9a04      	ldr	r2, [sp, #16]
 8002028:	9907      	ldr	r1, [sp, #28]
 800202a:	4620      	mov	r0, r4
 800202c:	f7ff fe8f 	bl	8001d4e <VL53L1_set_timeouts_us>
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 8002030:	2800      	cmp	r0, #0
 8002032:	d15c      	bne.n	80020ee <VL53L1_set_preset_mode+0x16a>
		status =
 8002034:	9906      	ldr	r1, [sp, #24]
 8002036:	4620      	mov	r0, r4
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
}
 8002038:	b00b      	add	sp, #44	; 0x2c
 800203a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		status =
 800203e:	f7ff be6d 	b.w	8001d1c <VL53L1_set_inter_measurement_period_ms>
		status = VL53L1_preset_mode_standard_ranging_short_range(
 8002042:	e88d 0480 	stmia.w	sp, {r7, sl}
 8002046:	4631      	mov	r1, r6
 8002048:	4628      	mov	r0, r5
 800204a:	f000 fd05 	bl	8002a58 <VL53L1_preset_mode_standard_ranging_short_range>
		break;
 800204e:	e7e3      	b.n	8002018 <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_standard_ranging_long_range(
 8002050:	e88d 0480 	stmia.w	sp, {r7, sl}
 8002054:	4631      	mov	r1, r6
 8002056:	4628      	mov	r0, r5
 8002058:	f000 fd1c 	bl	8002a94 <VL53L1_preset_mode_standard_ranging_long_range>
		break;
 800205c:	e7dc      	b.n	8002018 <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 800205e:	e88d 0480 	stmia.w	sp, {r7, sl}
 8002062:	4631      	mov	r1, r6
 8002064:	4628      	mov	r0, r5
 8002066:	f000 fd33 	bl	8002ad0 <VL53L1_preset_mode_standard_ranging_mm1_cal>
		break;
 800206a:	e7d5      	b.n	8002018 <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 800206c:	e88d 0480 	stmia.w	sp, {r7, sl}
 8002070:	4631      	mov	r1, r6
 8002072:	4628      	mov	r0, r5
 8002074:	f000 fd3c 	bl	8002af0 <VL53L1_preset_mode_standard_ranging_mm2_cal>
		break;
 8002078:	e7ce      	b.n	8002018 <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_timed_ranging(
 800207a:	e88d 0480 	stmia.w	sp, {r7, sl}
 800207e:	4631      	mov	r1, r6
 8002080:	4628      	mov	r0, r5
 8002082:	f000 fd45 	bl	8002b10 <VL53L1_preset_mode_timed_ranging>
		break;
 8002086:	e7c7      	b.n	8002018 <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_timed_ranging_short_range(
 8002088:	e88d 0480 	stmia.w	sp, {r7, sl}
 800208c:	4631      	mov	r1, r6
 800208e:	4628      	mov	r0, r5
 8002090:	f000 fd59 	bl	8002b46 <VL53L1_preset_mode_timed_ranging_short_range>
		break;
 8002094:	e7c0      	b.n	8002018 <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_timed_ranging_long_range(
 8002096:	e88d 0480 	stmia.w	sp, {r7, sl}
 800209a:	4631      	mov	r1, r6
 800209c:	4628      	mov	r0, r5
 800209e:	f000 fd6e 	bl	8002b7e <VL53L1_preset_mode_timed_ranging_long_range>
		break;
 80020a2:	e7b9      	b.n	8002018 <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_olt(
 80020a4:	e88d 0480 	stmia.w	sp, {r7, sl}
 80020a8:	4631      	mov	r1, r6
 80020aa:	4628      	mov	r0, r5
 80020ac:	f000 fdd9 	bl	8002c62 <VL53L1_preset_mode_olt>
		break;
 80020b0:	e7b2      	b.n	8002018 <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_singleshot_ranging(
 80020b2:	e88d 0480 	stmia.w	sp, {r7, sl}
 80020b6:	4631      	mov	r1, r6
 80020b8:	4628      	mov	r0, r5
 80020ba:	f000 fdba 	bl	8002c32 <VL53L1_preset_mode_singleshot_ranging>
		break;
 80020be:	e7ab      	b.n	8002018 <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 80020c0:	e88d 0c80 	stmia.w	sp, {r7, sl, fp}
 80020c4:	4631      	mov	r1, r6
 80020c6:	4628      	mov	r0, r5
 80020c8:	f000 fd89 	bl	8002bde <VL53L1_preset_mode_low_power_auto_short_ranging>
		break;
 80020cc:	e7a4      	b.n	8002018 <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_low_power_auto_ranging(
 80020ce:	e88d 0c80 	stmia.w	sp, {r7, sl, fp}
 80020d2:	4631      	mov	r1, r6
 80020d4:	4628      	mov	r0, r5
 80020d6:	f000 fd6d 	bl	8002bb4 <VL53L1_preset_mode_low_power_auto_ranging>
		break;
 80020da:	e79d      	b.n	8002018 <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 80020dc:	e88d 0c80 	stmia.w	sp, {r7, sl, fp}
 80020e0:	4631      	mov	r1, r6
 80020e2:	4628      	mov	r0, r5
 80020e4:	f000 fd90 	bl	8002c08 <VL53L1_preset_mode_low_power_auto_long_ranging>
		break;
 80020e8:	e796      	b.n	8002018 <VL53L1_set_preset_mode+0x94>
		status = VL53L1_ERROR_INVALID_PARAMS;
 80020ea:	f06f 0003 	mvn.w	r0, #3
}
 80020ee:	b00b      	add	sp, #44	; 0x2c
 80020f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080020f4 <VL53L1_data_init>:
{
 80020f4:	b530      	push	{r4, r5, lr}
 80020f6:	4604      	mov	r4, r0
 80020f8:	b085      	sub	sp, #20
 80020fa:	460d      	mov	r5, r1
	VL53L1_init_ll_driver_state(
 80020fc:	2162      	movs	r1, #98	; 0x62
 80020fe:	f000 fdc9 	bl	8002c94 <VL53L1_init_ll_driver_state>
	pdev->preset_mode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8002102:	2201      	movs	r2, #1
 8002104:	7062      	strb	r2, [r4, #1]
	pdev->offset_calibration_mode =
 8002106:	70e2      	strb	r2, [r4, #3]
	pdev->offset_correction_mode =
 8002108:	7122      	strb	r2, [r4, #4]
	pdev->phasecal_config_timeout_us = 1000;
 800210a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800210e:	60a2      	str	r2, [r4, #8]
	pdev->mm_config_timeout_us = 2000;
 8002110:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002114:	60e2      	str	r2, [r4, #12]
	pdev->range_config_timeout_us = 13000;
 8002116:	f243 22c8 	movw	r2, #13000	; 0x32c8
	pdev->wait_method = VL53L1_WAIT_METHOD_BLOCKING;
 800211a:	2300      	movs	r3, #0
	pdev->range_config_timeout_us = 13000;
 800211c:	6122      	str	r2, [r4, #16]
	pdev->inter_measurement_period_ms = 100;
 800211e:	2264      	movs	r2, #100	; 0x64
	pdev->wait_method = VL53L1_WAIT_METHOD_BLOCKING;
 8002120:	7023      	strb	r3, [r4, #0]
	pdev->measurement_mode = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 8002122:	70a3      	strb	r3, [r4, #2]
	pdev->inter_measurement_period_ms = 100;
 8002124:	6162      	str	r2, [r4, #20]
	pdev->debug_mode = 0x00;
 8002126:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 800212a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
	pdev->gain_cal.standard_ranging_gain_factor =
 800212e:	f240 73db 	movw	r3, #2011	; 0x7db
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8002132:	8322      	strh	r2, [r4, #24]
	pdev->gain_cal.standard_ranging_gain_factor =
 8002134:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
	VL53L1_init_version(Dev);
 8002138:	4620      	mov	r0, r4
 800213a:	f000 fd9e 	bl	8002c7a <VL53L1_init_version>
	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800213e:	b115      	cbz	r5, 8002146 <VL53L1_data_init+0x52>
		status = VL53L1_read_p2p_data(Dev);
 8002140:	4620      	mov	r0, r4
 8002142:	f7ff feaa 	bl	8001e9a <VL53L1_read_p2p_data>
	status =
 8002146:	f504 7088 	add.w	r0, r4, #272	; 0x110
 800214a:	f000 fb3e 	bl	80027ca <VL53L1_init_refspadchar_config_struct>
	status =
 800214e:	f504 7090 	add.w	r0, r4, #288	; 0x120
 8002152:	f000 fb4c 	bl	80027ee <VL53L1_init_ssc_config_struct>
	status =
 8002156:	f504 7196 	add.w	r1, r4, #300	; 0x12c
 800215a:	f104 0042 	add.w	r0, r4, #66	; 0x42
 800215e:	f000 fb55 	bl	800280c <VL53L1_init_xtalk_config_struct>
	status =
 8002162:	f504 70a2 	add.w	r0, r4, #324	; 0x144
 8002166:	f000 fb76 	bl	8002856 <VL53L1_init_offset_cal_config_struct>
	status =
 800216a:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
 800216e:	f000 fb84 	bl	800287a <VL53L1_init_tuning_parm_storage_struct>
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8002172:	f894 3160 	ldrb.w	r3, [r4, #352]	; 0x160
		status = VL53L1_set_preset_mode(
 8002176:	8b22      	ldrh	r2, [r4, #24]
 8002178:	7861      	ldrb	r1, [r4, #1]
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800217a:	f003 0303 	and.w	r3, r3, #3
 800217e:	3b80      	subs	r3, #128	; 0x80
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8002180:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
		status = VL53L1_set_preset_mode(
 8002184:	6963      	ldr	r3, [r4, #20]
 8002186:	9302      	str	r3, [sp, #8]
 8002188:	6923      	ldr	r3, [r4, #16]
 800218a:	9301      	str	r3, [sp, #4]
 800218c:	68e3      	ldr	r3, [r4, #12]
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	4620      	mov	r0, r4
 8002192:	68a3      	ldr	r3, [r4, #8]
 8002194:	f7ff fef6 	bl	8001f84 <VL53L1_set_preset_mode>
 8002198:	4605      	mov	r5, r0
	VL53L1_low_power_auto_data_init(
 800219a:	4620      	mov	r0, r4
 800219c:	f000 ff8f 	bl	80030be <VL53L1_low_power_auto_data_init>
}
 80021a0:	4628      	mov	r0, r5
 80021a2:	b005      	add	sp, #20
 80021a4:	bd30      	pop	{r4, r5, pc}

080021a6 <VL53L1_get_lite_sigma_threshold>:
		pdev->tim_cfg.range_config__sigma_thresh;
 80021a6:	f8b0 31a6 	ldrh.w	r3, [r0, #422]	; 0x1a6
	*plite_sigma =
 80021aa:	800b      	strh	r3, [r1, #0]
}
 80021ac:	2000      	movs	r0, #0
 80021ae:	4770      	bx	lr

080021b0 <VL53L1_set_lite_sigma_threshold>:
	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 80021b0:	f8a0 11a6 	strh.w	r1, [r0, #422]	; 0x1a6
}
 80021b4:	2000      	movs	r0, #0
 80021b6:	4770      	bx	lr

080021b8 <VL53L1_get_lite_min_count_rate>:
		pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 80021b8:	f8b0 31a8 	ldrh.w	r3, [r0, #424]	; 0x1a8
	*plite_mincountrate =
 80021bc:	800b      	strh	r3, [r1, #0]
}
 80021be:	2000      	movs	r0, #0
 80021c0:	4770      	bx	lr

080021c2 <VL53L1_set_lite_min_count_rate>:
	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 80021c2:	f8a0 11a8 	strh.w	r1, [r0, #424]	; 0x1a8
}
 80021c6:	2000      	movs	r0, #0
 80021c8:	4770      	bx	lr
	...

080021cc <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV Dev,
	uint8_t measurement_mode,
	VL53L1_DeviceConfigLevel device_config_level)
{
 80021cc:	b570      	push	{r4, r5, r6, lr}
	pdev->measurement_mode = measurement_mode;

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 80021ce:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
	pdev->measurement_mode = measurement_mode;
 80021d2:	7081      	strb	r1, [r0, #2]
		(psystem->system__mode_start &
 80021d4:	f003 030f 	and.w	r3, r3, #15
		 VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 80021d8:	4319      	orrs	r1, r3
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 80021da:	f8b0 3142 	ldrh.w	r3, [r0, #322]	; 0x142
 80021de:	f8a0 317c 	strh.w	r3, [r0, #380]	; 0x17c
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 80021e2:	f890 32e6 	ldrb.w	r3, [r0, #742]	; 0x2e6
	psystem->system__mode_start =
 80021e6:	f880 11cc 	strb.w	r1, [r0, #460]	; 0x1cc
	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 80021ea:	2bff      	cmp	r3, #255	; 0xff
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 80021ec:	bf04      	itt	eq
 80021ee:	2300      	moveq	r3, #0
 80021f0:	f880 32e6 	strbeq.w	r3, [r0, #742]	; 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80021f4:	f8d0 32e4 	ldr.w	r3, [r0, #740]	; 0x2e4
 80021f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80021fc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002200:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
{
 8002204:	b0c0      	sub	sp, #256	; 0x100
 8002206:	4604      	mov	r4, r0
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8002208:	d114      	bne.n	8002234 <VL53L1_init_and_start_range+0x68>
	    (pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
		/* save interrupt config */
		pdev->low_power_auto_data.saved_interrupt_config =
 800220a:	f890 3186 	ldrb.w	r3, [r0, #390]	; 0x186
 800220e:	f880 32e7 	strb.w	r3, [r0, #743]	; 0x2e7
			pdev->gen_cfg.system__interrupt_config_gpio;
		/* set intr_new_measure_ready */
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8002212:	2320      	movs	r3, #32
 8002214:	f880 3186 	strb.w	r3, [r0, #390]	; 0x186
		/* check MM1/MM2 disabled? */
		if ((pdev->dyn_cfg.system__sequence_config & (
 8002218:	f890 31c5 	ldrb.w	r3, [r0, #453]	; 0x1c5
 800221c:	f013 0f60 	tst.w	r3, #96	; 0x60
			     VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
		    0x0) {
			pdev->customer.algo__part_to_part_range_offset_mm =
				pdev->customer.mm_config__outer_offset_mm * 4;
 8002220:	bf0a      	itet	eq
 8002222:	f8b0 3058 	ldrheq.w	r3, [r0, #88]	; 0x58
		} else {
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 8002226:	2300      	movne	r3, #0
				pdev->customer.mm_config__outer_offset_mm * 4;
 8002228:	009b      	lsleq	r3, r3, #2
 800222a:	2a05      	cmp	r2, #5
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 800222c:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
 8002230:	bf38      	it	cc
 8002232:	2205      	movcc	r2, #5
			device_config_level =
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8002234:	f8d4 32e4 	ldr.w	r3, [r4, #740]	; 0x2e4
 8002238:	494f      	ldr	r1, [pc, #316]	; (8002378 <VL53L1_init_and_start_range+0x1ac>)
 800223a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800223e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002242:	428b      	cmp	r3, r1
	    (pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
		/* restore interrupt config */
		pdev->gen_cfg.system__interrupt_config_gpio =
 8002244:	bf02      	ittt	eq
 8002246:	f894 32e7 	ldrbeq.w	r3, [r4, #743]	; 0x2e7
 800224a:	f884 3186 	strbeq.w	r3, [r4, #390]	; 0x186
			pdev->low_power_auto_data.saved_interrupt_config;

		/* make sure config gets written out including VHV config */
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 800224e:	2206      	moveq	r2, #6
 8002250:	1e53      	subs	r3, r2, #1
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b05      	cmp	r3, #5
 8002256:	bf9a      	itte	ls
 8002258:	4948      	ldrls	r1, [pc, #288]	; (800237c <VL53L1_init_and_start_range+0x1b0>)
 800225a:	5ccd      	ldrbls	r5, [r1, r3]
 800225c:	2583      	movhi	r5, #131	; 0x83
 800225e:	b2ad      	uxth	r5, r5
		break;
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 8002260:	f1c5 0688 	rsb	r6, r5, #136	; 0x88
		i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
	for (i = 0; i < i2c_buffer_size_bytes; i++) {
 8002264:	2300      	movs	r3, #0
	i2c_buffer_size_bytes = \
 8002266:	b2b6      	uxth	r6, r6
		*pbuffer++ = 0;
 8002268:	4618      	mov	r0, r3
	for (i = 0; i < i2c_buffer_size_bytes; i++) {
 800226a:	b299      	uxth	r1, r3
 800226c:	42b1      	cmp	r1, r6
 800226e:	d325      	bcc.n	80022bc <VL53L1_init_and_start_range+0xf0>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 8002270:	2a05      	cmp	r2, #5
 8002272:	d953      	bls.n	800231c <VL53L1_init_and_start_range+0x150>
	    status == VL53L1_ERROR_NONE) {
		i2c_buffer_offset_bytes = \
 8002274:	f1c5 0201 	rsb	r2, r5, #1
			VL53L1_STATIC_NVM_MANAGED_I2C_INDEX - i2c_index;

		status =
 8002278:	466b      	mov	r3, sp
 800227a:	fa13 f282 	uxtah	r2, r3, r2
 800227e:	210b      	movs	r1, #11
 8002280:	f504 70ac 	add.w	r0, r4, #344	; 0x158
 8002284:	f000 ffbb 	bl	80031fe <VL53L1_i2c_encode_static_nvm_managed>
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8002288:	b9b0      	cbnz	r0, 80022b8 <VL53L1_init_and_start_range+0xec>
	    status == VL53L1_ERROR_NONE) {
		i2c_buffer_offset_bytes = \
 800228a:	f1c5 020d 	rsb	r2, r5, #13
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX - i2c_index;

		status =
 800228e:	466b      	mov	r3, sp
 8002290:	fa13 f282 	uxtah	r2, r3, r2
 8002294:	2117      	movs	r1, #23
 8002296:	f104 0042 	add.w	r0, r4, #66	; 0x42
 800229a:	f001 f819 	bl	80032d0 <VL53L1_i2c_encode_customer_nvm_managed>
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 800229e:	b958      	cbnz	r0, 80022b8 <VL53L1_init_and_start_range+0xec>
	    status == VL53L1_ERROR_NONE) {
		i2c_buffer_offset_bytes = \
 80022a0:	f1c5 0224 	rsb	r2, r5, #36	; 0x24
			VL53L1_STATIC_CONFIG_I2C_INDEX - i2c_index;

		status =
 80022a4:	466b      	mov	r3, sp
 80022a6:	fa13 f282 	uxtah	r2, r3, r2
 80022aa:	2120      	movs	r1, #32
 80022ac:	f504 70b2 	add.w	r0, r4, #356	; 0x164
 80022b0:	f001 f8bc 	bl	800342c <VL53L1_i2c_encode_static_config>
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 80022b4:	2800      	cmp	r0, #0
 80022b6:	d036      	beq.n	8002326 <VL53L1_init_and_start_range+0x15a>
		status = VL53L1_update_ll_driver_cfg_state(Dev);

	LOG_FUNCTION_END(status);

	return status;
}
 80022b8:	b040      	add	sp, #256	; 0x100
 80022ba:	bd70      	pop	{r4, r5, r6, pc}
		*pbuffer++ = 0;
 80022bc:	f80d 0003 	strb.w	r0, [sp, r3]
 80022c0:	3301      	adds	r3, #1
 80022c2:	e7d2      	b.n	800226a <VL53L1_init_and_start_range+0x9e>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 80022c4:	2a02      	cmp	r2, #2
 80022c6:	d03a      	beq.n	800233e <VL53L1_init_and_start_range+0x172>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 80022c8:	2a00      	cmp	r2, #0
 80022ca:	d144      	bne.n	8002356 <VL53L1_init_and_start_range+0x18a>
		i2c_buffer_offset_bytes = \
 80022cc:	f1c5 0283 	rsb	r2, r5, #131	; 0x83
		status =
 80022d0:	466b      	mov	r3, sp
 80022d2:	fa13 f282 	uxtah	r2, r3, r2
 80022d6:	2105      	movs	r1, #5
 80022d8:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
 80022dc:	f001 f9de 	bl	800369c <VL53L1_i2c_encode_system_control>
	if (status == VL53L1_ERROR_NONE) {
 80022e0:	2800      	cmp	r0, #0
 80022e2:	d1e9      	bne.n	80022b8 <VL53L1_init_and_start_range+0xec>
		status =
 80022e4:	4633      	mov	r3, r6
 80022e6:	466a      	mov	r2, sp
 80022e8:	4629      	mov	r1, r5
 80022ea:	4620      	mov	r0, r4
 80022ec:	f005 fe9e 	bl	800802c <VL53L1_WriteMulti>
	if (status == VL53L1_ERROR_NONE)
 80022f0:	2800      	cmp	r0, #0
 80022f2:	d1e1      	bne.n	80022b8 <VL53L1_init_and_start_range+0xec>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 80022f4:	4620      	mov	r0, r4
 80022f6:	f000 fce0 	bl	8002cba <VL53L1_update_ll_driver_rd_state>
	if (status == VL53L1_ERROR_NONE)
 80022fa:	2800      	cmp	r0, #0
 80022fc:	d1dc      	bne.n	80022b8 <VL53L1_init_and_start_range+0xec>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 80022fe:	4620      	mov	r0, r4
 8002300:	f000 fd4f 	bl	8002da2 <VL53L1_update_ll_driver_cfg_state>
	return status;
 8002304:	e7d8      	b.n	80022b8 <VL53L1_init_and_start_range+0xec>
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 8002306:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
			pdynamic->system__grouped_parameter_hold = pstate->cfg_gph_id;
 800230a:	f884 31c6 	strb.w	r3, [r4, #454]	; 0x1c6
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 800230e:	f043 0101 	orr.w	r1, r3, #1
 8002312:	f884 11b4 	strb.w	r1, [r4, #436]	; 0x1b4
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 8002316:	f884 11c0 	strb.w	r1, [r4, #448]	; 0x1c0
 800231a:	e023      	b.n	8002364 <VL53L1_init_and_start_range+0x198>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 800231c:	d0b5      	beq.n	800228a <VL53L1_init_and_start_range+0xbe>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 800231e:	2a04      	cmp	r2, #4
 8002320:	d0be      	beq.n	80022a0 <VL53L1_init_and_start_range+0xd4>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8002322:	2a03      	cmp	r2, #3
 8002324:	d1ce      	bne.n	80022c4 <VL53L1_init_and_start_range+0xf8>
		i2c_buffer_offset_bytes =
 8002326:	f1c5 0244 	rsb	r2, r5, #68	; 0x44
		status =
 800232a:	466b      	mov	r3, sp
 800232c:	fa13 f282 	uxtah	r2, r3, r2
 8002330:	2116      	movs	r1, #22
 8002332:	f504 70c2 	add.w	r0, r4, #388	; 0x184
 8002336:	f001 f8e7 	bl	8003508 <VL53L1_i2c_encode_general_config>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 800233a:	2800      	cmp	r0, #0
 800233c:	d1bc      	bne.n	80022b8 <VL53L1_init_and_start_range+0xec>
		i2c_buffer_offset_bytes = \
 800233e:	f1c5 025a 	rsb	r2, r5, #90	; 0x5a
		status =
 8002342:	466b      	mov	r3, sp
 8002344:	fa13 f282 	uxtah	r2, r3, r2
 8002348:	2117      	movs	r1, #23
 800234a:	f504 70ce 	add.w	r0, r4, #412	; 0x19c
 800234e:	f001 f920 	bl	8003592 <VL53L1_i2c_encode_timing_config>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8002352:	2800      	cmp	r0, #0
 8002354:	d1b0      	bne.n	80022b8 <VL53L1_init_and_start_range+0xec>
		if ((psystem->system__mode_start &
 8002356:	f894 31cc 	ldrb.w	r3, [r4, #460]	; 0x1cc
		i2c_buffer_offset_bytes = \
 800235a:	f1c5 0271 	rsb	r2, r5, #113	; 0x71
		if ((psystem->system__mode_start &
 800235e:	069b      	lsls	r3, r3, #26
		i2c_buffer_offset_bytes = \
 8002360:	b292      	uxth	r2, r2
		if ((psystem->system__mode_start &
 8002362:	d4d0      	bmi.n	8002306 <VL53L1_init_and_start_range+0x13a>
		status =
 8002364:	446a      	add	r2, sp
 8002366:	2112      	movs	r1, #18
 8002368:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
 800236c:	f001 f954 	bl	8003618 <VL53L1_i2c_encode_dynamic_config>
	if (status == VL53L1_ERROR_NONE) {
 8002370:	2800      	cmp	r0, #0
 8002372:	d1a1      	bne.n	80022b8 <VL53L1_init_and_start_range+0xec>
 8002374:	e7aa      	b.n	80022cc <VL53L1_init_and_start_range+0x100>
 8002376:	bf00      	nop
 8002378:	00010100 	.word	0x00010100
 800237c:	0800abb5 	.word	0x0800abb5

08002380 <VL53L1_stop_range>:


VL53L1_Error VL53L1_stop_range(
	VL53L1_DEV Dev)
{
 8002380:	b538      	push	{r3, r4, r5, lr}
		VL53L1DevStructGetLLDriverHandle(Dev);

	/* Merge ABORT mode with mode_start */

	pdev->sys_ctrl.system__mode_start =
		(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8002382:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
 8002386:	f003 030f 	and.w	r3, r3, #15
{
 800238a:	4604      	mov	r4, r0
		(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 800238c:	f063 037f 	orn	r3, r3, #127	; 0x7f
	pdev->sys_ctrl.system__mode_start =
 8002390:	f880 31cc 	strb.w	r3, [r0, #460]	; 0x1cc
		VL53L1_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53L1_set_system_control(
 8002394:	f500 71e4 	add.w	r1, r0, #456	; 0x1c8
 8002398:	f001 f999 	bl	80036ce <VL53L1_set_system_control>
		Dev,
		&pdev->sys_ctrl);

	/* Abort bit is auto clear so clear register group structure to match */
	pdev->sys_ctrl.system__mode_start =
		(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK);
 800239c:	f894 31cc 	ldrb.w	r3, [r4, #460]	; 0x1cc
 80023a0:	f003 030f 	and.w	r3, r3, #15
	pdev->sys_ctrl.system__mode_start =
 80023a4:	f884 31cc 	strb.w	r3, [r4, #460]	; 0x1cc
	status = VL53L1_set_system_control(
 80023a8:	4605      	mov	r5, r0

	/* reset zone dynamic info */
	VL53L1_init_ll_driver_state(
 80023aa:	2103      	movs	r1, #3
 80023ac:	4620      	mov	r0, r4
 80023ae:	f000 fc71 	bl	8002c94 <VL53L1_init_ll_driver_state>
		Dev,
		VL53L1_DEVICESTATE_SW_STANDBY);

	/* reset low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 80023b2:	f894 32e5 	ldrb.w	r3, [r4, #741]	; 0x2e5
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d102      	bne.n	80023c0 <VL53L1_stop_range+0x40>
		VL53L1_low_power_auto_data_stop_range(Dev);
 80023ba:	4620      	mov	r0, r4
 80023bc:	f000 fe95 	bl	80030ea <VL53L1_low_power_auto_data_stop_range>

	return status;
}
 80023c0:	4628      	mov	r0, r5
 80023c2:	bd38      	pop	{r3, r4, r5, pc}

080023c4 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV Dev,
	VL53L1_DeviceResultsLevel device_results_level)
{
 80023c4:	b530      	push	{r4, r5, lr}

	LOG_FUNCTION_START("");

	/* Determine multi byte read transaction size */

	switch (device_results_level) {
 80023c6:	2901      	cmp	r1, #1
{
 80023c8:	b0c1      	sub	sp, #260	; 0x104
 80023ca:	4604      	mov	r4, r0
 80023cc:	460d      	mov	r5, r1
	switch (device_results_level) {
 80023ce:	d01a      	beq.n	8002406 <VL53L1_get_measurement_results+0x42>
			(VL53L1_CORE_RESULTS_I2C_INDEX +
			 VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
			i2c_index;
		break;
	default:
		i2c_buffer_size_bytes =
 80023d0:	2902      	cmp	r1, #2
 80023d2:	bf0c      	ite	eq
 80023d4:	2386      	moveq	r3, #134	; 0x86
 80023d6:	232c      	movne	r3, #44	; 0x2c
	}

	/* Read  Result Data */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status =
 80023d8:	466a      	mov	r2, sp
 80023da:	2188      	movs	r1, #136	; 0x88
 80023dc:	4620      	mov	r0, r4
 80023de:	f005 fe45 	bl	800806c <VL53L1_ReadMulti>
				buffer,
				(uint32_t)i2c_buffer_size_bytes);

	/* Decode  I2C buffer */

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 80023e2:	2d01      	cmp	r5, #1
 80023e4:	d911      	bls.n	800240a <VL53L1_get_measurement_results+0x46>
 80023e6:	b9c8      	cbnz	r0, 800241c <VL53L1_get_measurement_results+0x58>
	    status == VL53L1_ERROR_NONE) {
		i2c_buffer_offset_bytes =
			VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
 80023e8:	f504 722b 	add.w	r2, r4, #684	; 0x2ac
 80023ec:	f10d 014e 	add.w	r1, sp, #78	; 0x4e
 80023f0:	2038      	movs	r0, #56	; 0x38
 80023f2:	f001 fa46 	bl	8003882 <VL53L1_i2c_decode_debug_results>
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 80023f6:	b988      	cbnz	r0, 800241c <VL53L1_get_measurement_results+0x58>
	    status == VL53L1_ERROR_NONE) {
		i2c_buffer_offset_bytes =
			VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
 80023f8:	f504 7222 	add.w	r2, r4, #648	; 0x288
 80023fc:	a90b      	add	r1, sp, #44	; 0x2c
 80023fe:	2021      	movs	r0, #33	; 0x21
 8002400:	f001 fa04 	bl	800380c <VL53L1_i2c_decode_core_results>
 8002404:	e003      	b.n	800240e <VL53L1_get_measurement_results+0x4a>
		i2c_buffer_size_bytes =
 8002406:	234d      	movs	r3, #77	; 0x4d
 8002408:	e7e6      	b.n	80023d8 <VL53L1_get_measurement_results+0x14>
	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 800240a:	2d00      	cmp	r5, #0
 800240c:	d1f3      	bne.n	80023f6 <VL53L1_get_measurement_results+0x32>
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 800240e:	b928      	cbnz	r0, 800241c <VL53L1_get_measurement_results+0x58>
		i2c_buffer_offset_bytes = 0;
		status =
 8002410:	f504 72e7 	add.w	r2, r4, #462	; 0x1ce
 8002414:	4669      	mov	r1, sp
 8002416:	202c      	movs	r0, #44	; 0x2c
 8002418:	f001 f969 	bl	80036ee <VL53L1_i2c_decode_system_results>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800241c:	b041      	add	sp, #260	; 0x104
 800241e:	bd30      	pop	{r4, r5, pc}

08002420 <VL53L1_clear_interrupt_and_enable_next_range>:
	/* Setup GPH absorption point and config values for next measurement */

	/* Update GPH registers, clear interrupt and set measurement mode */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status = VL53L1_init_and_start_range(
 8002420:	2203      	movs	r2, #3
 8002422:	f7ff bed3 	b.w	80021cc <VL53L1_init_and_start_range>
	...

08002428 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 8002428:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count = psys->result__stream_count;
 800242c:	2500      	movs	r5, #0
 800242e:	78cf      	ldrb	r7, [r1, #3]
{
 8002430:	9001      	str	r0, [sp, #4]
	presults->stream_count = psys->result__stream_count;
 8002432:	709f      	strb	r7, [r3, #2]
 8002434:	f103 0444 	add.w	r4, r3, #68	; 0x44

	pdata = &(presults->data[0]);

	for (i = 0; i < 2; i++) {
		pdata->range_id = i;
		pdata->time_stamp = 0;
 8002438:	46ac      	mov	ip, r5

		if ((psys->result__stream_count == 0) &&
		    ((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
		     VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800243a:	f04f 0813 	mov.w	r8, #19

			pdata->actual_effective_spads =
				psys->result__dss_actual_effective_spads_sd1;
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
			pdata->avg_signal_count_rate_mcps =
 800243e:	f64f 76ff 	movw	r6, #65535	; 0xffff
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd1;

			/* apply correction gain */
			range_mm *= gain_factor;
			range_mm += 0x0400;
			range_mm /= 0x0800;
 8002442:	f44f 6e00 	mov.w	lr, #2048	; 0x800
 8002446:	fa5f fa85 	uxtb.w	sl, r5
		pdata->range_id = i;
 800244a:	f804 ac40 	strb.w	sl, [r4, #-64]
		pdata->time_stamp = 0;
 800244e:	f844 cc3c 	str.w	ip, [r4, #-60]
 8002452:	f891 9001 	ldrb.w	r9, [r1, #1]
		if ((psys->result__stream_count == 0) &&
 8002456:	2f00      	cmp	r7, #0
 8002458:	d159      	bne.n	800250e <VL53L1_copy_sys_and_core_results_to_range_results+0xe6>
 800245a:	f009 0b1f 	and.w	fp, r9, #31
 800245e:	f1bb 0f09 	cmp.w	fp, #9
 8002462:	d154      	bne.n	800250e <VL53L1_copy_sys_and_core_results_to_range_results+0xe6>
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 8002464:	f804 8c02 	strb.w	r8, [r4, #-2]
		switch (i) {
 8002468:	f1ba 0f01 	cmp.w	sl, #1
 800246c:	d05c      	beq.n	8002528 <VL53L1_copy_sys_and_core_results_to_range_results+0x100>
			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 800246e:	f891 9002 	ldrb.w	r9, [r1, #2]
 8002472:	f1b9 0f07 	cmp.w	r9, #7
 8002476:	d14f      	bne.n	8002518 <VL53L1_copy_sys_and_core_results_to_range_results+0xf0>
					psys->result__mm_inner_actual_effective_spads_sd0;
 8002478:	f8b1 9012 	ldrh.w	r9, [r1, #18]
				pdata->actual_effective_spads =
 800247c:	f824 9c30 	strh.w	r9, [r4, #-48]
				psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
 8002480:	f8b1 9010 	ldrh.w	r9, [r1, #16]
			pdata->peak_signal_count_rate_mcps =
 8002484:	f824 9c14 	strh.w	r9, [r4, #-20]
				psys->result__avg_signal_count_rate_mcps_sd0;
 8002488:	f8b1 9016 	ldrh.w	r9, [r1, #22]
			pdata->avg_signal_count_rate_mcps =
 800248c:	f824 9c12 	strh.w	r9, [r4, #-18]
				psys->result__ambient_count_rate_mcps_sd0;
 8002490:	f8b1 9008 	ldrh.w	r9, [r1, #8]
			pdata->ambient_count_rate_mcps =
 8002494:	f824 9c10 	strh.w	r9, [r4, #-16]
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 8002498:	f8b1 900a 	ldrh.w	r9, [r1, #10]
			range_mm *= gain_factor;
 800249c:	9801      	ldr	r0, [sp, #4]
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 800249e:	ea4f 1949 	mov.w	r9, r9, lsl #5
			pdata->sigma_mm = (uint16_t)tmpu32;
 80024a2:	45b1      	cmp	r9, r6
 80024a4:	bf28      	it	cs
 80024a6:	46b1      	movcs	r9, r6
 80024a8:	f824 9c08 	strh.w	r9, [r4, #-8]
				psys->result__phase_sd0;
 80024ac:	f8b1 900c 	ldrh.w	r9, [r1, #12]
			pdata->median_phase =
 80024b0:	f824 9c06 	strh.w	r9, [r4, #-6]
			range_mm =
 80024b4:	f8b1 900e 	ldrh.w	r9, [r1, #14]
			range_mm *= gain_factor;
 80024b8:	fb00 f909 	mul.w	r9, r0, r9
			pdata->ranging_total_events =
 80024bc:	6850      	ldr	r0, [r2, #4]
 80024be:	f844 0c1c 	str.w	r0, [r4, #-28]
			pdata->signal_total_events =
 80024c2:	6890      	ldr	r0, [r2, #8]
 80024c4:	f844 0c18 	str.w	r0, [r4, #-24]
			pdata->total_periods_elapsed =
 80024c8:	68d0      	ldr	r0, [r2, #12]
 80024ca:	f844 0c2c 	str.w	r0, [r4, #-44]
			pdata->ambient_window_events =
 80024ce:	6810      	ldr	r0, [r2, #0]
			range_mm += 0x0400;
 80024d0:	f509 6980 	add.w	r9, r9, #1024	; 0x400
			range_mm /= 0x0800;
 80024d4:	fb99 f9fe 	sdiv	r9, r9, lr
			pdata->median_range_mm = (int16_t)range_mm;
 80024d8:	f824 9c04 	strh.w	r9, [r4, #-4]
 80024dc:	3501      	adds	r5, #1
	for (i = 0; i < 2; i++) {
 80024de:	2d02      	cmp	r5, #2
				pcore->result_core__ranging_total_events_sd1;
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd1;
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd1;
			pdata->ambient_window_events =
 80024e0:	f844 0c20 	str.w	r0, [r4, #-32]
 80024e4:	f104 0440 	add.w	r4, r4, #64	; 0x40
	for (i = 0; i < 2; i++) {
 80024e8:	d1ad      	bne.n	8002446 <VL53L1_copy_sys_and_core_results_to_range_results+0x1e>

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 80024ea:	2000      	movs	r0, #0
 80024ec:	70d8      	strb	r0, [r3, #3]
 80024ee:	784a      	ldrb	r2, [r1, #1]
 80024f0:	f002 021f 	and.w	r2, r2, #31
 80024f4:	2a11      	cmp	r2, #17
 80024f6:	d807      	bhi.n	8002508 <VL53L1_copy_sys_and_core_results_to_range_results+0xe0>
 80024f8:	2101      	movs	r1, #1
 80024fa:	4c24      	ldr	r4, [pc, #144]	; (800258c <VL53L1_copy_sys_and_core_results_to_range_results+0x164>)
 80024fc:	4091      	lsls	r1, r2
 80024fe:	4221      	tst	r1, r4
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 8002500:	bf1c      	itt	ne
 8002502:	70da      	strbne	r2, [r3, #3]
					   VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 8002504:	f883 0042 	strbne.w	r0, [r3, #66]	; 0x42
		break;
	}

	LOG_FUNCTION_END(0);
}
 8002508:	b003      	add	sp, #12
 800250a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
 800250e:	f009 091f 	and.w	r9, r9, #31
			pdata->range_status =
 8002512:	f804 9c02 	strb.w	r9, [r4, #-2]
 8002516:	e7a7      	b.n	8002468 <VL53L1_copy_sys_and_core_results_to_range_results+0x40>
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 8002518:	f1b9 0f08 	cmp.w	r9, #8
					psys->result__mm_outer_actual_effective_spads_sd0;
 800251c:	bf0c      	ite	eq
 800251e:	f8b1 9014 	ldrheq.w	r9, [r1, #20]
					psys->result__dss_actual_effective_spads_sd0;
 8002522:	f8b1 9004 	ldrhne.w	r9, [r1, #4]
 8002526:	e7a9      	b.n	800247c <VL53L1_copy_sys_and_core_results_to_range_results+0x54>
				psys->result__dss_actual_effective_spads_sd1;
 8002528:	f8b1 9018 	ldrh.w	r9, [r1, #24]
			pdata->actual_effective_spads =
 800252c:	f824 9c30 	strh.w	r9, [r4, #-48]
				psys->result__peak_signal_count_rate_mcps_sd1;
 8002530:	f8b1 901a 	ldrh.w	r9, [r1, #26]
			pdata->peak_signal_count_rate_mcps =
 8002534:	f824 9c14 	strh.w	r9, [r4, #-20]
			pdata->avg_signal_count_rate_mcps =
 8002538:	f824 6c12 	strh.w	r6, [r4, #-18]
				psys->result__ambient_count_rate_mcps_sd1;
 800253c:	f8b1 901c 	ldrh.w	r9, [r1, #28]
			pdata->ambient_count_rate_mcps =
 8002540:	f824 9c10 	strh.w	r9, [r4, #-16]
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 8002544:	f8b1 901e 	ldrh.w	r9, [r1, #30]
			range_mm *= gain_factor;
 8002548:	9801      	ldr	r0, [sp, #4]
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 800254a:	ea4f 1949 	mov.w	r9, r9, lsl #5
			pdata->sigma_mm = (uint16_t)tmpu32;
 800254e:	45b1      	cmp	r9, r6
 8002550:	bf28      	it	cs
 8002552:	46b1      	movcs	r9, r6
 8002554:	f824 9c08 	strh.w	r9, [r4, #-8]
				psys->result__phase_sd1;
 8002558:	f8b1 9020 	ldrh.w	r9, [r1, #32]
			pdata->median_phase =
 800255c:	f824 9c06 	strh.w	r9, [r4, #-6]
			range_mm =
 8002560:	f8b1 9022 	ldrh.w	r9, [r1, #34]	; 0x22
			range_mm *= gain_factor;
 8002564:	fb09 f900 	mul.w	r9, r9, r0
			pdata->ranging_total_events =
 8002568:	6950      	ldr	r0, [r2, #20]
 800256a:	f844 0c1c 	str.w	r0, [r4, #-28]
			pdata->signal_total_events =
 800256e:	6990      	ldr	r0, [r2, #24]
 8002570:	f844 0c18 	str.w	r0, [r4, #-24]
			pdata->total_periods_elapsed =
 8002574:	69d0      	ldr	r0, [r2, #28]
 8002576:	f844 0c2c 	str.w	r0, [r4, #-44]
			range_mm += 0x0400;
 800257a:	f509 6980 	add.w	r9, r9, #1024	; 0x400
			pdata->ambient_window_events =
 800257e:	6910      	ldr	r0, [r2, #16]
			range_mm /= 0x0800;
 8002580:	fb99 f9fe 	sdiv	r9, r9, lr
			pdata->median_range_mm = (int16_t)range_mm;
 8002584:	f824 9c04 	strh.w	r9, [r4, #-4]
 8002588:	e7a8      	b.n	80024dc <VL53L1_copy_sys_and_core_results_to_range_results+0xb4>
 800258a:	bf00      	nop
 800258c:	0002200e 	.word	0x0002200e

08002590 <VL53L1_get_device_results>:
{
 8002590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002594:	4604      	mov	r4, r0
 8002596:	4690      	mov	r8, r2
	VL53L1_range_results_t   *presults = &(pres->range_results);
 8002598:	f500 763d 	add.w	r6, r0, #756	; 0x2f4
		status = VL53L1_get_measurement_results(
 800259c:	f7ff ff12 	bl	80023c4 <VL53L1_get_measurement_results>
	if (status == VL53L1_ERROR_NONE)
 80025a0:	4605      	mov	r5, r0
 80025a2:	b940      	cbnz	r0, 80025b6 <VL53L1_get_device_results+0x26>
		VL53L1_copy_sys_and_core_results_to_range_results(
 80025a4:	4633      	mov	r3, r6
 80025a6:	f504 7222 	add.w	r2, r4, #648	; 0x288
 80025aa:	f504 71e7 	add.w	r1, r4, #462	; 0x1ce
 80025ae:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
 80025b2:	f7ff ff39 	bl	8002428 <VL53L1_copy_sys_and_core_results_to_range_results>
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 80025b6:	f894 72e5 	ldrb.w	r7, [r4, #741]	; 0x2e5
 80025ba:	2f01      	cmp	r7, #1
 80025bc:	d112      	bne.n	80025e4 <VL53L1_get_device_results+0x54>
		if ((status == VL53L1_ERROR_NONE) &&
 80025be:	b945      	cbnz	r5, 80025d2 <VL53L1_get_device_results+0x42>
		    (pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 80025c0:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 80025c4:	bb0b      	cbnz	r3, 800260a <VL53L1_get_device_results+0x7a>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 80025c6:	4620      	mov	r0, r4
 80025c8:	f000 fdb5 	bl	8003136 <VL53L1_low_power_auto_setup_manual_calibration>
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 80025cc:	f884 72e6 	strb.w	r7, [r4, #742]	; 0x2e6
			status = VL53L1_low_power_auto_setup_manual_calibration(
 80025d0:	4605      	mov	r5, r0
		if ((pdev->low_power_auto_data.low_power_auto_range_count != 0xFF) &&
 80025d2:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
 80025d6:	2bff      	cmp	r3, #255	; 0xff
 80025d8:	d004      	beq.n	80025e4 <VL53L1_get_device_results+0x54>
 80025da:	b91d      	cbnz	r5, 80025e4 <VL53L1_get_device_results+0x54>
			status = VL53L1_low_power_auto_update_DSS(
 80025dc:	4620      	mov	r0, r4
 80025de:	f000 fdc9 	bl	8003174 <VL53L1_low_power_auto_update_DSS>
 80025e2:	4605      	mov	r5, r0
	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 80025e4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80025e8:	f884 32f4 	strb.w	r3, [r4, #756]	; 0x2f4
	presults->rd_device_state = pdev->ll_state.rd_device_state;
 80025ec:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80025f0:	f884 32f5 	strb.w	r3, [r4, #757]	; 0x2f5
	memcpy(
 80025f4:	2284      	movs	r2, #132	; 0x84
 80025f6:	4631      	mov	r1, r6
 80025f8:	4640      	mov	r0, r8
 80025fa:	f005 ffaf 	bl	800855c <memcpy>
	if (status == VL53L1_ERROR_NONE)
 80025fe:	b955      	cbnz	r5, 8002616 <VL53L1_get_device_results+0x86>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 8002600:	4620      	mov	r0, r4
}
 8002602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		status = VL53L1_check_ll_driver_rd_state(Dev);
 8002606:	f000 bba0 	b.w	8002d4a <VL53L1_check_ll_driver_rd_state>
		} else if ((status == VL53L1_ERROR_NONE) &&
 800260a:	2b01      	cmp	r3, #1
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 800260c:	bf04      	itt	eq
 800260e:	2302      	moveq	r3, #2
 8002610:	f884 32e6 	strbeq.w	r3, [r4, #742]	; 0x2e6
 8002614:	e7dd      	b.n	80025d2 <VL53L1_get_device_results+0x42>
}
 8002616:	4628      	mov	r0, r5
 8002618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800261c <VL53L1_get_tuning_parm>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 800261c:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 8002620:	2938      	cmp	r1, #56	; 0x38
 8002622:	f200 80cc 	bhi.w	80027be <VL53L1_get_tuning_parm+0x1a2>
 8002626:	e8df f001 	tbb	[pc, r1]
 800262a:	221d      	.short	0x221d
 800262c:	2e2b2825 	.word	0x2e2b2825
 8002630:	3a373431 	.word	0x3a373431
 8002634:	4643403d 	.word	0x4643403d
 8002638:	524f4c49 	.word	0x524f4c49
 800263c:	5e5b5855 	.word	0x5e5b5855
 8002640:	6a676461 	.word	0x6a676461
 8002644:	7673706d 	.word	0x7673706d
 8002648:	827f7c79 	.word	0x827f7c79
 800264c:	8e8b8885 	.word	0x8e8b8885
 8002650:	9a979491 	.word	0x9a979491
 8002654:	a6a3a09d 	.word	0xa6a3a09d
 8002658:	b2afaca9 	.word	0xb2afaca9
 800265c:	bebbb8b5 	.word	0xbebbb8b5
 8002660:	c4c1      	.short	0xc4c1
 8002662:	c7          	.byte	0xc7
 8002663:	00          	.byte	0x00
	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 8002664:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
		break;
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 8002668:	6013      	str	r3, [r2, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 800266a:	2000      	movs	r0, #0
		break;
 800266c:	4770      	bx	lr
			(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 800266e:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 8002672:	e7f9      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 8002674:	f8b0 30a8 	ldrh.w	r3, [r0, #168]	; 0xa8
 8002678:	e7f6      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 800267a:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 800267e:	e7f3      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8002680:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
 8002684:	e7f0      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 8002686:	f8b0 30b2 	ldrh.w	r3, [r0, #178]	; 0xb2
 800268a:	e7ed      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
			(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 800268c:	f8b0 309c 	ldrh.w	r3, [r0, #156]	; 0x9c
 8002690:	e7ea      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 8002692:	f890 30b4 	ldrb.w	r3, [r0, #180]	; 0xb4
 8002696:	e7e7      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 8002698:	f8b0 30b6 	ldrh.w	r3, [r0, #182]	; 0xb6
 800269c:	e7e4      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 800269e:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
 80026a2:	e7e1      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 80026a4:	f8b0 30ba 	ldrh.w	r3, [r0, #186]	; 0xba
 80026a8:	e7de      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps;
 80026aa:	f8b0 30bc 	ldrh.w	r3, [r0, #188]	; 0xbc
 80026ae:	e7db      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 80026b0:	f8b0 30be 	ldrh.w	r3, [r0, #190]	; 0xbe
 80026b4:	e7d8      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps;
 80026b6:	f8b0 30c0 	ldrh.w	r3, [r0, #192]	; 0xc0
 80026ba:	e7d5      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 80026bc:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
 80026c0:	e7d2      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 80026c2:	f890 30c3 	ldrb.w	r3, [r0, #195]	; 0xc3
 80026c6:	e7cf      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 80026c8:	f890 30c4 	ldrb.w	r3, [r0, #196]	; 0xc4
 80026cc:	e7cc      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
			(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 80026ce:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 80026d2:	e7c9      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_seed_cfg;
 80026d4:	f890 30c5 	ldrb.w	r3, [r0, #197]	; 0xc5
 80026d8:	e7c6      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 80026da:	f890 30c7 	ldrb.w	r3, [r0, #199]	; 0xc7
 80026de:	e7c3      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 80026e0:	f890 30c8 	ldrb.w	r3, [r0, #200]	; 0xc8
 80026e4:	e7c0      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
			(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 80026e6:	f9b0 313e 	ldrsh.w	r3, [r0, #318]	; 0x13e
 80026ea:	e7bd      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 80026ec:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
 80026f0:	e7ba      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 80026f2:	f890 30ab 	ldrb.w	r3, [r0, #171]	; 0xab
 80026f6:	e7b7      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 80026f8:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 80026fc:	e7b4      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 80026fe:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
 8002702:	e7b1      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 8002704:	f890 30ae 	ldrb.w	r3, [r0, #174]	; 0xae
 8002708:	e7ae      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 800270a:	f890 30af 	ldrb.w	r3, [r0, #175]	; 0xaf
 800270e:	e7ab      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8002710:	f890 30c6 	ldrb.w	r3, [r0, #198]	; 0xc6
 8002714:	e7a8      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
			(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8002716:	f890 3160 	ldrb.w	r3, [r0, #352]	; 0x160
 800271a:	e7a5      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
			(int32_t)pdev->refspadchar.device_test_mode;
 800271c:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
 8002720:	e7a2      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
			(int32_t)pdev->refspadchar.vcsel_period;
 8002722:	f890 3111 	ldrb.w	r3, [r0, #273]	; 0x111
 8002726:	e79f      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
 8002728:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 800272c:	e79c      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
			(int32_t)pdev->refspadchar.timeout_us;
		break;
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
			(int32_t)pdev->refspadchar.target_count_rate_mcps;
 800272e:	f8b0 3118 	ldrh.w	r3, [r0, #280]	; 0x118
 8002732:	e799      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
			(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8002734:	f8b0 311a 	ldrh.w	r3, [r0, #282]	; 0x11a
 8002738:	e796      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
			(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 800273a:	f8b0 311c 	ldrh.w	r3, [r0, #284]	; 0x11c
 800273e:	e793      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;;
 8002740:	f8b0 3144 	ldrh.w	r3, [r0, #324]	; 0x144
 8002744:	e790      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
 8002746:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
 800274a:	e78d      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
			(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
		break;
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
 800274c:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
 8002750:	e78a      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
			(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
		break;
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
 8002752:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8002756:	e787      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
			(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
		break;
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 8002758:	f890 3154 	ldrb.w	r3, [r0, #340]	; 0x154
 800275c:	e784      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 800275e:	f890 3155 	ldrb.w	r3, [r0, #341]	; 0x155
 8002762:	e781      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8002764:	f890 3156 	ldrb.w	r3, [r0, #342]	; 0x156
 8002768:	e77e      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
			(int32_t)pdev->ssc_cfg.vcsel_period;
 800276a:	f890 3121 	ldrb.w	r3, [r0, #289]	; 0x121
 800276e:	e77b      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
			(int32_t)pdev->ssc_cfg.vcsel_start;
 8002770:	f890 3122 	ldrb.w	r3, [r0, #290]	; 0x122
 8002774:	e778      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
			(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 8002776:	f8b0 3128 	ldrh.w	r3, [r0, #296]	; 0x128
 800277a:	e775      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 800277c:	f8b0 30ca 	ldrh.w	r3, [r0, #202]	; 0xca
 8002780:	e772      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 8002782:	f8b0 30cc 	ldrh.w	r3, [r0, #204]	; 0xcc
 8002786:	e76f      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8002788:	f8d0 30d0 	ldr.w	r3, [r0, #208]	; 0xd0
 800278c:	e76c      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
			(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
		break;
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 800278e:	f8d0 30d4 	ldr.w	r3, [r0, #212]	; 0xd4
 8002792:	e769      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
			(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
		break;
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8002794:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 8002798:	e766      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
			(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
		break;
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 800279a:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 800279e:	e763      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
			(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
		break;
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 80027a0:	f8d0 30e4 	ldr.w	r3, [r0, #228]	; 0xe4
 80027a4:	e760      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
			(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
		break;
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 80027a6:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
 80027aa:	e75d      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
			(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
		break;
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
			(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 80027ac:	f890 32e4 	ldrb.w	r3, [r0, #740]	; 0x2e4
 80027b0:	e75a      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
		break;
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 80027b2:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 80027b6:	e757      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
			(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
		break;
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 80027b8:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 80027bc:	e754      	b.n	8002668 <VL53L1_get_tuning_parm+0x4c>
			(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
		break;


	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 80027be:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80027c2:	6013      	str	r3, [r2, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 80027c4:	f06f 0003 	mvn.w	r0, #3
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80027c8:	4770      	bx	lr

080027ca <VL53L1_init_refspadchar_config_struct>:
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 80027ca:	2308      	movs	r3, #8
 80027cc:	7003      	strb	r3, [r0, #0]
		VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period =
 80027ce:	230b      	movs	r3, #11
 80027d0:	7043      	strb	r3, [r0, #1]
		VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us =
 80027d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027d6:	6043      	str	r3, [r0, #4]
		VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps =
 80027d8:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80027dc:	8103      	strh	r3, [r0, #8]
		VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 80027de:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80027e2:	8143      	strh	r3, [r0, #10]
		VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 80027e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80027e8:	8183      	strh	r3, [r0, #12]
		VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 80027ea:	2000      	movs	r0, #0
 80027ec:	4770      	bx	lr

080027ee <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 80027ee:	4603      	mov	r3, r0
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 80027f0:	2212      	movs	r2, #18
 80027f2:	705a      	strb	r2, [r3, #1]
		VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start =
 80027f4:	220f      	movs	r2, #15
 80027f6:	709a      	strb	r2, [r3, #2]
		VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width = 0x02;
 80027f8:	2202      	movs	r2, #2
 80027fa:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us = 36000;
 80027fc:	f648 42a0 	movw	r2, #36000	; 0x8ca0
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 8002800:	2000      	movs	r0, #0
	pdata->timeout_us = 36000;
 8002802:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 8002804:	220c      	movs	r2, #12
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 8002806:	7018      	strb	r0, [r3, #0]
	pdata->rate_limit_mcps =
 8002808:	811a      	strh	r2, [r3, #8]
		VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 800280a:	4770      	bx	lr

0800280c <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 800280c:	4603      	mov	r3, r0
 800280e:	b510      	push	{r4, lr}
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8002810:	8940      	ldrh	r0, [r0, #10]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 8002812:	6008      	str	r0, [r1, #0]
{
 8002814:	460c      	mov	r4, r1
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8002816:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800281a:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800281e:	80a1      	strh	r1, [r4, #4]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;

	pdata->lite_mode_crosstalk_margin_kcps =
 8002820:	2300      	movs	r3, #0
 8002822:	8263      	strh	r3, [r4, #18]
		VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 8002824:	2340      	movs	r3, #64	; 0x40
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8002826:	80e2      	strh	r2, [r4, #6]
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps =
 8002828:	60a0      	str	r0, [r4, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps =
 800282a:	81a1      	strh	r1, [r4, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps =
 800282c:	81e2      	strh	r2, [r4, #14]
	pdata->crosstalk_range_ignore_threshold_mult =
 800282e:	7523      	strb	r3, [r4, #20]
		VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 8002830:	b958      	cbnz	r0, 800284a <VL53L1_init_xtalk_config_struct+0x3e>
	    && (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
	    && (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 8002832:	6863      	ldr	r3, [r4, #4]
 8002834:	b94b      	cbnz	r3, 800284a <VL53L1_init_xtalk_config_struct+0x3e>
		pdata->global_crosstalk_compensation_enable = 0x00;
 8002836:	7420      	strb	r0, [r4, #16]
	else
		pdata->global_crosstalk_compensation_enable = 0x01;


	if ((status == VL53L1_ERROR_NONE) &&
 8002838:	7c23      	ldrb	r3, [r4, #16]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d108      	bne.n	8002850 <VL53L1_init_xtalk_config_struct+0x44>
	    (pdata->global_crosstalk_compensation_enable == 0x01)) {
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 800283e:	2340      	movs	r3, #64	; 0x40
 8002840:	f000 fb93 	bl	8002f6a <VL53L1_calc_range_ignore_threshold>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 8002844:	82e0      	strh	r0, [r4, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8002846:	2000      	movs	r0, #0
 8002848:	bd10      	pop	{r4, pc}
		pdata->global_crosstalk_compensation_enable = 0x01;
 800284a:	2301      	movs	r3, #1
 800284c:	7423      	strb	r3, [r4, #16]
 800284e:	e7f3      	b.n	8002838 <VL53L1_init_xtalk_config_struct+0x2c>
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 8002850:	2300      	movs	r3, #0
 8002852:	82e3      	strh	r3, [r4, #22]
 8002854:	e7f7      	b.n	8002846 <VL53L1_init_xtalk_config_struct+0x3a>

08002856 <VL53L1_init_offset_cal_config_struct>:

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps =
 8002856:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800285a:	8003      	strh	r3, [r0, #0]
		VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us =
 800285c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002860:	6043      	str	r3, [r0, #4]
		VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us =
 8002862:	f243 23c8 	movw	r3, #13000	; 0x32c8
 8002866:	6083      	str	r3, [r0, #8]
		VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us =
 8002868:	60c3      	str	r3, [r0, #12]
		VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples =
 800286a:	2308      	movs	r3, #8
 800286c:	7403      	strb	r3, [r0, #16]
		VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples =
 800286e:	2328      	movs	r3, #40	; 0x28
 8002870:	7443      	strb	r3, [r0, #17]
		VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples =
 8002872:	2309      	movs	r3, #9
 8002874:	7483      	strb	r3, [r0, #18]
		VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 8002876:	2000      	movs	r0, #0
 8002878:	4770      	bx	lr

0800287a <VL53L1_init_tuning_parm_storage_struct>:
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version =
 800287a:	f248 0203 	movw	r2, #32771	; 0x8003
 800287e:	8002      	strh	r2, [r0, #0]
		VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version =
 8002880:	f248 0201 	movw	r2, #32769	; 0x8001
{
 8002884:	4603      	mov	r3, r0
	pdata->tp_tuning_parm_key_table_version =
 8002886:	8042      	strh	r2, [r0, #2]
		VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version =
 8002888:	f248 0241 	movw	r2, #32833	; 0x8041
 800288c:	8082      	strh	r2, [r0, #4]
		VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long =
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med =
 800288e:	210a      	movs	r1, #10
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short =
 8002890:	2206      	movs	r2, #6
	pdata->tp_init_phase_rtn_lite_med =
 8002892:	71d9      	strb	r1, [r3, #7]
	pdata->tp_init_phase_rtn_lite_short =
 8002894:	721a      	strb	r2, [r3, #8]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long =
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med =
 8002896:	7299      	strb	r1, [r3, #10]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short =
 8002898:	72da      	strb	r2, [r3, #11]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 800289a:	2102      	movs	r1, #2
		VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target =
 800289c:	2221      	movs	r2, #33	; 0x21
	pdata->tp_consistency_lite_phase_tolerance =
 800289e:	7319      	strb	r1, [r3, #12]
	pdata->tp_phasecal_target =
 80028a0:	735a      	strb	r2, [r3, #13]
		VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns =
		VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm =
		VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg =
 80028a2:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
	pdata->tp_lite_long_sigma_thresh_mm =
 80028a6:	f44f 72b4 	mov.w	r2, #360	; 0x168
		VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg =
		VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier =
 80028aa:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
		VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps =
 80028ae:	f44f 6120 	mov.w	r1, #2560	; 0xa00
	pdata->tp_lite_long_sigma_thresh_mm =
 80028b2:	825a      	strh	r2, [r3, #18]
	pdata->tp_lite_med_sigma_thresh_mm =
 80028b4:	829a      	strh	r2, [r3, #20]
	pdata->tp_lite_short_sigma_thresh_mm =
 80028b6:	82da      	strh	r2, [r3, #22]
	pdata->tp_dss_target_lite_mcps =
 80028b8:	84d9      	strh	r1, [r3, #38]	; 0x26
	pdata->tp_lite_long_min_count_rate_rtn_mcps =
 80028ba:	22c0      	movs	r2, #192	; 0xc0
		VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps =
 80028bc:	8519      	strh	r1, [r3, #40]	; 0x28
		VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us =
 80028be:	f248 0130 	movw	r1, #32816	; 0x8030
	pdata->tp_lite_long_min_count_rate_rtn_mcps =
 80028c2:	831a      	strh	r2, [r3, #24]
	pdata->tp_lite_med_min_count_rate_rtn_mcps =
 80028c4:	835a      	strh	r2, [r3, #26]
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 80028c6:	839a      	strh	r2, [r3, #28]
	pdata->tp_phasecal_timeout_lite_us =
 80028c8:	62d9      	str	r1, [r3, #44]	; 0x2c
	pdata->tp_lite_sigma_est_pulse_width_ns =
 80028ca:	2208      	movs	r2, #8
		VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us =
 80028cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	pdata->tp_init_phase_rtn_lite_long =
 80028d0:	200e      	movs	r0, #14
	pdata->tp_lite_sigma_est_pulse_width_ns =
 80028d2:	779a      	strb	r2, [r3, #30]
	pdata->tp_phasecal_timeout_timed_us =
 80028d4:	6319      	str	r1, [r3, #48]	; 0x30
	pdata->tp_lite_sigma_est_amb_width_ns =
 80028d6:	2210      	movs	r2, #16
		VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us =
 80028d8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
	pdata->tp_init_phase_rtn_lite_long =
 80028dc:	7198      	strb	r0, [r3, #6]
	pdata->tp_init_phase_ref_lite_long =
 80028de:	7258      	strb	r0, [r3, #9]
	pdata->tp_lite_sigma_est_amb_width_ns =
 80028e0:	77da      	strb	r2, [r3, #31]
	pdata->tp_cal_repeat_rate =
 80028e2:	2000      	movs	r0, #0
	pdata->tp_lite_sigma_ref_mm =
 80028e4:	2201      	movs	r2, #1
	pdata->tp_mm_timeout_lite_us =
 80028e6:	6359      	str	r1, [r3, #52]	; 0x34
		VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us =
 80028e8:	6399      	str	r1, [r3, #56]	; 0x38
		VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us =
 80028ea:	f24f 6118 	movw	r1, #63000	; 0xf618
	pdata->tp_lite_sigma_ref_mm =
 80028ee:	f883 2020 	strb.w	r2, [r3, #32]
	pdata->tp_timed_seed_cfg =
 80028f2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	pdata->tp_cal_repeat_rate =
 80028f6:	81d8      	strh	r0, [r3, #14]
	pdata->tp_lite_min_clip =
 80028f8:	7418      	strb	r0, [r3, #16]
	pdata->tp_lite_first_order_select =
 80028fa:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
	pdata->tp_range_timeout_lite_us =
 80028fe:	6419      	str	r1, [r3, #64]	; 0x40
		VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us =
 8002900:	f243 21c8 	movw	r1, #13000	; 0x32c8
		VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 8002904:	63da      	str	r2, [r3, #60]	; 0x3c
		VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 8002906:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
	pdata->tp_range_timeout_timed_us =
 800290a:	6459      	str	r1, [r3, #68]	; 0x44
	pdata->tp_range_timeout_lpa_us =
 800290c:	649a      	str	r2, [r3, #72]	; 0x48


	LOG_FUNCTION_END(status);

	return status;
}
 800290e:	4770      	bx	lr

08002910 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8002910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002914:	4604      	mov	r4, r0
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 8002916:	f44f 6020 	mov.w	r0, #2560	; 0xa00
{
 800291a:	9d09      	ldr	r5, [sp, #36]	; 0x24
	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 800291c:	8020      	strh	r0, [r4, #0]
	 */
	pstatic->gpio_hv_mux__ctrl = \
		VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
		VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status = 0x02;
 800291e:	f04f 0e02 	mov.w	lr, #2
	pstatic->debug__ctrl = 0x00;
 8002922:	2000      	movs	r0, #0
	pstatic->gpio__fio_hv_status = 0x00;
	pstatic->ana_config__spad_sel_pswidth = 0x02;
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 8002924:	f04f 0808 	mov.w	r8, #8
	pstatic->gpio_hv_mux__ctrl = \
 8002928:	2611      	movs	r6, #17
	pstatic->debug__ctrl = 0x00;
 800292a:	70a0      	strb	r0, [r4, #2]
	pstatic->test_mode__ctrl = 0x00;
 800292c:	70e0      	strb	r0, [r4, #3]
	pstatic->clk_gating__ctrl = 0x00;
 800292e:	7120      	strb	r0, [r4, #4]
	pstatic->nvm_bist__ctrl = 0x00;
 8002930:	7160      	strb	r0, [r4, #5]
	pstatic->nvm_bist__num_nvm_words = 0x00;
 8002932:	71a0      	strb	r0, [r4, #6]
	pstatic->nvm_bist__start_address = 0x00;
 8002934:	71e0      	strb	r0, [r4, #7]
	pstatic->host_if__status = 0x00;
 8002936:	7220      	strb	r0, [r4, #8]
	pstatic->pad_i2c_hv__config = 0x00;
 8002938:	7260      	strb	r0, [r4, #9]
	pstatic->pad_i2c_hv__extsup_config = 0x00;
 800293a:	72a0      	strb	r0, [r4, #10]
	pstatic->gpio_hv_pad__ctrl = 0x00;
 800293c:	72e0      	strb	r0, [r4, #11]
	pstatic->gpio__tio_hv_status = 0x02;
 800293e:	f884 e00d 	strb.w	lr, [r4, #13]
	pstatic->gpio__fio_hv_status = 0x00;
 8002942:	73a0      	strb	r0, [r4, #14]
	pstatic->ana_config__spad_sel_pswidth = 0x02;
 8002944:	f884 e00f 	strb.w	lr, [r4, #15]
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 8002948:	f884 8010 	strb.w	r8, [r4, #16]
	pstatic->ana_config__fast_osc__config_ctrl = 0x00;
 800294c:	7460      	strb	r0, [r4, #17]
	pstatic->gpio_hv_mux__ctrl = \
 800294e:	7326      	strb	r6, [r4, #12]

	pstatic->sigma_estimator__effective_pulse_width_ns =
 8002950:	7fae      	ldrb	r6, [r5, #30]
 8002952:	74a6      	strb	r6, [r4, #18]
		ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
	pstatic->sigma_estimator__effective_ambient_width_ns =
 8002954:	7fee      	ldrb	r6, [r5, #31]
 8002956:	74e6      	strb	r6, [r4, #19]
		ptuning_parms->tp_lite_sigma_est_amb_width_ns;
	pstatic->sigma_estimator__sigma_ref_mm =
 8002958:	f895 6020 	ldrb.w	r6, [r5, #32]
 800295c:	7526      	strb	r6, [r4, #20]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;

	pstatic->algo__range_ignore_threshold_mcps = 0x0000;

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 800295e:	f04f 0cff 	mov.w	ip, #255	; 0xff
	pstatic->algo__crosstalk_compensation_valid_height_mm = 0x01;
 8002962:	2601      	movs	r6, #1
 8002964:	7566      	strb	r6, [r4, #21]
	pstatic->spare_host_config__static_config_spare_0 = 0x00;
 8002966:	75a0      	strb	r0, [r4, #22]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;
 8002968:	75e0      	strb	r0, [r4, #23]
	pstatic->algo__range_ignore_threshold_mcps = 0x0000;
 800296a:	8320      	strh	r0, [r4, #24]
	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 800296c:	f884 c01a 	strb.w	ip, [r4, #26]
	pstatic->algo__range_min_clip =
 8002970:	f895 9010 	ldrb.w	r9, [r5, #16]
{
 8002974:	9f08      	ldr	r7, [sp, #32]
	pstatic->algo__range_min_clip =
 8002976:	f884 901b 	strb.w	r9, [r4, #27]
	/*
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance =
 800297a:	f895 900c 	ldrb.w	r9, [r5, #12]
 800297e:	f884 901c 	strb.w	r9, [r4, #28]
		ptuning_parms->tp_consistency_lite_phase_tolerance;
	pstatic->spare_host_config__static_config_spare_2 = 0x00;
 8002982:	7760      	strb	r0, [r4, #29]
	pstatic->sd_config__reset_stages_msb = 0x00;
 8002984:	77a0      	strb	r0, [r4, #30]
	pstatic->sd_config__reset_stages_lsb = 0x00;
 8002986:	77e0      	strb	r0, [r4, #31]

	pgeneral->gph_config__stream_count_update_value = 0x00;
	pgeneral->global_config__stream_divider = 0x00;
	pgeneral->system__interrupt_config_gpio =
 8002988:	f04f 0920 	mov.w	r9, #32
		VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start = 0x0B;
 800298c:	240b      	movs	r4, #11
	pgeneral->gph_config__stream_count_update_value = 0x00;
 800298e:	7008      	strb	r0, [r1, #0]
	pgeneral->global_config__stream_divider = 0x00;
 8002990:	7048      	strb	r0, [r1, #1]
	pgeneral->system__interrupt_config_gpio =
 8002992:	f881 9002 	strb.w	r9, [r1, #2]
	pgeneral->cal_config__vcsel_start = 0x0B;
 8002996:	70cc      	strb	r4, [r1, #3]
	 * Set VHV / Phase Cal repeat rate to 1 every
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate =
 8002998:	f8b5 a00e 	ldrh.w	sl, [r5, #14]
 800299c:	f8a1 a004 	strh.w	sl, [r1, #4]
		ptuning_parms->tp_cal_repeat_rate;
	pgeneral->global_config__vcsel_width = 0x02;
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop = 0x0D;
 80029a0:	f04f 0a0d 	mov.w	sl, #13
	pgeneral->global_config__vcsel_width = 0x02;
 80029a4:	f881 e006 	strb.w	lr, [r1, #6]
	pgeneral->phasecal_config__timeout_macrop = 0x0D;
 80029a8:	f881 a007 	strb.w	sl, [r1, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target =
 80029ac:	f895 a00d 	ldrb.w	sl, [r5, #13]
 80029b0:	f881 a008 	strb.w	sl, [r1, #8]
		VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high = 0x0000;
	pgeneral->system__thresh_rate_low = 0x0000;
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select = 0x8C00;
 80029b4:	f44f 4a0c 	mov.w	sl, #35840	; 0x8c00
 80029b8:	f8a1 a010 	strh.w	sl, [r1, #16]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation = 0x38;
 80029bc:	f04f 0a38 	mov.w	sl, #56	; 0x38
	pgeneral->phasecal_config__override = 0x00;
 80029c0:	7248      	strb	r0, [r1, #9]
	pgeneral->dss_config__roi_mode_control =
 80029c2:	728e      	strb	r6, [r1, #10]
	pgeneral->system__thresh_rate_high = 0x0000;
 80029c4:	8188      	strh	r0, [r1, #12]
	pgeneral->system__thresh_rate_low = 0x0000;
 80029c6:	81c8      	strh	r0, [r1, #14]
	pgeneral->dss_config__manual_block_select = 0x00;
 80029c8:	7488      	strb	r0, [r1, #18]
	pgeneral->dss_config__aperture_attenuation = 0x38;
 80029ca:	f881 a013 	strb.w	sl, [r1, #19]
	pgeneral->dss_config__max_spads_limit = 0xFF;
 80029ce:	f881 c014 	strb.w	ip, [r1, #20]
	pgeneral->dss_config__min_spads_limit = 0x01;
 80029d2:	754e      	strb	r6, [r1, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
	ptiming->mm_config__timeout_macrop_a_lo = 0x1a;
 80029d4:	211a      	movs	r1, #26
 80029d6:	7051      	strb	r1, [r2, #1]
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi = 0x01;
	ptiming->range_config__timeout_macrop_a_lo = 0xCC;
 80029d8:	21cc      	movs	r1, #204	; 0xcc
 80029da:	7151      	strb	r1, [r2, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a = 0x0B;
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi = 0x01;
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 80029dc:	21f5      	movs	r1, #245	; 0xf5
	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80029de:	7010      	strb	r0, [r2, #0]
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80029e0:	7090      	strb	r0, [r2, #2]
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;
 80029e2:	f882 9003 	strb.w	r9, [r2, #3]
	ptiming->range_config__timeout_macrop_a_hi = 0x01;
 80029e6:	7116      	strb	r6, [r2, #4]
	ptiming->range_config__vcsel_period_a = 0x0B;
 80029e8:	7194      	strb	r4, [r2, #6]
	ptiming->range_config__timeout_macrop_b_hi = 0x01;
 80029ea:	71d6      	strb	r6, [r2, #7]
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 80029ec:	7211      	strb	r1, [r2, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b = 0x09;
 80029ee:	2109      	movs	r1, #9
 80029f0:	7251      	strb	r1, [r2, #9]
	 * Sigma thresh register - format 14.2
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh =
 80029f2:	f8b5 9014 	ldrh.w	r9, [r5, #20]
 80029f6:	f8a2 900a 	strh.w	r9, [r2, #10]
	/*
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 80029fa:	f8b5 901a 	ldrh.w	r9, [r5, #26]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low = 0x08;
 80029fe:	f882 800e 	strb.w	r8, [r2, #14]
	ptiming->range_config__valid_phase_high = 0x78;
 8002a02:	f04f 0878 	mov.w	r8, #120	; 0x78
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8002a06:	f8a2 900c 	strh.w	r9, [r2, #12]
	ptiming->range_config__valid_phase_high = 0x78;
 8002a0a:	f882 800f 	strb.w	r8, [r2, #15]
	ptiming->system__intermeasurement_period = 0x00000000;
 8002a0e:	6110      	str	r0, [r2, #16]
	ptiming->system__fractional_enable = 0x00;
 8002a10:	7510      	strb	r0, [r2, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0 = 0x01;
 8002a12:	701e      	strb	r6, [r3, #0]

	pdynamic->system__thresh_high = 0x0000;
 8002a14:	8058      	strh	r0, [r3, #2]
	pdynamic->system__thresh_low = 0x0000;
 8002a16:	8098      	strh	r0, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant = 0x00;
 8002a18:	7198      	strb	r0, [r3, #6]
	pdynamic->system__seed_config =
 8002a1a:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
 8002a1e:	71da      	strb	r2, [r3, #7]
		ptuning_parms->tp_lite_seed_cfg;

	/* Timing A */
	pdynamic->sd_config__woi_sd0 = 0x0B;
 8002a20:	721c      	strb	r4, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1 = 0x09;
 8002a22:	7259      	strb	r1, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0 =
 8002a24:	79ea      	ldrb	r2, [r5, #7]
 8002a26:	729a      	strb	r2, [r3, #10]
		ptuning_parms->tp_init_phase_rtn_lite_med;
	pdynamic->sd_config__initial_phase_sd1 =
 8002a28:	7aaa      	ldrb	r2, [r5, #10]
 8002a2a:	72da      	strb	r2, [r3, #11]
		ptuning_parms->tp_init_phase_ref_lite_med;;

	pdynamic->system__grouped_parameter_hold_1 = 0x01;
 8002a2c:	731e      	strb	r6, [r3, #12]
	 *        3  -> 4095
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
 8002a2e:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
 8002a32:	735a      	strb	r2, [r3, #13]
		ptuning_parms->tp_lite_first_order_select;
	pdynamic->sd_config__quantifier =
 8002a34:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
 8002a38:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad = 0xC7;
 8002a3a:	22c7      	movs	r2, #199	; 0xc7
 8002a3c:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;


	pdynamic->system__sequence_config = \
 8002a3e:	22db      	movs	r2, #219	; 0xdb
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8002a40:	f883 c010 	strb.w	ip, [r3, #16]
	pdynamic->system__sequence_config = \
 8002a44:	745a      	strb	r2, [r3, #17]
		VL53L1_SEQUENCE_DSS1_EN | \
		VL53L1_SEQUENCE_DSS2_EN | \
		VL53L1_SEQUENCE_MM2_EN | \
		VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold = 0x02;
 8002a46:	f883 e012 	strb.w	lr, [r3, #18]
	psystem->system__stream_count_ctrl = 0x00;
	psystem->firmware__enable = 0x01;
	psystem->system__interrupt_clear = \
		VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start = \
 8002a4a:	2321      	movs	r3, #33	; 0x21
	psystem->system__stream_count_ctrl = 0x00;
 8002a4c:	7078      	strb	r0, [r7, #1]
	psystem->firmware__enable = 0x01;
 8002a4e:	70be      	strb	r6, [r7, #2]
	psystem->system__interrupt_clear = \
 8002a50:	70fe      	strb	r6, [r7, #3]
	psystem->system__mode_start = \
 8002a52:	713b      	strb	r3, [r7, #4]
		VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
}
 8002a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002a58 <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8002a58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a5a:	9d09      	ldr	r5, [sp, #36]	; 0x24

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8002a5c:	9f08      	ldr	r7, [sp, #32]
 8002a5e:	9501      	str	r5, [sp, #4]
 8002a60:	9700      	str	r7, [sp, #0]
{
 8002a62:	4614      	mov	r4, r2
 8002a64:	461e      	mov	r6, r3
	status = VL53L1_preset_mode_standard_ranging(
 8002a66:	f7ff ff53 	bl	8002910 <VL53L1_preset_mode_standard_ranging>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8002a6a:	b988      	cbnz	r0, 8002a90 <VL53L1_preset_mode_standard_ranging_short_range+0x38>
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a = 0x07;
		ptiming->range_config__vcsel_period_b = 0x05;
 8002a6c:	2305      	movs	r3, #5
		ptiming->range_config__vcsel_period_a = 0x07;
 8002a6e:	2207      	movs	r2, #7
 8002a70:	71a2      	strb	r2, [r4, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 8002a72:	7263      	strb	r3, [r4, #9]
		ptiming->range_config__sigma_thresh =
 8002a74:	8ae9      	ldrh	r1, [r5, #22]
 8002a76:	8161      	strh	r1, [r4, #10]
			ptuning_parms->tp_lite_short_sigma_thresh_mm;
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8002a78:	8ba9      	ldrh	r1, [r5, #28]
 8002a7a:	81a1      	strh	r1, [r4, #12]
			ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
		ptiming->range_config__valid_phase_low = 0x08;
 8002a7c:	2108      	movs	r1, #8
 8002a7e:	73a1      	strb	r1, [r4, #14]
		ptiming->range_config__valid_phase_high = 0x38;
 8002a80:	2138      	movs	r1, #56	; 0x38
 8002a82:	73e1      	strb	r1, [r4, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0 = 0x07;
 8002a84:	7232      	strb	r2, [r6, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 8002a86:	7273      	strb	r3, [r6, #9]
		pdynamic->sd_config__initial_phase_sd0 =
 8002a88:	7a2b      	ldrb	r3, [r5, #8]
 8002a8a:	72b3      	strb	r3, [r6, #10]
			ptuning_parms->tp_init_phase_rtn_lite_short;
		pdynamic->sd_config__initial_phase_sd1 =
 8002a8c:	7aeb      	ldrb	r3, [r5, #11]
 8002a8e:	72f3      	strb	r3, [r6, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8002a90:	b003      	add	sp, #12
 8002a92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a94 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8002a94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a96:	9d09      	ldr	r5, [sp, #36]	; 0x24

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8002a98:	9f08      	ldr	r7, [sp, #32]
 8002a9a:	9501      	str	r5, [sp, #4]
 8002a9c:	9700      	str	r7, [sp, #0]
{
 8002a9e:	4614      	mov	r4, r2
 8002aa0:	461e      	mov	r6, r3
	status = VL53L1_preset_mode_standard_ranging(
 8002aa2:	f7ff ff35 	bl	8002910 <VL53L1_preset_mode_standard_ranging>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8002aa6:	b988      	cbnz	r0, 8002acc <VL53L1_preset_mode_standard_ranging_long_range+0x38>
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a = 0x0F;
		ptiming->range_config__vcsel_period_b = 0x0D;
 8002aa8:	230d      	movs	r3, #13
		ptiming->range_config__vcsel_period_a = 0x0F;
 8002aaa:	220f      	movs	r2, #15
 8002aac:	71a2      	strb	r2, [r4, #6]
		ptiming->range_config__vcsel_period_b = 0x0D;
 8002aae:	7263      	strb	r3, [r4, #9]
		ptiming->range_config__sigma_thresh =
 8002ab0:	8a69      	ldrh	r1, [r5, #18]
 8002ab2:	8161      	strh	r1, [r4, #10]
			ptuning_parms->tp_lite_long_sigma_thresh_mm;
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8002ab4:	8b29      	ldrh	r1, [r5, #24]
 8002ab6:	81a1      	strh	r1, [r4, #12]
			ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
		ptiming->range_config__valid_phase_low = 0x08;
 8002ab8:	2108      	movs	r1, #8
 8002aba:	73a1      	strb	r1, [r4, #14]
		ptiming->range_config__valid_phase_high = 0xB8;
 8002abc:	21b8      	movs	r1, #184	; 0xb8
 8002abe:	73e1      	strb	r1, [r4, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0 = 0x0F;
 8002ac0:	7232      	strb	r2, [r6, #8]
		pdynamic->sd_config__woi_sd1 = 0x0D;
 8002ac2:	7273      	strb	r3, [r6, #9]
		pdynamic->sd_config__initial_phase_sd0 =
 8002ac4:	79ab      	ldrb	r3, [r5, #6]
 8002ac6:	72b3      	strb	r3, [r6, #10]
			ptuning_parms->tp_init_phase_rtn_lite_long;
		pdynamic->sd_config__initial_phase_sd1 =
 8002ac8:	7a6b      	ldrb	r3, [r5, #9]
 8002aca:	72f3      	strb	r3, [r6, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8002acc:	b003      	add	sp, #12
 8002ace:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ad0 <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8002ad0:	b573      	push	{r0, r1, r4, r5, r6, lr}

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8002ad2:	9e07      	ldr	r6, [sp, #28]
 8002ad4:	9601      	str	r6, [sp, #4]
 8002ad6:	9e06      	ldr	r6, [sp, #24]
 8002ad8:	9600      	str	r6, [sp, #0]
{
 8002ada:	460d      	mov	r5, r1
 8002adc:	461c      	mov	r4, r3
	status = VL53L1_preset_mode_standard_ranging(
 8002ade:	f7ff ff17 	bl	8002910 <VL53L1_preset_mode_standard_ranging>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8002ae2:	b918      	cbnz	r0, 8002aec <VL53L1_preset_mode_standard_ranging_mm1_cal+0x1c>
		pgeneral->dss_config__roi_mode_control =
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	72ab      	strb	r3, [r5, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config = \
 8002ae8:	233b      	movs	r3, #59	; 0x3b
 8002aea:	7463      	strb	r3, [r4, #17]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8002aec:	b002      	add	sp, #8
 8002aee:	bd70      	pop	{r4, r5, r6, pc}

08002af0 <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8002af0:	b573      	push	{r0, r1, r4, r5, r6, lr}

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8002af2:	9e07      	ldr	r6, [sp, #28]
 8002af4:	9601      	str	r6, [sp, #4]
 8002af6:	9e06      	ldr	r6, [sp, #24]
 8002af8:	9600      	str	r6, [sp, #0]
{
 8002afa:	460d      	mov	r5, r1
 8002afc:	461c      	mov	r4, r3
	status = VL53L1_preset_mode_standard_ranging(
 8002afe:	f7ff ff07 	bl	8002910 <VL53L1_preset_mode_standard_ranging>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8002b02:	b918      	cbnz	r0, 8002b0c <VL53L1_preset_mode_standard_ranging_mm2_cal+0x1c>
		pgeneral->dss_config__roi_mode_control =
 8002b04:	2302      	movs	r3, #2
 8002b06:	72ab      	strb	r3, [r5, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config = \
 8002b08:	235b      	movs	r3, #91	; 0x5b
 8002b0a:	7463      	strb	r3, [r4, #17]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8002b0c:	b002      	add	sp, #8
 8002b0e:	bd70      	pop	{r4, r5, r6, pc}

08002b10 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8002b10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b12:	9d08      	ldr	r5, [sp, #32]
 8002b14:	9f09      	ldr	r7, [sp, #36]	; 0x24

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8002b16:	e88d 00a0 	stmia.w	sp, {r5, r7}
{
 8002b1a:	4614      	mov	r4, r2
 8002b1c:	461e      	mov	r6, r3
	status = VL53L1_preset_mode_standard_ranging(
 8002b1e:	f7ff fef7 	bl	8002910 <VL53L1_preset_mode_standard_ranging>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8002b22:	b970      	cbnz	r0, 8002b42 <VL53L1_preset_mode_timed_ranging+0x32>
		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 8002b24:	23b1      	movs	r3, #177	; 0xb1
		pdynamic->system__grouped_parameter_hold = 0x00;
 8002b26:	74b0      	strb	r0, [r6, #18]
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 8002b28:	7163      	strb	r3, [r4, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 8002b2a:	23d4      	movs	r3, #212	; 0xd4
 8002b2c:	7223      	strb	r3, [r4, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 8002b2e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8002b32:	7120      	strb	r0, [r4, #4]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8002b34:	71e0      	strb	r0, [r4, #7]
		ptiming->system__intermeasurement_period = 0x00000600;
 8002b36:	6123      	str	r3, [r4, #16]
		pdynamic->system__seed_config =
 8002b38:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002b3c:	71f3      	strb	r3, [r6, #7]
			ptuning_parms->tp_timed_seed_cfg;

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 8002b3e:	2340      	movs	r3, #64	; 0x40
 8002b40:	712b      	strb	r3, [r5, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8002b42:	b003      	add	sp, #12
 8002b44:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b46 <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8002b46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b48:	9d08      	ldr	r5, [sp, #32]
 8002b4a:	9f09      	ldr	r7, [sp, #36]	; 0x24

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 8002b4c:	e88d 00a0 	stmia.w	sp, {r5, r7}
{
 8002b50:	4614      	mov	r4, r2
 8002b52:	461e      	mov	r6, r3
	status = VL53L1_preset_mode_standard_ranging_short_range(
 8002b54:	f7ff ff80 	bl	8002a58 <VL53L1_preset_mode_standard_ranging_short_range>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8002b58:	b978      	cbnz	r0, 8002b7a <VL53L1_preset_mode_timed_ranging_short_range+0x34>


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi = 0x01;
 8002b5a:	2301      	movs	r3, #1
		pdynamic->system__grouped_parameter_hold = 0x00;
 8002b5c:	74b0      	strb	r0, [r6, #18]
		ptiming->range_config__timeout_macrop_a_hi = 0x01;
 8002b5e:	7123      	strb	r3, [r4, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x84;
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi = 0x01;
 8002b60:	71e3      	strb	r3, [r4, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xB1;
 8002b62:	23b1      	movs	r3, #177	; 0xb1
 8002b64:	7223      	strb	r3, [r4, #8]
		ptiming->range_config__timeout_macrop_a_lo = 0x84;
 8002b66:	2284      	movs	r2, #132	; 0x84

		ptiming->system__intermeasurement_period = 0x00000600;
 8002b68:	f44f 63c0 	mov.w	r3, #1536	; 0x600
		ptiming->range_config__timeout_macrop_a_lo = 0x84;
 8002b6c:	7162      	strb	r2, [r4, #5]
		ptiming->system__intermeasurement_period = 0x00000600;
 8002b6e:	6123      	str	r3, [r4, #16]
		pdynamic->system__seed_config =
 8002b70:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002b74:	71f3      	strb	r3, [r6, #7]
			ptuning_parms->tp_timed_seed_cfg;

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 8002b76:	2340      	movs	r3, #64	; 0x40
 8002b78:	712b      	strb	r3, [r5, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8002b7a:	b003      	add	sp, #12
 8002b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b7e <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8002b7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b80:	9d08      	ldr	r5, [sp, #32]
 8002b82:	9f09      	ldr	r7, [sp, #36]	; 0x24

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 8002b84:	e88d 00a0 	stmia.w	sp, {r5, r7}
{
 8002b88:	4614      	mov	r4, r2
 8002b8a:	461e      	mov	r6, r3
	status = VL53L1_preset_mode_standard_ranging_long_range(
 8002b8c:	f7ff ff82 	bl	8002a94 <VL53L1_preset_mode_standard_ranging_long_range>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8002b90:	b970      	cbnz	r0, 8002bb0 <VL53L1_preset_mode_timed_ranging_long_range+0x32>

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
		ptiming->range_config__timeout_macrop_a_lo = 0x97;
 8002b92:	2397      	movs	r3, #151	; 0x97
		pdynamic->system__grouped_parameter_hold = 0x00;
 8002b94:	74b0      	strb	r0, [r6, #18]
		ptiming->range_config__timeout_macrop_a_lo = 0x97;
 8002b96:	7163      	strb	r3, [r4, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
		ptiming->range_config__timeout_macrop_b_lo = 0xB1;
 8002b98:	23b1      	movs	r3, #177	; 0xb1
 8002b9a:	7223      	strb	r3, [r4, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 8002b9c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8002ba0:	7120      	strb	r0, [r4, #4]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8002ba2:	71e0      	strb	r0, [r4, #7]
		ptiming->system__intermeasurement_period = 0x00000600;
 8002ba4:	6123      	str	r3, [r4, #16]
		pdynamic->system__seed_config =
 8002ba6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002baa:	71f3      	strb	r3, [r6, #7]
			ptuning_parms->tp_timed_seed_cfg;

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 8002bac:	2340      	movs	r3, #64	; 0x40
 8002bae:	712b      	strb	r3, [r5, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8002bb0:	b003      	add	sp, #12
 8002bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bb4 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8002bb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 8002bb6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002bb8:	9701      	str	r7, [sp, #4]
 8002bba:	9f08      	ldr	r7, [sp, #32]
 8002bbc:	9700      	str	r7, [sp, #0]
{
 8002bbe:	460c      	mov	r4, r1
 8002bc0:	461d      	mov	r5, r3
 8002bc2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	status = VL53L1_preset_mode_timed_ranging(
 8002bc4:	f7ff ffa4 	bl	8002b10 <VL53L1_preset_mode_timed_ranging>
		psystem,
		ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8002bc8:	b938      	cbnz	r0, 8002bda <VL53L1_preset_mode_low_power_auto_ranging+0x26>
		status = VL53L1_config_low_power_auto_mode(
 8002bca:	4632      	mov	r2, r6
 8002bcc:	4629      	mov	r1, r5
 8002bce:	4620      	mov	r0, r4
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8002bd0:	b003      	add	sp, #12
 8002bd2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		status = VL53L1_config_low_power_auto_mode(
 8002bd6:	f000 baa1 	b.w	800311c <VL53L1_config_low_power_auto_mode>
}
 8002bda:	b003      	add	sp, #12
 8002bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bde <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8002bde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 8002be0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002be2:	9701      	str	r7, [sp, #4]
 8002be4:	9f08      	ldr	r7, [sp, #32]
 8002be6:	9700      	str	r7, [sp, #0]
{
 8002be8:	460c      	mov	r4, r1
 8002bea:	461d      	mov	r5, r3
 8002bec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	status = VL53L1_preset_mode_timed_ranging_short_range(
 8002bee:	f7ff ffaa 	bl	8002b46 <VL53L1_preset_mode_timed_ranging_short_range>
		psystem,
		ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8002bf2:	b938      	cbnz	r0, 8002c04 <VL53L1_preset_mode_low_power_auto_short_ranging+0x26>
		status = VL53L1_config_low_power_auto_mode(
 8002bf4:	4632      	mov	r2, r6
 8002bf6:	4629      	mov	r1, r5
 8002bf8:	4620      	mov	r0, r4
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8002bfa:	b003      	add	sp, #12
 8002bfc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		status = VL53L1_config_low_power_auto_mode(
 8002c00:	f000 ba8c 	b.w	800311c <VL53L1_config_low_power_auto_mode>
}
 8002c04:	b003      	add	sp, #12
 8002c06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c08 <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8002c08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 8002c0a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002c0c:	9701      	str	r7, [sp, #4]
 8002c0e:	9f08      	ldr	r7, [sp, #32]
 8002c10:	9700      	str	r7, [sp, #0]
{
 8002c12:	460c      	mov	r4, r1
 8002c14:	461d      	mov	r5, r3
 8002c16:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	status = VL53L1_preset_mode_timed_ranging_long_range(
 8002c18:	f7ff ffb1 	bl	8002b7e <VL53L1_preset_mode_timed_ranging_long_range>
		psystem,
		ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8002c1c:	b938      	cbnz	r0, 8002c2e <VL53L1_preset_mode_low_power_auto_long_ranging+0x26>
		status = VL53L1_config_low_power_auto_mode(
 8002c1e:	4632      	mov	r2, r6
 8002c20:	4629      	mov	r1, r5
 8002c22:	4620      	mov	r0, r4
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8002c24:	b003      	add	sp, #12
 8002c26:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		status = VL53L1_config_low_power_auto_mode(
 8002c2a:	f000 ba77 	b.w	800311c <VL53L1_config_low_power_auto_mode>
}
 8002c2e:	b003      	add	sp, #12
 8002c30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c32 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8002c32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c34:	9d08      	ldr	r5, [sp, #32]
 8002c36:	9f09      	ldr	r7, [sp, #36]	; 0x24

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8002c38:	e88d 00a0 	stmia.w	sp, {r5, r7}
{
 8002c3c:	4614      	mov	r4, r2
 8002c3e:	461e      	mov	r6, r3
	status = VL53L1_preset_mode_standard_ranging(
 8002c40:	f7ff fe66 	bl	8002910 <VL53L1_preset_mode_standard_ranging>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8002c44:	b958      	cbnz	r0, 8002c5e <VL53L1_preset_mode_singleshot_ranging+0x2c>

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 8002c46:	23b1      	movs	r3, #177	; 0xb1
		pdynamic->system__grouped_parameter_hold = 0x00;
 8002c48:	74b0      	strb	r0, [r6, #18]
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 8002c4a:	7163      	strb	r3, [r4, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 8002c4c:	23d4      	movs	r3, #212	; 0xd4
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8002c4e:	7120      	strb	r0, [r4, #4]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8002c50:	71e0      	strb	r0, [r4, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 8002c52:	7223      	strb	r3, [r4, #8]

		pdynamic->system__seed_config =
 8002c54:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002c58:	71f3      	strb	r3, [r6, #7]
			ptuning_parms->tp_timed_seed_cfg;

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 8002c5a:	2310      	movs	r3, #16
 8002c5c:	712b      	strb	r3, [r5, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8002c5e:	b003      	add	sp, #12
 8002c60:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c62 <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8002c62:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002c64:	9c06      	ldr	r4, [sp, #24]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8002c66:	9d07      	ldr	r5, [sp, #28]
 8002c68:	e88d 0030 	stmia.w	sp, {r4, r5}
 8002c6c:	f7ff fe50 	bl	8002910 <VL53L1_preset_mode_standard_ranging>
		psystem,
		ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8002c70:	b908      	cbnz	r0, 8002c76 <VL53L1_preset_mode_olt+0x14>
		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl = 0x01;
 8002c72:	2301      	movs	r3, #1
 8002c74:	7063      	strb	r3, [r4, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8002c76:	b003      	add	sp, #12
 8002c78:	bd30      	pop	{r4, r5, pc}

08002c7a <VL53L1_init_version>:
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	pdev->version.ll_major = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
	pdev->version.ll_minor = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 8002c80:	2302      	movs	r3, #2
 8002c82:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
	pdev->version.ll_build = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 8002c86:	230a      	movs	r3, #10
 8002c88:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 8002c8c:	f44f 63e6 	mov.w	r3, #1840	; 0x730
 8002c90:	6243      	str	r3, [r0, #36]	; 0x24
 8002c92:	4770      	bx	lr

08002c94 <VL53L1_init_ll_driver_state>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);

	pstate->cfg_device_state = device_state;
	pstate->cfg_stream_count = 0;
 8002c94:	2300      	movs	r3, #0
	pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8002c96:	2202      	movs	r2, #2
	pstate->cfg_device_state = device_state;
 8002c98:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
	pstate->cfg_stream_count = 0;
 8002c9c:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
	pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8002ca0:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
	pstate->cfg_timing_status = 0;
 8002ca4:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f

	pstate->rd_device_state = device_state;
 8002ca8:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
	pstate->rd_stream_count = 0;
 8002cac:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
	pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8002cb0:	f880 2032 	strb.w	r2, [r0, #50]	; 0x32
	pstate->rd_timing_status = 0;
 8002cb4:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
 8002cb8:	4770      	bx	lr

08002cba <VL53L1_update_ll_driver_rd_state>:

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 8002cba:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
 8002cbe:	f013 03f0 	ands.w	r3, r3, #240	; 0xf0
 8002cc2:	d108      	bne.n	8002cd6 <VL53L1_update_ll_driver_rd_state+0x1c>
	     VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {
		pstate->rd_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 8002cc4:	2203      	movs	r2, #3
 8002cc6:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
		default:

			pstate->rd_device_state =
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count = 0;
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8002cca:	2202      	movs	r2, #2
			pstate->rd_stream_count = 0;
 8002ccc:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8002cd0:	f880 2032 	strb.w	r2, [r0, #50]	; 0x32
 8002cd4:	e022      	b.n	8002d1c <VL53L1_update_ll_driver_rd_state+0x62>
		if (pstate->rd_stream_count == 0xFF) {
 8002cd6:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8002cda:	2bff      	cmp	r3, #255	; 0xff
			pstate->rd_stream_count = 0x80;
 8002cdc:	bf0c      	ite	eq
 8002cde:	2380      	moveq	r3, #128	; 0x80
			pstate->rd_stream_count++;
 8002ce0:	3301      	addne	r3, #1
 8002ce2:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8002ce6:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 8002cea:	f083 0302 	eor.w	r3, r3, #2
 8002cee:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
		switch (pstate->rd_device_state) {
 8002cf2:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8002cf6:	3b03      	subs	r3, #3
 8002cf8:	2b05      	cmp	r3, #5
 8002cfa:	d821      	bhi.n	8002d40 <VL53L1_update_ll_driver_rd_state+0x86>
 8002cfc:	e8df f003 	tbb	[pc, r3]
 8002d00:	11202003 	.word	0x11202003
 8002d04:	1914      	.short	0x1914
			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 8002d06:	f890 31c6 	ldrb.w	r3, [r0, #454]	; 0x1c6
 8002d0a:	079b      	lsls	r3, r3, #30
				pstate->rd_device_state =
 8002d0c:	bf4c      	ite	mi
 8002d0e:	2306      	movmi	r3, #6
				pstate->rd_device_state =
 8002d10:	2308      	movpl	r3, #8
 8002d12:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
			pstate->rd_stream_count = 0;
 8002d16:	2300      	movs	r3, #0
 8002d18:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
			pstate->rd_timing_status = 0;
 8002d1c:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33

			break;
 8002d20:	e005      	b.n	8002d2e <VL53L1_update_ll_driver_rd_state+0x74>
			pstate->rd_stream_count = 0;
 8002d22:	2300      	movs	r3, #0
 8002d24:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
			pstate->rd_device_state =
 8002d28:	2308      	movs	r3, #8
 8002d2a:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
#endif

	LOG_FUNCTION_END(status);

	return status;
}
 8002d2e:	2000      	movs	r0, #0
 8002d30:	4770      	bx	lr
			pstate->rd_timing_status ^= 0x01;
 8002d32:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 8002d36:	f083 0301 	eor.w	r3, r3, #1
 8002d3a:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
 8002d3e:	e7f3      	b.n	8002d28 <VL53L1_update_ll_driver_rd_state+0x6e>
			pstate->rd_device_state =
 8002d40:	2303      	movs	r3, #3
 8002d42:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
			pstate->rd_stream_count = 0;
 8002d46:	2300      	movs	r3, #0
 8002d48:	e7bf      	b.n	8002cca <VL53L1_update_ll_driver_rd_state+0x10>

08002d4a <VL53L1_check_ll_driver_rd_state>:
	device_gph_id = (psys_results->result__interrupt_status &
			 VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 8002d4a:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
 8002d4e:	f013 0320 	ands.w	r3, r3, #32
{
 8002d52:	4602      	mov	r2, r0
	if ((pdev->sys_ctrl.system__mode_start &
 8002d54:	d023      	beq.n	8002d9e <VL53L1_check_ll_driver_rd_state+0x54>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 8002d56:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
		psys_results->result__range_status &
 8002d5a:	f890 31cf 	ldrb.w	r3, [r0, #463]	; 0x1cf
		if (pstate->rd_device_state ==
 8002d5e:	2906      	cmp	r1, #6
 8002d60:	d107      	bne.n	8002d72 <VL53L1_check_ll_driver_rd_state+0x28>
		    VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {
			if (device_range_status !=
 8002d62:	f003 031f 	and.w	r3, r3, #31
 8002d66:	2b12      	cmp	r3, #18
			    VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 8002d68:	bf0c      	ite	eq
 8002d6a:	2000      	moveq	r0, #0
 8002d6c:	f06f 0010 	mvnne.w	r0, #16
 8002d70:	4770      	bx	lr
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 8002d72:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8002d76:	f890 11d1 	ldrb.w	r1, [r0, #465]	; 0x1d1
 8002d7a:	4299      	cmp	r1, r3
			 VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8002d7c:	f892 31ce 	ldrb.w	r3, [r2, #462]	; 0x1ce

			/*
			 * Check Read state GPH ID
			 */

			if (pstate->rd_gph_id != device_gph_id) {
 8002d80:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
			 VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8002d84:	ea4f 1323 	mov.w	r3, r3, asr #4
			if (pstate->rd_gph_id != device_gph_id) {
 8002d88:	f003 0302 	and.w	r3, r3, #2
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 8002d8c:	bf14      	ite	ne
 8002d8e:	f06f 0011 	mvnne.w	r0, #17
 8002d92:	2000      	moveq	r0, #0
			if (pstate->rd_gph_id != device_gph_id) {
 8002d94:	429a      	cmp	r2, r3
				status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 8002d96:	bf18      	it	ne
 8002d98:	f06f 0012 	mvnne.w	r0, #18
 8002d9c:	4770      	bx	lr
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8002d9e:	4618      	mov	r0, r3
	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
}
 8002da0:	4770      	bx	lr

08002da2 <VL53L1_update_ll_driver_cfg_state>:
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 8002da2:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
 8002da6:	f013 03f0 	ands.w	r3, r3, #240	; 0xf0
 8002daa:	d108      	bne.n	8002dbe <VL53L1_update_ll_driver_cfg_state+0x1c>
	     VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {
		pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 8002dac:	2203      	movs	r2, #3
 8002dae:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->cfg_stream_count = 0;
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8002db2:	2202      	movs	r2, #2
			pstate->cfg_stream_count = 0;
 8002db4:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8002db8:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 8002dbc:	e02a      	b.n	8002e14 <VL53L1_update_ll_driver_cfg_state+0x72>
		if (pstate->cfg_stream_count == 0xFF) {
 8002dbe:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8002dc2:	2bff      	cmp	r3, #255	; 0xff
			pstate->cfg_stream_count = 0x80;
 8002dc4:	bf0c      	ite	eq
 8002dc6:	2380      	moveq	r3, #128	; 0x80
			pstate->cfg_stream_count++;
 8002dc8:	3301      	addne	r3, #1
 8002dca:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8002dce:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 8002dd2:	f083 0302 	eor.w	r3, r3, #2
 8002dd6:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
		switch (pstate->cfg_device_state) {
 8002dda:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8002dde:	2b03      	cmp	r3, #3
 8002de0:	d006      	beq.n	8002df0 <VL53L1_update_ll_driver_cfg_state+0x4e>
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	d012      	beq.n	8002e0c <VL53L1_update_ll_driver_cfg_state+0x6a>
			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 8002de6:	2303      	movs	r3, #3
 8002de8:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
			pstate->cfg_stream_count = 0;
 8002dec:	2300      	movs	r3, #0
 8002dee:	e7e0      	b.n	8002db2 <VL53L1_update_ll_driver_cfg_state+0x10>
			pstate->cfg_timing_status ^= 0x01;
 8002df0:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8002df4:	f083 0301 	eor.w	r3, r3, #1
 8002df8:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
			pstate->cfg_stream_count = 1;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 8002e02:	2304      	movs	r3, #4
 8002e04:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
#endif

	LOG_FUNCTION_END(status);

	return status;
}
 8002e08:	2000      	movs	r0, #0
 8002e0a:	4770      	bx	lr
			pstate->cfg_timing_status ^= 0x01;
 8002e0c:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8002e10:	f083 0301 	eor.w	r3, r3, #1
			pstate->cfg_timing_status = 0;
 8002e14:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
			break;
 8002e18:	e7f6      	b.n	8002e08 <VL53L1_update_ll_driver_cfg_state+0x66>

08002e1a <VL53L1_copy_rtn_good_spads_to_buffer>:
{
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer + 0) = pdata->global_config__spad_enables_rtn_0;
 8002e1a:	7c03      	ldrb	r3, [r0, #16]
 8002e1c:	700b      	strb	r3, [r1, #0]
	*(pbuffer + 1) = pdata->global_config__spad_enables_rtn_1;
 8002e1e:	7c43      	ldrb	r3, [r0, #17]
 8002e20:	704b      	strb	r3, [r1, #1]
	*(pbuffer + 2) = pdata->global_config__spad_enables_rtn_2;
 8002e22:	7c83      	ldrb	r3, [r0, #18]
 8002e24:	708b      	strb	r3, [r1, #2]
	*(pbuffer + 3) = pdata->global_config__spad_enables_rtn_3;
 8002e26:	7cc3      	ldrb	r3, [r0, #19]
 8002e28:	70cb      	strb	r3, [r1, #3]
	*(pbuffer + 4) = pdata->global_config__spad_enables_rtn_4;
 8002e2a:	7d03      	ldrb	r3, [r0, #20]
 8002e2c:	710b      	strb	r3, [r1, #4]
	*(pbuffer + 5) = pdata->global_config__spad_enables_rtn_5;
 8002e2e:	7d43      	ldrb	r3, [r0, #21]
 8002e30:	714b      	strb	r3, [r1, #5]
	*(pbuffer + 6) = pdata->global_config__spad_enables_rtn_6;
 8002e32:	7d83      	ldrb	r3, [r0, #22]
 8002e34:	718b      	strb	r3, [r1, #6]
	*(pbuffer + 7) = pdata->global_config__spad_enables_rtn_7;
 8002e36:	7dc3      	ldrb	r3, [r0, #23]
 8002e38:	71cb      	strb	r3, [r1, #7]
	*(pbuffer + 8) = pdata->global_config__spad_enables_rtn_8;
 8002e3a:	7e03      	ldrb	r3, [r0, #24]
 8002e3c:	720b      	strb	r3, [r1, #8]
	*(pbuffer + 9) = pdata->global_config__spad_enables_rtn_9;
 8002e3e:	7e43      	ldrb	r3, [r0, #25]
 8002e40:	724b      	strb	r3, [r1, #9]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 8002e42:	7e83      	ldrb	r3, [r0, #26]
 8002e44:	728b      	strb	r3, [r1, #10]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 8002e46:	7ec3      	ldrb	r3, [r0, #27]
 8002e48:	72cb      	strb	r3, [r1, #11]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 8002e4a:	7f03      	ldrb	r3, [r0, #28]
 8002e4c:	730b      	strb	r3, [r1, #12]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 8002e4e:	7f43      	ldrb	r3, [r0, #29]
 8002e50:	734b      	strb	r3, [r1, #13]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 8002e52:	7f83      	ldrb	r3, [r0, #30]
 8002e54:	738b      	strb	r3, [r1, #14]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 8002e56:	7fc3      	ldrb	r3, [r0, #31]
 8002e58:	73cb      	strb	r3, [r1, #15]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 8002e5a:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002e5e:	740b      	strb	r3, [r1, #16]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 8002e60:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8002e64:	744b      	strb	r3, [r1, #17]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 8002e66:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8002e6a:	748b      	strb	r3, [r1, #18]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 8002e6c:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8002e70:	74cb      	strb	r3, [r1, #19]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 8002e72:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8002e76:	750b      	strb	r3, [r1, #20]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 8002e78:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8002e7c:	754b      	strb	r3, [r1, #21]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 8002e7e:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 8002e82:	758b      	strb	r3, [r1, #22]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 8002e84:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 8002e88:	75cb      	strb	r3, [r1, #23]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 8002e8a:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8002e8e:	760b      	strb	r3, [r1, #24]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 8002e90:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8002e94:	764b      	strb	r3, [r1, #25]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 8002e96:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8002e9a:	768b      	strb	r3, [r1, #26]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 8002e9c:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8002ea0:	76cb      	strb	r3, [r1, #27]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 8002ea2:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8002ea6:	770b      	strb	r3, [r1, #28]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 8002ea8:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8002eac:	774b      	strb	r3, [r1, #29]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 8002eae:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 8002eb2:	778b      	strb	r3, [r1, #30]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 8002eb4:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8002eb8:	77cb      	strb	r3, [r1, #31]
 8002eba:	4770      	bx	lr

08002ebc <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t ip_value,
	uint16_t count,
	uint8_t    *pbuffer)
{
 8002ebc:	4411      	add	r1, r2
	uint16_t i = 0;
	uint16_t data = 0;

	data = ip_value;

	for (i = 0; i < count; i++) {
 8002ebe:	4291      	cmp	r1, r2
 8002ec0:	d100      	bne.n	8002ec4 <VL53L1_i2c_encode_uint16_t+0x8>
		pbuffer[count - i - 1] = (uint8_t)(data & 0x00FF);
		data = data >> 8;
	}
}
 8002ec2:	4770      	bx	lr
		pbuffer[count - i - 1] = (uint8_t)(data & 0x00FF);
 8002ec4:	f801 0d01 	strb.w	r0, [r1, #-1]!
		data = data >> 8;
 8002ec8:	0a00      	lsrs	r0, r0, #8
 8002eca:	e7f8      	b.n	8002ebe <VL53L1_i2c_encode_uint16_t+0x2>

08002ecc <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t count,
	uint8_t    *pbuffer)
{
 8002ecc:	180b      	adds	r3, r1, r0
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t value = 0x00;
 8002ece:	2000      	movs	r0, #0

	while (count-- > 0) {
 8002ed0:	4299      	cmp	r1, r3
 8002ed2:	d100      	bne.n	8002ed6 <VL53L1_i2c_decode_uint16_t+0xa>
		value = (value << 8) | (uint16_t)*pbuffer++;
	}

	return value;
}
 8002ed4:	4770      	bx	lr
		value = (value << 8) | (uint16_t)*pbuffer++;
 8002ed6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002eda:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8002ede:	b280      	uxth	r0, r0
 8002ee0:	e7f6      	b.n	8002ed0 <VL53L1_i2c_decode_uint16_t+0x4>

08002ee2 <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t ip_value,
	uint16_t count,
	uint8_t    *pbuffer)
{
 8002ee2:	4411      	add	r1, r2
	uint16_t i = 0;
	int16_t data = 0;

	data = ip_value;

	for (i = 0; i < count; i++) {
 8002ee4:	4291      	cmp	r1, r2
 8002ee6:	d100      	bne.n	8002eea <VL53L1_i2c_encode_int16_t+0x8>
		pbuffer[count - i - 1] = (uint8_t)(data & 0x00FF);
		data = data >> 8;
	}
}
 8002ee8:	4770      	bx	lr
		pbuffer[count - i - 1] = (uint8_t)(data & 0x00FF);
 8002eea:	f801 0d01 	strb.w	r0, [r1, #-1]!
		data = data >> 8;
 8002eee:	1200      	asrs	r0, r0, #8
 8002ef0:	e7f8      	b.n	8002ee4 <VL53L1_i2c_encode_int16_t+0x2>

08002ef2 <VL53L1_i2c_decode_int16_t>:
	 */

	int16_t value = 0x00;

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 8002ef2:	f991 3000 	ldrsb.w	r3, [r1]
 8002ef6:	4408      	add	r0, r1
 8002ef8:	17db      	asrs	r3, r3, #31
		value = 0xFFFF;
	}

	while (count-- > 0) {
 8002efa:	4281      	cmp	r1, r0
 8002efc:	d101      	bne.n	8002f02 <VL53L1_i2c_decode_int16_t+0x10>
		value = (value << 8) | (int16_t)*pbuffer++;
	}

	return value;
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	4770      	bx	lr
		value = (value << 8) | (int16_t)*pbuffer++;
 8002f02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f06:	b25b      	sxtb	r3, r3
 8002f08:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002f0c:	e7f5      	b.n	8002efa <VL53L1_i2c_decode_int16_t+0x8>

08002f0e <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t ip_value,
	uint16_t count,
	uint8_t    *pbuffer)
{
 8002f0e:	4411      	add	r1, r2
	uint16_t i = 0;
	uint32_t data = 0;

	data = ip_value;

	for (i = 0; i < count; i++) {
 8002f10:	4291      	cmp	r1, r2
 8002f12:	d100      	bne.n	8002f16 <VL53L1_i2c_encode_uint32_t+0x8>
		pbuffer[count - i - 1] = (uint8_t)(data & 0x00FF);
		data = data >> 8;
	}
}
 8002f14:	4770      	bx	lr
		pbuffer[count - i - 1] = (uint8_t)(data & 0x00FF);
 8002f16:	f801 0d01 	strb.w	r0, [r1, #-1]!
		data = data >> 8;
 8002f1a:	0a00      	lsrs	r0, r0, #8
 8002f1c:	e7f8      	b.n	8002f10 <VL53L1_i2c_encode_uint32_t+0x2>

08002f1e <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t count,
	uint8_t    *pbuffer)
{
 8002f1e:	180b      	adds	r3, r1, r0
	/*
	 * Decodes a uint32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint32_t value = 0x00;
 8002f20:	2000      	movs	r0, #0

	while (count-- > 0) {
 8002f22:	4299      	cmp	r1, r3
 8002f24:	d100      	bne.n	8002f28 <VL53L1_i2c_decode_uint32_t+0xa>
		value = (value << 8) | (uint32_t)*pbuffer++;
	}

	return value;
}
 8002f26:	4770      	bx	lr
		value = (value << 8) | (uint32_t)*pbuffer++;
 8002f28:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f2c:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8002f30:	e7f7      	b.n	8002f22 <VL53L1_i2c_decode_uint32_t+0x4>

08002f32 <VL53L1_i2c_decode_int32_t>:
	 */

	int32_t value = 0x00;

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 8002f32:	f991 3000 	ldrsb.w	r3, [r1]
 8002f36:	4408      	add	r0, r1
 8002f38:	17db      	asrs	r3, r3, #31
		value = 0xFFFFFFFF;
	}

	while (count-- > 0) {
 8002f3a:	4281      	cmp	r1, r0
 8002f3c:	d101      	bne.n	8002f42 <VL53L1_i2c_decode_int32_t+0x10>
		value = (value << 8) | (int32_t)*pbuffer++;
	}

	return value;
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	4770      	bx	lr
		value = (value << 8) | (int32_t)*pbuffer++;
 8002f42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f46:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002f4a:	e7f6      	b.n	8002f3a <VL53L1_i2c_decode_int32_t+0x8>

08002f4c <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t fast_osc_frequency,
	uint8_t vcsel_period)
{
 8002f4c:	b538      	push	{r3, r4, r5, lr}
 8002f4e:	460d      	mov	r5, r1

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 8002f50:	f000 f938 	bl	80031c4 <VL53L1_calc_pll_period_us>
 8002f54:	4604      	mov	r4, r0

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 8002f56:	4628      	mov	r0, r5
 8002f58:	f000 f939 	bl	80031ce <VL53L1_decode_vcsel_period>
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 8002f5c:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8002f60:	4363      	muls	r3, r4
		(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
		pll_period_us;
	macro_period_us = macro_period_us >> 6;
 8002f62:	099b      	lsrs	r3, r3, #6

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 8002f64:	4358      	muls	r0, r3
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
}
 8002f66:	0980      	lsrs	r0, r0, #6
 8002f68:	bd38      	pop	{r3, r4, r5, pc}

08002f6a <VL53L1_calc_range_ignore_threshold>:

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);

	if (x_gradient < 0) {
 8002f6a:	2900      	cmp	r1, #0
		x_gradient_int = x_gradient * -1;
 8002f6c:	bfba      	itte	lt
 8002f6e:	4249      	neglt	r1, r1
 8002f70:	b289      	uxthlt	r1, r1
 8002f72:	2100      	movge	r1, #0
	}

	if (y_gradient < 0) {
 8002f74:	2a00      	cmp	r2, #0
		y_gradient_int = y_gradient * -1;
 8002f76:	bfba      	itte	lt
 8002f78:	4252      	neglt	r2, r2
 8002f7a:	b292      	uxthlt	r2, r2
 8002f7c:	2200      	movge	r2, #0
 8002f7e:	b209      	sxth	r1, r1

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 8002f80:	fa01 f282 	sxtah	r2, r1, r2
{
 8002f84:	b510      	push	{r4, lr}

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 8002f86:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 8002f8a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8002f8e:	0100      	lsls	r0, r0, #4
	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 8002f90:	0152      	lsls	r2, r2, #5
	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 8002f92:	fb90 f0f4 	sdiv	r0, r0, r4
	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 8002f96:	fb92 f2f1 	sdiv	r2, r2, r1

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 8002f9a:	4410      	add	r0, r2

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 8002f9c:	4358      	muls	r0, r3

	range_ignore_thresh_int = (range_ignore_thresh_int + (1 << 4)) / (1 << 5);
 8002f9e:	3010      	adds	r0, #16
 8002fa0:	2320      	movs	r3, #32
 8002fa2:	fb90 f0f3 	sdiv	r0, r0, r3
		    range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 8002fa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002faa:	4298      	cmp	r0, r3
 8002fac:	bfa8      	it	ge
 8002fae:	4618      	movge	r0, r3
}
 8002fb0:	b280      	uxth	r0, r0
 8002fb2:	bd10      	pop	{r4, pc}

08002fb4 <VL53L1_calc_timeout_us>:
	uint64_t tmp = 0;

	LOG_FUNCTION_START("");

	tmp = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
	tmp += 0x00800;
 8002fb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fb8:	2300      	movs	r3, #0
 8002fba:	fbe1 2300 	umlal	r2, r3, r1, r0
	tmp = tmp >> 12;
 8002fbe:	0b10      	lsrs	r0, r2, #12
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
}
 8002fc0:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 8002fc4:	4770      	bx	lr

08002fc6 <VL53L1_encode_timeout>:

	uint16_t encoded_timeout = 0;
	uint32_t ls_byte = 0;
	uint16_t ms_byte = 0;

	if (timeout_mclks > 0) {
 8002fc6:	b150      	cbz	r0, 8002fde <VL53L1_encode_timeout+0x18>
		ls_byte = timeout_mclks - 1;
 8002fc8:	3801      	subs	r0, #1
 8002fca:	2300      	movs	r3, #0

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8002fcc:	f030 01ff 	bics.w	r1, r0, #255	; 0xff
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	f103 0301 	add.w	r3, r3, #1
 8002fd6:	d103      	bne.n	8002fe0 <VL53L1_encode_timeout+0x1a>
			ls_byte = ls_byte >> 1;
			ms_byte++;
		}

		encoded_timeout = (ms_byte << 8)
 8002fd8:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 8002fdc:	b280      	uxth	r0, r0
				  + (uint16_t)(ls_byte & 0x000000FF);
	}

	return encoded_timeout;
}
 8002fde:	4770      	bx	lr
			ls_byte = ls_byte >> 1;
 8002fe0:	0840      	lsrs	r0, r0, #1
 8002fe2:	e7f3      	b.n	8002fcc <VL53L1_encode_timeout+0x6>

08002fe4 <VL53L1_calc_encoded_timeout>:
		((timeout_us << 12) + (macro_period_us >> 1)) /
 8002fe4:	0300      	lsls	r0, r0, #12
 8002fe6:	eb00 0051 	add.w	r0, r0, r1, lsr #1
	timeout_encoded =
 8002fea:	fbb0 f0f1 	udiv	r0, r0, r1
 8002fee:	f7ff bfea 	b.w	8002fc6 <VL53L1_encode_timeout>

08002ff2 <VL53L1_decode_timeout>:
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;

	timeout_macro_clks = ((uint32_t)(encoded_timeout & 0x00FF)
 8002ff2:	b2c3      	uxtb	r3, r0
			      << (uint32_t)((encoded_timeout & 0xFF00) >> 8)) + 1;
 8002ff4:	0a00      	lsrs	r0, r0, #8
 8002ff6:	fa03 f000 	lsl.w	r0, r3, r0

	return timeout_macro_clks;
}
 8002ffa:	3001      	adds	r0, #1
 8002ffc:	4770      	bx	lr

08002ffe <VL53L1_calc_decoded_timeout_us>:
{
 8002ffe:	b508      	push	{r3, lr}
	timeout_mclks =
 8003000:	f7ff fff7 	bl	8002ff2 <VL53L1_decode_timeout>
	tmp += 0x00800;
 8003004:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003008:	2300      	movs	r3, #0
 800300a:	fbe0 2301 	umlal	r2, r3, r0, r1
	tmp = tmp >> 12;
 800300e:	0b10      	lsrs	r0, r2, #12
}
 8003010:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 8003014:	bd08      	pop	{r3, pc}

08003016 <VL53L1_calc_timeout_register_values>:
	uint32_t mm_config_timeout_us,
	uint32_t range_config_timeout_us,
	uint16_t fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 8003016:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800301a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800301c:	4605      	mov	r5, r0
 800301e:	4688      	mov	r8, r1
 8003020:	4617      	mov	r7, r2
	uint32_t timeout_mclks = 0;
	uint16_t timeout_encoded = 0;

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 8003022:	4699      	mov	r9, r3
 8003024:	b393      	cbz	r3, 800308c <VL53L1_calc_timeout_register_values+0x76>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
 8003026:	79a1      	ldrb	r1, [r4, #6]
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff ff8f 	bl	8002f4c <VL53L1_calc_macro_period_us>
 800302e:	4606      	mov	r6, r0
		((timeout_us << 12) + (macro_period_us >> 1)) /
 8003030:	0328      	lsls	r0, r5, #12
		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
			timeout_mclks = 0xFF;

		pgeneral->phasecal_config__timeout_macrop =
			(uint8_t)timeout_mclks;
 8003032:	9b08      	ldr	r3, [sp, #32]
		((timeout_us << 12) + (macro_period_us >> 1)) /
 8003034:	eb00 0056 	add.w	r0, r0, r6, lsr #1
	timeout_mclks =
 8003038:	fbb0 f0f6 	udiv	r0, r0, r6
			(uint8_t)timeout_mclks;
 800303c:	28ff      	cmp	r0, #255	; 0xff
 800303e:	bf28      	it	cs
 8003040:	20ff      	movcs	r0, #255	; 0xff
 8003042:	71d8      	strb	r0, [r3, #7]

		/*  Update MM Timing A timeout */
		timeout_encoded =
 8003044:	4631      	mov	r1, r6
 8003046:	4640      	mov	r0, r8
 8003048:	f7ff ffcc 	bl	8002fe4 <VL53L1_calc_encoded_timeout>
			VL53L1_calc_encoded_timeout(
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
			(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800304c:	0a03      	lsrs	r3, r0, #8
 800304e:	7023      	strb	r3, [r4, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
			(uint8_t)(timeout_encoded & 0x00FF);
 8003050:	7060      	strb	r0, [r4, #1]

		/* Update Range Timing A timeout */
		timeout_encoded =
 8003052:	4631      	mov	r1, r6
 8003054:	4638      	mov	r0, r7
 8003056:	f7ff ffc5 	bl	8002fe4 <VL53L1_calc_encoded_timeout>
			VL53L1_calc_encoded_timeout(
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
			(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800305a:	0a03      	lsrs	r3, r0, #8
 800305c:	7123      	strb	r3, [r4, #4]
		ptiming->range_config__timeout_macrop_a_lo =
			(uint8_t)(timeout_encoded & 0x00FF);
 800305e:	7160      	strb	r0, [r4, #5]

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
 8003060:	7a61      	ldrb	r1, [r4, #9]
 8003062:	4648      	mov	r0, r9
 8003064:	f7ff ff72 	bl	8002f4c <VL53L1_calc_macro_period_us>
 8003068:	4605      	mov	r5, r0
			VL53L1_calc_macro_period_us(
				fast_osc_frequency,
				ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
 800306a:	4601      	mov	r1, r0
 800306c:	4640      	mov	r0, r8
 800306e:	f7ff ffb9 	bl	8002fe4 <VL53L1_calc_encoded_timeout>
			VL53L1_calc_encoded_timeout(
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
			(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8003072:	0a03      	lsrs	r3, r0, #8
 8003074:	70a3      	strb	r3, [r4, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
			(uint8_t)(timeout_encoded & 0x00FF);
 8003076:	70e0      	strb	r0, [r4, #3]

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 8003078:	4629      	mov	r1, r5
 800307a:	4638      	mov	r0, r7
 800307c:	f7ff ffb2 	bl	8002fe4 <VL53L1_calc_encoded_timeout>
			range_config_timeout_us,
			macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
			(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8003080:	0a03      	lsrs	r3, r0, #8
		ptiming->range_config__timeout_macrop_b_lo =
			(uint8_t)(timeout_encoded & 0x00FF);
 8003082:	7220      	strb	r0, [r4, #8]
			(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8003084:	71e3      	strb	r3, [r4, #7]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8003086:	2000      	movs	r0, #0
 8003088:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800308c:	f06f 000e 	mvn.w	r0, #14
	}

	LOG_FUNCTION_END(0);

	return status;
}
 8003090:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003094 <VL53L1_encode_row_col>:
{
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 8003094:	2807      	cmp	r0, #7
		*pspad_number = 128 + (col << 3) + (15 - row);
 8003096:	bf8b      	itete	hi
 8003098:	ebc0 00c1 	rsbhi	r0, r0, r1, lsl #3
	} else {
		*pspad_number = ((15 - col) << 3) + row;
 800309c:	f1c1 010f 	rsbls	r1, r1, #15
		*pspad_number = 128 + (col << 3) + (15 - row);
 80030a0:	3871      	subhi	r0, #113	; 0x71
		*pspad_number = ((15 - col) << 3) + row;
 80030a2:	eb00 00c1 	addls.w	r0, r0, r1, lsl #3
 80030a6:	7010      	strb	r0, [r2, #0]
 80030a8:	4770      	bx	lr

080030aa <VL53L1_decode_zone_size>:
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 80030aa:	0903      	lsrs	r3, r0, #4
	*pwidth = encoded_xy_size & 0x0F;
 80030ac:	f000 000f 	and.w	r0, r0, #15
	*pheight = encoded_xy_size >> 4;
 80030b0:	7013      	strb	r3, [r2, #0]
	*pwidth = encoded_xy_size & 0x0F;
 80030b2:	7008      	strb	r0, [r1, #0]
 80030b4:	4770      	bx	lr

080030b6 <VL53L1_encode_zone_size>:
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 80030b6:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80030ba:	7011      	strb	r1, [r2, #0]
 80030bc:	4770      	bx	lr

080030be <VL53L1_low_power_auto_data_init>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 80030be:	2303      	movs	r3, #3
 80030c0:	f880 32e4 	strb.w	r3, [r0, #740]	; 0x2e4
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 80030c4:	2300      	movs	r3, #0
 80030c6:	f880 32e5 	strb.w	r3, [r0, #741]	; 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 80030ca:	f880 32e6 	strb.w	r3, [r0, #742]	; 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 80030ce:	f880 32e7 	strb.w	r3, [r0, #743]	; 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 80030d2:	f880 32e8 	strb.w	r3, [r0, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 80030d6:	f880 32e9 	strb.w	r3, [r0, #745]	; 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 80030da:	f880 32ea 	strb.w	r3, [r0, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 80030de:	f8c0 32ec 	str.w	r3, [r0, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 80030e2:	f8a0 32f0 	strh.w	r3, [r0, #752]	; 0x2f0

	LOG_FUNCTION_END(status);

	return status;
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	4770      	bx	lr

080030ea <VL53L1_low_power_auto_data_stop_range>:
	LOG_FUNCTION_START("");

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 80030ea:	22ff      	movs	r2, #255	; 0xff
 80030ec:	f880 22e6 	strb.w	r2, [r0, #742]	; 0x2e6

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 80030f0:	2200      	movs	r2, #0
 80030f2:	f880 22ea 	strb.w	r2, [r0, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 80030f6:	f8c0 22ec 	str.w	r2, [r0, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 80030fa:	f8a0 22f0 	strh.w	r2, [r0, #752]	; 0x2f0

	/* restore vhv configs */
	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 80030fe:	f890 22e8 	ldrb.w	r2, [r0, #744]	; 0x2e8
{
 8003102:	4603      	mov	r3, r0
	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 8003104:	b10a      	cbz	r2, 800310a <VL53L1_low_power_auto_data_stop_range+0x20>
		pdev->stat_nvm.vhv_config__init =
 8003106:	f880 2163 	strb.w	r2, [r0, #355]	; 0x163
			pdev->low_power_auto_data.saved_vhv_init;
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 800310a:	f893 22e9 	ldrb.w	r2, [r3, #745]	; 0x2e9
 800310e:	b10a      	cbz	r2, 8003114 <VL53L1_low_power_auto_data_stop_range+0x2a>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8003110:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
			pdev->low_power_auto_data.saved_vhv_timeout;

	/* remove phasecal override */
	pdev->gen_cfg.phasecal_config__override = 0x00;
 8003114:	2000      	movs	r0, #0
 8003116:	f883 018d 	strb.w	r0, [r3, #397]	; 0x18d

	LOG_FUNCTION_END(status);

	return status;
}
 800311a:	4770      	bx	lr

0800311c <VL53L1_config_low_power_auto_mode>:
	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 800311c:	2301      	movs	r3, #1
 800311e:	7053      	strb	r3, [r2, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 8003120:	2300      	movs	r3, #0
 8003122:	7093      	strb	r3, [r2, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 8003124:	228b      	movs	r2, #139	; 0x8b
 8003126:	744a      	strb	r2, [r1, #17]
		/* VL53L1_SEQUENCE_MM1_EN | \*/
		/* VL53L1_SEQUENCE_MM2_EN | \*/
		VL53L1_SEQUENCE_RANGE_EN;

	/* Set DSS to manual/expected SPADs */
	pgeneral->dss_config__manual_effective_spads_select = 200 << 8;
 8003128:	f44f 4248 	mov.w	r2, #51200	; 0xc800
 800312c:	8202      	strh	r2, [r0, #16]
	pgeneral->dss_config__roi_mode_control =
 800312e:	2202      	movs	r2, #2
 8003130:	7282      	strb	r2, [r0, #10]
		VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

	LOG_FUNCTION_END(status);

	return status;
}
 8003132:	4618      	mov	r0, r3
 8003134:	4770      	bx	lr

08003136 <VL53L1_low_power_auto_setup_manual_calibration>:

	LOG_FUNCTION_START("");

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 8003136:	f890 2163 	ldrb.w	r2, [r0, #355]	; 0x163
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800313a:	f890 3160 	ldrb.w	r3, [r0, #352]	; 0x160
	pdev->low_power_auto_data.saved_vhv_init =
 800313e:	f880 22e8 	strb.w	r2, [r0, #744]	; 0x2e8

	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 8003142:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003146:	f880 2163 	strb.w	r2, [r0, #355]	; 0x163
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800314a:	f890 22e4 	ldrb.w	r2, [r0, #740]	; 0x2e4
	pdev->low_power_auto_data.saved_vhv_timeout =
 800314e:	f880 32e9 	strb.w	r3, [r0, #745]	; 0x2e9
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800315a:	f880 3160 	strb.w	r3, [r0, #352]	; 0x160
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
 800315e:	2301      	movs	r3, #1
 8003160:	f880 318d 	strb.w	r3, [r0, #397]	; 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 8003164:	f890 32ae 	ldrb.w	r3, [r0, #686]	; 0x2ae
	pdev->low_power_auto_data.first_run_phasecal_result =
 8003168:	f880 32ea 	strb.w	r3, [r0, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 800316c:	f880 3187 	strb.w	r3, [r0, #391]	; 0x187
		pdev->low_power_auto_data.first_run_phasecal_result;

	LOG_FUNCTION_END(status);

	return status;
}
 8003170:	2000      	movs	r0, #0
 8003172:	4770      	bx	lr

08003174 <VL53L1_low_power_auto_update_DSS>:
	/* shift up to take advantage of 32 bits */
	/* 9.23 format */
	utemp32a = utemp32a << 16;

	/* check SPAD count */
	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 8003174:	f8b0 31d2 	ldrh.w	r3, [r0, #466]	; 0x1d2
 8003178:	b30b      	cbz	r3, 80031be <VL53L1_low_power_auto_update_DSS+0x4a>
		   pdev->sys_results.result__ambient_count_rate_mcps_sd0;
 800317a:	f8b0 11d6 	ldrh.w	r1, [r0, #470]	; 0x1d6
	utemp32a = pdev->sys_results.result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
 800317e:	f8b0 21de 	ldrh.w	r2, [r0, #478]	; 0x1de
 8003182:	440a      	add	r2, r1
 8003184:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003188:	428a      	cmp	r2, r1
 800318a:	bfa8      	it	ge
 800318c:	460a      	movge	r2, r1
	utemp32a = utemp32a << 16;
 800318e:	0412      	lsls	r2, r2, #16
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
	else {
		/* format 17.15 */
		utemp32a = utemp32a /
 8003190:	fbb2 f3f3 	udiv	r3, r2, r3
			   pdev->sys_results.result__dss_actual_effective_spads_sd0;
		/* save intermediate result */
		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 8003194:	f8c0 32ec 	str.w	r3, [r0, #748]	; 0x2ec
		 * format 9.23 */
		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
			   16;

		/* check for divide by zero */
		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps == 0)
 8003198:	b18b      	cbz	r3, 80031be <VL53L1_low_power_auto_update_DSS+0x4a>
		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 800319a:	f8b0 2164 	ldrh.w	r2, [r0, #356]	; 0x164
 800319e:	0412      	lsls	r2, r2, #16
			status = VL53L1_ERROR_DIVISION_BY_ZERO;
		else {
			/* divide by rate per spad
			 * format 24.8 */
			utemp32a = utemp32a /
 80031a0:	fbb2 f3f3 	udiv	r3, r2, r3
			if (utemp32a > 0xFFFF)
				utemp32a = 0xFFFF;

			/* save result in low power auto data */
			pdev->low_power_auto_data.dss__required_spads =
				(uint16_t)utemp32a;
 80031a4:	428b      	cmp	r3, r1
 80031a6:	bf28      	it	cs
 80031a8:	460b      	movcs	r3, r1
 80031aa:	b29b      	uxth	r3, r3
	if (status == VL53L1_ERROR_DIVISION_BY_ZERO) {
		/* We want to gracefully set a spad target, not just exit with
		 * an error */

		/* set target to mid point */
		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 80031ac:	f8a0 32f0 	strh.w	r3, [r0, #752]	; 0x2f0

		/* override DSS config */
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 80031b0:	f8a0 3194 	strh.w	r3, [r0, #404]	; 0x194
			pdev->low_power_auto_data.dss__required_spads;
		pdev->gen_cfg.dss_config__roi_mode_control =
 80031b4:	2302      	movs	r3, #2
 80031b6:	f880 318e 	strb.w	r3, [r0, #398]	; 0x18e
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80031ba:	2000      	movs	r0, #0
 80031bc:	4770      	bx	lr
		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 80031be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031c2:	e7f3      	b.n	80031ac <VL53L1_low_power_auto_update_DSS+0x38>

080031c4 <VL53L1_calc_pll_period_us>:
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
}
 80031c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80031c8:	fb93 f0f0 	sdiv	r0, r3, r0
 80031cc:	4770      	bx	lr

080031ce <VL53L1_decode_vcsel_period>:
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 80031ce:	3001      	adds	r0, #1
 80031d0:	0040      	lsls	r0, r0, #1

	return vcsel_period_pclks;
}
 80031d2:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 80031d6:	4770      	bx	lr

080031d8 <VL53L1_decode_row_col>:
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 80031d8:	0603      	lsls	r3, r0, #24
		*prow = 8 + ((255 - spad_number) & 0x07);
 80031da:	bf49      	itett	mi
 80031dc:	43c3      	mvnmi	r3, r0
		*pcol = (spad_number - 128) >> 3;
	} else {
		*prow = spad_number & 0x07;
 80031de:	f000 0307 	andpl.w	r3, r0, #7
		*prow = 8 + ((255 - spad_number) & 0x07);
 80031e2:	f003 0307 	andmi.w	r3, r3, #7
		*pcol = (spad_number - 128) >> 3;
 80031e6:	3880      	submi	r0, #128	; 0x80
		*pcol = (127 - spad_number) >> 3;
 80031e8:	bf54      	ite	pl
 80031ea:	f1c0 007f 	rsbpl	r0, r0, #127	; 0x7f
		*prow = 8 + ((255 - spad_number) & 0x07);
 80031ee:	3308      	addmi	r3, #8
		*pcol = (127 - spad_number) >> 3;
 80031f0:	ea4f 00e0 	mov.w	r0, r0, asr #3
		*prow = 8 + ((255 - spad_number) & 0x07);
 80031f4:	bf4c      	ite	mi
 80031f6:	700b      	strbmi	r3, [r1, #0]
		*prow = spad_number & 0x07;
 80031f8:	700b      	strbpl	r3, [r1, #0]
		*pcol = (127 - spad_number) >> 3;
 80031fa:	7010      	strb	r0, [r2, #0]
 80031fc:	4770      	bx	lr

080031fe <VL53L1_i2c_encode_static_nvm_managed>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 80031fe:	290a      	cmp	r1, #10
{
 8003200:	b538      	push	{r3, r4, r5, lr}
 8003202:	4605      	mov	r5, r0
 8003204:	4614      	mov	r4, r2
	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8003206:	d924      	bls.n	8003252 <VL53L1_i2c_encode_static_nvm_managed+0x54>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer + 0) =
		pdata->i2c_slave__device_address & 0x7F;
 8003208:	7803      	ldrb	r3, [r0, #0]
 800320a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer + 0) =
 800320e:	7013      	strb	r3, [r2, #0]
	*(pbuffer + 1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8003210:	7843      	ldrb	r3, [r0, #1]
 8003212:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer + 1) =
 8003216:	7053      	strb	r3, [r2, #1]
	*(pbuffer + 2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8003218:	7883      	ldrb	r3, [r0, #2]
 800321a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer + 2) =
 800321e:	7093      	strb	r3, [r2, #2]
	*(pbuffer + 3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8003220:	78c3      	ldrb	r3, [r0, #3]
 8003222:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer + 3) =
 8003226:	70d3      	strb	r3, [r2, #3]
	*(pbuffer + 4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 8003228:	7903      	ldrb	r3, [r0, #4]
 800322a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer + 4) =
 800322e:	7113      	strb	r3, [r2, #4]
	VL53L1_i2c_encode_uint16_t(
 8003230:	2102      	movs	r1, #2
 8003232:	3205      	adds	r2, #5
 8003234:	88c0      	ldrh	r0, [r0, #6]
 8003236:	f7ff fe41 	bl	8002ebc <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer + 5);
	*(pbuffer + 7) =
		pdata->vhv_config__timeout_macrop_loop_bound;
 800323a:	7a2b      	ldrb	r3, [r5, #8]
	*(pbuffer + 7) =
 800323c:	71e3      	strb	r3, [r4, #7]
	*(pbuffer + 8) =
		pdata->vhv_config__count_thresh;
 800323e:	7a6b      	ldrb	r3, [r5, #9]
	*(pbuffer + 8) =
 8003240:	7223      	strb	r3, [r4, #8]
	*(pbuffer + 9) =
		pdata->vhv_config__offset & 0x3F;
 8003242:	7aab      	ldrb	r3, [r5, #10]
 8003244:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer + 9) =
 8003248:	7263      	strb	r3, [r4, #9]
	*(pbuffer + 10) =
		pdata->vhv_config__init;
 800324a:	7aeb      	ldrb	r3, [r5, #11]
	*(pbuffer + 10) =
 800324c:	72a3      	strb	r3, [r4, #10]
	LOG_FUNCTION_END(status);


	return status;
 800324e:	2000      	movs	r0, #0
 8003250:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8003252:	f06f 0009 	mvn.w	r0, #9
}
 8003256:	bd38      	pop	{r3, r4, r5, pc}

08003258 <VL53L1_i2c_decode_static_nvm_managed>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8003258:	280a      	cmp	r0, #10
{
 800325a:	b538      	push	{r3, r4, r5, lr}
 800325c:	460d      	mov	r5, r1
 800325e:	4614      	mov	r4, r2
	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8003260:	d924      	bls.n	80032ac <VL53L1_i2c_decode_static_nvm_managed+0x54>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->i2c_slave__device_address =
		(*(pbuffer + 0)) & 0x7F;
 8003262:	780b      	ldrb	r3, [r1, #0]
 8003264:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->i2c_slave__device_address =
 8003268:	7013      	strb	r3, [r2, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer + 1)) & 0xF;
 800326a:	784b      	ldrb	r3, [r1, #1]
 800326c:	f003 030f 	and.w	r3, r3, #15
	pdata->ana_config__vhv_ref_sel_vddpix =
 8003270:	7053      	strb	r3, [r2, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer + 2)) & 0x7F;
 8003272:	788b      	ldrb	r3, [r1, #2]
 8003274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->ana_config__vhv_ref_sel_vquench =
 8003278:	7093      	strb	r3, [r2, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer + 3)) & 0x3;
 800327a:	78cb      	ldrb	r3, [r1, #3]
 800327c:	f003 0303 	and.w	r3, r3, #3
	pdata->ana_config__reg_avdd1v2_sel =
 8003280:	70d3      	strb	r3, [r2, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer + 4)) & 0x7F;
 8003282:	790b      	ldrb	r3, [r1, #4]
 8003284:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->ana_config__fast_osc__trim =
 8003288:	7113      	strb	r3, [r2, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 5));
 800328a:	3105      	adds	r1, #5
 800328c:	2002      	movs	r0, #2
 800328e:	f7ff fe1d 	bl	8002ecc <VL53L1_i2c_decode_uint16_t>
	pdata->osc_measured__fast_osc__frequency =
 8003292:	80e0      	strh	r0, [r4, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 8003294:	79eb      	ldrb	r3, [r5, #7]
 8003296:	7223      	strb	r3, [r4, #8]
		(*(pbuffer + 7));
	pdata->vhv_config__count_thresh =
 8003298:	7a2b      	ldrb	r3, [r5, #8]
 800329a:	7263      	strb	r3, [r4, #9]
		(*(pbuffer + 8));
	pdata->vhv_config__offset =
		(*(pbuffer + 9)) & 0x3F;
 800329c:	7a6b      	ldrb	r3, [r5, #9]
 800329e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->vhv_config__offset =
 80032a2:	72a3      	strb	r3, [r4, #10]
	pdata->vhv_config__init =
 80032a4:	7aab      	ldrb	r3, [r5, #10]
 80032a6:	72e3      	strb	r3, [r4, #11]
		(*(pbuffer + 10));

	LOG_FUNCTION_END(status);

	return status;
 80032a8:	2000      	movs	r0, #0
 80032aa:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80032ac:	f06f 0009 	mvn.w	r0, #9
}
 80032b0:	bd38      	pop	{r3, r4, r5, pc}

080032b2 <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 80032b2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80032b4:	460c      	mov	r4, r1
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status = VL53L1_ReadMulti(
 80032b6:	230b      	movs	r3, #11
 80032b8:	aa01      	add	r2, sp, #4
 80032ba:	2101      	movs	r1, #1
 80032bc:	f004 fed6 	bl	800806c <VL53L1_ReadMulti>
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 80032c0:	b920      	cbnz	r0, 80032cc <VL53L1_get_static_nvm_managed+0x1a>
		status = VL53L1_i2c_decode_static_nvm_managed(
 80032c2:	4622      	mov	r2, r4
 80032c4:	a901      	add	r1, sp, #4
 80032c6:	200b      	movs	r0, #11
 80032c8:	f7ff ffc6 	bl	8003258 <VL53L1_i2c_decode_static_nvm_managed>
			pdata);

	LOG_FUNCTION_END(status);

	return status;
}
 80032cc:	b004      	add	sp, #16
 80032ce:	bd10      	pop	{r4, pc}

080032d0 <VL53L1_i2c_encode_customer_nvm_managed>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 80032d0:	2916      	cmp	r1, #22
{
 80032d2:	b538      	push	{r3, r4, r5, lr}
 80032d4:	4604      	mov	r4, r0
 80032d6:	4615      	mov	r5, r2
	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 80032d8:	d948      	bls.n	800336c <VL53L1_i2c_encode_customer_nvm_managed+0x9c>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer + 0) =
		pdata->global_config__spad_enables_ref_0;
 80032da:	7803      	ldrb	r3, [r0, #0]
	*(pbuffer + 0) =
 80032dc:	7013      	strb	r3, [r2, #0]
	*(pbuffer + 1) =
		pdata->global_config__spad_enables_ref_1;
 80032de:	7843      	ldrb	r3, [r0, #1]
	*(pbuffer + 1) =
 80032e0:	7053      	strb	r3, [r2, #1]
	*(pbuffer + 2) =
		pdata->global_config__spad_enables_ref_2;
 80032e2:	7883      	ldrb	r3, [r0, #2]
	*(pbuffer + 2) =
 80032e4:	7093      	strb	r3, [r2, #2]
	*(pbuffer + 3) =
		pdata->global_config__spad_enables_ref_3;
 80032e6:	78c3      	ldrb	r3, [r0, #3]
	*(pbuffer + 3) =
 80032e8:	70d3      	strb	r3, [r2, #3]
	*(pbuffer + 4) =
		pdata->global_config__spad_enables_ref_4;
 80032ea:	7903      	ldrb	r3, [r0, #4]
	*(pbuffer + 4) =
 80032ec:	7113      	strb	r3, [r2, #4]
	*(pbuffer + 5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 80032ee:	7943      	ldrb	r3, [r0, #5]
 80032f0:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer + 5) =
 80032f4:	7153      	strb	r3, [r2, #5]
	*(pbuffer + 6) =
		pdata->global_config__ref_en_start_select;
 80032f6:	7983      	ldrb	r3, [r0, #6]
	*(pbuffer + 6) =
 80032f8:	7193      	strb	r3, [r2, #6]
	*(pbuffer + 7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 80032fa:	79c3      	ldrb	r3, [r0, #7]
 80032fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer + 7) =
 8003300:	71d3      	strb	r3, [r2, #7]
	*(pbuffer + 8) =
		pdata->ref_spad_man__ref_location & 0x3;
 8003302:	7a03      	ldrb	r3, [r0, #8]
 8003304:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer + 8) =
 8003308:	7213      	strb	r3, [r2, #8]
	VL53L1_i2c_encode_uint16_t(
 800330a:	2102      	movs	r1, #2
 800330c:	3209      	adds	r2, #9
 800330e:	8940      	ldrh	r0, [r0, #10]
 8003310:	f7ff fdd4 	bl	8002ebc <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer + 9);
	VL53L1_i2c_encode_int16_t(
 8003314:	f105 020b 	add.w	r2, r5, #11
 8003318:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 800331c:	2102      	movs	r1, #2
 800331e:	f7ff fde0 	bl	8002ee2 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer + 11);
	VL53L1_i2c_encode_int16_t(
 8003322:	f105 020d 	add.w	r2, r5, #13
 8003326:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 800332a:	2102      	movs	r1, #2
 800332c:	f7ff fdd9 	bl	8002ee2 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer + 13);
	VL53L1_i2c_encode_uint16_t(
 8003330:	f105 020f 	add.w	r2, r5, #15
 8003334:	8a20      	ldrh	r0, [r4, #16]
 8003336:	2102      	movs	r1, #2
 8003338:	f7ff fdc0 	bl	8002ebc <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer + 15);
	VL53L1_i2c_encode_int16_t(
 800333c:	8a60      	ldrh	r0, [r4, #18]
 800333e:	f105 0211 	add.w	r2, r5, #17
 8003342:	2102      	movs	r1, #2
 8003344:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8003348:	f7ff fdcb 	bl	8002ee2 <VL53L1_i2c_encode_int16_t>
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
		2,
		pbuffer + 17);
	VL53L1_i2c_encode_int16_t(
 800334c:	f105 0213 	add.w	r2, r5, #19
 8003350:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8003354:	2102      	movs	r1, #2
 8003356:	f7ff fdc4 	bl	8002ee2 <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer + 19);
	VL53L1_i2c_encode_int16_t(
 800335a:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 800335e:	f105 0215 	add.w	r2, r5, #21
 8003362:	2102      	movs	r1, #2
 8003364:	f7ff fdbd 	bl	8002ee2 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer + 21);
	LOG_FUNCTION_END(status);


	return status;
 8003368:	2000      	movs	r0, #0
 800336a:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800336c:	f06f 0009 	mvn.w	r0, #9
}
 8003370:	bd38      	pop	{r3, r4, r5, pc}

08003372 <VL53L1_i2c_decode_customer_nvm_managed>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8003372:	2816      	cmp	r0, #22
{
 8003374:	b538      	push	{r3, r4, r5, lr}
 8003376:	460d      	mov	r5, r1
 8003378:	4614      	mov	r4, r2
	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800337a:	d944      	bls.n	8003406 <VL53L1_i2c_decode_customer_nvm_managed+0x94>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer + 0));
 800337c:	780b      	ldrb	r3, [r1, #0]
	pdata->global_config__spad_enables_ref_0 =
 800337e:	7013      	strb	r3, [r2, #0]
	pdata->global_config__spad_enables_ref_1 =
 8003380:	784b      	ldrb	r3, [r1, #1]
 8003382:	7053      	strb	r3, [r2, #1]
		(*(pbuffer + 1));
	pdata->global_config__spad_enables_ref_2 =
 8003384:	788b      	ldrb	r3, [r1, #2]
 8003386:	7093      	strb	r3, [r2, #2]
		(*(pbuffer + 2));
	pdata->global_config__spad_enables_ref_3 =
 8003388:	78cb      	ldrb	r3, [r1, #3]
 800338a:	70d3      	strb	r3, [r2, #3]
		(*(pbuffer + 3));
	pdata->global_config__spad_enables_ref_4 =
 800338c:	790b      	ldrb	r3, [r1, #4]
 800338e:	7113      	strb	r3, [r2, #4]
		(*(pbuffer + 4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer + 5)) & 0xF;
 8003390:	794b      	ldrb	r3, [r1, #5]
 8003392:	f003 030f 	and.w	r3, r3, #15
	pdata->global_config__spad_enables_ref_5 =
 8003396:	7153      	strb	r3, [r2, #5]
	pdata->global_config__ref_en_start_select =
 8003398:	798b      	ldrb	r3, [r1, #6]
 800339a:	7193      	strb	r3, [r2, #6]
		(*(pbuffer + 6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer + 7)) & 0x3F;
 800339c:	79cb      	ldrb	r3, [r1, #7]
 800339e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->ref_spad_man__num_requested_ref_spads =
 80033a2:	71d3      	strb	r3, [r2, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer + 8)) & 0x3;
 80033a4:	7a0b      	ldrb	r3, [r1, #8]
 80033a6:	f003 0303 	and.w	r3, r3, #3
	pdata->ref_spad_man__ref_location =
 80033aa:	7213      	strb	r3, [r2, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 9));
 80033ac:	3109      	adds	r1, #9
 80033ae:	2002      	movs	r0, #2
 80033b0:	f7ff fd8c 	bl	8002ecc <VL53L1_i2c_decode_uint16_t>
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer + 11));
 80033b4:	f105 010b 	add.w	r1, r5, #11
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 80033b8:	8160      	strh	r0, [r4, #10]
		(VL53L1_i2c_decode_int16_t(2, pbuffer + 11));
 80033ba:	2002      	movs	r0, #2
 80033bc:	f7ff fd99 	bl	8002ef2 <VL53L1_i2c_decode_int16_t>
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer + 13));
 80033c0:	f105 010d 	add.w	r1, r5, #13
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 80033c4:	81a0      	strh	r0, [r4, #12]
		(VL53L1_i2c_decode_int16_t(2, pbuffer + 13));
 80033c6:	2002      	movs	r0, #2
 80033c8:	f7ff fd93 	bl	8002ef2 <VL53L1_i2c_decode_int16_t>
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 15));
 80033cc:	f105 010f 	add.w	r1, r5, #15
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 80033d0:	81e0      	strh	r0, [r4, #14]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 15));
 80033d2:	2002      	movs	r0, #2
 80033d4:	f7ff fd7a 	bl	8002ecc <VL53L1_i2c_decode_uint16_t>
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer + 17)) & 0x1FFF;
 80033d8:	f105 0111 	add.w	r1, r5, #17
	pdata->ref_spad_char__total_rate_target_mcps =
 80033dc:	8220      	strh	r0, [r4, #16]
		(VL53L1_i2c_decode_int16_t(2, pbuffer + 17)) & 0x1FFF;
 80033de:	2002      	movs	r0, #2
 80033e0:	f7ff fd87 	bl	8002ef2 <VL53L1_i2c_decode_int16_t>
 80033e4:	f3c0 000c 	ubfx	r0, r0, #0, #13
	pdata->algo__part_to_part_range_offset_mm =
 80033e8:	8260      	strh	r0, [r4, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer + 19));
 80033ea:	f105 0113 	add.w	r1, r5, #19
 80033ee:	2002      	movs	r0, #2
 80033f0:	f7ff fd7f 	bl	8002ef2 <VL53L1_i2c_decode_int16_t>
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer + 21));
 80033f4:	f105 0115 	add.w	r1, r5, #21
	pdata->mm_config__inner_offset_mm =
 80033f8:	82a0      	strh	r0, [r4, #20]
		(VL53L1_i2c_decode_int16_t(2, pbuffer + 21));
 80033fa:	2002      	movs	r0, #2
 80033fc:	f7ff fd79 	bl	8002ef2 <VL53L1_i2c_decode_int16_t>
	pdata->mm_config__outer_offset_mm =
 8003400:	82e0      	strh	r0, [r4, #22]

	LOG_FUNCTION_END(status);

	return status;
 8003402:	2000      	movs	r0, #0
 8003404:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8003406:	f06f 0009 	mvn.w	r0, #9
}
 800340a:	bd38      	pop	{r3, r4, r5, pc}

0800340c <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800340c:	b510      	push	{r4, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	460c      	mov	r4, r1
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status = VL53L1_ReadMulti(
 8003412:	2317      	movs	r3, #23
 8003414:	466a      	mov	r2, sp
 8003416:	210d      	movs	r1, #13
 8003418:	f004 fe28 	bl	800806c <VL53L1_ReadMulti>
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800341c:	b920      	cbnz	r0, 8003428 <VL53L1_get_customer_nvm_managed+0x1c>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 800341e:	4622      	mov	r2, r4
 8003420:	4669      	mov	r1, sp
 8003422:	2017      	movs	r0, #23
 8003424:	f7ff ffa5 	bl	8003372 <VL53L1_i2c_decode_customer_nvm_managed>
			pdata);

	LOG_FUNCTION_END(status);

	return status;
}
 8003428:	b006      	add	sp, #24
 800342a:	bd10      	pop	{r4, pc}

0800342c <VL53L1_i2c_encode_static_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800342c:	291f      	cmp	r1, #31
{
 800342e:	b538      	push	{r3, r4, r5, lr}
 8003430:	4604      	mov	r4, r0
 8003432:	4615      	mov	r5, r2
	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8003434:	d965      	bls.n	8003502 <VL53L1_i2c_encode_static_config+0xd6>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	VL53L1_i2c_encode_uint16_t(
 8003436:	2102      	movs	r1, #2
 8003438:	8800      	ldrh	r0, [r0, #0]
 800343a:	f7ff fd3f 	bl	8002ebc <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer + 0);
	*(pbuffer + 2) =
		pdata->debug__ctrl & 0x1;
 800343e:	78a3      	ldrb	r3, [r4, #2]
 8003440:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer + 2) =
 8003444:	70ab      	strb	r3, [r5, #2]
	*(pbuffer + 3) =
		pdata->test_mode__ctrl & 0xF;
 8003446:	78e3      	ldrb	r3, [r4, #3]
 8003448:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer + 3) =
 800344c:	70eb      	strb	r3, [r5, #3]
	*(pbuffer + 4) =
		pdata->clk_gating__ctrl & 0xF;
 800344e:	7923      	ldrb	r3, [r4, #4]
 8003450:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer + 4) =
 8003454:	712b      	strb	r3, [r5, #4]
	*(pbuffer + 5) =
		pdata->nvm_bist__ctrl & 0x1F;
 8003456:	7963      	ldrb	r3, [r4, #5]
 8003458:	f003 031f 	and.w	r3, r3, #31
	*(pbuffer + 5) =
 800345c:	716b      	strb	r3, [r5, #5]
	*(pbuffer + 6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800345e:	79a3      	ldrb	r3, [r4, #6]
 8003460:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer + 6) =
 8003464:	71ab      	strb	r3, [r5, #6]
	*(pbuffer + 7) =
		pdata->nvm_bist__start_address & 0x7F;
 8003466:	79e3      	ldrb	r3, [r4, #7]
 8003468:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer + 7) =
 800346c:	71eb      	strb	r3, [r5, #7]
	*(pbuffer + 8) =
		pdata->host_if__status & 0x1;
 800346e:	7a23      	ldrb	r3, [r4, #8]
 8003470:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer + 8) =
 8003474:	722b      	strb	r3, [r5, #8]
	*(pbuffer + 9) =
		pdata->pad_i2c_hv__config;
 8003476:	7a63      	ldrb	r3, [r4, #9]
	*(pbuffer + 9) =
 8003478:	726b      	strb	r3, [r5, #9]
	*(pbuffer + 10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800347a:	7aa3      	ldrb	r3, [r4, #10]
 800347c:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer + 10) =
 8003480:	72ab      	strb	r3, [r5, #10]
	*(pbuffer + 11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 8003482:	7ae3      	ldrb	r3, [r4, #11]
 8003484:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer + 11) =
 8003488:	72eb      	strb	r3, [r5, #11]
	*(pbuffer + 12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800348a:	7b23      	ldrb	r3, [r4, #12]
 800348c:	f003 031f 	and.w	r3, r3, #31
	*(pbuffer + 12) =
 8003490:	732b      	strb	r3, [r5, #12]
	*(pbuffer + 13) =
		pdata->gpio__tio_hv_status & 0x3;
 8003492:	7b63      	ldrb	r3, [r4, #13]
 8003494:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer + 13) =
 8003498:	736b      	strb	r3, [r5, #13]
	*(pbuffer + 14) =
		pdata->gpio__fio_hv_status & 0x3;
 800349a:	7ba3      	ldrb	r3, [r4, #14]
 800349c:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer + 14) =
 80034a0:	73ab      	strb	r3, [r5, #14]
	*(pbuffer + 15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 80034a2:	7be3      	ldrb	r3, [r4, #15]
 80034a4:	f003 0307 	and.w	r3, r3, #7
	*(pbuffer + 15) =
 80034a8:	73eb      	strb	r3, [r5, #15]
	*(pbuffer + 16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 80034aa:	7c23      	ldrb	r3, [r4, #16]
 80034ac:	f003 031f 	and.w	r3, r3, #31
	*(pbuffer + 16) =
 80034b0:	742b      	strb	r3, [r5, #16]
	*(pbuffer + 17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 80034b2:	7c63      	ldrb	r3, [r4, #17]
 80034b4:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer + 17) =
 80034b8:	746b      	strb	r3, [r5, #17]
	*(pbuffer + 18) =
		pdata->sigma_estimator__effective_pulse_width_ns;
 80034ba:	7ca3      	ldrb	r3, [r4, #18]
	*(pbuffer + 18) =
 80034bc:	74ab      	strb	r3, [r5, #18]
	*(pbuffer + 19) =
		pdata->sigma_estimator__effective_ambient_width_ns;
 80034be:	7ce3      	ldrb	r3, [r4, #19]
	*(pbuffer + 19) =
 80034c0:	74eb      	strb	r3, [r5, #19]
	*(pbuffer + 20) =
		pdata->sigma_estimator__sigma_ref_mm;
 80034c2:	7d23      	ldrb	r3, [r4, #20]
	*(pbuffer + 20) =
 80034c4:	752b      	strb	r3, [r5, #20]
	*(pbuffer + 21) =
		pdata->algo__crosstalk_compensation_valid_height_mm;
 80034c6:	7d63      	ldrb	r3, [r4, #21]
	*(pbuffer + 21) =
 80034c8:	756b      	strb	r3, [r5, #21]
	*(pbuffer + 22) =
		pdata->spare_host_config__static_config_spare_0;
 80034ca:	7da3      	ldrb	r3, [r4, #22]
	*(pbuffer + 22) =
 80034cc:	75ab      	strb	r3, [r5, #22]
	*(pbuffer + 23) =
		pdata->spare_host_config__static_config_spare_1;
 80034ce:	7de3      	ldrb	r3, [r4, #23]
	*(pbuffer + 23) =
 80034d0:	75eb      	strb	r3, [r5, #23]
	VL53L1_i2c_encode_uint16_t(
 80034d2:	8b20      	ldrh	r0, [r4, #24]
 80034d4:	f105 0218 	add.w	r2, r5, #24
 80034d8:	2102      	movs	r1, #2
 80034da:	f7ff fcef 	bl	8002ebc <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer + 24);
	*(pbuffer + 26) =
		pdata->algo__range_ignore_valid_height_mm;
 80034de:	7ea3      	ldrb	r3, [r4, #26]
	*(pbuffer + 26) =
 80034e0:	76ab      	strb	r3, [r5, #26]
	*(pbuffer + 27) =
		pdata->algo__range_min_clip;
 80034e2:	7ee3      	ldrb	r3, [r4, #27]
	*(pbuffer + 27) =
 80034e4:	76eb      	strb	r3, [r5, #27]
	*(pbuffer + 28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 80034e6:	7f23      	ldrb	r3, [r4, #28]
 80034e8:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer + 28) =
 80034ec:	772b      	strb	r3, [r5, #28]
	*(pbuffer + 29) =
		pdata->spare_host_config__static_config_spare_2;
 80034ee:	7f63      	ldrb	r3, [r4, #29]
	*(pbuffer + 29) =
 80034f0:	776b      	strb	r3, [r5, #29]
	*(pbuffer + 30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 80034f2:	7fa3      	ldrb	r3, [r4, #30]
 80034f4:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer + 30) =
 80034f8:	77ab      	strb	r3, [r5, #30]
	*(pbuffer + 31) =
		pdata->sd_config__reset_stages_lsb;
 80034fa:	7fe3      	ldrb	r3, [r4, #31]
	*(pbuffer + 31) =
 80034fc:	77eb      	strb	r3, [r5, #31]
	LOG_FUNCTION_END(status);


	return status;
 80034fe:	2000      	movs	r0, #0
 8003500:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8003502:	f06f 0009 	mvn.w	r0, #9
}
 8003506:	bd38      	pop	{r3, r4, r5, pc}

08003508 <VL53L1_i2c_encode_general_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 8003508:	2915      	cmp	r1, #21
{
 800350a:	b538      	push	{r3, r4, r5, lr}
 800350c:	4605      	mov	r5, r0
 800350e:	4614      	mov	r4, r2
	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 8003510:	d93c      	bls.n	800358c <VL53L1_i2c_encode_general_config+0x84>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer + 0) =
		pdata->gph_config__stream_count_update_value;
 8003512:	7803      	ldrb	r3, [r0, #0]
	*(pbuffer + 0) =
 8003514:	7013      	strb	r3, [r2, #0]
	*(pbuffer + 1) =
		pdata->global_config__stream_divider;
 8003516:	7843      	ldrb	r3, [r0, #1]
	*(pbuffer + 1) =
 8003518:	7053      	strb	r3, [r2, #1]
	*(pbuffer + 2) =
		pdata->system__interrupt_config_gpio;
 800351a:	7883      	ldrb	r3, [r0, #2]
	*(pbuffer + 2) =
 800351c:	7093      	strb	r3, [r2, #2]
	*(pbuffer + 3) =
		pdata->cal_config__vcsel_start & 0x7F;
 800351e:	78c3      	ldrb	r3, [r0, #3]
 8003520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer + 3) =
 8003524:	70d3      	strb	r3, [r2, #3]
	VL53L1_i2c_encode_uint16_t(
 8003526:	8880      	ldrh	r0, [r0, #4]
 8003528:	3204      	adds	r2, #4
 800352a:	2102      	movs	r1, #2
 800352c:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8003530:	f7ff fcc4 	bl	8002ebc <VL53L1_i2c_encode_uint16_t>
		pdata->cal_config__repeat_rate & 0xFFF,
		2,
		pbuffer + 4);
	*(pbuffer + 6) =
		pdata->global_config__vcsel_width & 0x7F;
 8003534:	79ab      	ldrb	r3, [r5, #6]
 8003536:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer + 6) =
 800353a:	71a3      	strb	r3, [r4, #6]
	*(pbuffer + 7) =
		pdata->phasecal_config__timeout_macrop;
 800353c:	79eb      	ldrb	r3, [r5, #7]
	*(pbuffer + 7) =
 800353e:	71e3      	strb	r3, [r4, #7]
	*(pbuffer + 8) =
		pdata->phasecal_config__target;
 8003540:	7a2b      	ldrb	r3, [r5, #8]
	*(pbuffer + 8) =
 8003542:	7223      	strb	r3, [r4, #8]
	*(pbuffer + 9) =
		pdata->phasecal_config__override & 0x1;
 8003544:	7a6b      	ldrb	r3, [r5, #9]
 8003546:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer + 9) =
 800354a:	7263      	strb	r3, [r4, #9]
	*(pbuffer + 11) =
		pdata->dss_config__roi_mode_control & 0x7;
 800354c:	7aab      	ldrb	r3, [r5, #10]
 800354e:	f003 0307 	and.w	r3, r3, #7
	*(pbuffer + 11) =
 8003552:	72e3      	strb	r3, [r4, #11]
	VL53L1_i2c_encode_uint16_t(
 8003554:	f104 020c 	add.w	r2, r4, #12
 8003558:	89a8      	ldrh	r0, [r5, #12]
 800355a:	2102      	movs	r1, #2
 800355c:	f7ff fcae 	bl	8002ebc <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer + 12);
	VL53L1_i2c_encode_uint16_t(
 8003560:	f104 020e 	add.w	r2, r4, #14
 8003564:	89e8      	ldrh	r0, [r5, #14]
 8003566:	2102      	movs	r1, #2
 8003568:	f7ff fca8 	bl	8002ebc <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer + 14);
	VL53L1_i2c_encode_uint16_t(
 800356c:	8a28      	ldrh	r0, [r5, #16]
 800356e:	f104 0210 	add.w	r2, r4, #16
 8003572:	2102      	movs	r1, #2
 8003574:	f7ff fca2 	bl	8002ebc <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer + 16);
	*(pbuffer + 18) =
		pdata->dss_config__manual_block_select;
 8003578:	7cab      	ldrb	r3, [r5, #18]
	*(pbuffer + 18) =
 800357a:	74a3      	strb	r3, [r4, #18]
	*(pbuffer + 19) =
		pdata->dss_config__aperture_attenuation;
 800357c:	7ceb      	ldrb	r3, [r5, #19]
	*(pbuffer + 19) =
 800357e:	74e3      	strb	r3, [r4, #19]
	*(pbuffer + 20) =
		pdata->dss_config__max_spads_limit;
 8003580:	7d2b      	ldrb	r3, [r5, #20]
	*(pbuffer + 20) =
 8003582:	7523      	strb	r3, [r4, #20]
	*(pbuffer + 21) =
		pdata->dss_config__min_spads_limit;
 8003584:	7d6b      	ldrb	r3, [r5, #21]
	*(pbuffer + 21) =
 8003586:	7563      	strb	r3, [r4, #21]
	LOG_FUNCTION_END(status);


	return status;
 8003588:	2000      	movs	r0, #0
 800358a:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800358c:	f06f 0009 	mvn.w	r0, #9
}
 8003590:	bd38      	pop	{r3, r4, r5, pc}

08003592 <VL53L1_i2c_encode_timing_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 8003592:	2916      	cmp	r1, #22
{
 8003594:	b538      	push	{r3, r4, r5, lr}
 8003596:	4605      	mov	r5, r0
 8003598:	4614      	mov	r4, r2
	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 800359a:	d93a      	bls.n	8003612 <VL53L1_i2c_encode_timing_config+0x80>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer + 0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 800359c:	7803      	ldrb	r3, [r0, #0]
 800359e:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer + 0) =
 80035a2:	7013      	strb	r3, [r2, #0]
	*(pbuffer + 1) =
		pdata->mm_config__timeout_macrop_a_lo;
 80035a4:	7843      	ldrb	r3, [r0, #1]
	*(pbuffer + 1) =
 80035a6:	7053      	strb	r3, [r2, #1]
	*(pbuffer + 2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 80035a8:	7883      	ldrb	r3, [r0, #2]
 80035aa:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer + 2) =
 80035ae:	7093      	strb	r3, [r2, #2]
	*(pbuffer + 3) =
		pdata->mm_config__timeout_macrop_b_lo;
 80035b0:	78c3      	ldrb	r3, [r0, #3]
	*(pbuffer + 3) =
 80035b2:	70d3      	strb	r3, [r2, #3]
	*(pbuffer + 4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 80035b4:	7903      	ldrb	r3, [r0, #4]
 80035b6:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer + 4) =
 80035ba:	7113      	strb	r3, [r2, #4]
	*(pbuffer + 5) =
		pdata->range_config__timeout_macrop_a_lo;
 80035bc:	7943      	ldrb	r3, [r0, #5]
	*(pbuffer + 5) =
 80035be:	7153      	strb	r3, [r2, #5]
	*(pbuffer + 6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 80035c0:	7983      	ldrb	r3, [r0, #6]
 80035c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer + 6) =
 80035c6:	7193      	strb	r3, [r2, #6]
	*(pbuffer + 7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 80035c8:	79c3      	ldrb	r3, [r0, #7]
 80035ca:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer + 7) =
 80035ce:	71d3      	strb	r3, [r2, #7]
	*(pbuffer + 8) =
		pdata->range_config__timeout_macrop_b_lo;
 80035d0:	7a03      	ldrb	r3, [r0, #8]
	*(pbuffer + 8) =
 80035d2:	7213      	strb	r3, [r2, #8]
	*(pbuffer + 9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 80035d4:	7a43      	ldrb	r3, [r0, #9]
 80035d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer + 9) =
 80035da:	7253      	strb	r3, [r2, #9]
	VL53L1_i2c_encode_uint16_t(
 80035dc:	2102      	movs	r1, #2
 80035de:	320a      	adds	r2, #10
 80035e0:	8940      	ldrh	r0, [r0, #10]
 80035e2:	f7ff fc6b 	bl	8002ebc <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer + 10);
	VL53L1_i2c_encode_uint16_t(
 80035e6:	f104 020c 	add.w	r2, r4, #12
 80035ea:	89a8      	ldrh	r0, [r5, #12]
 80035ec:	2102      	movs	r1, #2
 80035ee:	f7ff fc65 	bl	8002ebc <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer + 12);
	*(pbuffer + 14) =
		pdata->range_config__valid_phase_low;
 80035f2:	7bab      	ldrb	r3, [r5, #14]
	*(pbuffer + 14) =
 80035f4:	73a3      	strb	r3, [r4, #14]
	*(pbuffer + 15) =
		pdata->range_config__valid_phase_high;
 80035f6:	7beb      	ldrb	r3, [r5, #15]
	*(pbuffer + 15) =
 80035f8:	73e3      	strb	r3, [r4, #15]
	VL53L1_i2c_encode_uint32_t(
 80035fa:	6928      	ldr	r0, [r5, #16]
 80035fc:	f104 0212 	add.w	r2, r4, #18
 8003600:	2104      	movs	r1, #4
 8003602:	f7ff fc84 	bl	8002f0e <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer + 18);
	*(pbuffer + 22) =
		pdata->system__fractional_enable & 0x1;
 8003606:	7d2b      	ldrb	r3, [r5, #20]
 8003608:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer + 22) =
 800360c:	75a3      	strb	r3, [r4, #22]
	LOG_FUNCTION_END(status);


	return status;
 800360e:	2000      	movs	r0, #0
 8003610:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8003612:	f06f 0009 	mvn.w	r0, #9
}
 8003616:	bd38      	pop	{r3, r4, r5, pc}

08003618 <VL53L1_i2c_encode_dynamic_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8003618:	2911      	cmp	r1, #17
{
 800361a:	b538      	push	{r3, r4, r5, lr}
 800361c:	4604      	mov	r4, r0
 800361e:	4615      	mov	r5, r2
	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8003620:	d939      	bls.n	8003696 <VL53L1_i2c_encode_dynamic_config+0x7e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer + 0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 8003622:	7803      	ldrb	r3, [r0, #0]
 8003624:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer + 0) =
 8003628:	f802 3b01 	strb.w	r3, [r2], #1
	VL53L1_i2c_encode_uint16_t(
 800362c:	2102      	movs	r1, #2
 800362e:	8840      	ldrh	r0, [r0, #2]
 8003630:	f7ff fc44 	bl	8002ebc <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer + 1);
	VL53L1_i2c_encode_uint16_t(
 8003634:	88a0      	ldrh	r0, [r4, #4]
 8003636:	1cea      	adds	r2, r5, #3
 8003638:	2102      	movs	r1, #2
 800363a:	f7ff fc3f 	bl	8002ebc <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer + 3);
	*(pbuffer + 5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800363e:	79a3      	ldrb	r3, [r4, #6]
 8003640:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer + 5) =
 8003644:	716b      	strb	r3, [r5, #5]
	*(pbuffer + 6) =
		pdata->system__seed_config & 0x7;
 8003646:	79e3      	ldrb	r3, [r4, #7]
 8003648:	f003 0307 	and.w	r3, r3, #7
	*(pbuffer + 6) =
 800364c:	71ab      	strb	r3, [r5, #6]
	*(pbuffer + 7) =
		pdata->sd_config__woi_sd0;
 800364e:	7a23      	ldrb	r3, [r4, #8]
	*(pbuffer + 7) =
 8003650:	71eb      	strb	r3, [r5, #7]
	*(pbuffer + 8) =
		pdata->sd_config__woi_sd1;
 8003652:	7a63      	ldrb	r3, [r4, #9]
	*(pbuffer + 8) =
 8003654:	722b      	strb	r3, [r5, #8]
	*(pbuffer + 9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8003656:	7aa3      	ldrb	r3, [r4, #10]
 8003658:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer + 9) =
 800365c:	726b      	strb	r3, [r5, #9]
	*(pbuffer + 10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800365e:	7ae3      	ldrb	r3, [r4, #11]
 8003660:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer + 10) =
 8003664:	72ab      	strb	r3, [r5, #10]
	*(pbuffer + 11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8003666:	7b23      	ldrb	r3, [r4, #12]
 8003668:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer + 11) =
 800366c:	72eb      	strb	r3, [r5, #11]
	*(pbuffer + 12) =
		pdata->sd_config__first_order_select & 0x3;
 800366e:	7b63      	ldrb	r3, [r4, #13]
 8003670:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer + 12) =
 8003674:	732b      	strb	r3, [r5, #12]
	*(pbuffer + 13) =
		pdata->sd_config__quantifier & 0xF;
 8003676:	7ba3      	ldrb	r3, [r4, #14]
 8003678:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer + 13) =
 800367c:	736b      	strb	r3, [r5, #13]
	*(pbuffer + 14) =
		pdata->roi_config__user_roi_centre_spad;
 800367e:	7be3      	ldrb	r3, [r4, #15]
	*(pbuffer + 14) =
 8003680:	73ab      	strb	r3, [r5, #14]
	*(pbuffer + 15) =
		pdata->roi_config__user_roi_requested_global_xy_size;
 8003682:	7c23      	ldrb	r3, [r4, #16]
	*(pbuffer + 15) =
 8003684:	73eb      	strb	r3, [r5, #15]
	*(pbuffer + 16) =
		pdata->system__sequence_config;
 8003686:	7c63      	ldrb	r3, [r4, #17]
	*(pbuffer + 16) =
 8003688:	742b      	strb	r3, [r5, #16]
	*(pbuffer + 17) =
		pdata->system__grouped_parameter_hold & 0x3;
 800368a:	7ca3      	ldrb	r3, [r4, #18]
 800368c:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer + 17) =
 8003690:	746b      	strb	r3, [r5, #17]
	LOG_FUNCTION_END(status);


	return status;
 8003692:	2000      	movs	r0, #0
 8003694:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8003696:	f06f 0009 	mvn.w	r0, #9
}
 800369a:	bd38      	pop	{r3, r4, r5, pc}

0800369c <VL53L1_i2c_encode_system_control>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 800369c:	2904      	cmp	r1, #4
 800369e:	d913      	bls.n	80036c8 <VL53L1_i2c_encode_system_control+0x2c>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer + 0) =
		pdata->power_management__go1_power_force & 0x1;
 80036a0:	7803      	ldrb	r3, [r0, #0]
 80036a2:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer + 0) =
 80036a6:	7013      	strb	r3, [r2, #0]
	*(pbuffer + 1) =
		pdata->system__stream_count_ctrl & 0x1;
 80036a8:	7843      	ldrb	r3, [r0, #1]
 80036aa:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer + 1) =
 80036ae:	7053      	strb	r3, [r2, #1]
	*(pbuffer + 2) =
		pdata->firmware__enable & 0x1;
 80036b0:	7883      	ldrb	r3, [r0, #2]
 80036b2:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer + 2) =
 80036b6:	7093      	strb	r3, [r2, #2]
	*(pbuffer + 3) =
		pdata->system__interrupt_clear & 0x3;
 80036b8:	78c3      	ldrb	r3, [r0, #3]
 80036ba:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer + 3) =
 80036be:	70d3      	strb	r3, [r2, #3]
	*(pbuffer + 4) =
		pdata->system__mode_start;
 80036c0:	7903      	ldrb	r3, [r0, #4]
	*(pbuffer + 4) =
 80036c2:	7113      	strb	r3, [r2, #4]
	LOG_FUNCTION_END(status);


	return status;
 80036c4:	2000      	movs	r0, #0
 80036c6:	4770      	bx	lr
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80036c8:	f06f 0009 	mvn.w	r0, #9
}
 80036cc:	4770      	bx	lr

080036ce <VL53L1_set_system_control>:


VL53L1_Error VL53L1_set_system_control(
	VL53L1_DEV Dev,
	VL53L1_system_control_t   *pdata)
{
 80036ce:	b513      	push	{r0, r1, r4, lr}
 80036d0:	4604      	mov	r4, r0
	uint8_t comms_buffer[VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status = VL53L1_i2c_encode_system_control(
 80036d2:	466a      	mov	r2, sp
{
 80036d4:	4608      	mov	r0, r1
		status = VL53L1_i2c_encode_system_control(
 80036d6:	2105      	movs	r1, #5
 80036d8:	f7ff ffe0 	bl	800369c <VL53L1_i2c_encode_system_control>
			pdata,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53L1_ERROR_NONE)
 80036dc:	b928      	cbnz	r0, 80036ea <VL53L1_set_system_control+0x1c>
		status = VL53L1_WriteMulti(
 80036de:	2305      	movs	r3, #5
 80036e0:	466a      	mov	r2, sp
 80036e2:	2183      	movs	r1, #131	; 0x83
 80036e4:	4620      	mov	r0, r4
 80036e6:	f004 fca1 	bl	800802c <VL53L1_WriteMulti>
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
}
 80036ea:	b002      	add	sp, #8
 80036ec:	bd10      	pop	{r4, pc}

080036ee <VL53L1_i2c_decode_system_results>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 80036ee:	282b      	cmp	r0, #43	; 0x2b
{
 80036f0:	b538      	push	{r3, r4, r5, lr}
 80036f2:	460d      	mov	r5, r1
 80036f4:	4614      	mov	r4, r2
	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 80036f6:	f240 8086 	bls.w	8003806 <VL53L1_i2c_decode_system_results+0x118>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->result__interrupt_status =
		(*(pbuffer + 0)) & 0x3F;
 80036fa:	780b      	ldrb	r3, [r1, #0]
 80036fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->result__interrupt_status =
 8003700:	7013      	strb	r3, [r2, #0]
	pdata->result__range_status =
 8003702:	784b      	ldrb	r3, [r1, #1]
 8003704:	7053      	strb	r3, [r2, #1]
		(*(pbuffer + 1));
	pdata->result__report_status =
		(*(pbuffer + 2)) & 0xF;
 8003706:	788b      	ldrb	r3, [r1, #2]
 8003708:	f003 030f 	and.w	r3, r3, #15
	pdata->result__report_status =
 800370c:	7093      	strb	r3, [r2, #2]
	pdata->result__stream_count =
 800370e:	78cb      	ldrb	r3, [r1, #3]
 8003710:	70d3      	strb	r3, [r2, #3]
		(*(pbuffer + 3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 4));
 8003712:	3104      	adds	r1, #4
 8003714:	2002      	movs	r0, #2
 8003716:	f7ff fbd9 	bl	8002ecc <VL53L1_i2c_decode_uint16_t>
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 6));
 800371a:	1da9      	adds	r1, r5, #6
	pdata->result__dss_actual_effective_spads_sd0 =
 800371c:	80a0      	strh	r0, [r4, #4]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 6));
 800371e:	2002      	movs	r0, #2
 8003720:	f7ff fbd4 	bl	8002ecc <VL53L1_i2c_decode_uint16_t>
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 8));
 8003724:	f105 0108 	add.w	r1, r5, #8
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 8003728:	80e0      	strh	r0, [r4, #6]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 8));
 800372a:	2002      	movs	r0, #2
 800372c:	f7ff fbce 	bl	8002ecc <VL53L1_i2c_decode_uint16_t>
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 10));
 8003730:	f105 010a 	add.w	r1, r5, #10
	pdata->result__ambient_count_rate_mcps_sd0 =
 8003734:	8120      	strh	r0, [r4, #8]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 10));
 8003736:	2002      	movs	r0, #2
 8003738:	f7ff fbc8 	bl	8002ecc <VL53L1_i2c_decode_uint16_t>
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 12));
 800373c:	f105 010c 	add.w	r1, r5, #12
	pdata->result__sigma_sd0 =
 8003740:	8160      	strh	r0, [r4, #10]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 12));
 8003742:	2002      	movs	r0, #2
 8003744:	f7ff fbc2 	bl	8002ecc <VL53L1_i2c_decode_uint16_t>
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 14));
 8003748:	f105 010e 	add.w	r1, r5, #14
	pdata->result__phase_sd0 =
 800374c:	81a0      	strh	r0, [r4, #12]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 14));
 800374e:	2002      	movs	r0, #2
 8003750:	f7ff fbbc 	bl	8002ecc <VL53L1_i2c_decode_uint16_t>
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 16));
 8003754:	f105 0110 	add.w	r1, r5, #16
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 8003758:	81e0      	strh	r0, [r4, #14]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 16));
 800375a:	2002      	movs	r0, #2
 800375c:	f7ff fbb6 	bl	8002ecc <VL53L1_i2c_decode_uint16_t>
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 18));
 8003760:	f105 0112 	add.w	r1, r5, #18
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8003764:	8220      	strh	r0, [r4, #16]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 18));
 8003766:	2002      	movs	r0, #2
 8003768:	f7ff fbb0 	bl	8002ecc <VL53L1_i2c_decode_uint16_t>
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 20));
 800376c:	f105 0114 	add.w	r1, r5, #20
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 8003770:	8260      	strh	r0, [r4, #18]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 20));
 8003772:	2002      	movs	r0, #2
 8003774:	f7ff fbaa 	bl	8002ecc <VL53L1_i2c_decode_uint16_t>
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 22));
 8003778:	f105 0116 	add.w	r1, r5, #22
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 800377c:	82a0      	strh	r0, [r4, #20]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 22));
 800377e:	2002      	movs	r0, #2
 8003780:	f7ff fba4 	bl	8002ecc <VL53L1_i2c_decode_uint16_t>
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 24));
 8003784:	f105 0118 	add.w	r1, r5, #24
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 8003788:	82e0      	strh	r0, [r4, #22]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 24));
 800378a:	2002      	movs	r0, #2
 800378c:	f7ff fb9e 	bl	8002ecc <VL53L1_i2c_decode_uint16_t>
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 26));
 8003790:	f105 011a 	add.w	r1, r5, #26
	pdata->result__dss_actual_effective_spads_sd1 =
 8003794:	8320      	strh	r0, [r4, #24]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 26));
 8003796:	2002      	movs	r0, #2
 8003798:	f7ff fb98 	bl	8002ecc <VL53L1_i2c_decode_uint16_t>
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 28));
 800379c:	f105 011c 	add.w	r1, r5, #28
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 80037a0:	8360      	strh	r0, [r4, #26]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 28));
 80037a2:	2002      	movs	r0, #2
 80037a4:	f7ff fb92 	bl	8002ecc <VL53L1_i2c_decode_uint16_t>
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 30));
 80037a8:	f105 011e 	add.w	r1, r5, #30
	pdata->result__ambient_count_rate_mcps_sd1 =
 80037ac:	83a0      	strh	r0, [r4, #28]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 30));
 80037ae:	2002      	movs	r0, #2
 80037b0:	f7ff fb8c 	bl	8002ecc <VL53L1_i2c_decode_uint16_t>
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 32));
 80037b4:	f105 0120 	add.w	r1, r5, #32
	pdata->result__sigma_sd1 =
 80037b8:	83e0      	strh	r0, [r4, #30]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 32));
 80037ba:	2002      	movs	r0, #2
 80037bc:	f7ff fb86 	bl	8002ecc <VL53L1_i2c_decode_uint16_t>
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 34));
 80037c0:	f105 0122 	add.w	r1, r5, #34	; 0x22
	pdata->result__phase_sd1 =
 80037c4:	8420      	strh	r0, [r4, #32]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 34));
 80037c6:	2002      	movs	r0, #2
 80037c8:	f7ff fb80 	bl	8002ecc <VL53L1_i2c_decode_uint16_t>
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 36));
 80037cc:	f105 0124 	add.w	r1, r5, #36	; 0x24
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 80037d0:	8460      	strh	r0, [r4, #34]	; 0x22
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 36));
 80037d2:	2002      	movs	r0, #2
 80037d4:	f7ff fb7a 	bl	8002ecc <VL53L1_i2c_decode_uint16_t>
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 38));
 80037d8:	f105 0126 	add.w	r1, r5, #38	; 0x26
	pdata->result__spare_0_sd1 =
 80037dc:	84a0      	strh	r0, [r4, #36]	; 0x24
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 38));
 80037de:	2002      	movs	r0, #2
 80037e0:	f7ff fb74 	bl	8002ecc <VL53L1_i2c_decode_uint16_t>
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 40));
 80037e4:	f105 0128 	add.w	r1, r5, #40	; 0x28
	pdata->result__spare_1_sd1 =
 80037e8:	84e0      	strh	r0, [r4, #38]	; 0x26
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 40));
 80037ea:	2002      	movs	r0, #2
 80037ec:	f7ff fb6e 	bl	8002ecc <VL53L1_i2c_decode_uint16_t>
	pdata->result__spare_2_sd1 =
 80037f0:	8520      	strh	r0, [r4, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 80037f2:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 80037f6:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
		(*(pbuffer + 42));
	pdata->result__thresh_info =
 80037fa:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 80037fe:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
		(*(pbuffer + 43));

	LOG_FUNCTION_END(status);

	return status;
 8003802:	2000      	movs	r0, #0
 8003804:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8003806:	f06f 0009 	mvn.w	r0, #9
}
 800380a:	bd38      	pop	{r3, r4, r5, pc}

0800380c <VL53L1_i2c_decode_core_results>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 800380c:	2820      	cmp	r0, #32
{
 800380e:	b538      	push	{r3, r4, r5, lr}
 8003810:	460d      	mov	r5, r1
 8003812:	4614      	mov	r4, r2
	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 8003814:	d932      	bls.n	800387c <VL53L1_i2c_decode_core_results+0x70>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 0));
 8003816:	2004      	movs	r0, #4
 8003818:	f7ff fb81 	bl	8002f1e <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 4));
 800381c:	1d29      	adds	r1, r5, #4
	pdata->result_core__ambient_window_events_sd0 =
 800381e:	6020      	str	r0, [r4, #0]
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 4));
 8003820:	2004      	movs	r0, #4
 8003822:	f7ff fb7c 	bl	8002f1e <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer + 8));
 8003826:	f105 0108 	add.w	r1, r5, #8
	pdata->result_core__ranging_total_events_sd0 =
 800382a:	6060      	str	r0, [r4, #4]
		(VL53L1_i2c_decode_int32_t(4, pbuffer + 8));
 800382c:	2004      	movs	r0, #4
 800382e:	f7ff fb80 	bl	8002f32 <VL53L1_i2c_decode_int32_t>
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 12));
 8003832:	f105 010c 	add.w	r1, r5, #12
	pdata->result_core__signal_total_events_sd0 =
 8003836:	60a0      	str	r0, [r4, #8]
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 12));
 8003838:	2004      	movs	r0, #4
 800383a:	f7ff fb70 	bl	8002f1e <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 16));
 800383e:	f105 0110 	add.w	r1, r5, #16
	pdata->result_core__total_periods_elapsed_sd0 =
 8003842:	60e0      	str	r0, [r4, #12]
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 16));
 8003844:	2004      	movs	r0, #4
 8003846:	f7ff fb6a 	bl	8002f1e <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 20));
 800384a:	f105 0114 	add.w	r1, r5, #20
	pdata->result_core__ambient_window_events_sd1 =
 800384e:	6120      	str	r0, [r4, #16]
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 20));
 8003850:	2004      	movs	r0, #4
 8003852:	f7ff fb64 	bl	8002f1e <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer + 24));
 8003856:	f105 0118 	add.w	r1, r5, #24
	pdata->result_core__ranging_total_events_sd1 =
 800385a:	6160      	str	r0, [r4, #20]
		(VL53L1_i2c_decode_int32_t(4, pbuffer + 24));
 800385c:	2004      	movs	r0, #4
 800385e:	f7ff fb68 	bl	8002f32 <VL53L1_i2c_decode_int32_t>
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 28));
 8003862:	f105 011c 	add.w	r1, r5, #28
	pdata->result_core__signal_total_events_sd1 =
 8003866:	61a0      	str	r0, [r4, #24]
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 28));
 8003868:	2004      	movs	r0, #4
 800386a:	f7ff fb58 	bl	8002f1e <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__total_periods_elapsed_sd1 =
 800386e:	61e0      	str	r0, [r4, #28]
	pdata->result_core__spare_0 =
 8003870:	f895 3020 	ldrb.w	r3, [r5, #32]
 8003874:	f884 3020 	strb.w	r3, [r4, #32]
		(*(pbuffer + 32));

	LOG_FUNCTION_END(status);

	return status;
 8003878:	2000      	movs	r0, #0
 800387a:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800387c:	f06f 0009 	mvn.w	r0, #9
}
 8003880:	bd38      	pop	{r3, r4, r5, pc}

08003882 <VL53L1_i2c_decode_debug_results>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 8003882:	2837      	cmp	r0, #55	; 0x37
{
 8003884:	b538      	push	{r3, r4, r5, lr}
 8003886:	460d      	mov	r5, r1
 8003888:	4614      	mov	r4, r2
	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 800388a:	f240 80d0 	bls.w	8003a2e <VL53L1_i2c_decode_debug_results+0x1ac>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 0));
 800388e:	2002      	movs	r0, #2
 8003890:	f7ff fb1c 	bl	8002ecc <VL53L1_i2c_decode_uint16_t>
	pdata->phasecal_result__reference_phase =
 8003894:	8020      	strh	r0, [r4, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer + 2)) & 0x7F;
 8003896:	78ab      	ldrb	r3, [r5, #2]
 8003898:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->phasecal_result__vcsel_start =
 800389c:	70a3      	strb	r3, [r4, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer + 3)) & 0x3F;
 800389e:	78eb      	ldrb	r3, [r5, #3]
 80038a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->ref_spad_char_result__num_actual_ref_spads =
 80038a4:	70e3      	strb	r3, [r4, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer + 4)) & 0x3;
 80038a6:	792b      	ldrb	r3, [r5, #4]
 80038a8:	f003 0303 	and.w	r3, r3, #3
	pdata->ref_spad_char_result__ref_location =
 80038ac:	7123      	strb	r3, [r4, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer + 5)) & 0x1;
 80038ae:	796b      	ldrb	r3, [r5, #5]
 80038b0:	f003 0301 	and.w	r3, r3, #1
	pdata->vhv_result__coldboot_status =
 80038b4:	7163      	strb	r3, [r4, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer + 6)) & 0x3F;
 80038b6:	79ab      	ldrb	r3, [r5, #6]
 80038b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->vhv_result__search_result =
 80038bc:	71a3      	strb	r3, [r4, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer + 7)) & 0x3F;
 80038be:	79eb      	ldrb	r3, [r5, #7]
 80038c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->vhv_result__latest_setting =
 80038c4:	71e3      	strb	r3, [r4, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 8)) & 0x3FF;
 80038c6:	f105 0108 	add.w	r1, r5, #8
 80038ca:	2002      	movs	r0, #2
 80038cc:	f7ff fafe 	bl	8002ecc <VL53L1_i2c_decode_uint16_t>
 80038d0:	f3c0 0009 	ubfx	r0, r0, #0, #10
	pdata->result__osc_calibrate_val =
 80038d4:	8120      	strh	r0, [r4, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer + 10)) & 0x3;
 80038d6:	7aab      	ldrb	r3, [r5, #10]
 80038d8:	f003 0303 	and.w	r3, r3, #3
	pdata->ana_config__powerdown_go1 =
 80038dc:	72a3      	strb	r3, [r4, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer + 11)) & 0x3;
 80038de:	7aeb      	ldrb	r3, [r5, #11]
 80038e0:	f003 0303 	and.w	r3, r3, #3
	pdata->ana_config__ref_bg_ctrl =
 80038e4:	72e3      	strb	r3, [r4, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer + 12)) & 0xF;
 80038e6:	7b2b      	ldrb	r3, [r5, #12]
 80038e8:	f003 030f 	and.w	r3, r3, #15
	pdata->ana_config__regdvdd1v2_ctrl =
 80038ec:	7323      	strb	r3, [r4, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer + 13)) & 0x7;
 80038ee:	7b6b      	ldrb	r3, [r5, #13]
 80038f0:	f003 0307 	and.w	r3, r3, #7
	pdata->ana_config__osc_slow_ctrl =
 80038f4:	7363      	strb	r3, [r4, #13]
	pdata->test_mode__status =
		(*(pbuffer + 14)) & 0x1;
 80038f6:	7bab      	ldrb	r3, [r5, #14]
 80038f8:	f003 0301 	and.w	r3, r3, #1
	pdata->test_mode__status =
 80038fc:	73a3      	strb	r3, [r4, #14]
	pdata->firmware__system_status =
		(*(pbuffer + 15)) & 0x3;
 80038fe:	7beb      	ldrb	r3, [r5, #15]
 8003900:	f003 0303 	and.w	r3, r3, #3
	pdata->firmware__system_status =
 8003904:	73e3      	strb	r3, [r4, #15]
	pdata->firmware__mode_status =
 8003906:	7c2b      	ldrb	r3, [r5, #16]
 8003908:	7423      	strb	r3, [r4, #16]
		(*(pbuffer + 16));
	pdata->firmware__secondary_mode_status =
 800390a:	7c6b      	ldrb	r3, [r5, #17]
 800390c:	7463      	strb	r3, [r4, #17]
		(*(pbuffer + 17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 18)) & 0xFFF;
 800390e:	f105 0112 	add.w	r1, r5, #18
 8003912:	2002      	movs	r0, #2
 8003914:	f7ff fada 	bl	8002ecc <VL53L1_i2c_decode_uint16_t>
 8003918:	f3c0 000b 	ubfx	r0, r0, #0, #12
	pdata->firmware__cal_repeat_rate_counter =
 800391c:	8260      	strh	r0, [r4, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 22));
 800391e:	f105 0116 	add.w	r1, r5, #22
 8003922:	2002      	movs	r0, #2
 8003924:	f7ff fad2 	bl	8002ecc <VL53L1_i2c_decode_uint16_t>
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 24));
 8003928:	f105 0118 	add.w	r1, r5, #24
	pdata->gph__system__thresh_high =
 800392c:	82a0      	strh	r0, [r4, #20]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 24));
 800392e:	2002      	movs	r0, #2
 8003930:	f7ff facc 	bl	8002ecc <VL53L1_i2c_decode_uint16_t>
	pdata->gph__system__thresh_low =
 8003934:	82e0      	strh	r0, [r4, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer + 26)) & 0x1;
 8003936:	7eab      	ldrb	r3, [r5, #26]
 8003938:	f003 0301 	and.w	r3, r3, #1
	pdata->gph__system__enable_xtalk_per_quadrant =
 800393c:	7623      	strb	r3, [r4, #24]
	pdata->gph__spare_0 =
		(*(pbuffer + 27)) & 0x7;
 800393e:	7eeb      	ldrb	r3, [r5, #27]
 8003940:	f003 0307 	and.w	r3, r3, #7
	pdata->gph__spare_0 =
 8003944:	7663      	strb	r3, [r4, #25]
	pdata->gph__sd_config__woi_sd0 =
 8003946:	7f2b      	ldrb	r3, [r5, #28]
 8003948:	76a3      	strb	r3, [r4, #26]
		(*(pbuffer + 28));
	pdata->gph__sd_config__woi_sd1 =
 800394a:	7f6b      	ldrb	r3, [r5, #29]
 800394c:	76e3      	strb	r3, [r4, #27]
		(*(pbuffer + 29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer + 30)) & 0x7F;
 800394e:	7fab      	ldrb	r3, [r5, #30]
 8003950:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->gph__sd_config__initial_phase_sd0 =
 8003954:	7723      	strb	r3, [r4, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer + 31)) & 0x7F;
 8003956:	7feb      	ldrb	r3, [r5, #31]
 8003958:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->gph__sd_config__initial_phase_sd1 =
 800395c:	7763      	strb	r3, [r4, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer + 32)) & 0x3;
 800395e:	f895 3020 	ldrb.w	r3, [r5, #32]
 8003962:	f003 0303 	and.w	r3, r3, #3
	pdata->gph__sd_config__first_order_select =
 8003966:	77a3      	strb	r3, [r4, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer + 33)) & 0xF;
 8003968:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 800396c:	f003 030f 	and.w	r3, r3, #15
	pdata->gph__sd_config__quantifier =
 8003970:	77e3      	strb	r3, [r4, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 8003972:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8003976:	f884 3020 	strb.w	r3, [r4, #32]
		(*(pbuffer + 34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 800397a:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 800397e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
		(*(pbuffer + 35));
	pdata->gph__system__sequence_config =
 8003982:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8003986:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
		(*(pbuffer + 36));
	pdata->gph__gph_id =
		(*(pbuffer + 37)) & 0x1;
 800398a:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 800398e:	f003 0301 	and.w	r3, r3, #1
	pdata->gph__gph_id =
 8003992:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer + 38)) & 0x3;
 8003996:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 800399a:	f003 0303 	and.w	r3, r3, #3
	pdata->system__interrupt_set =
 800399e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer + 39)) & 0x1F;
 80039a2:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
 80039a6:	f003 031f 	and.w	r3, r3, #31
	pdata->interrupt_manager__enables =
 80039aa:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer + 40)) & 0x1F;
 80039ae:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 80039b2:	f003 031f 	and.w	r3, r3, #31
	pdata->interrupt_manager__clear =
 80039b6:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer + 41)) & 0x1F;
 80039ba:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 80039be:	f003 031f 	and.w	r3, r3, #31
	pdata->interrupt_manager__status =
 80039c2:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer + 42)) & 0x1;
 80039c6:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 80039ca:	f003 0301 	and.w	r3, r3, #1
	pdata->mcu_to_host_bank__wr_access_en =
 80039ce:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer + 43)) & 0x1;
 80039d2:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 80039d6:	f003 0301 	and.w	r3, r3, #1
	pdata->power_management__go1_reset_status =
 80039da:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer + 44)) & 0x3;
 80039de:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 80039e2:	f003 0303 	and.w	r3, r3, #3
	pdata->pad_startup_mode__value_ro =
 80039e6:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer + 45)) & 0x3F;
 80039ea:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 80039ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->pad_startup_mode__value_ctrl =
 80039f2:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 46)) & 0x3FFFF;
 80039f6:	f105 012e 	add.w	r1, r5, #46	; 0x2e
 80039fa:	2004      	movs	r0, #4
 80039fc:	f7ff fa8f 	bl	8002f1e <VL53L1_i2c_decode_uint32_t>
 8003a00:	f3c0 0011 	ubfx	r0, r0, #0, #18
	pdata->pll_period_us =
 8003a04:	62e0      	str	r0, [r4, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer + 50));
 8003a06:	f105 0132 	add.w	r1, r5, #50	; 0x32
 8003a0a:	2004      	movs	r0, #4
 8003a0c:	f7ff fa87 	bl	8002f1e <VL53L1_i2c_decode_uint32_t>
	pdata->interrupt_scheduler__data_out =
 8003a10:	6320      	str	r0, [r4, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer + 54)) & 0x1;
 8003a12:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
 8003a16:	f003 0301 	and.w	r3, r3, #1
	pdata->nvm_bist__complete =
 8003a1a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer + 55)) & 0x1;
 8003a1e:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
 8003a22:	f003 0301 	and.w	r3, r3, #1
	pdata->nvm_bist__status =
 8003a26:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 8003a2a:	2000      	movs	r0, #0
 8003a2c:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8003a2e:	f06f 0009 	mvn.w	r0, #9
}
 8003a32:	bd38      	pop	{r3, r4, r5, pc}

08003a34 <VL53L1_i2c_decode_nvm_copy_data>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 8003a34:	2830      	cmp	r0, #48	; 0x30
{
 8003a36:	b538      	push	{r3, r4, r5, lr}
 8003a38:	460d      	mov	r5, r1
 8003a3a:	4614      	mov	r4, r2
	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 8003a3c:	f240 809c 	bls.w	8003b78 <VL53L1_i2c_decode_nvm_copy_data+0x144>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->identification__model_id =
		(*(pbuffer + 0));
 8003a40:	780b      	ldrb	r3, [r1, #0]
	pdata->identification__model_id =
 8003a42:	7013      	strb	r3, [r2, #0]
	pdata->identification__module_type =
 8003a44:	784b      	ldrb	r3, [r1, #1]
 8003a46:	7053      	strb	r3, [r2, #1]
		(*(pbuffer + 1));
	pdata->identification__revision_id =
 8003a48:	788b      	ldrb	r3, [r1, #2]
 8003a4a:	7093      	strb	r3, [r2, #2]
		(*(pbuffer + 2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer + 3));
 8003a4c:	3103      	adds	r1, #3
 8003a4e:	2002      	movs	r0, #2
 8003a50:	f7ff fa3c 	bl	8002ecc <VL53L1_i2c_decode_uint16_t>
	pdata->identification__module_id =
 8003a54:	80a0      	strh	r0, [r4, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer + 5)) & 0x7F;
 8003a56:	796b      	ldrb	r3, [r5, #5]
 8003a58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->ana_config__fast_osc__trim_max =
 8003a5c:	71a3      	strb	r3, [r4, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer + 6)) & 0x7;
 8003a5e:	79ab      	ldrb	r3, [r5, #6]
 8003a60:	f003 0307 	and.w	r3, r3, #7
	pdata->ana_config__fast_osc__freq_set =
 8003a64:	71e3      	strb	r3, [r4, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer + 7)) & 0x7;
 8003a66:	79eb      	ldrb	r3, [r5, #7]
 8003a68:	f003 0307 	and.w	r3, r3, #7
	pdata->ana_config__vcsel_trim =
 8003a6c:	7223      	strb	r3, [r4, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer + 8)) & 0x3F;
 8003a6e:	7a2b      	ldrb	r3, [r5, #8]
 8003a70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->ana_config__vcsel_selion =
 8003a74:	7263      	strb	r3, [r4, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer + 9)) & 0x3F;
 8003a76:	7a6b      	ldrb	r3, [r5, #9]
 8003a78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->ana_config__vcsel_selion_max =
 8003a7c:	72a3      	strb	r3, [r4, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer + 10)) & 0x1;
 8003a7e:	7aab      	ldrb	r3, [r5, #10]
 8003a80:	f003 0301 	and.w	r3, r3, #1
	pdata->protected_laser_safety__lock_bit =
 8003a84:	72e3      	strb	r3, [r4, #11]
	pdata->laser_safety__key =
		(*(pbuffer + 11)) & 0x7F;
 8003a86:	7aeb      	ldrb	r3, [r5, #11]
 8003a88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->laser_safety__key =
 8003a8c:	7323      	strb	r3, [r4, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer + 12)) & 0x1;
 8003a8e:	7b2b      	ldrb	r3, [r5, #12]
 8003a90:	f003 0301 	and.w	r3, r3, #1
	pdata->laser_safety__key_ro =
 8003a94:	7363      	strb	r3, [r4, #13]
	pdata->laser_safety__clip =
		(*(pbuffer + 13)) & 0x3F;
 8003a96:	7b6b      	ldrb	r3, [r5, #13]
 8003a98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->laser_safety__clip =
 8003a9c:	73a3      	strb	r3, [r4, #14]
	pdata->laser_safety__mult =
		(*(pbuffer + 14)) & 0x3F;
 8003a9e:	7bab      	ldrb	r3, [r5, #14]
 8003aa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->laser_safety__mult =
 8003aa4:	73e3      	strb	r3, [r4, #15]
	pdata->global_config__spad_enables_rtn_0 =
 8003aa6:	7beb      	ldrb	r3, [r5, #15]
 8003aa8:	7423      	strb	r3, [r4, #16]
		(*(pbuffer + 15));
	pdata->global_config__spad_enables_rtn_1 =
 8003aaa:	7c2b      	ldrb	r3, [r5, #16]
 8003aac:	7463      	strb	r3, [r4, #17]
		(*(pbuffer + 16));
	pdata->global_config__spad_enables_rtn_2 =
 8003aae:	7c6b      	ldrb	r3, [r5, #17]
 8003ab0:	74a3      	strb	r3, [r4, #18]
		(*(pbuffer + 17));
	pdata->global_config__spad_enables_rtn_3 =
 8003ab2:	7cab      	ldrb	r3, [r5, #18]
 8003ab4:	74e3      	strb	r3, [r4, #19]
		(*(pbuffer + 18));
	pdata->global_config__spad_enables_rtn_4 =
 8003ab6:	7ceb      	ldrb	r3, [r5, #19]
 8003ab8:	7523      	strb	r3, [r4, #20]
		(*(pbuffer + 19));
	pdata->global_config__spad_enables_rtn_5 =
 8003aba:	7d2b      	ldrb	r3, [r5, #20]
 8003abc:	7563      	strb	r3, [r4, #21]
		(*(pbuffer + 20));
	pdata->global_config__spad_enables_rtn_6 =
 8003abe:	7d6b      	ldrb	r3, [r5, #21]
 8003ac0:	75a3      	strb	r3, [r4, #22]
		(*(pbuffer + 21));
	pdata->global_config__spad_enables_rtn_7 =
 8003ac2:	7dab      	ldrb	r3, [r5, #22]
 8003ac4:	75e3      	strb	r3, [r4, #23]
		(*(pbuffer + 22));
	pdata->global_config__spad_enables_rtn_8 =
 8003ac6:	7deb      	ldrb	r3, [r5, #23]
 8003ac8:	7623      	strb	r3, [r4, #24]
		(*(pbuffer + 23));
	pdata->global_config__spad_enables_rtn_9 =
 8003aca:	7e2b      	ldrb	r3, [r5, #24]
 8003acc:	7663      	strb	r3, [r4, #25]
		(*(pbuffer + 24));
	pdata->global_config__spad_enables_rtn_10 =
 8003ace:	7e6b      	ldrb	r3, [r5, #25]
 8003ad0:	76a3      	strb	r3, [r4, #26]
		(*(pbuffer + 25));
	pdata->global_config__spad_enables_rtn_11 =
 8003ad2:	7eab      	ldrb	r3, [r5, #26]
 8003ad4:	76e3      	strb	r3, [r4, #27]
		(*(pbuffer + 26));
	pdata->global_config__spad_enables_rtn_12 =
 8003ad6:	7eeb      	ldrb	r3, [r5, #27]
 8003ad8:	7723      	strb	r3, [r4, #28]
		(*(pbuffer + 27));
	pdata->global_config__spad_enables_rtn_13 =
 8003ada:	7f2b      	ldrb	r3, [r5, #28]
 8003adc:	7763      	strb	r3, [r4, #29]
		(*(pbuffer + 28));
	pdata->global_config__spad_enables_rtn_14 =
 8003ade:	7f6b      	ldrb	r3, [r5, #29]
 8003ae0:	77a3      	strb	r3, [r4, #30]
		(*(pbuffer + 29));
	pdata->global_config__spad_enables_rtn_15 =
 8003ae2:	7fab      	ldrb	r3, [r5, #30]
 8003ae4:	77e3      	strb	r3, [r4, #31]
		(*(pbuffer + 30));
	pdata->global_config__spad_enables_rtn_16 =
 8003ae6:	7feb      	ldrb	r3, [r5, #31]
 8003ae8:	f884 3020 	strb.w	r3, [r4, #32]
		(*(pbuffer + 31));
	pdata->global_config__spad_enables_rtn_17 =
 8003aec:	f895 3020 	ldrb.w	r3, [r5, #32]
 8003af0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
		(*(pbuffer + 32));
	pdata->global_config__spad_enables_rtn_18 =
 8003af4:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8003af8:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
		(*(pbuffer + 33));
	pdata->global_config__spad_enables_rtn_19 =
 8003afc:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8003b00:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
		(*(pbuffer + 34));
	pdata->global_config__spad_enables_rtn_20 =
 8003b04:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 8003b08:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
		(*(pbuffer + 35));
	pdata->global_config__spad_enables_rtn_21 =
 8003b0c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8003b10:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		(*(pbuffer + 36));
	pdata->global_config__spad_enables_rtn_22 =
 8003b14:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 8003b18:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
		(*(pbuffer + 37));
	pdata->global_config__spad_enables_rtn_23 =
 8003b1c:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 8003b20:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
		(*(pbuffer + 38));
	pdata->global_config__spad_enables_rtn_24 =
 8003b24:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
 8003b28:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		(*(pbuffer + 39));
	pdata->global_config__spad_enables_rtn_25 =
 8003b2c:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8003b30:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
		(*(pbuffer + 40));
	pdata->global_config__spad_enables_rtn_26 =
 8003b34:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 8003b38:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
		(*(pbuffer + 41));
	pdata->global_config__spad_enables_rtn_27 =
 8003b3c:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 8003b40:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
		(*(pbuffer + 42));
	pdata->global_config__spad_enables_rtn_28 =
 8003b44:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 8003b48:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		(*(pbuffer + 43));
	pdata->global_config__spad_enables_rtn_29 =
 8003b4c:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8003b50:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
		(*(pbuffer + 44));
	pdata->global_config__spad_enables_rtn_30 =
 8003b54:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 8003b58:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
		(*(pbuffer + 45));
	pdata->global_config__spad_enables_rtn_31 =
 8003b5c:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
 8003b60:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		(*(pbuffer + 46));
	pdata->roi_config__mode_roi_centre_spad =
 8003b64:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8003b68:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		(*(pbuffer + 47));
	pdata->roi_config__mode_roi_xy_size =
 8003b6c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8003b70:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
		(*(pbuffer + 48));

	LOG_FUNCTION_END(status);

	return status;
 8003b74:	2000      	movs	r0, #0
 8003b76:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8003b78:	f06f 0009 	mvn.w	r0, #9
}
 8003b7c:	bd38      	pop	{r3, r4, r5, pc}

08003b7e <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8003b7e:	b510      	push	{r4, lr}
 8003b80:	b08e      	sub	sp, #56	; 0x38
 8003b82:	460c      	mov	r4, r1
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status = VL53L1_ReadMulti(
 8003b84:	2331      	movs	r3, #49	; 0x31
 8003b86:	aa01      	add	r2, sp, #4
 8003b88:	f240 110f 	movw	r1, #271	; 0x10f
 8003b8c:	f004 fa6e 	bl	800806c <VL53L1_ReadMulti>
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8003b90:	b920      	cbnz	r0, 8003b9c <VL53L1_get_nvm_copy_data+0x1e>
		status = VL53L1_i2c_decode_nvm_copy_data(
 8003b92:	4622      	mov	r2, r4
 8003b94:	a901      	add	r1, sp, #4
 8003b96:	2031      	movs	r0, #49	; 0x31
 8003b98:	f7ff ff4c 	bl	8003a34 <VL53L1_i2c_decode_nvm_copy_data>
			pdata);

	LOG_FUNCTION_END(status);

	return status;
}
 8003b9c:	b00e      	add	sp, #56	; 0x38
 8003b9e:	bd10      	pop	{r4, pc}

08003ba0 <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV Dev,
	uint32_t timeout_ms)
{
 8003ba0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003ba2:	460e      	mov	r6, r1
	 * it copies the NVM data into the G02 host register banks
	 * The host must wait the required time to allow the copy
	 * to complete before attempting to read the firmware status
	 */

	status = VL53L1_WaitUs(
 8003ba4:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
{
 8003ba8:	4605      	mov	r5, r0
	status = VL53L1_WaitUs(
 8003baa:	f004 fabf 	bl	800812c <VL53L1_WaitUs>
		Dev,
		VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 8003bae:	4604      	mov	r4, r0
 8003bb0:	b968      	cbnz	r0, 8003bce <VL53L1_poll_for_boot_completion+0x2e>
		status =
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	9301      	str	r3, [sp, #4]
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	22e5      	movs	r2, #229	; 0xe5
 8003bba:	4631      	mov	r1, r6
 8003bbc:	4628      	mov	r0, r5
 8003bbe:	f004 fabf 	bl	8008140 <VL53L1_WaitValueMaskEx>
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 8003bc2:	4604      	mov	r4, r0
 8003bc4:	b918      	cbnz	r0, 8003bce <VL53L1_poll_for_boot_completion+0x2e>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 8003bc6:	2103      	movs	r1, #3
 8003bc8:	4628      	mov	r0, r5
 8003bca:	f7ff f863 	bl	8002c94 <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
}
 8003bce:	4620      	mov	r0, r4
 8003bd0:	b002      	add	sp, #8
 8003bd2:	bd70      	pop	{r4, r5, r6, pc}

08003bd4 <VL53L1_poll_for_range_completion>:


VL53L1_Error VL53L1_poll_for_range_completion(
	VL53L1_DEV Dev,
	uint32_t timeout_ms)
{
 8003bd4:	b507      	push	{r0, r1, r2, lr}

	gpio__mux_active_high_hv =
		pdev->stat_cfg.gpio_hv_mux__ctrl &
		VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8003bd6:	f890 3170 	ldrb.w	r3, [r0, #368]	; 0x170
		interrupt_ready = 0x01;
	else
		interrupt_ready = 0x00;

	status =
 8003bda:	2201      	movs	r2, #1
	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8003bdc:	f083 0310 	eor.w	r3, r3, #16
	status =
 8003be0:	9201      	str	r2, [sp, #4]
 8003be2:	9200      	str	r2, [sp, #0]
 8003be4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003be8:	2231      	movs	r2, #49	; 0x31
 8003bea:	f004 faa9 	bl	8008140 <VL53L1_WaitValueMaskEx>
			VL53L1_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
}
 8003bee:	b003      	add	sp, #12
 8003bf0:	f85d fb04 	ldr.w	pc, [sp], #4

08003bf4 <_ExpanderRd>:
 * @param data       read data buffer
 * @param n_data     number of byte to read
 * @return           of if ok else i2c I/O operation status
 */
static int _ExpanderRd(int I2cExpAddr, int index, uint8_t *data, int n_data)
{
 8003bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	4617      	mov	r7, r2
	int status;
	uint8_t RegAddr;
	RegAddr = index;
 8003bfa:	aa04      	add	r2, sp, #16
	XNUCLEO53L1A1_GetI2cBus();
	do {
		status = HAL_I2C_Master_Transmit(&XNUCLEO53L1A1_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 8003bfc:	b285      	uxth	r5, r0
 8003bfe:	2464      	movs	r4, #100	; 0x64
	RegAddr = index;
 8003c00:	f802 1d01 	strb.w	r1, [r2, #-1]!
{
 8003c04:	461e      	mov	r6, r3
		status = HAL_I2C_Master_Transmit(&XNUCLEO53L1A1_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 8003c06:	9400      	str	r4, [sp, #0]
 8003c08:	2301      	movs	r3, #1
 8003c0a:	4629      	mov	r1, r5
 8003c0c:	4806      	ldr	r0, [pc, #24]	; (8003c28 <_ExpanderRd+0x34>)
 8003c0e:	f001 fa79 	bl	8005104 <HAL_I2C_Master_Transmit>
		if (status)
 8003c12:	b938      	cbnz	r0, 8003c24 <_ExpanderRd+0x30>
			break;
		status = HAL_I2C_Master_Receive(&XNUCLEO53L1A1_hi2c, I2cExpAddr, data, n_data, n_data * 100);
 8003c14:	4374      	muls	r4, r6
 8003c16:	9400      	str	r4, [sp, #0]
 8003c18:	b2b3      	uxth	r3, r6
 8003c1a:	463a      	mov	r2, r7
 8003c1c:	4629      	mov	r1, r5
 8003c1e:	4802      	ldr	r0, [pc, #8]	; (8003c28 <_ExpanderRd+0x34>)
 8003c20:	f001 fb46 	bl	80052b0 <HAL_I2C_Master_Receive>
	} while (0);
	XNUCLEO53L1A1_PutI2cBus();
	return status;
}
 8003c24:	b005      	add	sp, #20
 8003c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c28:	20000448 	.word	0x20000448

08003c2c <_ExpanderWR>:
 * @param data       data buffer
 * @param n_data     number of byte to write
 * @return           of if ok else i2c I/O operation status
 */
static int _ExpanderWR(int I2cExpAddr, int index, uint8_t *data, int n_data)
{
 8003c2c:	b570      	push	{r4, r5, r6, lr}
 8003c2e:	b086      	sub	sp, #24
	int status;
	uint8_t RegAddr[0x10];
	RegAddr[0] = index;
 8003c30:	ad06      	add	r5, sp, #24
{
 8003c32:	4606      	mov	r6, r0
 8003c34:	4610      	mov	r0, r2
	RegAddr[0] = index;
 8003c36:	f805 1d10 	strb.w	r1, [r5, #-16]!
{
 8003c3a:	461c      	mov	r4, r3
	memcpy(RegAddr + 1, data, n_data);
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	4601      	mov	r1, r0
 8003c40:	f10d 0009 	add.w	r0, sp, #9
 8003c44:	f004 fc8a 	bl	800855c <memcpy>
	XNUCLEO53L1A1_GetI2cBus();
	status = HAL_I2C_Master_Transmit(&XNUCLEO53L1A1_hi2c, I2cExpAddr, RegAddr, n_data + 1, 100);
 8003c48:	1c63      	adds	r3, r4, #1
 8003c4a:	2264      	movs	r2, #100	; 0x64
 8003c4c:	9200      	str	r2, [sp, #0]
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	462a      	mov	r2, r5
 8003c52:	b2b1      	uxth	r1, r6
 8003c54:	4802      	ldr	r0, [pc, #8]	; (8003c60 <_ExpanderWR+0x34>)
 8003c56:	f001 fa55 	bl	8005104 <HAL_I2C_Master_Transmit>
	XNUCLEO53L1A1_PutI2cBus();
	return status;
}
 8003c5a:	b006      	add	sp, #24
 8003c5c:	bd70      	pop	{r4, r5, r6, pc}
 8003c5e:	bf00      	nop
 8003c60:	20000448 	.word	0x20000448

08003c64 <_ExpandersSetAllIO>:
{
 8003c64:	b510      	push	{r4, lr}
	status = _ExpanderWR(I2cExpAddr0, GPSR, &CurIOVal.bytes[0], 2);
 8003c66:	2302      	movs	r3, #2
 8003c68:	4a07      	ldr	r2, [pc, #28]	; (8003c88 <_ExpandersSetAllIO+0x24>)
 8003c6a:	2112      	movs	r1, #18
 8003c6c:	2086      	movs	r0, #134	; 0x86
 8003c6e:	f7ff ffdd 	bl	8003c2c <_ExpanderWR>
	if (status) {
 8003c72:	b938      	cbnz	r0, 8003c84 <_ExpandersSetAllIO+0x20>
	status = _ExpanderWR(I2cExpAddr1, GPSR, &CurIOVal.bytes[2], 2);
 8003c74:	2302      	movs	r3, #2
 8003c76:	4a05      	ldr	r2, [pc, #20]	; (8003c8c <_ExpandersSetAllIO+0x28>)
 8003c78:	2112      	movs	r1, #18
 8003c7a:	2084      	movs	r0, #132	; 0x84
}
 8003c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	status = _ExpanderWR(I2cExpAddr1, GPSR, &CurIOVal.bytes[2], 2);
 8003c80:	f7ff bfd4 	b.w	8003c2c <_ExpanderWR>
}
 8003c84:	bd10      	pop	{r4, pc}
 8003c86:	bf00      	nop
 8003c88:	20000390 	.word	0x20000390
 8003c8c:	20000392 	.word	0x20000392

08003c90 <XNUCLEO53L1A1_I2C1Configure>:
{
 8003c90:	b570      	push	{r4, r5, r6, lr}
 8003c92:	b088      	sub	sp, #32
	__GPIOB_CLK_ENABLE();
 8003c94:	2300      	movs	r3, #0
 8003c96:	9301      	str	r3, [sp, #4]
 8003c98:	4b58      	ldr	r3, [pc, #352]	; (8003dfc <XNUCLEO53L1A1_I2C1Configure+0x16c>)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8003c9a:	4859      	ldr	r0, [pc, #356]	; (8003e00 <XNUCLEO53L1A1_I2C1Configure+0x170>)
	__GPIOB_CLK_ENABLE();
 8003c9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8003c9e:	4d58      	ldr	r5, [pc, #352]	; (8003e00 <XNUCLEO53L1A1_I2C1Configure+0x170>)
	__GPIOB_CLK_ENABLE();
 8003ca0:	f042 0202 	orr.w	r2, r2, #2
 8003ca4:	631a      	str	r2, [r3, #48]	; 0x30
 8003ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	9301      	str	r3, [sp, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f44f 7180 	mov.w	r1, #256	; 0x100
	__GPIOB_CLK_ENABLE();
 8003cb4:	9b01      	ldr	r3, [sp, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8003cb6:	f001 f8b5 	bl	8004e24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003cc0:	484f      	ldr	r0, [pc, #316]	; (8003e00 <XNUCLEO53L1A1_I2C1Configure+0x170>)
 8003cc2:	f001 f8af 	bl	8004e24 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8003cc6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003cca:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003ccc:	2311      	movs	r3, #17
 8003cce:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cd0:	a903      	add	r1, sp, #12
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cd2:	2301      	movs	r3, #1
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cd4:	484a      	ldr	r0, [pc, #296]	; (8003e00 <XNUCLEO53L1A1_I2C1Configure+0x170>)
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cd6:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cd8:	f000 ffc8 	bl	8004c6c <HAL_GPIO_Init>
 8003cdc:	2408      	movs	r4, #8
 8003cde:	260a      	movs	r6, #10
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ce6:	4628      	mov	r0, r5
 8003ce8:	f001 f89c 	bl	8004e24 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8003cec:	2001      	movs	r0, #1
 8003cee:	f000 fbc1 	bl	8004474 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003cf8:	4628      	mov	r0, r5
 8003cfa:	f001 f893 	bl	8004e24 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8003cfe:	2001      	movs	r0, #1
 8003d00:	f000 fbb8 	bl	8004474 <HAL_Delay>
		for (i = 0; i < 10; i++) {
 8003d04:	3e01      	subs	r6, #1
 8003d06:	d1eb      	bne.n	8003ce0 <XNUCLEO53L1A1_I2C1Configure+0x50>
	} while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0 && nRetry++ < 7);
 8003d08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d0c:	4628      	mov	r0, r5
 8003d0e:	f001 f883 	bl	8004e18 <HAL_GPIO_ReadPin>
 8003d12:	b908      	cbnz	r0, 8003d18 <XNUCLEO53L1A1_I2C1Configure+0x88>
 8003d14:	3c01      	subs	r4, #1
 8003d16:	d1e2      	bne.n	8003cde <XNUCLEO53L1A1_I2C1Configure+0x4e>
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0) {
 8003d18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d1c:	4838      	ldr	r0, [pc, #224]	; (8003e00 <XNUCLEO53L1A1_I2C1Configure+0x170>)
 8003d1e:	f001 f87b 	bl	8004e18 <HAL_GPIO_ReadPin>
 8003d22:	4b36      	ldr	r3, [pc, #216]	; (8003dfc <XNUCLEO53L1A1_I2C1Configure+0x16c>)
 8003d24:	2800      	cmp	r0, #0
 8003d26:	d135      	bne.n	8003d94 <XNUCLEO53L1A1_I2C1Configure+0x104>
		__GPIOA_CLK_ENABLE();
 8003d28:	9002      	str	r0, [sp, #8]
 8003d2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8003d2c:	4c35      	ldr	r4, [pc, #212]	; (8003e04 <XNUCLEO53L1A1_I2C1Configure+0x174>)
		__GPIOA_CLK_ENABLE();
 8003d2e:	f042 0201 	orr.w	r2, r2, #1
 8003d32:	631a      	str	r2, [r3, #48]	; 0x30
 8003d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d36:	9005      	str	r0, [sp, #20]
		__GPIOA_CLK_ENABLE();
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	9302      	str	r3, [sp, #8]
 8003d3e:	9b02      	ldr	r3, [sp, #8]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d40:	4830      	ldr	r0, [pc, #192]	; (8003e04 <XNUCLEO53L1A1_I2C1Configure+0x174>)
		GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003d42:	2320      	movs	r3, #32
 8003d44:	9303      	str	r3, [sp, #12]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d46:	a903      	add	r1, sp, #12
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d4c:	f000 ff8e 	bl	8004c6c <HAL_GPIO_Init>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8003d50:	2201      	movs	r2, #1
 8003d52:	2120      	movs	r1, #32
 8003d54:	4620      	mov	r0, r4
 8003d56:	f001 f865 	bl	8004e24 <HAL_GPIO_WritePin>
			HAL_Delay(33);
 8003d5a:	2021      	movs	r0, #33	; 0x21
 8003d5c:	f000 fb8a 	bl	8004474 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8003d60:	2200      	movs	r2, #0
 8003d62:	2120      	movs	r1, #32
 8003d64:	4620      	mov	r0, r4
 8003d66:	f001 f85d 	bl	8004e24 <HAL_GPIO_WritePin>
			HAL_Delay(33);
 8003d6a:	2021      	movs	r0, #33	; 0x21
 8003d6c:	f000 fb82 	bl	8004474 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8003d70:	2201      	movs	r2, #1
 8003d72:	2120      	movs	r1, #32
 8003d74:	4620      	mov	r0, r4
 8003d76:	f001 f855 	bl	8004e24 <HAL_GPIO_WritePin>
			HAL_Delay(33);
 8003d7a:	2021      	movs	r0, #33	; 0x21
 8003d7c:	f000 fb7a 	bl	8004474 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8003d80:	4620      	mov	r0, r4
 8003d82:	2200      	movs	r2, #0
 8003d84:	2120      	movs	r1, #32
 8003d86:	f001 f84d 	bl	8004e24 <HAL_GPIO_WritePin>
			HAL_Delay(33 * 20);
 8003d8a:	f44f 7025 	mov.w	r0, #660	; 0x294
 8003d8e:	f000 fb71 	bl	8004474 <HAL_Delay>
 8003d92:	e7dd      	b.n	8003d50 <XNUCLEO53L1A1_I2C1Configure+0xc0>
	__GPIOB_CLK_ENABLE();
 8003d94:	2400      	movs	r4, #0
 8003d96:	9400      	str	r4, [sp, #0]
 8003d98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d9a:	4819      	ldr	r0, [pc, #100]	; (8003e00 <XNUCLEO53L1A1_I2C1Configure+0x170>)
	__GPIOB_CLK_ENABLE();
 8003d9c:	f042 0202 	orr.w	r2, r2, #2
 8003da0:	631a      	str	r2, [r3, #48]	; 0x30
 8003da2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003da4:	f002 0202 	and.w	r2, r2, #2
 8003da8:	9200      	str	r2, [sp, #0]
 8003daa:	9a00      	ldr	r2, [sp, #0]
	__I2C1_CLK_ENABLE();
 8003dac:	9402      	str	r4, [sp, #8]
 8003dae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003db0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003db4:	641a      	str	r2, [r3, #64]	; 0x40
 8003db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db8:	9405      	str	r4, [sp, #20]
	__I2C1_CLK_ENABLE();
 8003dba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dbe:	9302      	str	r3, [sp, #8]
 8003dc0:	9b02      	ldr	r3, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8003dc2:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8003dc4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003dc8:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003dca:	2312      	movs	r3, #18
 8003dcc:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dce:	a903      	add	r1, sp, #12
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003dd0:	2304      	movs	r3, #4
 8003dd2:	9307      	str	r3, [sp, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dd4:	f000 ff4a 	bl	8004c6c <HAL_GPIO_Init>
	XNUCLEO53L1A1_hi2c.Instance = I2C1;
 8003dd8:	480b      	ldr	r0, [pc, #44]	; (8003e08 <XNUCLEO53L1A1_I2C1Configure+0x178>)
	XNUCLEO53L1A1_hi2c.Init.ClockSpeed = 400000;
 8003dda:	4a0c      	ldr	r2, [pc, #48]	; (8003e0c <XNUCLEO53L1A1_I2C1Configure+0x17c>)
 8003ddc:	4b0c      	ldr	r3, [pc, #48]	; (8003e10 <XNUCLEO53L1A1_I2C1Configure+0x180>)
	XNUCLEO53L1A1_hi2c.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003dde:	6084      	str	r4, [r0, #8]
	XNUCLEO53L1A1_hi2c.Init.ClockSpeed = 400000;
 8003de0:	e880 000c 	stmia.w	r0, {r2, r3}
	XNUCLEO53L1A1_hi2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003de4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	XNUCLEO53L1A1_hi2c.Init.OwnAddress1 = 0;
 8003de8:	60c4      	str	r4, [r0, #12]
	XNUCLEO53L1A1_hi2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003dea:	6103      	str	r3, [r0, #16]
	XNUCLEO53L1A1_hi2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8003dec:	6144      	str	r4, [r0, #20]
	XNUCLEO53L1A1_hi2c.Init.OwnAddress2 = 0;
 8003dee:	6184      	str	r4, [r0, #24]
	XNUCLEO53L1A1_hi2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8003df0:	61c4      	str	r4, [r0, #28]
	XNUCLEO53L1A1_hi2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 8003df2:	6204      	str	r4, [r0, #32]
	status = HAL_I2C_Init(&XNUCLEO53L1A1_hi2c);
 8003df4:	f001 f918 	bl	8005028 <HAL_I2C_Init>
}
 8003df8:	b008      	add	sp, #32
 8003dfa:	bd70      	pop	{r4, r5, r6, pc}
 8003dfc:	40023800 	.word	0x40023800
 8003e00:	40020400 	.word	0x40020400
 8003e04:	40020000 	.word	0x40020000
 8003e08:	20000448 	.word	0x20000448
 8003e0c:	40005400 	.word	0x40005400
 8003e10:	00061a80 	.word	0x00061a80

08003e14 <XNUCLEO53L1A1_Init>:
{
 8003e14:	b573      	push	{r0, r1, r4, r5, r6, lr}
	XNUCLEO53L1A1_I2C1Configure();
 8003e16:	f7ff ff3b 	bl	8003c90 <XNUCLEO53L1A1_I2C1Configure>
	status = _ExpanderRd(I2cExpAddr0, 0, ExpanderData, 2);
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	aa01      	add	r2, sp, #4
 8003e1e:	2100      	movs	r1, #0
 8003e20:	2086      	movs	r0, #134	; 0x86
 8003e22:	f7ff fee7 	bl	8003bf4 <_ExpanderRd>
	if (status != 0 || ExpanderData[0] != 0x00 || ExpanderData[1] != 0x16) {
 8003e26:	4604      	mov	r4, r0
 8003e28:	bbb0      	cbnz	r0, 8003e98 <XNUCLEO53L1A1_Init+0x84>
 8003e2a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003e2e:	bb9b      	cbnz	r3, 8003e98 <XNUCLEO53L1A1_Init+0x84>
 8003e30:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003e34:	2b16      	cmp	r3, #22
 8003e36:	d12f      	bne.n	8003e98 <XNUCLEO53L1A1_Init+0x84>
	status = _ExpanderRd(I2cExpAddr1, 0, ExpanderData, 2);
 8003e38:	4601      	mov	r1, r0
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	aa01      	add	r2, sp, #4
 8003e3e:	2084      	movs	r0, #132	; 0x84
 8003e40:	f7ff fed8 	bl	8003bf4 <_ExpanderRd>
	if (status != 0 || ExpanderData[0] != 0x00 || ExpanderData[1] != 0x16) {
 8003e44:	bb38      	cbnz	r0, 8003e96 <XNUCLEO53L1A1_Init+0x82>
 8003e46:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003e4a:	bb2b      	cbnz	r3, 8003e98 <XNUCLEO53L1A1_Init+0x84>
 8003e4c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003e50:	2b16      	cmp	r3, #22
 8003e52:	d121      	bne.n	8003e98 <XNUCLEO53L1A1_Init+0x84>
	CurIOVal.u32 = 0x0;
 8003e54:	4e12      	ldr	r6, [pc, #72]	; (8003ea0 <XNUCLEO53L1A1_Init+0x8c>)
	ExpanderData[0] = 0xFF;
 8003e56:	25ff      	movs	r5, #255	; 0xff
	status = _ExpanderWR(I2cExpAddr0, GPDR, ExpanderData, 2);
 8003e58:	2302      	movs	r3, #2
 8003e5a:	aa01      	add	r2, sp, #4
 8003e5c:	2114      	movs	r1, #20
 8003e5e:	2086      	movs	r0, #134	; 0x86
	CurIOVal.u32 = 0x0;
 8003e60:	6034      	str	r4, [r6, #0]
	ExpanderData[0] = 0xFF;
 8003e62:	f88d 5004 	strb.w	r5, [sp, #4]
	ExpanderData[1] = 0xFF;
 8003e66:	f88d 5005 	strb.w	r5, [sp, #5]
	status = _ExpanderWR(I2cExpAddr0, GPDR, ExpanderData, 2);
 8003e6a:	f7ff fedf 	bl	8003c2c <_ExpanderWR>
	if (status) {
 8003e6e:	4604      	mov	r4, r0
 8003e70:	b990      	cbnz	r0, 8003e98 <XNUCLEO53L1A1_Init+0x84>
	ExpanderData[1] = 0xBF; // all but bit 14-15 that is pb1 and xhurt
 8003e72:	23bf      	movs	r3, #191	; 0xbf
 8003e74:	f88d 3005 	strb.w	r3, [sp, #5]
	status = _ExpanderWR(I2cExpAddr1, GPDR, ExpanderData, 2);
 8003e78:	aa01      	add	r2, sp, #4
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	2114      	movs	r1, #20
 8003e7e:	2084      	movs	r0, #132	; 0x84
	ExpanderData[0] = 0xFF;
 8003e80:	f88d 5004 	strb.w	r5, [sp, #4]
	status = _ExpanderWR(I2cExpAddr1, GPDR, ExpanderData, 2);
 8003e84:	f7ff fed2 	bl	8003c2c <_ExpanderWR>
	if (status) {
 8003e88:	4604      	mov	r4, r0
 8003e8a:	b928      	cbnz	r0, 8003e98 <XNUCLEO53L1A1_Init+0x84>
	CurIOVal.u32 = 0x7F + (0x7F << 7) + (0x7F << 16) + (0x7F << (16 + 7));
 8003e8c:	f06f 23c0 	mvn.w	r3, #3221274624	; 0xc000c000
 8003e90:	6033      	str	r3, [r6, #0]
	status = _ExpandersSetAllIO();
 8003e92:	f7ff fee7 	bl	8003c64 <_ExpandersSetAllIO>
 8003e96:	4604      	mov	r4, r0
}
 8003e98:	4620      	mov	r0, r4
 8003e9a:	b002      	add	sp, #8
 8003e9c:	bd70      	pop	{r4, r5, r6, pc}
 8003e9e:	bf00      	nop
 8003ea0:	20000390 	.word	0x20000390

08003ea4 <XNUCLEO53L1A1_ResetId>:
	switch (DevNo) {
 8003ea4:	2802      	cmp	r0, #2
 8003ea6:	d026      	beq.n	8003ef6 <XNUCLEO53L1A1_ResetId+0x52>
 8003ea8:	dc0e      	bgt.n	8003ec8 <XNUCLEO53L1A1_ResetId+0x24>
 8003eaa:	b1b0      	cbz	r0, 8003eda <XNUCLEO53L1A1_ResetId+0x36>
 8003eac:	2801      	cmp	r0, #1
 8003eae:	d12b      	bne.n	8003f08 <XNUCLEO53L1A1_ResetId+0x64>
		CurIOVal.bytes[3] &= ~0x80; /* bit 15 expender 1  => byte #3 */
 8003eb0:	4a17      	ldr	r2, [pc, #92]	; (8003f10 <XNUCLEO53L1A1_ResetId+0x6c>)
 8003eb2:	78d3      	ldrb	r3, [r2, #3]
 8003eb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		if (state)
 8003eb8:	b961      	cbnz	r1, 8003ed4 <XNUCLEO53L1A1_ResetId+0x30>
			CurIOVal.bytes[3] |= 0x80; /* bit 15 expender 1  => byte #3 */
 8003eba:	70d3      	strb	r3, [r2, #3]
		status = _ExpanderWR(I2cExpAddr1, GPSR + 1, &CurIOVal.bytes[3], 1);
 8003ebc:	4a15      	ldr	r2, [pc, #84]	; (8003f14 <XNUCLEO53L1A1_ResetId+0x70>)
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	2113      	movs	r1, #19
 8003ec2:	2084      	movs	r0, #132	; 0x84
		status = _ExpanderWR(I2cExpAddr0, GPSR + 1, &CurIOVal.bytes[1], 1);
 8003ec4:	f7ff beb2 	b.w	8003c2c <_ExpanderWR>
	switch (DevNo) {
 8003ec8:	286c      	cmp	r0, #108	; 0x6c
 8003eca:	d006      	beq.n	8003eda <XNUCLEO53L1A1_ResetId+0x36>
 8003ecc:	2872      	cmp	r0, #114	; 0x72
 8003ece:	d012      	beq.n	8003ef6 <XNUCLEO53L1A1_ResetId+0x52>
 8003ed0:	2863      	cmp	r0, #99	; 0x63
 8003ed2:	e7ec      	b.n	8003eae <XNUCLEO53L1A1_ResetId+0xa>
			CurIOVal.bytes[3] |= 0x80; /* bit 15 expender 1  => byte #3 */
 8003ed4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ed8:	e7ef      	b.n	8003eba <XNUCLEO53L1A1_ResetId+0x16>
		CurIOVal.bytes[1] &= ~0x40; /* bit 14 expender 0 => byte #1*/
 8003eda:	4a0d      	ldr	r2, [pc, #52]	; (8003f10 <XNUCLEO53L1A1_ResetId+0x6c>)
 8003edc:	7853      	ldrb	r3, [r2, #1]
 8003ede:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
		if (state)
 8003ee2:	b929      	cbnz	r1, 8003ef0 <XNUCLEO53L1A1_ResetId+0x4c>
			CurIOVal.bytes[1] |= 0x80; /* bit 15 expender 0 => byte #1*/
 8003ee4:	7053      	strb	r3, [r2, #1]
		status = _ExpanderWR(I2cExpAddr0, GPSR + 1, &CurIOVal.bytes[1], 1);
 8003ee6:	2113      	movs	r1, #19
 8003ee8:	2301      	movs	r3, #1
 8003eea:	4a0b      	ldr	r2, [pc, #44]	; (8003f18 <XNUCLEO53L1A1_ResetId+0x74>)
 8003eec:	2086      	movs	r0, #134	; 0x86
 8003eee:	e7e9      	b.n	8003ec4 <XNUCLEO53L1A1_ResetId+0x20>
			CurIOVal.bytes[1] |= 0x40; /* bit 14 expender 0 => byte #1*/
 8003ef0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ef4:	e7f6      	b.n	8003ee4 <XNUCLEO53L1A1_ResetId+0x40>
		CurIOVal.bytes[1] &= ~0x80; /* bit 15 expender 0  => byte #1 */
 8003ef6:	4a06      	ldr	r2, [pc, #24]	; (8003f10 <XNUCLEO53L1A1_ResetId+0x6c>)
 8003ef8:	7853      	ldrb	r3, [r2, #1]
 8003efa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		if (state)
 8003efe:	2900      	cmp	r1, #0
 8003f00:	d0f0      	beq.n	8003ee4 <XNUCLEO53L1A1_ResetId+0x40>
			CurIOVal.bytes[1] |= 0x80; /* bit 15 expender 0 => byte #1*/
 8003f02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f06:	e7ed      	b.n	8003ee4 <XNUCLEO53L1A1_ResetId+0x40>
}
 8003f08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	20000390 	.word	0x20000390
 8003f14:	20000393 	.word	0x20000393
 8003f18:	20000391 	.word	0x20000391

08003f1c <L6206_Board_DisableBridge>:
* @brief Disable the power bridges (leave the output bridges HiZ)
* @param[in]  bridgeId (from 0 for bridge A to 1 for bridge B)
* @retval None
**********************************************************/
void L6206_Board_DisableBridge(uint8_t bridgeId)
{
 8003f1c:	b570      	push	{r4, r5, r6, lr}
	if (bridgeId == 0) {
		gpioPin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN;
		gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT;
	}else  {
		gpioPin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
		gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT;
 8003f1e:	4b10      	ldr	r3, [pc, #64]	; (8003f60 <L6206_Board_DisableBridge+0x44>)
 8003f20:	4c10      	ldr	r4, [pc, #64]	; (8003f64 <L6206_Board_DisableBridge+0x48>)
	if (bridgeId == 0) {
 8003f22:	2800      	cmp	r0, #0
{
 8003f24:	b086      	sub	sp, #24
		gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT;
 8003f26:	bf14      	ite	ne
 8003f28:	461c      	movne	r4, r3
 8003f2a:	f44f 6580 	moveq.w	r5, #1024	; 0x400
	}

	/* Configure the GPIO connected to EN pin as an output */
	GPIO_InitStruct.Pin = gpioPin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f2e:	f04f 0301 	mov.w	r3, #1
		gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT;
 8003f32:	bf18      	it	ne
 8003f34:	2502      	movne	r5, #2
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f36:	2600      	movs	r6, #0
	GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
	HAL_GPIO_Init(gpioPort, &GPIO_InitStruct);
 8003f38:	a901      	add	r1, sp, #4
 8003f3a:	4620      	mov	r0, r4
	GPIO_InitStruct.Pin = gpioPin;
 8003f3c:	9501      	str	r5, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f3e:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f40:	9603      	str	r6, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003f42:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(gpioPort, &GPIO_InitStruct);
 8003f44:	f000 fe92 	bl	8004c6c <HAL_GPIO_Init>
   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
   Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
	__ASM volatile ("cpsid i" : : : "memory");
 8003f48:	b672      	cpsid	i

	__disable_irq();
	HAL_GPIO_WritePin(gpioPort, gpioPin, GPIO_PIN_RESET);
 8003f4a:	4632      	mov	r2, r6
 8003f4c:	4629      	mov	r1, r5
 8003f4e:	4620      	mov	r0, r4
 8003f50:	f000 ff68 	bl	8004e24 <HAL_GPIO_WritePin>
	__HAL_GPIO_EXTI_CLEAR_IT(gpioPin);
 8003f54:	4b04      	ldr	r3, [pc, #16]	; (8003f68 <L6206_Board_DisableBridge+0x4c>)
 8003f56:	615d      	str	r5, [r3, #20]
	__ASM volatile ("cpsie i" : : : "memory");
 8003f58:	b662      	cpsie	i
	__enable_irq();
}
 8003f5a:	b006      	add	sp, #24
 8003f5c:	bd70      	pop	{r4, r5, r6, pc}
 8003f5e:	bf00      	nop
 8003f60:	40020800 	.word	0x40020800
 8003f64:	40020000 	.word	0x40020000
 8003f68:	40013c00 	.word	0x40013c00

08003f6c <L6206_Board_EnableBridge>:
* @param[in]  bridgeId (from 0 for bridge A to 1 for bridge B)
* @param[in]  addDelay if different from 0, a delay is added after bridge activation
* @retval None
**********************************************************/
void L6206_Board_EnableBridge(uint8_t bridgeId, uint8_t addDelay)
{
 8003f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
		gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT;
		flagIrqn = EXTI_FLAG_A_IRQn;
	}else  {
		gpioPin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
		gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT;
		flagIrqn = EXTI_FLAG_B_IRQn;
 8003f6e:	4b15      	ldr	r3, [pc, #84]	; (8003fc4 <L6206_Board_EnableBridge+0x58>)
 8003f70:	4c15      	ldr	r4, [pc, #84]	; (8003fc8 <L6206_Board_EnableBridge+0x5c>)
 8003f72:	2800      	cmp	r0, #0
 8003f74:	bf16      	itet	ne
 8003f76:	461c      	movne	r4, r3
 8003f78:	f44f 6580 	moveq.w	r5, #1024	; 0x400
 8003f7c:	2502      	movne	r5, #2
{
 8003f7e:	460f      	mov	r7, r1
 8003f80:	b087      	sub	sp, #28
	}

	HAL_GPIO_WritePin(gpioPort, gpioPin, GPIO_PIN_SET);
 8003f82:	f04f 0201 	mov.w	r2, #1
 8003f86:	4629      	mov	r1, r5
 8003f88:	4620      	mov	r0, r4
		flagIrqn = EXTI_FLAG_B_IRQn;
 8003f8a:	bf0c      	ite	eq
 8003f8c:	2628      	moveq	r6, #40	; 0x28
 8003f8e:	2607      	movne	r6, #7
	HAL_GPIO_WritePin(gpioPort, gpioPin, GPIO_PIN_SET);
 8003f90:	f000 ff48 	bl	8004e24 <HAL_GPIO_WritePin>
	if (addDelay != 0) {
 8003f94:	b117      	cbz	r7, 8003f9c <L6206_Board_EnableBridge+0x30>
		HAL_Delay(BSP_MOTOR_CONTROL_BOARD_BRIDGE_TURN_ON_DELAY);
 8003f96:	2014      	movs	r0, #20
 8003f98:	f000 fa6c 	bl	8004474 <HAL_Delay>
	}
	/* Configure the GPIO connected to EN pin to take interrupt */
	GPIO_InitStruct.Pin = gpioPin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003f9c:	4b0b      	ldr	r3, [pc, #44]	; (8003fcc <L6206_Board_EnableBridge+0x60>)
 8003f9e:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
	HAL_GPIO_Init(gpioPort, &GPIO_InitStruct);
 8003fa0:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fa2:	2301      	movs	r3, #1
	HAL_GPIO_Init(gpioPort, &GPIO_InitStruct);
 8003fa4:	4620      	mov	r0, r4
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fa6:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003fa8:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Pin = gpioPin;
 8003faa:	9501      	str	r5, [sp, #4]
	HAL_GPIO_Init(gpioPort, &GPIO_InitStruct);
 8003fac:	f000 fe5e 	bl	8004c6c <HAL_GPIO_Init>

	__HAL_GPIO_EXTI_CLEAR_IT(gpioPin);
 8003fb0:	4b07      	ldr	r3, [pc, #28]	; (8003fd0 <L6206_Board_EnableBridge+0x64>)
	HAL_NVIC_ClearPendingIRQ(flagIrqn);
 8003fb2:	4630      	mov	r0, r6
	__HAL_GPIO_EXTI_CLEAR_IT(gpioPin);
 8003fb4:	615d      	str	r5, [r3, #20]
	HAL_NVIC_ClearPendingIRQ(flagIrqn);
 8003fb6:	f000 fcad 	bl	8004914 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(flagIrqn);
 8003fba:	4630      	mov	r0, r6
 8003fbc:	f000 fc88 	bl	80048d0 <HAL_NVIC_EnableIRQ>
}
 8003fc0:	b007      	add	sp, #28
 8003fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fc4:	40020800 	.word	0x40020800
 8003fc8:	40020000 	.word	0x40020000
 8003fcc:	10210000 	.word	0x10210000
 8003fd0:	40013c00 	.word	0x40013c00

08003fd4 <L6206_Board_GetFlagPinState>:
* @brief  Returns the FLAG pin state.
* @param[in]  bridgeId (from 0 for bridge A to 1 for bridge B)
* @retval The FLAG pin value.
**********************************************************/
uint32_t L6206_Board_GetFlagPinState(uint8_t bridgeId)
{
 8003fd4:	b508      	push	{r3, lr}
		gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT;
	}else  {
		gpioPin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
		gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT;
	}
	return HAL_GPIO_ReadPin(gpioPort, gpioPin);
 8003fd6:	4b06      	ldr	r3, [pc, #24]	; (8003ff0 <L6206_Board_GetFlagPinState+0x1c>)
	if (bridgeId == 0) {
 8003fd8:	2800      	cmp	r0, #0
	return HAL_GPIO_ReadPin(gpioPort, gpioPin);
 8003fda:	bf0c      	ite	eq
 8003fdc:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 8003fe0:	2102      	movne	r1, #2
 8003fe2:	4804      	ldr	r0, [pc, #16]	; (8003ff4 <L6206_Board_GetFlagPinState+0x20>)
 8003fe4:	bf18      	it	ne
 8003fe6:	4618      	movne	r0, r3
 8003fe8:	f000 ff16 	bl	8004e18 <HAL_GPIO_ReadPin>
}
 8003fec:	bd08      	pop	{r3, pc}
 8003fee:	bf00      	nop
 8003ff0:	40020800 	.word	0x40020800
 8003ff4:	40020000 	.word	0x40020000

08003ff8 <L6206_Board_GpioInit>:
/******************************************************//**
* @brief  Initiliases the GPIOs used by the L6206s
* @retval None
**********************************************************/
void L6206_Board_GpioInit(void)
{
 8003ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ffa:	b089      	sub	sp, #36	; 0x24
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__GPIOC_CLK_ENABLE();
 8003ffc:	2400      	movs	r4, #0
 8003ffe:	4b28      	ldr	r3, [pc, #160]	; (80040a0 <L6206_Board_GpioInit+0xa8>)
 8004000:	9400      	str	r4, [sp, #0]
 8004002:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	/* This pin is reconfigured later for OCD and OVT as GPIO_MODE_IT_FALLING with GPIO_PULLUP */
	GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
	HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT, &GPIO_InitStruct);
 8004004:	4e27      	ldr	r6, [pc, #156]	; (80040a4 <L6206_Board_GpioInit+0xac>)
	__GPIOC_CLK_ENABLE();
 8004006:	f042 0204 	orr.w	r2, r2, #4
 800400a:	631a      	str	r2, [r3, #48]	; 0x30
 800400c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800400e:	f002 0204 	and.w	r2, r2, #4
 8004012:	9200      	str	r2, [sp, #0]
 8004014:	9a00      	ldr	r2, [sp, #0]
	__GPIOA_CLK_ENABLE();
 8004016:	9401      	str	r4, [sp, #4]
 8004018:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800401a:	f042 0201 	orr.w	r2, r2, #1
 800401e:	631a      	str	r2, [r3, #48]	; 0x30
 8004020:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004022:	f002 0201 	and.w	r2, r2, #1
 8004026:	9201      	str	r2, [sp, #4]
 8004028:	9a01      	ldr	r2, [sp, #4]
	__GPIOB_CLK_ENABLE();
 800402a:	9402      	str	r4, [sp, #8]
 800402c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800402e:	f042 0202 	orr.w	r2, r2, #2
 8004032:	631a      	str	r2, [r3, #48]	; 0x30
 8004034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004036:	9405      	str	r4, [sp, #20]
	__GPIOB_CLK_ENABLE();
 8004038:	f003 0302 	and.w	r3, r3, #2
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800403c:	2501      	movs	r5, #1
	__GPIOB_CLK_ENABLE();
 800403e:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN;
 8004040:	f44f 6780 	mov.w	r7, #1024	; 0x400
	HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT, &GPIO_InitStruct);
 8004044:	a903      	add	r1, sp, #12
 8004046:	4630      	mov	r0, r6
	__GPIOB_CLK_ENABLE();
 8004048:	9b02      	ldr	r3, [sp, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800404a:	9504      	str	r5, [sp, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 800404c:	9506      	str	r5, [sp, #24]
	GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN;
 800404e:	9703      	str	r7, [sp, #12]
	HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT, &GPIO_InitStruct);
 8004050:	f000 fe0c 	bl	8004c6c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT, BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN, GPIO_PIN_RESET);
 8004054:	4622      	mov	r2, r4
 8004056:	4639      	mov	r1, r7
 8004058:	4630      	mov	r0, r6
 800405a:	f000 fee3 	bl	8004e24 <HAL_GPIO_WritePin>

	/* Set Priority of External Line Interrupt used for the OCD OVT interrupt*/
	HAL_NVIC_SetPriority(EXTI_FLAG_A_IRQn, BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PRIORITY, 0);
 800405e:	4622      	mov	r2, r4
 8004060:	2104      	movs	r1, #4
 8004062:	2028      	movs	r0, #40	; 0x28
 8004064:	f000 fc00 	bl	8004868 <HAL_NVIC_SetPriority>

	/* Enable the External Line Interrupt used for the OCD OVT interrupt*/
	HAL_NVIC_EnableIRQ(EXTI_FLAG_A_IRQn);
 8004068:	2028      	movs	r0, #40	; 0x28
 800406a:	f000 fc31 	bl	80048d0 <HAL_NVIC_EnableIRQ>

/* Configure L6206 Enable pin of Bridge B ------------------------------*/
	/* This pin is reconfigured later for OCD and OVT as GPIO_MODE_IT_FALLING with GPIO_PULLUP */
	GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800406e:	9504      	str	r5, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8004070:	9506      	str	r5, [sp, #24]
	HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT, &GPIO_InitStruct);
 8004072:	4d0d      	ldr	r5, [pc, #52]	; (80040a8 <L6206_Board_GpioInit+0xb0>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004074:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
 8004076:	2602      	movs	r6, #2
	HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT, &GPIO_InitStruct);
 8004078:	a903      	add	r1, sp, #12
 800407a:	4628      	mov	r0, r5
	GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
 800407c:	9603      	str	r6, [sp, #12]
	HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT, &GPIO_InitStruct);
 800407e:	f000 fdf5 	bl	8004c6c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT, BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN, GPIO_PIN_RESET);
 8004082:	4622      	mov	r2, r4
 8004084:	4631      	mov	r1, r6
 8004086:	4628      	mov	r0, r5
 8004088:	f000 fecc 	bl	8004e24 <HAL_GPIO_WritePin>

	/* Set Priority of External Line Interrupt used for the OCD OVT interrupt*/
	HAL_NVIC_SetPriority(EXTI_FLAG_B_IRQn, BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PRIORITY, 0);
 800408c:	4622      	mov	r2, r4
 800408e:	2104      	movs	r1, #4
 8004090:	2007      	movs	r0, #7
 8004092:	f000 fbe9 	bl	8004868 <HAL_NVIC_SetPriority>

	/* Enable the External Line Interrupt used for the OCD OVT interrupt*/
	HAL_NVIC_EnableIRQ(EXTI_FLAG_B_IRQn);
 8004096:	2007      	movs	r0, #7
 8004098:	f000 fc1a 	bl	80048d0 <HAL_NVIC_EnableIRQ>
}
 800409c:	b009      	add	sp, #36	; 0x24
 800409e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040a0:	40023800 	.word	0x40023800
 80040a4:	40020000 	.word	0x40020000
 80040a8:	40020800 	.word	0x40020800

080040ac <L6206_Board_PwmDeInit>:
**********************************************************/
void L6206_Board_PwmDeInit(uint8_t bridgeInput)
{
	TIM_HandleTypeDef *pHTim;

	switch (bridgeInput) {
 80040ac:	2802      	cmp	r0, #2
 80040ae:	d00e      	beq.n	80040ce <L6206_Board_PwmDeInit+0x22>
 80040b0:	2803      	cmp	r0, #3
 80040b2:	d010      	beq.n	80040d6 <L6206_Board_PwmDeInit+0x2a>
 80040b4:	2801      	cmp	r0, #1
 80040b6:	4b0a      	ldr	r3, [pc, #40]	; (80040e0 <L6206_Board_PwmDeInit+0x34>)
 80040b8:	d005      	beq.n	80040c6 <L6206_Board_PwmDeInit+0x1a>
	case 0:
	default:
		pHTim = &hTimPwm1A;
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1A;
 80040ba:	480a      	ldr	r0, [pc, #40]	; (80040e4 <L6206_Board_PwmDeInit+0x38>)
		pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2A;

		break;
	case 2:
		pHTim = &hTimPwm1B;
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B;
 80040bc:	6003      	str	r3, [r0, #0]
		pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM1B;
 80040be:	2301      	movs	r3, #1

		break;
	case 3:
		pHTim = &hTimPwm2B;
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
		pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2B;
 80040c0:	7603      	strb	r3, [r0, #24]

		break;
	}
	HAL_TIM_PWM_DeInit(pHTim);
 80040c2:	f002 ba13 	b.w	80064ec <HAL_TIM_PWM_DeInit>
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2A;
 80040c6:	4808      	ldr	r0, [pc, #32]	; (80040e8 <L6206_Board_PwmDeInit+0x3c>)
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
 80040c8:	6003      	str	r3, [r0, #0]
		pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2B;
 80040ca:	2302      	movs	r3, #2
 80040cc:	e7f8      	b.n	80040c0 <L6206_Board_PwmDeInit+0x14>
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B;
 80040ce:	4807      	ldr	r0, [pc, #28]	; (80040ec <L6206_Board_PwmDeInit+0x40>)
 80040d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80040d4:	e7f2      	b.n	80040bc <L6206_Board_PwmDeInit+0x10>
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
 80040d6:	4806      	ldr	r0, [pc, #24]	; (80040f0 <L6206_Board_PwmDeInit+0x44>)
 80040d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80040dc:	e7f4      	b.n	80040c8 <L6206_Board_PwmDeInit+0x1c>
 80040de:	bf00      	nop
 80040e0:	40000400 	.word	0x40000400
 80040e4:	20000550 	.word	0x20000550
 80040e8:	2000049c 	.word	0x2000049c
 80040ec:	200004d8 	.word	0x200004d8
 80040f0:	20000514 	.word	0x20000514

080040f4 <L6206_Board_PwmInit>:
* @param[in] bridgeInput 0 for input 1A, 1 for input 2A,
* 2 for input 1B, 3 for input 2B
* @retval None
**********************************************************/
void L6206_Board_PwmInit(uint8_t bridgeInput)
{
 80040f4:	b570      	push	{r4, r5, r6, lr}
	TIM_OC_InitTypeDef sConfigOC;
	TIM_MasterConfigTypeDef sMasterConfig;
	TIM_HandleTypeDef *pHTim;
	uint32_t channel;

	switch (bridgeInput) {
 80040f6:	2802      	cmp	r0, #2
{
 80040f8:	b08a      	sub	sp, #40	; 0x28
	switch (bridgeInput) {
 80040fa:	d02a      	beq.n	8004152 <L6206_Board_PwmInit+0x5e>
 80040fc:	2803      	cmp	r0, #3
 80040fe:	d02c      	beq.n	800415a <L6206_Board_PwmInit+0x66>
 8004100:	2801      	cmp	r0, #1
 8004102:	4b18      	ldr	r3, [pc, #96]	; (8004164 <L6206_Board_PwmInit+0x70>)
 8004104:	d01f      	beq.n	8004146 <L6206_Board_PwmInit+0x52>
	case 0:
	default:
		pHTim = &hTimPwm1A;
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1A;
 8004106:	4c18      	ldr	r4, [pc, #96]	; (8004168 <L6206_Board_PwmInit+0x74>)
		pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2A;
		channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2A;
		break;
	case 2:
		pHTim = &hTimPwm1B;
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B;
 8004108:	6023      	str	r3, [r4, #0]
		pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM1B;
 800410a:	2301      	movs	r3, #1
 800410c:	7623      	strb	r3, [r4, #24]
		channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1B;
 800410e:	2600      	movs	r6, #0
		pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2B;
		channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2B;
		break;
	}
	pHTim->Init.Prescaler = TIMER_PRESCALER - 1;
	pHTim->Init.CounterMode = TIM_COUNTERMODE_UP;
 8004110:	2500      	movs	r5, #0
	pHTim->Init.Prescaler = TIMER_PRESCALER - 1;
 8004112:	233f      	movs	r3, #63	; 0x3f
 8004114:	6063      	str	r3, [r4, #4]
	pHTim->Init.CounterMode = TIM_COUNTERMODE_UP;
 8004116:	60a5      	str	r5, [r4, #8]
	pHTim->Init.Period = 0;
 8004118:	60e5      	str	r5, [r4, #12]
	pHTim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800411a:	6125      	str	r5, [r4, #16]
	HAL_TIM_PWM_Init(pHTim);
 800411c:	4620      	mov	r0, r4
 800411e:	f002 fbc9 	bl	80068b4 <HAL_TIM_PWM_Init>

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004122:	2360      	movs	r3, #96	; 0x60
	sConfigOC.Pulse = 0;
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	HAL_TIM_PWM_ConfigChannel(pHTim, &sConfigOC, channel);
 8004124:	4632      	mov	r2, r6
 8004126:	a903      	add	r1, sp, #12
 8004128:	4620      	mov	r0, r4
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800412a:	9303      	str	r3, [sp, #12]
	sConfigOC.Pulse = 0;
 800412c:	9504      	str	r5, [sp, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800412e:	9505      	str	r5, [sp, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004130:	9507      	str	r5, [sp, #28]
	HAL_TIM_PWM_ConfigChannel(pHTim, &sConfigOC, channel);
 8004132:	f002 fc05 	bl	8006940 <HAL_TIM_PWM_ConfigChannel>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	HAL_TIMEx_MasterConfigSynchronization(pHTim, &sMasterConfig);
 8004136:	a901      	add	r1, sp, #4
 8004138:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800413a:	9501      	str	r5, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800413c:	9502      	str	r5, [sp, #8]
	HAL_TIMEx_MasterConfigSynchronization(pHTim, &sMasterConfig);
 800413e:	f002 fcb1 	bl	8006aa4 <HAL_TIMEx_MasterConfigSynchronization>
}
 8004142:	b00a      	add	sp, #40	; 0x28
 8004144:	bd70      	pop	{r4, r5, r6, pc}
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2A;
 8004146:	4c09      	ldr	r4, [pc, #36]	; (800416c <L6206_Board_PwmInit+0x78>)
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
 8004148:	6023      	str	r3, [r4, #0]
		pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2B;
 800414a:	2302      	movs	r3, #2
 800414c:	7623      	strb	r3, [r4, #24]
		channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2B;
 800414e:	2604      	movs	r6, #4
		break;
 8004150:	e7de      	b.n	8004110 <L6206_Board_PwmInit+0x1c>
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B;
 8004152:	4c07      	ldr	r4, [pc, #28]	; (8004170 <L6206_Board_PwmInit+0x7c>)
 8004154:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004158:	e7d6      	b.n	8004108 <L6206_Board_PwmInit+0x14>
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
 800415a:	4c06      	ldr	r4, [pc, #24]	; (8004174 <L6206_Board_PwmInit+0x80>)
 800415c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004160:	e7f2      	b.n	8004148 <L6206_Board_PwmInit+0x54>
 8004162:	bf00      	nop
 8004164:	40000400 	.word	0x40000400
 8004168:	20000550 	.word	0x20000550
 800416c:	2000049c 	.word	0x2000049c
 8004170:	200004d8 	.word	0x200004d8
 8004174:	20000514 	.word	0x20000514

08004178 <L6206_Board_PwmSetFreq>:
* @param[in] duty Duty cycle
* @retval None
* @note The frequency is directly the current speed of the device
**********************************************************/
void L6206_Board_PwmSetFreq(uint8_t bridgeInput, uint32_t newFreq, uint8_t duty)
{
 8004178:	b570      	push	{r4, r5, r6, lr}
 800417a:	4605      	mov	r5, r0
 800417c:	460c      	mov	r4, r1
 800417e:	4616      	mov	r6, r2
	uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 8004180:	f002 f856 	bl	8006230 <HAL_RCC_GetSysClockFreq>
	TIM_HandleTypeDef *pHTim;
	uint32_t period;
	uint32_t pulse;
	uint32_t channel;

	switch (bridgeInput) {
 8004184:	2d02      	cmp	r5, #2
 8004186:	d026      	beq.n	80041d6 <L6206_Board_PwmSetFreq+0x5e>
 8004188:	2d03      	cmp	r5, #3
 800418a:	d028      	beq.n	80041de <L6206_Board_PwmSetFreq+0x66>
 800418c:	2d01      	cmp	r5, #1
 800418e:	4a16      	ldr	r2, [pc, #88]	; (80041e8 <L6206_Board_PwmSetFreq+0x70>)
 8004190:	d01d      	beq.n	80041ce <L6206_Board_PwmSetFreq+0x56>
	case 0:
	default:
		pHTim = &hTimPwm1A;
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1A;
 8004192:	4b16      	ldr	r3, [pc, #88]	; (80041ec <L6206_Board_PwmSetFreq+0x74>)
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2A;
		channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2A;
		break;
	case 2:
		pHTim = &hTimPwm1B;
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B;
 8004194:	601a      	str	r2, [r3, #0]
		channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1B;
 8004196:	2500      	movs	r5, #0
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
		channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2B;
		break;
	}

	period = (uint32_t)((uint32_t)sysFreq / (uint32_t)(TIMER_PRESCALER * newFreq)) - 1;
 8004198:	01a4      	lsls	r4, r4, #6
 800419a:	fbb0 f0f4 	udiv	r0, r0, r4


	__HAL_TIM_SetAutoreload(pHTim, period);
 800419e:	681c      	ldr	r4, [r3, #0]
	period = (uint32_t)((uint32_t)sysFreq / (uint32_t)(TIMER_PRESCALER * newFreq)) - 1;
 80041a0:	3801      	subs	r0, #1
	__HAL_TIM_SetAutoreload(pHTim, period);
 80041a2:	62e0      	str	r0, [r4, #44]	; 0x2c
 80041a4:	60d8      	str	r0, [r3, #12]

	if (duty == 0) {
 80041a6:	b146      	cbz	r6, 80041ba <L6206_Board_PwmSetFreq+0x42>
		pulse = 0;
	}else  {
		if (duty > 100) duty = 100;
		pulse = (uint32_t)(((uint32_t)period * (uint32_t)duty) / 100) + 1;
 80041a8:	2e64      	cmp	r6, #100	; 0x64
 80041aa:	4632      	mov	r2, r6
 80041ac:	bf28      	it	cs
 80041ae:	2264      	movcs	r2, #100	; 0x64
 80041b0:	4350      	muls	r0, r2
 80041b2:	2264      	movs	r2, #100	; 0x64
 80041b4:	fbb0 f2f2 	udiv	r2, r0, r2
 80041b8:	1c56      	adds	r6, r2, #1
	}
	__HAL_TIM_SetCompare(pHTim, channel, pulse);
 80041ba:	08a9      	lsrs	r1, r5, #2
 80041bc:	3434      	adds	r4, #52	; 0x34
	HAL_TIM_PWM_Start(pHTim, channel);
 80041be:	4618      	mov	r0, r3
	__HAL_TIM_SetCompare(pHTim, channel, pulse);
 80041c0:	f844 6021 	str.w	r6, [r4, r1, lsl #2]
	HAL_TIM_PWM_Start(pHTim, channel);
 80041c4:	4629      	mov	r1, r5
}
 80041c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_TIM_PWM_Start(pHTim, channel);
 80041ca:	f002 bc27 	b.w	8006a1c <HAL_TIM_PWM_Start>
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2A;
 80041ce:	4b08      	ldr	r3, [pc, #32]	; (80041f0 <L6206_Board_PwmSetFreq+0x78>)
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
 80041d0:	601a      	str	r2, [r3, #0]
		channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2B;
 80041d2:	2504      	movs	r5, #4
		break;
 80041d4:	e7e0      	b.n	8004198 <L6206_Board_PwmSetFreq+0x20>
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B;
 80041d6:	4b07      	ldr	r3, [pc, #28]	; (80041f4 <L6206_Board_PwmSetFreq+0x7c>)
 80041d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80041dc:	e7da      	b.n	8004194 <L6206_Board_PwmSetFreq+0x1c>
		pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
 80041de:	4b06      	ldr	r3, [pc, #24]	; (80041f8 <L6206_Board_PwmSetFreq+0x80>)
 80041e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80041e4:	e7f4      	b.n	80041d0 <L6206_Board_PwmSetFreq+0x58>
 80041e6:	bf00      	nop
 80041e8:	40000400 	.word	0x40000400
 80041ec:	20000550 	.word	0x20000550
 80041f0:	2000049c 	.word	0x2000049c
 80041f4:	200004d8 	.word	0x200004d8
 80041f8:	20000514 	.word	0x20000514

080041fc <L6206_Board_PwmStop>:
* 2 for input 1B, 3 for input 2B
* @retval None
**********************************************************/
void L6206_Board_PwmStop(uint8_t bridgeInput)
{
	switch (bridgeInput) {
 80041fc:	2803      	cmp	r0, #3
 80041fe:	d810      	bhi.n	8004222 <L6206_Board_PwmStop+0x26>
 8004200:	e8df f000 	tbb	[pc, r0]
 8004204:	0c090602 	.word	0x0c090602
	case 0:
		HAL_TIM_PWM_Stop(&hTimPwm1A, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1A);
 8004208:	4806      	ldr	r0, [pc, #24]	; (8004224 <L6206_Board_PwmStop+0x28>)
 800420a:	2100      	movs	r1, #0
		break;
	case  2:
		HAL_TIM_PWM_Stop(&hTimPwm1B, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1B);
		break;
	case  3:
		HAL_TIM_PWM_Stop(&hTimPwm2B, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2B);
 800420c:	f002 bc1c 	b.w	8006a48 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&hTimPwm2A, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2A);
 8004210:	2104      	movs	r1, #4
 8004212:	4805      	ldr	r0, [pc, #20]	; (8004228 <L6206_Board_PwmStop+0x2c>)
 8004214:	e7fa      	b.n	800420c <L6206_Board_PwmStop+0x10>
		HAL_TIM_PWM_Stop(&hTimPwm1B, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1B);
 8004216:	2100      	movs	r1, #0
 8004218:	4804      	ldr	r0, [pc, #16]	; (800422c <L6206_Board_PwmStop+0x30>)
 800421a:	e7f7      	b.n	800420c <L6206_Board_PwmStop+0x10>
		HAL_TIM_PWM_Stop(&hTimPwm2B, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2B);
 800421c:	2104      	movs	r1, #4
 800421e:	4804      	ldr	r0, [pc, #16]	; (8004230 <L6206_Board_PwmStop+0x34>)
 8004220:	e7f4      	b.n	800420c <L6206_Board_PwmStop+0x10>
 8004222:	4770      	bx	lr
 8004224:	20000550 	.word	0x20000550
 8004228:	2000049c 	.word	0x2000049c
 800422c:	200004d8 	.word	0x200004d8
 8004230:	20000514 	.word	0x20000514

08004234 <L6474_GetMotorHandle>:
 8004234:	2000      	movs	r0, #0
 8004236:	4770      	bx	lr

08004238 <l647x_GetMotorHandle>:
 8004238:	2000      	movs	r0, #0
 800423a:	4770      	bx	lr

0800423c <l648x_GetMotorHandle>:
 800423c:	2000      	movs	r0, #0
 800423e:	4770      	bx	lr

08004240 <Powerstep01_GetMotorHandle>:
 8004240:	2000      	movs	r0, #0
 8004242:	4770      	bx	lr

08004244 <L6208_GetMotorHandle>:
 8004244:	2000      	movs	r0, #0
 8004246:	4770      	bx	lr

08004248 <Stspin220_GetMotorHandle>:
 8004248:	2000      	movs	r0, #0
 800424a:	4770      	bx	lr

0800424c <Stspin240_250_GetMotorHandle>:
}
/// Get motor handle for STSPIN240
__weak motorDrv_t* Stspin240_250_GetMotorHandle(void)
{
	return((motorDrv_t* )0);
}
 800424c:	2000      	movs	r0, #0
 800424e:	4770      	bx	lr

08004250 <BSP_MotorControl_ErrorHandler>:
* @param[in] error number of the error
* @retval None
**********************************************************/
void BSP_MotorControl_ErrorHandler(uint16_t error)
{
	if ((motorDrvHandle != 0) && (motorDrvHandle->ErrorHandler != 0)) {
 8004250:	4b03      	ldr	r3, [pc, #12]	; (8004260 <BSP_MotorControl_ErrorHandler+0x10>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	b11b      	cbz	r3, 800425e <BSP_MotorControl_ErrorHandler+0xe>
 8004256:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800425a:	b103      	cbz	r3, 800425e <BSP_MotorControl_ErrorHandler+0xe>
		motorDrvHandle->ErrorHandler(error);
 800425c:	4718      	bx	r3
 800425e:	e7fe      	b.n	800425e <BSP_MotorControl_ErrorHandler+0xe>
 8004260:	20000398 	.word	0x20000398

08004264 <BSP_MotorControl_AttachErrorHandler>:
	if ((motorDrvHandle != 0) && (motorDrvHandle->AttachErrorHandler != 0)) {
 8004264:	4b04      	ldr	r3, [pc, #16]	; (8004278 <BSP_MotorControl_AttachErrorHandler+0x14>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	b113      	cbz	r3, 8004270 <BSP_MotorControl_AttachErrorHandler+0xc>
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	b103      	cbz	r3, 8004270 <BSP_MotorControl_AttachErrorHandler+0xc>
		motorDrvHandle->AttachErrorHandler(callback);
 800426e:	4718      	bx	r3
		MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(2);
 8004270:	f640 0002 	movw	r0, #2050	; 0x802
 8004274:	f7ff bfec 	b.w	8004250 <BSP_MotorControl_ErrorHandler>
 8004278:	20000398 	.word	0x20000398

0800427c <BSP_MotorControl_AttachFlagInterrupt>:
	if ((motorDrvHandle != 0) && (motorDrvHandle->AttachFlagInterrupt != 0)) {
 800427c:	4b04      	ldr	r3, [pc, #16]	; (8004290 <BSP_MotorControl_AttachFlagInterrupt+0x14>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	b113      	cbz	r3, 8004288 <BSP_MotorControl_AttachFlagInterrupt+0xc>
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	b103      	cbz	r3, 8004288 <BSP_MotorControl_AttachFlagInterrupt+0xc>
		motorDrvHandle->AttachFlagInterrupt(callback);
 8004286:	4718      	bx	r3
		MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(3);
 8004288:	f640 0003 	movw	r0, #2051	; 0x803
 800428c:	f7ff bfe0 	b.w	8004250 <BSP_MotorControl_ErrorHandler>
 8004290:	20000398 	.word	0x20000398

08004294 <BSP_MotorControl_Init>:
* @param[in] initDeviceParameters Initialization structure for one device
* @retval None
**********************************************************/
void BSP_MotorControl_Init(uint16_t id, void* initDeviceParameters)
{
	if ((motorDrvHandle != 0) && (motorDrvHandle->Init != 0)) {
 8004294:	4b05      	ldr	r3, [pc, #20]	; (80042ac <BSP_MotorControl_Init+0x18>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	b11b      	cbz	r3, 80042a2 <BSP_MotorControl_Init+0xe>
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	b10b      	cbz	r3, 80042a2 <BSP_MotorControl_Init+0xe>
		motorDrvHandle->Init(initDeviceParameters);
 800429e:	4608      	mov	r0, r1
 80042a0:	4718      	bx	r3
	}else  {
		MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(0);
 80042a2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80042a6:	f7ff bfd3 	b.w	8004250 <BSP_MotorControl_ErrorHandler>
 80042aa:	bf00      	nop
 80042ac:	20000398 	.word	0x20000398

080042b0 <BSP_MotorControl_GetDeviceState>:
**********************************************************/
motorState_t BSP_MotorControl_GetDeviceState(uint8_t deviceId)
{
	motorState_t state = INACTIVE;

	if ((motorDrvHandle != 0) && (motorDrvHandle->GetDeviceState != 0)) {
 80042b0:	4b07      	ldr	r3, [pc, #28]	; (80042d0 <BSP_MotorControl_GetDeviceState+0x20>)
 80042b2:	681b      	ldr	r3, [r3, #0]
{
 80042b4:	b510      	push	{r4, lr}
	if ((motorDrvHandle != 0) && (motorDrvHandle->GetDeviceState != 0)) {
 80042b6:	b123      	cbz	r3, 80042c2 <BSP_MotorControl_GetDeviceState+0x12>
 80042b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ba:	b113      	cbz	r3, 80042c2 <BSP_MotorControl_GetDeviceState+0x12>
		state = motorDrvHandle->GetDeviceState(deviceId);
	}else  {
		MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(9);
	}
	return(state);
}
 80042bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		state = motorDrvHandle->GetDeviceState(deviceId);
 80042c0:	4718      	bx	r3
		MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(9);
 80042c2:	f640 0009 	movw	r0, #2057	; 0x809
 80042c6:	f7ff ffc3 	bl	8004250 <BSP_MotorControl_ErrorHandler>
}
 80042ca:	2008      	movs	r0, #8
 80042cc:	bd10      	pop	{r4, pc}
 80042ce:	bf00      	nop
 80042d0:	20000398 	.word	0x20000398

080042d4 <BSP_MotorControl_CmdGetStatus>:
* GetParam command (via the functions ReadStatusRegister or CmdGetParam).
**********************************************************/
uint16_t BSP_MotorControl_CmdGetStatus(uint8_t deviceId)
{
	uint16_t status = 0;
	if ((motorDrvHandle != 0) && (motorDrvHandle->CmdGetStatus != 0)) {
 80042d4:	4b07      	ldr	r3, [pc, #28]	; (80042f4 <BSP_MotorControl_CmdGetStatus+0x20>)
 80042d6:	681b      	ldr	r3, [r3, #0]
{
 80042d8:	b510      	push	{r4, lr}
	if ((motorDrvHandle != 0) && (motorDrvHandle->CmdGetStatus != 0)) {
 80042da:	b12b      	cbz	r3, 80042e8 <BSP_MotorControl_CmdGetStatus+0x14>
 80042dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e0:	b113      	cbz	r3, 80042e8 <BSP_MotorControl_CmdGetStatus+0x14>
		status = motorDrvHandle->CmdGetStatus(deviceId);
	}else  {
		MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(34);
	}
	return(status);
}
 80042e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		status = motorDrvHandle->CmdGetStatus(deviceId);
 80042e6:	4718      	bx	r3
		MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(34);
 80042e8:	f640 0022 	movw	r0, #2082	; 0x822
 80042ec:	f7ff ffb0 	bl	8004250 <BSP_MotorControl_ErrorHandler>
}
 80042f0:	2000      	movs	r0, #0
 80042f2:	bd10      	pop	{r4, pc}
 80042f4:	20000398 	.word	0x20000398

080042f8 <BSP_MotorControl_SetDualFullBridgeConfig>:
* for Stspin250, 0 only as no dual brush DC configuration is supported
* @retval None
**********************************************************/
void BSP_MotorControl_SetDualFullBridgeConfig(uint8_t config)
{
	if ((motorDrvHandle != 0) && (motorDrvHandle->SetDualFullBridgeConfig != 0)) {
 80042f8:	4b05      	ldr	r3, [pc, #20]	; (8004310 <BSP_MotorControl_SetDualFullBridgeConfig+0x18>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	b11b      	cbz	r3, 8004306 <BSP_MotorControl_SetDualFullBridgeConfig+0xe>
 80042fe:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8004302:	b103      	cbz	r3, 8004306 <BSP_MotorControl_SetDualFullBridgeConfig+0xe>
		motorDrvHandle->SetDualFullBridgeConfig(config);
 8004304:	4718      	bx	r3
	}else  {
		MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(65);
 8004306:	f640 0041 	movw	r0, #2113	; 0x841
 800430a:	f7ff bfa1 	b.w	8004250 <BSP_MotorControl_ErrorHandler>
 800430e:	bf00      	nop
 8004310:	20000398 	.word	0x20000398

08004314 <BSP_MotorControl_SetBridgeInputPwmFreq>:
* @param[in] newFreq in Hz up to 100000Hz
* @retval None
**********************************************************/
void BSP_MotorControl_SetBridgeInputPwmFreq(uint8_t bridgeId, uint32_t newFreq)
{
	if ((motorDrvHandle != 0) && (motorDrvHandle->SetBridgeInputPwmFreq != 0)) {
 8004314:	4b05      	ldr	r3, [pc, #20]	; (800432c <BSP_MotorControl_SetBridgeInputPwmFreq+0x18>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	b11b      	cbz	r3, 8004322 <BSP_MotorControl_SetBridgeInputPwmFreq+0xe>
 800431a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800431e:	b103      	cbz	r3, 8004322 <BSP_MotorControl_SetBridgeInputPwmFreq+0xe>
		motorDrvHandle->SetBridgeInputPwmFreq(bridgeId, newFreq);
 8004320:	4718      	bx	r3
	}else  {
		MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(67);
 8004322:	f640 0043 	movw	r0, #2115	; 0x843
 8004326:	f7ff bf93 	b.w	8004250 <BSP_MotorControl_ErrorHandler>
 800432a:	bf00      	nop
 800432c:	20000398 	.word	0x20000398

08004330 <BSP_MotorControl_SetNbDevices>:
* @retval TRUE if successfull, FALSE if failure, attempt
* to set a number of devices greater than MAX_NUMBER_OF_DEVICES
**********************************************************/
bool BSP_MotorControl_SetNbDevices(uint16_t id, uint8_t nbDevices)
{
	MotorControlBoardId = id;
 8004330:	4b26      	ldr	r3, [pc, #152]	; (80043cc <BSP_MotorControl_SetNbDevices+0x9c>)
{
 8004332:	b570      	push	{r4, r5, r6, lr}
	MotorControlBoardId = id;
 8004334:	8018      	strh	r0, [r3, #0]
	bool status = FALSE;
	if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6474) {
 8004336:	f641 134a 	movw	r3, #6474	; 0x194a
 800433a:	4298      	cmp	r0, r3
{
 800433c:	460d      	mov	r5, r1
 800433e:	4c24      	ldr	r4, [pc, #144]	; (80043d0 <BSP_MotorControl_SetNbDevices+0xa0>)
	if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6474) {
 8004340:	d10c      	bne.n	800435c <BSP_MotorControl_SetNbDevices+0x2c>
		motorDrvHandle = L6474_GetMotorHandle();
 8004342:	f7ff ff77 	bl	8004234 <L6474_GetMotorHandle>
	}else if (id == BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01) {
		motorDrvHandle = Powerstep01_GetMotorHandle();
 8004346:	6020      	str	r0, [r4, #0]
		  (id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN250)) {
		motorDrvHandle = Stspin240_250_GetMotorHandle();
	}else  {
		motorDrvHandle = 0;
	}
	if ((motorDrvHandle != 0) &&
 8004348:	6823      	ldr	r3, [r4, #0]
 800434a:	b3e3      	cbz	r3, 80043c6 <BSP_MotorControl_SetNbDevices+0x96>
	    (motorDrvHandle->SetNbDevices != 0) &&
 800434c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	if ((motorDrvHandle != 0) &&
 8004350:	b3cb      	cbz	r3, 80043c6 <BSP_MotorControl_SetNbDevices+0x96>
	    (motorDrvHandle->SetNbDevices != 0) &&
 8004352:	b3c5      	cbz	r5, 80043c6 <BSP_MotorControl_SetNbDevices+0x96>
	    (nbDevices != 0)) {
		status = motorDrvHandle->SetNbDevices(nbDevices);
 8004354:	4628      	mov	r0, r5
	}
	return(status);
}
 8004356:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		status = motorDrvHandle->SetNbDevices(nbDevices);
 800435a:	4718      	bx	r3
	}else if (id == BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01) {
 800435c:	2801      	cmp	r0, #1
 800435e:	d102      	bne.n	8004366 <BSP_MotorControl_SetNbDevices+0x36>
		motorDrvHandle = Powerstep01_GetMotorHandle();
 8004360:	f7ff ff6e 	bl	8004240 <Powerstep01_GetMotorHandle>
 8004364:	e7ef      	b.n	8004346 <BSP_MotorControl_SetNbDevices+0x16>
	}else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6206) {
 8004366:	f641 033e 	movw	r3, #6206	; 0x183e
 800436a:	4298      	cmp	r0, r3
 800436c:	d102      	bne.n	8004374 <BSP_MotorControl_SetNbDevices+0x44>
		motorDrvHandle = L6206_GetMotorHandle();
 800436e:	f7fc fed7 	bl	8001120 <L6206_GetMotorHandle>
 8004372:	e7e8      	b.n	8004346 <BSP_MotorControl_SetNbDevices+0x16>
	}else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6208) {
 8004374:	f5b0 5fc2 	cmp.w	r0, #6208	; 0x1840
 8004378:	d102      	bne.n	8004380 <BSP_MotorControl_SetNbDevices+0x50>
		motorDrvHandle = L6208_GetMotorHandle();
 800437a:	f7ff ff63 	bl	8004244 <L6208_GetMotorHandle>
 800437e:	e7e2      	b.n	8004346 <BSP_MotorControl_SetNbDevices+0x16>
	}else if (id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN220) {
 8004380:	28dc      	cmp	r0, #220	; 0xdc
 8004382:	d102      	bne.n	800438a <BSP_MotorControl_SetNbDevices+0x5a>
		motorDrvHandle = Stspin220_GetMotorHandle();
 8004384:	f7ff ff60 	bl	8004248 <Stspin220_GetMotorHandle>
 8004388:	e7dd      	b.n	8004346 <BSP_MotorControl_SetNbDevices+0x16>
	}else if ((id == BSP_MOTOR_CONTROL_BOARD_ID_L6470) ||
 800438a:	f641 1346 	movw	r3, #6470	; 0x1946
 800438e:	4298      	cmp	r0, r3
 8004390:	d003      	beq.n	800439a <BSP_MotorControl_SetNbDevices+0x6a>
 8004392:	f641 1348 	movw	r3, #6472	; 0x1948
 8004396:	4298      	cmp	r0, r3
 8004398:	d102      	bne.n	80043a0 <BSP_MotorControl_SetNbDevices+0x70>
		motorDrvHandle = l647x_GetMotorHandle();
 800439a:	f7ff ff4d 	bl	8004238 <l647x_GetMotorHandle>
 800439e:	e7d2      	b.n	8004346 <BSP_MotorControl_SetNbDevices+0x16>
	}else if ((id == BSP_MOTOR_CONTROL_BOARD_ID_L6480) ||
 80043a0:	f020 0302 	bic.w	r3, r0, #2
 80043a4:	f641 1250 	movw	r2, #6480	; 0x1950
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d102      	bne.n	80043b2 <BSP_MotorControl_SetNbDevices+0x82>
		motorDrvHandle = l648x_GetMotorHandle();
 80043ac:	f7ff ff46 	bl	800423c <l648x_GetMotorHandle>
 80043b0:	e7c9      	b.n	8004346 <BSP_MotorControl_SetNbDevices+0x16>
	}else if ((id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN240) ||
 80043b2:	28f0      	cmp	r0, #240	; 0xf0
 80043b4:	d001      	beq.n	80043ba <BSP_MotorControl_SetNbDevices+0x8a>
 80043b6:	28fa      	cmp	r0, #250	; 0xfa
 80043b8:	d102      	bne.n	80043c0 <BSP_MotorControl_SetNbDevices+0x90>
		motorDrvHandle = Stspin240_250_GetMotorHandle();
 80043ba:	f7ff ff47 	bl	800424c <Stspin240_250_GetMotorHandle>
 80043be:	e7c2      	b.n	8004346 <BSP_MotorControl_SetNbDevices+0x16>
		motorDrvHandle = 0;
 80043c0:	2300      	movs	r3, #0
 80043c2:	6023      	str	r3, [r4, #0]
 80043c4:	e7c0      	b.n	8004348 <BSP_MotorControl_SetNbDevices+0x18>
}
 80043c6:	2000      	movs	r0, #0
 80043c8:	bd70      	pop	{r4, r5, r6, pc}
 80043ca:	bf00      	nop
 80043cc:	20000394 	.word	0x20000394
 80043d0:	20000398 	.word	0x20000398

080043d4 <HAL_InitTick>:
 *       implementation  in user file.
 * @param TickPriority Tick interrupt priority.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043d4:	b538      	push	{r3, r4, r5, lr}
	/* Configure the SysTick to have interrupt in 1ms time basis*/
	if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U) {
 80043d6:	4a0e      	ldr	r2, [pc, #56]	; (8004410 <HAL_InitTick+0x3c>)
 80043d8:	4b0e      	ldr	r3, [pc, #56]	; (8004414 <HAL_InitTick+0x40>)
{
 80043da:	4605      	mov	r5, r0
	if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U) {
 80043dc:	7818      	ldrb	r0, [r3, #0]
 80043de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043e2:	fbb3 f3f0 	udiv	r3, r3, r0
 80043e6:	6810      	ldr	r0, [r2, #0]
 80043e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80043ec:	f000 fa7c 	bl	80048e8 <HAL_SYSTICK_Config>
 80043f0:	4604      	mov	r4, r0
 80043f2:	b958      	cbnz	r0, 800440c <HAL_InitTick+0x38>
		return HAL_ERROR;
	}

	/* Configure the SysTick IRQ priority */
	if (TickPriority < (1UL << __NVIC_PRIO_BITS)) {
 80043f4:	2d0f      	cmp	r5, #15
 80043f6:	d809      	bhi.n	800440c <HAL_InitTick+0x38>
		HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043f8:	4602      	mov	r2, r0
 80043fa:	4629      	mov	r1, r5
 80043fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004400:	f000 fa32 	bl	8004868 <HAL_NVIC_SetPriority>
		uwTickPrio = TickPriority;
 8004404:	4b04      	ldr	r3, [pc, #16]	; (8004418 <HAL_InitTick+0x44>)
 8004406:	4620      	mov	r0, r4
 8004408:	601d      	str	r5, [r3, #0]
 800440a:	bd38      	pop	{r3, r4, r5, pc}
		return HAL_ERROR;
 800440c:	2001      	movs	r0, #1
		return HAL_ERROR;
	}

	/* Return function status */
	return HAL_OK;
}
 800440e:	bd38      	pop	{r3, r4, r5, pc}
 8004410:	2000019c 	.word	0x2000019c
 8004414:	20000184 	.word	0x20000184
 8004418:	20000188 	.word	0x20000188

0800441c <HAL_Init>:
{
 800441c:	b508      	push	{r3, lr}
	__HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800441e:	4b0b      	ldr	r3, [pc, #44]	; (800444c <HAL_Init+0x30>)
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004426:	601a      	str	r2, [r3, #0]
	__HAL_FLASH_DATA_CACHE_ENABLE();
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800442e:	601a      	str	r2, [r3, #0]
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004436:	601a      	str	r2, [r3, #0]
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004438:	2003      	movs	r0, #3
 800443a:	f000 fa03 	bl	8004844 <HAL_NVIC_SetPriorityGrouping>
	HAL_InitTick(TICK_INT_PRIORITY);
 800443e:	2000      	movs	r0, #0
 8004440:	f7ff ffc8 	bl	80043d4 <HAL_InitTick>
	HAL_MspInit();
 8004444:	f003 fa9e 	bl	8007984 <HAL_MspInit>
}
 8004448:	2000      	movs	r0, #0
 800444a:	bd08      	pop	{r3, pc}
 800444c:	40023c00 	.word	0x40023c00

08004450 <HAL_IncTick>:
 *      implementations in user file.
 * @retval None
 */
__weak void HAL_IncTick(void)
{
	uwTick += uwTickFreq;
 8004450:	4a03      	ldr	r2, [pc, #12]	; (8004460 <HAL_IncTick+0x10>)
 8004452:	4b04      	ldr	r3, [pc, #16]	; (8004464 <HAL_IncTick+0x14>)
 8004454:	6811      	ldr	r1, [r2, #0]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	440b      	add	r3, r1
 800445a:	6013      	str	r3, [r2, #0]
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	2000058c 	.word	0x2000058c
 8004464:	20000184 	.word	0x20000184

08004468 <HAL_GetTick>:
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void)
{
	return uwTick;
 8004468:	4b01      	ldr	r3, [pc, #4]	; (8004470 <HAL_GetTick+0x8>)
 800446a:	6818      	ldr	r0, [r3, #0]
}
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	2000058c 	.word	0x2000058c

08004474 <HAL_Delay>:
 *       implementations in user file.
 * @param Delay specifies the delay time length, in milliseconds.
 * @retval None
 */
__weak void HAL_Delay(uint32_t Delay)
{
 8004474:	b538      	push	{r3, r4, r5, lr}
 8004476:	4604      	mov	r4, r0
	uint32_t tickstart = HAL_GetTick();
 8004478:	f7ff fff6 	bl	8004468 <HAL_GetTick>
	uint32_t wait = Delay;

	/* Add a freq to guarantee minimum wait */
	if (wait < HAL_MAX_DELAY) {
 800447c:	1c63      	adds	r3, r4, #1
		wait += (uint32_t)(uwTickFreq);
 800447e:	bf1c      	itt	ne
 8004480:	4b05      	ldrne	r3, [pc, #20]	; (8004498 <HAL_Delay+0x24>)
 8004482:	781b      	ldrbne	r3, [r3, #0]
	uint32_t tickstart = HAL_GetTick();
 8004484:	4605      	mov	r5, r0
		wait += (uint32_t)(uwTickFreq);
 8004486:	bf18      	it	ne
 8004488:	18e4      	addne	r4, r4, r3
	}

	while ((HAL_GetTick() - tickstart) < wait) {
 800448a:	f7ff ffed 	bl	8004468 <HAL_GetTick>
 800448e:	1b40      	subs	r0, r0, r5
 8004490:	4284      	cmp	r4, r0
 8004492:	d8fa      	bhi.n	800448a <HAL_Delay+0x16>
	}
}
 8004494:	bd38      	pop	{r3, r4, r5, pc}
 8004496:	bf00      	nop
 8004498:	20000184 	.word	0x20000184

0800449c <HAL_ADC_Init>:
 * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 *         the configuration information for the specified ADC.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800449c:	b510      	push	{r4, lr}
	HAL_StatusTypeDef tmp_hal_status = HAL_OK;

	/* Check ADC handle */
	if (hadc == NULL) {
 800449e:	4604      	mov	r4, r0
 80044a0:	2800      	cmp	r0, #0
 80044a2:	f000 8099 	beq.w	80045d8 <HAL_ADC_Init+0x13c>

	if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START) {
		assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
	}

	if (hadc->State == HAL_ADC_STATE_RESET) {
 80044a6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80044a8:	b923      	cbnz	r3, 80044b4 <HAL_ADC_Init+0x18>
		/* Initialize ADC error code */
		ADC_CLEAR_ERRORCODE(hadc);
 80044aa:	6443      	str	r3, [r0, #68]	; 0x44

		/* Allocate lock resource and initialize it */
		hadc->Lock = HAL_UNLOCKED;
 80044ac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

		/* Init the low level hardware */
		HAL_ADC_MspInit(hadc);
 80044b0:	f002 fe80 	bl	80071b4 <HAL_ADC_MspInit>
	}

	/* Configuration of ADC parameters if previous preliminary actions are      */
	/* correctly completed.                                                     */
	if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL)) {
 80044b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80044b6:	06db      	lsls	r3, r3, #27
 80044b8:	f100 808c 	bmi.w	80045d4 <HAL_ADC_Init+0x138>
		/* Set ADC state */
		ADC_STATE_CLR_SET(hadc->State,
 80044bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80044be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80044c2:	f023 0302 	bic.w	r3, r3, #2
 80044c6:	f043 0302 	orr.w	r3, r3, #2
 80044ca:	6423      	str	r3, [r4, #64]	; 0x40
	/* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
	/* control register)                                                    */
	tmpADC_Common = ADC_COMMON_REGISTER(hadc);

	/* Set the ADC clock prescaler */
	tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80044cc:	4b43      	ldr	r3, [pc, #268]	; (80045dc <HAL_ADC_Init+0x140>)
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80044d4:	605a      	str	r2, [r3, #4]
	tmpADC_Common->CCR |= hadc->Init.ClockPrescaler;
 80044d6:	685a      	ldr	r2, [r3, #4]
 80044d8:	6861      	ldr	r1, [r4, #4]
 80044da:	430a      	orrs	r2, r1
 80044dc:	605a      	str	r2, [r3, #4]

	/* Set ADC scan mode */
	hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80044de:	6823      	ldr	r3, [r4, #0]
	hadc->Instance->CR1 |= ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80044e0:	6921      	ldr	r1, [r4, #16]
	hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044e8:	605a      	str	r2, [r3, #4]
	hadc->Instance->CR1 |= ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80044f0:	605a      	str	r2, [r3, #4]

	/* Set ADC resolution */
	hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80044f2:	685a      	ldr	r2, [r3, #4]
	hadc->Instance->CR1 |= hadc->Init.Resolution;
 80044f4:	68a1      	ldr	r1, [r4, #8]
	hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80044f6:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80044fa:	605a      	str	r2, [r3, #4]
	hadc->Instance->CR1 |= hadc->Init.Resolution;
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	430a      	orrs	r2, r1
 8004500:	605a      	str	r2, [r3, #4]

	/* Set ADC data alignment */
	hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004502:	689a      	ldr	r2, [r3, #8]
	hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004504:	68e1      	ldr	r1, [r4, #12]
	hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004506:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800450a:	609a      	str	r2, [r3, #8]
	hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800450c:	689a      	ldr	r2, [r3, #8]
 800450e:	430a      	orrs	r2, r1
 8004510:	609a      	str	r2, [r3, #8]
	/* Enable external trigger if trigger selection is different of software  */
	/* start.                                                                 */
	/* Note: This configuration keeps the hardware feature of parameter       */
	/*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
	/*       software start.                                                  */
	if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START) {
 8004512:	4933      	ldr	r1, [pc, #204]	; (80045e0 <HAL_ADC_Init+0x144>)
 8004514:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004516:	428a      	cmp	r2, r1
 8004518:	d050      	beq.n	80045bc <HAL_ADC_Init+0x120>
		/* Select external trigger to start conversion */
		hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800451a:	6899      	ldr	r1, [r3, #8]
 800451c:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8004520:	6099      	str	r1, [r3, #8]
		hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004522:	6899      	ldr	r1, [r3, #8]
 8004524:	430a      	orrs	r2, r1
 8004526:	609a      	str	r2, [r3, #8]

		/* Select external trigger polarity */
		hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004528:	689a      	ldr	r2, [r3, #8]
		hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800452a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
		hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800452c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004530:	609a      	str	r2, [r3, #8]
		hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004532:	689a      	ldr	r2, [r3, #8]
 8004534:	430a      	orrs	r2, r1
	}else  {
		/* Reset the external trigger */
		hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
		hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004536:	609a      	str	r2, [r3, #8]
	}

	/* Enable or disable ADC continuous conversion mode */
	hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004538:	689a      	ldr	r2, [r3, #8]
	hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800453a:	69a1      	ldr	r1, [r4, #24]
	hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800453c:	f022 0202 	bic.w	r2, r2, #2
 8004540:	609a      	str	r2, [r3, #8]
	hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8004548:	609a      	str	r2, [r3, #8]

	if (hadc->Init.DiscontinuousConvMode != DISABLE) {
 800454a:	6a22      	ldr	r2, [r4, #32]
 800454c:	2a00      	cmp	r2, #0
 800454e:	d03d      	beq.n	80045cc <HAL_ADC_Init+0x130>
		assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

		/* Enable the selected ADC regular discontinuous mode */
		hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004550:	685a      	ldr	r2, [r3, #4]

		/* Set the number of channels to be converted in discontinuous mode */
		hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
		hadc->Instance->CR1 |= ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004552:	6a61      	ldr	r1, [r4, #36]	; 0x24
		hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004554:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004558:	605a      	str	r2, [r3, #4]
		hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004560:	605a      	str	r2, [r3, #4]
		hadc->Instance->CR1 |= ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004562:	685a      	ldr	r2, [r3, #4]
 8004564:	3901      	subs	r1, #1
 8004566:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
	}else  {
		/* Disable the selected ADC regular discontinuous mode */
		hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800456a:	605a      	str	r2, [r3, #4]
	}

	/* Set ADC number of conversion */
	hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800456c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	hadc->Instance->SQR1 |= ADC_SQR1(hadc->Init.NbrOfConversion);
 800456e:	69e1      	ldr	r1, [r4, #28]
	hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004570:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004574:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc->Instance->SQR1 |= ADC_SQR1(hadc->Init.NbrOfConversion);
 8004576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004578:	3901      	subs	r1, #1
 800457a:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800457e:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Enable or disable ADC DMA continuous request */
	hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004580:	689a      	ldr	r2, [r3, #8]
	hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8004582:	6b21      	ldr	r1, [r4, #48]	; 0x30
	hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004584:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004588:	609a      	str	r2, [r3, #8]
	hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800458a:	689a      	ldr	r2, [r3, #8]
 800458c:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8004590:	609a      	str	r2, [r3, #8]

	/* Enable or disable ADC end of conversion selection */
	hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004592:	689a      	ldr	r2, [r3, #8]
	hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004594:	6961      	ldr	r1, [r4, #20]
	hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004596:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800459a:	609a      	str	r2, [r3, #8]
	hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800459c:	689a      	ldr	r2, [r3, #8]
		ADC_CLEAR_ERRORCODE(hadc);
 800459e:	2000      	movs	r0, #0
	hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80045a0:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80045a4:	609a      	str	r2, [r3, #8]
		ADC_CLEAR_ERRORCODE(hadc);
 80045a6:	6460      	str	r0, [r4, #68]	; 0x44
		ADC_STATE_CLR_SET(hadc->State,
 80045a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045aa:	f023 0303 	bic.w	r3, r3, #3
 80045ae:	f043 0301 	orr.w	r3, r3, #1
 80045b2:	6423      	str	r3, [r4, #64]	; 0x40
	__HAL_UNLOCK(hadc);
 80045b4:	2300      	movs	r3, #0
 80045b6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	return tmp_hal_status;
 80045ba:	bd10      	pop	{r4, pc}
		hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80045bc:	689a      	ldr	r2, [r3, #8]
 80045be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80045c2:	609a      	str	r2, [r3, #8]
		hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80045c4:	689a      	ldr	r2, [r3, #8]
 80045c6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80045ca:	e7b4      	b.n	8004536 <HAL_ADC_Init+0x9a>
		hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045d2:	e7ca      	b.n	800456a <HAL_ADC_Init+0xce>
		tmp_hal_status = HAL_ERROR;
 80045d4:	2001      	movs	r0, #1
 80045d6:	e7ed      	b.n	80045b4 <HAL_ADC_Init+0x118>
		return HAL_ERROR;
 80045d8:	2001      	movs	r0, #1
}
 80045da:	bd10      	pop	{r4, pc}
 80045dc:	40012300 	.word	0x40012300
 80045e0:	0f000001 	.word	0x0f000001

080045e4 <HAL_ADC_ConvCpltCallback>:
 80045e4:	4770      	bx	lr

080045e6 <HAL_ADC_LevelOutOfWindowCallback>:
 80045e6:	4770      	bx	lr

080045e8 <HAL_ADC_ErrorCallback>:
{
 80045e8:	4770      	bx	lr

080045ea <HAL_ADC_IRQHandler>:
{
 80045ea:	b538      	push	{r3, r4, r5, lr}
	tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80045ec:	6803      	ldr	r3, [r0, #0]
 80045ee:	6819      	ldr	r1, [r3, #0]
	tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80045f0:	685a      	ldr	r2, [r3, #4]
	if (tmp1 && tmp2) {
 80045f2:	078d      	lsls	r5, r1, #30
{
 80045f4:	4604      	mov	r4, r0
	if (tmp1 && tmp2) {
 80045f6:	d52b      	bpl.n	8004650 <HAL_ADC_IRQHandler+0x66>
 80045f8:	0690      	lsls	r0, r2, #26
 80045fa:	d529      	bpl.n	8004650 <HAL_ADC_IRQHandler+0x66>
		if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL)) {
 80045fc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80045fe:	06d1      	lsls	r1, r2, #27
			SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004600:	bf5e      	ittt	pl
 8004602:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 8004604:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8004608:	6422      	strpl	r2, [r4, #64]	; 0x40
		if (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8004610:	d117      	bne.n	8004642 <HAL_ADC_IRQHandler+0x58>
 8004612:	69a2      	ldr	r2, [r4, #24]
 8004614:	b9aa      	cbnz	r2, 8004642 <HAL_ADC_IRQHandler+0x58>
		    (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		    (hadc->Init.ContinuousConvMode == DISABLE) &&
 8004618:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 800461c:	d002      	beq.n	8004624 <HAL_ADC_IRQHandler+0x3a>
		     HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS))) {
 800461e:	689a      	ldr	r2, [r3, #8]
		    (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004620:	0552      	lsls	r2, r2, #21
 8004622:	d40e      	bmi.n	8004642 <HAL_ADC_IRQHandler+0x58>
			__HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	f022 0220 	bic.w	r2, r2, #32
 800462a:	605a      	str	r2, [r3, #4]
			CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800462c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800462e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004632:	6423      	str	r3, [r4, #64]	; 0x40
			if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY)) {
 8004634:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004636:	04db      	lsls	r3, r3, #19
				SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004638:	bf5e      	ittt	pl
 800463a:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 800463c:	f043 0301 	orrpl.w	r3, r3, #1
 8004640:	6423      	strpl	r3, [r4, #64]	; 0x40
		HAL_ADC_ConvCpltCallback(hadc);
 8004642:	4620      	mov	r0, r4
 8004644:	f7ff ffce 	bl	80045e4 <HAL_ADC_ConvCpltCallback>
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004648:	6823      	ldr	r3, [r4, #0]
 800464a:	f06f 0212 	mvn.w	r2, #18
 800464e:	601a      	str	r2, [r3, #0]
	tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8004650:	6823      	ldr	r3, [r4, #0]
 8004652:	6819      	ldr	r1, [r3, #0]
	tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);
 8004654:	685a      	ldr	r2, [r3, #4]
	if (tmp1 && tmp2) {
 8004656:	074d      	lsls	r5, r1, #29
 8004658:	d532      	bpl.n	80046c0 <HAL_ADC_IRQHandler+0xd6>
 800465a:	0610      	lsls	r0, r2, #24
 800465c:	d530      	bpl.n	80046c0 <HAL_ADC_IRQHandler+0xd6>
		if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL)) {
 800465e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004660:	06d1      	lsls	r1, r2, #27
			SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004662:	bf5e      	ittt	pl
 8004664:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 8004666:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 800466a:	6422      	strpl	r2, [r4, #64]	; 0x40
		if (ADC_IS_SOFTWARE_START_INJECTED(hadc) &&
 800466c:	689a      	ldr	r2, [r3, #8]
 800466e:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8004672:	d11e      	bne.n	80046b2 <HAL_ADC_IRQHandler+0xc8>
		    (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8004674:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if (ADC_IS_SOFTWARE_START_INJECTED(hadc) &&
 8004676:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800467a:	d002      	beq.n	8004682 <HAL_ADC_IRQHandler+0x98>
		     HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800467c:	689a      	ldr	r2, [r3, #8]
		    (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800467e:	0552      	lsls	r2, r2, #21
 8004680:	d417      	bmi.n	80046b2 <HAL_ADC_IRQHandler+0xc8>
		    (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004682:	685a      	ldr	r2, [r3, #4]
		     HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8004684:	0555      	lsls	r5, r2, #21
 8004686:	d414      	bmi.n	80046b2 <HAL_ADC_IRQHandler+0xc8>
		     (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8004688:	689a      	ldr	r2, [r3, #8]
		    (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800468a:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800468e:	d110      	bne.n	80046b2 <HAL_ADC_IRQHandler+0xc8>
		     (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8004690:	69a2      	ldr	r2, [r4, #24]
 8004692:	b972      	cbnz	r2, 80046b2 <HAL_ADC_IRQHandler+0xc8>
			__HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800469a:	605a      	str	r2, [r3, #4]
			CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800469c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800469e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046a2:	6423      	str	r3, [r4, #64]	; 0x40
			if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY)) {
 80046a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80046a6:	05d8      	lsls	r0, r3, #23
				SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046a8:	bf5e      	ittt	pl
 80046aa:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 80046ac:	f043 0301 	orrpl.w	r3, r3, #1
 80046b0:	6423      	strpl	r3, [r4, #64]	; 0x40
		HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80046b2:	4620      	mov	r0, r4
 80046b4:	f000 f8c4 	bl	8004840 <HAL_ADCEx_InjectedConvCpltCallback>
		__HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80046b8:	6823      	ldr	r3, [r4, #0]
 80046ba:	f06f 020c 	mvn.w	r2, #12
 80046be:	601a      	str	r2, [r3, #0]
	tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80046c0:	6823      	ldr	r3, [r4, #0]
 80046c2:	6819      	ldr	r1, [r3, #0]
	tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);
 80046c4:	685a      	ldr	r2, [r3, #4]
	if (tmp1 && tmp2) {
 80046c6:	07c9      	lsls	r1, r1, #31
 80046c8:	d50f      	bpl.n	80046ea <HAL_ADC_IRQHandler+0x100>
 80046ca:	0655      	lsls	r5, r2, #25
 80046cc:	d50d      	bpl.n	80046ea <HAL_ADC_IRQHandler+0x100>
		if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD)) {
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	07d8      	lsls	r0, r3, #31
 80046d2:	d50a      	bpl.n	80046ea <HAL_ADC_IRQHandler+0x100>
			SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80046d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80046d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046da:	6423      	str	r3, [r4, #64]	; 0x40
			HAL_ADC_LevelOutOfWindowCallback(hadc);
 80046dc:	4620      	mov	r0, r4
 80046de:	f7ff ff82 	bl	80045e6 <HAL_ADC_LevelOutOfWindowCallback>
			__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80046e2:	6823      	ldr	r3, [r4, #0]
 80046e4:	f06f 0201 	mvn.w	r2, #1
 80046e8:	601a      	str	r2, [r3, #0]
	tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80046ea:	6823      	ldr	r3, [r4, #0]
 80046ec:	6819      	ldr	r1, [r3, #0]
	tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80046ee:	685a      	ldr	r2, [r3, #4]
	if (tmp1 && tmp2) {
 80046f0:	0689      	lsls	r1, r1, #26
 80046f2:	d50d      	bpl.n	8004710 <HAL_ADC_IRQHandler+0x126>
 80046f4:	0152      	lsls	r2, r2, #5
 80046f6:	d50b      	bpl.n	8004710 <HAL_ADC_IRQHandler+0x126>
		SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80046f8:	6c62      	ldr	r2, [r4, #68]	; 0x44
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80046fa:	f06f 0520 	mvn.w	r5, #32
		SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80046fe:	f042 0202 	orr.w	r2, r2, #2
 8004702:	6462      	str	r2, [r4, #68]	; 0x44
		HAL_ADC_ErrorCallback(hadc);
 8004704:	4620      	mov	r0, r4
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004706:	601d      	str	r5, [r3, #0]
		HAL_ADC_ErrorCallback(hadc);
 8004708:	f7ff ff6e 	bl	80045e8 <HAL_ADC_ErrorCallback>
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800470c:	6823      	ldr	r3, [r4, #0]
 800470e:	601d      	str	r5, [r3, #0]
 8004710:	bd38      	pop	{r3, r4, r5, pc}
	...

08004714 <HAL_ADC_ConfigChannel>:
{
 8004714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	__IO uint32_t counter = 0U;
 8004716:	2300      	movs	r3, #0
 8004718:	9301      	str	r3, [sp, #4]
	__HAL_LOCK(hadc);
 800471a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800471e:	2b01      	cmp	r3, #1
 8004720:	f000 8083 	beq.w	800482a <HAL_ADC_ConfigChannel+0x116>
	if (sConfig->Channel > ADC_CHANNEL_9) {
 8004724:	680d      	ldr	r5, [r1, #0]
 8004726:	6804      	ldr	r4, [r0, #0]
 8004728:	688a      	ldr	r2, [r1, #8]
	__HAL_LOCK(hadc);
 800472a:	2301      	movs	r3, #1
	if (sConfig->Channel > ADC_CHANNEL_9) {
 800472c:	2d09      	cmp	r5, #9
	__HAL_LOCK(hadc);
 800472e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8004732:	b2ae      	uxth	r6, r5
	if (sConfig->Channel > ADC_CHANNEL_9) {
 8004734:	d92a      	bls.n	800478c <HAL_ADC_ConfigChannel+0x78>
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004736:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800473a:	68e7      	ldr	r7, [r4, #12]
 800473c:	3b1e      	subs	r3, #30
 800473e:	f04f 0e07 	mov.w	lr, #7
 8004742:	fa0e fe03 	lsl.w	lr, lr, r3
 8004746:	ea27 070e 	bic.w	r7, r7, lr
 800474a:	60e7      	str	r7, [r4, #12]
		hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800474c:	68e7      	ldr	r7, [r4, #12]
 800474e:	fa02 f303 	lsl.w	r3, r2, r3
 8004752:	433b      	orrs	r3, r7
 8004754:	60e3      	str	r3, [r4, #12]
	if (sConfig->Rank < 7U) {
 8004756:	684a      	ldr	r2, [r1, #4]
 8004758:	2a06      	cmp	r2, #6
 800475a:	ea4f 0382 	mov.w	r3, r2, lsl #2
 800475e:	d825      	bhi.n	80047ac <HAL_ADC_ConfigChannel+0x98>
		hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004760:	4413      	add	r3, r2
 8004762:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8004764:	1f59      	subs	r1, r3, #5
 8004766:	231f      	movs	r3, #31
 8004768:	408b      	lsls	r3, r1
 800476a:	ea27 0303 	bic.w	r3, r7, r3
 800476e:	6363      	str	r3, [r4, #52]	; 0x34
		hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004770:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004772:	fa06 f101 	lsl.w	r1, r6, r1
 8004776:	4311      	orrs	r1, r2
 8004778:	6361      	str	r1, [r4, #52]	; 0x34
	if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT)) {
 800477a:	4b2d      	ldr	r3, [pc, #180]	; (8004830 <HAL_ADC_ConfigChannel+0x11c>)
 800477c:	429c      	cmp	r4, r3
 800477e:	d034      	beq.n	80047ea <HAL_ADC_ConfigChannel+0xd6>
	__HAL_UNLOCK(hadc);
 8004780:	2300      	movs	r3, #0
 8004782:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
	return HAL_OK;
 8004786:	4618      	mov	r0, r3
}
 8004788:	b003      	add	sp, #12
 800478a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800478c:	6927      	ldr	r7, [r4, #16]
 800478e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8004792:	f04f 0e07 	mov.w	lr, #7
 8004796:	fa0e fe03 	lsl.w	lr, lr, r3
 800479a:	ea27 070e 	bic.w	r7, r7, lr
 800479e:	6127      	str	r7, [r4, #16]
		hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80047a0:	6927      	ldr	r7, [r4, #16]
 80047a2:	fa02 f303 	lsl.w	r3, r2, r3
 80047a6:	433b      	orrs	r3, r7
 80047a8:	6123      	str	r3, [r4, #16]
 80047aa:	e7d4      	b.n	8004756 <HAL_ADC_ConfigChannel+0x42>
	else if (sConfig->Rank < 13U) {
 80047ac:	2a0c      	cmp	r2, #12
 80047ae:	d80e      	bhi.n	80047ce <HAL_ADC_ConfigChannel+0xba>
		hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80047b0:	4413      	add	r3, r2
 80047b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80047b4:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 80047b8:	231f      	movs	r3, #31
 80047ba:	4093      	lsls	r3, r2
 80047bc:	ea21 0303 	bic.w	r3, r1, r3
 80047c0:	6323      	str	r3, [r4, #48]	; 0x30
		hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80047c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80047c4:	fa06 f202 	lsl.w	r2, r6, r2
 80047c8:	431a      	orrs	r2, r3
 80047ca:	6322      	str	r2, [r4, #48]	; 0x30
 80047cc:	e7d5      	b.n	800477a <HAL_ADC_ConfigChannel+0x66>
		hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80047ce:	4413      	add	r3, r2
 80047d0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80047d2:	3b41      	subs	r3, #65	; 0x41
 80047d4:	221f      	movs	r2, #31
 80047d6:	409a      	lsls	r2, r3
 80047d8:	ea21 0202 	bic.w	r2, r1, r2
 80047dc:	62e2      	str	r2, [r4, #44]	; 0x2c
		hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80047de:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80047e0:	fa06 f103 	lsl.w	r1, r6, r3
 80047e4:	4311      	orrs	r1, r2
 80047e6:	62e1      	str	r1, [r4, #44]	; 0x2c
 80047e8:	e7c7      	b.n	800477a <HAL_ADC_ConfigChannel+0x66>
	if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT)) {
 80047ea:	2d12      	cmp	r5, #18
 80047ec:	d104      	bne.n	80047f8 <HAL_ADC_ConfigChannel+0xe4>
		tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80047ee:	4a11      	ldr	r2, [pc, #68]	; (8004834 <HAL_ADC_ConfigChannel+0x120>)
 80047f0:	6853      	ldr	r3, [r2, #4]
 80047f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80047f6:	6053      	str	r3, [r2, #4]
	if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT))) {
 80047f8:	f1a5 0310 	sub.w	r3, r5, #16
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d8bf      	bhi.n	8004780 <HAL_ADC_ConfigChannel+0x6c>
		tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004800:	4a0c      	ldr	r2, [pc, #48]	; (8004834 <HAL_ADC_ConfigChannel+0x120>)
 8004802:	6853      	ldr	r3, [r2, #4]
		if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)) {
 8004804:	2d10      	cmp	r5, #16
		tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004806:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800480a:	6053      	str	r3, [r2, #4]
		if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)) {
 800480c:	d1b8      	bne.n	8004780 <HAL_ADC_ConfigChannel+0x6c>
			counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800480e:	4b0a      	ldr	r3, [pc, #40]	; (8004838 <HAL_ADC_ConfigChannel+0x124>)
 8004810:	4a0a      	ldr	r2, [pc, #40]	; (800483c <HAL_ADC_ConfigChannel+0x128>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	fbb3 f2f2 	udiv	r2, r3, r2
 8004818:	230a      	movs	r3, #10
 800481a:	4353      	muls	r3, r2
				counter--;
 800481c:	9301      	str	r3, [sp, #4]
			while (counter != 0U) {
 800481e:	9b01      	ldr	r3, [sp, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d0ad      	beq.n	8004780 <HAL_ADC_ConfigChannel+0x6c>
				counter--;
 8004824:	9b01      	ldr	r3, [sp, #4]
 8004826:	3b01      	subs	r3, #1
 8004828:	e7f8      	b.n	800481c <HAL_ADC_ConfigChannel+0x108>
	__HAL_LOCK(hadc);
 800482a:	2002      	movs	r0, #2
 800482c:	e7ac      	b.n	8004788 <HAL_ADC_ConfigChannel+0x74>
 800482e:	bf00      	nop
 8004830:	40012000 	.word	0x40012000
 8004834:	40012300 	.word	0x40012300
 8004838:	2000019c 	.word	0x2000019c
 800483c:	000f4240 	.word	0x000f4240

08004840 <HAL_ADCEx_InjectedConvCpltCallback>:
 * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 *         the configuration information for the specified ADC.
 * @retval None
 */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004840:	4770      	bx	lr
	...

08004844 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
	uint32_t reg_value;
	uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);       /* only values 0..7 are used          */

	reg_value = SCB->AIRCR;                                               /* read old register configuration    */
 8004844:	4a07      	ldr	r2, [pc, #28]	; (8004864 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004846:	68d3      	ldr	r3, [r2, #12]
	reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004848:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800484c:	041b      	lsls	r3, r3, #16
 800484e:	0c1b      	lsrs	r3, r3, #16
 8004850:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
	reg_value = (reg_value |
		     ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
		     (PriorityGroupTmp << 8U));                               /* Insert write key and priorty group */
 8004854:	0200      	lsls	r0, r0, #8
 8004856:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800485a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
	reg_value = (reg_value |
 800485e:	4303      	orrs	r3, r0
	SCB->AIRCR = reg_value;
 8004860:	60d3      	str	r3, [r2, #12]
 8004862:	4770      	bx	lr
 8004864:	e000ed00 	.word	0xe000ed00

08004868 <HAL_NVIC_SetPriority>:
   \details Reads the priority grouping field from the NVIC Interrupt Controller.
   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
	return((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004868:	4b17      	ldr	r3, [pc, #92]	; (80048c8 <HAL_NVIC_SetPriority+0x60>)
 *         This parameter can be a value between 0 and 15
 *         A lower priority value indicates a higher priority.
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800486a:	b530      	push	{r4, r5, lr}
 800486c:	68dc      	ldr	r4, [r3, #12]
 800486e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
	uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL); /* only values 0..7 are used          */
	uint32_t PreemptPriorityBits;
	uint32_t SubPriorityBits;

	PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004872:	f1c4 0307 	rsb	r3, r4, #7
	SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004876:	1d25      	adds	r5, r4, #4
	PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004878:	2b04      	cmp	r3, #4
 800487a:	bf28      	it	cs
 800487c:	2304      	movcs	r3, #4
	SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800487e:	2d06      	cmp	r5, #6

	return(
		((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004880:	f04f 0501 	mov.w	r5, #1
 8004884:	fa05 f303 	lsl.w	r3, r5, r3
 8004888:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
	SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800488c:	bf8c      	ite	hi
 800488e:	3c03      	subhi	r4, #3
 8004890:	2400      	movls	r4, #0
		((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004892:	4019      	ands	r1, r3
 8004894:	40a1      	lsls	r1, r4
		((SubPriority & (uint32_t)((1UL << (SubPriorityBits)) - 1UL)))
 8004896:	fa05 f404 	lsl.w	r4, r5, r4
 800489a:	3c01      	subs	r4, #1
 800489c:	4022      	ands	r2, r4
	if ((int32_t)(IRQn) < 0) {
 800489e:	2800      	cmp	r0, #0
		((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048a0:	ea42 0201 	orr.w	r2, r2, r1
 80048a4:	ea4f 1202 	mov.w	r2, r2, lsl #4
		NVIC->IP[((uint32_t)(int32_t)IRQn)] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048a8:	bfaf      	iteee	ge
 80048aa:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL) - 4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048ae:	f000 000f 	andlt.w	r0, r0, #15
 80048b2:	4b06      	ldrlt	r3, [pc, #24]	; (80048cc <HAL_NVIC_SetPriority+0x64>)
 80048b4:	b2d2      	uxtblt	r2, r2
		NVIC->IP[((uint32_t)(int32_t)IRQn)] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048b6:	bfa5      	ittet	ge
 80048b8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80048bc:	b2d2      	uxtbge	r2, r2
		SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL) - 4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048be:	541a      	strblt	r2, [r3, r0]
		NVIC->IP[((uint32_t)(int32_t)IRQn)] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048c0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80048c4:	bd30      	pop	{r4, r5, pc}
 80048c6:	bf00      	nop
 80048c8:	e000ed00 	.word	0xe000ed00
 80048cc:	e000ed14 	.word	0xe000ed14

080048d0 <HAL_NVIC_EnableIRQ>:
	NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80048d0:	0942      	lsrs	r2, r0, #5
 80048d2:	2301      	movs	r3, #1
 80048d4:	f000 001f 	and.w	r0, r0, #31
 80048d8:	fa03 f000 	lsl.w	r0, r3, r0
 80048dc:	4b01      	ldr	r3, [pc, #4]	; (80048e4 <HAL_NVIC_EnableIRQ+0x14>)
 80048de:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80048e2:	4770      	bx	lr
 80048e4:	e000e100 	.word	0xe000e100

080048e8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
	if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) {
 80048e8:	3801      	subs	r0, #1
 80048ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80048ee:	d20a      	bcs.n	8004906 <HAL_SYSTICK_Config+0x1e>
		return(1UL);                                        /* Reload value impossible */
	}

	SysTick->LOAD = (uint32_t)(ticks - 1UL);                    /* set reload register */
 80048f0:	4b06      	ldr	r3, [pc, #24]	; (800490c <HAL_SYSTICK_Config+0x24>)
		SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL) - 4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048f2:	4a07      	ldr	r2, [pc, #28]	; (8004910 <HAL_SYSTICK_Config+0x28>)
	SysTick->LOAD = (uint32_t)(ticks - 1UL);                    /* set reload register */
 80048f4:	6058      	str	r0, [r3, #4]
		SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL) - 4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048f6:	21f0      	movs	r1, #240	; 0xf0
 80048f8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
	NVIC_SetPriority(SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
	SysTick->VAL = 0UL;                                         /* Load the SysTick Counter Value */
 80048fc:	2000      	movs	r0, #0
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 80048fe:	2207      	movs	r2, #7
	SysTick->VAL = 0UL;                                         /* Load the SysTick Counter Value */
 8004900:	6098      	str	r0, [r3, #8]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	4770      	bx	lr
		return(1UL);                                        /* Reload value impossible */
 8004906:	2001      	movs	r0, #1
 *                  - 1  Function failed.
 */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
	return SysTick_Config(TicksNumb);
}
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	e000e010 	.word	0xe000e010
 8004910:	e000ed00 	.word	0xe000ed00

08004914 <HAL_NVIC_ClearPendingIRQ>:
	NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004914:	0943      	lsrs	r3, r0, #5
 8004916:	2201      	movs	r2, #1
 8004918:	f000 001f 	and.w	r0, r0, #31
 800491c:	fa02 f000 	lsl.w	r0, r2, r0
 8004920:	3360      	adds	r3, #96	; 0x60
 8004922:	4a02      	ldr	r2, [pc, #8]	; (800492c <HAL_NVIC_ClearPendingIRQ+0x18>)
 8004924:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	e000e100 	.word	0xe000e100

08004930 <DMA_CalcBaseAndBitshift>:
 *                     the configuration information for the specified DMA Stream.
 * @retval Stream base address
 */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
	uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004930:	6803      	ldr	r3, [r0, #0]
 8004932:	b2da      	uxtb	r2, r3
 8004934:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004938:	f023 0303 	bic.w	r3, r3, #3
 800493c:	2118      	movs	r1, #24
 800493e:	3a10      	subs	r2, #16
 8004940:	fbb2 f2f1 	udiv	r2, r2, r1

	/* lookup table for necessary bitshift of flags within status registers */
	static const uint8_t flagBitshiftOffset[8U] = { 0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U };
	hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004944:	4904      	ldr	r1, [pc, #16]	; (8004958 <DMA_CalcBaseAndBitshift+0x28>)

	if (stream_number > 3U) {
 8004946:	2a03      	cmp	r2, #3
		/* return pointer to HISR and HIFCR */
		hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004948:	bf88      	it	hi
 800494a:	3304      	addhi	r3, #4
	hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800494c:	5c89      	ldrb	r1, [r1, r2]
	}else  {
		/* return pointer to LISR and LIFCR */
		hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800494e:	6583      	str	r3, [r0, #88]	; 0x58
	hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004950:	65c1      	str	r1, [r0, #92]	; 0x5c
	}

	return hdma->StreamBaseAddress;
}
 8004952:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	0800abbb 	.word	0x0800abbb

0800495c <HAL_DMA_Init>:
{
 800495c:	b570      	push	{r4, r5, r6, lr}
 800495e:	4604      	mov	r4, r0
	uint32_t tickstart = HAL_GetTick();
 8004960:	f7ff fd82 	bl	8004468 <HAL_GetTick>
 8004964:	4605      	mov	r5, r0
	if (hdma == NULL) {
 8004966:	2c00      	cmp	r4, #0
 8004968:	d071      	beq.n	8004a4e <HAL_DMA_Init+0xf2>
	__HAL_UNLOCK(hdma);
 800496a:	2300      	movs	r3, #0
 800496c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	__HAL_DMA_DISABLE(hdma);
 8004970:	6822      	ldr	r2, [r4, #0]
	hdma->State = HAL_DMA_STATE_BUSY;
 8004972:	2302      	movs	r3, #2
 8004974:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	__HAL_DMA_DISABLE(hdma);
 8004978:	6813      	ldr	r3, [r2, #0]
 800497a:	f023 0301 	bic.w	r3, r3, #1
 800497e:	6013      	str	r3, [r2, #0]
	while ((hdma->Instance->CR & DMA_SxCR_EN) != RESET) {
 8004980:	6821      	ldr	r1, [r4, #0]
 8004982:	680b      	ldr	r3, [r1, #0]
 8004984:	07d8      	lsls	r0, r3, #31
 8004986:	d43c      	bmi.n	8004a02 <HAL_DMA_Init+0xa6>
	tmp = hdma->Instance->CR;
 8004988:	680b      	ldr	r3, [r1, #0]
	tmp &= ((uint32_t) ~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800498a:	4d32      	ldr	r5, [pc, #200]	; (8004a54 <HAL_DMA_Init+0xf8>)
	tmp |= hdma->Init.Channel | hdma->Init.Direction |
 800498c:	6862      	ldr	r2, [r4, #4]
	       hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800498e:	69a0      	ldr	r0, [r4, #24]
	tmp &= ((uint32_t) ~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004990:	401d      	ands	r5, r3
	tmp |= hdma->Init.Channel | hdma->Init.Direction |
 8004992:	68a3      	ldr	r3, [r4, #8]
 8004994:	4313      	orrs	r3, r2
 8004996:	68e2      	ldr	r2, [r4, #12]
 8004998:	4313      	orrs	r3, r2
	       hdma->Init.PeriphInc | hdma->Init.MemInc |
 800499a:	6922      	ldr	r2, [r4, #16]
 800499c:	4313      	orrs	r3, r2
 800499e:	6962      	ldr	r2, [r4, #20]
 80049a0:	4313      	orrs	r3, r2
	       hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049a2:	69e2      	ldr	r2, [r4, #28]
 80049a4:	4303      	orrs	r3, r0
 80049a6:	4313      	orrs	r3, r2
	       hdma->Init.Mode | hdma->Init.Priority;
 80049a8:	6a22      	ldr	r2, [r4, #32]
 80049aa:	4313      	orrs	r3, r2
	if (hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE) {
 80049ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80049ae:	2a04      	cmp	r2, #4
	tmp |= hdma->Init.Channel | hdma->Init.Direction |
 80049b0:	ea43 0305 	orr.w	r3, r3, r5
		tmp |= hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80049b4:	bf01      	itttt	eq
 80049b6:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 80049b8:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 80049ba:	4335      	orreq	r5, r6
 80049bc:	432b      	orreq	r3, r5
	hdma->Instance->CR = tmp;
 80049be:	600b      	str	r3, [r1, #0]
	tmp = hdma->Instance->FCR;
 80049c0:	694b      	ldr	r3, [r1, #20]
	if (hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE) {
 80049c2:	2a04      	cmp	r2, #4
	tmp &= (uint32_t) ~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80049c4:	f023 0307 	bic.w	r3, r3, #7
	tmp |= hdma->Init.FIFOMode;
 80049c8:	ea43 0302 	orr.w	r3, r3, r2
	if (hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE) {
 80049cc:	d10b      	bne.n	80049e6 <HAL_DMA_Init+0x8a>
		tmp |= hdma->Init.FIFOThreshold;
 80049ce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
		if (hdma->Init.MemBurst != DMA_MBURST_SINGLE) {
 80049d0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
		tmp |= hdma->Init.FIFOThreshold;
 80049d2:	4313      	orrs	r3, r2
		if (hdma->Init.MemBurst != DMA_MBURST_SINGLE) {
 80049d4:	b13d      	cbz	r5, 80049e6 <HAL_DMA_Init+0x8a>
{
	HAL_StatusTypeDef status = HAL_OK;
	uint32_t tmp = hdma->Init.FIFOThreshold;

	/* Memory Data size equal to Byte */
	if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE) {
 80049d6:	b9f8      	cbnz	r0, 8004a18 <HAL_DMA_Init+0xbc>
		switch (tmp) {
 80049d8:	2a01      	cmp	r2, #1
 80049da:	d02d      	beq.n	8004a38 <HAL_DMA_Init+0xdc>
 80049dc:	d301      	bcc.n	80049e2 <HAL_DMA_Init+0x86>
 80049de:	2a02      	cmp	r2, #2
			break;
		}
	}
	/* Memory Data size equal to Word */
	else{
		switch (tmp) {
 80049e0:	d101      	bne.n	80049e6 <HAL_DMA_Init+0x8a>
		case DMA_FIFO_THRESHOLD_HALFFULL:
		case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
			status = HAL_ERROR;
			break;
		case DMA_FIFO_THRESHOLD_FULL:
			if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1) {
 80049e2:	01ea      	lsls	r2, r5, #7
 80049e4:	d42b      	bmi.n	8004a3e <HAL_DMA_Init+0xe2>
	hdma->Instance->FCR = tmp;
 80049e6:	614b      	str	r3, [r1, #20]
	regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80049e8:	4620      	mov	r0, r4
 80049ea:	f7ff ffa1 	bl	8004930 <DMA_CalcBaseAndBitshift>
	regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049ee:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80049f0:	233f      	movs	r3, #63	; 0x3f
 80049f2:	4093      	lsls	r3, r2
 80049f4:	6083      	str	r3, [r0, #8]
	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049f6:	2000      	movs	r0, #0
	hdma->State = HAL_DMA_STATE_READY;
 80049f8:	2301      	movs	r3, #1
	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049fa:	6560      	str	r0, [r4, #84]	; 0x54
	hdma->State = HAL_DMA_STATE_READY;
 80049fc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	return HAL_OK;
 8004a00:	bd70      	pop	{r4, r5, r6, pc}
		if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT) {
 8004a02:	f7ff fd31 	bl	8004468 <HAL_GetTick>
 8004a06:	1b40      	subs	r0, r0, r5
 8004a08:	2805      	cmp	r0, #5
 8004a0a:	d9b9      	bls.n	8004980 <HAL_DMA_Init+0x24>
			hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a0c:	2320      	movs	r3, #32
 8004a0e:	6563      	str	r3, [r4, #84]	; 0x54
			hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a10:	2003      	movs	r0, #3
				hdma->State = HAL_DMA_STATE_READY;
 8004a12:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8004a16:	bd70      	pop	{r4, r5, r6, pc}
	else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD) {
 8004a18:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8004a1c:	d113      	bne.n	8004a46 <HAL_DMA_Init+0xea>
		switch (tmp) {
 8004a1e:	2a03      	cmp	r2, #3
 8004a20:	d8e1      	bhi.n	80049e6 <HAL_DMA_Init+0x8a>
 8004a22:	a001      	add	r0, pc, #4	; (adr r0, 8004a28 <HAL_DMA_Init+0xcc>)
 8004a24:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8004a28:	08004a3f 	.word	0x08004a3f
 8004a2c:	080049e3 	.word	0x080049e3
 8004a30:	08004a3f 	.word	0x08004a3f
 8004a34:	08004a39 	.word	0x08004a39
			if (hdma->Init.MemBurst == DMA_MBURST_INC16) {
 8004a38:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8004a3c:	d1d3      	bne.n	80049e6 <HAL_DMA_Init+0x8a>
				hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a3e:	2340      	movs	r3, #64	; 0x40
 8004a40:	6563      	str	r3, [r4, #84]	; 0x54
				hdma->State = HAL_DMA_STATE_READY;
 8004a42:	2001      	movs	r0, #1
 8004a44:	e7e5      	b.n	8004a12 <HAL_DMA_Init+0xb6>
		switch (tmp) {
 8004a46:	2a02      	cmp	r2, #2
 8004a48:	d9f9      	bls.n	8004a3e <HAL_DMA_Init+0xe2>
 8004a4a:	2a03      	cmp	r2, #3
 8004a4c:	e7c8      	b.n	80049e0 <HAL_DMA_Init+0x84>
		return HAL_ERROR;
 8004a4e:	2001      	movs	r0, #1
 8004a50:	bd70      	pop	{r4, r5, r6, pc}
 8004a52:	bf00      	nop
 8004a54:	f010803f 	.word	0xf010803f

08004a58 <HAL_DMA_Start_IT>:
{
 8004a58:	b570      	push	{r4, r5, r6, lr}
	__HAL_LOCK(hdma);
 8004a5a:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8004a5e:	2c01      	cmp	r4, #1
 8004a60:	d036      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x78>
 8004a62:	2401      	movs	r4, #1
 8004a64:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
	if (HAL_DMA_STATE_READY == hdma->State) {
 8004a68:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
	DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a6c:	6d86      	ldr	r6, [r0, #88]	; 0x58
	if (HAL_DMA_STATE_READY == hdma->State) {
 8004a6e:	2c01      	cmp	r4, #1
 8004a70:	f04f 0500 	mov.w	r5, #0
 8004a74:	f04f 0402 	mov.w	r4, #2
 8004a78:	d128      	bne.n	8004acc <HAL_DMA_Start_IT+0x74>
		hdma->State = HAL_DMA_STATE_BUSY;
 8004a7a:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
	hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004a7e:	6804      	ldr	r4, [r0, #0]
		hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a80:	6545      	str	r5, [r0, #84]	; 0x54
	hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004a82:	6825      	ldr	r5, [r4, #0]
 8004a84:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8004a88:	6025      	str	r5, [r4, #0]
	hdma->Instance->NDTR = DataLength;
 8004a8a:	6063      	str	r3, [r4, #4]
	if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH) {
 8004a8c:	6883      	ldr	r3, [r0, #8]
 8004a8e:	2b40      	cmp	r3, #64	; 0x40
		hdma->Instance->PAR = DstAddress;
 8004a90:	bf0e      	itee	eq
 8004a92:	60a2      	streq	r2, [r4, #8]
		hdma->Instance->PAR = SrcAddress;
 8004a94:	60a1      	strne	r1, [r4, #8]
		hdma->Instance->M0AR = DstAddress;
 8004a96:	60e2      	strne	r2, [r4, #12]
		regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a98:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
		hdma->Instance->M0AR = SrcAddress;
 8004a9a:	bf08      	it	eq
 8004a9c:	60e1      	streq	r1, [r4, #12]
		regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a9e:	233f      	movs	r3, #63	; 0x3f
 8004aa0:	4093      	lsls	r3, r2
 8004aa2:	60b3      	str	r3, [r6, #8]
		hdma->Instance->CR |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004aa4:	6823      	ldr	r3, [r4, #0]
 8004aa6:	f043 0316 	orr.w	r3, r3, #22
 8004aaa:	6023      	str	r3, [r4, #0]
		hdma->Instance->FCR |= DMA_IT_FE;
 8004aac:	6963      	ldr	r3, [r4, #20]
 8004aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ab2:	6163      	str	r3, [r4, #20]
		if (hdma->XferHalfCpltCallback != NULL) {
 8004ab4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004ab6:	b11b      	cbz	r3, 8004ac0 <HAL_DMA_Start_IT+0x68>
			hdma->Instance->CR |= DMA_IT_HT;
 8004ab8:	6823      	ldr	r3, [r4, #0]
 8004aba:	f043 0308 	orr.w	r3, r3, #8
 8004abe:	6023      	str	r3, [r4, #0]
		__HAL_DMA_ENABLE(hdma);
 8004ac0:	6823      	ldr	r3, [r4, #0]
 8004ac2:	f043 0301 	orr.w	r3, r3, #1
 8004ac6:	6023      	str	r3, [r4, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004ac8:	2000      	movs	r0, #0
 8004aca:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_UNLOCK(hdma);
 8004acc:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
	__HAL_LOCK(hdma);
 8004ad0:	2002      	movs	r0, #2
}
 8004ad2:	bd70      	pop	{r4, r5, r6, pc}

08004ad4 <HAL_DMA_Abort_IT>:
	if (hdma->State != HAL_DMA_STATE_BUSY) {
 8004ad4:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d003      	beq.n	8004ae4 <HAL_DMA_Abort_IT+0x10>
		hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004adc:	2380      	movs	r3, #128	; 0x80
 8004ade:	6543      	str	r3, [r0, #84]	; 0x54
		return HAL_ERROR;
 8004ae0:	2001      	movs	r0, #1
 8004ae2:	4770      	bx	lr
		__HAL_DMA_DISABLE(hdma);
 8004ae4:	6802      	ldr	r2, [r0, #0]
		hdma->State = HAL_DMA_STATE_ABORT;
 8004ae6:	2305      	movs	r3, #5
 8004ae8:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
		__HAL_DMA_DISABLE(hdma);
 8004aec:	6813      	ldr	r3, [r2, #0]
 8004aee:	f023 0301 	bic.w	r3, r3, #1
 8004af2:	6013      	str	r3, [r2, #0]
	return HAL_OK;
 8004af4:	2000      	movs	r0, #0
}
 8004af6:	4770      	bx	lr

08004af8 <HAL_DMA_IRQHandler>:
{
 8004af8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	__IO uint32_t count = 0U;
 8004afa:	2300      	movs	r3, #0
 8004afc:	9301      	str	r3, [sp, #4]
	uint32_t timeout = SystemCoreClock / 9600U;
 8004afe:	4b5a      	ldr	r3, [pc, #360]	; (8004c68 <HAL_DMA_IRQHandler+0x170>)
	DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b00:	6d85      	ldr	r5, [r0, #88]	; 0x58
	uint32_t timeout = SystemCoreClock / 9600U;
 8004b02:	681f      	ldr	r7, [r3, #0]
	if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET) {
 8004b04:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
	tmpisr = regs->ISR;
 8004b06:	682e      	ldr	r6, [r5, #0]
	if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET) {
 8004b08:	2208      	movs	r2, #8
 8004b0a:	409a      	lsls	r2, r3
 8004b0c:	4216      	tst	r6, r2
{
 8004b0e:	4604      	mov	r4, r0
	if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET) {
 8004b10:	d00c      	beq.n	8004b2c <HAL_DMA_IRQHandler+0x34>
		if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET) {
 8004b12:	6801      	ldr	r1, [r0, #0]
 8004b14:	6808      	ldr	r0, [r1, #0]
 8004b16:	0740      	lsls	r0, r0, #29
 8004b18:	d508      	bpl.n	8004b2c <HAL_DMA_IRQHandler+0x34>
			hdma->Instance->CR &= ~(DMA_IT_TE);
 8004b1a:	6808      	ldr	r0, [r1, #0]
 8004b1c:	f020 0004 	bic.w	r0, r0, #4
 8004b20:	6008      	str	r0, [r1, #0]
			regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004b22:	60aa      	str	r2, [r5, #8]
			hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b24:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004b26:	f042 0201 	orr.w	r2, r2, #1
 8004b2a:	6562      	str	r2, [r4, #84]	; 0x54
	if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET) {
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	409a      	lsls	r2, r3
 8004b30:	4216      	tst	r6, r2
 8004b32:	d008      	beq.n	8004b46 <HAL_DMA_IRQHandler+0x4e>
		if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET) {
 8004b34:	6821      	ldr	r1, [r4, #0]
 8004b36:	6949      	ldr	r1, [r1, #20]
 8004b38:	0609      	lsls	r1, r1, #24
			regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004b3a:	bf41      	itttt	mi
 8004b3c:	60aa      	strmi	r2, [r5, #8]
			hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b3e:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8004b40:	f042 0202 	orrmi.w	r2, r2, #2
 8004b44:	6562      	strmi	r2, [r4, #84]	; 0x54
	if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET) {
 8004b46:	2204      	movs	r2, #4
 8004b48:	409a      	lsls	r2, r3
 8004b4a:	4216      	tst	r6, r2
 8004b4c:	d008      	beq.n	8004b60 <HAL_DMA_IRQHandler+0x68>
		if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET) {
 8004b4e:	6821      	ldr	r1, [r4, #0]
 8004b50:	6809      	ldr	r1, [r1, #0]
 8004b52:	0788      	lsls	r0, r1, #30
			regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004b54:	bf41      	itttt	mi
 8004b56:	60aa      	strmi	r2, [r5, #8]
			hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b58:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8004b5a:	f042 0204 	orrmi.w	r2, r2, #4
 8004b5e:	6562      	strmi	r2, [r4, #84]	; 0x54
	if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET) {
 8004b60:	2210      	movs	r2, #16
 8004b62:	409a      	lsls	r2, r3
 8004b64:	4216      	tst	r6, r2
 8004b66:	d010      	beq.n	8004b8a <HAL_DMA_IRQHandler+0x92>
		if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET) {
 8004b68:	6823      	ldr	r3, [r4, #0]
 8004b6a:	6819      	ldr	r1, [r3, #0]
 8004b6c:	0709      	lsls	r1, r1, #28
 8004b6e:	d50c      	bpl.n	8004b8a <HAL_DMA_IRQHandler+0x92>
			regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004b70:	60aa      	str	r2, [r5, #8]
			if (((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET) {
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	0350      	lsls	r0, r2, #13
 8004b76:	d535      	bpl.n	8004be4 <HAL_DMA_IRQHandler+0xec>
				if ((hdma->Instance->CR & DMA_SxCR_CT) == RESET) {
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	0319      	lsls	r1, r3, #12
 8004b7c:	d401      	bmi.n	8004b82 <HAL_DMA_IRQHandler+0x8a>
				if (hdma->XferHalfCpltCallback != NULL) {
 8004b7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b80:	e000      	b.n	8004b84 <HAL_DMA_IRQHandler+0x8c>
					if (hdma->XferM1HalfCpltCallback != NULL) {
 8004b82:	6ca3      	ldr	r3, [r4, #72]	; 0x48
				if (hdma->XferHalfCpltCallback != NULL) {
 8004b84:	b10b      	cbz	r3, 8004b8a <HAL_DMA_IRQHandler+0x92>
					hdma->XferHalfCpltCallback(hdma);
 8004b86:	4620      	mov	r0, r4
 8004b88:	4798      	blx	r3
	if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET) {
 8004b8a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	408a      	lsls	r2, r1
 8004b90:	4216      	tst	r6, r2
 8004b92:	d038      	beq.n	8004c06 <HAL_DMA_IRQHandler+0x10e>
		if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET) {
 8004b94:	6823      	ldr	r3, [r4, #0]
 8004b96:	6818      	ldr	r0, [r3, #0]
 8004b98:	06c6      	lsls	r6, r0, #27
 8004b9a:	d534      	bpl.n	8004c06 <HAL_DMA_IRQHandler+0x10e>
			regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004b9c:	60aa      	str	r2, [r5, #8]
			if (HAL_DMA_STATE_ABORT == hdma->State) {
 8004b9e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8004ba2:	2a05      	cmp	r2, #5
				hdma->Instance->CR &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ba4:	681a      	ldr	r2, [r3, #0]
			if (HAL_DMA_STATE_ABORT == hdma->State) {
 8004ba6:	d125      	bne.n	8004bf4 <HAL_DMA_IRQHandler+0xfc>
				hdma->Instance->CR &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ba8:	f022 0216 	bic.w	r2, r2, #22
 8004bac:	601a      	str	r2, [r3, #0]
				hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004bae:	695a      	ldr	r2, [r3, #20]
 8004bb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bb4:	615a      	str	r2, [r3, #20]
				if ((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL)) {
 8004bb6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004bb8:	b90a      	cbnz	r2, 8004bbe <HAL_DMA_IRQHandler+0xc6>
 8004bba:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004bbc:	b11a      	cbz	r2, 8004bc6 <HAL_DMA_IRQHandler+0xce>
					hdma->Instance->CR &= ~(DMA_IT_HT);
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	f022 0208 	bic.w	r2, r2, #8
 8004bc4:	601a      	str	r2, [r3, #0]
				regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bc6:	233f      	movs	r3, #63	; 0x3f
 8004bc8:	408b      	lsls	r3, r1
 8004bca:	60ab      	str	r3, [r5, #8]
				__HAL_UNLOCK(hdma);
 8004bcc:	2300      	movs	r3, #0
 8004bce:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
				hdma->State = HAL_DMA_STATE_READY;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
				if (hdma->XferAbortCallback != NULL) {
 8004bd8:	6d23      	ldr	r3, [r4, #80]	; 0x50
		if (hdma->XferErrorCallback != NULL) {
 8004bda:	b10b      	cbz	r3, 8004be0 <HAL_DMA_IRQHandler+0xe8>
			hdma->XferErrorCallback(hdma);
 8004bdc:	4620      	mov	r0, r4
 8004bde:	4798      	blx	r3
}
 8004be0:	b003      	add	sp, #12
 8004be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if ((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET) {
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	05d2      	lsls	r2, r2, #23
					hdma->Instance->CR &= ~(DMA_IT_HT);
 8004be8:	bf5e      	ittt	pl
 8004bea:	681a      	ldrpl	r2, [r3, #0]
 8004bec:	f022 0208 	bicpl.w	r2, r2, #8
 8004bf0:	601a      	strpl	r2, [r3, #0]
 8004bf2:	e7c4      	b.n	8004b7e <HAL_DMA_IRQHandler+0x86>
			if (((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET) {
 8004bf4:	0350      	lsls	r0, r2, #13
 8004bf6:	d528      	bpl.n	8004c4a <HAL_DMA_IRQHandler+0x152>
				if ((hdma->Instance->CR & DMA_SxCR_CT) == RESET) {
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	0319      	lsls	r1, r3, #12
 8004bfc:	d432      	bmi.n	8004c64 <HAL_DMA_IRQHandler+0x16c>
					if (hdma->XferM1CpltCallback != NULL) {
 8004bfe:	6c63      	ldr	r3, [r4, #68]	; 0x44
				if (hdma->XferCpltCallback != NULL) {
 8004c00:	b10b      	cbz	r3, 8004c06 <HAL_DMA_IRQHandler+0x10e>
					hdma->XferCpltCallback(hdma);
 8004c02:	4620      	mov	r0, r4
 8004c04:	4798      	blx	r3
	if (hdma->ErrorCode != HAL_DMA_ERROR_NONE) {
 8004c06:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d0e9      	beq.n	8004be0 <HAL_DMA_IRQHandler+0xe8>
		if ((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET) {
 8004c0c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004c0e:	07da      	lsls	r2, r3, #31
 8004c10:	d519      	bpl.n	8004c46 <HAL_DMA_IRQHandler+0x14e>
			hdma->State = HAL_DMA_STATE_ABORT;
 8004c12:	2305      	movs	r3, #5
			__HAL_DMA_DISABLE(hdma);
 8004c14:	6822      	ldr	r2, [r4, #0]
			hdma->State = HAL_DMA_STATE_ABORT;
 8004c16:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			__HAL_DMA_DISABLE(hdma);
 8004c1a:	6813      	ldr	r3, [r2, #0]
 8004c1c:	f023 0301 	bic.w	r3, r3, #1
 8004c20:	6013      	str	r3, [r2, #0]
	uint32_t timeout = SystemCoreClock / 9600U;
 8004c22:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8004c26:	fbb7 f7f3 	udiv	r7, r7, r3
				if (++count > timeout) {
 8004c2a:	9b01      	ldr	r3, [sp, #4]
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	429f      	cmp	r7, r3
 8004c30:	9301      	str	r3, [sp, #4]
 8004c32:	d302      	bcc.n	8004c3a <HAL_DMA_IRQHandler+0x142>
			} while ((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004c34:	6813      	ldr	r3, [r2, #0]
 8004c36:	07db      	lsls	r3, r3, #31
 8004c38:	d4f7      	bmi.n	8004c2a <HAL_DMA_IRQHandler+0x132>
			__HAL_UNLOCK(hdma);
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			hdma->State = HAL_DMA_STATE_READY;
 8004c40:	2301      	movs	r3, #1
 8004c42:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
		if (hdma->XferErrorCallback != NULL) {
 8004c46:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004c48:	e7c7      	b.n	8004bda <HAL_DMA_IRQHandler+0xe2>
				if ((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET) {
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8004c50:	d108      	bne.n	8004c64 <HAL_DMA_IRQHandler+0x16c>
					hdma->Instance->CR &= ~(DMA_IT_TC);
 8004c52:	6819      	ldr	r1, [r3, #0]
 8004c54:	f021 0110 	bic.w	r1, r1, #16
 8004c58:	6019      	str	r1, [r3, #0]
					hdma->State = HAL_DMA_STATE_READY;
 8004c5a:	2301      	movs	r3, #1
					__HAL_UNLOCK(hdma);
 8004c5c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
					hdma->State = HAL_DMA_STATE_READY;
 8004c60:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
				if (hdma->XferCpltCallback != NULL) {
 8004c64:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004c66:	e7cb      	b.n	8004c00 <HAL_DMA_IRQHandler+0x108>
 8004c68:	2000019c 	.word	0x2000019c

08004c6c <HAL_GPIO_Init>:
 * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c70:	b085      	sub	sp, #20
	/* Configure the port pins */
	for (position = 0U; position < GPIO_NUMBER; position++) {
		/* Get the IO position */
		ioposition = 0x01U << position;
		/* Get the current IO position */
		iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c72:	680b      	ldr	r3, [r1, #0]

			/*--------------------- EXTI Mode Configuration ------------------------*/
			/* Configure the External Interrupt or event for the current IO */
			if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) {
				/* Enable SYSCFG Clock */
				__HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c74:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8004e14 <HAL_GPIO_Init+0x1a8>
				temp &= ~(0x0FU << (4U * (position & 0x03U)));
				temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
				SYSCFG->EXTICR[position >> 2U] = temp;

				/* Clear EXTI line configuration */
				temp = EXTI->IMR;
 8004c78:	4a64      	ldr	r2, [pc, #400]	; (8004e0c <HAL_GPIO_Init+0x1a0>)
		iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c7a:	9301      	str	r3, [sp, #4]
		ioposition = 0x01U << position;
 8004c7c:	f04f 0901 	mov.w	r9, #1
	for (position = 0U; position < GPIO_NUMBER; position++) {
 8004c80:	2300      	movs	r3, #0
		iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c82:	9c01      	ldr	r4, [sp, #4]
		ioposition = 0x01U << position;
 8004c84:	fa09 f703 	lsl.w	r7, r9, r3
		iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c88:	ea07 0604 	and.w	r6, r7, r4
		if (iocurrent == ioposition) {
 8004c8c:	42b7      	cmp	r7, r6
 8004c8e:	f040 80ad 	bne.w	8004dec <HAL_GPIO_Init+0x180>
			if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) {
 8004c92:	684c      	ldr	r4, [r1, #4]
 8004c94:	f024 0a10 	bic.w	sl, r4, #16
 8004c98:	f1ba 0f02 	cmp.w	sl, #2
 8004c9c:	d116      	bne.n	8004ccc <HAL_GPIO_Init+0x60>
				temp = GPIOx->AFR[position >> 3U];
 8004c9e:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8004ca2:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
				temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U));
 8004ca6:	f003 0b07 	and.w	fp, r3, #7
				temp = GPIOx->AFR[position >> 3U];
 8004caa:	f8dc 5020 	ldr.w	r5, [ip, #32]
				temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U));
 8004cae:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8004cb2:	f04f 0e0f 	mov.w	lr, #15
 8004cb6:	fa0e fe0b 	lsl.w	lr, lr, fp
 8004cba:	ea25 0e0e 	bic.w	lr, r5, lr
				temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004cbe:	690d      	ldr	r5, [r1, #16]
 8004cc0:	fa05 f50b 	lsl.w	r5, r5, fp
 8004cc4:	ea45 050e 	orr.w	r5, r5, lr
				GPIOx->AFR[position >> 3U] = temp;
 8004cc8:	f8cc 5020 	str.w	r5, [ip, #32]
 8004ccc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
			temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004cd0:	2503      	movs	r5, #3
			temp = GPIOx->MODER;
 8004cd2:	f8d0 b000 	ldr.w	fp, [r0]
			temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004cd6:	fa05 f50c 	lsl.w	r5, r5, ip
 8004cda:	43ed      	mvns	r5, r5
			temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004cdc:	f004 0e03 	and.w	lr, r4, #3
			temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004ce0:	ea0b 0b05 	and.w	fp, fp, r5
			temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ce4:	fa0e fe0c 	lsl.w	lr, lr, ip
			if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ce8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
			temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004cec:	ea4e 0e0b 	orr.w	lr, lr, fp
			if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004cf0:	f1ba 0f01 	cmp.w	sl, #1
			temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004cf4:	9500      	str	r5, [sp, #0]
			GPIOx->MODER = temp;
 8004cf6:	f8c0 e000 	str.w	lr, [r0]
			if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004cfa:	d815      	bhi.n	8004d28 <HAL_GPIO_Init+0xbc>
				temp = GPIOx->OSPEEDR;
 8004cfc:	f8d0 e008 	ldr.w	lr, [r0, #8]
				temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d00:	ea05 0e0e 	and.w	lr, r5, lr
				temp |= (GPIO_Init->Speed << (position * 2U));
 8004d04:	68cd      	ldr	r5, [r1, #12]
 8004d06:	fa05 fa0c 	lsl.w	sl, r5, ip
 8004d0a:	ea4a 0e0e 	orr.w	lr, sl, lr
				GPIOx->OSPEEDR = temp;
 8004d0e:	f8c0 e008 	str.w	lr, [r0, #8]
				temp = GPIOx->OTYPER;
 8004d12:	f8d0 e004 	ldr.w	lr, [r0, #4]
				temp &= ~(GPIO_OTYPER_OT_0 << position);
 8004d16:	ea2e 0707 	bic.w	r7, lr, r7
				temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004d1a:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 8004d1e:	fa0e fe03 	lsl.w	lr, lr, r3
 8004d22:	ea4e 0707 	orr.w	r7, lr, r7
				GPIOx->OTYPER = temp;
 8004d26:	6047      	str	r7, [r0, #4]
			temp = GPIOx->PUPDR;
 8004d28:	68c7      	ldr	r7, [r0, #12]
			temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d2a:	9d00      	ldr	r5, [sp, #0]
 8004d2c:	403d      	ands	r5, r7
			temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d2e:	688f      	ldr	r7, [r1, #8]
 8004d30:	fa07 f70c 	lsl.w	r7, r7, ip
 8004d34:	433d      	orrs	r5, r7
			GPIOx->PUPDR = temp;
 8004d36:	60c5      	str	r5, [r0, #12]
			if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) {
 8004d38:	00e5      	lsls	r5, r4, #3
 8004d3a:	d557      	bpl.n	8004dec <HAL_GPIO_Init+0x180>
				__HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d3c:	f04f 0b00 	mov.w	fp, #0
 8004d40:	f8cd b00c 	str.w	fp, [sp, #12]
 8004d44:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
				temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004d48:	4d31      	ldr	r5, [pc, #196]	; (8004e10 <HAL_GPIO_Init+0x1a4>)
				__HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d4a:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8004d4e:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8004d52:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8004d56:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8004d5a:	9703      	str	r7, [sp, #12]
 8004d5c:	9f03      	ldr	r7, [sp, #12]
 8004d5e:	f023 0703 	bic.w	r7, r3, #3
 8004d62:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8004d66:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
				temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d6a:	f003 0c03 	and.w	ip, r3, #3
				temp = SYSCFG->EXTICR[position >> 2U];
 8004d6e:	f8d7 a008 	ldr.w	sl, [r7, #8]
				temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d72:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004d76:	f04f 0e0f 	mov.w	lr, #15
 8004d7a:	fa0e fe0c 	lsl.w	lr, lr, ip
				temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004d7e:	42a8      	cmp	r0, r5
				temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d80:	ea2a 0e0e 	bic.w	lr, sl, lr
				temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004d84:	d039      	beq.n	8004dfa <HAL_GPIO_Init+0x18e>
 8004d86:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004d8a:	42a8      	cmp	r0, r5
 8004d8c:	d037      	beq.n	8004dfe <HAL_GPIO_Init+0x192>
 8004d8e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004d92:	42a8      	cmp	r0, r5
 8004d94:	d035      	beq.n	8004e02 <HAL_GPIO_Init+0x196>
 8004d96:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004d9a:	42a8      	cmp	r0, r5
 8004d9c:	d033      	beq.n	8004e06 <HAL_GPIO_Init+0x19a>
 8004d9e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004da2:	42a8      	cmp	r0, r5
 8004da4:	bf14      	ite	ne
 8004da6:	2507      	movne	r5, #7
 8004da8:	2504      	moveq	r5, #4
 8004daa:	fa05 f50c 	lsl.w	r5, r5, ip
 8004dae:	ea45 050e 	orr.w	r5, r5, lr
				SYSCFG->EXTICR[position >> 2U] = temp;
 8004db2:	60bd      	str	r5, [r7, #8]
				temp = EXTI->IMR;
 8004db4:	6815      	ldr	r5, [r2, #0]
				temp &= ~((uint32_t)iocurrent);
 8004db6:	43f7      	mvns	r7, r6
				if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT) {
 8004db8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
				temp &= ~((uint32_t)iocurrent);
 8004dbc:	bf0c      	ite	eq
 8004dbe:	403d      	andeq	r5, r7
					temp |= iocurrent;
 8004dc0:	4335      	orrne	r5, r6
				}
				EXTI->IMR = temp;
 8004dc2:	6015      	str	r5, [r2, #0]

				temp = EXTI->EMR;
 8004dc4:	6855      	ldr	r5, [r2, #4]
				temp &= ~((uint32_t)iocurrent);
				if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT) {
 8004dc6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
				temp &= ~((uint32_t)iocurrent);
 8004dca:	bf0c      	ite	eq
 8004dcc:	403d      	andeq	r5, r7
					temp |= iocurrent;
 8004dce:	4335      	orrne	r5, r6
				}
				EXTI->EMR = temp;
 8004dd0:	6055      	str	r5, [r2, #4]

				/* Clear Rising Falling edge configuration */
				temp = EXTI->RTSR;
 8004dd2:	6895      	ldr	r5, [r2, #8]
				temp &= ~((uint32_t)iocurrent);
				if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE) {
 8004dd4:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
				temp &= ~((uint32_t)iocurrent);
 8004dd8:	bf0c      	ite	eq
 8004dda:	403d      	andeq	r5, r7
					temp |= iocurrent;
 8004ddc:	4335      	orrne	r5, r6
				}
				EXTI->RTSR = temp;
 8004dde:	6095      	str	r5, [r2, #8]

				temp = EXTI->FTSR;
 8004de0:	68d5      	ldr	r5, [r2, #12]
				temp &= ~((uint32_t)iocurrent);
				if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE) {
 8004de2:	02a4      	lsls	r4, r4, #10
				temp &= ~((uint32_t)iocurrent);
 8004de4:	bf54      	ite	pl
 8004de6:	403d      	andpl	r5, r7
					temp |= iocurrent;
 8004de8:	4335      	orrmi	r5, r6
				}
				EXTI->FTSR = temp;
 8004dea:	60d5      	str	r5, [r2, #12]
	for (position = 0U; position < GPIO_NUMBER; position++) {
 8004dec:	3301      	adds	r3, #1
 8004dee:	2b10      	cmp	r3, #16
 8004df0:	f47f af47 	bne.w	8004c82 <HAL_GPIO_Init+0x16>
			}
		}
	}
}
 8004df4:	b005      	add	sp, #20
 8004df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004dfa:	465d      	mov	r5, fp
 8004dfc:	e7d5      	b.n	8004daa <HAL_GPIO_Init+0x13e>
 8004dfe:	2501      	movs	r5, #1
 8004e00:	e7d3      	b.n	8004daa <HAL_GPIO_Init+0x13e>
 8004e02:	2502      	movs	r5, #2
 8004e04:	e7d1      	b.n	8004daa <HAL_GPIO_Init+0x13e>
 8004e06:	2503      	movs	r5, #3
 8004e08:	e7cf      	b.n	8004daa <HAL_GPIO_Init+0x13e>
 8004e0a:	bf00      	nop
 8004e0c:	40013c00 	.word	0x40013c00
 8004e10:	40020000 	.word	0x40020000
 8004e14:	40023800 	.word	0x40023800

08004e18 <HAL_GPIO_ReadPin>:
	GPIO_PinState bitstatus;

	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));

	if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET) {
 8004e18:	6903      	ldr	r3, [r0, #16]
 8004e1a:	4219      	tst	r1, r3
		bitstatus = GPIO_PIN_SET;
	}else  {
		bitstatus = GPIO_PIN_RESET;
	}
	return bitstatus;
}
 8004e1c:	bf14      	ite	ne
 8004e1e:	2001      	movne	r0, #1
 8004e20:	2000      	moveq	r0, #0
 8004e22:	4770      	bx	lr

08004e24 <HAL_GPIO_WritePin>:
{
	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));
	assert_param(IS_GPIO_PIN_ACTION(PinState));

	if (PinState != GPIO_PIN_RESET) {
 8004e24:	b10a      	cbz	r2, 8004e2a <HAL_GPIO_WritePin+0x6>
		GPIOx->BSRR = GPIO_Pin;
	}else  {
		GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e26:	6181      	str	r1, [r0, #24]
 8004e28:	4770      	bx	lr
 8004e2a:	0409      	lsls	r1, r1, #16
 8004e2c:	e7fb      	b.n	8004e26 <HAL_GPIO_WritePin+0x2>

08004e2e <I2C_IsAcknowledgeFailed>:
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
	if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) {
 8004e2e:	6802      	ldr	r2, [r0, #0]
 8004e30:	6953      	ldr	r3, [r2, #20]
 8004e32:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8004e36:	d00d      	beq.n	8004e54 <I2C_IsAcknowledgeFailed+0x26>
		/* Clear NACKF Flag */
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e38:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8004e3c:	6153      	str	r3, [r2, #20]

		hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004e3e:	2304      	movs	r3, #4
 8004e40:	6403      	str	r3, [r0, #64]	; 0x40
		hi2c->PreviousState = I2C_STATE_NONE;
		hi2c->State = HAL_I2C_STATE_READY;
 8004e42:	2220      	movs	r2, #32
		hi2c->PreviousState = I2C_STATE_NONE;
 8004e44:	2300      	movs	r3, #0
 8004e46:	6303      	str	r3, [r0, #48]	; 0x30

		/* Process Unlocked */
		__HAL_UNLOCK(hi2c);
 8004e48:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
		hi2c->State = HAL_I2C_STATE_READY;
 8004e4c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

		return HAL_ERROR;
 8004e50:	2001      	movs	r0, #1
 8004e52:	4770      	bx	lr
	}
	return HAL_OK;
 8004e54:	4618      	mov	r0, r3
}
 8004e56:	4770      	bx	lr

08004e58 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8004e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e5c:	4604      	mov	r4, r0
 8004e5e:	4617      	mov	r7, r2
 8004e60:	4699      	mov	r9, r3
	while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET) {
 8004e62:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8004e66:	b28e      	uxth	r6, r1
 8004e68:	6825      	ldr	r5, [r4, #0]
 8004e6a:	f1b8 0f01 	cmp.w	r8, #1
 8004e6e:	bf0c      	ite	eq
 8004e70:	696b      	ldreq	r3, [r5, #20]
 8004e72:	69ab      	ldrne	r3, [r5, #24]
 8004e74:	ea36 0303 	bics.w	r3, r6, r3
 8004e78:	bf14      	ite	ne
 8004e7a:	2001      	movne	r0, #1
 8004e7c:	2000      	moveq	r0, #0
 8004e7e:	b908      	cbnz	r0, 8004e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8004e80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) {
 8004e84:	696b      	ldr	r3, [r5, #20]
 8004e86:	055a      	lsls	r2, r3, #21
 8004e88:	d512      	bpl.n	8004eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
			hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004e8a:	682b      	ldr	r3, [r5, #0]
 8004e8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e90:	602b      	str	r3, [r5, #0]
			__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e92:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8004e96:	616b      	str	r3, [r5, #20]
			hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004e98:	2304      	movs	r3, #4
 8004e9a:	6423      	str	r3, [r4, #64]	; 0x40
			hi2c->State = HAL_I2C_STATE_READY;
 8004e9c:	2220      	movs	r2, #32
			hi2c->PreviousState = I2C_STATE_NONE;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	6323      	str	r3, [r4, #48]	; 0x30
			__HAL_UNLOCK(hi2c);
 8004ea2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			hi2c->State = HAL_I2C_STATE_READY;
 8004ea6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
			return HAL_ERROR;
 8004eaa:	2001      	movs	r0, #1
 8004eac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (Timeout != HAL_MAX_DELAY) {
 8004eb0:	1c7b      	adds	r3, r7, #1
 8004eb2:	d0d9      	beq.n	8004e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
			if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 8004eb4:	b94f      	cbnz	r7, 8004eca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
				hi2c->PreviousState = I2C_STATE_NONE;
 8004eb6:	2300      	movs	r3, #0
				hi2c->State = HAL_I2C_STATE_READY;
 8004eb8:	2220      	movs	r2, #32
				hi2c->PreviousState = I2C_STATE_NONE;
 8004eba:	6323      	str	r3, [r4, #48]	; 0x30
				__HAL_UNLOCK(hi2c);
 8004ebc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
				hi2c->State = HAL_I2C_STATE_READY;
 8004ec0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
				return HAL_TIMEOUT;
 8004ec4:	2003      	movs	r0, #3
 8004ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 8004eca:	f7ff facd 	bl	8004468 <HAL_GetTick>
 8004ece:	eba0 0009 	sub.w	r0, r0, r9
 8004ed2:	4287      	cmp	r7, r0
 8004ed4:	d2c8      	bcs.n	8004e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8004ed6:	e7ee      	b.n	8004eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08004ed8 <I2C_WaitOnFlagUntilTimeout>:
{
 8004ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004edc:	9e08      	ldr	r6, [sp, #32]
 8004ede:	4604      	mov	r4, r0
 8004ee0:	4690      	mov	r8, r2
 8004ee2:	461f      	mov	r7, r3
	while ((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) {
 8004ee4:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8004ee8:	b28d      	uxth	r5, r1
 8004eea:	6823      	ldr	r3, [r4, #0]
 8004eec:	f1b9 0f01 	cmp.w	r9, #1
 8004ef0:	bf0c      	ite	eq
 8004ef2:	695b      	ldreq	r3, [r3, #20]
 8004ef4:	699b      	ldrne	r3, [r3, #24]
 8004ef6:	ea35 0303 	bics.w	r3, r5, r3
 8004efa:	bf0c      	ite	eq
 8004efc:	2301      	moveq	r3, #1
 8004efe:	2300      	movne	r3, #0
 8004f00:	4543      	cmp	r3, r8
 8004f02:	d002      	beq.n	8004f0a <I2C_WaitOnFlagUntilTimeout+0x32>
	return HAL_OK;
 8004f04:	2000      	movs	r0, #0
}
 8004f06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (Timeout != HAL_MAX_DELAY) {
 8004f0a:	1c7b      	adds	r3, r7, #1
 8004f0c:	d0ed      	beq.n	8004eea <I2C_WaitOnFlagUntilTimeout+0x12>
			if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 8004f0e:	b95f      	cbnz	r7, 8004f28 <I2C_WaitOnFlagUntilTimeout+0x50>
				hi2c->PreviousState = I2C_STATE_NONE;
 8004f10:	2300      	movs	r3, #0
				hi2c->State = HAL_I2C_STATE_READY;
 8004f12:	2220      	movs	r2, #32
				hi2c->PreviousState = I2C_STATE_NONE;
 8004f14:	6323      	str	r3, [r4, #48]	; 0x30
				__HAL_UNLOCK(hi2c);
 8004f16:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
				hi2c->State = HAL_I2C_STATE_READY;
 8004f1a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
				__HAL_UNLOCK(hi2c);
 8004f1e:	2003      	movs	r0, #3
				hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f20:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004f24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 8004f28:	f7ff fa9e 	bl	8004468 <HAL_GetTick>
 8004f2c:	1b80      	subs	r0, r0, r6
 8004f2e:	4287      	cmp	r7, r0
 8004f30:	d2db      	bcs.n	8004eea <I2C_WaitOnFlagUntilTimeout+0x12>
 8004f32:	e7ed      	b.n	8004f10 <I2C_WaitOnFlagUntilTimeout+0x38>

08004f34 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8004f34:	b570      	push	{r4, r5, r6, lr}
 8004f36:	4604      	mov	r4, r0
 8004f38:	460d      	mov	r5, r1
 8004f3a:	4616      	mov	r6, r2
	while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET) {
 8004f3c:	6823      	ldr	r3, [r4, #0]
 8004f3e:	695b      	ldr	r3, [r3, #20]
 8004f40:	061b      	lsls	r3, r3, #24
 8004f42:	d501      	bpl.n	8004f48 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
	return HAL_OK;
 8004f44:	2000      	movs	r0, #0
 8004f46:	bd70      	pop	{r4, r5, r6, pc}
		if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK) {
 8004f48:	4620      	mov	r0, r4
 8004f4a:	f7ff ff70 	bl	8004e2e <I2C_IsAcknowledgeFailed>
 8004f4e:	b9a8      	cbnz	r0, 8004f7c <I2C_WaitOnTXEFlagUntilTimeout+0x48>
		if (Timeout != HAL_MAX_DELAY) {
 8004f50:	1c6a      	adds	r2, r5, #1
 8004f52:	d0f3      	beq.n	8004f3c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
			if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 8004f54:	b965      	cbnz	r5, 8004f70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
				hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f58:	f043 0320 	orr.w	r3, r3, #32
 8004f5c:	6423      	str	r3, [r4, #64]	; 0x40
				hi2c->State = HAL_I2C_STATE_READY;
 8004f5e:	2220      	movs	r2, #32
				hi2c->PreviousState = I2C_STATE_NONE;
 8004f60:	2300      	movs	r3, #0
 8004f62:	6323      	str	r3, [r4, #48]	; 0x30
				__HAL_UNLOCK(hi2c);
 8004f64:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
				hi2c->State = HAL_I2C_STATE_READY;
 8004f68:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
				__HAL_UNLOCK(hi2c);
 8004f6c:	2003      	movs	r0, #3
 8004f6e:	bd70      	pop	{r4, r5, r6, pc}
			if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 8004f70:	f7ff fa7a 	bl	8004468 <HAL_GetTick>
 8004f74:	1b80      	subs	r0, r0, r6
 8004f76:	4285      	cmp	r5, r0
 8004f78:	d2e0      	bcs.n	8004f3c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8004f7a:	e7ec      	b.n	8004f56 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
			return HAL_ERROR;
 8004f7c:	2001      	movs	r0, #1
}
 8004f7e:	bd70      	pop	{r4, r5, r6, pc}

08004f80 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8004f80:	b570      	push	{r4, r5, r6, lr}
 8004f82:	4604      	mov	r4, r0
 8004f84:	460d      	mov	r5, r1
 8004f86:	4616      	mov	r6, r2
	while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) {
 8004f88:	6820      	ldr	r0, [r4, #0]
 8004f8a:	6943      	ldr	r3, [r0, #20]
 8004f8c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8004f90:	d001      	beq.n	8004f96 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
	return HAL_OK;
 8004f92:	2000      	movs	r0, #0
}
 8004f94:	bd70      	pop	{r4, r5, r6, pc}
		if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) {
 8004f96:	6942      	ldr	r2, [r0, #20]
 8004f98:	06d2      	lsls	r2, r2, #27
 8004f9a:	d50b      	bpl.n	8004fb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
			__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f9c:	f06f 0210 	mvn.w	r2, #16
 8004fa0:	6142      	str	r2, [r0, #20]
			hi2c->State = HAL_I2C_STATE_READY;
 8004fa2:	2220      	movs	r2, #32
			hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fa4:	6423      	str	r3, [r4, #64]	; 0x40
			__HAL_UNLOCK(hi2c);
 8004fa6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			hi2c->PreviousState = I2C_STATE_NONE;
 8004faa:	6323      	str	r3, [r4, #48]	; 0x30
			return HAL_ERROR;
 8004fac:	2001      	movs	r0, #1
			hi2c->State = HAL_I2C_STATE_READY;
 8004fae:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
			return HAL_ERROR;
 8004fb2:	bd70      	pop	{r4, r5, r6, pc}
		if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 8004fb4:	b95d      	cbnz	r5, 8004fce <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
			hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004fb8:	f043 0320 	orr.w	r3, r3, #32
 8004fbc:	6423      	str	r3, [r4, #64]	; 0x40
			hi2c->State = HAL_I2C_STATE_READY;
 8004fbe:	2320      	movs	r3, #32
 8004fc0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
			__HAL_UNLOCK(hi2c);
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8004fca:	2003      	movs	r0, #3
 8004fcc:	bd70      	pop	{r4, r5, r6, pc}
		if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 8004fce:	f7ff fa4b 	bl	8004468 <HAL_GetTick>
 8004fd2:	1b80      	subs	r0, r0, r6
 8004fd4:	4285      	cmp	r5, r0
 8004fd6:	d2d7      	bcs.n	8004f88 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8004fd8:	e7ed      	b.n	8004fb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

08004fda <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8004fda:	b570      	push	{r4, r5, r6, lr}
 8004fdc:	4604      	mov	r4, r0
 8004fde:	460d      	mov	r5, r1
 8004fe0:	4616      	mov	r6, r2
	while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET) {
 8004fe2:	6823      	ldr	r3, [r4, #0]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	075b      	lsls	r3, r3, #29
 8004fe8:	d501      	bpl.n	8004fee <I2C_WaitOnBTFFlagUntilTimeout+0x14>
	return HAL_OK;
 8004fea:	2000      	movs	r0, #0
 8004fec:	bd70      	pop	{r4, r5, r6, pc}
		if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK) {
 8004fee:	4620      	mov	r0, r4
 8004ff0:	f7ff ff1d 	bl	8004e2e <I2C_IsAcknowledgeFailed>
 8004ff4:	b9a8      	cbnz	r0, 8005022 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
		if (Timeout != HAL_MAX_DELAY) {
 8004ff6:	1c6a      	adds	r2, r5, #1
 8004ff8:	d0f3      	beq.n	8004fe2 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
			if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 8004ffa:	b965      	cbnz	r5, 8005016 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
				hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ffc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ffe:	f043 0320 	orr.w	r3, r3, #32
 8005002:	6423      	str	r3, [r4, #64]	; 0x40
				hi2c->State = HAL_I2C_STATE_READY;
 8005004:	2220      	movs	r2, #32
				hi2c->PreviousState = I2C_STATE_NONE;
 8005006:	2300      	movs	r3, #0
 8005008:	6323      	str	r3, [r4, #48]	; 0x30
				__HAL_UNLOCK(hi2c);
 800500a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
				hi2c->State = HAL_I2C_STATE_READY;
 800500e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
				__HAL_UNLOCK(hi2c);
 8005012:	2003      	movs	r0, #3
 8005014:	bd70      	pop	{r4, r5, r6, pc}
			if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 8005016:	f7ff fa27 	bl	8004468 <HAL_GetTick>
 800501a:	1b80      	subs	r0, r0, r6
 800501c:	4285      	cmp	r5, r0
 800501e:	d2e0      	bcs.n	8004fe2 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8005020:	e7ec      	b.n	8004ffc <I2C_WaitOnBTFFlagUntilTimeout+0x22>
			return HAL_ERROR;
 8005022:	2001      	movs	r0, #1
}
 8005024:	bd70      	pop	{r4, r5, r6, pc}
	...

08005028 <HAL_I2C_Init>:
{
 8005028:	b570      	push	{r4, r5, r6, lr}
	if (hi2c == NULL) {
 800502a:	4604      	mov	r4, r0
 800502c:	2800      	cmp	r0, #0
 800502e:	d062      	beq.n	80050f6 <HAL_I2C_Init+0xce>
	if (hi2c->State == HAL_I2C_STATE_RESET) {
 8005030:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005034:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005038:	b91b      	cbnz	r3, 8005042 <HAL_I2C_Init+0x1a>
		hi2c->Lock = HAL_UNLOCKED;
 800503a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
		HAL_I2C_MspInit(hi2c);
 800503e:	f002 fa2b 	bl	8007498 <HAL_I2C_MspInit>
	__HAL_I2C_DISABLE(hi2c);
 8005042:	6822      	ldr	r2, [r4, #0]
	hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8005044:	4e2d      	ldr	r6, [pc, #180]	; (80050fc <HAL_I2C_Init+0xd4>)
	freqrange = I2C_FREQRANGE(pclk1);
 8005046:	4d2e      	ldr	r5, [pc, #184]	; (8005100 <HAL_I2C_Init+0xd8>)
	hi2c->State = HAL_I2C_STATE_BUSY;
 8005048:	2324      	movs	r3, #36	; 0x24
 800504a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	__HAL_I2C_DISABLE(hi2c);
 800504e:	6813      	ldr	r3, [r2, #0]
 8005050:	f023 0301 	bic.w	r3, r3, #1
 8005054:	6013      	str	r3, [r2, #0]
	pclk1 = HAL_RCC_GetPCLK1Freq();
 8005056:	f001 f9b3 	bl	80063c0 <HAL_RCC_GetPCLK1Freq>
	hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800505a:	6863      	ldr	r3, [r4, #4]
	hi2c->Instance->CR2 = freqrange;
 800505c:	6822      	ldr	r2, [r4, #0]
	freqrange = I2C_FREQRANGE(pclk1);
 800505e:	fbb0 f5f5 	udiv	r5, r0, r5
	hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8005062:	42b3      	cmp	r3, r6
 8005064:	bf84      	itt	hi
 8005066:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 800506a:	4369      	mulhi	r1, r5
	hi2c->Instance->CR2 = freqrange;
 800506c:	6055      	str	r5, [r2, #4]
	hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800506e:	bf91      	iteee	ls
 8005070:	1c69      	addls	r1, r5, #1
 8005072:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 8005076:	fbb1 f1f5 	udivhi	r1, r1, r5
 800507a:	3101      	addhi	r1, #1
	hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800507c:	42b3      	cmp	r3, r6
	hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800507e:	6211      	str	r1, [r2, #32]
	hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8005080:	d821      	bhi.n	80050c6 <HAL_I2C_Init+0x9e>
 8005082:	005b      	lsls	r3, r3, #1
 8005084:	fbb0 f0f3 	udiv	r0, r0, r3
 8005088:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800508c:	2b03      	cmp	r3, #3
 800508e:	bf98      	it	ls
 8005090:	2004      	movls	r0, #4
	hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005092:	6a21      	ldr	r1, [r4, #32]
 8005094:	69e3      	ldr	r3, [r4, #28]
	hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8005096:	61d0      	str	r0, [r2, #28]
	hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005098:	430b      	orrs	r3, r1
 800509a:	6013      	str	r3, [r2, #0]
	hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 800509c:	68e1      	ldr	r1, [r4, #12]
 800509e:	6923      	ldr	r3, [r4, #16]
 80050a0:	430b      	orrs	r3, r1
 80050a2:	6093      	str	r3, [r2, #8]
	hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80050a4:	69a1      	ldr	r1, [r4, #24]
 80050a6:	6963      	ldr	r3, [r4, #20]
 80050a8:	430b      	orrs	r3, r1
 80050aa:	60d3      	str	r3, [r2, #12]
	__HAL_I2C_ENABLE(hi2c);
 80050ac:	6813      	ldr	r3, [r2, #0]
 80050ae:	f043 0301 	orr.w	r3, r3, #1
 80050b2:	6013      	str	r3, [r2, #0]
	hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050b4:	2000      	movs	r0, #0
	hi2c->State = HAL_I2C_STATE_READY;
 80050b6:	2320      	movs	r3, #32
	hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050b8:	6420      	str	r0, [r4, #64]	; 0x40
	hi2c->State = HAL_I2C_STATE_READY;
 80050ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	hi2c->PreviousState = I2C_STATE_NONE;
 80050be:	6320      	str	r0, [r4, #48]	; 0x30
	hi2c->Mode = HAL_I2C_MODE_NONE;
 80050c0:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
	return HAL_OK;
 80050c4:	bd70      	pop	{r4, r5, r6, pc}
	hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80050c6:	68a1      	ldr	r1, [r4, #8]
 80050c8:	b949      	cbnz	r1, 80050de <HAL_I2C_Init+0xb6>
 80050ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80050ce:	fbb0 f0f3 	udiv	r0, r0, r3
 80050d2:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80050d6:	b163      	cbz	r3, 80050f2 <HAL_I2C_Init+0xca>
 80050d8:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 80050dc:	e7d9      	b.n	8005092 <HAL_I2C_Init+0x6a>
 80050de:	2119      	movs	r1, #25
 80050e0:	434b      	muls	r3, r1
 80050e2:	fbb0 f0f3 	udiv	r0, r0, r3
 80050e6:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80050ea:	b113      	cbz	r3, 80050f2 <HAL_I2C_Init+0xca>
 80050ec:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 80050f0:	e7cf      	b.n	8005092 <HAL_I2C_Init+0x6a>
 80050f2:	2001      	movs	r0, #1
 80050f4:	e7cd      	b.n	8005092 <HAL_I2C_Init+0x6a>
		return HAL_ERROR;
 80050f6:	2001      	movs	r0, #1
}
 80050f8:	bd70      	pop	{r4, r5, r6, pc}
 80050fa:	bf00      	nop
 80050fc:	000186a0 	.word	0x000186a0
 8005100:	000f4240 	.word	0x000f4240

08005104 <HAL_I2C_Master_Transmit>:
{
 8005104:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005108:	4604      	mov	r4, r0
 800510a:	461f      	mov	r7, r3
 800510c:	460d      	mov	r5, r1
 800510e:	4690      	mov	r8, r2
	tickstart = HAL_GetTick();
 8005110:	f7ff f9aa 	bl	8004468 <HAL_GetTick>
	if (hi2c->State == HAL_I2C_STATE_READY) {
 8005114:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8005118:	2b20      	cmp	r3, #32
	tickstart = HAL_GetTick();
 800511a:	4606      	mov	r6, r0
	if (hi2c->State == HAL_I2C_STATE_READY) {
 800511c:	d004      	beq.n	8005128 <HAL_I2C_Master_Transmit+0x24>
		return HAL_BUSY;
 800511e:	2502      	movs	r5, #2
}
 8005120:	4628      	mov	r0, r5
 8005122:	b004      	add	sp, #16
 8005124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK) {
 8005128:	9000      	str	r0, [sp, #0]
 800512a:	2319      	movs	r3, #25
 800512c:	2201      	movs	r2, #1
 800512e:	495d      	ldr	r1, [pc, #372]	; (80052a4 <HAL_I2C_Master_Transmit+0x1a0>)
 8005130:	4620      	mov	r0, r4
 8005132:	f7ff fed1 	bl	8004ed8 <I2C_WaitOnFlagUntilTimeout>
 8005136:	2800      	cmp	r0, #0
 8005138:	d1f1      	bne.n	800511e <HAL_I2C_Master_Transmit+0x1a>
		__HAL_LOCK(hi2c);
 800513a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800513e:	2b01      	cmp	r3, #1
 8005140:	d0ed      	beq.n	800511e <HAL_I2C_Master_Transmit+0x1a>
 8005142:	2301      	movs	r3, #1
 8005144:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE) {
 8005148:	6823      	ldr	r3, [r4, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	07d2      	lsls	r2, r2, #31
			__HAL_I2C_ENABLE(hi2c);
 800514e:	bf5e      	ittt	pl
 8005150:	681a      	ldrpl	r2, [r3, #0]
 8005152:	f042 0201 	orrpl.w	r2, r2, #1
 8005156:	601a      	strpl	r2, [r3, #0]
		hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800515e:	601a      	str	r2, [r3, #0]
		hi2c->State = HAL_I2C_STATE_BUSY_TX;
 8005160:	2221      	movs	r2, #33	; 0x21
 8005162:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_MASTER;
 8005166:	2210      	movs	r2, #16
 8005168:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
		hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800516c:	2200      	movs	r2, #0
 800516e:	6422      	str	r2, [r4, #64]	; 0x40
		hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005170:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
		hi2c->XferCount = Size;
 8005174:	8567      	strh	r7, [r4, #42]	; 0x2a
		hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005176:	62e2      	str	r2, [r4, #44]	; 0x2c
		hi2c->XferSize = hi2c->XferCount;
 8005178:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800517a:	8522      	strh	r2, [r4, #40]	; 0x28
	uint32_t CurrentXferOptions = hi2c->XferOptions;
 800517c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		hi2c->pBuffPtr = pData;
 800517e:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
	if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME)) {
 8005182:	2a04      	cmp	r2, #4
 8005184:	d004      	beq.n	8005190 <HAL_I2C_Master_Transmit+0x8c>
 8005186:	2a01      	cmp	r2, #1
 8005188:	d002      	beq.n	8005190 <HAL_I2C_Master_Transmit+0x8c>
 800518a:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800518e:	d104      	bne.n	800519a <HAL_I2C_Master_Transmit+0x96>
		hi2c->Instance->CR1 |= I2C_CR1_START;
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005196:	601a      	str	r2, [r3, #0]
 8005198:	e002      	b.n	80051a0 <HAL_I2C_Master_Transmit+0x9c>
	}else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) {
 800519a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800519c:	2a12      	cmp	r2, #18
 800519e:	d0f7      	beq.n	8005190 <HAL_I2C_Master_Transmit+0x8c>
	if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 80051a0:	9600      	str	r6, [sp, #0]
 80051a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051a4:	2200      	movs	r2, #0
 80051a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051aa:	4620      	mov	r0, r4
 80051ac:	f7ff fe94 	bl	8004ed8 <I2C_WaitOnFlagUntilTimeout>
 80051b0:	bb28      	cbnz	r0, 80051fe <HAL_I2C_Master_Transmit+0xfa>
	if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT) {
 80051b2:	6923      	ldr	r3, [r4, #16]
 80051b4:	6822      	ldr	r2, [r4, #0]
 80051b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051ba:	d112      	bne.n	80051e2 <HAL_I2C_Master_Transmit+0xde>
		hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051bc:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 80051c0:	6115      	str	r5, [r2, #16]
	if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 80051c2:	4633      	mov	r3, r6
 80051c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80051c6:	4938      	ldr	r1, [pc, #224]	; (80052a8 <HAL_I2C_Master_Transmit+0x1a4>)
 80051c8:	4620      	mov	r0, r4
 80051ca:	f7ff fe45 	bl	8004e58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051ce:	4605      	mov	r5, r0
 80051d0:	b9a0      	cbnz	r0, 80051fc <HAL_I2C_Master_Transmit+0xf8>
		__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051d2:	6823      	ldr	r3, [r4, #0]
 80051d4:	9003      	str	r0, [sp, #12]
 80051d6:	695a      	ldr	r2, [r3, #20]
 80051d8:	9203      	str	r2, [sp, #12]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	9303      	str	r3, [sp, #12]
 80051de:	9b03      	ldr	r3, [sp, #12]
		while (hi2c->XferSize > 0U) {
 80051e0:	e050      	b.n	8005284 <HAL_I2C_Master_Transmit+0x180>
		hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80051e2:	11eb      	asrs	r3, r5, #7
 80051e4:	f003 0306 	and.w	r3, r3, #6
 80051e8:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80051ec:	6113      	str	r3, [r2, #16]
		if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK) {
 80051ee:	492f      	ldr	r1, [pc, #188]	; (80052ac <HAL_I2C_Master_Transmit+0x1a8>)
 80051f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80051f2:	4633      	mov	r3, r6
 80051f4:	4620      	mov	r0, r4
 80051f6:	f7ff fe2f 	bl	8004e58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051fa:	b148      	cbz	r0, 8005210 <HAL_I2C_Master_Transmit+0x10c>
		if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 80051fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
			if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 80051fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005200:	2b04      	cmp	r3, #4
 8005202:	f04f 0300 	mov.w	r3, #0
 8005206:	d107      	bne.n	8005218 <HAL_I2C_Master_Transmit+0x114>
				__HAL_UNLOCK(hi2c);
 8005208:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
					return HAL_ERROR;
 800520c:	2501      	movs	r5, #1
 800520e:	e787      	b.n	8005120 <HAL_I2C_Master_Transmit+0x1c>
		hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005210:	6823      	ldr	r3, [r4, #0]
 8005212:	b2ed      	uxtb	r5, r5
 8005214:	611d      	str	r5, [r3, #16]
 8005216:	e7d4      	b.n	80051c2 <HAL_I2C_Master_Transmit+0xbe>
				__HAL_UNLOCK(hi2c);
 8005218:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
					return HAL_TIMEOUT;
 800521c:	2503      	movs	r5, #3
 800521e:	e77f      	b.n	8005120 <HAL_I2C_Master_Transmit+0x1c>
			if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8005220:	4632      	mov	r2, r6
 8005222:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005224:	4620      	mov	r0, r4
 8005226:	f7ff fe85 	bl	8004f34 <I2C_WaitOnTXEFlagUntilTimeout>
 800522a:	b140      	cbz	r0, 800523e <HAL_I2C_Master_Transmit+0x13a>
				if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 800522c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800522e:	2b04      	cmp	r3, #4
 8005230:	d1f4      	bne.n	800521c <HAL_I2C_Master_Transmit+0x118>
					hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005232:	6822      	ldr	r2, [r4, #0]
 8005234:	6813      	ldr	r3, [r2, #0]
 8005236:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800523a:	6013      	str	r3, [r2, #0]
 800523c:	e7e6      	b.n	800520c <HAL_I2C_Master_Transmit+0x108>
			hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800523e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005240:	6820      	ldr	r0, [r4, #0]
			hi2c->XferSize--;
 8005242:	8d22      	ldrh	r2, [r4, #40]	; 0x28
			hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8005244:	1c4b      	adds	r3, r1, #1
 8005246:	6263      	str	r3, [r4, #36]	; 0x24
 8005248:	780b      	ldrb	r3, [r1, #0]
 800524a:	6103      	str	r3, [r0, #16]
			hi2c->XferCount--;
 800524c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800524e:	3b01      	subs	r3, #1
 8005250:	b29b      	uxth	r3, r3
 8005252:	8563      	strh	r3, [r4, #42]	; 0x2a
			if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U)) {
 8005254:	6947      	ldr	r7, [r0, #20]
			hi2c->XferSize--;
 8005256:	1e53      	subs	r3, r2, #1
 8005258:	b29b      	uxth	r3, r3
			if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U)) {
 800525a:	077f      	lsls	r7, r7, #29
			hi2c->XferSize--;
 800525c:	8523      	strh	r3, [r4, #40]	; 0x28
			if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U)) {
 800525e:	d50a      	bpl.n	8005276 <HAL_I2C_Master_Transmit+0x172>
 8005260:	b14b      	cbz	r3, 8005276 <HAL_I2C_Master_Transmit+0x172>
				hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8005262:	1c8b      	adds	r3, r1, #2
 8005264:	6263      	str	r3, [r4, #36]	; 0x24
 8005266:	784b      	ldrb	r3, [r1, #1]
 8005268:	6103      	str	r3, [r0, #16]
				hi2c->XferCount--;
 800526a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800526c:	3b01      	subs	r3, #1
 800526e:	b29b      	uxth	r3, r3
				hi2c->XferSize--;
 8005270:	3a02      	subs	r2, #2
				hi2c->XferCount--;
 8005272:	8563      	strh	r3, [r4, #42]	; 0x2a
				hi2c->XferSize--;
 8005274:	8522      	strh	r2, [r4, #40]	; 0x28
			if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8005276:	4632      	mov	r2, r6
 8005278:	990a      	ldr	r1, [sp, #40]	; 0x28
 800527a:	4620      	mov	r0, r4
 800527c:	f7ff fead 	bl	8004fda <I2C_WaitOnBTFFlagUntilTimeout>
 8005280:	2800      	cmp	r0, #0
 8005282:	d1d3      	bne.n	800522c <HAL_I2C_Master_Transmit+0x128>
		while (hi2c->XferSize > 0U) {
 8005284:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1ca      	bne.n	8005220 <HAL_I2C_Master_Transmit+0x11c>
		hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800528a:	6821      	ldr	r1, [r4, #0]
 800528c:	680a      	ldr	r2, [r1, #0]
 800528e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005292:	600a      	str	r2, [r1, #0]
		hi2c->State = HAL_I2C_STATE_READY;
 8005294:	2220      	movs	r2, #32
 8005296:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
		__HAL_UNLOCK(hi2c);
 800529a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		hi2c->Mode = HAL_I2C_MODE_NONE;
 800529e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		return HAL_OK;
 80052a2:	e73d      	b.n	8005120 <HAL_I2C_Master_Transmit+0x1c>
 80052a4:	00100002 	.word	0x00100002
 80052a8:	00010002 	.word	0x00010002
 80052ac:	00010008 	.word	0x00010008

080052b0 <HAL_I2C_Master_Receive>:
{
 80052b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80052b4:	4604      	mov	r4, r0
 80052b6:	b089      	sub	sp, #36	; 0x24
 80052b8:	4698      	mov	r8, r3
 80052ba:	460d      	mov	r5, r1
 80052bc:	4691      	mov	r9, r2
 80052be:	9f10      	ldr	r7, [sp, #64]	; 0x40
	tickstart = HAL_GetTick();
 80052c0:	f7ff f8d2 	bl	8004468 <HAL_GetTick>
	if (hi2c->State == HAL_I2C_STATE_READY) {
 80052c4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80052c8:	2b20      	cmp	r3, #32
	tickstart = HAL_GetTick();
 80052ca:	4606      	mov	r6, r0
	if (hi2c->State == HAL_I2C_STATE_READY) {
 80052cc:	d004      	beq.n	80052d8 <HAL_I2C_Master_Receive+0x28>
		return HAL_BUSY;
 80052ce:	2502      	movs	r5, #2
}
 80052d0:	4628      	mov	r0, r5
 80052d2:	b009      	add	sp, #36	; 0x24
 80052d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK) {
 80052d8:	9000      	str	r0, [sp, #0]
 80052da:	2319      	movs	r3, #25
 80052dc:	2201      	movs	r2, #1
 80052de:	499c      	ldr	r1, [pc, #624]	; (8005550 <HAL_I2C_Master_Receive+0x2a0>)
 80052e0:	4620      	mov	r0, r4
 80052e2:	f7ff fdf9 	bl	8004ed8 <I2C_WaitOnFlagUntilTimeout>
 80052e6:	2800      	cmp	r0, #0
 80052e8:	d1f1      	bne.n	80052ce <HAL_I2C_Master_Receive+0x1e>
		__HAL_LOCK(hi2c);
 80052ea:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d0ed      	beq.n	80052ce <HAL_I2C_Master_Receive+0x1e>
 80052f2:	2301      	movs	r3, #1
 80052f4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE) {
 80052f8:	6823      	ldr	r3, [r4, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	07d2      	lsls	r2, r2, #31
			__HAL_I2C_ENABLE(hi2c);
 80052fe:	bf5e      	ittt	pl
 8005300:	681a      	ldrpl	r2, [r3, #0]
 8005302:	f042 0201 	orrpl.w	r2, r2, #1
 8005306:	601a      	strpl	r2, [r3, #0]
		hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800530e:	601a      	str	r2, [r3, #0]
		hi2c->State = HAL_I2C_STATE_BUSY_RX;
 8005310:	2222      	movs	r2, #34	; 0x22
 8005312:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_MASTER;
 8005316:	2210      	movs	r2, #16
 8005318:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
		hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800531c:	2200      	movs	r2, #0
 800531e:	6422      	str	r2, [r4, #64]	; 0x40
		hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005320:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
		hi2c->XferCount = Size;
 8005324:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
		hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005328:	62e2      	str	r2, [r4, #44]	; 0x2c
		hi2c->XferSize = hi2c->XferCount;
 800532a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800532c:	8522      	strh	r2, [r4, #40]	; 0x28
	uint32_t CurrentXferOptions = hi2c->XferOptions;
 800532e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8005330:	6819      	ldr	r1, [r3, #0]
		hi2c->pBuffPtr = pData;
 8005332:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
	hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8005336:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
	if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME)) {
 800533a:	2a04      	cmp	r2, #4
	hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800533c:	6019      	str	r1, [r3, #0]
	if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME)) {
 800533e:	d004      	beq.n	800534a <HAL_I2C_Master_Receive+0x9a>
 8005340:	2a01      	cmp	r2, #1
 8005342:	d002      	beq.n	800534a <HAL_I2C_Master_Receive+0x9a>
 8005344:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8005348:	d104      	bne.n	8005354 <HAL_I2C_Master_Receive+0xa4>
		hi2c->Instance->CR1 |= I2C_CR1_START;
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005350:	601a      	str	r2, [r3, #0]
 8005352:	e002      	b.n	800535a <HAL_I2C_Master_Receive+0xaa>
	}else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) {
 8005354:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005356:	2a11      	cmp	r2, #17
 8005358:	d0f7      	beq.n	800534a <HAL_I2C_Master_Receive+0x9a>
	if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 800535a:	9600      	str	r6, [sp, #0]
 800535c:	463b      	mov	r3, r7
 800535e:	2200      	movs	r2, #0
 8005360:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005364:	4620      	mov	r0, r4
 8005366:	f7ff fdb7 	bl	8004ed8 <I2C_WaitOnFlagUntilTimeout>
 800536a:	2800      	cmp	r0, #0
 800536c:	d14a      	bne.n	8005404 <HAL_I2C_Master_Receive+0x154>
	if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT) {
 800536e:	6923      	ldr	r3, [r4, #16]
 8005370:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005374:	6823      	ldr	r3, [r4, #0]
 8005376:	d136      	bne.n	80053e6 <HAL_I2C_Master_Receive+0x136>
		hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005378:	f045 0501 	orr.w	r5, r5, #1
 800537c:	b2ed      	uxtb	r5, r5
 800537e:	611d      	str	r5, [r3, #16]
	if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 8005380:	4633      	mov	r3, r6
 8005382:	463a      	mov	r2, r7
 8005384:	4973      	ldr	r1, [pc, #460]	; (8005554 <HAL_I2C_Master_Receive+0x2a4>)
 8005386:	4620      	mov	r0, r4
 8005388:	f7ff fd66 	bl	8004e58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800538c:	4605      	mov	r5, r0
 800538e:	2800      	cmp	r0, #0
 8005390:	d137      	bne.n	8005402 <HAL_I2C_Master_Receive+0x152>
		if (hi2c->XferSize == 0U) {
 8005392:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8005394:	6823      	ldr	r3, [r4, #0]
 8005396:	2a00      	cmp	r2, #0
 8005398:	d066      	beq.n	8005468 <HAL_I2C_Master_Receive+0x1b8>
		}else if (hi2c->XferSize == 1U) {
 800539a:	2a01      	cmp	r2, #1
 800539c:	d177      	bne.n	800548e <HAL_I2C_Master_Receive+0x1de>
			hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053a4:	601a      	str	r2, [r3, #0]
			__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053a6:	9504      	str	r5, [sp, #16]
 80053a8:	695a      	ldr	r2, [r3, #20]
 80053aa:	9204      	str	r2, [sp, #16]
 80053ac:	699a      	ldr	r2, [r3, #24]
 80053ae:	9204      	str	r2, [sp, #16]
 80053b0:	9a04      	ldr	r2, [sp, #16]
			hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053b8:	601a      	str	r2, [r3, #0]
					if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 80053ba:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800555c <HAL_I2C_Master_Receive+0x2ac>
		while (hi2c->XferSize > 0U) {
 80053be:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d05b      	beq.n	800547c <HAL_I2C_Master_Receive+0x1cc>
			if (hi2c->XferSize <= 3U) {
 80053c4:	2b03      	cmp	r3, #3
 80053c6:	f200 80cb 	bhi.w	8005560 <HAL_I2C_Master_Receive+0x2b0>
				if (hi2c->XferSize == 1U) {
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d17a      	bne.n	80054c4 <HAL_I2C_Master_Receive+0x214>
					if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 80053ce:	4632      	mov	r2, r6
 80053d0:	4639      	mov	r1, r7
 80053d2:	4620      	mov	r0, r4
 80053d4:	f7ff fdd4 	bl	8004f80 <I2C_WaitOnRXNEFlagUntilTimeout>
 80053d8:	2800      	cmp	r0, #0
 80053da:	f000 8090 	beq.w	80054fe <HAL_I2C_Master_Receive+0x24e>
						if (hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT) {
 80053de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053e0:	2b20      	cmp	r3, #32
 80053e2:	d116      	bne.n	8005412 <HAL_I2C_Master_Receive+0x162>
 80053e4:	e03e      	b.n	8005464 <HAL_I2C_Master_Receive+0x1b4>
		hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80053e6:	ea4f 18e5 	mov.w	r8, r5, asr #7
 80053ea:	f008 0806 	and.w	r8, r8, #6
 80053ee:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 80053f2:	611a      	str	r2, [r3, #16]
		if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK) {
 80053f4:	4958      	ldr	r1, [pc, #352]	; (8005558 <HAL_I2C_Master_Receive+0x2a8>)
 80053f6:	4633      	mov	r3, r6
 80053f8:	463a      	mov	r2, r7
 80053fa:	4620      	mov	r0, r4
 80053fc:	f7ff fd2c 	bl	8004e58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005400:	b148      	cbz	r0, 8005416 <HAL_I2C_Master_Receive+0x166>
		if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8005402:	6c23      	ldr	r3, [r4, #64]	; 0x40
			if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8005404:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005406:	2b04      	cmp	r3, #4
 8005408:	f04f 0300 	mov.w	r3, #0
 800540c:	d128      	bne.n	8005460 <HAL_I2C_Master_Receive+0x1b0>
				__HAL_UNLOCK(hi2c);
 800540e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
							return HAL_ERROR;
 8005412:	2501      	movs	r5, #1
 8005414:	e75c      	b.n	80052d0 <HAL_I2C_Master_Receive+0x20>
		hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005416:	6823      	ldr	r3, [r4, #0]
		if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 8005418:	494e      	ldr	r1, [pc, #312]	; (8005554 <HAL_I2C_Master_Receive+0x2a4>)
		hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800541a:	b2ed      	uxtb	r5, r5
 800541c:	611d      	str	r5, [r3, #16]
		if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 800541e:	463a      	mov	r2, r7
 8005420:	4633      	mov	r3, r6
 8005422:	4620      	mov	r0, r4
 8005424:	f7ff fd18 	bl	8004e58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005428:	4602      	mov	r2, r0
 800542a:	2800      	cmp	r0, #0
 800542c:	d1e9      	bne.n	8005402 <HAL_I2C_Master_Receive+0x152>
		__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800542e:	6823      	ldr	r3, [r4, #0]
 8005430:	9007      	str	r0, [sp, #28]
 8005432:	6959      	ldr	r1, [r3, #20]
 8005434:	9107      	str	r1, [sp, #28]
 8005436:	6999      	ldr	r1, [r3, #24]
 8005438:	9107      	str	r1, [sp, #28]
 800543a:	9907      	ldr	r1, [sp, #28]
		hi2c->Instance->CR1 |= I2C_CR1_START;
 800543c:	6819      	ldr	r1, [r3, #0]
 800543e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8005442:	6019      	str	r1, [r3, #0]
		if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 8005444:	4620      	mov	r0, r4
 8005446:	9600      	str	r6, [sp, #0]
 8005448:	463b      	mov	r3, r7
 800544a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800544e:	f7ff fd43 	bl	8004ed8 <I2C_WaitOnFlagUntilTimeout>
 8005452:	2800      	cmp	r0, #0
 8005454:	d1d6      	bne.n	8005404 <HAL_I2C_Master_Receive+0x154>
		hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005456:	6822      	ldr	r2, [r4, #0]
 8005458:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 800545c:	6113      	str	r3, [r2, #16]
 800545e:	e78f      	b.n	8005380 <HAL_I2C_Master_Receive+0xd0>
				__HAL_UNLOCK(hi2c);
 8005460:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
							return HAL_TIMEOUT;
 8005464:	2503      	movs	r5, #3
 8005466:	e733      	b.n	80052d0 <HAL_I2C_Master_Receive+0x20>
			__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005468:	9503      	str	r5, [sp, #12]
 800546a:	695a      	ldr	r2, [r3, #20]
 800546c:	9203      	str	r2, [sp, #12]
 800546e:	699a      	ldr	r2, [r3, #24]
 8005470:	9203      	str	r2, [sp, #12]
 8005472:	9a03      	ldr	r2, [sp, #12]
			hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800547a:	601a      	str	r2, [r3, #0]
		hi2c->State = HAL_I2C_STATE_READY;
 800547c:	2320      	movs	r3, #32
 800547e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_NONE;
 8005482:	2300      	movs	r3, #0
 8005484:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		__HAL_UNLOCK(hi2c);
 8005488:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		return HAL_OK;
 800548c:	e720      	b.n	80052d0 <HAL_I2C_Master_Receive+0x20>
		}else if (hi2c->XferSize == 2U) {
 800548e:	2a02      	cmp	r2, #2
			hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005490:	681a      	ldr	r2, [r3, #0]
		}else if (hi2c->XferSize == 2U) {
 8005492:	d10d      	bne.n	80054b0 <HAL_I2C_Master_Receive+0x200>
			hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005494:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005498:	601a      	str	r2, [r3, #0]
			hi2c->Instance->CR1 |= I2C_CR1_POS;
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054a0:	601a      	str	r2, [r3, #0]
			__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054a2:	9505      	str	r5, [sp, #20]
 80054a4:	695a      	ldr	r2, [r3, #20]
 80054a6:	9205      	str	r2, [sp, #20]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	9305      	str	r3, [sp, #20]
 80054ac:	9b05      	ldr	r3, [sp, #20]
 80054ae:	e784      	b.n	80053ba <HAL_I2C_Master_Receive+0x10a>
			hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80054b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054b4:	601a      	str	r2, [r3, #0]
			__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054b6:	9506      	str	r5, [sp, #24]
 80054b8:	695a      	ldr	r2, [r3, #20]
 80054ba:	9206      	str	r2, [sp, #24]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	9306      	str	r3, [sp, #24]
 80054c0:	9b06      	ldr	r3, [sp, #24]
 80054c2:	e77a      	b.n	80053ba <HAL_I2C_Master_Receive+0x10a>
				else if (hi2c->XferSize == 2U) {
 80054c4:	2b02      	cmp	r3, #2
					if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 80054c6:	9600      	str	r6, [sp, #0]
 80054c8:	463b      	mov	r3, r7
 80054ca:	f04f 0200 	mov.w	r2, #0
 80054ce:	4641      	mov	r1, r8
 80054d0:	4620      	mov	r0, r4
				else if (hi2c->XferSize == 2U) {
 80054d2:	d122      	bne.n	800551a <HAL_I2C_Master_Receive+0x26a>
					if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 80054d4:	f7ff fd00 	bl	8004ed8 <I2C_WaitOnFlagUntilTimeout>
 80054d8:	2800      	cmp	r0, #0
 80054da:	d1c3      	bne.n	8005464 <HAL_I2C_Master_Receive+0x1b4>
					hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80054dc:	6823      	ldr	r3, [r4, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054e4:	601a      	str	r2, [r3, #0]
					(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80054e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	1c51      	adds	r1, r2, #1
 80054ec:	6261      	str	r1, [r4, #36]	; 0x24
 80054ee:	7013      	strb	r3, [r2, #0]
					hi2c->XferSize--;
 80054f0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80054f2:	3b01      	subs	r3, #1
 80054f4:	8523      	strh	r3, [r4, #40]	; 0x28
					hi2c->XferCount--;
 80054f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80054f8:	3b01      	subs	r3, #1
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	8563      	strh	r3, [r4, #42]	; 0x2a
					(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80054fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005500:	1c5a      	adds	r2, r3, #1
 8005502:	6262      	str	r2, [r4, #36]	; 0x24
 8005504:	6822      	ldr	r2, [r4, #0]
					(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8005506:	6912      	ldr	r2, [r2, #16]
 8005508:	701a      	strb	r2, [r3, #0]
					hi2c->XferSize--;
 800550a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800550c:	3b01      	subs	r3, #1
 800550e:	8523      	strh	r3, [r4, #40]	; 0x28
					hi2c->XferCount--;
 8005510:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005512:	3b01      	subs	r3, #1
 8005514:	b29b      	uxth	r3, r3
 8005516:	8563      	strh	r3, [r4, #42]	; 0x2a
 8005518:	e751      	b.n	80053be <HAL_I2C_Master_Receive+0x10e>
					if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 800551a:	f7ff fcdd 	bl	8004ed8 <I2C_WaitOnFlagUntilTimeout>
 800551e:	4602      	mov	r2, r0
 8005520:	2800      	cmp	r0, #0
 8005522:	d19f      	bne.n	8005464 <HAL_I2C_Master_Receive+0x1b4>
					hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005524:	6823      	ldr	r3, [r4, #0]
 8005526:	6819      	ldr	r1, [r3, #0]
 8005528:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800552c:	6019      	str	r1, [r3, #0]
					(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800552e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	1c48      	adds	r0, r1, #1
 8005534:	6260      	str	r0, [r4, #36]	; 0x24
 8005536:	700b      	strb	r3, [r1, #0]
					hi2c->XferSize--;
 8005538:	8d23      	ldrh	r3, [r4, #40]	; 0x28
					if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 800553a:	9600      	str	r6, [sp, #0]
					hi2c->XferSize--;
 800553c:	3b01      	subs	r3, #1
 800553e:	8523      	strh	r3, [r4, #40]	; 0x28
					hi2c->XferCount--;
 8005540:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005542:	3b01      	subs	r3, #1
 8005544:	b29b      	uxth	r3, r3
 8005546:	8563      	strh	r3, [r4, #42]	; 0x2a
					if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 8005548:	4641      	mov	r1, r8
 800554a:	463b      	mov	r3, r7
 800554c:	4620      	mov	r0, r4
 800554e:	e7c1      	b.n	80054d4 <HAL_I2C_Master_Receive+0x224>
 8005550:	00100002 	.word	0x00100002
 8005554:	00010002 	.word	0x00010002
 8005558:	00010008 	.word	0x00010008
 800555c:	00010004 	.word	0x00010004
				if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8005560:	4632      	mov	r2, r6
 8005562:	4639      	mov	r1, r7
 8005564:	4620      	mov	r0, r4
 8005566:	f7ff fd0b 	bl	8004f80 <I2C_WaitOnRXNEFlagUntilTimeout>
 800556a:	2800      	cmp	r0, #0
 800556c:	f47f af37 	bne.w	80053de <HAL_I2C_Master_Receive+0x12e>
				(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8005570:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005572:	1c5a      	adds	r2, r3, #1
 8005574:	6262      	str	r2, [r4, #36]	; 0x24
 8005576:	6822      	ldr	r2, [r4, #0]
 8005578:	6912      	ldr	r2, [r2, #16]
 800557a:	701a      	strb	r2, [r3, #0]
				hi2c->XferSize--;
 800557c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
				if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) {
 800557e:	6822      	ldr	r2, [r4, #0]
				hi2c->XferSize--;
 8005580:	3b01      	subs	r3, #1
 8005582:	8523      	strh	r3, [r4, #40]	; 0x28
				hi2c->XferCount--;
 8005584:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005586:	3b01      	subs	r3, #1
 8005588:	b29b      	uxth	r3, r3
 800558a:	8563      	strh	r3, [r4, #42]	; 0x2a
				if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) {
 800558c:	6953      	ldr	r3, [r2, #20]
 800558e:	075b      	lsls	r3, r3, #29
 8005590:	f57f af15 	bpl.w	80053be <HAL_I2C_Master_Receive+0x10e>
					(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8005594:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005596:	1c59      	adds	r1, r3, #1
 8005598:	6261      	str	r1, [r4, #36]	; 0x24
 800559a:	e7b4      	b.n	8005506 <HAL_I2C_Master_Receive+0x256>

0800559c <HAL_I2C_MasterTxCpltCallback>:
 800559c:	4770      	bx	lr

0800559e <HAL_I2C_MasterRxCpltCallback>:
 800559e:	4770      	bx	lr

080055a0 <HAL_I2C_SlaveTxCpltCallback>:
 80055a0:	4770      	bx	lr

080055a2 <HAL_I2C_SlaveRxCpltCallback>:
 80055a2:	4770      	bx	lr

080055a4 <HAL_I2C_AddrCallback>:
{
 80055a4:	4770      	bx	lr

080055a6 <HAL_I2C_ListenCpltCallback>:
 80055a6:	4770      	bx	lr

080055a8 <HAL_I2C_MemTxCpltCallback>:
 80055a8:	4770      	bx	lr

080055aa <HAL_I2C_MemRxCpltCallback>:
 80055aa:	4770      	bx	lr

080055ac <HAL_I2C_ErrorCallback>:
 80055ac:	4770      	bx	lr

080055ae <HAL_I2C_AbortCpltCallback>:
{
 80055ae:	4770      	bx	lr

080055b0 <I2C_ITError>:
	uint32_t CurrentState = hi2c->State;
 80055b0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
	if ((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)) {
 80055b4:	3b29      	subs	r3, #41	; 0x29
 80055b6:	2b01      	cmp	r3, #1
{
 80055b8:	b510      	push	{r4, lr}
 80055ba:	6803      	ldr	r3, [r0, #0]
 80055bc:	4604      	mov	r4, r0
	if ((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)) {
 80055be:	d839      	bhi.n	8005634 <I2C_ITError+0x84>
		hi2c->PreviousState = I2C_STATE_NONE;
 80055c0:	2200      	movs	r2, #0
 80055c2:	6302      	str	r2, [r0, #48]	; 0x30
		hi2c->State = HAL_I2C_STATE_LISTEN;
 80055c4:	2228      	movs	r2, #40	; 0x28
 80055c6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
	hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055d0:	601a      	str	r2, [r3, #0]
	if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) {
 80055d2:	685a      	ldr	r2, [r3, #4]
 80055d4:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 80055d8:	d054      	beq.n	8005684 <I2C_ITError+0xd4>
		hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80055da:	685a      	ldr	r2, [r3, #4]
		if (hi2c->hdmatx->State != HAL_DMA_STATE_READY) {
 80055dc:	6b60      	ldr	r0, [r4, #52]	; 0x34
		hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80055de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055e2:	605a      	str	r2, [r3, #4]
		if (hi2c->hdmatx->State != HAL_DMA_STATE_READY) {
 80055e4:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	4b39      	ldr	r3, [pc, #228]	; (80056d0 <I2C_ITError+0x120>)
 80055ec:	d031      	beq.n	8005652 <I2C_ITError+0xa2>
			hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80055ee:	6503      	str	r3, [r0, #80]	; 0x50
			if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK) {
 80055f0:	f7ff fa70 	bl	8004ad4 <HAL_DMA_Abort_IT>
 80055f4:	b150      	cbz	r0, 800560c <I2C_ITError+0x5c>
				__HAL_I2C_DISABLE(hi2c);
 80055f6:	6822      	ldr	r2, [r4, #0]
				hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80055f8:	6b60      	ldr	r0, [r4, #52]	; 0x34
				__HAL_I2C_DISABLE(hi2c);
 80055fa:	6813      	ldr	r3, [r2, #0]
 80055fc:	f023 0301 	bic.w	r3, r3, #1
 8005600:	6013      	str	r3, [r2, #0]
				hi2c->State = HAL_I2C_STATE_READY;
 8005602:	2320      	movs	r3, #32
 8005604:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
				hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005608:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800560a:	4798      	blx	r3
	if ((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)) {
 800560c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8005610:	2b28      	cmp	r3, #40	; 0x28
 8005612:	d10e      	bne.n	8005632 <I2C_ITError+0x82>
 8005614:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005616:	075b      	lsls	r3, r3, #29
 8005618:	d50b      	bpl.n	8005632 <I2C_ITError+0x82>
		hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800561a:	4b2e      	ldr	r3, [pc, #184]	; (80056d4 <I2C_ITError+0x124>)
 800561c:	62e3      	str	r3, [r4, #44]	; 0x2c
		hi2c->State = HAL_I2C_STATE_READY;
 800561e:	2220      	movs	r2, #32
		hi2c->PreviousState = I2C_STATE_NONE;
 8005620:	2300      	movs	r3, #0
 8005622:	6323      	str	r3, [r4, #48]	; 0x30
		HAL_I2C_ListenCpltCallback(hi2c);
 8005624:	4620      	mov	r0, r4
		hi2c->State = HAL_I2C_STATE_READY;
 8005626:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_NONE;
 800562a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		HAL_I2C_ListenCpltCallback(hi2c);
 800562e:	f7ff ffba 	bl	80055a6 <HAL_I2C_ListenCpltCallback>
 8005632:	bd10      	pop	{r4, pc}
		if ((hi2c->State != HAL_I2C_STATE_ABORT) && ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) != I2C_CR2_DMAEN)) {
 8005634:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8005638:	2a60      	cmp	r2, #96	; 0x60
 800563a:	d005      	beq.n	8005648 <I2C_ITError+0x98>
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	0512      	lsls	r2, r2, #20
			hi2c->State = HAL_I2C_STATE_READY;
 8005640:	bf5c      	itt	pl
 8005642:	2220      	movpl	r2, #32
 8005644:	f880 203d 	strbpl.w	r2, [r0, #61]	; 0x3d
		hi2c->PreviousState = I2C_STATE_NONE;
 8005648:	2200      	movs	r2, #0
 800564a:	6322      	str	r2, [r4, #48]	; 0x30
		hi2c->Mode = HAL_I2C_MODE_NONE;
 800564c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 8005650:	e7bb      	b.n	80055ca <I2C_ITError+0x1a>
			hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005652:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005654:	6503      	str	r3, [r0, #80]	; 0x50
			if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK) {
 8005656:	f7ff fa3d 	bl	8004ad4 <HAL_DMA_Abort_IT>
 800565a:	2800      	cmp	r0, #0
 800565c:	d0d6      	beq.n	800560c <I2C_ITError+0x5c>
				if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) {
 800565e:	6822      	ldr	r2, [r4, #0]
 8005660:	6953      	ldr	r3, [r2, #20]
 8005662:	0658      	lsls	r0, r3, #25
 8005664:	d504      	bpl.n	8005670 <I2C_ITError+0xc0>
					(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8005666:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005668:	6912      	ldr	r2, [r2, #16]
 800566a:	1c59      	adds	r1, r3, #1
 800566c:	6261      	str	r1, [r4, #36]	; 0x24
 800566e:	701a      	strb	r2, [r3, #0]
				__HAL_I2C_DISABLE(hi2c);
 8005670:	6822      	ldr	r2, [r4, #0]
				hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005672:	6ba0      	ldr	r0, [r4, #56]	; 0x38
				__HAL_I2C_DISABLE(hi2c);
 8005674:	6813      	ldr	r3, [r2, #0]
 8005676:	f023 0301 	bic.w	r3, r3, #1
 800567a:	6013      	str	r3, [r2, #0]
				hi2c->State = HAL_I2C_STATE_READY;
 800567c:	2320      	movs	r3, #32
 800567e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8005682:	e7c1      	b.n	8005608 <I2C_ITError+0x58>
	}else if (hi2c->State == HAL_I2C_STATE_ABORT) {
 8005684:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8005688:	2960      	cmp	r1, #96	; 0x60
 800568a:	d114      	bne.n	80056b6 <I2C_ITError+0x106>
		hi2c->State = HAL_I2C_STATE_READY;
 800568c:	2120      	movs	r1, #32
 800568e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
		hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005692:	6422      	str	r2, [r4, #64]	; 0x40
		if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) {
 8005694:	695a      	ldr	r2, [r3, #20]
 8005696:	0651      	lsls	r1, r2, #25
 8005698:	d504      	bpl.n	80056a4 <I2C_ITError+0xf4>
			(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800569a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	1c51      	adds	r1, r2, #1
 80056a0:	6261      	str	r1, [r4, #36]	; 0x24
 80056a2:	7013      	strb	r3, [r2, #0]
		__HAL_I2C_DISABLE(hi2c);
 80056a4:	6822      	ldr	r2, [r4, #0]
 80056a6:	6813      	ldr	r3, [r2, #0]
 80056a8:	f023 0301 	bic.w	r3, r3, #1
 80056ac:	6013      	str	r3, [r2, #0]
		HAL_I2C_AbortCpltCallback(hi2c);
 80056ae:	4620      	mov	r0, r4
 80056b0:	f7ff ff7d 	bl	80055ae <HAL_I2C_AbortCpltCallback>
 80056b4:	e7aa      	b.n	800560c <I2C_ITError+0x5c>
		if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) {
 80056b6:	695a      	ldr	r2, [r3, #20]
 80056b8:	0652      	lsls	r2, r2, #25
 80056ba:	d504      	bpl.n	80056c6 <I2C_ITError+0x116>
			(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80056bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	1c51      	adds	r1, r2, #1
 80056c2:	6261      	str	r1, [r4, #36]	; 0x24
 80056c4:	7013      	strb	r3, [r2, #0]
		HAL_I2C_ErrorCallback(hi2c);
 80056c6:	4620      	mov	r0, r4
 80056c8:	f7ff ff70 	bl	80055ac <HAL_I2C_ErrorCallback>
 80056cc:	e79e      	b.n	800560c <I2C_ITError+0x5c>
 80056ce:	bf00      	nop
 80056d0:	08005ee1 	.word	0x08005ee1
 80056d4:	ffff0000 	.word	0xffff0000

080056d8 <HAL_I2C_EV_IRQHandler>:
	uint32_t sr2itflags = READ_REG(hi2c->Instance->SR2);
 80056d8:	6803      	ldr	r3, [r0, #0]
{
 80056da:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t sr2itflags = READ_REG(hi2c->Instance->SR2);
 80056dc:	699d      	ldr	r5, [r3, #24]
	uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80056de:	6959      	ldr	r1, [r3, #20]
	uint32_t itsources = READ_REG(hi2c->Instance->CR2);
 80056e0:	685a      	ldr	r2, [r3, #4]
	uint32_t CurrentMode = hi2c->Mode;
 80056e2:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
 80056e6:	b2e4      	uxtb	r4, r4
	if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) {
 80056e8:	2c10      	cmp	r4, #16
{
 80056ea:	b08d      	sub	sp, #52	; 0x34
	if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) {
 80056ec:	d002      	beq.n	80056f4 <HAL_I2C_EV_IRQHandler+0x1c>
 80056ee:	2c40      	cmp	r4, #64	; 0x40
 80056f0:	f040 8255 	bne.w	8005b9e <HAL_I2C_EV_IRQHandler+0x4c6>
		if (((sr1itflags & I2C_FLAG_SB) != RESET) && ((itsources & I2C_IT_EVT) != RESET)) {
 80056f4:	f011 1f01 	tst.w	r1, #65537	; 0x10001
 80056f8:	d066      	beq.n	80057c8 <HAL_I2C_EV_IRQHandler+0xf0>
 80056fa:	0597      	lsls	r7, r2, #22
 80056fc:	d564      	bpl.n	80057c8 <HAL_I2C_EV_IRQHandler+0xf0>
	if (hi2c->Mode == HAL_I2C_MODE_MEM) {
 80056fe:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
 8005702:	2c40      	cmp	r4, #64	; 0x40
 8005704:	d143      	bne.n	800578e <HAL_I2C_EV_IRQHandler+0xb6>
		if (hi2c->EventCount == 0U) {
 8005706:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8005708:	2c00      	cmp	r4, #0
 800570a:	d13b      	bne.n	8005784 <HAL_I2C_EV_IRQHandler+0xac>
			hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800570c:	6c44      	ldr	r4, [r0, #68]	; 0x44
				hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800570e:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
				hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005712:	611c      	str	r4, [r3, #16]
		if ((sr2itflags & I2C_FLAG_TRA) != RESET) {
 8005714:	4e98      	ldr	r6, [pc, #608]	; (8005978 <HAL_I2C_EV_IRQHandler+0x2a0>)
 8005716:	4c99      	ldr	r4, [pc, #612]	; (800597c <HAL_I2C_EV_IRQHandler+0x2a4>)
 8005718:	402e      	ands	r6, r5
 800571a:	400c      	ands	r4, r1
 800571c:	2e00      	cmp	r6, #0
 800571e:	f000 819f 	beq.w	8005a60 <HAL_I2C_EV_IRQHandler+0x388>
			if (((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET)) {
 8005722:	4d97      	ldr	r5, [pc, #604]	; (8005980 <HAL_I2C_EV_IRQHandler+0x2a8>)
 8005724:	400d      	ands	r5, r1
 8005726:	2d00      	cmp	r5, #0
 8005728:	f000 8166 	beq.w	80059f8 <HAL_I2C_EV_IRQHandler+0x320>
 800572c:	0555      	lsls	r5, r2, #21
 800572e:	f140 8163 	bpl.w	80059f8 <HAL_I2C_EV_IRQHandler+0x320>
 8005732:	2c00      	cmp	r4, #0
 8005734:	f040 8160 	bne.w	80059f8 <HAL_I2C_EV_IRQHandler+0x320>
	uint32_t CurrentState = hi2c->State;
 8005738:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
	if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX)) {
 800573c:	8d05      	ldrh	r5, [r0, #40]	; 0x28
	uint32_t CurrentMode = hi2c->Mode;
 800573e:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
	uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005742:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
	uint32_t CurrentState = hi2c->State;
 8005744:	b2d2      	uxtb	r2, r2
	uint32_t CurrentMode = hi2c->Mode;
 8005746:	b2c9      	uxtb	r1, r1
	if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX)) {
 8005748:	2d00      	cmp	r5, #0
 800574a:	f040 8105 	bne.w	8005958 <HAL_I2C_EV_IRQHandler+0x280>
 800574e:	2a21      	cmp	r2, #33	; 0x21
 8005750:	f040 8104 	bne.w	800595c <HAL_I2C_EV_IRQHandler+0x284>
		if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME)) {
 8005754:	2c04      	cmp	r4, #4
 8005756:	f000 816c 	beq.w	8005a32 <HAL_I2C_EV_IRQHandler+0x35a>
 800575a:	2c08      	cmp	r4, #8
 800575c:	f000 8169 	beq.w	8005a32 <HAL_I2C_EV_IRQHandler+0x35a>
 8005760:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
 8005764:	f000 8165 	beq.w	8005a32 <HAL_I2C_EV_IRQHandler+0x35a>
			__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005768:	685a      	ldr	r2, [r3, #4]
 800576a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800576e:	605a      	str	r2, [r3, #4]
			hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005770:	2311      	movs	r3, #17
 8005772:	6303      	str	r3, [r0, #48]	; 0x30
			hi2c->Mode = HAL_I2C_MODE_NONE;
 8005774:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
				hi2c->State = HAL_I2C_STATE_READY;
 8005778:	2320      	movs	r3, #32
 800577a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
				HAL_I2C_MasterTxCpltCallback(hi2c);
 800577e:	f7ff ff0d 	bl	800559c <HAL_I2C_MasterTxCpltCallback>
 8005782:	e0f6      	b.n	8005972 <HAL_I2C_EV_IRQHandler+0x29a>
			hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005784:	6c44      	ldr	r4, [r0, #68]	; 0x44
				hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005786:	f044 0401 	orr.w	r4, r4, #1
 800578a:	b2e4      	uxtb	r4, r4
 800578c:	e7c1      	b.n	8005712 <HAL_I2C_EV_IRQHandler+0x3a>
		if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT) {
 800578e:	6904      	ldr	r4, [r0, #16]
 8005790:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 8005794:	d105      	bne.n	80057a2 <HAL_I2C_EV_IRQHandler+0xca>
			if (hi2c->State == HAL_I2C_STATE_BUSY_TX) {
 8005796:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800579a:	2c21      	cmp	r4, #33	; 0x21
				hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800579c:	6c44      	ldr	r4, [r0, #68]	; 0x44
			if (hi2c->State == HAL_I2C_STATE_BUSY_TX) {
 800579e:	d1f2      	bne.n	8005786 <HAL_I2C_EV_IRQHandler+0xae>
 80057a0:	e7b5      	b.n	800570e <HAL_I2C_EV_IRQHandler+0x36>
			if (hi2c->EventCount == 0U) {
 80057a2:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80057a4:	b934      	cbnz	r4, 80057b4 <HAL_I2C_EV_IRQHandler+0xdc>
				hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80057a6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80057a8:	11e4      	asrs	r4, r4, #7
 80057aa:	f004 0406 	and.w	r4, r4, #6
 80057ae:	f044 04f0 	orr.w	r4, r4, #240	; 0xf0
 80057b2:	e7ae      	b.n	8005712 <HAL_I2C_EV_IRQHandler+0x3a>
			}else if (hi2c->EventCount == 1U) {
 80057b4:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80057b6:	2c01      	cmp	r4, #1
 80057b8:	d1ac      	bne.n	8005714 <HAL_I2C_EV_IRQHandler+0x3c>
				hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80057ba:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80057bc:	11e4      	asrs	r4, r4, #7
 80057be:	f004 0406 	and.w	r4, r4, #6
 80057c2:	f044 04f1 	orr.w	r4, r4, #241	; 0xf1
 80057c6:	e7a4      	b.n	8005712 <HAL_I2C_EV_IRQHandler+0x3a>
		else if (((sr1itflags & I2C_FLAG_ADD10) != RESET) && ((itsources & I2C_IT_EVT) != RESET)) {
 80057c8:	4c6e      	ldr	r4, [pc, #440]	; (8005984 <HAL_I2C_EV_IRQHandler+0x2ac>)
 80057ca:	400c      	ands	r4, r1
 80057cc:	b11c      	cbz	r4, 80057d6 <HAL_I2C_EV_IRQHandler+0xfe>
 80057ce:	0596      	lsls	r6, r2, #22
 80057d0:	d501      	bpl.n	80057d6 <HAL_I2C_EV_IRQHandler+0xfe>
	hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80057d2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80057d4:	e7d9      	b.n	800578a <HAL_I2C_EV_IRQHandler+0xb2>
		else if (((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET)) {
 80057d6:	4c6c      	ldr	r4, [pc, #432]	; (8005988 <HAL_I2C_EV_IRQHandler+0x2b0>)
 80057d8:	400c      	ands	r4, r1
 80057da:	2c00      	cmp	r4, #0
 80057dc:	d09a      	beq.n	8005714 <HAL_I2C_EV_IRQHandler+0x3c>
 80057de:	0594      	lsls	r4, r2, #22
 80057e0:	d598      	bpl.n	8005714 <HAL_I2C_EV_IRQHandler+0x3c>
	uint32_t CurrentMode = hi2c->Mode;
 80057e2:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
	uint32_t CurrentXferOptions = hi2c->XferOptions;
 80057e6:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
	uint32_t Prev_State = hi2c->PreviousState;
 80057e8:	f8d0 e030 	ldr.w	lr, [r0, #48]	; 0x30
	if (hi2c->State == HAL_I2C_STATE_BUSY_RX) {
 80057ec:	f890 703d 	ldrb.w	r7, [r0, #61]	; 0x3d
 80057f0:	2f22      	cmp	r7, #34	; 0x22
	uint32_t CurrentMode = hi2c->Mode;
 80057f2:	b2e4      	uxtb	r4, r4
	if (hi2c->State == HAL_I2C_STATE_BUSY_RX) {
 80057f4:	f040 80a8 	bne.w	8005948 <HAL_I2C_EV_IRQHandler+0x270>
		if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM)) {
 80057f8:	6d07      	ldr	r7, [r0, #80]	; 0x50
 80057fa:	b947      	cbnz	r7, 800580e <HAL_I2C_EV_IRQHandler+0x136>
 80057fc:	2c40      	cmp	r4, #64	; 0x40
 80057fe:	d106      	bne.n	800580e <HAL_I2C_EV_IRQHandler+0x136>
			__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005800:	9701      	str	r7, [sp, #4]
 8005802:	695c      	ldr	r4, [r3, #20]
 8005804:	9401      	str	r4, [sp, #4]
 8005806:	699c      	ldr	r4, [r3, #24]
 8005808:	9401      	str	r4, [sp, #4]
 800580a:	9c01      	ldr	r4, [sp, #4]
 800580c:	e782      	b.n	8005714 <HAL_I2C_EV_IRQHandler+0x3c>
		}else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)) {
 800580e:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8005810:	b98c      	cbnz	r4, 8005836 <HAL_I2C_EV_IRQHandler+0x15e>
 8005812:	6907      	ldr	r7, [r0, #16]
 8005814:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
 8005818:	d10d      	bne.n	8005836 <HAL_I2C_EV_IRQHandler+0x15e>
			__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800581a:	9402      	str	r4, [sp, #8]
 800581c:	695c      	ldr	r4, [r3, #20]
 800581e:	9402      	str	r4, [sp, #8]
 8005820:	699c      	ldr	r4, [r3, #24]
 8005822:	9402      	str	r4, [sp, #8]
 8005824:	9c02      	ldr	r4, [sp, #8]
			hi2c->Instance->CR1 |= I2C_CR1_START;
 8005826:	681c      	ldr	r4, [r3, #0]
 8005828:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 800582c:	601c      	str	r4, [r3, #0]
			hi2c->EventCount++;
 800582e:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8005830:	3401      	adds	r4, #1
			hi2c->EventCount = 0U;
 8005832:	6504      	str	r4, [r0, #80]	; 0x50
 8005834:	e76e      	b.n	8005714 <HAL_I2C_EV_IRQHandler+0x3c>
			if (hi2c->XferCount == 0U) {
 8005836:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8005838:	b2a4      	uxth	r4, r4
 800583a:	b954      	cbnz	r4, 8005852 <HAL_I2C_EV_IRQHandler+0x17a>
				__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800583c:	9403      	str	r4, [sp, #12]
 800583e:	695c      	ldr	r4, [r3, #20]
 8005840:	9403      	str	r4, [sp, #12]
 8005842:	699c      	ldr	r4, [r3, #24]
 8005844:	9403      	str	r4, [sp, #12]
 8005846:	9c03      	ldr	r4, [sp, #12]
						hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005848:	681c      	ldr	r4, [r3, #0]
 800584a:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 800584e:	601c      	str	r4, [r3, #0]
 8005850:	e019      	b.n	8005886 <HAL_I2C_EV_IRQHandler+0x1ae>
			}else if (hi2c->XferCount == 1U) {
 8005852:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8005854:	b2a4      	uxth	r4, r4
 8005856:	2c01      	cmp	r4, #1
 8005858:	d142      	bne.n	80058e0 <HAL_I2C_EV_IRQHandler+0x208>
				if (CurrentXferOptions == I2C_NO_OPTION_FRAME) {
 800585a:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 800585e:	d11b      	bne.n	8005898 <HAL_I2C_EV_IRQHandler+0x1c0>
					hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005860:	681c      	ldr	r4, [r3, #0]
 8005862:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8005866:	601c      	str	r4, [r3, #0]
					if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) {
 8005868:	685c      	ldr	r4, [r3, #4]
 800586a:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
 800586e:	d00c      	beq.n	800588a <HAL_I2C_EV_IRQHandler+0x1b2>
						hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005870:	681c      	ldr	r4, [r3, #0]
 8005872:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8005876:	601c      	str	r4, [r3, #0]
						__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005878:	2400      	movs	r4, #0
 800587a:	9404      	str	r4, [sp, #16]
 800587c:	695c      	ldr	r4, [r3, #20]
 800587e:	9404      	str	r4, [sp, #16]
 8005880:	699c      	ldr	r4, [r3, #24]
 8005882:	9404      	str	r4, [sp, #16]
 8005884:	9c04      	ldr	r4, [sp, #16]
			hi2c->EventCount = 0U;
 8005886:	2400      	movs	r4, #0
 8005888:	e7d3      	b.n	8005832 <HAL_I2C_EV_IRQHandler+0x15a>
						__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800588a:	9405      	str	r4, [sp, #20]
 800588c:	695c      	ldr	r4, [r3, #20]
 800588e:	9405      	str	r4, [sp, #20]
 8005890:	699c      	ldr	r4, [r3, #24]
 8005892:	9405      	str	r4, [sp, #20]
 8005894:	9c05      	ldr	r4, [sp, #20]
 8005896:	e7d7      	b.n	8005848 <HAL_I2C_EV_IRQHandler+0x170>
				else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005898:	2e04      	cmp	r6, #4
 800589a:	d015      	beq.n	80058c8 <HAL_I2C_EV_IRQHandler+0x1f0>
 800589c:	2e08      	cmp	r6, #8
 800589e:	d013      	beq.n	80058c8 <HAL_I2C_EV_IRQHandler+0x1f0>
					 && (Prev_State != I2C_STATE_MASTER_BUSY_RX)) {
 80058a0:	f1be 0f12 	cmp.w	lr, #18
 80058a4:	d010      	beq.n	80058c8 <HAL_I2C_EV_IRQHandler+0x1f0>
					if (hi2c->XferOptions != I2C_NEXT_FRAME) {
 80058a6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80058a8:	2c02      	cmp	r4, #2
						hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80058aa:	681c      	ldr	r4, [r3, #0]
 80058ac:	bf14      	ite	ne
 80058ae:	f424 6480 	bicne.w	r4, r4, #1024	; 0x400
						hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80058b2:	f444 6480 	orreq.w	r4, r4, #1024	; 0x400
 80058b6:	601c      	str	r4, [r3, #0]
					__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058b8:	2400      	movs	r4, #0
 80058ba:	9406      	str	r4, [sp, #24]
 80058bc:	695c      	ldr	r4, [r3, #20]
 80058be:	9406      	str	r4, [sp, #24]
 80058c0:	699c      	ldr	r4, [r3, #24]
 80058c2:	9406      	str	r4, [sp, #24]
 80058c4:	9c06      	ldr	r4, [sp, #24]
 80058c6:	e7de      	b.n	8005886 <HAL_I2C_EV_IRQHandler+0x1ae>
					hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80058c8:	681c      	ldr	r4, [r3, #0]
 80058ca:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 80058ce:	601c      	str	r4, [r3, #0]
					__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058d0:	2400      	movs	r4, #0
 80058d2:	9407      	str	r4, [sp, #28]
 80058d4:	695c      	ldr	r4, [r3, #20]
 80058d6:	9407      	str	r4, [sp, #28]
 80058d8:	699c      	ldr	r4, [r3, #24]
 80058da:	9407      	str	r4, [sp, #28]
 80058dc:	9c07      	ldr	r4, [sp, #28]
 80058de:	e7b3      	b.n	8005848 <HAL_I2C_EV_IRQHandler+0x170>
			}else if (hi2c->XferCount == 2U) {
 80058e0:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 80058e2:	b2a4      	uxth	r4, r4
 80058e4:	2c02      	cmp	r4, #2
 80058e6:	d11c      	bne.n	8005922 <HAL_I2C_EV_IRQHandler+0x24a>
				if (hi2c->XferOptions != I2C_NEXT_FRAME) {
 80058e8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80058ea:	2c02      	cmp	r4, #2
					hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80058ec:	681c      	ldr	r4, [r3, #0]
 80058ee:	bf1d      	ittte	ne
 80058f0:	f424 6480 	bicne.w	r4, r4, #1024	; 0x400
 80058f4:	601c      	strne	r4, [r3, #0]
					hi2c->Instance->CR1 |= I2C_CR1_POS;
 80058f6:	681c      	ldrne	r4, [r3, #0]
					hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80058f8:	f444 6480 	orreq.w	r4, r4, #1024	; 0x400
					hi2c->Instance->CR1 |= I2C_CR1_POS;
 80058fc:	bf18      	it	ne
 80058fe:	f444 6400 	orrne.w	r4, r4, #2048	; 0x800
					hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8005902:	601c      	str	r4, [r3, #0]
				if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) {
 8005904:	685c      	ldr	r4, [r3, #4]
 8005906:	0527      	lsls	r7, r4, #20
					hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8005908:	bf42      	ittt	mi
 800590a:	685c      	ldrmi	r4, [r3, #4]
 800590c:	f444 5480 	orrmi.w	r4, r4, #4096	; 0x1000
 8005910:	605c      	strmi	r4, [r3, #4]
				__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005912:	2400      	movs	r4, #0
 8005914:	9408      	str	r4, [sp, #32]
 8005916:	695c      	ldr	r4, [r3, #20]
 8005918:	9408      	str	r4, [sp, #32]
 800591a:	699c      	ldr	r4, [r3, #24]
 800591c:	9408      	str	r4, [sp, #32]
 800591e:	9c08      	ldr	r4, [sp, #32]
 8005920:	e7b1      	b.n	8005886 <HAL_I2C_EV_IRQHandler+0x1ae>
				hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8005922:	681c      	ldr	r4, [r3, #0]
 8005924:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8005928:	601c      	str	r4, [r3, #0]
				if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) {
 800592a:	685c      	ldr	r4, [r3, #4]
 800592c:	0526      	lsls	r6, r4, #20
					hi2c->Instance->CR2 |= I2C_CR2_LAST;
 800592e:	bf42      	ittt	mi
 8005930:	685c      	ldrmi	r4, [r3, #4]
 8005932:	f444 5480 	orrmi.w	r4, r4, #4096	; 0x1000
 8005936:	605c      	strmi	r4, [r3, #4]
				__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005938:	2400      	movs	r4, #0
 800593a:	9409      	str	r4, [sp, #36]	; 0x24
 800593c:	695c      	ldr	r4, [r3, #20]
 800593e:	9409      	str	r4, [sp, #36]	; 0x24
 8005940:	699c      	ldr	r4, [r3, #24]
 8005942:	9409      	str	r4, [sp, #36]	; 0x24
 8005944:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005946:	e79e      	b.n	8005886 <HAL_I2C_EV_IRQHandler+0x1ae>
		__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005948:	2400      	movs	r4, #0
 800594a:	940a      	str	r4, [sp, #40]	; 0x28
 800594c:	695c      	ldr	r4, [r3, #20]
 800594e:	940a      	str	r4, [sp, #40]	; 0x28
 8005950:	699c      	ldr	r4, [r3, #24]
 8005952:	940a      	str	r4, [sp, #40]	; 0x28
 8005954:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005956:	e6dd      	b.n	8005714 <HAL_I2C_EV_IRQHandler+0x3c>
	}else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005958:	2a21      	cmp	r2, #33	; 0x21
 800595a:	d003      	beq.n	8005964 <HAL_I2C_EV_IRQHandler+0x28c>
 800595c:	2940      	cmp	r1, #64	; 0x40
 800595e:	d108      	bne.n	8005972 <HAL_I2C_EV_IRQHandler+0x29a>
		  ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX))) {
 8005960:	2a22      	cmp	r2, #34	; 0x22
 8005962:	d106      	bne.n	8005972 <HAL_I2C_EV_IRQHandler+0x29a>
		if (hi2c->XferCount == 0U) {
 8005964:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8005966:	b292      	uxth	r2, r2
 8005968:	b982      	cbnz	r2, 800598c <HAL_I2C_EV_IRQHandler+0x2b4>
			__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005970:	605a      	str	r2, [r3, #4]
}
 8005972:	b00d      	add	sp, #52	; 0x34
 8005974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005976:	bf00      	nop
 8005978:	00100004 	.word	0x00100004
 800597c:	00010004 	.word	0x00010004
 8005980:	00010080 	.word	0x00010080
 8005984:	00010008 	.word	0x00010008
 8005988:	00010002 	.word	0x00010002
			if (hi2c->Mode == HAL_I2C_MODE_MEM) {
 800598c:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8005990:	2a40      	cmp	r2, #64	; 0x40
 8005992:	d127      	bne.n	80059e4 <HAL_I2C_EV_IRQHandler+0x30c>
				if (hi2c->EventCount == 0) {
 8005994:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8005996:	b97a      	cbnz	r2, 80059b8 <HAL_I2C_EV_IRQHandler+0x2e0>
					if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT) {
 8005998:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800599a:	2a01      	cmp	r2, #1
						hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800599c:	6c82      	ldr	r2, [r0, #72]	; 0x48
					if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT) {
 800599e:	d105      	bne.n	80059ac <HAL_I2C_EV_IRQHandler+0x2d4>
 80059a0:	b2d2      	uxtb	r2, r2
						hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80059a2:	611a      	str	r2, [r3, #16]
						hi2c->EventCount += 2;
 80059a4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80059a6:	3302      	adds	r3, #2
						hi2c->EventCount++;
 80059a8:	6503      	str	r3, [r0, #80]	; 0x50
 80059aa:	e7e2      	b.n	8005972 <HAL_I2C_EV_IRQHandler+0x29a>
						hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80059ac:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80059b0:	611a      	str	r2, [r3, #16]
						hi2c->EventCount++;
 80059b2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80059b4:	3301      	adds	r3, #1
 80059b6:	e7f7      	b.n	80059a8 <HAL_I2C_EV_IRQHandler+0x2d0>
				}else if (hi2c->EventCount == 1) {
 80059b8:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80059ba:	2a01      	cmp	r2, #1
 80059bc:	d102      	bne.n	80059c4 <HAL_I2C_EV_IRQHandler+0x2ec>
					hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80059be:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80059c0:	b2d2      	uxtb	r2, r2
 80059c2:	e7f5      	b.n	80059b0 <HAL_I2C_EV_IRQHandler+0x2d8>
				}else if (hi2c->EventCount == 2) {
 80059c4:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80059c6:	2a02      	cmp	r2, #2
 80059c8:	d1d3      	bne.n	8005972 <HAL_I2C_EV_IRQHandler+0x29a>
					if (hi2c->State == HAL_I2C_STATE_BUSY_RX) {
 80059ca:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80059ce:	2a22      	cmp	r2, #34	; 0x22
 80059d0:	d104      	bne.n	80059dc <HAL_I2C_EV_IRQHandler+0x304>
						hi2c->Instance->CR1 |= I2C_CR1_START;
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059d8:	601a      	str	r2, [r3, #0]
 80059da:	e7ca      	b.n	8005972 <HAL_I2C_EV_IRQHandler+0x29a>
					}else if (hi2c->State == HAL_I2C_STATE_BUSY_TX) {
 80059dc:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80059e0:	2a21      	cmp	r2, #33	; 0x21
 80059e2:	d1c6      	bne.n	8005972 <HAL_I2C_EV_IRQHandler+0x29a>
		hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80059e4:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80059e6:	1c51      	adds	r1, r2, #1
 80059e8:	6241      	str	r1, [r0, #36]	; 0x24
 80059ea:	7812      	ldrb	r2, [r2, #0]
 80059ec:	611a      	str	r2, [r3, #16]
		hi2c->XferCount--;
 80059ee:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80059f0:	3b01      	subs	r3, #1
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 80059f6:	e7bc      	b.n	8005972 <HAL_I2C_EV_IRQHandler+0x29a>
			else if (((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET)) {
 80059f8:	2c00      	cmp	r4, #0
 80059fa:	d0ba      	beq.n	8005972 <HAL_I2C_EV_IRQHandler+0x29a>
 80059fc:	0594      	lsls	r4, r2, #22
 80059fe:	d5b8      	bpl.n	8005972 <HAL_I2C_EV_IRQHandler+0x29a>
	uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005a00:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	if (hi2c->State == HAL_I2C_STATE_BUSY_TX) {
 8005a02:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8005a06:	2a21      	cmp	r2, #33	; 0x21
 8005a08:	d1b3      	bne.n	8005972 <HAL_I2C_EV_IRQHandler+0x29a>
		if (hi2c->XferCount != 0U) {
 8005a0a:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8005a0c:	b292      	uxth	r2, r2
 8005a0e:	2a00      	cmp	r2, #0
 8005a10:	d1e8      	bne.n	80059e4 <HAL_I2C_EV_IRQHandler+0x30c>
			if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME)) {
 8005a12:	2904      	cmp	r1, #4
 8005a14:	d00d      	beq.n	8005a32 <HAL_I2C_EV_IRQHandler+0x35a>
 8005a16:	2908      	cmp	r1, #8
 8005a18:	d00b      	beq.n	8005a32 <HAL_I2C_EV_IRQHandler+0x35a>
 8005a1a:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8005a1e:	d008      	beq.n	8005a32 <HAL_I2C_EV_IRQHandler+0x35a>
				__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a20:	6859      	ldr	r1, [r3, #4]
 8005a22:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8005a26:	6059      	str	r1, [r3, #4]
				hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005a28:	2311      	movs	r3, #17
 8005a2a:	6303      	str	r3, [r0, #48]	; 0x30
				hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a2c:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
 8005a30:	e6a2      	b.n	8005778 <HAL_I2C_EV_IRQHandler+0xa0>
				__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a32:	685a      	ldr	r2, [r3, #4]
 8005a34:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a38:	605a      	str	r2, [r3, #4]
				hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a40:	601a      	str	r2, [r3, #0]
				hi2c->PreviousState = I2C_STATE_NONE;
 8005a42:	2300      	movs	r3, #0
				hi2c->State = HAL_I2C_STATE_READY;
 8005a44:	2220      	movs	r2, #32
				hi2c->PreviousState = I2C_STATE_NONE;
 8005a46:	6303      	str	r3, [r0, #48]	; 0x30
				hi2c->State = HAL_I2C_STATE_READY;
 8005a48:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
				if (hi2c->Mode == HAL_I2C_MODE_MEM) {
 8005a4c:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
					hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a50:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
				if (hi2c->Mode == HAL_I2C_MODE_MEM) {
 8005a54:	2a40      	cmp	r2, #64	; 0x40
 8005a56:	f47f ae92 	bne.w	800577e <HAL_I2C_EV_IRQHandler+0xa6>
					HAL_I2C_MemTxCpltCallback(hi2c);
 8005a5a:	f7ff fda5 	bl	80055a8 <HAL_I2C_MemTxCpltCallback>
 8005a5e:	e788      	b.n	8005972 <HAL_I2C_EV_IRQHandler+0x29a>
			if (((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET)) {
 8005a60:	4d90      	ldr	r5, [pc, #576]	; (8005ca4 <HAL_I2C_EV_IRQHandler+0x5cc>)
 8005a62:	400d      	ands	r5, r1
 8005a64:	2d00      	cmp	r5, #0
 8005a66:	d041      	beq.n	8005aec <HAL_I2C_EV_IRQHandler+0x414>
 8005a68:	0551      	lsls	r1, r2, #21
 8005a6a:	d53f      	bpl.n	8005aec <HAL_I2C_EV_IRQHandler+0x414>
 8005a6c:	2c00      	cmp	r4, #0
 8005a6e:	d13d      	bne.n	8005aec <HAL_I2C_EV_IRQHandler+0x414>
	if (hi2c->State == HAL_I2C_STATE_BUSY_RX) {
 8005a70:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8005a74:	2a22      	cmp	r2, #34	; 0x22
 8005a76:	f47f af7c 	bne.w	8005972 <HAL_I2C_EV_IRQHandler+0x29a>
		tmp = hi2c->XferCount;
 8005a7a:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8005a7c:	b292      	uxth	r2, r2
		if (tmp > 3U) {
 8005a7e:	2a03      	cmp	r2, #3
 8005a80:	d913      	bls.n	8005aaa <HAL_I2C_EV_IRQHandler+0x3d2>
			(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8005a82:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	1c51      	adds	r1, r2, #1
 8005a88:	6241      	str	r1, [r0, #36]	; 0x24
 8005a8a:	7013      	strb	r3, [r2, #0]
			hi2c->XferCount--;
 8005a8c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	8543      	strh	r3, [r0, #42]	; 0x2a
			if (hi2c->XferCount == 3) {
 8005a94:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	2b03      	cmp	r3, #3
 8005a9a:	f47f af6a 	bne.w	8005972 <HAL_I2C_EV_IRQHandler+0x29a>
				__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a9e:	6802      	ldr	r2, [r0, #0]
 8005aa0:	6853      	ldr	r3, [r2, #4]
 8005aa2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005aa6:	6053      	str	r3, [r2, #4]
 8005aa8:	e763      	b.n	8005972 <HAL_I2C_EV_IRQHandler+0x29a>
		}else if ((tmp == 1U) || (tmp == 0U)) {
 8005aaa:	2a01      	cmp	r2, #1
 8005aac:	f63f af61 	bhi.w	8005972 <HAL_I2C_EV_IRQHandler+0x29a>
			hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ab6:	601a      	str	r2, [r3, #0]
			__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ab8:	685a      	ldr	r2, [r3, #4]
 8005aba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005abe:	605a      	str	r2, [r3, #4]
			(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8005ac0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	1c51      	adds	r1, r2, #1
 8005ac6:	6241      	str	r1, [r0, #36]	; 0x24
 8005ac8:	7013      	strb	r3, [r2, #0]
			hi2c->XferCount--;
 8005aca:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8005acc:	3b01      	subs	r3, #1
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	8543      	strh	r3, [r0, #42]	; 0x2a
			hi2c->State = HAL_I2C_STATE_READY;
 8005ad2:	2320      	movs	r3, #32
 8005ad4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
			hi2c->PreviousState = I2C_STATE_NONE;
 8005ad8:	6304      	str	r4, [r0, #48]	; 0x30
			if (hi2c->Mode == HAL_I2C_MODE_MEM) {
 8005ada:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
				hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ade:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
			if (hi2c->Mode == HAL_I2C_MODE_MEM) {
 8005ae2:	2b40      	cmp	r3, #64	; 0x40
		if (hi2c->Mode == HAL_I2C_MODE_MEM) {
 8005ae4:	d158      	bne.n	8005b98 <HAL_I2C_EV_IRQHandler+0x4c0>
			HAL_I2C_MemRxCpltCallback(hi2c);
 8005ae6:	f7ff fd60 	bl	80055aa <HAL_I2C_MemRxCpltCallback>
 8005aea:	e742      	b.n	8005972 <HAL_I2C_EV_IRQHandler+0x29a>
			else if (((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET)) {
 8005aec:	2c00      	cmp	r4, #0
 8005aee:	f43f af40 	beq.w	8005972 <HAL_I2C_EV_IRQHandler+0x29a>
 8005af2:	0597      	lsls	r7, r2, #22
 8005af4:	f57f af3d 	bpl.w	8005972 <HAL_I2C_EV_IRQHandler+0x29a>
	uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005af8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	if (hi2c->XferCount == 4U) {
 8005afa:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8005afc:	b292      	uxth	r2, r2
 8005afe:	2a04      	cmp	r2, #4
 8005b00:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8005b02:	d108      	bne.n	8005b16 <HAL_I2C_EV_IRQHandler+0x43e>
		__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b04:	6859      	ldr	r1, [r3, #4]
 8005b06:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005b0a:	6059      	str	r1, [r3, #4]
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8005b0c:	1c51      	adds	r1, r2, #1
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	6241      	str	r1, [r0, #36]	; 0x24
 8005b12:	7013      	strb	r3, [r2, #0]
 8005b14:	e76b      	b.n	80059ee <HAL_I2C_EV_IRQHandler+0x316>
	}else if (hi2c->XferCount == 3U) {
 8005b16:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8005b18:	b2a4      	uxth	r4, r4
 8005b1a:	2c03      	cmp	r4, #3
 8005b1c:	d108      	bne.n	8005b30 <HAL_I2C_EV_IRQHandler+0x458>
		__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b1e:	6859      	ldr	r1, [r3, #4]
 8005b20:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005b24:	6059      	str	r1, [r3, #4]
		hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005b26:	6819      	ldr	r1, [r3, #0]
 8005b28:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005b2c:	6019      	str	r1, [r3, #0]
 8005b2e:	e7ed      	b.n	8005b0c <HAL_I2C_EV_IRQHandler+0x434>
	}else if (hi2c->XferCount == 2U) {
 8005b30:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8005b32:	b2a4      	uxth	r4, r4
 8005b34:	2c02      	cmp	r4, #2
 8005b36:	d1e9      	bne.n	8005b0c <HAL_I2C_EV_IRQHandler+0x434>
		if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)) {
 8005b38:	3901      	subs	r1, #1
 8005b3a:	2901      	cmp	r1, #1
			hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005b3c:	6819      	ldr	r1, [r3, #0]
 8005b3e:	bf9d      	ittte	ls
 8005b40:	f421 6180 	bicls.w	r1, r1, #1024	; 0x400
 8005b44:	6019      	strls	r1, [r3, #0]
			hi2c->Instance->CR1 |= I2C_CR1_START;
 8005b46:	6819      	ldrls	r1, [r3, #0]
			hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005b48:	f441 7100 	orrhi.w	r1, r1, #512	; 0x200
			hi2c->Instance->CR1 |= I2C_CR1_START;
 8005b4c:	bf98      	it	ls
 8005b4e:	f441 7180 	orrls.w	r1, r1, #256	; 0x100
			hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005b52:	6019      	str	r1, [r3, #0]
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	1c51      	adds	r1, r2, #1
 8005b58:	6241      	str	r1, [r0, #36]	; 0x24
 8005b5a:	7013      	strb	r3, [r2, #0]
		hi2c->XferCount--;
 8005b5c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	8543      	strh	r3, [r0, #42]	; 0x2a
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8005b64:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005b66:	1c5a      	adds	r2, r3, #1
 8005b68:	6242      	str	r2, [r0, #36]	; 0x24
 8005b6a:	6802      	ldr	r2, [r0, #0]
 8005b6c:	6912      	ldr	r2, [r2, #16]
 8005b6e:	701a      	strb	r2, [r3, #0]
		hi2c->XferCount--;
 8005b70:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
		__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005b72:	6802      	ldr	r2, [r0, #0]
		hi2c->XferCount--;
 8005b74:	3b01      	subs	r3, #1
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	8543      	strh	r3, [r0, #42]	; 0x2a
		__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005b7a:	6853      	ldr	r3, [r2, #4]
 8005b7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b80:	6053      	str	r3, [r2, #4]
		hi2c->State = HAL_I2C_STATE_READY;
 8005b82:	2320      	movs	r3, #32
 8005b84:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
		hi2c->PreviousState = I2C_STATE_NONE;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	6303      	str	r3, [r0, #48]	; 0x30
		if (hi2c->Mode == HAL_I2C_MODE_MEM) {
 8005b8c:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
			hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b90:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
		if (hi2c->Mode == HAL_I2C_MODE_MEM) {
 8005b94:	2a40      	cmp	r2, #64	; 0x40
 8005b96:	e7a5      	b.n	8005ae4 <HAL_I2C_EV_IRQHandler+0x40c>
			HAL_I2C_MasterRxCpltCallback(hi2c);
 8005b98:	f7ff fd01 	bl	800559e <HAL_I2C_MasterRxCpltCallback>
 8005b9c:	e6e9      	b.n	8005972 <HAL_I2C_EV_IRQHandler+0x29a>
		if (((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET)) {
 8005b9e:	4c42      	ldr	r4, [pc, #264]	; (8005ca8 <HAL_I2C_EV_IRQHandler+0x5d0>)
 8005ba0:	400c      	ands	r4, r1
 8005ba2:	b174      	cbz	r4, 8005bc2 <HAL_I2C_EV_IRQHandler+0x4ea>
 8005ba4:	0596      	lsls	r6, r2, #22
 8005ba6:	d50c      	bpl.n	8005bc2 <HAL_I2C_EV_IRQHandler+0x4ea>
	if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET) {
 8005ba8:	6999      	ldr	r1, [r3, #24]
	if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET) {
 8005baa:	699b      	ldr	r3, [r3, #24]
	if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET) {
 8005bac:	f081 0104 	eor.w	r1, r1, #4
	if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET) {
 8005bb0:	061d      	lsls	r5, r3, #24
	uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005bb2:	f3c1 0180 	ubfx	r1, r1, #2, #1
		SlaveAddrCode = hi2c->Init.OwnAddress1;
 8005bb6:	bf54      	ite	pl
 8005bb8:	8982      	ldrhpl	r2, [r0, #12]
		SlaveAddrCode = hi2c->Init.OwnAddress2;
 8005bba:	8b02      	ldrhmi	r2, [r0, #24]
	HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005bbc:	f7ff fcf2 	bl	80055a4 <HAL_I2C_AddrCallback>
 8005bc0:	e6d7      	b.n	8005972 <HAL_I2C_EV_IRQHandler+0x29a>
		else if (((sr1itflags & I2C_FLAG_STOPF) != RESET) && ((itsources & I2C_IT_EVT) != RESET)) {
 8005bc2:	4c3a      	ldr	r4, [pc, #232]	; (8005cac <HAL_I2C_EV_IRQHandler+0x5d4>)
 8005bc4:	400c      	ands	r4, r1
 8005bc6:	2c00      	cmp	r4, #0
 8005bc8:	d074      	beq.n	8005cb4 <HAL_I2C_EV_IRQHandler+0x5dc>
 8005bca:	0594      	lsls	r4, r2, #22
 8005bcc:	d572      	bpl.n	8005cb4 <HAL_I2C_EV_IRQHandler+0x5dc>
	uint32_t CurrentState = hi2c->State;
 8005bce:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
	__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005bd2:	6859      	ldr	r1, [r3, #4]
 8005bd4:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8005bd8:	6059      	str	r1, [r3, #4]
	__HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005bda:	2100      	movs	r1, #0
 8005bdc:	910b      	str	r1, [sp, #44]	; 0x2c
 8005bde:	6959      	ldr	r1, [r3, #20]
 8005be0:	910b      	str	r1, [sp, #44]	; 0x2c
 8005be2:	6819      	ldr	r1, [r3, #0]
 8005be4:	f041 0101 	orr.w	r1, r1, #1
 8005be8:	6019      	str	r1, [r3, #0]
 8005bea:	990b      	ldr	r1, [sp, #44]	; 0x2c
	hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005bec:	6819      	ldr	r1, [r3, #0]
 8005bee:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005bf2:	6019      	str	r1, [r3, #0]
	if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) {
 8005bf4:	6859      	ldr	r1, [r3, #4]
 8005bf6:	0509      	lsls	r1, r1, #20
	uint32_t CurrentState = hi2c->State;
 8005bf8:	b2d2      	uxtb	r2, r2
	if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) {
 8005bfa:	d50c      	bpl.n	8005c16 <HAL_I2C_EV_IRQHandler+0x53e>
		if ((hi2c->State == HAL_I2C_STATE_BUSY_RX) || (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)) {
 8005bfc:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8005c00:	2922      	cmp	r1, #34	; 0x22
 8005c02:	d003      	beq.n	8005c0c <HAL_I2C_EV_IRQHandler+0x534>
 8005c04:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8005c08:	292a      	cmp	r1, #42	; 0x2a
 8005c0a:	d129      	bne.n	8005c60 <HAL_I2C_EV_IRQHandler+0x588>
			hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8005c0c:	6b81      	ldr	r1, [r0, #56]	; 0x38
			hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8005c0e:	6809      	ldr	r1, [r1, #0]
 8005c10:	6849      	ldr	r1, [r1, #4]
 8005c12:	b289      	uxth	r1, r1
 8005c14:	8541      	strh	r1, [r0, #42]	; 0x2a
	if (hi2c->XferCount != 0U) {
 8005c16:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8005c18:	b289      	uxth	r1, r1
 8005c1a:	b1e1      	cbz	r1, 8005c56 <HAL_I2C_EV_IRQHandler+0x57e>
		if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) {
 8005c1c:	6959      	ldr	r1, [r3, #20]
 8005c1e:	074f      	lsls	r7, r1, #29
 8005c20:	d508      	bpl.n	8005c34 <HAL_I2C_EV_IRQHandler+0x55c>
			(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8005c22:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	1c4c      	adds	r4, r1, #1
 8005c28:	6244      	str	r4, [r0, #36]	; 0x24
 8005c2a:	700b      	strb	r3, [r1, #0]
			hi2c->XferCount--;
 8005c2c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	8543      	strh	r3, [r0, #42]	; 0x2a
		if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) {
 8005c34:	6801      	ldr	r1, [r0, #0]
 8005c36:	694b      	ldr	r3, [r1, #20]
 8005c38:	065e      	lsls	r6, r3, #25
 8005c3a:	d508      	bpl.n	8005c4e <HAL_I2C_EV_IRQHandler+0x576>
			(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8005c3c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005c3e:	6909      	ldr	r1, [r1, #16]
 8005c40:	1c5c      	adds	r4, r3, #1
 8005c42:	6244      	str	r4, [r0, #36]	; 0x24
 8005c44:	7019      	strb	r1, [r3, #0]
			hi2c->XferCount--;
 8005c46:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	8543      	strh	r3, [r0, #42]	; 0x2a
		hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c4e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005c50:	f043 0304 	orr.w	r3, r3, #4
 8005c54:	6403      	str	r3, [r0, #64]	; 0x40
	if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE) {
 8005c56:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005c58:	b123      	cbz	r3, 8005c64 <HAL_I2C_EV_IRQHandler+0x58c>
		I2C_ITError(hi2c);
 8005c5a:	f7ff fca9 	bl	80055b0 <I2C_ITError>
 8005c5e:	e688      	b.n	8005972 <HAL_I2C_EV_IRQHandler+0x29a>
			hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8005c60:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8005c62:	e7d4      	b.n	8005c0e <HAL_I2C_EV_IRQHandler+0x536>
		if ((CurrentState == HAL_I2C_STATE_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN) || \
 8005c64:	f1a2 0128 	sub.w	r1, r2, #40	; 0x28
 8005c68:	2902      	cmp	r1, #2
 8005c6a:	d80a      	bhi.n	8005c82 <HAL_I2C_EV_IRQHandler+0x5aa>
			hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c6c:	4a10      	ldr	r2, [pc, #64]	; (8005cb0 <HAL_I2C_EV_IRQHandler+0x5d8>)
 8005c6e:	62c2      	str	r2, [r0, #44]	; 0x2c
			hi2c->State = HAL_I2C_STATE_READY;
 8005c70:	2220      	movs	r2, #32
			hi2c->PreviousState = I2C_STATE_NONE;
 8005c72:	6303      	str	r3, [r0, #48]	; 0x30
			hi2c->State = HAL_I2C_STATE_READY;
 8005c74:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
			hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c78:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
			HAL_I2C_ListenCpltCallback(hi2c);
 8005c7c:	f7ff fc93 	bl	80055a6 <HAL_I2C_ListenCpltCallback>
 8005c80:	e677      	b.n	8005972 <HAL_I2C_EV_IRQHandler+0x29a>
			if ((hi2c->PreviousState == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX)) {
 8005c82:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005c84:	2b22      	cmp	r3, #34	; 0x22
 8005c86:	d002      	beq.n	8005c8e <HAL_I2C_EV_IRQHandler+0x5b6>
 8005c88:	2a22      	cmp	r2, #34	; 0x22
 8005c8a:	f47f ae72 	bne.w	8005972 <HAL_I2C_EV_IRQHandler+0x29a>
				hi2c->PreviousState = I2C_STATE_NONE;
 8005c8e:	2300      	movs	r3, #0
				hi2c->State = HAL_I2C_STATE_READY;
 8005c90:	2220      	movs	r2, #32
				hi2c->PreviousState = I2C_STATE_NONE;
 8005c92:	6303      	str	r3, [r0, #48]	; 0x30
				hi2c->State = HAL_I2C_STATE_READY;
 8005c94:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
				hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c98:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
			HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005c9c:	f7ff fc81 	bl	80055a2 <HAL_I2C_SlaveRxCpltCallback>
 8005ca0:	e667      	b.n	8005972 <HAL_I2C_EV_IRQHandler+0x29a>
 8005ca2:	bf00      	nop
 8005ca4:	00010040 	.word	0x00010040
 8005ca8:	00010002 	.word	0x00010002
 8005cac:	00010010 	.word	0x00010010
 8005cb0:	ffff0000 	.word	0xffff0000
		else if ((sr2itflags & I2C_FLAG_TRA) != RESET) {
 8005cb4:	4e39      	ldr	r6, [pc, #228]	; (8005d9c <HAL_I2C_EV_IRQHandler+0x6c4>)
 8005cb6:	4c3a      	ldr	r4, [pc, #232]	; (8005da0 <HAL_I2C_EV_IRQHandler+0x6c8>)
 8005cb8:	402e      	ands	r6, r5
 8005cba:	400c      	ands	r4, r1
 8005cbc:	2e00      	cmp	r6, #0
 8005cbe:	d036      	beq.n	8005d2e <HAL_I2C_EV_IRQHandler+0x656>
			if (((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET)) {
 8005cc0:	4d38      	ldr	r5, [pc, #224]	; (8005da4 <HAL_I2C_EV_IRQHandler+0x6cc>)
 8005cc2:	400d      	ands	r5, r1
 8005cc4:	b33d      	cbz	r5, 8005d16 <HAL_I2C_EV_IRQHandler+0x63e>
 8005cc6:	0555      	lsls	r5, r2, #21
 8005cc8:	d525      	bpl.n	8005d16 <HAL_I2C_EV_IRQHandler+0x63e>
 8005cca:	bb24      	cbnz	r4, 8005d16 <HAL_I2C_EV_IRQHandler+0x63e>
	uint32_t CurrentState = hi2c->State;
 8005ccc:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
	if (hi2c->XferCount != 0U) {
 8005cd0:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8005cd2:	b292      	uxth	r2, r2
	uint32_t CurrentState = hi2c->State;
 8005cd4:	b2c9      	uxtb	r1, r1
	if (hi2c->XferCount != 0U) {
 8005cd6:	2a00      	cmp	r2, #0
 8005cd8:	f43f ae4b 	beq.w	8005972 <HAL_I2C_EV_IRQHandler+0x29a>
		hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8005cdc:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8005cde:	1c54      	adds	r4, r2, #1
 8005ce0:	6244      	str	r4, [r0, #36]	; 0x24
 8005ce2:	7812      	ldrb	r2, [r2, #0]
 8005ce4:	611a      	str	r2, [r3, #16]
		hi2c->XferCount--;
 8005ce6:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8005ce8:	3a01      	subs	r2, #1
 8005cea:	b292      	uxth	r2, r2
 8005cec:	8542      	strh	r2, [r0, #42]	; 0x2a
		if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)) {
 8005cee:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8005cf0:	b292      	uxth	r2, r2
 8005cf2:	2a00      	cmp	r2, #0
 8005cf4:	f47f ae3d 	bne.w	8005972 <HAL_I2C_EV_IRQHandler+0x29a>
 8005cf8:	2929      	cmp	r1, #41	; 0x29
 8005cfa:	f47f ae3a 	bne.w	8005972 <HAL_I2C_EV_IRQHandler+0x29a>
			__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005cfe:	685a      	ldr	r2, [r3, #4]
 8005d00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d04:	605a      	str	r2, [r3, #4]
			hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005d06:	2321      	movs	r3, #33	; 0x21
 8005d08:	6303      	str	r3, [r0, #48]	; 0x30
			hi2c->State = HAL_I2C_STATE_LISTEN;
 8005d0a:	2328      	movs	r3, #40	; 0x28
 8005d0c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
			HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005d10:	f7ff fc46 	bl	80055a0 <HAL_I2C_SlaveTxCpltCallback>
 8005d14:	e62d      	b.n	8005972 <HAL_I2C_EV_IRQHandler+0x29a>
			else if (((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET)) {
 8005d16:	2c00      	cmp	r4, #0
 8005d18:	f43f ae2b 	beq.w	8005972 <HAL_I2C_EV_IRQHandler+0x29a>
 8005d1c:	0594      	lsls	r4, r2, #22
 8005d1e:	f57f ae28 	bpl.w	8005972 <HAL_I2C_EV_IRQHandler+0x29a>
	if (hi2c->XferCount != 0U) {
 8005d22:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8005d24:	b292      	uxth	r2, r2
 8005d26:	2a00      	cmp	r2, #0
 8005d28:	f47f ae5c 	bne.w	80059e4 <HAL_I2C_EV_IRQHandler+0x30c>
 8005d2c:	e621      	b.n	8005972 <HAL_I2C_EV_IRQHandler+0x29a>
			if (((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET)) {
 8005d2e:	4d1e      	ldr	r5, [pc, #120]	; (8005da8 <HAL_I2C_EV_IRQHandler+0x6d0>)
 8005d30:	400d      	ands	r5, r1
 8005d32:	b335      	cbz	r5, 8005d82 <HAL_I2C_EV_IRQHandler+0x6aa>
 8005d34:	0551      	lsls	r1, r2, #21
 8005d36:	d524      	bpl.n	8005d82 <HAL_I2C_EV_IRQHandler+0x6aa>
 8005d38:	bb1c      	cbnz	r4, 8005d82 <HAL_I2C_EV_IRQHandler+0x6aa>
	uint32_t CurrentState = hi2c->State;
 8005d3a:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
	if (hi2c->XferCount != 0U) {
 8005d3e:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8005d40:	b289      	uxth	r1, r1
	uint32_t CurrentState = hi2c->State;
 8005d42:	b2d2      	uxtb	r2, r2
	if (hi2c->XferCount != 0U) {
 8005d44:	2900      	cmp	r1, #0
 8005d46:	f43f ae14 	beq.w	8005972 <HAL_I2C_EV_IRQHandler+0x29a>
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8005d4a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	1c4c      	adds	r4, r1, #1
 8005d50:	6244      	str	r4, [r0, #36]	; 0x24
 8005d52:	700b      	strb	r3, [r1, #0]
		hi2c->XferCount--;
 8005d54:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8005d56:	3b01      	subs	r3, #1
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	8543      	strh	r3, [r0, #42]	; 0x2a
		if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)) {
 8005d5c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f47f ae06 	bne.w	8005972 <HAL_I2C_EV_IRQHandler+0x29a>
 8005d66:	2a2a      	cmp	r2, #42	; 0x2a
 8005d68:	f47f ae03 	bne.w	8005972 <HAL_I2C_EV_IRQHandler+0x29a>
			__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005d6c:	6802      	ldr	r2, [r0, #0]
 8005d6e:	6853      	ldr	r3, [r2, #4]
 8005d70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d74:	6053      	str	r3, [r2, #4]
			hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005d76:	2322      	movs	r3, #34	; 0x22
 8005d78:	6303      	str	r3, [r0, #48]	; 0x30
			hi2c->State = HAL_I2C_STATE_LISTEN;
 8005d7a:	2328      	movs	r3, #40	; 0x28
 8005d7c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8005d80:	e78c      	b.n	8005c9c <HAL_I2C_EV_IRQHandler+0x5c4>
			else if (((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET)) {
 8005d82:	2c00      	cmp	r4, #0
 8005d84:	f43f adf5 	beq.w	8005972 <HAL_I2C_EV_IRQHandler+0x29a>
 8005d88:	0592      	lsls	r2, r2, #22
 8005d8a:	f57f adf2 	bpl.w	8005972 <HAL_I2C_EV_IRQHandler+0x29a>
	if (hi2c->XferCount != 0U) {
 8005d8e:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8005d90:	b292      	uxth	r2, r2
 8005d92:	2a00      	cmp	r2, #0
 8005d94:	f43f aded 	beq.w	8005972 <HAL_I2C_EV_IRQHandler+0x29a>
		(*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8005d98:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8005d9a:	e6b7      	b.n	8005b0c <HAL_I2C_EV_IRQHandler+0x434>
 8005d9c:	00100004 	.word	0x00100004
 8005da0:	00010004 	.word	0x00010004
 8005da4:	00010080 	.word	0x00010080
 8005da8:	00010040 	.word	0x00010040

08005dac <HAL_I2C_ER_IRQHandler>:
{
 8005dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005dae:	6803      	ldr	r3, [r0, #0]
	if (((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET)) {
 8005db0:	4a49      	ldr	r2, [pc, #292]	; (8005ed8 <HAL_I2C_ER_IRQHandler+0x12c>)
	uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005db2:	695e      	ldr	r6, [r3, #20]
	uint32_t itsources = READ_REG(hi2c->Instance->CR2);
 8005db4:	685d      	ldr	r5, [r3, #4]
	if (((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET)) {
 8005db6:	4216      	tst	r6, r2
{
 8005db8:	4604      	mov	r4, r0
	if (((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET)) {
 8005dba:	d008      	beq.n	8005dce <HAL_I2C_ER_IRQHandler+0x22>
 8005dbc:	05e8      	lsls	r0, r5, #23
 8005dbe:	d506      	bpl.n	8005dce <HAL_I2C_ER_IRQHandler+0x22>
		hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005dc0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005dc2:	f042 0201 	orr.w	r2, r2, #1
 8005dc6:	6422      	str	r2, [r4, #64]	; 0x40
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005dc8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005dcc:	615a      	str	r2, [r3, #20]
	if (((sr1itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERR) != RESET)) {
 8005dce:	f416 3f81 	tst.w	r6, #66048	; 0x10200
 8005dd2:	d008      	beq.n	8005de6 <HAL_I2C_ER_IRQHandler+0x3a>
 8005dd4:	05e9      	lsls	r1, r5, #23
 8005dd6:	d506      	bpl.n	8005de6 <HAL_I2C_ER_IRQHandler+0x3a>
		hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005dd8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005dda:	f042 0202 	orr.w	r2, r2, #2
 8005dde:	6422      	str	r2, [r4, #64]	; 0x40
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005de0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005de4:	615a      	str	r2, [r3, #20]
	if (((sr1itflags & I2C_FLAG_AF) != RESET) && ((itsources & I2C_IT_ERR) != RESET)) {
 8005de6:	f416 3f82 	tst.w	r6, #66560	; 0x10400
 8005dea:	d036      	beq.n	8005e5a <HAL_I2C_ER_IRQHandler+0xae>
 8005dec:	05ea      	lsls	r2, r5, #23
 8005dee:	d534      	bpl.n	8005e5a <HAL_I2C_ER_IRQHandler+0xae>
		tmp1 = hi2c->Mode;
 8005df0:	f894 703e 	ldrb.w	r7, [r4, #62]	; 0x3e
		tmp2 = hi2c->XferCount;
 8005df4:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
		tmp3 = hi2c->State;
 8005df6:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
		tmp4 = hi2c->PreviousState;
 8005dfa:	6b20      	ldr	r0, [r4, #48]	; 0x30
		if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005dfc:	2f20      	cmp	r7, #32
		tmp2 = hi2c->XferCount;
 8005dfe:	b289      	uxth	r1, r1
		tmp3 = hi2c->State;
 8005e00:	b2d2      	uxtb	r2, r2
		if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005e02:	d158      	bne.n	8005eb6 <HAL_I2C_ER_IRQHandler+0x10a>
 8005e04:	2900      	cmp	r1, #0
 8005e06:	d156      	bne.n	8005eb6 <HAL_I2C_ER_IRQHandler+0x10a>
 8005e08:	f002 01f7 	and.w	r1, r2, #247	; 0xf7
 8005e0c:	2921      	cmp	r1, #33	; 0x21
 8005e0e:	d003      	beq.n	8005e18 <HAL_I2C_ER_IRQHandler+0x6c>
		    ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005e10:	2a28      	cmp	r2, #40	; 0x28
 8005e12:	d150      	bne.n	8005eb6 <HAL_I2C_ER_IRQHandler+0x10a>
		     ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX)))) {
 8005e14:	2821      	cmp	r0, #33	; 0x21
 8005e16:	d14e      	bne.n	8005eb6 <HAL_I2C_ER_IRQHandler+0x10a>
	uint32_t CurrentState = hi2c->State;
 8005e18:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
	uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005e1c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	if (((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005e1e:	2904      	cmp	r1, #4
	uint32_t CurrentState = hi2c->State;
 8005e20:	b2d2      	uxtb	r2, r2
	if (((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005e22:	d001      	beq.n	8005e28 <HAL_I2C_ER_IRQHandler+0x7c>
 8005e24:	2908      	cmp	r1, #8
 8005e26:	d12c      	bne.n	8005e82 <HAL_I2C_ER_IRQHandler+0xd6>
 8005e28:	2a28      	cmp	r2, #40	; 0x28
 8005e2a:	d12a      	bne.n	8005e82 <HAL_I2C_ER_IRQHandler+0xd6>
		hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e2c:	4a2b      	ldr	r2, [pc, #172]	; (8005edc <HAL_I2C_ER_IRQHandler+0x130>)
 8005e2e:	62e2      	str	r2, [r4, #44]	; 0x2c
		__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e30:	685a      	ldr	r2, [r3, #4]
 8005e32:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e36:	605a      	str	r2, [r3, #4]
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e3c:	615a      	str	r2, [r3, #20]
		hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e44:	601a      	str	r2, [r3, #0]
		hi2c->PreviousState = I2C_STATE_NONE;
 8005e46:	2300      	movs	r3, #0
		hi2c->State = HAL_I2C_STATE_READY;
 8005e48:	2220      	movs	r2, #32
		hi2c->PreviousState = I2C_STATE_NONE;
 8005e4a:	6323      	str	r3, [r4, #48]	; 0x30
		HAL_I2C_ListenCpltCallback(hi2c);
 8005e4c:	4620      	mov	r0, r4
		hi2c->State = HAL_I2C_STATE_READY;
 8005e4e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e52:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		HAL_I2C_ListenCpltCallback(hi2c);
 8005e56:	f7ff fba6 	bl	80055a6 <HAL_I2C_ListenCpltCallback>
	if (((sr1itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERR) != RESET)) {
 8005e5a:	f416 3f84 	tst.w	r6, #67584	; 0x10800
 8005e5e:	d009      	beq.n	8005e74 <HAL_I2C_ER_IRQHandler+0xc8>
 8005e60:	05eb      	lsls	r3, r5, #23
 8005e62:	d507      	bpl.n	8005e74 <HAL_I2C_ER_IRQHandler+0xc8>
		hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005e64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e66:	f043 0308 	orr.w	r3, r3, #8
 8005e6a:	6423      	str	r3, [r4, #64]	; 0x40
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005e6c:	6823      	ldr	r3, [r4, #0]
 8005e6e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005e72:	615a      	str	r2, [r3, #20]
	if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE) {
 8005e74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e76:	b373      	cbz	r3, 8005ed6 <HAL_I2C_ER_IRQHandler+0x12a>
		I2C_ITError(hi2c);
 8005e78:	4620      	mov	r0, r4
}
 8005e7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		I2C_ITError(hi2c);
 8005e7e:	f7ff bb97 	b.w	80055b0 <I2C_ITError>
	}else if (CurrentState == HAL_I2C_STATE_BUSY_TX) {
 8005e82:	2a21      	cmp	r2, #33	; 0x21
 8005e84:	d123      	bne.n	8005ece <HAL_I2C_ER_IRQHandler+0x122>
		hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e86:	4915      	ldr	r1, [pc, #84]	; (8005edc <HAL_I2C_ER_IRQHandler+0x130>)
 8005e88:	62e1      	str	r1, [r4, #44]	; 0x2c
		hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005e8a:	6322      	str	r2, [r4, #48]	; 0x30
		hi2c->State = HAL_I2C_STATE_READY;
 8005e8c:	2220      	movs	r2, #32
 8005e8e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e92:	2200      	movs	r2, #0
 8005e94:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
		__HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e98:	685a      	ldr	r2, [r3, #4]
 8005e9a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e9e:	605a      	str	r2, [r3, #4]
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ea0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ea4:	615a      	str	r2, [r3, #20]
		hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eac:	601a      	str	r2, [r3, #0]
		HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005eae:	4620      	mov	r0, r4
 8005eb0:	f7ff fb76 	bl	80055a0 <HAL_I2C_SlaveTxCpltCallback>
 8005eb4:	e7d1      	b.n	8005e5a <HAL_I2C_ER_IRQHandler+0xae>
			hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005eb6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005eb8:	f042 0204 	orr.w	r2, r2, #4
 8005ebc:	6422      	str	r2, [r4, #64]	; 0x40
			if (hi2c->Mode == HAL_I2C_MODE_MASTER) {
 8005ebe:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8005ec2:	2a10      	cmp	r2, #16
				SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ec4:	bf02      	ittt	eq
 8005ec6:	681a      	ldreq	r2, [r3, #0]
 8005ec8:	f442 7200 	orreq.w	r2, r2, #512	; 0x200
 8005ecc:	601a      	streq	r2, [r3, #0]
			__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ece:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ed2:	615a      	str	r2, [r3, #20]
 8005ed4:	e7c1      	b.n	8005e5a <HAL_I2C_ER_IRQHandler+0xae>
 8005ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ed8:	00010100 	.word	0x00010100
 8005edc:	ffff0000 	.word	0xffff0000

08005ee0 <I2C_DMAAbort>:
	I2C_HandleTypeDef* hi2c = ( I2C_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005ee0:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8005ee2:	b508      	push	{r3, lr}
	hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005ee4:	6803      	ldr	r3, [r0, #0]
	hi2c->hdmatx->XferAbortCallback = NULL;
 8005ee6:	6b41      	ldr	r1, [r0, #52]	; 0x34
	hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eee:	601a      	str	r2, [r3, #0]
	hi2c->XferCount = 0U;
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	8542      	strh	r2, [r0, #42]	; 0x2a
	hi2c->hdmatx->XferAbortCallback = NULL;
 8005ef4:	650a      	str	r2, [r1, #80]	; 0x50
	hi2c->hdmarx->XferAbortCallback = NULL;
 8005ef6:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8005ef8:	650a      	str	r2, [r1, #80]	; 0x50
	if (hi2c->State == HAL_I2C_STATE_ABORT) {
 8005efa:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8005efe:	2960      	cmp	r1, #96	; 0x60
 8005f00:	f04f 0120 	mov.w	r1, #32
		hi2c->State = HAL_I2C_STATE_READY;
 8005f04:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f08:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
	if (hi2c->State == HAL_I2C_STATE_ABORT) {
 8005f0c:	d107      	bne.n	8005f1e <I2C_DMAAbort+0x3e>
		hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f0e:	6402      	str	r2, [r0, #64]	; 0x40
		__HAL_I2C_DISABLE(hi2c);
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	f022 0201 	bic.w	r2, r2, #1
 8005f16:	601a      	str	r2, [r3, #0]
		HAL_I2C_AbortCpltCallback(hi2c);
 8005f18:	f7ff fb49 	bl	80055ae <HAL_I2C_AbortCpltCallback>
 8005f1c:	bd08      	pop	{r3, pc}
		__HAL_I2C_DISABLE(hi2c);
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	f022 0201 	bic.w	r2, r2, #1
 8005f24:	601a      	str	r2, [r3, #0]
		HAL_I2C_ErrorCallback(hi2c);
 8005f26:	f7ff fb41 	bl	80055ac <HAL_I2C_ErrorCallback>
 8005f2a:	bd08      	pop	{r3, pc}

08005f2c <HAL_RCC_OscConfig>:
 *         supported by this API. User should request a transition to HSE Off
 *         first and then HSE On or HSE Bypass.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f2c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t tickstart;

	/* Check Null pointer */
	if (RCC_OscInitStruct == NULL) {
 8005f30:	4604      	mov	r4, r0
 8005f32:	b918      	cbnz	r0, 8005f3c <HAL_RCC_OscConfig+0x10>
		return HAL_ERROR;
 8005f34:	2001      	movs	r0, #1
		}else  {
			return HAL_ERROR;
		}
	}
	return HAL_OK;
}
 8005f36:	b002      	add	sp, #8
 8005f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE) {
 8005f3c:	6803      	ldr	r3, [r0, #0]
 8005f3e:	07dd      	lsls	r5, r3, #31
 8005f40:	d410      	bmi.n	8005f64 <HAL_RCC_OscConfig+0x38>
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI) {
 8005f42:	6823      	ldr	r3, [r4, #0]
 8005f44:	0798      	lsls	r0, r3, #30
 8005f46:	d458      	bmi.n	8005ffa <HAL_RCC_OscConfig+0xce>
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI) {
 8005f48:	6823      	ldr	r3, [r4, #0]
 8005f4a:	071a      	lsls	r2, r3, #28
 8005f4c:	f100 809a 	bmi.w	8006084 <HAL_RCC_OscConfig+0x158>
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE) {
 8005f50:	6823      	ldr	r3, [r4, #0]
 8005f52:	075b      	lsls	r3, r3, #29
 8005f54:	f100 80b8 	bmi.w	80060c8 <HAL_RCC_OscConfig+0x19c>
	if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE) {
 8005f58:	69a2      	ldr	r2, [r4, #24]
 8005f5a:	2a00      	cmp	r2, #0
 8005f5c:	f040 8119 	bne.w	8006192 <HAL_RCC_OscConfig+0x266>
	return HAL_OK;
 8005f60:	2000      	movs	r0, #0
 8005f62:	e7e8      	b.n	8005f36 <HAL_RCC_OscConfig+0xa>
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005f64:	4ba6      	ldr	r3, [pc, #664]	; (8006200 <HAL_RCC_OscConfig+0x2d4>)
 8005f66:	689a      	ldr	r2, [r3, #8]
 8005f68:	f002 020c 	and.w	r2, r2, #12
 8005f6c:	2a04      	cmp	r2, #4
 8005f6e:	d007      	beq.n	8005f80 <HAL_RCC_OscConfig+0x54>
		    ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE))) {
 8005f70:	689a      	ldr	r2, [r3, #8]
 8005f72:	f002 020c 	and.w	r2, r2, #12
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005f76:	2a08      	cmp	r2, #8
 8005f78:	d10a      	bne.n	8005f90 <HAL_RCC_OscConfig+0x64>
		    ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE))) {
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	0259      	lsls	r1, r3, #9
 8005f7e:	d507      	bpl.n	8005f90 <HAL_RCC_OscConfig+0x64>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 8005f80:	4b9f      	ldr	r3, [pc, #636]	; (8006200 <HAL_RCC_OscConfig+0x2d4>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	039a      	lsls	r2, r3, #14
 8005f86:	d5dc      	bpl.n	8005f42 <HAL_RCC_OscConfig+0x16>
 8005f88:	6863      	ldr	r3, [r4, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1d9      	bne.n	8005f42 <HAL_RCC_OscConfig+0x16>
 8005f8e:	e7d1      	b.n	8005f34 <HAL_RCC_OscConfig+0x8>
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f90:	6863      	ldr	r3, [r4, #4]
 8005f92:	4d9b      	ldr	r5, [pc, #620]	; (8006200 <HAL_RCC_OscConfig+0x2d4>)
 8005f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f98:	d111      	bne.n	8005fbe <HAL_RCC_OscConfig+0x92>
 8005f9a:	682b      	ldr	r3, [r5, #0]
 8005f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fa0:	602b      	str	r3, [r5, #0]
				tickstart = HAL_GetTick();
 8005fa2:	f7fe fa61 	bl	8004468 <HAL_GetTick>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8005fa6:	4d96      	ldr	r5, [pc, #600]	; (8006200 <HAL_RCC_OscConfig+0x2d4>)
				tickstart = HAL_GetTick();
 8005fa8:	4606      	mov	r6, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8005faa:	682b      	ldr	r3, [r5, #0]
 8005fac:	039b      	lsls	r3, r3, #14
 8005fae:	d4c8      	bmi.n	8005f42 <HAL_RCC_OscConfig+0x16>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8005fb0:	f7fe fa5a 	bl	8004468 <HAL_GetTick>
 8005fb4:	1b80      	subs	r0, r0, r6
 8005fb6:	2864      	cmp	r0, #100	; 0x64
 8005fb8:	d9f7      	bls.n	8005faa <HAL_RCC_OscConfig+0x7e>
						return HAL_TIMEOUT;
 8005fba:	2003      	movs	r0, #3
 8005fbc:	e7bb      	b.n	8005f36 <HAL_RCC_OscConfig+0xa>
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fbe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fc2:	d104      	bne.n	8005fce <HAL_RCC_OscConfig+0xa2>
 8005fc4:	682b      	ldr	r3, [r5, #0]
 8005fc6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fca:	602b      	str	r3, [r5, #0]
 8005fcc:	e7e5      	b.n	8005f9a <HAL_RCC_OscConfig+0x6e>
 8005fce:	682a      	ldr	r2, [r5, #0]
 8005fd0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005fd4:	602a      	str	r2, [r5, #0]
 8005fd6:	682a      	ldr	r2, [r5, #0]
 8005fd8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005fdc:	602a      	str	r2, [r5, #0]
			if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF) {
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d1df      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x76>
				tickstart = HAL_GetTick();
 8005fe2:	f7fe fa41 	bl	8004468 <HAL_GetTick>
 8005fe6:	4606      	mov	r6, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 8005fe8:	682b      	ldr	r3, [r5, #0]
 8005fea:	039f      	lsls	r7, r3, #14
 8005fec:	d5a9      	bpl.n	8005f42 <HAL_RCC_OscConfig+0x16>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8005fee:	f7fe fa3b 	bl	8004468 <HAL_GetTick>
 8005ff2:	1b80      	subs	r0, r0, r6
 8005ff4:	2864      	cmp	r0, #100	; 0x64
 8005ff6:	d9f7      	bls.n	8005fe8 <HAL_RCC_OscConfig+0xbc>
 8005ff8:	e7df      	b.n	8005fba <HAL_RCC_OscConfig+0x8e>
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005ffa:	4b81      	ldr	r3, [pc, #516]	; (8006200 <HAL_RCC_OscConfig+0x2d4>)
 8005ffc:	689a      	ldr	r2, [r3, #8]
 8005ffe:	f012 0f0c 	tst.w	r2, #12
 8006002:	d007      	beq.n	8006014 <HAL_RCC_OscConfig+0xe8>
		    ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI))) {
 8006004:	689a      	ldr	r2, [r3, #8]
 8006006:	f002 020c 	and.w	r2, r2, #12
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800600a:	2a08      	cmp	r2, #8
 800600c:	d111      	bne.n	8006032 <HAL_RCC_OscConfig+0x106>
		    ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI))) {
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	025e      	lsls	r6, r3, #9
 8006012:	d40e      	bmi.n	8006032 <HAL_RCC_OscConfig+0x106>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 8006014:	4b7a      	ldr	r3, [pc, #488]	; (8006200 <HAL_RCC_OscConfig+0x2d4>)
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	0795      	lsls	r5, r2, #30
 800601a:	d502      	bpl.n	8006022 <HAL_RCC_OscConfig+0xf6>
 800601c:	68e2      	ldr	r2, [r4, #12]
 800601e:	2a01      	cmp	r2, #1
 8006020:	d188      	bne.n	8005f34 <HAL_RCC_OscConfig+0x8>
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	6921      	ldr	r1, [r4, #16]
 8006026:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800602a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800602e:	601a      	str	r2, [r3, #0]
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 8006030:	e78a      	b.n	8005f48 <HAL_RCC_OscConfig+0x1c>
			if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF) {
 8006032:	68e2      	ldr	r2, [r4, #12]
 8006034:	4b73      	ldr	r3, [pc, #460]	; (8006204 <HAL_RCC_OscConfig+0x2d8>)
 8006036:	b1b2      	cbz	r2, 8006066 <HAL_RCC_OscConfig+0x13a>
				__HAL_RCC_HSI_ENABLE();
 8006038:	2201      	movs	r2, #1
 800603a:	601a      	str	r2, [r3, #0]
				tickstart = HAL_GetTick();
 800603c:	f7fe fa14 	bl	8004468 <HAL_GetTick>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8006040:	4d6f      	ldr	r5, [pc, #444]	; (8006200 <HAL_RCC_OscConfig+0x2d4>)
				tickstart = HAL_GetTick();
 8006042:	4606      	mov	r6, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8006044:	682b      	ldr	r3, [r5, #0]
 8006046:	0798      	lsls	r0, r3, #30
 8006048:	d507      	bpl.n	800605a <HAL_RCC_OscConfig+0x12e>
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800604a:	682b      	ldr	r3, [r5, #0]
 800604c:	6922      	ldr	r2, [r4, #16]
 800604e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006052:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006056:	602b      	str	r3, [r5, #0]
 8006058:	e776      	b.n	8005f48 <HAL_RCC_OscConfig+0x1c>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 800605a:	f7fe fa05 	bl	8004468 <HAL_GetTick>
 800605e:	1b80      	subs	r0, r0, r6
 8006060:	2802      	cmp	r0, #2
 8006062:	d9ef      	bls.n	8006044 <HAL_RCC_OscConfig+0x118>
 8006064:	e7a9      	b.n	8005fba <HAL_RCC_OscConfig+0x8e>
				__HAL_RCC_HSI_DISABLE();
 8006066:	601a      	str	r2, [r3, #0]
				tickstart = HAL_GetTick();
 8006068:	f7fe f9fe 	bl	8004468 <HAL_GetTick>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 800606c:	4d64      	ldr	r5, [pc, #400]	; (8006200 <HAL_RCC_OscConfig+0x2d4>)
				tickstart = HAL_GetTick();
 800606e:	4606      	mov	r6, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 8006070:	682b      	ldr	r3, [r5, #0]
 8006072:	0799      	lsls	r1, r3, #30
 8006074:	f57f af68 	bpl.w	8005f48 <HAL_RCC_OscConfig+0x1c>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8006078:	f7fe f9f6 	bl	8004468 <HAL_GetTick>
 800607c:	1b80      	subs	r0, r0, r6
 800607e:	2802      	cmp	r0, #2
 8006080:	d9f6      	bls.n	8006070 <HAL_RCC_OscConfig+0x144>
 8006082:	e79a      	b.n	8005fba <HAL_RCC_OscConfig+0x8e>
		if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF) {
 8006084:	6962      	ldr	r2, [r4, #20]
 8006086:	4b60      	ldr	r3, [pc, #384]	; (8006208 <HAL_RCC_OscConfig+0x2dc>)
 8006088:	b17a      	cbz	r2, 80060aa <HAL_RCC_OscConfig+0x17e>
			__HAL_RCC_LSI_ENABLE();
 800608a:	2201      	movs	r2, #1
 800608c:	601a      	str	r2, [r3, #0]
			tickstart = HAL_GetTick();
 800608e:	f7fe f9eb 	bl	8004468 <HAL_GetTick>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 8006092:	4d5b      	ldr	r5, [pc, #364]	; (8006200 <HAL_RCC_OscConfig+0x2d4>)
			tickstart = HAL_GetTick();
 8006094:	4606      	mov	r6, r0
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 8006096:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006098:	079f      	lsls	r7, r3, #30
 800609a:	f53f af59 	bmi.w	8005f50 <HAL_RCC_OscConfig+0x24>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 800609e:	f7fe f9e3 	bl	8004468 <HAL_GetTick>
 80060a2:	1b80      	subs	r0, r0, r6
 80060a4:	2802      	cmp	r0, #2
 80060a6:	d9f6      	bls.n	8006096 <HAL_RCC_OscConfig+0x16a>
 80060a8:	e787      	b.n	8005fba <HAL_RCC_OscConfig+0x8e>
			__HAL_RCC_LSI_DISABLE();
 80060aa:	601a      	str	r2, [r3, #0]
			tickstart = HAL_GetTick();
 80060ac:	f7fe f9dc 	bl	8004468 <HAL_GetTick>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 80060b0:	4d53      	ldr	r5, [pc, #332]	; (8006200 <HAL_RCC_OscConfig+0x2d4>)
			tickstart = HAL_GetTick();
 80060b2:	4606      	mov	r6, r0
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 80060b4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80060b6:	0798      	lsls	r0, r3, #30
 80060b8:	f57f af4a 	bpl.w	8005f50 <HAL_RCC_OscConfig+0x24>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 80060bc:	f7fe f9d4 	bl	8004468 <HAL_GetTick>
 80060c0:	1b80      	subs	r0, r0, r6
 80060c2:	2802      	cmp	r0, #2
 80060c4:	d9f6      	bls.n	80060b4 <HAL_RCC_OscConfig+0x188>
 80060c6:	e778      	b.n	8005fba <HAL_RCC_OscConfig+0x8e>
		if (__HAL_RCC_PWR_IS_CLK_DISABLED()) {
 80060c8:	4b4d      	ldr	r3, [pc, #308]	; (8006200 <HAL_RCC_OscConfig+0x2d4>)
 80060ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060cc:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80060d0:	d128      	bne.n	8006124 <HAL_RCC_OscConfig+0x1f8>
			__HAL_RCC_PWR_CLK_ENABLE();
 80060d2:	9201      	str	r2, [sp, #4]
 80060d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060d6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80060da:	641a      	str	r2, [r3, #64]	; 0x40
 80060dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060e2:	9301      	str	r3, [sp, #4]
 80060e4:	9b01      	ldr	r3, [sp, #4]
			pwrclkchanged = SET;
 80060e6:	2601      	movs	r6, #1
		if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 80060e8:	4d48      	ldr	r5, [pc, #288]	; (800620c <HAL_RCC_OscConfig+0x2e0>)
 80060ea:	682b      	ldr	r3, [r5, #0]
 80060ec:	05d9      	lsls	r1, r3, #23
 80060ee:	d51b      	bpl.n	8006128 <HAL_RCC_OscConfig+0x1fc>
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060f0:	68a3      	ldr	r3, [r4, #8]
 80060f2:	4d43      	ldr	r5, [pc, #268]	; (8006200 <HAL_RCC_OscConfig+0x2d4>)
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d127      	bne.n	8006148 <HAL_RCC_OscConfig+0x21c>
 80060f8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80060fa:	f043 0301 	orr.w	r3, r3, #1
 80060fe:	672b      	str	r3, [r5, #112]	; 0x70
			tickstart = HAL_GetTick();
 8006100:	f7fe f9b2 	bl	8004468 <HAL_GetTick>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8006104:	4d3e      	ldr	r5, [pc, #248]	; (8006200 <HAL_RCC_OscConfig+0x2d4>)
			tickstart = HAL_GetTick();
 8006106:	4607      	mov	r7, r0
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8006108:	f241 3888 	movw	r8, #5000	; 0x1388
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 800610c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800610e:	079b      	lsls	r3, r3, #30
 8006110:	d539      	bpl.n	8006186 <HAL_RCC_OscConfig+0x25a>
		if (pwrclkchanged == SET) {
 8006112:	2e00      	cmp	r6, #0
 8006114:	f43f af20 	beq.w	8005f58 <HAL_RCC_OscConfig+0x2c>
			__HAL_RCC_PWR_CLK_DISABLE();
 8006118:	4a39      	ldr	r2, [pc, #228]	; (8006200 <HAL_RCC_OscConfig+0x2d4>)
 800611a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800611c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006120:	6413      	str	r3, [r2, #64]	; 0x40
 8006122:	e719      	b.n	8005f58 <HAL_RCC_OscConfig+0x2c>
		FlagStatus pwrclkchanged = RESET;
 8006124:	2600      	movs	r6, #0
 8006126:	e7df      	b.n	80060e8 <HAL_RCC_OscConfig+0x1bc>
			SET_BIT(PWR->CR, PWR_CR_DBP);
 8006128:	682b      	ldr	r3, [r5, #0]
 800612a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800612e:	602b      	str	r3, [r5, #0]
			tickstart = HAL_GetTick();
 8006130:	f7fe f99a 	bl	8004468 <HAL_GetTick>
 8006134:	4607      	mov	r7, r0
			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8006136:	682b      	ldr	r3, [r5, #0]
 8006138:	05da      	lsls	r2, r3, #23
 800613a:	d4d9      	bmi.n	80060f0 <HAL_RCC_OscConfig+0x1c4>
				if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 800613c:	f7fe f994 	bl	8004468 <HAL_GetTick>
 8006140:	1bc0      	subs	r0, r0, r7
 8006142:	2802      	cmp	r0, #2
 8006144:	d9f7      	bls.n	8006136 <HAL_RCC_OscConfig+0x20a>
 8006146:	e738      	b.n	8005fba <HAL_RCC_OscConfig+0x8e>
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006148:	2b05      	cmp	r3, #5
 800614a:	d104      	bne.n	8006156 <HAL_RCC_OscConfig+0x22a>
 800614c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800614e:	f043 0304 	orr.w	r3, r3, #4
 8006152:	672b      	str	r3, [r5, #112]	; 0x70
 8006154:	e7d0      	b.n	80060f8 <HAL_RCC_OscConfig+0x1cc>
 8006156:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8006158:	f022 0201 	bic.w	r2, r2, #1
 800615c:	672a      	str	r2, [r5, #112]	; 0x70
 800615e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8006160:	f022 0204 	bic.w	r2, r2, #4
 8006164:	672a      	str	r2, [r5, #112]	; 0x70
		if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF) {
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1ca      	bne.n	8006100 <HAL_RCC_OscConfig+0x1d4>
			tickstart = HAL_GetTick();
 800616a:	f7fe f97d 	bl	8004468 <HAL_GetTick>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 800616e:	f241 3888 	movw	r8, #5000	; 0x1388
			tickstart = HAL_GetTick();
 8006172:	4607      	mov	r7, r0
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 8006174:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006176:	0798      	lsls	r0, r3, #30
 8006178:	d5cb      	bpl.n	8006112 <HAL_RCC_OscConfig+0x1e6>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 800617a:	f7fe f975 	bl	8004468 <HAL_GetTick>
 800617e:	1bc0      	subs	r0, r0, r7
 8006180:	4540      	cmp	r0, r8
 8006182:	d9f7      	bls.n	8006174 <HAL_RCC_OscConfig+0x248>
 8006184:	e719      	b.n	8005fba <HAL_RCC_OscConfig+0x8e>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8006186:	f7fe f96f 	bl	8004468 <HAL_GetTick>
 800618a:	1bc0      	subs	r0, r0, r7
 800618c:	4540      	cmp	r0, r8
 800618e:	d9bd      	bls.n	800610c <HAL_RCC_OscConfig+0x1e0>
 8006190:	e713      	b.n	8005fba <HAL_RCC_OscConfig+0x8e>
		if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL) {
 8006192:	4d1b      	ldr	r5, [pc, #108]	; (8006200 <HAL_RCC_OscConfig+0x2d4>)
 8006194:	68ab      	ldr	r3, [r5, #8]
 8006196:	f003 030c 	and.w	r3, r3, #12
 800619a:	2b08      	cmp	r3, #8
 800619c:	f43f aeca 	beq.w	8005f34 <HAL_RCC_OscConfig+0x8>
 80061a0:	4e1b      	ldr	r6, [pc, #108]	; (8006210 <HAL_RCC_OscConfig+0x2e4>)
 80061a2:	2300      	movs	r3, #0
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 80061a4:	2a02      	cmp	r2, #2
				__HAL_RCC_PLL_DISABLE();
 80061a6:	6033      	str	r3, [r6, #0]
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 80061a8:	d134      	bne.n	8006214 <HAL_RCC_OscConfig+0x2e8>
				tickstart = HAL_GetTick();
 80061aa:	f7fe f95d 	bl	8004468 <HAL_GetTick>
 80061ae:	4607      	mov	r7, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 80061b0:	682b      	ldr	r3, [r5, #0]
 80061b2:	0199      	lsls	r1, r3, #6
 80061b4:	d41e      	bmi.n	80061f4 <HAL_RCC_OscConfig+0x2c8>
				WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource | \
 80061b6:	6a22      	ldr	r2, [r4, #32]
 80061b8:	69e3      	ldr	r3, [r4, #28]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80061be:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80061c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80061c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80061c8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 80061ca:	4c0d      	ldr	r4, [pc, #52]	; (8006200 <HAL_RCC_OscConfig+0x2d4>)
				WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource | \
 80061cc:	0852      	lsrs	r2, r2, #1
 80061ce:	3a01      	subs	r2, #1
 80061d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061d4:	606b      	str	r3, [r5, #4]
				__HAL_RCC_PLL_ENABLE();
 80061d6:	2301      	movs	r3, #1
 80061d8:	6033      	str	r3, [r6, #0]
				tickstart = HAL_GetTick();
 80061da:	f7fe f945 	bl	8004468 <HAL_GetTick>
 80061de:	4605      	mov	r5, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 80061e0:	6823      	ldr	r3, [r4, #0]
 80061e2:	019a      	lsls	r2, r3, #6
 80061e4:	f53f aebc 	bmi.w	8005f60 <HAL_RCC_OscConfig+0x34>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 80061e8:	f7fe f93e 	bl	8004468 <HAL_GetTick>
 80061ec:	1b40      	subs	r0, r0, r5
 80061ee:	2802      	cmp	r0, #2
 80061f0:	d9f6      	bls.n	80061e0 <HAL_RCC_OscConfig+0x2b4>
 80061f2:	e6e2      	b.n	8005fba <HAL_RCC_OscConfig+0x8e>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 80061f4:	f7fe f938 	bl	8004468 <HAL_GetTick>
 80061f8:	1bc0      	subs	r0, r0, r7
 80061fa:	2802      	cmp	r0, #2
 80061fc:	d9d8      	bls.n	80061b0 <HAL_RCC_OscConfig+0x284>
 80061fe:	e6dc      	b.n	8005fba <HAL_RCC_OscConfig+0x8e>
 8006200:	40023800 	.word	0x40023800
 8006204:	42470000 	.word	0x42470000
 8006208:	42470e80 	.word	0x42470e80
 800620c:	40007000 	.word	0x40007000
 8006210:	42470060 	.word	0x42470060
				tickstart = HAL_GetTick();
 8006214:	f7fe f928 	bl	8004468 <HAL_GetTick>
 8006218:	4604      	mov	r4, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 800621a:	682b      	ldr	r3, [r5, #0]
 800621c:	019b      	lsls	r3, r3, #6
 800621e:	f57f ae9f 	bpl.w	8005f60 <HAL_RCC_OscConfig+0x34>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8006222:	f7fe f921 	bl	8004468 <HAL_GetTick>
 8006226:	1b00      	subs	r0, r0, r4
 8006228:	2802      	cmp	r0, #2
 800622a:	d9f6      	bls.n	800621a <HAL_RCC_OscConfig+0x2ee>
 800622c:	e6c5      	b.n	8005fba <HAL_RCC_OscConfig+0x8e>
 800622e:	bf00      	nop

08006230 <HAL_RCC_GetSysClockFreq>:
{
	uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
	uint32_t sysclockfreq = 0U;

	/* Get SYSCLK source -------------------------------------------------------*/
	switch (RCC->CFGR & RCC_CFGR_SWS) {
 8006230:	4913      	ldr	r1, [pc, #76]	; (8006280 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8006232:	b508      	push	{r3, lr}
	switch (RCC->CFGR & RCC_CFGR_SWS) {
 8006234:	688b      	ldr	r3, [r1, #8]
 8006236:	f003 030c 	and.w	r3, r3, #12
 800623a:	2b04      	cmp	r3, #4
 800623c:	d003      	beq.n	8006246 <HAL_RCC_GetSysClockFreq+0x16>
 800623e:	2b08      	cmp	r3, #8
 8006240:	d003      	beq.n	800624a <HAL_RCC_GetSysClockFreq+0x1a>
	case RCC_CFGR_SWS_HSI: /* HSI used as system clock source */
	{
		sysclockfreq = HSI_VALUE;
 8006242:	4810      	ldr	r0, [pc, #64]	; (8006284 <HAL_RCC_GetSysClockFreq+0x54>)
		sysclockfreq = HSI_VALUE;
		break;
	}
	}
	return sysclockfreq;
}
 8006244:	bd08      	pop	{r3, pc}
		sysclockfreq = HSE_VALUE;
 8006246:	4810      	ldr	r0, [pc, #64]	; (8006288 <HAL_RCC_GetSysClockFreq+0x58>)
 8006248:	bd08      	pop	{r3, pc}
		pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800624a:	684a      	ldr	r2, [r1, #4]
		if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI) {
 800624c:	684b      	ldr	r3, [r1, #4]
			pllvco = (uint32_t)((((uint64_t)HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800624e:	6849      	ldr	r1, [r1, #4]
		if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI) {
 8006250:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
			pllvco = (uint32_t)((((uint64_t)HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006254:	bf14      	ite	ne
 8006256:	480c      	ldrne	r0, [pc, #48]	; (8006288 <HAL_RCC_GetSysClockFreq+0x58>)
			pllvco = (uint32_t)((((uint64_t)HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006258:	480a      	ldreq	r0, [pc, #40]	; (8006284 <HAL_RCC_GetSysClockFreq+0x54>)
			pllvco = (uint32_t)((((uint64_t)HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800625a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800625e:	bf18      	it	ne
 8006260:	2300      	movne	r3, #0
		pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006262:	f002 023f 	and.w	r2, r2, #63	; 0x3f
			pllvco = (uint32_t)((((uint64_t)HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006266:	fba1 0100 	umull	r0, r1, r1, r0
 800626a:	f7fa fca1 	bl	8000bb0 <__aeabi_uldivmod>
		pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800626e:	4b04      	ldr	r3, [pc, #16]	; (8006280 <HAL_RCC_GetSysClockFreq+0x50>)
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8006276:	3301      	adds	r3, #1
 8006278:	005b      	lsls	r3, r3, #1
		sysclockfreq = pllvco / pllp;
 800627a:	fbb0 f0f3 	udiv	r0, r0, r3
 800627e:	bd08      	pop	{r3, pc}
 8006280:	40023800 	.word	0x40023800
 8006284:	00f42400 	.word	0x00f42400
 8006288:	007a1200 	.word	0x007a1200

0800628c <HAL_RCC_ClockConfig>:
{
 800628c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006290:	460d      	mov	r5, r1
	if (RCC_ClkInitStruct == NULL) {
 8006292:	4604      	mov	r4, r0
 8006294:	b910      	cbnz	r0, 800629c <HAL_RCC_ClockConfig+0x10>
		return HAL_ERROR;
 8006296:	2001      	movs	r0, #1
 8006298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 800629c:	4b44      	ldr	r3, [pc, #272]	; (80063b0 <HAL_RCC_ClockConfig+0x124>)
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	f002 020f 	and.w	r2, r2, #15
 80062a4:	428a      	cmp	r2, r1
 80062a6:	d328      	bcc.n	80062fa <HAL_RCC_ClockConfig+0x6e>
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) {
 80062a8:	6821      	ldr	r1, [r4, #0]
 80062aa:	078f      	lsls	r7, r1, #30
 80062ac:	d42d      	bmi.n	800630a <HAL_RCC_ClockConfig+0x7e>
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK) {
 80062ae:	07c8      	lsls	r0, r1, #31
 80062b0:	d440      	bmi.n	8006334 <HAL_RCC_ClockConfig+0xa8>
	if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 80062b2:	4b3f      	ldr	r3, [pc, #252]	; (80063b0 <HAL_RCC_ClockConfig+0x124>)
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	f002 020f 	and.w	r2, r2, #15
 80062ba:	4295      	cmp	r5, r2
 80062bc:	d366      	bcc.n	800638c <HAL_RCC_ClockConfig+0x100>
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1) {
 80062be:	6822      	ldr	r2, [r4, #0]
 80062c0:	0751      	lsls	r1, r2, #29
 80062c2:	d46c      	bmi.n	800639e <HAL_RCC_ClockConfig+0x112>
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2) {
 80062c4:	0713      	lsls	r3, r2, #28
 80062c6:	d507      	bpl.n	80062d8 <HAL_RCC_ClockConfig+0x4c>
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062c8:	4a3a      	ldr	r2, [pc, #232]	; (80063b4 <HAL_RCC_ClockConfig+0x128>)
 80062ca:	6921      	ldr	r1, [r4, #16]
 80062cc:	6893      	ldr	r3, [r2, #8]
 80062ce:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80062d2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80062d6:	6093      	str	r3, [r2, #8]
	SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80062d8:	f7ff ffaa 	bl	8006230 <HAL_RCC_GetSysClockFreq>
 80062dc:	4b35      	ldr	r3, [pc, #212]	; (80063b4 <HAL_RCC_ClockConfig+0x128>)
 80062de:	4a36      	ldr	r2, [pc, #216]	; (80063b8 <HAL_RCC_ClockConfig+0x12c>)
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80062e6:	5cd3      	ldrb	r3, [r2, r3]
 80062e8:	40d8      	lsrs	r0, r3
 80062ea:	4b34      	ldr	r3, [pc, #208]	; (80063bc <HAL_RCC_ClockConfig+0x130>)
 80062ec:	6018      	str	r0, [r3, #0]
	HAL_InitTick(TICK_INT_PRIORITY);
 80062ee:	2000      	movs	r0, #0
 80062f0:	f7fe f870 	bl	80043d4 <HAL_InitTick>
	return HAL_OK;
 80062f4:	2000      	movs	r0, #0
 80062f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		__HAL_FLASH_SET_LATENCY(FLatency);
 80062fa:	b2ca      	uxtb	r2, r1
 80062fc:	701a      	strb	r2, [r3, #0]
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 030f 	and.w	r3, r3, #15
 8006304:	4299      	cmp	r1, r3
 8006306:	d1c6      	bne.n	8006296 <HAL_RCC_ClockConfig+0xa>
 8006308:	e7ce      	b.n	80062a8 <HAL_RCC_ClockConfig+0x1c>
 800630a:	4b2a      	ldr	r3, [pc, #168]	; (80063b4 <HAL_RCC_ClockConfig+0x128>)
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1) {
 800630c:	f011 0f04 	tst.w	r1, #4
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006310:	bf1e      	ittt	ne
 8006312:	689a      	ldrne	r2, [r3, #8]
 8006314:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8006318:	609a      	strne	r2, [r3, #8]
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2) {
 800631a:	070e      	lsls	r6, r1, #28
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800631c:	bf42      	ittt	mi
 800631e:	689a      	ldrmi	r2, [r3, #8]
 8006320:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8006324:	609a      	strmi	r2, [r3, #8]
		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006326:	689a      	ldr	r2, [r3, #8]
 8006328:	68a0      	ldr	r0, [r4, #8]
 800632a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800632e:	4302      	orrs	r2, r0
 8006330:	609a      	str	r2, [r3, #8]
 8006332:	e7bc      	b.n	80062ae <HAL_RCC_ClockConfig+0x22>
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 8006334:	6862      	ldr	r2, [r4, #4]
 8006336:	4b1f      	ldr	r3, [pc, #124]	; (80063b4 <HAL_RCC_ClockConfig+0x128>)
 8006338:	2a01      	cmp	r2, #1
 800633a:	d11d      	bne.n	8006378 <HAL_RCC_ClockConfig+0xec>
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8006342:	d0a8      	beq.n	8006296 <HAL_RCC_ClockConfig+0xa>
		__HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006344:	4e1b      	ldr	r6, [pc, #108]	; (80063b4 <HAL_RCC_ClockConfig+0x128>)
 8006346:	68b3      	ldr	r3, [r6, #8]
 8006348:	f023 0303 	bic.w	r3, r3, #3
 800634c:	4313      	orrs	r3, r2
 800634e:	60b3      	str	r3, [r6, #8]
		tickstart = HAL_GetTick();
 8006350:	f7fe f88a 	bl	8004468 <HAL_GetTick>
			if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8006354:	f241 3888 	movw	r8, #5000	; 0x1388
		tickstart = HAL_GetTick();
 8006358:	4607      	mov	r7, r0
		while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 800635a:	68b3      	ldr	r3, [r6, #8]
 800635c:	6862      	ldr	r2, [r4, #4]
 800635e:	f003 030c 	and.w	r3, r3, #12
 8006362:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006366:	d0a4      	beq.n	80062b2 <HAL_RCC_ClockConfig+0x26>
			if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8006368:	f7fe f87e 	bl	8004468 <HAL_GetTick>
 800636c:	1bc0      	subs	r0, r0, r7
 800636e:	4540      	cmp	r0, r8
 8006370:	d9f3      	bls.n	800635a <HAL_RCC_ClockConfig+0xce>
				return HAL_TIMEOUT;
 8006372:	2003      	movs	r0, #3
}
 8006374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) ||
 8006378:	1e91      	subs	r1, r2, #2
 800637a:	2901      	cmp	r1, #1
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 800637c:	681b      	ldr	r3, [r3, #0]
		else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) ||
 800637e:	d802      	bhi.n	8006386 <HAL_RCC_ClockConfig+0xfa>
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8006380:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006384:	e7dd      	b.n	8006342 <HAL_RCC_ClockConfig+0xb6>
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8006386:	f013 0f02 	tst.w	r3, #2
 800638a:	e7da      	b.n	8006342 <HAL_RCC_ClockConfig+0xb6>
		__HAL_FLASH_SET_LATENCY(FLatency);
 800638c:	b2ea      	uxtb	r2, r5
 800638e:	701a      	strb	r2, [r3, #0]
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 030f 	and.w	r3, r3, #15
 8006396:	429d      	cmp	r5, r3
 8006398:	f47f af7d 	bne.w	8006296 <HAL_RCC_ClockConfig+0xa>
 800639c:	e78f      	b.n	80062be <HAL_RCC_ClockConfig+0x32>
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800639e:	4905      	ldr	r1, [pc, #20]	; (80063b4 <HAL_RCC_ClockConfig+0x128>)
 80063a0:	68e0      	ldr	r0, [r4, #12]
 80063a2:	688b      	ldr	r3, [r1, #8]
 80063a4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80063a8:	4303      	orrs	r3, r0
 80063aa:	608b      	str	r3, [r1, #8]
 80063ac:	e78a      	b.n	80062c4 <HAL_RCC_ClockConfig+0x38>
 80063ae:	bf00      	nop
 80063b0:	40023c00 	.word	0x40023c00
 80063b4:	40023800 	.word	0x40023800
 80063b8:	0800ac0f 	.word	0x0800ac0f
 80063bc:	2000019c 	.word	0x2000019c

080063c0 <HAL_RCC_GetPCLK1Freq>:
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return(HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80063c0:	4b04      	ldr	r3, [pc, #16]	; (80063d4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80063c2:	4a05      	ldr	r2, [pc, #20]	; (80063d8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80063ca:	5cd3      	ldrb	r3, [r2, r3]
 80063cc:	4a03      	ldr	r2, [pc, #12]	; (80063dc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80063ce:	6810      	ldr	r0, [r2, #0]
}
 80063d0:	40d8      	lsrs	r0, r3
 80063d2:	4770      	bx	lr
 80063d4:	40023800 	.word	0x40023800
 80063d8:	0800ac1f 	.word	0x0800ac1f
 80063dc:	2000019c 	.word	0x2000019c

080063e0 <HAL_RCC_GetPCLK2Freq>:
 * @retval PCLK2 frequency
 */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return(HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80063e0:	4b04      	ldr	r3, [pc, #16]	; (80063f4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80063e2:	4a05      	ldr	r2, [pc, #20]	; (80063f8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80063ea:	5cd3      	ldrb	r3, [r2, r3]
 80063ec:	4a03      	ldr	r2, [pc, #12]	; (80063fc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80063ee:	6810      	ldr	r0, [r2, #0]
}
 80063f0:	40d8      	lsrs	r0, r3
 80063f2:	4770      	bx	lr
 80063f4:	40023800 	.word	0x40023800
 80063f8:	0800ac1f 	.word	0x0800ac1f
 80063fc:	2000019c 	.word	0x2000019c

08006400 <TIM_OC1_SetConfig>:
	uint32_t tmpccmrx = 0U;
	uint32_t tmpccer = 0U;
	uint32_t tmpcr2 = 0U;

	/* Disable the Channel 1: Reset the CC1E Bit */
	TIMx->CCER &= ~TIM_CCER_CC1E;
 8006400:	6a03      	ldr	r3, [r0, #32]
 8006402:	f023 0301 	bic.w	r3, r3, #1
 8006406:	6203      	str	r3, [r0, #32]

	/* Get the TIMx CCER register value */
	tmpccer = TIMx->CCER;
 8006408:	6a03      	ldr	r3, [r0, #32]
{
 800640a:	b570      	push	{r4, r5, r6, lr}
	/* Get the TIMx CR2 register value */
	tmpcr2 = TIMx->CR2;
 800640c:	6844      	ldr	r4, [r0, #4]

	/* Get the TIMx CCMR1 register value */
	tmpccmrx = TIMx->CCMR1;
 800640e:	6982      	ldr	r2, [r0, #24]

	/* Reset the Output Compare Mode Bits */
	tmpccmrx &= ~TIM_CCMR1_OC1M;
	tmpccmrx &= ~TIM_CCMR1_CC1S;
	/* Select the Output Compare Mode */
	tmpccmrx |= OC_Config->OCMode;
 8006410:	680d      	ldr	r5, [r1, #0]
	tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006412:	f022 0273 	bic.w	r2, r2, #115	; 0x73
	tmpccmrx |= OC_Config->OCMode;
 8006416:	432a      	orrs	r2, r5

	/* Reset the Output Polarity level */
	tmpccer &= ~TIM_CCER_CC1P;
	/* Set the Output Compare Polarity */
	tmpccer |= OC_Config->OCPolarity;
 8006418:	688d      	ldr	r5, [r1, #8]
	tmpccer &= ~TIM_CCER_CC1P;
 800641a:	f023 0302 	bic.w	r3, r3, #2
	tmpccer |= OC_Config->OCPolarity;
 800641e:	432b      	orrs	r3, r5


	if (IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET) {
 8006420:	4d0a      	ldr	r5, [pc, #40]	; (800644c <TIM_OC1_SetConfig+0x4c>)
 8006422:	42a8      	cmp	r0, r5
 8006424:	d10b      	bne.n	800643e <TIM_OC1_SetConfig+0x3e>
		/* Reset the Output N Polarity level */
		tmpccer &= ~TIM_CCER_CC1NP;
		/* Set the Output N Polarity */
		tmpccer |= OC_Config->OCNPolarity;
 8006426:	68cd      	ldr	r5, [r1, #12]
		tmpcr2 &= ~TIM_CR2_OIS1;
		tmpcr2 &= ~TIM_CR2_OIS1N;
		/* Set the Output Idle state */
		tmpcr2 |= OC_Config->OCIdleState;
		/* Set the Output N Idle state */
		tmpcr2 |= OC_Config->OCNIdleState;
 8006428:	698e      	ldr	r6, [r1, #24]
		tmpccer &= ~TIM_CCER_CC1NP;
 800642a:	f023 0308 	bic.w	r3, r3, #8
		tmpccer |= OC_Config->OCNPolarity;
 800642e:	432b      	orrs	r3, r5
		tmpcr2 |= OC_Config->OCNIdleState;
 8006430:	694d      	ldr	r5, [r1, #20]
		tmpcr2 &= ~TIM_CR2_OIS1N;
 8006432:	f424 7440 	bic.w	r4, r4, #768	; 0x300
		tmpcr2 |= OC_Config->OCNIdleState;
 8006436:	4335      	orrs	r5, r6
		tmpccer &= ~TIM_CCER_CC1NE;
 8006438:	f023 0304 	bic.w	r3, r3, #4
		tmpcr2 |= OC_Config->OCNIdleState;
 800643c:	432c      	orrs	r4, r5
	}
	/* Write to TIMx CR2 */
	TIMx->CR2 = tmpcr2;
 800643e:	6044      	str	r4, [r0, #4]

	/* Write to TIMx CCMR1 */
	TIMx->CCMR1 = tmpccmrx;
 8006440:	6182      	str	r2, [r0, #24]

	/* Set the Capture Compare Register value */
	TIMx->CCR1 = OC_Config->Pulse;
 8006442:	684a      	ldr	r2, [r1, #4]
 8006444:	6342      	str	r2, [r0, #52]	; 0x34

	/* Write to TIMx CCER */
	TIMx->CCER = tmpccer;
 8006446:	6203      	str	r3, [r0, #32]
 8006448:	bd70      	pop	{r4, r5, r6, pc}
 800644a:	bf00      	nop
 800644c:	40010000 	.word	0x40010000

08006450 <TIM_OC3_SetConfig>:
	uint32_t tmpccmrx = 0U;
	uint32_t tmpccer = 0U;
	uint32_t tmpcr2 = 0U;

	/* Disable the Channel 3: Reset the CC2E Bit */
	TIMx->CCER &= ~TIM_CCER_CC3E;
 8006450:	6a03      	ldr	r3, [r0, #32]
 8006452:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006456:	6203      	str	r3, [r0, #32]

	/* Get the TIMx CCER register value */
	tmpccer = TIMx->CCER;
 8006458:	6a03      	ldr	r3, [r0, #32]
{
 800645a:	b570      	push	{r4, r5, r6, lr}
	/* Get the TIMx CR2 register value */
	tmpcr2 = TIMx->CR2;
 800645c:	6844      	ldr	r4, [r0, #4]

	/* Get the TIMx CCMR2 register value */
	tmpccmrx = TIMx->CCMR2;
 800645e:	69c2      	ldr	r2, [r0, #28]

	/* Reset the Output Compare mode and Capture/Compare selection Bits */
	tmpccmrx &= ~TIM_CCMR2_OC3M;
	tmpccmrx &= ~TIM_CCMR2_CC3S;
	/* Select the Output Compare Mode */
	tmpccmrx |= OC_Config->OCMode;
 8006460:	680d      	ldr	r5, [r1, #0]
	tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006462:	f022 0273 	bic.w	r2, r2, #115	; 0x73
	tmpccmrx |= OC_Config->OCMode;
 8006466:	432a      	orrs	r2, r5

	/* Reset the Output Polarity level */
	tmpccer &= ~TIM_CCER_CC3P;
	/* Set the Output Compare Polarity */
	tmpccer |= (OC_Config->OCPolarity << 8U);
 8006468:	688d      	ldr	r5, [r1, #8]
	tmpccer &= ~TIM_CCER_CC3P;
 800646a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
	tmpccer |= (OC_Config->OCPolarity << 8U);
 800646e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

	if (IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET) {
 8006472:	4d0b      	ldr	r5, [pc, #44]	; (80064a0 <TIM_OC3_SetConfig+0x50>)
 8006474:	42a8      	cmp	r0, r5
 8006476:	d10d      	bne.n	8006494 <TIM_OC3_SetConfig+0x44>
		assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

		/* Reset the Output N Polarity level */
		tmpccer &= ~TIM_CCER_CC3NP;
		/* Set the Output N Polarity */
		tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006478:	68cd      	ldr	r5, [r1, #12]
		tmpcr2 &= ~TIM_CR2_OIS3;
		tmpcr2 &= ~TIM_CR2_OIS3N;
		/* Set the Output Idle state */
		tmpcr2 |= (OC_Config->OCIdleState << 4U);
		/* Set the Output N Idle state */
		tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800647a:	698e      	ldr	r6, [r1, #24]
		tmpccer &= ~TIM_CCER_CC3NP;
 800647c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
		tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006480:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006484:	694d      	ldr	r5, [r1, #20]
		tmpcr2 &= ~TIM_CR2_OIS3N;
 8006486:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
		tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800648a:	4335      	orrs	r5, r6
		tmpccer &= ~TIM_CCER_CC3NE;
 800648c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
		tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006490:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
	}
	/* Write to TIMx CR2 */
	TIMx->CR2 = tmpcr2;
 8006494:	6044      	str	r4, [r0, #4]

	/* Write to TIMx CCMR2 */
	TIMx->CCMR2 = tmpccmrx;
 8006496:	61c2      	str	r2, [r0, #28]

	/* Set the Capture Compare Register value */
	TIMx->CCR3 = OC_Config->Pulse;
 8006498:	684a      	ldr	r2, [r1, #4]
 800649a:	63c2      	str	r2, [r0, #60]	; 0x3c

	/* Write to TIMx CCER */
	TIMx->CCER = tmpccer;
 800649c:	6203      	str	r3, [r0, #32]
 800649e:	bd70      	pop	{r4, r5, r6, pc}
 80064a0:	40010000 	.word	0x40010000

080064a4 <TIM_OC4_SetConfig>:
	uint32_t tmpccmrx = 0U;
	uint32_t tmpccer = 0U;
	uint32_t tmpcr2 = 0U;

	/* Disable the Channel 4: Reset the CC4E Bit */
	TIMx->CCER &= ~TIM_CCER_CC4E;
 80064a4:	6a03      	ldr	r3, [r0, #32]
 80064a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064aa:	6203      	str	r3, [r0, #32]

	/* Get the TIMx CCER register value */
	tmpccer = TIMx->CCER;
 80064ac:	6a03      	ldr	r3, [r0, #32]
{
 80064ae:	b530      	push	{r4, r5, lr}
	/* Get the TIMx CR2 register value */
	tmpcr2 = TIMx->CR2;
 80064b0:	6844      	ldr	r4, [r0, #4]

	/* Get the TIMx CCMR2 register value */
	tmpccmrx = TIMx->CCMR2;
 80064b2:	69c2      	ldr	r2, [r0, #28]
	/* Reset the Output Compare mode and Capture/Compare selection Bits */
	tmpccmrx &= ~TIM_CCMR2_OC4M;
	tmpccmrx &= ~TIM_CCMR2_CC4S;

	/* Select the Output Compare Mode */
	tmpccmrx |= (OC_Config->OCMode << 8U);
 80064b4:	680d      	ldr	r5, [r1, #0]
	tmpccmrx &= ~TIM_CCMR2_CC4S;
 80064b6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
	tmpccmrx |= (OC_Config->OCMode << 8U);
 80064ba:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

	/* Reset the Output Polarity level */
	tmpccer &= ~TIM_CCER_CC4P;
	/* Set the Output Compare Polarity */
	tmpccer |= (OC_Config->OCPolarity << 12U);
 80064be:	688d      	ldr	r5, [r1, #8]
	tmpccer &= ~TIM_CCER_CC4P;
 80064c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
	tmpccer |= (OC_Config->OCPolarity << 12U);
 80064c4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

	/*if((TIMx == TIM1) || (TIMx == TIM8))*/
	if (IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET) {
 80064c8:	4d06      	ldr	r5, [pc, #24]	; (80064e4 <TIM_OC4_SetConfig+0x40>)
 80064ca:	42a8      	cmp	r0, r5
		assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
		/* Reset the Output Compare IDLE State */
		tmpcr2 &= ~TIM_CR2_OIS4;
		/* Set the Output Idle state */
		tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064cc:	bf02      	ittt	eq
 80064ce:	694d      	ldreq	r5, [r1, #20]
		tmpcr2 &= ~TIM_CR2_OIS4;
 80064d0:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
		tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064d4:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
	}
	/* Write to TIMx CR2 */
	TIMx->CR2 = tmpcr2;
 80064d8:	6044      	str	r4, [r0, #4]

	/* Write to TIMx CCMR2 */
	TIMx->CCMR2 = tmpccmrx;
 80064da:	61c2      	str	r2, [r0, #28]

	/* Set the Capture Compare Register value */
	TIMx->CCR4 = OC_Config->Pulse;
 80064dc:	684a      	ldr	r2, [r1, #4]
 80064de:	6402      	str	r2, [r0, #64]	; 0x40

	/* Write to TIMx CCER */
	TIMx->CCER = tmpccer;
 80064e0:	6203      	str	r3, [r0, #32]
 80064e2:	bd30      	pop	{r4, r5, pc}
 80064e4:	40010000 	.word	0x40010000

080064e8 <HAL_TIM_PWM_MspInit>:
 80064e8:	4770      	bx	lr

080064ea <HAL_TIM_PWM_MspDeInit>:
 80064ea:	4770      	bx	lr

080064ec <HAL_TIM_PWM_DeInit>:
	htim->State = HAL_TIM_STATE_BUSY;
 80064ec:	2302      	movs	r3, #2
{
 80064ee:	b510      	push	{r4, lr}
	htim->State = HAL_TIM_STATE_BUSY;
 80064f0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
	__HAL_TIM_DISABLE(htim);
 80064f4:	6803      	ldr	r3, [r0, #0]
 80064f6:	6a19      	ldr	r1, [r3, #32]
 80064f8:	f241 1211 	movw	r2, #4369	; 0x1111
 80064fc:	4211      	tst	r1, r2
{
 80064fe:	4604      	mov	r4, r0
	__HAL_TIM_DISABLE(htim);
 8006500:	d108      	bne.n	8006514 <HAL_TIM_PWM_DeInit+0x28>
 8006502:	6a19      	ldr	r1, [r3, #32]
 8006504:	f240 4244 	movw	r2, #1092	; 0x444
 8006508:	4211      	tst	r1, r2
 800650a:	bf02      	ittt	eq
 800650c:	681a      	ldreq	r2, [r3, #0]
 800650e:	f022 0201 	biceq.w	r2, r2, #1
 8006512:	601a      	streq	r2, [r3, #0]
	HAL_TIM_PWM_MspDeInit(htim);
 8006514:	4620      	mov	r0, r4
 8006516:	f7ff ffe8 	bl	80064ea <HAL_TIM_PWM_MspDeInit>
	htim->State = HAL_TIM_STATE_RESET;
 800651a:	2000      	movs	r0, #0
 800651c:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
	__HAL_UNLOCK(htim);
 8006520:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8006524:	bd10      	pop	{r4, pc}

08006526 <HAL_TIM_ConfigClockSource>:
	__HAL_LOCK(htim);
 8006526:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800652a:	2b01      	cmp	r3, #1
{
 800652c:	b570      	push	{r4, r5, r6, lr}
 800652e:	f04f 0302 	mov.w	r3, #2
	__HAL_LOCK(htim);
 8006532:	d01c      	beq.n	800656e <HAL_TIM_ConfigClockSource+0x48>
	htim->State = HAL_TIM_STATE_BUSY;
 8006534:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
	tmpsmcr = htim->Instance->SMCR;
 8006538:	6803      	ldr	r3, [r0, #0]
	__HAL_LOCK(htim);
 800653a:	2201      	movs	r2, #1
 800653c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
	tmpsmcr = htim->Instance->SMCR;
 8006540:	689a      	ldr	r2, [r3, #8]
	tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006542:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8006546:	f022 0277 	bic.w	r2, r2, #119	; 0x77
	htim->Instance->SMCR = tmpsmcr;
 800654a:	609a      	str	r2, [r3, #8]
	switch (sClockSourceConfig->ClockSource) {
 800654c:	680a      	ldr	r2, [r1, #0]
 800654e:	2a40      	cmp	r2, #64	; 0x40
 8006550:	d079      	beq.n	8006646 <HAL_TIM_ConfigClockSource+0x120>
 8006552:	d819      	bhi.n	8006588 <HAL_TIM_ConfigClockSource+0x62>
 8006554:	2a10      	cmp	r2, #16
 8006556:	f000 8093 	beq.w	8006680 <HAL_TIM_ConfigClockSource+0x15a>
 800655a:	d80a      	bhi.n	8006572 <HAL_TIM_ConfigClockSource+0x4c>
 800655c:	2a00      	cmp	r2, #0
 800655e:	f000 8089 	beq.w	8006674 <HAL_TIM_ConfigClockSource+0x14e>
	htim->State = HAL_TIM_STATE_READY;
 8006562:	2301      	movs	r3, #1
 8006564:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
	__HAL_UNLOCK(htim);
 8006568:	2300      	movs	r3, #0
 800656a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	__HAL_LOCK(htim);
 800656e:	4618      	mov	r0, r3
}
 8006570:	bd70      	pop	{r4, r5, r6, pc}
	switch (sClockSourceConfig->ClockSource) {
 8006572:	2a20      	cmp	r2, #32
 8006574:	f000 808a 	beq.w	800668c <HAL_TIM_ConfigClockSource+0x166>
 8006578:	2a30      	cmp	r2, #48	; 0x30
 800657a:	d1f2      	bne.n	8006562 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
	uint32_t tmpsmcr = 0U;

	/* Get the TIMx SMCR register value */
	tmpsmcr = TIMx->SMCR;
 800657c:	689a      	ldr	r2, [r3, #8]
	/* Reset the TS Bits */
	tmpsmcr &= ~TIM_SMCR_TS;
 800657e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
	/* Set the Input Trigger source and the slave mode*/
	tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8006582:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8006586:	e036      	b.n	80065f6 <HAL_TIM_ConfigClockSource+0xd0>
	switch (sClockSourceConfig->ClockSource) {
 8006588:	2a70      	cmp	r2, #112	; 0x70
 800658a:	d036      	beq.n	80065fa <HAL_TIM_ConfigClockSource+0xd4>
 800658c:	d81b      	bhi.n	80065c6 <HAL_TIM_ConfigClockSource+0xa0>
 800658e:	2a50      	cmp	r2, #80	; 0x50
 8006590:	d042      	beq.n	8006618 <HAL_TIM_ConfigClockSource+0xf2>
 8006592:	2a60      	cmp	r2, #96	; 0x60
 8006594:	d1e5      	bne.n	8006562 <HAL_TIM_ConfigClockSource+0x3c>
	TIMx->CCER &= ~TIM_CCER_CC2E;
 8006596:	6a1c      	ldr	r4, [r3, #32]
		TIM_TI2_ConfigInputStage(htim->Instance,
 8006598:	684d      	ldr	r5, [r1, #4]
 800659a:	68ce      	ldr	r6, [r1, #12]
	TIMx->CCER &= ~TIM_CCER_CC2E;
 800659c:	f024 0410 	bic.w	r4, r4, #16
 80065a0:	621c      	str	r4, [r3, #32]
	tmpccmr1 = TIMx->CCMR1;
 80065a2:	6999      	ldr	r1, [r3, #24]
	tmpccer = TIMx->CCER;
 80065a4:	6a1a      	ldr	r2, [r3, #32]
	tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065a6:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
	tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065aa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
	tmpccer |= (TIM_ICPolarity << 4U);
 80065ae:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
	tmpccmr1 |= (TIM_ICFilter << 12U);
 80065b2:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
	TIMx->CCMR1 = tmpccmr1;
 80065b6:	6199      	str	r1, [r3, #24]
	TIMx->CCER = tmpccer;
 80065b8:	621a      	str	r2, [r3, #32]
	tmpsmcr = TIMx->SMCR;
 80065ba:	689a      	ldr	r2, [r3, #8]
	tmpsmcr &= ~TIM_SMCR_TS;
 80065bc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
	tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80065c0:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 80065c4:	e017      	b.n	80065f6 <HAL_TIM_ConfigClockSource+0xd0>
	switch (sClockSourceConfig->ClockSource) {
 80065c6:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80065ca:	d011      	beq.n	80065f0 <HAL_TIM_ConfigClockSource+0xca>
 80065cc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80065d0:	d1c7      	bne.n	8006562 <HAL_TIM_ConfigClockSource+0x3c>

	/* Reset the ETR Bits */
	tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

	/* Set the Prescaler, the Filter value and the Polarity */
	tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80065d2:	688a      	ldr	r2, [r1, #8]
 80065d4:	684d      	ldr	r5, [r1, #4]
	tmpsmcr = TIMx->SMCR;
 80065d6:	689c      	ldr	r4, [r3, #8]
	tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80065d8:	68c9      	ldr	r1, [r1, #12]
 80065da:	432a      	orrs	r2, r5
	tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065dc:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
	tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80065e0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80065e4:	4322      	orrs	r2, r4

	/* Write to TIMx SMCR */
	TIMx->SMCR = tmpsmcr;
 80065e6:	609a      	str	r2, [r3, #8]
		htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065e8:	689a      	ldr	r2, [r3, #8]
 80065ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065ee:	e002      	b.n	80065f6 <HAL_TIM_ConfigClockSource+0xd0>
		htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80065f0:	689a      	ldr	r2, [r3, #8]
 80065f2:	f022 0207 	bic.w	r2, r2, #7
	TIMx->SMCR = tmpsmcr;
 80065f6:	609a      	str	r2, [r3, #8]
 80065f8:	e7b3      	b.n	8006562 <HAL_TIM_ConfigClockSource+0x3c>
	tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80065fa:	688a      	ldr	r2, [r1, #8]
 80065fc:	684d      	ldr	r5, [r1, #4]
	tmpsmcr = TIMx->SMCR;
 80065fe:	689c      	ldr	r4, [r3, #8]
	tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8006600:	68c9      	ldr	r1, [r1, #12]
 8006602:	432a      	orrs	r2, r5
	tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006604:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
	tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8006608:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800660c:	4322      	orrs	r2, r4
	TIMx->SMCR = tmpsmcr;
 800660e:	609a      	str	r2, [r3, #8]
		tmpsmcr = htim->Instance->SMCR;
 8006610:	689a      	ldr	r2, [r3, #8]
		tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006612:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8006616:	e7ee      	b.n	80065f6 <HAL_TIM_ConfigClockSource+0xd0>
		TIM_TI1_ConfigInputStage(htim->Instance,
 8006618:	684c      	ldr	r4, [r1, #4]
 800661a:	68ce      	ldr	r6, [r1, #12]
	tmpccer = TIMx->CCER;
 800661c:	6a19      	ldr	r1, [r3, #32]
	TIMx->CCER &= ~TIM_CCER_CC1E;
 800661e:	6a1d      	ldr	r5, [r3, #32]
 8006620:	f025 0501 	bic.w	r5, r5, #1
 8006624:	621d      	str	r5, [r3, #32]
	tmpccmr1 = TIMx->CCMR1;
 8006626:	699a      	ldr	r2, [r3, #24]
	tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006628:	f021 010a 	bic.w	r1, r1, #10
	tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800662c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
	tmpccmr1 |= (TIM_ICFilter << 4U);
 8006630:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
	tmpccer |= TIM_ICPolarity;
 8006634:	4321      	orrs	r1, r4
	TIMx->CCMR1 = tmpccmr1;
 8006636:	619a      	str	r2, [r3, #24]
	TIMx->CCER = tmpccer;
 8006638:	6219      	str	r1, [r3, #32]
	tmpsmcr = TIMx->SMCR;
 800663a:	689a      	ldr	r2, [r3, #8]
	tmpsmcr &= ~TIM_SMCR_TS;
 800663c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
	tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8006640:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8006644:	e7d7      	b.n	80065f6 <HAL_TIM_ConfigClockSource+0xd0>
		TIM_TI1_ConfigInputStage(htim->Instance,
 8006646:	684c      	ldr	r4, [r1, #4]
 8006648:	68ce      	ldr	r6, [r1, #12]
	tmpccer = TIMx->CCER;
 800664a:	6a19      	ldr	r1, [r3, #32]
	TIMx->CCER &= ~TIM_CCER_CC1E;
 800664c:	6a1d      	ldr	r5, [r3, #32]
 800664e:	f025 0501 	bic.w	r5, r5, #1
 8006652:	621d      	str	r5, [r3, #32]
	tmpccmr1 = TIMx->CCMR1;
 8006654:	699a      	ldr	r2, [r3, #24]
	tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006656:	f021 010a 	bic.w	r1, r1, #10
	tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800665a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
	tmpccmr1 |= (TIM_ICFilter << 4U);
 800665e:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
	tmpccer |= TIM_ICPolarity;
 8006662:	4321      	orrs	r1, r4
	TIMx->CCMR1 = tmpccmr1;
 8006664:	619a      	str	r2, [r3, #24]
	TIMx->CCER = tmpccer;
 8006666:	6219      	str	r1, [r3, #32]
	tmpsmcr = TIMx->SMCR;
 8006668:	689a      	ldr	r2, [r3, #8]
	tmpsmcr &= ~TIM_SMCR_TS;
 800666a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
	tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800666e:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8006672:	e7c0      	b.n	80065f6 <HAL_TIM_ConfigClockSource+0xd0>
	tmpsmcr = TIMx->SMCR;
 8006674:	689a      	ldr	r2, [r3, #8]
	tmpsmcr &= ~TIM_SMCR_TS;
 8006676:	f022 0270 	bic.w	r2, r2, #112	; 0x70
	tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800667a:	f042 0207 	orr.w	r2, r2, #7
 800667e:	e7ba      	b.n	80065f6 <HAL_TIM_ConfigClockSource+0xd0>
	tmpsmcr = TIMx->SMCR;
 8006680:	689a      	ldr	r2, [r3, #8]
	tmpsmcr &= ~TIM_SMCR_TS;
 8006682:	f022 0270 	bic.w	r2, r2, #112	; 0x70
	tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8006686:	f042 0217 	orr.w	r2, r2, #23
 800668a:	e7b4      	b.n	80065f6 <HAL_TIM_ConfigClockSource+0xd0>
	tmpsmcr = TIMx->SMCR;
 800668c:	689a      	ldr	r2, [r3, #8]
	tmpsmcr &= ~TIM_SMCR_TS;
 800668e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
	tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8006692:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8006696:	e7ae      	b.n	80065f6 <HAL_TIM_ConfigClockSource+0xd0>

08006698 <HAL_TIM_PeriodElapsedCallback>:
 8006698:	4770      	bx	lr

0800669a <HAL_TIM_OC_DelayElapsedCallback>:
 800669a:	4770      	bx	lr

0800669c <HAL_TIM_IC_CaptureCallback>:
 800669c:	4770      	bx	lr

0800669e <HAL_TIM_PWM_PulseFinishedCallback>:
 800669e:	4770      	bx	lr

080066a0 <HAL_TIM_TriggerCallback>:
 80066a0:	4770      	bx	lr

080066a2 <HAL_TIM_IRQHandler>:
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET) {
 80066a2:	6803      	ldr	r3, [r0, #0]
 80066a4:	691a      	ldr	r2, [r3, #16]
 80066a6:	0791      	lsls	r1, r2, #30
{
 80066a8:	b510      	push	{r4, lr}
 80066aa:	4604      	mov	r4, r0
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET) {
 80066ac:	d50e      	bpl.n	80066cc <HAL_TIM_IRQHandler+0x2a>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET) {
 80066ae:	68da      	ldr	r2, [r3, #12]
 80066b0:	0792      	lsls	r2, r2, #30
 80066b2:	d50b      	bpl.n	80066cc <HAL_TIM_IRQHandler+0x2a>
				__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80066b4:	f06f 0202 	mvn.w	r2, #2
 80066b8:	611a      	str	r2, [r3, #16]
				if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U) {
 80066ba:	699b      	ldr	r3, [r3, #24]
				htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066bc:	2201      	movs	r2, #1
				if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U) {
 80066be:	079b      	lsls	r3, r3, #30
				htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066c0:	7602      	strb	r2, [r0, #24]
				if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U) {
 80066c2:	d077      	beq.n	80067b4 <HAL_TIM_IRQHandler+0x112>
					HAL_TIM_IC_CaptureCallback(htim);
 80066c4:	f7ff ffea 	bl	800669c <HAL_TIM_IC_CaptureCallback>
				htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066c8:	2300      	movs	r3, #0
 80066ca:	7623      	strb	r3, [r4, #24]
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET) {
 80066cc:	6823      	ldr	r3, [r4, #0]
 80066ce:	691a      	ldr	r2, [r3, #16]
 80066d0:	0750      	lsls	r0, r2, #29
 80066d2:	d510      	bpl.n	80066f6 <HAL_TIM_IRQHandler+0x54>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET) {
 80066d4:	68da      	ldr	r2, [r3, #12]
 80066d6:	0751      	lsls	r1, r2, #29
 80066d8:	d50d      	bpl.n	80066f6 <HAL_TIM_IRQHandler+0x54>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80066da:	f06f 0204 	mvn.w	r2, #4
 80066de:	611a      	str	r2, [r3, #16]
			if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U) {
 80066e0:	699b      	ldr	r3, [r3, #24]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066e2:	2202      	movs	r2, #2
			if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U) {
 80066e4:	f413 7f40 	tst.w	r3, #768	; 0x300
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066e8:	7622      	strb	r2, [r4, #24]
				HAL_TIM_IC_CaptureCallback(htim);
 80066ea:	4620      	mov	r0, r4
			if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U) {
 80066ec:	d068      	beq.n	80067c0 <HAL_TIM_IRQHandler+0x11e>
				HAL_TIM_IC_CaptureCallback(htim);
 80066ee:	f7ff ffd5 	bl	800669c <HAL_TIM_IC_CaptureCallback>
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066f2:	2300      	movs	r3, #0
 80066f4:	7623      	strb	r3, [r4, #24]
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET) {
 80066f6:	6823      	ldr	r3, [r4, #0]
 80066f8:	691a      	ldr	r2, [r3, #16]
 80066fa:	0712      	lsls	r2, r2, #28
 80066fc:	d50f      	bpl.n	800671e <HAL_TIM_IRQHandler+0x7c>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET) {
 80066fe:	68da      	ldr	r2, [r3, #12]
 8006700:	0710      	lsls	r0, r2, #28
 8006702:	d50c      	bpl.n	800671e <HAL_TIM_IRQHandler+0x7c>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006704:	f06f 0208 	mvn.w	r2, #8
 8006708:	611a      	str	r2, [r3, #16]
			if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U) {
 800670a:	69db      	ldr	r3, [r3, #28]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800670c:	2204      	movs	r2, #4
			if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U) {
 800670e:	0799      	lsls	r1, r3, #30
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006710:	7622      	strb	r2, [r4, #24]
				HAL_TIM_IC_CaptureCallback(htim);
 8006712:	4620      	mov	r0, r4
			if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U) {
 8006714:	d05a      	beq.n	80067cc <HAL_TIM_IRQHandler+0x12a>
				HAL_TIM_IC_CaptureCallback(htim);
 8006716:	f7ff ffc1 	bl	800669c <HAL_TIM_IC_CaptureCallback>
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800671a:	2300      	movs	r3, #0
 800671c:	7623      	strb	r3, [r4, #24]
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET) {
 800671e:	6823      	ldr	r3, [r4, #0]
 8006720:	691a      	ldr	r2, [r3, #16]
 8006722:	06d2      	lsls	r2, r2, #27
 8006724:	d510      	bpl.n	8006748 <HAL_TIM_IRQHandler+0xa6>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET) {
 8006726:	68da      	ldr	r2, [r3, #12]
 8006728:	06d0      	lsls	r0, r2, #27
 800672a:	d50d      	bpl.n	8006748 <HAL_TIM_IRQHandler+0xa6>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800672c:	f06f 0210 	mvn.w	r2, #16
 8006730:	611a      	str	r2, [r3, #16]
			if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U) {
 8006732:	69db      	ldr	r3, [r3, #28]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006734:	2208      	movs	r2, #8
			if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U) {
 8006736:	f413 7f40 	tst.w	r3, #768	; 0x300
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800673a:	7622      	strb	r2, [r4, #24]
				HAL_TIM_IC_CaptureCallback(htim);
 800673c:	4620      	mov	r0, r4
			if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U) {
 800673e:	d04b      	beq.n	80067d8 <HAL_TIM_IRQHandler+0x136>
				HAL_TIM_IC_CaptureCallback(htim);
 8006740:	f7ff ffac 	bl	800669c <HAL_TIM_IC_CaptureCallback>
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006744:	2300      	movs	r3, #0
 8006746:	7623      	strb	r3, [r4, #24]
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET) {
 8006748:	6823      	ldr	r3, [r4, #0]
 800674a:	691a      	ldr	r2, [r3, #16]
 800674c:	07d1      	lsls	r1, r2, #31
 800674e:	d508      	bpl.n	8006762 <HAL_TIM_IRQHandler+0xc0>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET) {
 8006750:	68da      	ldr	r2, [r3, #12]
 8006752:	07d2      	lsls	r2, r2, #31
 8006754:	d505      	bpl.n	8006762 <HAL_TIM_IRQHandler+0xc0>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006756:	f06f 0201 	mvn.w	r2, #1
 800675a:	611a      	str	r2, [r3, #16]
			HAL_TIM_PeriodElapsedCallback(htim);
 800675c:	4620      	mov	r0, r4
 800675e:	f7ff ff9b 	bl	8006698 <HAL_TIM_PeriodElapsedCallback>
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET) {
 8006762:	6823      	ldr	r3, [r4, #0]
 8006764:	691a      	ldr	r2, [r3, #16]
 8006766:	0610      	lsls	r0, r2, #24
 8006768:	d508      	bpl.n	800677c <HAL_TIM_IRQHandler+0xda>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET) {
 800676a:	68da      	ldr	r2, [r3, #12]
 800676c:	0611      	lsls	r1, r2, #24
 800676e:	d505      	bpl.n	800677c <HAL_TIM_IRQHandler+0xda>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006770:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006774:	611a      	str	r2, [r3, #16]
			HAL_TIMEx_BreakCallback(htim);
 8006776:	4620      	mov	r0, r4
 8006778:	f000 f9b7 	bl	8006aea <HAL_TIMEx_BreakCallback>
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET) {
 800677c:	6823      	ldr	r3, [r4, #0]
 800677e:	691a      	ldr	r2, [r3, #16]
 8006780:	0652      	lsls	r2, r2, #25
 8006782:	d508      	bpl.n	8006796 <HAL_TIM_IRQHandler+0xf4>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET) {
 8006784:	68da      	ldr	r2, [r3, #12]
 8006786:	0650      	lsls	r0, r2, #25
 8006788:	d505      	bpl.n	8006796 <HAL_TIM_IRQHandler+0xf4>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800678a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800678e:	611a      	str	r2, [r3, #16]
			HAL_TIM_TriggerCallback(htim);
 8006790:	4620      	mov	r0, r4
 8006792:	f7ff ff85 	bl	80066a0 <HAL_TIM_TriggerCallback>
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET) {
 8006796:	6823      	ldr	r3, [r4, #0]
 8006798:	691a      	ldr	r2, [r3, #16]
 800679a:	0691      	lsls	r1, r2, #26
 800679c:	d522      	bpl.n	80067e4 <HAL_TIM_IRQHandler+0x142>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET) {
 800679e:	68da      	ldr	r2, [r3, #12]
 80067a0:	0692      	lsls	r2, r2, #26
 80067a2:	d51f      	bpl.n	80067e4 <HAL_TIM_IRQHandler+0x142>
			__HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80067a4:	f06f 0220 	mvn.w	r2, #32
			HAL_TIMEx_CommutationCallback(htim);
 80067a8:	4620      	mov	r0, r4
			__HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80067aa:	611a      	str	r2, [r3, #16]
}
 80067ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			HAL_TIMEx_CommutationCallback(htim);
 80067b0:	f000 b99a 	b.w	8006ae8 <HAL_TIMEx_CommutationCallback>
					HAL_TIM_OC_DelayElapsedCallback(htim);
 80067b4:	f7ff ff71 	bl	800669a <HAL_TIM_OC_DelayElapsedCallback>
					HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067b8:	4620      	mov	r0, r4
 80067ba:	f7ff ff70 	bl	800669e <HAL_TIM_PWM_PulseFinishedCallback>
 80067be:	e783      	b.n	80066c8 <HAL_TIM_IRQHandler+0x26>
				HAL_TIM_OC_DelayElapsedCallback(htim);
 80067c0:	f7ff ff6b 	bl	800669a <HAL_TIM_OC_DelayElapsedCallback>
				HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067c4:	4620      	mov	r0, r4
 80067c6:	f7ff ff6a 	bl	800669e <HAL_TIM_PWM_PulseFinishedCallback>
 80067ca:	e792      	b.n	80066f2 <HAL_TIM_IRQHandler+0x50>
				HAL_TIM_OC_DelayElapsedCallback(htim);
 80067cc:	f7ff ff65 	bl	800669a <HAL_TIM_OC_DelayElapsedCallback>
				HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067d0:	4620      	mov	r0, r4
 80067d2:	f7ff ff64 	bl	800669e <HAL_TIM_PWM_PulseFinishedCallback>
 80067d6:	e7a0      	b.n	800671a <HAL_TIM_IRQHandler+0x78>
				HAL_TIM_OC_DelayElapsedCallback(htim);
 80067d8:	f7ff ff5f 	bl	800669a <HAL_TIM_OC_DelayElapsedCallback>
				HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067dc:	4620      	mov	r0, r4
 80067de:	f7ff ff5e 	bl	800669e <HAL_TIM_PWM_PulseFinishedCallback>
 80067e2:	e7af      	b.n	8006744 <HAL_TIM_IRQHandler+0xa2>
 80067e4:	bd10      	pop	{r4, pc}
	...

080067e8 <TIM_Base_SetConfig>:
	if (IS_TIM_CC3_INSTANCE(TIMx) != RESET) {
 80067e8:	4a22      	ldr	r2, [pc, #136]	; (8006874 <TIM_Base_SetConfig+0x8c>)
	tmpcr1 = TIMx->CR1;
 80067ea:	6803      	ldr	r3, [r0, #0]
	if (IS_TIM_CC3_INSTANCE(TIMx) != RESET) {
 80067ec:	4290      	cmp	r0, r2
 80067ee:	d00e      	beq.n	800680e <TIM_Base_SetConfig+0x26>
 80067f0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80067f4:	d00b      	beq.n	800680e <TIM_Base_SetConfig+0x26>
 80067f6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80067fa:	4290      	cmp	r0, r2
 80067fc:	d007      	beq.n	800680e <TIM_Base_SetConfig+0x26>
 80067fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006802:	4290      	cmp	r0, r2
 8006804:	d003      	beq.n	800680e <TIM_Base_SetConfig+0x26>
 8006806:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800680a:	4290      	cmp	r0, r2
 800680c:	d119      	bne.n	8006842 <TIM_Base_SetConfig+0x5a>
		tmpcr1 |= Structure->CounterMode;
 800680e:	684a      	ldr	r2, [r1, #4]
		tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
		tmpcr1 |= Structure->CounterMode;
 8006814:	4313      	orrs	r3, r2
	if (IS_TIM_CC1_INSTANCE(TIMx) != RESET) {
 8006816:	4a17      	ldr	r2, [pc, #92]	; (8006874 <TIM_Base_SetConfig+0x8c>)
 8006818:	4290      	cmp	r0, r2
 800681a:	d104      	bne.n	8006826 <TIM_Base_SetConfig+0x3e>
		tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800681c:	68ca      	ldr	r2, [r1, #12]
		tmpcr1 &= ~TIM_CR1_CKD;
 800681e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
		tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006822:	4313      	orrs	r3, r2
 8006824:	e018      	b.n	8006858 <TIM_Base_SetConfig+0x70>
	if (IS_TIM_CC1_INSTANCE(TIMx) != RESET) {
 8006826:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800682a:	d0f7      	beq.n	800681c <TIM_Base_SetConfig+0x34>
 800682c:	4a12      	ldr	r2, [pc, #72]	; (8006878 <TIM_Base_SetConfig+0x90>)
 800682e:	4290      	cmp	r0, r2
 8006830:	d0f4      	beq.n	800681c <TIM_Base_SetConfig+0x34>
 8006832:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006836:	4290      	cmp	r0, r2
 8006838:	d0f0      	beq.n	800681c <TIM_Base_SetConfig+0x34>
 800683a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800683e:	4290      	cmp	r0, r2
 8006840:	d0ec      	beq.n	800681c <TIM_Base_SetConfig+0x34>
 8006842:	4a0e      	ldr	r2, [pc, #56]	; (800687c <TIM_Base_SetConfig+0x94>)
 8006844:	4290      	cmp	r0, r2
 8006846:	d0e9      	beq.n	800681c <TIM_Base_SetConfig+0x34>
 8006848:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800684c:	4290      	cmp	r0, r2
 800684e:	d0e5      	beq.n	800681c <TIM_Base_SetConfig+0x34>
 8006850:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006854:	4290      	cmp	r0, r2
 8006856:	d0e1      	beq.n	800681c <TIM_Base_SetConfig+0x34>
	TIMx->CR1 = tmpcr1;
 8006858:	6003      	str	r3, [r0, #0]
	TIMx->ARR = (uint32_t)Structure->Period;
 800685a:	688b      	ldr	r3, [r1, #8]
 800685c:	62c3      	str	r3, [r0, #44]	; 0x2c
	TIMx->PSC = (uint32_t)Structure->Prescaler;
 800685e:	680b      	ldr	r3, [r1, #0]
 8006860:	6283      	str	r3, [r0, #40]	; 0x28
	if (IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET) {
 8006862:	4b04      	ldr	r3, [pc, #16]	; (8006874 <TIM_Base_SetConfig+0x8c>)
 8006864:	4298      	cmp	r0, r3
		TIMx->RCR = Structure->RepetitionCounter;
 8006866:	bf04      	itt	eq
 8006868:	690b      	ldreq	r3, [r1, #16]
 800686a:	6303      	streq	r3, [r0, #48]	; 0x30
	TIMx->EGR = TIM_EGR_UG;
 800686c:	2301      	movs	r3, #1
 800686e:	6143      	str	r3, [r0, #20]
}
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	40010000 	.word	0x40010000
 8006878:	40000400 	.word	0x40000400
 800687c:	40014000 	.word	0x40014000

08006880 <HAL_TIM_Base_Init>:
{
 8006880:	b510      	push	{r4, lr}
	if (htim == NULL) {
 8006882:	4604      	mov	r4, r0
 8006884:	b1a0      	cbz	r0, 80068b0 <HAL_TIM_Base_Init+0x30>
	if (htim->State == HAL_TIM_STATE_RESET) {
 8006886:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800688a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800688e:	b91b      	cbnz	r3, 8006898 <HAL_TIM_Base_Init+0x18>
		htim->Lock = HAL_UNLOCKED;
 8006890:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
		HAL_TIM_Base_MspInit(htim);
 8006894:	f001 f956 	bl	8007b44 <HAL_TIM_Base_MspInit>
	htim->State = HAL_TIM_STATE_BUSY;
 8006898:	2302      	movs	r3, #2
 800689a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800689e:	6820      	ldr	r0, [r4, #0]
 80068a0:	1d21      	adds	r1, r4, #4
 80068a2:	f7ff ffa1 	bl	80067e8 <TIM_Base_SetConfig>
	htim->State = HAL_TIM_STATE_READY;
 80068a6:	2301      	movs	r3, #1
 80068a8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	return HAL_OK;
 80068ac:	2000      	movs	r0, #0
 80068ae:	bd10      	pop	{r4, pc}
		return HAL_ERROR;
 80068b0:	2001      	movs	r0, #1
}
 80068b2:	bd10      	pop	{r4, pc}

080068b4 <HAL_TIM_PWM_Init>:
{
 80068b4:	b510      	push	{r4, lr}
	if (htim == NULL) {
 80068b6:	4604      	mov	r4, r0
 80068b8:	b1a0      	cbz	r0, 80068e4 <HAL_TIM_PWM_Init+0x30>
	if (htim->State == HAL_TIM_STATE_RESET) {
 80068ba:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80068be:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80068c2:	b91b      	cbnz	r3, 80068cc <HAL_TIM_PWM_Init+0x18>
		htim->Lock = HAL_UNLOCKED;
 80068c4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
		HAL_TIM_PWM_MspInit(htim);
 80068c8:	f7ff fe0e 	bl	80064e8 <HAL_TIM_PWM_MspInit>
	htim->State = HAL_TIM_STATE_BUSY;
 80068cc:	2302      	movs	r3, #2
 80068ce:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068d2:	6820      	ldr	r0, [r4, #0]
 80068d4:	1d21      	adds	r1, r4, #4
 80068d6:	f7ff ff87 	bl	80067e8 <TIM_Base_SetConfig>
	htim->State = HAL_TIM_STATE_READY;
 80068da:	2301      	movs	r3, #1
 80068dc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	return HAL_OK;
 80068e0:	2000      	movs	r0, #0
 80068e2:	bd10      	pop	{r4, pc}
		return HAL_ERROR;
 80068e4:	2001      	movs	r0, #1
}
 80068e6:	bd10      	pop	{r4, pc}

080068e8 <TIM_OC2_SetConfig>:
	TIMx->CCER &= ~TIM_CCER_CC2E;
 80068e8:	6a03      	ldr	r3, [r0, #32]
 80068ea:	f023 0310 	bic.w	r3, r3, #16
 80068ee:	6203      	str	r3, [r0, #32]
	tmpccer = TIMx->CCER;
 80068f0:	6a03      	ldr	r3, [r0, #32]
{
 80068f2:	b570      	push	{r4, r5, r6, lr}
	tmpcr2 = TIMx->CR2;
 80068f4:	6844      	ldr	r4, [r0, #4]
	tmpccmrx = TIMx->CCMR1;
 80068f6:	6982      	ldr	r2, [r0, #24]
	tmpccmrx |= (OC_Config->OCMode << 8U);
 80068f8:	680d      	ldr	r5, [r1, #0]
	tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068fa:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
	tmpccmrx |= (OC_Config->OCMode << 8U);
 80068fe:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
	tmpccer |= (OC_Config->OCPolarity << 4U);
 8006902:	688d      	ldr	r5, [r1, #8]
	tmpccer &= ~TIM_CCER_CC2P;
 8006904:	f023 0320 	bic.w	r3, r3, #32
	tmpccer |= (OC_Config->OCPolarity << 4U);
 8006908:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
	if (IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET) {
 800690c:	4d0b      	ldr	r5, [pc, #44]	; (800693c <TIM_OC2_SetConfig+0x54>)
 800690e:	42a8      	cmp	r0, r5
 8006910:	d10d      	bne.n	800692e <TIM_OC2_SetConfig+0x46>
		tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006912:	68cd      	ldr	r5, [r1, #12]
		tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006914:	698e      	ldr	r6, [r1, #24]
		tmpccer &= ~TIM_CCER_CC2NP;
 8006916:	f023 0380 	bic.w	r3, r3, #128	; 0x80
		tmpccer |= (OC_Config->OCNPolarity << 4U);
 800691a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
		tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800691e:	694d      	ldr	r5, [r1, #20]
		tmpcr2 &= ~TIM_CR2_OIS2N;
 8006920:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
		tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006924:	4335      	orrs	r5, r6
		tmpccer &= ~TIM_CCER_CC2NE;
 8006926:	f023 0340 	bic.w	r3, r3, #64	; 0x40
		tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800692a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
	TIMx->CR2 = tmpcr2;
 800692e:	6044      	str	r4, [r0, #4]
	TIMx->CCMR1 = tmpccmrx;
 8006930:	6182      	str	r2, [r0, #24]
	TIMx->CCR2 = OC_Config->Pulse;
 8006932:	684a      	ldr	r2, [r1, #4]
 8006934:	6382      	str	r2, [r0, #56]	; 0x38
	TIMx->CCER = tmpccer;
 8006936:	6203      	str	r3, [r0, #32]
 8006938:	bd70      	pop	{r4, r5, r6, pc}
 800693a:	bf00      	nop
 800693c:	40010000 	.word	0x40010000

08006940 <HAL_TIM_PWM_ConfigChannel>:
{
 8006940:	b538      	push	{r3, r4, r5, lr}
	__HAL_LOCK(htim);
 8006942:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8006946:	2b01      	cmp	r3, #1
{
 8006948:	4604      	mov	r4, r0
 800694a:	f04f 0002 	mov.w	r0, #2
	__HAL_LOCK(htim);
 800694e:	d025      	beq.n	800699c <HAL_TIM_PWM_ConfigChannel+0x5c>
 8006950:	2301      	movs	r3, #1
 8006952:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	htim->State = HAL_TIM_STATE_BUSY;
 8006956:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
	switch (Channel) {
 800695a:	2a0c      	cmp	r2, #12
 800695c:	d818      	bhi.n	8006990 <HAL_TIM_PWM_ConfigChannel+0x50>
 800695e:	e8df f002 	tbb	[pc, r2]
 8006962:	1707      	.short	0x1707
 8006964:	171e1717 	.word	0x171e1717
 8006968:	172f1717 	.word	0x172f1717
 800696c:	1717      	.short	0x1717
 800696e:	40          	.byte	0x40
 800696f:	00          	.byte	0x00
		TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006970:	6820      	ldr	r0, [r4, #0]
 8006972:	f7ff fd45 	bl	8006400 <TIM_OC1_SetConfig>
		htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006976:	6823      	ldr	r3, [r4, #0]
		htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006978:	6909      	ldr	r1, [r1, #16]
		htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800697a:	699a      	ldr	r2, [r3, #24]
 800697c:	f042 0208 	orr.w	r2, r2, #8
 8006980:	619a      	str	r2, [r3, #24]
		htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006982:	699a      	ldr	r2, [r3, #24]
 8006984:	f022 0204 	bic.w	r2, r2, #4
 8006988:	619a      	str	r2, [r3, #24]
		htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800698a:	699a      	ldr	r2, [r3, #24]
 800698c:	430a      	orrs	r2, r1
		htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800698e:	619a      	str	r2, [r3, #24]
	htim->State = HAL_TIM_STATE_READY;
 8006990:	2301      	movs	r3, #1
	__HAL_UNLOCK(htim);
 8006992:	2000      	movs	r0, #0
	htim->State = HAL_TIM_STATE_READY;
 8006994:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	__HAL_UNLOCK(htim);
 8006998:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 800699c:	bd38      	pop	{r3, r4, r5, pc}
		TIM_OC2_SetConfig(htim->Instance, sConfig);
 800699e:	6820      	ldr	r0, [r4, #0]
 80069a0:	f7ff ffa2 	bl	80068e8 <TIM_OC2_SetConfig>
		htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80069a4:	6823      	ldr	r3, [r4, #0]
		htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80069a6:	6909      	ldr	r1, [r1, #16]
		htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80069a8:	699a      	ldr	r2, [r3, #24]
 80069aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069ae:	619a      	str	r2, [r3, #24]
		htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80069b0:	699a      	ldr	r2, [r3, #24]
 80069b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069b6:	619a      	str	r2, [r3, #24]
		htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80069b8:	699a      	ldr	r2, [r3, #24]
 80069ba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80069be:	e7e6      	b.n	800698e <HAL_TIM_PWM_ConfigChannel+0x4e>
		TIM_OC3_SetConfig(htim->Instance, sConfig);
 80069c0:	6820      	ldr	r0, [r4, #0]
 80069c2:	f7ff fd45 	bl	8006450 <TIM_OC3_SetConfig>
		htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80069c6:	6823      	ldr	r3, [r4, #0]
		htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069c8:	6909      	ldr	r1, [r1, #16]
		htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80069ca:	69da      	ldr	r2, [r3, #28]
 80069cc:	f042 0208 	orr.w	r2, r2, #8
 80069d0:	61da      	str	r2, [r3, #28]
		htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80069d2:	69da      	ldr	r2, [r3, #28]
 80069d4:	f022 0204 	bic.w	r2, r2, #4
 80069d8:	61da      	str	r2, [r3, #28]
		htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069da:	69da      	ldr	r2, [r3, #28]
 80069dc:	430a      	orrs	r2, r1
		htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80069de:	61da      	str	r2, [r3, #28]
	break;
 80069e0:	e7d6      	b.n	8006990 <HAL_TIM_PWM_ConfigChannel+0x50>
		TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069e2:	6820      	ldr	r0, [r4, #0]
 80069e4:	f7ff fd5e 	bl	80064a4 <TIM_OC4_SetConfig>
		htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069e8:	6823      	ldr	r3, [r4, #0]
		htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80069ea:	6909      	ldr	r1, [r1, #16]
		htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069ec:	69da      	ldr	r2, [r3, #28]
 80069ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069f2:	61da      	str	r2, [r3, #28]
		htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80069f4:	69da      	ldr	r2, [r3, #28]
 80069f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069fa:	61da      	str	r2, [r3, #28]
		htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80069fc:	69da      	ldr	r2, [r3, #28]
 80069fe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006a02:	e7ec      	b.n	80069de <HAL_TIM_PWM_ConfigChannel+0x9e>

08006a04 <TIM_CCxChannelCmd>:
	TIMx->CCER &= ~tmp;
 8006a04:	6a03      	ldr	r3, [r0, #32]
{
 8006a06:	b510      	push	{r4, lr}
	tmp = TIM_CCER_CC1E << Channel;
 8006a08:	2401      	movs	r4, #1
 8006a0a:	408c      	lsls	r4, r1
	TIMx->CCER &= ~tmp;
 8006a0c:	ea23 0304 	bic.w	r3, r3, r4
 8006a10:	6203      	str	r3, [r0, #32]
	TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8006a12:	6a03      	ldr	r3, [r0, #32]
 8006a14:	408a      	lsls	r2, r1
 8006a16:	431a      	orrs	r2, r3
 8006a18:	6202      	str	r2, [r0, #32]
 8006a1a:	bd10      	pop	{r4, pc}

08006a1c <HAL_TIM_PWM_Start>:
{
 8006a1c:	b510      	push	{r4, lr}
 8006a1e:	4604      	mov	r4, r0
	TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a20:	2201      	movs	r2, #1
 8006a22:	6800      	ldr	r0, [r0, #0]
 8006a24:	f7ff ffee 	bl	8006a04 <TIM_CCxChannelCmd>
	if (IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET) {
 8006a28:	6823      	ldr	r3, [r4, #0]
 8006a2a:	4a06      	ldr	r2, [pc, #24]	; (8006a44 <HAL_TIM_PWM_Start+0x28>)
 8006a2c:	4293      	cmp	r3, r2
		__HAL_TIM_MOE_ENABLE(htim);
 8006a2e:	bf02      	ittt	eq
 8006a30:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8006a32:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8006a36:	645a      	streq	r2, [r3, #68]	; 0x44
	__HAL_TIM_ENABLE(htim);
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	f042 0201 	orr.w	r2, r2, #1
 8006a3e:	601a      	str	r2, [r3, #0]
}
 8006a40:	2000      	movs	r0, #0
 8006a42:	bd10      	pop	{r4, pc}
 8006a44:	40010000 	.word	0x40010000

08006a48 <HAL_TIM_PWM_Stop>:
{
 8006a48:	b510      	push	{r4, lr}
 8006a4a:	4604      	mov	r4, r0
	TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	6800      	ldr	r0, [r0, #0]
 8006a50:	f7ff ffd8 	bl	8006a04 <TIM_CCxChannelCmd>
	if (IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET) {
 8006a54:	6823      	ldr	r3, [r4, #0]
 8006a56:	4a12      	ldr	r2, [pc, #72]	; (8006aa0 <HAL_TIM_PWM_Stop+0x58>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d10d      	bne.n	8006a78 <HAL_TIM_PWM_Stop+0x30>
		__HAL_TIM_MOE_DISABLE(htim);
 8006a5c:	6a19      	ldr	r1, [r3, #32]
 8006a5e:	f241 1211 	movw	r2, #4369	; 0x1111
 8006a62:	4211      	tst	r1, r2
 8006a64:	d108      	bne.n	8006a78 <HAL_TIM_PWM_Stop+0x30>
 8006a66:	6a19      	ldr	r1, [r3, #32]
 8006a68:	f240 4244 	movw	r2, #1092	; 0x444
 8006a6c:	4211      	tst	r1, r2
 8006a6e:	bf02      	ittt	eq
 8006a70:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8006a72:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 8006a76:	645a      	streq	r2, [r3, #68]	; 0x44
	__HAL_TIM_DISABLE(htim);
 8006a78:	6a19      	ldr	r1, [r3, #32]
 8006a7a:	f241 1211 	movw	r2, #4369	; 0x1111
 8006a7e:	4211      	tst	r1, r2
 8006a80:	d108      	bne.n	8006a94 <HAL_TIM_PWM_Stop+0x4c>
 8006a82:	6a19      	ldr	r1, [r3, #32]
 8006a84:	f240 4244 	movw	r2, #1092	; 0x444
 8006a88:	4211      	tst	r1, r2
 8006a8a:	bf02      	ittt	eq
 8006a8c:	681a      	ldreq	r2, [r3, #0]
 8006a8e:	f022 0201 	biceq.w	r2, r2, #1
 8006a92:	601a      	streq	r2, [r3, #0]
	htim->State = HAL_TIM_STATE_READY;
 8006a94:	2301      	movs	r3, #1
 8006a96:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8006a9a:	2000      	movs	r0, #0
 8006a9c:	bd10      	pop	{r4, pc}
 8006a9e:	bf00      	nop
 8006aa0:	40010000 	.word	0x40010000

08006aa4 <HAL_TIMEx_MasterConfigSynchronization>:
	/* Check the parameters */
	assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
	assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
	assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

	__HAL_LOCK(htim);
 8006aa4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8006aa8:	2b01      	cmp	r3, #1
{
 8006aaa:	b510      	push	{r4, lr}
 8006aac:	f04f 0302 	mov.w	r3, #2
	__HAL_LOCK(htim);
 8006ab0:	d018      	beq.n	8006ae4 <HAL_TIMEx_MasterConfigSynchronization+0x40>

	htim->State = HAL_TIM_STATE_BUSY;
 8006ab2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

	/* Reset the MMS Bits */
	htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8006ab6:	6803      	ldr	r3, [r0, #0]
	/* Select the TRGO source */
	htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8006ab8:	680c      	ldr	r4, [r1, #0]
	htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8006aba:	685a      	ldr	r2, [r3, #4]

	/* Reset the MSM Bit */
	htim->Instance->SMCR &= ~TIM_SMCR_MSM;
	/* Set or Reset the MSM Bit */
	htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8006abc:	6849      	ldr	r1, [r1, #4]
	htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8006abe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006ac2:	605a      	str	r2, [r3, #4]
	htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8006ac4:	685a      	ldr	r2, [r3, #4]
 8006ac6:	4322      	orrs	r2, r4
 8006ac8:	605a      	str	r2, [r3, #4]
	htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8006aca:	689a      	ldr	r2, [r3, #8]
 8006acc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ad0:	609a      	str	r2, [r3, #8]
	htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8006ad2:	689a      	ldr	r2, [r3, #8]
 8006ad4:	430a      	orrs	r2, r1
 8006ad6:	609a      	str	r2, [r3, #8]

	htim->State = HAL_TIM_STATE_READY;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

	__HAL_UNLOCK(htim);
 8006ade:	2300      	movs	r3, #0
 8006ae0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	__HAL_LOCK(htim);
 8006ae4:	4618      	mov	r0, r3

	return HAL_OK;
}
 8006ae6:	bd10      	pop	{r4, pc}

08006ae8 <HAL_TIMEx_CommutationCallback>:
 8006ae8:	4770      	bx	lr

08006aea <HAL_TIMEx_BreakCallback>:
 * @param  htim pointer to a TIM_HandleTypeDef structure that contains
 *                the configuration information for TIM module.
 * @retval None
 */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006aea:	4770      	bx	lr

08006aec <UART_EndRxTransfer>:
 * @retval None
 */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
	/* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
	CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006aec:	6803      	ldr	r3, [r0, #0]
 8006aee:	68da      	ldr	r2, [r3, #12]
 8006af0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006af4:	60da      	str	r2, [r3, #12]
	CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006af6:	695a      	ldr	r2, [r3, #20]
 8006af8:	f022 0201 	bic.w	r2, r2, #1
 8006afc:	615a      	str	r2, [r3, #20]

	/* At end of Rx process, restore huart->RxState to Ready */
	huart->RxState = HAL_UART_STATE_READY;
 8006afe:	2320      	movs	r3, #32
 8006b00:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8006b04:	4770      	bx	lr
	...

08006b08 <UART_SetConfig>:
 * @param  huart pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
	assert_param(IS_UART_PARITY(huart->Init.Parity));
	assert_param(IS_UART_MODE(huart->Init.Mode));

	/*-------------------------- USART CR2 Configuration -----------------------*/
	tmpreg = huart->Instance->CR2;
 8006b0c:	6806      	ldr	r6, [r0, #0]

	/* Clear STOP[13:12] bits */
	tmpreg &= (uint32_t) ~((uint32_t)USART_CR2_STOP);

	/* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
	tmpreg |= (uint32_t)huart->Init.StopBits;
 8006b0e:	68c2      	ldr	r2, [r0, #12]
	tmpreg = huart->Instance->CR2;
 8006b10:	6933      	ldr	r3, [r6, #16]
	/* Configure the UART Word Length, Parity and mode:
	   Set the M bits according to huart->Init.WordLength value
	   Set PCE and PS bits according to huart->Init.Parity value
	   Set TE and RE bits according to huart->Init.Mode value
	   Set OVER8 bit according to huart->Init.OverSampling value */
	tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b12:	69c1      	ldr	r1, [r0, #28]
	tmpreg &= (uint32_t) ~((uint32_t)USART_CR2_STOP);
 8006b14:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
	tmpreg |= (uint32_t)huart->Init.StopBits;
 8006b18:	4313      	orrs	r3, r2
	WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8006b1a:	6133      	str	r3, [r6, #16]
{
 8006b1c:	4604      	mov	r4, r0
	tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b1e:	6883      	ldr	r3, [r0, #8]
 8006b20:	6900      	ldr	r0, [r0, #16]
	tmpreg = huart->Instance->CR1;
 8006b22:	68f2      	ldr	r2, [r6, #12]
	tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b24:	4303      	orrs	r3, r0
 8006b26:	6960      	ldr	r0, [r4, #20]
	tmpreg &= (uint32_t) ~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8006b28:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
	tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b2c:	4303      	orrs	r3, r0
	tmpreg &= (uint32_t) ~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8006b2e:	f022 020c 	bic.w	r2, r2, #12
	tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b32:	430b      	orrs	r3, r1
 8006b34:	4313      	orrs	r3, r2

	/* Write to USART CR1 */
	WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8006b36:	60f3      	str	r3, [r6, #12]

	/*-------------------------- USART CR3 Configuration -----------------------*/
	tmpreg = huart->Instance->CR3;
 8006b38:	6973      	ldr	r3, [r6, #20]

	/* Clear CTSE and RTSE bits */
	tmpreg &= (uint32_t) ~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));

	/* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
	tmpreg |= huart->Init.HwFlowCtl;
 8006b3a:	69a2      	ldr	r2, [r4, #24]
	tmpreg &= (uint32_t) ~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8006b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmpreg |= huart->Init.HwFlowCtl;
 8006b40:	4313      	orrs	r3, r2

	/* Write to USART CR3 */
	WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);

	/* Check the Over Sampling */
	if (huart->Init.OverSampling == UART_OVERSAMPLING_8) {
 8006b42:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
	WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8006b46:	6173      	str	r3, [r6, #20]
 8006b48:	4b7a      	ldr	r3, [pc, #488]	; (8006d34 <UART_SetConfig+0x22c>)
	if (huart->Init.OverSampling == UART_OVERSAMPLING_8) {
 8006b4a:	d17c      	bne.n	8006c46 <UART_SetConfig+0x13e>
		/*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
		if ((huart->Instance == USART1) || (huart->Instance == USART6)) {
 8006b4c:	429e      	cmp	r6, r3
 8006b4e:	d003      	beq.n	8006b58 <UART_SetConfig+0x50>
 8006b50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b54:	429e      	cmp	r6, r3
 8006b56:	d144      	bne.n	8006be2 <UART_SetConfig+0xda>
			huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006b58:	f7ff fc42 	bl	80063e0 <HAL_RCC_GetPCLK2Freq>
 8006b5c:	2519      	movs	r5, #25
 8006b5e:	fb05 f300 	mul.w	r3, r5, r0
 8006b62:	6860      	ldr	r0, [r4, #4]
 8006b64:	f04f 0964 	mov.w	r9, #100	; 0x64
 8006b68:	0040      	lsls	r0, r0, #1
 8006b6a:	fbb3 f3f0 	udiv	r3, r3, r0
 8006b6e:	fbb3 f3f9 	udiv	r3, r3, r9
 8006b72:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006b76:	f7ff fc33 	bl	80063e0 <HAL_RCC_GetPCLK2Freq>
 8006b7a:	6863      	ldr	r3, [r4, #4]
 8006b7c:	4368      	muls	r0, r5
 8006b7e:	005b      	lsls	r3, r3, #1
 8006b80:	fbb0 f7f3 	udiv	r7, r0, r3
 8006b84:	f7ff fc2c 	bl	80063e0 <HAL_RCC_GetPCLK2Freq>
 8006b88:	6863      	ldr	r3, [r4, #4]
 8006b8a:	4368      	muls	r0, r5
 8006b8c:	005b      	lsls	r3, r3, #1
 8006b8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b92:	fbb3 f3f9 	udiv	r3, r3, r9
 8006b96:	fb09 7313 	mls	r3, r9, r3, r7
 8006b9a:	00db      	lsls	r3, r3, #3
 8006b9c:	3332      	adds	r3, #50	; 0x32
 8006b9e:	fbb3 f3f9 	udiv	r3, r3, r9
 8006ba2:	005b      	lsls	r3, r3, #1
 8006ba4:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8006ba8:	f7ff fc1a 	bl	80063e0 <HAL_RCC_GetPCLK2Freq>
 8006bac:	6862      	ldr	r2, [r4, #4]
 8006bae:	4368      	muls	r0, r5
 8006bb0:	0052      	lsls	r2, r2, #1
 8006bb2:	fbb0 faf2 	udiv	sl, r0, r2
 8006bb6:	f7ff fc13 	bl	80063e0 <HAL_RCC_GetPCLK2Freq>
		if (huart->Instance == USART1) {
			huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
		}
#endif /* USART6 */
		else{
			huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006bba:	6863      	ldr	r3, [r4, #4]
 8006bbc:	4368      	muls	r0, r5
 8006bbe:	005b      	lsls	r3, r3, #1
 8006bc0:	fbb0 f3f3 	udiv	r3, r0, r3
 8006bc4:	fbb3 f3f9 	udiv	r3, r3, r9
 8006bc8:	fb09 a313 	mls	r3, r9, r3, sl
 8006bcc:	00db      	lsls	r3, r3, #3
 8006bce:	3332      	adds	r3, #50	; 0x32
 8006bd0:	fbb3 f3f9 	udiv	r3, r3, r9
 8006bd4:	f003 0307 	and.w	r3, r3, #7
 8006bd8:	4443      	add	r3, r8
		if (huart->Instance == USART1) {
			huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
		}
#endif /* USART6 */
		else{
			huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006bda:	443b      	add	r3, r7
 8006bdc:	60b3      	str	r3, [r6, #8]
 8006bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006be2:	f7ff fbed 	bl	80063c0 <HAL_RCC_GetPCLK1Freq>
 8006be6:	2519      	movs	r5, #25
 8006be8:	fb05 f300 	mul.w	r3, r5, r0
 8006bec:	6860      	ldr	r0, [r4, #4]
 8006bee:	f04f 0964 	mov.w	r9, #100	; 0x64
 8006bf2:	0040      	lsls	r0, r0, #1
 8006bf4:	fbb3 f3f0 	udiv	r3, r3, r0
 8006bf8:	fbb3 f3f9 	udiv	r3, r3, r9
 8006bfc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006c00:	f7ff fbde 	bl	80063c0 <HAL_RCC_GetPCLK1Freq>
 8006c04:	6863      	ldr	r3, [r4, #4]
 8006c06:	4368      	muls	r0, r5
 8006c08:	005b      	lsls	r3, r3, #1
 8006c0a:	fbb0 f7f3 	udiv	r7, r0, r3
 8006c0e:	f7ff fbd7 	bl	80063c0 <HAL_RCC_GetPCLK1Freq>
 8006c12:	6863      	ldr	r3, [r4, #4]
 8006c14:	4368      	muls	r0, r5
 8006c16:	005b      	lsls	r3, r3, #1
 8006c18:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c1c:	fbb3 f3f9 	udiv	r3, r3, r9
 8006c20:	fb09 7313 	mls	r3, r9, r3, r7
 8006c24:	00db      	lsls	r3, r3, #3
 8006c26:	3332      	adds	r3, #50	; 0x32
 8006c28:	fbb3 f3f9 	udiv	r3, r3, r9
 8006c2c:	005b      	lsls	r3, r3, #1
 8006c2e:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8006c32:	f7ff fbc5 	bl	80063c0 <HAL_RCC_GetPCLK1Freq>
 8006c36:	6862      	ldr	r2, [r4, #4]
 8006c38:	4368      	muls	r0, r5
 8006c3a:	0052      	lsls	r2, r2, #1
 8006c3c:	fbb0 faf2 	udiv	sl, r0, r2
 8006c40:	f7ff fbbe 	bl	80063c0 <HAL_RCC_GetPCLK1Freq>
 8006c44:	e7b9      	b.n	8006bba <UART_SetConfig+0xb2>
		if ((huart->Instance == USART1) || (huart->Instance == USART6)) {
 8006c46:	429e      	cmp	r6, r3
 8006c48:	d002      	beq.n	8006c50 <UART_SetConfig+0x148>
 8006c4a:	4b3b      	ldr	r3, [pc, #236]	; (8006d38 <UART_SetConfig+0x230>)
 8006c4c:	429e      	cmp	r6, r3
 8006c4e:	d140      	bne.n	8006cd2 <UART_SetConfig+0x1ca>
			huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006c50:	f7ff fbc6 	bl	80063e0 <HAL_RCC_GetPCLK2Freq>
 8006c54:	6867      	ldr	r7, [r4, #4]
 8006c56:	2519      	movs	r5, #25
 8006c58:	f04f 0964 	mov.w	r9, #100	; 0x64
 8006c5c:	fb05 f300 	mul.w	r3, r5, r0
 8006c60:	00bf      	lsls	r7, r7, #2
 8006c62:	fbb3 f3f7 	udiv	r3, r3, r7
 8006c66:	fbb3 f3f9 	udiv	r3, r3, r9
 8006c6a:	011f      	lsls	r7, r3, #4
 8006c6c:	f7ff fbb8 	bl	80063e0 <HAL_RCC_GetPCLK2Freq>
 8006c70:	6863      	ldr	r3, [r4, #4]
 8006c72:	4368      	muls	r0, r5
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	fbb0 f8f3 	udiv	r8, r0, r3
 8006c7a:	f7ff fbb1 	bl	80063e0 <HAL_RCC_GetPCLK2Freq>
 8006c7e:	6863      	ldr	r3, [r4, #4]
 8006c80:	4368      	muls	r0, r5
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c88:	fbb3 f3f9 	udiv	r3, r3, r9
 8006c8c:	fb09 8313 	mls	r3, r9, r3, r8
 8006c90:	011b      	lsls	r3, r3, #4
 8006c92:	3332      	adds	r3, #50	; 0x32
 8006c94:	fbb3 f3f9 	udiv	r3, r3, r9
 8006c98:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8006c9c:	f7ff fba0 	bl	80063e0 <HAL_RCC_GetPCLK2Freq>
 8006ca0:	6862      	ldr	r2, [r4, #4]
 8006ca2:	4368      	muls	r0, r5
 8006ca4:	0092      	lsls	r2, r2, #2
 8006ca6:	fbb0 faf2 	udiv	sl, r0, r2
 8006caa:	f7ff fb99 	bl	80063e0 <HAL_RCC_GetPCLK2Freq>
			huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006cae:	6863      	ldr	r3, [r4, #4]
 8006cb0:	4368      	muls	r0, r5
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8006cb8:	fbb3 f3f9 	udiv	r3, r3, r9
 8006cbc:	fb09 a313 	mls	r3, r9, r3, sl
 8006cc0:	011b      	lsls	r3, r3, #4
 8006cc2:	3332      	adds	r3, #50	; 0x32
 8006cc4:	fbb3 f3f9 	udiv	r3, r3, r9
 8006cc8:	f003 030f 	and.w	r3, r3, #15
 8006ccc:	ea43 0308 	orr.w	r3, r3, r8
 8006cd0:	e783      	b.n	8006bda <UART_SetConfig+0xd2>
 8006cd2:	f7ff fb75 	bl	80063c0 <HAL_RCC_GetPCLK1Freq>
 8006cd6:	6867      	ldr	r7, [r4, #4]
 8006cd8:	2519      	movs	r5, #25
 8006cda:	f04f 0964 	mov.w	r9, #100	; 0x64
 8006cde:	fb05 f300 	mul.w	r3, r5, r0
 8006ce2:	00bf      	lsls	r7, r7, #2
 8006ce4:	fbb3 f3f7 	udiv	r3, r3, r7
 8006ce8:	fbb3 f3f9 	udiv	r3, r3, r9
 8006cec:	011f      	lsls	r7, r3, #4
 8006cee:	f7ff fb67 	bl	80063c0 <HAL_RCC_GetPCLK1Freq>
 8006cf2:	6863      	ldr	r3, [r4, #4]
 8006cf4:	4368      	muls	r0, r5
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	fbb0 f8f3 	udiv	r8, r0, r3
 8006cfc:	f7ff fb60 	bl	80063c0 <HAL_RCC_GetPCLK1Freq>
 8006d00:	6863      	ldr	r3, [r4, #4]
 8006d02:	4368      	muls	r0, r5
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d0a:	fbb3 f3f9 	udiv	r3, r3, r9
 8006d0e:	fb09 8313 	mls	r3, r9, r3, r8
 8006d12:	011b      	lsls	r3, r3, #4
 8006d14:	3332      	adds	r3, #50	; 0x32
 8006d16:	fbb3 f3f9 	udiv	r3, r3, r9
 8006d1a:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8006d1e:	f7ff fb4f 	bl	80063c0 <HAL_RCC_GetPCLK1Freq>
 8006d22:	6862      	ldr	r2, [r4, #4]
 8006d24:	4368      	muls	r0, r5
 8006d26:	0092      	lsls	r2, r2, #2
 8006d28:	fbb0 faf2 	udiv	sl, r0, r2
 8006d2c:	f7ff fb48 	bl	80063c0 <HAL_RCC_GetPCLK1Freq>
 8006d30:	e7bd      	b.n	8006cae <UART_SetConfig+0x1a6>
 8006d32:	bf00      	nop
 8006d34:	40011000 	.word	0x40011000
 8006d38:	40011400 	.word	0x40011400

08006d3c <HAL_MultiProcessor_Init>:
{
 8006d3c:	b570      	push	{r4, r5, r6, lr}
 8006d3e:	460d      	mov	r5, r1
 8006d40:	4616      	mov	r6, r2
	if (huart == NULL) {
 8006d42:	4604      	mov	r4, r0
 8006d44:	2800      	cmp	r0, #0
 8006d46:	d036      	beq.n	8006db6 <HAL_MultiProcessor_Init+0x7a>
	if (huart->gState == HAL_UART_STATE_RESET) {
 8006d48:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8006d4c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006d50:	b91b      	cbnz	r3, 8006d5a <HAL_MultiProcessor_Init+0x1e>
		huart->Lock = HAL_UNLOCKED;
 8006d52:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
		HAL_UART_MspInit(huart);
 8006d56:	f001 f84f 	bl	8007df8 <HAL_UART_MspInit>
	__HAL_UART_DISABLE(huart);
 8006d5a:	6822      	ldr	r2, [r4, #0]
	huart->gState = HAL_UART_STATE_BUSY;
 8006d5c:	2324      	movs	r3, #36	; 0x24
 8006d5e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	__HAL_UART_DISABLE(huart);
 8006d62:	68d3      	ldr	r3, [r2, #12]
 8006d64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d68:	60d3      	str	r3, [r2, #12]
	UART_SetConfig(huart);
 8006d6a:	4620      	mov	r0, r4
 8006d6c:	f7ff fecc 	bl	8006b08 <UART_SetConfig>
	CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d70:	6823      	ldr	r3, [r4, #0]
 8006d72:	691a      	ldr	r2, [r3, #16]
 8006d74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d78:	611a      	str	r2, [r3, #16]
	CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d7a:	695a      	ldr	r2, [r3, #20]
 8006d7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d80:	615a      	str	r2, [r3, #20]
	CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 8006d82:	691a      	ldr	r2, [r3, #16]
 8006d84:	f022 020f 	bic.w	r2, r2, #15
 8006d88:	611a      	str	r2, [r3, #16]
	SET_BIT(huart->Instance->CR2, Address);
 8006d8a:	691a      	ldr	r2, [r3, #16]
 8006d8c:	4315      	orrs	r5, r2
 8006d8e:	611d      	str	r5, [r3, #16]
	CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 8006d90:	68da      	ldr	r2, [r3, #12]
 8006d92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d96:	60da      	str	r2, [r3, #12]
	SET_BIT(huart->Instance->CR1, WakeUpMethod);
 8006d98:	68da      	ldr	r2, [r3, #12]
 8006d9a:	4332      	orrs	r2, r6
 8006d9c:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE(huart);
 8006d9e:	68da      	ldr	r2, [r3, #12]
 8006da0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006da4:	60da      	str	r2, [r3, #12]
	huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006da6:	2000      	movs	r0, #0
	huart->gState = HAL_UART_STATE_READY;
 8006da8:	2320      	movs	r3, #32
	huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006daa:	63e0      	str	r0, [r4, #60]	; 0x3c
	huart->gState = HAL_UART_STATE_READY;
 8006dac:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	huart->RxState = HAL_UART_STATE_READY;
 8006db0:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	return HAL_OK;
 8006db4:	bd70      	pop	{r4, r5, r6, pc}
		return HAL_ERROR;
 8006db6:	2001      	movs	r0, #1
}
 8006db8:	bd70      	pop	{r4, r5, r6, pc}
	...

08006dbc <HAL_UART_Transmit_DMA>:
{
 8006dbc:	b538      	push	{r3, r4, r5, lr}
 8006dbe:	4604      	mov	r4, r0
 8006dc0:	4613      	mov	r3, r2
	if (huart->gState == HAL_UART_STATE_READY) {
 8006dc2:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8006dc6:	2a20      	cmp	r2, #32
 8006dc8:	d12a      	bne.n	8006e20 <HAL_UART_Transmit_DMA+0x64>
		if ((pData == NULL) || (Size == 0)) {
 8006dca:	b339      	cbz	r1, 8006e1c <HAL_UART_Transmit_DMA+0x60>
 8006dcc:	b333      	cbz	r3, 8006e1c <HAL_UART_Transmit_DMA+0x60>
		__HAL_LOCK(huart);
 8006dce:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8006dd2:	2a01      	cmp	r2, #1
 8006dd4:	d024      	beq.n	8006e20 <HAL_UART_Transmit_DMA+0x64>
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
		huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006ddc:	6b20      	ldr	r0, [r4, #48]	; 0x30
		huart->TxXferCount = Size;
 8006dde:	84e3      	strh	r3, [r4, #38]	; 0x26
		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006de0:	2500      	movs	r5, #0
		huart->gState = HAL_UART_STATE_BUSY_TX;
 8006de2:	2221      	movs	r2, #33	; 0x21
		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006de4:	63e5      	str	r5, [r4, #60]	; 0x3c
		huart->gState = HAL_UART_STATE_BUSY_TX;
 8006de6:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
		huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006dea:	4a0e      	ldr	r2, [pc, #56]	; (8006e24 <HAL_UART_Transmit_DMA+0x68>)
		huart->TxXferSize = Size;
 8006dec:	84a3      	strh	r3, [r4, #36]	; 0x24
		huart->pTxBuffPtr = pData;
 8006dee:	6221      	str	r1, [r4, #32]
		huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006df0:	63c2      	str	r2, [r0, #60]	; 0x3c
		huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006df2:	4a0d      	ldr	r2, [pc, #52]	; (8006e28 <HAL_UART_Transmit_DMA+0x6c>)
 8006df4:	6402      	str	r2, [r0, #64]	; 0x40
		huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006df6:	4a0d      	ldr	r2, [pc, #52]	; (8006e2c <HAL_UART_Transmit_DMA+0x70>)
 8006df8:	64c2      	str	r2, [r0, #76]	; 0x4c
		HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006dfa:	6822      	ldr	r2, [r4, #0]
		huart->hdmatx->XferAbortCallback = NULL;
 8006dfc:	6505      	str	r5, [r0, #80]	; 0x50
		HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006dfe:	3204      	adds	r2, #4
 8006e00:	f7fd fe2a 	bl	8004a58 <HAL_DMA_Start_IT>
		__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006e04:	6823      	ldr	r3, [r4, #0]
 8006e06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e0a:	601a      	str	r2, [r3, #0]
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006e0c:	695a      	ldr	r2, [r3, #20]
		__HAL_UNLOCK(huart);
 8006e0e:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006e12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006e16:	615a      	str	r2, [r3, #20]
		return HAL_OK;
 8006e18:	4628      	mov	r0, r5
 8006e1a:	bd38      	pop	{r3, r4, r5, pc}
			return HAL_ERROR;
 8006e1c:	2001      	movs	r0, #1
 8006e1e:	bd38      	pop	{r3, r4, r5, pc}
		return HAL_BUSY;
 8006e20:	2002      	movs	r0, #2
}
 8006e22:	bd38      	pop	{r3, r4, r5, pc}
 8006e24:	08006ec1 	.word	0x08006ec1
 8006e28:	08006eef 	.word	0x08006eef
 8006e2c:	08006fb3 	.word	0x08006fb3

08006e30 <HAL_UART_Receive_DMA>:
{
 8006e30:	4613      	mov	r3, r2
	if (huart->RxState == HAL_UART_STATE_READY) {
 8006e32:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 8006e36:	2a20      	cmp	r2, #32
{
 8006e38:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e3a:	4605      	mov	r5, r0
	if (huart->RxState == HAL_UART_STATE_READY) {
 8006e3c:	d138      	bne.n	8006eb0 <HAL_UART_Receive_DMA+0x80>
		if ((pData == NULL) || (Size == 0)) {
 8006e3e:	2900      	cmp	r1, #0
 8006e40:	d034      	beq.n	8006eac <HAL_UART_Receive_DMA+0x7c>
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d032      	beq.n	8006eac <HAL_UART_Receive_DMA+0x7c>
		__HAL_LOCK(huart);
 8006e46:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8006e4a:	2a01      	cmp	r2, #1
 8006e4c:	d030      	beq.n	8006eb0 <HAL_UART_Receive_DMA+0x80>
 8006e4e:	2201      	movs	r2, #1
		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e50:	2400      	movs	r4, #0
		__HAL_LOCK(huart);
 8006e52:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e56:	2222      	movs	r2, #34	; 0x22
		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e58:	63c4      	str	r4, [r0, #60]	; 0x3c
		huart->pRxBuffPtr = pData;
 8006e5a:	6281      	str	r1, [r0, #40]	; 0x28
		huart->RxXferSize = Size;
 8006e5c:	8583      	strh	r3, [r0, #44]	; 0x2c
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e5e:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
		huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006e62:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8006e64:	4a13      	ldr	r2, [pc, #76]	; (8006eb4 <HAL_UART_Receive_DMA+0x84>)
 8006e66:	63c2      	str	r2, [r0, #60]	; 0x3c
		HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8006e68:	682e      	ldr	r6, [r5, #0]
		huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006e6a:	4a13      	ldr	r2, [pc, #76]	; (8006eb8 <HAL_UART_Receive_DMA+0x88>)
 8006e6c:	6402      	str	r2, [r0, #64]	; 0x40
		huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006e6e:	4a13      	ldr	r2, [pc, #76]	; (8006ebc <HAL_UART_Receive_DMA+0x8c>)
 8006e70:	64c2      	str	r2, [r0, #76]	; 0x4c
		huart->hdmarx->XferAbortCallback = NULL;
 8006e72:	6504      	str	r4, [r0, #80]	; 0x50
		HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8006e74:	460a      	mov	r2, r1
 8006e76:	1d31      	adds	r1, r6, #4
 8006e78:	f7fd fdee 	bl	8004a58 <HAL_DMA_Start_IT>
		__HAL_UART_CLEAR_OREFLAG(huart);
 8006e7c:	682b      	ldr	r3, [r5, #0]
 8006e7e:	9401      	str	r4, [sp, #4]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	9201      	str	r2, [sp, #4]
 8006e84:	685a      	ldr	r2, [r3, #4]
 8006e86:	9201      	str	r2, [sp, #4]
 8006e88:	9a01      	ldr	r2, [sp, #4]
		SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e8a:	68da      	ldr	r2, [r3, #12]
		__HAL_UNLOCK(huart);
 8006e8c:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
		SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e94:	60da      	str	r2, [r3, #12]
		SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e96:	695a      	ldr	r2, [r3, #20]
 8006e98:	f042 0201 	orr.w	r2, r2, #1
 8006e9c:	615a      	str	r2, [r3, #20]
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e9e:	695a      	ldr	r2, [r3, #20]
 8006ea0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ea4:	615a      	str	r2, [r3, #20]
		return HAL_OK;
 8006ea6:	4620      	mov	r0, r4
}
 8006ea8:	b002      	add	sp, #8
 8006eaa:	bd70      	pop	{r4, r5, r6, pc}
			return HAL_ERROR;
 8006eac:	2001      	movs	r0, #1
 8006eae:	e7fb      	b.n	8006ea8 <HAL_UART_Receive_DMA+0x78>
		return HAL_BUSY;
 8006eb0:	2002      	movs	r0, #2
 8006eb2:	e7f9      	b.n	8006ea8 <HAL_UART_Receive_DMA+0x78>
 8006eb4:	08006ef9 	.word	0x08006ef9
 8006eb8:	08006fa7 	.word	0x08006fa7
 8006ebc:	08006fb3 	.word	0x08006fb3

08006ec0 <UART_DMATransmitCplt>:
{
 8006ec0:	b508      	push	{r3, lr}
	if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U) {
 8006ec2:	6803      	ldr	r3, [r0, #0]
	UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006ec4:	6b82      	ldr	r2, [r0, #56]	; 0x38
	if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U) {
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8006ecc:	d10a      	bne.n	8006ee4 <UART_DMATransmitCplt+0x24>
		huart->TxXferCount = 0U;
 8006ece:	84d3      	strh	r3, [r2, #38]	; 0x26
		CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006ed0:	6813      	ldr	r3, [r2, #0]
 8006ed2:	695a      	ldr	r2, [r3, #20]
 8006ed4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ed8:	615a      	str	r2, [r3, #20]
		SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006eda:	68da      	ldr	r2, [r3, #12]
 8006edc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ee0:	60da      	str	r2, [r3, #12]
 8006ee2:	bd08      	pop	{r3, pc}
		HAL_UART_TxCpltCallback(huart);
 8006ee4:	4610      	mov	r0, r2
 8006ee6:	f000 f9e7 	bl	80072b8 <HAL_UART_TxCpltCallback>
 8006eea:	bd08      	pop	{r3, pc}

08006eec <HAL_UART_TxHalfCpltCallback>:
 8006eec:	4770      	bx	lr

08006eee <UART_DMATxHalfCplt>:
{
 8006eee:	b508      	push	{r3, lr}
	HAL_UART_TxHalfCpltCallback(huart);
 8006ef0:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8006ef2:	f7ff fffb 	bl	8006eec <HAL_UART_TxHalfCpltCallback>
 8006ef6:	bd08      	pop	{r3, pc}

08006ef8 <UART_DMAReceiveCplt>:
{
 8006ef8:	b508      	push	{r3, lr}
	if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U) {
 8006efa:	6803      	ldr	r3, [r0, #0]
	UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006efc:	6b82      	ldr	r2, [r0, #56]	; 0x38
	if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U) {
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8006f04:	d110      	bne.n	8006f28 <UART_DMAReceiveCplt+0x30>
		huart->RxXferCount = 0U;
 8006f06:	85d3      	strh	r3, [r2, #46]	; 0x2e
		CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f08:	6813      	ldr	r3, [r2, #0]
 8006f0a:	68d9      	ldr	r1, [r3, #12]
 8006f0c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8006f10:	60d9      	str	r1, [r3, #12]
		CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f12:	6959      	ldr	r1, [r3, #20]
 8006f14:	f021 0101 	bic.w	r1, r1, #1
 8006f18:	6159      	str	r1, [r3, #20]
		CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f1a:	6959      	ldr	r1, [r3, #20]
 8006f1c:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8006f20:	6159      	str	r1, [r3, #20]
		huart->RxState = HAL_UART_STATE_READY;
 8006f22:	2320      	movs	r3, #32
 8006f24:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
	HAL_UART_RxCpltCallback(huart);
 8006f28:	4610      	mov	r0, r2
 8006f2a:	f000 f9db 	bl	80072e4 <HAL_UART_RxCpltCallback>
 8006f2e:	bd08      	pop	{r3, pc}

08006f30 <UART_Receive_IT>:
	if (huart->RxState == HAL_UART_STATE_BUSY_RX) {
 8006f30:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8006f34:	2b22      	cmp	r3, #34	; 0x22
{
 8006f36:	b510      	push	{r4, lr}
	if (huart->RxState == HAL_UART_STATE_BUSY_RX) {
 8006f38:	d132      	bne.n	8006fa0 <UART_Receive_IT+0x70>
		if (huart->Init.WordLength == UART_WORDLENGTH_9B) {
 8006f3a:	6883      	ldr	r3, [r0, #8]
 8006f3c:	6901      	ldr	r1, [r0, #16]
 8006f3e:	6802      	ldr	r2, [r0, #0]
 8006f40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f44:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006f46:	d11f      	bne.n	8006f88 <UART_Receive_IT+0x58>
				*tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006f48:	6852      	ldr	r2, [r2, #4]
			if (huart->Init.Parity == UART_PARITY_NONE) {
 8006f4a:	b9c9      	cbnz	r1, 8006f80 <UART_Receive_IT+0x50>
				*tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006f4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f50:	f823 2b02 	strh.w	r2, [r3], #2
				huart->pRxBuffPtr += 1U;
 8006f54:	6283      	str	r3, [r0, #40]	; 0x28
		if (--huart->RxXferCount == 0U) {
 8006f56:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8006f58:	3c01      	subs	r4, #1
 8006f5a:	b2a4      	uxth	r4, r4
 8006f5c:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8006f5e:	b96c      	cbnz	r4, 8006f7c <UART_Receive_IT+0x4c>
			CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f60:	6803      	ldr	r3, [r0, #0]
 8006f62:	68da      	ldr	r2, [r3, #12]
 8006f64:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006f68:	60da      	str	r2, [r3, #12]
			CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f6a:	695a      	ldr	r2, [r3, #20]
 8006f6c:	f022 0201 	bic.w	r2, r2, #1
 8006f70:	615a      	str	r2, [r3, #20]
			huart->RxState = HAL_UART_STATE_READY;
 8006f72:	2320      	movs	r3, #32
 8006f74:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
			HAL_UART_RxCpltCallback(huart);
 8006f78:	f000 f9b4 	bl	80072e4 <HAL_UART_RxCpltCallback>
		if (--huart->RxXferCount == 0U) {
 8006f7c:	2000      	movs	r0, #0
}
 8006f7e:	bd10      	pop	{r4, pc}
				*tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006f80:	b2d2      	uxtb	r2, r2
 8006f82:	f823 2b01 	strh.w	r2, [r3], #1
 8006f86:	e7e5      	b.n	8006f54 <UART_Receive_IT+0x24>
			if (huart->Init.Parity == UART_PARITY_NONE) {
 8006f88:	b921      	cbnz	r1, 8006f94 <UART_Receive_IT+0x64>
				*huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006f8a:	1c59      	adds	r1, r3, #1
 8006f8c:	6852      	ldr	r2, [r2, #4]
 8006f8e:	6281      	str	r1, [r0, #40]	; 0x28
				*huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006f90:	701a      	strb	r2, [r3, #0]
 8006f92:	e7e0      	b.n	8006f56 <UART_Receive_IT+0x26>
 8006f94:	6852      	ldr	r2, [r2, #4]
 8006f96:	1c59      	adds	r1, r3, #1
 8006f98:	6281      	str	r1, [r0, #40]	; 0x28
 8006f9a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006f9e:	e7f7      	b.n	8006f90 <UART_Receive_IT+0x60>
		return HAL_BUSY;
 8006fa0:	2002      	movs	r0, #2
 8006fa2:	bd10      	pop	{r4, pc}

08006fa4 <HAL_UART_RxHalfCpltCallback>:
 8006fa4:	4770      	bx	lr

08006fa6 <UART_DMARxHalfCplt>:
{
 8006fa6:	b508      	push	{r3, lr}
	HAL_UART_RxHalfCpltCallback(huart);
 8006fa8:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8006faa:	f7ff fffb 	bl	8006fa4 <HAL_UART_RxHalfCpltCallback>
 8006fae:	bd08      	pop	{r3, pc}

08006fb0 <HAL_UART_ErrorCallback>:
 8006fb0:	4770      	bx	lr

08006fb2 <UART_DMAError>:
	UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006fb2:	6b81      	ldr	r1, [r0, #56]	; 0x38
{
 8006fb4:	b508      	push	{r3, lr}
	dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006fb6:	680b      	ldr	r3, [r1, #0]
 8006fb8:	695a      	ldr	r2, [r3, #20]
	if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest) {
 8006fba:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8006fbe:	2821      	cmp	r0, #33	; 0x21
 8006fc0:	d10a      	bne.n	8006fd8 <UART_DMAError+0x26>
 8006fc2:	0612      	lsls	r2, r2, #24
 8006fc4:	d508      	bpl.n	8006fd8 <UART_DMAError+0x26>
		huart->TxXferCount = 0U;
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	84ca      	strh	r2, [r1, #38]	; 0x26
	CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006fca:	68da      	ldr	r2, [r3, #12]
 8006fcc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006fd0:	60da      	str	r2, [r3, #12]
	huart->gState = HAL_UART_STATE_READY;
 8006fd2:	2220      	movs	r2, #32
 8006fd4:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
	dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006fd8:	695b      	ldr	r3, [r3, #20]
	if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest) {
 8006fda:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8006fde:	2a22      	cmp	r2, #34	; 0x22
 8006fe0:	d106      	bne.n	8006ff0 <UART_DMAError+0x3e>
 8006fe2:	065b      	lsls	r3, r3, #25
 8006fe4:	d504      	bpl.n	8006ff0 <UART_DMAError+0x3e>
		huart->RxXferCount = 0U;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	85cb      	strh	r3, [r1, #46]	; 0x2e
		UART_EndRxTransfer(huart);
 8006fea:	4608      	mov	r0, r1
 8006fec:	f7ff fd7e 	bl	8006aec <UART_EndRxTransfer>
	huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006ff0:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8006ff2:	f043 0310 	orr.w	r3, r3, #16
 8006ff6:	63cb      	str	r3, [r1, #60]	; 0x3c
	HAL_UART_ErrorCallback(huart);
 8006ff8:	4608      	mov	r0, r1
 8006ffa:	f7ff ffd9 	bl	8006fb0 <HAL_UART_ErrorCallback>
 8006ffe:	bd08      	pop	{r3, pc}

08007000 <HAL_UART_IRQHandler>:
	uint32_t isrflags = READ_REG(huart->Instance->SR);
 8007000:	6803      	ldr	r3, [r0, #0]
 8007002:	681a      	ldr	r2, [r3, #0]
	uint32_t cr1its = READ_REG(huart->Instance->CR1);
 8007004:	68d9      	ldr	r1, [r3, #12]
{
 8007006:	b570      	push	{r4, r5, r6, lr}
	if (errorflags == RESET) {
 8007008:	0716      	lsls	r6, r2, #28
{
 800700a:	4604      	mov	r4, r0
	uint32_t cr3its = READ_REG(huart->Instance->CR3);
 800700c:	695d      	ldr	r5, [r3, #20]
	if (errorflags == RESET) {
 800700e:	d107      	bne.n	8007020 <HAL_UART_IRQHandler+0x20>
		if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET)) {
 8007010:	0696      	lsls	r6, r2, #26
 8007012:	d55a      	bpl.n	80070ca <HAL_UART_IRQHandler+0xca>
 8007014:	068d      	lsls	r5, r1, #26
 8007016:	d558      	bpl.n	80070ca <HAL_UART_IRQHandler+0xca>
}
 8007018:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			UART_Receive_IT(huart);
 800701c:	f7ff bf88 	b.w	8006f30 <UART_Receive_IT>
	if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET))) {
 8007020:	f015 0501 	ands.w	r5, r5, #1
 8007024:	d102      	bne.n	800702c <HAL_UART_IRQHandler+0x2c>
 8007026:	f411 7f90 	tst.w	r1, #288	; 0x120
 800702a:	d04e      	beq.n	80070ca <HAL_UART_IRQHandler+0xca>
		if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET)) {
 800702c:	07d3      	lsls	r3, r2, #31
 800702e:	d505      	bpl.n	800703c <HAL_UART_IRQHandler+0x3c>
 8007030:	05ce      	lsls	r6, r1, #23
			huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007032:	bf42      	ittt	mi
 8007034:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8007036:	f043 0301 	orrmi.w	r3, r3, #1
 800703a:	63e3      	strmi	r3, [r4, #60]	; 0x3c
		if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET)) {
 800703c:	0750      	lsls	r0, r2, #29
 800703e:	d504      	bpl.n	800704a <HAL_UART_IRQHandler+0x4a>
 8007040:	b11d      	cbz	r5, 800704a <HAL_UART_IRQHandler+0x4a>
			huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007042:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007044:	f043 0302 	orr.w	r3, r3, #2
 8007048:	63e3      	str	r3, [r4, #60]	; 0x3c
		if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET)) {
 800704a:	0793      	lsls	r3, r2, #30
 800704c:	d504      	bpl.n	8007058 <HAL_UART_IRQHandler+0x58>
 800704e:	b11d      	cbz	r5, 8007058 <HAL_UART_IRQHandler+0x58>
			huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007050:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007052:	f043 0304 	orr.w	r3, r3, #4
 8007056:	63e3      	str	r3, [r4, #60]	; 0x3c
		if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET)) {
 8007058:	0716      	lsls	r6, r2, #28
 800705a:	d504      	bpl.n	8007066 <HAL_UART_IRQHandler+0x66>
 800705c:	b11d      	cbz	r5, 8007066 <HAL_UART_IRQHandler+0x66>
			huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800705e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007060:	f043 0308 	orr.w	r3, r3, #8
 8007064:	63e3      	str	r3, [r4, #60]	; 0x3c
		if (huart->ErrorCode != HAL_UART_ERROR_NONE) {
 8007066:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007068:	2b00      	cmp	r3, #0
 800706a:	d066      	beq.n	800713a <HAL_UART_IRQHandler+0x13a>
			if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET)) {
 800706c:	0695      	lsls	r5, r2, #26
 800706e:	d504      	bpl.n	800707a <HAL_UART_IRQHandler+0x7a>
 8007070:	0688      	lsls	r0, r1, #26
 8007072:	d502      	bpl.n	800707a <HAL_UART_IRQHandler+0x7a>
				UART_Receive_IT(huart);
 8007074:	4620      	mov	r0, r4
 8007076:	f7ff ff5b 	bl	8006f30 <UART_Receive_IT>
			dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800707a:	6823      	ldr	r3, [r4, #0]
 800707c:	695d      	ldr	r5, [r3, #20]
			if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest) {
 800707e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007080:	0711      	lsls	r1, r2, #28
				UART_EndRxTransfer(huart);
 8007082:	4620      	mov	r0, r4
			if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest) {
 8007084:	d402      	bmi.n	800708c <HAL_UART_IRQHandler+0x8c>
 8007086:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800708a:	d01a      	beq.n	80070c2 <HAL_UART_IRQHandler+0xc2>
				UART_EndRxTransfer(huart);
 800708c:	f7ff fd2e 	bl	8006aec <UART_EndRxTransfer>
				if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8007090:	6823      	ldr	r3, [r4, #0]
 8007092:	695a      	ldr	r2, [r3, #20]
 8007094:	0652      	lsls	r2, r2, #25
 8007096:	d510      	bpl.n	80070ba <HAL_UART_IRQHandler+0xba>
					CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007098:	695a      	ldr	r2, [r3, #20]
					if (huart->hdmarx != NULL) {
 800709a:	6b60      	ldr	r0, [r4, #52]	; 0x34
					CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800709c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070a0:	615a      	str	r2, [r3, #20]
					if (huart->hdmarx != NULL) {
 80070a2:	b150      	cbz	r0, 80070ba <HAL_UART_IRQHandler+0xba>
						huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80070a4:	4b25      	ldr	r3, [pc, #148]	; (800713c <HAL_UART_IRQHandler+0x13c>)
 80070a6:	6503      	str	r3, [r0, #80]	; 0x50
						if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK) {
 80070a8:	f7fd fd14 	bl	8004ad4 <HAL_DMA_Abort_IT>
 80070ac:	2800      	cmp	r0, #0
 80070ae:	d044      	beq.n	800713a <HAL_UART_IRQHandler+0x13a>
							huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80070b0:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 80070b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
							huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80070b6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80070b8:	4718      	bx	r3
						HAL_UART_ErrorCallback(huart);
 80070ba:	4620      	mov	r0, r4
 80070bc:	f7ff ff78 	bl	8006fb0 <HAL_UART_ErrorCallback>
 80070c0:	bd70      	pop	{r4, r5, r6, pc}
				HAL_UART_ErrorCallback(huart);
 80070c2:	f7ff ff75 	bl	8006fb0 <HAL_UART_ErrorCallback>
				huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070c6:	63e5      	str	r5, [r4, #60]	; 0x3c
 80070c8:	bd70      	pop	{r4, r5, r6, pc}
	if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET)) {
 80070ca:	0616      	lsls	r6, r2, #24
 80070cc:	d527      	bpl.n	800711e <HAL_UART_IRQHandler+0x11e>
 80070ce:	060d      	lsls	r5, r1, #24
 80070d0:	d525      	bpl.n	800711e <HAL_UART_IRQHandler+0x11e>
	if (huart->gState == HAL_UART_STATE_BUSY_TX) {
 80070d2:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80070d6:	2a21      	cmp	r2, #33	; 0x21
 80070d8:	d12f      	bne.n	800713a <HAL_UART_IRQHandler+0x13a>
		if (huart->Init.WordLength == UART_WORDLENGTH_9B) {
 80070da:	68a2      	ldr	r2, [r4, #8]
 80070dc:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80070e0:	6a22      	ldr	r2, [r4, #32]
 80070e2:	d117      	bne.n	8007114 <HAL_UART_IRQHandler+0x114>
			huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80070e4:	8811      	ldrh	r1, [r2, #0]
 80070e6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80070ea:	6059      	str	r1, [r3, #4]
			if (huart->Init.Parity == UART_PARITY_NONE) {
 80070ec:	6921      	ldr	r1, [r4, #16]
 80070ee:	b979      	cbnz	r1, 8007110 <HAL_UART_IRQHandler+0x110>
				huart->pTxBuffPtr += 2U;
 80070f0:	3202      	adds	r2, #2
				huart->pTxBuffPtr += 1U;
 80070f2:	6222      	str	r2, [r4, #32]
		if (--huart->TxXferCount == 0U) {
 80070f4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80070f6:	3a01      	subs	r2, #1
 80070f8:	b292      	uxth	r2, r2
 80070fa:	84e2      	strh	r2, [r4, #38]	; 0x26
 80070fc:	b9ea      	cbnz	r2, 800713a <HAL_UART_IRQHandler+0x13a>
			CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80070fe:	68da      	ldr	r2, [r3, #12]
 8007100:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007104:	60da      	str	r2, [r3, #12]
			SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007106:	68da      	ldr	r2, [r3, #12]
 8007108:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800710c:	60da      	str	r2, [r3, #12]
 800710e:	bd70      	pop	{r4, r5, r6, pc}
				huart->pTxBuffPtr += 1U;
 8007110:	3201      	adds	r2, #1
 8007112:	e7ee      	b.n	80070f2 <HAL_UART_IRQHandler+0xf2>
			huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007114:	1c51      	adds	r1, r2, #1
 8007116:	6221      	str	r1, [r4, #32]
 8007118:	7812      	ldrb	r2, [r2, #0]
 800711a:	605a      	str	r2, [r3, #4]
 800711c:	e7ea      	b.n	80070f4 <HAL_UART_IRQHandler+0xf4>
	if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET)) {
 800711e:	0650      	lsls	r0, r2, #25
 8007120:	d50b      	bpl.n	800713a <HAL_UART_IRQHandler+0x13a>
 8007122:	064a      	lsls	r2, r1, #25
 8007124:	d509      	bpl.n	800713a <HAL_UART_IRQHandler+0x13a>
	CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007126:	68da      	ldr	r2, [r3, #12]
 8007128:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800712c:	60da      	str	r2, [r3, #12]
	huart->gState = HAL_UART_STATE_READY;
 800712e:	2320      	movs	r3, #32
 8007130:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	HAL_UART_TxCpltCallback(huart);
 8007134:	4620      	mov	r0, r4
 8007136:	f000 f8bf 	bl	80072b8 <HAL_UART_TxCpltCallback>
 800713a:	bd70      	pop	{r4, r5, r6, pc}
 800713c:	08007141 	.word	0x08007141

08007140 <UART_DMAAbortOnError>:
{
 8007140:	b508      	push	{r3, lr}
	UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007142:	6b80      	ldr	r0, [r0, #56]	; 0x38
	huart->RxXferCount = 0U;
 8007144:	2300      	movs	r3, #0
 8007146:	85c3      	strh	r3, [r0, #46]	; 0x2e
	huart->TxXferCount = 0U;
 8007148:	84c3      	strh	r3, [r0, #38]	; 0x26
	HAL_UART_ErrorCallback(huart);
 800714a:	f7ff ff31 	bl	8006fb0 <HAL_UART_ErrorCallback>
 800714e:	bd08      	pop	{r3, pc}

08007150 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8007150:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8007152:	2210      	movs	r2, #16
 8007154:	2100      	movs	r1, #0
 8007156:	4668      	mov	r0, sp
 8007158:	f001 fa0b 	bl	8008572 <memset>

	/**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800715c:	4812      	ldr	r0, [pc, #72]	; (80071a8 <MX_ADC1_Init+0x58>)
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800715e:	4b13      	ldr	r3, [pc, #76]	; (80071ac <MX_ADC1_Init+0x5c>)
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
	hadc1.Init.ScanConvMode = DISABLE;
	hadc1.Init.ContinuousConvMode = DISABLE;
	hadc1.Init.DiscontinuousConvMode = DISABLE;
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007160:	4a13      	ldr	r2, [pc, #76]	; (80071b0 <MX_ADC1_Init+0x60>)
 8007162:	6282      	str	r2, [r0, #40]	; 0x28
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007164:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8007168:	e880 0018 	stmia.w	r0, {r3, r4}
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800716c:	2300      	movs	r3, #0
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	hadc1.Init.NbrOfConversion = 1;
 800716e:	2401      	movs	r4, #1
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007170:	6083      	str	r3, [r0, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8007172:	6103      	str	r3, [r0, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8007174:	6183      	str	r3, [r0, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007176:	6203      	str	r3, [r0, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007178:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800717a:	60c3      	str	r3, [r0, #12]
	hadc1.Init.NbrOfConversion = 1;
 800717c:	61c4      	str	r4, [r0, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800717e:	6303      	str	r3, [r0, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007180:	6144      	str	r4, [r0, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8007182:	f7fd f98b 	bl	800449c <HAL_ADC_Init>
 8007186:	b108      	cbz	r0, 800718c <MX_ADC1_Init+0x3c>
		Error_Handler();
 8007188:	f000 fbb8 	bl	80078fc <Error_Handler>
	}
	/**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 800718c:	2306      	movs	r3, #6
	sConfig.Rank = 1;
 800718e:	e88d 0018 	stmia.w	sp, {r3, r4}
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8007192:	4669      	mov	r1, sp
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8007194:	2300      	movs	r3, #0
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8007196:	4804      	ldr	r0, [pc, #16]	; (80071a8 <MX_ADC1_Init+0x58>)
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8007198:	9302      	str	r3, [sp, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800719a:	f7fd fabb 	bl	8004714 <HAL_ADC_ConfigChannel>
 800719e:	b108      	cbz	r0, 80071a4 <MX_ADC1_Init+0x54>
		Error_Handler();
 80071a0:	f000 fbac 	bl	80078fc <Error_Handler>
	}
}
 80071a4:	b004      	add	sp, #16
 80071a6:	bd10      	pop	{r4, pc}
 80071a8:	20000590 	.word	0x20000590
 80071ac:	40012000 	.word	0x40012000
 80071b0:	0f000001 	.word	0x0f000001

080071b4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80071b4:	b510      	push	{r4, lr}
 80071b6:	4604      	mov	r4, r0
 80071b8:	b088      	sub	sp, #32
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80071ba:	2214      	movs	r2, #20
 80071bc:	2100      	movs	r1, #0
 80071be:	a803      	add	r0, sp, #12
 80071c0:	f001 f9d7 	bl	8008572 <memset>
	if (adcHandle->Instance == ADC1) {
 80071c4:	6822      	ldr	r2, [r4, #0]
 80071c6:	4b16      	ldr	r3, [pc, #88]	; (8007220 <HAL_ADC_MspInit+0x6c>)
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d126      	bne.n	800721a <HAL_ADC_MspInit+0x66>
		/* USER CODE BEGIN ADC1_MspInit 0 */

		/* USER CODE END ADC1_MspInit 0 */
		/* ADC1 clock enable */
		__HAL_RCC_ADC1_CLK_ENABLE();
 80071cc:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80071d0:	2400      	movs	r4, #0
 80071d2:	9401      	str	r4, [sp, #4]
 80071d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
		   PA6     ------> ADC1_IN6
		 */
		GPIO_InitStruct.Pin = ADC6_Pin;
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		HAL_GPIO_Init(ADC6_GPIO_Port, &GPIO_InitStruct);
 80071d6:	4813      	ldr	r0, [pc, #76]	; (8007224 <HAL_ADC_MspInit+0x70>)
		__HAL_RCC_ADC1_CLK_ENABLE();
 80071d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071dc:	645a      	str	r2, [r3, #68]	; 0x44
 80071de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071e0:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80071e4:	9201      	str	r2, [sp, #4]
 80071e6:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80071e8:	9402      	str	r4, [sp, #8]
 80071ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071ec:	f042 0201 	orr.w	r2, r2, #1
 80071f0:	631a      	str	r2, [r3, #48]	; 0x30
 80071f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f4:	f003 0301 	and.w	r3, r3, #1
 80071f8:	9302      	str	r3, [sp, #8]
 80071fa:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Pin = ADC6_Pin;
 80071fc:	2340      	movs	r3, #64	; 0x40
 80071fe:	9303      	str	r3, [sp, #12]
		HAL_GPIO_Init(ADC6_GPIO_Port, &GPIO_InitStruct);
 8007200:	a903      	add	r1, sp, #12
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007202:	2303      	movs	r3, #3
 8007204:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(ADC6_GPIO_Port, &GPIO_InitStruct);
 8007206:	f7fd fd31 	bl	8004c6c <HAL_GPIO_Init>

		/* ADC1 interrupt Init */
		HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800720a:	2012      	movs	r0, #18
 800720c:	4622      	mov	r2, r4
 800720e:	4621      	mov	r1, r4
 8007210:	f7fd fb2a 	bl	8004868 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(ADC_IRQn);
 8007214:	2012      	movs	r0, #18
 8007216:	f7fd fb5b 	bl	80048d0 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN ADC1_MspInit 1 */

		/* USER CODE END ADC1_MspInit 1 */
	}
}
 800721a:	b008      	add	sp, #32
 800721c:	bd10      	pop	{r4, pc}
 800721e:	bf00      	nop
 8007220:	40012000 	.word	0x40012000
 8007224:	40020000 	.word	0x40020000

08007228 <uartSendChar>:
/** @brief Sends a character to serial port
 * @param ch Character to send
 * @retval Character sent
 */
int uartSendChar(int ch)
{
 8007228:	b537      	push	{r0, r1, r2, r4, r5, lr}
	while ((uart2TXReady == 0) | (uart6TXReady == 0)) {
 800722a:	4a0f      	ldr	r2, [pc, #60]	; (8007268 <uartSendChar+0x40>)
 800722c:	490f      	ldr	r1, [pc, #60]	; (800726c <uartSendChar+0x44>)
{
 800722e:	9001      	str	r0, [sp, #4]
 8007230:	4614      	mov	r4, r2
 8007232:	460d      	mov	r5, r1
	while ((uart2TXReady == 0) | (uart6TXReady == 0)) {
 8007234:	6810      	ldr	r0, [r2, #0]
 8007236:	680b      	ldr	r3, [r1, #0]
 8007238:	2800      	cmp	r0, #0
 800723a:	d0fb      	beq.n	8007234 <uartSendChar+0xc>
 800723c:	fab3 f383 	clz	r3, r3
 8007240:	095b      	lsrs	r3, r3, #5
 8007242:	2b00      	cmp	r3, #0
 8007244:	d1f6      	bne.n	8007234 <uartSendChar+0xc>
		;
	}

	uart2TXReady = 0;
 8007246:	6013      	str	r3, [r2, #0]
	uart6TXReady = 1;
 8007248:	2201      	movs	r2, #1
 800724a:	600a      	str	r2, [r1, #0]

	// HAL_UART_Transmit_DMA(&huart6, (uint8_t *)&ch, 1);
	HAL_UART_Transmit_DMA(&huart2, (uint8_t *)&ch, 1);
 800724c:	4808      	ldr	r0, [pc, #32]	; (8007270 <uartSendChar+0x48>)
 800724e:	a901      	add	r1, sp, #4
 8007250:	f7ff fdb4 	bl	8006dbc <HAL_UART_Transmit_DMA>

	while ((uart2TXReady == 0) | (uart6TXReady == 0)) {
 8007254:	6822      	ldr	r2, [r4, #0]
 8007256:	682b      	ldr	r3, [r5, #0]
 8007258:	2a00      	cmp	r2, #0
 800725a:	d0fb      	beq.n	8007254 <uartSendChar+0x2c>
 800725c:	2b00      	cmp	r3, #0
 800725e:	d0f9      	beq.n	8007254 <uartSendChar+0x2c>
		;
	}

	return ch;
}
 8007260:	9801      	ldr	r0, [sp, #4]
 8007262:	b003      	add	sp, #12
 8007264:	bd30      	pop	{r4, r5, pc}
 8007266:	bf00      	nop
 8007268:	2000018c 	.word	0x2000018c
 800726c:	20000190 	.word	0x20000190
 8007270:	200011dc 	.word	0x200011dc

08007274 <uartReceiveChar>:
 */
int uartReceiveChar(void)
{
	uint8_t ch;

	while (uartRXReady == 0) {
 8007274:	4b0a      	ldr	r3, [pc, #40]	; (80072a0 <uartReceiveChar+0x2c>)
{
 8007276:	b513      	push	{r0, r1, r4, lr}
 8007278:	461c      	mov	r4, r3
	while (uartRXReady == 0) {
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	2a00      	cmp	r2, #0
 800727e:	d0fc      	beq.n	800727a <uartReceiveChar+0x6>
		;
	}

	uartRXReady = 0;
 8007280:	2200      	movs	r2, #0
 8007282:	601a      	str	r2, [r3, #0]

	HAL_UART_Receive_DMA(&huart6, &ch, 1);
 8007284:	f10d 0107 	add.w	r1, sp, #7
 8007288:	2201      	movs	r2, #1
 800728a:	4806      	ldr	r0, [pc, #24]	; (80072a4 <uartReceiveChar+0x30>)
 800728c:	f7ff fdd0 	bl	8006e30 <HAL_UART_Receive_DMA>

	while (uartRXReady == 0) {
 8007290:	6823      	ldr	r3, [r4, #0]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d0fc      	beq.n	8007290 <uartReceiveChar+0x1c>
		;
	}

	return ch;
}
 8007296:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800729a:	b002      	add	sp, #8
 800729c:	bd10      	pop	{r4, pc}
 800729e:	bf00      	nop
 80072a0:	20000194 	.word	0x20000194
 80072a4:	20001418 	.word	0x20001418

080072a8 <__io_putchar>:
/** @brief putchar call for standard output implementation
 * @param ch Character to print
 * @retval Character printed
 */
int __io_putchar(int ch)
{
 80072a8:	b508      	push	{r3, lr}
	uartSendChar(ch);
 80072aa:	f7ff ffbd 	bl	8007228 <uartSendChar>

	return 0;
}
 80072ae:	2000      	movs	r0, #0
 80072b0:	bd08      	pop	{r3, pc}

080072b2 <__io_getchar>:
 * @param None
 * @retval Character acquired from standard input
 */
int __io_getchar(void)
{
	return uartReceiveChar();
 80072b2:	f7ff bfdf 	b.w	8007274 <uartReceiveChar>
	...

080072b8 <HAL_UART_TxCpltCallback>:
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
	/* Set transmission flag: trasfer complete*/

	if (UartHandle->Instance == USART2) uart2TXReady = 1;
 80072b8:	6803      	ldr	r3, [r0, #0]
 80072ba:	4a06      	ldr	r2, [pc, #24]	; (80072d4 <HAL_UART_TxCpltCallback+0x1c>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d103      	bne.n	80072c8 <HAL_UART_TxCpltCallback+0x10>
 80072c0:	4b05      	ldr	r3, [pc, #20]	; (80072d8 <HAL_UART_TxCpltCallback+0x20>)
 80072c2:	2201      	movs	r2, #1
	if (UartHandle->Instance == USART6) uart6TXReady = 1;
 80072c4:	601a      	str	r2, [r3, #0]
 80072c6:	4770      	bx	lr
 80072c8:	4a04      	ldr	r2, [pc, #16]	; (80072dc <HAL_UART_TxCpltCallback+0x24>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d1fb      	bne.n	80072c6 <HAL_UART_TxCpltCallback+0xe>
 80072ce:	2201      	movs	r2, #1
 80072d0:	4b03      	ldr	r3, [pc, #12]	; (80072e0 <HAL_UART_TxCpltCallback+0x28>)
 80072d2:	e7f7      	b.n	80072c4 <HAL_UART_TxCpltCallback+0xc>
 80072d4:	40004400 	.word	0x40004400
 80072d8:	2000018c 	.word	0x2000018c
 80072dc:	40011400 	.word	0x40011400
 80072e0:	20000190 	.word	0x20000190

080072e4 <HAL_UART_RxCpltCallback>:
 * @retval None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
	/* Set transmission flag: trasfer complete*/
	uartRXReady = 1;
 80072e4:	4b01      	ldr	r3, [pc, #4]	; (80072ec <HAL_UART_RxCpltCallback+0x8>)
 80072e6:	2201      	movs	r2, #1
 80072e8:	601a      	str	r2, [r3, #0]
 80072ea:	4770      	bx	lr
 80072ec:	20000194 	.word	0x20000194

080072f0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
void MX_DMA_Init(void)
{
 80072f0:	b513      	push	{r0, r1, r4, lr}
	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80072f2:	4b24      	ldr	r3, [pc, #144]	; (8007384 <MX_DMA_Init+0x94>)
 80072f4:	2400      	movs	r4, #0
 80072f6:	9400      	str	r4, [sp, #0]
 80072f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072fa:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80072fe:	631a      	str	r2, [r3, #48]	; 0x30
 8007300:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007302:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007306:	9200      	str	r2, [sp, #0]
 8007308:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_DMA2_CLK_ENABLE();
 800730a:	9401      	str	r4, [sp, #4]
 800730c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800730e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8007312:	631a      	str	r2, [r3, #48]	; 0x30
 8007314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800731a:	4622      	mov	r2, r4
 800731c:	4621      	mov	r1, r4
	__HAL_RCC_DMA2_CLK_ENABLE();
 800731e:	9301      	str	r3, [sp, #4]
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8007320:	200b      	movs	r0, #11
	__HAL_RCC_DMA2_CLK_ENABLE();
 8007322:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8007324:	f7fd faa0 	bl	8004868 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8007328:	200b      	movs	r0, #11
 800732a:	f7fd fad1 	bl	80048d0 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800732e:	4622      	mov	r2, r4
 8007330:	4621      	mov	r1, r4
 8007332:	2010      	movs	r0, #16
 8007334:	f7fd fa98 	bl	8004868 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8007338:	2010      	movs	r0, #16
 800733a:	f7fd fac9 	bl	80048d0 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800733e:	4622      	mov	r2, r4
 8007340:	4621      	mov	r1, r4
 8007342:	2011      	movs	r0, #17
 8007344:	f7fd fa90 	bl	8004868 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8007348:	2011      	movs	r0, #17
 800734a:	f7fd fac1 	bl	80048d0 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800734e:	4622      	mov	r2, r4
 8007350:	4621      	mov	r1, r4
 8007352:	202f      	movs	r0, #47	; 0x2f
 8007354:	f7fd fa88 	bl	8004868 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8007358:	202f      	movs	r0, #47	; 0x2f
 800735a:	f7fd fab9 	bl	80048d0 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800735e:	4622      	mov	r2, r4
 8007360:	4621      	mov	r1, r4
 8007362:	2039      	movs	r0, #57	; 0x39
 8007364:	f7fd fa80 	bl	8004868 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8007368:	2039      	movs	r0, #57	; 0x39
 800736a:	f7fd fab1 	bl	80048d0 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800736e:	4622      	mov	r2, r4
 8007370:	4621      	mov	r1, r4
 8007372:	2045      	movs	r0, #69	; 0x45
 8007374:	f7fd fa78 	bl	8004868 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8007378:	2045      	movs	r0, #69	; 0x45
 800737a:	f7fd faa9 	bl	80048d0 <HAL_NVIC_EnableIRQ>
}
 800737e:	b002      	add	sp, #8
 8007380:	bd10      	pop	{r4, pc}
 8007382:	bf00      	nop
 8007384:	40023800 	.word	0x40023800

08007388 <MX_GPIO_Init>:
 * Output
 * EVENT_OUT
 * EXTI
 */
void MX_GPIO_Init(void)
{
 8007388:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800738a:	2214      	movs	r2, #20
{
 800738c:	b08b      	sub	sp, #44	; 0x2c
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800738e:	eb0d 0002 	add.w	r0, sp, r2
 8007392:	2100      	movs	r1, #0
 8007394:	f001 f8ed 	bl	8008572 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8007398:	2400      	movs	r4, #0
 800739a:	4b2b      	ldr	r3, [pc, #172]	; (8007448 <MX_GPIO_Init+0xc0>)
 800739c:	9401      	str	r4, [sp, #4]
 800739e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	__HAL_RCC_GPIOH_CLK_ENABLE();
	__HAL_RCC_GPIOA_CLK_ENABLE();
	__HAL_RCC_GPIOB_CLK_ENABLE();

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(MOTOR_ENB_GPIO_Port, MOTOR_ENB_Pin, GPIO_PIN_RESET);
 80073a0:	4d2a      	ldr	r5, [pc, #168]	; (800744c <MX_GPIO_Init+0xc4>)

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | MOTOR_ENA_Pin, GPIO_PIN_RESET);
 80073a2:	4e2b      	ldr	r6, [pc, #172]	; (8007450 <MX_GPIO_Init+0xc8>)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80073a4:	f042 0204 	orr.w	r2, r2, #4
 80073a8:	631a      	str	r2, [r3, #48]	; 0x30
 80073aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073ac:	f002 0204 	and.w	r2, r2, #4
 80073b0:	9201      	str	r2, [sp, #4]
 80073b2:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80073b4:	9402      	str	r4, [sp, #8]
 80073b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80073bc:	631a      	str	r2, [r3, #48]	; 0x30
 80073be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073c0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80073c4:	9202      	str	r2, [sp, #8]
 80073c6:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80073c8:	9403      	str	r4, [sp, #12]
 80073ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073cc:	f042 0201 	orr.w	r2, r2, #1
 80073d0:	631a      	str	r2, [r3, #48]	; 0x30
 80073d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073d4:	f002 0201 	and.w	r2, r2, #1
 80073d8:	9203      	str	r2, [sp, #12]
 80073da:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80073dc:	9404      	str	r4, [sp, #16]
 80073de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073e0:	f042 0202 	orr.w	r2, r2, #2
 80073e4:	631a      	str	r2, [r3, #48]	; 0x30
 80073e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e8:	f003 0302 	and.w	r3, r3, #2
 80073ec:	9304      	str	r3, [sp, #16]
	HAL_GPIO_WritePin(MOTOR_ENB_GPIO_Port, MOTOR_ENB_Pin, GPIO_PIN_RESET);
 80073ee:	4622      	mov	r2, r4
 80073f0:	4628      	mov	r0, r5
 80073f2:	2102      	movs	r1, #2
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80073f4:	9b04      	ldr	r3, [sp, #16]
	HAL_GPIO_WritePin(MOTOR_ENB_GPIO_Port, MOTOR_ENB_Pin, GPIO_PIN_RESET);
 80073f6:	f7fd fd15 	bl	8004e24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | MOTOR_ENA_Pin, GPIO_PIN_RESET);
 80073fa:	4622      	mov	r2, r4
 80073fc:	4630      	mov	r0, r6
 80073fe:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8007402:	f7fd fd0f 	bl	8004e24 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = B1_Pin;
 8007406:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800740a:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800740c:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800740e:	4b11      	ldr	r3, [pc, #68]	; (8007454 <MX_GPIO_Init+0xcc>)
 8007410:	9306      	str	r3, [sp, #24]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8007412:	4628      	mov	r0, r5

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = MOTOR_ENB_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007414:	2701      	movs	r7, #1
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007416:	9407      	str	r4, [sp, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8007418:	f7fd fc28 	bl	8004c6c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = MOTOR_ENB_Pin;
 800741c:	2302      	movs	r3, #2
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(MOTOR_ENB_GPIO_Port, &GPIO_InitStruct);
 800741e:	a905      	add	r1, sp, #20
 8007420:	4628      	mov	r0, r5
	GPIO_InitStruct.Pin = MOTOR_ENB_Pin;
 8007422:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007424:	9706      	str	r7, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007426:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007428:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(MOTOR_ENB_GPIO_Port, &GPIO_InitStruct);
 800742a:	f7fd fc1f 	bl	8004c6c <HAL_GPIO_Init>

	/*Configure GPIO pins : PAPin PAPin */
	GPIO_InitStruct.Pin = LD2_Pin | MOTOR_ENA_Pin;
 800742e:	f44f 6384 	mov.w	r3, #1056	; 0x420
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007432:	a905      	add	r1, sp, #20
 8007434:	4630      	mov	r0, r6
	GPIO_InitStruct.Pin = LD2_Pin | MOTOR_ENA_Pin;
 8007436:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007438:	9706      	str	r7, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800743a:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800743c:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800743e:	f7fd fc15 	bl	8004c6c <HAL_GPIO_Init>
}
 8007442:	b00b      	add	sp, #44	; 0x2c
 8007444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007446:	bf00      	nop
 8007448:	40023800 	.word	0x40023800
 800744c:	40020800 	.word	0x40020800
 8007450:	40020000 	.word	0x40020000
 8007454:	10210000 	.word	0x10210000

08007458 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8007458:	b508      	push	{r3, lr}
	hi2c1.Instance = I2C1;
 800745a:	480c      	ldr	r0, [pc, #48]	; (800748c <MX_I2C1_Init+0x34>)
	hi2c1.Init.ClockSpeed = 100000;
 800745c:	4b0c      	ldr	r3, [pc, #48]	; (8007490 <MX_I2C1_Init+0x38>)
 800745e:	f8df e034 	ldr.w	lr, [pc, #52]	; 8007494 <MX_I2C1_Init+0x3c>
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
	hi2c1.Init.OwnAddress1 = 0;
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007462:	f44f 4280 	mov.w	r2, #16384	; 0x4000
	hi2c1.Init.ClockSpeed = 100000;
 8007466:	e880 4008 	stmia.w	r0, {r3, lr}
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800746a:	2300      	movs	r3, #0
 800746c:	6083      	str	r3, [r0, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800746e:	60c3      	str	r3, [r0, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007470:	6102      	str	r2, [r0, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007472:	6143      	str	r3, [r0, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8007474:	6183      	str	r3, [r0, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007476:	61c3      	str	r3, [r0, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007478:	6203      	str	r3, [r0, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800747a:	f7fd fdd5 	bl	8005028 <HAL_I2C_Init>
 800747e:	b118      	cbz	r0, 8007488 <MX_I2C1_Init+0x30>
		Error_Handler();
	}
}
 8007480:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 8007484:	f000 ba3a 	b.w	80078fc <Error_Handler>
 8007488:	bd08      	pop	{r3, pc}
 800748a:	bf00      	nop
 800748c:	20000638 	.word	0x20000638
 8007490:	40005400 	.word	0x40005400
 8007494:	000186a0 	.word	0x000186a0

08007498 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007498:	b570      	push	{r4, r5, r6, lr}
 800749a:	4606      	mov	r6, r0
 800749c:	b088      	sub	sp, #32
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800749e:	2214      	movs	r2, #20
 80074a0:	2100      	movs	r1, #0
 80074a2:	a803      	add	r0, sp, #12
 80074a4:	f001 f865 	bl	8008572 <memset>
	if (i2cHandle->Instance == I2C1) {
 80074a8:	6832      	ldr	r2, [r6, #0]
 80074aa:	4b36      	ldr	r3, [pc, #216]	; (8007584 <HAL_I2C_MspInit+0xec>)
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d166      	bne.n	800757e <HAL_I2C_MspInit+0xe6>
		/* USER CODE BEGIN I2C1_MspInit 0 */

		/* USER CODE END I2C1_MspInit 0 */

		__HAL_RCC_GPIOB_CLK_ENABLE();
 80074b0:	2500      	movs	r5, #0
 80074b2:	4c35      	ldr	r4, [pc, #212]	; (8007588 <HAL_I2C_MspInit+0xf0>)
 80074b4:	9501      	str	r5, [sp, #4]
 80074b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
		GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
		GPIO_InitStruct.Pull = GPIO_PULLUP;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80074b8:	4834      	ldr	r0, [pc, #208]	; (800758c <HAL_I2C_MspInit+0xf4>)
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80074ba:	f043 0302 	orr.w	r3, r3, #2
 80074be:	6323      	str	r3, [r4, #48]	; 0x30
 80074c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80074c2:	f003 0302 	and.w	r3, r3, #2
 80074c6:	9301      	str	r3, [sp, #4]
 80074c8:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 80074ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80074ce:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80074d0:	2312      	movs	r3, #18
 80074d2:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 80074d4:	2301      	movs	r3, #1
 80074d6:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074d8:	2303      	movs	r3, #3
 80074da:	9306      	str	r3, [sp, #24]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80074dc:	a903      	add	r1, sp, #12
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80074de:	2304      	movs	r3, #4
 80074e0:	9307      	str	r3, [sp, #28]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80074e2:	f7fd fbc3 	bl	8004c6c <HAL_GPIO_Init>

		/* I2C1 clock enable */
		__HAL_RCC_I2C1_CLK_ENABLE();
 80074e6:	9502      	str	r5, [sp, #8]
 80074e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80074ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80074ee:	6423      	str	r3, [r4, #64]	; 0x40
 80074f0:	6c23      	ldr	r3, [r4, #64]	; 0x40

		/* I2C1 DMA Init */
		/* I2C1_RX Init */
		hdma_i2c1_rx.Instance = DMA1_Stream0;
 80074f2:	4c27      	ldr	r4, [pc, #156]	; (8007590 <HAL_I2C_MspInit+0xf8>)
		__HAL_RCC_I2C1_CLK_ENABLE();
 80074f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074f8:	9302      	str	r3, [sp, #8]
 80074fa:	9b02      	ldr	r3, [sp, #8]
		hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80074fc:	4b25      	ldr	r3, [pc, #148]	; (8007594 <HAL_I2C_MspInit+0xfc>)
		hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80074fe:	60a5      	str	r5, [r4, #8]
		hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8007500:	f04f 7c00 	mov.w	ip, #33554432	; 0x2000000
 8007504:	e884 1008 	stmia.w	r4, {r3, ip}
		hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
		hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
		hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
		hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
		hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
		if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK) {
 8007508:	4620      	mov	r0, r4
		hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800750a:	f44f 6380 	mov.w	r3, #1024	; 0x400
		hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800750e:	60e5      	str	r5, [r4, #12]
		hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007510:	6123      	str	r3, [r4, #16]
		hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007512:	6165      	str	r5, [r4, #20]
		hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007514:	61a5      	str	r5, [r4, #24]
		hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8007516:	61e5      	str	r5, [r4, #28]
		hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007518:	6225      	str	r5, [r4, #32]
		hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800751a:	6265      	str	r5, [r4, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK) {
 800751c:	f7fd fa1e 	bl	800495c <HAL_DMA_Init>
 8007520:	b108      	cbz	r0, 8007526 <HAL_I2C_MspInit+0x8e>
			Error_Handler();
 8007522:	f000 f9eb 	bl	80078fc <Error_Handler>
		}

		__HAL_LINKDMA(i2cHandle, hdmarx, hdma_i2c1_rx);
 8007526:	63b4      	str	r4, [r6, #56]	; 0x38

		/* I2C1_TX Init */
		hdma_i2c1_tx.Instance = DMA1_Stream7;
		hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
		hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007528:	4b1b      	ldr	r3, [pc, #108]	; (8007598 <HAL_I2C_MspInit+0x100>)
		__HAL_LINKDMA(i2cHandle, hdmarx, hdma_i2c1_rx);
 800752a:	63a6      	str	r6, [r4, #56]	; 0x38
		hdma_i2c1_tx.Instance = DMA1_Stream7;
 800752c:	4c1b      	ldr	r4, [pc, #108]	; (800759c <HAL_I2C_MspInit+0x104>)
		hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800752e:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8007532:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8007536:	e884 4028 	stmia.w	r4, {r3, r5, lr}
		hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
		hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800753a:	f44f 6280 	mov.w	r2, #1024	; 0x400
		hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800753e:	2300      	movs	r3, #0
		hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
		hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
		hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
		hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
		hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
		if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK) {
 8007540:	4620      	mov	r0, r4
		hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007542:	60e3      	str	r3, [r4, #12]
		hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007544:	6122      	str	r2, [r4, #16]
		hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007546:	6163      	str	r3, [r4, #20]
		hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007548:	61a3      	str	r3, [r4, #24]
		hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800754a:	61e3      	str	r3, [r4, #28]
		hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800754c:	6223      	str	r3, [r4, #32]
		hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800754e:	6263      	str	r3, [r4, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK) {
 8007550:	f7fd fa04 	bl	800495c <HAL_DMA_Init>
 8007554:	b108      	cbz	r0, 800755a <HAL_I2C_MspInit+0xc2>
			Error_Handler();
 8007556:	f000 f9d1 	bl	80078fc <Error_Handler>
		}

		__HAL_LINKDMA(i2cHandle, hdmatx, hdma_i2c1_tx);

		/* I2C1 interrupt Init */
		HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800755a:	2200      	movs	r2, #0
 800755c:	4611      	mov	r1, r2
		__HAL_LINKDMA(i2cHandle, hdmatx, hdma_i2c1_tx);
 800755e:	6374      	str	r4, [r6, #52]	; 0x34
		HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8007560:	201f      	movs	r0, #31
		__HAL_LINKDMA(i2cHandle, hdmatx, hdma_i2c1_tx);
 8007562:	63a6      	str	r6, [r4, #56]	; 0x38
		HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8007564:	f7fd f980 	bl	8004868 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8007568:	201f      	movs	r0, #31
 800756a:	f7fd f9b1 	bl	80048d0 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800756e:	2200      	movs	r2, #0
 8007570:	2020      	movs	r0, #32
 8007572:	4611      	mov	r1, r2
 8007574:	f7fd f978 	bl	8004868 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8007578:	2020      	movs	r0, #32
 800757a:	f7fd f9a9 	bl	80048d0 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN I2C1_MspInit 1 */

		/* USER CODE END I2C1_MspInit 1 */
	}
}
 800757e:	b008      	add	sp, #32
 8007580:	bd70      	pop	{r4, r5, r6, pc}
 8007582:	bf00      	nop
 8007584:	40005400 	.word	0x40005400
 8007588:	40023800 	.word	0x40023800
 800758c:	40020400 	.word	0x40020400
 8007590:	2000068c 	.word	0x2000068c
 8007594:	40026010 	.word	0x40026010
 8007598:	400260b8 	.word	0x400260b8
 800759c:	200005d8 	.word	0x200005d8

080075a0 <MeasureSensors>:
		/* USER CODE BEGIN 3 */
	}
	/* USER CODE END 3 */
}

VL53L1_RangingMeasurementData_t* MeasureSensors(void) {
 80075a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075a4:	4e1d      	ldr	r6, [pc, #116]	; (800761c <MeasureSensors+0x7c>)
		switch (ToFSensor) {
		case 0:
			Dev = &devLeft;
			break;
		case 1:
			Dev = &devCenter;
 80075a6:	f8df 9084 	ldr.w	r9, [pc, #132]	; 800762c <MeasureSensors+0x8c>
			break;
		case 2:
			Dev = &devRight;
 80075aa:	f8df a084 	ldr.w	sl, [pc, #132]	; 8007630 <MeasureSensors+0x90>
VL53L1_RangingMeasurementData_t* MeasureSensors(void) {
 80075ae:	2700      	movs	r7, #0
		switch (ToFSensor) {
 80075b0:	b2fb      	uxtb	r3, r7
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d02c      	beq.n	8007610 <MeasureSensors+0x70>
 80075b6:	2b02      	cmp	r3, #2
 80075b8:	d02d      	beq.n	8007616 <MeasureSensors+0x76>
			Dev = &devLeft;
 80075ba:	4b19      	ldr	r3, [pc, #100]	; (8007620 <MeasureSensors+0x80>)
 80075bc:	6033      	str	r3, [r6, #0]
			break;
		}

		status = VL53L1_StartMeasurement(Dev);
 80075be:	6830      	ldr	r0, [r6, #0]
 80075c0:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8007634 <MeasureSensors+0x94>
 80075c4:	f7fa fa82 	bl	8001acc <VL53L1_StartMeasurement>
 80075c8:	f8c8 0000 	str.w	r0, [r8]
		status = VL53L1_WaitMeasurementDataReady(Dev);
 80075cc:	6830      	ldr	r0, [r6, #0]
 80075ce:	f7fa faf8 	bl	8001bc2 <VL53L1_WaitMeasurementDataReady>
 80075d2:	f8c8 0000 	str.w	r0, [r8]
		if (!status) {
 80075d6:	b9a8      	cbnz	r0, 8007604 <MeasureSensors+0x64>
			status = VL53L1_GetRangingMeasurementData(Dev, &RangingData);
 80075d8:	4912      	ldr	r1, [pc, #72]	; (8007624 <MeasureSensors+0x84>)
 80075da:	6830      	ldr	r0, [r6, #0]

			RangeData[ToFSensor] = RangingData;
 80075dc:	4d11      	ldr	r5, [pc, #68]	; (8007624 <MeasureSensors+0x84>)
			status = VL53L1_GetRangingMeasurementData(Dev, &RangingData);
 80075de:	f7fa faf5 	bl	8001bcc <VL53L1_GetRangingMeasurementData>
			RangeData[ToFSensor] = RangingData;
 80075e2:	4b11      	ldr	r3, [pc, #68]	; (8007628 <MeasureSensors+0x88>)
			status = VL53L1_GetRangingMeasurementData(Dev, &RangingData);
 80075e4:	f8c8 0000 	str.w	r0, [r8]
			RangeData[ToFSensor] = RangingData;
 80075e8:	241c      	movs	r4, #28
 80075ea:	fb04 3407 	mla	r4, r4, r7, r3
 80075ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80075f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80075f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		status = VL53L1_ClearInterruptAndStartMeasurement(Dev);
 80075fa:	6830      	ldr	r0, [r6, #0]
 80075fc:	f7fa fa9d 	bl	8001b3a <VL53L1_ClearInterruptAndStartMeasurement>
 8007600:	f8c8 0000 	str.w	r0, [r8]
 8007604:	3701      	adds	r7, #1
	for (ToFSensor = 0; ToFSensor < 3; ToFSensor++) {
 8007606:	2f03      	cmp	r7, #3
 8007608:	d1d2      	bne.n	80075b0 <MeasureSensors+0x10>
		}

	}

	return RangeData;
}
 800760a:	4807      	ldr	r0, [pc, #28]	; (8007628 <MeasureSensors+0x88>)
 800760c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			Dev = &devCenter;
 8007610:	f8c6 9000 	str.w	r9, [r6]
			break;
 8007614:	e7d3      	b.n	80075be <MeasureSensors+0x1e>
			Dev = &devRight;
 8007616:	f8c6 a000 	str.w	sl, [r6]
			break;
 800761a:	e7d0      	b.n	80075be <MeasureSensors+0x1e>
 800761c:	20000198 	.word	0x20000198
 8007620:	200006ec 	.word	0x200006ec
 8007624:	200003f0 	.word	0x200003f0
 8007628:	2000039c 	.word	0x2000039c
 800762c:	20000a90 	.word	0x20000a90
 8007630:	20000e38 	.word	0x20000e38
 8007634:	2000121c 	.word	0x2000121c

08007638 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8007638:	b530      	push	{r4, r5, lr}
 800763a:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800763c:	2230      	movs	r2, #48	; 0x30
 800763e:	2100      	movs	r1, #0
 8007640:	a808      	add	r0, sp, #32
 8007642:	f000 ff96 	bl	8008572 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8007646:	2100      	movs	r1, #0
 8007648:	2214      	movs	r2, #20
 800764a:	a803      	add	r0, sp, #12
 800764c:	f000 ff91 	bl	8008572 <memset>

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8007650:	2400      	movs	r4, #0
 8007652:	4b1e      	ldr	r3, [pc, #120]	; (80076cc <SystemClock_Config+0x94>)
 8007654:	9401      	str	r4, [sp, #4]
 8007656:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007658:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800765c:	641a      	str	r2, [r3, #64]	; 0x40
 800765e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8007660:	4a1b      	ldr	r2, [pc, #108]	; (80076d0 <SystemClock_Config+0x98>)
	__HAL_RCC_PWR_CLK_ENABLE();
 8007662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007666:	9301      	str	r3, [sp, #4]
 8007668:	9b01      	ldr	r3, [sp, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800766a:	9402      	str	r4, [sp, #8]
 800766c:	6813      	ldr	r3, [r2, #0]
 800766e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007676:	6013      	str	r3, [r2, #0]
 8007678:	6813      	ldr	r3, [r2, #0]
 800767a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800767e:	9302      	str	r3, [sp, #8]
 8007680:	9b02      	ldr	r3, [sp, #8]
	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007682:	2301      	movs	r3, #1
 8007684:	9308      	str	r3, [sp, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8007686:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800768a:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800768c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007690:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8007692:	2308      	movs	r3, #8
 8007694:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8007696:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800769a:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800769c:	2304      	movs	r3, #4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800769e:	2502      	movs	r5, #2
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80076a0:	9312      	str	r3, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80076a2:	a808      	add	r0, sp, #32
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80076a4:	2307      	movs	r3, #7
 80076a6:	9313      	str	r3, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80076a8:	950e      	str	r5, [sp, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80076aa:	f7fe fc3f 	bl	8005f2c <HAL_RCC_OscConfig>
		Error_Handler();
	}
	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80076ae:	230f      	movs	r3, #15
 80076b0:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80076b2:	4629      	mov	r1, r5
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80076b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80076b8:	a803      	add	r0, sp, #12
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80076ba:	9504      	str	r5, [sp, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80076bc:	9405      	str	r4, [sp, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80076be:	9306      	str	r3, [sp, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80076c0:	9407      	str	r4, [sp, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80076c2:	f7fe fde3 	bl	800628c <HAL_RCC_ClockConfig>
		Error_Handler();
	}
}
 80076c6:	b015      	add	sp, #84	; 0x54
 80076c8:	bd30      	pop	{r4, r5, pc}
 80076ca:	bf00      	nop
 80076cc:	40023800 	.word	0x40023800
 80076d0:	40007000 	.word	0x40007000
 80076d4:	00000000 	.word	0x00000000

080076d8 <main>:
{
 80076d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076dc:	ed2d 8b02 	vpush	{d8}
	setvbuf(stdin, NULL, _IONBF, 0);
 80076e0:	4c79      	ldr	r4, [pc, #484]	; (80078c8 <main+0x1f0>)
			status = XNUCLEO53L1A1_ResetId(ToFSensor, 0);
 80076e2:	4e7a      	ldr	r6, [pc, #488]	; (80078cc <main+0x1f4>)
{
 80076e4:	b087      	sub	sp, #28
	HAL_Init();
 80076e6:	f7fc fe99 	bl	800441c <HAL_Init>
	SystemClock_Config();
 80076ea:	f7ff ffa5 	bl	8007638 <SystemClock_Config>
	MX_GPIO_Init();
 80076ee:	f7ff fe4b 	bl	8007388 <MX_GPIO_Init>
	MX_DMA_Init();
 80076f2:	f7ff fdfd 	bl	80072f0 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80076f6:	f000 fb47 	bl	8007d88 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 80076fa:	f7ff fead 	bl	8007458 <MX_I2C1_Init>
	MX_TIM2_Init();
 80076fe:	f000 fa9b 	bl	8007c38 <MX_TIM2_Init>
	MX_TIM3_Init();
 8007702:	f000 faed 	bl	8007ce0 <MX_TIM3_Init>
	MX_ADC1_Init();
 8007706:	f7ff fd23 	bl	8007150 <MX_ADC1_Init>
	MX_USART6_UART_Init();
 800770a:	f000 fb59 	bl	8007dc0 <MX_USART6_UART_Init>
	printf("\r\nConsole ready ... \r\n");
 800770e:	4870      	ldr	r0, [pc, #448]	; (80078d0 <main+0x1f8>)
 8007710:	f001 fcc4 	bl	800909c <puts>
	XNUCLEO53L1A1_Init();
 8007714:	f7fc fb7e 	bl	8003e14 <XNUCLEO53L1A1_Init>
	setvbuf(stdin, NULL, _IONBF, 0);
 8007718:	6820      	ldr	r0, [r4, #0]
 800771a:	2300      	movs	r3, #0
 800771c:	4619      	mov	r1, r3
 800771e:	2202      	movs	r2, #2
 8007720:	6840      	ldr	r0, [r0, #4]
 8007722:	f001 fcd3 	bl	80090cc <setvbuf>
	setvbuf(stdout, NULL, _IONBF, 0);
 8007726:	6820      	ldr	r0, [r4, #0]
 8007728:	2300      	movs	r3, #0
 800772a:	4619      	mov	r1, r3
 800772c:	2202      	movs	r2, #2
 800772e:	6880      	ldr	r0, [r0, #8]
 8007730:	f001 fccc 	bl	80090cc <setvbuf>
	setvbuf(stderr, NULL, _IONBF, 0);
 8007734:	6820      	ldr	r0, [r4, #0]
 8007736:	2300      	movs	r3, #0
 8007738:	2202      	movs	r2, #2
 800773a:	4619      	mov	r1, r3
 800773c:	68c0      	ldr	r0, [r0, #12]
 800773e:	f001 fcc5 	bl	80090cc <setvbuf>
	printf("\r\nConsole ready ... \r\n");
 8007742:	4863      	ldr	r0, [pc, #396]	; (80078d0 <main+0x1f8>)
 8007744:	f001 fcaa 	bl	800909c <puts>
	motor_init();
 8007748:	f000 f8ea 	bl	8007920 <motor_init>
 800774c:	2400      	movs	r4, #0
 800774e:	4635      	mov	r5, r6
			status = XNUCLEO53L1A1_ResetId(ToFSensor, 0);
 8007750:	4620      	mov	r0, r4
 8007752:	2100      	movs	r1, #0
 8007754:	f7fc fba6 	bl	8003ea4 <XNUCLEO53L1A1_ResetId>
 8007758:	3401      	adds	r4, #1
		for (ToFSensor = 0; ToFSensor < 3; ToFSensor++) {
 800775a:	2c03      	cmp	r4, #3
			status = XNUCLEO53L1A1_ResetId(ToFSensor, 0);
 800775c:	6030      	str	r0, [r6, #0]
		for (ToFSensor = 0; ToFSensor < 3; ToFSensor++) {
 800775e:	d1f7      	bne.n	8007750 <main+0x78>
 8007760:	4c5c      	ldr	r4, [pc, #368]	; (80078d4 <main+0x1fc>)
				Dev = &devCenter;
 8007762:	f8df 918c 	ldr.w	r9, [pc, #396]	; 80078f0 <main+0x218>
			printf("VL53L1X: %02X\n\r", wordData);
 8007766:	f8df 818c 	ldr.w	r8, [pc, #396]	; 80078f4 <main+0x21c>
 800776a:	2700      	movs	r7, #0
 800776c:	b2fe      	uxtb	r6, r7
			switch (ToFSensor) {
 800776e:	2e01      	cmp	r6, #1
 8007770:	d005      	beq.n	800777e <main+0xa6>
 8007772:	2e02      	cmp	r6, #2
 8007774:	f000 8096 	beq.w	80078a4 <main+0x1cc>
				Dev = &devLeft;
 8007778:	4b57      	ldr	r3, [pc, #348]	; (80078d8 <main+0x200>)
				Dev = &devRight;
 800777a:	6023      	str	r3, [r4, #0]
				break;
 800777c:	e001      	b.n	8007782 <main+0xaa>
				Dev = &devCenter;
 800777e:	f8c4 9000 	str.w	r9, [r4]
			status = XNUCLEO53L1A1_ResetId(ToFSensor, 1);
 8007782:	2101      	movs	r1, #1
 8007784:	4638      	mov	r0, r7
 8007786:	f7fc fb8d 	bl	8003ea4 <XNUCLEO53L1A1_ResetId>
 800778a:	6028      	str	r0, [r5, #0]
			Dev->comms_speed_khz = 400;
 800778c:	6820      	ldr	r0, [r4, #0]
 800778e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007792:	f8a0 339a 	strh.w	r3, [r0, #922]	; 0x39a
			Dev->I2cHandle = &hi2c1;
 8007796:	4b51      	ldr	r3, [pc, #324]	; (80078dc <main+0x204>)
 8007798:	f8c0 33a0 	str.w	r3, [r0, #928]	; 0x3a0
			Dev->comms_type = 1;
 800779c:	2301      	movs	r3, #1
 800779e:	f880 3399 	strb.w	r3, [r0, #921]	; 0x399
			Dev->I2cDevAddr = 0x52; /* default ToF sensor I2C address*/
 80077a2:	2352      	movs	r3, #82	; 0x52
			VL53L1_RdWord(Dev, 0x010F, &wordData);
 80077a4:	f10d 0216 	add.w	r2, sp, #22
			Dev->I2cDevAddr = 0x52; /* default ToF sensor I2C address*/
 80077a8:	f880 3398 	strb.w	r3, [r0, #920]	; 0x398
			VL53L1_RdWord(Dev, 0x010F, &wordData);
 80077ac:	f240 110f 	movw	r1, #271	; 0x10f
 80077b0:	f000 fc9e 	bl	80080f0 <VL53L1_RdWord>
			printf("VL53L1X: %02X\n\r", wordData);
 80077b4:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80077b8:	4640      	mov	r0, r8
 80077ba:	f001 fbfb 	bl	8008fb4 <iprintf>
			newI2C = Dev->I2cDevAddr + (ToFSensor + 1) * 2;
 80077be:	6820      	ldr	r0, [r4, #0]
 80077c0:	1c73      	adds	r3, r6, #1
 80077c2:	f890 6398 	ldrb.w	r6, [r0, #920]	; 0x398
 80077c6:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80077ca:	b2f6      	uxtb	r6, r6
			status = VL53L1_SetDeviceAddress(Dev, newI2C);
 80077cc:	4631      	mov	r1, r6
 80077ce:	f7f9 ff77 	bl	80016c0 <VL53L1_SetDeviceAddress>
 80077d2:	6028      	str	r0, [r5, #0]
			Dev->I2cDevAddr = newI2C;
 80077d4:	6820      	ldr	r0, [r4, #0]
			VL53L1_RdWord(Dev, 0x010F, &wordData);
 80077d6:	f10d 0216 	add.w	r2, sp, #22
 80077da:	f240 110f 	movw	r1, #271	; 0x10f
			Dev->I2cDevAddr = newI2C;
 80077de:	f880 6398 	strb.w	r6, [r0, #920]	; 0x398
			VL53L1_RdWord(Dev, 0x010F, &wordData);
 80077e2:	f000 fc85 	bl	80080f0 <VL53L1_RdWord>
			printf("VL53L1X: %02X\n\r", wordData);
 80077e6:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80077ea:	4640      	mov	r0, r8
 80077ec:	f001 fbe2 	bl	8008fb4 <iprintf>
			status = VL53L1_WaitDeviceBooted(Dev);
 80077f0:	6820      	ldr	r0, [r4, #0]
 80077f2:	f7f9 ff69 	bl	80016c8 <VL53L1_WaitDeviceBooted>
 80077f6:	6028      	str	r0, [r5, #0]
			status = VL53L1_DataInit(Dev);
 80077f8:	6820      	ldr	r0, [r4, #0]
 80077fa:	f7fa f912 	bl	8001a22 <VL53L1_DataInit>
 80077fe:	6028      	str	r0, [r5, #0]
			status = VL53L1_StaticInit(Dev);
 8007800:	6820      	ldr	r0, [r4, #0]
 8007802:	f7fa f849 	bl	8001898 <VL53L1_StaticInit>
			status = VL53L1_SetDistanceMode(Dev, VL53L1_DISTANCEMODE_LONG);
 8007806:	2103      	movs	r1, #3
			status = VL53L1_StaticInit(Dev);
 8007808:	6028      	str	r0, [r5, #0]
			status = VL53L1_SetDistanceMode(Dev, VL53L1_DISTANCEMODE_LONG);
 800780a:	6820      	ldr	r0, [r4, #0]
 800780c:	f7f9 ff60 	bl	80016d0 <VL53L1_SetDistanceMode>
			status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(Dev, 50000);
 8007810:	f24c 3150 	movw	r1, #50000	; 0xc350
			status = VL53L1_SetDistanceMode(Dev, VL53L1_DISTANCEMODE_LONG);
 8007814:	6028      	str	r0, [r5, #0]
			status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(Dev, 50000);
 8007816:	6820      	ldr	r0, [r4, #0]
 8007818:	f7f9 ff96 	bl	8001748 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
			status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev, 100);
 800781c:	2164      	movs	r1, #100	; 0x64
			status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(Dev, 50000);
 800781e:	6028      	str	r0, [r5, #0]
			status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev, 100);
 8007820:	6820      	ldr	r0, [r4, #0]
 8007822:	f7fa f8b1 	bl	8001988 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 8007826:	3701      	adds	r7, #1
		for (ToFSensor = 0; ToFSensor < 3; ToFSensor++) {
 8007828:	2f03      	cmp	r7, #3
			status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev, 100);
 800782a:	6028      	str	r0, [r5, #0]
		for (ToFSensor = 0; ToFSensor < 3; ToFSensor++) {
 800782c:	d19e      	bne.n	800776c <main+0x94>
				printf("%-6d|%-6d|%-6d|%-6.2f|%-6.2f|", ToFSensor, RangeDataN.RangeStatus, 0, 0.0, 0.0);
 800782e:	ed9f 8b22 	vldr	d8, [pc, #136]	; 80078b8 <main+0x1e0>
				printf("%-6d|%-6d|%-6d|%-6.2f|%-6.2f|", ToFSensor, RangeDataN.RangeStatus, RangeDataN.RangeMilliMeter,
 8007832:	a723      	add	r7, pc, #140	; (adr r7, 80078c0 <main+0x1e8>)
 8007834:	e9d7 6700 	ldrd	r6, r7, [r7]
		RangeData = MeasureSensors();
 8007838:	f7ff feb2 	bl	80075a0 <MeasureSensors>
 800783c:	4604      	mov	r4, r0
		printf("%-10lu ", HAL_GetTick());
 800783e:	f7fc fe13 	bl	8004468 <HAL_GetTick>
 8007842:	4601      	mov	r1, r0
 8007844:	4826      	ldr	r0, [pc, #152]	; (80078e0 <main+0x208>)
				printf("%-6d|%-6d|%-6d|%-6.2f|%-6.2f|", ToFSensor, RangeDataN.RangeStatus, RangeDataN.RangeMilliMeter,
 8007846:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80078f8 <main+0x220>
		printf("%-10lu ", HAL_GetTick());
 800784a:	f001 fbb3 	bl	8008fb4 <iprintf>
 800784e:	2500      	movs	r5, #0
				printf("%-6d|%-6d|%-6d|%-6.2f|%-6.2f|", ToFSensor, RangeDataN.RangeStatus, RangeDataN.RangeMilliMeter,
 8007850:	f04f 0800 	mov.w	r8, #0
			RangeDataN = (*(RangeData+ToFSensor));
 8007854:	f894 a01b 	ldrb.w	sl, [r4, #27]
			if (RangeDataN.RangeStatus == 0) {
 8007858:	f1ba 0f00 	cmp.w	sl, #0
 800785c:	d124      	bne.n	80078a8 <main+0x1d0>
				printf("%-6d|%-6d|%-6d|%-6.2f|%-6.2f|", ToFSensor, RangeDataN.RangeStatus, RangeDataN.RangeMilliMeter,
 800785e:	68e0      	ldr	r0, [r4, #12]
 8007860:	f9b4 b018 	ldrsh.w	fp, [r4, #24]
 8007864:	f7f8 fe56 	bl	8000514 <__aeabi_ui2d>
 8007868:	4632      	mov	r2, r6
 800786a:	463b      	mov	r3, r7
 800786c:	f7f8 fff2 	bl	8000854 <__aeabi_ddiv>
 8007870:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007874:	68a0      	ldr	r0, [r4, #8]
 8007876:	f7f8 fe4d 	bl	8000514 <__aeabi_ui2d>
 800787a:	464b      	mov	r3, r9
 800787c:	4642      	mov	r2, r8
 800787e:	f7f8 febf 	bl	8000600 <__aeabi_dmul>
 8007882:	e9cd 0100 	strd	r0, r1, [sp]
 8007886:	465b      	mov	r3, fp
				printf("%-6d|%-6d|%-6d|%-6.2f|%-6.2f|", ToFSensor, RangeDataN.RangeStatus, 0, 0.0, 0.0);
 8007888:	4629      	mov	r1, r5
 800788a:	4652      	mov	r2, sl
 800788c:	4815      	ldr	r0, [pc, #84]	; (80078e4 <main+0x20c>)
 800788e:	3501      	adds	r5, #1
 8007890:	f001 fb90 	bl	8008fb4 <iprintf>
		for (ToFSensor = 0; ToFSensor < 3; ToFSensor++) {
 8007894:	2d03      	cmp	r5, #3
 8007896:	f104 041c 	add.w	r4, r4, #28
 800789a:	d1db      	bne.n	8007854 <main+0x17c>
		printf("\n\r");
 800789c:	4812      	ldr	r0, [pc, #72]	; (80078e8 <main+0x210>)
 800789e:	f001 fb89 	bl	8008fb4 <iprintf>
		RangeData = MeasureSensors();
 80078a2:	e7c9      	b.n	8007838 <main+0x160>
				Dev = &devRight;
 80078a4:	4b11      	ldr	r3, [pc, #68]	; (80078ec <main+0x214>)
 80078a6:	e768      	b.n	800777a <main+0xa2>
				printf("%-6d|%-6d|%-6d|%-6.2f|%-6.2f|", ToFSensor, RangeDataN.RangeStatus, 0, 0.0, 0.0);
 80078a8:	ed8d 8b02 	vstr	d8, [sp, #8]
 80078ac:	ed8d 8b00 	vstr	d8, [sp]
 80078b0:	2300      	movs	r3, #0
 80078b2:	e7e9      	b.n	8007888 <main+0x1b0>
 80078b4:	f3af 8000 	nop.w
	...
 80078c4:	40efe700 	.word	0x40efe700
 80078c8:	200001a0 	.word	0x200001a0
 80078cc:	2000121c 	.word	0x2000121c
 80078d0:	0800abc3 	.word	0x0800abc3
 80078d4:	20000198 	.word	0x20000198
 80078d8:	200006ec 	.word	0x200006ec
 80078dc:	20000638 	.word	0x20000638
 80078e0:	0800abe9 	.word	0x0800abe9
 80078e4:	0800abf1 	.word	0x0800abf1
 80078e8:	0800abe6 	.word	0x0800abe6
 80078ec:	20000e38 	.word	0x20000e38
 80078f0:	20000a90 	.word	0x20000a90
 80078f4:	0800abd9 	.word	0x0800abd9
 80078f8:	3ef00000 	.word	0x3ef00000

080078fc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80078fc:	4770      	bx	lr

080078fe <MyFlagInterruptHandler>:
 * @brief  This function is the User handler for the flag interrupt
 * @param  None
 * @retval None
 */
void MyFlagInterruptHandler(void)
{
 80078fe:	b508      	push	{r3, lr}
	/* Code to be customised */
	/************************/
	/* Get the state of bridge A */
	uint16_t bridgeState = BSP_MotorControl_CmdGetStatus(0);
 8007900:	2000      	movs	r0, #0
 8007902:	f7fc fce7 	bl	80042d4 <BSP_MotorControl_CmdGetStatus>

	if (bridgeState == 0) {
 8007906:	b948      	cbnz	r0, 800791c <MyFlagInterruptHandler+0x1e>
		if (BSP_MotorControl_GetDeviceState(0) != INACTIVE) {
 8007908:	f7fc fcd2 	bl	80042b0 <BSP_MotorControl_GetDeviceState>
 800790c:	2808      	cmp	r0, #8
 800790e:	d005      	beq.n	800791c <MyFlagInterruptHandler+0x1e>
			/* Bridge A was disabling due to overcurrent or over temperature */
			/* When  motor was running */
			Error_Handler(0XBAD0);
 8007910:	f64b 20d0 	movw	r0, #47824	; 0xbad0
		}
	}
}
 8007914:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			Error_Handler(0XBAD0);
 8007918:	f7ff bff0 	b.w	80078fc <Error_Handler>
 800791c:	bd08      	pop	{r3, pc}
	...

08007920 <motor_init>:
{
 8007920:	b530      	push	{r4, r5, lr}
	deviceParams_t initDeviceParameters =
 8007922:	4d15      	ldr	r5, [pc, #84]	; (8007978 <motor_init+0x58>)
 8007924:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
 8007926:	b08b      	sub	sp, #44	; 0x2c
	deviceParams_t initDeviceParameters =
 8007928:	466c      	mov	r4, sp
 800792a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800792c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800792e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007930:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007934:	e884 0003 	stmia.w	r4, {r0, r1}
	BSP_MotorControl_SetNbDevices(BSP_MOTOR_CONTROL_BOARD_ID_L6206, 2);
 8007938:	2102      	movs	r1, #2
 800793a:	f641 003e 	movw	r0, #6206	; 0x183e
 800793e:	f7fc fcf7 	bl	8004330 <BSP_MotorControl_SetNbDevices>
	BSP_MotorControl_Init(BSP_MOTOR_CONTROL_BOARD_ID_L6206, &initDeviceParameters);
 8007942:	4669      	mov	r1, sp
 8007944:	f641 003e 	movw	r0, #6206	; 0x183e
 8007948:	f7fc fca4 	bl	8004294 <BSP_MotorControl_Init>
	BSP_MotorControl_SetDualFullBridgeConfig(PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B);
 800794c:	2000      	movs	r0, #0
 800794e:	f7fc fcd3 	bl	80042f8 <BSP_MotorControl_SetDualFullBridgeConfig>
	BSP_MotorControl_AttachFlagInterrupt(MyFlagInterruptHandler);
 8007952:	480a      	ldr	r0, [pc, #40]	; (800797c <motor_init+0x5c>)
 8007954:	f7fc fc92 	bl	800427c <BSP_MotorControl_AttachFlagInterrupt>
	BSP_MotorControl_AttachErrorHandler(Error_Handler);
 8007958:	4809      	ldr	r0, [pc, #36]	; (8007980 <motor_init+0x60>)
 800795a:	f7fc fc83 	bl	8004264 <BSP_MotorControl_AttachErrorHandler>
	BSP_MotorControl_SetBridgeInputPwmFreq(0, 10000);
 800795e:	f242 7110 	movw	r1, #10000	; 0x2710
 8007962:	2000      	movs	r0, #0
 8007964:	f7fc fcd6 	bl	8004314 <BSP_MotorControl_SetBridgeInputPwmFreq>
	BSP_MotorControl_SetBridgeInputPwmFreq(1, 10000);
 8007968:	f242 7110 	movw	r1, #10000	; 0x2710
 800796c:	2001      	movs	r0, #1
 800796e:	f7fc fcd1 	bl	8004314 <BSP_MotorControl_SetBridgeInputPwmFreq>
}
 8007972:	b00b      	add	sp, #44	; 0x2c
 8007974:	bd30      	pop	{r4, r5, pc}
 8007976:	bf00      	nop
 8007978:	0800ab70 	.word	0x0800ab70
 800797c:	080078ff 	.word	0x080078ff
 8007980:	080078fd 	.word	0x080078fd

08007984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void)
{
 8007984:	b507      	push	{r0, r1, r2, lr}
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8007986:	4b0e      	ldr	r3, [pc, #56]	; (80079c0 <HAL_MspInit+0x3c>)
 8007988:	2100      	movs	r1, #0
 800798a:	9100      	str	r1, [sp, #0]
 800798c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800798e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007992:	645a      	str	r2, [r3, #68]	; 0x44
 8007994:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007996:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800799a:	9200      	str	r2, [sp, #0]
 800799c:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_PWR_CLK_ENABLE();
 800799e:	9101      	str	r1, [sp, #4]
 80079a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079a2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80079a6:	641a      	str	r2, [r3, #64]	; 0x40
 80079a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079ae:	9301      	str	r3, [sp, #4]

	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80079b0:	2007      	movs	r0, #7
	__HAL_RCC_PWR_CLK_ENABLE();
 80079b2:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80079b4:	f7fc ff46 	bl	8004844 <HAL_NVIC_SetPriorityGrouping>
	/* System interrupt init*/

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 80079b8:	b003      	add	sp, #12
 80079ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80079be:	bf00      	nop
 80079c0:	40023800 	.word	0x40023800

080079c4 <NMI_Handler>:
 80079c4:	4770      	bx	lr

080079c6 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 80079c6:	e7fe      	b.n	80079c6 <HardFault_Handler>

080079c8 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 80079c8:	e7fe      	b.n	80079c8 <MemManage_Handler>

080079ca <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 80079ca:	e7fe      	b.n	80079ca <BusFault_Handler>

080079cc <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 80079cc:	e7fe      	b.n	80079cc <UsageFault_Handler>

080079ce <SVC_Handler>:
 80079ce:	4770      	bx	lr

080079d0 <DebugMon_Handler>:
 80079d0:	4770      	bx	lr

080079d2 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 80079d2:	4770      	bx	lr

080079d4 <SysTick_Handler>:
void SysTick_Handler(void)
{
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80079d4:	f7fc bd3c 	b.w	8004450 <HAL_IncTick>

080079d8 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
	/* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

	/* USER CODE END DMA1_Stream0_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80079d8:	4801      	ldr	r0, [pc, #4]	; (80079e0 <DMA1_Stream0_IRQHandler+0x8>)
 80079da:	f7fd b88d 	b.w	8004af8 <HAL_DMA_IRQHandler>
 80079de:	bf00      	nop
 80079e0:	2000068c 	.word	0x2000068c

080079e4 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
	/* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

	/* USER CODE END DMA1_Stream5_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80079e4:	4801      	ldr	r0, [pc, #4]	; (80079ec <DMA1_Stream5_IRQHandler+0x8>)
 80079e6:	f7fd b887 	b.w	8004af8 <HAL_DMA_IRQHandler>
 80079ea:	bf00      	nop
 80079ec:	20001298 	.word	0x20001298

080079f0 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
	/* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

	/* USER CODE END DMA1_Stream6_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80079f0:	4801      	ldr	r0, [pc, #4]	; (80079f8 <DMA1_Stream6_IRQHandler+0x8>)
 80079f2:	f7fd b881 	b.w	8004af8 <HAL_DMA_IRQHandler>
 80079f6:	bf00      	nop
 80079f8:	200013b8 	.word	0x200013b8

080079fc <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
	/* USER CODE BEGIN ADC_IRQn 0 */

	/* USER CODE END ADC_IRQn 0 */
	HAL_ADC_IRQHandler(&hadc1);
 80079fc:	4801      	ldr	r0, [pc, #4]	; (8007a04 <ADC_IRQHandler+0x8>)
 80079fe:	f7fc bdf4 	b.w	80045ea <HAL_ADC_IRQHandler>
 8007a02:	bf00      	nop
 8007a04:	20000590 	.word	0x20000590

08007a08 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
	/* USER CODE BEGIN TIM2_IRQn 0 */

	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 8007a08:	4801      	ldr	r0, [pc, #4]	; (8007a10 <TIM2_IRQHandler+0x8>)
 8007a0a:	f7fe be4a 	b.w	80066a2 <HAL_TIM_IRQHandler>
 8007a0e:	bf00      	nop
 8007a10:	2000125c 	.word	0x2000125c

08007a14 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
	/* USER CODE BEGIN TIM3_IRQn 0 */

	/* USER CODE END TIM3_IRQn 0 */
	HAL_TIM_IRQHandler(&htim3);
 8007a14:	4801      	ldr	r0, [pc, #4]	; (8007a1c <TIM3_IRQHandler+0x8>)
 8007a16:	f7fe be44 	b.w	80066a2 <HAL_TIM_IRQHandler>
 8007a1a:	bf00      	nop
 8007a1c:	20001220 	.word	0x20001220

08007a20 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
	/* USER CODE BEGIN I2C1_EV_IRQn 0 */

	/* USER CODE END I2C1_EV_IRQn 0 */
	HAL_I2C_EV_IRQHandler(&hi2c1);
 8007a20:	4801      	ldr	r0, [pc, #4]	; (8007a28 <I2C1_EV_IRQHandler+0x8>)
 8007a22:	f7fd be59 	b.w	80056d8 <HAL_I2C_EV_IRQHandler>
 8007a26:	bf00      	nop
 8007a28:	20000638 	.word	0x20000638

08007a2c <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
	/* USER CODE BEGIN I2C1_ER_IRQn 0 */

	/* USER CODE END I2C1_ER_IRQn 0 */
	HAL_I2C_ER_IRQHandler(&hi2c1);
 8007a2c:	4801      	ldr	r0, [pc, #4]	; (8007a34 <I2C1_ER_IRQHandler+0x8>)
 8007a2e:	f7fe b9bd 	b.w	8005dac <HAL_I2C_ER_IRQHandler>
 8007a32:	bf00      	nop
 8007a34:	20000638 	.word	0x20000638

08007a38 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
	/* USER CODE BEGIN USART2_IRQn 0 */

	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8007a38:	4801      	ldr	r0, [pc, #4]	; (8007a40 <USART2_IRQHandler+0x8>)
 8007a3a:	f7ff bae1 	b.w	8007000 <HAL_UART_IRQHandler>
 8007a3e:	bf00      	nop
 8007a40:	200011dc 	.word	0x200011dc

08007a44 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
	/* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

	/* USER CODE END DMA1_Stream7_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8007a44:	4801      	ldr	r0, [pc, #4]	; (8007a4c <DMA1_Stream7_IRQHandler+0x8>)
 8007a46:	f7fd b857 	b.w	8004af8 <HAL_DMA_IRQHandler>
 8007a4a:	bf00      	nop
 8007a4c:	200005d8 	.word	0x200005d8

08007a50 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
	/* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

	/* USER CODE END DMA2_Stream1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8007a50:	4801      	ldr	r0, [pc, #4]	; (8007a58 <DMA2_Stream1_IRQHandler+0x8>)
 8007a52:	f7fd b851 	b.w	8004af8 <HAL_DMA_IRQHandler>
 8007a56:	bf00      	nop
 8007a58:	200012f8 	.word	0x200012f8

08007a5c <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
	/* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

	/* USER CODE END DMA2_Stream6_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8007a5c:	4801      	ldr	r0, [pc, #4]	; (8007a64 <DMA2_Stream6_IRQHandler+0x8>)
 8007a5e:	f7fd b84b 	b.w	8004af8 <HAL_DMA_IRQHandler>
 8007a62:	bf00      	nop
 8007a64:	20001358 	.word	0x20001358

08007a68 <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
	/* USER CODE BEGIN USART6_IRQn 0 */

	/* USER CODE END USART6_IRQn 0 */
	HAL_UART_IRQHandler(&huart6);
 8007a68:	4801      	ldr	r0, [pc, #4]	; (8007a70 <USART6_IRQHandler+0x8>)
 8007a6a:	f7ff bac9 	b.w	8007000 <HAL_UART_IRQHandler>
 8007a6e:	bf00      	nop
 8007a70:	20001418 	.word	0x20001418

08007a74 <_read>:
	while (1) {
	}                       /* Make sure we hang here */
}

int _read(int file, char *ptr, int len)
{
 8007a74:	b570      	push	{r4, r5, r6, lr}
 8007a76:	460e      	mov	r6, r1
 8007a78:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8007a7a:	460c      	mov	r4, r1
 8007a7c:	1ba3      	subs	r3, r4, r6
 8007a7e:	429d      	cmp	r5, r3
 8007a80:	dc01      	bgt.n	8007a86 <_read+0x12>
		*ptr++ = __io_getchar();
	}

	return len;
}
 8007a82:	4628      	mov	r0, r5
 8007a84:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8007a86:	f7ff fc14 	bl	80072b2 <__io_getchar>
 8007a8a:	f804 0b01 	strb.w	r0, [r4], #1
 8007a8e:	e7f5      	b.n	8007a7c <_read+0x8>

08007a90 <_write>:

int _write(int file, char *ptr, int len)
{
 8007a90:	b570      	push	{r4, r5, r6, lr}
 8007a92:	460e      	mov	r6, r1
 8007a94:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8007a96:	460c      	mov	r4, r1
 8007a98:	1ba3      	subs	r3, r4, r6
 8007a9a:	429d      	cmp	r5, r3
 8007a9c:	dc01      	bgt.n	8007aa2 <_write+0x12>
		__io_putchar(*ptr++);
	}
	return len;
}
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8007aa2:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007aa6:	f7ff fbff 	bl	80072a8 <__io_putchar>
 8007aaa:	e7f5      	b.n	8007a98 <_write+0x8>

08007aac <_sbrk>:

caddr_t _sbrk(int incr)
{
 8007aac:	b508      	push	{r3, lr}
	extern char end asm ("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007aae:	4b0a      	ldr	r3, [pc, #40]	; (8007ad8 <_sbrk+0x2c>)
 8007ab0:	6819      	ldr	r1, [r3, #0]
{
 8007ab2:	4602      	mov	r2, r0
	if (heap_end == 0)
 8007ab4:	b909      	cbnz	r1, 8007aba <_sbrk+0xe>
		heap_end = &end;
 8007ab6:	4909      	ldr	r1, [pc, #36]	; (8007adc <_sbrk+0x30>)
 8007ab8:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8007aba:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr) {
 8007abc:	4669      	mov	r1, sp
 8007abe:	4402      	add	r2, r0
 8007ac0:	428a      	cmp	r2, r1
 8007ac2:	d906      	bls.n	8007ad2 <_sbrk+0x26>
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8007ac4:	f000 fba4 	bl	8008210 <__errno>
 8007ac8:	230c      	movs	r3, #12
 8007aca:	6003      	str	r3, [r0, #0]
		return (caddr_t)-1;
 8007acc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ad0:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8007ad2:	601a      	str	r2, [r3, #0]

	return (caddr_t)prev_heap_end;
}
 8007ad4:	bd08      	pop	{r3, pc}
 8007ad6:	bf00      	nop
 8007ad8:	2000040c 	.word	0x2000040c
 8007adc:	2000155c 	.word	0x2000155c

08007ae0 <_close>:

int _close(int file)
{
	return -1;
}
 8007ae0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ae4:	4770      	bx	lr

08007ae6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8007ae6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007aea:	604b      	str	r3, [r1, #4]
	return 0;
}
 8007aec:	2000      	movs	r0, #0
 8007aee:	4770      	bx	lr

08007af0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8007af0:	2001      	movs	r0, #1
 8007af2:	4770      	bx	lr

08007af4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8007af4:	2000      	movs	r0, #0
 8007af6:	4770      	bx	lr

08007af8 <SystemInit>:
 */
void SystemInit(void)
{
	/* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8007af8:	490f      	ldr	r1, [pc, #60]	; (8007b38 <SystemInit+0x40>)
 8007afa:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8007afe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR |= (uint32_t)0x00000001;
 8007b06:	4b0d      	ldr	r3, [pc, #52]	; (8007b3c <SystemInit+0x44>)
 8007b08:	681a      	ldr	r2, [r3, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8007b0a:	2000      	movs	r0, #0
	RCC->CR |= (uint32_t)0x00000001;
 8007b0c:	f042 0201 	orr.w	r2, r2, #1
 8007b10:	601a      	str	r2, [r3, #0]
	RCC->CFGR = 0x00000000;
 8007b12:	6098      	str	r0, [r3, #8]

	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8007b1a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007b1e:	601a      	str	r2, [r3, #0]

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x24003010;
 8007b20:	4a07      	ldr	r2, [pc, #28]	; (8007b40 <SystemInit+0x48>)
 8007b22:	605a      	str	r2, [r3, #4]

	/* Reset HSEBYP bit */
	RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007b2a:	601a      	str	r2, [r3, #0]

	/* Disable all interrupts */
	RCC->CIR = 0x00000000;
 8007b2c:	60d8      	str	r0, [r3, #12]

	/* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
	SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007b2e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007b32:	608b      	str	r3, [r1, #8]
 8007b34:	4770      	bx	lr
 8007b36:	bf00      	nop
 8007b38:	e000ed00 	.word	0xe000ed00
 8007b3c:	40023800 	.word	0x40023800
 8007b40:	24003010 	.word	0x24003010

08007b44 <HAL_TIM_Base_MspInit>:
	HAL_TIM_MspPostInit(&htim3);
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
	if (tim_baseHandle->Instance == TIM2) {
 8007b44:	6803      	ldr	r3, [r0, #0]
 8007b46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8007b4a:	b507      	push	{r0, r1, r2, lr}
	if (tim_baseHandle->Instance == TIM2) {
 8007b4c:	d116      	bne.n	8007b7c <HAL_TIM_Base_MspInit+0x38>
		/* USER CODE BEGIN TIM2_MspInit 0 */

		/* USER CODE END TIM2_MspInit 0 */
		/* TIM2 clock enable */
		__HAL_RCC_TIM2_CLK_ENABLE();
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8007b54:	9200      	str	r2, [sp, #0]
 8007b56:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007b58:	f041 0101 	orr.w	r1, r1, #1
 8007b5c:	6419      	str	r1, [r3, #64]	; 0x40
 8007b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b60:	f003 0301 	and.w	r3, r3, #1
 8007b64:	9300      	str	r3, [sp, #0]

		/* TIM2 interrupt Init */
		HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007b66:	201c      	movs	r0, #28
 8007b68:	4611      	mov	r1, r2
		__HAL_RCC_TIM2_CLK_ENABLE();
 8007b6a:	9b00      	ldr	r3, [sp, #0]
		HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007b6c:	f7fc fe7c 	bl	8004868 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007b70:	201c      	movs	r0, #28
		/* TIM3 clock enable */
		__HAL_RCC_TIM3_CLK_ENABLE();

		/* TIM3 interrupt Init */
		HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007b72:	f7fc fead 	bl	80048d0 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN TIM3_MspInit 1 */

		/* USER CODE END TIM3_MspInit 1 */
	}
}
 8007b76:	b003      	add	sp, #12
 8007b78:	f85d fb04 	ldr.w	pc, [sp], #4
	}else if (tim_baseHandle->Instance == TIM3) {
 8007b7c:	4a0a      	ldr	r2, [pc, #40]	; (8007ba8 <HAL_TIM_Base_MspInit+0x64>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d1f9      	bne.n	8007b76 <HAL_TIM_Base_MspInit+0x32>
		__HAL_RCC_TIM3_CLK_ENABLE();
 8007b82:	2200      	movs	r2, #0
 8007b84:	4b09      	ldr	r3, [pc, #36]	; (8007bac <HAL_TIM_Base_MspInit+0x68>)
 8007b86:	9201      	str	r2, [sp, #4]
 8007b88:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007b8a:	f041 0102 	orr.w	r1, r1, #2
 8007b8e:	6419      	str	r1, [r3, #64]	; 0x40
 8007b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b92:	f003 0302 	and.w	r3, r3, #2
 8007b96:	9301      	str	r3, [sp, #4]
		HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8007b98:	201d      	movs	r0, #29
 8007b9a:	4611      	mov	r1, r2
		__HAL_RCC_TIM3_CLK_ENABLE();
 8007b9c:	9b01      	ldr	r3, [sp, #4]
		HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8007b9e:	f7fc fe63 	bl	8004868 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007ba2:	201d      	movs	r0, #29
 8007ba4:	e7e5      	b.n	8007b72 <HAL_TIM_Base_MspInit+0x2e>
 8007ba6:	bf00      	nop
 8007ba8:	40000400 	.word	0x40000400
 8007bac:	40023800 	.word	0x40023800

08007bb0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007bb0:	b510      	push	{r4, lr}
 8007bb2:	4604      	mov	r4, r0
 8007bb4:	b088      	sub	sp, #32
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8007bb6:	2214      	movs	r2, #20
 8007bb8:	2100      	movs	r1, #0
 8007bba:	a803      	add	r0, sp, #12
 8007bbc:	f000 fcd9 	bl	8008572 <memset>
	if (timHandle->Instance == TIM2) {
 8007bc0:	6823      	ldr	r3, [r4, #0]
 8007bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bc6:	d117      	bne.n	8007bf8 <HAL_TIM_MspPostInit+0x48>
		/* USER CODE BEGIN TIM2_MspPostInit 0 */

		/* USER CODE END TIM2_MspPostInit 0 */
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8007bc8:	2300      	movs	r3, #0
 8007bca:	9301      	str	r3, [sp, #4]
 8007bcc:	4b16      	ldr	r3, [pc, #88]	; (8007c28 <HAL_TIM_MspPostInit+0x78>)
		GPIO_InitStruct.Pin = PWM_IN1B_TIM2CH1_Pin | PWM_IN2B_TIM2CH2_Pin;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007bce:	4817      	ldr	r0, [pc, #92]	; (8007c2c <HAL_TIM_MspPostInit+0x7c>)
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8007bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bd2:	f042 0201 	orr.w	r2, r2, #1
 8007bd6:	631a      	str	r2, [r3, #48]	; 0x30
 8007bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bda:	f003 0301 	and.w	r3, r3, #1
 8007bde:	9301      	str	r3, [sp, #4]
 8007be0:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin = PWM_IN1B_TIM2CH1_Pin | PWM_IN2B_TIM2CH2_Pin;
 8007be2:	2303      	movs	r3, #3
 8007be4:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007be6:	2302      	movs	r3, #2
 8007be8:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007bea:	2301      	movs	r3, #1
 8007bec:	9307      	str	r3, [sp, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007bee:	a903      	add	r1, sp, #12
		GPIO_InitStruct.Pin = PWM_IN1A_TIM3CH1_Pin | PWM_IN2A_TIM3CH2_Pin;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007bf0:	f7fd f83c 	bl	8004c6c <HAL_GPIO_Init>

		/* USER CODE BEGIN TIM3_MspPostInit 1 */

		/* USER CODE END TIM3_MspPostInit 1 */
	}
}
 8007bf4:	b008      	add	sp, #32
 8007bf6:	bd10      	pop	{r4, pc}
	}else if (timHandle->Instance == TIM3) {
 8007bf8:	4a0d      	ldr	r2, [pc, #52]	; (8007c30 <HAL_TIM_MspPostInit+0x80>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d1fa      	bne.n	8007bf4 <HAL_TIM_MspPostInit+0x44>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8007bfe:	2300      	movs	r3, #0
 8007c00:	9302      	str	r3, [sp, #8]
 8007c02:	4b09      	ldr	r3, [pc, #36]	; (8007c28 <HAL_TIM_MspPostInit+0x78>)
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c04:	480b      	ldr	r0, [pc, #44]	; (8007c34 <HAL_TIM_MspPostInit+0x84>)
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8007c06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c08:	f042 0202 	orr.w	r2, r2, #2
 8007c0c:	631a      	str	r2, [r3, #48]	; 0x30
 8007c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c10:	f003 0302 	and.w	r3, r3, #2
 8007c14:	9302      	str	r3, [sp, #8]
 8007c16:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Pin = PWM_IN1A_TIM3CH1_Pin | PWM_IN2A_TIM3CH2_Pin;
 8007c18:	2330      	movs	r3, #48	; 0x30
 8007c1a:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c1c:	2302      	movs	r3, #2
 8007c1e:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007c20:	9307      	str	r3, [sp, #28]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c22:	a903      	add	r1, sp, #12
 8007c24:	e7e4      	b.n	8007bf0 <HAL_TIM_MspPostInit+0x40>
 8007c26:	bf00      	nop
 8007c28:	40023800 	.word	0x40023800
 8007c2c:	40020000 	.word	0x40020000
 8007c30:	40000400 	.word	0x40000400
 8007c34:	40020400 	.word	0x40020400

08007c38 <MX_TIM2_Init>:
{
 8007c38:	b510      	push	{r4, lr}
 8007c3a:	b08e      	sub	sp, #56	; 0x38
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8007c3c:	2210      	movs	r2, #16
 8007c3e:	2100      	movs	r1, #0
 8007c40:	a803      	add	r0, sp, #12
 8007c42:	f000 fc96 	bl	8008572 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8007c46:	2400      	movs	r4, #0
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8007c48:	221c      	movs	r2, #28
 8007c4a:	4621      	mov	r1, r4
 8007c4c:	eb0d 0002 	add.w	r0, sp, r2
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8007c50:	9401      	str	r4, [sp, #4]
 8007c52:	9402      	str	r4, [sp, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8007c54:	f000 fc8d 	bl	8008572 <memset>
	htim2.Instance = TIM2;
 8007c58:	4820      	ldr	r0, [pc, #128]	; (8007cdc <MX_TIM2_Init+0xa4>)
 8007c5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	htim2.Init.Prescaler = 0;
 8007c5e:	e880 0018 	stmia.w	r0, {r3, r4}
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007c62:	6084      	str	r4, [r0, #8]
	htim2.Init.Period = 0;
 8007c64:	60c4      	str	r4, [r0, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007c66:	6104      	str	r4, [r0, #16]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8007c68:	f7fe fe0a 	bl	8006880 <HAL_TIM_Base_Init>
 8007c6c:	b108      	cbz	r0, 8007c72 <MX_TIM2_Init+0x3a>
		Error_Handler();
 8007c6e:	f7ff fe45 	bl	80078fc <Error_Handler>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007c72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8007c76:	a903      	add	r1, sp, #12
 8007c78:	4818      	ldr	r0, [pc, #96]	; (8007cdc <MX_TIM2_Init+0xa4>)
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007c7a:	9303      	str	r3, [sp, #12]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8007c7c:	f7fe fc53 	bl	8006526 <HAL_TIM_ConfigClockSource>
 8007c80:	b108      	cbz	r0, 8007c86 <MX_TIM2_Init+0x4e>
		Error_Handler();
 8007c82:	f7ff fe3b 	bl	80078fc <Error_Handler>
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8007c86:	4815      	ldr	r0, [pc, #84]	; (8007cdc <MX_TIM2_Init+0xa4>)
 8007c88:	f7fe fe14 	bl	80068b4 <HAL_TIM_PWM_Init>
 8007c8c:	b108      	cbz	r0, 8007c92 <MX_TIM2_Init+0x5a>
		Error_Handler();
 8007c8e:	f7ff fe35 	bl	80078fc <Error_Handler>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007c92:	2400      	movs	r4, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8007c94:	a901      	add	r1, sp, #4
 8007c96:	4811      	ldr	r0, [pc, #68]	; (8007cdc <MX_TIM2_Init+0xa4>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007c98:	9401      	str	r4, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007c9a:	9402      	str	r4, [sp, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8007c9c:	f7fe ff02 	bl	8006aa4 <HAL_TIMEx_MasterConfigSynchronization>
 8007ca0:	b108      	cbz	r0, 8007ca6 <MX_TIM2_Init+0x6e>
		Error_Handler();
 8007ca2:	f7ff fe2b 	bl	80078fc <Error_Handler>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007ca6:	2360      	movs	r3, #96	; 0x60
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8007ca8:	2200      	movs	r2, #0
 8007caa:	a907      	add	r1, sp, #28
 8007cac:	480b      	ldr	r0, [pc, #44]	; (8007cdc <MX_TIM2_Init+0xa4>)
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007cae:	9307      	str	r3, [sp, #28]
	sConfigOC.Pulse = 0;
 8007cb0:	9408      	str	r4, [sp, #32]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007cb2:	9409      	str	r4, [sp, #36]	; 0x24
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007cb4:	940b      	str	r4, [sp, #44]	; 0x2c
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8007cb6:	f7fe fe43 	bl	8006940 <HAL_TIM_PWM_ConfigChannel>
 8007cba:	b108      	cbz	r0, 8007cc0 <MX_TIM2_Init+0x88>
		Error_Handler();
 8007cbc:	f7ff fe1e 	bl	80078fc <Error_Handler>
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8007cc0:	2204      	movs	r2, #4
 8007cc2:	a907      	add	r1, sp, #28
 8007cc4:	4805      	ldr	r0, [pc, #20]	; (8007cdc <MX_TIM2_Init+0xa4>)
 8007cc6:	f7fe fe3b 	bl	8006940 <HAL_TIM_PWM_ConfigChannel>
 8007cca:	b108      	cbz	r0, 8007cd0 <MX_TIM2_Init+0x98>
		Error_Handler();
 8007ccc:	f7ff fe16 	bl	80078fc <Error_Handler>
	HAL_TIM_MspPostInit(&htim2);
 8007cd0:	4802      	ldr	r0, [pc, #8]	; (8007cdc <MX_TIM2_Init+0xa4>)
 8007cd2:	f7ff ff6d 	bl	8007bb0 <HAL_TIM_MspPostInit>
}
 8007cd6:	b00e      	add	sp, #56	; 0x38
 8007cd8:	bd10      	pop	{r4, pc}
 8007cda:	bf00      	nop
 8007cdc:	2000125c 	.word	0x2000125c

08007ce0 <MX_TIM3_Init>:
{
 8007ce0:	b510      	push	{r4, lr}
 8007ce2:	b08e      	sub	sp, #56	; 0x38
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8007ce4:	2210      	movs	r2, #16
 8007ce6:	2100      	movs	r1, #0
 8007ce8:	a803      	add	r0, sp, #12
 8007cea:	f000 fc42 	bl	8008572 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8007cee:	2400      	movs	r4, #0
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8007cf0:	221c      	movs	r2, #28
 8007cf2:	4621      	mov	r1, r4
 8007cf4:	eb0d 0002 	add.w	r0, sp, r2
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8007cf8:	9401      	str	r4, [sp, #4]
 8007cfa:	9402      	str	r4, [sp, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8007cfc:	f000 fc39 	bl	8008572 <memset>
	htim3.Instance = TIM3;
 8007d00:	481f      	ldr	r0, [pc, #124]	; (8007d80 <MX_TIM3_Init+0xa0>)
 8007d02:	4b20      	ldr	r3, [pc, #128]	; (8007d84 <MX_TIM3_Init+0xa4>)
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007d04:	6084      	str	r4, [r0, #8]
	htim3.Init.Prescaler = 0;
 8007d06:	e880 0018 	stmia.w	r0, {r3, r4}
	htim3.Init.Period = 0;
 8007d0a:	60c4      	str	r4, [r0, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007d0c:	6104      	str	r4, [r0, #16]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8007d0e:	f7fe fdb7 	bl	8006880 <HAL_TIM_Base_Init>
 8007d12:	b108      	cbz	r0, 8007d18 <MX_TIM3_Init+0x38>
		Error_Handler();
 8007d14:	f7ff fdf2 	bl	80078fc <Error_Handler>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007d18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8007d1c:	a903      	add	r1, sp, #12
 8007d1e:	4818      	ldr	r0, [pc, #96]	; (8007d80 <MX_TIM3_Init+0xa0>)
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007d20:	9303      	str	r3, [sp, #12]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8007d22:	f7fe fc00 	bl	8006526 <HAL_TIM_ConfigClockSource>
 8007d26:	b108      	cbz	r0, 8007d2c <MX_TIM3_Init+0x4c>
		Error_Handler();
 8007d28:	f7ff fde8 	bl	80078fc <Error_Handler>
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8007d2c:	4814      	ldr	r0, [pc, #80]	; (8007d80 <MX_TIM3_Init+0xa0>)
 8007d2e:	f7fe fdc1 	bl	80068b4 <HAL_TIM_PWM_Init>
 8007d32:	b108      	cbz	r0, 8007d38 <MX_TIM3_Init+0x58>
		Error_Handler();
 8007d34:	f7ff fde2 	bl	80078fc <Error_Handler>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007d38:	2400      	movs	r4, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8007d3a:	a901      	add	r1, sp, #4
 8007d3c:	4810      	ldr	r0, [pc, #64]	; (8007d80 <MX_TIM3_Init+0xa0>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007d3e:	9401      	str	r4, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007d40:	9402      	str	r4, [sp, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8007d42:	f7fe feaf 	bl	8006aa4 <HAL_TIMEx_MasterConfigSynchronization>
 8007d46:	b108      	cbz	r0, 8007d4c <MX_TIM3_Init+0x6c>
		Error_Handler();
 8007d48:	f7ff fdd8 	bl	80078fc <Error_Handler>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007d4c:	2360      	movs	r3, #96	; 0x60
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8007d4e:	2200      	movs	r2, #0
 8007d50:	a907      	add	r1, sp, #28
 8007d52:	480b      	ldr	r0, [pc, #44]	; (8007d80 <MX_TIM3_Init+0xa0>)
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007d54:	9307      	str	r3, [sp, #28]
	sConfigOC.Pulse = 0;
 8007d56:	9408      	str	r4, [sp, #32]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007d58:	9409      	str	r4, [sp, #36]	; 0x24
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007d5a:	940b      	str	r4, [sp, #44]	; 0x2c
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8007d5c:	f7fe fdf0 	bl	8006940 <HAL_TIM_PWM_ConfigChannel>
 8007d60:	b108      	cbz	r0, 8007d66 <MX_TIM3_Init+0x86>
		Error_Handler();
 8007d62:	f7ff fdcb 	bl	80078fc <Error_Handler>
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8007d66:	2204      	movs	r2, #4
 8007d68:	a907      	add	r1, sp, #28
 8007d6a:	4805      	ldr	r0, [pc, #20]	; (8007d80 <MX_TIM3_Init+0xa0>)
 8007d6c:	f7fe fde8 	bl	8006940 <HAL_TIM_PWM_ConfigChannel>
 8007d70:	b108      	cbz	r0, 8007d76 <MX_TIM3_Init+0x96>
		Error_Handler();
 8007d72:	f7ff fdc3 	bl	80078fc <Error_Handler>
	HAL_TIM_MspPostInit(&htim3);
 8007d76:	4802      	ldr	r0, [pc, #8]	; (8007d80 <MX_TIM3_Init+0xa0>)
 8007d78:	f7ff ff1a 	bl	8007bb0 <HAL_TIM_MspPostInit>
}
 8007d7c:	b00e      	add	sp, #56	; 0x38
 8007d7e:	bd10      	pop	{r4, pc}
 8007d80:	20001220 	.word	0x20001220
 8007d84:	40000400 	.word	0x40000400

08007d88 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8007d88:	b508      	push	{r3, lr}
	huart2.Instance = USART2;
 8007d8a:	480b      	ldr	r0, [pc, #44]	; (8007db8 <MX_USART2_UART_Init+0x30>)
	huart2.Init.BaudRate = 115200;
 8007d8c:	4b0b      	ldr	r3, [pc, #44]	; (8007dbc <MX_USART2_UART_Init+0x34>)
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007d8e:	2200      	movs	r2, #0
	huart2.Init.BaudRate = 115200;
 8007d90:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8007d94:	e880 4008 	stmia.w	r0, {r3, lr}
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.Mode = UART_MODE_TX_RX;
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
	if (HAL_MultiProcessor_Init(&huart2, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 8007d98:	4611      	mov	r1, r2
	huart2.Init.Mode = UART_MODE_TX_RX;
 8007d9a:	230c      	movs	r3, #12
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007d9c:	6082      	str	r2, [r0, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8007d9e:	60c2      	str	r2, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8007da0:	6102      	str	r2, [r0, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8007da2:	6143      	str	r3, [r0, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007da4:	6182      	str	r2, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007da6:	61c2      	str	r2, [r0, #28]
	if (HAL_MultiProcessor_Init(&huart2, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 8007da8:	f7fe ffc8 	bl	8006d3c <HAL_MultiProcessor_Init>
 8007dac:	b118      	cbz	r0, 8007db6 <MX_USART2_UART_Init+0x2e>
		Error_Handler();
	}
}
 8007dae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 8007db2:	f7ff bda3 	b.w	80078fc <Error_Handler>
 8007db6:	bd08      	pop	{r3, pc}
 8007db8:	200011dc 	.word	0x200011dc
 8007dbc:	40004400 	.word	0x40004400

08007dc0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8007dc0:	b508      	push	{r3, lr}
	huart6.Instance = USART6;
 8007dc2:	480b      	ldr	r0, [pc, #44]	; (8007df0 <MX_USART6_UART_Init+0x30>)
	huart6.Init.BaudRate = 115200;
 8007dc4:	4b0b      	ldr	r3, [pc, #44]	; (8007df4 <MX_USART6_UART_Init+0x34>)
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8007dc6:	2200      	movs	r2, #0
	huart6.Init.BaudRate = 115200;
 8007dc8:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8007dcc:	e880 4008 	stmia.w	r0, {r3, lr}
	huart6.Init.StopBits = UART_STOPBITS_1;
	huart6.Init.Parity = UART_PARITY_NONE;
	huart6.Init.Mode = UART_MODE_TX_RX;
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
	if (HAL_MultiProcessor_Init(&huart6, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 8007dd0:	4611      	mov	r1, r2
	huart6.Init.Mode = UART_MODE_TX_RX;
 8007dd2:	230c      	movs	r3, #12
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8007dd4:	6082      	str	r2, [r0, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8007dd6:	60c2      	str	r2, [r0, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8007dd8:	6102      	str	r2, [r0, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8007dda:	6143      	str	r3, [r0, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007ddc:	6182      	str	r2, [r0, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8007dde:	61c2      	str	r2, [r0, #28]
	if (HAL_MultiProcessor_Init(&huart6, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 8007de0:	f7fe ffac 	bl	8006d3c <HAL_MultiProcessor_Init>
 8007de4:	b118      	cbz	r0, 8007dee <MX_USART6_UART_Init+0x2e>
		Error_Handler();
	}
}
 8007de6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 8007dea:	f7ff bd87 	b.w	80078fc <Error_Handler>
 8007dee:	bd08      	pop	{r3, pc}
 8007df0:	20001418 	.word	0x20001418
 8007df4:	40011400 	.word	0x40011400

08007df8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8007dfc:	2214      	movs	r2, #20
{
 8007dfe:	b08a      	sub	sp, #40	; 0x28
 8007e00:	4605      	mov	r5, r0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8007e02:	2100      	movs	r1, #0
 8007e04:	eb0d 0002 	add.w	r0, sp, r2
 8007e08:	f000 fbb3 	bl	8008572 <memset>
	if (uartHandle->Instance == USART2) {
 8007e0c:	682b      	ldr	r3, [r5, #0]
 8007e0e:	4a6a      	ldr	r2, [pc, #424]	; (8007fb8 <HAL_UART_MspInit+0x1c0>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d15b      	bne.n	8007ecc <HAL_UART_MspInit+0xd4>
		/* USER CODE BEGIN USART2_MspInit 0 */

		/* USER CODE END USART2_MspInit 0 */
		/* USART2 clock enable */
		__HAL_RCC_USART2_CLK_ENABLE();
 8007e14:	2600      	movs	r6, #0
 8007e16:	4b69      	ldr	r3, [pc, #420]	; (8007fbc <HAL_UART_MspInit+0x1c4>)
 8007e18:	9600      	str	r6, [sp, #0]
 8007e1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		GPIO_InitStruct.Pin = USART_TX_Pin | USART_RX_Pin;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e1c:	4868      	ldr	r0, [pc, #416]	; (8007fc0 <HAL_UART_MspInit+0x1c8>)

		/* USART2 DMA Init */
		/* USART2_RX Init */
		hdma_usart2_rx.Instance = DMA1_Stream5;
 8007e1e:	4c69      	ldr	r4, [pc, #420]	; (8007fc4 <HAL_UART_MspInit+0x1cc>)
		__HAL_RCC_USART2_CLK_ENABLE();
 8007e20:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007e24:	641a      	str	r2, [r3, #64]	; 0x40
 8007e26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e28:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8007e2c:	9200      	str	r2, [sp, #0]
 8007e2e:	9a00      	ldr	r2, [sp, #0]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8007e30:	9601      	str	r6, [sp, #4]
 8007e32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e34:	f042 0201 	orr.w	r2, r2, #1
 8007e38:	631a      	str	r2, [r3, #48]	; 0x30
 8007e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e3c:	f003 0301 	and.w	r3, r3, #1
 8007e40:	9301      	str	r3, [sp, #4]
 8007e42:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin = USART_TX_Pin | USART_RX_Pin;
 8007e44:	230c      	movs	r3, #12
 8007e46:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e48:	2302      	movs	r3, #2
 8007e4a:	9306      	str	r3, [sp, #24]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e4c:	a905      	add	r1, sp, #20
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007e4e:	2307      	movs	r3, #7
 8007e50:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e52:	f7fc ff0b 	bl	8004c6c <HAL_GPIO_Init>
		hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8007e56:	4b5c      	ldr	r3, [pc, #368]	; (8007fc8 <HAL_UART_MspInit+0x1d0>)
		hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007e58:	60a6      	str	r6, [r4, #8]
		hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8007e5a:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
 8007e5e:	e884 0088 	stmia.w	r4, {r3, r7}
		hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
		hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
		hdma_usart2_rx.Init.Mode = DMA_NORMAL;
		hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
		hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
		if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK) {
 8007e62:	4620      	mov	r0, r4
		hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007e64:	f44f 6380 	mov.w	r3, #1024	; 0x400
		hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007e68:	60e6      	str	r6, [r4, #12]
		hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007e6a:	6123      	str	r3, [r4, #16]
		hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007e6c:	6166      	str	r6, [r4, #20]
		hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007e6e:	61a6      	str	r6, [r4, #24]
		hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8007e70:	61e6      	str	r6, [r4, #28]
		hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007e72:	6226      	str	r6, [r4, #32]
		hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007e74:	6266      	str	r6, [r4, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK) {
 8007e76:	f7fc fd71 	bl	800495c <HAL_DMA_Init>
 8007e7a:	b108      	cbz	r0, 8007e80 <HAL_UART_MspInit+0x88>
			Error_Handler();
 8007e7c:	f7ff fd3e 	bl	80078fc <Error_Handler>
		}

		__HAL_LINKDMA(uartHandle, hdmarx, hdma_usart2_rx);
 8007e80:	636c      	str	r4, [r5, #52]	; 0x34

		/* USART2_TX Init */
		hdma_usart2_tx.Instance = DMA1_Stream6;
		hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
		hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007e82:	4852      	ldr	r0, [pc, #328]	; (8007fcc <HAL_UART_MspInit+0x1d4>)
		__HAL_LINKDMA(uartHandle, hdmarx, hdma_usart2_rx);
 8007e84:	63a5      	str	r5, [r4, #56]	; 0x38
		hdma_usart2_tx.Instance = DMA1_Stream6;
 8007e86:	4c52      	ldr	r4, [pc, #328]	; (8007fd0 <HAL_UART_MspInit+0x1d8>)
		hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007e88:	2340      	movs	r3, #64	; 0x40
 8007e8a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8007e8e:	e884 000b 	stmia.w	r4, {r0, r1, r3}
		hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
		hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007e92:	f44f 6280 	mov.w	r2, #1024	; 0x400
		hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007e96:	2300      	movs	r3, #0
		hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
		hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
		hdma_usart2_tx.Init.Mode = DMA_NORMAL;
		hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
		hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
		if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK) {
 8007e98:	4620      	mov	r0, r4
		hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007e9a:	60e3      	str	r3, [r4, #12]
		hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007e9c:	6122      	str	r2, [r4, #16]
		hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007e9e:	6163      	str	r3, [r4, #20]
		hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007ea0:	61a3      	str	r3, [r4, #24]
		hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8007ea2:	61e3      	str	r3, [r4, #28]
		hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007ea4:	6223      	str	r3, [r4, #32]
		hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007ea6:	6263      	str	r3, [r4, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK) {
 8007ea8:	f7fc fd58 	bl	800495c <HAL_DMA_Init>
 8007eac:	b108      	cbz	r0, 8007eb2 <HAL_UART_MspInit+0xba>
			Error_Handler();
 8007eae:	f7ff fd25 	bl	80078fc <Error_Handler>
		}

		__HAL_LINKDMA(uartHandle, hdmatx, hdma_usart2_tx);

		/* USART2 interrupt Init */
		HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8007eb2:	2200      	movs	r2, #0
		__HAL_LINKDMA(uartHandle, hdmatx, hdma_usart2_tx);
 8007eb4:	632c      	str	r4, [r5, #48]	; 0x30
		HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8007eb6:	2026      	movs	r0, #38	; 0x26
 8007eb8:	4611      	mov	r1, r2
		__HAL_LINKDMA(uartHandle, hdmatx, hdma_usart2_tx);
 8007eba:	63a5      	str	r5, [r4, #56]	; 0x38
		HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8007ebc:	f7fc fcd4 	bl	8004868 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007ec0:	2026      	movs	r0, #38	; 0x26

		__HAL_LINKDMA(uartHandle, hdmatx, hdma_usart6_tx);

		/* USART6 interrupt Init */
		HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
		HAL_NVIC_EnableIRQ(USART6_IRQn);
 8007ec2:	f7fc fd05 	bl	80048d0 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN USART6_MspInit 1 */

		/* USER CODE END USART6_MspInit 1 */
	}
}
 8007ec6:	b00a      	add	sp, #40	; 0x28
 8007ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}else if (uartHandle->Instance == USART6) {
 8007ecc:	4a41      	ldr	r2, [pc, #260]	; (8007fd4 <HAL_UART_MspInit+0x1dc>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d1f9      	bne.n	8007ec6 <HAL_UART_MspInit+0xce>
		__HAL_RCC_USART6_CLK_ENABLE();
 8007ed2:	2600      	movs	r6, #0
 8007ed4:	4b39      	ldr	r3, [pc, #228]	; (8007fbc <HAL_UART_MspInit+0x1c4>)
 8007ed6:	9602      	str	r6, [sp, #8]
 8007ed8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
		HAL_GPIO_Init(RPI_USART6TX_GPIO_Port, &GPIO_InitStruct);
 8007eda:	483f      	ldr	r0, [pc, #252]	; (8007fd8 <HAL_UART_MspInit+0x1e0>)
		__HAL_RCC_USART6_CLK_ENABLE();
 8007edc:	f042 0220 	orr.w	r2, r2, #32
 8007ee0:	645a      	str	r2, [r3, #68]	; 0x44
 8007ee2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ee4:	f002 0220 	and.w	r2, r2, #32
 8007ee8:	9202      	str	r2, [sp, #8]
 8007eea:	9a02      	ldr	r2, [sp, #8]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8007eec:	9603      	str	r6, [sp, #12]
 8007eee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ef0:	f042 0204 	orr.w	r2, r2, #4
 8007ef4:	631a      	str	r2, [r3, #48]	; 0x30
 8007ef6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ef8:	f002 0204 	and.w	r2, r2, #4
 8007efc:	9203      	str	r2, [sp, #12]
 8007efe:	9a03      	ldr	r2, [sp, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8007f00:	9604      	str	r6, [sp, #16]
 8007f02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f04:	f042 0201 	orr.w	r2, r2, #1
 8007f08:	631a      	str	r2, [r3, #48]	; 0x30
 8007f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f0c:	f003 0301 	and.w	r3, r3, #1
 8007f10:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8007f12:	2408      	movs	r4, #8
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8007f14:	9b04      	ldr	r3, [sp, #16]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8007f16:	9409      	str	r4, [sp, #36]	; 0x24
		GPIO_InitStruct.Pin = RPI_USART6TX_Pin;
 8007f18:	2340      	movs	r3, #64	; 0x40
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f1a:	f04f 0802 	mov.w	r8, #2
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f1e:	2703      	movs	r7, #3
		HAL_GPIO_Init(RPI_USART6TX_GPIO_Port, &GPIO_InitStruct);
 8007f20:	a905      	add	r1, sp, #20
		GPIO_InitStruct.Pin = RPI_USART6TX_Pin;
 8007f22:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f24:	f8cd 8018 	str.w	r8, [sp, #24]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f28:	9708      	str	r7, [sp, #32]
		HAL_GPIO_Init(RPI_USART6TX_GPIO_Port, &GPIO_InitStruct);
 8007f2a:	f7fc fe9f 	bl	8004c6c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = RPI_USART6RX_Pin;
 8007f2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		HAL_GPIO_Init(RPI_USART6RX_GPIO_Port, &GPIO_InitStruct);
 8007f32:	4823      	ldr	r0, [pc, #140]	; (8007fc0 <HAL_UART_MspInit+0x1c8>)
		GPIO_InitStruct.Pin = RPI_USART6RX_Pin;
 8007f34:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(RPI_USART6RX_GPIO_Port, &GPIO_InitStruct);
 8007f36:	a905      	add	r1, sp, #20
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8007f38:	9409      	str	r4, [sp, #36]	; 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f3a:	f8cd 8018 	str.w	r8, [sp, #24]
		hdma_usart6_rx.Instance = DMA2_Stream1;
 8007f3e:	4c27      	ldr	r4, [pc, #156]	; (8007fdc <HAL_UART_MspInit+0x1e4>)
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f40:	9607      	str	r6, [sp, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f42:	9708      	str	r7, [sp, #32]
		HAL_GPIO_Init(RPI_USART6RX_GPIO_Port, &GPIO_InitStruct);
 8007f44:	f7fc fe92 	bl	8004c6c <HAL_GPIO_Init>
		hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8007f48:	4b25      	ldr	r3, [pc, #148]	; (8007fe0 <HAL_UART_MspInit+0x1e8>)
		hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007f4a:	60a6      	str	r6, [r4, #8]
		hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8007f4c:	f04f 6e20 	mov.w	lr, #167772160	; 0xa000000
 8007f50:	e884 4008 	stmia.w	r4, {r3, lr}
		if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK) {
 8007f54:	4620      	mov	r0, r4
		hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007f56:	f44f 6380 	mov.w	r3, #1024	; 0x400
		hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007f5a:	60e6      	str	r6, [r4, #12]
		hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007f5c:	6123      	str	r3, [r4, #16]
		hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007f5e:	6166      	str	r6, [r4, #20]
		hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007f60:	61a6      	str	r6, [r4, #24]
		hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8007f62:	61e6      	str	r6, [r4, #28]
		hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007f64:	6226      	str	r6, [r4, #32]
		hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007f66:	6266      	str	r6, [r4, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK) {
 8007f68:	f7fc fcf8 	bl	800495c <HAL_DMA_Init>
 8007f6c:	b108      	cbz	r0, 8007f72 <HAL_UART_MspInit+0x17a>
			Error_Handler();
 8007f6e:	f7ff fcc5 	bl	80078fc <Error_Handler>
		__HAL_LINKDMA(uartHandle, hdmarx, hdma_usart6_rx);
 8007f72:	636c      	str	r4, [r5, #52]	; 0x34
		hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007f74:	4b1b      	ldr	r3, [pc, #108]	; (8007fe4 <HAL_UART_MspInit+0x1ec>)
		__HAL_LINKDMA(uartHandle, hdmarx, hdma_usart6_rx);
 8007f76:	63a5      	str	r5, [r4, #56]	; 0x38
		hdma_usart6_tx.Instance = DMA2_Stream6;
 8007f78:	4c1b      	ldr	r4, [pc, #108]	; (8007fe8 <HAL_UART_MspInit+0x1f0>)
		hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007f7a:	f04f 6620 	mov.w	r6, #167772160	; 0xa000000
 8007f7e:	2740      	movs	r7, #64	; 0x40
 8007f80:	e884 00c8 	stmia.w	r4, {r3, r6, r7}
		hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007f84:	f44f 6280 	mov.w	r2, #1024	; 0x400
		hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007f88:	2300      	movs	r3, #0
		if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK) {
 8007f8a:	4620      	mov	r0, r4
		hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007f8c:	60e3      	str	r3, [r4, #12]
		hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007f8e:	6122      	str	r2, [r4, #16]
		hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007f90:	6163      	str	r3, [r4, #20]
		hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007f92:	61a3      	str	r3, [r4, #24]
		hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8007f94:	61e3      	str	r3, [r4, #28]
		hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007f96:	6223      	str	r3, [r4, #32]
		hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007f98:	6263      	str	r3, [r4, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK) {
 8007f9a:	f7fc fcdf 	bl	800495c <HAL_DMA_Init>
 8007f9e:	b108      	cbz	r0, 8007fa4 <HAL_UART_MspInit+0x1ac>
			Error_Handler();
 8007fa0:	f7ff fcac 	bl	80078fc <Error_Handler>
		HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8007fa4:	2200      	movs	r2, #0
		__HAL_LINKDMA(uartHandle, hdmatx, hdma_usart6_tx);
 8007fa6:	632c      	str	r4, [r5, #48]	; 0x30
		HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8007fa8:	2047      	movs	r0, #71	; 0x47
 8007faa:	4611      	mov	r1, r2
		__HAL_LINKDMA(uartHandle, hdmatx, hdma_usart6_tx);
 8007fac:	63a5      	str	r5, [r4, #56]	; 0x38
		HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8007fae:	f7fc fc5b 	bl	8004868 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART6_IRQn);
 8007fb2:	2047      	movs	r0, #71	; 0x47
 8007fb4:	e785      	b.n	8007ec2 <HAL_UART_MspInit+0xca>
 8007fb6:	bf00      	nop
 8007fb8:	40004400 	.word	0x40004400
 8007fbc:	40023800 	.word	0x40023800
 8007fc0:	40020000 	.word	0x40020000
 8007fc4:	20001298 	.word	0x20001298
 8007fc8:	40026088 	.word	0x40026088
 8007fcc:	400260a0 	.word	0x400260a0
 8007fd0:	200013b8 	.word	0x200013b8
 8007fd4:	40011400 	.word	0x40011400
 8007fd8:	40020800 	.word	0x40020800
 8007fdc:	200012f8 	.word	0x200012f8
 8007fe0:	40026428 	.word	0x40026428
 8007fe4:	400264a0 	.word	0x400264a0
 8007fe8:	20001358 	.word	0x20001358

08007fec <_I2CWrite>:
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count)
{
 8007fec:	b513      	push	{r0, r1, r4, lr}
	int status;
	int i2c_time_out = I2C_TIME_OUT_BASE + count * I2C_TIME_OUT_BYTE;
 8007fee:	f102 030a 	add.w	r3, r2, #10

	status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8007ff2:	f890 4398 	ldrb.w	r4, [r0, #920]	; 0x398
 8007ff6:	9300      	str	r3, [sp, #0]
 8007ff8:	f8d0 03a0 	ldr.w	r0, [r0, #928]	; 0x3a0
 8007ffc:	b293      	uxth	r3, r2
 8007ffe:	460a      	mov	r2, r1
 8008000:	4621      	mov	r1, r4
 8008002:	f7fd f87f 	bl	8005104 <HAL_I2C_Master_Transmit>
	if (status) {
		//VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
		//XNUCLEO6180XA1_I2C1_Init(&hi2c1);
	}
	return status;
}
 8008006:	b002      	add	sp, #8
 8008008:	bd10      	pop	{r4, pc}

0800800a <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count)
{
 800800a:	b513      	push	{r0, r1, r4, lr}
	int status;
	int i2c_time_out = I2C_TIME_OUT_BASE + count * I2C_TIME_OUT_BYTE;
 800800c:	f102 030a 	add.w	r3, r2, #10

	status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr | 1, pdata, count, i2c_time_out);
 8008010:	f890 4398 	ldrb.w	r4, [r0, #920]	; 0x398
 8008014:	9300      	str	r3, [sp, #0]
 8008016:	f8d0 03a0 	ldr.w	r0, [r0, #928]	; 0x3a0
 800801a:	b293      	uxth	r3, r2
 800801c:	460a      	mov	r2, r1
 800801e:	f044 0101 	orr.w	r1, r4, #1
 8008022:	f7fd f945 	bl	80052b0 <HAL_I2C_Master_Receive>
	if (status) {
		//VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
		//XNUCLEO6180XA1_I2C1_Init(&hi2c1);
	}
	return status;
}
 8008026:	b002      	add	sp, #8
 8008028:	bd10      	pop	{r4, pc}
	...

0800802c <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count)
{
	int status_int;
	VL53L1_Error Status = VL53L1_ERROR_NONE;
	if (count > sizeof(_I2CBuffer) - 1) {
 800802c:	2bff      	cmp	r3, #255	; 0xff
{
 800802e:	b570      	push	{r4, r5, r6, lr}
 8008030:	4606      	mov	r6, r0
 8008032:	461d      	mov	r5, r3
 8008034:	4610      	mov	r0, r2
	if (count > sizeof(_I2CBuffer) - 1) {
 8008036:	d813      	bhi.n	8008060 <VL53L1_WriteMulti+0x34>
		return VL53L1_ERROR_INVALID_PARAMS;
	}
	_I2CBuffer[0] = index >> 8;
 8008038:	4c0b      	ldr	r4, [pc, #44]	; (8008068 <VL53L1_WriteMulti+0x3c>)
 800803a:	0a0b      	lsrs	r3, r1, #8
	_I2CBuffer[1] = index & 0xFF;
 800803c:	7061      	strb	r1, [r4, #1]
	memcpy(&_I2CBuffer[2], pdata, count);
 800803e:	462a      	mov	r2, r5
 8008040:	4601      	mov	r1, r0
 8008042:	1ca0      	adds	r0, r4, #2
	_I2CBuffer[0] = index >> 8;
 8008044:	7023      	strb	r3, [r4, #0]
	memcpy(&_I2CBuffer[2], pdata, count);
 8008046:	f000 fa89 	bl	800855c <memcpy>
	VL53L1_GetI2cBus();
	status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 800804a:	1caa      	adds	r2, r5, #2
 800804c:	4621      	mov	r1, r4
 800804e:	4630      	mov	r0, r6
 8008050:	f7ff ffcc 	bl	8007fec <_I2CWrite>
	if (status_int != 0) {
		Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008054:	2800      	cmp	r0, #0
 8008056:	bf0c      	ite	eq
 8008058:	2000      	moveq	r0, #0
 800805a:	f06f 000c 	mvnne.w	r0, #12
 800805e:	bd70      	pop	{r4, r5, r6, pc}
		return VL53L1_ERROR_INVALID_PARAMS;
 8008060:	f06f 0003 	mvn.w	r0, #3
	}
	VL53L1_PutI2cBus();
	return Status;
}
 8008064:	bd70      	pop	{r4, r5, r6, pc}
 8008066:	bf00      	nop
 8008068:	20001458 	.word	0x20001458

0800806c <VL53L1_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count)
{
 800806c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800806e:	460c      	mov	r4, r1
	VL53L1_Error Status = VL53L1_ERROR_NONE;
	int32_t status_int;

	_I2CBuffer[0] = index >> 8;
 8008070:	4909      	ldr	r1, [pc, #36]	; (8008098 <VL53L1_ReadMulti+0x2c>)
{
 8008072:	4616      	mov	r6, r2
 8008074:	461f      	mov	r7, r3
	_I2CBuffer[1] = index & 0xFF;
	VL53L1_GetI2cBus();
	status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8008076:	2202      	movs	r2, #2
	_I2CBuffer[0] = index >> 8;
 8008078:	0a23      	lsrs	r3, r4, #8
{
 800807a:	4605      	mov	r5, r0
	_I2CBuffer[0] = index >> 8;
 800807c:	700b      	strb	r3, [r1, #0]
	_I2CBuffer[1] = index & 0xFF;
 800807e:	704c      	strb	r4, [r1, #1]
	status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8008080:	f7ff ffb4 	bl	8007fec <_I2CWrite>
	if (status_int != 0) {
 8008084:	b928      	cbnz	r0, 8008092 <VL53L1_ReadMulti+0x26>
		Status = VL53L1_ERROR_CONTROL_INTERFACE;
		goto done;
	}
	status_int = _I2CRead(Dev, pdata, count);
 8008086:	463a      	mov	r2, r7
 8008088:	4631      	mov	r1, r6
 800808a:	4628      	mov	r0, r5
 800808c:	f7ff ffbd 	bl	800800a <_I2CRead>
	if (status_int != 0) {
 8008090:	b108      	cbz	r0, 8008096 <VL53L1_ReadMulti+0x2a>
		Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008092:	f06f 000c 	mvn.w	r0, #12
	}
 done:
	VL53L1_PutI2cBus();
	return Status;
}
 8008096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008098:	20001458 	.word	0x20001458

0800809c <VL53L1_WrByte>:
VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data)
{
	VL53L1_Error Status = VL53L1_ERROR_NONE;
	int32_t status_int;

	_I2CBuffer[0] = index >> 8;
 800809c:	4b07      	ldr	r3, [pc, #28]	; (80080bc <VL53L1_WrByte+0x20>)
{
 800809e:	b510      	push	{r4, lr}
	_I2CBuffer[0] = index >> 8;
 80080a0:	0a0c      	lsrs	r4, r1, #8
	_I2CBuffer[1] = index & 0xFF;
 80080a2:	7059      	strb	r1, [r3, #1]
	_I2CBuffer[2] = data;
 80080a4:	709a      	strb	r2, [r3, #2]

	VL53L1_GetI2cBus();
	status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 80080a6:	4619      	mov	r1, r3
 80080a8:	2203      	movs	r2, #3
	_I2CBuffer[0] = index >> 8;
 80080aa:	701c      	strb	r4, [r3, #0]
	status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 80080ac:	f7ff ff9e 	bl	8007fec <_I2CWrite>
	if (status_int != 0) {
 80080b0:	2800      	cmp	r0, #0
		Status = VL53L1_ERROR_CONTROL_INTERFACE;
	}
	VL53L1_PutI2cBus();
	return Status;
}
 80080b2:	bf14      	ite	ne
 80080b4:	f06f 000c 	mvnne.w	r0, #12
 80080b8:	2000      	moveq	r0, #0
 80080ba:	bd10      	pop	{r4, pc}
 80080bc:	20001458 	.word	0x20001458

080080c0 <VL53L1_RdByte>:
 done:
	return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data)
{
 80080c0:	b538      	push	{r3, r4, r5, lr}
	VL53L1_Error Status = VL53L1_ERROR_NONE;
	int32_t status_int;

	_I2CBuffer[0] = index >> 8;
 80080c2:	4b0a      	ldr	r3, [pc, #40]	; (80080ec <VL53L1_RdByte+0x2c>)
{
 80080c4:	4615      	mov	r5, r2
	_I2CBuffer[0] = index >> 8;
 80080c6:	0a0a      	lsrs	r2, r1, #8
 80080c8:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index & 0xFF;
 80080ca:	7059      	strb	r1, [r3, #1]
	VL53L1_GetI2cBus();
	status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80080cc:	2202      	movs	r2, #2
 80080ce:	4619      	mov	r1, r3
{
 80080d0:	4604      	mov	r4, r0
	status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80080d2:	f7ff ff8b 	bl	8007fec <_I2CWrite>
	if (status_int) {
 80080d6:	b928      	cbnz	r0, 80080e4 <VL53L1_RdByte+0x24>
		Status = VL53L1_ERROR_CONTROL_INTERFACE;
		goto done;
	}
	status_int = _I2CRead(Dev, data, 1);
 80080d8:	2201      	movs	r2, #1
 80080da:	4629      	mov	r1, r5
 80080dc:	4620      	mov	r0, r4
 80080de:	f7ff ff94 	bl	800800a <_I2CRead>
	if (status_int != 0) {
 80080e2:	b108      	cbz	r0, 80080e8 <VL53L1_RdByte+0x28>
		Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80080e4:	f06f 000c 	mvn.w	r0, #12
	}
 done:
	VL53L1_PutI2cBus();
	return Status;
}
 80080e8:	bd38      	pop	{r3, r4, r5, pc}
 80080ea:	bf00      	nop
 80080ec:	20001458 	.word	0x20001458

080080f0 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data)
{
 80080f0:	b570      	push	{r4, r5, r6, lr}
	VL53L1_Error Status = VL53L1_ERROR_NONE;
	int32_t status_int;

	_I2CBuffer[0] = index >> 8;
 80080f2:	4c0d      	ldr	r4, [pc, #52]	; (8008128 <VL53L1_RdWord+0x38>)
 80080f4:	0a0b      	lsrs	r3, r1, #8
{
 80080f6:	4615      	mov	r5, r2
	_I2CBuffer[1] = index & 0xFF;
 80080f8:	7061      	strb	r1, [r4, #1]
	VL53L1_GetI2cBus();
	status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80080fa:	2202      	movs	r2, #2
 80080fc:	4621      	mov	r1, r4
{
 80080fe:	4606      	mov	r6, r0
	_I2CBuffer[0] = index >> 8;
 8008100:	7023      	strb	r3, [r4, #0]
	status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8008102:	f7ff ff73 	bl	8007fec <_I2CWrite>

	if (status_int) {
 8008106:	b110      	cbz	r0, 800810e <VL53L1_RdWord+0x1e>
		Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008108:	f06f 000c 	mvn.w	r0, #12
 800810c:	bd70      	pop	{r4, r5, r6, pc}
		goto done;
	}
	status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800810e:	2202      	movs	r2, #2
 8008110:	4621      	mov	r1, r4
 8008112:	4630      	mov	r0, r6
 8008114:	f7ff ff79 	bl	800800a <_I2CRead>
	if (status_int != 0) {
 8008118:	2800      	cmp	r0, #0
 800811a:	d1f5      	bne.n	8008108 <VL53L1_RdWord+0x18>
		Status = VL53L1_ERROR_CONTROL_INTERFACE;
		goto done;
	}

	*data = ((uint16_t)_I2CBuffer[0] << 8) + (uint16_t)_I2CBuffer[1];
 800811c:	7822      	ldrb	r2, [r4, #0]
 800811e:	7863      	ldrb	r3, [r4, #1]
 8008120:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008124:	802b      	strh	r3, [r5, #0]
 done:
	VL53L1_PutI2cBus();
	return Status;
}
 8008126:	bd70      	pop	{r4, r5, r6, pc}
 8008128:	20001458 	.word	0x20001458

0800812c <VL53L1_WaitUs>:
	HAL_Delay(wait_ms);
	return VL53L1_ERROR_NONE;
}

VL53L1_Error VL53L1_WaitUs(VL53L1_Dev_t *pdev, int32_t wait_us)
{
 800812c:	b508      	push	{r3, lr}
	(void)pdev;
	HAL_Delay(wait_us / 1000);
 800812e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008132:	fb91 f0f0 	sdiv	r0, r1, r0
 8008136:	f7fc f99d 	bl	8004474 <HAL_Delay>
	return VL53L1_ERROR_NONE;
}
 800813a:	2000      	movs	r0, #0
 800813c:	bd08      	pop	{r3, pc}
	...

08008140 <VL53L1_WaitValueMaskEx>:
	uint32_t timeout_ms,
	uint16_t index,
	uint8_t value,
	uint8_t mask,
	uint32_t poll_delay_ms)
{
 8008140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008144:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8008148:	4606      	mov	r6, r0
 800814a:	460f      	mov	r7, r1
 800814c:	4690      	mov	r8, r2

	VL53L1_Error status = VL53L1_ERROR_NONE;
	uint32_t start_time_ms = 0;
	uint32_t current_time_ms = 0;
	uint32_t polling_time_ms = 0;
	uint8_t byte_value = 0;
 800814e:	2400      	movs	r4, #0
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
		index,
		register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 8008150:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008154:	4918      	ldr	r1, [pc, #96]	; (80081b8 <VL53L1_WaitValueMaskEx+0x78>)
{
 8008156:	f89d a228 	ldrb.w	sl, [sp, #552]	; 0x228
 800815a:	9d8b      	ldr	r5, [sp, #556]	; 0x22c
	uint8_t byte_value = 0;
 800815c:	f88d 4007 	strb.w	r4, [sp, #7]
	VL53L1_COPYSTRING(register_name, "");
 8008160:	a802      	add	r0, sp, #8
{
 8008162:	4699      	mov	r9, r3
	VL53L1_COPYSTRING(register_name, "");
 8008164:	f001 f8a3 	bl	80092ae <strncpy>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 8008168:	b1ff      	cbz	r7, 80081aa <VL53L1_WaitValueMaskEx+0x6a>
	       (polling_time_ms < timeout_ms) &&
 800816a:	b12c      	cbz	r4, 8008178 <VL53L1_WaitValueMaskEx+0x38>
 800816c:	2300      	movs	r3, #0

	if (found == 0 && status == VL53L1_ERROR_NONE)
		status = VL53L1_ERROR_TIME_OUT;

	return status;
}
 800816e:	4618      	mov	r0, r3
 8008170:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
 8008174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			status = VL53L1_RdByte(
 8008178:	f10d 0207 	add.w	r2, sp, #7
 800817c:	4641      	mov	r1, r8
 800817e:	4630      	mov	r0, r6
 8008180:	f7ff ff9e 	bl	80080c0 <VL53L1_RdByte>
		if ((byte_value & mask) == value)
 8008184:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008188:	ea0a 0202 	and.w	r2, sl, r2
 800818c:	454a      	cmp	r2, r9
			status = VL53L1_RdByte(
 800818e:	4603      	mov	r3, r0
		if ((byte_value & mask) == value)
 8008190:	d103      	bne.n	800819a <VL53L1_WaitValueMaskEx+0x5a>
	while ((status == VL53L1_ERROR_NONE) &&
 8008192:	2800      	cmp	r0, #0
 8008194:	d1eb      	bne.n	800816e <VL53L1_WaitValueMaskEx+0x2e>
			found = 1;
 8008196:	2401      	movs	r4, #1
 8008198:	e7e6      	b.n	8008168 <VL53L1_WaitValueMaskEx+0x28>
		if (status == VL53L1_ERROR_NONE &&
 800819a:	2800      	cmp	r0, #0
 800819c:	d1e7      	bne.n	800816e <VL53L1_WaitValueMaskEx+0x2e>
		    found == 0 &&
 800819e:	2d00      	cmp	r5, #0
 80081a0:	d0e2      	beq.n	8008168 <VL53L1_WaitValueMaskEx+0x28>
	HAL_Delay(wait_ms);
 80081a2:	4628      	mov	r0, r5
 80081a4:	f7fc f966 	bl	8004474 <HAL_Delay>
 80081a8:	e7de      	b.n	8008168 <VL53L1_WaitValueMaskEx+0x28>
		status = VL53L1_ERROR_TIME_OUT;
 80081aa:	2c00      	cmp	r4, #0
 80081ac:	bf14      	ite	ne
 80081ae:	2300      	movne	r3, #0
 80081b0:	f06f 0306 	mvneq.w	r3, #6
 80081b4:	e7db      	b.n	800816e <VL53L1_WaitValueMaskEx+0x2e>
 80081b6:	bf00      	nop
 80081b8:	0800abe8 	.word	0x0800abe8

080081bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80081bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80081f4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80081c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80081c2:	e003      	b.n	80081cc <LoopCopyDataInit>

080081c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80081c4:	4b0c      	ldr	r3, [pc, #48]	; (80081f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80081c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80081c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80081ca:	3104      	adds	r1, #4

080081cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80081cc:	480b      	ldr	r0, [pc, #44]	; (80081fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80081ce:	4b0c      	ldr	r3, [pc, #48]	; (8008200 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80081d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80081d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80081d4:	d3f6      	bcc.n	80081c4 <CopyDataInit>
  ldr  r2, =_sbss
 80081d6:	4a0b      	ldr	r2, [pc, #44]	; (8008204 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80081d8:	e002      	b.n	80081e0 <LoopFillZerobss>

080081da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80081da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80081dc:	f842 3b04 	str.w	r3, [r2], #4

080081e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80081e0:	4b09      	ldr	r3, [pc, #36]	; (8008208 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80081e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80081e4:	d3f9      	bcc.n	80081da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80081e6:	f7ff fc87 	bl	8007af8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80081ea:	f000 f993 	bl	8008514 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80081ee:	f7ff fa73 	bl	80076d8 <main>
  bx  lr    
 80081f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80081f4:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80081f8:	0800aef8 	.word	0x0800aef8
  ldr  r0, =_sdata
 80081fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008200:	20000370 	.word	0x20000370
  ldr  r2, =_sbss
 8008204:	20000370 	.word	0x20000370
  ldr  r3, = _ebss
 8008208:	2000155c 	.word	0x2000155c

0800820c <DMA1_Stream1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800820c:	e7fe      	b.n	800820c <DMA1_Stream1_IRQHandler>
	...

08008210 <__errno>:
 8008210:	4b01      	ldr	r3, [pc, #4]	; (8008218 <__errno+0x8>)
 8008212:	6818      	ldr	r0, [r3, #0]
 8008214:	4770      	bx	lr
 8008216:	bf00      	nop
 8008218:	200001a0 	.word	0x200001a0

0800821c <__sflush_r>:
 800821c:	898a      	ldrh	r2, [r1, #12]
 800821e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008222:	4605      	mov	r5, r0
 8008224:	0710      	lsls	r0, r2, #28
 8008226:	460c      	mov	r4, r1
 8008228:	d45a      	bmi.n	80082e0 <__sflush_r+0xc4>
 800822a:	684b      	ldr	r3, [r1, #4]
 800822c:	2b00      	cmp	r3, #0
 800822e:	dc05      	bgt.n	800823c <__sflush_r+0x20>
 8008230:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008232:	2b00      	cmp	r3, #0
 8008234:	dc02      	bgt.n	800823c <__sflush_r+0x20>
 8008236:	2000      	movs	r0, #0
 8008238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800823c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800823e:	2e00      	cmp	r6, #0
 8008240:	d0f9      	beq.n	8008236 <__sflush_r+0x1a>
 8008242:	2300      	movs	r3, #0
 8008244:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008248:	682f      	ldr	r7, [r5, #0]
 800824a:	602b      	str	r3, [r5, #0]
 800824c:	d033      	beq.n	80082b6 <__sflush_r+0x9a>
 800824e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008250:	89a3      	ldrh	r3, [r4, #12]
 8008252:	075a      	lsls	r2, r3, #29
 8008254:	d505      	bpl.n	8008262 <__sflush_r+0x46>
 8008256:	6863      	ldr	r3, [r4, #4]
 8008258:	1ac0      	subs	r0, r0, r3
 800825a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800825c:	b10b      	cbz	r3, 8008262 <__sflush_r+0x46>
 800825e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008260:	1ac0      	subs	r0, r0, r3
 8008262:	2300      	movs	r3, #0
 8008264:	4602      	mov	r2, r0
 8008266:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008268:	6a21      	ldr	r1, [r4, #32]
 800826a:	4628      	mov	r0, r5
 800826c:	47b0      	blx	r6
 800826e:	1c43      	adds	r3, r0, #1
 8008270:	89a3      	ldrh	r3, [r4, #12]
 8008272:	d106      	bne.n	8008282 <__sflush_r+0x66>
 8008274:	6829      	ldr	r1, [r5, #0]
 8008276:	291d      	cmp	r1, #29
 8008278:	d84b      	bhi.n	8008312 <__sflush_r+0xf6>
 800827a:	4a2b      	ldr	r2, [pc, #172]	; (8008328 <__sflush_r+0x10c>)
 800827c:	40ca      	lsrs	r2, r1
 800827e:	07d6      	lsls	r6, r2, #31
 8008280:	d547      	bpl.n	8008312 <__sflush_r+0xf6>
 8008282:	2200      	movs	r2, #0
 8008284:	6062      	str	r2, [r4, #4]
 8008286:	04d9      	lsls	r1, r3, #19
 8008288:	6922      	ldr	r2, [r4, #16]
 800828a:	6022      	str	r2, [r4, #0]
 800828c:	d504      	bpl.n	8008298 <__sflush_r+0x7c>
 800828e:	1c42      	adds	r2, r0, #1
 8008290:	d101      	bne.n	8008296 <__sflush_r+0x7a>
 8008292:	682b      	ldr	r3, [r5, #0]
 8008294:	b903      	cbnz	r3, 8008298 <__sflush_r+0x7c>
 8008296:	6560      	str	r0, [r4, #84]	; 0x54
 8008298:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800829a:	602f      	str	r7, [r5, #0]
 800829c:	2900      	cmp	r1, #0
 800829e:	d0ca      	beq.n	8008236 <__sflush_r+0x1a>
 80082a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082a4:	4299      	cmp	r1, r3
 80082a6:	d002      	beq.n	80082ae <__sflush_r+0x92>
 80082a8:	4628      	mov	r0, r5
 80082aa:	f000 f96b 	bl	8008584 <_free_r>
 80082ae:	2000      	movs	r0, #0
 80082b0:	6360      	str	r0, [r4, #52]	; 0x34
 80082b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082b6:	6a21      	ldr	r1, [r4, #32]
 80082b8:	2301      	movs	r3, #1
 80082ba:	4628      	mov	r0, r5
 80082bc:	47b0      	blx	r6
 80082be:	1c41      	adds	r1, r0, #1
 80082c0:	d1c6      	bne.n	8008250 <__sflush_r+0x34>
 80082c2:	682b      	ldr	r3, [r5, #0]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d0c3      	beq.n	8008250 <__sflush_r+0x34>
 80082c8:	2b1d      	cmp	r3, #29
 80082ca:	d001      	beq.n	80082d0 <__sflush_r+0xb4>
 80082cc:	2b16      	cmp	r3, #22
 80082ce:	d101      	bne.n	80082d4 <__sflush_r+0xb8>
 80082d0:	602f      	str	r7, [r5, #0]
 80082d2:	e7b0      	b.n	8008236 <__sflush_r+0x1a>
 80082d4:	89a3      	ldrh	r3, [r4, #12]
 80082d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082da:	81a3      	strh	r3, [r4, #12]
 80082dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082e0:	690f      	ldr	r7, [r1, #16]
 80082e2:	2f00      	cmp	r7, #0
 80082e4:	d0a7      	beq.n	8008236 <__sflush_r+0x1a>
 80082e6:	0793      	lsls	r3, r2, #30
 80082e8:	680e      	ldr	r6, [r1, #0]
 80082ea:	bf08      	it	eq
 80082ec:	694b      	ldreq	r3, [r1, #20]
 80082ee:	600f      	str	r7, [r1, #0]
 80082f0:	bf18      	it	ne
 80082f2:	2300      	movne	r3, #0
 80082f4:	eba6 0807 	sub.w	r8, r6, r7
 80082f8:	608b      	str	r3, [r1, #8]
 80082fa:	f1b8 0f00 	cmp.w	r8, #0
 80082fe:	dd9a      	ble.n	8008236 <__sflush_r+0x1a>
 8008300:	4643      	mov	r3, r8
 8008302:	463a      	mov	r2, r7
 8008304:	6a21      	ldr	r1, [r4, #32]
 8008306:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008308:	4628      	mov	r0, r5
 800830a:	47b0      	blx	r6
 800830c:	2800      	cmp	r0, #0
 800830e:	dc07      	bgt.n	8008320 <__sflush_r+0x104>
 8008310:	89a3      	ldrh	r3, [r4, #12]
 8008312:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008316:	81a3      	strh	r3, [r4, #12]
 8008318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800831c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008320:	4407      	add	r7, r0
 8008322:	eba8 0800 	sub.w	r8, r8, r0
 8008326:	e7e8      	b.n	80082fa <__sflush_r+0xde>
 8008328:	20400001 	.word	0x20400001

0800832c <_fflush_r>:
 800832c:	b538      	push	{r3, r4, r5, lr}
 800832e:	690b      	ldr	r3, [r1, #16]
 8008330:	4605      	mov	r5, r0
 8008332:	460c      	mov	r4, r1
 8008334:	b1db      	cbz	r3, 800836e <_fflush_r+0x42>
 8008336:	b118      	cbz	r0, 8008340 <_fflush_r+0x14>
 8008338:	6983      	ldr	r3, [r0, #24]
 800833a:	b90b      	cbnz	r3, 8008340 <_fflush_r+0x14>
 800833c:	f000 f860 	bl	8008400 <__sinit>
 8008340:	4b0c      	ldr	r3, [pc, #48]	; (8008374 <_fflush_r+0x48>)
 8008342:	429c      	cmp	r4, r3
 8008344:	d109      	bne.n	800835a <_fflush_r+0x2e>
 8008346:	686c      	ldr	r4, [r5, #4]
 8008348:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800834c:	b17b      	cbz	r3, 800836e <_fflush_r+0x42>
 800834e:	4621      	mov	r1, r4
 8008350:	4628      	mov	r0, r5
 8008352:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008356:	f7ff bf61 	b.w	800821c <__sflush_r>
 800835a:	4b07      	ldr	r3, [pc, #28]	; (8008378 <_fflush_r+0x4c>)
 800835c:	429c      	cmp	r4, r3
 800835e:	d101      	bne.n	8008364 <_fflush_r+0x38>
 8008360:	68ac      	ldr	r4, [r5, #8]
 8008362:	e7f1      	b.n	8008348 <_fflush_r+0x1c>
 8008364:	4b05      	ldr	r3, [pc, #20]	; (800837c <_fflush_r+0x50>)
 8008366:	429c      	cmp	r4, r3
 8008368:	bf08      	it	eq
 800836a:	68ec      	ldreq	r4, [r5, #12]
 800836c:	e7ec      	b.n	8008348 <_fflush_r+0x1c>
 800836e:	2000      	movs	r0, #0
 8008370:	bd38      	pop	{r3, r4, r5, pc}
 8008372:	bf00      	nop
 8008374:	0800ac48 	.word	0x0800ac48
 8008378:	0800ac68 	.word	0x0800ac68
 800837c:	0800ac28 	.word	0x0800ac28

08008380 <_cleanup_r>:
 8008380:	4901      	ldr	r1, [pc, #4]	; (8008388 <_cleanup_r+0x8>)
 8008382:	f000 b8a9 	b.w	80084d8 <_fwalk_reent>
 8008386:	bf00      	nop
 8008388:	0800832d 	.word	0x0800832d

0800838c <std.isra.0>:
 800838c:	2300      	movs	r3, #0
 800838e:	b510      	push	{r4, lr}
 8008390:	4604      	mov	r4, r0
 8008392:	6003      	str	r3, [r0, #0]
 8008394:	6043      	str	r3, [r0, #4]
 8008396:	6083      	str	r3, [r0, #8]
 8008398:	8181      	strh	r1, [r0, #12]
 800839a:	6643      	str	r3, [r0, #100]	; 0x64
 800839c:	81c2      	strh	r2, [r0, #14]
 800839e:	6103      	str	r3, [r0, #16]
 80083a0:	6143      	str	r3, [r0, #20]
 80083a2:	6183      	str	r3, [r0, #24]
 80083a4:	4619      	mov	r1, r3
 80083a6:	2208      	movs	r2, #8
 80083a8:	305c      	adds	r0, #92	; 0x5c
 80083aa:	f000 f8e2 	bl	8008572 <memset>
 80083ae:	4b05      	ldr	r3, [pc, #20]	; (80083c4 <std.isra.0+0x38>)
 80083b0:	6263      	str	r3, [r4, #36]	; 0x24
 80083b2:	4b05      	ldr	r3, [pc, #20]	; (80083c8 <std.isra.0+0x3c>)
 80083b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80083b6:	4b05      	ldr	r3, [pc, #20]	; (80083cc <std.isra.0+0x40>)
 80083b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80083ba:	4b05      	ldr	r3, [pc, #20]	; (80083d0 <std.isra.0+0x44>)
 80083bc:	6224      	str	r4, [r4, #32]
 80083be:	6323      	str	r3, [r4, #48]	; 0x30
 80083c0:	bd10      	pop	{r4, pc}
 80083c2:	bf00      	nop
 80083c4:	08009229 	.word	0x08009229
 80083c8:	0800924b 	.word	0x0800924b
 80083cc:	08009283 	.word	0x08009283
 80083d0:	080092a7 	.word	0x080092a7

080083d4 <__sfmoreglue>:
 80083d4:	b570      	push	{r4, r5, r6, lr}
 80083d6:	1e4a      	subs	r2, r1, #1
 80083d8:	2568      	movs	r5, #104	; 0x68
 80083da:	4355      	muls	r5, r2
 80083dc:	460e      	mov	r6, r1
 80083de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80083e2:	f000 f91d 	bl	8008620 <_malloc_r>
 80083e6:	4604      	mov	r4, r0
 80083e8:	b140      	cbz	r0, 80083fc <__sfmoreglue+0x28>
 80083ea:	2100      	movs	r1, #0
 80083ec:	e880 0042 	stmia.w	r0, {r1, r6}
 80083f0:	300c      	adds	r0, #12
 80083f2:	60a0      	str	r0, [r4, #8]
 80083f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80083f8:	f000 f8bb 	bl	8008572 <memset>
 80083fc:	4620      	mov	r0, r4
 80083fe:	bd70      	pop	{r4, r5, r6, pc}

08008400 <__sinit>:
 8008400:	6983      	ldr	r3, [r0, #24]
 8008402:	b510      	push	{r4, lr}
 8008404:	4604      	mov	r4, r0
 8008406:	bb33      	cbnz	r3, 8008456 <__sinit+0x56>
 8008408:	6483      	str	r3, [r0, #72]	; 0x48
 800840a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800840c:	6503      	str	r3, [r0, #80]	; 0x50
 800840e:	4b12      	ldr	r3, [pc, #72]	; (8008458 <__sinit+0x58>)
 8008410:	4a12      	ldr	r2, [pc, #72]	; (800845c <__sinit+0x5c>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	6282      	str	r2, [r0, #40]	; 0x28
 8008416:	4298      	cmp	r0, r3
 8008418:	bf04      	itt	eq
 800841a:	2301      	moveq	r3, #1
 800841c:	6183      	streq	r3, [r0, #24]
 800841e:	f000 f81f 	bl	8008460 <__sfp>
 8008422:	6060      	str	r0, [r4, #4]
 8008424:	4620      	mov	r0, r4
 8008426:	f000 f81b 	bl	8008460 <__sfp>
 800842a:	60a0      	str	r0, [r4, #8]
 800842c:	4620      	mov	r0, r4
 800842e:	f000 f817 	bl	8008460 <__sfp>
 8008432:	2200      	movs	r2, #0
 8008434:	60e0      	str	r0, [r4, #12]
 8008436:	2104      	movs	r1, #4
 8008438:	6860      	ldr	r0, [r4, #4]
 800843a:	f7ff ffa7 	bl	800838c <std.isra.0>
 800843e:	2201      	movs	r2, #1
 8008440:	2109      	movs	r1, #9
 8008442:	68a0      	ldr	r0, [r4, #8]
 8008444:	f7ff ffa2 	bl	800838c <std.isra.0>
 8008448:	2202      	movs	r2, #2
 800844a:	2112      	movs	r1, #18
 800844c:	68e0      	ldr	r0, [r4, #12]
 800844e:	f7ff ff9d 	bl	800838c <std.isra.0>
 8008452:	2301      	movs	r3, #1
 8008454:	61a3      	str	r3, [r4, #24]
 8008456:	bd10      	pop	{r4, pc}
 8008458:	0800ac88 	.word	0x0800ac88
 800845c:	08008381 	.word	0x08008381

08008460 <__sfp>:
 8008460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008462:	4b1c      	ldr	r3, [pc, #112]	; (80084d4 <__sfp+0x74>)
 8008464:	681e      	ldr	r6, [r3, #0]
 8008466:	69b3      	ldr	r3, [r6, #24]
 8008468:	4607      	mov	r7, r0
 800846a:	b913      	cbnz	r3, 8008472 <__sfp+0x12>
 800846c:	4630      	mov	r0, r6
 800846e:	f7ff ffc7 	bl	8008400 <__sinit>
 8008472:	3648      	adds	r6, #72	; 0x48
 8008474:	68b4      	ldr	r4, [r6, #8]
 8008476:	6873      	ldr	r3, [r6, #4]
 8008478:	3b01      	subs	r3, #1
 800847a:	d503      	bpl.n	8008484 <__sfp+0x24>
 800847c:	6833      	ldr	r3, [r6, #0]
 800847e:	b133      	cbz	r3, 800848e <__sfp+0x2e>
 8008480:	6836      	ldr	r6, [r6, #0]
 8008482:	e7f7      	b.n	8008474 <__sfp+0x14>
 8008484:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008488:	b16d      	cbz	r5, 80084a6 <__sfp+0x46>
 800848a:	3468      	adds	r4, #104	; 0x68
 800848c:	e7f4      	b.n	8008478 <__sfp+0x18>
 800848e:	2104      	movs	r1, #4
 8008490:	4638      	mov	r0, r7
 8008492:	f7ff ff9f 	bl	80083d4 <__sfmoreglue>
 8008496:	6030      	str	r0, [r6, #0]
 8008498:	2800      	cmp	r0, #0
 800849a:	d1f1      	bne.n	8008480 <__sfp+0x20>
 800849c:	230c      	movs	r3, #12
 800849e:	603b      	str	r3, [r7, #0]
 80084a0:	4604      	mov	r4, r0
 80084a2:	4620      	mov	r0, r4
 80084a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80084aa:	81e3      	strh	r3, [r4, #14]
 80084ac:	2301      	movs	r3, #1
 80084ae:	81a3      	strh	r3, [r4, #12]
 80084b0:	6665      	str	r5, [r4, #100]	; 0x64
 80084b2:	6025      	str	r5, [r4, #0]
 80084b4:	60a5      	str	r5, [r4, #8]
 80084b6:	6065      	str	r5, [r4, #4]
 80084b8:	6125      	str	r5, [r4, #16]
 80084ba:	6165      	str	r5, [r4, #20]
 80084bc:	61a5      	str	r5, [r4, #24]
 80084be:	2208      	movs	r2, #8
 80084c0:	4629      	mov	r1, r5
 80084c2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80084c6:	f000 f854 	bl	8008572 <memset>
 80084ca:	6365      	str	r5, [r4, #52]	; 0x34
 80084cc:	63a5      	str	r5, [r4, #56]	; 0x38
 80084ce:	64a5      	str	r5, [r4, #72]	; 0x48
 80084d0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80084d2:	e7e6      	b.n	80084a2 <__sfp+0x42>
 80084d4:	0800ac88 	.word	0x0800ac88

080084d8 <_fwalk_reent>:
 80084d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084dc:	4680      	mov	r8, r0
 80084de:	4689      	mov	r9, r1
 80084e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80084e4:	2600      	movs	r6, #0
 80084e6:	b914      	cbnz	r4, 80084ee <_fwalk_reent+0x16>
 80084e8:	4630      	mov	r0, r6
 80084ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084ee:	68a5      	ldr	r5, [r4, #8]
 80084f0:	6867      	ldr	r7, [r4, #4]
 80084f2:	3f01      	subs	r7, #1
 80084f4:	d501      	bpl.n	80084fa <_fwalk_reent+0x22>
 80084f6:	6824      	ldr	r4, [r4, #0]
 80084f8:	e7f5      	b.n	80084e6 <_fwalk_reent+0xe>
 80084fa:	89ab      	ldrh	r3, [r5, #12]
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d907      	bls.n	8008510 <_fwalk_reent+0x38>
 8008500:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008504:	3301      	adds	r3, #1
 8008506:	d003      	beq.n	8008510 <_fwalk_reent+0x38>
 8008508:	4629      	mov	r1, r5
 800850a:	4640      	mov	r0, r8
 800850c:	47c8      	blx	r9
 800850e:	4306      	orrs	r6, r0
 8008510:	3568      	adds	r5, #104	; 0x68
 8008512:	e7ee      	b.n	80084f2 <_fwalk_reent+0x1a>

08008514 <__libc_init_array>:
 8008514:	b570      	push	{r4, r5, r6, lr}
 8008516:	4e0d      	ldr	r6, [pc, #52]	; (800854c <__libc_init_array+0x38>)
 8008518:	4c0d      	ldr	r4, [pc, #52]	; (8008550 <__libc_init_array+0x3c>)
 800851a:	1ba4      	subs	r4, r4, r6
 800851c:	10a4      	asrs	r4, r4, #2
 800851e:	2500      	movs	r5, #0
 8008520:	42a5      	cmp	r5, r4
 8008522:	d109      	bne.n	8008538 <__libc_init_array+0x24>
 8008524:	4e0b      	ldr	r6, [pc, #44]	; (8008554 <__libc_init_array+0x40>)
 8008526:	4c0c      	ldr	r4, [pc, #48]	; (8008558 <__libc_init_array+0x44>)
 8008528:	f002 fb14 	bl	800ab54 <_init>
 800852c:	1ba4      	subs	r4, r4, r6
 800852e:	10a4      	asrs	r4, r4, #2
 8008530:	2500      	movs	r5, #0
 8008532:	42a5      	cmp	r5, r4
 8008534:	d105      	bne.n	8008542 <__libc_init_array+0x2e>
 8008536:	bd70      	pop	{r4, r5, r6, pc}
 8008538:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800853c:	4798      	blx	r3
 800853e:	3501      	adds	r5, #1
 8008540:	e7ee      	b.n	8008520 <__libc_init_array+0xc>
 8008542:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008546:	4798      	blx	r3
 8008548:	3501      	adds	r5, #1
 800854a:	e7f2      	b.n	8008532 <__libc_init_array+0x1e>
 800854c:	0800aef0 	.word	0x0800aef0
 8008550:	0800aef0 	.word	0x0800aef0
 8008554:	0800aef0 	.word	0x0800aef0
 8008558:	0800aef4 	.word	0x0800aef4

0800855c <memcpy>:
 800855c:	b510      	push	{r4, lr}
 800855e:	1e43      	subs	r3, r0, #1
 8008560:	440a      	add	r2, r1
 8008562:	4291      	cmp	r1, r2
 8008564:	d100      	bne.n	8008568 <memcpy+0xc>
 8008566:	bd10      	pop	{r4, pc}
 8008568:	f811 4b01 	ldrb.w	r4, [r1], #1
 800856c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008570:	e7f7      	b.n	8008562 <memcpy+0x6>

08008572 <memset>:
 8008572:	4402      	add	r2, r0
 8008574:	4603      	mov	r3, r0
 8008576:	4293      	cmp	r3, r2
 8008578:	d100      	bne.n	800857c <memset+0xa>
 800857a:	4770      	bx	lr
 800857c:	f803 1b01 	strb.w	r1, [r3], #1
 8008580:	e7f9      	b.n	8008576 <memset+0x4>
	...

08008584 <_free_r>:
 8008584:	b538      	push	{r3, r4, r5, lr}
 8008586:	4605      	mov	r5, r0
 8008588:	2900      	cmp	r1, #0
 800858a:	d045      	beq.n	8008618 <_free_r+0x94>
 800858c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008590:	1f0c      	subs	r4, r1, #4
 8008592:	2b00      	cmp	r3, #0
 8008594:	bfb8      	it	lt
 8008596:	18e4      	addlt	r4, r4, r3
 8008598:	f001 fe68 	bl	800a26c <__malloc_lock>
 800859c:	4a1f      	ldr	r2, [pc, #124]	; (800861c <_free_r+0x98>)
 800859e:	6813      	ldr	r3, [r2, #0]
 80085a0:	4610      	mov	r0, r2
 80085a2:	b933      	cbnz	r3, 80085b2 <_free_r+0x2e>
 80085a4:	6063      	str	r3, [r4, #4]
 80085a6:	6014      	str	r4, [r2, #0]
 80085a8:	4628      	mov	r0, r5
 80085aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085ae:	f001 be5e 	b.w	800a26e <__malloc_unlock>
 80085b2:	42a3      	cmp	r3, r4
 80085b4:	d90c      	bls.n	80085d0 <_free_r+0x4c>
 80085b6:	6821      	ldr	r1, [r4, #0]
 80085b8:	1862      	adds	r2, r4, r1
 80085ba:	4293      	cmp	r3, r2
 80085bc:	bf04      	itt	eq
 80085be:	681a      	ldreq	r2, [r3, #0]
 80085c0:	685b      	ldreq	r3, [r3, #4]
 80085c2:	6063      	str	r3, [r4, #4]
 80085c4:	bf04      	itt	eq
 80085c6:	1852      	addeq	r2, r2, r1
 80085c8:	6022      	streq	r2, [r4, #0]
 80085ca:	6004      	str	r4, [r0, #0]
 80085cc:	e7ec      	b.n	80085a8 <_free_r+0x24>
 80085ce:	4613      	mov	r3, r2
 80085d0:	685a      	ldr	r2, [r3, #4]
 80085d2:	b10a      	cbz	r2, 80085d8 <_free_r+0x54>
 80085d4:	42a2      	cmp	r2, r4
 80085d6:	d9fa      	bls.n	80085ce <_free_r+0x4a>
 80085d8:	6819      	ldr	r1, [r3, #0]
 80085da:	1858      	adds	r0, r3, r1
 80085dc:	42a0      	cmp	r0, r4
 80085de:	d10b      	bne.n	80085f8 <_free_r+0x74>
 80085e0:	6820      	ldr	r0, [r4, #0]
 80085e2:	4401      	add	r1, r0
 80085e4:	1858      	adds	r0, r3, r1
 80085e6:	4282      	cmp	r2, r0
 80085e8:	6019      	str	r1, [r3, #0]
 80085ea:	d1dd      	bne.n	80085a8 <_free_r+0x24>
 80085ec:	6810      	ldr	r0, [r2, #0]
 80085ee:	6852      	ldr	r2, [r2, #4]
 80085f0:	605a      	str	r2, [r3, #4]
 80085f2:	4401      	add	r1, r0
 80085f4:	6019      	str	r1, [r3, #0]
 80085f6:	e7d7      	b.n	80085a8 <_free_r+0x24>
 80085f8:	d902      	bls.n	8008600 <_free_r+0x7c>
 80085fa:	230c      	movs	r3, #12
 80085fc:	602b      	str	r3, [r5, #0]
 80085fe:	e7d3      	b.n	80085a8 <_free_r+0x24>
 8008600:	6820      	ldr	r0, [r4, #0]
 8008602:	1821      	adds	r1, r4, r0
 8008604:	428a      	cmp	r2, r1
 8008606:	bf04      	itt	eq
 8008608:	6811      	ldreq	r1, [r2, #0]
 800860a:	6852      	ldreq	r2, [r2, #4]
 800860c:	6062      	str	r2, [r4, #4]
 800860e:	bf04      	itt	eq
 8008610:	1809      	addeq	r1, r1, r0
 8008612:	6021      	streq	r1, [r4, #0]
 8008614:	605c      	str	r4, [r3, #4]
 8008616:	e7c7      	b.n	80085a8 <_free_r+0x24>
 8008618:	bd38      	pop	{r3, r4, r5, pc}
 800861a:	bf00      	nop
 800861c:	20000410 	.word	0x20000410

08008620 <_malloc_r>:
 8008620:	b570      	push	{r4, r5, r6, lr}
 8008622:	1ccd      	adds	r5, r1, #3
 8008624:	f025 0503 	bic.w	r5, r5, #3
 8008628:	3508      	adds	r5, #8
 800862a:	2d0c      	cmp	r5, #12
 800862c:	bf38      	it	cc
 800862e:	250c      	movcc	r5, #12
 8008630:	2d00      	cmp	r5, #0
 8008632:	4606      	mov	r6, r0
 8008634:	db01      	blt.n	800863a <_malloc_r+0x1a>
 8008636:	42a9      	cmp	r1, r5
 8008638:	d903      	bls.n	8008642 <_malloc_r+0x22>
 800863a:	230c      	movs	r3, #12
 800863c:	6033      	str	r3, [r6, #0]
 800863e:	2000      	movs	r0, #0
 8008640:	bd70      	pop	{r4, r5, r6, pc}
 8008642:	f001 fe13 	bl	800a26c <__malloc_lock>
 8008646:	4a23      	ldr	r2, [pc, #140]	; (80086d4 <_malloc_r+0xb4>)
 8008648:	6814      	ldr	r4, [r2, #0]
 800864a:	4621      	mov	r1, r4
 800864c:	b991      	cbnz	r1, 8008674 <_malloc_r+0x54>
 800864e:	4c22      	ldr	r4, [pc, #136]	; (80086d8 <_malloc_r+0xb8>)
 8008650:	6823      	ldr	r3, [r4, #0]
 8008652:	b91b      	cbnz	r3, 800865c <_malloc_r+0x3c>
 8008654:	4630      	mov	r0, r6
 8008656:	f000 fd29 	bl	80090ac <_sbrk_r>
 800865a:	6020      	str	r0, [r4, #0]
 800865c:	4629      	mov	r1, r5
 800865e:	4630      	mov	r0, r6
 8008660:	f000 fd24 	bl	80090ac <_sbrk_r>
 8008664:	1c43      	adds	r3, r0, #1
 8008666:	d126      	bne.n	80086b6 <_malloc_r+0x96>
 8008668:	230c      	movs	r3, #12
 800866a:	6033      	str	r3, [r6, #0]
 800866c:	4630      	mov	r0, r6
 800866e:	f001 fdfe 	bl	800a26e <__malloc_unlock>
 8008672:	e7e4      	b.n	800863e <_malloc_r+0x1e>
 8008674:	680b      	ldr	r3, [r1, #0]
 8008676:	1b5b      	subs	r3, r3, r5
 8008678:	d41a      	bmi.n	80086b0 <_malloc_r+0x90>
 800867a:	2b0b      	cmp	r3, #11
 800867c:	d90f      	bls.n	800869e <_malloc_r+0x7e>
 800867e:	600b      	str	r3, [r1, #0]
 8008680:	50cd      	str	r5, [r1, r3]
 8008682:	18cc      	adds	r4, r1, r3
 8008684:	4630      	mov	r0, r6
 8008686:	f001 fdf2 	bl	800a26e <__malloc_unlock>
 800868a:	f104 000b 	add.w	r0, r4, #11
 800868e:	1d23      	adds	r3, r4, #4
 8008690:	f020 0007 	bic.w	r0, r0, #7
 8008694:	1ac3      	subs	r3, r0, r3
 8008696:	d01b      	beq.n	80086d0 <_malloc_r+0xb0>
 8008698:	425a      	negs	r2, r3
 800869a:	50e2      	str	r2, [r4, r3]
 800869c:	bd70      	pop	{r4, r5, r6, pc}
 800869e:	428c      	cmp	r4, r1
 80086a0:	bf0d      	iteet	eq
 80086a2:	6863      	ldreq	r3, [r4, #4]
 80086a4:	684b      	ldrne	r3, [r1, #4]
 80086a6:	6063      	strne	r3, [r4, #4]
 80086a8:	6013      	streq	r3, [r2, #0]
 80086aa:	bf18      	it	ne
 80086ac:	460c      	movne	r4, r1
 80086ae:	e7e9      	b.n	8008684 <_malloc_r+0x64>
 80086b0:	460c      	mov	r4, r1
 80086b2:	6849      	ldr	r1, [r1, #4]
 80086b4:	e7ca      	b.n	800864c <_malloc_r+0x2c>
 80086b6:	1cc4      	adds	r4, r0, #3
 80086b8:	f024 0403 	bic.w	r4, r4, #3
 80086bc:	42a0      	cmp	r0, r4
 80086be:	d005      	beq.n	80086cc <_malloc_r+0xac>
 80086c0:	1a21      	subs	r1, r4, r0
 80086c2:	4630      	mov	r0, r6
 80086c4:	f000 fcf2 	bl	80090ac <_sbrk_r>
 80086c8:	3001      	adds	r0, #1
 80086ca:	d0cd      	beq.n	8008668 <_malloc_r+0x48>
 80086cc:	6025      	str	r5, [r4, #0]
 80086ce:	e7d9      	b.n	8008684 <_malloc_r+0x64>
 80086d0:	bd70      	pop	{r4, r5, r6, pc}
 80086d2:	bf00      	nop
 80086d4:	20000410 	.word	0x20000410
 80086d8:	20000414 	.word	0x20000414

080086dc <__cvt>:
 80086dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086e0:	ec55 4b10 	vmov	r4, r5, d0
 80086e4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80086e6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80086ea:	2d00      	cmp	r5, #0
 80086ec:	460e      	mov	r6, r1
 80086ee:	4691      	mov	r9, r2
 80086f0:	4619      	mov	r1, r3
 80086f2:	bfb8      	it	lt
 80086f4:	4622      	movlt	r2, r4
 80086f6:	462b      	mov	r3, r5
 80086f8:	f027 0720 	bic.w	r7, r7, #32
 80086fc:	bfbb      	ittet	lt
 80086fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008702:	461d      	movlt	r5, r3
 8008704:	2300      	movge	r3, #0
 8008706:	232d      	movlt	r3, #45	; 0x2d
 8008708:	bfb8      	it	lt
 800870a:	4614      	movlt	r4, r2
 800870c:	2f46      	cmp	r7, #70	; 0x46
 800870e:	700b      	strb	r3, [r1, #0]
 8008710:	d004      	beq.n	800871c <__cvt+0x40>
 8008712:	2f45      	cmp	r7, #69	; 0x45
 8008714:	d100      	bne.n	8008718 <__cvt+0x3c>
 8008716:	3601      	adds	r6, #1
 8008718:	2102      	movs	r1, #2
 800871a:	e000      	b.n	800871e <__cvt+0x42>
 800871c:	2103      	movs	r1, #3
 800871e:	ab03      	add	r3, sp, #12
 8008720:	9301      	str	r3, [sp, #4]
 8008722:	ab02      	add	r3, sp, #8
 8008724:	9300      	str	r3, [sp, #0]
 8008726:	4632      	mov	r2, r6
 8008728:	4653      	mov	r3, sl
 800872a:	ec45 4b10 	vmov	d0, r4, r5
 800872e:	f000 ff43 	bl	80095b8 <_dtoa_r>
 8008732:	2f47      	cmp	r7, #71	; 0x47
 8008734:	4680      	mov	r8, r0
 8008736:	d102      	bne.n	800873e <__cvt+0x62>
 8008738:	f019 0f01 	tst.w	r9, #1
 800873c:	d026      	beq.n	800878c <__cvt+0xb0>
 800873e:	2f46      	cmp	r7, #70	; 0x46
 8008740:	eb08 0906 	add.w	r9, r8, r6
 8008744:	d111      	bne.n	800876a <__cvt+0x8e>
 8008746:	f898 3000 	ldrb.w	r3, [r8]
 800874a:	2b30      	cmp	r3, #48	; 0x30
 800874c:	d10a      	bne.n	8008764 <__cvt+0x88>
 800874e:	2200      	movs	r2, #0
 8008750:	2300      	movs	r3, #0
 8008752:	4620      	mov	r0, r4
 8008754:	4629      	mov	r1, r5
 8008756:	f7f8 f9bb 	bl	8000ad0 <__aeabi_dcmpeq>
 800875a:	b918      	cbnz	r0, 8008764 <__cvt+0x88>
 800875c:	f1c6 0601 	rsb	r6, r6, #1
 8008760:	f8ca 6000 	str.w	r6, [sl]
 8008764:	f8da 3000 	ldr.w	r3, [sl]
 8008768:	4499      	add	r9, r3
 800876a:	2200      	movs	r2, #0
 800876c:	2300      	movs	r3, #0
 800876e:	4620      	mov	r0, r4
 8008770:	4629      	mov	r1, r5
 8008772:	f7f8 f9ad 	bl	8000ad0 <__aeabi_dcmpeq>
 8008776:	b938      	cbnz	r0, 8008788 <__cvt+0xac>
 8008778:	2230      	movs	r2, #48	; 0x30
 800877a:	9b03      	ldr	r3, [sp, #12]
 800877c:	4599      	cmp	r9, r3
 800877e:	d905      	bls.n	800878c <__cvt+0xb0>
 8008780:	1c59      	adds	r1, r3, #1
 8008782:	9103      	str	r1, [sp, #12]
 8008784:	701a      	strb	r2, [r3, #0]
 8008786:	e7f8      	b.n	800877a <__cvt+0x9e>
 8008788:	f8cd 900c 	str.w	r9, [sp, #12]
 800878c:	9b03      	ldr	r3, [sp, #12]
 800878e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008790:	eba3 0308 	sub.w	r3, r3, r8
 8008794:	4640      	mov	r0, r8
 8008796:	6013      	str	r3, [r2, #0]
 8008798:	b004      	add	sp, #16
 800879a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800879e <__exponent>:
 800879e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087a0:	4603      	mov	r3, r0
 80087a2:	2900      	cmp	r1, #0
 80087a4:	bfb8      	it	lt
 80087a6:	4249      	neglt	r1, r1
 80087a8:	f803 2b02 	strb.w	r2, [r3], #2
 80087ac:	bfb4      	ite	lt
 80087ae:	222d      	movlt	r2, #45	; 0x2d
 80087b0:	222b      	movge	r2, #43	; 0x2b
 80087b2:	2909      	cmp	r1, #9
 80087b4:	7042      	strb	r2, [r0, #1]
 80087b6:	dd20      	ble.n	80087fa <__exponent+0x5c>
 80087b8:	f10d 0207 	add.w	r2, sp, #7
 80087bc:	4617      	mov	r7, r2
 80087be:	260a      	movs	r6, #10
 80087c0:	fb91 f5f6 	sdiv	r5, r1, r6
 80087c4:	fb06 1115 	mls	r1, r6, r5, r1
 80087c8:	3130      	adds	r1, #48	; 0x30
 80087ca:	2d09      	cmp	r5, #9
 80087cc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80087d0:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
 80087d4:	4629      	mov	r1, r5
 80087d6:	dc09      	bgt.n	80087ec <__exponent+0x4e>
 80087d8:	3130      	adds	r1, #48	; 0x30
 80087da:	3a02      	subs	r2, #2
 80087dc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80087e0:	42ba      	cmp	r2, r7
 80087e2:	461c      	mov	r4, r3
 80087e4:	d304      	bcc.n	80087f0 <__exponent+0x52>
 80087e6:	1a20      	subs	r0, r4, r0
 80087e8:	b003      	add	sp, #12
 80087ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087ec:	4622      	mov	r2, r4
 80087ee:	e7e7      	b.n	80087c0 <__exponent+0x22>
 80087f0:	f812 1b01 	ldrb.w	r1, [r2], #1
 80087f4:	f803 1b01 	strb.w	r1, [r3], #1
 80087f8:	e7f2      	b.n	80087e0 <__exponent+0x42>
 80087fa:	2230      	movs	r2, #48	; 0x30
 80087fc:	461c      	mov	r4, r3
 80087fe:	4411      	add	r1, r2
 8008800:	f804 2b02 	strb.w	r2, [r4], #2
 8008804:	7059      	strb	r1, [r3, #1]
 8008806:	e7ee      	b.n	80087e6 <__exponent+0x48>

08008808 <_printf_float>:
 8008808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800880c:	b08d      	sub	sp, #52	; 0x34
 800880e:	460c      	mov	r4, r1
 8008810:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8008814:	4616      	mov	r6, r2
 8008816:	461f      	mov	r7, r3
 8008818:	4605      	mov	r5, r0
 800881a:	f001 fc9b 	bl	800a154 <_localeconv_r>
 800881e:	6803      	ldr	r3, [r0, #0]
 8008820:	9304      	str	r3, [sp, #16]
 8008822:	4618      	mov	r0, r3
 8008824:	f7f7 fcdc 	bl	80001e0 <strlen>
 8008828:	2300      	movs	r3, #0
 800882a:	930a      	str	r3, [sp, #40]	; 0x28
 800882c:	f8d8 3000 	ldr.w	r3, [r8]
 8008830:	9005      	str	r0, [sp, #20]
 8008832:	3307      	adds	r3, #7
 8008834:	f023 0307 	bic.w	r3, r3, #7
 8008838:	f103 0208 	add.w	r2, r3, #8
 800883c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008840:	f8d4 b000 	ldr.w	fp, [r4]
 8008844:	f8c8 2000 	str.w	r2, [r8]
 8008848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800884c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008850:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008854:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008858:	9307      	str	r3, [sp, #28]
 800885a:	f8cd 8018 	str.w	r8, [sp, #24]
 800885e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008862:	4ba5      	ldr	r3, [pc, #660]	; (8008af8 <_printf_float+0x2f0>)
 8008864:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008868:	f7f8 f964 	bl	8000b34 <__aeabi_dcmpun>
 800886c:	2800      	cmp	r0, #0
 800886e:	f040 81fb 	bne.w	8008c68 <_printf_float+0x460>
 8008872:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008876:	4ba0      	ldr	r3, [pc, #640]	; (8008af8 <_printf_float+0x2f0>)
 8008878:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800887c:	f7f8 f93c 	bl	8000af8 <__aeabi_dcmple>
 8008880:	2800      	cmp	r0, #0
 8008882:	f040 81f1 	bne.w	8008c68 <_printf_float+0x460>
 8008886:	2200      	movs	r2, #0
 8008888:	2300      	movs	r3, #0
 800888a:	4640      	mov	r0, r8
 800888c:	4649      	mov	r1, r9
 800888e:	f7f8 f929 	bl	8000ae4 <__aeabi_dcmplt>
 8008892:	b110      	cbz	r0, 800889a <_printf_float+0x92>
 8008894:	232d      	movs	r3, #45	; 0x2d
 8008896:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800889a:	4b98      	ldr	r3, [pc, #608]	; (8008afc <_printf_float+0x2f4>)
 800889c:	4a98      	ldr	r2, [pc, #608]	; (8008b00 <_printf_float+0x2f8>)
 800889e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80088a2:	bf8c      	ite	hi
 80088a4:	4690      	movhi	r8, r2
 80088a6:	4698      	movls	r8, r3
 80088a8:	2303      	movs	r3, #3
 80088aa:	f02b 0204 	bic.w	r2, fp, #4
 80088ae:	6123      	str	r3, [r4, #16]
 80088b0:	6022      	str	r2, [r4, #0]
 80088b2:	f04f 0900 	mov.w	r9, #0
 80088b6:	9700      	str	r7, [sp, #0]
 80088b8:	4633      	mov	r3, r6
 80088ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80088bc:	4621      	mov	r1, r4
 80088be:	4628      	mov	r0, r5
 80088c0:	f000 f9e2 	bl	8008c88 <_printf_common>
 80088c4:	3001      	adds	r0, #1
 80088c6:	f040 8093 	bne.w	80089f0 <_printf_float+0x1e8>
 80088ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088ce:	b00d      	add	sp, #52	; 0x34
 80088d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088d4:	6861      	ldr	r1, [r4, #4]
 80088d6:	1c4b      	adds	r3, r1, #1
 80088d8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80088dc:	d13f      	bne.n	800895e <_printf_float+0x156>
 80088de:	2306      	movs	r3, #6
 80088e0:	6063      	str	r3, [r4, #4]
 80088e2:	2300      	movs	r3, #0
 80088e4:	9303      	str	r3, [sp, #12]
 80088e6:	ab0a      	add	r3, sp, #40	; 0x28
 80088e8:	9302      	str	r3, [sp, #8]
 80088ea:	ab09      	add	r3, sp, #36	; 0x24
 80088ec:	9300      	str	r3, [sp, #0]
 80088ee:	ec49 8b10 	vmov	d0, r8, r9
 80088f2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80088f6:	6022      	str	r2, [r4, #0]
 80088f8:	f8cd a004 	str.w	sl, [sp, #4]
 80088fc:	6861      	ldr	r1, [r4, #4]
 80088fe:	4628      	mov	r0, r5
 8008900:	f7ff feec 	bl	80086dc <__cvt>
 8008904:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8008908:	2b47      	cmp	r3, #71	; 0x47
 800890a:	4680      	mov	r8, r0
 800890c:	d109      	bne.n	8008922 <_printf_float+0x11a>
 800890e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008910:	1cd8      	adds	r0, r3, #3
 8008912:	db02      	blt.n	800891a <_printf_float+0x112>
 8008914:	6862      	ldr	r2, [r4, #4]
 8008916:	4293      	cmp	r3, r2
 8008918:	dd57      	ble.n	80089ca <_printf_float+0x1c2>
 800891a:	f1aa 0a02 	sub.w	sl, sl, #2
 800891e:	fa5f fa8a 	uxtb.w	sl, sl
 8008922:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008926:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008928:	d834      	bhi.n	8008994 <_printf_float+0x18c>
 800892a:	3901      	subs	r1, #1
 800892c:	4652      	mov	r2, sl
 800892e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008932:	9109      	str	r1, [sp, #36]	; 0x24
 8008934:	f7ff ff33 	bl	800879e <__exponent>
 8008938:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800893a:	1883      	adds	r3, r0, r2
 800893c:	2a01      	cmp	r2, #1
 800893e:	4681      	mov	r9, r0
 8008940:	6123      	str	r3, [r4, #16]
 8008942:	dc02      	bgt.n	800894a <_printf_float+0x142>
 8008944:	6822      	ldr	r2, [r4, #0]
 8008946:	07d1      	lsls	r1, r2, #31
 8008948:	d501      	bpl.n	800894e <_printf_float+0x146>
 800894a:	3301      	adds	r3, #1
 800894c:	6123      	str	r3, [r4, #16]
 800894e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008952:	2b00      	cmp	r3, #0
 8008954:	d0af      	beq.n	80088b6 <_printf_float+0xae>
 8008956:	232d      	movs	r3, #45	; 0x2d
 8008958:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800895c:	e7ab      	b.n	80088b6 <_printf_float+0xae>
 800895e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8008962:	d002      	beq.n	800896a <_printf_float+0x162>
 8008964:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008968:	d1bb      	bne.n	80088e2 <_printf_float+0xda>
 800896a:	b189      	cbz	r1, 8008990 <_printf_float+0x188>
 800896c:	2300      	movs	r3, #0
 800896e:	9303      	str	r3, [sp, #12]
 8008970:	ab0a      	add	r3, sp, #40	; 0x28
 8008972:	9302      	str	r3, [sp, #8]
 8008974:	ab09      	add	r3, sp, #36	; 0x24
 8008976:	9300      	str	r3, [sp, #0]
 8008978:	ec49 8b10 	vmov	d0, r8, r9
 800897c:	6022      	str	r2, [r4, #0]
 800897e:	f8cd a004 	str.w	sl, [sp, #4]
 8008982:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008986:	4628      	mov	r0, r5
 8008988:	f7ff fea8 	bl	80086dc <__cvt>
 800898c:	4680      	mov	r8, r0
 800898e:	e7be      	b.n	800890e <_printf_float+0x106>
 8008990:	2301      	movs	r3, #1
 8008992:	e7a5      	b.n	80088e0 <_printf_float+0xd8>
 8008994:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8008998:	d119      	bne.n	80089ce <_printf_float+0x1c6>
 800899a:	2900      	cmp	r1, #0
 800899c:	6863      	ldr	r3, [r4, #4]
 800899e:	dd0c      	ble.n	80089ba <_printf_float+0x1b2>
 80089a0:	6121      	str	r1, [r4, #16]
 80089a2:	b913      	cbnz	r3, 80089aa <_printf_float+0x1a2>
 80089a4:	6822      	ldr	r2, [r4, #0]
 80089a6:	07d2      	lsls	r2, r2, #31
 80089a8:	d502      	bpl.n	80089b0 <_printf_float+0x1a8>
 80089aa:	3301      	adds	r3, #1
 80089ac:	440b      	add	r3, r1
 80089ae:	6123      	str	r3, [r4, #16]
 80089b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089b2:	65a3      	str	r3, [r4, #88]	; 0x58
 80089b4:	f04f 0900 	mov.w	r9, #0
 80089b8:	e7c9      	b.n	800894e <_printf_float+0x146>
 80089ba:	b913      	cbnz	r3, 80089c2 <_printf_float+0x1ba>
 80089bc:	6822      	ldr	r2, [r4, #0]
 80089be:	07d0      	lsls	r0, r2, #31
 80089c0:	d501      	bpl.n	80089c6 <_printf_float+0x1be>
 80089c2:	3302      	adds	r3, #2
 80089c4:	e7f3      	b.n	80089ae <_printf_float+0x1a6>
 80089c6:	2301      	movs	r3, #1
 80089c8:	e7f1      	b.n	80089ae <_printf_float+0x1a6>
 80089ca:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80089ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089d2:	4293      	cmp	r3, r2
 80089d4:	db05      	blt.n	80089e2 <_printf_float+0x1da>
 80089d6:	6822      	ldr	r2, [r4, #0]
 80089d8:	6123      	str	r3, [r4, #16]
 80089da:	07d1      	lsls	r1, r2, #31
 80089dc:	d5e8      	bpl.n	80089b0 <_printf_float+0x1a8>
 80089de:	3301      	adds	r3, #1
 80089e0:	e7e5      	b.n	80089ae <_printf_float+0x1a6>
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	bfd4      	ite	le
 80089e6:	f1c3 0302 	rsble	r3, r3, #2
 80089ea:	2301      	movgt	r3, #1
 80089ec:	4413      	add	r3, r2
 80089ee:	e7de      	b.n	80089ae <_printf_float+0x1a6>
 80089f0:	6823      	ldr	r3, [r4, #0]
 80089f2:	055a      	lsls	r2, r3, #21
 80089f4:	d407      	bmi.n	8008a06 <_printf_float+0x1fe>
 80089f6:	6923      	ldr	r3, [r4, #16]
 80089f8:	4642      	mov	r2, r8
 80089fa:	4631      	mov	r1, r6
 80089fc:	4628      	mov	r0, r5
 80089fe:	47b8      	blx	r7
 8008a00:	3001      	adds	r0, #1
 8008a02:	d12b      	bne.n	8008a5c <_printf_float+0x254>
 8008a04:	e761      	b.n	80088ca <_printf_float+0xc2>
 8008a06:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008a0a:	f240 80e2 	bls.w	8008bd2 <_printf_float+0x3ca>
 8008a0e:	2200      	movs	r2, #0
 8008a10:	2300      	movs	r3, #0
 8008a12:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a16:	f7f8 f85b 	bl	8000ad0 <__aeabi_dcmpeq>
 8008a1a:	2800      	cmp	r0, #0
 8008a1c:	d03c      	beq.n	8008a98 <_printf_float+0x290>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	4a38      	ldr	r2, [pc, #224]	; (8008b04 <_printf_float+0x2fc>)
 8008a22:	4631      	mov	r1, r6
 8008a24:	4628      	mov	r0, r5
 8008a26:	47b8      	blx	r7
 8008a28:	3001      	adds	r0, #1
 8008a2a:	f43f af4e 	beq.w	80088ca <_printf_float+0xc2>
 8008a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a32:	429a      	cmp	r2, r3
 8008a34:	db02      	blt.n	8008a3c <_printf_float+0x234>
 8008a36:	6823      	ldr	r3, [r4, #0]
 8008a38:	07d8      	lsls	r0, r3, #31
 8008a3a:	d50f      	bpl.n	8008a5c <_printf_float+0x254>
 8008a3c:	9b05      	ldr	r3, [sp, #20]
 8008a3e:	9a04      	ldr	r2, [sp, #16]
 8008a40:	4631      	mov	r1, r6
 8008a42:	4628      	mov	r0, r5
 8008a44:	47b8      	blx	r7
 8008a46:	3001      	adds	r0, #1
 8008a48:	f43f af3f 	beq.w	80088ca <_printf_float+0xc2>
 8008a4c:	f04f 0800 	mov.w	r8, #0
 8008a50:	f104 091a 	add.w	r9, r4, #26
 8008a54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a56:	3b01      	subs	r3, #1
 8008a58:	4598      	cmp	r8, r3
 8008a5a:	db12      	blt.n	8008a82 <_printf_float+0x27a>
 8008a5c:	6823      	ldr	r3, [r4, #0]
 8008a5e:	079b      	lsls	r3, r3, #30
 8008a60:	d509      	bpl.n	8008a76 <_printf_float+0x26e>
 8008a62:	f04f 0800 	mov.w	r8, #0
 8008a66:	f104 0919 	add.w	r9, r4, #25
 8008a6a:	68e3      	ldr	r3, [r4, #12]
 8008a6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008a6e:	1a9b      	subs	r3, r3, r2
 8008a70:	4598      	cmp	r8, r3
 8008a72:	f2c0 80ee 	blt.w	8008c52 <_printf_float+0x44a>
 8008a76:	68e0      	ldr	r0, [r4, #12]
 8008a78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a7a:	4298      	cmp	r0, r3
 8008a7c:	bfb8      	it	lt
 8008a7e:	4618      	movlt	r0, r3
 8008a80:	e725      	b.n	80088ce <_printf_float+0xc6>
 8008a82:	2301      	movs	r3, #1
 8008a84:	464a      	mov	r2, r9
 8008a86:	4631      	mov	r1, r6
 8008a88:	4628      	mov	r0, r5
 8008a8a:	47b8      	blx	r7
 8008a8c:	3001      	adds	r0, #1
 8008a8e:	f43f af1c 	beq.w	80088ca <_printf_float+0xc2>
 8008a92:	f108 0801 	add.w	r8, r8, #1
 8008a96:	e7dd      	b.n	8008a54 <_printf_float+0x24c>
 8008a98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	dc34      	bgt.n	8008b08 <_printf_float+0x300>
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	4a18      	ldr	r2, [pc, #96]	; (8008b04 <_printf_float+0x2fc>)
 8008aa2:	4631      	mov	r1, r6
 8008aa4:	4628      	mov	r0, r5
 8008aa6:	47b8      	blx	r7
 8008aa8:	3001      	adds	r0, #1
 8008aaa:	f43f af0e 	beq.w	80088ca <_printf_float+0xc2>
 8008aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ab0:	b923      	cbnz	r3, 8008abc <_printf_float+0x2b4>
 8008ab2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ab4:	b913      	cbnz	r3, 8008abc <_printf_float+0x2b4>
 8008ab6:	6823      	ldr	r3, [r4, #0]
 8008ab8:	07d9      	lsls	r1, r3, #31
 8008aba:	d5cf      	bpl.n	8008a5c <_printf_float+0x254>
 8008abc:	9b05      	ldr	r3, [sp, #20]
 8008abe:	9a04      	ldr	r2, [sp, #16]
 8008ac0:	4631      	mov	r1, r6
 8008ac2:	4628      	mov	r0, r5
 8008ac4:	47b8      	blx	r7
 8008ac6:	3001      	adds	r0, #1
 8008ac8:	f43f aeff 	beq.w	80088ca <_printf_float+0xc2>
 8008acc:	f04f 0900 	mov.w	r9, #0
 8008ad0:	f104 0a1a 	add.w	sl, r4, #26
 8008ad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ad6:	425b      	negs	r3, r3
 8008ad8:	4599      	cmp	r9, r3
 8008ada:	db01      	blt.n	8008ae0 <_printf_float+0x2d8>
 8008adc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ade:	e78b      	b.n	80089f8 <_printf_float+0x1f0>
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	4652      	mov	r2, sl
 8008ae4:	4631      	mov	r1, r6
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	47b8      	blx	r7
 8008aea:	3001      	adds	r0, #1
 8008aec:	f43f aeed 	beq.w	80088ca <_printf_float+0xc2>
 8008af0:	f109 0901 	add.w	r9, r9, #1
 8008af4:	e7ee      	b.n	8008ad4 <_printf_float+0x2cc>
 8008af6:	bf00      	nop
 8008af8:	7fefffff 	.word	0x7fefffff
 8008afc:	0800ac8c 	.word	0x0800ac8c
 8008b00:	0800ac90 	.word	0x0800ac90
 8008b04:	0800ac9c 	.word	0x0800ac9c
 8008b08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	bfa8      	it	ge
 8008b10:	461a      	movge	r2, r3
 8008b12:	2a00      	cmp	r2, #0
 8008b14:	4691      	mov	r9, r2
 8008b16:	dc38      	bgt.n	8008b8a <_printf_float+0x382>
 8008b18:	f104 031a 	add.w	r3, r4, #26
 8008b1c:	f04f 0b00 	mov.w	fp, #0
 8008b20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b24:	9306      	str	r3, [sp, #24]
 8008b26:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008b2a:	ebaa 0309 	sub.w	r3, sl, r9
 8008b2e:	459b      	cmp	fp, r3
 8008b30:	db33      	blt.n	8008b9a <_printf_float+0x392>
 8008b32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b36:	429a      	cmp	r2, r3
 8008b38:	db3a      	blt.n	8008bb0 <_printf_float+0x3a8>
 8008b3a:	6823      	ldr	r3, [r4, #0]
 8008b3c:	07da      	lsls	r2, r3, #31
 8008b3e:	d437      	bmi.n	8008bb0 <_printf_float+0x3a8>
 8008b40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b42:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b44:	eba3 020a 	sub.w	r2, r3, sl
 8008b48:	eba3 0901 	sub.w	r9, r3, r1
 8008b4c:	4591      	cmp	r9, r2
 8008b4e:	bfa8      	it	ge
 8008b50:	4691      	movge	r9, r2
 8008b52:	f1b9 0f00 	cmp.w	r9, #0
 8008b56:	dc33      	bgt.n	8008bc0 <_printf_float+0x3b8>
 8008b58:	f04f 0800 	mov.w	r8, #0
 8008b5c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b60:	f104 0a1a 	add.w	sl, r4, #26
 8008b64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b68:	1a9b      	subs	r3, r3, r2
 8008b6a:	eba3 0309 	sub.w	r3, r3, r9
 8008b6e:	4598      	cmp	r8, r3
 8008b70:	f6bf af74 	bge.w	8008a5c <_printf_float+0x254>
 8008b74:	2301      	movs	r3, #1
 8008b76:	4652      	mov	r2, sl
 8008b78:	4631      	mov	r1, r6
 8008b7a:	4628      	mov	r0, r5
 8008b7c:	47b8      	blx	r7
 8008b7e:	3001      	adds	r0, #1
 8008b80:	f43f aea3 	beq.w	80088ca <_printf_float+0xc2>
 8008b84:	f108 0801 	add.w	r8, r8, #1
 8008b88:	e7ec      	b.n	8008b64 <_printf_float+0x35c>
 8008b8a:	4613      	mov	r3, r2
 8008b8c:	4631      	mov	r1, r6
 8008b8e:	4642      	mov	r2, r8
 8008b90:	4628      	mov	r0, r5
 8008b92:	47b8      	blx	r7
 8008b94:	3001      	adds	r0, #1
 8008b96:	d1bf      	bne.n	8008b18 <_printf_float+0x310>
 8008b98:	e697      	b.n	80088ca <_printf_float+0xc2>
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	9a06      	ldr	r2, [sp, #24]
 8008b9e:	4631      	mov	r1, r6
 8008ba0:	4628      	mov	r0, r5
 8008ba2:	47b8      	blx	r7
 8008ba4:	3001      	adds	r0, #1
 8008ba6:	f43f ae90 	beq.w	80088ca <_printf_float+0xc2>
 8008baa:	f10b 0b01 	add.w	fp, fp, #1
 8008bae:	e7ba      	b.n	8008b26 <_printf_float+0x31e>
 8008bb0:	9b05      	ldr	r3, [sp, #20]
 8008bb2:	9a04      	ldr	r2, [sp, #16]
 8008bb4:	4631      	mov	r1, r6
 8008bb6:	4628      	mov	r0, r5
 8008bb8:	47b8      	blx	r7
 8008bba:	3001      	adds	r0, #1
 8008bbc:	d1c0      	bne.n	8008b40 <_printf_float+0x338>
 8008bbe:	e684      	b.n	80088ca <_printf_float+0xc2>
 8008bc0:	464b      	mov	r3, r9
 8008bc2:	eb08 020a 	add.w	r2, r8, sl
 8008bc6:	4631      	mov	r1, r6
 8008bc8:	4628      	mov	r0, r5
 8008bca:	47b8      	blx	r7
 8008bcc:	3001      	adds	r0, #1
 8008bce:	d1c3      	bne.n	8008b58 <_printf_float+0x350>
 8008bd0:	e67b      	b.n	80088ca <_printf_float+0xc2>
 8008bd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008bd4:	2a01      	cmp	r2, #1
 8008bd6:	dc01      	bgt.n	8008bdc <_printf_float+0x3d4>
 8008bd8:	07db      	lsls	r3, r3, #31
 8008bda:	d537      	bpl.n	8008c4c <_printf_float+0x444>
 8008bdc:	2301      	movs	r3, #1
 8008bde:	4642      	mov	r2, r8
 8008be0:	4631      	mov	r1, r6
 8008be2:	4628      	mov	r0, r5
 8008be4:	47b8      	blx	r7
 8008be6:	3001      	adds	r0, #1
 8008be8:	f43f ae6f 	beq.w	80088ca <_printf_float+0xc2>
 8008bec:	9b05      	ldr	r3, [sp, #20]
 8008bee:	9a04      	ldr	r2, [sp, #16]
 8008bf0:	4631      	mov	r1, r6
 8008bf2:	4628      	mov	r0, r5
 8008bf4:	47b8      	blx	r7
 8008bf6:	3001      	adds	r0, #1
 8008bf8:	f43f ae67 	beq.w	80088ca <_printf_float+0xc2>
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	2300      	movs	r3, #0
 8008c00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008c04:	f7f7 ff64 	bl	8000ad0 <__aeabi_dcmpeq>
 8008c08:	b158      	cbz	r0, 8008c22 <_printf_float+0x41a>
 8008c0a:	f04f 0800 	mov.w	r8, #0
 8008c0e:	f104 0a1a 	add.w	sl, r4, #26
 8008c12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c14:	3b01      	subs	r3, #1
 8008c16:	4598      	cmp	r8, r3
 8008c18:	db0d      	blt.n	8008c36 <_printf_float+0x42e>
 8008c1a:	464b      	mov	r3, r9
 8008c1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008c20:	e6eb      	b.n	80089fa <_printf_float+0x1f2>
 8008c22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c24:	f108 0201 	add.w	r2, r8, #1
 8008c28:	3b01      	subs	r3, #1
 8008c2a:	4631      	mov	r1, r6
 8008c2c:	4628      	mov	r0, r5
 8008c2e:	47b8      	blx	r7
 8008c30:	3001      	adds	r0, #1
 8008c32:	d1f2      	bne.n	8008c1a <_printf_float+0x412>
 8008c34:	e649      	b.n	80088ca <_printf_float+0xc2>
 8008c36:	2301      	movs	r3, #1
 8008c38:	4652      	mov	r2, sl
 8008c3a:	4631      	mov	r1, r6
 8008c3c:	4628      	mov	r0, r5
 8008c3e:	47b8      	blx	r7
 8008c40:	3001      	adds	r0, #1
 8008c42:	f43f ae42 	beq.w	80088ca <_printf_float+0xc2>
 8008c46:	f108 0801 	add.w	r8, r8, #1
 8008c4a:	e7e2      	b.n	8008c12 <_printf_float+0x40a>
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	4642      	mov	r2, r8
 8008c50:	e7eb      	b.n	8008c2a <_printf_float+0x422>
 8008c52:	2301      	movs	r3, #1
 8008c54:	464a      	mov	r2, r9
 8008c56:	4631      	mov	r1, r6
 8008c58:	4628      	mov	r0, r5
 8008c5a:	47b8      	blx	r7
 8008c5c:	3001      	adds	r0, #1
 8008c5e:	f43f ae34 	beq.w	80088ca <_printf_float+0xc2>
 8008c62:	f108 0801 	add.w	r8, r8, #1
 8008c66:	e700      	b.n	8008a6a <_printf_float+0x262>
 8008c68:	4642      	mov	r2, r8
 8008c6a:	464b      	mov	r3, r9
 8008c6c:	4640      	mov	r0, r8
 8008c6e:	4649      	mov	r1, r9
 8008c70:	f7f7 ff60 	bl	8000b34 <__aeabi_dcmpun>
 8008c74:	2800      	cmp	r0, #0
 8008c76:	f43f ae2d 	beq.w	80088d4 <_printf_float+0xcc>
 8008c7a:	4b01      	ldr	r3, [pc, #4]	; (8008c80 <_printf_float+0x478>)
 8008c7c:	4a01      	ldr	r2, [pc, #4]	; (8008c84 <_printf_float+0x47c>)
 8008c7e:	e60e      	b.n	800889e <_printf_float+0x96>
 8008c80:	0800ac94 	.word	0x0800ac94
 8008c84:	0800ac98 	.word	0x0800ac98

08008c88 <_printf_common>:
 8008c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c8c:	4691      	mov	r9, r2
 8008c8e:	461f      	mov	r7, r3
 8008c90:	688a      	ldr	r2, [r1, #8]
 8008c92:	690b      	ldr	r3, [r1, #16]
 8008c94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	bfb8      	it	lt
 8008c9c:	4613      	movlt	r3, r2
 8008c9e:	f8c9 3000 	str.w	r3, [r9]
 8008ca2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ca6:	4606      	mov	r6, r0
 8008ca8:	460c      	mov	r4, r1
 8008caa:	b112      	cbz	r2, 8008cb2 <_printf_common+0x2a>
 8008cac:	3301      	adds	r3, #1
 8008cae:	f8c9 3000 	str.w	r3, [r9]
 8008cb2:	6823      	ldr	r3, [r4, #0]
 8008cb4:	0699      	lsls	r1, r3, #26
 8008cb6:	bf42      	ittt	mi
 8008cb8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008cbc:	3302      	addmi	r3, #2
 8008cbe:	f8c9 3000 	strmi.w	r3, [r9]
 8008cc2:	6825      	ldr	r5, [r4, #0]
 8008cc4:	f015 0506 	ands.w	r5, r5, #6
 8008cc8:	d107      	bne.n	8008cda <_printf_common+0x52>
 8008cca:	f104 0a19 	add.w	sl, r4, #25
 8008cce:	68e3      	ldr	r3, [r4, #12]
 8008cd0:	f8d9 2000 	ldr.w	r2, [r9]
 8008cd4:	1a9b      	subs	r3, r3, r2
 8008cd6:	429d      	cmp	r5, r3
 8008cd8:	db29      	blt.n	8008d2e <_printf_common+0xa6>
 8008cda:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008cde:	6822      	ldr	r2, [r4, #0]
 8008ce0:	3300      	adds	r3, #0
 8008ce2:	bf18      	it	ne
 8008ce4:	2301      	movne	r3, #1
 8008ce6:	0692      	lsls	r2, r2, #26
 8008ce8:	d42e      	bmi.n	8008d48 <_printf_common+0xc0>
 8008cea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008cee:	4639      	mov	r1, r7
 8008cf0:	4630      	mov	r0, r6
 8008cf2:	47c0      	blx	r8
 8008cf4:	3001      	adds	r0, #1
 8008cf6:	d021      	beq.n	8008d3c <_printf_common+0xb4>
 8008cf8:	6823      	ldr	r3, [r4, #0]
 8008cfa:	68e5      	ldr	r5, [r4, #12]
 8008cfc:	f8d9 2000 	ldr.w	r2, [r9]
 8008d00:	f003 0306 	and.w	r3, r3, #6
 8008d04:	2b04      	cmp	r3, #4
 8008d06:	bf08      	it	eq
 8008d08:	1aad      	subeq	r5, r5, r2
 8008d0a:	68a3      	ldr	r3, [r4, #8]
 8008d0c:	6922      	ldr	r2, [r4, #16]
 8008d0e:	bf0c      	ite	eq
 8008d10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d14:	2500      	movne	r5, #0
 8008d16:	4293      	cmp	r3, r2
 8008d18:	bfc4      	itt	gt
 8008d1a:	1a9b      	subgt	r3, r3, r2
 8008d1c:	18ed      	addgt	r5, r5, r3
 8008d1e:	f04f 0900 	mov.w	r9, #0
 8008d22:	341a      	adds	r4, #26
 8008d24:	454d      	cmp	r5, r9
 8008d26:	d11b      	bne.n	8008d60 <_printf_common+0xd8>
 8008d28:	2000      	movs	r0, #0
 8008d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d2e:	2301      	movs	r3, #1
 8008d30:	4652      	mov	r2, sl
 8008d32:	4639      	mov	r1, r7
 8008d34:	4630      	mov	r0, r6
 8008d36:	47c0      	blx	r8
 8008d38:	3001      	adds	r0, #1
 8008d3a:	d103      	bne.n	8008d44 <_printf_common+0xbc>
 8008d3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d44:	3501      	adds	r5, #1
 8008d46:	e7c2      	b.n	8008cce <_printf_common+0x46>
 8008d48:	18e1      	adds	r1, r4, r3
 8008d4a:	1c5a      	adds	r2, r3, #1
 8008d4c:	2030      	movs	r0, #48	; 0x30
 8008d4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d52:	4422      	add	r2, r4
 8008d54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d5c:	3302      	adds	r3, #2
 8008d5e:	e7c4      	b.n	8008cea <_printf_common+0x62>
 8008d60:	2301      	movs	r3, #1
 8008d62:	4622      	mov	r2, r4
 8008d64:	4639      	mov	r1, r7
 8008d66:	4630      	mov	r0, r6
 8008d68:	47c0      	blx	r8
 8008d6a:	3001      	adds	r0, #1
 8008d6c:	d0e6      	beq.n	8008d3c <_printf_common+0xb4>
 8008d6e:	f109 0901 	add.w	r9, r9, #1
 8008d72:	e7d7      	b.n	8008d24 <_printf_common+0x9c>

08008d74 <_printf_i>:
 8008d74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d78:	4617      	mov	r7, r2
 8008d7a:	7e0a      	ldrb	r2, [r1, #24]
 8008d7c:	b085      	sub	sp, #20
 8008d7e:	2a6e      	cmp	r2, #110	; 0x6e
 8008d80:	4698      	mov	r8, r3
 8008d82:	4606      	mov	r6, r0
 8008d84:	460c      	mov	r4, r1
 8008d86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d88:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8008d8c:	f000 80bc 	beq.w	8008f08 <_printf_i+0x194>
 8008d90:	d81a      	bhi.n	8008dc8 <_printf_i+0x54>
 8008d92:	2a63      	cmp	r2, #99	; 0x63
 8008d94:	d02e      	beq.n	8008df4 <_printf_i+0x80>
 8008d96:	d80a      	bhi.n	8008dae <_printf_i+0x3a>
 8008d98:	2a00      	cmp	r2, #0
 8008d9a:	f000 80c8 	beq.w	8008f2e <_printf_i+0x1ba>
 8008d9e:	2a58      	cmp	r2, #88	; 0x58
 8008da0:	f000 808a 	beq.w	8008eb8 <_printf_i+0x144>
 8008da4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008da8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8008dac:	e02a      	b.n	8008e04 <_printf_i+0x90>
 8008dae:	2a64      	cmp	r2, #100	; 0x64
 8008db0:	d001      	beq.n	8008db6 <_printf_i+0x42>
 8008db2:	2a69      	cmp	r2, #105	; 0x69
 8008db4:	d1f6      	bne.n	8008da4 <_printf_i+0x30>
 8008db6:	6821      	ldr	r1, [r4, #0]
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	f011 0f80 	tst.w	r1, #128	; 0x80
 8008dbe:	d023      	beq.n	8008e08 <_printf_i+0x94>
 8008dc0:	1d11      	adds	r1, r2, #4
 8008dc2:	6019      	str	r1, [r3, #0]
 8008dc4:	6813      	ldr	r3, [r2, #0]
 8008dc6:	e027      	b.n	8008e18 <_printf_i+0xa4>
 8008dc8:	2a73      	cmp	r2, #115	; 0x73
 8008dca:	f000 80b4 	beq.w	8008f36 <_printf_i+0x1c2>
 8008dce:	d808      	bhi.n	8008de2 <_printf_i+0x6e>
 8008dd0:	2a6f      	cmp	r2, #111	; 0x6f
 8008dd2:	d02a      	beq.n	8008e2a <_printf_i+0xb6>
 8008dd4:	2a70      	cmp	r2, #112	; 0x70
 8008dd6:	d1e5      	bne.n	8008da4 <_printf_i+0x30>
 8008dd8:	680a      	ldr	r2, [r1, #0]
 8008dda:	f042 0220 	orr.w	r2, r2, #32
 8008dde:	600a      	str	r2, [r1, #0]
 8008de0:	e003      	b.n	8008dea <_printf_i+0x76>
 8008de2:	2a75      	cmp	r2, #117	; 0x75
 8008de4:	d021      	beq.n	8008e2a <_printf_i+0xb6>
 8008de6:	2a78      	cmp	r2, #120	; 0x78
 8008de8:	d1dc      	bne.n	8008da4 <_printf_i+0x30>
 8008dea:	2278      	movs	r2, #120	; 0x78
 8008dec:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8008df0:	496e      	ldr	r1, [pc, #440]	; (8008fac <_printf_i+0x238>)
 8008df2:	e064      	b.n	8008ebe <_printf_i+0x14a>
 8008df4:	681a      	ldr	r2, [r3, #0]
 8008df6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8008dfa:	1d11      	adds	r1, r2, #4
 8008dfc:	6019      	str	r1, [r3, #0]
 8008dfe:	6813      	ldr	r3, [r2, #0]
 8008e00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e04:	2301      	movs	r3, #1
 8008e06:	e0a3      	b.n	8008f50 <_printf_i+0x1dc>
 8008e08:	f011 0f40 	tst.w	r1, #64	; 0x40
 8008e0c:	f102 0104 	add.w	r1, r2, #4
 8008e10:	6019      	str	r1, [r3, #0]
 8008e12:	d0d7      	beq.n	8008dc4 <_printf_i+0x50>
 8008e14:	f9b2 3000 	ldrsh.w	r3, [r2]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	da03      	bge.n	8008e24 <_printf_i+0xb0>
 8008e1c:	222d      	movs	r2, #45	; 0x2d
 8008e1e:	425b      	negs	r3, r3
 8008e20:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008e24:	4962      	ldr	r1, [pc, #392]	; (8008fb0 <_printf_i+0x23c>)
 8008e26:	220a      	movs	r2, #10
 8008e28:	e017      	b.n	8008e5a <_printf_i+0xe6>
 8008e2a:	6820      	ldr	r0, [r4, #0]
 8008e2c:	6819      	ldr	r1, [r3, #0]
 8008e2e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8008e32:	d003      	beq.n	8008e3c <_printf_i+0xc8>
 8008e34:	1d08      	adds	r0, r1, #4
 8008e36:	6018      	str	r0, [r3, #0]
 8008e38:	680b      	ldr	r3, [r1, #0]
 8008e3a:	e006      	b.n	8008e4a <_printf_i+0xd6>
 8008e3c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008e40:	f101 0004 	add.w	r0, r1, #4
 8008e44:	6018      	str	r0, [r3, #0]
 8008e46:	d0f7      	beq.n	8008e38 <_printf_i+0xc4>
 8008e48:	880b      	ldrh	r3, [r1, #0]
 8008e4a:	4959      	ldr	r1, [pc, #356]	; (8008fb0 <_printf_i+0x23c>)
 8008e4c:	2a6f      	cmp	r2, #111	; 0x6f
 8008e4e:	bf14      	ite	ne
 8008e50:	220a      	movne	r2, #10
 8008e52:	2208      	moveq	r2, #8
 8008e54:	2000      	movs	r0, #0
 8008e56:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8008e5a:	6865      	ldr	r5, [r4, #4]
 8008e5c:	60a5      	str	r5, [r4, #8]
 8008e5e:	2d00      	cmp	r5, #0
 8008e60:	f2c0 809c 	blt.w	8008f9c <_printf_i+0x228>
 8008e64:	6820      	ldr	r0, [r4, #0]
 8008e66:	f020 0004 	bic.w	r0, r0, #4
 8008e6a:	6020      	str	r0, [r4, #0]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d13f      	bne.n	8008ef0 <_printf_i+0x17c>
 8008e70:	2d00      	cmp	r5, #0
 8008e72:	f040 8095 	bne.w	8008fa0 <_printf_i+0x22c>
 8008e76:	4675      	mov	r5, lr
 8008e78:	2a08      	cmp	r2, #8
 8008e7a:	d10b      	bne.n	8008e94 <_printf_i+0x120>
 8008e7c:	6823      	ldr	r3, [r4, #0]
 8008e7e:	07da      	lsls	r2, r3, #31
 8008e80:	d508      	bpl.n	8008e94 <_printf_i+0x120>
 8008e82:	6923      	ldr	r3, [r4, #16]
 8008e84:	6862      	ldr	r2, [r4, #4]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	bfde      	ittt	le
 8008e8a:	2330      	movle	r3, #48	; 0x30
 8008e8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e90:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008e94:	ebae 0305 	sub.w	r3, lr, r5
 8008e98:	6123      	str	r3, [r4, #16]
 8008e9a:	f8cd 8000 	str.w	r8, [sp]
 8008e9e:	463b      	mov	r3, r7
 8008ea0:	aa03      	add	r2, sp, #12
 8008ea2:	4621      	mov	r1, r4
 8008ea4:	4630      	mov	r0, r6
 8008ea6:	f7ff feef 	bl	8008c88 <_printf_common>
 8008eaa:	3001      	adds	r0, #1
 8008eac:	d155      	bne.n	8008f5a <_printf_i+0x1e6>
 8008eae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008eb2:	b005      	add	sp, #20
 8008eb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008eb8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8008ebc:	493c      	ldr	r1, [pc, #240]	; (8008fb0 <_printf_i+0x23c>)
 8008ebe:	6822      	ldr	r2, [r4, #0]
 8008ec0:	6818      	ldr	r0, [r3, #0]
 8008ec2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008ec6:	f100 0504 	add.w	r5, r0, #4
 8008eca:	601d      	str	r5, [r3, #0]
 8008ecc:	d001      	beq.n	8008ed2 <_printf_i+0x15e>
 8008ece:	6803      	ldr	r3, [r0, #0]
 8008ed0:	e002      	b.n	8008ed8 <_printf_i+0x164>
 8008ed2:	0655      	lsls	r5, r2, #25
 8008ed4:	d5fb      	bpl.n	8008ece <_printf_i+0x15a>
 8008ed6:	8803      	ldrh	r3, [r0, #0]
 8008ed8:	07d0      	lsls	r0, r2, #31
 8008eda:	bf44      	itt	mi
 8008edc:	f042 0220 	orrmi.w	r2, r2, #32
 8008ee0:	6022      	strmi	r2, [r4, #0]
 8008ee2:	b91b      	cbnz	r3, 8008eec <_printf_i+0x178>
 8008ee4:	6822      	ldr	r2, [r4, #0]
 8008ee6:	f022 0220 	bic.w	r2, r2, #32
 8008eea:	6022      	str	r2, [r4, #0]
 8008eec:	2210      	movs	r2, #16
 8008eee:	e7b1      	b.n	8008e54 <_printf_i+0xe0>
 8008ef0:	4675      	mov	r5, lr
 8008ef2:	fbb3 f0f2 	udiv	r0, r3, r2
 8008ef6:	fb02 3310 	mls	r3, r2, r0, r3
 8008efa:	5ccb      	ldrb	r3, [r1, r3]
 8008efc:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008f00:	4603      	mov	r3, r0
 8008f02:	2800      	cmp	r0, #0
 8008f04:	d1f5      	bne.n	8008ef2 <_printf_i+0x17e>
 8008f06:	e7b7      	b.n	8008e78 <_printf_i+0x104>
 8008f08:	6808      	ldr	r0, [r1, #0]
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	6949      	ldr	r1, [r1, #20]
 8008f0e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8008f12:	d004      	beq.n	8008f1e <_printf_i+0x1aa>
 8008f14:	1d10      	adds	r0, r2, #4
 8008f16:	6018      	str	r0, [r3, #0]
 8008f18:	6813      	ldr	r3, [r2, #0]
 8008f1a:	6019      	str	r1, [r3, #0]
 8008f1c:	e007      	b.n	8008f2e <_printf_i+0x1ba>
 8008f1e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008f22:	f102 0004 	add.w	r0, r2, #4
 8008f26:	6018      	str	r0, [r3, #0]
 8008f28:	6813      	ldr	r3, [r2, #0]
 8008f2a:	d0f6      	beq.n	8008f1a <_printf_i+0x1a6>
 8008f2c:	8019      	strh	r1, [r3, #0]
 8008f2e:	2300      	movs	r3, #0
 8008f30:	6123      	str	r3, [r4, #16]
 8008f32:	4675      	mov	r5, lr
 8008f34:	e7b1      	b.n	8008e9a <_printf_i+0x126>
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	1d11      	adds	r1, r2, #4
 8008f3a:	6019      	str	r1, [r3, #0]
 8008f3c:	6815      	ldr	r5, [r2, #0]
 8008f3e:	6862      	ldr	r2, [r4, #4]
 8008f40:	2100      	movs	r1, #0
 8008f42:	4628      	mov	r0, r5
 8008f44:	f7f7 f954 	bl	80001f0 <memchr>
 8008f48:	b108      	cbz	r0, 8008f4e <_printf_i+0x1da>
 8008f4a:	1b40      	subs	r0, r0, r5
 8008f4c:	6060      	str	r0, [r4, #4]
 8008f4e:	6863      	ldr	r3, [r4, #4]
 8008f50:	6123      	str	r3, [r4, #16]
 8008f52:	2300      	movs	r3, #0
 8008f54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f58:	e79f      	b.n	8008e9a <_printf_i+0x126>
 8008f5a:	6923      	ldr	r3, [r4, #16]
 8008f5c:	462a      	mov	r2, r5
 8008f5e:	4639      	mov	r1, r7
 8008f60:	4630      	mov	r0, r6
 8008f62:	47c0      	blx	r8
 8008f64:	3001      	adds	r0, #1
 8008f66:	d0a2      	beq.n	8008eae <_printf_i+0x13a>
 8008f68:	6823      	ldr	r3, [r4, #0]
 8008f6a:	079b      	lsls	r3, r3, #30
 8008f6c:	d507      	bpl.n	8008f7e <_printf_i+0x20a>
 8008f6e:	2500      	movs	r5, #0
 8008f70:	f104 0919 	add.w	r9, r4, #25
 8008f74:	68e3      	ldr	r3, [r4, #12]
 8008f76:	9a03      	ldr	r2, [sp, #12]
 8008f78:	1a9b      	subs	r3, r3, r2
 8008f7a:	429d      	cmp	r5, r3
 8008f7c:	db05      	blt.n	8008f8a <_printf_i+0x216>
 8008f7e:	68e0      	ldr	r0, [r4, #12]
 8008f80:	9b03      	ldr	r3, [sp, #12]
 8008f82:	4298      	cmp	r0, r3
 8008f84:	bfb8      	it	lt
 8008f86:	4618      	movlt	r0, r3
 8008f88:	e793      	b.n	8008eb2 <_printf_i+0x13e>
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	464a      	mov	r2, r9
 8008f8e:	4639      	mov	r1, r7
 8008f90:	4630      	mov	r0, r6
 8008f92:	47c0      	blx	r8
 8008f94:	3001      	adds	r0, #1
 8008f96:	d08a      	beq.n	8008eae <_printf_i+0x13a>
 8008f98:	3501      	adds	r5, #1
 8008f9a:	e7eb      	b.n	8008f74 <_printf_i+0x200>
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d1a7      	bne.n	8008ef0 <_printf_i+0x17c>
 8008fa0:	780b      	ldrb	r3, [r1, #0]
 8008fa2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fa6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008faa:	e765      	b.n	8008e78 <_printf_i+0x104>
 8008fac:	0800acaf 	.word	0x0800acaf
 8008fb0:	0800ac9e 	.word	0x0800ac9e

08008fb4 <iprintf>:
 8008fb4:	b40f      	push	{r0, r1, r2, r3}
 8008fb6:	4b0a      	ldr	r3, [pc, #40]	; (8008fe0 <iprintf+0x2c>)
 8008fb8:	b513      	push	{r0, r1, r4, lr}
 8008fba:	681c      	ldr	r4, [r3, #0]
 8008fbc:	b124      	cbz	r4, 8008fc8 <iprintf+0x14>
 8008fbe:	69a3      	ldr	r3, [r4, #24]
 8008fc0:	b913      	cbnz	r3, 8008fc8 <iprintf+0x14>
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	f7ff fa1c 	bl	8008400 <__sinit>
 8008fc8:	ab05      	add	r3, sp, #20
 8008fca:	9a04      	ldr	r2, [sp, #16]
 8008fcc:	68a1      	ldr	r1, [r4, #8]
 8008fce:	9301      	str	r3, [sp, #4]
 8008fd0:	4620      	mov	r0, r4
 8008fd2:	f001 fc55 	bl	800a880 <_vfiprintf_r>
 8008fd6:	b002      	add	sp, #8
 8008fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fdc:	b004      	add	sp, #16
 8008fde:	4770      	bx	lr
 8008fe0:	200001a0 	.word	0x200001a0

08008fe4 <_puts_r>:
 8008fe4:	b570      	push	{r4, r5, r6, lr}
 8008fe6:	460e      	mov	r6, r1
 8008fe8:	4605      	mov	r5, r0
 8008fea:	b118      	cbz	r0, 8008ff4 <_puts_r+0x10>
 8008fec:	6983      	ldr	r3, [r0, #24]
 8008fee:	b90b      	cbnz	r3, 8008ff4 <_puts_r+0x10>
 8008ff0:	f7ff fa06 	bl	8008400 <__sinit>
 8008ff4:	69ab      	ldr	r3, [r5, #24]
 8008ff6:	68ac      	ldr	r4, [r5, #8]
 8008ff8:	b913      	cbnz	r3, 8009000 <_puts_r+0x1c>
 8008ffa:	4628      	mov	r0, r5
 8008ffc:	f7ff fa00 	bl	8008400 <__sinit>
 8009000:	4b23      	ldr	r3, [pc, #140]	; (8009090 <_puts_r+0xac>)
 8009002:	429c      	cmp	r4, r3
 8009004:	d117      	bne.n	8009036 <_puts_r+0x52>
 8009006:	686c      	ldr	r4, [r5, #4]
 8009008:	89a3      	ldrh	r3, [r4, #12]
 800900a:	071b      	lsls	r3, r3, #28
 800900c:	d51d      	bpl.n	800904a <_puts_r+0x66>
 800900e:	6923      	ldr	r3, [r4, #16]
 8009010:	b1db      	cbz	r3, 800904a <_puts_r+0x66>
 8009012:	3e01      	subs	r6, #1
 8009014:	68a3      	ldr	r3, [r4, #8]
 8009016:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800901a:	3b01      	subs	r3, #1
 800901c:	60a3      	str	r3, [r4, #8]
 800901e:	b9e9      	cbnz	r1, 800905c <_puts_r+0x78>
 8009020:	2b00      	cmp	r3, #0
 8009022:	da2e      	bge.n	8009082 <_puts_r+0x9e>
 8009024:	4622      	mov	r2, r4
 8009026:	210a      	movs	r1, #10
 8009028:	4628      	mov	r0, r5
 800902a:	f000 f955 	bl	80092d8 <__swbuf_r>
 800902e:	3001      	adds	r0, #1
 8009030:	d011      	beq.n	8009056 <_puts_r+0x72>
 8009032:	200a      	movs	r0, #10
 8009034:	bd70      	pop	{r4, r5, r6, pc}
 8009036:	4b17      	ldr	r3, [pc, #92]	; (8009094 <_puts_r+0xb0>)
 8009038:	429c      	cmp	r4, r3
 800903a:	d101      	bne.n	8009040 <_puts_r+0x5c>
 800903c:	68ac      	ldr	r4, [r5, #8]
 800903e:	e7e3      	b.n	8009008 <_puts_r+0x24>
 8009040:	4b15      	ldr	r3, [pc, #84]	; (8009098 <_puts_r+0xb4>)
 8009042:	429c      	cmp	r4, r3
 8009044:	bf08      	it	eq
 8009046:	68ec      	ldreq	r4, [r5, #12]
 8009048:	e7de      	b.n	8009008 <_puts_r+0x24>
 800904a:	4621      	mov	r1, r4
 800904c:	4628      	mov	r0, r5
 800904e:	f000 f9a7 	bl	80093a0 <__swsetup_r>
 8009052:	2800      	cmp	r0, #0
 8009054:	d0dd      	beq.n	8009012 <_puts_r+0x2e>
 8009056:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800905a:	bd70      	pop	{r4, r5, r6, pc}
 800905c:	2b00      	cmp	r3, #0
 800905e:	da04      	bge.n	800906a <_puts_r+0x86>
 8009060:	69a2      	ldr	r2, [r4, #24]
 8009062:	4293      	cmp	r3, r2
 8009064:	db06      	blt.n	8009074 <_puts_r+0x90>
 8009066:	290a      	cmp	r1, #10
 8009068:	d004      	beq.n	8009074 <_puts_r+0x90>
 800906a:	6823      	ldr	r3, [r4, #0]
 800906c:	1c5a      	adds	r2, r3, #1
 800906e:	6022      	str	r2, [r4, #0]
 8009070:	7019      	strb	r1, [r3, #0]
 8009072:	e7cf      	b.n	8009014 <_puts_r+0x30>
 8009074:	4622      	mov	r2, r4
 8009076:	4628      	mov	r0, r5
 8009078:	f000 f92e 	bl	80092d8 <__swbuf_r>
 800907c:	3001      	adds	r0, #1
 800907e:	d1c9      	bne.n	8009014 <_puts_r+0x30>
 8009080:	e7e9      	b.n	8009056 <_puts_r+0x72>
 8009082:	6823      	ldr	r3, [r4, #0]
 8009084:	200a      	movs	r0, #10
 8009086:	1c5a      	adds	r2, r3, #1
 8009088:	6022      	str	r2, [r4, #0]
 800908a:	7018      	strb	r0, [r3, #0]
 800908c:	bd70      	pop	{r4, r5, r6, pc}
 800908e:	bf00      	nop
 8009090:	0800ac48 	.word	0x0800ac48
 8009094:	0800ac68 	.word	0x0800ac68
 8009098:	0800ac28 	.word	0x0800ac28

0800909c <puts>:
 800909c:	4b02      	ldr	r3, [pc, #8]	; (80090a8 <puts+0xc>)
 800909e:	4601      	mov	r1, r0
 80090a0:	6818      	ldr	r0, [r3, #0]
 80090a2:	f7ff bf9f 	b.w	8008fe4 <_puts_r>
 80090a6:	bf00      	nop
 80090a8:	200001a0 	.word	0x200001a0

080090ac <_sbrk_r>:
 80090ac:	b538      	push	{r3, r4, r5, lr}
 80090ae:	4c06      	ldr	r4, [pc, #24]	; (80090c8 <_sbrk_r+0x1c>)
 80090b0:	2300      	movs	r3, #0
 80090b2:	4605      	mov	r5, r0
 80090b4:	4608      	mov	r0, r1
 80090b6:	6023      	str	r3, [r4, #0]
 80090b8:	f7fe fcf8 	bl	8007aac <_sbrk>
 80090bc:	1c43      	adds	r3, r0, #1
 80090be:	d102      	bne.n	80090c6 <_sbrk_r+0x1a>
 80090c0:	6823      	ldr	r3, [r4, #0]
 80090c2:	b103      	cbz	r3, 80090c6 <_sbrk_r+0x1a>
 80090c4:	602b      	str	r3, [r5, #0]
 80090c6:	bd38      	pop	{r3, r4, r5, pc}
 80090c8:	20001558 	.word	0x20001558

080090cc <setvbuf>:
 80090cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80090d0:	461d      	mov	r5, r3
 80090d2:	4b51      	ldr	r3, [pc, #324]	; (8009218 <setvbuf+0x14c>)
 80090d4:	681e      	ldr	r6, [r3, #0]
 80090d6:	4604      	mov	r4, r0
 80090d8:	460f      	mov	r7, r1
 80090da:	4690      	mov	r8, r2
 80090dc:	b126      	cbz	r6, 80090e8 <setvbuf+0x1c>
 80090de:	69b3      	ldr	r3, [r6, #24]
 80090e0:	b913      	cbnz	r3, 80090e8 <setvbuf+0x1c>
 80090e2:	4630      	mov	r0, r6
 80090e4:	f7ff f98c 	bl	8008400 <__sinit>
 80090e8:	4b4c      	ldr	r3, [pc, #304]	; (800921c <setvbuf+0x150>)
 80090ea:	429c      	cmp	r4, r3
 80090ec:	d152      	bne.n	8009194 <setvbuf+0xc8>
 80090ee:	6874      	ldr	r4, [r6, #4]
 80090f0:	f1b8 0f02 	cmp.w	r8, #2
 80090f4:	d006      	beq.n	8009104 <setvbuf+0x38>
 80090f6:	f1b8 0f01 	cmp.w	r8, #1
 80090fa:	f200 8089 	bhi.w	8009210 <setvbuf+0x144>
 80090fe:	2d00      	cmp	r5, #0
 8009100:	f2c0 8086 	blt.w	8009210 <setvbuf+0x144>
 8009104:	4621      	mov	r1, r4
 8009106:	4630      	mov	r0, r6
 8009108:	f7ff f910 	bl	800832c <_fflush_r>
 800910c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800910e:	b141      	cbz	r1, 8009122 <setvbuf+0x56>
 8009110:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009114:	4299      	cmp	r1, r3
 8009116:	d002      	beq.n	800911e <setvbuf+0x52>
 8009118:	4630      	mov	r0, r6
 800911a:	f7ff fa33 	bl	8008584 <_free_r>
 800911e:	2300      	movs	r3, #0
 8009120:	6363      	str	r3, [r4, #52]	; 0x34
 8009122:	2300      	movs	r3, #0
 8009124:	61a3      	str	r3, [r4, #24]
 8009126:	6063      	str	r3, [r4, #4]
 8009128:	89a3      	ldrh	r3, [r4, #12]
 800912a:	061b      	lsls	r3, r3, #24
 800912c:	d503      	bpl.n	8009136 <setvbuf+0x6a>
 800912e:	6921      	ldr	r1, [r4, #16]
 8009130:	4630      	mov	r0, r6
 8009132:	f7ff fa27 	bl	8008584 <_free_r>
 8009136:	89a3      	ldrh	r3, [r4, #12]
 8009138:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800913c:	f023 0303 	bic.w	r3, r3, #3
 8009140:	f1b8 0f02 	cmp.w	r8, #2
 8009144:	81a3      	strh	r3, [r4, #12]
 8009146:	d05d      	beq.n	8009204 <setvbuf+0x138>
 8009148:	ab01      	add	r3, sp, #4
 800914a:	466a      	mov	r2, sp
 800914c:	4621      	mov	r1, r4
 800914e:	4630      	mov	r0, r6
 8009150:	f001 f820 	bl	800a194 <__swhatbuf_r>
 8009154:	89a3      	ldrh	r3, [r4, #12]
 8009156:	4318      	orrs	r0, r3
 8009158:	81a0      	strh	r0, [r4, #12]
 800915a:	bb2d      	cbnz	r5, 80091a8 <setvbuf+0xdc>
 800915c:	9d00      	ldr	r5, [sp, #0]
 800915e:	4628      	mov	r0, r5
 8009160:	f001 f87c 	bl	800a25c <malloc>
 8009164:	4607      	mov	r7, r0
 8009166:	2800      	cmp	r0, #0
 8009168:	d14e      	bne.n	8009208 <setvbuf+0x13c>
 800916a:	f8dd 9000 	ldr.w	r9, [sp]
 800916e:	45a9      	cmp	r9, r5
 8009170:	d13c      	bne.n	80091ec <setvbuf+0x120>
 8009172:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009176:	89a3      	ldrh	r3, [r4, #12]
 8009178:	f043 0302 	orr.w	r3, r3, #2
 800917c:	81a3      	strh	r3, [r4, #12]
 800917e:	2300      	movs	r3, #0
 8009180:	60a3      	str	r3, [r4, #8]
 8009182:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009186:	6023      	str	r3, [r4, #0]
 8009188:	6123      	str	r3, [r4, #16]
 800918a:	2301      	movs	r3, #1
 800918c:	6163      	str	r3, [r4, #20]
 800918e:	b003      	add	sp, #12
 8009190:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009194:	4b22      	ldr	r3, [pc, #136]	; (8009220 <setvbuf+0x154>)
 8009196:	429c      	cmp	r4, r3
 8009198:	d101      	bne.n	800919e <setvbuf+0xd2>
 800919a:	68b4      	ldr	r4, [r6, #8]
 800919c:	e7a8      	b.n	80090f0 <setvbuf+0x24>
 800919e:	4b21      	ldr	r3, [pc, #132]	; (8009224 <setvbuf+0x158>)
 80091a0:	429c      	cmp	r4, r3
 80091a2:	bf08      	it	eq
 80091a4:	68f4      	ldreq	r4, [r6, #12]
 80091a6:	e7a3      	b.n	80090f0 <setvbuf+0x24>
 80091a8:	2f00      	cmp	r7, #0
 80091aa:	d0d8      	beq.n	800915e <setvbuf+0x92>
 80091ac:	69b3      	ldr	r3, [r6, #24]
 80091ae:	b913      	cbnz	r3, 80091b6 <setvbuf+0xea>
 80091b0:	4630      	mov	r0, r6
 80091b2:	f7ff f925 	bl	8008400 <__sinit>
 80091b6:	f1b8 0f01 	cmp.w	r8, #1
 80091ba:	bf08      	it	eq
 80091bc:	89a3      	ldrheq	r3, [r4, #12]
 80091be:	6027      	str	r7, [r4, #0]
 80091c0:	bf04      	itt	eq
 80091c2:	f043 0301 	orreq.w	r3, r3, #1
 80091c6:	81a3      	strheq	r3, [r4, #12]
 80091c8:	89a3      	ldrh	r3, [r4, #12]
 80091ca:	6127      	str	r7, [r4, #16]
 80091cc:	f013 0008 	ands.w	r0, r3, #8
 80091d0:	6165      	str	r5, [r4, #20]
 80091d2:	d01b      	beq.n	800920c <setvbuf+0x140>
 80091d4:	f013 0001 	ands.w	r0, r3, #1
 80091d8:	bf18      	it	ne
 80091da:	426d      	negne	r5, r5
 80091dc:	f04f 0300 	mov.w	r3, #0
 80091e0:	bf1d      	ittte	ne
 80091e2:	60a3      	strne	r3, [r4, #8]
 80091e4:	61a5      	strne	r5, [r4, #24]
 80091e6:	4618      	movne	r0, r3
 80091e8:	60a5      	streq	r5, [r4, #8]
 80091ea:	e7d0      	b.n	800918e <setvbuf+0xc2>
 80091ec:	4648      	mov	r0, r9
 80091ee:	f001 f835 	bl	800a25c <malloc>
 80091f2:	4607      	mov	r7, r0
 80091f4:	2800      	cmp	r0, #0
 80091f6:	d0bc      	beq.n	8009172 <setvbuf+0xa6>
 80091f8:	89a3      	ldrh	r3, [r4, #12]
 80091fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091fe:	81a3      	strh	r3, [r4, #12]
 8009200:	464d      	mov	r5, r9
 8009202:	e7d3      	b.n	80091ac <setvbuf+0xe0>
 8009204:	2000      	movs	r0, #0
 8009206:	e7b6      	b.n	8009176 <setvbuf+0xaa>
 8009208:	46a9      	mov	r9, r5
 800920a:	e7f5      	b.n	80091f8 <setvbuf+0x12c>
 800920c:	60a0      	str	r0, [r4, #8]
 800920e:	e7be      	b.n	800918e <setvbuf+0xc2>
 8009210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009214:	e7bb      	b.n	800918e <setvbuf+0xc2>
 8009216:	bf00      	nop
 8009218:	200001a0 	.word	0x200001a0
 800921c:	0800ac48 	.word	0x0800ac48
 8009220:	0800ac68 	.word	0x0800ac68
 8009224:	0800ac28 	.word	0x0800ac28

08009228 <__sread>:
 8009228:	b510      	push	{r4, lr}
 800922a:	460c      	mov	r4, r1
 800922c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009230:	f001 fc3c 	bl	800aaac <_read_r>
 8009234:	2800      	cmp	r0, #0
 8009236:	bfab      	itete	ge
 8009238:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800923a:	89a3      	ldrhlt	r3, [r4, #12]
 800923c:	181b      	addge	r3, r3, r0
 800923e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009242:	bfac      	ite	ge
 8009244:	6563      	strge	r3, [r4, #84]	; 0x54
 8009246:	81a3      	strhlt	r3, [r4, #12]
 8009248:	bd10      	pop	{r4, pc}

0800924a <__swrite>:
 800924a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800924e:	461f      	mov	r7, r3
 8009250:	898b      	ldrh	r3, [r1, #12]
 8009252:	05db      	lsls	r3, r3, #23
 8009254:	4605      	mov	r5, r0
 8009256:	460c      	mov	r4, r1
 8009258:	4616      	mov	r6, r2
 800925a:	d505      	bpl.n	8009268 <__swrite+0x1e>
 800925c:	2302      	movs	r3, #2
 800925e:	2200      	movs	r2, #0
 8009260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009264:	f000 ff84 	bl	800a170 <_lseek_r>
 8009268:	89a3      	ldrh	r3, [r4, #12]
 800926a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800926e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009272:	81a3      	strh	r3, [r4, #12]
 8009274:	4632      	mov	r2, r6
 8009276:	463b      	mov	r3, r7
 8009278:	4628      	mov	r0, r5
 800927a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800927e:	f000 b87d 	b.w	800937c <_write_r>

08009282 <__sseek>:
 8009282:	b510      	push	{r4, lr}
 8009284:	460c      	mov	r4, r1
 8009286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800928a:	f000 ff71 	bl	800a170 <_lseek_r>
 800928e:	1c43      	adds	r3, r0, #1
 8009290:	89a3      	ldrh	r3, [r4, #12]
 8009292:	bf15      	itete	ne
 8009294:	6560      	strne	r0, [r4, #84]	; 0x54
 8009296:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800929a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800929e:	81a3      	strheq	r3, [r4, #12]
 80092a0:	bf18      	it	ne
 80092a2:	81a3      	strhne	r3, [r4, #12]
 80092a4:	bd10      	pop	{r4, pc}

080092a6 <__sclose>:
 80092a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092aa:	f000 b8e7 	b.w	800947c <_close_r>

080092ae <strncpy>:
 80092ae:	b570      	push	{r4, r5, r6, lr}
 80092b0:	4604      	mov	r4, r0
 80092b2:	b902      	cbnz	r2, 80092b6 <strncpy+0x8>
 80092b4:	bd70      	pop	{r4, r5, r6, pc}
 80092b6:	4623      	mov	r3, r4
 80092b8:	f811 5b01 	ldrb.w	r5, [r1], #1
 80092bc:	f803 5b01 	strb.w	r5, [r3], #1
 80092c0:	1e56      	subs	r6, r2, #1
 80092c2:	b91d      	cbnz	r5, 80092cc <strncpy+0x1e>
 80092c4:	4414      	add	r4, r2
 80092c6:	42a3      	cmp	r3, r4
 80092c8:	d103      	bne.n	80092d2 <strncpy+0x24>
 80092ca:	bd70      	pop	{r4, r5, r6, pc}
 80092cc:	461c      	mov	r4, r3
 80092ce:	4632      	mov	r2, r6
 80092d0:	e7ef      	b.n	80092b2 <strncpy+0x4>
 80092d2:	f803 5b01 	strb.w	r5, [r3], #1
 80092d6:	e7f6      	b.n	80092c6 <strncpy+0x18>

080092d8 <__swbuf_r>:
 80092d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092da:	460e      	mov	r6, r1
 80092dc:	4614      	mov	r4, r2
 80092de:	4605      	mov	r5, r0
 80092e0:	b118      	cbz	r0, 80092ea <__swbuf_r+0x12>
 80092e2:	6983      	ldr	r3, [r0, #24]
 80092e4:	b90b      	cbnz	r3, 80092ea <__swbuf_r+0x12>
 80092e6:	f7ff f88b 	bl	8008400 <__sinit>
 80092ea:	4b21      	ldr	r3, [pc, #132]	; (8009370 <__swbuf_r+0x98>)
 80092ec:	429c      	cmp	r4, r3
 80092ee:	d12a      	bne.n	8009346 <__swbuf_r+0x6e>
 80092f0:	686c      	ldr	r4, [r5, #4]
 80092f2:	69a3      	ldr	r3, [r4, #24]
 80092f4:	60a3      	str	r3, [r4, #8]
 80092f6:	89a3      	ldrh	r3, [r4, #12]
 80092f8:	071a      	lsls	r2, r3, #28
 80092fa:	d52e      	bpl.n	800935a <__swbuf_r+0x82>
 80092fc:	6923      	ldr	r3, [r4, #16]
 80092fe:	b363      	cbz	r3, 800935a <__swbuf_r+0x82>
 8009300:	6923      	ldr	r3, [r4, #16]
 8009302:	6820      	ldr	r0, [r4, #0]
 8009304:	1ac0      	subs	r0, r0, r3
 8009306:	6963      	ldr	r3, [r4, #20]
 8009308:	b2f6      	uxtb	r6, r6
 800930a:	4298      	cmp	r0, r3
 800930c:	4637      	mov	r7, r6
 800930e:	db04      	blt.n	800931a <__swbuf_r+0x42>
 8009310:	4621      	mov	r1, r4
 8009312:	4628      	mov	r0, r5
 8009314:	f7ff f80a 	bl	800832c <_fflush_r>
 8009318:	bb28      	cbnz	r0, 8009366 <__swbuf_r+0x8e>
 800931a:	68a3      	ldr	r3, [r4, #8]
 800931c:	3b01      	subs	r3, #1
 800931e:	60a3      	str	r3, [r4, #8]
 8009320:	6823      	ldr	r3, [r4, #0]
 8009322:	1c5a      	adds	r2, r3, #1
 8009324:	6022      	str	r2, [r4, #0]
 8009326:	701e      	strb	r6, [r3, #0]
 8009328:	6963      	ldr	r3, [r4, #20]
 800932a:	3001      	adds	r0, #1
 800932c:	4298      	cmp	r0, r3
 800932e:	d004      	beq.n	800933a <__swbuf_r+0x62>
 8009330:	89a3      	ldrh	r3, [r4, #12]
 8009332:	07db      	lsls	r3, r3, #31
 8009334:	d519      	bpl.n	800936a <__swbuf_r+0x92>
 8009336:	2e0a      	cmp	r6, #10
 8009338:	d117      	bne.n	800936a <__swbuf_r+0x92>
 800933a:	4621      	mov	r1, r4
 800933c:	4628      	mov	r0, r5
 800933e:	f7fe fff5 	bl	800832c <_fflush_r>
 8009342:	b190      	cbz	r0, 800936a <__swbuf_r+0x92>
 8009344:	e00f      	b.n	8009366 <__swbuf_r+0x8e>
 8009346:	4b0b      	ldr	r3, [pc, #44]	; (8009374 <__swbuf_r+0x9c>)
 8009348:	429c      	cmp	r4, r3
 800934a:	d101      	bne.n	8009350 <__swbuf_r+0x78>
 800934c:	68ac      	ldr	r4, [r5, #8]
 800934e:	e7d0      	b.n	80092f2 <__swbuf_r+0x1a>
 8009350:	4b09      	ldr	r3, [pc, #36]	; (8009378 <__swbuf_r+0xa0>)
 8009352:	429c      	cmp	r4, r3
 8009354:	bf08      	it	eq
 8009356:	68ec      	ldreq	r4, [r5, #12]
 8009358:	e7cb      	b.n	80092f2 <__swbuf_r+0x1a>
 800935a:	4621      	mov	r1, r4
 800935c:	4628      	mov	r0, r5
 800935e:	f000 f81f 	bl	80093a0 <__swsetup_r>
 8009362:	2800      	cmp	r0, #0
 8009364:	d0cc      	beq.n	8009300 <__swbuf_r+0x28>
 8009366:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800936a:	4638      	mov	r0, r7
 800936c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800936e:	bf00      	nop
 8009370:	0800ac48 	.word	0x0800ac48
 8009374:	0800ac68 	.word	0x0800ac68
 8009378:	0800ac28 	.word	0x0800ac28

0800937c <_write_r>:
 800937c:	b538      	push	{r3, r4, r5, lr}
 800937e:	4c07      	ldr	r4, [pc, #28]	; (800939c <_write_r+0x20>)
 8009380:	4605      	mov	r5, r0
 8009382:	4608      	mov	r0, r1
 8009384:	4611      	mov	r1, r2
 8009386:	2200      	movs	r2, #0
 8009388:	6022      	str	r2, [r4, #0]
 800938a:	461a      	mov	r2, r3
 800938c:	f7fe fb80 	bl	8007a90 <_write>
 8009390:	1c43      	adds	r3, r0, #1
 8009392:	d102      	bne.n	800939a <_write_r+0x1e>
 8009394:	6823      	ldr	r3, [r4, #0]
 8009396:	b103      	cbz	r3, 800939a <_write_r+0x1e>
 8009398:	602b      	str	r3, [r5, #0]
 800939a:	bd38      	pop	{r3, r4, r5, pc}
 800939c:	20001558 	.word	0x20001558

080093a0 <__swsetup_r>:
 80093a0:	4b32      	ldr	r3, [pc, #200]	; (800946c <__swsetup_r+0xcc>)
 80093a2:	b570      	push	{r4, r5, r6, lr}
 80093a4:	681d      	ldr	r5, [r3, #0]
 80093a6:	4606      	mov	r6, r0
 80093a8:	460c      	mov	r4, r1
 80093aa:	b125      	cbz	r5, 80093b6 <__swsetup_r+0x16>
 80093ac:	69ab      	ldr	r3, [r5, #24]
 80093ae:	b913      	cbnz	r3, 80093b6 <__swsetup_r+0x16>
 80093b0:	4628      	mov	r0, r5
 80093b2:	f7ff f825 	bl	8008400 <__sinit>
 80093b6:	4b2e      	ldr	r3, [pc, #184]	; (8009470 <__swsetup_r+0xd0>)
 80093b8:	429c      	cmp	r4, r3
 80093ba:	d10f      	bne.n	80093dc <__swsetup_r+0x3c>
 80093bc:	686c      	ldr	r4, [r5, #4]
 80093be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093c2:	b29a      	uxth	r2, r3
 80093c4:	0715      	lsls	r5, r2, #28
 80093c6:	d42c      	bmi.n	8009422 <__swsetup_r+0x82>
 80093c8:	06d0      	lsls	r0, r2, #27
 80093ca:	d411      	bmi.n	80093f0 <__swsetup_r+0x50>
 80093cc:	2209      	movs	r2, #9
 80093ce:	6032      	str	r2, [r6, #0]
 80093d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093d4:	81a3      	strh	r3, [r4, #12]
 80093d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093da:	bd70      	pop	{r4, r5, r6, pc}
 80093dc:	4b25      	ldr	r3, [pc, #148]	; (8009474 <__swsetup_r+0xd4>)
 80093de:	429c      	cmp	r4, r3
 80093e0:	d101      	bne.n	80093e6 <__swsetup_r+0x46>
 80093e2:	68ac      	ldr	r4, [r5, #8]
 80093e4:	e7eb      	b.n	80093be <__swsetup_r+0x1e>
 80093e6:	4b24      	ldr	r3, [pc, #144]	; (8009478 <__swsetup_r+0xd8>)
 80093e8:	429c      	cmp	r4, r3
 80093ea:	bf08      	it	eq
 80093ec:	68ec      	ldreq	r4, [r5, #12]
 80093ee:	e7e6      	b.n	80093be <__swsetup_r+0x1e>
 80093f0:	0751      	lsls	r1, r2, #29
 80093f2:	d512      	bpl.n	800941a <__swsetup_r+0x7a>
 80093f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093f6:	b141      	cbz	r1, 800940a <__swsetup_r+0x6a>
 80093f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093fc:	4299      	cmp	r1, r3
 80093fe:	d002      	beq.n	8009406 <__swsetup_r+0x66>
 8009400:	4630      	mov	r0, r6
 8009402:	f7ff f8bf 	bl	8008584 <_free_r>
 8009406:	2300      	movs	r3, #0
 8009408:	6363      	str	r3, [r4, #52]	; 0x34
 800940a:	89a3      	ldrh	r3, [r4, #12]
 800940c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009410:	81a3      	strh	r3, [r4, #12]
 8009412:	2300      	movs	r3, #0
 8009414:	6063      	str	r3, [r4, #4]
 8009416:	6923      	ldr	r3, [r4, #16]
 8009418:	6023      	str	r3, [r4, #0]
 800941a:	89a3      	ldrh	r3, [r4, #12]
 800941c:	f043 0308 	orr.w	r3, r3, #8
 8009420:	81a3      	strh	r3, [r4, #12]
 8009422:	6923      	ldr	r3, [r4, #16]
 8009424:	b94b      	cbnz	r3, 800943a <__swsetup_r+0x9a>
 8009426:	89a3      	ldrh	r3, [r4, #12]
 8009428:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800942c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009430:	d003      	beq.n	800943a <__swsetup_r+0x9a>
 8009432:	4621      	mov	r1, r4
 8009434:	4630      	mov	r0, r6
 8009436:	f000 fed1 	bl	800a1dc <__smakebuf_r>
 800943a:	89a2      	ldrh	r2, [r4, #12]
 800943c:	f012 0301 	ands.w	r3, r2, #1
 8009440:	d00c      	beq.n	800945c <__swsetup_r+0xbc>
 8009442:	2300      	movs	r3, #0
 8009444:	60a3      	str	r3, [r4, #8]
 8009446:	6963      	ldr	r3, [r4, #20]
 8009448:	425b      	negs	r3, r3
 800944a:	61a3      	str	r3, [r4, #24]
 800944c:	6923      	ldr	r3, [r4, #16]
 800944e:	b953      	cbnz	r3, 8009466 <__swsetup_r+0xc6>
 8009450:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009454:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009458:	d1ba      	bne.n	80093d0 <__swsetup_r+0x30>
 800945a:	bd70      	pop	{r4, r5, r6, pc}
 800945c:	0792      	lsls	r2, r2, #30
 800945e:	bf58      	it	pl
 8009460:	6963      	ldrpl	r3, [r4, #20]
 8009462:	60a3      	str	r3, [r4, #8]
 8009464:	e7f2      	b.n	800944c <__swsetup_r+0xac>
 8009466:	2000      	movs	r0, #0
 8009468:	e7f7      	b.n	800945a <__swsetup_r+0xba>
 800946a:	bf00      	nop
 800946c:	200001a0 	.word	0x200001a0
 8009470:	0800ac48 	.word	0x0800ac48
 8009474:	0800ac68 	.word	0x0800ac68
 8009478:	0800ac28 	.word	0x0800ac28

0800947c <_close_r>:
 800947c:	b538      	push	{r3, r4, r5, lr}
 800947e:	4c06      	ldr	r4, [pc, #24]	; (8009498 <_close_r+0x1c>)
 8009480:	2300      	movs	r3, #0
 8009482:	4605      	mov	r5, r0
 8009484:	4608      	mov	r0, r1
 8009486:	6023      	str	r3, [r4, #0]
 8009488:	f7fe fb2a 	bl	8007ae0 <_close>
 800948c:	1c43      	adds	r3, r0, #1
 800948e:	d102      	bne.n	8009496 <_close_r+0x1a>
 8009490:	6823      	ldr	r3, [r4, #0]
 8009492:	b103      	cbz	r3, 8009496 <_close_r+0x1a>
 8009494:	602b      	str	r3, [r5, #0]
 8009496:	bd38      	pop	{r3, r4, r5, pc}
 8009498:	20001558 	.word	0x20001558

0800949c <quorem>:
 800949c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094a0:	6903      	ldr	r3, [r0, #16]
 80094a2:	690c      	ldr	r4, [r1, #16]
 80094a4:	429c      	cmp	r4, r3
 80094a6:	4680      	mov	r8, r0
 80094a8:	f300 8082 	bgt.w	80095b0 <quorem+0x114>
 80094ac:	3c01      	subs	r4, #1
 80094ae:	f101 0714 	add.w	r7, r1, #20
 80094b2:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80094b6:	f100 0614 	add.w	r6, r0, #20
 80094ba:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80094be:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80094c2:	eb06 030e 	add.w	r3, r6, lr
 80094c6:	3501      	adds	r5, #1
 80094c8:	eb07 090e 	add.w	r9, r7, lr
 80094cc:	9301      	str	r3, [sp, #4]
 80094ce:	fbb0 f5f5 	udiv	r5, r0, r5
 80094d2:	b395      	cbz	r5, 800953a <quorem+0x9e>
 80094d4:	f04f 0a00 	mov.w	sl, #0
 80094d8:	4638      	mov	r0, r7
 80094da:	46b4      	mov	ip, r6
 80094dc:	46d3      	mov	fp, sl
 80094de:	f850 2b04 	ldr.w	r2, [r0], #4
 80094e2:	b293      	uxth	r3, r2
 80094e4:	fb05 a303 	mla	r3, r5, r3, sl
 80094e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	ebab 0303 	sub.w	r3, fp, r3
 80094f2:	0c12      	lsrs	r2, r2, #16
 80094f4:	f8bc b000 	ldrh.w	fp, [ip]
 80094f8:	fb05 a202 	mla	r2, r5, r2, sl
 80094fc:	fa13 f38b 	uxtah	r3, r3, fp
 8009500:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009504:	fa1f fb82 	uxth.w	fp, r2
 8009508:	f8dc 2000 	ldr.w	r2, [ip]
 800950c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009510:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009514:	b29b      	uxth	r3, r3
 8009516:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800951a:	4581      	cmp	r9, r0
 800951c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009520:	f84c 3b04 	str.w	r3, [ip], #4
 8009524:	d2db      	bcs.n	80094de <quorem+0x42>
 8009526:	f856 300e 	ldr.w	r3, [r6, lr]
 800952a:	b933      	cbnz	r3, 800953a <quorem+0x9e>
 800952c:	9b01      	ldr	r3, [sp, #4]
 800952e:	3b04      	subs	r3, #4
 8009530:	429e      	cmp	r6, r3
 8009532:	461a      	mov	r2, r3
 8009534:	d330      	bcc.n	8009598 <quorem+0xfc>
 8009536:	f8c8 4010 	str.w	r4, [r8, #16]
 800953a:	4640      	mov	r0, r8
 800953c:	f001 f8a1 	bl	800a682 <__mcmp>
 8009540:	2800      	cmp	r0, #0
 8009542:	db25      	blt.n	8009590 <quorem+0xf4>
 8009544:	3501      	adds	r5, #1
 8009546:	4630      	mov	r0, r6
 8009548:	f04f 0e00 	mov.w	lr, #0
 800954c:	f857 2b04 	ldr.w	r2, [r7], #4
 8009550:	f8d0 c000 	ldr.w	ip, [r0]
 8009554:	b293      	uxth	r3, r2
 8009556:	ebae 0303 	sub.w	r3, lr, r3
 800955a:	0c12      	lsrs	r2, r2, #16
 800955c:	fa13 f38c 	uxtah	r3, r3, ip
 8009560:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009564:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009568:	b29b      	uxth	r3, r3
 800956a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800956e:	45b9      	cmp	r9, r7
 8009570:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009574:	f840 3b04 	str.w	r3, [r0], #4
 8009578:	d2e8      	bcs.n	800954c <quorem+0xb0>
 800957a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800957e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009582:	b92a      	cbnz	r2, 8009590 <quorem+0xf4>
 8009584:	3b04      	subs	r3, #4
 8009586:	429e      	cmp	r6, r3
 8009588:	461a      	mov	r2, r3
 800958a:	d30b      	bcc.n	80095a4 <quorem+0x108>
 800958c:	f8c8 4010 	str.w	r4, [r8, #16]
 8009590:	4628      	mov	r0, r5
 8009592:	b003      	add	sp, #12
 8009594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009598:	6812      	ldr	r2, [r2, #0]
 800959a:	3b04      	subs	r3, #4
 800959c:	2a00      	cmp	r2, #0
 800959e:	d1ca      	bne.n	8009536 <quorem+0x9a>
 80095a0:	3c01      	subs	r4, #1
 80095a2:	e7c5      	b.n	8009530 <quorem+0x94>
 80095a4:	6812      	ldr	r2, [r2, #0]
 80095a6:	3b04      	subs	r3, #4
 80095a8:	2a00      	cmp	r2, #0
 80095aa:	d1ef      	bne.n	800958c <quorem+0xf0>
 80095ac:	3c01      	subs	r4, #1
 80095ae:	e7ea      	b.n	8009586 <quorem+0xea>
 80095b0:	2000      	movs	r0, #0
 80095b2:	e7ee      	b.n	8009592 <quorem+0xf6>
 80095b4:	0000      	movs	r0, r0
	...

080095b8 <_dtoa_r>:
 80095b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095bc:	ec57 6b10 	vmov	r6, r7, d0
 80095c0:	b097      	sub	sp, #92	; 0x5c
 80095c2:	e9cd 6700 	strd	r6, r7, [sp]
 80095c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80095c8:	9107      	str	r1, [sp, #28]
 80095ca:	4604      	mov	r4, r0
 80095cc:	920a      	str	r2, [sp, #40]	; 0x28
 80095ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80095d0:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80095d2:	b93e      	cbnz	r6, 80095e4 <_dtoa_r+0x2c>
 80095d4:	2010      	movs	r0, #16
 80095d6:	f000 fe41 	bl	800a25c <malloc>
 80095da:	6260      	str	r0, [r4, #36]	; 0x24
 80095dc:	6046      	str	r6, [r0, #4]
 80095de:	6086      	str	r6, [r0, #8]
 80095e0:	6006      	str	r6, [r0, #0]
 80095e2:	60c6      	str	r6, [r0, #12]
 80095e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095e6:	6819      	ldr	r1, [r3, #0]
 80095e8:	b151      	cbz	r1, 8009600 <_dtoa_r+0x48>
 80095ea:	685a      	ldr	r2, [r3, #4]
 80095ec:	604a      	str	r2, [r1, #4]
 80095ee:	2301      	movs	r3, #1
 80095f0:	4093      	lsls	r3, r2
 80095f2:	608b      	str	r3, [r1, #8]
 80095f4:	4620      	mov	r0, r4
 80095f6:	f000 fe6f 	bl	800a2d8 <_Bfree>
 80095fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095fc:	2200      	movs	r2, #0
 80095fe:	601a      	str	r2, [r3, #0]
 8009600:	9b01      	ldr	r3, [sp, #4]
 8009602:	2b00      	cmp	r3, #0
 8009604:	bfbf      	itttt	lt
 8009606:	2301      	movlt	r3, #1
 8009608:	602b      	strlt	r3, [r5, #0]
 800960a:	9b01      	ldrlt	r3, [sp, #4]
 800960c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009610:	bfb2      	itee	lt
 8009612:	9301      	strlt	r3, [sp, #4]
 8009614:	2300      	movge	r3, #0
 8009616:	602b      	strge	r3, [r5, #0]
 8009618:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800961c:	4ba8      	ldr	r3, [pc, #672]	; (80098c0 <_dtoa_r+0x308>)
 800961e:	ea33 0308 	bics.w	r3, r3, r8
 8009622:	d11b      	bne.n	800965c <_dtoa_r+0xa4>
 8009624:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009626:	f242 730f 	movw	r3, #9999	; 0x270f
 800962a:	6013      	str	r3, [r2, #0]
 800962c:	9b00      	ldr	r3, [sp, #0]
 800962e:	b923      	cbnz	r3, 800963a <_dtoa_r+0x82>
 8009630:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009634:	2800      	cmp	r0, #0
 8009636:	f000 8578 	beq.w	800a12a <_dtoa_r+0xb72>
 800963a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800963c:	b953      	cbnz	r3, 8009654 <_dtoa_r+0x9c>
 800963e:	4ba1      	ldr	r3, [pc, #644]	; (80098c4 <_dtoa_r+0x30c>)
 8009640:	e021      	b.n	8009686 <_dtoa_r+0xce>
 8009642:	4ba1      	ldr	r3, [pc, #644]	; (80098c8 <_dtoa_r+0x310>)
 8009644:	9302      	str	r3, [sp, #8]
 8009646:	3308      	adds	r3, #8
 8009648:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800964a:	6013      	str	r3, [r2, #0]
 800964c:	9802      	ldr	r0, [sp, #8]
 800964e:	b017      	add	sp, #92	; 0x5c
 8009650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009654:	4b9b      	ldr	r3, [pc, #620]	; (80098c4 <_dtoa_r+0x30c>)
 8009656:	9302      	str	r3, [sp, #8]
 8009658:	3303      	adds	r3, #3
 800965a:	e7f5      	b.n	8009648 <_dtoa_r+0x90>
 800965c:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009660:	2200      	movs	r2, #0
 8009662:	2300      	movs	r3, #0
 8009664:	4630      	mov	r0, r6
 8009666:	4639      	mov	r1, r7
 8009668:	f7f7 fa32 	bl	8000ad0 <__aeabi_dcmpeq>
 800966c:	4681      	mov	r9, r0
 800966e:	b160      	cbz	r0, 800968a <_dtoa_r+0xd2>
 8009670:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009672:	2301      	movs	r3, #1
 8009674:	6013      	str	r3, [r2, #0]
 8009676:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009678:	2b00      	cmp	r3, #0
 800967a:	f000 8553 	beq.w	800a124 <_dtoa_r+0xb6c>
 800967e:	4b93      	ldr	r3, [pc, #588]	; (80098cc <_dtoa_r+0x314>)
 8009680:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009682:	6013      	str	r3, [r2, #0]
 8009684:	3b01      	subs	r3, #1
 8009686:	9302      	str	r3, [sp, #8]
 8009688:	e7e0      	b.n	800964c <_dtoa_r+0x94>
 800968a:	aa14      	add	r2, sp, #80	; 0x50
 800968c:	a915      	add	r1, sp, #84	; 0x54
 800968e:	ec47 6b10 	vmov	d0, r6, r7
 8009692:	4620      	mov	r0, r4
 8009694:	f001 f86d 	bl	800a772 <__d2b>
 8009698:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800969c:	4682      	mov	sl, r0
 800969e:	2d00      	cmp	r5, #0
 80096a0:	d07e      	beq.n	80097a0 <_dtoa_r+0x1e8>
 80096a2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80096a6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80096aa:	4630      	mov	r0, r6
 80096ac:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80096b0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80096b4:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 80096b8:	2200      	movs	r2, #0
 80096ba:	4b85      	ldr	r3, [pc, #532]	; (80098d0 <_dtoa_r+0x318>)
 80096bc:	f7f6 fdec 	bl	8000298 <__aeabi_dsub>
 80096c0:	a379      	add	r3, pc, #484	; (adr r3, 80098a8 <_dtoa_r+0x2f0>)
 80096c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c6:	f7f6 ff9b 	bl	8000600 <__aeabi_dmul>
 80096ca:	a379      	add	r3, pc, #484	; (adr r3, 80098b0 <_dtoa_r+0x2f8>)
 80096cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d0:	f7f6 fde4 	bl	800029c <__adddf3>
 80096d4:	4606      	mov	r6, r0
 80096d6:	4628      	mov	r0, r5
 80096d8:	460f      	mov	r7, r1
 80096da:	f7f6 ff2b 	bl	8000534 <__aeabi_i2d>
 80096de:	a376      	add	r3, pc, #472	; (adr r3, 80098b8 <_dtoa_r+0x300>)
 80096e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e4:	f7f6 ff8c 	bl	8000600 <__aeabi_dmul>
 80096e8:	4602      	mov	r2, r0
 80096ea:	460b      	mov	r3, r1
 80096ec:	4630      	mov	r0, r6
 80096ee:	4639      	mov	r1, r7
 80096f0:	f7f6 fdd4 	bl	800029c <__adddf3>
 80096f4:	4606      	mov	r6, r0
 80096f6:	460f      	mov	r7, r1
 80096f8:	f7f7 fa32 	bl	8000b60 <__aeabi_d2iz>
 80096fc:	2200      	movs	r2, #0
 80096fe:	4683      	mov	fp, r0
 8009700:	2300      	movs	r3, #0
 8009702:	4630      	mov	r0, r6
 8009704:	4639      	mov	r1, r7
 8009706:	f7f7 f9ed 	bl	8000ae4 <__aeabi_dcmplt>
 800970a:	b158      	cbz	r0, 8009724 <_dtoa_r+0x16c>
 800970c:	4658      	mov	r0, fp
 800970e:	f7f6 ff11 	bl	8000534 <__aeabi_i2d>
 8009712:	4602      	mov	r2, r0
 8009714:	460b      	mov	r3, r1
 8009716:	4630      	mov	r0, r6
 8009718:	4639      	mov	r1, r7
 800971a:	f7f7 f9d9 	bl	8000ad0 <__aeabi_dcmpeq>
 800971e:	b908      	cbnz	r0, 8009724 <_dtoa_r+0x16c>
 8009720:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009724:	f1bb 0f16 	cmp.w	fp, #22
 8009728:	d859      	bhi.n	80097de <_dtoa_r+0x226>
 800972a:	496a      	ldr	r1, [pc, #424]	; (80098d4 <_dtoa_r+0x31c>)
 800972c:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8009730:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009734:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009738:	f7f7 f9f2 	bl	8000b20 <__aeabi_dcmpgt>
 800973c:	2800      	cmp	r0, #0
 800973e:	d050      	beq.n	80097e2 <_dtoa_r+0x22a>
 8009740:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009744:	2300      	movs	r3, #0
 8009746:	930e      	str	r3, [sp, #56]	; 0x38
 8009748:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800974a:	1b5d      	subs	r5, r3, r5
 800974c:	1e6b      	subs	r3, r5, #1
 800974e:	9306      	str	r3, [sp, #24]
 8009750:	bf45      	ittet	mi
 8009752:	f1c5 0301 	rsbmi	r3, r5, #1
 8009756:	9305      	strmi	r3, [sp, #20]
 8009758:	2300      	movpl	r3, #0
 800975a:	2300      	movmi	r3, #0
 800975c:	bf4c      	ite	mi
 800975e:	9306      	strmi	r3, [sp, #24]
 8009760:	9305      	strpl	r3, [sp, #20]
 8009762:	f1bb 0f00 	cmp.w	fp, #0
 8009766:	db3e      	blt.n	80097e6 <_dtoa_r+0x22e>
 8009768:	9b06      	ldr	r3, [sp, #24]
 800976a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800976e:	445b      	add	r3, fp
 8009770:	9306      	str	r3, [sp, #24]
 8009772:	2300      	movs	r3, #0
 8009774:	9308      	str	r3, [sp, #32]
 8009776:	9b07      	ldr	r3, [sp, #28]
 8009778:	2b09      	cmp	r3, #9
 800977a:	f200 80af 	bhi.w	80098dc <_dtoa_r+0x324>
 800977e:	2b05      	cmp	r3, #5
 8009780:	bfc4      	itt	gt
 8009782:	3b04      	subgt	r3, #4
 8009784:	9307      	strgt	r3, [sp, #28]
 8009786:	9b07      	ldr	r3, [sp, #28]
 8009788:	f1a3 0302 	sub.w	r3, r3, #2
 800978c:	bfcc      	ite	gt
 800978e:	2600      	movgt	r6, #0
 8009790:	2601      	movle	r6, #1
 8009792:	2b03      	cmp	r3, #3
 8009794:	f200 80ae 	bhi.w	80098f4 <_dtoa_r+0x33c>
 8009798:	e8df f003 	tbb	[pc, r3]
 800979c:	772f8482 	.word	0x772f8482
 80097a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097a2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80097a4:	441d      	add	r5, r3
 80097a6:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80097aa:	2b20      	cmp	r3, #32
 80097ac:	dd11      	ble.n	80097d2 <_dtoa_r+0x21a>
 80097ae:	9a00      	ldr	r2, [sp, #0]
 80097b0:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80097b4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80097b8:	fa22 f000 	lsr.w	r0, r2, r0
 80097bc:	fa08 f303 	lsl.w	r3, r8, r3
 80097c0:	4318      	orrs	r0, r3
 80097c2:	f7f6 fea7 	bl	8000514 <__aeabi_ui2d>
 80097c6:	2301      	movs	r3, #1
 80097c8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80097cc:	3d01      	subs	r5, #1
 80097ce:	9312      	str	r3, [sp, #72]	; 0x48
 80097d0:	e772      	b.n	80096b8 <_dtoa_r+0x100>
 80097d2:	f1c3 0020 	rsb	r0, r3, #32
 80097d6:	9b00      	ldr	r3, [sp, #0]
 80097d8:	fa03 f000 	lsl.w	r0, r3, r0
 80097dc:	e7f1      	b.n	80097c2 <_dtoa_r+0x20a>
 80097de:	2301      	movs	r3, #1
 80097e0:	e7b1      	b.n	8009746 <_dtoa_r+0x18e>
 80097e2:	900e      	str	r0, [sp, #56]	; 0x38
 80097e4:	e7b0      	b.n	8009748 <_dtoa_r+0x190>
 80097e6:	9b05      	ldr	r3, [sp, #20]
 80097e8:	eba3 030b 	sub.w	r3, r3, fp
 80097ec:	9305      	str	r3, [sp, #20]
 80097ee:	f1cb 0300 	rsb	r3, fp, #0
 80097f2:	9308      	str	r3, [sp, #32]
 80097f4:	2300      	movs	r3, #0
 80097f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80097f8:	e7bd      	b.n	8009776 <_dtoa_r+0x1be>
 80097fa:	2301      	movs	r3, #1
 80097fc:	9309      	str	r3, [sp, #36]	; 0x24
 80097fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009800:	2b00      	cmp	r3, #0
 8009802:	dd7a      	ble.n	80098fa <_dtoa_r+0x342>
 8009804:	9304      	str	r3, [sp, #16]
 8009806:	9303      	str	r3, [sp, #12]
 8009808:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800980a:	2200      	movs	r2, #0
 800980c:	606a      	str	r2, [r5, #4]
 800980e:	2104      	movs	r1, #4
 8009810:	f101 0214 	add.w	r2, r1, #20
 8009814:	429a      	cmp	r2, r3
 8009816:	d975      	bls.n	8009904 <_dtoa_r+0x34c>
 8009818:	6869      	ldr	r1, [r5, #4]
 800981a:	4620      	mov	r0, r4
 800981c:	f000 fd28 	bl	800a270 <_Balloc>
 8009820:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009822:	6028      	str	r0, [r5, #0]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	9302      	str	r3, [sp, #8]
 8009828:	9b03      	ldr	r3, [sp, #12]
 800982a:	2b0e      	cmp	r3, #14
 800982c:	f200 80e5 	bhi.w	80099fa <_dtoa_r+0x442>
 8009830:	2e00      	cmp	r6, #0
 8009832:	f000 80e2 	beq.w	80099fa <_dtoa_r+0x442>
 8009836:	ed9d 7b00 	vldr	d7, [sp]
 800983a:	f1bb 0f00 	cmp.w	fp, #0
 800983e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8009842:	dd74      	ble.n	800992e <_dtoa_r+0x376>
 8009844:	4a23      	ldr	r2, [pc, #140]	; (80098d4 <_dtoa_r+0x31c>)
 8009846:	f00b 030f 	and.w	r3, fp, #15
 800984a:	ea4f 162b 	mov.w	r6, fp, asr #4
 800984e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009852:	06f0      	lsls	r0, r6, #27
 8009854:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009858:	d559      	bpl.n	800990e <_dtoa_r+0x356>
 800985a:	4b1f      	ldr	r3, [pc, #124]	; (80098d8 <_dtoa_r+0x320>)
 800985c:	ec51 0b17 	vmov	r0, r1, d7
 8009860:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009864:	f7f6 fff6 	bl	8000854 <__aeabi_ddiv>
 8009868:	e9cd 0100 	strd	r0, r1, [sp]
 800986c:	f006 060f 	and.w	r6, r6, #15
 8009870:	2503      	movs	r5, #3
 8009872:	4f19      	ldr	r7, [pc, #100]	; (80098d8 <_dtoa_r+0x320>)
 8009874:	2e00      	cmp	r6, #0
 8009876:	d14c      	bne.n	8009912 <_dtoa_r+0x35a>
 8009878:	4642      	mov	r2, r8
 800987a:	464b      	mov	r3, r9
 800987c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009880:	f7f6 ffe8 	bl	8000854 <__aeabi_ddiv>
 8009884:	e9cd 0100 	strd	r0, r1, [sp]
 8009888:	e06a      	b.n	8009960 <_dtoa_r+0x3a8>
 800988a:	2301      	movs	r3, #1
 800988c:	9309      	str	r3, [sp, #36]	; 0x24
 800988e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009890:	445b      	add	r3, fp
 8009892:	9304      	str	r3, [sp, #16]
 8009894:	3301      	adds	r3, #1
 8009896:	2b01      	cmp	r3, #1
 8009898:	9303      	str	r3, [sp, #12]
 800989a:	bfb8      	it	lt
 800989c:	2301      	movlt	r3, #1
 800989e:	e7b3      	b.n	8009808 <_dtoa_r+0x250>
 80098a0:	2300      	movs	r3, #0
 80098a2:	e7ab      	b.n	80097fc <_dtoa_r+0x244>
 80098a4:	2300      	movs	r3, #0
 80098a6:	e7f1      	b.n	800988c <_dtoa_r+0x2d4>
 80098a8:	636f4361 	.word	0x636f4361
 80098ac:	3fd287a7 	.word	0x3fd287a7
 80098b0:	8b60c8b3 	.word	0x8b60c8b3
 80098b4:	3fc68a28 	.word	0x3fc68a28
 80098b8:	509f79fb 	.word	0x509f79fb
 80098bc:	3fd34413 	.word	0x3fd34413
 80098c0:	7ff00000 	.word	0x7ff00000
 80098c4:	0800acc9 	.word	0x0800acc9
 80098c8:	0800acc0 	.word	0x0800acc0
 80098cc:	0800ac9d 	.word	0x0800ac9d
 80098d0:	3ff80000 	.word	0x3ff80000
 80098d4:	0800acf8 	.word	0x0800acf8
 80098d8:	0800acd0 	.word	0x0800acd0
 80098dc:	2601      	movs	r6, #1
 80098de:	2300      	movs	r3, #0
 80098e0:	9307      	str	r3, [sp, #28]
 80098e2:	9609      	str	r6, [sp, #36]	; 0x24
 80098e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80098e8:	9304      	str	r3, [sp, #16]
 80098ea:	9303      	str	r3, [sp, #12]
 80098ec:	2200      	movs	r2, #0
 80098ee:	2312      	movs	r3, #18
 80098f0:	920a      	str	r2, [sp, #40]	; 0x28
 80098f2:	e789      	b.n	8009808 <_dtoa_r+0x250>
 80098f4:	2301      	movs	r3, #1
 80098f6:	9309      	str	r3, [sp, #36]	; 0x24
 80098f8:	e7f4      	b.n	80098e4 <_dtoa_r+0x32c>
 80098fa:	2301      	movs	r3, #1
 80098fc:	9304      	str	r3, [sp, #16]
 80098fe:	9303      	str	r3, [sp, #12]
 8009900:	461a      	mov	r2, r3
 8009902:	e7f5      	b.n	80098f0 <_dtoa_r+0x338>
 8009904:	686a      	ldr	r2, [r5, #4]
 8009906:	3201      	adds	r2, #1
 8009908:	606a      	str	r2, [r5, #4]
 800990a:	0049      	lsls	r1, r1, #1
 800990c:	e780      	b.n	8009810 <_dtoa_r+0x258>
 800990e:	2502      	movs	r5, #2
 8009910:	e7af      	b.n	8009872 <_dtoa_r+0x2ba>
 8009912:	07f1      	lsls	r1, r6, #31
 8009914:	d508      	bpl.n	8009928 <_dtoa_r+0x370>
 8009916:	4640      	mov	r0, r8
 8009918:	4649      	mov	r1, r9
 800991a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800991e:	f7f6 fe6f 	bl	8000600 <__aeabi_dmul>
 8009922:	3501      	adds	r5, #1
 8009924:	4680      	mov	r8, r0
 8009926:	4689      	mov	r9, r1
 8009928:	1076      	asrs	r6, r6, #1
 800992a:	3708      	adds	r7, #8
 800992c:	e7a2      	b.n	8009874 <_dtoa_r+0x2bc>
 800992e:	f000 809d 	beq.w	8009a6c <_dtoa_r+0x4b4>
 8009932:	f1cb 0600 	rsb	r6, fp, #0
 8009936:	4b9f      	ldr	r3, [pc, #636]	; (8009bb4 <_dtoa_r+0x5fc>)
 8009938:	4f9f      	ldr	r7, [pc, #636]	; (8009bb8 <_dtoa_r+0x600>)
 800993a:	f006 020f 	and.w	r2, r6, #15
 800993e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009946:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800994a:	f7f6 fe59 	bl	8000600 <__aeabi_dmul>
 800994e:	e9cd 0100 	strd	r0, r1, [sp]
 8009952:	1136      	asrs	r6, r6, #4
 8009954:	2300      	movs	r3, #0
 8009956:	2502      	movs	r5, #2
 8009958:	2e00      	cmp	r6, #0
 800995a:	d17c      	bne.n	8009a56 <_dtoa_r+0x49e>
 800995c:	2b00      	cmp	r3, #0
 800995e:	d191      	bne.n	8009884 <_dtoa_r+0x2cc>
 8009960:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009962:	2b00      	cmp	r3, #0
 8009964:	f000 8084 	beq.w	8009a70 <_dtoa_r+0x4b8>
 8009968:	e9dd 8900 	ldrd	r8, r9, [sp]
 800996c:	2200      	movs	r2, #0
 800996e:	4b93      	ldr	r3, [pc, #588]	; (8009bbc <_dtoa_r+0x604>)
 8009970:	4640      	mov	r0, r8
 8009972:	4649      	mov	r1, r9
 8009974:	f7f7 f8b6 	bl	8000ae4 <__aeabi_dcmplt>
 8009978:	2800      	cmp	r0, #0
 800997a:	d079      	beq.n	8009a70 <_dtoa_r+0x4b8>
 800997c:	9b03      	ldr	r3, [sp, #12]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d076      	beq.n	8009a70 <_dtoa_r+0x4b8>
 8009982:	9b04      	ldr	r3, [sp, #16]
 8009984:	2b00      	cmp	r3, #0
 8009986:	dd34      	ble.n	80099f2 <_dtoa_r+0x43a>
 8009988:	2200      	movs	r2, #0
 800998a:	4b8d      	ldr	r3, [pc, #564]	; (8009bc0 <_dtoa_r+0x608>)
 800998c:	4640      	mov	r0, r8
 800998e:	4649      	mov	r1, r9
 8009990:	f7f6 fe36 	bl	8000600 <__aeabi_dmul>
 8009994:	e9cd 0100 	strd	r0, r1, [sp]
 8009998:	9e04      	ldr	r6, [sp, #16]
 800999a:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800999e:	3501      	adds	r5, #1
 80099a0:	4628      	mov	r0, r5
 80099a2:	f7f6 fdc7 	bl	8000534 <__aeabi_i2d>
 80099a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099aa:	f7f6 fe29 	bl	8000600 <__aeabi_dmul>
 80099ae:	2200      	movs	r2, #0
 80099b0:	4b84      	ldr	r3, [pc, #528]	; (8009bc4 <_dtoa_r+0x60c>)
 80099b2:	f7f6 fc73 	bl	800029c <__adddf3>
 80099b6:	4680      	mov	r8, r0
 80099b8:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 80099bc:	2e00      	cmp	r6, #0
 80099be:	d15a      	bne.n	8009a76 <_dtoa_r+0x4be>
 80099c0:	2200      	movs	r2, #0
 80099c2:	4b81      	ldr	r3, [pc, #516]	; (8009bc8 <_dtoa_r+0x610>)
 80099c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80099c8:	f7f6 fc66 	bl	8000298 <__aeabi_dsub>
 80099cc:	4642      	mov	r2, r8
 80099ce:	464b      	mov	r3, r9
 80099d0:	e9cd 0100 	strd	r0, r1, [sp]
 80099d4:	f7f7 f8a4 	bl	8000b20 <__aeabi_dcmpgt>
 80099d8:	2800      	cmp	r0, #0
 80099da:	f040 829b 	bne.w	8009f14 <_dtoa_r+0x95c>
 80099de:	4642      	mov	r2, r8
 80099e0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80099e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80099e8:	f7f7 f87c 	bl	8000ae4 <__aeabi_dcmplt>
 80099ec:	2800      	cmp	r0, #0
 80099ee:	f040 828f 	bne.w	8009f10 <_dtoa_r+0x958>
 80099f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80099f6:	e9cd 2300 	strd	r2, r3, [sp]
 80099fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	f2c0 8150 	blt.w	8009ca2 <_dtoa_r+0x6ea>
 8009a02:	f1bb 0f0e 	cmp.w	fp, #14
 8009a06:	f300 814c 	bgt.w	8009ca2 <_dtoa_r+0x6ea>
 8009a0a:	4b6a      	ldr	r3, [pc, #424]	; (8009bb4 <_dtoa_r+0x5fc>)
 8009a0c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009a10:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009a14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	f280 80da 	bge.w	8009bd0 <_dtoa_r+0x618>
 8009a1c:	9b03      	ldr	r3, [sp, #12]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	f300 80d6 	bgt.w	8009bd0 <_dtoa_r+0x618>
 8009a24:	f040 8273 	bne.w	8009f0e <_dtoa_r+0x956>
 8009a28:	2200      	movs	r2, #0
 8009a2a:	4b67      	ldr	r3, [pc, #412]	; (8009bc8 <_dtoa_r+0x610>)
 8009a2c:	4640      	mov	r0, r8
 8009a2e:	4649      	mov	r1, r9
 8009a30:	f7f6 fde6 	bl	8000600 <__aeabi_dmul>
 8009a34:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a38:	f7f7 f868 	bl	8000b0c <__aeabi_dcmpge>
 8009a3c:	9e03      	ldr	r6, [sp, #12]
 8009a3e:	4637      	mov	r7, r6
 8009a40:	2800      	cmp	r0, #0
 8009a42:	f040 824a 	bne.w	8009eda <_dtoa_r+0x922>
 8009a46:	9b02      	ldr	r3, [sp, #8]
 8009a48:	9a02      	ldr	r2, [sp, #8]
 8009a4a:	1c5d      	adds	r5, r3, #1
 8009a4c:	2331      	movs	r3, #49	; 0x31
 8009a4e:	7013      	strb	r3, [r2, #0]
 8009a50:	f10b 0b01 	add.w	fp, fp, #1
 8009a54:	e245      	b.n	8009ee2 <_dtoa_r+0x92a>
 8009a56:	07f2      	lsls	r2, r6, #31
 8009a58:	d505      	bpl.n	8009a66 <_dtoa_r+0x4ae>
 8009a5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a5e:	f7f6 fdcf 	bl	8000600 <__aeabi_dmul>
 8009a62:	3501      	adds	r5, #1
 8009a64:	2301      	movs	r3, #1
 8009a66:	1076      	asrs	r6, r6, #1
 8009a68:	3708      	adds	r7, #8
 8009a6a:	e775      	b.n	8009958 <_dtoa_r+0x3a0>
 8009a6c:	2502      	movs	r5, #2
 8009a6e:	e777      	b.n	8009960 <_dtoa_r+0x3a8>
 8009a70:	465f      	mov	r7, fp
 8009a72:	9e03      	ldr	r6, [sp, #12]
 8009a74:	e794      	b.n	80099a0 <_dtoa_r+0x3e8>
 8009a76:	9a02      	ldr	r2, [sp, #8]
 8009a78:	4b4e      	ldr	r3, [pc, #312]	; (8009bb4 <_dtoa_r+0x5fc>)
 8009a7a:	4432      	add	r2, r6
 8009a7c:	9213      	str	r2, [sp, #76]	; 0x4c
 8009a7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a80:	1e71      	subs	r1, r6, #1
 8009a82:	2a00      	cmp	r2, #0
 8009a84:	d048      	beq.n	8009b18 <_dtoa_r+0x560>
 8009a86:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8009a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8e:	2000      	movs	r0, #0
 8009a90:	494e      	ldr	r1, [pc, #312]	; (8009bcc <_dtoa_r+0x614>)
 8009a92:	f7f6 fedf 	bl	8000854 <__aeabi_ddiv>
 8009a96:	4642      	mov	r2, r8
 8009a98:	464b      	mov	r3, r9
 8009a9a:	f7f6 fbfd 	bl	8000298 <__aeabi_dsub>
 8009a9e:	9d02      	ldr	r5, [sp, #8]
 8009aa0:	4680      	mov	r8, r0
 8009aa2:	4689      	mov	r9, r1
 8009aa4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009aa8:	f7f7 f85a 	bl	8000b60 <__aeabi_d2iz>
 8009aac:	4606      	mov	r6, r0
 8009aae:	f7f6 fd41 	bl	8000534 <__aeabi_i2d>
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009aba:	f7f6 fbed 	bl	8000298 <__aeabi_dsub>
 8009abe:	3630      	adds	r6, #48	; 0x30
 8009ac0:	f805 6b01 	strb.w	r6, [r5], #1
 8009ac4:	4642      	mov	r2, r8
 8009ac6:	464b      	mov	r3, r9
 8009ac8:	e9cd 0100 	strd	r0, r1, [sp]
 8009acc:	f7f7 f80a 	bl	8000ae4 <__aeabi_dcmplt>
 8009ad0:	2800      	cmp	r0, #0
 8009ad2:	d165      	bne.n	8009ba0 <_dtoa_r+0x5e8>
 8009ad4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ad8:	2000      	movs	r0, #0
 8009ada:	4938      	ldr	r1, [pc, #224]	; (8009bbc <_dtoa_r+0x604>)
 8009adc:	f7f6 fbdc 	bl	8000298 <__aeabi_dsub>
 8009ae0:	4642      	mov	r2, r8
 8009ae2:	464b      	mov	r3, r9
 8009ae4:	f7f6 fffe 	bl	8000ae4 <__aeabi_dcmplt>
 8009ae8:	2800      	cmp	r0, #0
 8009aea:	f040 80ba 	bne.w	8009c62 <_dtoa_r+0x6aa>
 8009aee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009af0:	429d      	cmp	r5, r3
 8009af2:	f43f af7e 	beq.w	80099f2 <_dtoa_r+0x43a>
 8009af6:	2200      	movs	r2, #0
 8009af8:	4b31      	ldr	r3, [pc, #196]	; (8009bc0 <_dtoa_r+0x608>)
 8009afa:	4640      	mov	r0, r8
 8009afc:	4649      	mov	r1, r9
 8009afe:	f7f6 fd7f 	bl	8000600 <__aeabi_dmul>
 8009b02:	2200      	movs	r2, #0
 8009b04:	4680      	mov	r8, r0
 8009b06:	4689      	mov	r9, r1
 8009b08:	4b2d      	ldr	r3, [pc, #180]	; (8009bc0 <_dtoa_r+0x608>)
 8009b0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b0e:	f7f6 fd77 	bl	8000600 <__aeabi_dmul>
 8009b12:	e9cd 0100 	strd	r0, r1, [sp]
 8009b16:	e7c5      	b.n	8009aa4 <_dtoa_r+0x4ec>
 8009b18:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8009b1c:	4642      	mov	r2, r8
 8009b1e:	464b      	mov	r3, r9
 8009b20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b24:	f7f6 fd6c 	bl	8000600 <__aeabi_dmul>
 8009b28:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009b2c:	9d02      	ldr	r5, [sp, #8]
 8009b2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b32:	f7f7 f815 	bl	8000b60 <__aeabi_d2iz>
 8009b36:	4606      	mov	r6, r0
 8009b38:	f7f6 fcfc 	bl	8000534 <__aeabi_i2d>
 8009b3c:	3630      	adds	r6, #48	; 0x30
 8009b3e:	4602      	mov	r2, r0
 8009b40:	460b      	mov	r3, r1
 8009b42:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b46:	f7f6 fba7 	bl	8000298 <__aeabi_dsub>
 8009b4a:	f805 6b01 	strb.w	r6, [r5], #1
 8009b4e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009b50:	42ab      	cmp	r3, r5
 8009b52:	4680      	mov	r8, r0
 8009b54:	4689      	mov	r9, r1
 8009b56:	f04f 0200 	mov.w	r2, #0
 8009b5a:	d125      	bne.n	8009ba8 <_dtoa_r+0x5f0>
 8009b5c:	4b1b      	ldr	r3, [pc, #108]	; (8009bcc <_dtoa_r+0x614>)
 8009b5e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009b62:	f7f6 fb9b 	bl	800029c <__adddf3>
 8009b66:	4602      	mov	r2, r0
 8009b68:	460b      	mov	r3, r1
 8009b6a:	4640      	mov	r0, r8
 8009b6c:	4649      	mov	r1, r9
 8009b6e:	f7f6 ffd7 	bl	8000b20 <__aeabi_dcmpgt>
 8009b72:	2800      	cmp	r0, #0
 8009b74:	d175      	bne.n	8009c62 <_dtoa_r+0x6aa>
 8009b76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009b7a:	2000      	movs	r0, #0
 8009b7c:	4913      	ldr	r1, [pc, #76]	; (8009bcc <_dtoa_r+0x614>)
 8009b7e:	f7f6 fb8b 	bl	8000298 <__aeabi_dsub>
 8009b82:	4602      	mov	r2, r0
 8009b84:	460b      	mov	r3, r1
 8009b86:	4640      	mov	r0, r8
 8009b88:	4649      	mov	r1, r9
 8009b8a:	f7f6 ffab 	bl	8000ae4 <__aeabi_dcmplt>
 8009b8e:	2800      	cmp	r0, #0
 8009b90:	f43f af2f 	beq.w	80099f2 <_dtoa_r+0x43a>
 8009b94:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009b98:	2b30      	cmp	r3, #48	; 0x30
 8009b9a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8009b9e:	d001      	beq.n	8009ba4 <_dtoa_r+0x5ec>
 8009ba0:	46bb      	mov	fp, r7
 8009ba2:	e04d      	b.n	8009c40 <_dtoa_r+0x688>
 8009ba4:	4615      	mov	r5, r2
 8009ba6:	e7f5      	b.n	8009b94 <_dtoa_r+0x5dc>
 8009ba8:	4b05      	ldr	r3, [pc, #20]	; (8009bc0 <_dtoa_r+0x608>)
 8009baa:	f7f6 fd29 	bl	8000600 <__aeabi_dmul>
 8009bae:	e9cd 0100 	strd	r0, r1, [sp]
 8009bb2:	e7bc      	b.n	8009b2e <_dtoa_r+0x576>
 8009bb4:	0800acf8 	.word	0x0800acf8
 8009bb8:	0800acd0 	.word	0x0800acd0
 8009bbc:	3ff00000 	.word	0x3ff00000
 8009bc0:	40240000 	.word	0x40240000
 8009bc4:	401c0000 	.word	0x401c0000
 8009bc8:	40140000 	.word	0x40140000
 8009bcc:	3fe00000 	.word	0x3fe00000
 8009bd0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009bd4:	9d02      	ldr	r5, [sp, #8]
 8009bd6:	4642      	mov	r2, r8
 8009bd8:	464b      	mov	r3, r9
 8009bda:	4630      	mov	r0, r6
 8009bdc:	4639      	mov	r1, r7
 8009bde:	f7f6 fe39 	bl	8000854 <__aeabi_ddiv>
 8009be2:	f7f6 ffbd 	bl	8000b60 <__aeabi_d2iz>
 8009be6:	9000      	str	r0, [sp, #0]
 8009be8:	f7f6 fca4 	bl	8000534 <__aeabi_i2d>
 8009bec:	4642      	mov	r2, r8
 8009bee:	464b      	mov	r3, r9
 8009bf0:	f7f6 fd06 	bl	8000600 <__aeabi_dmul>
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	4630      	mov	r0, r6
 8009bfa:	4639      	mov	r1, r7
 8009bfc:	f7f6 fb4c 	bl	8000298 <__aeabi_dsub>
 8009c00:	9e00      	ldr	r6, [sp, #0]
 8009c02:	9f03      	ldr	r7, [sp, #12]
 8009c04:	3630      	adds	r6, #48	; 0x30
 8009c06:	f805 6b01 	strb.w	r6, [r5], #1
 8009c0a:	9e02      	ldr	r6, [sp, #8]
 8009c0c:	1bae      	subs	r6, r5, r6
 8009c0e:	42b7      	cmp	r7, r6
 8009c10:	4602      	mov	r2, r0
 8009c12:	460b      	mov	r3, r1
 8009c14:	d138      	bne.n	8009c88 <_dtoa_r+0x6d0>
 8009c16:	f7f6 fb41 	bl	800029c <__adddf3>
 8009c1a:	4606      	mov	r6, r0
 8009c1c:	460f      	mov	r7, r1
 8009c1e:	4602      	mov	r2, r0
 8009c20:	460b      	mov	r3, r1
 8009c22:	4640      	mov	r0, r8
 8009c24:	4649      	mov	r1, r9
 8009c26:	f7f6 ff5d 	bl	8000ae4 <__aeabi_dcmplt>
 8009c2a:	b9c8      	cbnz	r0, 8009c60 <_dtoa_r+0x6a8>
 8009c2c:	4632      	mov	r2, r6
 8009c2e:	463b      	mov	r3, r7
 8009c30:	4640      	mov	r0, r8
 8009c32:	4649      	mov	r1, r9
 8009c34:	f7f6 ff4c 	bl	8000ad0 <__aeabi_dcmpeq>
 8009c38:	b110      	cbz	r0, 8009c40 <_dtoa_r+0x688>
 8009c3a:	9b00      	ldr	r3, [sp, #0]
 8009c3c:	07db      	lsls	r3, r3, #31
 8009c3e:	d40f      	bmi.n	8009c60 <_dtoa_r+0x6a8>
 8009c40:	4651      	mov	r1, sl
 8009c42:	4620      	mov	r0, r4
 8009c44:	f000 fb48 	bl	800a2d8 <_Bfree>
 8009c48:	2300      	movs	r3, #0
 8009c4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009c4c:	702b      	strb	r3, [r5, #0]
 8009c4e:	f10b 0301 	add.w	r3, fp, #1
 8009c52:	6013      	str	r3, [r2, #0]
 8009c54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	f43f acf8 	beq.w	800964c <_dtoa_r+0x94>
 8009c5c:	601d      	str	r5, [r3, #0]
 8009c5e:	e4f5      	b.n	800964c <_dtoa_r+0x94>
 8009c60:	465f      	mov	r7, fp
 8009c62:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009c66:	2a39      	cmp	r2, #57	; 0x39
 8009c68:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8009c6c:	d106      	bne.n	8009c7c <_dtoa_r+0x6c4>
 8009c6e:	9a02      	ldr	r2, [sp, #8]
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d107      	bne.n	8009c84 <_dtoa_r+0x6cc>
 8009c74:	2330      	movs	r3, #48	; 0x30
 8009c76:	7013      	strb	r3, [r2, #0]
 8009c78:	3701      	adds	r7, #1
 8009c7a:	4613      	mov	r3, r2
 8009c7c:	781a      	ldrb	r2, [r3, #0]
 8009c7e:	3201      	adds	r2, #1
 8009c80:	701a      	strb	r2, [r3, #0]
 8009c82:	e78d      	b.n	8009ba0 <_dtoa_r+0x5e8>
 8009c84:	461d      	mov	r5, r3
 8009c86:	e7ec      	b.n	8009c62 <_dtoa_r+0x6aa>
 8009c88:	2200      	movs	r2, #0
 8009c8a:	4ba4      	ldr	r3, [pc, #656]	; (8009f1c <_dtoa_r+0x964>)
 8009c8c:	f7f6 fcb8 	bl	8000600 <__aeabi_dmul>
 8009c90:	2200      	movs	r2, #0
 8009c92:	2300      	movs	r3, #0
 8009c94:	4606      	mov	r6, r0
 8009c96:	460f      	mov	r7, r1
 8009c98:	f7f6 ff1a 	bl	8000ad0 <__aeabi_dcmpeq>
 8009c9c:	2800      	cmp	r0, #0
 8009c9e:	d09a      	beq.n	8009bd6 <_dtoa_r+0x61e>
 8009ca0:	e7ce      	b.n	8009c40 <_dtoa_r+0x688>
 8009ca2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ca4:	2a00      	cmp	r2, #0
 8009ca6:	f000 80cd 	beq.w	8009e44 <_dtoa_r+0x88c>
 8009caa:	9a07      	ldr	r2, [sp, #28]
 8009cac:	2a01      	cmp	r2, #1
 8009cae:	f300 80af 	bgt.w	8009e10 <_dtoa_r+0x858>
 8009cb2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009cb4:	2a00      	cmp	r2, #0
 8009cb6:	f000 80a7 	beq.w	8009e08 <_dtoa_r+0x850>
 8009cba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009cbe:	9e08      	ldr	r6, [sp, #32]
 8009cc0:	9d05      	ldr	r5, [sp, #20]
 8009cc2:	9a05      	ldr	r2, [sp, #20]
 8009cc4:	441a      	add	r2, r3
 8009cc6:	9205      	str	r2, [sp, #20]
 8009cc8:	9a06      	ldr	r2, [sp, #24]
 8009cca:	2101      	movs	r1, #1
 8009ccc:	441a      	add	r2, r3
 8009cce:	4620      	mov	r0, r4
 8009cd0:	9206      	str	r2, [sp, #24]
 8009cd2:	f000 fba1 	bl	800a418 <__i2b>
 8009cd6:	4607      	mov	r7, r0
 8009cd8:	2d00      	cmp	r5, #0
 8009cda:	dd0c      	ble.n	8009cf6 <_dtoa_r+0x73e>
 8009cdc:	9b06      	ldr	r3, [sp, #24]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	dd09      	ble.n	8009cf6 <_dtoa_r+0x73e>
 8009ce2:	42ab      	cmp	r3, r5
 8009ce4:	9a05      	ldr	r2, [sp, #20]
 8009ce6:	bfa8      	it	ge
 8009ce8:	462b      	movge	r3, r5
 8009cea:	1ad2      	subs	r2, r2, r3
 8009cec:	9205      	str	r2, [sp, #20]
 8009cee:	9a06      	ldr	r2, [sp, #24]
 8009cf0:	1aed      	subs	r5, r5, r3
 8009cf2:	1ad3      	subs	r3, r2, r3
 8009cf4:	9306      	str	r3, [sp, #24]
 8009cf6:	9b08      	ldr	r3, [sp, #32]
 8009cf8:	b1f3      	cbz	r3, 8009d38 <_dtoa_r+0x780>
 8009cfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	f000 80a5 	beq.w	8009e4c <_dtoa_r+0x894>
 8009d02:	2e00      	cmp	r6, #0
 8009d04:	dd10      	ble.n	8009d28 <_dtoa_r+0x770>
 8009d06:	4639      	mov	r1, r7
 8009d08:	4632      	mov	r2, r6
 8009d0a:	4620      	mov	r0, r4
 8009d0c:	f000 fc1a 	bl	800a544 <__pow5mult>
 8009d10:	4652      	mov	r2, sl
 8009d12:	4601      	mov	r1, r0
 8009d14:	4607      	mov	r7, r0
 8009d16:	4620      	mov	r0, r4
 8009d18:	f000 fb87 	bl	800a42a <__multiply>
 8009d1c:	4651      	mov	r1, sl
 8009d1e:	4680      	mov	r8, r0
 8009d20:	4620      	mov	r0, r4
 8009d22:	f000 fad9 	bl	800a2d8 <_Bfree>
 8009d26:	46c2      	mov	sl, r8
 8009d28:	9b08      	ldr	r3, [sp, #32]
 8009d2a:	1b9a      	subs	r2, r3, r6
 8009d2c:	d004      	beq.n	8009d38 <_dtoa_r+0x780>
 8009d2e:	4651      	mov	r1, sl
 8009d30:	4620      	mov	r0, r4
 8009d32:	f000 fc07 	bl	800a544 <__pow5mult>
 8009d36:	4682      	mov	sl, r0
 8009d38:	2101      	movs	r1, #1
 8009d3a:	4620      	mov	r0, r4
 8009d3c:	f000 fb6c 	bl	800a418 <__i2b>
 8009d40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	4606      	mov	r6, r0
 8009d46:	f340 8083 	ble.w	8009e50 <_dtoa_r+0x898>
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	4601      	mov	r1, r0
 8009d4e:	4620      	mov	r0, r4
 8009d50:	f000 fbf8 	bl	800a544 <__pow5mult>
 8009d54:	9b07      	ldr	r3, [sp, #28]
 8009d56:	2b01      	cmp	r3, #1
 8009d58:	4606      	mov	r6, r0
 8009d5a:	dd7c      	ble.n	8009e56 <_dtoa_r+0x89e>
 8009d5c:	f04f 0800 	mov.w	r8, #0
 8009d60:	6933      	ldr	r3, [r6, #16]
 8009d62:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009d66:	6918      	ldr	r0, [r3, #16]
 8009d68:	f000 fb08 	bl	800a37c <__hi0bits>
 8009d6c:	f1c0 0020 	rsb	r0, r0, #32
 8009d70:	9b06      	ldr	r3, [sp, #24]
 8009d72:	4418      	add	r0, r3
 8009d74:	f010 001f 	ands.w	r0, r0, #31
 8009d78:	f000 8096 	beq.w	8009ea8 <_dtoa_r+0x8f0>
 8009d7c:	f1c0 0320 	rsb	r3, r0, #32
 8009d80:	2b04      	cmp	r3, #4
 8009d82:	f340 8087 	ble.w	8009e94 <_dtoa_r+0x8dc>
 8009d86:	9b05      	ldr	r3, [sp, #20]
 8009d88:	f1c0 001c 	rsb	r0, r0, #28
 8009d8c:	4403      	add	r3, r0
 8009d8e:	9305      	str	r3, [sp, #20]
 8009d90:	9b06      	ldr	r3, [sp, #24]
 8009d92:	4405      	add	r5, r0
 8009d94:	4403      	add	r3, r0
 8009d96:	9306      	str	r3, [sp, #24]
 8009d98:	9b05      	ldr	r3, [sp, #20]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	dd05      	ble.n	8009daa <_dtoa_r+0x7f2>
 8009d9e:	4651      	mov	r1, sl
 8009da0:	461a      	mov	r2, r3
 8009da2:	4620      	mov	r0, r4
 8009da4:	f000 fc1c 	bl	800a5e0 <__lshift>
 8009da8:	4682      	mov	sl, r0
 8009daa:	9b06      	ldr	r3, [sp, #24]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	dd05      	ble.n	8009dbc <_dtoa_r+0x804>
 8009db0:	4631      	mov	r1, r6
 8009db2:	461a      	mov	r2, r3
 8009db4:	4620      	mov	r0, r4
 8009db6:	f000 fc13 	bl	800a5e0 <__lshift>
 8009dba:	4606      	mov	r6, r0
 8009dbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d074      	beq.n	8009eac <_dtoa_r+0x8f4>
 8009dc2:	4631      	mov	r1, r6
 8009dc4:	4650      	mov	r0, sl
 8009dc6:	f000 fc5c 	bl	800a682 <__mcmp>
 8009dca:	2800      	cmp	r0, #0
 8009dcc:	da6e      	bge.n	8009eac <_dtoa_r+0x8f4>
 8009dce:	2300      	movs	r3, #0
 8009dd0:	4651      	mov	r1, sl
 8009dd2:	220a      	movs	r2, #10
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	f000 fa96 	bl	800a306 <__multadd>
 8009dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ddc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009de0:	4682      	mov	sl, r0
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	f000 81a8 	beq.w	800a138 <_dtoa_r+0xb80>
 8009de8:	2300      	movs	r3, #0
 8009dea:	4639      	mov	r1, r7
 8009dec:	220a      	movs	r2, #10
 8009dee:	4620      	mov	r0, r4
 8009df0:	f000 fa89 	bl	800a306 <__multadd>
 8009df4:	9b04      	ldr	r3, [sp, #16]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	4607      	mov	r7, r0
 8009dfa:	f300 80c8 	bgt.w	8009f8e <_dtoa_r+0x9d6>
 8009dfe:	9b07      	ldr	r3, [sp, #28]
 8009e00:	2b02      	cmp	r3, #2
 8009e02:	f340 80c4 	ble.w	8009f8e <_dtoa_r+0x9d6>
 8009e06:	e059      	b.n	8009ebc <_dtoa_r+0x904>
 8009e08:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009e0a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009e0e:	e756      	b.n	8009cbe <_dtoa_r+0x706>
 8009e10:	9b03      	ldr	r3, [sp, #12]
 8009e12:	1e5e      	subs	r6, r3, #1
 8009e14:	9b08      	ldr	r3, [sp, #32]
 8009e16:	42b3      	cmp	r3, r6
 8009e18:	bfbf      	itttt	lt
 8009e1a:	9b08      	ldrlt	r3, [sp, #32]
 8009e1c:	9608      	strlt	r6, [sp, #32]
 8009e1e:	1af2      	sublt	r2, r6, r3
 8009e20:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8009e22:	bfb6      	itet	lt
 8009e24:	189b      	addlt	r3, r3, r2
 8009e26:	1b9e      	subge	r6, r3, r6
 8009e28:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8009e2a:	9b03      	ldr	r3, [sp, #12]
 8009e2c:	bfb8      	it	lt
 8009e2e:	2600      	movlt	r6, #0
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	bfb9      	ittee	lt
 8009e34:	9b05      	ldrlt	r3, [sp, #20]
 8009e36:	9a03      	ldrlt	r2, [sp, #12]
 8009e38:	9d05      	ldrge	r5, [sp, #20]
 8009e3a:	9b03      	ldrge	r3, [sp, #12]
 8009e3c:	bfbc      	itt	lt
 8009e3e:	1a9d      	sublt	r5, r3, r2
 8009e40:	2300      	movlt	r3, #0
 8009e42:	e73e      	b.n	8009cc2 <_dtoa_r+0x70a>
 8009e44:	9e08      	ldr	r6, [sp, #32]
 8009e46:	9d05      	ldr	r5, [sp, #20]
 8009e48:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009e4a:	e745      	b.n	8009cd8 <_dtoa_r+0x720>
 8009e4c:	9a08      	ldr	r2, [sp, #32]
 8009e4e:	e76e      	b.n	8009d2e <_dtoa_r+0x776>
 8009e50:	9b07      	ldr	r3, [sp, #28]
 8009e52:	2b01      	cmp	r3, #1
 8009e54:	dc19      	bgt.n	8009e8a <_dtoa_r+0x8d2>
 8009e56:	9b00      	ldr	r3, [sp, #0]
 8009e58:	b9bb      	cbnz	r3, 8009e8a <_dtoa_r+0x8d2>
 8009e5a:	9b01      	ldr	r3, [sp, #4]
 8009e5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e60:	b99b      	cbnz	r3, 8009e8a <_dtoa_r+0x8d2>
 8009e62:	9b01      	ldr	r3, [sp, #4]
 8009e64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e68:	0d1b      	lsrs	r3, r3, #20
 8009e6a:	051b      	lsls	r3, r3, #20
 8009e6c:	b183      	cbz	r3, 8009e90 <_dtoa_r+0x8d8>
 8009e6e:	9b05      	ldr	r3, [sp, #20]
 8009e70:	3301      	adds	r3, #1
 8009e72:	9305      	str	r3, [sp, #20]
 8009e74:	9b06      	ldr	r3, [sp, #24]
 8009e76:	3301      	adds	r3, #1
 8009e78:	9306      	str	r3, [sp, #24]
 8009e7a:	f04f 0801 	mov.w	r8, #1
 8009e7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	f47f af6d 	bne.w	8009d60 <_dtoa_r+0x7a8>
 8009e86:	2001      	movs	r0, #1
 8009e88:	e772      	b.n	8009d70 <_dtoa_r+0x7b8>
 8009e8a:	f04f 0800 	mov.w	r8, #0
 8009e8e:	e7f6      	b.n	8009e7e <_dtoa_r+0x8c6>
 8009e90:	4698      	mov	r8, r3
 8009e92:	e7f4      	b.n	8009e7e <_dtoa_r+0x8c6>
 8009e94:	d080      	beq.n	8009d98 <_dtoa_r+0x7e0>
 8009e96:	9a05      	ldr	r2, [sp, #20]
 8009e98:	331c      	adds	r3, #28
 8009e9a:	441a      	add	r2, r3
 8009e9c:	9205      	str	r2, [sp, #20]
 8009e9e:	9a06      	ldr	r2, [sp, #24]
 8009ea0:	441a      	add	r2, r3
 8009ea2:	441d      	add	r5, r3
 8009ea4:	4613      	mov	r3, r2
 8009ea6:	e776      	b.n	8009d96 <_dtoa_r+0x7de>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	e7f4      	b.n	8009e96 <_dtoa_r+0x8de>
 8009eac:	9b03      	ldr	r3, [sp, #12]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	dc36      	bgt.n	8009f20 <_dtoa_r+0x968>
 8009eb2:	9b07      	ldr	r3, [sp, #28]
 8009eb4:	2b02      	cmp	r3, #2
 8009eb6:	dd33      	ble.n	8009f20 <_dtoa_r+0x968>
 8009eb8:	9b03      	ldr	r3, [sp, #12]
 8009eba:	9304      	str	r3, [sp, #16]
 8009ebc:	9b04      	ldr	r3, [sp, #16]
 8009ebe:	b963      	cbnz	r3, 8009eda <_dtoa_r+0x922>
 8009ec0:	4631      	mov	r1, r6
 8009ec2:	2205      	movs	r2, #5
 8009ec4:	4620      	mov	r0, r4
 8009ec6:	f000 fa1e 	bl	800a306 <__multadd>
 8009eca:	4601      	mov	r1, r0
 8009ecc:	4606      	mov	r6, r0
 8009ece:	4650      	mov	r0, sl
 8009ed0:	f000 fbd7 	bl	800a682 <__mcmp>
 8009ed4:	2800      	cmp	r0, #0
 8009ed6:	f73f adb6 	bgt.w	8009a46 <_dtoa_r+0x48e>
 8009eda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009edc:	9d02      	ldr	r5, [sp, #8]
 8009ede:	ea6f 0b03 	mvn.w	fp, r3
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	9303      	str	r3, [sp, #12]
 8009ee6:	4631      	mov	r1, r6
 8009ee8:	4620      	mov	r0, r4
 8009eea:	f000 f9f5 	bl	800a2d8 <_Bfree>
 8009eee:	2f00      	cmp	r7, #0
 8009ef0:	f43f aea6 	beq.w	8009c40 <_dtoa_r+0x688>
 8009ef4:	9b03      	ldr	r3, [sp, #12]
 8009ef6:	b12b      	cbz	r3, 8009f04 <_dtoa_r+0x94c>
 8009ef8:	42bb      	cmp	r3, r7
 8009efa:	d003      	beq.n	8009f04 <_dtoa_r+0x94c>
 8009efc:	4619      	mov	r1, r3
 8009efe:	4620      	mov	r0, r4
 8009f00:	f000 f9ea 	bl	800a2d8 <_Bfree>
 8009f04:	4639      	mov	r1, r7
 8009f06:	4620      	mov	r0, r4
 8009f08:	f000 f9e6 	bl	800a2d8 <_Bfree>
 8009f0c:	e698      	b.n	8009c40 <_dtoa_r+0x688>
 8009f0e:	2600      	movs	r6, #0
 8009f10:	4637      	mov	r7, r6
 8009f12:	e7e2      	b.n	8009eda <_dtoa_r+0x922>
 8009f14:	46bb      	mov	fp, r7
 8009f16:	4637      	mov	r7, r6
 8009f18:	e595      	b.n	8009a46 <_dtoa_r+0x48e>
 8009f1a:	bf00      	nop
 8009f1c:	40240000 	.word	0x40240000
 8009f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f22:	bb93      	cbnz	r3, 8009f8a <_dtoa_r+0x9d2>
 8009f24:	9b03      	ldr	r3, [sp, #12]
 8009f26:	9304      	str	r3, [sp, #16]
 8009f28:	9d02      	ldr	r5, [sp, #8]
 8009f2a:	4631      	mov	r1, r6
 8009f2c:	4650      	mov	r0, sl
 8009f2e:	f7ff fab5 	bl	800949c <quorem>
 8009f32:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009f36:	f805 9b01 	strb.w	r9, [r5], #1
 8009f3a:	9b02      	ldr	r3, [sp, #8]
 8009f3c:	9a04      	ldr	r2, [sp, #16]
 8009f3e:	1aeb      	subs	r3, r5, r3
 8009f40:	429a      	cmp	r2, r3
 8009f42:	f300 80dc 	bgt.w	800a0fe <_dtoa_r+0xb46>
 8009f46:	9b02      	ldr	r3, [sp, #8]
 8009f48:	2a01      	cmp	r2, #1
 8009f4a:	bfac      	ite	ge
 8009f4c:	189b      	addge	r3, r3, r2
 8009f4e:	3301      	addlt	r3, #1
 8009f50:	4698      	mov	r8, r3
 8009f52:	2300      	movs	r3, #0
 8009f54:	9303      	str	r3, [sp, #12]
 8009f56:	4651      	mov	r1, sl
 8009f58:	2201      	movs	r2, #1
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	f000 fb40 	bl	800a5e0 <__lshift>
 8009f60:	4631      	mov	r1, r6
 8009f62:	4682      	mov	sl, r0
 8009f64:	f000 fb8d 	bl	800a682 <__mcmp>
 8009f68:	2800      	cmp	r0, #0
 8009f6a:	f300 808d 	bgt.w	800a088 <_dtoa_r+0xad0>
 8009f6e:	d103      	bne.n	8009f78 <_dtoa_r+0x9c0>
 8009f70:	f019 0f01 	tst.w	r9, #1
 8009f74:	f040 8088 	bne.w	800a088 <_dtoa_r+0xad0>
 8009f78:	4645      	mov	r5, r8
 8009f7a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009f7e:	2b30      	cmp	r3, #48	; 0x30
 8009f80:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8009f84:	d1af      	bne.n	8009ee6 <_dtoa_r+0x92e>
 8009f86:	4615      	mov	r5, r2
 8009f88:	e7f7      	b.n	8009f7a <_dtoa_r+0x9c2>
 8009f8a:	9b03      	ldr	r3, [sp, #12]
 8009f8c:	9304      	str	r3, [sp, #16]
 8009f8e:	2d00      	cmp	r5, #0
 8009f90:	dd05      	ble.n	8009f9e <_dtoa_r+0x9e6>
 8009f92:	4639      	mov	r1, r7
 8009f94:	462a      	mov	r2, r5
 8009f96:	4620      	mov	r0, r4
 8009f98:	f000 fb22 	bl	800a5e0 <__lshift>
 8009f9c:	4607      	mov	r7, r0
 8009f9e:	f1b8 0f00 	cmp.w	r8, #0
 8009fa2:	d04c      	beq.n	800a03e <_dtoa_r+0xa86>
 8009fa4:	6879      	ldr	r1, [r7, #4]
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	f000 f962 	bl	800a270 <_Balloc>
 8009fac:	693a      	ldr	r2, [r7, #16]
 8009fae:	3202      	adds	r2, #2
 8009fb0:	4605      	mov	r5, r0
 8009fb2:	0092      	lsls	r2, r2, #2
 8009fb4:	f107 010c 	add.w	r1, r7, #12
 8009fb8:	300c      	adds	r0, #12
 8009fba:	f7fe facf 	bl	800855c <memcpy>
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	4629      	mov	r1, r5
 8009fc2:	4620      	mov	r0, r4
 8009fc4:	f000 fb0c 	bl	800a5e0 <__lshift>
 8009fc8:	9b00      	ldr	r3, [sp, #0]
 8009fca:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009fce:	9703      	str	r7, [sp, #12]
 8009fd0:	f003 0301 	and.w	r3, r3, #1
 8009fd4:	4607      	mov	r7, r0
 8009fd6:	9305      	str	r3, [sp, #20]
 8009fd8:	4631      	mov	r1, r6
 8009fda:	4650      	mov	r0, sl
 8009fdc:	f7ff fa5e 	bl	800949c <quorem>
 8009fe0:	9903      	ldr	r1, [sp, #12]
 8009fe2:	4605      	mov	r5, r0
 8009fe4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009fe8:	4650      	mov	r0, sl
 8009fea:	f000 fb4a 	bl	800a682 <__mcmp>
 8009fee:	463a      	mov	r2, r7
 8009ff0:	9000      	str	r0, [sp, #0]
 8009ff2:	4631      	mov	r1, r6
 8009ff4:	4620      	mov	r0, r4
 8009ff6:	f000 fb5e 	bl	800a6b6 <__mdiff>
 8009ffa:	68c3      	ldr	r3, [r0, #12]
 8009ffc:	4602      	mov	r2, r0
 8009ffe:	bb03      	cbnz	r3, 800a042 <_dtoa_r+0xa8a>
 800a000:	4601      	mov	r1, r0
 800a002:	9006      	str	r0, [sp, #24]
 800a004:	4650      	mov	r0, sl
 800a006:	f000 fb3c 	bl	800a682 <__mcmp>
 800a00a:	9a06      	ldr	r2, [sp, #24]
 800a00c:	4603      	mov	r3, r0
 800a00e:	4611      	mov	r1, r2
 800a010:	4620      	mov	r0, r4
 800a012:	9306      	str	r3, [sp, #24]
 800a014:	f000 f960 	bl	800a2d8 <_Bfree>
 800a018:	9b06      	ldr	r3, [sp, #24]
 800a01a:	b9a3      	cbnz	r3, 800a046 <_dtoa_r+0xa8e>
 800a01c:	9a07      	ldr	r2, [sp, #28]
 800a01e:	b992      	cbnz	r2, 800a046 <_dtoa_r+0xa8e>
 800a020:	9a05      	ldr	r2, [sp, #20]
 800a022:	b982      	cbnz	r2, 800a046 <_dtoa_r+0xa8e>
 800a024:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a028:	d029      	beq.n	800a07e <_dtoa_r+0xac6>
 800a02a:	9b00      	ldr	r3, [sp, #0]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	dd01      	ble.n	800a034 <_dtoa_r+0xa7c>
 800a030:	f105 0931 	add.w	r9, r5, #49	; 0x31
 800a034:	f108 0501 	add.w	r5, r8, #1
 800a038:	f888 9000 	strb.w	r9, [r8]
 800a03c:	e753      	b.n	8009ee6 <_dtoa_r+0x92e>
 800a03e:	4638      	mov	r0, r7
 800a040:	e7c2      	b.n	8009fc8 <_dtoa_r+0xa10>
 800a042:	2301      	movs	r3, #1
 800a044:	e7e3      	b.n	800a00e <_dtoa_r+0xa56>
 800a046:	9a00      	ldr	r2, [sp, #0]
 800a048:	2a00      	cmp	r2, #0
 800a04a:	db04      	blt.n	800a056 <_dtoa_r+0xa9e>
 800a04c:	d125      	bne.n	800a09a <_dtoa_r+0xae2>
 800a04e:	9a07      	ldr	r2, [sp, #28]
 800a050:	bb1a      	cbnz	r2, 800a09a <_dtoa_r+0xae2>
 800a052:	9a05      	ldr	r2, [sp, #20]
 800a054:	bb0a      	cbnz	r2, 800a09a <_dtoa_r+0xae2>
 800a056:	2b00      	cmp	r3, #0
 800a058:	ddec      	ble.n	800a034 <_dtoa_r+0xa7c>
 800a05a:	4651      	mov	r1, sl
 800a05c:	2201      	movs	r2, #1
 800a05e:	4620      	mov	r0, r4
 800a060:	f000 fabe 	bl	800a5e0 <__lshift>
 800a064:	4631      	mov	r1, r6
 800a066:	4682      	mov	sl, r0
 800a068:	f000 fb0b 	bl	800a682 <__mcmp>
 800a06c:	2800      	cmp	r0, #0
 800a06e:	dc03      	bgt.n	800a078 <_dtoa_r+0xac0>
 800a070:	d1e0      	bne.n	800a034 <_dtoa_r+0xa7c>
 800a072:	f019 0f01 	tst.w	r9, #1
 800a076:	d0dd      	beq.n	800a034 <_dtoa_r+0xa7c>
 800a078:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a07c:	d1d8      	bne.n	800a030 <_dtoa_r+0xa78>
 800a07e:	2339      	movs	r3, #57	; 0x39
 800a080:	f888 3000 	strb.w	r3, [r8]
 800a084:	f108 0801 	add.w	r8, r8, #1
 800a088:	4645      	mov	r5, r8
 800a08a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a08e:	2b39      	cmp	r3, #57	; 0x39
 800a090:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800a094:	d03b      	beq.n	800a10e <_dtoa_r+0xb56>
 800a096:	3301      	adds	r3, #1
 800a098:	e040      	b.n	800a11c <_dtoa_r+0xb64>
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	f108 0501 	add.w	r5, r8, #1
 800a0a0:	dd05      	ble.n	800a0ae <_dtoa_r+0xaf6>
 800a0a2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a0a6:	d0ea      	beq.n	800a07e <_dtoa_r+0xac6>
 800a0a8:	f109 0901 	add.w	r9, r9, #1
 800a0ac:	e7c4      	b.n	800a038 <_dtoa_r+0xa80>
 800a0ae:	9b02      	ldr	r3, [sp, #8]
 800a0b0:	9a04      	ldr	r2, [sp, #16]
 800a0b2:	f805 9c01 	strb.w	r9, [r5, #-1]
 800a0b6:	1aeb      	subs	r3, r5, r3
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	46a8      	mov	r8, r5
 800a0bc:	f43f af4b 	beq.w	8009f56 <_dtoa_r+0x99e>
 800a0c0:	4651      	mov	r1, sl
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	220a      	movs	r2, #10
 800a0c6:	4620      	mov	r0, r4
 800a0c8:	f000 f91d 	bl	800a306 <__multadd>
 800a0cc:	9b03      	ldr	r3, [sp, #12]
 800a0ce:	9903      	ldr	r1, [sp, #12]
 800a0d0:	42bb      	cmp	r3, r7
 800a0d2:	4682      	mov	sl, r0
 800a0d4:	f04f 0300 	mov.w	r3, #0
 800a0d8:	f04f 020a 	mov.w	r2, #10
 800a0dc:	4620      	mov	r0, r4
 800a0de:	d104      	bne.n	800a0ea <_dtoa_r+0xb32>
 800a0e0:	f000 f911 	bl	800a306 <__multadd>
 800a0e4:	9003      	str	r0, [sp, #12]
 800a0e6:	4607      	mov	r7, r0
 800a0e8:	e776      	b.n	8009fd8 <_dtoa_r+0xa20>
 800a0ea:	f000 f90c 	bl	800a306 <__multadd>
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	9003      	str	r0, [sp, #12]
 800a0f2:	220a      	movs	r2, #10
 800a0f4:	4639      	mov	r1, r7
 800a0f6:	4620      	mov	r0, r4
 800a0f8:	f000 f905 	bl	800a306 <__multadd>
 800a0fc:	e7f3      	b.n	800a0e6 <_dtoa_r+0xb2e>
 800a0fe:	4651      	mov	r1, sl
 800a100:	2300      	movs	r3, #0
 800a102:	220a      	movs	r2, #10
 800a104:	4620      	mov	r0, r4
 800a106:	f000 f8fe 	bl	800a306 <__multadd>
 800a10a:	4682      	mov	sl, r0
 800a10c:	e70d      	b.n	8009f2a <_dtoa_r+0x972>
 800a10e:	9b02      	ldr	r3, [sp, #8]
 800a110:	4293      	cmp	r3, r2
 800a112:	d105      	bne.n	800a120 <_dtoa_r+0xb68>
 800a114:	9a02      	ldr	r2, [sp, #8]
 800a116:	f10b 0b01 	add.w	fp, fp, #1
 800a11a:	2331      	movs	r3, #49	; 0x31
 800a11c:	7013      	strb	r3, [r2, #0]
 800a11e:	e6e2      	b.n	8009ee6 <_dtoa_r+0x92e>
 800a120:	4615      	mov	r5, r2
 800a122:	e7b2      	b.n	800a08a <_dtoa_r+0xad2>
 800a124:	4b09      	ldr	r3, [pc, #36]	; (800a14c <_dtoa_r+0xb94>)
 800a126:	f7ff baae 	b.w	8009686 <_dtoa_r+0xce>
 800a12a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	f47f aa88 	bne.w	8009642 <_dtoa_r+0x8a>
 800a132:	4b07      	ldr	r3, [pc, #28]	; (800a150 <_dtoa_r+0xb98>)
 800a134:	f7ff baa7 	b.w	8009686 <_dtoa_r+0xce>
 800a138:	9b04      	ldr	r3, [sp, #16]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	f73f aef4 	bgt.w	8009f28 <_dtoa_r+0x970>
 800a140:	9b07      	ldr	r3, [sp, #28]
 800a142:	2b02      	cmp	r3, #2
 800a144:	f77f aef0 	ble.w	8009f28 <_dtoa_r+0x970>
 800a148:	e6b8      	b.n	8009ebc <_dtoa_r+0x904>
 800a14a:	bf00      	nop
 800a14c:	0800ac9c 	.word	0x0800ac9c
 800a150:	0800acc0 	.word	0x0800acc0

0800a154 <_localeconv_r>:
 800a154:	4b04      	ldr	r3, [pc, #16]	; (800a168 <_localeconv_r+0x14>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	6a18      	ldr	r0, [r3, #32]
 800a15a:	4b04      	ldr	r3, [pc, #16]	; (800a16c <_localeconv_r+0x18>)
 800a15c:	2800      	cmp	r0, #0
 800a15e:	bf08      	it	eq
 800a160:	4618      	moveq	r0, r3
 800a162:	30f0      	adds	r0, #240	; 0xf0
 800a164:	4770      	bx	lr
 800a166:	bf00      	nop
 800a168:	200001a0 	.word	0x200001a0
 800a16c:	20000204 	.word	0x20000204

0800a170 <_lseek_r>:
 800a170:	b538      	push	{r3, r4, r5, lr}
 800a172:	4c07      	ldr	r4, [pc, #28]	; (800a190 <_lseek_r+0x20>)
 800a174:	4605      	mov	r5, r0
 800a176:	4608      	mov	r0, r1
 800a178:	4611      	mov	r1, r2
 800a17a:	2200      	movs	r2, #0
 800a17c:	6022      	str	r2, [r4, #0]
 800a17e:	461a      	mov	r2, r3
 800a180:	f7fd fcb8 	bl	8007af4 <_lseek>
 800a184:	1c43      	adds	r3, r0, #1
 800a186:	d102      	bne.n	800a18e <_lseek_r+0x1e>
 800a188:	6823      	ldr	r3, [r4, #0]
 800a18a:	b103      	cbz	r3, 800a18e <_lseek_r+0x1e>
 800a18c:	602b      	str	r3, [r5, #0]
 800a18e:	bd38      	pop	{r3, r4, r5, pc}
 800a190:	20001558 	.word	0x20001558

0800a194 <__swhatbuf_r>:
 800a194:	b570      	push	{r4, r5, r6, lr}
 800a196:	460e      	mov	r6, r1
 800a198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a19c:	2900      	cmp	r1, #0
 800a19e:	b090      	sub	sp, #64	; 0x40
 800a1a0:	4614      	mov	r4, r2
 800a1a2:	461d      	mov	r5, r3
 800a1a4:	da07      	bge.n	800a1b6 <__swhatbuf_r+0x22>
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	602b      	str	r3, [r5, #0]
 800a1aa:	89b3      	ldrh	r3, [r6, #12]
 800a1ac:	061a      	lsls	r2, r3, #24
 800a1ae:	d410      	bmi.n	800a1d2 <__swhatbuf_r+0x3e>
 800a1b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1b4:	e00e      	b.n	800a1d4 <__swhatbuf_r+0x40>
 800a1b6:	aa01      	add	r2, sp, #4
 800a1b8:	f000 fc8a 	bl	800aad0 <_fstat_r>
 800a1bc:	2800      	cmp	r0, #0
 800a1be:	dbf2      	blt.n	800a1a6 <__swhatbuf_r+0x12>
 800a1c0:	9a02      	ldr	r2, [sp, #8]
 800a1c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a1c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a1ca:	425a      	negs	r2, r3
 800a1cc:	415a      	adcs	r2, r3
 800a1ce:	602a      	str	r2, [r5, #0]
 800a1d0:	e7ee      	b.n	800a1b0 <__swhatbuf_r+0x1c>
 800a1d2:	2340      	movs	r3, #64	; 0x40
 800a1d4:	2000      	movs	r0, #0
 800a1d6:	6023      	str	r3, [r4, #0]
 800a1d8:	b010      	add	sp, #64	; 0x40
 800a1da:	bd70      	pop	{r4, r5, r6, pc}

0800a1dc <__smakebuf_r>:
 800a1dc:	898b      	ldrh	r3, [r1, #12]
 800a1de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a1e0:	079d      	lsls	r5, r3, #30
 800a1e2:	4606      	mov	r6, r0
 800a1e4:	460c      	mov	r4, r1
 800a1e6:	d507      	bpl.n	800a1f8 <__smakebuf_r+0x1c>
 800a1e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a1ec:	6023      	str	r3, [r4, #0]
 800a1ee:	6123      	str	r3, [r4, #16]
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	6163      	str	r3, [r4, #20]
 800a1f4:	b002      	add	sp, #8
 800a1f6:	bd70      	pop	{r4, r5, r6, pc}
 800a1f8:	ab01      	add	r3, sp, #4
 800a1fa:	466a      	mov	r2, sp
 800a1fc:	f7ff ffca 	bl	800a194 <__swhatbuf_r>
 800a200:	9900      	ldr	r1, [sp, #0]
 800a202:	4605      	mov	r5, r0
 800a204:	4630      	mov	r0, r6
 800a206:	f7fe fa0b 	bl	8008620 <_malloc_r>
 800a20a:	b948      	cbnz	r0, 800a220 <__smakebuf_r+0x44>
 800a20c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a210:	059a      	lsls	r2, r3, #22
 800a212:	d4ef      	bmi.n	800a1f4 <__smakebuf_r+0x18>
 800a214:	f023 0303 	bic.w	r3, r3, #3
 800a218:	f043 0302 	orr.w	r3, r3, #2
 800a21c:	81a3      	strh	r3, [r4, #12]
 800a21e:	e7e3      	b.n	800a1e8 <__smakebuf_r+0xc>
 800a220:	4b0d      	ldr	r3, [pc, #52]	; (800a258 <__smakebuf_r+0x7c>)
 800a222:	62b3      	str	r3, [r6, #40]	; 0x28
 800a224:	89a3      	ldrh	r3, [r4, #12]
 800a226:	6020      	str	r0, [r4, #0]
 800a228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a22c:	81a3      	strh	r3, [r4, #12]
 800a22e:	9b00      	ldr	r3, [sp, #0]
 800a230:	6163      	str	r3, [r4, #20]
 800a232:	9b01      	ldr	r3, [sp, #4]
 800a234:	6120      	str	r0, [r4, #16]
 800a236:	b15b      	cbz	r3, 800a250 <__smakebuf_r+0x74>
 800a238:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a23c:	4630      	mov	r0, r6
 800a23e:	f000 fc59 	bl	800aaf4 <_isatty_r>
 800a242:	b128      	cbz	r0, 800a250 <__smakebuf_r+0x74>
 800a244:	89a3      	ldrh	r3, [r4, #12]
 800a246:	f023 0303 	bic.w	r3, r3, #3
 800a24a:	f043 0301 	orr.w	r3, r3, #1
 800a24e:	81a3      	strh	r3, [r4, #12]
 800a250:	89a3      	ldrh	r3, [r4, #12]
 800a252:	431d      	orrs	r5, r3
 800a254:	81a5      	strh	r5, [r4, #12]
 800a256:	e7cd      	b.n	800a1f4 <__smakebuf_r+0x18>
 800a258:	08008381 	.word	0x08008381

0800a25c <malloc>:
 800a25c:	4b02      	ldr	r3, [pc, #8]	; (800a268 <malloc+0xc>)
 800a25e:	4601      	mov	r1, r0
 800a260:	6818      	ldr	r0, [r3, #0]
 800a262:	f7fe b9dd 	b.w	8008620 <_malloc_r>
 800a266:	bf00      	nop
 800a268:	200001a0 	.word	0x200001a0

0800a26c <__malloc_lock>:
 800a26c:	4770      	bx	lr

0800a26e <__malloc_unlock>:
 800a26e:	4770      	bx	lr

0800a270 <_Balloc>:
 800a270:	b570      	push	{r4, r5, r6, lr}
 800a272:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a274:	4604      	mov	r4, r0
 800a276:	460e      	mov	r6, r1
 800a278:	b93d      	cbnz	r5, 800a28a <_Balloc+0x1a>
 800a27a:	2010      	movs	r0, #16
 800a27c:	f7ff ffee 	bl	800a25c <malloc>
 800a280:	6260      	str	r0, [r4, #36]	; 0x24
 800a282:	6045      	str	r5, [r0, #4]
 800a284:	6085      	str	r5, [r0, #8]
 800a286:	6005      	str	r5, [r0, #0]
 800a288:	60c5      	str	r5, [r0, #12]
 800a28a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a28c:	68eb      	ldr	r3, [r5, #12]
 800a28e:	b183      	cbz	r3, 800a2b2 <_Balloc+0x42>
 800a290:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a292:	68db      	ldr	r3, [r3, #12]
 800a294:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a298:	b9b8      	cbnz	r0, 800a2ca <_Balloc+0x5a>
 800a29a:	2101      	movs	r1, #1
 800a29c:	fa01 f506 	lsl.w	r5, r1, r6
 800a2a0:	1d6a      	adds	r2, r5, #5
 800a2a2:	0092      	lsls	r2, r2, #2
 800a2a4:	4620      	mov	r0, r4
 800a2a6:	f000 fab3 	bl	800a810 <_calloc_r>
 800a2aa:	b160      	cbz	r0, 800a2c6 <_Balloc+0x56>
 800a2ac:	6046      	str	r6, [r0, #4]
 800a2ae:	6085      	str	r5, [r0, #8]
 800a2b0:	e00e      	b.n	800a2d0 <_Balloc+0x60>
 800a2b2:	2221      	movs	r2, #33	; 0x21
 800a2b4:	2104      	movs	r1, #4
 800a2b6:	4620      	mov	r0, r4
 800a2b8:	f000 faaa 	bl	800a810 <_calloc_r>
 800a2bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2be:	60e8      	str	r0, [r5, #12]
 800a2c0:	68db      	ldr	r3, [r3, #12]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d1e4      	bne.n	800a290 <_Balloc+0x20>
 800a2c6:	2000      	movs	r0, #0
 800a2c8:	bd70      	pop	{r4, r5, r6, pc}
 800a2ca:	6802      	ldr	r2, [r0, #0]
 800a2cc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	6103      	str	r3, [r0, #16]
 800a2d4:	60c3      	str	r3, [r0, #12]
 800a2d6:	bd70      	pop	{r4, r5, r6, pc}

0800a2d8 <_Bfree>:
 800a2d8:	b570      	push	{r4, r5, r6, lr}
 800a2da:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a2dc:	4606      	mov	r6, r0
 800a2de:	460d      	mov	r5, r1
 800a2e0:	b93c      	cbnz	r4, 800a2f2 <_Bfree+0x1a>
 800a2e2:	2010      	movs	r0, #16
 800a2e4:	f7ff ffba 	bl	800a25c <malloc>
 800a2e8:	6270      	str	r0, [r6, #36]	; 0x24
 800a2ea:	6044      	str	r4, [r0, #4]
 800a2ec:	6084      	str	r4, [r0, #8]
 800a2ee:	6004      	str	r4, [r0, #0]
 800a2f0:	60c4      	str	r4, [r0, #12]
 800a2f2:	b13d      	cbz	r5, 800a304 <_Bfree+0x2c>
 800a2f4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a2f6:	686a      	ldr	r2, [r5, #4]
 800a2f8:	68db      	ldr	r3, [r3, #12]
 800a2fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a2fe:	6029      	str	r1, [r5, #0]
 800a300:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a304:	bd70      	pop	{r4, r5, r6, pc}

0800a306 <__multadd>:
 800a306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a30a:	690d      	ldr	r5, [r1, #16]
 800a30c:	461f      	mov	r7, r3
 800a30e:	4606      	mov	r6, r0
 800a310:	460c      	mov	r4, r1
 800a312:	f101 0e14 	add.w	lr, r1, #20
 800a316:	2300      	movs	r3, #0
 800a318:	f8de 0000 	ldr.w	r0, [lr]
 800a31c:	b281      	uxth	r1, r0
 800a31e:	fb02 7101 	mla	r1, r2, r1, r7
 800a322:	0c0f      	lsrs	r7, r1, #16
 800a324:	0c00      	lsrs	r0, r0, #16
 800a326:	fb02 7000 	mla	r0, r2, r0, r7
 800a32a:	b289      	uxth	r1, r1
 800a32c:	3301      	adds	r3, #1
 800a32e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a332:	429d      	cmp	r5, r3
 800a334:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a338:	f84e 1b04 	str.w	r1, [lr], #4
 800a33c:	dcec      	bgt.n	800a318 <__multadd+0x12>
 800a33e:	b1d7      	cbz	r7, 800a376 <__multadd+0x70>
 800a340:	68a3      	ldr	r3, [r4, #8]
 800a342:	429d      	cmp	r5, r3
 800a344:	db12      	blt.n	800a36c <__multadd+0x66>
 800a346:	6861      	ldr	r1, [r4, #4]
 800a348:	4630      	mov	r0, r6
 800a34a:	3101      	adds	r1, #1
 800a34c:	f7ff ff90 	bl	800a270 <_Balloc>
 800a350:	6922      	ldr	r2, [r4, #16]
 800a352:	3202      	adds	r2, #2
 800a354:	f104 010c 	add.w	r1, r4, #12
 800a358:	4680      	mov	r8, r0
 800a35a:	0092      	lsls	r2, r2, #2
 800a35c:	300c      	adds	r0, #12
 800a35e:	f7fe f8fd 	bl	800855c <memcpy>
 800a362:	4621      	mov	r1, r4
 800a364:	4630      	mov	r0, r6
 800a366:	f7ff ffb7 	bl	800a2d8 <_Bfree>
 800a36a:	4644      	mov	r4, r8
 800a36c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a370:	3501      	adds	r5, #1
 800a372:	615f      	str	r7, [r3, #20]
 800a374:	6125      	str	r5, [r4, #16]
 800a376:	4620      	mov	r0, r4
 800a378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a37c <__hi0bits>:
 800a37c:	0c02      	lsrs	r2, r0, #16
 800a37e:	0412      	lsls	r2, r2, #16
 800a380:	4603      	mov	r3, r0
 800a382:	b9b2      	cbnz	r2, 800a3b2 <__hi0bits+0x36>
 800a384:	0403      	lsls	r3, r0, #16
 800a386:	2010      	movs	r0, #16
 800a388:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a38c:	bf04      	itt	eq
 800a38e:	021b      	lsleq	r3, r3, #8
 800a390:	3008      	addeq	r0, #8
 800a392:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a396:	bf04      	itt	eq
 800a398:	011b      	lsleq	r3, r3, #4
 800a39a:	3004      	addeq	r0, #4
 800a39c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a3a0:	bf04      	itt	eq
 800a3a2:	009b      	lsleq	r3, r3, #2
 800a3a4:	3002      	addeq	r0, #2
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	db06      	blt.n	800a3b8 <__hi0bits+0x3c>
 800a3aa:	005b      	lsls	r3, r3, #1
 800a3ac:	d503      	bpl.n	800a3b6 <__hi0bits+0x3a>
 800a3ae:	3001      	adds	r0, #1
 800a3b0:	4770      	bx	lr
 800a3b2:	2000      	movs	r0, #0
 800a3b4:	e7e8      	b.n	800a388 <__hi0bits+0xc>
 800a3b6:	2020      	movs	r0, #32
 800a3b8:	4770      	bx	lr

0800a3ba <__lo0bits>:
 800a3ba:	6803      	ldr	r3, [r0, #0]
 800a3bc:	f013 0207 	ands.w	r2, r3, #7
 800a3c0:	4601      	mov	r1, r0
 800a3c2:	d00b      	beq.n	800a3dc <__lo0bits+0x22>
 800a3c4:	07da      	lsls	r2, r3, #31
 800a3c6:	d423      	bmi.n	800a410 <__lo0bits+0x56>
 800a3c8:	0798      	lsls	r0, r3, #30
 800a3ca:	bf49      	itett	mi
 800a3cc:	085b      	lsrmi	r3, r3, #1
 800a3ce:	089b      	lsrpl	r3, r3, #2
 800a3d0:	2001      	movmi	r0, #1
 800a3d2:	600b      	strmi	r3, [r1, #0]
 800a3d4:	bf5c      	itt	pl
 800a3d6:	600b      	strpl	r3, [r1, #0]
 800a3d8:	2002      	movpl	r0, #2
 800a3da:	4770      	bx	lr
 800a3dc:	b298      	uxth	r0, r3
 800a3de:	b9a8      	cbnz	r0, 800a40c <__lo0bits+0x52>
 800a3e0:	0c1b      	lsrs	r3, r3, #16
 800a3e2:	2010      	movs	r0, #16
 800a3e4:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a3e8:	bf04      	itt	eq
 800a3ea:	0a1b      	lsreq	r3, r3, #8
 800a3ec:	3008      	addeq	r0, #8
 800a3ee:	071a      	lsls	r2, r3, #28
 800a3f0:	bf04      	itt	eq
 800a3f2:	091b      	lsreq	r3, r3, #4
 800a3f4:	3004      	addeq	r0, #4
 800a3f6:	079a      	lsls	r2, r3, #30
 800a3f8:	bf04      	itt	eq
 800a3fa:	089b      	lsreq	r3, r3, #2
 800a3fc:	3002      	addeq	r0, #2
 800a3fe:	07da      	lsls	r2, r3, #31
 800a400:	d402      	bmi.n	800a408 <__lo0bits+0x4e>
 800a402:	085b      	lsrs	r3, r3, #1
 800a404:	d006      	beq.n	800a414 <__lo0bits+0x5a>
 800a406:	3001      	adds	r0, #1
 800a408:	600b      	str	r3, [r1, #0]
 800a40a:	4770      	bx	lr
 800a40c:	4610      	mov	r0, r2
 800a40e:	e7e9      	b.n	800a3e4 <__lo0bits+0x2a>
 800a410:	2000      	movs	r0, #0
 800a412:	4770      	bx	lr
 800a414:	2020      	movs	r0, #32
 800a416:	4770      	bx	lr

0800a418 <__i2b>:
 800a418:	b510      	push	{r4, lr}
 800a41a:	460c      	mov	r4, r1
 800a41c:	2101      	movs	r1, #1
 800a41e:	f7ff ff27 	bl	800a270 <_Balloc>
 800a422:	2201      	movs	r2, #1
 800a424:	6144      	str	r4, [r0, #20]
 800a426:	6102      	str	r2, [r0, #16]
 800a428:	bd10      	pop	{r4, pc}

0800a42a <__multiply>:
 800a42a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a42e:	4614      	mov	r4, r2
 800a430:	690a      	ldr	r2, [r1, #16]
 800a432:	6923      	ldr	r3, [r4, #16]
 800a434:	429a      	cmp	r2, r3
 800a436:	bfb8      	it	lt
 800a438:	460b      	movlt	r3, r1
 800a43a:	4689      	mov	r9, r1
 800a43c:	bfbc      	itt	lt
 800a43e:	46a1      	movlt	r9, r4
 800a440:	461c      	movlt	r4, r3
 800a442:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a446:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a44a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800a44e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a452:	eb07 060a 	add.w	r6, r7, sl
 800a456:	429e      	cmp	r6, r3
 800a458:	bfc8      	it	gt
 800a45a:	3101      	addgt	r1, #1
 800a45c:	f7ff ff08 	bl	800a270 <_Balloc>
 800a460:	f100 0514 	add.w	r5, r0, #20
 800a464:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a468:	462b      	mov	r3, r5
 800a46a:	2200      	movs	r2, #0
 800a46c:	4543      	cmp	r3, r8
 800a46e:	d316      	bcc.n	800a49e <__multiply+0x74>
 800a470:	f104 0214 	add.w	r2, r4, #20
 800a474:	f109 0114 	add.w	r1, r9, #20
 800a478:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 800a47c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a480:	9301      	str	r3, [sp, #4]
 800a482:	9c01      	ldr	r4, [sp, #4]
 800a484:	4294      	cmp	r4, r2
 800a486:	4613      	mov	r3, r2
 800a488:	d80c      	bhi.n	800a4a4 <__multiply+0x7a>
 800a48a:	2e00      	cmp	r6, #0
 800a48c:	dd03      	ble.n	800a496 <__multiply+0x6c>
 800a48e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a492:	2b00      	cmp	r3, #0
 800a494:	d054      	beq.n	800a540 <__multiply+0x116>
 800a496:	6106      	str	r6, [r0, #16]
 800a498:	b003      	add	sp, #12
 800a49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a49e:	f843 2b04 	str.w	r2, [r3], #4
 800a4a2:	e7e3      	b.n	800a46c <__multiply+0x42>
 800a4a4:	f8b3 a000 	ldrh.w	sl, [r3]
 800a4a8:	3204      	adds	r2, #4
 800a4aa:	f1ba 0f00 	cmp.w	sl, #0
 800a4ae:	d020      	beq.n	800a4f2 <__multiply+0xc8>
 800a4b0:	46ae      	mov	lr, r5
 800a4b2:	4689      	mov	r9, r1
 800a4b4:	f04f 0c00 	mov.w	ip, #0
 800a4b8:	f859 4b04 	ldr.w	r4, [r9], #4
 800a4bc:	f8be b000 	ldrh.w	fp, [lr]
 800a4c0:	b2a3      	uxth	r3, r4
 800a4c2:	fb0a b303 	mla	r3, sl, r3, fp
 800a4c6:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 800a4ca:	f8de 4000 	ldr.w	r4, [lr]
 800a4ce:	4463      	add	r3, ip
 800a4d0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800a4d4:	fb0a c40b 	mla	r4, sl, fp, ip
 800a4d8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a4e2:	454f      	cmp	r7, r9
 800a4e4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800a4e8:	f84e 3b04 	str.w	r3, [lr], #4
 800a4ec:	d8e4      	bhi.n	800a4b8 <__multiply+0x8e>
 800a4ee:	f8ce c000 	str.w	ip, [lr]
 800a4f2:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 800a4f6:	f1b9 0f00 	cmp.w	r9, #0
 800a4fa:	d01f      	beq.n	800a53c <__multiply+0x112>
 800a4fc:	682b      	ldr	r3, [r5, #0]
 800a4fe:	46ae      	mov	lr, r5
 800a500:	468c      	mov	ip, r1
 800a502:	f04f 0a00 	mov.w	sl, #0
 800a506:	f8bc 4000 	ldrh.w	r4, [ip]
 800a50a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a50e:	fb09 b404 	mla	r4, r9, r4, fp
 800a512:	44a2      	add	sl, r4
 800a514:	b29b      	uxth	r3, r3
 800a516:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800a51a:	f84e 3b04 	str.w	r3, [lr], #4
 800a51e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a522:	f8be 4000 	ldrh.w	r4, [lr]
 800a526:	0c1b      	lsrs	r3, r3, #16
 800a528:	fb09 4303 	mla	r3, r9, r3, r4
 800a52c:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 800a530:	4567      	cmp	r7, ip
 800a532:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a536:	d8e6      	bhi.n	800a506 <__multiply+0xdc>
 800a538:	f8ce 3000 	str.w	r3, [lr]
 800a53c:	3504      	adds	r5, #4
 800a53e:	e7a0      	b.n	800a482 <__multiply+0x58>
 800a540:	3e01      	subs	r6, #1
 800a542:	e7a2      	b.n	800a48a <__multiply+0x60>

0800a544 <__pow5mult>:
 800a544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a548:	4615      	mov	r5, r2
 800a54a:	f012 0203 	ands.w	r2, r2, #3
 800a54e:	4606      	mov	r6, r0
 800a550:	460f      	mov	r7, r1
 800a552:	d007      	beq.n	800a564 <__pow5mult+0x20>
 800a554:	3a01      	subs	r2, #1
 800a556:	4c21      	ldr	r4, [pc, #132]	; (800a5dc <__pow5mult+0x98>)
 800a558:	2300      	movs	r3, #0
 800a55a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a55e:	f7ff fed2 	bl	800a306 <__multadd>
 800a562:	4607      	mov	r7, r0
 800a564:	10ad      	asrs	r5, r5, #2
 800a566:	d035      	beq.n	800a5d4 <__pow5mult+0x90>
 800a568:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a56a:	b93c      	cbnz	r4, 800a57c <__pow5mult+0x38>
 800a56c:	2010      	movs	r0, #16
 800a56e:	f7ff fe75 	bl	800a25c <malloc>
 800a572:	6270      	str	r0, [r6, #36]	; 0x24
 800a574:	6044      	str	r4, [r0, #4]
 800a576:	6084      	str	r4, [r0, #8]
 800a578:	6004      	str	r4, [r0, #0]
 800a57a:	60c4      	str	r4, [r0, #12]
 800a57c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a580:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a584:	b94c      	cbnz	r4, 800a59a <__pow5mult+0x56>
 800a586:	f240 2171 	movw	r1, #625	; 0x271
 800a58a:	4630      	mov	r0, r6
 800a58c:	f7ff ff44 	bl	800a418 <__i2b>
 800a590:	2300      	movs	r3, #0
 800a592:	f8c8 0008 	str.w	r0, [r8, #8]
 800a596:	4604      	mov	r4, r0
 800a598:	6003      	str	r3, [r0, #0]
 800a59a:	f04f 0800 	mov.w	r8, #0
 800a59e:	07eb      	lsls	r3, r5, #31
 800a5a0:	d50a      	bpl.n	800a5b8 <__pow5mult+0x74>
 800a5a2:	4639      	mov	r1, r7
 800a5a4:	4622      	mov	r2, r4
 800a5a6:	4630      	mov	r0, r6
 800a5a8:	f7ff ff3f 	bl	800a42a <__multiply>
 800a5ac:	4639      	mov	r1, r7
 800a5ae:	4681      	mov	r9, r0
 800a5b0:	4630      	mov	r0, r6
 800a5b2:	f7ff fe91 	bl	800a2d8 <_Bfree>
 800a5b6:	464f      	mov	r7, r9
 800a5b8:	106d      	asrs	r5, r5, #1
 800a5ba:	d00b      	beq.n	800a5d4 <__pow5mult+0x90>
 800a5bc:	6820      	ldr	r0, [r4, #0]
 800a5be:	b938      	cbnz	r0, 800a5d0 <__pow5mult+0x8c>
 800a5c0:	4622      	mov	r2, r4
 800a5c2:	4621      	mov	r1, r4
 800a5c4:	4630      	mov	r0, r6
 800a5c6:	f7ff ff30 	bl	800a42a <__multiply>
 800a5ca:	6020      	str	r0, [r4, #0]
 800a5cc:	f8c0 8000 	str.w	r8, [r0]
 800a5d0:	4604      	mov	r4, r0
 800a5d2:	e7e4      	b.n	800a59e <__pow5mult+0x5a>
 800a5d4:	4638      	mov	r0, r7
 800a5d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5da:	bf00      	nop
 800a5dc:	0800adc0 	.word	0x0800adc0

0800a5e0 <__lshift>:
 800a5e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5e4:	460c      	mov	r4, r1
 800a5e6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a5ea:	6923      	ldr	r3, [r4, #16]
 800a5ec:	6849      	ldr	r1, [r1, #4]
 800a5ee:	eb0a 0903 	add.w	r9, sl, r3
 800a5f2:	68a3      	ldr	r3, [r4, #8]
 800a5f4:	4607      	mov	r7, r0
 800a5f6:	4616      	mov	r6, r2
 800a5f8:	f109 0501 	add.w	r5, r9, #1
 800a5fc:	42ab      	cmp	r3, r5
 800a5fe:	db31      	blt.n	800a664 <__lshift+0x84>
 800a600:	4638      	mov	r0, r7
 800a602:	f7ff fe35 	bl	800a270 <_Balloc>
 800a606:	2200      	movs	r2, #0
 800a608:	4680      	mov	r8, r0
 800a60a:	f100 0314 	add.w	r3, r0, #20
 800a60e:	4611      	mov	r1, r2
 800a610:	4552      	cmp	r2, sl
 800a612:	db2a      	blt.n	800a66a <__lshift+0x8a>
 800a614:	6920      	ldr	r0, [r4, #16]
 800a616:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a61a:	f104 0114 	add.w	r1, r4, #20
 800a61e:	f016 021f 	ands.w	r2, r6, #31
 800a622:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800a626:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800a62a:	d022      	beq.n	800a672 <__lshift+0x92>
 800a62c:	f1c2 0c20 	rsb	ip, r2, #32
 800a630:	2000      	movs	r0, #0
 800a632:	680e      	ldr	r6, [r1, #0]
 800a634:	4096      	lsls	r6, r2
 800a636:	4330      	orrs	r0, r6
 800a638:	f843 0b04 	str.w	r0, [r3], #4
 800a63c:	f851 0b04 	ldr.w	r0, [r1], #4
 800a640:	458e      	cmp	lr, r1
 800a642:	fa20 f00c 	lsr.w	r0, r0, ip
 800a646:	d8f4      	bhi.n	800a632 <__lshift+0x52>
 800a648:	6018      	str	r0, [r3, #0]
 800a64a:	b108      	cbz	r0, 800a650 <__lshift+0x70>
 800a64c:	f109 0502 	add.w	r5, r9, #2
 800a650:	3d01      	subs	r5, #1
 800a652:	4638      	mov	r0, r7
 800a654:	f8c8 5010 	str.w	r5, [r8, #16]
 800a658:	4621      	mov	r1, r4
 800a65a:	f7ff fe3d 	bl	800a2d8 <_Bfree>
 800a65e:	4640      	mov	r0, r8
 800a660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a664:	3101      	adds	r1, #1
 800a666:	005b      	lsls	r3, r3, #1
 800a668:	e7c8      	b.n	800a5fc <__lshift+0x1c>
 800a66a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a66e:	3201      	adds	r2, #1
 800a670:	e7ce      	b.n	800a610 <__lshift+0x30>
 800a672:	3b04      	subs	r3, #4
 800a674:	f851 2b04 	ldr.w	r2, [r1], #4
 800a678:	f843 2f04 	str.w	r2, [r3, #4]!
 800a67c:	458e      	cmp	lr, r1
 800a67e:	d8f9      	bhi.n	800a674 <__lshift+0x94>
 800a680:	e7e6      	b.n	800a650 <__lshift+0x70>

0800a682 <__mcmp>:
 800a682:	6903      	ldr	r3, [r0, #16]
 800a684:	690a      	ldr	r2, [r1, #16]
 800a686:	1a9b      	subs	r3, r3, r2
 800a688:	b530      	push	{r4, r5, lr}
 800a68a:	d10c      	bne.n	800a6a6 <__mcmp+0x24>
 800a68c:	0092      	lsls	r2, r2, #2
 800a68e:	3014      	adds	r0, #20
 800a690:	3114      	adds	r1, #20
 800a692:	1884      	adds	r4, r0, r2
 800a694:	4411      	add	r1, r2
 800a696:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a69a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a69e:	4295      	cmp	r5, r2
 800a6a0:	d003      	beq.n	800a6aa <__mcmp+0x28>
 800a6a2:	d305      	bcc.n	800a6b0 <__mcmp+0x2e>
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	bd30      	pop	{r4, r5, pc}
 800a6aa:	42a0      	cmp	r0, r4
 800a6ac:	d3f3      	bcc.n	800a696 <__mcmp+0x14>
 800a6ae:	e7fa      	b.n	800a6a6 <__mcmp+0x24>
 800a6b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a6b4:	e7f7      	b.n	800a6a6 <__mcmp+0x24>

0800a6b6 <__mdiff>:
 800a6b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6ba:	460d      	mov	r5, r1
 800a6bc:	4607      	mov	r7, r0
 800a6be:	4611      	mov	r1, r2
 800a6c0:	4628      	mov	r0, r5
 800a6c2:	4614      	mov	r4, r2
 800a6c4:	f7ff ffdd 	bl	800a682 <__mcmp>
 800a6c8:	1e06      	subs	r6, r0, #0
 800a6ca:	d108      	bne.n	800a6de <__mdiff+0x28>
 800a6cc:	4631      	mov	r1, r6
 800a6ce:	4638      	mov	r0, r7
 800a6d0:	f7ff fdce 	bl	800a270 <_Balloc>
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	6103      	str	r3, [r0, #16]
 800a6d8:	6146      	str	r6, [r0, #20]
 800a6da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6de:	bfa4      	itt	ge
 800a6e0:	4623      	movge	r3, r4
 800a6e2:	462c      	movge	r4, r5
 800a6e4:	4638      	mov	r0, r7
 800a6e6:	6861      	ldr	r1, [r4, #4]
 800a6e8:	bfa6      	itte	ge
 800a6ea:	461d      	movge	r5, r3
 800a6ec:	2600      	movge	r6, #0
 800a6ee:	2601      	movlt	r6, #1
 800a6f0:	f7ff fdbe 	bl	800a270 <_Balloc>
 800a6f4:	692b      	ldr	r3, [r5, #16]
 800a6f6:	60c6      	str	r6, [r0, #12]
 800a6f8:	6926      	ldr	r6, [r4, #16]
 800a6fa:	f105 0914 	add.w	r9, r5, #20
 800a6fe:	f104 0214 	add.w	r2, r4, #20
 800a702:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a706:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a70a:	f100 0514 	add.w	r5, r0, #20
 800a70e:	f04f 0c00 	mov.w	ip, #0
 800a712:	f852 ab04 	ldr.w	sl, [r2], #4
 800a716:	f859 4b04 	ldr.w	r4, [r9], #4
 800a71a:	fa1c f18a 	uxtah	r1, ip, sl
 800a71e:	b2a3      	uxth	r3, r4
 800a720:	1ac9      	subs	r1, r1, r3
 800a722:	0c23      	lsrs	r3, r4, #16
 800a724:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a728:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a72c:	b289      	uxth	r1, r1
 800a72e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a732:	45c8      	cmp	r8, r9
 800a734:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a738:	4696      	mov	lr, r2
 800a73a:	f845 3b04 	str.w	r3, [r5], #4
 800a73e:	d8e8      	bhi.n	800a712 <__mdiff+0x5c>
 800a740:	45be      	cmp	lr, r7
 800a742:	d305      	bcc.n	800a750 <__mdiff+0x9a>
 800a744:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a748:	b18b      	cbz	r3, 800a76e <__mdiff+0xb8>
 800a74a:	6106      	str	r6, [r0, #16]
 800a74c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a750:	f85e 1b04 	ldr.w	r1, [lr], #4
 800a754:	fa1c f381 	uxtah	r3, ip, r1
 800a758:	141a      	asrs	r2, r3, #16
 800a75a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a75e:	b29b      	uxth	r3, r3
 800a760:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a764:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a768:	f845 3b04 	str.w	r3, [r5], #4
 800a76c:	e7e8      	b.n	800a740 <__mdiff+0x8a>
 800a76e:	3e01      	subs	r6, #1
 800a770:	e7e8      	b.n	800a744 <__mdiff+0x8e>

0800a772 <__d2b>:
 800a772:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a776:	460e      	mov	r6, r1
 800a778:	2101      	movs	r1, #1
 800a77a:	ec59 8b10 	vmov	r8, r9, d0
 800a77e:	4615      	mov	r5, r2
 800a780:	f7ff fd76 	bl	800a270 <_Balloc>
 800a784:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a788:	4607      	mov	r7, r0
 800a78a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a78e:	bb34      	cbnz	r4, 800a7de <__d2b+0x6c>
 800a790:	9301      	str	r3, [sp, #4]
 800a792:	f1b8 0f00 	cmp.w	r8, #0
 800a796:	d027      	beq.n	800a7e8 <__d2b+0x76>
 800a798:	a802      	add	r0, sp, #8
 800a79a:	f840 8d08 	str.w	r8, [r0, #-8]!
 800a79e:	f7ff fe0c 	bl	800a3ba <__lo0bits>
 800a7a2:	9900      	ldr	r1, [sp, #0]
 800a7a4:	b1f0      	cbz	r0, 800a7e4 <__d2b+0x72>
 800a7a6:	9a01      	ldr	r2, [sp, #4]
 800a7a8:	f1c0 0320 	rsb	r3, r0, #32
 800a7ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a7b0:	430b      	orrs	r3, r1
 800a7b2:	40c2      	lsrs	r2, r0
 800a7b4:	617b      	str	r3, [r7, #20]
 800a7b6:	9201      	str	r2, [sp, #4]
 800a7b8:	9b01      	ldr	r3, [sp, #4]
 800a7ba:	61bb      	str	r3, [r7, #24]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	bf14      	ite	ne
 800a7c0:	2102      	movne	r1, #2
 800a7c2:	2101      	moveq	r1, #1
 800a7c4:	6139      	str	r1, [r7, #16]
 800a7c6:	b1c4      	cbz	r4, 800a7fa <__d2b+0x88>
 800a7c8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a7cc:	4404      	add	r4, r0
 800a7ce:	6034      	str	r4, [r6, #0]
 800a7d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a7d4:	6028      	str	r0, [r5, #0]
 800a7d6:	4638      	mov	r0, r7
 800a7d8:	b003      	add	sp, #12
 800a7da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a7e2:	e7d5      	b.n	800a790 <__d2b+0x1e>
 800a7e4:	6179      	str	r1, [r7, #20]
 800a7e6:	e7e7      	b.n	800a7b8 <__d2b+0x46>
 800a7e8:	a801      	add	r0, sp, #4
 800a7ea:	f7ff fde6 	bl	800a3ba <__lo0bits>
 800a7ee:	9b01      	ldr	r3, [sp, #4]
 800a7f0:	617b      	str	r3, [r7, #20]
 800a7f2:	2101      	movs	r1, #1
 800a7f4:	6139      	str	r1, [r7, #16]
 800a7f6:	3020      	adds	r0, #32
 800a7f8:	e7e5      	b.n	800a7c6 <__d2b+0x54>
 800a7fa:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a7fe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a802:	6030      	str	r0, [r6, #0]
 800a804:	6918      	ldr	r0, [r3, #16]
 800a806:	f7ff fdb9 	bl	800a37c <__hi0bits>
 800a80a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a80e:	e7e1      	b.n	800a7d4 <__d2b+0x62>

0800a810 <_calloc_r>:
 800a810:	b538      	push	{r3, r4, r5, lr}
 800a812:	fb02 f401 	mul.w	r4, r2, r1
 800a816:	4621      	mov	r1, r4
 800a818:	f7fd ff02 	bl	8008620 <_malloc_r>
 800a81c:	4605      	mov	r5, r0
 800a81e:	b118      	cbz	r0, 800a828 <_calloc_r+0x18>
 800a820:	4622      	mov	r2, r4
 800a822:	2100      	movs	r1, #0
 800a824:	f7fd fea5 	bl	8008572 <memset>
 800a828:	4628      	mov	r0, r5
 800a82a:	bd38      	pop	{r3, r4, r5, pc}

0800a82c <__sfputc_r>:
 800a82c:	6893      	ldr	r3, [r2, #8]
 800a82e:	3b01      	subs	r3, #1
 800a830:	2b00      	cmp	r3, #0
 800a832:	b410      	push	{r4}
 800a834:	6093      	str	r3, [r2, #8]
 800a836:	da09      	bge.n	800a84c <__sfputc_r+0x20>
 800a838:	6994      	ldr	r4, [r2, #24]
 800a83a:	42a3      	cmp	r3, r4
 800a83c:	db02      	blt.n	800a844 <__sfputc_r+0x18>
 800a83e:	b2cb      	uxtb	r3, r1
 800a840:	2b0a      	cmp	r3, #10
 800a842:	d103      	bne.n	800a84c <__sfputc_r+0x20>
 800a844:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a848:	f7fe bd46 	b.w	80092d8 <__swbuf_r>
 800a84c:	6813      	ldr	r3, [r2, #0]
 800a84e:	1c58      	adds	r0, r3, #1
 800a850:	6010      	str	r0, [r2, #0]
 800a852:	7019      	strb	r1, [r3, #0]
 800a854:	b2c8      	uxtb	r0, r1
 800a856:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a85a:	4770      	bx	lr

0800a85c <__sfputs_r>:
 800a85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a85e:	4606      	mov	r6, r0
 800a860:	460f      	mov	r7, r1
 800a862:	4614      	mov	r4, r2
 800a864:	18d5      	adds	r5, r2, r3
 800a866:	42ac      	cmp	r4, r5
 800a868:	d101      	bne.n	800a86e <__sfputs_r+0x12>
 800a86a:	2000      	movs	r0, #0
 800a86c:	e007      	b.n	800a87e <__sfputs_r+0x22>
 800a86e:	463a      	mov	r2, r7
 800a870:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a874:	4630      	mov	r0, r6
 800a876:	f7ff ffd9 	bl	800a82c <__sfputc_r>
 800a87a:	1c43      	adds	r3, r0, #1
 800a87c:	d1f3      	bne.n	800a866 <__sfputs_r+0xa>
 800a87e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a880 <_vfiprintf_r>:
 800a880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a884:	b09d      	sub	sp, #116	; 0x74
 800a886:	460c      	mov	r4, r1
 800a888:	4617      	mov	r7, r2
 800a88a:	9303      	str	r3, [sp, #12]
 800a88c:	4606      	mov	r6, r0
 800a88e:	b118      	cbz	r0, 800a898 <_vfiprintf_r+0x18>
 800a890:	6983      	ldr	r3, [r0, #24]
 800a892:	b90b      	cbnz	r3, 800a898 <_vfiprintf_r+0x18>
 800a894:	f7fd fdb4 	bl	8008400 <__sinit>
 800a898:	4b7c      	ldr	r3, [pc, #496]	; (800aa8c <_vfiprintf_r+0x20c>)
 800a89a:	429c      	cmp	r4, r3
 800a89c:	d157      	bne.n	800a94e <_vfiprintf_r+0xce>
 800a89e:	6874      	ldr	r4, [r6, #4]
 800a8a0:	89a3      	ldrh	r3, [r4, #12]
 800a8a2:	0718      	lsls	r0, r3, #28
 800a8a4:	d55d      	bpl.n	800a962 <_vfiprintf_r+0xe2>
 800a8a6:	6923      	ldr	r3, [r4, #16]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d05a      	beq.n	800a962 <_vfiprintf_r+0xe2>
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	9309      	str	r3, [sp, #36]	; 0x24
 800a8b0:	2320      	movs	r3, #32
 800a8b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a8b6:	2330      	movs	r3, #48	; 0x30
 800a8b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a8bc:	f04f 0b01 	mov.w	fp, #1
 800a8c0:	46b8      	mov	r8, r7
 800a8c2:	4645      	mov	r5, r8
 800a8c4:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d155      	bne.n	800a978 <_vfiprintf_r+0xf8>
 800a8cc:	ebb8 0a07 	subs.w	sl, r8, r7
 800a8d0:	d00b      	beq.n	800a8ea <_vfiprintf_r+0x6a>
 800a8d2:	4653      	mov	r3, sl
 800a8d4:	463a      	mov	r2, r7
 800a8d6:	4621      	mov	r1, r4
 800a8d8:	4630      	mov	r0, r6
 800a8da:	f7ff ffbf 	bl	800a85c <__sfputs_r>
 800a8de:	3001      	adds	r0, #1
 800a8e0:	f000 80c4 	beq.w	800aa6c <_vfiprintf_r+0x1ec>
 800a8e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8e6:	4453      	add	r3, sl
 800a8e8:	9309      	str	r3, [sp, #36]	; 0x24
 800a8ea:	f898 3000 	ldrb.w	r3, [r8]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	f000 80bc 	beq.w	800aa6c <_vfiprintf_r+0x1ec>
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a8fa:	9304      	str	r3, [sp, #16]
 800a8fc:	9307      	str	r3, [sp, #28]
 800a8fe:	9205      	str	r2, [sp, #20]
 800a900:	9306      	str	r3, [sp, #24]
 800a902:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a906:	931a      	str	r3, [sp, #104]	; 0x68
 800a908:	2205      	movs	r2, #5
 800a90a:	7829      	ldrb	r1, [r5, #0]
 800a90c:	4860      	ldr	r0, [pc, #384]	; (800aa90 <_vfiprintf_r+0x210>)
 800a90e:	f7f5 fc6f 	bl	80001f0 <memchr>
 800a912:	f105 0801 	add.w	r8, r5, #1
 800a916:	9b04      	ldr	r3, [sp, #16]
 800a918:	2800      	cmp	r0, #0
 800a91a:	d131      	bne.n	800a980 <_vfiprintf_r+0x100>
 800a91c:	06d9      	lsls	r1, r3, #27
 800a91e:	bf44      	itt	mi
 800a920:	2220      	movmi	r2, #32
 800a922:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a926:	071a      	lsls	r2, r3, #28
 800a928:	bf44      	itt	mi
 800a92a:	222b      	movmi	r2, #43	; 0x2b
 800a92c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a930:	782a      	ldrb	r2, [r5, #0]
 800a932:	2a2a      	cmp	r2, #42	; 0x2a
 800a934:	d02c      	beq.n	800a990 <_vfiprintf_r+0x110>
 800a936:	9a07      	ldr	r2, [sp, #28]
 800a938:	2100      	movs	r1, #0
 800a93a:	200a      	movs	r0, #10
 800a93c:	46a8      	mov	r8, r5
 800a93e:	3501      	adds	r5, #1
 800a940:	f898 3000 	ldrb.w	r3, [r8]
 800a944:	3b30      	subs	r3, #48	; 0x30
 800a946:	2b09      	cmp	r3, #9
 800a948:	d96d      	bls.n	800aa26 <_vfiprintf_r+0x1a6>
 800a94a:	b371      	cbz	r1, 800a9aa <_vfiprintf_r+0x12a>
 800a94c:	e026      	b.n	800a99c <_vfiprintf_r+0x11c>
 800a94e:	4b51      	ldr	r3, [pc, #324]	; (800aa94 <_vfiprintf_r+0x214>)
 800a950:	429c      	cmp	r4, r3
 800a952:	d101      	bne.n	800a958 <_vfiprintf_r+0xd8>
 800a954:	68b4      	ldr	r4, [r6, #8]
 800a956:	e7a3      	b.n	800a8a0 <_vfiprintf_r+0x20>
 800a958:	4b4f      	ldr	r3, [pc, #316]	; (800aa98 <_vfiprintf_r+0x218>)
 800a95a:	429c      	cmp	r4, r3
 800a95c:	bf08      	it	eq
 800a95e:	68f4      	ldreq	r4, [r6, #12]
 800a960:	e79e      	b.n	800a8a0 <_vfiprintf_r+0x20>
 800a962:	4621      	mov	r1, r4
 800a964:	4630      	mov	r0, r6
 800a966:	f7fe fd1b 	bl	80093a0 <__swsetup_r>
 800a96a:	2800      	cmp	r0, #0
 800a96c:	d09e      	beq.n	800a8ac <_vfiprintf_r+0x2c>
 800a96e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a972:	b01d      	add	sp, #116	; 0x74
 800a974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a978:	2b25      	cmp	r3, #37	; 0x25
 800a97a:	d0a7      	beq.n	800a8cc <_vfiprintf_r+0x4c>
 800a97c:	46a8      	mov	r8, r5
 800a97e:	e7a0      	b.n	800a8c2 <_vfiprintf_r+0x42>
 800a980:	4a43      	ldr	r2, [pc, #268]	; (800aa90 <_vfiprintf_r+0x210>)
 800a982:	1a80      	subs	r0, r0, r2
 800a984:	fa0b f000 	lsl.w	r0, fp, r0
 800a988:	4318      	orrs	r0, r3
 800a98a:	9004      	str	r0, [sp, #16]
 800a98c:	4645      	mov	r5, r8
 800a98e:	e7bb      	b.n	800a908 <_vfiprintf_r+0x88>
 800a990:	9a03      	ldr	r2, [sp, #12]
 800a992:	1d11      	adds	r1, r2, #4
 800a994:	6812      	ldr	r2, [r2, #0]
 800a996:	9103      	str	r1, [sp, #12]
 800a998:	2a00      	cmp	r2, #0
 800a99a:	db01      	blt.n	800a9a0 <_vfiprintf_r+0x120>
 800a99c:	9207      	str	r2, [sp, #28]
 800a99e:	e004      	b.n	800a9aa <_vfiprintf_r+0x12a>
 800a9a0:	4252      	negs	r2, r2
 800a9a2:	f043 0302 	orr.w	r3, r3, #2
 800a9a6:	9207      	str	r2, [sp, #28]
 800a9a8:	9304      	str	r3, [sp, #16]
 800a9aa:	f898 3000 	ldrb.w	r3, [r8]
 800a9ae:	2b2e      	cmp	r3, #46	; 0x2e
 800a9b0:	d110      	bne.n	800a9d4 <_vfiprintf_r+0x154>
 800a9b2:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a9b6:	2b2a      	cmp	r3, #42	; 0x2a
 800a9b8:	f108 0101 	add.w	r1, r8, #1
 800a9bc:	d137      	bne.n	800aa2e <_vfiprintf_r+0x1ae>
 800a9be:	9b03      	ldr	r3, [sp, #12]
 800a9c0:	1d1a      	adds	r2, r3, #4
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	9203      	str	r2, [sp, #12]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	bfb8      	it	lt
 800a9ca:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a9ce:	f108 0802 	add.w	r8, r8, #2
 800a9d2:	9305      	str	r3, [sp, #20]
 800a9d4:	4d31      	ldr	r5, [pc, #196]	; (800aa9c <_vfiprintf_r+0x21c>)
 800a9d6:	f898 1000 	ldrb.w	r1, [r8]
 800a9da:	2203      	movs	r2, #3
 800a9dc:	4628      	mov	r0, r5
 800a9de:	f7f5 fc07 	bl	80001f0 <memchr>
 800a9e2:	b140      	cbz	r0, 800a9f6 <_vfiprintf_r+0x176>
 800a9e4:	2340      	movs	r3, #64	; 0x40
 800a9e6:	1b40      	subs	r0, r0, r5
 800a9e8:	fa03 f000 	lsl.w	r0, r3, r0
 800a9ec:	9b04      	ldr	r3, [sp, #16]
 800a9ee:	4303      	orrs	r3, r0
 800a9f0:	9304      	str	r3, [sp, #16]
 800a9f2:	f108 0801 	add.w	r8, r8, #1
 800a9f6:	f898 1000 	ldrb.w	r1, [r8]
 800a9fa:	4829      	ldr	r0, [pc, #164]	; (800aaa0 <_vfiprintf_r+0x220>)
 800a9fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa00:	2206      	movs	r2, #6
 800aa02:	f108 0701 	add.w	r7, r8, #1
 800aa06:	f7f5 fbf3 	bl	80001f0 <memchr>
 800aa0a:	2800      	cmp	r0, #0
 800aa0c:	d034      	beq.n	800aa78 <_vfiprintf_r+0x1f8>
 800aa0e:	4b25      	ldr	r3, [pc, #148]	; (800aaa4 <_vfiprintf_r+0x224>)
 800aa10:	bb03      	cbnz	r3, 800aa54 <_vfiprintf_r+0x1d4>
 800aa12:	9b03      	ldr	r3, [sp, #12]
 800aa14:	3307      	adds	r3, #7
 800aa16:	f023 0307 	bic.w	r3, r3, #7
 800aa1a:	3308      	adds	r3, #8
 800aa1c:	9303      	str	r3, [sp, #12]
 800aa1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa20:	444b      	add	r3, r9
 800aa22:	9309      	str	r3, [sp, #36]	; 0x24
 800aa24:	e74c      	b.n	800a8c0 <_vfiprintf_r+0x40>
 800aa26:	fb00 3202 	mla	r2, r0, r2, r3
 800aa2a:	2101      	movs	r1, #1
 800aa2c:	e786      	b.n	800a93c <_vfiprintf_r+0xbc>
 800aa2e:	2300      	movs	r3, #0
 800aa30:	9305      	str	r3, [sp, #20]
 800aa32:	4618      	mov	r0, r3
 800aa34:	250a      	movs	r5, #10
 800aa36:	4688      	mov	r8, r1
 800aa38:	3101      	adds	r1, #1
 800aa3a:	f898 2000 	ldrb.w	r2, [r8]
 800aa3e:	3a30      	subs	r2, #48	; 0x30
 800aa40:	2a09      	cmp	r2, #9
 800aa42:	d903      	bls.n	800aa4c <_vfiprintf_r+0x1cc>
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d0c5      	beq.n	800a9d4 <_vfiprintf_r+0x154>
 800aa48:	9005      	str	r0, [sp, #20]
 800aa4a:	e7c3      	b.n	800a9d4 <_vfiprintf_r+0x154>
 800aa4c:	fb05 2000 	mla	r0, r5, r0, r2
 800aa50:	2301      	movs	r3, #1
 800aa52:	e7f0      	b.n	800aa36 <_vfiprintf_r+0x1b6>
 800aa54:	ab03      	add	r3, sp, #12
 800aa56:	9300      	str	r3, [sp, #0]
 800aa58:	4622      	mov	r2, r4
 800aa5a:	4b13      	ldr	r3, [pc, #76]	; (800aaa8 <_vfiprintf_r+0x228>)
 800aa5c:	a904      	add	r1, sp, #16
 800aa5e:	4630      	mov	r0, r6
 800aa60:	f7fd fed2 	bl	8008808 <_printf_float>
 800aa64:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800aa68:	4681      	mov	r9, r0
 800aa6a:	d1d8      	bne.n	800aa1e <_vfiprintf_r+0x19e>
 800aa6c:	89a3      	ldrh	r3, [r4, #12]
 800aa6e:	065b      	lsls	r3, r3, #25
 800aa70:	f53f af7d 	bmi.w	800a96e <_vfiprintf_r+0xee>
 800aa74:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa76:	e77c      	b.n	800a972 <_vfiprintf_r+0xf2>
 800aa78:	ab03      	add	r3, sp, #12
 800aa7a:	9300      	str	r3, [sp, #0]
 800aa7c:	4622      	mov	r2, r4
 800aa7e:	4b0a      	ldr	r3, [pc, #40]	; (800aaa8 <_vfiprintf_r+0x228>)
 800aa80:	a904      	add	r1, sp, #16
 800aa82:	4630      	mov	r0, r6
 800aa84:	f7fe f976 	bl	8008d74 <_printf_i>
 800aa88:	e7ec      	b.n	800aa64 <_vfiprintf_r+0x1e4>
 800aa8a:	bf00      	nop
 800aa8c:	0800ac48 	.word	0x0800ac48
 800aa90:	0800adcc 	.word	0x0800adcc
 800aa94:	0800ac68 	.word	0x0800ac68
 800aa98:	0800ac28 	.word	0x0800ac28
 800aa9c:	0800add2 	.word	0x0800add2
 800aaa0:	0800add6 	.word	0x0800add6
 800aaa4:	08008809 	.word	0x08008809
 800aaa8:	0800a85d 	.word	0x0800a85d

0800aaac <_read_r>:
 800aaac:	b538      	push	{r3, r4, r5, lr}
 800aaae:	4c07      	ldr	r4, [pc, #28]	; (800aacc <_read_r+0x20>)
 800aab0:	4605      	mov	r5, r0
 800aab2:	4608      	mov	r0, r1
 800aab4:	4611      	mov	r1, r2
 800aab6:	2200      	movs	r2, #0
 800aab8:	6022      	str	r2, [r4, #0]
 800aaba:	461a      	mov	r2, r3
 800aabc:	f7fc ffda 	bl	8007a74 <_read>
 800aac0:	1c43      	adds	r3, r0, #1
 800aac2:	d102      	bne.n	800aaca <_read_r+0x1e>
 800aac4:	6823      	ldr	r3, [r4, #0]
 800aac6:	b103      	cbz	r3, 800aaca <_read_r+0x1e>
 800aac8:	602b      	str	r3, [r5, #0]
 800aaca:	bd38      	pop	{r3, r4, r5, pc}
 800aacc:	20001558 	.word	0x20001558

0800aad0 <_fstat_r>:
 800aad0:	b538      	push	{r3, r4, r5, lr}
 800aad2:	4c07      	ldr	r4, [pc, #28]	; (800aaf0 <_fstat_r+0x20>)
 800aad4:	2300      	movs	r3, #0
 800aad6:	4605      	mov	r5, r0
 800aad8:	4608      	mov	r0, r1
 800aada:	4611      	mov	r1, r2
 800aadc:	6023      	str	r3, [r4, #0]
 800aade:	f7fd f802 	bl	8007ae6 <_fstat>
 800aae2:	1c43      	adds	r3, r0, #1
 800aae4:	d102      	bne.n	800aaec <_fstat_r+0x1c>
 800aae6:	6823      	ldr	r3, [r4, #0]
 800aae8:	b103      	cbz	r3, 800aaec <_fstat_r+0x1c>
 800aaea:	602b      	str	r3, [r5, #0]
 800aaec:	bd38      	pop	{r3, r4, r5, pc}
 800aaee:	bf00      	nop
 800aaf0:	20001558 	.word	0x20001558

0800aaf4 <_isatty_r>:
 800aaf4:	b538      	push	{r3, r4, r5, lr}
 800aaf6:	4c06      	ldr	r4, [pc, #24]	; (800ab10 <_isatty_r+0x1c>)
 800aaf8:	2300      	movs	r3, #0
 800aafa:	4605      	mov	r5, r0
 800aafc:	4608      	mov	r0, r1
 800aafe:	6023      	str	r3, [r4, #0]
 800ab00:	f7fc fff6 	bl	8007af0 <_isatty>
 800ab04:	1c43      	adds	r3, r0, #1
 800ab06:	d102      	bne.n	800ab0e <_isatty_r+0x1a>
 800ab08:	6823      	ldr	r3, [r4, #0]
 800ab0a:	b103      	cbz	r3, 800ab0e <_isatty_r+0x1a>
 800ab0c:	602b      	str	r3, [r5, #0]
 800ab0e:	bd38      	pop	{r3, r4, r5, pc}
 800ab10:	20001558 	.word	0x20001558

0800ab14 <__ascii_mbtowc>:
 800ab14:	b082      	sub	sp, #8
 800ab16:	b901      	cbnz	r1, 800ab1a <__ascii_mbtowc+0x6>
 800ab18:	a901      	add	r1, sp, #4
 800ab1a:	b142      	cbz	r2, 800ab2e <__ascii_mbtowc+0x1a>
 800ab1c:	b14b      	cbz	r3, 800ab32 <__ascii_mbtowc+0x1e>
 800ab1e:	7813      	ldrb	r3, [r2, #0]
 800ab20:	600b      	str	r3, [r1, #0]
 800ab22:	7812      	ldrb	r2, [r2, #0]
 800ab24:	1c10      	adds	r0, r2, #0
 800ab26:	bf18      	it	ne
 800ab28:	2001      	movne	r0, #1
 800ab2a:	b002      	add	sp, #8
 800ab2c:	4770      	bx	lr
 800ab2e:	4610      	mov	r0, r2
 800ab30:	e7fb      	b.n	800ab2a <__ascii_mbtowc+0x16>
 800ab32:	f06f 0001 	mvn.w	r0, #1
 800ab36:	e7f8      	b.n	800ab2a <__ascii_mbtowc+0x16>

0800ab38 <__ascii_wctomb>:
 800ab38:	b149      	cbz	r1, 800ab4e <__ascii_wctomb+0x16>
 800ab3a:	2aff      	cmp	r2, #255	; 0xff
 800ab3c:	bf85      	ittet	hi
 800ab3e:	238a      	movhi	r3, #138	; 0x8a
 800ab40:	6003      	strhi	r3, [r0, #0]
 800ab42:	700a      	strbls	r2, [r1, #0]
 800ab44:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ab48:	bf98      	it	ls
 800ab4a:	2001      	movls	r0, #1
 800ab4c:	4770      	bx	lr
 800ab4e:	4608      	mov	r0, r1
 800ab50:	4770      	bx	lr
	...

0800ab54 <_init>:
 800ab54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab56:	bf00      	nop
 800ab58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab5a:	bc08      	pop	{r3}
 800ab5c:	469e      	mov	lr, r3
 800ab5e:	4770      	bx	lr

0800ab60 <_fini>:
 800ab60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab62:	bf00      	nop
 800ab64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab66:	bc08      	pop	{r3}
 800ab68:	469e      	mov	lr, r3
 800ab6a:	4770      	bx	lr
