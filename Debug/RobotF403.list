
RobotF403.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005728  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  080058c8  080058c8  000158c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080059d8  080059d8  000159d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080059e0  080059e0  000159e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080059e4  080059e4  000159e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  20000000  080059e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000052c  200001e0  08005bc8  000201e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000070c  08005bc8  0002070c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002855d  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004ad4  00000000  00000000  0004876d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000cc22  00000000  00000000  0004d241  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001240  00000000  00000000  00059e68  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001748  00000000  00000000  0005b0a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000a4d1  00000000  00000000  0005c7f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00006708  00000000  00000000  00066cc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0006d3c9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003d9c  00000000  00000000  0006d448  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080058b0 	.word	0x080058b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	080058b0 	.word	0x080058b0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b97a 	b.w	800058c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	468c      	mov	ip, r1
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	9e08      	ldr	r6, [sp, #32]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d151      	bne.n	8000364 <__udivmoddi4+0xb4>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d96d      	bls.n	80003a2 <__udivmoddi4+0xf2>
 80002c6:	fab2 fe82 	clz	lr, r2
 80002ca:	f1be 0f00 	cmp.w	lr, #0
 80002ce:	d00b      	beq.n	80002e8 <__udivmoddi4+0x38>
 80002d0:	f1ce 0c20 	rsb	ip, lr, #32
 80002d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ec:	0c25      	lsrs	r5, r4, #16
 80002ee:	fbbc f8fa 	udiv	r8, ip, sl
 80002f2:	fa1f f987 	uxth.w	r9, r7
 80002f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002fe:	fb08 f309 	mul.w	r3, r8, r9
 8000302:	42ab      	cmp	r3, r5
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x6c>
 8000306:	19ed      	adds	r5, r5, r7
 8000308:	f108 32ff 	add.w	r2, r8, #4294967295
 800030c:	f080 8123 	bcs.w	8000556 <__udivmoddi4+0x2a6>
 8000310:	42ab      	cmp	r3, r5
 8000312:	f240 8120 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000316:	f1a8 0802 	sub.w	r8, r8, #2
 800031a:	443d      	add	r5, r7
 800031c:	1aed      	subs	r5, r5, r3
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb5 f0fa 	udiv	r0, r5, sl
 8000324:	fb0a 5510 	mls	r5, sl, r0, r5
 8000328:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800032c:	fb00 f909 	mul.w	r9, r0, r9
 8000330:	45a1      	cmp	r9, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x98>
 8000334:	19e4      	adds	r4, r4, r7
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	f080 810a 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800033e:	45a1      	cmp	r9, r4
 8000340:	f240 8107 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 0409 	sub.w	r4, r4, r9
 800034c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000350:	2100      	movs	r1, #0
 8000352:	2e00      	cmp	r6, #0
 8000354:	d061      	beq.n	800041a <__udivmoddi4+0x16a>
 8000356:	fa24 f40e 	lsr.w	r4, r4, lr
 800035a:	2300      	movs	r3, #0
 800035c:	6034      	str	r4, [r6, #0]
 800035e:	6073      	str	r3, [r6, #4]
 8000360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xc8>
 8000368:	2e00      	cmp	r6, #0
 800036a:	d054      	beq.n	8000416 <__udivmoddi4+0x166>
 800036c:	2100      	movs	r1, #0
 800036e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000372:	4608      	mov	r0, r1
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	f040 808e 	bne.w	800049e <__udivmoddi4+0x1ee>
 8000382:	42ab      	cmp	r3, r5
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xdc>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2d0>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb65 0503 	sbc.w	r5, r5, r3
 8000392:	2001      	movs	r0, #1
 8000394:	46ac      	mov	ip, r5
 8000396:	2e00      	cmp	r6, #0
 8000398:	d03f      	beq.n	800041a <__udivmoddi4+0x16a>
 800039a:	e886 1010 	stmia.w	r6, {r4, ip}
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	b912      	cbnz	r2, 80003aa <__udivmoddi4+0xfa>
 80003a4:	2701      	movs	r7, #1
 80003a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003aa:	fab7 fe87 	clz	lr, r7
 80003ae:	f1be 0f00 	cmp.w	lr, #0
 80003b2:	d134      	bne.n	800041e <__udivmoddi4+0x16e>
 80003b4:	1beb      	subs	r3, r5, r7
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb3 f8f2 	udiv	r8, r3, r2
 80003c2:	0c25      	lsrs	r5, r4, #16
 80003c4:	fb02 3318 	mls	r3, r2, r8, r3
 80003c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003cc:	fb0c f308 	mul.w	r3, ip, r8
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x134>
 80003d4:	19ed      	adds	r5, r5, r7
 80003d6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x132>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	f200 80d1 	bhi.w	8000584 <__udivmoddi4+0x2d4>
 80003e2:	4680      	mov	r8, r0
 80003e4:	1aed      	subs	r5, r5, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ec:	fb02 5510 	mls	r5, r2, r0, r5
 80003f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003f4:	fb0c fc00 	mul.w	ip, ip, r0
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x15c>
 80003fc:	19e4      	adds	r4, r4, r7
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x15a>
 8000404:	45a4      	cmp	ip, r4
 8000406:	f200 80b8 	bhi.w	800057a <__udivmoddi4+0x2ca>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 040c 	sub.w	r4, r4, ip
 8000410:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000414:	e79d      	b.n	8000352 <__udivmoddi4+0xa2>
 8000416:	4631      	mov	r1, r6
 8000418:	4630      	mov	r0, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1ce 0420 	rsb	r4, lr, #32
 8000422:	fa05 f30e 	lsl.w	r3, r5, lr
 8000426:	fa07 f70e 	lsl.w	r7, r7, lr
 800042a:	fa20 f804 	lsr.w	r8, r0, r4
 800042e:	0c3a      	lsrs	r2, r7, #16
 8000430:	fa25 f404 	lsr.w	r4, r5, r4
 8000434:	ea48 0803 	orr.w	r8, r8, r3
 8000438:	fbb4 f1f2 	udiv	r1, r4, r2
 800043c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000440:	fb02 4411 	mls	r4, r2, r1, r4
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800044c:	fb01 f30c 	mul.w	r3, r1, ip
 8000450:	42ab      	cmp	r3, r5
 8000452:	fa00 f40e 	lsl.w	r4, r0, lr
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x1bc>
 8000458:	19ed      	adds	r5, r5, r7
 800045a:	f101 30ff 	add.w	r0, r1, #4294967295
 800045e:	f080 808a 	bcs.w	8000576 <__udivmoddi4+0x2c6>
 8000462:	42ab      	cmp	r3, r5
 8000464:	f240 8087 	bls.w	8000576 <__udivmoddi4+0x2c6>
 8000468:	3902      	subs	r1, #2
 800046a:	443d      	add	r5, r7
 800046c:	1aeb      	subs	r3, r5, r3
 800046e:	fa1f f588 	uxth.w	r5, r8
 8000472:	fbb3 f0f2 	udiv	r0, r3, r2
 8000476:	fb02 3310 	mls	r3, r2, r0, r3
 800047a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800047e:	fb00 f30c 	mul.w	r3, r0, ip
 8000482:	42ab      	cmp	r3, r5
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1e6>
 8000486:	19ed      	adds	r5, r5, r7
 8000488:	f100 38ff 	add.w	r8, r0, #4294967295
 800048c:	d26f      	bcs.n	800056e <__udivmoddi4+0x2be>
 800048e:	42ab      	cmp	r3, r5
 8000490:	d96d      	bls.n	800056e <__udivmoddi4+0x2be>
 8000492:	3802      	subs	r0, #2
 8000494:	443d      	add	r5, r7
 8000496:	1aeb      	subs	r3, r5, r3
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	e78f      	b.n	80003be <__udivmoddi4+0x10e>
 800049e:	f1c1 0720 	rsb	r7, r1, #32
 80004a2:	fa22 f807 	lsr.w	r8, r2, r7
 80004a6:	408b      	lsls	r3, r1
 80004a8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ac:	ea48 0303 	orr.w	r3, r8, r3
 80004b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004b8:	40fd      	lsrs	r5, r7
 80004ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80004be:	fbb5 f9fc 	udiv	r9, r5, ip
 80004c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ca:	fa1f f883 	uxth.w	r8, r3
 80004ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004d2:	fb09 f408 	mul.w	r4, r9, r8
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	fa02 f201 	lsl.w	r2, r2, r1
 80004dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x244>
 80004e2:	18ed      	adds	r5, r5, r3
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d243      	bcs.n	8000572 <__udivmoddi4+0x2c2>
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	d941      	bls.n	8000572 <__udivmoddi4+0x2c2>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	441d      	add	r5, r3
 80004f4:	1b2d      	subs	r5, r5, r4
 80004f6:	fa1f fe8e 	uxth.w	lr, lr
 80004fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80004fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000502:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45a0      	cmp	r8, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x26e>
 800050e:	18e4      	adds	r4, r4, r3
 8000510:	f100 35ff 	add.w	r5, r0, #4294967295
 8000514:	d229      	bcs.n	800056a <__udivmoddi4+0x2ba>
 8000516:	45a0      	cmp	r8, r4
 8000518:	d927      	bls.n	800056a <__udivmoddi4+0x2ba>
 800051a:	3802      	subs	r0, #2
 800051c:	441c      	add	r4, r3
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba4 0408 	sub.w	r4, r4, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454c      	cmp	r4, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	464d      	mov	r5, r9
 8000530:	d315      	bcc.n	800055e <__udivmoddi4+0x2ae>
 8000532:	d012      	beq.n	800055a <__udivmoddi4+0x2aa>
 8000534:	b156      	cbz	r6, 800054c <__udivmoddi4+0x29c>
 8000536:	ebba 030e 	subs.w	r3, sl, lr
 800053a:	eb64 0405 	sbc.w	r4, r4, r5
 800053e:	fa04 f707 	lsl.w	r7, r4, r7
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431f      	orrs	r7, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	6037      	str	r7, [r6, #0]
 800054a:	6074      	str	r4, [r6, #4]
 800054c:	2100      	movs	r1, #0
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	4618      	mov	r0, r3
 8000554:	e6f8      	b.n	8000348 <__udivmoddi4+0x98>
 8000556:	4690      	mov	r8, r2
 8000558:	e6e0      	b.n	800031c <__udivmoddi4+0x6c>
 800055a:	45c2      	cmp	sl, r8
 800055c:	d2ea      	bcs.n	8000534 <__udivmoddi4+0x284>
 800055e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000562:	eb69 0503 	sbc.w	r5, r9, r3
 8000566:	3801      	subs	r0, #1
 8000568:	e7e4      	b.n	8000534 <__udivmoddi4+0x284>
 800056a:	4628      	mov	r0, r5
 800056c:	e7d7      	b.n	800051e <__udivmoddi4+0x26e>
 800056e:	4640      	mov	r0, r8
 8000570:	e791      	b.n	8000496 <__udivmoddi4+0x1e6>
 8000572:	4681      	mov	r9, r0
 8000574:	e7be      	b.n	80004f4 <__udivmoddi4+0x244>
 8000576:	4601      	mov	r1, r0
 8000578:	e778      	b.n	800046c <__udivmoddi4+0x1bc>
 800057a:	3802      	subs	r0, #2
 800057c:	443c      	add	r4, r7
 800057e:	e745      	b.n	800040c <__udivmoddi4+0x15c>
 8000580:	4608      	mov	r0, r1
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xe6>
 8000584:	f1a8 0802 	sub.w	r8, r8, #2
 8000588:	443d      	add	r5, r7
 800058a:	e72b      	b.n	80003e4 <__udivmoddi4+0x134>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <L6206_AttachErrorHandler>:
 * to the error Hanlder
 * @retval None
 **********************************************************/
void L6206_AttachErrorHandler(void (*callback)(uint16_t))
{
  errorHandlerCallback = (void (*)(uint16_t))callback;
 8000590:	4b01      	ldr	r3, [pc, #4]	; (8000598 <L6206_AttachErrorHandler+0x8>)
 8000592:	6018      	str	r0, [r3, #0]
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	20000238 	.word	0x20000238

0800059c <L6206_AttachFlagInterrupt>:
 * to the Flag Interrupt
 * @retval None
 **********************************************************/
void L6206_AttachFlagInterrupt(void (*callback)(void))
{
  flagInterruptCallback = (void (*)())callback;
 800059c:	4b01      	ldr	r3, [pc, #4]	; (80005a4 <L6206_AttachFlagInterrupt+0x8>)
 800059e:	6018      	str	r0, [r3, #0]
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	2000023c 	.word	0x2000023c

080005a8 <L6206_GetBridgeInputPwmFreq>:
 * @param[in] bridgeId 0 for bridge A, 1 for bridge B
 * @retval Freq in Hz
 **********************************************************/
uint32_t L6206_GetBridgeInputPwmFreq(uint8_t bridgeId)
{                                                  
  return (devicePrm.pwmFreq[(bridgeId << 1)]);
 80005a8:	4b02      	ldr	r3, [pc, #8]	; (80005b4 <L6206_GetBridgeInputPwmFreq+0xc>)
 80005aa:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
}
 80005ae:	6840      	ldr	r0, [r0, #4]
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	20000210 	.word	0x20000210

080005b8 <L6206_GetFwVersion>:
 * @retval L6206_FW_VERSION
 **********************************************************/
uint32_t L6206_GetFwVersion(void)
{
  return (L6206_FW_VERSION);
}
 80005b8:	2000      	movs	r0, #0
 80005ba:	4770      	bx	lr

080005bc <L6206_ReadId>:
 * @retval Id of the l6206 Driver Instance
 **********************************************************/
uint16_t L6206_ReadId(void)
{
  return(l6206DriverInstance);
}
 80005bc:	4b01      	ldr	r3, [pc, #4]	; (80005c4 <L6206_ReadId+0x8>)
 80005be:	8818      	ldrh	r0, [r3, #0]
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	200001fc 	.word	0x200001fc

080005c8 <L6206_SetNbDevices>:
  }
  else
  {
    return FALSE;
  }
}
 80005c8:	2801      	cmp	r0, #1
 80005ca:	bf8c      	ite	hi
 80005cc:	2000      	movhi	r0, #0
 80005ce:	2001      	movls	r0, #1
 80005d0:	4770      	bx	lr
	...

080005d4 <L6206_ErrorHandler>:
 * @param[in] error Number of the error
 * @retval None
 **********************************************************/
void L6206_ErrorHandler(uint16_t error)
{
  if (errorHandlerCallback != 0)
 80005d4:	4b02      	ldr	r3, [pc, #8]	; (80005e0 <L6206_ErrorHandler+0xc>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	b103      	cbz	r3, 80005dc <L6206_ErrorHandler+0x8>
  {
    (void) errorHandlerCallback(error);
 80005da:	4718      	bx	r3
 80005dc:	e7fe      	b.n	80005dc <L6206_ErrorHandler+0x8>
 80005de:	bf00      	nop
 80005e0:	20000238 	.word	0x20000238

080005e4 <L6206_GetCurrentSpeed>:
{                                                  
 80005e4:	b508      	push	{r3, lr}
  if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config])
 80005e6:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <L6206_GetCurrentSpeed+0x2c>)
 80005e8:	490a      	ldr	r1, [pc, #40]	; (8000614 <L6206_GetCurrentSpeed+0x30>)
 80005ea:	781a      	ldrb	r2, [r3, #0]
 80005ec:	5c8a      	ldrb	r2, [r1, r2]
 80005ee:	4282      	cmp	r2, r0
 80005f0:	d205      	bcs.n	80005fe <L6206_GetCurrentSpeed+0x1a>
    L6206_ErrorHandler(L6206_ERROR_1);
 80005f2:	f248 0001 	movw	r0, #32769	; 0x8001
 80005f6:	f7ff ffed 	bl	80005d4 <L6206_ErrorHandler>
  uint16_t speed = 0;
 80005fa:	2000      	movs	r0, #0
}
 80005fc:	bd08      	pop	{r3, pc}
  else if (devicePrm.motionState[motorId] != INACTIVE)
 80005fe:	181a      	adds	r2, r3, r0
 8000600:	f892 2020 	ldrb.w	r2, [r2, #32]
 8000604:	2a08      	cmp	r2, #8
 8000606:	d0f8      	beq.n	80005fa <L6206_GetCurrentSpeed+0x16>
    speed = devicePrm.speed[motorId];
 8000608:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800060c:	8a98      	ldrh	r0, [r3, #20]
 800060e:	bd08      	pop	{r3, pc}
 8000610:	20000210 	.word	0x20000210
 8000614:	080058f0 	.word	0x080058f0

08000618 <L6206_GetDeviceState>:
{
 8000618:	b508      	push	{r3, lr}
  if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config])
 800061a:	4b08      	ldr	r3, [pc, #32]	; (800063c <L6206_GetDeviceState+0x24>)
 800061c:	4908      	ldr	r1, [pc, #32]	; (8000640 <L6206_GetDeviceState+0x28>)
 800061e:	781a      	ldrb	r2, [r3, #0]
 8000620:	5c8a      	ldrb	r2, [r1, r2]
 8000622:	4282      	cmp	r2, r0
 8000624:	d205      	bcs.n	8000632 <L6206_GetDeviceState+0x1a>
    L6206_ErrorHandler(L6206_ERROR_1);
 8000626:	f248 0001 	movw	r0, #32769	; 0x8001
 800062a:	f7ff ffd3 	bl	80005d4 <L6206_ErrorHandler>
  motorState_t state =  INACTIVE;
 800062e:	2008      	movs	r0, #8
 8000630:	bd08      	pop	{r3, pc}
    state =  devicePrm.motionState[motorId];
 8000632:	4403      	add	r3, r0
 8000634:	f893 0020 	ldrb.w	r0, [r3, #32]
}
 8000638:	bd08      	pop	{r3, pc}
 800063a:	bf00      	nop
 800063c:	20000210 	.word	0x20000210
 8000640:	080058f0 	.word	0x080058f0

08000644 <L6206_GetMaxSpeed>:
{                                                  
 8000644:	b508      	push	{r3, lr}
  if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config])
 8000646:	4b08      	ldr	r3, [pc, #32]	; (8000668 <L6206_GetMaxSpeed+0x24>)
 8000648:	4908      	ldr	r1, [pc, #32]	; (800066c <L6206_GetMaxSpeed+0x28>)
 800064a:	781a      	ldrb	r2, [r3, #0]
 800064c:	5c8a      	ldrb	r2, [r1, r2]
 800064e:	4282      	cmp	r2, r0
 8000650:	d205      	bcs.n	800065e <L6206_GetMaxSpeed+0x1a>
    L6206_ErrorHandler(L6206_ERROR_1);
 8000652:	f248 0001 	movw	r0, #32769	; 0x8001
 8000656:	f7ff ffbd 	bl	80005d4 <L6206_ErrorHandler>
  uint16_t speed = 0;
 800065a:	2000      	movs	r0, #0
 800065c:	bd08      	pop	{r3, pc}
    speed =  devicePrm.speed[motorId];
 800065e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8000662:	8a98      	ldrh	r0, [r3, #20]
}
 8000664:	bd08      	pop	{r3, pc}
 8000666:	bf00      	nop
 8000668:	20000210 	.word	0x20000210
 800066c:	080058f0 	.word	0x080058f0

08000670 <L6206_GetBridgeStatus>:
{
 8000670:	b508      	push	{r3, lr}
  uint16_t status = L6206_Board_GetFlagPinState(bridgeId);
 8000672:	f000 fb6f 	bl	8000d54 <L6206_Board_GetFlagPinState>
}
 8000676:	b280      	uxth	r0, r0
 8000678:	bd08      	pop	{r3, pc}
	...

0800067c <L6206_FlagInterruptHandler>:
/******************************************************//**
 * @brief  Handlers of the flag interrupt which calls the user callback (if defined)
 * @retval None
 **********************************************************/
void L6206_FlagInterruptHandler(void)
{
 800067c:	b510      	push	{r4, lr}
  uint16_t status = L6206_Board_GetFlagPinState(bridgeId);
 800067e:	2000      	movs	r0, #0
 8000680:	f000 fb68 	bl	8000d54 <L6206_Board_GetFlagPinState>
  bool status;
  
  status = L6206_GetBridgeStatus(BRIDGE_A);
  if (status != devicePrm.bridgeEnabled[BRIDGE_A])
 8000684:	4c0c      	ldr	r4, [pc, #48]	; (80006b8 <L6206_FlagInterruptHandler+0x3c>)
 8000686:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  status = L6206_GetBridgeStatus(BRIDGE_A);
 800068a:	b2c0      	uxtb	r0, r0
  if (status != devicePrm.bridgeEnabled[BRIDGE_A])
 800068c:	4283      	cmp	r3, r0
  {
    devicePrm.bridgeEnabled[BRIDGE_A] = status;
 800068e:	bf18      	it	ne
 8000690:	f884 0024 	strbne.w	r0, [r4, #36]	; 0x24
  uint16_t status = L6206_Board_GetFlagPinState(bridgeId);
 8000694:	2001      	movs	r0, #1
 8000696:	f000 fb5d 	bl	8000d54 <L6206_Board_GetFlagPinState>
  }
  
  status = L6206_GetBridgeStatus(BRIDGE_B);
  if (status != devicePrm.bridgeEnabled[BRIDGE_B])
 800069a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
  status = L6206_GetBridgeStatus(BRIDGE_B);
 800069e:	b2c0      	uxtb	r0, r0
  if (status != devicePrm.bridgeEnabled[BRIDGE_B])
 80006a0:	4283      	cmp	r3, r0
  {
    devicePrm.bridgeEnabled[BRIDGE_B] = status;
  }  
  
  if (flagInterruptCallback != 0)
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <L6206_FlagInterruptHandler+0x40>)
    devicePrm.bridgeEnabled[BRIDGE_B] = status;
 80006a4:	bf18      	it	ne
 80006a6:	f884 0025 	strbne.w	r0, [r4, #37]	; 0x25
  if (flagInterruptCallback != 0)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	b113      	cbz	r3, 80006b4 <L6206_FlagInterruptHandler+0x38>
  {
    flagInterruptCallback();
  }
}
 80006ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flagInterruptCallback();
 80006b2:	4718      	bx	r3
 80006b4:	bd10      	pop	{r4, pc}
 80006b6:	bf00      	nop
 80006b8:	20000210 	.word	0x20000210
 80006bc:	2000023c 	.word	0x2000023c

080006c0 <L6206_SetDualFullBridgeConfig>:
{
 80006c0:	b510      	push	{r4, lr}
  devicePrm.config = (dualFullBridgeConfig_t)newConfig;
 80006c2:	4c2b      	ldr	r4, [pc, #172]	; (8000770 <L6206_SetDualFullBridgeConfig+0xb0>)
 80006c4:	7020      	strb	r0, [r4, #0]
  L6206_Board_PwmDeInit(INPUT_1A);
 80006c6:	2000      	movs	r0, #0
 80006c8:	f000 fbb0 	bl	8000e2c <L6206_Board_PwmDeInit>
  L6206_Board_PwmDeInit(INPUT_2A);
 80006cc:	2001      	movs	r0, #1
 80006ce:	f000 fbad 	bl	8000e2c <L6206_Board_PwmDeInit>
  L6206_Board_PwmDeInit(INPUT_1B);
 80006d2:	2002      	movs	r0, #2
 80006d4:	f000 fbaa 	bl	8000e2c <L6206_Board_PwmDeInit>
  L6206_Board_PwmDeInit(INPUT_2B);
 80006d8:	2003      	movs	r0, #3
 80006da:	f000 fba7 	bl	8000e2c <L6206_Board_PwmDeInit>
  switch (devicePrm.config)
 80006de:	7823      	ldrb	r3, [r4, #0]
 80006e0:	2b0c      	cmp	r3, #12
 80006e2:	d844      	bhi.n	800076e <L6206_SetDualFullBridgeConfig+0xae>
 80006e4:	e8df f003 	tbb	[pc, r3]
 80006e8:	07070707 	.word	0x07070707
 80006ec:	1a1a1515 	.word	0x1a1a1515
 80006f0:	2d2d2525 	.word	0x2d2d2525
 80006f4:	38          	.byte	0x38
 80006f5:	00          	.byte	0x00
        L6206_Board_PwmInit(INPUT_1A);
 80006f6:	2000      	movs	r0, #0
 80006f8:	f000 fbbc 	bl	8000e74 <L6206_Board_PwmInit>
        L6206_Board_PwmInit(INPUT_2A);
 80006fc:	2001      	movs	r0, #1
        L6206_Board_PwmInit(INPUT_1A);
 80006fe:	f000 fbb9 	bl	8000e74 <L6206_Board_PwmInit>
        L6206_Board_PwmInit(INPUT_1B);
 8000702:	2002      	movs	r0, #2
 8000704:	f000 fbb6 	bl	8000e74 <L6206_Board_PwmInit>
        L6206_Board_PwmInit(INPUT_2B);
 8000708:	2003      	movs	r0, #3
}
 800070a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        L6206_Board_PwmInit(INPUT_1A);
 800070e:	f000 bbb1 	b.w	8000e74 <L6206_Board_PwmInit>
        L6206_Board_PwmDeInit(INPUT_2A);
 8000712:	2001      	movs	r0, #1
 8000714:	f000 fb8a 	bl	8000e2c <L6206_Board_PwmDeInit>
        L6206_Board_PwmInit(INPUT_1A);
 8000718:	2000      	movs	r0, #0
 800071a:	e7f0      	b.n	80006fe <L6206_SetDualFullBridgeConfig+0x3e>
        L6206_Board_PwmDeInit(INPUT_2B);
 800071c:	2003      	movs	r0, #3
 800071e:	f000 fb85 	bl	8000e2c <L6206_Board_PwmDeInit>
        L6206_Board_PwmInit(INPUT_1A);
 8000722:	2000      	movs	r0, #0
 8000724:	f000 fba6 	bl	8000e74 <L6206_Board_PwmInit>
        L6206_Board_PwmInit(INPUT_2A);
 8000728:	2001      	movs	r0, #1
        L6206_Board_PwmInit(INPUT_1A);
 800072a:	f000 fba3 	bl	8000e74 <L6206_Board_PwmInit>
        L6206_Board_PwmInit(INPUT_1B);
 800072e:	2002      	movs	r0, #2
 8000730:	e7eb      	b.n	800070a <L6206_SetDualFullBridgeConfig+0x4a>
        L6206_Board_PwmDeInit(INPUT_2A);
 8000732:	2001      	movs	r0, #1
 8000734:	f000 fb7a 	bl	8000e2c <L6206_Board_PwmDeInit>
        L6206_Board_PwmDeInit(INPUT_2B);
 8000738:	2003      	movs	r0, #3
 800073a:	f000 fb77 	bl	8000e2c <L6206_Board_PwmDeInit>
        L6206_Board_PwmInit(INPUT_1A);
 800073e:	2000      	movs	r0, #0
 8000740:	e7f3      	b.n	800072a <L6206_SetDualFullBridgeConfig+0x6a>
        L6206_Board_PwmDeInit(INPUT_1B);
 8000742:	2002      	movs	r0, #2
 8000744:	f000 fb72 	bl	8000e2c <L6206_Board_PwmDeInit>
        L6206_Board_PwmDeInit(INPUT_2B);
 8000748:	2003      	movs	r0, #3
 800074a:	f000 fb6f 	bl	8000e2c <L6206_Board_PwmDeInit>
        L6206_Board_PwmInit(INPUT_1A);
 800074e:	2000      	movs	r0, #0
 8000750:	f000 fb90 	bl	8000e74 <L6206_Board_PwmInit>
        L6206_Board_PwmInit(INPUT_2A);
 8000754:	2001      	movs	r0, #1
 8000756:	e7d8      	b.n	800070a <L6206_SetDualFullBridgeConfig+0x4a>
        L6206_Board_PwmDeInit(INPUT_2A);
 8000758:	2001      	movs	r0, #1
 800075a:	f000 fb67 	bl	8000e2c <L6206_Board_PwmDeInit>
        L6206_Board_PwmDeInit(INPUT_1B);
 800075e:	2002      	movs	r0, #2
 8000760:	f000 fb64 	bl	8000e2c <L6206_Board_PwmDeInit>
        L6206_Board_PwmDeInit(INPUT_2B);
 8000764:	2003      	movs	r0, #3
 8000766:	f000 fb61 	bl	8000e2c <L6206_Board_PwmDeInit>
        L6206_Board_PwmInit(INPUT_1A);
 800076a:	2000      	movs	r0, #0
 800076c:	e7cd      	b.n	800070a <L6206_SetDualFullBridgeConfig+0x4a>
 800076e:	bd10      	pop	{r4, pc}
 8000770:	20000210 	.word	0x20000210

08000774 <L6206_DisableBridge>:
{
 8000774:	b570      	push	{r4, r5, r6, lr}
  devicePrm.bridgeEnabled[bridgeId] = FALSE;
 8000776:	4c0c      	ldr	r4, [pc, #48]	; (80007a8 <L6206_DisableBridge+0x34>)
{
 8000778:	4606      	mov	r6, r0
  L6206_Board_DisableBridge(bridgeId);
 800077a:	f000 fa8f 	bl	8000c9c <L6206_Board_DisableBridge>
  devicePrm.bridgeEnabled[bridgeId] = FALSE;
 800077e:	19a3      	adds	r3, r4, r6
 8000780:	2500      	movs	r5, #0
 8000782:	f883 5024 	strb.w	r5, [r3, #36]	; 0x24
  if (devicePrm.config >= PARALLELING_IN1A_IN2A__IN1B_IN2B__1_BIDIR_MOTOR)
 8000786:	7823      	ldrb	r3, [r4, #0]
 8000788:	2b08      	cmp	r3, #8
 800078a:	d90b      	bls.n	80007a4 <L6206_DisableBridge+0x30>
    if (bridgeId == BRIDGE_A) 
 800078c:	b92e      	cbnz	r6, 800079a <L6206_DisableBridge+0x26>
      L6206_Board_DisableBridge(BRIDGE_B);
 800078e:	2001      	movs	r0, #1
 8000790:	f000 fa84 	bl	8000c9c <L6206_Board_DisableBridge>
      devicePrm.bridgeEnabled[BRIDGE_B] = FALSE;
 8000794:	f884 6025 	strb.w	r6, [r4, #37]	; 0x25
 8000798:	bd70      	pop	{r4, r5, r6, pc}
      L6206_Board_DisableBridge(BRIDGE_A);
 800079a:	4628      	mov	r0, r5
 800079c:	f000 fa7e 	bl	8000c9c <L6206_Board_DisableBridge>
      devicePrm.bridgeEnabled[BRIDGE_A] = FALSE;
 80007a0:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	bf00      	nop
 80007a8:	20000210 	.word	0x20000210

080007ac <L6206_EnableBridge>:
{
 80007ac:	b570      	push	{r4, r5, r6, lr}
  devicePrm.bridgeEnabled[bridgeId] = TRUE;
 80007ae:	4d0f      	ldr	r5, [pc, #60]	; (80007ec <L6206_EnableBridge+0x40>)
 80007b0:	182b      	adds	r3, r5, r0
 80007b2:	2401      	movs	r4, #1
 80007b4:	f883 4024 	strb.w	r4, [r3, #36]	; 0x24
  if (devicePrm.config >= PARALLELING_IN1A_IN2A__IN1B_IN2B__1_BIDIR_MOTOR)
 80007b8:	782b      	ldrb	r3, [r5, #0]
 80007ba:	2b08      	cmp	r3, #8
{
 80007bc:	4606      	mov	r6, r0
  if (devicePrm.config >= PARALLELING_IN1A_IN2A__IN1B_IN2B__1_BIDIR_MOTOR)
 80007be:	d910      	bls.n	80007e2 <L6206_EnableBridge+0x36>
    L6206_Board_EnableBridge(bridgeId, 0);
 80007c0:	2100      	movs	r1, #0
 80007c2:	f000 fa93 	bl	8000cec <L6206_Board_EnableBridge>
      L6206_Board_EnableBridge(BRIDGE_B, 1);
 80007c6:	4621      	mov	r1, r4
    if (bridgeId == BRIDGE_A) 
 80007c8:	b92e      	cbnz	r6, 80007d6 <L6206_EnableBridge+0x2a>
      L6206_Board_EnableBridge(BRIDGE_B, 1);
 80007ca:	4620      	mov	r0, r4
 80007cc:	f000 fa8e 	bl	8000cec <L6206_Board_EnableBridge>
      devicePrm.bridgeEnabled[BRIDGE_B] = TRUE;
 80007d0:	f885 4025 	strb.w	r4, [r5, #37]	; 0x25
 80007d4:	bd70      	pop	{r4, r5, r6, pc}
      L6206_Board_EnableBridge(BRIDGE_A, 1);
 80007d6:	2000      	movs	r0, #0
 80007d8:	f000 fa88 	bl	8000cec <L6206_Board_EnableBridge>
      devicePrm.bridgeEnabled[BRIDGE_A] = TRUE;
 80007dc:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
    L6206_Board_EnableBridge(bridgeId, 1);
 80007e2:	4621      	mov	r1, r4
}
 80007e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    L6206_Board_EnableBridge(bridgeId, 1);
 80007e8:	f000 ba80 	b.w	8000cec <L6206_Board_EnableBridge>
 80007ec:	20000210 	.word	0x20000210

080007f0 <L6206_GetMotorHandle>:
}
 80007f0:	4800      	ldr	r0, [pc, #0]	; (80007f4 <L6206_GetMotorHandle+0x4>)
 80007f2:	4770      	bx	lr
 80007f4:	20000000 	.word	0x20000000

080007f8 <L6206_GetBridgeIdUsedByMotorId>:
 * @retval bridgeId 0 for bridge A , 1 for bridge B
 **********************************************************/
uint8_t L6206_GetBridgeIdUsedByMotorId(uint8_t motorId)
{
  uint8_t bridgeId;
  switch (devicePrm.config)
 80007f8:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <L6206_GetBridgeIdUsedByMotorId+0x30>)
 80007fa:	781a      	ldrb	r2, [r3, #0]
 80007fc:	2a08      	cmp	r2, #8
 80007fe:	d808      	bhi.n	8000812 <L6206_GetBridgeIdUsedByMotorId+0x1a>
 8000800:	2301      	movs	r3, #1
 8000802:	4093      	lsls	r3, r2
 8000804:	f240 1273 	movw	r2, #371	; 0x173
 8000808:	4213      	tst	r3, r2
 800080a:	d104      	bne.n	8000816 <L6206_GetBridgeIdUsedByMotorId+0x1e>
 800080c:	f013 038c 	ands.w	r3, r3, #140	; 0x8c
 8000810:	d105      	bne.n	800081e <L6206_GetBridgeIdUsedByMotorId+0x26>
    case PARALLELING_IN1A_IN2A__IN1B_IN2B__1_BIDIR_MOTOR:
    case PARALLELING_IN1A_IN1B__IN2A_IN2B__1_UNDIR_MOTOR_BRIDGE_1A__1_UNDIR_MOTOR_BRIDGE_2A:
    case PARALLELING_IN1A_IN1B__IN2A_IN2B__1_BIDIR_MOTOR:
    case PARALLELING_ALL_WITH_IN1A___1_UNDIR_MOTOR:
    default:
        bridgeId = 0;
 8000812:	2000      	movs	r0, #0
      break;        
  }  
  return (bridgeId);
}
 8000814:	4770      	bx	lr
        bridgeId = 1;
 8000816:	3000      	adds	r0, #0
 8000818:	bf18      	it	ne
 800081a:	2001      	movne	r0, #1
 800081c:	4770      	bx	lr
 800081e:	2801      	cmp	r0, #1
 8000820:	bf94      	ite	ls
 8000822:	2000      	movls	r0, #0
 8000824:	2001      	movhi	r0, #1
 8000826:	4770      	bx	lr
 8000828:	20000210 	.word	0x20000210

0800082c <L6206_GetMotorIdUsingbridgeInput>:
 **********************************************************/
uint8_t L6206_GetMotorIdUsingbridgeInput(uint8_t bridgeInput)
{
  uint8_t motorId;
  
  switch (devicePrm.config)
 800082c:	4b13      	ldr	r3, [pc, #76]	; (800087c <L6206_GetMotorIdUsingbridgeInput+0x50>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b0a      	cmp	r3, #10
 8000832:	d81f      	bhi.n	8000874 <L6206_GetMotorIdUsingbridgeInput+0x48>
 8000834:	e8df f003 	tbb	[pc, r3]
 8000838:	16120b06 	.word	0x16120b06
 800083c:	12060b06 	.word	0x12060b06
 8000840:	1e06      	.short	0x1e06
 8000842:	1b          	.byte	0x1b
 8000843:	00          	.byte	0x00
      {
        motorId = 1;
      }
      else
      {
        motorId = 0;
 8000844:	2801      	cmp	r0, #1
 8000846:	bf94      	ite	ls
 8000848:	2000      	movls	r0, #0
 800084a:	2001      	movhi	r0, #1
 800084c:	4770      	bx	lr
      }
      break;  
    case PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__2_UNDIR_MOTOR_BRIDGE_B:
    case   PARALLELING_IN1A_IN2A__1_UNDIR_MOTOR_BRIDGE_A__2_UNDIR_MOTOR_BRIDGE_B:      
      if (bridgeInput == INPUT_2B) 
 800084e:	2803      	cmp	r0, #3
 8000850:	d012      	beq.n	8000878 <L6206_GetMotorIdUsingbridgeInput+0x4c>
        motorId = 0;
 8000852:	2802      	cmp	r0, #2
      }      
      break;           
    case PARALLELING_NONE___2_UNDIR_MOTOR_BRIDGE_A__2_UNDIR_MOTOR_BRIDGE_B:
      if (bridgeInput == INPUT_2B) 
      {
        motorId = 3;
 8000854:	bf14      	ite	ne
 8000856:	2000      	movne	r0, #0
 8000858:	2001      	moveq	r0, #1
 800085a:	4770      	bx	lr
      if (bridgeInput >= INPUT_1B) 
 800085c:	2801      	cmp	r0, #1
 800085e:	d80b      	bhi.n	8000878 <L6206_GetMotorIdUsingbridgeInput+0x4c>
        motorId = 3;
 8000860:	2801      	cmp	r0, #1
 8000862:	e7f7      	b.n	8000854 <L6206_GetMotorIdUsingbridgeInput+0x28>
      if (bridgeInput == INPUT_2B) 
 8000864:	2803      	cmp	r0, #3
 8000866:	d008      	beq.n	800087a <L6206_GetMotorIdUsingbridgeInput+0x4e>
      }
      else if (bridgeInput == INPUT_1B) 
 8000868:	2802      	cmp	r0, #2
 800086a:	d1f9      	bne.n	8000860 <L6206_GetMotorIdUsingbridgeInput+0x34>
 800086c:	4770      	bx	lr
      {
        motorId = 0;
      }      
      break;           
    case PARALLELING_IN1A_IN1B__IN2A_IN2B__1_UNDIR_MOTOR_BRIDGE_1A__1_UNDIR_MOTOR_BRIDGE_2A:
      if ((bridgeInput == INPUT_2A) || (bridgeInput == INPUT_2B))
 800086e:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 8000872:	e7f5      	b.n	8000860 <L6206_GetMotorIdUsingbridgeInput+0x34>
      break;
    case   PARALLELING_IN1A_IN2A__IN1B_IN2B__1_BIDIR_MOTOR:
    case   PARALLELING_IN1A_IN1B__IN2A_IN2B__1_BIDIR_MOTOR:
    case   PARALLELING_ALL_WITH_IN1A___1_UNDIR_MOTOR:
    default:
      motorId = 0;  
 8000874:	2000      	movs	r0, #0
 8000876:	4770      	bx	lr
        motorId = 2;
 8000878:	2002      	movs	r0, #2
      break;        
  }
  
  return (motorId);
}
 800087a:	4770      	bx	lr
 800087c:	20000210 	.word	0x20000210

08000880 <L6206_GetBridgeInputUsedByMotorId>:
 * @retval PWM input 0 for 1A, 1 for 2A, 2 for 1B, 3 for 3B
 **********************************************************/
uint8_t L6206_GetBridgeInputUsedByMotorId(uint8_t motorId)
{
  uint8_t bridgeInput;
  switch (devicePrm.config)
 8000880:	4b21      	ldr	r3, [pc, #132]	; (8000908 <L6206_GetBridgeInputUsedByMotorId+0x88>)
 8000882:	781a      	ldrb	r2, [r3, #0]
 8000884:	2a0b      	cmp	r2, #11
 8000886:	d83d      	bhi.n	8000904 <L6206_GetBridgeInputUsedByMotorId+0x84>
 8000888:	e8df f002 	tbb	[pc, r2]
 800088c:	1a150e06 	.word	0x1a150e06
 8000890:	2b272421 	.word	0x2b272421
 8000894:	07383230 	.word	0x07383230
  {
    case PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B:
      if  (motorId == 0)
 8000898:	b918      	cbnz	r0, 80008a2 <L6206_GetBridgeInputUsedByMotorId+0x22>
      {
        bridgeInput = INPUT_2A;
      }      
      break;
    case PARALLELING_IN1A_IN1B__IN2A_IN2B__1_BIDIR_MOTOR:
      if (devicePrm.direction[0] == FORWARD)
 800089a:	7f18      	ldrb	r0, [r3, #28]
           bridgeInput = INPUT_1B;
 800089c:	f110 30ff 	adds.w	r0, r0, #4294967295
 80008a0:	e02d      	b.n	80008fe <L6206_GetBridgeInputUsedByMotorId+0x7e>
         if (devicePrm.direction[1] == FORWARD)
 80008a2:	7f5b      	ldrb	r3, [r3, #29]
        bridgeInput = INPUT_1B;        
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	e002      	b.n	80008ae <L6206_GetBridgeInputUsedByMotorId+0x2e>
      if  (motorId == 0)
 80008a8:	2800      	cmp	r0, #0
 80008aa:	d0f6      	beq.n	800089a <L6206_GetBridgeInputUsedByMotorId+0x1a>
        bridgeInput = INPUT_1B;        
 80008ac:	2801      	cmp	r0, #1
 80008ae:	bf14      	ite	ne
 80008b0:	2003      	movne	r0, #3
 80008b2:	2002      	moveq	r0, #2
 80008b4:	4770      	bx	lr
      if  (motorId == 0)
 80008b6:	b330      	cbz	r0, 8000906 <L6206_GetBridgeInputUsedByMotorId+0x86>
      else if (motorId == 1)
 80008b8:	2801      	cmp	r0, #1
 80008ba:	d024      	beq.n	8000906 <L6206_GetBridgeInputUsedByMotorId+0x86>
         if (devicePrm.direction[2] == FORWARD)
 80008bc:	7f9b      	ldrb	r3, [r3, #30]
 80008be:	e7f1      	b.n	80008a4 <L6206_GetBridgeInputUsedByMotorId+0x24>
      if  (motorId == 0)
 80008c0:	b308      	cbz	r0, 8000906 <L6206_GetBridgeInputUsedByMotorId+0x86>
      else if (motorId == 1)
 80008c2:	2801      	cmp	r0, #1
 80008c4:	d01f      	beq.n	8000906 <L6206_GetBridgeInputUsedByMotorId+0x86>
           bridgeInput = INPUT_2B;
 80008c6:	2802      	cmp	r0, #2
 80008c8:	bf18      	it	ne
 80008ca:	2003      	movne	r0, #3
 80008cc:	4770      	bx	lr
      if  (motorId == 0)
 80008ce:	2800      	cmp	r0, #0
 80008d0:	d1e7      	bne.n	80008a2 <L6206_GetBridgeInputUsedByMotorId+0x22>
 80008d2:	4770      	bx	lr
      if  (motorId == 0)
 80008d4:	2800      	cmp	r0, #0
 80008d6:	d1e9      	bne.n	80008ac <L6206_GetBridgeInputUsedByMotorId+0x2c>
 80008d8:	4770      	bx	lr
      if  (motorId == 0)
 80008da:	2800      	cmp	r0, #0
 80008dc:	d0dd      	beq.n	800089a <L6206_GetBridgeInputUsedByMotorId+0x1a>
        bridgeInput = INPUT_1B;        
 80008de:	2002      	movs	r0, #2
 80008e0:	4770      	bx	lr
      if  (motorId == 0)
 80008e2:	b180      	cbz	r0, 8000906 <L6206_GetBridgeInputUsedByMotorId+0x86>
        bridgeInput = INPUT_1B;        
 80008e4:	2801      	cmp	r0, #1
 80008e6:	bf18      	it	ne
 80008e8:	2002      	movne	r0, #2
 80008ea:	4770      	bx	lr
 80008ec:	2800      	cmp	r0, #0
 80008ee:	e7fa      	b.n	80008e6 <L6206_GetBridgeInputUsedByMotorId+0x66>
      if (devicePrm.direction[0] == FORWARD)
 80008f0:	7f1b      	ldrb	r3, [r3, #28]
        bridgeInput = INPUT_1A;
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	bf14      	ite	ne
 80008f6:	2002      	movne	r0, #2
 80008f8:	2000      	moveq	r0, #0
 80008fa:	4770      	bx	lr
           bridgeInput = INPUT_1B;
 80008fc:	3000      	adds	r0, #0
 80008fe:	bf18      	it	ne
 8000900:	2001      	movne	r0, #1
 8000902:	4770      	bx	lr
        bridgeInput = INPUT_2A;
      }  
      break;      
    case PARALLELING_ALL_WITH_IN1A___1_UNDIR_MOTOR:
    default:
      bridgeInput = INPUT_1A;
 8000904:	2000      	movs	r0, #0
      break;       
  }  
  return (bridgeInput);
}
 8000906:	4770      	bx	lr
 8000908:	20000210 	.word	0x20000210

0800090c <L6206_GetSecondBridgeInputUsedByMotorId>:
 * @brief  Get the second PWM input used by a given bidirectionnal motor
 * @param motorId from 0 to MAX_NUMBER_OF_BRUSH_DC_MOTORS 
 * @retval PWM input 0 for 1A, 1 for 2A, 2 for 1B, 3 for 3B
 **********************************************************/
uint8_t L6206_GetSecondBridgeInputUsedByMotorId(uint8_t motorId)
{
 800090c:	b508      	push	{r3, lr}
  uint8_t bridgeInput = 0xFF;
  
  switch (devicePrm.config)
 800090e:	4b17      	ldr	r3, [pc, #92]	; (800096c <L6206_GetSecondBridgeInputUsedByMotorId+0x60>)
 8000910:	781a      	ldrb	r2, [r3, #0]
 8000912:	2a0b      	cmp	r2, #11
 8000914:	d81d      	bhi.n	8000952 <L6206_GetSecondBridgeInputUsedByMotorId+0x46>
 8000916:	e8df f002 	tbb	[pc, r2]
 800091a:	1a06      	.short	0x1a06
 800091c:	1c111c0c 	.word	0x1c111c0c
 8000920:	221c1c1a 	.word	0x221c1c1a
 8000924:	071c      	.short	0x071c
  {
    case PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B:
      if  (motorId == 0)
 8000926:	b958      	cbnz	r0, 8000940 <L6206_GetSecondBridgeInputUsedByMotorId+0x34>
         bridgeInput = INPUT_1A;
       }
      break;       
    
    case PARALLELING_IN1A_IN1B__IN2A_IN2B__1_BIDIR_MOTOR:
      if (devicePrm.direction[0] == FORWARD)
 8000928:	7f18      	ldrb	r0, [r3, #28]
         bridgeInput = INPUT_1B;
 800092a:	1e43      	subs	r3, r0, #1
 800092c:	4258      	negs	r0, r3
 800092e:	4158      	adcs	r0, r3
 8000930:	bd08      	pop	{r3, pc}
      if (motorId == 2)
 8000932:	2802      	cmp	r0, #2
 8000934:	d10d      	bne.n	8000952 <L6206_GetSecondBridgeInputUsedByMotorId+0x46>
         if (devicePrm.direction[2] == FORWARD)
 8000936:	7f9b      	ldrb	r3, [r3, #30]
           bridgeInput = INPUT_2B;
 8000938:	2b01      	cmp	r3, #1
 800093a:	e005      	b.n	8000948 <L6206_GetSecondBridgeInputUsedByMotorId+0x3c>
      if  (motorId == 1)
 800093c:	2801      	cmp	r0, #1
 800093e:	d108      	bne.n	8000952 <L6206_GetSecondBridgeInputUsedByMotorId+0x46>
         if (devicePrm.direction[1] == FORWARD)
 8000940:	7f5b      	ldrb	r3, [r3, #29]
           bridgeInput = INPUT_2B;
 8000942:	2b01      	cmp	r3, #1
 8000944:	bf18      	it	ne
 8000946:	2002      	movne	r0, #2
 8000948:	bf08      	it	eq
 800094a:	2003      	moveq	r0, #3
 800094c:	bd08      	pop	{r3, pc}
      if  (motorId == 0)
 800094e:	2800      	cmp	r0, #0
 8000950:	d0ea      	beq.n	8000928 <L6206_GetSecondBridgeInputUsedByMotorId+0x1c>
      bridgeInput = 0XFF;
      break;       
  }  
  if (bridgeInput == 0XFF)
  {
    L6206_ErrorHandler(L6206_ERROR_2);
 8000952:	f248 0002 	movw	r0, #32770	; 0x8002
 8000956:	f7ff fe3d 	bl	80005d4 <L6206_ErrorHandler>
 800095a:	20ff      	movs	r0, #255	; 0xff
  }
  
  return (bridgeInput);
}        
 800095c:	bd08      	pop	{r3, pc}
      if (devicePrm.direction[0] == FORWARD)
 800095e:	7f1b      	ldrb	r3, [r3, #28]
         bridgeInput = INPUT_1A;
 8000960:	2b01      	cmp	r3, #1
 8000962:	bf0c      	ite	eq
 8000964:	2002      	moveq	r0, #2
 8000966:	2000      	movne	r0, #0
 8000968:	bd08      	pop	{r3, pc}
 800096a:	bf00      	nop
 800096c:	20000210 	.word	0x20000210

08000970 <L6206_IsBidirectionnalMotor>:
 * @retval True if motor is bidirectionnal, else false
 **********************************************************/
bool L6206_IsBidirectionnalMotor(uint8_t motorId)
{
  bool isBiDir = FALSE;
  switch (devicePrm.config)
 8000970:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <L6206_IsBidirectionnalMotor+0x38>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b0b      	cmp	r3, #11
 8000976:	d814      	bhi.n	80009a2 <L6206_IsBidirectionnalMotor+0x32>
 8000978:	e8df f003 	tbb	[pc, r3]
 800097c:	130c0806 	.word	0x130c0806
 8000980:	13081311 	.word	0x13081311
 8000984:	06130613 	.word	0x06130613
  {
      case PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B:
      case PARALLELING_IN1A_IN2A__IN1B_IN2B__1_BIDIR_MOTOR:
      case PARALLELING_IN1A_IN1B__IN2A_IN2B__1_BIDIR_MOTOR:
        isBiDir = TRUE;
 8000988:	2001      	movs	r0, #1
 800098a:	4770      	bx	lr
 800098c:	fab0 f080 	clz	r0, r0
 8000990:	0940      	lsrs	r0, r0, #5
 8000992:	4770      	bx	lr
 8000994:	2802      	cmp	r0, #2
 8000996:	bf14      	ite	ne
 8000998:	2000      	movne	r0, #0
 800099a:	2001      	moveq	r0, #1
 800099c:	4770      	bx	lr
 800099e:	2801      	cmp	r0, #1
 80009a0:	e7f9      	b.n	8000996 <L6206_IsBidirectionnalMotor+0x26>
  bool isBiDir = FALSE;
 80009a2:	2000      	movs	r0, #0
    default:
      break;       
  }    
  
  return (isBiDir);
}
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	20000210 	.word	0x20000210

080009ac <L6206_HardStop>:
{	
 80009ac:	b570      	push	{r4, r5, r6, lr}
  if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config])
 80009ae:	4c13      	ldr	r4, [pc, #76]	; (80009fc <L6206_HardStop+0x50>)
 80009b0:	4a13      	ldr	r2, [pc, #76]	; (8000a00 <L6206_HardStop+0x54>)
 80009b2:	7823      	ldrb	r3, [r4, #0]
 80009b4:	5cd3      	ldrb	r3, [r2, r3]
 80009b6:	4283      	cmp	r3, r0
{	
 80009b8:	4605      	mov	r5, r0
  if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config])
 80009ba:	d205      	bcs.n	80009c8 <L6206_HardStop+0x1c>
    L6206_ErrorHandler(L6206_ERROR_1);
 80009bc:	f248 0001 	movw	r0, #32769	; 0x8001
}
 80009c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    L6206_ErrorHandler(L6206_ERROR_1);
 80009c4:	f7ff be06 	b.w	80005d4 <L6206_ErrorHandler>
  else if (devicePrm.motionState[motorId] != INACTIVE)
 80009c8:	1823      	adds	r3, r4, r0
 80009ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009ce:	2b08      	cmp	r3, #8
 80009d0:	d012      	beq.n	80009f8 <L6206_HardStop+0x4c>
    bridgeInputFirstPWM = L6206_GetBridgeInputUsedByMotorId(motorId);
 80009d2:	f7ff ff55 	bl	8000880 <L6206_GetBridgeInputUsedByMotorId>
 80009d6:	4606      	mov	r6, r0
    if (L6206_IsBidirectionnalMotor(motorId))
 80009d8:	4628      	mov	r0, r5
 80009da:	f7ff ffc9 	bl	8000970 <L6206_IsBidirectionnalMotor>
 80009de:	b120      	cbz	r0, 80009ea <L6206_HardStop+0x3e>
    	bridgeInputSecondPWM = L6206_GetSecondBridgeInputUsedByMotorId(motorId);
 80009e0:	4628      	mov	r0, r5
 80009e2:	f7ff ff93 	bl	800090c <L6206_GetSecondBridgeInputUsedByMotorId>
    	L6206_Board_PwmStop(bridgeInputSecondPWM);
 80009e6:	f000 fac9 	bl	8000f7c <L6206_Board_PwmStop>
    L6206_Board_PwmStop(bridgeInputFirstPWM);
 80009ea:	4630      	mov	r0, r6
    devicePrm.motionState[motorId] = INACTIVE;
 80009ec:	442c      	add	r4, r5
    L6206_Board_PwmStop(bridgeInputFirstPWM);
 80009ee:	f000 fac5 	bl	8000f7c <L6206_Board_PwmStop>
    devicePrm.motionState[motorId] = INACTIVE;
 80009f2:	2308      	movs	r3, #8
 80009f4:	f884 3020 	strb.w	r3, [r4, #32]
 80009f8:	bd70      	pop	{r4, r5, r6, pc}
 80009fa:	bf00      	nop
 80009fc:	20000210 	.word	0x20000210
 8000a00:	080058f0 	.word	0x080058f0

08000a04 <L6206_HardHiz>:
  if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config])
 8000a04:	491c      	ldr	r1, [pc, #112]	; (8000a78 <L6206_HardHiz+0x74>)
{
 8000a06:	b538      	push	{r3, r4, r5, lr}
  if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config])
 8000a08:	780d      	ldrb	r5, [r1, #0]
 8000a0a:	4b1c      	ldr	r3, [pc, #112]	; (8000a7c <L6206_HardHiz+0x78>)
 8000a0c:	5d5b      	ldrb	r3, [r3, r5]
 8000a0e:	4283      	cmp	r3, r0
{
 8000a10:	4604      	mov	r4, r0
  if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config])
 8000a12:	d205      	bcs.n	8000a20 <L6206_HardHiz+0x1c>
    L6206_ErrorHandler(L6206_ERROR_1);
 8000a14:	f248 0001 	movw	r0, #32769	; 0x8001
}
 8000a18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    L6206_ErrorHandler(L6206_ERROR_1);
 8000a1c:	f7ff bdda 	b.w	80005d4 <L6206_ErrorHandler>
    uint8_t bridgeId = L6206_GetBridgeIdUsedByMotorId(motorId);
 8000a20:	f7ff feea 	bl	80007f8 <L6206_GetBridgeIdUsedByMotorId>
    if (devicePrm.bridgeEnabled[bridgeId] != FALSE)
 8000a24:	180b      	adds	r3, r1, r0
 8000a26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a2a:	b193      	cbz	r3, 8000a52 <L6206_HardHiz+0x4e>
      switch (devicePrm.config)
 8000a2c:	3d01      	subs	r5, #1
 8000a2e:	2d09      	cmp	r5, #9
 8000a30:	d81f      	bhi.n	8000a72 <L6206_HardHiz+0x6e>
 8000a32:	e8df f005 	tbb	[pc, r5]
 8000a36:	1305      	.short	0x1305
 8000a38:	1e051e17 	.word	0x1e051e17
 8000a3c:	151e1e13 	.word	0x151e1e13
          if ((motorId > 0) && (devicePrm.motionState[1] == STEADY) && (devicePrm.motionState[2] == STEADY))
 8000a40:	b1bc      	cbz	r4, 8000a72 <L6206_HardHiz+0x6e>
 8000a42:	6a0b      	ldr	r3, [r1, #32]
 8000a44:	4a0e      	ldr	r2, [pc, #56]	; (8000a80 <L6206_HardHiz+0x7c>)
 8000a46:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000a4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000a4e:	4293      	cmp	r3, r2
          if ((devicePrm.motionState[0] == STEADY) && (devicePrm.motionState[1] == STEADY))
 8000a50:	d10f      	bne.n	8000a72 <L6206_HardHiz+0x6e>
    L6206_HardStop(motorId);
 8000a52:	4620      	mov	r0, r4
}
 8000a54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    L6206_HardStop(motorId);
 8000a58:	f7ff bfa8 	b.w	80009ac <L6206_HardStop>
          if ((motorId < 2) && (devicePrm.motionState[0] == STEADY) && (devicePrm.motionState[1] == STEADY))
 8000a5c:	2c01      	cmp	r4, #1
 8000a5e:	d808      	bhi.n	8000a72 <L6206_HardHiz+0x6e>
          if ((devicePrm.motionState[0] == STEADY) && (devicePrm.motionState[1] == STEADY))
 8000a60:	8c0a      	ldrh	r2, [r1, #32]
 8000a62:	e002      	b.n	8000a6a <L6206_HardHiz+0x66>
          if (((motorId < 2) && (devicePrm.motionState[0] == STEADY) && (devicePrm.motionState[1] == STEADY))|| 
 8000a64:	2c01      	cmp	r4, #1
 8000a66:	d9fb      	bls.n	8000a60 <L6206_HardHiz+0x5c>
              ((motorId > 1) && (devicePrm.motionState[2] == STEADY) && (devicePrm.motionState[3] == STEADY)))
 8000a68:	8c4a      	ldrh	r2, [r1, #34]	; 0x22
          if ((devicePrm.motionState[0] == STEADY) && (devicePrm.motionState[1] == STEADY))
 8000a6a:	f240 3303 	movw	r3, #771	; 0x303
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	e7ee      	b.n	8000a50 <L6206_HardHiz+0x4c>
        L6206_DisableBridge(bridgeId);
 8000a72:	f7ff fe7f 	bl	8000774 <L6206_DisableBridge>
 8000a76:	e7ec      	b.n	8000a52 <L6206_HardHiz+0x4e>
 8000a78:	20000210 	.word	0x20000210
 8000a7c:	080058f0 	.word	0x080058f0
 8000a80:	00030300 	.word	0x00030300

08000a84 <L6206_Run>:
{
 8000a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config])
 8000a86:	4c25      	ldr	r4, [pc, #148]	; (8000b1c <L6206_Run+0x98>)
 8000a88:	4a25      	ldr	r2, [pc, #148]	; (8000b20 <L6206_Run+0x9c>)
 8000a8a:	7823      	ldrb	r3, [r4, #0]
 8000a8c:	5cd3      	ldrb	r3, [r2, r3]
 8000a8e:	4283      	cmp	r3, r0
{
 8000a90:	4605      	mov	r5, r0
 8000a92:	460e      	mov	r6, r1
  if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config])
 8000a94:	d205      	bcs.n	8000aa2 <L6206_Run+0x1e>
    L6206_ErrorHandler(L6206_ERROR_1);
 8000a96:	f248 0001 	movw	r0, #32769	; 0x8001
}
 8000a9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    L6206_ErrorHandler(L6206_ERROR_1);
 8000a9e:	f7ff bd99 	b.w	80005d4 <L6206_ErrorHandler>
  else if ((devicePrm.motionState[motorId] == INACTIVE) ||
 8000aa2:	1823      	adds	r3, r4, r0
 8000aa4:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000aa8:	2a08      	cmp	r2, #8
 8000aaa:	d004      	beq.n	8000ab6 <L6206_Run+0x32>
 8000aac:	7f1b      	ldrb	r3, [r3, #28]
 8000aae:	428b      	cmp	r3, r1
 8000ab0:	d033      	beq.n	8000b1a <L6206_Run+0x96>
      L6206_HardStop(motorId);
 8000ab2:	f7ff ff7b 	bl	80009ac <L6206_HardStop>
    devicePrm.direction[motorId] = direction;
 8000ab6:	1963      	adds	r3, r4, r5
    devicePrm.motionState[motorId] = STEADY;
 8000ab8:	2203      	movs	r2, #3
    bridgeId = L6206_GetBridgeIdUsedByMotorId(motorId);    
 8000aba:	4628      	mov	r0, r5
    devicePrm.direction[motorId] = direction;
 8000abc:	771e      	strb	r6, [r3, #28]
    devicePrm.motionState[motorId] = STEADY;
 8000abe:	f883 2020 	strb.w	r2, [r3, #32]
    bridgeId = L6206_GetBridgeIdUsedByMotorId(motorId);    
 8000ac2:	f7ff fe99 	bl	80007f8 <L6206_GetBridgeIdUsedByMotorId>
 8000ac6:	4607      	mov	r7, r0
    bridgeInput = L6206_GetBridgeInputUsedByMotorId(motorId);    
 8000ac8:	4628      	mov	r0, r5
 8000aca:	f7ff fed9 	bl	8000880 <L6206_GetBridgeInputUsedByMotorId>
 8000ace:	4606      	mov	r6, r0
    L6206_EnableBridge(bridgeId);
 8000ad0:	4638      	mov	r0, r7
 8000ad2:	f7ff fe6b 	bl	80007ac <L6206_EnableBridge>
    if (L6206_IsBidirectionnalMotor(motorId))
 8000ad6:	4628      	mov	r0, r5
 8000ad8:	f7ff ff4a 	bl	8000970 <L6206_IsBidirectionnalMotor>
 8000adc:	f105 0308 	add.w	r3, r5, #8
 8000ae0:	00b1      	lsls	r1, r6, #2
      L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput],(100 - devicePrm.speed[motorId]));
 8000ae2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    if (L6206_IsBidirectionnalMotor(motorId))
 8000ae6:	b198      	cbz	r0, 8000b10 <L6206_Run+0x8c>
      L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput],(100 - devicePrm.speed[motorId]));
 8000ae8:	791a      	ldrb	r2, [r3, #4]
 8000aea:	4421      	add	r1, r4
 8000aec:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
 8000af0:	b2d2      	uxtb	r2, r2
 8000af2:	6849      	ldr	r1, [r1, #4]
 8000af4:	4630      	mov	r0, r6
 8000af6:	f000 f9ff 	bl	8000ef8 <L6206_Board_PwmSetFreq>
      bridgeInput = L6206_GetSecondBridgeInputUsedByMotorId(motorId);
 8000afa:	4628      	mov	r0, r5
 8000afc:	f7ff ff06 	bl	800090c <L6206_GetSecondBridgeInputUsedByMotorId>
      L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput],100);
 8000b00:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8000b04:	2264      	movs	r2, #100	; 0x64
 8000b06:	6861      	ldr	r1, [r4, #4]
}
 8000b08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput],devicePrm.speed[motorId]);
 8000b0c:	f000 b9f4 	b.w	8000ef8 <L6206_Board_PwmSetFreq>
 8000b10:	440c      	add	r4, r1
 8000b12:	791a      	ldrb	r2, [r3, #4]
 8000b14:	6861      	ldr	r1, [r4, #4]
 8000b16:	4630      	mov	r0, r6
 8000b18:	e7f6      	b.n	8000b08 <L6206_Run+0x84>
 8000b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b1c:	20000210 	.word	0x20000210
 8000b20:	080058f0 	.word	0x080058f0

08000b24 <L6206_SetMaxSpeed>:
{                                                  
 8000b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config])
 8000b26:	4c15      	ldr	r4, [pc, #84]	; (8000b7c <L6206_SetMaxSpeed+0x58>)
 8000b28:	4a15      	ldr	r2, [pc, #84]	; (8000b80 <L6206_SetMaxSpeed+0x5c>)
 8000b2a:	7823      	ldrb	r3, [r4, #0]
 8000b2c:	5cd3      	ldrb	r3, [r2, r3]
 8000b2e:	4283      	cmp	r3, r0
{                                                  
 8000b30:	4606      	mov	r6, r0
 8000b32:	460d      	mov	r5, r1
  if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config])
 8000b34:	d205      	bcs.n	8000b42 <L6206_SetMaxSpeed+0x1e>
    L6206_ErrorHandler(L6206_ERROR_1);
 8000b36:	f248 0001 	movw	r0, #32769	; 0x8001
 8000b3a:	f7ff fd4b 	bl	80005d4 <L6206_ErrorHandler>
  bool cmdExecuted = FALSE;
 8000b3e:	2000      	movs	r0, #0
 8000b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    devicePrm.speed[motorId] = newMaxSpeed;
 8000b42:	eb04 0340 	add.w	r3, r4, r0, lsl #1
 8000b46:	8299      	strh	r1, [r3, #20]
    if (devicePrm.motionState[motorId] != INACTIVE)
 8000b48:	1823      	adds	r3, r4, r0
 8000b4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b4e:	2b08      	cmp	r3, #8
 8000b50:	d00f      	beq.n	8000b72 <L6206_SetMaxSpeed+0x4e>
      bridgeInput = L6206_GetBridgeInputUsedByMotorId(motorId);
 8000b52:	f7ff fe95 	bl	8000880 <L6206_GetBridgeInputUsedByMotorId>
 8000b56:	4607      	mov	r7, r0
      if (L6206_IsBidirectionnalMotor(motorId))
 8000b58:	4630      	mov	r0, r6
 8000b5a:	f7ff ff09 	bl	8000970 <L6206_IsBidirectionnalMotor>
 8000b5e:	00bb      	lsls	r3, r7, #2
 8000b60:	b148      	cbz	r0, 8000b76 <L6206_SetMaxSpeed+0x52>
        L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput],(100 - devicePrm.speed[motorId]));
 8000b62:	f1c5 0264 	rsb	r2, r5, #100	; 0x64
 8000b66:	441c      	add	r4, r3
 8000b68:	b2d2      	uxtb	r2, r2
        L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput],devicePrm.speed[motorId]);
 8000b6a:	6861      	ldr	r1, [r4, #4]
 8000b6c:	4638      	mov	r0, r7
 8000b6e:	f000 f9c3 	bl	8000ef8 <L6206_Board_PwmSetFreq>
    cmdExecuted = TRUE;
 8000b72:	2001      	movs	r0, #1
}                                                     
 8000b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput],devicePrm.speed[motorId]);
 8000b76:	441c      	add	r4, r3
 8000b78:	b2ea      	uxtb	r2, r5
 8000b7a:	e7f6      	b.n	8000b6a <L6206_SetMaxSpeed+0x46>
 8000b7c:	20000210 	.word	0x20000210
 8000b80:	080058f0 	.word	0x080058f0

08000b84 <L6206_SetBridgeInputPwmFreq>:
{                                                  
 8000b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b88:	4f1e      	ldr	r7, [pc, #120]	; (8000c04 <L6206_SetBridgeInputPwmFreq+0x80>)
    devicePrm.pwmFreq[bridgeInput] = newFreq;
 8000b8a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8000c08 <L6206_SetBridgeInputPwmFreq+0x84>
 8000b8e:	428f      	cmp	r7, r1
    uint8_t bridgeInput = (bridgeId << 1) + loop; 
 8000b90:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8000b94:	bf28      	it	cs
 8000b96:	460f      	movcs	r7, r1
 8000b98:	fa5f f980 	uxtb.w	r9, r0
 8000b9c:	2600      	movs	r6, #0
 8000b9e:	eb09 0506 	add.w	r5, r9, r6
 8000ba2:	b2ed      	uxtb	r5, r5
    devicePrm.pwmFreq[bridgeInput] = newFreq;
 8000ba4:	eb08 0a85 	add.w	sl, r8, r5, lsl #2
    motorId = L6206_GetMotorIdUsingbridgeInput(bridgeInput);
 8000ba8:	4628      	mov	r0, r5
    devicePrm.pwmFreq[bridgeInput] = newFreq;
 8000baa:	f8ca 7004 	str.w	r7, [sl, #4]
    motorId = L6206_GetMotorIdUsingbridgeInput(bridgeInput);
 8000bae:	f7ff fe3d 	bl	800082c <L6206_GetMotorIdUsingbridgeInput>
    if (devicePrm.motionState[motorId] != INACTIVE)
 8000bb2:	eb08 0300 	add.w	r3, r8, r0
    motorId = L6206_GetMotorIdUsingbridgeInput(bridgeInput);
 8000bb6:	4604      	mov	r4, r0
    if (devicePrm.motionState[motorId] != INACTIVE)
 8000bb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bbc:	2b08      	cmp	r3, #8
 8000bbe:	d016      	beq.n	8000bee <L6206_SetBridgeInputPwmFreq+0x6a>
      if (L6206_IsBidirectionnalMotor(motorId))
 8000bc0:	f7ff fed6 	bl	8000970 <L6206_IsBidirectionnalMotor>
 8000bc4:	b1c0      	cbz	r0, 8000bf8 <L6206_SetBridgeInputPwmFreq+0x74>
        if (bridgeInput !=  L6206_GetSecondBridgeInputUsedByMotorId(motorId))
 8000bc6:	4620      	mov	r0, r4
 8000bc8:	f7ff fea0 	bl	800090c <L6206_GetSecondBridgeInputUsedByMotorId>
 8000bcc:	42a8      	cmp	r0, r5
 8000bce:	d009      	beq.n	8000be4 <L6206_SetBridgeInputPwmFreq+0x60>
        L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput],(100 - devicePrm.speed[motorId]));
 8000bd0:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8000bd4:	f8da 1004 	ldr.w	r1, [sl, #4]
 8000bd8:	7d22      	ldrb	r2, [r4, #20]
 8000bda:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
 8000bde:	b2d2      	uxtb	r2, r2
        L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput],devicePrm.speed[motorId]);
 8000be0:	4628      	mov	r0, r5
 8000be2:	e002      	b.n	8000bea <L6206_SetBridgeInputPwmFreq+0x66>
          L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput],100);
 8000be4:	f8da 1004 	ldr.w	r1, [sl, #4]
 8000be8:	2264      	movs	r2, #100	; 0x64
        L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput],devicePrm.speed[motorId]);
 8000bea:	f000 f985 	bl	8000ef8 <L6206_Board_PwmSetFreq>
 8000bee:	3601      	adds	r6, #1
  for (loop = 0; loop < 2;loop ++)
 8000bf0:	2e02      	cmp	r6, #2
 8000bf2:	d1d4      	bne.n	8000b9e <L6206_SetBridgeInputPwmFreq+0x1a>
}
 8000bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput],devicePrm.speed[motorId]);
 8000bf8:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8000bfc:	4639      	mov	r1, r7
 8000bfe:	7d22      	ldrb	r2, [r4, #20]
 8000c00:	e7ee      	b.n	8000be0 <L6206_SetBridgeInputPwmFreq+0x5c>
 8000c02:	bf00      	nop
 8000c04:	000186a0 	.word	0x000186a0
 8000c08:	20000210 	.word	0x20000210

08000c0c <L6206_SetDeviceParamsToPredefinedValues>:
 * @brief  Sets the parameters of the device to predefined values
 * from l6206_target_config.h
 * @retval None
 **********************************************************/
void L6206_SetDeviceParamsToPredefinedValues(void)
{
 8000c0c:	b570      	push	{r4, r5, r6, lr}
  uint32_t i;

  memset(&devicePrm, 0, sizeof(devicePrm));
 8000c0e:	4c0d      	ldr	r4, [pc, #52]	; (8000c44 <L6206_SetDeviceParamsToPredefinedValues+0x38>)
 8000c10:	2228      	movs	r2, #40	; 0x28
 8000c12:	2100      	movs	r1, #0
 8000c14:	4620      	mov	r0, r4
 8000c16:	f003 ff20 	bl	8004a5a <memset>

  devicePrm.config = L6206_CONF_PARAM_PARALLE_BRIDGES;

  devicePrm.pwmFreq[INPUT_1A] = L6206_CONF_PARAM_FREQ_PWM1A;
 8000c1a:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000c1e:	6063      	str	r3, [r4, #4]
  devicePrm.pwmFreq[INPUT_2A] = L6206_CONF_PARAM_FREQ_PWM2A;
 8000c20:	60a3      	str	r3, [r4, #8]
  devicePrm.pwmFreq[INPUT_1B] = L6206_CONF_PARAM_FREQ_PWM1B;
 8000c22:	60e3      	str	r3, [r4, #12]
  devicePrm.pwmFreq[INPUT_2B] = L6206_CONF_PARAM_FREQ_PWM2B;
 8000c24:	6123      	str	r3, [r4, #16]
 8000c26:	f104 021b 	add.w	r2, r4, #27
 8000c2a:	2300      	movs	r3, #0
  
  for (i = 0; i < MAX_NUMBER_OF_BRUSH_DC_MOTORS; i++)
  {
    devicePrm.speed[i] = 100;
 8000c2c:	2664      	movs	r6, #100	; 0x64
    devicePrm.direction[i] = FORWARD;
 8000c2e:	2001      	movs	r0, #1
    devicePrm.motionState[i] = INACTIVE;
 8000c30:	2108      	movs	r1, #8
    devicePrm.speed[i] = 100;
 8000c32:	18e5      	adds	r5, r4, r3
 8000c34:	3302      	adds	r3, #2
 8000c36:	82ae      	strh	r6, [r5, #20]
    devicePrm.direction[i] = FORWARD;
 8000c38:	f802 0f01 	strb.w	r0, [r2, #1]!
  for (i = 0; i < MAX_NUMBER_OF_BRUSH_DC_MOTORS; i++)
 8000c3c:	2b08      	cmp	r3, #8
    devicePrm.motionState[i] = INACTIVE;
 8000c3e:	7111      	strb	r1, [r2, #4]
  for (i = 0; i < MAX_NUMBER_OF_BRUSH_DC_MOTORS; i++)
 8000c40:	d1f7      	bne.n	8000c32 <L6206_SetDeviceParamsToPredefinedValues+0x26>
  }
  for (i = 0; i < L6206_NB_MAX_BRIDGES; i++)
  {  
    devicePrm.bridgeEnabled[i] = FALSE;
  }
}
 8000c42:	bd70      	pop	{r4, r5, r6, pc}
 8000c44:	20000210 	.word	0x20000210

08000c48 <L6206_SetDeviceParamsToGivenValues>:
 * @param initDevicePrm structure containing values to initialize the device
 * parameters
 * @retval None
 **********************************************************/
void L6206_SetDeviceParamsToGivenValues(L6206_InitTypeDef* initDevicePrm)
{
 8000c48:	b530      	push	{r4, r5, lr}
	  memcpy(&devicePrm, initDevicePrm, sizeof(devicePrm));
 8000c4a:	4c06      	ldr	r4, [pc, #24]	; (8000c64 <L6206_SetDeviceParamsToGivenValues+0x1c>)
{
 8000c4c:	4603      	mov	r3, r0
	  memcpy(&devicePrm, initDevicePrm, sizeof(devicePrm));
 8000c4e:	f100 0528 	add.w	r5, r0, #40	; 0x28
 8000c52:	6818      	ldr	r0, [r3, #0]
 8000c54:	6859      	ldr	r1, [r3, #4]
 8000c56:	4622      	mov	r2, r4
 8000c58:	c203      	stmia	r2!, {r0, r1}
 8000c5a:	3308      	adds	r3, #8
 8000c5c:	42ab      	cmp	r3, r5
 8000c5e:	4614      	mov	r4, r2
 8000c60:	d1f7      	bne.n	8000c52 <L6206_SetDeviceParamsToGivenValues+0xa>
}
 8000c62:	bd30      	pop	{r4, r5, pc}
 8000c64:	20000210 	.word	0x20000210

08000c68 <L6206_Init>:
	l6206DriverInstance++;
 8000c68:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <L6206_Init+0x2c>)
 8000c6a:	8813      	ldrh	r3, [r2, #0]
{
 8000c6c:	b510      	push	{r4, lr}
	l6206DriverInstance++;
 8000c6e:	3301      	adds	r3, #1
{
 8000c70:	4604      	mov	r4, r0
	l6206DriverInstance++;
 8000c72:	8013      	strh	r3, [r2, #0]
	L6206_Board_GpioInit();
 8000c74:	f000 f880 	bl	8000d78 <L6206_Board_GpioInit>
	if (init == NULL)
 8000c78:	b93c      	cbnz	r4, 8000c8a <L6206_Init+0x22>
		L6206_SetDeviceParamsToPredefinedValues();
 8000c7a:	f7ff ffc7 	bl	8000c0c <L6206_SetDeviceParamsToPredefinedValues>
	L6206_SetDualFullBridgeConfig(devicePrm.config);
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <L6206_Init+0x30>)
}
 8000c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	L6206_SetDualFullBridgeConfig(devicePrm.config);
 8000c84:	7818      	ldrb	r0, [r3, #0]
 8000c86:	f7ff bd1b 	b.w	80006c0 <L6206_SetDualFullBridgeConfig>
		L6206_SetDeviceParamsToGivenValues((L6206_InitTypeDef*) init);
 8000c8a:	4620      	mov	r0, r4
 8000c8c:	f7ff ffdc 	bl	8000c48 <L6206_SetDeviceParamsToGivenValues>
 8000c90:	e7f5      	b.n	8000c7e <L6206_Init+0x16>
 8000c92:	bf00      	nop
 8000c94:	200001fc 	.word	0x200001fc
 8000c98:	20000210 	.word	0x20000210

08000c9c <L6206_Board_DisableBridge>:
 * @brief Disable the power bridges (leave the output bridges HiZ)
 * @param[in]  bridgeId (from 0 for bridge A to 1 for bridge B)
 * @retval None
 **********************************************************/
void L6206_Board_DisableBridge(uint8_t bridgeId)
{
 8000c9c:	b570      	push	{r4, r5, r6, lr}
    gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT;
  }
  else
  {
    gpioPin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
    gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT;    
 8000c9e:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <L6206_Board_DisableBridge+0x44>)
 8000ca0:	4c10      	ldr	r4, [pc, #64]	; (8000ce4 <L6206_Board_DisableBridge+0x48>)
  if (bridgeId == 0)
 8000ca2:	2800      	cmp	r0, #0
{
 8000ca4:	b086      	sub	sp, #24
    gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT;    
 8000ca6:	bf14      	ite	ne
 8000ca8:	461c      	movne	r4, r3
 8000caa:	f44f 6580 	moveq.w	r5, #1024	; 0x400
  }
  
  /* Configure the GPIO connected to EN pin as an output */
  GPIO_InitStruct.Pin = gpioPin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cae:	f04f 0301 	mov.w	r3, #1
    gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT;    
 8000cb2:	bf18      	it	ne
 8000cb4:	2502      	movne	r5, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2600      	movs	r6, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
  HAL_GPIO_Init(gpioPort, &GPIO_InitStruct);
 8000cb8:	a901      	add	r1, sp, #4
 8000cba:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = gpioPin;
 8000cbc:	9501      	str	r5, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbe:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8000cc2:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(gpioPort, &GPIO_InitStruct);
 8000cc4:	f000 feb0 	bl	8001a28 <HAL_GPIO_Init>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc8:	b672      	cpsid	i
  
  __disable_irq();
  HAL_GPIO_WritePin(gpioPort, gpioPin, GPIO_PIN_RESET);  
 8000cca:	4632      	mov	r2, r6
 8000ccc:	4629      	mov	r1, r5
 8000cce:	4620      	mov	r0, r4
 8000cd0:	f000 ff86 	bl	8001be0 <HAL_GPIO_WritePin>
  __HAL_GPIO_EXTI_CLEAR_IT(gpioPin);
 8000cd4:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <L6206_Board_DisableBridge+0x4c>)
 8000cd6:	615d      	str	r5, [r3, #20]
  __ASM volatile ("cpsie i" : : : "memory");
 8000cd8:	b662      	cpsie	i
  __enable_irq();
    
}
 8000cda:	b006      	add	sp, #24
 8000cdc:	bd70      	pop	{r4, r5, r6, pc}
 8000cde:	bf00      	nop
 8000ce0:	40020800 	.word	0x40020800
 8000ce4:	40020000 	.word	0x40020000
 8000ce8:	40013c00 	.word	0x40013c00

08000cec <L6206_Board_EnableBridge>:
 * @param[in]  bridgeId (from 0 for bridge A to 1 for bridge B)
 * @param[in]  addDelay if different from 0, a delay is added after bridge activation
 * @retval None
 **********************************************************/
void L6206_Board_EnableBridge(uint8_t bridgeId, uint8_t addDelay)
{
 8000cec:	b5f0      	push	{r4, r5, r6, r7, lr}
  }
  else
  {
    gpioPin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
    gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT;    
    flagIrqn = EXTI_FLAG_B_IRQn;    
 8000cee:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <L6206_Board_EnableBridge+0x58>)
 8000cf0:	4c15      	ldr	r4, [pc, #84]	; (8000d48 <L6206_Board_EnableBridge+0x5c>)
 8000cf2:	2800      	cmp	r0, #0
 8000cf4:	bf16      	itet	ne
 8000cf6:	461c      	movne	r4, r3
 8000cf8:	f44f 6580 	moveq.w	r5, #1024	; 0x400
 8000cfc:	2502      	movne	r5, #2
{
 8000cfe:	460f      	mov	r7, r1
 8000d00:	b087      	sub	sp, #28
  }
  
  HAL_GPIO_WritePin(gpioPort, gpioPin, GPIO_PIN_SET);
 8000d02:	f04f 0201 	mov.w	r2, #1
 8000d06:	4629      	mov	r1, r5
 8000d08:	4620      	mov	r0, r4
    flagIrqn = EXTI_FLAG_B_IRQn;    
 8000d0a:	bf0c      	ite	eq
 8000d0c:	2628      	moveq	r6, #40	; 0x28
 8000d0e:	2607      	movne	r6, #7
  HAL_GPIO_WritePin(gpioPort, gpioPin, GPIO_PIN_SET);
 8000d10:	f000 ff66 	bl	8001be0 <HAL_GPIO_WritePin>
  if (addDelay != 0)
 8000d14:	b117      	cbz	r7, 8000d1c <L6206_Board_EnableBridge+0x30>
  {
    HAL_Delay(BSP_MOTOR_CONTROL_BOARD_BRIDGE_TURN_ON_DELAY);
 8000d16:	2014      	movs	r0, #20
 8000d18:	f000 fa8a 	bl	8001230 <HAL_Delay>
  }
  /* Configure the GPIO connected to EN pin to take interrupt */
  GPIO_InitStruct.Pin = gpioPin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d1c:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <L6206_Board_EnableBridge+0x60>)
 8000d1e:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
  HAL_GPIO_Init(gpioPort, &GPIO_InitStruct);
 8000d20:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d22:	2301      	movs	r3, #1
  HAL_GPIO_Init(gpioPort, &GPIO_InitStruct);
 8000d24:	4620      	mov	r0, r4
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d26:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8000d28:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pin = gpioPin;
 8000d2a:	9501      	str	r5, [sp, #4]
  HAL_GPIO_Init(gpioPort, &GPIO_InitStruct);
 8000d2c:	f000 fe7c 	bl	8001a28 <HAL_GPIO_Init>
  
  __HAL_GPIO_EXTI_CLEAR_IT(gpioPin);
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <L6206_Board_EnableBridge+0x64>)
  HAL_NVIC_ClearPendingIRQ(flagIrqn);
 8000d32:	4630      	mov	r0, r6
  __HAL_GPIO_EXTI_CLEAR_IT(gpioPin);
 8000d34:	615d      	str	r5, [r3, #20]
  HAL_NVIC_ClearPendingIRQ(flagIrqn);
 8000d36:	f000 fccb 	bl	80016d0 <HAL_NVIC_ClearPendingIRQ>
  HAL_NVIC_EnableIRQ(flagIrqn);  
 8000d3a:	4630      	mov	r0, r6
 8000d3c:	f000 fca6 	bl	800168c <HAL_NVIC_EnableIRQ>
}
 8000d40:	b007      	add	sp, #28
 8000d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d44:	40020800 	.word	0x40020800
 8000d48:	40020000 	.word	0x40020000
 8000d4c:	10210000 	.word	0x10210000
 8000d50:	40013c00 	.word	0x40013c00

08000d54 <L6206_Board_GetFlagPinState>:
 * @brief  Returns the FLAG pin state.
 * @param[in]  bridgeId (from 0 for bridge A to 1 for bridge B)
 * @retval The FLAG pin value.
 **********************************************************/
uint32_t L6206_Board_GetFlagPinState(uint8_t bridgeId)
{
 8000d54:	b508      	push	{r3, lr}
  else
  {
    gpioPin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
    gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT;    
  }
  return HAL_GPIO_ReadPin(gpioPort, gpioPin);
 8000d56:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <L6206_Board_GetFlagPinState+0x1c>)
  if (bridgeId == 0)
 8000d58:	2800      	cmp	r0, #0
  return HAL_GPIO_ReadPin(gpioPort, gpioPin);
 8000d5a:	bf0c      	ite	eq
 8000d5c:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 8000d60:	2102      	movne	r1, #2
 8000d62:	4804      	ldr	r0, [pc, #16]	; (8000d74 <L6206_Board_GetFlagPinState+0x20>)
 8000d64:	bf18      	it	ne
 8000d66:	4618      	movne	r0, r3
 8000d68:	f000 ff34 	bl	8001bd4 <HAL_GPIO_ReadPin>
}
 8000d6c:	bd08      	pop	{r3, pc}
 8000d6e:	bf00      	nop
 8000d70:	40020800 	.word	0x40020800
 8000d74:	40020000 	.word	0x40020000

08000d78 <L6206_Board_GpioInit>:
/******************************************************//**
 * @brief  Initiliases the GPIOs used by the L6206s
 * @retval None
  **********************************************************/
void L6206_Board_GpioInit(void)
{
 8000d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d7a:	b089      	sub	sp, #36	; 0x24
   GPIO_InitTypeDef GPIO_InitStruct;
  
  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 8000d7c:	2400      	movs	r4, #0
 8000d7e:	4b28      	ldr	r3, [pc, #160]	; (8000e20 <L6206_Board_GpioInit+0xa8>)
 8000d80:	9400      	str	r4, [sp, #0]
 8000d82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  /* This pin is reconfigured later for OCD and OVT as GPIO_MODE_IT_FALLING with GPIO_PULLUP */
  GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
  HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT, &GPIO_InitStruct);
 8000d84:	4e27      	ldr	r6, [pc, #156]	; (8000e24 <L6206_Board_GpioInit+0xac>)
  __GPIOC_CLK_ENABLE();
 8000d86:	f042 0204 	orr.w	r2, r2, #4
 8000d8a:	631a      	str	r2, [r3, #48]	; 0x30
 8000d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d8e:	f002 0204 	and.w	r2, r2, #4
 8000d92:	9200      	str	r2, [sp, #0]
 8000d94:	9a00      	ldr	r2, [sp, #0]
  __GPIOA_CLK_ENABLE();
 8000d96:	9401      	str	r4, [sp, #4]
 8000d98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d9a:	f042 0201 	orr.w	r2, r2, #1
 8000d9e:	631a      	str	r2, [r3, #48]	; 0x30
 8000da0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000da2:	f002 0201 	and.w	r2, r2, #1
 8000da6:	9201      	str	r2, [sp, #4]
 8000da8:	9a01      	ldr	r2, [sp, #4]
  __GPIOB_CLK_ENABLE();
 8000daa:	9402      	str	r4, [sp, #8]
 8000dac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dae:	f042 0202 	orr.w	r2, r2, #2
 8000db2:	631a      	str	r2, [r3, #48]	; 0x30
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	9405      	str	r4, [sp, #20]
  __GPIOB_CLK_ENABLE();
 8000db8:	f003 0302 	and.w	r3, r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbc:	2501      	movs	r5, #1
  __GPIOB_CLK_ENABLE();
 8000dbe:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN;
 8000dc0:	f44f 6780 	mov.w	r7, #1024	; 0x400
  HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT, &GPIO_InitStruct);
 8000dc4:	a903      	add	r1, sp, #12
 8000dc6:	4630      	mov	r0, r6
  __GPIOB_CLK_ENABLE();
 8000dc8:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dca:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8000dcc:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN;
 8000dce:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT, &GPIO_InitStruct);
 8000dd0:	f000 fe2a 	bl	8001a28 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT, BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN, GPIO_PIN_RESET);
 8000dd4:	4622      	mov	r2, r4
 8000dd6:	4639      	mov	r1, r7
 8000dd8:	4630      	mov	r0, r6
 8000dda:	f000 ff01 	bl	8001be0 <HAL_GPIO_WritePin>
  
  /* Set Priority of External Line Interrupt used for the OCD OVT interrupt*/ 
  HAL_NVIC_SetPriority(EXTI_FLAG_A_IRQn, BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PRIORITY, 0);
 8000dde:	4622      	mov	r2, r4
 8000de0:	2104      	movs	r1, #4
 8000de2:	2028      	movs	r0, #40	; 0x28
 8000de4:	f000 fc1e 	bl	8001624 <HAL_NVIC_SetPriority>
    
  /* Enable the External Line Interrupt used for the OCD OVT interrupt*/
  HAL_NVIC_EnableIRQ(EXTI_FLAG_A_IRQn);    
 8000de8:	2028      	movs	r0, #40	; 0x28
 8000dea:	f000 fc4f 	bl	800168c <HAL_NVIC_EnableIRQ>
  
/* Configure L6206 Enable pin of Bridge B ------------------------------*/
  /* This pin is reconfigured later for OCD and OVT as GPIO_MODE_IT_FALLING with GPIO_PULLUP */
  GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dee:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8000df0:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT, &GPIO_InitStruct);
 8000df2:	4d0d      	ldr	r5, [pc, #52]	; (8000e28 <L6206_Board_GpioInit+0xb0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
 8000df6:	2602      	movs	r6, #2
  HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT, &GPIO_InitStruct);
 8000df8:	a903      	add	r1, sp, #12
 8000dfa:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
 8000dfc:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT, &GPIO_InitStruct);
 8000dfe:	f000 fe13 	bl	8001a28 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT, BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN, GPIO_PIN_RESET);
 8000e02:	4622      	mov	r2, r4
 8000e04:	4631      	mov	r1, r6
 8000e06:	4628      	mov	r0, r5
 8000e08:	f000 feea 	bl	8001be0 <HAL_GPIO_WritePin>
  
  /* Set Priority of External Line Interrupt used for the OCD OVT interrupt*/ 
  HAL_NVIC_SetPriority(EXTI_FLAG_B_IRQn, BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PRIORITY, 0);
 8000e0c:	4622      	mov	r2, r4
 8000e0e:	2104      	movs	r1, #4
 8000e10:	2007      	movs	r0, #7
 8000e12:	f000 fc07 	bl	8001624 <HAL_NVIC_SetPriority>
    
  /* Enable the External Line Interrupt used for the OCD OVT interrupt*/
  HAL_NVIC_EnableIRQ(EXTI_FLAG_B_IRQn);    
 8000e16:	2007      	movs	r0, #7
 8000e18:	f000 fc38 	bl	800168c <HAL_NVIC_EnableIRQ>

}
 8000e1c:	b009      	add	sp, #36	; 0x24
 8000e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40020000 	.word	0x40020000
 8000e28:	40020800 	.word	0x40020800

08000e2c <L6206_Board_PwmDeInit>:
  **********************************************************/
void L6206_Board_PwmDeInit(uint8_t bridgeInput)
{
  TIM_HandleTypeDef *pHTim;

  switch (bridgeInput)
 8000e2c:	2802      	cmp	r0, #2
 8000e2e:	d00e      	beq.n	8000e4e <L6206_Board_PwmDeInit+0x22>
 8000e30:	2803      	cmp	r0, #3
 8000e32:	d010      	beq.n	8000e56 <L6206_Board_PwmDeInit+0x2a>
 8000e34:	2801      	cmp	r0, #1
 8000e36:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <L6206_Board_PwmDeInit+0x34>)
 8000e38:	d005      	beq.n	8000e46 <L6206_Board_PwmDeInit+0x1a>
  {
    case 0:
    default:
      pHTim = &hTimPwm1A;
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1A;
 8000e3a:	480a      	ldr	r0, [pc, #40]	; (8000e64 <L6206_Board_PwmDeInit+0x38>)
      pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2A;

      break;
    case 2:
      pHTim = &hTimPwm1B;
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B;
 8000e3c:	6003      	str	r3, [r0, #0]
      pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM1B;
 8000e3e:	2301      	movs	r3, #1

      break;
    case 3:
      pHTim = &hTimPwm2B;
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
      pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2B;
 8000e40:	7603      	strb	r3, [r0, #24]

      break;      
  }
  HAL_TIM_PWM_DeInit(pHTim);
 8000e42:	f001 bee9 	b.w	8002c18 <HAL_TIM_PWM_DeInit>
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2A;
 8000e46:	4808      	ldr	r0, [pc, #32]	; (8000e68 <L6206_Board_PwmDeInit+0x3c>)
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
 8000e48:	6003      	str	r3, [r0, #0]
      pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2B;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	e7f8      	b.n	8000e40 <L6206_Board_PwmDeInit+0x14>
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B;
 8000e4e:	4807      	ldr	r0, [pc, #28]	; (8000e6c <L6206_Board_PwmDeInit+0x40>)
 8000e50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e54:	e7f2      	b.n	8000e3c <L6206_Board_PwmDeInit+0x10>
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
 8000e56:	4806      	ldr	r0, [pc, #24]	; (8000e70 <L6206_Board_PwmDeInit+0x44>)
 8000e58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e5c:	e7f4      	b.n	8000e48 <L6206_Board_PwmDeInit+0x1c>
 8000e5e:	bf00      	nop
 8000e60:	40000400 	.word	0x40000400
 8000e64:	200002f4 	.word	0x200002f4
 8000e68:	20000240 	.word	0x20000240
 8000e6c:	2000027c 	.word	0x2000027c
 8000e70:	200002b8 	.word	0x200002b8

08000e74 <L6206_Board_PwmInit>:
 * @param[in] bridgeInput 0 for input 1A, 1 for input 2A,
 * 2 for input 1B, 3 for input 2B
 * @retval None
  **********************************************************/
void L6206_Board_PwmInit(uint8_t bridgeInput)
{
 8000e74:	b570      	push	{r4, r5, r6, lr}
  TIM_OC_InitTypeDef sConfigOC;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_HandleTypeDef *pHTim;
  uint32_t  channel;

  switch (bridgeInput)
 8000e76:	2802      	cmp	r0, #2
{
 8000e78:	b08a      	sub	sp, #40	; 0x28
  switch (bridgeInput)
 8000e7a:	d02a      	beq.n	8000ed2 <L6206_Board_PwmInit+0x5e>
 8000e7c:	2803      	cmp	r0, #3
 8000e7e:	d02c      	beq.n	8000eda <L6206_Board_PwmInit+0x66>
 8000e80:	2801      	cmp	r0, #1
 8000e82:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <L6206_Board_PwmInit+0x70>)
 8000e84:	d01f      	beq.n	8000ec6 <L6206_Board_PwmInit+0x52>
  {
    case 0:
    default:
      pHTim = &hTimPwm1A;
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1A;
 8000e86:	4c18      	ldr	r4, [pc, #96]	; (8000ee8 <L6206_Board_PwmInit+0x74>)
      pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2A;
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2A;
      break;
    case 2:
      pHTim = &hTimPwm1B;
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B;
 8000e88:	6023      	str	r3, [r4, #0]
      pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM1B;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	7623      	strb	r3, [r4, #24]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1B;
 8000e8e:	2600      	movs	r6, #0
      pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2B;
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2B;
      break;      
  }
  pHTim->Init.Prescaler = TIMER_PRESCALER -1;
  pHTim->Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e90:	2500      	movs	r5, #0
  pHTim->Init.Prescaler = TIMER_PRESCALER -1;
 8000e92:	233f      	movs	r3, #63	; 0x3f
 8000e94:	6063      	str	r3, [r4, #4]
  pHTim->Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e96:	60a5      	str	r5, [r4, #8]
  pHTim->Init.Period = 0;
 8000e98:	60e5      	str	r5, [r4, #12]
  pHTim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9a:	6125      	str	r5, [r4, #16]
  HAL_TIM_PWM_Init(pHTim);
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	f002 f89f 	bl	8002fe0 <HAL_TIM_PWM_Init>
  
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ea2:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  HAL_TIM_PWM_ConfigChannel(pHTim, &sConfigOC, channel);
 8000ea4:	4632      	mov	r2, r6
 8000ea6:	a903      	add	r1, sp, #12
 8000ea8:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eaa:	9303      	str	r3, [sp, #12]
  sConfigOC.Pulse = 0;
 8000eac:	9504      	str	r5, [sp, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eae:	9505      	str	r5, [sp, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eb0:	9507      	str	r5, [sp, #28]
  HAL_TIM_PWM_ConfigChannel(pHTim, &sConfigOC, channel);
 8000eb2:	f002 f8db 	bl	800306c <HAL_TIM_PWM_ConfigChannel>
  
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(pHTim, &sMasterConfig);
 8000eb6:	a901      	add	r1, sp, #4
 8000eb8:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eba:	9501      	str	r5, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ebc:	9502      	str	r5, [sp, #8]
  HAL_TIMEx_MasterConfigSynchronization(pHTim, &sMasterConfig);
 8000ebe:	f002 f987 	bl	80031d0 <HAL_TIMEx_MasterConfigSynchronization>
}
 8000ec2:	b00a      	add	sp, #40	; 0x28
 8000ec4:	bd70      	pop	{r4, r5, r6, pc}
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2A;
 8000ec6:	4c09      	ldr	r4, [pc, #36]	; (8000eec <L6206_Board_PwmInit+0x78>)
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
 8000ec8:	6023      	str	r3, [r4, #0]
      pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2B;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	7623      	strb	r3, [r4, #24]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2B;
 8000ece:	2604      	movs	r6, #4
      break;      
 8000ed0:	e7de      	b.n	8000e90 <L6206_Board_PwmInit+0x1c>
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B;
 8000ed2:	4c07      	ldr	r4, [pc, #28]	; (8000ef0 <L6206_Board_PwmInit+0x7c>)
 8000ed4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ed8:	e7d6      	b.n	8000e88 <L6206_Board_PwmInit+0x14>
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
 8000eda:	4c06      	ldr	r4, [pc, #24]	; (8000ef4 <L6206_Board_PwmInit+0x80>)
 8000edc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ee0:	e7f2      	b.n	8000ec8 <L6206_Board_PwmInit+0x54>
 8000ee2:	bf00      	nop
 8000ee4:	40000400 	.word	0x40000400
 8000ee8:	200002f4 	.word	0x200002f4
 8000eec:	20000240 	.word	0x20000240
 8000ef0:	2000027c 	.word	0x2000027c
 8000ef4:	200002b8 	.word	0x200002b8

08000ef8 <L6206_Board_PwmSetFreq>:
 * @param[in] duty Duty cycle
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6206_Board_PwmSetFreq(uint8_t bridgeInput, uint32_t newFreq, uint8_t duty)
{
 8000ef8:	b570      	push	{r4, r5, r6, lr}
 8000efa:	4605      	mov	r5, r0
 8000efc:	460c      	mov	r4, r1
 8000efe:	4616      	mov	r6, r2
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 8000f00:	f001 fd2c 	bl	800295c <HAL_RCC_GetSysClockFreq>
  TIM_HandleTypeDef *pHTim;
  uint32_t period;
  uint32_t pulse;
  uint32_t channel;
  
  switch (bridgeInput)
 8000f04:	2d02      	cmp	r5, #2
 8000f06:	d026      	beq.n	8000f56 <L6206_Board_PwmSetFreq+0x5e>
 8000f08:	2d03      	cmp	r5, #3
 8000f0a:	d028      	beq.n	8000f5e <L6206_Board_PwmSetFreq+0x66>
 8000f0c:	2d01      	cmp	r5, #1
 8000f0e:	4a16      	ldr	r2, [pc, #88]	; (8000f68 <L6206_Board_PwmSetFreq+0x70>)
 8000f10:	d01d      	beq.n	8000f4e <L6206_Board_PwmSetFreq+0x56>
  {
    case 0:
    default:
      pHTim = &hTimPwm1A;
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1A;
 8000f12:	4b16      	ldr	r3, [pc, #88]	; (8000f6c <L6206_Board_PwmSetFreq+0x74>)
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2A;
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2A;
      break;
    case 2:
      pHTim = &hTimPwm1B;
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B;
 8000f14:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1B;
 8000f16:	2500      	movs	r5, #0
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2B;
      break;      
  }
  
   period = (uint32_t)( (uint32_t)sysFreq / (uint32_t)(TIMER_PRESCALER * newFreq)) - 1;
 8000f18:	01a4      	lsls	r4, r4, #6
 8000f1a:	fbb0 f0f4 	udiv	r0, r0, r4


  __HAL_TIM_SetAutoreload(pHTim, period);
 8000f1e:	681c      	ldr	r4, [r3, #0]
   period = (uint32_t)( (uint32_t)sysFreq / (uint32_t)(TIMER_PRESCALER * newFreq)) - 1;
 8000f20:	3801      	subs	r0, #1
  __HAL_TIM_SetAutoreload(pHTim, period);
 8000f22:	62e0      	str	r0, [r4, #44]	; 0x2c
 8000f24:	60d8      	str	r0, [r3, #12]
  
  if (duty == 0) 
 8000f26:	b146      	cbz	r6, 8000f3a <L6206_Board_PwmSetFreq+0x42>
    pulse = 0 ;
  }
  else 
  {
    if (duty > 100) duty = 100;  
    pulse = (uint32_t) ( ((uint32_t)period * (uint32_t)duty) / 100) + 1;
 8000f28:	2e64      	cmp	r6, #100	; 0x64
 8000f2a:	4632      	mov	r2, r6
 8000f2c:	bf28      	it	cs
 8000f2e:	2264      	movcs	r2, #100	; 0x64
 8000f30:	4350      	muls	r0, r2
 8000f32:	2264      	movs	r2, #100	; 0x64
 8000f34:	fbb0 f2f2 	udiv	r2, r0, r2
 8000f38:	1c56      	adds	r6, r2, #1
  }    
  __HAL_TIM_SetCompare(pHTim, channel, pulse);
 8000f3a:	08a9      	lsrs	r1, r5, #2
 8000f3c:	3434      	adds	r4, #52	; 0x34
  HAL_TIM_PWM_Start(pHTim, channel);
 8000f3e:	4618      	mov	r0, r3
  __HAL_TIM_SetCompare(pHTim, channel, pulse);
 8000f40:	f844 6021 	str.w	r6, [r4, r1, lsl #2]
  HAL_TIM_PWM_Start(pHTim, channel);
 8000f44:	4629      	mov	r1, r5

}
 8000f46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_TIM_PWM_Start(pHTim, channel);
 8000f4a:	f002 b8fd 	b.w	8003148 <HAL_TIM_PWM_Start>
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2A;
 8000f4e:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <L6206_Board_PwmSetFreq+0x78>)
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
 8000f50:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2B;
 8000f52:	2504      	movs	r5, #4
      break;      
 8000f54:	e7e0      	b.n	8000f18 <L6206_Board_PwmSetFreq+0x20>
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B;
 8000f56:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <L6206_Board_PwmSetFreq+0x7c>)
 8000f58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f5c:	e7da      	b.n	8000f14 <L6206_Board_PwmSetFreq+0x1c>
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <L6206_Board_PwmSetFreq+0x80>)
 8000f60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f64:	e7f4      	b.n	8000f50 <L6206_Board_PwmSetFreq+0x58>
 8000f66:	bf00      	nop
 8000f68:	40000400 	.word	0x40000400
 8000f6c:	200002f4 	.word	0x200002f4
 8000f70:	20000240 	.word	0x20000240
 8000f74:	2000027c 	.word	0x2000027c
 8000f78:	200002b8 	.word	0x200002b8

08000f7c <L6206_Board_PwmStop>:
 * 2 for input 1B, 3 for input 2B
 * @retval None
 **********************************************************/
void L6206_Board_PwmStop(uint8_t bridgeInput)
{
  switch (bridgeInput)
 8000f7c:	2803      	cmp	r0, #3
 8000f7e:	d810      	bhi.n	8000fa2 <L6206_Board_PwmStop+0x26>
 8000f80:	e8df f000 	tbb	[pc, r0]
 8000f84:	0c090602 	.word	0x0c090602
  {
    case 0:
       HAL_TIM_PWM_Stop(&hTimPwm1A,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1A);
 8000f88:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <L6206_Board_PwmStop+0x28>)
 8000f8a:	2100      	movs	r1, #0
      break;
    case  2:
      HAL_TIM_PWM_Stop(&hTimPwm1B,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1B);
      break;
    case  3:
      HAL_TIM_PWM_Stop(&hTimPwm2B,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2B);
 8000f8c:	f002 b8f2 	b.w	8003174 <HAL_TIM_PWM_Stop>
      HAL_TIM_PWM_Stop(&hTimPwm2A,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2A);
 8000f90:	2104      	movs	r1, #4
 8000f92:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <L6206_Board_PwmStop+0x2c>)
 8000f94:	e7fa      	b.n	8000f8c <L6206_Board_PwmStop+0x10>
      HAL_TIM_PWM_Stop(&hTimPwm1B,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1B);
 8000f96:	2100      	movs	r1, #0
 8000f98:	4804      	ldr	r0, [pc, #16]	; (8000fac <L6206_Board_PwmStop+0x30>)
 8000f9a:	e7f7      	b.n	8000f8c <L6206_Board_PwmStop+0x10>
      HAL_TIM_PWM_Stop(&hTimPwm2B,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2B);
 8000f9c:	2104      	movs	r1, #4
 8000f9e:	4804      	ldr	r0, [pc, #16]	; (8000fb0 <L6206_Board_PwmStop+0x34>)
 8000fa0:	e7f4      	b.n	8000f8c <L6206_Board_PwmStop+0x10>
 8000fa2:	4770      	bx	lr
 8000fa4:	200002f4 	.word	0x200002f4
 8000fa8:	20000240 	.word	0x20000240
 8000fac:	2000027c 	.word	0x2000027c
 8000fb0:	200002b8 	.word	0x200002b8

08000fb4 <L6474_GetMotorHandle>:
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	4770      	bx	lr

08000fb8 <l647x_GetMotorHandle>:
 8000fb8:	2000      	movs	r0, #0
 8000fba:	4770      	bx	lr

08000fbc <l648x_GetMotorHandle>:
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	4770      	bx	lr

08000fc0 <Powerstep01_GetMotorHandle>:
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	4770      	bx	lr

08000fc4 <L6208_GetMotorHandle>:
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	4770      	bx	lr

08000fc8 <Stspin220_GetMotorHandle>:
 8000fc8:	2000      	movs	r0, #0
 8000fca:	4770      	bx	lr

08000fcc <Stspin240_250_GetMotorHandle>:
/// Get motor handle for L6208
__weak motorDrv_t* L6208_GetMotorHandle(void){return ((motorDrv_t* )0);}
/// Get motor handle for STSPIN220
__weak motorDrv_t* Stspin220_GetMotorHandle(void){return ((motorDrv_t* )0);}
/// Get motor handle for STSPIN240
__weak motorDrv_t* Stspin240_250_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8000fcc:	2000      	movs	r0, #0
 8000fce:	4770      	bx	lr

08000fd0 <BSP_MotorControl_ErrorHandler>:
 * @param[in] error number of the error
 * @retval None
 **********************************************************/
void BSP_MotorControl_ErrorHandler(uint16_t error)
{
  if ((motorDrvHandle != 0)&&(motorDrvHandle->ErrorHandler != 0))
 8000fd0:	4b03      	ldr	r3, [pc, #12]	; (8000fe0 <BSP_MotorControl_ErrorHandler+0x10>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	b11b      	cbz	r3, 8000fde <BSP_MotorControl_ErrorHandler+0xe>
 8000fd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fda:	b103      	cbz	r3, 8000fde <BSP_MotorControl_ErrorHandler+0xe>
  {
    motorDrvHandle->ErrorHandler(error);
 8000fdc:	4718      	bx	r3
 8000fde:	e7fe      	b.n	8000fde <BSP_MotorControl_ErrorHandler+0xe>
 8000fe0:	20000200 	.word	0x20000200

08000fe4 <BSP_MotorControl_AttachErrorHandler>:
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachErrorHandler != 0))
 8000fe4:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <BSP_MotorControl_AttachErrorHandler+0x14>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	b113      	cbz	r3, 8000ff0 <BSP_MotorControl_AttachErrorHandler+0xc>
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	b103      	cbz	r3, 8000ff0 <BSP_MotorControl_AttachErrorHandler+0xc>
    motorDrvHandle->AttachErrorHandler(callback);
 8000fee:	4718      	bx	r3
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(2);
 8000ff0:	f640 0002 	movw	r0, #2050	; 0x802
 8000ff4:	f7ff bfec 	b.w	8000fd0 <BSP_MotorControl_ErrorHandler>
 8000ff8:	20000200 	.word	0x20000200

08000ffc <BSP_MotorControl_AttachFlagInterrupt>:
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachFlagInterrupt != 0))
 8000ffc:	4b04      	ldr	r3, [pc, #16]	; (8001010 <BSP_MotorControl_AttachFlagInterrupt+0x14>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	b113      	cbz	r3, 8001008 <BSP_MotorControl_AttachFlagInterrupt+0xc>
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	b103      	cbz	r3, 8001008 <BSP_MotorControl_AttachFlagInterrupt+0xc>
    motorDrvHandle->AttachFlagInterrupt(callback);
 8001006:	4718      	bx	r3
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(3);
 8001008:	f640 0003 	movw	r0, #2051	; 0x803
 800100c:	f7ff bfe0 	b.w	8000fd0 <BSP_MotorControl_ErrorHandler>
 8001010:	20000200 	.word	0x20000200

08001014 <BSP_MotorControl_Init>:
 * @param[in] initDeviceParameters Initialization structure for one device
 * @retval None
 **********************************************************/
void BSP_MotorControl_Init(uint16_t id, void* initDeviceParameters)
{
  if ((motorDrvHandle != 0)&&(motorDrvHandle->Init != 0))
 8001014:	4b05      	ldr	r3, [pc, #20]	; (800102c <BSP_MotorControl_Init+0x18>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	b11b      	cbz	r3, 8001022 <BSP_MotorControl_Init+0xe>
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	b10b      	cbz	r3, 8001022 <BSP_MotorControl_Init+0xe>
  {
    motorDrvHandle->Init(initDeviceParameters);
 800101e:	4608      	mov	r0, r1
 8001020:	4718      	bx	r3
  }  
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(0);
 8001022:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001026:	f7ff bfd3 	b.w	8000fd0 <BSP_MotorControl_ErrorHandler>
 800102a:	bf00      	nop
 800102c:	20000200 	.word	0x20000200

08001030 <BSP_MotorControl_GetDeviceState>:
 **********************************************************/
motorState_t BSP_MotorControl_GetDeviceState(uint8_t deviceId)
{
  motorState_t state = INACTIVE;

  if ((motorDrvHandle != 0)&&(motorDrvHandle->GetDeviceState != 0))
 8001030:	4b07      	ldr	r3, [pc, #28]	; (8001050 <BSP_MotorControl_GetDeviceState+0x20>)
 8001032:	681b      	ldr	r3, [r3, #0]
{
 8001034:	b510      	push	{r4, lr}
  if ((motorDrvHandle != 0)&&(motorDrvHandle->GetDeviceState != 0))
 8001036:	b123      	cbz	r3, 8001042 <BSP_MotorControl_GetDeviceState+0x12>
 8001038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103a:	b113      	cbz	r3, 8001042 <BSP_MotorControl_GetDeviceState+0x12>
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(9);
  }  
  return(state);   
}
 800103c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    state = motorDrvHandle->GetDeviceState(deviceId);
 8001040:	4718      	bx	r3
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(9);
 8001042:	f640 0009 	movw	r0, #2057	; 0x809
 8001046:	f7ff ffc3 	bl	8000fd0 <BSP_MotorControl_ErrorHandler>
}
 800104a:	2008      	movs	r0, #8
 800104c:	bd10      	pop	{r4, pc}
 800104e:	bf00      	nop
 8001050:	20000200 	.word	0x20000200

08001054 <BSP_MotorControl_Run>:
 * @note For unidirectionnal brush DC motor, direction parameter 
 * has no effect
 **********************************************************/
void BSP_MotorControl_Run(uint8_t deviceId, motorDir_t direction)
{
  if ((motorDrvHandle != 0)&&(motorDrvHandle->Run != 0))
 8001054:	4b04      	ldr	r3, [pc, #16]	; (8001068 <BSP_MotorControl_Run+0x14>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	b113      	cbz	r3, 8001060 <BSP_MotorControl_Run+0xc>
 800105a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800105c:	b103      	cbz	r3, 8001060 <BSP_MotorControl_Run+0xc>
  {
    motorDrvHandle->Run(deviceId, direction); 
 800105e:	4718      	bx	r3
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(21);
 8001060:	f640 0015 	movw	r0, #2069	; 0x815
 8001064:	f7ff bfb4 	b.w	8000fd0 <BSP_MotorControl_ErrorHandler>
 8001068:	20000200 	.word	0x20000200

0800106c <BSP_MotorControl_SetMaxSpeed>:
 * is executing a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool BSP_MotorControl_SetMaxSpeed(uint8_t deviceId, uint16_t newMaxSpeed)
{                                                  
  bool status = FALSE;
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetMaxSpeed != 0))
 800106c:	4b07      	ldr	r3, [pc, #28]	; (800108c <BSP_MotorControl_SetMaxSpeed+0x20>)
 800106e:	681b      	ldr	r3, [r3, #0]
{                                                  
 8001070:	b510      	push	{r4, lr}
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetMaxSpeed != 0))
 8001072:	b123      	cbz	r3, 800107e <BSP_MotorControl_SetMaxSpeed+0x12>
 8001074:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001076:	b113      	cbz	r3, 800107e <BSP_MotorControl_SetMaxSpeed+0x12>
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(26);
  }     
  return (status);  
}                                                     
 8001078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    status = motorDrvHandle->SetMaxSpeed(deviceId, newMaxSpeed);
 800107c:	4718      	bx	r3
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(26);
 800107e:	f640 001a 	movw	r0, #2074	; 0x81a
 8001082:	f7ff ffa5 	bl	8000fd0 <BSP_MotorControl_ErrorHandler>
}                                                     
 8001086:	2000      	movs	r0, #0
 8001088:	bd10      	pop	{r4, pc}
 800108a:	bf00      	nop
 800108c:	20000200 	.word	0x20000200

08001090 <BSP_MotorControl_CmdGetStatus>:
 * GetParam command (via the functions ReadStatusRegister or CmdGetParam).
 **********************************************************/
uint16_t BSP_MotorControl_CmdGetStatus(uint8_t deviceId)
{
  uint16_t status = 0;
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CmdGetStatus != 0))
 8001090:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <BSP_MotorControl_CmdGetStatus+0x20>)
 8001092:	681b      	ldr	r3, [r3, #0]
{
 8001094:	b510      	push	{r4, lr}
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CmdGetStatus != 0))
 8001096:	b12b      	cbz	r3, 80010a4 <BSP_MotorControl_CmdGetStatus+0x14>
 8001098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800109c:	b113      	cbz	r3, 80010a4 <BSP_MotorControl_CmdGetStatus+0x14>
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(34);
  }      
  return (status);
}
 800109e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    status = motorDrvHandle->CmdGetStatus(deviceId);
 80010a2:	4718      	bx	r3
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(34);
 80010a4:	f640 0022 	movw	r0, #2082	; 0x822
 80010a8:	f7ff ff92 	bl	8000fd0 <BSP_MotorControl_ErrorHandler>
}
 80010ac:	2000      	movs	r0, #0
 80010ae:	bd10      	pop	{r4, pc}
 80010b0:	20000200 	.word	0x20000200

080010b4 <BSP_MotorControl_SetDualFullBridgeConfig>:
 * for Stspin250, 0 only as no dual brush DC configuration is supported
 * @retval None
 **********************************************************/
void BSP_MotorControl_SetDualFullBridgeConfig(uint8_t config)
{	
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetDualFullBridgeConfig != 0))
 80010b4:	4b05      	ldr	r3, [pc, #20]	; (80010cc <BSP_MotorControl_SetDualFullBridgeConfig+0x18>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	b11b      	cbz	r3, 80010c2 <BSP_MotorControl_SetDualFullBridgeConfig+0xe>
 80010ba:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80010be:	b103      	cbz	r3, 80010c2 <BSP_MotorControl_SetDualFullBridgeConfig+0xe>
  {
    motorDrvHandle->SetDualFullBridgeConfig(config);
 80010c0:	4718      	bx	r3
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(65);
 80010c2:	f640 0041 	movw	r0, #2113	; 0x841
 80010c6:	f7ff bf83 	b.w	8000fd0 <BSP_MotorControl_ErrorHandler>
 80010ca:	bf00      	nop
 80010cc:	20000200 	.word	0x20000200

080010d0 <BSP_MotorControl_SetBridgeInputPwmFreq>:
 * @param[in] newFreq in Hz up to 100000Hz
 * @retval None
 **********************************************************/
void BSP_MotorControl_SetBridgeInputPwmFreq(uint8_t bridgeId, uint32_t newFreq)
{	
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetBridgeInputPwmFreq != 0))
 80010d0:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <BSP_MotorControl_SetBridgeInputPwmFreq+0x18>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	b11b      	cbz	r3, 80010de <BSP_MotorControl_SetBridgeInputPwmFreq+0xe>
 80010d6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80010da:	b103      	cbz	r3, 80010de <BSP_MotorControl_SetBridgeInputPwmFreq+0xe>
  {
    motorDrvHandle->SetBridgeInputPwmFreq(bridgeId, newFreq);
 80010dc:	4718      	bx	r3
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(67);
 80010de:	f640 0043 	movw	r0, #2115	; 0x843
 80010e2:	f7ff bf75 	b.w	8000fd0 <BSP_MotorControl_ErrorHandler>
 80010e6:	bf00      	nop
 80010e8:	20000200 	.word	0x20000200

080010ec <BSP_MotorControl_SetNbDevices>:
 * @retval TRUE if successfull, FALSE if failure, attempt 
 * to set a number of devices greater than MAX_NUMBER_OF_DEVICES
 **********************************************************/
bool BSP_MotorControl_SetNbDevices(uint16_t id, uint8_t nbDevices)
{
  MotorControlBoardId = id;
 80010ec:	4b26      	ldr	r3, [pc, #152]	; (8001188 <BSP_MotorControl_SetNbDevices+0x9c>)
{
 80010ee:	b570      	push	{r4, r5, r6, lr}
  MotorControlBoardId = id;
 80010f0:	8018      	strh	r0, [r3, #0]
  bool status = FALSE;
  if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6474)
 80010f2:	f641 134a 	movw	r3, #6474	; 0x194a
 80010f6:	4298      	cmp	r0, r3
{
 80010f8:	460d      	mov	r5, r1
 80010fa:	4c24      	ldr	r4, [pc, #144]	; (800118c <BSP_MotorControl_SetNbDevices+0xa0>)
  if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6474)
 80010fc:	d10c      	bne.n	8001118 <BSP_MotorControl_SetNbDevices+0x2c>
  {
    motorDrvHandle = L6474_GetMotorHandle();
 80010fe:	f7ff ff59 	bl	8000fb4 <L6474_GetMotorHandle>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01)
  {
    motorDrvHandle = Powerstep01_GetMotorHandle();
 8001102:	6020      	str	r0, [r4, #0]
  }  
  else
  {
    motorDrvHandle = 0;
  }
  if ((motorDrvHandle != 0)&&
 8001104:	6823      	ldr	r3, [r4, #0]
 8001106:	b3e3      	cbz	r3, 8001182 <BSP_MotorControl_SetNbDevices+0x96>
      (motorDrvHandle->SetNbDevices != 0)&&
 8001108:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
  if ((motorDrvHandle != 0)&&
 800110c:	b3cb      	cbz	r3, 8001182 <BSP_MotorControl_SetNbDevices+0x96>
      (motorDrvHandle->SetNbDevices != 0)&&
 800110e:	b3c5      	cbz	r5, 8001182 <BSP_MotorControl_SetNbDevices+0x96>
      (nbDevices !=0))
  {
    status = motorDrvHandle->SetNbDevices(nbDevices);
 8001110:	4628      	mov	r0, r5
  }
  return (status);
}
 8001112:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    status = motorDrvHandle->SetNbDevices(nbDevices);
 8001116:	4718      	bx	r3
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01)
 8001118:	2801      	cmp	r0, #1
 800111a:	d102      	bne.n	8001122 <BSP_MotorControl_SetNbDevices+0x36>
    motorDrvHandle = Powerstep01_GetMotorHandle();
 800111c:	f7ff ff50 	bl	8000fc0 <Powerstep01_GetMotorHandle>
 8001120:	e7ef      	b.n	8001102 <BSP_MotorControl_SetNbDevices+0x16>
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6206)
 8001122:	f641 033e 	movw	r3, #6206	; 0x183e
 8001126:	4298      	cmp	r0, r3
 8001128:	d102      	bne.n	8001130 <BSP_MotorControl_SetNbDevices+0x44>
    motorDrvHandle = L6206_GetMotorHandle();
 800112a:	f7ff fb61 	bl	80007f0 <L6206_GetMotorHandle>
 800112e:	e7e8      	b.n	8001102 <BSP_MotorControl_SetNbDevices+0x16>
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6208)
 8001130:	f5b0 5fc2 	cmp.w	r0, #6208	; 0x1840
 8001134:	d102      	bne.n	800113c <BSP_MotorControl_SetNbDevices+0x50>
    motorDrvHandle = L6208_GetMotorHandle();
 8001136:	f7ff ff45 	bl	8000fc4 <L6208_GetMotorHandle>
 800113a:	e7e2      	b.n	8001102 <BSP_MotorControl_SetNbDevices+0x16>
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN220)
 800113c:	28dc      	cmp	r0, #220	; 0xdc
 800113e:	d102      	bne.n	8001146 <BSP_MotorControl_SetNbDevices+0x5a>
    motorDrvHandle = Stspin220_GetMotorHandle();
 8001140:	f7ff ff42 	bl	8000fc8 <Stspin220_GetMotorHandle>
 8001144:	e7dd      	b.n	8001102 <BSP_MotorControl_SetNbDevices+0x16>
  else if ( (id == BSP_MOTOR_CONTROL_BOARD_ID_L6470) ||
 8001146:	f641 1346 	movw	r3, #6470	; 0x1946
 800114a:	4298      	cmp	r0, r3
 800114c:	d003      	beq.n	8001156 <BSP_MotorControl_SetNbDevices+0x6a>
 800114e:	f641 1348 	movw	r3, #6472	; 0x1948
 8001152:	4298      	cmp	r0, r3
 8001154:	d102      	bne.n	800115c <BSP_MotorControl_SetNbDevices+0x70>
    motorDrvHandle = l647x_GetMotorHandle();
 8001156:	f7ff ff2f 	bl	8000fb8 <l647x_GetMotorHandle>
 800115a:	e7d2      	b.n	8001102 <BSP_MotorControl_SetNbDevices+0x16>
  else if ( (id == BSP_MOTOR_CONTROL_BOARD_ID_L6480) ||
 800115c:	f020 0302 	bic.w	r3, r0, #2
 8001160:	f641 1250 	movw	r2, #6480	; 0x1950
 8001164:	4293      	cmp	r3, r2
 8001166:	d102      	bne.n	800116e <BSP_MotorControl_SetNbDevices+0x82>
    motorDrvHandle = l648x_GetMotorHandle();
 8001168:	f7ff ff28 	bl	8000fbc <l648x_GetMotorHandle>
 800116c:	e7c9      	b.n	8001102 <BSP_MotorControl_SetNbDevices+0x16>
  else if ((id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN240)||
 800116e:	28f0      	cmp	r0, #240	; 0xf0
 8001170:	d001      	beq.n	8001176 <BSP_MotorControl_SetNbDevices+0x8a>
 8001172:	28fa      	cmp	r0, #250	; 0xfa
 8001174:	d102      	bne.n	800117c <BSP_MotorControl_SetNbDevices+0x90>
    motorDrvHandle = Stspin240_250_GetMotorHandle();
 8001176:	f7ff ff29 	bl	8000fcc <Stspin240_250_GetMotorHandle>
 800117a:	e7c2      	b.n	8001102 <BSP_MotorControl_SetNbDevices+0x16>
    motorDrvHandle = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	6023      	str	r3, [r4, #0]
 8001180:	e7c0      	b.n	8001104 <BSP_MotorControl_SetNbDevices+0x18>
}
 8001182:	2000      	movs	r0, #0
 8001184:	bd70      	pop	{r4, r5, r6, pc}
 8001186:	bf00      	nop
 8001188:	200001fe 	.word	0x200001fe
 800118c:	20000200 	.word	0x20000200

08001190 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001190:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001192:	4a0e      	ldr	r2, [pc, #56]	; (80011cc <HAL_InitTick+0x3c>)
 8001194:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <HAL_InitTick+0x40>)
{
 8001196:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001198:	7818      	ldrb	r0, [r3, #0]
 800119a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800119e:	fbb3 f3f0 	udiv	r3, r3, r0
 80011a2:	6810      	ldr	r0, [r2, #0]
 80011a4:	fbb0 f0f3 	udiv	r0, r0, r3
 80011a8:	f000 fa7c 	bl	80016a4 <HAL_SYSTICK_Config>
 80011ac:	4604      	mov	r4, r0
 80011ae:	b958      	cbnz	r0, 80011c8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b0:	2d0f      	cmp	r5, #15
 80011b2:	d809      	bhi.n	80011c8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b4:	4602      	mov	r2, r0
 80011b6:	4629      	mov	r1, r5
 80011b8:	f04f 30ff 	mov.w	r0, #4294967295
 80011bc:	f000 fa32 	bl	8001624 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c0:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <HAL_InitTick+0x44>)
 80011c2:	4620      	mov	r0, r4
 80011c4:	601d      	str	r5, [r3, #0]
 80011c6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80011c8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80011ca:	bd38      	pop	{r3, r4, r5, pc}
 80011cc:	20000178 	.word	0x20000178
 80011d0:	20000164 	.word	0x20000164
 80011d4:	20000168 	.word	0x20000168

080011d8 <HAL_Init>:
{
 80011d8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011da:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <HAL_Init+0x30>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011e2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80011ea:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011f2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f4:	2003      	movs	r0, #3
 80011f6:	f000 fa03 	bl	8001600 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80011fa:	2000      	movs	r0, #0
 80011fc:	f7ff ffc8 	bl	8001190 <HAL_InitTick>
  HAL_MspInit();
 8001200:	f002 fe7a 	bl	8003ef8 <HAL_MspInit>
}
 8001204:	2000      	movs	r0, #0
 8001206:	bd08      	pop	{r3, pc}
 8001208:	40023c00 	.word	0x40023c00

0800120c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800120c:	4a03      	ldr	r2, [pc, #12]	; (800121c <HAL_IncTick+0x10>)
 800120e:	4b04      	ldr	r3, [pc, #16]	; (8001220 <HAL_IncTick+0x14>)
 8001210:	6811      	ldr	r1, [r2, #0]
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	440b      	add	r3, r1
 8001216:	6013      	str	r3, [r2, #0]
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	20000330 	.word	0x20000330
 8001220:	20000164 	.word	0x20000164

08001224 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001224:	4b01      	ldr	r3, [pc, #4]	; (800122c <HAL_GetTick+0x8>)
 8001226:	6818      	ldr	r0, [r3, #0]
}
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	20000330 	.word	0x20000330

08001230 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001230:	b538      	push	{r3, r4, r5, lr}
 8001232:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001234:	f7ff fff6 	bl	8001224 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001238:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800123a:	bf1c      	itt	ne
 800123c:	4b05      	ldrne	r3, [pc, #20]	; (8001254 <HAL_Delay+0x24>)
 800123e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001240:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8001242:	bf18      	it	ne
 8001244:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001246:	f7ff ffed 	bl	8001224 <HAL_GetTick>
 800124a:	1b40      	subs	r0, r0, r5
 800124c:	4284      	cmp	r4, r0
 800124e:	d8fa      	bhi.n	8001246 <HAL_Delay+0x16>
  {
  }
}
 8001250:	bd38      	pop	{r3, r4, r5, pc}
 8001252:	bf00      	nop
 8001254:	20000164 	.word	0x20000164

08001258 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001258:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800125a:	4604      	mov	r4, r0
 800125c:	2800      	cmp	r0, #0
 800125e:	f000 8099 	beq.w	8001394 <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001262:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001264:	b923      	cbnz	r3, 8001270 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001266:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001268:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800126c:	f002 fb38 	bl	80038e0 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001270:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001272:	06db      	lsls	r3, r3, #27
 8001274:	f100 808c 	bmi.w	8001390 <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001278:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800127a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800127e:	f023 0302 	bic.w	r3, r3, #2
 8001282:	f043 0302 	orr.w	r3, r3, #2
 8001286:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001288:	4b43      	ldr	r3, [pc, #268]	; (8001398 <HAL_ADC_Init+0x140>)
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001290:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	6861      	ldr	r1, [r4, #4]
 8001296:	430a      	orrs	r2, r1
 8001298:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800129a:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800129c:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80012a6:	685a      	ldr	r2, [r3, #4]
 80012a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80012ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80012ae:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80012b0:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80012b2:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80012b6:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80012b8:	685a      	ldr	r2, [r3, #4]
 80012ba:	430a      	orrs	r2, r1
 80012bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80012be:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80012c0:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80012c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80012c8:	689a      	ldr	r2, [r3, #8]
 80012ca:	430a      	orrs	r2, r1
 80012cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012ce:	4933      	ldr	r1, [pc, #204]	; (800139c <HAL_ADC_Init+0x144>)
 80012d0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80012d2:	428a      	cmp	r2, r1
 80012d4:	d050      	beq.n	8001378 <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012d6:	6899      	ldr	r1, [r3, #8]
 80012d8:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80012dc:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80012de:	6899      	ldr	r1, [r3, #8]
 80012e0:	430a      	orrs	r2, r1
 80012e2:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012e4:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80012e6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80012ee:	689a      	ldr	r2, [r3, #8]
 80012f0:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012f2:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80012f4:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80012f6:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80012f8:	f022 0202 	bic.w	r2, r2, #2
 80012fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8001304:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001306:	6a22      	ldr	r2, [r4, #32]
 8001308:	2a00      	cmp	r2, #0
 800130a:	d03d      	beq.n	8001388 <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800130c:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800130e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001310:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001314:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800131c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800131e:	685a      	ldr	r2, [r3, #4]
 8001320:	3901      	subs	r1, #1
 8001322:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001326:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800132a:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800132c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001330:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001334:	3901      	subs	r1, #1
 8001336:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800133a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800133c:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800133e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001340:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001344:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 800134c:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800134e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001350:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001352:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001356:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001358:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800135a:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800135c:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8001360:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001362:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001364:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001366:	f023 0303 	bic.w	r3, r3, #3
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8001370:	2300      	movs	r3, #0
 8001372:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8001376:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001378:	689a      	ldr	r2, [r3, #8]
 800137a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800137e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001380:	689a      	ldr	r2, [r3, #8]
 8001382:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001386:	e7b4      	b.n	80012f2 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001388:	685a      	ldr	r2, [r3, #4]
 800138a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800138e:	e7ca      	b.n	8001326 <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 8001390:	2001      	movs	r0, #1
 8001392:	e7ed      	b.n	8001370 <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 8001394:	2001      	movs	r0, #1
}
 8001396:	bd10      	pop	{r4, pc}
 8001398:	40012300 	.word	0x40012300
 800139c:	0f000001 	.word	0x0f000001

080013a0 <HAL_ADC_ConvCpltCallback>:
 80013a0:	4770      	bx	lr

080013a2 <HAL_ADC_LevelOutOfWindowCallback>:
 80013a2:	4770      	bx	lr

080013a4 <HAL_ADC_ErrorCallback>:
{
 80013a4:	4770      	bx	lr

080013a6 <HAL_ADC_IRQHandler>:
{
 80013a6:	b538      	push	{r3, r4, r5, lr}
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80013a8:	6803      	ldr	r3, [r0, #0]
 80013aa:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80013ac:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80013ae:	078d      	lsls	r5, r1, #30
{
 80013b0:	4604      	mov	r4, r0
  if(tmp1 && tmp2)
 80013b2:	d52b      	bpl.n	800140c <HAL_ADC_IRQHandler+0x66>
 80013b4:	0690      	lsls	r0, r2, #26
 80013b6:	d529      	bpl.n	800140c <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013b8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80013ba:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80013bc:	bf5e      	ittt	pl
 80013be:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 80013c0:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 80013c4:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013c6:	689a      	ldr	r2, [r3, #8]
 80013c8:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80013cc:	d117      	bne.n	80013fe <HAL_ADC_IRQHandler+0x58>
 80013ce:	69a2      	ldr	r2, [r4, #24]
 80013d0:	b9aa      	cbnz	r2, 80013fe <HAL_ADC_IRQHandler+0x58>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80013d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013d4:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 80013d8:	d002      	beq.n	80013e0 <HAL_ADC_IRQHandler+0x3a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80013da:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80013dc:	0552      	lsls	r2, r2, #21
 80013de:	d40e      	bmi.n	80013fe <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80013e0:	685a      	ldr	r2, [r3, #4]
 80013e2:	f022 0220 	bic.w	r2, r2, #32
 80013e6:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80013e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013ee:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013f2:	04db      	lsls	r3, r3, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013f4:	bf5e      	ittt	pl
 80013f6:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 80013f8:	f043 0301 	orrpl.w	r3, r3, #1
 80013fc:	6423      	strpl	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80013fe:	4620      	mov	r0, r4
 8001400:	f7ff ffce 	bl	80013a0 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001404:	6823      	ldr	r3, [r4, #0]
 8001406:	f06f 0212 	mvn.w	r2, #18
 800140a:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800140c:	6823      	ldr	r3, [r4, #0]
 800140e:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001410:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8001412:	074d      	lsls	r5, r1, #29
 8001414:	d532      	bpl.n	800147c <HAL_ADC_IRQHandler+0xd6>
 8001416:	0610      	lsls	r0, r2, #24
 8001418:	d530      	bpl.n	800147c <HAL_ADC_IRQHandler+0xd6>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800141a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800141c:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800141e:	bf5e      	ittt	pl
 8001420:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 8001422:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8001426:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800142e:	d11e      	bne.n	800146e <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001430:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001432:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8001436:	d002      	beq.n	800143e <HAL_ADC_IRQHandler+0x98>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001438:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800143a:	0552      	lsls	r2, r2, #21
 800143c:	d417      	bmi.n	800146e <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800143e:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001440:	0555      	lsls	r5, r2, #21
 8001442:	d414      	bmi.n	800146e <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001444:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001446:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800144a:	d110      	bne.n	800146e <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800144c:	69a2      	ldr	r2, [r4, #24]
 800144e:	b972      	cbnz	r2, 800146e <HAL_ADC_IRQHandler+0xc8>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001456:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001458:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800145a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800145e:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001460:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001462:	05d8      	lsls	r0, r3, #23
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001464:	bf5e      	ittt	pl
 8001466:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 8001468:	f043 0301 	orrpl.w	r3, r3, #1
 800146c:	6423      	strpl	r3, [r4, #64]	; 0x40
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800146e:	4620      	mov	r0, r4
 8001470:	f000 f8c4 	bl	80015fc <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001474:	6823      	ldr	r3, [r4, #0]
 8001476:	f06f 020c 	mvn.w	r2, #12
 800147a:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800147c:	6823      	ldr	r3, [r4, #0]
 800147e:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001480:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8001482:	07c9      	lsls	r1, r1, #31
 8001484:	d50f      	bpl.n	80014a6 <HAL_ADC_IRQHandler+0x100>
 8001486:	0655      	lsls	r5, r2, #25
 8001488:	d50d      	bpl.n	80014a6 <HAL_ADC_IRQHandler+0x100>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	07d8      	lsls	r0, r3, #31
 800148e:	d50a      	bpl.n	80014a6 <HAL_ADC_IRQHandler+0x100>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001490:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001492:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001496:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001498:	4620      	mov	r0, r4
 800149a:	f7ff ff82 	bl	80013a2 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800149e:	6823      	ldr	r3, [r4, #0]
 80014a0:	f06f 0201 	mvn.w	r2, #1
 80014a4:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80014a6:	6823      	ldr	r3, [r4, #0]
 80014a8:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80014aa:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80014ac:	0689      	lsls	r1, r1, #26
 80014ae:	d50d      	bpl.n	80014cc <HAL_ADC_IRQHandler+0x126>
 80014b0:	0152      	lsls	r2, r2, #5
 80014b2:	d50b      	bpl.n	80014cc <HAL_ADC_IRQHandler+0x126>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80014b4:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80014b6:	f06f 0520 	mvn.w	r5, #32
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80014ba:	f042 0202 	orr.w	r2, r2, #2
 80014be:	6462      	str	r2, [r4, #68]	; 0x44
    HAL_ADC_ErrorCallback(hadc);
 80014c0:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80014c2:	601d      	str	r5, [r3, #0]
    HAL_ADC_ErrorCallback(hadc);
 80014c4:	f7ff ff6e 	bl	80013a4 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80014c8:	6823      	ldr	r3, [r4, #0]
 80014ca:	601d      	str	r5, [r3, #0]
 80014cc:	bd38      	pop	{r3, r4, r5, pc}
	...

080014d0 <HAL_ADC_ConfigChannel>:
{
 80014d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 80014d2:	2300      	movs	r3, #0
 80014d4:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80014d6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80014da:	2b01      	cmp	r3, #1
 80014dc:	f000 8083 	beq.w	80015e6 <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 80014e0:	680d      	ldr	r5, [r1, #0]
 80014e2:	6804      	ldr	r4, [r0, #0]
 80014e4:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 80014e6:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 80014e8:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 80014ea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80014ee:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 80014f0:	d92a      	bls.n	8001548 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014f2:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80014f6:	68e7      	ldr	r7, [r4, #12]
 80014f8:	3b1e      	subs	r3, #30
 80014fa:	f04f 0e07 	mov.w	lr, #7
 80014fe:	fa0e fe03 	lsl.w	lr, lr, r3
 8001502:	ea27 070e 	bic.w	r7, r7, lr
 8001506:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001508:	68e7      	ldr	r7, [r4, #12]
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	433b      	orrs	r3, r7
 8001510:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8001512:	684a      	ldr	r2, [r1, #4]
 8001514:	2a06      	cmp	r2, #6
 8001516:	ea4f 0382 	mov.w	r3, r2, lsl #2
 800151a:	d825      	bhi.n	8001568 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800151c:	4413      	add	r3, r2
 800151e:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8001520:	1f59      	subs	r1, r3, #5
 8001522:	231f      	movs	r3, #31
 8001524:	408b      	lsls	r3, r1
 8001526:	ea27 0303 	bic.w	r3, r7, r3
 800152a:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800152c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800152e:	fa06 f101 	lsl.w	r1, r6, r1
 8001532:	4311      	orrs	r1, r2
 8001534:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001536:	4b2d      	ldr	r3, [pc, #180]	; (80015ec <HAL_ADC_ConfigChannel+0x11c>)
 8001538:	429c      	cmp	r4, r3
 800153a:	d034      	beq.n	80015a6 <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 800153c:	2300      	movs	r3, #0
 800153e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001542:	4618      	mov	r0, r3
}
 8001544:	b003      	add	sp, #12
 8001546:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001548:	6927      	ldr	r7, [r4, #16]
 800154a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800154e:	f04f 0e07 	mov.w	lr, #7
 8001552:	fa0e fe03 	lsl.w	lr, lr, r3
 8001556:	ea27 070e 	bic.w	r7, r7, lr
 800155a:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800155c:	6927      	ldr	r7, [r4, #16]
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	433b      	orrs	r3, r7
 8001564:	6123      	str	r3, [r4, #16]
 8001566:	e7d4      	b.n	8001512 <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 8001568:	2a0c      	cmp	r2, #12
 800156a:	d80e      	bhi.n	800158a <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800156c:	4413      	add	r3, r2
 800156e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001570:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8001574:	231f      	movs	r3, #31
 8001576:	4093      	lsls	r3, r2
 8001578:	ea21 0303 	bic.w	r3, r1, r3
 800157c:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800157e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001580:	fa06 f202 	lsl.w	r2, r6, r2
 8001584:	431a      	orrs	r2, r3
 8001586:	6322      	str	r2, [r4, #48]	; 0x30
 8001588:	e7d5      	b.n	8001536 <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800158a:	4413      	add	r3, r2
 800158c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800158e:	3b41      	subs	r3, #65	; 0x41
 8001590:	221f      	movs	r2, #31
 8001592:	409a      	lsls	r2, r3
 8001594:	ea21 0202 	bic.w	r2, r1, r2
 8001598:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800159a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800159c:	fa06 f103 	lsl.w	r1, r6, r3
 80015a0:	4311      	orrs	r1, r2
 80015a2:	62e1      	str	r1, [r4, #44]	; 0x2c
 80015a4:	e7c7      	b.n	8001536 <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015a6:	2d12      	cmp	r5, #18
 80015a8:	d104      	bne.n	80015b4 <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015aa:	4a11      	ldr	r2, [pc, #68]	; (80015f0 <HAL_ADC_ConfigChannel+0x120>)
 80015ac:	6853      	ldr	r3, [r2, #4]
 80015ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015b2:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015b4:	f1a5 0310 	sub.w	r3, r5, #16
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d8bf      	bhi.n	800153c <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015bc:	4a0c      	ldr	r2, [pc, #48]	; (80015f0 <HAL_ADC_ConfigChannel+0x120>)
 80015be:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80015c0:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015c6:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80015c8:	d1b8      	bne.n	800153c <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015ca:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <HAL_ADC_ConfigChannel+0x124>)
 80015cc:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <HAL_ADC_ConfigChannel+0x128>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	fbb3 f2f2 	udiv	r2, r3, r2
 80015d4:	230a      	movs	r3, #10
 80015d6:	4353      	muls	r3, r2
        counter--;
 80015d8:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80015da:	9b01      	ldr	r3, [sp, #4]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0ad      	beq.n	800153c <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 80015e0:	9b01      	ldr	r3, [sp, #4]
 80015e2:	3b01      	subs	r3, #1
 80015e4:	e7f8      	b.n	80015d8 <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 80015e6:	2002      	movs	r0, #2
 80015e8:	e7ac      	b.n	8001544 <HAL_ADC_ConfigChannel+0x74>
 80015ea:	bf00      	nop
 80015ec:	40012000 	.word	0x40012000
 80015f0:	40012300 	.word	0x40012300
 80015f4:	20000178 	.word	0x20000178
 80015f8:	000f4240 	.word	0x000f4240

080015fc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015fc:	4770      	bx	lr
	...

08001600 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001600:	4a07      	ldr	r2, [pc, #28]	; (8001620 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001602:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001604:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001608:	041b      	lsls	r3, r3, #16
 800160a:	0c1b      	lsrs	r3, r3, #16
 800160c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001610:	0200      	lsls	r0, r0, #8
 8001612:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001616:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800161a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800161c:	60d3      	str	r3, [r2, #12]
 800161e:	4770      	bx	lr
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001624:	4b17      	ldr	r3, [pc, #92]	; (8001684 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001626:	b530      	push	{r4, r5, lr}
 8001628:	68dc      	ldr	r4, [r3, #12]
 800162a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800162e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001632:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001634:	2b04      	cmp	r3, #4
 8001636:	bf28      	it	cs
 8001638:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800163a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800163c:	f04f 0501 	mov.w	r5, #1
 8001640:	fa05 f303 	lsl.w	r3, r5, r3
 8001644:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001648:	bf8c      	ite	hi
 800164a:	3c03      	subhi	r4, #3
 800164c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800164e:	4019      	ands	r1, r3
 8001650:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001652:	fa05 f404 	lsl.w	r4, r5, r4
 8001656:	3c01      	subs	r4, #1
 8001658:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800165a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800165c:	ea42 0201 	orr.w	r2, r2, r1
 8001660:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001664:	bfaf      	iteee	ge
 8001666:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166a:	f000 000f 	andlt.w	r0, r0, #15
 800166e:	4b06      	ldrlt	r3, [pc, #24]	; (8001688 <HAL_NVIC_SetPriority+0x64>)
 8001670:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001672:	bfa5      	ittet	ge
 8001674:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001678:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001680:	bd30      	pop	{r4, r5, pc}
 8001682:	bf00      	nop
 8001684:	e000ed00 	.word	0xe000ed00
 8001688:	e000ed14 	.word	0xe000ed14

0800168c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800168c:	0942      	lsrs	r2, r0, #5
 800168e:	2301      	movs	r3, #1
 8001690:	f000 001f 	and.w	r0, r0, #31
 8001694:	fa03 f000 	lsl.w	r0, r3, r0
 8001698:	4b01      	ldr	r3, [pc, #4]	; (80016a0 <HAL_NVIC_EnableIRQ+0x14>)
 800169a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800169e:	4770      	bx	lr
 80016a0:	e000e100 	.word	0xe000e100

080016a4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a4:	3801      	subs	r0, #1
 80016a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80016aa:	d20a      	bcs.n	80016c2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ae:	4a07      	ldr	r2, [pc, #28]	; (80016cc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016b0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b2:	21f0      	movs	r1, #240	; 0xf0
 80016b4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ba:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016bc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80016c2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000e010 	.word	0xe000e010
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <HAL_NVIC_ClearPendingIRQ>:
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80016d0:	0943      	lsrs	r3, r0, #5
 80016d2:	2201      	movs	r2, #1
 80016d4:	f000 001f 	and.w	r0, r0, #31
 80016d8:	fa02 f000 	lsl.w	r0, r2, r0
 80016dc:	3360      	adds	r3, #96	; 0x60
 80016de:	4a02      	ldr	r2, [pc, #8]	; (80016e8 <HAL_NVIC_ClearPendingIRQ+0x18>)
 80016e0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	e000e100 	.word	0xe000e100

080016ec <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80016ec:	6803      	ldr	r3, [r0, #0]
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016f4:	f023 0303 	bic.w	r3, r3, #3
 80016f8:	2118      	movs	r1, #24
 80016fa:	3a10      	subs	r2, #16
 80016fc:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001700:	4904      	ldr	r1, [pc, #16]	; (8001714 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8001702:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001704:	bf88      	it	hi
 8001706:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001708:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800170a:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800170c:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 800170e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	080058fd 	.word	0x080058fd

08001718 <HAL_DMA_Init>:
{
 8001718:	b570      	push	{r4, r5, r6, lr}
 800171a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800171c:	f7ff fd82 	bl	8001224 <HAL_GetTick>
 8001720:	4605      	mov	r5, r0
  if(hdma == NULL)
 8001722:	2c00      	cmp	r4, #0
 8001724:	d071      	beq.n	800180a <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8001726:	2300      	movs	r3, #0
 8001728:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800172c:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800172e:	2302      	movs	r3, #2
 8001730:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001734:	6813      	ldr	r3, [r2, #0]
 8001736:	f023 0301 	bic.w	r3, r3, #1
 800173a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800173c:	6821      	ldr	r1, [r4, #0]
 800173e:	680b      	ldr	r3, [r1, #0]
 8001740:	07d8      	lsls	r0, r3, #31
 8001742:	d43c      	bmi.n	80017be <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8001744:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001746:	4d32      	ldr	r5, [pc, #200]	; (8001810 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001748:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800174a:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800174c:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800174e:	68a3      	ldr	r3, [r4, #8]
 8001750:	4313      	orrs	r3, r2
 8001752:	68e2      	ldr	r2, [r4, #12]
 8001754:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001756:	6922      	ldr	r2, [r4, #16]
 8001758:	4313      	orrs	r3, r2
 800175a:	6962      	ldr	r2, [r4, #20]
 800175c:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800175e:	69e2      	ldr	r2, [r4, #28]
 8001760:	4303      	orrs	r3, r0
 8001762:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8001764:	6a22      	ldr	r2, [r4, #32]
 8001766:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001768:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800176a:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800176c:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001770:	bf01      	itttt	eq
 8001772:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8001774:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8001776:	4335      	orreq	r5, r6
 8001778:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 800177a:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 800177c:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800177e:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001780:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8001784:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001788:	d10b      	bne.n	80017a2 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 800178a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800178c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 800178e:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001790:	b13d      	cbz	r5, 80017a2 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001792:	b9f8      	cbnz	r0, 80017d4 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8001794:	2a01      	cmp	r2, #1
 8001796:	d02d      	beq.n	80017f4 <HAL_DMA_Init+0xdc>
 8001798:	d301      	bcc.n	800179e <HAL_DMA_Init+0x86>
 800179a:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800179c:	d101      	bne.n	80017a2 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800179e:	01ea      	lsls	r2, r5, #7
 80017a0:	d42b      	bmi.n	80017fa <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 80017a2:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017a4:	4620      	mov	r0, r4
 80017a6:	f7ff ffa1 	bl	80016ec <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017aa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80017ac:	233f      	movs	r3, #63	; 0x3f
 80017ae:	4093      	lsls	r3, r2
 80017b0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017b2:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80017b4:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017b6:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80017b8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80017bc:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017be:	f7ff fd31 	bl	8001224 <HAL_GetTick>
 80017c2:	1b40      	subs	r0, r0, r5
 80017c4:	2805      	cmp	r0, #5
 80017c6:	d9b9      	bls.n	800173c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017c8:	2320      	movs	r3, #32
 80017ca:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017cc:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 80017ce:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80017d2:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80017d4:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80017d8:	d113      	bne.n	8001802 <HAL_DMA_Init+0xea>
    switch (tmp)
 80017da:	2a03      	cmp	r2, #3
 80017dc:	d8e1      	bhi.n	80017a2 <HAL_DMA_Init+0x8a>
 80017de:	a001      	add	r0, pc, #4	; (adr r0, 80017e4 <HAL_DMA_Init+0xcc>)
 80017e0:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80017e4:	080017fb 	.word	0x080017fb
 80017e8:	0800179f 	.word	0x0800179f
 80017ec:	080017fb 	.word	0x080017fb
 80017f0:	080017f5 	.word	0x080017f5
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017f4:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80017f8:	d1d3      	bne.n	80017a2 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017fa:	2340      	movs	r3, #64	; 0x40
 80017fc:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80017fe:	2001      	movs	r0, #1
 8001800:	e7e5      	b.n	80017ce <HAL_DMA_Init+0xb6>
    switch (tmp)
 8001802:	2a02      	cmp	r2, #2
 8001804:	d9f9      	bls.n	80017fa <HAL_DMA_Init+0xe2>
 8001806:	2a03      	cmp	r2, #3
 8001808:	e7c8      	b.n	800179c <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 800180a:	2001      	movs	r0, #1
 800180c:	bd70      	pop	{r4, r5, r6, pc}
 800180e:	bf00      	nop
 8001810:	f010803f 	.word	0xf010803f

08001814 <HAL_DMA_Start_IT>:
{
 8001814:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8001816:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800181a:	2c01      	cmp	r4, #1
 800181c:	d036      	beq.n	800188c <HAL_DMA_Start_IT+0x78>
 800181e:	2401      	movs	r4, #1
 8001820:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001824:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001828:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 800182a:	2c01      	cmp	r4, #1
 800182c:	f04f 0500 	mov.w	r5, #0
 8001830:	f04f 0402 	mov.w	r4, #2
 8001834:	d128      	bne.n	8001888 <HAL_DMA_Start_IT+0x74>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001836:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800183a:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800183c:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800183e:	6825      	ldr	r5, [r4, #0]
 8001840:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8001844:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8001846:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001848:	6883      	ldr	r3, [r0, #8]
 800184a:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 800184c:	bf0e      	itee	eq
 800184e:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8001850:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8001852:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001854:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8001856:	bf08      	it	eq
 8001858:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800185a:	233f      	movs	r3, #63	; 0x3f
 800185c:	4093      	lsls	r3, r2
 800185e:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001860:	6823      	ldr	r3, [r4, #0]
 8001862:	f043 0316 	orr.w	r3, r3, #22
 8001866:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001868:	6963      	ldr	r3, [r4, #20]
 800186a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800186e:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8001870:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001872:	b11b      	cbz	r3, 800187c <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001874:	6823      	ldr	r3, [r4, #0]
 8001876:	f043 0308 	orr.w	r3, r3, #8
 800187a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800187c:	6823      	ldr	r3, [r4, #0]
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001884:	2000      	movs	r0, #0
 8001886:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8001888:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 800188c:	2002      	movs	r0, #2
}
 800188e:	bd70      	pop	{r4, r5, r6, pc}

08001890 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001890:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001894:	2b02      	cmp	r3, #2
 8001896:	d003      	beq.n	80018a0 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001898:	2380      	movs	r3, #128	; 0x80
 800189a:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800189c:	2001      	movs	r0, #1
 800189e:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80018a0:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80018a2:	2305      	movs	r3, #5
 80018a4:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80018a8:	6813      	ldr	r3, [r2, #0]
 80018aa:	f023 0301 	bic.w	r3, r3, #1
 80018ae:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80018b0:	2000      	movs	r0, #0
}
 80018b2:	4770      	bx	lr

080018b4 <HAL_DMA_IRQHandler>:
{
 80018b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80018ba:	4b5a      	ldr	r3, [pc, #360]	; (8001a24 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018bc:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80018be:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80018c0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80018c2:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80018c4:	2208      	movs	r2, #8
 80018c6:	409a      	lsls	r2, r3
 80018c8:	4216      	tst	r6, r2
{
 80018ca:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80018cc:	d00c      	beq.n	80018e8 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80018ce:	6801      	ldr	r1, [r0, #0]
 80018d0:	6808      	ldr	r0, [r1, #0]
 80018d2:	0740      	lsls	r0, r0, #29
 80018d4:	d508      	bpl.n	80018e8 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80018d6:	6808      	ldr	r0, [r1, #0]
 80018d8:	f020 0004 	bic.w	r0, r0, #4
 80018dc:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80018de:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80018e0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80018e2:	f042 0201 	orr.w	r2, r2, #1
 80018e6:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80018e8:	2201      	movs	r2, #1
 80018ea:	409a      	lsls	r2, r3
 80018ec:	4216      	tst	r6, r2
 80018ee:	d008      	beq.n	8001902 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80018f0:	6821      	ldr	r1, [r4, #0]
 80018f2:	6949      	ldr	r1, [r1, #20]
 80018f4:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80018f6:	bf41      	itttt	mi
 80018f8:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80018fa:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80018fc:	f042 0202 	orrmi.w	r2, r2, #2
 8001900:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001902:	2204      	movs	r2, #4
 8001904:	409a      	lsls	r2, r3
 8001906:	4216      	tst	r6, r2
 8001908:	d008      	beq.n	800191c <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800190a:	6821      	ldr	r1, [r4, #0]
 800190c:	6809      	ldr	r1, [r1, #0]
 800190e:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001910:	bf41      	itttt	mi
 8001912:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001914:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8001916:	f042 0204 	orrmi.w	r2, r2, #4
 800191a:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800191c:	2210      	movs	r2, #16
 800191e:	409a      	lsls	r2, r3
 8001920:	4216      	tst	r6, r2
 8001922:	d010      	beq.n	8001946 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001924:	6823      	ldr	r3, [r4, #0]
 8001926:	6819      	ldr	r1, [r3, #0]
 8001928:	0709      	lsls	r1, r1, #28
 800192a:	d50c      	bpl.n	8001946 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800192c:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	0350      	lsls	r0, r2, #13
 8001932:	d535      	bpl.n	80019a0 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	0319      	lsls	r1, r3, #12
 8001938:	d401      	bmi.n	800193e <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 800193a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800193c:	e000      	b.n	8001940 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800193e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8001940:	b10b      	cbz	r3, 8001946 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8001942:	4620      	mov	r0, r4
 8001944:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001946:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001948:	2220      	movs	r2, #32
 800194a:	408a      	lsls	r2, r1
 800194c:	4216      	tst	r6, r2
 800194e:	d038      	beq.n	80019c2 <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001950:	6823      	ldr	r3, [r4, #0]
 8001952:	6818      	ldr	r0, [r3, #0]
 8001954:	06c6      	lsls	r6, r0, #27
 8001956:	d534      	bpl.n	80019c2 <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001958:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800195a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800195e:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001960:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001962:	d125      	bne.n	80019b0 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001964:	f022 0216 	bic.w	r2, r2, #22
 8001968:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800196a:	695a      	ldr	r2, [r3, #20]
 800196c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001970:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001972:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001974:	b90a      	cbnz	r2, 800197a <HAL_DMA_IRQHandler+0xc6>
 8001976:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001978:	b11a      	cbz	r2, 8001982 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	f022 0208 	bic.w	r2, r2, #8
 8001980:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001982:	233f      	movs	r3, #63	; 0x3f
 8001984:	408b      	lsls	r3, r1
 8001986:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8001988:	2300      	movs	r3, #0
 800198a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800198e:	2301      	movs	r3, #1
 8001990:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8001994:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8001996:	b10b      	cbz	r3, 800199c <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8001998:	4620      	mov	r0, r4
 800199a:	4798      	blx	r3
}
 800199c:	b003      	add	sp, #12
 800199e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019a4:	bf5e      	ittt	pl
 80019a6:	681a      	ldrpl	r2, [r3, #0]
 80019a8:	f022 0208 	bicpl.w	r2, r2, #8
 80019ac:	601a      	strpl	r2, [r3, #0]
 80019ae:	e7c4      	b.n	800193a <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019b0:	0350      	lsls	r0, r2, #13
 80019b2:	d528      	bpl.n	8001a06 <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	0319      	lsls	r1, r3, #12
 80019b8:	d432      	bmi.n	8001a20 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 80019ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 80019bc:	b10b      	cbz	r3, 80019c2 <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 80019be:	4620      	mov	r0, r4
 80019c0:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80019c2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0e9      	beq.n	800199c <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80019c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80019ca:	07da      	lsls	r2, r3, #31
 80019cc:	d519      	bpl.n	8001a02 <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 80019ce:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 80019d0:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 80019d2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80019d6:	6813      	ldr	r3, [r2, #0]
 80019d8:	f023 0301 	bic.w	r3, r3, #1
 80019dc:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80019de:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80019e2:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 80019e6:	9b01      	ldr	r3, [sp, #4]
 80019e8:	3301      	adds	r3, #1
 80019ea:	429f      	cmp	r7, r3
 80019ec:	9301      	str	r3, [sp, #4]
 80019ee:	d302      	bcc.n	80019f6 <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80019f0:	6813      	ldr	r3, [r2, #0]
 80019f2:	07db      	lsls	r3, r3, #31
 80019f4:	d4f7      	bmi.n	80019e6 <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 80019f6:	2300      	movs	r3, #0
 80019f8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80019fc:	2301      	movs	r3, #1
 80019fe:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8001a02:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001a04:	e7c7      	b.n	8001996 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8001a0c:	d108      	bne.n	8001a20 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a0e:	6819      	ldr	r1, [r3, #0]
 8001a10:	f021 0110 	bic.w	r1, r1, #16
 8001a14:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001a16:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8001a18:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001a1c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8001a20:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a22:	e7cb      	b.n	80019bc <HAL_DMA_IRQHandler+0x108>
 8001a24:	20000178 	.word	0x20000178

08001a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a2c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a2e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a30:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8001bd0 <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a34:	4a64      	ldr	r2, [pc, #400]	; (8001bc8 <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a36:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8001a38:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a3c:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a3e:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001a40:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a44:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 8001a48:	42b7      	cmp	r7, r6
 8001a4a:	f040 80ad 	bne.w	8001ba8 <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a4e:	684c      	ldr	r4, [r1, #4]
 8001a50:	f024 0a10 	bic.w	sl, r4, #16
 8001a54:	f1ba 0f02 	cmp.w	sl, #2
 8001a58:	d116      	bne.n	8001a88 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 8001a5a:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8001a5e:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a62:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001a66:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a6a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001a6e:	f04f 0e0f 	mov.w	lr, #15
 8001a72:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001a76:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a7a:	690d      	ldr	r5, [r1, #16]
 8001a7c:	fa05 f50b 	lsl.w	r5, r5, fp
 8001a80:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001a84:	f8cc 5020 	str.w	r5, [ip, #32]
 8001a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a8c:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001a8e:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a92:	fa05 f50c 	lsl.w	r5, r5, ip
 8001a96:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a98:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a9c:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aa0:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001aa4:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aa8:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001aac:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ab0:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 8001ab2:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ab6:	d815      	bhi.n	8001ae4 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 8001ab8:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001abc:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ac0:	68cd      	ldr	r5, [r1, #12]
 8001ac2:	fa05 fa0c 	lsl.w	sl, r5, ip
 8001ac6:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 8001aca:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8001ace:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ad2:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ad6:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 8001ada:	fa0e fe03 	lsl.w	lr, lr, r3
 8001ade:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 8001ae2:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001ae4:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ae6:	9d00      	ldr	r5, [sp, #0]
 8001ae8:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aea:	688f      	ldr	r7, [r1, #8]
 8001aec:	fa07 f70c 	lsl.w	r7, r7, ip
 8001af0:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001af2:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001af4:	00e5      	lsls	r5, r4, #3
 8001af6:	d557      	bpl.n	8001ba8 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af8:	f04f 0b00 	mov.w	fp, #0
 8001afc:	f8cd b00c 	str.w	fp, [sp, #12]
 8001b00:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b04:	4d31      	ldr	r5, [pc, #196]	; (8001bcc <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b06:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001b0a:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001b0e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001b12:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001b16:	9703      	str	r7, [sp, #12]
 8001b18:	9f03      	ldr	r7, [sp, #12]
 8001b1a:	f023 0703 	bic.w	r7, r3, #3
 8001b1e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001b22:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b26:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001b2a:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b2e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001b32:	f04f 0e0f 	mov.w	lr, #15
 8001b36:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b3a:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b3c:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b40:	d039      	beq.n	8001bb6 <HAL_GPIO_Init+0x18e>
 8001b42:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b46:	42a8      	cmp	r0, r5
 8001b48:	d037      	beq.n	8001bba <HAL_GPIO_Init+0x192>
 8001b4a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b4e:	42a8      	cmp	r0, r5
 8001b50:	d035      	beq.n	8001bbe <HAL_GPIO_Init+0x196>
 8001b52:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b56:	42a8      	cmp	r0, r5
 8001b58:	d033      	beq.n	8001bc2 <HAL_GPIO_Init+0x19a>
 8001b5a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b5e:	42a8      	cmp	r0, r5
 8001b60:	bf14      	ite	ne
 8001b62:	2507      	movne	r5, #7
 8001b64:	2504      	moveq	r5, #4
 8001b66:	fa05 f50c 	lsl.w	r5, r5, ip
 8001b6a:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b6e:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001b70:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001b72:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b74:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001b78:	bf0c      	ite	eq
 8001b7a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001b7c:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001b7e:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8001b80:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b82:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001b86:	bf0c      	ite	eq
 8001b88:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001b8a:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001b8c:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b8e:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b90:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001b94:	bf0c      	ite	eq
 8001b96:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001b98:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001b9a:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8001b9c:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b9e:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001ba0:	bf54      	ite	pl
 8001ba2:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001ba4:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001ba6:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ba8:	3301      	adds	r3, #1
 8001baa:	2b10      	cmp	r3, #16
 8001bac:	f47f af47 	bne.w	8001a3e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001bb0:	b005      	add	sp, #20
 8001bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bb6:	465d      	mov	r5, fp
 8001bb8:	e7d5      	b.n	8001b66 <HAL_GPIO_Init+0x13e>
 8001bba:	2501      	movs	r5, #1
 8001bbc:	e7d3      	b.n	8001b66 <HAL_GPIO_Init+0x13e>
 8001bbe:	2502      	movs	r5, #2
 8001bc0:	e7d1      	b.n	8001b66 <HAL_GPIO_Init+0x13e>
 8001bc2:	2503      	movs	r5, #3
 8001bc4:	e7cf      	b.n	8001b66 <HAL_GPIO_Init+0x13e>
 8001bc6:	bf00      	nop
 8001bc8:	40013c00 	.word	0x40013c00
 8001bcc:	40020000 	.word	0x40020000
 8001bd0:	40023800 	.word	0x40023800

08001bd4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bd4:	6903      	ldr	r3, [r0, #16]
 8001bd6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001bd8:	bf14      	ite	ne
 8001bda:	2001      	movne	r0, #1
 8001bdc:	2000      	moveq	r0, #0
 8001bde:	4770      	bx	lr

08001be0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001be0:	b10a      	cbz	r2, 8001be6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001be2:	6181      	str	r1, [r0, #24]
 8001be4:	4770      	bx	lr
 8001be6:	0409      	lsls	r1, r1, #16
 8001be8:	e7fb      	b.n	8001be2 <HAL_GPIO_WritePin+0x2>
	...

08001bec <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bec:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange = 0U;
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8001bee:	4604      	mov	r4, r0
 8001bf0:	2800      	cmp	r0, #0
 8001bf2:	d062      	beq.n	8001cba <HAL_I2C_Init+0xce>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001bf4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001bf8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001bfc:	b91b      	cbnz	r3, 8001c06 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bfe:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c02:	f001 ffe5 	bl	8003bd0 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c06:	6822      	ldr	r2, [r4, #0]
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001c08:	4e2d      	ldr	r6, [pc, #180]	; (8001cc0 <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 8001c0a:	4d2e      	ldr	r5, [pc, #184]	; (8001cc4 <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c0c:	2324      	movs	r3, #36	; 0x24
 8001c0e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001c12:	6813      	ldr	r3, [r2, #0]
 8001c14:	f023 0301 	bic.w	r3, r3, #1
 8001c18:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c1a:	f000 ff67 	bl	8002aec <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001c1e:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 8001c20:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001c22:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001c26:	42b3      	cmp	r3, r6
 8001c28:	bf84      	itt	hi
 8001c2a:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 8001c2e:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 8001c30:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001c32:	bf91      	iteee	ls
 8001c34:	1c69      	addls	r1, r5, #1
 8001c36:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 8001c3a:	fbb1 f1f5 	udivhi	r1, r1, r5
 8001c3e:	3101      	addhi	r1, #1

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001c40:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001c42:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001c44:	d821      	bhi.n	8001c8a <HAL_I2C_Init+0x9e>
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c4c:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001c50:	2b03      	cmp	r3, #3
 8001c52:	bf98      	it	ls
 8001c54:	2004      	movls	r0, #4

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c56:	6a21      	ldr	r1, [r4, #32]
 8001c58:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001c5a:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c5c:	430b      	orrs	r3, r1
 8001c5e:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001c60:	68e1      	ldr	r1, [r4, #12]
 8001c62:	6923      	ldr	r3, [r4, #16]
 8001c64:	430b      	orrs	r3, r1
 8001c66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001c68:	69a1      	ldr	r1, [r4, #24]
 8001c6a:	6963      	ldr	r3, [r4, #20]
 8001c6c:	430b      	orrs	r3, r1
 8001c6e:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c70:	6813      	ldr	r3, [r2, #0]
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c78:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001c7a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c7c:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c7e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c82:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c84:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8001c88:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001c8a:	68a1      	ldr	r1, [r4, #8]
 8001c8c:	b949      	cbnz	r1, 8001ca2 <HAL_I2C_Init+0xb6>
 8001c8e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001c92:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c96:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001c9a:	b163      	cbz	r3, 8001cb6 <HAL_I2C_Init+0xca>
 8001c9c:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8001ca0:	e7d9      	b.n	8001c56 <HAL_I2C_Init+0x6a>
 8001ca2:	2119      	movs	r1, #25
 8001ca4:	434b      	muls	r3, r1
 8001ca6:	fbb0 f0f3 	udiv	r0, r0, r3
 8001caa:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001cae:	b113      	cbz	r3, 8001cb6 <HAL_I2C_Init+0xca>
 8001cb0:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8001cb4:	e7cf      	b.n	8001c56 <HAL_I2C_Init+0x6a>
 8001cb6:	2001      	movs	r0, #1
 8001cb8:	e7cd      	b.n	8001c56 <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 8001cba:	2001      	movs	r0, #1
}
 8001cbc:	bd70      	pop	{r4, r5, r6, pc}
 8001cbe:	bf00      	nop
 8001cc0:	000186a0 	.word	0x000186a0
 8001cc4:	000f4240 	.word	0x000f4240

08001cc8 <HAL_I2C_MasterTxCpltCallback>:
 8001cc8:	4770      	bx	lr

08001cca <HAL_I2C_MasterRxCpltCallback>:
 8001cca:	4770      	bx	lr

08001ccc <HAL_I2C_SlaveTxCpltCallback>:
 8001ccc:	4770      	bx	lr

08001cce <HAL_I2C_SlaveRxCpltCallback>:
 8001cce:	4770      	bx	lr

08001cd0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferOptions_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001cd0:	4770      	bx	lr

08001cd2 <HAL_I2C_ListenCpltCallback>:
 8001cd2:	4770      	bx	lr

08001cd4 <HAL_I2C_MemTxCpltCallback>:
 8001cd4:	4770      	bx	lr

08001cd6 <HAL_I2C_MemRxCpltCallback>:
 8001cd6:	4770      	bx	lr

08001cd8 <HAL_I2C_ErrorCallback>:
 8001cd8:	4770      	bx	lr

08001cda <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cda:	4770      	bx	lr

08001cdc <I2C_ITError>:
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8001cdc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d

  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001ce0:	3b29      	subs	r3, #41	; 0x29
 8001ce2:	2b01      	cmp	r3, #1
{
 8001ce4:	b510      	push	{r4, lr}
 8001ce6:	6803      	ldr	r3, [r0, #0]
 8001ce8:	4604      	mov	r4, r0
  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001cea:	d839      	bhi.n	8001d60 <I2C_ITError+0x84>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8001cec:	2200      	movs	r2, #0
 8001cee:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001cf0:	2228      	movs	r2, #40	; 0x28
 8001cf2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->Mode = HAL_I2C_MODE_NONE;
  }

  /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
  hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cfc:	601a      	str	r2, [r3, #0]

  /* Abort DMA transfer */
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8001d04:	d054      	beq.n	8001db0 <I2C_ITError+0xd4>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8001d06:	685a      	ldr	r2, [r3, #4]

    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8001d08:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8001d0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d0e:	605a      	str	r2, [r3, #4]
    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8001d10:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	4b39      	ldr	r3, [pc, #228]	; (8001dfc <I2C_ITError+0x120>)
 8001d18:	d031      	beq.n	8001d7e <I2C_ITError+0xa2>
    {
      /* Set the DMA Abort callback : 
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001d1a:	6503      	str	r3, [r0, #80]	; 0x50

      if(HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001d1c:	f7ff fdb8 	bl	8001890 <HAL_DMA_Abort_IT>
 8001d20:	b150      	cbz	r0, 8001d38 <I2C_ITError+0x5c>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8001d22:	6822      	ldr	r2, [r4, #0]

        hi2c->State = HAL_I2C_STATE_READY;

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001d24:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8001d26:	6813      	ldr	r3, [r2, #0]
 8001d28:	f023 0301 	bic.w	r3, r3, #1
 8001d2c:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8001d2e:	2320      	movs	r3, #32
 8001d30:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_I2C_DISABLE(hi2c);

        hi2c->State = HAL_I2C_STATE_READY;

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001d34:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001d36:	4798      	blx	r3
    HAL_I2C_ErrorCallback(hi2c);
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
 8001d38:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001d3c:	2b28      	cmp	r3, #40	; 0x28
 8001d3e:	d10e      	bne.n	8001d5e <I2C_ITError+0x82>
 8001d40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d42:	075b      	lsls	r3, r3, #29
 8001d44:	d50b      	bpl.n	8001d5e <I2C_ITError+0x82>
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d46:	4b2e      	ldr	r3, [pc, #184]	; (8001e00 <I2C_ITError+0x124>)
 8001d48:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State = HAL_I2C_STATE_READY;
 8001d4a:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
    
    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    HAL_I2C_ListenCpltCallback(hi2c);
 8001d50:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 8001d52:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d56:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8001d5a:	f7ff ffba 	bl	8001cd2 <HAL_I2C_ListenCpltCallback>
 8001d5e:	bd10      	pop	{r4, pc}
    if((hi2c->State != HAL_I2C_STATE_ABORT) && ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) != I2C_CR2_DMAEN))
 8001d60:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8001d64:	2a60      	cmp	r2, #96	; 0x60
 8001d66:	d005      	beq.n	8001d74 <I2C_ITError+0x98>
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	0512      	lsls	r2, r2, #20
      hi2c->State = HAL_I2C_STATE_READY;
 8001d6c:	bf5c      	itt	pl
 8001d6e:	2220      	movpl	r2, #32
 8001d70:	f880 203d 	strbpl.w	r2, [r0, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8001d74:	2200      	movs	r2, #0
 8001d76:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d78:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 8001d7c:	e7bb      	b.n	8001cf6 <I2C_ITError+0x1a>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001d7e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001d80:	6503      	str	r3, [r0, #80]	; 0x50
      if(HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001d82:	f7ff fd85 	bl	8001890 <HAL_DMA_Abort_IT>
 8001d86:	2800      	cmp	r0, #0
 8001d88:	d0d6      	beq.n	8001d38 <I2C_ITError+0x5c>
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001d8a:	6822      	ldr	r2, [r4, #0]
 8001d8c:	6953      	ldr	r3, [r2, #20]
 8001d8e:	0658      	lsls	r0, r3, #25
 8001d90:	d504      	bpl.n	8001d9c <I2C_ITError+0xc0>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001d92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d94:	6912      	ldr	r2, [r2, #16]
 8001d96:	1c59      	adds	r1, r3, #1
 8001d98:	6261      	str	r1, [r4, #36]	; 0x24
 8001d9a:	701a      	strb	r2, [r3, #0]
        __HAL_I2C_DISABLE(hi2c);
 8001d9c:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001d9e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 8001da0:	6813      	ldr	r3, [r2, #0]
 8001da2:	f023 0301 	bic.w	r3, r3, #1
 8001da6:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8001da8:	2320      	movs	r3, #32
 8001daa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8001dae:	e7c1      	b.n	8001d34 <I2C_ITError+0x58>
  else if(hi2c->State == HAL_I2C_STATE_ABORT)
 8001db0:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8001db4:	2960      	cmp	r1, #96	; 0x60
 8001db6:	d114      	bne.n	8001de2 <I2C_ITError+0x106>
    hi2c->State = HAL_I2C_STATE_READY;
 8001db8:	2120      	movs	r1, #32
 8001dba:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dbe:	6422      	str	r2, [r4, #64]	; 0x40
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001dc0:	695a      	ldr	r2, [r3, #20]
 8001dc2:	0651      	lsls	r1, r2, #25
 8001dc4:	d504      	bpl.n	8001dd0 <I2C_ITError+0xf4>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001dc6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	1c51      	adds	r1, r2, #1
 8001dcc:	6261      	str	r1, [r4, #36]	; 0x24
 8001dce:	7013      	strb	r3, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 8001dd0:	6822      	ldr	r2, [r4, #0]
 8001dd2:	6813      	ldr	r3, [r2, #0]
 8001dd4:	f023 0301 	bic.w	r3, r3, #1
 8001dd8:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8001dda:	4620      	mov	r0, r4
 8001ddc:	f7ff ff7d 	bl	8001cda <HAL_I2C_AbortCpltCallback>
 8001de0:	e7aa      	b.n	8001d38 <I2C_ITError+0x5c>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001de2:	695a      	ldr	r2, [r3, #20]
 8001de4:	0652      	lsls	r2, r2, #25
 8001de6:	d504      	bpl.n	8001df2 <I2C_ITError+0x116>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001de8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	1c51      	adds	r1, r2, #1
 8001dee:	6261      	str	r1, [r4, #36]	; 0x24
 8001df0:	7013      	strb	r3, [r2, #0]
    HAL_I2C_ErrorCallback(hi2c);
 8001df2:	4620      	mov	r0, r4
 8001df4:	f7ff ff70 	bl	8001cd8 <HAL_I2C_ErrorCallback>
 8001df8:	e79e      	b.n	8001d38 <I2C_ITError+0x5c>
 8001dfa:	bf00      	nop
 8001dfc:	0800260d 	.word	0x0800260d
 8001e00:	ffff0000 	.word	0xffff0000

08001e04 <HAL_I2C_EV_IRQHandler>:
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e04:	6803      	ldr	r3, [r0, #0]
{
 8001e06:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e08:	699d      	ldr	r5, [r3, #24]
  uint32_t sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001e0a:	6959      	ldr	r1, [r3, #20]
  uint32_t itsources    = READ_REG(hi2c->Instance->CR2);
 8001e0c:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentMode  = hi2c->Mode;
 8001e0e:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
 8001e12:	b2e4      	uxtb	r4, r4
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001e14:	2c10      	cmp	r4, #16
{
 8001e16:	b08d      	sub	sp, #52	; 0x34
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001e18:	d002      	beq.n	8001e20 <HAL_I2C_EV_IRQHandler+0x1c>
 8001e1a:	2c40      	cmp	r4, #64	; 0x40
 8001e1c:	f040 8255 	bne.w	80022ca <HAL_I2C_EV_IRQHandler+0x4c6>
    if(((sr1itflags & I2C_FLAG_SB) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8001e20:	f011 1f01 	tst.w	r1, #65537	; 0x10001
 8001e24:	d066      	beq.n	8001ef4 <HAL_I2C_EV_IRQHandler+0xf0>
 8001e26:	0597      	lsls	r7, r2, #22
 8001e28:	d564      	bpl.n	8001ef4 <HAL_I2C_EV_IRQHandler+0xf0>
  if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e2a:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
 8001e2e:	2c40      	cmp	r4, #64	; 0x40
 8001e30:	d143      	bne.n	8001eba <HAL_I2C_EV_IRQHandler+0xb6>
    if(hi2c->EventCount == 0U)
 8001e32:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001e34:	2c00      	cmp	r4, #0
 8001e36:	d13b      	bne.n	8001eb0 <HAL_I2C_EV_IRQHandler+0xac>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001e38:	6c44      	ldr	r4, [r0, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001e3a:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001e3e:	611c      	str	r4, [r3, #16]
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8001e40:	4e98      	ldr	r6, [pc, #608]	; (80020a4 <HAL_I2C_EV_IRQHandler+0x2a0>)
 8001e42:	4c99      	ldr	r4, [pc, #612]	; (80020a8 <HAL_I2C_EV_IRQHandler+0x2a4>)
 8001e44:	402e      	ands	r6, r5
 8001e46:	400c      	ands	r4, r1
 8001e48:	2e00      	cmp	r6, #0
 8001e4a:	f000 819f 	beq.w	800218c <HAL_I2C_EV_IRQHandler+0x388>
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8001e4e:	4d97      	ldr	r5, [pc, #604]	; (80020ac <HAL_I2C_EV_IRQHandler+0x2a8>)
 8001e50:	400d      	ands	r5, r1
 8001e52:	2d00      	cmp	r5, #0
 8001e54:	f000 8166 	beq.w	8002124 <HAL_I2C_EV_IRQHandler+0x320>
 8001e58:	0555      	lsls	r5, r2, #21
 8001e5a:	f140 8163 	bpl.w	8002124 <HAL_I2C_EV_IRQHandler+0x320>
 8001e5e:	2c00      	cmp	r4, #0
 8001e60:	f040 8160 	bne.w	8002124 <HAL_I2C_EV_IRQHandler+0x320>
  uint32_t CurrentState       = hi2c->State;
 8001e64:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001e68:	8d05      	ldrh	r5, [r0, #40]	; 0x28
  uint32_t CurrentMode        = hi2c->Mode;
 8001e6a:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e6e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  uint32_t CurrentState       = hi2c->State;
 8001e70:	b2d2      	uxtb	r2, r2
  uint32_t CurrentMode        = hi2c->Mode;
 8001e72:	b2c9      	uxtb	r1, r1
  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001e74:	2d00      	cmp	r5, #0
 8001e76:	f040 8105 	bne.w	8002084 <HAL_I2C_EV_IRQHandler+0x280>
 8001e7a:	2a21      	cmp	r2, #33	; 0x21
 8001e7c:	f040 8104 	bne.w	8002088 <HAL_I2C_EV_IRQHandler+0x284>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001e80:	2c04      	cmp	r4, #4
 8001e82:	f000 816c 	beq.w	800215e <HAL_I2C_EV_IRQHandler+0x35a>
 8001e86:	2c08      	cmp	r4, #8
 8001e88:	f000 8169 	beq.w	800215e <HAL_I2C_EV_IRQHandler+0x35a>
 8001e8c:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
 8001e90:	f000 8165 	beq.w	800215e <HAL_I2C_EV_IRQHandler+0x35a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e9a:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001e9c:	2311      	movs	r3, #17
 8001e9e:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea0:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001ea4:	2320      	movs	r3, #32
 8001ea6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001eaa:	f7ff ff0d 	bl	8001cc8 <HAL_I2C_MasterTxCpltCallback>
 8001eae:	e0f6      	b.n	800209e <HAL_I2C_EV_IRQHandler+0x29a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001eb0:	6c44      	ldr	r4, [r0, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001eb2:	f044 0401 	orr.w	r4, r4, #1
 8001eb6:	b2e4      	uxtb	r4, r4
 8001eb8:	e7c1      	b.n	8001e3e <HAL_I2C_EV_IRQHandler+0x3a>
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001eba:	6904      	ldr	r4, [r0, #16]
 8001ebc:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 8001ec0:	d105      	bne.n	8001ece <HAL_I2C_EV_IRQHandler+0xca>
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 8001ec2:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8001ec6:	2c21      	cmp	r4, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001ec8:	6c44      	ldr	r4, [r0, #68]	; 0x44
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 8001eca:	d1f2      	bne.n	8001eb2 <HAL_I2C_EV_IRQHandler+0xae>
 8001ecc:	e7b5      	b.n	8001e3a <HAL_I2C_EV_IRQHandler+0x36>
      if(hi2c->EventCount == 0U)
 8001ece:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001ed0:	b934      	cbnz	r4, 8001ee0 <HAL_I2C_EV_IRQHandler+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001ed2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001ed4:	11e4      	asrs	r4, r4, #7
 8001ed6:	f004 0406 	and.w	r4, r4, #6
 8001eda:	f044 04f0 	orr.w	r4, r4, #240	; 0xf0
 8001ede:	e7ae      	b.n	8001e3e <HAL_I2C_EV_IRQHandler+0x3a>
      else if(hi2c->EventCount == 1U)
 8001ee0:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001ee2:	2c01      	cmp	r4, #1
 8001ee4:	d1ac      	bne.n	8001e40 <HAL_I2C_EV_IRQHandler+0x3c>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001ee6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001ee8:	11e4      	asrs	r4, r4, #7
 8001eea:	f004 0406 	and.w	r4, r4, #6
 8001eee:	f044 04f1 	orr.w	r4, r4, #241	; 0xf1
 8001ef2:	e7a4      	b.n	8001e3e <HAL_I2C_EV_IRQHandler+0x3a>
    else if(((sr1itflags & I2C_FLAG_ADD10) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8001ef4:	4c6e      	ldr	r4, [pc, #440]	; (80020b0 <HAL_I2C_EV_IRQHandler+0x2ac>)
 8001ef6:	400c      	ands	r4, r1
 8001ef8:	b11c      	cbz	r4, 8001f02 <HAL_I2C_EV_IRQHandler+0xfe>
 8001efa:	0596      	lsls	r6, r2, #22
 8001efc:	d501      	bpl.n	8001f02 <HAL_I2C_EV_IRQHandler+0xfe>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001efe:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001f00:	e7d9      	b.n	8001eb6 <HAL_I2C_EV_IRQHandler+0xb2>
    else if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8001f02:	4c6c      	ldr	r4, [pc, #432]	; (80020b4 <HAL_I2C_EV_IRQHandler+0x2b0>)
 8001f04:	400c      	ands	r4, r1
 8001f06:	2c00      	cmp	r4, #0
 8001f08:	d09a      	beq.n	8001e40 <HAL_I2C_EV_IRQHandler+0x3c>
 8001f0a:	0594      	lsls	r4, r2, #22
 8001f0c:	d598      	bpl.n	8001e40 <HAL_I2C_EV_IRQHandler+0x3c>
  uint32_t CurrentMode        = hi2c->Mode;
 8001f0e:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f12:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  uint32_t Prev_State         = hi2c->PreviousState;
 8001f14:	f8d0 e030 	ldr.w	lr, [r0, #48]	; 0x30
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001f18:	f890 703d 	ldrb.w	r7, [r0, #61]	; 0x3d
 8001f1c:	2f22      	cmp	r7, #34	; 0x22
  uint32_t CurrentMode        = hi2c->Mode;
 8001f1e:	b2e4      	uxtb	r4, r4
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001f20:	f040 80a8 	bne.w	8002074 <HAL_I2C_EV_IRQHandler+0x270>
    if((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8001f24:	6d07      	ldr	r7, [r0, #80]	; 0x50
 8001f26:	b947      	cbnz	r7, 8001f3a <HAL_I2C_EV_IRQHandler+0x136>
 8001f28:	2c40      	cmp	r4, #64	; 0x40
 8001f2a:	d106      	bne.n	8001f3a <HAL_I2C_EV_IRQHandler+0x136>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f2c:	9701      	str	r7, [sp, #4]
 8001f2e:	695c      	ldr	r4, [r3, #20]
 8001f30:	9401      	str	r4, [sp, #4]
 8001f32:	699c      	ldr	r4, [r3, #24]
 8001f34:	9401      	str	r4, [sp, #4]
 8001f36:	9c01      	ldr	r4, [sp, #4]
 8001f38:	e782      	b.n	8001e40 <HAL_I2C_EV_IRQHandler+0x3c>
    else if((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8001f3a:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001f3c:	b98c      	cbnz	r4, 8001f62 <HAL_I2C_EV_IRQHandler+0x15e>
 8001f3e:	6907      	ldr	r7, [r0, #16]
 8001f40:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
 8001f44:	d10d      	bne.n	8001f62 <HAL_I2C_EV_IRQHandler+0x15e>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f46:	9402      	str	r4, [sp, #8]
 8001f48:	695c      	ldr	r4, [r3, #20]
 8001f4a:	9402      	str	r4, [sp, #8]
 8001f4c:	699c      	ldr	r4, [r3, #24]
 8001f4e:	9402      	str	r4, [sp, #8]
 8001f50:	9c02      	ldr	r4, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001f52:	681c      	ldr	r4, [r3, #0]
 8001f54:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8001f58:	601c      	str	r4, [r3, #0]
      hi2c->EventCount++;
 8001f5a:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001f5c:	3401      	adds	r4, #1
      hi2c->EventCount = 0U;
 8001f5e:	6504      	str	r4, [r0, #80]	; 0x50
 8001f60:	e76e      	b.n	8001e40 <HAL_I2C_EV_IRQHandler+0x3c>
      if(hi2c->XferCount == 0U)
 8001f62:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8001f64:	b2a4      	uxth	r4, r4
 8001f66:	b954      	cbnz	r4, 8001f7e <HAL_I2C_EV_IRQHandler+0x17a>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f68:	9403      	str	r4, [sp, #12]
 8001f6a:	695c      	ldr	r4, [r3, #20]
 8001f6c:	9403      	str	r4, [sp, #12]
 8001f6e:	699c      	ldr	r4, [r3, #24]
 8001f70:	9403      	str	r4, [sp, #12]
 8001f72:	9c03      	ldr	r4, [sp, #12]
            hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001f74:	681c      	ldr	r4, [r3, #0]
 8001f76:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8001f7a:	601c      	str	r4, [r3, #0]
 8001f7c:	e019      	b.n	8001fb2 <HAL_I2C_EV_IRQHandler+0x1ae>
      else if(hi2c->XferCount == 1U)   
 8001f7e:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8001f80:	b2a4      	uxth	r4, r4
 8001f82:	2c01      	cmp	r4, #1
 8001f84:	d142      	bne.n	800200c <HAL_I2C_EV_IRQHandler+0x208>
        if(CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8001f86:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 8001f8a:	d11b      	bne.n	8001fc4 <HAL_I2C_EV_IRQHandler+0x1c0>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001f8c:	681c      	ldr	r4, [r3, #0]
 8001f8e:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8001f92:	601c      	str	r4, [r3, #0]
          if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001f94:	685c      	ldr	r4, [r3, #4]
 8001f96:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
 8001f9a:	d00c      	beq.n	8001fb6 <HAL_I2C_EV_IRQHandler+0x1b2>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001f9c:	681c      	ldr	r4, [r3, #0]
 8001f9e:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8001fa2:	601c      	str	r4, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fa4:	2400      	movs	r4, #0
 8001fa6:	9404      	str	r4, [sp, #16]
 8001fa8:	695c      	ldr	r4, [r3, #20]
 8001faa:	9404      	str	r4, [sp, #16]
 8001fac:	699c      	ldr	r4, [r3, #24]
 8001fae:	9404      	str	r4, [sp, #16]
 8001fb0:	9c04      	ldr	r4, [sp, #16]
      hi2c->EventCount = 0U;
 8001fb2:	2400      	movs	r4, #0
 8001fb4:	e7d3      	b.n	8001f5e <HAL_I2C_EV_IRQHandler+0x15a>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fb6:	9405      	str	r4, [sp, #20]
 8001fb8:	695c      	ldr	r4, [r3, #20]
 8001fba:	9405      	str	r4, [sp, #20]
 8001fbc:	699c      	ldr	r4, [r3, #24]
 8001fbe:	9405      	str	r4, [sp, #20]
 8001fc0:	9c05      	ldr	r4, [sp, #20]
 8001fc2:	e7d7      	b.n	8001f74 <HAL_I2C_EV_IRQHandler+0x170>
        else if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8001fc4:	2e04      	cmp	r6, #4
 8001fc6:	d015      	beq.n	8001ff4 <HAL_I2C_EV_IRQHandler+0x1f0>
 8001fc8:	2e08      	cmp	r6, #8
 8001fca:	d013      	beq.n	8001ff4 <HAL_I2C_EV_IRQHandler+0x1f0>
          && (Prev_State != I2C_STATE_MASTER_BUSY_RX))
 8001fcc:	f1be 0f12 	cmp.w	lr, #18
 8001fd0:	d010      	beq.n	8001ff4 <HAL_I2C_EV_IRQHandler+0x1f0>
          if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8001fd2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001fd4:	2c02      	cmp	r4, #2
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001fd6:	681c      	ldr	r4, [r3, #0]
 8001fd8:	bf14      	ite	ne
 8001fda:	f424 6480 	bicne.w	r4, r4, #1024	; 0x400
            hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001fde:	f444 6480 	orreq.w	r4, r4, #1024	; 0x400
 8001fe2:	601c      	str	r4, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fe4:	2400      	movs	r4, #0
 8001fe6:	9406      	str	r4, [sp, #24]
 8001fe8:	695c      	ldr	r4, [r3, #20]
 8001fea:	9406      	str	r4, [sp, #24]
 8001fec:	699c      	ldr	r4, [r3, #24]
 8001fee:	9406      	str	r4, [sp, #24]
 8001ff0:	9c06      	ldr	r4, [sp, #24]
 8001ff2:	e7de      	b.n	8001fb2 <HAL_I2C_EV_IRQHandler+0x1ae>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001ff4:	681c      	ldr	r4, [r3, #0]
 8001ff6:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8001ffa:	601c      	str	r4, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ffc:	2400      	movs	r4, #0
 8001ffe:	9407      	str	r4, [sp, #28]
 8002000:	695c      	ldr	r4, [r3, #20]
 8002002:	9407      	str	r4, [sp, #28]
 8002004:	699c      	ldr	r4, [r3, #24]
 8002006:	9407      	str	r4, [sp, #28]
 8002008:	9c07      	ldr	r4, [sp, #28]
 800200a:	e7b3      	b.n	8001f74 <HAL_I2C_EV_IRQHandler+0x170>
      else if(hi2c->XferCount == 2U)
 800200c:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 800200e:	b2a4      	uxth	r4, r4
 8002010:	2c02      	cmp	r4, #2
 8002012:	d11c      	bne.n	800204e <HAL_I2C_EV_IRQHandler+0x24a>
        if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8002014:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002016:	2c02      	cmp	r4, #2
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002018:	681c      	ldr	r4, [r3, #0]
 800201a:	bf1d      	ittte	ne
 800201c:	f424 6480 	bicne.w	r4, r4, #1024	; 0x400
 8002020:	601c      	strne	r4, [r3, #0]
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 8002022:	681c      	ldrne	r4, [r3, #0]
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002024:	f444 6480 	orreq.w	r4, r4, #1024	; 0x400
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 8002028:	bf18      	it	ne
 800202a:	f444 6400 	orrne.w	r4, r4, #2048	; 0x800
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800202e:	601c      	str	r4, [r3, #0]
        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002030:	685c      	ldr	r4, [r3, #4]
 8002032:	0527      	lsls	r7, r4, #20
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8002034:	bf42      	ittt	mi
 8002036:	685c      	ldrmi	r4, [r3, #4]
 8002038:	f444 5480 	orrmi.w	r4, r4, #4096	; 0x1000
 800203c:	605c      	strmi	r4, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800203e:	2400      	movs	r4, #0
 8002040:	9408      	str	r4, [sp, #32]
 8002042:	695c      	ldr	r4, [r3, #20]
 8002044:	9408      	str	r4, [sp, #32]
 8002046:	699c      	ldr	r4, [r3, #24]
 8002048:	9408      	str	r4, [sp, #32]
 800204a:	9c08      	ldr	r4, [sp, #32]
 800204c:	e7b1      	b.n	8001fb2 <HAL_I2C_EV_IRQHandler+0x1ae>
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800204e:	681c      	ldr	r4, [r3, #0]
 8002050:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8002054:	601c      	str	r4, [r3, #0]
        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002056:	685c      	ldr	r4, [r3, #4]
 8002058:	0526      	lsls	r6, r4, #20
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 800205a:	bf42      	ittt	mi
 800205c:	685c      	ldrmi	r4, [r3, #4]
 800205e:	f444 5480 	orrmi.w	r4, r4, #4096	; 0x1000
 8002062:	605c      	strmi	r4, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002064:	2400      	movs	r4, #0
 8002066:	9409      	str	r4, [sp, #36]	; 0x24
 8002068:	695c      	ldr	r4, [r3, #20]
 800206a:	9409      	str	r4, [sp, #36]	; 0x24
 800206c:	699c      	ldr	r4, [r3, #24]
 800206e:	9409      	str	r4, [sp, #36]	; 0x24
 8002070:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8002072:	e79e      	b.n	8001fb2 <HAL_I2C_EV_IRQHandler+0x1ae>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002074:	2400      	movs	r4, #0
 8002076:	940a      	str	r4, [sp, #40]	; 0x28
 8002078:	695c      	ldr	r4, [r3, #20]
 800207a:	940a      	str	r4, [sp, #40]	; 0x28
 800207c:	699c      	ldr	r4, [r3, #24]
 800207e:	940a      	str	r4, [sp, #40]	; 0x28
 8002080:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002082:	e6dd      	b.n	8001e40 <HAL_I2C_EV_IRQHandler+0x3c>
  else if((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002084:	2a21      	cmp	r2, #33	; 0x21
 8002086:	d003      	beq.n	8002090 <HAL_I2C_EV_IRQHandler+0x28c>
 8002088:	2940      	cmp	r1, #64	; 0x40
 800208a:	d108      	bne.n	800209e <HAL_I2C_EV_IRQHandler+0x29a>
    ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800208c:	2a22      	cmp	r2, #34	; 0x22
 800208e:	d106      	bne.n	800209e <HAL_I2C_EV_IRQHandler+0x29a>
    if(hi2c->XferCount == 0U)
 8002090:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002092:	b292      	uxth	r2, r2
 8002094:	b982      	cbnz	r2, 80020b8 <HAL_I2C_EV_IRQHandler+0x2b4>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800209c:	605a      	str	r2, [r3, #4]
}
 800209e:	b00d      	add	sp, #52	; 0x34
 80020a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020a2:	bf00      	nop
 80020a4:	00100004 	.word	0x00100004
 80020a8:	00010004 	.word	0x00010004
 80020ac:	00010080 	.word	0x00010080
 80020b0:	00010008 	.word	0x00010008
 80020b4:	00010002 	.word	0x00010002
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80020b8:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 80020bc:	2a40      	cmp	r2, #64	; 0x40
 80020be:	d127      	bne.n	8002110 <HAL_I2C_EV_IRQHandler+0x30c>
        if(hi2c->EventCount == 0)
 80020c0:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80020c2:	b97a      	cbnz	r2, 80020e4 <HAL_I2C_EV_IRQHandler+0x2e0>
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80020c4:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80020c6:	2a01      	cmp	r2, #1
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80020c8:	6c82      	ldr	r2, [r0, #72]	; 0x48
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80020ca:	d105      	bne.n	80020d8 <HAL_I2C_EV_IRQHandler+0x2d4>
 80020cc:	b2d2      	uxtb	r2, r2
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80020ce:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2;
 80020d0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80020d2:	3302      	adds	r3, #2
            hi2c->EventCount++;
 80020d4:	6503      	str	r3, [r0, #80]	; 0x50
 80020d6:	e7e2      	b.n	800209e <HAL_I2C_EV_IRQHandler+0x29a>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80020d8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80020dc:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 80020de:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80020e0:	3301      	adds	r3, #1
 80020e2:	e7f7      	b.n	80020d4 <HAL_I2C_EV_IRQHandler+0x2d0>
        else if(hi2c->EventCount == 1)
 80020e4:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80020e6:	2a01      	cmp	r2, #1
 80020e8:	d102      	bne.n	80020f0 <HAL_I2C_EV_IRQHandler+0x2ec>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80020ea:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	e7f5      	b.n	80020dc <HAL_I2C_EV_IRQHandler+0x2d8>
        else if(hi2c->EventCount == 2)
 80020f0:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80020f2:	2a02      	cmp	r2, #2
 80020f4:	d1d3      	bne.n	800209e <HAL_I2C_EV_IRQHandler+0x29a>
          if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80020f6:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80020fa:	2a22      	cmp	r2, #34	; 0x22
 80020fc:	d104      	bne.n	8002108 <HAL_I2C_EV_IRQHandler+0x304>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	e7ca      	b.n	800209e <HAL_I2C_EV_IRQHandler+0x29a>
          else if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002108:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 800210c:	2a21      	cmp	r2, #33	; 0x21
 800210e:	d1c6      	bne.n	800209e <HAL_I2C_EV_IRQHandler+0x29a>
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002110:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002112:	1c51      	adds	r1, r2, #1
 8002114:	6241      	str	r1, [r0, #36]	; 0x24
 8002116:	7812      	ldrb	r2, [r2, #0]
 8002118:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 800211a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800211c:	3b01      	subs	r3, #1
 800211e:	b29b      	uxth	r3, r3
 8002120:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 8002122:	e7bc      	b.n	800209e <HAL_I2C_EV_IRQHandler+0x29a>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002124:	2c00      	cmp	r4, #0
 8002126:	d0ba      	beq.n	800209e <HAL_I2C_EV_IRQHandler+0x29a>
 8002128:	0594      	lsls	r4, r2, #22
 800212a:	d5b8      	bpl.n	800209e <HAL_I2C_EV_IRQHandler+0x29a>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800212c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800212e:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8002132:	2a21      	cmp	r2, #33	; 0x21
 8002134:	d1b3      	bne.n	800209e <HAL_I2C_EV_IRQHandler+0x29a>
    if(hi2c->XferCount != 0U)
 8002136:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002138:	b292      	uxth	r2, r2
 800213a:	2a00      	cmp	r2, #0
 800213c:	d1e8      	bne.n	8002110 <HAL_I2C_EV_IRQHandler+0x30c>
      if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800213e:	2904      	cmp	r1, #4
 8002140:	d00d      	beq.n	800215e <HAL_I2C_EV_IRQHandler+0x35a>
 8002142:	2908      	cmp	r1, #8
 8002144:	d00b      	beq.n	800215e <HAL_I2C_EV_IRQHandler+0x35a>
 8002146:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 800214a:	d008      	beq.n	800215e <HAL_I2C_EV_IRQHandler+0x35a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800214c:	6859      	ldr	r1, [r3, #4]
 800214e:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8002152:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002154:	2311      	movs	r3, #17
 8002156:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002158:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
 800215c:	e6a2      	b.n	8001ea4 <HAL_I2C_EV_IRQHandler+0xa0>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002164:	605a      	str	r2, [r3, #4]
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800216c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800216e:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8002170:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8002172:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002174:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8002178:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800217c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8002180:	2a40      	cmp	r2, #64	; 0x40
 8002182:	f47f ae92 	bne.w	8001eaa <HAL_I2C_EV_IRQHandler+0xa6>
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002186:	f7ff fda5 	bl	8001cd4 <HAL_I2C_MemTxCpltCallback>
 800218a:	e788      	b.n	800209e <HAL_I2C_EV_IRQHandler+0x29a>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 800218c:	4d90      	ldr	r5, [pc, #576]	; (80023d0 <HAL_I2C_EV_IRQHandler+0x5cc>)
 800218e:	400d      	ands	r5, r1
 8002190:	2d00      	cmp	r5, #0
 8002192:	d041      	beq.n	8002218 <HAL_I2C_EV_IRQHandler+0x414>
 8002194:	0551      	lsls	r1, r2, #21
 8002196:	d53f      	bpl.n	8002218 <HAL_I2C_EV_IRQHandler+0x414>
 8002198:	2c00      	cmp	r4, #0
 800219a:	d13d      	bne.n	8002218 <HAL_I2C_EV_IRQHandler+0x414>
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800219c:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80021a0:	2a22      	cmp	r2, #34	; 0x22
 80021a2:	f47f af7c 	bne.w	800209e <HAL_I2C_EV_IRQHandler+0x29a>
    tmp = hi2c->XferCount;
 80021a6:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80021a8:	b292      	uxth	r2, r2
    if(tmp > 3U)
 80021aa:	2a03      	cmp	r2, #3
 80021ac:	d913      	bls.n	80021d6 <HAL_I2C_EV_IRQHandler+0x3d2>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80021ae:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	1c51      	adds	r1, r2, #1
 80021b4:	6241      	str	r1, [r0, #36]	; 0x24
 80021b6:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 80021b8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80021ba:	3b01      	subs	r3, #1
 80021bc:	b29b      	uxth	r3, r3
 80021be:	8543      	strh	r3, [r0, #42]	; 0x2a
      if(hi2c->XferCount == 3)
 80021c0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	2b03      	cmp	r3, #3
 80021c6:	f47f af6a 	bne.w	800209e <HAL_I2C_EV_IRQHandler+0x29a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80021ca:	6802      	ldr	r2, [r0, #0]
 80021cc:	6853      	ldr	r3, [r2, #4]
 80021ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021d2:	6053      	str	r3, [r2, #4]
 80021d4:	e763      	b.n	800209e <HAL_I2C_EV_IRQHandler+0x29a>
    else if((tmp == 1U) || (tmp == 0U))
 80021d6:	2a01      	cmp	r2, #1
 80021d8:	f63f af61 	bhi.w	800209e <HAL_I2C_EV_IRQHandler+0x29a>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021e2:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80021ea:	605a      	str	r2, [r3, #4]
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80021ec:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	1c51      	adds	r1, r2, #1
 80021f2:	6241      	str	r1, [r0, #36]	; 0x24
 80021f4:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 80021f6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80021f8:	3b01      	subs	r3, #1
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 80021fe:	2320      	movs	r3, #32
 8002200:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->PreviousState = I2C_STATE_NONE;
 8002204:	6304      	str	r4, [r0, #48]	; 0x30
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8002206:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800220a:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 800220e:	2b40      	cmp	r3, #64	; 0x40
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8002210:	d158      	bne.n	80022c4 <HAL_I2C_EV_IRQHandler+0x4c0>
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002212:	f7ff fd60 	bl	8001cd6 <HAL_I2C_MemRxCpltCallback>
 8002216:	e742      	b.n	800209e <HAL_I2C_EV_IRQHandler+0x29a>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002218:	2c00      	cmp	r4, #0
 800221a:	f43f af40 	beq.w	800209e <HAL_I2C_EV_IRQHandler+0x29a>
 800221e:	0597      	lsls	r7, r2, #22
 8002220:	f57f af3d 	bpl.w	800209e <HAL_I2C_EV_IRQHandler+0x29a>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002224:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  if(hi2c->XferCount == 4U)
 8002226:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002228:	b292      	uxth	r2, r2
 800222a:	2a04      	cmp	r2, #4
 800222c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800222e:	d108      	bne.n	8002242 <HAL_I2C_EV_IRQHandler+0x43e>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002230:	6859      	ldr	r1, [r3, #4]
 8002232:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002236:	6059      	str	r1, [r3, #4]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002238:	1c51      	adds	r1, r2, #1
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	6241      	str	r1, [r0, #36]	; 0x24
 800223e:	7013      	strb	r3, [r2, #0]
 8002240:	e76b      	b.n	800211a <HAL_I2C_EV_IRQHandler+0x316>
  else if(hi2c->XferCount == 3U)
 8002242:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8002244:	b2a4      	uxth	r4, r4
 8002246:	2c03      	cmp	r4, #3
 8002248:	d108      	bne.n	800225c <HAL_I2C_EV_IRQHandler+0x458>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800224a:	6859      	ldr	r1, [r3, #4]
 800224c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002250:	6059      	str	r1, [r3, #4]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002252:	6819      	ldr	r1, [r3, #0]
 8002254:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002258:	6019      	str	r1, [r3, #0]
 800225a:	e7ed      	b.n	8002238 <HAL_I2C_EV_IRQHandler+0x434>
  else if(hi2c->XferCount == 2U)
 800225c:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 800225e:	b2a4      	uxth	r4, r4
 8002260:	2c02      	cmp	r4, #2
 8002262:	d1e9      	bne.n	8002238 <HAL_I2C_EV_IRQHandler+0x434>
    if((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME))
 8002264:	3901      	subs	r1, #1
 8002266:	2901      	cmp	r1, #1
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002268:	6819      	ldr	r1, [r3, #0]
 800226a:	bf9d      	ittte	ls
 800226c:	f421 6180 	bicls.w	r1, r1, #1024	; 0x400
 8002270:	6019      	strls	r1, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002272:	6819      	ldrls	r1, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002274:	f441 7100 	orrhi.w	r1, r1, #512	; 0x200
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002278:	bf98      	it	ls
 800227a:	f441 7180 	orrls.w	r1, r1, #256	; 0x100
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800227e:	6019      	str	r1, [r3, #0]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	1c51      	adds	r1, r2, #1
 8002284:	6241      	str	r1, [r0, #36]	; 0x24
 8002286:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 8002288:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800228a:	3b01      	subs	r3, #1
 800228c:	b29b      	uxth	r3, r3
 800228e:	8543      	strh	r3, [r0, #42]	; 0x2a
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002290:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002292:	1c5a      	adds	r2, r3, #1
 8002294:	6242      	str	r2, [r0, #36]	; 0x24
 8002296:	6802      	ldr	r2, [r0, #0]
 8002298:	6912      	ldr	r2, [r2, #16]
 800229a:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 800229c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800229e:	6802      	ldr	r2, [r0, #0]
    hi2c->XferCount--;
 80022a0:	3b01      	subs	r3, #1
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	8543      	strh	r3, [r0, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80022a6:	6853      	ldr	r3, [r2, #4]
 80022a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022ac:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80022ae:	2320      	movs	r3, #32
 80022b0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 80022b4:	2300      	movs	r3, #0
 80022b6:	6303      	str	r3, [r0, #48]	; 0x30
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80022b8:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022bc:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80022c0:	2a40      	cmp	r2, #64	; 0x40
 80022c2:	e7a5      	b.n	8002210 <HAL_I2C_EV_IRQHandler+0x40c>
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80022c4:	f7ff fd01 	bl	8001cca <HAL_I2C_MasterRxCpltCallback>
 80022c8:	e6e9      	b.n	800209e <HAL_I2C_EV_IRQHandler+0x29a>
    if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80022ca:	4c42      	ldr	r4, [pc, #264]	; (80023d4 <HAL_I2C_EV_IRQHandler+0x5d0>)
 80022cc:	400c      	ands	r4, r1
 80022ce:	b174      	cbz	r4, 80022ee <HAL_I2C_EV_IRQHandler+0x4ea>
 80022d0:	0596      	lsls	r6, r2, #22
 80022d2:	d50c      	bpl.n	80022ee <HAL_I2C_EV_IRQHandler+0x4ea>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 80022d4:	6999      	ldr	r1, [r3, #24]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 80022d6:	699b      	ldr	r3, [r3, #24]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 80022d8:	f081 0104 	eor.w	r1, r1, #4
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 80022dc:	061d      	lsls	r5, r3, #24
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80022de:	f3c1 0180 	ubfx	r1, r1, #2, #1
    SlaveAddrCode = hi2c->Init.OwnAddress1;
 80022e2:	bf54      	ite	pl
 80022e4:	8982      	ldrhpl	r2, [r0, #12]
    SlaveAddrCode = hi2c->Init.OwnAddress2;
 80022e6:	8b02      	ldrhmi	r2, [r0, #24]
  HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80022e8:	f7ff fcf2 	bl	8001cd0 <HAL_I2C_AddrCallback>
 80022ec:	e6d7      	b.n	800209e <HAL_I2C_EV_IRQHandler+0x29a>
    else if(((sr1itflags & I2C_FLAG_STOPF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80022ee:	4c3a      	ldr	r4, [pc, #232]	; (80023d8 <HAL_I2C_EV_IRQHandler+0x5d4>)
 80022f0:	400c      	ands	r4, r1
 80022f2:	2c00      	cmp	r4, #0
 80022f4:	d074      	beq.n	80023e0 <HAL_I2C_EV_IRQHandler+0x5dc>
 80022f6:	0594      	lsls	r4, r2, #22
 80022f8:	d572      	bpl.n	80023e0 <HAL_I2C_EV_IRQHandler+0x5dc>
  uint32_t CurrentState = hi2c->State;
 80022fa:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80022fe:	6859      	ldr	r1, [r3, #4]
 8002300:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8002304:	6059      	str	r1, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002306:	2100      	movs	r1, #0
 8002308:	910b      	str	r1, [sp, #44]	; 0x2c
 800230a:	6959      	ldr	r1, [r3, #20]
 800230c:	910b      	str	r1, [sp, #44]	; 0x2c
 800230e:	6819      	ldr	r1, [r3, #0]
 8002310:	f041 0101 	orr.w	r1, r1, #1
 8002314:	6019      	str	r1, [r3, #0]
 8002316:	990b      	ldr	r1, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002318:	6819      	ldr	r1, [r3, #0]
 800231a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800231e:	6019      	str	r1, [r3, #0]
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002320:	6859      	ldr	r1, [r3, #4]
 8002322:	0509      	lsls	r1, r1, #20
  uint32_t CurrentState = hi2c->State;
 8002324:	b2d2      	uxtb	r2, r2
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002326:	d50c      	bpl.n	8002342 <HAL_I2C_EV_IRQHandler+0x53e>
    if((hi2c->State == HAL_I2C_STATE_BUSY_RX) || (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002328:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 800232c:	2922      	cmp	r1, #34	; 0x22
 800232e:	d003      	beq.n	8002338 <HAL_I2C_EV_IRQHandler+0x534>
 8002330:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8002334:	292a      	cmp	r1, #42	; 0x2a
 8002336:	d129      	bne.n	800238c <HAL_I2C_EV_IRQHandler+0x588>
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8002338:	6b81      	ldr	r1, [r0, #56]	; 0x38
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800233a:	6809      	ldr	r1, [r1, #0]
 800233c:	6849      	ldr	r1, [r1, #4]
 800233e:	b289      	uxth	r1, r1
 8002340:	8541      	strh	r1, [r0, #42]	; 0x2a
  if(hi2c->XferCount != 0U)
 8002342:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8002344:	b289      	uxth	r1, r1
 8002346:	b1e1      	cbz	r1, 8002382 <HAL_I2C_EV_IRQHandler+0x57e>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002348:	6959      	ldr	r1, [r3, #20]
 800234a:	074f      	lsls	r7, r1, #29
 800234c:	d508      	bpl.n	8002360 <HAL_I2C_EV_IRQHandler+0x55c>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800234e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	1c4c      	adds	r4, r1, #1
 8002354:	6244      	str	r4, [r0, #36]	; 0x24
 8002356:	700b      	strb	r3, [r1, #0]
      hi2c->XferCount--;
 8002358:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800235a:	3b01      	subs	r3, #1
 800235c:	b29b      	uxth	r3, r3
 800235e:	8543      	strh	r3, [r0, #42]	; 0x2a
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002360:	6801      	ldr	r1, [r0, #0]
 8002362:	694b      	ldr	r3, [r1, #20]
 8002364:	065e      	lsls	r6, r3, #25
 8002366:	d508      	bpl.n	800237a <HAL_I2C_EV_IRQHandler+0x576>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002368:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800236a:	6909      	ldr	r1, [r1, #16]
 800236c:	1c5c      	adds	r4, r3, #1
 800236e:	6244      	str	r4, [r0, #36]	; 0x24
 8002370:	7019      	strb	r1, [r3, #0]
      hi2c->XferCount--;
 8002372:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002374:	3b01      	subs	r3, #1
 8002376:	b29b      	uxth	r3, r3
 8002378:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800237a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800237c:	f043 0304 	orr.w	r3, r3, #4
 8002380:	6403      	str	r3, [r0, #64]	; 0x40
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002382:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002384:	b123      	cbz	r3, 8002390 <HAL_I2C_EV_IRQHandler+0x58c>
    I2C_ITError(hi2c);
 8002386:	f7ff fca9 	bl	8001cdc <I2C_ITError>
 800238a:	e688      	b.n	800209e <HAL_I2C_EV_IRQHandler+0x29a>
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800238c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800238e:	e7d4      	b.n	800233a <HAL_I2C_EV_IRQHandler+0x536>
    if((CurrentState == HAL_I2C_STATE_LISTEN ) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN) || \
 8002390:	f1a2 0128 	sub.w	r1, r2, #40	; 0x28
 8002394:	2902      	cmp	r1, #2
 8002396:	d80a      	bhi.n	80023ae <HAL_I2C_EV_IRQHandler+0x5aa>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002398:	4a10      	ldr	r2, [pc, #64]	; (80023dc <HAL_I2C_EV_IRQHandler+0x5d8>)
 800239a:	62c2      	str	r2, [r0, #44]	; 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 800239c:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 800239e:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80023a0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80023a4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80023a8:	f7ff fc93 	bl	8001cd2 <HAL_I2C_ListenCpltCallback>
 80023ac:	e677      	b.n	800209e <HAL_I2C_EV_IRQHandler+0x29a>
      if((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80023ae:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80023b0:	2b22      	cmp	r3, #34	; 0x22
 80023b2:	d002      	beq.n	80023ba <HAL_I2C_EV_IRQHandler+0x5b6>
 80023b4:	2a22      	cmp	r2, #34	; 0x22
 80023b6:	f47f ae72 	bne.w	800209e <HAL_I2C_EV_IRQHandler+0x29a>
        hi2c->PreviousState = I2C_STATE_NONE;
 80023ba:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80023bc:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80023be:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80023c0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80023c8:	f7ff fc81 	bl	8001cce <HAL_I2C_SlaveRxCpltCallback>
 80023cc:	e667      	b.n	800209e <HAL_I2C_EV_IRQHandler+0x29a>
 80023ce:	bf00      	nop
 80023d0:	00010040 	.word	0x00010040
 80023d4:	00010002 	.word	0x00010002
 80023d8:	00010010 	.word	0x00010010
 80023dc:	ffff0000 	.word	0xffff0000
    else if((sr2itflags & I2C_FLAG_TRA) != RESET)
 80023e0:	4e39      	ldr	r6, [pc, #228]	; (80024c8 <HAL_I2C_EV_IRQHandler+0x6c4>)
 80023e2:	4c3a      	ldr	r4, [pc, #232]	; (80024cc <HAL_I2C_EV_IRQHandler+0x6c8>)
 80023e4:	402e      	ands	r6, r5
 80023e6:	400c      	ands	r4, r1
 80023e8:	2e00      	cmp	r6, #0
 80023ea:	d036      	beq.n	800245a <HAL_I2C_EV_IRQHandler+0x656>
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 80023ec:	4d38      	ldr	r5, [pc, #224]	; (80024d0 <HAL_I2C_EV_IRQHandler+0x6cc>)
 80023ee:	400d      	ands	r5, r1
 80023f0:	b33d      	cbz	r5, 8002442 <HAL_I2C_EV_IRQHandler+0x63e>
 80023f2:	0555      	lsls	r5, r2, #21
 80023f4:	d525      	bpl.n	8002442 <HAL_I2C_EV_IRQHandler+0x63e>
 80023f6:	bb24      	cbnz	r4, 8002442 <HAL_I2C_EV_IRQHandler+0x63e>
  uint32_t CurrentState = hi2c->State;
 80023f8:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
  if(hi2c->XferCount != 0U)
 80023fc:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80023fe:	b292      	uxth	r2, r2
  uint32_t CurrentState = hi2c->State;
 8002400:	b2c9      	uxtb	r1, r1
  if(hi2c->XferCount != 0U)
 8002402:	2a00      	cmp	r2, #0
 8002404:	f43f ae4b 	beq.w	800209e <HAL_I2C_EV_IRQHandler+0x29a>
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002408:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800240a:	1c54      	adds	r4, r2, #1
 800240c:	6244      	str	r4, [r0, #36]	; 0x24
 800240e:	7812      	ldrb	r2, [r2, #0]
 8002410:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 8002412:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002414:	3a01      	subs	r2, #1
 8002416:	b292      	uxth	r2, r2
 8002418:	8542      	strh	r2, [r0, #42]	; 0x2a
    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800241a:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800241c:	b292      	uxth	r2, r2
 800241e:	2a00      	cmp	r2, #0
 8002420:	f47f ae3d 	bne.w	800209e <HAL_I2C_EV_IRQHandler+0x29a>
 8002424:	2929      	cmp	r1, #41	; 0x29
 8002426:	f47f ae3a 	bne.w	800209e <HAL_I2C_EV_IRQHandler+0x29a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002430:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002432:	2321      	movs	r3, #33	; 0x21
 8002434:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002436:	2328      	movs	r3, #40	; 0x28
 8002438:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800243c:	f7ff fc46 	bl	8001ccc <HAL_I2C_SlaveTxCpltCallback>
 8002440:	e62d      	b.n	800209e <HAL_I2C_EV_IRQHandler+0x29a>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002442:	2c00      	cmp	r4, #0
 8002444:	f43f ae2b 	beq.w	800209e <HAL_I2C_EV_IRQHandler+0x29a>
 8002448:	0594      	lsls	r4, r2, #22
 800244a:	f57f ae28 	bpl.w	800209e <HAL_I2C_EV_IRQHandler+0x29a>
  if(hi2c->XferCount != 0U)
 800244e:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002450:	b292      	uxth	r2, r2
 8002452:	2a00      	cmp	r2, #0
 8002454:	f47f ae5c 	bne.w	8002110 <HAL_I2C_EV_IRQHandler+0x30c>
 8002458:	e621      	b.n	800209e <HAL_I2C_EV_IRQHandler+0x29a>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 800245a:	4d1e      	ldr	r5, [pc, #120]	; (80024d4 <HAL_I2C_EV_IRQHandler+0x6d0>)
 800245c:	400d      	ands	r5, r1
 800245e:	b335      	cbz	r5, 80024ae <HAL_I2C_EV_IRQHandler+0x6aa>
 8002460:	0551      	lsls	r1, r2, #21
 8002462:	d524      	bpl.n	80024ae <HAL_I2C_EV_IRQHandler+0x6aa>
 8002464:	bb1c      	cbnz	r4, 80024ae <HAL_I2C_EV_IRQHandler+0x6aa>
  uint32_t CurrentState = hi2c->State;
 8002466:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if(hi2c->XferCount != 0U)
 800246a:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 800246c:	b289      	uxth	r1, r1
  uint32_t CurrentState = hi2c->State;
 800246e:	b2d2      	uxtb	r2, r2
  if(hi2c->XferCount != 0U)
 8002470:	2900      	cmp	r1, #0
 8002472:	f43f ae14 	beq.w	800209e <HAL_I2C_EV_IRQHandler+0x29a>
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002476:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	1c4c      	adds	r4, r1, #1
 800247c:	6244      	str	r4, [r0, #36]	; 0x24
 800247e:	700b      	strb	r3, [r1, #0]
    hi2c->XferCount--;
 8002480:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002482:	3b01      	subs	r3, #1
 8002484:	b29b      	uxth	r3, r3
 8002486:	8543      	strh	r3, [r0, #42]	; 0x2a
    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002488:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800248a:	b29b      	uxth	r3, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	f47f ae06 	bne.w	800209e <HAL_I2C_EV_IRQHandler+0x29a>
 8002492:	2a2a      	cmp	r2, #42	; 0x2a
 8002494:	f47f ae03 	bne.w	800209e <HAL_I2C_EV_IRQHandler+0x29a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002498:	6802      	ldr	r2, [r0, #0]
 800249a:	6853      	ldr	r3, [r2, #4]
 800249c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80024a0:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80024a2:	2322      	movs	r3, #34	; 0x22
 80024a4:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80024a6:	2328      	movs	r3, #40	; 0x28
 80024a8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 80024ac:	e78c      	b.n	80023c8 <HAL_I2C_EV_IRQHandler+0x5c4>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80024ae:	2c00      	cmp	r4, #0
 80024b0:	f43f adf5 	beq.w	800209e <HAL_I2C_EV_IRQHandler+0x29a>
 80024b4:	0592      	lsls	r2, r2, #22
 80024b6:	f57f adf2 	bpl.w	800209e <HAL_I2C_EV_IRQHandler+0x29a>
  if(hi2c->XferCount != 0U)
 80024ba:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80024bc:	b292      	uxth	r2, r2
 80024be:	2a00      	cmp	r2, #0
 80024c0:	f43f aded 	beq.w	800209e <HAL_I2C_EV_IRQHandler+0x29a>
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80024c4:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80024c6:	e6b7      	b.n	8002238 <HAL_I2C_EV_IRQHandler+0x434>
 80024c8:	00100004 	.word	0x00100004
 80024cc:	00010004 	.word	0x00010004
 80024d0:	00010080 	.word	0x00010080
 80024d4:	00010040 	.word	0x00010040

080024d8 <HAL_I2C_ER_IRQHandler>:
{
 80024d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80024da:	6803      	ldr	r3, [r0, #0]
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 80024dc:	4a49      	ldr	r2, [pc, #292]	; (8002604 <HAL_I2C_ER_IRQHandler+0x12c>)
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80024de:	695e      	ldr	r6, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80024e0:	685d      	ldr	r5, [r3, #4]
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 80024e2:	4216      	tst	r6, r2
{
 80024e4:	4604      	mov	r4, r0
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 80024e6:	d008      	beq.n	80024fa <HAL_I2C_ER_IRQHandler+0x22>
 80024e8:	05e8      	lsls	r0, r5, #23
 80024ea:	d506      	bpl.n	80024fa <HAL_I2C_ER_IRQHandler+0x22>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80024ec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80024ee:	f042 0201 	orr.w	r2, r2, #1
 80024f2:	6422      	str	r2, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80024f4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80024f8:	615a      	str	r2, [r3, #20]
  if(((sr1itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 80024fa:	f416 3f81 	tst.w	r6, #66048	; 0x10200
 80024fe:	d008      	beq.n	8002512 <HAL_I2C_ER_IRQHandler+0x3a>
 8002500:	05e9      	lsls	r1, r5, #23
 8002502:	d506      	bpl.n	8002512 <HAL_I2C_ER_IRQHandler+0x3a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002504:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002506:	f042 0202 	orr.w	r2, r2, #2
 800250a:	6422      	str	r2, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800250c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002510:	615a      	str	r2, [r3, #20]
  if(((sr1itflags & I2C_FLAG_AF) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8002512:	f416 3f82 	tst.w	r6, #66560	; 0x10400
 8002516:	d036      	beq.n	8002586 <HAL_I2C_ER_IRQHandler+0xae>
 8002518:	05ea      	lsls	r2, r5, #23
 800251a:	d534      	bpl.n	8002586 <HAL_I2C_ER_IRQHandler+0xae>
    tmp1 = hi2c->Mode;
 800251c:	f894 703e 	ldrb.w	r7, [r4, #62]	; 0x3e
    tmp2 = hi2c->XferCount;
 8002520:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    tmp3 = hi2c->State;
 8002522:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    tmp4 = hi2c->PreviousState;
 8002526:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002528:	2f20      	cmp	r7, #32
    tmp2 = hi2c->XferCount;
 800252a:	b289      	uxth	r1, r1
    tmp3 = hi2c->State;
 800252c:	b2d2      	uxtb	r2, r2
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800252e:	d158      	bne.n	80025e2 <HAL_I2C_ER_IRQHandler+0x10a>
 8002530:	2900      	cmp	r1, #0
 8002532:	d156      	bne.n	80025e2 <HAL_I2C_ER_IRQHandler+0x10a>
 8002534:	f002 01f7 	and.w	r1, r2, #247	; 0xf7
 8002538:	2921      	cmp	r1, #33	; 0x21
 800253a:	d003      	beq.n	8002544 <HAL_I2C_ER_IRQHandler+0x6c>
      ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800253c:	2a28      	cmp	r2, #40	; 0x28
 800253e:	d150      	bne.n	80025e2 <HAL_I2C_ER_IRQHandler+0x10a>
      ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002540:	2821      	cmp	r0, #33	; 0x21
 8002542:	d14e      	bne.n	80025e2 <HAL_I2C_ER_IRQHandler+0x10a>
  uint32_t CurrentState       = hi2c->State;
 8002544:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002548:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if(((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800254a:	2904      	cmp	r1, #4
  uint32_t CurrentState       = hi2c->State;
 800254c:	b2d2      	uxtb	r2, r2
  if(((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800254e:	d001      	beq.n	8002554 <HAL_I2C_ER_IRQHandler+0x7c>
 8002550:	2908      	cmp	r1, #8
 8002552:	d12c      	bne.n	80025ae <HAL_I2C_ER_IRQHandler+0xd6>
 8002554:	2a28      	cmp	r2, #40	; 0x28
 8002556:	d12a      	bne.n	80025ae <HAL_I2C_ER_IRQHandler+0xd6>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002558:	4a2b      	ldr	r2, [pc, #172]	; (8002608 <HAL_I2C_ER_IRQHandler+0x130>)
 800255a:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002562:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002564:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002568:	615a      	str	r2, [r3, #20]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002570:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002572:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002574:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8002576:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8002578:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 800257a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800257e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8002582:	f7ff fba6 	bl	8001cd2 <HAL_I2C_ListenCpltCallback>
  if(((sr1itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8002586:	f416 3f84 	tst.w	r6, #67584	; 0x10800
 800258a:	d009      	beq.n	80025a0 <HAL_I2C_ER_IRQHandler+0xc8>
 800258c:	05eb      	lsls	r3, r5, #23
 800258e:	d507      	bpl.n	80025a0 <HAL_I2C_ER_IRQHandler+0xc8>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002590:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002592:	f043 0308 	orr.w	r3, r3, #8
 8002596:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002598:	6823      	ldr	r3, [r4, #0]
 800259a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800259e:	615a      	str	r2, [r3, #20]
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80025a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025a2:	b373      	cbz	r3, 8002602 <HAL_I2C_ER_IRQHandler+0x12a>
    I2C_ITError(hi2c);
 80025a4:	4620      	mov	r0, r4
}
 80025a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 80025aa:	f7ff bb97 	b.w	8001cdc <I2C_ITError>
  else if(CurrentState == HAL_I2C_STATE_BUSY_TX)
 80025ae:	2a21      	cmp	r2, #33	; 0x21
 80025b0:	d123      	bne.n	80025fa <HAL_I2C_ER_IRQHandler+0x122>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025b2:	4915      	ldr	r1, [pc, #84]	; (8002608 <HAL_I2C_ER_IRQHandler+0x130>)
 80025b4:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80025b6:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 80025b8:	2220      	movs	r2, #32
 80025ba:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025be:	2200      	movs	r2, #0
 80025c0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025ca:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025d0:	615a      	str	r2, [r3, #20]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025d8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80025da:	4620      	mov	r0, r4
 80025dc:	f7ff fb76 	bl	8001ccc <HAL_I2C_SlaveTxCpltCallback>
 80025e0:	e7d1      	b.n	8002586 <HAL_I2C_ER_IRQHandler+0xae>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025e2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80025e4:	f042 0204 	orr.w	r2, r2, #4
 80025e8:	6422      	str	r2, [r4, #64]	; 0x40
      if(hi2c->Mode == HAL_I2C_MODE_MASTER)
 80025ea:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80025ee:	2a10      	cmp	r2, #16
        SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
 80025f0:	bf02      	ittt	eq
 80025f2:	681a      	ldreq	r2, [r3, #0]
 80025f4:	f442 7200 	orreq.w	r2, r2, #512	; 0x200
 80025f8:	601a      	streq	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025fe:	615a      	str	r2, [r3, #20]
 8002600:	e7c1      	b.n	8002586 <HAL_I2C_ER_IRQHandler+0xae>
 8002602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002604:	00010100 	.word	0x00010100
 8002608:	ffff0000 	.word	0xffff0000

0800260c <I2C_DMAAbort>:
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
  I2C_HandleTypeDef* hi2c = ( I2C_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800260c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800260e:	b508      	push	{r3, lr}
  
  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002610:	6803      	ldr	r3, [r0, #0]

  hi2c->XferCount = 0U;

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002612:	6b41      	ldr	r1, [r0, #52]	; 0x34
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800261a:	601a      	str	r2, [r3, #0]
  hi2c->XferCount = 0U;
 800261c:	2200      	movs	r2, #0
 800261e:	8542      	strh	r2, [r0, #42]	; 0x2a
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002620:	650a      	str	r2, [r1, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 8002622:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8002624:	650a      	str	r2, [r1, #80]	; 0x50

  /* Check if come from abort from user */
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 8002626:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 800262a:	2960      	cmp	r1, #96	; 0x60
 800262c:	f04f 0120 	mov.w	r1, #32
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002630:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002634:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 8002638:	d107      	bne.n	800264a <I2C_DMAAbort+0x3e>
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800263a:	6402      	str	r2, [r0, #64]	; 0x40

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	f022 0201 	bic.w	r2, r2, #1
 8002642:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_AbortCpltCallback(hi2c);
 8002644:	f7ff fb49 	bl	8001cda <HAL_I2C_AbortCpltCallback>
 8002648:	bd08      	pop	{r3, pc}
  {
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	f022 0201 	bic.w	r2, r2, #1
 8002650:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_ErrorCallback(hi2c);
 8002652:	f7ff fb41 	bl	8001cd8 <HAL_I2C_ErrorCallback>
 8002656:	bd08      	pop	{r3, pc}

08002658 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002658:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800265c:	4604      	mov	r4, r0
 800265e:	b918      	cbnz	r0, 8002668 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8002660:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8002662:	b002      	add	sp, #8
 8002664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002668:	6803      	ldr	r3, [r0, #0]
 800266a:	07dd      	lsls	r5, r3, #31
 800266c:	d410      	bmi.n	8002690 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800266e:	6823      	ldr	r3, [r4, #0]
 8002670:	0798      	lsls	r0, r3, #30
 8002672:	d458      	bmi.n	8002726 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002674:	6823      	ldr	r3, [r4, #0]
 8002676:	071a      	lsls	r2, r3, #28
 8002678:	f100 809a 	bmi.w	80027b0 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800267c:	6823      	ldr	r3, [r4, #0]
 800267e:	075b      	lsls	r3, r3, #29
 8002680:	f100 80b8 	bmi.w	80027f4 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002684:	69a2      	ldr	r2, [r4, #24]
 8002686:	2a00      	cmp	r2, #0
 8002688:	f040 8119 	bne.w	80028be <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 800268c:	2000      	movs	r0, #0
 800268e:	e7e8      	b.n	8002662 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002690:	4ba6      	ldr	r3, [pc, #664]	; (800292c <HAL_RCC_OscConfig+0x2d4>)
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	f002 020c 	and.w	r2, r2, #12
 8002698:	2a04      	cmp	r2, #4
 800269a:	d007      	beq.n	80026ac <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800269c:	689a      	ldr	r2, [r3, #8]
 800269e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026a2:	2a08      	cmp	r2, #8
 80026a4:	d10a      	bne.n	80026bc <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	0259      	lsls	r1, r3, #9
 80026aa:	d507      	bpl.n	80026bc <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ac:	4b9f      	ldr	r3, [pc, #636]	; (800292c <HAL_RCC_OscConfig+0x2d4>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	039a      	lsls	r2, r3, #14
 80026b2:	d5dc      	bpl.n	800266e <HAL_RCC_OscConfig+0x16>
 80026b4:	6863      	ldr	r3, [r4, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1d9      	bne.n	800266e <HAL_RCC_OscConfig+0x16>
 80026ba:	e7d1      	b.n	8002660 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026bc:	6863      	ldr	r3, [r4, #4]
 80026be:	4d9b      	ldr	r5, [pc, #620]	; (800292c <HAL_RCC_OscConfig+0x2d4>)
 80026c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c4:	d111      	bne.n	80026ea <HAL_RCC_OscConfig+0x92>
 80026c6:	682b      	ldr	r3, [r5, #0]
 80026c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026cc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80026ce:	f7fe fda9 	bl	8001224 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d2:	4d96      	ldr	r5, [pc, #600]	; (800292c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80026d4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d6:	682b      	ldr	r3, [r5, #0]
 80026d8:	039b      	lsls	r3, r3, #14
 80026da:	d4c8      	bmi.n	800266e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026dc:	f7fe fda2 	bl	8001224 <HAL_GetTick>
 80026e0:	1b80      	subs	r0, r0, r6
 80026e2:	2864      	cmp	r0, #100	; 0x64
 80026e4:	d9f7      	bls.n	80026d6 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80026e6:	2003      	movs	r0, #3
 80026e8:	e7bb      	b.n	8002662 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026ee:	d104      	bne.n	80026fa <HAL_RCC_OscConfig+0xa2>
 80026f0:	682b      	ldr	r3, [r5, #0]
 80026f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026f6:	602b      	str	r3, [r5, #0]
 80026f8:	e7e5      	b.n	80026c6 <HAL_RCC_OscConfig+0x6e>
 80026fa:	682a      	ldr	r2, [r5, #0]
 80026fc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002700:	602a      	str	r2, [r5, #0]
 8002702:	682a      	ldr	r2, [r5, #0]
 8002704:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002708:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1df      	bne.n	80026ce <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800270e:	f7fe fd89 	bl	8001224 <HAL_GetTick>
 8002712:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002714:	682b      	ldr	r3, [r5, #0]
 8002716:	039f      	lsls	r7, r3, #14
 8002718:	d5a9      	bpl.n	800266e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800271a:	f7fe fd83 	bl	8001224 <HAL_GetTick>
 800271e:	1b80      	subs	r0, r0, r6
 8002720:	2864      	cmp	r0, #100	; 0x64
 8002722:	d9f7      	bls.n	8002714 <HAL_RCC_OscConfig+0xbc>
 8002724:	e7df      	b.n	80026e6 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002726:	4b81      	ldr	r3, [pc, #516]	; (800292c <HAL_RCC_OscConfig+0x2d4>)
 8002728:	689a      	ldr	r2, [r3, #8]
 800272a:	f012 0f0c 	tst.w	r2, #12
 800272e:	d007      	beq.n	8002740 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002736:	2a08      	cmp	r2, #8
 8002738:	d111      	bne.n	800275e <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	025e      	lsls	r6, r3, #9
 800273e:	d40e      	bmi.n	800275e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002740:	4b7a      	ldr	r3, [pc, #488]	; (800292c <HAL_RCC_OscConfig+0x2d4>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	0795      	lsls	r5, r2, #30
 8002746:	d502      	bpl.n	800274e <HAL_RCC_OscConfig+0xf6>
 8002748:	68e2      	ldr	r2, [r4, #12]
 800274a:	2a01      	cmp	r2, #1
 800274c:	d188      	bne.n	8002660 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	6921      	ldr	r1, [r4, #16]
 8002752:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002756:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800275a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800275c:	e78a      	b.n	8002674 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800275e:	68e2      	ldr	r2, [r4, #12]
 8002760:	4b73      	ldr	r3, [pc, #460]	; (8002930 <HAL_RCC_OscConfig+0x2d8>)
 8002762:	b1b2      	cbz	r2, 8002792 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8002764:	2201      	movs	r2, #1
 8002766:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002768:	f7fe fd5c 	bl	8001224 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800276c:	4d6f      	ldr	r5, [pc, #444]	; (800292c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800276e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002770:	682b      	ldr	r3, [r5, #0]
 8002772:	0798      	lsls	r0, r3, #30
 8002774:	d507      	bpl.n	8002786 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002776:	682b      	ldr	r3, [r5, #0]
 8002778:	6922      	ldr	r2, [r4, #16]
 800277a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800277e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002782:	602b      	str	r3, [r5, #0]
 8002784:	e776      	b.n	8002674 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002786:	f7fe fd4d 	bl	8001224 <HAL_GetTick>
 800278a:	1b80      	subs	r0, r0, r6
 800278c:	2802      	cmp	r0, #2
 800278e:	d9ef      	bls.n	8002770 <HAL_RCC_OscConfig+0x118>
 8002790:	e7a9      	b.n	80026e6 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8002792:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002794:	f7fe fd46 	bl	8001224 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002798:	4d64      	ldr	r5, [pc, #400]	; (800292c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800279a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800279c:	682b      	ldr	r3, [r5, #0]
 800279e:	0799      	lsls	r1, r3, #30
 80027a0:	f57f af68 	bpl.w	8002674 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027a4:	f7fe fd3e 	bl	8001224 <HAL_GetTick>
 80027a8:	1b80      	subs	r0, r0, r6
 80027aa:	2802      	cmp	r0, #2
 80027ac:	d9f6      	bls.n	800279c <HAL_RCC_OscConfig+0x144>
 80027ae:	e79a      	b.n	80026e6 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027b0:	6962      	ldr	r2, [r4, #20]
 80027b2:	4b60      	ldr	r3, [pc, #384]	; (8002934 <HAL_RCC_OscConfig+0x2dc>)
 80027b4:	b17a      	cbz	r2, 80027d6 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80027b6:	2201      	movs	r2, #1
 80027b8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80027ba:	f7fe fd33 	bl	8001224 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027be:	4d5b      	ldr	r5, [pc, #364]	; (800292c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80027c0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027c2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80027c4:	079f      	lsls	r7, r3, #30
 80027c6:	f53f af59 	bmi.w	800267c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ca:	f7fe fd2b 	bl	8001224 <HAL_GetTick>
 80027ce:	1b80      	subs	r0, r0, r6
 80027d0:	2802      	cmp	r0, #2
 80027d2:	d9f6      	bls.n	80027c2 <HAL_RCC_OscConfig+0x16a>
 80027d4:	e787      	b.n	80026e6 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80027d6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80027d8:	f7fe fd24 	bl	8001224 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027dc:	4d53      	ldr	r5, [pc, #332]	; (800292c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80027de:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027e0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80027e2:	0798      	lsls	r0, r3, #30
 80027e4:	f57f af4a 	bpl.w	800267c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027e8:	f7fe fd1c 	bl	8001224 <HAL_GetTick>
 80027ec:	1b80      	subs	r0, r0, r6
 80027ee:	2802      	cmp	r0, #2
 80027f0:	d9f6      	bls.n	80027e0 <HAL_RCC_OscConfig+0x188>
 80027f2:	e778      	b.n	80026e6 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027f4:	4b4d      	ldr	r3, [pc, #308]	; (800292c <HAL_RCC_OscConfig+0x2d4>)
 80027f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027f8:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80027fc:	d128      	bne.n	8002850 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80027fe:	9201      	str	r2, [sp, #4]
 8002800:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002802:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002806:	641a      	str	r2, [r3, #64]	; 0x40
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280e:	9301      	str	r3, [sp, #4]
 8002810:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002812:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002814:	4d48      	ldr	r5, [pc, #288]	; (8002938 <HAL_RCC_OscConfig+0x2e0>)
 8002816:	682b      	ldr	r3, [r5, #0]
 8002818:	05d9      	lsls	r1, r3, #23
 800281a:	d51b      	bpl.n	8002854 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800281c:	68a3      	ldr	r3, [r4, #8]
 800281e:	4d43      	ldr	r5, [pc, #268]	; (800292c <HAL_RCC_OscConfig+0x2d4>)
 8002820:	2b01      	cmp	r3, #1
 8002822:	d127      	bne.n	8002874 <HAL_RCC_OscConfig+0x21c>
 8002824:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002826:	f043 0301 	orr.w	r3, r3, #1
 800282a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800282c:	f7fe fcfa 	bl	8001224 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002830:	4d3e      	ldr	r5, [pc, #248]	; (800292c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002832:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002834:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002838:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800283a:	079b      	lsls	r3, r3, #30
 800283c:	d539      	bpl.n	80028b2 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 800283e:	2e00      	cmp	r6, #0
 8002840:	f43f af20 	beq.w	8002684 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002844:	4a39      	ldr	r2, [pc, #228]	; (800292c <HAL_RCC_OscConfig+0x2d4>)
 8002846:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002848:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800284c:	6413      	str	r3, [r2, #64]	; 0x40
 800284e:	e719      	b.n	8002684 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8002850:	2600      	movs	r6, #0
 8002852:	e7df      	b.n	8002814 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002854:	682b      	ldr	r3, [r5, #0]
 8002856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800285a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800285c:	f7fe fce2 	bl	8001224 <HAL_GetTick>
 8002860:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002862:	682b      	ldr	r3, [r5, #0]
 8002864:	05da      	lsls	r2, r3, #23
 8002866:	d4d9      	bmi.n	800281c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002868:	f7fe fcdc 	bl	8001224 <HAL_GetTick>
 800286c:	1bc0      	subs	r0, r0, r7
 800286e:	2802      	cmp	r0, #2
 8002870:	d9f7      	bls.n	8002862 <HAL_RCC_OscConfig+0x20a>
 8002872:	e738      	b.n	80026e6 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002874:	2b05      	cmp	r3, #5
 8002876:	d104      	bne.n	8002882 <HAL_RCC_OscConfig+0x22a>
 8002878:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800287a:	f043 0304 	orr.w	r3, r3, #4
 800287e:	672b      	str	r3, [r5, #112]	; 0x70
 8002880:	e7d0      	b.n	8002824 <HAL_RCC_OscConfig+0x1cc>
 8002882:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002884:	f022 0201 	bic.w	r2, r2, #1
 8002888:	672a      	str	r2, [r5, #112]	; 0x70
 800288a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800288c:	f022 0204 	bic.w	r2, r2, #4
 8002890:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1ca      	bne.n	800282c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8002896:	f7fe fcc5 	bl	8001224 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800289a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800289e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80028a2:	0798      	lsls	r0, r3, #30
 80028a4:	d5cb      	bpl.n	800283e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028a6:	f7fe fcbd 	bl	8001224 <HAL_GetTick>
 80028aa:	1bc0      	subs	r0, r0, r7
 80028ac:	4540      	cmp	r0, r8
 80028ae:	d9f7      	bls.n	80028a0 <HAL_RCC_OscConfig+0x248>
 80028b0:	e719      	b.n	80026e6 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028b2:	f7fe fcb7 	bl	8001224 <HAL_GetTick>
 80028b6:	1bc0      	subs	r0, r0, r7
 80028b8:	4540      	cmp	r0, r8
 80028ba:	d9bd      	bls.n	8002838 <HAL_RCC_OscConfig+0x1e0>
 80028bc:	e713      	b.n	80026e6 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028be:	4d1b      	ldr	r5, [pc, #108]	; (800292c <HAL_RCC_OscConfig+0x2d4>)
 80028c0:	68ab      	ldr	r3, [r5, #8]
 80028c2:	f003 030c 	and.w	r3, r3, #12
 80028c6:	2b08      	cmp	r3, #8
 80028c8:	f43f aeca 	beq.w	8002660 <HAL_RCC_OscConfig+0x8>
 80028cc:	4e1b      	ldr	r6, [pc, #108]	; (800293c <HAL_RCC_OscConfig+0x2e4>)
 80028ce:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028d0:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80028d2:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028d4:	d134      	bne.n	8002940 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 80028d6:	f7fe fca5 	bl	8001224 <HAL_GetTick>
 80028da:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028dc:	682b      	ldr	r3, [r5, #0]
 80028de:	0199      	lsls	r1, r3, #6
 80028e0:	d41e      	bmi.n	8002920 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028e2:	6a22      	ldr	r2, [r4, #32]
 80028e4:	69e3      	ldr	r3, [r4, #28]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80028ea:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80028ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80028f0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80028f4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f6:	4c0d      	ldr	r4, [pc, #52]	; (800292c <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028f8:	0852      	lsrs	r2, r2, #1
 80028fa:	3a01      	subs	r2, #1
 80028fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002900:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002902:	2301      	movs	r3, #1
 8002904:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002906:	f7fe fc8d 	bl	8001224 <HAL_GetTick>
 800290a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800290c:	6823      	ldr	r3, [r4, #0]
 800290e:	019a      	lsls	r2, r3, #6
 8002910:	f53f aebc 	bmi.w	800268c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002914:	f7fe fc86 	bl	8001224 <HAL_GetTick>
 8002918:	1b40      	subs	r0, r0, r5
 800291a:	2802      	cmp	r0, #2
 800291c:	d9f6      	bls.n	800290c <HAL_RCC_OscConfig+0x2b4>
 800291e:	e6e2      	b.n	80026e6 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002920:	f7fe fc80 	bl	8001224 <HAL_GetTick>
 8002924:	1bc0      	subs	r0, r0, r7
 8002926:	2802      	cmp	r0, #2
 8002928:	d9d8      	bls.n	80028dc <HAL_RCC_OscConfig+0x284>
 800292a:	e6dc      	b.n	80026e6 <HAL_RCC_OscConfig+0x8e>
 800292c:	40023800 	.word	0x40023800
 8002930:	42470000 	.word	0x42470000
 8002934:	42470e80 	.word	0x42470e80
 8002938:	40007000 	.word	0x40007000
 800293c:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8002940:	f7fe fc70 	bl	8001224 <HAL_GetTick>
 8002944:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002946:	682b      	ldr	r3, [r5, #0]
 8002948:	019b      	lsls	r3, r3, #6
 800294a:	f57f ae9f 	bpl.w	800268c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800294e:	f7fe fc69 	bl	8001224 <HAL_GetTick>
 8002952:	1b00      	subs	r0, r0, r4
 8002954:	2802      	cmp	r0, #2
 8002956:	d9f6      	bls.n	8002946 <HAL_RCC_OscConfig+0x2ee>
 8002958:	e6c5      	b.n	80026e6 <HAL_RCC_OscConfig+0x8e>
 800295a:	bf00      	nop

0800295c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800295c:	4913      	ldr	r1, [pc, #76]	; (80029ac <HAL_RCC_GetSysClockFreq+0x50>)
{
 800295e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002960:	688b      	ldr	r3, [r1, #8]
 8002962:	f003 030c 	and.w	r3, r3, #12
 8002966:	2b04      	cmp	r3, #4
 8002968:	d003      	beq.n	8002972 <HAL_RCC_GetSysClockFreq+0x16>
 800296a:	2b08      	cmp	r3, #8
 800296c:	d003      	beq.n	8002976 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800296e:	4810      	ldr	r0, [pc, #64]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002970:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8002972:	4810      	ldr	r0, [pc, #64]	; (80029b4 <HAL_RCC_GetSysClockFreq+0x58>)
 8002974:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002976:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002978:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800297a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800297c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002980:	bf14      	ite	ne
 8002982:	480c      	ldrne	r0, [pc, #48]	; (80029b4 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002984:	480a      	ldreq	r0, [pc, #40]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002986:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800298a:	bf18      	it	ne
 800298c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800298e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002992:	fba1 0100 	umull	r0, r1, r1, r0
 8002996:	f7fd fc73 	bl	8000280 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800299a:	4b04      	ldr	r3, [pc, #16]	; (80029ac <HAL_RCC_GetSysClockFreq+0x50>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80029a2:	3301      	adds	r3, #1
 80029a4:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80029a6:	fbb0 f0f3 	udiv	r0, r0, r3
 80029aa:	bd08      	pop	{r3, pc}
 80029ac:	40023800 	.word	0x40023800
 80029b0:	00f42400 	.word	0x00f42400
 80029b4:	007a1200 	.word	0x007a1200

080029b8 <HAL_RCC_ClockConfig>:
{
 80029b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029bc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80029be:	4604      	mov	r4, r0
 80029c0:	b910      	cbnz	r0, 80029c8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80029c2:	2001      	movs	r0, #1
 80029c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029c8:	4b44      	ldr	r3, [pc, #272]	; (8002adc <HAL_RCC_ClockConfig+0x124>)
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	f002 020f 	and.w	r2, r2, #15
 80029d0:	428a      	cmp	r2, r1
 80029d2:	d328      	bcc.n	8002a26 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d4:	6821      	ldr	r1, [r4, #0]
 80029d6:	078f      	lsls	r7, r1, #30
 80029d8:	d42d      	bmi.n	8002a36 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029da:	07c8      	lsls	r0, r1, #31
 80029dc:	d440      	bmi.n	8002a60 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029de:	4b3f      	ldr	r3, [pc, #252]	; (8002adc <HAL_RCC_ClockConfig+0x124>)
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	f002 020f 	and.w	r2, r2, #15
 80029e6:	4295      	cmp	r5, r2
 80029e8:	d366      	bcc.n	8002ab8 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ea:	6822      	ldr	r2, [r4, #0]
 80029ec:	0751      	lsls	r1, r2, #29
 80029ee:	d46c      	bmi.n	8002aca <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f0:	0713      	lsls	r3, r2, #28
 80029f2:	d507      	bpl.n	8002a04 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029f4:	4a3a      	ldr	r2, [pc, #232]	; (8002ae0 <HAL_RCC_ClockConfig+0x128>)
 80029f6:	6921      	ldr	r1, [r4, #16]
 80029f8:	6893      	ldr	r3, [r2, #8]
 80029fa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80029fe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002a02:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a04:	f7ff ffaa 	bl	800295c <HAL_RCC_GetSysClockFreq>
 8002a08:	4b35      	ldr	r3, [pc, #212]	; (8002ae0 <HAL_RCC_ClockConfig+0x128>)
 8002a0a:	4a36      	ldr	r2, [pc, #216]	; (8002ae4 <HAL_RCC_ClockConfig+0x12c>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002a12:	5cd3      	ldrb	r3, [r2, r3]
 8002a14:	40d8      	lsrs	r0, r3
 8002a16:	4b34      	ldr	r3, [pc, #208]	; (8002ae8 <HAL_RCC_ClockConfig+0x130>)
 8002a18:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002a1a:	2000      	movs	r0, #0
 8002a1c:	f7fe fbb8 	bl	8001190 <HAL_InitTick>
  return HAL_OK;
 8002a20:	2000      	movs	r0, #0
 8002a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a26:	b2ca      	uxtb	r2, r1
 8002a28:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 030f 	and.w	r3, r3, #15
 8002a30:	4299      	cmp	r1, r3
 8002a32:	d1c6      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xa>
 8002a34:	e7ce      	b.n	80029d4 <HAL_RCC_ClockConfig+0x1c>
 8002a36:	4b2a      	ldr	r3, [pc, #168]	; (8002ae0 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a38:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a3c:	bf1e      	ittt	ne
 8002a3e:	689a      	ldrne	r2, [r3, #8]
 8002a40:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8002a44:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a46:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a48:	bf42      	ittt	mi
 8002a4a:	689a      	ldrmi	r2, [r3, #8]
 8002a4c:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8002a50:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	68a0      	ldr	r0, [r4, #8]
 8002a56:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002a5a:	4302      	orrs	r2, r0
 8002a5c:	609a      	str	r2, [r3, #8]
 8002a5e:	e7bc      	b.n	80029da <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a60:	6862      	ldr	r2, [r4, #4]
 8002a62:	4b1f      	ldr	r3, [pc, #124]	; (8002ae0 <HAL_RCC_ClockConfig+0x128>)
 8002a64:	2a01      	cmp	r2, #1
 8002a66:	d11d      	bne.n	8002aa4 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a6e:	d0a8      	beq.n	80029c2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a70:	4e1b      	ldr	r6, [pc, #108]	; (8002ae0 <HAL_RCC_ClockConfig+0x128>)
 8002a72:	68b3      	ldr	r3, [r6, #8]
 8002a74:	f023 0303 	bic.w	r3, r3, #3
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002a7c:	f7fe fbd2 	bl	8001224 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a80:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002a84:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a86:	68b3      	ldr	r3, [r6, #8]
 8002a88:	6862      	ldr	r2, [r4, #4]
 8002a8a:	f003 030c 	and.w	r3, r3, #12
 8002a8e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002a92:	d0a4      	beq.n	80029de <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a94:	f7fe fbc6 	bl	8001224 <HAL_GetTick>
 8002a98:	1bc0      	subs	r0, r0, r7
 8002a9a:	4540      	cmp	r0, r8
 8002a9c:	d9f3      	bls.n	8002a86 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8002a9e:	2003      	movs	r0, #3
}
 8002aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aa4:	1e91      	subs	r1, r2, #2
 8002aa6:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aa8:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aaa:	d802      	bhi.n	8002ab2 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aac:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002ab0:	e7dd      	b.n	8002a6e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab2:	f013 0f02 	tst.w	r3, #2
 8002ab6:	e7da      	b.n	8002a6e <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab8:	b2ea      	uxtb	r2, r5
 8002aba:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 030f 	and.w	r3, r3, #15
 8002ac2:	429d      	cmp	r5, r3
 8002ac4:	f47f af7d 	bne.w	80029c2 <HAL_RCC_ClockConfig+0xa>
 8002ac8:	e78f      	b.n	80029ea <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aca:	4905      	ldr	r1, [pc, #20]	; (8002ae0 <HAL_RCC_ClockConfig+0x128>)
 8002acc:	68e0      	ldr	r0, [r4, #12]
 8002ace:	688b      	ldr	r3, [r1, #8]
 8002ad0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002ad4:	4303      	orrs	r3, r0
 8002ad6:	608b      	str	r3, [r1, #8]
 8002ad8:	e78a      	b.n	80029f0 <HAL_RCC_ClockConfig+0x38>
 8002ada:	bf00      	nop
 8002adc:	40023c00 	.word	0x40023c00
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	08005925 	.word	0x08005925
 8002ae8:	20000178 	.word	0x20000178

08002aec <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002aec:	4b04      	ldr	r3, [pc, #16]	; (8002b00 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002aee:	4a05      	ldr	r2, [pc, #20]	; (8002b04 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002af6:	5cd3      	ldrb	r3, [r2, r3]
 8002af8:	4a03      	ldr	r2, [pc, #12]	; (8002b08 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002afa:	6810      	ldr	r0, [r2, #0]
}
 8002afc:	40d8      	lsrs	r0, r3
 8002afe:	4770      	bx	lr
 8002b00:	40023800 	.word	0x40023800
 8002b04:	08005935 	.word	0x08005935
 8002b08:	20000178 	.word	0x20000178

08002b0c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b0c:	4b04      	ldr	r3, [pc, #16]	; (8002b20 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002b0e:	4a05      	ldr	r2, [pc, #20]	; (8002b24 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002b16:	5cd3      	ldrb	r3, [r2, r3]
 8002b18:	4a03      	ldr	r2, [pc, #12]	; (8002b28 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002b1a:	6810      	ldr	r0, [r2, #0]
}
 8002b1c:	40d8      	lsrs	r0, r3
 8002b1e:	4770      	bx	lr
 8002b20:	40023800 	.word	0x40023800
 8002b24:	08005935 	.word	0x08005935
 8002b28:	20000178 	.word	0x20000178

08002b2c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b2c:	6a03      	ldr	r3, [r0, #32]
 8002b2e:	f023 0301 	bic.w	r3, r3, #1
 8002b32:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b34:	6a03      	ldr	r3, [r0, #32]
{
 8002b36:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002b38:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b3a:	6982      	ldr	r2, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b3c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b3e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002b42:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b44:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8002b46:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8002b4a:	432b      	orrs	r3, r5

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002b4c:	4d0a      	ldr	r5, [pc, #40]	; (8002b78 <TIM_OC1_SetConfig+0x4c>)
 8002b4e:	42a8      	cmp	r0, r5
 8002b50:	d10b      	bne.n	8002b6a <TIM_OC1_SetConfig+0x3e>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b52:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b54:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b56:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002b5a:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b5c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b5e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b62:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b64:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b68:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b6a:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b6c:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b6e:	684a      	ldr	r2, [r1, #4]
 8002b70:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002b72:	6203      	str	r3, [r0, #32]
 8002b74:	bd70      	pop	{r4, r5, r6, pc}
 8002b76:	bf00      	nop
 8002b78:	40010000 	.word	0x40010000

08002b7c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b7c:	6a03      	ldr	r3, [r0, #32]
 8002b7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b82:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b84:	6a03      	ldr	r3, [r0, #32]
{
 8002b86:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002b88:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b8a:	69c2      	ldr	r2, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b8c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8002b8e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002b92:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b94:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8002b96:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b9a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002b9e:	4d0b      	ldr	r5, [pc, #44]	; (8002bcc <TIM_OC3_SetConfig+0x50>)
 8002ba0:	42a8      	cmp	r0, r5
 8002ba2:	d10d      	bne.n	8002bc0 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ba4:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ba6:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ba8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002bac:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002bb0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002bb2:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002bb6:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8002bb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002bbc:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bc0:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bc2:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002bc4:	684a      	ldr	r2, [r1, #4]
 8002bc6:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bc8:	6203      	str	r3, [r0, #32]
 8002bca:	bd70      	pop	{r4, r5, r6, pc}
 8002bcc:	40010000 	.word	0x40010000

08002bd0 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002bd0:	6a03      	ldr	r3, [r0, #32]
 8002bd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bd6:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bd8:	6a03      	ldr	r3, [r0, #32]
{
 8002bda:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002bdc:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bde:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002be0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002be2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002be6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002bea:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002bec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002bf0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002bf4:	4d06      	ldr	r5, [pc, #24]	; (8002c10 <TIM_OC4_SetConfig+0x40>)
 8002bf6:	42a8      	cmp	r0, r5
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002bf8:	bf02      	ittt	eq
 8002bfa:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002bfc:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c00:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c04:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8002c06:	61c2      	str	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c08:	684a      	ldr	r2, [r1, #4]
 8002c0a:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c0c:	6203      	str	r3, [r0, #32]
 8002c0e:	bd30      	pop	{r4, r5, pc}
 8002c10:	40010000 	.word	0x40010000

08002c14 <HAL_TIM_PWM_MspInit>:
 8002c14:	4770      	bx	lr

08002c16 <HAL_TIM_PWM_MspDeInit>:
 8002c16:	4770      	bx	lr

08002c18 <HAL_TIM_PWM_DeInit>:
  htim->State = HAL_TIM_STATE_BUSY;
 8002c18:	2302      	movs	r3, #2
{
 8002c1a:	b510      	push	{r4, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 8002c1c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_TIM_DISABLE(htim);
 8002c20:	6803      	ldr	r3, [r0, #0]
 8002c22:	6a19      	ldr	r1, [r3, #32]
 8002c24:	f241 1211 	movw	r2, #4369	; 0x1111
 8002c28:	4211      	tst	r1, r2
{
 8002c2a:	4604      	mov	r4, r0
  __HAL_TIM_DISABLE(htim);
 8002c2c:	d108      	bne.n	8002c40 <HAL_TIM_PWM_DeInit+0x28>
 8002c2e:	6a19      	ldr	r1, [r3, #32]
 8002c30:	f240 4244 	movw	r2, #1092	; 0x444
 8002c34:	4211      	tst	r1, r2
 8002c36:	bf02      	ittt	eq
 8002c38:	681a      	ldreq	r2, [r3, #0]
 8002c3a:	f022 0201 	biceq.w	r2, r2, #1
 8002c3e:	601a      	streq	r2, [r3, #0]
  HAL_TIM_PWM_MspDeInit(htim);
 8002c40:	4620      	mov	r0, r4
 8002c42:	f7ff ffe8 	bl	8002c16 <HAL_TIM_PWM_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET; 
 8002c46:	2000      	movs	r0, #0
 8002c48:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8002c4c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8002c50:	bd10      	pop	{r4, pc}

08002c52 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002c52:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002c56:	2b01      	cmp	r3, #1
{
 8002c58:	b570      	push	{r4, r5, r6, lr}
 8002c5a:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8002c5e:	d01c      	beq.n	8002c9a <HAL_TIM_ConfigClockSource+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8002c60:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 8002c64:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8002c66:	2201      	movs	r2, #1
 8002c68:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 8002c6c:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c6e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002c72:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002c76:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8002c78:	680a      	ldr	r2, [r1, #0]
 8002c7a:	2a40      	cmp	r2, #64	; 0x40
 8002c7c:	d079      	beq.n	8002d72 <HAL_TIM_ConfigClockSource+0x120>
 8002c7e:	d819      	bhi.n	8002cb4 <HAL_TIM_ConfigClockSource+0x62>
 8002c80:	2a10      	cmp	r2, #16
 8002c82:	f000 8093 	beq.w	8002dac <HAL_TIM_ConfigClockSource+0x15a>
 8002c86:	d80a      	bhi.n	8002c9e <HAL_TIM_ConfigClockSource+0x4c>
 8002c88:	2a00      	cmp	r2, #0
 8002c8a:	f000 8089 	beq.w	8002da0 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8002c94:	2300      	movs	r3, #0
 8002c96:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8002c9a:	4618      	mov	r0, r3
}
 8002c9c:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002c9e:	2a20      	cmp	r2, #32
 8002ca0:	f000 808a 	beq.w	8002db8 <HAL_TIM_ConfigClockSource+0x166>
 8002ca4:	2a30      	cmp	r2, #48	; 0x30
 8002ca6:	d1f2      	bne.n	8002c8e <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002ca8:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002caa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002cae:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8002cb2:	e036      	b.n	8002d22 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8002cb4:	2a70      	cmp	r2, #112	; 0x70
 8002cb6:	d036      	beq.n	8002d26 <HAL_TIM_ConfigClockSource+0xd4>
 8002cb8:	d81b      	bhi.n	8002cf2 <HAL_TIM_ConfigClockSource+0xa0>
 8002cba:	2a50      	cmp	r2, #80	; 0x50
 8002cbc:	d042      	beq.n	8002d44 <HAL_TIM_ConfigClockSource+0xf2>
 8002cbe:	2a60      	cmp	r2, #96	; 0x60
 8002cc0:	d1e5      	bne.n	8002c8e <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cc2:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8002cc4:	684d      	ldr	r5, [r1, #4]
 8002cc6:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cc8:	f024 0410 	bic.w	r4, r4, #16
 8002ccc:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cce:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8002cd0:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cd2:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cd6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cda:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cde:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002ce2:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ce4:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002ce6:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002ce8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002cec:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8002cf0:	e017      	b.n	8002d22 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8002cf2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002cf6:	d011      	beq.n	8002d1c <HAL_TIM_ConfigClockSource+0xca>
 8002cf8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002cfc:	d1c7      	bne.n	8002c8e <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002cfe:	688a      	ldr	r2, [r1, #8]
 8002d00:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002d02:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002d04:	68c9      	ldr	r1, [r1, #12]
 8002d06:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d08:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002d0c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002d10:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d12:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d14:	689a      	ldr	r2, [r3, #8]
 8002d16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d1a:	e002      	b.n	8002d22 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8002d22:	609a      	str	r2, [r3, #8]
 8002d24:	e7b3      	b.n	8002c8e <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002d26:	688a      	ldr	r2, [r1, #8]
 8002d28:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002d2a:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002d2c:	68c9      	ldr	r1, [r1, #12]
 8002d2e:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d30:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002d34:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002d38:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8002d3a:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002d3c:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d3e:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8002d42:	e7ee      	b.n	8002d22 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002d44:	684c      	ldr	r4, [r1, #4]
 8002d46:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002d48:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d4a:	6a1d      	ldr	r5, [r3, #32]
 8002d4c:	f025 0501 	bic.w	r5, r5, #1
 8002d50:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002d52:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d54:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d58:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d5c:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002d60:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8002d62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d64:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002d66:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002d68:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002d6c:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8002d70:	e7d7      	b.n	8002d22 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002d72:	684c      	ldr	r4, [r1, #4]
 8002d74:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002d76:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d78:	6a1d      	ldr	r5, [r3, #32]
 8002d7a:	f025 0501 	bic.w	r5, r5, #1
 8002d7e:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002d80:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d82:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d86:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d8a:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002d8e:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8002d90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d92:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002d94:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002d96:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002d9a:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8002d9e:	e7c0      	b.n	8002d22 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002da0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002da2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002da6:	f042 0207 	orr.w	r2, r2, #7
 8002daa:	e7ba      	b.n	8002d22 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002dac:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002dae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002db2:	f042 0217 	orr.w	r2, r2, #23
 8002db6:	e7b4      	b.n	8002d22 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002db8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002dba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002dbe:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8002dc2:	e7ae      	b.n	8002d22 <HAL_TIM_ConfigClockSource+0xd0>

08002dc4 <HAL_TIM_PeriodElapsedCallback>:
 8002dc4:	4770      	bx	lr

08002dc6 <HAL_TIM_OC_DelayElapsedCallback>:
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_TIM_IC_CaptureCallback>:
 8002dc8:	4770      	bx	lr

08002dca <HAL_TIM_PWM_PulseFinishedCallback>:
 8002dca:	4770      	bx	lr

08002dcc <HAL_TIM_TriggerCallback>:
 8002dcc:	4770      	bx	lr

08002dce <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002dce:	6803      	ldr	r3, [r0, #0]
 8002dd0:	691a      	ldr	r2, [r3, #16]
 8002dd2:	0791      	lsls	r1, r2, #30
{
 8002dd4:	b510      	push	{r4, lr}
 8002dd6:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002dd8:	d50e      	bpl.n	8002df8 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002dda:	68da      	ldr	r2, [r3, #12]
 8002ddc:	0792      	lsls	r2, r2, #30
 8002dde:	d50b      	bpl.n	8002df8 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002de0:	f06f 0202 	mvn.w	r2, #2
 8002de4:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002de6:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002de8:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dea:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dec:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dee:	d077      	beq.n	8002ee0 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8002df0:	f7ff ffea 	bl	8002dc8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002df4:	2300      	movs	r3, #0
 8002df6:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002df8:	6823      	ldr	r3, [r4, #0]
 8002dfa:	691a      	ldr	r2, [r3, #16]
 8002dfc:	0750      	lsls	r0, r2, #29
 8002dfe:	d510      	bpl.n	8002e22 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	0751      	lsls	r1, r2, #29
 8002e04:	d50d      	bpl.n	8002e22 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e06:	f06f 0204 	mvn.w	r2, #4
 8002e0a:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e0c:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e0e:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e10:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e14:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8002e16:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e18:	d068      	beq.n	8002eec <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002e1a:	f7ff ffd5 	bl	8002dc8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e22:	6823      	ldr	r3, [r4, #0]
 8002e24:	691a      	ldr	r2, [r3, #16]
 8002e26:	0712      	lsls	r2, r2, #28
 8002e28:	d50f      	bpl.n	8002e4a <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002e2a:	68da      	ldr	r2, [r3, #12]
 8002e2c:	0710      	lsls	r0, r2, #28
 8002e2e:	d50c      	bpl.n	8002e4a <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e30:	f06f 0208 	mvn.w	r2, #8
 8002e34:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e36:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e38:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e3a:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e3c:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8002e3e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e40:	d05a      	beq.n	8002ef8 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002e42:	f7ff ffc1 	bl	8002dc8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e46:	2300      	movs	r3, #0
 8002e48:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e4a:	6823      	ldr	r3, [r4, #0]
 8002e4c:	691a      	ldr	r2, [r3, #16]
 8002e4e:	06d2      	lsls	r2, r2, #27
 8002e50:	d510      	bpl.n	8002e74 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002e52:	68da      	ldr	r2, [r3, #12]
 8002e54:	06d0      	lsls	r0, r2, #27
 8002e56:	d50d      	bpl.n	8002e74 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e58:	f06f 0210 	mvn.w	r2, #16
 8002e5c:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e5e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e60:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e62:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e66:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8002e68:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e6a:	d04b      	beq.n	8002f04 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8002e6c:	f7ff ffac 	bl	8002dc8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e70:	2300      	movs	r3, #0
 8002e72:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e74:	6823      	ldr	r3, [r4, #0]
 8002e76:	691a      	ldr	r2, [r3, #16]
 8002e78:	07d1      	lsls	r1, r2, #31
 8002e7a:	d508      	bpl.n	8002e8e <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002e7c:	68da      	ldr	r2, [r3, #12]
 8002e7e:	07d2      	lsls	r2, r2, #31
 8002e80:	d505      	bpl.n	8002e8e <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e82:	f06f 0201 	mvn.w	r2, #1
 8002e86:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e88:	4620      	mov	r0, r4
 8002e8a:	f7ff ff9b 	bl	8002dc4 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e8e:	6823      	ldr	r3, [r4, #0]
 8002e90:	691a      	ldr	r2, [r3, #16]
 8002e92:	0610      	lsls	r0, r2, #24
 8002e94:	d508      	bpl.n	8002ea8 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002e96:	68da      	ldr	r2, [r3, #12]
 8002e98:	0611      	lsls	r1, r2, #24
 8002e9a:	d505      	bpl.n	8002ea8 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ea0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002ea2:	4620      	mov	r0, r4
 8002ea4:	f000 f9b7 	bl	8003216 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ea8:	6823      	ldr	r3, [r4, #0]
 8002eaa:	691a      	ldr	r2, [r3, #16]
 8002eac:	0652      	lsls	r2, r2, #25
 8002eae:	d508      	bpl.n	8002ec2 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002eb0:	68da      	ldr	r2, [r3, #12]
 8002eb2:	0650      	lsls	r0, r2, #25
 8002eb4:	d505      	bpl.n	8002ec2 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002eb6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002eba:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002ebc:	4620      	mov	r0, r4
 8002ebe:	f7ff ff85 	bl	8002dcc <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ec2:	6823      	ldr	r3, [r4, #0]
 8002ec4:	691a      	ldr	r2, [r3, #16]
 8002ec6:	0691      	lsls	r1, r2, #26
 8002ec8:	d522      	bpl.n	8002f10 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002eca:	68da      	ldr	r2, [r3, #12]
 8002ecc:	0692      	lsls	r2, r2, #26
 8002ece:	d51f      	bpl.n	8002f10 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ed0:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002ed4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ed6:	611a      	str	r2, [r3, #16]
}
 8002ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8002edc:	f000 b99a 	b.w	8003214 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ee0:	f7ff ff71 	bl	8002dc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee4:	4620      	mov	r0, r4
 8002ee6:	f7ff ff70 	bl	8002dca <HAL_TIM_PWM_PulseFinishedCallback>
 8002eea:	e783      	b.n	8002df4 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eec:	f7ff ff6b 	bl	8002dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef0:	4620      	mov	r0, r4
 8002ef2:	f7ff ff6a 	bl	8002dca <HAL_TIM_PWM_PulseFinishedCallback>
 8002ef6:	e792      	b.n	8002e1e <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef8:	f7ff ff65 	bl	8002dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8002efc:	4620      	mov	r0, r4
 8002efe:	f7ff ff64 	bl	8002dca <HAL_TIM_PWM_PulseFinishedCallback>
 8002f02:	e7a0      	b.n	8002e46 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f04:	f7ff ff5f 	bl	8002dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f08:	4620      	mov	r0, r4
 8002f0a:	f7ff ff5e 	bl	8002dca <HAL_TIM_PWM_PulseFinishedCallback>
 8002f0e:	e7af      	b.n	8002e70 <HAL_TIM_IRQHandler+0xa2>
 8002f10:	bd10      	pop	{r4, pc}
	...

08002f14 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002f14:	4a22      	ldr	r2, [pc, #136]	; (8002fa0 <TIM_Base_SetConfig+0x8c>)
  tmpcr1 = TIMx->CR1;
 8002f16:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002f18:	4290      	cmp	r0, r2
 8002f1a:	d00e      	beq.n	8002f3a <TIM_Base_SetConfig+0x26>
 8002f1c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002f20:	d00b      	beq.n	8002f3a <TIM_Base_SetConfig+0x26>
 8002f22:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002f26:	4290      	cmp	r0, r2
 8002f28:	d007      	beq.n	8002f3a <TIM_Base_SetConfig+0x26>
 8002f2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f2e:	4290      	cmp	r0, r2
 8002f30:	d003      	beq.n	8002f3a <TIM_Base_SetConfig+0x26>
 8002f32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f36:	4290      	cmp	r0, r2
 8002f38:	d119      	bne.n	8002f6e <TIM_Base_SetConfig+0x5a>
    tmpcr1 |= Structure->CounterMode;
 8002f3a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002f40:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002f42:	4a17      	ldr	r2, [pc, #92]	; (8002fa0 <TIM_Base_SetConfig+0x8c>)
 8002f44:	4290      	cmp	r0, r2
 8002f46:	d104      	bne.n	8002f52 <TIM_Base_SetConfig+0x3e>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f48:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	e018      	b.n	8002f84 <TIM_Base_SetConfig+0x70>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002f52:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002f56:	d0f7      	beq.n	8002f48 <TIM_Base_SetConfig+0x34>
 8002f58:	4a12      	ldr	r2, [pc, #72]	; (8002fa4 <TIM_Base_SetConfig+0x90>)
 8002f5a:	4290      	cmp	r0, r2
 8002f5c:	d0f4      	beq.n	8002f48 <TIM_Base_SetConfig+0x34>
 8002f5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f62:	4290      	cmp	r0, r2
 8002f64:	d0f0      	beq.n	8002f48 <TIM_Base_SetConfig+0x34>
 8002f66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f6a:	4290      	cmp	r0, r2
 8002f6c:	d0ec      	beq.n	8002f48 <TIM_Base_SetConfig+0x34>
 8002f6e:	4a0e      	ldr	r2, [pc, #56]	; (8002fa8 <TIM_Base_SetConfig+0x94>)
 8002f70:	4290      	cmp	r0, r2
 8002f72:	d0e9      	beq.n	8002f48 <TIM_Base_SetConfig+0x34>
 8002f74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f78:	4290      	cmp	r0, r2
 8002f7a:	d0e5      	beq.n	8002f48 <TIM_Base_SetConfig+0x34>
 8002f7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f80:	4290      	cmp	r0, r2
 8002f82:	d0e1      	beq.n	8002f48 <TIM_Base_SetConfig+0x34>
  TIMx->CR1 = tmpcr1;
 8002f84:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f86:	688b      	ldr	r3, [r1, #8]
 8002f88:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002f8a:	680b      	ldr	r3, [r1, #0]
 8002f8c:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002f8e:	4b04      	ldr	r3, [pc, #16]	; (8002fa0 <TIM_Base_SetConfig+0x8c>)
 8002f90:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8002f92:	bf04      	itt	eq
 8002f94:	690b      	ldreq	r3, [r1, #16]
 8002f96:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	6143      	str	r3, [r0, #20]
}
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	40010000 	.word	0x40010000
 8002fa4:	40000400 	.word	0x40000400
 8002fa8:	40014000 	.word	0x40014000

08002fac <HAL_TIM_Base_Init>:
{ 
 8002fac:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002fae:	4604      	mov	r4, r0
 8002fb0:	b1a0      	cbz	r0, 8002fdc <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002fb2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002fb6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002fba:	b91b      	cbnz	r3, 8002fc4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002fbc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8002fc0:	f001 f87a 	bl	80040b8 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002fca:	6820      	ldr	r0, [r4, #0]
 8002fcc:	1d21      	adds	r1, r4, #4
 8002fce:	f7ff ffa1 	bl	8002f14 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8002fd8:	2000      	movs	r0, #0
 8002fda:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002fdc:	2001      	movs	r0, #1
}
 8002fde:	bd10      	pop	{r4, pc}

08002fe0 <HAL_TIM_PWM_Init>:
{
 8002fe0:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002fe2:	4604      	mov	r4, r0
 8002fe4:	b1a0      	cbz	r0, 8003010 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002fe6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002fea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002fee:	b91b      	cbnz	r3, 8002ff8 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002ff0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8002ff4:	f7ff fe0e 	bl	8002c14 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002ffe:	6820      	ldr	r0, [r4, #0]
 8003000:	1d21      	adds	r1, r4, #4
 8003002:	f7ff ff87 	bl	8002f14 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8003006:	2301      	movs	r3, #1
 8003008:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 800300c:	2000      	movs	r0, #0
 800300e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003010:	2001      	movs	r0, #1
}  
 8003012:	bd10      	pop	{r4, pc}

08003014 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003014:	6a03      	ldr	r3, [r0, #32]
 8003016:	f023 0310 	bic.w	r3, r3, #16
 800301a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800301c:	6a03      	ldr	r3, [r0, #32]
{
 800301e:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 = TIMx->CR2;
 8003020:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003022:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003024:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003026:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800302a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800302e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8003030:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003034:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003038:	4d0b      	ldr	r5, [pc, #44]	; (8003068 <TIM_OC2_SetConfig+0x54>)
 800303a:	42a8      	cmp	r0, r5
 800303c:	d10d      	bne.n	800305a <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800303e:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003040:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8003042:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003046:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800304a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800304c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003050:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8003052:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003056:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800305a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800305c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800305e:	684a      	ldr	r2, [r1, #4]
 8003060:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003062:	6203      	str	r3, [r0, #32]
 8003064:	bd70      	pop	{r4, r5, r6, pc}
 8003066:	bf00      	nop
 8003068:	40010000 	.word	0x40010000

0800306c <HAL_TIM_PWM_ConfigChannel>:
{
 800306c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800306e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003072:	2b01      	cmp	r3, #1
{
 8003074:	4604      	mov	r4, r0
 8003076:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800307a:	d025      	beq.n	80030c8 <HAL_TIM_PWM_ConfigChannel+0x5c>
 800307c:	2301      	movs	r3, #1
 800307e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8003082:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 8003086:	2a0c      	cmp	r2, #12
 8003088:	d818      	bhi.n	80030bc <HAL_TIM_PWM_ConfigChannel+0x50>
 800308a:	e8df f002 	tbb	[pc, r2]
 800308e:	1707      	.short	0x1707
 8003090:	171e1717 	.word	0x171e1717
 8003094:	172f1717 	.word	0x172f1717
 8003098:	1717      	.short	0x1717
 800309a:	40          	.byte	0x40
 800309b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800309c:	6820      	ldr	r0, [r4, #0]
 800309e:	f7ff fd45 	bl	8002b2c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030a2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030a4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030a6:	699a      	ldr	r2, [r3, #24]
 80030a8:	f042 0208 	orr.w	r2, r2, #8
 80030ac:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030ae:	699a      	ldr	r2, [r3, #24]
 80030b0:	f022 0204 	bic.w	r2, r2, #4
 80030b4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030b6:	699a      	ldr	r2, [r3, #24]
 80030b8:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030ba:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80030bc:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80030be:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80030c0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 80030c4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 80030c8:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030ca:	6820      	ldr	r0, [r4, #0]
 80030cc:	f7ff ffa2 	bl	8003014 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030d0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030d2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030d4:	699a      	ldr	r2, [r3, #24]
 80030d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030dc:	699a      	ldr	r2, [r3, #24]
 80030de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030e4:	699a      	ldr	r2, [r3, #24]
 80030e6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80030ea:	e7e6      	b.n	80030ba <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030ec:	6820      	ldr	r0, [r4, #0]
 80030ee:	f7ff fd45 	bl	8002b7c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030f2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80030f4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030f6:	69da      	ldr	r2, [r3, #28]
 80030f8:	f042 0208 	orr.w	r2, r2, #8
 80030fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030fe:	69da      	ldr	r2, [r3, #28]
 8003100:	f022 0204 	bic.w	r2, r2, #4
 8003104:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8003106:	69da      	ldr	r2, [r3, #28]
 8003108:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800310a:	61da      	str	r2, [r3, #28]
    break;
 800310c:	e7d6      	b.n	80030bc <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800310e:	6820      	ldr	r0, [r4, #0]
 8003110:	f7ff fd5e 	bl	8002bd0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003114:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8003116:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003118:	69da      	ldr	r2, [r3, #28]
 800311a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800311e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003120:	69da      	ldr	r2, [r3, #28]
 8003122:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003126:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8003128:	69da      	ldr	r2, [r3, #28]
 800312a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800312e:	e7ec      	b.n	800310a <HAL_TIM_PWM_ConfigChannel+0x9e>

08003130 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 8003130:	6a03      	ldr	r3, [r0, #32]
{
 8003132:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8003134:	2401      	movs	r4, #1
 8003136:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8003138:	ea23 0304 	bic.w	r3, r3, r4
 800313c:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800313e:	6a03      	ldr	r3, [r0, #32]
 8003140:	408a      	lsls	r2, r1
 8003142:	431a      	orrs	r2, r3
 8003144:	6202      	str	r2, [r0, #32]
 8003146:	bd10      	pop	{r4, pc}

08003148 <HAL_TIM_PWM_Start>:
{
 8003148:	b510      	push	{r4, lr}
 800314a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800314c:	2201      	movs	r2, #1
 800314e:	6800      	ldr	r0, [r0, #0]
 8003150:	f7ff ffee 	bl	8003130 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8003154:	6823      	ldr	r3, [r4, #0]
 8003156:	4a06      	ldr	r2, [pc, #24]	; (8003170 <HAL_TIM_PWM_Start+0x28>)
 8003158:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 800315a:	bf02      	ittt	eq
 800315c:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 800315e:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8003162:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	f042 0201 	orr.w	r2, r2, #1
 800316a:	601a      	str	r2, [r3, #0]
} 
 800316c:	2000      	movs	r0, #0
 800316e:	bd10      	pop	{r4, pc}
 8003170:	40010000 	.word	0x40010000

08003174 <HAL_TIM_PWM_Stop>:
{ 
 8003174:	b510      	push	{r4, lr}
 8003176:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003178:	2200      	movs	r2, #0
 800317a:	6800      	ldr	r0, [r0, #0]
 800317c:	f7ff ffd8 	bl	8003130 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8003180:	6823      	ldr	r3, [r4, #0]
 8003182:	4a12      	ldr	r2, [pc, #72]	; (80031cc <HAL_TIM_PWM_Stop+0x58>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d10d      	bne.n	80031a4 <HAL_TIM_PWM_Stop+0x30>
    __HAL_TIM_MOE_DISABLE(htim);
 8003188:	6a19      	ldr	r1, [r3, #32]
 800318a:	f241 1211 	movw	r2, #4369	; 0x1111
 800318e:	4211      	tst	r1, r2
 8003190:	d108      	bne.n	80031a4 <HAL_TIM_PWM_Stop+0x30>
 8003192:	6a19      	ldr	r1, [r3, #32]
 8003194:	f240 4244 	movw	r2, #1092	; 0x444
 8003198:	4211      	tst	r1, r2
 800319a:	bf02      	ittt	eq
 800319c:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 800319e:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 80031a2:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 80031a4:	6a19      	ldr	r1, [r3, #32]
 80031a6:	f241 1211 	movw	r2, #4369	; 0x1111
 80031aa:	4211      	tst	r1, r2
 80031ac:	d108      	bne.n	80031c0 <HAL_TIM_PWM_Stop+0x4c>
 80031ae:	6a19      	ldr	r1, [r3, #32]
 80031b0:	f240 4244 	movw	r2, #1092	; 0x444
 80031b4:	4211      	tst	r1, r2
 80031b6:	bf02      	ittt	eq
 80031b8:	681a      	ldreq	r2, [r3, #0]
 80031ba:	f022 0201 	biceq.w	r2, r2, #1
 80031be:	601a      	streq	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80031c0:	2301      	movs	r3, #1
 80031c2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
} 
 80031c6:	2000      	movs	r0, #0
 80031c8:	bd10      	pop	{r4, pc}
 80031ca:	bf00      	nop
 80031cc:	40010000 	.word	0x40010000

080031d0 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 80031d0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80031d4:	2b01      	cmp	r3, #1
{
 80031d6:	b510      	push	{r4, lr}
 80031d8:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80031dc:	d018      	beq.n	8003210 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 80031de:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80031e2:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80031e4:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80031e6:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80031e8:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80031ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80031ee:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	4322      	orrs	r2, r4
 80031f4:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031fc:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	430a      	orrs	r2, r1
 8003202:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8003204:	2301      	movs	r3, #1
 8003206:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 800320a:	2300      	movs	r3, #0
 800320c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8003210:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 8003212:	bd10      	pop	{r4, pc}

08003214 <HAL_TIMEx_CommutationCallback>:
 8003214:	4770      	bx	lr

08003216 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003216:	4770      	bx	lr

08003218 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003218:	6803      	ldr	r3, [r0, #0]
 800321a:	68da      	ldr	r2, [r3, #12]
 800321c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003220:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003222:	695a      	ldr	r2, [r3, #20]
 8003224:	f022 0201 	bic.w	r2, r2, #1
 8003228:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800322a:	2320      	movs	r3, #32
 800322c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8003230:	4770      	bx	lr
	...

08003234 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8003238:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800323a:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 800323c:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800323e:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8003240:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8003244:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8003246:	6133      	str	r3, [r6, #16]
{
 8003248:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800324a:	6883      	ldr	r3, [r0, #8]
 800324c:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 800324e:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003250:	4303      	orrs	r3, r0
 8003252:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8003254:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003258:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800325a:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800325e:	430b      	orrs	r3, r1
 8003260:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8003262:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8003264:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8003266:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8003268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 800326c:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800326e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8003272:	6173      	str	r3, [r6, #20]
 8003274:	4b7a      	ldr	r3, [pc, #488]	; (8003460 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003276:	d17c      	bne.n	8003372 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003278:	429e      	cmp	r6, r3
 800327a:	d003      	beq.n	8003284 <UART_SetConfig+0x50>
 800327c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003280:	429e      	cmp	r6, r3
 8003282:	d144      	bne.n	800330e <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003284:	f7ff fc42 	bl	8002b0c <HAL_RCC_GetPCLK2Freq>
 8003288:	2519      	movs	r5, #25
 800328a:	fb05 f300 	mul.w	r3, r5, r0
 800328e:	6860      	ldr	r0, [r4, #4]
 8003290:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003294:	0040      	lsls	r0, r0, #1
 8003296:	fbb3 f3f0 	udiv	r3, r3, r0
 800329a:	fbb3 f3f9 	udiv	r3, r3, r9
 800329e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80032a2:	f7ff fc33 	bl	8002b0c <HAL_RCC_GetPCLK2Freq>
 80032a6:	6863      	ldr	r3, [r4, #4]
 80032a8:	4368      	muls	r0, r5
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	fbb0 f7f3 	udiv	r7, r0, r3
 80032b0:	f7ff fc2c 	bl	8002b0c <HAL_RCC_GetPCLK2Freq>
 80032b4:	6863      	ldr	r3, [r4, #4]
 80032b6:	4368      	muls	r0, r5
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80032be:	fbb3 f3f9 	udiv	r3, r3, r9
 80032c2:	fb09 7313 	mls	r3, r9, r3, r7
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	3332      	adds	r3, #50	; 0x32
 80032ca:	fbb3 f3f9 	udiv	r3, r3, r9
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80032d4:	f7ff fc1a 	bl	8002b0c <HAL_RCC_GetPCLK2Freq>
 80032d8:	6862      	ldr	r2, [r4, #4]
 80032da:	4368      	muls	r0, r5
 80032dc:	0052      	lsls	r2, r2, #1
 80032de:	fbb0 faf2 	udiv	sl, r0, r2
 80032e2:	f7ff fc13 	bl	8002b0c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80032e6:	6863      	ldr	r3, [r4, #4]
 80032e8:	4368      	muls	r0, r5
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80032f0:	fbb3 f3f9 	udiv	r3, r3, r9
 80032f4:	fb09 a313 	mls	r3, r9, r3, sl
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	3332      	adds	r3, #50	; 0x32
 80032fc:	fbb3 f3f9 	udiv	r3, r3, r9
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003306:	443b      	add	r3, r7
 8003308:	60b3      	str	r3, [r6, #8]
 800330a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800330e:	f7ff fbed 	bl	8002aec <HAL_RCC_GetPCLK1Freq>
 8003312:	2519      	movs	r5, #25
 8003314:	fb05 f300 	mul.w	r3, r5, r0
 8003318:	6860      	ldr	r0, [r4, #4]
 800331a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800331e:	0040      	lsls	r0, r0, #1
 8003320:	fbb3 f3f0 	udiv	r3, r3, r0
 8003324:	fbb3 f3f9 	udiv	r3, r3, r9
 8003328:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800332c:	f7ff fbde 	bl	8002aec <HAL_RCC_GetPCLK1Freq>
 8003330:	6863      	ldr	r3, [r4, #4]
 8003332:	4368      	muls	r0, r5
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	fbb0 f7f3 	udiv	r7, r0, r3
 800333a:	f7ff fbd7 	bl	8002aec <HAL_RCC_GetPCLK1Freq>
 800333e:	6863      	ldr	r3, [r4, #4]
 8003340:	4368      	muls	r0, r5
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	fbb0 f3f3 	udiv	r3, r0, r3
 8003348:	fbb3 f3f9 	udiv	r3, r3, r9
 800334c:	fb09 7313 	mls	r3, r9, r3, r7
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	3332      	adds	r3, #50	; 0x32
 8003354:	fbb3 f3f9 	udiv	r3, r3, r9
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800335e:	f7ff fbc5 	bl	8002aec <HAL_RCC_GetPCLK1Freq>
 8003362:	6862      	ldr	r2, [r4, #4]
 8003364:	4368      	muls	r0, r5
 8003366:	0052      	lsls	r2, r2, #1
 8003368:	fbb0 faf2 	udiv	sl, r0, r2
 800336c:	f7ff fbbe 	bl	8002aec <HAL_RCC_GetPCLK1Freq>
 8003370:	e7b9      	b.n	80032e6 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003372:	429e      	cmp	r6, r3
 8003374:	d002      	beq.n	800337c <UART_SetConfig+0x148>
 8003376:	4b3b      	ldr	r3, [pc, #236]	; (8003464 <UART_SetConfig+0x230>)
 8003378:	429e      	cmp	r6, r3
 800337a:	d140      	bne.n	80033fe <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800337c:	f7ff fbc6 	bl	8002b0c <HAL_RCC_GetPCLK2Freq>
 8003380:	6867      	ldr	r7, [r4, #4]
 8003382:	2519      	movs	r5, #25
 8003384:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003388:	fb05 f300 	mul.w	r3, r5, r0
 800338c:	00bf      	lsls	r7, r7, #2
 800338e:	fbb3 f3f7 	udiv	r3, r3, r7
 8003392:	fbb3 f3f9 	udiv	r3, r3, r9
 8003396:	011f      	lsls	r7, r3, #4
 8003398:	f7ff fbb8 	bl	8002b0c <HAL_RCC_GetPCLK2Freq>
 800339c:	6863      	ldr	r3, [r4, #4]
 800339e:	4368      	muls	r0, r5
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	fbb0 f8f3 	udiv	r8, r0, r3
 80033a6:	f7ff fbb1 	bl	8002b0c <HAL_RCC_GetPCLK2Freq>
 80033aa:	6863      	ldr	r3, [r4, #4]
 80033ac:	4368      	muls	r0, r5
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80033b4:	fbb3 f3f9 	udiv	r3, r3, r9
 80033b8:	fb09 8313 	mls	r3, r9, r3, r8
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	3332      	adds	r3, #50	; 0x32
 80033c0:	fbb3 f3f9 	udiv	r3, r3, r9
 80033c4:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80033c8:	f7ff fba0 	bl	8002b0c <HAL_RCC_GetPCLK2Freq>
 80033cc:	6862      	ldr	r2, [r4, #4]
 80033ce:	4368      	muls	r0, r5
 80033d0:	0092      	lsls	r2, r2, #2
 80033d2:	fbb0 faf2 	udiv	sl, r0, r2
 80033d6:	f7ff fb99 	bl	8002b0c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80033da:	6863      	ldr	r3, [r4, #4]
 80033dc:	4368      	muls	r0, r5
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80033e4:	fbb3 f3f9 	udiv	r3, r3, r9
 80033e8:	fb09 a313 	mls	r3, r9, r3, sl
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	3332      	adds	r3, #50	; 0x32
 80033f0:	fbb3 f3f9 	udiv	r3, r3, r9
 80033f4:	f003 030f 	and.w	r3, r3, #15
 80033f8:	ea43 0308 	orr.w	r3, r3, r8
 80033fc:	e783      	b.n	8003306 <UART_SetConfig+0xd2>
 80033fe:	f7ff fb75 	bl	8002aec <HAL_RCC_GetPCLK1Freq>
 8003402:	6867      	ldr	r7, [r4, #4]
 8003404:	2519      	movs	r5, #25
 8003406:	f04f 0964 	mov.w	r9, #100	; 0x64
 800340a:	fb05 f300 	mul.w	r3, r5, r0
 800340e:	00bf      	lsls	r7, r7, #2
 8003410:	fbb3 f3f7 	udiv	r3, r3, r7
 8003414:	fbb3 f3f9 	udiv	r3, r3, r9
 8003418:	011f      	lsls	r7, r3, #4
 800341a:	f7ff fb67 	bl	8002aec <HAL_RCC_GetPCLK1Freq>
 800341e:	6863      	ldr	r3, [r4, #4]
 8003420:	4368      	muls	r0, r5
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	fbb0 f8f3 	udiv	r8, r0, r3
 8003428:	f7ff fb60 	bl	8002aec <HAL_RCC_GetPCLK1Freq>
 800342c:	6863      	ldr	r3, [r4, #4]
 800342e:	4368      	muls	r0, r5
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	fbb0 f3f3 	udiv	r3, r0, r3
 8003436:	fbb3 f3f9 	udiv	r3, r3, r9
 800343a:	fb09 8313 	mls	r3, r9, r3, r8
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	3332      	adds	r3, #50	; 0x32
 8003442:	fbb3 f3f9 	udiv	r3, r3, r9
 8003446:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800344a:	f7ff fb4f 	bl	8002aec <HAL_RCC_GetPCLK1Freq>
 800344e:	6862      	ldr	r2, [r4, #4]
 8003450:	4368      	muls	r0, r5
 8003452:	0092      	lsls	r2, r2, #2
 8003454:	fbb0 faf2 	udiv	sl, r0, r2
 8003458:	f7ff fb48 	bl	8002aec <HAL_RCC_GetPCLK1Freq>
 800345c:	e7bd      	b.n	80033da <UART_SetConfig+0x1a6>
 800345e:	bf00      	nop
 8003460:	40011000 	.word	0x40011000
 8003464:	40011400 	.word	0x40011400

08003468 <HAL_MultiProcessor_Init>:
{
 8003468:	b570      	push	{r4, r5, r6, lr}
 800346a:	460d      	mov	r5, r1
 800346c:	4616      	mov	r6, r2
  if(huart == NULL)
 800346e:	4604      	mov	r4, r0
 8003470:	2800      	cmp	r0, #0
 8003472:	d036      	beq.n	80034e2 <HAL_MultiProcessor_Init+0x7a>
  if(huart->gState == HAL_UART_STATE_RESET)
 8003474:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003478:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800347c:	b91b      	cbnz	r3, 8003486 <HAL_MultiProcessor_Init+0x1e>
    huart->Lock = HAL_UNLOCKED;
 800347e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003482:	f000 ff73 	bl	800436c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003486:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003488:	2324      	movs	r3, #36	; 0x24
 800348a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800348e:	68d3      	ldr	r3, [r2, #12]
 8003490:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003494:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003496:	4620      	mov	r0, r4
 8003498:	f7ff fecc 	bl	8003234 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800349c:	6823      	ldr	r3, [r4, #0]
 800349e:	691a      	ldr	r2, [r3, #16]
 80034a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034a6:	695a      	ldr	r2, [r3, #20]
 80034a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034ac:	615a      	str	r2, [r3, #20]
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 80034ae:	691a      	ldr	r2, [r3, #16]
 80034b0:	f022 020f 	bic.w	r2, r2, #15
 80034b4:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, Address);
 80034b6:	691a      	ldr	r2, [r3, #16]
 80034b8:	4315      	orrs	r5, r2
 80034ba:	611d      	str	r5, [r3, #16]
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 80034bc:	68da      	ldr	r2, [r3, #12]
 80034be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034c2:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	4332      	orrs	r2, r6
 80034c8:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE(huart);
 80034ca:	68da      	ldr	r2, [r3, #12]
 80034cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034d0:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d2:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80034d4:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d6:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80034d8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80034dc:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80034e0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80034e2:	2001      	movs	r0, #1
}
 80034e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080034e8 <HAL_UART_Transmit_DMA>:
{
 80034e8:	b538      	push	{r3, r4, r5, lr}
 80034ea:	4604      	mov	r4, r0
 80034ec:	4613      	mov	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80034ee:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80034f2:	2a20      	cmp	r2, #32
 80034f4:	d12a      	bne.n	800354c <HAL_UART_Transmit_DMA+0x64>
    if((pData == NULL ) || (Size == 0))
 80034f6:	b339      	cbz	r1, 8003548 <HAL_UART_Transmit_DMA+0x60>
 80034f8:	b333      	cbz	r3, 8003548 <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 80034fa:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80034fe:	2a01      	cmp	r2, #1
 8003500:	d024      	beq.n	800354c <HAL_UART_Transmit_DMA+0x64>
 8003502:	2201      	movs	r2, #1
 8003504:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003508:	6b20      	ldr	r0, [r4, #48]	; 0x30
    huart->TxXferCount = Size;
 800350a:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800350c:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800350e:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003510:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003512:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003516:	4a0e      	ldr	r2, [pc, #56]	; (8003550 <HAL_UART_Transmit_DMA+0x68>)
    huart->TxXferSize = Size;
 8003518:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->pTxBuffPtr = pData;
 800351a:	6221      	str	r1, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800351c:	63c2      	str	r2, [r0, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800351e:	4a0d      	ldr	r2, [pc, #52]	; (8003554 <HAL_UART_Transmit_DMA+0x6c>)
 8003520:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003522:	4a0d      	ldr	r2, [pc, #52]	; (8003558 <HAL_UART_Transmit_DMA+0x70>)
 8003524:	64c2      	str	r2, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003526:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferAbortCallback = NULL;
 8003528:	6505      	str	r5, [r0, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 800352a:	3204      	adds	r2, #4
 800352c:	f7fe f972 	bl	8001814 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003530:	6823      	ldr	r3, [r4, #0]
 8003532:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003536:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003538:	695a      	ldr	r2, [r3, #20]
    __HAL_UNLOCK(huart);
 800353a:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800353e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003542:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 8003544:	4628      	mov	r0, r5
 8003546:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8003548:	2001      	movs	r0, #1
 800354a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 800354c:	2002      	movs	r0, #2
}
 800354e:	bd38      	pop	{r3, r4, r5, pc}
 8003550:	080035ed 	.word	0x080035ed
 8003554:	0800361b 	.word	0x0800361b
 8003558:	080036df 	.word	0x080036df

0800355c <HAL_UART_Receive_DMA>:
{  
 800355c:	4613      	mov	r3, r2
  if(huart->RxState == HAL_UART_STATE_READY) 
 800355e:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 8003562:	2a20      	cmp	r2, #32
{  
 8003564:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003566:	4605      	mov	r5, r0
  if(huart->RxState == HAL_UART_STATE_READY) 
 8003568:	d138      	bne.n	80035dc <HAL_UART_Receive_DMA+0x80>
    if((pData == NULL ) || (Size == 0)) 
 800356a:	2900      	cmp	r1, #0
 800356c:	d034      	beq.n	80035d8 <HAL_UART_Receive_DMA+0x7c>
 800356e:	2b00      	cmp	r3, #0
 8003570:	d032      	beq.n	80035d8 <HAL_UART_Receive_DMA+0x7c>
    __HAL_LOCK(huart);
 8003572:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8003576:	2a01      	cmp	r2, #1
 8003578:	d030      	beq.n	80035dc <HAL_UART_Receive_DMA+0x80>
 800357a:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800357c:	2400      	movs	r4, #0
    __HAL_LOCK(huart);
 800357e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003582:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003584:	63c4      	str	r4, [r0, #60]	; 0x3c
    huart->pRxBuffPtr = pData;
 8003586:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8003588:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800358a:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800358e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8003590:	4a13      	ldr	r2, [pc, #76]	; (80035e0 <HAL_UART_Receive_DMA+0x84>)
 8003592:	63c2      	str	r2, [r0, #60]	; 0x3c
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8003594:	682e      	ldr	r6, [r5, #0]
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003596:	4a13      	ldr	r2, [pc, #76]	; (80035e4 <HAL_UART_Receive_DMA+0x88>)
 8003598:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800359a:	4a13      	ldr	r2, [pc, #76]	; (80035e8 <HAL_UART_Receive_DMA+0x8c>)
 800359c:	64c2      	str	r2, [r0, #76]	; 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 800359e:	6504      	str	r4, [r0, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 80035a0:	460a      	mov	r2, r1
 80035a2:	1d31      	adds	r1, r6, #4
 80035a4:	f7fe f936 	bl	8001814 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 80035a8:	682b      	ldr	r3, [r5, #0]
 80035aa:	9401      	str	r4, [sp, #4]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	9201      	str	r2, [sp, #4]
 80035b0:	685a      	ldr	r2, [r3, #4]
 80035b2:	9201      	str	r2, [sp, #4]
 80035b4:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035b6:	68da      	ldr	r2, [r3, #12]
    __HAL_UNLOCK(huart);
 80035b8:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035c0:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035c2:	695a      	ldr	r2, [r3, #20]
 80035c4:	f042 0201 	orr.w	r2, r2, #1
 80035c8:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035ca:	695a      	ldr	r2, [r3, #20]
 80035cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035d0:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 80035d2:	4620      	mov	r0, r4
}
 80035d4:	b002      	add	sp, #8
 80035d6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80035d8:	2001      	movs	r0, #1
 80035da:	e7fb      	b.n	80035d4 <HAL_UART_Receive_DMA+0x78>
    return HAL_BUSY; 
 80035dc:	2002      	movs	r0, #2
 80035de:	e7f9      	b.n	80035d4 <HAL_UART_Receive_DMA+0x78>
 80035e0:	08003625 	.word	0x08003625
 80035e4:	080036d3 	.word	0x080036d3
 80035e8:	080036df 	.word	0x080036df

080035ec <UART_DMATransmitCplt>:
{
 80035ec:	b508      	push	{r3, lr}
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80035ee:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80035f0:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80035f8:	d10a      	bne.n	8003610 <UART_DMATransmitCplt+0x24>
    huart->TxXferCount = 0U;
 80035fa:	84d3      	strh	r3, [r2, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80035fc:	6813      	ldr	r3, [r2, #0]
 80035fe:	695a      	ldr	r2, [r3, #20]
 8003600:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003604:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003606:	68da      	ldr	r2, [r3, #12]
 8003608:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800360c:	60da      	str	r2, [r3, #12]
 800360e:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8003610:	4610      	mov	r0, r2
 8003612:	f000 f9ed 	bl	80039f0 <HAL_UART_TxCpltCallback>
 8003616:	bd08      	pop	{r3, pc}

08003618 <HAL_UART_TxHalfCpltCallback>:
 8003618:	4770      	bx	lr

0800361a <UART_DMATxHalfCplt>:
{
 800361a:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800361c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800361e:	f7ff fffb 	bl	8003618 <HAL_UART_TxHalfCpltCallback>
 8003622:	bd08      	pop	{r3, pc}

08003624 <UART_DMAReceiveCplt>:
{
 8003624:	b508      	push	{r3, lr}
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003626:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003628:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8003630:	d110      	bne.n	8003654 <UART_DMAReceiveCplt+0x30>
    huart->RxXferCount = 0U;
 8003632:	85d3      	strh	r3, [r2, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003634:	6813      	ldr	r3, [r2, #0]
 8003636:	68d9      	ldr	r1, [r3, #12]
 8003638:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800363c:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800363e:	6959      	ldr	r1, [r3, #20]
 8003640:	f021 0101 	bic.w	r1, r1, #1
 8003644:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003646:	6959      	ldr	r1, [r3, #20]
 8003648:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800364c:	6159      	str	r1, [r3, #20]
    huart->RxState = HAL_UART_STATE_READY;
 800364e:	2320      	movs	r3, #32
 8003650:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8003654:	4610      	mov	r0, r2
 8003656:	f000 f9e1 	bl	8003a1c <HAL_UART_RxCpltCallback>
 800365a:	bd08      	pop	{r3, pc}

0800365c <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800365c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8003660:	2b22      	cmp	r3, #34	; 0x22
{
 8003662:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8003664:	d132      	bne.n	80036cc <UART_Receive_IT+0x70>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003666:	6883      	ldr	r3, [r0, #8]
 8003668:	6901      	ldr	r1, [r0, #16]
 800366a:	6802      	ldr	r2, [r0, #0]
 800366c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003670:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003672:	d11f      	bne.n	80036b4 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003674:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003676:	b9c9      	cbnz	r1, 80036ac <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003678:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800367c:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8003680:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8003682:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8003684:	3c01      	subs	r4, #1
 8003686:	b2a4      	uxth	r4, r4
 8003688:	85c4      	strh	r4, [r0, #46]	; 0x2e
 800368a:	b96c      	cbnz	r4, 80036a8 <UART_Receive_IT+0x4c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800368c:	6803      	ldr	r3, [r0, #0]
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003694:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003696:	695a      	ldr	r2, [r3, #20]
 8003698:	f022 0201 	bic.w	r2, r2, #1
 800369c:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800369e:	2320      	movs	r3, #32
 80036a0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80036a4:	f000 f9ba 	bl	8003a1c <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 80036a8:	2000      	movs	r0, #0
}
 80036aa:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80036ac:	b2d2      	uxtb	r2, r2
 80036ae:	f823 2b01 	strh.w	r2, [r3], #1
 80036b2:	e7e5      	b.n	8003680 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 80036b4:	b921      	cbnz	r1, 80036c0 <UART_Receive_IT+0x64>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80036b6:	1c59      	adds	r1, r3, #1
 80036b8:	6852      	ldr	r2, [r2, #4]
 80036ba:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036bc:	701a      	strb	r2, [r3, #0]
 80036be:	e7e0      	b.n	8003682 <UART_Receive_IT+0x26>
 80036c0:	6852      	ldr	r2, [r2, #4]
 80036c2:	1c59      	adds	r1, r3, #1
 80036c4:	6281      	str	r1, [r0, #40]	; 0x28
 80036c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036ca:	e7f7      	b.n	80036bc <UART_Receive_IT+0x60>
    return HAL_BUSY;
 80036cc:	2002      	movs	r0, #2
 80036ce:	bd10      	pop	{r4, pc}

080036d0 <HAL_UART_RxHalfCpltCallback>:
 80036d0:	4770      	bx	lr

080036d2 <UART_DMARxHalfCplt>:
{
 80036d2:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart); 
 80036d4:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80036d6:	f7ff fffb 	bl	80036d0 <HAL_UART_RxHalfCpltCallback>
 80036da:	bd08      	pop	{r3, pc}

080036dc <HAL_UART_ErrorCallback>:
 80036dc:	4770      	bx	lr

080036de <UART_DMAError>:
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80036de:	6b81      	ldr	r1, [r0, #56]	; 0x38
{
 80036e0:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80036e2:	680b      	ldr	r3, [r1, #0]
 80036e4:	695a      	ldr	r2, [r3, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80036e6:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 80036ea:	2821      	cmp	r0, #33	; 0x21
 80036ec:	d10a      	bne.n	8003704 <UART_DMAError+0x26>
 80036ee:	0612      	lsls	r2, r2, #24
 80036f0:	d508      	bpl.n	8003704 <UART_DMAError+0x26>
    huart->TxXferCount = 0U;
 80036f2:	2200      	movs	r2, #0
 80036f4:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80036f6:	68da      	ldr	r2, [r3, #12]
 80036f8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80036fc:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80036fe:	2220      	movs	r2, #32
 8003700:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8003704:	695b      	ldr	r3, [r3, #20]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003706:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 800370a:	2a22      	cmp	r2, #34	; 0x22
 800370c:	d106      	bne.n	800371c <UART_DMAError+0x3e>
 800370e:	065b      	lsls	r3, r3, #25
 8003710:	d504      	bpl.n	800371c <UART_DMAError+0x3e>
    huart->RxXferCount = 0U;
 8003712:	2300      	movs	r3, #0
 8003714:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003716:	4608      	mov	r0, r1
 8003718:	f7ff fd7e 	bl	8003218 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800371c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800371e:	f043 0310 	orr.w	r3, r3, #16
 8003722:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8003724:	4608      	mov	r0, r1
 8003726:	f7ff ffd9 	bl	80036dc <HAL_UART_ErrorCallback>
 800372a:	bd08      	pop	{r3, pc}

0800372c <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800372c:	6803      	ldr	r3, [r0, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003730:	68d9      	ldr	r1, [r3, #12]
{
 8003732:	b570      	push	{r4, r5, r6, lr}
  if(errorflags == RESET)
 8003734:	0716      	lsls	r6, r2, #28
{
 8003736:	4604      	mov	r4, r0
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003738:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 800373a:	d107      	bne.n	800374c <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800373c:	0696      	lsls	r6, r2, #26
 800373e:	d55a      	bpl.n	80037f6 <HAL_UART_IRQHandler+0xca>
 8003740:	068d      	lsls	r5, r1, #26
 8003742:	d558      	bpl.n	80037f6 <HAL_UART_IRQHandler+0xca>
}
 8003744:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8003748:	f7ff bf88 	b.w	800365c <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800374c:	f015 0501 	ands.w	r5, r5, #1
 8003750:	d102      	bne.n	8003758 <HAL_UART_IRQHandler+0x2c>
 8003752:	f411 7f90 	tst.w	r1, #288	; 0x120
 8003756:	d04e      	beq.n	80037f6 <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003758:	07d3      	lsls	r3, r2, #31
 800375a:	d505      	bpl.n	8003768 <HAL_UART_IRQHandler+0x3c>
 800375c:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800375e:	bf42      	ittt	mi
 8003760:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8003762:	f043 0301 	orrmi.w	r3, r3, #1
 8003766:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003768:	0750      	lsls	r0, r2, #29
 800376a:	d504      	bpl.n	8003776 <HAL_UART_IRQHandler+0x4a>
 800376c:	b11d      	cbz	r5, 8003776 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800376e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003770:	f043 0302 	orr.w	r3, r3, #2
 8003774:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003776:	0793      	lsls	r3, r2, #30
 8003778:	d504      	bpl.n	8003784 <HAL_UART_IRQHandler+0x58>
 800377a:	b11d      	cbz	r5, 8003784 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800377c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800377e:	f043 0304 	orr.w	r3, r3, #4
 8003782:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003784:	0716      	lsls	r6, r2, #28
 8003786:	d504      	bpl.n	8003792 <HAL_UART_IRQHandler+0x66>
 8003788:	b11d      	cbz	r5, 8003792 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800378a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800378c:	f043 0308 	orr.w	r3, r3, #8
 8003790:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003792:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003794:	2b00      	cmp	r3, #0
 8003796:	d066      	beq.n	8003866 <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003798:	0695      	lsls	r5, r2, #26
 800379a:	d504      	bpl.n	80037a6 <HAL_UART_IRQHandler+0x7a>
 800379c:	0688      	lsls	r0, r1, #26
 800379e:	d502      	bpl.n	80037a6 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 80037a0:	4620      	mov	r0, r4
 80037a2:	f7ff ff5b 	bl	800365c <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037a6:	6823      	ldr	r3, [r4, #0]
 80037a8:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037aa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80037ac:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 80037ae:	4620      	mov	r0, r4
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037b0:	d402      	bmi.n	80037b8 <HAL_UART_IRQHandler+0x8c>
 80037b2:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80037b6:	d01a      	beq.n	80037ee <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 80037b8:	f7ff fd2e 	bl	8003218 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037bc:	6823      	ldr	r3, [r4, #0]
 80037be:	695a      	ldr	r2, [r3, #20]
 80037c0:	0652      	lsls	r2, r2, #25
 80037c2:	d510      	bpl.n	80037e6 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037c4:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 80037c6:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037cc:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 80037ce:	b150      	cbz	r0, 80037e6 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037d0:	4b25      	ldr	r3, [pc, #148]	; (8003868 <HAL_UART_IRQHandler+0x13c>)
 80037d2:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037d4:	f7fe f85c 	bl	8001890 <HAL_DMA_Abort_IT>
 80037d8:	2800      	cmp	r0, #0
 80037da:	d044      	beq.n	8003866 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037dc:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 80037de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037e2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80037e4:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80037e6:	4620      	mov	r0, r4
 80037e8:	f7ff ff78 	bl	80036dc <HAL_UART_ErrorCallback>
 80037ec:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80037ee:	f7ff ff75 	bl	80036dc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f2:	63e5      	str	r5, [r4, #60]	; 0x3c
 80037f4:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80037f6:	0616      	lsls	r6, r2, #24
 80037f8:	d527      	bpl.n	800384a <HAL_UART_IRQHandler+0x11e>
 80037fa:	060d      	lsls	r5, r1, #24
 80037fc:	d525      	bpl.n	800384a <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80037fe:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8003802:	2a21      	cmp	r2, #33	; 0x21
 8003804:	d12f      	bne.n	8003866 <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003806:	68a2      	ldr	r2, [r4, #8]
 8003808:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800380c:	6a22      	ldr	r2, [r4, #32]
 800380e:	d117      	bne.n	8003840 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003810:	8811      	ldrh	r1, [r2, #0]
 8003812:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003816:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003818:	6921      	ldr	r1, [r4, #16]
 800381a:	b979      	cbnz	r1, 800383c <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 800381c:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 800381e:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8003820:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8003822:	3a01      	subs	r2, #1
 8003824:	b292      	uxth	r2, r2
 8003826:	84e2      	strh	r2, [r4, #38]	; 0x26
 8003828:	b9ea      	cbnz	r2, 8003866 <HAL_UART_IRQHandler+0x13a>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800382a:	68da      	ldr	r2, [r3, #12]
 800382c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003830:	60da      	str	r2, [r3, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003832:	68da      	ldr	r2, [r3, #12]
 8003834:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003838:	60da      	str	r2, [r3, #12]
 800383a:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 800383c:	3201      	adds	r2, #1
 800383e:	e7ee      	b.n	800381e <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003840:	1c51      	adds	r1, r2, #1
 8003842:	6221      	str	r1, [r4, #32]
 8003844:	7812      	ldrb	r2, [r2, #0]
 8003846:	605a      	str	r2, [r3, #4]
 8003848:	e7ea      	b.n	8003820 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800384a:	0650      	lsls	r0, r2, #25
 800384c:	d50b      	bpl.n	8003866 <HAL_UART_IRQHandler+0x13a>
 800384e:	064a      	lsls	r2, r1, #25
 8003850:	d509      	bpl.n	8003866 <HAL_UART_IRQHandler+0x13a>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003852:	68da      	ldr	r2, [r3, #12]
 8003854:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003858:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800385a:	2320      	movs	r3, #32
 800385c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8003860:	4620      	mov	r0, r4
 8003862:	f000 f8c5 	bl	80039f0 <HAL_UART_TxCpltCallback>
 8003866:	bd70      	pop	{r4, r5, r6, pc}
 8003868:	0800386d 	.word	0x0800386d

0800386c <UART_DMAAbortOnError>:
{
 800386c:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800386e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8003874:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8003876:	f7ff ff31 	bl	80036dc <HAL_UART_ErrorCallback>
 800387a:	bd08      	pop	{r3, pc}

0800387c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800387c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 800387e:	2210      	movs	r2, #16
 8003880:	2100      	movs	r1, #0
 8003882:	4668      	mov	r0, sp
 8003884:	f001 f8e9 	bl	8004a5a <memset>

  /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8003888:	4812      	ldr	r0, [pc, #72]	; (80038d4 <MX_ADC1_Init+0x58>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800388a:	4b13      	ldr	r3, [pc, #76]	; (80038d8 <MX_ADC1_Init+0x5c>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800388c:	4a13      	ldr	r2, [pc, #76]	; (80038dc <MX_ADC1_Init+0x60>)
 800388e:	6282      	str	r2, [r0, #40]	; 0x28
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003890:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8003894:	e880 0018 	stmia.w	r0, {r3, r4}
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003898:	2300      	movs	r3, #0
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 800389a:	2401      	movs	r4, #1
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800389c:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800389e:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80038a0:	6183      	str	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80038a2:	6203      	str	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80038a4:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80038a6:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 80038a8:	61c4      	str	r4, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80038aa:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80038ac:	6144      	str	r4, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80038ae:	f7fd fcd3 	bl	8001258 <HAL_ADC_Init>
 80038b2:	b108      	cbz	r0, 80038b8 <MX_ADC1_Init+0x3c>
  {
    Error_Handler();
 80038b4:	f000 fadc 	bl	8003e70 <Error_Handler>
  }
  /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80038b8:	2306      	movs	r3, #6
  sConfig.Rank = 1;
 80038ba:	e88d 0018 	stmia.w	sp, {r3, r4}
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80038be:	4669      	mov	r1, sp
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80038c0:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80038c2:	4804      	ldr	r0, [pc, #16]	; (80038d4 <MX_ADC1_Init+0x58>)
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80038c4:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80038c6:	f7fd fe03 	bl	80014d0 <HAL_ADC_ConfigChannel>
 80038ca:	b108      	cbz	r0, 80038d0 <MX_ADC1_Init+0x54>
  {
    Error_Handler();
 80038cc:	f000 fad0 	bl	8003e70 <Error_Handler>
  }

}
 80038d0:	b004      	add	sp, #16
 80038d2:	bd10      	pop	{r4, pc}
 80038d4:	20000334 	.word	0x20000334
 80038d8:	40012000 	.word	0x40012000
 80038dc:	0f000001 	.word	0x0f000001

080038e0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80038e0:	b510      	push	{r4, lr}
 80038e2:	4604      	mov	r4, r0
 80038e4:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e6:	2214      	movs	r2, #20
 80038e8:	2100      	movs	r1, #0
 80038ea:	a803      	add	r0, sp, #12
 80038ec:	f001 f8b5 	bl	8004a5a <memset>
  if(adcHandle->Instance==ADC1)
 80038f0:	6822      	ldr	r2, [r4, #0]
 80038f2:	4b16      	ldr	r3, [pc, #88]	; (800394c <HAL_ADC_MspInit+0x6c>)
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d126      	bne.n	8003946 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80038f8:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80038fc:	2400      	movs	r4, #0
 80038fe:	9401      	str	r4, [sp, #4]
 8003900:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA6     ------> ADC1_IN6 
    */
    GPIO_InitStruct.Pin = ADC6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(ADC6_GPIO_Port, &GPIO_InitStruct);
 8003902:	4813      	ldr	r0, [pc, #76]	; (8003950 <HAL_ADC_MspInit+0x70>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003904:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003908:	645a      	str	r2, [r3, #68]	; 0x44
 800390a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800390c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8003910:	9201      	str	r2, [sp, #4]
 8003912:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003914:	9402      	str	r4, [sp, #8]
 8003916:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003918:	f042 0201 	orr.w	r2, r2, #1
 800391c:	631a      	str	r2, [r3, #48]	; 0x30
 800391e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	9302      	str	r3, [sp, #8]
 8003926:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ADC6_Pin;
 8003928:	2340      	movs	r3, #64	; 0x40
 800392a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(ADC6_GPIO_Port, &GPIO_InitStruct);
 800392c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800392e:	2303      	movs	r3, #3
 8003930:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(ADC6_GPIO_Port, &GPIO_InitStruct);
 8003932:	f7fe f879 	bl	8001a28 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003936:	2012      	movs	r0, #18
 8003938:	4622      	mov	r2, r4
 800393a:	4621      	mov	r1, r4
 800393c:	f7fd fe72 	bl	8001624 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003940:	2012      	movs	r0, #18
 8003942:	f7fd fea3 	bl	800168c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003946:	b008      	add	sp, #32
 8003948:	bd10      	pop	{r4, pc}
 800394a:	bf00      	nop
 800394c:	40012000 	.word	0x40012000
 8003950:	40020000 	.word	0x40020000

08003954 <uartSendChar>:
/** @brief Sends a character to serial port
 * @param ch Character to send
 * @retval Character sent
 */
int uartSendChar(int ch)
{
 8003954:	b537      	push	{r0, r1, r2, r4, r5, lr}

	while ((uart2TXReady == 0) | (uart6TXReady == 0)) {
 8003956:	4911      	ldr	r1, [pc, #68]	; (800399c <uartSendChar+0x48>)
 8003958:	4a11      	ldr	r2, [pc, #68]	; (80039a0 <uartSendChar+0x4c>)
{
 800395a:	9001      	str	r0, [sp, #4]
 800395c:	460c      	mov	r4, r1
 800395e:	4615      	mov	r5, r2
	while ((uart2TXReady == 0) | (uart6TXReady == 0)) {
 8003960:	6808      	ldr	r0, [r1, #0]
 8003962:	6813      	ldr	r3, [r2, #0]
 8003964:	2800      	cmp	r0, #0
 8003966:	d0fb      	beq.n	8003960 <uartSendChar+0xc>
 8003968:	fab3 f383 	clz	r3, r3
 800396c:	095b      	lsrs	r3, r3, #5
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1f6      	bne.n	8003960 <uartSendChar+0xc>
		;
	}

	uart2TXReady = 0;
 8003972:	600b      	str	r3, [r1, #0]
	uart6TXReady = 0;

	HAL_UART_Transmit_DMA(&huart6, (uint8_t *)&ch, 1);
 8003974:	480b      	ldr	r0, [pc, #44]	; (80039a4 <uartSendChar+0x50>)
	uart6TXReady = 0;
 8003976:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit_DMA(&huart6, (uint8_t *)&ch, 1);
 8003978:	a901      	add	r1, sp, #4
 800397a:	2201      	movs	r2, #1
 800397c:	f7ff fdb4 	bl	80034e8 <HAL_UART_Transmit_DMA>
	HAL_UART_Transmit_DMA(&huart2, (uint8_t *)&ch, 1);
 8003980:	2201      	movs	r2, #1
 8003982:	a901      	add	r1, sp, #4
 8003984:	4808      	ldr	r0, [pc, #32]	; (80039a8 <uartSendChar+0x54>)
 8003986:	f7ff fdaf 	bl	80034e8 <HAL_UART_Transmit_DMA>

	while ((uart2TXReady == 0) | (uart6TXReady == 0)) {
 800398a:	6822      	ldr	r2, [r4, #0]
 800398c:	682b      	ldr	r3, [r5, #0]
 800398e:	2a00      	cmp	r2, #0
 8003990:	d0fb      	beq.n	800398a <uartSendChar+0x36>
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0f9      	beq.n	800398a <uartSendChar+0x36>
		;
	}

	return ch;
}
 8003996:	9801      	ldr	r0, [sp, #4]
 8003998:	b003      	add	sp, #12
 800399a:	bd30      	pop	{r4, r5, pc}
 800399c:	2000016c 	.word	0x2000016c
 80039a0:	20000170 	.word	0x20000170
 80039a4:	20000688 	.word	0x20000688
 80039a8:	200006c8 	.word	0x200006c8

080039ac <uartReceiveChar>:
 */
int uartReceiveChar(void)
{
  uint8_t ch;
  
	while (uartRXReady == 0) {
 80039ac:	4b0a      	ldr	r3, [pc, #40]	; (80039d8 <uartReceiveChar+0x2c>)
{
 80039ae:	b513      	push	{r0, r1, r4, lr}
 80039b0:	461c      	mov	r4, r3
	while (uartRXReady == 0) {
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	2a00      	cmp	r2, #0
 80039b6:	d0fc      	beq.n	80039b2 <uartReceiveChar+0x6>
		;
	}

  uartRXReady = 0;
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]

  HAL_UART_Receive_DMA(&huart6, &ch, 1);
 80039bc:	f10d 0107 	add.w	r1, sp, #7
 80039c0:	2201      	movs	r2, #1
 80039c2:	4806      	ldr	r0, [pc, #24]	; (80039dc <uartReceiveChar+0x30>)
 80039c4:	f7ff fdca 	bl	800355c <HAL_UART_Receive_DMA>

  while (uartRXReady == 0) {
 80039c8:	6823      	ldr	r3, [r4, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0fc      	beq.n	80039c8 <uartReceiveChar+0x1c>
	 ;
  }

  return ch;
}
 80039ce:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80039d2:	b002      	add	sp, #8
 80039d4:	bd10      	pop	{r4, pc}
 80039d6:	bf00      	nop
 80039d8:	20000174 	.word	0x20000174
 80039dc:	20000688 	.word	0x20000688

080039e0 <__io_putchar>:
/** @brief putchar call for standard output implementation
 * @param ch Character to print
 * @retval Character printed
 */
int __io_putchar(int ch)
{
 80039e0:	b508      	push	{r3, lr}
  uartSendChar(ch);
 80039e2:	f7ff ffb7 	bl	8003954 <uartSendChar>

  return 0;
}
 80039e6:	2000      	movs	r0, #0
 80039e8:	bd08      	pop	{r3, pc}

080039ea <__io_getchar>:
 * @param None
 * @retval Character acquired from standard input
 */
int __io_getchar(void)
{
  return uartReceiveChar();
 80039ea:	f7ff bfdf 	b.w	80039ac <uartReceiveChar>
	...

080039f0 <HAL_UART_TxCpltCallback>:
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
  /* Set transmission flag: trasfer complete*/

  if (UartHandle->Instance == USART2) uart2TXReady = 1;
 80039f0:	6803      	ldr	r3, [r0, #0]
 80039f2:	4a06      	ldr	r2, [pc, #24]	; (8003a0c <HAL_UART_TxCpltCallback+0x1c>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d103      	bne.n	8003a00 <HAL_UART_TxCpltCallback+0x10>
 80039f8:	4b05      	ldr	r3, [pc, #20]	; (8003a10 <HAL_UART_TxCpltCallback+0x20>)
 80039fa:	2201      	movs	r2, #1
  if (UartHandle->Instance == USART6) uart6TXReady = 1;
 80039fc:	601a      	str	r2, [r3, #0]
 80039fe:	4770      	bx	lr
 8003a00:	4a04      	ldr	r2, [pc, #16]	; (8003a14 <HAL_UART_TxCpltCallback+0x24>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d1fb      	bne.n	80039fe <HAL_UART_TxCpltCallback+0xe>
 8003a06:	2201      	movs	r2, #1
 8003a08:	4b03      	ldr	r3, [pc, #12]	; (8003a18 <HAL_UART_TxCpltCallback+0x28>)
 8003a0a:	e7f7      	b.n	80039fc <HAL_UART_TxCpltCallback+0xc>
 8003a0c:	40004400 	.word	0x40004400
 8003a10:	2000016c 	.word	0x2000016c
 8003a14:	40011400 	.word	0x40011400
 8003a18:	20000170 	.word	0x20000170

08003a1c <HAL_UART_RxCpltCallback>:
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
  /* Set transmission flag: trasfer complete*/
  uartRXReady = 1;
 8003a1c:	4b01      	ldr	r3, [pc, #4]	; (8003a24 <HAL_UART_RxCpltCallback+0x8>)
 8003a1e:	2201      	movs	r2, #1
 8003a20:	601a      	str	r2, [r3, #0]
 8003a22:	4770      	bx	lr
 8003a24:	20000174 	.word	0x20000174

08003a28 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8003a28:	b513      	push	{r0, r1, r4, lr}
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003a2a:	4b24      	ldr	r3, [pc, #144]	; (8003abc <MX_DMA_Init+0x94>)
 8003a2c:	2400      	movs	r4, #0
 8003a2e:	9400      	str	r4, [sp, #0]
 8003a30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a32:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003a36:	631a      	str	r2, [r3, #48]	; 0x30
 8003a38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a3a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003a3e:	9200      	str	r2, [sp, #0]
 8003a40:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003a42:	9401      	str	r4, [sp, #4]
 8003a44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a46:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003a4a:	631a      	str	r2, [r3, #48]	; 0x30
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003a52:	4622      	mov	r2, r4
 8003a54:	4621      	mov	r1, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003a56:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003a58:	200b      	movs	r0, #11
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003a5a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003a5c:	f7fd fde2 	bl	8001624 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003a60:	200b      	movs	r0, #11
 8003a62:	f7fd fe13 	bl	800168c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8003a66:	4622      	mov	r2, r4
 8003a68:	4621      	mov	r1, r4
 8003a6a:	2010      	movs	r0, #16
 8003a6c:	f7fd fdda 	bl	8001624 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003a70:	2010      	movs	r0, #16
 8003a72:	f7fd fe0b 	bl	800168c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8003a76:	4622      	mov	r2, r4
 8003a78:	4621      	mov	r1, r4
 8003a7a:	2011      	movs	r0, #17
 8003a7c:	f7fd fdd2 	bl	8001624 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003a80:	2011      	movs	r0, #17
 8003a82:	f7fd fe03 	bl	800168c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8003a86:	4622      	mov	r2, r4
 8003a88:	4621      	mov	r1, r4
 8003a8a:	202f      	movs	r0, #47	; 0x2f
 8003a8c:	f7fd fdca 	bl	8001624 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8003a90:	202f      	movs	r0, #47	; 0x2f
 8003a92:	f7fd fdfb 	bl	800168c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8003a96:	4622      	mov	r2, r4
 8003a98:	4621      	mov	r1, r4
 8003a9a:	2039      	movs	r0, #57	; 0x39
 8003a9c:	f7fd fdc2 	bl	8001624 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003aa0:	2039      	movs	r0, #57	; 0x39
 8003aa2:	f7fd fdf3 	bl	800168c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8003aa6:	4622      	mov	r2, r4
 8003aa8:	4621      	mov	r1, r4
 8003aaa:	2045      	movs	r0, #69	; 0x45
 8003aac:	f7fd fdba 	bl	8001624 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8003ab0:	2045      	movs	r0, #69	; 0x45
 8003ab2:	f7fd fdeb 	bl	800168c <HAL_NVIC_EnableIRQ>

}
 8003ab6:	b002      	add	sp, #8
 8003ab8:	bd10      	pop	{r4, pc}
 8003aba:	bf00      	nop
 8003abc:	40023800 	.word	0x40023800

08003ac0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003ac0:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ac2:	2214      	movs	r2, #20
{
 8003ac4:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ac6:	eb0d 0002 	add.w	r0, sp, r2
 8003aca:	2100      	movs	r1, #0
 8003acc:	f000 ffc5 	bl	8004a5a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ad0:	2400      	movs	r4, #0
 8003ad2:	4b2b      	ldr	r3, [pc, #172]	; (8003b80 <MX_GPIO_Init+0xc0>)
 8003ad4:	9401      	str	r4, [sp, #4]
 8003ad6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_ENB_GPIO_Port, MOTOR_ENB_Pin, GPIO_PIN_RESET);
 8003ad8:	4d2a      	ldr	r5, [pc, #168]	; (8003b84 <MX_GPIO_Init+0xc4>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MOTOR_ENA_Pin, GPIO_PIN_RESET);
 8003ada:	4e2b      	ldr	r6, [pc, #172]	; (8003b88 <MX_GPIO_Init+0xc8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003adc:	f042 0204 	orr.w	r2, r2, #4
 8003ae0:	631a      	str	r2, [r3, #48]	; 0x30
 8003ae2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ae4:	f002 0204 	and.w	r2, r2, #4
 8003ae8:	9201      	str	r2, [sp, #4]
 8003aea:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003aec:	9402      	str	r4, [sp, #8]
 8003aee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003af0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003af4:	631a      	str	r2, [r3, #48]	; 0x30
 8003af6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003af8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003afc:	9202      	str	r2, [sp, #8]
 8003afe:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b00:	9403      	str	r4, [sp, #12]
 8003b02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b04:	f042 0201 	orr.w	r2, r2, #1
 8003b08:	631a      	str	r2, [r3, #48]	; 0x30
 8003b0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b0c:	f002 0201 	and.w	r2, r2, #1
 8003b10:	9203      	str	r2, [sp, #12]
 8003b12:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b14:	9404      	str	r4, [sp, #16]
 8003b16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b18:	f042 0202 	orr.w	r2, r2, #2
 8003b1c:	631a      	str	r2, [r3, #48]	; 0x30
 8003b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(MOTOR_ENB_GPIO_Port, MOTOR_ENB_Pin, GPIO_PIN_RESET);
 8003b26:	4622      	mov	r2, r4
 8003b28:	4628      	mov	r0, r5
 8003b2a:	2102      	movs	r1, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b2c:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(MOTOR_ENB_GPIO_Port, MOTOR_ENB_Pin, GPIO_PIN_RESET);
 8003b2e:	f7fe f857 	bl	8001be0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MOTOR_ENA_Pin, GPIO_PIN_RESET);
 8003b32:	4622      	mov	r2, r4
 8003b34:	4630      	mov	r0, r6
 8003b36:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8003b3a:	f7fe f851 	bl	8001be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003b3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b42:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003b44:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003b46:	4b11      	ldr	r3, [pc, #68]	; (8003b8c <MX_GPIO_Init+0xcc>)
 8003b48:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003b4a:	4628      	mov	r0, r5

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTOR_ENB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b4c:	2701      	movs	r7, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b4e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003b50:	f7fd ff6a 	bl	8001a28 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MOTOR_ENB_Pin;
 8003b54:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(MOTOR_ENB_GPIO_Port, &GPIO_InitStruct);
 8003b56:	a905      	add	r1, sp, #20
 8003b58:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = MOTOR_ENB_Pin;
 8003b5a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b5c:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b5e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b60:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(MOTOR_ENB_GPIO_Port, &GPIO_InitStruct);
 8003b62:	f7fd ff61 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|MOTOR_ENA_Pin;
 8003b66:	f44f 6384 	mov.w	r3, #1056	; 0x420
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b6a:	a905      	add	r1, sp, #20
 8003b6c:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = LD2_Pin|MOTOR_ENA_Pin;
 8003b6e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b70:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b72:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b74:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b76:	f7fd ff57 	bl	8001a28 <HAL_GPIO_Init>

}
 8003b7a:	b00b      	add	sp, #44	; 0x2c
 8003b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	40023800 	.word	0x40023800
 8003b84:	40020800 	.word	0x40020800
 8003b88:	40020000 	.word	0x40020000
 8003b8c:	10210000 	.word	0x10210000

08003b90 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003b90:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8003b92:	480c      	ldr	r0, [pc, #48]	; (8003bc4 <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 100000;
 8003b94:	4b0c      	ldr	r3, [pc, #48]	; (8003bc8 <MX_I2C1_Init+0x38>)
 8003b96:	f8df e034 	ldr.w	lr, [pc, #52]	; 8003bcc <MX_I2C1_Init+0x3c>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 8003b9e:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003ba6:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ba8:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003baa:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003bac:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003bae:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003bb0:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003bb2:	f7fe f81b 	bl	8001bec <HAL_I2C_Init>
 8003bb6:	b118      	cbz	r0, 8003bc0 <MX_I2C1_Init+0x30>
  {
    Error_Handler();
  }

}
 8003bb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003bbc:	f000 b958 	b.w	8003e70 <Error_Handler>
 8003bc0:	bd08      	pop	{r3, pc}
 8003bc2:	bf00      	nop
 8003bc4:	200003dc 	.word	0x200003dc
 8003bc8:	40005400 	.word	0x40005400
 8003bcc:	000186a0 	.word	0x000186a0

08003bd0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003bd0:	b570      	push	{r4, r5, r6, lr}
 8003bd2:	4606      	mov	r6, r0
 8003bd4:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bd6:	2214      	movs	r2, #20
 8003bd8:	2100      	movs	r1, #0
 8003bda:	a803      	add	r0, sp, #12
 8003bdc:	f000 ff3d 	bl	8004a5a <memset>
  if(i2cHandle->Instance==I2C1)
 8003be0:	6832      	ldr	r2, [r6, #0]
 8003be2:	4b36      	ldr	r3, [pc, #216]	; (8003cbc <HAL_I2C_MspInit+0xec>)
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d166      	bne.n	8003cb6 <HAL_I2C_MspInit+0xe6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003be8:	2500      	movs	r5, #0
 8003bea:	4c35      	ldr	r4, [pc, #212]	; (8003cc0 <HAL_I2C_MspInit+0xf0>)
 8003bec:	9501      	str	r5, [sp, #4]
 8003bee:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bf0:	4834      	ldr	r0, [pc, #208]	; (8003cc4 <HAL_I2C_MspInit+0xf4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bf2:	f043 0302 	orr.w	r3, r3, #2
 8003bf6:	6323      	str	r3, [r4, #48]	; 0x30
 8003bf8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	9301      	str	r3, [sp, #4]
 8003c00:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003c02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003c06:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c08:	2312      	movs	r3, #18
 8003c0a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c10:	2303      	movs	r3, #3
 8003c12:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c14:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c16:	2304      	movs	r3, #4
 8003c18:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c1a:	f7fd ff05 	bl	8001a28 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003c1e:	9502      	str	r5, [sp, #8]
 8003c20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c26:	6423      	str	r3, [r4, #64]	; 0x40
 8003c28:	6c23      	ldr	r3, [r4, #64]	; 0x40
  
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8003c2a:	4c27      	ldr	r4, [pc, #156]	; (8003cc8 <HAL_I2C_MspInit+0xf8>)
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003c2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c30:	9302      	str	r3, [sp, #8]
 8003c32:	9b02      	ldr	r3, [sp, #8]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8003c34:	4b25      	ldr	r3, [pc, #148]	; (8003ccc <HAL_I2C_MspInit+0xfc>)
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c36:	60a5      	str	r5, [r4, #8]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8003c38:	f04f 7c00 	mov.w	ip, #33554432	; 0x2000000
 8003c3c:	e884 1008 	stmia.w	r4, {r3, ip}
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003c40:	4620      	mov	r0, r4
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c42:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c46:	60e5      	str	r5, [r4, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c48:	6123      	str	r3, [r4, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c4a:	6165      	str	r5, [r4, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c4c:	61a5      	str	r5, [r4, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003c4e:	61e5      	str	r5, [r4, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003c50:	6225      	str	r5, [r4, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c52:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003c54:	f7fd fd60 	bl	8001718 <HAL_DMA_Init>
 8003c58:	b108      	cbz	r0, 8003c5e <HAL_I2C_MspInit+0x8e>
    {
      Error_Handler();
 8003c5a:	f000 f909 	bl	8003e70 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8003c5e:	63b4      	str	r4, [r6, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c60:	4b1b      	ldr	r3, [pc, #108]	; (8003cd0 <HAL_I2C_MspInit+0x100>)
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8003c62:	63a6      	str	r6, [r4, #56]	; 0x38
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 8003c64:	4c1b      	ldr	r4, [pc, #108]	; (8003cd4 <HAL_I2C_MspInit+0x104>)
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c66:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8003c6a:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8003c6e:	e884 4028 	stmia.w	r4, {r3, r5, lr}
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003c72:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c76:	2300      	movs	r3, #0
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003c78:	4620      	mov	r0, r4
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c7a:	60e3      	str	r3, [r4, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003c7c:	6122      	str	r2, [r4, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c7e:	6163      	str	r3, [r4, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c80:	61a3      	str	r3, [r4, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003c82:	61e3      	str	r3, [r4, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003c84:	6223      	str	r3, [r4, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c86:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003c88:	f7fd fd46 	bl	8001718 <HAL_DMA_Init>
 8003c8c:	b108      	cbz	r0, 8003c92 <HAL_I2C_MspInit+0xc2>
    {
      Error_Handler();
 8003c8e:	f000 f8ef 	bl	8003e70 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003c92:	2200      	movs	r2, #0
 8003c94:	4611      	mov	r1, r2
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8003c96:	6374      	str	r4, [r6, #52]	; 0x34
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003c98:	201f      	movs	r0, #31
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8003c9a:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003c9c:	f7fd fcc2 	bl	8001624 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003ca0:	201f      	movs	r0, #31
 8003ca2:	f7fd fcf3 	bl	800168c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	2020      	movs	r0, #32
 8003caa:	4611      	mov	r1, r2
 8003cac:	f7fd fcba 	bl	8001624 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003cb0:	2020      	movs	r0, #32
 8003cb2:	f7fd fceb 	bl	800168c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003cb6:	b008      	add	sp, #32
 8003cb8:	bd70      	pop	{r4, r5, r6, pc}
 8003cba:	bf00      	nop
 8003cbc:	40005400 	.word	0x40005400
 8003cc0:	40023800 	.word	0x40023800
 8003cc4:	40020400 	.word	0x40020400
 8003cc8:	20000430 	.word	0x20000430
 8003ccc:	40026010 	.word	0x40026010
 8003cd0:	400260b8 	.word	0x400260b8
 8003cd4:	2000037c 	.word	0x2000037c

08003cd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003cd8:	b530      	push	{r4, r5, lr}
 8003cda:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003cdc:	2230      	movs	r2, #48	; 0x30
 8003cde:	2100      	movs	r1, #0
 8003ce0:	a808      	add	r0, sp, #32
 8003ce2:	f000 feba 	bl	8004a5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	2214      	movs	r2, #20
 8003cea:	a803      	add	r0, sp, #12
 8003cec:	f000 feb5 	bl	8004a5a <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cf0:	2400      	movs	r4, #0
 8003cf2:	4b1e      	ldr	r3, [pc, #120]	; (8003d6c <SystemClock_Config+0x94>)
 8003cf4:	9401      	str	r4, [sp, #4]
 8003cf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cf8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003cfc:	641a      	str	r2, [r3, #64]	; 0x40
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d00:	4a1b      	ldr	r2, [pc, #108]	; (8003d70 <SystemClock_Config+0x98>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d06:	9301      	str	r3, [sp, #4]
 8003d08:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d0a:	9402      	str	r4, [sp, #8]
 8003d0c:	6813      	ldr	r3, [r2, #0]
 8003d0e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003d12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d16:	6013      	str	r3, [r2, #0]
 8003d18:	6813      	ldr	r3, [r2, #0]
 8003d1a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003d1e:	9302      	str	r3, [sp, #8]
 8003d20:	9b02      	ldr	r3, [sp, #8]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003d22:	2301      	movs	r3, #1
 8003d24:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003d26:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003d2a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003d2c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d30:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003d32:	2308      	movs	r3, #8
 8003d34:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003d36:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003d3a:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003d3c:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d3e:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003d40:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d42:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003d44:	2307      	movs	r3, #7
 8003d46:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d48:	950e      	str	r5, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d4a:	f7fe fc85 	bl	8002658 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d4e:	230f      	movs	r3, #15
 8003d50:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003d52:	4629      	mov	r1, r5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003d54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003d58:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d5a:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d5c:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003d5e:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003d60:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003d62:	f7fe fe29 	bl	80029b8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8003d66:	b015      	add	sp, #84	; 0x54
 8003d68:	bd30      	pop	{r4, r5, pc}
 8003d6a:	bf00      	nop
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	40007000 	.word	0x40007000

08003d74 <main>:
{
 8003d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  setvbuf(stdin, NULL, _IONBF, 0);
 8003d76:	4c3a      	ldr	r4, [pc, #232]	; (8003e60 <main+0xec>)
	  printf("OK -> %s",readline);
 8003d78:	4e3a      	ldr	r6, [pc, #232]	; (8003e64 <main+0xf0>)
		  printf("NOK -> %s",readline);
 8003d7a:	4f3b      	ldr	r7, [pc, #236]	; (8003e68 <main+0xf4>)
  HAL_Init();
 8003d7c:	f7fd fa2c 	bl	80011d8 <HAL_Init>
  SystemClock_Config();
 8003d80:	f7ff ffaa 	bl	8003cd8 <SystemClock_Config>
  MX_GPIO_Init();
 8003d84:	f7ff fe9c 	bl	8003ac0 <MX_GPIO_Init>
  MX_DMA_Init();
 8003d88:	f7ff fe4e 	bl	8003a28 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003d8c:	f000 fab6 	bl	80042fc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8003d90:	f7ff fefe 	bl	8003b90 <MX_I2C1_Init>
  MX_TIM2_Init();
 8003d94:	f000 fa0a 	bl	80041ac <MX_TIM2_Init>
  MX_TIM3_Init();
 8003d98:	f000 fa5c 	bl	8004254 <MX_TIM3_Init>
  MX_ADC1_Init();
 8003d9c:	f7ff fd6e 	bl	800387c <MX_ADC1_Init>
  MX_USART6_UART_Init();
 8003da0:	f000 fac8 	bl	8004334 <MX_USART6_UART_Init>
  setvbuf(stdin, NULL, _IONBF, 0);
 8003da4:	6820      	ldr	r0, [r4, #0]
 8003da6:	2300      	movs	r3, #0
 8003da8:	4619      	mov	r1, r3
 8003daa:	2202      	movs	r2, #2
 8003dac:	6840      	ldr	r0, [r0, #4]
 8003dae:	f001 f829 	bl	8004e04 <setvbuf>
  setvbuf(stdout, NULL, _IONBF, 0);
 8003db2:	6820      	ldr	r0, [r4, #0]
 8003db4:	2300      	movs	r3, #0
 8003db6:	4619      	mov	r1, r3
 8003db8:	2202      	movs	r2, #2
 8003dba:	6880      	ldr	r0, [r0, #8]
 8003dbc:	f001 f822 	bl	8004e04 <setvbuf>
  setvbuf(stderr, NULL, _IONBF, 0);
 8003dc0:	6820      	ldr	r0, [r4, #0]
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	2202      	movs	r2, #2
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	68c0      	ldr	r0, [r0, #12]
 8003dca:	f001 f81b 	bl	8004e04 <setvbuf>
  printf("\r\nConsole ready ... \r\n");
 8003dce:	4827      	ldr	r0, [pc, #156]	; (8003e6c <main+0xf8>)
 8003dd0:	f000 ff6c 	bl	8004cac <puts>
  uint8_t *readline = malloc(100 * sizeof(uint8_t));
 8003dd4:	2064      	movs	r0, #100	; 0x64
 8003dd6:	f000 fe2d 	bl	8004a34 <malloc>
 8003dda:	4605      	mov	r5, r0
  motor_init();
 8003ddc:	f000 f85a 	bl	8003e94 <motor_init>
	  fgets(readline,100,stdin);
 8003de0:	6823      	ldr	r3, [r4, #0]
 8003de2:	2164      	movs	r1, #100	; 0x64
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	4628      	mov	r0, r5
 8003de8:	f000 fd10 	bl	800480c <fgets>
	  printf("OK -> %s",readline);
 8003dec:	4629      	mov	r1, r5
 8003dee:	4630      	mov	r0, r6
 8003df0:	f000 fee8 	bl	8004bc4 <iprintf>
	  if ((strncmp(readline, "f",1) == 0)) {
 8003df4:	782b      	ldrb	r3, [r5, #0]
 8003df6:	2b66      	cmp	r3, #102	; 0x66
 8003df8:	d11c      	bne.n	8003e34 <main+0xc0>
			BSP_MotorControl_SetMaxSpeed(0, 20);
 8003dfa:	2114      	movs	r1, #20
 8003dfc:	2000      	movs	r0, #0
 8003dfe:	f7fd f935 	bl	800106c <BSP_MotorControl_SetMaxSpeed>
			BSP_MotorControl_Run(0, BACKWARD);
 8003e02:	2100      	movs	r1, #0
 8003e04:	4608      	mov	r0, r1
 8003e06:	f7fd f925 	bl	8001054 <BSP_MotorControl_Run>
			BSP_MotorControl_SetMaxSpeed(1, 20);
 8003e0a:	2114      	movs	r1, #20
 8003e0c:	2001      	movs	r0, #1
 8003e0e:	f7fd f92d 	bl	800106c <BSP_MotorControl_SetMaxSpeed>
			BSP_MotorControl_Run(1, FORWARD);
 8003e12:	2101      	movs	r1, #1
			BSP_MotorControl_Run(1, BACKWARD);
 8003e14:	2001      	movs	r0, #1
 8003e16:	f7fd f91d 	bl	8001054 <BSP_MotorControl_Run>
			HAL_Delay(1000);
 8003e1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e1e:	f7fd fa07 	bl	8001230 <HAL_Delay>
		BSP_MotorControl_SetMaxSpeed(0, 0);
 8003e22:	2100      	movs	r1, #0
 8003e24:	4608      	mov	r0, r1
 8003e26:	f7fd f921 	bl	800106c <BSP_MotorControl_SetMaxSpeed>
		BSP_MotorControl_SetMaxSpeed(1, 0);
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	2001      	movs	r0, #1
 8003e2e:	f7fd f91d 	bl	800106c <BSP_MotorControl_SetMaxSpeed>
	  fgets(readline,100,stdin);
 8003e32:	e7d5      	b.n	8003de0 <main+0x6c>
	  } else if ((strncmp(readline,"b",1) == 0)) {
 8003e34:	2b62      	cmp	r3, #98	; 0x62
 8003e36:	d10d      	bne.n	8003e54 <main+0xe0>
			BSP_MotorControl_SetMaxSpeed(0, 20);
 8003e38:	2114      	movs	r1, #20
 8003e3a:	2000      	movs	r0, #0
 8003e3c:	f7fd f916 	bl	800106c <BSP_MotorControl_SetMaxSpeed>
			BSP_MotorControl_Run(0, FORWARD);
 8003e40:	2101      	movs	r1, #1
 8003e42:	2000      	movs	r0, #0
 8003e44:	f7fd f906 	bl	8001054 <BSP_MotorControl_Run>
			BSP_MotorControl_SetMaxSpeed(1, 20);
 8003e48:	2114      	movs	r1, #20
 8003e4a:	2001      	movs	r0, #1
 8003e4c:	f7fd f90e 	bl	800106c <BSP_MotorControl_SetMaxSpeed>
			BSP_MotorControl_Run(1, BACKWARD);
 8003e50:	2100      	movs	r1, #0
 8003e52:	e7df      	b.n	8003e14 <main+0xa0>
		  printf("NOK -> %s",readline);
 8003e54:	4629      	mov	r1, r5
 8003e56:	4638      	mov	r0, r7
 8003e58:	f000 feb4 	bl	8004bc4 <iprintf>
 8003e5c:	e7e1      	b.n	8003e22 <main+0xae>
 8003e5e:	bf00      	nop
 8003e60:	2000017c 	.word	0x2000017c
 8003e64:	0800591c 	.word	0x0800591c
 8003e68:	0800591b 	.word	0x0800591b
 8003e6c:	08005905 	.word	0x08005905

08003e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e70:	4770      	bx	lr

08003e72 <MyFlagInterruptHandler>:
  * @brief  This function is the User handler for the flag interrupt
  * @param  None
  * @retval None
  */
void MyFlagInterruptHandler(void)
{
 8003e72:	b508      	push	{r3, lr}
  /* Code to be customised */
  /************************/
  /* Get the state of bridge A */
  uint16_t bridgeState  = BSP_MotorControl_CmdGetStatus(0);
 8003e74:	2000      	movs	r0, #0
 8003e76:	f7fd f90b 	bl	8001090 <BSP_MotorControl_CmdGetStatus>

  if (bridgeState == 0)
 8003e7a:	b948      	cbnz	r0, 8003e90 <MyFlagInterruptHandler+0x1e>
  {
    if (BSP_MotorControl_GetDeviceState(0) != INACTIVE)
 8003e7c:	f7fd f8d8 	bl	8001030 <BSP_MotorControl_GetDeviceState>
 8003e80:	2808      	cmp	r0, #8
 8003e82:	d005      	beq.n	8003e90 <MyFlagInterruptHandler+0x1e>
    {
      /* Bridge A was disabling due to overcurrent or over temperature */
      /* When  motor was running */
        Error_Handler(0XBAD0);
 8003e84:	f64b 20d0 	movw	r0, #47824	; 0xbad0
    }
  }
 }
 8003e88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Error_Handler(0XBAD0);
 8003e8c:	f7ff bff0 	b.w	8003e70 <Error_Handler>
 8003e90:	bd08      	pop	{r3, pc}
	...

08003e94 <motor_init>:
void motor_init(void) {
 8003e94:	b530      	push	{r4, r5, lr}
	 deviceParams_t initDeviceParameters =
 8003e96:	4d15      	ldr	r5, [pc, #84]	; (8003eec <motor_init+0x58>)
 8003e98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void motor_init(void) {
 8003e9a:	b08b      	sub	sp, #44	; 0x2c
	 deviceParams_t initDeviceParameters =
 8003e9c:	466c      	mov	r4, sp
 8003e9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ea0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ea2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ea4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003ea8:	e884 0003 	stmia.w	r4, {r0, r1}
  BSP_MotorControl_SetNbDevices(BSP_MOTOR_CONTROL_BOARD_ID_L6206, 2);
 8003eac:	2102      	movs	r1, #2
 8003eae:	f641 003e 	movw	r0, #6206	; 0x183e
 8003eb2:	f7fd f91b 	bl	80010ec <BSP_MotorControl_SetNbDevices>
  BSP_MotorControl_Init(BSP_MOTOR_CONTROL_BOARD_ID_L6206, &initDeviceParameters);
 8003eb6:	4669      	mov	r1, sp
 8003eb8:	f641 003e 	movw	r0, #6206	; 0x183e
 8003ebc:	f7fd f8aa 	bl	8001014 <BSP_MotorControl_Init>
  BSP_MotorControl_SetDualFullBridgeConfig(PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B);
 8003ec0:	2000      	movs	r0, #0
 8003ec2:	f7fd f8f7 	bl	80010b4 <BSP_MotorControl_SetDualFullBridgeConfig>
  BSP_MotorControl_AttachFlagInterrupt(MyFlagInterruptHandler);
 8003ec6:	480a      	ldr	r0, [pc, #40]	; (8003ef0 <motor_init+0x5c>)
 8003ec8:	f7fd f898 	bl	8000ffc <BSP_MotorControl_AttachFlagInterrupt>
  BSP_MotorControl_AttachErrorHandler(Error_Handler);
 8003ecc:	4809      	ldr	r0, [pc, #36]	; (8003ef4 <motor_init+0x60>)
 8003ece:	f7fd f889 	bl	8000fe4 <BSP_MotorControl_AttachErrorHandler>
  BSP_MotorControl_SetBridgeInputPwmFreq(0,10000);
 8003ed2:	f242 7110 	movw	r1, #10000	; 0x2710
 8003ed6:	2000      	movs	r0, #0
 8003ed8:	f7fd f8fa 	bl	80010d0 <BSP_MotorControl_SetBridgeInputPwmFreq>
  BSP_MotorControl_SetBridgeInputPwmFreq(1,10000);
 8003edc:	f242 7110 	movw	r1, #10000	; 0x2710
 8003ee0:	2001      	movs	r0, #1
 8003ee2:	f7fd f8f5 	bl	80010d0 <BSP_MotorControl_SetBridgeInputPwmFreq>
}
 8003ee6:	b00b      	add	sp, #44	; 0x2c
 8003ee8:	bd30      	pop	{r4, r5, pc}
 8003eea:	bf00      	nop
 8003eec:	080058c8 	.word	0x080058c8
 8003ef0:	08003e73 	.word	0x08003e73
 8003ef4:	08003e71 	.word	0x08003e71

08003ef8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ef8:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003efa:	4b0e      	ldr	r3, [pc, #56]	; (8003f34 <HAL_MspInit+0x3c>)
 8003efc:	2100      	movs	r1, #0
 8003efe:	9100      	str	r1, [sp, #0]
 8003f00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f06:	645a      	str	r2, [r3, #68]	; 0x44
 8003f08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f0a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003f0e:	9200      	str	r2, [sp, #0]
 8003f10:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f12:	9101      	str	r1, [sp, #4]
 8003f14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f16:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003f1a:	641a      	str	r2, [r3, #64]	; 0x40
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f22:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003f24:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f26:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003f28:	f7fd fb6a 	bl	8001600 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f2c:	b003      	add	sp, #12
 8003f2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f32:	bf00      	nop
 8003f34:	40023800 	.word	0x40023800

08003f38 <NMI_Handler>:
 8003f38:	4770      	bx	lr

08003f3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f3a:	e7fe      	b.n	8003f3a <HardFault_Handler>

08003f3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f3c:	e7fe      	b.n	8003f3c <MemManage_Handler>

08003f3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f3e:	e7fe      	b.n	8003f3e <BusFault_Handler>

08003f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f40:	e7fe      	b.n	8003f40 <UsageFault_Handler>

08003f42 <SVC_Handler>:
 8003f42:	4770      	bx	lr

08003f44 <DebugMon_Handler>:
 8003f44:	4770      	bx	lr

08003f46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f46:	4770      	bx	lr

08003f48 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f48:	f7fd b960 	b.w	800120c <HAL_IncTick>

08003f4c <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003f4c:	4801      	ldr	r0, [pc, #4]	; (8003f54 <DMA1_Stream0_IRQHandler+0x8>)
 8003f4e:	f7fd bcb1 	b.w	80018b4 <HAL_DMA_IRQHandler>
 8003f52:	bf00      	nop
 8003f54:	20000430 	.word	0x20000430

08003f58 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003f58:	4801      	ldr	r0, [pc, #4]	; (8003f60 <DMA1_Stream5_IRQHandler+0x8>)
 8003f5a:	f7fd bcab 	b.w	80018b4 <HAL_DMA_IRQHandler>
 8003f5e:	bf00      	nop
 8003f60:	20000508 	.word	0x20000508

08003f64 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003f64:	4801      	ldr	r0, [pc, #4]	; (8003f6c <DMA1_Stream6_IRQHandler+0x8>)
 8003f66:	f7fd bca5 	b.w	80018b4 <HAL_DMA_IRQHandler>
 8003f6a:	bf00      	nop
 8003f6c:	20000628 	.word	0x20000628

08003f70 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003f70:	4801      	ldr	r0, [pc, #4]	; (8003f78 <ADC_IRQHandler+0x8>)
 8003f72:	f7fd ba18 	b.w	80013a6 <HAL_ADC_IRQHandler>
 8003f76:	bf00      	nop
 8003f78:	20000334 	.word	0x20000334

08003f7c <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003f7c:	4801      	ldr	r0, [pc, #4]	; (8003f84 <TIM2_IRQHandler+0x8>)
 8003f7e:	f7fe bf26 	b.w	8002dce <HAL_TIM_IRQHandler>
 8003f82:	bf00      	nop
 8003f84:	200004cc 	.word	0x200004cc

08003f88 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003f88:	4801      	ldr	r0, [pc, #4]	; (8003f90 <TIM3_IRQHandler+0x8>)
 8003f8a:	f7fe bf20 	b.w	8002dce <HAL_TIM_IRQHandler>
 8003f8e:	bf00      	nop
 8003f90:	20000490 	.word	0x20000490

08003f94 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003f94:	4801      	ldr	r0, [pc, #4]	; (8003f9c <I2C1_EV_IRQHandler+0x8>)
 8003f96:	f7fd bf35 	b.w	8001e04 <HAL_I2C_EV_IRQHandler>
 8003f9a:	bf00      	nop
 8003f9c:	200003dc 	.word	0x200003dc

08003fa0 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003fa0:	4801      	ldr	r0, [pc, #4]	; (8003fa8 <I2C1_ER_IRQHandler+0x8>)
 8003fa2:	f7fe ba99 	b.w	80024d8 <HAL_I2C_ER_IRQHandler>
 8003fa6:	bf00      	nop
 8003fa8:	200003dc 	.word	0x200003dc

08003fac <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003fac:	4801      	ldr	r0, [pc, #4]	; (8003fb4 <USART2_IRQHandler+0x8>)
 8003fae:	f7ff bbbd 	b.w	800372c <HAL_UART_IRQHandler>
 8003fb2:	bf00      	nop
 8003fb4:	200006c8 	.word	0x200006c8

08003fb8 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003fb8:	4801      	ldr	r0, [pc, #4]	; (8003fc0 <DMA1_Stream7_IRQHandler+0x8>)
 8003fba:	f7fd bc7b 	b.w	80018b4 <HAL_DMA_IRQHandler>
 8003fbe:	bf00      	nop
 8003fc0:	2000037c 	.word	0x2000037c

08003fc4 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003fc4:	4801      	ldr	r0, [pc, #4]	; (8003fcc <DMA2_Stream1_IRQHandler+0x8>)
 8003fc6:	f7fd bc75 	b.w	80018b4 <HAL_DMA_IRQHandler>
 8003fca:	bf00      	nop
 8003fcc:	20000568 	.word	0x20000568

08003fd0 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8003fd0:	4801      	ldr	r0, [pc, #4]	; (8003fd8 <DMA2_Stream6_IRQHandler+0x8>)
 8003fd2:	f7fd bc6f 	b.w	80018b4 <HAL_DMA_IRQHandler>
 8003fd6:	bf00      	nop
 8003fd8:	200005c8 	.word	0x200005c8

08003fdc <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003fdc:	4801      	ldr	r0, [pc, #4]	; (8003fe4 <USART6_IRQHandler+0x8>)
 8003fde:	f7ff bba5 	b.w	800372c <HAL_UART_IRQHandler>
 8003fe2:	bf00      	nop
 8003fe4:	20000688 	.word	0x20000688

08003fe8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8003fe8:	b570      	push	{r4, r5, r6, lr}
 8003fea:	460e      	mov	r6, r1
 8003fec:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fee:	460c      	mov	r4, r1
 8003ff0:	1ba3      	subs	r3, r4, r6
 8003ff2:	429d      	cmp	r5, r3
 8003ff4:	dc01      	bgt.n	8003ffa <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8003ff6:	4628      	mov	r0, r5
 8003ff8:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8003ffa:	f7ff fcf6 	bl	80039ea <__io_getchar>
 8003ffe:	f804 0b01 	strb.w	r0, [r4], #1
 8004002:	e7f5      	b.n	8003ff0 <_read+0x8>

08004004 <_write>:

int _write(int file, char *ptr, int len)
{
 8004004:	b570      	push	{r4, r5, r6, lr}
 8004006:	460e      	mov	r6, r1
 8004008:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800400a:	460c      	mov	r4, r1
 800400c:	1ba3      	subs	r3, r4, r6
 800400e:	429d      	cmp	r5, r3
 8004010:	dc01      	bgt.n	8004016 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8004012:	4628      	mov	r0, r5
 8004014:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8004016:	f814 0b01 	ldrb.w	r0, [r4], #1
 800401a:	f7ff fce1 	bl	80039e0 <__io_putchar>
 800401e:	e7f5      	b.n	800400c <_write+0x8>

08004020 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8004020:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004022:	4b0a      	ldr	r3, [pc, #40]	; (800404c <_sbrk+0x2c>)
 8004024:	6819      	ldr	r1, [r3, #0]
{
 8004026:	4602      	mov	r2, r0
	if (heap_end == 0)
 8004028:	b909      	cbnz	r1, 800402e <_sbrk+0xe>
		heap_end = &end;
 800402a:	4909      	ldr	r1, [pc, #36]	; (8004050 <_sbrk+0x30>)
 800402c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800402e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8004030:	4669      	mov	r1, sp
 8004032:	4402      	add	r2, r0
 8004034:	428a      	cmp	r2, r1
 8004036:	d906      	bls.n	8004046 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8004038:	f000 fabc 	bl	80045b4 <__errno>
 800403c:	230c      	movs	r3, #12
 800403e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8004040:	f04f 30ff 	mov.w	r0, #4294967295
 8004044:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8004046:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8004048:	bd08      	pop	{r3, pc}
 800404a:	bf00      	nop
 800404c:	20000204 	.word	0x20000204
 8004050:	2000070c 	.word	0x2000070c

08004054 <_close>:

int _close(int file)
{
	return -1;
}
 8004054:	f04f 30ff 	mov.w	r0, #4294967295
 8004058:	4770      	bx	lr

0800405a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800405a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800405e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8004060:	2000      	movs	r0, #0
 8004062:	4770      	bx	lr

08004064 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8004064:	2001      	movs	r0, #1
 8004066:	4770      	bx	lr

08004068 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8004068:	2000      	movs	r0, #0
 800406a:	4770      	bx	lr

0800406c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800406c:	490f      	ldr	r1, [pc, #60]	; (80040ac <SystemInit+0x40>)
 800406e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004072:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800407a:	4b0d      	ldr	r3, [pc, #52]	; (80040b0 <SystemInit+0x44>)
 800407c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800407e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8004080:	f042 0201 	orr.w	r2, r2, #1
 8004084:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8004086:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800408e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004092:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004094:	4a07      	ldr	r2, [pc, #28]	; (80040b4 <SystemInit+0x48>)
 8004096:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800409e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80040a0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80040a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80040a6:	608b      	str	r3, [r1, #8]
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	e000ed00 	.word	0xe000ed00
 80040b0:	40023800 	.word	0x40023800
 80040b4:	24003010 	.word	0x24003010

080040b8 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 80040b8:	6803      	ldr	r3, [r0, #0]
 80040ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 80040be:	b507      	push	{r0, r1, r2, lr}
  if(tim_baseHandle->Instance==TIM2)
 80040c0:	d116      	bne.n	80040f0 <HAL_TIM_Base_MspInit+0x38>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040c2:	2200      	movs	r2, #0
 80040c4:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80040c8:	9200      	str	r2, [sp, #0]
 80040ca:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80040cc:	f041 0101 	orr.w	r1, r1, #1
 80040d0:	6419      	str	r1, [r3, #64]	; 0x40
 80040d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d4:	f003 0301 	and.w	r3, r3, #1
 80040d8:	9300      	str	r3, [sp, #0]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80040da:	201c      	movs	r0, #28
 80040dc:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040de:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80040e0:	f7fd faa0 	bl	8001624 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80040e4:	201c      	movs	r0, #28
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80040e6:	f7fd fad1 	bl	800168c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80040ea:	b003      	add	sp, #12
 80040ec:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_baseHandle->Instance==TIM3)
 80040f0:	4a0a      	ldr	r2, [pc, #40]	; (800411c <HAL_TIM_Base_MspInit+0x64>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d1f9      	bne.n	80040ea <HAL_TIM_Base_MspInit+0x32>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80040f6:	2200      	movs	r2, #0
 80040f8:	4b09      	ldr	r3, [pc, #36]	; (8004120 <HAL_TIM_Base_MspInit+0x68>)
 80040fa:	9201      	str	r2, [sp, #4]
 80040fc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80040fe:	f041 0102 	orr.w	r1, r1, #2
 8004102:	6419      	str	r1, [r3, #64]	; 0x40
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800410c:	201d      	movs	r0, #29
 800410e:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004110:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004112:	f7fd fa87 	bl	8001624 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004116:	201d      	movs	r0, #29
 8004118:	e7e5      	b.n	80040e6 <HAL_TIM_Base_MspInit+0x2e>
 800411a:	bf00      	nop
 800411c:	40000400 	.word	0x40000400
 8004120:	40023800 	.word	0x40023800

08004124 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004124:	b510      	push	{r4, lr}
 8004126:	4604      	mov	r4, r0
 8004128:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800412a:	2214      	movs	r2, #20
 800412c:	2100      	movs	r1, #0
 800412e:	a803      	add	r0, sp, #12
 8004130:	f000 fc93 	bl	8004a5a <memset>
  if(timHandle->Instance==TIM2)
 8004134:	6823      	ldr	r3, [r4, #0]
 8004136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800413a:	d117      	bne.n	800416c <HAL_TIM_MspPostInit+0x48>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800413c:	2300      	movs	r3, #0
 800413e:	9301      	str	r3, [sp, #4]
 8004140:	4b16      	ldr	r3, [pc, #88]	; (800419c <HAL_TIM_MspPostInit+0x78>)
    GPIO_InitStruct.Pin = PWM_IN1B_TIM2CH1_Pin|PWM_IN2B_TIM2CH2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004142:	4817      	ldr	r0, [pc, #92]	; (80041a0 <HAL_TIM_MspPostInit+0x7c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004144:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004146:	f042 0201 	orr.w	r2, r2, #1
 800414a:	631a      	str	r2, [r3, #48]	; 0x30
 800414c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	9301      	str	r3, [sp, #4]
 8004154:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = PWM_IN1B_TIM2CH1_Pin|PWM_IN2B_TIM2CH2_Pin;
 8004156:	2303      	movs	r3, #3
 8004158:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800415a:	2302      	movs	r3, #2
 800415c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800415e:	2301      	movs	r3, #1
 8004160:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004162:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = PWM_IN1A_TIM3CH1_Pin|PWM_IN2A_TIM3CH2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004164:	f7fd fc60 	bl	8001a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004168:	b008      	add	sp, #32
 800416a:	bd10      	pop	{r4, pc}
  else if(timHandle->Instance==TIM3)
 800416c:	4a0d      	ldr	r2, [pc, #52]	; (80041a4 <HAL_TIM_MspPostInit+0x80>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d1fa      	bne.n	8004168 <HAL_TIM_MspPostInit+0x44>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004172:	2300      	movs	r3, #0
 8004174:	9302      	str	r3, [sp, #8]
 8004176:	4b09      	ldr	r3, [pc, #36]	; (800419c <HAL_TIM_MspPostInit+0x78>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004178:	480b      	ldr	r0, [pc, #44]	; (80041a8 <HAL_TIM_MspPostInit+0x84>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800417a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800417c:	f042 0202 	orr.w	r2, r2, #2
 8004180:	631a      	str	r2, [r3, #48]	; 0x30
 8004182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	9302      	str	r3, [sp, #8]
 800418a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = PWM_IN1A_TIM3CH1_Pin|PWM_IN2A_TIM3CH2_Pin;
 800418c:	2330      	movs	r3, #48	; 0x30
 800418e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004190:	2302      	movs	r3, #2
 8004192:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004194:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004196:	a903      	add	r1, sp, #12
 8004198:	e7e4      	b.n	8004164 <HAL_TIM_MspPostInit+0x40>
 800419a:	bf00      	nop
 800419c:	40023800 	.word	0x40023800
 80041a0:	40020000 	.word	0x40020000
 80041a4:	40000400 	.word	0x40000400
 80041a8:	40020400 	.word	0x40020400

080041ac <MX_TIM2_Init>:
{
 80041ac:	b510      	push	{r4, lr}
 80041ae:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80041b0:	2210      	movs	r2, #16
 80041b2:	2100      	movs	r1, #0
 80041b4:	a803      	add	r0, sp, #12
 80041b6:	f000 fc50 	bl	8004a5a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041ba:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80041bc:	221c      	movs	r2, #28
 80041be:	4621      	mov	r1, r4
 80041c0:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041c4:	9401      	str	r4, [sp, #4]
 80041c6:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80041c8:	f000 fc47 	bl	8004a5a <memset>
  htim2.Instance = TIM2;
 80041cc:	4820      	ldr	r0, [pc, #128]	; (8004250 <MX_TIM2_Init+0xa4>)
 80041ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 0;
 80041d2:	e880 0018 	stmia.w	r0, {r3, r4}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041d6:	6084      	str	r4, [r0, #8]
  htim2.Init.Period = 0;
 80041d8:	60c4      	str	r4, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041da:	6104      	str	r4, [r0, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80041dc:	f7fe fee6 	bl	8002fac <HAL_TIM_Base_Init>
 80041e0:	b108      	cbz	r0, 80041e6 <MX_TIM2_Init+0x3a>
    Error_Handler();
 80041e2:	f7ff fe45 	bl	8003e70 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80041ea:	a903      	add	r1, sp, #12
 80041ec:	4818      	ldr	r0, [pc, #96]	; (8004250 <MX_TIM2_Init+0xa4>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041ee:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80041f0:	f7fe fd2f 	bl	8002c52 <HAL_TIM_ConfigClockSource>
 80041f4:	b108      	cbz	r0, 80041fa <MX_TIM2_Init+0x4e>
    Error_Handler();
 80041f6:	f7ff fe3b 	bl	8003e70 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80041fa:	4815      	ldr	r0, [pc, #84]	; (8004250 <MX_TIM2_Init+0xa4>)
 80041fc:	f7fe fef0 	bl	8002fe0 <HAL_TIM_PWM_Init>
 8004200:	b108      	cbz	r0, 8004206 <MX_TIM2_Init+0x5a>
    Error_Handler();
 8004202:	f7ff fe35 	bl	8003e70 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004206:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004208:	a901      	add	r1, sp, #4
 800420a:	4811      	ldr	r0, [pc, #68]	; (8004250 <MX_TIM2_Init+0xa4>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800420c:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800420e:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004210:	f7fe ffde 	bl	80031d0 <HAL_TIMEx_MasterConfigSynchronization>
 8004214:	b108      	cbz	r0, 800421a <MX_TIM2_Init+0x6e>
    Error_Handler();
 8004216:	f7ff fe2b 	bl	8003e70 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800421a:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800421c:	2200      	movs	r2, #0
 800421e:	a907      	add	r1, sp, #28
 8004220:	480b      	ldr	r0, [pc, #44]	; (8004250 <MX_TIM2_Init+0xa4>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004222:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 8004224:	9408      	str	r4, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004226:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004228:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800422a:	f7fe ff1f 	bl	800306c <HAL_TIM_PWM_ConfigChannel>
 800422e:	b108      	cbz	r0, 8004234 <MX_TIM2_Init+0x88>
    Error_Handler();
 8004230:	f7ff fe1e 	bl	8003e70 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004234:	2204      	movs	r2, #4
 8004236:	a907      	add	r1, sp, #28
 8004238:	4805      	ldr	r0, [pc, #20]	; (8004250 <MX_TIM2_Init+0xa4>)
 800423a:	f7fe ff17 	bl	800306c <HAL_TIM_PWM_ConfigChannel>
 800423e:	b108      	cbz	r0, 8004244 <MX_TIM2_Init+0x98>
    Error_Handler();
 8004240:	f7ff fe16 	bl	8003e70 <Error_Handler>
  HAL_TIM_MspPostInit(&htim2);
 8004244:	4802      	ldr	r0, [pc, #8]	; (8004250 <MX_TIM2_Init+0xa4>)
 8004246:	f7ff ff6d 	bl	8004124 <HAL_TIM_MspPostInit>
}
 800424a:	b00e      	add	sp, #56	; 0x38
 800424c:	bd10      	pop	{r4, pc}
 800424e:	bf00      	nop
 8004250:	200004cc 	.word	0x200004cc

08004254 <MX_TIM3_Init>:
{
 8004254:	b510      	push	{r4, lr}
 8004256:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004258:	2210      	movs	r2, #16
 800425a:	2100      	movs	r1, #0
 800425c:	a803      	add	r0, sp, #12
 800425e:	f000 fbfc 	bl	8004a5a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004262:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004264:	221c      	movs	r2, #28
 8004266:	4621      	mov	r1, r4
 8004268:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800426c:	9401      	str	r4, [sp, #4]
 800426e:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004270:	f000 fbf3 	bl	8004a5a <memset>
  htim3.Instance = TIM3;
 8004274:	481f      	ldr	r0, [pc, #124]	; (80042f4 <MX_TIM3_Init+0xa0>)
 8004276:	4b20      	ldr	r3, [pc, #128]	; (80042f8 <MX_TIM3_Init+0xa4>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004278:	6084      	str	r4, [r0, #8]
  htim3.Init.Prescaler = 0;
 800427a:	e880 0018 	stmia.w	r0, {r3, r4}
  htim3.Init.Period = 0;
 800427e:	60c4      	str	r4, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004280:	6104      	str	r4, [r0, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004282:	f7fe fe93 	bl	8002fac <HAL_TIM_Base_Init>
 8004286:	b108      	cbz	r0, 800428c <MX_TIM3_Init+0x38>
    Error_Handler();
 8004288:	f7ff fdf2 	bl	8003e70 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800428c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004290:	a903      	add	r1, sp, #12
 8004292:	4818      	ldr	r0, [pc, #96]	; (80042f4 <MX_TIM3_Init+0xa0>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004294:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004296:	f7fe fcdc 	bl	8002c52 <HAL_TIM_ConfigClockSource>
 800429a:	b108      	cbz	r0, 80042a0 <MX_TIM3_Init+0x4c>
    Error_Handler();
 800429c:	f7ff fde8 	bl	8003e70 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80042a0:	4814      	ldr	r0, [pc, #80]	; (80042f4 <MX_TIM3_Init+0xa0>)
 80042a2:	f7fe fe9d 	bl	8002fe0 <HAL_TIM_PWM_Init>
 80042a6:	b108      	cbz	r0, 80042ac <MX_TIM3_Init+0x58>
    Error_Handler();
 80042a8:	f7ff fde2 	bl	8003e70 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042ac:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80042ae:	a901      	add	r1, sp, #4
 80042b0:	4810      	ldr	r0, [pc, #64]	; (80042f4 <MX_TIM3_Init+0xa0>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042b2:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042b4:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80042b6:	f7fe ff8b 	bl	80031d0 <HAL_TIMEx_MasterConfigSynchronization>
 80042ba:	b108      	cbz	r0, 80042c0 <MX_TIM3_Init+0x6c>
    Error_Handler();
 80042bc:	f7ff fdd8 	bl	8003e70 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80042c0:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80042c2:	2200      	movs	r2, #0
 80042c4:	a907      	add	r1, sp, #28
 80042c6:	480b      	ldr	r0, [pc, #44]	; (80042f4 <MX_TIM3_Init+0xa0>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80042c8:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 80042ca:	9408      	str	r4, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80042cc:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80042ce:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80042d0:	f7fe fecc 	bl	800306c <HAL_TIM_PWM_ConfigChannel>
 80042d4:	b108      	cbz	r0, 80042da <MX_TIM3_Init+0x86>
    Error_Handler();
 80042d6:	f7ff fdcb 	bl	8003e70 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80042da:	2204      	movs	r2, #4
 80042dc:	a907      	add	r1, sp, #28
 80042de:	4805      	ldr	r0, [pc, #20]	; (80042f4 <MX_TIM3_Init+0xa0>)
 80042e0:	f7fe fec4 	bl	800306c <HAL_TIM_PWM_ConfigChannel>
 80042e4:	b108      	cbz	r0, 80042ea <MX_TIM3_Init+0x96>
    Error_Handler();
 80042e6:	f7ff fdc3 	bl	8003e70 <Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 80042ea:	4802      	ldr	r0, [pc, #8]	; (80042f4 <MX_TIM3_Init+0xa0>)
 80042ec:	f7ff ff1a 	bl	8004124 <HAL_TIM_MspPostInit>
}
 80042f0:	b00e      	add	sp, #56	; 0x38
 80042f2:	bd10      	pop	{r4, pc}
 80042f4:	20000490 	.word	0x20000490
 80042f8:	40000400 	.word	0x40000400

080042fc <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80042fc:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 80042fe:	480b      	ldr	r0, [pc, #44]	; (800432c <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 8004300:	4b0b      	ldr	r3, [pc, #44]	; (8004330 <MX_USART2_UART_Init+0x34>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004302:	2200      	movs	r2, #0
  huart2.Init.BaudRate = 115200;
 8004304:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8004308:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_MultiProcessor_Init(&huart2, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 800430c:	4611      	mov	r1, r2
  huart2.Init.Mode = UART_MODE_TX_RX;
 800430e:	230c      	movs	r3, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004310:	6082      	str	r2, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004312:	60c2      	str	r2, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004314:	6102      	str	r2, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004316:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004318:	6182      	str	r2, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800431a:	61c2      	str	r2, [r0, #28]
  if (HAL_MultiProcessor_Init(&huart2, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 800431c:	f7ff f8a4 	bl	8003468 <HAL_MultiProcessor_Init>
 8004320:	b118      	cbz	r0, 800432a <MX_USART2_UART_Init+0x2e>
  {
    Error_Handler();
  }

}
 8004322:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8004326:	f7ff bda3 	b.w	8003e70 <Error_Handler>
 800432a:	bd08      	pop	{r3, pc}
 800432c:	200006c8 	.word	0x200006c8
 8004330:	40004400 	.word	0x40004400

08004334 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004334:	b508      	push	{r3, lr}

  huart6.Instance = USART6;
 8004336:	480b      	ldr	r0, [pc, #44]	; (8004364 <MX_USART6_UART_Init+0x30>)
  huart6.Init.BaudRate = 115200;
 8004338:	4b0b      	ldr	r3, [pc, #44]	; (8004368 <MX_USART6_UART_Init+0x34>)
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800433a:	2200      	movs	r2, #0
  huart6.Init.BaudRate = 115200;
 800433c:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8004340:	e880 4008 	stmia.w	r0, {r3, lr}
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_MultiProcessor_Init(&huart6, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8004344:	4611      	mov	r1, r2
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004346:	230c      	movs	r3, #12
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004348:	6082      	str	r2, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800434a:	60c2      	str	r2, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800434c:	6102      	str	r2, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800434e:	6143      	str	r3, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004350:	6182      	str	r2, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004352:	61c2      	str	r2, [r0, #28]
  if (HAL_MultiProcessor_Init(&huart6, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8004354:	f7ff f888 	bl	8003468 <HAL_MultiProcessor_Init>
 8004358:	b118      	cbz	r0, 8004362 <MX_USART6_UART_Init+0x2e>
  {
    Error_Handler();
  }

}
 800435a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800435e:	f7ff bd87 	b.w	8003e70 <Error_Handler>
 8004362:	bd08      	pop	{r3, pc}
 8004364:	20000688 	.word	0x20000688
 8004368:	40011400 	.word	0x40011400

0800436c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800436c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004370:	2214      	movs	r2, #20
{
 8004372:	b08a      	sub	sp, #40	; 0x28
 8004374:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004376:	2100      	movs	r1, #0
 8004378:	eb0d 0002 	add.w	r0, sp, r2
 800437c:	f000 fb6d 	bl	8004a5a <memset>
  if(uartHandle->Instance==USART2)
 8004380:	682b      	ldr	r3, [r5, #0]
 8004382:	4a6a      	ldr	r2, [pc, #424]	; (800452c <HAL_UART_MspInit+0x1c0>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d15b      	bne.n	8004440 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004388:	2600      	movs	r6, #0
 800438a:	4b69      	ldr	r3, [pc, #420]	; (8004530 <HAL_UART_MspInit+0x1c4>)
 800438c:	9600      	str	r6, [sp, #0]
 800438e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004390:	4868      	ldr	r0, [pc, #416]	; (8004534 <HAL_UART_MspInit+0x1c8>)

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004392:	4c69      	ldr	r4, [pc, #420]	; (8004538 <HAL_UART_MspInit+0x1cc>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8004394:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004398:	641a      	str	r2, [r3, #64]	; 0x40
 800439a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800439c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80043a0:	9200      	str	r2, [sp, #0]
 80043a2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043a4:	9601      	str	r6, [sp, #4]
 80043a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043a8:	f042 0201 	orr.w	r2, r2, #1
 80043ac:	631a      	str	r2, [r3, #48]	; 0x30
 80043ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	9301      	str	r3, [sp, #4]
 80043b6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80043b8:	230c      	movs	r3, #12
 80043ba:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043bc:	2302      	movs	r3, #2
 80043be:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043c0:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80043c2:	2307      	movs	r3, #7
 80043c4:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043c6:	f7fd fb2f 	bl	8001a28 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80043ca:	4b5c      	ldr	r3, [pc, #368]	; (800453c <HAL_UART_MspInit+0x1d0>)
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043cc:	60a6      	str	r6, [r4, #8]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80043ce:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
 80043d2:	e884 0088 	stmia.w	r4, {r3, r7}
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80043d6:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80043d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043dc:	60e6      	str	r6, [r4, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80043de:	6123      	str	r3, [r4, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043e0:	6166      	str	r6, [r4, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043e2:	61a6      	str	r6, [r4, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80043e4:	61e6      	str	r6, [r4, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80043e6:	6226      	str	r6, [r4, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043e8:	6266      	str	r6, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80043ea:	f7fd f995 	bl	8001718 <HAL_DMA_Init>
 80043ee:	b108      	cbz	r0, 80043f4 <HAL_UART_MspInit+0x88>
    {
      Error_Handler();
 80043f0:	f7ff fd3e 	bl	8003e70 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80043f4:	636c      	str	r4, [r5, #52]	; 0x34

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80043f6:	4852      	ldr	r0, [pc, #328]	; (8004540 <HAL_UART_MspInit+0x1d4>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80043f8:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80043fa:	4c52      	ldr	r4, [pc, #328]	; (8004544 <HAL_UART_MspInit+0x1d8>)
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80043fc:	2340      	movs	r3, #64	; 0x40
 80043fe:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8004402:	e884 000b 	stmia.w	r4, {r0, r1, r3}
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004406:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800440a:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800440c:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800440e:	60e3      	str	r3, [r4, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004410:	6122      	str	r2, [r4, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004412:	6163      	str	r3, [r4, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004414:	61a3      	str	r3, [r4, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004416:	61e3      	str	r3, [r4, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004418:	6223      	str	r3, [r4, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800441a:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800441c:	f7fd f97c 	bl	8001718 <HAL_DMA_Init>
 8004420:	b108      	cbz	r0, 8004426 <HAL_UART_MspInit+0xba>
    {
      Error_Handler();
 8004422:	f7ff fd25 	bl	8003e70 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004426:	2200      	movs	r2, #0
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8004428:	632c      	str	r4, [r5, #48]	; 0x30
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800442a:	2026      	movs	r0, #38	; 0x26
 800442c:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800442e:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004430:	f7fd f8f8 	bl	8001624 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004434:	2026      	movs	r0, #38	; 0x26

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004436:	f7fd f929 	bl	800168c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800443a:	b00a      	add	sp, #40	; 0x28
 800443c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(uartHandle->Instance==USART6)
 8004440:	4a41      	ldr	r2, [pc, #260]	; (8004548 <HAL_UART_MspInit+0x1dc>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d1f9      	bne.n	800443a <HAL_UART_MspInit+0xce>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004446:	2600      	movs	r6, #0
 8004448:	4b39      	ldr	r3, [pc, #228]	; (8004530 <HAL_UART_MspInit+0x1c4>)
 800444a:	9602      	str	r6, [sp, #8]
 800444c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(RPI_USART6TX_GPIO_Port, &GPIO_InitStruct);
 800444e:	483f      	ldr	r0, [pc, #252]	; (800454c <HAL_UART_MspInit+0x1e0>)
    __HAL_RCC_USART6_CLK_ENABLE();
 8004450:	f042 0220 	orr.w	r2, r2, #32
 8004454:	645a      	str	r2, [r3, #68]	; 0x44
 8004456:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004458:	f002 0220 	and.w	r2, r2, #32
 800445c:	9202      	str	r2, [sp, #8]
 800445e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004460:	9603      	str	r6, [sp, #12]
 8004462:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004464:	f042 0204 	orr.w	r2, r2, #4
 8004468:	631a      	str	r2, [r3, #48]	; 0x30
 800446a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800446c:	f002 0204 	and.w	r2, r2, #4
 8004470:	9203      	str	r2, [sp, #12]
 8004472:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004474:	9604      	str	r6, [sp, #16]
 8004476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004478:	f042 0201 	orr.w	r2, r2, #1
 800447c:	631a      	str	r2, [r3, #48]	; 0x30
 800447e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004486:	2408      	movs	r4, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004488:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800448a:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = RPI_USART6TX_Pin;
 800448c:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800448e:	f04f 0802 	mov.w	r8, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004492:	2703      	movs	r7, #3
    HAL_GPIO_Init(RPI_USART6TX_GPIO_Port, &GPIO_InitStruct);
 8004494:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = RPI_USART6TX_Pin;
 8004496:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004498:	f8cd 8018 	str.w	r8, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800449c:	9708      	str	r7, [sp, #32]
    HAL_GPIO_Init(RPI_USART6TX_GPIO_Port, &GPIO_InitStruct);
 800449e:	f7fd fac3 	bl	8001a28 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RPI_USART6RX_Pin;
 80044a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    HAL_GPIO_Init(RPI_USART6RX_GPIO_Port, &GPIO_InitStruct);
 80044a6:	4823      	ldr	r0, [pc, #140]	; (8004534 <HAL_UART_MspInit+0x1c8>)
    GPIO_InitStruct.Pin = RPI_USART6RX_Pin;
 80044a8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(RPI_USART6RX_GPIO_Port, &GPIO_InitStruct);
 80044aa:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80044ac:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ae:	f8cd 8018 	str.w	r8, [sp, #24]
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80044b2:	4c27      	ldr	r4, [pc, #156]	; (8004550 <HAL_UART_MspInit+0x1e4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b4:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044b6:	9708      	str	r7, [sp, #32]
    HAL_GPIO_Init(RPI_USART6RX_GPIO_Port, &GPIO_InitStruct);
 80044b8:	f7fd fab6 	bl	8001a28 <HAL_GPIO_Init>
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80044bc:	4b25      	ldr	r3, [pc, #148]	; (8004554 <HAL_UART_MspInit+0x1e8>)
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80044be:	60a6      	str	r6, [r4, #8]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80044c0:	f04f 6e20 	mov.w	lr, #167772160	; 0xa000000
 80044c4:	e884 4008 	stmia.w	r4, {r3, lr}
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80044c8:	4620      	mov	r0, r4
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80044ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044ce:	60e6      	str	r6, [r4, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80044d0:	6123      	str	r3, [r4, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80044d2:	6166      	str	r6, [r4, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80044d4:	61a6      	str	r6, [r4, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80044d6:	61e6      	str	r6, [r4, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80044d8:	6226      	str	r6, [r4, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80044da:	6266      	str	r6, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80044dc:	f7fd f91c 	bl	8001718 <HAL_DMA_Init>
 80044e0:	b108      	cbz	r0, 80044e6 <HAL_UART_MspInit+0x17a>
      Error_Handler();
 80044e2:	f7ff fcc5 	bl	8003e70 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80044e6:	636c      	str	r4, [r5, #52]	; 0x34
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80044e8:	4b1b      	ldr	r3, [pc, #108]	; (8004558 <HAL_UART_MspInit+0x1ec>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80044ea:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80044ec:	4c1b      	ldr	r4, [pc, #108]	; (800455c <HAL_UART_MspInit+0x1f0>)
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80044ee:	f04f 6620 	mov.w	r6, #167772160	; 0xa000000
 80044f2:	2740      	movs	r7, #64	; 0x40
 80044f4:	e884 00c8 	stmia.w	r4, {r3, r6, r7}
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80044f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044fc:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80044fe:	4620      	mov	r0, r4
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004500:	60e3      	str	r3, [r4, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004502:	6122      	str	r2, [r4, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004504:	6163      	str	r3, [r4, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004506:	61a3      	str	r3, [r4, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8004508:	61e3      	str	r3, [r4, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 800450a:	6223      	str	r3, [r4, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800450c:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800450e:	f7fd f903 	bl	8001718 <HAL_DMA_Init>
 8004512:	b108      	cbz	r0, 8004518 <HAL_UART_MspInit+0x1ac>
      Error_Handler();
 8004514:	f7ff fcac 	bl	8003e70 <Error_Handler>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8004518:	2200      	movs	r2, #0
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 800451a:	632c      	str	r4, [r5, #48]	; 0x30
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800451c:	2047      	movs	r0, #71	; 0x47
 800451e:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8004520:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8004522:	f7fd f87f 	bl	8001624 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004526:	2047      	movs	r0, #71	; 0x47
 8004528:	e785      	b.n	8004436 <HAL_UART_MspInit+0xca>
 800452a:	bf00      	nop
 800452c:	40004400 	.word	0x40004400
 8004530:	40023800 	.word	0x40023800
 8004534:	40020000 	.word	0x40020000
 8004538:	20000508 	.word	0x20000508
 800453c:	40026088 	.word	0x40026088
 8004540:	400260a0 	.word	0x400260a0
 8004544:	20000628 	.word	0x20000628
 8004548:	40011400 	.word	0x40011400
 800454c:	40020800 	.word	0x40020800
 8004550:	20000568 	.word	0x20000568
 8004554:	40026428 	.word	0x40026428
 8004558:	400264a0 	.word	0x400264a0
 800455c:	200005c8 	.word	0x200005c8

08004560 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004560:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004598 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004564:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004566:	e003      	b.n	8004570 <LoopCopyDataInit>

08004568 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004568:	4b0c      	ldr	r3, [pc, #48]	; (800459c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800456a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800456c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800456e:	3104      	adds	r1, #4

08004570 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004570:	480b      	ldr	r0, [pc, #44]	; (80045a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004572:	4b0c      	ldr	r3, [pc, #48]	; (80045a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004574:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004576:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004578:	d3f6      	bcc.n	8004568 <CopyDataInit>
  ldr  r2, =_sbss
 800457a:	4a0b      	ldr	r2, [pc, #44]	; (80045a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800457c:	e002      	b.n	8004584 <LoopFillZerobss>

0800457e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800457e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004580:	f842 3b04 	str.w	r3, [r2], #4

08004584 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004584:	4b09      	ldr	r3, [pc, #36]	; (80045ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004586:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004588:	d3f9      	bcc.n	800457e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800458a:	f7ff fd6f 	bl	800406c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800458e:	f000 fa2d 	bl	80049ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004592:	f7ff fbef 	bl	8003d74 <main>
  bx  lr    
 8004596:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004598:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 800459c:	080059e8 	.word	0x080059e8
  ldr  r0, =_sdata
 80045a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80045a4:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 80045a8:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 80045ac:	2000070c 	.word	0x2000070c

080045b0 <DMA1_Stream1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80045b0:	e7fe      	b.n	80045b0 <DMA1_Stream1_IRQHandler>
	...

080045b4 <__errno>:
 80045b4:	4b01      	ldr	r3, [pc, #4]	; (80045bc <__errno+0x8>)
 80045b6:	6818      	ldr	r0, [r3, #0]
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	2000017c 	.word	0x2000017c

080045c0 <__sflush_r>:
 80045c0:	898a      	ldrh	r2, [r1, #12]
 80045c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045c6:	4605      	mov	r5, r0
 80045c8:	0710      	lsls	r0, r2, #28
 80045ca:	460c      	mov	r4, r1
 80045cc:	d45a      	bmi.n	8004684 <__sflush_r+0xc4>
 80045ce:	684b      	ldr	r3, [r1, #4]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	dc05      	bgt.n	80045e0 <__sflush_r+0x20>
 80045d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	dc02      	bgt.n	80045e0 <__sflush_r+0x20>
 80045da:	2000      	movs	r0, #0
 80045dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045e2:	2e00      	cmp	r6, #0
 80045e4:	d0f9      	beq.n	80045da <__sflush_r+0x1a>
 80045e6:	2300      	movs	r3, #0
 80045e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80045ec:	682f      	ldr	r7, [r5, #0]
 80045ee:	602b      	str	r3, [r5, #0]
 80045f0:	d033      	beq.n	800465a <__sflush_r+0x9a>
 80045f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80045f4:	89a3      	ldrh	r3, [r4, #12]
 80045f6:	075a      	lsls	r2, r3, #29
 80045f8:	d505      	bpl.n	8004606 <__sflush_r+0x46>
 80045fa:	6863      	ldr	r3, [r4, #4]
 80045fc:	1ac0      	subs	r0, r0, r3
 80045fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004600:	b10b      	cbz	r3, 8004606 <__sflush_r+0x46>
 8004602:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004604:	1ac0      	subs	r0, r0, r3
 8004606:	2300      	movs	r3, #0
 8004608:	4602      	mov	r2, r0
 800460a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800460c:	6a21      	ldr	r1, [r4, #32]
 800460e:	4628      	mov	r0, r5
 8004610:	47b0      	blx	r6
 8004612:	1c43      	adds	r3, r0, #1
 8004614:	89a3      	ldrh	r3, [r4, #12]
 8004616:	d106      	bne.n	8004626 <__sflush_r+0x66>
 8004618:	6829      	ldr	r1, [r5, #0]
 800461a:	291d      	cmp	r1, #29
 800461c:	d84b      	bhi.n	80046b6 <__sflush_r+0xf6>
 800461e:	4a2b      	ldr	r2, [pc, #172]	; (80046cc <__sflush_r+0x10c>)
 8004620:	40ca      	lsrs	r2, r1
 8004622:	07d6      	lsls	r6, r2, #31
 8004624:	d547      	bpl.n	80046b6 <__sflush_r+0xf6>
 8004626:	2200      	movs	r2, #0
 8004628:	6062      	str	r2, [r4, #4]
 800462a:	04d9      	lsls	r1, r3, #19
 800462c:	6922      	ldr	r2, [r4, #16]
 800462e:	6022      	str	r2, [r4, #0]
 8004630:	d504      	bpl.n	800463c <__sflush_r+0x7c>
 8004632:	1c42      	adds	r2, r0, #1
 8004634:	d101      	bne.n	800463a <__sflush_r+0x7a>
 8004636:	682b      	ldr	r3, [r5, #0]
 8004638:	b903      	cbnz	r3, 800463c <__sflush_r+0x7c>
 800463a:	6560      	str	r0, [r4, #84]	; 0x54
 800463c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800463e:	602f      	str	r7, [r5, #0]
 8004640:	2900      	cmp	r1, #0
 8004642:	d0ca      	beq.n	80045da <__sflush_r+0x1a>
 8004644:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004648:	4299      	cmp	r1, r3
 800464a:	d002      	beq.n	8004652 <__sflush_r+0x92>
 800464c:	4628      	mov	r0, r5
 800464e:	f000 fa0d 	bl	8004a6c <_free_r>
 8004652:	2000      	movs	r0, #0
 8004654:	6360      	str	r0, [r4, #52]	; 0x34
 8004656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800465a:	6a21      	ldr	r1, [r4, #32]
 800465c:	2301      	movs	r3, #1
 800465e:	4628      	mov	r0, r5
 8004660:	47b0      	blx	r6
 8004662:	1c41      	adds	r1, r0, #1
 8004664:	d1c6      	bne.n	80045f4 <__sflush_r+0x34>
 8004666:	682b      	ldr	r3, [r5, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0c3      	beq.n	80045f4 <__sflush_r+0x34>
 800466c:	2b1d      	cmp	r3, #29
 800466e:	d001      	beq.n	8004674 <__sflush_r+0xb4>
 8004670:	2b16      	cmp	r3, #22
 8004672:	d101      	bne.n	8004678 <__sflush_r+0xb8>
 8004674:	602f      	str	r7, [r5, #0]
 8004676:	e7b0      	b.n	80045da <__sflush_r+0x1a>
 8004678:	89a3      	ldrh	r3, [r4, #12]
 800467a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800467e:	81a3      	strh	r3, [r4, #12]
 8004680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004684:	690f      	ldr	r7, [r1, #16]
 8004686:	2f00      	cmp	r7, #0
 8004688:	d0a7      	beq.n	80045da <__sflush_r+0x1a>
 800468a:	0793      	lsls	r3, r2, #30
 800468c:	680e      	ldr	r6, [r1, #0]
 800468e:	bf08      	it	eq
 8004690:	694b      	ldreq	r3, [r1, #20]
 8004692:	600f      	str	r7, [r1, #0]
 8004694:	bf18      	it	ne
 8004696:	2300      	movne	r3, #0
 8004698:	eba6 0807 	sub.w	r8, r6, r7
 800469c:	608b      	str	r3, [r1, #8]
 800469e:	f1b8 0f00 	cmp.w	r8, #0
 80046a2:	dd9a      	ble.n	80045da <__sflush_r+0x1a>
 80046a4:	4643      	mov	r3, r8
 80046a6:	463a      	mov	r2, r7
 80046a8:	6a21      	ldr	r1, [r4, #32]
 80046aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80046ac:	4628      	mov	r0, r5
 80046ae:	47b0      	blx	r6
 80046b0:	2800      	cmp	r0, #0
 80046b2:	dc07      	bgt.n	80046c4 <__sflush_r+0x104>
 80046b4:	89a3      	ldrh	r3, [r4, #12]
 80046b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046ba:	81a3      	strh	r3, [r4, #12]
 80046bc:	f04f 30ff 	mov.w	r0, #4294967295
 80046c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046c4:	4407      	add	r7, r0
 80046c6:	eba8 0800 	sub.w	r8, r8, r0
 80046ca:	e7e8      	b.n	800469e <__sflush_r+0xde>
 80046cc:	20400001 	.word	0x20400001

080046d0 <_fflush_r>:
 80046d0:	b538      	push	{r3, r4, r5, lr}
 80046d2:	690b      	ldr	r3, [r1, #16]
 80046d4:	4605      	mov	r5, r0
 80046d6:	460c      	mov	r4, r1
 80046d8:	b1db      	cbz	r3, 8004712 <_fflush_r+0x42>
 80046da:	b118      	cbz	r0, 80046e4 <_fflush_r+0x14>
 80046dc:	6983      	ldr	r3, [r0, #24]
 80046de:	b90b      	cbnz	r3, 80046e4 <_fflush_r+0x14>
 80046e0:	f000 f8de 	bl	80048a0 <__sinit>
 80046e4:	4b0c      	ldr	r3, [pc, #48]	; (8004718 <_fflush_r+0x48>)
 80046e6:	429c      	cmp	r4, r3
 80046e8:	d109      	bne.n	80046fe <_fflush_r+0x2e>
 80046ea:	686c      	ldr	r4, [r5, #4]
 80046ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046f0:	b17b      	cbz	r3, 8004712 <_fflush_r+0x42>
 80046f2:	4621      	mov	r1, r4
 80046f4:	4628      	mov	r0, r5
 80046f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046fa:	f7ff bf61 	b.w	80045c0 <__sflush_r>
 80046fe:	4b07      	ldr	r3, [pc, #28]	; (800471c <_fflush_r+0x4c>)
 8004700:	429c      	cmp	r4, r3
 8004702:	d101      	bne.n	8004708 <_fflush_r+0x38>
 8004704:	68ac      	ldr	r4, [r5, #8]
 8004706:	e7f1      	b.n	80046ec <_fflush_r+0x1c>
 8004708:	4b05      	ldr	r3, [pc, #20]	; (8004720 <_fflush_r+0x50>)
 800470a:	429c      	cmp	r4, r3
 800470c:	bf08      	it	eq
 800470e:	68ec      	ldreq	r4, [r5, #12]
 8004710:	e7ec      	b.n	80046ec <_fflush_r+0x1c>
 8004712:	2000      	movs	r0, #0
 8004714:	bd38      	pop	{r3, r4, r5, pc}
 8004716:	bf00      	nop
 8004718:	08005960 	.word	0x08005960
 800471c:	08005980 	.word	0x08005980
 8004720:	08005940 	.word	0x08005940

08004724 <fflush>:
 8004724:	4601      	mov	r1, r0
 8004726:	b920      	cbnz	r0, 8004732 <fflush+0xe>
 8004728:	4b04      	ldr	r3, [pc, #16]	; (800473c <fflush+0x18>)
 800472a:	4905      	ldr	r1, [pc, #20]	; (8004740 <fflush+0x1c>)
 800472c:	6818      	ldr	r0, [r3, #0]
 800472e:	f000 b93f 	b.w	80049b0 <_fwalk_reent>
 8004732:	4b04      	ldr	r3, [pc, #16]	; (8004744 <fflush+0x20>)
 8004734:	6818      	ldr	r0, [r3, #0]
 8004736:	f7ff bfcb 	b.w	80046d0 <_fflush_r>
 800473a:	bf00      	nop
 800473c:	080059a0 	.word	0x080059a0
 8004740:	080046d1 	.word	0x080046d1
 8004744:	2000017c 	.word	0x2000017c

08004748 <_fgets_r>:
 8004748:	2a01      	cmp	r2, #1
 800474a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800474e:	4681      	mov	r9, r0
 8004750:	460e      	mov	r6, r1
 8004752:	4690      	mov	r8, r2
 8004754:	461c      	mov	r4, r3
 8004756:	dc02      	bgt.n	800475e <_fgets_r+0x16>
 8004758:	2000      	movs	r0, #0
 800475a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800475e:	b118      	cbz	r0, 8004768 <_fgets_r+0x20>
 8004760:	6983      	ldr	r3, [r0, #24]
 8004762:	b90b      	cbnz	r3, 8004768 <_fgets_r+0x20>
 8004764:	f000 f89c 	bl	80048a0 <__sinit>
 8004768:	4b25      	ldr	r3, [pc, #148]	; (8004800 <_fgets_r+0xb8>)
 800476a:	429c      	cmp	r4, r3
 800476c:	d110      	bne.n	8004790 <_fgets_r+0x48>
 800476e:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8004772:	f108 38ff 	add.w	r8, r8, #4294967295
 8004776:	4637      	mov	r7, r6
 8004778:	6865      	ldr	r5, [r4, #4]
 800477a:	b9b5      	cbnz	r5, 80047aa <_fgets_r+0x62>
 800477c:	4621      	mov	r1, r4
 800477e:	4648      	mov	r0, r9
 8004780:	f000 faa6 	bl	8004cd0 <__srefill_r>
 8004784:	b180      	cbz	r0, 80047a8 <_fgets_r+0x60>
 8004786:	42b7      	cmp	r7, r6
 8004788:	d0e6      	beq.n	8004758 <_fgets_r+0x10>
 800478a:	2300      	movs	r3, #0
 800478c:	703b      	strb	r3, [r7, #0]
 800478e:	e025      	b.n	80047dc <_fgets_r+0x94>
 8004790:	4b1c      	ldr	r3, [pc, #112]	; (8004804 <_fgets_r+0xbc>)
 8004792:	429c      	cmp	r4, r3
 8004794:	d102      	bne.n	800479c <_fgets_r+0x54>
 8004796:	f8d9 4008 	ldr.w	r4, [r9, #8]
 800479a:	e7ea      	b.n	8004772 <_fgets_r+0x2a>
 800479c:	4b1a      	ldr	r3, [pc, #104]	; (8004808 <_fgets_r+0xc0>)
 800479e:	429c      	cmp	r4, r3
 80047a0:	bf08      	it	eq
 80047a2:	f8d9 400c 	ldreq.w	r4, [r9, #12]
 80047a6:	e7e4      	b.n	8004772 <_fgets_r+0x2a>
 80047a8:	6865      	ldr	r5, [r4, #4]
 80047aa:	f8d4 a000 	ldr.w	sl, [r4]
 80047ae:	4545      	cmp	r5, r8
 80047b0:	bf28      	it	cs
 80047b2:	4645      	movcs	r5, r8
 80047b4:	462a      	mov	r2, r5
 80047b6:	210a      	movs	r1, #10
 80047b8:	4650      	mov	r0, sl
 80047ba:	f7fb fd11 	bl	80001e0 <memchr>
 80047be:	6863      	ldr	r3, [r4, #4]
 80047c0:	b178      	cbz	r0, 80047e2 <_fgets_r+0x9a>
 80047c2:	3001      	adds	r0, #1
 80047c4:	eba0 050a 	sub.w	r5, r0, sl
 80047c8:	1b5b      	subs	r3, r3, r5
 80047ca:	e884 0009 	stmia.w	r4, {r0, r3}
 80047ce:	462a      	mov	r2, r5
 80047d0:	4651      	mov	r1, sl
 80047d2:	4638      	mov	r0, r7
 80047d4:	f000 f936 	bl	8004a44 <memcpy>
 80047d8:	2300      	movs	r3, #0
 80047da:	557b      	strb	r3, [r7, r5]
 80047dc:	4630      	mov	r0, r6
 80047de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047e2:	1b5b      	subs	r3, r3, r5
 80047e4:	6063      	str	r3, [r4, #4]
 80047e6:	6823      	ldr	r3, [r4, #0]
 80047e8:	442b      	add	r3, r5
 80047ea:	4638      	mov	r0, r7
 80047ec:	6023      	str	r3, [r4, #0]
 80047ee:	462a      	mov	r2, r5
 80047f0:	4651      	mov	r1, sl
 80047f2:	f000 f927 	bl	8004a44 <memcpy>
 80047f6:	ebb8 0805 	subs.w	r8, r8, r5
 80047fa:	442f      	add	r7, r5
 80047fc:	d1bc      	bne.n	8004778 <_fgets_r+0x30>
 80047fe:	e7c4      	b.n	800478a <_fgets_r+0x42>
 8004800:	08005960 	.word	0x08005960
 8004804:	08005980 	.word	0x08005980
 8004808:	08005940 	.word	0x08005940

0800480c <fgets>:
 800480c:	4613      	mov	r3, r2
 800480e:	460a      	mov	r2, r1
 8004810:	4601      	mov	r1, r0
 8004812:	4802      	ldr	r0, [pc, #8]	; (800481c <fgets+0x10>)
 8004814:	6800      	ldr	r0, [r0, #0]
 8004816:	f7ff bf97 	b.w	8004748 <_fgets_r>
 800481a:	bf00      	nop
 800481c:	2000017c 	.word	0x2000017c

08004820 <_cleanup_r>:
 8004820:	4901      	ldr	r1, [pc, #4]	; (8004828 <_cleanup_r+0x8>)
 8004822:	f000 b8c5 	b.w	80049b0 <_fwalk_reent>
 8004826:	bf00      	nop
 8004828:	080046d1 	.word	0x080046d1

0800482c <std.isra.0>:
 800482c:	2300      	movs	r3, #0
 800482e:	b510      	push	{r4, lr}
 8004830:	4604      	mov	r4, r0
 8004832:	6003      	str	r3, [r0, #0]
 8004834:	6043      	str	r3, [r0, #4]
 8004836:	6083      	str	r3, [r0, #8]
 8004838:	8181      	strh	r1, [r0, #12]
 800483a:	6643      	str	r3, [r0, #100]	; 0x64
 800483c:	81c2      	strh	r2, [r0, #14]
 800483e:	6103      	str	r3, [r0, #16]
 8004840:	6143      	str	r3, [r0, #20]
 8004842:	6183      	str	r3, [r0, #24]
 8004844:	4619      	mov	r1, r3
 8004846:	2208      	movs	r2, #8
 8004848:	305c      	adds	r0, #92	; 0x5c
 800484a:	f000 f906 	bl	8004a5a <memset>
 800484e:	4b05      	ldr	r3, [pc, #20]	; (8004864 <std.isra.0+0x38>)
 8004850:	6263      	str	r3, [r4, #36]	; 0x24
 8004852:	4b05      	ldr	r3, [pc, #20]	; (8004868 <std.isra.0+0x3c>)
 8004854:	62a3      	str	r3, [r4, #40]	; 0x28
 8004856:	4b05      	ldr	r3, [pc, #20]	; (800486c <std.isra.0+0x40>)
 8004858:	62e3      	str	r3, [r4, #44]	; 0x2c
 800485a:	4b05      	ldr	r3, [pc, #20]	; (8004870 <std.isra.0+0x44>)
 800485c:	6224      	str	r4, [r4, #32]
 800485e:	6323      	str	r3, [r4, #48]	; 0x30
 8004860:	bd10      	pop	{r4, pc}
 8004862:	bf00      	nop
 8004864:	08004f61 	.word	0x08004f61
 8004868:	08004f83 	.word	0x08004f83
 800486c:	08004fbb 	.word	0x08004fbb
 8004870:	08004fdf 	.word	0x08004fdf

08004874 <__sfmoreglue>:
 8004874:	b570      	push	{r4, r5, r6, lr}
 8004876:	1e4a      	subs	r2, r1, #1
 8004878:	2568      	movs	r5, #104	; 0x68
 800487a:	4355      	muls	r5, r2
 800487c:	460e      	mov	r6, r1
 800487e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004882:	f000 f941 	bl	8004b08 <_malloc_r>
 8004886:	4604      	mov	r4, r0
 8004888:	b140      	cbz	r0, 800489c <__sfmoreglue+0x28>
 800488a:	2100      	movs	r1, #0
 800488c:	e880 0042 	stmia.w	r0, {r1, r6}
 8004890:	300c      	adds	r0, #12
 8004892:	60a0      	str	r0, [r4, #8]
 8004894:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004898:	f000 f8df 	bl	8004a5a <memset>
 800489c:	4620      	mov	r0, r4
 800489e:	bd70      	pop	{r4, r5, r6, pc}

080048a0 <__sinit>:
 80048a0:	6983      	ldr	r3, [r0, #24]
 80048a2:	b510      	push	{r4, lr}
 80048a4:	4604      	mov	r4, r0
 80048a6:	bb33      	cbnz	r3, 80048f6 <__sinit+0x56>
 80048a8:	6483      	str	r3, [r0, #72]	; 0x48
 80048aa:	64c3      	str	r3, [r0, #76]	; 0x4c
 80048ac:	6503      	str	r3, [r0, #80]	; 0x50
 80048ae:	4b12      	ldr	r3, [pc, #72]	; (80048f8 <__sinit+0x58>)
 80048b0:	4a12      	ldr	r2, [pc, #72]	; (80048fc <__sinit+0x5c>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6282      	str	r2, [r0, #40]	; 0x28
 80048b6:	4298      	cmp	r0, r3
 80048b8:	bf04      	itt	eq
 80048ba:	2301      	moveq	r3, #1
 80048bc:	6183      	streq	r3, [r0, #24]
 80048be:	f000 f81f 	bl	8004900 <__sfp>
 80048c2:	6060      	str	r0, [r4, #4]
 80048c4:	4620      	mov	r0, r4
 80048c6:	f000 f81b 	bl	8004900 <__sfp>
 80048ca:	60a0      	str	r0, [r4, #8]
 80048cc:	4620      	mov	r0, r4
 80048ce:	f000 f817 	bl	8004900 <__sfp>
 80048d2:	2200      	movs	r2, #0
 80048d4:	60e0      	str	r0, [r4, #12]
 80048d6:	2104      	movs	r1, #4
 80048d8:	6860      	ldr	r0, [r4, #4]
 80048da:	f7ff ffa7 	bl	800482c <std.isra.0>
 80048de:	2201      	movs	r2, #1
 80048e0:	2109      	movs	r1, #9
 80048e2:	68a0      	ldr	r0, [r4, #8]
 80048e4:	f7ff ffa2 	bl	800482c <std.isra.0>
 80048e8:	2202      	movs	r2, #2
 80048ea:	2112      	movs	r1, #18
 80048ec:	68e0      	ldr	r0, [r4, #12]
 80048ee:	f7ff ff9d 	bl	800482c <std.isra.0>
 80048f2:	2301      	movs	r3, #1
 80048f4:	61a3      	str	r3, [r4, #24]
 80048f6:	bd10      	pop	{r4, pc}
 80048f8:	080059a0 	.word	0x080059a0
 80048fc:	08004821 	.word	0x08004821

08004900 <__sfp>:
 8004900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004902:	4b1c      	ldr	r3, [pc, #112]	; (8004974 <__sfp+0x74>)
 8004904:	681e      	ldr	r6, [r3, #0]
 8004906:	69b3      	ldr	r3, [r6, #24]
 8004908:	4607      	mov	r7, r0
 800490a:	b913      	cbnz	r3, 8004912 <__sfp+0x12>
 800490c:	4630      	mov	r0, r6
 800490e:	f7ff ffc7 	bl	80048a0 <__sinit>
 8004912:	3648      	adds	r6, #72	; 0x48
 8004914:	68b4      	ldr	r4, [r6, #8]
 8004916:	6873      	ldr	r3, [r6, #4]
 8004918:	3b01      	subs	r3, #1
 800491a:	d503      	bpl.n	8004924 <__sfp+0x24>
 800491c:	6833      	ldr	r3, [r6, #0]
 800491e:	b133      	cbz	r3, 800492e <__sfp+0x2e>
 8004920:	6836      	ldr	r6, [r6, #0]
 8004922:	e7f7      	b.n	8004914 <__sfp+0x14>
 8004924:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004928:	b16d      	cbz	r5, 8004946 <__sfp+0x46>
 800492a:	3468      	adds	r4, #104	; 0x68
 800492c:	e7f4      	b.n	8004918 <__sfp+0x18>
 800492e:	2104      	movs	r1, #4
 8004930:	4638      	mov	r0, r7
 8004932:	f7ff ff9f 	bl	8004874 <__sfmoreglue>
 8004936:	6030      	str	r0, [r6, #0]
 8004938:	2800      	cmp	r0, #0
 800493a:	d1f1      	bne.n	8004920 <__sfp+0x20>
 800493c:	230c      	movs	r3, #12
 800493e:	603b      	str	r3, [r7, #0]
 8004940:	4604      	mov	r4, r0
 8004942:	4620      	mov	r0, r4
 8004944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004946:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800494a:	81e3      	strh	r3, [r4, #14]
 800494c:	2301      	movs	r3, #1
 800494e:	81a3      	strh	r3, [r4, #12]
 8004950:	6665      	str	r5, [r4, #100]	; 0x64
 8004952:	6025      	str	r5, [r4, #0]
 8004954:	60a5      	str	r5, [r4, #8]
 8004956:	6065      	str	r5, [r4, #4]
 8004958:	6125      	str	r5, [r4, #16]
 800495a:	6165      	str	r5, [r4, #20]
 800495c:	61a5      	str	r5, [r4, #24]
 800495e:	2208      	movs	r2, #8
 8004960:	4629      	mov	r1, r5
 8004962:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004966:	f000 f878 	bl	8004a5a <memset>
 800496a:	6365      	str	r5, [r4, #52]	; 0x34
 800496c:	63a5      	str	r5, [r4, #56]	; 0x38
 800496e:	64a5      	str	r5, [r4, #72]	; 0x48
 8004970:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004972:	e7e6      	b.n	8004942 <__sfp+0x42>
 8004974:	080059a0 	.word	0x080059a0

08004978 <_fwalk>:
 8004978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800497c:	4688      	mov	r8, r1
 800497e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004982:	2600      	movs	r6, #0
 8004984:	b914      	cbnz	r4, 800498c <_fwalk+0x14>
 8004986:	4630      	mov	r0, r6
 8004988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800498c:	68a5      	ldr	r5, [r4, #8]
 800498e:	6867      	ldr	r7, [r4, #4]
 8004990:	3f01      	subs	r7, #1
 8004992:	d501      	bpl.n	8004998 <_fwalk+0x20>
 8004994:	6824      	ldr	r4, [r4, #0]
 8004996:	e7f5      	b.n	8004984 <_fwalk+0xc>
 8004998:	89ab      	ldrh	r3, [r5, #12]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d906      	bls.n	80049ac <_fwalk+0x34>
 800499e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80049a2:	3301      	adds	r3, #1
 80049a4:	d002      	beq.n	80049ac <_fwalk+0x34>
 80049a6:	4628      	mov	r0, r5
 80049a8:	47c0      	blx	r8
 80049aa:	4306      	orrs	r6, r0
 80049ac:	3568      	adds	r5, #104	; 0x68
 80049ae:	e7ef      	b.n	8004990 <_fwalk+0x18>

080049b0 <_fwalk_reent>:
 80049b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049b4:	4680      	mov	r8, r0
 80049b6:	4689      	mov	r9, r1
 80049b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80049bc:	2600      	movs	r6, #0
 80049be:	b914      	cbnz	r4, 80049c6 <_fwalk_reent+0x16>
 80049c0:	4630      	mov	r0, r6
 80049c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049c6:	68a5      	ldr	r5, [r4, #8]
 80049c8:	6867      	ldr	r7, [r4, #4]
 80049ca:	3f01      	subs	r7, #1
 80049cc:	d501      	bpl.n	80049d2 <_fwalk_reent+0x22>
 80049ce:	6824      	ldr	r4, [r4, #0]
 80049d0:	e7f5      	b.n	80049be <_fwalk_reent+0xe>
 80049d2:	89ab      	ldrh	r3, [r5, #12]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d907      	bls.n	80049e8 <_fwalk_reent+0x38>
 80049d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80049dc:	3301      	adds	r3, #1
 80049de:	d003      	beq.n	80049e8 <_fwalk_reent+0x38>
 80049e0:	4629      	mov	r1, r5
 80049e2:	4640      	mov	r0, r8
 80049e4:	47c8      	blx	r9
 80049e6:	4306      	orrs	r6, r0
 80049e8:	3568      	adds	r5, #104	; 0x68
 80049ea:	e7ee      	b.n	80049ca <_fwalk_reent+0x1a>

080049ec <__libc_init_array>:
 80049ec:	b570      	push	{r4, r5, r6, lr}
 80049ee:	4e0d      	ldr	r6, [pc, #52]	; (8004a24 <__libc_init_array+0x38>)
 80049f0:	4c0d      	ldr	r4, [pc, #52]	; (8004a28 <__libc_init_array+0x3c>)
 80049f2:	1ba4      	subs	r4, r4, r6
 80049f4:	10a4      	asrs	r4, r4, #2
 80049f6:	2500      	movs	r5, #0
 80049f8:	42a5      	cmp	r5, r4
 80049fa:	d109      	bne.n	8004a10 <__libc_init_array+0x24>
 80049fc:	4e0b      	ldr	r6, [pc, #44]	; (8004a2c <__libc_init_array+0x40>)
 80049fe:	4c0c      	ldr	r4, [pc, #48]	; (8004a30 <__libc_init_array+0x44>)
 8004a00:	f000 ff56 	bl	80058b0 <_init>
 8004a04:	1ba4      	subs	r4, r4, r6
 8004a06:	10a4      	asrs	r4, r4, #2
 8004a08:	2500      	movs	r5, #0
 8004a0a:	42a5      	cmp	r5, r4
 8004a0c:	d105      	bne.n	8004a1a <__libc_init_array+0x2e>
 8004a0e:	bd70      	pop	{r4, r5, r6, pc}
 8004a10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a14:	4798      	blx	r3
 8004a16:	3501      	adds	r5, #1
 8004a18:	e7ee      	b.n	80049f8 <__libc_init_array+0xc>
 8004a1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a1e:	4798      	blx	r3
 8004a20:	3501      	adds	r5, #1
 8004a22:	e7f2      	b.n	8004a0a <__libc_init_array+0x1e>
 8004a24:	080059e0 	.word	0x080059e0
 8004a28:	080059e0 	.word	0x080059e0
 8004a2c:	080059e0 	.word	0x080059e0
 8004a30:	080059e4 	.word	0x080059e4

08004a34 <malloc>:
 8004a34:	4b02      	ldr	r3, [pc, #8]	; (8004a40 <malloc+0xc>)
 8004a36:	4601      	mov	r1, r0
 8004a38:	6818      	ldr	r0, [r3, #0]
 8004a3a:	f000 b865 	b.w	8004b08 <_malloc_r>
 8004a3e:	bf00      	nop
 8004a40:	2000017c 	.word	0x2000017c

08004a44 <memcpy>:
 8004a44:	b510      	push	{r4, lr}
 8004a46:	1e43      	subs	r3, r0, #1
 8004a48:	440a      	add	r2, r1
 8004a4a:	4291      	cmp	r1, r2
 8004a4c:	d100      	bne.n	8004a50 <memcpy+0xc>
 8004a4e:	bd10      	pop	{r4, pc}
 8004a50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a58:	e7f7      	b.n	8004a4a <memcpy+0x6>

08004a5a <memset>:
 8004a5a:	4402      	add	r2, r0
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d100      	bne.n	8004a64 <memset+0xa>
 8004a62:	4770      	bx	lr
 8004a64:	f803 1b01 	strb.w	r1, [r3], #1
 8004a68:	e7f9      	b.n	8004a5e <memset+0x4>
	...

08004a6c <_free_r>:
 8004a6c:	b538      	push	{r3, r4, r5, lr}
 8004a6e:	4605      	mov	r5, r0
 8004a70:	2900      	cmp	r1, #0
 8004a72:	d045      	beq.n	8004b00 <_free_r+0x94>
 8004a74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a78:	1f0c      	subs	r4, r1, #4
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	bfb8      	it	lt
 8004a7e:	18e4      	addlt	r4, r4, r3
 8004a80:	f000 fc0a 	bl	8005298 <__malloc_lock>
 8004a84:	4a1f      	ldr	r2, [pc, #124]	; (8004b04 <_free_r+0x98>)
 8004a86:	6813      	ldr	r3, [r2, #0]
 8004a88:	4610      	mov	r0, r2
 8004a8a:	b933      	cbnz	r3, 8004a9a <_free_r+0x2e>
 8004a8c:	6063      	str	r3, [r4, #4]
 8004a8e:	6014      	str	r4, [r2, #0]
 8004a90:	4628      	mov	r0, r5
 8004a92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a96:	f000 bc00 	b.w	800529a <__malloc_unlock>
 8004a9a:	42a3      	cmp	r3, r4
 8004a9c:	d90c      	bls.n	8004ab8 <_free_r+0x4c>
 8004a9e:	6821      	ldr	r1, [r4, #0]
 8004aa0:	1862      	adds	r2, r4, r1
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	bf04      	itt	eq
 8004aa6:	681a      	ldreq	r2, [r3, #0]
 8004aa8:	685b      	ldreq	r3, [r3, #4]
 8004aaa:	6063      	str	r3, [r4, #4]
 8004aac:	bf04      	itt	eq
 8004aae:	1852      	addeq	r2, r2, r1
 8004ab0:	6022      	streq	r2, [r4, #0]
 8004ab2:	6004      	str	r4, [r0, #0]
 8004ab4:	e7ec      	b.n	8004a90 <_free_r+0x24>
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	685a      	ldr	r2, [r3, #4]
 8004aba:	b10a      	cbz	r2, 8004ac0 <_free_r+0x54>
 8004abc:	42a2      	cmp	r2, r4
 8004abe:	d9fa      	bls.n	8004ab6 <_free_r+0x4a>
 8004ac0:	6819      	ldr	r1, [r3, #0]
 8004ac2:	1858      	adds	r0, r3, r1
 8004ac4:	42a0      	cmp	r0, r4
 8004ac6:	d10b      	bne.n	8004ae0 <_free_r+0x74>
 8004ac8:	6820      	ldr	r0, [r4, #0]
 8004aca:	4401      	add	r1, r0
 8004acc:	1858      	adds	r0, r3, r1
 8004ace:	4282      	cmp	r2, r0
 8004ad0:	6019      	str	r1, [r3, #0]
 8004ad2:	d1dd      	bne.n	8004a90 <_free_r+0x24>
 8004ad4:	6810      	ldr	r0, [r2, #0]
 8004ad6:	6852      	ldr	r2, [r2, #4]
 8004ad8:	605a      	str	r2, [r3, #4]
 8004ada:	4401      	add	r1, r0
 8004adc:	6019      	str	r1, [r3, #0]
 8004ade:	e7d7      	b.n	8004a90 <_free_r+0x24>
 8004ae0:	d902      	bls.n	8004ae8 <_free_r+0x7c>
 8004ae2:	230c      	movs	r3, #12
 8004ae4:	602b      	str	r3, [r5, #0]
 8004ae6:	e7d3      	b.n	8004a90 <_free_r+0x24>
 8004ae8:	6820      	ldr	r0, [r4, #0]
 8004aea:	1821      	adds	r1, r4, r0
 8004aec:	428a      	cmp	r2, r1
 8004aee:	bf04      	itt	eq
 8004af0:	6811      	ldreq	r1, [r2, #0]
 8004af2:	6852      	ldreq	r2, [r2, #4]
 8004af4:	6062      	str	r2, [r4, #4]
 8004af6:	bf04      	itt	eq
 8004af8:	1809      	addeq	r1, r1, r0
 8004afa:	6021      	streq	r1, [r4, #0]
 8004afc:	605c      	str	r4, [r3, #4]
 8004afe:	e7c7      	b.n	8004a90 <_free_r+0x24>
 8004b00:	bd38      	pop	{r3, r4, r5, pc}
 8004b02:	bf00      	nop
 8004b04:	20000208 	.word	0x20000208

08004b08 <_malloc_r>:
 8004b08:	b570      	push	{r4, r5, r6, lr}
 8004b0a:	1ccd      	adds	r5, r1, #3
 8004b0c:	f025 0503 	bic.w	r5, r5, #3
 8004b10:	3508      	adds	r5, #8
 8004b12:	2d0c      	cmp	r5, #12
 8004b14:	bf38      	it	cc
 8004b16:	250c      	movcc	r5, #12
 8004b18:	2d00      	cmp	r5, #0
 8004b1a:	4606      	mov	r6, r0
 8004b1c:	db01      	blt.n	8004b22 <_malloc_r+0x1a>
 8004b1e:	42a9      	cmp	r1, r5
 8004b20:	d903      	bls.n	8004b2a <_malloc_r+0x22>
 8004b22:	230c      	movs	r3, #12
 8004b24:	6033      	str	r3, [r6, #0]
 8004b26:	2000      	movs	r0, #0
 8004b28:	bd70      	pop	{r4, r5, r6, pc}
 8004b2a:	f000 fbb5 	bl	8005298 <__malloc_lock>
 8004b2e:	4a23      	ldr	r2, [pc, #140]	; (8004bbc <_malloc_r+0xb4>)
 8004b30:	6814      	ldr	r4, [r2, #0]
 8004b32:	4621      	mov	r1, r4
 8004b34:	b991      	cbnz	r1, 8004b5c <_malloc_r+0x54>
 8004b36:	4c22      	ldr	r4, [pc, #136]	; (8004bc0 <_malloc_r+0xb8>)
 8004b38:	6823      	ldr	r3, [r4, #0]
 8004b3a:	b91b      	cbnz	r3, 8004b44 <_malloc_r+0x3c>
 8004b3c:	4630      	mov	r0, r6
 8004b3e:	f000 f951 	bl	8004de4 <_sbrk_r>
 8004b42:	6020      	str	r0, [r4, #0]
 8004b44:	4629      	mov	r1, r5
 8004b46:	4630      	mov	r0, r6
 8004b48:	f000 f94c 	bl	8004de4 <_sbrk_r>
 8004b4c:	1c43      	adds	r3, r0, #1
 8004b4e:	d126      	bne.n	8004b9e <_malloc_r+0x96>
 8004b50:	230c      	movs	r3, #12
 8004b52:	6033      	str	r3, [r6, #0]
 8004b54:	4630      	mov	r0, r6
 8004b56:	f000 fba0 	bl	800529a <__malloc_unlock>
 8004b5a:	e7e4      	b.n	8004b26 <_malloc_r+0x1e>
 8004b5c:	680b      	ldr	r3, [r1, #0]
 8004b5e:	1b5b      	subs	r3, r3, r5
 8004b60:	d41a      	bmi.n	8004b98 <_malloc_r+0x90>
 8004b62:	2b0b      	cmp	r3, #11
 8004b64:	d90f      	bls.n	8004b86 <_malloc_r+0x7e>
 8004b66:	600b      	str	r3, [r1, #0]
 8004b68:	50cd      	str	r5, [r1, r3]
 8004b6a:	18cc      	adds	r4, r1, r3
 8004b6c:	4630      	mov	r0, r6
 8004b6e:	f000 fb94 	bl	800529a <__malloc_unlock>
 8004b72:	f104 000b 	add.w	r0, r4, #11
 8004b76:	1d23      	adds	r3, r4, #4
 8004b78:	f020 0007 	bic.w	r0, r0, #7
 8004b7c:	1ac3      	subs	r3, r0, r3
 8004b7e:	d01b      	beq.n	8004bb8 <_malloc_r+0xb0>
 8004b80:	425a      	negs	r2, r3
 8004b82:	50e2      	str	r2, [r4, r3]
 8004b84:	bd70      	pop	{r4, r5, r6, pc}
 8004b86:	428c      	cmp	r4, r1
 8004b88:	bf0d      	iteet	eq
 8004b8a:	6863      	ldreq	r3, [r4, #4]
 8004b8c:	684b      	ldrne	r3, [r1, #4]
 8004b8e:	6063      	strne	r3, [r4, #4]
 8004b90:	6013      	streq	r3, [r2, #0]
 8004b92:	bf18      	it	ne
 8004b94:	460c      	movne	r4, r1
 8004b96:	e7e9      	b.n	8004b6c <_malloc_r+0x64>
 8004b98:	460c      	mov	r4, r1
 8004b9a:	6849      	ldr	r1, [r1, #4]
 8004b9c:	e7ca      	b.n	8004b34 <_malloc_r+0x2c>
 8004b9e:	1cc4      	adds	r4, r0, #3
 8004ba0:	f024 0403 	bic.w	r4, r4, #3
 8004ba4:	42a0      	cmp	r0, r4
 8004ba6:	d005      	beq.n	8004bb4 <_malloc_r+0xac>
 8004ba8:	1a21      	subs	r1, r4, r0
 8004baa:	4630      	mov	r0, r6
 8004bac:	f000 f91a 	bl	8004de4 <_sbrk_r>
 8004bb0:	3001      	adds	r0, #1
 8004bb2:	d0cd      	beq.n	8004b50 <_malloc_r+0x48>
 8004bb4:	6025      	str	r5, [r4, #0]
 8004bb6:	e7d9      	b.n	8004b6c <_malloc_r+0x64>
 8004bb8:	bd70      	pop	{r4, r5, r6, pc}
 8004bba:	bf00      	nop
 8004bbc:	20000208 	.word	0x20000208
 8004bc0:	2000020c 	.word	0x2000020c

08004bc4 <iprintf>:
 8004bc4:	b40f      	push	{r0, r1, r2, r3}
 8004bc6:	4b0a      	ldr	r3, [pc, #40]	; (8004bf0 <iprintf+0x2c>)
 8004bc8:	b513      	push	{r0, r1, r4, lr}
 8004bca:	681c      	ldr	r4, [r3, #0]
 8004bcc:	b124      	cbz	r4, 8004bd8 <iprintf+0x14>
 8004bce:	69a3      	ldr	r3, [r4, #24]
 8004bd0:	b913      	cbnz	r3, 8004bd8 <iprintf+0x14>
 8004bd2:	4620      	mov	r0, r4
 8004bd4:	f7ff fe64 	bl	80048a0 <__sinit>
 8004bd8:	ab05      	add	r3, sp, #20
 8004bda:	9a04      	ldr	r2, [sp, #16]
 8004bdc:	68a1      	ldr	r1, [r4, #8]
 8004bde:	9301      	str	r3, [sp, #4]
 8004be0:	4620      	mov	r0, r4
 8004be2:	f000 fb85 	bl	80052f0 <_vfiprintf_r>
 8004be6:	b002      	add	sp, #8
 8004be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bec:	b004      	add	sp, #16
 8004bee:	4770      	bx	lr
 8004bf0:	2000017c 	.word	0x2000017c

08004bf4 <_puts_r>:
 8004bf4:	b570      	push	{r4, r5, r6, lr}
 8004bf6:	460e      	mov	r6, r1
 8004bf8:	4605      	mov	r5, r0
 8004bfa:	b118      	cbz	r0, 8004c04 <_puts_r+0x10>
 8004bfc:	6983      	ldr	r3, [r0, #24]
 8004bfe:	b90b      	cbnz	r3, 8004c04 <_puts_r+0x10>
 8004c00:	f7ff fe4e 	bl	80048a0 <__sinit>
 8004c04:	69ab      	ldr	r3, [r5, #24]
 8004c06:	68ac      	ldr	r4, [r5, #8]
 8004c08:	b913      	cbnz	r3, 8004c10 <_puts_r+0x1c>
 8004c0a:	4628      	mov	r0, r5
 8004c0c:	f7ff fe48 	bl	80048a0 <__sinit>
 8004c10:	4b23      	ldr	r3, [pc, #140]	; (8004ca0 <_puts_r+0xac>)
 8004c12:	429c      	cmp	r4, r3
 8004c14:	d117      	bne.n	8004c46 <_puts_r+0x52>
 8004c16:	686c      	ldr	r4, [r5, #4]
 8004c18:	89a3      	ldrh	r3, [r4, #12]
 8004c1a:	071b      	lsls	r3, r3, #28
 8004c1c:	d51d      	bpl.n	8004c5a <_puts_r+0x66>
 8004c1e:	6923      	ldr	r3, [r4, #16]
 8004c20:	b1db      	cbz	r3, 8004c5a <_puts_r+0x66>
 8004c22:	3e01      	subs	r6, #1
 8004c24:	68a3      	ldr	r3, [r4, #8]
 8004c26:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	60a3      	str	r3, [r4, #8]
 8004c2e:	b9e9      	cbnz	r1, 8004c6c <_puts_r+0x78>
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	da2e      	bge.n	8004c92 <_puts_r+0x9e>
 8004c34:	4622      	mov	r2, r4
 8004c36:	210a      	movs	r1, #10
 8004c38:	4628      	mov	r0, r5
 8004c3a:	f000 f9d5 	bl	8004fe8 <__swbuf_r>
 8004c3e:	3001      	adds	r0, #1
 8004c40:	d011      	beq.n	8004c66 <_puts_r+0x72>
 8004c42:	200a      	movs	r0, #10
 8004c44:	bd70      	pop	{r4, r5, r6, pc}
 8004c46:	4b17      	ldr	r3, [pc, #92]	; (8004ca4 <_puts_r+0xb0>)
 8004c48:	429c      	cmp	r4, r3
 8004c4a:	d101      	bne.n	8004c50 <_puts_r+0x5c>
 8004c4c:	68ac      	ldr	r4, [r5, #8]
 8004c4e:	e7e3      	b.n	8004c18 <_puts_r+0x24>
 8004c50:	4b15      	ldr	r3, [pc, #84]	; (8004ca8 <_puts_r+0xb4>)
 8004c52:	429c      	cmp	r4, r3
 8004c54:	bf08      	it	eq
 8004c56:	68ec      	ldreq	r4, [r5, #12]
 8004c58:	e7de      	b.n	8004c18 <_puts_r+0x24>
 8004c5a:	4621      	mov	r1, r4
 8004c5c:	4628      	mov	r0, r5
 8004c5e:	f000 fa27 	bl	80050b0 <__swsetup_r>
 8004c62:	2800      	cmp	r0, #0
 8004c64:	d0dd      	beq.n	8004c22 <_puts_r+0x2e>
 8004c66:	f04f 30ff 	mov.w	r0, #4294967295
 8004c6a:	bd70      	pop	{r4, r5, r6, pc}
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	da04      	bge.n	8004c7a <_puts_r+0x86>
 8004c70:	69a2      	ldr	r2, [r4, #24]
 8004c72:	4293      	cmp	r3, r2
 8004c74:	db06      	blt.n	8004c84 <_puts_r+0x90>
 8004c76:	290a      	cmp	r1, #10
 8004c78:	d004      	beq.n	8004c84 <_puts_r+0x90>
 8004c7a:	6823      	ldr	r3, [r4, #0]
 8004c7c:	1c5a      	adds	r2, r3, #1
 8004c7e:	6022      	str	r2, [r4, #0]
 8004c80:	7019      	strb	r1, [r3, #0]
 8004c82:	e7cf      	b.n	8004c24 <_puts_r+0x30>
 8004c84:	4622      	mov	r2, r4
 8004c86:	4628      	mov	r0, r5
 8004c88:	f000 f9ae 	bl	8004fe8 <__swbuf_r>
 8004c8c:	3001      	adds	r0, #1
 8004c8e:	d1c9      	bne.n	8004c24 <_puts_r+0x30>
 8004c90:	e7e9      	b.n	8004c66 <_puts_r+0x72>
 8004c92:	6823      	ldr	r3, [r4, #0]
 8004c94:	200a      	movs	r0, #10
 8004c96:	1c5a      	adds	r2, r3, #1
 8004c98:	6022      	str	r2, [r4, #0]
 8004c9a:	7018      	strb	r0, [r3, #0]
 8004c9c:	bd70      	pop	{r4, r5, r6, pc}
 8004c9e:	bf00      	nop
 8004ca0:	08005960 	.word	0x08005960
 8004ca4:	08005980 	.word	0x08005980
 8004ca8:	08005940 	.word	0x08005940

08004cac <puts>:
 8004cac:	4b02      	ldr	r3, [pc, #8]	; (8004cb8 <puts+0xc>)
 8004cae:	4601      	mov	r1, r0
 8004cb0:	6818      	ldr	r0, [r3, #0]
 8004cb2:	f7ff bf9f 	b.w	8004bf4 <_puts_r>
 8004cb6:	bf00      	nop
 8004cb8:	2000017c 	.word	0x2000017c

08004cbc <lflush>:
 8004cbc:	8983      	ldrh	r3, [r0, #12]
 8004cbe:	f003 0309 	and.w	r3, r3, #9
 8004cc2:	2b09      	cmp	r3, #9
 8004cc4:	d101      	bne.n	8004cca <lflush+0xe>
 8004cc6:	f7ff bd2d 	b.w	8004724 <fflush>
 8004cca:	2000      	movs	r0, #0
 8004ccc:	4770      	bx	lr
	...

08004cd0 <__srefill_r>:
 8004cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cd2:	460c      	mov	r4, r1
 8004cd4:	4605      	mov	r5, r0
 8004cd6:	b118      	cbz	r0, 8004ce0 <__srefill_r+0x10>
 8004cd8:	6983      	ldr	r3, [r0, #24]
 8004cda:	b90b      	cbnz	r3, 8004ce0 <__srefill_r+0x10>
 8004cdc:	f7ff fde0 	bl	80048a0 <__sinit>
 8004ce0:	4b3b      	ldr	r3, [pc, #236]	; (8004dd0 <__srefill_r+0x100>)
 8004ce2:	429c      	cmp	r4, r3
 8004ce4:	d10a      	bne.n	8004cfc <__srefill_r+0x2c>
 8004ce6:	686c      	ldr	r4, [r5, #4]
 8004ce8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004cec:	2300      	movs	r3, #0
 8004cee:	6063      	str	r3, [r4, #4]
 8004cf0:	b293      	uxth	r3, r2
 8004cf2:	069e      	lsls	r6, r3, #26
 8004cf4:	d50c      	bpl.n	8004d10 <__srefill_r+0x40>
 8004cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8004cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cfc:	4b35      	ldr	r3, [pc, #212]	; (8004dd4 <__srefill_r+0x104>)
 8004cfe:	429c      	cmp	r4, r3
 8004d00:	d101      	bne.n	8004d06 <__srefill_r+0x36>
 8004d02:	68ac      	ldr	r4, [r5, #8]
 8004d04:	e7f0      	b.n	8004ce8 <__srefill_r+0x18>
 8004d06:	4b34      	ldr	r3, [pc, #208]	; (8004dd8 <__srefill_r+0x108>)
 8004d08:	429c      	cmp	r4, r3
 8004d0a:	bf08      	it	eq
 8004d0c:	68ec      	ldreq	r4, [r5, #12]
 8004d0e:	e7eb      	b.n	8004ce8 <__srefill_r+0x18>
 8004d10:	0758      	lsls	r0, r3, #29
 8004d12:	d448      	bmi.n	8004da6 <__srefill_r+0xd6>
 8004d14:	06d9      	lsls	r1, r3, #27
 8004d16:	d405      	bmi.n	8004d24 <__srefill_r+0x54>
 8004d18:	2309      	movs	r3, #9
 8004d1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d1e:	602b      	str	r3, [r5, #0]
 8004d20:	81a2      	strh	r2, [r4, #12]
 8004d22:	e7e8      	b.n	8004cf6 <__srefill_r+0x26>
 8004d24:	071a      	lsls	r2, r3, #28
 8004d26:	d50b      	bpl.n	8004d40 <__srefill_r+0x70>
 8004d28:	4621      	mov	r1, r4
 8004d2a:	4628      	mov	r0, r5
 8004d2c:	f7ff fcd0 	bl	80046d0 <_fflush_r>
 8004d30:	2800      	cmp	r0, #0
 8004d32:	d1e0      	bne.n	8004cf6 <__srefill_r+0x26>
 8004d34:	89a3      	ldrh	r3, [r4, #12]
 8004d36:	60a0      	str	r0, [r4, #8]
 8004d38:	f023 0308 	bic.w	r3, r3, #8
 8004d3c:	81a3      	strh	r3, [r4, #12]
 8004d3e:	61a0      	str	r0, [r4, #24]
 8004d40:	89a3      	ldrh	r3, [r4, #12]
 8004d42:	f043 0304 	orr.w	r3, r3, #4
 8004d46:	81a3      	strh	r3, [r4, #12]
 8004d48:	6923      	ldr	r3, [r4, #16]
 8004d4a:	b91b      	cbnz	r3, 8004d54 <__srefill_r+0x84>
 8004d4c:	4621      	mov	r1, r4
 8004d4e:	4628      	mov	r0, r5
 8004d50:	f000 fa62 	bl	8005218 <__smakebuf_r>
 8004d54:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8004d58:	b2be      	uxth	r6, r7
 8004d5a:	07b3      	lsls	r3, r6, #30
 8004d5c:	d00f      	beq.n	8004d7e <__srefill_r+0xae>
 8004d5e:	2301      	movs	r3, #1
 8004d60:	81a3      	strh	r3, [r4, #12]
 8004d62:	4b1e      	ldr	r3, [pc, #120]	; (8004ddc <__srefill_r+0x10c>)
 8004d64:	491e      	ldr	r1, [pc, #120]	; (8004de0 <__srefill_r+0x110>)
 8004d66:	6818      	ldr	r0, [r3, #0]
 8004d68:	f006 0609 	and.w	r6, r6, #9
 8004d6c:	f7ff fe04 	bl	8004978 <_fwalk>
 8004d70:	2e09      	cmp	r6, #9
 8004d72:	81a7      	strh	r7, [r4, #12]
 8004d74:	d103      	bne.n	8004d7e <__srefill_r+0xae>
 8004d76:	4621      	mov	r1, r4
 8004d78:	4628      	mov	r0, r5
 8004d7a:	f7ff fc21 	bl	80045c0 <__sflush_r>
 8004d7e:	6922      	ldr	r2, [r4, #16]
 8004d80:	6022      	str	r2, [r4, #0]
 8004d82:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004d84:	6963      	ldr	r3, [r4, #20]
 8004d86:	6a21      	ldr	r1, [r4, #32]
 8004d88:	4628      	mov	r0, r5
 8004d8a:	47b0      	blx	r6
 8004d8c:	2800      	cmp	r0, #0
 8004d8e:	6060      	str	r0, [r4, #4]
 8004d90:	dc1c      	bgt.n	8004dcc <__srefill_r+0xfc>
 8004d92:	89a3      	ldrh	r3, [r4, #12]
 8004d94:	bf17      	itett	ne
 8004d96:	2200      	movne	r2, #0
 8004d98:	f043 0320 	orreq.w	r3, r3, #32
 8004d9c:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8004da0:	6062      	strne	r2, [r4, #4]
 8004da2:	81a3      	strh	r3, [r4, #12]
 8004da4:	e7a7      	b.n	8004cf6 <__srefill_r+0x26>
 8004da6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004da8:	2900      	cmp	r1, #0
 8004daa:	d0cd      	beq.n	8004d48 <__srefill_r+0x78>
 8004dac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004db0:	4299      	cmp	r1, r3
 8004db2:	d002      	beq.n	8004dba <__srefill_r+0xea>
 8004db4:	4628      	mov	r0, r5
 8004db6:	f7ff fe59 	bl	8004a6c <_free_r>
 8004dba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004dbc:	6063      	str	r3, [r4, #4]
 8004dbe:	2000      	movs	r0, #0
 8004dc0:	6360      	str	r0, [r4, #52]	; 0x34
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d0c0      	beq.n	8004d48 <__srefill_r+0x78>
 8004dc6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004dc8:	6023      	str	r3, [r4, #0]
 8004dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dcc:	2000      	movs	r0, #0
 8004dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dd0:	08005960 	.word	0x08005960
 8004dd4:	08005980 	.word	0x08005980
 8004dd8:	08005940 	.word	0x08005940
 8004ddc:	080059a0 	.word	0x080059a0
 8004de0:	08004cbd 	.word	0x08004cbd

08004de4 <_sbrk_r>:
 8004de4:	b538      	push	{r3, r4, r5, lr}
 8004de6:	4c06      	ldr	r4, [pc, #24]	; (8004e00 <_sbrk_r+0x1c>)
 8004de8:	2300      	movs	r3, #0
 8004dea:	4605      	mov	r5, r0
 8004dec:	4608      	mov	r0, r1
 8004dee:	6023      	str	r3, [r4, #0]
 8004df0:	f7ff f916 	bl	8004020 <_sbrk>
 8004df4:	1c43      	adds	r3, r0, #1
 8004df6:	d102      	bne.n	8004dfe <_sbrk_r+0x1a>
 8004df8:	6823      	ldr	r3, [r4, #0]
 8004dfa:	b103      	cbz	r3, 8004dfe <_sbrk_r+0x1a>
 8004dfc:	602b      	str	r3, [r5, #0]
 8004dfe:	bd38      	pop	{r3, r4, r5, pc}
 8004e00:	20000708 	.word	0x20000708

08004e04 <setvbuf>:
 8004e04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004e08:	461d      	mov	r5, r3
 8004e0a:	4b51      	ldr	r3, [pc, #324]	; (8004f50 <setvbuf+0x14c>)
 8004e0c:	681e      	ldr	r6, [r3, #0]
 8004e0e:	4604      	mov	r4, r0
 8004e10:	460f      	mov	r7, r1
 8004e12:	4690      	mov	r8, r2
 8004e14:	b126      	cbz	r6, 8004e20 <setvbuf+0x1c>
 8004e16:	69b3      	ldr	r3, [r6, #24]
 8004e18:	b913      	cbnz	r3, 8004e20 <setvbuf+0x1c>
 8004e1a:	4630      	mov	r0, r6
 8004e1c:	f7ff fd40 	bl	80048a0 <__sinit>
 8004e20:	4b4c      	ldr	r3, [pc, #304]	; (8004f54 <setvbuf+0x150>)
 8004e22:	429c      	cmp	r4, r3
 8004e24:	d152      	bne.n	8004ecc <setvbuf+0xc8>
 8004e26:	6874      	ldr	r4, [r6, #4]
 8004e28:	f1b8 0f02 	cmp.w	r8, #2
 8004e2c:	d006      	beq.n	8004e3c <setvbuf+0x38>
 8004e2e:	f1b8 0f01 	cmp.w	r8, #1
 8004e32:	f200 8089 	bhi.w	8004f48 <setvbuf+0x144>
 8004e36:	2d00      	cmp	r5, #0
 8004e38:	f2c0 8086 	blt.w	8004f48 <setvbuf+0x144>
 8004e3c:	4621      	mov	r1, r4
 8004e3e:	4630      	mov	r0, r6
 8004e40:	f7ff fc46 	bl	80046d0 <_fflush_r>
 8004e44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e46:	b141      	cbz	r1, 8004e5a <setvbuf+0x56>
 8004e48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e4c:	4299      	cmp	r1, r3
 8004e4e:	d002      	beq.n	8004e56 <setvbuf+0x52>
 8004e50:	4630      	mov	r0, r6
 8004e52:	f7ff fe0b 	bl	8004a6c <_free_r>
 8004e56:	2300      	movs	r3, #0
 8004e58:	6363      	str	r3, [r4, #52]	; 0x34
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	61a3      	str	r3, [r4, #24]
 8004e5e:	6063      	str	r3, [r4, #4]
 8004e60:	89a3      	ldrh	r3, [r4, #12]
 8004e62:	061b      	lsls	r3, r3, #24
 8004e64:	d503      	bpl.n	8004e6e <setvbuf+0x6a>
 8004e66:	6921      	ldr	r1, [r4, #16]
 8004e68:	4630      	mov	r0, r6
 8004e6a:	f7ff fdff 	bl	8004a6c <_free_r>
 8004e6e:	89a3      	ldrh	r3, [r4, #12]
 8004e70:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004e74:	f023 0303 	bic.w	r3, r3, #3
 8004e78:	f1b8 0f02 	cmp.w	r8, #2
 8004e7c:	81a3      	strh	r3, [r4, #12]
 8004e7e:	d05d      	beq.n	8004f3c <setvbuf+0x138>
 8004e80:	ab01      	add	r3, sp, #4
 8004e82:	466a      	mov	r2, sp
 8004e84:	4621      	mov	r1, r4
 8004e86:	4630      	mov	r0, r6
 8004e88:	f000 f9a2 	bl	80051d0 <__swhatbuf_r>
 8004e8c:	89a3      	ldrh	r3, [r4, #12]
 8004e8e:	4318      	orrs	r0, r3
 8004e90:	81a0      	strh	r0, [r4, #12]
 8004e92:	bb2d      	cbnz	r5, 8004ee0 <setvbuf+0xdc>
 8004e94:	9d00      	ldr	r5, [sp, #0]
 8004e96:	4628      	mov	r0, r5
 8004e98:	f7ff fdcc 	bl	8004a34 <malloc>
 8004e9c:	4607      	mov	r7, r0
 8004e9e:	2800      	cmp	r0, #0
 8004ea0:	d14e      	bne.n	8004f40 <setvbuf+0x13c>
 8004ea2:	f8dd 9000 	ldr.w	r9, [sp]
 8004ea6:	45a9      	cmp	r9, r5
 8004ea8:	d13c      	bne.n	8004f24 <setvbuf+0x120>
 8004eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8004eae:	89a3      	ldrh	r3, [r4, #12]
 8004eb0:	f043 0302 	orr.w	r3, r3, #2
 8004eb4:	81a3      	strh	r3, [r4, #12]
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60a3      	str	r3, [r4, #8]
 8004eba:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ebe:	6023      	str	r3, [r4, #0]
 8004ec0:	6123      	str	r3, [r4, #16]
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	6163      	str	r3, [r4, #20]
 8004ec6:	b003      	add	sp, #12
 8004ec8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ecc:	4b22      	ldr	r3, [pc, #136]	; (8004f58 <setvbuf+0x154>)
 8004ece:	429c      	cmp	r4, r3
 8004ed0:	d101      	bne.n	8004ed6 <setvbuf+0xd2>
 8004ed2:	68b4      	ldr	r4, [r6, #8]
 8004ed4:	e7a8      	b.n	8004e28 <setvbuf+0x24>
 8004ed6:	4b21      	ldr	r3, [pc, #132]	; (8004f5c <setvbuf+0x158>)
 8004ed8:	429c      	cmp	r4, r3
 8004eda:	bf08      	it	eq
 8004edc:	68f4      	ldreq	r4, [r6, #12]
 8004ede:	e7a3      	b.n	8004e28 <setvbuf+0x24>
 8004ee0:	2f00      	cmp	r7, #0
 8004ee2:	d0d8      	beq.n	8004e96 <setvbuf+0x92>
 8004ee4:	69b3      	ldr	r3, [r6, #24]
 8004ee6:	b913      	cbnz	r3, 8004eee <setvbuf+0xea>
 8004ee8:	4630      	mov	r0, r6
 8004eea:	f7ff fcd9 	bl	80048a0 <__sinit>
 8004eee:	f1b8 0f01 	cmp.w	r8, #1
 8004ef2:	bf08      	it	eq
 8004ef4:	89a3      	ldrheq	r3, [r4, #12]
 8004ef6:	6027      	str	r7, [r4, #0]
 8004ef8:	bf04      	itt	eq
 8004efa:	f043 0301 	orreq.w	r3, r3, #1
 8004efe:	81a3      	strheq	r3, [r4, #12]
 8004f00:	89a3      	ldrh	r3, [r4, #12]
 8004f02:	6127      	str	r7, [r4, #16]
 8004f04:	f013 0008 	ands.w	r0, r3, #8
 8004f08:	6165      	str	r5, [r4, #20]
 8004f0a:	d01b      	beq.n	8004f44 <setvbuf+0x140>
 8004f0c:	f013 0001 	ands.w	r0, r3, #1
 8004f10:	bf18      	it	ne
 8004f12:	426d      	negne	r5, r5
 8004f14:	f04f 0300 	mov.w	r3, #0
 8004f18:	bf1d      	ittte	ne
 8004f1a:	60a3      	strne	r3, [r4, #8]
 8004f1c:	61a5      	strne	r5, [r4, #24]
 8004f1e:	4618      	movne	r0, r3
 8004f20:	60a5      	streq	r5, [r4, #8]
 8004f22:	e7d0      	b.n	8004ec6 <setvbuf+0xc2>
 8004f24:	4648      	mov	r0, r9
 8004f26:	f7ff fd85 	bl	8004a34 <malloc>
 8004f2a:	4607      	mov	r7, r0
 8004f2c:	2800      	cmp	r0, #0
 8004f2e:	d0bc      	beq.n	8004eaa <setvbuf+0xa6>
 8004f30:	89a3      	ldrh	r3, [r4, #12]
 8004f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f36:	81a3      	strh	r3, [r4, #12]
 8004f38:	464d      	mov	r5, r9
 8004f3a:	e7d3      	b.n	8004ee4 <setvbuf+0xe0>
 8004f3c:	2000      	movs	r0, #0
 8004f3e:	e7b6      	b.n	8004eae <setvbuf+0xaa>
 8004f40:	46a9      	mov	r9, r5
 8004f42:	e7f5      	b.n	8004f30 <setvbuf+0x12c>
 8004f44:	60a0      	str	r0, [r4, #8]
 8004f46:	e7be      	b.n	8004ec6 <setvbuf+0xc2>
 8004f48:	f04f 30ff 	mov.w	r0, #4294967295
 8004f4c:	e7bb      	b.n	8004ec6 <setvbuf+0xc2>
 8004f4e:	bf00      	nop
 8004f50:	2000017c 	.word	0x2000017c
 8004f54:	08005960 	.word	0x08005960
 8004f58:	08005980 	.word	0x08005980
 8004f5c:	08005940 	.word	0x08005940

08004f60 <__sread>:
 8004f60:	b510      	push	{r4, lr}
 8004f62:	460c      	mov	r4, r1
 8004f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f68:	f000 fc6e 	bl	8005848 <_read_r>
 8004f6c:	2800      	cmp	r0, #0
 8004f6e:	bfab      	itete	ge
 8004f70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f72:	89a3      	ldrhlt	r3, [r4, #12]
 8004f74:	181b      	addge	r3, r3, r0
 8004f76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f7a:	bfac      	ite	ge
 8004f7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f7e:	81a3      	strhlt	r3, [r4, #12]
 8004f80:	bd10      	pop	{r4, pc}

08004f82 <__swrite>:
 8004f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f86:	461f      	mov	r7, r3
 8004f88:	898b      	ldrh	r3, [r1, #12]
 8004f8a:	05db      	lsls	r3, r3, #23
 8004f8c:	4605      	mov	r5, r0
 8004f8e:	460c      	mov	r4, r1
 8004f90:	4616      	mov	r6, r2
 8004f92:	d505      	bpl.n	8004fa0 <__swrite+0x1e>
 8004f94:	2302      	movs	r3, #2
 8004f96:	2200      	movs	r2, #0
 8004f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f9c:	f000 f906 	bl	80051ac <_lseek_r>
 8004fa0:	89a3      	ldrh	r3, [r4, #12]
 8004fa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004faa:	81a3      	strh	r3, [r4, #12]
 8004fac:	4632      	mov	r2, r6
 8004fae:	463b      	mov	r3, r7
 8004fb0:	4628      	mov	r0, r5
 8004fb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fb6:	f000 b869 	b.w	800508c <_write_r>

08004fba <__sseek>:
 8004fba:	b510      	push	{r4, lr}
 8004fbc:	460c      	mov	r4, r1
 8004fbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fc2:	f000 f8f3 	bl	80051ac <_lseek_r>
 8004fc6:	1c43      	adds	r3, r0, #1
 8004fc8:	89a3      	ldrh	r3, [r4, #12]
 8004fca:	bf15      	itete	ne
 8004fcc:	6560      	strne	r0, [r4, #84]	; 0x54
 8004fce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004fd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004fd6:	81a3      	strheq	r3, [r4, #12]
 8004fd8:	bf18      	it	ne
 8004fda:	81a3      	strhne	r3, [r4, #12]
 8004fdc:	bd10      	pop	{r4, pc}

08004fde <__sclose>:
 8004fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fe2:	f000 b8d3 	b.w	800518c <_close_r>
	...

08004fe8 <__swbuf_r>:
 8004fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fea:	460e      	mov	r6, r1
 8004fec:	4614      	mov	r4, r2
 8004fee:	4605      	mov	r5, r0
 8004ff0:	b118      	cbz	r0, 8004ffa <__swbuf_r+0x12>
 8004ff2:	6983      	ldr	r3, [r0, #24]
 8004ff4:	b90b      	cbnz	r3, 8004ffa <__swbuf_r+0x12>
 8004ff6:	f7ff fc53 	bl	80048a0 <__sinit>
 8004ffa:	4b21      	ldr	r3, [pc, #132]	; (8005080 <__swbuf_r+0x98>)
 8004ffc:	429c      	cmp	r4, r3
 8004ffe:	d12a      	bne.n	8005056 <__swbuf_r+0x6e>
 8005000:	686c      	ldr	r4, [r5, #4]
 8005002:	69a3      	ldr	r3, [r4, #24]
 8005004:	60a3      	str	r3, [r4, #8]
 8005006:	89a3      	ldrh	r3, [r4, #12]
 8005008:	071a      	lsls	r2, r3, #28
 800500a:	d52e      	bpl.n	800506a <__swbuf_r+0x82>
 800500c:	6923      	ldr	r3, [r4, #16]
 800500e:	b363      	cbz	r3, 800506a <__swbuf_r+0x82>
 8005010:	6923      	ldr	r3, [r4, #16]
 8005012:	6820      	ldr	r0, [r4, #0]
 8005014:	1ac0      	subs	r0, r0, r3
 8005016:	6963      	ldr	r3, [r4, #20]
 8005018:	b2f6      	uxtb	r6, r6
 800501a:	4298      	cmp	r0, r3
 800501c:	4637      	mov	r7, r6
 800501e:	db04      	blt.n	800502a <__swbuf_r+0x42>
 8005020:	4621      	mov	r1, r4
 8005022:	4628      	mov	r0, r5
 8005024:	f7ff fb54 	bl	80046d0 <_fflush_r>
 8005028:	bb28      	cbnz	r0, 8005076 <__swbuf_r+0x8e>
 800502a:	68a3      	ldr	r3, [r4, #8]
 800502c:	3b01      	subs	r3, #1
 800502e:	60a3      	str	r3, [r4, #8]
 8005030:	6823      	ldr	r3, [r4, #0]
 8005032:	1c5a      	adds	r2, r3, #1
 8005034:	6022      	str	r2, [r4, #0]
 8005036:	701e      	strb	r6, [r3, #0]
 8005038:	6963      	ldr	r3, [r4, #20]
 800503a:	3001      	adds	r0, #1
 800503c:	4298      	cmp	r0, r3
 800503e:	d004      	beq.n	800504a <__swbuf_r+0x62>
 8005040:	89a3      	ldrh	r3, [r4, #12]
 8005042:	07db      	lsls	r3, r3, #31
 8005044:	d519      	bpl.n	800507a <__swbuf_r+0x92>
 8005046:	2e0a      	cmp	r6, #10
 8005048:	d117      	bne.n	800507a <__swbuf_r+0x92>
 800504a:	4621      	mov	r1, r4
 800504c:	4628      	mov	r0, r5
 800504e:	f7ff fb3f 	bl	80046d0 <_fflush_r>
 8005052:	b190      	cbz	r0, 800507a <__swbuf_r+0x92>
 8005054:	e00f      	b.n	8005076 <__swbuf_r+0x8e>
 8005056:	4b0b      	ldr	r3, [pc, #44]	; (8005084 <__swbuf_r+0x9c>)
 8005058:	429c      	cmp	r4, r3
 800505a:	d101      	bne.n	8005060 <__swbuf_r+0x78>
 800505c:	68ac      	ldr	r4, [r5, #8]
 800505e:	e7d0      	b.n	8005002 <__swbuf_r+0x1a>
 8005060:	4b09      	ldr	r3, [pc, #36]	; (8005088 <__swbuf_r+0xa0>)
 8005062:	429c      	cmp	r4, r3
 8005064:	bf08      	it	eq
 8005066:	68ec      	ldreq	r4, [r5, #12]
 8005068:	e7cb      	b.n	8005002 <__swbuf_r+0x1a>
 800506a:	4621      	mov	r1, r4
 800506c:	4628      	mov	r0, r5
 800506e:	f000 f81f 	bl	80050b0 <__swsetup_r>
 8005072:	2800      	cmp	r0, #0
 8005074:	d0cc      	beq.n	8005010 <__swbuf_r+0x28>
 8005076:	f04f 37ff 	mov.w	r7, #4294967295
 800507a:	4638      	mov	r0, r7
 800507c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800507e:	bf00      	nop
 8005080:	08005960 	.word	0x08005960
 8005084:	08005980 	.word	0x08005980
 8005088:	08005940 	.word	0x08005940

0800508c <_write_r>:
 800508c:	b538      	push	{r3, r4, r5, lr}
 800508e:	4c07      	ldr	r4, [pc, #28]	; (80050ac <_write_r+0x20>)
 8005090:	4605      	mov	r5, r0
 8005092:	4608      	mov	r0, r1
 8005094:	4611      	mov	r1, r2
 8005096:	2200      	movs	r2, #0
 8005098:	6022      	str	r2, [r4, #0]
 800509a:	461a      	mov	r2, r3
 800509c:	f7fe ffb2 	bl	8004004 <_write>
 80050a0:	1c43      	adds	r3, r0, #1
 80050a2:	d102      	bne.n	80050aa <_write_r+0x1e>
 80050a4:	6823      	ldr	r3, [r4, #0]
 80050a6:	b103      	cbz	r3, 80050aa <_write_r+0x1e>
 80050a8:	602b      	str	r3, [r5, #0]
 80050aa:	bd38      	pop	{r3, r4, r5, pc}
 80050ac:	20000708 	.word	0x20000708

080050b0 <__swsetup_r>:
 80050b0:	4b32      	ldr	r3, [pc, #200]	; (800517c <__swsetup_r+0xcc>)
 80050b2:	b570      	push	{r4, r5, r6, lr}
 80050b4:	681d      	ldr	r5, [r3, #0]
 80050b6:	4606      	mov	r6, r0
 80050b8:	460c      	mov	r4, r1
 80050ba:	b125      	cbz	r5, 80050c6 <__swsetup_r+0x16>
 80050bc:	69ab      	ldr	r3, [r5, #24]
 80050be:	b913      	cbnz	r3, 80050c6 <__swsetup_r+0x16>
 80050c0:	4628      	mov	r0, r5
 80050c2:	f7ff fbed 	bl	80048a0 <__sinit>
 80050c6:	4b2e      	ldr	r3, [pc, #184]	; (8005180 <__swsetup_r+0xd0>)
 80050c8:	429c      	cmp	r4, r3
 80050ca:	d10f      	bne.n	80050ec <__swsetup_r+0x3c>
 80050cc:	686c      	ldr	r4, [r5, #4]
 80050ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	0715      	lsls	r5, r2, #28
 80050d6:	d42c      	bmi.n	8005132 <__swsetup_r+0x82>
 80050d8:	06d0      	lsls	r0, r2, #27
 80050da:	d411      	bmi.n	8005100 <__swsetup_r+0x50>
 80050dc:	2209      	movs	r2, #9
 80050de:	6032      	str	r2, [r6, #0]
 80050e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050e4:	81a3      	strh	r3, [r4, #12]
 80050e6:	f04f 30ff 	mov.w	r0, #4294967295
 80050ea:	bd70      	pop	{r4, r5, r6, pc}
 80050ec:	4b25      	ldr	r3, [pc, #148]	; (8005184 <__swsetup_r+0xd4>)
 80050ee:	429c      	cmp	r4, r3
 80050f0:	d101      	bne.n	80050f6 <__swsetup_r+0x46>
 80050f2:	68ac      	ldr	r4, [r5, #8]
 80050f4:	e7eb      	b.n	80050ce <__swsetup_r+0x1e>
 80050f6:	4b24      	ldr	r3, [pc, #144]	; (8005188 <__swsetup_r+0xd8>)
 80050f8:	429c      	cmp	r4, r3
 80050fa:	bf08      	it	eq
 80050fc:	68ec      	ldreq	r4, [r5, #12]
 80050fe:	e7e6      	b.n	80050ce <__swsetup_r+0x1e>
 8005100:	0751      	lsls	r1, r2, #29
 8005102:	d512      	bpl.n	800512a <__swsetup_r+0x7a>
 8005104:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005106:	b141      	cbz	r1, 800511a <__swsetup_r+0x6a>
 8005108:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800510c:	4299      	cmp	r1, r3
 800510e:	d002      	beq.n	8005116 <__swsetup_r+0x66>
 8005110:	4630      	mov	r0, r6
 8005112:	f7ff fcab 	bl	8004a6c <_free_r>
 8005116:	2300      	movs	r3, #0
 8005118:	6363      	str	r3, [r4, #52]	; 0x34
 800511a:	89a3      	ldrh	r3, [r4, #12]
 800511c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005120:	81a3      	strh	r3, [r4, #12]
 8005122:	2300      	movs	r3, #0
 8005124:	6063      	str	r3, [r4, #4]
 8005126:	6923      	ldr	r3, [r4, #16]
 8005128:	6023      	str	r3, [r4, #0]
 800512a:	89a3      	ldrh	r3, [r4, #12]
 800512c:	f043 0308 	orr.w	r3, r3, #8
 8005130:	81a3      	strh	r3, [r4, #12]
 8005132:	6923      	ldr	r3, [r4, #16]
 8005134:	b94b      	cbnz	r3, 800514a <__swsetup_r+0x9a>
 8005136:	89a3      	ldrh	r3, [r4, #12]
 8005138:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800513c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005140:	d003      	beq.n	800514a <__swsetup_r+0x9a>
 8005142:	4621      	mov	r1, r4
 8005144:	4630      	mov	r0, r6
 8005146:	f000 f867 	bl	8005218 <__smakebuf_r>
 800514a:	89a2      	ldrh	r2, [r4, #12]
 800514c:	f012 0301 	ands.w	r3, r2, #1
 8005150:	d00c      	beq.n	800516c <__swsetup_r+0xbc>
 8005152:	2300      	movs	r3, #0
 8005154:	60a3      	str	r3, [r4, #8]
 8005156:	6963      	ldr	r3, [r4, #20]
 8005158:	425b      	negs	r3, r3
 800515a:	61a3      	str	r3, [r4, #24]
 800515c:	6923      	ldr	r3, [r4, #16]
 800515e:	b953      	cbnz	r3, 8005176 <__swsetup_r+0xc6>
 8005160:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005164:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005168:	d1ba      	bne.n	80050e0 <__swsetup_r+0x30>
 800516a:	bd70      	pop	{r4, r5, r6, pc}
 800516c:	0792      	lsls	r2, r2, #30
 800516e:	bf58      	it	pl
 8005170:	6963      	ldrpl	r3, [r4, #20]
 8005172:	60a3      	str	r3, [r4, #8]
 8005174:	e7f2      	b.n	800515c <__swsetup_r+0xac>
 8005176:	2000      	movs	r0, #0
 8005178:	e7f7      	b.n	800516a <__swsetup_r+0xba>
 800517a:	bf00      	nop
 800517c:	2000017c 	.word	0x2000017c
 8005180:	08005960 	.word	0x08005960
 8005184:	08005980 	.word	0x08005980
 8005188:	08005940 	.word	0x08005940

0800518c <_close_r>:
 800518c:	b538      	push	{r3, r4, r5, lr}
 800518e:	4c06      	ldr	r4, [pc, #24]	; (80051a8 <_close_r+0x1c>)
 8005190:	2300      	movs	r3, #0
 8005192:	4605      	mov	r5, r0
 8005194:	4608      	mov	r0, r1
 8005196:	6023      	str	r3, [r4, #0]
 8005198:	f7fe ff5c 	bl	8004054 <_close>
 800519c:	1c43      	adds	r3, r0, #1
 800519e:	d102      	bne.n	80051a6 <_close_r+0x1a>
 80051a0:	6823      	ldr	r3, [r4, #0]
 80051a2:	b103      	cbz	r3, 80051a6 <_close_r+0x1a>
 80051a4:	602b      	str	r3, [r5, #0]
 80051a6:	bd38      	pop	{r3, r4, r5, pc}
 80051a8:	20000708 	.word	0x20000708

080051ac <_lseek_r>:
 80051ac:	b538      	push	{r3, r4, r5, lr}
 80051ae:	4c07      	ldr	r4, [pc, #28]	; (80051cc <_lseek_r+0x20>)
 80051b0:	4605      	mov	r5, r0
 80051b2:	4608      	mov	r0, r1
 80051b4:	4611      	mov	r1, r2
 80051b6:	2200      	movs	r2, #0
 80051b8:	6022      	str	r2, [r4, #0]
 80051ba:	461a      	mov	r2, r3
 80051bc:	f7fe ff54 	bl	8004068 <_lseek>
 80051c0:	1c43      	adds	r3, r0, #1
 80051c2:	d102      	bne.n	80051ca <_lseek_r+0x1e>
 80051c4:	6823      	ldr	r3, [r4, #0]
 80051c6:	b103      	cbz	r3, 80051ca <_lseek_r+0x1e>
 80051c8:	602b      	str	r3, [r5, #0]
 80051ca:	bd38      	pop	{r3, r4, r5, pc}
 80051cc:	20000708 	.word	0x20000708

080051d0 <__swhatbuf_r>:
 80051d0:	b570      	push	{r4, r5, r6, lr}
 80051d2:	460e      	mov	r6, r1
 80051d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051d8:	2900      	cmp	r1, #0
 80051da:	b090      	sub	sp, #64	; 0x40
 80051dc:	4614      	mov	r4, r2
 80051de:	461d      	mov	r5, r3
 80051e0:	da07      	bge.n	80051f2 <__swhatbuf_r+0x22>
 80051e2:	2300      	movs	r3, #0
 80051e4:	602b      	str	r3, [r5, #0]
 80051e6:	89b3      	ldrh	r3, [r6, #12]
 80051e8:	061a      	lsls	r2, r3, #24
 80051ea:	d410      	bmi.n	800520e <__swhatbuf_r+0x3e>
 80051ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051f0:	e00e      	b.n	8005210 <__swhatbuf_r+0x40>
 80051f2:	aa01      	add	r2, sp, #4
 80051f4:	f000 fb3a 	bl	800586c <_fstat_r>
 80051f8:	2800      	cmp	r0, #0
 80051fa:	dbf2      	blt.n	80051e2 <__swhatbuf_r+0x12>
 80051fc:	9a02      	ldr	r2, [sp, #8]
 80051fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005202:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005206:	425a      	negs	r2, r3
 8005208:	415a      	adcs	r2, r3
 800520a:	602a      	str	r2, [r5, #0]
 800520c:	e7ee      	b.n	80051ec <__swhatbuf_r+0x1c>
 800520e:	2340      	movs	r3, #64	; 0x40
 8005210:	2000      	movs	r0, #0
 8005212:	6023      	str	r3, [r4, #0]
 8005214:	b010      	add	sp, #64	; 0x40
 8005216:	bd70      	pop	{r4, r5, r6, pc}

08005218 <__smakebuf_r>:
 8005218:	898b      	ldrh	r3, [r1, #12]
 800521a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800521c:	079d      	lsls	r5, r3, #30
 800521e:	4606      	mov	r6, r0
 8005220:	460c      	mov	r4, r1
 8005222:	d507      	bpl.n	8005234 <__smakebuf_r+0x1c>
 8005224:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005228:	6023      	str	r3, [r4, #0]
 800522a:	6123      	str	r3, [r4, #16]
 800522c:	2301      	movs	r3, #1
 800522e:	6163      	str	r3, [r4, #20]
 8005230:	b002      	add	sp, #8
 8005232:	bd70      	pop	{r4, r5, r6, pc}
 8005234:	ab01      	add	r3, sp, #4
 8005236:	466a      	mov	r2, sp
 8005238:	f7ff ffca 	bl	80051d0 <__swhatbuf_r>
 800523c:	9900      	ldr	r1, [sp, #0]
 800523e:	4605      	mov	r5, r0
 8005240:	4630      	mov	r0, r6
 8005242:	f7ff fc61 	bl	8004b08 <_malloc_r>
 8005246:	b948      	cbnz	r0, 800525c <__smakebuf_r+0x44>
 8005248:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800524c:	059a      	lsls	r2, r3, #22
 800524e:	d4ef      	bmi.n	8005230 <__smakebuf_r+0x18>
 8005250:	f023 0303 	bic.w	r3, r3, #3
 8005254:	f043 0302 	orr.w	r3, r3, #2
 8005258:	81a3      	strh	r3, [r4, #12]
 800525a:	e7e3      	b.n	8005224 <__smakebuf_r+0xc>
 800525c:	4b0d      	ldr	r3, [pc, #52]	; (8005294 <__smakebuf_r+0x7c>)
 800525e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005260:	89a3      	ldrh	r3, [r4, #12]
 8005262:	6020      	str	r0, [r4, #0]
 8005264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005268:	81a3      	strh	r3, [r4, #12]
 800526a:	9b00      	ldr	r3, [sp, #0]
 800526c:	6163      	str	r3, [r4, #20]
 800526e:	9b01      	ldr	r3, [sp, #4]
 8005270:	6120      	str	r0, [r4, #16]
 8005272:	b15b      	cbz	r3, 800528c <__smakebuf_r+0x74>
 8005274:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005278:	4630      	mov	r0, r6
 800527a:	f000 fb09 	bl	8005890 <_isatty_r>
 800527e:	b128      	cbz	r0, 800528c <__smakebuf_r+0x74>
 8005280:	89a3      	ldrh	r3, [r4, #12]
 8005282:	f023 0303 	bic.w	r3, r3, #3
 8005286:	f043 0301 	orr.w	r3, r3, #1
 800528a:	81a3      	strh	r3, [r4, #12]
 800528c:	89a3      	ldrh	r3, [r4, #12]
 800528e:	431d      	orrs	r5, r3
 8005290:	81a5      	strh	r5, [r4, #12]
 8005292:	e7cd      	b.n	8005230 <__smakebuf_r+0x18>
 8005294:	08004821 	.word	0x08004821

08005298 <__malloc_lock>:
 8005298:	4770      	bx	lr

0800529a <__malloc_unlock>:
 800529a:	4770      	bx	lr

0800529c <__sfputc_r>:
 800529c:	6893      	ldr	r3, [r2, #8]
 800529e:	3b01      	subs	r3, #1
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	b410      	push	{r4}
 80052a4:	6093      	str	r3, [r2, #8]
 80052a6:	da09      	bge.n	80052bc <__sfputc_r+0x20>
 80052a8:	6994      	ldr	r4, [r2, #24]
 80052aa:	42a3      	cmp	r3, r4
 80052ac:	db02      	blt.n	80052b4 <__sfputc_r+0x18>
 80052ae:	b2cb      	uxtb	r3, r1
 80052b0:	2b0a      	cmp	r3, #10
 80052b2:	d103      	bne.n	80052bc <__sfputc_r+0x20>
 80052b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052b8:	f7ff be96 	b.w	8004fe8 <__swbuf_r>
 80052bc:	6813      	ldr	r3, [r2, #0]
 80052be:	1c58      	adds	r0, r3, #1
 80052c0:	6010      	str	r0, [r2, #0]
 80052c2:	7019      	strb	r1, [r3, #0]
 80052c4:	b2c8      	uxtb	r0, r1
 80052c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <__sfputs_r>:
 80052cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ce:	4606      	mov	r6, r0
 80052d0:	460f      	mov	r7, r1
 80052d2:	4614      	mov	r4, r2
 80052d4:	18d5      	adds	r5, r2, r3
 80052d6:	42ac      	cmp	r4, r5
 80052d8:	d101      	bne.n	80052de <__sfputs_r+0x12>
 80052da:	2000      	movs	r0, #0
 80052dc:	e007      	b.n	80052ee <__sfputs_r+0x22>
 80052de:	463a      	mov	r2, r7
 80052e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052e4:	4630      	mov	r0, r6
 80052e6:	f7ff ffd9 	bl	800529c <__sfputc_r>
 80052ea:	1c43      	adds	r3, r0, #1
 80052ec:	d1f3      	bne.n	80052d6 <__sfputs_r+0xa>
 80052ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080052f0 <_vfiprintf_r>:
 80052f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052f4:	b09d      	sub	sp, #116	; 0x74
 80052f6:	460c      	mov	r4, r1
 80052f8:	4617      	mov	r7, r2
 80052fa:	9303      	str	r3, [sp, #12]
 80052fc:	4606      	mov	r6, r0
 80052fe:	b118      	cbz	r0, 8005308 <_vfiprintf_r+0x18>
 8005300:	6983      	ldr	r3, [r0, #24]
 8005302:	b90b      	cbnz	r3, 8005308 <_vfiprintf_r+0x18>
 8005304:	f7ff facc 	bl	80048a0 <__sinit>
 8005308:	4b7c      	ldr	r3, [pc, #496]	; (80054fc <_vfiprintf_r+0x20c>)
 800530a:	429c      	cmp	r4, r3
 800530c:	d157      	bne.n	80053be <_vfiprintf_r+0xce>
 800530e:	6874      	ldr	r4, [r6, #4]
 8005310:	89a3      	ldrh	r3, [r4, #12]
 8005312:	0718      	lsls	r0, r3, #28
 8005314:	d55d      	bpl.n	80053d2 <_vfiprintf_r+0xe2>
 8005316:	6923      	ldr	r3, [r4, #16]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d05a      	beq.n	80053d2 <_vfiprintf_r+0xe2>
 800531c:	2300      	movs	r3, #0
 800531e:	9309      	str	r3, [sp, #36]	; 0x24
 8005320:	2320      	movs	r3, #32
 8005322:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005326:	2330      	movs	r3, #48	; 0x30
 8005328:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800532c:	f04f 0b01 	mov.w	fp, #1
 8005330:	46b8      	mov	r8, r7
 8005332:	4645      	mov	r5, r8
 8005334:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005338:	2b00      	cmp	r3, #0
 800533a:	d155      	bne.n	80053e8 <_vfiprintf_r+0xf8>
 800533c:	ebb8 0a07 	subs.w	sl, r8, r7
 8005340:	d00b      	beq.n	800535a <_vfiprintf_r+0x6a>
 8005342:	4653      	mov	r3, sl
 8005344:	463a      	mov	r2, r7
 8005346:	4621      	mov	r1, r4
 8005348:	4630      	mov	r0, r6
 800534a:	f7ff ffbf 	bl	80052cc <__sfputs_r>
 800534e:	3001      	adds	r0, #1
 8005350:	f000 80c4 	beq.w	80054dc <_vfiprintf_r+0x1ec>
 8005354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005356:	4453      	add	r3, sl
 8005358:	9309      	str	r3, [sp, #36]	; 0x24
 800535a:	f898 3000 	ldrb.w	r3, [r8]
 800535e:	2b00      	cmp	r3, #0
 8005360:	f000 80bc 	beq.w	80054dc <_vfiprintf_r+0x1ec>
 8005364:	2300      	movs	r3, #0
 8005366:	f04f 32ff 	mov.w	r2, #4294967295
 800536a:	9304      	str	r3, [sp, #16]
 800536c:	9307      	str	r3, [sp, #28]
 800536e:	9205      	str	r2, [sp, #20]
 8005370:	9306      	str	r3, [sp, #24]
 8005372:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005376:	931a      	str	r3, [sp, #104]	; 0x68
 8005378:	2205      	movs	r2, #5
 800537a:	7829      	ldrb	r1, [r5, #0]
 800537c:	4860      	ldr	r0, [pc, #384]	; (8005500 <_vfiprintf_r+0x210>)
 800537e:	f7fa ff2f 	bl	80001e0 <memchr>
 8005382:	f105 0801 	add.w	r8, r5, #1
 8005386:	9b04      	ldr	r3, [sp, #16]
 8005388:	2800      	cmp	r0, #0
 800538a:	d131      	bne.n	80053f0 <_vfiprintf_r+0x100>
 800538c:	06d9      	lsls	r1, r3, #27
 800538e:	bf44      	itt	mi
 8005390:	2220      	movmi	r2, #32
 8005392:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005396:	071a      	lsls	r2, r3, #28
 8005398:	bf44      	itt	mi
 800539a:	222b      	movmi	r2, #43	; 0x2b
 800539c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80053a0:	782a      	ldrb	r2, [r5, #0]
 80053a2:	2a2a      	cmp	r2, #42	; 0x2a
 80053a4:	d02c      	beq.n	8005400 <_vfiprintf_r+0x110>
 80053a6:	9a07      	ldr	r2, [sp, #28]
 80053a8:	2100      	movs	r1, #0
 80053aa:	200a      	movs	r0, #10
 80053ac:	46a8      	mov	r8, r5
 80053ae:	3501      	adds	r5, #1
 80053b0:	f898 3000 	ldrb.w	r3, [r8]
 80053b4:	3b30      	subs	r3, #48	; 0x30
 80053b6:	2b09      	cmp	r3, #9
 80053b8:	d96d      	bls.n	8005496 <_vfiprintf_r+0x1a6>
 80053ba:	b371      	cbz	r1, 800541a <_vfiprintf_r+0x12a>
 80053bc:	e026      	b.n	800540c <_vfiprintf_r+0x11c>
 80053be:	4b51      	ldr	r3, [pc, #324]	; (8005504 <_vfiprintf_r+0x214>)
 80053c0:	429c      	cmp	r4, r3
 80053c2:	d101      	bne.n	80053c8 <_vfiprintf_r+0xd8>
 80053c4:	68b4      	ldr	r4, [r6, #8]
 80053c6:	e7a3      	b.n	8005310 <_vfiprintf_r+0x20>
 80053c8:	4b4f      	ldr	r3, [pc, #316]	; (8005508 <_vfiprintf_r+0x218>)
 80053ca:	429c      	cmp	r4, r3
 80053cc:	bf08      	it	eq
 80053ce:	68f4      	ldreq	r4, [r6, #12]
 80053d0:	e79e      	b.n	8005310 <_vfiprintf_r+0x20>
 80053d2:	4621      	mov	r1, r4
 80053d4:	4630      	mov	r0, r6
 80053d6:	f7ff fe6b 	bl	80050b0 <__swsetup_r>
 80053da:	2800      	cmp	r0, #0
 80053dc:	d09e      	beq.n	800531c <_vfiprintf_r+0x2c>
 80053de:	f04f 30ff 	mov.w	r0, #4294967295
 80053e2:	b01d      	add	sp, #116	; 0x74
 80053e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053e8:	2b25      	cmp	r3, #37	; 0x25
 80053ea:	d0a7      	beq.n	800533c <_vfiprintf_r+0x4c>
 80053ec:	46a8      	mov	r8, r5
 80053ee:	e7a0      	b.n	8005332 <_vfiprintf_r+0x42>
 80053f0:	4a43      	ldr	r2, [pc, #268]	; (8005500 <_vfiprintf_r+0x210>)
 80053f2:	1a80      	subs	r0, r0, r2
 80053f4:	fa0b f000 	lsl.w	r0, fp, r0
 80053f8:	4318      	orrs	r0, r3
 80053fa:	9004      	str	r0, [sp, #16]
 80053fc:	4645      	mov	r5, r8
 80053fe:	e7bb      	b.n	8005378 <_vfiprintf_r+0x88>
 8005400:	9a03      	ldr	r2, [sp, #12]
 8005402:	1d11      	adds	r1, r2, #4
 8005404:	6812      	ldr	r2, [r2, #0]
 8005406:	9103      	str	r1, [sp, #12]
 8005408:	2a00      	cmp	r2, #0
 800540a:	db01      	blt.n	8005410 <_vfiprintf_r+0x120>
 800540c:	9207      	str	r2, [sp, #28]
 800540e:	e004      	b.n	800541a <_vfiprintf_r+0x12a>
 8005410:	4252      	negs	r2, r2
 8005412:	f043 0302 	orr.w	r3, r3, #2
 8005416:	9207      	str	r2, [sp, #28]
 8005418:	9304      	str	r3, [sp, #16]
 800541a:	f898 3000 	ldrb.w	r3, [r8]
 800541e:	2b2e      	cmp	r3, #46	; 0x2e
 8005420:	d110      	bne.n	8005444 <_vfiprintf_r+0x154>
 8005422:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005426:	2b2a      	cmp	r3, #42	; 0x2a
 8005428:	f108 0101 	add.w	r1, r8, #1
 800542c:	d137      	bne.n	800549e <_vfiprintf_r+0x1ae>
 800542e:	9b03      	ldr	r3, [sp, #12]
 8005430:	1d1a      	adds	r2, r3, #4
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	9203      	str	r2, [sp, #12]
 8005436:	2b00      	cmp	r3, #0
 8005438:	bfb8      	it	lt
 800543a:	f04f 33ff 	movlt.w	r3, #4294967295
 800543e:	f108 0802 	add.w	r8, r8, #2
 8005442:	9305      	str	r3, [sp, #20]
 8005444:	4d31      	ldr	r5, [pc, #196]	; (800550c <_vfiprintf_r+0x21c>)
 8005446:	f898 1000 	ldrb.w	r1, [r8]
 800544a:	2203      	movs	r2, #3
 800544c:	4628      	mov	r0, r5
 800544e:	f7fa fec7 	bl	80001e0 <memchr>
 8005452:	b140      	cbz	r0, 8005466 <_vfiprintf_r+0x176>
 8005454:	2340      	movs	r3, #64	; 0x40
 8005456:	1b40      	subs	r0, r0, r5
 8005458:	fa03 f000 	lsl.w	r0, r3, r0
 800545c:	9b04      	ldr	r3, [sp, #16]
 800545e:	4303      	orrs	r3, r0
 8005460:	9304      	str	r3, [sp, #16]
 8005462:	f108 0801 	add.w	r8, r8, #1
 8005466:	f898 1000 	ldrb.w	r1, [r8]
 800546a:	4829      	ldr	r0, [pc, #164]	; (8005510 <_vfiprintf_r+0x220>)
 800546c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005470:	2206      	movs	r2, #6
 8005472:	f108 0701 	add.w	r7, r8, #1
 8005476:	f7fa feb3 	bl	80001e0 <memchr>
 800547a:	2800      	cmp	r0, #0
 800547c:	d034      	beq.n	80054e8 <_vfiprintf_r+0x1f8>
 800547e:	4b25      	ldr	r3, [pc, #148]	; (8005514 <_vfiprintf_r+0x224>)
 8005480:	bb03      	cbnz	r3, 80054c4 <_vfiprintf_r+0x1d4>
 8005482:	9b03      	ldr	r3, [sp, #12]
 8005484:	3307      	adds	r3, #7
 8005486:	f023 0307 	bic.w	r3, r3, #7
 800548a:	3308      	adds	r3, #8
 800548c:	9303      	str	r3, [sp, #12]
 800548e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005490:	444b      	add	r3, r9
 8005492:	9309      	str	r3, [sp, #36]	; 0x24
 8005494:	e74c      	b.n	8005330 <_vfiprintf_r+0x40>
 8005496:	fb00 3202 	mla	r2, r0, r2, r3
 800549a:	2101      	movs	r1, #1
 800549c:	e786      	b.n	80053ac <_vfiprintf_r+0xbc>
 800549e:	2300      	movs	r3, #0
 80054a0:	9305      	str	r3, [sp, #20]
 80054a2:	4618      	mov	r0, r3
 80054a4:	250a      	movs	r5, #10
 80054a6:	4688      	mov	r8, r1
 80054a8:	3101      	adds	r1, #1
 80054aa:	f898 2000 	ldrb.w	r2, [r8]
 80054ae:	3a30      	subs	r2, #48	; 0x30
 80054b0:	2a09      	cmp	r2, #9
 80054b2:	d903      	bls.n	80054bc <_vfiprintf_r+0x1cc>
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d0c5      	beq.n	8005444 <_vfiprintf_r+0x154>
 80054b8:	9005      	str	r0, [sp, #20]
 80054ba:	e7c3      	b.n	8005444 <_vfiprintf_r+0x154>
 80054bc:	fb05 2000 	mla	r0, r5, r0, r2
 80054c0:	2301      	movs	r3, #1
 80054c2:	e7f0      	b.n	80054a6 <_vfiprintf_r+0x1b6>
 80054c4:	ab03      	add	r3, sp, #12
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	4622      	mov	r2, r4
 80054ca:	4b13      	ldr	r3, [pc, #76]	; (8005518 <_vfiprintf_r+0x228>)
 80054cc:	a904      	add	r1, sp, #16
 80054ce:	4630      	mov	r0, r6
 80054d0:	f3af 8000 	nop.w
 80054d4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80054d8:	4681      	mov	r9, r0
 80054da:	d1d8      	bne.n	800548e <_vfiprintf_r+0x19e>
 80054dc:	89a3      	ldrh	r3, [r4, #12]
 80054de:	065b      	lsls	r3, r3, #25
 80054e0:	f53f af7d 	bmi.w	80053de <_vfiprintf_r+0xee>
 80054e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054e6:	e77c      	b.n	80053e2 <_vfiprintf_r+0xf2>
 80054e8:	ab03      	add	r3, sp, #12
 80054ea:	9300      	str	r3, [sp, #0]
 80054ec:	4622      	mov	r2, r4
 80054ee:	4b0a      	ldr	r3, [pc, #40]	; (8005518 <_vfiprintf_r+0x228>)
 80054f0:	a904      	add	r1, sp, #16
 80054f2:	4630      	mov	r0, r6
 80054f4:	f000 f888 	bl	8005608 <_printf_i>
 80054f8:	e7ec      	b.n	80054d4 <_vfiprintf_r+0x1e4>
 80054fa:	bf00      	nop
 80054fc:	08005960 	.word	0x08005960
 8005500:	080059a4 	.word	0x080059a4
 8005504:	08005980 	.word	0x08005980
 8005508:	08005940 	.word	0x08005940
 800550c:	080059aa 	.word	0x080059aa
 8005510:	080059ae 	.word	0x080059ae
 8005514:	00000000 	.word	0x00000000
 8005518:	080052cd 	.word	0x080052cd

0800551c <_printf_common>:
 800551c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005520:	4691      	mov	r9, r2
 8005522:	461f      	mov	r7, r3
 8005524:	688a      	ldr	r2, [r1, #8]
 8005526:	690b      	ldr	r3, [r1, #16]
 8005528:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800552c:	4293      	cmp	r3, r2
 800552e:	bfb8      	it	lt
 8005530:	4613      	movlt	r3, r2
 8005532:	f8c9 3000 	str.w	r3, [r9]
 8005536:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800553a:	4606      	mov	r6, r0
 800553c:	460c      	mov	r4, r1
 800553e:	b112      	cbz	r2, 8005546 <_printf_common+0x2a>
 8005540:	3301      	adds	r3, #1
 8005542:	f8c9 3000 	str.w	r3, [r9]
 8005546:	6823      	ldr	r3, [r4, #0]
 8005548:	0699      	lsls	r1, r3, #26
 800554a:	bf42      	ittt	mi
 800554c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005550:	3302      	addmi	r3, #2
 8005552:	f8c9 3000 	strmi.w	r3, [r9]
 8005556:	6825      	ldr	r5, [r4, #0]
 8005558:	f015 0506 	ands.w	r5, r5, #6
 800555c:	d107      	bne.n	800556e <_printf_common+0x52>
 800555e:	f104 0a19 	add.w	sl, r4, #25
 8005562:	68e3      	ldr	r3, [r4, #12]
 8005564:	f8d9 2000 	ldr.w	r2, [r9]
 8005568:	1a9b      	subs	r3, r3, r2
 800556a:	429d      	cmp	r5, r3
 800556c:	db29      	blt.n	80055c2 <_printf_common+0xa6>
 800556e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005572:	6822      	ldr	r2, [r4, #0]
 8005574:	3300      	adds	r3, #0
 8005576:	bf18      	it	ne
 8005578:	2301      	movne	r3, #1
 800557a:	0692      	lsls	r2, r2, #26
 800557c:	d42e      	bmi.n	80055dc <_printf_common+0xc0>
 800557e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005582:	4639      	mov	r1, r7
 8005584:	4630      	mov	r0, r6
 8005586:	47c0      	blx	r8
 8005588:	3001      	adds	r0, #1
 800558a:	d021      	beq.n	80055d0 <_printf_common+0xb4>
 800558c:	6823      	ldr	r3, [r4, #0]
 800558e:	68e5      	ldr	r5, [r4, #12]
 8005590:	f8d9 2000 	ldr.w	r2, [r9]
 8005594:	f003 0306 	and.w	r3, r3, #6
 8005598:	2b04      	cmp	r3, #4
 800559a:	bf08      	it	eq
 800559c:	1aad      	subeq	r5, r5, r2
 800559e:	68a3      	ldr	r3, [r4, #8]
 80055a0:	6922      	ldr	r2, [r4, #16]
 80055a2:	bf0c      	ite	eq
 80055a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055a8:	2500      	movne	r5, #0
 80055aa:	4293      	cmp	r3, r2
 80055ac:	bfc4      	itt	gt
 80055ae:	1a9b      	subgt	r3, r3, r2
 80055b0:	18ed      	addgt	r5, r5, r3
 80055b2:	f04f 0900 	mov.w	r9, #0
 80055b6:	341a      	adds	r4, #26
 80055b8:	454d      	cmp	r5, r9
 80055ba:	d11b      	bne.n	80055f4 <_printf_common+0xd8>
 80055bc:	2000      	movs	r0, #0
 80055be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055c2:	2301      	movs	r3, #1
 80055c4:	4652      	mov	r2, sl
 80055c6:	4639      	mov	r1, r7
 80055c8:	4630      	mov	r0, r6
 80055ca:	47c0      	blx	r8
 80055cc:	3001      	adds	r0, #1
 80055ce:	d103      	bne.n	80055d8 <_printf_common+0xbc>
 80055d0:	f04f 30ff 	mov.w	r0, #4294967295
 80055d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055d8:	3501      	adds	r5, #1
 80055da:	e7c2      	b.n	8005562 <_printf_common+0x46>
 80055dc:	18e1      	adds	r1, r4, r3
 80055de:	1c5a      	adds	r2, r3, #1
 80055e0:	2030      	movs	r0, #48	; 0x30
 80055e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055e6:	4422      	add	r2, r4
 80055e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80055ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80055f0:	3302      	adds	r3, #2
 80055f2:	e7c4      	b.n	800557e <_printf_common+0x62>
 80055f4:	2301      	movs	r3, #1
 80055f6:	4622      	mov	r2, r4
 80055f8:	4639      	mov	r1, r7
 80055fa:	4630      	mov	r0, r6
 80055fc:	47c0      	blx	r8
 80055fe:	3001      	adds	r0, #1
 8005600:	d0e6      	beq.n	80055d0 <_printf_common+0xb4>
 8005602:	f109 0901 	add.w	r9, r9, #1
 8005606:	e7d7      	b.n	80055b8 <_printf_common+0x9c>

08005608 <_printf_i>:
 8005608:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800560c:	4617      	mov	r7, r2
 800560e:	7e0a      	ldrb	r2, [r1, #24]
 8005610:	b085      	sub	sp, #20
 8005612:	2a6e      	cmp	r2, #110	; 0x6e
 8005614:	4698      	mov	r8, r3
 8005616:	4606      	mov	r6, r0
 8005618:	460c      	mov	r4, r1
 800561a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800561c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8005620:	f000 80bc 	beq.w	800579c <_printf_i+0x194>
 8005624:	d81a      	bhi.n	800565c <_printf_i+0x54>
 8005626:	2a63      	cmp	r2, #99	; 0x63
 8005628:	d02e      	beq.n	8005688 <_printf_i+0x80>
 800562a:	d80a      	bhi.n	8005642 <_printf_i+0x3a>
 800562c:	2a00      	cmp	r2, #0
 800562e:	f000 80c8 	beq.w	80057c2 <_printf_i+0x1ba>
 8005632:	2a58      	cmp	r2, #88	; 0x58
 8005634:	f000 808a 	beq.w	800574c <_printf_i+0x144>
 8005638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800563c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8005640:	e02a      	b.n	8005698 <_printf_i+0x90>
 8005642:	2a64      	cmp	r2, #100	; 0x64
 8005644:	d001      	beq.n	800564a <_printf_i+0x42>
 8005646:	2a69      	cmp	r2, #105	; 0x69
 8005648:	d1f6      	bne.n	8005638 <_printf_i+0x30>
 800564a:	6821      	ldr	r1, [r4, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005652:	d023      	beq.n	800569c <_printf_i+0x94>
 8005654:	1d11      	adds	r1, r2, #4
 8005656:	6019      	str	r1, [r3, #0]
 8005658:	6813      	ldr	r3, [r2, #0]
 800565a:	e027      	b.n	80056ac <_printf_i+0xa4>
 800565c:	2a73      	cmp	r2, #115	; 0x73
 800565e:	f000 80b4 	beq.w	80057ca <_printf_i+0x1c2>
 8005662:	d808      	bhi.n	8005676 <_printf_i+0x6e>
 8005664:	2a6f      	cmp	r2, #111	; 0x6f
 8005666:	d02a      	beq.n	80056be <_printf_i+0xb6>
 8005668:	2a70      	cmp	r2, #112	; 0x70
 800566a:	d1e5      	bne.n	8005638 <_printf_i+0x30>
 800566c:	680a      	ldr	r2, [r1, #0]
 800566e:	f042 0220 	orr.w	r2, r2, #32
 8005672:	600a      	str	r2, [r1, #0]
 8005674:	e003      	b.n	800567e <_printf_i+0x76>
 8005676:	2a75      	cmp	r2, #117	; 0x75
 8005678:	d021      	beq.n	80056be <_printf_i+0xb6>
 800567a:	2a78      	cmp	r2, #120	; 0x78
 800567c:	d1dc      	bne.n	8005638 <_printf_i+0x30>
 800567e:	2278      	movs	r2, #120	; 0x78
 8005680:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8005684:	496e      	ldr	r1, [pc, #440]	; (8005840 <_printf_i+0x238>)
 8005686:	e064      	b.n	8005752 <_printf_i+0x14a>
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800568e:	1d11      	adds	r1, r2, #4
 8005690:	6019      	str	r1, [r3, #0]
 8005692:	6813      	ldr	r3, [r2, #0]
 8005694:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005698:	2301      	movs	r3, #1
 800569a:	e0a3      	b.n	80057e4 <_printf_i+0x1dc>
 800569c:	f011 0f40 	tst.w	r1, #64	; 0x40
 80056a0:	f102 0104 	add.w	r1, r2, #4
 80056a4:	6019      	str	r1, [r3, #0]
 80056a6:	d0d7      	beq.n	8005658 <_printf_i+0x50>
 80056a8:	f9b2 3000 	ldrsh.w	r3, [r2]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	da03      	bge.n	80056b8 <_printf_i+0xb0>
 80056b0:	222d      	movs	r2, #45	; 0x2d
 80056b2:	425b      	negs	r3, r3
 80056b4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80056b8:	4962      	ldr	r1, [pc, #392]	; (8005844 <_printf_i+0x23c>)
 80056ba:	220a      	movs	r2, #10
 80056bc:	e017      	b.n	80056ee <_printf_i+0xe6>
 80056be:	6820      	ldr	r0, [r4, #0]
 80056c0:	6819      	ldr	r1, [r3, #0]
 80056c2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80056c6:	d003      	beq.n	80056d0 <_printf_i+0xc8>
 80056c8:	1d08      	adds	r0, r1, #4
 80056ca:	6018      	str	r0, [r3, #0]
 80056cc:	680b      	ldr	r3, [r1, #0]
 80056ce:	e006      	b.n	80056de <_printf_i+0xd6>
 80056d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80056d4:	f101 0004 	add.w	r0, r1, #4
 80056d8:	6018      	str	r0, [r3, #0]
 80056da:	d0f7      	beq.n	80056cc <_printf_i+0xc4>
 80056dc:	880b      	ldrh	r3, [r1, #0]
 80056de:	4959      	ldr	r1, [pc, #356]	; (8005844 <_printf_i+0x23c>)
 80056e0:	2a6f      	cmp	r2, #111	; 0x6f
 80056e2:	bf14      	ite	ne
 80056e4:	220a      	movne	r2, #10
 80056e6:	2208      	moveq	r2, #8
 80056e8:	2000      	movs	r0, #0
 80056ea:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80056ee:	6865      	ldr	r5, [r4, #4]
 80056f0:	60a5      	str	r5, [r4, #8]
 80056f2:	2d00      	cmp	r5, #0
 80056f4:	f2c0 809c 	blt.w	8005830 <_printf_i+0x228>
 80056f8:	6820      	ldr	r0, [r4, #0]
 80056fa:	f020 0004 	bic.w	r0, r0, #4
 80056fe:	6020      	str	r0, [r4, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d13f      	bne.n	8005784 <_printf_i+0x17c>
 8005704:	2d00      	cmp	r5, #0
 8005706:	f040 8095 	bne.w	8005834 <_printf_i+0x22c>
 800570a:	4675      	mov	r5, lr
 800570c:	2a08      	cmp	r2, #8
 800570e:	d10b      	bne.n	8005728 <_printf_i+0x120>
 8005710:	6823      	ldr	r3, [r4, #0]
 8005712:	07da      	lsls	r2, r3, #31
 8005714:	d508      	bpl.n	8005728 <_printf_i+0x120>
 8005716:	6923      	ldr	r3, [r4, #16]
 8005718:	6862      	ldr	r2, [r4, #4]
 800571a:	429a      	cmp	r2, r3
 800571c:	bfde      	ittt	le
 800571e:	2330      	movle	r3, #48	; 0x30
 8005720:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005724:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005728:	ebae 0305 	sub.w	r3, lr, r5
 800572c:	6123      	str	r3, [r4, #16]
 800572e:	f8cd 8000 	str.w	r8, [sp]
 8005732:	463b      	mov	r3, r7
 8005734:	aa03      	add	r2, sp, #12
 8005736:	4621      	mov	r1, r4
 8005738:	4630      	mov	r0, r6
 800573a:	f7ff feef 	bl	800551c <_printf_common>
 800573e:	3001      	adds	r0, #1
 8005740:	d155      	bne.n	80057ee <_printf_i+0x1e6>
 8005742:	f04f 30ff 	mov.w	r0, #4294967295
 8005746:	b005      	add	sp, #20
 8005748:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800574c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005750:	493c      	ldr	r1, [pc, #240]	; (8005844 <_printf_i+0x23c>)
 8005752:	6822      	ldr	r2, [r4, #0]
 8005754:	6818      	ldr	r0, [r3, #0]
 8005756:	f012 0f80 	tst.w	r2, #128	; 0x80
 800575a:	f100 0504 	add.w	r5, r0, #4
 800575e:	601d      	str	r5, [r3, #0]
 8005760:	d001      	beq.n	8005766 <_printf_i+0x15e>
 8005762:	6803      	ldr	r3, [r0, #0]
 8005764:	e002      	b.n	800576c <_printf_i+0x164>
 8005766:	0655      	lsls	r5, r2, #25
 8005768:	d5fb      	bpl.n	8005762 <_printf_i+0x15a>
 800576a:	8803      	ldrh	r3, [r0, #0]
 800576c:	07d0      	lsls	r0, r2, #31
 800576e:	bf44      	itt	mi
 8005770:	f042 0220 	orrmi.w	r2, r2, #32
 8005774:	6022      	strmi	r2, [r4, #0]
 8005776:	b91b      	cbnz	r3, 8005780 <_printf_i+0x178>
 8005778:	6822      	ldr	r2, [r4, #0]
 800577a:	f022 0220 	bic.w	r2, r2, #32
 800577e:	6022      	str	r2, [r4, #0]
 8005780:	2210      	movs	r2, #16
 8005782:	e7b1      	b.n	80056e8 <_printf_i+0xe0>
 8005784:	4675      	mov	r5, lr
 8005786:	fbb3 f0f2 	udiv	r0, r3, r2
 800578a:	fb02 3310 	mls	r3, r2, r0, r3
 800578e:	5ccb      	ldrb	r3, [r1, r3]
 8005790:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005794:	4603      	mov	r3, r0
 8005796:	2800      	cmp	r0, #0
 8005798:	d1f5      	bne.n	8005786 <_printf_i+0x17e>
 800579a:	e7b7      	b.n	800570c <_printf_i+0x104>
 800579c:	6808      	ldr	r0, [r1, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	6949      	ldr	r1, [r1, #20]
 80057a2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80057a6:	d004      	beq.n	80057b2 <_printf_i+0x1aa>
 80057a8:	1d10      	adds	r0, r2, #4
 80057aa:	6018      	str	r0, [r3, #0]
 80057ac:	6813      	ldr	r3, [r2, #0]
 80057ae:	6019      	str	r1, [r3, #0]
 80057b0:	e007      	b.n	80057c2 <_printf_i+0x1ba>
 80057b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80057b6:	f102 0004 	add.w	r0, r2, #4
 80057ba:	6018      	str	r0, [r3, #0]
 80057bc:	6813      	ldr	r3, [r2, #0]
 80057be:	d0f6      	beq.n	80057ae <_printf_i+0x1a6>
 80057c0:	8019      	strh	r1, [r3, #0]
 80057c2:	2300      	movs	r3, #0
 80057c4:	6123      	str	r3, [r4, #16]
 80057c6:	4675      	mov	r5, lr
 80057c8:	e7b1      	b.n	800572e <_printf_i+0x126>
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	1d11      	adds	r1, r2, #4
 80057ce:	6019      	str	r1, [r3, #0]
 80057d0:	6815      	ldr	r5, [r2, #0]
 80057d2:	6862      	ldr	r2, [r4, #4]
 80057d4:	2100      	movs	r1, #0
 80057d6:	4628      	mov	r0, r5
 80057d8:	f7fa fd02 	bl	80001e0 <memchr>
 80057dc:	b108      	cbz	r0, 80057e2 <_printf_i+0x1da>
 80057de:	1b40      	subs	r0, r0, r5
 80057e0:	6060      	str	r0, [r4, #4]
 80057e2:	6863      	ldr	r3, [r4, #4]
 80057e4:	6123      	str	r3, [r4, #16]
 80057e6:	2300      	movs	r3, #0
 80057e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057ec:	e79f      	b.n	800572e <_printf_i+0x126>
 80057ee:	6923      	ldr	r3, [r4, #16]
 80057f0:	462a      	mov	r2, r5
 80057f2:	4639      	mov	r1, r7
 80057f4:	4630      	mov	r0, r6
 80057f6:	47c0      	blx	r8
 80057f8:	3001      	adds	r0, #1
 80057fa:	d0a2      	beq.n	8005742 <_printf_i+0x13a>
 80057fc:	6823      	ldr	r3, [r4, #0]
 80057fe:	079b      	lsls	r3, r3, #30
 8005800:	d507      	bpl.n	8005812 <_printf_i+0x20a>
 8005802:	2500      	movs	r5, #0
 8005804:	f104 0919 	add.w	r9, r4, #25
 8005808:	68e3      	ldr	r3, [r4, #12]
 800580a:	9a03      	ldr	r2, [sp, #12]
 800580c:	1a9b      	subs	r3, r3, r2
 800580e:	429d      	cmp	r5, r3
 8005810:	db05      	blt.n	800581e <_printf_i+0x216>
 8005812:	68e0      	ldr	r0, [r4, #12]
 8005814:	9b03      	ldr	r3, [sp, #12]
 8005816:	4298      	cmp	r0, r3
 8005818:	bfb8      	it	lt
 800581a:	4618      	movlt	r0, r3
 800581c:	e793      	b.n	8005746 <_printf_i+0x13e>
 800581e:	2301      	movs	r3, #1
 8005820:	464a      	mov	r2, r9
 8005822:	4639      	mov	r1, r7
 8005824:	4630      	mov	r0, r6
 8005826:	47c0      	blx	r8
 8005828:	3001      	adds	r0, #1
 800582a:	d08a      	beq.n	8005742 <_printf_i+0x13a>
 800582c:	3501      	adds	r5, #1
 800582e:	e7eb      	b.n	8005808 <_printf_i+0x200>
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1a7      	bne.n	8005784 <_printf_i+0x17c>
 8005834:	780b      	ldrb	r3, [r1, #0]
 8005836:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800583a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800583e:	e765      	b.n	800570c <_printf_i+0x104>
 8005840:	080059c6 	.word	0x080059c6
 8005844:	080059b5 	.word	0x080059b5

08005848 <_read_r>:
 8005848:	b538      	push	{r3, r4, r5, lr}
 800584a:	4c07      	ldr	r4, [pc, #28]	; (8005868 <_read_r+0x20>)
 800584c:	4605      	mov	r5, r0
 800584e:	4608      	mov	r0, r1
 8005850:	4611      	mov	r1, r2
 8005852:	2200      	movs	r2, #0
 8005854:	6022      	str	r2, [r4, #0]
 8005856:	461a      	mov	r2, r3
 8005858:	f7fe fbc6 	bl	8003fe8 <_read>
 800585c:	1c43      	adds	r3, r0, #1
 800585e:	d102      	bne.n	8005866 <_read_r+0x1e>
 8005860:	6823      	ldr	r3, [r4, #0]
 8005862:	b103      	cbz	r3, 8005866 <_read_r+0x1e>
 8005864:	602b      	str	r3, [r5, #0]
 8005866:	bd38      	pop	{r3, r4, r5, pc}
 8005868:	20000708 	.word	0x20000708

0800586c <_fstat_r>:
 800586c:	b538      	push	{r3, r4, r5, lr}
 800586e:	4c07      	ldr	r4, [pc, #28]	; (800588c <_fstat_r+0x20>)
 8005870:	2300      	movs	r3, #0
 8005872:	4605      	mov	r5, r0
 8005874:	4608      	mov	r0, r1
 8005876:	4611      	mov	r1, r2
 8005878:	6023      	str	r3, [r4, #0]
 800587a:	f7fe fbee 	bl	800405a <_fstat>
 800587e:	1c43      	adds	r3, r0, #1
 8005880:	d102      	bne.n	8005888 <_fstat_r+0x1c>
 8005882:	6823      	ldr	r3, [r4, #0]
 8005884:	b103      	cbz	r3, 8005888 <_fstat_r+0x1c>
 8005886:	602b      	str	r3, [r5, #0]
 8005888:	bd38      	pop	{r3, r4, r5, pc}
 800588a:	bf00      	nop
 800588c:	20000708 	.word	0x20000708

08005890 <_isatty_r>:
 8005890:	b538      	push	{r3, r4, r5, lr}
 8005892:	4c06      	ldr	r4, [pc, #24]	; (80058ac <_isatty_r+0x1c>)
 8005894:	2300      	movs	r3, #0
 8005896:	4605      	mov	r5, r0
 8005898:	4608      	mov	r0, r1
 800589a:	6023      	str	r3, [r4, #0]
 800589c:	f7fe fbe2 	bl	8004064 <_isatty>
 80058a0:	1c43      	adds	r3, r0, #1
 80058a2:	d102      	bne.n	80058aa <_isatty_r+0x1a>
 80058a4:	6823      	ldr	r3, [r4, #0]
 80058a6:	b103      	cbz	r3, 80058aa <_isatty_r+0x1a>
 80058a8:	602b      	str	r3, [r5, #0]
 80058aa:	bd38      	pop	{r3, r4, r5, pc}
 80058ac:	20000708 	.word	0x20000708

080058b0 <_init>:
 80058b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058b2:	bf00      	nop
 80058b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058b6:	bc08      	pop	{r3}
 80058b8:	469e      	mov	lr, r3
 80058ba:	4770      	bx	lr

080058bc <_fini>:
 80058bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058be:	bf00      	nop
 80058c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058c2:	bc08      	pop	{r3}
 80058c4:	469e      	mov	lr, r3
 80058c6:	4770      	bx	lr
